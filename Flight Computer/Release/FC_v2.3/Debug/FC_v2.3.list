
FC_v2.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017ee4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000024e0  08018098  08018098  00028098  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a578  0801a578  000302c4  2**0
                  CONTENTS
  4 .ARM          00000008  0801a578  0801a578  0002a578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a580  0801a580  000302c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801a580  0801a580  0002a580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a588  0801a588  0002a588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c4  20000000  0801a58c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000302c4  2**0
                  CONTENTS
 10 .bss          0000628c  200002c4  200002c4  000302c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000a00  20006550  20006550  000302c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000302c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00071537  00000000  00000000  000302f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009fd4  00000000  00000000  000a182b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003a08  00000000  00000000  000ab800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003710  00000000  00000000  000af208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000377d0  00000000  00000000  000b2918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00043441  00000000  00000000  000ea0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00114455  00000000  00000000  0012d529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0024197e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00010fc8  00000000  00000000  002419d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000cc  00000000  00000000  0025299c  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  00252a68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002c4 	.word	0x200002c4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801807c 	.word	0x0801807c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002c8 	.word	0x200002c8
 80001ec:	0801807c 	.word	0x0801807c

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a4 	b.w	8001028 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468c      	mov	ip, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 8083 	bne.w	8000e7a <__udivmoddi4+0x116>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d947      	bls.n	8000e0a <__udivmoddi4+0xa6>
 8000d7a:	fab2 f282 	clz	r2, r2
 8000d7e:	b142      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	f1c2 0020 	rsb	r0, r2, #32
 8000d84:	fa24 f000 	lsr.w	r0, r4, r0
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	4097      	lsls	r7, r2
 8000d8c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d90:	4094      	lsls	r4, r2
 8000d92:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d96:	0c23      	lsrs	r3, r4, #16
 8000d98:	fbbc f6f8 	udiv	r6, ip, r8
 8000d9c:	fa1f fe87 	uxth.w	lr, r7
 8000da0:	fb08 c116 	mls	r1, r8, r6, ip
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x60>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000db6:	f080 8119 	bcs.w	8000fec <__udivmoddi4+0x288>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 8116 	bls.w	8000fec <__udivmoddi4+0x288>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dcc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d909      	bls.n	8000df0 <__udivmoddi4+0x8c>
 8000ddc:	193c      	adds	r4, r7, r4
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de2:	f080 8105 	bcs.w	8000ff0 <__udivmoddi4+0x28c>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f240 8102 	bls.w	8000ff0 <__udivmoddi4+0x28c>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df4:	eba4 040e 	sub.w	r4, r4, lr
 8000df8:	2600      	movs	r6, #0
 8000dfa:	b11d      	cbz	r5, 8000e04 <__udivmoddi4+0xa0>
 8000dfc:	40d4      	lsrs	r4, r2
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e9c5 4300 	strd	r4, r3, [r5]
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xaa>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f282 	clz	r2, r2
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	d150      	bne.n	8000eb8 <__udivmoddi4+0x154>
 8000e16:	1bcb      	subs	r3, r1, r7
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	fa1f f887 	uxth.w	r8, r7
 8000e20:	2601      	movs	r6, #1
 8000e22:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e26:	0c21      	lsrs	r1, r4, #16
 8000e28:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb08 f30c 	mul.w	r3, r8, ip
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0xe4>
 8000e38:	1879      	adds	r1, r7, r1
 8000e3a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0xe2>
 8000e40:	428b      	cmp	r3, r1
 8000e42:	f200 80e9 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e46:	4684      	mov	ip, r0
 8000e48:	1ac9      	subs	r1, r1, r3
 8000e4a:	b2a3      	uxth	r3, r4
 8000e4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e50:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e54:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e58:	fb08 f800 	mul.w	r8, r8, r0
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	d907      	bls.n	8000e70 <__udivmoddi4+0x10c>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x10a>
 8000e68:	45a0      	cmp	r8, r4
 8000e6a:	f200 80d9 	bhi.w	8001020 <__udivmoddi4+0x2bc>
 8000e6e:	4618      	mov	r0, r3
 8000e70:	eba4 0408 	sub.w	r4, r4, r8
 8000e74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e78:	e7bf      	b.n	8000dfa <__udivmoddi4+0x96>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d909      	bls.n	8000e92 <__udivmoddi4+0x12e>
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	f000 80b1 	beq.w	8000fe6 <__udivmoddi4+0x282>
 8000e84:	2600      	movs	r6, #0
 8000e86:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	fab3 f683 	clz	r6, r3
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d14a      	bne.n	8000f30 <__udivmoddi4+0x1cc>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d302      	bcc.n	8000ea4 <__udivmoddi4+0x140>
 8000e9e:	4282      	cmp	r2, r0
 8000ea0:	f200 80b8 	bhi.w	8001014 <__udivmoddi4+0x2b0>
 8000ea4:	1a84      	subs	r4, r0, r2
 8000ea6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	468c      	mov	ip, r1
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	d0a8      	beq.n	8000e04 <__udivmoddi4+0xa0>
 8000eb2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ec0:	4097      	lsls	r7, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eca:	40d9      	lsrs	r1, r3
 8000ecc:	4330      	orrs	r0, r6
 8000ece:	0c03      	lsrs	r3, r0, #16
 8000ed0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ed4:	fa1f f887 	uxth.w	r8, r7
 8000ed8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000edc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ee0:	fb06 f108 	mul.w	r1, r6, r8
 8000ee4:	4299      	cmp	r1, r3
 8000ee6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eea:	d909      	bls.n	8000f00 <__udivmoddi4+0x19c>
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ef2:	f080 808d 	bcs.w	8001010 <__udivmoddi4+0x2ac>
 8000ef6:	4299      	cmp	r1, r3
 8000ef8:	f240 808a 	bls.w	8001010 <__udivmoddi4+0x2ac>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	1a5b      	subs	r3, r3, r1
 8000f02:	b281      	uxth	r1, r0
 8000f04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb00 f308 	mul.w	r3, r0, r8
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x1c4>
 8000f18:	1879      	adds	r1, r7, r1
 8000f1a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1e:	d273      	bcs.n	8001008 <__udivmoddi4+0x2a4>
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d971      	bls.n	8001008 <__udivmoddi4+0x2a4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4439      	add	r1, r7
 8000f28:	1acb      	subs	r3, r1, r3
 8000f2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f2e:	e778      	b.n	8000e22 <__udivmoddi4+0xbe>
 8000f30:	f1c6 0c20 	rsb	ip, r6, #32
 8000f34:	fa03 f406 	lsl.w	r4, r3, r6
 8000f38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f3c:	431c      	orrs	r4, r3
 8000f3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f42:	fa01 f306 	lsl.w	r3, r1, r6
 8000f46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	0c3b      	lsrs	r3, r7, #16
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fa1f f884 	uxth.w	r8, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f62:	fb09 fa08 	mul.w	sl, r9, r8
 8000f66:	458a      	cmp	sl, r1
 8000f68:	fa02 f206 	lsl.w	r2, r2, r6
 8000f6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x220>
 8000f72:	1861      	adds	r1, r4, r1
 8000f74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f78:	d248      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000f7a:	458a      	cmp	sl, r1
 8000f7c:	d946      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000f7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f82:	4421      	add	r1, r4
 8000f84:	eba1 010a 	sub.w	r1, r1, sl
 8000f88:	b2bf      	uxth	r7, r7
 8000f8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f96:	fb00 f808 	mul.w	r8, r0, r8
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x24a>
 8000f9e:	19e7      	adds	r7, r4, r7
 8000fa0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fa4:	d22e      	bcs.n	8001004 <__udivmoddi4+0x2a0>
 8000fa6:	45b8      	cmp	r8, r7
 8000fa8:	d92c      	bls.n	8001004 <__udivmoddi4+0x2a0>
 8000faa:	3802      	subs	r0, #2
 8000fac:	4427      	add	r7, r4
 8000fae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fb2:	eba7 0708 	sub.w	r7, r7, r8
 8000fb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fba:	454f      	cmp	r7, r9
 8000fbc:	46c6      	mov	lr, r8
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	d31a      	bcc.n	8000ff8 <__udivmoddi4+0x294>
 8000fc2:	d017      	beq.n	8000ff4 <__udivmoddi4+0x290>
 8000fc4:	b15d      	cbz	r5, 8000fde <__udivmoddi4+0x27a>
 8000fc6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fca:	eb67 0701 	sbc.w	r7, r7, r1
 8000fce:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fd2:	40f2      	lsrs	r2, r6
 8000fd4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fd8:	40f7      	lsrs	r7, r6
 8000fda:	e9c5 2700 	strd	r2, r7, [r5]
 8000fde:	2600      	movs	r6, #0
 8000fe0:	4631      	mov	r1, r6
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e70b      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e9      	b.n	8000dc4 <__udivmoddi4+0x60>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6fd      	b.n	8000df0 <__udivmoddi4+0x8c>
 8000ff4:	4543      	cmp	r3, r8
 8000ff6:	d2e5      	bcs.n	8000fc4 <__udivmoddi4+0x260>
 8000ff8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ffc:	eb69 0104 	sbc.w	r1, r9, r4
 8001000:	3801      	subs	r0, #1
 8001002:	e7df      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001004:	4608      	mov	r0, r1
 8001006:	e7d2      	b.n	8000fae <__udivmoddi4+0x24a>
 8001008:	4660      	mov	r0, ip
 800100a:	e78d      	b.n	8000f28 <__udivmoddi4+0x1c4>
 800100c:	4681      	mov	r9, r0
 800100e:	e7b9      	b.n	8000f84 <__udivmoddi4+0x220>
 8001010:	4666      	mov	r6, ip
 8001012:	e775      	b.n	8000f00 <__udivmoddi4+0x19c>
 8001014:	4630      	mov	r0, r6
 8001016:	e74a      	b.n	8000eae <__udivmoddi4+0x14a>
 8001018:	f1ac 0c02 	sub.w	ip, ip, #2
 800101c:	4439      	add	r1, r7
 800101e:	e713      	b.n	8000e48 <__udivmoddi4+0xe4>
 8001020:	3802      	subs	r0, #2
 8001022:	443c      	add	r4, r7
 8001024:	e724      	b.n	8000e70 <__udivmoddi4+0x10c>
 8001026:	bf00      	nop

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <println>:

#include <MRT_helpers.h>
#include <MRT_setup.h>
#include <tim.h>

void println(char* s){
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	#if PRINT
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t*) s, strlen(s), HAL_MAX_DELAY);
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff f8e5 	bl	8000204 <strlen>
 800103a:	4603      	mov	r3, r0
 800103c:	b29a      	uxth	r2, r3
 800103e:	f04f 33ff 	mov.w	r3, #4294967295
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	4806      	ldr	r0, [pc, #24]	; (8001060 <println+0x34>)
 8001046:	f00d fa52 	bl	800e4ee <HAL_UART_Transmit>
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t*) "\r\n", 2, HAL_MAX_DELAY);
 800104a:	f04f 33ff 	mov.w	r3, #4294967295
 800104e:	2202      	movs	r2, #2
 8001050:	4904      	ldr	r1, [pc, #16]	; (8001064 <println+0x38>)
 8001052:	4803      	ldr	r0, [pc, #12]	; (8001060 <println+0x34>)
 8001054:	f00d fa4b 	bl	800e4ee <HAL_UART_Transmit>
	#endif
}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20005dfc 	.word	0x20005dfc
 8001064:	08018098 	.word	0x08018098

08001068 <print>:

void print(char* s){
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	#if PRINT
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t*) s, strlen(s), HAL_MAX_DELAY);
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff f8c7 	bl	8000204 <strlen>
 8001076:	4603      	mov	r3, r0
 8001078:	b29a      	uxth	r2, r3
 800107a:	f04f 33ff 	mov.w	r3, #4294967295
 800107e:	6879      	ldr	r1, [r7, #4]
 8001080:	4803      	ldr	r0, [pc, #12]	; (8001090 <print+0x28>)
 8001082:	f00d fa34 	bl	800e4ee <HAL_UART_Transmit>
	#endif
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20005dfc 	.word	0x20005dfc

08001094 <tone_freq>:
void no_print(char* s){
	//TODO Buffer function for Iridium
}

// buzz at particular frequency
void tone_freq(uint32_t duration, uint32_t repeats, uint32_t freq) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
	#if !NO_BUZZ
	// TIM2 base frequency is 90 MHz, PSC = 90-1
	// can calculate required ARR value
	TIM2->ARR = 1000000 / freq;
 80010a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010a4:	491c      	ldr	r1, [pc, #112]	; (8001118 <tone_freq+0x84>)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80010ac:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->EGR |= TIM_EGR_UG;
 80010ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010b2:	695b      	ldr	r3, [r3, #20]
 80010b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	6153      	str	r3, [r2, #20]

	for (uint32_t i = 0; i < repeats; i++) {
 80010be:	2300      	movs	r3, #0
 80010c0:	617b      	str	r3, [r7, #20]
 80010c2:	e01f      	b.n	8001104 <tone_freq+0x70>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80010c4:	2108      	movs	r1, #8
 80010c6:	4815      	ldr	r0, [pc, #84]	; (800111c <tone_freq+0x88>)
 80010c8:	f00c fa32 	bl	800d530 <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(POWER_ON_EXT_LED_GPIO_Port, POWER_ON_EXT_LED_Pin, SET);
 80010cc:	2201      	movs	r2, #1
 80010ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010d2:	4813      	ldr	r0, [pc, #76]	; (8001120 <tone_freq+0x8c>)
 80010d4:	f008 fdca 	bl	8009c6c <HAL_GPIO_WritePin>
		HAL_Delay(duration);
 80010d8:	68f8      	ldr	r0, [r7, #12]
 80010da:	f007 febb 	bl	8008e54 <HAL_Delay>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 80010de:	2108      	movs	r1, #8
 80010e0:	480e      	ldr	r0, [pc, #56]	; (800111c <tone_freq+0x88>)
 80010e2:	f00c faed 	bl	800d6c0 <HAL_TIM_PWM_Stop>
		HAL_GPIO_WritePin(POWER_ON_EXT_LED_GPIO_Port, POWER_ON_EXT_LED_Pin, RESET);
 80010e6:	2200      	movs	r2, #0
 80010e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010ec:	480c      	ldr	r0, [pc, #48]	; (8001120 <tone_freq+0x8c>)
 80010ee:	f008 fdbd 	bl	8009c6c <HAL_GPIO_WritePin>
		if (repeats > 1)
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d902      	bls.n	80010fe <tone_freq+0x6a>
			HAL_Delay(duration);
 80010f8:	68f8      	ldr	r0, [r7, #12]
 80010fa:	f007 feab 	bl	8008e54 <HAL_Delay>
	for (uint32_t i = 0; i < repeats; i++) {
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	3301      	adds	r3, #1
 8001102:	617b      	str	r3, [r7, #20]
 8001104:	697a      	ldr	r2, [r7, #20]
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	429a      	cmp	r2, r3
 800110a:	d3db      	bcc.n	80010c4 <tone_freq+0x30>
	}
	#endif
}
 800110c:	bf00      	nop
 800110e:	bf00      	nop
 8001110:	3718      	adds	r7, #24
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	000f4240 	.word	0x000f4240
 800111c:	20005d70 	.word	0x20005d70
 8001120:	40020400 	.word	0x40020400

08001124 <buzz_success>:
void buzz_success(void) { tone_freq(BUZZ_SUCCESS_DURATION, BUZZ_SUCCESS_REPEATS, BUZZ_SUCCESS_FREQ); }
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
 8001128:	f240 4216 	movw	r2, #1046	; 0x416
 800112c:	2102      	movs	r1, #2
 800112e:	204b      	movs	r0, #75	; 0x4b
 8001130:	f7ff ffb0 	bl	8001094 <tone_freq>
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}

08001138 <buzz_startup_success>:
void buzz_failure(void) { tone_freq(BUZZ_FAILURE_DURATION, BUZZ_FAILURE_REPEATS, BUZZ_FAILURE_FREQ); }
void buzz_startup_success(void) {
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 800113e:	2300      	movs	r3, #0
 8001140:	71fb      	strb	r3, [r7, #7]
 8001142:	e008      	b.n	8001156 <buzz_startup_success+0x1e>
		buzz_success();
 8001144:	f7ff ffee 	bl	8001124 <buzz_success>
		HAL_Delay(1000);
 8001148:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800114c:	f007 fe82 	bl	8008e54 <HAL_Delay>
	for (uint8_t i = 0; i < 3; i++) {
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	3301      	adds	r3, #1
 8001154:	71fb      	strb	r3, [r7, #7]
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	2b02      	cmp	r3, #2
 800115a:	d9f3      	bls.n	8001144 <buzz_startup_success+0xc>
	}
}
 800115c:	bf00      	nop
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <MRT_Init>:


//**************************************************//
//PUBLIC FUNCTIONS

void MRT_Init(void){
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
	print((char*) "\r\n\r\n/********MRT Init********/\r\n");
 800116c:	4808      	ldr	r0, [pc, #32]	; (8001190 <MRT_Init+0x28>)
 800116e:	f7ff ff7b 	bl	8001068 <print>
	print((char*) "IWDG Init...");
	MX_IWDG_Init();
	print((char*) "OK\r\n");
	#endif

	MRT_Reinitialize_Peripherals();
 8001172:	f000 f8f3 	bl	800135c <MRT_Reinitialize_Peripherals>

	//Memory
	MRT_MEMORY_Init();
 8001176:	f002 fee7 	bl	8003f48 <MRT_MEMORY_Init>
	MRT_reset_info();
 800117a:	f000 f819 	bl	80011b0 <MRT_reset_info>

	//RTC
	HAL_IWDG_Refresh(&hiwdg);
	MRT_rtc_Init();
 800117e:	f001 fc99 	bl	8002ab4 <MRT_rtc_Init>
		  checkForI2CDevices(huart8,hi2c1);
		  checkForI2CDevices(huart8,hi2c2);
		  checkForI2CDevices(huart8,hi2c3);
		#endif

		MRT_i2c_sensors_Init();
 8001182:	f004 f825 	bl	80051d0 <MRT_i2c_sensors_Init>
	#endif


	//Telemetry
	#if TELEMETRY_THREAD
		MRT_TELEMETRY_Init();
 8001186:	f006 fd3f 	bl	8007c08 <MRT_TELEMETRY_Init>
	#endif

	#if FORCED_EJECTION_STAGE
		   ejection_stage_flag = FORCED_STAGE;
	#endif
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	0801809c 	.word	0x0801809c

08001194 <MRT_Deinit>:




void MRT_Deinit(void){
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
	print((char*) "\r\n\r\n/********MRT Deinit********/\r\n");
 8001198:	4804      	ldr	r0, [pc, #16]	; (80011ac <MRT_Deinit+0x18>)
 800119a:	f7ff ff65 	bl	8001068 <print>

	MRT_Reinitialize_Peripherals();
 800119e:	f000 f8dd 	bl	800135c <MRT_Reinitialize_Peripherals>
	#endif


	//Sensors
	#if SENSORS_THREAD
		MRT_i2c_sensors_Deinit();
 80011a2:	f004 f845 	bl	8005230 <MRT_i2c_sensors_Deinit>
	#endif

    //TODO
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	080180c0 	.word	0x080180c0

080011b0 <MRT_reset_info>:

//**************************************************//
//PRIVATE FUNCTIONS


void MRT_reset_info(void){
 80011b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011b2:	b0a9      	sub	sp, #164	; 0xa4
 80011b4:	af06      	add	r7, sp, #24

	  char buffer[100];
	  sprintf(buffer,"Reset: %i,  WU: %i,  IWDG: %i\r\nPrevious RTC time: %i:%i:%i ::%i\r\n",
 80011b6:	4b51      	ldr	r3, [pc, #324]	; (80012fc <MRT_reset_info+0x14c>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	461e      	mov	r6, r3
 80011bc:	4b50      	ldr	r3, [pc, #320]	; (8001300 <MRT_reset_info+0x150>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	469c      	mov	ip, r3
 80011c2:	4b50      	ldr	r3, [pc, #320]	; (8001304 <MRT_reset_info+0x154>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	461a      	mov	r2, r3
 80011c8:	4b4f      	ldr	r3, [pc, #316]	; (8001308 <MRT_reset_info+0x158>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	4619      	mov	r1, r3
 80011ce:	4b4f      	ldr	r3, [pc, #316]	; (800130c <MRT_reset_info+0x15c>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	461c      	mov	r4, r3
 80011d4:	4b4e      	ldr	r3, [pc, #312]	; (8001310 <MRT_reset_info+0x160>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	461d      	mov	r5, r3
 80011da:	4b4e      	ldr	r3, [pc, #312]	; (8001314 <MRT_reset_info+0x164>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80011e2:	9304      	str	r3, [sp, #16]
 80011e4:	9503      	str	r5, [sp, #12]
 80011e6:	9402      	str	r4, [sp, #8]
 80011e8:	9101      	str	r1, [sp, #4]
 80011ea:	9200      	str	r2, [sp, #0]
 80011ec:	4663      	mov	r3, ip
 80011ee:	4632      	mov	r2, r6
 80011f0:	4949      	ldr	r1, [pc, #292]	; (8001318 <MRT_reset_info+0x168>)
 80011f2:	f012 ff49 	bl	8014088 <siprintf>
			  reset_flag, wu_flag, iwdg_flag, prev_hour, prev_min, prev_sec, prev_subsec);
	  print(buffer);
 80011f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff ff34 	bl	8001068 <print>

	  //Check if IWDG is being deactivated
	  if (iwdg_flag==1){
 8001200:	4b40      	ldr	r3, [pc, #256]	; (8001304 <MRT_reset_info+0x154>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d119      	bne.n	800123c <MRT_reset_info+0x8c>
		  print((char*) "Deactivating IWDG\r\n");
 8001208:	4844      	ldr	r0, [pc, #272]	; (800131c <MRT_reset_info+0x16c>)
 800120a:	f7ff ff2d 	bl	8001068 <print>

		  iwdg_flag = 0; //Flip flag
 800120e:	4b3d      	ldr	r3, [pc, #244]	; (8001304 <MRT_reset_info+0x154>)
 8001210:	2200      	movs	r2, #0
 8001212:	701a      	strb	r2, [r3, #0]

		  //Write new flag to memory
		  rtc_bckp_reg_iwdg = iwdg_flag;
 8001214:	4b3b      	ldr	r3, [pc, #236]	; (8001304 <MRT_reset_info+0x154>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	461a      	mov	r2, r3
 800121a:	4b41      	ldr	r3, [pc, #260]	; (8001320 <MRT_reset_info+0x170>)
 800121c:	601a      	str	r2, [r3, #0]
		  ext_flash_iwdg = iwdg_flag;
 800121e:	4b39      	ldr	r3, [pc, #228]	; (8001304 <MRT_reset_info+0x154>)
 8001220:	781a      	ldrb	r2, [r3, #0]
 8001222:	4b40      	ldr	r3, [pc, #256]	; (8001324 <MRT_reset_info+0x174>)
 8001224:	701a      	strb	r2, [r3, #0]
		  MRT_saveFlagValue(FC_STATE_IWDG);
 8001226:	2002      	movs	r0, #2
 8001228:	f002 fcbc 	bl	8003ba4 <MRT_saveFlagValue>

		  HAL_Delay(500);
 800122c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001230:	f007 fe10 	bl	8008e54 <HAL_Delay>

		  //Go to sleep
		  MRT_StandByMode(SLEEP_TIME);
 8001234:	f648 40a0 	movw	r0, #36000	; 0x8ca0
 8001238:	f001 fcdc 	bl	8002bf4 <MRT_StandByMode>
	  }


	  //Check if we are after waking up (and at which wake up we are at)
	  if (wu_flag > 0){
 800123c:	4b30      	ldr	r3, [pc, #192]	; (8001300 <MRT_reset_info+0x150>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d010      	beq.n	8001266 <MRT_reset_info+0xb6>
		  char buf[30];
		  sprintf(buf, "FC wake up %i\r\n", wu_flag);
 8001244:	4b2e      	ldr	r3, [pc, #184]	; (8001300 <MRT_reset_info+0x150>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	461a      	mov	r2, r3
 800124a:	1d3b      	adds	r3, r7, #4
 800124c:	4936      	ldr	r1, [pc, #216]	; (8001328 <MRT_reset_info+0x178>)
 800124e:	4618      	mov	r0, r3
 8001250:	f012 ff1a 	bl	8014088 <siprintf>
		  print(buf);
 8001254:	1d3b      	adds	r3, r7, #4
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff ff06 	bl	8001068 <print>

		  print((char*) "Resetting RTC time\r\n");
 800125c:	4833      	ldr	r0, [pc, #204]	; (800132c <MRT_reset_info+0x17c>)
 800125e:	f7ff ff03 	bl	8001068 <print>

		  //Clear RTC time (last recorded)
		  MRT_resetTotalTime();
 8001262:	f002 fd5f 	bl	8003d24 <MRT_resetTotalTime>
	  }


	  //Check if we start from the beginning
	  if (reset_flag == 0){
 8001266:	4b25      	ldr	r3, [pc, #148]	; (80012fc <MRT_reset_info+0x14c>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d108      	bne.n	8001280 <MRT_reset_info+0xd0>
		  print((char*) "FC restarted\r\n");
 800126e:	4830      	ldr	r0, [pc, #192]	; (8001330 <MRT_reset_info+0x180>)
 8001270:	f7ff fefa 	bl	8001068 <print>

		  reset_flag = 1; //Flip flag
 8001274:	4b21      	ldr	r3, [pc, #132]	; (80012fc <MRT_reset_info+0x14c>)
 8001276:	2201      	movs	r2, #1
 8001278:	701a      	strb	r2, [r3, #0]

		  MRT_saveFlagValue(FC_STATE_RESET);
 800127a:	2000      	movs	r0, #0
 800127c:	f002 fc92 	bl	8003ba4 <MRT_saveFlagValue>
	  }


	  //Check if before or after apogee
	  if (apogee_flag == 0){
 8001280:	4b2c      	ldr	r3, [pc, #176]	; (8001334 <MRT_reset_info+0x184>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d103      	bne.n	8001290 <MRT_reset_info+0xe0>
		  print((char*) "Pre-apogee\r\n");
 8001288:	482b      	ldr	r0, [pc, #172]	; (8001338 <MRT_reset_info+0x188>)
 800128a:	f7ff feed 	bl	8001068 <print>
 800128e:	e006      	b.n	800129e <MRT_reset_info+0xee>
	  }
	  else if(apogee_flag==1){
 8001290:	4b28      	ldr	r3, [pc, #160]	; (8001334 <MRT_reset_info+0x184>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b01      	cmp	r3, #1
 8001296:	d102      	bne.n	800129e <MRT_reset_info+0xee>
		  print((char*) "Post-apogee\r\n");
 8001298:	4828      	ldr	r0, [pc, #160]	; (800133c <MRT_reset_info+0x18c>)
 800129a:	f7ff fee5 	bl	8001068 <print>
	  }


	  //Check ejection stage
	  print((char*)"Ejection Stage: ");
 800129e:	4828      	ldr	r0, [pc, #160]	; (8001340 <MRT_reset_info+0x190>)
 80012a0:	f7ff fee2 	bl	8001068 <print>
	  if (ejection_stage_flag==PAD){
 80012a4:	4b27      	ldr	r3, [pc, #156]	; (8001344 <MRT_reset_info+0x194>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d103      	bne.n	80012b4 <MRT_reset_info+0x104>
		  print((char*)"Pad\r\n");
 80012ac:	4826      	ldr	r0, [pc, #152]	; (8001348 <MRT_reset_info+0x198>)
 80012ae:	f7ff fedb 	bl	8001068 <print>
		  print((char*)"Main descent\r\n");
	  }
	  else if(ejection_stage_flag==LANDED){
		  print((char*)"Landed\r\n");
	  }
}
 80012b2:	e01e      	b.n	80012f2 <MRT_reset_info+0x142>
	  else if(ejection_stage_flag==BOOST){
 80012b4:	4b23      	ldr	r3, [pc, #140]	; (8001344 <MRT_reset_info+0x194>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d103      	bne.n	80012c4 <MRT_reset_info+0x114>
		  print((char*)"Boost\r\n");
 80012bc:	4823      	ldr	r0, [pc, #140]	; (800134c <MRT_reset_info+0x19c>)
 80012be:	f7ff fed3 	bl	8001068 <print>
}
 80012c2:	e016      	b.n	80012f2 <MRT_reset_info+0x142>
	  else if(ejection_stage_flag==DROGUE_DESCENT){
 80012c4:	4b1f      	ldr	r3, [pc, #124]	; (8001344 <MRT_reset_info+0x194>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d103      	bne.n	80012d4 <MRT_reset_info+0x124>
		  print((char*)"Drogue descent\r\n");
 80012cc:	4820      	ldr	r0, [pc, #128]	; (8001350 <MRT_reset_info+0x1a0>)
 80012ce:	f7ff fecb 	bl	8001068 <print>
}
 80012d2:	e00e      	b.n	80012f2 <MRT_reset_info+0x142>
	  else if(ejection_stage_flag==MAIN_DESCENT){
 80012d4:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <MRT_reset_info+0x194>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b03      	cmp	r3, #3
 80012da:	d103      	bne.n	80012e4 <MRT_reset_info+0x134>
		  print((char*)"Main descent\r\n");
 80012dc:	481d      	ldr	r0, [pc, #116]	; (8001354 <MRT_reset_info+0x1a4>)
 80012de:	f7ff fec3 	bl	8001068 <print>
}
 80012e2:	e006      	b.n	80012f2 <MRT_reset_info+0x142>
	  else if(ejection_stage_flag==LANDED){
 80012e4:	4b17      	ldr	r3, [pc, #92]	; (8001344 <MRT_reset_info+0x194>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b04      	cmp	r3, #4
 80012ea:	d102      	bne.n	80012f2 <MRT_reset_info+0x142>
		  print((char*)"Landed\r\n");
 80012ec:	481a      	ldr	r0, [pc, #104]	; (8001358 <MRT_reset_info+0x1a8>)
 80012ee:	f7ff febb 	bl	8001068 <print>
}
 80012f2:	bf00      	nop
 80012f4:	378c      	adds	r7, #140	; 0x8c
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000388 	.word	0x20000388
 8001300:	20000389 	.word	0x20000389
 8001304:	2000038a 	.word	0x2000038a
 8001308:	2000038d 	.word	0x2000038d
 800130c:	2000038e 	.word	0x2000038e
 8001310:	2000038f 	.word	0x2000038f
 8001314:	20000390 	.word	0x20000390
 8001318:	080180e4 	.word	0x080180e4
 800131c:	08018128 	.word	0x08018128
 8001320:	20000330 	.word	0x20000330
 8001324:	20000378 	.word	0x20000378
 8001328:	0801813c 	.word	0x0801813c
 800132c:	0801814c 	.word	0x0801814c
 8001330:	08018164 	.word	0x08018164
 8001334:	2000038b 	.word	0x2000038b
 8001338:	08018174 	.word	0x08018174
 800133c:	08018184 	.word	0x08018184
 8001340:	08018194 	.word	0x08018194
 8001344:	2000038c 	.word	0x2000038c
 8001348:	080181a8 	.word	0x080181a8
 800134c:	080181b0 	.word	0x080181b0
 8001350:	080181b8 	.word	0x080181b8
 8001354:	080181cc 	.word	0x080181cc
 8001358:	080181dc 	.word	0x080181dc

0800135c <MRT_Reinitialize_Peripherals>:


void MRT_Reinitialize_Peripherals(void){
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
	  /*
	   * Reinitialize all peripherals
	   */

	  print((char*)"Reinitializing Peripherals...");
 8001360:	482f      	ldr	r0, [pc, #188]	; (8001420 <MRT_Reinitialize_Peripherals+0xc4>)
 8001362:	f7ff fe81 	bl	8001068 <print>

	  // reset LEDs
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 8001366:	2200      	movs	r2, #0
 8001368:	2102      	movs	r1, #2
 800136a:	482e      	ldr	r0, [pc, #184]	; (8001424 <MRT_Reinitialize_Peripherals+0xc8>)
 800136c:	f008 fc7e 	bl	8009c6c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 8001370:	2200      	movs	r2, #0
 8001372:	2104      	movs	r1, #4
 8001374:	482b      	ldr	r0, [pc, #172]	; (8001424 <MRT_Reinitialize_Peripherals+0xc8>)
 8001376:	f008 fc79 	bl	8009c6c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 800137a:	2200      	movs	r2, #0
 800137c:	2108      	movs	r1, #8
 800137e:	4829      	ldr	r0, [pc, #164]	; (8001424 <MRT_Reinitialize_Peripherals+0xc8>)
 8001380:	f008 fc74 	bl	8009c6c <HAL_GPIO_WritePin>

	  // reset recovery pyro pins
	  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 8001384:	2201      	movs	r2, #1
 8001386:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800138a:	4827      	ldr	r0, [pc, #156]	; (8001428 <MRT_Reinitialize_Peripherals+0xcc>)
 800138c:	f008 fc6e 	bl	8009c6c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, RESET); //PG12 DROGUE GATE
 8001390:	2200      	movs	r2, #0
 8001392:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001396:	4824      	ldr	r0, [pc, #144]	; (8001428 <MRT_Reinitialize_Peripherals+0xcc>)
 8001398:	f008 fc68 	bl	8009c6c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, RESET); //PG11 MAIN GATE
 800139c:	2200      	movs	r2, #0
 800139e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013a2:	4821      	ldr	r0, [pc, #132]	; (8001428 <MRT_Reinitialize_Peripherals+0xcc>)
 80013a4:	f008 fc62 	bl	8009c6c <HAL_GPIO_WritePin>

	  // reset prop pyro pins
	  HAL_GPIO_WritePin(OUT_PyroValve_Arming_GPIO_Port, OUT_PyroValve_Arming_Pin, SET); //PG1 ARMING_PROP
 80013a8:	2201      	movs	r2, #1
 80013aa:	2102      	movs	r1, #2
 80013ac:	481e      	ldr	r0, [pc, #120]	; (8001428 <MRT_Reinitialize_Peripherals+0xcc>)
 80013ae:	f008 fc5d 	bl	8009c6c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_PyroValve_Gate_1_GPIO_Port, OUT_PyroValve_Gate_1_Pin, RESET); //PF15 PROP GATE 1
 80013b2:	2200      	movs	r2, #0
 80013b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013b8:	481c      	ldr	r0, [pc, #112]	; (800142c <MRT_Reinitialize_Peripherals+0xd0>)
 80013ba:	f008 fc57 	bl	8009c6c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_PyroValve_Gate_2_GPIO_Port,OUT_PyroValve_Gate_2_Pin, RESET); //PF14 PROP GATE 2
 80013be:	2200      	movs	r2, #0
 80013c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013c4:	4819      	ldr	r0, [pc, #100]	; (800142c <MRT_Reinitialize_Peripherals+0xd0>)
 80013c6:	f008 fc51 	bl	8009c6c <HAL_GPIO_WritePin>

	  // reset 12 V buck converter enable pin (disable converter)
	  HAL_GPIO_WritePin(EN_12V_Buck_GPIO_Port, EN_12V_Buck_Pin, RESET); //PE2 Buck converter enable
 80013ca:	2200      	movs	r2, #0
 80013cc:	2104      	movs	r1, #4
 80013ce:	4818      	ldr	r0, [pc, #96]	; (8001430 <MRT_Reinitialize_Peripherals+0xd4>)
 80013d0:	f008 fc4c 	bl	8009c6c <HAL_GPIO_WritePin>
	  //HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET); //This was in the previous code
	  //HAL_GPIO_WritePin(OUT_Prop_ActuatedVent_Gate_GPIO_Port, OUT_Prop_ActuatedVent_Gate_Pin, RESET); //PE7 (MAY NOT BE THE RIGHT ONE)


	  // reset payload EN signal
	  HAL_GPIO_WritePin(PAYLOAD_I2C_EN_GPIO_Port, PAYLOAD_I2C_EN_Pin, RESET); //PE9 Payload I2C enable
 80013d4:	2200      	movs	r2, #0
 80013d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013da:	4815      	ldr	r0, [pc, #84]	; (8001430 <MRT_Reinitialize_Peripherals+0xd4>)
 80013dc:	f008 fc46 	bl	8009c6c <HAL_GPIO_WritePin>

	  // set CS pin for thermocouple chip high
	  //	HAL_GPIO_WritePin(TH_CS_1_GPIO_Port, TH_CS_1_Pin, SET);

	  // set power off for VR
	  HAL_GPIO_WritePin(OUT_VR_PWR_GPIO_Port, OUT_VR_PWR_Pin, RESET); //PG9
 80013e0:	2200      	movs	r2, #0
 80013e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013e6:	4810      	ldr	r0, [pc, #64]	; (8001428 <MRT_Reinitialize_Peripherals+0xcc>)
 80013e8:	f008 fc40 	bl	8009c6c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_VR_REC_GPIO_Port, OUT_VR_REC_Pin, RESET); //PD7
 80013ec:	2200      	movs	r2, #0
 80013ee:	2180      	movs	r1, #128	; 0x80
 80013f0:	4810      	ldr	r0, [pc, #64]	; (8001434 <MRT_Reinitialize_Peripherals+0xd8>)
 80013f2:	f008 fc3b 	bl	8009c6c <HAL_GPIO_WritePin>

	  // FLASH set CS, WP and IO3 pins high
	  HAL_GPIO_WritePin(OUT_FLASH_CS_GPIO_Port, OUT_FLASH_CS_Pin, SET);
 80013f6:	2201      	movs	r2, #1
 80013f8:	2140      	movs	r1, #64	; 0x40
 80013fa:	480e      	ldr	r0, [pc, #56]	; (8001434 <MRT_Reinitialize_Peripherals+0xd8>)
 80013fc:	f008 fc36 	bl	8009c6c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_FLASH_WP_GPIO_Port, OUT_FLASH_WP_Pin, SET);
 8001400:	2201      	movs	r2, #1
 8001402:	2120      	movs	r1, #32
 8001404:	480b      	ldr	r0, [pc, #44]	; (8001434 <MRT_Reinitialize_Peripherals+0xd8>)
 8001406:	f008 fc31 	bl	8009c6c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_FLASH_IO3_GPIO_Port, OUT_FLASH_IO3_Pin, SET);
 800140a:	2201      	movs	r2, #1
 800140c:	2110      	movs	r1, #16
 800140e:	4809      	ldr	r0, [pc, #36]	; (8001434 <MRT_Reinitialize_Peripherals+0xd8>)
 8001410:	f008 fc2c 	bl	8009c6c <HAL_GPIO_WritePin>

	  print((char*)"OK\r\n");
 8001414:	4808      	ldr	r0, [pc, #32]	; (8001438 <MRT_Reinitialize_Peripherals+0xdc>)
 8001416:	f7ff fe27 	bl	8001068 <print>
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	080181e8 	.word	0x080181e8
 8001424:	40020800 	.word	0x40020800
 8001428:	40021800 	.word	0x40021800
 800142c:	40021400 	.word	0x40021400
 8001430:	40021000 	.word	0x40021000
 8001434:	40020c00 	.word	0x40020c00
 8001438:	08018208 	.word	0x08018208

0800143c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001442:	463b      	mov	r3, r7
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800144e:	4b21      	ldr	r3, [pc, #132]	; (80014d4 <MX_ADC1_Init+0x98>)
 8001450:	4a21      	ldr	r2, [pc, #132]	; (80014d8 <MX_ADC1_Init+0x9c>)
 8001452:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001454:	4b1f      	ldr	r3, [pc, #124]	; (80014d4 <MX_ADC1_Init+0x98>)
 8001456:	2200      	movs	r2, #0
 8001458:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800145a:	4b1e      	ldr	r3, [pc, #120]	; (80014d4 <MX_ADC1_Init+0x98>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001460:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <MX_ADC1_Init+0x98>)
 8001462:	2200      	movs	r2, #0
 8001464:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001466:	4b1b      	ldr	r3, [pc, #108]	; (80014d4 <MX_ADC1_Init+0x98>)
 8001468:	2200      	movs	r2, #0
 800146a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800146c:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <MX_ADC1_Init+0x98>)
 800146e:	2200      	movs	r2, #0
 8001470:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001474:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <MX_ADC1_Init+0x98>)
 8001476:	2200      	movs	r2, #0
 8001478:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800147a:	4b16      	ldr	r3, [pc, #88]	; (80014d4 <MX_ADC1_Init+0x98>)
 800147c:	4a17      	ldr	r2, [pc, #92]	; (80014dc <MX_ADC1_Init+0xa0>)
 800147e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001480:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <MX_ADC1_Init+0x98>)
 8001482:	2200      	movs	r2, #0
 8001484:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001486:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <MX_ADC1_Init+0x98>)
 8001488:	2201      	movs	r2, #1
 800148a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <MX_ADC1_Init+0x98>)
 800148e:	2200      	movs	r2, #0
 8001490:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001494:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <MX_ADC1_Init+0x98>)
 8001496:	2201      	movs	r2, #1
 8001498:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800149a:	480e      	ldr	r0, [pc, #56]	; (80014d4 <MX_ADC1_Init+0x98>)
 800149c:	f007 fcfe 	bl	8008e9c <HAL_ADC_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80014a6:	f001 fa41 	bl	800292c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80014aa:	2306      	movs	r3, #6
 80014ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014ae:	2301      	movs	r3, #1
 80014b0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014b2:	2300      	movs	r3, #0
 80014b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014b6:	463b      	mov	r3, r7
 80014b8:	4619      	mov	r1, r3
 80014ba:	4806      	ldr	r0, [pc, #24]	; (80014d4 <MX_ADC1_Init+0x98>)
 80014bc:	f007 fed0 	bl	8009260 <HAL_ADC_ConfigChannel>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80014c6:	f001 fa31 	bl	800292c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014ca:	bf00      	nop
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20005ae4 	.word	0x20005ae4
 80014d8:	40012000 	.word	0x40012000
 80014dc:	0f000001 	.word	0x0f000001

080014e0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08a      	sub	sp, #40	; 0x28
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a17      	ldr	r2, [pc, #92]	; (800155c <HAL_ADC_MspInit+0x7c>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d127      	bne.n	8001552 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	613b      	str	r3, [r7, #16]
 8001506:	4b16      	ldr	r3, [pc, #88]	; (8001560 <HAL_ADC_MspInit+0x80>)
 8001508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150a:	4a15      	ldr	r2, [pc, #84]	; (8001560 <HAL_ADC_MspInit+0x80>)
 800150c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001510:	6453      	str	r3, [r2, #68]	; 0x44
 8001512:	4b13      	ldr	r3, [pc, #76]	; (8001560 <HAL_ADC_MspInit+0x80>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800151a:	613b      	str	r3, [r7, #16]
 800151c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <HAL_ADC_MspInit+0x80>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	4a0e      	ldr	r2, [pc, #56]	; (8001560 <HAL_ADC_MspInit+0x80>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	6313      	str	r3, [r2, #48]	; 0x30
 800152e:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <HAL_ADC_MspInit+0x80>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 800153a:	2340      	movs	r3, #64	; 0x40
 800153c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800153e:	2303      	movs	r3, #3
 8001540:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 8001546:	f107 0314 	add.w	r3, r7, #20
 800154a:	4619      	mov	r1, r3
 800154c:	4805      	ldr	r0, [pc, #20]	; (8001564 <HAL_ADC_MspInit+0x84>)
 800154e:	f008 f9c9 	bl	80098e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001552:	bf00      	nop
 8001554:	3728      	adds	r7, #40	; 0x28
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40012000 	.word	0x40012000
 8001560:	40023800 	.word	0x40023800
 8001564:	40020000 	.word	0x40020000

08001568 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800156c:	f3bf 8f4f 	dsb	sy
}
 8001570:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001572:	4b06      	ldr	r3, [pc, #24]	; (800158c <__NVIC_SystemReset+0x24>)
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800157a:	4904      	ldr	r1, [pc, #16]	; (800158c <__NVIC_SystemReset+0x24>)
 800157c:	4b04      	ldr	r3, [pc, #16]	; (8001590 <__NVIC_SystemReset+0x28>)
 800157e:	4313      	orrs	r3, r2
 8001580:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001582:	f3bf 8f4f 	dsb	sy
}
 8001586:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001588:	bf00      	nop
 800158a:	e7fd      	b.n	8001588 <__NVIC_SystemReset+0x20>
 800158c:	e000ed00 	.word	0xe000ed00
 8001590:	05fa0004 	.word	0x05fa0004

08001594 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

	println("\r\nFREERTOS Init");
 8001598:	4821      	ldr	r0, [pc, #132]	; (8001620 <MX_FREERTOS_Init+0x8c>)
 800159a:	f7ff fd47 	bl	800102c <println>
	print("\tInitializing the kernel...");
 800159e:	4821      	ldr	r0, [pc, #132]	; (8001624 <MX_FREERTOS_Init+0x90>)
 80015a0:	f7ff fd62 	bl	8001068 <print>
	osKernelInitialize();
 80015a4:	f00d fc18 	bl	800edd8 <osKernelInitialize>
	println("OK");
 80015a8:	481f      	ldr	r0, [pc, #124]	; (8001628 <MX_FREERTOS_Init+0x94>)
 80015aa:	f7ff fd3f 	bl	800102c <println>

	print("\tCreating the threads...");
 80015ae:	481f      	ldr	r0, [pc, #124]	; (800162c <MX_FREERTOS_Init+0x98>)
 80015b0:	f7ff fd5a 	bl	8001068 <print>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Memory0 */
  Memory0Handle = osThreadNew(StartMemory0, NULL, &Memory0_attributes);
 80015b4:	4a1e      	ldr	r2, [pc, #120]	; (8001630 <MX_FREERTOS_Init+0x9c>)
 80015b6:	2100      	movs	r1, #0
 80015b8:	481e      	ldr	r0, [pc, #120]	; (8001634 <MX_FREERTOS_Init+0xa0>)
 80015ba:	f00d fc57 	bl	800ee6c <osThreadNew>
 80015be:	4603      	mov	r3, r0
 80015c0:	4a1d      	ldr	r2, [pc, #116]	; (8001638 <MX_FREERTOS_Init+0xa4>)
 80015c2:	6013      	str	r3, [r2, #0]

  /* creation of Ejection1 */
  Ejection1Handle = osThreadNew(StartEjection1, NULL, &Ejection1_attributes);
 80015c4:	4a1d      	ldr	r2, [pc, #116]	; (800163c <MX_FREERTOS_Init+0xa8>)
 80015c6:	2100      	movs	r1, #0
 80015c8:	481d      	ldr	r0, [pc, #116]	; (8001640 <MX_FREERTOS_Init+0xac>)
 80015ca:	f00d fc4f 	bl	800ee6c <osThreadNew>
 80015ce:	4603      	mov	r3, r0
 80015d0:	4a1c      	ldr	r2, [pc, #112]	; (8001644 <MX_FREERTOS_Init+0xb0>)
 80015d2:	6013      	str	r3, [r2, #0]

  /* creation of Telemetry2 */
  Telemetry2Handle = osThreadNew(StartTelemetry2, NULL, &Telemetry2_attributes);
 80015d4:	4a1c      	ldr	r2, [pc, #112]	; (8001648 <MX_FREERTOS_Init+0xb4>)
 80015d6:	2100      	movs	r1, #0
 80015d8:	481c      	ldr	r0, [pc, #112]	; (800164c <MX_FREERTOS_Init+0xb8>)
 80015da:	f00d fc47 	bl	800ee6c <osThreadNew>
 80015de:	4603      	mov	r3, r0
 80015e0:	4a1b      	ldr	r2, [pc, #108]	; (8001650 <MX_FREERTOS_Init+0xbc>)
 80015e2:	6013      	str	r3, [r2, #0]

  /* creation of Sensors3 */
  Sensors3Handle = osThreadNew(StartSensors3, NULL, &Sensors3_attributes);
 80015e4:	4a1b      	ldr	r2, [pc, #108]	; (8001654 <MX_FREERTOS_Init+0xc0>)
 80015e6:	2100      	movs	r1, #0
 80015e8:	481b      	ldr	r0, [pc, #108]	; (8001658 <MX_FREERTOS_Init+0xc4>)
 80015ea:	f00d fc3f 	bl	800ee6c <osThreadNew>
 80015ee:	4603      	mov	r3, r0
 80015f0:	4a1a      	ldr	r2, [pc, #104]	; (800165c <MX_FREERTOS_Init+0xc8>)
 80015f2:	6013      	str	r3, [r2, #0]

  /* creation of WatchDog */
  WatchDogHandle = osThreadNew(StartWatchDog, NULL, &WatchDog_attributes);
 80015f4:	4a1a      	ldr	r2, [pc, #104]	; (8001660 <MX_FREERTOS_Init+0xcc>)
 80015f6:	2100      	movs	r1, #0
 80015f8:	481a      	ldr	r0, [pc, #104]	; (8001664 <MX_FREERTOS_Init+0xd0>)
 80015fa:	f00d fc37 	bl	800ee6c <osThreadNew>
 80015fe:	4603      	mov	r3, r0
 8001600:	4a19      	ldr	r2, [pc, #100]	; (8001668 <MX_FREERTOS_Init+0xd4>)
 8001602:	6013      	str	r3, [r2, #0]

  /* creation of Propulsion4 */
  Propulsion4Handle = osThreadNew(StartPropulsion4, NULL, &Propulsion4_attributes);
 8001604:	4a19      	ldr	r2, [pc, #100]	; (800166c <MX_FREERTOS_Init+0xd8>)
 8001606:	2100      	movs	r1, #0
 8001608:	4819      	ldr	r0, [pc, #100]	; (8001670 <MX_FREERTOS_Init+0xdc>)
 800160a:	f00d fc2f 	bl	800ee6c <osThreadNew>
 800160e:	4603      	mov	r3, r0
 8001610:	4a18      	ldr	r2, [pc, #96]	; (8001674 <MX_FREERTOS_Init+0xe0>)
 8001612:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  println("OK");
 8001614:	4804      	ldr	r0, [pc, #16]	; (8001628 <MX_FREERTOS_Init+0x94>)
 8001616:	f7ff fd09 	bl	800102c <println>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	08018254 	.word	0x08018254
 8001624:	08018264 	.word	0x08018264
 8001628:	08018280 	.word	0x08018280
 800162c:	08018284 	.word	0x08018284
 8001630:	08019f2c 	.word	0x08019f2c
 8001634:	08001679 	.word	0x08001679
 8001638:	20005b30 	.word	0x20005b30
 800163c:	08019f50 	.word	0x08019f50
 8001640:	08001701 	.word	0x08001701
 8001644:	20005b48 	.word	0x20005b48
 8001648:	08019f74 	.word	0x08019f74
 800164c:	08001bc5 	.word	0x08001bc5
 8001650:	20005b4c 	.word	0x20005b4c
 8001654:	08019f98 	.word	0x08019f98
 8001658:	08001cc9 	.word	0x08001cc9
 800165c:	20005b50 	.word	0x20005b50
 8001660:	08019fbc 	.word	0x08019fbc
 8001664:	08001d41 	.word	0x08001d41
 8001668:	20005b2c 	.word	0x20005b2c
 800166c:	08019fe0 	.word	0x08019fe0
 8001670:	08001f1d 	.word	0x08001f1d
 8001674:	20005b54 	.word	0x20005b54

08001678 <StartMemory0>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMemory0 */
void StartMemory0(void *argument)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMemory0 */

	//TODO UNTESTED

	//Add thread id to the list
	threadsID[0]=osThreadGetId();
 8001680:	f00d fc86 	bl	800ef90 <osThreadGetId>
 8001684:	4603      	mov	r3, r0
 8001686:	4a16      	ldr	r2, [pc, #88]	; (80016e0 <StartMemory0+0x68>)
 8001688:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  for(;;)
  {

	 //Get RTC time
	 HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800168a:	2200      	movs	r2, #0
 800168c:	4915      	ldr	r1, [pc, #84]	; (80016e4 <StartMemory0+0x6c>)
 800168e:	4816      	ldr	r0, [pc, #88]	; (80016e8 <StartMemory0+0x70>)
 8001690:	f00a fbcc 	bl	800be2c <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001694:	2200      	movs	r2, #0
 8001696:	4915      	ldr	r1, [pc, #84]	; (80016ec <StartMemory0+0x74>)
 8001698:	4813      	ldr	r0, [pc, #76]	; (80016e8 <StartMemory0+0x70>)
 800169a:	f00a fccc 	bl	800c036 <HAL_RTC_GetDate>

	 //Update global variables
	 prev_hour = sTime.Hours;
 800169e:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <StartMemory0+0x6c>)
 80016a0:	781a      	ldrb	r2, [r3, #0]
 80016a2:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <StartMemory0+0x78>)
 80016a4:	701a      	strb	r2, [r3, #0]
	 prev_min = sTime.Minutes;
 80016a6:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <StartMemory0+0x6c>)
 80016a8:	785a      	ldrb	r2, [r3, #1]
 80016aa:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <StartMemory0+0x7c>)
 80016ac:	701a      	strb	r2, [r3, #0]
	 prev_sec = sTime.Seconds;
 80016ae:	4b0d      	ldr	r3, [pc, #52]	; (80016e4 <StartMemory0+0x6c>)
 80016b0:	789a      	ldrb	r2, [r3, #2]
 80016b2:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <StartMemory0+0x80>)
 80016b4:	701a      	strb	r2, [r3, #0]
	 if (__HAL_RTC_SHIFT_GET_FLAG(&hrtc, RTC_FLAG_SHPF)) prev_sec++; //Adjust following the user manual
 80016b6:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <StartMemory0+0x70>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	f003 0308 	and.w	r3, r3, #8
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d005      	beq.n	80016d0 <StartMemory0+0x58>
 80016c4:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <StartMemory0+0x80>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	3301      	adds	r3, #1
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	4b0a      	ldr	r3, [pc, #40]	; (80016f8 <StartMemory0+0x80>)
 80016ce:	701a      	strb	r2, [r3, #0]
	 prev_subsec = sTime.SubSeconds;
 80016d0:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <StartMemory0+0x6c>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	4a09      	ldr	r2, [pc, #36]	; (80016fc <StartMemory0+0x84>)
 80016d6:	6013      	str	r3, [r2, #0]
		sd_write(&fil, msg_buffer_pr);
	}
	f_close(&fil);
	#endif

	osDelay(1000/DATA_FREQ);
 80016d8:	2064      	movs	r0, #100	; 0x64
 80016da:	f00d fcf5 	bl	800f0c8 <osDelay>
	 HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80016de:	e7d4      	b.n	800168a <StartMemory0+0x12>
 80016e0:	20005b34 	.word	0x20005b34
 80016e4:	200002e8 	.word	0x200002e8
 80016e8:	20005c00 	.word	0x20005c00
 80016ec:	200002fc 	.word	0x200002fc
 80016f0:	2000038d 	.word	0x2000038d
 80016f4:	2000038e 	.word	0x2000038e
 80016f8:	2000038f 	.word	0x2000038f
 80016fc:	20000390 	.word	0x20000390

08001700 <StartEjection1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEjection1 */
void StartEjection1(void *argument)
{
 8001700:	b5b0      	push	{r4, r5, r7, lr}
 8001702:	b096      	sub	sp, #88	; 0x58
 8001704:	af04      	add	r7, sp, #16
 8001706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEjection1 */

	//Add thread id to the list
	threadsID[1]=osThreadGetId();
 8001708:	f00d fc42 	bl	800ef90 <osThreadGetId>
 800170c:	4603      	mov	r3, r0
 800170e:	4ac9      	ldr	r2, [pc, #804]	; (8001a34 <StartEjection1+0x334>)
 8001710:	6053      	str	r3, [r2, #4]
	#if !EJECTION_THREAD
	osThreadExit();
	#endif

	//Double check the state TODO bad? (say wakeup flag is raised but ground isn't reached yet
	if (ejection_stage_flag >= LANDED)  osThreadExit(); //Ground reached
 8001712:	4bc9      	ldr	r3, [pc, #804]	; (8001a38 <StartEjection1+0x338>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	2b03      	cmp	r3, #3
 8001718:	d901      	bls.n	800171e <StartEjection1+0x1e>
 800171a:	f00d fca2 	bl	800f062 <osThreadExit>
	if (wu_flag > 0) osThreadExit(); //WHEN WAKING UP
 800171e:	4bc7      	ldr	r3, [pc, #796]	; (8001a3c <StartEjection1+0x33c>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <StartEjection1+0x2a>
 8001726:	f00d fc9c 	bl	800f062 <osThreadExit>

	osDelay(5000); //Let the LPS "warm up" to have a valid pressure_hPa
 800172a:	f241 3088 	movw	r0, #5000	; 0x1388
 800172e:	f00d fccb 	bl	800f0c8 <osDelay>

	//TODO put in setup.h?
	uint8_t counter = 0;
 8001732:	2300      	movs	r3, #0
 8001734:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint8_t COUNTER_THRESHOLD = 500;
 8001738:	23f4      	movs	r3, #244	; 0xf4
 800173a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t ALT_ERROR_MARGIN = 10; //In meters
 800173e:	230a      	movs	r3, #10
 8001740:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	uint8_t prev_alt = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

  /* Infinite loop */
  for(;;)
  {
	  altitude_m = MRT_getAltitude(hlps22hh.pressure_hPa);
 800174a:	4bbd      	ldr	r3, [pc, #756]	; (8001a40 <StartEjection1+0x340>)
 800174c:	edd3 7a00 	vldr	s15, [r3]
 8001750:	eeb0 0a67 	vmov.f32	s0, s15
 8001754:	f002 f854 	bl	8003800 <MRT_getAltitude>
 8001758:	eef0 7a40 	vmov.f32	s15, s0
 800175c:	4bb9      	ldr	r3, [pc, #740]	; (8001a44 <StartEjection1+0x344>)
 800175e:	edc3 7a00 	vstr	s15, [r3]

	  //TODO UPDATE TRUE APOGEE (TESTING?)
	  if (altitude_m > rtc_bckp_reg_alt_true_apogee){
 8001762:	4bb9      	ldr	r3, [pc, #740]	; (8001a48 <StartEjection1+0x348>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	ee07 3a90 	vmov	s15, r3
 800176a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800176e:	4bb5      	ldr	r3, [pc, #724]	; (8001a44 <StartEjection1+0x344>)
 8001770:	edd3 7a00 	vldr	s15, [r3]
 8001774:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800177c:	d514      	bpl.n	80017a8 <StartEjection1+0xa8>
		  rtc_bckp_reg_alt_true_apogee = altitude_m;
 800177e:	4bb1      	ldr	r3, [pc, #708]	; (8001a44 <StartEjection1+0x344>)
 8001780:	edd3 7a00 	vldr	s15, [r3]
 8001784:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001788:	ee17 2a90 	vmov	r2, s15
 800178c:	4bae      	ldr	r3, [pc, #696]	; (8001a48 <StartEjection1+0x348>)
 800178e:	601a      	str	r2, [r3, #0]
		  rtc_bckp_reg_true_apogee_time = 100*prev_min + prev_sec;
 8001790:	4bae      	ldr	r3, [pc, #696]	; (8001a4c <StartEjection1+0x34c>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	461a      	mov	r2, r3
 8001796:	2364      	movs	r3, #100	; 0x64
 8001798:	fb03 f302 	mul.w	r3, r3, r2
 800179c:	4aac      	ldr	r2, [pc, #688]	; (8001a50 <StartEjection1+0x350>)
 800179e:	7812      	ldrb	r2, [r2, #0]
 80017a0:	4413      	add	r3, r2
 80017a2:	461a      	mov	r2, r3
 80017a4:	4bab      	ldr	r3, [pc, #684]	; (8001a54 <StartEjection1+0x354>)
 80017a6:	601a      	str	r2, [r3, #0]
	  }

	  //TODO check for apogee (starting to go down or stagnating, add to counter)
	  if(altitude_m < prev_alt || MAX(altitude_m - prev_alt, prev_alt - altitude_m) < ALT_ERROR_MARGIN){
 80017a8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80017ac:	ee07 3a90 	vmov	s15, r3
 80017b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017b4:	4ba3      	ldr	r3, [pc, #652]	; (8001a44 <StartEjection1+0x344>)
 80017b6:	edd3 7a00 	vldr	s15, [r3]
 80017ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c2:	dc3c      	bgt.n	800183e <StartEjection1+0x13e>
 80017c4:	4b9f      	ldr	r3, [pc, #636]	; (8001a44 <StartEjection1+0x344>)
 80017c6:	ed93 7a00 	vldr	s14, [r3]
 80017ca:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80017ce:	ee07 3a90 	vmov	s15, r3
 80017d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017da:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80017de:	ee07 3a90 	vmov	s15, r3
 80017e2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017e6:	4b97      	ldr	r3, [pc, #604]	; (8001a44 <StartEjection1+0x344>)
 80017e8:	edd3 7a00 	vldr	s15, [r3]
 80017ec:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80017f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f8:	dd0b      	ble.n	8001812 <StartEjection1+0x112>
 80017fa:	4b92      	ldr	r3, [pc, #584]	; (8001a44 <StartEjection1+0x344>)
 80017fc:	ed93 7a00 	vldr	s14, [r3]
 8001800:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001804:	ee07 3a90 	vmov	s15, r3
 8001808:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800180c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001810:	e00a      	b.n	8001828 <StartEjection1+0x128>
 8001812:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001816:	ee07 3a90 	vmov	s15, r3
 800181a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800181e:	4b89      	ldr	r3, [pc, #548]	; (8001a44 <StartEjection1+0x344>)
 8001820:	edd3 7a00 	vldr	s15, [r3]
 8001824:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001828:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800182c:	ee07 3a10 	vmov	s14, r3
 8001830:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001834:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800183c:	d54f      	bpl.n	80018de <StartEjection1+0x1de>
		  counter++;
 800183e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001842:	3301      	adds	r3, #1
 8001844:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		  char buff[50];
		  sprintf(buff, "Alt: %i,  MAX:%i, counter: %i", altitude_m, MAX(altitude_m - prev_alt, prev_alt - altitude_m), counter);
 8001848:	4b7e      	ldr	r3, [pc, #504]	; (8001a44 <StartEjection1+0x344>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f7fe fe9b 	bl	8000588 <__aeabi_f2d>
 8001852:	4604      	mov	r4, r0
 8001854:	460d      	mov	r5, r1
 8001856:	4b7b      	ldr	r3, [pc, #492]	; (8001a44 <StartEjection1+0x344>)
 8001858:	ed93 7a00 	vldr	s14, [r3]
 800185c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001860:	ee07 3a90 	vmov	s15, r3
 8001864:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001868:	ee37 7a67 	vsub.f32	s14, s14, s15
 800186c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001870:	ee07 3a90 	vmov	s15, r3
 8001874:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001878:	4b72      	ldr	r3, [pc, #456]	; (8001a44 <StartEjection1+0x344>)
 800187a:	edd3 7a00 	vldr	s15, [r3]
 800187e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001882:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800188a:	dd0b      	ble.n	80018a4 <StartEjection1+0x1a4>
 800188c:	4b6d      	ldr	r3, [pc, #436]	; (8001a44 <StartEjection1+0x344>)
 800188e:	ed93 7a00 	vldr	s14, [r3]
 8001892:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001896:	ee07 3a90 	vmov	s15, r3
 800189a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800189e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018a2:	e00a      	b.n	80018ba <StartEjection1+0x1ba>
 80018a4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80018a8:	ee07 3a90 	vmov	s15, r3
 80018ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018b0:	4b64      	ldr	r3, [pc, #400]	; (8001a44 <StartEjection1+0x344>)
 80018b2:	edd3 7a00 	vldr	s15, [r3]
 80018b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018ba:	ee17 0a90 	vmov	r0, s15
 80018be:	f7fe fe63 	bl	8000588 <__aeabi_f2d>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 80018ca:	f107 000c 	add.w	r0, r7, #12
 80018ce:	9102      	str	r1, [sp, #8]
 80018d0:	e9cd 2300 	strd	r2, r3, [sp]
 80018d4:	4622      	mov	r2, r4
 80018d6:	462b      	mov	r3, r5
 80018d8:	495f      	ldr	r1, [pc, #380]	; (8001a58 <StartEjection1+0x358>)
 80018da:	f012 fbd5 	bl	8014088 <siprintf>
	  }

	  if (counter == COUNTER_THRESHOLD || ejection_stage_flag >= DROGUE_DESCENT){
 80018de:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80018e2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d004      	beq.n	80018f4 <StartEjection1+0x1f4>
 80018ea:	4b53      	ldr	r3, [pc, #332]	; (8001a38 <StartEjection1+0x338>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	f240 8145 	bls.w	8001b7e <StartEjection1+0x47e>

		  if (ejection_stage_flag < DROGUE_DESCENT){
 80018f4:	4b50      	ldr	r3, [pc, #320]	; (8001a38 <StartEjection1+0x338>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d827      	bhi.n	800194c <StartEjection1+0x24c>

			  //TODO update value to be saved in rtc bckp registers
			  rtc_bckp_reg_alt_apogee = altitude_m;
 80018fc:	4b51      	ldr	r3, [pc, #324]	; (8001a44 <StartEjection1+0x344>)
 80018fe:	edd3 7a00 	vldr	s15, [r3]
 8001902:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001906:	ee17 2a90 	vmov	r2, s15
 800190a:	4b54      	ldr	r3, [pc, #336]	; (8001a5c <StartEjection1+0x35c>)
 800190c:	601a      	str	r2, [r3, #0]
			  rtc_bckp_reg_apogee_time = 100*prev_min + prev_sec;
 800190e:	4b4f      	ldr	r3, [pc, #316]	; (8001a4c <StartEjection1+0x34c>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	461a      	mov	r2, r3
 8001914:	2364      	movs	r3, #100	; 0x64
 8001916:	fb03 f302 	mul.w	r3, r3, r2
 800191a:	4a4d      	ldr	r2, [pc, #308]	; (8001a50 <StartEjection1+0x350>)
 800191c:	7812      	ldrb	r2, [r2, #0]
 800191e:	4413      	add	r3, r2
 8001920:	461a      	mov	r2, r3
 8001922:	4b4f      	ldr	r3, [pc, #316]	; (8001a60 <StartEjection1+0x360>)
 8001924:	601a      	str	r2, [r3, #0]

			  //Update state (save the state in WatchDog thread)
			  ejection_stage_flag = DROGUE_DESCENT;
 8001926:	4b44      	ldr	r3, [pc, #272]	; (8001a38 <StartEjection1+0x338>)
 8001928:	2202      	movs	r2, #2
 800192a:	701a      	strb	r2, [r3, #0]
			  apogee_flag = 1; //Apogee reached //TODO is it where we change it???
 800192c:	4b4d      	ldr	r3, [pc, #308]	; (8001a64 <StartEjection1+0x364>)
 800192e:	2201      	movs	r2, #1
 8001930:	701a      	strb	r2, [r3, #0]
			  wd_ejection_flag = 1; //Raise the flag
 8001932:	4b4d      	ldr	r3, [pc, #308]	; (8001a68 <StartEjection1+0x368>)
 8001934:	2201      	movs	r2, #1
 8001936:	701a      	strb	r2, [r3, #0]

			  println("Eject Drogue");
 8001938:	484c      	ldr	r0, [pc, #304]	; (8001a6c <StartEjection1+0x36c>)
 800193a:	f7ff fb77 	bl	800102c <println>
		  }

		  //Put outside of "if" such that we only need to remember the ejection stage instead if it + arming state
		  //TODO should I put a while loop, a foor loop or just "one time functions"?
		  while(!HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 800193e:	e005      	b.n	800194c <StartEjection1+0x24c>
			  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 8001940:	2201      	movs	r2, #1
 8001942:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001946:	484a      	ldr	r0, [pc, #296]	; (8001a70 <StartEjection1+0x370>)
 8001948:	f008 f990 	bl	8009c6c <HAL_GPIO_WritePin>
		  while(!HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 800194c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001950:	4847      	ldr	r0, [pc, #284]	; (8001a70 <StartEjection1+0x370>)
 8001952:	f008 f973 	bl	8009c3c <HAL_GPIO_ReadPin>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d0f1      	beq.n	8001940 <StartEjection1+0x240>
		  }
		  while(!HAL_GPIO_ReadPin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin)){
 800195c:	e005      	b.n	800196a <StartEjection1+0x26a>
			  HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, SET); //PG12 DROGUE GATE
 800195e:	2201      	movs	r2, #1
 8001960:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001964:	4842      	ldr	r0, [pc, #264]	; (8001a70 <StartEjection1+0x370>)
 8001966:	f008 f981 	bl	8009c6c <HAL_GPIO_WritePin>
		  while(!HAL_GPIO_ReadPin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin)){
 800196a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800196e:	4840      	ldr	r0, [pc, #256]	; (8001a70 <StartEjection1+0x370>)
 8001970:	f008 f964 	bl	8009c3c <HAL_GPIO_ReadPin>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0f1      	beq.n	800195e <StartEjection1+0x25e>
		  }
		  while(HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 800197a:	e005      	b.n	8001988 <StartEjection1+0x288>
			  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, RESET); //PG14 ARMING RCOV
 800197c:	2200      	movs	r2, #0
 800197e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001982:	483b      	ldr	r0, [pc, #236]	; (8001a70 <StartEjection1+0x370>)
 8001984:	f008 f972 	bl	8009c6c <HAL_GPIO_WritePin>
		  while(HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 8001988:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800198c:	4838      	ldr	r0, [pc, #224]	; (8001a70 <StartEjection1+0x370>)
 800198e:	f008 f955 	bl	8009c3c <HAL_GPIO_ReadPin>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d1f1      	bne.n	800197c <StartEjection1+0x27c>
		  }

		  for(;;){

			  altitude_m = MRT_getAltitude(hlps22hh.pressure_hPa);
 8001998:	4b29      	ldr	r3, [pc, #164]	; (8001a40 <StartEjection1+0x340>)
 800199a:	edd3 7a00 	vldr	s15, [r3]
 800199e:	eeb0 0a67 	vmov.f32	s0, s15
 80019a2:	f001 ff2d 	bl	8003800 <MRT_getAltitude>
 80019a6:	eef0 7a40 	vmov.f32	s15, s0
 80019aa:	4b26      	ldr	r3, [pc, #152]	; (8001a44 <StartEjection1+0x344>)
 80019ac:	edc3 7a00 	vstr	s15, [r3]

			  //We reached main deployment altitude
			  if (altitude_m < DEPLOY_ALT || ejection_stage_flag >= MAIN_DESCENT){
 80019b0:	4b24      	ldr	r3, [pc, #144]	; (8001a44 <StartEjection1+0x344>)
 80019b2:	edd3 7a00 	vldr	s15, [r3]
 80019b6:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001a74 <StartEjection1+0x374>
 80019ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c2:	d404      	bmi.n	80019ce <StartEjection1+0x2ce>
 80019c4:	4b1c      	ldr	r3, [pc, #112]	; (8001a38 <StartEjection1+0x338>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	f240 80d4 	bls.w	8001b76 <StartEjection1+0x476>

				  if (ejection_stage_flag < MAIN_DESCENT){
 80019ce:	4b1a      	ldr	r3, [pc, #104]	; (8001a38 <StartEjection1+0x338>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d824      	bhi.n	8001a20 <StartEjection1+0x320>

					  //TODO update value to be saved in rtc bckp registers
					  rtc_bckp_reg_alt_main = altitude_m;
 80019d6:	4b1b      	ldr	r3, [pc, #108]	; (8001a44 <StartEjection1+0x344>)
 80019d8:	edd3 7a00 	vldr	s15, [r3]
 80019dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019e0:	ee17 2a90 	vmov	r2, s15
 80019e4:	4b24      	ldr	r3, [pc, #144]	; (8001a78 <StartEjection1+0x378>)
 80019e6:	601a      	str	r2, [r3, #0]
					  rtc_bckp_reg_main_time = 100*prev_min + prev_sec;
 80019e8:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <StartEjection1+0x34c>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	461a      	mov	r2, r3
 80019ee:	2364      	movs	r3, #100	; 0x64
 80019f0:	fb03 f302 	mul.w	r3, r3, r2
 80019f4:	4a16      	ldr	r2, [pc, #88]	; (8001a50 <StartEjection1+0x350>)
 80019f6:	7812      	ldrb	r2, [r2, #0]
 80019f8:	4413      	add	r3, r2
 80019fa:	461a      	mov	r2, r3
 80019fc:	4b1f      	ldr	r3, [pc, #124]	; (8001a7c <StartEjection1+0x37c>)
 80019fe:	601a      	str	r2, [r3, #0]

					  //Update state (save the state in WatchDog thread)
					  ejection_stage_flag = MAIN_DESCENT;
 8001a00:	4b0d      	ldr	r3, [pc, #52]	; (8001a38 <StartEjection1+0x338>)
 8001a02:	2203      	movs	r2, #3
 8001a04:	701a      	strb	r2, [r3, #0]
					  wd_ejection_flag = 1; //Raise the flag
 8001a06:	4b18      	ldr	r3, [pc, #96]	; (8001a68 <StartEjection1+0x368>)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	701a      	strb	r2, [r3, #0]

					  println("Eject Main");
 8001a0c:	481c      	ldr	r0, [pc, #112]	; (8001a80 <StartEjection1+0x380>)
 8001a0e:	f7ff fb0d 	bl	800102c <println>
				  }

				  //Put outside of "if" such that we only need to remember the ejection stage instead if it + arming state
				  //TODO should I put a while loop, a foor loop or just "one time functions"?
				  while(!HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 8001a12:	e005      	b.n	8001a20 <StartEjection1+0x320>
					  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 8001a14:	2201      	movs	r2, #1
 8001a16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a1a:	4815      	ldr	r0, [pc, #84]	; (8001a70 <StartEjection1+0x370>)
 8001a1c:	f008 f926 	bl	8009c6c <HAL_GPIO_WritePin>
				  while(!HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 8001a20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a24:	4812      	ldr	r0, [pc, #72]	; (8001a70 <StartEjection1+0x370>)
 8001a26:	f008 f909 	bl	8009c3c <HAL_GPIO_ReadPin>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d0f1      	beq.n	8001a14 <StartEjection1+0x314>
				  }
				  while(!HAL_GPIO_ReadPin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin)){
 8001a30:	e02e      	b.n	8001a90 <StartEjection1+0x390>
 8001a32:	bf00      	nop
 8001a34:	20005b34 	.word	0x20005b34
 8001a38:	2000038c 	.word	0x2000038c
 8001a3c:	20000389 	.word	0x20000389
 8001a40:	200003d0 	.word	0x200003d0
 8001a44:	200002e0 	.word	0x200002e0
 8001a48:	20000354 	.word	0x20000354
 8001a4c:	2000038e 	.word	0x2000038e
 8001a50:	2000038f 	.word	0x2000038f
 8001a54:	20000358 	.word	0x20000358
 8001a58:	080182a0 	.word	0x080182a0
 8001a5c:	2000035c 	.word	0x2000035c
 8001a60:	20000360 	.word	0x20000360
 8001a64:	2000038b 	.word	0x2000038b
 8001a68:	200002e4 	.word	0x200002e4
 8001a6c:	080182c0 	.word	0x080182c0
 8001a70:	40021800 	.word	0x40021800
 8001a74:	44fa0000 	.word	0x44fa0000
 8001a78:	20000364 	.word	0x20000364
 8001a7c:	20000368 	.word	0x20000368
 8001a80:	080182d0 	.word	0x080182d0
					  HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, SET); //PG11 MAIN GATE
 8001a84:	2201      	movs	r2, #1
 8001a86:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a8a:	4844      	ldr	r0, [pc, #272]	; (8001b9c <StartEjection1+0x49c>)
 8001a8c:	f008 f8ee 	bl	8009c6c <HAL_GPIO_WritePin>
				  while(!HAL_GPIO_ReadPin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin)){
 8001a90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a94:	4841      	ldr	r0, [pc, #260]	; (8001b9c <StartEjection1+0x49c>)
 8001a96:	f008 f8d1 	bl	8009c3c <HAL_GPIO_ReadPin>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d0f1      	beq.n	8001a84 <StartEjection1+0x384>
				  }
				  while(HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 8001aa0:	e005      	b.n	8001aae <StartEjection1+0x3ae>
					  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, RESET); //PG14 ARMING RCOV
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001aa8:	483c      	ldr	r0, [pc, #240]	; (8001b9c <StartEjection1+0x49c>)
 8001aaa:	f008 f8df 	bl	8009c6c <HAL_GPIO_WritePin>
				  while(HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 8001aae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ab2:	483a      	ldr	r0, [pc, #232]	; (8001b9c <StartEjection1+0x49c>)
 8001ab4:	f008 f8c2 	bl	8009c3c <HAL_GPIO_ReadPin>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1f1      	bne.n	8001aa2 <StartEjection1+0x3a2>
				  }

				  uint8_t prev_altitude = 0;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
				  uint8_t cur_altitude = 0;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
				  uint8_t counter = 0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
				  while(counter < 5){
 8001ad0:	e02d      	b.n	8001b2e <StartEjection1+0x42e>
					  cur_altitude = MRT_getAltitude(hlps22hh.pressure_hPa);
 8001ad2:	4b33      	ldr	r3, [pc, #204]	; (8001ba0 <StartEjection1+0x4a0>)
 8001ad4:	edd3 7a00 	vldr	s15, [r3]
 8001ad8:	eeb0 0a67 	vmov.f32	s0, s15
 8001adc:	f001 fe90 	bl	8003800 <MRT_getAltitude>
 8001ae0:	eef0 7a40 	vmov.f32	s15, s0
 8001ae4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ae8:	edc7 7a00 	vstr	s15, [r7]
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
					  if (cur_altitude - prev_altitude < 1 && cur_altitude - prev_altitude > -1){ //TODO might need a bigger range to account for errors (gotta know what we expect to be our slowest descent speed)
 8001af2:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8001af6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	dc0c      	bgt.n	8001b1a <StartEjection1+0x41a>
 8001b00:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8001b04:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	db05      	blt.n	8001b1a <StartEjection1+0x41a>
						  counter++;
 8001b0e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001b12:	3301      	adds	r3, #1
 8001b14:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8001b18:	e002      	b.n	8001b20 <StartEjection1+0x420>
					  }
					  else{
						  counter = 0;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
					  }
					  prev_altitude = cur_altitude;
 8001b20:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001b24:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
					  osDelay(100);
 8001b28:	2064      	movs	r0, #100	; 0x64
 8001b2a:	f00d facd 	bl	800f0c8 <osDelay>
				  while(counter < 5){
 8001b2e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001b32:	2b04      	cmp	r3, #4
 8001b34:	d9cd      	bls.n	8001ad2 <StartEjection1+0x3d2>
				  }

				  //TODO update value to be saved in rtc bckp registers
				  rtc_bckp_reg_alt_landed = altitude_m;
 8001b36:	4b1b      	ldr	r3, [pc, #108]	; (8001ba4 <StartEjection1+0x4a4>)
 8001b38:	edd3 7a00 	vldr	s15, [r3]
 8001b3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b40:	ee17 2a90 	vmov	r2, s15
 8001b44:	4b18      	ldr	r3, [pc, #96]	; (8001ba8 <StartEjection1+0x4a8>)
 8001b46:	601a      	str	r2, [r3, #0]
				  rtc_bckp_reg_landed_time = 100*prev_min + prev_sec;
 8001b48:	4b18      	ldr	r3, [pc, #96]	; (8001bac <StartEjection1+0x4ac>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	2364      	movs	r3, #100	; 0x64
 8001b50:	fb03 f302 	mul.w	r3, r3, r2
 8001b54:	4a16      	ldr	r2, [pc, #88]	; (8001bb0 <StartEjection1+0x4b0>)
 8001b56:	7812      	ldrb	r2, [r2, #0]
 8001b58:	4413      	add	r3, r2
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <StartEjection1+0x4b4>)
 8001b5e:	601a      	str	r2, [r3, #0]

				  //Update state (saved state in WatchDog thread)
				  ejection_stage_flag = LANDED;
 8001b60:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <StartEjection1+0x4b8>)
 8001b62:	2204      	movs	r2, #4
 8001b64:	701a      	strb	r2, [r3, #0]
				  wd_ejection_flag = 1;
 8001b66:	4b15      	ldr	r3, [pc, #84]	; (8001bbc <StartEjection1+0x4bc>)
 8001b68:	2201      	movs	r2, #1
 8001b6a:	701a      	strb	r2, [r3, #0]

				  println("Ground Level Reached");
 8001b6c:	4814      	ldr	r0, [pc, #80]	; (8001bc0 <StartEjection1+0x4c0>)
 8001b6e:	f7ff fa5d 	bl	800102c <println>
				  osThreadExit();
 8001b72:	f00d fa76 	bl	800f062 <osThreadExit>

			  }

			  osDelay(10);
 8001b76:	200a      	movs	r0, #10
 8001b78:	f00d faa6 	bl	800f0c8 <osDelay>
			  altitude_m = MRT_getAltitude(hlps22hh.pressure_hPa);
 8001b7c:	e70c      	b.n	8001998 <StartEjection1+0x298>
		  }
	  }


	  //Update previous altitude
	  prev_alt = altitude_m;
 8001b7e:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <StartEjection1+0x4a4>)
 8001b80:	edd3 7a00 	vldr	s15, [r3]
 8001b84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b88:	edc7 7a00 	vstr	s15, [r7]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

	  osDelay(10);
 8001b92:	200a      	movs	r0, #10
 8001b94:	f00d fa98 	bl	800f0c8 <osDelay>
	  altitude_m = MRT_getAltitude(hlps22hh.pressure_hPa);
 8001b98:	e5d7      	b.n	800174a <StartEjection1+0x4a>
 8001b9a:	bf00      	nop
 8001b9c:	40021800 	.word	0x40021800
 8001ba0:	200003d0 	.word	0x200003d0
 8001ba4:	200002e0 	.word	0x200002e0
 8001ba8:	2000036c 	.word	0x2000036c
 8001bac:	2000038e 	.word	0x2000038e
 8001bb0:	2000038f 	.word	0x2000038f
 8001bb4:	20000370 	.word	0x20000370
 8001bb8:	2000038c 	.word	0x2000038c
 8001bbc:	200002e4 	.word	0x200002e4
 8001bc0:	080182dc 	.word	0x080182dc

08001bc4 <StartTelemetry2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTelemetry2 */
void StartTelemetry2(void *argument)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b0c4      	sub	sp, #272	; 0x110
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	1d3b      	adds	r3, r7, #4
 8001bcc:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartTelemetry2 */

	//Add thread id to the list
	threadsID[2]=osThreadGetId();
 8001bce:	f00d f9df 	bl	800ef90 <osThreadGetId>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	4a37      	ldr	r2, [pc, #220]	; (8001cb4 <StartTelemetry2+0xf0>)
 8001bd6:	6093      	str	r3, [r2, #8]
	#if !TELEMETRY_THREAD
	osThreadExit();
	#endif

	char radio_buffer[RADIO_BUFFER_SIZE];
	uint8_t counter = 0;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	uint8_t iridium_counter = 0;
 8001bde:	2300      	movs	r3, #0
 8001be0:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e

  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, SET);
 8001be4:	2201      	movs	r2, #1
 8001be6:	2108      	movs	r1, #8
 8001be8:	4833      	ldr	r0, [pc, #204]	; (8001cb8 <StartTelemetry2+0xf4>)
 8001bea:	f008 f83f 	bl	8009c6c <HAL_GPIO_WritePin>

	  if(apogee_flag == 0){ //Only send prop data pre-apogee
 8001bee:	4b33      	ldr	r3, [pc, #204]	; (8001cbc <StartTelemetry2+0xf8>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d118      	bne.n	8001c28 <StartTelemetry2+0x64>

		  //Send propulsion data
		  memset(radio_buffer, 0, RADIO_BUFFER_SIZE);
 8001bf6:	f107 030c 	add.w	r3, r7, #12
 8001bfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bfe:	2100      	movs	r1, #0
 8001c00:	4618      	mov	r0, r3
 8001c02:	f011 f9c3 	bl	8012f8c <memset>
		  MRT_formatPropulsion();
 8001c06:	f003 f8f3 	bl	8004df0 <MRT_formatPropulsion>
		  memcpy(radio_buffer, msg_buffer_pr, strlen(msg_buffer_pr));
 8001c0a:	482d      	ldr	r0, [pc, #180]	; (8001cc0 <StartTelemetry2+0xfc>)
 8001c0c:	f7fe fafa 	bl	8000204 <strlen>
 8001c10:	4602      	mov	r2, r0
 8001c12:	f107 030c 	add.w	r3, r7, #12
 8001c16:	492a      	ldr	r1, [pc, #168]	; (8001cc0 <StartTelemetry2+0xfc>)
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f011 f98f 	bl	8012f3c <memcpy>
		  MRT_radio_tx((char*) radio_buffer);
 8001c1e:	f107 030c 	add.w	r3, r7, #12
 8001c22:	4618      	mov	r0, r3
 8001c24:	f005 ff6e 	bl	8007b04 <MRT_radio_tx>
	  }


	  if (counter == SENSORS_SEND_FREQ_DIVIDER){
 8001c28:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001c2c:	2b0a      	cmp	r3, #10
 8001c2e:	d12b      	bne.n	8001c88 <StartTelemetry2+0xc4>
		  counter = 0;
 8001c30:	2300      	movs	r3, #0
 8001c32:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		  float SEC = (uint8_t) time % 60; sprintf(&SEC,"%.0f",SEC);
		  float SUBSEC = time / 3600.0; sprintf(&SUBSEC,"%.0f",SUBSEC);
		  */

	  	  //Send sensors data
		  memset(radio_buffer, 0, RADIO_BUFFER_SIZE);
 8001c36:	f107 030c 	add.w	r3, r7, #12
 8001c3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4618      	mov	r0, r3
 8001c42:	f011 f9a3 	bl	8012f8c <memset>
		  MRT_formatAvionics();
 8001c46:	f001 fe5d 	bl	8003904 <MRT_formatAvionics>
		  memcpy(radio_buffer, msg_buffer_av, strlen(msg_buffer_av));
 8001c4a:	481e      	ldr	r0, [pc, #120]	; (8001cc4 <StartTelemetry2+0x100>)
 8001c4c:	f7fe fada 	bl	8000204 <strlen>
 8001c50:	4602      	mov	r2, r0
 8001c52:	f107 030c 	add.w	r3, r7, #12
 8001c56:	491b      	ldr	r1, [pc, #108]	; (8001cc4 <StartTelemetry2+0x100>)
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f011 f96f 	bl	8012f3c <memcpy>
		  MRT_radio_tx((char*) radio_buffer);
 8001c5e:	f107 030c 	add.w	r3, r7, #12
 8001c62:	4618      	mov	r0, r3
 8001c64:	f005 ff4e 	bl	8007b04 <MRT_radio_tx>


		  if(apogee_flag && iridium_counter == IRIDIUM_SEND_FREQ_DIVIDER){
 8001c68:	4b14      	ldr	r3, [pc, #80]	; (8001cbc <StartTelemetry2+0xf8>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d006      	beq.n	8001c7e <StartTelemetry2+0xba>
 8001c70:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8001c74:	2b05      	cmp	r3, #5
 8001c76:	d102      	bne.n	8001c7e <StartTelemetry2+0xba>
			  iridium_counter = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
			  #if IRIDIUM_ //Iridium send
			  hiridium.getTime(); //TODO doesn't cost anything
			  //hiridium.sendMessage(msg); TODO IT COSTS CREDITS WATCH OUT
			  #endif
		  }
		  iridium_counter++;
 8001c7e:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8001c82:	3301      	adds	r3, #1
 8001c84:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	  }
	  counter++;
 8001c88:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f


	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 8001c92:	2200      	movs	r2, #0
 8001c94:	2108      	movs	r1, #8
 8001c96:	4808      	ldr	r0, [pc, #32]	; (8001cb8 <StartTelemetry2+0xf4>)
 8001c98:	f007 ffe8 	bl	8009c6c <HAL_GPIO_WritePin>

	  if (apogee_flag){
 8001c9c:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <StartTelemetry2+0xf8>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d003      	beq.n	8001cac <StartTelemetry2+0xe8>
		  osDelay(1000/POST_APOGEE_SEND_FREQ);
 8001ca4:	200a      	movs	r0, #10
 8001ca6:	f00d fa0f 	bl	800f0c8 <osDelay>
 8001caa:	e79b      	b.n	8001be4 <StartTelemetry2+0x20>
	  }
	  else{
		  osDelay(1000/PRE_APOGEE_SEND_FREQ);
 8001cac:	2014      	movs	r0, #20
 8001cae:	f00d fa0b 	bl	800f0c8 <osDelay>
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, SET);
 8001cb2:	e797      	b.n	8001be4 <StartTelemetry2+0x20>
 8001cb4:	20005b34 	.word	0x20005b34
 8001cb8:	40020800 	.word	0x40020800
 8001cbc:	2000038b 	.word	0x2000038b
 8001cc0:	20005f8c 	.word	0x20005f8c
 8001cc4:	20005e84 	.word	0x20005e84

08001cc8 <StartSensors3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensors3 */
void StartSensors3(void *argument)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensors3 */

	//Add thread id to the list
	threadsID[3]=osThreadGetId();
 8001cd0:	f00d f95e 	bl	800ef90 <osThreadGetId>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	4a13      	ldr	r2, [pc, #76]	; (8001d24 <StartSensors3+0x5c>)
 8001cd8:	60d3      	str	r3, [r2, #12]


  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 8001cda:	2201      	movs	r2, #1
 8001cdc:	2102      	movs	r1, #2
 8001cde:	4812      	ldr	r0, [pc, #72]	; (8001d28 <StartSensors3+0x60>)
 8001ce0:	f007 ffc4 	bl	8009c6c <HAL_GPIO_WritePin>

	  //GPS
	  hgps.pollAll();
 8001ce4:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <StartSensors3+0x64>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	4798      	blx	r3

	  //LSM6DSR
	  hlsm6dsr.pollAll();
 8001cea:	4b11      	ldr	r3, [pc, #68]	; (8001d30 <StartSensors3+0x68>)
 8001cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cee:	4798      	blx	r3

	  //LPS22HH
	  hlps22hh.pollAll();
 8001cf0:	4b10      	ldr	r3, [pc, #64]	; (8001d34 <StartSensors3+0x6c>)
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	4798      	blx	r3

	  //Gates continuity
	  gates_continuity = MRT_getContinuity();
 8001cf6:	f001 fdd1 	bl	800389c <MRT_getContinuity>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4b0e      	ldr	r3, [pc, #56]	; (8001d38 <StartSensors3+0x70>)
 8001d00:	701a      	strb	r2, [r3, #0]

	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2102      	movs	r1, #2
 8001d06:	4808      	ldr	r0, [pc, #32]	; (8001d28 <StartSensors3+0x60>)
 8001d08:	f007 ffb0 	bl	8009c6c <HAL_GPIO_WritePin>

	  if (apogee_flag){
 8001d0c:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <StartSensors3+0x74>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d003      	beq.n	8001d1c <StartSensors3+0x54>
		  osDelay(1000/POST_APOGEE_POLL_FREQ);
 8001d14:	200a      	movs	r0, #10
 8001d16:	f00d f9d7 	bl	800f0c8 <osDelay>
 8001d1a:	e7de      	b.n	8001cda <StartSensors3+0x12>
	  }
	  else{
		  osDelay(1000/PRE_APOGEE_POLL_FREQ);
 8001d1c:	2014      	movs	r0, #20
 8001d1e:	f00d f9d3 	bl	800f0c8 <osDelay>
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 8001d22:	e7da      	b.n	8001cda <StartSensors3+0x12>
 8001d24:	20005b34 	.word	0x20005b34
 8001d28:	40020800 	.word	0x40020800
 8001d2c:	200003e4 	.word	0x200003e4
 8001d30:	200003a4 	.word	0x200003a4
 8001d34:	200003d0 	.word	0x200003d0
 8001d38:	20000375 	.word	0x20000375
 8001d3c:	2000038b 	.word	0x2000038b

08001d40 <StartWatchDog>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWatchDog */
void StartWatchDog(void *argument)
{
 8001d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d44:	b0c6      	sub	sp, #280	; 0x118
 8001d46:	af04      	add	r7, sp, #16
 8001d48:	1d3b      	adds	r3, r7, #4
 8001d4a:	6018      	str	r0, [r3, #0]
	char buffer[WD_BUFFER_SIZE];

  /* Infinite loop */
  for(;;)
  {
	 HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	2104      	movs	r1, #4
 8001d50:	4858      	ldr	r0, [pc, #352]	; (8001eb4 <StartWatchDog+0x174>)
 8001d52:	f007 ff8b 	bl	8009c6c <HAL_GPIO_WritePin>

	 HAL_IWDG_Refresh(&hiwdg);

	 //Save the RTC time
	 MRT_saveTotalTime();
 8001d56:	f001 ffb1 	bl	8003cbc <MRT_saveTotalTime>

	 //TODO remove for comp
	 memset(buffer, 0, WD_BUFFER_SIZE);
 8001d5a:	f107 0308 	add.w	r3, r7, #8
 8001d5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d62:	2100      	movs	r1, #0
 8001d64:	4618      	mov	r0, r3
 8001d66:	f011 f911 	bl	8012f8c <memset>
	 sprintf(buffer, "Time: %i:%i:%i ::%lu	Altitude: \r\n %f\r\n", prev_hour,prev_min,prev_sec,prev_subsec , altitude_m);
 8001d6a:	4b53      	ldr	r3, [pc, #332]	; (8001eb8 <StartWatchDog+0x178>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	461e      	mov	r6, r3
 8001d70:	4b52      	ldr	r3, [pc, #328]	; (8001ebc <StartWatchDog+0x17c>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	4698      	mov	r8, r3
 8001d76:	4b52      	ldr	r3, [pc, #328]	; (8001ec0 <StartWatchDog+0x180>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	461d      	mov	r5, r3
 8001d7c:	4b51      	ldr	r3, [pc, #324]	; (8001ec4 <StartWatchDog+0x184>)
 8001d7e:	681c      	ldr	r4, [r3, #0]
 8001d80:	4b51      	ldr	r3, [pc, #324]	; (8001ec8 <StartWatchDog+0x188>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7fe fbff 	bl	8000588 <__aeabi_f2d>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	f107 0008 	add.w	r0, r7, #8
 8001d92:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001d96:	9401      	str	r4, [sp, #4]
 8001d98:	9500      	str	r5, [sp, #0]
 8001d9a:	4643      	mov	r3, r8
 8001d9c:	4632      	mov	r2, r6
 8001d9e:	494b      	ldr	r1, [pc, #300]	; (8001ecc <StartWatchDog+0x18c>)
 8001da0:	f012 f972 	bl	8014088 <siprintf>
	 println((char*) buffer);
 8001da4:	f107 0308 	add.w	r3, r7, #8
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff f93f 	bl	800102c <println>


	 //Check if new ejection stage to save in memory
	 if(wd_ejection_flag == 1){
 8001dae:	4b48      	ldr	r3, [pc, #288]	; (8001ed0 <StartWatchDog+0x190>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d15d      	bne.n	8001e72 <StartWatchDog+0x132>

		wd_ejection_flag = 0;
 8001db6:	4b46      	ldr	r3, [pc, #280]	; (8001ed0 <StartWatchDog+0x190>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	701a      	strb	r2, [r3, #0]

		//Update ejection stage flag and save it
		rtc_bckp_reg_ejection_stage = ejection_stage_flag;
 8001dbc:	4b45      	ldr	r3, [pc, #276]	; (8001ed4 <StartWatchDog+0x194>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	4b45      	ldr	r3, [pc, #276]	; (8001ed8 <StartWatchDog+0x198>)
 8001dc4:	601a      	str	r2, [r3, #0]
		ext_flash_ejection_stage = ejection_stage_flag;
 8001dc6:	4b43      	ldr	r3, [pc, #268]	; (8001ed4 <StartWatchDog+0x194>)
 8001dc8:	781a      	ldrb	r2, [r3, #0]
 8001dca:	4b44      	ldr	r3, [pc, #272]	; (8001edc <StartWatchDog+0x19c>)
 8001dcc:	701a      	strb	r2, [r3, #0]
		MRT_saveFlagValue(FC_STATE_FLIGHT);
 8001dce:	2004      	movs	r0, #4
 8001dd0:	f001 fee8 	bl	8003ba4 <MRT_saveFlagValue>

		//If applicable, update apogee flag
		if (ejection_stage_flag >= DROGUE_DESCENT){
 8001dd4:	4b3f      	ldr	r3, [pc, #252]	; (8001ed4 <StartWatchDog+0x194>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d90e      	bls.n	8001dfa <StartWatchDog+0xba>
			apogee_flag = 1;
 8001ddc:	4b40      	ldr	r3, [pc, #256]	; (8001ee0 <StartWatchDog+0x1a0>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	701a      	strb	r2, [r3, #0]
			rtc_bckp_reg_apogee = apogee_flag;
 8001de2:	4b3f      	ldr	r3, [pc, #252]	; (8001ee0 <StartWatchDog+0x1a0>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	461a      	mov	r2, r3
 8001de8:	4b3e      	ldr	r3, [pc, #248]	; (8001ee4 <StartWatchDog+0x1a4>)
 8001dea:	601a      	str	r2, [r3, #0]
			ext_flash_apogee = apogee_flag;
 8001dec:	4b3c      	ldr	r3, [pc, #240]	; (8001ee0 <StartWatchDog+0x1a0>)
 8001dee:	781a      	ldrb	r2, [r3, #0]
 8001df0:	4b3d      	ldr	r3, [pc, #244]	; (8001ee8 <StartWatchDog+0x1a8>)
 8001df2:	701a      	strb	r2, [r3, #0]
			MRT_saveFlagValue(FC_STATE_APOGEE);
 8001df4:	2003      	movs	r0, #3
 8001df6:	f001 fed5 	bl	8003ba4 <MRT_saveFlagValue>
		}

		//TODO TESTING SAVE EVERY ALT REGISTERS
		MRT_RTC_setBackupReg(FC_STATE_ALT_PAD, rtc_bckp_reg_alt_pad);
 8001dfa:	4b3c      	ldr	r3, [pc, #240]	; (8001eec <StartWatchDog+0x1ac>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4619      	mov	r1, r3
 8001e00:	2009      	movs	r0, #9
 8001e02:	f001 f865 	bl	8002ed0 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_PAD_TIME, rtc_bckp_reg_pad_time);
 8001e06:	4b3a      	ldr	r3, [pc, #232]	; (8001ef0 <StartWatchDog+0x1b0>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	200a      	movs	r0, #10
 8001e0e:	f001 f85f 	bl	8002ed0 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_STATE_TRUE_APOGEE, rtc_bckp_reg_alt_true_apogee);
 8001e12:	4b38      	ldr	r3, [pc, #224]	; (8001ef4 <StartWatchDog+0x1b4>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4619      	mov	r1, r3
 8001e18:	200b      	movs	r0, #11
 8001e1a:	f001 f859 	bl	8002ed0 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_TRUE_APOGEE_TIME, rtc_bckp_reg_true_apogee_time);
 8001e1e:	4b36      	ldr	r3, [pc, #216]	; (8001ef8 <StartWatchDog+0x1b8>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4619      	mov	r1, r3
 8001e24:	200c      	movs	r0, #12
 8001e26:	f001 f853 	bl	8002ed0 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_STATE_ALT_APOGEE, rtc_bckp_reg_alt_apogee);
 8001e2a:	4b34      	ldr	r3, [pc, #208]	; (8001efc <StartWatchDog+0x1bc>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4619      	mov	r1, r3
 8001e30:	200d      	movs	r0, #13
 8001e32:	f001 f84d 	bl	8002ed0 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_APOGEE_TIME, rtc_bckp_reg_apogee_time);
 8001e36:	4b32      	ldr	r3, [pc, #200]	; (8001f00 <StartWatchDog+0x1c0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	200e      	movs	r0, #14
 8001e3e:	f001 f847 	bl	8002ed0 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_STATE_ALT_MAIN, rtc_bckp_reg_alt_main);
 8001e42:	4b30      	ldr	r3, [pc, #192]	; (8001f04 <StartWatchDog+0x1c4>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4619      	mov	r1, r3
 8001e48:	200f      	movs	r0, #15
 8001e4a:	f001 f841 	bl	8002ed0 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_MAIN_TIME, rtc_bckp_reg_main_time);
 8001e4e:	4b2e      	ldr	r3, [pc, #184]	; (8001f08 <StartWatchDog+0x1c8>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4619      	mov	r1, r3
 8001e54:	2010      	movs	r0, #16
 8001e56:	f001 f83b 	bl	8002ed0 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_STATE_ALT_LANDED, rtc_bckp_reg_alt_landed);
 8001e5a:	4b2c      	ldr	r3, [pc, #176]	; (8001f0c <StartWatchDog+0x1cc>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4619      	mov	r1, r3
 8001e60:	2011      	movs	r0, #17
 8001e62:	f001 f835 	bl	8002ed0 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_LANDED_TIME, rtc_bckp_reg_landed_time);
 8001e66:	4b2a      	ldr	r3, [pc, #168]	; (8001f10 <StartWatchDog+0x1d0>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	2012      	movs	r0, #18
 8001e6e:	f001 f82f 	bl	8002ed0 <MRT_RTC_setBackupReg>
	 }

	  //Check if it's sleep time
	  if (flagA==1){
 8001e72:	4b28      	ldr	r3, [pc, #160]	; (8001f14 <StartWatchDog+0x1d4>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d110      	bne.n	8001e9c <StartWatchDog+0x15c>
		//Update iwdg_flag
		iwdg_flag = 1;
 8001e7a:	4b27      	ldr	r3, [pc, #156]	; (8001f18 <StartWatchDog+0x1d8>)
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	701a      	strb	r2, [r3, #0]
		rtc_bckp_reg_apogee = iwdg_flag;
 8001e80:	4b25      	ldr	r3, [pc, #148]	; (8001f18 <StartWatchDog+0x1d8>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	461a      	mov	r2, r3
 8001e86:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <StartWatchDog+0x1a4>)
 8001e88:	601a      	str	r2, [r3, #0]
		ext_flash_apogee = iwdg_flag;
 8001e8a:	4b23      	ldr	r3, [pc, #140]	; (8001f18 <StartWatchDog+0x1d8>)
 8001e8c:	781a      	ldrb	r2, [r3, #0]
 8001e8e:	4b16      	ldr	r3, [pc, #88]	; (8001ee8 <StartWatchDog+0x1a8>)
 8001e90:	701a      	strb	r2, [r3, #0]
		MRT_saveFlagValue(FC_STATE_IWDG);
 8001e92:	2002      	movs	r0, #2
 8001e94:	f001 fe86 	bl	8003ba4 <MRT_saveFlagValue>

		//Reset to deactivate IWDG
		NVIC_SystemReset();
 8001e98:	f7ff fb66 	bl	8001568 <__NVIC_SystemReset>
	  }

	  MRT_checkThreadStates();
 8001e9c:	f000 f864 	bl	8001f68 <MRT_checkThreadStates>

	  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	2104      	movs	r1, #4
 8001ea4:	4803      	ldr	r0, [pc, #12]	; (8001eb4 <StartWatchDog+0x174>)
 8001ea6:	f007 fee1 	bl	8009c6c <HAL_GPIO_WritePin>

	  osDelay(1000/WD_FREQ);
 8001eaa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001eae:	f00d f90b 	bl	800f0c8 <osDelay>
	 HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 8001eb2:	e74b      	b.n	8001d4c <StartWatchDog+0xc>
 8001eb4:	40020800 	.word	0x40020800
 8001eb8:	2000038d 	.word	0x2000038d
 8001ebc:	2000038e 	.word	0x2000038e
 8001ec0:	2000038f 	.word	0x2000038f
 8001ec4:	20000390 	.word	0x20000390
 8001ec8:	200002e0 	.word	0x200002e0
 8001ecc:	080182f4 	.word	0x080182f4
 8001ed0:	200002e4 	.word	0x200002e4
 8001ed4:	2000038c 	.word	0x2000038c
 8001ed8:	20000338 	.word	0x20000338
 8001edc:	2000037a 	.word	0x2000037a
 8001ee0:	2000038b 	.word	0x2000038b
 8001ee4:	20000334 	.word	0x20000334
 8001ee8:	20000379 	.word	0x20000379
 8001eec:	2000034c 	.word	0x2000034c
 8001ef0:	20000350 	.word	0x20000350
 8001ef4:	20000354 	.word	0x20000354
 8001ef8:	20000358 	.word	0x20000358
 8001efc:	2000035c 	.word	0x2000035c
 8001f00:	20000360 	.word	0x20000360
 8001f04:	20000364 	.word	0x20000364
 8001f08:	20000368 	.word	0x20000368
 8001f0c:	2000036c 	.word	0x2000036c
 8001f10:	20000370 	.word	0x20000370
 8001f14:	20000374 	.word	0x20000374
 8001f18:	2000038a 	.word	0x2000038a

08001f1c <StartPropulsion4>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPropulsion4 */
void StartPropulsion4(void *argument)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPropulsion4 */

	//Add thread id to the list
	threadsID[4]=osThreadGetId();
 8001f24:	f00d f834 	bl	800ef90 <osThreadGetId>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	4a0c      	ldr	r2, [pc, #48]	; (8001f5c <StartPropulsion4+0x40>)
 8001f2c:	6113      	str	r3, [r2, #16]

	#if !PROPULSION_THREAD
	osThreadExit();
	#endif

	if (apogee_flag || ejection_stage_flag >= DROGUE_DESCENT){
 8001f2e:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <StartPropulsion4+0x44>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d103      	bne.n	8001f3e <StartPropulsion4+0x22>
 8001f36:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <StartPropulsion4+0x48>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d901      	bls.n	8001f42 <StartPropulsion4+0x26>
		osThreadExit();
 8001f3e:	f00d f890 	bl	800f062 <osThreadExit>

  /* Infinite loop */
  for(;;)
  {
	  //Poll propulsion sensors
	  MRT_pollPropulsion();
 8001f42:	f002 ff1d 	bl	8004d80 <MRT_pollPropulsion>

	  if (apogee_flag){
 8001f46:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <StartPropulsion4+0x44>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <StartPropulsion4+0x36>
		  osThreadExit();
 8001f4e:	f00d f888 	bl	800f062 <osThreadExit>
	  }
	  else{
		  osDelay(1000/PRE_APOGEE_POLL_FREQ);
 8001f52:	2014      	movs	r0, #20
 8001f54:	f00d f8b8 	bl	800f0c8 <osDelay>
	  MRT_pollPropulsion();
 8001f58:	e7f3      	b.n	8001f42 <StartPropulsion4+0x26>
 8001f5a:	bf00      	nop
 8001f5c:	20005b34 	.word	0x20005b34
 8001f60:	2000038b 	.word	0x2000038b
 8001f64:	2000038c 	.word	0x2000038c

08001f68 <MRT_checkThreadStates>:
/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

//TODO private functions

void MRT_checkThreadStates(void){
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
	  //Check each thread state
	  #if THREAD_KEEPER

	  osThreadState_t thread_state;

	  for (int i=0; i < NUMBER_OF_THREADS;i++){
 8001f6e:	2300      	movs	r3, #0
 8001f70:	607b      	str	r3, [r7, #4]
 8001f72:	e055      	b.n	8002020 <MRT_checkThreadStates+0xb8>

		  thread_state = osThreadGetState(threadsID[i]);
 8001f74:	4a2e      	ldr	r2, [pc, #184]	; (8002030 <MRT_checkThreadStates+0xc8>)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f00d f813 	bl	800efa8 <osThreadGetState>
 8001f82:	6038      	str	r0, [r7, #0]

		  if (thread_state == osThreadInactive ||
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d005      	beq.n	8001f96 <MRT_checkThreadStates+0x2e>
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	2b03      	cmp	r3, #3
 8001f8e:	d002      	beq.n	8001f96 <MRT_checkThreadStates+0x2e>
			  thread_state == osThreadBlocked  ||
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	d128      	bne.n	8001fe8 <MRT_checkThreadStates+0x80>
			  thread_state == osThreadTerminated){

			  //Ejection thread
			  if (i==1 && ejection_stage_flag < LANDED){
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d10a      	bne.n	8001fb2 <MRT_checkThreadStates+0x4a>
 8001f9c:	4b25      	ldr	r3, [pc, #148]	; (8002034 <MRT_checkThreadStates+0xcc>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b03      	cmp	r3, #3
 8001fa2:	d806      	bhi.n	8001fb2 <MRT_checkThreadStates+0x4a>
				 osThreadResume(threadsID[i]);
 8001fa4:	4a22      	ldr	r2, [pc, #136]	; (8002030 <MRT_checkThreadStates+0xc8>)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f00d f837 	bl	800f020 <osThreadResume>
			  }

			  //Propulsion thread
			  if (i==4 && (apogee_flag || ejection_stage_flag >= DROGUE_DESCENT)){
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b04      	cmp	r3, #4
 8001fb6:	d10f      	bne.n	8001fd8 <MRT_checkThreadStates+0x70>
 8001fb8:	4b1f      	ldr	r3, [pc, #124]	; (8002038 <MRT_checkThreadStates+0xd0>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d103      	bne.n	8001fc8 <MRT_checkThreadStates+0x60>
 8001fc0:	4b1c      	ldr	r3, [pc, #112]	; (8002034 <MRT_checkThreadStates+0xcc>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d907      	bls.n	8001fd8 <MRT_checkThreadStates+0x70>
				  osThreadTerminate(threadsID[i]);
 8001fc8:	4a19      	ldr	r2, [pc, #100]	; (8002030 <MRT_checkThreadStates+0xc8>)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f00d f84c 	bl	800f06e <osThreadTerminate>
				  continue;
 8001fd6:	e020      	b.n	800201a <MRT_checkThreadStates+0xb2>
			  }
			  else {
				 //Resume otherwise
				 osThreadResume(threadsID[i]);
 8001fd8:	4a15      	ldr	r2, [pc, #84]	; (8002030 <MRT_checkThreadStates+0xc8>)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f00d f81d 	bl	800f020 <osThreadResume>
			  if (i==4 && (apogee_flag || ejection_stage_flag >= DROGUE_DESCENT)){
 8001fe6:	e018      	b.n	800201a <MRT_checkThreadStates+0xb2>
			  }
		  }

		  else if (thread_state == osThreadError){
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fee:	d114      	bne.n	800201a <MRT_checkThreadStates+0xb2>
			  //If it's the propulsion thread
			  if (i==4 && (apogee_flag || ejection_stage_flag >= DROGUE_DESCENT)){
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	d10f      	bne.n	8002016 <MRT_checkThreadStates+0xae>
 8001ff6:	4b10      	ldr	r3, [pc, #64]	; (8002038 <MRT_checkThreadStates+0xd0>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d103      	bne.n	8002006 <MRT_checkThreadStates+0x9e>
 8001ffe:	4b0d      	ldr	r3, [pc, #52]	; (8002034 <MRT_checkThreadStates+0xcc>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d907      	bls.n	8002016 <MRT_checkThreadStates+0xae>
				  osThreadTerminate(threadsID[i]);
 8002006:	4a0a      	ldr	r2, [pc, #40]	; (8002030 <MRT_checkThreadStates+0xc8>)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800200e:	4618      	mov	r0, r3
 8002010:	f00d f82d 	bl	800f06e <osThreadTerminate>
				  continue;
 8002014:	e001      	b.n	800201a <MRT_checkThreadStates+0xb2>
			  }
			  else{
				 //Reset otherwise
				 NVIC_SystemReset();
 8002016:	f7ff faa7 	bl	8001568 <__NVIC_SystemReset>
	  for (int i=0; i < NUMBER_OF_THREADS;i++){
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	3301      	adds	r3, #1
 800201e:	607b      	str	r3, [r7, #4]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b04      	cmp	r3, #4
 8002024:	dda6      	ble.n	8001f74 <MRT_checkThreadStates+0xc>
		  else if (thread_state == osThreadReserved){ TODO not sure what is this state
		  }
		  */
	  }
	  #endif
}
 8002026:	bf00      	nop
 8002028:	bf00      	nop
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	20005b34 	.word	0x20005b34
 8002034:	2000038c 	.word	0x2000038c
 8002038:	2000038b 	.word	0x2000038b

0800203c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b08e      	sub	sp, #56	; 0x38
 8002040:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002042:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	605a      	str	r2, [r3, #4]
 800204c:	609a      	str	r2, [r3, #8]
 800204e:	60da      	str	r2, [r3, #12]
 8002050:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	623b      	str	r3, [r7, #32]
 8002056:	4bb5      	ldr	r3, [pc, #724]	; (800232c <MX_GPIO_Init+0x2f0>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	4ab4      	ldr	r2, [pc, #720]	; (800232c <MX_GPIO_Init+0x2f0>)
 800205c:	f043 0310 	orr.w	r3, r3, #16
 8002060:	6313      	str	r3, [r2, #48]	; 0x30
 8002062:	4bb2      	ldr	r3, [pc, #712]	; (800232c <MX_GPIO_Init+0x2f0>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	f003 0310 	and.w	r3, r3, #16
 800206a:	623b      	str	r3, [r7, #32]
 800206c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	61fb      	str	r3, [r7, #28]
 8002072:	4bae      	ldr	r3, [pc, #696]	; (800232c <MX_GPIO_Init+0x2f0>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	4aad      	ldr	r2, [pc, #692]	; (800232c <MX_GPIO_Init+0x2f0>)
 8002078:	f043 0304 	orr.w	r3, r3, #4
 800207c:	6313      	str	r3, [r2, #48]	; 0x30
 800207e:	4bab      	ldr	r3, [pc, #684]	; (800232c <MX_GPIO_Init+0x2f0>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	f003 0304 	and.w	r3, r3, #4
 8002086:	61fb      	str	r3, [r7, #28]
 8002088:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	61bb      	str	r3, [r7, #24]
 800208e:	4ba7      	ldr	r3, [pc, #668]	; (800232c <MX_GPIO_Init+0x2f0>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	4aa6      	ldr	r2, [pc, #664]	; (800232c <MX_GPIO_Init+0x2f0>)
 8002094:	f043 0320 	orr.w	r3, r3, #32
 8002098:	6313      	str	r3, [r2, #48]	; 0x30
 800209a:	4ba4      	ldr	r3, [pc, #656]	; (800232c <MX_GPIO_Init+0x2f0>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	f003 0320 	and.w	r3, r3, #32
 80020a2:	61bb      	str	r3, [r7, #24]
 80020a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	617b      	str	r3, [r7, #20]
 80020aa:	4ba0      	ldr	r3, [pc, #640]	; (800232c <MX_GPIO_Init+0x2f0>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	4a9f      	ldr	r2, [pc, #636]	; (800232c <MX_GPIO_Init+0x2f0>)
 80020b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020b4:	6313      	str	r3, [r2, #48]	; 0x30
 80020b6:	4b9d      	ldr	r3, [pc, #628]	; (800232c <MX_GPIO_Init+0x2f0>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020be:	617b      	str	r3, [r7, #20]
 80020c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	613b      	str	r3, [r7, #16]
 80020c6:	4b99      	ldr	r3, [pc, #612]	; (800232c <MX_GPIO_Init+0x2f0>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	4a98      	ldr	r2, [pc, #608]	; (800232c <MX_GPIO_Init+0x2f0>)
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	6313      	str	r3, [r2, #48]	; 0x30
 80020d2:	4b96      	ldr	r3, [pc, #600]	; (800232c <MX_GPIO_Init+0x2f0>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	613b      	str	r3, [r7, #16]
 80020dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	4b92      	ldr	r3, [pc, #584]	; (800232c <MX_GPIO_Init+0x2f0>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	4a91      	ldr	r2, [pc, #580]	; (800232c <MX_GPIO_Init+0x2f0>)
 80020e8:	f043 0302 	orr.w	r3, r3, #2
 80020ec:	6313      	str	r3, [r2, #48]	; 0x30
 80020ee:	4b8f      	ldr	r3, [pc, #572]	; (800232c <MX_GPIO_Init+0x2f0>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	4b8b      	ldr	r3, [pc, #556]	; (800232c <MX_GPIO_Init+0x2f0>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	4a8a      	ldr	r2, [pc, #552]	; (800232c <MX_GPIO_Init+0x2f0>)
 8002104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002108:	6313      	str	r3, [r2, #48]	; 0x30
 800210a:	4b88      	ldr	r3, [pc, #544]	; (800232c <MX_GPIO_Init+0x2f0>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002112:	60bb      	str	r3, [r7, #8]
 8002114:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	607b      	str	r3, [r7, #4]
 800211a:	4b84      	ldr	r3, [pc, #528]	; (800232c <MX_GPIO_Init+0x2f0>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	4a83      	ldr	r2, [pc, #524]	; (800232c <MX_GPIO_Init+0x2f0>)
 8002120:	f043 0308 	orr.w	r3, r3, #8
 8002124:	6313      	str	r3, [r2, #48]	; 0x30
 8002126:	4b81      	ldr	r3, [pc, #516]	; (800232c <MX_GPIO_Init+0x2f0>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	f003 0308 	and.w	r3, r3, #8
 800212e:	607b      	str	r3, [r7, #4]
 8002130:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 8002132:	2200      	movs	r2, #0
 8002134:	f248 4184 	movw	r1, #33924	; 0x8484
 8002138:	487d      	ldr	r0, [pc, #500]	; (8002330 <MX_GPIO_Init+0x2f4>)
 800213a:	f007 fd97 	bl	8009c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin, GPIO_PIN_RESET);
 800213e:	2200      	movs	r2, #0
 8002140:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 8002144:	487b      	ldr	r0, [pc, #492]	; (8002334 <MX_GPIO_Init+0x2f8>)
 8002146:	f007 fd91 	bl	8009c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 800214a:	2200      	movs	r2, #0
 800214c:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8002150:	4879      	ldr	r0, [pc, #484]	; (8002338 <MX_GPIO_Init+0x2fc>)
 8002152:	f007 fd8b 	bl	8009c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_LEDF_GPIO_Port, OUT_LEDF_Pin, GPIO_PIN_RESET);
 8002156:	2200      	movs	r2, #0
 8002158:	2108      	movs	r1, #8
 800215a:	4878      	ldr	r0, [pc, #480]	; (800233c <MX_GPIO_Init+0x300>)
 800215c:	f007 fd86 	bl	8009c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 8002160:	2200      	movs	r2, #0
 8002162:	f645 2126 	movw	r1, #23078	; 0x5a26
 8002166:	4876      	ldr	r0, [pc, #472]	; (8002340 <MX_GPIO_Init+0x304>)
 8002168:	f007 fd80 	bl	8009c6c <HAL_GPIO_WritePin>
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_SX_CS_Pin|GPIO_PIN_8|POWER_ON_EXT_LED_Pin, GPIO_PIN_RESET);
 800216c:	2200      	movs	r2, #0
 800216e:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 8002172:	4874      	ldr	r0, [pc, #464]	; (8002344 <MX_GPIO_Init+0x308>)
 8002174:	f007 fd7a 	bl	8009c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8002178:	2200      	movs	r2, #0
 800217a:	f647 41f0 	movw	r1, #31984	; 0x7cf0
 800217e:	4872      	ldr	r0, [pc, #456]	; (8002348 <MX_GPIO_Init+0x30c>)
 8002180:	f007 fd74 	bl	8009c6c <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin;
 8002184:	f248 4384 	movw	r3, #33924	; 0x8484
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800218a:	2301      	movs	r3, #1
 800218c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218e:	2300      	movs	r3, #0
 8002190:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002192:	2300      	movs	r3, #0
 8002194:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002196:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800219a:	4619      	mov	r1, r3
 800219c:	4864      	ldr	r0, [pc, #400]	; (8002330 <MX_GPIO_Init+0x2f4>)
 800219e:	f007 fba1 	bl	80098e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80021a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021a8:	2301      	movs	r3, #1
 80021aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021ac:	2301      	movs	r3, #1
 80021ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b0:	2300      	movs	r3, #0
 80021b2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80021b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021b8:	4619      	mov	r1, r3
 80021ba:	485e      	ldr	r0, [pc, #376]	; (8002334 <MX_GPIO_Init+0x2f8>)
 80021bc:	f007 fb92 	bl	80098e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 80021c0:	2301      	movs	r3, #1
 80021c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80021c4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80021c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ca:	2300      	movs	r3, #0
 80021cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 80021ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d2:	4619      	mov	r1, r3
 80021d4:	4858      	ldr	r0, [pc, #352]	; (8002338 <MX_GPIO_Init+0x2fc>)
 80021d6:	f007 fb85 	bl	80098e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin;
 80021da:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80021de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021e0:	2301      	movs	r3, #1
 80021e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e8:	2300      	movs	r3, #0
 80021ea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021f0:	4619      	mov	r1, r3
 80021f2:	4851      	ldr	r0, [pc, #324]	; (8002338 <MX_GPIO_Init+0x2fc>)
 80021f4:	f007 fb76 	bl	80098e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUT_LEDF_Pin;
 80021f8:	2308      	movs	r3, #8
 80021fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021fc:	2301      	movs	r3, #1
 80021fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002200:	2300      	movs	r3, #0
 8002202:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002204:	2300      	movs	r3, #0
 8002206:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OUT_LEDF_GPIO_Port, &GPIO_InitStruct);
 8002208:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800220c:	4619      	mov	r1, r3
 800220e:	484b      	ldr	r0, [pc, #300]	; (800233c <MX_GPIO_Init+0x300>)
 8002210:	f007 fb68 	bl	80098e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 8002214:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800221a:	2300      	movs	r3, #0
 800221c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221e:	2300      	movs	r3, #0
 8002220:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002222:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002226:	4619      	mov	r1, r3
 8002228:	4843      	ldr	r0, [pc, #268]	; (8002338 <MX_GPIO_Init+0x2fc>)
 800222a:	f007 fb5b 	bl	80098e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 800222e:	2302      	movs	r3, #2
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002232:	2300      	movs	r3, #0
 8002234:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002236:	2300      	movs	r3, #0
 8002238:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 800223a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800223e:	4619      	mov	r1, r3
 8002240:	4840      	ldr	r0, [pc, #256]	; (8002344 <MX_GPIO_Init+0x308>)
 8002242:	f007 fb4f 	bl	80098e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_2_Pin;
 8002246:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800224c:	2300      	movs	r3, #0
 800224e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002250:	2300      	movs	r3, #0
 8002252:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_PyroValve_Cont_2_GPIO_Port, &GPIO_InitStruct);
 8002254:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002258:	4619      	mov	r1, r3
 800225a:	4836      	ldr	r0, [pc, #216]	; (8002334 <MX_GPIO_Init+0x2f8>)
 800225c:	f007 fb42 	bl	80098e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin;
 8002260:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002266:	2301      	movs	r3, #1
 8002268:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226a:	2300      	movs	r3, #0
 800226c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226e:	2300      	movs	r3, #0
 8002270:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002272:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002276:	4619      	mov	r1, r3
 8002278:	482e      	ldr	r0, [pc, #184]	; (8002334 <MX_GPIO_Init+0x2f8>)
 800227a:	f007 fb33 	bl	80098e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_1_Pin|SX_BUSY_Pin|SX_DIO_Pin|IN_EJ_Main_Cont_Pin
 800227e:	f242 4319 	movw	r3, #9241	; 0x2419
 8002282:	627b      	str	r3, [r7, #36]	; 0x24
                          |IN_EJ_Drogue_Cont_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002284:	2300      	movs	r3, #0
 8002286:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002288:	2300      	movs	r3, #0
 800228a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800228c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002290:	4619      	mov	r1, r3
 8002292:	482b      	ldr	r0, [pc, #172]	; (8002340 <MX_GPIO_Init+0x304>)
 8002294:	f007 fb26 	bl	80098e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 8002298:	f645 2326 	movw	r3, #23078	; 0x5a26
 800229c:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800229e:	2301      	movs	r3, #1
 80022a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a2:	2300      	movs	r3, #0
 80022a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a6:	2300      	movs	r3, #0
 80022a8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022ae:	4619      	mov	r1, r3
 80022b0:	4823      	ldr	r0, [pc, #140]	; (8002340 <MX_GPIO_Init+0x304>)
 80022b2:	f007 fb17 	bl	80098e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = PAYLOAD_I2C_EN_Pin|IN_XTend_Continuity_Pin;
 80022b6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80022ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022bc:	2300      	movs	r3, #0
 80022be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c0:	2300      	movs	r3, #0
 80022c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022c8:	4619      	mov	r1, r3
 80022ca:	4819      	ldr	r0, [pc, #100]	; (8002330 <MX_GPIO_Init+0x2f4>)
 80022cc:	f007 fb0a 	bl	80098e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB8 PBPin */
  GPIO_InitStruct.Pin = SPI2_SX_CS_Pin|GPIO_PIN_8|POWER_ON_EXT_LED_Pin;
 80022d0:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 80022d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022d6:	2301      	movs	r3, #1
 80022d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022de:	2300      	movs	r3, #0
 80022e0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022e6:	4619      	mov	r1, r3
 80022e8:	4816      	ldr	r0, [pc, #88]	; (8002344 <MX_GPIO_Init+0x308>)
 80022ea:	f007 fafb 	bl	80098e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 80022ee:	f647 43f0 	movw	r3, #31984	; 0x7cf0
 80022f2:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022f4:	2301      	movs	r3, #1
 80022f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fc:	2300      	movs	r3, #0
 80022fe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002300:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002304:	4619      	mov	r1, r3
 8002306:	4810      	ldr	r0, [pc, #64]	; (8002348 <MX_GPIO_Init+0x30c>)
 8002308:	f007 faec 	bl	80098e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 800230c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002310:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002312:	2300      	movs	r3, #0
 8002314:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002316:	2300      	movs	r3, #0
 8002318:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 800231a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800231e:	4619      	mov	r1, r3
 8002320:	4809      	ldr	r0, [pc, #36]	; (8002348 <MX_GPIO_Init+0x30c>)
 8002322:	f007 fadf 	bl	80098e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_LSM6DSR_INT1_Pin;
 8002326:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800232a:	e00f      	b.n	800234c <MX_GPIO_Init+0x310>
 800232c:	40023800 	.word	0x40023800
 8002330:	40021000 	.word	0x40021000
 8002334:	40021400 	.word	0x40021400
 8002338:	40020800 	.word	0x40020800
 800233c:	40020000 	.word	0x40020000
 8002340:	40021800 	.word	0x40021800
 8002344:	40020400 	.word	0x40020400
 8002348:	40020c00 	.word	0x40020c00
 800234c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800234e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002352:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002354:	2300      	movs	r3, #0
 8002356:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002358:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800235c:	4619      	mov	r1, r3
 800235e:	4807      	ldr	r0, [pc, #28]	; (800237c <MX_GPIO_Init+0x340>)
 8002360:	f007 fac0 	bl	80098e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8002364:	2200      	movs	r2, #0
 8002366:	2105      	movs	r1, #5
 8002368:	2006      	movs	r0, #6
 800236a:	f007 fa83 	bl	8009874 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800236e:	2006      	movs	r0, #6
 8002370:	f007 fa9c 	bl	80098ac <HAL_NVIC_EnableIRQ>

}
 8002374:	bf00      	nop
 8002376:	3738      	adds	r7, #56	; 0x38
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40021800 	.word	0x40021800

08002380 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002384:	4b1b      	ldr	r3, [pc, #108]	; (80023f4 <MX_I2C2_Init+0x74>)
 8002386:	4a1c      	ldr	r2, [pc, #112]	; (80023f8 <MX_I2C2_Init+0x78>)
 8002388:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800238a:	4b1a      	ldr	r3, [pc, #104]	; (80023f4 <MX_I2C2_Init+0x74>)
 800238c:	4a1b      	ldr	r2, [pc, #108]	; (80023fc <MX_I2C2_Init+0x7c>)
 800238e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002390:	4b18      	ldr	r3, [pc, #96]	; (80023f4 <MX_I2C2_Init+0x74>)
 8002392:	2200      	movs	r2, #0
 8002394:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002396:	4b17      	ldr	r3, [pc, #92]	; (80023f4 <MX_I2C2_Init+0x74>)
 8002398:	2200      	movs	r2, #0
 800239a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800239c:	4b15      	ldr	r3, [pc, #84]	; (80023f4 <MX_I2C2_Init+0x74>)
 800239e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023a2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023a4:	4b13      	ldr	r3, [pc, #76]	; (80023f4 <MX_I2C2_Init+0x74>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80023aa:	4b12      	ldr	r3, [pc, #72]	; (80023f4 <MX_I2C2_Init+0x74>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023b0:	4b10      	ldr	r3, [pc, #64]	; (80023f4 <MX_I2C2_Init+0x74>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023b6:	4b0f      	ldr	r3, [pc, #60]	; (80023f4 <MX_I2C2_Init+0x74>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80023bc:	480d      	ldr	r0, [pc, #52]	; (80023f4 <MX_I2C2_Init+0x74>)
 80023be:	f007 fc87 	bl	8009cd0 <HAL_I2C_Init>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80023c8:	f000 fab0 	bl	800292c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80023cc:	2100      	movs	r1, #0
 80023ce:	4809      	ldr	r0, [pc, #36]	; (80023f4 <MX_I2C2_Init+0x74>)
 80023d0:	f008 fc73 	bl	800acba <HAL_I2CEx_ConfigAnalogFilter>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80023da:	f000 faa7 	bl	800292c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80023de:	2100      	movs	r1, #0
 80023e0:	4804      	ldr	r0, [pc, #16]	; (80023f4 <MX_I2C2_Init+0x74>)
 80023e2:	f008 fca6 	bl	800ad32 <HAL_I2CEx_ConfigDigitalFilter>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80023ec:	f000 fa9e 	bl	800292c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80023f0:	bf00      	nop
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	20005bac 	.word	0x20005bac
 80023f8:	40005800 	.word	0x40005800
 80023fc:	000186a0 	.word	0x000186a0

08002400 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002404:	4b1b      	ldr	r3, [pc, #108]	; (8002474 <MX_I2C3_Init+0x74>)
 8002406:	4a1c      	ldr	r2, [pc, #112]	; (8002478 <MX_I2C3_Init+0x78>)
 8002408:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800240a:	4b1a      	ldr	r3, [pc, #104]	; (8002474 <MX_I2C3_Init+0x74>)
 800240c:	4a1b      	ldr	r2, [pc, #108]	; (800247c <MX_I2C3_Init+0x7c>)
 800240e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002410:	4b18      	ldr	r3, [pc, #96]	; (8002474 <MX_I2C3_Init+0x74>)
 8002412:	2200      	movs	r2, #0
 8002414:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002416:	4b17      	ldr	r3, [pc, #92]	; (8002474 <MX_I2C3_Init+0x74>)
 8002418:	2200      	movs	r2, #0
 800241a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800241c:	4b15      	ldr	r3, [pc, #84]	; (8002474 <MX_I2C3_Init+0x74>)
 800241e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002422:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002424:	4b13      	ldr	r3, [pc, #76]	; (8002474 <MX_I2C3_Init+0x74>)
 8002426:	2200      	movs	r2, #0
 8002428:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800242a:	4b12      	ldr	r3, [pc, #72]	; (8002474 <MX_I2C3_Init+0x74>)
 800242c:	2200      	movs	r2, #0
 800242e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002430:	4b10      	ldr	r3, [pc, #64]	; (8002474 <MX_I2C3_Init+0x74>)
 8002432:	2200      	movs	r2, #0
 8002434:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002436:	4b0f      	ldr	r3, [pc, #60]	; (8002474 <MX_I2C3_Init+0x74>)
 8002438:	2200      	movs	r2, #0
 800243a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800243c:	480d      	ldr	r0, [pc, #52]	; (8002474 <MX_I2C3_Init+0x74>)
 800243e:	f007 fc47 	bl	8009cd0 <HAL_I2C_Init>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002448:	f000 fa70 	bl	800292c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800244c:	2100      	movs	r1, #0
 800244e:	4809      	ldr	r0, [pc, #36]	; (8002474 <MX_I2C3_Init+0x74>)
 8002450:	f008 fc33 	bl	800acba <HAL_I2CEx_ConfigAnalogFilter>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800245a:	f000 fa67 	bl	800292c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800245e:	2100      	movs	r1, #0
 8002460:	4804      	ldr	r0, [pc, #16]	; (8002474 <MX_I2C3_Init+0x74>)
 8002462:	f008 fc66 	bl	800ad32 <HAL_I2CEx_ConfigDigitalFilter>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800246c:	f000 fa5e 	bl	800292c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002470:	bf00      	nop
 8002472:	bd80      	pop	{r7, pc}
 8002474:	20005b58 	.word	0x20005b58
 8002478:	40005c00 	.word	0x40005c00
 800247c:	000186a0 	.word	0x000186a0

08002480 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b08c      	sub	sp, #48	; 0x30
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002488:	f107 031c 	add.w	r3, r7, #28
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	605a      	str	r2, [r3, #4]
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	60da      	str	r2, [r3, #12]
 8002496:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a42      	ldr	r2, [pc, #264]	; (80025a8 <HAL_I2C_MspInit+0x128>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d12d      	bne.n	80024fe <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	61bb      	str	r3, [r7, #24]
 80024a6:	4b41      	ldr	r3, [pc, #260]	; (80025ac <HAL_I2C_MspInit+0x12c>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	4a40      	ldr	r2, [pc, #256]	; (80025ac <HAL_I2C_MspInit+0x12c>)
 80024ac:	f043 0302 	orr.w	r3, r3, #2
 80024b0:	6313      	str	r3, [r2, #48]	; 0x30
 80024b2:	4b3e      	ldr	r3, [pc, #248]	; (80025ac <HAL_I2C_MspInit+0x12c>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	61bb      	str	r3, [r7, #24]
 80024bc:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80024be:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80024c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024c4:	2312      	movs	r3, #18
 80024c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024c8:	2301      	movs	r3, #1
 80024ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024cc:	2303      	movs	r3, #3
 80024ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80024d0:	2304      	movs	r3, #4
 80024d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024d4:	f107 031c 	add.w	r3, r7, #28
 80024d8:	4619      	mov	r1, r3
 80024da:	4835      	ldr	r0, [pc, #212]	; (80025b0 <HAL_I2C_MspInit+0x130>)
 80024dc:	f007 fa02 	bl	80098e4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80024e0:	2300      	movs	r3, #0
 80024e2:	617b      	str	r3, [r7, #20]
 80024e4:	4b31      	ldr	r3, [pc, #196]	; (80025ac <HAL_I2C_MspInit+0x12c>)
 80024e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e8:	4a30      	ldr	r2, [pc, #192]	; (80025ac <HAL_I2C_MspInit+0x12c>)
 80024ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024ee:	6413      	str	r3, [r2, #64]	; 0x40
 80024f0:	4b2e      	ldr	r3, [pc, #184]	; (80025ac <HAL_I2C_MspInit+0x12c>)
 80024f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024f8:	617b      	str	r3, [r7, #20]
 80024fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80024fc:	e050      	b.n	80025a0 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a2c      	ldr	r2, [pc, #176]	; (80025b4 <HAL_I2C_MspInit+0x134>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d14b      	bne.n	80025a0 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002508:	2300      	movs	r3, #0
 800250a:	613b      	str	r3, [r7, #16]
 800250c:	4b27      	ldr	r3, [pc, #156]	; (80025ac <HAL_I2C_MspInit+0x12c>)
 800250e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002510:	4a26      	ldr	r2, [pc, #152]	; (80025ac <HAL_I2C_MspInit+0x12c>)
 8002512:	f043 0304 	orr.w	r3, r3, #4
 8002516:	6313      	str	r3, [r2, #48]	; 0x30
 8002518:	4b24      	ldr	r3, [pc, #144]	; (80025ac <HAL_I2C_MspInit+0x12c>)
 800251a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	613b      	str	r3, [r7, #16]
 8002522:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002524:	2300      	movs	r3, #0
 8002526:	60fb      	str	r3, [r7, #12]
 8002528:	4b20      	ldr	r3, [pc, #128]	; (80025ac <HAL_I2C_MspInit+0x12c>)
 800252a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252c:	4a1f      	ldr	r2, [pc, #124]	; (80025ac <HAL_I2C_MspInit+0x12c>)
 800252e:	f043 0301 	orr.w	r3, r3, #1
 8002532:	6313      	str	r3, [r2, #48]	; 0x30
 8002534:	4b1d      	ldr	r3, [pc, #116]	; (80025ac <HAL_I2C_MspInit+0x12c>)
 8002536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002540:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002544:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002546:	2312      	movs	r3, #18
 8002548:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800254a:	2301      	movs	r3, #1
 800254c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800254e:	2303      	movs	r3, #3
 8002550:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002552:	2304      	movs	r3, #4
 8002554:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002556:	f107 031c 	add.w	r3, r7, #28
 800255a:	4619      	mov	r1, r3
 800255c:	4816      	ldr	r0, [pc, #88]	; (80025b8 <HAL_I2C_MspInit+0x138>)
 800255e:	f007 f9c1 	bl	80098e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002562:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002566:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002568:	2312      	movs	r3, #18
 800256a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800256c:	2301      	movs	r3, #1
 800256e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002570:	2303      	movs	r3, #3
 8002572:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002574:	2304      	movs	r3, #4
 8002576:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002578:	f107 031c 	add.w	r3, r7, #28
 800257c:	4619      	mov	r1, r3
 800257e:	480f      	ldr	r0, [pc, #60]	; (80025bc <HAL_I2C_MspInit+0x13c>)
 8002580:	f007 f9b0 	bl	80098e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002584:	2300      	movs	r3, #0
 8002586:	60bb      	str	r3, [r7, #8]
 8002588:	4b08      	ldr	r3, [pc, #32]	; (80025ac <HAL_I2C_MspInit+0x12c>)
 800258a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258c:	4a07      	ldr	r2, [pc, #28]	; (80025ac <HAL_I2C_MspInit+0x12c>)
 800258e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002592:	6413      	str	r3, [r2, #64]	; 0x40
 8002594:	4b05      	ldr	r3, [pc, #20]	; (80025ac <HAL_I2C_MspInit+0x12c>)
 8002596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002598:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800259c:	60bb      	str	r3, [r7, #8]
 800259e:	68bb      	ldr	r3, [r7, #8]
}
 80025a0:	bf00      	nop
 80025a2:	3730      	adds	r7, #48	; 0x30
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40005800 	.word	0x40005800
 80025ac:	40023800 	.word	0x40023800
 80025b0:	40020400 	.word	0x40020400
 80025b4:	40005c00 	.word	0x40005c00
 80025b8:	40020800 	.word	0x40020800
 80025bc:	40020000 	.word	0x40020000

080025c0 <main>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int main(void){
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
	MRT_STM_Init();
 80025c4:	f000 f894 	bl	80026f0 <MRT_STM_Init>
	println("\r\n\r\nSTM Init...OK");
 80025c8:	480c      	ldr	r0, [pc, #48]	; (80025fc <main+0x3c>)
 80025ca:	f7fe fd2f 	bl	800102c <println>

	MRT_Init();
 80025ce:	f7fe fdcb 	bl	8001168 <MRT_Init>

	println("\r\n\r\n/****Starting FC****/\r\n\r\n");
 80025d2:	480b      	ldr	r0, [pc, #44]	; (8002600 <main+0x40>)
 80025d4:	f7fe fd2a 	bl	800102c <println>
	HAL_IWDG_Refresh(&hiwdg);
	buzz_startup_success();
 80025d8:	f7fe fdae 	bl	8001138 <buzz_startup_success>

	MRT_waitForLaunch();
 80025dc:	f000 f8aa 	bl	8002734 <MRT_waitForLaunch>
	//if (DEBUG) TESTING_LOOP(); //TODO remove

	//TODO I2C SENSORS (lsm and lps) SOMETIMES DON'T WANT TO WORK ANYMORE -> NEED TO RESET THE POWER (Enter quick standByMode?)

	//Initialize the os
	MX_FREERTOS_Init();
 80025e0:	f7fe ffd8 	bl	8001594 <MX_FREERTOS_Init>

	//Starting the os
	println("\r\n/****Starting the OS****/\r\n");
 80025e4:	4807      	ldr	r0, [pc, #28]	; (8002604 <main+0x44>)
 80025e6:	f7fe fd21 	bl	800102c <println>
	osKernelStart();
 80025ea:	f00c fc19 	bl	800ee20 <osKernelStart>

	println("SOMETHING WENT HORRIBLY WRONG, WAITING FOR WATCH DOG RESET");
 80025ee:	4806      	ldr	r0, [pc, #24]	; (8002608 <main+0x48>)
 80025f0:	f7fe fd1c 	bl	800102c <println>
	HAL_IWDG_Refresh(&hiwdg);
	MRT_Deinit();
 80025f4:	f7fe fdce 	bl	8001194 <MRT_Deinit>
	while (1){}
 80025f8:	e7fe      	b.n	80025f8 <main+0x38>
 80025fa:	bf00      	nop
 80025fc:	0801831c 	.word	0x0801831c
 8002600:	08018330 	.word	0x08018330
 8002604:	08018350 	.word	0x08018350
 8002608:	08018370 	.word	0x08018370

0800260c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b094      	sub	sp, #80	; 0x50
 8002610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002612:	f107 0320 	add.w	r3, r7, #32
 8002616:	2230      	movs	r2, #48	; 0x30
 8002618:	2100      	movs	r1, #0
 800261a:	4618      	mov	r0, r3
 800261c:	f010 fcb6 	bl	8012f8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002620:	f107 030c 	add.w	r3, r7, #12
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	609a      	str	r2, [r3, #8]
 800262c:	60da      	str	r2, [r3, #12]
 800262e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002630:	2300      	movs	r3, #0
 8002632:	60bb      	str	r3, [r7, #8]
 8002634:	4b2c      	ldr	r3, [pc, #176]	; (80026e8 <SystemClock_Config+0xdc>)
 8002636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002638:	4a2b      	ldr	r2, [pc, #172]	; (80026e8 <SystemClock_Config+0xdc>)
 800263a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800263e:	6413      	str	r3, [r2, #64]	; 0x40
 8002640:	4b29      	ldr	r3, [pc, #164]	; (80026e8 <SystemClock_Config+0xdc>)
 8002642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002648:	60bb      	str	r3, [r7, #8]
 800264a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800264c:	2300      	movs	r3, #0
 800264e:	607b      	str	r3, [r7, #4]
 8002650:	4b26      	ldr	r3, [pc, #152]	; (80026ec <SystemClock_Config+0xe0>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a25      	ldr	r2, [pc, #148]	; (80026ec <SystemClock_Config+0xe0>)
 8002656:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800265a:	6013      	str	r3, [r2, #0]
 800265c:	4b23      	ldr	r3, [pc, #140]	; (80026ec <SystemClock_Config+0xe0>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002664:	607b      	str	r3, [r7, #4]
 8002666:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002668:	2309      	movs	r3, #9
 800266a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800266c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002670:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002672:	2301      	movs	r3, #1
 8002674:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002676:	2302      	movs	r3, #2
 8002678:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800267a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800267e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002680:	2308      	movs	r3, #8
 8002682:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002684:	23b4      	movs	r3, #180	; 0xb4
 8002686:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002688:	2302      	movs	r3, #2
 800268a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800268c:	2303      	movs	r3, #3
 800268e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002690:	f107 0320 	add.w	r3, r7, #32
 8002694:	4618      	mov	r0, r3
 8002696:	f008 fc19 	bl	800aecc <HAL_RCC_OscConfig>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80026a0:	f000 f944 	bl	800292c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80026a4:	f008 fbc2 	bl	800ae2c <HAL_PWREx_EnableOverDrive>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80026ae:	f000 f93d 	bl	800292c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026b2:	230f      	movs	r3, #15
 80026b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026b6:	2302      	movs	r3, #2
 80026b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026ba:	2300      	movs	r3, #0
 80026bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80026be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80026c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80026c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80026c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80026ca:	f107 030c 	add.w	r3, r7, #12
 80026ce:	2105      	movs	r1, #5
 80026d0:	4618      	mov	r0, r3
 80026d2:	f008 fe73 	bl	800b3bc <HAL_RCC_ClockConfig>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80026dc:	f000 f926 	bl	800292c <Error_Handler>
  }
}
 80026e0:	bf00      	nop
 80026e2:	3750      	adds	r7, #80	; 0x50
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40023800 	.word	0x40023800
 80026ec:	40007000 	.word	0x40007000

080026f0 <MRT_STM_Init>:

/* USER CODE BEGIN 4 */

void MRT_STM_Init(void){
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
	HAL_Init();
 80026f4:	f006 fb6c 	bl	8008dd0 <HAL_Init>
	SystemClock_Config();
 80026f8:	f7ff ff88 	bl	800260c <SystemClock_Config>

	MX_GPIO_Init();
 80026fc:	f7ff fc9e 	bl	800203c <MX_GPIO_Init>
	MX_ADC1_Init();
 8002700:	f7fe fe9c 	bl	800143c <MX_ADC1_Init>
	MX_I2C2_Init();
 8002704:	f7ff fe3c 	bl	8002380 <MX_I2C2_Init>
	MX_I2C3_Init();
 8002708:	f7ff fe7a 	bl	8002400 <MX_I2C3_Init>
	MX_SPI2_Init();
 800270c:	f000 fbfe 	bl	8002f0c <MX_SPI2_Init>
	MX_SPI4_Init();
 8002710:	f000 fc32 	bl	8002f78 <MX_SPI4_Init>
	MX_SPI5_Init();
 8002714:	f000 fc66 	bl	8002fe4 <MX_SPI5_Init>
	MX_TIM2_Init();
 8002718:	f000 fe48 	bl	80033ac <MX_TIM2_Init>
	MX_UART8_Init();
 800271c:	f000 ff14 	bl	8003548 <MX_UART8_Init>
	MX_USART3_UART_Init();
 8002720:	f000 ff3c 	bl	800359c <MX_USART3_UART_Init>
	MX_USART6_UART_Init();
 8002724:	f000 ff64 	bl	80035f0 <MX_USART6_UART_Init>
	MX_RTC_Init();
 8002728:	f000 f906 	bl	8002938 <MX_RTC_Init>
	//MX_IWDG_Init(); TODO ADDED IN MRT_Init()
	MX_FATFS_Init();
 800272c:	f00c fa4a 	bl	800ebc4 <MX_FATFS_Init>
}
 8002730:	bf00      	nop
 8002732:	bd80      	pop	{r7, pc}

08002734 <MRT_waitForLaunch>:

void MRT_waitForLaunch(void){
 8002734:	b5b0      	push	{r4, r5, r7, lr}
 8002736:	b0c6      	sub	sp, #280	; 0x118
 8002738:	af04      	add	r7, sp, #16

	println("Waiting for launch command from ground station\r\n");
 800273a:	485f      	ldr	r0, [pc, #380]	; (80028b8 <MRT_waitForLaunch+0x184>)
 800273c:	f7fe fc76 	bl	800102c <println>

	//TODO for testing (saved in wd thread)
	hlps22hh.getPressure();
 8002740:	4b5e      	ldr	r3, [pc, #376]	; (80028bc <MRT_waitForLaunch+0x188>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	4798      	blx	r3
	rtc_bckp_reg_alt_pad = MRT_getAltitude(hlps22hh.pressure_hPa);
 8002746:	4b5d      	ldr	r3, [pc, #372]	; (80028bc <MRT_waitForLaunch+0x188>)
 8002748:	edd3 7a00 	vldr	s15, [r3]
 800274c:	eeb0 0a67 	vmov.f32	s0, s15
 8002750:	f001 f856 	bl	8003800 <MRT_getAltitude>
 8002754:	eef0 7a40 	vmov.f32	s15, s0
 8002758:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800275c:	ee17 2a90 	vmov	r2, s15
 8002760:	4b57      	ldr	r3, [pc, #348]	; (80028c0 <MRT_waitForLaunch+0x18c>)
 8002762:	601a      	str	r2, [r3, #0]
	MRT_RTC_setBackupReg(FC_STATE_ALT_PAD, rtc_bckp_reg_alt_pad);
 8002764:	4b56      	ldr	r3, [pc, #344]	; (80028c0 <MRT_waitForLaunch+0x18c>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4619      	mov	r1, r3
 800276a:	2009      	movs	r0, #9
 800276c:	f000 fbb0 	bl	8002ed0 <MRT_RTC_setBackupReg>

	char radio_buffer[RADIO_BUFFER_SIZE];
	radio_command cmd = -1;
 8002770:	23ff      	movs	r3, #255	; 0xff
 8002772:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

	//Poll propulsion until launch command sent
	while((XTEND_ || SRADIO_) && ejection_stage_flag == PAD && wu_flag == 0){
 8002776:	e05a      	b.n	800282e <MRT_waitForLaunch+0xfa>
		HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, SET);
 8002778:	2201      	movs	r2, #1
 800277a:	2108      	movs	r1, #8
 800277c:	4851      	ldr	r0, [pc, #324]	; (80028c4 <MRT_waitForLaunch+0x190>)
 800277e:	f007 fa75 	bl	8009c6c <HAL_GPIO_WritePin>

		HAL_IWDG_Refresh(&hiwdg);

		//Save the RTC time
	    MRT_saveTotalTime();
 8002782:	f001 fa9b 	bl	8003cbc <MRT_saveTotalTime>

		//Poll propulsion sensors
		MRT_pollPropulsion();
 8002786:	f002 fafb 	bl	8004d80 <MRT_pollPropulsion>

		//Send propulsion data
		memset(radio_buffer, 0, RADIO_BUFFER_SIZE);
 800278a:	1d3b      	adds	r3, r7, #4
 800278c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002790:	2100      	movs	r1, #0
 8002792:	4618      	mov	r0, r3
 8002794:	f010 fbfa 	bl	8012f8c <memset>
		sprintf(radio_buffer,"P,%.2f,%.2f, %i,E",transducer_voltage,thermocouple_temperature,(int) valve_status);
 8002798:	4b4b      	ldr	r3, [pc, #300]	; (80028c8 <MRT_waitForLaunch+0x194>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f7fd fef3 	bl	8000588 <__aeabi_f2d>
 80027a2:	4604      	mov	r4, r0
 80027a4:	460d      	mov	r5, r1
 80027a6:	4b49      	ldr	r3, [pc, #292]	; (80028cc <MRT_waitForLaunch+0x198>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7fd feec 	bl	8000588 <__aeabi_f2d>
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	4946      	ldr	r1, [pc, #280]	; (80028d0 <MRT_waitForLaunch+0x19c>)
 80027b6:	7809      	ldrb	r1, [r1, #0]
 80027b8:	1d38      	adds	r0, r7, #4
 80027ba:	9102      	str	r1, [sp, #8]
 80027bc:	e9cd 2300 	strd	r2, r3, [sp]
 80027c0:	4622      	mov	r2, r4
 80027c2:	462b      	mov	r3, r5
 80027c4:	4943      	ldr	r1, [pc, #268]	; (80028d4 <MRT_waitForLaunch+0x1a0>)
 80027c6:	f011 fc5f 	bl	8014088 <siprintf>
		//MRT_radio_tx(radio_buffer);



		//Check for launch command
		memset(radio_buffer, 0, RADIO_BUFFER_SIZE);
 80027ca:	1d3b      	adds	r3, r7, #4
 80027cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027d0:	2100      	movs	r1, #0
 80027d2:	4618      	mov	r0, r3
 80027d4:	f010 fbda 	bl	8012f8c <memset>
		MRT_radio_rx(radio_buffer, 6, 0x500); //Timeout is about 1.2 sec (should be less than 5 sec)
 80027d8:	1d3b      	adds	r3, r7, #4
 80027da:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80027de:	2106      	movs	r1, #6
 80027e0:	4618      	mov	r0, r3
 80027e2:	f005 f9b7 	bl	8007b54 <MRT_radio_rx>
		cmd = radio_parse_command(radio_buffer);
 80027e6:	1d3b      	adds	r3, r7, #4
 80027e8:	4618      	mov	r0, r3
 80027ea:	f005 fa13 	bl	8007c14 <radio_parse_command>
 80027ee:	4603      	mov	r3, r0
 80027f0:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
		if (cmd == LAUNCH){
 80027f4:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d10b      	bne.n	8002814 <MRT_waitForLaunch+0xe0>
			//Update ejection stage flag and save it
			ejection_stage_flag = BOOST;
 80027fc:	4b36      	ldr	r3, [pc, #216]	; (80028d8 <MRT_waitForLaunch+0x1a4>)
 80027fe:	2201      	movs	r2, #1
 8002800:	701a      	strb	r2, [r3, #0]
			rtc_bckp_reg_ejection_stage = BOOST;
 8002802:	4b36      	ldr	r3, [pc, #216]	; (80028dc <MRT_waitForLaunch+0x1a8>)
 8002804:	2201      	movs	r2, #1
 8002806:	601a      	str	r2, [r3, #0]
			ext_flash_ejection_stage = BOOST;
 8002808:	4b35      	ldr	r3, [pc, #212]	; (80028e0 <MRT_waitForLaunch+0x1ac>)
 800280a:	2201      	movs	r2, #1
 800280c:	701a      	strb	r2, [r3, #0]
			MRT_saveFlagValue(FC_STATE_FLIGHT);
 800280e:	2004      	movs	r0, #4
 8002810:	f001 f9c8 	bl	8003ba4 <MRT_saveFlagValue>
		}
		execute_parsed_command(cmd);
 8002814:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8002818:	4618      	mov	r0, r3
 800281a:	f005 fa67 	bl	8007cec <execute_parsed_command>

		HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 800281e:	2200      	movs	r2, #0
 8002820:	2108      	movs	r1, #8
 8002822:	4828      	ldr	r0, [pc, #160]	; (80028c4 <MRT_waitForLaunch+0x190>)
 8002824:	f007 fa22 	bl	8009c6c <HAL_GPIO_WritePin>


		//Reset IWDG timer
		HAL_IWDG_Refresh(&hiwdg);

		HAL_Delay(1000/PRE_APOGEE_SEND_FREQ);
 8002828:	2014      	movs	r0, #20
 800282a:	f006 fb13 	bl	8008e54 <HAL_Delay>
	while((XTEND_ || SRADIO_) && ejection_stage_flag == PAD && wu_flag == 0){
 800282e:	4b2a      	ldr	r3, [pc, #168]	; (80028d8 <MRT_waitForLaunch+0x1a4>)
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d103      	bne.n	800283e <MRT_waitForLaunch+0x10a>
 8002836:	4b2b      	ldr	r3, [pc, #172]	; (80028e4 <MRT_waitForLaunch+0x1b0>)
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d09c      	beq.n	8002778 <MRT_waitForLaunch+0x44>
	}


	//TODO testing time (saved in watchdog thread
	 //Get RTC time
	 HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800283e:	2200      	movs	r2, #0
 8002840:	4929      	ldr	r1, [pc, #164]	; (80028e8 <MRT_waitForLaunch+0x1b4>)
 8002842:	482a      	ldr	r0, [pc, #168]	; (80028ec <MRT_waitForLaunch+0x1b8>)
 8002844:	f009 faf2 	bl	800be2c <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002848:	2200      	movs	r2, #0
 800284a:	4929      	ldr	r1, [pc, #164]	; (80028f0 <MRT_waitForLaunch+0x1bc>)
 800284c:	4827      	ldr	r0, [pc, #156]	; (80028ec <MRT_waitForLaunch+0x1b8>)
 800284e:	f009 fbf2 	bl	800c036 <HAL_RTC_GetDate>
	 prev_min = sTime.Minutes;
 8002852:	4b25      	ldr	r3, [pc, #148]	; (80028e8 <MRT_waitForLaunch+0x1b4>)
 8002854:	785a      	ldrb	r2, [r3, #1]
 8002856:	4b27      	ldr	r3, [pc, #156]	; (80028f4 <MRT_waitForLaunch+0x1c0>)
 8002858:	701a      	strb	r2, [r3, #0]
	 prev_sec = sTime.Seconds;
 800285a:	4b23      	ldr	r3, [pc, #140]	; (80028e8 <MRT_waitForLaunch+0x1b4>)
 800285c:	789a      	ldrb	r2, [r3, #2]
 800285e:	4b26      	ldr	r3, [pc, #152]	; (80028f8 <MRT_waitForLaunch+0x1c4>)
 8002860:	701a      	strb	r2, [r3, #0]
	 if (__HAL_RTC_SHIFT_GET_FLAG(&hrtc, RTC_FLAG_SHPF)) prev_sec++; //Adjust following the user manual
 8002862:	4b22      	ldr	r3, [pc, #136]	; (80028ec <MRT_waitForLaunch+0x1b8>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	f003 0308 	and.w	r3, r3, #8
 800286c:	2b00      	cmp	r3, #0
 800286e:	d005      	beq.n	800287c <MRT_waitForLaunch+0x148>
 8002870:	4b21      	ldr	r3, [pc, #132]	; (80028f8 <MRT_waitForLaunch+0x1c4>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	3301      	adds	r3, #1
 8002876:	b2da      	uxtb	r2, r3
 8002878:	4b1f      	ldr	r3, [pc, #124]	; (80028f8 <MRT_waitForLaunch+0x1c4>)
 800287a:	701a      	strb	r2, [r3, #0]
	 prev_subsec = sTime.SubSeconds;
 800287c:	4b1a      	ldr	r3, [pc, #104]	; (80028e8 <MRT_waitForLaunch+0x1b4>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	4a1e      	ldr	r2, [pc, #120]	; (80028fc <MRT_waitForLaunch+0x1c8>)
 8002882:	6013      	str	r3, [r2, #0]
	 rtc_bckp_reg_pad_time = 100*prev_min + prev_sec;
 8002884:	4b1b      	ldr	r3, [pc, #108]	; (80028f4 <MRT_waitForLaunch+0x1c0>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	461a      	mov	r2, r3
 800288a:	2364      	movs	r3, #100	; 0x64
 800288c:	fb03 f302 	mul.w	r3, r3, r2
 8002890:	4a19      	ldr	r2, [pc, #100]	; (80028f8 <MRT_waitForLaunch+0x1c4>)
 8002892:	7812      	ldrb	r2, [r2, #0]
 8002894:	4413      	add	r3, r2
 8002896:	461a      	mov	r2, r3
 8002898:	4b19      	ldr	r3, [pc, #100]	; (8002900 <MRT_waitForLaunch+0x1cc>)
 800289a:	601a      	str	r2, [r3, #0]
	 MRT_RTC_setBackupReg(FC_PAD_TIME, rtc_bckp_reg_pad_time);
 800289c:	4b18      	ldr	r3, [pc, #96]	; (8002900 <MRT_waitForLaunch+0x1cc>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4619      	mov	r1, r3
 80028a2:	200a      	movs	r0, #10
 80028a4:	f000 fb14 	bl	8002ed0 <MRT_RTC_setBackupReg>


	//Send acknowledgement
	MRT_radio_tx((char*) "LAUNCH COMMAND RECEIVED"); //TODO CHECK AT WHAT JASPER DID
 80028a8:	4816      	ldr	r0, [pc, #88]	; (8002904 <MRT_waitForLaunch+0x1d0>)
 80028aa:	f005 f92b 	bl	8007b04 <MRT_radio_tx>
}
 80028ae:	bf00      	nop
 80028b0:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bdb0      	pop	{r4, r5, r7, pc}
 80028b8:	080183ac 	.word	0x080183ac
 80028bc:	200003d0 	.word	0x200003d0
 80028c0:	2000034c 	.word	0x2000034c
 80028c4:	40020800 	.word	0x40020800
 80028c8:	20005fc4 	.word	0x20005fc4
 80028cc:	20005fc0 	.word	0x20005fc0
 80028d0:	20005fbe 	.word	0x20005fbe
 80028d4:	080183e0 	.word	0x080183e0
 80028d8:	2000038c 	.word	0x2000038c
 80028dc:	20000338 	.word	0x20000338
 80028e0:	2000037a 	.word	0x2000037a
 80028e4:	20000389 	.word	0x20000389
 80028e8:	200002e8 	.word	0x200002e8
 80028ec:	20005c00 	.word	0x20005c00
 80028f0:	200002fc 	.word	0x200002fc
 80028f4:	2000038e 	.word	0x2000038e
 80028f8:	2000038f 	.word	0x2000038f
 80028fc:	20000390 	.word	0x20000390
 8002900:	20000350 	.word	0x20000350
 8002904:	080183f4 	.word	0x080183f4

08002908 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a04      	ldr	r2, [pc, #16]	; (8002928 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d101      	bne.n	800291e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800291a:	f006 fa7b 	bl	8008e14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800291e:	bf00      	nop
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	40001000 	.word	0x40001000

0800292c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002930:	b672      	cpsid	i
}
 8002932:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002934:	e7fe      	b.n	8002934 <Error_Handler+0x8>
	...

08002938 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b090      	sub	sp, #64	; 0x40
 800293c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800293e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002942:	2200      	movs	r2, #0
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	605a      	str	r2, [r3, #4]
 8002948:	609a      	str	r2, [r3, #8]
 800294a:	60da      	str	r2, [r3, #12]
 800294c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800294e:	2300      	movs	r3, #0
 8002950:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8002952:	463b      	mov	r3, r7
 8002954:	2228      	movs	r2, #40	; 0x28
 8002956:	2100      	movs	r1, #0
 8002958:	4618      	mov	r0, r3
 800295a:	f010 fb17 	bl	8012f8c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800295e:	4b3a      	ldr	r3, [pc, #232]	; (8002a48 <MX_RTC_Init+0x110>)
 8002960:	4a3a      	ldr	r2, [pc, #232]	; (8002a4c <MX_RTC_Init+0x114>)
 8002962:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002964:	4b38      	ldr	r3, [pc, #224]	; (8002a48 <MX_RTC_Init+0x110>)
 8002966:	2200      	movs	r2, #0
 8002968:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800296a:	4b37      	ldr	r3, [pc, #220]	; (8002a48 <MX_RTC_Init+0x110>)
 800296c:	227f      	movs	r2, #127	; 0x7f
 800296e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002970:	4b35      	ldr	r3, [pc, #212]	; (8002a48 <MX_RTC_Init+0x110>)
 8002972:	22ff      	movs	r2, #255	; 0xff
 8002974:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002976:	4b34      	ldr	r3, [pc, #208]	; (8002a48 <MX_RTC_Init+0x110>)
 8002978:	2200      	movs	r2, #0
 800297a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800297c:	4b32      	ldr	r3, [pc, #200]	; (8002a48 <MX_RTC_Init+0x110>)
 800297e:	2200      	movs	r2, #0
 8002980:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002982:	4b31      	ldr	r3, [pc, #196]	; (8002a48 <MX_RTC_Init+0x110>)
 8002984:	2200      	movs	r2, #0
 8002986:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002988:	482f      	ldr	r0, [pc, #188]	; (8002a48 <MX_RTC_Init+0x110>)
 800298a:	f009 f901 	bl	800bb90 <HAL_RTC_Init>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8002994:	f7ff ffca 	bl	800292c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002998:	2300      	movs	r3, #0
 800299a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 800299e:	2300      	movs	r3, #0
 80029a0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 80029a4:	2300      	movs	r3, #0
 80029a6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80029aa:	2300      	movs	r3, #0
 80029ac:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80029ae:	2300      	movs	r3, #0
 80029b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80029b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029b6:	2201      	movs	r2, #1
 80029b8:	4619      	mov	r1, r3
 80029ba:	4823      	ldr	r0, [pc, #140]	; (8002a48 <MX_RTC_Init+0x110>)
 80029bc:	f009 f979 	bl	800bcb2 <HAL_RTC_SetTime>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80029c6:	f7ff ffb1 	bl	800292c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80029ca:	2301      	movs	r3, #1
 80029cc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80029d0:	2301      	movs	r3, #1
 80029d2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 80029d6:	2301      	movs	r3, #1
 80029d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 80029dc:	2300      	movs	r3, #0
 80029de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80029e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029e6:	2201      	movs	r2, #1
 80029e8:	4619      	mov	r1, r3
 80029ea:	4817      	ldr	r0, [pc, #92]	; (8002a48 <MX_RTC_Init+0x110>)
 80029ec:	f009 fa7c 	bl	800bee8 <HAL_RTC_SetDate>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80029f6:	f7ff ff99 	bl	800292c <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80029fa:	2300      	movs	r3, #0
 80029fc:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 80029fe:	2301      	movs	r3, #1
 8002a00:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002a02:	2300      	movs	r3, #0
 8002a04:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002a06:	2300      	movs	r3, #0
 8002a08:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002a12:	2300      	movs	r3, #0
 8002a14:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002a16:	2300      	movs	r3, #0
 8002a18:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002a24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a28:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002a2a:	463b      	mov	r3, r7
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4805      	ldr	r0, [pc, #20]	; (8002a48 <MX_RTC_Init+0x110>)
 8002a32:	f009 fb4f 	bl	800c0d4 <HAL_RTC_SetAlarm_IT>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8002a3c:	f7ff ff76 	bl	800292c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002a40:	bf00      	nop
 8002a42:	3740      	adds	r7, #64	; 0x40
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	20005c00 	.word	0x20005c00
 8002a4c:	40002800 	.word	0x40002800

08002a50 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b08e      	sub	sp, #56	; 0x38
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a58:	f107 0308 	add.w	r3, r7, #8
 8002a5c:	2230      	movs	r2, #48	; 0x30
 8002a5e:	2100      	movs	r1, #0
 8002a60:	4618      	mov	r0, r3
 8002a62:	f010 fa93 	bl	8012f8c <memset>
  if(rtcHandle->Instance==RTC)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a10      	ldr	r2, [pc, #64]	; (8002aac <HAL_RTC_MspInit+0x5c>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d119      	bne.n	8002aa4 <HAL_RTC_MspInit+0x54>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002a70:	2320      	movs	r3, #32
 8002a72:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002a74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a78:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a7a:	f107 0308 	add.w	r3, r7, #8
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f008 fec8 	bl	800b814 <HAL_RCCEx_PeriphCLKConfig>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002a8a:	f7ff ff4f 	bl	800292c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002a8e:	4b08      	ldr	r3, [pc, #32]	; (8002ab0 <HAL_RTC_MspInit+0x60>)
 8002a90:	2201      	movs	r2, #1
 8002a92:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8002a94:	2200      	movs	r2, #0
 8002a96:	2105      	movs	r1, #5
 8002a98:	2029      	movs	r0, #41	; 0x29
 8002a9a:	f006 feeb 	bl	8009874 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002a9e:	2029      	movs	r0, #41	; 0x29
 8002aa0:	f006 ff04 	bl	80098ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002aa4:	bf00      	nop
 8002aa6:	3738      	adds	r7, #56	; 0x38
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40002800 	.word	0x40002800
 8002ab0:	42470e3c 	.word	0x42470e3c

08002ab4 <MRT_rtc_Init>:


//**************************************************//
//FUNCTIONS

void MRT_rtc_Init(void){
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
	println("\r\nMRT RTC Init");
 8002ab8:	4816      	ldr	r0, [pc, #88]	; (8002b14 <MRT_rtc_Init+0x60>)
 8002aba:	f7fe fab7 	bl	800102c <println>

	print("\tSetting RTC to previous time...");
 8002abe:	4816      	ldr	r0, [pc, #88]	; (8002b18 <MRT_rtc_Init+0x64>)
 8002ac0:	f7fe fad2 	bl	8001068 <print>
	MRT_set_rtc(prev_hour,prev_min,prev_sec);
 8002ac4:	4b15      	ldr	r3, [pc, #84]	; (8002b1c <MRT_rtc_Init+0x68>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	4a15      	ldr	r2, [pc, #84]	; (8002b20 <MRT_rtc_Init+0x6c>)
 8002aca:	7811      	ldrb	r1, [r2, #0]
 8002acc:	4a15      	ldr	r2, [pc, #84]	; (8002b24 <MRT_rtc_Init+0x70>)
 8002ace:	7812      	ldrb	r2, [r2, #0]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f000 f8c3 	bl	8002c5c <MRT_set_rtc>
	println("OK");
 8002ad6:	4814      	ldr	r0, [pc, #80]	; (8002b28 <MRT_rtc_Init+0x74>)
 8002ad8:	f7fe faa8 	bl	800102c <println>

	#if ALARM_A_ACTIVE
		print("\tSetting alarmA...");
 8002adc:	4813      	ldr	r0, [pc, #76]	; (8002b2c <MRT_rtc_Init+0x78>)
 8002ade:	f7fe fac3 	bl	8001068 <print>
		HAL_Delay(2000); //To make sure that when you set the Alarm it doesn't go off automatically
 8002ae2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002ae6:	f006 f9b5 	bl	8008e54 <HAL_Delay>
		if (wu_flag == 0){
 8002aea:	4b11      	ldr	r3, [pc, #68]	; (8002b30 <MRT_rtc_Init+0x7c>)
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d105      	bne.n	8002afe <MRT_rtc_Init+0x4a>
			MRT_set_alarmA(PRE_WHEN_SLEEP_TIME_HOURS, PRE_WHEN_SLEEP_TIME_MIN, PRE_WHEN_SLEEP_TIME_SEC);
 8002af2:	2200      	movs	r2, #0
 8002af4:	211e      	movs	r1, #30
 8002af6:	2004      	movs	r0, #4
 8002af8:	f000 f8f6 	bl	8002ce8 <MRT_set_alarmA>
 8002afc:	e004      	b.n	8002b08 <MRT_rtc_Init+0x54>
		}
		else{
			MRT_set_alarmA(POST_WHEN_SLEEP_TIME_HOURS, POST_WHEN_SLEEP_TIME_MIN, POST_WHEN_SLEEP_TIME_SEC);
 8002afe:	2200      	movs	r2, #0
 8002b00:	2100      	movs	r1, #0
 8002b02:	200e      	movs	r0, #14
 8002b04:	f000 f8f0 	bl	8002ce8 <MRT_set_alarmA>
		}
		println("OK");
 8002b08:	4807      	ldr	r0, [pc, #28]	; (8002b28 <MRT_rtc_Init+0x74>)
 8002b0a:	f7fe fa8f 	bl	800102c <println>
	#endif
}
 8002b0e:	bf00      	nop
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	0801840c 	.word	0x0801840c
 8002b18:	0801841c 	.word	0x0801841c
 8002b1c:	2000038d 	.word	0x2000038d
 8002b20:	2000038e 	.word	0x2000038e
 8002b24:	2000038f 	.word	0x2000038f
 8002b28:	08018440 	.word	0x08018440
 8002b2c:	08018444 	.word	0x08018444
 8002b30:	20000389 	.word	0x20000389

08002b34 <MRT_clear_alarms_flags>:



void MRT_clear_alarms_flags(void){
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
	//Must be after alarm A was activated and before going to sleep

	print("Clearing the flags\r\n");
 8002b38:	482a      	ldr	r0, [pc, #168]	; (8002be4 <MRT_clear_alarms_flags+0xb0>)
 8002b3a:	f7fe fa95 	bl	8001068 <print>

	//Clear alarmA flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8002b3e:	4b2a      	ldr	r3, [pc, #168]	; (8002be8 <MRT_clear_alarms_flags+0xb4>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	22ca      	movs	r2, #202	; 0xca
 8002b44:	625a      	str	r2, [r3, #36]	; 0x24
 8002b46:	4b28      	ldr	r3, [pc, #160]	; (8002be8 <MRT_clear_alarms_flags+0xb4>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2253      	movs	r2, #83	; 0x53
 8002b4c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 8002b4e:	e008      	b.n	8002b62 <MRT_clear_alarms_flags+0x2e>
		//print("Clearing alarm A flag\r\n");
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002b50:	4b25      	ldr	r3, [pc, #148]	; (8002be8 <MRT_clear_alarms_flags+0xb4>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	b2da      	uxtb	r2, r3
 8002b58:	4b23      	ldr	r3, [pc, #140]	; (8002be8 <MRT_clear_alarms_flags+0xb4>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002b60:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 8002b62:	4b21      	ldr	r3, [pc, #132]	; (8002be8 <MRT_clear_alarms_flags+0xb4>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1ef      	bne.n	8002b50 <MRT_clear_alarms_flags+0x1c>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8002b70:	4b1d      	ldr	r3, [pc, #116]	; (8002be8 <MRT_clear_alarms_flags+0xb4>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	22ff      	movs	r2, #255	; 0xff
 8002b76:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002b78:	4b1c      	ldr	r3, [pc, #112]	; (8002bec <MRT_clear_alarms_flags+0xb8>)
 8002b7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b7e:	615a      	str	r2, [r3, #20]


  	//Clear alarmB flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8002b80:	4b19      	ldr	r3, [pc, #100]	; (8002be8 <MRT_clear_alarms_flags+0xb4>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	22ca      	movs	r2, #202	; 0xca
 8002b86:	625a      	str	r2, [r3, #36]	; 0x24
 8002b88:	4b17      	ldr	r3, [pc, #92]	; (8002be8 <MRT_clear_alarms_flags+0xb4>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2253      	movs	r2, #83	; 0x53
 8002b8e:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 8002b90:	e008      	b.n	8002ba4 <MRT_clear_alarms_flags+0x70>
		//print("Clearing alarm B flag\r\n");
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRBF);
 8002b92:	4b15      	ldr	r3, [pc, #84]	; (8002be8 <MRT_clear_alarms_flags+0xb4>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	4b13      	ldr	r3, [pc, #76]	; (8002be8 <MRT_clear_alarms_flags+0xb4>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002ba2:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 8002ba4:	4b10      	ldr	r3, [pc, #64]	; (8002be8 <MRT_clear_alarms_flags+0xb4>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1ef      	bne.n	8002b92 <MRT_clear_alarms_flags+0x5e>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8002bb2:	4b0d      	ldr	r3, [pc, #52]	; (8002be8 <MRT_clear_alarms_flags+0xb4>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	22ff      	movs	r2, #255	; 0xff
 8002bb8:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002bba:	4b0c      	ldr	r3, [pc, #48]	; (8002bec <MRT_clear_alarms_flags+0xb8>)
 8002bbc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bc0:	615a      	str	r2, [r3, #20]

	/* Clear the WU FLAG */
	//print("Clearing wake up flag\r\n");
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8002bc2:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <MRT_clear_alarms_flags+0xbc>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a0a      	ldr	r2, [pc, #40]	; (8002bf0 <MRT_clear_alarms_flags+0xbc>)
 8002bc8:	f043 0304 	orr.w	r3, r3, #4
 8002bcc:	6013      	str	r3, [r2, #0]

	/* clear the RTC Wake UP (WU) flag */
	//print("Clearing RTC wake up flag\r\n");
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8002bce:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <MRT_clear_alarms_flags+0xb4>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	b2da      	uxtb	r2, r3
 8002bd6:	4b04      	ldr	r3, [pc, #16]	; (8002be8 <MRT_clear_alarms_flags+0xb4>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002bde:	60da      	str	r2, [r3, #12]
}
 8002be0:	bf00      	nop
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	08018458 	.word	0x08018458
 8002be8:	20005c00 	.word	0x20005c00
 8002bec:	40013c00 	.word	0x40013c00
 8002bf0:	40007000 	.word	0x40007000

08002bf4 <MRT_StandByMode>:

/*
 * This function is called to enter standby mode
 * @param seconds: time before it wakes up (max of 36 hours)
 */
void MRT_StandByMode(uint32_t seconds){
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b08c      	sub	sp, #48	; 0x30
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
	print("\r\n/*****StandByMode*****/\r\n");
 8002bfc:	4813      	ldr	r0, [pc, #76]	; (8002c4c <MRT_StandByMode+0x58>)
 8002bfe:	f7fe fa33 	bl	8001068 <print>

	/* Enable the WAKEUP PIN
	 * (Needs to be placed BEFORE clearing up the flags or else it wakes up as soon as we enter standby mode)*/
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8002c02:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002c06:	f008 f8d3 	bl	800adb0 <HAL_PWR_EnableWakeUpPin>

	/*Clear the flags so it doesn't wake up as soon as it goes to sleep*/
	MRT_clear_alarms_flags();
 8002c0a:	f7ff ff93 	bl	8002b34 <MRT_clear_alarms_flags>

	//Setup RTC wake up timer
	println("Setting up RTCW");
 8002c0e:	4810      	ldr	r0, [pc, #64]	; (8002c50 <MRT_StandByMode+0x5c>)
 8002c10:	f7fe fa0c 	bl	800102c <println>
	  Error_Handler();
	}
	*/

	char msg[30+sizeof(uint32_t)];
	sprintf(msg,"Going to sleep for %i seconds",(int) seconds);
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	f107 030c 	add.w	r3, r7, #12
 8002c1a:	490e      	ldr	r1, [pc, #56]	; (8002c54 <MRT_StandByMode+0x60>)
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f011 fa33 	bl	8014088 <siprintf>
	println(msg);
 8002c22:	f107 030c 	add.w	r3, r7, #12
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7fe fa00 	bl	800102c <println>

	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc,seconds, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8002c2c:	2204      	movs	r2, #4
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	4809      	ldr	r0, [pc, #36]	; (8002c58 <MRT_StandByMode+0x64>)
 8002c32:	f009 fc67 	bl	800c504 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <MRT_StandByMode+0x4c>
	{
	  Error_Handler();
 8002c3c:	f7ff fe76 	bl	800292c <Error_Handler>
	}

	HAL_PWR_EnterSTANDBYMode();
 8002c40:	f008 f8dc 	bl	800adfc <HAL_PWR_EnterSTANDBYMode>
}
 8002c44:	bf00      	nop
 8002c46:	3730      	adds	r7, #48	; 0x30
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	08018470 	.word	0x08018470
 8002c50:	0801848c 	.word	0x0801848c
 8002c54:	0801849c 	.word	0x0801849c
 8002c58:	20005c00 	.word	0x20005c00

08002c5c <MRT_set_rtc>:




void MRT_set_rtc(uint8_t h, uint8_t m, uint8_t s){
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b088      	sub	sp, #32
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	4603      	mov	r3, r0
 8002c64:	71fb      	strb	r3, [r7, #7]
 8002c66:	460b      	mov	r3, r1
 8002c68:	71bb      	strb	r3, [r7, #6]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	717b      	strb	r3, [r7, #5]
	  /** Initialize RTC and set the Time and Date
	  */
	  RTC_TimeTypeDef sTime;

	  sTime.Hours = int_to_hex_table[h];
 8002c6e:	79fb      	ldrb	r3, [r7, #7]
 8002c70:	4a1a      	ldr	r2, [pc, #104]	; (8002cdc <MRT_set_rtc+0x80>)
 8002c72:	5cd3      	ldrb	r3, [r2, r3]
 8002c74:	733b      	strb	r3, [r7, #12]
	  sTime.Minutes = int_to_hex_table[m];
 8002c76:	79bb      	ldrb	r3, [r7, #6]
 8002c78:	4a18      	ldr	r2, [pc, #96]	; (8002cdc <MRT_set_rtc+0x80>)
 8002c7a:	5cd3      	ldrb	r3, [r2, r3]
 8002c7c:	737b      	strb	r3, [r7, #13]
	  sTime.Seconds = int_to_hex_table[s];
 8002c7e:	797b      	ldrb	r3, [r7, #5]
 8002c80:	4a16      	ldr	r2, [pc, #88]	; (8002cdc <MRT_set_rtc+0x80>)
 8002c82:	5cd3      	ldrb	r3, [r2, r3]
 8002c84:	73bb      	strb	r3, [r7, #14]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002c86:	2300      	movs	r3, #0
 8002c88:	61bb      	str	r3, [r7, #24]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	61fb      	str	r3, [r7, #28]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002c8e:	f107 030c 	add.w	r3, r7, #12
 8002c92:	2201      	movs	r2, #1
 8002c94:	4619      	mov	r1, r3
 8002c96:	4812      	ldr	r0, [pc, #72]	; (8002ce0 <MRT_set_rtc+0x84>)
 8002c98:	f009 f80b 	bl	800bcb2 <HAL_RTC_SetTime>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <MRT_set_rtc+0x4a>
	  {
	    Error_Handler();
 8002ca2:	f7ff fe43 	bl	800292c <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002ca6:	4b0f      	ldr	r3, [pc, #60]	; (8002ce4 <MRT_set_rtc+0x88>)
 8002ca8:	2201      	movs	r2, #1
 8002caa:	701a      	strb	r2, [r3, #0]
	  sDate.Month = RTC_MONTH_JANUARY;
 8002cac:	4b0d      	ldr	r3, [pc, #52]	; (8002ce4 <MRT_set_rtc+0x88>)
 8002cae:	2201      	movs	r2, #1
 8002cb0:	705a      	strb	r2, [r3, #1]
	  sDate.Date = 0x1;
 8002cb2:	4b0c      	ldr	r3, [pc, #48]	; (8002ce4 <MRT_set_rtc+0x88>)
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	709a      	strb	r2, [r3, #2]
	  sDate.Year = 0x0;
 8002cb8:	4b0a      	ldr	r3, [pc, #40]	; (8002ce4 <MRT_set_rtc+0x88>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	70da      	strb	r2, [r3, #3]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	4908      	ldr	r1, [pc, #32]	; (8002ce4 <MRT_set_rtc+0x88>)
 8002cc2:	4807      	ldr	r0, [pc, #28]	; (8002ce0 <MRT_set_rtc+0x84>)
 8002cc4:	f009 f910 	bl	800bee8 <HAL_RTC_SetDate>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <MRT_set_rtc+0x76>
	  {
	    Error_Handler();
 8002cce:	f7ff fe2d 	bl	800292c <Error_Handler>
	  }
}
 8002cd2:	bf00      	nop
 8002cd4:	3720      	adds	r7, #32
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	2000004c 	.word	0x2000004c
 8002ce0:	20005c00 	.word	0x20005c00
 8002ce4:	200002fc 	.word	0x200002fc

08002ce8 <MRT_set_alarmA>:



void MRT_set_alarmA(uint8_t h, uint8_t m, uint8_t s){
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	4603      	mov	r3, r0
 8002cf0:	71fb      	strb	r3, [r7, #7]
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	71bb      	strb	r3, [r7, #6]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	717b      	strb	r3, [r7, #5]
	  /** Enable the Alarm A
	  */
	  sAlarm.AlarmTime.Hours = int_to_hex_table[h];
 8002cfa:	79fb      	ldrb	r3, [r7, #7]
 8002cfc:	4a1a      	ldr	r2, [pc, #104]	; (8002d68 <MRT_set_alarmA+0x80>)
 8002cfe:	5cd2      	ldrb	r2, [r2, r3]
 8002d00:	4b1a      	ldr	r3, [pc, #104]	; (8002d6c <MRT_set_alarmA+0x84>)
 8002d02:	701a      	strb	r2, [r3, #0]
	  sAlarm.AlarmTime.Minutes = int_to_hex_table[m];
 8002d04:	79bb      	ldrb	r3, [r7, #6]
 8002d06:	4a18      	ldr	r2, [pc, #96]	; (8002d68 <MRT_set_alarmA+0x80>)
 8002d08:	5cd2      	ldrb	r2, [r2, r3]
 8002d0a:	4b18      	ldr	r3, [pc, #96]	; (8002d6c <MRT_set_alarmA+0x84>)
 8002d0c:	705a      	strb	r2, [r3, #1]
	  sAlarm.AlarmTime.Seconds = int_to_hex_table[s];
 8002d0e:	797b      	ldrb	r3, [r7, #5]
 8002d10:	4a15      	ldr	r2, [pc, #84]	; (8002d68 <MRT_set_alarmA+0x80>)
 8002d12:	5cd2      	ldrb	r2, [r2, r3]
 8002d14:	4b15      	ldr	r3, [pc, #84]	; (8002d6c <MRT_set_alarmA+0x84>)
 8002d16:	709a      	strb	r2, [r3, #2]
	  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002d18:	4b14      	ldr	r3, [pc, #80]	; (8002d6c <MRT_set_alarmA+0x84>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	605a      	str	r2, [r3, #4]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002d1e:	4b13      	ldr	r3, [pc, #76]	; (8002d6c <MRT_set_alarmA+0x84>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	60da      	str	r2, [r3, #12]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002d24:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <MRT_set_alarmA+0x84>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	611a      	str	r2, [r3, #16]
	  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002d2a:	4b10      	ldr	r3, [pc, #64]	; (8002d6c <MRT_set_alarmA+0x84>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	615a      	str	r2, [r3, #20]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002d30:	4b0e      	ldr	r3, [pc, #56]	; (8002d6c <MRT_set_alarmA+0x84>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	619a      	str	r2, [r3, #24]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002d36:	4b0d      	ldr	r3, [pc, #52]	; (8002d6c <MRT_set_alarmA+0x84>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	61da      	str	r2, [r3, #28]
	  sAlarm.AlarmDateWeekDay = 0x1;
 8002d3c:	4b0b      	ldr	r3, [pc, #44]	; (8002d6c <MRT_set_alarmA+0x84>)
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2020 	strb.w	r2, [r3, #32]
	  sAlarm.Alarm = RTC_ALARM_A;
 8002d44:	4b09      	ldr	r3, [pc, #36]	; (8002d6c <MRT_set_alarmA+0x84>)
 8002d46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d4a:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	4907      	ldr	r1, [pc, #28]	; (8002d6c <MRT_set_alarmA+0x84>)
 8002d50:	4807      	ldr	r0, [pc, #28]	; (8002d70 <MRT_set_alarmA+0x88>)
 8002d52:	f009 f9bf 	bl	800c0d4 <HAL_RTC_SetAlarm_IT>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <MRT_set_alarmA+0x78>
	  {
	    Error_Handler();
 8002d5c:	f7ff fde6 	bl	800292c <Error_Handler>
	  }
}
 8002d60:	bf00      	nop
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	2000004c 	.word	0x2000004c
 8002d6c:	20000300 	.word	0x20000300
 8002d70:	20005c00 	.word	0x20005c00

08002d74 <MRT_RTC_backup_regs_Init>:
							  &rtc_bckp_reg_alt_apogee, &rtc_bckp_reg_apogee_time, &rtc_bckp_reg_alt_main, &rtc_bckp_reg_main_time,
							  &rtc_bckp_reg_alt_landed, &rtc_bckp_reg_landed_time};


//Get all the backup regs values (initialization)
void MRT_RTC_backup_regs_Init(void){
 8002d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d76:	b0cf      	sub	sp, #316	; 0x13c
 8002d78:	af08      	add	r7, sp, #32
	for (int i = 0; i < NB_RTC_BCKP_REGS; i++){
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002d80:	e011      	b.n	8002da6 <MRT_RTC_backup_regs_Init+0x32>
		*rtc_bckp_regs[i] = MRT_RTC_getBackupReg(i);
 8002d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d86:	b2da      	uxtb	r2, r3
 8002d88:	4924      	ldr	r1, [pc, #144]	; (8002e1c <MRT_RTC_backup_regs_Init+0xa8>)
 8002d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d8e:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8002d92:	4610      	mov	r0, r2
 8002d94:	f000 f87e 	bl	8002e94 <MRT_RTC_getBackupReg>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < NB_RTC_BCKP_REGS; i++){
 8002d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002da0:	3301      	adds	r3, #1
 8002da2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002daa:	2b12      	cmp	r3, #18
 8002dac:	dde9      	ble.n	8002d82 <MRT_RTC_backup_regs_Init+0xe>
	}

	//TODO TESTING
	char buffer[256];
	sprintf(buffer, "ALTITUDES:\r\n\tGround: %i \tTime: %i"
 8002dae:	4b1c      	ldr	r3, [pc, #112]	; (8002e20 <MRT_RTC_backup_regs_Init+0xac>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	4b1b      	ldr	r3, [pc, #108]	; (8002e24 <MRT_RTC_backup_regs_Init+0xb0>)
 8002db6:	6819      	ldr	r1, [r3, #0]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	4b1b      	ldr	r3, [pc, #108]	; (8002e28 <MRT_RTC_backup_regs_Init+0xb4>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a1b      	ldr	r2, [pc, #108]	; (8002e2c <MRT_RTC_backup_regs_Init+0xb8>)
 8002dc0:	6812      	ldr	r2, [r2, #0]
 8002dc2:	491b      	ldr	r1, [pc, #108]	; (8002e30 <MRT_RTC_backup_regs_Init+0xbc>)
 8002dc4:	6809      	ldr	r1, [r1, #0]
 8002dc6:	481b      	ldr	r0, [pc, #108]	; (8002e34 <MRT_RTC_backup_regs_Init+0xc0>)
 8002dc8:	6800      	ldr	r0, [r0, #0]
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	4c1a      	ldr	r4, [pc, #104]	; (8002e38 <MRT_RTC_backup_regs_Init+0xc4>)
 8002dce:	6824      	ldr	r4, [r4, #0]
 8002dd0:	4d1a      	ldr	r5, [pc, #104]	; (8002e3c <MRT_RTC_backup_regs_Init+0xc8>)
 8002dd2:	682d      	ldr	r5, [r5, #0]
 8002dd4:	4e1a      	ldr	r6, [pc, #104]	; (8002e40 <MRT_RTC_backup_regs_Init+0xcc>)
 8002dd6:	6836      	ldr	r6, [r6, #0]
 8002dd8:	481a      	ldr	r0, [pc, #104]	; (8002e44 <MRT_RTC_backup_regs_Init+0xd0>)
 8002dda:	6800      	ldr	r0, [r0, #0]
 8002ddc:	f107 0c14 	add.w	ip, r7, #20
 8002de0:	9007      	str	r0, [sp, #28]
 8002de2:	9606      	str	r6, [sp, #24]
 8002de4:	9505      	str	r5, [sp, #20]
 8002de6:	9404      	str	r4, [sp, #16]
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	9003      	str	r0, [sp, #12]
 8002dec:	9102      	str	r1, [sp, #8]
 8002dee:	9201      	str	r2, [sp, #4]
 8002df0:	9300      	str	r3, [sp, #0]
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	4914      	ldr	r1, [pc, #80]	; (8002e48 <MRT_RTC_backup_regs_Init+0xd4>)
 8002df8:	4660      	mov	r0, ip
 8002dfa:	f011 f945 	bl	8014088 <siprintf>
					"\r\n\tMain: %i \tTime: %i"
					"\r\n\tLanded: %i \tTime: %i\r\n",
			rtc_bckp_reg_alt_pad, rtc_bckp_reg_pad_time,  rtc_bckp_reg_alt_true_apogee, rtc_bckp_reg_true_apogee_time,
			rtc_bckp_reg_alt_apogee, rtc_bckp_reg_apogee_time, rtc_bckp_reg_alt_main, rtc_bckp_reg_main_time,
			rtc_bckp_reg_alt_landed, rtc_bckp_reg_landed_time);
	print(buffer);
 8002dfe:	f107 0314 	add.w	r3, r7, #20
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7fe f930 	bl	8001068 <print>

	HAL_Delay(2000);
 8002e08:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002e0c:	f006 f822 	bl	8008e54 <HAL_Delay>
}
 8002e10:	bf00      	nop
 8002e12:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	20000000 	.word	0x20000000
 8002e20:	2000034c 	.word	0x2000034c
 8002e24:	20000350 	.word	0x20000350
 8002e28:	20000354 	.word	0x20000354
 8002e2c:	20000358 	.word	0x20000358
 8002e30:	2000035c 	.word	0x2000035c
 8002e34:	20000360 	.word	0x20000360
 8002e38:	20000364 	.word	0x20000364
 8002e3c:	20000368 	.word	0x20000368
 8002e40:	2000036c 	.word	0x2000036c
 8002e44:	20000370 	.word	0x20000370
 8002e48:	080184bc 	.word	0x080184bc

08002e4c <MRT_RTC_clearBackupRegs>:

// initializes backup register values to zero
void MRT_RTC_clearBackupRegs(void) {
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8002e52:	4b0f      	ldr	r3, [pc, #60]	; (8002e90 <MRT_RTC_clearBackupRegs+0x44>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	22ca      	movs	r2, #202	; 0xca
 8002e58:	625a      	str	r2, [r3, #36]	; 0x24
 8002e5a:	4b0d      	ldr	r3, [pc, #52]	; (8002e90 <MRT_RTC_clearBackupRegs+0x44>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2253      	movs	r2, #83	; 0x53
 8002e60:	625a      	str	r2, [r3, #36]	; 0x24
	for (uint8_t i = 0; i < 20; i++) {
 8002e62:	2300      	movs	r3, #0
 8002e64:	71fb      	strb	r3, [r7, #7]
 8002e66:	e008      	b.n	8002e7a <MRT_RTC_clearBackupRegs+0x2e>
		HAL_RTCEx_BKUPWrite(&hrtc, i, 0);	// set all backup register values to zero
 8002e68:	79fb      	ldrb	r3, [r7, #7]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	4808      	ldr	r0, [pc, #32]	; (8002e90 <MRT_RTC_clearBackupRegs+0x44>)
 8002e70:	f009 fc60 	bl	800c734 <HAL_RTCEx_BKUPWrite>
	for (uint8_t i = 0; i < 20; i++) {
 8002e74:	79fb      	ldrb	r3, [r7, #7]
 8002e76:	3301      	adds	r3, #1
 8002e78:	71fb      	strb	r3, [r7, #7]
 8002e7a:	79fb      	ldrb	r3, [r7, #7]
 8002e7c:	2b13      	cmp	r3, #19
 8002e7e:	d9f3      	bls.n	8002e68 <MRT_RTC_clearBackupRegs+0x1c>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8002e80:	4b03      	ldr	r3, [pc, #12]	; (8002e90 <MRT_RTC_clearBackupRegs+0x44>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	22ff      	movs	r2, #255	; 0xff
 8002e86:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002e88:	bf00      	nop
 8002e8a:	3708      	adds	r7, #8
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	20005c00 	.word	0x20005c00

08002e94 <MRT_RTC_getBackupReg>:

// gets the backup register value for the specified state
uint32_t MRT_RTC_getBackupReg(rtc_backup_reg state) {
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	71fb      	strb	r3, [r7, #7]
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8002e9e:	4b0b      	ldr	r3, [pc, #44]	; (8002ecc <MRT_RTC_getBackupReg+0x38>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	22ca      	movs	r2, #202	; 0xca
 8002ea4:	625a      	str	r2, [r3, #36]	; 0x24
 8002ea6:	4b09      	ldr	r3, [pc, #36]	; (8002ecc <MRT_RTC_getBackupReg+0x38>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2253      	movs	r2, #83	; 0x53
 8002eac:	625a      	str	r2, [r3, #36]	; 0x24
	uint32_t val = HAL_RTCEx_BKUPRead(&hrtc, (uint32_t) state);
 8002eae:	79fb      	ldrb	r3, [r7, #7]
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4806      	ldr	r0, [pc, #24]	; (8002ecc <MRT_RTC_getBackupReg+0x38>)
 8002eb4:	f009 fc58 	bl	800c768 <HAL_RTCEx_BKUPRead>
 8002eb8:	60f8      	str	r0, [r7, #12]
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8002eba:	4b04      	ldr	r3, [pc, #16]	; (8002ecc <MRT_RTC_getBackupReg+0x38>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	22ff      	movs	r2, #255	; 0xff
 8002ec0:	625a      	str	r2, [r3, #36]	; 0x24
	return val;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	20005c00 	.word	0x20005c00

08002ed0 <MRT_RTC_setBackupReg>:

// sets the backup register value for the specified state
void MRT_RTC_setBackupReg(rtc_backup_reg state, uint32_t value) {
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	6039      	str	r1, [r7, #0]
 8002eda:	71fb      	strb	r3, [r7, #7]
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8002edc:	4b0a      	ldr	r3, [pc, #40]	; (8002f08 <MRT_RTC_setBackupReg+0x38>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	22ca      	movs	r2, #202	; 0xca
 8002ee2:	625a      	str	r2, [r3, #36]	; 0x24
 8002ee4:	4b08      	ldr	r3, [pc, #32]	; (8002f08 <MRT_RTC_setBackupReg+0x38>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2253      	movs	r2, #83	; 0x53
 8002eea:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_RTCEx_BKUPWrite(&hrtc, (uint32_t) state, value);
 8002eec:	79fb      	ldrb	r3, [r7, #7]
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4805      	ldr	r0, [pc, #20]	; (8002f08 <MRT_RTC_setBackupReg+0x38>)
 8002ef4:	f009 fc1e 	bl	800c734 <HAL_RTCEx_BKUPWrite>
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8002ef8:	4b03      	ldr	r3, [pc, #12]	; (8002f08 <MRT_RTC_setBackupReg+0x38>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	22ff      	movs	r2, #255	; 0xff
 8002efe:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002f00:	bf00      	nop
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	20005c00 	.word	0x20005c00

08002f0c <MX_SPI2_Init>:
SPI_HandleTypeDef hspi4;
SPI_HandleTypeDef hspi5;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002f10:	4b17      	ldr	r3, [pc, #92]	; (8002f70 <MX_SPI2_Init+0x64>)
 8002f12:	4a18      	ldr	r2, [pc, #96]	; (8002f74 <MX_SPI2_Init+0x68>)
 8002f14:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002f16:	4b16      	ldr	r3, [pc, #88]	; (8002f70 <MX_SPI2_Init+0x64>)
 8002f18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f1c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002f1e:	4b14      	ldr	r3, [pc, #80]	; (8002f70 <MX_SPI2_Init+0x64>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f24:	4b12      	ldr	r3, [pc, #72]	; (8002f70 <MX_SPI2_Init+0x64>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f2a:	4b11      	ldr	r3, [pc, #68]	; (8002f70 <MX_SPI2_Init+0x64>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f30:	4b0f      	ldr	r3, [pc, #60]	; (8002f70 <MX_SPI2_Init+0x64>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002f36:	4b0e      	ldr	r3, [pc, #56]	; (8002f70 <MX_SPI2_Init+0x64>)
 8002f38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f3c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f3e:	4b0c      	ldr	r3, [pc, #48]	; (8002f70 <MX_SPI2_Init+0x64>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f44:	4b0a      	ldr	r3, [pc, #40]	; (8002f70 <MX_SPI2_Init+0x64>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f4a:	4b09      	ldr	r3, [pc, #36]	; (8002f70 <MX_SPI2_Init+0x64>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f50:	4b07      	ldr	r3, [pc, #28]	; (8002f70 <MX_SPI2_Init+0x64>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002f56:	4b06      	ldr	r3, [pc, #24]	; (8002f70 <MX_SPI2_Init+0x64>)
 8002f58:	220a      	movs	r2, #10
 8002f5a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002f5c:	4804      	ldr	r0, [pc, #16]	; (8002f70 <MX_SPI2_Init+0x64>)
 8002f5e:	f009 fc25 	bl	800c7ac <HAL_SPI_Init>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002f68:	f7ff fce0 	bl	800292c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002f6c:	bf00      	nop
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	20005c20 	.word	0x20005c20
 8002f74:	40003800 	.word	0x40003800

08002f78 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8002f7c:	4b17      	ldr	r3, [pc, #92]	; (8002fdc <MX_SPI4_Init+0x64>)
 8002f7e:	4a18      	ldr	r2, [pc, #96]	; (8002fe0 <MX_SPI4_Init+0x68>)
 8002f80:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002f82:	4b16      	ldr	r3, [pc, #88]	; (8002fdc <MX_SPI4_Init+0x64>)
 8002f84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f88:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002f8a:	4b14      	ldr	r3, [pc, #80]	; (8002fdc <MX_SPI4_Init+0x64>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f90:	4b12      	ldr	r3, [pc, #72]	; (8002fdc <MX_SPI4_Init+0x64>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f96:	4b11      	ldr	r3, [pc, #68]	; (8002fdc <MX_SPI4_Init+0x64>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f9c:	4b0f      	ldr	r3, [pc, #60]	; (8002fdc <MX_SPI4_Init+0x64>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002fa2:	4b0e      	ldr	r3, [pc, #56]	; (8002fdc <MX_SPI4_Init+0x64>)
 8002fa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fa8:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002faa:	4b0c      	ldr	r3, [pc, #48]	; (8002fdc <MX_SPI4_Init+0x64>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002fb0:	4b0a      	ldr	r3, [pc, #40]	; (8002fdc <MX_SPI4_Init+0x64>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002fb6:	4b09      	ldr	r3, [pc, #36]	; (8002fdc <MX_SPI4_Init+0x64>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fbc:	4b07      	ldr	r3, [pc, #28]	; (8002fdc <MX_SPI4_Init+0x64>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8002fc2:	4b06      	ldr	r3, [pc, #24]	; (8002fdc <MX_SPI4_Init+0x64>)
 8002fc4:	220a      	movs	r2, #10
 8002fc6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002fc8:	4804      	ldr	r0, [pc, #16]	; (8002fdc <MX_SPI4_Init+0x64>)
 8002fca:	f009 fbef 	bl	800c7ac <HAL_SPI_Init>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8002fd4:	f7ff fcaa 	bl	800292c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002fd8:	bf00      	nop
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	20005cd0 	.word	0x20005cd0
 8002fe0:	40013400 	.word	0x40013400

08002fe4 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8002fe8:	4b17      	ldr	r3, [pc, #92]	; (8003048 <MX_SPI5_Init+0x64>)
 8002fea:	4a18      	ldr	r2, [pc, #96]	; (800304c <MX_SPI5_Init+0x68>)
 8002fec:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002fee:	4b16      	ldr	r3, [pc, #88]	; (8003048 <MX_SPI5_Init+0x64>)
 8002ff0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ff4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002ff6:	4b14      	ldr	r3, [pc, #80]	; (8003048 <MX_SPI5_Init+0x64>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ffc:	4b12      	ldr	r3, [pc, #72]	; (8003048 <MX_SPI5_Init+0x64>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003002:	4b11      	ldr	r3, [pc, #68]	; (8003048 <MX_SPI5_Init+0x64>)
 8003004:	2200      	movs	r2, #0
 8003006:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003008:	4b0f      	ldr	r3, [pc, #60]	; (8003048 <MX_SPI5_Init+0x64>)
 800300a:	2200      	movs	r2, #0
 800300c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800300e:	4b0e      	ldr	r3, [pc, #56]	; (8003048 <MX_SPI5_Init+0x64>)
 8003010:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003014:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003016:	4b0c      	ldr	r3, [pc, #48]	; (8003048 <MX_SPI5_Init+0x64>)
 8003018:	2200      	movs	r2, #0
 800301a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800301c:	4b0a      	ldr	r3, [pc, #40]	; (8003048 <MX_SPI5_Init+0x64>)
 800301e:	2200      	movs	r2, #0
 8003020:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8003022:	4b09      	ldr	r3, [pc, #36]	; (8003048 <MX_SPI5_Init+0x64>)
 8003024:	2200      	movs	r2, #0
 8003026:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003028:	4b07      	ldr	r3, [pc, #28]	; (8003048 <MX_SPI5_Init+0x64>)
 800302a:	2200      	movs	r2, #0
 800302c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800302e:	4b06      	ldr	r3, [pc, #24]	; (8003048 <MX_SPI5_Init+0x64>)
 8003030:	220a      	movs	r2, #10
 8003032:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8003034:	4804      	ldr	r0, [pc, #16]	; (8003048 <MX_SPI5_Init+0x64>)
 8003036:	f009 fbb9 	bl	800c7ac <HAL_SPI_Init>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8003040:	f7ff fc74 	bl	800292c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8003044:	bf00      	nop
 8003046:	bd80      	pop	{r7, pc}
 8003048:	20005c78 	.word	0x20005c78
 800304c:	40015000 	.word	0x40015000

08003050 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b08e      	sub	sp, #56	; 0x38
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	605a      	str	r2, [r3, #4]
 8003062:	609a      	str	r2, [r3, #8]
 8003064:	60da      	str	r2, [r3, #12]
 8003066:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a4c      	ldr	r2, [pc, #304]	; (80031a0 <HAL_SPI_MspInit+0x150>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d12d      	bne.n	80030ce <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003072:	2300      	movs	r3, #0
 8003074:	623b      	str	r3, [r7, #32]
 8003076:	4b4b      	ldr	r3, [pc, #300]	; (80031a4 <HAL_SPI_MspInit+0x154>)
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	4a4a      	ldr	r2, [pc, #296]	; (80031a4 <HAL_SPI_MspInit+0x154>)
 800307c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003080:	6413      	str	r3, [r2, #64]	; 0x40
 8003082:	4b48      	ldr	r3, [pc, #288]	; (80031a4 <HAL_SPI_MspInit+0x154>)
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800308a:	623b      	str	r3, [r7, #32]
 800308c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800308e:	2300      	movs	r3, #0
 8003090:	61fb      	str	r3, [r7, #28]
 8003092:	4b44      	ldr	r3, [pc, #272]	; (80031a4 <HAL_SPI_MspInit+0x154>)
 8003094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003096:	4a43      	ldr	r2, [pc, #268]	; (80031a4 <HAL_SPI_MspInit+0x154>)
 8003098:	f043 0302 	orr.w	r3, r3, #2
 800309c:	6313      	str	r3, [r2, #48]	; 0x30
 800309e:	4b41      	ldr	r3, [pc, #260]	; (80031a4 <HAL_SPI_MspInit+0x154>)
 80030a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	61fb      	str	r3, [r7, #28]
 80030a8:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80030aa:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80030ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b0:	2302      	movs	r3, #2
 80030b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b4:	2300      	movs	r3, #0
 80030b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030b8:	2303      	movs	r3, #3
 80030ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80030bc:	2305      	movs	r3, #5
 80030be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030c4:	4619      	mov	r1, r3
 80030c6:	4838      	ldr	r0, [pc, #224]	; (80031a8 <HAL_SPI_MspInit+0x158>)
 80030c8:	f006 fc0c 	bl	80098e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80030cc:	e064      	b.n	8003198 <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI4)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a36      	ldr	r2, [pc, #216]	; (80031ac <HAL_SPI_MspInit+0x15c>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d12d      	bne.n	8003134 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80030d8:	2300      	movs	r3, #0
 80030da:	61bb      	str	r3, [r7, #24]
 80030dc:	4b31      	ldr	r3, [pc, #196]	; (80031a4 <HAL_SPI_MspInit+0x154>)
 80030de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e0:	4a30      	ldr	r2, [pc, #192]	; (80031a4 <HAL_SPI_MspInit+0x154>)
 80030e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030e6:	6453      	str	r3, [r2, #68]	; 0x44
 80030e8:	4b2e      	ldr	r3, [pc, #184]	; (80031a4 <HAL_SPI_MspInit+0x154>)
 80030ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030f0:	61bb      	str	r3, [r7, #24]
 80030f2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80030f4:	2300      	movs	r3, #0
 80030f6:	617b      	str	r3, [r7, #20]
 80030f8:	4b2a      	ldr	r3, [pc, #168]	; (80031a4 <HAL_SPI_MspInit+0x154>)
 80030fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fc:	4a29      	ldr	r2, [pc, #164]	; (80031a4 <HAL_SPI_MspInit+0x154>)
 80030fe:	f043 0310 	orr.w	r3, r3, #16
 8003102:	6313      	str	r3, [r2, #48]	; 0x30
 8003104:	4b27      	ldr	r3, [pc, #156]	; (80031a4 <HAL_SPI_MspInit+0x154>)
 8003106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003108:	f003 0310 	and.w	r3, r3, #16
 800310c:	617b      	str	r3, [r7, #20]
 800310e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8003110:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003114:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003116:	2302      	movs	r3, #2
 8003118:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311a:	2300      	movs	r3, #0
 800311c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800311e:	2303      	movs	r3, #3
 8003120:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003122:	2305      	movs	r3, #5
 8003124:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003126:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800312a:	4619      	mov	r1, r3
 800312c:	4820      	ldr	r0, [pc, #128]	; (80031b0 <HAL_SPI_MspInit+0x160>)
 800312e:	f006 fbd9 	bl	80098e4 <HAL_GPIO_Init>
}
 8003132:	e031      	b.n	8003198 <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI5)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a1e      	ldr	r2, [pc, #120]	; (80031b4 <HAL_SPI_MspInit+0x164>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d12c      	bne.n	8003198 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 800313e:	2300      	movs	r3, #0
 8003140:	613b      	str	r3, [r7, #16]
 8003142:	4b18      	ldr	r3, [pc, #96]	; (80031a4 <HAL_SPI_MspInit+0x154>)
 8003144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003146:	4a17      	ldr	r2, [pc, #92]	; (80031a4 <HAL_SPI_MspInit+0x154>)
 8003148:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800314c:	6453      	str	r3, [r2, #68]	; 0x44
 800314e:	4b15      	ldr	r3, [pc, #84]	; (80031a4 <HAL_SPI_MspInit+0x154>)
 8003150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003152:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003156:	613b      	str	r3, [r7, #16]
 8003158:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800315a:	2300      	movs	r3, #0
 800315c:	60fb      	str	r3, [r7, #12]
 800315e:	4b11      	ldr	r3, [pc, #68]	; (80031a4 <HAL_SPI_MspInit+0x154>)
 8003160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003162:	4a10      	ldr	r2, [pc, #64]	; (80031a4 <HAL_SPI_MspInit+0x154>)
 8003164:	f043 0320 	orr.w	r3, r3, #32
 8003168:	6313      	str	r3, [r2, #48]	; 0x30
 800316a:	4b0e      	ldr	r3, [pc, #56]	; (80031a4 <HAL_SPI_MspInit+0x154>)
 800316c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316e:	f003 0320 	and.w	r3, r3, #32
 8003172:	60fb      	str	r3, [r7, #12]
 8003174:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003176:	f44f 7360 	mov.w	r3, #896	; 0x380
 800317a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800317c:	2302      	movs	r3, #2
 800317e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003180:	2301      	movs	r3, #1
 8003182:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003184:	2303      	movs	r3, #3
 8003186:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003188:	2305      	movs	r3, #5
 800318a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800318c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003190:	4619      	mov	r1, r3
 8003192:	4809      	ldr	r0, [pc, #36]	; (80031b8 <HAL_SPI_MspInit+0x168>)
 8003194:	f006 fba6 	bl	80098e4 <HAL_GPIO_Init>
}
 8003198:	bf00      	nop
 800319a:	3738      	adds	r7, #56	; 0x38
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	40003800 	.word	0x40003800
 80031a4:	40023800 	.word	0x40023800
 80031a8:	40020400 	.word	0x40020400
 80031ac:	40013400 	.word	0x40013400
 80031b0:	40021000 	.word	0x40021000
 80031b4:	40015000 	.word	0x40015000
 80031b8:	40021400 	.word	0x40021400

080031bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031c2:	2300      	movs	r3, #0
 80031c4:	607b      	str	r3, [r7, #4]
 80031c6:	4b12      	ldr	r3, [pc, #72]	; (8003210 <HAL_MspInit+0x54>)
 80031c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ca:	4a11      	ldr	r2, [pc, #68]	; (8003210 <HAL_MspInit+0x54>)
 80031cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031d0:	6453      	str	r3, [r2, #68]	; 0x44
 80031d2:	4b0f      	ldr	r3, [pc, #60]	; (8003210 <HAL_MspInit+0x54>)
 80031d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031da:	607b      	str	r3, [r7, #4]
 80031dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031de:	2300      	movs	r3, #0
 80031e0:	603b      	str	r3, [r7, #0]
 80031e2:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <HAL_MspInit+0x54>)
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	4a0a      	ldr	r2, [pc, #40]	; (8003210 <HAL_MspInit+0x54>)
 80031e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ec:	6413      	str	r3, [r2, #64]	; 0x40
 80031ee:	4b08      	ldr	r3, [pc, #32]	; (8003210 <HAL_MspInit+0x54>)
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f6:	603b      	str	r3, [r7, #0]
 80031f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80031fa:	2200      	movs	r2, #0
 80031fc:	210f      	movs	r1, #15
 80031fe:	f06f 0001 	mvn.w	r0, #1
 8003202:	f006 fb37 	bl	8009874 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003206:	bf00      	nop
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	40023800 	.word	0x40023800

08003214 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b08c      	sub	sp, #48	; 0x30
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800321c:	2300      	movs	r3, #0
 800321e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003220:	2300      	movs	r3, #0
 8003222:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003224:	2200      	movs	r2, #0
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	2036      	movs	r0, #54	; 0x36
 800322a:	f006 fb23 	bl	8009874 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800322e:	2036      	movs	r0, #54	; 0x36
 8003230:	f006 fb3c 	bl	80098ac <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003234:	2300      	movs	r3, #0
 8003236:	60fb      	str	r3, [r7, #12]
 8003238:	4b1f      	ldr	r3, [pc, #124]	; (80032b8 <HAL_InitTick+0xa4>)
 800323a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323c:	4a1e      	ldr	r2, [pc, #120]	; (80032b8 <HAL_InitTick+0xa4>)
 800323e:	f043 0310 	orr.w	r3, r3, #16
 8003242:	6413      	str	r3, [r2, #64]	; 0x40
 8003244:	4b1c      	ldr	r3, [pc, #112]	; (80032b8 <HAL_InitTick+0xa4>)
 8003246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003248:	f003 0310 	and.w	r3, r3, #16
 800324c:	60fb      	str	r3, [r7, #12]
 800324e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003250:	f107 0210 	add.w	r2, r7, #16
 8003254:	f107 0314 	add.w	r3, r7, #20
 8003258:	4611      	mov	r1, r2
 800325a:	4618      	mov	r0, r3
 800325c:	f008 faa8 	bl	800b7b0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003260:	f008 fa7e 	bl	800b760 <HAL_RCC_GetPCLK1Freq>
 8003264:	4603      	mov	r3, r0
 8003266:	005b      	lsls	r3, r3, #1
 8003268:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800326a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800326c:	4a13      	ldr	r2, [pc, #76]	; (80032bc <HAL_InitTick+0xa8>)
 800326e:	fba2 2303 	umull	r2, r3, r2, r3
 8003272:	0c9b      	lsrs	r3, r3, #18
 8003274:	3b01      	subs	r3, #1
 8003276:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003278:	4b11      	ldr	r3, [pc, #68]	; (80032c0 <HAL_InitTick+0xac>)
 800327a:	4a12      	ldr	r2, [pc, #72]	; (80032c4 <HAL_InitTick+0xb0>)
 800327c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800327e:	4b10      	ldr	r3, [pc, #64]	; (80032c0 <HAL_InitTick+0xac>)
 8003280:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003284:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003286:	4a0e      	ldr	r2, [pc, #56]	; (80032c0 <HAL_InitTick+0xac>)
 8003288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800328a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800328c:	4b0c      	ldr	r3, [pc, #48]	; (80032c0 <HAL_InitTick+0xac>)
 800328e:	2200      	movs	r2, #0
 8003290:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003292:	4b0b      	ldr	r3, [pc, #44]	; (80032c0 <HAL_InitTick+0xac>)
 8003294:	2200      	movs	r2, #0
 8003296:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003298:	4809      	ldr	r0, [pc, #36]	; (80032c0 <HAL_InitTick+0xac>)
 800329a:	f00a f82f 	bl	800d2fc <HAL_TIM_Base_Init>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d104      	bne.n	80032ae <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80032a4:	4806      	ldr	r0, [pc, #24]	; (80032c0 <HAL_InitTick+0xac>)
 80032a6:	f00a f879 	bl	800d39c <HAL_TIM_Base_Start_IT>
 80032aa:	4603      	mov	r3, r0
 80032ac:	e000      	b.n	80032b0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3730      	adds	r7, #48	; 0x30
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40023800 	.word	0x40023800
 80032bc:	431bde83 	.word	0x431bde83
 80032c0:	20005d28 	.word	0x20005d28
 80032c4:	40001000 	.word	0x40001000

080032c8 <__NVIC_SystemReset>:
{
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80032cc:	f3bf 8f4f 	dsb	sy
}
 80032d0:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80032d2:	4b06      	ldr	r3, [pc, #24]	; (80032ec <__NVIC_SystemReset+0x24>)
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80032da:	4904      	ldr	r1, [pc, #16]	; (80032ec <__NVIC_SystemReset+0x24>)
 80032dc:	4b04      	ldr	r3, [pc, #16]	; (80032f0 <__NVIC_SystemReset+0x28>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80032e2:	f3bf 8f4f 	dsb	sy
}
 80032e6:	bf00      	nop
    __NOP();
 80032e8:	bf00      	nop
 80032ea:	e7fd      	b.n	80032e8 <__NVIC_SystemReset+0x20>
 80032ec:	e000ed00 	.word	0xe000ed00
 80032f0:	05fa0004 	.word	0x05fa0004

080032f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80032f8:	e7fe      	b.n	80032f8 <NMI_Handler+0x4>

080032fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032fa:	b480      	push	{r7}
 80032fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032fe:	e7fe      	b.n	80032fe <HardFault_Handler+0x4>

08003300 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003304:	e7fe      	b.n	8003304 <MemManage_Handler+0x4>

08003306 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003306:	b480      	push	{r7}
 8003308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800330a:	e7fe      	b.n	800330a <BusFault_Handler+0x4>

0800330c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003310:	e7fe      	b.n	8003310 <UsageFault_Handler+0x4>

08003312 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003312:	b480      	push	{r7}
 8003314:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003316:	bf00      	nop
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003324:	2001      	movs	r0, #1
 8003326:	f006 fcbb 	bl	8009ca0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800332a:	bf00      	nop
 800332c:	bd80      	pop	{r7, pc}
	...

08003330 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003334:	4802      	ldr	r0, [pc, #8]	; (8003340 <RTC_Alarm_IRQHandler+0x10>)
 8003336:	f009 f805 	bl	800c344 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800333a:	bf00      	nop
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	20005c00 	.word	0x20005c00

08003344 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003348:	4802      	ldr	r0, [pc, #8]	; (8003354 <TIM6_DAC_IRQHandler+0x10>)
 800334a:	f00a fa29 	bl	800d7a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800334e:	bf00      	nop
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	20005d28 	.word	0x20005d28

08003358 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	4603      	mov	r3, r0
 8003360:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == IN_Button_Pin){
 8003362:	88fb      	ldrh	r3, [r7, #6]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d101      	bne.n	800336c <HAL_GPIO_EXTI_Callback+0x14>
		//Manual reset from external button
		MRT_resetFromStart();
 8003368:	f000 f804 	bl	8003374 <MRT_resetFromStart>
	}
}
 800336c:	bf00      	nop
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <MRT_resetFromStart>:



void MRT_resetFromStart(void){
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0

	//Clear memory
	MRT_clearExternalFlash();
 8003378:	f000 fbfa 	bl	8003b70 <MRT_clearExternalFlash>
	MRT_RTC_clearBackupRegs();
 800337c:	f7ff fd66 	bl	8002e4c <MRT_RTC_clearBackupRegs>

	//Shutdown Iridium
	//TODO should have deninit for every system?
	MRT_Iridium_Deinit();
 8003380:	f003 fe88 	bl	8007094 <MRT_Iridium_Deinit>

	//Reset function
	NVIC_SystemReset();
 8003384:	f7ff ffa0 	bl	80032c8 <__NVIC_SystemReset>

08003388 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800338c:	4b06      	ldr	r3, [pc, #24]	; (80033a8 <SystemInit+0x20>)
 800338e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003392:	4a05      	ldr	r2, [pc, #20]	; (80033a8 <SystemInit+0x20>)
 8003394:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003398:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800339c:	bf00      	nop
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	e000ed00 	.word	0xe000ed00

080033ac <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b08e      	sub	sp, #56	; 0x38
 80033b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80033b6:	2200      	movs	r2, #0
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	605a      	str	r2, [r3, #4]
 80033bc:	609a      	str	r2, [r3, #8]
 80033be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033c0:	f107 0320 	add.w	r3, r7, #32
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80033ca:	1d3b      	adds	r3, r7, #4
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	605a      	str	r2, [r3, #4]
 80033d2:	609a      	str	r2, [r3, #8]
 80033d4:	60da      	str	r2, [r3, #12]
 80033d6:	611a      	str	r2, [r3, #16]
 80033d8:	615a      	str	r2, [r3, #20]
 80033da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80033dc:	4b2d      	ldr	r3, [pc, #180]	; (8003494 <MX_TIM2_Init+0xe8>)
 80033de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80033e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 80033e4:	4b2b      	ldr	r3, [pc, #172]	; (8003494 <MX_TIM2_Init+0xe8>)
 80033e6:	2259      	movs	r2, #89	; 0x59
 80033e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033ea:	4b2a      	ldr	r3, [pc, #168]	; (8003494 <MX_TIM2_Init+0xe8>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400-1;
 80033f0:	4b28      	ldr	r3, [pc, #160]	; (8003494 <MX_TIM2_Init+0xe8>)
 80033f2:	f240 128f 	movw	r2, #399	; 0x18f
 80033f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033f8:	4b26      	ldr	r3, [pc, #152]	; (8003494 <MX_TIM2_Init+0xe8>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033fe:	4b25      	ldr	r3, [pc, #148]	; (8003494 <MX_TIM2_Init+0xe8>)
 8003400:	2200      	movs	r2, #0
 8003402:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003404:	4823      	ldr	r0, [pc, #140]	; (8003494 <MX_TIM2_Init+0xe8>)
 8003406:	f009 ff79 	bl	800d2fc <HAL_TIM_Base_Init>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003410:	f7ff fa8c 	bl	800292c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003414:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003418:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800341a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800341e:	4619      	mov	r1, r3
 8003420:	481c      	ldr	r0, [pc, #112]	; (8003494 <MX_TIM2_Init+0xe8>)
 8003422:	f00a fb87 	bl	800db34 <HAL_TIM_ConfigClockSource>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800342c:	f7ff fa7e 	bl	800292c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003430:	4818      	ldr	r0, [pc, #96]	; (8003494 <MX_TIM2_Init+0xe8>)
 8003432:	f00a f823 	bl	800d47c <HAL_TIM_PWM_Init>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d001      	beq.n	8003440 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800343c:	f7ff fa76 	bl	800292c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003440:	2320      	movs	r3, #32
 8003442:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003444:	2300      	movs	r3, #0
 8003446:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003448:	f107 0320 	add.w	r3, r7, #32
 800344c:	4619      	mov	r1, r3
 800344e:	4811      	ldr	r0, [pc, #68]	; (8003494 <MX_TIM2_Init+0xe8>)
 8003450:	f00a ff70 	bl	800e334 <HAL_TIMEx_MasterConfigSynchronization>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800345a:	f7ff fa67 	bl	800292c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800345e:	2360      	movs	r3, #96	; 0x60
 8003460:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8003462:	2364      	movs	r3, #100	; 0x64
 8003464:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003466:	2300      	movs	r3, #0
 8003468:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800346a:	2300      	movs	r3, #0
 800346c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800346e:	1d3b      	adds	r3, r7, #4
 8003470:	2208      	movs	r2, #8
 8003472:	4619      	mov	r1, r3
 8003474:	4807      	ldr	r0, [pc, #28]	; (8003494 <MX_TIM2_Init+0xe8>)
 8003476:	f00a fa9b 	bl	800d9b0 <HAL_TIM_PWM_ConfigChannel>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8003480:	f7ff fa54 	bl	800292c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003484:	4803      	ldr	r0, [pc, #12]	; (8003494 <MX_TIM2_Init+0xe8>)
 8003486:	f000 f827 	bl	80034d8 <HAL_TIM_MspPostInit>

}
 800348a:	bf00      	nop
 800348c:	3738      	adds	r7, #56	; 0x38
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	20005d70 	.word	0x20005d70

08003498 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a8:	d10d      	bne.n	80034c6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034aa:	2300      	movs	r3, #0
 80034ac:	60fb      	str	r3, [r7, #12]
 80034ae:	4b09      	ldr	r3, [pc, #36]	; (80034d4 <HAL_TIM_Base_MspInit+0x3c>)
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	4a08      	ldr	r2, [pc, #32]	; (80034d4 <HAL_TIM_Base_MspInit+0x3c>)
 80034b4:	f043 0301 	orr.w	r3, r3, #1
 80034b8:	6413      	str	r3, [r2, #64]	; 0x40
 80034ba:	4b06      	ldr	r3, [pc, #24]	; (80034d4 <HAL_TIM_Base_MspInit+0x3c>)
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80034c6:	bf00      	nop
 80034c8:	3714      	adds	r7, #20
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	40023800 	.word	0x40023800

080034d8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b088      	sub	sp, #32
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e0:	f107 030c 	add.w	r3, r7, #12
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	605a      	str	r2, [r3, #4]
 80034ea:	609a      	str	r2, [r3, #8]
 80034ec:	60da      	str	r2, [r3, #12]
 80034ee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034f8:	d11d      	bne.n	8003536 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034fa:	2300      	movs	r3, #0
 80034fc:	60bb      	str	r3, [r7, #8]
 80034fe:	4b10      	ldr	r3, [pc, #64]	; (8003540 <HAL_TIM_MspPostInit+0x68>)
 8003500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003502:	4a0f      	ldr	r2, [pc, #60]	; (8003540 <HAL_TIM_MspPostInit+0x68>)
 8003504:	f043 0301 	orr.w	r3, r3, #1
 8003508:	6313      	str	r3, [r2, #48]	; 0x30
 800350a:	4b0d      	ldr	r3, [pc, #52]	; (8003540 <HAL_TIM_MspPostInit+0x68>)
 800350c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	60bb      	str	r3, [r7, #8]
 8003514:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8003516:	2304      	movs	r3, #4
 8003518:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800351a:	2302      	movs	r3, #2
 800351c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351e:	2300      	movs	r3, #0
 8003520:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003522:	2300      	movs	r3, #0
 8003524:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003526:	2301      	movs	r3, #1
 8003528:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 800352a:	f107 030c 	add.w	r3, r7, #12
 800352e:	4619      	mov	r1, r3
 8003530:	4804      	ldr	r0, [pc, #16]	; (8003544 <HAL_TIM_MspPostInit+0x6c>)
 8003532:	f006 f9d7 	bl	80098e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003536:	bf00      	nop
 8003538:	3720      	adds	r7, #32
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	40023800 	.word	0x40023800
 8003544:	40020000 	.word	0x40020000

08003548 <MX_UART8_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART8 init function */
void MX_UART8_Init(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 800354c:	4b11      	ldr	r3, [pc, #68]	; (8003594 <MX_UART8_Init+0x4c>)
 800354e:	4a12      	ldr	r2, [pc, #72]	; (8003598 <MX_UART8_Init+0x50>)
 8003550:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8003552:	4b10      	ldr	r3, [pc, #64]	; (8003594 <MX_UART8_Init+0x4c>)
 8003554:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003558:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800355a:	4b0e      	ldr	r3, [pc, #56]	; (8003594 <MX_UART8_Init+0x4c>)
 800355c:	2200      	movs	r2, #0
 800355e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8003560:	4b0c      	ldr	r3, [pc, #48]	; (8003594 <MX_UART8_Init+0x4c>)
 8003562:	2200      	movs	r2, #0
 8003564:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8003566:	4b0b      	ldr	r3, [pc, #44]	; (8003594 <MX_UART8_Init+0x4c>)
 8003568:	2200      	movs	r2, #0
 800356a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 800356c:	4b09      	ldr	r3, [pc, #36]	; (8003594 <MX_UART8_Init+0x4c>)
 800356e:	220c      	movs	r2, #12
 8003570:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003572:	4b08      	ldr	r3, [pc, #32]	; (8003594 <MX_UART8_Init+0x4c>)
 8003574:	2200      	movs	r2, #0
 8003576:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8003578:	4b06      	ldr	r3, [pc, #24]	; (8003594 <MX_UART8_Init+0x4c>)
 800357a:	2200      	movs	r2, #0
 800357c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800357e:	4805      	ldr	r0, [pc, #20]	; (8003594 <MX_UART8_Init+0x4c>)
 8003580:	f00a ff68 	bl	800e454 <HAL_UART_Init>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <MX_UART8_Init+0x46>
  {
    Error_Handler();
 800358a:	f7ff f9cf 	bl	800292c <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 800358e:	bf00      	nop
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	20005dfc 	.word	0x20005dfc
 8003598:	40007c00 	.word	0x40007c00

0800359c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80035a0:	4b11      	ldr	r3, [pc, #68]	; (80035e8 <MX_USART3_UART_Init+0x4c>)
 80035a2:	4a12      	ldr	r2, [pc, #72]	; (80035ec <MX_USART3_UART_Init+0x50>)
 80035a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80035a6:	4b10      	ldr	r3, [pc, #64]	; (80035e8 <MX_USART3_UART_Init+0x4c>)
 80035a8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80035ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80035ae:	4b0e      	ldr	r3, [pc, #56]	; (80035e8 <MX_USART3_UART_Init+0x4c>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80035b4:	4b0c      	ldr	r3, [pc, #48]	; (80035e8 <MX_USART3_UART_Init+0x4c>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80035ba:	4b0b      	ldr	r3, [pc, #44]	; (80035e8 <MX_USART3_UART_Init+0x4c>)
 80035bc:	2200      	movs	r2, #0
 80035be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80035c0:	4b09      	ldr	r3, [pc, #36]	; (80035e8 <MX_USART3_UART_Init+0x4c>)
 80035c2:	220c      	movs	r2, #12
 80035c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035c6:	4b08      	ldr	r3, [pc, #32]	; (80035e8 <MX_USART3_UART_Init+0x4c>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80035cc:	4b06      	ldr	r3, [pc, #24]	; (80035e8 <MX_USART3_UART_Init+0x4c>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80035d2:	4805      	ldr	r0, [pc, #20]	; (80035e8 <MX_USART3_UART_Init+0x4c>)
 80035d4:	f00a ff3e 	bl	800e454 <HAL_UART_Init>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80035de:	f7ff f9a5 	bl	800292c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80035e2:	bf00      	nop
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	20005db8 	.word	0x20005db8
 80035ec:	40004800 	.word	0x40004800

080035f0 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80035f4:	4b11      	ldr	r3, [pc, #68]	; (800363c <MX_USART6_UART_Init+0x4c>)
 80035f6:	4a12      	ldr	r2, [pc, #72]	; (8003640 <MX_USART6_UART_Init+0x50>)
 80035f8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80035fa:	4b10      	ldr	r3, [pc, #64]	; (800363c <MX_USART6_UART_Init+0x4c>)
 80035fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003600:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003602:	4b0e      	ldr	r3, [pc, #56]	; (800363c <MX_USART6_UART_Init+0x4c>)
 8003604:	2200      	movs	r2, #0
 8003606:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003608:	4b0c      	ldr	r3, [pc, #48]	; (800363c <MX_USART6_UART_Init+0x4c>)
 800360a:	2200      	movs	r2, #0
 800360c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800360e:	4b0b      	ldr	r3, [pc, #44]	; (800363c <MX_USART6_UART_Init+0x4c>)
 8003610:	2200      	movs	r2, #0
 8003612:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003614:	4b09      	ldr	r3, [pc, #36]	; (800363c <MX_USART6_UART_Init+0x4c>)
 8003616:	220c      	movs	r2, #12
 8003618:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800361a:	4b08      	ldr	r3, [pc, #32]	; (800363c <MX_USART6_UART_Init+0x4c>)
 800361c:	2200      	movs	r2, #0
 800361e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003620:	4b06      	ldr	r3, [pc, #24]	; (800363c <MX_USART6_UART_Init+0x4c>)
 8003622:	2200      	movs	r2, #0
 8003624:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003626:	4805      	ldr	r0, [pc, #20]	; (800363c <MX_USART6_UART_Init+0x4c>)
 8003628:	f00a ff14 	bl	800e454 <HAL_UART_Init>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003632:	f7ff f97b 	bl	800292c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003636:	bf00      	nop
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	20005e40 	.word	0x20005e40
 8003640:	40011400 	.word	0x40011400

08003644 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b08e      	sub	sp, #56	; 0x38
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800364c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	605a      	str	r2, [r3, #4]
 8003656:	609a      	str	r2, [r3, #8]
 8003658:	60da      	str	r2, [r3, #12]
 800365a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART8)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a4b      	ldr	r2, [pc, #300]	; (8003790 <HAL_UART_MspInit+0x14c>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d12c      	bne.n	80036c0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* UART8 clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8003666:	2300      	movs	r3, #0
 8003668:	623b      	str	r3, [r7, #32]
 800366a:	4b4a      	ldr	r3, [pc, #296]	; (8003794 <HAL_UART_MspInit+0x150>)
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	4a49      	ldr	r2, [pc, #292]	; (8003794 <HAL_UART_MspInit+0x150>)
 8003670:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003674:	6413      	str	r3, [r2, #64]	; 0x40
 8003676:	4b47      	ldr	r3, [pc, #284]	; (8003794 <HAL_UART_MspInit+0x150>)
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800367e:	623b      	str	r3, [r7, #32]
 8003680:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003682:	2300      	movs	r3, #0
 8003684:	61fb      	str	r3, [r7, #28]
 8003686:	4b43      	ldr	r3, [pc, #268]	; (8003794 <HAL_UART_MspInit+0x150>)
 8003688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368a:	4a42      	ldr	r2, [pc, #264]	; (8003794 <HAL_UART_MspInit+0x150>)
 800368c:	f043 0310 	orr.w	r3, r3, #16
 8003690:	6313      	str	r3, [r2, #48]	; 0x30
 8003692:	4b40      	ldr	r3, [pc, #256]	; (8003794 <HAL_UART_MspInit+0x150>)
 8003694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003696:	f003 0310 	and.w	r3, r3, #16
 800369a:	61fb      	str	r3, [r7, #28]
 800369c:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 800369e:	2303      	movs	r3, #3
 80036a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a2:	2302      	movs	r3, #2
 80036a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a6:	2300      	movs	r3, #0
 80036a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036aa:	2303      	movs	r3, #3
 80036ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80036ae:	2308      	movs	r3, #8
 80036b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80036b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036b6:	4619      	mov	r1, r3
 80036b8:	4837      	ldr	r0, [pc, #220]	; (8003798 <HAL_UART_MspInit+0x154>)
 80036ba:	f006 f913 	bl	80098e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80036be:	e063      	b.n	8003788 <HAL_UART_MspInit+0x144>
  else if(uartHandle->Instance==USART3)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a35      	ldr	r2, [pc, #212]	; (800379c <HAL_UART_MspInit+0x158>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d12d      	bne.n	8003726 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80036ca:	2300      	movs	r3, #0
 80036cc:	61bb      	str	r3, [r7, #24]
 80036ce:	4b31      	ldr	r3, [pc, #196]	; (8003794 <HAL_UART_MspInit+0x150>)
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	4a30      	ldr	r2, [pc, #192]	; (8003794 <HAL_UART_MspInit+0x150>)
 80036d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036d8:	6413      	str	r3, [r2, #64]	; 0x40
 80036da:	4b2e      	ldr	r3, [pc, #184]	; (8003794 <HAL_UART_MspInit+0x150>)
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036e2:	61bb      	str	r3, [r7, #24]
 80036e4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036e6:	2300      	movs	r3, #0
 80036e8:	617b      	str	r3, [r7, #20]
 80036ea:	4b2a      	ldr	r3, [pc, #168]	; (8003794 <HAL_UART_MspInit+0x150>)
 80036ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ee:	4a29      	ldr	r2, [pc, #164]	; (8003794 <HAL_UART_MspInit+0x150>)
 80036f0:	f043 0308 	orr.w	r3, r3, #8
 80036f4:	6313      	str	r3, [r2, #48]	; 0x30
 80036f6:	4b27      	ldr	r3, [pc, #156]	; (8003794 <HAL_UART_MspInit+0x150>)
 80036f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fa:	f003 0308 	and.w	r3, r3, #8
 80036fe:	617b      	str	r3, [r7, #20]
 8003700:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 8003702:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003706:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003708:	2302      	movs	r3, #2
 800370a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800370c:	2300      	movs	r3, #0
 800370e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003710:	2303      	movs	r3, #3
 8003712:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003714:	2307      	movs	r3, #7
 8003716:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003718:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800371c:	4619      	mov	r1, r3
 800371e:	4820      	ldr	r0, [pc, #128]	; (80037a0 <HAL_UART_MspInit+0x15c>)
 8003720:	f006 f8e0 	bl	80098e4 <HAL_GPIO_Init>
}
 8003724:	e030      	b.n	8003788 <HAL_UART_MspInit+0x144>
  else if(uartHandle->Instance==USART6)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a1e      	ldr	r2, [pc, #120]	; (80037a4 <HAL_UART_MspInit+0x160>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d12b      	bne.n	8003788 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003730:	2300      	movs	r3, #0
 8003732:	613b      	str	r3, [r7, #16]
 8003734:	4b17      	ldr	r3, [pc, #92]	; (8003794 <HAL_UART_MspInit+0x150>)
 8003736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003738:	4a16      	ldr	r2, [pc, #88]	; (8003794 <HAL_UART_MspInit+0x150>)
 800373a:	f043 0320 	orr.w	r3, r3, #32
 800373e:	6453      	str	r3, [r2, #68]	; 0x44
 8003740:	4b14      	ldr	r3, [pc, #80]	; (8003794 <HAL_UART_MspInit+0x150>)
 8003742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003744:	f003 0320 	and.w	r3, r3, #32
 8003748:	613b      	str	r3, [r7, #16]
 800374a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800374c:	2300      	movs	r3, #0
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	4b10      	ldr	r3, [pc, #64]	; (8003794 <HAL_UART_MspInit+0x150>)
 8003752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003754:	4a0f      	ldr	r2, [pc, #60]	; (8003794 <HAL_UART_MspInit+0x150>)
 8003756:	f043 0304 	orr.w	r3, r3, #4
 800375a:	6313      	str	r3, [r2, #48]	; 0x30
 800375c:	4b0d      	ldr	r3, [pc, #52]	; (8003794 <HAL_UART_MspInit+0x150>)
 800375e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003760:	f003 0304 	and.w	r3, r3, #4
 8003764:	60fb      	str	r3, [r7, #12]
 8003766:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 8003768:	23c0      	movs	r3, #192	; 0xc0
 800376a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800376c:	2302      	movs	r3, #2
 800376e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003770:	2300      	movs	r3, #0
 8003772:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003774:	2303      	movs	r3, #3
 8003776:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003778:	2308      	movs	r3, #8
 800377a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800377c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003780:	4619      	mov	r1, r3
 8003782:	4809      	ldr	r0, [pc, #36]	; (80037a8 <HAL_UART_MspInit+0x164>)
 8003784:	f006 f8ae 	bl	80098e4 <HAL_GPIO_Init>
}
 8003788:	bf00      	nop
 800378a:	3738      	adds	r7, #56	; 0x38
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	40007c00 	.word	0x40007c00
 8003794:	40023800 	.word	0x40023800
 8003798:	40021000 	.word	0x40021000
 800379c:	40004800 	.word	0x40004800
 80037a0:	40020c00 	.word	0x40020c00
 80037a4:	40011400 	.word	0x40011400
 80037a8:	40020800 	.word	0x40020800

080037ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80037ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037e4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80037b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80037b2:	e003      	b.n	80037bc <LoopCopyDataInit>

080037b4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80037b4:	4b0c      	ldr	r3, [pc, #48]	; (80037e8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80037b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80037b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80037ba:	3104      	adds	r1, #4

080037bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80037bc:	480b      	ldr	r0, [pc, #44]	; (80037ec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80037be:	4b0c      	ldr	r3, [pc, #48]	; (80037f0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80037c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80037c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80037c4:	d3f6      	bcc.n	80037b4 <CopyDataInit>
  ldr  r2, =_sbss
 80037c6:	4a0b      	ldr	r2, [pc, #44]	; (80037f4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80037c8:	e002      	b.n	80037d0 <LoopFillZerobss>

080037ca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80037ca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80037cc:	f842 3b04 	str.w	r3, [r2], #4

080037d0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80037d0:	4b09      	ldr	r3, [pc, #36]	; (80037f8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80037d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80037d4:	d3f9      	bcc.n	80037ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80037d6:	f7ff fdd7 	bl	8003388 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037da:	f00f fb77 	bl	8012ecc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037de:	f7fe feef 	bl	80025c0 <main>
  bx  lr    
 80037e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80037e4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80037e8:	0801a58c 	.word	0x0801a58c
  ldr  r0, =_sdata
 80037ec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80037f0:	200002c4 	.word	0x200002c4
  ldr  r2, =_sbss
 80037f4:	200002c4 	.word	0x200002c4
  ldr  r3, = _ebss
 80037f8:	20006550 	.word	0x20006550

080037fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037fc:	e7fe      	b.n	80037fc <ADC_IRQHandler>
	...

08003800 <MRT_getAltitude>:

/*
 * Gets the altitude using temperature, pressure and sea-level pressure
 *https://www.mide.com/air-pressure-at-altitude-calculator
 */
float MRT_getAltitude(float pressure){
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	ed87 0a01 	vstr	s0, [r7, #4]
	return BASE_HEIGHT+(SEA_LEVEL_TEMPERATURE/-0.0065)*(pow(pressure/SEA_LEVEL_PRESSURE,0.190263236)-1); //(-R*-0.0065/(go*M)) = 0.190263236
 800380a:	edd7 7a01 	vldr	s15, [r7, #4]
 800380e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003890 <MRT_getAltitude+0x90>
 8003812:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003816:	ee16 0a90 	vmov	r0, s13
 800381a:	f7fc feb5 	bl	8000588 <__aeabi_f2d>
 800381e:	4602      	mov	r2, r0
 8003820:	460b      	mov	r3, r1
 8003822:	ed9f 1b17 	vldr	d1, [pc, #92]	; 8003880 <MRT_getAltitude+0x80>
 8003826:	ec43 2b10 	vmov	d0, r2, r3
 800382a:	f00e fa95 	bl	8011d58 <pow>
 800382e:	ec51 0b10 	vmov	r0, r1, d0
 8003832:	f04f 0200 	mov.w	r2, #0
 8003836:	4b17      	ldr	r3, [pc, #92]	; (8003894 <MRT_getAltitude+0x94>)
 8003838:	f7fc fd46 	bl	80002c8 <__aeabi_dsub>
 800383c:	4602      	mov	r2, r0
 800383e:	460b      	mov	r3, r1
 8003840:	4610      	mov	r0, r2
 8003842:	4619      	mov	r1, r3
 8003844:	a310      	add	r3, pc, #64	; (adr r3, 8003888 <MRT_getAltitude+0x88>)
 8003846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800384a:	f7fc fef5 	bl	8000638 <__aeabi_dmul>
 800384e:	4602      	mov	r2, r0
 8003850:	460b      	mov	r3, r1
 8003852:	4610      	mov	r0, r2
 8003854:	4619      	mov	r1, r3
 8003856:	f04f 0200 	mov.w	r2, #0
 800385a:	4b0f      	ldr	r3, [pc, #60]	; (8003898 <MRT_getAltitude+0x98>)
 800385c:	f7fc fd36 	bl	80002cc <__adddf3>
 8003860:	4602      	mov	r2, r0
 8003862:	460b      	mov	r3, r1
 8003864:	4610      	mov	r0, r2
 8003866:	4619      	mov	r1, r3
 8003868:	f7fd f9de 	bl	8000c28 <__aeabi_d2f>
 800386c:	4603      	mov	r3, r0
 800386e:	ee07 3a90 	vmov	s15, r3
}
 8003872:	eeb0 0a67 	vmov.f32	s0, s15
 8003876:	3708      	adds	r7, #8
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	f3af 8000 	nop.w
 8003880:	b4202506 	.word	0xb4202506
 8003884:	3fc85a8b 	.word	0x3fc85a8b
 8003888:	76276276 	.word	0x76276276
 800388c:	c0e481c2 	.word	0xc0e481c2
 8003890:	447d8000 	.word	0x447d8000
 8003894:	3ff00000 	.word	0x3ff00000
 8003898:	40590000 	.word	0x40590000

0800389c <MRT_getContinuity>:
 * Checks the continuity of the gates
 *
 * returns a binary number in its decimal form. Each bit is the state of a gate.
 * bit3 bit2 bit1 bit0 = drogue1 drogue2 prop1 prop2
 */
uint8_t MRT_getContinuity(void){
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
	uint8_t drogue1 = HAL_GPIO_ReadPin(IN_EJ_Drogue_Cont_GPIO_Port, IN_EJ_Drogue_Cont_Pin);
 80038a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038a6:	4815      	ldr	r0, [pc, #84]	; (80038fc <MRT_getContinuity+0x60>)
 80038a8:	f006 f9c8 	bl	8009c3c <HAL_GPIO_ReadPin>
 80038ac:	4603      	mov	r3, r0
 80038ae:	71fb      	strb	r3, [r7, #7]
	uint8_t drogue2 = HAL_GPIO_ReadPin(IN_EJ_Main_Cont_GPIO_Port, IN_EJ_Main_Cont_Pin);
 80038b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80038b4:	4811      	ldr	r0, [pc, #68]	; (80038fc <MRT_getContinuity+0x60>)
 80038b6:	f006 f9c1 	bl	8009c3c <HAL_GPIO_ReadPin>
 80038ba:	4603      	mov	r3, r0
 80038bc:	71bb      	strb	r3, [r7, #6]
	uint8_t prop1 = HAL_GPIO_ReadPin(IN_PyroValve_Cont_1_GPIO_Port, IN_PyroValve_Cont_1_Pin);
 80038be:	2101      	movs	r1, #1
 80038c0:	480e      	ldr	r0, [pc, #56]	; (80038fc <MRT_getContinuity+0x60>)
 80038c2:	f006 f9bb 	bl	8009c3c <HAL_GPIO_ReadPin>
 80038c6:	4603      	mov	r3, r0
 80038c8:	717b      	strb	r3, [r7, #5]
	uint8_t prop2 = HAL_GPIO_ReadPin(IN_PyroValve_Cont_2_GPIO_Port, IN_PyroValve_Cont_2_Pin);
 80038ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038ce:	480c      	ldr	r0, [pc, #48]	; (8003900 <MRT_getContinuity+0x64>)
 80038d0:	f006 f9b4 	bl	8009c3c <HAL_GPIO_ReadPin>
 80038d4:	4603      	mov	r3, r0
 80038d6:	713b      	strb	r3, [r7, #4]
	uint8_t continuity = 8*drogue1 + 4*drogue2 + 2*prop1 + prop2;
 80038d8:	79fb      	ldrb	r3, [r7, #7]
 80038da:	005a      	lsls	r2, r3, #1
 80038dc:	79bb      	ldrb	r3, [r7, #6]
 80038de:	4413      	add	r3, r2
 80038e0:	005a      	lsls	r2, r3, #1
 80038e2:	797b      	ldrb	r3, [r7, #5]
 80038e4:	4413      	add	r3, r2
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	793b      	ldrb	r3, [r7, #4]
 80038ee:	4413      	add	r3, r2
 80038f0:	70fb      	strb	r3, [r7, #3]
	return continuity;
 80038f2:	78fb      	ldrb	r3, [r7, #3]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3708      	adds	r7, #8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40021800 	.word	0x40021800
 8003900:	40021400 	.word	0x40021400

08003904 <MRT_formatAvionics>:


// formats avionics telemetry string using sprintf
void MRT_formatAvionics(void) {
 8003904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003908:	b0a3      	sub	sp, #140	; 0x8c
 800390a:	af16      	add	r7, sp, #88	; 0x58
	memset(msg_buffer_av, 0, 200);
 800390c:	22c8      	movs	r2, #200	; 0xc8
 800390e:	2100      	movs	r1, #0
 8003910:	483c      	ldr	r0, [pc, #240]	; (8003a04 <MRT_formatAvionics+0x100>)
 8003912:	f00f fb3b 	bl	8012f8c <memset>
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
		hlsm6dsr.acceleration_mg[0],	hlsm6dsr.acceleration_mg[1],	hlsm6dsr.acceleration_mg[2],
 8003916:	4b3c      	ldr	r3, [pc, #240]	; (8003a08 <MRT_formatAvionics+0x104>)
 8003918:	681b      	ldr	r3, [r3, #0]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 800391a:	4618      	mov	r0, r3
 800391c:	f7fc fe34 	bl	8000588 <__aeabi_f2d>
 8003920:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
		hlsm6dsr.acceleration_mg[0],	hlsm6dsr.acceleration_mg[1],	hlsm6dsr.acceleration_mg[2],
 8003924:	4b38      	ldr	r3, [pc, #224]	; (8003a08 <MRT_formatAvionics+0x104>)
 8003926:	685b      	ldr	r3, [r3, #4]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 8003928:	4618      	mov	r0, r3
 800392a:	f7fc fe2d 	bl	8000588 <__aeabi_f2d>
 800392e:	e9c7 0108 	strd	r0, r1, [r7, #32]
		hlsm6dsr.acceleration_mg[0],	hlsm6dsr.acceleration_mg[1],	hlsm6dsr.acceleration_mg[2],
 8003932:	4b35      	ldr	r3, [pc, #212]	; (8003a08 <MRT_formatAvionics+0x104>)
 8003934:	689b      	ldr	r3, [r3, #8]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 8003936:	4618      	mov	r0, r3
 8003938:	f7fc fe26 	bl	8000588 <__aeabi_f2d>
 800393c:	e9c7 0106 	strd	r0, r1, [r7, #24]
		hlsm6dsr.angular_rate_mdps[0],	hlsm6dsr.angular_rate_mdps[1],	hlsm6dsr.angular_rate_mdps[2],
 8003940:	4b31      	ldr	r3, [pc, #196]	; (8003a08 <MRT_formatAvionics+0x104>)
 8003942:	68db      	ldr	r3, [r3, #12]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 8003944:	4618      	mov	r0, r3
 8003946:	f7fc fe1f 	bl	8000588 <__aeabi_f2d>
 800394a:	e9c7 0104 	strd	r0, r1, [r7, #16]
		hlsm6dsr.angular_rate_mdps[0],	hlsm6dsr.angular_rate_mdps[1],	hlsm6dsr.angular_rate_mdps[2],
 800394e:	4b2e      	ldr	r3, [pc, #184]	; (8003a08 <MRT_formatAvionics+0x104>)
 8003950:	691b      	ldr	r3, [r3, #16]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 8003952:	4618      	mov	r0, r3
 8003954:	f7fc fe18 	bl	8000588 <__aeabi_f2d>
 8003958:	e9c7 0102 	strd	r0, r1, [r7, #8]
		hlsm6dsr.angular_rate_mdps[0],	hlsm6dsr.angular_rate_mdps[1],	hlsm6dsr.angular_rate_mdps[2],
 800395c:	4b2a      	ldr	r3, [pc, #168]	; (8003a08 <MRT_formatAvionics+0x104>)
 800395e:	695b      	ldr	r3, [r3, #20]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 8003960:	4618      	mov	r0, r3
 8003962:	f7fc fe11 	bl	8000588 <__aeabi_f2d>
 8003966:	e9c7 0100 	strd	r0, r1, [r7]
		hlps22hh.pressure_hPa,	hgps.latitude,	hgps.longitude,
 800396a:	4b28      	ldr	r3, [pc, #160]	; (8003a0c <MRT_formatAvionics+0x108>)
 800396c:	681b      	ldr	r3, [r3, #0]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 800396e:	4618      	mov	r0, r3
 8003970:	f7fc fe0a 	bl	8000588 <__aeabi_f2d>
 8003974:	4682      	mov	sl, r0
 8003976:	468b      	mov	fp, r1
		hlps22hh.pressure_hPa,	hgps.latitude,	hgps.longitude,
 8003978:	4b25      	ldr	r3, [pc, #148]	; (8003a10 <MRT_formatAvionics+0x10c>)
 800397a:	681b      	ldr	r3, [r3, #0]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 800397c:	4618      	mov	r0, r3
 800397e:	f7fc fe03 	bl	8000588 <__aeabi_f2d>
 8003982:	4680      	mov	r8, r0
 8003984:	4689      	mov	r9, r1
		hlps22hh.pressure_hPa,	hgps.latitude,	hgps.longitude,
 8003986:	4b22      	ldr	r3, [pc, #136]	; (8003a10 <MRT_formatAvionics+0x10c>)
 8003988:	685b      	ldr	r3, [r3, #4]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 800398a:	4618      	mov	r0, r3
 800398c:	f7fc fdfc 	bl	8000588 <__aeabi_f2d>
 8003990:	4604      	mov	r4, r0
 8003992:	460d      	mov	r5, r1
 8003994:	4b1f      	ldr	r3, [pc, #124]	; (8003a14 <MRT_formatAvionics+0x110>)
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	461e      	mov	r6, r3
 800399a:	4b1f      	ldr	r3, [pc, #124]	; (8003a18 <MRT_formatAvionics+0x114>)
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	4618      	mov	r0, r3
 80039a0:	4b1e      	ldr	r3, [pc, #120]	; (8003a1c <MRT_formatAvionics+0x118>)
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	4b1e      	ldr	r3, [pc, #120]	; (8003a20 <MRT_formatAvionics+0x11c>)
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	4619      	mov	r1, r3
 80039aa:	4b1e      	ldr	r3, [pc, #120]	; (8003a24 <MRT_formatAvionics+0x120>)
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	9314      	str	r3, [sp, #80]	; 0x50
 80039b0:	9113      	str	r1, [sp, #76]	; 0x4c
 80039b2:	9212      	str	r2, [sp, #72]	; 0x48
 80039b4:	9011      	str	r0, [sp, #68]	; 0x44
 80039b6:	9610      	str	r6, [sp, #64]	; 0x40
 80039b8:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
 80039bc:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80039c0:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80039c4:	ed97 7b00 	vldr	d7, [r7]
 80039c8:	ed8d 7b08 	vstr	d7, [sp, #32]
 80039cc:	ed97 7b02 	vldr	d7, [r7, #8]
 80039d0:	ed8d 7b06 	vstr	d7, [sp, #24]
 80039d4:	ed97 7b04 	vldr	d7, [r7, #16]
 80039d8:	ed8d 7b04 	vstr	d7, [sp, #16]
 80039dc:	ed97 7b06 	vldr	d7, [r7, #24]
 80039e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80039e4:	ed97 7b08 	vldr	d7, [r7, #32]
 80039e8:	ed8d 7b00 	vstr	d7, [sp]
 80039ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039f0:	490d      	ldr	r1, [pc, #52]	; (8003a28 <MRT_formatAvionics+0x124>)
 80039f2:	4804      	ldr	r0, [pc, #16]	; (8003a04 <MRT_formatAvionics+0x100>)
 80039f4:	f010 fb48 	bl	8014088 <siprintf>
		prev_min, prev_sec, prev_subsec,
		gates_continuity,	ejection_stage_flag);
}
 80039f8:	bf00      	nop
 80039fa:	3734      	adds	r7, #52	; 0x34
 80039fc:	46bd      	mov	sp, r7
 80039fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a02:	bf00      	nop
 8003a04:	20005e84 	.word	0x20005e84
 8003a08:	200003a4 	.word	0x200003a4
 8003a0c:	200003d0 	.word	0x200003d0
 8003a10:	200003e4 	.word	0x200003e4
 8003a14:	2000038e 	.word	0x2000038e
 8003a18:	2000038f 	.word	0x2000038f
 8003a1c:	20000390 	.word	0x20000390
 8003a20:	20000375 	.word	0x20000375
 8003a24:	2000038c 	.word	0x2000038c
 8003a28:	08018540 	.word	0x08018540

08003a2c <MRT_external_flash_Init>:


//**************************************************//
//FUNCTIONS

void MRT_external_flash_Init(void){
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0

	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003a32:	2300      	movs	r3, #0
 8003a34:	607b      	str	r3, [r7, #4]
 8003a36:	e007      	b.n	8003a48 <MRT_external_flash_Init+0x1c>
		FLAGS_NULL_BUFFER[i] = 0; //Setup the flags null buffer for the correct number of values
 8003a38:	4a13      	ldr	r2, [pc, #76]	; (8003a88 <MRT_external_flash_Init+0x5c>)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	2200      	movs	r2, #0
 8003a40:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	3301      	adds	r3, #1
 8003a46:	607b      	str	r3, [r7, #4]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b04      	cmp	r3, #4
 8003a4c:	ddf4      	ble.n	8003a38 <MRT_external_flash_Init+0xc>
	}

	if (!W25qxx_Init()) {
 8003a4e:	f000 fc83 	bl	8004358 <W25qxx_Init>
 8003a52:	4603      	mov	r3, r0
 8003a54:	f083 0301 	eor.w	r3, r3, #1
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <MRT_external_flash_Init+0x36>
		Error_Handler(); // hangs and blinks LEDF
 8003a5e:	f7fe ff65 	bl	800292c <Error_Handler>
	}

	//Retrieve flags
	W25qxx_ReadSector(ext_flash_flags_buffer, FLAGS_SECTOR, FLAGS_OFFSET, NB_OF_FLAGS);
 8003a62:	2305      	movs	r3, #5
 8003a64:	2200      	movs	r2, #0
 8003a66:	2101      	movs	r1, #1
 8003a68:	4808      	ldr	r0, [pc, #32]	; (8003a8c <MRT_external_flash_Init+0x60>)
 8003a6a:	f001 f84f 	bl	8004b0c <W25qxx_ReadSector>

	//Retrieve RTC time (last recorded)
	W25qxx_ReadSector(ext_flash_time_buffer, RTC_SECTOR, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 8003a6e:	2304      	movs	r3, #4
 8003a70:	2200      	movs	r2, #0
 8003a72:	2102      	movs	r1, #2
 8003a74:	4806      	ldr	r0, [pc, #24]	; (8003a90 <MRT_external_flash_Init+0x64>)
 8003a76:	f001 f849 	bl	8004b0c <W25qxx_ReadSector>

	//Assign each value read to their variable
	MRT_updateExternalFlashValues();
 8003a7a:	f000 f843 	bl	8003b04 <MRT_updateExternalFlashValues>
}
 8003a7e:	bf00      	nop
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	20005f4c 	.word	0x20005f4c
 8003a8c:	20005f58 	.word	0x20005f58
 8003a90:	20005f54 	.word	0x20005f54

08003a94 <MRT_updateExternalFlashBuffers>:


void MRT_updateExternalFlashBuffers(void){
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	607b      	str	r3, [r7, #4]
 8003a9e:	e00c      	b.n	8003aba <MRT_updateExternalFlashBuffers+0x26>
		ext_flash_flags_buffer[i] = *ext_flash_flags[i];
 8003aa0:	4a14      	ldr	r2, [pc, #80]	; (8003af4 <MRT_updateExternalFlashBuffers+0x60>)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aa8:	7819      	ldrb	r1, [r3, #0]
 8003aaa:	4a13      	ldr	r2, [pc, #76]	; (8003af8 <MRT_updateExternalFlashBuffers+0x64>)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4413      	add	r3, r2
 8003ab0:	460a      	mov	r2, r1
 8003ab2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	607b      	str	r3, [r7, #4]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2b04      	cmp	r3, #4
 8003abe:	ddef      	ble.n	8003aa0 <MRT_updateExternalFlashBuffers+0xc>
	}
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	603b      	str	r3, [r7, #0]
 8003ac4:	e00c      	b.n	8003ae0 <MRT_updateExternalFlashBuffers+0x4c>
		ext_flash_time_buffer[i] = *ext_flash_time[i];
 8003ac6:	4a0d      	ldr	r2, [pc, #52]	; (8003afc <MRT_updateExternalFlashBuffers+0x68>)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ace:	7819      	ldrb	r1, [r3, #0]
 8003ad0:	4a0b      	ldr	r2, [pc, #44]	; (8003b00 <MRT_updateExternalFlashBuffers+0x6c>)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	460a      	mov	r2, r1
 8003ad8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	3301      	adds	r3, #1
 8003ade:	603b      	str	r3, [r7, #0]
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	2b03      	cmp	r3, #3
 8003ae4:	ddef      	ble.n	8003ac6 <MRT_updateExternalFlashBuffers+0x32>
	}
}
 8003ae6:	bf00      	nop
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr
 8003af4:	2000008c 	.word	0x2000008c
 8003af8:	20005f58 	.word	0x20005f58
 8003afc:	200000a0 	.word	0x200000a0
 8003b00:	20005f54 	.word	0x20005f54

08003b04 <MRT_updateExternalFlashValues>:


void MRT_updateExternalFlashValues(void){
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	607b      	str	r3, [r7, #4]
 8003b0e:	e00b      	b.n	8003b28 <MRT_updateExternalFlashValues+0x24>
		*ext_flash_flags[i] = ext_flash_flags_buffer[i];
 8003b10:	4a13      	ldr	r2, [pc, #76]	; (8003b60 <MRT_updateExternalFlashValues+0x5c>)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b18:	4912      	ldr	r1, [pc, #72]	; (8003b64 <MRT_updateExternalFlashValues+0x60>)
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	440a      	add	r2, r1
 8003b1e:	7812      	ldrb	r2, [r2, #0]
 8003b20:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	3301      	adds	r3, #1
 8003b26:	607b      	str	r3, [r7, #4]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b04      	cmp	r3, #4
 8003b2c:	ddf0      	ble.n	8003b10 <MRT_updateExternalFlashValues+0xc>
	}
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 8003b2e:	2300      	movs	r3, #0
 8003b30:	603b      	str	r3, [r7, #0]
 8003b32:	e00b      	b.n	8003b4c <MRT_updateExternalFlashValues+0x48>
		*ext_flash_time[i] = ext_flash_time_buffer[i];
 8003b34:	4a0c      	ldr	r2, [pc, #48]	; (8003b68 <MRT_updateExternalFlashValues+0x64>)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b3c:	490b      	ldr	r1, [pc, #44]	; (8003b6c <MRT_updateExternalFlashValues+0x68>)
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	440a      	add	r2, r1
 8003b42:	7812      	ldrb	r2, [r2, #0]
 8003b44:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	3301      	adds	r3, #1
 8003b4a:	603b      	str	r3, [r7, #0]
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	2b03      	cmp	r3, #3
 8003b50:	ddf0      	ble.n	8003b34 <MRT_updateExternalFlashValues+0x30>
	}
}
 8003b52:	bf00      	nop
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr
 8003b60:	2000008c 	.word	0x2000008c
 8003b64:	20005f58 	.word	0x20005f58
 8003b68:	200000a0 	.word	0x200000a0
 8003b6c:	20005f54 	.word	0x20005f54

08003b70 <MRT_clearExternalFlash>:


void MRT_clearExternalFlash(void){
 8003b70:	b580      	push	{r7, lr}
 8003b72:	af00      	add	r7, sp, #0
	//Clear flags
	W25qxx_EraseSector(FLAGS_SECTOR);
 8003b74:	2001      	movs	r0, #1
 8003b76:	f000 fd41 	bl	80045fc <W25qxx_EraseSector>
	W25qxx_WriteSector(FLAGS_NULL_BUFFER, FLAGS_SECTOR, FLAGS_OFFSET, NB_OF_FLAGS);
 8003b7a:	2305      	movs	r3, #5
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	2101      	movs	r1, #1
 8003b80:	4806      	ldr	r0, [pc, #24]	; (8003b9c <MRT_clearExternalFlash+0x2c>)
 8003b82:	f000 fe85 	bl	8004890 <W25qxx_WriteSector>

	//Clear RTC time (last recorded)
	W25qxx_EraseSector(RTC_SECTOR);
 8003b86:	2002      	movs	r0, #2
 8003b88:	f000 fd38 	bl	80045fc <W25qxx_EraseSector>
	W25qxx_WriteSector(RTC_TIME_NULL_BUFFER, RTC_SECTOR, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 8003b8c:	2304      	movs	r3, #4
 8003b8e:	2200      	movs	r2, #0
 8003b90:	2102      	movs	r1, #2
 8003b92:	4803      	ldr	r0, [pc, #12]	; (8003ba0 <MRT_clearExternalFlash+0x30>)
 8003b94:	f000 fe7c 	bl	8004890 <W25qxx_WriteSector>
}
 8003b98:	bf00      	nop
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	20005f4c 	.word	0x20005f4c
 8003ba0:	20000384 	.word	0x20000384

08003ba4 <MRT_saveFlagValue>:
//Public functions

/*
 * Save a flag value (value updated outside the function)
 */
void MRT_saveFlagValue(rtc_backup_reg state){
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	4603      	mov	r3, r0
 8003bac:	71fb      	strb	r3, [r7, #7]
	//Write new flags to flash memory
	MRT_updateExternalFlashBuffers();
 8003bae:	f7ff ff71 	bl	8003a94 <MRT_updateExternalFlashBuffers>
	W25qxx_EraseSector(FLAGS_SECTOR);
 8003bb2:	2001      	movs	r0, #1
 8003bb4:	f000 fd22 	bl	80045fc <W25qxx_EraseSector>
	W25qxx_WriteSector(ext_flash_flags_buffer, FLAGS_SECTOR, FLAGS_OFFSET, NB_OF_FLAGS);
 8003bb8:	2305      	movs	r3, #5
 8003bba:	2200      	movs	r2, #0
 8003bbc:	2101      	movs	r1, #1
 8003bbe:	4808      	ldr	r0, [pc, #32]	; (8003be0 <MRT_saveFlagValue+0x3c>)
 8003bc0:	f000 fe66 	bl	8004890 <W25qxx_WriteSector>

	//Write new flag to RTC backup register
	MRT_RTC_setBackupReg(state, *rtc_bckp_regs[state]);
 8003bc4:	79fb      	ldrb	r3, [r7, #7]
 8003bc6:	4a07      	ldr	r2, [pc, #28]	; (8003be4 <MRT_saveFlagValue+0x40>)
 8003bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	79fb      	ldrb	r3, [r7, #7]
 8003bd0:	4611      	mov	r1, r2
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7ff f97c 	bl	8002ed0 <MRT_RTC_setBackupReg>
}
 8003bd8:	bf00      	nop
 8003bda:	3708      	adds	r7, #8
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	20005f58 	.word	0x20005f58
 8003be4:	20000000 	.word	0x20000000

08003be8 <MRT_checkFlagsValues>:


/*
 * Check for memory issues
 */
uint8_t MRT_checkFlagsValues(rtc_backup_reg val_index, uint32_t max_val){
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	4603      	mov	r3, r0
 8003bf0:	6039      	str	r1, [r7, #0]
 8003bf2:	71fb      	strb	r3, [r7, #7]

	uint8_t ret = true;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	73fb      	strb	r3, [r7, #15]

	//Check for a random value (unsigned int so can't be negative)
	if (*rtc_bckp_regs[val_index] > max_val){
 8003bf8:	79fb      	ldrb	r3, [r7, #7]
 8003bfa:	4a2e      	ldr	r2, [pc, #184]	; (8003cb4 <MRT_checkFlagsValues+0xcc>)
 8003bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	683a      	ldr	r2, [r7, #0]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d207      	bcs.n	8003c18 <MRT_checkFlagsValues+0x30>
		*rtc_bckp_regs[val_index] = 0;
 8003c08:	79fb      	ldrb	r3, [r7, #7]
 8003c0a:	4a2a      	ldr	r2, [pc, #168]	; (8003cb4 <MRT_checkFlagsValues+0xcc>)
 8003c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c10:	2200      	movs	r2, #0
 8003c12:	601a      	str	r2, [r3, #0]
		ret = false;
 8003c14:	2300      	movs	r3, #0
 8003c16:	73fb      	strb	r3, [r7, #15]
	}
	if (*ext_flash_flags[val_index] > max_val){
 8003c18:	79fb      	ldrb	r3, [r7, #7]
 8003c1a:	4a27      	ldr	r2, [pc, #156]	; (8003cb8 <MRT_checkFlagsValues+0xd0>)
 8003c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	461a      	mov	r2, r3
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d207      	bcs.n	8003c3a <MRT_checkFlagsValues+0x52>
		*ext_flash_flags[val_index] = 0;
 8003c2a:	79fb      	ldrb	r3, [r7, #7]
 8003c2c:	4a22      	ldr	r2, [pc, #136]	; (8003cb8 <MRT_checkFlagsValues+0xd0>)
 8003c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c32:	2200      	movs	r2, #0
 8003c34:	701a      	strb	r2, [r3, #0]
		ret = false;
 8003c36:	2300      	movs	r3, #0
 8003c38:	73fb      	strb	r3, [r7, #15]
	}

	if (*rtc_bckp_regs[val_index] != *ext_flash_flags[val_index]){
 8003c3a:	79fb      	ldrb	r3, [r7, #7]
 8003c3c:	4a1d      	ldr	r2, [pc, #116]	; (8003cb4 <MRT_checkFlagsValues+0xcc>)
 8003c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	79fa      	ldrb	r2, [r7, #7]
 8003c46:	491c      	ldr	r1, [pc, #112]	; (8003cb8 <MRT_checkFlagsValues+0xd0>)
 8003c48:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003c4c:	7812      	ldrb	r2, [r2, #0]
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d028      	beq.n	8003ca4 <MRT_checkFlagsValues+0xbc>
		*rtc_bckp_regs[val_index] = MAX(*rtc_bckp_regs[val_index], *ext_flash_flags[val_index]);
 8003c52:	79fb      	ldrb	r3, [r7, #7]
 8003c54:	4a18      	ldr	r2, [pc, #96]	; (8003cb8 <MRT_checkFlagsValues+0xd0>)
 8003c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	79fb      	ldrb	r3, [r7, #7]
 8003c60:	4a14      	ldr	r2, [pc, #80]	; (8003cb4 <MRT_checkFlagsValues+0xcc>)
 8003c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	79fb      	ldrb	r3, [r7, #7]
 8003c6a:	4912      	ldr	r1, [pc, #72]	; (8003cb4 <MRT_checkFlagsValues+0xcc>)
 8003c6c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c70:	4282      	cmp	r2, r0
 8003c72:	bf38      	it	cc
 8003c74:	4602      	movcc	r2, r0
 8003c76:	601a      	str	r2, [r3, #0]
		*ext_flash_flags[val_index] = MAX(*rtc_bckp_regs[val_index], *ext_flash_flags[val_index]);
 8003c78:	79fb      	ldrb	r3, [r7, #7]
 8003c7a:	4a0f      	ldr	r2, [pc, #60]	; (8003cb8 <MRT_checkFlagsValues+0xd0>)
 8003c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	4619      	mov	r1, r3
 8003c84:	79fb      	ldrb	r3, [r7, #7]
 8003c86:	4a0b      	ldr	r2, [pc, #44]	; (8003cb4 <MRT_checkFlagsValues+0xcc>)
 8003c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4299      	cmp	r1, r3
 8003c90:	bf38      	it	cc
 8003c92:	4619      	movcc	r1, r3
 8003c94:	79fb      	ldrb	r3, [r7, #7]
 8003c96:	4a08      	ldr	r2, [pc, #32]	; (8003cb8 <MRT_checkFlagsValues+0xd0>)
 8003c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c9c:	b2ca      	uxtb	r2, r1
 8003c9e:	701a      	strb	r2, [r3, #0]
		ret = false;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8003ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3714      	adds	r7, #20
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	20000000 	.word	0x20000000
 8003cb8:	2000008c 	.word	0x2000008c

08003cbc <MRT_saveTotalTime>:
//Public functions

/*
 * Update every time values in memory
 */
void MRT_saveTotalTime(void){
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0

	//Update variables
	MRT_updateTimeValues();
 8003cc0:	f000 f890 	bl	8003de4 <MRT_updateTimeValues>

	//Write new RTC time to external flash
	MRT_updateExternalFlashBuffers();
 8003cc4:	f7ff fee6 	bl	8003a94 <MRT_updateExternalFlashBuffers>
	W25qxx_EraseSector(RTC_SECTOR);
 8003cc8:	2002      	movs	r0, #2
 8003cca:	f000 fc97 	bl	80045fc <W25qxx_EraseSector>
	W25qxx_WriteSector(ext_flash_time_buffer, RTC_SECTOR, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 8003cce:	2304      	movs	r3, #4
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	2102      	movs	r1, #2
 8003cd4:	480e      	ldr	r0, [pc, #56]	; (8003d10 <MRT_saveTotalTime+0x54>)
 8003cd6:	f000 fddb 	bl	8004890 <W25qxx_WriteSector>

	//Write new RTC time to backup registers
	MRT_RTC_setBackupReg(RTC_HOUR, rtc_bckp_reg_hour);
 8003cda:	4b0e      	ldr	r3, [pc, #56]	; (8003d14 <MRT_saveTotalTime+0x58>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4619      	mov	r1, r3
 8003ce0:	2005      	movs	r0, #5
 8003ce2:	f7ff f8f5 	bl	8002ed0 <MRT_RTC_setBackupReg>
	MRT_RTC_setBackupReg(RTC_MINUTE, rtc_bckp_reg_min);
 8003ce6:	4b0c      	ldr	r3, [pc, #48]	; (8003d18 <MRT_saveTotalTime+0x5c>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4619      	mov	r1, r3
 8003cec:	2006      	movs	r0, #6
 8003cee:	f7ff f8ef 	bl	8002ed0 <MRT_RTC_setBackupReg>
	MRT_RTC_setBackupReg(RTC_SECOND, rtc_bckp_reg_sec);
 8003cf2:	4b0a      	ldr	r3, [pc, #40]	; (8003d1c <MRT_saveTotalTime+0x60>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	2007      	movs	r0, #7
 8003cfa:	f7ff f8e9 	bl	8002ed0 <MRT_RTC_setBackupReg>
	MRT_RTC_setBackupReg(RTC_SUBSEC, rtc_bckp_reg_subsec);
 8003cfe:	4b08      	ldr	r3, [pc, #32]	; (8003d20 <MRT_saveTotalTime+0x64>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4619      	mov	r1, r3
 8003d04:	2008      	movs	r0, #8
 8003d06:	f7ff f8e3 	bl	8002ed0 <MRT_RTC_setBackupReg>
}
 8003d0a:	bf00      	nop
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	20005f54 	.word	0x20005f54
 8003d14:	2000033c 	.word	0x2000033c
 8003d18:	20000340 	.word	0x20000340
 8003d1c:	20000344 	.word	0x20000344
 8003d20:	20000348 	.word	0x20000348

08003d24 <MRT_resetTotalTime>:


void MRT_resetTotalTime(void){
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0

	//Clear RTC time (last recorded) in external flash
	W25qxx_EraseSector(RTC_SECTOR);
 8003d2a:	2002      	movs	r0, #2
 8003d2c:	f000 fc66 	bl	80045fc <W25qxx_EraseSector>
	W25qxx_WriteSector(RTC_TIME_NULL_BUFFER, RTC_SECTOR, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 8003d30:	2304      	movs	r3, #4
 8003d32:	2200      	movs	r2, #0
 8003d34:	2102      	movs	r1, #2
 8003d36:	4817      	ldr	r0, [pc, #92]	; (8003d94 <MRT_resetTotalTime+0x70>)
 8003d38:	f000 fdaa 	bl	8004890 <W25qxx_WriteSector>

	//Clear RTC time in backup registers
	MRT_RTC_setBackupReg(RTC_HOUR, 0);
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	2005      	movs	r0, #5
 8003d40:	f7ff f8c6 	bl	8002ed0 <MRT_RTC_setBackupReg>
	MRT_RTC_setBackupReg(RTC_MINUTE, 0);
 8003d44:	2100      	movs	r1, #0
 8003d46:	2006      	movs	r0, #6
 8003d48:	f7ff f8c2 	bl	8002ed0 <MRT_RTC_setBackupReg>
	MRT_RTC_setBackupReg(RTC_SECOND, 0);
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	2007      	movs	r0, #7
 8003d50:	f7ff f8be 	bl	8002ed0 <MRT_RTC_setBackupReg>
	MRT_RTC_setBackupReg(RTC_SUBSEC, 0);
 8003d54:	2100      	movs	r1, #0
 8003d56:	2008      	movs	r0, #8
 8003d58:	f7ff f8ba 	bl	8002ed0 <MRT_RTC_setBackupReg>

	//Update variables (to 0)
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	607b      	str	r3, [r7, #4]
 8003d60:	e00f      	b.n	8003d82 <MRT_resetTotalTime+0x5e>
	  *ext_flash_time[i] = 0x0;
 8003d62:	4a0d      	ldr	r2, [pc, #52]	; (8003d98 <MRT_resetTotalTime+0x74>)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	701a      	strb	r2, [r3, #0]
	  *rtc_bckp_regs[i + NB_OF_FLAGS] = 0x0;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	3305      	adds	r3, #5
 8003d72:	4a0a      	ldr	r2, [pc, #40]	; (8003d9c <MRT_resetTotalTime+0x78>)
 8003d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	3301      	adds	r3, #1
 8003d80:	607b      	str	r3, [r7, #4]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b03      	cmp	r3, #3
 8003d86:	ddec      	ble.n	8003d62 <MRT_resetTotalTime+0x3e>
	}
}
 8003d88:	bf00      	nop
 8003d8a:	bf00      	nop
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	20000384 	.word	0x20000384
 8003d98:	200000a0 	.word	0x200000a0
 8003d9c:	20000000 	.word	0x20000000

08003da0 <MRT_saveTimeValue>:
//Private functions

/*
 * Save an RTC value (value updated outside the function)
 */
void MRT_saveTimeValue(rtc_backup_reg state){
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	4603      	mov	r3, r0
 8003da8:	71fb      	strb	r3, [r7, #7]

	//Write new RTC time to flash memory
	MRT_updateExternalFlashBuffers();
 8003daa:	f7ff fe73 	bl	8003a94 <MRT_updateExternalFlashBuffers>
	W25qxx_EraseSector(RTC_SECTOR);
 8003dae:	2002      	movs	r0, #2
 8003db0:	f000 fc24 	bl	80045fc <W25qxx_EraseSector>
	W25qxx_WriteSector(ext_flash_time_buffer, RTC_SECTOR, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 8003db4:	2304      	movs	r3, #4
 8003db6:	2200      	movs	r2, #0
 8003db8:	2102      	movs	r1, #2
 8003dba:	4808      	ldr	r0, [pc, #32]	; (8003ddc <MRT_saveTimeValue+0x3c>)
 8003dbc:	f000 fd68 	bl	8004890 <W25qxx_WriteSector>

	//Write new RTC time to backup registers
	MRT_RTC_setBackupReg(state, *rtc_bckp_regs[state]);
 8003dc0:	79fb      	ldrb	r3, [r7, #7]
 8003dc2:	4a07      	ldr	r2, [pc, #28]	; (8003de0 <MRT_saveTimeValue+0x40>)
 8003dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	79fb      	ldrb	r3, [r7, #7]
 8003dcc:	4611      	mov	r1, r2
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7ff f87e 	bl	8002ed0 <MRT_RTC_setBackupReg>
}
 8003dd4:	bf00      	nop
 8003dd6:	3708      	adds	r7, #8
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	20005f54 	.word	0x20005f54
 8003de0:	20000000 	.word	0x20000000

08003de4 <MRT_updateTimeValues>:


/*
 * Update all time values
 */
void MRT_updateTimeValues(void){
 8003de4:	b480      	push	{r7}
 8003de6:	af00      	add	r7, sp, #0
	//External Flash
	ext_flash_hour = prev_hour;
 8003de8:	4b13      	ldr	r3, [pc, #76]	; (8003e38 <MRT_updateTimeValues+0x54>)
 8003dea:	781a      	ldrb	r2, [r3, #0]
 8003dec:	4b13      	ldr	r3, [pc, #76]	; (8003e3c <MRT_updateTimeValues+0x58>)
 8003dee:	701a      	strb	r2, [r3, #0]
	ext_flash_min = prev_min;
 8003df0:	4b13      	ldr	r3, [pc, #76]	; (8003e40 <MRT_updateTimeValues+0x5c>)
 8003df2:	781a      	ldrb	r2, [r3, #0]
 8003df4:	4b13      	ldr	r3, [pc, #76]	; (8003e44 <MRT_updateTimeValues+0x60>)
 8003df6:	701a      	strb	r2, [r3, #0]
	ext_flash_sec = prev_sec;
 8003df8:	4b13      	ldr	r3, [pc, #76]	; (8003e48 <MRT_updateTimeValues+0x64>)
 8003dfa:	781a      	ldrb	r2, [r3, #0]
 8003dfc:	4b13      	ldr	r3, [pc, #76]	; (8003e4c <MRT_updateTimeValues+0x68>)
 8003dfe:	701a      	strb	r2, [r3, #0]
	ext_flash_subsec = prev_subsec;
 8003e00:	4b13      	ldr	r3, [pc, #76]	; (8003e50 <MRT_updateTimeValues+0x6c>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a13      	ldr	r2, [pc, #76]	; (8003e54 <MRT_updateTimeValues+0x70>)
 8003e06:	6013      	str	r3, [r2, #0]

	//RTC backup registers
	rtc_bckp_reg_hour = prev_hour;
 8003e08:	4b0b      	ldr	r3, [pc, #44]	; (8003e38 <MRT_updateTimeValues+0x54>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	4b12      	ldr	r3, [pc, #72]	; (8003e58 <MRT_updateTimeValues+0x74>)
 8003e10:	601a      	str	r2, [r3, #0]
	rtc_bckp_reg_min = prev_min;
 8003e12:	4b0b      	ldr	r3, [pc, #44]	; (8003e40 <MRT_updateTimeValues+0x5c>)
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	461a      	mov	r2, r3
 8003e18:	4b10      	ldr	r3, [pc, #64]	; (8003e5c <MRT_updateTimeValues+0x78>)
 8003e1a:	601a      	str	r2, [r3, #0]
	rtc_bckp_reg_sec = prev_sec;
 8003e1c:	4b0a      	ldr	r3, [pc, #40]	; (8003e48 <MRT_updateTimeValues+0x64>)
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	461a      	mov	r2, r3
 8003e22:	4b0f      	ldr	r3, [pc, #60]	; (8003e60 <MRT_updateTimeValues+0x7c>)
 8003e24:	601a      	str	r2, [r3, #0]
	rtc_bckp_reg_subsec = prev_subsec;
 8003e26:	4b0a      	ldr	r3, [pc, #40]	; (8003e50 <MRT_updateTimeValues+0x6c>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a0e      	ldr	r2, [pc, #56]	; (8003e64 <MRT_updateTimeValues+0x80>)
 8003e2c:	6013      	str	r3, [r2, #0]
}
 8003e2e:	bf00      	nop
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr
 8003e38:	2000038d 	.word	0x2000038d
 8003e3c:	2000037b 	.word	0x2000037b
 8003e40:	2000038e 	.word	0x2000038e
 8003e44:	2000037c 	.word	0x2000037c
 8003e48:	2000038f 	.word	0x2000038f
 8003e4c:	2000037d 	.word	0x2000037d
 8003e50:	20000390 	.word	0x20000390
 8003e54:	20000380 	.word	0x20000380
 8003e58:	2000033c 	.word	0x2000033c
 8003e5c:	20000340 	.word	0x20000340
 8003e60:	20000344 	.word	0x20000344
 8003e64:	20000348 	.word	0x20000348

08003e68 <MRT_checkTimeValues>:


/*
 * Check for memory issues
 */
uint8_t MRT_checkTimeValues(rtc_backup_reg val_index, uint32_t max_val){
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	4603      	mov	r3, r0
 8003e70:	6039      	str	r1, [r7, #0]
 8003e72:	71fb      	strb	r3, [r7, #7]

	uint8_t ret = true;
 8003e74:	2301      	movs	r3, #1
 8003e76:	73fb      	strb	r3, [r7, #15]

	//Check for a random value (unsigned int so can't be negative)
	if (*rtc_bckp_regs[val_index] > max_val){
 8003e78:	79fb      	ldrb	r3, [r7, #7]
 8003e7a:	4a31      	ldr	r2, [pc, #196]	; (8003f40 <MRT_checkTimeValues+0xd8>)
 8003e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d207      	bcs.n	8003e98 <MRT_checkTimeValues+0x30>
		*rtc_bckp_regs[val_index] = 0;
 8003e88:	79fb      	ldrb	r3, [r7, #7]
 8003e8a:	4a2d      	ldr	r2, [pc, #180]	; (8003f40 <MRT_checkTimeValues+0xd8>)
 8003e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e90:	2200      	movs	r2, #0
 8003e92:	601a      	str	r2, [r3, #0]
		ret = false;
 8003e94:	2300      	movs	r3, #0
 8003e96:	73fb      	strb	r3, [r7, #15]
	}
	if (*ext_flash_time[val_index - NB_OF_FLAGS] > max_val){
 8003e98:	79fb      	ldrb	r3, [r7, #7]
 8003e9a:	3b05      	subs	r3, #5
 8003e9c:	4a29      	ldr	r2, [pc, #164]	; (8003f44 <MRT_checkTimeValues+0xdc>)
 8003e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d208      	bcs.n	8003ebe <MRT_checkTimeValues+0x56>
		*ext_flash_time[val_index - NB_OF_FLAGS] = 0;
 8003eac:	79fb      	ldrb	r3, [r7, #7]
 8003eae:	3b05      	subs	r3, #5
 8003eb0:	4a24      	ldr	r2, [pc, #144]	; (8003f44 <MRT_checkTimeValues+0xdc>)
 8003eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	701a      	strb	r2, [r3, #0]
		ret = false;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	73fb      	strb	r3, [r7, #15]
	}

	if (*rtc_bckp_regs[val_index] != *ext_flash_time[val_index - NB_OF_FLAGS]){
 8003ebe:	79fb      	ldrb	r3, [r7, #7]
 8003ec0:	4a1f      	ldr	r2, [pc, #124]	; (8003f40 <MRT_checkTimeValues+0xd8>)
 8003ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	79fa      	ldrb	r2, [r7, #7]
 8003eca:	3a05      	subs	r2, #5
 8003ecc:	491d      	ldr	r1, [pc, #116]	; (8003f44 <MRT_checkTimeValues+0xdc>)
 8003ece:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003ed2:	7812      	ldrb	r2, [r2, #0]
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d02b      	beq.n	8003f30 <MRT_checkTimeValues+0xc8>
		*rtc_bckp_regs[val_index] = MAX(*rtc_bckp_regs[val_index], *ext_flash_time[val_index - NB_OF_FLAGS]);
 8003ed8:	79fb      	ldrb	r3, [r7, #7]
 8003eda:	3b05      	subs	r3, #5
 8003edc:	4a19      	ldr	r2, [pc, #100]	; (8003f44 <MRT_checkTimeValues+0xdc>)
 8003ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	79fb      	ldrb	r3, [r7, #7]
 8003ee8:	4a15      	ldr	r2, [pc, #84]	; (8003f40 <MRT_checkTimeValues+0xd8>)
 8003eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	79fb      	ldrb	r3, [r7, #7]
 8003ef2:	4913      	ldr	r1, [pc, #76]	; (8003f40 <MRT_checkTimeValues+0xd8>)
 8003ef4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ef8:	4282      	cmp	r2, r0
 8003efa:	bf38      	it	cc
 8003efc:	4602      	movcc	r2, r0
 8003efe:	601a      	str	r2, [r3, #0]
		*ext_flash_time[val_index - NB_OF_FLAGS] = MAX(*rtc_bckp_regs[val_index], *ext_flash_time[val_index - NB_OF_FLAGS]);
 8003f00:	79fb      	ldrb	r3, [r7, #7]
 8003f02:	3b05      	subs	r3, #5
 8003f04:	4a0f      	ldr	r2, [pc, #60]	; (8003f44 <MRT_checkTimeValues+0xdc>)
 8003f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	79fb      	ldrb	r3, [r7, #7]
 8003f10:	4a0b      	ldr	r2, [pc, #44]	; (8003f40 <MRT_checkTimeValues+0xd8>)
 8003f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4299      	cmp	r1, r3
 8003f1a:	bf38      	it	cc
 8003f1c:	4619      	movcc	r1, r3
 8003f1e:	79fb      	ldrb	r3, [r7, #7]
 8003f20:	3b05      	subs	r3, #5
 8003f22:	4a08      	ldr	r2, [pc, #32]	; (8003f44 <MRT_checkTimeValues+0xdc>)
 8003f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f28:	b2ca      	uxtb	r2, r1
 8003f2a:	701a      	strb	r2, [r3, #0]
		ret = false;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8003f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3714      	adds	r7, #20
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	20000000 	.word	0x20000000
 8003f44:	200000a0 	.word	0x200000a0

08003f48 <MRT_MEMORY_Init>:
//**************************************************//
//MISC


//Public
void MRT_MEMORY_Init(void){
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	af00      	add	r7, sp, #0

	//External flash
	MRT_external_flash_Init();
 8003f4c:	f7ff fd6e 	bl	8003a2c <MRT_external_flash_Init>

	//Backup registers
	MRT_RTC_backup_regs_Init();
 8003f50:	f7fe ff10 	bl	8002d74 <MRT_RTC_backup_regs_Init>

	//Get the previous flags and rtc time from memory
	MRT_stateRestoration();
 8003f54:	f000 f802 	bl	8003f5c <MRT_stateRestoration>
			else {
			  Error_Handler();
			}
		#endif
	#endif
}
 8003f58:	bf00      	nop
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <MRT_stateRestoration>:


//Private

//Get the flags values and RTC time
void MRT_stateRestoration(void){
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0

	//Check for a wakeup
	MRT_checkWakeUp();
 8003f60:	f000 f8ca 	bl	80040f8 <MRT_checkWakeUp>

	//If RTC detected a wake up, update the flash memory and the backup registers
	if (wu_flag == 1){
 8003f64:	4b51      	ldr	r3, [pc, #324]	; (80040ac <MRT_stateRestoration+0x150>)
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d111      	bne.n	8003f90 <MRT_stateRestoration+0x34>

		//Update values
		ext_flash_wu += 1;
 8003f6c:	4b50      	ldr	r3, [pc, #320]	; (80040b0 <MRT_stateRestoration+0x154>)
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	3301      	adds	r3, #1
 8003f72:	b2da      	uxtb	r2, r3
 8003f74:	4b4e      	ldr	r3, [pc, #312]	; (80040b0 <MRT_stateRestoration+0x154>)
 8003f76:	701a      	strb	r2, [r3, #0]
		rtc_bckp_reg_wu += 1;
 8003f78:	4b4e      	ldr	r3, [pc, #312]	; (80040b4 <MRT_stateRestoration+0x158>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	4a4d      	ldr	r2, [pc, #308]	; (80040b4 <MRT_stateRestoration+0x158>)
 8003f80:	6013      	str	r3, [r2, #0]

		//Check for memory issues¸
		MRT_checkFlagsValues(FC_STATE_WU, 2);
 8003f82:	2102      	movs	r1, #2
 8003f84:	2001      	movs	r0, #1
 8003f86:	f7ff fe2f 	bl	8003be8 <MRT_checkFlagsValues>

		//Update memory
		MRT_saveFlagValue(FC_STATE_WU);
 8003f8a:	2001      	movs	r0, #1
 8003f8c:	f7ff fe0a 	bl	8003ba4 <MRT_saveFlagValue>
	}
	//Update the wu_flag value
	wu_flag = rtc_bckp_reg_wu;
 8003f90:	4b48      	ldr	r3, [pc, #288]	; (80040b4 <MRT_stateRestoration+0x158>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	b2da      	uxtb	r2, r3
 8003f96:	4b45      	ldr	r3, [pc, #276]	; (80040ac <MRT_stateRestoration+0x150>)
 8003f98:	701a      	strb	r2, [r3, #0]


	//Check flags values

	//Reset flag
	if(MRT_checkFlagsValues(FC_STATE_RESET, 1) == false)	MRT_saveFlagValue(FC_STATE_RESET);
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	2000      	movs	r0, #0
 8003f9e:	f7ff fe23 	bl	8003be8 <MRT_checkFlagsValues>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d102      	bne.n	8003fae <MRT_stateRestoration+0x52>
 8003fa8:	2000      	movs	r0, #0
 8003faa:	f7ff fdfb 	bl	8003ba4 <MRT_saveFlagValue>
	reset_flag = rtc_bckp_reg_reset;
 8003fae:	4b42      	ldr	r3, [pc, #264]	; (80040b8 <MRT_stateRestoration+0x15c>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	b2da      	uxtb	r2, r3
 8003fb4:	4b41      	ldr	r3, [pc, #260]	; (80040bc <MRT_stateRestoration+0x160>)
 8003fb6:	701a      	strb	r2, [r3, #0]

	//Wake up flag (TODO double check??)
	if(MRT_checkFlagsValues(FC_STATE_WU, 1) == false)	MRT_saveFlagValue(FC_STATE_WU);
 8003fb8:	2101      	movs	r1, #1
 8003fba:	2001      	movs	r0, #1
 8003fbc:	f7ff fe14 	bl	8003be8 <MRT_checkFlagsValues>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d102      	bne.n	8003fcc <MRT_stateRestoration+0x70>
 8003fc6:	2001      	movs	r0, #1
 8003fc8:	f7ff fdec 	bl	8003ba4 <MRT_saveFlagValue>
	wu_flag = rtc_bckp_reg_wu;
 8003fcc:	4b39      	ldr	r3, [pc, #228]	; (80040b4 <MRT_stateRestoration+0x158>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	b2da      	uxtb	r2, r3
 8003fd2:	4b36      	ldr	r3, [pc, #216]	; (80040ac <MRT_stateRestoration+0x150>)
 8003fd4:	701a      	strb	r2, [r3, #0]

	//IWDG flag
	if(MRT_checkFlagsValues(FC_STATE_IWDG, 1) == false)	MRT_saveFlagValue(FC_STATE_IWDG);
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	2002      	movs	r0, #2
 8003fda:	f7ff fe05 	bl	8003be8 <MRT_checkFlagsValues>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d102      	bne.n	8003fea <MRT_stateRestoration+0x8e>
 8003fe4:	2002      	movs	r0, #2
 8003fe6:	f7ff fddd 	bl	8003ba4 <MRT_saveFlagValue>
	iwdg_flag = rtc_bckp_reg_iwdg;
 8003fea:	4b35      	ldr	r3, [pc, #212]	; (80040c0 <MRT_stateRestoration+0x164>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	b2da      	uxtb	r2, r3
 8003ff0:	4b34      	ldr	r3, [pc, #208]	; (80040c4 <MRT_stateRestoration+0x168>)
 8003ff2:	701a      	strb	r2, [r3, #0]

	//Apogee flag
	if(MRT_checkFlagsValues(FC_STATE_APOGEE, 1) == false)	MRT_saveFlagValue(FC_STATE_APOGEE);
 8003ff4:	2101      	movs	r1, #1
 8003ff6:	2003      	movs	r0, #3
 8003ff8:	f7ff fdf6 	bl	8003be8 <MRT_checkFlagsValues>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d102      	bne.n	8004008 <MRT_stateRestoration+0xac>
 8004002:	2003      	movs	r0, #3
 8004004:	f7ff fdce 	bl	8003ba4 <MRT_saveFlagValue>
	apogee_flag = rtc_bckp_reg_apogee;
 8004008:	4b2f      	ldr	r3, [pc, #188]	; (80040c8 <MRT_stateRestoration+0x16c>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	b2da      	uxtb	r2, r3
 800400e:	4b2f      	ldr	r3, [pc, #188]	; (80040cc <MRT_stateRestoration+0x170>)
 8004010:	701a      	strb	r2, [r3, #0]

	//Ejection state flag
	if(MRT_checkFlagsValues(FC_STATE_FLIGHT, 4) == false)	MRT_saveFlagValue(FC_STATE_FLIGHT);
 8004012:	2104      	movs	r1, #4
 8004014:	2004      	movs	r0, #4
 8004016:	f7ff fde7 	bl	8003be8 <MRT_checkFlagsValues>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d102      	bne.n	8004026 <MRT_stateRestoration+0xca>
 8004020:	2004      	movs	r0, #4
 8004022:	f7ff fdbf 	bl	8003ba4 <MRT_saveFlagValue>
	ejection_stage_flag = rtc_bckp_reg_ejection_stage;
 8004026:	4b2a      	ldr	r3, [pc, #168]	; (80040d0 <MRT_stateRestoration+0x174>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	b2da      	uxtb	r2, r3
 800402c:	4b29      	ldr	r3, [pc, #164]	; (80040d4 <MRT_stateRestoration+0x178>)
 800402e:	701a      	strb	r2, [r3, #0]


	//Check RTC time values
	//Hours
	if(MRT_checkTimeValues(RTC_HOUR, 23) == false)	MRT_saveTimeValue(RTC_HOUR);
 8004030:	2117      	movs	r1, #23
 8004032:	2005      	movs	r0, #5
 8004034:	f7ff ff18 	bl	8003e68 <MRT_checkTimeValues>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d102      	bne.n	8004044 <MRT_stateRestoration+0xe8>
 800403e:	2005      	movs	r0, #5
 8004040:	f7ff feae 	bl	8003da0 <MRT_saveTimeValue>
	prev_hour = rtc_bckp_reg_hour;
 8004044:	4b24      	ldr	r3, [pc, #144]	; (80040d8 <MRT_stateRestoration+0x17c>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	b2da      	uxtb	r2, r3
 800404a:	4b24      	ldr	r3, [pc, #144]	; (80040dc <MRT_stateRestoration+0x180>)
 800404c:	701a      	strb	r2, [r3, #0]

	//Minutes
	if(MRT_checkTimeValues(RTC_MINUTE, 59) == false)	MRT_saveTimeValue(RTC_MINUTE);
 800404e:	213b      	movs	r1, #59	; 0x3b
 8004050:	2006      	movs	r0, #6
 8004052:	f7ff ff09 	bl	8003e68 <MRT_checkTimeValues>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d102      	bne.n	8004062 <MRT_stateRestoration+0x106>
 800405c:	2006      	movs	r0, #6
 800405e:	f7ff fe9f 	bl	8003da0 <MRT_saveTimeValue>
	prev_min = rtc_bckp_reg_min;
 8004062:	4b1f      	ldr	r3, [pc, #124]	; (80040e0 <MRT_stateRestoration+0x184>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	b2da      	uxtb	r2, r3
 8004068:	4b1e      	ldr	r3, [pc, #120]	; (80040e4 <MRT_stateRestoration+0x188>)
 800406a:	701a      	strb	r2, [r3, #0]

	//Seconds
	if(MRT_checkTimeValues(RTC_SECOND, 59) == false)	MRT_saveTimeValue(RTC_SECOND);
 800406c:	213b      	movs	r1, #59	; 0x3b
 800406e:	2007      	movs	r0, #7
 8004070:	f7ff fefa 	bl	8003e68 <MRT_checkTimeValues>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d102      	bne.n	8004080 <MRT_stateRestoration+0x124>
 800407a:	2007      	movs	r0, #7
 800407c:	f7ff fe90 	bl	8003da0 <MRT_saveTimeValue>
	prev_sec = rtc_bckp_reg_sec;
 8004080:	4b19      	ldr	r3, [pc, #100]	; (80040e8 <MRT_stateRestoration+0x18c>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	b2da      	uxtb	r2, r3
 8004086:	4b19      	ldr	r3, [pc, #100]	; (80040ec <MRT_stateRestoration+0x190>)
 8004088:	701a      	strb	r2, [r3, #0]

	//Sub-Seconds
	if(MRT_checkTimeValues(RTC_SUBSEC, 999) == false)	MRT_saveTimeValue(RTC_SUBSEC);
 800408a:	f240 31e7 	movw	r1, #999	; 0x3e7
 800408e:	2008      	movs	r0, #8
 8004090:	f7ff feea 	bl	8003e68 <MRT_checkTimeValues>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d102      	bne.n	80040a0 <MRT_stateRestoration+0x144>
 800409a:	2008      	movs	r0, #8
 800409c:	f7ff fe80 	bl	8003da0 <MRT_saveTimeValue>
	prev_subsec = rtc_bckp_reg_subsec;
 80040a0:	4b13      	ldr	r3, [pc, #76]	; (80040f0 <MRT_stateRestoration+0x194>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a13      	ldr	r2, [pc, #76]	; (80040f4 <MRT_stateRestoration+0x198>)
 80040a6:	6013      	str	r3, [r2, #0]
}
 80040a8:	bf00      	nop
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	20000389 	.word	0x20000389
 80040b0:	20000377 	.word	0x20000377
 80040b4:	2000032c 	.word	0x2000032c
 80040b8:	20000328 	.word	0x20000328
 80040bc:	20000388 	.word	0x20000388
 80040c0:	20000330 	.word	0x20000330
 80040c4:	2000038a 	.word	0x2000038a
 80040c8:	20000334 	.word	0x20000334
 80040cc:	2000038b 	.word	0x2000038b
 80040d0:	20000338 	.word	0x20000338
 80040d4:	2000038c 	.word	0x2000038c
 80040d8:	2000033c 	.word	0x2000033c
 80040dc:	2000038d 	.word	0x2000038d
 80040e0:	20000340 	.word	0x20000340
 80040e4:	2000038e 	.word	0x2000038e
 80040e8:	20000344 	.word	0x20000344
 80040ec:	2000038f 	.word	0x2000038f
 80040f0:	20000348 	.word	0x20000348
 80040f4:	20000390 	.word	0x20000390

080040f8 <MRT_checkWakeUp>:


/*
 * Check if FC is back from wakeup
 */
void MRT_checkWakeUp(void){
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
	//If WU flag set, wake up procedure
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 80040fc:	4b0e      	ldr	r3, [pc, #56]	; (8004138 <MRT_checkWakeUp+0x40>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f003 0302 	and.w	r3, r3, #2
 8004104:	2b02      	cmp	r3, #2
 8004106:	d112      	bne.n	800412e <MRT_checkWakeUp+0x36>
	{

		wu_flag = 1;
 8004108:	4b0c      	ldr	r3, [pc, #48]	; (800413c <MRT_checkWakeUp+0x44>)
 800410a:	2201      	movs	r2, #1
 800410c:	701a      	strb	r2, [r3, #0]

		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 800410e:	4b0a      	ldr	r3, [pc, #40]	; (8004138 <MRT_checkWakeUp+0x40>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a09      	ldr	r2, [pc, #36]	; (8004138 <MRT_checkWakeUp+0x40>)
 8004114:	f043 0308 	orr.w	r3, r3, #8
 8004118:	6013      	str	r3, [r2, #0]

		println("Wakeup from STANDBY MODE");
 800411a:	4809      	ldr	r0, [pc, #36]	; (8004140 <MRT_checkWakeUp+0x48>)
 800411c:	f7fc ff86 	bl	800102c <println>

		/** Disable the WWAKEUP PIN **/
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 8004120:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004124:	f006 fe56 	bl	800add4 <HAL_PWR_DisableWakeUpPin>

		/** Deactivate the RTC wakeup  **/
		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8004128:	4806      	ldr	r0, [pc, #24]	; (8004144 <MRT_checkWakeUp+0x4c>)
 800412a:	f008 faab 	bl	800c684 <HAL_RTCEx_DeactivateWakeUpTimer>
	}

	MRT_clear_alarms_flags();
 800412e:	f7fe fd01 	bl	8002b34 <MRT_clear_alarms_flags>
}
 8004132:	bf00      	nop
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	40007000 	.word	0x40007000
 800413c:	20000389 	.word	0x20000389
 8004140:	08018598 	.word	0x08018598
 8004144:	20005c00 	.word	0x20005c00

08004148 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af02      	add	r7, sp, #8
 800414e:	4603      	mov	r3, r0
 8004150:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8004152:	f107 020f 	add.w	r2, r7, #15
 8004156:	1df9      	adds	r1, r7, #7
 8004158:	2364      	movs	r3, #100	; 0x64
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	2301      	movs	r3, #1
 800415e:	4804      	ldr	r0, [pc, #16]	; (8004170 <W25qxx_Spi+0x28>)
 8004160:	f008 fdfa 	bl	800cd58 <HAL_SPI_TransmitReceive>
	return ret;
 8004164:	7bfb      	ldrb	r3, [r7, #15]
}
 8004166:	4618      	mov	r0, r3
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	20005c78 	.word	0x20005c78

08004174 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 800417a:	2300      	movs	r3, #0
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	2300      	movs	r3, #0
 8004180:	60bb      	str	r3, [r7, #8]
 8004182:	2300      	movs	r3, #0
 8004184:	607b      	str	r3, [r7, #4]
 8004186:	2300      	movs	r3, #0
 8004188:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800418a:	2200      	movs	r2, #0
 800418c:	2140      	movs	r1, #64	; 0x40
 800418e:	4813      	ldr	r0, [pc, #76]	; (80041dc <W25qxx_ReadID+0x68>)
 8004190:	f005 fd6c 	bl	8009c6c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8004194:	209f      	movs	r0, #159	; 0x9f
 8004196:	f7ff ffd7 	bl	8004148 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800419a:	20a5      	movs	r0, #165	; 0xa5
 800419c:	f7ff ffd4 	bl	8004148 <W25qxx_Spi>
 80041a0:	4603      	mov	r3, r0
 80041a2:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80041a4:	20a5      	movs	r0, #165	; 0xa5
 80041a6:	f7ff ffcf 	bl	8004148 <W25qxx_Spi>
 80041aa:	4603      	mov	r3, r0
 80041ac:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80041ae:	20a5      	movs	r0, #165	; 0xa5
 80041b0:	f7ff ffca 	bl	8004148 <W25qxx_Spi>
 80041b4:	4603      	mov	r3, r0
 80041b6:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80041b8:	2201      	movs	r2, #1
 80041ba:	2140      	movs	r1, #64	; 0x40
 80041bc:	4807      	ldr	r0, [pc, #28]	; (80041dc <W25qxx_ReadID+0x68>)
 80041be:	f005 fd55 	bl	8009c6c <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	041a      	lsls	r2, r3, #16
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	021b      	lsls	r3, r3, #8
 80041ca:	4313      	orrs	r3, r2
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	60fb      	str	r3, [r7, #12]
	return Temp;
 80041d2:	68fb      	ldr	r3, [r7, #12]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3710      	adds	r7, #16
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	40020c00 	.word	0x40020c00

080041e0 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 80041e0:	b590      	push	{r4, r7, lr}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80041e6:	2200      	movs	r2, #0
 80041e8:	2140      	movs	r1, #64	; 0x40
 80041ea:	4816      	ldr	r0, [pc, #88]	; (8004244 <W25qxx_ReadUniqID+0x64>)
 80041ec:	f005 fd3e 	bl	8009c6c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 80041f0:	204b      	movs	r0, #75	; 0x4b
 80041f2:	f7ff ffa9 	bl	8004148 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 80041f6:	2300      	movs	r3, #0
 80041f8:	71fb      	strb	r3, [r7, #7]
 80041fa:	e005      	b.n	8004208 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80041fc:	20a5      	movs	r0, #165	; 0xa5
 80041fe:	f7ff ffa3 	bl	8004148 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8004202:	79fb      	ldrb	r3, [r7, #7]
 8004204:	3301      	adds	r3, #1
 8004206:	71fb      	strb	r3, [r7, #7]
 8004208:	79fb      	ldrb	r3, [r7, #7]
 800420a:	2b03      	cmp	r3, #3
 800420c:	d9f6      	bls.n	80041fc <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 800420e:	2300      	movs	r3, #0
 8004210:	71bb      	strb	r3, [r7, #6]
 8004212:	e00b      	b.n	800422c <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004214:	79bc      	ldrb	r4, [r7, #6]
 8004216:	20a5      	movs	r0, #165	; 0xa5
 8004218:	f7ff ff96 	bl	8004148 <W25qxx_Spi>
 800421c:	4603      	mov	r3, r0
 800421e:	461a      	mov	r2, r3
 8004220:	4b09      	ldr	r3, [pc, #36]	; (8004248 <W25qxx_ReadUniqID+0x68>)
 8004222:	4423      	add	r3, r4
 8004224:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8004226:	79bb      	ldrb	r3, [r7, #6]
 8004228:	3301      	adds	r3, #1
 800422a:	71bb      	strb	r3, [r7, #6]
 800422c:	79bb      	ldrb	r3, [r7, #6]
 800422e:	2b07      	cmp	r3, #7
 8004230:	d9f0      	bls.n	8004214 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004232:	2201      	movs	r2, #1
 8004234:	2140      	movs	r1, #64	; 0x40
 8004236:	4803      	ldr	r0, [pc, #12]	; (8004244 <W25qxx_ReadUniqID+0x64>)
 8004238:	f005 fd18 	bl	8009c6c <HAL_GPIO_WritePin>
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	bd90      	pop	{r4, r7, pc}
 8004244:	40020c00 	.word	0x40020c00
 8004248:	20005f60 	.word	0x20005f60

0800424c <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004250:	2200      	movs	r2, #0
 8004252:	2140      	movs	r1, #64	; 0x40
 8004254:	4807      	ldr	r0, [pc, #28]	; (8004274 <W25qxx_WriteEnable+0x28>)
 8004256:	f005 fd09 	bl	8009c6c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 800425a:	2006      	movs	r0, #6
 800425c:	f7ff ff74 	bl	8004148 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004260:	2201      	movs	r2, #1
 8004262:	2140      	movs	r1, #64	; 0x40
 8004264:	4803      	ldr	r0, [pc, #12]	; (8004274 <W25qxx_WriteEnable+0x28>)
 8004266:	f005 fd01 	bl	8009c6c <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 800426a:	2001      	movs	r0, #1
 800426c:	f00a ff2c 	bl	800f0c8 <osDelay>
}
 8004270:	bf00      	nop
 8004272:	bd80      	pop	{r7, pc}
 8004274:	40020c00 	.word	0x40020c00

08004278 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	4603      	mov	r3, r0
 8004280:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8004282:	2300      	movs	r3, #0
 8004284:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004286:	2200      	movs	r2, #0
 8004288:	2140      	movs	r1, #64	; 0x40
 800428a:	481c      	ldr	r0, [pc, #112]	; (80042fc <W25qxx_ReadStatusRegister+0x84>)
 800428c:	f005 fcee 	bl	8009c6c <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8004290:	79fb      	ldrb	r3, [r7, #7]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d10c      	bne.n	80042b0 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8004296:	2005      	movs	r0, #5
 8004298:	f7ff ff56 	bl	8004148 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800429c:	20a5      	movs	r0, #165	; 0xa5
 800429e:	f7ff ff53 	bl	8004148 <W25qxx_Spi>
 80042a2:	4603      	mov	r3, r0
 80042a4:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 80042a6:	4a16      	ldr	r2, [pc, #88]	; (8004300 <W25qxx_ReadStatusRegister+0x88>)
 80042a8:	7bfb      	ldrb	r3, [r7, #15]
 80042aa:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80042ae:	e01b      	b.n	80042e8 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 80042b0:	79fb      	ldrb	r3, [r7, #7]
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d10c      	bne.n	80042d0 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 80042b6:	2035      	movs	r0, #53	; 0x35
 80042b8:	f7ff ff46 	bl	8004148 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80042bc:	20a5      	movs	r0, #165	; 0xa5
 80042be:	f7ff ff43 	bl	8004148 <W25qxx_Spi>
 80042c2:	4603      	mov	r3, r0
 80042c4:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 80042c6:	4a0e      	ldr	r2, [pc, #56]	; (8004300 <W25qxx_ReadStatusRegister+0x88>)
 80042c8:	7bfb      	ldrb	r3, [r7, #15]
 80042ca:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 80042ce:	e00b      	b.n	80042e8 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 80042d0:	2015      	movs	r0, #21
 80042d2:	f7ff ff39 	bl	8004148 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80042d6:	20a5      	movs	r0, #165	; 0xa5
 80042d8:	f7ff ff36 	bl	8004148 <W25qxx_Spi>
 80042dc:	4603      	mov	r3, r0
 80042de:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 80042e0:	4a07      	ldr	r2, [pc, #28]	; (8004300 <W25qxx_ReadStatusRegister+0x88>)
 80042e2:	7bfb      	ldrb	r3, [r7, #15]
 80042e4:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80042e8:	2201      	movs	r2, #1
 80042ea:	2140      	movs	r1, #64	; 0x40
 80042ec:	4803      	ldr	r0, [pc, #12]	; (80042fc <W25qxx_ReadStatusRegister+0x84>)
 80042ee:	f005 fcbd 	bl	8009c6c <HAL_GPIO_WritePin>
	return status;
 80042f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	40020c00 	.word	0x40020c00
 8004300:	20005f60 	.word	0x20005f60

08004304 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8004308:	2001      	movs	r0, #1
 800430a:	f00a fedd 	bl	800f0c8 <osDelay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800430e:	2200      	movs	r2, #0
 8004310:	2140      	movs	r1, #64	; 0x40
 8004312:	480f      	ldr	r0, [pc, #60]	; (8004350 <W25qxx_WaitForWriteEnd+0x4c>)
 8004314:	f005 fcaa 	bl	8009c6c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8004318:	2005      	movs	r0, #5
 800431a:	f7ff ff15 	bl	8004148 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800431e:	20a5      	movs	r0, #165	; 0xa5
 8004320:	f7ff ff12 	bl	8004148 <W25qxx_Spi>
 8004324:	4603      	mov	r3, r0
 8004326:	461a      	mov	r2, r3
 8004328:	4b0a      	ldr	r3, [pc, #40]	; (8004354 <W25qxx_WaitForWriteEnd+0x50>)
 800432a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 800432e:	2001      	movs	r0, #1
 8004330:	f00a feca 	bl	800f0c8 <osDelay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8004334:	4b07      	ldr	r3, [pc, #28]	; (8004354 <W25qxx_WaitForWriteEnd+0x50>)
 8004336:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1ed      	bne.n	800431e <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004342:	2201      	movs	r2, #1
 8004344:	2140      	movs	r1, #64	; 0x40
 8004346:	4802      	ldr	r0, [pc, #8]	; (8004350 <W25qxx_WaitForWriteEnd+0x4c>)
 8004348:	f005 fc90 	bl	8009c6c <HAL_GPIO_WritePin>
}
 800434c:	bf00      	nop
 800434e:	bd80      	pop	{r7, pc}
 8004350:	40020c00 	.word	0x40020c00
 8004354:	20005f60 	.word	0x20005f60

08004358 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 800435e:	4b90      	ldr	r3, [pc, #576]	; (80045a0 <W25qxx_Init+0x248>)
 8004360:	2201      	movs	r2, #1
 8004362:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 8004366:	e002      	b.n	800436e <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8004368:	2001      	movs	r0, #1
 800436a:	f00a fead 	bl	800f0c8 <osDelay>
	while (HAL_GetTick() < 100)
 800436e:	f004 fd65 	bl	8008e3c <HAL_GetTick>
 8004372:	4603      	mov	r3, r0
 8004374:	2b63      	cmp	r3, #99	; 0x63
 8004376:	d9f7      	bls.n	8004368 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004378:	2201      	movs	r2, #1
 800437a:	2140      	movs	r1, #64	; 0x40
 800437c:	4889      	ldr	r0, [pc, #548]	; (80045a4 <W25qxx_Init+0x24c>)
 800437e:	f005 fc75 	bl	8009c6c <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8004382:	2064      	movs	r0, #100	; 0x64
 8004384:	f00a fea0 	bl	800f0c8 <osDelay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
 8004388:	4887      	ldr	r0, [pc, #540]	; (80045a8 <W25qxx_Init+0x250>)
 800438a:	f00f fdb1 	bl	8013ef0 <puts>
#endif
	id = W25qxx_ReadID();
 800438e:	f7ff fef1 	bl	8004174 <W25qxx_ReadID>
 8004392:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
 8004394:	6879      	ldr	r1, [r7, #4]
 8004396:	4885      	ldr	r0, [pc, #532]	; (80045ac <W25qxx_Init+0x254>)
 8004398:	f00f fd24 	bl	8013de4 <iprintf>
#endif
	switch (id & 0x000000FF)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	3b11      	subs	r3, #17
 80043a2:	2b0f      	cmp	r3, #15
 80043a4:	f200 808b 	bhi.w	80044be <W25qxx_Init+0x166>
 80043a8:	a201      	add	r2, pc, #4	; (adr r2, 80043b0 <W25qxx_Init+0x58>)
 80043aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ae:	bf00      	nop
 80043b0:	080044ab 	.word	0x080044ab
 80043b4:	08004497 	.word	0x08004497
 80043b8:	08004483 	.word	0x08004483
 80043bc:	0800446f 	.word	0x0800446f
 80043c0:	0800445b 	.word	0x0800445b
 80043c4:	08004447 	.word	0x08004447
 80043c8:	08004433 	.word	0x08004433
 80043cc:	0800441d 	.word	0x0800441d
 80043d0:	08004407 	.word	0x08004407
 80043d4:	080044bf 	.word	0x080044bf
 80043d8:	080044bf 	.word	0x080044bf
 80043dc:	080044bf 	.word	0x080044bf
 80043e0:	080044bf 	.word	0x080044bf
 80043e4:	080044bf 	.word	0x080044bf
 80043e8:	080044bf 	.word	0x080044bf
 80043ec:	080043f1 	.word	0x080043f1
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 80043f0:	4b6b      	ldr	r3, [pc, #428]	; (80045a0 <W25qxx_Init+0x248>)
 80043f2:	220a      	movs	r2, #10
 80043f4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 80043f6:	4b6a      	ldr	r3, [pc, #424]	; (80045a0 <W25qxx_Init+0x248>)
 80043f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043fc:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
 80043fe:	486c      	ldr	r0, [pc, #432]	; (80045b0 <W25qxx_Init+0x258>)
 8004400:	f00f fd76 	bl	8013ef0 <puts>
#endif
		break;
 8004404:	e064      	b.n	80044d0 <W25qxx_Init+0x178>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8004406:	4b66      	ldr	r3, [pc, #408]	; (80045a0 <W25qxx_Init+0x248>)
 8004408:	2209      	movs	r2, #9
 800440a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 800440c:	4b64      	ldr	r3, [pc, #400]	; (80045a0 <W25qxx_Init+0x248>)
 800440e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004412:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
 8004414:	4867      	ldr	r0, [pc, #412]	; (80045b4 <W25qxx_Init+0x25c>)
 8004416:	f00f fd6b 	bl	8013ef0 <puts>
#endif
		break;
 800441a:	e059      	b.n	80044d0 <W25qxx_Init+0x178>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 800441c:	4b60      	ldr	r3, [pc, #384]	; (80045a0 <W25qxx_Init+0x248>)
 800441e:	2208      	movs	r2, #8
 8004420:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8004422:	4b5f      	ldr	r3, [pc, #380]	; (80045a0 <W25qxx_Init+0x248>)
 8004424:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004428:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
 800442a:	4863      	ldr	r0, [pc, #396]	; (80045b8 <W25qxx_Init+0x260>)
 800442c:	f00f fd60 	bl	8013ef0 <puts>
#endif
		break;
 8004430:	e04e      	b.n	80044d0 <W25qxx_Init+0x178>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8004432:	4b5b      	ldr	r3, [pc, #364]	; (80045a0 <W25qxx_Init+0x248>)
 8004434:	2207      	movs	r2, #7
 8004436:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8004438:	4b59      	ldr	r3, [pc, #356]	; (80045a0 <W25qxx_Init+0x248>)
 800443a:	2280      	movs	r2, #128	; 0x80
 800443c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
 800443e:	485f      	ldr	r0, [pc, #380]	; (80045bc <W25qxx_Init+0x264>)
 8004440:	f00f fd56 	bl	8013ef0 <puts>
#endif
		break;
 8004444:	e044      	b.n	80044d0 <W25qxx_Init+0x178>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8004446:	4b56      	ldr	r3, [pc, #344]	; (80045a0 <W25qxx_Init+0x248>)
 8004448:	2206      	movs	r2, #6
 800444a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 800444c:	4b54      	ldr	r3, [pc, #336]	; (80045a0 <W25qxx_Init+0x248>)
 800444e:	2240      	movs	r2, #64	; 0x40
 8004450:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
 8004452:	485b      	ldr	r0, [pc, #364]	; (80045c0 <W25qxx_Init+0x268>)
 8004454:	f00f fd4c 	bl	8013ef0 <puts>
#endif
		break;
 8004458:	e03a      	b.n	80044d0 <W25qxx_Init+0x178>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 800445a:	4b51      	ldr	r3, [pc, #324]	; (80045a0 <W25qxx_Init+0x248>)
 800445c:	2205      	movs	r2, #5
 800445e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8004460:	4b4f      	ldr	r3, [pc, #316]	; (80045a0 <W25qxx_Init+0x248>)
 8004462:	2220      	movs	r2, #32
 8004464:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
 8004466:	4857      	ldr	r0, [pc, #348]	; (80045c4 <W25qxx_Init+0x26c>)
 8004468:	f00f fd42 	bl	8013ef0 <puts>
#endif
		break;
 800446c:	e030      	b.n	80044d0 <W25qxx_Init+0x178>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 800446e:	4b4c      	ldr	r3, [pc, #304]	; (80045a0 <W25qxx_Init+0x248>)
 8004470:	2204      	movs	r2, #4
 8004472:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8004474:	4b4a      	ldr	r3, [pc, #296]	; (80045a0 <W25qxx_Init+0x248>)
 8004476:	2210      	movs	r2, #16
 8004478:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
 800447a:	4853      	ldr	r0, [pc, #332]	; (80045c8 <W25qxx_Init+0x270>)
 800447c:	f00f fd38 	bl	8013ef0 <puts>
#endif
		break;
 8004480:	e026      	b.n	80044d0 <W25qxx_Init+0x178>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8004482:	4b47      	ldr	r3, [pc, #284]	; (80045a0 <W25qxx_Init+0x248>)
 8004484:	2203      	movs	r2, #3
 8004486:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8004488:	4b45      	ldr	r3, [pc, #276]	; (80045a0 <W25qxx_Init+0x248>)
 800448a:	2208      	movs	r2, #8
 800448c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
 800448e:	484f      	ldr	r0, [pc, #316]	; (80045cc <W25qxx_Init+0x274>)
 8004490:	f00f fd2e 	bl	8013ef0 <puts>
#endif
		break;
 8004494:	e01c      	b.n	80044d0 <W25qxx_Init+0x178>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8004496:	4b42      	ldr	r3, [pc, #264]	; (80045a0 <W25qxx_Init+0x248>)
 8004498:	2202      	movs	r2, #2
 800449a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 800449c:	4b40      	ldr	r3, [pc, #256]	; (80045a0 <W25qxx_Init+0x248>)
 800449e:	2204      	movs	r2, #4
 80044a0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
 80044a2:	484b      	ldr	r0, [pc, #300]	; (80045d0 <W25qxx_Init+0x278>)
 80044a4:	f00f fd24 	bl	8013ef0 <puts>
#endif
		break;
 80044a8:	e012      	b.n	80044d0 <W25qxx_Init+0x178>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 80044aa:	4b3d      	ldr	r3, [pc, #244]	; (80045a0 <W25qxx_Init+0x248>)
 80044ac:	2201      	movs	r2, #1
 80044ae:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 80044b0:	4b3b      	ldr	r3, [pc, #236]	; (80045a0 <W25qxx_Init+0x248>)
 80044b2:	2202      	movs	r2, #2
 80044b4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
 80044b6:	4847      	ldr	r0, [pc, #284]	; (80045d4 <W25qxx_Init+0x27c>)
 80044b8:	f00f fd1a 	bl	8013ef0 <puts>
#endif
		break;
 80044bc:	e008      	b.n	80044d0 <W25qxx_Init+0x178>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
 80044be:	4846      	ldr	r0, [pc, #280]	; (80045d8 <W25qxx_Init+0x280>)
 80044c0:	f00f fd16 	bl	8013ef0 <puts>
#endif
		w25qxx.Lock = 0;
 80044c4:	4b36      	ldr	r3, [pc, #216]	; (80045a0 <W25qxx_Init+0x248>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 80044cc:	2300      	movs	r3, #0
 80044ce:	e063      	b.n	8004598 <W25qxx_Init+0x240>
	}
	w25qxx.PageSize = 256;
 80044d0:	4b33      	ldr	r3, [pc, #204]	; (80045a0 <W25qxx_Init+0x248>)
 80044d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044d6:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 80044d8:	4b31      	ldr	r3, [pc, #196]	; (80045a0 <W25qxx_Init+0x248>)
 80044da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80044de:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 80044e0:	4b2f      	ldr	r3, [pc, #188]	; (80045a0 <W25qxx_Init+0x248>)
 80044e2:	69db      	ldr	r3, [r3, #28]
 80044e4:	011b      	lsls	r3, r3, #4
 80044e6:	4a2e      	ldr	r2, [pc, #184]	; (80045a0 <W25qxx_Init+0x248>)
 80044e8:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 80044ea:	4b2d      	ldr	r3, [pc, #180]	; (80045a0 <W25qxx_Init+0x248>)
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	4a2c      	ldr	r2, [pc, #176]	; (80045a0 <W25qxx_Init+0x248>)
 80044f0:	6912      	ldr	r2, [r2, #16]
 80044f2:	fb02 f303 	mul.w	r3, r2, r3
 80044f6:	4a2a      	ldr	r2, [pc, #168]	; (80045a0 <W25qxx_Init+0x248>)
 80044f8:	8952      	ldrh	r2, [r2, #10]
 80044fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80044fe:	4a28      	ldr	r2, [pc, #160]	; (80045a0 <W25qxx_Init+0x248>)
 8004500:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8004502:	4b27      	ldr	r3, [pc, #156]	; (80045a0 <W25qxx_Init+0x248>)
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	011b      	lsls	r3, r3, #4
 8004508:	4a25      	ldr	r2, [pc, #148]	; (80045a0 <W25qxx_Init+0x248>)
 800450a:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 800450c:	4b24      	ldr	r3, [pc, #144]	; (80045a0 <W25qxx_Init+0x248>)
 800450e:	695b      	ldr	r3, [r3, #20]
 8004510:	4a23      	ldr	r2, [pc, #140]	; (80045a0 <W25qxx_Init+0x248>)
 8004512:	6912      	ldr	r2, [r2, #16]
 8004514:	fb02 f303 	mul.w	r3, r2, r3
 8004518:	0a9b      	lsrs	r3, r3, #10
 800451a:	4a21      	ldr	r2, [pc, #132]	; (80045a0 <W25qxx_Init+0x248>)
 800451c:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 800451e:	f7ff fe5f 	bl	80041e0 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8004522:	2001      	movs	r0, #1
 8004524:	f7ff fea8 	bl	8004278 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8004528:	2002      	movs	r0, #2
 800452a:	f7ff fea5 	bl	8004278 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 800452e:	2003      	movs	r0, #3
 8004530:	f7ff fea2 	bl	8004278 <W25qxx_ReadStatusRegister>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Page Size: %d Bytes\r\n", w25qxx.PageSize);
 8004534:	4b1a      	ldr	r3, [pc, #104]	; (80045a0 <W25qxx_Init+0x248>)
 8004536:	895b      	ldrh	r3, [r3, #10]
 8004538:	4619      	mov	r1, r3
 800453a:	4828      	ldr	r0, [pc, #160]	; (80045dc <W25qxx_Init+0x284>)
 800453c:	f00f fc52 	bl	8013de4 <iprintf>
	printf("w25qxx Page Count: %d\r\n", w25qxx.PageCount);
 8004540:	4b17      	ldr	r3, [pc, #92]	; (80045a0 <W25qxx_Init+0x248>)
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	4619      	mov	r1, r3
 8004546:	4826      	ldr	r0, [pc, #152]	; (80045e0 <W25qxx_Init+0x288>)
 8004548:	f00f fc4c 	bl	8013de4 <iprintf>
	printf("w25qxx Sector Size: %d Bytes\r\n", w25qxx.SectorSize);
 800454c:	4b14      	ldr	r3, [pc, #80]	; (80045a0 <W25qxx_Init+0x248>)
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	4619      	mov	r1, r3
 8004552:	4824      	ldr	r0, [pc, #144]	; (80045e4 <W25qxx_Init+0x28c>)
 8004554:	f00f fc46 	bl	8013de4 <iprintf>
	printf("w25qxx Sector Count: %d\r\n", w25qxx.SectorCount);
 8004558:	4b11      	ldr	r3, [pc, #68]	; (80045a0 <W25qxx_Init+0x248>)
 800455a:	695b      	ldr	r3, [r3, #20]
 800455c:	4619      	mov	r1, r3
 800455e:	4822      	ldr	r0, [pc, #136]	; (80045e8 <W25qxx_Init+0x290>)
 8004560:	f00f fc40 	bl	8013de4 <iprintf>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
 8004564:	4b0e      	ldr	r3, [pc, #56]	; (80045a0 <W25qxx_Init+0x248>)
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	4619      	mov	r1, r3
 800456a:	4820      	ldr	r0, [pc, #128]	; (80045ec <W25qxx_Init+0x294>)
 800456c:	f00f fc3a 	bl	8013de4 <iprintf>
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
 8004570:	4b0b      	ldr	r3, [pc, #44]	; (80045a0 <W25qxx_Init+0x248>)
 8004572:	69db      	ldr	r3, [r3, #28]
 8004574:	4619      	mov	r1, r3
 8004576:	481e      	ldr	r0, [pc, #120]	; (80045f0 <W25qxx_Init+0x298>)
 8004578:	f00f fc34 	bl	8013de4 <iprintf>
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
 800457c:	4b08      	ldr	r3, [pc, #32]	; (80045a0 <W25qxx_Init+0x248>)
 800457e:	6a1b      	ldr	r3, [r3, #32]
 8004580:	4619      	mov	r1, r3
 8004582:	481c      	ldr	r0, [pc, #112]	; (80045f4 <W25qxx_Init+0x29c>)
 8004584:	f00f fc2e 	bl	8013de4 <iprintf>
	printf("w25qxx Init Done\r\n");
 8004588:	481b      	ldr	r0, [pc, #108]	; (80045f8 <W25qxx_Init+0x2a0>)
 800458a:	f00f fcb1 	bl	8013ef0 <puts>
#endif
	w25qxx.Lock = 0;
 800458e:	4b04      	ldr	r3, [pc, #16]	; (80045a0 <W25qxx_Init+0x248>)
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8004596:	2301      	movs	r3, #1
}
 8004598:	4618      	mov	r0, r3
 800459a:	3708      	adds	r7, #8
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	20005f60 	.word	0x20005f60
 80045a4:	40020c00 	.word	0x40020c00
 80045a8:	080185b4 	.word	0x080185b4
 80045ac:	080185cc 	.word	0x080185cc
 80045b0:	080185e0 	.word	0x080185e0
 80045b4:	080185f8 	.word	0x080185f8
 80045b8:	08018610 	.word	0x08018610
 80045bc:	08018628 	.word	0x08018628
 80045c0:	08018640 	.word	0x08018640
 80045c4:	08018658 	.word	0x08018658
 80045c8:	08018670 	.word	0x08018670
 80045cc:	08018688 	.word	0x08018688
 80045d0:	080186a0 	.word	0x080186a0
 80045d4:	080186b8 	.word	0x080186b8
 80045d8:	080186d0 	.word	0x080186d0
 80045dc:	080186e4 	.word	0x080186e4
 80045e0:	08018704 	.word	0x08018704
 80045e4:	0801871c 	.word	0x0801871c
 80045e8:	0801873c 	.word	0x0801873c
 80045ec:	08018758 	.word	0x08018758
 80045f0:	08018778 	.word	0x08018778
 80045f4:	08018794 	.word	0x08018794
 80045f8:	080187b4 	.word	0x080187b4

080045fc <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8004604:	e002      	b.n	800460c <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 8004606:	2001      	movs	r0, #1
 8004608:	f00a fd5e 	bl	800f0c8 <osDelay>
	while (w25qxx.Lock == 1)
 800460c:	4b2d      	ldr	r3, [pc, #180]	; (80046c4 <W25qxx_EraseSector+0xc8>)
 800460e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004612:	2b01      	cmp	r3, #1
 8004614:	d0f7      	beq.n	8004606 <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 8004616:	4b2b      	ldr	r3, [pc, #172]	; (80046c4 <W25qxx_EraseSector+0xc8>)
 8004618:	2201      	movs	r2, #1
 800461a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
 800461e:	f004 fc0d 	bl	8008e3c <HAL_GetTick>
 8004622:	60f8      	str	r0, [r7, #12]
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
 8004624:	6879      	ldr	r1, [r7, #4]
 8004626:	4828      	ldr	r0, [pc, #160]	; (80046c8 <W25qxx_EraseSector+0xcc>)
 8004628:	f00f fbdc 	bl	8013de4 <iprintf>
#endif
	W25qxx_WaitForWriteEnd();
 800462c:	f7ff fe6a 	bl	8004304 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8004630:	4b24      	ldr	r3, [pc, #144]	; (80046c4 <W25qxx_EraseSector+0xc8>)
 8004632:	691a      	ldr	r2, [r3, #16]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	fb02 f303 	mul.w	r3, r2, r3
 800463a:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 800463c:	f7ff fe06 	bl	800424c <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004640:	2200      	movs	r2, #0
 8004642:	2140      	movs	r1, #64	; 0x40
 8004644:	4821      	ldr	r0, [pc, #132]	; (80046cc <W25qxx_EraseSector+0xd0>)
 8004646:	f005 fb11 	bl	8009c6c <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 800464a:	4b1e      	ldr	r3, [pc, #120]	; (80046c4 <W25qxx_EraseSector+0xc8>)
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	2b08      	cmp	r3, #8
 8004650:	d909      	bls.n	8004666 <W25qxx_EraseSector+0x6a>
	{
		W25qxx_Spi(0x21);
 8004652:	2021      	movs	r0, #33	; 0x21
 8004654:	f7ff fd78 	bl	8004148 <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	0e1b      	lsrs	r3, r3, #24
 800465c:	b2db      	uxtb	r3, r3
 800465e:	4618      	mov	r0, r3
 8004660:	f7ff fd72 	bl	8004148 <W25qxx_Spi>
 8004664:	e002      	b.n	800466c <W25qxx_EraseSector+0x70>
	}
	else
	{
		W25qxx_Spi(0x20);
 8004666:	2020      	movs	r0, #32
 8004668:	f7ff fd6e 	bl	8004148 <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	0c1b      	lsrs	r3, r3, #16
 8004670:	b2db      	uxtb	r3, r3
 8004672:	4618      	mov	r0, r3
 8004674:	f7ff fd68 	bl	8004148 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	0a1b      	lsrs	r3, r3, #8
 800467c:	b2db      	uxtb	r3, r3
 800467e:	4618      	mov	r0, r3
 8004680:	f7ff fd62 	bl	8004148 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	b2db      	uxtb	r3, r3
 8004688:	4618      	mov	r0, r3
 800468a:	f7ff fd5d 	bl	8004148 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800468e:	2201      	movs	r2, #1
 8004690:	2140      	movs	r1, #64	; 0x40
 8004692:	480e      	ldr	r0, [pc, #56]	; (80046cc <W25qxx_EraseSector+0xd0>)
 8004694:	f005 faea 	bl	8009c6c <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8004698:	f7ff fe34 	bl	8004304 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
 800469c:	f004 fbce 	bl	8008e3c <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	4619      	mov	r1, r3
 80046a8:	4809      	ldr	r0, [pc, #36]	; (80046d0 <W25qxx_EraseSector+0xd4>)
 80046aa:	f00f fb9b 	bl	8013de4 <iprintf>
#endif
	W25qxx_Delay(1);
 80046ae:	2001      	movs	r0, #1
 80046b0:	f00a fd0a 	bl	800f0c8 <osDelay>
	w25qxx.Lock = 0;
 80046b4:	4b03      	ldr	r3, [pc, #12]	; (80046c4 <W25qxx_EraseSector+0xc8>)
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80046bc:	bf00      	nop
 80046be:	3710      	adds	r7, #16
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	20005f60 	.word	0x20005f60
 80046c8:	0801880c 	.word	0x0801880c
 80046cc:	40020c00 	.word	0x40020c00
 80046d0:	08018830 	.word	0x08018830

080046d4 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 80046dc:	4b07      	ldr	r3, [pc, #28]	; (80046fc <W25qxx_SectorToPage+0x28>)
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	fb02 f303 	mul.w	r3, r2, r3
 80046e6:	4a05      	ldr	r2, [pc, #20]	; (80046fc <W25qxx_SectorToPage+0x28>)
 80046e8:	8952      	ldrh	r2, [r2, #10]
 80046ea:	fbb3 f3f2 	udiv	r3, r3, r2
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	20005f60 	.word	0x20005f60

08004700 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
 800470c:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 800470e:	e002      	b.n	8004716 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8004710:	2001      	movs	r0, #1
 8004712:	f00a fcd9 	bl	800f0c8 <osDelay>
	while (w25qxx.Lock == 1)
 8004716:	4b57      	ldr	r3, [pc, #348]	; (8004874 <W25qxx_WritePage+0x174>)
 8004718:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800471c:	2b01      	cmp	r3, #1
 800471e:	d0f7      	beq.n	8004710 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8004720:	4b54      	ldr	r3, [pc, #336]	; (8004874 <W25qxx_WritePage+0x174>)
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8004728:	683a      	ldr	r2, [r7, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4413      	add	r3, r2
 800472e:	4a51      	ldr	r2, [pc, #324]	; (8004874 <W25qxx_WritePage+0x174>)
 8004730:	8952      	ldrh	r2, [r2, #10]
 8004732:	4293      	cmp	r3, r2
 8004734:	d802      	bhi.n	800473c <W25qxx_WritePage+0x3c>
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d105      	bne.n	8004748 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800473c:	4b4d      	ldr	r3, [pc, #308]	; (8004874 <W25qxx_WritePage+0x174>)
 800473e:	895b      	ldrh	r3, [r3, #10]
 8004740:	461a      	mov	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	4413      	add	r3, r2
 800474e:	4a49      	ldr	r2, [pc, #292]	; (8004874 <W25qxx_WritePage+0x174>)
 8004750:	8952      	ldrh	r2, [r2, #10]
 8004752:	4293      	cmp	r3, r2
 8004754:	d905      	bls.n	8004762 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8004756:	4b47      	ldr	r3, [pc, #284]	; (8004874 <W25qxx_WritePage+0x174>)
 8004758:	895b      	ldrh	r3, [r3, #10]
 800475a:	461a      	mov	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	68b9      	ldr	r1, [r7, #8]
 8004768:	4843      	ldr	r0, [pc, #268]	; (8004878 <W25qxx_WritePage+0x178>)
 800476a:	f00f fb3b 	bl	8013de4 <iprintf>
	W25qxx_Delay(100);
 800476e:	2064      	movs	r0, #100	; 0x64
 8004770:	f00a fcaa 	bl	800f0c8 <osDelay>
	uint32_t StartTime = HAL_GetTick();
 8004774:	f004 fb62 	bl	8008e3c <HAL_GetTick>
 8004778:	6138      	str	r0, [r7, #16]
#endif
	W25qxx_WaitForWriteEnd();
 800477a:	f7ff fdc3 	bl	8004304 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 800477e:	f7ff fd65 	bl	800424c <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004782:	2200      	movs	r2, #0
 8004784:	2140      	movs	r1, #64	; 0x40
 8004786:	483d      	ldr	r0, [pc, #244]	; (800487c <W25qxx_WritePage+0x17c>)
 8004788:	f005 fa70 	bl	8009c6c <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 800478c:	4b39      	ldr	r3, [pc, #228]	; (8004874 <W25qxx_WritePage+0x174>)
 800478e:	895b      	ldrh	r3, [r3, #10]
 8004790:	461a      	mov	r2, r3
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	fb03 f302 	mul.w	r3, r3, r2
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	4413      	add	r3, r2
 800479c:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 800479e:	4b35      	ldr	r3, [pc, #212]	; (8004874 <W25qxx_WritePage+0x174>)
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	2b08      	cmp	r3, #8
 80047a4:	d909      	bls.n	80047ba <W25qxx_WritePage+0xba>
	{
		W25qxx_Spi(0x12);
 80047a6:	2012      	movs	r0, #18
 80047a8:	f7ff fcce 	bl	8004148 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	0e1b      	lsrs	r3, r3, #24
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7ff fcc8 	bl	8004148 <W25qxx_Spi>
 80047b8:	e002      	b.n	80047c0 <W25qxx_WritePage+0xc0>
	}
	else
	{
		W25qxx_Spi(0x02);
 80047ba:	2002      	movs	r0, #2
 80047bc:	f7ff fcc4 	bl	8004148 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	0c1b      	lsrs	r3, r3, #16
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7ff fcbe 	bl	8004148 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	0a1b      	lsrs	r3, r3, #8
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7ff fcb8 	bl	8004148 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	4618      	mov	r0, r3
 80047de:	f7ff fcb3 	bl	8004148 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	2364      	movs	r3, #100	; 0x64
 80047e8:	68f9      	ldr	r1, [r7, #12]
 80047ea:	4825      	ldr	r0, [pc, #148]	; (8004880 <W25qxx_WritePage+0x180>)
 80047ec:	f008 f867 	bl	800c8be <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80047f0:	2201      	movs	r2, #1
 80047f2:	2140      	movs	r1, #64	; 0x40
 80047f4:	4821      	ldr	r0, [pc, #132]	; (800487c <W25qxx_WritePage+0x17c>)
 80047f6:	f005 fa39 	bl	8009c6c <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 80047fa:	f7ff fd83 	bl	8004304 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 80047fe:	f004 fb1d 	bl	8008e3c <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 800480a:	2300      	movs	r3, #0
 800480c:	617b      	str	r3, [r7, #20]
 800480e:	e018      	b.n	8004842 <W25qxx_WritePage+0x142>
	{
		if ((i % 8 == 0) && (i > 2))
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	f003 0307 	and.w	r3, r3, #7
 8004816:	2b00      	cmp	r3, #0
 8004818:	d108      	bne.n	800482c <W25qxx_WritePage+0x12c>
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	2b02      	cmp	r3, #2
 800481e:	d905      	bls.n	800482c <W25qxx_WritePage+0x12c>
		{
			printf("\r\n");
 8004820:	4818      	ldr	r0, [pc, #96]	; (8004884 <W25qxx_WritePage+0x184>)
 8004822:	f00f fb65 	bl	8013ef0 <puts>
			W25qxx_Delay(10);
 8004826:	200a      	movs	r0, #10
 8004828:	f00a fc4e 	bl	800f0c8 <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	4413      	add	r3, r2
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	4619      	mov	r1, r3
 8004836:	4814      	ldr	r0, [pc, #80]	; (8004888 <W25qxx_WritePage+0x188>)
 8004838:	f00f fad4 	bl	8013de4 <iprintf>
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	3301      	adds	r3, #1
 8004840:	617b      	str	r3, [r7, #20]
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	429a      	cmp	r2, r3
 8004848:	d3e2      	bcc.n	8004810 <W25qxx_WritePage+0x110>
	}
	printf("\r\n");
 800484a:	480e      	ldr	r0, [pc, #56]	; (8004884 <W25qxx_WritePage+0x184>)
 800484c:	f00f fb50 	bl	8013ef0 <puts>
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
 8004850:	6939      	ldr	r1, [r7, #16]
 8004852:	480e      	ldr	r0, [pc, #56]	; (800488c <W25qxx_WritePage+0x18c>)
 8004854:	f00f fac6 	bl	8013de4 <iprintf>
	W25qxx_Delay(100);
 8004858:	2064      	movs	r0, #100	; 0x64
 800485a:	f00a fc35 	bl	800f0c8 <osDelay>
#endif
	W25qxx_Delay(1);
 800485e:	2001      	movs	r0, #1
 8004860:	f00a fc32 	bl	800f0c8 <osDelay>
	w25qxx.Lock = 0;
 8004864:	4b03      	ldr	r3, [pc, #12]	; (8004874 <W25qxx_WritePage+0x174>)
 8004866:	2200      	movs	r2, #0
 8004868:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800486c:	bf00      	nop
 800486e:	3718      	adds	r7, #24
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	20005f60 	.word	0x20005f60
 8004878:	08018a94 	.word	0x08018a94
 800487c:	40020c00 	.word	0x40020c00
 8004880:	20005c78 	.word	0x20005c78
 8004884:	08018ad0 	.word	0x08018ad0
 8004888:	08018ad4 	.word	0x08018ad4
 800488c:	08018adc 	.word	0x08018adc

08004890 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b088      	sub	sp, #32
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
 800489c:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 800489e:	4b36      	ldr	r3, [pc, #216]	; (8004978 <W25qxx_WriteSector+0xe8>)
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d802      	bhi.n	80048ae <W25qxx_WriteSector+0x1e>
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d102      	bne.n	80048b4 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 80048ae:	4b32      	ldr	r3, [pc, #200]	; (8004978 <W25qxx_WriteSector+0xe8>)
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	68b9      	ldr	r1, [r7, #8]
 80048ba:	4830      	ldr	r0, [pc, #192]	; (800497c <W25qxx_WriteSector+0xec>)
 80048bc:	f00f fa92 	bl	8013de4 <iprintf>
	W25qxx_Delay(100);
 80048c0:	2064      	movs	r0, #100	; 0x64
 80048c2:	f00a fc01 	bl	800f0c8 <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 80048c6:	4b2c      	ldr	r3, [pc, #176]	; (8004978 <W25qxx_WriteSector+0xe8>)
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d306      	bcc.n	80048de <W25qxx_WriteSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx WriteSector Faild!\r\n");
 80048d0:	482b      	ldr	r0, [pc, #172]	; (8004980 <W25qxx_WriteSector+0xf0>)
 80048d2:	f00f fb0d 	bl	8013ef0 <puts>
		W25qxx_Delay(100);
 80048d6:	2064      	movs	r0, #100	; 0x64
 80048d8:	f00a fbf6 	bl	800f0c8 <osDelay>
#endif
		return;
 80048dc:	e048      	b.n	8004970 <W25qxx_WriteSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	441a      	add	r2, r3
 80048e4:	4b24      	ldr	r3, [pc, #144]	; (8004978 <W25qxx_WriteSector+0xe8>)
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d905      	bls.n	80048f8 <W25qxx_WriteSector+0x68>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 80048ec:	4b22      	ldr	r3, [pc, #136]	; (8004978 <W25qxx_WriteSector+0xe8>)
 80048ee:	691a      	ldr	r2, [r3, #16]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	61bb      	str	r3, [r7, #24]
 80048f6:	e001      	b.n	80048fc <W25qxx_WriteSector+0x6c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 80048fc:	68b8      	ldr	r0, [r7, #8]
 80048fe:	f7ff fee9 	bl	80046d4 <W25qxx_SectorToPage>
 8004902:	4602      	mov	r2, r0
 8004904:	4b1c      	ldr	r3, [pc, #112]	; (8004978 <W25qxx_WriteSector+0xe8>)
 8004906:	895b      	ldrh	r3, [r3, #10]
 8004908:	4619      	mov	r1, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004910:	4413      	add	r3, r2
 8004912:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8004914:	4b18      	ldr	r3, [pc, #96]	; (8004978 <W25qxx_WriteSector+0xe8>)
 8004916:	895b      	ldrh	r3, [r3, #10]
 8004918:	461a      	mov	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004920:	fb02 f201 	mul.w	r2, r2, r1
 8004924:	1a9b      	subs	r3, r3, r2
 8004926:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	697a      	ldr	r2, [r7, #20]
 800492c:	69f9      	ldr	r1, [r7, #28]
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f7ff fee6 	bl	8004700 <W25qxx_WritePage>
		StartPage++;
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	3301      	adds	r3, #1
 8004938:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 800493a:	4b0f      	ldr	r3, [pc, #60]	; (8004978 <W25qxx_WriteSector+0xe8>)
 800493c:	895b      	ldrh	r3, [r3, #10]
 800493e:	461a      	mov	r2, r3
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	1a9a      	subs	r2, r3, r2
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	4413      	add	r3, r2
 8004948:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 800494a:	4b0b      	ldr	r3, [pc, #44]	; (8004978 <W25qxx_WriteSector+0xe8>)
 800494c:	895b      	ldrh	r3, [r3, #10]
 800494e:	461a      	mov	r2, r3
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	4413      	add	r3, r2
 8004958:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 800495a:	2300      	movs	r3, #0
 800495c:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	2b00      	cmp	r3, #0
 8004962:	dce1      	bgt.n	8004928 <W25qxx_WriteSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
 8004964:	4807      	ldr	r0, [pc, #28]	; (8004984 <W25qxx_WriteSector+0xf4>)
 8004966:	f00f fac3 	bl	8013ef0 <puts>
	W25qxx_Delay(100);
 800496a:	2064      	movs	r0, #100	; 0x64
 800496c:	f00a fbac 	bl	800f0c8 <osDelay>
#endif
}
 8004970:	3720      	adds	r7, #32
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	20005f60 	.word	0x20005f60
 800497c:	08018b00 	.word	0x08018b00
 8004980:	08018b40 	.word	0x08018b40
 8004984:	08018b60 	.word	0x08018b60

08004988 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
 8004994:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8004996:	e002      	b.n	800499e <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8004998:	2001      	movs	r0, #1
 800499a:	f00a fb95 	bl	800f0c8 <osDelay>
	while (w25qxx.Lock == 1)
 800499e:	4b54      	ldr	r3, [pc, #336]	; (8004af0 <W25qxx_ReadPage+0x168>)
 80049a0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d0f7      	beq.n	8004998 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 80049a8:	4b51      	ldr	r3, [pc, #324]	; (8004af0 <W25qxx_ReadPage+0x168>)
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 80049b0:	4b4f      	ldr	r3, [pc, #316]	; (8004af0 <W25qxx_ReadPage+0x168>)
 80049b2:	895b      	ldrh	r3, [r3, #10]
 80049b4:	461a      	mov	r2, r3
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d802      	bhi.n	80049c2 <W25qxx_ReadPage+0x3a>
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d102      	bne.n	80049c8 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 80049c2:	4b4b      	ldr	r3, [pc, #300]	; (8004af0 <W25qxx_ReadPage+0x168>)
 80049c4:	895b      	ldrh	r3, [r3, #10]
 80049c6:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	4413      	add	r3, r2
 80049ce:	4a48      	ldr	r2, [pc, #288]	; (8004af0 <W25qxx_ReadPage+0x168>)
 80049d0:	8952      	ldrh	r2, [r2, #10]
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d905      	bls.n	80049e2 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80049d6:	4b46      	ldr	r3, [pc, #280]	; (8004af0 <W25qxx_ReadPage+0x168>)
 80049d8:	895b      	ldrh	r3, [r3, #10]
 80049da:	461a      	mov	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	68b9      	ldr	r1, [r7, #8]
 80049e8:	4842      	ldr	r0, [pc, #264]	; (8004af4 <W25qxx_ReadPage+0x16c>)
 80049ea:	f00f f9fb 	bl	8013de4 <iprintf>
	W25qxx_Delay(100);
 80049ee:	2064      	movs	r0, #100	; 0x64
 80049f0:	f00a fb6a 	bl	800f0c8 <osDelay>
	uint32_t StartTime = HAL_GetTick();
 80049f4:	f004 fa22 	bl	8008e3c <HAL_GetTick>
 80049f8:	6138      	str	r0, [r7, #16]
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 80049fa:	4b3d      	ldr	r3, [pc, #244]	; (8004af0 <W25qxx_ReadPage+0x168>)
 80049fc:	895b      	ldrh	r3, [r3, #10]
 80049fe:	461a      	mov	r2, r3
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	fb03 f302 	mul.w	r3, r3, r2
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	4413      	add	r3, r2
 8004a0a:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	2140      	movs	r1, #64	; 0x40
 8004a10:	4839      	ldr	r0, [pc, #228]	; (8004af8 <W25qxx_ReadPage+0x170>)
 8004a12:	f005 f92b 	bl	8009c6c <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8004a16:	4b36      	ldr	r3, [pc, #216]	; (8004af0 <W25qxx_ReadPage+0x168>)
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	2b08      	cmp	r3, #8
 8004a1c:	d909      	bls.n	8004a32 <W25qxx_ReadPage+0xaa>
	{
		W25qxx_Spi(0x0C);
 8004a1e:	200c      	movs	r0, #12
 8004a20:	f7ff fb92 	bl	8004148 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	0e1b      	lsrs	r3, r3, #24
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7ff fb8c 	bl	8004148 <W25qxx_Spi>
 8004a30:	e002      	b.n	8004a38 <W25qxx_ReadPage+0xb0>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8004a32:	200b      	movs	r0, #11
 8004a34:	f7ff fb88 	bl	8004148 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	0c1b      	lsrs	r3, r3, #16
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7ff fb82 	bl	8004148 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	0a1b      	lsrs	r3, r3, #8
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7ff fb7c 	bl	8004148 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7ff fb77 	bl	8004148 <W25qxx_Spi>
	W25qxx_Spi(0);
 8004a5a:	2000      	movs	r0, #0
 8004a5c:	f7ff fb74 	bl	8004148 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	2364      	movs	r3, #100	; 0x64
 8004a66:	68f9      	ldr	r1, [r7, #12]
 8004a68:	4824      	ldr	r0, [pc, #144]	; (8004afc <W25qxx_ReadPage+0x174>)
 8004a6a:	f008 f864 	bl	800cb36 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004a6e:	2201      	movs	r2, #1
 8004a70:	2140      	movs	r1, #64	; 0x40
 8004a72:	4821      	ldr	r0, [pc, #132]	; (8004af8 <W25qxx_ReadPage+0x170>)
 8004a74:	f005 f8fa 	bl	8009c6c <HAL_GPIO_WritePin>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 8004a78:	f004 f9e0 	bl	8008e3c <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 8004a84:	2300      	movs	r3, #0
 8004a86:	617b      	str	r3, [r7, #20]
 8004a88:	e018      	b.n	8004abc <W25qxx_ReadPage+0x134>
	{
		if ((i % 8 == 0) && (i > 2))
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f003 0307 	and.w	r3, r3, #7
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d108      	bne.n	8004aa6 <W25qxx_ReadPage+0x11e>
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d905      	bls.n	8004aa6 <W25qxx_ReadPage+0x11e>
		{
			printf("\r\n");
 8004a9a:	4819      	ldr	r0, [pc, #100]	; (8004b00 <W25qxx_ReadPage+0x178>)
 8004a9c:	f00f fa28 	bl	8013ef0 <puts>
			W25qxx_Delay(10);
 8004aa0:	200a      	movs	r0, #10
 8004aa2:	f00a fb11 	bl	800f0c8 <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	4413      	add	r3, r2
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	4619      	mov	r1, r3
 8004ab0:	4814      	ldr	r0, [pc, #80]	; (8004b04 <W25qxx_ReadPage+0x17c>)
 8004ab2:	f00f f997 	bl	8013de4 <iprintf>
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	3301      	adds	r3, #1
 8004aba:	617b      	str	r3, [r7, #20]
 8004abc:	697a      	ldr	r2, [r7, #20]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d3e2      	bcc.n	8004a8a <W25qxx_ReadPage+0x102>
	}
	printf("\r\n");
 8004ac4:	480e      	ldr	r0, [pc, #56]	; (8004b00 <W25qxx_ReadPage+0x178>)
 8004ac6:	f00f fa13 	bl	8013ef0 <puts>
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
 8004aca:	6939      	ldr	r1, [r7, #16]
 8004acc:	480e      	ldr	r0, [pc, #56]	; (8004b08 <W25qxx_ReadPage+0x180>)
 8004ace:	f00f f989 	bl	8013de4 <iprintf>
	W25qxx_Delay(100);
 8004ad2:	2064      	movs	r0, #100	; 0x64
 8004ad4:	f00a faf8 	bl	800f0c8 <osDelay>
#endif
	W25qxx_Delay(1);
 8004ad8:	2001      	movs	r0, #1
 8004ada:	f00a faf5 	bl	800f0c8 <osDelay>
	w25qxx.Lock = 0;
 8004ade:	4b04      	ldr	r3, [pc, #16]	; (8004af0 <W25qxx_ReadPage+0x168>)
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004ae6:	bf00      	nop
 8004ae8:	3718      	adds	r7, #24
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	20005f60 	.word	0x20005f60
 8004af4:	08018cac 	.word	0x08018cac
 8004af8:	40020c00 	.word	0x40020c00
 8004afc:	20005c78 	.word	0x20005c78
 8004b00:	08018ad0 	.word	0x08018ad0
 8004b04:	08018ad4 	.word	0x08018ad4
 8004b08:	08018ce8 	.word	0x08018ce8

08004b0c <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b088      	sub	sp, #32
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
 8004b18:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 8004b1a:	4b36      	ldr	r3, [pc, #216]	; (8004bf4 <W25qxx_ReadSector+0xe8>)
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	683a      	ldr	r2, [r7, #0]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d802      	bhi.n	8004b2a <W25qxx_ReadSector+0x1e>
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d102      	bne.n	8004b30 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 8004b2a:	4b32      	ldr	r3, [pc, #200]	; (8004bf4 <W25qxx_ReadSector+0xe8>)
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	68b9      	ldr	r1, [r7, #8]
 8004b36:	4830      	ldr	r0, [pc, #192]	; (8004bf8 <W25qxx_ReadSector+0xec>)
 8004b38:	f00f f954 	bl	8013de4 <iprintf>
	W25qxx_Delay(100);
 8004b3c:	2064      	movs	r0, #100	; 0x64
 8004b3e:	f00a fac3 	bl	800f0c8 <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8004b42:	4b2c      	ldr	r3, [pc, #176]	; (8004bf4 <W25qxx_ReadSector+0xe8>)
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d306      	bcc.n	8004b5a <W25qxx_ReadSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx ReadSector Faild!\r\n");
 8004b4c:	482b      	ldr	r0, [pc, #172]	; (8004bfc <W25qxx_ReadSector+0xf0>)
 8004b4e:	f00f f9cf 	bl	8013ef0 <puts>
		W25qxx_Delay(100);
 8004b52:	2064      	movs	r0, #100	; 0x64
 8004b54:	f00a fab8 	bl	800f0c8 <osDelay>
#endif
		return;
 8004b58:	e048      	b.n	8004bec <W25qxx_ReadSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	441a      	add	r2, r3
 8004b60:	4b24      	ldr	r3, [pc, #144]	; (8004bf4 <W25qxx_ReadSector+0xe8>)
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d905      	bls.n	8004b74 <W25qxx_ReadSector+0x68>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8004b68:	4b22      	ldr	r3, [pc, #136]	; (8004bf4 <W25qxx_ReadSector+0xe8>)
 8004b6a:	691a      	ldr	r2, [r3, #16]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	61bb      	str	r3, [r7, #24]
 8004b72:	e001      	b.n	8004b78 <W25qxx_ReadSector+0x6c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8004b78:	68b8      	ldr	r0, [r7, #8]
 8004b7a:	f7ff fdab 	bl	80046d4 <W25qxx_SectorToPage>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	4b1c      	ldr	r3, [pc, #112]	; (8004bf4 <W25qxx_ReadSector+0xe8>)
 8004b82:	895b      	ldrh	r3, [r3, #10]
 8004b84:	4619      	mov	r1, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b8c:	4413      	add	r3, r2
 8004b8e:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8004b90:	4b18      	ldr	r3, [pc, #96]	; (8004bf4 <W25qxx_ReadSector+0xe8>)
 8004b92:	895b      	ldrh	r3, [r3, #10]
 8004b94:	461a      	mov	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	fbb3 f1f2 	udiv	r1, r3, r2
 8004b9c:	fb02 f201 	mul.w	r2, r2, r1
 8004ba0:	1a9b      	subs	r3, r3, r2
 8004ba2:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	69f9      	ldr	r1, [r7, #28]
 8004baa:	68f8      	ldr	r0, [r7, #12]
 8004bac:	f7ff feec 	bl	8004988 <W25qxx_ReadPage>
		StartPage++;
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 8004bb6:	4b0f      	ldr	r3, [pc, #60]	; (8004bf4 <W25qxx_ReadSector+0xe8>)
 8004bb8:	895b      	ldrh	r3, [r3, #10]
 8004bba:	461a      	mov	r2, r3
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	1a9a      	subs	r2, r3, r2
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8004bc6:	4b0b      	ldr	r3, [pc, #44]	; (8004bf4 <W25qxx_ReadSector+0xe8>)
 8004bc8:	895b      	ldrh	r3, [r3, #10]
 8004bca:	461a      	mov	r2, r3
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	dce1      	bgt.n	8004ba4 <W25qxx_ReadSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
 8004be0:	4807      	ldr	r0, [pc, #28]	; (8004c00 <W25qxx_ReadSector+0xf4>)
 8004be2:	f00f f985 	bl	8013ef0 <puts>
	W25qxx_Delay(100);
 8004be6:	2064      	movs	r0, #100	; 0x64
 8004be8:	f00a fa6e 	bl	800f0c8 <osDelay>
#endif
}
 8004bec:	3720      	adds	r7, #32
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	20005f60 	.word	0x20005f60
 8004bf8:	08018d0c 	.word	0x08018d0c
 8004bfc:	08018d4c 	.word	0x08018d4c
 8004c00:	08018d6c 	.word	0x08018d6c

08004c04 <VR_Power_On>:


#include "main.h"


void VR_Power_On(void) {
 8004c04:	b580      	push	{r7, lr}
 8004c06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_VR_PWR_GPIO_Port, OUT_VR_PWR_Pin, SET);
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c0e:	4804      	ldr	r0, [pc, #16]	; (8004c20 <VR_Power_On+0x1c>)
 8004c10:	f005 f82c 	bl	8009c6c <HAL_GPIO_WritePin>
	// note that runcam needs around 3-5 seconds to fully power on
	HAL_Delay(5000);
 8004c14:	f241 3088 	movw	r0, #5000	; 0x1388
 8004c18:	f004 f91c 	bl	8008e54 <HAL_Delay>
}
 8004c1c:	bf00      	nop
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	40021800 	.word	0x40021800

08004c24 <VR_Power_Off>:

void VR_Power_Off(void) {
 8004c24:	b580      	push	{r7, lr}
 8004c26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_VR_PWR_GPIO_Port, OUT_VR_PWR_Pin, RESET);
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c2e:	4802      	ldr	r0, [pc, #8]	; (8004c38 <VR_Power_Off+0x14>)
 8004c30:	f005 f81c 	bl	8009c6c <HAL_GPIO_WritePin>
}
 8004c34:	bf00      	nop
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	40021800 	.word	0x40021800

08004c3c <VR_Start_Rec>:

void VR_Start_Rec(void) {
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_VR_REC_GPIO_Port, OUT_VR_REC_Pin, SET); // HIGH = start record
 8004c40:	2201      	movs	r2, #1
 8004c42:	2180      	movs	r1, #128	; 0x80
 8004c44:	4802      	ldr	r0, [pc, #8]	; (8004c50 <VR_Start_Rec+0x14>)
 8004c46:	f005 f811 	bl	8009c6c <HAL_GPIO_WritePin>
}
 8004c4a:	bf00      	nop
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	40020c00 	.word	0x40020c00

08004c54 <VR_Stop_Rec>:

void VR_Stop_Rec(void) {
 8004c54:	b580      	push	{r7, lr}
 8004c56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_VR_REC_GPIO_Port, OUT_VR_REC_Pin, RESET); // LOW = stop recording
 8004c58:	2200      	movs	r2, #0
 8004c5a:	2180      	movs	r1, #128	; 0x80
 8004c5c:	4802      	ldr	r0, [pc, #8]	; (8004c68 <VR_Stop_Rec+0x14>)
 8004c5e:	f005 f805 	bl	8009c6c <HAL_GPIO_WritePin>
}
 8004c62:	bf00      	nop
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	40020c00 	.word	0x40020c00

08004c6c <Max31855_Read_Temp>:
uint32_t sign=0;									  // Sign bit
uint8_t DATARX[4];                                    // Raw Data from MAX6675
//uint8_t DATATX = {0xFF, 0xFF, 0xFF, 0xFF};                                    // Raw Data from MAX6675

// ------------------- Functions ----------------
float Max31855_Read_Temp(void) {
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
	int Temp = 0;                                        // Temperature Variable
 8004c72:	2300      	movs	r3, #0
 8004c74:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_RESET); // Low State for SPI Communication
 8004c76:	2200      	movs	r2, #0
 8004c78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004c7c:	483b      	ldr	r0, [pc, #236]	; (8004d6c <Max31855_Read_Temp+0x100>)
 8004c7e:	f004 fff5 	bl	8009c6c <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi4, DATARX, 4, 1000);                // DATA Transfer
 8004c82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c86:	2204      	movs	r2, #4
 8004c88:	4939      	ldr	r1, [pc, #228]	; (8004d70 <Max31855_Read_Temp+0x104>)
 8004c8a:	483a      	ldr	r0, [pc, #232]	; (8004d74 <Max31855_Read_Temp+0x108>)
 8004c8c:	f007 ff53 	bl	800cb36 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_SET); // High State for SPI Communication
 8004c90:	2201      	movs	r2, #1
 8004c92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004c96:	4835      	ldr	r0, [pc, #212]	; (8004d6c <Max31855_Read_Temp+0x100>)
 8004c98:	f004 ffe8 	bl	8009c6c <HAL_GPIO_WritePin>


	uint32_t v = DATARX[3] | (DATARX[2] << 8) | (DATARX[1] << 16) | (DATARX[0] << 24);
 8004c9c:	4b34      	ldr	r3, [pc, #208]	; (8004d70 <Max31855_Read_Temp+0x104>)
 8004c9e:	78db      	ldrb	r3, [r3, #3]
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	4b33      	ldr	r3, [pc, #204]	; (8004d70 <Max31855_Read_Temp+0x104>)
 8004ca4:	789b      	ldrb	r3, [r3, #2]
 8004ca6:	021b      	lsls	r3, r3, #8
 8004ca8:	431a      	orrs	r2, r3
 8004caa:	4b31      	ldr	r3, [pc, #196]	; (8004d70 <Max31855_Read_Temp+0x104>)
 8004cac:	785b      	ldrb	r3, [r3, #1]
 8004cae:	041b      	lsls	r3, r3, #16
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	4b2f      	ldr	r3, [pc, #188]	; (8004d70 <Max31855_Read_Temp+0x104>)
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	061b      	lsls	r3, r3, #24
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	603b      	str	r3, [r7, #0]

	Error = v & 0x07;								  // Error Detection
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	f003 0307 	and.w	r3, r3, #7
 8004cc4:	b2da      	uxtb	r2, r3
 8004cc6:	4b2c      	ldr	r3, [pc, #176]	; (8004d78 <Max31855_Read_Temp+0x10c>)
 8004cc8:	701a      	strb	r2, [r3, #0]



		sign = (DATARX[0] & (0x80)) >> 7;					// Sign Bit calculation
 8004cca:	4b29      	ldr	r3, [pc, #164]	; (8004d70 <Max31855_Read_Temp+0x104>)
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	09db      	lsrs	r3, r3, #7
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	4b29      	ldr	r3, [pc, #164]	; (8004d7c <Max31855_Read_Temp+0x110>)
 8004cd6:	601a      	str	r2, [r3, #0]

		if (DATARX[3] & 0x07)								 // Returns Error Number
 8004cd8:	4b25      	ldr	r3, [pc, #148]	; (8004d70 <Max31855_Read_Temp+0x104>)
 8004cda:	78db      	ldrb	r3, [r3, #3]
 8004cdc:	f003 0307 	and.w	r3, r3, #7
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d009      	beq.n	8004cf8 <Max31855_Read_Temp+0x8c>
			return (-1 * (DATARX[3] & 0x07));
 8004ce4:	4b22      	ldr	r3, [pc, #136]	; (8004d70 <Max31855_Read_Temp+0x104>)
 8004ce6:	78db      	ldrb	r3, [r3, #3]
 8004ce8:	f003 0307 	and.w	r3, r3, #7
 8004cec:	425b      	negs	r3, r3
 8004cee:	ee07 3a90 	vmov	s15, r3
 8004cf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cf6:	e033      	b.n	8004d60 <Max31855_Read_Temp+0xf4>

		else if (sign == 1) {								// Negative Temperature
 8004cf8:	4b20      	ldr	r3, [pc, #128]	; (8004d7c <Max31855_Read_Temp+0x110>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d11d      	bne.n	8004d3c <Max31855_Read_Temp+0xd0>
			Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 8004d00:	4b1b      	ldr	r3, [pc, #108]	; (8004d70 <Max31855_Read_Temp+0x104>)
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	019b      	lsls	r3, r3, #6
 8004d06:	4a1a      	ldr	r2, [pc, #104]	; (8004d70 <Max31855_Read_Temp+0x104>)
 8004d08:	7852      	ldrb	r2, [r2, #1]
 8004d0a:	0892      	lsrs	r2, r2, #2
 8004d0c:	b2d2      	uxtb	r2, r2
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	607b      	str	r3, [r7, #4]
			Temp &= 0b01111111111111;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d18:	607b      	str	r3, [r7, #4]
			Temp ^= 0b01111111111111;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f483 53ff 	eor.w	r3, r3, #8160	; 0x1fe0
 8004d20:	f083 031f 	eor.w	r3, r3, #31
 8004d24:	607b      	str	r3, [r7, #4]
			return ((float) -Temp / 4);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	425b      	negs	r3, r3
 8004d2a:	ee07 3a90 	vmov	s15, r3
 8004d2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d32:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8004d36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d3a:	e011      	b.n	8004d60 <Max31855_Read_Temp+0xf4>
		}

		else												 // Positive Temperature
		{
			Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 8004d3c:	4b0c      	ldr	r3, [pc, #48]	; (8004d70 <Max31855_Read_Temp+0x104>)
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	019b      	lsls	r3, r3, #6
 8004d42:	4a0b      	ldr	r2, [pc, #44]	; (8004d70 <Max31855_Read_Temp+0x104>)
 8004d44:	7852      	ldrb	r2, [r2, #1]
 8004d46:	0892      	lsrs	r2, r2, #2
 8004d48:	b2d2      	uxtb	r2, r2
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	607b      	str	r3, [r7, #4]
			return ((float) Temp / 4.0);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	ee07 3a90 	vmov	s15, r3
 8004d54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d58:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8004d5c:	eec7 7a26 	vdiv.f32	s15, s14, s13

	// LSB = 0.25 degrees C
	centigrade *= 0.25;
	return centigrade;
	*/
}
 8004d60:	eeb0 0a67 	vmov.f32	s0, s15
 8004d64:	3708      	adds	r7, #8
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	40021000 	.word	0x40021000
 8004d70:	20005f88 	.word	0x20005f88
 8004d74:	20005cd0 	.word	0x20005cd0
 8004d78:	20000394 	.word	0x20000394
 8004d7c:	20000398 	.word	0x20000398

08004d80 <MRT_pollPropulsion>:


//**************************************************//
//PUBLIC FUNCTIONS

void MRT_pollPropulsion(void){
 8004d80:	b580      	push	{r7, lr}
 8004d82:	af00      	add	r7, sp, #0
	MRT_getThermoTemp();
 8004d84:	f000 f806 	bl	8004d94 <MRT_getThermoTemp>
	MRT_getTransducerVoltage();
 8004d88:	f000 f812 	bl	8004db0 <MRT_getTransducerVoltage>
	MRT_getValveStatus();
 8004d8c:	f000 f820 	bl	8004dd0 <MRT_getValveStatus>
}
 8004d90:	bf00      	nop
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <MRT_getThermoTemp>:

void MRT_getThermoTemp(void){
 8004d94:	b580      	push	{r7, lr}
 8004d96:	af00      	add	r7, sp, #0
	thermocouple_temperature = Max31855_Read_Temp();
 8004d98:	f7ff ff68 	bl	8004c6c <Max31855_Read_Temp>
 8004d9c:	eef0 7a40 	vmov.f32	s15, s0
 8004da0:	4b02      	ldr	r3, [pc, #8]	; (8004dac <MRT_getThermoTemp+0x18>)
 8004da2:	edc3 7a00 	vstr	s15, [r3]
}
 8004da6:	bf00      	nop
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	20005fc0 	.word	0x20005fc0

08004db0 <MRT_getTransducerVoltage>:

void MRT_getTransducerVoltage(void){
 8004db0:	b580      	push	{r7, lr}
 8004db2:	af00      	add	r7, sp, #0
	transducer_voltage = MRT_prop_poll_pressure_transducer(&TRANSDUCER_ADC);
 8004db4:	4804      	ldr	r0, [pc, #16]	; (8004dc8 <MRT_getTransducerVoltage+0x18>)
 8004db6:	f000 f85f 	bl	8004e78 <MRT_prop_poll_pressure_transducer>
 8004dba:	eef0 7a40 	vmov.f32	s15, s0
 8004dbe:	4b03      	ldr	r3, [pc, #12]	; (8004dcc <MRT_getTransducerVoltage+0x1c>)
 8004dc0:	edc3 7a00 	vstr	s15, [r3]
}
 8004dc4:	bf00      	nop
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	20005ae4 	.word	0x20005ae4
 8004dcc:	20005fc4 	.word	0x20005fc4

08004dd0 <MRT_getValveStatus>:

void MRT_getValveStatus(void){
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	af00      	add	r7, sp, #0
	valve_status = HAL_GPIO_ReadPin(IN_Prop_ActuatedVent_Feedback_GPIO_Port,IN_Prop_ActuatedVent_Feedback_Pin);
 8004dd4:	2102      	movs	r1, #2
 8004dd6:	4804      	ldr	r0, [pc, #16]	; (8004de8 <MRT_getValveStatus+0x18>)
 8004dd8:	f004 ff30 	bl	8009c3c <HAL_GPIO_ReadPin>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	461a      	mov	r2, r3
 8004de0:	4b02      	ldr	r3, [pc, #8]	; (8004dec <MRT_getValveStatus+0x1c>)
 8004de2:	701a      	strb	r2, [r3, #0]
}
 8004de4:	bf00      	nop
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	40020400 	.word	0x40020400
 8004dec:	20005fbe 	.word	0x20005fbe

08004df0 <MRT_formatPropulsion>:

// formats propulsion telemetry string using sprintf
void MRT_formatPropulsion(void) {
 8004df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004df2:	b089      	sub	sp, #36	; 0x24
 8004df4:	af06      	add	r7, sp, #24
	memset(msg_buffer_pr, 0, 50);
 8004df6:	2232      	movs	r2, #50	; 0x32
 8004df8:	2100      	movs	r1, #0
 8004dfa:	4816      	ldr	r0, [pc, #88]	; (8004e54 <MRT_formatPropulsion+0x64>)
 8004dfc:	f00e f8c6 	bl	8012f8c <memset>
	//tank_pressure = convert_prop_tank_pressure(); // convert buffered readings to voltage TODO??
	sprintf(msg_buffer_pr, "P,%03.2f,%03.2f,%d,%02d,%02d,%lu,E\r\n",
 8004e00:	4b15      	ldr	r3, [pc, #84]	; (8004e58 <MRT_formatPropulsion+0x68>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7fb fbbf 	bl	8000588 <__aeabi_f2d>
 8004e0a:	4604      	mov	r4, r0
 8004e0c:	460d      	mov	r5, r1
 8004e0e:	4b13      	ldr	r3, [pc, #76]	; (8004e5c <MRT_formatPropulsion+0x6c>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7fb fbb8 	bl	8000588 <__aeabi_f2d>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	4910      	ldr	r1, [pc, #64]	; (8004e60 <MRT_formatPropulsion+0x70>)
 8004e1e:	7809      	ldrb	r1, [r1, #0]
 8004e20:	4608      	mov	r0, r1
 8004e22:	4910      	ldr	r1, [pc, #64]	; (8004e64 <MRT_formatPropulsion+0x74>)
 8004e24:	7809      	ldrb	r1, [r1, #0]
 8004e26:	460e      	mov	r6, r1
 8004e28:	490f      	ldr	r1, [pc, #60]	; (8004e68 <MRT_formatPropulsion+0x78>)
 8004e2a:	7809      	ldrb	r1, [r1, #0]
 8004e2c:	6079      	str	r1, [r7, #4]
 8004e2e:	490f      	ldr	r1, [pc, #60]	; (8004e6c <MRT_formatPropulsion+0x7c>)
 8004e30:	6809      	ldr	r1, [r1, #0]
 8004e32:	9105      	str	r1, [sp, #20]
 8004e34:	6879      	ldr	r1, [r7, #4]
 8004e36:	9104      	str	r1, [sp, #16]
 8004e38:	9603      	str	r6, [sp, #12]
 8004e3a:	9002      	str	r0, [sp, #8]
 8004e3c:	e9cd 2300 	strd	r2, r3, [sp]
 8004e40:	4622      	mov	r2, r4
 8004e42:	462b      	mov	r3, r5
 8004e44:	490a      	ldr	r1, [pc, #40]	; (8004e70 <MRT_formatPropulsion+0x80>)
 8004e46:	4803      	ldr	r0, [pc, #12]	; (8004e54 <MRT_formatPropulsion+0x64>)
 8004e48:	f00f f91e 	bl	8014088 <siprintf>
			transducer_voltage, thermocouple_temperature, valve_status,
			prev_min, prev_sec, prev_subsec);
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e54:	20005f8c 	.word	0x20005f8c
 8004e58:	20005fc4 	.word	0x20005fc4
 8004e5c:	20005fc0 	.word	0x20005fc0
 8004e60:	20005fbe 	.word	0x20005fbe
 8004e64:	2000038e 	.word	0x2000038e
 8004e68:	2000038f 	.word	0x2000038f
 8004e6c:	20000390 	.word	0x20000390
 8004e70:	08018e00 	.word	0x08018e00
 8004e74:	00000000 	.word	0x00000000

08004e78 <MRT_prop_poll_pressure_transducer>:
//PRIVATE FUNCTIONS

/*
 * Get the pressure transducer voltage (poll ADC)
 */
float MRT_prop_poll_pressure_transducer(ADC_HandleTypeDef* hadc) {
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
	// reading adc
	HAL_ADC_Start(hadc);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f004 f84f 	bl	8008f24 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, 1000);
 8004e86:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f004 f94f 	bl	800912e <HAL_ADC_PollForConversion>
	uint32_t pressure_sensor_raw = HAL_ADC_GetValue(hadc);
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f004 f9d7 	bl	8009244 <HAL_ADC_GetValue>
 8004e96:	60f8      	str	r0, [r7, #12]
	HAL_ADC_Stop(hadc);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f004 f915 	bl	80090c8 <HAL_ADC_Stop>

	float voltage = (float) (pressure_sensor_raw / 4095.0) * 3.3; // assuming 12 bits
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f7fb fb50 	bl	8000544 <__aeabi_ui2d>
 8004ea4:	a312      	add	r3, pc, #72	; (adr r3, 8004ef0 <MRT_prop_poll_pressure_transducer+0x78>)
 8004ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eaa:	f7fb fcef 	bl	800088c <__aeabi_ddiv>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	4610      	mov	r0, r2
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	f7fb feb7 	bl	8000c28 <__aeabi_d2f>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7fb fb63 	bl	8000588 <__aeabi_f2d>
 8004ec2:	a30d      	add	r3, pc, #52	; (adr r3, 8004ef8 <MRT_prop_poll_pressure_transducer+0x80>)
 8004ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec8:	f7fb fbb6 	bl	8000638 <__aeabi_dmul>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	460b      	mov	r3, r1
 8004ed0:	4610      	mov	r0, r2
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	f7fb fea8 	bl	8000c28 <__aeabi_d2f>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	60bb      	str	r3, [r7, #8]

	return voltage;
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	ee07 3a90 	vmov	s15, r3
}
 8004ee2:	eeb0 0a67 	vmov.f32	s0, s15
 8004ee6:	3710      	adds	r7, #16
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	f3af 8000 	nop.w
 8004ef0:	00000000 	.word	0x00000000
 8004ef4:	40affe00 	.word	0x40affe00
 8004ef8:	66666666 	.word	0x66666666
 8004efc:	400a6666 	.word	0x400a6666

08004f00 <MRT_LSM6DSR_Constructor>:


//**************************************************//
/*****LSM6DSR STATIC FUNCTIONS*****/

void MRT_LSM6DSR_Constructor(){
 8004f00:	b598      	push	{r3, r4, r7, lr}
 8004f02:	af00      	add	r7, sp, #0
	if (lsm6dsr==NULL){
 8004f04:	4b08      	ldr	r3, [pc, #32]	; (8004f28 <MRT_LSM6DSR_Constructor+0x28>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d10b      	bne.n	8004f24 <MRT_LSM6DSR_Constructor+0x24>
		lsm6dsr = new LSM6DSR(&LSM6DSR_I2C, (uint8_t) MRT_LSM6DSR_ADDRESS);
 8004f0c:	203c      	movs	r0, #60	; 0x3c
 8004f0e:	f00c fef5 	bl	8011cfc <_Znwj>
 8004f12:	4603      	mov	r3, r0
 8004f14:	461c      	mov	r4, r3
 8004f16:	226a      	movs	r2, #106	; 0x6a
 8004f18:	4904      	ldr	r1, [pc, #16]	; (8004f2c <MRT_LSM6DSR_Constructor+0x2c>)
 8004f1a:	4620      	mov	r0, r4
 8004f1c:	f000 f990 	bl	8005240 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh>
 8004f20:	4b01      	ldr	r3, [pc, #4]	; (8004f28 <MRT_LSM6DSR_Constructor+0x28>)
 8004f22:	601c      	str	r4, [r3, #0]
	}
}
 8004f24:	bf00      	nop
 8004f26:	bd98      	pop	{r3, r4, r7, pc}
 8004f28:	2000039c 	.word	0x2000039c
 8004f2c:	20005b58 	.word	0x20005b58

08004f30 <MRT_LSM6DSR_Destructor>:

void MRT_LSM6DSR_Destructor(){
 8004f30:	b480      	push	{r7}
 8004f32:	af00      	add	r7, sp, #0
	if (lsm6dsr!=NULL){
 8004f34:	4b05      	ldr	r3, [pc, #20]	; (8004f4c <MRT_LSM6DSR_Destructor+0x1c>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d002      	beq.n	8004f42 <MRT_LSM6DSR_Destructor+0x12>
		lsm6dsr = NULL;
 8004f3c:	4b03      	ldr	r3, [pc, #12]	; (8004f4c <MRT_LSM6DSR_Destructor+0x1c>)
 8004f3e:	2200      	movs	r2, #0
 8004f40:	601a      	str	r2, [r3, #0]
	}
}
 8004f42:	bf00      	nop
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr
 8004f4c:	2000039c 	.word	0x2000039c

08004f50 <MRT_LSM6DSR_getAcceleration>:

void MRT_LSM6DSR_getAcceleration(void){
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
	float* temp_array = lsm6dsr->getAcceleration();
 8004f56:	4b0b      	ldr	r3, [pc, #44]	; (8004f84 <MRT_LSM6DSR_getAcceleration+0x34>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f000 fa1c 	bl	8005398 <_ZN7LSM6DSR15getAccelerationEv>
 8004f60:	6078      	str	r0, [r7, #4]
	hlsm6dsr.acceleration_mg[0] = temp_array[0];
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a08      	ldr	r2, [pc, #32]	; (8004f88 <MRT_LSM6DSR_getAcceleration+0x38>)
 8004f68:	6013      	str	r3, [r2, #0]
	hlsm6dsr.acceleration_mg[1] = temp_array[1];
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	4a06      	ldr	r2, [pc, #24]	; (8004f88 <MRT_LSM6DSR_getAcceleration+0x38>)
 8004f70:	6053      	str	r3, [r2, #4]
	hlsm6dsr.acceleration_mg[2] = temp_array[2];
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	4a04      	ldr	r2, [pc, #16]	; (8004f88 <MRT_LSM6DSR_getAcceleration+0x38>)
 8004f78:	6093      	str	r3, [r2, #8]
}
 8004f7a:	bf00      	nop
 8004f7c:	3708      	adds	r7, #8
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	2000039c 	.word	0x2000039c
 8004f88:	200003a4 	.word	0x200003a4

08004f8c <MRT_LSM6DSR_getAngularRate>:
void MRT_LSM6DSR_getAngularRate(void){
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
	float* temp_array = lsm6dsr->getAngularRate();
 8004f92:	4b0b      	ldr	r3, [pc, #44]	; (8004fc0 <MRT_LSM6DSR_getAngularRate+0x34>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4618      	mov	r0, r3
 8004f98:	f000 fa7c 	bl	8005494 <_ZN7LSM6DSR14getAngularRateEv>
 8004f9c:	6078      	str	r0, [r7, #4]
	hlsm6dsr.angular_rate_mdps[0] = temp_array[0];
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a08      	ldr	r2, [pc, #32]	; (8004fc4 <MRT_LSM6DSR_getAngularRate+0x38>)
 8004fa4:	60d3      	str	r3, [r2, #12]
	hlsm6dsr.angular_rate_mdps[1] = temp_array[1];
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	4a06      	ldr	r2, [pc, #24]	; (8004fc4 <MRT_LSM6DSR_getAngularRate+0x38>)
 8004fac:	6113      	str	r3, [r2, #16]
	hlsm6dsr.angular_rate_mdps[2] = temp_array[2];
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	4a04      	ldr	r2, [pc, #16]	; (8004fc4 <MRT_LSM6DSR_getAngularRate+0x38>)
 8004fb4:	6153      	str	r3, [r2, #20]
}
 8004fb6:	bf00      	nop
 8004fb8:	3708      	adds	r7, #8
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	2000039c 	.word	0x2000039c
 8004fc4:	200003a4 	.word	0x200003a4

08004fc8 <MRT_LSM6DSR_getTemperature>:
void MRT_LSM6DSR_getTemperature(void){
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	af00      	add	r7, sp, #0
	lsm6dsr->getTemperature();
 8004fcc:	4b05      	ldr	r3, [pc, #20]	; (8004fe4 <MRT_LSM6DSR_getTemperature+0x1c>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f000 fa29 	bl	8005428 <_ZN7LSM6DSR14getTemperatureEv>
	hlsm6dsr.temperature_degC = lsm6dsr->temperature_degC;
 8004fd6:	4b03      	ldr	r3, [pc, #12]	; (8004fe4 <MRT_LSM6DSR_getTemperature+0x1c>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	4a02      	ldr	r2, [pc, #8]	; (8004fe8 <MRT_LSM6DSR_getTemperature+0x20>)
 8004fde:	6193      	str	r3, [r2, #24]
}
 8004fe0:	bf00      	nop
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	2000039c 	.word	0x2000039c
 8004fe8:	200003a4 	.word	0x200003a4

08004fec <MRT_LSM6DSR_pollAll>:

void MRT_LSM6DSR_pollAll(void){
 8004fec:	b580      	push	{r7, lr}
 8004fee:	af00      	add	r7, sp, #0
	MRT_LSM6DSR_getAcceleration();
 8004ff0:	f7ff ffae 	bl	8004f50 <MRT_LSM6DSR_getAcceleration>
	MRT_LSM6DSR_getAngularRate();
 8004ff4:	f7ff ffca 	bl	8004f8c <MRT_LSM6DSR_getAngularRate>
	MRT_LSM6DSR_getTemperature();
 8004ff8:	f7ff ffe6 	bl	8004fc8 <MRT_LSM6DSR_getTemperature>
}
 8004ffc:	bf00      	nop
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <MRT_LPS22HH_Constructor>:


//**************************************************//
/*****LPS22HH STATIC FUNCTIONS*****/

void MRT_LPS22HH_Constructor(){
 8005000:	b598      	push	{r3, r4, r7, lr}
 8005002:	af00      	add	r7, sp, #0
	if (lps22hh==NULL){
 8005004:	4b08      	ldr	r3, [pc, #32]	; (8005028 <MRT_LPS22HH_Constructor+0x28>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d10b      	bne.n	8005024 <MRT_LPS22HH_Constructor+0x24>
		lps22hh = new LPS22HH(&LPS22HH_I2C, (uint8_t) MRT_LPS22HH_ADDRESS);
 800500c:	2020      	movs	r0, #32
 800500e:	f00c fe75 	bl	8011cfc <_Znwj>
 8005012:	4603      	mov	r3, r0
 8005014:	461c      	mov	r4, r3
 8005016:	22b3      	movs	r2, #179	; 0xb3
 8005018:	4904      	ldr	r1, [pc, #16]	; (800502c <MRT_LPS22HH_Constructor+0x2c>)
 800501a:	4620      	mov	r0, r4
 800501c:	f000 fabe 	bl	800559c <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh>
 8005020:	4b01      	ldr	r3, [pc, #4]	; (8005028 <MRT_LPS22HH_Constructor+0x28>)
 8005022:	601c      	str	r4, [r3, #0]
	}
}
 8005024:	bf00      	nop
 8005026:	bd98      	pop	{r3, r4, r7, pc}
 8005028:	200003a0 	.word	0x200003a0
 800502c:	20005b58 	.word	0x20005b58

08005030 <MRT_LPS22HH_Destructor>:

void MRT_LPS22HH_Destructor(){
 8005030:	b480      	push	{r7}
 8005032:	af00      	add	r7, sp, #0
	if (lps22hh!=NULL){
 8005034:	4b05      	ldr	r3, [pc, #20]	; (800504c <MRT_LPS22HH_Destructor+0x1c>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d002      	beq.n	8005042 <MRT_LPS22HH_Destructor+0x12>
		lps22hh = NULL;
 800503c:	4b03      	ldr	r3, [pc, #12]	; (800504c <MRT_LPS22HH_Destructor+0x1c>)
 800503e:	2200      	movs	r2, #0
 8005040:	601a      	str	r2, [r3, #0]
	}
}
 8005042:	bf00      	nop
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr
 800504c:	200003a0 	.word	0x200003a0

08005050 <MRT_LPS22HH_getPressure>:

void MRT_LPS22HH_getPressure(void){
 8005050:	b580      	push	{r7, lr}
 8005052:	af00      	add	r7, sp, #0
	hlps22hh.pressure_hPa = lps22hh->getPressure();
 8005054:	4b05      	ldr	r3, [pc, #20]	; (800506c <MRT_LPS22HH_getPressure+0x1c>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4618      	mov	r0, r3
 800505a:	f000 fb27 	bl	80056ac <_ZN7LPS22HH11getPressureEv>
 800505e:	eef0 7a40 	vmov.f32	s15, s0
 8005062:	4b03      	ldr	r3, [pc, #12]	; (8005070 <MRT_LPS22HH_getPressure+0x20>)
 8005064:	edc3 7a00 	vstr	s15, [r3]
}
 8005068:	bf00      	nop
 800506a:	bd80      	pop	{r7, pc}
 800506c:	200003a0 	.word	0x200003a0
 8005070:	200003d0 	.word	0x200003d0

08005074 <MRT_LPS22HH_getTemperature>:

void MRT_LPS22HH_getTemperature(void){
 8005074:	b580      	push	{r7, lr}
 8005076:	af00      	add	r7, sp, #0
	hlps22hh.temperature_degC = lps22hh->getTemperature();
 8005078:	4b05      	ldr	r3, [pc, #20]	; (8005090 <MRT_LPS22HH_getTemperature+0x1c>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4618      	mov	r0, r3
 800507e:	f000 fb49 	bl	8005714 <_ZN7LPS22HH14getTemperatureEv>
 8005082:	eef0 7a40 	vmov.f32	s15, s0
 8005086:	4b03      	ldr	r3, [pc, #12]	; (8005094 <MRT_LPS22HH_getTemperature+0x20>)
 8005088:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800508c:	bf00      	nop
 800508e:	bd80      	pop	{r7, pc}
 8005090:	200003a0 	.word	0x200003a0
 8005094:	200003d0 	.word	0x200003d0

08005098 <MRT_LPS22HH_pollAll>:

void MRT_LPS22HH_pollAll(void){
 8005098:	b580      	push	{r7, lr}
 800509a:	af00      	add	r7, sp, #0
	MRT_LPS22HH_getPressure();
 800509c:	f7ff ffd8 	bl	8005050 <MRT_LPS22HH_getPressure>
	MRT_LPS22HH_getTemperature();
 80050a0:	f7ff ffe8 	bl	8005074 <MRT_LPS22HH_getTemperature>
}
 80050a4:	bf00      	nop
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <MRT_GPS_pollAll>:


//**************************************************//
/*****GPS STATIC FUNCTIONS*****/

void MRT_GPS_pollAll(void){
 80050a8:	b580      	push	{r7, lr}
 80050aa:	af00      	add	r7, sp, #0
	GPS_Poll(&hgps.latitude, &hgps.longitude, &hgps.time);
 80050ac:	4a03      	ldr	r2, [pc, #12]	; (80050bc <MRT_GPS_pollAll+0x14>)
 80050ae:	4904      	ldr	r1, [pc, #16]	; (80050c0 <MRT_GPS_pollAll+0x18>)
 80050b0:	4804      	ldr	r0, [pc, #16]	; (80050c4 <MRT_GPS_pollAll+0x1c>)
 80050b2:	f000 fb9f 	bl	80057f4 <GPS_Poll>
}
 80050b6:	bf00      	nop
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	200003ec 	.word	0x200003ec
 80050c0:	200003e8 	.word	0x200003e8
 80050c4:	200003e4 	.word	0x200003e4

080050c8 <MRT_LSM6DSR_Init>:


//**************************************************//
/*****PUBLIC STATIC FUNCTIONS*****/

HLSM6DSR MRT_LSM6DSR_Init(void){
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
	MRT_LSM6DSR_Constructor();
 80050d0:	f7ff ff16 	bl	8004f00 <MRT_LSM6DSR_Constructor>
	HLSM6DSR lsm6dsr_handler;
	lsm6dsr_handler.getAcceleration = &MRT_LSM6DSR_getAcceleration;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a16      	ldr	r2, [pc, #88]	; (8005130 <MRT_LSM6DSR_Init+0x68>)
 80050d8:	61da      	str	r2, [r3, #28]
	lsm6dsr_handler.getAngularRate = &MRT_LSM6DSR_getAngularRate;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a15      	ldr	r2, [pc, #84]	; (8005134 <MRT_LSM6DSR_Init+0x6c>)
 80050de:	621a      	str	r2, [r3, #32]
	lsm6dsr_handler.getTemperature = &MRT_LSM6DSR_getTemperature;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a15      	ldr	r2, [pc, #84]	; (8005138 <MRT_LSM6DSR_Init+0x70>)
 80050e4:	625a      	str	r2, [r3, #36]	; 0x24
	lsm6dsr_handler.pollAll = &MRT_LSM6DSR_pollAll;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a14      	ldr	r2, [pc, #80]	; (800513c <MRT_LSM6DSR_Init+0x74>)
 80050ea:	629a      	str	r2, [r3, #40]	; 0x28

	lsm6dsr_handler.acceleration_mg[0] = 0;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f04f 0200 	mov.w	r2, #0
 80050f2:	601a      	str	r2, [r3, #0]
	lsm6dsr_handler.acceleration_mg[1] = 0;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f04f 0200 	mov.w	r2, #0
 80050fa:	605a      	str	r2, [r3, #4]
	lsm6dsr_handler.acceleration_mg[2] = 0;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f04f 0200 	mov.w	r2, #0
 8005102:	609a      	str	r2, [r3, #8]
	lsm6dsr_handler.angular_rate_mdps[0] = 0;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f04f 0200 	mov.w	r2, #0
 800510a:	60da      	str	r2, [r3, #12]
	lsm6dsr_handler.angular_rate_mdps[1] = 0;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f04f 0200 	mov.w	r2, #0
 8005112:	611a      	str	r2, [r3, #16]
	lsm6dsr_handler.angular_rate_mdps[2] = 0;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f04f 0200 	mov.w	r2, #0
 800511a:	615a      	str	r2, [r3, #20]
	lsm6dsr_handler.temperature_degC = 0;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f04f 0200 	mov.w	r2, #0
 8005122:	619a      	str	r2, [r3, #24]
	return lsm6dsr_handler;
 8005124:	bf00      	nop
}
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	3708      	adds	r7, #8
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	08004f51 	.word	0x08004f51
 8005134:	08004f8d 	.word	0x08004f8d
 8005138:	08004fc9 	.word	0x08004fc9
 800513c:	08004fed 	.word	0x08004fed

08005140 <MRT_LPS22HH_Init>:

struct HLPS22HH MRT_LPS22HH_Init(void){
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
	MRT_LPS22HH_Constructor();
 8005148:	f7ff ff5a 	bl	8005000 <MRT_LPS22HH_Constructor>
	struct HLPS22HH lps22hh_handler;
	lps22hh_handler.getPressure = &MRT_LPS22HH_getPressure;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a0a      	ldr	r2, [pc, #40]	; (8005178 <MRT_LPS22HH_Init+0x38>)
 8005150:	609a      	str	r2, [r3, #8]
	lps22hh_handler.getTemperature = &MRT_LPS22HH_getTemperature;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a09      	ldr	r2, [pc, #36]	; (800517c <MRT_LPS22HH_Init+0x3c>)
 8005156:	60da      	str	r2, [r3, #12]
	lps22hh_handler.pollAll = &MRT_LPS22HH_pollAll;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a09      	ldr	r2, [pc, #36]	; (8005180 <MRT_LPS22HH_Init+0x40>)
 800515c:	611a      	str	r2, [r3, #16]

	lps22hh_handler.pressure_hPa = 0;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f04f 0200 	mov.w	r2, #0
 8005164:	601a      	str	r2, [r3, #0]
	lps22hh_handler.temperature_degC = 0;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f04f 0200 	mov.w	r2, #0
 800516c:	605a      	str	r2, [r3, #4]
	return lps22hh_handler;
 800516e:	bf00      	nop
}
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	3708      	adds	r7, #8
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	08005051 	.word	0x08005051
 800517c:	08005075 	.word	0x08005075
 8005180:	08005099 	.word	0x08005099

08005184 <MRT_GPS_Init>:

struct HGPS MRT_GPS_Init(void){
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
	struct HGPS gps_handler;
	gps_handler.pollAll = &MRT_GPS_pollAll;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a0c      	ldr	r2, [pc, #48]	; (80051c0 <MRT_GPS_Init+0x3c>)
 8005190:	60da      	str	r2, [r3, #12]
	GPS_Init(&GPS_UART, print, tone_freq);
 8005192:	4a0c      	ldr	r2, [pc, #48]	; (80051c4 <MRT_GPS_Init+0x40>)
 8005194:	490c      	ldr	r1, [pc, #48]	; (80051c8 <MRT_GPS_Init+0x44>)
 8005196:	480d      	ldr	r0, [pc, #52]	; (80051cc <MRT_GPS_Init+0x48>)
 8005198:	f000 fd8c 	bl	8005cb4 <GPS_Init>
	gps_handler.latitude = 0;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f04f 0200 	mov.w	r2, #0
 80051a2:	601a      	str	r2, [r3, #0]
	gps_handler.longitude = 0;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f04f 0200 	mov.w	r2, #0
 80051aa:	605a      	str	r2, [r3, #4]
	gps_handler.time = 0;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f04f 0200 	mov.w	r2, #0
 80051b2:	609a      	str	r2, [r3, #8]
	return gps_handler;
 80051b4:	bf00      	nop
}
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	3708      	adds	r7, #8
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	080050a9 	.word	0x080050a9
 80051c4:	08001095 	.word	0x08001095
 80051c8:	08001069 	.word	0x08001069
 80051cc:	20005e40 	.word	0x20005e40

080051d0 <MRT_i2c_sensors_Init>:

void MRT_i2c_sensors_Init(void){
 80051d0:	b5b0      	push	{r4, r5, r7, lr}
 80051d2:	b08c      	sub	sp, #48	; 0x30
 80051d4:	af00      	add	r7, sp, #0

	//LSM6DSR
	#if LSM6DSR_
	HAL_IWDG_Refresh(&hiwdg);
	hlsm6dsr = MRT_LSM6DSR_Init();
 80051d6:	4c13      	ldr	r4, [pc, #76]	; (8005224 <MRT_i2c_sensors_Init+0x54>)
 80051d8:	463b      	mov	r3, r7
 80051da:	4618      	mov	r0, r3
 80051dc:	f7ff ff74 	bl	80050c8 <MRT_LSM6DSR_Init>
 80051e0:	4625      	mov	r5, r4
 80051e2:	463c      	mov	r4, r7
 80051e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051ec:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80051f0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	#endif

	//LPS22HH
	#if LPS22HH_
	HAL_IWDG_Refresh(&hiwdg);
	hlps22hh = MRT_LPS22HH_Init();
 80051f4:	4c0c      	ldr	r4, [pc, #48]	; (8005228 <MRT_i2c_sensors_Init+0x58>)
 80051f6:	463b      	mov	r3, r7
 80051f8:	4618      	mov	r0, r3
 80051fa:	f7ff ffa1 	bl	8005140 <MRT_LPS22HH_Init>
 80051fe:	4625      	mov	r5, r4
 8005200:	463c      	mov	r4, r7
 8005202:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005204:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005206:	6823      	ldr	r3, [r4, #0]
 8005208:	602b      	str	r3, [r5, #0]
	#endif

	//GPS
	#if GPS_
	HAL_IWDG_Refresh(&hiwdg);
	hgps = MRT_GPS_Init();
 800520a:	4c08      	ldr	r4, [pc, #32]	; (800522c <MRT_i2c_sensors_Init+0x5c>)
 800520c:	463b      	mov	r3, r7
 800520e:	4618      	mov	r0, r3
 8005210:	f7ff ffb8 	bl	8005184 <MRT_GPS_Init>
 8005214:	463b      	mov	r3, r7
 8005216:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005218:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	#endif

}
 800521c:	bf00      	nop
 800521e:	3730      	adds	r7, #48	; 0x30
 8005220:	46bd      	mov	sp, r7
 8005222:	bdb0      	pop	{r4, r5, r7, pc}
 8005224:	200003a4 	.word	0x200003a4
 8005228:	200003d0 	.word	0x200003d0
 800522c:	200003e4 	.word	0x200003e4

08005230 <MRT_i2c_sensors_Deinit>:


void MRT_i2c_sensors_Deinit(void){
 8005230:	b580      	push	{r7, lr}
 8005232:	af00      	add	r7, sp, #0

	//LSM6DSR
	#if LSM6DSR_
	MRT_LSM6DSR_Destructor();
 8005234:	f7ff fe7c 	bl	8004f30 <MRT_LSM6DSR_Destructor>
	#endif

	//LPS22HH
	#if LPS22HH_
	MRT_LPS22HH_Destructor();
 8005238:	f7ff fefa 	bl	8005030 <MRT_LPS22HH_Destructor>
	#endif

	//GPS
	//NO DEINIT NEEDED HERE
}
 800523c:	bf00      	nop
 800523e:	bd80      	pop	{r7, pc}

08005240 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh>:


//**************************************************//
/*****LSM6DSR*****/

LSM6DSR::LSM6DSR(I2C_HandleTypeDef* i2c_bus, uint8_t address){
 8005240:	b580      	push	{r7, lr}
 8005242:	b088      	sub	sp, #32
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	4613      	mov	r3, r2
 800524c:	71fb      	strb	r3, [r7, #7]
	println((char*) "\r\nLSM6DSR Init");
 800524e:	4848      	ldr	r0, [pc, #288]	; (8005370 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x130>)
 8005250:	f7fb feec 	bl	800102c <println>

	/* Initialize mems driver interface */
	ctx.write_reg = write;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	4a47      	ldr	r2, [pc, #284]	; (8005374 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x134>)
 8005258:	61da      	str	r2, [r3, #28]
	ctx.read_reg = read;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	4a46      	ldr	r2, [pc, #280]	; (8005378 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x138>)
 800525e:	621a      	str	r2, [r3, #32]
	ctx.handle = i2c_bus;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait sensor boot time */
	HAL_Delay(LSM6DSR_BOOT_TIME);
 8005266:	2064      	movs	r0, #100	; 0x64
 8005268:	f003 fdf4 	bl	8008e54 <HAL_Delay>
	/* Check device ID */
	lsm6dsr_device_id_get(&ctx, &whoamI);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f103 021c 	add.w	r2, r3, #28
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	3338      	adds	r3, #56	; 0x38
 8005276:	4619      	mov	r1, r3
 8005278:	4610      	mov	r0, r2
 800527a:	f001 faf1 	bl	8006860 <lsm6dsr_device_id_get>

	print((char*) "\tChecking Sensor ID...");
 800527e:	483f      	ldr	r0, [pc, #252]	; (800537c <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x13c>)
 8005280:	f7fb fef2 	bl	8001068 <print>
	if (whoamI != address){
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800528a:	79fa      	ldrb	r2, [r7, #7]
 800528c:	429a      	cmp	r2, r3
 800528e:	d018      	beq.n	80052c2 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x82>
	  println((char*) "NOT OK");
 8005290:	483b      	ldr	r0, [pc, #236]	; (8005380 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x140>)
 8005292:	f7fb fecb 	bl	800102c <println>
	  print((char*) "\tThis Device is: ");
 8005296:	483b      	ldr	r0, [pc, #236]	; (8005384 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x144>)
 8005298:	f7fb fee6 	bl	8001068 <print>

	  char buffer[10];
	  sprintf(buffer, "%X\r\n", whoamI);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80052a2:	461a      	mov	r2, r3
 80052a4:	f107 0314 	add.w	r3, r7, #20
 80052a8:	4937      	ldr	r1, [pc, #220]	; (8005388 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x148>)
 80052aa:	4618      	mov	r0, r3
 80052ac:	f00e feec 	bl	8014088 <siprintf>
	  print(buffer);
 80052b0:	f107 0314 	add.w	r3, r7, #20
 80052b4:	4618      	mov	r0, r3
 80052b6:	f7fb fed7 	bl	8001068 <print>

	  println((char*) "\n\rProgram Terminated\n\r");
 80052ba:	4834      	ldr	r0, [pc, #208]	; (800538c <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x14c>)
 80052bc:	f7fb feb6 	bl	800102c <println>
	  while(1);
 80052c0:	e7fe      	b.n	80052c0 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x80>
	}
	println((char*) "OK");
 80052c2:	4833      	ldr	r0, [pc, #204]	; (8005390 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x150>)
 80052c4:	f7fb feb2 	bl	800102c <println>

	/* Restore default configuration */
	print((char*) "\tRestore default configuration...");
 80052c8:	4832      	ldr	r0, [pc, #200]	; (8005394 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x154>)
 80052ca:	f7fb fecd 	bl	8001068 <print>
	lsm6dsr_reset_set(&ctx, PROPERTY_ENABLE);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	331c      	adds	r3, #28
 80052d2:	2101      	movs	r1, #1
 80052d4:	4618      	mov	r0, r3
 80052d6:	f001 fad4 	bl	8006882 <lsm6dsr_reset_set>
	HAL_Delay(500);
 80052da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80052de:	f003 fdb9 	bl	8008e54 <HAL_Delay>
	do {
	lsm6dsr_reset_get(&ctx, &rst);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f103 021c 	add.w	r2, r3, #28
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	3339      	adds	r3, #57	; 0x39
 80052ec:	4619      	mov	r1, r3
 80052ee:	4610      	mov	r0, r2
 80052f0:	f001 faed 	bl	80068ce <lsm6dsr_reset_get>
	} while (rst);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d000      	beq.n	8005300 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0xc0>
	do {
 80052fe:	e7f0      	b.n	80052e2 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0xa2>
	println((char*) "OK");
 8005300:	4823      	ldr	r0, [pc, #140]	; (8005390 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x150>)
 8005302:	f7fb fe93 	bl	800102c <println>

	/* Disable I3C interface */
    lsm6dsr_i3c_disable_set(&ctx, LSM6DSR_I3C_DISABLE);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	331c      	adds	r3, #28
 800530a:	2180      	movs	r1, #128	; 0x80
 800530c:	4618      	mov	r0, r3
 800530e:	f001 fb55 	bl	80069bc <lsm6dsr_i3c_disable_set>

	/* Enable Block Data Update */
	lsm6dsr_block_data_update_set(&ctx, PROPERTY_ENABLE);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	331c      	adds	r3, #28
 8005316:	2101      	movs	r1, #1
 8005318:	4618      	mov	r0, r3
 800531a:	f001 f951 	bl	80065c0 <lsm6dsr_block_data_update_set>
	/* Set Output Data Rate */
	lsm6dsr_xl_data_rate_set(&ctx, LSM6DSR_XL_ODR_12Hz5);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	331c      	adds	r3, #28
 8005322:	2101      	movs	r1, #1
 8005324:	4618      	mov	r0, r3
 8005326:	f000 ff2d 	bl	8006184 <lsm6dsr_xl_data_rate_set>
	lsm6dsr_gy_data_rate_set(&ctx, LSM6DSR_GY_ODR_12Hz5);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	331c      	adds	r3, #28
 800532e:	2101      	movs	r1, #1
 8005330:	4618      	mov	r0, r3
 8005332:	f001 f849 	bl	80063c8 <lsm6dsr_gy_data_rate_set>
	/* Set full scale */
	lsm6dsr_xl_full_scale_set(&ctx, LSM6DSR_2g);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	331c      	adds	r3, #28
 800533a:	2100      	movs	r1, #0
 800533c:	4618      	mov	r0, r3
 800533e:	f000 fefb 	bl	8006138 <lsm6dsr_xl_full_scale_set>
	lsm6dsr_gy_full_scale_set(&ctx, LSM6DSR_2000dps);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	331c      	adds	r3, #28
 8005346:	210c      	movs	r1, #12
 8005348:	4618      	mov	r0, r3
 800534a:	f001 f817 	bl	800637c <lsm6dsr_gy_full_scale_set>
	/* Configure filtering chain(No aux interface)
	* Accelerometer - LPF1 + LPF2 path
	*/
	lsm6dsr_xl_hp_path_on_out_set(&ctx, LSM6DSR_LP_ODR_DIV_100);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	331c      	adds	r3, #28
 8005352:	2104      	movs	r1, #4
 8005354:	4618      	mov	r0, r3
 8005356:	f001 faf9 	bl	800694c <lsm6dsr_xl_hp_path_on_out_set>
	lsm6dsr_xl_filter_lp2_set(&ctx, PROPERTY_ENABLE);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	331c      	adds	r3, #28
 800535e:	2101      	movs	r1, #1
 8005360:	4618      	mov	r0, r3
 8005362:	f001 facd 	bl	8006900 <lsm6dsr_xl_filter_lp2_set>
}
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	4618      	mov	r0, r3
 800536a:	3720      	adds	r7, #32
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	08018e28 	.word	0x08018e28
 8005374:	08005527 	.word	0x08005527
 8005378:	08005561 	.word	0x08005561
 800537c:	08018e38 	.word	0x08018e38
 8005380:	08018e50 	.word	0x08018e50
 8005384:	08018e58 	.word	0x08018e58
 8005388:	08018e6c 	.word	0x08018e6c
 800538c:	08018e74 	.word	0x08018e74
 8005390:	08018e8c 	.word	0x08018e8c
 8005394:	08018e90 	.word	0x08018e90

08005398 <_ZN7LSM6DSR15getAccelerationEv>:


float* LSM6DSR::getAcceleration(void){
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
	lsm6dsr_xl_flag_data_ready_get(&ctx, &reg);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f103 021c 	add.w	r2, r3, #28
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	3328      	adds	r3, #40	; 0x28
 80053aa:	4619      	mov	r1, r3
 80053ac:	4610      	mov	r0, r2
 80053ae:	f001 f92d 	bl	800660c <lsm6dsr_xl_flag_data_ready_get>

	if (reg){
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d030      	beq.n	800541e <_ZN7LSM6DSR15getAccelerationEv+0x86>
		// Read magnetic field data
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	332a      	adds	r3, #42	; 0x2a
 80053c0:	2206      	movs	r2, #6
 80053c2:	2100      	movs	r1, #0
 80053c4:	4618      	mov	r0, r3
 80053c6:	f00d fde1 	bl	8012f8c <memset>
		lsm6dsr_acceleration_raw_get(&ctx, data_raw_acceleration);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f103 021c 	add.w	r2, r3, #28
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	332a      	adds	r3, #42	; 0x2a
 80053d4:	4619      	mov	r1, r3
 80053d6:	4610      	mov	r0, r2
 80053d8:	f001 f9d1 	bl	800677e <lsm6dsr_acceleration_raw_get>
		acceleration_mg[0] = lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[0]);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 fe5c 	bl	80060a0 <lsm6dsr_from_fs2g_to_mg>
 80053e8:	eef0 7a40 	vmov.f32	s15, s0
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	edc3 7a00 	vstr	s15, [r3]
		acceleration_mg[1] = lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[1]);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80053f8:	4618      	mov	r0, r3
 80053fa:	f000 fe51 	bl	80060a0 <lsm6dsr_from_fs2g_to_mg>
 80053fe:	eef0 7a40 	vmov.f32	s15, s0
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	edc3 7a01 	vstr	s15, [r3, #4]
		acceleration_mg[2] = lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[2]);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800540e:	4618      	mov	r0, r3
 8005410:	f000 fe46 	bl	80060a0 <lsm6dsr_from_fs2g_to_mg>
 8005414:	eef0 7a40 	vmov.f32	s15, s0
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	edc3 7a02 	vstr	s15, [r3, #8]
	}
	return acceleration_mg;
 800541e:	687b      	ldr	r3, [r7, #4]
}
 8005420:	4618      	mov	r0, r3
 8005422:	3708      	adds	r7, #8
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <_ZN7LSM6DSR14getTemperatureEv>:


float LSM6DSR::getTemperature(void){
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
    lsm6dsr_temp_flag_data_ready_get(&ctx, &reg);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f103 021c 	add.w	r2, r3, #28
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	3328      	adds	r3, #40	; 0x28
 800543a:	4619      	mov	r1, r3
 800543c:	4610      	mov	r0, r2
 800543e:	f001 f917 	bl	8006670 <lsm6dsr_temp_flag_data_ready_get>

    if (reg){
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005448:	2b00      	cmp	r3, #0
 800544a:	d01a      	beq.n	8005482 <_ZN7LSM6DSR14getTemperatureEv+0x5a>
		// Read temperature data
		memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	3336      	adds	r3, #54	; 0x36
 8005450:	2202      	movs	r2, #2
 8005452:	2100      	movs	r1, #0
 8005454:	4618      	mov	r0, r3
 8005456:	f00d fd99 	bl	8012f8c <memset>
		lsm6dsr_temperature_raw_get(&ctx, &data_raw_temperature);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f103 021c 	add.w	r2, r3, #28
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	3336      	adds	r3, #54	; 0x36
 8005464:	4619      	mov	r1, r3
 8005466:	4610      	mov	r0, r2
 8005468:	f001 f91b 	bl	80066a2 <lsm6dsr_temperature_raw_get>
		temperature_degC = lsm6dsr_from_lsb_to_celsius(data_raw_temperature);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8005472:	4618      	mov	r0, r3
 8005474:	f000 fe44 	bl	8006100 <lsm6dsr_from_lsb_to_celsius>
 8005478:	eef0 7a40 	vmov.f32	s15, s0
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	edc3 7a06 	vstr	s15, [r3, #24]
	}
    return temperature_degC;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	ee07 3a90 	vmov	s15, r3
}
 800548a:	eeb0 0a67 	vmov.f32	s0, s15
 800548e:	3708      	adds	r7, #8
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <_ZN7LSM6DSR14getAngularRateEv>:


float* LSM6DSR::getAngularRate(void){
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
    lsm6dsr_gy_flag_data_ready_get(&ctx, &reg);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f103 021c 	add.w	r2, r3, #28
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	3328      	adds	r3, #40	; 0x28
 80054a6:	4619      	mov	r1, r3
 80054a8:	4610      	mov	r0, r2
 80054aa:	f001 f8c8 	bl	800663e <lsm6dsr_gy_flag_data_ready_get>

    if (reg){
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d030      	beq.n	800551a <_ZN7LSM6DSR14getAngularRateEv+0x86>
		// Read magnetic field data
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	3330      	adds	r3, #48	; 0x30
 80054bc:	2206      	movs	r2, #6
 80054be:	2100      	movs	r1, #0
 80054c0:	4618      	mov	r0, r3
 80054c2:	f00d fd63 	bl	8012f8c <memset>
		lsm6dsr_angular_rate_raw_get(&ctx, data_raw_angular_rate);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f103 021c 	add.w	r2, r3, #28
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	3330      	adds	r3, #48	; 0x30
 80054d0:	4619      	mov	r1, r3
 80054d2:	4610      	mov	r0, r2
 80054d4:	f001 f908 	bl	80066e8 <lsm6dsr_angular_rate_raw_get>
		angular_rate_mdps[0] = lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 fdf6 	bl	80060d0 <lsm6dsr_from_fs2000dps_to_mdps>
 80054e4:	eef0 7a40 	vmov.f32	s15, s0
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	edc3 7a03 	vstr	s15, [r3, #12]
		angular_rate_mdps[1] = lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80054f4:	4618      	mov	r0, r3
 80054f6:	f000 fdeb 	bl	80060d0 <lsm6dsr_from_fs2000dps_to_mdps>
 80054fa:	eef0 7a40 	vmov.f32	s15, s0
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	edc3 7a04 	vstr	s15, [r3, #16]
		angular_rate_mdps[2] = lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 800550a:	4618      	mov	r0, r3
 800550c:	f000 fde0 	bl	80060d0 <lsm6dsr_from_fs2000dps_to_mdps>
 8005510:	eef0 7a40 	vmov.f32	s15, s0
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	edc3 7a05 	vstr	s15, [r3, #20]
		fs500dps_to_mdps
		fs1000dps_to_mdps
		fs2000dps_to_mdps
		*/
	}
    return angular_rate_mdps;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	330c      	adds	r3, #12
}
 800551e:	4618      	mov	r0, r3
 8005520:	3708      	adds	r7, #8
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <_ZN7LSM6DSR5writeEPvhPKht>:


int32_t LSM6DSR::write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 8005526:	b580      	push	{r7, lr}
 8005528:	b088      	sub	sp, #32
 800552a:	af04      	add	r7, sp, #16
 800552c:	60f8      	str	r0, [r7, #12]
 800552e:	607a      	str	r2, [r7, #4]
 8005530:	461a      	mov	r2, r3
 8005532:	460b      	mov	r3, r1
 8005534:	72fb      	strb	r3, [r7, #11]
 8005536:	4613      	mov	r3, r2
 8005538:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write((I2C_HandleTypeDef*) handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 800553a:	7afb      	ldrb	r3, [r7, #11]
 800553c:	b29a      	uxth	r2, r3
 800553e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005542:	9302      	str	r3, [sp, #8]
 8005544:	893b      	ldrh	r3, [r7, #8]
 8005546:	9301      	str	r3, [sp, #4]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	9300      	str	r3, [sp, #0]
 800554c:	2301      	movs	r3, #1
 800554e:	21d5      	movs	r1, #213	; 0xd5
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f004 fd01 	bl	8009f58 <HAL_I2C_Mem_Write>
  return 0;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3710      	adds	r7, #16
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <_ZN7LSM6DSR4readEPvhPht>:

int32_t LSM6DSR::read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 8005560:	b580      	push	{r7, lr}
 8005562:	b088      	sub	sp, #32
 8005564:	af04      	add	r7, sp, #16
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	607a      	str	r2, [r7, #4]
 800556a:	461a      	mov	r2, r3
 800556c:	460b      	mov	r3, r1
 800556e:	72fb      	strb	r3, [r7, #11]
 8005570:	4613      	mov	r3, r2
 8005572:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read((I2C_HandleTypeDef*) handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8005574:	7afb      	ldrb	r3, [r7, #11]
 8005576:	b29a      	uxth	r2, r3
 8005578:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800557c:	9302      	str	r3, [sp, #8]
 800557e:	893b      	ldrh	r3, [r7, #8]
 8005580:	9301      	str	r3, [sp, #4]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	9300      	str	r3, [sp, #0]
 8005586:	2301      	movs	r3, #1
 8005588:	21d5      	movs	r1, #213	; 0xd5
 800558a:	68f8      	ldr	r0, [r7, #12]
 800558c:	f004 fdde 	bl	800a14c <HAL_I2C_Mem_Read>
  return 0;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3710      	adds	r7, #16
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
	...

0800559c <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh>:

//**************************************************//
/*****LPS22HH*****/


LPS22HH::LPS22HH(I2C_HandleTypeDef* i2c_bus, uint8_t address){
 800559c:	b580      	push	{r7, lr}
 800559e:	b088      	sub	sp, #32
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	4613      	mov	r3, r2
 80055a8:	71fb      	strb	r3, [r7, #7]
	println((char*) "\r\nLPS22HH Init");
 80055aa:	4836      	ldr	r0, [pc, #216]	; (8005684 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xe8>)
 80055ac:	f7fb fd3e 	bl	800102c <println>

	/* Initialize mems driver interface */
	ctx.write_reg = write;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	4a35      	ldr	r2, [pc, #212]	; (8005688 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xec>)
 80055b4:	609a      	str	r2, [r3, #8]
	ctx.read_reg = read;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	4a34      	ldr	r2, [pc, #208]	; (800568c <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xf0>)
 80055ba:	60da      	str	r2, [r3, #12]
	ctx.handle = i2c_bus;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	611a      	str	r2, [r3, #16]
	/* Wait sensor boot time */
	HAL_Delay(LPS22HH_BOOT_TIME);
 80055c2:	2064      	movs	r0, #100	; 0x64
 80055c4:	f003 fc46 	bl	8008e54 <HAL_Delay>
	/* Check device ID */
	whoamI = 0;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	779a      	strb	r2, [r3, #30]
	lps22hh_device_id_get(&ctx, &whoamI);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f103 0208 	add.w	r2, r3, #8
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	331e      	adds	r3, #30
 80055d8:	4619      	mov	r1, r3
 80055da:	4610      	mov	r0, r2
 80055dc:	f000 fce0 	bl	8005fa0 <lps22hh_device_id_get>


	print((char*) "\tChecking Sensor ID...");
 80055e0:	482b      	ldr	r0, [pc, #172]	; (8005690 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xf4>)
 80055e2:	f7fb fd41 	bl	8001068 <print>
	if ( whoamI != address ){
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	7f9b      	ldrb	r3, [r3, #30]
 80055ea:	79fa      	ldrb	r2, [r7, #7]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d017      	beq.n	8005620 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x84>
	  println((char*) "NOT OK");
 80055f0:	4828      	ldr	r0, [pc, #160]	; (8005694 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xf8>)
 80055f2:	f7fb fd1b 	bl	800102c <println>
	  print((char*) "\tThis Device is: ");
 80055f6:	4828      	ldr	r0, [pc, #160]	; (8005698 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xfc>)
 80055f8:	f7fb fd36 	bl	8001068 <print>

	  char buffer[10];
	  sprintf(buffer, "%X\r\n", whoamI);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	7f9b      	ldrb	r3, [r3, #30]
 8005600:	461a      	mov	r2, r3
 8005602:	f107 0314 	add.w	r3, r7, #20
 8005606:	4925      	ldr	r1, [pc, #148]	; (800569c <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x100>)
 8005608:	4618      	mov	r0, r3
 800560a:	f00e fd3d 	bl	8014088 <siprintf>
	  print(buffer);
 800560e:	f107 0314 	add.w	r3, r7, #20
 8005612:	4618      	mov	r0, r3
 8005614:	f7fb fd28 	bl	8001068 <print>

	  println((char*) "\n\rProgram Terminated\n\r");
 8005618:	4821      	ldr	r0, [pc, #132]	; (80056a0 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x104>)
 800561a:	f7fb fd07 	bl	800102c <println>
	  while(1);
 800561e:	e7fe      	b.n	800561e <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x82>
	}
	println((char*) "OK");
 8005620:	4820      	ldr	r0, [pc, #128]	; (80056a4 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x108>)
 8005622:	f7fb fd03 	bl	800102c <println>

	/* Restore default configuration */
	print((char*) "\tRestore default configuration...");
 8005626:	4820      	ldr	r0, [pc, #128]	; (80056a8 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x10c>)
 8005628:	f7fb fd1e 	bl	8001068 <print>
	lps22hh_reset_set(&ctx, PROPERTY_ENABLE);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	3308      	adds	r3, #8
 8005630:	2101      	movs	r1, #1
 8005632:	4618      	mov	r0, r3
 8005634:	f000 fcc5 	bl	8005fc2 <lps22hh_reset_set>
	HAL_Delay(500);
 8005638:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800563c:	f003 fc0a 	bl	8008e54 <HAL_Delay>
	do {
	lps22hh_reset_get(&ctx, &rst);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f103 0208 	add.w	r2, r3, #8
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	331f      	adds	r3, #31
 800564a:	4619      	mov	r1, r3
 800564c:	4610      	mov	r0, r2
 800564e:	f000 fcde 	bl	800600e <lps22hh_reset_get>
	} while (rst);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	7fdb      	ldrb	r3, [r3, #31]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d000      	beq.n	800565c <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xc0>
	do {
 800565a:	e7f1      	b.n	8005640 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xa4>
	println((char*) "OK");
 800565c:	4811      	ldr	r0, [pc, #68]	; (80056a4 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x108>)
 800565e:	f7fb fce5 	bl	800102c <println>

	/* Enable Block Data Update */
	lps22hh_block_data_update_set(&ctx, PROPERTY_ENABLE);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	3308      	adds	r3, #8
 8005666:	2101      	movs	r1, #1
 8005668:	4618      	mov	r0, r3
 800566a:	f000 fba7 	bl	8005dbc <lps22hh_block_data_update_set>

	/* Set Output Data Rate */
	lps22hh_data_rate_set(&ctx, LPS22HH_75_Hz_LOW_NOISE);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	3308      	adds	r3, #8
 8005672:	2115      	movs	r1, #21
 8005674:	4618      	mov	r0, r3
 8005676:	f000 fbc7 	bl	8005e08 <lps22hh_data_rate_set>
}
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	4618      	mov	r0, r3
 800567e:	3720      	adds	r7, #32
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	08018eb4 	.word	0x08018eb4
 8005688:	0800577f 	.word	0x0800577f
 800568c:	080057b9 	.word	0x080057b9
 8005690:	08018e38 	.word	0x08018e38
 8005694:	08018e50 	.word	0x08018e50
 8005698:	08018e58 	.word	0x08018e58
 800569c:	08018e6c 	.word	0x08018e6c
 80056a0:	08018e74 	.word	0x08018e74
 80056a4:	08018e8c 	.word	0x08018e8c
 80056a8:	08018e90 	.word	0x08018e90

080056ac <_ZN7LPS22HH11getPressureEv>:



float LPS22HH::getPressure(void){
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
	/* Read output only if new value is available */
	lps22hh_press_flag_data_ready_get(&ctx, &reg);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f103 0208 	add.w	r2, r3, #8
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	3314      	adds	r3, #20
 80056be:	4619      	mov	r1, r3
 80056c0:	4610      	mov	r0, r2
 80056c2:	f000 fbef 	bl	8005ea4 <lps22hh_press_flag_data_ready_get>

	if (reg) {
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	7d1b      	ldrb	r3, [r3, #20]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d019      	beq.n	8005702 <_ZN7LPS22HH11getPressureEv+0x56>
	  memset(&data_raw_pressure, 0x00, sizeof(uint32_t));
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	3318      	adds	r3, #24
 80056d2:	2204      	movs	r2, #4
 80056d4:	2100      	movs	r1, #0
 80056d6:	4618      	mov	r0, r3
 80056d8:	f00d fc58 	bl	8012f8c <memset>
	  lps22hh_pressure_raw_get(&ctx, &data_raw_pressure);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f103 0208 	add.w	r2, r3, #8
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	3318      	adds	r3, #24
 80056e6:	4619      	mov	r1, r3
 80056e8:	4610      	mov	r0, r2
 80056ea:	f000 fc0d 	bl	8005f08 <lps22hh_pressure_raw_get>
	  pressure_hPa = lps22hh_from_lsb_to_hpa(data_raw_pressure);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	699b      	ldr	r3, [r3, #24]
 80056f2:	4618      	mov	r0, r3
 80056f4:	f000 fb30 	bl	8005d58 <lps22hh_from_lsb_to_hpa>
 80056f8:	eef0 7a40 	vmov.f32	s15, s0
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	edc3 7a00 	vstr	s15, [r3]
	}
	return pressure_hPa;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	ee07 3a90 	vmov	s15, r3
}
 800570a:	eeb0 0a67 	vmov.f32	s0, s15
 800570e:	3708      	adds	r7, #8
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <_ZN7LPS22HH14getTemperatureEv>:


float LPS22HH::getTemperature(void){
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
	/* Read output only if new value is available */
	lps22hh_temp_flag_data_ready_get(&ctx, &reg);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f103 0208 	add.w	r2, r3, #8
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	3314      	adds	r3, #20
 8005726:	4619      	mov	r1, r3
 8005728:	4610      	mov	r0, r2
 800572a:	f000 fbd4 	bl	8005ed6 <lps22hh_temp_flag_data_ready_get>

	if (reg) {
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	7d1b      	ldrb	r3, [r3, #20]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d01a      	beq.n	800576c <_ZN7LPS22HH14getTemperatureEv+0x58>
	  memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	331c      	adds	r3, #28
 800573a:	2202      	movs	r2, #2
 800573c:	2100      	movs	r1, #0
 800573e:	4618      	mov	r0, r3
 8005740:	f00d fc24 	bl	8012f8c <memset>
	  lps22hh_temperature_raw_get(&ctx, &data_raw_temperature);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f103 0208 	add.w	r2, r3, #8
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	331c      	adds	r3, #28
 800574e:	4619      	mov	r1, r3
 8005750:	4610      	mov	r0, r2
 8005752:	f000 fc02 	bl	8005f5a <lps22hh_temperature_raw_get>
	  temperature_degC = lps22hh_from_lsb_to_celsius(data_raw_temperature);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800575c:	4618      	mov	r0, r3
 800575e:	f000 fb13 	bl	8005d88 <lps22hh_from_lsb_to_celsius>
 8005762:	eef0 7a40 	vmov.f32	s15, s0
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	edc3 7a01 	vstr	s15, [r3, #4]
	}
	return temperature_degC;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	ee07 3a90 	vmov	s15, r3
}
 8005774:	eeb0 0a67 	vmov.f32	s0, s15
 8005778:	3708      	adds	r7, #8
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}

0800577e <_ZN7LPS22HH5writeEPvhPKht>:



int32_t LPS22HH::write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 800577e:	b580      	push	{r7, lr}
 8005780:	b088      	sub	sp, #32
 8005782:	af04      	add	r7, sp, #16
 8005784:	60f8      	str	r0, [r7, #12]
 8005786:	607a      	str	r2, [r7, #4]
 8005788:	461a      	mov	r2, r3
 800578a:	460b      	mov	r3, r1
 800578c:	72fb      	strb	r3, [r7, #11]
 800578e:	4613      	mov	r3, r2
 8005790:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write((I2C_HandleTypeDef*) handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8005792:	7afb      	ldrb	r3, [r7, #11]
 8005794:	b29a      	uxth	r2, r3
 8005796:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800579a:	9302      	str	r3, [sp, #8]
 800579c:	893b      	ldrh	r3, [r7, #8]
 800579e:	9301      	str	r3, [sp, #4]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	9300      	str	r3, [sp, #0]
 80057a4:	2301      	movs	r3, #1
 80057a6:	21b9      	movs	r1, #185	; 0xb9
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f004 fbd5 	bl	8009f58 <HAL_I2C_Mem_Write>
  return 0;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3710      	adds	r7, #16
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <_ZN7LPS22HH4readEPvhPht>:

int32_t LPS22HH::read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b088      	sub	sp, #32
 80057bc:	af04      	add	r7, sp, #16
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	607a      	str	r2, [r7, #4]
 80057c2:	461a      	mov	r2, r3
 80057c4:	460b      	mov	r3, r1
 80057c6:	72fb      	strb	r3, [r7, #11]
 80057c8:	4613      	mov	r3, r2
 80057ca:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read((I2C_HandleTypeDef*) handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80057cc:	7afb      	ldrb	r3, [r7, #11]
 80057ce:	b29a      	uxth	r2, r3
 80057d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80057d4:	9302      	str	r3, [sp, #8]
 80057d6:	893b      	ldrh	r3, [r7, #8]
 80057d8:	9301      	str	r3, [sp, #4]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	9300      	str	r3, [sp, #0]
 80057de:	2301      	movs	r3, #1
 80057e0:	21b9      	movs	r1, #185	; 0xb9
 80057e2:	68f8      	ldr	r0, [r7, #12]
 80057e4:	f004 fcb2 	bl	800a14c <HAL_I2C_Mem_Read>
  return 0;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3710      	adds	r7, #16
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
	...

080057f4 <GPS_Poll>:
#define LED3_GPIO_Port	((GPIO_TypeDef *) ((0x40000000UL + 0x00020000UL) + 0x0800UL))//OUT_LED3_GPIO_Port
#define LED3_Pin	(uint16_t)0x0008//OUT_LED3_Pin


void GPS_Poll(float *latitude, float *longitude, float *time)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b08c      	sub	sp, #48	; 0x30
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	607a      	str	r2, [r7, #4]
	uint16_t max_loop_count = 100;
 8005800:	2364      	movs	r3, #100	; 0x64
 8005802:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t loop_count = 0;
 8005804:	2300      	movs	r3, #0
 8005806:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int done = 0;
 8005808:	2300      	movs	r3, #0
 800580a:	62bb      	str	r3, [r7, #40]	; 0x28
	while(loop_count < max_loop_count && !done){
 800580c:	e073      	b.n	80058f6 <GPS_Poll+0x102>
		HAL_UART_Receive(GPS.uart, (uint8_t*)&rx_current, 1, 100);
 800580e:	4b3f      	ldr	r3, [pc, #252]	; (800590c <GPS_Poll+0x118>)
 8005810:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8005812:	2364      	movs	r3, #100	; 0x64
 8005814:	2201      	movs	r2, #1
 8005816:	493e      	ldr	r1, [pc, #248]	; (8005910 <GPS_Poll+0x11c>)
 8005818:	f008 fefb 	bl	800e612 <HAL_UART_Receive>
		//HAL_UART_Transmit(&huart1, (uint8_t*)&rx_current, 1, 100);
		if (rx_current != '\n' && rx_index < sizeof(rx_buffer)) {
 800581c:	4b3c      	ldr	r3, [pc, #240]	; (8005910 <GPS_Poll+0x11c>)
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	2b0a      	cmp	r3, #10
 8005822:	d00f      	beq.n	8005844 <GPS_Poll+0x50>
 8005824:	4b3b      	ldr	r3, [pc, #236]	; (8005914 <GPS_Poll+0x120>)
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	2b63      	cmp	r3, #99	; 0x63
 800582a:	d80b      	bhi.n	8005844 <GPS_Poll+0x50>
			rx_buffer[rx_index++] = rx_current;
 800582c:	4b39      	ldr	r3, [pc, #228]	; (8005914 <GPS_Poll+0x120>)
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	1c5a      	adds	r2, r3, #1
 8005832:	b2d1      	uxtb	r1, r2
 8005834:	4a37      	ldr	r2, [pc, #220]	; (8005914 <GPS_Poll+0x120>)
 8005836:	7011      	strb	r1, [r2, #0]
 8005838:	461a      	mov	r2, r3
 800583a:	4b35      	ldr	r3, [pc, #212]	; (8005910 <GPS_Poll+0x11c>)
 800583c:	7819      	ldrb	r1, [r3, #0]
 800583e:	4b36      	ldr	r3, [pc, #216]	; (8005918 <GPS_Poll+0x124>)
 8005840:	5499      	strb	r1, [r3, r2]
 8005842:	e021      	b.n	8005888 <GPS_Poll+0x94>
		} else {
			if(GPS_validate((char*) rx_buffer)){
 8005844:	4834      	ldr	r0, [pc, #208]	; (8005918 <GPS_Poll+0x124>)
 8005846:	f000 f869 	bl	800591c <GPS_validate>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d013      	beq.n	8005878 <GPS_Poll+0x84>
				if(GPS_parse((char*) rx_buffer)){
 8005850:	4831      	ldr	r0, [pc, #196]	; (8005918 <GPS_Poll+0x124>)
 8005852:	f000 f8c5 	bl	80059e0 <GPS_parse>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00d      	beq.n	8005878 <GPS_Poll+0x84>
					*latitude = GPS.dec_latitude;
 800585c:	4b2b      	ldr	r3, [pc, #172]	; (800590c <GPS_Poll+0x118>)
 800585e:	685a      	ldr	r2, [r3, #4]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	601a      	str	r2, [r3, #0]
					*longitude = GPS.dec_longitude;
 8005864:	4b29      	ldr	r3, [pc, #164]	; (800590c <GPS_Poll+0x118>)
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	601a      	str	r2, [r3, #0]
					*time = GPS.utc_time;
 800586c:	4b27      	ldr	r3, [pc, #156]	; (800590c <GPS_Poll+0x118>)
 800586e:	695a      	ldr	r2, [r3, #20]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	601a      	str	r2, [r3, #0]
					done = 1;
 8005874:	2301      	movs	r3, #1
 8005876:	62bb      	str	r3, [r7, #40]	; 0x28
				}
			}
			rx_index = 0;
 8005878:	4b26      	ldr	r3, [pc, #152]	; (8005914 <GPS_Poll+0x120>)
 800587a:	2200      	movs	r2, #0
 800587c:	701a      	strb	r2, [r3, #0]
			memset(rx_buffer, 0, sizeof(rx_buffer));
 800587e:	2264      	movs	r2, #100	; 0x64
 8005880:	2100      	movs	r1, #0
 8005882:	4825      	ldr	r0, [pc, #148]	; (8005918 <GPS_Poll+0x124>)
 8005884:	f00d fb82 	bl	8012f8c <memset>
		}

		// f437 usart doesnt have these flags in hardware, use software to clear the flags
		// (check docstring for __HAL_UART_CLEAR_FLAG function)
		__HAL_UART_CLEAR_OREFLAG(GPS.uart);
 8005888:	2300      	movs	r3, #0
 800588a:	623b      	str	r3, [r7, #32]
 800588c:	4b1f      	ldr	r3, [pc, #124]	; (800590c <GPS_Poll+0x118>)
 800588e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	623b      	str	r3, [r7, #32]
 8005896:	4b1d      	ldr	r3, [pc, #116]	; (800590c <GPS_Poll+0x118>)
 8005898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	623b      	str	r3, [r7, #32]
 80058a0:	6a3b      	ldr	r3, [r7, #32]
		__HAL_UART_CLEAR_NEFLAG(GPS.uart);
 80058a2:	2300      	movs	r3, #0
 80058a4:	61fb      	str	r3, [r7, #28]
 80058a6:	4b19      	ldr	r3, [pc, #100]	; (800590c <GPS_Poll+0x118>)
 80058a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	61fb      	str	r3, [r7, #28]
 80058b0:	4b16      	ldr	r3, [pc, #88]	; (800590c <GPS_Poll+0x118>)
 80058b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	61fb      	str	r3, [r7, #28]
 80058ba:	69fb      	ldr	r3, [r7, #28]
		__HAL_UART_CLEAR_PEFLAG(GPS.uart);
 80058bc:	2300      	movs	r3, #0
 80058be:	61bb      	str	r3, [r7, #24]
 80058c0:	4b12      	ldr	r3, [pc, #72]	; (800590c <GPS_Poll+0x118>)
 80058c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	61bb      	str	r3, [r7, #24]
 80058ca:	4b10      	ldr	r3, [pc, #64]	; (800590c <GPS_Poll+0x118>)
 80058cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	61bb      	str	r3, [r7, #24]
 80058d4:	69bb      	ldr	r3, [r7, #24]
		__HAL_UART_CLEAR_FEFLAG(GPS.uart);
 80058d6:	2300      	movs	r3, #0
 80058d8:	617b      	str	r3, [r7, #20]
 80058da:	4b0c      	ldr	r3, [pc, #48]	; (800590c <GPS_Poll+0x118>)
 80058dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	617b      	str	r3, [r7, #20]
 80058e4:	4b09      	ldr	r3, [pc, #36]	; (800590c <GPS_Poll+0x118>)
 80058e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	617b      	str	r3, [r7, #20]
 80058ee:	697b      	ldr	r3, [r7, #20]

		loop_count++;
 80058f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80058f2:	3301      	adds	r3, #1
 80058f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(loop_count < max_loop_count && !done){
 80058f6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80058f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d202      	bcs.n	8005904 <GPS_Poll+0x110>
 80058fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005900:	2b00      	cmp	r3, #0
 8005902:	d084      	beq.n	800580e <GPS_Poll+0x1a>
	}
}
 8005904:	bf00      	nop
 8005906:	3730      	adds	r7, #48	; 0x30
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	20005fc8 	.word	0x20005fc8
 8005910:	200003f4 	.word	0x200003f4
 8005914:	200003f5 	.word	0x200003f5
 8005918:	2000602c 	.word	0x2000602c

0800591c <GPS_validate>:

int GPS_validate(char *nmeastr){
 800591c:	b580      	push	{r7, lr}
 800591e:	b086      	sub	sp, #24
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 8005924:	2300      	movs	r3, #0
 8005926:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8005928:	2300      	movs	r3, #0
 800592a:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	4413      	add	r3, r2
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	2b24      	cmp	r3, #36	; 0x24
 8005936:	d103      	bne.n	8005940 <GPS_validate+0x24>
        i++;
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	3301      	adds	r3, #1
 800593c:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 800593e:	e00c      	b.n	800595a <GPS_validate+0x3e>
        return 0;
 8005940:	2300      	movs	r3, #0
 8005942:	e047      	b.n	80059d4 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	4413      	add	r3, r2
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	461a      	mov	r2, r3
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	4053      	eors	r3, r2
 8005952:	613b      	str	r3, [r7, #16]
        i++;
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	3301      	adds	r3, #1
 8005958:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	4413      	add	r3, r2
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d008      	beq.n	8005978 <GPS_validate+0x5c>
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	4413      	add	r3, r2
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	2b2a      	cmp	r3, #42	; 0x2a
 8005970:	d002      	beq.n	8005978 <GPS_validate+0x5c>
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	2b4a      	cmp	r3, #74	; 0x4a
 8005976:	dde5      	ble.n	8005944 <GPS_validate+0x28>
    }

    if(i >= 75){
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	2b4a      	cmp	r3, #74	; 0x4a
 800597c:	dd01      	ble.n	8005982 <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 800597e:	2300      	movs	r3, #0
 8005980:	e028      	b.n	80059d4 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	4413      	add	r3, r2
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	2b2a      	cmp	r3, #42	; 0x2a
 800598c:	d119      	bne.n	80059c2 <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	3301      	adds	r3, #1
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	4413      	add	r3, r2
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	3302      	adds	r3, #2
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	4413      	add	r3, r2
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 80059a6:	2300      	movs	r3, #0
 80059a8:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 80059aa:	f107 0308 	add.w	r3, r7, #8
 80059ae:	693a      	ldr	r2, [r7, #16]
 80059b0:	490a      	ldr	r1, [pc, #40]	; (80059dc <GPS_validate+0xc0>)
 80059b2:	4618      	mov	r0, r3
 80059b4:	f00e fb68 	bl	8014088 <siprintf>
    return((checkcalcstr[0] == check[0])
 80059b8:	7a3a      	ldrb	r2, [r7, #8]
 80059ba:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 80059bc:	429a      	cmp	r2, r3
 80059be:	d108      	bne.n	80059d2 <GPS_validate+0xb6>
 80059c0:	e001      	b.n	80059c6 <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 80059c2:	2300      	movs	r3, #0
 80059c4:	e006      	b.n	80059d4 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 80059c6:	7a7a      	ldrb	r2, [r7, #9]
 80059c8:	7b7b      	ldrb	r3, [r7, #13]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d101      	bne.n	80059d2 <GPS_validate+0xb6>
 80059ce:	2301      	movs	r3, #1
 80059d0:	e000      	b.n	80059d4 <GPS_validate+0xb8>
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3718      	adds	r7, #24
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	08018ec4 	.word	0x08018ec4

080059e0 <GPS_parse>:

int GPS_parse(char *GPSstrParse){
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b08a      	sub	sp, #40	; 0x28
 80059e4:	af08      	add	r7, sp, #32
 80059e6:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GNGGA", 6)){
 80059e8:	2206      	movs	r2, #6
 80059ea:	496d      	ldr	r1, [pc, #436]	; (8005ba0 <GPS_parse+0x1c0>)
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f00e fbdc 	bl	80141aa <strncmp>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d139      	bne.n	8005a6c <GPS_parse+0x8c>
    	if (sscanf(GPSstrParse, "$GNGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 80059f8:	4b6a      	ldr	r3, [pc, #424]	; (8005ba4 <GPS_parse+0x1c4>)
 80059fa:	9307      	str	r3, [sp, #28]
 80059fc:	4b6a      	ldr	r3, [pc, #424]	; (8005ba8 <GPS_parse+0x1c8>)
 80059fe:	9306      	str	r3, [sp, #24]
 8005a00:	4b6a      	ldr	r3, [pc, #424]	; (8005bac <GPS_parse+0x1cc>)
 8005a02:	9305      	str	r3, [sp, #20]
 8005a04:	4b6a      	ldr	r3, [pc, #424]	; (8005bb0 <GPS_parse+0x1d0>)
 8005a06:	9304      	str	r3, [sp, #16]
 8005a08:	4b6a      	ldr	r3, [pc, #424]	; (8005bb4 <GPS_parse+0x1d4>)
 8005a0a:	9303      	str	r3, [sp, #12]
 8005a0c:	4b6a      	ldr	r3, [pc, #424]	; (8005bb8 <GPS_parse+0x1d8>)
 8005a0e:	9302      	str	r3, [sp, #8]
 8005a10:	4b6a      	ldr	r3, [pc, #424]	; (8005bbc <GPS_parse+0x1dc>)
 8005a12:	9301      	str	r3, [sp, #4]
 8005a14:	4b6a      	ldr	r3, [pc, #424]	; (8005bc0 <GPS_parse+0x1e0>)
 8005a16:	9300      	str	r3, [sp, #0]
 8005a18:	4b6a      	ldr	r3, [pc, #424]	; (8005bc4 <GPS_parse+0x1e4>)
 8005a1a:	4a6b      	ldr	r2, [pc, #428]	; (8005bc8 <GPS_parse+0x1e8>)
 8005a1c:	496b      	ldr	r1, [pc, #428]	; (8005bcc <GPS_parse+0x1ec>)
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f00e fb52 	bl	80140c8 <siscanf>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f340 80b5 	ble.w	8005b96 <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8005a2c:	4b68      	ldr	r3, [pc, #416]	; (8005bd0 <GPS_parse+0x1f0>)
 8005a2e:	edd3 7a04 	vldr	s15, [r3, #16]
 8005a32:	4b67      	ldr	r3, [pc, #412]	; (8005bd0 <GPS_parse+0x1f0>)
 8005a34:	7e1b      	ldrb	r3, [r3, #24]
 8005a36:	4618      	mov	r0, r3
 8005a38:	eeb0 0a67 	vmov.f32	s0, s15
 8005a3c:	f000 f8ec 	bl	8005c18 <GPS_nmea_to_dec>
 8005a40:	eef0 7a40 	vmov.f32	s15, s0
 8005a44:	4b62      	ldr	r3, [pc, #392]	; (8005bd0 <GPS_parse+0x1f0>)
 8005a46:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8005a4a:	4b61      	ldr	r3, [pc, #388]	; (8005bd0 <GPS_parse+0x1f0>)
 8005a4c:	edd3 7a03 	vldr	s15, [r3, #12]
 8005a50:	4b5f      	ldr	r3, [pc, #380]	; (8005bd0 <GPS_parse+0x1f0>)
 8005a52:	7e5b      	ldrb	r3, [r3, #25]
 8005a54:	4618      	mov	r0, r3
 8005a56:	eeb0 0a67 	vmov.f32	s0, s15
 8005a5a:	f000 f8dd 	bl	8005c18 <GPS_nmea_to_dec>
 8005a5e:	eef0 7a40 	vmov.f32	s15, s0
 8005a62:	4b5b      	ldr	r3, [pc, #364]	; (8005bd0 <GPS_parse+0x1f0>)
 8005a64:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e095      	b.n	8005b98 <GPS_parse+0x1b8>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GNRMC", 6)){
 8005a6c:	2206      	movs	r2, #6
 8005a6e:	4959      	ldr	r1, [pc, #356]	; (8005bd4 <GPS_parse+0x1f4>)
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f00e fb9a 	bl	80141aa <strncmp>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d134      	bne.n	8005ae6 <GPS_parse+0x106>
    	if(sscanf(GPSstrParse, "$GNRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1){
 8005a7c:	4b56      	ldr	r3, [pc, #344]	; (8005bd8 <GPS_parse+0x1f8>)
 8005a7e:	9305      	str	r3, [sp, #20]
 8005a80:	4b56      	ldr	r3, [pc, #344]	; (8005bdc <GPS_parse+0x1fc>)
 8005a82:	9304      	str	r3, [sp, #16]
 8005a84:	4b56      	ldr	r3, [pc, #344]	; (8005be0 <GPS_parse+0x200>)
 8005a86:	9303      	str	r3, [sp, #12]
 8005a88:	4b4b      	ldr	r3, [pc, #300]	; (8005bb8 <GPS_parse+0x1d8>)
 8005a8a:	9302      	str	r3, [sp, #8]
 8005a8c:	4b4b      	ldr	r3, [pc, #300]	; (8005bbc <GPS_parse+0x1dc>)
 8005a8e:	9301      	str	r3, [sp, #4]
 8005a90:	4b4b      	ldr	r3, [pc, #300]	; (8005bc0 <GPS_parse+0x1e0>)
 8005a92:	9300      	str	r3, [sp, #0]
 8005a94:	4b4b      	ldr	r3, [pc, #300]	; (8005bc4 <GPS_parse+0x1e4>)
 8005a96:	4a4c      	ldr	r2, [pc, #304]	; (8005bc8 <GPS_parse+0x1e8>)
 8005a98:	4952      	ldr	r1, [pc, #328]	; (8005be4 <GPS_parse+0x204>)
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f00e fb14 	bl	80140c8 <siscanf>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	dd77      	ble.n	8005b96 <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8005aa6:	4b4a      	ldr	r3, [pc, #296]	; (8005bd0 <GPS_parse+0x1f0>)
 8005aa8:	edd3 7a04 	vldr	s15, [r3, #16]
 8005aac:	4b48      	ldr	r3, [pc, #288]	; (8005bd0 <GPS_parse+0x1f0>)
 8005aae:	7e1b      	ldrb	r3, [r3, #24]
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	eeb0 0a67 	vmov.f32	s0, s15
 8005ab6:	f000 f8af 	bl	8005c18 <GPS_nmea_to_dec>
 8005aba:	eef0 7a40 	vmov.f32	s15, s0
 8005abe:	4b44      	ldr	r3, [pc, #272]	; (8005bd0 <GPS_parse+0x1f0>)
 8005ac0:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8005ac4:	4b42      	ldr	r3, [pc, #264]	; (8005bd0 <GPS_parse+0x1f0>)
 8005ac6:	edd3 7a03 	vldr	s15, [r3, #12]
 8005aca:	4b41      	ldr	r3, [pc, #260]	; (8005bd0 <GPS_parse+0x1f0>)
 8005acc:	7e5b      	ldrb	r3, [r3, #25]
 8005ace:	4618      	mov	r0, r3
 8005ad0:	eeb0 0a67 	vmov.f32	s0, s15
 8005ad4:	f000 f8a0 	bl	8005c18 <GPS_nmea_to_dec>
 8005ad8:	eef0 7a40 	vmov.f32	s15, s0
 8005adc:	4b3c      	ldr	r3, [pc, #240]	; (8005bd0 <GPS_parse+0x1f0>)
 8005ade:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e058      	b.n	8005b98 <GPS_parse+0x1b8>
    	}


    }
    else if (!strncmp(GPSstrParse, "$GNGLL", 6)){
 8005ae6:	2206      	movs	r2, #6
 8005ae8:	493f      	ldr	r1, [pc, #252]	; (8005be8 <GPS_parse+0x208>)
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f00e fb5d 	bl	80141aa <strncmp>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d130      	bne.n	8005b58 <GPS_parse+0x178>
        if(sscanf(GPSstrParse, "$GNGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1){
 8005af6:	4b3d      	ldr	r3, [pc, #244]	; (8005bec <GPS_parse+0x20c>)
 8005af8:	9303      	str	r3, [sp, #12]
 8005afa:	4b33      	ldr	r3, [pc, #204]	; (8005bc8 <GPS_parse+0x1e8>)
 8005afc:	9302      	str	r3, [sp, #8]
 8005afe:	4b2e      	ldr	r3, [pc, #184]	; (8005bb8 <GPS_parse+0x1d8>)
 8005b00:	9301      	str	r3, [sp, #4]
 8005b02:	4b2e      	ldr	r3, [pc, #184]	; (8005bbc <GPS_parse+0x1dc>)
 8005b04:	9300      	str	r3, [sp, #0]
 8005b06:	4b2e      	ldr	r3, [pc, #184]	; (8005bc0 <GPS_parse+0x1e0>)
 8005b08:	4a2e      	ldr	r2, [pc, #184]	; (8005bc4 <GPS_parse+0x1e4>)
 8005b0a:	4939      	ldr	r1, [pc, #228]	; (8005bf0 <GPS_parse+0x210>)
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f00e fadb 	bl	80140c8 <siscanf>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	dd3e      	ble.n	8005b96 <GPS_parse+0x1b6>
        	GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8005b18:	4b2d      	ldr	r3, [pc, #180]	; (8005bd0 <GPS_parse+0x1f0>)
 8005b1a:	edd3 7a04 	vldr	s15, [r3, #16]
 8005b1e:	4b2c      	ldr	r3, [pc, #176]	; (8005bd0 <GPS_parse+0x1f0>)
 8005b20:	7e1b      	ldrb	r3, [r3, #24]
 8005b22:	4618      	mov	r0, r3
 8005b24:	eeb0 0a67 	vmov.f32	s0, s15
 8005b28:	f000 f876 	bl	8005c18 <GPS_nmea_to_dec>
 8005b2c:	eef0 7a40 	vmov.f32	s15, s0
 8005b30:	4b27      	ldr	r3, [pc, #156]	; (8005bd0 <GPS_parse+0x1f0>)
 8005b32:	edc3 7a01 	vstr	s15, [r3, #4]
        	GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8005b36:	4b26      	ldr	r3, [pc, #152]	; (8005bd0 <GPS_parse+0x1f0>)
 8005b38:	edd3 7a03 	vldr	s15, [r3, #12]
 8005b3c:	4b24      	ldr	r3, [pc, #144]	; (8005bd0 <GPS_parse+0x1f0>)
 8005b3e:	7e5b      	ldrb	r3, [r3, #25]
 8005b40:	4618      	mov	r0, r3
 8005b42:	eeb0 0a67 	vmov.f32	s0, s15
 8005b46:	f000 f867 	bl	8005c18 <GPS_nmea_to_dec>
 8005b4a:	eef0 7a40 	vmov.f32	s15, s0
 8005b4e:	4b20      	ldr	r3, [pc, #128]	; (8005bd0 <GPS_parse+0x1f0>)
 8005b50:	edc3 7a00 	vstr	s15, [r3]
        	return 1;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e01f      	b.n	8005b98 <GPS_parse+0x1b8>
        }

    }
    else if (!strncmp(GPSstrParse, "$GNVTG", 6)){
 8005b58:	2206      	movs	r2, #6
 8005b5a:	4926      	ldr	r1, [pc, #152]	; (8005bf4 <GPS_parse+0x214>)
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f00e fb24 	bl	80141aa <strncmp>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d116      	bne.n	8005b96 <GPS_parse+0x1b6>
        if(sscanf(GPSstrParse, "$GNVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8005b68:	4b23      	ldr	r3, [pc, #140]	; (8005bf8 <GPS_parse+0x218>)
 8005b6a:	9305      	str	r3, [sp, #20]
 8005b6c:	4b23      	ldr	r3, [pc, #140]	; (8005bfc <GPS_parse+0x21c>)
 8005b6e:	9304      	str	r3, [sp, #16]
 8005b70:	4b23      	ldr	r3, [pc, #140]	; (8005c00 <GPS_parse+0x220>)
 8005b72:	9303      	str	r3, [sp, #12]
 8005b74:	4b1a      	ldr	r3, [pc, #104]	; (8005be0 <GPS_parse+0x200>)
 8005b76:	9302      	str	r3, [sp, #8]
 8005b78:	4b22      	ldr	r3, [pc, #136]	; (8005c04 <GPS_parse+0x224>)
 8005b7a:	9301      	str	r3, [sp, #4]
 8005b7c:	4b22      	ldr	r3, [pc, #136]	; (8005c08 <GPS_parse+0x228>)
 8005b7e:	9300      	str	r3, [sp, #0]
 8005b80:	4b22      	ldr	r3, [pc, #136]	; (8005c0c <GPS_parse+0x22c>)
 8005b82:	4a23      	ldr	r2, [pc, #140]	; (8005c10 <GPS_parse+0x230>)
 8005b84:	4923      	ldr	r1, [pc, #140]	; (8005c14 <GPS_parse+0x234>)
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f00e fa9e 	bl	80140c8 <siscanf>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	dd01      	ble.n	8005b96 <GPS_parse+0x1b6>
            return 0;
 8005b92:	2300      	movs	r3, #0
 8005b94:	e000      	b.n	8005b98 <GPS_parse+0x1b8>
    }
    return 0;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3708      	adds	r7, #8
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	08018ecc 	.word	0x08018ecc
 8005ba4:	20005ff4 	.word	0x20005ff4
 8005ba8:	20005ff0 	.word	0x20005ff0
 8005bac:	20005fec 	.word	0x20005fec
 8005bb0:	20005fe8 	.word	0x20005fe8
 8005bb4:	20005fe4 	.word	0x20005fe4
 8005bb8:	20005fe1 	.word	0x20005fe1
 8005bbc:	20005fd4 	.word	0x20005fd4
 8005bc0:	20005fe0 	.word	0x20005fe0
 8005bc4:	20005fd8 	.word	0x20005fd8
 8005bc8:	20005fdc 	.word	0x20005fdc
 8005bcc:	08018ed4 	.word	0x08018ed4
 8005bd0:	20005fc8 	.word	0x20005fc8
 8005bd4:	08018efc 	.word	0x08018efc
 8005bd8:	20006000 	.word	0x20006000
 8005bdc:	20005ffc 	.word	0x20005ffc
 8005be0:	20005ff8 	.word	0x20005ff8
 8005be4:	08018f04 	.word	0x08018f04
 8005be8:	08018f24 	.word	0x08018f24
 8005bec:	20006004 	.word	0x20006004
 8005bf0:	08018f2c 	.word	0x08018f2c
 8005bf4:	08018f48 	.word	0x08018f48
 8005bf8:	2000601c 	.word	0x2000601c
 8005bfc:	20006018 	.word	0x20006018
 8005c00:	20006015 	.word	0x20006015
 8005c04:	20006014 	.word	0x20006014
 8005c08:	20006010 	.word	0x20006010
 8005c0c:	2000600c 	.word	0x2000600c
 8005c10:	20006008 	.word	0x20006008
 8005c14:	08018f50 	.word	0x08018f50

08005c18 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8005c18:	b480      	push	{r7}
 8005c1a:	b087      	sub	sp, #28
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	ed87 0a01 	vstr	s0, [r7, #4]
 8005c22:	4603      	mov	r3, r0
 8005c24:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8005c26:	ed97 7a01 	vldr	s14, [r7, #4]
 8005c2a:	eddf 6a20 	vldr	s13, [pc, #128]	; 8005cac <GPS_nmea_to_dec+0x94>
 8005c2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c36:	ee17 3a90 	vmov	r3, s15
 8005c3a:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	2264      	movs	r2, #100	; 0x64
 8005c40:	fb02 f303 	mul.w	r3, r2, r3
 8005c44:	ee07 3a90 	vmov	s15, r3
 8005c48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c4c:	ed97 7a01 	vldr	s14, [r7, #4]
 8005c50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c54:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8005c58:	ed97 7a03 	vldr	s14, [r7, #12]
 8005c5c:	eddf 6a14 	vldr	s13, [pc, #80]	; 8005cb0 <GPS_nmea_to_dec+0x98>
 8005c60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c64:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	ee07 3a90 	vmov	s15, r3
 8005c6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c72:	ed97 7a02 	vldr	s14, [r7, #8]
 8005c76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c7a:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 8005c7e:	78fb      	ldrb	r3, [r7, #3]
 8005c80:	2b53      	cmp	r3, #83	; 0x53
 8005c82:	d002      	beq.n	8005c8a <GPS_nmea_to_dec+0x72>
 8005c84:	78fb      	ldrb	r3, [r7, #3]
 8005c86:	2b57      	cmp	r3, #87	; 0x57
 8005c88:	d105      	bne.n	8005c96 <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 8005c8a:	edd7 7a05 	vldr	s15, [r7, #20]
 8005c8e:	eef1 7a67 	vneg.f32	s15, s15
 8005c92:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	ee07 3a90 	vmov	s15, r3
}
 8005c9c:	eeb0 0a67 	vmov.f32	s0, s15
 8005ca0:	371c      	adds	r7, #28
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	42c80000 	.word	0x42c80000
 8005cb0:	42700000 	.word	0x42700000

08005cb4 <GPS_Init>:
	}
}


void GPS_Init(UART_HandleTypeDef* data_uart, void (*gps_print)(char*),
		void (*gps_tone_freq)(uint32_t duration, uint32_t repeats, uint32_t freq)){
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	607a      	str	r2, [r7, #4]
	GPS.print = gps_print;
 8005cc0:	4a0a      	ldr	r2, [pc, #40]	; (8005cec <GPS_Init+0x38>)
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	65d3      	str	r3, [r2, #92]	; 0x5c
	GPS.print((char*) "\r\nGPS Init...");
 8005cc6:	4b09      	ldr	r3, [pc, #36]	; (8005cec <GPS_Init+0x38>)
 8005cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cca:	4809      	ldr	r0, [pc, #36]	; (8005cf0 <GPS_Init+0x3c>)
 8005ccc:	4798      	blx	r3
	GPS.uart = data_uart;
 8005cce:	4a07      	ldr	r2, [pc, #28]	; (8005cec <GPS_Init+0x38>)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6593      	str	r3, [r2, #88]	; 0x58
	GPS.tone_freq = gps_tone_freq;
 8005cd4:	4a05      	ldr	r2, [pc, #20]	; (8005cec <GPS_Init+0x38>)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6613      	str	r3, [r2, #96]	; 0x60
	GPS.print((char*) "OK\r\n");
 8005cda:	4b04      	ldr	r3, [pc, #16]	; (8005cec <GPS_Init+0x38>)
 8005cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cde:	4805      	ldr	r0, [pc, #20]	; (8005cf4 <GPS_Init+0x40>)
 8005ce0:	4798      	blx	r3
}
 8005ce2:	bf00      	nop
 8005ce4:	3710      	adds	r7, #16
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	20005fc8 	.word	0x20005fc8
 8005cf0:	08018f70 	.word	0x08018f70
 8005cf4:	08018f80 	.word	0x08018f80

08005cf8 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8005cf8:	b590      	push	{r4, r7, lr}
 8005cfa:	b087      	sub	sp, #28
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	607a      	str	r2, [r7, #4]
 8005d02:	461a      	mov	r2, r3
 8005d04:	460b      	mov	r3, r1
 8005d06:	72fb      	strb	r3, [r7, #11]
 8005d08:	4613      	mov	r3, r2
 8005d0a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	685c      	ldr	r4, [r3, #4]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6898      	ldr	r0, [r3, #8]
 8005d14:	893b      	ldrh	r3, [r7, #8]
 8005d16:	7af9      	ldrb	r1, [r7, #11]
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	47a0      	blx	r4
 8005d1c:	6178      	str	r0, [r7, #20]

  return ret;
 8005d1e:	697b      	ldr	r3, [r7, #20]
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	371c      	adds	r7, #28
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd90      	pop	{r4, r7, pc}

08005d28 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8005d28:	b590      	push	{r4, r7, lr}
 8005d2a:	b087      	sub	sp, #28
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	607a      	str	r2, [r7, #4]
 8005d32:	461a      	mov	r2, r3
 8005d34:	460b      	mov	r3, r1
 8005d36:	72fb      	strb	r3, [r7, #11]
 8005d38:	4613      	mov	r3, r2
 8005d3a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681c      	ldr	r4, [r3, #0]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6898      	ldr	r0, [r3, #8]
 8005d44:	893b      	ldrh	r3, [r7, #8]
 8005d46:	7af9      	ldrb	r1, [r7, #11]
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	47a0      	blx	r4
 8005d4c:	6178      	str	r0, [r7, #20]

  return ret;
 8005d4e:	697b      	ldr	r3, [r7, #20]
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	371c      	adds	r7, #28
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd90      	pop	{r4, r7, pc}

08005d58 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	ee07 3a90 	vmov	s15, r3
 8005d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d6a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005d84 <lps22hh_from_lsb_to_hpa+0x2c>
 8005d6e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005d72:	eef0 7a66 	vmov.f32	s15, s13
}
 8005d76:	eeb0 0a67 	vmov.f32	s0, s15
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr
 8005d84:	49800000 	.word	0x49800000

08005d88 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	4603      	mov	r3, r0
 8005d90:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8005d92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d96:	ee07 3a90 	vmov	s15, r3
 8005d9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d9e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005db8 <lps22hh_from_lsb_to_celsius+0x30>
 8005da2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005da6:	eef0 7a66 	vmov.f32	s15, s13
}
 8005daa:	eeb0 0a67 	vmov.f32	s0, s15
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr
 8005db8:	42c80000 	.word	0x42c80000

08005dbc <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8005dc8:	f107 0208 	add.w	r2, r7, #8
 8005dcc:	2301      	movs	r3, #1
 8005dce:	2110      	movs	r1, #16
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f7ff ff91 	bl	8005cf8 <lps22hh_read_reg>
 8005dd6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d10f      	bne.n	8005dfe <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8005dde:	78fb      	ldrb	r3, [r7, #3]
 8005de0:	f003 0301 	and.w	r3, r3, #1
 8005de4:	b2da      	uxtb	r2, r3
 8005de6:	7a3b      	ldrb	r3, [r7, #8]
 8005de8:	f362 0341 	bfi	r3, r2, #1, #1
 8005dec:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8005dee:	f107 0208 	add.w	r2, r7, #8
 8005df2:	2301      	movs	r3, #1
 8005df4:	2110      	movs	r1, #16
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f7ff ff96 	bl	8005d28 <lps22hh_write_reg>
 8005dfc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b086      	sub	sp, #24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	460b      	mov	r3, r1
 8005e12:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8005e14:	f107 0210 	add.w	r2, r7, #16
 8005e18:	2301      	movs	r3, #1
 8005e1a:	2110      	movs	r1, #16
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f7ff ff6b 	bl	8005cf8 <lps22hh_read_reg>
 8005e22:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d107      	bne.n	8005e3a <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8005e2a:	f107 020c 	add.w	r2, r7, #12
 8005e2e:	2301      	movs	r3, #1
 8005e30:	2111      	movs	r1, #17
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f7ff ff60 	bl	8005cf8 <lps22hh_read_reg>
 8005e38:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d10f      	bne.n	8005e60 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8005e40:	78fb      	ldrb	r3, [r7, #3]
 8005e42:	f003 0307 	and.w	r3, r3, #7
 8005e46:	b2da      	uxtb	r2, r3
 8005e48:	7c3b      	ldrb	r3, [r7, #16]
 8005e4a:	f362 1306 	bfi	r3, r2, #4, #3
 8005e4e:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8005e50:	f107 0210 	add.w	r2, r7, #16
 8005e54:	2301      	movs	r3, #1
 8005e56:	2110      	movs	r1, #16
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f7ff ff65 	bl	8005d28 <lps22hh_write_reg>
 8005e5e:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d119      	bne.n	8005e9a <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8005e66:	78fb      	ldrb	r3, [r7, #3]
 8005e68:	091b      	lsrs	r3, r3, #4
 8005e6a:	f003 0301 	and.w	r3, r3, #1
 8005e6e:	b2da      	uxtb	r2, r3
 8005e70:	7b3b      	ldrb	r3, [r7, #12]
 8005e72:	f362 0341 	bfi	r3, r2, #1, #1
 8005e76:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8005e78:	78fb      	ldrb	r3, [r7, #3]
 8005e7a:	08db      	lsrs	r3, r3, #3
 8005e7c:	f003 0301 	and.w	r3, r3, #1
 8005e80:	b2da      	uxtb	r2, r3
 8005e82:	7b3b      	ldrb	r3, [r7, #12]
 8005e84:	f362 0300 	bfi	r3, r2, #0, #1
 8005e88:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8005e8a:	f107 020c 	add.w	r2, r7, #12
 8005e8e:	2301      	movs	r3, #1
 8005e90:	2111      	movs	r1, #17
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f7ff ff48 	bl	8005d28 <lps22hh_write_reg>
 8005e98:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8005e9a:	697b      	ldr	r3, [r7, #20]
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3718      	adds	r7, #24
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <lps22hh_press_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_press_flag_data_ready_get(stmdev_ctx_t *ctx,
                                          uint8_t *val)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 8005eae:	f107 0208 	add.w	r2, r7, #8
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	2127      	movs	r1, #39	; 0x27
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f7ff ff1e 	bl	8005cf8 <lps22hh_read_reg>
 8005ebc:	60f8      	str	r0, [r7, #12]
  *val = reg.p_da;
 8005ebe:	7a3b      	ldrb	r3, [r7, #8]
 8005ec0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	701a      	strb	r2, [r3, #0]

  return ret;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3710      	adds	r7, #16
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <lps22hh_temp_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b084      	sub	sp, #16
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
 8005ede:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 8005ee0:	f107 0208 	add.w	r2, r7, #8
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	2127      	movs	r1, #39	; 0x27
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f7ff ff05 	bl	8005cf8 <lps22hh_read_reg>
 8005eee:	60f8      	str	r0, [r7, #12]
  *val = reg.t_da;
 8005ef0:	7a3b      	ldrb	r3, [r7, #8]
 8005ef2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	461a      	mov	r2, r3
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	701a      	strb	r2, [r3, #0]

  return ret;
 8005efe:	68fb      	ldr	r3, [r7, #12]
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3710      	adds	r7, #16
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8005f12:	f107 0208 	add.w	r2, r7, #8
 8005f16:	2303      	movs	r3, #3
 8005f18:	2128      	movs	r1, #40	; 0x28
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f7ff feec 	bl	8005cf8 <lps22hh_read_reg>
 8005f20:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8005f22:	7abb      	ldrb	r3, [r7, #10]
 8005f24:	461a      	mov	r2, r3
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	021b      	lsls	r3, r3, #8
 8005f30:	7a7a      	ldrb	r2, [r7, #9]
 8005f32:	441a      	add	r2, r3
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	021b      	lsls	r3, r3, #8
 8005f3e:	7a3a      	ldrb	r2, [r7, #8]
 8005f40:	441a      	add	r2, r3
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	021a      	lsls	r2, r3, #8
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	601a      	str	r2, [r3, #0]

  return ret;
 8005f50:	68fb      	ldr	r3, [r7, #12]
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b084      	sub	sp, #16
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
 8005f62:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8005f64:	f107 0208 	add.w	r2, r7, #8
 8005f68:	2302      	movs	r3, #2
 8005f6a:	212b      	movs	r1, #43	; 0x2b
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f7ff fec3 	bl	8005cf8 <lps22hh_read_reg>
 8005f72:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8005f74:	7a7b      	ldrb	r3, [r7, #9]
 8005f76:	b21a      	sxth	r2, r3
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	021b      	lsls	r3, r3, #8
 8005f86:	b29a      	uxth	r2, r3
 8005f88:	7a3b      	ldrb	r3, [r7, #8]
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	4413      	add	r3, r2
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	b21a      	sxth	r2, r3
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	801a      	strh	r2, [r3, #0]

  return ret;
 8005f96:	68fb      	ldr	r3, [r7, #12]
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3710      	adds	r7, #16
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8005faa:	2301      	movs	r3, #1
 8005fac:	683a      	ldr	r2, [r7, #0]
 8005fae:	210f      	movs	r1, #15
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f7ff fea1 	bl	8005cf8 <lps22hh_read_reg>
 8005fb6:	60f8      	str	r0, [r7, #12]

  return ret;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3710      	adds	r7, #16
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	b084      	sub	sp, #16
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
 8005fca:	460b      	mov	r3, r1
 8005fcc:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8005fce:	f107 0208 	add.w	r2, r7, #8
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	2111      	movs	r1, #17
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f7ff fe8e 	bl	8005cf8 <lps22hh_read_reg>
 8005fdc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d10f      	bne.n	8006004 <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 8005fe4:	78fb      	ldrb	r3, [r7, #3]
 8005fe6:	f003 0301 	and.w	r3, r3, #1
 8005fea:	b2da      	uxtb	r2, r3
 8005fec:	7a3b      	ldrb	r3, [r7, #8]
 8005fee:	f362 0382 	bfi	r3, r2, #2, #1
 8005ff2:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8005ff4:	f107 0208 	add.w	r2, r7, #8
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	2111      	movs	r1, #17
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f7ff fe93 	bl	8005d28 <lps22hh_write_reg>
 8006002:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006004:	68fb      	ldr	r3, [r7, #12]
}
 8006006:	4618      	mov	r0, r3
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800600e:	b580      	push	{r7, lr}
 8006010:	b084      	sub	sp, #16
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
 8006016:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8006018:	f107 0208 	add.w	r2, r7, #8
 800601c:	2301      	movs	r3, #1
 800601e:	2111      	movs	r1, #17
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f7ff fe69 	bl	8005cf8 <lps22hh_read_reg>
 8006026:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 8006028:	7a3b      	ldrb	r3, [r7, #8]
 800602a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800602e:	b2db      	uxtb	r3, r3
 8006030:	461a      	mov	r2, r3
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	701a      	strb	r2, [r3, #0]

  return ret;
 8006036:	68fb      	ldr	r3, [r7, #12]
}
 8006038:	4618      	mov	r0, r3
 800603a:	3710      	adds	r7, #16
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <lsm6dsr_read_reg>:
  *
  */
int32_t lsm6dsr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8006040:	b590      	push	{r4, r7, lr}
 8006042:	b087      	sub	sp, #28
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	607a      	str	r2, [r7, #4]
 800604a:	461a      	mov	r2, r3
 800604c:	460b      	mov	r3, r1
 800604e:	72fb      	strb	r3, [r7, #11]
 8006050:	4613      	mov	r3, r2
 8006052:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	685c      	ldr	r4, [r3, #4]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6898      	ldr	r0, [r3, #8]
 800605c:	893b      	ldrh	r3, [r7, #8]
 800605e:	7af9      	ldrb	r1, [r7, #11]
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	47a0      	blx	r4
 8006064:	6178      	str	r0, [r7, #20]

  return ret;
 8006066:	697b      	ldr	r3, [r7, #20]
}
 8006068:	4618      	mov	r0, r3
 800606a:	371c      	adds	r7, #28
 800606c:	46bd      	mov	sp, r7
 800606e:	bd90      	pop	{r4, r7, pc}

08006070 <lsm6dsr_write_reg>:
  *
  */
int32_t lsm6dsr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8006070:	b590      	push	{r4, r7, lr}
 8006072:	b087      	sub	sp, #28
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	607a      	str	r2, [r7, #4]
 800607a:	461a      	mov	r2, r3
 800607c:	460b      	mov	r3, r1
 800607e:	72fb      	strb	r3, [r7, #11]
 8006080:	4613      	mov	r3, r2
 8006082:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681c      	ldr	r4, [r3, #0]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6898      	ldr	r0, [r3, #8]
 800608c:	893b      	ldrh	r3, [r7, #8]
 800608e:	7af9      	ldrb	r1, [r7, #11]
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	47a0      	blx	r4
 8006094:	6178      	str	r0, [r7, #20]

  return ret;
 8006096:	697b      	ldr	r3, [r7, #20]
}
 8006098:	4618      	mov	r0, r3
 800609a:	371c      	adds	r7, #28
 800609c:	46bd      	mov	sp, r7
 800609e:	bd90      	pop	{r4, r7, pc}

080060a0 <lsm6dsr_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsr_from_fs2g_to_mg(int16_t lsb)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	4603      	mov	r3, r0
 80060a8:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 80060aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80060ae:	ee07 3a90 	vmov	s15, r3
 80060b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060b6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80060cc <lsm6dsr_from_fs2g_to_mg+0x2c>
 80060ba:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80060be:	eeb0 0a67 	vmov.f32	s0, s15
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr
 80060cc:	3d79db23 	.word	0x3d79db23

080060d0 <lsm6dsr_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsr_from_fs2000dps_to_mdps(int16_t lsb)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	4603      	mov	r3, r0
 80060d8:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 80060da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80060de:	ee07 3a90 	vmov	s15, r3
 80060e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060e6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80060fc <lsm6dsr_from_fs2000dps_to_mdps+0x2c>
 80060ea:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80060ee:	eeb0 0a67 	vmov.f32	s0, s15
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr
 80060fc:	428c0000 	.word	0x428c0000

08006100 <lsm6dsr_from_lsb_to_celsius>:
{
  return ((float_t)lsb * 140.0f);
}

float_t lsm6dsr_from_lsb_to_celsius(int16_t lsb)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	4603      	mov	r3, r0
 8006108:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 800610a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800610e:	ee07 3a90 	vmov	s15, r3
 8006112:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006116:	eddf 6a07 	vldr	s13, [pc, #28]	; 8006134 <lsm6dsr_from_lsb_to_celsius+0x34>
 800611a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800611e:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8006122:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8006126:	eeb0 0a67 	vmov.f32	s0, s15
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr
 8006134:	43800000 	.word	0x43800000

08006138 <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	460b      	mov	r3, r1
 8006142:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8006144:	f107 0208 	add.w	r2, r7, #8
 8006148:	2301      	movs	r3, #1
 800614a:	2110      	movs	r1, #16
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f7ff ff77 	bl	8006040 <lsm6dsr_read_reg>
 8006152:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d10f      	bne.n	800617a <lsm6dsr_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 800615a:	78fb      	ldrb	r3, [r7, #3]
 800615c:	f003 0303 	and.w	r3, r3, #3
 8006160:	b2da      	uxtb	r2, r3
 8006162:	7a3b      	ldrb	r3, [r7, #8]
 8006164:	f362 0383 	bfi	r3, r2, #2, #2
 8006168:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 800616a:	f107 0208 	add.w	r2, r7, #8
 800616e:	2301      	movs	r3, #1
 8006170:	2110      	movs	r1, #16
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f7ff ff7c 	bl	8006070 <lsm6dsr_write_reg>
 8006178:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 800617a:	68fb      	ldr	r3, [r7, #12]
}
 800617c:	4618      	mov	r0, r3
 800617e:	3710      	adds	r7, #16
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b086      	sub	sp, #24
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	460b      	mov	r3, r1
 800618e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_xl_t odr_xl =  val;
 8006190:	78fb      	ldrb	r3, [r7, #3]
 8006192:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8006194:	f107 030c 	add.w	r3, r7, #12
 8006198:	4619      	mov	r1, r3
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 fc54 	bl	8006a48 <lsm6dsr_fsm_enable_get>
 80061a0:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f040 80c4 	bne.w	8006332 <lsm6dsr_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80061aa:	7b3b      	ldrb	r3, [r7, #12]
 80061ac:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80061b0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80061b2:	7b3b      	ldrb	r3, [r7, #12]
 80061b4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80061b8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80061ba:	4313      	orrs	r3, r2
 80061bc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80061be:	7b3b      	ldrb	r3, [r7, #12]
 80061c0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80061c4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80061c6:	4313      	orrs	r3, r2
 80061c8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80061ca:	7b3b      	ldrb	r3, [r7, #12]
 80061cc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80061d0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80061d2:	4313      	orrs	r3, r2
 80061d4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80061d6:	7b3b      	ldrb	r3, [r7, #12]
 80061d8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80061dc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80061de:	4313      	orrs	r3, r2
 80061e0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80061e2:	7b3b      	ldrb	r3, [r7, #12]
 80061e4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80061e8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80061ea:	4313      	orrs	r3, r2
 80061ec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80061ee:	7b3b      	ldrb	r3, [r7, #12]
 80061f0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80061f4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80061f6:	4313      	orrs	r3, r2
 80061f8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80061fa:	7b3b      	ldrb	r3, [r7, #12]
 80061fc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006200:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8006202:	4313      	orrs	r3, r2
 8006204:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8006206:	7b7b      	ldrb	r3, [r7, #13]
 8006208:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800620c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800620e:	4313      	orrs	r3, r2
 8006210:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8006212:	7b7b      	ldrb	r3, [r7, #13]
 8006214:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006218:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800621a:	4313      	orrs	r3, r2
 800621c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800621e:	7b7b      	ldrb	r3, [r7, #13]
 8006220:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006224:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8006226:	4313      	orrs	r3, r2
 8006228:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800622a:	7b7b      	ldrb	r3, [r7, #13]
 800622c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006230:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8006232:	4313      	orrs	r3, r2
 8006234:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8006236:	7b7b      	ldrb	r3, [r7, #13]
 8006238:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800623c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800623e:	4313      	orrs	r3, r2
 8006240:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8006242:	7b7b      	ldrb	r3, [r7, #13]
 8006244:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006248:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800624a:	4313      	orrs	r3, r2
 800624c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800624e:	7b7b      	ldrb	r3, [r7, #13]
 8006250:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006254:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8006256:	4313      	orrs	r3, r2
 8006258:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800625a:	7b7b      	ldrb	r3, [r7, #13]
 800625c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006260:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8006262:	4313      	orrs	r3, r2
 8006264:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006266:	2b01      	cmp	r3, #1
 8006268:	d163      	bne.n	8006332 <lsm6dsr_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 800626a:	f107 030b 	add.w	r3, r7, #11
 800626e:	4619      	mov	r1, r3
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 fc15 	bl	8006aa0 <lsm6dsr_fsm_data_rate_get>
 8006276:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d159      	bne.n	8006332 <lsm6dsr_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 800627e:	7afb      	ldrb	r3, [r7, #11]
 8006280:	2b03      	cmp	r3, #3
 8006282:	d853      	bhi.n	800632c <lsm6dsr_xl_data_rate_set+0x1a8>
 8006284:	a201      	add	r2, pc, #4	; (adr r2, 800628c <lsm6dsr_xl_data_rate_set+0x108>)
 8006286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800628a:	bf00      	nop
 800628c:	0800629d 	.word	0x0800629d
 8006290:	080062af 	.word	0x080062af
 8006294:	080062cd 	.word	0x080062cd
 8006298:	080062f7 	.word	0x080062f7
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF)
 800629c:	78fb      	ldrb	r3, [r7, #3]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d102      	bne.n	80062a8 <lsm6dsr_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 80062a2:	2301      	movs	r3, #1
 80062a4:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80062a6:	e045      	b.n	8006334 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80062a8:	78fb      	ldrb	r3, [r7, #3]
 80062aa:	75fb      	strb	r3, [r7, #23]
            break;
 80062ac:	e042      	b.n	8006334 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 80062ae:	78fb      	ldrb	r3, [r7, #3]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d102      	bne.n	80062ba <lsm6dsr_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 80062b4:	2302      	movs	r3, #2
 80062b6:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80062b8:	e03c      	b.n	8006334 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 80062ba:	78fb      	ldrb	r3, [r7, #3]
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d102      	bne.n	80062c6 <lsm6dsr_xl_data_rate_set+0x142>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 80062c0:	2302      	movs	r3, #2
 80062c2:	75fb      	strb	r3, [r7, #23]
            break;
 80062c4:	e036      	b.n	8006334 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80062c6:	78fb      	ldrb	r3, [r7, #3]
 80062c8:	75fb      	strb	r3, [r7, #23]
            break;
 80062ca:	e033      	b.n	8006334 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 80062cc:	78fb      	ldrb	r3, [r7, #3]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d102      	bne.n	80062d8 <lsm6dsr_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 80062d2:	2303      	movs	r3, #3
 80062d4:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80062d6:	e02d      	b.n	8006334 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 80062d8:	78fb      	ldrb	r3, [r7, #3]
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d102      	bne.n	80062e4 <lsm6dsr_xl_data_rate_set+0x160>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 80062de:	2303      	movs	r3, #3
 80062e0:	75fb      	strb	r3, [r7, #23]
            break;
 80062e2:	e027      	b.n	8006334 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 80062e4:	78fb      	ldrb	r3, [r7, #3]
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	d102      	bne.n	80062f0 <lsm6dsr_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 80062ea:	2303      	movs	r3, #3
 80062ec:	75fb      	strb	r3, [r7, #23]
            break;
 80062ee:	e021      	b.n	8006334 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80062f0:	78fb      	ldrb	r3, [r7, #3]
 80062f2:	75fb      	strb	r3, [r7, #23]
            break;
 80062f4:	e01e      	b.n	8006334 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 80062f6:	78fb      	ldrb	r3, [r7, #3]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d102      	bne.n	8006302 <lsm6dsr_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80062fc:	2304      	movs	r3, #4
 80062fe:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006300:	e018      	b.n	8006334 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8006302:	78fb      	ldrb	r3, [r7, #3]
 8006304:	2b01      	cmp	r3, #1
 8006306:	d102      	bne.n	800630e <lsm6dsr_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8006308:	2304      	movs	r3, #4
 800630a:	75fb      	strb	r3, [r7, #23]
            break;
 800630c:	e012      	b.n	8006334 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 800630e:	78fb      	ldrb	r3, [r7, #3]
 8006310:	2b02      	cmp	r3, #2
 8006312:	d102      	bne.n	800631a <lsm6dsr_xl_data_rate_set+0x196>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8006314:	2304      	movs	r3, #4
 8006316:	75fb      	strb	r3, [r7, #23]
            break;
 8006318:	e00c      	b.n	8006334 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_52Hz)
 800631a:	78fb      	ldrb	r3, [r7, #3]
 800631c:	2b03      	cmp	r3, #3
 800631e:	d102      	bne.n	8006326 <lsm6dsr_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8006320:	2304      	movs	r3, #4
 8006322:	75fb      	strb	r3, [r7, #23]
            break;
 8006324:	e006      	b.n	8006334 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006326:	78fb      	ldrb	r3, [r7, #3]
 8006328:	75fb      	strb	r3, [r7, #23]
            break;
 800632a:	e003      	b.n	8006334 <lsm6dsr_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 800632c:	78fb      	ldrb	r3, [r7, #3]
 800632e:	75fb      	strb	r3, [r7, #23]
            break;
 8006330:	e000      	b.n	8006334 <lsm6dsr_xl_data_rate_set+0x1b0>
        }
      }
 8006332:	bf00      	nop
    }
  }

  if (ret == 0)
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d107      	bne.n	800634a <lsm6dsr_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800633a:	f107 0208 	add.w	r2, r7, #8
 800633e:	2301      	movs	r3, #1
 8006340:	2110      	movs	r1, #16
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f7ff fe7c 	bl	8006040 <lsm6dsr_read_reg>
 8006348:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d10f      	bne.n	8006370 <lsm6dsr_xl_data_rate_set+0x1ec>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8006350:	7dfb      	ldrb	r3, [r7, #23]
 8006352:	f003 030f 	and.w	r3, r3, #15
 8006356:	b2da      	uxtb	r2, r3
 8006358:	7a3b      	ldrb	r3, [r7, #8]
 800635a:	f362 1307 	bfi	r3, r2, #4, #4
 800635e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8006360:	f107 0208 	add.w	r2, r7, #8
 8006364:	2301      	movs	r3, #1
 8006366:	2110      	movs	r1, #16
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f7ff fe81 	bl	8006070 <lsm6dsr_write_reg>
 800636e:	6138      	str	r0, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8006370:	693b      	ldr	r3, [r7, #16]
}
 8006372:	4618      	mov	r0, r3
 8006374:	3718      	adds	r7, #24
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop

0800637c <lsm6dsr_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t val)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	460b      	mov	r3, r1
 8006386:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006388:	f107 0208 	add.w	r2, r7, #8
 800638c:	2301      	movs	r3, #1
 800638e:	2111      	movs	r1, #17
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f7ff fe55 	bl	8006040 <lsm6dsr_read_reg>
 8006396:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d10f      	bne.n	80063be <lsm6dsr_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 800639e:	78fb      	ldrb	r3, [r7, #3]
 80063a0:	f003 030f 	and.w	r3, r3, #15
 80063a4:	b2da      	uxtb	r2, r3
 80063a6:	7a3b      	ldrb	r3, [r7, #8]
 80063a8:	f362 0303 	bfi	r3, r2, #0, #4
 80063ac:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80063ae:	f107 0208 	add.w	r2, r7, #8
 80063b2:	2301      	movs	r3, #1
 80063b4:	2111      	movs	r1, #17
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f7ff fe5a 	bl	8006070 <lsm6dsr_write_reg>
 80063bc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80063be:	68fb      	ldr	r3, [r7, #12]
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3710      	adds	r7, #16
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b086      	sub	sp, #24
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	460b      	mov	r3, r1
 80063d2:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_g_t odr_gy =  val;
 80063d4:	78fb      	ldrb	r3, [r7, #3]
 80063d6:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 80063d8:	f107 030c 	add.w	r3, r7, #12
 80063dc:	4619      	mov	r1, r3
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 fb32 	bl	8006a48 <lsm6dsr_fsm_enable_get>
 80063e4:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f040 80c4 	bne.w	8006576 <lsm6dsr_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80063ee:	7b3b      	ldrb	r3, [r7, #12]
 80063f0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80063f4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80063f6:	7b3b      	ldrb	r3, [r7, #12]
 80063f8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80063fc:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80063fe:	4313      	orrs	r3, r2
 8006400:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8006402:	7b3b      	ldrb	r3, [r7, #12]
 8006404:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006408:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800640a:	4313      	orrs	r3, r2
 800640c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800640e:	7b3b      	ldrb	r3, [r7, #12]
 8006410:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006414:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8006416:	4313      	orrs	r3, r2
 8006418:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800641a:	7b3b      	ldrb	r3, [r7, #12]
 800641c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006420:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8006422:	4313      	orrs	r3, r2
 8006424:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8006426:	7b3b      	ldrb	r3, [r7, #12]
 8006428:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800642c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800642e:	4313      	orrs	r3, r2
 8006430:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8006432:	7b3b      	ldrb	r3, [r7, #12]
 8006434:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006438:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800643a:	4313      	orrs	r3, r2
 800643c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800643e:	7b3b      	ldrb	r3, [r7, #12]
 8006440:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006444:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8006446:	4313      	orrs	r3, r2
 8006448:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800644a:	7b7b      	ldrb	r3, [r7, #13]
 800644c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006450:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8006452:	4313      	orrs	r3, r2
 8006454:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8006456:	7b7b      	ldrb	r3, [r7, #13]
 8006458:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800645c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800645e:	4313      	orrs	r3, r2
 8006460:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8006462:	7b7b      	ldrb	r3, [r7, #13]
 8006464:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006468:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800646a:	4313      	orrs	r3, r2
 800646c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800646e:	7b7b      	ldrb	r3, [r7, #13]
 8006470:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006474:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8006476:	4313      	orrs	r3, r2
 8006478:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800647a:	7b7b      	ldrb	r3, [r7, #13]
 800647c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006480:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8006482:	4313      	orrs	r3, r2
 8006484:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8006486:	7b7b      	ldrb	r3, [r7, #13]
 8006488:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800648c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800648e:	4313      	orrs	r3, r2
 8006490:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8006492:	7b7b      	ldrb	r3, [r7, #13]
 8006494:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006498:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800649a:	4313      	orrs	r3, r2
 800649c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800649e:	7b7b      	ldrb	r3, [r7, #13]
 80064a0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80064a4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80064a6:	4313      	orrs	r3, r2
 80064a8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d163      	bne.n	8006576 <lsm6dsr_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 80064ae:	f107 030b 	add.w	r3, r7, #11
 80064b2:	4619      	mov	r1, r3
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 faf3 	bl	8006aa0 <lsm6dsr_fsm_data_rate_get>
 80064ba:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d159      	bne.n	8006576 <lsm6dsr_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 80064c2:	7afb      	ldrb	r3, [r7, #11]
 80064c4:	2b03      	cmp	r3, #3
 80064c6:	d853      	bhi.n	8006570 <lsm6dsr_gy_data_rate_set+0x1a8>
 80064c8:	a201      	add	r2, pc, #4	; (adr r2, 80064d0 <lsm6dsr_gy_data_rate_set+0x108>)
 80064ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ce:	bf00      	nop
 80064d0:	080064e1 	.word	0x080064e1
 80064d4:	080064f3 	.word	0x080064f3
 80064d8:	08006511 	.word	0x08006511
 80064dc:	0800653b 	.word	0x0800653b
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF)
 80064e0:	78fb      	ldrb	r3, [r7, #3]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d102      	bne.n	80064ec <lsm6dsr_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 80064e6:	2301      	movs	r3, #1
 80064e8:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80064ea:	e045      	b.n	8006578 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80064ec:	78fb      	ldrb	r3, [r7, #3]
 80064ee:	75fb      	strb	r3, [r7, #23]
            break;
 80064f0:	e042      	b.n	8006578 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 80064f2:	78fb      	ldrb	r3, [r7, #3]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d102      	bne.n	80064fe <lsm6dsr_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 80064f8:	2302      	movs	r3, #2
 80064fa:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80064fc:	e03c      	b.n	8006578 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 80064fe:	78fb      	ldrb	r3, [r7, #3]
 8006500:	2b01      	cmp	r3, #1
 8006502:	d102      	bne.n	800650a <lsm6dsr_gy_data_rate_set+0x142>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8006504:	2302      	movs	r3, #2
 8006506:	75fb      	strb	r3, [r7, #23]
            break;
 8006508:	e036      	b.n	8006578 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800650a:	78fb      	ldrb	r3, [r7, #3]
 800650c:	75fb      	strb	r3, [r7, #23]
            break;
 800650e:	e033      	b.n	8006578 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8006510:	78fb      	ldrb	r3, [r7, #3]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d102      	bne.n	800651c <lsm6dsr_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8006516:	2303      	movs	r3, #3
 8006518:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800651a:	e02d      	b.n	8006578 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 800651c:	78fb      	ldrb	r3, [r7, #3]
 800651e:	2b01      	cmp	r3, #1
 8006520:	d102      	bne.n	8006528 <lsm6dsr_gy_data_rate_set+0x160>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8006522:	2303      	movs	r3, #3
 8006524:	75fb      	strb	r3, [r7, #23]
            break;
 8006526:	e027      	b.n	8006578 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 8006528:	78fb      	ldrb	r3, [r7, #3]
 800652a:	2b02      	cmp	r3, #2
 800652c:	d102      	bne.n	8006534 <lsm6dsr_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 800652e:	2303      	movs	r3, #3
 8006530:	75fb      	strb	r3, [r7, #23]
            break;
 8006532:	e021      	b.n	8006578 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006534:	78fb      	ldrb	r3, [r7, #3]
 8006536:	75fb      	strb	r3, [r7, #23]
            break;
 8006538:	e01e      	b.n	8006578 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 800653a:	78fb      	ldrb	r3, [r7, #3]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d102      	bne.n	8006546 <lsm6dsr_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8006540:	2304      	movs	r3, #4
 8006542:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006544:	e018      	b.n	8006578 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8006546:	78fb      	ldrb	r3, [r7, #3]
 8006548:	2b01      	cmp	r3, #1
 800654a:	d102      	bne.n	8006552 <lsm6dsr_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 800654c:	2304      	movs	r3, #4
 800654e:	75fb      	strb	r3, [r7, #23]
            break;
 8006550:	e012      	b.n	8006578 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 8006552:	78fb      	ldrb	r3, [r7, #3]
 8006554:	2b02      	cmp	r3, #2
 8006556:	d102      	bne.n	800655e <lsm6dsr_gy_data_rate_set+0x196>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8006558:	2304      	movs	r3, #4
 800655a:	75fb      	strb	r3, [r7, #23]
            break;
 800655c:	e00c      	b.n	8006578 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_52Hz)
 800655e:	78fb      	ldrb	r3, [r7, #3]
 8006560:	2b03      	cmp	r3, #3
 8006562:	d102      	bne.n	800656a <lsm6dsr_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8006564:	2304      	movs	r3, #4
 8006566:	75fb      	strb	r3, [r7, #23]
            break;
 8006568:	e006      	b.n	8006578 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800656a:	78fb      	ldrb	r3, [r7, #3]
 800656c:	75fb      	strb	r3, [r7, #23]
            break;
 800656e:	e003      	b.n	8006578 <lsm6dsr_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8006570:	78fb      	ldrb	r3, [r7, #3]
 8006572:	75fb      	strb	r3, [r7, #23]
            break;
 8006574:	e000      	b.n	8006578 <lsm6dsr_gy_data_rate_set+0x1b0>
        }
      }
 8006576:	bf00      	nop
    }
  }

  if (ret == 0)
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d107      	bne.n	800658e <lsm6dsr_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800657e:	f107 0208 	add.w	r2, r7, #8
 8006582:	2301      	movs	r3, #1
 8006584:	2111      	movs	r1, #17
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f7ff fd5a 	bl	8006040 <lsm6dsr_read_reg>
 800658c:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d10f      	bne.n	80065b4 <lsm6dsr_gy_data_rate_set+0x1ec>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8006594:	7dfb      	ldrb	r3, [r7, #23]
 8006596:	f003 030f 	and.w	r3, r3, #15
 800659a:	b2da      	uxtb	r2, r3
 800659c:	7a3b      	ldrb	r3, [r7, #8]
 800659e:	f362 1307 	bfi	r3, r2, #4, #4
 80065a2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80065a4:	f107 0208 	add.w	r2, r7, #8
 80065a8:	2301      	movs	r3, #1
 80065aa:	2111      	movs	r1, #17
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f7ff fd5f 	bl	8006070 <lsm6dsr_write_reg>
 80065b2:	6138      	str	r0, [r7, #16]
  }

  return ret;
 80065b4:	693b      	ldr	r3, [r7, #16]
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3718      	adds	r7, #24
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop

080065c0 <lsm6dsr_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	460b      	mov	r3, r1
 80065ca:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80065cc:	f107 0208 	add.w	r2, r7, #8
 80065d0:	2301      	movs	r3, #1
 80065d2:	2112      	movs	r1, #18
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f7ff fd33 	bl	8006040 <lsm6dsr_read_reg>
 80065da:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d10f      	bne.n	8006602 <lsm6dsr_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 80065e2:	78fb      	ldrb	r3, [r7, #3]
 80065e4:	f003 0301 	and.w	r3, r3, #1
 80065e8:	b2da      	uxtb	r2, r3
 80065ea:	7a3b      	ldrb	r3, [r7, #8]
 80065ec:	f362 1386 	bfi	r3, r2, #6, #1
 80065f0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80065f2:	f107 0208 	add.w	r2, r7, #8
 80065f6:	2301      	movs	r3, #1
 80065f8:	2112      	movs	r1, #18
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7ff fd38 	bl	8006070 <lsm6dsr_write_reg>
 8006600:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006602:	68fb      	ldr	r3, [r7, #12]
}
 8006604:	4618      	mov	r0, r3
 8006606:	3710      	adds	r7, #16
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <lsm6dsr_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8006616:	f107 0208 	add.w	r2, r7, #8
 800661a:	2301      	movs	r3, #1
 800661c:	211e      	movs	r1, #30
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f7ff fd0e 	bl	8006040 <lsm6dsr_read_reg>
 8006624:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 8006626:	7a3b      	ldrb	r3, [r7, #8]
 8006628:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800662c:	b2db      	uxtb	r3, r3
 800662e:	461a      	mov	r2, r3
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	701a      	strb	r2, [r3, #0]

  return ret;
 8006634:	68fb      	ldr	r3, [r7, #12]
}
 8006636:	4618      	mov	r0, r3
 8006638:	3710      	adds	r7, #16
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}

0800663e <lsm6dsr_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 800663e:	b580      	push	{r7, lr}
 8006640:	b084      	sub	sp, #16
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
 8006646:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8006648:	f107 0208 	add.w	r2, r7, #8
 800664c:	2301      	movs	r3, #1
 800664e:	211e      	movs	r1, #30
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f7ff fcf5 	bl	8006040 <lsm6dsr_read_reg>
 8006656:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 8006658:	7a3b      	ldrb	r3, [r7, #8]
 800665a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800665e:	b2db      	uxtb	r3, r3
 8006660:	461a      	mov	r2, r3
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	701a      	strb	r2, [r3, #0]

  return ret;
 8006666:	68fb      	ldr	r3, [r7, #12]
}
 8006668:	4618      	mov	r0, r3
 800666a:	3710      	adds	r7, #16
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <lsm6dsr_temp_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 800667a:	f107 0208 	add.w	r2, r7, #8
 800667e:	2301      	movs	r3, #1
 8006680:	211e      	movs	r1, #30
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f7ff fcdc 	bl	8006040 <lsm6dsr_read_reg>
 8006688:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.tda;
 800668a:	7a3b      	ldrb	r3, [r7, #8]
 800668c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006690:	b2db      	uxtb	r3, r3
 8006692:	461a      	mov	r2, r3
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	701a      	strb	r2, [r3, #0]

  return ret;
 8006698:	68fb      	ldr	r3, [r7, #12]
}
 800669a:	4618      	mov	r0, r3
 800669c:	3710      	adds	r7, #16
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}

080066a2 <lsm6dsr_temperature_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80066a2:	b580      	push	{r7, lr}
 80066a4:	b084      	sub	sp, #16
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
 80066aa:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUT_TEMP_L, buff, 2);
 80066ac:	f107 0208 	add.w	r2, r7, #8
 80066b0:	2302      	movs	r3, #2
 80066b2:	2120      	movs	r1, #32
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f7ff fcc3 	bl	8006040 <lsm6dsr_read_reg>
 80066ba:	60f8      	str	r0, [r7, #12]
  val[0] = (int16_t)buff[1];
 80066bc:	7a7b      	ldrb	r3, [r7, #9]
 80066be:	b21a      	sxth	r2, r3
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	021b      	lsls	r3, r3, #8
 80066ce:	b29a      	uxth	r2, r3
 80066d0:	7a3b      	ldrb	r3, [r7, #8]
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	4413      	add	r3, r2
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	b21a      	sxth	r2, r3
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	801a      	strh	r2, [r3, #0]

  return ret;
 80066de:	68fb      	ldr	r3, [r7, #12]
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3710      	adds	r7, #16
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <lsm6dsr_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b086      	sub	sp, #24
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_G, buff, 6);
 80066f2:	f107 020c 	add.w	r2, r7, #12
 80066f6:	2306      	movs	r3, #6
 80066f8:	2122      	movs	r1, #34	; 0x22
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f7ff fca0 	bl	8006040 <lsm6dsr_read_reg>
 8006700:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8006702:	7b7b      	ldrb	r3, [r7, #13]
 8006704:	b21a      	sxth	r2, r3
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006710:	b29b      	uxth	r3, r3
 8006712:	021b      	lsls	r3, r3, #8
 8006714:	b29a      	uxth	r2, r3
 8006716:	7b3b      	ldrb	r3, [r7, #12]
 8006718:	b29b      	uxth	r3, r3
 800671a:	4413      	add	r3, r2
 800671c:	b29b      	uxth	r3, r3
 800671e:	b21a      	sxth	r2, r3
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8006724:	7bfa      	ldrb	r2, [r7, #15]
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	3302      	adds	r3, #2
 800672a:	b212      	sxth	r2, r2
 800672c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	3302      	adds	r3, #2
 8006732:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006736:	b29b      	uxth	r3, r3
 8006738:	021b      	lsls	r3, r3, #8
 800673a:	b29a      	uxth	r2, r3
 800673c:	7bbb      	ldrb	r3, [r7, #14]
 800673e:	b29b      	uxth	r3, r3
 8006740:	4413      	add	r3, r2
 8006742:	b29a      	uxth	r2, r3
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	3302      	adds	r3, #2
 8006748:	b212      	sxth	r2, r2
 800674a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800674c:	7c7a      	ldrb	r2, [r7, #17]
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	3304      	adds	r3, #4
 8006752:	b212      	sxth	r2, r2
 8006754:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	3304      	adds	r3, #4
 800675a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800675e:	b29b      	uxth	r3, r3
 8006760:	021b      	lsls	r3, r3, #8
 8006762:	b29a      	uxth	r2, r3
 8006764:	7c3b      	ldrb	r3, [r7, #16]
 8006766:	b29b      	uxth	r3, r3
 8006768:	4413      	add	r3, r2
 800676a:	b29a      	uxth	r2, r3
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	3304      	adds	r3, #4
 8006770:	b212      	sxth	r2, r2
 8006772:	801a      	strh	r2, [r3, #0]

  return ret;
 8006774:	697b      	ldr	r3, [r7, #20]
}
 8006776:	4618      	mov	r0, r3
 8006778:	3718      	adds	r7, #24
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <lsm6dsr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800677e:	b580      	push	{r7, lr}
 8006780:	b086      	sub	sp, #24
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
 8006786:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_A, buff, 6);
 8006788:	f107 020c 	add.w	r2, r7, #12
 800678c:	2306      	movs	r3, #6
 800678e:	2128      	movs	r1, #40	; 0x28
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f7ff fc55 	bl	8006040 <lsm6dsr_read_reg>
 8006796:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8006798:	7b7b      	ldrb	r3, [r7, #13]
 800679a:	b21a      	sxth	r2, r3
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	021b      	lsls	r3, r3, #8
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	7b3b      	ldrb	r3, [r7, #12]
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	4413      	add	r3, r2
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	b21a      	sxth	r2, r3
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80067ba:	7bfa      	ldrb	r2, [r7, #15]
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	3302      	adds	r3, #2
 80067c0:	b212      	sxth	r2, r2
 80067c2:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	3302      	adds	r3, #2
 80067c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	021b      	lsls	r3, r3, #8
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	7bbb      	ldrb	r3, [r7, #14]
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	4413      	add	r3, r2
 80067d8:	b29a      	uxth	r2, r3
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	3302      	adds	r3, #2
 80067de:	b212      	sxth	r2, r2
 80067e0:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80067e2:	7c7a      	ldrb	r2, [r7, #17]
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	3304      	adds	r3, #4
 80067e8:	b212      	sxth	r2, r2
 80067ea:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	3304      	adds	r3, #4
 80067f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	021b      	lsls	r3, r3, #8
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	7c3b      	ldrb	r3, [r7, #16]
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	4413      	add	r3, r2
 8006800:	b29a      	uxth	r2, r3
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	3304      	adds	r3, #4
 8006806:	b212      	sxth	r2, r2
 8006808:	801a      	strh	r2, [r3, #0]

  return ret;
 800680a:	697b      	ldr	r3, [r7, #20]
}
 800680c:	4618      	mov	r0, r3
 800680e:	3718      	adds	r7, #24
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	460b      	mov	r3, r1
 800681e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8006820:	f107 0208 	add.w	r2, r7, #8
 8006824:	2301      	movs	r3, #1
 8006826:	2101      	movs	r1, #1
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f7ff fc09 	bl	8006040 <lsm6dsr_read_reg>
 800682e:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d10f      	bne.n	8006856 <lsm6dsr_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 8006836:	78fb      	ldrb	r3, [r7, #3]
 8006838:	f003 0303 	and.w	r3, r3, #3
 800683c:	b2da      	uxtb	r2, r3
 800683e:	7a3b      	ldrb	r3, [r7, #8]
 8006840:	f362 1387 	bfi	r3, r2, #6, #2
 8006844:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8006846:	f107 0208 	add.w	r2, r7, #8
 800684a:	2301      	movs	r3, #1
 800684c:	2101      	movs	r1, #1
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f7ff fc0e 	bl	8006070 <lsm6dsr_write_reg>
 8006854:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 8006856:	68fb      	ldr	r3, [r7, #12]
}
 8006858:	4618      	mov	r0, r3
 800685a:	3710      	adds	r7, #16
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 800686a:	2301      	movs	r3, #1
 800686c:	683a      	ldr	r2, [r7, #0]
 800686e:	210f      	movs	r1, #15
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f7ff fbe5 	bl	8006040 <lsm6dsr_read_reg>
 8006876:	60f8      	str	r0, [r7, #12]

  return ret;
 8006878:	68fb      	ldr	r3, [r7, #12]
}
 800687a:	4618      	mov	r0, r3
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <lsm6dsr_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006882:	b580      	push	{r7, lr}
 8006884:	b084      	sub	sp, #16
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
 800688a:	460b      	mov	r3, r1
 800688c:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800688e:	f107 0208 	add.w	r2, r7, #8
 8006892:	2301      	movs	r3, #1
 8006894:	2112      	movs	r1, #18
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f7ff fbd2 	bl	8006040 <lsm6dsr_read_reg>
 800689c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d10f      	bne.n	80068c4 <lsm6dsr_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 80068a4:	78fb      	ldrb	r3, [r7, #3]
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	b2da      	uxtb	r2, r3
 80068ac:	7a3b      	ldrb	r3, [r7, #8]
 80068ae:	f362 0300 	bfi	r3, r2, #0, #1
 80068b2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80068b4:	f107 0208 	add.w	r2, r7, #8
 80068b8:	2301      	movs	r3, #1
 80068ba:	2112      	movs	r1, #18
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f7ff fbd7 	bl	8006070 <lsm6dsr_write_reg>
 80068c2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80068c4:	68fb      	ldr	r3, [r7, #12]
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3710      	adds	r7, #16
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <lsm6dsr_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b084      	sub	sp, #16
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
 80068d6:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80068d8:	f107 0208 	add.w	r2, r7, #8
 80068dc:	2301      	movs	r3, #1
 80068de:	2112      	movs	r1, #18
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f7ff fbad 	bl	8006040 <lsm6dsr_read_reg>
 80068e6:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 80068e8:	7a3b      	ldrb	r3, [r7, #8]
 80068ea:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	461a      	mov	r2, r3
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	701a      	strb	r2, [r3, #0]

  return ret;
 80068f6:	68fb      	ldr	r3, [r7, #12]
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3710      	adds	r7, #16
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <lsm6dsr_xl_filter_lp2_set>:
  * @param  val    Change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_filter_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	460b      	mov	r3, r1
 800690a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800690c:	f107 0208 	add.w	r2, r7, #8
 8006910:	2301      	movs	r3, #1
 8006912:	2110      	movs	r1, #16
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f7ff fb93 	bl	8006040 <lsm6dsr_read_reg>
 800691a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d10f      	bne.n	8006942 <lsm6dsr_xl_filter_lp2_set+0x42>
  {
    ctrl1_xl.lpf2_xl_en = (uint8_t)val;
 8006922:	78fb      	ldrb	r3, [r7, #3]
 8006924:	f003 0301 	and.w	r3, r3, #1
 8006928:	b2da      	uxtb	r2, r3
 800692a:	7a3b      	ldrb	r3, [r7, #8]
 800692c:	f362 0341 	bfi	r3, r2, #1, #1
 8006930:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8006932:	f107 0208 	add.w	r2, r7, #8
 8006936:	2301      	movs	r3, #1
 8006938:	2110      	movs	r1, #16
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f7ff fb98 	bl	8006070 <lsm6dsr_write_reg>
 8006940:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8006942:	68fb      	ldr	r3, [r7, #12]
}
 8006944:	4618      	mov	r0, r3
 8006946:	3710      	adds	r7, #16
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <lsm6dsr_xl_hp_path_on_out_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                      lsm6dsr_hp_slope_xl_en_t val)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	460b      	mov	r3, r1
 8006956:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 8006958:	f107 0208 	add.w	r2, r7, #8
 800695c:	2301      	movs	r3, #1
 800695e:	2117      	movs	r1, #23
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f7ff fb6d 	bl	8006040 <lsm6dsr_read_reg>
 8006966:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d121      	bne.n	80069b2 <lsm6dsr_xl_hp_path_on_out_set+0x66>
  {
    ctrl8_xl.hp_slope_xl_en = (((uint8_t)val & 0x10U) >> 4);
 800696e:	78fb      	ldrb	r3, [r7, #3]
 8006970:	091b      	lsrs	r3, r3, #4
 8006972:	f003 0301 	and.w	r3, r3, #1
 8006976:	b2da      	uxtb	r2, r3
 8006978:	7a3b      	ldrb	r3, [r7, #8]
 800697a:	f362 0382 	bfi	r3, r2, #2, #1
 800697e:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_ref_mode_xl = (((uint8_t)val & 0x20U) >> 5);
 8006980:	78fb      	ldrb	r3, [r7, #3]
 8006982:	095b      	lsrs	r3, r3, #5
 8006984:	f003 0301 	and.w	r3, r3, #1
 8006988:	b2da      	uxtb	r2, r3
 800698a:	7a3b      	ldrb	r3, [r7, #8]
 800698c:	f362 1304 	bfi	r3, r2, #4, #1
 8006990:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t)val & 0x07U;
 8006992:	78fb      	ldrb	r3, [r7, #3]
 8006994:	f003 0307 	and.w	r3, r3, #7
 8006998:	b2da      	uxtb	r2, r3
 800699a:	7a3b      	ldrb	r3, [r7, #8]
 800699c:	f362 1347 	bfi	r3, r2, #5, #3
 80069a0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL8_XL,
 80069a2:	f107 0208 	add.w	r2, r7, #8
 80069a6:	2301      	movs	r3, #1
 80069a8:	2117      	movs	r1, #23
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f7ff fb60 	bl	8006070 <lsm6dsr_write_reg>
 80069b0:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl8_xl, 1);
  }

  return ret;
 80069b2:	68fb      	ldr	r3, [r7, #12]
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3710      	adds	r7, #16
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <lsm6dsr_i3c_disable_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dsr_i3c_disable_t val)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b086      	sub	sp, #24
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	460b      	mov	r3, r1
 80069c6:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl9_xl_t ctrl9_xl;
  lsm6dsr_i3c_bus_avb_t i3c_bus_avb;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 80069c8:	f107 0210 	add.w	r2, r7, #16
 80069cc:	2301      	movs	r3, #1
 80069ce:	2118      	movs	r1, #24
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f7ff fb35 	bl	8006040 <lsm6dsr_read_reg>
 80069d6:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d111      	bne.n	8006a02 <lsm6dsr_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 80069de:	78fb      	ldrb	r3, [r7, #3]
 80069e0:	09db      	lsrs	r3, r3, #7
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	f003 0301 	and.w	r3, r3, #1
 80069e8:	b2da      	uxtb	r2, r3
 80069ea:	7c3b      	ldrb	r3, [r7, #16]
 80069ec:	f362 0341 	bfi	r3, r2, #1, #1
 80069f0:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL9_XL,
 80069f2:	f107 0210 	add.w	r2, r7, #16
 80069f6:	2301      	movs	r3, #1
 80069f8:	2118      	movs	r1, #24
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f7ff fb38 	bl	8006070 <lsm6dsr_write_reg>
 8006a00:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl9_xl, 1);
  }

  if (ret == 0)
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d107      	bne.n	8006a18 <lsm6dsr_i3c_disable_set+0x5c>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 8006a08:	f107 020c 	add.w	r2, r7, #12
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	2162      	movs	r1, #98	; 0x62
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f7ff fb15 	bl	8006040 <lsm6dsr_read_reg>
 8006a16:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d10f      	bne.n	8006a3e <lsm6dsr_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8006a1e:	78fb      	ldrb	r3, [r7, #3]
 8006a20:	f003 0303 	and.w	r3, r3, #3
 8006a24:	b2da      	uxtb	r2, r3
 8006a26:	7b3b      	ldrb	r3, [r7, #12]
 8006a28:	f362 03c4 	bfi	r3, r2, #3, #2
 8006a2c:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 8006a2e:	f107 020c 	add.w	r2, r7, #12
 8006a32:	2301      	movs	r3, #1
 8006a34:	2162      	movs	r1, #98	; 0x62
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f7ff fb1a 	bl	8006070 <lsm6dsr_write_reg>
 8006a3c:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 8006a3e:	697b      	ldr	r3, [r7, #20]
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3718      	adds	r7, #24
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8006a52:	2102      	movs	r1, #2
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f7ff fedd 	bl	8006814 <lsm6dsr_mem_bank_set>
 8006a5a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d106      	bne.n	8006a70 <lsm6dsr_fsm_enable_get+0x28>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 8006a62:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 8006a64:	2301      	movs	r3, #1
 8006a66:	2146      	movs	r1, #70	; 0x46
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f7ff fae9 	bl	8006040 <lsm6dsr_read_reg>
 8006a6e:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d107      	bne.n	8006a86 <lsm6dsr_fsm_enable_get+0x3e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	2147      	movs	r1, #71	; 0x47
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f7ff fade 	bl	8006040 <lsm6dsr_read_reg>
 8006a84:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d104      	bne.n	8006a96 <lsm6dsr_fsm_enable_get+0x4e>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f7ff fec0 	bl	8006814 <lsm6dsr_mem_bank_set>
 8006a94:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006a96:	68fb      	ldr	r3, [r7, #12]
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3710      	adds	r7, #16
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8006aaa:	2102      	movs	r1, #2
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f7ff feb1 	bl	8006814 <lsm6dsr_mem_bank_set>
 8006ab2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d107      	bne.n	8006aca <lsm6dsr_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 8006aba:	f107 0208 	add.w	r2, r7, #8
 8006abe:	2301      	movs	r3, #1
 8006ac0:	215f      	movs	r1, #95	; 0x5f
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f7ff fabc 	bl	8006040 <lsm6dsr_read_reg>
 8006ac8:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d104      	bne.n	8006ada <lsm6dsr_fsm_data_rate_get+0x3a>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8006ad0:	2100      	movs	r1, #0
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f7ff fe9e 	bl	8006814 <lsm6dsr_mem_bank_set>
 8006ad8:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 8006ada:	7a3b      	ldrb	r3, [r7, #8]
 8006adc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	2b03      	cmp	r3, #3
 8006ae4:	d81a      	bhi.n	8006b1c <lsm6dsr_fsm_data_rate_get+0x7c>
 8006ae6:	a201      	add	r2, pc, #4	; (adr r2, 8006aec <lsm6dsr_fsm_data_rate_get+0x4c>)
 8006ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aec:	08006afd 	.word	0x08006afd
 8006af0:	08006b05 	.word	0x08006b05
 8006af4:	08006b0d 	.word	0x08006b0d
 8006af8:	08006b15 	.word	0x08006b15
  {
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	2200      	movs	r2, #0
 8006b00:	701a      	strb	r2, [r3, #0]
      break;
 8006b02:	e00f      	b.n	8006b24 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	2201      	movs	r2, #1
 8006b08:	701a      	strb	r2, [r3, #0]
      break;
 8006b0a:	e00b      	b.n	8006b24 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	2202      	movs	r2, #2
 8006b10:	701a      	strb	r2, [r3, #0]
      break;
 8006b12:	e007      	b.n	8006b24 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	2203      	movs	r2, #3
 8006b18:	701a      	strb	r2, [r3, #0]
      break;
 8006b1a:	e003      	b.n	8006b24 <lsm6dsr_fsm_data_rate_get+0x84>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	701a      	strb	r2, [r3, #0]
      break;
 8006b22:	bf00      	nop
  }

  return ret;
 8006b24:	68fb      	ldr	r3, [r7, #12]
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3710      	adds	r7, #16
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop

08006b30 <_ZN7TwoWire5writeEi>:
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	683a      	ldr	r2, [r7, #0]
 8006b42:	b2d2      	uxtb	r2, r2
 8006b44:	4611      	mov	r1, r2
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	4798      	blx	r3
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3708      	adds	r7, #8
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <_Z17ISBDDiagsCallbackP10IridiumSBDc>:
void ISBDConsoleCallback(IridiumSBD *device, char c) __attribute__((weak));
void ISBDDiagsCallback(IridiumSBD *device, char c) __attribute__((weak));

bool ISBDCallback() { return true; }
void ISBDConsoleCallback(IridiumSBD *device, char c) { }
void ISBDDiagsCallback(IridiumSBD *device, char c) { }
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	70fb      	strb	r3, [r7, #3]
 8006b60:	bf00      	nop
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <_ZN10IridiumSBD5sleepEv>:
   return ret;
}

// Gracefully put device to lower power mode (if sleep pin provided)
int IridiumSBD::sleep()
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
   if (this->reentrant)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d001      	beq.n	8006b82 <_ZN10IridiumSBD5sleepEv+0x16>
      return ISBD_REENTRANT;
 8006b7e:	2309      	movs	r3, #9
 8006b80:	e025      	b.n	8006bce <_ZN10IridiumSBD5sleepEv+0x62>

   if (this->useSerial && (this->sleepPin == -1))
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	7c5b      	ldrb	r3, [r3, #17]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d006      	beq.n	8006b98 <_ZN10IridiumSBD5sleepEv+0x2c>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b92:	d101      	bne.n	8006b98 <_ZN10IridiumSBD5sleepEv+0x2c>
      return ISBD_NO_SLEEP_PIN;
 8006b94:	230b      	movs	r3, #11
 8006b96:	e01a      	b.n	8006bce <_ZN10IridiumSBD5sleepEv+0x62>

   this->reentrant = true;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   int ret = internalSleep();
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 f8d3 	bl	8006d4c <_ZN10IridiumSBD13internalSleepEv>
 8006ba6:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

   if (ret == ISBD_SUCCESS)
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d10a      	bne.n	8006bcc <_ZN10IridiumSBD5sleepEv+0x60>
   {
      if (this->useSerial)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	7c5b      	ldrb	r3, [r3, #17]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d002      	beq.n	8006bc4 <_ZN10IridiumSBD5sleepEv+0x58>
         endSerialPort(); // Apollo3 v2.1 Serial fix
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 f976 	bl	8006eb0 <_ZN10IridiumSBD13endSerialPortEv>
      power(false); // power off
 8006bc4:	2100      	movs	r1, #0
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 f8d2 	bl	8006d70 <_ZN10IridiumSBD5powerEb>
   }

   return ret;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3710      	adds	r7, #16
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
	...

08006bd8 <_ZN10IridiumSBD21enableSuperCapChargerEb>:

   return ISBD_SUCCESS;
}

void IridiumSBD::enableSuperCapCharger(bool enable)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	460b      	mov	r3, r1
 8006be2:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the charger manually)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	7c5b      	ldrb	r3, [r3, #17]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d004      	beq.n	8006bf6 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x1e>
  {
    diagprint(F("enableSuperCapCharger is only valid when using I2C on the Qwiic Iridium\r\n"));
 8006bec:	4918      	ldr	r1, [pc, #96]	; (8006c50 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x78>)
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 f96c 	bl	8006ecc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8006bf4:	e028      	b.n	8006c48 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x70>
  }

  // Enable/disable the supercapacitor charger by pulling its SHDN pin high/low
  check9603pins(); // Update IO_REGISTER
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 f986 	bl	8006f08 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8006bfc:	78fb      	ldrb	r3, [r7, #3]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00b      	beq.n	8006c1a <_ZN10IridiumSBD21enableSuperCapChargerEb+0x42>
  {
    IO_REGISTER |= IO_SHDN; // Set the SHDN bit
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	b2da      	uxtb	r2, r3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8006c18:	e00f      	b.n	8006c3a <_ZN10IridiumSBD21enableSuperCapChargerEb+0x62>
  }
  else
  {
    IO_REGISTER &= ~IO_SHDN; // Clear the SHDN bit
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8006c20:	b25a      	sxtb	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006c28:	b25b      	sxtb	r3, r3
 8006c2a:	43db      	mvns	r3, r3
 8006c2c:	b25b      	sxtb	r3, r3
 8006c2e:	4013      	ands	r3, r2
 8006c30:	b25b      	sxtb	r3, r3
 8006c32:	b2da      	uxtb	r2, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  }
  set9603pins(IO_REGISTER); // Update the pins
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8006c40:	4619      	mov	r1, r3
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 f999 	bl	8006f7a <_ZN10IridiumSBD11set9603pinsEh>
}
 8006c48:	3708      	adds	r7, #8
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	08018ff8 	.word	0x08018ff8

08006c54 <_ZN10IridiumSBD16enable9603NpowerEb>:
    return(false);
  }
}

void IridiumSBD::enable9603Npower(bool enable)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b082      	sub	sp, #8
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N power manually)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	7c5b      	ldrb	r3, [r3, #17]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d004      	beq.n	8006c72 <_ZN10IridiumSBD16enable9603NpowerEb+0x1e>
  {
    diagprint(F("enable9603Npower is only valid when using I2C on the Qwiic Iridium\r\n"));
 8006c68:	4918      	ldr	r1, [pc, #96]	; (8006ccc <_ZN10IridiumSBD16enable9603NpowerEb+0x78>)
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 f92e 	bl	8006ecc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8006c70:	e028      	b.n	8006cc4 <_ZN10IridiumSBD16enable9603NpowerEb+0x70>
  }

  // Enable/disable power to the 9603N by pulling PWR_EN high/low
  check9603pins(); // Update IO_REGISTER
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 f948 	bl	8006f08 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8006c78:	78fb      	ldrb	r3, [r7, #3]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00b      	beq.n	8006c96 <_ZN10IridiumSBD16enable9603NpowerEb+0x42>
  {
    IO_REGISTER |= IO_PWR_EN; // Set the PWR_EN bit
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	b2da      	uxtb	r2, r3
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8006c94:	e00f      	b.n	8006cb6 <_ZN10IridiumSBD16enable9603NpowerEb+0x62>
  }
  else
  {
    IO_REGISTER &= ~IO_PWR_EN; // Clear the PWR_EN bit
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8006c9c:	b25a      	sxtb	r2, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8006ca4:	b25b      	sxtb	r3, r3
 8006ca6:	43db      	mvns	r3, r3
 8006ca8:	b25b      	sxtb	r3, r3
 8006caa:	4013      	ands	r3, r2
 8006cac:	b25b      	sxtb	r3, r3
 8006cae:	b2da      	uxtb	r2, r3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  }
  set9603pins(IO_REGISTER); // Update the pins
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 f95b 	bl	8006f7a <_ZN10IridiumSBD11set9603pinsEh>
}
 8006cc4:	3708      	adds	r7, #8
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	08019090 	.word	0x08019090

08006cd0 <_ZN10IridiumSBD10enable9603Eb>:

void IridiumSBD::enable9603(bool enable)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b082      	sub	sp, #8
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	460b      	mov	r3, r1
 8006cda:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N manually)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	7c5b      	ldrb	r3, [r3, #17]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d004      	beq.n	8006cee <_ZN10IridiumSBD10enable9603Eb+0x1e>
  {
    diagprint(F("enable9603 is only valid when using I2C on the Qwiic Iridium\r\n"));
 8006ce4:	4918      	ldr	r1, [pc, #96]	; (8006d48 <_ZN10IridiumSBD10enable9603Eb+0x78>)
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 f8f0 	bl	8006ecc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8006cec:	e028      	b.n	8006d40 <_ZN10IridiumSBD10enable9603Eb+0x70>
  }

  // Enable/disable the 9603 by pulling ON_OFF high/low
  check9603pins(); // Update IO_REGISTER
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 f90a 	bl	8006f08 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8006cf4:	78fb      	ldrb	r3, [r7, #3]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d00b      	beq.n	8006d12 <_ZN10IridiumSBD10enable9603Eb+0x42>
  {
    IO_REGISTER |= IO_ON_OFF; // Set the ON_OFF bit
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 8006d06:	4313      	orrs	r3, r2
 8006d08:	b2da      	uxtb	r2, r3
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8006d10:	e00f      	b.n	8006d32 <_ZN10IridiumSBD10enable9603Eb+0x62>
  }
  else
  {
    IO_REGISTER &= ~IO_ON_OFF; // Clear the ON_OFF bit
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8006d18:	b25a      	sxtb	r2, r3
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 8006d20:	b25b      	sxtb	r3, r3
 8006d22:	43db      	mvns	r3, r3
 8006d24:	b25b      	sxtb	r3, r3
 8006d26:	4013      	ands	r3, r2
 8006d28:	b25b      	sxtb	r3, r3
 8006d2a:	b2da      	uxtb	r2, r3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  }
  set9603pins(IO_REGISTER); // Update the pins
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8006d38:	4619      	mov	r1, r3
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 f91d 	bl	8006f7a <_ZN10IridiumSBD11set9603pinsEh>
}
 8006d40:	3708      	adds	r7, #8
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	080190d8 	.word	0x080190d8

08006d4c <_ZN10IridiumSBD13internalSleepEv>:
   okToProceed = isxdigit(msstmResponseBuf[0]);
   return ISBD_SUCCESS;
}

int IridiumSBD::internalSleep()
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
   if (this->asleep)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d001      	beq.n	8006d62 <_ZN10IridiumSBD13internalSleepEv+0x16>
      return ISBD_IS_ASLEEP;
 8006d5e:	230a      	movs	r3, #10
 8006d60:	e000      	b.n	8006d64 <_ZN10IridiumSBD13internalSleepEv+0x18>

   if (!waitForATResponse())
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
#endif

   return ISBD_SUCCESS;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <_ZN10IridiumSBD5powerEb>:

   return rxOverflow ? ISBD_RX_OVERFLOW : ISBD_SUCCESS;
}

void IridiumSBD::power(bool on)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	460b      	mov	r3, r1
 8006d7a:	70fb      	strb	r3, [r7, #3]
   this->asleep = !on;
 8006d7c:	78fb      	ldrb	r3, [r7, #3]
 8006d7e:	f083 0301 	eor.w	r3, r3, #1
 8006d82:	b2da      	uxtb	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

   if (this->useSerial)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	7c5b      	ldrb	r3, [r3, #17]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d010      	beq.n	8006db4 <_ZN10IridiumSBD5powerEb+0x44>
   {
      if (this->sleepPin == -1)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d9a:	d04a      	beq.n	8006e32 <_ZN10IridiumSBD5powerEb+0xc2>
      {
         return;
      }
      else
      {
          if (this->sleepPinConfigured == false)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d106      	bne.n	8006db4 <_ZN10IridiumSBD5powerEb+0x44>
          {
             configureSleepPin();
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 f84c 	bl	8006e44 <_ZN10IridiumSBD17configureSleepPinEv>
             this->sleepPinConfigured = true;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          }
      }
   }

   if (on)
 8006db4:	78fb      	ldrb	r3, [r7, #3]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d017      	beq.n	8006dea <_ZN10IridiumSBD5powerEb+0x7a>
   {
      diagprint(F("Powering on modem...\r\n"));
 8006dba:	4920      	ldr	r1, [pc, #128]	; (8006e3c <_ZN10IridiumSBD5powerEb+0xcc>)
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 f885 	bl	8006ecc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	7c5b      	ldrb	r3, [r3, #17]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d004      	beq.n	8006dd4 <_ZN10IridiumSBD5powerEb+0x64>
      {
         setSleepPin(HIGH); // HIGH = awake
 8006dca:	2101      	movs	r1, #1
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 f847 	bl	8006e60 <_ZN10IridiumSBD11setSleepPinEh>
 8006dd2:	e003      	b.n	8006ddc <_ZN10IridiumSBD5powerEb+0x6c>
      }
      else
      {
         enable9603(true);
 8006dd4:	2101      	movs	r1, #1
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f7ff ff7a 	bl	8006cd0 <_ZN10IridiumSBD10enable9603Eb>
      }
      lastPowerOnTime = millis();
 8006ddc:	f002 f82e 	bl	8008e3c <HAL_GetTick>
 8006de0:	4602      	mov	r2, r0
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8006de8:	e024      	b.n	8006e34 <_ZN10IridiumSBD5powerEb+0xc4>
   }
   else
   {
      // Best Practices Guide suggests waiting at least 2 seconds
      // before powering off again
      unsigned long elapsed = millis() - lastPowerOnTime;
 8006dea:	f002 f827 	bl	8008e3c <HAL_GetTick>
 8006dee:	4602      	mov	r2, r0
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006df6:	1ad3      	subs	r3, r2, r3
 8006df8:	60fb      	str	r3, [r7, #12]
      if (elapsed < 2000UL)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006e00:	d205      	bcs.n	8006e0e <_ZN10IridiumSBD5powerEb+0x9e>
         //delay(2000UL - elapsed); TODO
    	  HAL_Delay(2000UL - elapsed);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f002 f823 	bl	8008e54 <HAL_Delay>

      diagprint(F("Powering off modem...\r\n"));
 8006e0e:	490c      	ldr	r1, [pc, #48]	; (8006e40 <_ZN10IridiumSBD5powerEb+0xd0>)
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 f85b 	bl	8006ecc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	7c5b      	ldrb	r3, [r3, #17]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d004      	beq.n	8006e28 <_ZN10IridiumSBD5powerEb+0xb8>
      {
         setSleepPin(LOW); // LOW = asleep
 8006e1e:	2100      	movs	r1, #0
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 f81d 	bl	8006e60 <_ZN10IridiumSBD11setSleepPinEh>
 8006e26:	e005      	b.n	8006e34 <_ZN10IridiumSBD5powerEb+0xc4>
      }
      else
      {
         enable9603(false);
 8006e28:	2100      	movs	r1, #0
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f7ff ff50 	bl	8006cd0 <_ZN10IridiumSBD10enable9603Eb>
 8006e30:	e000      	b.n	8006e34 <_ZN10IridiumSBD5powerEb+0xc4>
         return;
 8006e32:	bf00      	nop
      }
   }
}
 8006e34:	3710      	adds	r7, #16
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	08019568 	.word	0x08019568
 8006e40:	08019580 	.word	0x08019580

08006e44 <_ZN10IridiumSBD17configureSleepPinEv>:

void IridiumSBD::configureSleepPin()
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
	//pinMode(sleepPin, OUTPUT); // Make the sleep pin an output TODO (doesnt work with this)
   //pinMode(sleepPin, OUTPUT_PP); // Make the sleep pin an output
   diagprint(F("configureSleepPin: sleepPin configured\r\n"));
 8006e4c:	4903      	ldr	r1, [pc, #12]	; (8006e5c <_ZN10IridiumSBD17configureSleepPinEv+0x18>)
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 f83c 	bl	8006ecc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8006e54:	bf00      	nop
 8006e56:	3708      	adds	r7, #8
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	08019598 	.word	0x08019598

08006e60 <_ZN10IridiumSBD11setSleepPinEh>:

void IridiumSBD::setSleepPin(uint8_t enable)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b082      	sub	sp, #8
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	460b      	mov	r3, r1
 8006e6a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(sleepPin_GPIO_Port,sleepPin_Pin,GPIO_PIN_SET);
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	2108      	movs	r1, #8
 8006e70:	480b      	ldr	r0, [pc, #44]	; (8006ea0 <_ZN10IridiumSBD11setSleepPinEh+0x40>)
 8006e72:	f002 fefb 	bl	8009c6c <HAL_GPIO_WritePin>
   //digitalWrite(this->sleepPin, enable); // HIGH = awake, LOW = asleep TODO
   diagprint(F("setSleepPin: sleepPin set "));
 8006e76:	490b      	ldr	r1, [pc, #44]	; (8006ea4 <_ZN10IridiumSBD11setSleepPinEh+0x44>)
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f000 f827 	bl	8006ecc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   if (enable == HIGH)
 8006e7e:	78fb      	ldrb	r3, [r7, #3]
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d104      	bne.n	8006e8e <_ZN10IridiumSBD11setSleepPinEh+0x2e>
      diagprint(F("HIGH\r\n"));
 8006e84:	4908      	ldr	r1, [pc, #32]	; (8006ea8 <_ZN10IridiumSBD11setSleepPinEh+0x48>)
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 f820 	bl	8006ecc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   else
      diagprint(F("LOW\r\n"));
}
 8006e8c:	e003      	b.n	8006e96 <_ZN10IridiumSBD11setSleepPinEh+0x36>
      diagprint(F("LOW\r\n"));
 8006e8e:	4907      	ldr	r1, [pc, #28]	; (8006eac <_ZN10IridiumSBD11setSleepPinEh+0x4c>)
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 f81b 	bl	8006ecc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8006e96:	bf00      	nop
 8006e98:	3708      	adds	r7, #8
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	40020800 	.word	0x40020800
 8006ea4:	080195c4 	.word	0x080195c4
 8006ea8:	080195e0 	.word	0x080195e0
 8006eac:	080195e8 	.word	0x080195e8

08006eb0 <_ZN10IridiumSBD13endSerialPortEv>:
{
   diagprint(F("IridiumSBD::beginSerialPort\r\n"));
}

void IridiumSBD::endSerialPort()
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b082      	sub	sp, #8
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
   diagprint(F("IridiumSBD::endSerialPort\r\n"));
 8006eb8:	4903      	ldr	r1, [pc, #12]	; (8006ec8 <_ZN10IridiumSBD13endSerialPortEv+0x18>)
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 f806 	bl	8006ecc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8006ec0:	bf00      	nop
 8006ec2:	3708      	adds	r7, #8
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	08019610 	.word	0x08019610

08006ecc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>:
         diagprint(F("I2C write was not successful!\r\n"));
   }
}

void IridiumSBD::diagprint(FlashString str)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
   PGM_P p = reinterpret_cast<PGM_P>(str);
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	60fb      	str	r3, [r7, #12]
   while (1)
   {
      char c = pgm_read_byte(p++);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	1c5a      	adds	r2, r3, #1
 8006ede:	60fa      	str	r2, [r7, #12]
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	72fb      	strb	r3, [r7, #11]
      if (c == 0) break;
 8006ee4:	7afb      	ldrb	r3, [r7, #11]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d005      	beq.n	8006ef6 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0x2a>
      ISBDDiagsCallback(this, c);
 8006eea:	7afb      	ldrb	r3, [r7, #11]
 8006eec:	4619      	mov	r1, r3
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f7ff fe30 	bl	8006b54 <_Z17ISBDDiagsCallbackP10IridiumSBDc>
   }
 8006ef4:	e7f1      	b.n	8006eda <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0xe>
      if (c == 0) break;
 8006ef6:	bf00      	nop

   //TODO
   this->print((char*) str);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	6838      	ldr	r0, [r7, #0]
 8006efe:	4798      	blx	r3
}
 8006f00:	bf00      	nop
 8006f02:	3710      	adds	r7, #16
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <_ZN10IridiumSBD13check9603pinsEv>:
  }
}

//Reads the IO pins and update IO_REGISTER
void IridiumSBD::check9603pins()
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  //Read the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	68da      	ldr	r2, [r3, #12]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	7c1b      	ldrb	r3, [r3, #16]
 8006f18:	4619      	mov	r1, r3
 8006f1a:	4610      	mov	r0, r2
 8006f1c:	f000 f9a8 	bl	8007270 <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	2110      	movs	r1, #16
 8006f26:	4618      	mov	r0, r3
 8006f28:	f7ff fe02 	bl	8006b30 <_ZN7TwoWire5writeEi>
  wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	4618      	mov	r0, r3
 8006f32:	f000 f9e7 	bl	8007304 <_ZN7TwoWire15endTransmissionEv>
  if (wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)1) == 1) // Request one byte from the IO register
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	68d8      	ldr	r0, [r3, #12]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	7c1b      	ldrb	r3, [r3, #16]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	4619      	mov	r1, r3
 8006f42:	f000 f982 	bl	800724a <_ZN7TwoWire11requestFromEhh>
 8006f46:	4603      	mov	r3, r0
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	bf0c      	ite	eq
 8006f4c:	2301      	moveq	r3, #1
 8006f4e:	2300      	movne	r3, #0
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00d      	beq.n	8006f72 <_ZN10IridiumSBD13check9603pinsEv+0x6a>
  {
    IO_REGISTER = wireport->read(); // Read the IO register
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	68da      	ldr	r2, [r3, #12]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	330c      	adds	r3, #12
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4610      	mov	r0, r2
 8006f66:	4798      	blx	r3
 8006f68:	4603      	mov	r3, r0
 8006f6a:	b2da      	uxtb	r2, r3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  }
}
 8006f72:	bf00      	nop
 8006f74:	3708      	adds	r7, #8
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <_ZN10IridiumSBD11set9603pinsEh>:

//Set the IO pins
void IridiumSBD::set9603pins(uint8_t pins)
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b082      	sub	sp, #8
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
 8006f82:	460b      	mov	r3, r1
 8006f84:	70fb      	strb	r3, [r7, #3]
  //Write to the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	68da      	ldr	r2, [r3, #12]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	7c1b      	ldrb	r3, [r3, #16]
 8006f8e:	4619      	mov	r1, r3
 8006f90:	4610      	mov	r0, r2
 8006f92:	f000 f96d 	bl	8007270 <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	2110      	movs	r1, #16
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f7ff fdc7 	bl	8006b30 <_ZN7TwoWire5writeEi>
  wireport->write(pins); // Set the pins
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	68da      	ldr	r2, [r3, #12]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	78f9      	ldrb	r1, [r7, #3]
 8006fb0:	4610      	mov	r0, r2
 8006fb2:	4798      	blx	r3
  wireport->endTransmission(); // Send data and surrender the bus
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f000 f9a3 	bl	8007304 <_ZN7TwoWire15endTransmissionEv>
}
 8006fbe:	bf00      	nop
 8006fc0:	3708      	adds	r7, #8
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
	...

08006fc8 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv>:

	return HAL_OK;
}


boolean IridiumSBD::MRT_Iridium_shutdown(void){
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b08a      	sub	sp, #40	; 0x28
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]

	this->print((char*) "Iridium 9603N Deinit\r\n");
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4820      	ldr	r0, [pc, #128]	; (8007058 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x90>)
 8006fd6:	4798      	blx	r3

	// Power down the modem
	this->print((char*) "\tPutting the 9603N to sleep...");
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	481f      	ldr	r0, [pc, #124]	; (800705c <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x94>)
 8006fde:	4798      	blx	r3
	int err = this->sleep();
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f7ff fdc3 	bl	8006b6c <_ZN10IridiumSBD5sleepEv>
 8006fe6:	6278      	str	r0, [r7, #36]	; 0x24
	if (err != ISBD_SUCCESS)
 8006fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00e      	beq.n	800700c <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x44>
	{
		char str[24+sizeof(int)];
		sprintf(str, "sleep failed: error  %i\r\n", err);
 8006fee:	f107 0308 	add.w	r3, r7, #8
 8006ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ff4:	491a      	ldr	r1, [pc, #104]	; (8007060 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x98>)
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f00d f846 	bl	8014088 <siprintf>
		this->print((char*) str);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f107 0208 	add.w	r2, r7, #8
 8007004:	4610      	mov	r0, r2
 8007006:	4798      	blx	r3
		return false;
 8007008:	2300      	movs	r3, #0
 800700a:	e020      	b.n	800704e <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x86>
	}
	this->print((char*) "OK\r\n");
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4814      	ldr	r0, [pc, #80]	; (8007064 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x9c>)
 8007012:	4798      	blx	r3

	// Disable 9603N power
	this->print((char*) "\tDisabling 9603N power...");
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4813      	ldr	r0, [pc, #76]	; (8007068 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xa0>)
 800701a:	4798      	blx	r3
	this->enable9603Npower(false);
 800701c:	2100      	movs	r1, #0
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f7ff fe18 	bl	8006c54 <_ZN10IridiumSBD16enable9603NpowerEb>
	this->print((char*) "OK\r\n");
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	480e      	ldr	r0, [pc, #56]	; (8007064 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x9c>)
 800702a:	4798      	blx	r3

	// Disable the supercapacitor charger
	this->print((char*) "\tDisabling the supercapacitor charger...");
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	480e      	ldr	r0, [pc, #56]	; (800706c <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xa4>)
 8007032:	4798      	blx	r3
	this->enableSuperCapCharger(false);
 8007034:	2100      	movs	r1, #0
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f7ff fdce 	bl	8006bd8 <_ZN10IridiumSBD21enableSuperCapChargerEb>
	this->print((char*) "OK\r\n");
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4808      	ldr	r0, [pc, #32]	; (8007064 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x9c>)
 8007042:	4798      	blx	r3

	this->print((char*) "\tIridium successfully shutdown\r\n");
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4809      	ldr	r0, [pc, #36]	; (8007070 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xa8>)
 800704a:	4798      	blx	r3
	return true;
 800704c:	2301      	movs	r3, #1
}
 800704e:	4618      	mov	r0, r3
 8007050:	3728      	adds	r7, #40	; 0x28
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	08019844 	.word	0x08019844
 800705c:	0801985c 	.word	0x0801985c
 8007060:	0801987c 	.word	0x0801987c
 8007064:	08018fc8 	.word	0x08018fc8
 8007068:	08019898 	.word	0x08019898
 800706c:	080198b4 	.word	0x080198b4
 8007070:	080198e0 	.word	0x080198e0

08007074 <MRT_Iridium_Destructor>:
	if (E_T==NULL){
		E_T = new IridiumSBD();
	}
}

void MRT_Iridium_Destructor(){
 8007074:	b480      	push	{r7}
 8007076:	af00      	add	r7, sp, #0
	if (E_T!=NULL){
 8007078:	4b05      	ldr	r3, [pc, #20]	; (8007090 <MRT_Iridium_Destructor+0x1c>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d002      	beq.n	8007086 <MRT_Iridium_Destructor+0x12>
		E_T = NULL;
 8007080:	4b03      	ldr	r3, [pc, #12]	; (8007090 <MRT_Iridium_Destructor+0x1c>)
 8007082:	2200      	movs	r2, #0
 8007084:	601a      	str	r2, [r3, #0]
	}
}
 8007086:	bf00      	nop
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr
 8007090:	200003f8 	.word	0x200003f8

08007094 <MRT_Iridium_Deinit>:
	iridium_handler.getTime = &MRT_Iridium_getTime;
	iridium_handler.sendMessage = &MRT_Iridium_sendMessage;
	return iridium_handler;
}

bool MRT_Iridium_Deinit(void){
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
	bool b = E_T->MRT_Iridium_shutdown();
 800709a:	4b09      	ldr	r3, [pc, #36]	; (80070c0 <MRT_Iridium_Deinit+0x2c>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4618      	mov	r0, r3
 80070a0:	f7ff ff92 	bl	8006fc8 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	bf14      	ite	ne
 80070aa:	2301      	movne	r3, #1
 80070ac:	2300      	moveq	r3, #0
 80070ae:	71fb      	strb	r3, [r7, #7]
	MRT_Iridium_Destructor();
 80070b0:	f7ff ffe0 	bl	8007074 <MRT_Iridium_Destructor>
	return b;
 80070b4:	79fb      	ldrb	r3, [r7, #7]
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3708      	adds	r7, #8
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	200003f8 	.word	0x200003f8

080070c4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b086      	sub	sp, #24
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 80070d0:	2300      	movs	r3, #0
 80070d2:	617b      	str	r3, [r7, #20]
  while (size--) {
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	1e5a      	subs	r2, r3, #1
 80070d8:	607a      	str	r2, [r7, #4]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	bf14      	ite	ne
 80070de:	2301      	movne	r3, #1
 80070e0:	2300      	moveq	r3, #0
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d00e      	beq.n	8007106 <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	1c59      	adds	r1, r3, #1
 80070f2:	60b9      	str	r1, [r7, #8]
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	4619      	mov	r1, r3
 80070f8:	68f8      	ldr	r0, [r7, #12]
 80070fa:	4790      	blx	r2
 80070fc:	4602      	mov	r2, r0
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	4413      	add	r3, r2
 8007102:	617b      	str	r3, [r7, #20]
  while (size--) {
 8007104:	e7e6      	b.n	80070d4 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 8007106:	697b      	ldr	r3, [r7, #20]
}
 8007108:	4618      	mov	r0, r3
 800710a:	3718      	adds	r7, #24
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 8007110:	b480      	push	{r7}
 8007112:	b083      	sub	sp, #12
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	4a06      	ldr	r2, [pc, #24]	; (8007134 <_ZN5PrintC1Ev+0x24>)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	601a      	str	r2, [r3, #0]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	605a      	str	r2, [r3, #4]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4618      	mov	r0, r3
 8007128:	370c      	adds	r7, #12
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr
 8007132:	bf00      	nop
 8007134:	0801a024 	.word	0x0801a024

08007138 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	4618      	mov	r0, r3
 8007144:	f7ff ffe4 	bl	8007110 <_ZN5PrintC1Ev>
 8007148:	4a05      	ldr	r2, [pc, #20]	; (8007160 <_ZN6StreamC1Ev+0x28>)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	601a      	str	r2, [r3, #0]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007154:	609a      	str	r2, [r3, #8]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4618      	mov	r0, r3
 800715a:	3708      	adds	r7, #8
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}
 8007160:	0801a054 	.word	0x0801a054

08007164 <_ZN7TwoWireC1EP11I2C_TypeDef>:

#define FLAG_TIMEOUT ((int)0x1000)
#define LONG_TIMEOUT ((int)0x8000)

// Constructors ////////////////////////////////////////////////////////////////
TwoWire::TwoWire(I2C_TypeDef *twi)
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4618      	mov	r0, r3
 8007172:	f7ff ffe1 	bl	8007138 <_ZN6StreamC1Ev>
 8007176:	4a16      	ldr	r2, [pc, #88]	; (80071d0 <_ZN7TwoWireC1EP11I2C_TypeDef+0x6c>)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	601a      	str	r2, [r3, #0]
{
  I2cHandle.Instance = twi;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	683a      	ldr	r2, [r7, #0]
 8007180:	63da      	str	r2, [r3, #60]	; 0x3c
  memset(rxBuffer, 0, BUFFER_LENGTH);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	3390      	adds	r3, #144	; 0x90
 8007186:	2220      	movs	r2, #32
 8007188:	2100      	movs	r1, #0
 800718a:	4618      	mov	r0, r3
 800718c:	f00b fefe 	bl	8012f8c <memset>
  rxBufferIndex = 0;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = 0;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  txAddress = 0;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	741a      	strb	r2, [r3, #16]
  txBufferIndex = 0;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  transmitting = 0;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  defaultAddress = 0x00;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2200      	movs	r2, #0
 80071c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4618      	mov	r0, r3
 80071ca:	3708      	adds	r7, #8
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	0801a034 	.word	0x0801a034

080071d4 <_ZN7TwoWire11requestFromEhhh>:
  I2cHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
  HAL_I2C_Init(&I2cHandle);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b086      	sub	sp, #24
 80071d8:	af02      	add	r7, sp, #8
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	4608      	mov	r0, r1
 80071de:	4611      	mov	r1, r2
 80071e0:	461a      	mov	r2, r3
 80071e2:	4603      	mov	r3, r0
 80071e4:	70fb      	strb	r3, [r7, #3]
 80071e6:	460b      	mov	r3, r1
 80071e8:	70bb      	strb	r3, [r7, #2]
 80071ea:	4613      	mov	r3, r2
 80071ec:	707b      	strb	r3, [r7, #1]
  uint8_t ret_val;

  disableInterrupt();
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 fc24 	bl	8007a3c <_ZN7TwoWire16disableInterruptEv>

  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
 80071f4:	78bb      	ldrb	r3, [r7, #2]
 80071f6:	2b20      	cmp	r3, #32
 80071f8:	d901      	bls.n	80071fe <_ZN7TwoWire11requestFromEhhh+0x2a>
    quantity = BUFFER_LENGTH;
 80071fa:	2320      	movs	r3, #32
 80071fc:	70bb      	strb	r3, [r7, #2]
  }
  // perform blocking read into buffer
  int read = i2c_master_read((address << 1), (char *)rxBuffer, quantity, sendStop);
 80071fe:	78fb      	ldrb	r3, [r7, #3]
 8007200:	005b      	lsls	r3, r3, #1
 8007202:	b2d9      	uxtb	r1, r3
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f103 0290 	add.w	r2, r3, #144	; 0x90
 800720a:	78b8      	ldrb	r0, [r7, #2]
 800720c:	787b      	ldrb	r3, [r7, #1]
 800720e:	9300      	str	r3, [sp, #0]
 8007210:	4603      	mov	r3, r0
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 f9cf 	bl	80075b6 <_ZN7TwoWire15i2c_master_readEhPchh>
 8007218:	60b8      	str	r0, [r7, #8]

  if(read < 0)
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	2b00      	cmp	r3, #0
 800721e:	da02      	bge.n	8007226 <_ZN7TwoWire11requestFromEhhh+0x52>
  {
    ret_val = 0;
 8007220:	2300      	movs	r3, #0
 8007222:	73fb      	strb	r3, [r7, #15]
 8007224:	e001      	b.n	800722a <_ZN7TwoWire11requestFromEhhh+0x56>
  }else
  {
    ret_val = read;
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	73fb      	strb	r3, [r7, #15]
  }

  // set rx buffer iterator vars
  rxBufferIndex = 0;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = ret_val;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	7bfa      	ldrb	r2, [r7, #15]
 8007236:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

  enableInterrupt();
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 fbcc 	bl	80079d8 <_ZN7TwoWire15enableInterruptEv>

  return ret_val;
 8007240:	7bfb      	ldrb	r3, [r7, #15]
}
 8007242:	4618      	mov	r0, r3
 8007244:	3710      	adds	r7, #16
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
 800724a:	b580      	push	{r7, lr}
 800724c:	b082      	sub	sp, #8
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
 8007252:	460b      	mov	r3, r1
 8007254:	70fb      	strb	r3, [r7, #3]
 8007256:	4613      	mov	r3, r2
 8007258:	70bb      	strb	r3, [r7, #2]
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 800725a:	78ba      	ldrb	r2, [r7, #2]
 800725c:	78f9      	ldrb	r1, [r7, #3]
 800725e:	2301      	movs	r3, #1
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f7ff ffb7 	bl	80071d4 <_ZN7TwoWire11requestFromEhhh>
 8007266:	4603      	mov	r3, r0
}
 8007268:	4618      	mov	r0, r3
 800726a:	3708      	adds	r7, #8
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <_ZN7TwoWire17beginTransmissionEh>:
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	460b      	mov	r3, r1
 800727a:	70fb      	strb	r3, [r7, #3]
  // indicate that we are transmitting
  transmitting = 1;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2201      	movs	r2, #1
 8007280:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  // set address of targeted slave
  txAddress = address;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	78fa      	ldrb	r2, [r7, #3]
 8007288:	741a      	strb	r2, [r3, #16]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 800729a:	bf00      	nop
 800729c:	370c      	adds	r7, #12
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr

080072a6 <_ZN7TwoWire15endTransmissionEh>:
//  is very possible to leave the bus in a hung state if
//  no call to endTransmission(true) is made. Some I2C
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
 80072a6:	b580      	push	{r7, lr}
 80072a8:	b086      	sub	sp, #24
 80072aa:	af02      	add	r7, sp, #8
 80072ac:	6078      	str	r0, [r7, #4]
 80072ae:	460b      	mov	r3, r1
 80072b0:	70fb      	strb	r3, [r7, #3]
  // transmit buffer (blocking)
  disableInterrupt();
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 fbc2 	bl	8007a3c <_ZN7TwoWire16disableInterruptEv>

  int8_t ret = i2c_master_write((txAddress << 1), (const char *)txBuffer, txBufferLength, sendStop);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	7c1b      	ldrb	r3, [r3, #16]
 80072bc:	0059      	lsls	r1, r3, #1
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f103 0211 	add.w	r2, r3, #17
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80072ca:	4618      	mov	r0, r3
 80072cc:	78fb      	ldrb	r3, [r7, #3]
 80072ce:	9300      	str	r3, [sp, #0]
 80072d0:	4603      	mov	r3, r0
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 fa00 	bl	80076d8 <_ZN7TwoWire16i2c_master_writeEiPKcii>
 80072d8:	4603      	mov	r3, r0
 80072da:	73fb      	strb	r3, [r7, #15]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  // indicate that we are done transmitting
  transmitting = 0;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  enableInterrupt();
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 fb6f 	bl	80079d8 <_ZN7TwoWire15enableInterruptEv>

  return ret;
 80072fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3710      	adds	r7, #16
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <_ZN7TwoWire15endTransmissionEv>:

//  This provides backwards compatibility with the original
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  return endTransmission(true);
 800730c:	2101      	movs	r1, #1
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f7ff ffc9 	bl	80072a6 <_ZN7TwoWire15endTransmissionEh>
 8007314:	4603      	mov	r3, r0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3708      	adds	r7, #8
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
 800731e:	b580      	push	{r7, lr}
 8007320:	b082      	sub	sp, #8
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
 8007326:	460b      	mov	r3, r1
 8007328:	70fb      	strb	r3, [r7, #3]
  if(transmitting){
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8007330:	2b00      	cmp	r3, #0
 8007332:	d01d      	beq.n	8007370 <_ZN7TwoWire5writeEh+0x52>
    // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800733a:	2b1f      	cmp	r3, #31
 800733c:	d901      	bls.n	8007342 <_ZN7TwoWire5writeEh+0x24>
      return 0;
 800733e:	2300      	movs	r3, #0
 8007340:	e028      	b.n	8007394 <_ZN7TwoWire5writeEh+0x76>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007348:	4619      	mov	r1, r3
 800734a:	78fa      	ldrb	r2, [r7, #3]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	440b      	add	r3, r1
 8007350:	745a      	strb	r2, [r3, #17]
    ++txBufferIndex;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007358:	3301      	adds	r3, #1
 800735a:	b2da      	uxtb	r2, r3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    // update amount in buffer
    txBufferLength = txBufferIndex;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800736e:	e010      	b.n	8007392 <_ZN7TwoWire5writeEh+0x74>
  }else{
    // in slave send mode
  // transmit buffer (blocking)
    disableInterrupt();
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 fb63 	bl	8007a3c <_ZN7TwoWire16disableInterruptEv>

    // reply to master
  i2c_slave_write((const char *)&data, 1);
 8007376:	1cfb      	adds	r3, r7, #3
 8007378:	2201      	movs	r2, #1
 800737a:	4619      	mov	r1, r3
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 fa95 	bl	80078ac <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 fb28 	bl	80079d8 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	333c      	adds	r3, #60	; 0x3c
 800738c:	4618      	mov	r0, r3
 800738e:	f003 f903 	bl	800a598 <HAL_I2C_EnableListen_IT>
  }
  return 1;
 8007392:	2301      	movs	r3, #1
}
 8007394:	4618      	mov	r0, r3
 8007396:	3708      	adds	r7, #8
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b086      	sub	sp, #24
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	60b9      	str	r1, [r7, #8]
 80073a6:	607a      	str	r2, [r7, #4]
  if(transmitting){
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d013      	beq.n	80073da <_ZN7TwoWire5writeEPKhj+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
 80073b2:	2300      	movs	r3, #0
 80073b4:	617b      	str	r3, [r7, #20]
 80073b6:	697a      	ldr	r2, [r7, #20]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d21e      	bcs.n	80073fc <_ZN7TwoWire5writeEPKhj+0x60>
      write(data[i]);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68b9      	ldr	r1, [r7, #8]
 80073c6:	697a      	ldr	r2, [r7, #20]
 80073c8:	440a      	add	r2, r1
 80073ca:	7812      	ldrb	r2, [r2, #0]
 80073cc:	4611      	mov	r1, r2
 80073ce:	68f8      	ldr	r0, [r7, #12]
 80073d0:	4798      	blx	r3
    for(size_t i = 0; i < quantity; ++i){
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	3301      	adds	r3, #1
 80073d6:	617b      	str	r3, [r7, #20]
 80073d8:	e7ed      	b.n	80073b6 <_ZN7TwoWire5writeEPKhj+0x1a>
    }
  }else{
    // in slave send mode
    // reply to master
  disableInterrupt();
 80073da:	68f8      	ldr	r0, [r7, #12]
 80073dc:	f000 fb2e 	bl	8007a3c <_ZN7TwoWire16disableInterruptEv>

  i2c_slave_write((const char *)data, quantity);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	461a      	mov	r2, r3
 80073e4:	68b9      	ldr	r1, [r7, #8]
 80073e6:	68f8      	ldr	r0, [r7, #12]
 80073e8:	f000 fa60 	bl	80078ac <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 80073ec:	68f8      	ldr	r0, [r7, #12]
 80073ee:	f000 faf3 	bl	80079d8 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	333c      	adds	r3, #60	; 0x3c
 80073f6:	4618      	mov	r0, r3
 80073f8:	f003 f8ce 	bl	800a598 <HAL_I2C_EnableListen_IT>
  }
  return quantity;
 80073fc:	687b      	ldr	r3, [r7, #4]
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3718      	adds	r7, #24
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
 8007406:	b480      	push	{r7}
 8007408:	b083      	sub	sp, #12
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
  return rxBufferLength - rxBufferIndex;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007414:	b2db      	uxtb	r3, r3
 8007416:	461a      	mov	r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800741e:	b2db      	uxtb	r3, r3
 8007420:	1ad3      	subs	r3, r2, r3
}
 8007422:	4618      	mov	r0, r3
 8007424:	370c      	adds	r7, #12
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr

0800742e <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
 800742e:	b480      	push	{r7}
 8007430:	b085      	sub	sp, #20
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
  int value = -1;
 8007436:	f04f 33ff 	mov.w	r3, #4294967295
 800743a:	60fb      	str	r3, [r7, #12]

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8007442:	b2da      	uxtb	r2, r3
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800744a:	b2db      	uxtb	r3, r3
 800744c:	429a      	cmp	r2, r3
 800744e:	bf34      	ite	cc
 8007450:	2301      	movcc	r3, #1
 8007452:	2300      	movcs	r3, #0
 8007454:	b2db      	uxtb	r3, r3
 8007456:	2b00      	cmp	r3, #0
 8007458:	d012      	beq.n	8007480 <_ZN7TwoWire4readEv+0x52>
    value = rxBuffer[rxBufferIndex];
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8007460:	b2db      	uxtb	r3, r3
 8007462:	461a      	mov	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	4413      	add	r3, r2
 8007468:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800746c:	60fb      	str	r3, [r7, #12]
    ++rxBufferIndex;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8007474:	b2db      	uxtb	r3, r3
 8007476:	3301      	adds	r3, #1
 8007478:	b2da      	uxtb	r2, r3
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  }

  return value;
 8007480:	68fb      	ldr	r3, [r7, #12]
}
 8007482:	4618      	mov	r0, r3
 8007484:	3714      	adds	r7, #20
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr

0800748e <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
 800748e:	b480      	push	{r7}
 8007490:	b085      	sub	sp, #20
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
  int value = -1;
 8007496:	f04f 33ff 	mov.w	r3, #4294967295
 800749a:	60fb      	str	r3, [r7, #12]

  if(rxBufferIndex < rxBufferLength){
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80074a2:	b2da      	uxtb	r2, r3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	429a      	cmp	r2, r3
 80074ae:	bf34      	ite	cc
 80074b0:	2301      	movcc	r3, #1
 80074b2:	2300      	movcs	r3, #0
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d009      	beq.n	80074ce <_ZN7TwoWire4peekEv+0x40>
    value = rxBuffer[rxBufferIndex];
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	461a      	mov	r2, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	4413      	add	r3, r2
 80074c8:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80074cc:	60fb      	str	r3, [r7, #12]
  }

  return value;
 80074ce:	68fb      	ldr	r3, [r7, #12]
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3714      	adds	r7, #20
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  // XXX: to be implemented.
}
 80074e4:	bf00      	nop
 80074e6:	370c      	adds	r7, #12
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <_ZN7TwoWire16i2c_master_startEv>:
{
  user_onRequest = function;
}

int TwoWire::i2c_master_start()
{
 80074f0:	b480      	push	{r7}
 80074f2:	b085      	sub	sp, #20
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074fc:	60bb      	str	r3, [r7, #8]

    int timeout;

    // Clear Acknowledge failure flag
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007502:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007506:	615a      	str	r2, [r3, #20]

    // Wait the STOP condition has been previously correctly sent
  // This timeout can be avoid in some specific cases by simply clearing the STOP bit
    timeout = FLAG_TIMEOUT;
 8007508:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800750c:	60fb      	str	r3, [r7, #12]
    while ((i2c->CR1 & I2C_CR1_STOP) == I2C_CR1_STOP) {
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007516:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800751a:	bf0c      	ite	eq
 800751c:	2301      	moveq	r3, #1
 800751e:	2300      	movne	r3, #0
 8007520:	b2db      	uxtb	r3, r3
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00b      	beq.n	800753e <_ZN7TwoWire16i2c_master_startEv+0x4e>
        if ((timeout--) == 0) {
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	1e5a      	subs	r2, r3, #1
 800752a:	60fa      	str	r2, [r7, #12]
 800752c:	2b00      	cmp	r3, #0
 800752e:	bf0c      	ite	eq
 8007530:	2301      	moveq	r3, #1
 8007532:	2300      	movne	r3, #0
 8007534:	b2db      	uxtb	r3, r3
 8007536:	2b00      	cmp	r3, #0
 8007538:	d0e9      	beq.n	800750e <_ZN7TwoWire16i2c_master_startEv+0x1e>
            return 1;
 800753a:	2301      	movs	r3, #1
 800753c:	e021      	b.n	8007582 <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    // Generate the START condition
    i2c->CR1 |= I2C_CR1_START;
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	601a      	str	r2, [r3, #0]

    // Wait the START condition has been correctly sent
    timeout = FLAG_TIMEOUT;
 800754a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800754e:	60fb      	str	r3, [r7, #12]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007554:	695b      	ldr	r3, [r3, #20]
 8007556:	f003 0301 	and.w	r3, r3, #1
 800755a:	2b01      	cmp	r3, #1
 800755c:	bf14      	ite	ne
 800755e:	2301      	movne	r3, #1
 8007560:	2300      	moveq	r3, #0
 8007562:	b2db      	uxtb	r3, r3
 8007564:	2b00      	cmp	r3, #0
 8007566:	d00b      	beq.n	8007580 <_ZN7TwoWire16i2c_master_startEv+0x90>
        if ((timeout--) == 0) {
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	1e5a      	subs	r2, r3, #1
 800756c:	60fa      	str	r2, [r7, #12]
 800756e:	2b00      	cmp	r3, #0
 8007570:	bf0c      	ite	eq
 8007572:	2301      	moveq	r3, #1
 8007574:	2300      	movne	r3, #0
 8007576:	b2db      	uxtb	r3, r3
 8007578:	2b00      	cmp	r3, #0
 800757a:	d0e9      	beq.n	8007550 <_ZN7TwoWire16i2c_master_startEv+0x60>
            return 1;
 800757c:	2301      	movs	r3, #1
 800757e:	e000      	b.n	8007582 <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    return 0;
 8007580:	2300      	movs	r3, #0
}
 8007582:	4618      	mov	r0, r3
 8007584:	3714      	adds	r7, #20
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr

0800758e <_ZN7TwoWire15i2c_master_stopEv>:

int TwoWire::i2c_master_stop()
{
 800758e:	b480      	push	{r7}
 8007590:	b085      	sub	sp, #20
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800759a:	60fb      	str	r3, [r7, #12]

    // Generate the STOP condition
    i2c->CR1 |= I2C_CR1_STOP;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	601a      	str	r2, [r3, #0]

    return 0;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3714      	adds	r7, #20
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr

080075b6 <_ZN7TwoWire15i2c_master_readEhPchh>:

int TwoWire::i2c_master_read(uint8_t address, char *data, uint8_t length, uint8_t stop)
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b08a      	sub	sp, #40	; 0x28
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	60f8      	str	r0, [r7, #12]
 80075be:	607a      	str	r2, [r7, #4]
 80075c0:	461a      	mov	r2, r3
 80075c2:	460b      	mov	r3, r1
 80075c4:	72fb      	strb	r3, [r7, #11]
 80075c6:	4613      	mov	r3, r2
 80075c8:	72bb      	strb	r3, [r7, #10]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075ce:	61fb      	str	r3, [r7, #28]
    int timeout;
    int count;
    int value;
    int ret;

    i2c_master_start();
 80075d0:	68f8      	ldr	r0, [r7, #12]
 80075d2:	f7ff ff8d 	bl	80074f0 <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 80075d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80075da:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075e0:	695b      	ldr	r3, [r3, #20]
 80075e2:	f003 0301 	and.w	r3, r3, #1
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	bf14      	ite	ne
 80075ea:	2301      	movne	r3, #1
 80075ec:	2300      	moveq	r3, #0
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d008      	beq.n	8007606 <_ZN7TwoWire15i2c_master_readEhPchh+0x50>
        timeout--;
 80075f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f6:	3b01      	subs	r3, #1
 80075f8:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 80075fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d1ed      	bne.n	80075dc <_ZN7TwoWire15i2c_master_readEhPchh+0x26>
            return -1;
 8007600:	f04f 33ff 	mov.w	r3, #4294967295
 8007604:	e064      	b.n	80076d0 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_READ(address);
 8007606:	7afb      	ldrb	r3, [r7, #11]
 8007608:	f043 0301 	orr.w	r3, r3, #1
 800760c:	b2db      	uxtb	r3, r3
 800760e:	461a      	mov	r2, r3
 8007610:	69fb      	ldr	r3, [r7, #28]
 8007612:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 8007614:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007618:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800761e:	695b      	ldr	r3, [r3, #20]
 8007620:	f003 0302 	and.w	r3, r3, #2
 8007624:	2b02      	cmp	r3, #2
 8007626:	bf14      	ite	ne
 8007628:	2301      	movne	r3, #1
 800762a:	2300      	moveq	r3, #0
 800762c:	b2db      	uxtb	r3, r3
 800762e:	2b00      	cmp	r3, #0
 8007630:	d008      	beq.n	8007644 <_ZN7TwoWire15i2c_master_readEhPchh+0x8e>
        timeout--;
 8007632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007634:	3b01      	subs	r3, #1
 8007636:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 8007638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763a:	2b00      	cmp	r3, #0
 800763c:	d1ed      	bne.n	800761a <_ZN7TwoWire15i2c_master_readEhPchh+0x64>
            return -1;
 800763e:	f04f 33ff 	mov.w	r3, #4294967295
 8007642:	e045      	b.n	80076d0 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 8007644:	2300      	movs	r3, #0
 8007646:	613b      	str	r3, [r7, #16]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800764c:	695b      	ldr	r3, [r3, #20]
 800764e:	613b      	str	r3, [r7, #16]
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007654:	699b      	ldr	r3, [r3, #24]
 8007656:	613b      	str	r3, [r7, #16]
 8007658:	693b      	ldr	r3, [r7, #16]

    // Read all bytes except last one
    for (count = 0; count < (length - 1); count++) {
 800765a:	2300      	movs	r3, #0
 800765c:	623b      	str	r3, [r7, #32]
 800765e:	7abb      	ldrb	r3, [r7, #10]
 8007660:	3b01      	subs	r3, #1
 8007662:	6a3a      	ldr	r2, [r7, #32]
 8007664:	429a      	cmp	r2, r3
 8007666:	da17      	bge.n	8007698 <_ZN7TwoWire15i2c_master_readEhPchh+0xe2>
        ret = i2c_master_byte_read(&value, 0);
 8007668:	f107 0314 	add.w	r3, r7, #20
 800766c:	2200      	movs	r2, #0
 800766e:	4619      	mov	r1, r3
 8007670:	68f8      	ldr	r0, [r7, #12]
 8007672:	f000 f8a4 	bl	80077be <_ZN7TwoWire20i2c_master_byte_readEPii>
 8007676:	61b8      	str	r0, [r7, #24]
        if(ret)
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d002      	beq.n	8007684 <_ZN7TwoWire15i2c_master_readEhPchh+0xce>
        {
          return -1;
 800767e:	f04f 33ff 	mov.w	r3, #4294967295
 8007682:	e025      	b.n	80076d0 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
        data[count] = (char)value;
 8007684:	6979      	ldr	r1, [r7, #20]
 8007686:	6a3b      	ldr	r3, [r7, #32]
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	4413      	add	r3, r2
 800768c:	b2ca      	uxtb	r2, r1
 800768e:	701a      	strb	r2, [r3, #0]
    for (count = 0; count < (length - 1); count++) {
 8007690:	6a3b      	ldr	r3, [r7, #32]
 8007692:	3301      	adds	r3, #1
 8007694:	623b      	str	r3, [r7, #32]
 8007696:	e7e2      	b.n	800765e <_ZN7TwoWire15i2c_master_readEhPchh+0xa8>
    }

    // If not repeated start, send stop.
    // Warning: must be done BEFORE the data is read.
    if (stop) {
 8007698:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800769c:	2b00      	cmp	r3, #0
 800769e:	d002      	beq.n	80076a6 <_ZN7TwoWire15i2c_master_readEhPchh+0xf0>
        i2c_master_stop();
 80076a0:	68f8      	ldr	r0, [r7, #12]
 80076a2:	f7ff ff74 	bl	800758e <_ZN7TwoWire15i2c_master_stopEv>
    }

    // Read the last byte
    ret = i2c_master_byte_read(&value, 1);
 80076a6:	f107 0314 	add.w	r3, r7, #20
 80076aa:	2201      	movs	r2, #1
 80076ac:	4619      	mov	r1, r3
 80076ae:	68f8      	ldr	r0, [r7, #12]
 80076b0:	f000 f885 	bl	80077be <_ZN7TwoWire20i2c_master_byte_readEPii>
 80076b4:	61b8      	str	r0, [r7, #24]
    if(ret)
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d002      	beq.n	80076c2 <_ZN7TwoWire15i2c_master_readEhPchh+0x10c>
    {
      return -1;
 80076bc:	f04f 33ff 	mov.w	r3, #4294967295
 80076c0:	e006      	b.n	80076d0 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
    }
    data[count] = (char)value;
 80076c2:	6979      	ldr	r1, [r7, #20]
 80076c4:	6a3b      	ldr	r3, [r7, #32]
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	4413      	add	r3, r2
 80076ca:	b2ca      	uxtb	r2, r1
 80076cc:	701a      	strb	r2, [r3, #0]

    return length;
 80076ce:	7abb      	ldrb	r3, [r7, #10]
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3728      	adds	r7, #40	; 0x28
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <_ZN7TwoWire16i2c_master_writeEiPKcii>:

int TwoWire::i2c_master_write(int address, const char *data, int length, int stop)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b088      	sub	sp, #32
 80076dc:	af00      	add	r7, sp, #0
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	607a      	str	r2, [r7, #4]
 80076e4:	603b      	str	r3, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ea:	617b      	str	r3, [r7, #20]
    int timeout;
    int count;

    i2c_master_start();
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	f7ff feff 	bl	80074f0 <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 80076f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80076f6:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076fc:	695b      	ldr	r3, [r3, #20]
 80076fe:	f003 0301 	and.w	r3, r3, #1
 8007702:	2b01      	cmp	r3, #1
 8007704:	bf14      	ite	ne
 8007706:	2301      	movne	r3, #1
 8007708:	2300      	moveq	r3, #0
 800770a:	b2db      	uxtb	r3, r3
 800770c:	2b00      	cmp	r3, #0
 800770e:	d007      	beq.n	8007720 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x48>
        timeout--;
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	3b01      	subs	r3, #1
 8007714:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d1ed      	bne.n	80076f8 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x20>
            return 4;
 800771c:	2304      	movs	r3, #4
 800771e:	e04a      	b.n	80077b6 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_WRITE(address);
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	b2db      	uxtb	r3, r3
 8007724:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 800772c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007730:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007736:	695b      	ldr	r3, [r3, #20]
 8007738:	f003 0302 	and.w	r3, r3, #2
 800773c:	2b02      	cmp	r3, #2
 800773e:	bf14      	ite	ne
 8007740:	2301      	movne	r3, #1
 8007742:	2300      	moveq	r3, #0
 8007744:	b2db      	uxtb	r3, r3
 8007746:	2b00      	cmp	r3, #0
 8007748:	d007      	beq.n	800775a <_ZN7TwoWire16i2c_master_writeEiPKcii+0x82>
        timeout--;
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	3b01      	subs	r3, #1
 800774e:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d1ed      	bne.n	8007732 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x5a>
            return 2;
 8007756:	2302      	movs	r3, #2
 8007758:	e02d      	b.n	80077b6 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 800775a:	2300      	movs	r3, #0
 800775c:	613b      	str	r3, [r7, #16]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007762:	695b      	ldr	r3, [r3, #20]
 8007764:	613b      	str	r3, [r7, #16]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800776a:	699b      	ldr	r3, [r3, #24]
 800776c:	613b      	str	r3, [r7, #16]
 800776e:	693b      	ldr	r3, [r7, #16]

    for (count = 0; count < length; count++) {
 8007770:	2300      	movs	r3, #0
 8007772:	61bb      	str	r3, [r7, #24]
 8007774:	69ba      	ldr	r2, [r7, #24]
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	429a      	cmp	r2, r3
 800777a:	da15      	bge.n	80077a8 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xd0>
        if (i2c_master_byte_write(data[count]) != 1) {
 800777c:	69bb      	ldr	r3, [r7, #24]
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	4413      	add	r3, r2
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	4619      	mov	r1, r3
 8007786:	68f8      	ldr	r0, [r7, #12]
 8007788:	f000 f85a 	bl	8007840 <_ZN7TwoWire21i2c_master_byte_writeEi>
 800778c:	4603      	mov	r3, r0
 800778e:	2b01      	cmp	r3, #1
 8007790:	bf14      	ite	ne
 8007792:	2301      	movne	r3, #1
 8007794:	2300      	moveq	r3, #0
 8007796:	b2db      	uxtb	r3, r3
 8007798:	2b00      	cmp	r3, #0
 800779a:	d001      	beq.n	80077a0 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xc8>
            return 3;
 800779c:	2303      	movs	r3, #3
 800779e:	e00a      	b.n	80077b6 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
    for (count = 0; count < length; count++) {
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	3301      	adds	r3, #1
 80077a4:	61bb      	str	r3, [r7, #24]
 80077a6:	e7e5      	b.n	8007774 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x9c>
        }
    }

    // If not repeated start, send stop.
    if (stop) {
 80077a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d002      	beq.n	80077b4 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xdc>
        i2c_master_stop();
 80077ae:	68f8      	ldr	r0, [r7, #12]
 80077b0:	f7ff feed 	bl	800758e <_ZN7TwoWire15i2c_master_stopEv>
    }

    return 0;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3720      	adds	r7, #32
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}

080077be <_ZN7TwoWire20i2c_master_byte_readEPii>:

int TwoWire::i2c_master_byte_read(int *value, int last)
{
 80077be:	b480      	push	{r7}
 80077c0:	b087      	sub	sp, #28
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	60f8      	str	r0, [r7, #12]
 80077c6:	60b9      	str	r1, [r7, #8]
 80077c8:	607a      	str	r2, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077ce:	613b      	str	r3, [r7, #16]
    int timeout;

    if (last) {
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d006      	beq.n	80077e4 <_ZN7TwoWire20i2c_master_byte_readEPii+0x26>
        // Don't acknowledge the last byte
        i2c->CR1 &= ~I2C_CR1_ACK;
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	601a      	str	r2, [r3, #0]
 80077e2:	e005      	b.n	80077f0 <_ZN7TwoWire20i2c_master_byte_readEPii+0x32>
    } else {
        // Acknowledge the byte
        i2c->CR1 |= I2C_CR1_ACK;
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	601a      	str	r2, [r3, #0]
    }

    // Wait until the byte is received
    timeout = FLAG_TIMEOUT;
 80077f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80077f4:	617b      	str	r3, [r7, #20]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_RXNE) == RESET) {
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077fa:	695b      	ldr	r3, [r3, #20]
 80077fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007800:	2b40      	cmp	r3, #64	; 0x40
 8007802:	bf14      	ite	ne
 8007804:	2301      	movne	r3, #1
 8007806:	2300      	moveq	r3, #0
 8007808:	b2db      	uxtb	r3, r3
 800780a:	2b00      	cmp	r3, #0
 800780c:	d00c      	beq.n	8007828 <_ZN7TwoWire20i2c_master_byte_readEPii+0x6a>
        if ((timeout--) == 0) {
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	1e5a      	subs	r2, r3, #1
 8007812:	617a      	str	r2, [r7, #20]
 8007814:	2b00      	cmp	r3, #0
 8007816:	bf0c      	ite	eq
 8007818:	2301      	moveq	r3, #1
 800781a:	2300      	movne	r3, #0
 800781c:	b2db      	uxtb	r3, r3
 800781e:	2b00      	cmp	r3, #0
 8007820:	d0e9      	beq.n	80077f6 <_ZN7TwoWire20i2c_master_byte_readEPii+0x38>
            return -1;
 8007822:	f04f 33ff 	mov.w	r3, #4294967295
 8007826:	e005      	b.n	8007834 <_ZN7TwoWire20i2c_master_byte_readEPii+0x76>
        }
    }

    *value = (int)i2c->DR;
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	691b      	ldr	r3, [r3, #16]
 800782c:	461a      	mov	r2, r3
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	601a      	str	r2, [r3, #0]

    return 0;
 8007832:	2300      	movs	r3, #0
}
 8007834:	4618      	mov	r0, r3
 8007836:	371c      	adds	r7, #28
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <_ZN7TwoWire21i2c_master_byte_writeEi>:

int TwoWire::i2c_master_byte_write(int data)
{
 8007840:	b480      	push	{r7}
 8007842:	b085      	sub	sp, #20
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800784e:	60bb      	str	r3, [r7, #8]
    int timeout;

    i2c->DR = (uint8_t)data;
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	b2db      	uxtb	r3, r3
 8007854:	461a      	mov	r2, r3
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	611a      	str	r2, [r3, #16]

    // Wait until the byte is transmitted
    timeout = FLAG_TIMEOUT;
 800785a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800785e:	60fb      	str	r3, [r7, #12]
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007864:	695b      	ldr	r3, [r3, #20]
 8007866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800786a:	2b80      	cmp	r3, #128	; 0x80
 800786c:	d008      	beq.n	8007880 <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
            (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == RESET)) {
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007872:	695b      	ldr	r3, [r3, #20]
 8007874:	f003 0304 	and.w	r3, r3, #4
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 8007878:	2b04      	cmp	r3, #4
 800787a:	d001      	beq.n	8007880 <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
 800787c:	2301      	movs	r3, #1
 800787e:	e000      	b.n	8007882 <_ZN7TwoWire21i2c_master_byte_writeEi+0x42>
 8007880:	2300      	movs	r3, #0
 8007882:	2b00      	cmp	r3, #0
 8007884:	d00b      	beq.n	800789e <_ZN7TwoWire21i2c_master_byte_writeEi+0x5e>
        if ((timeout--) == 0) {
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	1e5a      	subs	r2, r3, #1
 800788a:	60fa      	str	r2, [r7, #12]
 800788c:	2b00      	cmp	r3, #0
 800788e:	bf0c      	ite	eq
 8007890:	2301      	moveq	r3, #1
 8007892:	2300      	movne	r3, #0
 8007894:	b2db      	uxtb	r3, r3
 8007896:	2b00      	cmp	r3, #0
 8007898:	d0e2      	beq.n	8007860 <_ZN7TwoWire21i2c_master_byte_writeEi+0x20>
            return 0;
 800789a:	2300      	movs	r3, #0
 800789c:	e000      	b.n	80078a0 <_ZN7TwoWire21i2c_master_byte_writeEi+0x60>
        }
    }

    return 1;
 800789e:	2301      	movs	r3, #1
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3714      	adds	r7, #20
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <_ZN7TwoWire15i2c_slave_writeEPKci>:

int TwoWire::i2c_slave_write(const char *data, int length)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b089      	sub	sp, #36	; 0x24
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	60b9      	str	r1, [r7, #8]
 80078b6:	607a      	str	r2, [r7, #4]
    uint32_t Timeout;
    int size = 0;
 80078b8:	2300      	movs	r3, #0
 80078ba:	61bb      	str	r3, [r7, #24]

    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078c0:	617b      	str	r3, [r7, #20]

    while (length > 0) {
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	dd41      	ble.n	800794c <_ZN7TwoWire15i2c_slave_writeEPKci+0xa0>
        /* Wait until TXE flag is set */
        Timeout = FLAG_TIMEOUT;
 80078c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80078cc:	61fb      	str	r3, [r7, #28]
        while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) {
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078d2:	695b      	ldr	r3, [r3, #20]
 80078d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078d8:	2b80      	cmp	r3, #128	; 0x80
 80078da:	bf14      	ite	ne
 80078dc:	2301      	movne	r3, #1
 80078de:	2300      	moveq	r3, #0
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d008      	beq.n	80078f8 <_ZN7TwoWire15i2c_slave_writeEPKci+0x4c>
            Timeout--;
 80078e6:	69fb      	ldr	r3, [r7, #28]
 80078e8:	3b01      	subs	r3, #1
 80078ea:	61fb      	str	r3, [r7, #28]
            if (Timeout == 0) {
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d1ed      	bne.n	80078ce <_ZN7TwoWire15i2c_slave_writeEPKci+0x22>
                return -1;
 80078f2:	f04f 33ff 	mov.w	r3, #4294967295
 80078f6:	e068      	b.n	80079ca <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
            }
        }

        /* Write data to DR */
        i2c->DR = (*data++);
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	1c5a      	adds	r2, r3, #1
 80078fc:	60ba      	str	r2, [r7, #8]
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	461a      	mov	r2, r3
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	611a      	str	r2, [r3, #16]
        length--;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	3b01      	subs	r3, #1
 800790a:	607b      	str	r3, [r7, #4]
        size++;
 800790c:	69bb      	ldr	r3, [r7, #24]
 800790e:	3301      	adds	r3, #1
 8007910:	61bb      	str	r3, [r7, #24]

        if ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == SET) && (length != 0)) {
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007916:	695b      	ldr	r3, [r3, #20]
 8007918:	f003 0304 	and.w	r3, r3, #4
 800791c:	2b04      	cmp	r3, #4
 800791e:	d104      	bne.n	800792a <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d001      	beq.n	800792a <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 8007926:	2301      	movs	r3, #1
 8007928:	e000      	b.n	800792c <_ZN7TwoWire15i2c_slave_writeEPKci+0x80>
 800792a:	2300      	movs	r3, #0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d0c8      	beq.n	80078c2 <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
            /* Write data to DR */
            i2c->DR = (*data++);
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	1c5a      	adds	r2, r3, #1
 8007934:	60ba      	str	r2, [r7, #8]
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	461a      	mov	r2, r3
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	611a      	str	r2, [r3, #16]
            length--;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	3b01      	subs	r3, #1
 8007942:	607b      	str	r3, [r7, #4]
            size++;
 8007944:	69bb      	ldr	r3, [r7, #24]
 8007946:	3301      	adds	r3, #1
 8007948:	61bb      	str	r3, [r7, #24]
    while (length > 0) {
 800794a:	e7ba      	b.n	80078c2 <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
        }
    }

    /* Wait until AF flag is set */
    Timeout = FLAG_TIMEOUT;
 800794c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007950:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_AF) == RESET) {
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007956:	695b      	ldr	r3, [r3, #20]
 8007958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800795c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007960:	bf14      	ite	ne
 8007962:	2301      	movne	r3, #1
 8007964:	2300      	moveq	r3, #0
 8007966:	b2db      	uxtb	r3, r3
 8007968:	2b00      	cmp	r3, #0
 800796a:	d008      	beq.n	800797e <_ZN7TwoWire15i2c_slave_writeEPKci+0xd2>
        Timeout--;
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	3b01      	subs	r3, #1
 8007970:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d1ec      	bne.n	8007952 <_ZN7TwoWire15i2c_slave_writeEPKci+0xa6>
            return -1;
 8007978:	f04f 33ff 	mov.w	r3, #4294967295
 800797c:	e025      	b.n	80079ca <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007982:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007986:	615a      	str	r2, [r3, #20]

    /* Wait until BUSY flag is reset */
    Timeout = FLAG_TIMEOUT;
 8007988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800798c:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BUSY) == SET) {
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007992:	699b      	ldr	r3, [r3, #24]
 8007994:	f003 0302 	and.w	r3, r3, #2
 8007998:	2b02      	cmp	r3, #2
 800799a:	bf0c      	ite	eq
 800799c:	2301      	moveq	r3, #1
 800799e:	2300      	movne	r3, #0
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d008      	beq.n	80079b8 <_ZN7TwoWire15i2c_slave_writeEPKci+0x10c>
        Timeout--;
 80079a6:	69fb      	ldr	r3, [r7, #28]
 80079a8:	3b01      	subs	r3, #1
 80079aa:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 80079ac:	69fb      	ldr	r3, [r7, #28]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d1ed      	bne.n	800798e <_ZN7TwoWire15i2c_slave_writeEPKci+0xe2>
            return -1;
 80079b2:	f04f 33ff 	mov.w	r3, #4294967295
 80079b6:	e008      	b.n	80079ca <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    I2cHandle.State = HAL_I2C_STATE_READY;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2220      	movs	r2, #32
 80079bc:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

    /* Process Unlocked */
    __HAL_UNLOCK(&I2cHandle);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2200      	movs	r2, #0
 80079c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return size;
 80079c8:	69bb      	ldr	r3, [r7, #24]
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3724      	adds	r7, #36	; 0x24
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr
	...

080079d8 <_ZN7TwoWire15enableInterruptEv>:
      }
    }
}

void TwoWire::enableInterrupt(void)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079e4:	4a12      	ldr	r2, [pc, #72]	; (8007a30 <_ZN7TwoWire15enableInterruptEv+0x58>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d106      	bne.n	80079f8 <_ZN7TwoWire15enableInterruptEv+0x20>
    {
      HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80079ea:	2049      	movs	r0, #73	; 0x49
 80079ec:	f001 ff5e 	bl	80098ac <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80079f0:	2048      	movs	r0, #72	; 0x48
 80079f2:	f001 ff5b 	bl	80098ac <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 80079f6:	e016      	b.n	8007a26 <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079fc:	4a0d      	ldr	r2, [pc, #52]	; (8007a34 <_ZN7TwoWire15enableInterruptEv+0x5c>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d106      	bne.n	8007a10 <_ZN7TwoWire15enableInterruptEv+0x38>
      HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8007a02:	2022      	movs	r0, #34	; 0x22
 8007a04:	f001 ff52 	bl	80098ac <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8007a08:	2021      	movs	r0, #33	; 0x21
 8007a0a:	f001 ff4f 	bl	80098ac <HAL_NVIC_EnableIRQ>
}
 8007a0e:	e00a      	b.n	8007a26 <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a14:	4a08      	ldr	r2, [pc, #32]	; (8007a38 <_ZN7TwoWire15enableInterruptEv+0x60>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d105      	bne.n	8007a26 <_ZN7TwoWire15enableInterruptEv+0x4e>
      HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8007a1a:	2020      	movs	r0, #32
 8007a1c:	f001 ff46 	bl	80098ac <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8007a20:	201f      	movs	r0, #31
 8007a22:	f001 ff43 	bl	80098ac <HAL_NVIC_EnableIRQ>
}
 8007a26:	bf00      	nop
 8007a28:	3708      	adds	r7, #8
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	40005c00 	.word	0x40005c00
 8007a34:	40005800 	.word	0x40005800
 8007a38:	40005400 	.word	0x40005400

08007a3c <_ZN7TwoWire16disableInterruptEv>:

void TwoWire::disableInterrupt(void)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b082      	sub	sp, #8
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a48:	4a12      	ldr	r2, [pc, #72]	; (8007a94 <_ZN7TwoWire16disableInterruptEv+0x58>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d106      	bne.n	8007a5c <_ZN7TwoWire16disableInterruptEv+0x20>
    {
      HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 8007a4e:	2049      	movs	r0, #73	; 0x49
 8007a50:	f001 ff3a 	bl	80098c8 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 8007a54:	2048      	movs	r0, #72	; 0x48
 8007a56:	f001 ff37 	bl	80098c8 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8007a5a:	e016      	b.n	8007a8a <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a60:	4a0d      	ldr	r2, [pc, #52]	; (8007a98 <_ZN7TwoWire16disableInterruptEv+0x5c>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d106      	bne.n	8007a74 <_ZN7TwoWire16disableInterruptEv+0x38>
      HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 8007a66:	2022      	movs	r0, #34	; 0x22
 8007a68:	f001 ff2e 	bl	80098c8 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 8007a6c:	2021      	movs	r0, #33	; 0x21
 8007a6e:	f001 ff2b 	bl	80098c8 <HAL_NVIC_DisableIRQ>
}
 8007a72:	e00a      	b.n	8007a8a <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a78:	4a08      	ldr	r2, [pc, #32]	; (8007a9c <_ZN7TwoWire16disableInterruptEv+0x60>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d105      	bne.n	8007a8a <_ZN7TwoWire16disableInterruptEv+0x4e>
      HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8007a7e:	2020      	movs	r0, #32
 8007a80:	f001 ff22 	bl	80098c8 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8007a84:	201f      	movs	r0, #31
 8007a86:	f001 ff1f 	bl	80098c8 <HAL_NVIC_DisableIRQ>
}
 8007a8a:	bf00      	nop
 8007a8c:	3708      	adds	r7, #8
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
 8007a92:	bf00      	nop
 8007a94:	40005c00 	.word	0x40005c00
 8007a98:	40005800 	.word	0x40005800
 8007a9c:	40005400 	.word	0x40005400

08007aa0 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire  = TwoWire(I2C1);
TwoWire Wire1 = TwoWire(I2C2);
TwoWire Wire2 = TwoWire(I2C3);
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d110      	bne.n	8007ad2 <_Z41__static_initialization_and_destruction_0ii+0x32>
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d10b      	bne.n	8007ad2 <_Z41__static_initialization_and_destruction_0ii+0x32>
TwoWire Wire  = TwoWire(I2C1);
 8007aba:	4908      	ldr	r1, [pc, #32]	; (8007adc <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8007abc:	4808      	ldr	r0, [pc, #32]	; (8007ae0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8007abe:	f7ff fb51 	bl	8007164 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire1 = TwoWire(I2C2);
 8007ac2:	4908      	ldr	r1, [pc, #32]	; (8007ae4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8007ac4:	4808      	ldr	r0, [pc, #32]	; (8007ae8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8007ac6:	f7ff fb4d 	bl	8007164 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire2 = TwoWire(I2C3);
 8007aca:	4908      	ldr	r1, [pc, #32]	; (8007aec <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8007acc:	4808      	ldr	r0, [pc, #32]	; (8007af0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8007ace:	f7ff fb49 	bl	8007164 <_ZN7TwoWireC1EP11I2C_TypeDef>
 8007ad2:	bf00      	nop
 8007ad4:	3708      	adds	r7, #8
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
 8007ada:	bf00      	nop
 8007adc:	40005400 	.word	0x40005400
 8007ae0:	200003fc 	.word	0x200003fc
 8007ae4:	40005800 	.word	0x40005800
 8007ae8:	200004b4 	.word	0x200004b4
 8007aec:	40005c00 	.word	0x40005c00
 8007af0:	2000056c 	.word	0x2000056c

08007af4 <_GLOBAL__sub_I__ZN7TwoWireC2EP11I2C_TypeDef>:
 8007af4:	b580      	push	{r7, lr}
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007afc:	2001      	movs	r0, #1
 8007afe:	f7ff ffcf 	bl	8007aa0 <_Z41__static_initialization_and_destruction_0ii>
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <MRT_radio_tx>:
#include <iwdg.h>
#include <string.h>
#include <sx126x.h>


void MRT_radio_tx(char* buffer){
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
	#if XTEND_ //Xtend send
		if (strlen(buffer) < XTEND_BUFFER_SIZE)	HAL_UART_Transmit(&XTEND_UART,(uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
	#elif SRADIO_ //SRadio send TODO
		if (strlen(buffer) < SRADIO_BUFFER_SIZE){
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f7f8 fb79 	bl	8000204 <strlen>
 8007b12:	4603      	mov	r3, r0
 8007b14:	2bff      	cmp	r3, #255	; 0xff
 8007b16:	d80e      	bhi.n	8007b36 <MRT_radio_tx+0x32>
			sx126x_set_tx(&SRADIO_SPI, 1000, SRADIO_BUFFER_SIZE);
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007b1e:	480b      	ldr	r0, [pc, #44]	; (8007b4c <MRT_radio_tx+0x48>)
 8007b20:	f000 fc66 	bl	80083f0 <sx126x_set_tx>
			TxProtocol((uint8_t*) buffer, strlen(buffer));
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f7f8 fb6d 	bl	8000204 <strlen>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	4619      	mov	r1, r3
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 faab 	bl	800808c <TxProtocol>
		}
	#endif

	print((char*) "Radio sending:\t");
 8007b36:	4806      	ldr	r0, [pc, #24]	; (8007b50 <MRT_radio_tx+0x4c>)
 8007b38:	f7f9 fa96 	bl	8001068 <print>
	println(buffer);
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f7f9 fa75 	bl	800102c <println>
}
 8007b42:	bf00      	nop
 8007b44:	3708      	adds	r7, #8
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	20005c20 	.word	0x20005c20
 8007b50:	08019e44 	.word	0x08019e44

08007b54 <MRT_radio_rx>:


void MRT_radio_rx(char* buffer, uint8_t size, uint16_t timeout){
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	70fb      	strb	r3, [r7, #3]
 8007b60:	4613      	mov	r3, r2
 8007b62:	803b      	strh	r3, [r7, #0]
		if (size < XTEND_BUFFER_SIZE){
			HAL_UART_Receive(&XTEND_UART,(uint8_t*) buffer, sizeof(char) * size, timeout);
		}
	#elif SRADIO_ //SRadio receive TODO
		if (size < SRADIO_BUFFER_SIZE){
			sx126x_set_rx(&SRADIO_SPI,5000);
 8007b64:	f241 3188 	movw	r1, #5000	; 0x1388
 8007b68:	4807      	ldr	r0, [pc, #28]	; (8007b88 <MRT_radio_rx+0x34>)
 8007b6a:	f000 fcad 	bl	80084c8 <sx126x_set_rx>
			RxProtocol((uint8_t*) buffer);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 fbbc 	bl	80082ec <RxProtocol>
		}
	#endif

	print((char*) "Radio receiving:\t");
 8007b74:	4805      	ldr	r0, [pc, #20]	; (8007b8c <MRT_radio_rx+0x38>)
 8007b76:	f7f9 fa77 	bl	8001068 <print>
	println(buffer);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f7f9 fa56 	bl	800102c <println>
}
 8007b80:	bf00      	nop
 8007b82:	3708      	adds	r7, #8
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	20005c20 	.word	0x20005c20
 8007b8c:	08019e54 	.word	0x08019e54

08007b90 <MRT_radio_Init>:



void MRT_radio_Init(void){
 8007b90:	b590      	push	{r4, r7, lr}
 8007b92:	b093      	sub	sp, #76	; 0x4c
 8007b94:	af12      	add	r7, sp, #72	; 0x48
	println("\r\nRadio Init");
 8007b96:	4816      	ldr	r0, [pc, #88]	; (8007bf0 <MRT_radio_Init+0x60>)
 8007b98:	f7f9 fa48 	bl	800102c <println>
	#if XTEND_
	print("\tXTEND Init...");
	HAL_GPIO_WritePin(XTend_CTS_Pin, GPIO_PIN_10, GPIO_PIN_RESET);
	println("OK");
	#elif SRADIO_
	print("\tSRADIO Init...");
 8007b9c:	4815      	ldr	r0, [pc, #84]	; (8007bf4 <MRT_radio_Init+0x64>)
 8007b9e:	f7f9 fa63 	bl	8001068 <print>
	set_hspi(SRADIO_SPI);
 8007ba2:	4c15      	ldr	r4, [pc, #84]	; (8007bf8 <MRT_radio_Init+0x68>)
 8007ba4:	4668      	mov	r0, sp
 8007ba6:	f104 0310 	add.w	r3, r4, #16
 8007baa:	2248      	movs	r2, #72	; 0x48
 8007bac:	4619      	mov	r1, r3
 8007bae:	f00b f9c5 	bl	8012f3c <memcpy>
 8007bb2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007bb6:	f000 fa51 	bl	800805c <set_hspi>
	// SPI2_SX_CS_GPIO_Port TODO ???
	set_NSS_pin(SPI2_SX_CS_GPIO_Port, SPI2_SX_CS_Pin);
 8007bba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007bbe:	480f      	ldr	r0, [pc, #60]	; (8007bfc <MRT_radio_Init+0x6c>)
 8007bc0:	f000 f9f4 	bl	8007fac <set_NSS_pin>
	set_BUSY_pin(SX_BUSY_GPIO_Port, SX_BUSY_Pin);
 8007bc4:	2108      	movs	r1, #8
 8007bc6:	480e      	ldr	r0, [pc, #56]	; (8007c00 <MRT_radio_Init+0x70>)
 8007bc8:	f000 fa06 	bl	8007fd8 <set_BUSY_pin>
	set_NRESET_pin(SX_RST_GPIO_Port, SX_RST_Pin);
 8007bcc:	2104      	movs	r1, #4
 8007bce:	480c      	ldr	r0, [pc, #48]	; (8007c00 <MRT_radio_Init+0x70>)
 8007bd0:	f000 fa18 	bl	8008004 <set_NRESET_pin>
	set_DIO1_pin(SX_DIO_GPIO_Port, SX_DIO_Pin);
 8007bd4:	2110      	movs	r1, #16
 8007bd6:	480a      	ldr	r0, [pc, #40]	; (8007c00 <MRT_radio_Init+0x70>)
 8007bd8:	f000 fa2a 	bl	8008030 <set_DIO1_pin>
	//Tx_setup();
	Rx_setup();
 8007bdc:	f000 fa92 	bl	8008104 <Rx_setup>
	println("OK");
 8007be0:	4808      	ldr	r0, [pc, #32]	; (8007c04 <MRT_radio_Init+0x74>)
 8007be2:	f7f9 fa23 	bl	800102c <println>
	#else
	println("\tNo radio currently in use");
	#endif
}
 8007be6:	bf00      	nop
 8007be8:	3704      	adds	r7, #4
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd90      	pop	{r4, r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	08019e68 	.word	0x08019e68
 8007bf4:	08019e78 	.word	0x08019e78
 8007bf8:	20005c20 	.word	0x20005c20
 8007bfc:	40020400 	.word	0x40020400
 8007c00:	40021800 	.word	0x40021800
 8007c04:	08019e88 	.word	0x08019e88

08007c08 <MRT_TELEMETRY_Init>:


void MRT_TELEMETRY_Init(void){
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	af00      	add	r7, sp, #0

	MRT_radio_Init();
 8007c0c:	f7ff ffc0 	bl	8007b90 <MRT_radio_Init>
		hiridium = MRT_Iridium_Init(IRIDIUM_TIMEOUT, IRIDIUM_I2C, print);
		#else
		hiridium = MRT_Iridium_Init(IRIDIUM_TIMEOUT, IRIDIUM_I2C, no_print); //Doesn't print the internal commands
		#endif
	#endif
}
 8007c10:	bf00      	nop
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <radio_parse_command>:
//extern volatile uint8_t state_arm_rcov; TODO NOT USED YET
//extern volatile uint8_t state_arm_prop; TODO NOT USED YET

//extern volatile char rx_buf[10]; // dma buffer NOT IN USE YET

radio_command radio_parse_command(char* rx_buf) {
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]

	if (strcmp(rx_buf, "lr") == 0) { // launch command
 8007c1c:	492a      	ldr	r1, [pc, #168]	; (8007cc8 <radio_parse_command+0xb4>)
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f7f8 fae6 	bl	80001f0 <strcmp>
 8007c24:	4603      	mov	r3, r0
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d101      	bne.n	8007c2e <radio_parse_command+0x1a>
		return LAUNCH;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e048      	b.n	8007cc0 <radio_parse_command+0xac>
	}
	else if (strcmp(rx_buf, "ap") == 0) { // arm propulsion
 8007c2e:	4927      	ldr	r1, [pc, #156]	; (8007ccc <radio_parse_command+0xb8>)
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f7f8 fadd 	bl	80001f0 <strcmp>
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d101      	bne.n	8007c40 <radio_parse_command+0x2c>
		return ARM_PROP;
 8007c3c:	2302      	movs	r3, #2
 8007c3e:	e03f      	b.n	8007cc0 <radio_parse_command+0xac>
	}
	else if (strcmp(rx_buf, "ar") == 0) { // arm recovery
 8007c40:	4923      	ldr	r1, [pc, #140]	; (8007cd0 <radio_parse_command+0xbc>)
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f7f8 fad4 	bl	80001f0 <strcmp>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d101      	bne.n	8007c52 <radio_parse_command+0x3e>
		return ARM_RCOV;
 8007c4e:	2303      	movs	r3, #3
 8007c50:	e036      	b.n	8007cc0 <radio_parse_command+0xac>
	}
	else if (strcmp(rx_buf, "dp") == 0) { // disarm propulsion
 8007c52:	4920      	ldr	r1, [pc, #128]	; (8007cd4 <radio_parse_command+0xc0>)
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f7f8 facb 	bl	80001f0 <strcmp>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d101      	bne.n	8007c64 <radio_parse_command+0x50>
		return DISARM_PROP;
 8007c60:	2304      	movs	r3, #4
 8007c62:	e02d      	b.n	8007cc0 <radio_parse_command+0xac>
	}
	else if (strcmp(rx_buf, "dr") == 0) { // disarm recovery
 8007c64:	491c      	ldr	r1, [pc, #112]	; (8007cd8 <radio_parse_command+0xc4>)
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f7f8 fac2 	bl	80001f0 <strcmp>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d101      	bne.n	8007c76 <radio_parse_command+0x62>
		return DISARM_RCOV;
 8007c72:	2305      	movs	r3, #5
 8007c74:	e024      	b.n	8007cc0 <radio_parse_command+0xac>
	}
	else if (strcmp(rx_buf, "v1") == 0) { // vr power on
 8007c76:	4919      	ldr	r1, [pc, #100]	; (8007cdc <radio_parse_command+0xc8>)
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f7f8 fab9 	bl	80001f0 <strcmp>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d101      	bne.n	8007c88 <radio_parse_command+0x74>
		return VR_POWER_ON;
 8007c84:	2306      	movs	r3, #6
 8007c86:	e01b      	b.n	8007cc0 <radio_parse_command+0xac>
	}
	else if (strcmp(rx_buf, "v2") == 0) { // vr start
 8007c88:	4915      	ldr	r1, [pc, #84]	; (8007ce0 <radio_parse_command+0xcc>)
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f7f8 fab0 	bl	80001f0 <strcmp>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d101      	bne.n	8007c9a <radio_parse_command+0x86>
		return VR_REC_START;
 8007c96:	2307      	movs	r3, #7
 8007c98:	e012      	b.n	8007cc0 <radio_parse_command+0xac>
	}
	else if (strcmp(rx_buf, "v3") == 0) { // vr stop
 8007c9a:	4912      	ldr	r1, [pc, #72]	; (8007ce4 <radio_parse_command+0xd0>)
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f7f8 faa7 	bl	80001f0 <strcmp>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d101      	bne.n	8007cac <radio_parse_command+0x98>
		return VR_REC_STOP;
 8007ca8:	2308      	movs	r3, #8
 8007caa:	e009      	b.n	8007cc0 <radio_parse_command+0xac>
	}
	else if (strcmp(rx_buf, "v4") == 0) { // vr power off
 8007cac:	490e      	ldr	r1, [pc, #56]	; (8007ce8 <radio_parse_command+0xd4>)
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f7f8 fa9e 	bl	80001f0 <strcmp>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d101      	bne.n	8007cbe <radio_parse_command+0xaa>
		return VR_POWER_OFF;
 8007cba:	2309      	movs	r3, #9
 8007cbc:	e000      	b.n	8007cc0 <radio_parse_command+0xac>
	}

	// all other commands are invalid, ignore.
	else{
		return -1;
 8007cbe:	23ff      	movs	r3, #255	; 0xff
	}
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3708      	adds	r7, #8
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}
 8007cc8:	08019e8c 	.word	0x08019e8c
 8007ccc:	08019e90 	.word	0x08019e90
 8007cd0:	08019e94 	.word	0x08019e94
 8007cd4:	08019e98 	.word	0x08019e98
 8007cd8:	08019e9c 	.word	0x08019e9c
 8007cdc:	08019ea0 	.word	0x08019ea0
 8007ce0:	08019ea4 	.word	0x08019ea4
 8007ce4:	08019ea8 	.word	0x08019ea8
 8007ce8:	08019eac 	.word	0x08019eac

08007cec <execute_parsed_command>:

void execute_parsed_command(radio_command cmd) {
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b082      	sub	sp, #8
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	71fb      	strb	r3, [r7, #7]
	// TODO: decide whether we want to send an ack back to ground station, maybe as special event message
	switch (cmd) {
 8007cf6:	79fb      	ldrb	r3, [r7, #7]
 8007cf8:	3b01      	subs	r3, #1
 8007cfa:	2b08      	cmp	r3, #8
 8007cfc:	d84a      	bhi.n	8007d94 <execute_parsed_command+0xa8>
 8007cfe:	a201      	add	r2, pc, #4	; (adr r2, 8007d04 <execute_parsed_command+0x18>)
 8007d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d04:	08007d29 	.word	0x08007d29
 8007d08:	08007d35 	.word	0x08007d35
 8007d0c:	08007d41 	.word	0x08007d41
 8007d10:	08007d4d 	.word	0x08007d4d
 8007d14:	08007d59 	.word	0x08007d59
 8007d18:	08007d65 	.word	0x08007d65
 8007d1c:	08007d71 	.word	0x08007d71
 8007d20:	08007d7d 	.word	0x08007d7d
 8007d24:	08007d89 	.word	0x08007d89
	case LAUNCH:
		rocket_launch();
 8007d28:	f000 f84c 	bl	8007dc4 <rocket_launch>
		println((char*) "launch");
 8007d2c:	481c      	ldr	r0, [pc, #112]	; (8007da0 <execute_parsed_command+0xb4>)
 8007d2e:	f7f9 f97d 	bl	800102c <println>
		break;
 8007d32:	e030      	b.n	8007d96 <execute_parsed_command+0xaa>

	case ARM_PROP:
		arming_propulsion();
 8007d34:	f000 f860 	bl	8007df8 <arming_propulsion>
		println((char*) "arm pr");
 8007d38:	481a      	ldr	r0, [pc, #104]	; (8007da4 <execute_parsed_command+0xb8>)
 8007d3a:	f7f9 f977 	bl	800102c <println>
		break;
 8007d3e:	e02a      	b.n	8007d96 <execute_parsed_command+0xaa>

	case ARM_RCOV:
		arming_recovery();
 8007d40:	f000 f866 	bl	8007e10 <arming_recovery>
		println((char*) "arm rc");
 8007d44:	4818      	ldr	r0, [pc, #96]	; (8007da8 <execute_parsed_command+0xbc>)
 8007d46:	f7f9 f971 	bl	800102c <println>
		break;
 8007d4a:	e024      	b.n	8007d96 <execute_parsed_command+0xaa>

	case DISARM_PROP:
		disarm_propulsion();
 8007d4c:	f000 f86c 	bl	8007e28 <disarm_propulsion>
		println((char*) "disarm pr");
 8007d50:	4816      	ldr	r0, [pc, #88]	; (8007dac <execute_parsed_command+0xc0>)
 8007d52:	f7f9 f96b 	bl	800102c <println>
		break;
 8007d56:	e01e      	b.n	8007d96 <execute_parsed_command+0xaa>

	case DISARM_RCOV:
		disarm_recovery();
 8007d58:	f000 f880 	bl	8007e5c <disarm_recovery>
		println((char*) "disarm rc");
 8007d5c:	4814      	ldr	r0, [pc, #80]	; (8007db0 <execute_parsed_command+0xc4>)
 8007d5e:	f7f9 f965 	bl	800102c <println>
		break;
 8007d62:	e018      	b.n	8007d96 <execute_parsed_command+0xaa>

	case VR_POWER_ON:
		VR_Power_On();
 8007d64:	f7fc ff4e 	bl	8004c04 <VR_Power_On>
		println((char*) "vr on");
 8007d68:	4812      	ldr	r0, [pc, #72]	; (8007db4 <execute_parsed_command+0xc8>)
 8007d6a:	f7f9 f95f 	bl	800102c <println>
		break;
 8007d6e:	e012      	b.n	8007d96 <execute_parsed_command+0xaa>

	case VR_REC_START:
		VR_Start_Rec();
 8007d70:	f7fc ff64 	bl	8004c3c <VR_Start_Rec>
		println((char*) "vr start");
 8007d74:	4810      	ldr	r0, [pc, #64]	; (8007db8 <execute_parsed_command+0xcc>)
 8007d76:	f7f9 f959 	bl	800102c <println>
		break;
 8007d7a:	e00c      	b.n	8007d96 <execute_parsed_command+0xaa>

	case VR_REC_STOP:
		VR_Stop_Rec();
 8007d7c:	f7fc ff6a 	bl	8004c54 <VR_Stop_Rec>
		println((char*) "vr stop");
 8007d80:	480e      	ldr	r0, [pc, #56]	; (8007dbc <execute_parsed_command+0xd0>)
 8007d82:	f7f9 f953 	bl	800102c <println>
		break;
 8007d86:	e006      	b.n	8007d96 <execute_parsed_command+0xaa>

	case VR_POWER_OFF:
		VR_Power_Off();
 8007d88:	f7fc ff4c 	bl	8004c24 <VR_Power_Off>
		println((char*) "vr off");
 8007d8c:	480c      	ldr	r0, [pc, #48]	; (8007dc0 <execute_parsed_command+0xd4>)
 8007d8e:	f7f9 f94d 	bl	800102c <println>
		break;
 8007d92:	e000      	b.n	8007d96 <execute_parsed_command+0xaa>

	default:
		break;
 8007d94:	bf00      	nop
	}
}
 8007d96:	bf00      	nop
 8007d98:	3708      	adds	r7, #8
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	08019eb0 	.word	0x08019eb0
 8007da4:	08019eb8 	.word	0x08019eb8
 8007da8:	08019ec0 	.word	0x08019ec0
 8007dac:	08019ec8 	.word	0x08019ec8
 8007db0:	08019ed4 	.word	0x08019ed4
 8007db4:	08019ee0 	.word	0x08019ee0
 8007db8:	08019ee8 	.word	0x08019ee8
 8007dbc:	08019ef4 	.word	0x08019ef4
 8007dc0:	08019efc 	.word	0x08019efc

08007dc4 <rocket_launch>:

void rocket_launch(void) {
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	af00      	add	r7, sp, #0
	// just to be safe, set arming pin high to ensure pyro channels are armed
	HAL_GPIO_WritePin(OUT_PyroValve_Arming_GPIO_Port, OUT_PyroValve_Arming_Pin, SET);
 8007dc8:	2201      	movs	r2, #1
 8007dca:	2102      	movs	r1, #2
 8007dcc:	4808      	ldr	r0, [pc, #32]	; (8007df0 <rocket_launch+0x2c>)
 8007dce:	f001 ff4d 	bl	8009c6c <HAL_GPIO_WritePin>

	// open valve by firing the prop pyro ejection channels
	HAL_GPIO_WritePin(OUT_PyroValve_Gate_1_GPIO_Port, OUT_PyroValve_Gate_1_Pin, SET);
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007dd8:	4806      	ldr	r0, [pc, #24]	; (8007df4 <rocket_launch+0x30>)
 8007dda:	f001 ff47 	bl	8009c6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUT_PyroValve_Gate_2_GPIO_Port, OUT_PyroValve_Gate_2_Pin, SET);
 8007dde:	2201      	movs	r2, #1
 8007de0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007de4:	4803      	ldr	r0, [pc, #12]	; (8007df4 <rocket_launch+0x30>)
 8007de6:	f001 ff41 	bl	8009c6c <HAL_GPIO_WritePin>
}
 8007dea:	bf00      	nop
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	40021800 	.word	0x40021800
 8007df4:	40021400 	.word	0x40021400

08007df8 <arming_propulsion>:

void arming_propulsion(void) {
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	af00      	add	r7, sp, #0
	// arm, TODO: decide whether to add feedback/check on arming status
	HAL_GPIO_WritePin(OUT_PyroValve_Arming_GPIO_Port, OUT_PyroValve_Arming_Pin, SET);
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	2102      	movs	r1, #2
 8007e00:	4802      	ldr	r0, [pc, #8]	; (8007e0c <arming_propulsion+0x14>)
 8007e02:	f001 ff33 	bl	8009c6c <HAL_GPIO_WritePin>
	//state_arm_prop = 1;
	//set_backup_state(FC_STATE_ARM_PROP, //state_arm_prop);
}
 8007e06:	bf00      	nop
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop
 8007e0c:	40021800 	.word	0x40021800

08007e10 <arming_recovery>:

void arming_recovery(void) {
 8007e10:	b580      	push	{r7, lr}
 8007e12:	af00      	add	r7, sp, #0
	// arm, TODO: decide whether to add feedback/check on arming status
	HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET);
 8007e14:	2201      	movs	r2, #1
 8007e16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007e1a:	4802      	ldr	r0, [pc, #8]	; (8007e24 <arming_recovery+0x14>)
 8007e1c:	f001 ff26 	bl	8009c6c <HAL_GPIO_WritePin>
	//state_arm_rcov = 1;
	//set_backup_state(FC_STATE_ARM_RCOV, //state_arm_rcov);
}
 8007e20:	bf00      	nop
 8007e22:	bd80      	pop	{r7, pc}
 8007e24:	40021800 	.word	0x40021800

08007e28 <disarm_propulsion>:

void disarm_propulsion(void) {
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	af00      	add	r7, sp, #0
	// disarm, TODO: decide whether to add feedback/check on arming status
	HAL_GPIO_WritePin(OUT_PyroValve_Arming_GPIO_Port, OUT_PyroValve_Arming_Pin, RESET);
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	2102      	movs	r1, #2
 8007e30:	4808      	ldr	r0, [pc, #32]	; (8007e54 <disarm_propulsion+0x2c>)
 8007e32:	f001 ff1b 	bl	8009c6c <HAL_GPIO_WritePin>

	// also reset the gates in case they were high
	HAL_GPIO_WritePin(OUT_PyroValve_Gate_1_GPIO_Port, OUT_PyroValve_Gate_1_Pin, RESET);
 8007e36:	2200      	movs	r2, #0
 8007e38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007e3c:	4806      	ldr	r0, [pc, #24]	; (8007e58 <disarm_propulsion+0x30>)
 8007e3e:	f001 ff15 	bl	8009c6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUT_PyroValve_Gate_2_GPIO_Port, OUT_PyroValve_Gate_2_Pin, RESET);
 8007e42:	2200      	movs	r2, #0
 8007e44:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007e48:	4803      	ldr	r0, [pc, #12]	; (8007e58 <disarm_propulsion+0x30>)
 8007e4a:	f001 ff0f 	bl	8009c6c <HAL_GPIO_WritePin>

	//state_arm_prop = 0;
	//set_backup_state(FC_STATE_ARM_PROP, //state_arm_prop);
}
 8007e4e:	bf00      	nop
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	40021800 	.word	0x40021800
 8007e58:	40021400 	.word	0x40021400

08007e5c <disarm_recovery>:

void disarm_recovery(void) {
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	af00      	add	r7, sp, #0
	// disarm, TODO: decide whether to add feedback/check on arming status
	HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, RESET);
 8007e60:	2200      	movs	r2, #0
 8007e62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007e66:	4808      	ldr	r0, [pc, #32]	; (8007e88 <disarm_recovery+0x2c>)
 8007e68:	f001 ff00 	bl	8009c6c <HAL_GPIO_WritePin>

	// also reset the gates in case they were high
	HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, RESET);
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007e72:	4805      	ldr	r0, [pc, #20]	; (8007e88 <disarm_recovery+0x2c>)
 8007e74:	f001 fefa 	bl	8009c6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, RESET);
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007e7e:	4802      	ldr	r0, [pc, #8]	; (8007e88 <disarm_recovery+0x2c>)
 8007e80:	f001 fef4 	bl	8009c6c <HAL_GPIO_WritePin>

	//state_arm_rcov = 0;
	//set_backup_state(FC_STATE_ARM_RCOV, //state_arm_rcov);
}
 8007e84:	bf00      	nop
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	40021800 	.word	0x40021800

08007e8c <sx126x_hal_write>:
 * @returns Operation status
 */


sx126x_hal_status_t sx126x_hal_write( const void* hspi, const uint8_t* command, const uint16_t command_length,
                                      const uint8_t* data, const uint16_t data_length ){
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b086      	sub	sp, #24
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	60f8      	str	r0, [r7, #12]
 8007e94:	60b9      	str	r1, [r7, #8]
 8007e96:	603b      	str	r3, [r7, #0]
 8007e98:	4613      	mov	r3, r2
 8007e9a:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    while(HAL_GPIO_ReadPin(BUSY_GPIO,BUSY) == GPIO_PIN_SET);
 8007e9c:	bf00      	nop
 8007e9e:	4b18      	ldr	r3, [pc, #96]	; (8007f00 <sx126x_hal_write+0x74>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a18      	ldr	r2, [pc, #96]	; (8007f04 <sx126x_hal_write+0x78>)
 8007ea4:	8812      	ldrh	r2, [r2, #0]
 8007ea6:	4611      	mov	r1, r2
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f001 fec7 	bl	8009c3c <HAL_GPIO_ReadPin>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d0f4      	beq.n	8007e9e <sx126x_hal_write+0x12>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 8007eb4:	4b14      	ldr	r3, [pc, #80]	; (8007f08 <sx126x_hal_write+0x7c>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a14      	ldr	r2, [pc, #80]	; (8007f0c <sx126x_hal_write+0x80>)
 8007eba:	8811      	ldrh	r1, [r2, #0]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f001 fed4 	bl	8009c6c <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(hspi, command, command_length, 100);
 8007ec4:	88fa      	ldrh	r2, [r7, #6]
 8007ec6:	2364      	movs	r3, #100	; 0x64
 8007ec8:	68b9      	ldr	r1, [r7, #8]
 8007eca:	68f8      	ldr	r0, [r7, #12]
 8007ecc:	f004 fcf7 	bl	800c8be <HAL_SPI_Transmit>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	75fb      	strb	r3, [r7, #23]
    status = HAL_SPI_Transmit(hspi, data, data_length, 100);
 8007ed4:	8c3a      	ldrh	r2, [r7, #32]
 8007ed6:	2364      	movs	r3, #100	; 0x64
 8007ed8:	6839      	ldr	r1, [r7, #0]
 8007eda:	68f8      	ldr	r0, [r7, #12]
 8007edc:	f004 fcef 	bl	800c8be <HAL_SPI_Transmit>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
 8007ee4:	4b08      	ldr	r3, [pc, #32]	; (8007f08 <sx126x_hal_write+0x7c>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a08      	ldr	r2, [pc, #32]	; (8007f0c <sx126x_hal_write+0x80>)
 8007eea:	8811      	ldrh	r1, [r2, #0]
 8007eec:	2201      	movs	r2, #1
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f001 febc 	bl	8009c6c <HAL_GPIO_WritePin>
    return status;
 8007ef4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3718      	adds	r7, #24
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	bf00      	nop
 8007f00:	20000638 	.word	0x20000638
 8007f04:	20000634 	.word	0x20000634
 8007f08:	20000628 	.word	0x20000628
 8007f0c:	20000624 	.word	0x20000624

08007f10 <sx126x_hal_read>:
 * @param [in] data_length      Buffer size to be received
 *
 * @returns Operation status
 */
sx126x_hal_status_t sx126x_hal_read( const void* hspi, const uint8_t* command, const uint16_t command_length,
                                     uint8_t* data, const uint8_t offset ){
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b088      	sub	sp, #32
 8007f14:	af02      	add	r7, sp, #8
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	60b9      	str	r1, [r7, #8]
 8007f1a:	603b      	str	r3, [r7, #0]
 8007f1c:	4613      	mov	r3, r2
 8007f1e:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    while(HAL_GPIO_ReadPin(BUSY_GPIO, BUSY) == GPIO_PIN_SET);
 8007f20:	bf00      	nop
 8007f22:	4b1e      	ldr	r3, [pc, #120]	; (8007f9c <sx126x_hal_read+0x8c>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a1e      	ldr	r2, [pc, #120]	; (8007fa0 <sx126x_hal_read+0x90>)
 8007f28:	8812      	ldrh	r2, [r2, #0]
 8007f2a:	4611      	mov	r1, r2
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f001 fe85 	bl	8009c3c <HAL_GPIO_ReadPin>
 8007f32:	4603      	mov	r3, r0
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d0f4      	beq.n	8007f22 <sx126x_hal_read+0x12>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 8007f38:	4b1a      	ldr	r3, [pc, #104]	; (8007fa4 <sx126x_hal_read+0x94>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a1a      	ldr	r2, [pc, #104]	; (8007fa8 <sx126x_hal_read+0x98>)
 8007f3e:	8811      	ldrh	r1, [r2, #0]
 8007f40:	2200      	movs	r2, #0
 8007f42:	4618      	mov	r0, r3
 8007f44:	f001 fe92 	bl	8009c6c <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(hspi, command, offset, 100);
 8007f48:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007f4c:	b29a      	uxth	r2, r3
 8007f4e:	2364      	movs	r3, #100	; 0x64
 8007f50:	68b9      	ldr	r1, [r7, #8]
 8007f52:	68f8      	ldr	r0, [r7, #12]
 8007f54:	f004 fcb3 	bl	800c8be <HAL_SPI_Transmit>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	75fb      	strb	r3, [r7, #23]
    status = HAL_SPI_TransmitReceive(hspi, command+offset, data, command_length-offset, 100);
 8007f5c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007f60:	68ba      	ldr	r2, [r7, #8]
 8007f62:	18d1      	adds	r1, r2, r3
 8007f64:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	88fa      	ldrh	r2, [r7, #6]
 8007f6c:	1ad3      	subs	r3, r2, r3
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	2264      	movs	r2, #100	; 0x64
 8007f72:	9200      	str	r2, [sp, #0]
 8007f74:	683a      	ldr	r2, [r7, #0]
 8007f76:	68f8      	ldr	r0, [r7, #12]
 8007f78:	f004 feee 	bl	800cd58 <HAL_SPI_TransmitReceive>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
 8007f80:	4b08      	ldr	r3, [pc, #32]	; (8007fa4 <sx126x_hal_read+0x94>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a08      	ldr	r2, [pc, #32]	; (8007fa8 <sx126x_hal_read+0x98>)
 8007f86:	8811      	ldrh	r1, [r2, #0]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f001 fe6e 	bl	8009c6c <HAL_GPIO_WritePin>
    return status;
 8007f90:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3718      	adds	r7, #24
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	20000638 	.word	0x20000638
 8007fa0:	20000634 	.word	0x20000634
 8007fa4:	20000628 	.word	0x20000628
 8007fa8:	20000624 	.word	0x20000624

08007fac <set_NSS_pin>:
    status = HAL_SPI_TransmitReceive(&hspi, (uint8_t*)params, (uint8_t*)response, numOfParams, 100);
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
    return status;
}

void set_NSS_pin(GPIO_TypeDef* _NSS_GPIO, uint16_t _NSS){
 8007fac:	b480      	push	{r7}
 8007fae:	b083      	sub	sp, #12
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	807b      	strh	r3, [r7, #2]
    NSS = _NSS;
 8007fb8:	4a05      	ldr	r2, [pc, #20]	; (8007fd0 <set_NSS_pin+0x24>)
 8007fba:	887b      	ldrh	r3, [r7, #2]
 8007fbc:	8013      	strh	r3, [r2, #0]
    NSS_GPIO = _NSS_GPIO;
 8007fbe:	4a05      	ldr	r2, [pc, #20]	; (8007fd4 <set_NSS_pin+0x28>)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6013      	str	r3, [r2, #0]
}
 8007fc4:	bf00      	nop
 8007fc6:	370c      	adds	r7, #12
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr
 8007fd0:	20000624 	.word	0x20000624
 8007fd4:	20000628 	.word	0x20000628

08007fd8 <set_BUSY_pin>:

void set_BUSY_pin(GPIO_TypeDef* _BUSY_GPIO, uint16_t _BUSY){
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	807b      	strh	r3, [r7, #2]
    BUSY = _BUSY;
 8007fe4:	4a05      	ldr	r2, [pc, #20]	; (8007ffc <set_BUSY_pin+0x24>)
 8007fe6:	887b      	ldrh	r3, [r7, #2]
 8007fe8:	8013      	strh	r3, [r2, #0]
    BUSY_GPIO = _BUSY_GPIO;
 8007fea:	4a05      	ldr	r2, [pc, #20]	; (8008000 <set_BUSY_pin+0x28>)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6013      	str	r3, [r2, #0]
}
 8007ff0:	bf00      	nop
 8007ff2:	370c      	adds	r7, #12
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr
 8007ffc:	20000634 	.word	0x20000634
 8008000:	20000638 	.word	0x20000638

08008004 <set_NRESET_pin>:

void set_NRESET_pin(GPIO_TypeDef* _NRESET_GPIO, uint16_t _NRESET){
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	460b      	mov	r3, r1
 800800e:	807b      	strh	r3, [r7, #2]
    NRESET = _NRESET;
 8008010:	4a05      	ldr	r2, [pc, #20]	; (8008028 <set_NRESET_pin+0x24>)
 8008012:	887b      	ldrh	r3, [r7, #2]
 8008014:	8013      	strh	r3, [r2, #0]
    NRESET_GPIO = _NRESET_GPIO;
 8008016:	4a05      	ldr	r2, [pc, #20]	; (800802c <set_NRESET_pin+0x28>)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6013      	str	r3, [r2, #0]
}
 800801c:	bf00      	nop
 800801e:	370c      	adds	r7, #12
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr
 8008028:	2000062c 	.word	0x2000062c
 800802c:	20000630 	.word	0x20000630

08008030 <set_DIO1_pin>:

void set_DIO1_pin(GPIO_TypeDef* _DIO1_GPIO, uint16_t _DIO1){
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	460b      	mov	r3, r1
 800803a:	807b      	strh	r3, [r7, #2]
    DIO1 = _DIO1;
 800803c:	4a05      	ldr	r2, [pc, #20]	; (8008054 <set_DIO1_pin+0x24>)
 800803e:	887b      	ldrh	r3, [r7, #2]
 8008040:	8013      	strh	r3, [r2, #0]
    DIO1_GPIO = _DIO1_GPIO;
 8008042:	4a05      	ldr	r2, [pc, #20]	; (8008058 <set_DIO1_pin+0x28>)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6013      	str	r3, [r2, #0]
}
 8008048:	bf00      	nop
 800804a:	370c      	adds	r7, #12
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr
 8008054:	2000063c 	.word	0x2000063c
 8008058:	20000640 	.word	0x20000640

0800805c <set_hspi>:
void set_DIO3_pin(GPIO_TypeDef* _DIO3_GPIO, uint16_t _DIO3){
    DIO3 = _DIO3;
    DIO3_GPIO = _DIO3_GPIO;
}

void set_hspi(SPI_HandleTypeDef _hspi){
 800805c:	b084      	sub	sp, #16
 800805e:	b580      	push	{r7, lr}
 8008060:	af00      	add	r7, sp, #0
 8008062:	f107 0c08 	add.w	ip, r7, #8
 8008066:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    hspi = _hspi;
 800806a:	4b07      	ldr	r3, [pc, #28]	; (8008088 <set_hspi+0x2c>)
 800806c:	4618      	mov	r0, r3
 800806e:	f107 0308 	add.w	r3, r7, #8
 8008072:	2258      	movs	r2, #88	; 0x58
 8008074:	4619      	mov	r1, r3
 8008076:	f00a ff61 	bl	8012f3c <memcpy>
}
 800807a:	bf00      	nop
 800807c:	46bd      	mov	sp, r7
 800807e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008082:	b004      	add	sp, #16
 8008084:	4770      	bx	lr
 8008086:	bf00      	nop
 8008088:	20000644 	.word	0x20000644

0800808c <TxProtocol>:
    //set dio and irq parameters
    sx126x_set_dio_irq_params(&hspi, irq_mask, dio1_mask, dio2_mask, dio3_mask);

}

void TxProtocol(uint8_t data[], uint8_t data_length){
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	460b      	mov	r3, r1
 8008096:	70fb      	strb	r3, [r7, #3]

    HAL_StatusTypeDef command_status;
    command_status = sx126x_clear_irq_status(&hspi, dio1_mask);
 8008098:	4b18      	ldr	r3, [pc, #96]	; (80080fc <TxProtocol+0x70>)
 800809a:	881b      	ldrh	r3, [r3, #0]
 800809c:	4619      	mov	r1, r3
 800809e:	4818      	ldr	r0, [pc, #96]	; (8008100 <TxProtocol+0x74>)
 80080a0:	f000 fc78 	bl	8008994 <sx126x_clear_irq_status>
 80080a4:	4603      	mov	r3, r0
 80080a6:	73fb      	strb	r3, [r7, #15]
    command_status = sx126x_write_buffer(&hspi, 0, data, data_length); // 0 is the offset
 80080a8:	78fb      	ldrb	r3, [r7, #3]
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	2100      	movs	r1, #0
 80080ae:	4814      	ldr	r0, [pc, #80]	; (8008100 <TxProtocol+0x74>)
 80080b0:	f000 fb22 	bl	80086f8 <sx126x_write_buffer>
 80080b4:	4603      	mov	r3, r0
 80080b6:	73fb      	strb	r3, [r7, #15]
    command_status = sx126x_set_tx(&hspi, 6000, data_length);
 80080b8:	78fb      	ldrb	r3, [r7, #3]
 80080ba:	461a      	mov	r2, r3
 80080bc:	f241 7170 	movw	r1, #6000	; 0x1770
 80080c0:	480f      	ldr	r0, [pc, #60]	; (8008100 <TxProtocol+0x74>)
 80080c2:	f000 f995 	bl	80083f0 <sx126x_set_tx>
 80080c6:	4603      	mov	r3, r0
 80080c8:	73fb      	strb	r3, [r7, #15]
    osDelay(100);
 80080ca:	2064      	movs	r0, #100	; 0x64
 80080cc:	f006 fffc 	bl	800f0c8 <osDelay>

    sx126x_irq_mask_t irq;
    do {
        command_status = sx126x_get_irq_status(&hspi, &irq); //reading the irq into irq
 80080d0:	f107 030c 	add.w	r3, r7, #12
 80080d4:	4619      	mov	r1, r3
 80080d6:	480a      	ldr	r0, [pc, #40]	; (8008100 <TxProtocol+0x74>)
 80080d8:	f000 fc2a 	bl	8008930 <sx126x_get_irq_status>
 80080dc:	4603      	mov	r3, r0
 80080de:	73fb      	strb	r3, [r7, #15]
    } while ( (!(irq & SX126X_IRQ_TX_DONE)) && (!(irq & SX126X_IRQ_TIMEOUT)) );
 80080e0:	89bb      	ldrh	r3, [r7, #12]
 80080e2:	f003 0301 	and.w	r3, r3, #1
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d104      	bne.n	80080f4 <TxProtocol+0x68>
 80080ea:	89bb      	ldrh	r3, [r7, #12]
 80080ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d0ed      	beq.n	80080d0 <TxProtocol+0x44>
}
 80080f4:	bf00      	nop
 80080f6:	3710      	adds	r7, #16
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	200000c4 	.word	0x200000c4
 8008100:	20000644 	.word	0x20000644

08008104 <Rx_setup>:

void Rx_setup(){
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af02      	add	r7, sp, #8
    //NEED TO ADD COMMAND ERROR HANDLING
    HAL_GPIO_WritePin(NRESET_GPIO, NRESET, GPIO_PIN_SET);
 800810a:	4b5a      	ldr	r3, [pc, #360]	; (8008274 <Rx_setup+0x170>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a5a      	ldr	r2, [pc, #360]	; (8008278 <Rx_setup+0x174>)
 8008110:	8811      	ldrh	r1, [r2, #0]
 8008112:	2201      	movs	r2, #1
 8008114:	4618      	mov	r0, r3
 8008116:	f001 fda9 	bl	8009c6c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 800811a:	4b58      	ldr	r3, [pc, #352]	; (800827c <Rx_setup+0x178>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a58      	ldr	r2, [pc, #352]	; (8008280 <Rx_setup+0x17c>)
 8008120:	8811      	ldrh	r1, [r2, #0]
 8008122:	2200      	movs	r2, #0
 8008124:	4618      	mov	r0, r3
 8008126:	f001 fda1 	bl	8009c6c <HAL_GPIO_WritePin>
    HAL_Delay(50);
 800812a:	2032      	movs	r0, #50	; 0x32
 800812c:	f000 fe92 	bl	8008e54 <HAL_Delay>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);             //make sure chip select is off
 8008130:	4b52      	ldr	r3, [pc, #328]	; (800827c <Rx_setup+0x178>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a52      	ldr	r2, [pc, #328]	; (8008280 <Rx_setup+0x17c>)
 8008136:	8811      	ldrh	r1, [r2, #0]
 8008138:	2201      	movs	r2, #1
 800813a:	4618      	mov	r0, r3
 800813c:	f001 fd96 	bl	8009c6c <HAL_GPIO_WritePin>

    //set to standby for setup
    sx126x_set_standby(&hspi, 0);
 8008140:	2100      	movs	r1, #0
 8008142:	4850      	ldr	r0, [pc, #320]	; (8008284 <Rx_setup+0x180>)
 8008144:	f000 f93a 	bl	80083bc <sx126x_set_standby>

    //set general parameters
    sx126x_set_rf_freq(&hspi, frequency);                       //set rf frequency
 8008148:	4b4f      	ldr	r3, [pc, #316]	; (8008288 <Rx_setup+0x184>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4619      	mov	r1, r3
 800814e:	484d      	ldr	r0, [pc, #308]	; (8008284 <Rx_setup+0x180>)
 8008150:	f000 fc88 	bl	8008a64 <sx126x_set_rf_freq>
    sx126x_set_pkt_type(&hspi, packet_type);                    //set packet type
 8008154:	4b4d      	ldr	r3, [pc, #308]	; (800828c <Rx_setup+0x188>)
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	4619      	mov	r1, r3
 800815a:	484a      	ldr	r0, [pc, #296]	; (8008284 <Rx_setup+0x180>)
 800815c:	f000 fcbc 	bl	8008ad8 <sx126x_set_pkt_type>
    sx126x_set_rx_tx_fallback_mode(&hspi, fallback_mode);       //set rx tx fallback mode
 8008160:	4b4b      	ldr	r3, [pc, #300]	; (8008290 <Rx_setup+0x18c>)
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	4619      	mov	r1, r3
 8008166:	4847      	ldr	r0, [pc, #284]	; (8008284 <Rx_setup+0x180>)
 8008168:	f000 fa5a 	bl	8008620 <sx126x_set_rx_tx_fallback_mode>
    sx126x_set_dio2_as_rf_sw_ctrl(&hspi, 1);                    //set dio2 as rf sw -> 1 is to activate it 0 would be to have it as regular irq
 800816c:	2101      	movs	r1, #1
 800816e:	4845      	ldr	r0, [pc, #276]	; (8008284 <Rx_setup+0x180>)
 8008170:	f000 fc36 	bl	80089e0 <sx126x_set_dio2_as_rf_sw_ctrl>
    sx126x_set_dio3_as_tcxo_ctrl(&hspi, tcxo_voltage_ctrl, 100);//set dio3 as tcxo ctrl, 100 is for the delay in ms
 8008174:	4b47      	ldr	r3, [pc, #284]	; (8008294 <Rx_setup+0x190>)
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	2264      	movs	r2, #100	; 0x64
 800817a:	4619      	mov	r1, r3
 800817c:	4841      	ldr	r0, [pc, #260]	; (8008284 <Rx_setup+0x180>)
 800817e:	f000 fc49 	bl	8008a14 <sx126x_set_dio3_as_tcxo_ctrl>

    //calibrate functions
    sx126x_cal(&hspi, cal_mask);                                //calibrate radio, mask chooses what to calibrate
 8008182:	4b45      	ldr	r3, [pc, #276]	; (8008298 <Rx_setup+0x194>)
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	4619      	mov	r1, r3
 8008188:	483e      	ldr	r0, [pc, #248]	; (8008284 <Rx_setup+0x180>)
 800818a:	f000 fa0b 	bl	80085a4 <sx126x_cal>
    HAL_Delay(50);
 800818e:	2032      	movs	r0, #50	; 0x32
 8008190:	f000 fe60 	bl	8008e54 <HAL_Delay>
    sx126x_set_reg_mode(&hspi, regulator_mode);                 //ldo or dc-dc
 8008194:	4b41      	ldr	r3, [pc, #260]	; (800829c <Rx_setup+0x198>)
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	4619      	mov	r1, r3
 800819a:	483a      	ldr	r0, [pc, #232]	; (8008284 <Rx_setup+0x180>)
 800819c:	f000 f9e8 	bl	8008570 <sx126x_set_reg_mode>
    sx126x_cal_img_hex(&hspi, cal_low_freq, cal_hi_freq);       //image calibration frequencies
 80081a0:	4b3f      	ldr	r3, [pc, #252]	; (80082a0 <Rx_setup+0x19c>)
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	4a3f      	ldr	r2, [pc, #252]	; (80082a4 <Rx_setup+0x1a0>)
 80081a6:	7812      	ldrb	r2, [r2, #0]
 80081a8:	4619      	mov	r1, r3
 80081aa:	4836      	ldr	r0, [pc, #216]	; (8008284 <Rx_setup+0x180>)
 80081ac:	f000 fa14 	bl	80085d8 <sx126x_cal_img_hex>

    sx126x_set_buffer_base_address(&hspi, tx_address_base, rx_address_base);
 80081b0:	4b3d      	ldr	r3, [pc, #244]	; (80082a8 <Rx_setup+0x1a4>)
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	4a3d      	ldr	r2, [pc, #244]	; (80082ac <Rx_setup+0x1a8>)
 80081b6:	7812      	ldrb	r2, [r2, #0]
 80081b8:	4619      	mov	r1, r3
 80081ba:	4832      	ldr	r0, [pc, #200]	; (8008284 <Rx_setup+0x180>)
 80081bc:	f000 fd40 	bl	8008c40 <sx126x_set_buffer_base_address>

    //set modulation parameters
    struct sx126x_mod_params_lora_s *mod_params = malloc(sizeof(sx126x_mod_params_lora_t));
 80081c0:	2004      	movs	r0, #4
 80081c2:	f00a feab 	bl	8012f1c <malloc>
 80081c6:	4603      	mov	r3, r0
 80081c8:	607b      	str	r3, [r7, #4]
    mod_params->sf=lora_sf;
 80081ca:	4b39      	ldr	r3, [pc, #228]	; (80082b0 <Rx_setup+0x1ac>)
 80081cc:	781a      	ldrb	r2, [r3, #0]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	701a      	strb	r2, [r3, #0]
    mod_params->bw=lora_bw;
 80081d2:	4b38      	ldr	r3, [pc, #224]	; (80082b4 <Rx_setup+0x1b0>)
 80081d4:	781a      	ldrb	r2, [r3, #0]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	705a      	strb	r2, [r3, #1]
    mod_params->cr=lora_cr;
 80081da:	4b37      	ldr	r3, [pc, #220]	; (80082b8 <Rx_setup+0x1b4>)
 80081dc:	781a      	ldrb	r2, [r3, #0]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	709a      	strb	r2, [r3, #2]
    mod_params->ldro=lora_ldro;
 80081e2:	4b36      	ldr	r3, [pc, #216]	; (80082bc <Rx_setup+0x1b8>)
 80081e4:	781a      	ldrb	r2, [r3, #0]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	70da      	strb	r2, [r3, #3]
    sx126x_set_lora_mod_params(&hspi, mod_params);
 80081ea:	6879      	ldr	r1, [r7, #4]
 80081ec:	4825      	ldr	r0, [pc, #148]	; (8008284 <Rx_setup+0x180>)
 80081ee:	f000 fc8d 	bl	8008b0c <sx126x_set_lora_mod_params>
    free(mod_params);
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f00a fe9a 	bl	8012f2c <free>

    //set lora packet params
    struct sx126x_pkt_params_lora_s *lora_params = malloc(sizeof(sx126x_pkt_params_lora_t));
 80081f8:	2006      	movs	r0, #6
 80081fa:	f00a fe8f 	bl	8012f1c <malloc>
 80081fe:	4603      	mov	r3, r0
 8008200:	603b      	str	r3, [r7, #0]
    lora_params->preamble_len_in_symb=pkt_preamble_len;
 8008202:	4b2f      	ldr	r3, [pc, #188]	; (80082c0 <Rx_setup+0x1bc>)
 8008204:	881a      	ldrh	r2, [r3, #0]
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	801a      	strh	r2, [r3, #0]
    lora_params->header_type=header_type;
 800820a:	4b2e      	ldr	r3, [pc, #184]	; (80082c4 <Rx_setup+0x1c0>)
 800820c:	781a      	ldrb	r2, [r3, #0]
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	709a      	strb	r2, [r3, #2]
    lora_params->pld_len_in_bytes=payload_len;
 8008212:	4b2d      	ldr	r3, [pc, #180]	; (80082c8 <Rx_setup+0x1c4>)
 8008214:	781a      	ldrb	r2, [r3, #0]
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	70da      	strb	r2, [r3, #3]
    lora_params->crc_is_on=crc_is_on;
 800821a:	4b2c      	ldr	r3, [pc, #176]	; (80082cc <Rx_setup+0x1c8>)
 800821c:	781a      	ldrb	r2, [r3, #0]
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	711a      	strb	r2, [r3, #4]
    lora_params->invert_iq_is_on=invert_iq_is_on;
 8008222:	4b2b      	ldr	r3, [pc, #172]	; (80082d0 <Rx_setup+0x1cc>)
 8008224:	781a      	ldrb	r2, [r3, #0]
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	715a      	strb	r2, [r3, #5]
    sx126x_set_lora_pkt_params(&hspi, lora_params);
 800822a:	6839      	ldr	r1, [r7, #0]
 800822c:	4815      	ldr	r0, [pc, #84]	; (8008284 <Rx_setup+0x180>)
 800822e:	f000 fc99 	bl	8008b64 <sx126x_set_lora_pkt_params>
    free(lora_params);
 8008232:	6838      	ldr	r0, [r7, #0]
 8008234:	f00a fe7a 	bl	8012f2c <free>

    //set dio and irq parameters
    sx126x_set_dio_irq_params(&hspi, irq_mask, dio1_mask, dio2_mask, dio3_mask);
 8008238:	4b26      	ldr	r3, [pc, #152]	; (80082d4 <Rx_setup+0x1d0>)
 800823a:	8819      	ldrh	r1, [r3, #0]
 800823c:	4b26      	ldr	r3, [pc, #152]	; (80082d8 <Rx_setup+0x1d4>)
 800823e:	881a      	ldrh	r2, [r3, #0]
 8008240:	4b26      	ldr	r3, [pc, #152]	; (80082dc <Rx_setup+0x1d8>)
 8008242:	8818      	ldrh	r0, [r3, #0]
 8008244:	4b26      	ldr	r3, [pc, #152]	; (80082e0 <Rx_setup+0x1dc>)
 8008246:	881b      	ldrh	r3, [r3, #0]
 8008248:	9300      	str	r3, [sp, #0]
 800824a:	4603      	mov	r3, r0
 800824c:	480d      	ldr	r0, [pc, #52]	; (8008284 <Rx_setup+0x180>)
 800824e:	f000 fb2b 	bl	80088a8 <sx126x_set_dio_irq_params>

    //timer for TIMEOUT params
    sx126x_stop_timer_on_preamble(&hspi, timer_is_stopped_at_header);
 8008252:	4b24      	ldr	r3, [pc, #144]	; (80082e4 <Rx_setup+0x1e0>)
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	4619      	mov	r1, r3
 8008258:	480a      	ldr	r0, [pc, #40]	; (8008284 <Rx_setup+0x180>)
 800825a:	f000 f96f 	bl	800853c <sx126x_stop_timer_on_preamble>
    sx126x_set_lora_symb_nb_timeout(&hspi, nb_symbols_for_valid_rx);
 800825e:	4b22      	ldr	r3, [pc, #136]	; (80082e8 <Rx_setup+0x1e4>)
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	4619      	mov	r1, r3
 8008264:	4807      	ldr	r0, [pc, #28]	; (8008284 <Rx_setup+0x180>)
 8008266:	f000 fd0f 	bl	8008c88 <sx126x_set_lora_symb_nb_timeout>


}
 800826a:	bf00      	nop
 800826c:	3708      	adds	r7, #8
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	20000630 	.word	0x20000630
 8008278:	2000062c 	.word	0x2000062c
 800827c:	20000628 	.word	0x20000628
 8008280:	20000624 	.word	0x20000624
 8008284:	20000644 	.word	0x20000644
 8008288:	200000b0 	.word	0x200000b0
 800828c:	200000b4 	.word	0x200000b4
 8008290:	200000b5 	.word	0x200000b5
 8008294:	200000b6 	.word	0x200000b6
 8008298:	200000b8 	.word	0x200000b8
 800829c:	200000b7 	.word	0x200000b7
 80082a0:	200000b9 	.word	0x200000b9
 80082a4:	200000ba 	.word	0x200000ba
 80082a8:	2000069c 	.word	0x2000069c
 80082ac:	2000069d 	.word	0x2000069d
 80082b0:	200000bb 	.word	0x200000bb
 80082b4:	200000bc 	.word	0x200000bc
 80082b8:	200000bd 	.word	0x200000bd
 80082bc:	2000069e 	.word	0x2000069e
 80082c0:	200000be 	.word	0x200000be
 80082c4:	2000069f 	.word	0x2000069f
 80082c8:	200000c0 	.word	0x200000c0
 80082cc:	200000c1 	.word	0x200000c1
 80082d0:	200006a0 	.word	0x200006a0
 80082d4:	200000c2 	.word	0x200000c2
 80082d8:	200000c4 	.word	0x200000c4
 80082dc:	200006a4 	.word	0x200006a4
 80082e0:	200006a6 	.word	0x200006a6
 80082e4:	200006a1 	.word	0x200006a1
 80082e8:	200006a2 	.word	0x200006a2

080082ec <RxProtocol>:

void RxProtocol(uint8_t buffer_received[]){
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]

    HAL_StatusTypeDef command_status;
    command_status = sx126x_clear_irq_status(&hspi, dio1_mask);
 80082f4:	4b2f      	ldr	r3, [pc, #188]	; (80083b4 <RxProtocol+0xc8>)
 80082f6:	881b      	ldrh	r3, [r3, #0]
 80082f8:	4619      	mov	r1, r3
 80082fa:	482f      	ldr	r0, [pc, #188]	; (80083b8 <RxProtocol+0xcc>)
 80082fc:	f000 fb4a 	bl	8008994 <sx126x_clear_irq_status>
 8008300:	4603      	mov	r3, r0
 8008302:	73fb      	strb	r3, [r7, #15]
    command_status = sx126x_set_rx(&hspi, 3000);
 8008304:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8008308:	482b      	ldr	r0, [pc, #172]	; (80083b8 <RxProtocol+0xcc>)
 800830a:	f000 f8dd 	bl	80084c8 <sx126x_set_rx>
 800830e:	4603      	mov	r3, r0
 8008310:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(1400);
 8008312:	f44f 60af 	mov.w	r0, #1400	; 0x578
 8008316:	f000 fd9d 	bl	8008e54 <HAL_Delay>

    sx126x_irq_mask_t irq;
    command_status = sx126x_get_irq_status(&hspi, &irq); //reading the irq into irq
 800831a:	f107 030c 	add.w	r3, r7, #12
 800831e:	4619      	mov	r1, r3
 8008320:	4825      	ldr	r0, [pc, #148]	; (80083b8 <RxProtocol+0xcc>)
 8008322:	f000 fb05 	bl	8008930 <sx126x_get_irq_status>
 8008326:	4603      	mov	r3, r0
 8008328:	73fb      	strb	r3, [r7, #15]
    do {
        command_status = sx126x_get_irq_status(&hspi, &irq); //reading the irq into irq
 800832a:	f107 030c 	add.w	r3, r7, #12
 800832e:	4619      	mov	r1, r3
 8008330:	4821      	ldr	r0, [pc, #132]	; (80083b8 <RxProtocol+0xcc>)
 8008332:	f000 fafd 	bl	8008930 <sx126x_get_irq_status>
 8008336:	4603      	mov	r3, r0
 8008338:	73fb      	strb	r3, [r7, #15]
    } while ( (!(irq & SX126X_IRQ_RX_DONE)) && (!(irq & SX126X_IRQ_TIMEOUT)) );
 800833a:	89bb      	ldrh	r3, [r7, #12]
 800833c:	f003 0302 	and.w	r3, r3, #2
 8008340:	2b00      	cmp	r3, #0
 8008342:	d104      	bne.n	800834e <RxProtocol+0x62>
 8008344:	89bb      	ldrh	r3, [r7, #12]
 8008346:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800834a:	2b00      	cmp	r3, #0
 800834c:	d0ed      	beq.n	800832a <RxProtocol+0x3e>

    if (irq & SX126X_IRQ_TIMEOUT) {
 800834e:	89bb      	ldrh	r3, [r7, #12]
 8008350:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008354:	2b00      	cmp	r3, #0
 8008356:	d005      	beq.n	8008364 <RxProtocol+0x78>
        //transmitBuffer("RX TIMEOUT!");
        sx126x_clear_irq_status(&hspi, SX126X_IRQ_TIMEOUT);
 8008358:	f44f 7100 	mov.w	r1, #512	; 0x200
 800835c:	4816      	ldr	r0, [pc, #88]	; (80083b8 <RxProtocol+0xcc>)
 800835e:	f000 fb19 	bl	8008994 <sx126x_clear_irq_status>
                //transmitBuffer("----- RECEIVED DATA -----");
                //transmitBuffer(buffer_received);
            }
        }
    }
}
 8008362:	e022      	b.n	80083aa <RxProtocol+0xbe>
        if (irq & SX126X_IRQ_HEADER_ERROR || irq & SX126X_IRQ_CRC_ERROR) {
 8008364:	89bb      	ldrh	r3, [r7, #12]
 8008366:	f003 0320 	and.w	r3, r3, #32
 800836a:	2b00      	cmp	r3, #0
 800836c:	d104      	bne.n	8008378 <RxProtocol+0x8c>
 800836e:	89bb      	ldrh	r3, [r7, #12]
 8008370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008374:	2b00      	cmp	r3, #0
 8008376:	d004      	beq.n	8008382 <RxProtocol+0x96>
            sx126x_clear_irq_status(&hspi, SX126X_IRQ_HEADER_ERROR | SX126X_IRQ_CRC_ERROR);
 8008378:	2160      	movs	r1, #96	; 0x60
 800837a:	480f      	ldr	r0, [pc, #60]	; (80083b8 <RxProtocol+0xcc>)
 800837c:	f000 fb0a 	bl	8008994 <sx126x_clear_irq_status>
}
 8008380:	e013      	b.n	80083aa <RxProtocol+0xbe>
        } else if (irq & SX126X_IRQ_RX_DONE) {
 8008382:	89bb      	ldrh	r3, [r7, #12]
 8008384:	f003 0302 	and.w	r3, r3, #2
 8008388:	2b00      	cmp	r3, #0
 800838a:	d00e      	beq.n	80083aa <RxProtocol+0xbe>
            command_status = sx126x_read_buffer(&hspi, buffer_received);
 800838c:	6879      	ldr	r1, [r7, #4]
 800838e:	480a      	ldr	r0, [pc, #40]	; (80083b8 <RxProtocol+0xcc>)
 8008390:	f000 f9d2 	bl	8008738 <sx126x_read_buffer>
 8008394:	4603      	mov	r3, r0
 8008396:	73fb      	strb	r3, [r7, #15]
            if (command_status != SX126X_STATUS_OK) {
 8008398:	7bfb      	ldrb	r3, [r7, #15]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d105      	bne.n	80083aa <RxProtocol+0xbe>
                sx126x_get_irq_status(&hspi, &irq);
 800839e:	f107 030c 	add.w	r3, r7, #12
 80083a2:	4619      	mov	r1, r3
 80083a4:	4804      	ldr	r0, [pc, #16]	; (80083b8 <RxProtocol+0xcc>)
 80083a6:	f000 fac3 	bl	8008930 <sx126x_get_irq_status>
}
 80083aa:	bf00      	nop
 80083ac:	3710      	adds	r7, #16
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
 80083b2:	bf00      	nop
 80083b4:	200000c4 	.word	0x200000c4
 80083b8:	20000644 	.word	0x20000644

080083bc <sx126x_set_standby>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_SLEEP, 0, 0 );
}

sx126x_status_t sx126x_set_standby( const void* context, const sx126x_standby_cfg_t cfg )
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b086      	sub	sp, #24
 80083c0:	af02      	add	r7, sp, #8
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	460b      	mov	r3, r1
 80083c6:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_STANDBY] = { 0 };
 80083c8:	2300      	movs	r3, #0
 80083ca:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_STANDBY;
 80083cc:	2380      	movs	r3, #128	; 0x80
 80083ce:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) cfg;
 80083d0:	78fb      	ldrb	r3, [r7, #3]
 80083d2:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_STANDBY, 0, 0 );
 80083d4:	f107 010c 	add.w	r1, r7, #12
 80083d8:	2300      	movs	r3, #0
 80083da:	9300      	str	r3, [sp, #0]
 80083dc:	2300      	movs	r3, #0
 80083de:	2202      	movs	r2, #2
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f7ff fd53 	bl	8007e8c <sx126x_hal_write>
 80083e6:	4603      	mov	r3, r0
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3710      	adds	r7, #16
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <sx126x_set_tx>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_FS, 0, 0 );
}

sx126x_status_t sx126x_set_tx( const void* context, const uint32_t timeout_in_ms , uint8_t lora_data_length)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b086      	sub	sp, #24
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	60f8      	str	r0, [r7, #12]
 80083f8:	60b9      	str	r1, [r7, #8]
 80083fa:	4613      	mov	r3, r2
 80083fc:	71fb      	strb	r3, [r7, #7]
    if (packet_type == SX126X_PKT_TYPE_LORA) {
 80083fe:	4b1b      	ldr	r3, [pc, #108]	; (800846c <sx126x_set_tx+0x7c>)
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	2b01      	cmp	r3, #1
 8008404:	d11e      	bne.n	8008444 <sx126x_set_tx+0x54>
        struct sx126x_pkt_params_lora_s *lora_params = malloc(sizeof(sx126x_pkt_params_lora_t));
 8008406:	2006      	movs	r0, #6
 8008408:	f00a fd88 	bl	8012f1c <malloc>
 800840c:	4603      	mov	r3, r0
 800840e:	617b      	str	r3, [r7, #20]
        lora_params->preamble_len_in_symb=pkt_preamble_len;
 8008410:	4b17      	ldr	r3, [pc, #92]	; (8008470 <sx126x_set_tx+0x80>)
 8008412:	881a      	ldrh	r2, [r3, #0]
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	801a      	strh	r2, [r3, #0]
        lora_params->header_type=header_type;
 8008418:	4b16      	ldr	r3, [pc, #88]	; (8008474 <sx126x_set_tx+0x84>)
 800841a:	781a      	ldrb	r2, [r3, #0]
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	709a      	strb	r2, [r3, #2]
        lora_params->pld_len_in_bytes=lora_data_length;
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	79fa      	ldrb	r2, [r7, #7]
 8008424:	70da      	strb	r2, [r3, #3]
        lora_params->crc_is_on=crc_is_on;
 8008426:	4b14      	ldr	r3, [pc, #80]	; (8008478 <sx126x_set_tx+0x88>)
 8008428:	781a      	ldrb	r2, [r3, #0]
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	711a      	strb	r2, [r3, #4]
        lora_params->invert_iq_is_on=invert_iq_is_on;
 800842e:	4b13      	ldr	r3, [pc, #76]	; (800847c <sx126x_set_tx+0x8c>)
 8008430:	781a      	ldrb	r2, [r3, #0]
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	715a      	strb	r2, [r3, #5]
        sx126x_set_lora_pkt_params(&hspi, lora_params);
 8008436:	6979      	ldr	r1, [r7, #20]
 8008438:	4811      	ldr	r0, [pc, #68]	; (8008480 <sx126x_set_tx+0x90>)
 800843a:	f000 fb93 	bl	8008b64 <sx126x_set_lora_pkt_params>
        free(lora_params);
 800843e:	6978      	ldr	r0, [r7, #20]
 8008440:	f00a fd74 	bl	8012f2c <free>
    }

    if( timeout_in_ms > SX126X_MAX_TIMEOUT_IN_MS )
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800844a:	d301      	bcc.n	8008450 <sx126x_set_tx+0x60>
    {
        return SX126X_STATUS_UNKNOWN_VALUE;
 800844c:	2302      	movs	r3, #2
 800844e:	e008      	b.n	8008462 <sx126x_set_tx+0x72>
    }

    const uint32_t timeout_in_rtc_step = sx126x_convert_timeout_in_ms_to_rtc_step( timeout_in_ms );
 8008450:	68b8      	ldr	r0, [r7, #8]
 8008452:	f000 fcb1 	bl	8008db8 <sx126x_convert_timeout_in_ms_to_rtc_step>
 8008456:	6138      	str	r0, [r7, #16]

    return sx126x_set_tx_with_timeout_in_rtc_step( context, timeout_in_rtc_step );
 8008458:	6939      	ldr	r1, [r7, #16]
 800845a:	68f8      	ldr	r0, [r7, #12]
 800845c:	f000 f812 	bl	8008484 <sx126x_set_tx_with_timeout_in_rtc_step>
 8008460:	4603      	mov	r3, r0
}
 8008462:	4618      	mov	r0, r3
 8008464:	3718      	adds	r7, #24
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	200000b4 	.word	0x200000b4
 8008470:	200000be 	.word	0x200000be
 8008474:	2000069f 	.word	0x2000069f
 8008478:	200000c1 	.word	0x200000c1
 800847c:	200006a0 	.word	0x200006a0
 8008480:	20000644 	.word	0x20000644

08008484 <sx126x_set_tx_with_timeout_in_rtc_step>:

sx126x_status_t sx126x_set_tx_with_timeout_in_rtc_step( const void* context, const uint32_t timeout_in_rtc_step )
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b086      	sub	sp, #24
 8008488:	af02      	add	r7, sp, #8
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_TX] = { 0 };
 800848e:	2300      	movs	r3, #0
 8008490:	60fb      	str	r3, [r7, #12]

    buf[0] = SX126X_SET_TX;
 8008492:	2383      	movs	r3, #131	; 0x83
 8008494:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t )( timeout_in_rtc_step >> 16 );
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	0c1b      	lsrs	r3, r3, #16
 800849a:	b2db      	uxtb	r3, r3
 800849c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout_in_rtc_step >> 8 );
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	0a1b      	lsrs	r3, r3, #8
 80084a2:	b2db      	uxtb	r3, r3
 80084a4:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout_in_rtc_step >> 0 );
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	b2db      	uxtb	r3, r3
 80084aa:	73fb      	strb	r3, [r7, #15]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX, 0, 0 );
 80084ac:	f107 010c 	add.w	r1, r7, #12
 80084b0:	2300      	movs	r3, #0
 80084b2:	9300      	str	r3, [sp, #0]
 80084b4:	2300      	movs	r3, #0
 80084b6:	2204      	movs	r2, #4
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f7ff fce7 	bl	8007e8c <sx126x_hal_write>
 80084be:	4603      	mov	r3, r0
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3710      	adds	r7, #16
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <sx126x_set_rx>:

sx126x_status_t sx126x_set_rx( const void* context, const uint32_t timeout_in_ms )
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	6039      	str	r1, [r7, #0]
    if( timeout_in_ms > SX126X_MAX_TIMEOUT_IN_MS )
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80084d8:	d301      	bcc.n	80084de <sx126x_set_rx+0x16>
    {
        return SX126X_STATUS_UNKNOWN_VALUE;
 80084da:	2302      	movs	r3, #2
 80084dc:	e008      	b.n	80084f0 <sx126x_set_rx+0x28>
    }

    const uint32_t timeout_in_rtc_step = sx126x_convert_timeout_in_ms_to_rtc_step( timeout_in_ms );
 80084de:	6838      	ldr	r0, [r7, #0]
 80084e0:	f000 fc6a 	bl	8008db8 <sx126x_convert_timeout_in_ms_to_rtc_step>
 80084e4:	60f8      	str	r0, [r7, #12]

    return sx126x_set_rx_with_timeout_in_rtc_step( context, timeout_in_rtc_step );
 80084e6:	68f9      	ldr	r1, [r7, #12]
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f000 f805 	bl	80084f8 <sx126x_set_rx_with_timeout_in_rtc_step>
 80084ee:	4603      	mov	r3, r0
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3710      	adds	r7, #16
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}

080084f8 <sx126x_set_rx_with_timeout_in_rtc_step>:

sx126x_status_t sx126x_set_rx_with_timeout_in_rtc_step( const void* context, const uint32_t timeout_in_rtc_step )
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b086      	sub	sp, #24
 80084fc:	af02      	add	r7, sp, #8
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_RX] = { 0 };
 8008502:	2300      	movs	r3, #0
 8008504:	60fb      	str	r3, [r7, #12]

    buf[0] = SX126X_SET_RX;
 8008506:	2382      	movs	r3, #130	; 0x82
 8008508:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t )( timeout_in_rtc_step >> 16 );
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	0c1b      	lsrs	r3, r3, #16
 800850e:	b2db      	uxtb	r3, r3
 8008510:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout_in_rtc_step >> 8 );
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	0a1b      	lsrs	r3, r3, #8
 8008516:	b2db      	uxtb	r3, r3
 8008518:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout_in_rtc_step >> 0 );
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	b2db      	uxtb	r3, r3
 800851e:	73fb      	strb	r3, [r7, #15]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RX, 0, 0 );
 8008520:	f107 010c 	add.w	r1, r7, #12
 8008524:	2300      	movs	r3, #0
 8008526:	9300      	str	r3, [sp, #0]
 8008528:	2300      	movs	r3, #0
 800852a:	2204      	movs	r2, #4
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f7ff fcad 	bl	8007e8c <sx126x_hal_write>
 8008532:	4603      	mov	r3, r0
}
 8008534:	4618      	mov	r0, r3
 8008536:	3710      	adds	r7, #16
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <sx126x_stop_timer_on_preamble>:

sx126x_status_t sx126x_stop_timer_on_preamble( const void* context, const bool enable )
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b086      	sub	sp, #24
 8008540:	af02      	add	r7, sp, #8
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	460b      	mov	r3, r1
 8008546:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_STOP_TIMER_ON_PREAMBLE] = { 0 };
 8008548:	2300      	movs	r3, #0
 800854a:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_STOP_TIMER_ON_PREAMBLE;
 800854c:	239f      	movs	r3, #159	; 0x9f
 800854e:	733b      	strb	r3, [r7, #12]

    buf[1] = ( enable == true ) ? 1 : 0;
 8008550:	78fb      	ldrb	r3, [r7, #3]
 8008552:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_STOP_TIMER_ON_PREAMBLE, 0, 0 );
 8008554:	f107 010c 	add.w	r1, r7, #12
 8008558:	2300      	movs	r3, #0
 800855a:	9300      	str	r3, [sp, #0]
 800855c:	2300      	movs	r3, #0
 800855e:	2202      	movs	r2, #2
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f7ff fc93 	bl	8007e8c <sx126x_hal_write>
 8008566:	4603      	mov	r3, r0
}
 8008568:	4618      	mov	r0, r3
 800856a:	3710      	adds	r7, #16
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <sx126x_set_reg_mode>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_INFINITE_PREAMBLE, 0, 0 );
}

sx126x_status_t sx126x_set_reg_mode( const void* context, const sx126x_reg_mod_t mode )
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b086      	sub	sp, #24
 8008574:	af02      	add	r7, sp, #8
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	460b      	mov	r3, r1
 800857a:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_REGULATOR_MODE] = { 0 };
 800857c:	2300      	movs	r3, #0
 800857e:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_REGULATOR_MODE;
 8008580:	2396      	movs	r3, #150	; 0x96
 8008582:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) mode;
 8008584:	78fb      	ldrb	r3, [r7, #3]
 8008586:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_REGULATOR_MODE, 0, 0 );
 8008588:	f107 010c 	add.w	r1, r7, #12
 800858c:	2300      	movs	r3, #0
 800858e:	9300      	str	r3, [sp, #0]
 8008590:	2300      	movs	r3, #0
 8008592:	2202      	movs	r2, #2
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f7ff fc79 	bl	8007e8c <sx126x_hal_write>
 800859a:	4603      	mov	r3, r0
}
 800859c:	4618      	mov	r0, r3
 800859e:	3710      	adds	r7, #16
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <sx126x_cal>:

sx126x_status_t sx126x_cal( const void* context, const sx126x_cal_mask_t param )
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b086      	sub	sp, #24
 80085a8:	af02      	add	r7, sp, #8
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	460b      	mov	r3, r1
 80085ae:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_CALIBRATE] = { 0 };
 80085b0:	2300      	movs	r3, #0
 80085b2:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_CALIBRATE;
 80085b4:	2389      	movs	r3, #137	; 0x89
 80085b6:	733b      	strb	r3, [r7, #12]

    buf[1] = param;
 80085b8:	78fb      	ldrb	r3, [r7, #3]
 80085ba:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE, 0, 0 );
 80085bc:	f107 010c 	add.w	r1, r7, #12
 80085c0:	2300      	movs	r3, #0
 80085c2:	9300      	str	r3, [sp, #0]
 80085c4:	2300      	movs	r3, #0
 80085c6:	2202      	movs	r2, #2
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f7ff fc5f 	bl	8007e8c <sx126x_hal_write>
 80085ce:	4603      	mov	r3, r0
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3710      	adds	r7, #16
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <sx126x_cal_img_hex>:

sx126x_status_t sx126x_cal_img_hex( const void* context, const uint8_t low_freq, const uint8_t high_freq)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b086      	sub	sp, #24
 80085dc:	af02      	add	r7, sp, #8
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	460b      	mov	r3, r1
 80085e2:	70fb      	strb	r3, [r7, #3]
 80085e4:	4613      	mov	r3, r2
 80085e6:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_CALIBRATE_IMAGE] = { 0 };
 80085e8:	4b0c      	ldr	r3, [pc, #48]	; (800861c <sx126x_cal_img_hex+0x44>)
 80085ea:	881b      	ldrh	r3, [r3, #0]
 80085ec:	81bb      	strh	r3, [r7, #12]
 80085ee:	2300      	movs	r3, #0
 80085f0:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_CALIBRATE_IMAGE;
 80085f2:	2398      	movs	r3, #152	; 0x98
 80085f4:	733b      	strb	r3, [r7, #12]
    buf[1] = low_freq;
 80085f6:	78fb      	ldrb	r3, [r7, #3]
 80085f8:	737b      	strb	r3, [r7, #13]
    buf[2] = high_freq;
 80085fa:	78bb      	ldrb	r3, [r7, #2]
 80085fc:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE_IMAGE, 0, 0 );
 80085fe:	f107 010c 	add.w	r1, r7, #12
 8008602:	2300      	movs	r3, #0
 8008604:	9300      	str	r3, [sp, #0]
 8008606:	2300      	movs	r3, #0
 8008608:	2203      	movs	r2, #3
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f7ff fc3e 	bl	8007e8c <sx126x_hal_write>
 8008610:	4603      	mov	r3, r0
}
 8008612:	4618      	mov	r0, r3
 8008614:	3710      	adds	r7, #16
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop
 800861c:	08019f04 	.word	0x08019f04

08008620 <sx126x_set_rx_tx_fallback_mode>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PA_CFG, 0, 0 );
}

sx126x_status_t sx126x_set_rx_tx_fallback_mode( const void* context, const sx126x_fallback_modes_t fallback_mode )
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b086      	sub	sp, #24
 8008624:	af02      	add	r7, sp, #8
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	460b      	mov	r3, r1
 800862a:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_RX_TX_FALLBACK_MODE] = { 0 };
 800862c:	2300      	movs	r3, #0
 800862e:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_RX_TX_FALLBACK_MODE;
 8008630:	2393      	movs	r3, #147	; 0x93
 8008632:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) fallback_mode;
 8008634:	78fb      	ldrb	r3, [r7, #3]
 8008636:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RX_TX_FALLBACK_MODE, 0, 0 );
 8008638:	f107 010c 	add.w	r1, r7, #12
 800863c:	2300      	movs	r3, #0
 800863e:	9300      	str	r3, [sp, #0]
 8008640:	2300      	movs	r3, #0
 8008642:	2202      	movs	r2, #2
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f7ff fc21 	bl	8007e8c <sx126x_hal_write>
 800864a:	4603      	mov	r3, r0
}
 800864c:	4618      	mov	r0, r3
 800864e:	3710      	adds	r7, #16
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <sx126x_write_register>:
// Registers and buffer Access
//

sx126x_status_t sx126x_write_register( const void* context, const uint16_t address, const uint8_t* buffer,
                                       const uint8_t size )
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b088      	sub	sp, #32
 8008658:	af02      	add	r7, sp, #8
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	607a      	str	r2, [r7, #4]
 800865e:	461a      	mov	r2, r3
 8008660:	460b      	mov	r3, r1
 8008662:	817b      	strh	r3, [r7, #10]
 8008664:	4613      	mov	r3, r2
 8008666:	727b      	strb	r3, [r7, #9]
    uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = { 0 };
 8008668:	4b0e      	ldr	r3, [pc, #56]	; (80086a4 <sx126x_write_register+0x50>)
 800866a:	881b      	ldrh	r3, [r3, #0]
 800866c:	82bb      	strh	r3, [r7, #20]
 800866e:	2300      	movs	r3, #0
 8008670:	75bb      	strb	r3, [r7, #22]

    buf[0] = SX126X_WRITE_REGISTER;
 8008672:	230d      	movs	r3, #13
 8008674:	753b      	strb	r3, [r7, #20]

    buf[1] = ( uint8_t )( address >> 8 );
 8008676:	897b      	ldrh	r3, [r7, #10]
 8008678:	0a1b      	lsrs	r3, r3, #8
 800867a:	b29b      	uxth	r3, r3
 800867c:	b2db      	uxtb	r3, r3
 800867e:	757b      	strb	r3, [r7, #21]
    buf[2] = ( uint8_t )( address >> 0 );
 8008680:	897b      	ldrh	r3, [r7, #10]
 8008682:	b2db      	uxtb	r3, r3
 8008684:	75bb      	strb	r3, [r7, #22]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_REGISTER, buffer, size );
 8008686:	7a7b      	ldrb	r3, [r7, #9]
 8008688:	b29b      	uxth	r3, r3
 800868a:	f107 0114 	add.w	r1, r7, #20
 800868e:	9300      	str	r3, [sp, #0]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2203      	movs	r2, #3
 8008694:	68f8      	ldr	r0, [r7, #12]
 8008696:	f7ff fbf9 	bl	8007e8c <sx126x_hal_write>
 800869a:	4603      	mov	r3, r0
}
 800869c:	4618      	mov	r0, r3
 800869e:	3718      	adds	r7, #24
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}
 80086a4:	08019f04 	.word	0x08019f04

080086a8 <sx126x_read_register>:

sx126x_status_t sx126x_read_register( const void* context, const uint16_t address, uint8_t* buffer, const uint8_t size )
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b088      	sub	sp, #32
 80086ac:	af02      	add	r7, sp, #8
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	607a      	str	r2, [r7, #4]
 80086b2:	461a      	mov	r2, r3
 80086b4:	460b      	mov	r3, r1
 80086b6:	817b      	strh	r3, [r7, #10]
 80086b8:	4613      	mov	r3, r2
 80086ba:	727b      	strb	r3, [r7, #9]
    uint8_t         buf[SX126X_SIZE_READ_REGISTER] = { 0 };
 80086bc:	2300      	movs	r3, #0
 80086be:	613b      	str	r3, [r7, #16]
    sx126x_status_t status                         = SX126X_STATUS_ERROR;
 80086c0:	2303      	movs	r3, #3
 80086c2:	75fb      	strb	r3, [r7, #23]

    buf[0] = SX126X_READ_REGISTER;
 80086c4:	231d      	movs	r3, #29
 80086c6:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t )( address >> 8 );
 80086c8:	897b      	ldrh	r3, [r7, #10]
 80086ca:	0a1b      	lsrs	r3, r3, #8
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	b2db      	uxtb	r3, r3
 80086d0:	747b      	strb	r3, [r7, #17]
    buf[2] = ( uint8_t )( address >> 0 );
 80086d2:	897b      	ldrh	r3, [r7, #10]
 80086d4:	b2db      	uxtb	r3, r3
 80086d6:	74bb      	strb	r3, [r7, #18]

    status = ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_READ_REGISTER, buffer, size );
 80086d8:	f107 0110 	add.w	r1, r7, #16
 80086dc:	7a7b      	ldrb	r3, [r7, #9]
 80086de:	9300      	str	r3, [sp, #0]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2204      	movs	r2, #4
 80086e4:	68f8      	ldr	r0, [r7, #12]
 80086e6:	f7ff fc13 	bl	8007f10 <sx126x_hal_read>
 80086ea:	4603      	mov	r3, r0
 80086ec:	75fb      	strb	r3, [r7, #23]

    return status;
 80086ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3718      	adds	r7, #24
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <sx126x_write_buffer>:

sx126x_status_t sx126x_write_buffer( const void* context, const uint8_t buffer_offset, const uint8_t* buffer,
                                     const uint8_t size )
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b088      	sub	sp, #32
 80086fc:	af02      	add	r7, sp, #8
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	607a      	str	r2, [r7, #4]
 8008702:	461a      	mov	r2, r3
 8008704:	460b      	mov	r3, r1
 8008706:	72fb      	strb	r3, [r7, #11]
 8008708:	4613      	mov	r3, r2
 800870a:	72bb      	strb	r3, [r7, #10]
    uint8_t buf[SX126X_SIZE_WRITE_BUFFER] = { 0 };
 800870c:	2300      	movs	r3, #0
 800870e:	82bb      	strh	r3, [r7, #20]

    buf[0] = SX126X_WRITE_BUFFER;
 8008710:	230e      	movs	r3, #14
 8008712:	753b      	strb	r3, [r7, #20]

    buf[1] = buffer_offset;
 8008714:	7afb      	ldrb	r3, [r7, #11]
 8008716:	757b      	strb	r3, [r7, #21]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_BUFFER, buffer, size );
 8008718:	7abb      	ldrb	r3, [r7, #10]
 800871a:	b29b      	uxth	r3, r3
 800871c:	f107 0114 	add.w	r1, r7, #20
 8008720:	9300      	str	r3, [sp, #0]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2202      	movs	r2, #2
 8008726:	68f8      	ldr	r0, [r7, #12]
 8008728:	f7ff fbb0 	bl	8007e8c <sx126x_hal_write>
 800872c:	4603      	mov	r3, r0
}
 800872e:	4618      	mov	r0, r3
 8008730:	3718      	adds	r7, #24
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
	...

08008738 <sx126x_read_buffer>:

sx126x_status_t sx126x_read_buffer( const void* context, uint8_t* buffer)
{
 8008738:	b5b0      	push	{r4, r5, r7, lr}
 800873a:	b08c      	sub	sp, #48	; 0x30
 800873c:	af02      	add	r7, sp, #8
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
 8008742:	466b      	mov	r3, sp
 8008744:	461d      	mov	r5, r3
    sx126x_status_t status                       = SX126X_STATUS_ERROR;
 8008746:	2303      	movs	r3, #3
 8008748:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	sx126x_rx_buffer_status_t buffer_status;
    sx126x_get_rx_buffer_status(&hspi, &buffer_status);
 800874c:	f107 030c 	add.w	r3, r7, #12
 8008750:	4619      	mov	r1, r3
 8008752:	4854      	ldr	r0, [pc, #336]	; (80088a4 <sx126x_read_buffer+0x16c>)
 8008754:	f000 fade 	bl	8008d14 <sx126x_get_rx_buffer_status>
    uint8_t size = buffer_status.pld_len_in_bytes;
 8008758:	7b3b      	ldrb	r3, [r7, #12]
 800875a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    uint8_t offset = buffer_status.buffer_start_pointer;
 800875e:	7b7b      	ldrb	r3, [r7, #13]
 8008760:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    uint8_t received_buf[size + 1];
 8008764:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008768:	1c5c      	adds	r4, r3, #1
 800876a:	1e63      	subs	r3, r4, #1
 800876c:	61fb      	str	r3, [r7, #28]
 800876e:	4623      	mov	r3, r4
 8008770:	4618      	mov	r0, r3
 8008772:	f04f 0100 	mov.w	r1, #0
 8008776:	f04f 0200 	mov.w	r2, #0
 800877a:	f04f 0300 	mov.w	r3, #0
 800877e:	00cb      	lsls	r3, r1, #3
 8008780:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8008784:	00c2      	lsls	r2, r0, #3
 8008786:	4623      	mov	r3, r4
 8008788:	4618      	mov	r0, r3
 800878a:	f04f 0100 	mov.w	r1, #0
 800878e:	f04f 0200 	mov.w	r2, #0
 8008792:	f04f 0300 	mov.w	r3, #0
 8008796:	00cb      	lsls	r3, r1, #3
 8008798:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800879c:	00c2      	lsls	r2, r0, #3
 800879e:	4623      	mov	r3, r4
 80087a0:	3307      	adds	r3, #7
 80087a2:	08db      	lsrs	r3, r3, #3
 80087a4:	00db      	lsls	r3, r3, #3
 80087a6:	ebad 0d03 	sub.w	sp, sp, r3
 80087aa:	ab02      	add	r3, sp, #8
 80087ac:	3300      	adds	r3, #0
 80087ae:	61bb      	str	r3, [r7, #24]
    uint8_t cmd_buf[size + 1 + SX126X_OFFSET_READ_BUFFER];
 80087b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80087b4:	1cdc      	adds	r4, r3, #3
 80087b6:	1e63      	subs	r3, r4, #1
 80087b8:	617b      	str	r3, [r7, #20]
 80087ba:	4623      	mov	r3, r4
 80087bc:	4618      	mov	r0, r3
 80087be:	f04f 0100 	mov.w	r1, #0
 80087c2:	f04f 0200 	mov.w	r2, #0
 80087c6:	f04f 0300 	mov.w	r3, #0
 80087ca:	00cb      	lsls	r3, r1, #3
 80087cc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80087d0:	00c2      	lsls	r2, r0, #3
 80087d2:	4623      	mov	r3, r4
 80087d4:	4618      	mov	r0, r3
 80087d6:	f04f 0100 	mov.w	r1, #0
 80087da:	f04f 0200 	mov.w	r2, #0
 80087de:	f04f 0300 	mov.w	r3, #0
 80087e2:	00cb      	lsls	r3, r1, #3
 80087e4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80087e8:	00c2      	lsls	r2, r0, #3
 80087ea:	4623      	mov	r3, r4
 80087ec:	3307      	adds	r3, #7
 80087ee:	08db      	lsrs	r3, r3, #3
 80087f0:	00db      	lsls	r3, r3, #3
 80087f2:	ebad 0d03 	sub.w	sp, sp, r3
 80087f6:	ab02      	add	r3, sp, #8
 80087f8:	3300      	adds	r3, #0
 80087fa:	613b      	str	r3, [r7, #16]

    for (uint8_t i=2; i<size+1+SX126X_OFFSET_READ_BUFFER; i++){
 80087fc:	2302      	movs	r3, #2
 80087fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8008802:	e009      	b.n	8008818 <sx126x_read_buffer+0xe0>
        cmd_buf[i] = 0x00;
 8008804:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008808:	693a      	ldr	r2, [r7, #16]
 800880a:	2100      	movs	r1, #0
 800880c:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i=2; i<size+1+SX126X_OFFSET_READ_BUFFER; i++){
 800880e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008812:	3301      	adds	r3, #1
 8008814:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8008818:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800881c:	1c9a      	adds	r2, r3, #2
 800881e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008822:	429a      	cmp	r2, r3
 8008824:	daee      	bge.n	8008804 <sx126x_read_buffer+0xcc>
    }

    cmd_buf[0] = SX126X_READ_BUFFER;
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	221e      	movs	r2, #30
 800882a:	701a      	strb	r2, [r3, #0]
    cmd_buf[1] = offset;
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8008832:	705a      	strb	r2, [r3, #1]

    status = ( sx126x_status_t ) sx126x_hal_read( context, cmd_buf, SX126X_OFFSET_READ_BUFFER + size, received_buf,  SX126X_OFFSET_READ_BUFFER);
 8008834:	6939      	ldr	r1, [r7, #16]
 8008836:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800883a:	b29b      	uxth	r3, r3
 800883c:	3302      	adds	r3, #2
 800883e:	b29a      	uxth	r2, r3
 8008840:	69bb      	ldr	r3, [r7, #24]
 8008842:	2002      	movs	r0, #2
 8008844:	9000      	str	r0, [sp, #0]
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f7ff fb62 	bl	8007f10 <sx126x_hal_read>
 800884c:	4603      	mov	r3, r0
 800884e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (status == SX126X_STATUS_OK) {
 8008852:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008856:	2b00      	cmp	r3, #0
 8008858:	d11c      	bne.n	8008894 <sx126x_read_buffer+0x15c>
        status = received_buf[0];
 800885a:	69bb      	ldr	r3, [r7, #24]
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        //CO U LD T R Y T O U SE SPRINTF
        for (uint8_t i=1; i<=size; i++){
 8008862:	2301      	movs	r3, #1
 8008864:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008868:	e00e      	b.n	8008888 <sx126x_read_buffer+0x150>
            buffer[i-1] = received_buf[i];
 800886a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800886e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008872:	3b01      	subs	r3, #1
 8008874:	6839      	ldr	r1, [r7, #0]
 8008876:	440b      	add	r3, r1
 8008878:	69b9      	ldr	r1, [r7, #24]
 800887a:	5c8a      	ldrb	r2, [r1, r2]
 800887c:	701a      	strb	r2, [r3, #0]
        for (uint8_t i=1; i<=size; i++){
 800887e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008882:	3301      	adds	r3, #1
 8008884:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008888:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800888c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008890:	429a      	cmp	r2, r3
 8008892:	d9ea      	bls.n	800886a <sx126x_read_buffer+0x132>
        }
    }
    //ADD FUCKING RETURN STATUS FROM RECEIVED_BUF[0]
    return status;
 8008894:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008898:	46ad      	mov	sp, r5
}
 800889a:	4618      	mov	r0, r3
 800889c:	3728      	adds	r7, #40	; 0x28
 800889e:	46bd      	mov	sp, r7
 80088a0:	bdb0      	pop	{r4, r5, r7, pc}
 80088a2:	bf00      	nop
 80088a4:	20000644 	.word	0x20000644

080088a8 <sx126x_set_dio_irq_params>:
//
// DIO and IRQ Control Functions
//
sx126x_status_t sx126x_set_dio_irq_params( const void* context, const uint16_t irq_mask, const uint16_t dio1_mask,
                                           const uint16_t dio2_mask, const uint16_t dio3_mask )
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b08a      	sub	sp, #40	; 0x28
 80088ac:	af02      	add	r7, sp, #8
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	4608      	mov	r0, r1
 80088b2:	4611      	mov	r1, r2
 80088b4:	461a      	mov	r2, r3
 80088b6:	4603      	mov	r3, r0
 80088b8:	817b      	strh	r3, [r7, #10]
 80088ba:	460b      	mov	r3, r1
 80088bc:	813b      	strh	r3, [r7, #8]
 80088be:	4613      	mov	r3, r2
 80088c0:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = { 0 };
 80088c2:	2300      	movs	r3, #0
 80088c4:	617b      	str	r3, [r7, #20]
 80088c6:	f107 0318 	add.w	r3, r7, #24
 80088ca:	2200      	movs	r2, #0
 80088cc:	601a      	str	r2, [r3, #0]
 80088ce:	711a      	strb	r2, [r3, #4]

    buf[0] = SX126X_SET_DIO_IRQ_PARAMS;
 80088d0:	2308      	movs	r3, #8
 80088d2:	753b      	strb	r3, [r7, #20]

    buf[1] = ( uint8_t )( irq_mask >> 8 );
 80088d4:	897b      	ldrh	r3, [r7, #10]
 80088d6:	0a1b      	lsrs	r3, r3, #8
 80088d8:	b29b      	uxth	r3, r3
 80088da:	b2db      	uxtb	r3, r3
 80088dc:	757b      	strb	r3, [r7, #21]
    buf[2] = ( uint8_t )( irq_mask >> 0 );
 80088de:	897b      	ldrh	r3, [r7, #10]
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	75bb      	strb	r3, [r7, #22]

    buf[3] = ( uint8_t )( dio1_mask >> 8 );
 80088e4:	893b      	ldrh	r3, [r7, #8]
 80088e6:	0a1b      	lsrs	r3, r3, #8
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	75fb      	strb	r3, [r7, #23]
    buf[4] = ( uint8_t )( dio1_mask >> 0 );
 80088ee:	893b      	ldrh	r3, [r7, #8]
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	763b      	strb	r3, [r7, #24]

    buf[5] = ( uint8_t )( dio2_mask >> 8 );
 80088f4:	88fb      	ldrh	r3, [r7, #6]
 80088f6:	0a1b      	lsrs	r3, r3, #8
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	767b      	strb	r3, [r7, #25]
    buf[6] = ( uint8_t )( dio2_mask >> 0 );
 80088fe:	88fb      	ldrh	r3, [r7, #6]
 8008900:	b2db      	uxtb	r3, r3
 8008902:	76bb      	strb	r3, [r7, #26]

    buf[7] = ( uint8_t )( dio3_mask >> 8 );
 8008904:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008906:	0a1b      	lsrs	r3, r3, #8
 8008908:	b29b      	uxth	r3, r3
 800890a:	b2db      	uxtb	r3, r3
 800890c:	76fb      	strb	r3, [r7, #27]
    buf[8] = ( uint8_t )( dio3_mask >> 0 );
 800890e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008910:	b2db      	uxtb	r3, r3
 8008912:	773b      	strb	r3, [r7, #28]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO_IRQ_PARAMS, 0, 0 );
 8008914:	f107 0114 	add.w	r1, r7, #20
 8008918:	2300      	movs	r3, #0
 800891a:	9300      	str	r3, [sp, #0]
 800891c:	2300      	movs	r3, #0
 800891e:	2209      	movs	r2, #9
 8008920:	68f8      	ldr	r0, [r7, #12]
 8008922:	f7ff fab3 	bl	8007e8c <sx126x_hal_write>
 8008926:	4603      	mov	r3, r0
}
 8008928:	4618      	mov	r0, r3
 800892a:	3720      	adds	r7, #32
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <sx126x_get_irq_status>:

sx126x_status_t sx126x_get_irq_status( const void* context, sx126x_irq_mask_t* irq )
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b088      	sub	sp, #32
 8008934:	af02      	add	r7, sp, #8
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	6039      	str	r1, [r7, #0]
    uint8_t         buf[SX126X_SIZE_GET_IRQ_STATUS]             = { 0x00 }; //0x00 is no operational, its just so that theyre equal
 800893a:	2300      	movs	r3, #0
 800893c:	613b      	str	r3, [r7, #16]
    uint8_t         received_buf[sizeof( sx126x_irq_mask_t )+1] = { 0x00 };
 800893e:	4b14      	ldr	r3, [pc, #80]	; (8008990 <sx126x_get_irq_status+0x60>)
 8008940:	881b      	ldrh	r3, [r3, #0]
 8008942:	81bb      	strh	r3, [r7, #12]
 8008944:	2300      	movs	r3, #0
 8008946:	73bb      	strb	r3, [r7, #14]
    sx126x_status_t status                                      = SX126X_STATUS_ERROR;
 8008948:	2303      	movs	r3, #3
 800894a:	75fb      	strb	r3, [r7, #23]

    buf[0] = SX126X_GET_IRQ_STATUS;
 800894c:	2312      	movs	r3, #18
 800894e:	743b      	strb	r3, [r7, #16]

    status = ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_GET_IRQ_STATUS, received_buf,
 8008950:	f107 030c 	add.w	r3, r7, #12
 8008954:	f107 0110 	add.w	r1, r7, #16
 8008958:	2201      	movs	r2, #1
 800895a:	9200      	str	r2, [sp, #0]
 800895c:	2204      	movs	r2, #4
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f7ff fad6 	bl	8007f10 <sx126x_hal_read>
 8008964:	4603      	mov	r3, r0
 8008966:	75fb      	strb	r3, [r7, #23]
                                                  SX126X_OFFSET_GET_IRQ_STATUS );

    if( status == SX126X_STATUS_OK )
 8008968:	7dfb      	ldrb	r3, [r7, #23]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d10b      	bne.n	8008986 <sx126x_get_irq_status+0x56>
    {
        *irq = ( ( sx126x_irq_mask_t ) received_buf[1] << 8 ) | ( ( sx126x_irq_mask_t ) received_buf[2] << 0 );
 800896e:	7b7b      	ldrb	r3, [r7, #13]
 8008970:	021b      	lsls	r3, r3, #8
 8008972:	b21a      	sxth	r2, r3
 8008974:	7bbb      	ldrb	r3, [r7, #14]
 8008976:	b21b      	sxth	r3, r3
 8008978:	4313      	orrs	r3, r2
 800897a:	b21b      	sxth	r3, r3
 800897c:	b29a      	uxth	r2, r3
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	801a      	strh	r2, [r3, #0]
        status = received_buf[0]; //its the status
 8008982:	7b3b      	ldrb	r3, [r7, #12]
 8008984:	75fb      	strb	r3, [r7, #23]
    }

    return status;
 8008986:	7dfb      	ldrb	r3, [r7, #23]
}
 8008988:	4618      	mov	r0, r3
 800898a:	3718      	adds	r7, #24
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}
 8008990:	08019f04 	.word	0x08019f04

08008994 <sx126x_clear_irq_status>:

sx126x_status_t sx126x_clear_irq_status( const void* context, const sx126x_irq_mask_t irq_mask )
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b086      	sub	sp, #24
 8008998:	af02      	add	r7, sp, #8
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	460b      	mov	r3, r1
 800899e:	807b      	strh	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_CLR_IRQ_STATUS] = { 0 };
 80089a0:	4b0e      	ldr	r3, [pc, #56]	; (80089dc <sx126x_clear_irq_status+0x48>)
 80089a2:	881b      	ldrh	r3, [r3, #0]
 80089a4:	81bb      	strh	r3, [r7, #12]
 80089a6:	2300      	movs	r3, #0
 80089a8:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_CLR_IRQ_STATUS;
 80089aa:	2302      	movs	r3, #2
 80089ac:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t )( irq_mask >> 8 );
 80089ae:	887b      	ldrh	r3, [r7, #2]
 80089b0:	0a1b      	lsrs	r3, r3, #8
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	b2db      	uxtb	r3, r3
 80089b6:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( irq_mask >> 0 );
 80089b8:	887b      	ldrh	r3, [r7, #2]
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CLR_IRQ_STATUS, 0, 0 );
 80089be:	f107 010c 	add.w	r1, r7, #12
 80089c2:	2300      	movs	r3, #0
 80089c4:	9300      	str	r3, [sp, #0]
 80089c6:	2300      	movs	r3, #0
 80089c8:	2203      	movs	r2, #3
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f7ff fa5e 	bl	8007e8c <sx126x_hal_write>
 80089d0:	4603      	mov	r3, r0
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3710      	adds	r7, #16
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	bf00      	nop
 80089dc:	08019f04 	.word	0x08019f04

080089e0 <sx126x_set_dio2_as_rf_sw_ctrl>:
    }
    return status;
}

sx126x_status_t sx126x_set_dio2_as_rf_sw_ctrl( const void* context, const bool enable )
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b086      	sub	sp, #24
 80089e4:	af02      	add	r7, sp, #8
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	460b      	mov	r3, r1
 80089ea:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL] = { 0 };
 80089ec:	2300      	movs	r3, #0
 80089ee:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_DIO2_AS_RF_SWITCH_CTRL;
 80089f0:	239d      	movs	r3, #157	; 0x9d
 80089f2:	733b      	strb	r3, [r7, #12]

    buf[1] = ( enable == true ) ? 1 : 0;
 80089f4:	78fb      	ldrb	r3, [r7, #3]
 80089f6:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL, 0, 0 );
 80089f8:	f107 010c 	add.w	r1, r7, #12
 80089fc:	2300      	movs	r3, #0
 80089fe:	9300      	str	r3, [sp, #0]
 8008a00:	2300      	movs	r3, #0
 8008a02:	2202      	movs	r2, #2
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f7ff fa41 	bl	8007e8c <sx126x_hal_write>
 8008a0a:	4603      	mov	r3, r0
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3710      	adds	r7, #16
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <sx126x_set_dio3_as_tcxo_ctrl>:

sx126x_status_t sx126x_set_dio3_as_tcxo_ctrl( const void* context, const sx126x_tcxo_ctrl_voltages_t tcxo_voltage,
                                              const uint32_t timeout )
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b088      	sub	sp, #32
 8008a18:	af02      	add	r7, sp, #8
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	460b      	mov	r3, r1
 8008a1e:	607a      	str	r2, [r7, #4]
 8008a20:	72fb      	strb	r3, [r7, #11]
    uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = { 0 };
 8008a22:	2300      	movs	r3, #0
 8008a24:	613b      	str	r3, [r7, #16]
 8008a26:	2300      	movs	r3, #0
 8008a28:	753b      	strb	r3, [r7, #20]

    buf[0] = SX126X_SET_DIO3_AS_TCXO_CTRL;
 8008a2a:	2397      	movs	r3, #151	; 0x97
 8008a2c:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t ) tcxo_voltage;
 8008a2e:	7afb      	ldrb	r3, [r7, #11]
 8008a30:	747b      	strb	r3, [r7, #17]

    buf[2] = ( uint8_t )( timeout >> 16 );
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	0c1b      	lsrs	r3, r3, #16
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	74bb      	strb	r3, [r7, #18]
    buf[3] = ( uint8_t )( timeout >> 8 );
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	0a1b      	lsrs	r3, r3, #8
 8008a3e:	b2db      	uxtb	r3, r3
 8008a40:	74fb      	strb	r3, [r7, #19]
    buf[4] = ( uint8_t )( timeout >> 0 );
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	753b      	strb	r3, [r7, #20]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL, 0, 0 );
 8008a48:	f107 0110 	add.w	r1, r7, #16
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	9300      	str	r3, [sp, #0]
 8008a50:	2300      	movs	r3, #0
 8008a52:	2205      	movs	r2, #5
 8008a54:	68f8      	ldr	r0, [r7, #12]
 8008a56:	f7ff fa19 	bl	8007e8c <sx126x_hal_write>
 8008a5a:	4603      	mov	r3, r0
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3718      	adds	r7, #24
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <sx126x_set_rf_freq>:
//
// RF Modulation and Packet-Related Functions
//

sx126x_status_t sx126x_set_rf_freq( const void* context, const uint32_t freq_in_hz )
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b084      	sub	sp, #16
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
    const uint32_t freq = sx126x_convert_freq_in_hz_to_pll_step( freq_in_hz );
 8008a6e:	6838      	ldr	r0, [r7, #0]
 8008a70:	f000 f97c 	bl	8008d6c <sx126x_convert_freq_in_hz_to_pll_step>
 8008a74:	60f8      	str	r0, [r7, #12]

    return sx126x_set_rf_freq_in_pll_steps( context, freq );
 8008a76:	68f9      	ldr	r1, [r7, #12]
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f000 f805 	bl	8008a88 <sx126x_set_rf_freq_in_pll_steps>
 8008a7e:	4603      	mov	r3, r0
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3710      	adds	r7, #16
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <sx126x_set_rf_freq_in_pll_steps>:

sx126x_status_t sx126x_set_rf_freq_in_pll_steps( const void* context, const uint32_t freq )
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b086      	sub	sp, #24
 8008a8c:	af02      	add	r7, sp, #8
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = { 0 };
 8008a92:	2300      	movs	r3, #0
 8008a94:	60bb      	str	r3, [r7, #8]
 8008a96:	2300      	movs	r3, #0
 8008a98:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_RF_FREQUENCY;
 8008a9a:	2386      	movs	r3, #134	; 0x86
 8008a9c:	723b      	strb	r3, [r7, #8]

    buf[1] = ( uint8_t )( freq >> 24 );
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	0e1b      	lsrs	r3, r3, #24
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( freq >> 16 );
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	0c1b      	lsrs	r3, r3, #16
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( freq >> 8 );
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	0a1b      	lsrs	r3, r3, #8
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( freq >> 0 );
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	b2db      	uxtb	r3, r3
 8008aba:	733b      	strb	r3, [r7, #12]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RF_FREQUENCY, 0, 0 );
 8008abc:	f107 0108 	add.w	r1, r7, #8
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	9300      	str	r3, [sp, #0]
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	2205      	movs	r2, #5
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f7ff f9df 	bl	8007e8c <sx126x_hal_write>
 8008ace:	4603      	mov	r3, r0
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3710      	adds	r7, #16
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <sx126x_set_pkt_type>:

sx126x_status_t sx126x_set_pkt_type( const void* context, const sx126x_pkt_type_t pkt_type )
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b086      	sub	sp, #24
 8008adc:	af02      	add	r7, sp, #8
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_PKT_TYPE] = { 0 };
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_PKT_TYPE;
 8008ae8:	238a      	movs	r3, #138	; 0x8a
 8008aea:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) pkt_type;
 8008aec:	78fb      	ldrb	r3, [r7, #3]
 8008aee:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_TYPE, 0, 0 );
 8008af0:	f107 010c 	add.w	r1, r7, #12
 8008af4:	2300      	movs	r3, #0
 8008af6:	9300      	str	r3, [sp, #0]
 8008af8:	2300      	movs	r3, #0
 8008afa:	2202      	movs	r2, #2
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f7ff f9c5 	bl	8007e8c <sx126x_hal_write>
 8008b02:	4603      	mov	r3, r0
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3710      	adds	r7, #16
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <sx126x_set_lora_mod_params>:
    }
    return status;
}

sx126x_status_t sx126x_set_lora_mod_params( const void* context, const sx126x_mod_params_lora_t* params )
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b086      	sub	sp, #24
 8008b10:	af02      	add	r7, sp, #8
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	6039      	str	r1, [r7, #0]
    sx126x_status_t status = SX126X_STATUS_ERROR;
 8008b16:	2303      	movs	r3, #3
 8008b18:	73fb      	strb	r3, [r7, #15]

    uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = { 0 };
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	60bb      	str	r3, [r7, #8]
 8008b1e:	2300      	movs	r3, #0
 8008b20:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_MODULATION_PARAMS;
 8008b22:	238b      	movs	r3, #139	; 0x8b
 8008b24:	723b      	strb	r3, [r7, #8]

    buf[1] = ( uint8_t )( params->sf );
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( params->bw );
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	785b      	ldrb	r3, [r3, #1]
 8008b30:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( params->cr );
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	789b      	ldrb	r3, [r3, #2]
 8008b36:	72fb      	strb	r3, [r7, #11]
    buf[4] = params->ldro & 0x01;
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	78db      	ldrb	r3, [r3, #3]
 8008b3c:	f003 0301 	and.w	r3, r3, #1
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	733b      	strb	r3, [r7, #12]

    status = ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_MODULATION_PARAMS_LORA, 0, 0 );
 8008b44:	f107 0108 	add.w	r1, r7, #8
 8008b48:	2300      	movs	r3, #0
 8008b4a:	9300      	str	r3, [sp, #0]
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	2205      	movs	r2, #5
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f7ff f99b 	bl	8007e8c <sx126x_hal_write>
 8008b56:	4603      	mov	r3, r0
 8008b58:	73fb      	strb	r3, [r7, #15]
        status = sx126x_tx_modulation_workaround( context, SX126X_PKT_TYPE_LORA, params->bw );
        // WORKAROUND END
    }
    */

    return status;
 8008b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3710      	adds	r7, #16
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <sx126x_set_lora_pkt_params>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_GFSK, 0, 0 );
}

sx126x_status_t sx126x_set_lora_pkt_params( const void* context, const sx126x_pkt_params_lora_t* params )
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b088      	sub	sp, #32
 8008b68:	af02      	add	r7, sp, #8
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]
    sx126x_status_t status = SX126X_STATUS_ERROR;
 8008b6e:	2303      	movs	r3, #3
 8008b70:	75fb      	strb	r3, [r7, #23]

    uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = { 0 };
 8008b72:	2300      	movs	r3, #0
 8008b74:	613b      	str	r3, [r7, #16]
 8008b76:	f107 0314 	add.w	r3, r7, #20
 8008b7a:	2100      	movs	r1, #0
 8008b7c:	460a      	mov	r2, r1
 8008b7e:	801a      	strh	r2, [r3, #0]
 8008b80:	460a      	mov	r2, r1
 8008b82:	709a      	strb	r2, [r3, #2]

    buf[0] = SX126X_SET_PKT_PARAMS;
 8008b84:	238c      	movs	r3, #140	; 0x8c
 8008b86:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t )( params->preamble_len_in_symb >> 8 );
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	881b      	ldrh	r3, [r3, #0]
 8008b8c:	0a1b      	lsrs	r3, r3, #8
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	747b      	strb	r3, [r7, #17]
    buf[2] = ( uint8_t )( params->preamble_len_in_symb >> 0 );
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	881b      	ldrh	r3, [r3, #0]
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	74bb      	strb	r3, [r7, #18]
    buf[3] = ( uint8_t )( params->header_type );
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	789b      	ldrb	r3, [r3, #2]
 8008ba0:	74fb      	strb	r3, [r7, #19]
    buf[4] = params->pld_len_in_bytes;
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	78db      	ldrb	r3, [r3, #3]
 8008ba6:	753b      	strb	r3, [r7, #20]
    buf[5] = ( uint8_t )( params->crc_is_on ? 1 : 0 );
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	791b      	ldrb	r3, [r3, #4]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d001      	beq.n	8008bb4 <sx126x_set_lora_pkt_params+0x50>
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	e000      	b.n	8008bb6 <sx126x_set_lora_pkt_params+0x52>
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	757b      	strb	r3, [r7, #21]
    buf[6] = ( uint8_t )( params->invert_iq_is_on ? 1 : 0 );
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	795b      	ldrb	r3, [r3, #5]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d001      	beq.n	8008bc4 <sx126x_set_lora_pkt_params+0x60>
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e000      	b.n	8008bc6 <sx126x_set_lora_pkt_params+0x62>
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	75bb      	strb	r3, [r7, #22]

    status = ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_LORA, 0, 0 );
 8008bc8:	f107 0110 	add.w	r1, r7, #16
 8008bcc:	2300      	movs	r3, #0
 8008bce:	9300      	str	r3, [sp, #0]
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	2207      	movs	r2, #7
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f7ff f959 	bl	8007e8c <sx126x_hal_write>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	75fb      	strb	r3, [r7, #23]

    // WORKAROUND - Optimizing the Inverted IQ Operation, see datasheet DS_SX1261-2_V1.2 §15.4
    if( status == SX126X_STATUS_OK )
 8008bde:	7dfb      	ldrb	r3, [r7, #23]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d127      	bne.n	8008c34 <sx126x_set_lora_pkt_params+0xd0>
    {
        uint8_t reg_value = 0;
 8008be4:	2300      	movs	r3, #0
 8008be6:	73fb      	strb	r3, [r7, #15]

        status = sx126x_read_register( context, SX126X_REG_IRQ_POLARITY, &reg_value, 1 );
 8008be8:	f107 020f 	add.w	r2, r7, #15
 8008bec:	2301      	movs	r3, #1
 8008bee:	f240 7136 	movw	r1, #1846	; 0x736
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f7ff fd58 	bl	80086a8 <sx126x_read_register>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	75fb      	strb	r3, [r7, #23]
        if( status == SX126X_STATUS_OK )
 8008bfc:	7dfb      	ldrb	r3, [r7, #23]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d118      	bne.n	8008c34 <sx126x_set_lora_pkt_params+0xd0>
        {
            if( params->invert_iq_is_on == true )
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	795b      	ldrb	r3, [r3, #5]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d005      	beq.n	8008c16 <sx126x_set_lora_pkt_params+0xb2>
            {
                reg_value &= ~( 1 << 2 );  // Bit 2 set to 0 when using inverted IQ polarity
 8008c0a:	7bfb      	ldrb	r3, [r7, #15]
 8008c0c:	f023 0304 	bic.w	r3, r3, #4
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	73fb      	strb	r3, [r7, #15]
 8008c14:	e004      	b.n	8008c20 <sx126x_set_lora_pkt_params+0xbc>
            }
            else
            {
                reg_value |= ( 1 << 2 );  // Bit 2 set to 1 when using standard IQ polarity
 8008c16:	7bfb      	ldrb	r3, [r7, #15]
 8008c18:	f043 0304 	orr.w	r3, r3, #4
 8008c1c:	b2db      	uxtb	r3, r3
 8008c1e:	73fb      	strb	r3, [r7, #15]
            }
            status = sx126x_write_register( context, SX126X_REG_IRQ_POLARITY, &reg_value, 1 );
 8008c20:	f107 020f 	add.w	r2, r7, #15
 8008c24:	2301      	movs	r3, #1
 8008c26:	f240 7136 	movw	r1, #1846	; 0x736
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f7ff fd12 	bl	8008654 <sx126x_write_register>
 8008c30:	4603      	mov	r3, r0
 8008c32:	75fb      	strb	r3, [r7, #23]
        }
    }
    // WORKAROUND END

    return status;
 8008c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3718      	adds	r7, #24
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
	...

08008c40 <sx126x_set_buffer_base_address>:
    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_CAD_PARAMS, 0, 0 );
}

sx126x_status_t sx126x_set_buffer_base_address( const void* context, const uint8_t tx_base_address,
                                                const uint8_t rx_base_address )
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b086      	sub	sp, #24
 8008c44:	af02      	add	r7, sp, #8
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	460b      	mov	r3, r1
 8008c4a:	70fb      	strb	r3, [r7, #3]
 8008c4c:	4613      	mov	r3, r2
 8008c4e:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_SET_BUFFER_BASE_ADDRESS] = { 0 };
 8008c50:	4b0c      	ldr	r3, [pc, #48]	; (8008c84 <sx126x_set_buffer_base_address+0x44>)
 8008c52:	881b      	ldrh	r3, [r3, #0]
 8008c54:	81bb      	strh	r3, [r7, #12]
 8008c56:	2300      	movs	r3, #0
 8008c58:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_SET_BUFFER_BASE_ADDRESS;
 8008c5a:	238f      	movs	r3, #143	; 0x8f
 8008c5c:	733b      	strb	r3, [r7, #12]

    buf[1] = tx_base_address;
 8008c5e:	78fb      	ldrb	r3, [r7, #3]
 8008c60:	737b      	strb	r3, [r7, #13]
    buf[2] = rx_base_address;
 8008c62:	78bb      	ldrb	r3, [r7, #2]
 8008c64:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_BUFFER_BASE_ADDRESS, 0, 0 );
 8008c66:	f107 010c 	add.w	r1, r7, #12
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	9300      	str	r3, [sp, #0]
 8008c6e:	2300      	movs	r3, #0
 8008c70:	2203      	movs	r2, #3
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f7ff f90a 	bl	8007e8c <sx126x_hal_write>
 8008c78:	4603      	mov	r3, r0
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3710      	adds	r7, #16
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop
 8008c84:	08019f04 	.word	0x08019f04

08008c88 <sx126x_set_lora_symb_nb_timeout>:

sx126x_status_t sx126x_set_lora_symb_nb_timeout( const void* context, const uint8_t nb_of_symbs )
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b088      	sub	sp, #32
 8008c8c:	af02      	add	r7, sp, #8
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	460b      	mov	r3, r1
 8008c92:	70fb      	strb	r3, [r7, #3]
    uint8_t         buf[SX126X_SIZE_SET_LORA_SYMB_NUM_TIMEOUT] = { 0 };
 8008c94:	2300      	movs	r3, #0
 8008c96:	823b      	strh	r3, [r7, #16]
    sx126x_status_t status                                     = SX126X_STATUS_ERROR;
 8008c98:	2303      	movs	r3, #3
 8008c9a:	75fb      	strb	r3, [r7, #23]

    buf[0] = SX126X_SET_LORA_SYMB_NUM_TIMEOUT;
 8008c9c:	23a0      	movs	r3, #160	; 0xa0
 8008c9e:	743b      	strb	r3, [r7, #16]

    buf[1] = nb_of_symbs;
 8008ca0:	78fb      	ldrb	r3, [r7, #3]
 8008ca2:	747b      	strb	r3, [r7, #17]

    status = ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_LORA_SYMB_NUM_TIMEOUT, 0, 0 );
 8008ca4:	f107 0110 	add.w	r1, r7, #16
 8008ca8:	2300      	movs	r3, #0
 8008caa:	9300      	str	r3, [sp, #0]
 8008cac:	2300      	movs	r3, #0
 8008cae:	2202      	movs	r2, #2
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f7ff f8eb 	bl	8007e8c <sx126x_hal_write>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	75fb      	strb	r3, [r7, #23]

    if( ( status == SX126X_STATUS_OK ) && ( nb_of_symbs >= 64 ) )
 8008cba:	7dfb      	ldrb	r3, [r7, #23]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d124      	bne.n	8008d0a <sx126x_set_lora_symb_nb_timeout+0x82>
 8008cc0:	78fb      	ldrb	r3, [r7, #3]
 8008cc2:	2b3f      	cmp	r3, #63	; 0x3f
 8008cc4:	d921      	bls.n	8008d0a <sx126x_set_lora_symb_nb_timeout+0x82>
    {
        uint8_t mant = nb_of_symbs >> 1;
 8008cc6:	78fb      	ldrb	r3, [r7, #3]
 8008cc8:	085b      	lsrs	r3, r3, #1
 8008cca:	75bb      	strb	r3, [r7, #22]
        uint8_t exp  = 0;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	757b      	strb	r3, [r7, #21]
        uint8_t reg  = 0;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	73fb      	strb	r3, [r7, #15]

        while( mant > 31 )
 8008cd4:	e005      	b.n	8008ce2 <sx126x_set_lora_symb_nb_timeout+0x5a>
        {
            mant >>= 2;
 8008cd6:	7dbb      	ldrb	r3, [r7, #22]
 8008cd8:	089b      	lsrs	r3, r3, #2
 8008cda:	75bb      	strb	r3, [r7, #22]
            exp++;
 8008cdc:	7d7b      	ldrb	r3, [r7, #21]
 8008cde:	3301      	adds	r3, #1
 8008ce0:	757b      	strb	r3, [r7, #21]
        while( mant > 31 )
 8008ce2:	7dbb      	ldrb	r3, [r7, #22]
 8008ce4:	2b1f      	cmp	r3, #31
 8008ce6:	d8f6      	bhi.n	8008cd6 <sx126x_set_lora_symb_nb_timeout+0x4e>
        }

        reg    = exp + ( mant << 3 );
 8008ce8:	7dbb      	ldrb	r3, [r7, #22]
 8008cea:	00db      	lsls	r3, r3, #3
 8008cec:	b2da      	uxtb	r2, r3
 8008cee:	7d7b      	ldrb	r3, [r7, #21]
 8008cf0:	4413      	add	r3, r2
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	73fb      	strb	r3, [r7, #15]
        status = sx126x_write_register( context, SX126X_REG_LR_SYNCH_TIMEOUT, &reg, 1 );
 8008cf6:	f107 020f 	add.w	r2, r7, #15
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	f240 7106 	movw	r1, #1798	; 0x706
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f7ff fca7 	bl	8008654 <sx126x_write_register>
 8008d06:	4603      	mov	r3, r0
 8008d08:	75fb      	strb	r3, [r7, #23]
    }

    return status;
 8008d0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3718      	adds	r7, #24
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}

08008d14 <sx126x_get_rx_buffer_status>:

    return status;
}

sx126x_status_t sx126x_get_rx_buffer_status( const void* context, sx126x_rx_buffer_status_t* rx_buffer_status )
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b088      	sub	sp, #32
 8008d18:	af02      	add	r7, sp, #8
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
    uint8_t         buf[SX126X_SIZE_GET_RX_BUFFER_STATUS]               = { 0x00 };
 8008d1e:	2300      	movs	r3, #0
 8008d20:	613b      	str	r3, [r7, #16]
    uint8_t         status_local[sizeof( sx126x_rx_buffer_status_t )+1] = { 0x00 };
 8008d22:	4b11      	ldr	r3, [pc, #68]	; (8008d68 <sx126x_get_rx_buffer_status+0x54>)
 8008d24:	881b      	ldrh	r3, [r3, #0]
 8008d26:	81bb      	strh	r3, [r7, #12]
 8008d28:	2300      	movs	r3, #0
 8008d2a:	73bb      	strb	r3, [r7, #14]
    sx126x_status_t status                                              = SX126X_STATUS_ERROR;
 8008d2c:	2303      	movs	r3, #3
 8008d2e:	75fb      	strb	r3, [r7, #23]

    buf[0] = SX126X_GET_RX_BUFFER_STATUS;
 8008d30:	2313      	movs	r3, #19
 8008d32:	743b      	strb	r3, [r7, #16]

    status = ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_GET_RX_BUFFER_STATUS, status_local,
 8008d34:	f107 030c 	add.w	r3, r7, #12
 8008d38:	f107 0110 	add.w	r1, r7, #16
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	9200      	str	r2, [sp, #0]
 8008d40:	2204      	movs	r2, #4
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f7ff f8e4 	bl	8007f10 <sx126x_hal_read>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	75fb      	strb	r3, [r7, #23]
                                                  SX126X_OFFSET_GET_RX_BUFFER_STATUS );

    if( status == SX126X_STATUS_OK )
 8008d4c:	7dfb      	ldrb	r3, [r7, #23]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d105      	bne.n	8008d5e <sx126x_get_rx_buffer_status+0x4a>
    {
        rx_buffer_status->pld_len_in_bytes     = status_local[1];
 8008d52:	7b7a      	ldrb	r2, [r7, #13]
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	701a      	strb	r2, [r3, #0]
        rx_buffer_status->buffer_start_pointer = status_local[2];
 8008d58:	7bba      	ldrb	r2, [r7, #14]
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	705a      	strb	r2, [r3, #1]
    }

    return (sx126x_status_t) status_local[0];
 8008d5e:	7b3b      	ldrb	r3, [r7, #12]
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3718      	adds	r7, #24
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}
 8008d68:	08019f04 	.word	0x08019f04

08008d6c <sx126x_convert_freq_in_hz_to_pll_step>:

    return status;
}

uint32_t sx126x_convert_freq_in_hz_to_pll_step( uint32_t freq_in_hz )
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b085      	sub	sp, #20
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
    uint32_t steps_int;
    uint32_t steps_frac;

    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    steps_int  = freq_in_hz / SX126X_PLL_STEP_SCALED;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	4a0f      	ldr	r2, [pc, #60]	; (8008db4 <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 8008d78:	fba2 2303 	umull	r2, r3, r2, r3
 8008d7c:	0b1b      	lsrs	r3, r3, #12
 8008d7e:	60fb      	str	r3, [r7, #12]
    steps_frac = freq_in_hz - ( steps_int * SX126X_PLL_STEP_SCALED );
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f643 5209 	movw	r2, #15625	; 0x3d09
 8008d86:	fb02 f303 	mul.w	r3, r2, r3
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	1ad3      	subs	r3, r2, r3
 8008d8e:	60bb      	str	r3, [r7, #8]

    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	039a      	lsls	r2, r3, #14
           ( ( ( steps_frac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	039b      	lsls	r3, r3, #14
 8008d98:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 8008d9c:	3304      	adds	r3, #4
 8008d9e:	4905      	ldr	r1, [pc, #20]	; (8008db4 <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 8008da0:	fba1 1303 	umull	r1, r3, r1, r3
 8008da4:	0b1b      	lsrs	r3, r3, #12
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 8008da6:	4413      	add	r3, r2
             SX126X_PLL_STEP_SCALED );
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3714      	adds	r7, #20
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr
 8008db4:	431bde83 	.word	0x431bde83

08008db8 <sx126x_convert_timeout_in_ms_to_rtc_step>:

uint32_t sx126x_convert_timeout_in_ms_to_rtc_step( uint32_t timeout_in_ms )
{
 8008db8:	b480      	push	{r7}
 8008dba:	b083      	sub	sp, #12
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
    return ( uint32_t )( timeout_in_ms * ( SX126X_RTC_FREQ_IN_HZ / 1000 ) );
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	019b      	lsls	r3, r3, #6
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	370c      	adds	r7, #12
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr

08008dd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008dd4:	4b0e      	ldr	r3, [pc, #56]	; (8008e10 <HAL_Init+0x40>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a0d      	ldr	r2, [pc, #52]	; (8008e10 <HAL_Init+0x40>)
 8008dda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008dde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008de0:	4b0b      	ldr	r3, [pc, #44]	; (8008e10 <HAL_Init+0x40>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4a0a      	ldr	r2, [pc, #40]	; (8008e10 <HAL_Init+0x40>)
 8008de6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008dea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008dec:	4b08      	ldr	r3, [pc, #32]	; (8008e10 <HAL_Init+0x40>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a07      	ldr	r2, [pc, #28]	; (8008e10 <HAL_Init+0x40>)
 8008df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008df6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008df8:	2003      	movs	r0, #3
 8008dfa:	f000 fd30 	bl	800985e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008dfe:	2000      	movs	r0, #0
 8008e00:	f7fa fa08 	bl	8003214 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008e04:	f7fa f9da 	bl	80031bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008e08:	2300      	movs	r3, #0
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	40023c00 	.word	0x40023c00

08008e14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008e14:	b480      	push	{r7}
 8008e16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008e18:	4b06      	ldr	r3, [pc, #24]	; (8008e34 <HAL_IncTick+0x20>)
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	4b06      	ldr	r3, [pc, #24]	; (8008e38 <HAL_IncTick+0x24>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4413      	add	r3, r2
 8008e24:	4a04      	ldr	r2, [pc, #16]	; (8008e38 <HAL_IncTick+0x24>)
 8008e26:	6013      	str	r3, [r2, #0]
}
 8008e28:	bf00      	nop
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr
 8008e32:	bf00      	nop
 8008e34:	200000cc 	.word	0x200000cc
 8008e38:	20006090 	.word	0x20006090

08008e3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	af00      	add	r7, sp, #0
  return uwTick;
 8008e40:	4b03      	ldr	r3, [pc, #12]	; (8008e50 <HAL_GetTick+0x14>)
 8008e42:	681b      	ldr	r3, [r3, #0]
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	46bd      	mov	sp, r7
 8008e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4c:	4770      	bx	lr
 8008e4e:	bf00      	nop
 8008e50:	20006090 	.word	0x20006090

08008e54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008e5c:	f7ff ffee 	bl	8008e3c <HAL_GetTick>
 8008e60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e6c:	d005      	beq.n	8008e7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008e6e:	4b0a      	ldr	r3, [pc, #40]	; (8008e98 <HAL_Delay+0x44>)
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	461a      	mov	r2, r3
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	4413      	add	r3, r2
 8008e78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008e7a:	bf00      	nop
 8008e7c:	f7ff ffde 	bl	8008e3c <HAL_GetTick>
 8008e80:	4602      	mov	r2, r0
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	1ad3      	subs	r3, r2, r3
 8008e86:	68fa      	ldr	r2, [r7, #12]
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d8f7      	bhi.n	8008e7c <HAL_Delay+0x28>
  {
  }
}
 8008e8c:	bf00      	nop
 8008e8e:	bf00      	nop
 8008e90:	3710      	adds	r7, #16
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	bf00      	nop
 8008e98:	200000cc 	.word	0x200000cc

08008e9c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d101      	bne.n	8008eb2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e033      	b.n	8008f1a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d109      	bne.n	8008ece <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f7f8 fb10 	bl	80014e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ed2:	f003 0310 	and.w	r3, r3, #16
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d118      	bne.n	8008f0c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ede:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008ee2:	f023 0302 	bic.w	r3, r3, #2
 8008ee6:	f043 0202 	orr.w	r2, r3, #2
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 fae8 	bl	80094c4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008efe:	f023 0303 	bic.w	r3, r3, #3
 8008f02:	f043 0201 	orr.w	r2, r3, #1
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	641a      	str	r2, [r3, #64]	; 0x40
 8008f0a:	e001      	b.n	8008f10 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2200      	movs	r2, #0
 8008f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3710      	adds	r7, #16
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}
	...

08008f24 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b085      	sub	sp, #20
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f36:	2b01      	cmp	r3, #1
 8008f38:	d101      	bne.n	8008f3e <HAL_ADC_Start+0x1a>
 8008f3a:	2302      	movs	r3, #2
 8008f3c:	e0b2      	b.n	80090a4 <HAL_ADC_Start+0x180>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2201      	movs	r2, #1
 8008f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	f003 0301 	and.w	r3, r3, #1
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d018      	beq.n	8008f86 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	689a      	ldr	r2, [r3, #8]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f042 0201 	orr.w	r2, r2, #1
 8008f62:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008f64:	4b52      	ldr	r3, [pc, #328]	; (80090b0 <HAL_ADC_Start+0x18c>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4a52      	ldr	r2, [pc, #328]	; (80090b4 <HAL_ADC_Start+0x190>)
 8008f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8008f6e:	0c9a      	lsrs	r2, r3, #18
 8008f70:	4613      	mov	r3, r2
 8008f72:	005b      	lsls	r3, r3, #1
 8008f74:	4413      	add	r3, r2
 8008f76:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8008f78:	e002      	b.n	8008f80 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	3b01      	subs	r3, #1
 8008f7e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d1f9      	bne.n	8008f7a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	689b      	ldr	r3, [r3, #8]
 8008f8c:	f003 0301 	and.w	r3, r3, #1
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d17a      	bne.n	800908a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f98:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008f9c:	f023 0301 	bic.w	r3, r3, #1
 8008fa0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d007      	beq.n	8008fc6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008fbe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fd2:	d106      	bne.n	8008fe2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fd8:	f023 0206 	bic.w	r2, r3, #6
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	645a      	str	r2, [r3, #68]	; 0x44
 8008fe0:	e002      	b.n	8008fe8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2200      	movs	r2, #0
 8008fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008ff0:	4b31      	ldr	r3, [pc, #196]	; (80090b8 <HAL_ADC_Start+0x194>)
 8008ff2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8008ffc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	f003 031f 	and.w	r3, r3, #31
 8009006:	2b00      	cmp	r3, #0
 8009008:	d12a      	bne.n	8009060 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a2b      	ldr	r2, [pc, #172]	; (80090bc <HAL_ADC_Start+0x198>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d015      	beq.n	8009040 <HAL_ADC_Start+0x11c>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a29      	ldr	r2, [pc, #164]	; (80090c0 <HAL_ADC_Start+0x19c>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d105      	bne.n	800902a <HAL_ADC_Start+0x106>
 800901e:	4b26      	ldr	r3, [pc, #152]	; (80090b8 <HAL_ADC_Start+0x194>)
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	f003 031f 	and.w	r3, r3, #31
 8009026:	2b00      	cmp	r3, #0
 8009028:	d00a      	beq.n	8009040 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4a25      	ldr	r2, [pc, #148]	; (80090c4 <HAL_ADC_Start+0x1a0>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d136      	bne.n	80090a2 <HAL_ADC_Start+0x17e>
 8009034:	4b20      	ldr	r3, [pc, #128]	; (80090b8 <HAL_ADC_Start+0x194>)
 8009036:	685b      	ldr	r3, [r3, #4]
 8009038:	f003 0310 	and.w	r3, r3, #16
 800903c:	2b00      	cmp	r3, #0
 800903e:	d130      	bne.n	80090a2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	689b      	ldr	r3, [r3, #8]
 8009046:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800904a:	2b00      	cmp	r3, #0
 800904c:	d129      	bne.n	80090a2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	689a      	ldr	r2, [r3, #8]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800905c:	609a      	str	r2, [r3, #8]
 800905e:	e020      	b.n	80090a2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a15      	ldr	r2, [pc, #84]	; (80090bc <HAL_ADC_Start+0x198>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d11b      	bne.n	80090a2 <HAL_ADC_Start+0x17e>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	689b      	ldr	r3, [r3, #8]
 8009070:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009074:	2b00      	cmp	r3, #0
 8009076:	d114      	bne.n	80090a2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	689a      	ldr	r2, [r3, #8]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009086:	609a      	str	r2, [r3, #8]
 8009088:	e00b      	b.n	80090a2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800908e:	f043 0210 	orr.w	r2, r3, #16
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800909a:	f043 0201 	orr.w	r2, r3, #1
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80090a2:	2300      	movs	r3, #0
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3714      	adds	r7, #20
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr
 80090b0:	20000088 	.word	0x20000088
 80090b4:	431bde83 	.word	0x431bde83
 80090b8:	40012300 	.word	0x40012300
 80090bc:	40012000 	.word	0x40012000
 80090c0:	40012100 	.word	0x40012100
 80090c4:	40012200 	.word	0x40012200

080090c8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b083      	sub	sp, #12
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d101      	bne.n	80090de <HAL_ADC_Stop+0x16>
 80090da:	2302      	movs	r3, #2
 80090dc:	e021      	b.n	8009122 <HAL_ADC_Stop+0x5a>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2201      	movs	r2, #1
 80090e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	689a      	ldr	r2, [r3, #8]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f022 0201 	bic.w	r2, r2, #1
 80090f4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	689b      	ldr	r3, [r3, #8]
 80090fc:	f003 0301 	and.w	r3, r3, #1
 8009100:	2b00      	cmp	r3, #0
 8009102:	d109      	bne.n	8009118 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009108:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800910c:	f023 0301 	bic.w	r3, r3, #1
 8009110:	f043 0201 	orr.w	r2, r3, #1
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2200      	movs	r2, #0
 800911c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8009120:	2300      	movs	r3, #0
}
 8009122:	4618      	mov	r0, r3
 8009124:	370c      	adds	r7, #12
 8009126:	46bd      	mov	sp, r7
 8009128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912c:	4770      	bx	lr

0800912e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800912e:	b580      	push	{r7, lr}
 8009130:	b084      	sub	sp, #16
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
 8009136:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8009138:	2300      	movs	r3, #0
 800913a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	689b      	ldr	r3, [r3, #8]
 8009142:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800914a:	d113      	bne.n	8009174 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	689b      	ldr	r3, [r3, #8]
 8009152:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8009156:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800915a:	d10b      	bne.n	8009174 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009160:	f043 0220 	orr.w	r2, r3, #32
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2200      	movs	r2, #0
 800916c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8009170:	2301      	movs	r3, #1
 8009172:	e063      	b.n	800923c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8009174:	f7ff fe62 	bl	8008e3c <HAL_GetTick>
 8009178:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800917a:	e021      	b.n	80091c0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009182:	d01d      	beq.n	80091c0 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d007      	beq.n	800919a <HAL_ADC_PollForConversion+0x6c>
 800918a:	f7ff fe57 	bl	8008e3c <HAL_GetTick>
 800918e:	4602      	mov	r2, r0
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	1ad3      	subs	r3, r2, r3
 8009194:	683a      	ldr	r2, [r7, #0]
 8009196:	429a      	cmp	r2, r3
 8009198:	d212      	bcs.n	80091c0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f003 0302 	and.w	r3, r3, #2
 80091a4:	2b02      	cmp	r3, #2
 80091a6:	d00b      	beq.n	80091c0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ac:	f043 0204 	orr.w	r2, r3, #4
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2200      	movs	r2, #0
 80091b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80091bc:	2303      	movs	r3, #3
 80091be:	e03d      	b.n	800923c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f003 0302 	and.w	r3, r3, #2
 80091ca:	2b02      	cmp	r3, #2
 80091cc:	d1d6      	bne.n	800917c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f06f 0212 	mvn.w	r2, #18
 80091d6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091dc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d123      	bne.n	800923a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d11f      	bne.n	800923a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009200:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009204:	2b00      	cmp	r3, #0
 8009206:	d006      	beq.n	8009216 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	689b      	ldr	r3, [r3, #8]
 800920e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8009212:	2b00      	cmp	r3, #0
 8009214:	d111      	bne.n	800923a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800921a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009226:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800922a:	2b00      	cmp	r3, #0
 800922c:	d105      	bne.n	800923a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009232:	f043 0201 	orr.w	r2, r3, #1
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800923a:	2300      	movs	r3, #0
}
 800923c:	4618      	mov	r0, r3
 800923e:	3710      	adds	r7, #16
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}

08009244 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8009244:	b480      	push	{r7}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8009252:	4618      	mov	r0, r3
 8009254:	370c      	adds	r7, #12
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr
	...

08009260 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8009260:	b480      	push	{r7}
 8009262:	b085      	sub	sp, #20
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800926a:	2300      	movs	r3, #0
 800926c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009274:	2b01      	cmp	r3, #1
 8009276:	d101      	bne.n	800927c <HAL_ADC_ConfigChannel+0x1c>
 8009278:	2302      	movs	r3, #2
 800927a:	e113      	b.n	80094a4 <HAL_ADC_ConfigChannel+0x244>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2201      	movs	r2, #1
 8009280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	2b09      	cmp	r3, #9
 800928a:	d925      	bls.n	80092d8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	68d9      	ldr	r1, [r3, #12]
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	b29b      	uxth	r3, r3
 8009298:	461a      	mov	r2, r3
 800929a:	4613      	mov	r3, r2
 800929c:	005b      	lsls	r3, r3, #1
 800929e:	4413      	add	r3, r2
 80092a0:	3b1e      	subs	r3, #30
 80092a2:	2207      	movs	r2, #7
 80092a4:	fa02 f303 	lsl.w	r3, r2, r3
 80092a8:	43da      	mvns	r2, r3
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	400a      	ands	r2, r1
 80092b0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	68d9      	ldr	r1, [r3, #12]
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	689a      	ldr	r2, [r3, #8]
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	b29b      	uxth	r3, r3
 80092c2:	4618      	mov	r0, r3
 80092c4:	4603      	mov	r3, r0
 80092c6:	005b      	lsls	r3, r3, #1
 80092c8:	4403      	add	r3, r0
 80092ca:	3b1e      	subs	r3, #30
 80092cc:	409a      	lsls	r2, r3
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	430a      	orrs	r2, r1
 80092d4:	60da      	str	r2, [r3, #12]
 80092d6:	e022      	b.n	800931e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	6919      	ldr	r1, [r3, #16]
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	461a      	mov	r2, r3
 80092e6:	4613      	mov	r3, r2
 80092e8:	005b      	lsls	r3, r3, #1
 80092ea:	4413      	add	r3, r2
 80092ec:	2207      	movs	r2, #7
 80092ee:	fa02 f303 	lsl.w	r3, r2, r3
 80092f2:	43da      	mvns	r2, r3
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	400a      	ands	r2, r1
 80092fa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	6919      	ldr	r1, [r3, #16]
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	689a      	ldr	r2, [r3, #8]
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	b29b      	uxth	r3, r3
 800930c:	4618      	mov	r0, r3
 800930e:	4603      	mov	r3, r0
 8009310:	005b      	lsls	r3, r3, #1
 8009312:	4403      	add	r3, r0
 8009314:	409a      	lsls	r2, r3
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	430a      	orrs	r2, r1
 800931c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	2b06      	cmp	r3, #6
 8009324:	d824      	bhi.n	8009370 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	685a      	ldr	r2, [r3, #4]
 8009330:	4613      	mov	r3, r2
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	4413      	add	r3, r2
 8009336:	3b05      	subs	r3, #5
 8009338:	221f      	movs	r2, #31
 800933a:	fa02 f303 	lsl.w	r3, r2, r3
 800933e:	43da      	mvns	r2, r3
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	400a      	ands	r2, r1
 8009346:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	b29b      	uxth	r3, r3
 8009354:	4618      	mov	r0, r3
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	685a      	ldr	r2, [r3, #4]
 800935a:	4613      	mov	r3, r2
 800935c:	009b      	lsls	r3, r3, #2
 800935e:	4413      	add	r3, r2
 8009360:	3b05      	subs	r3, #5
 8009362:	fa00 f203 	lsl.w	r2, r0, r3
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	430a      	orrs	r2, r1
 800936c:	635a      	str	r2, [r3, #52]	; 0x34
 800936e:	e04c      	b.n	800940a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	2b0c      	cmp	r3, #12
 8009376:	d824      	bhi.n	80093c2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	685a      	ldr	r2, [r3, #4]
 8009382:	4613      	mov	r3, r2
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	4413      	add	r3, r2
 8009388:	3b23      	subs	r3, #35	; 0x23
 800938a:	221f      	movs	r2, #31
 800938c:	fa02 f303 	lsl.w	r3, r2, r3
 8009390:	43da      	mvns	r2, r3
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	400a      	ands	r2, r1
 8009398:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	b29b      	uxth	r3, r3
 80093a6:	4618      	mov	r0, r3
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	685a      	ldr	r2, [r3, #4]
 80093ac:	4613      	mov	r3, r2
 80093ae:	009b      	lsls	r3, r3, #2
 80093b0:	4413      	add	r3, r2
 80093b2:	3b23      	subs	r3, #35	; 0x23
 80093b4:	fa00 f203 	lsl.w	r2, r0, r3
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	430a      	orrs	r2, r1
 80093be:	631a      	str	r2, [r3, #48]	; 0x30
 80093c0:	e023      	b.n	800940a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	685a      	ldr	r2, [r3, #4]
 80093cc:	4613      	mov	r3, r2
 80093ce:	009b      	lsls	r3, r3, #2
 80093d0:	4413      	add	r3, r2
 80093d2:	3b41      	subs	r3, #65	; 0x41
 80093d4:	221f      	movs	r2, #31
 80093d6:	fa02 f303 	lsl.w	r3, r2, r3
 80093da:	43da      	mvns	r2, r3
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	400a      	ands	r2, r1
 80093e2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	b29b      	uxth	r3, r3
 80093f0:	4618      	mov	r0, r3
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	685a      	ldr	r2, [r3, #4]
 80093f6:	4613      	mov	r3, r2
 80093f8:	009b      	lsls	r3, r3, #2
 80093fa:	4413      	add	r3, r2
 80093fc:	3b41      	subs	r3, #65	; 0x41
 80093fe:	fa00 f203 	lsl.w	r2, r0, r3
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	430a      	orrs	r2, r1
 8009408:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800940a:	4b29      	ldr	r3, [pc, #164]	; (80094b0 <HAL_ADC_ConfigChannel+0x250>)
 800940c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4a28      	ldr	r2, [pc, #160]	; (80094b4 <HAL_ADC_ConfigChannel+0x254>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d10f      	bne.n	8009438 <HAL_ADC_ConfigChannel+0x1d8>
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	2b12      	cmp	r3, #18
 800941e:	d10b      	bne.n	8009438 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4a1d      	ldr	r2, [pc, #116]	; (80094b4 <HAL_ADC_ConfigChannel+0x254>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d12b      	bne.n	800949a <HAL_ADC_ConfigChannel+0x23a>
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4a1c      	ldr	r2, [pc, #112]	; (80094b8 <HAL_ADC_ConfigChannel+0x258>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d003      	beq.n	8009454 <HAL_ADC_ConfigChannel+0x1f4>
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	2b11      	cmp	r3, #17
 8009452:	d122      	bne.n	800949a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	685b      	ldr	r3, [r3, #4]
 8009458:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a11      	ldr	r2, [pc, #68]	; (80094b8 <HAL_ADC_ConfigChannel+0x258>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d111      	bne.n	800949a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8009476:	4b11      	ldr	r3, [pc, #68]	; (80094bc <HAL_ADC_ConfigChannel+0x25c>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4a11      	ldr	r2, [pc, #68]	; (80094c0 <HAL_ADC_ConfigChannel+0x260>)
 800947c:	fba2 2303 	umull	r2, r3, r2, r3
 8009480:	0c9a      	lsrs	r2, r3, #18
 8009482:	4613      	mov	r3, r2
 8009484:	009b      	lsls	r3, r3, #2
 8009486:	4413      	add	r3, r2
 8009488:	005b      	lsls	r3, r3, #1
 800948a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800948c:	e002      	b.n	8009494 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	3b01      	subs	r3, #1
 8009492:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d1f9      	bne.n	800948e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80094a2:	2300      	movs	r3, #0
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3714      	adds	r7, #20
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr
 80094b0:	40012300 	.word	0x40012300
 80094b4:	40012000 	.word	0x40012000
 80094b8:	10000012 	.word	0x10000012
 80094bc:	20000088 	.word	0x20000088
 80094c0:	431bde83 	.word	0x431bde83

080094c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b085      	sub	sp, #20
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80094cc:	4b79      	ldr	r3, [pc, #484]	; (80096b4 <ADC_Init+0x1f0>)
 80094ce:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	685a      	ldr	r2, [r3, #4]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	685b      	ldr	r3, [r3, #4]
 80094e4:	431a      	orrs	r2, r3
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	685a      	ldr	r2, [r3, #4]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80094f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	6859      	ldr	r1, [r3, #4]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	691b      	ldr	r3, [r3, #16]
 8009504:	021a      	lsls	r2, r3, #8
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	430a      	orrs	r2, r1
 800950c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	685a      	ldr	r2, [r3, #4]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800951c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	6859      	ldr	r1, [r3, #4]
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	689a      	ldr	r2, [r3, #8]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	430a      	orrs	r2, r1
 800952e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	689a      	ldr	r2, [r3, #8]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800953e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	6899      	ldr	r1, [r3, #8]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	68da      	ldr	r2, [r3, #12]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	430a      	orrs	r2, r1
 8009550:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009556:	4a58      	ldr	r2, [pc, #352]	; (80096b8 <ADC_Init+0x1f4>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d022      	beq.n	80095a2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	689a      	ldr	r2, [r3, #8]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800956a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	6899      	ldr	r1, [r3, #8]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	430a      	orrs	r2, r1
 800957c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	689a      	ldr	r2, [r3, #8]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800958c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	6899      	ldr	r1, [r3, #8]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	430a      	orrs	r2, r1
 800959e:	609a      	str	r2, [r3, #8]
 80095a0:	e00f      	b.n	80095c2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	689a      	ldr	r2, [r3, #8]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80095b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	689a      	ldr	r2, [r3, #8]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80095c0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	689a      	ldr	r2, [r3, #8]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f022 0202 	bic.w	r2, r2, #2
 80095d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	6899      	ldr	r1, [r3, #8]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	7e1b      	ldrb	r3, [r3, #24]
 80095dc:	005a      	lsls	r2, r3, #1
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	430a      	orrs	r2, r1
 80095e4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d01b      	beq.n	8009628 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	685a      	ldr	r2, [r3, #4]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80095fe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	685a      	ldr	r2, [r3, #4]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800960e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	6859      	ldr	r1, [r3, #4]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800961a:	3b01      	subs	r3, #1
 800961c:	035a      	lsls	r2, r3, #13
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	430a      	orrs	r2, r1
 8009624:	605a      	str	r2, [r3, #4]
 8009626:	e007      	b.n	8009638 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	685a      	ldr	r2, [r3, #4]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009636:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8009646:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	69db      	ldr	r3, [r3, #28]
 8009652:	3b01      	subs	r3, #1
 8009654:	051a      	lsls	r2, r3, #20
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	430a      	orrs	r2, r1
 800965c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	689a      	ldr	r2, [r3, #8]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800966c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	6899      	ldr	r1, [r3, #8]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800967a:	025a      	lsls	r2, r3, #9
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	430a      	orrs	r2, r1
 8009682:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	689a      	ldr	r2, [r3, #8]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009692:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	6899      	ldr	r1, [r3, #8]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	695b      	ldr	r3, [r3, #20]
 800969e:	029a      	lsls	r2, r3, #10
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	430a      	orrs	r2, r1
 80096a6:	609a      	str	r2, [r3, #8]
}
 80096a8:	bf00      	nop
 80096aa:	3714      	adds	r7, #20
 80096ac:	46bd      	mov	sp, r7
 80096ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b2:	4770      	bx	lr
 80096b4:	40012300 	.word	0x40012300
 80096b8:	0f000001 	.word	0x0f000001

080096bc <__NVIC_SetPriorityGrouping>:
{
 80096bc:	b480      	push	{r7}
 80096be:	b085      	sub	sp, #20
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f003 0307 	and.w	r3, r3, #7
 80096ca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80096cc:	4b0c      	ldr	r3, [pc, #48]	; (8009700 <__NVIC_SetPriorityGrouping+0x44>)
 80096ce:	68db      	ldr	r3, [r3, #12]
 80096d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80096d2:	68ba      	ldr	r2, [r7, #8]
 80096d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80096d8:	4013      	ands	r3, r2
 80096da:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80096e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80096e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80096ee:	4a04      	ldr	r2, [pc, #16]	; (8009700 <__NVIC_SetPriorityGrouping+0x44>)
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	60d3      	str	r3, [r2, #12]
}
 80096f4:	bf00      	nop
 80096f6:	3714      	adds	r7, #20
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr
 8009700:	e000ed00 	.word	0xe000ed00

08009704 <__NVIC_GetPriorityGrouping>:
{
 8009704:	b480      	push	{r7}
 8009706:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009708:	4b04      	ldr	r3, [pc, #16]	; (800971c <__NVIC_GetPriorityGrouping+0x18>)
 800970a:	68db      	ldr	r3, [r3, #12]
 800970c:	0a1b      	lsrs	r3, r3, #8
 800970e:	f003 0307 	and.w	r3, r3, #7
}
 8009712:	4618      	mov	r0, r3
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr
 800971c:	e000ed00 	.word	0xe000ed00

08009720 <__NVIC_EnableIRQ>:
{
 8009720:	b480      	push	{r7}
 8009722:	b083      	sub	sp, #12
 8009724:	af00      	add	r7, sp, #0
 8009726:	4603      	mov	r3, r0
 8009728:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800972a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800972e:	2b00      	cmp	r3, #0
 8009730:	db0b      	blt.n	800974a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009732:	79fb      	ldrb	r3, [r7, #7]
 8009734:	f003 021f 	and.w	r2, r3, #31
 8009738:	4907      	ldr	r1, [pc, #28]	; (8009758 <__NVIC_EnableIRQ+0x38>)
 800973a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800973e:	095b      	lsrs	r3, r3, #5
 8009740:	2001      	movs	r0, #1
 8009742:	fa00 f202 	lsl.w	r2, r0, r2
 8009746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800974a:	bf00      	nop
 800974c:	370c      	adds	r7, #12
 800974e:	46bd      	mov	sp, r7
 8009750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009754:	4770      	bx	lr
 8009756:	bf00      	nop
 8009758:	e000e100 	.word	0xe000e100

0800975c <__NVIC_DisableIRQ>:
{
 800975c:	b480      	push	{r7}
 800975e:	b083      	sub	sp, #12
 8009760:	af00      	add	r7, sp, #0
 8009762:	4603      	mov	r3, r0
 8009764:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800976a:	2b00      	cmp	r3, #0
 800976c:	db12      	blt.n	8009794 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800976e:	79fb      	ldrb	r3, [r7, #7]
 8009770:	f003 021f 	and.w	r2, r3, #31
 8009774:	490a      	ldr	r1, [pc, #40]	; (80097a0 <__NVIC_DisableIRQ+0x44>)
 8009776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800977a:	095b      	lsrs	r3, r3, #5
 800977c:	2001      	movs	r0, #1
 800977e:	fa00 f202 	lsl.w	r2, r0, r2
 8009782:	3320      	adds	r3, #32
 8009784:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8009788:	f3bf 8f4f 	dsb	sy
}
 800978c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800978e:	f3bf 8f6f 	isb	sy
}
 8009792:	bf00      	nop
}
 8009794:	bf00      	nop
 8009796:	370c      	adds	r7, #12
 8009798:	46bd      	mov	sp, r7
 800979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979e:	4770      	bx	lr
 80097a0:	e000e100 	.word	0xe000e100

080097a4 <__NVIC_SetPriority>:
{
 80097a4:	b480      	push	{r7}
 80097a6:	b083      	sub	sp, #12
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	4603      	mov	r3, r0
 80097ac:	6039      	str	r1, [r7, #0]
 80097ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80097b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	db0a      	blt.n	80097ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	b2da      	uxtb	r2, r3
 80097bc:	490c      	ldr	r1, [pc, #48]	; (80097f0 <__NVIC_SetPriority+0x4c>)
 80097be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097c2:	0112      	lsls	r2, r2, #4
 80097c4:	b2d2      	uxtb	r2, r2
 80097c6:	440b      	add	r3, r1
 80097c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80097cc:	e00a      	b.n	80097e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	b2da      	uxtb	r2, r3
 80097d2:	4908      	ldr	r1, [pc, #32]	; (80097f4 <__NVIC_SetPriority+0x50>)
 80097d4:	79fb      	ldrb	r3, [r7, #7]
 80097d6:	f003 030f 	and.w	r3, r3, #15
 80097da:	3b04      	subs	r3, #4
 80097dc:	0112      	lsls	r2, r2, #4
 80097de:	b2d2      	uxtb	r2, r2
 80097e0:	440b      	add	r3, r1
 80097e2:	761a      	strb	r2, [r3, #24]
}
 80097e4:	bf00      	nop
 80097e6:	370c      	adds	r7, #12
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr
 80097f0:	e000e100 	.word	0xe000e100
 80097f4:	e000ed00 	.word	0xe000ed00

080097f8 <NVIC_EncodePriority>:
{
 80097f8:	b480      	push	{r7}
 80097fa:	b089      	sub	sp, #36	; 0x24
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	60f8      	str	r0, [r7, #12]
 8009800:	60b9      	str	r1, [r7, #8]
 8009802:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	f003 0307 	and.w	r3, r3, #7
 800980a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800980c:	69fb      	ldr	r3, [r7, #28]
 800980e:	f1c3 0307 	rsb	r3, r3, #7
 8009812:	2b04      	cmp	r3, #4
 8009814:	bf28      	it	cs
 8009816:	2304      	movcs	r3, #4
 8009818:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800981a:	69fb      	ldr	r3, [r7, #28]
 800981c:	3304      	adds	r3, #4
 800981e:	2b06      	cmp	r3, #6
 8009820:	d902      	bls.n	8009828 <NVIC_EncodePriority+0x30>
 8009822:	69fb      	ldr	r3, [r7, #28]
 8009824:	3b03      	subs	r3, #3
 8009826:	e000      	b.n	800982a <NVIC_EncodePriority+0x32>
 8009828:	2300      	movs	r3, #0
 800982a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800982c:	f04f 32ff 	mov.w	r2, #4294967295
 8009830:	69bb      	ldr	r3, [r7, #24]
 8009832:	fa02 f303 	lsl.w	r3, r2, r3
 8009836:	43da      	mvns	r2, r3
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	401a      	ands	r2, r3
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009840:	f04f 31ff 	mov.w	r1, #4294967295
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	fa01 f303 	lsl.w	r3, r1, r3
 800984a:	43d9      	mvns	r1, r3
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009850:	4313      	orrs	r3, r2
}
 8009852:	4618      	mov	r0, r3
 8009854:	3724      	adds	r7, #36	; 0x24
 8009856:	46bd      	mov	sp, r7
 8009858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985c:	4770      	bx	lr

0800985e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800985e:	b580      	push	{r7, lr}
 8009860:	b082      	sub	sp, #8
 8009862:	af00      	add	r7, sp, #0
 8009864:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f7ff ff28 	bl	80096bc <__NVIC_SetPriorityGrouping>
}
 800986c:	bf00      	nop
 800986e:	3708      	adds	r7, #8
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}

08009874 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009874:	b580      	push	{r7, lr}
 8009876:	b086      	sub	sp, #24
 8009878:	af00      	add	r7, sp, #0
 800987a:	4603      	mov	r3, r0
 800987c:	60b9      	str	r1, [r7, #8]
 800987e:	607a      	str	r2, [r7, #4]
 8009880:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009882:	2300      	movs	r3, #0
 8009884:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009886:	f7ff ff3d 	bl	8009704 <__NVIC_GetPriorityGrouping>
 800988a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800988c:	687a      	ldr	r2, [r7, #4]
 800988e:	68b9      	ldr	r1, [r7, #8]
 8009890:	6978      	ldr	r0, [r7, #20]
 8009892:	f7ff ffb1 	bl	80097f8 <NVIC_EncodePriority>
 8009896:	4602      	mov	r2, r0
 8009898:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800989c:	4611      	mov	r1, r2
 800989e:	4618      	mov	r0, r3
 80098a0:	f7ff ff80 	bl	80097a4 <__NVIC_SetPriority>
}
 80098a4:	bf00      	nop
 80098a6:	3718      	adds	r7, #24
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b082      	sub	sp, #8
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	4603      	mov	r3, r0
 80098b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80098b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098ba:	4618      	mov	r0, r3
 80098bc:	f7ff ff30 	bl	8009720 <__NVIC_EnableIRQ>
}
 80098c0:	bf00      	nop
 80098c2:	3708      	adds	r7, #8
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b082      	sub	sp, #8
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	4603      	mov	r3, r0
 80098d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80098d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098d6:	4618      	mov	r0, r3
 80098d8:	f7ff ff40 	bl	800975c <__NVIC_DisableIRQ>
}
 80098dc:	bf00      	nop
 80098de:	3708      	adds	r7, #8
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}

080098e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b089      	sub	sp, #36	; 0x24
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
 80098ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80098ee:	2300      	movs	r3, #0
 80098f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80098f2:	2300      	movs	r3, #0
 80098f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80098f6:	2300      	movs	r3, #0
 80098f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80098fa:	2300      	movs	r3, #0
 80098fc:	61fb      	str	r3, [r7, #28]
 80098fe:	e177      	b.n	8009bf0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009900:	2201      	movs	r2, #1
 8009902:	69fb      	ldr	r3, [r7, #28]
 8009904:	fa02 f303 	lsl.w	r3, r2, r3
 8009908:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	697a      	ldr	r2, [r7, #20]
 8009910:	4013      	ands	r3, r2
 8009912:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009914:	693a      	ldr	r2, [r7, #16]
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	429a      	cmp	r2, r3
 800991a:	f040 8166 	bne.w	8009bea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	685b      	ldr	r3, [r3, #4]
 8009922:	f003 0303 	and.w	r3, r3, #3
 8009926:	2b01      	cmp	r3, #1
 8009928:	d005      	beq.n	8009936 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009932:	2b02      	cmp	r3, #2
 8009934:	d130      	bne.n	8009998 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	689b      	ldr	r3, [r3, #8]
 800993a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800993c:	69fb      	ldr	r3, [r7, #28]
 800993e:	005b      	lsls	r3, r3, #1
 8009940:	2203      	movs	r2, #3
 8009942:	fa02 f303 	lsl.w	r3, r2, r3
 8009946:	43db      	mvns	r3, r3
 8009948:	69ba      	ldr	r2, [r7, #24]
 800994a:	4013      	ands	r3, r2
 800994c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	68da      	ldr	r2, [r3, #12]
 8009952:	69fb      	ldr	r3, [r7, #28]
 8009954:	005b      	lsls	r3, r3, #1
 8009956:	fa02 f303 	lsl.w	r3, r2, r3
 800995a:	69ba      	ldr	r2, [r7, #24]
 800995c:	4313      	orrs	r3, r2
 800995e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	69ba      	ldr	r2, [r7, #24]
 8009964:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	685b      	ldr	r3, [r3, #4]
 800996a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800996c:	2201      	movs	r2, #1
 800996e:	69fb      	ldr	r3, [r7, #28]
 8009970:	fa02 f303 	lsl.w	r3, r2, r3
 8009974:	43db      	mvns	r3, r3
 8009976:	69ba      	ldr	r2, [r7, #24]
 8009978:	4013      	ands	r3, r2
 800997a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	685b      	ldr	r3, [r3, #4]
 8009980:	091b      	lsrs	r3, r3, #4
 8009982:	f003 0201 	and.w	r2, r3, #1
 8009986:	69fb      	ldr	r3, [r7, #28]
 8009988:	fa02 f303 	lsl.w	r3, r2, r3
 800998c:	69ba      	ldr	r2, [r7, #24]
 800998e:	4313      	orrs	r3, r2
 8009990:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	69ba      	ldr	r2, [r7, #24]
 8009996:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	f003 0303 	and.w	r3, r3, #3
 80099a0:	2b03      	cmp	r3, #3
 80099a2:	d017      	beq.n	80099d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	68db      	ldr	r3, [r3, #12]
 80099a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80099aa:	69fb      	ldr	r3, [r7, #28]
 80099ac:	005b      	lsls	r3, r3, #1
 80099ae:	2203      	movs	r2, #3
 80099b0:	fa02 f303 	lsl.w	r3, r2, r3
 80099b4:	43db      	mvns	r3, r3
 80099b6:	69ba      	ldr	r2, [r7, #24]
 80099b8:	4013      	ands	r3, r2
 80099ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	689a      	ldr	r2, [r3, #8]
 80099c0:	69fb      	ldr	r3, [r7, #28]
 80099c2:	005b      	lsls	r3, r3, #1
 80099c4:	fa02 f303 	lsl.w	r3, r2, r3
 80099c8:	69ba      	ldr	r2, [r7, #24]
 80099ca:	4313      	orrs	r3, r2
 80099cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	69ba      	ldr	r2, [r7, #24]
 80099d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	f003 0303 	and.w	r3, r3, #3
 80099dc:	2b02      	cmp	r3, #2
 80099de:	d123      	bne.n	8009a28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80099e0:	69fb      	ldr	r3, [r7, #28]
 80099e2:	08da      	lsrs	r2, r3, #3
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	3208      	adds	r2, #8
 80099e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80099ee:	69fb      	ldr	r3, [r7, #28]
 80099f0:	f003 0307 	and.w	r3, r3, #7
 80099f4:	009b      	lsls	r3, r3, #2
 80099f6:	220f      	movs	r2, #15
 80099f8:	fa02 f303 	lsl.w	r3, r2, r3
 80099fc:	43db      	mvns	r3, r3
 80099fe:	69ba      	ldr	r2, [r7, #24]
 8009a00:	4013      	ands	r3, r2
 8009a02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	691a      	ldr	r2, [r3, #16]
 8009a08:	69fb      	ldr	r3, [r7, #28]
 8009a0a:	f003 0307 	and.w	r3, r3, #7
 8009a0e:	009b      	lsls	r3, r3, #2
 8009a10:	fa02 f303 	lsl.w	r3, r2, r3
 8009a14:	69ba      	ldr	r2, [r7, #24]
 8009a16:	4313      	orrs	r3, r2
 8009a18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009a1a:	69fb      	ldr	r3, [r7, #28]
 8009a1c:	08da      	lsrs	r2, r3, #3
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	3208      	adds	r2, #8
 8009a22:	69b9      	ldr	r1, [r7, #24]
 8009a24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009a2e:	69fb      	ldr	r3, [r7, #28]
 8009a30:	005b      	lsls	r3, r3, #1
 8009a32:	2203      	movs	r2, #3
 8009a34:	fa02 f303 	lsl.w	r3, r2, r3
 8009a38:	43db      	mvns	r3, r3
 8009a3a:	69ba      	ldr	r2, [r7, #24]
 8009a3c:	4013      	ands	r3, r2
 8009a3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	f003 0203 	and.w	r2, r3, #3
 8009a48:	69fb      	ldr	r3, [r7, #28]
 8009a4a:	005b      	lsls	r3, r3, #1
 8009a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8009a50:	69ba      	ldr	r2, [r7, #24]
 8009a52:	4313      	orrs	r3, r2
 8009a54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	69ba      	ldr	r2, [r7, #24]
 8009a5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	f000 80c0 	beq.w	8009bea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	60fb      	str	r3, [r7, #12]
 8009a6e:	4b66      	ldr	r3, [pc, #408]	; (8009c08 <HAL_GPIO_Init+0x324>)
 8009a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a72:	4a65      	ldr	r2, [pc, #404]	; (8009c08 <HAL_GPIO_Init+0x324>)
 8009a74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009a78:	6453      	str	r3, [r2, #68]	; 0x44
 8009a7a:	4b63      	ldr	r3, [pc, #396]	; (8009c08 <HAL_GPIO_Init+0x324>)
 8009a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a82:	60fb      	str	r3, [r7, #12]
 8009a84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009a86:	4a61      	ldr	r2, [pc, #388]	; (8009c0c <HAL_GPIO_Init+0x328>)
 8009a88:	69fb      	ldr	r3, [r7, #28]
 8009a8a:	089b      	lsrs	r3, r3, #2
 8009a8c:	3302      	adds	r3, #2
 8009a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009a94:	69fb      	ldr	r3, [r7, #28]
 8009a96:	f003 0303 	and.w	r3, r3, #3
 8009a9a:	009b      	lsls	r3, r3, #2
 8009a9c:	220f      	movs	r2, #15
 8009a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8009aa2:	43db      	mvns	r3, r3
 8009aa4:	69ba      	ldr	r2, [r7, #24]
 8009aa6:	4013      	ands	r3, r2
 8009aa8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	4a58      	ldr	r2, [pc, #352]	; (8009c10 <HAL_GPIO_Init+0x32c>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d037      	beq.n	8009b22 <HAL_GPIO_Init+0x23e>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	4a57      	ldr	r2, [pc, #348]	; (8009c14 <HAL_GPIO_Init+0x330>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d031      	beq.n	8009b1e <HAL_GPIO_Init+0x23a>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	4a56      	ldr	r2, [pc, #344]	; (8009c18 <HAL_GPIO_Init+0x334>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d02b      	beq.n	8009b1a <HAL_GPIO_Init+0x236>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	4a55      	ldr	r2, [pc, #340]	; (8009c1c <HAL_GPIO_Init+0x338>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d025      	beq.n	8009b16 <HAL_GPIO_Init+0x232>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	4a54      	ldr	r2, [pc, #336]	; (8009c20 <HAL_GPIO_Init+0x33c>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d01f      	beq.n	8009b12 <HAL_GPIO_Init+0x22e>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	4a53      	ldr	r2, [pc, #332]	; (8009c24 <HAL_GPIO_Init+0x340>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d019      	beq.n	8009b0e <HAL_GPIO_Init+0x22a>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	4a52      	ldr	r2, [pc, #328]	; (8009c28 <HAL_GPIO_Init+0x344>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d013      	beq.n	8009b0a <HAL_GPIO_Init+0x226>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	4a51      	ldr	r2, [pc, #324]	; (8009c2c <HAL_GPIO_Init+0x348>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d00d      	beq.n	8009b06 <HAL_GPIO_Init+0x222>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	4a50      	ldr	r2, [pc, #320]	; (8009c30 <HAL_GPIO_Init+0x34c>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d007      	beq.n	8009b02 <HAL_GPIO_Init+0x21e>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	4a4f      	ldr	r2, [pc, #316]	; (8009c34 <HAL_GPIO_Init+0x350>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d101      	bne.n	8009afe <HAL_GPIO_Init+0x21a>
 8009afa:	2309      	movs	r3, #9
 8009afc:	e012      	b.n	8009b24 <HAL_GPIO_Init+0x240>
 8009afe:	230a      	movs	r3, #10
 8009b00:	e010      	b.n	8009b24 <HAL_GPIO_Init+0x240>
 8009b02:	2308      	movs	r3, #8
 8009b04:	e00e      	b.n	8009b24 <HAL_GPIO_Init+0x240>
 8009b06:	2307      	movs	r3, #7
 8009b08:	e00c      	b.n	8009b24 <HAL_GPIO_Init+0x240>
 8009b0a:	2306      	movs	r3, #6
 8009b0c:	e00a      	b.n	8009b24 <HAL_GPIO_Init+0x240>
 8009b0e:	2305      	movs	r3, #5
 8009b10:	e008      	b.n	8009b24 <HAL_GPIO_Init+0x240>
 8009b12:	2304      	movs	r3, #4
 8009b14:	e006      	b.n	8009b24 <HAL_GPIO_Init+0x240>
 8009b16:	2303      	movs	r3, #3
 8009b18:	e004      	b.n	8009b24 <HAL_GPIO_Init+0x240>
 8009b1a:	2302      	movs	r3, #2
 8009b1c:	e002      	b.n	8009b24 <HAL_GPIO_Init+0x240>
 8009b1e:	2301      	movs	r3, #1
 8009b20:	e000      	b.n	8009b24 <HAL_GPIO_Init+0x240>
 8009b22:	2300      	movs	r3, #0
 8009b24:	69fa      	ldr	r2, [r7, #28]
 8009b26:	f002 0203 	and.w	r2, r2, #3
 8009b2a:	0092      	lsls	r2, r2, #2
 8009b2c:	4093      	lsls	r3, r2
 8009b2e:	69ba      	ldr	r2, [r7, #24]
 8009b30:	4313      	orrs	r3, r2
 8009b32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009b34:	4935      	ldr	r1, [pc, #212]	; (8009c0c <HAL_GPIO_Init+0x328>)
 8009b36:	69fb      	ldr	r3, [r7, #28]
 8009b38:	089b      	lsrs	r3, r3, #2
 8009b3a:	3302      	adds	r3, #2
 8009b3c:	69ba      	ldr	r2, [r7, #24]
 8009b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009b42:	4b3d      	ldr	r3, [pc, #244]	; (8009c38 <HAL_GPIO_Init+0x354>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	43db      	mvns	r3, r3
 8009b4c:	69ba      	ldr	r2, [r7, #24]
 8009b4e:	4013      	ands	r3, r2
 8009b50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	685b      	ldr	r3, [r3, #4]
 8009b56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d003      	beq.n	8009b66 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8009b5e:	69ba      	ldr	r2, [r7, #24]
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	4313      	orrs	r3, r2
 8009b64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009b66:	4a34      	ldr	r2, [pc, #208]	; (8009c38 <HAL_GPIO_Init+0x354>)
 8009b68:	69bb      	ldr	r3, [r7, #24]
 8009b6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009b6c:	4b32      	ldr	r3, [pc, #200]	; (8009c38 <HAL_GPIO_Init+0x354>)
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	43db      	mvns	r3, r3
 8009b76:	69ba      	ldr	r2, [r7, #24]
 8009b78:	4013      	ands	r3, r2
 8009b7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d003      	beq.n	8009b90 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8009b88:	69ba      	ldr	r2, [r7, #24]
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	4313      	orrs	r3, r2
 8009b8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009b90:	4a29      	ldr	r2, [pc, #164]	; (8009c38 <HAL_GPIO_Init+0x354>)
 8009b92:	69bb      	ldr	r3, [r7, #24]
 8009b94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009b96:	4b28      	ldr	r3, [pc, #160]	; (8009c38 <HAL_GPIO_Init+0x354>)
 8009b98:	689b      	ldr	r3, [r3, #8]
 8009b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	43db      	mvns	r3, r3
 8009ba0:	69ba      	ldr	r2, [r7, #24]
 8009ba2:	4013      	ands	r3, r2
 8009ba4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	685b      	ldr	r3, [r3, #4]
 8009baa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d003      	beq.n	8009bba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8009bb2:	69ba      	ldr	r2, [r7, #24]
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	4313      	orrs	r3, r2
 8009bb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009bba:	4a1f      	ldr	r2, [pc, #124]	; (8009c38 <HAL_GPIO_Init+0x354>)
 8009bbc:	69bb      	ldr	r3, [r7, #24]
 8009bbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009bc0:	4b1d      	ldr	r3, [pc, #116]	; (8009c38 <HAL_GPIO_Init+0x354>)
 8009bc2:	68db      	ldr	r3, [r3, #12]
 8009bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	43db      	mvns	r3, r3
 8009bca:	69ba      	ldr	r2, [r7, #24]
 8009bcc:	4013      	ands	r3, r2
 8009bce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d003      	beq.n	8009be4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8009bdc:	69ba      	ldr	r2, [r7, #24]
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	4313      	orrs	r3, r2
 8009be2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009be4:	4a14      	ldr	r2, [pc, #80]	; (8009c38 <HAL_GPIO_Init+0x354>)
 8009be6:	69bb      	ldr	r3, [r7, #24]
 8009be8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009bea:	69fb      	ldr	r3, [r7, #28]
 8009bec:	3301      	adds	r3, #1
 8009bee:	61fb      	str	r3, [r7, #28]
 8009bf0:	69fb      	ldr	r3, [r7, #28]
 8009bf2:	2b0f      	cmp	r3, #15
 8009bf4:	f67f ae84 	bls.w	8009900 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009bf8:	bf00      	nop
 8009bfa:	bf00      	nop
 8009bfc:	3724      	adds	r7, #36	; 0x24
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c04:	4770      	bx	lr
 8009c06:	bf00      	nop
 8009c08:	40023800 	.word	0x40023800
 8009c0c:	40013800 	.word	0x40013800
 8009c10:	40020000 	.word	0x40020000
 8009c14:	40020400 	.word	0x40020400
 8009c18:	40020800 	.word	0x40020800
 8009c1c:	40020c00 	.word	0x40020c00
 8009c20:	40021000 	.word	0x40021000
 8009c24:	40021400 	.word	0x40021400
 8009c28:	40021800 	.word	0x40021800
 8009c2c:	40021c00 	.word	0x40021c00
 8009c30:	40022000 	.word	0x40022000
 8009c34:	40022400 	.word	0x40022400
 8009c38:	40013c00 	.word	0x40013c00

08009c3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b085      	sub	sp, #20
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	460b      	mov	r3, r1
 8009c46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	691a      	ldr	r2, [r3, #16]
 8009c4c:	887b      	ldrh	r3, [r7, #2]
 8009c4e:	4013      	ands	r3, r2
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d002      	beq.n	8009c5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009c54:	2301      	movs	r3, #1
 8009c56:	73fb      	strb	r3, [r7, #15]
 8009c58:	e001      	b.n	8009c5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3714      	adds	r7, #20
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr

08009c6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b083      	sub	sp, #12
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	460b      	mov	r3, r1
 8009c76:	807b      	strh	r3, [r7, #2]
 8009c78:	4613      	mov	r3, r2
 8009c7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009c7c:	787b      	ldrb	r3, [r7, #1]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d003      	beq.n	8009c8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009c82:	887a      	ldrh	r2, [r7, #2]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009c88:	e003      	b.n	8009c92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009c8a:	887b      	ldrh	r3, [r7, #2]
 8009c8c:	041a      	lsls	r2, r3, #16
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	619a      	str	r2, [r3, #24]
}
 8009c92:	bf00      	nop
 8009c94:	370c      	adds	r7, #12
 8009c96:	46bd      	mov	sp, r7
 8009c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9c:	4770      	bx	lr
	...

08009ca0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b082      	sub	sp, #8
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8009caa:	4b08      	ldr	r3, [pc, #32]	; (8009ccc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009cac:	695a      	ldr	r2, [r3, #20]
 8009cae:	88fb      	ldrh	r3, [r7, #6]
 8009cb0:	4013      	ands	r3, r2
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d006      	beq.n	8009cc4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009cb6:	4a05      	ldr	r2, [pc, #20]	; (8009ccc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009cb8:	88fb      	ldrh	r3, [r7, #6]
 8009cba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009cbc:	88fb      	ldrh	r3, [r7, #6]
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f7f9 fb4a 	bl	8003358 <HAL_GPIO_EXTI_Callback>
  }
}
 8009cc4:	bf00      	nop
 8009cc6:	3708      	adds	r7, #8
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}
 8009ccc:	40013c00 	.word	0x40013c00

08009cd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b084      	sub	sp, #16
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d101      	bne.n	8009ce2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	e12b      	b.n	8009f3a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ce8:	b2db      	uxtb	r3, r3
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d106      	bne.n	8009cfc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f7f8 fbc2 	bl	8002480 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2224      	movs	r2, #36	; 0x24
 8009d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	681a      	ldr	r2, [r3, #0]
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f022 0201 	bic.w	r2, r2, #1
 8009d12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	681a      	ldr	r2, [r3, #0]
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009d22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	681a      	ldr	r2, [r3, #0]
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009d32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009d34:	f001 fd14 	bl	800b760 <HAL_RCC_GetPCLK1Freq>
 8009d38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	4a81      	ldr	r2, [pc, #516]	; (8009f44 <HAL_I2C_Init+0x274>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d807      	bhi.n	8009d54 <HAL_I2C_Init+0x84>
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	4a80      	ldr	r2, [pc, #512]	; (8009f48 <HAL_I2C_Init+0x278>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	bf94      	ite	ls
 8009d4c:	2301      	movls	r3, #1
 8009d4e:	2300      	movhi	r3, #0
 8009d50:	b2db      	uxtb	r3, r3
 8009d52:	e006      	b.n	8009d62 <HAL_I2C_Init+0x92>
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	4a7d      	ldr	r2, [pc, #500]	; (8009f4c <HAL_I2C_Init+0x27c>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	bf94      	ite	ls
 8009d5c:	2301      	movls	r3, #1
 8009d5e:	2300      	movhi	r3, #0
 8009d60:	b2db      	uxtb	r3, r3
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d001      	beq.n	8009d6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009d66:	2301      	movs	r3, #1
 8009d68:	e0e7      	b.n	8009f3a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	4a78      	ldr	r2, [pc, #480]	; (8009f50 <HAL_I2C_Init+0x280>)
 8009d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8009d72:	0c9b      	lsrs	r3, r3, #18
 8009d74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	68ba      	ldr	r2, [r7, #8]
 8009d86:	430a      	orrs	r2, r1
 8009d88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	6a1b      	ldr	r3, [r3, #32]
 8009d90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	4a6a      	ldr	r2, [pc, #424]	; (8009f44 <HAL_I2C_Init+0x274>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d802      	bhi.n	8009da4 <HAL_I2C_Init+0xd4>
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	3301      	adds	r3, #1
 8009da2:	e009      	b.n	8009db8 <HAL_I2C_Init+0xe8>
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009daa:	fb02 f303 	mul.w	r3, r2, r3
 8009dae:	4a69      	ldr	r2, [pc, #420]	; (8009f54 <HAL_I2C_Init+0x284>)
 8009db0:	fba2 2303 	umull	r2, r3, r2, r3
 8009db4:	099b      	lsrs	r3, r3, #6
 8009db6:	3301      	adds	r3, #1
 8009db8:	687a      	ldr	r2, [r7, #4]
 8009dba:	6812      	ldr	r2, [r2, #0]
 8009dbc:	430b      	orrs	r3, r1
 8009dbe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	69db      	ldr	r3, [r3, #28]
 8009dc6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009dca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	495c      	ldr	r1, [pc, #368]	; (8009f44 <HAL_I2C_Init+0x274>)
 8009dd4:	428b      	cmp	r3, r1
 8009dd6:	d819      	bhi.n	8009e0c <HAL_I2C_Init+0x13c>
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	1e59      	subs	r1, r3, #1
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	005b      	lsls	r3, r3, #1
 8009de2:	fbb1 f3f3 	udiv	r3, r1, r3
 8009de6:	1c59      	adds	r1, r3, #1
 8009de8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009dec:	400b      	ands	r3, r1
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d00a      	beq.n	8009e08 <HAL_I2C_Init+0x138>
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	1e59      	subs	r1, r3, #1
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	005b      	lsls	r3, r3, #1
 8009dfc:	fbb1 f3f3 	udiv	r3, r1, r3
 8009e00:	3301      	adds	r3, #1
 8009e02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e06:	e051      	b.n	8009eac <HAL_I2C_Init+0x1dc>
 8009e08:	2304      	movs	r3, #4
 8009e0a:	e04f      	b.n	8009eac <HAL_I2C_Init+0x1dc>
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	689b      	ldr	r3, [r3, #8]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d111      	bne.n	8009e38 <HAL_I2C_Init+0x168>
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	1e58      	subs	r0, r3, #1
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6859      	ldr	r1, [r3, #4]
 8009e1c:	460b      	mov	r3, r1
 8009e1e:	005b      	lsls	r3, r3, #1
 8009e20:	440b      	add	r3, r1
 8009e22:	fbb0 f3f3 	udiv	r3, r0, r3
 8009e26:	3301      	adds	r3, #1
 8009e28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	bf0c      	ite	eq
 8009e30:	2301      	moveq	r3, #1
 8009e32:	2300      	movne	r3, #0
 8009e34:	b2db      	uxtb	r3, r3
 8009e36:	e012      	b.n	8009e5e <HAL_I2C_Init+0x18e>
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	1e58      	subs	r0, r3, #1
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6859      	ldr	r1, [r3, #4]
 8009e40:	460b      	mov	r3, r1
 8009e42:	009b      	lsls	r3, r3, #2
 8009e44:	440b      	add	r3, r1
 8009e46:	0099      	lsls	r1, r3, #2
 8009e48:	440b      	add	r3, r1
 8009e4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8009e4e:	3301      	adds	r3, #1
 8009e50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	bf0c      	ite	eq
 8009e58:	2301      	moveq	r3, #1
 8009e5a:	2300      	movne	r3, #0
 8009e5c:	b2db      	uxtb	r3, r3
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d001      	beq.n	8009e66 <HAL_I2C_Init+0x196>
 8009e62:	2301      	movs	r3, #1
 8009e64:	e022      	b.n	8009eac <HAL_I2C_Init+0x1dc>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	689b      	ldr	r3, [r3, #8]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d10e      	bne.n	8009e8c <HAL_I2C_Init+0x1bc>
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	1e58      	subs	r0, r3, #1
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6859      	ldr	r1, [r3, #4]
 8009e76:	460b      	mov	r3, r1
 8009e78:	005b      	lsls	r3, r3, #1
 8009e7a:	440b      	add	r3, r1
 8009e7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8009e80:	3301      	adds	r3, #1
 8009e82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e8a:	e00f      	b.n	8009eac <HAL_I2C_Init+0x1dc>
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	1e58      	subs	r0, r3, #1
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6859      	ldr	r1, [r3, #4]
 8009e94:	460b      	mov	r3, r1
 8009e96:	009b      	lsls	r3, r3, #2
 8009e98:	440b      	add	r3, r1
 8009e9a:	0099      	lsls	r1, r3, #2
 8009e9c:	440b      	add	r3, r1
 8009e9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ea8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009eac:	6879      	ldr	r1, [r7, #4]
 8009eae:	6809      	ldr	r1, [r1, #0]
 8009eb0:	4313      	orrs	r3, r2
 8009eb2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	69da      	ldr	r2, [r3, #28]
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6a1b      	ldr	r3, [r3, #32]
 8009ec6:	431a      	orrs	r2, r3
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	430a      	orrs	r2, r1
 8009ece:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	689b      	ldr	r3, [r3, #8]
 8009ed6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009eda:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009ede:	687a      	ldr	r2, [r7, #4]
 8009ee0:	6911      	ldr	r1, [r2, #16]
 8009ee2:	687a      	ldr	r2, [r7, #4]
 8009ee4:	68d2      	ldr	r2, [r2, #12]
 8009ee6:	4311      	orrs	r1, r2
 8009ee8:	687a      	ldr	r2, [r7, #4]
 8009eea:	6812      	ldr	r2, [r2, #0]
 8009eec:	430b      	orrs	r3, r1
 8009eee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	68db      	ldr	r3, [r3, #12]
 8009ef6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	695a      	ldr	r2, [r3, #20]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	699b      	ldr	r3, [r3, #24]
 8009f02:	431a      	orrs	r2, r3
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	430a      	orrs	r2, r1
 8009f0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	681a      	ldr	r2, [r3, #0]
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f042 0201 	orr.w	r2, r2, #1
 8009f1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2220      	movs	r2, #32
 8009f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2200      	movs	r2, #0
 8009f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009f38:	2300      	movs	r3, #0
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3710      	adds	r7, #16
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}
 8009f42:	bf00      	nop
 8009f44:	000186a0 	.word	0x000186a0
 8009f48:	001e847f 	.word	0x001e847f
 8009f4c:	003d08ff 	.word	0x003d08ff
 8009f50:	431bde83 	.word	0x431bde83
 8009f54:	10624dd3 	.word	0x10624dd3

08009f58 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b088      	sub	sp, #32
 8009f5c:	af02      	add	r7, sp, #8
 8009f5e:	60f8      	str	r0, [r7, #12]
 8009f60:	4608      	mov	r0, r1
 8009f62:	4611      	mov	r1, r2
 8009f64:	461a      	mov	r2, r3
 8009f66:	4603      	mov	r3, r0
 8009f68:	817b      	strh	r3, [r7, #10]
 8009f6a:	460b      	mov	r3, r1
 8009f6c:	813b      	strh	r3, [r7, #8]
 8009f6e:	4613      	mov	r3, r2
 8009f70:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009f72:	f7fe ff63 	bl	8008e3c <HAL_GetTick>
 8009f76:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f7e:	b2db      	uxtb	r3, r3
 8009f80:	2b20      	cmp	r3, #32
 8009f82:	f040 80d9 	bne.w	800a138 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	9300      	str	r3, [sp, #0]
 8009f8a:	2319      	movs	r3, #25
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	496d      	ldr	r1, [pc, #436]	; (800a144 <HAL_I2C_Mem_Write+0x1ec>)
 8009f90:	68f8      	ldr	r0, [r7, #12]
 8009f92:	f000 fcb5 	bl	800a900 <I2C_WaitOnFlagUntilTimeout>
 8009f96:	4603      	mov	r3, r0
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d001      	beq.n	8009fa0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009f9c:	2302      	movs	r3, #2
 8009f9e:	e0cc      	b.n	800a13a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fa6:	2b01      	cmp	r3, #1
 8009fa8:	d101      	bne.n	8009fae <HAL_I2C_Mem_Write+0x56>
 8009faa:	2302      	movs	r3, #2
 8009fac:	e0c5      	b.n	800a13a <HAL_I2C_Mem_Write+0x1e2>
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2201      	movs	r2, #1
 8009fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f003 0301 	and.w	r3, r3, #1
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	d007      	beq.n	8009fd4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	681a      	ldr	r2, [r3, #0]
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f042 0201 	orr.w	r2, r2, #1
 8009fd2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	681a      	ldr	r2, [r3, #0]
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009fe2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	2221      	movs	r2, #33	; 0x21
 8009fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	2240      	movs	r2, #64	; 0x40
 8009ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	6a3a      	ldr	r2, [r7, #32]
 8009ffe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a004:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a00a:	b29a      	uxth	r2, r3
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	4a4d      	ldr	r2, [pc, #308]	; (800a148 <HAL_I2C_Mem_Write+0x1f0>)
 800a014:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a016:	88f8      	ldrh	r0, [r7, #6]
 800a018:	893a      	ldrh	r2, [r7, #8]
 800a01a:	8979      	ldrh	r1, [r7, #10]
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	9301      	str	r3, [sp, #4]
 800a020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a022:	9300      	str	r3, [sp, #0]
 800a024:	4603      	mov	r3, r0
 800a026:	68f8      	ldr	r0, [r7, #12]
 800a028:	f000 faec 	bl	800a604 <I2C_RequestMemoryWrite>
 800a02c:	4603      	mov	r3, r0
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d052      	beq.n	800a0d8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a032:	2301      	movs	r3, #1
 800a034:	e081      	b.n	800a13a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a036:	697a      	ldr	r2, [r7, #20]
 800a038:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a03a:	68f8      	ldr	r0, [r7, #12]
 800a03c:	f000 fd36 	bl	800aaac <I2C_WaitOnTXEFlagUntilTimeout>
 800a040:	4603      	mov	r3, r0
 800a042:	2b00      	cmp	r3, #0
 800a044:	d00d      	beq.n	800a062 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a04a:	2b04      	cmp	r3, #4
 800a04c:	d107      	bne.n	800a05e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	681a      	ldr	r2, [r3, #0]
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a05c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a05e:	2301      	movs	r3, #1
 800a060:	e06b      	b.n	800a13a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a066:	781a      	ldrb	r2, [r3, #0]
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a072:	1c5a      	adds	r2, r3, #1
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a07c:	3b01      	subs	r3, #1
 800a07e:	b29a      	uxth	r2, r3
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a088:	b29b      	uxth	r3, r3
 800a08a:	3b01      	subs	r3, #1
 800a08c:	b29a      	uxth	r2, r3
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	695b      	ldr	r3, [r3, #20]
 800a098:	f003 0304 	and.w	r3, r3, #4
 800a09c:	2b04      	cmp	r3, #4
 800a09e:	d11b      	bne.n	800a0d8 <HAL_I2C_Mem_Write+0x180>
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d017      	beq.n	800a0d8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ac:	781a      	ldrb	r2, [r3, #0]
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b8:	1c5a      	adds	r2, r3, #1
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0c2:	3b01      	subs	r3, #1
 800a0c4:	b29a      	uxth	r2, r3
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0ce:	b29b      	uxth	r3, r3
 800a0d0:	3b01      	subs	r3, #1
 800a0d2:	b29a      	uxth	r2, r3
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d1aa      	bne.n	800a036 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a0e0:	697a      	ldr	r2, [r7, #20]
 800a0e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a0e4:	68f8      	ldr	r0, [r7, #12]
 800a0e6:	f000 fd22 	bl	800ab2e <I2C_WaitOnBTFFlagUntilTimeout>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d00d      	beq.n	800a10c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0f4:	2b04      	cmp	r3, #4
 800a0f6:	d107      	bne.n	800a108 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	681a      	ldr	r2, [r3, #0]
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a106:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a108:	2301      	movs	r3, #1
 800a10a:	e016      	b.n	800a13a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	681a      	ldr	r2, [r3, #0]
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a11a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	2220      	movs	r2, #32
 800a120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	2200      	movs	r2, #0
 800a128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	2200      	movs	r2, #0
 800a130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a134:	2300      	movs	r3, #0
 800a136:	e000      	b.n	800a13a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a138:	2302      	movs	r3, #2
  }
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3718      	adds	r7, #24
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
 800a142:	bf00      	nop
 800a144:	00100002 	.word	0x00100002
 800a148:	ffff0000 	.word	0xffff0000

0800a14c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b08c      	sub	sp, #48	; 0x30
 800a150:	af02      	add	r7, sp, #8
 800a152:	60f8      	str	r0, [r7, #12]
 800a154:	4608      	mov	r0, r1
 800a156:	4611      	mov	r1, r2
 800a158:	461a      	mov	r2, r3
 800a15a:	4603      	mov	r3, r0
 800a15c:	817b      	strh	r3, [r7, #10]
 800a15e:	460b      	mov	r3, r1
 800a160:	813b      	strh	r3, [r7, #8]
 800a162:	4613      	mov	r3, r2
 800a164:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a166:	f7fe fe69 	bl	8008e3c <HAL_GetTick>
 800a16a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a172:	b2db      	uxtb	r3, r3
 800a174:	2b20      	cmp	r3, #32
 800a176:	f040 8208 	bne.w	800a58a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a17c:	9300      	str	r3, [sp, #0]
 800a17e:	2319      	movs	r3, #25
 800a180:	2201      	movs	r2, #1
 800a182:	497b      	ldr	r1, [pc, #492]	; (800a370 <HAL_I2C_Mem_Read+0x224>)
 800a184:	68f8      	ldr	r0, [r7, #12]
 800a186:	f000 fbbb 	bl	800a900 <I2C_WaitOnFlagUntilTimeout>
 800a18a:	4603      	mov	r3, r0
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d001      	beq.n	800a194 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800a190:	2302      	movs	r3, #2
 800a192:	e1fb      	b.n	800a58c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a19a:	2b01      	cmp	r3, #1
 800a19c:	d101      	bne.n	800a1a2 <HAL_I2C_Mem_Read+0x56>
 800a19e:	2302      	movs	r3, #2
 800a1a0:	e1f4      	b.n	800a58c <HAL_I2C_Mem_Read+0x440>
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	2201      	movs	r2, #1
 800a1a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f003 0301 	and.w	r3, r3, #1
 800a1b4:	2b01      	cmp	r3, #1
 800a1b6:	d007      	beq.n	800a1c8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	681a      	ldr	r2, [r3, #0]
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f042 0201 	orr.w	r2, r2, #1
 800a1c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	681a      	ldr	r2, [r3, #0]
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a1d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	2222      	movs	r2, #34	; 0x22
 800a1dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2240      	movs	r2, #64	; 0x40
 800a1e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800a1f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1fe:	b29a      	uxth	r2, r3
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	4a5b      	ldr	r2, [pc, #364]	; (800a374 <HAL_I2C_Mem_Read+0x228>)
 800a208:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a20a:	88f8      	ldrh	r0, [r7, #6]
 800a20c:	893a      	ldrh	r2, [r7, #8]
 800a20e:	8979      	ldrh	r1, [r7, #10]
 800a210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a212:	9301      	str	r3, [sp, #4]
 800a214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a216:	9300      	str	r3, [sp, #0]
 800a218:	4603      	mov	r3, r0
 800a21a:	68f8      	ldr	r0, [r7, #12]
 800a21c:	f000 fa88 	bl	800a730 <I2C_RequestMemoryRead>
 800a220:	4603      	mov	r3, r0
 800a222:	2b00      	cmp	r3, #0
 800a224:	d001      	beq.n	800a22a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800a226:	2301      	movs	r3, #1
 800a228:	e1b0      	b.n	800a58c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d113      	bne.n	800a25a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a232:	2300      	movs	r3, #0
 800a234:	623b      	str	r3, [r7, #32]
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	695b      	ldr	r3, [r3, #20]
 800a23c:	623b      	str	r3, [r7, #32]
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	699b      	ldr	r3, [r3, #24]
 800a244:	623b      	str	r3, [r7, #32]
 800a246:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	681a      	ldr	r2, [r3, #0]
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a256:	601a      	str	r2, [r3, #0]
 800a258:	e184      	b.n	800a564 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a25e:	2b01      	cmp	r3, #1
 800a260:	d11b      	bne.n	800a29a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	681a      	ldr	r2, [r3, #0]
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a270:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a272:	2300      	movs	r3, #0
 800a274:	61fb      	str	r3, [r7, #28]
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	695b      	ldr	r3, [r3, #20]
 800a27c:	61fb      	str	r3, [r7, #28]
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	699b      	ldr	r3, [r3, #24]
 800a284:	61fb      	str	r3, [r7, #28]
 800a286:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	681a      	ldr	r2, [r3, #0]
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a296:	601a      	str	r2, [r3, #0]
 800a298:	e164      	b.n	800a564 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a29e:	2b02      	cmp	r3, #2
 800a2a0:	d11b      	bne.n	800a2da <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	681a      	ldr	r2, [r3, #0]
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a2b0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	681a      	ldr	r2, [r3, #0]
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a2c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	61bb      	str	r3, [r7, #24]
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	695b      	ldr	r3, [r3, #20]
 800a2cc:	61bb      	str	r3, [r7, #24]
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	699b      	ldr	r3, [r3, #24]
 800a2d4:	61bb      	str	r3, [r7, #24]
 800a2d6:	69bb      	ldr	r3, [r7, #24]
 800a2d8:	e144      	b.n	800a564 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a2da:	2300      	movs	r3, #0
 800a2dc:	617b      	str	r3, [r7, #20]
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	695b      	ldr	r3, [r3, #20]
 800a2e4:	617b      	str	r3, [r7, #20]
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	699b      	ldr	r3, [r3, #24]
 800a2ec:	617b      	str	r3, [r7, #20]
 800a2ee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800a2f0:	e138      	b.n	800a564 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2f6:	2b03      	cmp	r3, #3
 800a2f8:	f200 80f1 	bhi.w	800a4de <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a300:	2b01      	cmp	r3, #1
 800a302:	d123      	bne.n	800a34c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a306:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a308:	68f8      	ldr	r0, [r7, #12]
 800a30a:	f000 fc51 	bl	800abb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a30e:	4603      	mov	r3, r0
 800a310:	2b00      	cmp	r3, #0
 800a312:	d001      	beq.n	800a318 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800a314:	2301      	movs	r3, #1
 800a316:	e139      	b.n	800a58c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	691a      	ldr	r2, [r3, #16]
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a322:	b2d2      	uxtb	r2, r2
 800a324:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a32a:	1c5a      	adds	r2, r3, #1
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a334:	3b01      	subs	r3, #1
 800a336:	b29a      	uxth	r2, r3
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a340:	b29b      	uxth	r3, r3
 800a342:	3b01      	subs	r3, #1
 800a344:	b29a      	uxth	r2, r3
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a34a:	e10b      	b.n	800a564 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a350:	2b02      	cmp	r3, #2
 800a352:	d14e      	bne.n	800a3f2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a356:	9300      	str	r3, [sp, #0]
 800a358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a35a:	2200      	movs	r2, #0
 800a35c:	4906      	ldr	r1, [pc, #24]	; (800a378 <HAL_I2C_Mem_Read+0x22c>)
 800a35e:	68f8      	ldr	r0, [r7, #12]
 800a360:	f000 face 	bl	800a900 <I2C_WaitOnFlagUntilTimeout>
 800a364:	4603      	mov	r3, r0
 800a366:	2b00      	cmp	r3, #0
 800a368:	d008      	beq.n	800a37c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800a36a:	2301      	movs	r3, #1
 800a36c:	e10e      	b.n	800a58c <HAL_I2C_Mem_Read+0x440>
 800a36e:	bf00      	nop
 800a370:	00100002 	.word	0x00100002
 800a374:	ffff0000 	.word	0xffff0000
 800a378:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	681a      	ldr	r2, [r3, #0]
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a38a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	691a      	ldr	r2, [r3, #16]
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a396:	b2d2      	uxtb	r2, r2
 800a398:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a39e:	1c5a      	adds	r2, r3, #1
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3a8:	3b01      	subs	r3, #1
 800a3aa:	b29a      	uxth	r2, r3
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	3b01      	subs	r3, #1
 800a3b8:	b29a      	uxth	r2, r3
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	691a      	ldr	r2, [r3, #16]
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c8:	b2d2      	uxtb	r2, r2
 800a3ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d0:	1c5a      	adds	r2, r3, #1
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3da:	3b01      	subs	r3, #1
 800a3dc:	b29a      	uxth	r2, r3
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3e6:	b29b      	uxth	r3, r3
 800a3e8:	3b01      	subs	r3, #1
 800a3ea:	b29a      	uxth	r2, r3
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a3f0:	e0b8      	b.n	800a564 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f4:	9300      	str	r3, [sp, #0]
 800a3f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	4966      	ldr	r1, [pc, #408]	; (800a594 <HAL_I2C_Mem_Read+0x448>)
 800a3fc:	68f8      	ldr	r0, [r7, #12]
 800a3fe:	f000 fa7f 	bl	800a900 <I2C_WaitOnFlagUntilTimeout>
 800a402:	4603      	mov	r3, r0
 800a404:	2b00      	cmp	r3, #0
 800a406:	d001      	beq.n	800a40c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800a408:	2301      	movs	r3, #1
 800a40a:	e0bf      	b.n	800a58c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	681a      	ldr	r2, [r3, #0]
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a41a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	691a      	ldr	r2, [r3, #16]
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a426:	b2d2      	uxtb	r2, r2
 800a428:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a42e:	1c5a      	adds	r2, r3, #1
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a438:	3b01      	subs	r3, #1
 800a43a:	b29a      	uxth	r2, r3
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a444:	b29b      	uxth	r3, r3
 800a446:	3b01      	subs	r3, #1
 800a448:	b29a      	uxth	r2, r3
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a450:	9300      	str	r3, [sp, #0]
 800a452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a454:	2200      	movs	r2, #0
 800a456:	494f      	ldr	r1, [pc, #316]	; (800a594 <HAL_I2C_Mem_Read+0x448>)
 800a458:	68f8      	ldr	r0, [r7, #12]
 800a45a:	f000 fa51 	bl	800a900 <I2C_WaitOnFlagUntilTimeout>
 800a45e:	4603      	mov	r3, r0
 800a460:	2b00      	cmp	r3, #0
 800a462:	d001      	beq.n	800a468 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800a464:	2301      	movs	r3, #1
 800a466:	e091      	b.n	800a58c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	681a      	ldr	r2, [r3, #0]
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a476:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	691a      	ldr	r2, [r3, #16]
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a482:	b2d2      	uxtb	r2, r2
 800a484:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a48a:	1c5a      	adds	r2, r3, #1
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a494:	3b01      	subs	r3, #1
 800a496:	b29a      	uxth	r2, r3
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4a0:	b29b      	uxth	r3, r3
 800a4a2:	3b01      	subs	r3, #1
 800a4a4:	b29a      	uxth	r2, r3
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	691a      	ldr	r2, [r3, #16]
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b4:	b2d2      	uxtb	r2, r2
 800a4b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4bc:	1c5a      	adds	r2, r3, #1
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4c6:	3b01      	subs	r3, #1
 800a4c8:	b29a      	uxth	r2, r3
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4d2:	b29b      	uxth	r3, r3
 800a4d4:	3b01      	subs	r3, #1
 800a4d6:	b29a      	uxth	r2, r3
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a4dc:	e042      	b.n	800a564 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a4de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a4e2:	68f8      	ldr	r0, [r7, #12]
 800a4e4:	f000 fb64 	bl	800abb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d001      	beq.n	800a4f2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	e04c      	b.n	800a58c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	691a      	ldr	r2, [r3, #16]
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4fc:	b2d2      	uxtb	r2, r2
 800a4fe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a504:	1c5a      	adds	r2, r3, #1
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a50e:	3b01      	subs	r3, #1
 800a510:	b29a      	uxth	r2, r3
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a51a:	b29b      	uxth	r3, r3
 800a51c:	3b01      	subs	r3, #1
 800a51e:	b29a      	uxth	r2, r3
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	695b      	ldr	r3, [r3, #20]
 800a52a:	f003 0304 	and.w	r3, r3, #4
 800a52e:	2b04      	cmp	r3, #4
 800a530:	d118      	bne.n	800a564 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	691a      	ldr	r2, [r3, #16]
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a53c:	b2d2      	uxtb	r2, r2
 800a53e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a544:	1c5a      	adds	r2, r3, #1
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a54e:	3b01      	subs	r3, #1
 800a550:	b29a      	uxth	r2, r3
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a55a:	b29b      	uxth	r3, r3
 800a55c:	3b01      	subs	r3, #1
 800a55e:	b29a      	uxth	r2, r3
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a568:	2b00      	cmp	r3, #0
 800a56a:	f47f aec2 	bne.w	800a2f2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	2220      	movs	r2, #32
 800a572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	2200      	movs	r2, #0
 800a57a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2200      	movs	r2, #0
 800a582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a586:	2300      	movs	r3, #0
 800a588:	e000      	b.n	800a58c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800a58a:	2302      	movs	r3, #2
  }
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3728      	adds	r7, #40	; 0x28
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}
 800a594:	00010004 	.word	0x00010004

0800a598 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 800a598:	b480      	push	{r7}
 800a59a:	b083      	sub	sp, #12
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5a6:	b2db      	uxtb	r3, r3
 800a5a8:	2b20      	cmp	r3, #32
 800a5aa:	d124      	bne.n	800a5f6 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2228      	movs	r2, #40	; 0x28
 800a5b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f003 0301 	and.w	r3, r3, #1
 800a5be:	2b01      	cmp	r3, #1
 800a5c0:	d007      	beq.n	800a5d2 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	681a      	ldr	r2, [r3, #0]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f042 0201 	orr.w	r2, r2, #1
 800a5d0:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	681a      	ldr	r2, [r3, #0]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a5e0:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	685a      	ldr	r2, [r3, #4]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800a5f0:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	e000      	b.n	800a5f8 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800a5f6:	2302      	movs	r3, #2
  }
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	370c      	adds	r7, #12
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a602:	4770      	bx	lr

0800a604 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b088      	sub	sp, #32
 800a608:	af02      	add	r7, sp, #8
 800a60a:	60f8      	str	r0, [r7, #12]
 800a60c:	4608      	mov	r0, r1
 800a60e:	4611      	mov	r1, r2
 800a610:	461a      	mov	r2, r3
 800a612:	4603      	mov	r3, r0
 800a614:	817b      	strh	r3, [r7, #10]
 800a616:	460b      	mov	r3, r1
 800a618:	813b      	strh	r3, [r7, #8]
 800a61a:	4613      	mov	r3, r2
 800a61c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	681a      	ldr	r2, [r3, #0]
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a62c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a630:	9300      	str	r3, [sp, #0]
 800a632:	6a3b      	ldr	r3, [r7, #32]
 800a634:	2200      	movs	r2, #0
 800a636:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a63a:	68f8      	ldr	r0, [r7, #12]
 800a63c:	f000 f960 	bl	800a900 <I2C_WaitOnFlagUntilTimeout>
 800a640:	4603      	mov	r3, r0
 800a642:	2b00      	cmp	r3, #0
 800a644:	d00d      	beq.n	800a662 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a650:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a654:	d103      	bne.n	800a65e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a65c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a65e:	2303      	movs	r3, #3
 800a660:	e05f      	b.n	800a722 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a662:	897b      	ldrh	r3, [r7, #10]
 800a664:	b2db      	uxtb	r3, r3
 800a666:	461a      	mov	r2, r3
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a670:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a674:	6a3a      	ldr	r2, [r7, #32]
 800a676:	492d      	ldr	r1, [pc, #180]	; (800a72c <I2C_RequestMemoryWrite+0x128>)
 800a678:	68f8      	ldr	r0, [r7, #12]
 800a67a:	f000 f998 	bl	800a9ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a67e:	4603      	mov	r3, r0
 800a680:	2b00      	cmp	r3, #0
 800a682:	d001      	beq.n	800a688 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a684:	2301      	movs	r3, #1
 800a686:	e04c      	b.n	800a722 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a688:	2300      	movs	r3, #0
 800a68a:	617b      	str	r3, [r7, #20]
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	695b      	ldr	r3, [r3, #20]
 800a692:	617b      	str	r3, [r7, #20]
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	699b      	ldr	r3, [r3, #24]
 800a69a:	617b      	str	r3, [r7, #20]
 800a69c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a69e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6a0:	6a39      	ldr	r1, [r7, #32]
 800a6a2:	68f8      	ldr	r0, [r7, #12]
 800a6a4:	f000 fa02 	bl	800aaac <I2C_WaitOnTXEFlagUntilTimeout>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d00d      	beq.n	800a6ca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6b2:	2b04      	cmp	r3, #4
 800a6b4:	d107      	bne.n	800a6c6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	681a      	ldr	r2, [r3, #0]
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a6c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	e02b      	b.n	800a722 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a6ca:	88fb      	ldrh	r3, [r7, #6]
 800a6cc:	2b01      	cmp	r3, #1
 800a6ce:	d105      	bne.n	800a6dc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a6d0:	893b      	ldrh	r3, [r7, #8]
 800a6d2:	b2da      	uxtb	r2, r3
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	611a      	str	r2, [r3, #16]
 800a6da:	e021      	b.n	800a720 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a6dc:	893b      	ldrh	r3, [r7, #8]
 800a6de:	0a1b      	lsrs	r3, r3, #8
 800a6e0:	b29b      	uxth	r3, r3
 800a6e2:	b2da      	uxtb	r2, r3
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a6ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6ec:	6a39      	ldr	r1, [r7, #32]
 800a6ee:	68f8      	ldr	r0, [r7, #12]
 800a6f0:	f000 f9dc 	bl	800aaac <I2C_WaitOnTXEFlagUntilTimeout>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d00d      	beq.n	800a716 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6fe:	2b04      	cmp	r3, #4
 800a700:	d107      	bne.n	800a712 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	681a      	ldr	r2, [r3, #0]
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a710:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a712:	2301      	movs	r3, #1
 800a714:	e005      	b.n	800a722 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a716:	893b      	ldrh	r3, [r7, #8]
 800a718:	b2da      	uxtb	r2, r3
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a720:	2300      	movs	r3, #0
}
 800a722:	4618      	mov	r0, r3
 800a724:	3718      	adds	r7, #24
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}
 800a72a:	bf00      	nop
 800a72c:	00010002 	.word	0x00010002

0800a730 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b088      	sub	sp, #32
 800a734:	af02      	add	r7, sp, #8
 800a736:	60f8      	str	r0, [r7, #12]
 800a738:	4608      	mov	r0, r1
 800a73a:	4611      	mov	r1, r2
 800a73c:	461a      	mov	r2, r3
 800a73e:	4603      	mov	r3, r0
 800a740:	817b      	strh	r3, [r7, #10]
 800a742:	460b      	mov	r3, r1
 800a744:	813b      	strh	r3, [r7, #8]
 800a746:	4613      	mov	r3, r2
 800a748:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	681a      	ldr	r2, [r3, #0]
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a758:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	681a      	ldr	r2, [r3, #0]
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a768:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a76c:	9300      	str	r3, [sp, #0]
 800a76e:	6a3b      	ldr	r3, [r7, #32]
 800a770:	2200      	movs	r2, #0
 800a772:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a776:	68f8      	ldr	r0, [r7, #12]
 800a778:	f000 f8c2 	bl	800a900 <I2C_WaitOnFlagUntilTimeout>
 800a77c:	4603      	mov	r3, r0
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d00d      	beq.n	800a79e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a78c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a790:	d103      	bne.n	800a79a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a798:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a79a:	2303      	movs	r3, #3
 800a79c:	e0aa      	b.n	800a8f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a79e:	897b      	ldrh	r3, [r7, #10]
 800a7a0:	b2db      	uxtb	r3, r3
 800a7a2:	461a      	mov	r2, r3
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a7ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b0:	6a3a      	ldr	r2, [r7, #32]
 800a7b2:	4952      	ldr	r1, [pc, #328]	; (800a8fc <I2C_RequestMemoryRead+0x1cc>)
 800a7b4:	68f8      	ldr	r0, [r7, #12]
 800a7b6:	f000 f8fa 	bl	800a9ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d001      	beq.n	800a7c4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	e097      	b.n	800a8f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	617b      	str	r3, [r7, #20]
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	695b      	ldr	r3, [r3, #20]
 800a7ce:	617b      	str	r3, [r7, #20]
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	699b      	ldr	r3, [r3, #24]
 800a7d6:	617b      	str	r3, [r7, #20]
 800a7d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a7da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7dc:	6a39      	ldr	r1, [r7, #32]
 800a7de:	68f8      	ldr	r0, [r7, #12]
 800a7e0:	f000 f964 	bl	800aaac <I2C_WaitOnTXEFlagUntilTimeout>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d00d      	beq.n	800a806 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ee:	2b04      	cmp	r3, #4
 800a7f0:	d107      	bne.n	800a802 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	681a      	ldr	r2, [r3, #0]
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a800:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a802:	2301      	movs	r3, #1
 800a804:	e076      	b.n	800a8f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a806:	88fb      	ldrh	r3, [r7, #6]
 800a808:	2b01      	cmp	r3, #1
 800a80a:	d105      	bne.n	800a818 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a80c:	893b      	ldrh	r3, [r7, #8]
 800a80e:	b2da      	uxtb	r2, r3
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	611a      	str	r2, [r3, #16]
 800a816:	e021      	b.n	800a85c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a818:	893b      	ldrh	r3, [r7, #8]
 800a81a:	0a1b      	lsrs	r3, r3, #8
 800a81c:	b29b      	uxth	r3, r3
 800a81e:	b2da      	uxtb	r2, r3
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a828:	6a39      	ldr	r1, [r7, #32]
 800a82a:	68f8      	ldr	r0, [r7, #12]
 800a82c:	f000 f93e 	bl	800aaac <I2C_WaitOnTXEFlagUntilTimeout>
 800a830:	4603      	mov	r3, r0
 800a832:	2b00      	cmp	r3, #0
 800a834:	d00d      	beq.n	800a852 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a83a:	2b04      	cmp	r3, #4
 800a83c:	d107      	bne.n	800a84e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	681a      	ldr	r2, [r3, #0]
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a84c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a84e:	2301      	movs	r3, #1
 800a850:	e050      	b.n	800a8f4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a852:	893b      	ldrh	r3, [r7, #8]
 800a854:	b2da      	uxtb	r2, r3
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a85c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a85e:	6a39      	ldr	r1, [r7, #32]
 800a860:	68f8      	ldr	r0, [r7, #12]
 800a862:	f000 f923 	bl	800aaac <I2C_WaitOnTXEFlagUntilTimeout>
 800a866:	4603      	mov	r3, r0
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d00d      	beq.n	800a888 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a870:	2b04      	cmp	r3, #4
 800a872:	d107      	bne.n	800a884 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	681a      	ldr	r2, [r3, #0]
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a882:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a884:	2301      	movs	r3, #1
 800a886:	e035      	b.n	800a8f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	681a      	ldr	r2, [r3, #0]
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a896:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a89a:	9300      	str	r3, [sp, #0]
 800a89c:	6a3b      	ldr	r3, [r7, #32]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a8a4:	68f8      	ldr	r0, [r7, #12]
 800a8a6:	f000 f82b 	bl	800a900 <I2C_WaitOnFlagUntilTimeout>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d00d      	beq.n	800a8cc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8be:	d103      	bne.n	800a8c8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a8c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a8c8:	2303      	movs	r3, #3
 800a8ca:	e013      	b.n	800a8f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a8cc:	897b      	ldrh	r3, [r7, #10]
 800a8ce:	b2db      	uxtb	r3, r3
 800a8d0:	f043 0301 	orr.w	r3, r3, #1
 800a8d4:	b2da      	uxtb	r2, r3
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8de:	6a3a      	ldr	r2, [r7, #32]
 800a8e0:	4906      	ldr	r1, [pc, #24]	; (800a8fc <I2C_RequestMemoryRead+0x1cc>)
 800a8e2:	68f8      	ldr	r0, [r7, #12]
 800a8e4:	f000 f863 	bl	800a9ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d001      	beq.n	800a8f2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	e000      	b.n	800a8f4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a8f2:	2300      	movs	r3, #0
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3718      	adds	r7, #24
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}
 800a8fc:	00010002 	.word	0x00010002

0800a900 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b084      	sub	sp, #16
 800a904:	af00      	add	r7, sp, #0
 800a906:	60f8      	str	r0, [r7, #12]
 800a908:	60b9      	str	r1, [r7, #8]
 800a90a:	603b      	str	r3, [r7, #0]
 800a90c:	4613      	mov	r3, r2
 800a90e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a910:	e025      	b.n	800a95e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a918:	d021      	beq.n	800a95e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a91a:	f7fe fa8f 	bl	8008e3c <HAL_GetTick>
 800a91e:	4602      	mov	r2, r0
 800a920:	69bb      	ldr	r3, [r7, #24]
 800a922:	1ad3      	subs	r3, r2, r3
 800a924:	683a      	ldr	r2, [r7, #0]
 800a926:	429a      	cmp	r2, r3
 800a928:	d302      	bcc.n	800a930 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d116      	bne.n	800a95e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2200      	movs	r2, #0
 800a934:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	2220      	movs	r2, #32
 800a93a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	2200      	movs	r2, #0
 800a942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a94a:	f043 0220 	orr.w	r2, r3, #32
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	2200      	movs	r2, #0
 800a956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a95a:	2301      	movs	r3, #1
 800a95c:	e023      	b.n	800a9a6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	0c1b      	lsrs	r3, r3, #16
 800a962:	b2db      	uxtb	r3, r3
 800a964:	2b01      	cmp	r3, #1
 800a966:	d10d      	bne.n	800a984 <I2C_WaitOnFlagUntilTimeout+0x84>
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	695b      	ldr	r3, [r3, #20]
 800a96e:	43da      	mvns	r2, r3
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	4013      	ands	r3, r2
 800a974:	b29b      	uxth	r3, r3
 800a976:	2b00      	cmp	r3, #0
 800a978:	bf0c      	ite	eq
 800a97a:	2301      	moveq	r3, #1
 800a97c:	2300      	movne	r3, #0
 800a97e:	b2db      	uxtb	r3, r3
 800a980:	461a      	mov	r2, r3
 800a982:	e00c      	b.n	800a99e <I2C_WaitOnFlagUntilTimeout+0x9e>
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	699b      	ldr	r3, [r3, #24]
 800a98a:	43da      	mvns	r2, r3
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	4013      	ands	r3, r2
 800a990:	b29b      	uxth	r3, r3
 800a992:	2b00      	cmp	r3, #0
 800a994:	bf0c      	ite	eq
 800a996:	2301      	moveq	r3, #1
 800a998:	2300      	movne	r3, #0
 800a99a:	b2db      	uxtb	r3, r3
 800a99c:	461a      	mov	r2, r3
 800a99e:	79fb      	ldrb	r3, [r7, #7]
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	d0b6      	beq.n	800a912 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a9a4:	2300      	movs	r3, #0
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3710      	adds	r7, #16
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}

0800a9ae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a9ae:	b580      	push	{r7, lr}
 800a9b0:	b084      	sub	sp, #16
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	60f8      	str	r0, [r7, #12]
 800a9b6:	60b9      	str	r1, [r7, #8]
 800a9b8:	607a      	str	r2, [r7, #4]
 800a9ba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a9bc:	e051      	b.n	800aa62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	695b      	ldr	r3, [r3, #20]
 800a9c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a9c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9cc:	d123      	bne.n	800aa16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	681a      	ldr	r2, [r3, #0]
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a9dc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a9e6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	2220      	movs	r2, #32
 800a9f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa02:	f043 0204 	orr.w	r2, r3, #4
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800aa12:	2301      	movs	r3, #1
 800aa14:	e046      	b.n	800aaa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa1c:	d021      	beq.n	800aa62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa1e:	f7fe fa0d 	bl	8008e3c <HAL_GetTick>
 800aa22:	4602      	mov	r2, r0
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	1ad3      	subs	r3, r2, r3
 800aa28:	687a      	ldr	r2, [r7, #4]
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d302      	bcc.n	800aa34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d116      	bne.n	800aa62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	2200      	movs	r2, #0
 800aa38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	2220      	movs	r2, #32
 800aa3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	2200      	movs	r2, #0
 800aa46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa4e:	f043 0220 	orr.w	r2, r3, #32
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800aa5e:	2301      	movs	r3, #1
 800aa60:	e020      	b.n	800aaa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	0c1b      	lsrs	r3, r3, #16
 800aa66:	b2db      	uxtb	r3, r3
 800aa68:	2b01      	cmp	r3, #1
 800aa6a:	d10c      	bne.n	800aa86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	695b      	ldr	r3, [r3, #20]
 800aa72:	43da      	mvns	r2, r3
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	4013      	ands	r3, r2
 800aa78:	b29b      	uxth	r3, r3
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	bf14      	ite	ne
 800aa7e:	2301      	movne	r3, #1
 800aa80:	2300      	moveq	r3, #0
 800aa82:	b2db      	uxtb	r3, r3
 800aa84:	e00b      	b.n	800aa9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	699b      	ldr	r3, [r3, #24]
 800aa8c:	43da      	mvns	r2, r3
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	4013      	ands	r3, r2
 800aa92:	b29b      	uxth	r3, r3
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	bf14      	ite	ne
 800aa98:	2301      	movne	r3, #1
 800aa9a:	2300      	moveq	r3, #0
 800aa9c:	b2db      	uxtb	r3, r3
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d18d      	bne.n	800a9be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800aaa2:	2300      	movs	r3, #0
}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	3710      	adds	r7, #16
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}

0800aaac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b084      	sub	sp, #16
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	60f8      	str	r0, [r7, #12]
 800aab4:	60b9      	str	r1, [r7, #8]
 800aab6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800aab8:	e02d      	b.n	800ab16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800aaba:	68f8      	ldr	r0, [r7, #12]
 800aabc:	f000 f8ce 	bl	800ac5c <I2C_IsAcknowledgeFailed>
 800aac0:	4603      	mov	r3, r0
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d001      	beq.n	800aaca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800aac6:	2301      	movs	r3, #1
 800aac8:	e02d      	b.n	800ab26 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aad0:	d021      	beq.n	800ab16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aad2:	f7fe f9b3 	bl	8008e3c <HAL_GetTick>
 800aad6:	4602      	mov	r2, r0
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	1ad3      	subs	r3, r2, r3
 800aadc:	68ba      	ldr	r2, [r7, #8]
 800aade:	429a      	cmp	r2, r3
 800aae0:	d302      	bcc.n	800aae8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d116      	bne.n	800ab16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	2200      	movs	r2, #0
 800aaec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2220      	movs	r2, #32
 800aaf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab02:	f043 0220 	orr.w	r2, r3, #32
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ab12:	2301      	movs	r3, #1
 800ab14:	e007      	b.n	800ab26 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	695b      	ldr	r3, [r3, #20]
 800ab1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab20:	2b80      	cmp	r3, #128	; 0x80
 800ab22:	d1ca      	bne.n	800aaba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ab24:	2300      	movs	r3, #0
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	3710      	adds	r7, #16
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}

0800ab2e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ab2e:	b580      	push	{r7, lr}
 800ab30:	b084      	sub	sp, #16
 800ab32:	af00      	add	r7, sp, #0
 800ab34:	60f8      	str	r0, [r7, #12]
 800ab36:	60b9      	str	r1, [r7, #8]
 800ab38:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ab3a:	e02d      	b.n	800ab98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ab3c:	68f8      	ldr	r0, [r7, #12]
 800ab3e:	f000 f88d 	bl	800ac5c <I2C_IsAcknowledgeFailed>
 800ab42:	4603      	mov	r3, r0
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d001      	beq.n	800ab4c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ab48:	2301      	movs	r3, #1
 800ab4a:	e02d      	b.n	800aba8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab52:	d021      	beq.n	800ab98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab54:	f7fe f972 	bl	8008e3c <HAL_GetTick>
 800ab58:	4602      	mov	r2, r0
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	1ad3      	subs	r3, r2, r3
 800ab5e:	68ba      	ldr	r2, [r7, #8]
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d302      	bcc.n	800ab6a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d116      	bne.n	800ab98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	2220      	movs	r2, #32
 800ab74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab84:	f043 0220 	orr.w	r2, r3, #32
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	2200      	movs	r2, #0
 800ab90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ab94:	2301      	movs	r3, #1
 800ab96:	e007      	b.n	800aba8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	695b      	ldr	r3, [r3, #20]
 800ab9e:	f003 0304 	and.w	r3, r3, #4
 800aba2:	2b04      	cmp	r3, #4
 800aba4:	d1ca      	bne.n	800ab3c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800aba6:	2300      	movs	r3, #0
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3710      	adds	r7, #16
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}

0800abb0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b084      	sub	sp, #16
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	60f8      	str	r0, [r7, #12]
 800abb8:	60b9      	str	r1, [r7, #8]
 800abba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800abbc:	e042      	b.n	800ac44 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	695b      	ldr	r3, [r3, #20]
 800abc4:	f003 0310 	and.w	r3, r3, #16
 800abc8:	2b10      	cmp	r3, #16
 800abca:	d119      	bne.n	800ac00 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f06f 0210 	mvn.w	r2, #16
 800abd4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	2200      	movs	r2, #0
 800abda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	2220      	movs	r2, #32
 800abe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	2200      	movs	r2, #0
 800abe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	2200      	movs	r2, #0
 800abf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800abfc:	2301      	movs	r3, #1
 800abfe:	e029      	b.n	800ac54 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac00:	f7fe f91c 	bl	8008e3c <HAL_GetTick>
 800ac04:	4602      	mov	r2, r0
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	1ad3      	subs	r3, r2, r3
 800ac0a:	68ba      	ldr	r2, [r7, #8]
 800ac0c:	429a      	cmp	r2, r3
 800ac0e:	d302      	bcc.n	800ac16 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d116      	bne.n	800ac44 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	2220      	movs	r2, #32
 800ac20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	2200      	movs	r2, #0
 800ac28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac30:	f043 0220 	orr.w	r2, r3, #32
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ac40:	2301      	movs	r3, #1
 800ac42:	e007      	b.n	800ac54 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	695b      	ldr	r3, [r3, #20]
 800ac4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac4e:	2b40      	cmp	r3, #64	; 0x40
 800ac50:	d1b5      	bne.n	800abbe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800ac52:	2300      	movs	r3, #0
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	3710      	adds	r7, #16
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}

0800ac5c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b083      	sub	sp, #12
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	695b      	ldr	r3, [r3, #20]
 800ac6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ac6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac72:	d11b      	bne.n	800acac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ac7c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2200      	movs	r2, #0
 800ac82:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2220      	movs	r2, #32
 800ac88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac98:	f043 0204 	orr.w	r2, r3, #4
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2200      	movs	r2, #0
 800aca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800aca8:	2301      	movs	r3, #1
 800acaa:	e000      	b.n	800acae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800acac:	2300      	movs	r3, #0
}
 800acae:	4618      	mov	r0, r3
 800acb0:	370c      	adds	r7, #12
 800acb2:	46bd      	mov	sp, r7
 800acb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb8:	4770      	bx	lr

0800acba <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800acba:	b480      	push	{r7}
 800acbc:	b083      	sub	sp, #12
 800acbe:	af00      	add	r7, sp, #0
 800acc0:	6078      	str	r0, [r7, #4]
 800acc2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800acca:	b2db      	uxtb	r3, r3
 800accc:	2b20      	cmp	r3, #32
 800acce:	d129      	bne.n	800ad24 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2224      	movs	r2, #36	; 0x24
 800acd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	681a      	ldr	r2, [r3, #0]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f022 0201 	bic.w	r2, r2, #1
 800ace6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f022 0210 	bic.w	r2, r2, #16
 800acf6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	683a      	ldr	r2, [r7, #0]
 800ad04:	430a      	orrs	r2, r1
 800ad06:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	681a      	ldr	r2, [r3, #0]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f042 0201 	orr.w	r2, r2, #1
 800ad16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2220      	movs	r2, #32
 800ad1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800ad20:	2300      	movs	r3, #0
 800ad22:	e000      	b.n	800ad26 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800ad24:	2302      	movs	r3, #2
  }
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	370c      	adds	r7, #12
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad30:	4770      	bx	lr

0800ad32 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ad32:	b480      	push	{r7}
 800ad34:	b085      	sub	sp, #20
 800ad36:	af00      	add	r7, sp, #0
 800ad38:	6078      	str	r0, [r7, #4]
 800ad3a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad46:	b2db      	uxtb	r3, r3
 800ad48:	2b20      	cmp	r3, #32
 800ad4a:	d12a      	bne.n	800ada2 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2224      	movs	r2, #36	; 0x24
 800ad50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	681a      	ldr	r2, [r3, #0]
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f022 0201 	bic.w	r2, r2, #1
 800ad62:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad6a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800ad6c:	89fb      	ldrh	r3, [r7, #14]
 800ad6e:	f023 030f 	bic.w	r3, r3, #15
 800ad72:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	b29a      	uxth	r2, r3
 800ad78:	89fb      	ldrh	r3, [r7, #14]
 800ad7a:	4313      	orrs	r3, r2
 800ad7c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	89fa      	ldrh	r2, [r7, #14]
 800ad84:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	681a      	ldr	r2, [r3, #0]
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f042 0201 	orr.w	r2, r2, #1
 800ad94:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2220      	movs	r2, #32
 800ad9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	e000      	b.n	800ada4 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800ada2:	2302      	movs	r3, #2
  }
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	3714      	adds	r7, #20
 800ada8:	46bd      	mov	sp, r7
 800adaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adae:	4770      	bx	lr

0800adb0 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 800adb0:	b480      	push	{r7}
 800adb2:	b083      	sub	sp, #12
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 800adb8:	4b05      	ldr	r3, [pc, #20]	; (800add0 <HAL_PWR_EnableWakeUpPin+0x20>)
 800adba:	685a      	ldr	r2, [r3, #4]
 800adbc:	4904      	ldr	r1, [pc, #16]	; (800add0 <HAL_PWR_EnableWakeUpPin+0x20>)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	4313      	orrs	r3, r2
 800adc2:	604b      	str	r3, [r1, #4]
}
 800adc4:	bf00      	nop
 800adc6:	370c      	adds	r7, #12
 800adc8:	46bd      	mov	sp, r7
 800adca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adce:	4770      	bx	lr
 800add0:	40007000 	.word	0x40007000

0800add4 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 800add4:	b480      	push	{r7}
 800add6:	b083      	sub	sp, #12
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 800addc:	4b06      	ldr	r3, [pc, #24]	; (800adf8 <HAL_PWR_DisableWakeUpPin+0x24>)
 800adde:	685a      	ldr	r2, [r3, #4]
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	43db      	mvns	r3, r3
 800ade4:	4904      	ldr	r1, [pc, #16]	; (800adf8 <HAL_PWR_DisableWakeUpPin+0x24>)
 800ade6:	4013      	ands	r3, r2
 800ade8:	604b      	str	r3, [r1, #4]
}
 800adea:	bf00      	nop
 800adec:	370c      	adds	r7, #12
 800adee:	46bd      	mov	sp, r7
 800adf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf4:	4770      	bx	lr
 800adf6:	bf00      	nop
 800adf8:	40007000 	.word	0x40007000

0800adfc <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 800adfc:	b480      	push	{r7}
 800adfe:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 800ae00:	4b08      	ldr	r3, [pc, #32]	; (800ae24 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	4a07      	ldr	r2, [pc, #28]	; (800ae24 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800ae06:	f043 0302 	orr.w	r3, r3, #2
 800ae0a:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800ae0c:	4b06      	ldr	r3, [pc, #24]	; (800ae28 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800ae0e:	691b      	ldr	r3, [r3, #16]
 800ae10:	4a05      	ldr	r2, [pc, #20]	; (800ae28 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800ae12:	f043 0304 	orr.w	r3, r3, #4
 800ae16:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 800ae18:	bf30      	wfi
}
 800ae1a:	bf00      	nop
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae22:	4770      	bx	lr
 800ae24:	40007000 	.word	0x40007000
 800ae28:	e000ed00 	.word	0xe000ed00

0800ae2c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b082      	sub	sp, #8
 800ae30:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800ae32:	2300      	movs	r3, #0
 800ae34:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800ae36:	2300      	movs	r3, #0
 800ae38:	603b      	str	r3, [r7, #0]
 800ae3a:	4b20      	ldr	r3, [pc, #128]	; (800aebc <HAL_PWREx_EnableOverDrive+0x90>)
 800ae3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae3e:	4a1f      	ldr	r2, [pc, #124]	; (800aebc <HAL_PWREx_EnableOverDrive+0x90>)
 800ae40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae44:	6413      	str	r3, [r2, #64]	; 0x40
 800ae46:	4b1d      	ldr	r3, [pc, #116]	; (800aebc <HAL_PWREx_EnableOverDrive+0x90>)
 800ae48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae4e:	603b      	str	r3, [r7, #0]
 800ae50:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800ae52:	4b1b      	ldr	r3, [pc, #108]	; (800aec0 <HAL_PWREx_EnableOverDrive+0x94>)
 800ae54:	2201      	movs	r2, #1
 800ae56:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ae58:	f7fd fff0 	bl	8008e3c <HAL_GetTick>
 800ae5c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800ae5e:	e009      	b.n	800ae74 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800ae60:	f7fd ffec 	bl	8008e3c <HAL_GetTick>
 800ae64:	4602      	mov	r2, r0
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	1ad3      	subs	r3, r2, r3
 800ae6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ae6e:	d901      	bls.n	800ae74 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800ae70:	2303      	movs	r3, #3
 800ae72:	e01f      	b.n	800aeb4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800ae74:	4b13      	ldr	r3, [pc, #76]	; (800aec4 <HAL_PWREx_EnableOverDrive+0x98>)
 800ae76:	685b      	ldr	r3, [r3, #4]
 800ae78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae80:	d1ee      	bne.n	800ae60 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800ae82:	4b11      	ldr	r3, [pc, #68]	; (800aec8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800ae84:	2201      	movs	r2, #1
 800ae86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ae88:	f7fd ffd8 	bl	8008e3c <HAL_GetTick>
 800ae8c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800ae8e:	e009      	b.n	800aea4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800ae90:	f7fd ffd4 	bl	8008e3c <HAL_GetTick>
 800ae94:	4602      	mov	r2, r0
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	1ad3      	subs	r3, r2, r3
 800ae9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ae9e:	d901      	bls.n	800aea4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800aea0:	2303      	movs	r3, #3
 800aea2:	e007      	b.n	800aeb4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800aea4:	4b07      	ldr	r3, [pc, #28]	; (800aec4 <HAL_PWREx_EnableOverDrive+0x98>)
 800aea6:	685b      	ldr	r3, [r3, #4]
 800aea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aeac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aeb0:	d1ee      	bne.n	800ae90 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800aeb2:	2300      	movs	r3, #0
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3708      	adds	r7, #8
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}
 800aebc:	40023800 	.word	0x40023800
 800aec0:	420e0040 	.word	0x420e0040
 800aec4:	40007000 	.word	0x40007000
 800aec8:	420e0044 	.word	0x420e0044

0800aecc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b086      	sub	sp, #24
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d101      	bne.n	800aede <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800aeda:	2301      	movs	r3, #1
 800aedc:	e264      	b.n	800b3a8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f003 0301 	and.w	r3, r3, #1
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d075      	beq.n	800afd6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800aeea:	4ba3      	ldr	r3, [pc, #652]	; (800b178 <HAL_RCC_OscConfig+0x2ac>)
 800aeec:	689b      	ldr	r3, [r3, #8]
 800aeee:	f003 030c 	and.w	r3, r3, #12
 800aef2:	2b04      	cmp	r3, #4
 800aef4:	d00c      	beq.n	800af10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800aef6:	4ba0      	ldr	r3, [pc, #640]	; (800b178 <HAL_RCC_OscConfig+0x2ac>)
 800aef8:	689b      	ldr	r3, [r3, #8]
 800aefa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800aefe:	2b08      	cmp	r3, #8
 800af00:	d112      	bne.n	800af28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800af02:	4b9d      	ldr	r3, [pc, #628]	; (800b178 <HAL_RCC_OscConfig+0x2ac>)
 800af04:	685b      	ldr	r3, [r3, #4]
 800af06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af0e:	d10b      	bne.n	800af28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800af10:	4b99      	ldr	r3, [pc, #612]	; (800b178 <HAL_RCC_OscConfig+0x2ac>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d05b      	beq.n	800afd4 <HAL_RCC_OscConfig+0x108>
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	685b      	ldr	r3, [r3, #4]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d157      	bne.n	800afd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800af24:	2301      	movs	r3, #1
 800af26:	e23f      	b.n	800b3a8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	685b      	ldr	r3, [r3, #4]
 800af2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af30:	d106      	bne.n	800af40 <HAL_RCC_OscConfig+0x74>
 800af32:	4b91      	ldr	r3, [pc, #580]	; (800b178 <HAL_RCC_OscConfig+0x2ac>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	4a90      	ldr	r2, [pc, #576]	; (800b178 <HAL_RCC_OscConfig+0x2ac>)
 800af38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af3c:	6013      	str	r3, [r2, #0]
 800af3e:	e01d      	b.n	800af7c <HAL_RCC_OscConfig+0xb0>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	685b      	ldr	r3, [r3, #4]
 800af44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800af48:	d10c      	bne.n	800af64 <HAL_RCC_OscConfig+0x98>
 800af4a:	4b8b      	ldr	r3, [pc, #556]	; (800b178 <HAL_RCC_OscConfig+0x2ac>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	4a8a      	ldr	r2, [pc, #552]	; (800b178 <HAL_RCC_OscConfig+0x2ac>)
 800af50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800af54:	6013      	str	r3, [r2, #0]
 800af56:	4b88      	ldr	r3, [pc, #544]	; (800b178 <HAL_RCC_OscConfig+0x2ac>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	4a87      	ldr	r2, [pc, #540]	; (800b178 <HAL_RCC_OscConfig+0x2ac>)
 800af5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af60:	6013      	str	r3, [r2, #0]
 800af62:	e00b      	b.n	800af7c <HAL_RCC_OscConfig+0xb0>
 800af64:	4b84      	ldr	r3, [pc, #528]	; (800b178 <HAL_RCC_OscConfig+0x2ac>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	4a83      	ldr	r2, [pc, #524]	; (800b178 <HAL_RCC_OscConfig+0x2ac>)
 800af6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af6e:	6013      	str	r3, [r2, #0]
 800af70:	4b81      	ldr	r3, [pc, #516]	; (800b178 <HAL_RCC_OscConfig+0x2ac>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	4a80      	ldr	r2, [pc, #512]	; (800b178 <HAL_RCC_OscConfig+0x2ac>)
 800af76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800af7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	685b      	ldr	r3, [r3, #4]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d013      	beq.n	800afac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800af84:	f7fd ff5a 	bl	8008e3c <HAL_GetTick>
 800af88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800af8a:	e008      	b.n	800af9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800af8c:	f7fd ff56 	bl	8008e3c <HAL_GetTick>
 800af90:	4602      	mov	r2, r0
 800af92:	693b      	ldr	r3, [r7, #16]
 800af94:	1ad3      	subs	r3, r2, r3
 800af96:	2b64      	cmp	r3, #100	; 0x64
 800af98:	d901      	bls.n	800af9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800af9a:	2303      	movs	r3, #3
 800af9c:	e204      	b.n	800b3a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800af9e:	4b76      	ldr	r3, [pc, #472]	; (800b178 <HAL_RCC_OscConfig+0x2ac>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d0f0      	beq.n	800af8c <HAL_RCC_OscConfig+0xc0>
 800afaa:	e014      	b.n	800afd6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800afac:	f7fd ff46 	bl	8008e3c <HAL_GetTick>
 800afb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800afb2:	e008      	b.n	800afc6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800afb4:	f7fd ff42 	bl	8008e3c <HAL_GetTick>
 800afb8:	4602      	mov	r2, r0
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	1ad3      	subs	r3, r2, r3
 800afbe:	2b64      	cmp	r3, #100	; 0x64
 800afc0:	d901      	bls.n	800afc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800afc2:	2303      	movs	r3, #3
 800afc4:	e1f0      	b.n	800b3a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800afc6:	4b6c      	ldr	r3, [pc, #432]	; (800b178 <HAL_RCC_OscConfig+0x2ac>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d1f0      	bne.n	800afb4 <HAL_RCC_OscConfig+0xe8>
 800afd2:	e000      	b.n	800afd6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800afd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f003 0302 	and.w	r3, r3, #2
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d063      	beq.n	800b0aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800afe2:	4b65      	ldr	r3, [pc, #404]	; (800b178 <HAL_RCC_OscConfig+0x2ac>)
 800afe4:	689b      	ldr	r3, [r3, #8]
 800afe6:	f003 030c 	and.w	r3, r3, #12
 800afea:	2b00      	cmp	r3, #0
 800afec:	d00b      	beq.n	800b006 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800afee:	4b62      	ldr	r3, [pc, #392]	; (800b178 <HAL_RCC_OscConfig+0x2ac>)
 800aff0:	689b      	ldr	r3, [r3, #8]
 800aff2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800aff6:	2b08      	cmp	r3, #8
 800aff8:	d11c      	bne.n	800b034 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800affa:	4b5f      	ldr	r3, [pc, #380]	; (800b178 <HAL_RCC_OscConfig+0x2ac>)
 800affc:	685b      	ldr	r3, [r3, #4]
 800affe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b002:	2b00      	cmp	r3, #0
 800b004:	d116      	bne.n	800b034 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b006:	4b5c      	ldr	r3, [pc, #368]	; (800b178 <HAL_RCC_OscConfig+0x2ac>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f003 0302 	and.w	r3, r3, #2
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d005      	beq.n	800b01e <HAL_RCC_OscConfig+0x152>
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	68db      	ldr	r3, [r3, #12]
 800b016:	2b01      	cmp	r3, #1
 800b018:	d001      	beq.n	800b01e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800b01a:	2301      	movs	r3, #1
 800b01c:	e1c4      	b.n	800b3a8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b01e:	4b56      	ldr	r3, [pc, #344]	; (800b178 <HAL_RCC_OscConfig+0x2ac>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	691b      	ldr	r3, [r3, #16]
 800b02a:	00db      	lsls	r3, r3, #3
 800b02c:	4952      	ldr	r1, [pc, #328]	; (800b178 <HAL_RCC_OscConfig+0x2ac>)
 800b02e:	4313      	orrs	r3, r2
 800b030:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b032:	e03a      	b.n	800b0aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	68db      	ldr	r3, [r3, #12]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d020      	beq.n	800b07e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b03c:	4b4f      	ldr	r3, [pc, #316]	; (800b17c <HAL_RCC_OscConfig+0x2b0>)
 800b03e:	2201      	movs	r2, #1
 800b040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b042:	f7fd fefb 	bl	8008e3c <HAL_GetTick>
 800b046:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b048:	e008      	b.n	800b05c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b04a:	f7fd fef7 	bl	8008e3c <HAL_GetTick>
 800b04e:	4602      	mov	r2, r0
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	1ad3      	subs	r3, r2, r3
 800b054:	2b02      	cmp	r3, #2
 800b056:	d901      	bls.n	800b05c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800b058:	2303      	movs	r3, #3
 800b05a:	e1a5      	b.n	800b3a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b05c:	4b46      	ldr	r3, [pc, #280]	; (800b178 <HAL_RCC_OscConfig+0x2ac>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f003 0302 	and.w	r3, r3, #2
 800b064:	2b00      	cmp	r3, #0
 800b066:	d0f0      	beq.n	800b04a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b068:	4b43      	ldr	r3, [pc, #268]	; (800b178 <HAL_RCC_OscConfig+0x2ac>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	691b      	ldr	r3, [r3, #16]
 800b074:	00db      	lsls	r3, r3, #3
 800b076:	4940      	ldr	r1, [pc, #256]	; (800b178 <HAL_RCC_OscConfig+0x2ac>)
 800b078:	4313      	orrs	r3, r2
 800b07a:	600b      	str	r3, [r1, #0]
 800b07c:	e015      	b.n	800b0aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b07e:	4b3f      	ldr	r3, [pc, #252]	; (800b17c <HAL_RCC_OscConfig+0x2b0>)
 800b080:	2200      	movs	r2, #0
 800b082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b084:	f7fd feda 	bl	8008e3c <HAL_GetTick>
 800b088:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b08a:	e008      	b.n	800b09e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b08c:	f7fd fed6 	bl	8008e3c <HAL_GetTick>
 800b090:	4602      	mov	r2, r0
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	1ad3      	subs	r3, r2, r3
 800b096:	2b02      	cmp	r3, #2
 800b098:	d901      	bls.n	800b09e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800b09a:	2303      	movs	r3, #3
 800b09c:	e184      	b.n	800b3a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b09e:	4b36      	ldr	r3, [pc, #216]	; (800b178 <HAL_RCC_OscConfig+0x2ac>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f003 0302 	and.w	r3, r3, #2
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d1f0      	bne.n	800b08c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f003 0308 	and.w	r3, r3, #8
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d030      	beq.n	800b118 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	695b      	ldr	r3, [r3, #20]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d016      	beq.n	800b0ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b0be:	4b30      	ldr	r3, [pc, #192]	; (800b180 <HAL_RCC_OscConfig+0x2b4>)
 800b0c0:	2201      	movs	r2, #1
 800b0c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b0c4:	f7fd feba 	bl	8008e3c <HAL_GetTick>
 800b0c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b0ca:	e008      	b.n	800b0de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b0cc:	f7fd feb6 	bl	8008e3c <HAL_GetTick>
 800b0d0:	4602      	mov	r2, r0
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	1ad3      	subs	r3, r2, r3
 800b0d6:	2b02      	cmp	r3, #2
 800b0d8:	d901      	bls.n	800b0de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800b0da:	2303      	movs	r3, #3
 800b0dc:	e164      	b.n	800b3a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b0de:	4b26      	ldr	r3, [pc, #152]	; (800b178 <HAL_RCC_OscConfig+0x2ac>)
 800b0e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b0e2:	f003 0302 	and.w	r3, r3, #2
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d0f0      	beq.n	800b0cc <HAL_RCC_OscConfig+0x200>
 800b0ea:	e015      	b.n	800b118 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b0ec:	4b24      	ldr	r3, [pc, #144]	; (800b180 <HAL_RCC_OscConfig+0x2b4>)
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b0f2:	f7fd fea3 	bl	8008e3c <HAL_GetTick>
 800b0f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b0f8:	e008      	b.n	800b10c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b0fa:	f7fd fe9f 	bl	8008e3c <HAL_GetTick>
 800b0fe:	4602      	mov	r2, r0
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	1ad3      	subs	r3, r2, r3
 800b104:	2b02      	cmp	r3, #2
 800b106:	d901      	bls.n	800b10c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b108:	2303      	movs	r3, #3
 800b10a:	e14d      	b.n	800b3a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b10c:	4b1a      	ldr	r3, [pc, #104]	; (800b178 <HAL_RCC_OscConfig+0x2ac>)
 800b10e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b110:	f003 0302 	and.w	r3, r3, #2
 800b114:	2b00      	cmp	r3, #0
 800b116:	d1f0      	bne.n	800b0fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f003 0304 	and.w	r3, r3, #4
 800b120:	2b00      	cmp	r3, #0
 800b122:	f000 80a0 	beq.w	800b266 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b126:	2300      	movs	r3, #0
 800b128:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b12a:	4b13      	ldr	r3, [pc, #76]	; (800b178 <HAL_RCC_OscConfig+0x2ac>)
 800b12c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b12e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b132:	2b00      	cmp	r3, #0
 800b134:	d10f      	bne.n	800b156 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b136:	2300      	movs	r3, #0
 800b138:	60bb      	str	r3, [r7, #8]
 800b13a:	4b0f      	ldr	r3, [pc, #60]	; (800b178 <HAL_RCC_OscConfig+0x2ac>)
 800b13c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b13e:	4a0e      	ldr	r2, [pc, #56]	; (800b178 <HAL_RCC_OscConfig+0x2ac>)
 800b140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b144:	6413      	str	r3, [r2, #64]	; 0x40
 800b146:	4b0c      	ldr	r3, [pc, #48]	; (800b178 <HAL_RCC_OscConfig+0x2ac>)
 800b148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b14a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b14e:	60bb      	str	r3, [r7, #8]
 800b150:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b152:	2301      	movs	r3, #1
 800b154:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b156:	4b0b      	ldr	r3, [pc, #44]	; (800b184 <HAL_RCC_OscConfig+0x2b8>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d121      	bne.n	800b1a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b162:	4b08      	ldr	r3, [pc, #32]	; (800b184 <HAL_RCC_OscConfig+0x2b8>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	4a07      	ldr	r2, [pc, #28]	; (800b184 <HAL_RCC_OscConfig+0x2b8>)
 800b168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b16c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b16e:	f7fd fe65 	bl	8008e3c <HAL_GetTick>
 800b172:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b174:	e011      	b.n	800b19a <HAL_RCC_OscConfig+0x2ce>
 800b176:	bf00      	nop
 800b178:	40023800 	.word	0x40023800
 800b17c:	42470000 	.word	0x42470000
 800b180:	42470e80 	.word	0x42470e80
 800b184:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b188:	f7fd fe58 	bl	8008e3c <HAL_GetTick>
 800b18c:	4602      	mov	r2, r0
 800b18e:	693b      	ldr	r3, [r7, #16]
 800b190:	1ad3      	subs	r3, r2, r3
 800b192:	2b02      	cmp	r3, #2
 800b194:	d901      	bls.n	800b19a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800b196:	2303      	movs	r3, #3
 800b198:	e106      	b.n	800b3a8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b19a:	4b85      	ldr	r3, [pc, #532]	; (800b3b0 <HAL_RCC_OscConfig+0x4e4>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d0f0      	beq.n	800b188 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	689b      	ldr	r3, [r3, #8]
 800b1aa:	2b01      	cmp	r3, #1
 800b1ac:	d106      	bne.n	800b1bc <HAL_RCC_OscConfig+0x2f0>
 800b1ae:	4b81      	ldr	r3, [pc, #516]	; (800b3b4 <HAL_RCC_OscConfig+0x4e8>)
 800b1b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1b2:	4a80      	ldr	r2, [pc, #512]	; (800b3b4 <HAL_RCC_OscConfig+0x4e8>)
 800b1b4:	f043 0301 	orr.w	r3, r3, #1
 800b1b8:	6713      	str	r3, [r2, #112]	; 0x70
 800b1ba:	e01c      	b.n	800b1f6 <HAL_RCC_OscConfig+0x32a>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	689b      	ldr	r3, [r3, #8]
 800b1c0:	2b05      	cmp	r3, #5
 800b1c2:	d10c      	bne.n	800b1de <HAL_RCC_OscConfig+0x312>
 800b1c4:	4b7b      	ldr	r3, [pc, #492]	; (800b3b4 <HAL_RCC_OscConfig+0x4e8>)
 800b1c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1c8:	4a7a      	ldr	r2, [pc, #488]	; (800b3b4 <HAL_RCC_OscConfig+0x4e8>)
 800b1ca:	f043 0304 	orr.w	r3, r3, #4
 800b1ce:	6713      	str	r3, [r2, #112]	; 0x70
 800b1d0:	4b78      	ldr	r3, [pc, #480]	; (800b3b4 <HAL_RCC_OscConfig+0x4e8>)
 800b1d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1d4:	4a77      	ldr	r2, [pc, #476]	; (800b3b4 <HAL_RCC_OscConfig+0x4e8>)
 800b1d6:	f043 0301 	orr.w	r3, r3, #1
 800b1da:	6713      	str	r3, [r2, #112]	; 0x70
 800b1dc:	e00b      	b.n	800b1f6 <HAL_RCC_OscConfig+0x32a>
 800b1de:	4b75      	ldr	r3, [pc, #468]	; (800b3b4 <HAL_RCC_OscConfig+0x4e8>)
 800b1e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1e2:	4a74      	ldr	r2, [pc, #464]	; (800b3b4 <HAL_RCC_OscConfig+0x4e8>)
 800b1e4:	f023 0301 	bic.w	r3, r3, #1
 800b1e8:	6713      	str	r3, [r2, #112]	; 0x70
 800b1ea:	4b72      	ldr	r3, [pc, #456]	; (800b3b4 <HAL_RCC_OscConfig+0x4e8>)
 800b1ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1ee:	4a71      	ldr	r2, [pc, #452]	; (800b3b4 <HAL_RCC_OscConfig+0x4e8>)
 800b1f0:	f023 0304 	bic.w	r3, r3, #4
 800b1f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	689b      	ldr	r3, [r3, #8]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d015      	beq.n	800b22a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b1fe:	f7fd fe1d 	bl	8008e3c <HAL_GetTick>
 800b202:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b204:	e00a      	b.n	800b21c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b206:	f7fd fe19 	bl	8008e3c <HAL_GetTick>
 800b20a:	4602      	mov	r2, r0
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	1ad3      	subs	r3, r2, r3
 800b210:	f241 3288 	movw	r2, #5000	; 0x1388
 800b214:	4293      	cmp	r3, r2
 800b216:	d901      	bls.n	800b21c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800b218:	2303      	movs	r3, #3
 800b21a:	e0c5      	b.n	800b3a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b21c:	4b65      	ldr	r3, [pc, #404]	; (800b3b4 <HAL_RCC_OscConfig+0x4e8>)
 800b21e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b220:	f003 0302 	and.w	r3, r3, #2
 800b224:	2b00      	cmp	r3, #0
 800b226:	d0ee      	beq.n	800b206 <HAL_RCC_OscConfig+0x33a>
 800b228:	e014      	b.n	800b254 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b22a:	f7fd fe07 	bl	8008e3c <HAL_GetTick>
 800b22e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b230:	e00a      	b.n	800b248 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b232:	f7fd fe03 	bl	8008e3c <HAL_GetTick>
 800b236:	4602      	mov	r2, r0
 800b238:	693b      	ldr	r3, [r7, #16]
 800b23a:	1ad3      	subs	r3, r2, r3
 800b23c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b240:	4293      	cmp	r3, r2
 800b242:	d901      	bls.n	800b248 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800b244:	2303      	movs	r3, #3
 800b246:	e0af      	b.n	800b3a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b248:	4b5a      	ldr	r3, [pc, #360]	; (800b3b4 <HAL_RCC_OscConfig+0x4e8>)
 800b24a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b24c:	f003 0302 	and.w	r3, r3, #2
 800b250:	2b00      	cmp	r3, #0
 800b252:	d1ee      	bne.n	800b232 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b254:	7dfb      	ldrb	r3, [r7, #23]
 800b256:	2b01      	cmp	r3, #1
 800b258:	d105      	bne.n	800b266 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b25a:	4b56      	ldr	r3, [pc, #344]	; (800b3b4 <HAL_RCC_OscConfig+0x4e8>)
 800b25c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b25e:	4a55      	ldr	r2, [pc, #340]	; (800b3b4 <HAL_RCC_OscConfig+0x4e8>)
 800b260:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b264:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	699b      	ldr	r3, [r3, #24]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	f000 809b 	beq.w	800b3a6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b270:	4b50      	ldr	r3, [pc, #320]	; (800b3b4 <HAL_RCC_OscConfig+0x4e8>)
 800b272:	689b      	ldr	r3, [r3, #8]
 800b274:	f003 030c 	and.w	r3, r3, #12
 800b278:	2b08      	cmp	r3, #8
 800b27a:	d05c      	beq.n	800b336 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	699b      	ldr	r3, [r3, #24]
 800b280:	2b02      	cmp	r3, #2
 800b282:	d141      	bne.n	800b308 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b284:	4b4c      	ldr	r3, [pc, #304]	; (800b3b8 <HAL_RCC_OscConfig+0x4ec>)
 800b286:	2200      	movs	r2, #0
 800b288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b28a:	f7fd fdd7 	bl	8008e3c <HAL_GetTick>
 800b28e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b290:	e008      	b.n	800b2a4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b292:	f7fd fdd3 	bl	8008e3c <HAL_GetTick>
 800b296:	4602      	mov	r2, r0
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	1ad3      	subs	r3, r2, r3
 800b29c:	2b02      	cmp	r3, #2
 800b29e:	d901      	bls.n	800b2a4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800b2a0:	2303      	movs	r3, #3
 800b2a2:	e081      	b.n	800b3a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b2a4:	4b43      	ldr	r3, [pc, #268]	; (800b3b4 <HAL_RCC_OscConfig+0x4e8>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d1f0      	bne.n	800b292 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	69da      	ldr	r2, [r3, #28]
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6a1b      	ldr	r3, [r3, #32]
 800b2b8:	431a      	orrs	r2, r3
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2be:	019b      	lsls	r3, r3, #6
 800b2c0:	431a      	orrs	r2, r3
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2c6:	085b      	lsrs	r3, r3, #1
 800b2c8:	3b01      	subs	r3, #1
 800b2ca:	041b      	lsls	r3, r3, #16
 800b2cc:	431a      	orrs	r2, r3
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2d2:	061b      	lsls	r3, r3, #24
 800b2d4:	4937      	ldr	r1, [pc, #220]	; (800b3b4 <HAL_RCC_OscConfig+0x4e8>)
 800b2d6:	4313      	orrs	r3, r2
 800b2d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b2da:	4b37      	ldr	r3, [pc, #220]	; (800b3b8 <HAL_RCC_OscConfig+0x4ec>)
 800b2dc:	2201      	movs	r2, #1
 800b2de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b2e0:	f7fd fdac 	bl	8008e3c <HAL_GetTick>
 800b2e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b2e6:	e008      	b.n	800b2fa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b2e8:	f7fd fda8 	bl	8008e3c <HAL_GetTick>
 800b2ec:	4602      	mov	r2, r0
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	1ad3      	subs	r3, r2, r3
 800b2f2:	2b02      	cmp	r3, #2
 800b2f4:	d901      	bls.n	800b2fa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800b2f6:	2303      	movs	r3, #3
 800b2f8:	e056      	b.n	800b3a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b2fa:	4b2e      	ldr	r3, [pc, #184]	; (800b3b4 <HAL_RCC_OscConfig+0x4e8>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b302:	2b00      	cmp	r3, #0
 800b304:	d0f0      	beq.n	800b2e8 <HAL_RCC_OscConfig+0x41c>
 800b306:	e04e      	b.n	800b3a6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b308:	4b2b      	ldr	r3, [pc, #172]	; (800b3b8 <HAL_RCC_OscConfig+0x4ec>)
 800b30a:	2200      	movs	r2, #0
 800b30c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b30e:	f7fd fd95 	bl	8008e3c <HAL_GetTick>
 800b312:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b314:	e008      	b.n	800b328 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b316:	f7fd fd91 	bl	8008e3c <HAL_GetTick>
 800b31a:	4602      	mov	r2, r0
 800b31c:	693b      	ldr	r3, [r7, #16]
 800b31e:	1ad3      	subs	r3, r2, r3
 800b320:	2b02      	cmp	r3, #2
 800b322:	d901      	bls.n	800b328 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800b324:	2303      	movs	r3, #3
 800b326:	e03f      	b.n	800b3a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b328:	4b22      	ldr	r3, [pc, #136]	; (800b3b4 <HAL_RCC_OscConfig+0x4e8>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b330:	2b00      	cmp	r3, #0
 800b332:	d1f0      	bne.n	800b316 <HAL_RCC_OscConfig+0x44a>
 800b334:	e037      	b.n	800b3a6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	699b      	ldr	r3, [r3, #24]
 800b33a:	2b01      	cmp	r3, #1
 800b33c:	d101      	bne.n	800b342 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800b33e:	2301      	movs	r3, #1
 800b340:	e032      	b.n	800b3a8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b342:	4b1c      	ldr	r3, [pc, #112]	; (800b3b4 <HAL_RCC_OscConfig+0x4e8>)
 800b344:	685b      	ldr	r3, [r3, #4]
 800b346:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	699b      	ldr	r3, [r3, #24]
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	d028      	beq.n	800b3a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b35a:	429a      	cmp	r2, r3
 800b35c:	d121      	bne.n	800b3a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b368:	429a      	cmp	r2, r3
 800b36a:	d11a      	bne.n	800b3a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b36c:	68fa      	ldr	r2, [r7, #12]
 800b36e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b372:	4013      	ands	r3, r2
 800b374:	687a      	ldr	r2, [r7, #4]
 800b376:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b378:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b37a:	4293      	cmp	r3, r2
 800b37c:	d111      	bne.n	800b3a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b388:	085b      	lsrs	r3, r3, #1
 800b38a:	3b01      	subs	r3, #1
 800b38c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b38e:	429a      	cmp	r2, r3
 800b390:	d107      	bne.n	800b3a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b39c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b39e:	429a      	cmp	r2, r3
 800b3a0:	d001      	beq.n	800b3a6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	e000      	b.n	800b3a8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800b3a6:	2300      	movs	r3, #0
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3718      	adds	r7, #24
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}
 800b3b0:	40007000 	.word	0x40007000
 800b3b4:	40023800 	.word	0x40023800
 800b3b8:	42470060 	.word	0x42470060

0800b3bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b084      	sub	sp, #16
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
 800b3c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d101      	bne.n	800b3d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	e0cc      	b.n	800b56a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b3d0:	4b68      	ldr	r3, [pc, #416]	; (800b574 <HAL_RCC_ClockConfig+0x1b8>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	f003 030f 	and.w	r3, r3, #15
 800b3d8:	683a      	ldr	r2, [r7, #0]
 800b3da:	429a      	cmp	r2, r3
 800b3dc:	d90c      	bls.n	800b3f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b3de:	4b65      	ldr	r3, [pc, #404]	; (800b574 <HAL_RCC_ClockConfig+0x1b8>)
 800b3e0:	683a      	ldr	r2, [r7, #0]
 800b3e2:	b2d2      	uxtb	r2, r2
 800b3e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b3e6:	4b63      	ldr	r3, [pc, #396]	; (800b574 <HAL_RCC_ClockConfig+0x1b8>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f003 030f 	and.w	r3, r3, #15
 800b3ee:	683a      	ldr	r2, [r7, #0]
 800b3f0:	429a      	cmp	r2, r3
 800b3f2:	d001      	beq.n	800b3f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	e0b8      	b.n	800b56a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	f003 0302 	and.w	r3, r3, #2
 800b400:	2b00      	cmp	r3, #0
 800b402:	d020      	beq.n	800b446 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	f003 0304 	and.w	r3, r3, #4
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d005      	beq.n	800b41c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b410:	4b59      	ldr	r3, [pc, #356]	; (800b578 <HAL_RCC_ClockConfig+0x1bc>)
 800b412:	689b      	ldr	r3, [r3, #8]
 800b414:	4a58      	ldr	r2, [pc, #352]	; (800b578 <HAL_RCC_ClockConfig+0x1bc>)
 800b416:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b41a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f003 0308 	and.w	r3, r3, #8
 800b424:	2b00      	cmp	r3, #0
 800b426:	d005      	beq.n	800b434 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b428:	4b53      	ldr	r3, [pc, #332]	; (800b578 <HAL_RCC_ClockConfig+0x1bc>)
 800b42a:	689b      	ldr	r3, [r3, #8]
 800b42c:	4a52      	ldr	r2, [pc, #328]	; (800b578 <HAL_RCC_ClockConfig+0x1bc>)
 800b42e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b432:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b434:	4b50      	ldr	r3, [pc, #320]	; (800b578 <HAL_RCC_ClockConfig+0x1bc>)
 800b436:	689b      	ldr	r3, [r3, #8]
 800b438:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	689b      	ldr	r3, [r3, #8]
 800b440:	494d      	ldr	r1, [pc, #308]	; (800b578 <HAL_RCC_ClockConfig+0x1bc>)
 800b442:	4313      	orrs	r3, r2
 800b444:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f003 0301 	and.w	r3, r3, #1
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d044      	beq.n	800b4dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	685b      	ldr	r3, [r3, #4]
 800b456:	2b01      	cmp	r3, #1
 800b458:	d107      	bne.n	800b46a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b45a:	4b47      	ldr	r3, [pc, #284]	; (800b578 <HAL_RCC_ClockConfig+0x1bc>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b462:	2b00      	cmp	r3, #0
 800b464:	d119      	bne.n	800b49a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b466:	2301      	movs	r3, #1
 800b468:	e07f      	b.n	800b56a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	685b      	ldr	r3, [r3, #4]
 800b46e:	2b02      	cmp	r3, #2
 800b470:	d003      	beq.n	800b47a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b476:	2b03      	cmp	r3, #3
 800b478:	d107      	bne.n	800b48a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b47a:	4b3f      	ldr	r3, [pc, #252]	; (800b578 <HAL_RCC_ClockConfig+0x1bc>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b482:	2b00      	cmp	r3, #0
 800b484:	d109      	bne.n	800b49a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b486:	2301      	movs	r3, #1
 800b488:	e06f      	b.n	800b56a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b48a:	4b3b      	ldr	r3, [pc, #236]	; (800b578 <HAL_RCC_ClockConfig+0x1bc>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f003 0302 	and.w	r3, r3, #2
 800b492:	2b00      	cmp	r3, #0
 800b494:	d101      	bne.n	800b49a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b496:	2301      	movs	r3, #1
 800b498:	e067      	b.n	800b56a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b49a:	4b37      	ldr	r3, [pc, #220]	; (800b578 <HAL_RCC_ClockConfig+0x1bc>)
 800b49c:	689b      	ldr	r3, [r3, #8]
 800b49e:	f023 0203 	bic.w	r2, r3, #3
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	685b      	ldr	r3, [r3, #4]
 800b4a6:	4934      	ldr	r1, [pc, #208]	; (800b578 <HAL_RCC_ClockConfig+0x1bc>)
 800b4a8:	4313      	orrs	r3, r2
 800b4aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b4ac:	f7fd fcc6 	bl	8008e3c <HAL_GetTick>
 800b4b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b4b2:	e00a      	b.n	800b4ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b4b4:	f7fd fcc2 	bl	8008e3c <HAL_GetTick>
 800b4b8:	4602      	mov	r2, r0
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	1ad3      	subs	r3, r2, r3
 800b4be:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	d901      	bls.n	800b4ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b4c6:	2303      	movs	r3, #3
 800b4c8:	e04f      	b.n	800b56a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b4ca:	4b2b      	ldr	r3, [pc, #172]	; (800b578 <HAL_RCC_ClockConfig+0x1bc>)
 800b4cc:	689b      	ldr	r3, [r3, #8]
 800b4ce:	f003 020c 	and.w	r2, r3, #12
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	685b      	ldr	r3, [r3, #4]
 800b4d6:	009b      	lsls	r3, r3, #2
 800b4d8:	429a      	cmp	r2, r3
 800b4da:	d1eb      	bne.n	800b4b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b4dc:	4b25      	ldr	r3, [pc, #148]	; (800b574 <HAL_RCC_ClockConfig+0x1b8>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f003 030f 	and.w	r3, r3, #15
 800b4e4:	683a      	ldr	r2, [r7, #0]
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	d20c      	bcs.n	800b504 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b4ea:	4b22      	ldr	r3, [pc, #136]	; (800b574 <HAL_RCC_ClockConfig+0x1b8>)
 800b4ec:	683a      	ldr	r2, [r7, #0]
 800b4ee:	b2d2      	uxtb	r2, r2
 800b4f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b4f2:	4b20      	ldr	r3, [pc, #128]	; (800b574 <HAL_RCC_ClockConfig+0x1b8>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	f003 030f 	and.w	r3, r3, #15
 800b4fa:	683a      	ldr	r2, [r7, #0]
 800b4fc:	429a      	cmp	r2, r3
 800b4fe:	d001      	beq.n	800b504 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b500:	2301      	movs	r3, #1
 800b502:	e032      	b.n	800b56a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f003 0304 	and.w	r3, r3, #4
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d008      	beq.n	800b522 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b510:	4b19      	ldr	r3, [pc, #100]	; (800b578 <HAL_RCC_ClockConfig+0x1bc>)
 800b512:	689b      	ldr	r3, [r3, #8]
 800b514:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	68db      	ldr	r3, [r3, #12]
 800b51c:	4916      	ldr	r1, [pc, #88]	; (800b578 <HAL_RCC_ClockConfig+0x1bc>)
 800b51e:	4313      	orrs	r3, r2
 800b520:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f003 0308 	and.w	r3, r3, #8
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d009      	beq.n	800b542 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b52e:	4b12      	ldr	r3, [pc, #72]	; (800b578 <HAL_RCC_ClockConfig+0x1bc>)
 800b530:	689b      	ldr	r3, [r3, #8]
 800b532:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	691b      	ldr	r3, [r3, #16]
 800b53a:	00db      	lsls	r3, r3, #3
 800b53c:	490e      	ldr	r1, [pc, #56]	; (800b578 <HAL_RCC_ClockConfig+0x1bc>)
 800b53e:	4313      	orrs	r3, r2
 800b540:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b542:	f000 f821 	bl	800b588 <HAL_RCC_GetSysClockFreq>
 800b546:	4602      	mov	r2, r0
 800b548:	4b0b      	ldr	r3, [pc, #44]	; (800b578 <HAL_RCC_ClockConfig+0x1bc>)
 800b54a:	689b      	ldr	r3, [r3, #8]
 800b54c:	091b      	lsrs	r3, r3, #4
 800b54e:	f003 030f 	and.w	r3, r3, #15
 800b552:	490a      	ldr	r1, [pc, #40]	; (800b57c <HAL_RCC_ClockConfig+0x1c0>)
 800b554:	5ccb      	ldrb	r3, [r1, r3]
 800b556:	fa22 f303 	lsr.w	r3, r2, r3
 800b55a:	4a09      	ldr	r2, [pc, #36]	; (800b580 <HAL_RCC_ClockConfig+0x1c4>)
 800b55c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b55e:	4b09      	ldr	r3, [pc, #36]	; (800b584 <HAL_RCC_ClockConfig+0x1c8>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	4618      	mov	r0, r3
 800b564:	f7f7 fe56 	bl	8003214 <HAL_InitTick>

  return HAL_OK;
 800b568:	2300      	movs	r3, #0
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	3710      	adds	r7, #16
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}
 800b572:	bf00      	nop
 800b574:	40023c00 	.word	0x40023c00
 800b578:	40023800 	.word	0x40023800
 800b57c:	0801a004 	.word	0x0801a004
 800b580:	20000088 	.word	0x20000088
 800b584:	200000c8 	.word	0x200000c8

0800b588 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b588:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b58c:	b084      	sub	sp, #16
 800b58e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b590:	2300      	movs	r3, #0
 800b592:	607b      	str	r3, [r7, #4]
 800b594:	2300      	movs	r3, #0
 800b596:	60fb      	str	r3, [r7, #12]
 800b598:	2300      	movs	r3, #0
 800b59a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800b59c:	2300      	movs	r3, #0
 800b59e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b5a0:	4b67      	ldr	r3, [pc, #412]	; (800b740 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b5a2:	689b      	ldr	r3, [r3, #8]
 800b5a4:	f003 030c 	and.w	r3, r3, #12
 800b5a8:	2b08      	cmp	r3, #8
 800b5aa:	d00d      	beq.n	800b5c8 <HAL_RCC_GetSysClockFreq+0x40>
 800b5ac:	2b08      	cmp	r3, #8
 800b5ae:	f200 80bd 	bhi.w	800b72c <HAL_RCC_GetSysClockFreq+0x1a4>
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d002      	beq.n	800b5bc <HAL_RCC_GetSysClockFreq+0x34>
 800b5b6:	2b04      	cmp	r3, #4
 800b5b8:	d003      	beq.n	800b5c2 <HAL_RCC_GetSysClockFreq+0x3a>
 800b5ba:	e0b7      	b.n	800b72c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b5bc:	4b61      	ldr	r3, [pc, #388]	; (800b744 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800b5be:	60bb      	str	r3, [r7, #8]
       break;
 800b5c0:	e0b7      	b.n	800b732 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b5c2:	4b60      	ldr	r3, [pc, #384]	; (800b744 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800b5c4:	60bb      	str	r3, [r7, #8]
      break;
 800b5c6:	e0b4      	b.n	800b732 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b5c8:	4b5d      	ldr	r3, [pc, #372]	; (800b740 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b5ca:	685b      	ldr	r3, [r3, #4]
 800b5cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b5d0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b5d2:	4b5b      	ldr	r3, [pc, #364]	; (800b740 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b5d4:	685b      	ldr	r3, [r3, #4]
 800b5d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d04d      	beq.n	800b67a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b5de:	4b58      	ldr	r3, [pc, #352]	; (800b740 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b5e0:	685b      	ldr	r3, [r3, #4]
 800b5e2:	099b      	lsrs	r3, r3, #6
 800b5e4:	461a      	mov	r2, r3
 800b5e6:	f04f 0300 	mov.w	r3, #0
 800b5ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b5ee:	f04f 0100 	mov.w	r1, #0
 800b5f2:	ea02 0800 	and.w	r8, r2, r0
 800b5f6:	ea03 0901 	and.w	r9, r3, r1
 800b5fa:	4640      	mov	r0, r8
 800b5fc:	4649      	mov	r1, r9
 800b5fe:	f04f 0200 	mov.w	r2, #0
 800b602:	f04f 0300 	mov.w	r3, #0
 800b606:	014b      	lsls	r3, r1, #5
 800b608:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b60c:	0142      	lsls	r2, r0, #5
 800b60e:	4610      	mov	r0, r2
 800b610:	4619      	mov	r1, r3
 800b612:	ebb0 0008 	subs.w	r0, r0, r8
 800b616:	eb61 0109 	sbc.w	r1, r1, r9
 800b61a:	f04f 0200 	mov.w	r2, #0
 800b61e:	f04f 0300 	mov.w	r3, #0
 800b622:	018b      	lsls	r3, r1, #6
 800b624:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b628:	0182      	lsls	r2, r0, #6
 800b62a:	1a12      	subs	r2, r2, r0
 800b62c:	eb63 0301 	sbc.w	r3, r3, r1
 800b630:	f04f 0000 	mov.w	r0, #0
 800b634:	f04f 0100 	mov.w	r1, #0
 800b638:	00d9      	lsls	r1, r3, #3
 800b63a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b63e:	00d0      	lsls	r0, r2, #3
 800b640:	4602      	mov	r2, r0
 800b642:	460b      	mov	r3, r1
 800b644:	eb12 0208 	adds.w	r2, r2, r8
 800b648:	eb43 0309 	adc.w	r3, r3, r9
 800b64c:	f04f 0000 	mov.w	r0, #0
 800b650:	f04f 0100 	mov.w	r1, #0
 800b654:	0299      	lsls	r1, r3, #10
 800b656:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800b65a:	0290      	lsls	r0, r2, #10
 800b65c:	4602      	mov	r2, r0
 800b65e:	460b      	mov	r3, r1
 800b660:	4610      	mov	r0, r2
 800b662:	4619      	mov	r1, r3
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	461a      	mov	r2, r3
 800b668:	f04f 0300 	mov.w	r3, #0
 800b66c:	f7f5 fb2c 	bl	8000cc8 <__aeabi_uldivmod>
 800b670:	4602      	mov	r2, r0
 800b672:	460b      	mov	r3, r1
 800b674:	4613      	mov	r3, r2
 800b676:	60fb      	str	r3, [r7, #12]
 800b678:	e04a      	b.n	800b710 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b67a:	4b31      	ldr	r3, [pc, #196]	; (800b740 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b67c:	685b      	ldr	r3, [r3, #4]
 800b67e:	099b      	lsrs	r3, r3, #6
 800b680:	461a      	mov	r2, r3
 800b682:	f04f 0300 	mov.w	r3, #0
 800b686:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b68a:	f04f 0100 	mov.w	r1, #0
 800b68e:	ea02 0400 	and.w	r4, r2, r0
 800b692:	ea03 0501 	and.w	r5, r3, r1
 800b696:	4620      	mov	r0, r4
 800b698:	4629      	mov	r1, r5
 800b69a:	f04f 0200 	mov.w	r2, #0
 800b69e:	f04f 0300 	mov.w	r3, #0
 800b6a2:	014b      	lsls	r3, r1, #5
 800b6a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b6a8:	0142      	lsls	r2, r0, #5
 800b6aa:	4610      	mov	r0, r2
 800b6ac:	4619      	mov	r1, r3
 800b6ae:	1b00      	subs	r0, r0, r4
 800b6b0:	eb61 0105 	sbc.w	r1, r1, r5
 800b6b4:	f04f 0200 	mov.w	r2, #0
 800b6b8:	f04f 0300 	mov.w	r3, #0
 800b6bc:	018b      	lsls	r3, r1, #6
 800b6be:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b6c2:	0182      	lsls	r2, r0, #6
 800b6c4:	1a12      	subs	r2, r2, r0
 800b6c6:	eb63 0301 	sbc.w	r3, r3, r1
 800b6ca:	f04f 0000 	mov.w	r0, #0
 800b6ce:	f04f 0100 	mov.w	r1, #0
 800b6d2:	00d9      	lsls	r1, r3, #3
 800b6d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b6d8:	00d0      	lsls	r0, r2, #3
 800b6da:	4602      	mov	r2, r0
 800b6dc:	460b      	mov	r3, r1
 800b6de:	1912      	adds	r2, r2, r4
 800b6e0:	eb45 0303 	adc.w	r3, r5, r3
 800b6e4:	f04f 0000 	mov.w	r0, #0
 800b6e8:	f04f 0100 	mov.w	r1, #0
 800b6ec:	0299      	lsls	r1, r3, #10
 800b6ee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800b6f2:	0290      	lsls	r0, r2, #10
 800b6f4:	4602      	mov	r2, r0
 800b6f6:	460b      	mov	r3, r1
 800b6f8:	4610      	mov	r0, r2
 800b6fa:	4619      	mov	r1, r3
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	461a      	mov	r2, r3
 800b700:	f04f 0300 	mov.w	r3, #0
 800b704:	f7f5 fae0 	bl	8000cc8 <__aeabi_uldivmod>
 800b708:	4602      	mov	r2, r0
 800b70a:	460b      	mov	r3, r1
 800b70c:	4613      	mov	r3, r2
 800b70e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b710:	4b0b      	ldr	r3, [pc, #44]	; (800b740 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b712:	685b      	ldr	r3, [r3, #4]
 800b714:	0c1b      	lsrs	r3, r3, #16
 800b716:	f003 0303 	and.w	r3, r3, #3
 800b71a:	3301      	adds	r3, #1
 800b71c:	005b      	lsls	r3, r3, #1
 800b71e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800b720:	68fa      	ldr	r2, [r7, #12]
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	fbb2 f3f3 	udiv	r3, r2, r3
 800b728:	60bb      	str	r3, [r7, #8]
      break;
 800b72a:	e002      	b.n	800b732 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b72c:	4b05      	ldr	r3, [pc, #20]	; (800b744 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800b72e:	60bb      	str	r3, [r7, #8]
      break;
 800b730:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b732:	68bb      	ldr	r3, [r7, #8]
}
 800b734:	4618      	mov	r0, r3
 800b736:	3710      	adds	r7, #16
 800b738:	46bd      	mov	sp, r7
 800b73a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b73e:	bf00      	nop
 800b740:	40023800 	.word	0x40023800
 800b744:	00f42400 	.word	0x00f42400

0800b748 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b748:	b480      	push	{r7}
 800b74a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b74c:	4b03      	ldr	r3, [pc, #12]	; (800b75c <HAL_RCC_GetHCLKFreq+0x14>)
 800b74e:	681b      	ldr	r3, [r3, #0]
}
 800b750:	4618      	mov	r0, r3
 800b752:	46bd      	mov	sp, r7
 800b754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b758:	4770      	bx	lr
 800b75a:	bf00      	nop
 800b75c:	20000088 	.word	0x20000088

0800b760 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b764:	f7ff fff0 	bl	800b748 <HAL_RCC_GetHCLKFreq>
 800b768:	4602      	mov	r2, r0
 800b76a:	4b05      	ldr	r3, [pc, #20]	; (800b780 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b76c:	689b      	ldr	r3, [r3, #8]
 800b76e:	0a9b      	lsrs	r3, r3, #10
 800b770:	f003 0307 	and.w	r3, r3, #7
 800b774:	4903      	ldr	r1, [pc, #12]	; (800b784 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b776:	5ccb      	ldrb	r3, [r1, r3]
 800b778:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	bd80      	pop	{r7, pc}
 800b780:	40023800 	.word	0x40023800
 800b784:	0801a014 	.word	0x0801a014

0800b788 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b78c:	f7ff ffdc 	bl	800b748 <HAL_RCC_GetHCLKFreq>
 800b790:	4602      	mov	r2, r0
 800b792:	4b05      	ldr	r3, [pc, #20]	; (800b7a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b794:	689b      	ldr	r3, [r3, #8]
 800b796:	0b5b      	lsrs	r3, r3, #13
 800b798:	f003 0307 	and.w	r3, r3, #7
 800b79c:	4903      	ldr	r1, [pc, #12]	; (800b7ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800b79e:	5ccb      	ldrb	r3, [r1, r3]
 800b7a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	bd80      	pop	{r7, pc}
 800b7a8:	40023800 	.word	0x40023800
 800b7ac:	0801a014 	.word	0x0801a014

0800b7b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b083      	sub	sp, #12
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	220f      	movs	r2, #15
 800b7be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b7c0:	4b12      	ldr	r3, [pc, #72]	; (800b80c <HAL_RCC_GetClockConfig+0x5c>)
 800b7c2:	689b      	ldr	r3, [r3, #8]
 800b7c4:	f003 0203 	and.w	r2, r3, #3
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800b7cc:	4b0f      	ldr	r3, [pc, #60]	; (800b80c <HAL_RCC_GetClockConfig+0x5c>)
 800b7ce:	689b      	ldr	r3, [r3, #8]
 800b7d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800b7d8:	4b0c      	ldr	r3, [pc, #48]	; (800b80c <HAL_RCC_GetClockConfig+0x5c>)
 800b7da:	689b      	ldr	r3, [r3, #8]
 800b7dc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800b7e4:	4b09      	ldr	r3, [pc, #36]	; (800b80c <HAL_RCC_GetClockConfig+0x5c>)
 800b7e6:	689b      	ldr	r3, [r3, #8]
 800b7e8:	08db      	lsrs	r3, r3, #3
 800b7ea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b7f2:	4b07      	ldr	r3, [pc, #28]	; (800b810 <HAL_RCC_GetClockConfig+0x60>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	f003 020f 	and.w	r2, r3, #15
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	601a      	str	r2, [r3, #0]
}
 800b7fe:	bf00      	nop
 800b800:	370c      	adds	r7, #12
 800b802:	46bd      	mov	sp, r7
 800b804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b808:	4770      	bx	lr
 800b80a:	bf00      	nop
 800b80c:	40023800 	.word	0x40023800
 800b810:	40023c00 	.word	0x40023c00

0800b814 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b086      	sub	sp, #24
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b81c:	2300      	movs	r3, #0
 800b81e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800b820:	2300      	movs	r3, #0
 800b822:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f003 0301 	and.w	r3, r3, #1
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d10b      	bne.n	800b848 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d105      	bne.n	800b848 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800b844:	2b00      	cmp	r3, #0
 800b846:	d075      	beq.n	800b934 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b848:	4bad      	ldr	r3, [pc, #692]	; (800bb00 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800b84a:	2200      	movs	r2, #0
 800b84c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b84e:	f7fd faf5 	bl	8008e3c <HAL_GetTick>
 800b852:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b854:	e008      	b.n	800b868 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b856:	f7fd faf1 	bl	8008e3c <HAL_GetTick>
 800b85a:	4602      	mov	r2, r0
 800b85c:	697b      	ldr	r3, [r7, #20]
 800b85e:	1ad3      	subs	r3, r2, r3
 800b860:	2b02      	cmp	r3, #2
 800b862:	d901      	bls.n	800b868 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b864:	2303      	movs	r3, #3
 800b866:	e18b      	b.n	800bb80 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b868:	4ba6      	ldr	r3, [pc, #664]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b870:	2b00      	cmp	r3, #0
 800b872:	d1f0      	bne.n	800b856 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f003 0301 	and.w	r3, r3, #1
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d009      	beq.n	800b894 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	685b      	ldr	r3, [r3, #4]
 800b884:	019a      	lsls	r2, r3, #6
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	689b      	ldr	r3, [r3, #8]
 800b88a:	071b      	lsls	r3, r3, #28
 800b88c:	499d      	ldr	r1, [pc, #628]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b88e:	4313      	orrs	r3, r2
 800b890:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	f003 0302 	and.w	r3, r3, #2
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d01f      	beq.n	800b8e0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b8a0:	4b98      	ldr	r3, [pc, #608]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b8a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b8a6:	0f1b      	lsrs	r3, r3, #28
 800b8a8:	f003 0307 	and.w	r3, r3, #7
 800b8ac:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	685b      	ldr	r3, [r3, #4]
 800b8b2:	019a      	lsls	r2, r3, #6
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	68db      	ldr	r3, [r3, #12]
 800b8b8:	061b      	lsls	r3, r3, #24
 800b8ba:	431a      	orrs	r2, r3
 800b8bc:	693b      	ldr	r3, [r7, #16]
 800b8be:	071b      	lsls	r3, r3, #28
 800b8c0:	4990      	ldr	r1, [pc, #576]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b8c2:	4313      	orrs	r3, r2
 800b8c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800b8c8:	4b8e      	ldr	r3, [pc, #568]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b8ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b8ce:	f023 021f 	bic.w	r2, r3, #31
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	69db      	ldr	r3, [r3, #28]
 800b8d6:	3b01      	subs	r3, #1
 800b8d8:	498a      	ldr	r1, [pc, #552]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d00d      	beq.n	800b908 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	685b      	ldr	r3, [r3, #4]
 800b8f0:	019a      	lsls	r2, r3, #6
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	68db      	ldr	r3, [r3, #12]
 800b8f6:	061b      	lsls	r3, r3, #24
 800b8f8:	431a      	orrs	r2, r3
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	689b      	ldr	r3, [r3, #8]
 800b8fe:	071b      	lsls	r3, r3, #28
 800b900:	4980      	ldr	r1, [pc, #512]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b902:	4313      	orrs	r3, r2
 800b904:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b908:	4b7d      	ldr	r3, [pc, #500]	; (800bb00 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800b90a:	2201      	movs	r2, #1
 800b90c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b90e:	f7fd fa95 	bl	8008e3c <HAL_GetTick>
 800b912:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b914:	e008      	b.n	800b928 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b916:	f7fd fa91 	bl	8008e3c <HAL_GetTick>
 800b91a:	4602      	mov	r2, r0
 800b91c:	697b      	ldr	r3, [r7, #20]
 800b91e:	1ad3      	subs	r3, r2, r3
 800b920:	2b02      	cmp	r3, #2
 800b922:	d901      	bls.n	800b928 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b924:	2303      	movs	r3, #3
 800b926:	e12b      	b.n	800bb80 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b928:	4b76      	ldr	r3, [pc, #472]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b930:	2b00      	cmp	r3, #0
 800b932:	d0f0      	beq.n	800b916 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f003 0304 	and.w	r3, r3, #4
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d105      	bne.n	800b94c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d079      	beq.n	800ba40 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800b94c:	4b6e      	ldr	r3, [pc, #440]	; (800bb08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b94e:	2200      	movs	r2, #0
 800b950:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b952:	f7fd fa73 	bl	8008e3c <HAL_GetTick>
 800b956:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b958:	e008      	b.n	800b96c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800b95a:	f7fd fa6f 	bl	8008e3c <HAL_GetTick>
 800b95e:	4602      	mov	r2, r0
 800b960:	697b      	ldr	r3, [r7, #20]
 800b962:	1ad3      	subs	r3, r2, r3
 800b964:	2b02      	cmp	r3, #2
 800b966:	d901      	bls.n	800b96c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b968:	2303      	movs	r3, #3
 800b96a:	e109      	b.n	800bb80 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b96c:	4b65      	ldr	r3, [pc, #404]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b974:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b978:	d0ef      	beq.n	800b95a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f003 0304 	and.w	r3, r3, #4
 800b982:	2b00      	cmp	r3, #0
 800b984:	d020      	beq.n	800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b986:	4b5f      	ldr	r3, [pc, #380]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b98c:	0f1b      	lsrs	r3, r3, #28
 800b98e:	f003 0307 	and.w	r3, r3, #7
 800b992:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	691b      	ldr	r3, [r3, #16]
 800b998:	019a      	lsls	r2, r3, #6
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	695b      	ldr	r3, [r3, #20]
 800b99e:	061b      	lsls	r3, r3, #24
 800b9a0:	431a      	orrs	r2, r3
 800b9a2:	693b      	ldr	r3, [r7, #16]
 800b9a4:	071b      	lsls	r3, r3, #28
 800b9a6:	4957      	ldr	r1, [pc, #348]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b9a8:	4313      	orrs	r3, r2
 800b9aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800b9ae:	4b55      	ldr	r3, [pc, #340]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b9b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b9b4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	6a1b      	ldr	r3, [r3, #32]
 800b9bc:	3b01      	subs	r3, #1
 800b9be:	021b      	lsls	r3, r3, #8
 800b9c0:	4950      	ldr	r1, [pc, #320]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b9c2:	4313      	orrs	r3, r2
 800b9c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	f003 0308 	and.w	r3, r3, #8
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d01e      	beq.n	800ba12 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b9d4:	4b4b      	ldr	r3, [pc, #300]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b9d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9da:	0e1b      	lsrs	r3, r3, #24
 800b9dc:	f003 030f 	and.w	r3, r3, #15
 800b9e0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	691b      	ldr	r3, [r3, #16]
 800b9e6:	019a      	lsls	r2, r3, #6
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	061b      	lsls	r3, r3, #24
 800b9ec:	431a      	orrs	r2, r3
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	699b      	ldr	r3, [r3, #24]
 800b9f2:	071b      	lsls	r3, r3, #28
 800b9f4:	4943      	ldr	r1, [pc, #268]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b9f6:	4313      	orrs	r3, r2
 800b9f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800b9fc:	4b41      	ldr	r3, [pc, #260]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b9fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba02:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba0a:	493e      	ldr	r1, [pc, #248]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ba0c:	4313      	orrs	r3, r2
 800ba0e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800ba12:	4b3d      	ldr	r3, [pc, #244]	; (800bb08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ba14:	2201      	movs	r2, #1
 800ba16:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800ba18:	f7fd fa10 	bl	8008e3c <HAL_GetTick>
 800ba1c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800ba1e:	e008      	b.n	800ba32 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800ba20:	f7fd fa0c 	bl	8008e3c <HAL_GetTick>
 800ba24:	4602      	mov	r2, r0
 800ba26:	697b      	ldr	r3, [r7, #20]
 800ba28:	1ad3      	subs	r3, r2, r3
 800ba2a:	2b02      	cmp	r3, #2
 800ba2c:	d901      	bls.n	800ba32 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ba2e:	2303      	movs	r3, #3
 800ba30:	e0a6      	b.n	800bb80 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800ba32:	4b34      	ldr	r3, [pc, #208]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ba3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba3e:	d1ef      	bne.n	800ba20 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f003 0320 	and.w	r3, r3, #32
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	f000 808d 	beq.w	800bb68 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800ba4e:	2300      	movs	r3, #0
 800ba50:	60fb      	str	r3, [r7, #12]
 800ba52:	4b2c      	ldr	r3, [pc, #176]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ba54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba56:	4a2b      	ldr	r2, [pc, #172]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ba58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba5c:	6413      	str	r3, [r2, #64]	; 0x40
 800ba5e:	4b29      	ldr	r3, [pc, #164]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ba60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba66:	60fb      	str	r3, [r7, #12]
 800ba68:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800ba6a:	4b28      	ldr	r3, [pc, #160]	; (800bb0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	4a27      	ldr	r2, [pc, #156]	; (800bb0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800ba70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba74:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ba76:	f7fd f9e1 	bl	8008e3c <HAL_GetTick>
 800ba7a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800ba7c:	e008      	b.n	800ba90 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800ba7e:	f7fd f9dd 	bl	8008e3c <HAL_GetTick>
 800ba82:	4602      	mov	r2, r0
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	1ad3      	subs	r3, r2, r3
 800ba88:	2b02      	cmp	r3, #2
 800ba8a:	d901      	bls.n	800ba90 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 800ba8c:	2303      	movs	r3, #3
 800ba8e:	e077      	b.n	800bb80 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800ba90:	4b1e      	ldr	r3, [pc, #120]	; (800bb0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d0f0      	beq.n	800ba7e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800ba9c:	4b19      	ldr	r3, [pc, #100]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ba9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800baa0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800baa4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800baa6:	693b      	ldr	r3, [r7, #16]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d039      	beq.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bab0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bab4:	693a      	ldr	r2, [r7, #16]
 800bab6:	429a      	cmp	r2, r3
 800bab8:	d032      	beq.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800baba:	4b12      	ldr	r3, [pc, #72]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800babc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800babe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bac2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800bac4:	4b12      	ldr	r3, [pc, #72]	; (800bb10 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800bac6:	2201      	movs	r2, #1
 800bac8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800baca:	4b11      	ldr	r3, [pc, #68]	; (800bb10 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800bacc:	2200      	movs	r2, #0
 800bace:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800bad0:	4a0c      	ldr	r2, [pc, #48]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bad2:	693b      	ldr	r3, [r7, #16]
 800bad4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800bad6:	4b0b      	ldr	r3, [pc, #44]	; (800bb04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bada:	f003 0301 	and.w	r3, r3, #1
 800bade:	2b01      	cmp	r3, #1
 800bae0:	d11e      	bne.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800bae2:	f7fd f9ab 	bl	8008e3c <HAL_GetTick>
 800bae6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bae8:	e014      	b.n	800bb14 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800baea:	f7fd f9a7 	bl	8008e3c <HAL_GetTick>
 800baee:	4602      	mov	r2, r0
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	1ad3      	subs	r3, r2, r3
 800baf4:	f241 3288 	movw	r2, #5000	; 0x1388
 800baf8:	4293      	cmp	r3, r2
 800bafa:	d90b      	bls.n	800bb14 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 800bafc:	2303      	movs	r3, #3
 800bafe:	e03f      	b.n	800bb80 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800bb00:	42470068 	.word	0x42470068
 800bb04:	40023800 	.word	0x40023800
 800bb08:	42470070 	.word	0x42470070
 800bb0c:	40007000 	.word	0x40007000
 800bb10:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bb14:	4b1c      	ldr	r3, [pc, #112]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800bb16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb18:	f003 0302 	and.w	r3, r3, #2
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d0e4      	beq.n	800baea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bb2c:	d10d      	bne.n	800bb4a <HAL_RCCEx_PeriphCLKConfig+0x336>
 800bb2e:	4b16      	ldr	r3, [pc, #88]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800bb30:	689b      	ldr	r3, [r3, #8]
 800bb32:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb3a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bb3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb42:	4911      	ldr	r1, [pc, #68]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800bb44:	4313      	orrs	r3, r2
 800bb46:	608b      	str	r3, [r1, #8]
 800bb48:	e005      	b.n	800bb56 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800bb4a:	4b0f      	ldr	r3, [pc, #60]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800bb4c:	689b      	ldr	r3, [r3, #8]
 800bb4e:	4a0e      	ldr	r2, [pc, #56]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800bb50:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800bb54:	6093      	str	r3, [r2, #8]
 800bb56:	4b0c      	ldr	r3, [pc, #48]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800bb58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bb62:	4909      	ldr	r1, [pc, #36]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800bb64:	4313      	orrs	r3, r2
 800bb66:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f003 0310 	and.w	r3, r3, #16
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d004      	beq.n	800bb7e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800bb7a:	4b04      	ldr	r3, [pc, #16]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800bb7c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800bb7e:	2300      	movs	r3, #0
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	3718      	adds	r7, #24
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}
 800bb88:	40023800 	.word	0x40023800
 800bb8c:	424711e0 	.word	0x424711e0

0800bb90 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b082      	sub	sp, #8
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d101      	bne.n	800bba2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800bb9e:	2301      	movs	r3, #1
 800bba0:	e083      	b.n	800bcaa <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	7f5b      	ldrb	r3, [r3, #29]
 800bba6:	b2db      	uxtb	r3, r3
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d105      	bne.n	800bbb8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2200      	movs	r2, #0
 800bbb0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f7f6 ff4c 	bl	8002a50 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2202      	movs	r2, #2
 800bbbc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	22ca      	movs	r2, #202	; 0xca
 800bbc4:	625a      	str	r2, [r3, #36]	; 0x24
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	2253      	movs	r2, #83	; 0x53
 800bbcc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	f000 fc30 	bl	800c434 <RTC_EnterInitMode>
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d008      	beq.n	800bbec <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	22ff      	movs	r2, #255	; 0xff
 800bbe0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2204      	movs	r2, #4
 800bbe6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800bbe8:	2301      	movs	r3, #1
 800bbea:	e05e      	b.n	800bcaa <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	689b      	ldr	r3, [r3, #8]
 800bbf2:	687a      	ldr	r2, [r7, #4]
 800bbf4:	6812      	ldr	r2, [r2, #0]
 800bbf6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bbfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bbfe:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	6899      	ldr	r1, [r3, #8]
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	685a      	ldr	r2, [r3, #4]
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	691b      	ldr	r3, [r3, #16]
 800bc0e:	431a      	orrs	r2, r3
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	695b      	ldr	r3, [r3, #20]
 800bc14:	431a      	orrs	r2, r3
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	430a      	orrs	r2, r1
 800bc1c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	687a      	ldr	r2, [r7, #4]
 800bc24:	68d2      	ldr	r2, [r2, #12]
 800bc26:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	6919      	ldr	r1, [r3, #16]
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	689b      	ldr	r3, [r3, #8]
 800bc32:	041a      	lsls	r2, r3, #16
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	430a      	orrs	r2, r1
 800bc3a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	68da      	ldr	r2, [r3, #12]
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bc4a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	689b      	ldr	r3, [r3, #8]
 800bc52:	f003 0320 	and.w	r3, r3, #32
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d10e      	bne.n	800bc78 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	f000 fbc2 	bl	800c3e4 <HAL_RTC_WaitForSynchro>
 800bc60:	4603      	mov	r3, r0
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d008      	beq.n	800bc78 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	22ff      	movs	r2, #255	; 0xff
 800bc6c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2204      	movs	r2, #4
 800bc72:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800bc74:	2301      	movs	r3, #1
 800bc76:	e018      	b.n	800bcaa <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bc86:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	699a      	ldr	r2, [r3, #24]
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	430a      	orrs	r2, r1
 800bc98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	22ff      	movs	r2, #255	; 0xff
 800bca0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	2201      	movs	r2, #1
 800bca6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800bca8:	2300      	movs	r3, #0
  }
}
 800bcaa:	4618      	mov	r0, r3
 800bcac:	3708      	adds	r7, #8
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd80      	pop	{r7, pc}

0800bcb2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800bcb2:	b590      	push	{r4, r7, lr}
 800bcb4:	b087      	sub	sp, #28
 800bcb6:	af00      	add	r7, sp, #0
 800bcb8:	60f8      	str	r0, [r7, #12]
 800bcba:	60b9      	str	r1, [r7, #8]
 800bcbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	7f1b      	ldrb	r3, [r3, #28]
 800bcc6:	2b01      	cmp	r3, #1
 800bcc8:	d101      	bne.n	800bcce <HAL_RTC_SetTime+0x1c>
 800bcca:	2302      	movs	r3, #2
 800bccc:	e0aa      	b.n	800be24 <HAL_RTC_SetTime+0x172>
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	2201      	movs	r2, #1
 800bcd2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	2202      	movs	r2, #2
 800bcd8:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d126      	bne.n	800bd2e <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	689b      	ldr	r3, [r3, #8]
 800bce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d102      	bne.n	800bcf4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	781b      	ldrb	r3, [r3, #0]
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f000 fbc7 	bl	800c48c <RTC_ByteToBcd2>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	785b      	ldrb	r3, [r3, #1]
 800bd06:	4618      	mov	r0, r3
 800bd08:	f000 fbc0 	bl	800c48c <RTC_ByteToBcd2>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800bd10:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800bd12:	68bb      	ldr	r3, [r7, #8]
 800bd14:	789b      	ldrb	r3, [r3, #2]
 800bd16:	4618      	mov	r0, r3
 800bd18:	f000 fbb8 	bl	800c48c <RTC_ByteToBcd2>
 800bd1c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800bd1e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800bd22:	68bb      	ldr	r3, [r7, #8]
 800bd24:	78db      	ldrb	r3, [r3, #3]
 800bd26:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800bd28:	4313      	orrs	r3, r2
 800bd2a:	617b      	str	r3, [r7, #20]
 800bd2c:	e018      	b.n	800bd60 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	689b      	ldr	r3, [r3, #8]
 800bd34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d102      	bne.n	800bd42 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	2200      	movs	r2, #0
 800bd40:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800bd42:	68bb      	ldr	r3, [r7, #8]
 800bd44:	781b      	ldrb	r3, [r3, #0]
 800bd46:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	785b      	ldrb	r3, [r3, #1]
 800bd4c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800bd4e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800bd50:	68ba      	ldr	r2, [r7, #8]
 800bd52:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800bd54:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800bd56:	68bb      	ldr	r3, [r7, #8]
 800bd58:	78db      	ldrb	r3, [r3, #3]
 800bd5a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800bd5c:	4313      	orrs	r3, r2
 800bd5e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	22ca      	movs	r2, #202	; 0xca
 800bd66:	625a      	str	r2, [r3, #36]	; 0x24
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	2253      	movs	r2, #83	; 0x53
 800bd6e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800bd70:	68f8      	ldr	r0, [r7, #12]
 800bd72:	f000 fb5f 	bl	800c434 <RTC_EnterInitMode>
 800bd76:	4603      	mov	r3, r0
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d00b      	beq.n	800bd94 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	22ff      	movs	r2, #255	; 0xff
 800bd82:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	2204      	movs	r2, #4
 800bd88:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800bd90:	2301      	movs	r3, #1
 800bd92:	e047      	b.n	800be24 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	681a      	ldr	r2, [r3, #0]
 800bd98:	697b      	ldr	r3, [r7, #20]
 800bd9a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800bd9e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800bda2:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	689a      	ldr	r2, [r3, #8]
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bdb2:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	6899      	ldr	r1, [r3, #8]
 800bdba:	68bb      	ldr	r3, [r7, #8]
 800bdbc:	68da      	ldr	r2, [r3, #12]
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	691b      	ldr	r3, [r3, #16]
 800bdc2:	431a      	orrs	r2, r3
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	430a      	orrs	r2, r1
 800bdca:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	68da      	ldr	r2, [r3, #12]
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bdda:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	689b      	ldr	r3, [r3, #8]
 800bde2:	f003 0320 	and.w	r3, r3, #32
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d111      	bne.n	800be0e <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bdea:	68f8      	ldr	r0, [r7, #12]
 800bdec:	f000 fafa 	bl	800c3e4 <HAL_RTC_WaitForSynchro>
 800bdf0:	4603      	mov	r3, r0
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d00b      	beq.n	800be0e <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	22ff      	movs	r2, #255	; 0xff
 800bdfc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	2204      	movs	r2, #4
 800be02:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	2200      	movs	r2, #0
 800be08:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800be0a:	2301      	movs	r3, #1
 800be0c:	e00a      	b.n	800be24 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	22ff      	movs	r2, #255	; 0xff
 800be14:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	2201      	movs	r2, #1
 800be1a:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	2200      	movs	r2, #0
 800be20:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800be22:	2300      	movs	r3, #0
  }
}
 800be24:	4618      	mov	r0, r3
 800be26:	371c      	adds	r7, #28
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd90      	pop	{r4, r7, pc}

0800be2c <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b086      	sub	sp, #24
 800be30:	af00      	add	r7, sp, #0
 800be32:	60f8      	str	r0, [r7, #12]
 800be34:	60b9      	str	r1, [r7, #8]
 800be36:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800be38:	2300      	movs	r3, #0
 800be3a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	691b      	ldr	r3, [r3, #16]
 800be4c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800be5e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800be62:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800be64:	697b      	ldr	r3, [r7, #20]
 800be66:	0c1b      	lsrs	r3, r3, #16
 800be68:	b2db      	uxtb	r3, r3
 800be6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800be6e:	b2da      	uxtb	r2, r3
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800be74:	697b      	ldr	r3, [r7, #20]
 800be76:	0a1b      	lsrs	r3, r3, #8
 800be78:	b2db      	uxtb	r3, r3
 800be7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be7e:	b2da      	uxtb	r2, r3
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800be84:	697b      	ldr	r3, [r7, #20]
 800be86:	b2db      	uxtb	r3, r3
 800be88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be8c:	b2da      	uxtb	r2, r3
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800be92:	697b      	ldr	r3, [r7, #20]
 800be94:	0c1b      	lsrs	r3, r3, #16
 800be96:	b2db      	uxtb	r3, r3
 800be98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be9c:	b2da      	uxtb	r2, r3
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d11a      	bne.n	800bede <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	781b      	ldrb	r3, [r3, #0]
 800beac:	4618      	mov	r0, r3
 800beae:	f000 fb0b 	bl	800c4c8 <RTC_Bcd2ToByte>
 800beb2:	4603      	mov	r3, r0
 800beb4:	461a      	mov	r2, r3
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800beba:	68bb      	ldr	r3, [r7, #8]
 800bebc:	785b      	ldrb	r3, [r3, #1]
 800bebe:	4618      	mov	r0, r3
 800bec0:	f000 fb02 	bl	800c4c8 <RTC_Bcd2ToByte>
 800bec4:	4603      	mov	r3, r0
 800bec6:	461a      	mov	r2, r3
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	789b      	ldrb	r3, [r3, #2]
 800bed0:	4618      	mov	r0, r3
 800bed2:	f000 faf9 	bl	800c4c8 <RTC_Bcd2ToByte>
 800bed6:	4603      	mov	r3, r0
 800bed8:	461a      	mov	r2, r3
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800bede:	2300      	movs	r3, #0
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	3718      	adds	r7, #24
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}

0800bee8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800bee8:	b590      	push	{r4, r7, lr}
 800beea:	b087      	sub	sp, #28
 800beec:	af00      	add	r7, sp, #0
 800beee:	60f8      	str	r0, [r7, #12]
 800bef0:	60b9      	str	r1, [r7, #8]
 800bef2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800bef4:	2300      	movs	r3, #0
 800bef6:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	7f1b      	ldrb	r3, [r3, #28]
 800befc:	2b01      	cmp	r3, #1
 800befe:	d101      	bne.n	800bf04 <HAL_RTC_SetDate+0x1c>
 800bf00:	2302      	movs	r3, #2
 800bf02:	e094      	b.n	800c02e <HAL_RTC_SetDate+0x146>
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	2201      	movs	r2, #1
 800bf08:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	2202      	movs	r2, #2
 800bf0e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d10e      	bne.n	800bf34 <HAL_RTC_SetDate+0x4c>
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	785b      	ldrb	r3, [r3, #1]
 800bf1a:	f003 0310 	and.w	r3, r3, #16
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d008      	beq.n	800bf34 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800bf22:	68bb      	ldr	r3, [r7, #8]
 800bf24:	785b      	ldrb	r3, [r3, #1]
 800bf26:	f023 0310 	bic.w	r3, r3, #16
 800bf2a:	b2db      	uxtb	r3, r3
 800bf2c:	330a      	adds	r3, #10
 800bf2e:	b2da      	uxtb	r2, r3
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d11c      	bne.n	800bf74 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	78db      	ldrb	r3, [r3, #3]
 800bf3e:	4618      	mov	r0, r3
 800bf40:	f000 faa4 	bl	800c48c <RTC_ByteToBcd2>
 800bf44:	4603      	mov	r3, r0
 800bf46:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	785b      	ldrb	r3, [r3, #1]
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	f000 fa9d 	bl	800c48c <RTC_ByteToBcd2>
 800bf52:	4603      	mov	r3, r0
 800bf54:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800bf56:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	789b      	ldrb	r3, [r3, #2]
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	f000 fa95 	bl	800c48c <RTC_ByteToBcd2>
 800bf62:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800bf64:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	781b      	ldrb	r3, [r3, #0]
 800bf6c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800bf6e:	4313      	orrs	r3, r2
 800bf70:	617b      	str	r3, [r7, #20]
 800bf72:	e00e      	b.n	800bf92 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	78db      	ldrb	r3, [r3, #3]
 800bf78:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	785b      	ldrb	r3, [r3, #1]
 800bf7e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800bf80:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800bf82:	68ba      	ldr	r2, [r7, #8]
 800bf84:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800bf86:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	781b      	ldrb	r3, [r3, #0]
 800bf8c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800bf8e:	4313      	orrs	r3, r2
 800bf90:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	22ca      	movs	r2, #202	; 0xca
 800bf98:	625a      	str	r2, [r3, #36]	; 0x24
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	2253      	movs	r2, #83	; 0x53
 800bfa0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800bfa2:	68f8      	ldr	r0, [r7, #12]
 800bfa4:	f000 fa46 	bl	800c434 <RTC_EnterInitMode>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d00b      	beq.n	800bfc6 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	22ff      	movs	r2, #255	; 0xff
 800bfb4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	2204      	movs	r2, #4
 800bfba:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	e033      	b.n	800c02e <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	681a      	ldr	r2, [r3, #0]
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800bfd0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800bfd4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	68da      	ldr	r2, [r3, #12]
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bfe4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	689b      	ldr	r3, [r3, #8]
 800bfec:	f003 0320 	and.w	r3, r3, #32
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d111      	bne.n	800c018 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bff4:	68f8      	ldr	r0, [r7, #12]
 800bff6:	f000 f9f5 	bl	800c3e4 <HAL_RTC_WaitForSynchro>
 800bffa:	4603      	mov	r3, r0
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d00b      	beq.n	800c018 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	22ff      	movs	r2, #255	; 0xff
 800c006:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	2204      	movs	r2, #4
 800c00c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	2200      	movs	r2, #0
 800c012:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800c014:	2301      	movs	r3, #1
 800c016:	e00a      	b.n	800c02e <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	22ff      	movs	r2, #255	; 0xff
 800c01e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	2201      	movs	r2, #1
 800c024:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	2200      	movs	r2, #0
 800c02a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800c02c:	2300      	movs	r3, #0
  }
}
 800c02e:	4618      	mov	r0, r3
 800c030:	371c      	adds	r7, #28
 800c032:	46bd      	mov	sp, r7
 800c034:	bd90      	pop	{r4, r7, pc}

0800c036 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c036:	b580      	push	{r7, lr}
 800c038:	b086      	sub	sp, #24
 800c03a:	af00      	add	r7, sp, #0
 800c03c:	60f8      	str	r0, [r7, #12]
 800c03e:	60b9      	str	r1, [r7, #8]
 800c040:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800c042:	2300      	movs	r3, #0
 800c044:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	685b      	ldr	r3, [r3, #4]
 800c04c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c050:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c054:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800c056:	697b      	ldr	r3, [r7, #20]
 800c058:	0c1b      	lsrs	r3, r3, #16
 800c05a:	b2da      	uxtb	r2, r3
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800c060:	697b      	ldr	r3, [r7, #20]
 800c062:	0a1b      	lsrs	r3, r3, #8
 800c064:	b2db      	uxtb	r3, r3
 800c066:	f003 031f 	and.w	r3, r3, #31
 800c06a:	b2da      	uxtb	r2, r3
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800c070:	697b      	ldr	r3, [r7, #20]
 800c072:	b2db      	uxtb	r3, r3
 800c074:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c078:	b2da      	uxtb	r2, r3
 800c07a:	68bb      	ldr	r3, [r7, #8]
 800c07c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	0b5b      	lsrs	r3, r3, #13
 800c082:	b2db      	uxtb	r3, r3
 800c084:	f003 0307 	and.w	r3, r3, #7
 800c088:	b2da      	uxtb	r2, r3
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d11a      	bne.n	800c0ca <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800c094:	68bb      	ldr	r3, [r7, #8]
 800c096:	78db      	ldrb	r3, [r3, #3]
 800c098:	4618      	mov	r0, r3
 800c09a:	f000 fa15 	bl	800c4c8 <RTC_Bcd2ToByte>
 800c09e:	4603      	mov	r3, r0
 800c0a0:	461a      	mov	r2, r3
 800c0a2:	68bb      	ldr	r3, [r7, #8]
 800c0a4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800c0a6:	68bb      	ldr	r3, [r7, #8]
 800c0a8:	785b      	ldrb	r3, [r3, #1]
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	f000 fa0c 	bl	800c4c8 <RTC_Bcd2ToByte>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	461a      	mov	r2, r3
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800c0b8:	68bb      	ldr	r3, [r7, #8]
 800c0ba:	789b      	ldrb	r3, [r3, #2]
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f000 fa03 	bl	800c4c8 <RTC_Bcd2ToByte>
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	461a      	mov	r2, r3
 800c0c6:	68bb      	ldr	r3, [r7, #8]
 800c0c8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800c0ca:	2300      	movs	r3, #0
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3718      	adds	r7, #24
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}

0800c0d4 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800c0d4:	b590      	push	{r4, r7, lr}
 800c0d6:	b089      	sub	sp, #36	; 0x24
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	60f8      	str	r0, [r7, #12]
 800c0dc:	60b9      	str	r1, [r7, #8]
 800c0de:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	61fb      	str	r3, [r7, #28]
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 800c0e8:	4b93      	ldr	r3, [pc, #588]	; (800c338 <HAL_RTC_SetAlarm_IT+0x264>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	4a93      	ldr	r2, [pc, #588]	; (800c33c <HAL_RTC_SetAlarm_IT+0x268>)
 800c0ee:	fba2 2303 	umull	r2, r3, r2, r3
 800c0f2:	0adb      	lsrs	r3, r3, #11
 800c0f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c0f8:	fb02 f303 	mul.w	r3, r2, r3
 800c0fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	7f1b      	ldrb	r3, [r3, #28]
 800c102:	2b01      	cmp	r3, #1
 800c104:	d101      	bne.n	800c10a <HAL_RTC_SetAlarm_IT+0x36>
 800c106:	2302      	movs	r3, #2
 800c108:	e111      	b.n	800c32e <HAL_RTC_SetAlarm_IT+0x25a>
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	2201      	movs	r2, #1
 800c10e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	2202      	movs	r2, #2
 800c114:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d137      	bne.n	800c18c <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	689b      	ldr	r3, [r3, #8]
 800c122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c126:	2b00      	cmp	r3, #0
 800c128:	d102      	bne.n	800c130 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800c12a:	68bb      	ldr	r3, [r7, #8]
 800c12c:	2200      	movs	r2, #0
 800c12e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800c130:	68bb      	ldr	r3, [r7, #8]
 800c132:	781b      	ldrb	r3, [r3, #0]
 800c134:	4618      	mov	r0, r3
 800c136:	f000 f9a9 	bl	800c48c <RTC_ByteToBcd2>
 800c13a:	4603      	mov	r3, r0
 800c13c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800c13e:	68bb      	ldr	r3, [r7, #8]
 800c140:	785b      	ldrb	r3, [r3, #1]
 800c142:	4618      	mov	r0, r3
 800c144:	f000 f9a2 	bl	800c48c <RTC_ByteToBcd2>
 800c148:	4603      	mov	r3, r0
 800c14a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800c14c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	789b      	ldrb	r3, [r3, #2]
 800c152:	4618      	mov	r0, r3
 800c154:	f000 f99a 	bl	800c48c <RTC_ByteToBcd2>
 800c158:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800c15a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800c15e:	68bb      	ldr	r3, [r7, #8]
 800c160:	78db      	ldrb	r3, [r3, #3]
 800c162:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800c164:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800c168:	68bb      	ldr	r3, [r7, #8]
 800c16a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c16e:	4618      	mov	r0, r3
 800c170:	f000 f98c 	bl	800c48c <RTC_ByteToBcd2>
 800c174:	4603      	mov	r3, r0
 800c176:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800c178:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800c180:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800c182:	68bb      	ldr	r3, [r7, #8]
 800c184:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800c186:	4313      	orrs	r3, r2
 800c188:	61fb      	str	r3, [r7, #28]
 800c18a:	e023      	b.n	800c1d4 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	689b      	ldr	r3, [r3, #8]
 800c192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c196:	2b00      	cmp	r3, #0
 800c198:	d102      	bne.n	800c1a0 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800c19a:	68bb      	ldr	r3, [r7, #8]
 800c19c:	2200      	movs	r2, #0
 800c19e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	781b      	ldrb	r3, [r3, #0]
 800c1a4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	785b      	ldrb	r3, [r3, #1]
 800c1aa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800c1ac:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800c1ae:	68ba      	ldr	r2, [r7, #8]
 800c1b0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800c1b2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	78db      	ldrb	r3, [r3, #3]
 800c1b8:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800c1ba:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800c1bc:	68bb      	ldr	r3, [r7, #8]
 800c1be:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c1c2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800c1c4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800c1c6:	68bb      	ldr	r3, [r7, #8]
 800c1c8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800c1ca:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800c1d0:	4313      	orrs	r3, r2
 800c1d2:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800c1d4:	68bb      	ldr	r3, [r7, #8]
 800c1d6:	685a      	ldr	r2, [r3, #4]
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	699b      	ldr	r3, [r3, #24]
 800c1dc:	4313      	orrs	r3, r2
 800c1de:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	22ca      	movs	r2, #202	; 0xca
 800c1e6:	625a      	str	r2, [r3, #36]	; 0x24
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	2253      	movs	r2, #83	; 0x53
 800c1ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800c1f0:	68bb      	ldr	r3, [r7, #8]
 800c1f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1f8:	d141      	bne.n	800c27e <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	689a      	ldr	r2, [r3, #8]
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c208:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	68db      	ldr	r3, [r3, #12]
 800c210:	b2da      	uxtb	r2, r3
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800c21a:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800c21c:	697b      	ldr	r3, [r7, #20]
 800c21e:	1e5a      	subs	r2, r3, #1
 800c220:	617a      	str	r2, [r7, #20]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d10b      	bne.n	800c23e <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	22ff      	movs	r2, #255	; 0xff
 800c22c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	2203      	movs	r2, #3
 800c232:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	2200      	movs	r2, #0
 800c238:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800c23a:	2303      	movs	r3, #3
 800c23c:	e077      	b.n	800c32e <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	68db      	ldr	r3, [r3, #12]
 800c244:	f003 0301 	and.w	r3, r3, #1
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d0e7      	beq.n	800c21c <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	69fa      	ldr	r2, [r7, #28]
 800c252:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	69ba      	ldr	r2, [r7, #24]
 800c25a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	689a      	ldr	r2, [r3, #8]
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c26a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	689a      	ldr	r2, [r3, #8]
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c27a:	609a      	str	r2, [r3, #8]
 800c27c:	e040      	b.n	800c300 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	689a      	ldr	r2, [r3, #8]
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c28c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	68db      	ldr	r3, [r3, #12]
 800c294:	b2da      	uxtb	r2, r3
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	f462 7220 	orn	r2, r2, #640	; 0x280
 800c29e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800c2a0:	697b      	ldr	r3, [r7, #20]
 800c2a2:	1e5a      	subs	r2, r3, #1
 800c2a4:	617a      	str	r2, [r7, #20]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d10b      	bne.n	800c2c2 <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	22ff      	movs	r2, #255	; 0xff
 800c2b0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	2203      	movs	r2, #3
 800c2b6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800c2be:	2303      	movs	r3, #3
 800c2c0:	e035      	b.n	800c32e <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	68db      	ldr	r3, [r3, #12]
 800c2c8:	f003 0302 	and.w	r3, r3, #2
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d0e7      	beq.n	800c2a0 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	69fa      	ldr	r2, [r7, #28]
 800c2d6:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	69ba      	ldr	r2, [r7, #24]
 800c2de:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	689a      	ldr	r2, [r3, #8]
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c2ee:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	689a      	ldr	r2, [r3, #8]
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c2fe:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800c300:	4b0f      	ldr	r3, [pc, #60]	; (800c340 <HAL_RTC_SetAlarm_IT+0x26c>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	4a0e      	ldr	r2, [pc, #56]	; (800c340 <HAL_RTC_SetAlarm_IT+0x26c>)
 800c306:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c30a:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 800c30c:	4b0c      	ldr	r3, [pc, #48]	; (800c340 <HAL_RTC_SetAlarm_IT+0x26c>)
 800c30e:	689b      	ldr	r3, [r3, #8]
 800c310:	4a0b      	ldr	r2, [pc, #44]	; (800c340 <HAL_RTC_SetAlarm_IT+0x26c>)
 800c312:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c316:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	22ff      	movs	r2, #255	; 0xff
 800c31e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	2201      	movs	r2, #1
 800c324:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	2200      	movs	r2, #0
 800c32a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800c32c:	2300      	movs	r3, #0
}
 800c32e:	4618      	mov	r0, r3
 800c330:	3724      	adds	r7, #36	; 0x24
 800c332:	46bd      	mov	sp, r7
 800c334:	bd90      	pop	{r4, r7, pc}
 800c336:	bf00      	nop
 800c338:	20000088 	.word	0x20000088
 800c33c:	10624dd3 	.word	0x10624dd3
 800c340:	40013c00 	.word	0x40013c00

0800c344 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b082      	sub	sp, #8
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	689b      	ldr	r3, [r3, #8]
 800c352:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c356:	2b00      	cmp	r3, #0
 800c358:	d012      	beq.n	800c380 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	68db      	ldr	r3, [r3, #12]
 800c360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c364:	2b00      	cmp	r3, #0
 800c366:	d00b      	beq.n	800c380 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	f000 f831 	bl	800c3d0 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	68db      	ldr	r3, [r3, #12]
 800c374:	b2da      	uxtb	r2, r3
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800c37e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	689b      	ldr	r3, [r3, #8]
 800c386:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d012      	beq.n	800c3b4 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	68db      	ldr	r3, [r3, #12]
 800c394:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d00b      	beq.n	800c3b4 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800c39c:	6878      	ldr	r0, [r7, #4]
 800c39e:	f000 f9fb 	bl	800c798 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	68db      	ldr	r3, [r3, #12]
 800c3a8:	b2da      	uxtb	r2, r3
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	f462 7220 	orn	r2, r2, #640	; 0x280
 800c3b2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800c3b4:	4b05      	ldr	r3, [pc, #20]	; (800c3cc <HAL_RTC_AlarmIRQHandler+0x88>)
 800c3b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c3ba:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2201      	movs	r2, #1
 800c3c0:	775a      	strb	r2, [r3, #29]
}
 800c3c2:	bf00      	nop
 800c3c4:	3708      	adds	r7, #8
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bd80      	pop	{r7, pc}
 800c3ca:	bf00      	nop
 800c3cc:	40013c00 	.word	0x40013c00

0800c3d0 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	b083      	sub	sp, #12
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 800c3d8:	bf00      	nop
 800c3da:	370c      	adds	r7, #12
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e2:	4770      	bx	lr

0800c3e4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b084      	sub	sp, #16
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	68da      	ldr	r2, [r3, #12]
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800c3fe:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c400:	f7fc fd1c 	bl	8008e3c <HAL_GetTick>
 800c404:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800c406:	e009      	b.n	800c41c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800c408:	f7fc fd18 	bl	8008e3c <HAL_GetTick>
 800c40c:	4602      	mov	r2, r0
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	1ad3      	subs	r3, r2, r3
 800c412:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c416:	d901      	bls.n	800c41c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800c418:	2303      	movs	r3, #3
 800c41a:	e007      	b.n	800c42c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	68db      	ldr	r3, [r3, #12]
 800c422:	f003 0320 	and.w	r3, r3, #32
 800c426:	2b00      	cmp	r3, #0
 800c428:	d0ee      	beq.n	800c408 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800c42a:	2300      	movs	r3, #0
}
 800c42c:	4618      	mov	r0, r3
 800c42e:	3710      	adds	r7, #16
 800c430:	46bd      	mov	sp, r7
 800c432:	bd80      	pop	{r7, pc}

0800c434 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b084      	sub	sp, #16
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c43c:	2300      	movs	r3, #0
 800c43e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	68db      	ldr	r3, [r3, #12]
 800c446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d119      	bne.n	800c482 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	f04f 32ff 	mov.w	r2, #4294967295
 800c456:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c458:	f7fc fcf0 	bl	8008e3c <HAL_GetTick>
 800c45c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c45e:	e009      	b.n	800c474 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800c460:	f7fc fcec 	bl	8008e3c <HAL_GetTick>
 800c464:	4602      	mov	r2, r0
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	1ad3      	subs	r3, r2, r3
 800c46a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c46e:	d901      	bls.n	800c474 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800c470:	2303      	movs	r3, #3
 800c472:	e007      	b.n	800c484 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	68db      	ldr	r3, [r3, #12]
 800c47a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d0ee      	beq.n	800c460 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800c482:	2300      	movs	r3, #0
}
 800c484:	4618      	mov	r0, r3
 800c486:	3710      	adds	r7, #16
 800c488:	46bd      	mov	sp, r7
 800c48a:	bd80      	pop	{r7, pc}

0800c48c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c48c:	b480      	push	{r7}
 800c48e:	b085      	sub	sp, #20
 800c490:	af00      	add	r7, sp, #0
 800c492:	4603      	mov	r3, r0
 800c494:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c496:	2300      	movs	r3, #0
 800c498:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800c49a:	e005      	b.n	800c4a8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	3301      	adds	r3, #1
 800c4a0:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800c4a2:	79fb      	ldrb	r3, [r7, #7]
 800c4a4:	3b0a      	subs	r3, #10
 800c4a6:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800c4a8:	79fb      	ldrb	r3, [r7, #7]
 800c4aa:	2b09      	cmp	r3, #9
 800c4ac:	d8f6      	bhi.n	800c49c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	b2db      	uxtb	r3, r3
 800c4b2:	011b      	lsls	r3, r3, #4
 800c4b4:	b2da      	uxtb	r2, r3
 800c4b6:	79fb      	ldrb	r3, [r7, #7]
 800c4b8:	4313      	orrs	r3, r2
 800c4ba:	b2db      	uxtb	r3, r3
}
 800c4bc:	4618      	mov	r0, r3
 800c4be:	3714      	adds	r7, #20
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c6:	4770      	bx	lr

0800c4c8 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800c4c8:	b480      	push	{r7}
 800c4ca:	b085      	sub	sp, #20
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800c4d6:	79fb      	ldrb	r3, [r7, #7]
 800c4d8:	091b      	lsrs	r3, r3, #4
 800c4da:	b2db      	uxtb	r3, r3
 800c4dc:	461a      	mov	r2, r3
 800c4de:	4613      	mov	r3, r2
 800c4e0:	009b      	lsls	r3, r3, #2
 800c4e2:	4413      	add	r3, r2
 800c4e4:	005b      	lsls	r3, r3, #1
 800c4e6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800c4e8:	79fb      	ldrb	r3, [r7, #7]
 800c4ea:	f003 030f 	and.w	r3, r3, #15
 800c4ee:	b2da      	uxtb	r2, r3
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	b2db      	uxtb	r3, r3
 800c4f4:	4413      	add	r3, r2
 800c4f6:	b2db      	uxtb	r3, r3
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	3714      	adds	r7, #20
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c502:	4770      	bx	lr

0800c504 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800c504:	b480      	push	{r7}
 800c506:	b087      	sub	sp, #28
 800c508:	af00      	add	r7, sp, #0
 800c50a:	60f8      	str	r0, [r7, #12]
 800c50c:	60b9      	str	r1, [r7, #8]
 800c50e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	7f1b      	ldrb	r3, [r3, #28]
 800c514:	2b01      	cmp	r3, #1
 800c516:	d101      	bne.n	800c51c <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 800c518:	2302      	movs	r3, #2
 800c51a:	e0a6      	b.n	800c66a <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	2201      	movs	r2, #1
 800c520:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	2202      	movs	r2, #2
 800c526:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	22ca      	movs	r2, #202	; 0xca
 800c52e:	625a      	str	r2, [r3, #36]	; 0x24
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	2253      	movs	r2, #83	; 0x53
 800c536:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	689b      	ldr	r3, [r3, #8]
 800c53e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c542:	2b00      	cmp	r3, #0
 800c544:	d022      	beq.n	800c58c <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800c546:	4b4c      	ldr	r3, [pc, #304]	; (800c678 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	4a4c      	ldr	r2, [pc, #304]	; (800c67c <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800c54c:	fba2 2303 	umull	r2, r3, r2, r3
 800c550:	0adb      	lsrs	r3, r3, #11
 800c552:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c556:	fb02 f303 	mul.w	r3, r2, r3
 800c55a:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 800c55c:	697b      	ldr	r3, [r7, #20]
 800c55e:	1e5a      	subs	r2, r3, #1
 800c560:	617a      	str	r2, [r7, #20]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d10b      	bne.n	800c57e <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	22ff      	movs	r2, #255	; 0xff
 800c56c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	2203      	movs	r2, #3
 800c572:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	2200      	movs	r2, #0
 800c578:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800c57a:	2303      	movs	r3, #3
 800c57c:	e075      	b.n	800c66a <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	68db      	ldr	r3, [r3, #12]
 800c584:	f003 0304 	and.w	r3, r3, #4
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d1e7      	bne.n	800c55c <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	689a      	ldr	r2, [r3, #8]
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c59a:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800c59c:	4b36      	ldr	r3, [pc, #216]	; (800c678 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	4a36      	ldr	r2, [pc, #216]	; (800c67c <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800c5a2:	fba2 2303 	umull	r2, r3, r2, r3
 800c5a6:	0adb      	lsrs	r3, r3, #11
 800c5a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c5ac:	fb02 f303 	mul.w	r3, r2, r3
 800c5b0:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 800c5b2:	697b      	ldr	r3, [r7, #20]
 800c5b4:	1e5a      	subs	r2, r3, #1
 800c5b6:	617a      	str	r2, [r7, #20]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d10b      	bne.n	800c5d4 <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	22ff      	movs	r2, #255	; 0xff
 800c5c2:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	2203      	movs	r2, #3
 800c5c8:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800c5d0:	2303      	movs	r3, #3
 800c5d2:	e04a      	b.n	800c66a <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	68db      	ldr	r3, [r3, #12]
 800c5da:	f003 0304 	and.w	r3, r3, #4
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d0e7      	beq.n	800c5b2 <HAL_RTCEx_SetWakeUpTimer_IT+0xae>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	68ba      	ldr	r2, [r7, #8]
 800c5e8:	615a      	str	r2, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	689a      	ldr	r2, [r3, #8]
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	f022 0207 	bic.w	r2, r2, #7
 800c5f8:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	6899      	ldr	r1, [r3, #8]
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	687a      	ldr	r2, [r7, #4]
 800c606:	430a      	orrs	r2, r1
 800c608:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800c60a:	4b1d      	ldr	r3, [pc, #116]	; (800c680 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	4a1c      	ldr	r2, [pc, #112]	; (800c680 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800c610:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c614:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 800c616:	4b1a      	ldr	r3, [pc, #104]	; (800c680 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800c618:	689b      	ldr	r3, [r3, #8]
 800c61a:	4a19      	ldr	r2, [pc, #100]	; (800c680 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800c61c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c620:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	68db      	ldr	r3, [r3, #12]
 800c628:	b2da      	uxtb	r2, r3
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800c632:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	689a      	ldr	r2, [r3, #8]
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c642:	609a      	str	r2, [r3, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	689a      	ldr	r2, [r3, #8]
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c652:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	22ff      	movs	r2, #255	; 0xff
 800c65a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	2201      	movs	r2, #1
 800c660:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	2200      	movs	r2, #0
 800c666:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800c668:	2300      	movs	r3, #0
}
 800c66a:	4618      	mov	r0, r3
 800c66c:	371c      	adds	r7, #28
 800c66e:	46bd      	mov	sp, r7
 800c670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c674:	4770      	bx	lr
 800c676:	bf00      	nop
 800c678:	20000088 	.word	0x20000088
 800c67c:	10624dd3 	.word	0x10624dd3
 800c680:	40013c00 	.word	0x40013c00

0800c684 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b084      	sub	sp, #16
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c68c:	2300      	movs	r3, #0
 800c68e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	7f1b      	ldrb	r3, [r3, #28]
 800c694:	2b01      	cmp	r3, #1
 800c696:	d101      	bne.n	800c69c <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 800c698:	2302      	movs	r3, #2
 800c69a:	e047      	b.n	800c72c <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2201      	movs	r2, #1
 800c6a0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2202      	movs	r2, #2
 800c6a6:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	22ca      	movs	r2, #202	; 0xca
 800c6ae:	625a      	str	r2, [r3, #36]	; 0x24
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	2253      	movs	r2, #83	; 0x53
 800c6b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	689a      	ldr	r2, [r3, #8]
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c6c6:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	689a      	ldr	r2, [r3, #8]
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c6d6:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c6d8:	f7fc fbb0 	bl	8008e3c <HAL_GetTick>
 800c6dc:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800c6de:	e013      	b.n	800c708 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800c6e0:	f7fc fbac 	bl	8008e3c <HAL_GetTick>
 800c6e4:	4602      	mov	r2, r0
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	1ad3      	subs	r3, r2, r3
 800c6ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c6ee:	d90b      	bls.n	800c708 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	22ff      	movs	r2, #255	; 0xff
 800c6f6:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2203      	movs	r2, #3
 800c6fc:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	2200      	movs	r2, #0
 800c702:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800c704:	2303      	movs	r3, #3
 800c706:	e011      	b.n	800c72c <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	68db      	ldr	r3, [r3, #12]
 800c70e:	f003 0304 	and.w	r3, r3, #4
 800c712:	2b00      	cmp	r3, #0
 800c714:	d0e4      	beq.n	800c6e0 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	22ff      	movs	r2, #255	; 0xff
 800c71c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2201      	movs	r2, #1
 800c722:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	2200      	movs	r2, #0
 800c728:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800c72a:	2300      	movs	r3, #0
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	3710      	adds	r7, #16
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}

0800c734 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800c734:	b480      	push	{r7}
 800c736:	b087      	sub	sp, #28
 800c738:	af00      	add	r7, sp, #0
 800c73a:	60f8      	str	r0, [r7, #12]
 800c73c:	60b9      	str	r1, [r7, #8]
 800c73e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800c740:	2300      	movs	r3, #0
 800c742:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	3350      	adds	r3, #80	; 0x50
 800c74a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800c74c:	68bb      	ldr	r3, [r7, #8]
 800c74e:	009b      	lsls	r3, r3, #2
 800c750:	697a      	ldr	r2, [r7, #20]
 800c752:	4413      	add	r3, r2
 800c754:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800c756:	697b      	ldr	r3, [r7, #20]
 800c758:	687a      	ldr	r2, [r7, #4]
 800c75a:	601a      	str	r2, [r3, #0]
}
 800c75c:	bf00      	nop
 800c75e:	371c      	adds	r7, #28
 800c760:	46bd      	mov	sp, r7
 800c762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c766:	4770      	bx	lr

0800c768 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800c768:	b480      	push	{r7}
 800c76a:	b085      	sub	sp, #20
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
 800c770:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800c772:	2300      	movs	r3, #0
 800c774:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	3350      	adds	r3, #80	; 0x50
 800c77c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	009b      	lsls	r3, r3, #2
 800c782:	68fa      	ldr	r2, [r7, #12]
 800c784:	4413      	add	r3, r2
 800c786:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	681b      	ldr	r3, [r3, #0]
}
 800c78c:	4618      	mov	r0, r3
 800c78e:	3714      	adds	r7, #20
 800c790:	46bd      	mov	sp, r7
 800c792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c796:	4770      	bx	lr

0800c798 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800c798:	b480      	push	{r7}
 800c79a:	b083      	sub	sp, #12
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 800c7a0:	bf00      	nop
 800c7a2:	370c      	adds	r7, #12
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7aa:	4770      	bx	lr

0800c7ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b082      	sub	sp, #8
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d101      	bne.n	800c7be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c7ba:	2301      	movs	r3, #1
 800c7bc:	e07b      	b.n	800c8b6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d108      	bne.n	800c7d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	685b      	ldr	r3, [r3, #4]
 800c7ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c7ce:	d009      	beq.n	800c7e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	61da      	str	r2, [r3, #28]
 800c7d6:	e005      	b.n	800c7e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2200      	movs	r2, #0
 800c7dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c7f0:	b2db      	uxtb	r3, r3
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d106      	bne.n	800c804 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f7f6 fc26 	bl	8003050 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2202      	movs	r2, #2
 800c808:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	681a      	ldr	r2, [r3, #0]
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c81a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	685b      	ldr	r3, [r3, #4]
 800c820:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	689b      	ldr	r3, [r3, #8]
 800c828:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800c82c:	431a      	orrs	r2, r3
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	68db      	ldr	r3, [r3, #12]
 800c832:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c836:	431a      	orrs	r2, r3
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	691b      	ldr	r3, [r3, #16]
 800c83c:	f003 0302 	and.w	r3, r3, #2
 800c840:	431a      	orrs	r2, r3
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	695b      	ldr	r3, [r3, #20]
 800c846:	f003 0301 	and.w	r3, r3, #1
 800c84a:	431a      	orrs	r2, r3
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	699b      	ldr	r3, [r3, #24]
 800c850:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c854:	431a      	orrs	r2, r3
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	69db      	ldr	r3, [r3, #28]
 800c85a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c85e:	431a      	orrs	r2, r3
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	6a1b      	ldr	r3, [r3, #32]
 800c864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c868:	ea42 0103 	orr.w	r1, r2, r3
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c870:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	430a      	orrs	r2, r1
 800c87a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	699b      	ldr	r3, [r3, #24]
 800c880:	0c1b      	lsrs	r3, r3, #16
 800c882:	f003 0104 	and.w	r1, r3, #4
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c88a:	f003 0210 	and.w	r2, r3, #16
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	430a      	orrs	r2, r1
 800c894:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	69da      	ldr	r2, [r3, #28]
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c8a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2201      	movs	r2, #1
 800c8b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800c8b4:	2300      	movs	r3, #0
}
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	3708      	adds	r7, #8
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd80      	pop	{r7, pc}

0800c8be <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c8be:	b580      	push	{r7, lr}
 800c8c0:	b088      	sub	sp, #32
 800c8c2:	af00      	add	r7, sp, #0
 800c8c4:	60f8      	str	r0, [r7, #12]
 800c8c6:	60b9      	str	r1, [r7, #8]
 800c8c8:	603b      	str	r3, [r7, #0]
 800c8ca:	4613      	mov	r3, r2
 800c8cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c8d8:	2b01      	cmp	r3, #1
 800c8da:	d101      	bne.n	800c8e0 <HAL_SPI_Transmit+0x22>
 800c8dc:	2302      	movs	r3, #2
 800c8de:	e126      	b.n	800cb2e <HAL_SPI_Transmit+0x270>
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	2201      	movs	r2, #1
 800c8e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c8e8:	f7fc faa8 	bl	8008e3c <HAL_GetTick>
 800c8ec:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800c8ee:	88fb      	ldrh	r3, [r7, #6]
 800c8f0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c8f8:	b2db      	uxtb	r3, r3
 800c8fa:	2b01      	cmp	r3, #1
 800c8fc:	d002      	beq.n	800c904 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800c8fe:	2302      	movs	r3, #2
 800c900:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c902:	e10b      	b.n	800cb1c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d002      	beq.n	800c910 <HAL_SPI_Transmit+0x52>
 800c90a:	88fb      	ldrh	r3, [r7, #6]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d102      	bne.n	800c916 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800c910:	2301      	movs	r3, #1
 800c912:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c914:	e102      	b.n	800cb1c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	2203      	movs	r2, #3
 800c91a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	2200      	movs	r2, #0
 800c922:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	68ba      	ldr	r2, [r7, #8]
 800c928:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	88fa      	ldrh	r2, [r7, #6]
 800c92e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	88fa      	ldrh	r2, [r7, #6]
 800c934:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	2200      	movs	r2, #0
 800c93a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	2200      	movs	r2, #0
 800c940:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	2200      	movs	r2, #0
 800c946:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	2200      	movs	r2, #0
 800c94c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	2200      	movs	r2, #0
 800c952:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	689b      	ldr	r3, [r3, #8]
 800c958:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c95c:	d10f      	bne.n	800c97e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	681a      	ldr	r2, [r3, #0]
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c96c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	681a      	ldr	r2, [r3, #0]
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c97c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c988:	2b40      	cmp	r3, #64	; 0x40
 800c98a:	d007      	beq.n	800c99c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	681a      	ldr	r2, [r3, #0]
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c99a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	68db      	ldr	r3, [r3, #12]
 800c9a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c9a4:	d14b      	bne.n	800ca3e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	685b      	ldr	r3, [r3, #4]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d002      	beq.n	800c9b4 <HAL_SPI_Transmit+0xf6>
 800c9ae:	8afb      	ldrh	r3, [r7, #22]
 800c9b0:	2b01      	cmp	r3, #1
 800c9b2:	d13e      	bne.n	800ca32 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9b8:	881a      	ldrh	r2, [r3, #0]
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9c4:	1c9a      	adds	r2, r3, #2
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c9ce:	b29b      	uxth	r3, r3
 800c9d0:	3b01      	subs	r3, #1
 800c9d2:	b29a      	uxth	r2, r3
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c9d8:	e02b      	b.n	800ca32 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	689b      	ldr	r3, [r3, #8]
 800c9e0:	f003 0302 	and.w	r3, r3, #2
 800c9e4:	2b02      	cmp	r3, #2
 800c9e6:	d112      	bne.n	800ca0e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9ec:	881a      	ldrh	r2, [r3, #0]
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9f8:	1c9a      	adds	r2, r3, #2
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ca02:	b29b      	uxth	r3, r3
 800ca04:	3b01      	subs	r3, #1
 800ca06:	b29a      	uxth	r2, r3
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	86da      	strh	r2, [r3, #54]	; 0x36
 800ca0c:	e011      	b.n	800ca32 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ca0e:	f7fc fa15 	bl	8008e3c <HAL_GetTick>
 800ca12:	4602      	mov	r2, r0
 800ca14:	69bb      	ldr	r3, [r7, #24]
 800ca16:	1ad3      	subs	r3, r2, r3
 800ca18:	683a      	ldr	r2, [r7, #0]
 800ca1a:	429a      	cmp	r2, r3
 800ca1c:	d803      	bhi.n	800ca26 <HAL_SPI_Transmit+0x168>
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca24:	d102      	bne.n	800ca2c <HAL_SPI_Transmit+0x16e>
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d102      	bne.n	800ca32 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800ca2c:	2303      	movs	r3, #3
 800ca2e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ca30:	e074      	b.n	800cb1c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ca36:	b29b      	uxth	r3, r3
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d1ce      	bne.n	800c9da <HAL_SPI_Transmit+0x11c>
 800ca3c:	e04c      	b.n	800cad8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	685b      	ldr	r3, [r3, #4]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d002      	beq.n	800ca4c <HAL_SPI_Transmit+0x18e>
 800ca46:	8afb      	ldrh	r3, [r7, #22]
 800ca48:	2b01      	cmp	r3, #1
 800ca4a:	d140      	bne.n	800cace <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	330c      	adds	r3, #12
 800ca56:	7812      	ldrb	r2, [r2, #0]
 800ca58:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca5e:	1c5a      	adds	r2, r3, #1
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ca68:	b29b      	uxth	r3, r3
 800ca6a:	3b01      	subs	r3, #1
 800ca6c:	b29a      	uxth	r2, r3
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800ca72:	e02c      	b.n	800cace <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	689b      	ldr	r3, [r3, #8]
 800ca7a:	f003 0302 	and.w	r3, r3, #2
 800ca7e:	2b02      	cmp	r3, #2
 800ca80:	d113      	bne.n	800caaa <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	330c      	adds	r3, #12
 800ca8c:	7812      	ldrb	r2, [r2, #0]
 800ca8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca94:	1c5a      	adds	r2, r3, #1
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ca9e:	b29b      	uxth	r3, r3
 800caa0:	3b01      	subs	r3, #1
 800caa2:	b29a      	uxth	r2, r3
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	86da      	strh	r2, [r3, #54]	; 0x36
 800caa8:	e011      	b.n	800cace <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800caaa:	f7fc f9c7 	bl	8008e3c <HAL_GetTick>
 800caae:	4602      	mov	r2, r0
 800cab0:	69bb      	ldr	r3, [r7, #24]
 800cab2:	1ad3      	subs	r3, r2, r3
 800cab4:	683a      	ldr	r2, [r7, #0]
 800cab6:	429a      	cmp	r2, r3
 800cab8:	d803      	bhi.n	800cac2 <HAL_SPI_Transmit+0x204>
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cac0:	d102      	bne.n	800cac8 <HAL_SPI_Transmit+0x20a>
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d102      	bne.n	800cace <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800cac8:	2303      	movs	r3, #3
 800caca:	77fb      	strb	r3, [r7, #31]
          goto error;
 800cacc:	e026      	b.n	800cb1c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cad2:	b29b      	uxth	r3, r3
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d1cd      	bne.n	800ca74 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800cad8:	69ba      	ldr	r2, [r7, #24]
 800cada:	6839      	ldr	r1, [r7, #0]
 800cadc:	68f8      	ldr	r0, [r7, #12]
 800cade:	f000 fbcb 	bl	800d278 <SPI_EndRxTxTransaction>
 800cae2:	4603      	mov	r3, r0
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d002      	beq.n	800caee <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	2220      	movs	r2, #32
 800caec:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	689b      	ldr	r3, [r3, #8]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d10a      	bne.n	800cb0c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800caf6:	2300      	movs	r3, #0
 800caf8:	613b      	str	r3, [r7, #16]
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	68db      	ldr	r3, [r3, #12]
 800cb00:	613b      	str	r3, [r7, #16]
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	689b      	ldr	r3, [r3, #8]
 800cb08:	613b      	str	r3, [r7, #16]
 800cb0a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d002      	beq.n	800cb1a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800cb14:	2301      	movs	r3, #1
 800cb16:	77fb      	strb	r3, [r7, #31]
 800cb18:	e000      	b.n	800cb1c <HAL_SPI_Transmit+0x25e>
  }

error:
 800cb1a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	2201      	movs	r2, #1
 800cb20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	2200      	movs	r2, #0
 800cb28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800cb2c:	7ffb      	ldrb	r3, [r7, #31]
}
 800cb2e:	4618      	mov	r0, r3
 800cb30:	3720      	adds	r7, #32
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bd80      	pop	{r7, pc}

0800cb36 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cb36:	b580      	push	{r7, lr}
 800cb38:	b088      	sub	sp, #32
 800cb3a:	af02      	add	r7, sp, #8
 800cb3c:	60f8      	str	r0, [r7, #12]
 800cb3e:	60b9      	str	r1, [r7, #8]
 800cb40:	603b      	str	r3, [r7, #0]
 800cb42:	4613      	mov	r3, r2
 800cb44:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cb46:	2300      	movs	r3, #0
 800cb48:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	685b      	ldr	r3, [r3, #4]
 800cb4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cb52:	d112      	bne.n	800cb7a <HAL_SPI_Receive+0x44>
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	689b      	ldr	r3, [r3, #8]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d10e      	bne.n	800cb7a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	2204      	movs	r2, #4
 800cb60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800cb64:	88fa      	ldrh	r2, [r7, #6]
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	9300      	str	r3, [sp, #0]
 800cb6a:	4613      	mov	r3, r2
 800cb6c:	68ba      	ldr	r2, [r7, #8]
 800cb6e:	68b9      	ldr	r1, [r7, #8]
 800cb70:	68f8      	ldr	r0, [r7, #12]
 800cb72:	f000 f8f1 	bl	800cd58 <HAL_SPI_TransmitReceive>
 800cb76:	4603      	mov	r3, r0
 800cb78:	e0ea      	b.n	800cd50 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800cb80:	2b01      	cmp	r3, #1
 800cb82:	d101      	bne.n	800cb88 <HAL_SPI_Receive+0x52>
 800cb84:	2302      	movs	r3, #2
 800cb86:	e0e3      	b.n	800cd50 <HAL_SPI_Receive+0x21a>
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	2201      	movs	r2, #1
 800cb8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cb90:	f7fc f954 	bl	8008e3c <HAL_GetTick>
 800cb94:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cb9c:	b2db      	uxtb	r3, r3
 800cb9e:	2b01      	cmp	r3, #1
 800cba0:	d002      	beq.n	800cba8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800cba2:	2302      	movs	r3, #2
 800cba4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cba6:	e0ca      	b.n	800cd3e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800cba8:	68bb      	ldr	r3, [r7, #8]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d002      	beq.n	800cbb4 <HAL_SPI_Receive+0x7e>
 800cbae:	88fb      	ldrh	r3, [r7, #6]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d102      	bne.n	800cbba <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800cbb4:	2301      	movs	r3, #1
 800cbb6:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cbb8:	e0c1      	b.n	800cd3e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	2204      	movs	r2, #4
 800cbbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	68ba      	ldr	r2, [r7, #8]
 800cbcc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	88fa      	ldrh	r2, [r7, #6]
 800cbd2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	88fa      	ldrh	r2, [r7, #6]
 800cbd8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	2200      	movs	r2, #0
 800cbde:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	2200      	movs	r2, #0
 800cbea:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	2200      	movs	r2, #0
 800cbf0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	689b      	ldr	r3, [r3, #8]
 800cbfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cc00:	d10f      	bne.n	800cc22 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	681a      	ldr	r2, [r3, #0]
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cc10:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	681a      	ldr	r2, [r3, #0]
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cc20:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc2c:	2b40      	cmp	r3, #64	; 0x40
 800cc2e:	d007      	beq.n	800cc40 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	681a      	ldr	r2, [r3, #0]
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cc3e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	68db      	ldr	r3, [r3, #12]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d162      	bne.n	800cd0e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800cc48:	e02e      	b.n	800cca8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	689b      	ldr	r3, [r3, #8]
 800cc50:	f003 0301 	and.w	r3, r3, #1
 800cc54:	2b01      	cmp	r3, #1
 800cc56:	d115      	bne.n	800cc84 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	f103 020c 	add.w	r2, r3, #12
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc64:	7812      	ldrb	r2, [r2, #0]
 800cc66:	b2d2      	uxtb	r2, r2
 800cc68:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc6e:	1c5a      	adds	r2, r3, #1
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cc78:	b29b      	uxth	r3, r3
 800cc7a:	3b01      	subs	r3, #1
 800cc7c:	b29a      	uxth	r2, r3
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	87da      	strh	r2, [r3, #62]	; 0x3e
 800cc82:	e011      	b.n	800cca8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cc84:	f7fc f8da 	bl	8008e3c <HAL_GetTick>
 800cc88:	4602      	mov	r2, r0
 800cc8a:	693b      	ldr	r3, [r7, #16]
 800cc8c:	1ad3      	subs	r3, r2, r3
 800cc8e:	683a      	ldr	r2, [r7, #0]
 800cc90:	429a      	cmp	r2, r3
 800cc92:	d803      	bhi.n	800cc9c <HAL_SPI_Receive+0x166>
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc9a:	d102      	bne.n	800cca2 <HAL_SPI_Receive+0x16c>
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d102      	bne.n	800cca8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800cca2:	2303      	movs	r3, #3
 800cca4:	75fb      	strb	r3, [r7, #23]
          goto error;
 800cca6:	e04a      	b.n	800cd3e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ccac:	b29b      	uxth	r3, r3
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d1cb      	bne.n	800cc4a <HAL_SPI_Receive+0x114>
 800ccb2:	e031      	b.n	800cd18 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	689b      	ldr	r3, [r3, #8]
 800ccba:	f003 0301 	and.w	r3, r3, #1
 800ccbe:	2b01      	cmp	r3, #1
 800ccc0:	d113      	bne.n	800ccea <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	68da      	ldr	r2, [r3, #12]
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cccc:	b292      	uxth	r2, r2
 800ccce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccd4:	1c9a      	adds	r2, r3, #2
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ccde:	b29b      	uxth	r3, r3
 800cce0:	3b01      	subs	r3, #1
 800cce2:	b29a      	uxth	r2, r3
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800cce8:	e011      	b.n	800cd0e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ccea:	f7fc f8a7 	bl	8008e3c <HAL_GetTick>
 800ccee:	4602      	mov	r2, r0
 800ccf0:	693b      	ldr	r3, [r7, #16]
 800ccf2:	1ad3      	subs	r3, r2, r3
 800ccf4:	683a      	ldr	r2, [r7, #0]
 800ccf6:	429a      	cmp	r2, r3
 800ccf8:	d803      	bhi.n	800cd02 <HAL_SPI_Receive+0x1cc>
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd00:	d102      	bne.n	800cd08 <HAL_SPI_Receive+0x1d2>
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d102      	bne.n	800cd0e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800cd08:	2303      	movs	r3, #3
 800cd0a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800cd0c:	e017      	b.n	800cd3e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cd12:	b29b      	uxth	r3, r3
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d1cd      	bne.n	800ccb4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800cd18:	693a      	ldr	r2, [r7, #16]
 800cd1a:	6839      	ldr	r1, [r7, #0]
 800cd1c:	68f8      	ldr	r0, [r7, #12]
 800cd1e:	f000 fa45 	bl	800d1ac <SPI_EndRxTransaction>
 800cd22:	4603      	mov	r3, r0
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d002      	beq.n	800cd2e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	2220      	movs	r2, #32
 800cd2c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d002      	beq.n	800cd3c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800cd36:	2301      	movs	r3, #1
 800cd38:	75fb      	strb	r3, [r7, #23]
 800cd3a:	e000      	b.n	800cd3e <HAL_SPI_Receive+0x208>
  }

error :
 800cd3c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	2201      	movs	r2, #1
 800cd42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	2200      	movs	r2, #0
 800cd4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800cd4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd50:	4618      	mov	r0, r3
 800cd52:	3718      	adds	r7, #24
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bd80      	pop	{r7, pc}

0800cd58 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b08c      	sub	sp, #48	; 0x30
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	60f8      	str	r0, [r7, #12]
 800cd60:	60b9      	str	r1, [r7, #8]
 800cd62:	607a      	str	r2, [r7, #4]
 800cd64:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800cd66:	2301      	movs	r3, #1
 800cd68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800cd76:	2b01      	cmp	r3, #1
 800cd78:	d101      	bne.n	800cd7e <HAL_SPI_TransmitReceive+0x26>
 800cd7a:	2302      	movs	r3, #2
 800cd7c:	e18a      	b.n	800d094 <HAL_SPI_TransmitReceive+0x33c>
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	2201      	movs	r2, #1
 800cd82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cd86:	f7fc f859 	bl	8008e3c <HAL_GetTick>
 800cd8a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cd92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	685b      	ldr	r3, [r3, #4]
 800cd9a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800cd9c:	887b      	ldrh	r3, [r7, #2]
 800cd9e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800cda0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cda4:	2b01      	cmp	r3, #1
 800cda6:	d00f      	beq.n	800cdc8 <HAL_SPI_TransmitReceive+0x70>
 800cda8:	69fb      	ldr	r3, [r7, #28]
 800cdaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cdae:	d107      	bne.n	800cdc0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	689b      	ldr	r3, [r3, #8]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d103      	bne.n	800cdc0 <HAL_SPI_TransmitReceive+0x68>
 800cdb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cdbc:	2b04      	cmp	r3, #4
 800cdbe:	d003      	beq.n	800cdc8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800cdc0:	2302      	movs	r3, #2
 800cdc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800cdc6:	e15b      	b.n	800d080 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800cdc8:	68bb      	ldr	r3, [r7, #8]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d005      	beq.n	800cdda <HAL_SPI_TransmitReceive+0x82>
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d002      	beq.n	800cdda <HAL_SPI_TransmitReceive+0x82>
 800cdd4:	887b      	ldrh	r3, [r7, #2]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d103      	bne.n	800cde2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800cdda:	2301      	movs	r3, #1
 800cddc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800cde0:	e14e      	b.n	800d080 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cde8:	b2db      	uxtb	r3, r3
 800cdea:	2b04      	cmp	r3, #4
 800cdec:	d003      	beq.n	800cdf6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	2205      	movs	r2, #5
 800cdf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	687a      	ldr	r2, [r7, #4]
 800ce00:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	887a      	ldrh	r2, [r7, #2]
 800ce06:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	887a      	ldrh	r2, [r7, #2]
 800ce0c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	68ba      	ldr	r2, [r7, #8]
 800ce12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	887a      	ldrh	r2, [r7, #2]
 800ce18:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	887a      	ldrh	r2, [r7, #2]
 800ce1e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	2200      	movs	r2, #0
 800ce24:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	2200      	movs	r2, #0
 800ce2a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce36:	2b40      	cmp	r3, #64	; 0x40
 800ce38:	d007      	beq.n	800ce4a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	681a      	ldr	r2, [r3, #0]
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ce48:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	68db      	ldr	r3, [r3, #12]
 800ce4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ce52:	d178      	bne.n	800cf46 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	685b      	ldr	r3, [r3, #4]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d002      	beq.n	800ce62 <HAL_SPI_TransmitReceive+0x10a>
 800ce5c:	8b7b      	ldrh	r3, [r7, #26]
 800ce5e:	2b01      	cmp	r3, #1
 800ce60:	d166      	bne.n	800cf30 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce66:	881a      	ldrh	r2, [r3, #0]
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce72:	1c9a      	adds	r2, r3, #2
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ce7c:	b29b      	uxth	r3, r3
 800ce7e:	3b01      	subs	r3, #1
 800ce80:	b29a      	uxth	r2, r3
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ce86:	e053      	b.n	800cf30 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	689b      	ldr	r3, [r3, #8]
 800ce8e:	f003 0302 	and.w	r3, r3, #2
 800ce92:	2b02      	cmp	r3, #2
 800ce94:	d11b      	bne.n	800cece <HAL_SPI_TransmitReceive+0x176>
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ce9a:	b29b      	uxth	r3, r3
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d016      	beq.n	800cece <HAL_SPI_TransmitReceive+0x176>
 800cea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cea2:	2b01      	cmp	r3, #1
 800cea4:	d113      	bne.n	800cece <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceaa:	881a      	ldrh	r2, [r3, #0]
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceb6:	1c9a      	adds	r2, r3, #2
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cec0:	b29b      	uxth	r3, r3
 800cec2:	3b01      	subs	r3, #1
 800cec4:	b29a      	uxth	r2, r3
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ceca:	2300      	movs	r3, #0
 800cecc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	689b      	ldr	r3, [r3, #8]
 800ced4:	f003 0301 	and.w	r3, r3, #1
 800ced8:	2b01      	cmp	r3, #1
 800ceda:	d119      	bne.n	800cf10 <HAL_SPI_TransmitReceive+0x1b8>
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cee0:	b29b      	uxth	r3, r3
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d014      	beq.n	800cf10 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	68da      	ldr	r2, [r3, #12]
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cef0:	b292      	uxth	r2, r2
 800cef2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cef8:	1c9a      	adds	r2, r3, #2
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cf02:	b29b      	uxth	r3, r3
 800cf04:	3b01      	subs	r3, #1
 800cf06:	b29a      	uxth	r2, r3
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800cf0c:	2301      	movs	r3, #1
 800cf0e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800cf10:	f7fb ff94 	bl	8008e3c <HAL_GetTick>
 800cf14:	4602      	mov	r2, r0
 800cf16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf18:	1ad3      	subs	r3, r2, r3
 800cf1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cf1c:	429a      	cmp	r2, r3
 800cf1e:	d807      	bhi.n	800cf30 <HAL_SPI_TransmitReceive+0x1d8>
 800cf20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf26:	d003      	beq.n	800cf30 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800cf28:	2303      	movs	r3, #3
 800cf2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800cf2e:	e0a7      	b.n	800d080 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cf34:	b29b      	uxth	r3, r3
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d1a6      	bne.n	800ce88 <HAL_SPI_TransmitReceive+0x130>
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cf3e:	b29b      	uxth	r3, r3
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d1a1      	bne.n	800ce88 <HAL_SPI_TransmitReceive+0x130>
 800cf44:	e07c      	b.n	800d040 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	685b      	ldr	r3, [r3, #4]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d002      	beq.n	800cf54 <HAL_SPI_TransmitReceive+0x1fc>
 800cf4e:	8b7b      	ldrh	r3, [r7, #26]
 800cf50:	2b01      	cmp	r3, #1
 800cf52:	d16b      	bne.n	800d02c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	330c      	adds	r3, #12
 800cf5e:	7812      	ldrb	r2, [r2, #0]
 800cf60:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf66:	1c5a      	adds	r2, r3, #1
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cf70:	b29b      	uxth	r3, r3
 800cf72:	3b01      	subs	r3, #1
 800cf74:	b29a      	uxth	r2, r3
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cf7a:	e057      	b.n	800d02c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	689b      	ldr	r3, [r3, #8]
 800cf82:	f003 0302 	and.w	r3, r3, #2
 800cf86:	2b02      	cmp	r3, #2
 800cf88:	d11c      	bne.n	800cfc4 <HAL_SPI_TransmitReceive+0x26c>
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cf8e:	b29b      	uxth	r3, r3
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d017      	beq.n	800cfc4 <HAL_SPI_TransmitReceive+0x26c>
 800cf94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf96:	2b01      	cmp	r3, #1
 800cf98:	d114      	bne.n	800cfc4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	330c      	adds	r3, #12
 800cfa4:	7812      	ldrb	r2, [r2, #0]
 800cfa6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfac:	1c5a      	adds	r2, r3, #1
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cfb6:	b29b      	uxth	r3, r3
 800cfb8:	3b01      	subs	r3, #1
 800cfba:	b29a      	uxth	r2, r3
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	689b      	ldr	r3, [r3, #8]
 800cfca:	f003 0301 	and.w	r3, r3, #1
 800cfce:	2b01      	cmp	r3, #1
 800cfd0:	d119      	bne.n	800d006 <HAL_SPI_TransmitReceive+0x2ae>
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cfd6:	b29b      	uxth	r3, r3
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d014      	beq.n	800d006 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	68da      	ldr	r2, [r3, #12]
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfe6:	b2d2      	uxtb	r2, r2
 800cfe8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfee:	1c5a      	adds	r2, r3, #1
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cff8:	b29b      	uxth	r3, r3
 800cffa:	3b01      	subs	r3, #1
 800cffc:	b29a      	uxth	r2, r3
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d002:	2301      	movs	r3, #1
 800d004:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800d006:	f7fb ff19 	bl	8008e3c <HAL_GetTick>
 800d00a:	4602      	mov	r2, r0
 800d00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d00e:	1ad3      	subs	r3, r2, r3
 800d010:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d012:	429a      	cmp	r2, r3
 800d014:	d803      	bhi.n	800d01e <HAL_SPI_TransmitReceive+0x2c6>
 800d016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d01c:	d102      	bne.n	800d024 <HAL_SPI_TransmitReceive+0x2cc>
 800d01e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d020:	2b00      	cmp	r3, #0
 800d022:	d103      	bne.n	800d02c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800d024:	2303      	movs	r3, #3
 800d026:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800d02a:	e029      	b.n	800d080 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d030:	b29b      	uxth	r3, r3
 800d032:	2b00      	cmp	r3, #0
 800d034:	d1a2      	bne.n	800cf7c <HAL_SPI_TransmitReceive+0x224>
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d03a:	b29b      	uxth	r3, r3
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d19d      	bne.n	800cf7c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d042:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d044:	68f8      	ldr	r0, [r7, #12]
 800d046:	f000 f917 	bl	800d278 <SPI_EndRxTxTransaction>
 800d04a:	4603      	mov	r3, r0
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d006      	beq.n	800d05e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800d050:	2301      	movs	r3, #1
 800d052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	2220      	movs	r2, #32
 800d05a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800d05c:	e010      	b.n	800d080 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	689b      	ldr	r3, [r3, #8]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d10b      	bne.n	800d07e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d066:	2300      	movs	r3, #0
 800d068:	617b      	str	r3, [r7, #20]
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	68db      	ldr	r3, [r3, #12]
 800d070:	617b      	str	r3, [r7, #20]
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	689b      	ldr	r3, [r3, #8]
 800d078:	617b      	str	r3, [r7, #20]
 800d07a:	697b      	ldr	r3, [r7, #20]
 800d07c:	e000      	b.n	800d080 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800d07e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	2201      	movs	r2, #1
 800d084:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	2200      	movs	r2, #0
 800d08c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d090:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800d094:	4618      	mov	r0, r3
 800d096:	3730      	adds	r7, #48	; 0x30
 800d098:	46bd      	mov	sp, r7
 800d09a:	bd80      	pop	{r7, pc}

0800d09c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b088      	sub	sp, #32
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	60f8      	str	r0, [r7, #12]
 800d0a4:	60b9      	str	r1, [r7, #8]
 800d0a6:	603b      	str	r3, [r7, #0]
 800d0a8:	4613      	mov	r3, r2
 800d0aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800d0ac:	f7fb fec6 	bl	8008e3c <HAL_GetTick>
 800d0b0:	4602      	mov	r2, r0
 800d0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0b4:	1a9b      	subs	r3, r3, r2
 800d0b6:	683a      	ldr	r2, [r7, #0]
 800d0b8:	4413      	add	r3, r2
 800d0ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800d0bc:	f7fb febe 	bl	8008e3c <HAL_GetTick>
 800d0c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800d0c2:	4b39      	ldr	r3, [pc, #228]	; (800d1a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	015b      	lsls	r3, r3, #5
 800d0c8:	0d1b      	lsrs	r3, r3, #20
 800d0ca:	69fa      	ldr	r2, [r7, #28]
 800d0cc:	fb02 f303 	mul.w	r3, r2, r3
 800d0d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d0d2:	e054      	b.n	800d17e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0da:	d050      	beq.n	800d17e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d0dc:	f7fb feae 	bl	8008e3c <HAL_GetTick>
 800d0e0:	4602      	mov	r2, r0
 800d0e2:	69bb      	ldr	r3, [r7, #24]
 800d0e4:	1ad3      	subs	r3, r2, r3
 800d0e6:	69fa      	ldr	r2, [r7, #28]
 800d0e8:	429a      	cmp	r2, r3
 800d0ea:	d902      	bls.n	800d0f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800d0ec:	69fb      	ldr	r3, [r7, #28]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d13d      	bne.n	800d16e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	685a      	ldr	r2, [r3, #4]
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d100:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	685b      	ldr	r3, [r3, #4]
 800d106:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d10a:	d111      	bne.n	800d130 <SPI_WaitFlagStateUntilTimeout+0x94>
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	689b      	ldr	r3, [r3, #8]
 800d110:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d114:	d004      	beq.n	800d120 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	689b      	ldr	r3, [r3, #8]
 800d11a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d11e:	d107      	bne.n	800d130 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	681a      	ldr	r2, [r3, #0]
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d12e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d134:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d138:	d10f      	bne.n	800d15a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	681a      	ldr	r2, [r3, #0]
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d148:	601a      	str	r2, [r3, #0]
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	681a      	ldr	r2, [r3, #0]
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d158:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	2201      	movs	r2, #1
 800d15e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	2200      	movs	r2, #0
 800d166:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800d16a:	2303      	movs	r3, #3
 800d16c:	e017      	b.n	800d19e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800d16e:	697b      	ldr	r3, [r7, #20]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d101      	bne.n	800d178 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800d174:	2300      	movs	r3, #0
 800d176:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800d178:	697b      	ldr	r3, [r7, #20]
 800d17a:	3b01      	subs	r3, #1
 800d17c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	689a      	ldr	r2, [r3, #8]
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	4013      	ands	r3, r2
 800d188:	68ba      	ldr	r2, [r7, #8]
 800d18a:	429a      	cmp	r2, r3
 800d18c:	bf0c      	ite	eq
 800d18e:	2301      	moveq	r3, #1
 800d190:	2300      	movne	r3, #0
 800d192:	b2db      	uxtb	r3, r3
 800d194:	461a      	mov	r2, r3
 800d196:	79fb      	ldrb	r3, [r7, #7]
 800d198:	429a      	cmp	r2, r3
 800d19a:	d19b      	bne.n	800d0d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800d19c:	2300      	movs	r3, #0
}
 800d19e:	4618      	mov	r0, r3
 800d1a0:	3720      	adds	r7, #32
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}
 800d1a6:	bf00      	nop
 800d1a8:	20000088 	.word	0x20000088

0800d1ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b086      	sub	sp, #24
 800d1b0:	af02      	add	r7, sp, #8
 800d1b2:	60f8      	str	r0, [r7, #12]
 800d1b4:	60b9      	str	r1, [r7, #8]
 800d1b6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	685b      	ldr	r3, [r3, #4]
 800d1bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d1c0:	d111      	bne.n	800d1e6 <SPI_EndRxTransaction+0x3a>
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	689b      	ldr	r3, [r3, #8]
 800d1c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d1ca:	d004      	beq.n	800d1d6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	689b      	ldr	r3, [r3, #8]
 800d1d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d1d4:	d107      	bne.n	800d1e6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	681a      	ldr	r2, [r3, #0]
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d1e4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	685b      	ldr	r3, [r3, #4]
 800d1ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d1ee:	d12a      	bne.n	800d246 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	689b      	ldr	r3, [r3, #8]
 800d1f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d1f8:	d012      	beq.n	800d220 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	9300      	str	r3, [sp, #0]
 800d1fe:	68bb      	ldr	r3, [r7, #8]
 800d200:	2200      	movs	r2, #0
 800d202:	2180      	movs	r1, #128	; 0x80
 800d204:	68f8      	ldr	r0, [r7, #12]
 800d206:	f7ff ff49 	bl	800d09c <SPI_WaitFlagStateUntilTimeout>
 800d20a:	4603      	mov	r3, r0
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d02d      	beq.n	800d26c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d214:	f043 0220 	orr.w	r2, r3, #32
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800d21c:	2303      	movs	r3, #3
 800d21e:	e026      	b.n	800d26e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	9300      	str	r3, [sp, #0]
 800d224:	68bb      	ldr	r3, [r7, #8]
 800d226:	2200      	movs	r2, #0
 800d228:	2101      	movs	r1, #1
 800d22a:	68f8      	ldr	r0, [r7, #12]
 800d22c:	f7ff ff36 	bl	800d09c <SPI_WaitFlagStateUntilTimeout>
 800d230:	4603      	mov	r3, r0
 800d232:	2b00      	cmp	r3, #0
 800d234:	d01a      	beq.n	800d26c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d23a:	f043 0220 	orr.w	r2, r3, #32
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800d242:	2303      	movs	r3, #3
 800d244:	e013      	b.n	800d26e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	9300      	str	r3, [sp, #0]
 800d24a:	68bb      	ldr	r3, [r7, #8]
 800d24c:	2200      	movs	r2, #0
 800d24e:	2101      	movs	r1, #1
 800d250:	68f8      	ldr	r0, [r7, #12]
 800d252:	f7ff ff23 	bl	800d09c <SPI_WaitFlagStateUntilTimeout>
 800d256:	4603      	mov	r3, r0
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d007      	beq.n	800d26c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d260:	f043 0220 	orr.w	r2, r3, #32
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800d268:	2303      	movs	r3, #3
 800d26a:	e000      	b.n	800d26e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800d26c:	2300      	movs	r3, #0
}
 800d26e:	4618      	mov	r0, r3
 800d270:	3710      	adds	r7, #16
 800d272:	46bd      	mov	sp, r7
 800d274:	bd80      	pop	{r7, pc}
	...

0800d278 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b088      	sub	sp, #32
 800d27c:	af02      	add	r7, sp, #8
 800d27e:	60f8      	str	r0, [r7, #12]
 800d280:	60b9      	str	r1, [r7, #8]
 800d282:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800d284:	4b1b      	ldr	r3, [pc, #108]	; (800d2f4 <SPI_EndRxTxTransaction+0x7c>)
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	4a1b      	ldr	r2, [pc, #108]	; (800d2f8 <SPI_EndRxTxTransaction+0x80>)
 800d28a:	fba2 2303 	umull	r2, r3, r2, r3
 800d28e:	0d5b      	lsrs	r3, r3, #21
 800d290:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d294:	fb02 f303 	mul.w	r3, r2, r3
 800d298:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	685b      	ldr	r3, [r3, #4]
 800d29e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d2a2:	d112      	bne.n	800d2ca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	9300      	str	r3, [sp, #0]
 800d2a8:	68bb      	ldr	r3, [r7, #8]
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	2180      	movs	r1, #128	; 0x80
 800d2ae:	68f8      	ldr	r0, [r7, #12]
 800d2b0:	f7ff fef4 	bl	800d09c <SPI_WaitFlagStateUntilTimeout>
 800d2b4:	4603      	mov	r3, r0
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d016      	beq.n	800d2e8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2be:	f043 0220 	orr.w	r2, r3, #32
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800d2c6:	2303      	movs	r3, #3
 800d2c8:	e00f      	b.n	800d2ea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800d2ca:	697b      	ldr	r3, [r7, #20]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d00a      	beq.n	800d2e6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800d2d0:	697b      	ldr	r3, [r7, #20]
 800d2d2:	3b01      	subs	r3, #1
 800d2d4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	689b      	ldr	r3, [r3, #8]
 800d2dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2e0:	2b80      	cmp	r3, #128	; 0x80
 800d2e2:	d0f2      	beq.n	800d2ca <SPI_EndRxTxTransaction+0x52>
 800d2e4:	e000      	b.n	800d2e8 <SPI_EndRxTxTransaction+0x70>
        break;
 800d2e6:	bf00      	nop
  }

  return HAL_OK;
 800d2e8:	2300      	movs	r3, #0
}
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	3718      	adds	r7, #24
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}
 800d2f2:	bf00      	nop
 800d2f4:	20000088 	.word	0x20000088
 800d2f8:	165e9f81 	.word	0x165e9f81

0800d2fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b082      	sub	sp, #8
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d101      	bne.n	800d30e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d30a:	2301      	movs	r3, #1
 800d30c:	e041      	b.n	800d392 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d314:	b2db      	uxtb	r3, r3
 800d316:	2b00      	cmp	r3, #0
 800d318:	d106      	bne.n	800d328 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	2200      	movs	r2, #0
 800d31e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d322:	6878      	ldr	r0, [r7, #4]
 800d324:	f7f6 f8b8 	bl	8003498 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	2202      	movs	r2, #2
 800d32c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681a      	ldr	r2, [r3, #0]
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	3304      	adds	r3, #4
 800d338:	4619      	mov	r1, r3
 800d33a:	4610      	mov	r0, r2
 800d33c:	f000 fcea 	bl	800dd14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	2201      	movs	r2, #1
 800d344:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2201      	movs	r2, #1
 800d34c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2201      	movs	r2, #1
 800d354:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	2201      	movs	r2, #1
 800d35c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	2201      	movs	r2, #1
 800d364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	2201      	movs	r2, #1
 800d36c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	2201      	movs	r2, #1
 800d374:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2201      	movs	r2, #1
 800d37c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	2201      	movs	r2, #1
 800d384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2201      	movs	r2, #1
 800d38c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d390:	2300      	movs	r3, #0
}
 800d392:	4618      	mov	r0, r3
 800d394:	3708      	adds	r7, #8
 800d396:	46bd      	mov	sp, r7
 800d398:	bd80      	pop	{r7, pc}
	...

0800d39c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d39c:	b480      	push	{r7}
 800d39e:	b085      	sub	sp, #20
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d3aa:	b2db      	uxtb	r3, r3
 800d3ac:	2b01      	cmp	r3, #1
 800d3ae:	d001      	beq.n	800d3b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	e04e      	b.n	800d452 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2202      	movs	r2, #2
 800d3b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	68da      	ldr	r2, [r3, #12]
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	f042 0201 	orr.w	r2, r2, #1
 800d3ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	4a23      	ldr	r2, [pc, #140]	; (800d460 <HAL_TIM_Base_Start_IT+0xc4>)
 800d3d2:	4293      	cmp	r3, r2
 800d3d4:	d022      	beq.n	800d41c <HAL_TIM_Base_Start_IT+0x80>
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d3de:	d01d      	beq.n	800d41c <HAL_TIM_Base_Start_IT+0x80>
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	4a1f      	ldr	r2, [pc, #124]	; (800d464 <HAL_TIM_Base_Start_IT+0xc8>)
 800d3e6:	4293      	cmp	r3, r2
 800d3e8:	d018      	beq.n	800d41c <HAL_TIM_Base_Start_IT+0x80>
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	4a1e      	ldr	r2, [pc, #120]	; (800d468 <HAL_TIM_Base_Start_IT+0xcc>)
 800d3f0:	4293      	cmp	r3, r2
 800d3f2:	d013      	beq.n	800d41c <HAL_TIM_Base_Start_IT+0x80>
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	4a1c      	ldr	r2, [pc, #112]	; (800d46c <HAL_TIM_Base_Start_IT+0xd0>)
 800d3fa:	4293      	cmp	r3, r2
 800d3fc:	d00e      	beq.n	800d41c <HAL_TIM_Base_Start_IT+0x80>
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	4a1b      	ldr	r2, [pc, #108]	; (800d470 <HAL_TIM_Base_Start_IT+0xd4>)
 800d404:	4293      	cmp	r3, r2
 800d406:	d009      	beq.n	800d41c <HAL_TIM_Base_Start_IT+0x80>
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	4a19      	ldr	r2, [pc, #100]	; (800d474 <HAL_TIM_Base_Start_IT+0xd8>)
 800d40e:	4293      	cmp	r3, r2
 800d410:	d004      	beq.n	800d41c <HAL_TIM_Base_Start_IT+0x80>
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	4a18      	ldr	r2, [pc, #96]	; (800d478 <HAL_TIM_Base_Start_IT+0xdc>)
 800d418:	4293      	cmp	r3, r2
 800d41a:	d111      	bne.n	800d440 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	689b      	ldr	r3, [r3, #8]
 800d422:	f003 0307 	and.w	r3, r3, #7
 800d426:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	2b06      	cmp	r3, #6
 800d42c:	d010      	beq.n	800d450 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	681a      	ldr	r2, [r3, #0]
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	f042 0201 	orr.w	r2, r2, #1
 800d43c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d43e:	e007      	b.n	800d450 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	681a      	ldr	r2, [r3, #0]
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	f042 0201 	orr.w	r2, r2, #1
 800d44e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d450:	2300      	movs	r3, #0
}
 800d452:	4618      	mov	r0, r3
 800d454:	3714      	adds	r7, #20
 800d456:	46bd      	mov	sp, r7
 800d458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45c:	4770      	bx	lr
 800d45e:	bf00      	nop
 800d460:	40010000 	.word	0x40010000
 800d464:	40000400 	.word	0x40000400
 800d468:	40000800 	.word	0x40000800
 800d46c:	40000c00 	.word	0x40000c00
 800d470:	40010400 	.word	0x40010400
 800d474:	40014000 	.word	0x40014000
 800d478:	40001800 	.word	0x40001800

0800d47c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b082      	sub	sp, #8
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d101      	bne.n	800d48e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d48a:	2301      	movs	r3, #1
 800d48c:	e041      	b.n	800d512 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d494:	b2db      	uxtb	r3, r3
 800d496:	2b00      	cmp	r3, #0
 800d498:	d106      	bne.n	800d4a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2200      	movs	r2, #0
 800d49e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d4a2:	6878      	ldr	r0, [r7, #4]
 800d4a4:	f000 f839 	bl	800d51a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	2202      	movs	r2, #2
 800d4ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	681a      	ldr	r2, [r3, #0]
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	3304      	adds	r3, #4
 800d4b8:	4619      	mov	r1, r3
 800d4ba:	4610      	mov	r0, r2
 800d4bc:	f000 fc2a 	bl	800dd14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	2201      	movs	r2, #1
 800d4c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	2201      	movs	r2, #1
 800d4cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	2201      	movs	r2, #1
 800d4d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	2201      	movs	r2, #1
 800d4dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2201      	movs	r2, #1
 800d4e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	2201      	movs	r2, #1
 800d4ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2201      	movs	r2, #1
 800d4f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2201      	movs	r2, #1
 800d4fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2201      	movs	r2, #1
 800d504:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2201      	movs	r2, #1
 800d50c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d510:	2300      	movs	r3, #0
}
 800d512:	4618      	mov	r0, r3
 800d514:	3708      	adds	r7, #8
 800d516:	46bd      	mov	sp, r7
 800d518:	bd80      	pop	{r7, pc}

0800d51a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d51a:	b480      	push	{r7}
 800d51c:	b083      	sub	sp, #12
 800d51e:	af00      	add	r7, sp, #0
 800d520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d522:	bf00      	nop
 800d524:	370c      	adds	r7, #12
 800d526:	46bd      	mov	sp, r7
 800d528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52c:	4770      	bx	lr
	...

0800d530 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b084      	sub	sp, #16
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
 800d538:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d53a:	683b      	ldr	r3, [r7, #0]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d109      	bne.n	800d554 <HAL_TIM_PWM_Start+0x24>
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d546:	b2db      	uxtb	r3, r3
 800d548:	2b01      	cmp	r3, #1
 800d54a:	bf14      	ite	ne
 800d54c:	2301      	movne	r3, #1
 800d54e:	2300      	moveq	r3, #0
 800d550:	b2db      	uxtb	r3, r3
 800d552:	e022      	b.n	800d59a <HAL_TIM_PWM_Start+0x6a>
 800d554:	683b      	ldr	r3, [r7, #0]
 800d556:	2b04      	cmp	r3, #4
 800d558:	d109      	bne.n	800d56e <HAL_TIM_PWM_Start+0x3e>
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d560:	b2db      	uxtb	r3, r3
 800d562:	2b01      	cmp	r3, #1
 800d564:	bf14      	ite	ne
 800d566:	2301      	movne	r3, #1
 800d568:	2300      	moveq	r3, #0
 800d56a:	b2db      	uxtb	r3, r3
 800d56c:	e015      	b.n	800d59a <HAL_TIM_PWM_Start+0x6a>
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	2b08      	cmp	r3, #8
 800d572:	d109      	bne.n	800d588 <HAL_TIM_PWM_Start+0x58>
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d57a:	b2db      	uxtb	r3, r3
 800d57c:	2b01      	cmp	r3, #1
 800d57e:	bf14      	ite	ne
 800d580:	2301      	movne	r3, #1
 800d582:	2300      	moveq	r3, #0
 800d584:	b2db      	uxtb	r3, r3
 800d586:	e008      	b.n	800d59a <HAL_TIM_PWM_Start+0x6a>
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d58e:	b2db      	uxtb	r3, r3
 800d590:	2b01      	cmp	r3, #1
 800d592:	bf14      	ite	ne
 800d594:	2301      	movne	r3, #1
 800d596:	2300      	moveq	r3, #0
 800d598:	b2db      	uxtb	r3, r3
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d001      	beq.n	800d5a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800d59e:	2301      	movs	r3, #1
 800d5a0:	e07c      	b.n	800d69c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d104      	bne.n	800d5b2 <HAL_TIM_PWM_Start+0x82>
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2202      	movs	r2, #2
 800d5ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d5b0:	e013      	b.n	800d5da <HAL_TIM_PWM_Start+0xaa>
 800d5b2:	683b      	ldr	r3, [r7, #0]
 800d5b4:	2b04      	cmp	r3, #4
 800d5b6:	d104      	bne.n	800d5c2 <HAL_TIM_PWM_Start+0x92>
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2202      	movs	r2, #2
 800d5bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d5c0:	e00b      	b.n	800d5da <HAL_TIM_PWM_Start+0xaa>
 800d5c2:	683b      	ldr	r3, [r7, #0]
 800d5c4:	2b08      	cmp	r3, #8
 800d5c6:	d104      	bne.n	800d5d2 <HAL_TIM_PWM_Start+0xa2>
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	2202      	movs	r2, #2
 800d5cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d5d0:	e003      	b.n	800d5da <HAL_TIM_PWM_Start+0xaa>
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2202      	movs	r2, #2
 800d5d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	2201      	movs	r2, #1
 800d5e0:	6839      	ldr	r1, [r7, #0]
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	f000 fe80 	bl	800e2e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	4a2d      	ldr	r2, [pc, #180]	; (800d6a4 <HAL_TIM_PWM_Start+0x174>)
 800d5ee:	4293      	cmp	r3, r2
 800d5f0:	d004      	beq.n	800d5fc <HAL_TIM_PWM_Start+0xcc>
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	4a2c      	ldr	r2, [pc, #176]	; (800d6a8 <HAL_TIM_PWM_Start+0x178>)
 800d5f8:	4293      	cmp	r3, r2
 800d5fa:	d101      	bne.n	800d600 <HAL_TIM_PWM_Start+0xd0>
 800d5fc:	2301      	movs	r3, #1
 800d5fe:	e000      	b.n	800d602 <HAL_TIM_PWM_Start+0xd2>
 800d600:	2300      	movs	r3, #0
 800d602:	2b00      	cmp	r3, #0
 800d604:	d007      	beq.n	800d616 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d614:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	4a22      	ldr	r2, [pc, #136]	; (800d6a4 <HAL_TIM_PWM_Start+0x174>)
 800d61c:	4293      	cmp	r3, r2
 800d61e:	d022      	beq.n	800d666 <HAL_TIM_PWM_Start+0x136>
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d628:	d01d      	beq.n	800d666 <HAL_TIM_PWM_Start+0x136>
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	4a1f      	ldr	r2, [pc, #124]	; (800d6ac <HAL_TIM_PWM_Start+0x17c>)
 800d630:	4293      	cmp	r3, r2
 800d632:	d018      	beq.n	800d666 <HAL_TIM_PWM_Start+0x136>
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	4a1d      	ldr	r2, [pc, #116]	; (800d6b0 <HAL_TIM_PWM_Start+0x180>)
 800d63a:	4293      	cmp	r3, r2
 800d63c:	d013      	beq.n	800d666 <HAL_TIM_PWM_Start+0x136>
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	4a1c      	ldr	r2, [pc, #112]	; (800d6b4 <HAL_TIM_PWM_Start+0x184>)
 800d644:	4293      	cmp	r3, r2
 800d646:	d00e      	beq.n	800d666 <HAL_TIM_PWM_Start+0x136>
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	4a16      	ldr	r2, [pc, #88]	; (800d6a8 <HAL_TIM_PWM_Start+0x178>)
 800d64e:	4293      	cmp	r3, r2
 800d650:	d009      	beq.n	800d666 <HAL_TIM_PWM_Start+0x136>
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	4a18      	ldr	r2, [pc, #96]	; (800d6b8 <HAL_TIM_PWM_Start+0x188>)
 800d658:	4293      	cmp	r3, r2
 800d65a:	d004      	beq.n	800d666 <HAL_TIM_PWM_Start+0x136>
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	4a16      	ldr	r2, [pc, #88]	; (800d6bc <HAL_TIM_PWM_Start+0x18c>)
 800d662:	4293      	cmp	r3, r2
 800d664:	d111      	bne.n	800d68a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	689b      	ldr	r3, [r3, #8]
 800d66c:	f003 0307 	and.w	r3, r3, #7
 800d670:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	2b06      	cmp	r3, #6
 800d676:	d010      	beq.n	800d69a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	681a      	ldr	r2, [r3, #0]
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	f042 0201 	orr.w	r2, r2, #1
 800d686:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d688:	e007      	b.n	800d69a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	681a      	ldr	r2, [r3, #0]
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	f042 0201 	orr.w	r2, r2, #1
 800d698:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d69a:	2300      	movs	r3, #0
}
 800d69c:	4618      	mov	r0, r3
 800d69e:	3710      	adds	r7, #16
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bd80      	pop	{r7, pc}
 800d6a4:	40010000 	.word	0x40010000
 800d6a8:	40010400 	.word	0x40010400
 800d6ac:	40000400 	.word	0x40000400
 800d6b0:	40000800 	.word	0x40000800
 800d6b4:	40000c00 	.word	0x40000c00
 800d6b8:	40014000 	.word	0x40014000
 800d6bc:	40001800 	.word	0x40001800

0800d6c0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b082      	sub	sp, #8
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
 800d6c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	6839      	ldr	r1, [r7, #0]
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	f000 fe08 	bl	800e2e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	4a2e      	ldr	r2, [pc, #184]	; (800d798 <HAL_TIM_PWM_Stop+0xd8>)
 800d6de:	4293      	cmp	r3, r2
 800d6e0:	d004      	beq.n	800d6ec <HAL_TIM_PWM_Stop+0x2c>
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	4a2d      	ldr	r2, [pc, #180]	; (800d79c <HAL_TIM_PWM_Stop+0xdc>)
 800d6e8:	4293      	cmp	r3, r2
 800d6ea:	d101      	bne.n	800d6f0 <HAL_TIM_PWM_Stop+0x30>
 800d6ec:	2301      	movs	r3, #1
 800d6ee:	e000      	b.n	800d6f2 <HAL_TIM_PWM_Stop+0x32>
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d017      	beq.n	800d726 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	6a1a      	ldr	r2, [r3, #32]
 800d6fc:	f241 1311 	movw	r3, #4369	; 0x1111
 800d700:	4013      	ands	r3, r2
 800d702:	2b00      	cmp	r3, #0
 800d704:	d10f      	bne.n	800d726 <HAL_TIM_PWM_Stop+0x66>
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	6a1a      	ldr	r2, [r3, #32]
 800d70c:	f240 4344 	movw	r3, #1092	; 0x444
 800d710:	4013      	ands	r3, r2
 800d712:	2b00      	cmp	r3, #0
 800d714:	d107      	bne.n	800d726 <HAL_TIM_PWM_Stop+0x66>
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d724:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	6a1a      	ldr	r2, [r3, #32]
 800d72c:	f241 1311 	movw	r3, #4369	; 0x1111
 800d730:	4013      	ands	r3, r2
 800d732:	2b00      	cmp	r3, #0
 800d734:	d10f      	bne.n	800d756 <HAL_TIM_PWM_Stop+0x96>
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	6a1a      	ldr	r2, [r3, #32]
 800d73c:	f240 4344 	movw	r3, #1092	; 0x444
 800d740:	4013      	ands	r3, r2
 800d742:	2b00      	cmp	r3, #0
 800d744:	d107      	bne.n	800d756 <HAL_TIM_PWM_Stop+0x96>
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	681a      	ldr	r2, [r3, #0]
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	f022 0201 	bic.w	r2, r2, #1
 800d754:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d104      	bne.n	800d766 <HAL_TIM_PWM_Stop+0xa6>
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2201      	movs	r2, #1
 800d760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d764:	e013      	b.n	800d78e <HAL_TIM_PWM_Stop+0xce>
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	2b04      	cmp	r3, #4
 800d76a:	d104      	bne.n	800d776 <HAL_TIM_PWM_Stop+0xb6>
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	2201      	movs	r2, #1
 800d770:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d774:	e00b      	b.n	800d78e <HAL_TIM_PWM_Stop+0xce>
 800d776:	683b      	ldr	r3, [r7, #0]
 800d778:	2b08      	cmp	r3, #8
 800d77a:	d104      	bne.n	800d786 <HAL_TIM_PWM_Stop+0xc6>
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	2201      	movs	r2, #1
 800d780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d784:	e003      	b.n	800d78e <HAL_TIM_PWM_Stop+0xce>
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2201      	movs	r2, #1
 800d78a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800d78e:	2300      	movs	r3, #0
}
 800d790:	4618      	mov	r0, r3
 800d792:	3708      	adds	r7, #8
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}
 800d798:	40010000 	.word	0x40010000
 800d79c:	40010400 	.word	0x40010400

0800d7a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b082      	sub	sp, #8
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	691b      	ldr	r3, [r3, #16]
 800d7ae:	f003 0302 	and.w	r3, r3, #2
 800d7b2:	2b02      	cmp	r3, #2
 800d7b4:	d122      	bne.n	800d7fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	68db      	ldr	r3, [r3, #12]
 800d7bc:	f003 0302 	and.w	r3, r3, #2
 800d7c0:	2b02      	cmp	r3, #2
 800d7c2:	d11b      	bne.n	800d7fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	f06f 0202 	mvn.w	r2, #2
 800d7cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	2201      	movs	r2, #1
 800d7d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	699b      	ldr	r3, [r3, #24]
 800d7da:	f003 0303 	and.w	r3, r3, #3
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d003      	beq.n	800d7ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d7e2:	6878      	ldr	r0, [r7, #4]
 800d7e4:	f000 fa77 	bl	800dcd6 <HAL_TIM_IC_CaptureCallback>
 800d7e8:	e005      	b.n	800d7f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d7ea:	6878      	ldr	r0, [r7, #4]
 800d7ec:	f000 fa69 	bl	800dcc2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d7f0:	6878      	ldr	r0, [r7, #4]
 800d7f2:	f000 fa7a 	bl	800dcea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	691b      	ldr	r3, [r3, #16]
 800d802:	f003 0304 	and.w	r3, r3, #4
 800d806:	2b04      	cmp	r3, #4
 800d808:	d122      	bne.n	800d850 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	68db      	ldr	r3, [r3, #12]
 800d810:	f003 0304 	and.w	r3, r3, #4
 800d814:	2b04      	cmp	r3, #4
 800d816:	d11b      	bne.n	800d850 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	f06f 0204 	mvn.w	r2, #4
 800d820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	2202      	movs	r2, #2
 800d826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	699b      	ldr	r3, [r3, #24]
 800d82e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d832:	2b00      	cmp	r3, #0
 800d834:	d003      	beq.n	800d83e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d836:	6878      	ldr	r0, [r7, #4]
 800d838:	f000 fa4d 	bl	800dcd6 <HAL_TIM_IC_CaptureCallback>
 800d83c:	e005      	b.n	800d84a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d83e:	6878      	ldr	r0, [r7, #4]
 800d840:	f000 fa3f 	bl	800dcc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d844:	6878      	ldr	r0, [r7, #4]
 800d846:	f000 fa50 	bl	800dcea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	2200      	movs	r2, #0
 800d84e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	691b      	ldr	r3, [r3, #16]
 800d856:	f003 0308 	and.w	r3, r3, #8
 800d85a:	2b08      	cmp	r3, #8
 800d85c:	d122      	bne.n	800d8a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	68db      	ldr	r3, [r3, #12]
 800d864:	f003 0308 	and.w	r3, r3, #8
 800d868:	2b08      	cmp	r3, #8
 800d86a:	d11b      	bne.n	800d8a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	f06f 0208 	mvn.w	r2, #8
 800d874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2204      	movs	r2, #4
 800d87a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	69db      	ldr	r3, [r3, #28]
 800d882:	f003 0303 	and.w	r3, r3, #3
 800d886:	2b00      	cmp	r3, #0
 800d888:	d003      	beq.n	800d892 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d88a:	6878      	ldr	r0, [r7, #4]
 800d88c:	f000 fa23 	bl	800dcd6 <HAL_TIM_IC_CaptureCallback>
 800d890:	e005      	b.n	800d89e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d892:	6878      	ldr	r0, [r7, #4]
 800d894:	f000 fa15 	bl	800dcc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d898:	6878      	ldr	r0, [r7, #4]
 800d89a:	f000 fa26 	bl	800dcea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	691b      	ldr	r3, [r3, #16]
 800d8aa:	f003 0310 	and.w	r3, r3, #16
 800d8ae:	2b10      	cmp	r3, #16
 800d8b0:	d122      	bne.n	800d8f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	68db      	ldr	r3, [r3, #12]
 800d8b8:	f003 0310 	and.w	r3, r3, #16
 800d8bc:	2b10      	cmp	r3, #16
 800d8be:	d11b      	bne.n	800d8f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	f06f 0210 	mvn.w	r2, #16
 800d8c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	2208      	movs	r2, #8
 800d8ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	69db      	ldr	r3, [r3, #28]
 800d8d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d003      	beq.n	800d8e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d8de:	6878      	ldr	r0, [r7, #4]
 800d8e0:	f000 f9f9 	bl	800dcd6 <HAL_TIM_IC_CaptureCallback>
 800d8e4:	e005      	b.n	800d8f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d8e6:	6878      	ldr	r0, [r7, #4]
 800d8e8:	f000 f9eb 	bl	800dcc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d8ec:	6878      	ldr	r0, [r7, #4]
 800d8ee:	f000 f9fc 	bl	800dcea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	691b      	ldr	r3, [r3, #16]
 800d8fe:	f003 0301 	and.w	r3, r3, #1
 800d902:	2b01      	cmp	r3, #1
 800d904:	d10e      	bne.n	800d924 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	68db      	ldr	r3, [r3, #12]
 800d90c:	f003 0301 	and.w	r3, r3, #1
 800d910:	2b01      	cmp	r3, #1
 800d912:	d107      	bne.n	800d924 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	f06f 0201 	mvn.w	r2, #1
 800d91c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d91e:	6878      	ldr	r0, [r7, #4]
 800d920:	f7f4 fff2 	bl	8002908 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	691b      	ldr	r3, [r3, #16]
 800d92a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d92e:	2b80      	cmp	r3, #128	; 0x80
 800d930:	d10e      	bne.n	800d950 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	68db      	ldr	r3, [r3, #12]
 800d938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d93c:	2b80      	cmp	r3, #128	; 0x80
 800d93e:	d107      	bne.n	800d950 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d94a:	6878      	ldr	r0, [r7, #4]
 800d94c:	f000 fd78 	bl	800e440 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	691b      	ldr	r3, [r3, #16]
 800d956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d95a:	2b40      	cmp	r3, #64	; 0x40
 800d95c:	d10e      	bne.n	800d97c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	68db      	ldr	r3, [r3, #12]
 800d964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d968:	2b40      	cmp	r3, #64	; 0x40
 800d96a:	d107      	bne.n	800d97c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d976:	6878      	ldr	r0, [r7, #4]
 800d978:	f000 f9c1 	bl	800dcfe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	691b      	ldr	r3, [r3, #16]
 800d982:	f003 0320 	and.w	r3, r3, #32
 800d986:	2b20      	cmp	r3, #32
 800d988:	d10e      	bne.n	800d9a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	68db      	ldr	r3, [r3, #12]
 800d990:	f003 0320 	and.w	r3, r3, #32
 800d994:	2b20      	cmp	r3, #32
 800d996:	d107      	bne.n	800d9a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	f06f 0220 	mvn.w	r2, #32
 800d9a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d9a2:	6878      	ldr	r0, [r7, #4]
 800d9a4:	f000 fd42 	bl	800e42c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d9a8:	bf00      	nop
 800d9aa:	3708      	adds	r7, #8
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	bd80      	pop	{r7, pc}

0800d9b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b086      	sub	sp, #24
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	60f8      	str	r0, [r7, #12]
 800d9b8:	60b9      	str	r1, [r7, #8]
 800d9ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d9bc:	2300      	movs	r3, #0
 800d9be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d9c6:	2b01      	cmp	r3, #1
 800d9c8:	d101      	bne.n	800d9ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d9ca:	2302      	movs	r3, #2
 800d9cc:	e0ae      	b.n	800db2c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	2201      	movs	r2, #1
 800d9d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	2b0c      	cmp	r3, #12
 800d9da:	f200 809f 	bhi.w	800db1c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800d9de:	a201      	add	r2, pc, #4	; (adr r2, 800d9e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d9e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9e4:	0800da19 	.word	0x0800da19
 800d9e8:	0800db1d 	.word	0x0800db1d
 800d9ec:	0800db1d 	.word	0x0800db1d
 800d9f0:	0800db1d 	.word	0x0800db1d
 800d9f4:	0800da59 	.word	0x0800da59
 800d9f8:	0800db1d 	.word	0x0800db1d
 800d9fc:	0800db1d 	.word	0x0800db1d
 800da00:	0800db1d 	.word	0x0800db1d
 800da04:	0800da9b 	.word	0x0800da9b
 800da08:	0800db1d 	.word	0x0800db1d
 800da0c:	0800db1d 	.word	0x0800db1d
 800da10:	0800db1d 	.word	0x0800db1d
 800da14:	0800dadb 	.word	0x0800dadb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	68b9      	ldr	r1, [r7, #8]
 800da1e:	4618      	mov	r0, r3
 800da20:	f000 fa18 	bl	800de54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	699a      	ldr	r2, [r3, #24]
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	f042 0208 	orr.w	r2, r2, #8
 800da32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	699a      	ldr	r2, [r3, #24]
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	f022 0204 	bic.w	r2, r2, #4
 800da42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	6999      	ldr	r1, [r3, #24]
 800da4a:	68bb      	ldr	r3, [r7, #8]
 800da4c:	691a      	ldr	r2, [r3, #16]
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	430a      	orrs	r2, r1
 800da54:	619a      	str	r2, [r3, #24]
      break;
 800da56:	e064      	b.n	800db22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	68b9      	ldr	r1, [r7, #8]
 800da5e:	4618      	mov	r0, r3
 800da60:	f000 fa68 	bl	800df34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	699a      	ldr	r2, [r3, #24]
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800da72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	699a      	ldr	r2, [r3, #24]
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800da82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	6999      	ldr	r1, [r3, #24]
 800da8a:	68bb      	ldr	r3, [r7, #8]
 800da8c:	691b      	ldr	r3, [r3, #16]
 800da8e:	021a      	lsls	r2, r3, #8
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	430a      	orrs	r2, r1
 800da96:	619a      	str	r2, [r3, #24]
      break;
 800da98:	e043      	b.n	800db22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	68b9      	ldr	r1, [r7, #8]
 800daa0:	4618      	mov	r0, r3
 800daa2:	f000 fabd 	bl	800e020 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	69da      	ldr	r2, [r3, #28]
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	f042 0208 	orr.w	r2, r2, #8
 800dab4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	69da      	ldr	r2, [r3, #28]
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	f022 0204 	bic.w	r2, r2, #4
 800dac4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	69d9      	ldr	r1, [r3, #28]
 800dacc:	68bb      	ldr	r3, [r7, #8]
 800dace:	691a      	ldr	r2, [r3, #16]
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	430a      	orrs	r2, r1
 800dad6:	61da      	str	r2, [r3, #28]
      break;
 800dad8:	e023      	b.n	800db22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	68b9      	ldr	r1, [r7, #8]
 800dae0:	4618      	mov	r0, r3
 800dae2:	f000 fb11 	bl	800e108 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	69da      	ldr	r2, [r3, #28]
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800daf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	69da      	ldr	r2, [r3, #28]
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800db04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	69d9      	ldr	r1, [r3, #28]
 800db0c:	68bb      	ldr	r3, [r7, #8]
 800db0e:	691b      	ldr	r3, [r3, #16]
 800db10:	021a      	lsls	r2, r3, #8
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	430a      	orrs	r2, r1
 800db18:	61da      	str	r2, [r3, #28]
      break;
 800db1a:	e002      	b.n	800db22 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800db1c:	2301      	movs	r3, #1
 800db1e:	75fb      	strb	r3, [r7, #23]
      break;
 800db20:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	2200      	movs	r2, #0
 800db26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800db2a:	7dfb      	ldrb	r3, [r7, #23]
}
 800db2c:	4618      	mov	r0, r3
 800db2e:	3718      	adds	r7, #24
 800db30:	46bd      	mov	sp, r7
 800db32:	bd80      	pop	{r7, pc}

0800db34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b084      	sub	sp, #16
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
 800db3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800db3e:	2300      	movs	r3, #0
 800db40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800db48:	2b01      	cmp	r3, #1
 800db4a:	d101      	bne.n	800db50 <HAL_TIM_ConfigClockSource+0x1c>
 800db4c:	2302      	movs	r3, #2
 800db4e:	e0b4      	b.n	800dcba <HAL_TIM_ConfigClockSource+0x186>
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	2201      	movs	r2, #1
 800db54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	2202      	movs	r2, #2
 800db5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	689b      	ldr	r3, [r3, #8]
 800db66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800db68:	68bb      	ldr	r3, [r7, #8]
 800db6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800db6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800db70:	68bb      	ldr	r3, [r7, #8]
 800db72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800db76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	68ba      	ldr	r2, [r7, #8]
 800db7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800db88:	d03e      	beq.n	800dc08 <HAL_TIM_ConfigClockSource+0xd4>
 800db8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800db8e:	f200 8087 	bhi.w	800dca0 <HAL_TIM_ConfigClockSource+0x16c>
 800db92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db96:	f000 8086 	beq.w	800dca6 <HAL_TIM_ConfigClockSource+0x172>
 800db9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db9e:	d87f      	bhi.n	800dca0 <HAL_TIM_ConfigClockSource+0x16c>
 800dba0:	2b70      	cmp	r3, #112	; 0x70
 800dba2:	d01a      	beq.n	800dbda <HAL_TIM_ConfigClockSource+0xa6>
 800dba4:	2b70      	cmp	r3, #112	; 0x70
 800dba6:	d87b      	bhi.n	800dca0 <HAL_TIM_ConfigClockSource+0x16c>
 800dba8:	2b60      	cmp	r3, #96	; 0x60
 800dbaa:	d050      	beq.n	800dc4e <HAL_TIM_ConfigClockSource+0x11a>
 800dbac:	2b60      	cmp	r3, #96	; 0x60
 800dbae:	d877      	bhi.n	800dca0 <HAL_TIM_ConfigClockSource+0x16c>
 800dbb0:	2b50      	cmp	r3, #80	; 0x50
 800dbb2:	d03c      	beq.n	800dc2e <HAL_TIM_ConfigClockSource+0xfa>
 800dbb4:	2b50      	cmp	r3, #80	; 0x50
 800dbb6:	d873      	bhi.n	800dca0 <HAL_TIM_ConfigClockSource+0x16c>
 800dbb8:	2b40      	cmp	r3, #64	; 0x40
 800dbba:	d058      	beq.n	800dc6e <HAL_TIM_ConfigClockSource+0x13a>
 800dbbc:	2b40      	cmp	r3, #64	; 0x40
 800dbbe:	d86f      	bhi.n	800dca0 <HAL_TIM_ConfigClockSource+0x16c>
 800dbc0:	2b30      	cmp	r3, #48	; 0x30
 800dbc2:	d064      	beq.n	800dc8e <HAL_TIM_ConfigClockSource+0x15a>
 800dbc4:	2b30      	cmp	r3, #48	; 0x30
 800dbc6:	d86b      	bhi.n	800dca0 <HAL_TIM_ConfigClockSource+0x16c>
 800dbc8:	2b20      	cmp	r3, #32
 800dbca:	d060      	beq.n	800dc8e <HAL_TIM_ConfigClockSource+0x15a>
 800dbcc:	2b20      	cmp	r3, #32
 800dbce:	d867      	bhi.n	800dca0 <HAL_TIM_ConfigClockSource+0x16c>
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d05c      	beq.n	800dc8e <HAL_TIM_ConfigClockSource+0x15a>
 800dbd4:	2b10      	cmp	r3, #16
 800dbd6:	d05a      	beq.n	800dc8e <HAL_TIM_ConfigClockSource+0x15a>
 800dbd8:	e062      	b.n	800dca0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	6818      	ldr	r0, [r3, #0]
 800dbde:	683b      	ldr	r3, [r7, #0]
 800dbe0:	6899      	ldr	r1, [r3, #8]
 800dbe2:	683b      	ldr	r3, [r7, #0]
 800dbe4:	685a      	ldr	r2, [r3, #4]
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	68db      	ldr	r3, [r3, #12]
 800dbea:	f000 fb5d 	bl	800e2a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	689b      	ldr	r3, [r3, #8]
 800dbf4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800dbf6:	68bb      	ldr	r3, [r7, #8]
 800dbf8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800dbfc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	68ba      	ldr	r2, [r7, #8]
 800dc04:	609a      	str	r2, [r3, #8]
      break;
 800dc06:	e04f      	b.n	800dca8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	6818      	ldr	r0, [r3, #0]
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	6899      	ldr	r1, [r3, #8]
 800dc10:	683b      	ldr	r3, [r7, #0]
 800dc12:	685a      	ldr	r2, [r3, #4]
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	68db      	ldr	r3, [r3, #12]
 800dc18:	f000 fb46 	bl	800e2a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	689a      	ldr	r2, [r3, #8]
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800dc2a:	609a      	str	r2, [r3, #8]
      break;
 800dc2c:	e03c      	b.n	800dca8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	6818      	ldr	r0, [r3, #0]
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	6859      	ldr	r1, [r3, #4]
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	68db      	ldr	r3, [r3, #12]
 800dc3a:	461a      	mov	r2, r3
 800dc3c:	f000 faba 	bl	800e1b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	2150      	movs	r1, #80	; 0x50
 800dc46:	4618      	mov	r0, r3
 800dc48:	f000 fb13 	bl	800e272 <TIM_ITRx_SetConfig>
      break;
 800dc4c:	e02c      	b.n	800dca8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	6818      	ldr	r0, [r3, #0]
 800dc52:	683b      	ldr	r3, [r7, #0]
 800dc54:	6859      	ldr	r1, [r3, #4]
 800dc56:	683b      	ldr	r3, [r7, #0]
 800dc58:	68db      	ldr	r3, [r3, #12]
 800dc5a:	461a      	mov	r2, r3
 800dc5c:	f000 fad9 	bl	800e212 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	2160      	movs	r1, #96	; 0x60
 800dc66:	4618      	mov	r0, r3
 800dc68:	f000 fb03 	bl	800e272 <TIM_ITRx_SetConfig>
      break;
 800dc6c:	e01c      	b.n	800dca8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	6818      	ldr	r0, [r3, #0]
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	6859      	ldr	r1, [r3, #4]
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	68db      	ldr	r3, [r3, #12]
 800dc7a:	461a      	mov	r2, r3
 800dc7c:	f000 fa9a 	bl	800e1b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	2140      	movs	r1, #64	; 0x40
 800dc86:	4618      	mov	r0, r3
 800dc88:	f000 faf3 	bl	800e272 <TIM_ITRx_SetConfig>
      break;
 800dc8c:	e00c      	b.n	800dca8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681a      	ldr	r2, [r3, #0]
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	4619      	mov	r1, r3
 800dc98:	4610      	mov	r0, r2
 800dc9a:	f000 faea 	bl	800e272 <TIM_ITRx_SetConfig>
      break;
 800dc9e:	e003      	b.n	800dca8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800dca0:	2301      	movs	r3, #1
 800dca2:	73fb      	strb	r3, [r7, #15]
      break;
 800dca4:	e000      	b.n	800dca8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800dca6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	2201      	movs	r2, #1
 800dcac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800dcb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcba:	4618      	mov	r0, r3
 800dcbc:	3710      	adds	r7, #16
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	bd80      	pop	{r7, pc}

0800dcc2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dcc2:	b480      	push	{r7}
 800dcc4:	b083      	sub	sp, #12
 800dcc6:	af00      	add	r7, sp, #0
 800dcc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dcca:	bf00      	nop
 800dccc:	370c      	adds	r7, #12
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd4:	4770      	bx	lr

0800dcd6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dcd6:	b480      	push	{r7}
 800dcd8:	b083      	sub	sp, #12
 800dcda:	af00      	add	r7, sp, #0
 800dcdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dcde:	bf00      	nop
 800dce0:	370c      	adds	r7, #12
 800dce2:	46bd      	mov	sp, r7
 800dce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce8:	4770      	bx	lr

0800dcea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800dcea:	b480      	push	{r7}
 800dcec:	b083      	sub	sp, #12
 800dcee:	af00      	add	r7, sp, #0
 800dcf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800dcf2:	bf00      	nop
 800dcf4:	370c      	adds	r7, #12
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfc:	4770      	bx	lr

0800dcfe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dcfe:	b480      	push	{r7}
 800dd00:	b083      	sub	sp, #12
 800dd02:	af00      	add	r7, sp, #0
 800dd04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dd06:	bf00      	nop
 800dd08:	370c      	adds	r7, #12
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd10:	4770      	bx	lr
	...

0800dd14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800dd14:	b480      	push	{r7}
 800dd16:	b085      	sub	sp, #20
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
 800dd1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	4a40      	ldr	r2, [pc, #256]	; (800de28 <TIM_Base_SetConfig+0x114>)
 800dd28:	4293      	cmp	r3, r2
 800dd2a:	d013      	beq.n	800dd54 <TIM_Base_SetConfig+0x40>
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd32:	d00f      	beq.n	800dd54 <TIM_Base_SetConfig+0x40>
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	4a3d      	ldr	r2, [pc, #244]	; (800de2c <TIM_Base_SetConfig+0x118>)
 800dd38:	4293      	cmp	r3, r2
 800dd3a:	d00b      	beq.n	800dd54 <TIM_Base_SetConfig+0x40>
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	4a3c      	ldr	r2, [pc, #240]	; (800de30 <TIM_Base_SetConfig+0x11c>)
 800dd40:	4293      	cmp	r3, r2
 800dd42:	d007      	beq.n	800dd54 <TIM_Base_SetConfig+0x40>
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	4a3b      	ldr	r2, [pc, #236]	; (800de34 <TIM_Base_SetConfig+0x120>)
 800dd48:	4293      	cmp	r3, r2
 800dd4a:	d003      	beq.n	800dd54 <TIM_Base_SetConfig+0x40>
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	4a3a      	ldr	r2, [pc, #232]	; (800de38 <TIM_Base_SetConfig+0x124>)
 800dd50:	4293      	cmp	r3, r2
 800dd52:	d108      	bne.n	800dd66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dd5c:	683b      	ldr	r3, [r7, #0]
 800dd5e:	685b      	ldr	r3, [r3, #4]
 800dd60:	68fa      	ldr	r2, [r7, #12]
 800dd62:	4313      	orrs	r3, r2
 800dd64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	4a2f      	ldr	r2, [pc, #188]	; (800de28 <TIM_Base_SetConfig+0x114>)
 800dd6a:	4293      	cmp	r3, r2
 800dd6c:	d02b      	beq.n	800ddc6 <TIM_Base_SetConfig+0xb2>
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd74:	d027      	beq.n	800ddc6 <TIM_Base_SetConfig+0xb2>
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	4a2c      	ldr	r2, [pc, #176]	; (800de2c <TIM_Base_SetConfig+0x118>)
 800dd7a:	4293      	cmp	r3, r2
 800dd7c:	d023      	beq.n	800ddc6 <TIM_Base_SetConfig+0xb2>
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	4a2b      	ldr	r2, [pc, #172]	; (800de30 <TIM_Base_SetConfig+0x11c>)
 800dd82:	4293      	cmp	r3, r2
 800dd84:	d01f      	beq.n	800ddc6 <TIM_Base_SetConfig+0xb2>
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	4a2a      	ldr	r2, [pc, #168]	; (800de34 <TIM_Base_SetConfig+0x120>)
 800dd8a:	4293      	cmp	r3, r2
 800dd8c:	d01b      	beq.n	800ddc6 <TIM_Base_SetConfig+0xb2>
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	4a29      	ldr	r2, [pc, #164]	; (800de38 <TIM_Base_SetConfig+0x124>)
 800dd92:	4293      	cmp	r3, r2
 800dd94:	d017      	beq.n	800ddc6 <TIM_Base_SetConfig+0xb2>
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	4a28      	ldr	r2, [pc, #160]	; (800de3c <TIM_Base_SetConfig+0x128>)
 800dd9a:	4293      	cmp	r3, r2
 800dd9c:	d013      	beq.n	800ddc6 <TIM_Base_SetConfig+0xb2>
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	4a27      	ldr	r2, [pc, #156]	; (800de40 <TIM_Base_SetConfig+0x12c>)
 800dda2:	4293      	cmp	r3, r2
 800dda4:	d00f      	beq.n	800ddc6 <TIM_Base_SetConfig+0xb2>
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	4a26      	ldr	r2, [pc, #152]	; (800de44 <TIM_Base_SetConfig+0x130>)
 800ddaa:	4293      	cmp	r3, r2
 800ddac:	d00b      	beq.n	800ddc6 <TIM_Base_SetConfig+0xb2>
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	4a25      	ldr	r2, [pc, #148]	; (800de48 <TIM_Base_SetConfig+0x134>)
 800ddb2:	4293      	cmp	r3, r2
 800ddb4:	d007      	beq.n	800ddc6 <TIM_Base_SetConfig+0xb2>
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	4a24      	ldr	r2, [pc, #144]	; (800de4c <TIM_Base_SetConfig+0x138>)
 800ddba:	4293      	cmp	r3, r2
 800ddbc:	d003      	beq.n	800ddc6 <TIM_Base_SetConfig+0xb2>
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	4a23      	ldr	r2, [pc, #140]	; (800de50 <TIM_Base_SetConfig+0x13c>)
 800ddc2:	4293      	cmp	r3, r2
 800ddc4:	d108      	bne.n	800ddd8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ddcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	68db      	ldr	r3, [r3, #12]
 800ddd2:	68fa      	ldr	r2, [r7, #12]
 800ddd4:	4313      	orrs	r3, r2
 800ddd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ddde:	683b      	ldr	r3, [r7, #0]
 800dde0:	695b      	ldr	r3, [r3, #20]
 800dde2:	4313      	orrs	r3, r2
 800dde4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	68fa      	ldr	r2, [r7, #12]
 800ddea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ddec:	683b      	ldr	r3, [r7, #0]
 800ddee:	689a      	ldr	r2, [r3, #8]
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ddf4:	683b      	ldr	r3, [r7, #0]
 800ddf6:	681a      	ldr	r2, [r3, #0]
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	4a0a      	ldr	r2, [pc, #40]	; (800de28 <TIM_Base_SetConfig+0x114>)
 800de00:	4293      	cmp	r3, r2
 800de02:	d003      	beq.n	800de0c <TIM_Base_SetConfig+0xf8>
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	4a0c      	ldr	r2, [pc, #48]	; (800de38 <TIM_Base_SetConfig+0x124>)
 800de08:	4293      	cmp	r3, r2
 800de0a:	d103      	bne.n	800de14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	691a      	ldr	r2, [r3, #16]
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2201      	movs	r2, #1
 800de18:	615a      	str	r2, [r3, #20]
}
 800de1a:	bf00      	nop
 800de1c:	3714      	adds	r7, #20
 800de1e:	46bd      	mov	sp, r7
 800de20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de24:	4770      	bx	lr
 800de26:	bf00      	nop
 800de28:	40010000 	.word	0x40010000
 800de2c:	40000400 	.word	0x40000400
 800de30:	40000800 	.word	0x40000800
 800de34:	40000c00 	.word	0x40000c00
 800de38:	40010400 	.word	0x40010400
 800de3c:	40014000 	.word	0x40014000
 800de40:	40014400 	.word	0x40014400
 800de44:	40014800 	.word	0x40014800
 800de48:	40001800 	.word	0x40001800
 800de4c:	40001c00 	.word	0x40001c00
 800de50:	40002000 	.word	0x40002000

0800de54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800de54:	b480      	push	{r7}
 800de56:	b087      	sub	sp, #28
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
 800de5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	6a1b      	ldr	r3, [r3, #32]
 800de62:	f023 0201 	bic.w	r2, r3, #1
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	6a1b      	ldr	r3, [r3, #32]
 800de6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	685b      	ldr	r3, [r3, #4]
 800de74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	699b      	ldr	r3, [r3, #24]
 800de7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	f023 0303 	bic.w	r3, r3, #3
 800de8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	68fa      	ldr	r2, [r7, #12]
 800de92:	4313      	orrs	r3, r2
 800de94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800de96:	697b      	ldr	r3, [r7, #20]
 800de98:	f023 0302 	bic.w	r3, r3, #2
 800de9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	689b      	ldr	r3, [r3, #8]
 800dea2:	697a      	ldr	r2, [r7, #20]
 800dea4:	4313      	orrs	r3, r2
 800dea6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	4a20      	ldr	r2, [pc, #128]	; (800df2c <TIM_OC1_SetConfig+0xd8>)
 800deac:	4293      	cmp	r3, r2
 800deae:	d003      	beq.n	800deb8 <TIM_OC1_SetConfig+0x64>
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	4a1f      	ldr	r2, [pc, #124]	; (800df30 <TIM_OC1_SetConfig+0xdc>)
 800deb4:	4293      	cmp	r3, r2
 800deb6:	d10c      	bne.n	800ded2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800deb8:	697b      	ldr	r3, [r7, #20]
 800deba:	f023 0308 	bic.w	r3, r3, #8
 800debe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800dec0:	683b      	ldr	r3, [r7, #0]
 800dec2:	68db      	ldr	r3, [r3, #12]
 800dec4:	697a      	ldr	r2, [r7, #20]
 800dec6:	4313      	orrs	r3, r2
 800dec8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800deca:	697b      	ldr	r3, [r7, #20]
 800decc:	f023 0304 	bic.w	r3, r3, #4
 800ded0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	4a15      	ldr	r2, [pc, #84]	; (800df2c <TIM_OC1_SetConfig+0xd8>)
 800ded6:	4293      	cmp	r3, r2
 800ded8:	d003      	beq.n	800dee2 <TIM_OC1_SetConfig+0x8e>
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	4a14      	ldr	r2, [pc, #80]	; (800df30 <TIM_OC1_SetConfig+0xdc>)
 800dede:	4293      	cmp	r3, r2
 800dee0:	d111      	bne.n	800df06 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800dee2:	693b      	ldr	r3, [r7, #16]
 800dee4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dee8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800deea:	693b      	ldr	r3, [r7, #16]
 800deec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800def0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	695b      	ldr	r3, [r3, #20]
 800def6:	693a      	ldr	r2, [r7, #16]
 800def8:	4313      	orrs	r3, r2
 800defa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800defc:	683b      	ldr	r3, [r7, #0]
 800defe:	699b      	ldr	r3, [r3, #24]
 800df00:	693a      	ldr	r2, [r7, #16]
 800df02:	4313      	orrs	r3, r2
 800df04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	693a      	ldr	r2, [r7, #16]
 800df0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	68fa      	ldr	r2, [r7, #12]
 800df10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800df12:	683b      	ldr	r3, [r7, #0]
 800df14:	685a      	ldr	r2, [r3, #4]
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	697a      	ldr	r2, [r7, #20]
 800df1e:	621a      	str	r2, [r3, #32]
}
 800df20:	bf00      	nop
 800df22:	371c      	adds	r7, #28
 800df24:	46bd      	mov	sp, r7
 800df26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2a:	4770      	bx	lr
 800df2c:	40010000 	.word	0x40010000
 800df30:	40010400 	.word	0x40010400

0800df34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800df34:	b480      	push	{r7}
 800df36:	b087      	sub	sp, #28
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
 800df3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	6a1b      	ldr	r3, [r3, #32]
 800df42:	f023 0210 	bic.w	r2, r3, #16
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	6a1b      	ldr	r3, [r3, #32]
 800df4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	685b      	ldr	r3, [r3, #4]
 800df54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	699b      	ldr	r3, [r3, #24]
 800df5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800df62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800df6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800df6c:	683b      	ldr	r3, [r7, #0]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	021b      	lsls	r3, r3, #8
 800df72:	68fa      	ldr	r2, [r7, #12]
 800df74:	4313      	orrs	r3, r2
 800df76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800df78:	697b      	ldr	r3, [r7, #20]
 800df7a:	f023 0320 	bic.w	r3, r3, #32
 800df7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	689b      	ldr	r3, [r3, #8]
 800df84:	011b      	lsls	r3, r3, #4
 800df86:	697a      	ldr	r2, [r7, #20]
 800df88:	4313      	orrs	r3, r2
 800df8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	4a22      	ldr	r2, [pc, #136]	; (800e018 <TIM_OC2_SetConfig+0xe4>)
 800df90:	4293      	cmp	r3, r2
 800df92:	d003      	beq.n	800df9c <TIM_OC2_SetConfig+0x68>
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	4a21      	ldr	r2, [pc, #132]	; (800e01c <TIM_OC2_SetConfig+0xe8>)
 800df98:	4293      	cmp	r3, r2
 800df9a:	d10d      	bne.n	800dfb8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800df9c:	697b      	ldr	r3, [r7, #20]
 800df9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dfa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800dfa4:	683b      	ldr	r3, [r7, #0]
 800dfa6:	68db      	ldr	r3, [r3, #12]
 800dfa8:	011b      	lsls	r3, r3, #4
 800dfaa:	697a      	ldr	r2, [r7, #20]
 800dfac:	4313      	orrs	r3, r2
 800dfae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800dfb0:	697b      	ldr	r3, [r7, #20]
 800dfb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dfb6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	4a17      	ldr	r2, [pc, #92]	; (800e018 <TIM_OC2_SetConfig+0xe4>)
 800dfbc:	4293      	cmp	r3, r2
 800dfbe:	d003      	beq.n	800dfc8 <TIM_OC2_SetConfig+0x94>
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	4a16      	ldr	r2, [pc, #88]	; (800e01c <TIM_OC2_SetConfig+0xe8>)
 800dfc4:	4293      	cmp	r3, r2
 800dfc6:	d113      	bne.n	800dff0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800dfc8:	693b      	ldr	r3, [r7, #16]
 800dfca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dfce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800dfd0:	693b      	ldr	r3, [r7, #16]
 800dfd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dfd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800dfd8:	683b      	ldr	r3, [r7, #0]
 800dfda:	695b      	ldr	r3, [r3, #20]
 800dfdc:	009b      	lsls	r3, r3, #2
 800dfde:	693a      	ldr	r2, [r7, #16]
 800dfe0:	4313      	orrs	r3, r2
 800dfe2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800dfe4:	683b      	ldr	r3, [r7, #0]
 800dfe6:	699b      	ldr	r3, [r3, #24]
 800dfe8:	009b      	lsls	r3, r3, #2
 800dfea:	693a      	ldr	r2, [r7, #16]
 800dfec:	4313      	orrs	r3, r2
 800dfee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	693a      	ldr	r2, [r7, #16]
 800dff4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	68fa      	ldr	r2, [r7, #12]
 800dffa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800dffc:	683b      	ldr	r3, [r7, #0]
 800dffe:	685a      	ldr	r2, [r3, #4]
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	697a      	ldr	r2, [r7, #20]
 800e008:	621a      	str	r2, [r3, #32]
}
 800e00a:	bf00      	nop
 800e00c:	371c      	adds	r7, #28
 800e00e:	46bd      	mov	sp, r7
 800e010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e014:	4770      	bx	lr
 800e016:	bf00      	nop
 800e018:	40010000 	.word	0x40010000
 800e01c:	40010400 	.word	0x40010400

0800e020 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e020:	b480      	push	{r7}
 800e022:	b087      	sub	sp, #28
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
 800e028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	6a1b      	ldr	r3, [r3, #32]
 800e02e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	6a1b      	ldr	r3, [r3, #32]
 800e03a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	685b      	ldr	r3, [r3, #4]
 800e040:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	69db      	ldr	r3, [r3, #28]
 800e046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e04e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	f023 0303 	bic.w	r3, r3, #3
 800e056:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	68fa      	ldr	r2, [r7, #12]
 800e05e:	4313      	orrs	r3, r2
 800e060:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e062:	697b      	ldr	r3, [r7, #20]
 800e064:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e068:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e06a:	683b      	ldr	r3, [r7, #0]
 800e06c:	689b      	ldr	r3, [r3, #8]
 800e06e:	021b      	lsls	r3, r3, #8
 800e070:	697a      	ldr	r2, [r7, #20]
 800e072:	4313      	orrs	r3, r2
 800e074:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	4a21      	ldr	r2, [pc, #132]	; (800e100 <TIM_OC3_SetConfig+0xe0>)
 800e07a:	4293      	cmp	r3, r2
 800e07c:	d003      	beq.n	800e086 <TIM_OC3_SetConfig+0x66>
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	4a20      	ldr	r2, [pc, #128]	; (800e104 <TIM_OC3_SetConfig+0xe4>)
 800e082:	4293      	cmp	r3, r2
 800e084:	d10d      	bne.n	800e0a2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e086:	697b      	ldr	r3, [r7, #20]
 800e088:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e08c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e08e:	683b      	ldr	r3, [r7, #0]
 800e090:	68db      	ldr	r3, [r3, #12]
 800e092:	021b      	lsls	r3, r3, #8
 800e094:	697a      	ldr	r2, [r7, #20]
 800e096:	4313      	orrs	r3, r2
 800e098:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e09a:	697b      	ldr	r3, [r7, #20]
 800e09c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e0a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	4a16      	ldr	r2, [pc, #88]	; (800e100 <TIM_OC3_SetConfig+0xe0>)
 800e0a6:	4293      	cmp	r3, r2
 800e0a8:	d003      	beq.n	800e0b2 <TIM_OC3_SetConfig+0x92>
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	4a15      	ldr	r2, [pc, #84]	; (800e104 <TIM_OC3_SetConfig+0xe4>)
 800e0ae:	4293      	cmp	r3, r2
 800e0b0:	d113      	bne.n	800e0da <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e0b2:	693b      	ldr	r3, [r7, #16]
 800e0b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e0b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e0ba:	693b      	ldr	r3, [r7, #16]
 800e0bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e0c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e0c2:	683b      	ldr	r3, [r7, #0]
 800e0c4:	695b      	ldr	r3, [r3, #20]
 800e0c6:	011b      	lsls	r3, r3, #4
 800e0c8:	693a      	ldr	r2, [r7, #16]
 800e0ca:	4313      	orrs	r3, r2
 800e0cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e0ce:	683b      	ldr	r3, [r7, #0]
 800e0d0:	699b      	ldr	r3, [r3, #24]
 800e0d2:	011b      	lsls	r3, r3, #4
 800e0d4:	693a      	ldr	r2, [r7, #16]
 800e0d6:	4313      	orrs	r3, r2
 800e0d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	693a      	ldr	r2, [r7, #16]
 800e0de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	68fa      	ldr	r2, [r7, #12]
 800e0e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e0e6:	683b      	ldr	r3, [r7, #0]
 800e0e8:	685a      	ldr	r2, [r3, #4]
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	697a      	ldr	r2, [r7, #20]
 800e0f2:	621a      	str	r2, [r3, #32]
}
 800e0f4:	bf00      	nop
 800e0f6:	371c      	adds	r7, #28
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fe:	4770      	bx	lr
 800e100:	40010000 	.word	0x40010000
 800e104:	40010400 	.word	0x40010400

0800e108 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e108:	b480      	push	{r7}
 800e10a:	b087      	sub	sp, #28
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
 800e110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	6a1b      	ldr	r3, [r3, #32]
 800e116:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	6a1b      	ldr	r3, [r3, #32]
 800e122:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	685b      	ldr	r3, [r3, #4]
 800e128:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	69db      	ldr	r3, [r3, #28]
 800e12e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e13e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e140:	683b      	ldr	r3, [r7, #0]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	021b      	lsls	r3, r3, #8
 800e146:	68fa      	ldr	r2, [r7, #12]
 800e148:	4313      	orrs	r3, r2
 800e14a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e14c:	693b      	ldr	r3, [r7, #16]
 800e14e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e152:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	689b      	ldr	r3, [r3, #8]
 800e158:	031b      	lsls	r3, r3, #12
 800e15a:	693a      	ldr	r2, [r7, #16]
 800e15c:	4313      	orrs	r3, r2
 800e15e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	4a12      	ldr	r2, [pc, #72]	; (800e1ac <TIM_OC4_SetConfig+0xa4>)
 800e164:	4293      	cmp	r3, r2
 800e166:	d003      	beq.n	800e170 <TIM_OC4_SetConfig+0x68>
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	4a11      	ldr	r2, [pc, #68]	; (800e1b0 <TIM_OC4_SetConfig+0xa8>)
 800e16c:	4293      	cmp	r3, r2
 800e16e:	d109      	bne.n	800e184 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e170:	697b      	ldr	r3, [r7, #20]
 800e172:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e176:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	695b      	ldr	r3, [r3, #20]
 800e17c:	019b      	lsls	r3, r3, #6
 800e17e:	697a      	ldr	r2, [r7, #20]
 800e180:	4313      	orrs	r3, r2
 800e182:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	697a      	ldr	r2, [r7, #20]
 800e188:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	68fa      	ldr	r2, [r7, #12]
 800e18e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e190:	683b      	ldr	r3, [r7, #0]
 800e192:	685a      	ldr	r2, [r3, #4]
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	693a      	ldr	r2, [r7, #16]
 800e19c:	621a      	str	r2, [r3, #32]
}
 800e19e:	bf00      	nop
 800e1a0:	371c      	adds	r7, #28
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a8:	4770      	bx	lr
 800e1aa:	bf00      	nop
 800e1ac:	40010000 	.word	0x40010000
 800e1b0:	40010400 	.word	0x40010400

0800e1b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e1b4:	b480      	push	{r7}
 800e1b6:	b087      	sub	sp, #28
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	60f8      	str	r0, [r7, #12]
 800e1bc:	60b9      	str	r1, [r7, #8]
 800e1be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	6a1b      	ldr	r3, [r3, #32]
 800e1c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	6a1b      	ldr	r3, [r3, #32]
 800e1ca:	f023 0201 	bic.w	r2, r3, #1
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	699b      	ldr	r3, [r3, #24]
 800e1d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e1d8:	693b      	ldr	r3, [r7, #16]
 800e1da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e1de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	011b      	lsls	r3, r3, #4
 800e1e4:	693a      	ldr	r2, [r7, #16]
 800e1e6:	4313      	orrs	r3, r2
 800e1e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e1ea:	697b      	ldr	r3, [r7, #20]
 800e1ec:	f023 030a 	bic.w	r3, r3, #10
 800e1f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e1f2:	697a      	ldr	r2, [r7, #20]
 800e1f4:	68bb      	ldr	r3, [r7, #8]
 800e1f6:	4313      	orrs	r3, r2
 800e1f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	693a      	ldr	r2, [r7, #16]
 800e1fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	697a      	ldr	r2, [r7, #20]
 800e204:	621a      	str	r2, [r3, #32]
}
 800e206:	bf00      	nop
 800e208:	371c      	adds	r7, #28
 800e20a:	46bd      	mov	sp, r7
 800e20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e210:	4770      	bx	lr

0800e212 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e212:	b480      	push	{r7}
 800e214:	b087      	sub	sp, #28
 800e216:	af00      	add	r7, sp, #0
 800e218:	60f8      	str	r0, [r7, #12]
 800e21a:	60b9      	str	r1, [r7, #8]
 800e21c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	6a1b      	ldr	r3, [r3, #32]
 800e222:	f023 0210 	bic.w	r2, r3, #16
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	699b      	ldr	r3, [r3, #24]
 800e22e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	6a1b      	ldr	r3, [r3, #32]
 800e234:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e236:	697b      	ldr	r3, [r7, #20]
 800e238:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e23c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	031b      	lsls	r3, r3, #12
 800e242:	697a      	ldr	r2, [r7, #20]
 800e244:	4313      	orrs	r3, r2
 800e246:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e248:	693b      	ldr	r3, [r7, #16]
 800e24a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e24e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e250:	68bb      	ldr	r3, [r7, #8]
 800e252:	011b      	lsls	r3, r3, #4
 800e254:	693a      	ldr	r2, [r7, #16]
 800e256:	4313      	orrs	r3, r2
 800e258:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	697a      	ldr	r2, [r7, #20]
 800e25e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	693a      	ldr	r2, [r7, #16]
 800e264:	621a      	str	r2, [r3, #32]
}
 800e266:	bf00      	nop
 800e268:	371c      	adds	r7, #28
 800e26a:	46bd      	mov	sp, r7
 800e26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e270:	4770      	bx	lr

0800e272 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e272:	b480      	push	{r7}
 800e274:	b085      	sub	sp, #20
 800e276:	af00      	add	r7, sp, #0
 800e278:	6078      	str	r0, [r7, #4]
 800e27a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	689b      	ldr	r3, [r3, #8]
 800e280:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e288:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e28a:	683a      	ldr	r2, [r7, #0]
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	4313      	orrs	r3, r2
 800e290:	f043 0307 	orr.w	r3, r3, #7
 800e294:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	68fa      	ldr	r2, [r7, #12]
 800e29a:	609a      	str	r2, [r3, #8]
}
 800e29c:	bf00      	nop
 800e29e:	3714      	adds	r7, #20
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a6:	4770      	bx	lr

0800e2a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e2a8:	b480      	push	{r7}
 800e2aa:	b087      	sub	sp, #28
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	60f8      	str	r0, [r7, #12]
 800e2b0:	60b9      	str	r1, [r7, #8]
 800e2b2:	607a      	str	r2, [r7, #4]
 800e2b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	689b      	ldr	r3, [r3, #8]
 800e2ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e2bc:	697b      	ldr	r3, [r7, #20]
 800e2be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e2c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e2c4:	683b      	ldr	r3, [r7, #0]
 800e2c6:	021a      	lsls	r2, r3, #8
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	431a      	orrs	r2, r3
 800e2cc:	68bb      	ldr	r3, [r7, #8]
 800e2ce:	4313      	orrs	r3, r2
 800e2d0:	697a      	ldr	r2, [r7, #20]
 800e2d2:	4313      	orrs	r3, r2
 800e2d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	697a      	ldr	r2, [r7, #20]
 800e2da:	609a      	str	r2, [r3, #8]
}
 800e2dc:	bf00      	nop
 800e2de:	371c      	adds	r7, #28
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e6:	4770      	bx	lr

0800e2e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e2e8:	b480      	push	{r7}
 800e2ea:	b087      	sub	sp, #28
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	60f8      	str	r0, [r7, #12]
 800e2f0:	60b9      	str	r1, [r7, #8]
 800e2f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e2f4:	68bb      	ldr	r3, [r7, #8]
 800e2f6:	f003 031f 	and.w	r3, r3, #31
 800e2fa:	2201      	movs	r2, #1
 800e2fc:	fa02 f303 	lsl.w	r3, r2, r3
 800e300:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	6a1a      	ldr	r2, [r3, #32]
 800e306:	697b      	ldr	r3, [r7, #20]
 800e308:	43db      	mvns	r3, r3
 800e30a:	401a      	ands	r2, r3
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	6a1a      	ldr	r2, [r3, #32]
 800e314:	68bb      	ldr	r3, [r7, #8]
 800e316:	f003 031f 	and.w	r3, r3, #31
 800e31a:	6879      	ldr	r1, [r7, #4]
 800e31c:	fa01 f303 	lsl.w	r3, r1, r3
 800e320:	431a      	orrs	r2, r3
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	621a      	str	r2, [r3, #32]
}
 800e326:	bf00      	nop
 800e328:	371c      	adds	r7, #28
 800e32a:	46bd      	mov	sp, r7
 800e32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e330:	4770      	bx	lr
	...

0800e334 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e334:	b480      	push	{r7}
 800e336:	b085      	sub	sp, #20
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
 800e33c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e344:	2b01      	cmp	r3, #1
 800e346:	d101      	bne.n	800e34c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e348:	2302      	movs	r3, #2
 800e34a:	e05a      	b.n	800e402 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	2201      	movs	r2, #1
 800e350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	2202      	movs	r2, #2
 800e358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	685b      	ldr	r3, [r3, #4]
 800e362:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	689b      	ldr	r3, [r3, #8]
 800e36a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e372:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e374:	683b      	ldr	r3, [r7, #0]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	68fa      	ldr	r2, [r7, #12]
 800e37a:	4313      	orrs	r3, r2
 800e37c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	68fa      	ldr	r2, [r7, #12]
 800e384:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	4a21      	ldr	r2, [pc, #132]	; (800e410 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800e38c:	4293      	cmp	r3, r2
 800e38e:	d022      	beq.n	800e3d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e398:	d01d      	beq.n	800e3d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	4a1d      	ldr	r2, [pc, #116]	; (800e414 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800e3a0:	4293      	cmp	r3, r2
 800e3a2:	d018      	beq.n	800e3d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	4a1b      	ldr	r2, [pc, #108]	; (800e418 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800e3aa:	4293      	cmp	r3, r2
 800e3ac:	d013      	beq.n	800e3d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	4a1a      	ldr	r2, [pc, #104]	; (800e41c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800e3b4:	4293      	cmp	r3, r2
 800e3b6:	d00e      	beq.n	800e3d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	4a18      	ldr	r2, [pc, #96]	; (800e420 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800e3be:	4293      	cmp	r3, r2
 800e3c0:	d009      	beq.n	800e3d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	4a17      	ldr	r2, [pc, #92]	; (800e424 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e3c8:	4293      	cmp	r3, r2
 800e3ca:	d004      	beq.n	800e3d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	4a15      	ldr	r2, [pc, #84]	; (800e428 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e3d2:	4293      	cmp	r3, r2
 800e3d4:	d10c      	bne.n	800e3f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e3d6:	68bb      	ldr	r3, [r7, #8]
 800e3d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e3dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	685b      	ldr	r3, [r3, #4]
 800e3e2:	68ba      	ldr	r2, [r7, #8]
 800e3e4:	4313      	orrs	r3, r2
 800e3e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	68ba      	ldr	r2, [r7, #8]
 800e3ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2201      	movs	r2, #1
 800e3f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e400:	2300      	movs	r3, #0
}
 800e402:	4618      	mov	r0, r3
 800e404:	3714      	adds	r7, #20
 800e406:	46bd      	mov	sp, r7
 800e408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40c:	4770      	bx	lr
 800e40e:	bf00      	nop
 800e410:	40010000 	.word	0x40010000
 800e414:	40000400 	.word	0x40000400
 800e418:	40000800 	.word	0x40000800
 800e41c:	40000c00 	.word	0x40000c00
 800e420:	40010400 	.word	0x40010400
 800e424:	40014000 	.word	0x40014000
 800e428:	40001800 	.word	0x40001800

0800e42c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e42c:	b480      	push	{r7}
 800e42e:	b083      	sub	sp, #12
 800e430:	af00      	add	r7, sp, #0
 800e432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e434:	bf00      	nop
 800e436:	370c      	adds	r7, #12
 800e438:	46bd      	mov	sp, r7
 800e43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43e:	4770      	bx	lr

0800e440 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e440:	b480      	push	{r7}
 800e442:	b083      	sub	sp, #12
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e448:	bf00      	nop
 800e44a:	370c      	adds	r7, #12
 800e44c:	46bd      	mov	sp, r7
 800e44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e452:	4770      	bx	lr

0800e454 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b082      	sub	sp, #8
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d101      	bne.n	800e466 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e462:	2301      	movs	r3, #1
 800e464:	e03f      	b.n	800e4e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e46c:	b2db      	uxtb	r3, r3
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d106      	bne.n	800e480 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	2200      	movs	r2, #0
 800e476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e47a:	6878      	ldr	r0, [r7, #4]
 800e47c:	f7f5 f8e2 	bl	8003644 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	2224      	movs	r2, #36	; 0x24
 800e484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	68da      	ldr	r2, [r3, #12]
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e496:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e498:	6878      	ldr	r0, [r7, #4]
 800e49a:	f000 f9cb 	bl	800e834 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	691a      	ldr	r2, [r3, #16]
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e4ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	695a      	ldr	r2, [r3, #20]
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e4bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	68da      	ldr	r2, [r3, #12]
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e4cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	2220      	movs	r2, #32
 800e4d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	2220      	movs	r2, #32
 800e4e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800e4e4:	2300      	movs	r3, #0
}
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	3708      	adds	r7, #8
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	bd80      	pop	{r7, pc}

0800e4ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e4ee:	b580      	push	{r7, lr}
 800e4f0:	b08a      	sub	sp, #40	; 0x28
 800e4f2:	af02      	add	r7, sp, #8
 800e4f4:	60f8      	str	r0, [r7, #12]
 800e4f6:	60b9      	str	r1, [r7, #8]
 800e4f8:	603b      	str	r3, [r7, #0]
 800e4fa:	4613      	mov	r3, r2
 800e4fc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800e4fe:	2300      	movs	r3, #0
 800e500:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e508:	b2db      	uxtb	r3, r3
 800e50a:	2b20      	cmp	r3, #32
 800e50c:	d17c      	bne.n	800e608 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e50e:	68bb      	ldr	r3, [r7, #8]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d002      	beq.n	800e51a <HAL_UART_Transmit+0x2c>
 800e514:	88fb      	ldrh	r3, [r7, #6]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d101      	bne.n	800e51e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800e51a:	2301      	movs	r3, #1
 800e51c:	e075      	b.n	800e60a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e524:	2b01      	cmp	r3, #1
 800e526:	d101      	bne.n	800e52c <HAL_UART_Transmit+0x3e>
 800e528:	2302      	movs	r3, #2
 800e52a:	e06e      	b.n	800e60a <HAL_UART_Transmit+0x11c>
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	2201      	movs	r2, #1
 800e530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	2200      	movs	r2, #0
 800e538:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	2221      	movs	r2, #33	; 0x21
 800e53e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e542:	f7fa fc7b 	bl	8008e3c <HAL_GetTick>
 800e546:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	88fa      	ldrh	r2, [r7, #6]
 800e54c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	88fa      	ldrh	r2, [r7, #6]
 800e552:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	689b      	ldr	r3, [r3, #8]
 800e558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e55c:	d108      	bne.n	800e570 <HAL_UART_Transmit+0x82>
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	691b      	ldr	r3, [r3, #16]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d104      	bne.n	800e570 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800e566:	2300      	movs	r3, #0
 800e568:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800e56a:	68bb      	ldr	r3, [r7, #8]
 800e56c:	61bb      	str	r3, [r7, #24]
 800e56e:	e003      	b.n	800e578 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800e570:	68bb      	ldr	r3, [r7, #8]
 800e572:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e574:	2300      	movs	r3, #0
 800e576:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	2200      	movs	r2, #0
 800e57c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800e580:	e02a      	b.n	800e5d8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e582:	683b      	ldr	r3, [r7, #0]
 800e584:	9300      	str	r3, [sp, #0]
 800e586:	697b      	ldr	r3, [r7, #20]
 800e588:	2200      	movs	r2, #0
 800e58a:	2180      	movs	r1, #128	; 0x80
 800e58c:	68f8      	ldr	r0, [r7, #12]
 800e58e:	f000 f8e2 	bl	800e756 <UART_WaitOnFlagUntilTimeout>
 800e592:	4603      	mov	r3, r0
 800e594:	2b00      	cmp	r3, #0
 800e596:	d001      	beq.n	800e59c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800e598:	2303      	movs	r3, #3
 800e59a:	e036      	b.n	800e60a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800e59c:	69fb      	ldr	r3, [r7, #28]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d10b      	bne.n	800e5ba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e5a2:	69bb      	ldr	r3, [r7, #24]
 800e5a4:	881b      	ldrh	r3, [r3, #0]
 800e5a6:	461a      	mov	r2, r3
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e5b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800e5b2:	69bb      	ldr	r3, [r7, #24]
 800e5b4:	3302      	adds	r3, #2
 800e5b6:	61bb      	str	r3, [r7, #24]
 800e5b8:	e007      	b.n	800e5ca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800e5ba:	69fb      	ldr	r3, [r7, #28]
 800e5bc:	781a      	ldrb	r2, [r3, #0]
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800e5c4:	69fb      	ldr	r3, [r7, #28]
 800e5c6:	3301      	adds	r3, #1
 800e5c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e5ce:	b29b      	uxth	r3, r3
 800e5d0:	3b01      	subs	r3, #1
 800e5d2:	b29a      	uxth	r2, r3
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e5dc:	b29b      	uxth	r3, r3
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d1cf      	bne.n	800e582 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e5e2:	683b      	ldr	r3, [r7, #0]
 800e5e4:	9300      	str	r3, [sp, #0]
 800e5e6:	697b      	ldr	r3, [r7, #20]
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	2140      	movs	r1, #64	; 0x40
 800e5ec:	68f8      	ldr	r0, [r7, #12]
 800e5ee:	f000 f8b2 	bl	800e756 <UART_WaitOnFlagUntilTimeout>
 800e5f2:	4603      	mov	r3, r0
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d001      	beq.n	800e5fc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800e5f8:	2303      	movs	r3, #3
 800e5fa:	e006      	b.n	800e60a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	2220      	movs	r2, #32
 800e600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800e604:	2300      	movs	r3, #0
 800e606:	e000      	b.n	800e60a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800e608:	2302      	movs	r3, #2
  }
}
 800e60a:	4618      	mov	r0, r3
 800e60c:	3720      	adds	r7, #32
 800e60e:	46bd      	mov	sp, r7
 800e610:	bd80      	pop	{r7, pc}

0800e612 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e612:	b580      	push	{r7, lr}
 800e614:	b08a      	sub	sp, #40	; 0x28
 800e616:	af02      	add	r7, sp, #8
 800e618:	60f8      	str	r0, [r7, #12]
 800e61a:	60b9      	str	r1, [r7, #8]
 800e61c:	603b      	str	r3, [r7, #0]
 800e61e:	4613      	mov	r3, r2
 800e620:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800e622:	2300      	movs	r3, #0
 800e624:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e62c:	b2db      	uxtb	r3, r3
 800e62e:	2b20      	cmp	r3, #32
 800e630:	f040 808c 	bne.w	800e74c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e634:	68bb      	ldr	r3, [r7, #8]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d002      	beq.n	800e640 <HAL_UART_Receive+0x2e>
 800e63a:	88fb      	ldrh	r3, [r7, #6]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d101      	bne.n	800e644 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800e640:	2301      	movs	r3, #1
 800e642:	e084      	b.n	800e74e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e64a:	2b01      	cmp	r3, #1
 800e64c:	d101      	bne.n	800e652 <HAL_UART_Receive+0x40>
 800e64e:	2302      	movs	r3, #2
 800e650:	e07d      	b.n	800e74e <HAL_UART_Receive+0x13c>
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	2201      	movs	r2, #1
 800e656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	2200      	movs	r2, #0
 800e65e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	2222      	movs	r2, #34	; 0x22
 800e664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	2200      	movs	r2, #0
 800e66c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e66e:	f7fa fbe5 	bl	8008e3c <HAL_GetTick>
 800e672:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	88fa      	ldrh	r2, [r7, #6]
 800e678:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	88fa      	ldrh	r2, [r7, #6]
 800e67e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	689b      	ldr	r3, [r3, #8]
 800e684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e688:	d108      	bne.n	800e69c <HAL_UART_Receive+0x8a>
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	691b      	ldr	r3, [r3, #16]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d104      	bne.n	800e69c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800e692:	2300      	movs	r3, #0
 800e694:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800e696:	68bb      	ldr	r3, [r7, #8]
 800e698:	61bb      	str	r3, [r7, #24]
 800e69a:	e003      	b.n	800e6a4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800e69c:	68bb      	ldr	r3, [r7, #8]
 800e69e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800e6ac:	e043      	b.n	800e736 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800e6ae:	683b      	ldr	r3, [r7, #0]
 800e6b0:	9300      	str	r3, [sp, #0]
 800e6b2:	697b      	ldr	r3, [r7, #20]
 800e6b4:	2200      	movs	r2, #0
 800e6b6:	2120      	movs	r1, #32
 800e6b8:	68f8      	ldr	r0, [r7, #12]
 800e6ba:	f000 f84c 	bl	800e756 <UART_WaitOnFlagUntilTimeout>
 800e6be:	4603      	mov	r3, r0
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d001      	beq.n	800e6c8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800e6c4:	2303      	movs	r3, #3
 800e6c6:	e042      	b.n	800e74e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800e6c8:	69fb      	ldr	r3, [r7, #28]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d10c      	bne.n	800e6e8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	685b      	ldr	r3, [r3, #4]
 800e6d4:	b29b      	uxth	r3, r3
 800e6d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e6da:	b29a      	uxth	r2, r3
 800e6dc:	69bb      	ldr	r3, [r7, #24]
 800e6de:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800e6e0:	69bb      	ldr	r3, [r7, #24]
 800e6e2:	3302      	adds	r3, #2
 800e6e4:	61bb      	str	r3, [r7, #24]
 800e6e6:	e01f      	b.n	800e728 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	689b      	ldr	r3, [r3, #8]
 800e6ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e6f0:	d007      	beq.n	800e702 <HAL_UART_Receive+0xf0>
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	689b      	ldr	r3, [r3, #8]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d10a      	bne.n	800e710 <HAL_UART_Receive+0xfe>
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	691b      	ldr	r3, [r3, #16]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d106      	bne.n	800e710 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	685b      	ldr	r3, [r3, #4]
 800e708:	b2da      	uxtb	r2, r3
 800e70a:	69fb      	ldr	r3, [r7, #28]
 800e70c:	701a      	strb	r2, [r3, #0]
 800e70e:	e008      	b.n	800e722 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	685b      	ldr	r3, [r3, #4]
 800e716:	b2db      	uxtb	r3, r3
 800e718:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e71c:	b2da      	uxtb	r2, r3
 800e71e:	69fb      	ldr	r3, [r7, #28]
 800e720:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800e722:	69fb      	ldr	r3, [r7, #28]
 800e724:	3301      	adds	r3, #1
 800e726:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e72c:	b29b      	uxth	r3, r3
 800e72e:	3b01      	subs	r3, #1
 800e730:	b29a      	uxth	r2, r3
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e73a:	b29b      	uxth	r3, r3
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d1b6      	bne.n	800e6ae <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	2220      	movs	r2, #32
 800e744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800e748:	2300      	movs	r3, #0
 800e74a:	e000      	b.n	800e74e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800e74c:	2302      	movs	r3, #2
  }
}
 800e74e:	4618      	mov	r0, r3
 800e750:	3720      	adds	r7, #32
 800e752:	46bd      	mov	sp, r7
 800e754:	bd80      	pop	{r7, pc}

0800e756 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800e756:	b580      	push	{r7, lr}
 800e758:	b090      	sub	sp, #64	; 0x40
 800e75a:	af00      	add	r7, sp, #0
 800e75c:	60f8      	str	r0, [r7, #12]
 800e75e:	60b9      	str	r1, [r7, #8]
 800e760:	603b      	str	r3, [r7, #0]
 800e762:	4613      	mov	r3, r2
 800e764:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e766:	e050      	b.n	800e80a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e768:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e76a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e76e:	d04c      	beq.n	800e80a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800e770:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e772:	2b00      	cmp	r3, #0
 800e774:	d007      	beq.n	800e786 <UART_WaitOnFlagUntilTimeout+0x30>
 800e776:	f7fa fb61 	bl	8008e3c <HAL_GetTick>
 800e77a:	4602      	mov	r2, r0
 800e77c:	683b      	ldr	r3, [r7, #0]
 800e77e:	1ad3      	subs	r3, r2, r3
 800e780:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e782:	429a      	cmp	r2, r3
 800e784:	d241      	bcs.n	800e80a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	330c      	adds	r3, #12
 800e78c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e790:	e853 3f00 	ldrex	r3, [r3]
 800e794:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e798:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e79c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	330c      	adds	r3, #12
 800e7a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e7a6:	637a      	str	r2, [r7, #52]	; 0x34
 800e7a8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e7ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e7ae:	e841 2300 	strex	r3, r2, [r1]
 800e7b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e7b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d1e5      	bne.n	800e786 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	3314      	adds	r3, #20
 800e7c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7c2:	697b      	ldr	r3, [r7, #20]
 800e7c4:	e853 3f00 	ldrex	r3, [r3]
 800e7c8:	613b      	str	r3, [r7, #16]
   return(result);
 800e7ca:	693b      	ldr	r3, [r7, #16]
 800e7cc:	f023 0301 	bic.w	r3, r3, #1
 800e7d0:	63bb      	str	r3, [r7, #56]	; 0x38
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	3314      	adds	r3, #20
 800e7d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e7da:	623a      	str	r2, [r7, #32]
 800e7dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7de:	69f9      	ldr	r1, [r7, #28]
 800e7e0:	6a3a      	ldr	r2, [r7, #32]
 800e7e2:	e841 2300 	strex	r3, r2, [r1]
 800e7e6:	61bb      	str	r3, [r7, #24]
   return(result);
 800e7e8:	69bb      	ldr	r3, [r7, #24]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d1e5      	bne.n	800e7ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	2220      	movs	r2, #32
 800e7f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	2220      	movs	r2, #32
 800e7fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	2200      	movs	r2, #0
 800e802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800e806:	2303      	movs	r3, #3
 800e808:	e00f      	b.n	800e82a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	681a      	ldr	r2, [r3, #0]
 800e810:	68bb      	ldr	r3, [r7, #8]
 800e812:	4013      	ands	r3, r2
 800e814:	68ba      	ldr	r2, [r7, #8]
 800e816:	429a      	cmp	r2, r3
 800e818:	bf0c      	ite	eq
 800e81a:	2301      	moveq	r3, #1
 800e81c:	2300      	movne	r3, #0
 800e81e:	b2db      	uxtb	r3, r3
 800e820:	461a      	mov	r2, r3
 800e822:	79fb      	ldrb	r3, [r7, #7]
 800e824:	429a      	cmp	r2, r3
 800e826:	d09f      	beq.n	800e768 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e828:	2300      	movs	r3, #0
}
 800e82a:	4618      	mov	r0, r3
 800e82c:	3740      	adds	r7, #64	; 0x40
 800e82e:	46bd      	mov	sp, r7
 800e830:	bd80      	pop	{r7, pc}
	...

0800e834 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e838:	b09f      	sub	sp, #124	; 0x7c
 800e83a:	af00      	add	r7, sp, #0
 800e83c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e83e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	691b      	ldr	r3, [r3, #16]
 800e844:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800e848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e84a:	68d9      	ldr	r1, [r3, #12]
 800e84c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e84e:	681a      	ldr	r2, [r3, #0]
 800e850:	ea40 0301 	orr.w	r3, r0, r1
 800e854:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e856:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e858:	689a      	ldr	r2, [r3, #8]
 800e85a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e85c:	691b      	ldr	r3, [r3, #16]
 800e85e:	431a      	orrs	r2, r3
 800e860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e862:	695b      	ldr	r3, [r3, #20]
 800e864:	431a      	orrs	r2, r3
 800e866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e868:	69db      	ldr	r3, [r3, #28]
 800e86a:	4313      	orrs	r3, r2
 800e86c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800e86e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	68db      	ldr	r3, [r3, #12]
 800e874:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800e878:	f021 010c 	bic.w	r1, r1, #12
 800e87c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e87e:	681a      	ldr	r2, [r3, #0]
 800e880:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e882:	430b      	orrs	r3, r1
 800e884:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	695b      	ldr	r3, [r3, #20]
 800e88c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800e890:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e892:	6999      	ldr	r1, [r3, #24]
 800e894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e896:	681a      	ldr	r2, [r3, #0]
 800e898:	ea40 0301 	orr.w	r3, r0, r1
 800e89c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e89e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8a0:	681a      	ldr	r2, [r3, #0]
 800e8a2:	4bc5      	ldr	r3, [pc, #788]	; (800ebb8 <UART_SetConfig+0x384>)
 800e8a4:	429a      	cmp	r2, r3
 800e8a6:	d004      	beq.n	800e8b2 <UART_SetConfig+0x7e>
 800e8a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8aa:	681a      	ldr	r2, [r3, #0]
 800e8ac:	4bc3      	ldr	r3, [pc, #780]	; (800ebbc <UART_SetConfig+0x388>)
 800e8ae:	429a      	cmp	r2, r3
 800e8b0:	d103      	bne.n	800e8ba <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800e8b2:	f7fc ff69 	bl	800b788 <HAL_RCC_GetPCLK2Freq>
 800e8b6:	6778      	str	r0, [r7, #116]	; 0x74
 800e8b8:	e002      	b.n	800e8c0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800e8ba:	f7fc ff51 	bl	800b760 <HAL_RCC_GetPCLK1Freq>
 800e8be:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e8c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8c2:	69db      	ldr	r3, [r3, #28]
 800e8c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e8c8:	f040 80b6 	bne.w	800ea38 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e8cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e8ce:	461c      	mov	r4, r3
 800e8d0:	f04f 0500 	mov.w	r5, #0
 800e8d4:	4622      	mov	r2, r4
 800e8d6:	462b      	mov	r3, r5
 800e8d8:	1891      	adds	r1, r2, r2
 800e8da:	6439      	str	r1, [r7, #64]	; 0x40
 800e8dc:	415b      	adcs	r3, r3
 800e8de:	647b      	str	r3, [r7, #68]	; 0x44
 800e8e0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800e8e4:	1912      	adds	r2, r2, r4
 800e8e6:	eb45 0303 	adc.w	r3, r5, r3
 800e8ea:	f04f 0000 	mov.w	r0, #0
 800e8ee:	f04f 0100 	mov.w	r1, #0
 800e8f2:	00d9      	lsls	r1, r3, #3
 800e8f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e8f8:	00d0      	lsls	r0, r2, #3
 800e8fa:	4602      	mov	r2, r0
 800e8fc:	460b      	mov	r3, r1
 800e8fe:	1911      	adds	r1, r2, r4
 800e900:	6639      	str	r1, [r7, #96]	; 0x60
 800e902:	416b      	adcs	r3, r5
 800e904:	667b      	str	r3, [r7, #100]	; 0x64
 800e906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e908:	685b      	ldr	r3, [r3, #4]
 800e90a:	461a      	mov	r2, r3
 800e90c:	f04f 0300 	mov.w	r3, #0
 800e910:	1891      	adds	r1, r2, r2
 800e912:	63b9      	str	r1, [r7, #56]	; 0x38
 800e914:	415b      	adcs	r3, r3
 800e916:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e918:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800e91c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800e920:	f7f2 f9d2 	bl	8000cc8 <__aeabi_uldivmod>
 800e924:	4602      	mov	r2, r0
 800e926:	460b      	mov	r3, r1
 800e928:	4ba5      	ldr	r3, [pc, #660]	; (800ebc0 <UART_SetConfig+0x38c>)
 800e92a:	fba3 2302 	umull	r2, r3, r3, r2
 800e92e:	095b      	lsrs	r3, r3, #5
 800e930:	011e      	lsls	r6, r3, #4
 800e932:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e934:	461c      	mov	r4, r3
 800e936:	f04f 0500 	mov.w	r5, #0
 800e93a:	4622      	mov	r2, r4
 800e93c:	462b      	mov	r3, r5
 800e93e:	1891      	adds	r1, r2, r2
 800e940:	6339      	str	r1, [r7, #48]	; 0x30
 800e942:	415b      	adcs	r3, r3
 800e944:	637b      	str	r3, [r7, #52]	; 0x34
 800e946:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800e94a:	1912      	adds	r2, r2, r4
 800e94c:	eb45 0303 	adc.w	r3, r5, r3
 800e950:	f04f 0000 	mov.w	r0, #0
 800e954:	f04f 0100 	mov.w	r1, #0
 800e958:	00d9      	lsls	r1, r3, #3
 800e95a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e95e:	00d0      	lsls	r0, r2, #3
 800e960:	4602      	mov	r2, r0
 800e962:	460b      	mov	r3, r1
 800e964:	1911      	adds	r1, r2, r4
 800e966:	65b9      	str	r1, [r7, #88]	; 0x58
 800e968:	416b      	adcs	r3, r5
 800e96a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e96c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e96e:	685b      	ldr	r3, [r3, #4]
 800e970:	461a      	mov	r2, r3
 800e972:	f04f 0300 	mov.w	r3, #0
 800e976:	1891      	adds	r1, r2, r2
 800e978:	62b9      	str	r1, [r7, #40]	; 0x28
 800e97a:	415b      	adcs	r3, r3
 800e97c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e97e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800e982:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800e986:	f7f2 f99f 	bl	8000cc8 <__aeabi_uldivmod>
 800e98a:	4602      	mov	r2, r0
 800e98c:	460b      	mov	r3, r1
 800e98e:	4b8c      	ldr	r3, [pc, #560]	; (800ebc0 <UART_SetConfig+0x38c>)
 800e990:	fba3 1302 	umull	r1, r3, r3, r2
 800e994:	095b      	lsrs	r3, r3, #5
 800e996:	2164      	movs	r1, #100	; 0x64
 800e998:	fb01 f303 	mul.w	r3, r1, r3
 800e99c:	1ad3      	subs	r3, r2, r3
 800e99e:	00db      	lsls	r3, r3, #3
 800e9a0:	3332      	adds	r3, #50	; 0x32
 800e9a2:	4a87      	ldr	r2, [pc, #540]	; (800ebc0 <UART_SetConfig+0x38c>)
 800e9a4:	fba2 2303 	umull	r2, r3, r2, r3
 800e9a8:	095b      	lsrs	r3, r3, #5
 800e9aa:	005b      	lsls	r3, r3, #1
 800e9ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e9b0:	441e      	add	r6, r3
 800e9b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	f04f 0100 	mov.w	r1, #0
 800e9ba:	4602      	mov	r2, r0
 800e9bc:	460b      	mov	r3, r1
 800e9be:	1894      	adds	r4, r2, r2
 800e9c0:	623c      	str	r4, [r7, #32]
 800e9c2:	415b      	adcs	r3, r3
 800e9c4:	627b      	str	r3, [r7, #36]	; 0x24
 800e9c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e9ca:	1812      	adds	r2, r2, r0
 800e9cc:	eb41 0303 	adc.w	r3, r1, r3
 800e9d0:	f04f 0400 	mov.w	r4, #0
 800e9d4:	f04f 0500 	mov.w	r5, #0
 800e9d8:	00dd      	lsls	r5, r3, #3
 800e9da:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800e9de:	00d4      	lsls	r4, r2, #3
 800e9e0:	4622      	mov	r2, r4
 800e9e2:	462b      	mov	r3, r5
 800e9e4:	1814      	adds	r4, r2, r0
 800e9e6:	653c      	str	r4, [r7, #80]	; 0x50
 800e9e8:	414b      	adcs	r3, r1
 800e9ea:	657b      	str	r3, [r7, #84]	; 0x54
 800e9ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9ee:	685b      	ldr	r3, [r3, #4]
 800e9f0:	461a      	mov	r2, r3
 800e9f2:	f04f 0300 	mov.w	r3, #0
 800e9f6:	1891      	adds	r1, r2, r2
 800e9f8:	61b9      	str	r1, [r7, #24]
 800e9fa:	415b      	adcs	r3, r3
 800e9fc:	61fb      	str	r3, [r7, #28]
 800e9fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ea02:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800ea06:	f7f2 f95f 	bl	8000cc8 <__aeabi_uldivmod>
 800ea0a:	4602      	mov	r2, r0
 800ea0c:	460b      	mov	r3, r1
 800ea0e:	4b6c      	ldr	r3, [pc, #432]	; (800ebc0 <UART_SetConfig+0x38c>)
 800ea10:	fba3 1302 	umull	r1, r3, r3, r2
 800ea14:	095b      	lsrs	r3, r3, #5
 800ea16:	2164      	movs	r1, #100	; 0x64
 800ea18:	fb01 f303 	mul.w	r3, r1, r3
 800ea1c:	1ad3      	subs	r3, r2, r3
 800ea1e:	00db      	lsls	r3, r3, #3
 800ea20:	3332      	adds	r3, #50	; 0x32
 800ea22:	4a67      	ldr	r2, [pc, #412]	; (800ebc0 <UART_SetConfig+0x38c>)
 800ea24:	fba2 2303 	umull	r2, r3, r2, r3
 800ea28:	095b      	lsrs	r3, r3, #5
 800ea2a:	f003 0207 	and.w	r2, r3, #7
 800ea2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	4432      	add	r2, r6
 800ea34:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ea36:	e0b9      	b.n	800ebac <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ea38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ea3a:	461c      	mov	r4, r3
 800ea3c:	f04f 0500 	mov.w	r5, #0
 800ea40:	4622      	mov	r2, r4
 800ea42:	462b      	mov	r3, r5
 800ea44:	1891      	adds	r1, r2, r2
 800ea46:	6139      	str	r1, [r7, #16]
 800ea48:	415b      	adcs	r3, r3
 800ea4a:	617b      	str	r3, [r7, #20]
 800ea4c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ea50:	1912      	adds	r2, r2, r4
 800ea52:	eb45 0303 	adc.w	r3, r5, r3
 800ea56:	f04f 0000 	mov.w	r0, #0
 800ea5a:	f04f 0100 	mov.w	r1, #0
 800ea5e:	00d9      	lsls	r1, r3, #3
 800ea60:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ea64:	00d0      	lsls	r0, r2, #3
 800ea66:	4602      	mov	r2, r0
 800ea68:	460b      	mov	r3, r1
 800ea6a:	eb12 0804 	adds.w	r8, r2, r4
 800ea6e:	eb43 0905 	adc.w	r9, r3, r5
 800ea72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea74:	685b      	ldr	r3, [r3, #4]
 800ea76:	4618      	mov	r0, r3
 800ea78:	f04f 0100 	mov.w	r1, #0
 800ea7c:	f04f 0200 	mov.w	r2, #0
 800ea80:	f04f 0300 	mov.w	r3, #0
 800ea84:	008b      	lsls	r3, r1, #2
 800ea86:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ea8a:	0082      	lsls	r2, r0, #2
 800ea8c:	4640      	mov	r0, r8
 800ea8e:	4649      	mov	r1, r9
 800ea90:	f7f2 f91a 	bl	8000cc8 <__aeabi_uldivmod>
 800ea94:	4602      	mov	r2, r0
 800ea96:	460b      	mov	r3, r1
 800ea98:	4b49      	ldr	r3, [pc, #292]	; (800ebc0 <UART_SetConfig+0x38c>)
 800ea9a:	fba3 2302 	umull	r2, r3, r3, r2
 800ea9e:	095b      	lsrs	r3, r3, #5
 800eaa0:	011e      	lsls	r6, r3, #4
 800eaa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	f04f 0100 	mov.w	r1, #0
 800eaaa:	4602      	mov	r2, r0
 800eaac:	460b      	mov	r3, r1
 800eaae:	1894      	adds	r4, r2, r2
 800eab0:	60bc      	str	r4, [r7, #8]
 800eab2:	415b      	adcs	r3, r3
 800eab4:	60fb      	str	r3, [r7, #12]
 800eab6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800eaba:	1812      	adds	r2, r2, r0
 800eabc:	eb41 0303 	adc.w	r3, r1, r3
 800eac0:	f04f 0400 	mov.w	r4, #0
 800eac4:	f04f 0500 	mov.w	r5, #0
 800eac8:	00dd      	lsls	r5, r3, #3
 800eaca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800eace:	00d4      	lsls	r4, r2, #3
 800ead0:	4622      	mov	r2, r4
 800ead2:	462b      	mov	r3, r5
 800ead4:	1814      	adds	r4, r2, r0
 800ead6:	64bc      	str	r4, [r7, #72]	; 0x48
 800ead8:	414b      	adcs	r3, r1
 800eada:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eadc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eade:	685b      	ldr	r3, [r3, #4]
 800eae0:	4618      	mov	r0, r3
 800eae2:	f04f 0100 	mov.w	r1, #0
 800eae6:	f04f 0200 	mov.w	r2, #0
 800eaea:	f04f 0300 	mov.w	r3, #0
 800eaee:	008b      	lsls	r3, r1, #2
 800eaf0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800eaf4:	0082      	lsls	r2, r0, #2
 800eaf6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800eafa:	f7f2 f8e5 	bl	8000cc8 <__aeabi_uldivmod>
 800eafe:	4602      	mov	r2, r0
 800eb00:	460b      	mov	r3, r1
 800eb02:	4b2f      	ldr	r3, [pc, #188]	; (800ebc0 <UART_SetConfig+0x38c>)
 800eb04:	fba3 1302 	umull	r1, r3, r3, r2
 800eb08:	095b      	lsrs	r3, r3, #5
 800eb0a:	2164      	movs	r1, #100	; 0x64
 800eb0c:	fb01 f303 	mul.w	r3, r1, r3
 800eb10:	1ad3      	subs	r3, r2, r3
 800eb12:	011b      	lsls	r3, r3, #4
 800eb14:	3332      	adds	r3, #50	; 0x32
 800eb16:	4a2a      	ldr	r2, [pc, #168]	; (800ebc0 <UART_SetConfig+0x38c>)
 800eb18:	fba2 2303 	umull	r2, r3, r2, r3
 800eb1c:	095b      	lsrs	r3, r3, #5
 800eb1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800eb22:	441e      	add	r6, r3
 800eb24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eb26:	4618      	mov	r0, r3
 800eb28:	f04f 0100 	mov.w	r1, #0
 800eb2c:	4602      	mov	r2, r0
 800eb2e:	460b      	mov	r3, r1
 800eb30:	1894      	adds	r4, r2, r2
 800eb32:	603c      	str	r4, [r7, #0]
 800eb34:	415b      	adcs	r3, r3
 800eb36:	607b      	str	r3, [r7, #4]
 800eb38:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eb3c:	1812      	adds	r2, r2, r0
 800eb3e:	eb41 0303 	adc.w	r3, r1, r3
 800eb42:	f04f 0400 	mov.w	r4, #0
 800eb46:	f04f 0500 	mov.w	r5, #0
 800eb4a:	00dd      	lsls	r5, r3, #3
 800eb4c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800eb50:	00d4      	lsls	r4, r2, #3
 800eb52:	4622      	mov	r2, r4
 800eb54:	462b      	mov	r3, r5
 800eb56:	eb12 0a00 	adds.w	sl, r2, r0
 800eb5a:	eb43 0b01 	adc.w	fp, r3, r1
 800eb5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb60:	685b      	ldr	r3, [r3, #4]
 800eb62:	4618      	mov	r0, r3
 800eb64:	f04f 0100 	mov.w	r1, #0
 800eb68:	f04f 0200 	mov.w	r2, #0
 800eb6c:	f04f 0300 	mov.w	r3, #0
 800eb70:	008b      	lsls	r3, r1, #2
 800eb72:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800eb76:	0082      	lsls	r2, r0, #2
 800eb78:	4650      	mov	r0, sl
 800eb7a:	4659      	mov	r1, fp
 800eb7c:	f7f2 f8a4 	bl	8000cc8 <__aeabi_uldivmod>
 800eb80:	4602      	mov	r2, r0
 800eb82:	460b      	mov	r3, r1
 800eb84:	4b0e      	ldr	r3, [pc, #56]	; (800ebc0 <UART_SetConfig+0x38c>)
 800eb86:	fba3 1302 	umull	r1, r3, r3, r2
 800eb8a:	095b      	lsrs	r3, r3, #5
 800eb8c:	2164      	movs	r1, #100	; 0x64
 800eb8e:	fb01 f303 	mul.w	r3, r1, r3
 800eb92:	1ad3      	subs	r3, r2, r3
 800eb94:	011b      	lsls	r3, r3, #4
 800eb96:	3332      	adds	r3, #50	; 0x32
 800eb98:	4a09      	ldr	r2, [pc, #36]	; (800ebc0 <UART_SetConfig+0x38c>)
 800eb9a:	fba2 2303 	umull	r2, r3, r2, r3
 800eb9e:	095b      	lsrs	r3, r3, #5
 800eba0:	f003 020f 	and.w	r2, r3, #15
 800eba4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	4432      	add	r2, r6
 800ebaa:	609a      	str	r2, [r3, #8]
}
 800ebac:	bf00      	nop
 800ebae:	377c      	adds	r7, #124	; 0x7c
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebb6:	bf00      	nop
 800ebb8:	40011000 	.word	0x40011000
 800ebbc:	40011400 	.word	0x40011400
 800ebc0:	51eb851f 	.word	0x51eb851f

0800ebc4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800ebc8:	4904      	ldr	r1, [pc, #16]	; (800ebdc <MX_FATFS_Init+0x18>)
 800ebca:	4805      	ldr	r0, [pc, #20]	; (800ebe0 <MX_FATFS_Init+0x1c>)
 800ebcc:	f000 f8b0 	bl	800ed30 <FATFS_LinkDriver>
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	461a      	mov	r2, r3
 800ebd4:	4b03      	ldr	r3, [pc, #12]	; (800ebe4 <MX_FATFS_Init+0x20>)
 800ebd6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ebd8:	bf00      	nop
 800ebda:	bd80      	pop	{r7, pc}
 800ebdc:	20006094 	.word	0x20006094
 800ebe0:	200000d0 	.word	0x200000d0
 800ebe4:	20006098 	.word	0x20006098

0800ebe8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800ebe8:	b480      	push	{r7}
 800ebea:	b083      	sub	sp, #12
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	4603      	mov	r3, r0
 800ebf0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800ebf2:	4b06      	ldr	r3, [pc, #24]	; (800ec0c <USER_initialize+0x24>)
 800ebf4:	2201      	movs	r2, #1
 800ebf6:	701a      	strb	r2, [r3, #0]
    return Stat;
 800ebf8:	4b04      	ldr	r3, [pc, #16]	; (800ec0c <USER_initialize+0x24>)
 800ebfa:	781b      	ldrb	r3, [r3, #0]
 800ebfc:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800ebfe:	4618      	mov	r0, r3
 800ec00:	370c      	adds	r7, #12
 800ec02:	46bd      	mov	sp, r7
 800ec04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec08:	4770      	bx	lr
 800ec0a:	bf00      	nop
 800ec0c:	200000cd 	.word	0x200000cd

0800ec10 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800ec10:	b480      	push	{r7}
 800ec12:	b083      	sub	sp, #12
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	4603      	mov	r3, r0
 800ec18:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800ec1a:	4b06      	ldr	r3, [pc, #24]	; (800ec34 <USER_status+0x24>)
 800ec1c:	2201      	movs	r2, #1
 800ec1e:	701a      	strb	r2, [r3, #0]
    return Stat;
 800ec20:	4b04      	ldr	r3, [pc, #16]	; (800ec34 <USER_status+0x24>)
 800ec22:	781b      	ldrb	r3, [r3, #0]
 800ec24:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800ec26:	4618      	mov	r0, r3
 800ec28:	370c      	adds	r7, #12
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec30:	4770      	bx	lr
 800ec32:	bf00      	nop
 800ec34:	200000cd 	.word	0x200000cd

0800ec38 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800ec38:	b480      	push	{r7}
 800ec3a:	b085      	sub	sp, #20
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	60b9      	str	r1, [r7, #8]
 800ec40:	607a      	str	r2, [r7, #4]
 800ec42:	603b      	str	r3, [r7, #0]
 800ec44:	4603      	mov	r3, r0
 800ec46:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800ec48:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	3714      	adds	r7, #20
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec54:	4770      	bx	lr

0800ec56 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800ec56:	b480      	push	{r7}
 800ec58:	b085      	sub	sp, #20
 800ec5a:	af00      	add	r7, sp, #0
 800ec5c:	60b9      	str	r1, [r7, #8]
 800ec5e:	607a      	str	r2, [r7, #4]
 800ec60:	603b      	str	r3, [r7, #0]
 800ec62:	4603      	mov	r3, r0
 800ec64:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800ec66:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800ec68:	4618      	mov	r0, r3
 800ec6a:	3714      	adds	r7, #20
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec72:	4770      	bx	lr

0800ec74 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800ec74:	b480      	push	{r7}
 800ec76:	b085      	sub	sp, #20
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	4603      	mov	r3, r0
 800ec7c:	603a      	str	r2, [r7, #0]
 800ec7e:	71fb      	strb	r3, [r7, #7]
 800ec80:	460b      	mov	r3, r1
 800ec82:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800ec84:	2301      	movs	r3, #1
 800ec86:	73fb      	strb	r3, [r7, #15]
    return res;
 800ec88:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	3714      	adds	r7, #20
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec94:	4770      	bx	lr
	...

0800ec98 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ec98:	b480      	push	{r7}
 800ec9a:	b087      	sub	sp, #28
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	60f8      	str	r0, [r7, #12]
 800eca0:	60b9      	str	r1, [r7, #8]
 800eca2:	4613      	mov	r3, r2
 800eca4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800eca6:	2301      	movs	r3, #1
 800eca8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ecaa:	2300      	movs	r3, #0
 800ecac:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ecae:	4b1f      	ldr	r3, [pc, #124]	; (800ed2c <FATFS_LinkDriverEx+0x94>)
 800ecb0:	7a5b      	ldrb	r3, [r3, #9]
 800ecb2:	b2db      	uxtb	r3, r3
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d131      	bne.n	800ed1c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ecb8:	4b1c      	ldr	r3, [pc, #112]	; (800ed2c <FATFS_LinkDriverEx+0x94>)
 800ecba:	7a5b      	ldrb	r3, [r3, #9]
 800ecbc:	b2db      	uxtb	r3, r3
 800ecbe:	461a      	mov	r2, r3
 800ecc0:	4b1a      	ldr	r3, [pc, #104]	; (800ed2c <FATFS_LinkDriverEx+0x94>)
 800ecc2:	2100      	movs	r1, #0
 800ecc4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ecc6:	4b19      	ldr	r3, [pc, #100]	; (800ed2c <FATFS_LinkDriverEx+0x94>)
 800ecc8:	7a5b      	ldrb	r3, [r3, #9]
 800ecca:	b2db      	uxtb	r3, r3
 800eccc:	4a17      	ldr	r2, [pc, #92]	; (800ed2c <FATFS_LinkDriverEx+0x94>)
 800ecce:	009b      	lsls	r3, r3, #2
 800ecd0:	4413      	add	r3, r2
 800ecd2:	68fa      	ldr	r2, [r7, #12]
 800ecd4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ecd6:	4b15      	ldr	r3, [pc, #84]	; (800ed2c <FATFS_LinkDriverEx+0x94>)
 800ecd8:	7a5b      	ldrb	r3, [r3, #9]
 800ecda:	b2db      	uxtb	r3, r3
 800ecdc:	461a      	mov	r2, r3
 800ecde:	4b13      	ldr	r3, [pc, #76]	; (800ed2c <FATFS_LinkDriverEx+0x94>)
 800ece0:	4413      	add	r3, r2
 800ece2:	79fa      	ldrb	r2, [r7, #7]
 800ece4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ece6:	4b11      	ldr	r3, [pc, #68]	; (800ed2c <FATFS_LinkDriverEx+0x94>)
 800ece8:	7a5b      	ldrb	r3, [r3, #9]
 800ecea:	b2db      	uxtb	r3, r3
 800ecec:	1c5a      	adds	r2, r3, #1
 800ecee:	b2d1      	uxtb	r1, r2
 800ecf0:	4a0e      	ldr	r2, [pc, #56]	; (800ed2c <FATFS_LinkDriverEx+0x94>)
 800ecf2:	7251      	strb	r1, [r2, #9]
 800ecf4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ecf6:	7dbb      	ldrb	r3, [r7, #22]
 800ecf8:	3330      	adds	r3, #48	; 0x30
 800ecfa:	b2da      	uxtb	r2, r3
 800ecfc:	68bb      	ldr	r3, [r7, #8]
 800ecfe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ed00:	68bb      	ldr	r3, [r7, #8]
 800ed02:	3301      	adds	r3, #1
 800ed04:	223a      	movs	r2, #58	; 0x3a
 800ed06:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ed08:	68bb      	ldr	r3, [r7, #8]
 800ed0a:	3302      	adds	r3, #2
 800ed0c:	222f      	movs	r2, #47	; 0x2f
 800ed0e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ed10:	68bb      	ldr	r3, [r7, #8]
 800ed12:	3303      	adds	r3, #3
 800ed14:	2200      	movs	r2, #0
 800ed16:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ed18:	2300      	movs	r3, #0
 800ed1a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ed1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed1e:	4618      	mov	r0, r3
 800ed20:	371c      	adds	r7, #28
 800ed22:	46bd      	mov	sp, r7
 800ed24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed28:	4770      	bx	lr
 800ed2a:	bf00      	nop
 800ed2c:	200006a8 	.word	0x200006a8

0800ed30 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b082      	sub	sp, #8
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
 800ed38:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	6839      	ldr	r1, [r7, #0]
 800ed3e:	6878      	ldr	r0, [r7, #4]
 800ed40:	f7ff ffaa 	bl	800ec98 <FATFS_LinkDriverEx>
 800ed44:	4603      	mov	r3, r0
}
 800ed46:	4618      	mov	r0, r3
 800ed48:	3708      	adds	r7, #8
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bd80      	pop	{r7, pc}
	...

0800ed50 <__NVIC_SetPriority>:
{
 800ed50:	b480      	push	{r7}
 800ed52:	b083      	sub	sp, #12
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	4603      	mov	r3, r0
 800ed58:	6039      	str	r1, [r7, #0]
 800ed5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ed5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	db0a      	blt.n	800ed7a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ed64:	683b      	ldr	r3, [r7, #0]
 800ed66:	b2da      	uxtb	r2, r3
 800ed68:	490c      	ldr	r1, [pc, #48]	; (800ed9c <__NVIC_SetPriority+0x4c>)
 800ed6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ed6e:	0112      	lsls	r2, r2, #4
 800ed70:	b2d2      	uxtb	r2, r2
 800ed72:	440b      	add	r3, r1
 800ed74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ed78:	e00a      	b.n	800ed90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ed7a:	683b      	ldr	r3, [r7, #0]
 800ed7c:	b2da      	uxtb	r2, r3
 800ed7e:	4908      	ldr	r1, [pc, #32]	; (800eda0 <__NVIC_SetPriority+0x50>)
 800ed80:	79fb      	ldrb	r3, [r7, #7]
 800ed82:	f003 030f 	and.w	r3, r3, #15
 800ed86:	3b04      	subs	r3, #4
 800ed88:	0112      	lsls	r2, r2, #4
 800ed8a:	b2d2      	uxtb	r2, r2
 800ed8c:	440b      	add	r3, r1
 800ed8e:	761a      	strb	r2, [r3, #24]
}
 800ed90:	bf00      	nop
 800ed92:	370c      	adds	r7, #12
 800ed94:	46bd      	mov	sp, r7
 800ed96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9a:	4770      	bx	lr
 800ed9c:	e000e100 	.word	0xe000e100
 800eda0:	e000ed00 	.word	0xe000ed00

0800eda4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800eda4:	b580      	push	{r7, lr}
 800eda6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800eda8:	4b05      	ldr	r3, [pc, #20]	; (800edc0 <SysTick_Handler+0x1c>)
 800edaa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800edac:	f001 ff3c 	bl	8010c28 <xTaskGetSchedulerState>
 800edb0:	4603      	mov	r3, r0
 800edb2:	2b01      	cmp	r3, #1
 800edb4:	d001      	beq.n	800edba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800edb6:	f002 fd27 	bl	8011808 <xPortSysTickHandler>
  }
}
 800edba:	bf00      	nop
 800edbc:	bd80      	pop	{r7, pc}
 800edbe:	bf00      	nop
 800edc0:	e000e010 	.word	0xe000e010

0800edc4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800edc4:	b580      	push	{r7, lr}
 800edc6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800edc8:	2100      	movs	r1, #0
 800edca:	f06f 0004 	mvn.w	r0, #4
 800edce:	f7ff ffbf 	bl	800ed50 <__NVIC_SetPriority>
#endif
}
 800edd2:	bf00      	nop
 800edd4:	bd80      	pop	{r7, pc}
	...

0800edd8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800edd8:	b480      	push	{r7}
 800edda:	b083      	sub	sp, #12
 800eddc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800edde:	f3ef 8305 	mrs	r3, IPSR
 800ede2:	603b      	str	r3, [r7, #0]
  return(result);
 800ede4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d003      	beq.n	800edf2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800edea:	f06f 0305 	mvn.w	r3, #5
 800edee:	607b      	str	r3, [r7, #4]
 800edf0:	e00c      	b.n	800ee0c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800edf2:	4b0a      	ldr	r3, [pc, #40]	; (800ee1c <osKernelInitialize+0x44>)
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d105      	bne.n	800ee06 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800edfa:	4b08      	ldr	r3, [pc, #32]	; (800ee1c <osKernelInitialize+0x44>)
 800edfc:	2201      	movs	r2, #1
 800edfe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ee00:	2300      	movs	r3, #0
 800ee02:	607b      	str	r3, [r7, #4]
 800ee04:	e002      	b.n	800ee0c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ee06:	f04f 33ff 	mov.w	r3, #4294967295
 800ee0a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ee0c:	687b      	ldr	r3, [r7, #4]
}
 800ee0e:	4618      	mov	r0, r3
 800ee10:	370c      	adds	r7, #12
 800ee12:	46bd      	mov	sp, r7
 800ee14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee18:	4770      	bx	lr
 800ee1a:	bf00      	nop
 800ee1c:	200006b4 	.word	0x200006b4

0800ee20 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b082      	sub	sp, #8
 800ee24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ee26:	f3ef 8305 	mrs	r3, IPSR
 800ee2a:	603b      	str	r3, [r7, #0]
  return(result);
 800ee2c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d003      	beq.n	800ee3a <osKernelStart+0x1a>
    stat = osErrorISR;
 800ee32:	f06f 0305 	mvn.w	r3, #5
 800ee36:	607b      	str	r3, [r7, #4]
 800ee38:	e010      	b.n	800ee5c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ee3a:	4b0b      	ldr	r3, [pc, #44]	; (800ee68 <osKernelStart+0x48>)
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	2b01      	cmp	r3, #1
 800ee40:	d109      	bne.n	800ee56 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ee42:	f7ff ffbf 	bl	800edc4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ee46:	4b08      	ldr	r3, [pc, #32]	; (800ee68 <osKernelStart+0x48>)
 800ee48:	2202      	movs	r2, #2
 800ee4a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ee4c:	f001 fa80 	bl	8010350 <vTaskStartScheduler>
      stat = osOK;
 800ee50:	2300      	movs	r3, #0
 800ee52:	607b      	str	r3, [r7, #4]
 800ee54:	e002      	b.n	800ee5c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ee56:	f04f 33ff 	mov.w	r3, #4294967295
 800ee5a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ee5c:	687b      	ldr	r3, [r7, #4]
}
 800ee5e:	4618      	mov	r0, r3
 800ee60:	3708      	adds	r7, #8
 800ee62:	46bd      	mov	sp, r7
 800ee64:	bd80      	pop	{r7, pc}
 800ee66:	bf00      	nop
 800ee68:	200006b4 	.word	0x200006b4

0800ee6c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ee6c:	b580      	push	{r7, lr}
 800ee6e:	b08e      	sub	sp, #56	; 0x38
 800ee70:	af04      	add	r7, sp, #16
 800ee72:	60f8      	str	r0, [r7, #12]
 800ee74:	60b9      	str	r1, [r7, #8]
 800ee76:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ee78:	2300      	movs	r3, #0
 800ee7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ee7c:	f3ef 8305 	mrs	r3, IPSR
 800ee80:	617b      	str	r3, [r7, #20]
  return(result);
 800ee82:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d17e      	bne.n	800ef86 <osThreadNew+0x11a>
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d07b      	beq.n	800ef86 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ee8e:	2380      	movs	r3, #128	; 0x80
 800ee90:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ee92:	2318      	movs	r3, #24
 800ee94:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ee96:	2300      	movs	r3, #0
 800ee98:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800ee9a:	f04f 33ff 	mov.w	r3, #4294967295
 800ee9e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d045      	beq.n	800ef32 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d002      	beq.n	800eeb4 <osThreadNew+0x48>
        name = attr->name;
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	699b      	ldr	r3, [r3, #24]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d002      	beq.n	800eec2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	699b      	ldr	r3, [r3, #24]
 800eec0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800eec2:	69fb      	ldr	r3, [r7, #28]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d008      	beq.n	800eeda <osThreadNew+0x6e>
 800eec8:	69fb      	ldr	r3, [r7, #28]
 800eeca:	2b38      	cmp	r3, #56	; 0x38
 800eecc:	d805      	bhi.n	800eeda <osThreadNew+0x6e>
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	685b      	ldr	r3, [r3, #4]
 800eed2:	f003 0301 	and.w	r3, r3, #1
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d001      	beq.n	800eede <osThreadNew+0x72>
        return (NULL);
 800eeda:	2300      	movs	r3, #0
 800eedc:	e054      	b.n	800ef88 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	695b      	ldr	r3, [r3, #20]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d003      	beq.n	800eeee <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	695b      	ldr	r3, [r3, #20]
 800eeea:	089b      	lsrs	r3, r3, #2
 800eeec:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	689b      	ldr	r3, [r3, #8]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d00e      	beq.n	800ef14 <osThreadNew+0xa8>
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	68db      	ldr	r3, [r3, #12]
 800eefa:	2bbb      	cmp	r3, #187	; 0xbb
 800eefc:	d90a      	bls.n	800ef14 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d006      	beq.n	800ef14 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	695b      	ldr	r3, [r3, #20]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d002      	beq.n	800ef14 <osThreadNew+0xa8>
        mem = 1;
 800ef0e:	2301      	movs	r3, #1
 800ef10:	61bb      	str	r3, [r7, #24]
 800ef12:	e010      	b.n	800ef36 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	689b      	ldr	r3, [r3, #8]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d10c      	bne.n	800ef36 <osThreadNew+0xca>
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	68db      	ldr	r3, [r3, #12]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d108      	bne.n	800ef36 <osThreadNew+0xca>
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	691b      	ldr	r3, [r3, #16]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d104      	bne.n	800ef36 <osThreadNew+0xca>
          mem = 0;
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	61bb      	str	r3, [r7, #24]
 800ef30:	e001      	b.n	800ef36 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ef32:	2300      	movs	r3, #0
 800ef34:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ef36:	69bb      	ldr	r3, [r7, #24]
 800ef38:	2b01      	cmp	r3, #1
 800ef3a:	d110      	bne.n	800ef5e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ef40:	687a      	ldr	r2, [r7, #4]
 800ef42:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ef44:	9202      	str	r2, [sp, #8]
 800ef46:	9301      	str	r3, [sp, #4]
 800ef48:	69fb      	ldr	r3, [r7, #28]
 800ef4a:	9300      	str	r3, [sp, #0]
 800ef4c:	68bb      	ldr	r3, [r7, #8]
 800ef4e:	6a3a      	ldr	r2, [r7, #32]
 800ef50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ef52:	68f8      	ldr	r0, [r7, #12]
 800ef54:	f000 fea8 	bl	800fca8 <xTaskCreateStatic>
 800ef58:	4603      	mov	r3, r0
 800ef5a:	613b      	str	r3, [r7, #16]
 800ef5c:	e013      	b.n	800ef86 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ef5e:	69bb      	ldr	r3, [r7, #24]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d110      	bne.n	800ef86 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ef64:	6a3b      	ldr	r3, [r7, #32]
 800ef66:	b29a      	uxth	r2, r3
 800ef68:	f107 0310 	add.w	r3, r7, #16
 800ef6c:	9301      	str	r3, [sp, #4]
 800ef6e:	69fb      	ldr	r3, [r7, #28]
 800ef70:	9300      	str	r3, [sp, #0]
 800ef72:	68bb      	ldr	r3, [r7, #8]
 800ef74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ef76:	68f8      	ldr	r0, [r7, #12]
 800ef78:	f000 fef3 	bl	800fd62 <xTaskCreate>
 800ef7c:	4603      	mov	r3, r0
 800ef7e:	2b01      	cmp	r3, #1
 800ef80:	d001      	beq.n	800ef86 <osThreadNew+0x11a>
            hTask = NULL;
 800ef82:	2300      	movs	r3, #0
 800ef84:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ef86:	693b      	ldr	r3, [r7, #16]
}
 800ef88:	4618      	mov	r0, r3
 800ef8a:	3728      	adds	r7, #40	; 0x28
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	bd80      	pop	{r7, pc}

0800ef90 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b082      	sub	sp, #8
 800ef94:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 800ef96:	f001 fe37 	bl	8010c08 <xTaskGetCurrentTaskHandle>
 800ef9a:	6078      	str	r0, [r7, #4]

  return (id);
 800ef9c:	687b      	ldr	r3, [r7, #4]
}
 800ef9e:	4618      	mov	r0, r3
 800efa0:	3708      	adds	r7, #8
 800efa2:	46bd      	mov	sp, r7
 800efa4:	bd80      	pop	{r7, pc}
	...

0800efa8 <osThreadGetState>:

osThreadState_t osThreadGetState (osThreadId_t thread_id) {
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b086      	sub	sp, #24
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800efb4:	f3ef 8305 	mrs	r3, IPSR
 800efb8:	60fb      	str	r3, [r7, #12]
  return(result);
 800efba:	68fb      	ldr	r3, [r7, #12]
  osThreadState_t state;

  if (IS_IRQ() || (hTask == NULL)) {
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d102      	bne.n	800efc6 <osThreadGetState+0x1e>
 800efc0:	693b      	ldr	r3, [r7, #16]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d103      	bne.n	800efce <osThreadGetState+0x26>
    state = osThreadError;
 800efc6:	f04f 33ff 	mov.w	r3, #4294967295
 800efca:	617b      	str	r3, [r7, #20]
 800efcc:	e022      	b.n	800f014 <osThreadGetState+0x6c>
  }
  else {
    switch (eTaskGetState (hTask)) {
 800efce:	6938      	ldr	r0, [r7, #16]
 800efd0:	f001 f8c8 	bl	8010164 <eTaskGetState>
 800efd4:	4603      	mov	r3, r0
 800efd6:	2b04      	cmp	r3, #4
 800efd8:	d818      	bhi.n	800f00c <osThreadGetState+0x64>
 800efda:	a201      	add	r2, pc, #4	; (adr r2, 800efe0 <osThreadGetState+0x38>)
 800efdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efe0:	0800eff5 	.word	0x0800eff5
 800efe4:	0800effb 	.word	0x0800effb
 800efe8:	0800f001 	.word	0x0800f001
 800efec:	0800f001 	.word	0x0800f001
 800eff0:	0800f007 	.word	0x0800f007
      case eRunning:   state = osThreadRunning;    break;
 800eff4:	2302      	movs	r3, #2
 800eff6:	617b      	str	r3, [r7, #20]
 800eff8:	e00c      	b.n	800f014 <osThreadGetState+0x6c>
      case eReady:     state = osThreadReady;      break;
 800effa:	2301      	movs	r3, #1
 800effc:	617b      	str	r3, [r7, #20]
 800effe:	e009      	b.n	800f014 <osThreadGetState+0x6c>
      case eBlocked:
      case eSuspended: state = osThreadBlocked;    break;
 800f000:	2303      	movs	r3, #3
 800f002:	617b      	str	r3, [r7, #20]
 800f004:	e006      	b.n	800f014 <osThreadGetState+0x6c>
      case eDeleted:   state = osThreadTerminated; break;
 800f006:	2304      	movs	r3, #4
 800f008:	617b      	str	r3, [r7, #20]
 800f00a:	e003      	b.n	800f014 <osThreadGetState+0x6c>
      case eInvalid:
      default:         state = osThreadError;      break;
 800f00c:	f04f 33ff 	mov.w	r3, #4294967295
 800f010:	617b      	str	r3, [r7, #20]
 800f012:	bf00      	nop
    }
  }

  return (state);
 800f014:	697b      	ldr	r3, [r7, #20]
}
 800f016:	4618      	mov	r0, r3
 800f018:	3718      	adds	r7, #24
 800f01a:	46bd      	mov	sp, r7
 800f01c:	bd80      	pop	{r7, pc}
 800f01e:	bf00      	nop

0800f020 <osThreadResume>:
  }

  return (stat);
}

osStatus_t osThreadResume (osThreadId_t thread_id) {
 800f020:	b580      	push	{r7, lr}
 800f022:	b086      	sub	sp, #24
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f02c:	f3ef 8305 	mrs	r3, IPSR
 800f030:	60fb      	str	r3, [r7, #12]
  return(result);
 800f032:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f034:	2b00      	cmp	r3, #0
 800f036:	d003      	beq.n	800f040 <osThreadResume+0x20>
    stat = osErrorISR;
 800f038:	f06f 0305 	mvn.w	r3, #5
 800f03c:	617b      	str	r3, [r7, #20]
 800f03e:	e00b      	b.n	800f058 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 800f040:	693b      	ldr	r3, [r7, #16]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d103      	bne.n	800f04e <osThreadResume+0x2e>
    stat = osErrorParameter;
 800f046:	f06f 0303 	mvn.w	r3, #3
 800f04a:	617b      	str	r3, [r7, #20]
 800f04c:	e004      	b.n	800f058 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 800f04e:	2300      	movs	r3, #0
 800f050:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 800f052:	6938      	ldr	r0, [r7, #16]
 800f054:	f001 f91e 	bl	8010294 <vTaskResume>
  }

  return (stat);
 800f058:	697b      	ldr	r3, [r7, #20]
}
 800f05a:	4618      	mov	r0, r3
 800f05c:	3718      	adds	r7, #24
 800f05e:	46bd      	mov	sp, r7
 800f060:	bd80      	pop	{r7, pc}

0800f062 <osThreadExit>:
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 800f062:	b580      	push	{r7, lr}
 800f064:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 800f066:	2000      	movs	r0, #0
 800f068:	f000 ffd6 	bl	8010018 <vTaskDelete>
#endif
  for (;;);
 800f06c:	e7fe      	b.n	800f06c <osThreadExit+0xa>

0800f06e <osThreadTerminate>:
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 800f06e:	b580      	push	{r7, lr}
 800f070:	b086      	sub	sp, #24
 800f072:	af00      	add	r7, sp, #0
 800f074:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f07a:	f3ef 8305 	mrs	r3, IPSR
 800f07e:	60bb      	str	r3, [r7, #8]
  return(result);
 800f080:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 800f082:	2b00      	cmp	r3, #0
 800f084:	d003      	beq.n	800f08e <osThreadTerminate+0x20>
    stat = osErrorISR;
 800f086:	f06f 0305 	mvn.w	r3, #5
 800f08a:	617b      	str	r3, [r7, #20]
 800f08c:	e017      	b.n	800f0be <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 800f08e:	693b      	ldr	r3, [r7, #16]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d103      	bne.n	800f09c <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 800f094:	f06f 0303 	mvn.w	r3, #3
 800f098:	617b      	str	r3, [r7, #20]
 800f09a:	e010      	b.n	800f0be <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 800f09c:	6938      	ldr	r0, [r7, #16]
 800f09e:	f001 f861 	bl	8010164 <eTaskGetState>
 800f0a2:	4603      	mov	r3, r0
 800f0a4:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 800f0a6:	7bfb      	ldrb	r3, [r7, #15]
 800f0a8:	2b04      	cmp	r3, #4
 800f0aa:	d005      	beq.n	800f0b8 <osThreadTerminate+0x4a>
      stat = osOK;
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 800f0b0:	6938      	ldr	r0, [r7, #16]
 800f0b2:	f000 ffb1 	bl	8010018 <vTaskDelete>
 800f0b6:	e002      	b.n	800f0be <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 800f0b8:	f06f 0302 	mvn.w	r3, #2
 800f0bc:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 800f0be:	697b      	ldr	r3, [r7, #20]
}
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	3718      	adds	r7, #24
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	bd80      	pop	{r7, pc}

0800f0c8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b084      	sub	sp, #16
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f0d0:	f3ef 8305 	mrs	r3, IPSR
 800f0d4:	60bb      	str	r3, [r7, #8]
  return(result);
 800f0d6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d003      	beq.n	800f0e4 <osDelay+0x1c>
    stat = osErrorISR;
 800f0dc:	f06f 0305 	mvn.w	r3, #5
 800f0e0:	60fb      	str	r3, [r7, #12]
 800f0e2:	e007      	b.n	800f0f4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d002      	beq.n	800f0f4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800f0ee:	6878      	ldr	r0, [r7, #4]
 800f0f0:	f001 f804 	bl	80100fc <vTaskDelay>
    }
  }

  return (stat);
 800f0f4:	68fb      	ldr	r3, [r7, #12]
}
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	3710      	adds	r7, #16
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	bd80      	pop	{r7, pc}
	...

0800f100 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f100:	b480      	push	{r7}
 800f102:	b085      	sub	sp, #20
 800f104:	af00      	add	r7, sp, #0
 800f106:	60f8      	str	r0, [r7, #12]
 800f108:	60b9      	str	r1, [r7, #8]
 800f10a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	4a07      	ldr	r2, [pc, #28]	; (800f12c <vApplicationGetIdleTaskMemory+0x2c>)
 800f110:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f112:	68bb      	ldr	r3, [r7, #8]
 800f114:	4a06      	ldr	r2, [pc, #24]	; (800f130 <vApplicationGetIdleTaskMemory+0x30>)
 800f116:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	2280      	movs	r2, #128	; 0x80
 800f11c:	601a      	str	r2, [r3, #0]
}
 800f11e:	bf00      	nop
 800f120:	3714      	adds	r7, #20
 800f122:	46bd      	mov	sp, r7
 800f124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f128:	4770      	bx	lr
 800f12a:	bf00      	nop
 800f12c:	200006b8 	.word	0x200006b8
 800f130:	20000774 	.word	0x20000774

0800f134 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f134:	b480      	push	{r7}
 800f136:	b085      	sub	sp, #20
 800f138:	af00      	add	r7, sp, #0
 800f13a:	60f8      	str	r0, [r7, #12]
 800f13c:	60b9      	str	r1, [r7, #8]
 800f13e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	4a07      	ldr	r2, [pc, #28]	; (800f160 <vApplicationGetTimerTaskMemory+0x2c>)
 800f144:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f146:	68bb      	ldr	r3, [r7, #8]
 800f148:	4a06      	ldr	r2, [pc, #24]	; (800f164 <vApplicationGetTimerTaskMemory+0x30>)
 800f14a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f152:	601a      	str	r2, [r3, #0]
}
 800f154:	bf00      	nop
 800f156:	3714      	adds	r7, #20
 800f158:	46bd      	mov	sp, r7
 800f15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15e:	4770      	bx	lr
 800f160:	20000974 	.word	0x20000974
 800f164:	20000a30 	.word	0x20000a30

0800f168 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f168:	b480      	push	{r7}
 800f16a:	b083      	sub	sp, #12
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	f103 0208 	add.w	r2, r3, #8
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	f04f 32ff 	mov.w	r2, #4294967295
 800f180:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	f103 0208 	add.w	r2, r3, #8
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	f103 0208 	add.w	r2, r3, #8
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	2200      	movs	r2, #0
 800f19a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f19c:	bf00      	nop
 800f19e:	370c      	adds	r7, #12
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a6:	4770      	bx	lr

0800f1a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f1a8:	b480      	push	{r7}
 800f1aa:	b083      	sub	sp, #12
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f1b6:	bf00      	nop
 800f1b8:	370c      	adds	r7, #12
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c0:	4770      	bx	lr

0800f1c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f1c2:	b480      	push	{r7}
 800f1c4:	b085      	sub	sp, #20
 800f1c6:	af00      	add	r7, sp, #0
 800f1c8:	6078      	str	r0, [r7, #4]
 800f1ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	685b      	ldr	r3, [r3, #4]
 800f1d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f1d2:	683b      	ldr	r3, [r7, #0]
 800f1d4:	68fa      	ldr	r2, [r7, #12]
 800f1d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	689a      	ldr	r2, [r3, #8]
 800f1dc:	683b      	ldr	r3, [r7, #0]
 800f1de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	689b      	ldr	r3, [r3, #8]
 800f1e4:	683a      	ldr	r2, [r7, #0]
 800f1e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	683a      	ldr	r2, [r7, #0]
 800f1ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f1ee:	683b      	ldr	r3, [r7, #0]
 800f1f0:	687a      	ldr	r2, [r7, #4]
 800f1f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	1c5a      	adds	r2, r3, #1
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	601a      	str	r2, [r3, #0]
}
 800f1fe:	bf00      	nop
 800f200:	3714      	adds	r7, #20
 800f202:	46bd      	mov	sp, r7
 800f204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f208:	4770      	bx	lr

0800f20a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f20a:	b480      	push	{r7}
 800f20c:	b085      	sub	sp, #20
 800f20e:	af00      	add	r7, sp, #0
 800f210:	6078      	str	r0, [r7, #4]
 800f212:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f214:	683b      	ldr	r3, [r7, #0]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f21a:	68bb      	ldr	r3, [r7, #8]
 800f21c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f220:	d103      	bne.n	800f22a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	691b      	ldr	r3, [r3, #16]
 800f226:	60fb      	str	r3, [r7, #12]
 800f228:	e00c      	b.n	800f244 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	3308      	adds	r3, #8
 800f22e:	60fb      	str	r3, [r7, #12]
 800f230:	e002      	b.n	800f238 <vListInsert+0x2e>
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	685b      	ldr	r3, [r3, #4]
 800f236:	60fb      	str	r3, [r7, #12]
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	685b      	ldr	r3, [r3, #4]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	68ba      	ldr	r2, [r7, #8]
 800f240:	429a      	cmp	r2, r3
 800f242:	d2f6      	bcs.n	800f232 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	685a      	ldr	r2, [r3, #4]
 800f248:	683b      	ldr	r3, [r7, #0]
 800f24a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f24c:	683b      	ldr	r3, [r7, #0]
 800f24e:	685b      	ldr	r3, [r3, #4]
 800f250:	683a      	ldr	r2, [r7, #0]
 800f252:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f254:	683b      	ldr	r3, [r7, #0]
 800f256:	68fa      	ldr	r2, [r7, #12]
 800f258:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	683a      	ldr	r2, [r7, #0]
 800f25e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f260:	683b      	ldr	r3, [r7, #0]
 800f262:	687a      	ldr	r2, [r7, #4]
 800f264:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	1c5a      	adds	r2, r3, #1
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	601a      	str	r2, [r3, #0]
}
 800f270:	bf00      	nop
 800f272:	3714      	adds	r7, #20
 800f274:	46bd      	mov	sp, r7
 800f276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27a:	4770      	bx	lr

0800f27c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f27c:	b480      	push	{r7}
 800f27e:	b085      	sub	sp, #20
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	691b      	ldr	r3, [r3, #16]
 800f288:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	685b      	ldr	r3, [r3, #4]
 800f28e:	687a      	ldr	r2, [r7, #4]
 800f290:	6892      	ldr	r2, [r2, #8]
 800f292:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	689b      	ldr	r3, [r3, #8]
 800f298:	687a      	ldr	r2, [r7, #4]
 800f29a:	6852      	ldr	r2, [r2, #4]
 800f29c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	685b      	ldr	r3, [r3, #4]
 800f2a2:	687a      	ldr	r2, [r7, #4]
 800f2a4:	429a      	cmp	r2, r3
 800f2a6:	d103      	bne.n	800f2b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	689a      	ldr	r2, [r3, #8]
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	2200      	movs	r2, #0
 800f2b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	1e5a      	subs	r2, r3, #1
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	681b      	ldr	r3, [r3, #0]
}
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	3714      	adds	r7, #20
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ce:	4770      	bx	lr

0800f2d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b084      	sub	sp, #16
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]
 800f2d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d10a      	bne.n	800f2fa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f2e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2e8:	f383 8811 	msr	BASEPRI, r3
 800f2ec:	f3bf 8f6f 	isb	sy
 800f2f0:	f3bf 8f4f 	dsb	sy
 800f2f4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f2f6:	bf00      	nop
 800f2f8:	e7fe      	b.n	800f2f8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f2fa:	f002 f9f3 	bl	80116e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	681a      	ldr	r2, [r3, #0]
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f306:	68f9      	ldr	r1, [r7, #12]
 800f308:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f30a:	fb01 f303 	mul.w	r3, r1, r3
 800f30e:	441a      	add	r2, r3
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	2200      	movs	r2, #0
 800f318:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	681a      	ldr	r2, [r3, #0]
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	681a      	ldr	r2, [r3, #0]
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f32a:	3b01      	subs	r3, #1
 800f32c:	68f9      	ldr	r1, [r7, #12]
 800f32e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f330:	fb01 f303 	mul.w	r3, r1, r3
 800f334:	441a      	add	r2, r3
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	22ff      	movs	r2, #255	; 0xff
 800f33e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	22ff      	movs	r2, #255	; 0xff
 800f346:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f34a:	683b      	ldr	r3, [r7, #0]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d114      	bne.n	800f37a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	691b      	ldr	r3, [r3, #16]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d01a      	beq.n	800f38e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	3310      	adds	r3, #16
 800f35c:	4618      	mov	r0, r3
 800f35e:	f001 fa91 	bl	8010884 <xTaskRemoveFromEventList>
 800f362:	4603      	mov	r3, r0
 800f364:	2b00      	cmp	r3, #0
 800f366:	d012      	beq.n	800f38e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f368:	4b0c      	ldr	r3, [pc, #48]	; (800f39c <xQueueGenericReset+0xcc>)
 800f36a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f36e:	601a      	str	r2, [r3, #0]
 800f370:	f3bf 8f4f 	dsb	sy
 800f374:	f3bf 8f6f 	isb	sy
 800f378:	e009      	b.n	800f38e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	3310      	adds	r3, #16
 800f37e:	4618      	mov	r0, r3
 800f380:	f7ff fef2 	bl	800f168 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	3324      	adds	r3, #36	; 0x24
 800f388:	4618      	mov	r0, r3
 800f38a:	f7ff feed 	bl	800f168 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f38e:	f002 f9d9 	bl	8011744 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f392:	2301      	movs	r3, #1
}
 800f394:	4618      	mov	r0, r3
 800f396:	3710      	adds	r7, #16
 800f398:	46bd      	mov	sp, r7
 800f39a:	bd80      	pop	{r7, pc}
 800f39c:	e000ed04 	.word	0xe000ed04

0800f3a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	b08e      	sub	sp, #56	; 0x38
 800f3a4:	af02      	add	r7, sp, #8
 800f3a6:	60f8      	str	r0, [r7, #12]
 800f3a8:	60b9      	str	r1, [r7, #8]
 800f3aa:	607a      	str	r2, [r7, #4]
 800f3ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d10a      	bne.n	800f3ca <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800f3b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3b8:	f383 8811 	msr	BASEPRI, r3
 800f3bc:	f3bf 8f6f 	isb	sy
 800f3c0:	f3bf 8f4f 	dsb	sy
 800f3c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f3c6:	bf00      	nop
 800f3c8:	e7fe      	b.n	800f3c8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f3ca:	683b      	ldr	r3, [r7, #0]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d10a      	bne.n	800f3e6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800f3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3d4:	f383 8811 	msr	BASEPRI, r3
 800f3d8:	f3bf 8f6f 	isb	sy
 800f3dc:	f3bf 8f4f 	dsb	sy
 800f3e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f3e2:	bf00      	nop
 800f3e4:	e7fe      	b.n	800f3e4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d002      	beq.n	800f3f2 <xQueueGenericCreateStatic+0x52>
 800f3ec:	68bb      	ldr	r3, [r7, #8]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d001      	beq.n	800f3f6 <xQueueGenericCreateStatic+0x56>
 800f3f2:	2301      	movs	r3, #1
 800f3f4:	e000      	b.n	800f3f8 <xQueueGenericCreateStatic+0x58>
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d10a      	bne.n	800f412 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800f3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f400:	f383 8811 	msr	BASEPRI, r3
 800f404:	f3bf 8f6f 	isb	sy
 800f408:	f3bf 8f4f 	dsb	sy
 800f40c:	623b      	str	r3, [r7, #32]
}
 800f40e:	bf00      	nop
 800f410:	e7fe      	b.n	800f410 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d102      	bne.n	800f41e <xQueueGenericCreateStatic+0x7e>
 800f418:	68bb      	ldr	r3, [r7, #8]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d101      	bne.n	800f422 <xQueueGenericCreateStatic+0x82>
 800f41e:	2301      	movs	r3, #1
 800f420:	e000      	b.n	800f424 <xQueueGenericCreateStatic+0x84>
 800f422:	2300      	movs	r3, #0
 800f424:	2b00      	cmp	r3, #0
 800f426:	d10a      	bne.n	800f43e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800f428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f42c:	f383 8811 	msr	BASEPRI, r3
 800f430:	f3bf 8f6f 	isb	sy
 800f434:	f3bf 8f4f 	dsb	sy
 800f438:	61fb      	str	r3, [r7, #28]
}
 800f43a:	bf00      	nop
 800f43c:	e7fe      	b.n	800f43c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f43e:	2350      	movs	r3, #80	; 0x50
 800f440:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f442:	697b      	ldr	r3, [r7, #20]
 800f444:	2b50      	cmp	r3, #80	; 0x50
 800f446:	d00a      	beq.n	800f45e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800f448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f44c:	f383 8811 	msr	BASEPRI, r3
 800f450:	f3bf 8f6f 	isb	sy
 800f454:	f3bf 8f4f 	dsb	sy
 800f458:	61bb      	str	r3, [r7, #24]
}
 800f45a:	bf00      	nop
 800f45c:	e7fe      	b.n	800f45c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f45e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f460:	683b      	ldr	r3, [r7, #0]
 800f462:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f466:	2b00      	cmp	r3, #0
 800f468:	d00d      	beq.n	800f486 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f46c:	2201      	movs	r2, #1
 800f46e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f472:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f478:	9300      	str	r3, [sp, #0]
 800f47a:	4613      	mov	r3, r2
 800f47c:	687a      	ldr	r2, [r7, #4]
 800f47e:	68b9      	ldr	r1, [r7, #8]
 800f480:	68f8      	ldr	r0, [r7, #12]
 800f482:	f000 f805 	bl	800f490 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f488:	4618      	mov	r0, r3
 800f48a:	3730      	adds	r7, #48	; 0x30
 800f48c:	46bd      	mov	sp, r7
 800f48e:	bd80      	pop	{r7, pc}

0800f490 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f490:	b580      	push	{r7, lr}
 800f492:	b084      	sub	sp, #16
 800f494:	af00      	add	r7, sp, #0
 800f496:	60f8      	str	r0, [r7, #12]
 800f498:	60b9      	str	r1, [r7, #8]
 800f49a:	607a      	str	r2, [r7, #4]
 800f49c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f49e:	68bb      	ldr	r3, [r7, #8]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d103      	bne.n	800f4ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f4a4:	69bb      	ldr	r3, [r7, #24]
 800f4a6:	69ba      	ldr	r2, [r7, #24]
 800f4a8:	601a      	str	r2, [r3, #0]
 800f4aa:	e002      	b.n	800f4b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f4ac:	69bb      	ldr	r3, [r7, #24]
 800f4ae:	687a      	ldr	r2, [r7, #4]
 800f4b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f4b2:	69bb      	ldr	r3, [r7, #24]
 800f4b4:	68fa      	ldr	r2, [r7, #12]
 800f4b6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f4b8:	69bb      	ldr	r3, [r7, #24]
 800f4ba:	68ba      	ldr	r2, [r7, #8]
 800f4bc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f4be:	2101      	movs	r1, #1
 800f4c0:	69b8      	ldr	r0, [r7, #24]
 800f4c2:	f7ff ff05 	bl	800f2d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f4c6:	69bb      	ldr	r3, [r7, #24]
 800f4c8:	78fa      	ldrb	r2, [r7, #3]
 800f4ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f4ce:	bf00      	nop
 800f4d0:	3710      	adds	r7, #16
 800f4d2:	46bd      	mov	sp, r7
 800f4d4:	bd80      	pop	{r7, pc}
	...

0800f4d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b08e      	sub	sp, #56	; 0x38
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	60f8      	str	r0, [r7, #12]
 800f4e0:	60b9      	str	r1, [r7, #8]
 800f4e2:	607a      	str	r2, [r7, #4]
 800f4e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d10a      	bne.n	800f50a <xQueueGenericSend+0x32>
	__asm volatile
 800f4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4f8:	f383 8811 	msr	BASEPRI, r3
 800f4fc:	f3bf 8f6f 	isb	sy
 800f500:	f3bf 8f4f 	dsb	sy
 800f504:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f506:	bf00      	nop
 800f508:	e7fe      	b.n	800f508 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f50a:	68bb      	ldr	r3, [r7, #8]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d103      	bne.n	800f518 <xQueueGenericSend+0x40>
 800f510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f514:	2b00      	cmp	r3, #0
 800f516:	d101      	bne.n	800f51c <xQueueGenericSend+0x44>
 800f518:	2301      	movs	r3, #1
 800f51a:	e000      	b.n	800f51e <xQueueGenericSend+0x46>
 800f51c:	2300      	movs	r3, #0
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d10a      	bne.n	800f538 <xQueueGenericSend+0x60>
	__asm volatile
 800f522:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f526:	f383 8811 	msr	BASEPRI, r3
 800f52a:	f3bf 8f6f 	isb	sy
 800f52e:	f3bf 8f4f 	dsb	sy
 800f532:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f534:	bf00      	nop
 800f536:	e7fe      	b.n	800f536 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f538:	683b      	ldr	r3, [r7, #0]
 800f53a:	2b02      	cmp	r3, #2
 800f53c:	d103      	bne.n	800f546 <xQueueGenericSend+0x6e>
 800f53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f542:	2b01      	cmp	r3, #1
 800f544:	d101      	bne.n	800f54a <xQueueGenericSend+0x72>
 800f546:	2301      	movs	r3, #1
 800f548:	e000      	b.n	800f54c <xQueueGenericSend+0x74>
 800f54a:	2300      	movs	r3, #0
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d10a      	bne.n	800f566 <xQueueGenericSend+0x8e>
	__asm volatile
 800f550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f554:	f383 8811 	msr	BASEPRI, r3
 800f558:	f3bf 8f6f 	isb	sy
 800f55c:	f3bf 8f4f 	dsb	sy
 800f560:	623b      	str	r3, [r7, #32]
}
 800f562:	bf00      	nop
 800f564:	e7fe      	b.n	800f564 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f566:	f001 fb5f 	bl	8010c28 <xTaskGetSchedulerState>
 800f56a:	4603      	mov	r3, r0
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d102      	bne.n	800f576 <xQueueGenericSend+0x9e>
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d101      	bne.n	800f57a <xQueueGenericSend+0xa2>
 800f576:	2301      	movs	r3, #1
 800f578:	e000      	b.n	800f57c <xQueueGenericSend+0xa4>
 800f57a:	2300      	movs	r3, #0
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d10a      	bne.n	800f596 <xQueueGenericSend+0xbe>
	__asm volatile
 800f580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f584:	f383 8811 	msr	BASEPRI, r3
 800f588:	f3bf 8f6f 	isb	sy
 800f58c:	f3bf 8f4f 	dsb	sy
 800f590:	61fb      	str	r3, [r7, #28]
}
 800f592:	bf00      	nop
 800f594:	e7fe      	b.n	800f594 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f596:	f002 f8a5 	bl	80116e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f59c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5a2:	429a      	cmp	r2, r3
 800f5a4:	d302      	bcc.n	800f5ac <xQueueGenericSend+0xd4>
 800f5a6:	683b      	ldr	r3, [r7, #0]
 800f5a8:	2b02      	cmp	r3, #2
 800f5aa:	d129      	bne.n	800f600 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f5ac:	683a      	ldr	r2, [r7, #0]
 800f5ae:	68b9      	ldr	r1, [r7, #8]
 800f5b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f5b2:	f000 fa0b 	bl	800f9cc <prvCopyDataToQueue>
 800f5b6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d010      	beq.n	800f5e2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5c2:	3324      	adds	r3, #36	; 0x24
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	f001 f95d 	bl	8010884 <xTaskRemoveFromEventList>
 800f5ca:	4603      	mov	r3, r0
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d013      	beq.n	800f5f8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f5d0:	4b3f      	ldr	r3, [pc, #252]	; (800f6d0 <xQueueGenericSend+0x1f8>)
 800f5d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f5d6:	601a      	str	r2, [r3, #0]
 800f5d8:	f3bf 8f4f 	dsb	sy
 800f5dc:	f3bf 8f6f 	isb	sy
 800f5e0:	e00a      	b.n	800f5f8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d007      	beq.n	800f5f8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f5e8:	4b39      	ldr	r3, [pc, #228]	; (800f6d0 <xQueueGenericSend+0x1f8>)
 800f5ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f5ee:	601a      	str	r2, [r3, #0]
 800f5f0:	f3bf 8f4f 	dsb	sy
 800f5f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f5f8:	f002 f8a4 	bl	8011744 <vPortExitCritical>
				return pdPASS;
 800f5fc:	2301      	movs	r3, #1
 800f5fe:	e063      	b.n	800f6c8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	2b00      	cmp	r3, #0
 800f604:	d103      	bne.n	800f60e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f606:	f002 f89d 	bl	8011744 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f60a:	2300      	movs	r3, #0
 800f60c:	e05c      	b.n	800f6c8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f60e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f610:	2b00      	cmp	r3, #0
 800f612:	d106      	bne.n	800f622 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f614:	f107 0314 	add.w	r3, r7, #20
 800f618:	4618      	mov	r0, r3
 800f61a:	f001 f997 	bl	801094c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f61e:	2301      	movs	r3, #1
 800f620:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f622:	f002 f88f 	bl	8011744 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f626:	f000 ff03 	bl	8010430 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f62a:	f002 f85b 	bl	80116e4 <vPortEnterCritical>
 800f62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f630:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f634:	b25b      	sxtb	r3, r3
 800f636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f63a:	d103      	bne.n	800f644 <xQueueGenericSend+0x16c>
 800f63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f63e:	2200      	movs	r2, #0
 800f640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f646:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f64a:	b25b      	sxtb	r3, r3
 800f64c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f650:	d103      	bne.n	800f65a <xQueueGenericSend+0x182>
 800f652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f654:	2200      	movs	r2, #0
 800f656:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f65a:	f002 f873 	bl	8011744 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f65e:	1d3a      	adds	r2, r7, #4
 800f660:	f107 0314 	add.w	r3, r7, #20
 800f664:	4611      	mov	r1, r2
 800f666:	4618      	mov	r0, r3
 800f668:	f001 f986 	bl	8010978 <xTaskCheckForTimeOut>
 800f66c:	4603      	mov	r3, r0
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d124      	bne.n	800f6bc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f672:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f674:	f000 faa2 	bl	800fbbc <prvIsQueueFull>
 800f678:	4603      	mov	r3, r0
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d018      	beq.n	800f6b0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f680:	3310      	adds	r3, #16
 800f682:	687a      	ldr	r2, [r7, #4]
 800f684:	4611      	mov	r1, r2
 800f686:	4618      	mov	r0, r3
 800f688:	f001 f8ac 	bl	80107e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f68c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f68e:	f000 fa2d 	bl	800faec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f692:	f000 fedb 	bl	801044c <xTaskResumeAll>
 800f696:	4603      	mov	r3, r0
 800f698:	2b00      	cmp	r3, #0
 800f69a:	f47f af7c 	bne.w	800f596 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800f69e:	4b0c      	ldr	r3, [pc, #48]	; (800f6d0 <xQueueGenericSend+0x1f8>)
 800f6a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f6a4:	601a      	str	r2, [r3, #0]
 800f6a6:	f3bf 8f4f 	dsb	sy
 800f6aa:	f3bf 8f6f 	isb	sy
 800f6ae:	e772      	b.n	800f596 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f6b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f6b2:	f000 fa1b 	bl	800faec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f6b6:	f000 fec9 	bl	801044c <xTaskResumeAll>
 800f6ba:	e76c      	b.n	800f596 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f6bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f6be:	f000 fa15 	bl	800faec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f6c2:	f000 fec3 	bl	801044c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f6c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	3738      	adds	r7, #56	; 0x38
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	bd80      	pop	{r7, pc}
 800f6d0:	e000ed04 	.word	0xe000ed04

0800f6d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b090      	sub	sp, #64	; 0x40
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	60f8      	str	r0, [r7, #12]
 800f6dc:	60b9      	str	r1, [r7, #8]
 800f6de:	607a      	str	r2, [r7, #4]
 800f6e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800f6e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d10a      	bne.n	800f702 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800f6ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6f0:	f383 8811 	msr	BASEPRI, r3
 800f6f4:	f3bf 8f6f 	isb	sy
 800f6f8:	f3bf 8f4f 	dsb	sy
 800f6fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f6fe:	bf00      	nop
 800f700:	e7fe      	b.n	800f700 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f702:	68bb      	ldr	r3, [r7, #8]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d103      	bne.n	800f710 <xQueueGenericSendFromISR+0x3c>
 800f708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f70a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d101      	bne.n	800f714 <xQueueGenericSendFromISR+0x40>
 800f710:	2301      	movs	r3, #1
 800f712:	e000      	b.n	800f716 <xQueueGenericSendFromISR+0x42>
 800f714:	2300      	movs	r3, #0
 800f716:	2b00      	cmp	r3, #0
 800f718:	d10a      	bne.n	800f730 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800f71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f71e:	f383 8811 	msr	BASEPRI, r3
 800f722:	f3bf 8f6f 	isb	sy
 800f726:	f3bf 8f4f 	dsb	sy
 800f72a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f72c:	bf00      	nop
 800f72e:	e7fe      	b.n	800f72e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f730:	683b      	ldr	r3, [r7, #0]
 800f732:	2b02      	cmp	r3, #2
 800f734:	d103      	bne.n	800f73e <xQueueGenericSendFromISR+0x6a>
 800f736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f73a:	2b01      	cmp	r3, #1
 800f73c:	d101      	bne.n	800f742 <xQueueGenericSendFromISR+0x6e>
 800f73e:	2301      	movs	r3, #1
 800f740:	e000      	b.n	800f744 <xQueueGenericSendFromISR+0x70>
 800f742:	2300      	movs	r3, #0
 800f744:	2b00      	cmp	r3, #0
 800f746:	d10a      	bne.n	800f75e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800f748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f74c:	f383 8811 	msr	BASEPRI, r3
 800f750:	f3bf 8f6f 	isb	sy
 800f754:	f3bf 8f4f 	dsb	sy
 800f758:	623b      	str	r3, [r7, #32]
}
 800f75a:	bf00      	nop
 800f75c:	e7fe      	b.n	800f75c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f75e:	f002 f8a3 	bl	80118a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f762:	f3ef 8211 	mrs	r2, BASEPRI
 800f766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f76a:	f383 8811 	msr	BASEPRI, r3
 800f76e:	f3bf 8f6f 	isb	sy
 800f772:	f3bf 8f4f 	dsb	sy
 800f776:	61fa      	str	r2, [r7, #28]
 800f778:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f77a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f77c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f77e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f780:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f786:	429a      	cmp	r2, r3
 800f788:	d302      	bcc.n	800f790 <xQueueGenericSendFromISR+0xbc>
 800f78a:	683b      	ldr	r3, [r7, #0]
 800f78c:	2b02      	cmp	r3, #2
 800f78e:	d12f      	bne.n	800f7f0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f792:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f79a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f79c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f79e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f7a0:	683a      	ldr	r2, [r7, #0]
 800f7a2:	68b9      	ldr	r1, [r7, #8]
 800f7a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f7a6:	f000 f911 	bl	800f9cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f7aa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800f7ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7b2:	d112      	bne.n	800f7da <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d016      	beq.n	800f7ea <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7be:	3324      	adds	r3, #36	; 0x24
 800f7c0:	4618      	mov	r0, r3
 800f7c2:	f001 f85f 	bl	8010884 <xTaskRemoveFromEventList>
 800f7c6:	4603      	mov	r3, r0
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d00e      	beq.n	800f7ea <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d00b      	beq.n	800f7ea <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	2201      	movs	r2, #1
 800f7d6:	601a      	str	r2, [r3, #0]
 800f7d8:	e007      	b.n	800f7ea <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f7da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f7de:	3301      	adds	r3, #1
 800f7e0:	b2db      	uxtb	r3, r3
 800f7e2:	b25a      	sxtb	r2, r3
 800f7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f7ea:	2301      	movs	r3, #1
 800f7ec:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800f7ee:	e001      	b.n	800f7f4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f7f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7f6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f7f8:	697b      	ldr	r3, [r7, #20]
 800f7fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f7fe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800f802:	4618      	mov	r0, r3
 800f804:	3740      	adds	r7, #64	; 0x40
 800f806:	46bd      	mov	sp, r7
 800f808:	bd80      	pop	{r7, pc}
	...

0800f80c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f80c:	b580      	push	{r7, lr}
 800f80e:	b08c      	sub	sp, #48	; 0x30
 800f810:	af00      	add	r7, sp, #0
 800f812:	60f8      	str	r0, [r7, #12]
 800f814:	60b9      	str	r1, [r7, #8]
 800f816:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f818:	2300      	movs	r3, #0
 800f81a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f822:	2b00      	cmp	r3, #0
 800f824:	d10a      	bne.n	800f83c <xQueueReceive+0x30>
	__asm volatile
 800f826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f82a:	f383 8811 	msr	BASEPRI, r3
 800f82e:	f3bf 8f6f 	isb	sy
 800f832:	f3bf 8f4f 	dsb	sy
 800f836:	623b      	str	r3, [r7, #32]
}
 800f838:	bf00      	nop
 800f83a:	e7fe      	b.n	800f83a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f83c:	68bb      	ldr	r3, [r7, #8]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d103      	bne.n	800f84a <xQueueReceive+0x3e>
 800f842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f846:	2b00      	cmp	r3, #0
 800f848:	d101      	bne.n	800f84e <xQueueReceive+0x42>
 800f84a:	2301      	movs	r3, #1
 800f84c:	e000      	b.n	800f850 <xQueueReceive+0x44>
 800f84e:	2300      	movs	r3, #0
 800f850:	2b00      	cmp	r3, #0
 800f852:	d10a      	bne.n	800f86a <xQueueReceive+0x5e>
	__asm volatile
 800f854:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f858:	f383 8811 	msr	BASEPRI, r3
 800f85c:	f3bf 8f6f 	isb	sy
 800f860:	f3bf 8f4f 	dsb	sy
 800f864:	61fb      	str	r3, [r7, #28]
}
 800f866:	bf00      	nop
 800f868:	e7fe      	b.n	800f868 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f86a:	f001 f9dd 	bl	8010c28 <xTaskGetSchedulerState>
 800f86e:	4603      	mov	r3, r0
 800f870:	2b00      	cmp	r3, #0
 800f872:	d102      	bne.n	800f87a <xQueueReceive+0x6e>
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d101      	bne.n	800f87e <xQueueReceive+0x72>
 800f87a:	2301      	movs	r3, #1
 800f87c:	e000      	b.n	800f880 <xQueueReceive+0x74>
 800f87e:	2300      	movs	r3, #0
 800f880:	2b00      	cmp	r3, #0
 800f882:	d10a      	bne.n	800f89a <xQueueReceive+0x8e>
	__asm volatile
 800f884:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f888:	f383 8811 	msr	BASEPRI, r3
 800f88c:	f3bf 8f6f 	isb	sy
 800f890:	f3bf 8f4f 	dsb	sy
 800f894:	61bb      	str	r3, [r7, #24]
}
 800f896:	bf00      	nop
 800f898:	e7fe      	b.n	800f898 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f89a:	f001 ff23 	bl	80116e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8a2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d01f      	beq.n	800f8ea <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f8aa:	68b9      	ldr	r1, [r7, #8]
 800f8ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f8ae:	f000 f8f7 	bl	800faa0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8b4:	1e5a      	subs	r2, r3, #1
 800f8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8b8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f8ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8bc:	691b      	ldr	r3, [r3, #16]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d00f      	beq.n	800f8e2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8c4:	3310      	adds	r3, #16
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	f000 ffdc 	bl	8010884 <xTaskRemoveFromEventList>
 800f8cc:	4603      	mov	r3, r0
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d007      	beq.n	800f8e2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f8d2:	4b3d      	ldr	r3, [pc, #244]	; (800f9c8 <xQueueReceive+0x1bc>)
 800f8d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f8d8:	601a      	str	r2, [r3, #0]
 800f8da:	f3bf 8f4f 	dsb	sy
 800f8de:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f8e2:	f001 ff2f 	bl	8011744 <vPortExitCritical>
				return pdPASS;
 800f8e6:	2301      	movs	r3, #1
 800f8e8:	e069      	b.n	800f9be <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d103      	bne.n	800f8f8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f8f0:	f001 ff28 	bl	8011744 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	e062      	b.n	800f9be <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d106      	bne.n	800f90c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f8fe:	f107 0310 	add.w	r3, r7, #16
 800f902:	4618      	mov	r0, r3
 800f904:	f001 f822 	bl	801094c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f908:	2301      	movs	r3, #1
 800f90a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f90c:	f001 ff1a 	bl	8011744 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f910:	f000 fd8e 	bl	8010430 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f914:	f001 fee6 	bl	80116e4 <vPortEnterCritical>
 800f918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f91a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f91e:	b25b      	sxtb	r3, r3
 800f920:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f924:	d103      	bne.n	800f92e <xQueueReceive+0x122>
 800f926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f928:	2200      	movs	r2, #0
 800f92a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f92e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f930:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f934:	b25b      	sxtb	r3, r3
 800f936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f93a:	d103      	bne.n	800f944 <xQueueReceive+0x138>
 800f93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f93e:	2200      	movs	r2, #0
 800f940:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f944:	f001 fefe 	bl	8011744 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f948:	1d3a      	adds	r2, r7, #4
 800f94a:	f107 0310 	add.w	r3, r7, #16
 800f94e:	4611      	mov	r1, r2
 800f950:	4618      	mov	r0, r3
 800f952:	f001 f811 	bl	8010978 <xTaskCheckForTimeOut>
 800f956:	4603      	mov	r3, r0
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d123      	bne.n	800f9a4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f95c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f95e:	f000 f917 	bl	800fb90 <prvIsQueueEmpty>
 800f962:	4603      	mov	r3, r0
 800f964:	2b00      	cmp	r3, #0
 800f966:	d017      	beq.n	800f998 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f96a:	3324      	adds	r3, #36	; 0x24
 800f96c:	687a      	ldr	r2, [r7, #4]
 800f96e:	4611      	mov	r1, r2
 800f970:	4618      	mov	r0, r3
 800f972:	f000 ff37 	bl	80107e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f976:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f978:	f000 f8b8 	bl	800faec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f97c:	f000 fd66 	bl	801044c <xTaskResumeAll>
 800f980:	4603      	mov	r3, r0
 800f982:	2b00      	cmp	r3, #0
 800f984:	d189      	bne.n	800f89a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800f986:	4b10      	ldr	r3, [pc, #64]	; (800f9c8 <xQueueReceive+0x1bc>)
 800f988:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f98c:	601a      	str	r2, [r3, #0]
 800f98e:	f3bf 8f4f 	dsb	sy
 800f992:	f3bf 8f6f 	isb	sy
 800f996:	e780      	b.n	800f89a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f998:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f99a:	f000 f8a7 	bl	800faec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f99e:	f000 fd55 	bl	801044c <xTaskResumeAll>
 800f9a2:	e77a      	b.n	800f89a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f9a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f9a6:	f000 f8a1 	bl	800faec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f9aa:	f000 fd4f 	bl	801044c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f9ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f9b0:	f000 f8ee 	bl	800fb90 <prvIsQueueEmpty>
 800f9b4:	4603      	mov	r3, r0
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	f43f af6f 	beq.w	800f89a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f9bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f9be:	4618      	mov	r0, r3
 800f9c0:	3730      	adds	r7, #48	; 0x30
 800f9c2:	46bd      	mov	sp, r7
 800f9c4:	bd80      	pop	{r7, pc}
 800f9c6:	bf00      	nop
 800f9c8:	e000ed04 	.word	0xe000ed04

0800f9cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b086      	sub	sp, #24
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	60f8      	str	r0, [r7, #12]
 800f9d4:	60b9      	str	r1, [r7, #8]
 800f9d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f9d8:	2300      	movs	r3, #0
 800f9da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d10d      	bne.n	800fa06 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d14d      	bne.n	800fa8e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	689b      	ldr	r3, [r3, #8]
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	f001 f934 	bl	8010c64 <xTaskPriorityDisinherit>
 800f9fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	2200      	movs	r2, #0
 800fa02:	609a      	str	r2, [r3, #8]
 800fa04:	e043      	b.n	800fa8e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d119      	bne.n	800fa40 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	6858      	ldr	r0, [r3, #4]
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa14:	461a      	mov	r2, r3
 800fa16:	68b9      	ldr	r1, [r7, #8]
 800fa18:	f003 fa90 	bl	8012f3c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	685a      	ldr	r2, [r3, #4]
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa24:	441a      	add	r2, r3
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	685a      	ldr	r2, [r3, #4]
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	689b      	ldr	r3, [r3, #8]
 800fa32:	429a      	cmp	r2, r3
 800fa34:	d32b      	bcc.n	800fa8e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	681a      	ldr	r2, [r3, #0]
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	605a      	str	r2, [r3, #4]
 800fa3e:	e026      	b.n	800fa8e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	68d8      	ldr	r0, [r3, #12]
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa48:	461a      	mov	r2, r3
 800fa4a:	68b9      	ldr	r1, [r7, #8]
 800fa4c:	f003 fa76 	bl	8012f3c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	68da      	ldr	r2, [r3, #12]
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa58:	425b      	negs	r3, r3
 800fa5a:	441a      	add	r2, r3
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	68da      	ldr	r2, [r3, #12]
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	429a      	cmp	r2, r3
 800fa6a:	d207      	bcs.n	800fa7c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	689a      	ldr	r2, [r3, #8]
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa74:	425b      	negs	r3, r3
 800fa76:	441a      	add	r2, r3
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	2b02      	cmp	r3, #2
 800fa80:	d105      	bne.n	800fa8e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fa82:	693b      	ldr	r3, [r7, #16]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d002      	beq.n	800fa8e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800fa88:	693b      	ldr	r3, [r7, #16]
 800fa8a:	3b01      	subs	r3, #1
 800fa8c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fa8e:	693b      	ldr	r3, [r7, #16]
 800fa90:	1c5a      	adds	r2, r3, #1
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800fa96:	697b      	ldr	r3, [r7, #20]
}
 800fa98:	4618      	mov	r0, r3
 800fa9a:	3718      	adds	r7, #24
 800fa9c:	46bd      	mov	sp, r7
 800fa9e:	bd80      	pop	{r7, pc}

0800faa0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b082      	sub	sp, #8
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	6078      	str	r0, [r7, #4]
 800faa8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d018      	beq.n	800fae4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	68da      	ldr	r2, [r3, #12]
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800faba:	441a      	add	r2, r3
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	68da      	ldr	r2, [r3, #12]
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	689b      	ldr	r3, [r3, #8]
 800fac8:	429a      	cmp	r2, r3
 800faca:	d303      	bcc.n	800fad4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	681a      	ldr	r2, [r3, #0]
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	68d9      	ldr	r1, [r3, #12]
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fadc:	461a      	mov	r2, r3
 800fade:	6838      	ldr	r0, [r7, #0]
 800fae0:	f003 fa2c 	bl	8012f3c <memcpy>
	}
}
 800fae4:	bf00      	nop
 800fae6:	3708      	adds	r7, #8
 800fae8:	46bd      	mov	sp, r7
 800faea:	bd80      	pop	{r7, pc}

0800faec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800faec:	b580      	push	{r7, lr}
 800faee:	b084      	sub	sp, #16
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800faf4:	f001 fdf6 	bl	80116e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fafe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fb00:	e011      	b.n	800fb26 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d012      	beq.n	800fb30 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	3324      	adds	r3, #36	; 0x24
 800fb0e:	4618      	mov	r0, r3
 800fb10:	f000 feb8 	bl	8010884 <xTaskRemoveFromEventList>
 800fb14:	4603      	mov	r3, r0
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d001      	beq.n	800fb1e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800fb1a:	f000 ff8f 	bl	8010a3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800fb1e:	7bfb      	ldrb	r3, [r7, #15]
 800fb20:	3b01      	subs	r3, #1
 800fb22:	b2db      	uxtb	r3, r3
 800fb24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fb26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	dce9      	bgt.n	800fb02 <prvUnlockQueue+0x16>
 800fb2e:	e000      	b.n	800fb32 <prvUnlockQueue+0x46>
					break;
 800fb30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	22ff      	movs	r2, #255	; 0xff
 800fb36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800fb3a:	f001 fe03 	bl	8011744 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800fb3e:	f001 fdd1 	bl	80116e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fb48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fb4a:	e011      	b.n	800fb70 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	691b      	ldr	r3, [r3, #16]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d012      	beq.n	800fb7a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	3310      	adds	r3, #16
 800fb58:	4618      	mov	r0, r3
 800fb5a:	f000 fe93 	bl	8010884 <xTaskRemoveFromEventList>
 800fb5e:	4603      	mov	r3, r0
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d001      	beq.n	800fb68 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800fb64:	f000 ff6a 	bl	8010a3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800fb68:	7bbb      	ldrb	r3, [r7, #14]
 800fb6a:	3b01      	subs	r3, #1
 800fb6c:	b2db      	uxtb	r3, r3
 800fb6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fb70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	dce9      	bgt.n	800fb4c <prvUnlockQueue+0x60>
 800fb78:	e000      	b.n	800fb7c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800fb7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	22ff      	movs	r2, #255	; 0xff
 800fb80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800fb84:	f001 fdde 	bl	8011744 <vPortExitCritical>
}
 800fb88:	bf00      	nop
 800fb8a:	3710      	adds	r7, #16
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	bd80      	pop	{r7, pc}

0800fb90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b084      	sub	sp, #16
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fb98:	f001 fda4 	bl	80116e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d102      	bne.n	800fbaa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800fba4:	2301      	movs	r3, #1
 800fba6:	60fb      	str	r3, [r7, #12]
 800fba8:	e001      	b.n	800fbae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800fbaa:	2300      	movs	r3, #0
 800fbac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fbae:	f001 fdc9 	bl	8011744 <vPortExitCritical>

	return xReturn;
 800fbb2:	68fb      	ldr	r3, [r7, #12]
}
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	3710      	adds	r7, #16
 800fbb8:	46bd      	mov	sp, r7
 800fbba:	bd80      	pop	{r7, pc}

0800fbbc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	b084      	sub	sp, #16
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fbc4:	f001 fd8e 	bl	80116e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fbd0:	429a      	cmp	r2, r3
 800fbd2:	d102      	bne.n	800fbda <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800fbd4:	2301      	movs	r3, #1
 800fbd6:	60fb      	str	r3, [r7, #12]
 800fbd8:	e001      	b.n	800fbde <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800fbda:	2300      	movs	r3, #0
 800fbdc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fbde:	f001 fdb1 	bl	8011744 <vPortExitCritical>

	return xReturn;
 800fbe2:	68fb      	ldr	r3, [r7, #12]
}
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	3710      	adds	r7, #16
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	bd80      	pop	{r7, pc}

0800fbec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800fbec:	b480      	push	{r7}
 800fbee:	b085      	sub	sp, #20
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]
 800fbf4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	60fb      	str	r3, [r7, #12]
 800fbfa:	e014      	b.n	800fc26 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800fbfc:	4a0f      	ldr	r2, [pc, #60]	; (800fc3c <vQueueAddToRegistry+0x50>)
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d10b      	bne.n	800fc20 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800fc08:	490c      	ldr	r1, [pc, #48]	; (800fc3c <vQueueAddToRegistry+0x50>)
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	683a      	ldr	r2, [r7, #0]
 800fc0e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800fc12:	4a0a      	ldr	r2, [pc, #40]	; (800fc3c <vQueueAddToRegistry+0x50>)
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	00db      	lsls	r3, r3, #3
 800fc18:	4413      	add	r3, r2
 800fc1a:	687a      	ldr	r2, [r7, #4]
 800fc1c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800fc1e:	e006      	b.n	800fc2e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	3301      	adds	r3, #1
 800fc24:	60fb      	str	r3, [r7, #12]
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	2b07      	cmp	r3, #7
 800fc2a:	d9e7      	bls.n	800fbfc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800fc2c:	bf00      	nop
 800fc2e:	bf00      	nop
 800fc30:	3714      	adds	r7, #20
 800fc32:	46bd      	mov	sp, r7
 800fc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc38:	4770      	bx	lr
 800fc3a:	bf00      	nop
 800fc3c:	20006500 	.word	0x20006500

0800fc40 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b086      	sub	sp, #24
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	60f8      	str	r0, [r7, #12]
 800fc48:	60b9      	str	r1, [r7, #8]
 800fc4a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800fc50:	f001 fd48 	bl	80116e4 <vPortEnterCritical>
 800fc54:	697b      	ldr	r3, [r7, #20]
 800fc56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fc5a:	b25b      	sxtb	r3, r3
 800fc5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc60:	d103      	bne.n	800fc6a <vQueueWaitForMessageRestricted+0x2a>
 800fc62:	697b      	ldr	r3, [r7, #20]
 800fc64:	2200      	movs	r2, #0
 800fc66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fc6a:	697b      	ldr	r3, [r7, #20]
 800fc6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fc70:	b25b      	sxtb	r3, r3
 800fc72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc76:	d103      	bne.n	800fc80 <vQueueWaitForMessageRestricted+0x40>
 800fc78:	697b      	ldr	r3, [r7, #20]
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fc80:	f001 fd60 	bl	8011744 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800fc84:	697b      	ldr	r3, [r7, #20]
 800fc86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d106      	bne.n	800fc9a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800fc8c:	697b      	ldr	r3, [r7, #20]
 800fc8e:	3324      	adds	r3, #36	; 0x24
 800fc90:	687a      	ldr	r2, [r7, #4]
 800fc92:	68b9      	ldr	r1, [r7, #8]
 800fc94:	4618      	mov	r0, r3
 800fc96:	f000 fdc9 	bl	801082c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800fc9a:	6978      	ldr	r0, [r7, #20]
 800fc9c:	f7ff ff26 	bl	800faec <prvUnlockQueue>
	}
 800fca0:	bf00      	nop
 800fca2:	3718      	adds	r7, #24
 800fca4:	46bd      	mov	sp, r7
 800fca6:	bd80      	pop	{r7, pc}

0800fca8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b08e      	sub	sp, #56	; 0x38
 800fcac:	af04      	add	r7, sp, #16
 800fcae:	60f8      	str	r0, [r7, #12]
 800fcb0:	60b9      	str	r1, [r7, #8]
 800fcb2:	607a      	str	r2, [r7, #4]
 800fcb4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800fcb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d10a      	bne.n	800fcd2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800fcbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcc0:	f383 8811 	msr	BASEPRI, r3
 800fcc4:	f3bf 8f6f 	isb	sy
 800fcc8:	f3bf 8f4f 	dsb	sy
 800fccc:	623b      	str	r3, [r7, #32]
}
 800fcce:	bf00      	nop
 800fcd0:	e7fe      	b.n	800fcd0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800fcd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d10a      	bne.n	800fcee <xTaskCreateStatic+0x46>
	__asm volatile
 800fcd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcdc:	f383 8811 	msr	BASEPRI, r3
 800fce0:	f3bf 8f6f 	isb	sy
 800fce4:	f3bf 8f4f 	dsb	sy
 800fce8:	61fb      	str	r3, [r7, #28]
}
 800fcea:	bf00      	nop
 800fcec:	e7fe      	b.n	800fcec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800fcee:	23bc      	movs	r3, #188	; 0xbc
 800fcf0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800fcf2:	693b      	ldr	r3, [r7, #16]
 800fcf4:	2bbc      	cmp	r3, #188	; 0xbc
 800fcf6:	d00a      	beq.n	800fd0e <xTaskCreateStatic+0x66>
	__asm volatile
 800fcf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcfc:	f383 8811 	msr	BASEPRI, r3
 800fd00:	f3bf 8f6f 	isb	sy
 800fd04:	f3bf 8f4f 	dsb	sy
 800fd08:	61bb      	str	r3, [r7, #24]
}
 800fd0a:	bf00      	nop
 800fd0c:	e7fe      	b.n	800fd0c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800fd0e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800fd10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d01e      	beq.n	800fd54 <xTaskCreateStatic+0xac>
 800fd16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d01b      	beq.n	800fd54 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fd1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd1e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800fd20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fd24:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800fd26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd28:	2202      	movs	r2, #2
 800fd2a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800fd2e:	2300      	movs	r3, #0
 800fd30:	9303      	str	r3, [sp, #12]
 800fd32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd34:	9302      	str	r3, [sp, #8]
 800fd36:	f107 0314 	add.w	r3, r7, #20
 800fd3a:	9301      	str	r3, [sp, #4]
 800fd3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd3e:	9300      	str	r3, [sp, #0]
 800fd40:	683b      	ldr	r3, [r7, #0]
 800fd42:	687a      	ldr	r2, [r7, #4]
 800fd44:	68b9      	ldr	r1, [r7, #8]
 800fd46:	68f8      	ldr	r0, [r7, #12]
 800fd48:	f000 f850 	bl	800fdec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fd4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fd4e:	f000 f8f3 	bl	800ff38 <prvAddNewTaskToReadyList>
 800fd52:	e001      	b.n	800fd58 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800fd54:	2300      	movs	r3, #0
 800fd56:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800fd58:	697b      	ldr	r3, [r7, #20]
	}
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	3728      	adds	r7, #40	; 0x28
 800fd5e:	46bd      	mov	sp, r7
 800fd60:	bd80      	pop	{r7, pc}

0800fd62 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800fd62:	b580      	push	{r7, lr}
 800fd64:	b08c      	sub	sp, #48	; 0x30
 800fd66:	af04      	add	r7, sp, #16
 800fd68:	60f8      	str	r0, [r7, #12]
 800fd6a:	60b9      	str	r1, [r7, #8]
 800fd6c:	603b      	str	r3, [r7, #0]
 800fd6e:	4613      	mov	r3, r2
 800fd70:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800fd72:	88fb      	ldrh	r3, [r7, #6]
 800fd74:	009b      	lsls	r3, r3, #2
 800fd76:	4618      	mov	r0, r3
 800fd78:	f001 fdd6 	bl	8011928 <pvPortMalloc>
 800fd7c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800fd7e:	697b      	ldr	r3, [r7, #20]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d00e      	beq.n	800fda2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800fd84:	20bc      	movs	r0, #188	; 0xbc
 800fd86:	f001 fdcf 	bl	8011928 <pvPortMalloc>
 800fd8a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800fd8c:	69fb      	ldr	r3, [r7, #28]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d003      	beq.n	800fd9a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800fd92:	69fb      	ldr	r3, [r7, #28]
 800fd94:	697a      	ldr	r2, [r7, #20]
 800fd96:	631a      	str	r2, [r3, #48]	; 0x30
 800fd98:	e005      	b.n	800fda6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800fd9a:	6978      	ldr	r0, [r7, #20]
 800fd9c:	f001 fe90 	bl	8011ac0 <vPortFree>
 800fda0:	e001      	b.n	800fda6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800fda2:	2300      	movs	r3, #0
 800fda4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800fda6:	69fb      	ldr	r3, [r7, #28]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d017      	beq.n	800fddc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800fdac:	69fb      	ldr	r3, [r7, #28]
 800fdae:	2200      	movs	r2, #0
 800fdb0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800fdb4:	88fa      	ldrh	r2, [r7, #6]
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	9303      	str	r3, [sp, #12]
 800fdba:	69fb      	ldr	r3, [r7, #28]
 800fdbc:	9302      	str	r3, [sp, #8]
 800fdbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdc0:	9301      	str	r3, [sp, #4]
 800fdc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdc4:	9300      	str	r3, [sp, #0]
 800fdc6:	683b      	ldr	r3, [r7, #0]
 800fdc8:	68b9      	ldr	r1, [r7, #8]
 800fdca:	68f8      	ldr	r0, [r7, #12]
 800fdcc:	f000 f80e 	bl	800fdec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fdd0:	69f8      	ldr	r0, [r7, #28]
 800fdd2:	f000 f8b1 	bl	800ff38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fdd6:	2301      	movs	r3, #1
 800fdd8:	61bb      	str	r3, [r7, #24]
 800fdda:	e002      	b.n	800fde2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fddc:	f04f 33ff 	mov.w	r3, #4294967295
 800fde0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fde2:	69bb      	ldr	r3, [r7, #24]
	}
 800fde4:	4618      	mov	r0, r3
 800fde6:	3720      	adds	r7, #32
 800fde8:	46bd      	mov	sp, r7
 800fdea:	bd80      	pop	{r7, pc}

0800fdec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b088      	sub	sp, #32
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	60f8      	str	r0, [r7, #12]
 800fdf4:	60b9      	str	r1, [r7, #8]
 800fdf6:	607a      	str	r2, [r7, #4]
 800fdf8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800fdfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdfc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	009b      	lsls	r3, r3, #2
 800fe02:	461a      	mov	r2, r3
 800fe04:	21a5      	movs	r1, #165	; 0xa5
 800fe06:	f003 f8c1 	bl	8012f8c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800fe0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800fe14:	3b01      	subs	r3, #1
 800fe16:	009b      	lsls	r3, r3, #2
 800fe18:	4413      	add	r3, r2
 800fe1a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800fe1c:	69bb      	ldr	r3, [r7, #24]
 800fe1e:	f023 0307 	bic.w	r3, r3, #7
 800fe22:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800fe24:	69bb      	ldr	r3, [r7, #24]
 800fe26:	f003 0307 	and.w	r3, r3, #7
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d00a      	beq.n	800fe44 <prvInitialiseNewTask+0x58>
	__asm volatile
 800fe2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe32:	f383 8811 	msr	BASEPRI, r3
 800fe36:	f3bf 8f6f 	isb	sy
 800fe3a:	f3bf 8f4f 	dsb	sy
 800fe3e:	617b      	str	r3, [r7, #20]
}
 800fe40:	bf00      	nop
 800fe42:	e7fe      	b.n	800fe42 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800fe44:	68bb      	ldr	r3, [r7, #8]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d01f      	beq.n	800fe8a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	61fb      	str	r3, [r7, #28]
 800fe4e:	e012      	b.n	800fe76 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800fe50:	68ba      	ldr	r2, [r7, #8]
 800fe52:	69fb      	ldr	r3, [r7, #28]
 800fe54:	4413      	add	r3, r2
 800fe56:	7819      	ldrb	r1, [r3, #0]
 800fe58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fe5a:	69fb      	ldr	r3, [r7, #28]
 800fe5c:	4413      	add	r3, r2
 800fe5e:	3334      	adds	r3, #52	; 0x34
 800fe60:	460a      	mov	r2, r1
 800fe62:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800fe64:	68ba      	ldr	r2, [r7, #8]
 800fe66:	69fb      	ldr	r3, [r7, #28]
 800fe68:	4413      	add	r3, r2
 800fe6a:	781b      	ldrb	r3, [r3, #0]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d006      	beq.n	800fe7e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fe70:	69fb      	ldr	r3, [r7, #28]
 800fe72:	3301      	adds	r3, #1
 800fe74:	61fb      	str	r3, [r7, #28]
 800fe76:	69fb      	ldr	r3, [r7, #28]
 800fe78:	2b0f      	cmp	r3, #15
 800fe7a:	d9e9      	bls.n	800fe50 <prvInitialiseNewTask+0x64>
 800fe7c:	e000      	b.n	800fe80 <prvInitialiseNewTask+0x94>
			{
				break;
 800fe7e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800fe80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe82:	2200      	movs	r2, #0
 800fe84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fe88:	e003      	b.n	800fe92 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800fe8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe8c:	2200      	movs	r2, #0
 800fe8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fe92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe94:	2b37      	cmp	r3, #55	; 0x37
 800fe96:	d901      	bls.n	800fe9c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fe98:	2337      	movs	r3, #55	; 0x37
 800fe9a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800fe9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fea0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800fea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fea4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fea6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800fea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feaa:	2200      	movs	r2, #0
 800feac:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800feae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feb0:	3304      	adds	r3, #4
 800feb2:	4618      	mov	r0, r3
 800feb4:	f7ff f978 	bl	800f1a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800feb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feba:	3318      	adds	r3, #24
 800febc:	4618      	mov	r0, r3
 800febe:	f7ff f973 	bl	800f1a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800fec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fec4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fec6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fed0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800fed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fed4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fed6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800fed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feda:	2200      	movs	r2, #0
 800fedc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fee2:	2200      	movs	r2, #0
 800fee4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800fee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feea:	3354      	adds	r3, #84	; 0x54
 800feec:	2260      	movs	r2, #96	; 0x60
 800feee:	2100      	movs	r1, #0
 800fef0:	4618      	mov	r0, r3
 800fef2:	f003 f84b 	bl	8012f8c <memset>
 800fef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fef8:	4a0c      	ldr	r2, [pc, #48]	; (800ff2c <prvInitialiseNewTask+0x140>)
 800fefa:	659a      	str	r2, [r3, #88]	; 0x58
 800fefc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fefe:	4a0c      	ldr	r2, [pc, #48]	; (800ff30 <prvInitialiseNewTask+0x144>)
 800ff00:	65da      	str	r2, [r3, #92]	; 0x5c
 800ff02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff04:	4a0b      	ldr	r2, [pc, #44]	; (800ff34 <prvInitialiseNewTask+0x148>)
 800ff06:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ff08:	683a      	ldr	r2, [r7, #0]
 800ff0a:	68f9      	ldr	r1, [r7, #12]
 800ff0c:	69b8      	ldr	r0, [r7, #24]
 800ff0e:	f001 fab9 	bl	8011484 <pxPortInitialiseStack>
 800ff12:	4602      	mov	r2, r0
 800ff14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff16:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ff18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d002      	beq.n	800ff24 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ff1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff22:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ff24:	bf00      	nop
 800ff26:	3720      	adds	r7, #32
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	bd80      	pop	{r7, pc}
 800ff2c:	0801a1d4 	.word	0x0801a1d4
 800ff30:	0801a1f4 	.word	0x0801a1f4
 800ff34:	0801a1b4 	.word	0x0801a1b4

0800ff38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b082      	sub	sp, #8
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ff40:	f001 fbd0 	bl	80116e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ff44:	4b2d      	ldr	r3, [pc, #180]	; (800fffc <prvAddNewTaskToReadyList+0xc4>)
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	3301      	adds	r3, #1
 800ff4a:	4a2c      	ldr	r2, [pc, #176]	; (800fffc <prvAddNewTaskToReadyList+0xc4>)
 800ff4c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ff4e:	4b2c      	ldr	r3, [pc, #176]	; (8010000 <prvAddNewTaskToReadyList+0xc8>)
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d109      	bne.n	800ff6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ff56:	4a2a      	ldr	r2, [pc, #168]	; (8010000 <prvAddNewTaskToReadyList+0xc8>)
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ff5c:	4b27      	ldr	r3, [pc, #156]	; (800fffc <prvAddNewTaskToReadyList+0xc4>)
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	2b01      	cmp	r3, #1
 800ff62:	d110      	bne.n	800ff86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ff64:	f000 fd8e 	bl	8010a84 <prvInitialiseTaskLists>
 800ff68:	e00d      	b.n	800ff86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ff6a:	4b26      	ldr	r3, [pc, #152]	; (8010004 <prvAddNewTaskToReadyList+0xcc>)
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d109      	bne.n	800ff86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ff72:	4b23      	ldr	r3, [pc, #140]	; (8010000 <prvAddNewTaskToReadyList+0xc8>)
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff7c:	429a      	cmp	r2, r3
 800ff7e:	d802      	bhi.n	800ff86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ff80:	4a1f      	ldr	r2, [pc, #124]	; (8010000 <prvAddNewTaskToReadyList+0xc8>)
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ff86:	4b20      	ldr	r3, [pc, #128]	; (8010008 <prvAddNewTaskToReadyList+0xd0>)
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	3301      	adds	r3, #1
 800ff8c:	4a1e      	ldr	r2, [pc, #120]	; (8010008 <prvAddNewTaskToReadyList+0xd0>)
 800ff8e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ff90:	4b1d      	ldr	r3, [pc, #116]	; (8010008 <prvAddNewTaskToReadyList+0xd0>)
 800ff92:	681a      	ldr	r2, [r3, #0]
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff9c:	4b1b      	ldr	r3, [pc, #108]	; (801000c <prvAddNewTaskToReadyList+0xd4>)
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	429a      	cmp	r2, r3
 800ffa2:	d903      	bls.n	800ffac <prvAddNewTaskToReadyList+0x74>
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffa8:	4a18      	ldr	r2, [pc, #96]	; (801000c <prvAddNewTaskToReadyList+0xd4>)
 800ffaa:	6013      	str	r3, [r2, #0]
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffb0:	4613      	mov	r3, r2
 800ffb2:	009b      	lsls	r3, r3, #2
 800ffb4:	4413      	add	r3, r2
 800ffb6:	009b      	lsls	r3, r3, #2
 800ffb8:	4a15      	ldr	r2, [pc, #84]	; (8010010 <prvAddNewTaskToReadyList+0xd8>)
 800ffba:	441a      	add	r2, r3
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	3304      	adds	r3, #4
 800ffc0:	4619      	mov	r1, r3
 800ffc2:	4610      	mov	r0, r2
 800ffc4:	f7ff f8fd 	bl	800f1c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ffc8:	f001 fbbc 	bl	8011744 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ffcc:	4b0d      	ldr	r3, [pc, #52]	; (8010004 <prvAddNewTaskToReadyList+0xcc>)
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d00e      	beq.n	800fff2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ffd4:	4b0a      	ldr	r3, [pc, #40]	; (8010000 <prvAddNewTaskToReadyList+0xc8>)
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffde:	429a      	cmp	r2, r3
 800ffe0:	d207      	bcs.n	800fff2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ffe2:	4b0c      	ldr	r3, [pc, #48]	; (8010014 <prvAddNewTaskToReadyList+0xdc>)
 800ffe4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ffe8:	601a      	str	r2, [r3, #0]
 800ffea:	f3bf 8f4f 	dsb	sy
 800ffee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fff2:	bf00      	nop
 800fff4:	3708      	adds	r7, #8
 800fff6:	46bd      	mov	sp, r7
 800fff8:	bd80      	pop	{r7, pc}
 800fffa:	bf00      	nop
 800fffc:	20001304 	.word	0x20001304
 8010000:	20000e30 	.word	0x20000e30
 8010004:	20001310 	.word	0x20001310
 8010008:	20001320 	.word	0x20001320
 801000c:	2000130c 	.word	0x2000130c
 8010010:	20000e34 	.word	0x20000e34
 8010014:	e000ed04 	.word	0xe000ed04

08010018 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8010018:	b580      	push	{r7, lr}
 801001a:	b084      	sub	sp, #16
 801001c:	af00      	add	r7, sp, #0
 801001e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8010020:	f001 fb60 	bl	80116e4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	2b00      	cmp	r3, #0
 8010028:	d102      	bne.n	8010030 <vTaskDelete+0x18>
 801002a:	4b2c      	ldr	r3, [pc, #176]	; (80100dc <vTaskDelete+0xc4>)
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	e000      	b.n	8010032 <vTaskDelete+0x1a>
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	3304      	adds	r3, #4
 8010038:	4618      	mov	r0, r3
 801003a:	f7ff f91f 	bl	800f27c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010042:	2b00      	cmp	r3, #0
 8010044:	d004      	beq.n	8010050 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	3318      	adds	r3, #24
 801004a:	4618      	mov	r0, r3
 801004c:	f7ff f916 	bl	800f27c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8010050:	4b23      	ldr	r3, [pc, #140]	; (80100e0 <vTaskDelete+0xc8>)
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	3301      	adds	r3, #1
 8010056:	4a22      	ldr	r2, [pc, #136]	; (80100e0 <vTaskDelete+0xc8>)
 8010058:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 801005a:	4b20      	ldr	r3, [pc, #128]	; (80100dc <vTaskDelete+0xc4>)
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	68fa      	ldr	r2, [r7, #12]
 8010060:	429a      	cmp	r2, r3
 8010062:	d10b      	bne.n	801007c <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	3304      	adds	r3, #4
 8010068:	4619      	mov	r1, r3
 801006a:	481e      	ldr	r0, [pc, #120]	; (80100e4 <vTaskDelete+0xcc>)
 801006c:	f7ff f8a9 	bl	800f1c2 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8010070:	4b1d      	ldr	r3, [pc, #116]	; (80100e8 <vTaskDelete+0xd0>)
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	3301      	adds	r3, #1
 8010076:	4a1c      	ldr	r2, [pc, #112]	; (80100e8 <vTaskDelete+0xd0>)
 8010078:	6013      	str	r3, [r2, #0]
 801007a:	e009      	b.n	8010090 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 801007c:	4b1b      	ldr	r3, [pc, #108]	; (80100ec <vTaskDelete+0xd4>)
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	3b01      	subs	r3, #1
 8010082:	4a1a      	ldr	r2, [pc, #104]	; (80100ec <vTaskDelete+0xd4>)
 8010084:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8010086:	68f8      	ldr	r0, [r7, #12]
 8010088:	f000 fd6a 	bl	8010b60 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 801008c:	f000 fd9c 	bl	8010bc8 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8010090:	f001 fb58 	bl	8011744 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8010094:	4b16      	ldr	r3, [pc, #88]	; (80100f0 <vTaskDelete+0xd8>)
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d01b      	beq.n	80100d4 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 801009c:	4b0f      	ldr	r3, [pc, #60]	; (80100dc <vTaskDelete+0xc4>)
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	68fa      	ldr	r2, [r7, #12]
 80100a2:	429a      	cmp	r2, r3
 80100a4:	d116      	bne.n	80100d4 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80100a6:	4b13      	ldr	r3, [pc, #76]	; (80100f4 <vTaskDelete+0xdc>)
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d00a      	beq.n	80100c4 <vTaskDelete+0xac>
	__asm volatile
 80100ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100b2:	f383 8811 	msr	BASEPRI, r3
 80100b6:	f3bf 8f6f 	isb	sy
 80100ba:	f3bf 8f4f 	dsb	sy
 80100be:	60bb      	str	r3, [r7, #8]
}
 80100c0:	bf00      	nop
 80100c2:	e7fe      	b.n	80100c2 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 80100c4:	4b0c      	ldr	r3, [pc, #48]	; (80100f8 <vTaskDelete+0xe0>)
 80100c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100ca:	601a      	str	r2, [r3, #0]
 80100cc:	f3bf 8f4f 	dsb	sy
 80100d0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80100d4:	bf00      	nop
 80100d6:	3710      	adds	r7, #16
 80100d8:	46bd      	mov	sp, r7
 80100da:	bd80      	pop	{r7, pc}
 80100dc:	20000e30 	.word	0x20000e30
 80100e0:	20001320 	.word	0x20001320
 80100e4:	200012d8 	.word	0x200012d8
 80100e8:	200012ec 	.word	0x200012ec
 80100ec:	20001304 	.word	0x20001304
 80100f0:	20001310 	.word	0x20001310
 80100f4:	2000132c 	.word	0x2000132c
 80100f8:	e000ed04 	.word	0xe000ed04

080100fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b084      	sub	sp, #16
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010104:	2300      	movs	r3, #0
 8010106:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	2b00      	cmp	r3, #0
 801010c:	d017      	beq.n	801013e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801010e:	4b13      	ldr	r3, [pc, #76]	; (801015c <vTaskDelay+0x60>)
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d00a      	beq.n	801012c <vTaskDelay+0x30>
	__asm volatile
 8010116:	f04f 0350 	mov.w	r3, #80	; 0x50
 801011a:	f383 8811 	msr	BASEPRI, r3
 801011e:	f3bf 8f6f 	isb	sy
 8010122:	f3bf 8f4f 	dsb	sy
 8010126:	60bb      	str	r3, [r7, #8]
}
 8010128:	bf00      	nop
 801012a:	e7fe      	b.n	801012a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801012c:	f000 f980 	bl	8010430 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010130:	2100      	movs	r1, #0
 8010132:	6878      	ldr	r0, [r7, #4]
 8010134:	f000 fe04 	bl	8010d40 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010138:	f000 f988 	bl	801044c <xTaskResumeAll>
 801013c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	2b00      	cmp	r3, #0
 8010142:	d107      	bne.n	8010154 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8010144:	4b06      	ldr	r3, [pc, #24]	; (8010160 <vTaskDelay+0x64>)
 8010146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801014a:	601a      	str	r2, [r3, #0]
 801014c:	f3bf 8f4f 	dsb	sy
 8010150:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010154:	bf00      	nop
 8010156:	3710      	adds	r7, #16
 8010158:	46bd      	mov	sp, r7
 801015a:	bd80      	pop	{r7, pc}
 801015c:	2000132c 	.word	0x2000132c
 8010160:	e000ed04 	.word	0xe000ed04

08010164 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8010164:	b580      	push	{r7, lr}
 8010166:	b088      	sub	sp, #32
 8010168:	af00      	add	r7, sp, #0
 801016a:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8010170:	69bb      	ldr	r3, [r7, #24]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d10a      	bne.n	801018c <eTaskGetState+0x28>
	__asm volatile
 8010176:	f04f 0350 	mov.w	r3, #80	; 0x50
 801017a:	f383 8811 	msr	BASEPRI, r3
 801017e:	f3bf 8f6f 	isb	sy
 8010182:	f3bf 8f4f 	dsb	sy
 8010186:	60bb      	str	r3, [r7, #8]
}
 8010188:	bf00      	nop
 801018a:	e7fe      	b.n	801018a <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 801018c:	4b23      	ldr	r3, [pc, #140]	; (801021c <eTaskGetState+0xb8>)
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	69ba      	ldr	r2, [r7, #24]
 8010192:	429a      	cmp	r2, r3
 8010194:	d102      	bne.n	801019c <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8010196:	2300      	movs	r3, #0
 8010198:	77fb      	strb	r3, [r7, #31]
 801019a:	e03a      	b.n	8010212 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 801019c:	f001 faa2 	bl	80116e4 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80101a0:	69bb      	ldr	r3, [r7, #24]
 80101a2:	695b      	ldr	r3, [r3, #20]
 80101a4:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 80101a6:	4b1e      	ldr	r3, [pc, #120]	; (8010220 <eTaskGetState+0xbc>)
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80101ac:	4b1d      	ldr	r3, [pc, #116]	; (8010224 <eTaskGetState+0xc0>)
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 80101b2:	f001 fac7 	bl	8011744 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80101b6:	697a      	ldr	r2, [r7, #20]
 80101b8:	693b      	ldr	r3, [r7, #16]
 80101ba:	429a      	cmp	r2, r3
 80101bc:	d003      	beq.n	80101c6 <eTaskGetState+0x62>
 80101be:	697a      	ldr	r2, [r7, #20]
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	429a      	cmp	r2, r3
 80101c4:	d102      	bne.n	80101cc <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 80101c6:	2302      	movs	r3, #2
 80101c8:	77fb      	strb	r3, [r7, #31]
 80101ca:	e022      	b.n	8010212 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80101cc:	697b      	ldr	r3, [r7, #20]
 80101ce:	4a16      	ldr	r2, [pc, #88]	; (8010228 <eTaskGetState+0xc4>)
 80101d0:	4293      	cmp	r3, r2
 80101d2:	d112      	bne.n	80101fa <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80101d4:	69bb      	ldr	r3, [r7, #24]
 80101d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d10b      	bne.n	80101f4 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80101dc:	69bb      	ldr	r3, [r7, #24]
 80101de:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80101e2:	b2db      	uxtb	r3, r3
 80101e4:	2b01      	cmp	r3, #1
 80101e6:	d102      	bne.n	80101ee <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 80101e8:	2302      	movs	r3, #2
 80101ea:	77fb      	strb	r3, [r7, #31]
 80101ec:	e011      	b.n	8010212 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 80101ee:	2303      	movs	r3, #3
 80101f0:	77fb      	strb	r3, [r7, #31]
 80101f2:	e00e      	b.n	8010212 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 80101f4:	2302      	movs	r3, #2
 80101f6:	77fb      	strb	r3, [r7, #31]
 80101f8:	e00b      	b.n	8010212 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80101fa:	697b      	ldr	r3, [r7, #20]
 80101fc:	4a0b      	ldr	r2, [pc, #44]	; (801022c <eTaskGetState+0xc8>)
 80101fe:	4293      	cmp	r3, r2
 8010200:	d002      	beq.n	8010208 <eTaskGetState+0xa4>
 8010202:	697b      	ldr	r3, [r7, #20]
 8010204:	2b00      	cmp	r3, #0
 8010206:	d102      	bne.n	801020e <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8010208:	2304      	movs	r3, #4
 801020a:	77fb      	strb	r3, [r7, #31]
 801020c:	e001      	b.n	8010212 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 801020e:	2301      	movs	r3, #1
 8010210:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8010212:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8010214:	4618      	mov	r0, r3
 8010216:	3720      	adds	r7, #32
 8010218:	46bd      	mov	sp, r7
 801021a:	bd80      	pop	{r7, pc}
 801021c:	20000e30 	.word	0x20000e30
 8010220:	200012bc 	.word	0x200012bc
 8010224:	200012c0 	.word	0x200012c0
 8010228:	200012f0 	.word	0x200012f0
 801022c:	200012d8 	.word	0x200012d8

08010230 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8010230:	b480      	push	{r7}
 8010232:	b087      	sub	sp, #28
 8010234:	af00      	add	r7, sp, #0
 8010236:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8010238:	2300      	movs	r3, #0
 801023a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	2b00      	cmp	r3, #0
 8010244:	d10a      	bne.n	801025c <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8010246:	f04f 0350 	mov.w	r3, #80	; 0x50
 801024a:	f383 8811 	msr	BASEPRI, r3
 801024e:	f3bf 8f6f 	isb	sy
 8010252:	f3bf 8f4f 	dsb	sy
 8010256:	60fb      	str	r3, [r7, #12]
}
 8010258:	bf00      	nop
 801025a:	e7fe      	b.n	801025a <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 801025c:	693b      	ldr	r3, [r7, #16]
 801025e:	695b      	ldr	r3, [r3, #20]
 8010260:	4a0a      	ldr	r2, [pc, #40]	; (801028c <prvTaskIsTaskSuspended+0x5c>)
 8010262:	4293      	cmp	r3, r2
 8010264:	d10a      	bne.n	801027c <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8010266:	693b      	ldr	r3, [r7, #16]
 8010268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801026a:	4a09      	ldr	r2, [pc, #36]	; (8010290 <prvTaskIsTaskSuspended+0x60>)
 801026c:	4293      	cmp	r3, r2
 801026e:	d005      	beq.n	801027c <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8010270:	693b      	ldr	r3, [r7, #16]
 8010272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010274:	2b00      	cmp	r3, #0
 8010276:	d101      	bne.n	801027c <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8010278:	2301      	movs	r3, #1
 801027a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801027c:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 801027e:	4618      	mov	r0, r3
 8010280:	371c      	adds	r7, #28
 8010282:	46bd      	mov	sp, r7
 8010284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010288:	4770      	bx	lr
 801028a:	bf00      	nop
 801028c:	200012f0 	.word	0x200012f0
 8010290:	200012c4 	.word	0x200012c4

08010294 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8010294:	b580      	push	{r7, lr}
 8010296:	b084      	sub	sp, #16
 8010298:	af00      	add	r7, sp, #0
 801029a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d10a      	bne.n	80102bc <vTaskResume+0x28>
	__asm volatile
 80102a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102aa:	f383 8811 	msr	BASEPRI, r3
 80102ae:	f3bf 8f6f 	isb	sy
 80102b2:	f3bf 8f4f 	dsb	sy
 80102b6:	60bb      	str	r3, [r7, #8]
}
 80102b8:	bf00      	nop
 80102ba:	e7fe      	b.n	80102ba <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80102bc:	4b20      	ldr	r3, [pc, #128]	; (8010340 <vTaskResume+0xac>)
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	68fa      	ldr	r2, [r7, #12]
 80102c2:	429a      	cmp	r2, r3
 80102c4:	d038      	beq.n	8010338 <vTaskResume+0xa4>
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d035      	beq.n	8010338 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 80102cc:	f001 fa0a 	bl	80116e4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80102d0:	68f8      	ldr	r0, [r7, #12]
 80102d2:	f7ff ffad 	bl	8010230 <prvTaskIsTaskSuspended>
 80102d6:	4603      	mov	r3, r0
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d02b      	beq.n	8010334 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	3304      	adds	r3, #4
 80102e0:	4618      	mov	r0, r3
 80102e2:	f7fe ffcb 	bl	800f27c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102ea:	4b16      	ldr	r3, [pc, #88]	; (8010344 <vTaskResume+0xb0>)
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	429a      	cmp	r2, r3
 80102f0:	d903      	bls.n	80102fa <vTaskResume+0x66>
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102f6:	4a13      	ldr	r2, [pc, #76]	; (8010344 <vTaskResume+0xb0>)
 80102f8:	6013      	str	r3, [r2, #0]
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102fe:	4613      	mov	r3, r2
 8010300:	009b      	lsls	r3, r3, #2
 8010302:	4413      	add	r3, r2
 8010304:	009b      	lsls	r3, r3, #2
 8010306:	4a10      	ldr	r2, [pc, #64]	; (8010348 <vTaskResume+0xb4>)
 8010308:	441a      	add	r2, r3
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	3304      	adds	r3, #4
 801030e:	4619      	mov	r1, r3
 8010310:	4610      	mov	r0, r2
 8010312:	f7fe ff56 	bl	800f1c2 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801031a:	4b09      	ldr	r3, [pc, #36]	; (8010340 <vTaskResume+0xac>)
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010320:	429a      	cmp	r2, r3
 8010322:	d307      	bcc.n	8010334 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8010324:	4b09      	ldr	r3, [pc, #36]	; (801034c <vTaskResume+0xb8>)
 8010326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801032a:	601a      	str	r2, [r3, #0]
 801032c:	f3bf 8f4f 	dsb	sy
 8010330:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8010334:	f001 fa06 	bl	8011744 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010338:	bf00      	nop
 801033a:	3710      	adds	r7, #16
 801033c:	46bd      	mov	sp, r7
 801033e:	bd80      	pop	{r7, pc}
 8010340:	20000e30 	.word	0x20000e30
 8010344:	2000130c 	.word	0x2000130c
 8010348:	20000e34 	.word	0x20000e34
 801034c:	e000ed04 	.word	0xe000ed04

08010350 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010350:	b580      	push	{r7, lr}
 8010352:	b08a      	sub	sp, #40	; 0x28
 8010354:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010356:	2300      	movs	r3, #0
 8010358:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801035a:	2300      	movs	r3, #0
 801035c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801035e:	463a      	mov	r2, r7
 8010360:	1d39      	adds	r1, r7, #4
 8010362:	f107 0308 	add.w	r3, r7, #8
 8010366:	4618      	mov	r0, r3
 8010368:	f7fe feca 	bl	800f100 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801036c:	6839      	ldr	r1, [r7, #0]
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	68ba      	ldr	r2, [r7, #8]
 8010372:	9202      	str	r2, [sp, #8]
 8010374:	9301      	str	r3, [sp, #4]
 8010376:	2300      	movs	r3, #0
 8010378:	9300      	str	r3, [sp, #0]
 801037a:	2300      	movs	r3, #0
 801037c:	460a      	mov	r2, r1
 801037e:	4924      	ldr	r1, [pc, #144]	; (8010410 <vTaskStartScheduler+0xc0>)
 8010380:	4824      	ldr	r0, [pc, #144]	; (8010414 <vTaskStartScheduler+0xc4>)
 8010382:	f7ff fc91 	bl	800fca8 <xTaskCreateStatic>
 8010386:	4603      	mov	r3, r0
 8010388:	4a23      	ldr	r2, [pc, #140]	; (8010418 <vTaskStartScheduler+0xc8>)
 801038a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801038c:	4b22      	ldr	r3, [pc, #136]	; (8010418 <vTaskStartScheduler+0xc8>)
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	2b00      	cmp	r3, #0
 8010392:	d002      	beq.n	801039a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010394:	2301      	movs	r3, #1
 8010396:	617b      	str	r3, [r7, #20]
 8010398:	e001      	b.n	801039e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801039a:	2300      	movs	r3, #0
 801039c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801039e:	697b      	ldr	r3, [r7, #20]
 80103a0:	2b01      	cmp	r3, #1
 80103a2:	d102      	bne.n	80103aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80103a4:	f000 fd20 	bl	8010de8 <xTimerCreateTimerTask>
 80103a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80103aa:	697b      	ldr	r3, [r7, #20]
 80103ac:	2b01      	cmp	r3, #1
 80103ae:	d11b      	bne.n	80103e8 <vTaskStartScheduler+0x98>
	__asm volatile
 80103b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103b4:	f383 8811 	msr	BASEPRI, r3
 80103b8:	f3bf 8f6f 	isb	sy
 80103bc:	f3bf 8f4f 	dsb	sy
 80103c0:	613b      	str	r3, [r7, #16]
}
 80103c2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80103c4:	4b15      	ldr	r3, [pc, #84]	; (801041c <vTaskStartScheduler+0xcc>)
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	3354      	adds	r3, #84	; 0x54
 80103ca:	4a15      	ldr	r2, [pc, #84]	; (8010420 <vTaskStartScheduler+0xd0>)
 80103cc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80103ce:	4b15      	ldr	r3, [pc, #84]	; (8010424 <vTaskStartScheduler+0xd4>)
 80103d0:	f04f 32ff 	mov.w	r2, #4294967295
 80103d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80103d6:	4b14      	ldr	r3, [pc, #80]	; (8010428 <vTaskStartScheduler+0xd8>)
 80103d8:	2201      	movs	r2, #1
 80103da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80103dc:	4b13      	ldr	r3, [pc, #76]	; (801042c <vTaskStartScheduler+0xdc>)
 80103de:	2200      	movs	r2, #0
 80103e0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80103e2:	f001 f8dd 	bl	80115a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80103e6:	e00e      	b.n	8010406 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80103e8:	697b      	ldr	r3, [r7, #20]
 80103ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103ee:	d10a      	bne.n	8010406 <vTaskStartScheduler+0xb6>
	__asm volatile
 80103f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103f4:	f383 8811 	msr	BASEPRI, r3
 80103f8:	f3bf 8f6f 	isb	sy
 80103fc:	f3bf 8f4f 	dsb	sy
 8010400:	60fb      	str	r3, [r7, #12]
}
 8010402:	bf00      	nop
 8010404:	e7fe      	b.n	8010404 <vTaskStartScheduler+0xb4>
}
 8010406:	bf00      	nop
 8010408:	3718      	adds	r7, #24
 801040a:	46bd      	mov	sp, r7
 801040c:	bd80      	pop	{r7, pc}
 801040e:	bf00      	nop
 8010410:	08019f08 	.word	0x08019f08
 8010414:	08010a55 	.word	0x08010a55
 8010418:	20001328 	.word	0x20001328
 801041c:	20000e30 	.word	0x20000e30
 8010420:	200000f0 	.word	0x200000f0
 8010424:	20001324 	.word	0x20001324
 8010428:	20001310 	.word	0x20001310
 801042c:	20001308 	.word	0x20001308

08010430 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010430:	b480      	push	{r7}
 8010432:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010434:	4b04      	ldr	r3, [pc, #16]	; (8010448 <vTaskSuspendAll+0x18>)
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	3301      	adds	r3, #1
 801043a:	4a03      	ldr	r2, [pc, #12]	; (8010448 <vTaskSuspendAll+0x18>)
 801043c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801043e:	bf00      	nop
 8010440:	46bd      	mov	sp, r7
 8010442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010446:	4770      	bx	lr
 8010448:	2000132c 	.word	0x2000132c

0801044c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801044c:	b580      	push	{r7, lr}
 801044e:	b084      	sub	sp, #16
 8010450:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010452:	2300      	movs	r3, #0
 8010454:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010456:	2300      	movs	r3, #0
 8010458:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801045a:	4b42      	ldr	r3, [pc, #264]	; (8010564 <xTaskResumeAll+0x118>)
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	2b00      	cmp	r3, #0
 8010460:	d10a      	bne.n	8010478 <xTaskResumeAll+0x2c>
	__asm volatile
 8010462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010466:	f383 8811 	msr	BASEPRI, r3
 801046a:	f3bf 8f6f 	isb	sy
 801046e:	f3bf 8f4f 	dsb	sy
 8010472:	603b      	str	r3, [r7, #0]
}
 8010474:	bf00      	nop
 8010476:	e7fe      	b.n	8010476 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010478:	f001 f934 	bl	80116e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801047c:	4b39      	ldr	r3, [pc, #228]	; (8010564 <xTaskResumeAll+0x118>)
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	3b01      	subs	r3, #1
 8010482:	4a38      	ldr	r2, [pc, #224]	; (8010564 <xTaskResumeAll+0x118>)
 8010484:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010486:	4b37      	ldr	r3, [pc, #220]	; (8010564 <xTaskResumeAll+0x118>)
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d162      	bne.n	8010554 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801048e:	4b36      	ldr	r3, [pc, #216]	; (8010568 <xTaskResumeAll+0x11c>)
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d05e      	beq.n	8010554 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010496:	e02f      	b.n	80104f8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010498:	4b34      	ldr	r3, [pc, #208]	; (801056c <xTaskResumeAll+0x120>)
 801049a:	68db      	ldr	r3, [r3, #12]
 801049c:	68db      	ldr	r3, [r3, #12]
 801049e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	3318      	adds	r3, #24
 80104a4:	4618      	mov	r0, r3
 80104a6:	f7fe fee9 	bl	800f27c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	3304      	adds	r3, #4
 80104ae:	4618      	mov	r0, r3
 80104b0:	f7fe fee4 	bl	800f27c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104b8:	4b2d      	ldr	r3, [pc, #180]	; (8010570 <xTaskResumeAll+0x124>)
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	429a      	cmp	r2, r3
 80104be:	d903      	bls.n	80104c8 <xTaskResumeAll+0x7c>
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104c4:	4a2a      	ldr	r2, [pc, #168]	; (8010570 <xTaskResumeAll+0x124>)
 80104c6:	6013      	str	r3, [r2, #0]
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104cc:	4613      	mov	r3, r2
 80104ce:	009b      	lsls	r3, r3, #2
 80104d0:	4413      	add	r3, r2
 80104d2:	009b      	lsls	r3, r3, #2
 80104d4:	4a27      	ldr	r2, [pc, #156]	; (8010574 <xTaskResumeAll+0x128>)
 80104d6:	441a      	add	r2, r3
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	3304      	adds	r3, #4
 80104dc:	4619      	mov	r1, r3
 80104de:	4610      	mov	r0, r2
 80104e0:	f7fe fe6f 	bl	800f1c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104e8:	4b23      	ldr	r3, [pc, #140]	; (8010578 <xTaskResumeAll+0x12c>)
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104ee:	429a      	cmp	r2, r3
 80104f0:	d302      	bcc.n	80104f8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80104f2:	4b22      	ldr	r3, [pc, #136]	; (801057c <xTaskResumeAll+0x130>)
 80104f4:	2201      	movs	r2, #1
 80104f6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80104f8:	4b1c      	ldr	r3, [pc, #112]	; (801056c <xTaskResumeAll+0x120>)
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d1cb      	bne.n	8010498 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	2b00      	cmp	r3, #0
 8010504:	d001      	beq.n	801050a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010506:	f000 fb5f 	bl	8010bc8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801050a:	4b1d      	ldr	r3, [pc, #116]	; (8010580 <xTaskResumeAll+0x134>)
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d010      	beq.n	8010538 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010516:	f000 f847 	bl	80105a8 <xTaskIncrementTick>
 801051a:	4603      	mov	r3, r0
 801051c:	2b00      	cmp	r3, #0
 801051e:	d002      	beq.n	8010526 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8010520:	4b16      	ldr	r3, [pc, #88]	; (801057c <xTaskResumeAll+0x130>)
 8010522:	2201      	movs	r2, #1
 8010524:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	3b01      	subs	r3, #1
 801052a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	2b00      	cmp	r3, #0
 8010530:	d1f1      	bne.n	8010516 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8010532:	4b13      	ldr	r3, [pc, #76]	; (8010580 <xTaskResumeAll+0x134>)
 8010534:	2200      	movs	r2, #0
 8010536:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010538:	4b10      	ldr	r3, [pc, #64]	; (801057c <xTaskResumeAll+0x130>)
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	2b00      	cmp	r3, #0
 801053e:	d009      	beq.n	8010554 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010540:	2301      	movs	r3, #1
 8010542:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010544:	4b0f      	ldr	r3, [pc, #60]	; (8010584 <xTaskResumeAll+0x138>)
 8010546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801054a:	601a      	str	r2, [r3, #0]
 801054c:	f3bf 8f4f 	dsb	sy
 8010550:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010554:	f001 f8f6 	bl	8011744 <vPortExitCritical>

	return xAlreadyYielded;
 8010558:	68bb      	ldr	r3, [r7, #8]
}
 801055a:	4618      	mov	r0, r3
 801055c:	3710      	adds	r7, #16
 801055e:	46bd      	mov	sp, r7
 8010560:	bd80      	pop	{r7, pc}
 8010562:	bf00      	nop
 8010564:	2000132c 	.word	0x2000132c
 8010568:	20001304 	.word	0x20001304
 801056c:	200012c4 	.word	0x200012c4
 8010570:	2000130c 	.word	0x2000130c
 8010574:	20000e34 	.word	0x20000e34
 8010578:	20000e30 	.word	0x20000e30
 801057c:	20001318 	.word	0x20001318
 8010580:	20001314 	.word	0x20001314
 8010584:	e000ed04 	.word	0xe000ed04

08010588 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010588:	b480      	push	{r7}
 801058a:	b083      	sub	sp, #12
 801058c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801058e:	4b05      	ldr	r3, [pc, #20]	; (80105a4 <xTaskGetTickCount+0x1c>)
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010594:	687b      	ldr	r3, [r7, #4]
}
 8010596:	4618      	mov	r0, r3
 8010598:	370c      	adds	r7, #12
 801059a:	46bd      	mov	sp, r7
 801059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a0:	4770      	bx	lr
 80105a2:	bf00      	nop
 80105a4:	20001308 	.word	0x20001308

080105a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80105a8:	b580      	push	{r7, lr}
 80105aa:	b086      	sub	sp, #24
 80105ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80105ae:	2300      	movs	r3, #0
 80105b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80105b2:	4b4f      	ldr	r3, [pc, #316]	; (80106f0 <xTaskIncrementTick+0x148>)
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	f040 808f 	bne.w	80106da <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80105bc:	4b4d      	ldr	r3, [pc, #308]	; (80106f4 <xTaskIncrementTick+0x14c>)
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	3301      	adds	r3, #1
 80105c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80105c4:	4a4b      	ldr	r2, [pc, #300]	; (80106f4 <xTaskIncrementTick+0x14c>)
 80105c6:	693b      	ldr	r3, [r7, #16]
 80105c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80105ca:	693b      	ldr	r3, [r7, #16]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d120      	bne.n	8010612 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80105d0:	4b49      	ldr	r3, [pc, #292]	; (80106f8 <xTaskIncrementTick+0x150>)
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d00a      	beq.n	80105f0 <xTaskIncrementTick+0x48>
	__asm volatile
 80105da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105de:	f383 8811 	msr	BASEPRI, r3
 80105e2:	f3bf 8f6f 	isb	sy
 80105e6:	f3bf 8f4f 	dsb	sy
 80105ea:	603b      	str	r3, [r7, #0]
}
 80105ec:	bf00      	nop
 80105ee:	e7fe      	b.n	80105ee <xTaskIncrementTick+0x46>
 80105f0:	4b41      	ldr	r3, [pc, #260]	; (80106f8 <xTaskIncrementTick+0x150>)
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	60fb      	str	r3, [r7, #12]
 80105f6:	4b41      	ldr	r3, [pc, #260]	; (80106fc <xTaskIncrementTick+0x154>)
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	4a3f      	ldr	r2, [pc, #252]	; (80106f8 <xTaskIncrementTick+0x150>)
 80105fc:	6013      	str	r3, [r2, #0]
 80105fe:	4a3f      	ldr	r2, [pc, #252]	; (80106fc <xTaskIncrementTick+0x154>)
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	6013      	str	r3, [r2, #0]
 8010604:	4b3e      	ldr	r3, [pc, #248]	; (8010700 <xTaskIncrementTick+0x158>)
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	3301      	adds	r3, #1
 801060a:	4a3d      	ldr	r2, [pc, #244]	; (8010700 <xTaskIncrementTick+0x158>)
 801060c:	6013      	str	r3, [r2, #0]
 801060e:	f000 fadb 	bl	8010bc8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010612:	4b3c      	ldr	r3, [pc, #240]	; (8010704 <xTaskIncrementTick+0x15c>)
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	693a      	ldr	r2, [r7, #16]
 8010618:	429a      	cmp	r2, r3
 801061a:	d349      	bcc.n	80106b0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801061c:	4b36      	ldr	r3, [pc, #216]	; (80106f8 <xTaskIncrementTick+0x150>)
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	2b00      	cmp	r3, #0
 8010624:	d104      	bne.n	8010630 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010626:	4b37      	ldr	r3, [pc, #220]	; (8010704 <xTaskIncrementTick+0x15c>)
 8010628:	f04f 32ff 	mov.w	r2, #4294967295
 801062c:	601a      	str	r2, [r3, #0]
					break;
 801062e:	e03f      	b.n	80106b0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010630:	4b31      	ldr	r3, [pc, #196]	; (80106f8 <xTaskIncrementTick+0x150>)
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	68db      	ldr	r3, [r3, #12]
 8010636:	68db      	ldr	r3, [r3, #12]
 8010638:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801063a:	68bb      	ldr	r3, [r7, #8]
 801063c:	685b      	ldr	r3, [r3, #4]
 801063e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010640:	693a      	ldr	r2, [r7, #16]
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	429a      	cmp	r2, r3
 8010646:	d203      	bcs.n	8010650 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010648:	4a2e      	ldr	r2, [pc, #184]	; (8010704 <xTaskIncrementTick+0x15c>)
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801064e:	e02f      	b.n	80106b0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010650:	68bb      	ldr	r3, [r7, #8]
 8010652:	3304      	adds	r3, #4
 8010654:	4618      	mov	r0, r3
 8010656:	f7fe fe11 	bl	800f27c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801065a:	68bb      	ldr	r3, [r7, #8]
 801065c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801065e:	2b00      	cmp	r3, #0
 8010660:	d004      	beq.n	801066c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010662:	68bb      	ldr	r3, [r7, #8]
 8010664:	3318      	adds	r3, #24
 8010666:	4618      	mov	r0, r3
 8010668:	f7fe fe08 	bl	800f27c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801066c:	68bb      	ldr	r3, [r7, #8]
 801066e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010670:	4b25      	ldr	r3, [pc, #148]	; (8010708 <xTaskIncrementTick+0x160>)
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	429a      	cmp	r2, r3
 8010676:	d903      	bls.n	8010680 <xTaskIncrementTick+0xd8>
 8010678:	68bb      	ldr	r3, [r7, #8]
 801067a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801067c:	4a22      	ldr	r2, [pc, #136]	; (8010708 <xTaskIncrementTick+0x160>)
 801067e:	6013      	str	r3, [r2, #0]
 8010680:	68bb      	ldr	r3, [r7, #8]
 8010682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010684:	4613      	mov	r3, r2
 8010686:	009b      	lsls	r3, r3, #2
 8010688:	4413      	add	r3, r2
 801068a:	009b      	lsls	r3, r3, #2
 801068c:	4a1f      	ldr	r2, [pc, #124]	; (801070c <xTaskIncrementTick+0x164>)
 801068e:	441a      	add	r2, r3
 8010690:	68bb      	ldr	r3, [r7, #8]
 8010692:	3304      	adds	r3, #4
 8010694:	4619      	mov	r1, r3
 8010696:	4610      	mov	r0, r2
 8010698:	f7fe fd93 	bl	800f1c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801069c:	68bb      	ldr	r3, [r7, #8]
 801069e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80106a0:	4b1b      	ldr	r3, [pc, #108]	; (8010710 <xTaskIncrementTick+0x168>)
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106a6:	429a      	cmp	r2, r3
 80106a8:	d3b8      	bcc.n	801061c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80106aa:	2301      	movs	r3, #1
 80106ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80106ae:	e7b5      	b.n	801061c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80106b0:	4b17      	ldr	r3, [pc, #92]	; (8010710 <xTaskIncrementTick+0x168>)
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80106b6:	4915      	ldr	r1, [pc, #84]	; (801070c <xTaskIncrementTick+0x164>)
 80106b8:	4613      	mov	r3, r2
 80106ba:	009b      	lsls	r3, r3, #2
 80106bc:	4413      	add	r3, r2
 80106be:	009b      	lsls	r3, r3, #2
 80106c0:	440b      	add	r3, r1
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	2b01      	cmp	r3, #1
 80106c6:	d901      	bls.n	80106cc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80106c8:	2301      	movs	r3, #1
 80106ca:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80106cc:	4b11      	ldr	r3, [pc, #68]	; (8010714 <xTaskIncrementTick+0x16c>)
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d007      	beq.n	80106e4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80106d4:	2301      	movs	r3, #1
 80106d6:	617b      	str	r3, [r7, #20]
 80106d8:	e004      	b.n	80106e4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80106da:	4b0f      	ldr	r3, [pc, #60]	; (8010718 <xTaskIncrementTick+0x170>)
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	3301      	adds	r3, #1
 80106e0:	4a0d      	ldr	r2, [pc, #52]	; (8010718 <xTaskIncrementTick+0x170>)
 80106e2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80106e4:	697b      	ldr	r3, [r7, #20]
}
 80106e6:	4618      	mov	r0, r3
 80106e8:	3718      	adds	r7, #24
 80106ea:	46bd      	mov	sp, r7
 80106ec:	bd80      	pop	{r7, pc}
 80106ee:	bf00      	nop
 80106f0:	2000132c 	.word	0x2000132c
 80106f4:	20001308 	.word	0x20001308
 80106f8:	200012bc 	.word	0x200012bc
 80106fc:	200012c0 	.word	0x200012c0
 8010700:	2000131c 	.word	0x2000131c
 8010704:	20001324 	.word	0x20001324
 8010708:	2000130c 	.word	0x2000130c
 801070c:	20000e34 	.word	0x20000e34
 8010710:	20000e30 	.word	0x20000e30
 8010714:	20001318 	.word	0x20001318
 8010718:	20001314 	.word	0x20001314

0801071c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801071c:	b480      	push	{r7}
 801071e:	b085      	sub	sp, #20
 8010720:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010722:	4b2a      	ldr	r3, [pc, #168]	; (80107cc <vTaskSwitchContext+0xb0>)
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d003      	beq.n	8010732 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801072a:	4b29      	ldr	r3, [pc, #164]	; (80107d0 <vTaskSwitchContext+0xb4>)
 801072c:	2201      	movs	r2, #1
 801072e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010730:	e046      	b.n	80107c0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8010732:	4b27      	ldr	r3, [pc, #156]	; (80107d0 <vTaskSwitchContext+0xb4>)
 8010734:	2200      	movs	r2, #0
 8010736:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010738:	4b26      	ldr	r3, [pc, #152]	; (80107d4 <vTaskSwitchContext+0xb8>)
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	60fb      	str	r3, [r7, #12]
 801073e:	e010      	b.n	8010762 <vTaskSwitchContext+0x46>
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d10a      	bne.n	801075c <vTaskSwitchContext+0x40>
	__asm volatile
 8010746:	f04f 0350 	mov.w	r3, #80	; 0x50
 801074a:	f383 8811 	msr	BASEPRI, r3
 801074e:	f3bf 8f6f 	isb	sy
 8010752:	f3bf 8f4f 	dsb	sy
 8010756:	607b      	str	r3, [r7, #4]
}
 8010758:	bf00      	nop
 801075a:	e7fe      	b.n	801075a <vTaskSwitchContext+0x3e>
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	3b01      	subs	r3, #1
 8010760:	60fb      	str	r3, [r7, #12]
 8010762:	491d      	ldr	r1, [pc, #116]	; (80107d8 <vTaskSwitchContext+0xbc>)
 8010764:	68fa      	ldr	r2, [r7, #12]
 8010766:	4613      	mov	r3, r2
 8010768:	009b      	lsls	r3, r3, #2
 801076a:	4413      	add	r3, r2
 801076c:	009b      	lsls	r3, r3, #2
 801076e:	440b      	add	r3, r1
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d0e4      	beq.n	8010740 <vTaskSwitchContext+0x24>
 8010776:	68fa      	ldr	r2, [r7, #12]
 8010778:	4613      	mov	r3, r2
 801077a:	009b      	lsls	r3, r3, #2
 801077c:	4413      	add	r3, r2
 801077e:	009b      	lsls	r3, r3, #2
 8010780:	4a15      	ldr	r2, [pc, #84]	; (80107d8 <vTaskSwitchContext+0xbc>)
 8010782:	4413      	add	r3, r2
 8010784:	60bb      	str	r3, [r7, #8]
 8010786:	68bb      	ldr	r3, [r7, #8]
 8010788:	685b      	ldr	r3, [r3, #4]
 801078a:	685a      	ldr	r2, [r3, #4]
 801078c:	68bb      	ldr	r3, [r7, #8]
 801078e:	605a      	str	r2, [r3, #4]
 8010790:	68bb      	ldr	r3, [r7, #8]
 8010792:	685a      	ldr	r2, [r3, #4]
 8010794:	68bb      	ldr	r3, [r7, #8]
 8010796:	3308      	adds	r3, #8
 8010798:	429a      	cmp	r2, r3
 801079a:	d104      	bne.n	80107a6 <vTaskSwitchContext+0x8a>
 801079c:	68bb      	ldr	r3, [r7, #8]
 801079e:	685b      	ldr	r3, [r3, #4]
 80107a0:	685a      	ldr	r2, [r3, #4]
 80107a2:	68bb      	ldr	r3, [r7, #8]
 80107a4:	605a      	str	r2, [r3, #4]
 80107a6:	68bb      	ldr	r3, [r7, #8]
 80107a8:	685b      	ldr	r3, [r3, #4]
 80107aa:	68db      	ldr	r3, [r3, #12]
 80107ac:	4a0b      	ldr	r2, [pc, #44]	; (80107dc <vTaskSwitchContext+0xc0>)
 80107ae:	6013      	str	r3, [r2, #0]
 80107b0:	4a08      	ldr	r2, [pc, #32]	; (80107d4 <vTaskSwitchContext+0xb8>)
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80107b6:	4b09      	ldr	r3, [pc, #36]	; (80107dc <vTaskSwitchContext+0xc0>)
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	3354      	adds	r3, #84	; 0x54
 80107bc:	4a08      	ldr	r2, [pc, #32]	; (80107e0 <vTaskSwitchContext+0xc4>)
 80107be:	6013      	str	r3, [r2, #0]
}
 80107c0:	bf00      	nop
 80107c2:	3714      	adds	r7, #20
 80107c4:	46bd      	mov	sp, r7
 80107c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ca:	4770      	bx	lr
 80107cc:	2000132c 	.word	0x2000132c
 80107d0:	20001318 	.word	0x20001318
 80107d4:	2000130c 	.word	0x2000130c
 80107d8:	20000e34 	.word	0x20000e34
 80107dc:	20000e30 	.word	0x20000e30
 80107e0:	200000f0 	.word	0x200000f0

080107e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80107e4:	b580      	push	{r7, lr}
 80107e6:	b084      	sub	sp, #16
 80107e8:	af00      	add	r7, sp, #0
 80107ea:	6078      	str	r0, [r7, #4]
 80107ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d10a      	bne.n	801080a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80107f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107f8:	f383 8811 	msr	BASEPRI, r3
 80107fc:	f3bf 8f6f 	isb	sy
 8010800:	f3bf 8f4f 	dsb	sy
 8010804:	60fb      	str	r3, [r7, #12]
}
 8010806:	bf00      	nop
 8010808:	e7fe      	b.n	8010808 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801080a:	4b07      	ldr	r3, [pc, #28]	; (8010828 <vTaskPlaceOnEventList+0x44>)
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	3318      	adds	r3, #24
 8010810:	4619      	mov	r1, r3
 8010812:	6878      	ldr	r0, [r7, #4]
 8010814:	f7fe fcf9 	bl	800f20a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010818:	2101      	movs	r1, #1
 801081a:	6838      	ldr	r0, [r7, #0]
 801081c:	f000 fa90 	bl	8010d40 <prvAddCurrentTaskToDelayedList>
}
 8010820:	bf00      	nop
 8010822:	3710      	adds	r7, #16
 8010824:	46bd      	mov	sp, r7
 8010826:	bd80      	pop	{r7, pc}
 8010828:	20000e30 	.word	0x20000e30

0801082c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801082c:	b580      	push	{r7, lr}
 801082e:	b086      	sub	sp, #24
 8010830:	af00      	add	r7, sp, #0
 8010832:	60f8      	str	r0, [r7, #12]
 8010834:	60b9      	str	r1, [r7, #8]
 8010836:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	2b00      	cmp	r3, #0
 801083c:	d10a      	bne.n	8010854 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801083e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010842:	f383 8811 	msr	BASEPRI, r3
 8010846:	f3bf 8f6f 	isb	sy
 801084a:	f3bf 8f4f 	dsb	sy
 801084e:	617b      	str	r3, [r7, #20]
}
 8010850:	bf00      	nop
 8010852:	e7fe      	b.n	8010852 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010854:	4b0a      	ldr	r3, [pc, #40]	; (8010880 <vTaskPlaceOnEventListRestricted+0x54>)
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	3318      	adds	r3, #24
 801085a:	4619      	mov	r1, r3
 801085c:	68f8      	ldr	r0, [r7, #12]
 801085e:	f7fe fcb0 	bl	800f1c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	2b00      	cmp	r3, #0
 8010866:	d002      	beq.n	801086e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8010868:	f04f 33ff 	mov.w	r3, #4294967295
 801086c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801086e:	6879      	ldr	r1, [r7, #4]
 8010870:	68b8      	ldr	r0, [r7, #8]
 8010872:	f000 fa65 	bl	8010d40 <prvAddCurrentTaskToDelayedList>
	}
 8010876:	bf00      	nop
 8010878:	3718      	adds	r7, #24
 801087a:	46bd      	mov	sp, r7
 801087c:	bd80      	pop	{r7, pc}
 801087e:	bf00      	nop
 8010880:	20000e30 	.word	0x20000e30

08010884 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010884:	b580      	push	{r7, lr}
 8010886:	b086      	sub	sp, #24
 8010888:	af00      	add	r7, sp, #0
 801088a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	68db      	ldr	r3, [r3, #12]
 8010890:	68db      	ldr	r3, [r3, #12]
 8010892:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010894:	693b      	ldr	r3, [r7, #16]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d10a      	bne.n	80108b0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801089a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801089e:	f383 8811 	msr	BASEPRI, r3
 80108a2:	f3bf 8f6f 	isb	sy
 80108a6:	f3bf 8f4f 	dsb	sy
 80108aa:	60fb      	str	r3, [r7, #12]
}
 80108ac:	bf00      	nop
 80108ae:	e7fe      	b.n	80108ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80108b0:	693b      	ldr	r3, [r7, #16]
 80108b2:	3318      	adds	r3, #24
 80108b4:	4618      	mov	r0, r3
 80108b6:	f7fe fce1 	bl	800f27c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80108ba:	4b1e      	ldr	r3, [pc, #120]	; (8010934 <xTaskRemoveFromEventList+0xb0>)
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d11d      	bne.n	80108fe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80108c2:	693b      	ldr	r3, [r7, #16]
 80108c4:	3304      	adds	r3, #4
 80108c6:	4618      	mov	r0, r3
 80108c8:	f7fe fcd8 	bl	800f27c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80108cc:	693b      	ldr	r3, [r7, #16]
 80108ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108d0:	4b19      	ldr	r3, [pc, #100]	; (8010938 <xTaskRemoveFromEventList+0xb4>)
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	429a      	cmp	r2, r3
 80108d6:	d903      	bls.n	80108e0 <xTaskRemoveFromEventList+0x5c>
 80108d8:	693b      	ldr	r3, [r7, #16]
 80108da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108dc:	4a16      	ldr	r2, [pc, #88]	; (8010938 <xTaskRemoveFromEventList+0xb4>)
 80108de:	6013      	str	r3, [r2, #0]
 80108e0:	693b      	ldr	r3, [r7, #16]
 80108e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108e4:	4613      	mov	r3, r2
 80108e6:	009b      	lsls	r3, r3, #2
 80108e8:	4413      	add	r3, r2
 80108ea:	009b      	lsls	r3, r3, #2
 80108ec:	4a13      	ldr	r2, [pc, #76]	; (801093c <xTaskRemoveFromEventList+0xb8>)
 80108ee:	441a      	add	r2, r3
 80108f0:	693b      	ldr	r3, [r7, #16]
 80108f2:	3304      	adds	r3, #4
 80108f4:	4619      	mov	r1, r3
 80108f6:	4610      	mov	r0, r2
 80108f8:	f7fe fc63 	bl	800f1c2 <vListInsertEnd>
 80108fc:	e005      	b.n	801090a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80108fe:	693b      	ldr	r3, [r7, #16]
 8010900:	3318      	adds	r3, #24
 8010902:	4619      	mov	r1, r3
 8010904:	480e      	ldr	r0, [pc, #56]	; (8010940 <xTaskRemoveFromEventList+0xbc>)
 8010906:	f7fe fc5c 	bl	800f1c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801090a:	693b      	ldr	r3, [r7, #16]
 801090c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801090e:	4b0d      	ldr	r3, [pc, #52]	; (8010944 <xTaskRemoveFromEventList+0xc0>)
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010914:	429a      	cmp	r2, r3
 8010916:	d905      	bls.n	8010924 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010918:	2301      	movs	r3, #1
 801091a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801091c:	4b0a      	ldr	r3, [pc, #40]	; (8010948 <xTaskRemoveFromEventList+0xc4>)
 801091e:	2201      	movs	r2, #1
 8010920:	601a      	str	r2, [r3, #0]
 8010922:	e001      	b.n	8010928 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8010924:	2300      	movs	r3, #0
 8010926:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010928:	697b      	ldr	r3, [r7, #20]
}
 801092a:	4618      	mov	r0, r3
 801092c:	3718      	adds	r7, #24
 801092e:	46bd      	mov	sp, r7
 8010930:	bd80      	pop	{r7, pc}
 8010932:	bf00      	nop
 8010934:	2000132c 	.word	0x2000132c
 8010938:	2000130c 	.word	0x2000130c
 801093c:	20000e34 	.word	0x20000e34
 8010940:	200012c4 	.word	0x200012c4
 8010944:	20000e30 	.word	0x20000e30
 8010948:	20001318 	.word	0x20001318

0801094c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801094c:	b480      	push	{r7}
 801094e:	b083      	sub	sp, #12
 8010950:	af00      	add	r7, sp, #0
 8010952:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010954:	4b06      	ldr	r3, [pc, #24]	; (8010970 <vTaskInternalSetTimeOutState+0x24>)
 8010956:	681a      	ldr	r2, [r3, #0]
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801095c:	4b05      	ldr	r3, [pc, #20]	; (8010974 <vTaskInternalSetTimeOutState+0x28>)
 801095e:	681a      	ldr	r2, [r3, #0]
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	605a      	str	r2, [r3, #4]
}
 8010964:	bf00      	nop
 8010966:	370c      	adds	r7, #12
 8010968:	46bd      	mov	sp, r7
 801096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801096e:	4770      	bx	lr
 8010970:	2000131c 	.word	0x2000131c
 8010974:	20001308 	.word	0x20001308

08010978 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010978:	b580      	push	{r7, lr}
 801097a:	b088      	sub	sp, #32
 801097c:	af00      	add	r7, sp, #0
 801097e:	6078      	str	r0, [r7, #4]
 8010980:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d10a      	bne.n	801099e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8010988:	f04f 0350 	mov.w	r3, #80	; 0x50
 801098c:	f383 8811 	msr	BASEPRI, r3
 8010990:	f3bf 8f6f 	isb	sy
 8010994:	f3bf 8f4f 	dsb	sy
 8010998:	613b      	str	r3, [r7, #16]
}
 801099a:	bf00      	nop
 801099c:	e7fe      	b.n	801099c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801099e:	683b      	ldr	r3, [r7, #0]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d10a      	bne.n	80109ba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80109a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109a8:	f383 8811 	msr	BASEPRI, r3
 80109ac:	f3bf 8f6f 	isb	sy
 80109b0:	f3bf 8f4f 	dsb	sy
 80109b4:	60fb      	str	r3, [r7, #12]
}
 80109b6:	bf00      	nop
 80109b8:	e7fe      	b.n	80109b8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80109ba:	f000 fe93 	bl	80116e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80109be:	4b1d      	ldr	r3, [pc, #116]	; (8010a34 <xTaskCheckForTimeOut+0xbc>)
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	685b      	ldr	r3, [r3, #4]
 80109c8:	69ba      	ldr	r2, [r7, #24]
 80109ca:	1ad3      	subs	r3, r2, r3
 80109cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80109ce:	683b      	ldr	r3, [r7, #0]
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109d6:	d102      	bne.n	80109de <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80109d8:	2300      	movs	r3, #0
 80109da:	61fb      	str	r3, [r7, #28]
 80109dc:	e023      	b.n	8010a26 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	681a      	ldr	r2, [r3, #0]
 80109e2:	4b15      	ldr	r3, [pc, #84]	; (8010a38 <xTaskCheckForTimeOut+0xc0>)
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	429a      	cmp	r2, r3
 80109e8:	d007      	beq.n	80109fa <xTaskCheckForTimeOut+0x82>
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	685b      	ldr	r3, [r3, #4]
 80109ee:	69ba      	ldr	r2, [r7, #24]
 80109f0:	429a      	cmp	r2, r3
 80109f2:	d302      	bcc.n	80109fa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80109f4:	2301      	movs	r3, #1
 80109f6:	61fb      	str	r3, [r7, #28]
 80109f8:	e015      	b.n	8010a26 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80109fa:	683b      	ldr	r3, [r7, #0]
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	697a      	ldr	r2, [r7, #20]
 8010a00:	429a      	cmp	r2, r3
 8010a02:	d20b      	bcs.n	8010a1c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010a04:	683b      	ldr	r3, [r7, #0]
 8010a06:	681a      	ldr	r2, [r3, #0]
 8010a08:	697b      	ldr	r3, [r7, #20]
 8010a0a:	1ad2      	subs	r2, r2, r3
 8010a0c:	683b      	ldr	r3, [r7, #0]
 8010a0e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010a10:	6878      	ldr	r0, [r7, #4]
 8010a12:	f7ff ff9b 	bl	801094c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010a16:	2300      	movs	r3, #0
 8010a18:	61fb      	str	r3, [r7, #28]
 8010a1a:	e004      	b.n	8010a26 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8010a1c:	683b      	ldr	r3, [r7, #0]
 8010a1e:	2200      	movs	r2, #0
 8010a20:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010a22:	2301      	movs	r3, #1
 8010a24:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010a26:	f000 fe8d 	bl	8011744 <vPortExitCritical>

	return xReturn;
 8010a2a:	69fb      	ldr	r3, [r7, #28]
}
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	3720      	adds	r7, #32
 8010a30:	46bd      	mov	sp, r7
 8010a32:	bd80      	pop	{r7, pc}
 8010a34:	20001308 	.word	0x20001308
 8010a38:	2000131c 	.word	0x2000131c

08010a3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010a3c:	b480      	push	{r7}
 8010a3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010a40:	4b03      	ldr	r3, [pc, #12]	; (8010a50 <vTaskMissedYield+0x14>)
 8010a42:	2201      	movs	r2, #1
 8010a44:	601a      	str	r2, [r3, #0]
}
 8010a46:	bf00      	nop
 8010a48:	46bd      	mov	sp, r7
 8010a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a4e:	4770      	bx	lr
 8010a50:	20001318 	.word	0x20001318

08010a54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b082      	sub	sp, #8
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010a5c:	f000 f852 	bl	8010b04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010a60:	4b06      	ldr	r3, [pc, #24]	; (8010a7c <prvIdleTask+0x28>)
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	2b01      	cmp	r3, #1
 8010a66:	d9f9      	bls.n	8010a5c <prvIdleTask+0x8>
			{
				taskYIELD();
 8010a68:	4b05      	ldr	r3, [pc, #20]	; (8010a80 <prvIdleTask+0x2c>)
 8010a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a6e:	601a      	str	r2, [r3, #0]
 8010a70:	f3bf 8f4f 	dsb	sy
 8010a74:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010a78:	e7f0      	b.n	8010a5c <prvIdleTask+0x8>
 8010a7a:	bf00      	nop
 8010a7c:	20000e34 	.word	0x20000e34
 8010a80:	e000ed04 	.word	0xe000ed04

08010a84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010a84:	b580      	push	{r7, lr}
 8010a86:	b082      	sub	sp, #8
 8010a88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	607b      	str	r3, [r7, #4]
 8010a8e:	e00c      	b.n	8010aaa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010a90:	687a      	ldr	r2, [r7, #4]
 8010a92:	4613      	mov	r3, r2
 8010a94:	009b      	lsls	r3, r3, #2
 8010a96:	4413      	add	r3, r2
 8010a98:	009b      	lsls	r3, r3, #2
 8010a9a:	4a12      	ldr	r2, [pc, #72]	; (8010ae4 <prvInitialiseTaskLists+0x60>)
 8010a9c:	4413      	add	r3, r2
 8010a9e:	4618      	mov	r0, r3
 8010aa0:	f7fe fb62 	bl	800f168 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	3301      	adds	r3, #1
 8010aa8:	607b      	str	r3, [r7, #4]
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	2b37      	cmp	r3, #55	; 0x37
 8010aae:	d9ef      	bls.n	8010a90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010ab0:	480d      	ldr	r0, [pc, #52]	; (8010ae8 <prvInitialiseTaskLists+0x64>)
 8010ab2:	f7fe fb59 	bl	800f168 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010ab6:	480d      	ldr	r0, [pc, #52]	; (8010aec <prvInitialiseTaskLists+0x68>)
 8010ab8:	f7fe fb56 	bl	800f168 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010abc:	480c      	ldr	r0, [pc, #48]	; (8010af0 <prvInitialiseTaskLists+0x6c>)
 8010abe:	f7fe fb53 	bl	800f168 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010ac2:	480c      	ldr	r0, [pc, #48]	; (8010af4 <prvInitialiseTaskLists+0x70>)
 8010ac4:	f7fe fb50 	bl	800f168 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010ac8:	480b      	ldr	r0, [pc, #44]	; (8010af8 <prvInitialiseTaskLists+0x74>)
 8010aca:	f7fe fb4d 	bl	800f168 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010ace:	4b0b      	ldr	r3, [pc, #44]	; (8010afc <prvInitialiseTaskLists+0x78>)
 8010ad0:	4a05      	ldr	r2, [pc, #20]	; (8010ae8 <prvInitialiseTaskLists+0x64>)
 8010ad2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010ad4:	4b0a      	ldr	r3, [pc, #40]	; (8010b00 <prvInitialiseTaskLists+0x7c>)
 8010ad6:	4a05      	ldr	r2, [pc, #20]	; (8010aec <prvInitialiseTaskLists+0x68>)
 8010ad8:	601a      	str	r2, [r3, #0]
}
 8010ada:	bf00      	nop
 8010adc:	3708      	adds	r7, #8
 8010ade:	46bd      	mov	sp, r7
 8010ae0:	bd80      	pop	{r7, pc}
 8010ae2:	bf00      	nop
 8010ae4:	20000e34 	.word	0x20000e34
 8010ae8:	20001294 	.word	0x20001294
 8010aec:	200012a8 	.word	0x200012a8
 8010af0:	200012c4 	.word	0x200012c4
 8010af4:	200012d8 	.word	0x200012d8
 8010af8:	200012f0 	.word	0x200012f0
 8010afc:	200012bc 	.word	0x200012bc
 8010b00:	200012c0 	.word	0x200012c0

08010b04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010b04:	b580      	push	{r7, lr}
 8010b06:	b082      	sub	sp, #8
 8010b08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010b0a:	e019      	b.n	8010b40 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010b0c:	f000 fdea 	bl	80116e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010b10:	4b10      	ldr	r3, [pc, #64]	; (8010b54 <prvCheckTasksWaitingTermination+0x50>)
 8010b12:	68db      	ldr	r3, [r3, #12]
 8010b14:	68db      	ldr	r3, [r3, #12]
 8010b16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	3304      	adds	r3, #4
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	f7fe fbad 	bl	800f27c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010b22:	4b0d      	ldr	r3, [pc, #52]	; (8010b58 <prvCheckTasksWaitingTermination+0x54>)
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	3b01      	subs	r3, #1
 8010b28:	4a0b      	ldr	r2, [pc, #44]	; (8010b58 <prvCheckTasksWaitingTermination+0x54>)
 8010b2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010b2c:	4b0b      	ldr	r3, [pc, #44]	; (8010b5c <prvCheckTasksWaitingTermination+0x58>)
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	3b01      	subs	r3, #1
 8010b32:	4a0a      	ldr	r2, [pc, #40]	; (8010b5c <prvCheckTasksWaitingTermination+0x58>)
 8010b34:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010b36:	f000 fe05 	bl	8011744 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010b3a:	6878      	ldr	r0, [r7, #4]
 8010b3c:	f000 f810 	bl	8010b60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010b40:	4b06      	ldr	r3, [pc, #24]	; (8010b5c <prvCheckTasksWaitingTermination+0x58>)
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d1e1      	bne.n	8010b0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010b48:	bf00      	nop
 8010b4a:	bf00      	nop
 8010b4c:	3708      	adds	r7, #8
 8010b4e:	46bd      	mov	sp, r7
 8010b50:	bd80      	pop	{r7, pc}
 8010b52:	bf00      	nop
 8010b54:	200012d8 	.word	0x200012d8
 8010b58:	20001304 	.word	0x20001304
 8010b5c:	200012ec 	.word	0x200012ec

08010b60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010b60:	b580      	push	{r7, lr}
 8010b62:	b084      	sub	sp, #16
 8010b64:	af00      	add	r7, sp, #0
 8010b66:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	3354      	adds	r3, #84	; 0x54
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	f003 f9d5 	bl	8013f1c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d108      	bne.n	8010b8e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b80:	4618      	mov	r0, r3
 8010b82:	f000 ff9d 	bl	8011ac0 <vPortFree>
				vPortFree( pxTCB );
 8010b86:	6878      	ldr	r0, [r7, #4]
 8010b88:	f000 ff9a 	bl	8011ac0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010b8c:	e018      	b.n	8010bc0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8010b94:	2b01      	cmp	r3, #1
 8010b96:	d103      	bne.n	8010ba0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8010b98:	6878      	ldr	r0, [r7, #4]
 8010b9a:	f000 ff91 	bl	8011ac0 <vPortFree>
	}
 8010b9e:	e00f      	b.n	8010bc0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8010ba6:	2b02      	cmp	r3, #2
 8010ba8:	d00a      	beq.n	8010bc0 <prvDeleteTCB+0x60>
	__asm volatile
 8010baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bae:	f383 8811 	msr	BASEPRI, r3
 8010bb2:	f3bf 8f6f 	isb	sy
 8010bb6:	f3bf 8f4f 	dsb	sy
 8010bba:	60fb      	str	r3, [r7, #12]
}
 8010bbc:	bf00      	nop
 8010bbe:	e7fe      	b.n	8010bbe <prvDeleteTCB+0x5e>
	}
 8010bc0:	bf00      	nop
 8010bc2:	3710      	adds	r7, #16
 8010bc4:	46bd      	mov	sp, r7
 8010bc6:	bd80      	pop	{r7, pc}

08010bc8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010bc8:	b480      	push	{r7}
 8010bca:	b083      	sub	sp, #12
 8010bcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010bce:	4b0c      	ldr	r3, [pc, #48]	; (8010c00 <prvResetNextTaskUnblockTime+0x38>)
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d104      	bne.n	8010be2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010bd8:	4b0a      	ldr	r3, [pc, #40]	; (8010c04 <prvResetNextTaskUnblockTime+0x3c>)
 8010bda:	f04f 32ff 	mov.w	r2, #4294967295
 8010bde:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010be0:	e008      	b.n	8010bf4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010be2:	4b07      	ldr	r3, [pc, #28]	; (8010c00 <prvResetNextTaskUnblockTime+0x38>)
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	68db      	ldr	r3, [r3, #12]
 8010be8:	68db      	ldr	r3, [r3, #12]
 8010bea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	685b      	ldr	r3, [r3, #4]
 8010bf0:	4a04      	ldr	r2, [pc, #16]	; (8010c04 <prvResetNextTaskUnblockTime+0x3c>)
 8010bf2:	6013      	str	r3, [r2, #0]
}
 8010bf4:	bf00      	nop
 8010bf6:	370c      	adds	r7, #12
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bfe:	4770      	bx	lr
 8010c00:	200012bc 	.word	0x200012bc
 8010c04:	20001324 	.word	0x20001324

08010c08 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8010c08:	b480      	push	{r7}
 8010c0a:	b083      	sub	sp, #12
 8010c0c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8010c0e:	4b05      	ldr	r3, [pc, #20]	; (8010c24 <xTaskGetCurrentTaskHandle+0x1c>)
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	607b      	str	r3, [r7, #4]

		return xReturn;
 8010c14:	687b      	ldr	r3, [r7, #4]
	}
 8010c16:	4618      	mov	r0, r3
 8010c18:	370c      	adds	r7, #12
 8010c1a:	46bd      	mov	sp, r7
 8010c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c20:	4770      	bx	lr
 8010c22:	bf00      	nop
 8010c24:	20000e30 	.word	0x20000e30

08010c28 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010c28:	b480      	push	{r7}
 8010c2a:	b083      	sub	sp, #12
 8010c2c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010c2e:	4b0b      	ldr	r3, [pc, #44]	; (8010c5c <xTaskGetSchedulerState+0x34>)
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d102      	bne.n	8010c3c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010c36:	2301      	movs	r3, #1
 8010c38:	607b      	str	r3, [r7, #4]
 8010c3a:	e008      	b.n	8010c4e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010c3c:	4b08      	ldr	r3, [pc, #32]	; (8010c60 <xTaskGetSchedulerState+0x38>)
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d102      	bne.n	8010c4a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010c44:	2302      	movs	r3, #2
 8010c46:	607b      	str	r3, [r7, #4]
 8010c48:	e001      	b.n	8010c4e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010c4e:	687b      	ldr	r3, [r7, #4]
	}
 8010c50:	4618      	mov	r0, r3
 8010c52:	370c      	adds	r7, #12
 8010c54:	46bd      	mov	sp, r7
 8010c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c5a:	4770      	bx	lr
 8010c5c:	20001310 	.word	0x20001310
 8010c60:	2000132c 	.word	0x2000132c

08010c64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010c64:	b580      	push	{r7, lr}
 8010c66:	b086      	sub	sp, #24
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010c70:	2300      	movs	r3, #0
 8010c72:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d056      	beq.n	8010d28 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010c7a:	4b2e      	ldr	r3, [pc, #184]	; (8010d34 <xTaskPriorityDisinherit+0xd0>)
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	693a      	ldr	r2, [r7, #16]
 8010c80:	429a      	cmp	r2, r3
 8010c82:	d00a      	beq.n	8010c9a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8010c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c88:	f383 8811 	msr	BASEPRI, r3
 8010c8c:	f3bf 8f6f 	isb	sy
 8010c90:	f3bf 8f4f 	dsb	sy
 8010c94:	60fb      	str	r3, [r7, #12]
}
 8010c96:	bf00      	nop
 8010c98:	e7fe      	b.n	8010c98 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8010c9a:	693b      	ldr	r3, [r7, #16]
 8010c9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d10a      	bne.n	8010cb8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8010ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ca6:	f383 8811 	msr	BASEPRI, r3
 8010caa:	f3bf 8f6f 	isb	sy
 8010cae:	f3bf 8f4f 	dsb	sy
 8010cb2:	60bb      	str	r3, [r7, #8]
}
 8010cb4:	bf00      	nop
 8010cb6:	e7fe      	b.n	8010cb6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8010cb8:	693b      	ldr	r3, [r7, #16]
 8010cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010cbc:	1e5a      	subs	r2, r3, #1
 8010cbe:	693b      	ldr	r3, [r7, #16]
 8010cc0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010cc2:	693b      	ldr	r3, [r7, #16]
 8010cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010cc6:	693b      	ldr	r3, [r7, #16]
 8010cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010cca:	429a      	cmp	r2, r3
 8010ccc:	d02c      	beq.n	8010d28 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010cce:	693b      	ldr	r3, [r7, #16]
 8010cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d128      	bne.n	8010d28 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010cd6:	693b      	ldr	r3, [r7, #16]
 8010cd8:	3304      	adds	r3, #4
 8010cda:	4618      	mov	r0, r3
 8010cdc:	f7fe face 	bl	800f27c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010ce0:	693b      	ldr	r3, [r7, #16]
 8010ce2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010ce4:	693b      	ldr	r3, [r7, #16]
 8010ce6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010ce8:	693b      	ldr	r3, [r7, #16]
 8010cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010cf0:	693b      	ldr	r3, [r7, #16]
 8010cf2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010cf4:	693b      	ldr	r3, [r7, #16]
 8010cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010cf8:	4b0f      	ldr	r3, [pc, #60]	; (8010d38 <xTaskPriorityDisinherit+0xd4>)
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	429a      	cmp	r2, r3
 8010cfe:	d903      	bls.n	8010d08 <xTaskPriorityDisinherit+0xa4>
 8010d00:	693b      	ldr	r3, [r7, #16]
 8010d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d04:	4a0c      	ldr	r2, [pc, #48]	; (8010d38 <xTaskPriorityDisinherit+0xd4>)
 8010d06:	6013      	str	r3, [r2, #0]
 8010d08:	693b      	ldr	r3, [r7, #16]
 8010d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d0c:	4613      	mov	r3, r2
 8010d0e:	009b      	lsls	r3, r3, #2
 8010d10:	4413      	add	r3, r2
 8010d12:	009b      	lsls	r3, r3, #2
 8010d14:	4a09      	ldr	r2, [pc, #36]	; (8010d3c <xTaskPriorityDisinherit+0xd8>)
 8010d16:	441a      	add	r2, r3
 8010d18:	693b      	ldr	r3, [r7, #16]
 8010d1a:	3304      	adds	r3, #4
 8010d1c:	4619      	mov	r1, r3
 8010d1e:	4610      	mov	r0, r2
 8010d20:	f7fe fa4f 	bl	800f1c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010d24:	2301      	movs	r3, #1
 8010d26:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010d28:	697b      	ldr	r3, [r7, #20]
	}
 8010d2a:	4618      	mov	r0, r3
 8010d2c:	3718      	adds	r7, #24
 8010d2e:	46bd      	mov	sp, r7
 8010d30:	bd80      	pop	{r7, pc}
 8010d32:	bf00      	nop
 8010d34:	20000e30 	.word	0x20000e30
 8010d38:	2000130c 	.word	0x2000130c
 8010d3c:	20000e34 	.word	0x20000e34

08010d40 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010d40:	b580      	push	{r7, lr}
 8010d42:	b084      	sub	sp, #16
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	6078      	str	r0, [r7, #4]
 8010d48:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010d4a:	4b21      	ldr	r3, [pc, #132]	; (8010dd0 <prvAddCurrentTaskToDelayedList+0x90>)
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010d50:	4b20      	ldr	r3, [pc, #128]	; (8010dd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	3304      	adds	r3, #4
 8010d56:	4618      	mov	r0, r3
 8010d58:	f7fe fa90 	bl	800f27c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d62:	d10a      	bne.n	8010d7a <prvAddCurrentTaskToDelayedList+0x3a>
 8010d64:	683b      	ldr	r3, [r7, #0]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d007      	beq.n	8010d7a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010d6a:	4b1a      	ldr	r3, [pc, #104]	; (8010dd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	3304      	adds	r3, #4
 8010d70:	4619      	mov	r1, r3
 8010d72:	4819      	ldr	r0, [pc, #100]	; (8010dd8 <prvAddCurrentTaskToDelayedList+0x98>)
 8010d74:	f7fe fa25 	bl	800f1c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010d78:	e026      	b.n	8010dc8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010d7a:	68fa      	ldr	r2, [r7, #12]
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	4413      	add	r3, r2
 8010d80:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010d82:	4b14      	ldr	r3, [pc, #80]	; (8010dd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	68ba      	ldr	r2, [r7, #8]
 8010d88:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010d8a:	68ba      	ldr	r2, [r7, #8]
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	429a      	cmp	r2, r3
 8010d90:	d209      	bcs.n	8010da6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010d92:	4b12      	ldr	r3, [pc, #72]	; (8010ddc <prvAddCurrentTaskToDelayedList+0x9c>)
 8010d94:	681a      	ldr	r2, [r3, #0]
 8010d96:	4b0f      	ldr	r3, [pc, #60]	; (8010dd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	3304      	adds	r3, #4
 8010d9c:	4619      	mov	r1, r3
 8010d9e:	4610      	mov	r0, r2
 8010da0:	f7fe fa33 	bl	800f20a <vListInsert>
}
 8010da4:	e010      	b.n	8010dc8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010da6:	4b0e      	ldr	r3, [pc, #56]	; (8010de0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010da8:	681a      	ldr	r2, [r3, #0]
 8010daa:	4b0a      	ldr	r3, [pc, #40]	; (8010dd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	3304      	adds	r3, #4
 8010db0:	4619      	mov	r1, r3
 8010db2:	4610      	mov	r0, r2
 8010db4:	f7fe fa29 	bl	800f20a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010db8:	4b0a      	ldr	r3, [pc, #40]	; (8010de4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	68ba      	ldr	r2, [r7, #8]
 8010dbe:	429a      	cmp	r2, r3
 8010dc0:	d202      	bcs.n	8010dc8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010dc2:	4a08      	ldr	r2, [pc, #32]	; (8010de4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010dc4:	68bb      	ldr	r3, [r7, #8]
 8010dc6:	6013      	str	r3, [r2, #0]
}
 8010dc8:	bf00      	nop
 8010dca:	3710      	adds	r7, #16
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	bd80      	pop	{r7, pc}
 8010dd0:	20001308 	.word	0x20001308
 8010dd4:	20000e30 	.word	0x20000e30
 8010dd8:	200012f0 	.word	0x200012f0
 8010ddc:	200012c0 	.word	0x200012c0
 8010de0:	200012bc 	.word	0x200012bc
 8010de4:	20001324 	.word	0x20001324

08010de8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010de8:	b580      	push	{r7, lr}
 8010dea:	b08a      	sub	sp, #40	; 0x28
 8010dec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010dee:	2300      	movs	r3, #0
 8010df0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010df2:	f000 fb07 	bl	8011404 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010df6:	4b1c      	ldr	r3, [pc, #112]	; (8010e68 <xTimerCreateTimerTask+0x80>)
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d021      	beq.n	8010e42 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010dfe:	2300      	movs	r3, #0
 8010e00:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010e02:	2300      	movs	r3, #0
 8010e04:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010e06:	1d3a      	adds	r2, r7, #4
 8010e08:	f107 0108 	add.w	r1, r7, #8
 8010e0c:	f107 030c 	add.w	r3, r7, #12
 8010e10:	4618      	mov	r0, r3
 8010e12:	f7fe f98f 	bl	800f134 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010e16:	6879      	ldr	r1, [r7, #4]
 8010e18:	68bb      	ldr	r3, [r7, #8]
 8010e1a:	68fa      	ldr	r2, [r7, #12]
 8010e1c:	9202      	str	r2, [sp, #8]
 8010e1e:	9301      	str	r3, [sp, #4]
 8010e20:	2302      	movs	r3, #2
 8010e22:	9300      	str	r3, [sp, #0]
 8010e24:	2300      	movs	r3, #0
 8010e26:	460a      	mov	r2, r1
 8010e28:	4910      	ldr	r1, [pc, #64]	; (8010e6c <xTimerCreateTimerTask+0x84>)
 8010e2a:	4811      	ldr	r0, [pc, #68]	; (8010e70 <xTimerCreateTimerTask+0x88>)
 8010e2c:	f7fe ff3c 	bl	800fca8 <xTaskCreateStatic>
 8010e30:	4603      	mov	r3, r0
 8010e32:	4a10      	ldr	r2, [pc, #64]	; (8010e74 <xTimerCreateTimerTask+0x8c>)
 8010e34:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010e36:	4b0f      	ldr	r3, [pc, #60]	; (8010e74 <xTimerCreateTimerTask+0x8c>)
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d001      	beq.n	8010e42 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010e3e:	2301      	movs	r3, #1
 8010e40:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010e42:	697b      	ldr	r3, [r7, #20]
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d10a      	bne.n	8010e5e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8010e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e4c:	f383 8811 	msr	BASEPRI, r3
 8010e50:	f3bf 8f6f 	isb	sy
 8010e54:	f3bf 8f4f 	dsb	sy
 8010e58:	613b      	str	r3, [r7, #16]
}
 8010e5a:	bf00      	nop
 8010e5c:	e7fe      	b.n	8010e5c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8010e5e:	697b      	ldr	r3, [r7, #20]
}
 8010e60:	4618      	mov	r0, r3
 8010e62:	3718      	adds	r7, #24
 8010e64:	46bd      	mov	sp, r7
 8010e66:	bd80      	pop	{r7, pc}
 8010e68:	20001360 	.word	0x20001360
 8010e6c:	08019f10 	.word	0x08019f10
 8010e70:	08010fad 	.word	0x08010fad
 8010e74:	20001364 	.word	0x20001364

08010e78 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010e78:	b580      	push	{r7, lr}
 8010e7a:	b08a      	sub	sp, #40	; 0x28
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	60f8      	str	r0, [r7, #12]
 8010e80:	60b9      	str	r1, [r7, #8]
 8010e82:	607a      	str	r2, [r7, #4]
 8010e84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010e86:	2300      	movs	r3, #0
 8010e88:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d10a      	bne.n	8010ea6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8010e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e94:	f383 8811 	msr	BASEPRI, r3
 8010e98:	f3bf 8f6f 	isb	sy
 8010e9c:	f3bf 8f4f 	dsb	sy
 8010ea0:	623b      	str	r3, [r7, #32]
}
 8010ea2:	bf00      	nop
 8010ea4:	e7fe      	b.n	8010ea4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010ea6:	4b1a      	ldr	r3, [pc, #104]	; (8010f10 <xTimerGenericCommand+0x98>)
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d02a      	beq.n	8010f04 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010eae:	68bb      	ldr	r3, [r7, #8]
 8010eb0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010eba:	68bb      	ldr	r3, [r7, #8]
 8010ebc:	2b05      	cmp	r3, #5
 8010ebe:	dc18      	bgt.n	8010ef2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010ec0:	f7ff feb2 	bl	8010c28 <xTaskGetSchedulerState>
 8010ec4:	4603      	mov	r3, r0
 8010ec6:	2b02      	cmp	r3, #2
 8010ec8:	d109      	bne.n	8010ede <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010eca:	4b11      	ldr	r3, [pc, #68]	; (8010f10 <xTimerGenericCommand+0x98>)
 8010ecc:	6818      	ldr	r0, [r3, #0]
 8010ece:	f107 0110 	add.w	r1, r7, #16
 8010ed2:	2300      	movs	r3, #0
 8010ed4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ed6:	f7fe faff 	bl	800f4d8 <xQueueGenericSend>
 8010eda:	6278      	str	r0, [r7, #36]	; 0x24
 8010edc:	e012      	b.n	8010f04 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010ede:	4b0c      	ldr	r3, [pc, #48]	; (8010f10 <xTimerGenericCommand+0x98>)
 8010ee0:	6818      	ldr	r0, [r3, #0]
 8010ee2:	f107 0110 	add.w	r1, r7, #16
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	2200      	movs	r2, #0
 8010eea:	f7fe faf5 	bl	800f4d8 <xQueueGenericSend>
 8010eee:	6278      	str	r0, [r7, #36]	; 0x24
 8010ef0:	e008      	b.n	8010f04 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010ef2:	4b07      	ldr	r3, [pc, #28]	; (8010f10 <xTimerGenericCommand+0x98>)
 8010ef4:	6818      	ldr	r0, [r3, #0]
 8010ef6:	f107 0110 	add.w	r1, r7, #16
 8010efa:	2300      	movs	r3, #0
 8010efc:	683a      	ldr	r2, [r7, #0]
 8010efe:	f7fe fbe9 	bl	800f6d4 <xQueueGenericSendFromISR>
 8010f02:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010f06:	4618      	mov	r0, r3
 8010f08:	3728      	adds	r7, #40	; 0x28
 8010f0a:	46bd      	mov	sp, r7
 8010f0c:	bd80      	pop	{r7, pc}
 8010f0e:	bf00      	nop
 8010f10:	20001360 	.word	0x20001360

08010f14 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010f14:	b580      	push	{r7, lr}
 8010f16:	b088      	sub	sp, #32
 8010f18:	af02      	add	r7, sp, #8
 8010f1a:	6078      	str	r0, [r7, #4]
 8010f1c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010f1e:	4b22      	ldr	r3, [pc, #136]	; (8010fa8 <prvProcessExpiredTimer+0x94>)
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	68db      	ldr	r3, [r3, #12]
 8010f24:	68db      	ldr	r3, [r3, #12]
 8010f26:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010f28:	697b      	ldr	r3, [r7, #20]
 8010f2a:	3304      	adds	r3, #4
 8010f2c:	4618      	mov	r0, r3
 8010f2e:	f7fe f9a5 	bl	800f27c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010f32:	697b      	ldr	r3, [r7, #20]
 8010f34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010f38:	f003 0304 	and.w	r3, r3, #4
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d022      	beq.n	8010f86 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010f40:	697b      	ldr	r3, [r7, #20]
 8010f42:	699a      	ldr	r2, [r3, #24]
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	18d1      	adds	r1, r2, r3
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	683a      	ldr	r2, [r7, #0]
 8010f4c:	6978      	ldr	r0, [r7, #20]
 8010f4e:	f000 f8d1 	bl	80110f4 <prvInsertTimerInActiveList>
 8010f52:	4603      	mov	r3, r0
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d01f      	beq.n	8010f98 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010f58:	2300      	movs	r3, #0
 8010f5a:	9300      	str	r3, [sp, #0]
 8010f5c:	2300      	movs	r3, #0
 8010f5e:	687a      	ldr	r2, [r7, #4]
 8010f60:	2100      	movs	r1, #0
 8010f62:	6978      	ldr	r0, [r7, #20]
 8010f64:	f7ff ff88 	bl	8010e78 <xTimerGenericCommand>
 8010f68:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010f6a:	693b      	ldr	r3, [r7, #16]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d113      	bne.n	8010f98 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8010f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f74:	f383 8811 	msr	BASEPRI, r3
 8010f78:	f3bf 8f6f 	isb	sy
 8010f7c:	f3bf 8f4f 	dsb	sy
 8010f80:	60fb      	str	r3, [r7, #12]
}
 8010f82:	bf00      	nop
 8010f84:	e7fe      	b.n	8010f84 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010f86:	697b      	ldr	r3, [r7, #20]
 8010f88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010f8c:	f023 0301 	bic.w	r3, r3, #1
 8010f90:	b2da      	uxtb	r2, r3
 8010f92:	697b      	ldr	r3, [r7, #20]
 8010f94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010f98:	697b      	ldr	r3, [r7, #20]
 8010f9a:	6a1b      	ldr	r3, [r3, #32]
 8010f9c:	6978      	ldr	r0, [r7, #20]
 8010f9e:	4798      	blx	r3
}
 8010fa0:	bf00      	nop
 8010fa2:	3718      	adds	r7, #24
 8010fa4:	46bd      	mov	sp, r7
 8010fa6:	bd80      	pop	{r7, pc}
 8010fa8:	20001358 	.word	0x20001358

08010fac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010fac:	b580      	push	{r7, lr}
 8010fae:	b084      	sub	sp, #16
 8010fb0:	af00      	add	r7, sp, #0
 8010fb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010fb4:	f107 0308 	add.w	r3, r7, #8
 8010fb8:	4618      	mov	r0, r3
 8010fba:	f000 f857 	bl	801106c <prvGetNextExpireTime>
 8010fbe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010fc0:	68bb      	ldr	r3, [r7, #8]
 8010fc2:	4619      	mov	r1, r3
 8010fc4:	68f8      	ldr	r0, [r7, #12]
 8010fc6:	f000 f803 	bl	8010fd0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010fca:	f000 f8d5 	bl	8011178 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010fce:	e7f1      	b.n	8010fb4 <prvTimerTask+0x8>

08010fd0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010fd0:	b580      	push	{r7, lr}
 8010fd2:	b084      	sub	sp, #16
 8010fd4:	af00      	add	r7, sp, #0
 8010fd6:	6078      	str	r0, [r7, #4]
 8010fd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010fda:	f7ff fa29 	bl	8010430 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010fde:	f107 0308 	add.w	r3, r7, #8
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	f000 f866 	bl	80110b4 <prvSampleTimeNow>
 8010fe8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010fea:	68bb      	ldr	r3, [r7, #8]
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d130      	bne.n	8011052 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010ff0:	683b      	ldr	r3, [r7, #0]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d10a      	bne.n	801100c <prvProcessTimerOrBlockTask+0x3c>
 8010ff6:	687a      	ldr	r2, [r7, #4]
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	429a      	cmp	r2, r3
 8010ffc:	d806      	bhi.n	801100c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010ffe:	f7ff fa25 	bl	801044c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011002:	68f9      	ldr	r1, [r7, #12]
 8011004:	6878      	ldr	r0, [r7, #4]
 8011006:	f7ff ff85 	bl	8010f14 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801100a:	e024      	b.n	8011056 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801100c:	683b      	ldr	r3, [r7, #0]
 801100e:	2b00      	cmp	r3, #0
 8011010:	d008      	beq.n	8011024 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011012:	4b13      	ldr	r3, [pc, #76]	; (8011060 <prvProcessTimerOrBlockTask+0x90>)
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	2b00      	cmp	r3, #0
 801101a:	d101      	bne.n	8011020 <prvProcessTimerOrBlockTask+0x50>
 801101c:	2301      	movs	r3, #1
 801101e:	e000      	b.n	8011022 <prvProcessTimerOrBlockTask+0x52>
 8011020:	2300      	movs	r3, #0
 8011022:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011024:	4b0f      	ldr	r3, [pc, #60]	; (8011064 <prvProcessTimerOrBlockTask+0x94>)
 8011026:	6818      	ldr	r0, [r3, #0]
 8011028:	687a      	ldr	r2, [r7, #4]
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	1ad3      	subs	r3, r2, r3
 801102e:	683a      	ldr	r2, [r7, #0]
 8011030:	4619      	mov	r1, r3
 8011032:	f7fe fe05 	bl	800fc40 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011036:	f7ff fa09 	bl	801044c <xTaskResumeAll>
 801103a:	4603      	mov	r3, r0
 801103c:	2b00      	cmp	r3, #0
 801103e:	d10a      	bne.n	8011056 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011040:	4b09      	ldr	r3, [pc, #36]	; (8011068 <prvProcessTimerOrBlockTask+0x98>)
 8011042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011046:	601a      	str	r2, [r3, #0]
 8011048:	f3bf 8f4f 	dsb	sy
 801104c:	f3bf 8f6f 	isb	sy
}
 8011050:	e001      	b.n	8011056 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8011052:	f7ff f9fb 	bl	801044c <xTaskResumeAll>
}
 8011056:	bf00      	nop
 8011058:	3710      	adds	r7, #16
 801105a:	46bd      	mov	sp, r7
 801105c:	bd80      	pop	{r7, pc}
 801105e:	bf00      	nop
 8011060:	2000135c 	.word	0x2000135c
 8011064:	20001360 	.word	0x20001360
 8011068:	e000ed04 	.word	0xe000ed04

0801106c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801106c:	b480      	push	{r7}
 801106e:	b085      	sub	sp, #20
 8011070:	af00      	add	r7, sp, #0
 8011072:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011074:	4b0e      	ldr	r3, [pc, #56]	; (80110b0 <prvGetNextExpireTime+0x44>)
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	2b00      	cmp	r3, #0
 801107c:	d101      	bne.n	8011082 <prvGetNextExpireTime+0x16>
 801107e:	2201      	movs	r2, #1
 8011080:	e000      	b.n	8011084 <prvGetNextExpireTime+0x18>
 8011082:	2200      	movs	r2, #0
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	2b00      	cmp	r3, #0
 801108e:	d105      	bne.n	801109c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011090:	4b07      	ldr	r3, [pc, #28]	; (80110b0 <prvGetNextExpireTime+0x44>)
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	68db      	ldr	r3, [r3, #12]
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	60fb      	str	r3, [r7, #12]
 801109a:	e001      	b.n	80110a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801109c:	2300      	movs	r3, #0
 801109e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80110a0:	68fb      	ldr	r3, [r7, #12]
}
 80110a2:	4618      	mov	r0, r3
 80110a4:	3714      	adds	r7, #20
 80110a6:	46bd      	mov	sp, r7
 80110a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ac:	4770      	bx	lr
 80110ae:	bf00      	nop
 80110b0:	20001358 	.word	0x20001358

080110b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80110b4:	b580      	push	{r7, lr}
 80110b6:	b084      	sub	sp, #16
 80110b8:	af00      	add	r7, sp, #0
 80110ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80110bc:	f7ff fa64 	bl	8010588 <xTaskGetTickCount>
 80110c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80110c2:	4b0b      	ldr	r3, [pc, #44]	; (80110f0 <prvSampleTimeNow+0x3c>)
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	68fa      	ldr	r2, [r7, #12]
 80110c8:	429a      	cmp	r2, r3
 80110ca:	d205      	bcs.n	80110d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80110cc:	f000 f936 	bl	801133c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	2201      	movs	r2, #1
 80110d4:	601a      	str	r2, [r3, #0]
 80110d6:	e002      	b.n	80110de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	2200      	movs	r2, #0
 80110dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80110de:	4a04      	ldr	r2, [pc, #16]	; (80110f0 <prvSampleTimeNow+0x3c>)
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80110e4:	68fb      	ldr	r3, [r7, #12]
}
 80110e6:	4618      	mov	r0, r3
 80110e8:	3710      	adds	r7, #16
 80110ea:	46bd      	mov	sp, r7
 80110ec:	bd80      	pop	{r7, pc}
 80110ee:	bf00      	nop
 80110f0:	20001368 	.word	0x20001368

080110f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80110f4:	b580      	push	{r7, lr}
 80110f6:	b086      	sub	sp, #24
 80110f8:	af00      	add	r7, sp, #0
 80110fa:	60f8      	str	r0, [r7, #12]
 80110fc:	60b9      	str	r1, [r7, #8]
 80110fe:	607a      	str	r2, [r7, #4]
 8011100:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8011102:	2300      	movs	r3, #0
 8011104:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	68ba      	ldr	r2, [r7, #8]
 801110a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	68fa      	ldr	r2, [r7, #12]
 8011110:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011112:	68ba      	ldr	r2, [r7, #8]
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	429a      	cmp	r2, r3
 8011118:	d812      	bhi.n	8011140 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801111a:	687a      	ldr	r2, [r7, #4]
 801111c:	683b      	ldr	r3, [r7, #0]
 801111e:	1ad2      	subs	r2, r2, r3
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	699b      	ldr	r3, [r3, #24]
 8011124:	429a      	cmp	r2, r3
 8011126:	d302      	bcc.n	801112e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011128:	2301      	movs	r3, #1
 801112a:	617b      	str	r3, [r7, #20]
 801112c:	e01b      	b.n	8011166 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801112e:	4b10      	ldr	r3, [pc, #64]	; (8011170 <prvInsertTimerInActiveList+0x7c>)
 8011130:	681a      	ldr	r2, [r3, #0]
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	3304      	adds	r3, #4
 8011136:	4619      	mov	r1, r3
 8011138:	4610      	mov	r0, r2
 801113a:	f7fe f866 	bl	800f20a <vListInsert>
 801113e:	e012      	b.n	8011166 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011140:	687a      	ldr	r2, [r7, #4]
 8011142:	683b      	ldr	r3, [r7, #0]
 8011144:	429a      	cmp	r2, r3
 8011146:	d206      	bcs.n	8011156 <prvInsertTimerInActiveList+0x62>
 8011148:	68ba      	ldr	r2, [r7, #8]
 801114a:	683b      	ldr	r3, [r7, #0]
 801114c:	429a      	cmp	r2, r3
 801114e:	d302      	bcc.n	8011156 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011150:	2301      	movs	r3, #1
 8011152:	617b      	str	r3, [r7, #20]
 8011154:	e007      	b.n	8011166 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011156:	4b07      	ldr	r3, [pc, #28]	; (8011174 <prvInsertTimerInActiveList+0x80>)
 8011158:	681a      	ldr	r2, [r3, #0]
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	3304      	adds	r3, #4
 801115e:	4619      	mov	r1, r3
 8011160:	4610      	mov	r0, r2
 8011162:	f7fe f852 	bl	800f20a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8011166:	697b      	ldr	r3, [r7, #20]
}
 8011168:	4618      	mov	r0, r3
 801116a:	3718      	adds	r7, #24
 801116c:	46bd      	mov	sp, r7
 801116e:	bd80      	pop	{r7, pc}
 8011170:	2000135c 	.word	0x2000135c
 8011174:	20001358 	.word	0x20001358

08011178 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8011178:	b580      	push	{r7, lr}
 801117a:	b08e      	sub	sp, #56	; 0x38
 801117c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801117e:	e0ca      	b.n	8011316 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	2b00      	cmp	r3, #0
 8011184:	da18      	bge.n	80111b8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8011186:	1d3b      	adds	r3, r7, #4
 8011188:	3304      	adds	r3, #4
 801118a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801118c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801118e:	2b00      	cmp	r3, #0
 8011190:	d10a      	bne.n	80111a8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8011192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011196:	f383 8811 	msr	BASEPRI, r3
 801119a:	f3bf 8f6f 	isb	sy
 801119e:	f3bf 8f4f 	dsb	sy
 80111a2:	61fb      	str	r3, [r7, #28]
}
 80111a4:	bf00      	nop
 80111a6:	e7fe      	b.n	80111a6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80111a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80111ae:	6850      	ldr	r0, [r2, #4]
 80111b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80111b2:	6892      	ldr	r2, [r2, #8]
 80111b4:	4611      	mov	r1, r2
 80111b6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	f2c0 80aa 	blt.w	8011314 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80111c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111c6:	695b      	ldr	r3, [r3, #20]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d004      	beq.n	80111d6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80111cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111ce:	3304      	adds	r3, #4
 80111d0:	4618      	mov	r0, r3
 80111d2:	f7fe f853 	bl	800f27c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80111d6:	463b      	mov	r3, r7
 80111d8:	4618      	mov	r0, r3
 80111da:	f7ff ff6b 	bl	80110b4 <prvSampleTimeNow>
 80111de:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	2b09      	cmp	r3, #9
 80111e4:	f200 8097 	bhi.w	8011316 <prvProcessReceivedCommands+0x19e>
 80111e8:	a201      	add	r2, pc, #4	; (adr r2, 80111f0 <prvProcessReceivedCommands+0x78>)
 80111ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111ee:	bf00      	nop
 80111f0:	08011219 	.word	0x08011219
 80111f4:	08011219 	.word	0x08011219
 80111f8:	08011219 	.word	0x08011219
 80111fc:	0801128d 	.word	0x0801128d
 8011200:	080112a1 	.word	0x080112a1
 8011204:	080112eb 	.word	0x080112eb
 8011208:	08011219 	.word	0x08011219
 801120c:	08011219 	.word	0x08011219
 8011210:	0801128d 	.word	0x0801128d
 8011214:	080112a1 	.word	0x080112a1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801121a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801121e:	f043 0301 	orr.w	r3, r3, #1
 8011222:	b2da      	uxtb	r2, r3
 8011224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011226:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801122a:	68ba      	ldr	r2, [r7, #8]
 801122c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801122e:	699b      	ldr	r3, [r3, #24]
 8011230:	18d1      	adds	r1, r2, r3
 8011232:	68bb      	ldr	r3, [r7, #8]
 8011234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011236:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011238:	f7ff ff5c 	bl	80110f4 <prvInsertTimerInActiveList>
 801123c:	4603      	mov	r3, r0
 801123e:	2b00      	cmp	r3, #0
 8011240:	d069      	beq.n	8011316 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011244:	6a1b      	ldr	r3, [r3, #32]
 8011246:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011248:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801124a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801124c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011250:	f003 0304 	and.w	r3, r3, #4
 8011254:	2b00      	cmp	r3, #0
 8011256:	d05e      	beq.n	8011316 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011258:	68ba      	ldr	r2, [r7, #8]
 801125a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801125c:	699b      	ldr	r3, [r3, #24]
 801125e:	441a      	add	r2, r3
 8011260:	2300      	movs	r3, #0
 8011262:	9300      	str	r3, [sp, #0]
 8011264:	2300      	movs	r3, #0
 8011266:	2100      	movs	r1, #0
 8011268:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801126a:	f7ff fe05 	bl	8010e78 <xTimerGenericCommand>
 801126e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011270:	6a3b      	ldr	r3, [r7, #32]
 8011272:	2b00      	cmp	r3, #0
 8011274:	d14f      	bne.n	8011316 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8011276:	f04f 0350 	mov.w	r3, #80	; 0x50
 801127a:	f383 8811 	msr	BASEPRI, r3
 801127e:	f3bf 8f6f 	isb	sy
 8011282:	f3bf 8f4f 	dsb	sy
 8011286:	61bb      	str	r3, [r7, #24]
}
 8011288:	bf00      	nop
 801128a:	e7fe      	b.n	801128a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801128c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801128e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011292:	f023 0301 	bic.w	r3, r3, #1
 8011296:	b2da      	uxtb	r2, r3
 8011298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801129a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801129e:	e03a      	b.n	8011316 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80112a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80112a6:	f043 0301 	orr.w	r3, r3, #1
 80112aa:	b2da      	uxtb	r2, r3
 80112ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80112b2:	68ba      	ldr	r2, [r7, #8]
 80112b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112b6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80112b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112ba:	699b      	ldr	r3, [r3, #24]
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d10a      	bne.n	80112d6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80112c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112c4:	f383 8811 	msr	BASEPRI, r3
 80112c8:	f3bf 8f6f 	isb	sy
 80112cc:	f3bf 8f4f 	dsb	sy
 80112d0:	617b      	str	r3, [r7, #20]
}
 80112d2:	bf00      	nop
 80112d4:	e7fe      	b.n	80112d4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80112d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112d8:	699a      	ldr	r2, [r3, #24]
 80112da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112dc:	18d1      	adds	r1, r2, r3
 80112de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80112e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80112e4:	f7ff ff06 	bl	80110f4 <prvInsertTimerInActiveList>
					break;
 80112e8:	e015      	b.n	8011316 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80112ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80112f0:	f003 0302 	and.w	r3, r3, #2
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d103      	bne.n	8011300 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80112f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80112fa:	f000 fbe1 	bl	8011ac0 <vPortFree>
 80112fe:	e00a      	b.n	8011316 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011302:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011306:	f023 0301 	bic.w	r3, r3, #1
 801130a:	b2da      	uxtb	r2, r3
 801130c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801130e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011312:	e000      	b.n	8011316 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8011314:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011316:	4b08      	ldr	r3, [pc, #32]	; (8011338 <prvProcessReceivedCommands+0x1c0>)
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	1d39      	adds	r1, r7, #4
 801131c:	2200      	movs	r2, #0
 801131e:	4618      	mov	r0, r3
 8011320:	f7fe fa74 	bl	800f80c <xQueueReceive>
 8011324:	4603      	mov	r3, r0
 8011326:	2b00      	cmp	r3, #0
 8011328:	f47f af2a 	bne.w	8011180 <prvProcessReceivedCommands+0x8>
	}
}
 801132c:	bf00      	nop
 801132e:	bf00      	nop
 8011330:	3730      	adds	r7, #48	; 0x30
 8011332:	46bd      	mov	sp, r7
 8011334:	bd80      	pop	{r7, pc}
 8011336:	bf00      	nop
 8011338:	20001360 	.word	0x20001360

0801133c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801133c:	b580      	push	{r7, lr}
 801133e:	b088      	sub	sp, #32
 8011340:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011342:	e048      	b.n	80113d6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011344:	4b2d      	ldr	r3, [pc, #180]	; (80113fc <prvSwitchTimerLists+0xc0>)
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	68db      	ldr	r3, [r3, #12]
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801134e:	4b2b      	ldr	r3, [pc, #172]	; (80113fc <prvSwitchTimerLists+0xc0>)
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	68db      	ldr	r3, [r3, #12]
 8011354:	68db      	ldr	r3, [r3, #12]
 8011356:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	3304      	adds	r3, #4
 801135c:	4618      	mov	r0, r3
 801135e:	f7fd ff8d 	bl	800f27c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	6a1b      	ldr	r3, [r3, #32]
 8011366:	68f8      	ldr	r0, [r7, #12]
 8011368:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011370:	f003 0304 	and.w	r3, r3, #4
 8011374:	2b00      	cmp	r3, #0
 8011376:	d02e      	beq.n	80113d6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	699b      	ldr	r3, [r3, #24]
 801137c:	693a      	ldr	r2, [r7, #16]
 801137e:	4413      	add	r3, r2
 8011380:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8011382:	68ba      	ldr	r2, [r7, #8]
 8011384:	693b      	ldr	r3, [r7, #16]
 8011386:	429a      	cmp	r2, r3
 8011388:	d90e      	bls.n	80113a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	68ba      	ldr	r2, [r7, #8]
 801138e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	68fa      	ldr	r2, [r7, #12]
 8011394:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011396:	4b19      	ldr	r3, [pc, #100]	; (80113fc <prvSwitchTimerLists+0xc0>)
 8011398:	681a      	ldr	r2, [r3, #0]
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	3304      	adds	r3, #4
 801139e:	4619      	mov	r1, r3
 80113a0:	4610      	mov	r0, r2
 80113a2:	f7fd ff32 	bl	800f20a <vListInsert>
 80113a6:	e016      	b.n	80113d6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80113a8:	2300      	movs	r3, #0
 80113aa:	9300      	str	r3, [sp, #0]
 80113ac:	2300      	movs	r3, #0
 80113ae:	693a      	ldr	r2, [r7, #16]
 80113b0:	2100      	movs	r1, #0
 80113b2:	68f8      	ldr	r0, [r7, #12]
 80113b4:	f7ff fd60 	bl	8010e78 <xTimerGenericCommand>
 80113b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d10a      	bne.n	80113d6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80113c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113c4:	f383 8811 	msr	BASEPRI, r3
 80113c8:	f3bf 8f6f 	isb	sy
 80113cc:	f3bf 8f4f 	dsb	sy
 80113d0:	603b      	str	r3, [r7, #0]
}
 80113d2:	bf00      	nop
 80113d4:	e7fe      	b.n	80113d4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80113d6:	4b09      	ldr	r3, [pc, #36]	; (80113fc <prvSwitchTimerLists+0xc0>)
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d1b1      	bne.n	8011344 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80113e0:	4b06      	ldr	r3, [pc, #24]	; (80113fc <prvSwitchTimerLists+0xc0>)
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80113e6:	4b06      	ldr	r3, [pc, #24]	; (8011400 <prvSwitchTimerLists+0xc4>)
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	4a04      	ldr	r2, [pc, #16]	; (80113fc <prvSwitchTimerLists+0xc0>)
 80113ec:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80113ee:	4a04      	ldr	r2, [pc, #16]	; (8011400 <prvSwitchTimerLists+0xc4>)
 80113f0:	697b      	ldr	r3, [r7, #20]
 80113f2:	6013      	str	r3, [r2, #0]
}
 80113f4:	bf00      	nop
 80113f6:	3718      	adds	r7, #24
 80113f8:	46bd      	mov	sp, r7
 80113fa:	bd80      	pop	{r7, pc}
 80113fc:	20001358 	.word	0x20001358
 8011400:	2000135c 	.word	0x2000135c

08011404 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011404:	b580      	push	{r7, lr}
 8011406:	b082      	sub	sp, #8
 8011408:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801140a:	f000 f96b 	bl	80116e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801140e:	4b15      	ldr	r3, [pc, #84]	; (8011464 <prvCheckForValidListAndQueue+0x60>)
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	2b00      	cmp	r3, #0
 8011414:	d120      	bne.n	8011458 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8011416:	4814      	ldr	r0, [pc, #80]	; (8011468 <prvCheckForValidListAndQueue+0x64>)
 8011418:	f7fd fea6 	bl	800f168 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801141c:	4813      	ldr	r0, [pc, #76]	; (801146c <prvCheckForValidListAndQueue+0x68>)
 801141e:	f7fd fea3 	bl	800f168 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8011422:	4b13      	ldr	r3, [pc, #76]	; (8011470 <prvCheckForValidListAndQueue+0x6c>)
 8011424:	4a10      	ldr	r2, [pc, #64]	; (8011468 <prvCheckForValidListAndQueue+0x64>)
 8011426:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011428:	4b12      	ldr	r3, [pc, #72]	; (8011474 <prvCheckForValidListAndQueue+0x70>)
 801142a:	4a10      	ldr	r2, [pc, #64]	; (801146c <prvCheckForValidListAndQueue+0x68>)
 801142c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801142e:	2300      	movs	r3, #0
 8011430:	9300      	str	r3, [sp, #0]
 8011432:	4b11      	ldr	r3, [pc, #68]	; (8011478 <prvCheckForValidListAndQueue+0x74>)
 8011434:	4a11      	ldr	r2, [pc, #68]	; (801147c <prvCheckForValidListAndQueue+0x78>)
 8011436:	2110      	movs	r1, #16
 8011438:	200a      	movs	r0, #10
 801143a:	f7fd ffb1 	bl	800f3a0 <xQueueGenericCreateStatic>
 801143e:	4603      	mov	r3, r0
 8011440:	4a08      	ldr	r2, [pc, #32]	; (8011464 <prvCheckForValidListAndQueue+0x60>)
 8011442:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011444:	4b07      	ldr	r3, [pc, #28]	; (8011464 <prvCheckForValidListAndQueue+0x60>)
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	2b00      	cmp	r3, #0
 801144a:	d005      	beq.n	8011458 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801144c:	4b05      	ldr	r3, [pc, #20]	; (8011464 <prvCheckForValidListAndQueue+0x60>)
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	490b      	ldr	r1, [pc, #44]	; (8011480 <prvCheckForValidListAndQueue+0x7c>)
 8011452:	4618      	mov	r0, r3
 8011454:	f7fe fbca 	bl	800fbec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011458:	f000 f974 	bl	8011744 <vPortExitCritical>
}
 801145c:	bf00      	nop
 801145e:	46bd      	mov	sp, r7
 8011460:	bd80      	pop	{r7, pc}
 8011462:	bf00      	nop
 8011464:	20001360 	.word	0x20001360
 8011468:	20001330 	.word	0x20001330
 801146c:	20001344 	.word	0x20001344
 8011470:	20001358 	.word	0x20001358
 8011474:	2000135c 	.word	0x2000135c
 8011478:	2000140c 	.word	0x2000140c
 801147c:	2000136c 	.word	0x2000136c
 8011480:	08019f18 	.word	0x08019f18

08011484 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011484:	b480      	push	{r7}
 8011486:	b085      	sub	sp, #20
 8011488:	af00      	add	r7, sp, #0
 801148a:	60f8      	str	r0, [r7, #12]
 801148c:	60b9      	str	r1, [r7, #8]
 801148e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	3b04      	subs	r3, #4
 8011494:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801149c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	3b04      	subs	r3, #4
 80114a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80114a4:	68bb      	ldr	r3, [r7, #8]
 80114a6:	f023 0201 	bic.w	r2, r3, #1
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	3b04      	subs	r3, #4
 80114b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80114b4:	4a0c      	ldr	r2, [pc, #48]	; (80114e8 <pxPortInitialiseStack+0x64>)
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	3b14      	subs	r3, #20
 80114be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80114c0:	687a      	ldr	r2, [r7, #4]
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	3b04      	subs	r3, #4
 80114ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	f06f 0202 	mvn.w	r2, #2
 80114d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	3b20      	subs	r3, #32
 80114d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80114da:	68fb      	ldr	r3, [r7, #12]
}
 80114dc:	4618      	mov	r0, r3
 80114de:	3714      	adds	r7, #20
 80114e0:	46bd      	mov	sp, r7
 80114e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e6:	4770      	bx	lr
 80114e8:	080114ed 	.word	0x080114ed

080114ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80114ec:	b480      	push	{r7}
 80114ee:	b085      	sub	sp, #20
 80114f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80114f2:	2300      	movs	r3, #0
 80114f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80114f6:	4b12      	ldr	r3, [pc, #72]	; (8011540 <prvTaskExitError+0x54>)
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114fe:	d00a      	beq.n	8011516 <prvTaskExitError+0x2a>
	__asm volatile
 8011500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011504:	f383 8811 	msr	BASEPRI, r3
 8011508:	f3bf 8f6f 	isb	sy
 801150c:	f3bf 8f4f 	dsb	sy
 8011510:	60fb      	str	r3, [r7, #12]
}
 8011512:	bf00      	nop
 8011514:	e7fe      	b.n	8011514 <prvTaskExitError+0x28>
	__asm volatile
 8011516:	f04f 0350 	mov.w	r3, #80	; 0x50
 801151a:	f383 8811 	msr	BASEPRI, r3
 801151e:	f3bf 8f6f 	isb	sy
 8011522:	f3bf 8f4f 	dsb	sy
 8011526:	60bb      	str	r3, [r7, #8]
}
 8011528:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801152a:	bf00      	nop
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	2b00      	cmp	r3, #0
 8011530:	d0fc      	beq.n	801152c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011532:	bf00      	nop
 8011534:	bf00      	nop
 8011536:	3714      	adds	r7, #20
 8011538:	46bd      	mov	sp, r7
 801153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801153e:	4770      	bx	lr
 8011540:	200000e4 	.word	0x200000e4
	...

08011550 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011550:	4b07      	ldr	r3, [pc, #28]	; (8011570 <pxCurrentTCBConst2>)
 8011552:	6819      	ldr	r1, [r3, #0]
 8011554:	6808      	ldr	r0, [r1, #0]
 8011556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801155a:	f380 8809 	msr	PSP, r0
 801155e:	f3bf 8f6f 	isb	sy
 8011562:	f04f 0000 	mov.w	r0, #0
 8011566:	f380 8811 	msr	BASEPRI, r0
 801156a:	4770      	bx	lr
 801156c:	f3af 8000 	nop.w

08011570 <pxCurrentTCBConst2>:
 8011570:	20000e30 	.word	0x20000e30
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011574:	bf00      	nop
 8011576:	bf00      	nop

08011578 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011578:	4808      	ldr	r0, [pc, #32]	; (801159c <prvPortStartFirstTask+0x24>)
 801157a:	6800      	ldr	r0, [r0, #0]
 801157c:	6800      	ldr	r0, [r0, #0]
 801157e:	f380 8808 	msr	MSP, r0
 8011582:	f04f 0000 	mov.w	r0, #0
 8011586:	f380 8814 	msr	CONTROL, r0
 801158a:	b662      	cpsie	i
 801158c:	b661      	cpsie	f
 801158e:	f3bf 8f4f 	dsb	sy
 8011592:	f3bf 8f6f 	isb	sy
 8011596:	df00      	svc	0
 8011598:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801159a:	bf00      	nop
 801159c:	e000ed08 	.word	0xe000ed08

080115a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80115a0:	b580      	push	{r7, lr}
 80115a2:	b086      	sub	sp, #24
 80115a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80115a6:	4b46      	ldr	r3, [pc, #280]	; (80116c0 <xPortStartScheduler+0x120>)
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	4a46      	ldr	r2, [pc, #280]	; (80116c4 <xPortStartScheduler+0x124>)
 80115ac:	4293      	cmp	r3, r2
 80115ae:	d10a      	bne.n	80115c6 <xPortStartScheduler+0x26>
	__asm volatile
 80115b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115b4:	f383 8811 	msr	BASEPRI, r3
 80115b8:	f3bf 8f6f 	isb	sy
 80115bc:	f3bf 8f4f 	dsb	sy
 80115c0:	613b      	str	r3, [r7, #16]
}
 80115c2:	bf00      	nop
 80115c4:	e7fe      	b.n	80115c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80115c6:	4b3e      	ldr	r3, [pc, #248]	; (80116c0 <xPortStartScheduler+0x120>)
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	4a3f      	ldr	r2, [pc, #252]	; (80116c8 <xPortStartScheduler+0x128>)
 80115cc:	4293      	cmp	r3, r2
 80115ce:	d10a      	bne.n	80115e6 <xPortStartScheduler+0x46>
	__asm volatile
 80115d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115d4:	f383 8811 	msr	BASEPRI, r3
 80115d8:	f3bf 8f6f 	isb	sy
 80115dc:	f3bf 8f4f 	dsb	sy
 80115e0:	60fb      	str	r3, [r7, #12]
}
 80115e2:	bf00      	nop
 80115e4:	e7fe      	b.n	80115e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80115e6:	4b39      	ldr	r3, [pc, #228]	; (80116cc <xPortStartScheduler+0x12c>)
 80115e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80115ea:	697b      	ldr	r3, [r7, #20]
 80115ec:	781b      	ldrb	r3, [r3, #0]
 80115ee:	b2db      	uxtb	r3, r3
 80115f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80115f2:	697b      	ldr	r3, [r7, #20]
 80115f4:	22ff      	movs	r2, #255	; 0xff
 80115f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80115f8:	697b      	ldr	r3, [r7, #20]
 80115fa:	781b      	ldrb	r3, [r3, #0]
 80115fc:	b2db      	uxtb	r3, r3
 80115fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011600:	78fb      	ldrb	r3, [r7, #3]
 8011602:	b2db      	uxtb	r3, r3
 8011604:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011608:	b2da      	uxtb	r2, r3
 801160a:	4b31      	ldr	r3, [pc, #196]	; (80116d0 <xPortStartScheduler+0x130>)
 801160c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801160e:	4b31      	ldr	r3, [pc, #196]	; (80116d4 <xPortStartScheduler+0x134>)
 8011610:	2207      	movs	r2, #7
 8011612:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011614:	e009      	b.n	801162a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8011616:	4b2f      	ldr	r3, [pc, #188]	; (80116d4 <xPortStartScheduler+0x134>)
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	3b01      	subs	r3, #1
 801161c:	4a2d      	ldr	r2, [pc, #180]	; (80116d4 <xPortStartScheduler+0x134>)
 801161e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011620:	78fb      	ldrb	r3, [r7, #3]
 8011622:	b2db      	uxtb	r3, r3
 8011624:	005b      	lsls	r3, r3, #1
 8011626:	b2db      	uxtb	r3, r3
 8011628:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801162a:	78fb      	ldrb	r3, [r7, #3]
 801162c:	b2db      	uxtb	r3, r3
 801162e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011632:	2b80      	cmp	r3, #128	; 0x80
 8011634:	d0ef      	beq.n	8011616 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011636:	4b27      	ldr	r3, [pc, #156]	; (80116d4 <xPortStartScheduler+0x134>)
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	f1c3 0307 	rsb	r3, r3, #7
 801163e:	2b04      	cmp	r3, #4
 8011640:	d00a      	beq.n	8011658 <xPortStartScheduler+0xb8>
	__asm volatile
 8011642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011646:	f383 8811 	msr	BASEPRI, r3
 801164a:	f3bf 8f6f 	isb	sy
 801164e:	f3bf 8f4f 	dsb	sy
 8011652:	60bb      	str	r3, [r7, #8]
}
 8011654:	bf00      	nop
 8011656:	e7fe      	b.n	8011656 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011658:	4b1e      	ldr	r3, [pc, #120]	; (80116d4 <xPortStartScheduler+0x134>)
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	021b      	lsls	r3, r3, #8
 801165e:	4a1d      	ldr	r2, [pc, #116]	; (80116d4 <xPortStartScheduler+0x134>)
 8011660:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011662:	4b1c      	ldr	r3, [pc, #112]	; (80116d4 <xPortStartScheduler+0x134>)
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801166a:	4a1a      	ldr	r2, [pc, #104]	; (80116d4 <xPortStartScheduler+0x134>)
 801166c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	b2da      	uxtb	r2, r3
 8011672:	697b      	ldr	r3, [r7, #20]
 8011674:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011676:	4b18      	ldr	r3, [pc, #96]	; (80116d8 <xPortStartScheduler+0x138>)
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	4a17      	ldr	r2, [pc, #92]	; (80116d8 <xPortStartScheduler+0x138>)
 801167c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011680:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011682:	4b15      	ldr	r3, [pc, #84]	; (80116d8 <xPortStartScheduler+0x138>)
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	4a14      	ldr	r2, [pc, #80]	; (80116d8 <xPortStartScheduler+0x138>)
 8011688:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801168c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801168e:	f000 f8dd 	bl	801184c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011692:	4b12      	ldr	r3, [pc, #72]	; (80116dc <xPortStartScheduler+0x13c>)
 8011694:	2200      	movs	r2, #0
 8011696:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011698:	f000 f8fc 	bl	8011894 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801169c:	4b10      	ldr	r3, [pc, #64]	; (80116e0 <xPortStartScheduler+0x140>)
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	4a0f      	ldr	r2, [pc, #60]	; (80116e0 <xPortStartScheduler+0x140>)
 80116a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80116a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80116a8:	f7ff ff66 	bl	8011578 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80116ac:	f7ff f836 	bl	801071c <vTaskSwitchContext>
	prvTaskExitError();
 80116b0:	f7ff ff1c 	bl	80114ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80116b4:	2300      	movs	r3, #0
}
 80116b6:	4618      	mov	r0, r3
 80116b8:	3718      	adds	r7, #24
 80116ba:	46bd      	mov	sp, r7
 80116bc:	bd80      	pop	{r7, pc}
 80116be:	bf00      	nop
 80116c0:	e000ed00 	.word	0xe000ed00
 80116c4:	410fc271 	.word	0x410fc271
 80116c8:	410fc270 	.word	0x410fc270
 80116cc:	e000e400 	.word	0xe000e400
 80116d0:	2000145c 	.word	0x2000145c
 80116d4:	20001460 	.word	0x20001460
 80116d8:	e000ed20 	.word	0xe000ed20
 80116dc:	200000e4 	.word	0x200000e4
 80116e0:	e000ef34 	.word	0xe000ef34

080116e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80116e4:	b480      	push	{r7}
 80116e6:	b083      	sub	sp, #12
 80116e8:	af00      	add	r7, sp, #0
	__asm volatile
 80116ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116ee:	f383 8811 	msr	BASEPRI, r3
 80116f2:	f3bf 8f6f 	isb	sy
 80116f6:	f3bf 8f4f 	dsb	sy
 80116fa:	607b      	str	r3, [r7, #4]
}
 80116fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80116fe:	4b0f      	ldr	r3, [pc, #60]	; (801173c <vPortEnterCritical+0x58>)
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	3301      	adds	r3, #1
 8011704:	4a0d      	ldr	r2, [pc, #52]	; (801173c <vPortEnterCritical+0x58>)
 8011706:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011708:	4b0c      	ldr	r3, [pc, #48]	; (801173c <vPortEnterCritical+0x58>)
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	2b01      	cmp	r3, #1
 801170e:	d10f      	bne.n	8011730 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011710:	4b0b      	ldr	r3, [pc, #44]	; (8011740 <vPortEnterCritical+0x5c>)
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	b2db      	uxtb	r3, r3
 8011716:	2b00      	cmp	r3, #0
 8011718:	d00a      	beq.n	8011730 <vPortEnterCritical+0x4c>
	__asm volatile
 801171a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801171e:	f383 8811 	msr	BASEPRI, r3
 8011722:	f3bf 8f6f 	isb	sy
 8011726:	f3bf 8f4f 	dsb	sy
 801172a:	603b      	str	r3, [r7, #0]
}
 801172c:	bf00      	nop
 801172e:	e7fe      	b.n	801172e <vPortEnterCritical+0x4a>
	}
}
 8011730:	bf00      	nop
 8011732:	370c      	adds	r7, #12
 8011734:	46bd      	mov	sp, r7
 8011736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801173a:	4770      	bx	lr
 801173c:	200000e4 	.word	0x200000e4
 8011740:	e000ed04 	.word	0xe000ed04

08011744 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011744:	b480      	push	{r7}
 8011746:	b083      	sub	sp, #12
 8011748:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801174a:	4b12      	ldr	r3, [pc, #72]	; (8011794 <vPortExitCritical+0x50>)
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	2b00      	cmp	r3, #0
 8011750:	d10a      	bne.n	8011768 <vPortExitCritical+0x24>
	__asm volatile
 8011752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011756:	f383 8811 	msr	BASEPRI, r3
 801175a:	f3bf 8f6f 	isb	sy
 801175e:	f3bf 8f4f 	dsb	sy
 8011762:	607b      	str	r3, [r7, #4]
}
 8011764:	bf00      	nop
 8011766:	e7fe      	b.n	8011766 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011768:	4b0a      	ldr	r3, [pc, #40]	; (8011794 <vPortExitCritical+0x50>)
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	3b01      	subs	r3, #1
 801176e:	4a09      	ldr	r2, [pc, #36]	; (8011794 <vPortExitCritical+0x50>)
 8011770:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011772:	4b08      	ldr	r3, [pc, #32]	; (8011794 <vPortExitCritical+0x50>)
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	2b00      	cmp	r3, #0
 8011778:	d105      	bne.n	8011786 <vPortExitCritical+0x42>
 801177a:	2300      	movs	r3, #0
 801177c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801177e:	683b      	ldr	r3, [r7, #0]
 8011780:	f383 8811 	msr	BASEPRI, r3
}
 8011784:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011786:	bf00      	nop
 8011788:	370c      	adds	r7, #12
 801178a:	46bd      	mov	sp, r7
 801178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011790:	4770      	bx	lr
 8011792:	bf00      	nop
 8011794:	200000e4 	.word	0x200000e4
	...

080117a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80117a0:	f3ef 8009 	mrs	r0, PSP
 80117a4:	f3bf 8f6f 	isb	sy
 80117a8:	4b15      	ldr	r3, [pc, #84]	; (8011800 <pxCurrentTCBConst>)
 80117aa:	681a      	ldr	r2, [r3, #0]
 80117ac:	f01e 0f10 	tst.w	lr, #16
 80117b0:	bf08      	it	eq
 80117b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80117b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117ba:	6010      	str	r0, [r2, #0]
 80117bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80117c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80117c4:	f380 8811 	msr	BASEPRI, r0
 80117c8:	f3bf 8f4f 	dsb	sy
 80117cc:	f3bf 8f6f 	isb	sy
 80117d0:	f7fe ffa4 	bl	801071c <vTaskSwitchContext>
 80117d4:	f04f 0000 	mov.w	r0, #0
 80117d8:	f380 8811 	msr	BASEPRI, r0
 80117dc:	bc09      	pop	{r0, r3}
 80117de:	6819      	ldr	r1, [r3, #0]
 80117e0:	6808      	ldr	r0, [r1, #0]
 80117e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117e6:	f01e 0f10 	tst.w	lr, #16
 80117ea:	bf08      	it	eq
 80117ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80117f0:	f380 8809 	msr	PSP, r0
 80117f4:	f3bf 8f6f 	isb	sy
 80117f8:	4770      	bx	lr
 80117fa:	bf00      	nop
 80117fc:	f3af 8000 	nop.w

08011800 <pxCurrentTCBConst>:
 8011800:	20000e30 	.word	0x20000e30
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011804:	bf00      	nop
 8011806:	bf00      	nop

08011808 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011808:	b580      	push	{r7, lr}
 801180a:	b082      	sub	sp, #8
 801180c:	af00      	add	r7, sp, #0
	__asm volatile
 801180e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011812:	f383 8811 	msr	BASEPRI, r3
 8011816:	f3bf 8f6f 	isb	sy
 801181a:	f3bf 8f4f 	dsb	sy
 801181e:	607b      	str	r3, [r7, #4]
}
 8011820:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011822:	f7fe fec1 	bl	80105a8 <xTaskIncrementTick>
 8011826:	4603      	mov	r3, r0
 8011828:	2b00      	cmp	r3, #0
 801182a:	d003      	beq.n	8011834 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801182c:	4b06      	ldr	r3, [pc, #24]	; (8011848 <xPortSysTickHandler+0x40>)
 801182e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011832:	601a      	str	r2, [r3, #0]
 8011834:	2300      	movs	r3, #0
 8011836:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011838:	683b      	ldr	r3, [r7, #0]
 801183a:	f383 8811 	msr	BASEPRI, r3
}
 801183e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011840:	bf00      	nop
 8011842:	3708      	adds	r7, #8
 8011844:	46bd      	mov	sp, r7
 8011846:	bd80      	pop	{r7, pc}
 8011848:	e000ed04 	.word	0xe000ed04

0801184c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801184c:	b480      	push	{r7}
 801184e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011850:	4b0b      	ldr	r3, [pc, #44]	; (8011880 <vPortSetupTimerInterrupt+0x34>)
 8011852:	2200      	movs	r2, #0
 8011854:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011856:	4b0b      	ldr	r3, [pc, #44]	; (8011884 <vPortSetupTimerInterrupt+0x38>)
 8011858:	2200      	movs	r2, #0
 801185a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801185c:	4b0a      	ldr	r3, [pc, #40]	; (8011888 <vPortSetupTimerInterrupt+0x3c>)
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	4a0a      	ldr	r2, [pc, #40]	; (801188c <vPortSetupTimerInterrupt+0x40>)
 8011862:	fba2 2303 	umull	r2, r3, r2, r3
 8011866:	099b      	lsrs	r3, r3, #6
 8011868:	4a09      	ldr	r2, [pc, #36]	; (8011890 <vPortSetupTimerInterrupt+0x44>)
 801186a:	3b01      	subs	r3, #1
 801186c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801186e:	4b04      	ldr	r3, [pc, #16]	; (8011880 <vPortSetupTimerInterrupt+0x34>)
 8011870:	2207      	movs	r2, #7
 8011872:	601a      	str	r2, [r3, #0]
}
 8011874:	bf00      	nop
 8011876:	46bd      	mov	sp, r7
 8011878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801187c:	4770      	bx	lr
 801187e:	bf00      	nop
 8011880:	e000e010 	.word	0xe000e010
 8011884:	e000e018 	.word	0xe000e018
 8011888:	20000088 	.word	0x20000088
 801188c:	10624dd3 	.word	0x10624dd3
 8011890:	e000e014 	.word	0xe000e014

08011894 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011894:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80118a4 <vPortEnableVFP+0x10>
 8011898:	6801      	ldr	r1, [r0, #0]
 801189a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801189e:	6001      	str	r1, [r0, #0]
 80118a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80118a2:	bf00      	nop
 80118a4:	e000ed88 	.word	0xe000ed88

080118a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80118a8:	b480      	push	{r7}
 80118aa:	b085      	sub	sp, #20
 80118ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80118ae:	f3ef 8305 	mrs	r3, IPSR
 80118b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	2b0f      	cmp	r3, #15
 80118b8:	d914      	bls.n	80118e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80118ba:	4a17      	ldr	r2, [pc, #92]	; (8011918 <vPortValidateInterruptPriority+0x70>)
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	4413      	add	r3, r2
 80118c0:	781b      	ldrb	r3, [r3, #0]
 80118c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80118c4:	4b15      	ldr	r3, [pc, #84]	; (801191c <vPortValidateInterruptPriority+0x74>)
 80118c6:	781b      	ldrb	r3, [r3, #0]
 80118c8:	7afa      	ldrb	r2, [r7, #11]
 80118ca:	429a      	cmp	r2, r3
 80118cc:	d20a      	bcs.n	80118e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80118ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118d2:	f383 8811 	msr	BASEPRI, r3
 80118d6:	f3bf 8f6f 	isb	sy
 80118da:	f3bf 8f4f 	dsb	sy
 80118de:	607b      	str	r3, [r7, #4]
}
 80118e0:	bf00      	nop
 80118e2:	e7fe      	b.n	80118e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80118e4:	4b0e      	ldr	r3, [pc, #56]	; (8011920 <vPortValidateInterruptPriority+0x78>)
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80118ec:	4b0d      	ldr	r3, [pc, #52]	; (8011924 <vPortValidateInterruptPriority+0x7c>)
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	429a      	cmp	r2, r3
 80118f2:	d90a      	bls.n	801190a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80118f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118f8:	f383 8811 	msr	BASEPRI, r3
 80118fc:	f3bf 8f6f 	isb	sy
 8011900:	f3bf 8f4f 	dsb	sy
 8011904:	603b      	str	r3, [r7, #0]
}
 8011906:	bf00      	nop
 8011908:	e7fe      	b.n	8011908 <vPortValidateInterruptPriority+0x60>
	}
 801190a:	bf00      	nop
 801190c:	3714      	adds	r7, #20
 801190e:	46bd      	mov	sp, r7
 8011910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011914:	4770      	bx	lr
 8011916:	bf00      	nop
 8011918:	e000e3f0 	.word	0xe000e3f0
 801191c:	2000145c 	.word	0x2000145c
 8011920:	e000ed0c 	.word	0xe000ed0c
 8011924:	20001460 	.word	0x20001460

08011928 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011928:	b580      	push	{r7, lr}
 801192a:	b08a      	sub	sp, #40	; 0x28
 801192c:	af00      	add	r7, sp, #0
 801192e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011930:	2300      	movs	r3, #0
 8011932:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011934:	f7fe fd7c 	bl	8010430 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011938:	4b5b      	ldr	r3, [pc, #364]	; (8011aa8 <pvPortMalloc+0x180>)
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	2b00      	cmp	r3, #0
 801193e:	d101      	bne.n	8011944 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011940:	f000 f920 	bl	8011b84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011944:	4b59      	ldr	r3, [pc, #356]	; (8011aac <pvPortMalloc+0x184>)
 8011946:	681a      	ldr	r2, [r3, #0]
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	4013      	ands	r3, r2
 801194c:	2b00      	cmp	r3, #0
 801194e:	f040 8093 	bne.w	8011a78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	2b00      	cmp	r3, #0
 8011956:	d01d      	beq.n	8011994 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8011958:	2208      	movs	r2, #8
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	4413      	add	r3, r2
 801195e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	f003 0307 	and.w	r3, r3, #7
 8011966:	2b00      	cmp	r3, #0
 8011968:	d014      	beq.n	8011994 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	f023 0307 	bic.w	r3, r3, #7
 8011970:	3308      	adds	r3, #8
 8011972:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	f003 0307 	and.w	r3, r3, #7
 801197a:	2b00      	cmp	r3, #0
 801197c:	d00a      	beq.n	8011994 <pvPortMalloc+0x6c>
	__asm volatile
 801197e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011982:	f383 8811 	msr	BASEPRI, r3
 8011986:	f3bf 8f6f 	isb	sy
 801198a:	f3bf 8f4f 	dsb	sy
 801198e:	617b      	str	r3, [r7, #20]
}
 8011990:	bf00      	nop
 8011992:	e7fe      	b.n	8011992 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	2b00      	cmp	r3, #0
 8011998:	d06e      	beq.n	8011a78 <pvPortMalloc+0x150>
 801199a:	4b45      	ldr	r3, [pc, #276]	; (8011ab0 <pvPortMalloc+0x188>)
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	687a      	ldr	r2, [r7, #4]
 80119a0:	429a      	cmp	r2, r3
 80119a2:	d869      	bhi.n	8011a78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80119a4:	4b43      	ldr	r3, [pc, #268]	; (8011ab4 <pvPortMalloc+0x18c>)
 80119a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80119a8:	4b42      	ldr	r3, [pc, #264]	; (8011ab4 <pvPortMalloc+0x18c>)
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80119ae:	e004      	b.n	80119ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80119b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80119b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80119ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119bc:	685b      	ldr	r3, [r3, #4]
 80119be:	687a      	ldr	r2, [r7, #4]
 80119c0:	429a      	cmp	r2, r3
 80119c2:	d903      	bls.n	80119cc <pvPortMalloc+0xa4>
 80119c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d1f1      	bne.n	80119b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80119cc:	4b36      	ldr	r3, [pc, #216]	; (8011aa8 <pvPortMalloc+0x180>)
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80119d2:	429a      	cmp	r2, r3
 80119d4:	d050      	beq.n	8011a78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80119d6:	6a3b      	ldr	r3, [r7, #32]
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	2208      	movs	r2, #8
 80119dc:	4413      	add	r3, r2
 80119de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80119e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119e2:	681a      	ldr	r2, [r3, #0]
 80119e4:	6a3b      	ldr	r3, [r7, #32]
 80119e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80119e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119ea:	685a      	ldr	r2, [r3, #4]
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	1ad2      	subs	r2, r2, r3
 80119f0:	2308      	movs	r3, #8
 80119f2:	005b      	lsls	r3, r3, #1
 80119f4:	429a      	cmp	r2, r3
 80119f6:	d91f      	bls.n	8011a38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80119f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	4413      	add	r3, r2
 80119fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011a00:	69bb      	ldr	r3, [r7, #24]
 8011a02:	f003 0307 	and.w	r3, r3, #7
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d00a      	beq.n	8011a20 <pvPortMalloc+0xf8>
	__asm volatile
 8011a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a0e:	f383 8811 	msr	BASEPRI, r3
 8011a12:	f3bf 8f6f 	isb	sy
 8011a16:	f3bf 8f4f 	dsb	sy
 8011a1a:	613b      	str	r3, [r7, #16]
}
 8011a1c:	bf00      	nop
 8011a1e:	e7fe      	b.n	8011a1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a22:	685a      	ldr	r2, [r3, #4]
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	1ad2      	subs	r2, r2, r3
 8011a28:	69bb      	ldr	r3, [r7, #24]
 8011a2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a2e:	687a      	ldr	r2, [r7, #4]
 8011a30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011a32:	69b8      	ldr	r0, [r7, #24]
 8011a34:	f000 f908 	bl	8011c48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011a38:	4b1d      	ldr	r3, [pc, #116]	; (8011ab0 <pvPortMalloc+0x188>)
 8011a3a:	681a      	ldr	r2, [r3, #0]
 8011a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a3e:	685b      	ldr	r3, [r3, #4]
 8011a40:	1ad3      	subs	r3, r2, r3
 8011a42:	4a1b      	ldr	r2, [pc, #108]	; (8011ab0 <pvPortMalloc+0x188>)
 8011a44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011a46:	4b1a      	ldr	r3, [pc, #104]	; (8011ab0 <pvPortMalloc+0x188>)
 8011a48:	681a      	ldr	r2, [r3, #0]
 8011a4a:	4b1b      	ldr	r3, [pc, #108]	; (8011ab8 <pvPortMalloc+0x190>)
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	429a      	cmp	r2, r3
 8011a50:	d203      	bcs.n	8011a5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011a52:	4b17      	ldr	r3, [pc, #92]	; (8011ab0 <pvPortMalloc+0x188>)
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	4a18      	ldr	r2, [pc, #96]	; (8011ab8 <pvPortMalloc+0x190>)
 8011a58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a5c:	685a      	ldr	r2, [r3, #4]
 8011a5e:	4b13      	ldr	r3, [pc, #76]	; (8011aac <pvPortMalloc+0x184>)
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	431a      	orrs	r2, r3
 8011a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a6a:	2200      	movs	r2, #0
 8011a6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8011a6e:	4b13      	ldr	r3, [pc, #76]	; (8011abc <pvPortMalloc+0x194>)
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	3301      	adds	r3, #1
 8011a74:	4a11      	ldr	r2, [pc, #68]	; (8011abc <pvPortMalloc+0x194>)
 8011a76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011a78:	f7fe fce8 	bl	801044c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011a7c:	69fb      	ldr	r3, [r7, #28]
 8011a7e:	f003 0307 	and.w	r3, r3, #7
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d00a      	beq.n	8011a9c <pvPortMalloc+0x174>
	__asm volatile
 8011a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a8a:	f383 8811 	msr	BASEPRI, r3
 8011a8e:	f3bf 8f6f 	isb	sy
 8011a92:	f3bf 8f4f 	dsb	sy
 8011a96:	60fb      	str	r3, [r7, #12]
}
 8011a98:	bf00      	nop
 8011a9a:	e7fe      	b.n	8011a9a <pvPortMalloc+0x172>
	return pvReturn;
 8011a9c:	69fb      	ldr	r3, [r7, #28]
}
 8011a9e:	4618      	mov	r0, r3
 8011aa0:	3728      	adds	r7, #40	; 0x28
 8011aa2:	46bd      	mov	sp, r7
 8011aa4:	bd80      	pop	{r7, pc}
 8011aa6:	bf00      	nop
 8011aa8:	20005abc 	.word	0x20005abc
 8011aac:	20005ad0 	.word	0x20005ad0
 8011ab0:	20005ac0 	.word	0x20005ac0
 8011ab4:	20005ab4 	.word	0x20005ab4
 8011ab8:	20005ac4 	.word	0x20005ac4
 8011abc:	20005ac8 	.word	0x20005ac8

08011ac0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011ac0:	b580      	push	{r7, lr}
 8011ac2:	b086      	sub	sp, #24
 8011ac4:	af00      	add	r7, sp, #0
 8011ac6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d04d      	beq.n	8011b6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011ad2:	2308      	movs	r3, #8
 8011ad4:	425b      	negs	r3, r3
 8011ad6:	697a      	ldr	r2, [r7, #20]
 8011ad8:	4413      	add	r3, r2
 8011ada:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011adc:	697b      	ldr	r3, [r7, #20]
 8011ade:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011ae0:	693b      	ldr	r3, [r7, #16]
 8011ae2:	685a      	ldr	r2, [r3, #4]
 8011ae4:	4b24      	ldr	r3, [pc, #144]	; (8011b78 <vPortFree+0xb8>)
 8011ae6:	681b      	ldr	r3, [r3, #0]
 8011ae8:	4013      	ands	r3, r2
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d10a      	bne.n	8011b04 <vPortFree+0x44>
	__asm volatile
 8011aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011af2:	f383 8811 	msr	BASEPRI, r3
 8011af6:	f3bf 8f6f 	isb	sy
 8011afa:	f3bf 8f4f 	dsb	sy
 8011afe:	60fb      	str	r3, [r7, #12]
}
 8011b00:	bf00      	nop
 8011b02:	e7fe      	b.n	8011b02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011b04:	693b      	ldr	r3, [r7, #16]
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d00a      	beq.n	8011b22 <vPortFree+0x62>
	__asm volatile
 8011b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b10:	f383 8811 	msr	BASEPRI, r3
 8011b14:	f3bf 8f6f 	isb	sy
 8011b18:	f3bf 8f4f 	dsb	sy
 8011b1c:	60bb      	str	r3, [r7, #8]
}
 8011b1e:	bf00      	nop
 8011b20:	e7fe      	b.n	8011b20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011b22:	693b      	ldr	r3, [r7, #16]
 8011b24:	685a      	ldr	r2, [r3, #4]
 8011b26:	4b14      	ldr	r3, [pc, #80]	; (8011b78 <vPortFree+0xb8>)
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	4013      	ands	r3, r2
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d01e      	beq.n	8011b6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011b30:	693b      	ldr	r3, [r7, #16]
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d11a      	bne.n	8011b6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011b38:	693b      	ldr	r3, [r7, #16]
 8011b3a:	685a      	ldr	r2, [r3, #4]
 8011b3c:	4b0e      	ldr	r3, [pc, #56]	; (8011b78 <vPortFree+0xb8>)
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	43db      	mvns	r3, r3
 8011b42:	401a      	ands	r2, r3
 8011b44:	693b      	ldr	r3, [r7, #16]
 8011b46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011b48:	f7fe fc72 	bl	8010430 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011b4c:	693b      	ldr	r3, [r7, #16]
 8011b4e:	685a      	ldr	r2, [r3, #4]
 8011b50:	4b0a      	ldr	r3, [pc, #40]	; (8011b7c <vPortFree+0xbc>)
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	4413      	add	r3, r2
 8011b56:	4a09      	ldr	r2, [pc, #36]	; (8011b7c <vPortFree+0xbc>)
 8011b58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011b5a:	6938      	ldr	r0, [r7, #16]
 8011b5c:	f000 f874 	bl	8011c48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011b60:	4b07      	ldr	r3, [pc, #28]	; (8011b80 <vPortFree+0xc0>)
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	3301      	adds	r3, #1
 8011b66:	4a06      	ldr	r2, [pc, #24]	; (8011b80 <vPortFree+0xc0>)
 8011b68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8011b6a:	f7fe fc6f 	bl	801044c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011b6e:	bf00      	nop
 8011b70:	3718      	adds	r7, #24
 8011b72:	46bd      	mov	sp, r7
 8011b74:	bd80      	pop	{r7, pc}
 8011b76:	bf00      	nop
 8011b78:	20005ad0 	.word	0x20005ad0
 8011b7c:	20005ac0 	.word	0x20005ac0
 8011b80:	20005acc 	.word	0x20005acc

08011b84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011b84:	b480      	push	{r7}
 8011b86:	b085      	sub	sp, #20
 8011b88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011b8a:	f244 6350 	movw	r3, #18000	; 0x4650
 8011b8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011b90:	4b27      	ldr	r3, [pc, #156]	; (8011c30 <prvHeapInit+0xac>)
 8011b92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	f003 0307 	and.w	r3, r3, #7
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d00c      	beq.n	8011bb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	3307      	adds	r3, #7
 8011ba2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	f023 0307 	bic.w	r3, r3, #7
 8011baa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011bac:	68ba      	ldr	r2, [r7, #8]
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	1ad3      	subs	r3, r2, r3
 8011bb2:	4a1f      	ldr	r2, [pc, #124]	; (8011c30 <prvHeapInit+0xac>)
 8011bb4:	4413      	add	r3, r2
 8011bb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011bbc:	4a1d      	ldr	r2, [pc, #116]	; (8011c34 <prvHeapInit+0xb0>)
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011bc2:	4b1c      	ldr	r3, [pc, #112]	; (8011c34 <prvHeapInit+0xb0>)
 8011bc4:	2200      	movs	r2, #0
 8011bc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	68ba      	ldr	r2, [r7, #8]
 8011bcc:	4413      	add	r3, r2
 8011bce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011bd0:	2208      	movs	r2, #8
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	1a9b      	subs	r3, r3, r2
 8011bd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	f023 0307 	bic.w	r3, r3, #7
 8011bde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	4a15      	ldr	r2, [pc, #84]	; (8011c38 <prvHeapInit+0xb4>)
 8011be4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011be6:	4b14      	ldr	r3, [pc, #80]	; (8011c38 <prvHeapInit+0xb4>)
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	2200      	movs	r2, #0
 8011bec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011bee:	4b12      	ldr	r3, [pc, #72]	; (8011c38 <prvHeapInit+0xb4>)
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	2200      	movs	r2, #0
 8011bf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011bfa:	683b      	ldr	r3, [r7, #0]
 8011bfc:	68fa      	ldr	r2, [r7, #12]
 8011bfe:	1ad2      	subs	r2, r2, r3
 8011c00:	683b      	ldr	r3, [r7, #0]
 8011c02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011c04:	4b0c      	ldr	r3, [pc, #48]	; (8011c38 <prvHeapInit+0xb4>)
 8011c06:	681a      	ldr	r2, [r3, #0]
 8011c08:	683b      	ldr	r3, [r7, #0]
 8011c0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011c0c:	683b      	ldr	r3, [r7, #0]
 8011c0e:	685b      	ldr	r3, [r3, #4]
 8011c10:	4a0a      	ldr	r2, [pc, #40]	; (8011c3c <prvHeapInit+0xb8>)
 8011c12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011c14:	683b      	ldr	r3, [r7, #0]
 8011c16:	685b      	ldr	r3, [r3, #4]
 8011c18:	4a09      	ldr	r2, [pc, #36]	; (8011c40 <prvHeapInit+0xbc>)
 8011c1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011c1c:	4b09      	ldr	r3, [pc, #36]	; (8011c44 <prvHeapInit+0xc0>)
 8011c1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011c22:	601a      	str	r2, [r3, #0]
}
 8011c24:	bf00      	nop
 8011c26:	3714      	adds	r7, #20
 8011c28:	46bd      	mov	sp, r7
 8011c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c2e:	4770      	bx	lr
 8011c30:	20001464 	.word	0x20001464
 8011c34:	20005ab4 	.word	0x20005ab4
 8011c38:	20005abc 	.word	0x20005abc
 8011c3c:	20005ac4 	.word	0x20005ac4
 8011c40:	20005ac0 	.word	0x20005ac0
 8011c44:	20005ad0 	.word	0x20005ad0

08011c48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011c48:	b480      	push	{r7}
 8011c4a:	b085      	sub	sp, #20
 8011c4c:	af00      	add	r7, sp, #0
 8011c4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011c50:	4b28      	ldr	r3, [pc, #160]	; (8011cf4 <prvInsertBlockIntoFreeList+0xac>)
 8011c52:	60fb      	str	r3, [r7, #12]
 8011c54:	e002      	b.n	8011c5c <prvInsertBlockIntoFreeList+0x14>
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	60fb      	str	r3, [r7, #12]
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	687a      	ldr	r2, [r7, #4]
 8011c62:	429a      	cmp	r2, r3
 8011c64:	d8f7      	bhi.n	8011c56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	685b      	ldr	r3, [r3, #4]
 8011c6e:	68ba      	ldr	r2, [r7, #8]
 8011c70:	4413      	add	r3, r2
 8011c72:	687a      	ldr	r2, [r7, #4]
 8011c74:	429a      	cmp	r2, r3
 8011c76:	d108      	bne.n	8011c8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	685a      	ldr	r2, [r3, #4]
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	685b      	ldr	r3, [r3, #4]
 8011c80:	441a      	add	r2, r3
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	685b      	ldr	r3, [r3, #4]
 8011c92:	68ba      	ldr	r2, [r7, #8]
 8011c94:	441a      	add	r2, r3
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	429a      	cmp	r2, r3
 8011c9c:	d118      	bne.n	8011cd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	681a      	ldr	r2, [r3, #0]
 8011ca2:	4b15      	ldr	r3, [pc, #84]	; (8011cf8 <prvInsertBlockIntoFreeList+0xb0>)
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	429a      	cmp	r2, r3
 8011ca8:	d00d      	beq.n	8011cc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	685a      	ldr	r2, [r3, #4]
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	685b      	ldr	r3, [r3, #4]
 8011cb4:	441a      	add	r2, r3
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	681a      	ldr	r2, [r3, #0]
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	601a      	str	r2, [r3, #0]
 8011cc4:	e008      	b.n	8011cd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011cc6:	4b0c      	ldr	r3, [pc, #48]	; (8011cf8 <prvInsertBlockIntoFreeList+0xb0>)
 8011cc8:	681a      	ldr	r2, [r3, #0]
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	601a      	str	r2, [r3, #0]
 8011cce:	e003      	b.n	8011cd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	681a      	ldr	r2, [r3, #0]
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011cd8:	68fa      	ldr	r2, [r7, #12]
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	429a      	cmp	r2, r3
 8011cde:	d002      	beq.n	8011ce6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	687a      	ldr	r2, [r7, #4]
 8011ce4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011ce6:	bf00      	nop
 8011ce8:	3714      	adds	r7, #20
 8011cea:	46bd      	mov	sp, r7
 8011cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf0:	4770      	bx	lr
 8011cf2:	bf00      	nop
 8011cf4:	20005ab4 	.word	0x20005ab4
 8011cf8:	20005abc 	.word	0x20005abc

08011cfc <_Znwj>:
 8011cfc:	2801      	cmp	r0, #1
 8011cfe:	bf38      	it	cc
 8011d00:	2001      	movcc	r0, #1
 8011d02:	b510      	push	{r4, lr}
 8011d04:	4604      	mov	r4, r0
 8011d06:	4620      	mov	r0, r4
 8011d08:	f001 f908 	bl	8012f1c <malloc>
 8011d0c:	b930      	cbnz	r0, 8011d1c <_Znwj+0x20>
 8011d0e:	f000 f81b 	bl	8011d48 <_ZSt15get_new_handlerv>
 8011d12:	b908      	cbnz	r0, 8011d18 <_Znwj+0x1c>
 8011d14:	f000 ffd6 	bl	8012cc4 <abort>
 8011d18:	4780      	blx	r0
 8011d1a:	e7f4      	b.n	8011d06 <_Znwj+0xa>
 8011d1c:	bd10      	pop	{r4, pc}

08011d1e <__cxa_pure_virtual>:
 8011d1e:	b508      	push	{r3, lr}
 8011d20:	f000 f80c 	bl	8011d3c <_ZSt9terminatev>

08011d24 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8011d24:	b508      	push	{r3, lr}
 8011d26:	4780      	blx	r0
 8011d28:	f000 ffcc 	bl	8012cc4 <abort>

08011d2c <_ZSt13get_terminatev>:
 8011d2c:	4b02      	ldr	r3, [pc, #8]	; (8011d38 <_ZSt13get_terminatev+0xc>)
 8011d2e:	6818      	ldr	r0, [r3, #0]
 8011d30:	f3bf 8f5b 	dmb	ish
 8011d34:	4770      	bx	lr
 8011d36:	bf00      	nop
 8011d38:	200000e8 	.word	0x200000e8

08011d3c <_ZSt9terminatev>:
 8011d3c:	b508      	push	{r3, lr}
 8011d3e:	f7ff fff5 	bl	8011d2c <_ZSt13get_terminatev>
 8011d42:	f7ff ffef 	bl	8011d24 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08011d48 <_ZSt15get_new_handlerv>:
 8011d48:	4b02      	ldr	r3, [pc, #8]	; (8011d54 <_ZSt15get_new_handlerv+0xc>)
 8011d4a:	6818      	ldr	r0, [r3, #0]
 8011d4c:	f3bf 8f5b 	dmb	ish
 8011d50:	4770      	bx	lr
 8011d52:	bf00      	nop
 8011d54:	20005ad4 	.word	0x20005ad4

08011d58 <pow>:
 8011d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d5c:	ec59 8b10 	vmov	r8, r9, d0
 8011d60:	ec57 6b11 	vmov	r6, r7, d1
 8011d64:	f000 f8a8 	bl	8011eb8 <__ieee754_pow>
 8011d68:	4b4e      	ldr	r3, [pc, #312]	; (8011ea4 <pow+0x14c>)
 8011d6a:	f993 3000 	ldrsb.w	r3, [r3]
 8011d6e:	3301      	adds	r3, #1
 8011d70:	ec55 4b10 	vmov	r4, r5, d0
 8011d74:	d015      	beq.n	8011da2 <pow+0x4a>
 8011d76:	4632      	mov	r2, r6
 8011d78:	463b      	mov	r3, r7
 8011d7a:	4630      	mov	r0, r6
 8011d7c:	4639      	mov	r1, r7
 8011d7e:	f7ee fef5 	bl	8000b6c <__aeabi_dcmpun>
 8011d82:	b970      	cbnz	r0, 8011da2 <pow+0x4a>
 8011d84:	4642      	mov	r2, r8
 8011d86:	464b      	mov	r3, r9
 8011d88:	4640      	mov	r0, r8
 8011d8a:	4649      	mov	r1, r9
 8011d8c:	f7ee feee 	bl	8000b6c <__aeabi_dcmpun>
 8011d90:	2200      	movs	r2, #0
 8011d92:	2300      	movs	r3, #0
 8011d94:	b148      	cbz	r0, 8011daa <pow+0x52>
 8011d96:	4630      	mov	r0, r6
 8011d98:	4639      	mov	r1, r7
 8011d9a:	f7ee feb5 	bl	8000b08 <__aeabi_dcmpeq>
 8011d9e:	2800      	cmp	r0, #0
 8011da0:	d17d      	bne.n	8011e9e <pow+0x146>
 8011da2:	ec45 4b10 	vmov	d0, r4, r5
 8011da6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011daa:	4640      	mov	r0, r8
 8011dac:	4649      	mov	r1, r9
 8011dae:	f7ee feab 	bl	8000b08 <__aeabi_dcmpeq>
 8011db2:	b1e0      	cbz	r0, 8011dee <pow+0x96>
 8011db4:	2200      	movs	r2, #0
 8011db6:	2300      	movs	r3, #0
 8011db8:	4630      	mov	r0, r6
 8011dba:	4639      	mov	r1, r7
 8011dbc:	f7ee fea4 	bl	8000b08 <__aeabi_dcmpeq>
 8011dc0:	2800      	cmp	r0, #0
 8011dc2:	d16c      	bne.n	8011e9e <pow+0x146>
 8011dc4:	ec47 6b10 	vmov	d0, r6, r7
 8011dc8:	f000 fe55 	bl	8012a76 <finite>
 8011dcc:	2800      	cmp	r0, #0
 8011dce:	d0e8      	beq.n	8011da2 <pow+0x4a>
 8011dd0:	2200      	movs	r2, #0
 8011dd2:	2300      	movs	r3, #0
 8011dd4:	4630      	mov	r0, r6
 8011dd6:	4639      	mov	r1, r7
 8011dd8:	f7ee fea0 	bl	8000b1c <__aeabi_dcmplt>
 8011ddc:	2800      	cmp	r0, #0
 8011dde:	d0e0      	beq.n	8011da2 <pow+0x4a>
 8011de0:	f000 ff78 	bl	8012cd4 <__errno>
 8011de4:	2321      	movs	r3, #33	; 0x21
 8011de6:	6003      	str	r3, [r0, #0]
 8011de8:	2400      	movs	r4, #0
 8011dea:	4d2f      	ldr	r5, [pc, #188]	; (8011ea8 <pow+0x150>)
 8011dec:	e7d9      	b.n	8011da2 <pow+0x4a>
 8011dee:	ec45 4b10 	vmov	d0, r4, r5
 8011df2:	f000 fe40 	bl	8012a76 <finite>
 8011df6:	bbb8      	cbnz	r0, 8011e68 <pow+0x110>
 8011df8:	ec49 8b10 	vmov	d0, r8, r9
 8011dfc:	f000 fe3b 	bl	8012a76 <finite>
 8011e00:	b390      	cbz	r0, 8011e68 <pow+0x110>
 8011e02:	ec47 6b10 	vmov	d0, r6, r7
 8011e06:	f000 fe36 	bl	8012a76 <finite>
 8011e0a:	b368      	cbz	r0, 8011e68 <pow+0x110>
 8011e0c:	4622      	mov	r2, r4
 8011e0e:	462b      	mov	r3, r5
 8011e10:	4620      	mov	r0, r4
 8011e12:	4629      	mov	r1, r5
 8011e14:	f7ee feaa 	bl	8000b6c <__aeabi_dcmpun>
 8011e18:	b160      	cbz	r0, 8011e34 <pow+0xdc>
 8011e1a:	f000 ff5b 	bl	8012cd4 <__errno>
 8011e1e:	2321      	movs	r3, #33	; 0x21
 8011e20:	6003      	str	r3, [r0, #0]
 8011e22:	2200      	movs	r2, #0
 8011e24:	2300      	movs	r3, #0
 8011e26:	4610      	mov	r0, r2
 8011e28:	4619      	mov	r1, r3
 8011e2a:	f7ee fd2f 	bl	800088c <__aeabi_ddiv>
 8011e2e:	4604      	mov	r4, r0
 8011e30:	460d      	mov	r5, r1
 8011e32:	e7b6      	b.n	8011da2 <pow+0x4a>
 8011e34:	f000 ff4e 	bl	8012cd4 <__errno>
 8011e38:	2322      	movs	r3, #34	; 0x22
 8011e3a:	6003      	str	r3, [r0, #0]
 8011e3c:	2200      	movs	r2, #0
 8011e3e:	2300      	movs	r3, #0
 8011e40:	4640      	mov	r0, r8
 8011e42:	4649      	mov	r1, r9
 8011e44:	f7ee fe6a 	bl	8000b1c <__aeabi_dcmplt>
 8011e48:	2400      	movs	r4, #0
 8011e4a:	b158      	cbz	r0, 8011e64 <pow+0x10c>
 8011e4c:	ec47 6b10 	vmov	d0, r6, r7
 8011e50:	f000 fe26 	bl	8012aa0 <rint>
 8011e54:	4632      	mov	r2, r6
 8011e56:	ec51 0b10 	vmov	r0, r1, d0
 8011e5a:	463b      	mov	r3, r7
 8011e5c:	f7ee fe54 	bl	8000b08 <__aeabi_dcmpeq>
 8011e60:	2800      	cmp	r0, #0
 8011e62:	d0c2      	beq.n	8011dea <pow+0x92>
 8011e64:	4d11      	ldr	r5, [pc, #68]	; (8011eac <pow+0x154>)
 8011e66:	e79c      	b.n	8011da2 <pow+0x4a>
 8011e68:	2200      	movs	r2, #0
 8011e6a:	2300      	movs	r3, #0
 8011e6c:	4620      	mov	r0, r4
 8011e6e:	4629      	mov	r1, r5
 8011e70:	f7ee fe4a 	bl	8000b08 <__aeabi_dcmpeq>
 8011e74:	2800      	cmp	r0, #0
 8011e76:	d094      	beq.n	8011da2 <pow+0x4a>
 8011e78:	ec49 8b10 	vmov	d0, r8, r9
 8011e7c:	f000 fdfb 	bl	8012a76 <finite>
 8011e80:	2800      	cmp	r0, #0
 8011e82:	d08e      	beq.n	8011da2 <pow+0x4a>
 8011e84:	ec47 6b10 	vmov	d0, r6, r7
 8011e88:	f000 fdf5 	bl	8012a76 <finite>
 8011e8c:	2800      	cmp	r0, #0
 8011e8e:	d088      	beq.n	8011da2 <pow+0x4a>
 8011e90:	f000 ff20 	bl	8012cd4 <__errno>
 8011e94:	2322      	movs	r3, #34	; 0x22
 8011e96:	6003      	str	r3, [r0, #0]
 8011e98:	2400      	movs	r4, #0
 8011e9a:	2500      	movs	r5, #0
 8011e9c:	e781      	b.n	8011da2 <pow+0x4a>
 8011e9e:	4d04      	ldr	r5, [pc, #16]	; (8011eb0 <pow+0x158>)
 8011ea0:	2400      	movs	r4, #0
 8011ea2:	e77e      	b.n	8011da2 <pow+0x4a>
 8011ea4:	200000ec 	.word	0x200000ec
 8011ea8:	fff00000 	.word	0xfff00000
 8011eac:	7ff00000 	.word	0x7ff00000
 8011eb0:	3ff00000 	.word	0x3ff00000
 8011eb4:	00000000 	.word	0x00000000

08011eb8 <__ieee754_pow>:
 8011eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ebc:	ed2d 8b06 	vpush	{d8-d10}
 8011ec0:	b08d      	sub	sp, #52	; 0x34
 8011ec2:	ed8d 1b02 	vstr	d1, [sp, #8]
 8011ec6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8011eca:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8011ece:	ea56 0100 	orrs.w	r1, r6, r0
 8011ed2:	ec53 2b10 	vmov	r2, r3, d0
 8011ed6:	f000 84d1 	beq.w	801287c <__ieee754_pow+0x9c4>
 8011eda:	497f      	ldr	r1, [pc, #508]	; (80120d8 <__ieee754_pow+0x220>)
 8011edc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8011ee0:	428c      	cmp	r4, r1
 8011ee2:	ee10 8a10 	vmov	r8, s0
 8011ee6:	4699      	mov	r9, r3
 8011ee8:	dc09      	bgt.n	8011efe <__ieee754_pow+0x46>
 8011eea:	d103      	bne.n	8011ef4 <__ieee754_pow+0x3c>
 8011eec:	b97a      	cbnz	r2, 8011f0e <__ieee754_pow+0x56>
 8011eee:	42a6      	cmp	r6, r4
 8011ef0:	dd02      	ble.n	8011ef8 <__ieee754_pow+0x40>
 8011ef2:	e00c      	b.n	8011f0e <__ieee754_pow+0x56>
 8011ef4:	428e      	cmp	r6, r1
 8011ef6:	dc02      	bgt.n	8011efe <__ieee754_pow+0x46>
 8011ef8:	428e      	cmp	r6, r1
 8011efa:	d110      	bne.n	8011f1e <__ieee754_pow+0x66>
 8011efc:	b178      	cbz	r0, 8011f1e <__ieee754_pow+0x66>
 8011efe:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011f02:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011f06:	ea54 0308 	orrs.w	r3, r4, r8
 8011f0a:	f000 84b7 	beq.w	801287c <__ieee754_pow+0x9c4>
 8011f0e:	4873      	ldr	r0, [pc, #460]	; (80120dc <__ieee754_pow+0x224>)
 8011f10:	b00d      	add	sp, #52	; 0x34
 8011f12:	ecbd 8b06 	vpop	{d8-d10}
 8011f16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f1a:	f000 bdb9 	b.w	8012a90 <nan>
 8011f1e:	f1b9 0f00 	cmp.w	r9, #0
 8011f22:	da36      	bge.n	8011f92 <__ieee754_pow+0xda>
 8011f24:	496e      	ldr	r1, [pc, #440]	; (80120e0 <__ieee754_pow+0x228>)
 8011f26:	428e      	cmp	r6, r1
 8011f28:	dc51      	bgt.n	8011fce <__ieee754_pow+0x116>
 8011f2a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8011f2e:	428e      	cmp	r6, r1
 8011f30:	f340 84af 	ble.w	8012892 <__ieee754_pow+0x9da>
 8011f34:	1531      	asrs	r1, r6, #20
 8011f36:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8011f3a:	2914      	cmp	r1, #20
 8011f3c:	dd0f      	ble.n	8011f5e <__ieee754_pow+0xa6>
 8011f3e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8011f42:	fa20 fc01 	lsr.w	ip, r0, r1
 8011f46:	fa0c f101 	lsl.w	r1, ip, r1
 8011f4a:	4281      	cmp	r1, r0
 8011f4c:	f040 84a1 	bne.w	8012892 <__ieee754_pow+0x9da>
 8011f50:	f00c 0c01 	and.w	ip, ip, #1
 8011f54:	f1cc 0102 	rsb	r1, ip, #2
 8011f58:	9100      	str	r1, [sp, #0]
 8011f5a:	b180      	cbz	r0, 8011f7e <__ieee754_pow+0xc6>
 8011f5c:	e059      	b.n	8012012 <__ieee754_pow+0x15a>
 8011f5e:	2800      	cmp	r0, #0
 8011f60:	d155      	bne.n	801200e <__ieee754_pow+0x156>
 8011f62:	f1c1 0114 	rsb	r1, r1, #20
 8011f66:	fa46 fc01 	asr.w	ip, r6, r1
 8011f6a:	fa0c f101 	lsl.w	r1, ip, r1
 8011f6e:	42b1      	cmp	r1, r6
 8011f70:	f040 848c 	bne.w	801288c <__ieee754_pow+0x9d4>
 8011f74:	f00c 0c01 	and.w	ip, ip, #1
 8011f78:	f1cc 0102 	rsb	r1, ip, #2
 8011f7c:	9100      	str	r1, [sp, #0]
 8011f7e:	4959      	ldr	r1, [pc, #356]	; (80120e4 <__ieee754_pow+0x22c>)
 8011f80:	428e      	cmp	r6, r1
 8011f82:	d12d      	bne.n	8011fe0 <__ieee754_pow+0x128>
 8011f84:	2f00      	cmp	r7, #0
 8011f86:	da79      	bge.n	801207c <__ieee754_pow+0x1c4>
 8011f88:	4956      	ldr	r1, [pc, #344]	; (80120e4 <__ieee754_pow+0x22c>)
 8011f8a:	2000      	movs	r0, #0
 8011f8c:	f7ee fc7e 	bl	800088c <__aeabi_ddiv>
 8011f90:	e016      	b.n	8011fc0 <__ieee754_pow+0x108>
 8011f92:	2100      	movs	r1, #0
 8011f94:	9100      	str	r1, [sp, #0]
 8011f96:	2800      	cmp	r0, #0
 8011f98:	d13b      	bne.n	8012012 <__ieee754_pow+0x15a>
 8011f9a:	494f      	ldr	r1, [pc, #316]	; (80120d8 <__ieee754_pow+0x220>)
 8011f9c:	428e      	cmp	r6, r1
 8011f9e:	d1ee      	bne.n	8011f7e <__ieee754_pow+0xc6>
 8011fa0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8011fa4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8011fa8:	ea53 0308 	orrs.w	r3, r3, r8
 8011fac:	f000 8466 	beq.w	801287c <__ieee754_pow+0x9c4>
 8011fb0:	4b4d      	ldr	r3, [pc, #308]	; (80120e8 <__ieee754_pow+0x230>)
 8011fb2:	429c      	cmp	r4, r3
 8011fb4:	dd0d      	ble.n	8011fd2 <__ieee754_pow+0x11a>
 8011fb6:	2f00      	cmp	r7, #0
 8011fb8:	f280 8464 	bge.w	8012884 <__ieee754_pow+0x9cc>
 8011fbc:	2000      	movs	r0, #0
 8011fbe:	2100      	movs	r1, #0
 8011fc0:	ec41 0b10 	vmov	d0, r0, r1
 8011fc4:	b00d      	add	sp, #52	; 0x34
 8011fc6:	ecbd 8b06 	vpop	{d8-d10}
 8011fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fce:	2102      	movs	r1, #2
 8011fd0:	e7e0      	b.n	8011f94 <__ieee754_pow+0xdc>
 8011fd2:	2f00      	cmp	r7, #0
 8011fd4:	daf2      	bge.n	8011fbc <__ieee754_pow+0x104>
 8011fd6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8011fda:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011fde:	e7ef      	b.n	8011fc0 <__ieee754_pow+0x108>
 8011fe0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8011fe4:	d104      	bne.n	8011ff0 <__ieee754_pow+0x138>
 8011fe6:	4610      	mov	r0, r2
 8011fe8:	4619      	mov	r1, r3
 8011fea:	f7ee fb25 	bl	8000638 <__aeabi_dmul>
 8011fee:	e7e7      	b.n	8011fc0 <__ieee754_pow+0x108>
 8011ff0:	493e      	ldr	r1, [pc, #248]	; (80120ec <__ieee754_pow+0x234>)
 8011ff2:	428f      	cmp	r7, r1
 8011ff4:	d10d      	bne.n	8012012 <__ieee754_pow+0x15a>
 8011ff6:	f1b9 0f00 	cmp.w	r9, #0
 8011ffa:	db0a      	blt.n	8012012 <__ieee754_pow+0x15a>
 8011ffc:	ec43 2b10 	vmov	d0, r2, r3
 8012000:	b00d      	add	sp, #52	; 0x34
 8012002:	ecbd 8b06 	vpop	{d8-d10}
 8012006:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801200a:	f000 bc77 	b.w	80128fc <__ieee754_sqrt>
 801200e:	2100      	movs	r1, #0
 8012010:	9100      	str	r1, [sp, #0]
 8012012:	ec43 2b10 	vmov	d0, r2, r3
 8012016:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801201a:	f000 fd23 	bl	8012a64 <fabs>
 801201e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012022:	ec51 0b10 	vmov	r0, r1, d0
 8012026:	f1b8 0f00 	cmp.w	r8, #0
 801202a:	d12a      	bne.n	8012082 <__ieee754_pow+0x1ca>
 801202c:	b12c      	cbz	r4, 801203a <__ieee754_pow+0x182>
 801202e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80120e4 <__ieee754_pow+0x22c>
 8012032:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8012036:	45e6      	cmp	lr, ip
 8012038:	d123      	bne.n	8012082 <__ieee754_pow+0x1ca>
 801203a:	2f00      	cmp	r7, #0
 801203c:	da05      	bge.n	801204a <__ieee754_pow+0x192>
 801203e:	4602      	mov	r2, r0
 8012040:	460b      	mov	r3, r1
 8012042:	2000      	movs	r0, #0
 8012044:	4927      	ldr	r1, [pc, #156]	; (80120e4 <__ieee754_pow+0x22c>)
 8012046:	f7ee fc21 	bl	800088c <__aeabi_ddiv>
 801204a:	f1b9 0f00 	cmp.w	r9, #0
 801204e:	dab7      	bge.n	8011fc0 <__ieee754_pow+0x108>
 8012050:	9b00      	ldr	r3, [sp, #0]
 8012052:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8012056:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801205a:	4323      	orrs	r3, r4
 801205c:	d108      	bne.n	8012070 <__ieee754_pow+0x1b8>
 801205e:	4602      	mov	r2, r0
 8012060:	460b      	mov	r3, r1
 8012062:	4610      	mov	r0, r2
 8012064:	4619      	mov	r1, r3
 8012066:	f7ee f92f 	bl	80002c8 <__aeabi_dsub>
 801206a:	4602      	mov	r2, r0
 801206c:	460b      	mov	r3, r1
 801206e:	e78d      	b.n	8011f8c <__ieee754_pow+0xd4>
 8012070:	9b00      	ldr	r3, [sp, #0]
 8012072:	2b01      	cmp	r3, #1
 8012074:	d1a4      	bne.n	8011fc0 <__ieee754_pow+0x108>
 8012076:	4602      	mov	r2, r0
 8012078:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801207c:	4610      	mov	r0, r2
 801207e:	4619      	mov	r1, r3
 8012080:	e79e      	b.n	8011fc0 <__ieee754_pow+0x108>
 8012082:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8012086:	f10c 35ff 	add.w	r5, ip, #4294967295
 801208a:	950a      	str	r5, [sp, #40]	; 0x28
 801208c:	9d00      	ldr	r5, [sp, #0]
 801208e:	46ac      	mov	ip, r5
 8012090:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8012092:	ea5c 0505 	orrs.w	r5, ip, r5
 8012096:	d0e4      	beq.n	8012062 <__ieee754_pow+0x1aa>
 8012098:	4b15      	ldr	r3, [pc, #84]	; (80120f0 <__ieee754_pow+0x238>)
 801209a:	429e      	cmp	r6, r3
 801209c:	f340 80fc 	ble.w	8012298 <__ieee754_pow+0x3e0>
 80120a0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80120a4:	429e      	cmp	r6, r3
 80120a6:	4b10      	ldr	r3, [pc, #64]	; (80120e8 <__ieee754_pow+0x230>)
 80120a8:	dd07      	ble.n	80120ba <__ieee754_pow+0x202>
 80120aa:	429c      	cmp	r4, r3
 80120ac:	dc0a      	bgt.n	80120c4 <__ieee754_pow+0x20c>
 80120ae:	2f00      	cmp	r7, #0
 80120b0:	da84      	bge.n	8011fbc <__ieee754_pow+0x104>
 80120b2:	a307      	add	r3, pc, #28	; (adr r3, 80120d0 <__ieee754_pow+0x218>)
 80120b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120b8:	e795      	b.n	8011fe6 <__ieee754_pow+0x12e>
 80120ba:	429c      	cmp	r4, r3
 80120bc:	dbf7      	blt.n	80120ae <__ieee754_pow+0x1f6>
 80120be:	4b09      	ldr	r3, [pc, #36]	; (80120e4 <__ieee754_pow+0x22c>)
 80120c0:	429c      	cmp	r4, r3
 80120c2:	dd17      	ble.n	80120f4 <__ieee754_pow+0x23c>
 80120c4:	2f00      	cmp	r7, #0
 80120c6:	dcf4      	bgt.n	80120b2 <__ieee754_pow+0x1fa>
 80120c8:	e778      	b.n	8011fbc <__ieee754_pow+0x104>
 80120ca:	bf00      	nop
 80120cc:	f3af 8000 	nop.w
 80120d0:	8800759c 	.word	0x8800759c
 80120d4:	7e37e43c 	.word	0x7e37e43c
 80120d8:	7ff00000 	.word	0x7ff00000
 80120dc:	0801a2db 	.word	0x0801a2db
 80120e0:	433fffff 	.word	0x433fffff
 80120e4:	3ff00000 	.word	0x3ff00000
 80120e8:	3fefffff 	.word	0x3fefffff
 80120ec:	3fe00000 	.word	0x3fe00000
 80120f0:	41e00000 	.word	0x41e00000
 80120f4:	4b64      	ldr	r3, [pc, #400]	; (8012288 <__ieee754_pow+0x3d0>)
 80120f6:	2200      	movs	r2, #0
 80120f8:	f7ee f8e6 	bl	80002c8 <__aeabi_dsub>
 80120fc:	a356      	add	r3, pc, #344	; (adr r3, 8012258 <__ieee754_pow+0x3a0>)
 80120fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012102:	4604      	mov	r4, r0
 8012104:	460d      	mov	r5, r1
 8012106:	f7ee fa97 	bl	8000638 <__aeabi_dmul>
 801210a:	a355      	add	r3, pc, #340	; (adr r3, 8012260 <__ieee754_pow+0x3a8>)
 801210c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012110:	4606      	mov	r6, r0
 8012112:	460f      	mov	r7, r1
 8012114:	4620      	mov	r0, r4
 8012116:	4629      	mov	r1, r5
 8012118:	f7ee fa8e 	bl	8000638 <__aeabi_dmul>
 801211c:	4b5b      	ldr	r3, [pc, #364]	; (801228c <__ieee754_pow+0x3d4>)
 801211e:	4682      	mov	sl, r0
 8012120:	468b      	mov	fp, r1
 8012122:	2200      	movs	r2, #0
 8012124:	4620      	mov	r0, r4
 8012126:	4629      	mov	r1, r5
 8012128:	f7ee fa86 	bl	8000638 <__aeabi_dmul>
 801212c:	4602      	mov	r2, r0
 801212e:	460b      	mov	r3, r1
 8012130:	a14d      	add	r1, pc, #308	; (adr r1, 8012268 <__ieee754_pow+0x3b0>)
 8012132:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012136:	f7ee f8c7 	bl	80002c8 <__aeabi_dsub>
 801213a:	4622      	mov	r2, r4
 801213c:	462b      	mov	r3, r5
 801213e:	f7ee fa7b 	bl	8000638 <__aeabi_dmul>
 8012142:	4602      	mov	r2, r0
 8012144:	460b      	mov	r3, r1
 8012146:	2000      	movs	r0, #0
 8012148:	4951      	ldr	r1, [pc, #324]	; (8012290 <__ieee754_pow+0x3d8>)
 801214a:	f7ee f8bd 	bl	80002c8 <__aeabi_dsub>
 801214e:	4622      	mov	r2, r4
 8012150:	4680      	mov	r8, r0
 8012152:	4689      	mov	r9, r1
 8012154:	462b      	mov	r3, r5
 8012156:	4620      	mov	r0, r4
 8012158:	4629      	mov	r1, r5
 801215a:	f7ee fa6d 	bl	8000638 <__aeabi_dmul>
 801215e:	4602      	mov	r2, r0
 8012160:	460b      	mov	r3, r1
 8012162:	4640      	mov	r0, r8
 8012164:	4649      	mov	r1, r9
 8012166:	f7ee fa67 	bl	8000638 <__aeabi_dmul>
 801216a:	a341      	add	r3, pc, #260	; (adr r3, 8012270 <__ieee754_pow+0x3b8>)
 801216c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012170:	f7ee fa62 	bl	8000638 <__aeabi_dmul>
 8012174:	4602      	mov	r2, r0
 8012176:	460b      	mov	r3, r1
 8012178:	4650      	mov	r0, sl
 801217a:	4659      	mov	r1, fp
 801217c:	f7ee f8a4 	bl	80002c8 <__aeabi_dsub>
 8012180:	4602      	mov	r2, r0
 8012182:	460b      	mov	r3, r1
 8012184:	4680      	mov	r8, r0
 8012186:	4689      	mov	r9, r1
 8012188:	4630      	mov	r0, r6
 801218a:	4639      	mov	r1, r7
 801218c:	f7ee f89e 	bl	80002cc <__adddf3>
 8012190:	2400      	movs	r4, #0
 8012192:	4632      	mov	r2, r6
 8012194:	463b      	mov	r3, r7
 8012196:	4620      	mov	r0, r4
 8012198:	460d      	mov	r5, r1
 801219a:	f7ee f895 	bl	80002c8 <__aeabi_dsub>
 801219e:	4602      	mov	r2, r0
 80121a0:	460b      	mov	r3, r1
 80121a2:	4640      	mov	r0, r8
 80121a4:	4649      	mov	r1, r9
 80121a6:	f7ee f88f 	bl	80002c8 <__aeabi_dsub>
 80121aa:	9b00      	ldr	r3, [sp, #0]
 80121ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80121ae:	3b01      	subs	r3, #1
 80121b0:	4313      	orrs	r3, r2
 80121b2:	4682      	mov	sl, r0
 80121b4:	468b      	mov	fp, r1
 80121b6:	f040 81f1 	bne.w	801259c <__ieee754_pow+0x6e4>
 80121ba:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8012278 <__ieee754_pow+0x3c0>
 80121be:	eeb0 8a47 	vmov.f32	s16, s14
 80121c2:	eef0 8a67 	vmov.f32	s17, s15
 80121c6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80121ca:	2600      	movs	r6, #0
 80121cc:	4632      	mov	r2, r6
 80121ce:	463b      	mov	r3, r7
 80121d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80121d4:	f7ee f878 	bl	80002c8 <__aeabi_dsub>
 80121d8:	4622      	mov	r2, r4
 80121da:	462b      	mov	r3, r5
 80121dc:	f7ee fa2c 	bl	8000638 <__aeabi_dmul>
 80121e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80121e4:	4680      	mov	r8, r0
 80121e6:	4689      	mov	r9, r1
 80121e8:	4650      	mov	r0, sl
 80121ea:	4659      	mov	r1, fp
 80121ec:	f7ee fa24 	bl	8000638 <__aeabi_dmul>
 80121f0:	4602      	mov	r2, r0
 80121f2:	460b      	mov	r3, r1
 80121f4:	4640      	mov	r0, r8
 80121f6:	4649      	mov	r1, r9
 80121f8:	f7ee f868 	bl	80002cc <__adddf3>
 80121fc:	4632      	mov	r2, r6
 80121fe:	463b      	mov	r3, r7
 8012200:	4680      	mov	r8, r0
 8012202:	4689      	mov	r9, r1
 8012204:	4620      	mov	r0, r4
 8012206:	4629      	mov	r1, r5
 8012208:	f7ee fa16 	bl	8000638 <__aeabi_dmul>
 801220c:	460b      	mov	r3, r1
 801220e:	4604      	mov	r4, r0
 8012210:	460d      	mov	r5, r1
 8012212:	4602      	mov	r2, r0
 8012214:	4649      	mov	r1, r9
 8012216:	4640      	mov	r0, r8
 8012218:	f7ee f858 	bl	80002cc <__adddf3>
 801221c:	4b1d      	ldr	r3, [pc, #116]	; (8012294 <__ieee754_pow+0x3dc>)
 801221e:	4299      	cmp	r1, r3
 8012220:	ec45 4b19 	vmov	d9, r4, r5
 8012224:	4606      	mov	r6, r0
 8012226:	460f      	mov	r7, r1
 8012228:	468b      	mov	fp, r1
 801222a:	f340 82fe 	ble.w	801282a <__ieee754_pow+0x972>
 801222e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8012232:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8012236:	4303      	orrs	r3, r0
 8012238:	f000 81f0 	beq.w	801261c <__ieee754_pow+0x764>
 801223c:	a310      	add	r3, pc, #64	; (adr r3, 8012280 <__ieee754_pow+0x3c8>)
 801223e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012242:	ec51 0b18 	vmov	r0, r1, d8
 8012246:	f7ee f9f7 	bl	8000638 <__aeabi_dmul>
 801224a:	a30d      	add	r3, pc, #52	; (adr r3, 8012280 <__ieee754_pow+0x3c8>)
 801224c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012250:	e6cb      	b.n	8011fea <__ieee754_pow+0x132>
 8012252:	bf00      	nop
 8012254:	f3af 8000 	nop.w
 8012258:	60000000 	.word	0x60000000
 801225c:	3ff71547 	.word	0x3ff71547
 8012260:	f85ddf44 	.word	0xf85ddf44
 8012264:	3e54ae0b 	.word	0x3e54ae0b
 8012268:	55555555 	.word	0x55555555
 801226c:	3fd55555 	.word	0x3fd55555
 8012270:	652b82fe 	.word	0x652b82fe
 8012274:	3ff71547 	.word	0x3ff71547
 8012278:	00000000 	.word	0x00000000
 801227c:	bff00000 	.word	0xbff00000
 8012280:	8800759c 	.word	0x8800759c
 8012284:	7e37e43c 	.word	0x7e37e43c
 8012288:	3ff00000 	.word	0x3ff00000
 801228c:	3fd00000 	.word	0x3fd00000
 8012290:	3fe00000 	.word	0x3fe00000
 8012294:	408fffff 	.word	0x408fffff
 8012298:	4bd7      	ldr	r3, [pc, #860]	; (80125f8 <__ieee754_pow+0x740>)
 801229a:	ea03 0309 	and.w	r3, r3, r9
 801229e:	2200      	movs	r2, #0
 80122a0:	b92b      	cbnz	r3, 80122ae <__ieee754_pow+0x3f6>
 80122a2:	4bd6      	ldr	r3, [pc, #856]	; (80125fc <__ieee754_pow+0x744>)
 80122a4:	f7ee f9c8 	bl	8000638 <__aeabi_dmul>
 80122a8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80122ac:	460c      	mov	r4, r1
 80122ae:	1523      	asrs	r3, r4, #20
 80122b0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80122b4:	4413      	add	r3, r2
 80122b6:	9309      	str	r3, [sp, #36]	; 0x24
 80122b8:	4bd1      	ldr	r3, [pc, #836]	; (8012600 <__ieee754_pow+0x748>)
 80122ba:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80122be:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80122c2:	429c      	cmp	r4, r3
 80122c4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80122c8:	dd08      	ble.n	80122dc <__ieee754_pow+0x424>
 80122ca:	4bce      	ldr	r3, [pc, #824]	; (8012604 <__ieee754_pow+0x74c>)
 80122cc:	429c      	cmp	r4, r3
 80122ce:	f340 8163 	ble.w	8012598 <__ieee754_pow+0x6e0>
 80122d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122d4:	3301      	adds	r3, #1
 80122d6:	9309      	str	r3, [sp, #36]	; 0x24
 80122d8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80122dc:	2400      	movs	r4, #0
 80122de:	00e3      	lsls	r3, r4, #3
 80122e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80122e2:	4bc9      	ldr	r3, [pc, #804]	; (8012608 <__ieee754_pow+0x750>)
 80122e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80122e8:	ed93 7b00 	vldr	d7, [r3]
 80122ec:	4629      	mov	r1, r5
 80122ee:	ec53 2b17 	vmov	r2, r3, d7
 80122f2:	eeb0 8a47 	vmov.f32	s16, s14
 80122f6:	eef0 8a67 	vmov.f32	s17, s15
 80122fa:	4682      	mov	sl, r0
 80122fc:	f7ed ffe4 	bl	80002c8 <__aeabi_dsub>
 8012300:	4652      	mov	r2, sl
 8012302:	4606      	mov	r6, r0
 8012304:	460f      	mov	r7, r1
 8012306:	462b      	mov	r3, r5
 8012308:	ec51 0b18 	vmov	r0, r1, d8
 801230c:	f7ed ffde 	bl	80002cc <__adddf3>
 8012310:	4602      	mov	r2, r0
 8012312:	460b      	mov	r3, r1
 8012314:	2000      	movs	r0, #0
 8012316:	49bd      	ldr	r1, [pc, #756]	; (801260c <__ieee754_pow+0x754>)
 8012318:	f7ee fab8 	bl	800088c <__aeabi_ddiv>
 801231c:	ec41 0b19 	vmov	d9, r0, r1
 8012320:	4602      	mov	r2, r0
 8012322:	460b      	mov	r3, r1
 8012324:	4630      	mov	r0, r6
 8012326:	4639      	mov	r1, r7
 8012328:	f7ee f986 	bl	8000638 <__aeabi_dmul>
 801232c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012330:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012334:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012338:	2300      	movs	r3, #0
 801233a:	9304      	str	r3, [sp, #16]
 801233c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8012340:	46ab      	mov	fp, r5
 8012342:	106d      	asrs	r5, r5, #1
 8012344:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8012348:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801234c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8012350:	2200      	movs	r2, #0
 8012352:	4640      	mov	r0, r8
 8012354:	4649      	mov	r1, r9
 8012356:	4614      	mov	r4, r2
 8012358:	461d      	mov	r5, r3
 801235a:	f7ee f96d 	bl	8000638 <__aeabi_dmul>
 801235e:	4602      	mov	r2, r0
 8012360:	460b      	mov	r3, r1
 8012362:	4630      	mov	r0, r6
 8012364:	4639      	mov	r1, r7
 8012366:	f7ed ffaf 	bl	80002c8 <__aeabi_dsub>
 801236a:	ec53 2b18 	vmov	r2, r3, d8
 801236e:	4606      	mov	r6, r0
 8012370:	460f      	mov	r7, r1
 8012372:	4620      	mov	r0, r4
 8012374:	4629      	mov	r1, r5
 8012376:	f7ed ffa7 	bl	80002c8 <__aeabi_dsub>
 801237a:	4602      	mov	r2, r0
 801237c:	460b      	mov	r3, r1
 801237e:	4650      	mov	r0, sl
 8012380:	4659      	mov	r1, fp
 8012382:	f7ed ffa1 	bl	80002c8 <__aeabi_dsub>
 8012386:	4642      	mov	r2, r8
 8012388:	464b      	mov	r3, r9
 801238a:	f7ee f955 	bl	8000638 <__aeabi_dmul>
 801238e:	4602      	mov	r2, r0
 8012390:	460b      	mov	r3, r1
 8012392:	4630      	mov	r0, r6
 8012394:	4639      	mov	r1, r7
 8012396:	f7ed ff97 	bl	80002c8 <__aeabi_dsub>
 801239a:	ec53 2b19 	vmov	r2, r3, d9
 801239e:	f7ee f94b 	bl	8000638 <__aeabi_dmul>
 80123a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80123a6:	ec41 0b18 	vmov	d8, r0, r1
 80123aa:	4610      	mov	r0, r2
 80123ac:	4619      	mov	r1, r3
 80123ae:	f7ee f943 	bl	8000638 <__aeabi_dmul>
 80123b2:	a37d      	add	r3, pc, #500	; (adr r3, 80125a8 <__ieee754_pow+0x6f0>)
 80123b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123b8:	4604      	mov	r4, r0
 80123ba:	460d      	mov	r5, r1
 80123bc:	f7ee f93c 	bl	8000638 <__aeabi_dmul>
 80123c0:	a37b      	add	r3, pc, #492	; (adr r3, 80125b0 <__ieee754_pow+0x6f8>)
 80123c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123c6:	f7ed ff81 	bl	80002cc <__adddf3>
 80123ca:	4622      	mov	r2, r4
 80123cc:	462b      	mov	r3, r5
 80123ce:	f7ee f933 	bl	8000638 <__aeabi_dmul>
 80123d2:	a379      	add	r3, pc, #484	; (adr r3, 80125b8 <__ieee754_pow+0x700>)
 80123d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123d8:	f7ed ff78 	bl	80002cc <__adddf3>
 80123dc:	4622      	mov	r2, r4
 80123de:	462b      	mov	r3, r5
 80123e0:	f7ee f92a 	bl	8000638 <__aeabi_dmul>
 80123e4:	a376      	add	r3, pc, #472	; (adr r3, 80125c0 <__ieee754_pow+0x708>)
 80123e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123ea:	f7ed ff6f 	bl	80002cc <__adddf3>
 80123ee:	4622      	mov	r2, r4
 80123f0:	462b      	mov	r3, r5
 80123f2:	f7ee f921 	bl	8000638 <__aeabi_dmul>
 80123f6:	a374      	add	r3, pc, #464	; (adr r3, 80125c8 <__ieee754_pow+0x710>)
 80123f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123fc:	f7ed ff66 	bl	80002cc <__adddf3>
 8012400:	4622      	mov	r2, r4
 8012402:	462b      	mov	r3, r5
 8012404:	f7ee f918 	bl	8000638 <__aeabi_dmul>
 8012408:	a371      	add	r3, pc, #452	; (adr r3, 80125d0 <__ieee754_pow+0x718>)
 801240a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801240e:	f7ed ff5d 	bl	80002cc <__adddf3>
 8012412:	4622      	mov	r2, r4
 8012414:	4606      	mov	r6, r0
 8012416:	460f      	mov	r7, r1
 8012418:	462b      	mov	r3, r5
 801241a:	4620      	mov	r0, r4
 801241c:	4629      	mov	r1, r5
 801241e:	f7ee f90b 	bl	8000638 <__aeabi_dmul>
 8012422:	4602      	mov	r2, r0
 8012424:	460b      	mov	r3, r1
 8012426:	4630      	mov	r0, r6
 8012428:	4639      	mov	r1, r7
 801242a:	f7ee f905 	bl	8000638 <__aeabi_dmul>
 801242e:	4642      	mov	r2, r8
 8012430:	4604      	mov	r4, r0
 8012432:	460d      	mov	r5, r1
 8012434:	464b      	mov	r3, r9
 8012436:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801243a:	f7ed ff47 	bl	80002cc <__adddf3>
 801243e:	ec53 2b18 	vmov	r2, r3, d8
 8012442:	f7ee f8f9 	bl	8000638 <__aeabi_dmul>
 8012446:	4622      	mov	r2, r4
 8012448:	462b      	mov	r3, r5
 801244a:	f7ed ff3f 	bl	80002cc <__adddf3>
 801244e:	4642      	mov	r2, r8
 8012450:	4682      	mov	sl, r0
 8012452:	468b      	mov	fp, r1
 8012454:	464b      	mov	r3, r9
 8012456:	4640      	mov	r0, r8
 8012458:	4649      	mov	r1, r9
 801245a:	f7ee f8ed 	bl	8000638 <__aeabi_dmul>
 801245e:	4b6c      	ldr	r3, [pc, #432]	; (8012610 <__ieee754_pow+0x758>)
 8012460:	2200      	movs	r2, #0
 8012462:	4606      	mov	r6, r0
 8012464:	460f      	mov	r7, r1
 8012466:	f7ed ff31 	bl	80002cc <__adddf3>
 801246a:	4652      	mov	r2, sl
 801246c:	465b      	mov	r3, fp
 801246e:	f7ed ff2d 	bl	80002cc <__adddf3>
 8012472:	9c04      	ldr	r4, [sp, #16]
 8012474:	460d      	mov	r5, r1
 8012476:	4622      	mov	r2, r4
 8012478:	460b      	mov	r3, r1
 801247a:	4640      	mov	r0, r8
 801247c:	4649      	mov	r1, r9
 801247e:	f7ee f8db 	bl	8000638 <__aeabi_dmul>
 8012482:	4b63      	ldr	r3, [pc, #396]	; (8012610 <__ieee754_pow+0x758>)
 8012484:	4680      	mov	r8, r0
 8012486:	4689      	mov	r9, r1
 8012488:	2200      	movs	r2, #0
 801248a:	4620      	mov	r0, r4
 801248c:	4629      	mov	r1, r5
 801248e:	f7ed ff1b 	bl	80002c8 <__aeabi_dsub>
 8012492:	4632      	mov	r2, r6
 8012494:	463b      	mov	r3, r7
 8012496:	f7ed ff17 	bl	80002c8 <__aeabi_dsub>
 801249a:	4602      	mov	r2, r0
 801249c:	460b      	mov	r3, r1
 801249e:	4650      	mov	r0, sl
 80124a0:	4659      	mov	r1, fp
 80124a2:	f7ed ff11 	bl	80002c8 <__aeabi_dsub>
 80124a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80124aa:	f7ee f8c5 	bl	8000638 <__aeabi_dmul>
 80124ae:	4622      	mov	r2, r4
 80124b0:	4606      	mov	r6, r0
 80124b2:	460f      	mov	r7, r1
 80124b4:	462b      	mov	r3, r5
 80124b6:	ec51 0b18 	vmov	r0, r1, d8
 80124ba:	f7ee f8bd 	bl	8000638 <__aeabi_dmul>
 80124be:	4602      	mov	r2, r0
 80124c0:	460b      	mov	r3, r1
 80124c2:	4630      	mov	r0, r6
 80124c4:	4639      	mov	r1, r7
 80124c6:	f7ed ff01 	bl	80002cc <__adddf3>
 80124ca:	4606      	mov	r6, r0
 80124cc:	460f      	mov	r7, r1
 80124ce:	4602      	mov	r2, r0
 80124d0:	460b      	mov	r3, r1
 80124d2:	4640      	mov	r0, r8
 80124d4:	4649      	mov	r1, r9
 80124d6:	f7ed fef9 	bl	80002cc <__adddf3>
 80124da:	9c04      	ldr	r4, [sp, #16]
 80124dc:	a33e      	add	r3, pc, #248	; (adr r3, 80125d8 <__ieee754_pow+0x720>)
 80124de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124e2:	4620      	mov	r0, r4
 80124e4:	460d      	mov	r5, r1
 80124e6:	f7ee f8a7 	bl	8000638 <__aeabi_dmul>
 80124ea:	4642      	mov	r2, r8
 80124ec:	ec41 0b18 	vmov	d8, r0, r1
 80124f0:	464b      	mov	r3, r9
 80124f2:	4620      	mov	r0, r4
 80124f4:	4629      	mov	r1, r5
 80124f6:	f7ed fee7 	bl	80002c8 <__aeabi_dsub>
 80124fa:	4602      	mov	r2, r0
 80124fc:	460b      	mov	r3, r1
 80124fe:	4630      	mov	r0, r6
 8012500:	4639      	mov	r1, r7
 8012502:	f7ed fee1 	bl	80002c8 <__aeabi_dsub>
 8012506:	a336      	add	r3, pc, #216	; (adr r3, 80125e0 <__ieee754_pow+0x728>)
 8012508:	e9d3 2300 	ldrd	r2, r3, [r3]
 801250c:	f7ee f894 	bl	8000638 <__aeabi_dmul>
 8012510:	a335      	add	r3, pc, #212	; (adr r3, 80125e8 <__ieee754_pow+0x730>)
 8012512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012516:	4606      	mov	r6, r0
 8012518:	460f      	mov	r7, r1
 801251a:	4620      	mov	r0, r4
 801251c:	4629      	mov	r1, r5
 801251e:	f7ee f88b 	bl	8000638 <__aeabi_dmul>
 8012522:	4602      	mov	r2, r0
 8012524:	460b      	mov	r3, r1
 8012526:	4630      	mov	r0, r6
 8012528:	4639      	mov	r1, r7
 801252a:	f7ed fecf 	bl	80002cc <__adddf3>
 801252e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012530:	4b38      	ldr	r3, [pc, #224]	; (8012614 <__ieee754_pow+0x75c>)
 8012532:	4413      	add	r3, r2
 8012534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012538:	f7ed fec8 	bl	80002cc <__adddf3>
 801253c:	4682      	mov	sl, r0
 801253e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012540:	468b      	mov	fp, r1
 8012542:	f7ee f80f 	bl	8000564 <__aeabi_i2d>
 8012546:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012548:	4b33      	ldr	r3, [pc, #204]	; (8012618 <__ieee754_pow+0x760>)
 801254a:	4413      	add	r3, r2
 801254c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012550:	4606      	mov	r6, r0
 8012552:	460f      	mov	r7, r1
 8012554:	4652      	mov	r2, sl
 8012556:	465b      	mov	r3, fp
 8012558:	ec51 0b18 	vmov	r0, r1, d8
 801255c:	f7ed feb6 	bl	80002cc <__adddf3>
 8012560:	4642      	mov	r2, r8
 8012562:	464b      	mov	r3, r9
 8012564:	f7ed feb2 	bl	80002cc <__adddf3>
 8012568:	4632      	mov	r2, r6
 801256a:	463b      	mov	r3, r7
 801256c:	f7ed feae 	bl	80002cc <__adddf3>
 8012570:	9c04      	ldr	r4, [sp, #16]
 8012572:	4632      	mov	r2, r6
 8012574:	463b      	mov	r3, r7
 8012576:	4620      	mov	r0, r4
 8012578:	460d      	mov	r5, r1
 801257a:	f7ed fea5 	bl	80002c8 <__aeabi_dsub>
 801257e:	4642      	mov	r2, r8
 8012580:	464b      	mov	r3, r9
 8012582:	f7ed fea1 	bl	80002c8 <__aeabi_dsub>
 8012586:	ec53 2b18 	vmov	r2, r3, d8
 801258a:	f7ed fe9d 	bl	80002c8 <__aeabi_dsub>
 801258e:	4602      	mov	r2, r0
 8012590:	460b      	mov	r3, r1
 8012592:	4650      	mov	r0, sl
 8012594:	4659      	mov	r1, fp
 8012596:	e606      	b.n	80121a6 <__ieee754_pow+0x2ee>
 8012598:	2401      	movs	r4, #1
 801259a:	e6a0      	b.n	80122de <__ieee754_pow+0x426>
 801259c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80125f0 <__ieee754_pow+0x738>
 80125a0:	e60d      	b.n	80121be <__ieee754_pow+0x306>
 80125a2:	bf00      	nop
 80125a4:	f3af 8000 	nop.w
 80125a8:	4a454eef 	.word	0x4a454eef
 80125ac:	3fca7e28 	.word	0x3fca7e28
 80125b0:	93c9db65 	.word	0x93c9db65
 80125b4:	3fcd864a 	.word	0x3fcd864a
 80125b8:	a91d4101 	.word	0xa91d4101
 80125bc:	3fd17460 	.word	0x3fd17460
 80125c0:	518f264d 	.word	0x518f264d
 80125c4:	3fd55555 	.word	0x3fd55555
 80125c8:	db6fabff 	.word	0xdb6fabff
 80125cc:	3fdb6db6 	.word	0x3fdb6db6
 80125d0:	33333303 	.word	0x33333303
 80125d4:	3fe33333 	.word	0x3fe33333
 80125d8:	e0000000 	.word	0xe0000000
 80125dc:	3feec709 	.word	0x3feec709
 80125e0:	dc3a03fd 	.word	0xdc3a03fd
 80125e4:	3feec709 	.word	0x3feec709
 80125e8:	145b01f5 	.word	0x145b01f5
 80125ec:	be3e2fe0 	.word	0xbe3e2fe0
 80125f0:	00000000 	.word	0x00000000
 80125f4:	3ff00000 	.word	0x3ff00000
 80125f8:	7ff00000 	.word	0x7ff00000
 80125fc:	43400000 	.word	0x43400000
 8012600:	0003988e 	.word	0x0003988e
 8012604:	000bb679 	.word	0x000bb679
 8012608:	0801a070 	.word	0x0801a070
 801260c:	3ff00000 	.word	0x3ff00000
 8012610:	40080000 	.word	0x40080000
 8012614:	0801a090 	.word	0x0801a090
 8012618:	0801a080 	.word	0x0801a080
 801261c:	a3b5      	add	r3, pc, #724	; (adr r3, 80128f4 <__ieee754_pow+0xa3c>)
 801261e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012622:	4640      	mov	r0, r8
 8012624:	4649      	mov	r1, r9
 8012626:	f7ed fe51 	bl	80002cc <__adddf3>
 801262a:	4622      	mov	r2, r4
 801262c:	ec41 0b1a 	vmov	d10, r0, r1
 8012630:	462b      	mov	r3, r5
 8012632:	4630      	mov	r0, r6
 8012634:	4639      	mov	r1, r7
 8012636:	f7ed fe47 	bl	80002c8 <__aeabi_dsub>
 801263a:	4602      	mov	r2, r0
 801263c:	460b      	mov	r3, r1
 801263e:	ec51 0b1a 	vmov	r0, r1, d10
 8012642:	f7ee fa89 	bl	8000b58 <__aeabi_dcmpgt>
 8012646:	2800      	cmp	r0, #0
 8012648:	f47f adf8 	bne.w	801223c <__ieee754_pow+0x384>
 801264c:	4aa4      	ldr	r2, [pc, #656]	; (80128e0 <__ieee754_pow+0xa28>)
 801264e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012652:	4293      	cmp	r3, r2
 8012654:	f340 810b 	ble.w	801286e <__ieee754_pow+0x9b6>
 8012658:	151b      	asrs	r3, r3, #20
 801265a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801265e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8012662:	fa4a f303 	asr.w	r3, sl, r3
 8012666:	445b      	add	r3, fp
 8012668:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801266c:	4e9d      	ldr	r6, [pc, #628]	; (80128e4 <__ieee754_pow+0xa2c>)
 801266e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8012672:	4116      	asrs	r6, r2
 8012674:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8012678:	2000      	movs	r0, #0
 801267a:	ea23 0106 	bic.w	r1, r3, r6
 801267e:	f1c2 0214 	rsb	r2, r2, #20
 8012682:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8012686:	fa4a fa02 	asr.w	sl, sl, r2
 801268a:	f1bb 0f00 	cmp.w	fp, #0
 801268e:	4602      	mov	r2, r0
 8012690:	460b      	mov	r3, r1
 8012692:	4620      	mov	r0, r4
 8012694:	4629      	mov	r1, r5
 8012696:	bfb8      	it	lt
 8012698:	f1ca 0a00 	rsblt	sl, sl, #0
 801269c:	f7ed fe14 	bl	80002c8 <__aeabi_dsub>
 80126a0:	ec41 0b19 	vmov	d9, r0, r1
 80126a4:	4642      	mov	r2, r8
 80126a6:	464b      	mov	r3, r9
 80126a8:	ec51 0b19 	vmov	r0, r1, d9
 80126ac:	f7ed fe0e 	bl	80002cc <__adddf3>
 80126b0:	2400      	movs	r4, #0
 80126b2:	a379      	add	r3, pc, #484	; (adr r3, 8012898 <__ieee754_pow+0x9e0>)
 80126b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126b8:	4620      	mov	r0, r4
 80126ba:	460d      	mov	r5, r1
 80126bc:	f7ed ffbc 	bl	8000638 <__aeabi_dmul>
 80126c0:	ec53 2b19 	vmov	r2, r3, d9
 80126c4:	4606      	mov	r6, r0
 80126c6:	460f      	mov	r7, r1
 80126c8:	4620      	mov	r0, r4
 80126ca:	4629      	mov	r1, r5
 80126cc:	f7ed fdfc 	bl	80002c8 <__aeabi_dsub>
 80126d0:	4602      	mov	r2, r0
 80126d2:	460b      	mov	r3, r1
 80126d4:	4640      	mov	r0, r8
 80126d6:	4649      	mov	r1, r9
 80126d8:	f7ed fdf6 	bl	80002c8 <__aeabi_dsub>
 80126dc:	a370      	add	r3, pc, #448	; (adr r3, 80128a0 <__ieee754_pow+0x9e8>)
 80126de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126e2:	f7ed ffa9 	bl	8000638 <__aeabi_dmul>
 80126e6:	a370      	add	r3, pc, #448	; (adr r3, 80128a8 <__ieee754_pow+0x9f0>)
 80126e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126ec:	4680      	mov	r8, r0
 80126ee:	4689      	mov	r9, r1
 80126f0:	4620      	mov	r0, r4
 80126f2:	4629      	mov	r1, r5
 80126f4:	f7ed ffa0 	bl	8000638 <__aeabi_dmul>
 80126f8:	4602      	mov	r2, r0
 80126fa:	460b      	mov	r3, r1
 80126fc:	4640      	mov	r0, r8
 80126fe:	4649      	mov	r1, r9
 8012700:	f7ed fde4 	bl	80002cc <__adddf3>
 8012704:	4604      	mov	r4, r0
 8012706:	460d      	mov	r5, r1
 8012708:	4602      	mov	r2, r0
 801270a:	460b      	mov	r3, r1
 801270c:	4630      	mov	r0, r6
 801270e:	4639      	mov	r1, r7
 8012710:	f7ed fddc 	bl	80002cc <__adddf3>
 8012714:	4632      	mov	r2, r6
 8012716:	463b      	mov	r3, r7
 8012718:	4680      	mov	r8, r0
 801271a:	4689      	mov	r9, r1
 801271c:	f7ed fdd4 	bl	80002c8 <__aeabi_dsub>
 8012720:	4602      	mov	r2, r0
 8012722:	460b      	mov	r3, r1
 8012724:	4620      	mov	r0, r4
 8012726:	4629      	mov	r1, r5
 8012728:	f7ed fdce 	bl	80002c8 <__aeabi_dsub>
 801272c:	4642      	mov	r2, r8
 801272e:	4606      	mov	r6, r0
 8012730:	460f      	mov	r7, r1
 8012732:	464b      	mov	r3, r9
 8012734:	4640      	mov	r0, r8
 8012736:	4649      	mov	r1, r9
 8012738:	f7ed ff7e 	bl	8000638 <__aeabi_dmul>
 801273c:	a35c      	add	r3, pc, #368	; (adr r3, 80128b0 <__ieee754_pow+0x9f8>)
 801273e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012742:	4604      	mov	r4, r0
 8012744:	460d      	mov	r5, r1
 8012746:	f7ed ff77 	bl	8000638 <__aeabi_dmul>
 801274a:	a35b      	add	r3, pc, #364	; (adr r3, 80128b8 <__ieee754_pow+0xa00>)
 801274c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012750:	f7ed fdba 	bl	80002c8 <__aeabi_dsub>
 8012754:	4622      	mov	r2, r4
 8012756:	462b      	mov	r3, r5
 8012758:	f7ed ff6e 	bl	8000638 <__aeabi_dmul>
 801275c:	a358      	add	r3, pc, #352	; (adr r3, 80128c0 <__ieee754_pow+0xa08>)
 801275e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012762:	f7ed fdb3 	bl	80002cc <__adddf3>
 8012766:	4622      	mov	r2, r4
 8012768:	462b      	mov	r3, r5
 801276a:	f7ed ff65 	bl	8000638 <__aeabi_dmul>
 801276e:	a356      	add	r3, pc, #344	; (adr r3, 80128c8 <__ieee754_pow+0xa10>)
 8012770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012774:	f7ed fda8 	bl	80002c8 <__aeabi_dsub>
 8012778:	4622      	mov	r2, r4
 801277a:	462b      	mov	r3, r5
 801277c:	f7ed ff5c 	bl	8000638 <__aeabi_dmul>
 8012780:	a353      	add	r3, pc, #332	; (adr r3, 80128d0 <__ieee754_pow+0xa18>)
 8012782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012786:	f7ed fda1 	bl	80002cc <__adddf3>
 801278a:	4622      	mov	r2, r4
 801278c:	462b      	mov	r3, r5
 801278e:	f7ed ff53 	bl	8000638 <__aeabi_dmul>
 8012792:	4602      	mov	r2, r0
 8012794:	460b      	mov	r3, r1
 8012796:	4640      	mov	r0, r8
 8012798:	4649      	mov	r1, r9
 801279a:	f7ed fd95 	bl	80002c8 <__aeabi_dsub>
 801279e:	4604      	mov	r4, r0
 80127a0:	460d      	mov	r5, r1
 80127a2:	4602      	mov	r2, r0
 80127a4:	460b      	mov	r3, r1
 80127a6:	4640      	mov	r0, r8
 80127a8:	4649      	mov	r1, r9
 80127aa:	f7ed ff45 	bl	8000638 <__aeabi_dmul>
 80127ae:	2200      	movs	r2, #0
 80127b0:	ec41 0b19 	vmov	d9, r0, r1
 80127b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80127b8:	4620      	mov	r0, r4
 80127ba:	4629      	mov	r1, r5
 80127bc:	f7ed fd84 	bl	80002c8 <__aeabi_dsub>
 80127c0:	4602      	mov	r2, r0
 80127c2:	460b      	mov	r3, r1
 80127c4:	ec51 0b19 	vmov	r0, r1, d9
 80127c8:	f7ee f860 	bl	800088c <__aeabi_ddiv>
 80127cc:	4632      	mov	r2, r6
 80127ce:	4604      	mov	r4, r0
 80127d0:	460d      	mov	r5, r1
 80127d2:	463b      	mov	r3, r7
 80127d4:	4640      	mov	r0, r8
 80127d6:	4649      	mov	r1, r9
 80127d8:	f7ed ff2e 	bl	8000638 <__aeabi_dmul>
 80127dc:	4632      	mov	r2, r6
 80127de:	463b      	mov	r3, r7
 80127e0:	f7ed fd74 	bl	80002cc <__adddf3>
 80127e4:	4602      	mov	r2, r0
 80127e6:	460b      	mov	r3, r1
 80127e8:	4620      	mov	r0, r4
 80127ea:	4629      	mov	r1, r5
 80127ec:	f7ed fd6c 	bl	80002c8 <__aeabi_dsub>
 80127f0:	4642      	mov	r2, r8
 80127f2:	464b      	mov	r3, r9
 80127f4:	f7ed fd68 	bl	80002c8 <__aeabi_dsub>
 80127f8:	460b      	mov	r3, r1
 80127fa:	4602      	mov	r2, r0
 80127fc:	493a      	ldr	r1, [pc, #232]	; (80128e8 <__ieee754_pow+0xa30>)
 80127fe:	2000      	movs	r0, #0
 8012800:	f7ed fd62 	bl	80002c8 <__aeabi_dsub>
 8012804:	e9cd 0100 	strd	r0, r1, [sp]
 8012808:	9b01      	ldr	r3, [sp, #4]
 801280a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801280e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012812:	da2f      	bge.n	8012874 <__ieee754_pow+0x9bc>
 8012814:	4650      	mov	r0, sl
 8012816:	ed9d 0b00 	vldr	d0, [sp]
 801281a:	f000 f9cd 	bl	8012bb8 <scalbn>
 801281e:	ec51 0b10 	vmov	r0, r1, d0
 8012822:	ec53 2b18 	vmov	r2, r3, d8
 8012826:	f7ff bbe0 	b.w	8011fea <__ieee754_pow+0x132>
 801282a:	4b30      	ldr	r3, [pc, #192]	; (80128ec <__ieee754_pow+0xa34>)
 801282c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8012830:	429e      	cmp	r6, r3
 8012832:	f77f af0b 	ble.w	801264c <__ieee754_pow+0x794>
 8012836:	4b2e      	ldr	r3, [pc, #184]	; (80128f0 <__ieee754_pow+0xa38>)
 8012838:	440b      	add	r3, r1
 801283a:	4303      	orrs	r3, r0
 801283c:	d00b      	beq.n	8012856 <__ieee754_pow+0x99e>
 801283e:	a326      	add	r3, pc, #152	; (adr r3, 80128d8 <__ieee754_pow+0xa20>)
 8012840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012844:	ec51 0b18 	vmov	r0, r1, d8
 8012848:	f7ed fef6 	bl	8000638 <__aeabi_dmul>
 801284c:	a322      	add	r3, pc, #136	; (adr r3, 80128d8 <__ieee754_pow+0xa20>)
 801284e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012852:	f7ff bbca 	b.w	8011fea <__ieee754_pow+0x132>
 8012856:	4622      	mov	r2, r4
 8012858:	462b      	mov	r3, r5
 801285a:	f7ed fd35 	bl	80002c8 <__aeabi_dsub>
 801285e:	4642      	mov	r2, r8
 8012860:	464b      	mov	r3, r9
 8012862:	f7ee f96f 	bl	8000b44 <__aeabi_dcmpge>
 8012866:	2800      	cmp	r0, #0
 8012868:	f43f aef0 	beq.w	801264c <__ieee754_pow+0x794>
 801286c:	e7e7      	b.n	801283e <__ieee754_pow+0x986>
 801286e:	f04f 0a00 	mov.w	sl, #0
 8012872:	e717      	b.n	80126a4 <__ieee754_pow+0x7ec>
 8012874:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012878:	4619      	mov	r1, r3
 801287a:	e7d2      	b.n	8012822 <__ieee754_pow+0x96a>
 801287c:	491a      	ldr	r1, [pc, #104]	; (80128e8 <__ieee754_pow+0xa30>)
 801287e:	2000      	movs	r0, #0
 8012880:	f7ff bb9e 	b.w	8011fc0 <__ieee754_pow+0x108>
 8012884:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012888:	f7ff bb9a 	b.w	8011fc0 <__ieee754_pow+0x108>
 801288c:	9000      	str	r0, [sp, #0]
 801288e:	f7ff bb76 	b.w	8011f7e <__ieee754_pow+0xc6>
 8012892:	2100      	movs	r1, #0
 8012894:	f7ff bb60 	b.w	8011f58 <__ieee754_pow+0xa0>
 8012898:	00000000 	.word	0x00000000
 801289c:	3fe62e43 	.word	0x3fe62e43
 80128a0:	fefa39ef 	.word	0xfefa39ef
 80128a4:	3fe62e42 	.word	0x3fe62e42
 80128a8:	0ca86c39 	.word	0x0ca86c39
 80128ac:	be205c61 	.word	0xbe205c61
 80128b0:	72bea4d0 	.word	0x72bea4d0
 80128b4:	3e663769 	.word	0x3e663769
 80128b8:	c5d26bf1 	.word	0xc5d26bf1
 80128bc:	3ebbbd41 	.word	0x3ebbbd41
 80128c0:	af25de2c 	.word	0xaf25de2c
 80128c4:	3f11566a 	.word	0x3f11566a
 80128c8:	16bebd93 	.word	0x16bebd93
 80128cc:	3f66c16c 	.word	0x3f66c16c
 80128d0:	5555553e 	.word	0x5555553e
 80128d4:	3fc55555 	.word	0x3fc55555
 80128d8:	c2f8f359 	.word	0xc2f8f359
 80128dc:	01a56e1f 	.word	0x01a56e1f
 80128e0:	3fe00000 	.word	0x3fe00000
 80128e4:	000fffff 	.word	0x000fffff
 80128e8:	3ff00000 	.word	0x3ff00000
 80128ec:	4090cbff 	.word	0x4090cbff
 80128f0:	3f6f3400 	.word	0x3f6f3400
 80128f4:	652b82fe 	.word	0x652b82fe
 80128f8:	3c971547 	.word	0x3c971547

080128fc <__ieee754_sqrt>:
 80128fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012900:	ec55 4b10 	vmov	r4, r5, d0
 8012904:	4e56      	ldr	r6, [pc, #344]	; (8012a60 <__ieee754_sqrt+0x164>)
 8012906:	43ae      	bics	r6, r5
 8012908:	ee10 0a10 	vmov	r0, s0
 801290c:	ee10 3a10 	vmov	r3, s0
 8012910:	4629      	mov	r1, r5
 8012912:	462a      	mov	r2, r5
 8012914:	d110      	bne.n	8012938 <__ieee754_sqrt+0x3c>
 8012916:	ee10 2a10 	vmov	r2, s0
 801291a:	462b      	mov	r3, r5
 801291c:	f7ed fe8c 	bl	8000638 <__aeabi_dmul>
 8012920:	4602      	mov	r2, r0
 8012922:	460b      	mov	r3, r1
 8012924:	4620      	mov	r0, r4
 8012926:	4629      	mov	r1, r5
 8012928:	f7ed fcd0 	bl	80002cc <__adddf3>
 801292c:	4604      	mov	r4, r0
 801292e:	460d      	mov	r5, r1
 8012930:	ec45 4b10 	vmov	d0, r4, r5
 8012934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012938:	2d00      	cmp	r5, #0
 801293a:	dc10      	bgt.n	801295e <__ieee754_sqrt+0x62>
 801293c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012940:	4330      	orrs	r0, r6
 8012942:	d0f5      	beq.n	8012930 <__ieee754_sqrt+0x34>
 8012944:	b15d      	cbz	r5, 801295e <__ieee754_sqrt+0x62>
 8012946:	ee10 2a10 	vmov	r2, s0
 801294a:	462b      	mov	r3, r5
 801294c:	ee10 0a10 	vmov	r0, s0
 8012950:	f7ed fcba 	bl	80002c8 <__aeabi_dsub>
 8012954:	4602      	mov	r2, r0
 8012956:	460b      	mov	r3, r1
 8012958:	f7ed ff98 	bl	800088c <__aeabi_ddiv>
 801295c:	e7e6      	b.n	801292c <__ieee754_sqrt+0x30>
 801295e:	1509      	asrs	r1, r1, #20
 8012960:	d076      	beq.n	8012a50 <__ieee754_sqrt+0x154>
 8012962:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8012966:	07ce      	lsls	r6, r1, #31
 8012968:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801296c:	bf5e      	ittt	pl
 801296e:	0fda      	lsrpl	r2, r3, #31
 8012970:	005b      	lslpl	r3, r3, #1
 8012972:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8012976:	0fda      	lsrs	r2, r3, #31
 8012978:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801297c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8012980:	2000      	movs	r0, #0
 8012982:	106d      	asrs	r5, r5, #1
 8012984:	005b      	lsls	r3, r3, #1
 8012986:	f04f 0e16 	mov.w	lr, #22
 801298a:	4684      	mov	ip, r0
 801298c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8012990:	eb0c 0401 	add.w	r4, ip, r1
 8012994:	4294      	cmp	r4, r2
 8012996:	bfde      	ittt	le
 8012998:	1b12      	suble	r2, r2, r4
 801299a:	eb04 0c01 	addle.w	ip, r4, r1
 801299e:	1840      	addle	r0, r0, r1
 80129a0:	0052      	lsls	r2, r2, #1
 80129a2:	f1be 0e01 	subs.w	lr, lr, #1
 80129a6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80129aa:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80129ae:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80129b2:	d1ed      	bne.n	8012990 <__ieee754_sqrt+0x94>
 80129b4:	4671      	mov	r1, lr
 80129b6:	2720      	movs	r7, #32
 80129b8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80129bc:	4562      	cmp	r2, ip
 80129be:	eb04 060e 	add.w	r6, r4, lr
 80129c2:	dc02      	bgt.n	80129ca <__ieee754_sqrt+0xce>
 80129c4:	d113      	bne.n	80129ee <__ieee754_sqrt+0xf2>
 80129c6:	429e      	cmp	r6, r3
 80129c8:	d811      	bhi.n	80129ee <__ieee754_sqrt+0xf2>
 80129ca:	2e00      	cmp	r6, #0
 80129cc:	eb06 0e04 	add.w	lr, r6, r4
 80129d0:	da43      	bge.n	8012a5a <__ieee754_sqrt+0x15e>
 80129d2:	f1be 0f00 	cmp.w	lr, #0
 80129d6:	db40      	blt.n	8012a5a <__ieee754_sqrt+0x15e>
 80129d8:	f10c 0801 	add.w	r8, ip, #1
 80129dc:	eba2 020c 	sub.w	r2, r2, ip
 80129e0:	429e      	cmp	r6, r3
 80129e2:	bf88      	it	hi
 80129e4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80129e8:	1b9b      	subs	r3, r3, r6
 80129ea:	4421      	add	r1, r4
 80129ec:	46c4      	mov	ip, r8
 80129ee:	0052      	lsls	r2, r2, #1
 80129f0:	3f01      	subs	r7, #1
 80129f2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80129f6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80129fa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80129fe:	d1dd      	bne.n	80129bc <__ieee754_sqrt+0xc0>
 8012a00:	4313      	orrs	r3, r2
 8012a02:	d006      	beq.n	8012a12 <__ieee754_sqrt+0x116>
 8012a04:	1c4c      	adds	r4, r1, #1
 8012a06:	bf13      	iteet	ne
 8012a08:	3101      	addne	r1, #1
 8012a0a:	3001      	addeq	r0, #1
 8012a0c:	4639      	moveq	r1, r7
 8012a0e:	f021 0101 	bicne.w	r1, r1, #1
 8012a12:	1043      	asrs	r3, r0, #1
 8012a14:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8012a18:	0849      	lsrs	r1, r1, #1
 8012a1a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8012a1e:	07c2      	lsls	r2, r0, #31
 8012a20:	bf48      	it	mi
 8012a22:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8012a26:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8012a2a:	460c      	mov	r4, r1
 8012a2c:	463d      	mov	r5, r7
 8012a2e:	e77f      	b.n	8012930 <__ieee754_sqrt+0x34>
 8012a30:	0ada      	lsrs	r2, r3, #11
 8012a32:	3815      	subs	r0, #21
 8012a34:	055b      	lsls	r3, r3, #21
 8012a36:	2a00      	cmp	r2, #0
 8012a38:	d0fa      	beq.n	8012a30 <__ieee754_sqrt+0x134>
 8012a3a:	02d7      	lsls	r7, r2, #11
 8012a3c:	d50a      	bpl.n	8012a54 <__ieee754_sqrt+0x158>
 8012a3e:	f1c1 0420 	rsb	r4, r1, #32
 8012a42:	fa23 f404 	lsr.w	r4, r3, r4
 8012a46:	1e4d      	subs	r5, r1, #1
 8012a48:	408b      	lsls	r3, r1
 8012a4a:	4322      	orrs	r2, r4
 8012a4c:	1b41      	subs	r1, r0, r5
 8012a4e:	e788      	b.n	8012962 <__ieee754_sqrt+0x66>
 8012a50:	4608      	mov	r0, r1
 8012a52:	e7f0      	b.n	8012a36 <__ieee754_sqrt+0x13a>
 8012a54:	0052      	lsls	r2, r2, #1
 8012a56:	3101      	adds	r1, #1
 8012a58:	e7ef      	b.n	8012a3a <__ieee754_sqrt+0x13e>
 8012a5a:	46e0      	mov	r8, ip
 8012a5c:	e7be      	b.n	80129dc <__ieee754_sqrt+0xe0>
 8012a5e:	bf00      	nop
 8012a60:	7ff00000 	.word	0x7ff00000

08012a64 <fabs>:
 8012a64:	ec51 0b10 	vmov	r0, r1, d0
 8012a68:	ee10 2a10 	vmov	r2, s0
 8012a6c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012a70:	ec43 2b10 	vmov	d0, r2, r3
 8012a74:	4770      	bx	lr

08012a76 <finite>:
 8012a76:	b082      	sub	sp, #8
 8012a78:	ed8d 0b00 	vstr	d0, [sp]
 8012a7c:	9801      	ldr	r0, [sp, #4]
 8012a7e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8012a82:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8012a86:	0fc0      	lsrs	r0, r0, #31
 8012a88:	b002      	add	sp, #8
 8012a8a:	4770      	bx	lr
 8012a8c:	0000      	movs	r0, r0
	...

08012a90 <nan>:
 8012a90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012a98 <nan+0x8>
 8012a94:	4770      	bx	lr
 8012a96:	bf00      	nop
 8012a98:	00000000 	.word	0x00000000
 8012a9c:	7ff80000 	.word	0x7ff80000

08012aa0 <rint>:
 8012aa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012aa2:	ec51 0b10 	vmov	r0, r1, d0
 8012aa6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012aaa:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8012aae:	2e13      	cmp	r6, #19
 8012ab0:	ee10 4a10 	vmov	r4, s0
 8012ab4:	460b      	mov	r3, r1
 8012ab6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8012aba:	dc58      	bgt.n	8012b6e <rint+0xce>
 8012abc:	2e00      	cmp	r6, #0
 8012abe:	da2b      	bge.n	8012b18 <rint+0x78>
 8012ac0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8012ac4:	4302      	orrs	r2, r0
 8012ac6:	d023      	beq.n	8012b10 <rint+0x70>
 8012ac8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8012acc:	4302      	orrs	r2, r0
 8012ace:	4254      	negs	r4, r2
 8012ad0:	4314      	orrs	r4, r2
 8012ad2:	0c4b      	lsrs	r3, r1, #17
 8012ad4:	0b24      	lsrs	r4, r4, #12
 8012ad6:	045b      	lsls	r3, r3, #17
 8012ad8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8012adc:	ea44 0103 	orr.w	r1, r4, r3
 8012ae0:	4b32      	ldr	r3, [pc, #200]	; (8012bac <rint+0x10c>)
 8012ae2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012ae6:	e9d3 6700 	ldrd	r6, r7, [r3]
 8012aea:	4602      	mov	r2, r0
 8012aec:	460b      	mov	r3, r1
 8012aee:	4630      	mov	r0, r6
 8012af0:	4639      	mov	r1, r7
 8012af2:	f7ed fbeb 	bl	80002cc <__adddf3>
 8012af6:	e9cd 0100 	strd	r0, r1, [sp]
 8012afa:	463b      	mov	r3, r7
 8012afc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012b00:	4632      	mov	r2, r6
 8012b02:	f7ed fbe1 	bl	80002c8 <__aeabi_dsub>
 8012b06:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012b0a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8012b0e:	4639      	mov	r1, r7
 8012b10:	ec41 0b10 	vmov	d0, r0, r1
 8012b14:	b003      	add	sp, #12
 8012b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b18:	4a25      	ldr	r2, [pc, #148]	; (8012bb0 <rint+0x110>)
 8012b1a:	4132      	asrs	r2, r6
 8012b1c:	ea01 0702 	and.w	r7, r1, r2
 8012b20:	4307      	orrs	r7, r0
 8012b22:	d0f5      	beq.n	8012b10 <rint+0x70>
 8012b24:	0851      	lsrs	r1, r2, #1
 8012b26:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8012b2a:	4314      	orrs	r4, r2
 8012b2c:	d00c      	beq.n	8012b48 <rint+0xa8>
 8012b2e:	ea23 0201 	bic.w	r2, r3, r1
 8012b32:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012b36:	2e13      	cmp	r6, #19
 8012b38:	fa43 f606 	asr.w	r6, r3, r6
 8012b3c:	bf0c      	ite	eq
 8012b3e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8012b42:	2400      	movne	r4, #0
 8012b44:	ea42 0306 	orr.w	r3, r2, r6
 8012b48:	4918      	ldr	r1, [pc, #96]	; (8012bac <rint+0x10c>)
 8012b4a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8012b4e:	4622      	mov	r2, r4
 8012b50:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012b54:	4620      	mov	r0, r4
 8012b56:	4629      	mov	r1, r5
 8012b58:	f7ed fbb8 	bl	80002cc <__adddf3>
 8012b5c:	e9cd 0100 	strd	r0, r1, [sp]
 8012b60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012b64:	4622      	mov	r2, r4
 8012b66:	462b      	mov	r3, r5
 8012b68:	f7ed fbae 	bl	80002c8 <__aeabi_dsub>
 8012b6c:	e7d0      	b.n	8012b10 <rint+0x70>
 8012b6e:	2e33      	cmp	r6, #51	; 0x33
 8012b70:	dd07      	ble.n	8012b82 <rint+0xe2>
 8012b72:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012b76:	d1cb      	bne.n	8012b10 <rint+0x70>
 8012b78:	ee10 2a10 	vmov	r2, s0
 8012b7c:	f7ed fba6 	bl	80002cc <__adddf3>
 8012b80:	e7c6      	b.n	8012b10 <rint+0x70>
 8012b82:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8012b86:	f04f 36ff 	mov.w	r6, #4294967295
 8012b8a:	40d6      	lsrs	r6, r2
 8012b8c:	4230      	tst	r0, r6
 8012b8e:	d0bf      	beq.n	8012b10 <rint+0x70>
 8012b90:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8012b94:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8012b98:	bf1f      	itttt	ne
 8012b9a:	ea24 0101 	bicne.w	r1, r4, r1
 8012b9e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8012ba2:	fa44 f202 	asrne.w	r2, r4, r2
 8012ba6:	ea41 0402 	orrne.w	r4, r1, r2
 8012baa:	e7cd      	b.n	8012b48 <rint+0xa8>
 8012bac:	0801a0a0 	.word	0x0801a0a0
 8012bb0:	000fffff 	.word	0x000fffff
 8012bb4:	00000000 	.word	0x00000000

08012bb8 <scalbn>:
 8012bb8:	b570      	push	{r4, r5, r6, lr}
 8012bba:	ec55 4b10 	vmov	r4, r5, d0
 8012bbe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012bc2:	4606      	mov	r6, r0
 8012bc4:	462b      	mov	r3, r5
 8012bc6:	b99a      	cbnz	r2, 8012bf0 <scalbn+0x38>
 8012bc8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012bcc:	4323      	orrs	r3, r4
 8012bce:	d036      	beq.n	8012c3e <scalbn+0x86>
 8012bd0:	4b39      	ldr	r3, [pc, #228]	; (8012cb8 <scalbn+0x100>)
 8012bd2:	4629      	mov	r1, r5
 8012bd4:	ee10 0a10 	vmov	r0, s0
 8012bd8:	2200      	movs	r2, #0
 8012bda:	f7ed fd2d 	bl	8000638 <__aeabi_dmul>
 8012bde:	4b37      	ldr	r3, [pc, #220]	; (8012cbc <scalbn+0x104>)
 8012be0:	429e      	cmp	r6, r3
 8012be2:	4604      	mov	r4, r0
 8012be4:	460d      	mov	r5, r1
 8012be6:	da10      	bge.n	8012c0a <scalbn+0x52>
 8012be8:	a32b      	add	r3, pc, #172	; (adr r3, 8012c98 <scalbn+0xe0>)
 8012bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bee:	e03a      	b.n	8012c66 <scalbn+0xae>
 8012bf0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012bf4:	428a      	cmp	r2, r1
 8012bf6:	d10c      	bne.n	8012c12 <scalbn+0x5a>
 8012bf8:	ee10 2a10 	vmov	r2, s0
 8012bfc:	4620      	mov	r0, r4
 8012bfe:	4629      	mov	r1, r5
 8012c00:	f7ed fb64 	bl	80002cc <__adddf3>
 8012c04:	4604      	mov	r4, r0
 8012c06:	460d      	mov	r5, r1
 8012c08:	e019      	b.n	8012c3e <scalbn+0x86>
 8012c0a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012c0e:	460b      	mov	r3, r1
 8012c10:	3a36      	subs	r2, #54	; 0x36
 8012c12:	4432      	add	r2, r6
 8012c14:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012c18:	428a      	cmp	r2, r1
 8012c1a:	dd08      	ble.n	8012c2e <scalbn+0x76>
 8012c1c:	2d00      	cmp	r5, #0
 8012c1e:	a120      	add	r1, pc, #128	; (adr r1, 8012ca0 <scalbn+0xe8>)
 8012c20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012c24:	da1c      	bge.n	8012c60 <scalbn+0xa8>
 8012c26:	a120      	add	r1, pc, #128	; (adr r1, 8012ca8 <scalbn+0xf0>)
 8012c28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012c2c:	e018      	b.n	8012c60 <scalbn+0xa8>
 8012c2e:	2a00      	cmp	r2, #0
 8012c30:	dd08      	ble.n	8012c44 <scalbn+0x8c>
 8012c32:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012c36:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012c3a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012c3e:	ec45 4b10 	vmov	d0, r4, r5
 8012c42:	bd70      	pop	{r4, r5, r6, pc}
 8012c44:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012c48:	da19      	bge.n	8012c7e <scalbn+0xc6>
 8012c4a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012c4e:	429e      	cmp	r6, r3
 8012c50:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8012c54:	dd0a      	ble.n	8012c6c <scalbn+0xb4>
 8012c56:	a112      	add	r1, pc, #72	; (adr r1, 8012ca0 <scalbn+0xe8>)
 8012c58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d1e2      	bne.n	8012c26 <scalbn+0x6e>
 8012c60:	a30f      	add	r3, pc, #60	; (adr r3, 8012ca0 <scalbn+0xe8>)
 8012c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c66:	f7ed fce7 	bl	8000638 <__aeabi_dmul>
 8012c6a:	e7cb      	b.n	8012c04 <scalbn+0x4c>
 8012c6c:	a10a      	add	r1, pc, #40	; (adr r1, 8012c98 <scalbn+0xe0>)
 8012c6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d0b8      	beq.n	8012be8 <scalbn+0x30>
 8012c76:	a10e      	add	r1, pc, #56	; (adr r1, 8012cb0 <scalbn+0xf8>)
 8012c78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012c7c:	e7b4      	b.n	8012be8 <scalbn+0x30>
 8012c7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012c82:	3236      	adds	r2, #54	; 0x36
 8012c84:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012c88:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8012c8c:	4620      	mov	r0, r4
 8012c8e:	4b0c      	ldr	r3, [pc, #48]	; (8012cc0 <scalbn+0x108>)
 8012c90:	2200      	movs	r2, #0
 8012c92:	e7e8      	b.n	8012c66 <scalbn+0xae>
 8012c94:	f3af 8000 	nop.w
 8012c98:	c2f8f359 	.word	0xc2f8f359
 8012c9c:	01a56e1f 	.word	0x01a56e1f
 8012ca0:	8800759c 	.word	0x8800759c
 8012ca4:	7e37e43c 	.word	0x7e37e43c
 8012ca8:	8800759c 	.word	0x8800759c
 8012cac:	fe37e43c 	.word	0xfe37e43c
 8012cb0:	c2f8f359 	.word	0xc2f8f359
 8012cb4:	81a56e1f 	.word	0x81a56e1f
 8012cb8:	43500000 	.word	0x43500000
 8012cbc:	ffff3cb0 	.word	0xffff3cb0
 8012cc0:	3c900000 	.word	0x3c900000

08012cc4 <abort>:
 8012cc4:	b508      	push	{r3, lr}
 8012cc6:	2006      	movs	r0, #6
 8012cc8:	f001 f9c2 	bl	8014050 <raise>
 8012ccc:	2001      	movs	r0, #1
 8012cce:	f005 f9d3 	bl	8018078 <_exit>
	...

08012cd4 <__errno>:
 8012cd4:	4b01      	ldr	r3, [pc, #4]	; (8012cdc <__errno+0x8>)
 8012cd6:	6818      	ldr	r0, [r3, #0]
 8012cd8:	4770      	bx	lr
 8012cda:	bf00      	nop
 8012cdc:	200000f0 	.word	0x200000f0

08012ce0 <std>:
 8012ce0:	2300      	movs	r3, #0
 8012ce2:	b510      	push	{r4, lr}
 8012ce4:	4604      	mov	r4, r0
 8012ce6:	e9c0 3300 	strd	r3, r3, [r0]
 8012cea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012cee:	6083      	str	r3, [r0, #8]
 8012cf0:	8181      	strh	r1, [r0, #12]
 8012cf2:	6643      	str	r3, [r0, #100]	; 0x64
 8012cf4:	81c2      	strh	r2, [r0, #14]
 8012cf6:	6183      	str	r3, [r0, #24]
 8012cf8:	4619      	mov	r1, r3
 8012cfa:	2208      	movs	r2, #8
 8012cfc:	305c      	adds	r0, #92	; 0x5c
 8012cfe:	f000 f945 	bl	8012f8c <memset>
 8012d02:	4b05      	ldr	r3, [pc, #20]	; (8012d18 <std+0x38>)
 8012d04:	6263      	str	r3, [r4, #36]	; 0x24
 8012d06:	4b05      	ldr	r3, [pc, #20]	; (8012d1c <std+0x3c>)
 8012d08:	62a3      	str	r3, [r4, #40]	; 0x28
 8012d0a:	4b05      	ldr	r3, [pc, #20]	; (8012d20 <std+0x40>)
 8012d0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012d0e:	4b05      	ldr	r3, [pc, #20]	; (8012d24 <std+0x44>)
 8012d10:	6224      	str	r4, [r4, #32]
 8012d12:	6323      	str	r3, [r4, #48]	; 0x30
 8012d14:	bd10      	pop	{r4, pc}
 8012d16:	bf00      	nop
 8012d18:	08014121 	.word	0x08014121
 8012d1c:	08014147 	.word	0x08014147
 8012d20:	0801417f 	.word	0x0801417f
 8012d24:	080141a3 	.word	0x080141a3

08012d28 <_cleanup_r>:
 8012d28:	4901      	ldr	r1, [pc, #4]	; (8012d30 <_cleanup_r+0x8>)
 8012d2a:	f000 b8af 	b.w	8012e8c <_fwalk_reent>
 8012d2e:	bf00      	nop
 8012d30:	0801602d 	.word	0x0801602d

08012d34 <__sfmoreglue>:
 8012d34:	b570      	push	{r4, r5, r6, lr}
 8012d36:	1e4a      	subs	r2, r1, #1
 8012d38:	2568      	movs	r5, #104	; 0x68
 8012d3a:	4355      	muls	r5, r2
 8012d3c:	460e      	mov	r6, r1
 8012d3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012d42:	f000 f97b 	bl	801303c <_malloc_r>
 8012d46:	4604      	mov	r4, r0
 8012d48:	b140      	cbz	r0, 8012d5c <__sfmoreglue+0x28>
 8012d4a:	2100      	movs	r1, #0
 8012d4c:	e9c0 1600 	strd	r1, r6, [r0]
 8012d50:	300c      	adds	r0, #12
 8012d52:	60a0      	str	r0, [r4, #8]
 8012d54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012d58:	f000 f918 	bl	8012f8c <memset>
 8012d5c:	4620      	mov	r0, r4
 8012d5e:	bd70      	pop	{r4, r5, r6, pc}

08012d60 <__sfp_lock_acquire>:
 8012d60:	4801      	ldr	r0, [pc, #4]	; (8012d68 <__sfp_lock_acquire+0x8>)
 8012d62:	f000 b8d8 	b.w	8012f16 <__retarget_lock_acquire_recursive>
 8012d66:	bf00      	nop
 8012d68:	20006548 	.word	0x20006548

08012d6c <__sfp_lock_release>:
 8012d6c:	4801      	ldr	r0, [pc, #4]	; (8012d74 <__sfp_lock_release+0x8>)
 8012d6e:	f000 b8d3 	b.w	8012f18 <__retarget_lock_release_recursive>
 8012d72:	bf00      	nop
 8012d74:	20006548 	.word	0x20006548

08012d78 <__sinit_lock_acquire>:
 8012d78:	4801      	ldr	r0, [pc, #4]	; (8012d80 <__sinit_lock_acquire+0x8>)
 8012d7a:	f000 b8cc 	b.w	8012f16 <__retarget_lock_acquire_recursive>
 8012d7e:	bf00      	nop
 8012d80:	20006543 	.word	0x20006543

08012d84 <__sinit_lock_release>:
 8012d84:	4801      	ldr	r0, [pc, #4]	; (8012d8c <__sinit_lock_release+0x8>)
 8012d86:	f000 b8c7 	b.w	8012f18 <__retarget_lock_release_recursive>
 8012d8a:	bf00      	nop
 8012d8c:	20006543 	.word	0x20006543

08012d90 <__sinit>:
 8012d90:	b510      	push	{r4, lr}
 8012d92:	4604      	mov	r4, r0
 8012d94:	f7ff fff0 	bl	8012d78 <__sinit_lock_acquire>
 8012d98:	69a3      	ldr	r3, [r4, #24]
 8012d9a:	b11b      	cbz	r3, 8012da4 <__sinit+0x14>
 8012d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012da0:	f7ff bff0 	b.w	8012d84 <__sinit_lock_release>
 8012da4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012da8:	6523      	str	r3, [r4, #80]	; 0x50
 8012daa:	4b13      	ldr	r3, [pc, #76]	; (8012df8 <__sinit+0x68>)
 8012dac:	4a13      	ldr	r2, [pc, #76]	; (8012dfc <__sinit+0x6c>)
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	62a2      	str	r2, [r4, #40]	; 0x28
 8012db2:	42a3      	cmp	r3, r4
 8012db4:	bf04      	itt	eq
 8012db6:	2301      	moveq	r3, #1
 8012db8:	61a3      	streq	r3, [r4, #24]
 8012dba:	4620      	mov	r0, r4
 8012dbc:	f000 f820 	bl	8012e00 <__sfp>
 8012dc0:	6060      	str	r0, [r4, #4]
 8012dc2:	4620      	mov	r0, r4
 8012dc4:	f000 f81c 	bl	8012e00 <__sfp>
 8012dc8:	60a0      	str	r0, [r4, #8]
 8012dca:	4620      	mov	r0, r4
 8012dcc:	f000 f818 	bl	8012e00 <__sfp>
 8012dd0:	2200      	movs	r2, #0
 8012dd2:	60e0      	str	r0, [r4, #12]
 8012dd4:	2104      	movs	r1, #4
 8012dd6:	6860      	ldr	r0, [r4, #4]
 8012dd8:	f7ff ff82 	bl	8012ce0 <std>
 8012ddc:	68a0      	ldr	r0, [r4, #8]
 8012dde:	2201      	movs	r2, #1
 8012de0:	2109      	movs	r1, #9
 8012de2:	f7ff ff7d 	bl	8012ce0 <std>
 8012de6:	68e0      	ldr	r0, [r4, #12]
 8012de8:	2202      	movs	r2, #2
 8012dea:	2112      	movs	r1, #18
 8012dec:	f7ff ff78 	bl	8012ce0 <std>
 8012df0:	2301      	movs	r3, #1
 8012df2:	61a3      	str	r3, [r4, #24]
 8012df4:	e7d2      	b.n	8012d9c <__sinit+0xc>
 8012df6:	bf00      	nop
 8012df8:	0801a214 	.word	0x0801a214
 8012dfc:	08012d29 	.word	0x08012d29

08012e00 <__sfp>:
 8012e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e02:	4607      	mov	r7, r0
 8012e04:	f7ff ffac 	bl	8012d60 <__sfp_lock_acquire>
 8012e08:	4b1e      	ldr	r3, [pc, #120]	; (8012e84 <__sfp+0x84>)
 8012e0a:	681e      	ldr	r6, [r3, #0]
 8012e0c:	69b3      	ldr	r3, [r6, #24]
 8012e0e:	b913      	cbnz	r3, 8012e16 <__sfp+0x16>
 8012e10:	4630      	mov	r0, r6
 8012e12:	f7ff ffbd 	bl	8012d90 <__sinit>
 8012e16:	3648      	adds	r6, #72	; 0x48
 8012e18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012e1c:	3b01      	subs	r3, #1
 8012e1e:	d503      	bpl.n	8012e28 <__sfp+0x28>
 8012e20:	6833      	ldr	r3, [r6, #0]
 8012e22:	b30b      	cbz	r3, 8012e68 <__sfp+0x68>
 8012e24:	6836      	ldr	r6, [r6, #0]
 8012e26:	e7f7      	b.n	8012e18 <__sfp+0x18>
 8012e28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012e2c:	b9d5      	cbnz	r5, 8012e64 <__sfp+0x64>
 8012e2e:	4b16      	ldr	r3, [pc, #88]	; (8012e88 <__sfp+0x88>)
 8012e30:	60e3      	str	r3, [r4, #12]
 8012e32:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012e36:	6665      	str	r5, [r4, #100]	; 0x64
 8012e38:	f000 f86c 	bl	8012f14 <__retarget_lock_init_recursive>
 8012e3c:	f7ff ff96 	bl	8012d6c <__sfp_lock_release>
 8012e40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012e44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012e48:	6025      	str	r5, [r4, #0]
 8012e4a:	61a5      	str	r5, [r4, #24]
 8012e4c:	2208      	movs	r2, #8
 8012e4e:	4629      	mov	r1, r5
 8012e50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012e54:	f000 f89a 	bl	8012f8c <memset>
 8012e58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012e5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012e60:	4620      	mov	r0, r4
 8012e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e64:	3468      	adds	r4, #104	; 0x68
 8012e66:	e7d9      	b.n	8012e1c <__sfp+0x1c>
 8012e68:	2104      	movs	r1, #4
 8012e6a:	4638      	mov	r0, r7
 8012e6c:	f7ff ff62 	bl	8012d34 <__sfmoreglue>
 8012e70:	4604      	mov	r4, r0
 8012e72:	6030      	str	r0, [r6, #0]
 8012e74:	2800      	cmp	r0, #0
 8012e76:	d1d5      	bne.n	8012e24 <__sfp+0x24>
 8012e78:	f7ff ff78 	bl	8012d6c <__sfp_lock_release>
 8012e7c:	230c      	movs	r3, #12
 8012e7e:	603b      	str	r3, [r7, #0]
 8012e80:	e7ee      	b.n	8012e60 <__sfp+0x60>
 8012e82:	bf00      	nop
 8012e84:	0801a214 	.word	0x0801a214
 8012e88:	ffff0001 	.word	0xffff0001

08012e8c <_fwalk_reent>:
 8012e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e90:	4606      	mov	r6, r0
 8012e92:	4688      	mov	r8, r1
 8012e94:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012e98:	2700      	movs	r7, #0
 8012e9a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012e9e:	f1b9 0901 	subs.w	r9, r9, #1
 8012ea2:	d505      	bpl.n	8012eb0 <_fwalk_reent+0x24>
 8012ea4:	6824      	ldr	r4, [r4, #0]
 8012ea6:	2c00      	cmp	r4, #0
 8012ea8:	d1f7      	bne.n	8012e9a <_fwalk_reent+0xe>
 8012eaa:	4638      	mov	r0, r7
 8012eac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012eb0:	89ab      	ldrh	r3, [r5, #12]
 8012eb2:	2b01      	cmp	r3, #1
 8012eb4:	d907      	bls.n	8012ec6 <_fwalk_reent+0x3a>
 8012eb6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012eba:	3301      	adds	r3, #1
 8012ebc:	d003      	beq.n	8012ec6 <_fwalk_reent+0x3a>
 8012ebe:	4629      	mov	r1, r5
 8012ec0:	4630      	mov	r0, r6
 8012ec2:	47c0      	blx	r8
 8012ec4:	4307      	orrs	r7, r0
 8012ec6:	3568      	adds	r5, #104	; 0x68
 8012ec8:	e7e9      	b.n	8012e9e <_fwalk_reent+0x12>
	...

08012ecc <__libc_init_array>:
 8012ecc:	b570      	push	{r4, r5, r6, lr}
 8012ece:	4d0d      	ldr	r5, [pc, #52]	; (8012f04 <__libc_init_array+0x38>)
 8012ed0:	4c0d      	ldr	r4, [pc, #52]	; (8012f08 <__libc_init_array+0x3c>)
 8012ed2:	1b64      	subs	r4, r4, r5
 8012ed4:	10a4      	asrs	r4, r4, #2
 8012ed6:	2600      	movs	r6, #0
 8012ed8:	42a6      	cmp	r6, r4
 8012eda:	d109      	bne.n	8012ef0 <__libc_init_array+0x24>
 8012edc:	4d0b      	ldr	r5, [pc, #44]	; (8012f0c <__libc_init_array+0x40>)
 8012ede:	4c0c      	ldr	r4, [pc, #48]	; (8012f10 <__libc_init_array+0x44>)
 8012ee0:	f005 f8cc 	bl	801807c <_init>
 8012ee4:	1b64      	subs	r4, r4, r5
 8012ee6:	10a4      	asrs	r4, r4, #2
 8012ee8:	2600      	movs	r6, #0
 8012eea:	42a6      	cmp	r6, r4
 8012eec:	d105      	bne.n	8012efa <__libc_init_array+0x2e>
 8012eee:	bd70      	pop	{r4, r5, r6, pc}
 8012ef0:	f855 3b04 	ldr.w	r3, [r5], #4
 8012ef4:	4798      	blx	r3
 8012ef6:	3601      	adds	r6, #1
 8012ef8:	e7ee      	b.n	8012ed8 <__libc_init_array+0xc>
 8012efa:	f855 3b04 	ldr.w	r3, [r5], #4
 8012efe:	4798      	blx	r3
 8012f00:	3601      	adds	r6, #1
 8012f02:	e7f2      	b.n	8012eea <__libc_init_array+0x1e>
 8012f04:	0801a580 	.word	0x0801a580
 8012f08:	0801a580 	.word	0x0801a580
 8012f0c:	0801a580 	.word	0x0801a580
 8012f10:	0801a588 	.word	0x0801a588

08012f14 <__retarget_lock_init_recursive>:
 8012f14:	4770      	bx	lr

08012f16 <__retarget_lock_acquire_recursive>:
 8012f16:	4770      	bx	lr

08012f18 <__retarget_lock_release_recursive>:
 8012f18:	4770      	bx	lr
	...

08012f1c <malloc>:
 8012f1c:	4b02      	ldr	r3, [pc, #8]	; (8012f28 <malloc+0xc>)
 8012f1e:	4601      	mov	r1, r0
 8012f20:	6818      	ldr	r0, [r3, #0]
 8012f22:	f000 b88b 	b.w	801303c <_malloc_r>
 8012f26:	bf00      	nop
 8012f28:	200000f0 	.word	0x200000f0

08012f2c <free>:
 8012f2c:	4b02      	ldr	r3, [pc, #8]	; (8012f38 <free+0xc>)
 8012f2e:	4601      	mov	r1, r0
 8012f30:	6818      	ldr	r0, [r3, #0]
 8012f32:	f000 b833 	b.w	8012f9c <_free_r>
 8012f36:	bf00      	nop
 8012f38:	200000f0 	.word	0x200000f0

08012f3c <memcpy>:
 8012f3c:	440a      	add	r2, r1
 8012f3e:	4291      	cmp	r1, r2
 8012f40:	f100 33ff 	add.w	r3, r0, #4294967295
 8012f44:	d100      	bne.n	8012f48 <memcpy+0xc>
 8012f46:	4770      	bx	lr
 8012f48:	b510      	push	{r4, lr}
 8012f4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012f4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012f52:	4291      	cmp	r1, r2
 8012f54:	d1f9      	bne.n	8012f4a <memcpy+0xe>
 8012f56:	bd10      	pop	{r4, pc}

08012f58 <memmove>:
 8012f58:	4288      	cmp	r0, r1
 8012f5a:	b510      	push	{r4, lr}
 8012f5c:	eb01 0402 	add.w	r4, r1, r2
 8012f60:	d902      	bls.n	8012f68 <memmove+0x10>
 8012f62:	4284      	cmp	r4, r0
 8012f64:	4623      	mov	r3, r4
 8012f66:	d807      	bhi.n	8012f78 <memmove+0x20>
 8012f68:	1e43      	subs	r3, r0, #1
 8012f6a:	42a1      	cmp	r1, r4
 8012f6c:	d008      	beq.n	8012f80 <memmove+0x28>
 8012f6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012f72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012f76:	e7f8      	b.n	8012f6a <memmove+0x12>
 8012f78:	4402      	add	r2, r0
 8012f7a:	4601      	mov	r1, r0
 8012f7c:	428a      	cmp	r2, r1
 8012f7e:	d100      	bne.n	8012f82 <memmove+0x2a>
 8012f80:	bd10      	pop	{r4, pc}
 8012f82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012f86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012f8a:	e7f7      	b.n	8012f7c <memmove+0x24>

08012f8c <memset>:
 8012f8c:	4402      	add	r2, r0
 8012f8e:	4603      	mov	r3, r0
 8012f90:	4293      	cmp	r3, r2
 8012f92:	d100      	bne.n	8012f96 <memset+0xa>
 8012f94:	4770      	bx	lr
 8012f96:	f803 1b01 	strb.w	r1, [r3], #1
 8012f9a:	e7f9      	b.n	8012f90 <memset+0x4>

08012f9c <_free_r>:
 8012f9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012f9e:	2900      	cmp	r1, #0
 8012fa0:	d048      	beq.n	8013034 <_free_r+0x98>
 8012fa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012fa6:	9001      	str	r0, [sp, #4]
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	f1a1 0404 	sub.w	r4, r1, #4
 8012fae:	bfb8      	it	lt
 8012fb0:	18e4      	addlt	r4, r4, r3
 8012fb2:	f003 fc85 	bl	80168c0 <__malloc_lock>
 8012fb6:	4a20      	ldr	r2, [pc, #128]	; (8013038 <_free_r+0x9c>)
 8012fb8:	9801      	ldr	r0, [sp, #4]
 8012fba:	6813      	ldr	r3, [r2, #0]
 8012fbc:	4615      	mov	r5, r2
 8012fbe:	b933      	cbnz	r3, 8012fce <_free_r+0x32>
 8012fc0:	6063      	str	r3, [r4, #4]
 8012fc2:	6014      	str	r4, [r2, #0]
 8012fc4:	b003      	add	sp, #12
 8012fc6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012fca:	f003 bc7f 	b.w	80168cc <__malloc_unlock>
 8012fce:	42a3      	cmp	r3, r4
 8012fd0:	d90b      	bls.n	8012fea <_free_r+0x4e>
 8012fd2:	6821      	ldr	r1, [r4, #0]
 8012fd4:	1862      	adds	r2, r4, r1
 8012fd6:	4293      	cmp	r3, r2
 8012fd8:	bf04      	itt	eq
 8012fda:	681a      	ldreq	r2, [r3, #0]
 8012fdc:	685b      	ldreq	r3, [r3, #4]
 8012fde:	6063      	str	r3, [r4, #4]
 8012fe0:	bf04      	itt	eq
 8012fe2:	1852      	addeq	r2, r2, r1
 8012fe4:	6022      	streq	r2, [r4, #0]
 8012fe6:	602c      	str	r4, [r5, #0]
 8012fe8:	e7ec      	b.n	8012fc4 <_free_r+0x28>
 8012fea:	461a      	mov	r2, r3
 8012fec:	685b      	ldr	r3, [r3, #4]
 8012fee:	b10b      	cbz	r3, 8012ff4 <_free_r+0x58>
 8012ff0:	42a3      	cmp	r3, r4
 8012ff2:	d9fa      	bls.n	8012fea <_free_r+0x4e>
 8012ff4:	6811      	ldr	r1, [r2, #0]
 8012ff6:	1855      	adds	r5, r2, r1
 8012ff8:	42a5      	cmp	r5, r4
 8012ffa:	d10b      	bne.n	8013014 <_free_r+0x78>
 8012ffc:	6824      	ldr	r4, [r4, #0]
 8012ffe:	4421      	add	r1, r4
 8013000:	1854      	adds	r4, r2, r1
 8013002:	42a3      	cmp	r3, r4
 8013004:	6011      	str	r1, [r2, #0]
 8013006:	d1dd      	bne.n	8012fc4 <_free_r+0x28>
 8013008:	681c      	ldr	r4, [r3, #0]
 801300a:	685b      	ldr	r3, [r3, #4]
 801300c:	6053      	str	r3, [r2, #4]
 801300e:	4421      	add	r1, r4
 8013010:	6011      	str	r1, [r2, #0]
 8013012:	e7d7      	b.n	8012fc4 <_free_r+0x28>
 8013014:	d902      	bls.n	801301c <_free_r+0x80>
 8013016:	230c      	movs	r3, #12
 8013018:	6003      	str	r3, [r0, #0]
 801301a:	e7d3      	b.n	8012fc4 <_free_r+0x28>
 801301c:	6825      	ldr	r5, [r4, #0]
 801301e:	1961      	adds	r1, r4, r5
 8013020:	428b      	cmp	r3, r1
 8013022:	bf04      	itt	eq
 8013024:	6819      	ldreq	r1, [r3, #0]
 8013026:	685b      	ldreq	r3, [r3, #4]
 8013028:	6063      	str	r3, [r4, #4]
 801302a:	bf04      	itt	eq
 801302c:	1949      	addeq	r1, r1, r5
 801302e:	6021      	streq	r1, [r4, #0]
 8013030:	6054      	str	r4, [r2, #4]
 8013032:	e7c7      	b.n	8012fc4 <_free_r+0x28>
 8013034:	b003      	add	sp, #12
 8013036:	bd30      	pop	{r4, r5, pc}
 8013038:	20005ad8 	.word	0x20005ad8

0801303c <_malloc_r>:
 801303c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801303e:	1ccd      	adds	r5, r1, #3
 8013040:	f025 0503 	bic.w	r5, r5, #3
 8013044:	3508      	adds	r5, #8
 8013046:	2d0c      	cmp	r5, #12
 8013048:	bf38      	it	cc
 801304a:	250c      	movcc	r5, #12
 801304c:	2d00      	cmp	r5, #0
 801304e:	4606      	mov	r6, r0
 8013050:	db01      	blt.n	8013056 <_malloc_r+0x1a>
 8013052:	42a9      	cmp	r1, r5
 8013054:	d903      	bls.n	801305e <_malloc_r+0x22>
 8013056:	230c      	movs	r3, #12
 8013058:	6033      	str	r3, [r6, #0]
 801305a:	2000      	movs	r0, #0
 801305c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801305e:	f003 fc2f 	bl	80168c0 <__malloc_lock>
 8013062:	4921      	ldr	r1, [pc, #132]	; (80130e8 <_malloc_r+0xac>)
 8013064:	680a      	ldr	r2, [r1, #0]
 8013066:	4614      	mov	r4, r2
 8013068:	b99c      	cbnz	r4, 8013092 <_malloc_r+0x56>
 801306a:	4f20      	ldr	r7, [pc, #128]	; (80130ec <_malloc_r+0xb0>)
 801306c:	683b      	ldr	r3, [r7, #0]
 801306e:	b923      	cbnz	r3, 801307a <_malloc_r+0x3e>
 8013070:	4621      	mov	r1, r4
 8013072:	4630      	mov	r0, r6
 8013074:	f000 ffae 	bl	8013fd4 <_sbrk_r>
 8013078:	6038      	str	r0, [r7, #0]
 801307a:	4629      	mov	r1, r5
 801307c:	4630      	mov	r0, r6
 801307e:	f000 ffa9 	bl	8013fd4 <_sbrk_r>
 8013082:	1c43      	adds	r3, r0, #1
 8013084:	d123      	bne.n	80130ce <_malloc_r+0x92>
 8013086:	230c      	movs	r3, #12
 8013088:	6033      	str	r3, [r6, #0]
 801308a:	4630      	mov	r0, r6
 801308c:	f003 fc1e 	bl	80168cc <__malloc_unlock>
 8013090:	e7e3      	b.n	801305a <_malloc_r+0x1e>
 8013092:	6823      	ldr	r3, [r4, #0]
 8013094:	1b5b      	subs	r3, r3, r5
 8013096:	d417      	bmi.n	80130c8 <_malloc_r+0x8c>
 8013098:	2b0b      	cmp	r3, #11
 801309a:	d903      	bls.n	80130a4 <_malloc_r+0x68>
 801309c:	6023      	str	r3, [r4, #0]
 801309e:	441c      	add	r4, r3
 80130a0:	6025      	str	r5, [r4, #0]
 80130a2:	e004      	b.n	80130ae <_malloc_r+0x72>
 80130a4:	6863      	ldr	r3, [r4, #4]
 80130a6:	42a2      	cmp	r2, r4
 80130a8:	bf0c      	ite	eq
 80130aa:	600b      	streq	r3, [r1, #0]
 80130ac:	6053      	strne	r3, [r2, #4]
 80130ae:	4630      	mov	r0, r6
 80130b0:	f003 fc0c 	bl	80168cc <__malloc_unlock>
 80130b4:	f104 000b 	add.w	r0, r4, #11
 80130b8:	1d23      	adds	r3, r4, #4
 80130ba:	f020 0007 	bic.w	r0, r0, #7
 80130be:	1ac2      	subs	r2, r0, r3
 80130c0:	d0cc      	beq.n	801305c <_malloc_r+0x20>
 80130c2:	1a1b      	subs	r3, r3, r0
 80130c4:	50a3      	str	r3, [r4, r2]
 80130c6:	e7c9      	b.n	801305c <_malloc_r+0x20>
 80130c8:	4622      	mov	r2, r4
 80130ca:	6864      	ldr	r4, [r4, #4]
 80130cc:	e7cc      	b.n	8013068 <_malloc_r+0x2c>
 80130ce:	1cc4      	adds	r4, r0, #3
 80130d0:	f024 0403 	bic.w	r4, r4, #3
 80130d4:	42a0      	cmp	r0, r4
 80130d6:	d0e3      	beq.n	80130a0 <_malloc_r+0x64>
 80130d8:	1a21      	subs	r1, r4, r0
 80130da:	4630      	mov	r0, r6
 80130dc:	f000 ff7a 	bl	8013fd4 <_sbrk_r>
 80130e0:	3001      	adds	r0, #1
 80130e2:	d1dd      	bne.n	80130a0 <_malloc_r+0x64>
 80130e4:	e7cf      	b.n	8013086 <_malloc_r+0x4a>
 80130e6:	bf00      	nop
 80130e8:	20005ad8 	.word	0x20005ad8
 80130ec:	20005adc 	.word	0x20005adc

080130f0 <__cvt>:
 80130f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80130f4:	ec55 4b10 	vmov	r4, r5, d0
 80130f8:	2d00      	cmp	r5, #0
 80130fa:	460e      	mov	r6, r1
 80130fc:	4619      	mov	r1, r3
 80130fe:	462b      	mov	r3, r5
 8013100:	bfbb      	ittet	lt
 8013102:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8013106:	461d      	movlt	r5, r3
 8013108:	2300      	movge	r3, #0
 801310a:	232d      	movlt	r3, #45	; 0x2d
 801310c:	700b      	strb	r3, [r1, #0]
 801310e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013110:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8013114:	4691      	mov	r9, r2
 8013116:	f023 0820 	bic.w	r8, r3, #32
 801311a:	bfbc      	itt	lt
 801311c:	4622      	movlt	r2, r4
 801311e:	4614      	movlt	r4, r2
 8013120:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013124:	d005      	beq.n	8013132 <__cvt+0x42>
 8013126:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801312a:	d100      	bne.n	801312e <__cvt+0x3e>
 801312c:	3601      	adds	r6, #1
 801312e:	2102      	movs	r1, #2
 8013130:	e000      	b.n	8013134 <__cvt+0x44>
 8013132:	2103      	movs	r1, #3
 8013134:	ab03      	add	r3, sp, #12
 8013136:	9301      	str	r3, [sp, #4]
 8013138:	ab02      	add	r3, sp, #8
 801313a:	9300      	str	r3, [sp, #0]
 801313c:	ec45 4b10 	vmov	d0, r4, r5
 8013140:	4653      	mov	r3, sl
 8013142:	4632      	mov	r2, r6
 8013144:	f002 f900 	bl	8015348 <_dtoa_r>
 8013148:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801314c:	4607      	mov	r7, r0
 801314e:	d102      	bne.n	8013156 <__cvt+0x66>
 8013150:	f019 0f01 	tst.w	r9, #1
 8013154:	d022      	beq.n	801319c <__cvt+0xac>
 8013156:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801315a:	eb07 0906 	add.w	r9, r7, r6
 801315e:	d110      	bne.n	8013182 <__cvt+0x92>
 8013160:	783b      	ldrb	r3, [r7, #0]
 8013162:	2b30      	cmp	r3, #48	; 0x30
 8013164:	d10a      	bne.n	801317c <__cvt+0x8c>
 8013166:	2200      	movs	r2, #0
 8013168:	2300      	movs	r3, #0
 801316a:	4620      	mov	r0, r4
 801316c:	4629      	mov	r1, r5
 801316e:	f7ed fccb 	bl	8000b08 <__aeabi_dcmpeq>
 8013172:	b918      	cbnz	r0, 801317c <__cvt+0x8c>
 8013174:	f1c6 0601 	rsb	r6, r6, #1
 8013178:	f8ca 6000 	str.w	r6, [sl]
 801317c:	f8da 3000 	ldr.w	r3, [sl]
 8013180:	4499      	add	r9, r3
 8013182:	2200      	movs	r2, #0
 8013184:	2300      	movs	r3, #0
 8013186:	4620      	mov	r0, r4
 8013188:	4629      	mov	r1, r5
 801318a:	f7ed fcbd 	bl	8000b08 <__aeabi_dcmpeq>
 801318e:	b108      	cbz	r0, 8013194 <__cvt+0xa4>
 8013190:	f8cd 900c 	str.w	r9, [sp, #12]
 8013194:	2230      	movs	r2, #48	; 0x30
 8013196:	9b03      	ldr	r3, [sp, #12]
 8013198:	454b      	cmp	r3, r9
 801319a:	d307      	bcc.n	80131ac <__cvt+0xbc>
 801319c:	9b03      	ldr	r3, [sp, #12]
 801319e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80131a0:	1bdb      	subs	r3, r3, r7
 80131a2:	4638      	mov	r0, r7
 80131a4:	6013      	str	r3, [r2, #0]
 80131a6:	b004      	add	sp, #16
 80131a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80131ac:	1c59      	adds	r1, r3, #1
 80131ae:	9103      	str	r1, [sp, #12]
 80131b0:	701a      	strb	r2, [r3, #0]
 80131b2:	e7f0      	b.n	8013196 <__cvt+0xa6>

080131b4 <__exponent>:
 80131b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80131b6:	4603      	mov	r3, r0
 80131b8:	2900      	cmp	r1, #0
 80131ba:	bfb8      	it	lt
 80131bc:	4249      	neglt	r1, r1
 80131be:	f803 2b02 	strb.w	r2, [r3], #2
 80131c2:	bfb4      	ite	lt
 80131c4:	222d      	movlt	r2, #45	; 0x2d
 80131c6:	222b      	movge	r2, #43	; 0x2b
 80131c8:	2909      	cmp	r1, #9
 80131ca:	7042      	strb	r2, [r0, #1]
 80131cc:	dd2a      	ble.n	8013224 <__exponent+0x70>
 80131ce:	f10d 0407 	add.w	r4, sp, #7
 80131d2:	46a4      	mov	ip, r4
 80131d4:	270a      	movs	r7, #10
 80131d6:	46a6      	mov	lr, r4
 80131d8:	460a      	mov	r2, r1
 80131da:	fb91 f6f7 	sdiv	r6, r1, r7
 80131de:	fb07 1516 	mls	r5, r7, r6, r1
 80131e2:	3530      	adds	r5, #48	; 0x30
 80131e4:	2a63      	cmp	r2, #99	; 0x63
 80131e6:	f104 34ff 	add.w	r4, r4, #4294967295
 80131ea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80131ee:	4631      	mov	r1, r6
 80131f0:	dcf1      	bgt.n	80131d6 <__exponent+0x22>
 80131f2:	3130      	adds	r1, #48	; 0x30
 80131f4:	f1ae 0502 	sub.w	r5, lr, #2
 80131f8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80131fc:	1c44      	adds	r4, r0, #1
 80131fe:	4629      	mov	r1, r5
 8013200:	4561      	cmp	r1, ip
 8013202:	d30a      	bcc.n	801321a <__exponent+0x66>
 8013204:	f10d 0209 	add.w	r2, sp, #9
 8013208:	eba2 020e 	sub.w	r2, r2, lr
 801320c:	4565      	cmp	r5, ip
 801320e:	bf88      	it	hi
 8013210:	2200      	movhi	r2, #0
 8013212:	4413      	add	r3, r2
 8013214:	1a18      	subs	r0, r3, r0
 8013216:	b003      	add	sp, #12
 8013218:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801321a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801321e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8013222:	e7ed      	b.n	8013200 <__exponent+0x4c>
 8013224:	2330      	movs	r3, #48	; 0x30
 8013226:	3130      	adds	r1, #48	; 0x30
 8013228:	7083      	strb	r3, [r0, #2]
 801322a:	70c1      	strb	r1, [r0, #3]
 801322c:	1d03      	adds	r3, r0, #4
 801322e:	e7f1      	b.n	8013214 <__exponent+0x60>

08013230 <_printf_float>:
 8013230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013234:	ed2d 8b02 	vpush	{d8}
 8013238:	b08d      	sub	sp, #52	; 0x34
 801323a:	460c      	mov	r4, r1
 801323c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8013240:	4616      	mov	r6, r2
 8013242:	461f      	mov	r7, r3
 8013244:	4605      	mov	r5, r0
 8013246:	f003 faaf 	bl	80167a8 <_localeconv_r>
 801324a:	f8d0 a000 	ldr.w	sl, [r0]
 801324e:	4650      	mov	r0, sl
 8013250:	f7ec ffd8 	bl	8000204 <strlen>
 8013254:	2300      	movs	r3, #0
 8013256:	930a      	str	r3, [sp, #40]	; 0x28
 8013258:	6823      	ldr	r3, [r4, #0]
 801325a:	9305      	str	r3, [sp, #20]
 801325c:	f8d8 3000 	ldr.w	r3, [r8]
 8013260:	f894 b018 	ldrb.w	fp, [r4, #24]
 8013264:	3307      	adds	r3, #7
 8013266:	f023 0307 	bic.w	r3, r3, #7
 801326a:	f103 0208 	add.w	r2, r3, #8
 801326e:	f8c8 2000 	str.w	r2, [r8]
 8013272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013276:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801327a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801327e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013282:	9307      	str	r3, [sp, #28]
 8013284:	f8cd 8018 	str.w	r8, [sp, #24]
 8013288:	ee08 0a10 	vmov	s16, r0
 801328c:	4b9f      	ldr	r3, [pc, #636]	; (801350c <_printf_float+0x2dc>)
 801328e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013292:	f04f 32ff 	mov.w	r2, #4294967295
 8013296:	f7ed fc69 	bl	8000b6c <__aeabi_dcmpun>
 801329a:	bb88      	cbnz	r0, 8013300 <_printf_float+0xd0>
 801329c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80132a0:	4b9a      	ldr	r3, [pc, #616]	; (801350c <_printf_float+0x2dc>)
 80132a2:	f04f 32ff 	mov.w	r2, #4294967295
 80132a6:	f7ed fc43 	bl	8000b30 <__aeabi_dcmple>
 80132aa:	bb48      	cbnz	r0, 8013300 <_printf_float+0xd0>
 80132ac:	2200      	movs	r2, #0
 80132ae:	2300      	movs	r3, #0
 80132b0:	4640      	mov	r0, r8
 80132b2:	4649      	mov	r1, r9
 80132b4:	f7ed fc32 	bl	8000b1c <__aeabi_dcmplt>
 80132b8:	b110      	cbz	r0, 80132c0 <_printf_float+0x90>
 80132ba:	232d      	movs	r3, #45	; 0x2d
 80132bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80132c0:	4b93      	ldr	r3, [pc, #588]	; (8013510 <_printf_float+0x2e0>)
 80132c2:	4894      	ldr	r0, [pc, #592]	; (8013514 <_printf_float+0x2e4>)
 80132c4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80132c8:	bf94      	ite	ls
 80132ca:	4698      	movls	r8, r3
 80132cc:	4680      	movhi	r8, r0
 80132ce:	2303      	movs	r3, #3
 80132d0:	6123      	str	r3, [r4, #16]
 80132d2:	9b05      	ldr	r3, [sp, #20]
 80132d4:	f023 0204 	bic.w	r2, r3, #4
 80132d8:	6022      	str	r2, [r4, #0]
 80132da:	f04f 0900 	mov.w	r9, #0
 80132de:	9700      	str	r7, [sp, #0]
 80132e0:	4633      	mov	r3, r6
 80132e2:	aa0b      	add	r2, sp, #44	; 0x2c
 80132e4:	4621      	mov	r1, r4
 80132e6:	4628      	mov	r0, r5
 80132e8:	f000 f9d8 	bl	801369c <_printf_common>
 80132ec:	3001      	adds	r0, #1
 80132ee:	f040 8090 	bne.w	8013412 <_printf_float+0x1e2>
 80132f2:	f04f 30ff 	mov.w	r0, #4294967295
 80132f6:	b00d      	add	sp, #52	; 0x34
 80132f8:	ecbd 8b02 	vpop	{d8}
 80132fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013300:	4642      	mov	r2, r8
 8013302:	464b      	mov	r3, r9
 8013304:	4640      	mov	r0, r8
 8013306:	4649      	mov	r1, r9
 8013308:	f7ed fc30 	bl	8000b6c <__aeabi_dcmpun>
 801330c:	b140      	cbz	r0, 8013320 <_printf_float+0xf0>
 801330e:	464b      	mov	r3, r9
 8013310:	2b00      	cmp	r3, #0
 8013312:	bfbc      	itt	lt
 8013314:	232d      	movlt	r3, #45	; 0x2d
 8013316:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801331a:	487f      	ldr	r0, [pc, #508]	; (8013518 <_printf_float+0x2e8>)
 801331c:	4b7f      	ldr	r3, [pc, #508]	; (801351c <_printf_float+0x2ec>)
 801331e:	e7d1      	b.n	80132c4 <_printf_float+0x94>
 8013320:	6863      	ldr	r3, [r4, #4]
 8013322:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8013326:	9206      	str	r2, [sp, #24]
 8013328:	1c5a      	adds	r2, r3, #1
 801332a:	d13f      	bne.n	80133ac <_printf_float+0x17c>
 801332c:	2306      	movs	r3, #6
 801332e:	6063      	str	r3, [r4, #4]
 8013330:	9b05      	ldr	r3, [sp, #20]
 8013332:	6861      	ldr	r1, [r4, #4]
 8013334:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8013338:	2300      	movs	r3, #0
 801333a:	9303      	str	r3, [sp, #12]
 801333c:	ab0a      	add	r3, sp, #40	; 0x28
 801333e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8013342:	ab09      	add	r3, sp, #36	; 0x24
 8013344:	ec49 8b10 	vmov	d0, r8, r9
 8013348:	9300      	str	r3, [sp, #0]
 801334a:	6022      	str	r2, [r4, #0]
 801334c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013350:	4628      	mov	r0, r5
 8013352:	f7ff fecd 	bl	80130f0 <__cvt>
 8013356:	9b06      	ldr	r3, [sp, #24]
 8013358:	9909      	ldr	r1, [sp, #36]	; 0x24
 801335a:	2b47      	cmp	r3, #71	; 0x47
 801335c:	4680      	mov	r8, r0
 801335e:	d108      	bne.n	8013372 <_printf_float+0x142>
 8013360:	1cc8      	adds	r0, r1, #3
 8013362:	db02      	blt.n	801336a <_printf_float+0x13a>
 8013364:	6863      	ldr	r3, [r4, #4]
 8013366:	4299      	cmp	r1, r3
 8013368:	dd41      	ble.n	80133ee <_printf_float+0x1be>
 801336a:	f1ab 0b02 	sub.w	fp, fp, #2
 801336e:	fa5f fb8b 	uxtb.w	fp, fp
 8013372:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013376:	d820      	bhi.n	80133ba <_printf_float+0x18a>
 8013378:	3901      	subs	r1, #1
 801337a:	465a      	mov	r2, fp
 801337c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013380:	9109      	str	r1, [sp, #36]	; 0x24
 8013382:	f7ff ff17 	bl	80131b4 <__exponent>
 8013386:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013388:	1813      	adds	r3, r2, r0
 801338a:	2a01      	cmp	r2, #1
 801338c:	4681      	mov	r9, r0
 801338e:	6123      	str	r3, [r4, #16]
 8013390:	dc02      	bgt.n	8013398 <_printf_float+0x168>
 8013392:	6822      	ldr	r2, [r4, #0]
 8013394:	07d2      	lsls	r2, r2, #31
 8013396:	d501      	bpl.n	801339c <_printf_float+0x16c>
 8013398:	3301      	adds	r3, #1
 801339a:	6123      	str	r3, [r4, #16]
 801339c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d09c      	beq.n	80132de <_printf_float+0xae>
 80133a4:	232d      	movs	r3, #45	; 0x2d
 80133a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80133aa:	e798      	b.n	80132de <_printf_float+0xae>
 80133ac:	9a06      	ldr	r2, [sp, #24]
 80133ae:	2a47      	cmp	r2, #71	; 0x47
 80133b0:	d1be      	bne.n	8013330 <_printf_float+0x100>
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d1bc      	bne.n	8013330 <_printf_float+0x100>
 80133b6:	2301      	movs	r3, #1
 80133b8:	e7b9      	b.n	801332e <_printf_float+0xfe>
 80133ba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80133be:	d118      	bne.n	80133f2 <_printf_float+0x1c2>
 80133c0:	2900      	cmp	r1, #0
 80133c2:	6863      	ldr	r3, [r4, #4]
 80133c4:	dd0b      	ble.n	80133de <_printf_float+0x1ae>
 80133c6:	6121      	str	r1, [r4, #16]
 80133c8:	b913      	cbnz	r3, 80133d0 <_printf_float+0x1a0>
 80133ca:	6822      	ldr	r2, [r4, #0]
 80133cc:	07d0      	lsls	r0, r2, #31
 80133ce:	d502      	bpl.n	80133d6 <_printf_float+0x1a6>
 80133d0:	3301      	adds	r3, #1
 80133d2:	440b      	add	r3, r1
 80133d4:	6123      	str	r3, [r4, #16]
 80133d6:	65a1      	str	r1, [r4, #88]	; 0x58
 80133d8:	f04f 0900 	mov.w	r9, #0
 80133dc:	e7de      	b.n	801339c <_printf_float+0x16c>
 80133de:	b913      	cbnz	r3, 80133e6 <_printf_float+0x1b6>
 80133e0:	6822      	ldr	r2, [r4, #0]
 80133e2:	07d2      	lsls	r2, r2, #31
 80133e4:	d501      	bpl.n	80133ea <_printf_float+0x1ba>
 80133e6:	3302      	adds	r3, #2
 80133e8:	e7f4      	b.n	80133d4 <_printf_float+0x1a4>
 80133ea:	2301      	movs	r3, #1
 80133ec:	e7f2      	b.n	80133d4 <_printf_float+0x1a4>
 80133ee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80133f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80133f4:	4299      	cmp	r1, r3
 80133f6:	db05      	blt.n	8013404 <_printf_float+0x1d4>
 80133f8:	6823      	ldr	r3, [r4, #0]
 80133fa:	6121      	str	r1, [r4, #16]
 80133fc:	07d8      	lsls	r0, r3, #31
 80133fe:	d5ea      	bpl.n	80133d6 <_printf_float+0x1a6>
 8013400:	1c4b      	adds	r3, r1, #1
 8013402:	e7e7      	b.n	80133d4 <_printf_float+0x1a4>
 8013404:	2900      	cmp	r1, #0
 8013406:	bfd4      	ite	le
 8013408:	f1c1 0202 	rsble	r2, r1, #2
 801340c:	2201      	movgt	r2, #1
 801340e:	4413      	add	r3, r2
 8013410:	e7e0      	b.n	80133d4 <_printf_float+0x1a4>
 8013412:	6823      	ldr	r3, [r4, #0]
 8013414:	055a      	lsls	r2, r3, #21
 8013416:	d407      	bmi.n	8013428 <_printf_float+0x1f8>
 8013418:	6923      	ldr	r3, [r4, #16]
 801341a:	4642      	mov	r2, r8
 801341c:	4631      	mov	r1, r6
 801341e:	4628      	mov	r0, r5
 8013420:	47b8      	blx	r7
 8013422:	3001      	adds	r0, #1
 8013424:	d12c      	bne.n	8013480 <_printf_float+0x250>
 8013426:	e764      	b.n	80132f2 <_printf_float+0xc2>
 8013428:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801342c:	f240 80e0 	bls.w	80135f0 <_printf_float+0x3c0>
 8013430:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013434:	2200      	movs	r2, #0
 8013436:	2300      	movs	r3, #0
 8013438:	f7ed fb66 	bl	8000b08 <__aeabi_dcmpeq>
 801343c:	2800      	cmp	r0, #0
 801343e:	d034      	beq.n	80134aa <_printf_float+0x27a>
 8013440:	4a37      	ldr	r2, [pc, #220]	; (8013520 <_printf_float+0x2f0>)
 8013442:	2301      	movs	r3, #1
 8013444:	4631      	mov	r1, r6
 8013446:	4628      	mov	r0, r5
 8013448:	47b8      	blx	r7
 801344a:	3001      	adds	r0, #1
 801344c:	f43f af51 	beq.w	80132f2 <_printf_float+0xc2>
 8013450:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013454:	429a      	cmp	r2, r3
 8013456:	db02      	blt.n	801345e <_printf_float+0x22e>
 8013458:	6823      	ldr	r3, [r4, #0]
 801345a:	07d8      	lsls	r0, r3, #31
 801345c:	d510      	bpl.n	8013480 <_printf_float+0x250>
 801345e:	ee18 3a10 	vmov	r3, s16
 8013462:	4652      	mov	r2, sl
 8013464:	4631      	mov	r1, r6
 8013466:	4628      	mov	r0, r5
 8013468:	47b8      	blx	r7
 801346a:	3001      	adds	r0, #1
 801346c:	f43f af41 	beq.w	80132f2 <_printf_float+0xc2>
 8013470:	f04f 0800 	mov.w	r8, #0
 8013474:	f104 091a 	add.w	r9, r4, #26
 8013478:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801347a:	3b01      	subs	r3, #1
 801347c:	4543      	cmp	r3, r8
 801347e:	dc09      	bgt.n	8013494 <_printf_float+0x264>
 8013480:	6823      	ldr	r3, [r4, #0]
 8013482:	079b      	lsls	r3, r3, #30
 8013484:	f100 8105 	bmi.w	8013692 <_printf_float+0x462>
 8013488:	68e0      	ldr	r0, [r4, #12]
 801348a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801348c:	4298      	cmp	r0, r3
 801348e:	bfb8      	it	lt
 8013490:	4618      	movlt	r0, r3
 8013492:	e730      	b.n	80132f6 <_printf_float+0xc6>
 8013494:	2301      	movs	r3, #1
 8013496:	464a      	mov	r2, r9
 8013498:	4631      	mov	r1, r6
 801349a:	4628      	mov	r0, r5
 801349c:	47b8      	blx	r7
 801349e:	3001      	adds	r0, #1
 80134a0:	f43f af27 	beq.w	80132f2 <_printf_float+0xc2>
 80134a4:	f108 0801 	add.w	r8, r8, #1
 80134a8:	e7e6      	b.n	8013478 <_printf_float+0x248>
 80134aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	dc39      	bgt.n	8013524 <_printf_float+0x2f4>
 80134b0:	4a1b      	ldr	r2, [pc, #108]	; (8013520 <_printf_float+0x2f0>)
 80134b2:	2301      	movs	r3, #1
 80134b4:	4631      	mov	r1, r6
 80134b6:	4628      	mov	r0, r5
 80134b8:	47b8      	blx	r7
 80134ba:	3001      	adds	r0, #1
 80134bc:	f43f af19 	beq.w	80132f2 <_printf_float+0xc2>
 80134c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80134c4:	4313      	orrs	r3, r2
 80134c6:	d102      	bne.n	80134ce <_printf_float+0x29e>
 80134c8:	6823      	ldr	r3, [r4, #0]
 80134ca:	07d9      	lsls	r1, r3, #31
 80134cc:	d5d8      	bpl.n	8013480 <_printf_float+0x250>
 80134ce:	ee18 3a10 	vmov	r3, s16
 80134d2:	4652      	mov	r2, sl
 80134d4:	4631      	mov	r1, r6
 80134d6:	4628      	mov	r0, r5
 80134d8:	47b8      	blx	r7
 80134da:	3001      	adds	r0, #1
 80134dc:	f43f af09 	beq.w	80132f2 <_printf_float+0xc2>
 80134e0:	f04f 0900 	mov.w	r9, #0
 80134e4:	f104 0a1a 	add.w	sl, r4, #26
 80134e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80134ea:	425b      	negs	r3, r3
 80134ec:	454b      	cmp	r3, r9
 80134ee:	dc01      	bgt.n	80134f4 <_printf_float+0x2c4>
 80134f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80134f2:	e792      	b.n	801341a <_printf_float+0x1ea>
 80134f4:	2301      	movs	r3, #1
 80134f6:	4652      	mov	r2, sl
 80134f8:	4631      	mov	r1, r6
 80134fa:	4628      	mov	r0, r5
 80134fc:	47b8      	blx	r7
 80134fe:	3001      	adds	r0, #1
 8013500:	f43f aef7 	beq.w	80132f2 <_printf_float+0xc2>
 8013504:	f109 0901 	add.w	r9, r9, #1
 8013508:	e7ee      	b.n	80134e8 <_printf_float+0x2b8>
 801350a:	bf00      	nop
 801350c:	7fefffff 	.word	0x7fefffff
 8013510:	0801a218 	.word	0x0801a218
 8013514:	0801a21c 	.word	0x0801a21c
 8013518:	0801a224 	.word	0x0801a224
 801351c:	0801a220 	.word	0x0801a220
 8013520:	0801a561 	.word	0x0801a561
 8013524:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013526:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013528:	429a      	cmp	r2, r3
 801352a:	bfa8      	it	ge
 801352c:	461a      	movge	r2, r3
 801352e:	2a00      	cmp	r2, #0
 8013530:	4691      	mov	r9, r2
 8013532:	dc37      	bgt.n	80135a4 <_printf_float+0x374>
 8013534:	f04f 0b00 	mov.w	fp, #0
 8013538:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801353c:	f104 021a 	add.w	r2, r4, #26
 8013540:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013542:	9305      	str	r3, [sp, #20]
 8013544:	eba3 0309 	sub.w	r3, r3, r9
 8013548:	455b      	cmp	r3, fp
 801354a:	dc33      	bgt.n	80135b4 <_printf_float+0x384>
 801354c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013550:	429a      	cmp	r2, r3
 8013552:	db3b      	blt.n	80135cc <_printf_float+0x39c>
 8013554:	6823      	ldr	r3, [r4, #0]
 8013556:	07da      	lsls	r2, r3, #31
 8013558:	d438      	bmi.n	80135cc <_printf_float+0x39c>
 801355a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801355c:	9b05      	ldr	r3, [sp, #20]
 801355e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013560:	1ad3      	subs	r3, r2, r3
 8013562:	eba2 0901 	sub.w	r9, r2, r1
 8013566:	4599      	cmp	r9, r3
 8013568:	bfa8      	it	ge
 801356a:	4699      	movge	r9, r3
 801356c:	f1b9 0f00 	cmp.w	r9, #0
 8013570:	dc35      	bgt.n	80135de <_printf_float+0x3ae>
 8013572:	f04f 0800 	mov.w	r8, #0
 8013576:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801357a:	f104 0a1a 	add.w	sl, r4, #26
 801357e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013582:	1a9b      	subs	r3, r3, r2
 8013584:	eba3 0309 	sub.w	r3, r3, r9
 8013588:	4543      	cmp	r3, r8
 801358a:	f77f af79 	ble.w	8013480 <_printf_float+0x250>
 801358e:	2301      	movs	r3, #1
 8013590:	4652      	mov	r2, sl
 8013592:	4631      	mov	r1, r6
 8013594:	4628      	mov	r0, r5
 8013596:	47b8      	blx	r7
 8013598:	3001      	adds	r0, #1
 801359a:	f43f aeaa 	beq.w	80132f2 <_printf_float+0xc2>
 801359e:	f108 0801 	add.w	r8, r8, #1
 80135a2:	e7ec      	b.n	801357e <_printf_float+0x34e>
 80135a4:	4613      	mov	r3, r2
 80135a6:	4631      	mov	r1, r6
 80135a8:	4642      	mov	r2, r8
 80135aa:	4628      	mov	r0, r5
 80135ac:	47b8      	blx	r7
 80135ae:	3001      	adds	r0, #1
 80135b0:	d1c0      	bne.n	8013534 <_printf_float+0x304>
 80135b2:	e69e      	b.n	80132f2 <_printf_float+0xc2>
 80135b4:	2301      	movs	r3, #1
 80135b6:	4631      	mov	r1, r6
 80135b8:	4628      	mov	r0, r5
 80135ba:	9205      	str	r2, [sp, #20]
 80135bc:	47b8      	blx	r7
 80135be:	3001      	adds	r0, #1
 80135c0:	f43f ae97 	beq.w	80132f2 <_printf_float+0xc2>
 80135c4:	9a05      	ldr	r2, [sp, #20]
 80135c6:	f10b 0b01 	add.w	fp, fp, #1
 80135ca:	e7b9      	b.n	8013540 <_printf_float+0x310>
 80135cc:	ee18 3a10 	vmov	r3, s16
 80135d0:	4652      	mov	r2, sl
 80135d2:	4631      	mov	r1, r6
 80135d4:	4628      	mov	r0, r5
 80135d6:	47b8      	blx	r7
 80135d8:	3001      	adds	r0, #1
 80135da:	d1be      	bne.n	801355a <_printf_float+0x32a>
 80135dc:	e689      	b.n	80132f2 <_printf_float+0xc2>
 80135de:	9a05      	ldr	r2, [sp, #20]
 80135e0:	464b      	mov	r3, r9
 80135e2:	4442      	add	r2, r8
 80135e4:	4631      	mov	r1, r6
 80135e6:	4628      	mov	r0, r5
 80135e8:	47b8      	blx	r7
 80135ea:	3001      	adds	r0, #1
 80135ec:	d1c1      	bne.n	8013572 <_printf_float+0x342>
 80135ee:	e680      	b.n	80132f2 <_printf_float+0xc2>
 80135f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80135f2:	2a01      	cmp	r2, #1
 80135f4:	dc01      	bgt.n	80135fa <_printf_float+0x3ca>
 80135f6:	07db      	lsls	r3, r3, #31
 80135f8:	d538      	bpl.n	801366c <_printf_float+0x43c>
 80135fa:	2301      	movs	r3, #1
 80135fc:	4642      	mov	r2, r8
 80135fe:	4631      	mov	r1, r6
 8013600:	4628      	mov	r0, r5
 8013602:	47b8      	blx	r7
 8013604:	3001      	adds	r0, #1
 8013606:	f43f ae74 	beq.w	80132f2 <_printf_float+0xc2>
 801360a:	ee18 3a10 	vmov	r3, s16
 801360e:	4652      	mov	r2, sl
 8013610:	4631      	mov	r1, r6
 8013612:	4628      	mov	r0, r5
 8013614:	47b8      	blx	r7
 8013616:	3001      	adds	r0, #1
 8013618:	f43f ae6b 	beq.w	80132f2 <_printf_float+0xc2>
 801361c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013620:	2200      	movs	r2, #0
 8013622:	2300      	movs	r3, #0
 8013624:	f7ed fa70 	bl	8000b08 <__aeabi_dcmpeq>
 8013628:	b9d8      	cbnz	r0, 8013662 <_printf_float+0x432>
 801362a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801362c:	f108 0201 	add.w	r2, r8, #1
 8013630:	3b01      	subs	r3, #1
 8013632:	4631      	mov	r1, r6
 8013634:	4628      	mov	r0, r5
 8013636:	47b8      	blx	r7
 8013638:	3001      	adds	r0, #1
 801363a:	d10e      	bne.n	801365a <_printf_float+0x42a>
 801363c:	e659      	b.n	80132f2 <_printf_float+0xc2>
 801363e:	2301      	movs	r3, #1
 8013640:	4652      	mov	r2, sl
 8013642:	4631      	mov	r1, r6
 8013644:	4628      	mov	r0, r5
 8013646:	47b8      	blx	r7
 8013648:	3001      	adds	r0, #1
 801364a:	f43f ae52 	beq.w	80132f2 <_printf_float+0xc2>
 801364e:	f108 0801 	add.w	r8, r8, #1
 8013652:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013654:	3b01      	subs	r3, #1
 8013656:	4543      	cmp	r3, r8
 8013658:	dcf1      	bgt.n	801363e <_printf_float+0x40e>
 801365a:	464b      	mov	r3, r9
 801365c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013660:	e6dc      	b.n	801341c <_printf_float+0x1ec>
 8013662:	f04f 0800 	mov.w	r8, #0
 8013666:	f104 0a1a 	add.w	sl, r4, #26
 801366a:	e7f2      	b.n	8013652 <_printf_float+0x422>
 801366c:	2301      	movs	r3, #1
 801366e:	4642      	mov	r2, r8
 8013670:	e7df      	b.n	8013632 <_printf_float+0x402>
 8013672:	2301      	movs	r3, #1
 8013674:	464a      	mov	r2, r9
 8013676:	4631      	mov	r1, r6
 8013678:	4628      	mov	r0, r5
 801367a:	47b8      	blx	r7
 801367c:	3001      	adds	r0, #1
 801367e:	f43f ae38 	beq.w	80132f2 <_printf_float+0xc2>
 8013682:	f108 0801 	add.w	r8, r8, #1
 8013686:	68e3      	ldr	r3, [r4, #12]
 8013688:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801368a:	1a5b      	subs	r3, r3, r1
 801368c:	4543      	cmp	r3, r8
 801368e:	dcf0      	bgt.n	8013672 <_printf_float+0x442>
 8013690:	e6fa      	b.n	8013488 <_printf_float+0x258>
 8013692:	f04f 0800 	mov.w	r8, #0
 8013696:	f104 0919 	add.w	r9, r4, #25
 801369a:	e7f4      	b.n	8013686 <_printf_float+0x456>

0801369c <_printf_common>:
 801369c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80136a0:	4616      	mov	r6, r2
 80136a2:	4699      	mov	r9, r3
 80136a4:	688a      	ldr	r2, [r1, #8]
 80136a6:	690b      	ldr	r3, [r1, #16]
 80136a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80136ac:	4293      	cmp	r3, r2
 80136ae:	bfb8      	it	lt
 80136b0:	4613      	movlt	r3, r2
 80136b2:	6033      	str	r3, [r6, #0]
 80136b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80136b8:	4607      	mov	r7, r0
 80136ba:	460c      	mov	r4, r1
 80136bc:	b10a      	cbz	r2, 80136c2 <_printf_common+0x26>
 80136be:	3301      	adds	r3, #1
 80136c0:	6033      	str	r3, [r6, #0]
 80136c2:	6823      	ldr	r3, [r4, #0]
 80136c4:	0699      	lsls	r1, r3, #26
 80136c6:	bf42      	ittt	mi
 80136c8:	6833      	ldrmi	r3, [r6, #0]
 80136ca:	3302      	addmi	r3, #2
 80136cc:	6033      	strmi	r3, [r6, #0]
 80136ce:	6825      	ldr	r5, [r4, #0]
 80136d0:	f015 0506 	ands.w	r5, r5, #6
 80136d4:	d106      	bne.n	80136e4 <_printf_common+0x48>
 80136d6:	f104 0a19 	add.w	sl, r4, #25
 80136da:	68e3      	ldr	r3, [r4, #12]
 80136dc:	6832      	ldr	r2, [r6, #0]
 80136de:	1a9b      	subs	r3, r3, r2
 80136e0:	42ab      	cmp	r3, r5
 80136e2:	dc26      	bgt.n	8013732 <_printf_common+0x96>
 80136e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80136e8:	1e13      	subs	r3, r2, #0
 80136ea:	6822      	ldr	r2, [r4, #0]
 80136ec:	bf18      	it	ne
 80136ee:	2301      	movne	r3, #1
 80136f0:	0692      	lsls	r2, r2, #26
 80136f2:	d42b      	bmi.n	801374c <_printf_common+0xb0>
 80136f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80136f8:	4649      	mov	r1, r9
 80136fa:	4638      	mov	r0, r7
 80136fc:	47c0      	blx	r8
 80136fe:	3001      	adds	r0, #1
 8013700:	d01e      	beq.n	8013740 <_printf_common+0xa4>
 8013702:	6823      	ldr	r3, [r4, #0]
 8013704:	68e5      	ldr	r5, [r4, #12]
 8013706:	6832      	ldr	r2, [r6, #0]
 8013708:	f003 0306 	and.w	r3, r3, #6
 801370c:	2b04      	cmp	r3, #4
 801370e:	bf08      	it	eq
 8013710:	1aad      	subeq	r5, r5, r2
 8013712:	68a3      	ldr	r3, [r4, #8]
 8013714:	6922      	ldr	r2, [r4, #16]
 8013716:	bf0c      	ite	eq
 8013718:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801371c:	2500      	movne	r5, #0
 801371e:	4293      	cmp	r3, r2
 8013720:	bfc4      	itt	gt
 8013722:	1a9b      	subgt	r3, r3, r2
 8013724:	18ed      	addgt	r5, r5, r3
 8013726:	2600      	movs	r6, #0
 8013728:	341a      	adds	r4, #26
 801372a:	42b5      	cmp	r5, r6
 801372c:	d11a      	bne.n	8013764 <_printf_common+0xc8>
 801372e:	2000      	movs	r0, #0
 8013730:	e008      	b.n	8013744 <_printf_common+0xa8>
 8013732:	2301      	movs	r3, #1
 8013734:	4652      	mov	r2, sl
 8013736:	4649      	mov	r1, r9
 8013738:	4638      	mov	r0, r7
 801373a:	47c0      	blx	r8
 801373c:	3001      	adds	r0, #1
 801373e:	d103      	bne.n	8013748 <_printf_common+0xac>
 8013740:	f04f 30ff 	mov.w	r0, #4294967295
 8013744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013748:	3501      	adds	r5, #1
 801374a:	e7c6      	b.n	80136da <_printf_common+0x3e>
 801374c:	18e1      	adds	r1, r4, r3
 801374e:	1c5a      	adds	r2, r3, #1
 8013750:	2030      	movs	r0, #48	; 0x30
 8013752:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013756:	4422      	add	r2, r4
 8013758:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801375c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013760:	3302      	adds	r3, #2
 8013762:	e7c7      	b.n	80136f4 <_printf_common+0x58>
 8013764:	2301      	movs	r3, #1
 8013766:	4622      	mov	r2, r4
 8013768:	4649      	mov	r1, r9
 801376a:	4638      	mov	r0, r7
 801376c:	47c0      	blx	r8
 801376e:	3001      	adds	r0, #1
 8013770:	d0e6      	beq.n	8013740 <_printf_common+0xa4>
 8013772:	3601      	adds	r6, #1
 8013774:	e7d9      	b.n	801372a <_printf_common+0x8e>
	...

08013778 <_printf_i>:
 8013778:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801377c:	460c      	mov	r4, r1
 801377e:	4691      	mov	r9, r2
 8013780:	7e27      	ldrb	r7, [r4, #24]
 8013782:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013784:	2f78      	cmp	r7, #120	; 0x78
 8013786:	4680      	mov	r8, r0
 8013788:	469a      	mov	sl, r3
 801378a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801378e:	d807      	bhi.n	80137a0 <_printf_i+0x28>
 8013790:	2f62      	cmp	r7, #98	; 0x62
 8013792:	d80a      	bhi.n	80137aa <_printf_i+0x32>
 8013794:	2f00      	cmp	r7, #0
 8013796:	f000 80d8 	beq.w	801394a <_printf_i+0x1d2>
 801379a:	2f58      	cmp	r7, #88	; 0x58
 801379c:	f000 80a3 	beq.w	80138e6 <_printf_i+0x16e>
 80137a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80137a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80137a8:	e03a      	b.n	8013820 <_printf_i+0xa8>
 80137aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80137ae:	2b15      	cmp	r3, #21
 80137b0:	d8f6      	bhi.n	80137a0 <_printf_i+0x28>
 80137b2:	a001      	add	r0, pc, #4	; (adr r0, 80137b8 <_printf_i+0x40>)
 80137b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80137b8:	08013811 	.word	0x08013811
 80137bc:	08013825 	.word	0x08013825
 80137c0:	080137a1 	.word	0x080137a1
 80137c4:	080137a1 	.word	0x080137a1
 80137c8:	080137a1 	.word	0x080137a1
 80137cc:	080137a1 	.word	0x080137a1
 80137d0:	08013825 	.word	0x08013825
 80137d4:	080137a1 	.word	0x080137a1
 80137d8:	080137a1 	.word	0x080137a1
 80137dc:	080137a1 	.word	0x080137a1
 80137e0:	080137a1 	.word	0x080137a1
 80137e4:	08013931 	.word	0x08013931
 80137e8:	08013855 	.word	0x08013855
 80137ec:	08013913 	.word	0x08013913
 80137f0:	080137a1 	.word	0x080137a1
 80137f4:	080137a1 	.word	0x080137a1
 80137f8:	08013953 	.word	0x08013953
 80137fc:	080137a1 	.word	0x080137a1
 8013800:	08013855 	.word	0x08013855
 8013804:	080137a1 	.word	0x080137a1
 8013808:	080137a1 	.word	0x080137a1
 801380c:	0801391b 	.word	0x0801391b
 8013810:	680b      	ldr	r3, [r1, #0]
 8013812:	1d1a      	adds	r2, r3, #4
 8013814:	681b      	ldr	r3, [r3, #0]
 8013816:	600a      	str	r2, [r1, #0]
 8013818:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801381c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013820:	2301      	movs	r3, #1
 8013822:	e0a3      	b.n	801396c <_printf_i+0x1f4>
 8013824:	6825      	ldr	r5, [r4, #0]
 8013826:	6808      	ldr	r0, [r1, #0]
 8013828:	062e      	lsls	r6, r5, #24
 801382a:	f100 0304 	add.w	r3, r0, #4
 801382e:	d50a      	bpl.n	8013846 <_printf_i+0xce>
 8013830:	6805      	ldr	r5, [r0, #0]
 8013832:	600b      	str	r3, [r1, #0]
 8013834:	2d00      	cmp	r5, #0
 8013836:	da03      	bge.n	8013840 <_printf_i+0xc8>
 8013838:	232d      	movs	r3, #45	; 0x2d
 801383a:	426d      	negs	r5, r5
 801383c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013840:	485e      	ldr	r0, [pc, #376]	; (80139bc <_printf_i+0x244>)
 8013842:	230a      	movs	r3, #10
 8013844:	e019      	b.n	801387a <_printf_i+0x102>
 8013846:	f015 0f40 	tst.w	r5, #64	; 0x40
 801384a:	6805      	ldr	r5, [r0, #0]
 801384c:	600b      	str	r3, [r1, #0]
 801384e:	bf18      	it	ne
 8013850:	b22d      	sxthne	r5, r5
 8013852:	e7ef      	b.n	8013834 <_printf_i+0xbc>
 8013854:	680b      	ldr	r3, [r1, #0]
 8013856:	6825      	ldr	r5, [r4, #0]
 8013858:	1d18      	adds	r0, r3, #4
 801385a:	6008      	str	r0, [r1, #0]
 801385c:	0628      	lsls	r0, r5, #24
 801385e:	d501      	bpl.n	8013864 <_printf_i+0xec>
 8013860:	681d      	ldr	r5, [r3, #0]
 8013862:	e002      	b.n	801386a <_printf_i+0xf2>
 8013864:	0669      	lsls	r1, r5, #25
 8013866:	d5fb      	bpl.n	8013860 <_printf_i+0xe8>
 8013868:	881d      	ldrh	r5, [r3, #0]
 801386a:	4854      	ldr	r0, [pc, #336]	; (80139bc <_printf_i+0x244>)
 801386c:	2f6f      	cmp	r7, #111	; 0x6f
 801386e:	bf0c      	ite	eq
 8013870:	2308      	moveq	r3, #8
 8013872:	230a      	movne	r3, #10
 8013874:	2100      	movs	r1, #0
 8013876:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801387a:	6866      	ldr	r6, [r4, #4]
 801387c:	60a6      	str	r6, [r4, #8]
 801387e:	2e00      	cmp	r6, #0
 8013880:	bfa2      	ittt	ge
 8013882:	6821      	ldrge	r1, [r4, #0]
 8013884:	f021 0104 	bicge.w	r1, r1, #4
 8013888:	6021      	strge	r1, [r4, #0]
 801388a:	b90d      	cbnz	r5, 8013890 <_printf_i+0x118>
 801388c:	2e00      	cmp	r6, #0
 801388e:	d04d      	beq.n	801392c <_printf_i+0x1b4>
 8013890:	4616      	mov	r6, r2
 8013892:	fbb5 f1f3 	udiv	r1, r5, r3
 8013896:	fb03 5711 	mls	r7, r3, r1, r5
 801389a:	5dc7      	ldrb	r7, [r0, r7]
 801389c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80138a0:	462f      	mov	r7, r5
 80138a2:	42bb      	cmp	r3, r7
 80138a4:	460d      	mov	r5, r1
 80138a6:	d9f4      	bls.n	8013892 <_printf_i+0x11a>
 80138a8:	2b08      	cmp	r3, #8
 80138aa:	d10b      	bne.n	80138c4 <_printf_i+0x14c>
 80138ac:	6823      	ldr	r3, [r4, #0]
 80138ae:	07df      	lsls	r7, r3, #31
 80138b0:	d508      	bpl.n	80138c4 <_printf_i+0x14c>
 80138b2:	6923      	ldr	r3, [r4, #16]
 80138b4:	6861      	ldr	r1, [r4, #4]
 80138b6:	4299      	cmp	r1, r3
 80138b8:	bfde      	ittt	le
 80138ba:	2330      	movle	r3, #48	; 0x30
 80138bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80138c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80138c4:	1b92      	subs	r2, r2, r6
 80138c6:	6122      	str	r2, [r4, #16]
 80138c8:	f8cd a000 	str.w	sl, [sp]
 80138cc:	464b      	mov	r3, r9
 80138ce:	aa03      	add	r2, sp, #12
 80138d0:	4621      	mov	r1, r4
 80138d2:	4640      	mov	r0, r8
 80138d4:	f7ff fee2 	bl	801369c <_printf_common>
 80138d8:	3001      	adds	r0, #1
 80138da:	d14c      	bne.n	8013976 <_printf_i+0x1fe>
 80138dc:	f04f 30ff 	mov.w	r0, #4294967295
 80138e0:	b004      	add	sp, #16
 80138e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138e6:	4835      	ldr	r0, [pc, #212]	; (80139bc <_printf_i+0x244>)
 80138e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80138ec:	6823      	ldr	r3, [r4, #0]
 80138ee:	680e      	ldr	r6, [r1, #0]
 80138f0:	061f      	lsls	r7, r3, #24
 80138f2:	f856 5b04 	ldr.w	r5, [r6], #4
 80138f6:	600e      	str	r6, [r1, #0]
 80138f8:	d514      	bpl.n	8013924 <_printf_i+0x1ac>
 80138fa:	07d9      	lsls	r1, r3, #31
 80138fc:	bf44      	itt	mi
 80138fe:	f043 0320 	orrmi.w	r3, r3, #32
 8013902:	6023      	strmi	r3, [r4, #0]
 8013904:	b91d      	cbnz	r5, 801390e <_printf_i+0x196>
 8013906:	6823      	ldr	r3, [r4, #0]
 8013908:	f023 0320 	bic.w	r3, r3, #32
 801390c:	6023      	str	r3, [r4, #0]
 801390e:	2310      	movs	r3, #16
 8013910:	e7b0      	b.n	8013874 <_printf_i+0xfc>
 8013912:	6823      	ldr	r3, [r4, #0]
 8013914:	f043 0320 	orr.w	r3, r3, #32
 8013918:	6023      	str	r3, [r4, #0]
 801391a:	2378      	movs	r3, #120	; 0x78
 801391c:	4828      	ldr	r0, [pc, #160]	; (80139c0 <_printf_i+0x248>)
 801391e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013922:	e7e3      	b.n	80138ec <_printf_i+0x174>
 8013924:	065e      	lsls	r6, r3, #25
 8013926:	bf48      	it	mi
 8013928:	b2ad      	uxthmi	r5, r5
 801392a:	e7e6      	b.n	80138fa <_printf_i+0x182>
 801392c:	4616      	mov	r6, r2
 801392e:	e7bb      	b.n	80138a8 <_printf_i+0x130>
 8013930:	680b      	ldr	r3, [r1, #0]
 8013932:	6826      	ldr	r6, [r4, #0]
 8013934:	6960      	ldr	r0, [r4, #20]
 8013936:	1d1d      	adds	r5, r3, #4
 8013938:	600d      	str	r5, [r1, #0]
 801393a:	0635      	lsls	r5, r6, #24
 801393c:	681b      	ldr	r3, [r3, #0]
 801393e:	d501      	bpl.n	8013944 <_printf_i+0x1cc>
 8013940:	6018      	str	r0, [r3, #0]
 8013942:	e002      	b.n	801394a <_printf_i+0x1d2>
 8013944:	0671      	lsls	r1, r6, #25
 8013946:	d5fb      	bpl.n	8013940 <_printf_i+0x1c8>
 8013948:	8018      	strh	r0, [r3, #0]
 801394a:	2300      	movs	r3, #0
 801394c:	6123      	str	r3, [r4, #16]
 801394e:	4616      	mov	r6, r2
 8013950:	e7ba      	b.n	80138c8 <_printf_i+0x150>
 8013952:	680b      	ldr	r3, [r1, #0]
 8013954:	1d1a      	adds	r2, r3, #4
 8013956:	600a      	str	r2, [r1, #0]
 8013958:	681e      	ldr	r6, [r3, #0]
 801395a:	6862      	ldr	r2, [r4, #4]
 801395c:	2100      	movs	r1, #0
 801395e:	4630      	mov	r0, r6
 8013960:	f7ec fc5e 	bl	8000220 <memchr>
 8013964:	b108      	cbz	r0, 801396a <_printf_i+0x1f2>
 8013966:	1b80      	subs	r0, r0, r6
 8013968:	6060      	str	r0, [r4, #4]
 801396a:	6863      	ldr	r3, [r4, #4]
 801396c:	6123      	str	r3, [r4, #16]
 801396e:	2300      	movs	r3, #0
 8013970:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013974:	e7a8      	b.n	80138c8 <_printf_i+0x150>
 8013976:	6923      	ldr	r3, [r4, #16]
 8013978:	4632      	mov	r2, r6
 801397a:	4649      	mov	r1, r9
 801397c:	4640      	mov	r0, r8
 801397e:	47d0      	blx	sl
 8013980:	3001      	adds	r0, #1
 8013982:	d0ab      	beq.n	80138dc <_printf_i+0x164>
 8013984:	6823      	ldr	r3, [r4, #0]
 8013986:	079b      	lsls	r3, r3, #30
 8013988:	d413      	bmi.n	80139b2 <_printf_i+0x23a>
 801398a:	68e0      	ldr	r0, [r4, #12]
 801398c:	9b03      	ldr	r3, [sp, #12]
 801398e:	4298      	cmp	r0, r3
 8013990:	bfb8      	it	lt
 8013992:	4618      	movlt	r0, r3
 8013994:	e7a4      	b.n	80138e0 <_printf_i+0x168>
 8013996:	2301      	movs	r3, #1
 8013998:	4632      	mov	r2, r6
 801399a:	4649      	mov	r1, r9
 801399c:	4640      	mov	r0, r8
 801399e:	47d0      	blx	sl
 80139a0:	3001      	adds	r0, #1
 80139a2:	d09b      	beq.n	80138dc <_printf_i+0x164>
 80139a4:	3501      	adds	r5, #1
 80139a6:	68e3      	ldr	r3, [r4, #12]
 80139a8:	9903      	ldr	r1, [sp, #12]
 80139aa:	1a5b      	subs	r3, r3, r1
 80139ac:	42ab      	cmp	r3, r5
 80139ae:	dcf2      	bgt.n	8013996 <_printf_i+0x21e>
 80139b0:	e7eb      	b.n	801398a <_printf_i+0x212>
 80139b2:	2500      	movs	r5, #0
 80139b4:	f104 0619 	add.w	r6, r4, #25
 80139b8:	e7f5      	b.n	80139a6 <_printf_i+0x22e>
 80139ba:	bf00      	nop
 80139bc:	0801a228 	.word	0x0801a228
 80139c0:	0801a239 	.word	0x0801a239

080139c4 <_scanf_float>:
 80139c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139c8:	b087      	sub	sp, #28
 80139ca:	4617      	mov	r7, r2
 80139cc:	9303      	str	r3, [sp, #12]
 80139ce:	688b      	ldr	r3, [r1, #8]
 80139d0:	1e5a      	subs	r2, r3, #1
 80139d2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80139d6:	bf83      	ittte	hi
 80139d8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80139dc:	195b      	addhi	r3, r3, r5
 80139de:	9302      	strhi	r3, [sp, #8]
 80139e0:	2300      	movls	r3, #0
 80139e2:	bf86      	itte	hi
 80139e4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80139e8:	608b      	strhi	r3, [r1, #8]
 80139ea:	9302      	strls	r3, [sp, #8]
 80139ec:	680b      	ldr	r3, [r1, #0]
 80139ee:	468b      	mov	fp, r1
 80139f0:	2500      	movs	r5, #0
 80139f2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80139f6:	f84b 3b1c 	str.w	r3, [fp], #28
 80139fa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80139fe:	4680      	mov	r8, r0
 8013a00:	460c      	mov	r4, r1
 8013a02:	465e      	mov	r6, fp
 8013a04:	46aa      	mov	sl, r5
 8013a06:	46a9      	mov	r9, r5
 8013a08:	9501      	str	r5, [sp, #4]
 8013a0a:	68a2      	ldr	r2, [r4, #8]
 8013a0c:	b152      	cbz	r2, 8013a24 <_scanf_float+0x60>
 8013a0e:	683b      	ldr	r3, [r7, #0]
 8013a10:	781b      	ldrb	r3, [r3, #0]
 8013a12:	2b4e      	cmp	r3, #78	; 0x4e
 8013a14:	d864      	bhi.n	8013ae0 <_scanf_float+0x11c>
 8013a16:	2b40      	cmp	r3, #64	; 0x40
 8013a18:	d83c      	bhi.n	8013a94 <_scanf_float+0xd0>
 8013a1a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8013a1e:	b2c8      	uxtb	r0, r1
 8013a20:	280e      	cmp	r0, #14
 8013a22:	d93a      	bls.n	8013a9a <_scanf_float+0xd6>
 8013a24:	f1b9 0f00 	cmp.w	r9, #0
 8013a28:	d003      	beq.n	8013a32 <_scanf_float+0x6e>
 8013a2a:	6823      	ldr	r3, [r4, #0]
 8013a2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013a30:	6023      	str	r3, [r4, #0]
 8013a32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013a36:	f1ba 0f01 	cmp.w	sl, #1
 8013a3a:	f200 8113 	bhi.w	8013c64 <_scanf_float+0x2a0>
 8013a3e:	455e      	cmp	r6, fp
 8013a40:	f200 8105 	bhi.w	8013c4e <_scanf_float+0x28a>
 8013a44:	2501      	movs	r5, #1
 8013a46:	4628      	mov	r0, r5
 8013a48:	b007      	add	sp, #28
 8013a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a4e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8013a52:	2a0d      	cmp	r2, #13
 8013a54:	d8e6      	bhi.n	8013a24 <_scanf_float+0x60>
 8013a56:	a101      	add	r1, pc, #4	; (adr r1, 8013a5c <_scanf_float+0x98>)
 8013a58:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8013a5c:	08013b9b 	.word	0x08013b9b
 8013a60:	08013a25 	.word	0x08013a25
 8013a64:	08013a25 	.word	0x08013a25
 8013a68:	08013a25 	.word	0x08013a25
 8013a6c:	08013bfb 	.word	0x08013bfb
 8013a70:	08013bd3 	.word	0x08013bd3
 8013a74:	08013a25 	.word	0x08013a25
 8013a78:	08013a25 	.word	0x08013a25
 8013a7c:	08013ba9 	.word	0x08013ba9
 8013a80:	08013a25 	.word	0x08013a25
 8013a84:	08013a25 	.word	0x08013a25
 8013a88:	08013a25 	.word	0x08013a25
 8013a8c:	08013a25 	.word	0x08013a25
 8013a90:	08013b61 	.word	0x08013b61
 8013a94:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8013a98:	e7db      	b.n	8013a52 <_scanf_float+0x8e>
 8013a9a:	290e      	cmp	r1, #14
 8013a9c:	d8c2      	bhi.n	8013a24 <_scanf_float+0x60>
 8013a9e:	a001      	add	r0, pc, #4	; (adr r0, 8013aa4 <_scanf_float+0xe0>)
 8013aa0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8013aa4:	08013b53 	.word	0x08013b53
 8013aa8:	08013a25 	.word	0x08013a25
 8013aac:	08013b53 	.word	0x08013b53
 8013ab0:	08013be7 	.word	0x08013be7
 8013ab4:	08013a25 	.word	0x08013a25
 8013ab8:	08013b01 	.word	0x08013b01
 8013abc:	08013b3d 	.word	0x08013b3d
 8013ac0:	08013b3d 	.word	0x08013b3d
 8013ac4:	08013b3d 	.word	0x08013b3d
 8013ac8:	08013b3d 	.word	0x08013b3d
 8013acc:	08013b3d 	.word	0x08013b3d
 8013ad0:	08013b3d 	.word	0x08013b3d
 8013ad4:	08013b3d 	.word	0x08013b3d
 8013ad8:	08013b3d 	.word	0x08013b3d
 8013adc:	08013b3d 	.word	0x08013b3d
 8013ae0:	2b6e      	cmp	r3, #110	; 0x6e
 8013ae2:	d809      	bhi.n	8013af8 <_scanf_float+0x134>
 8013ae4:	2b60      	cmp	r3, #96	; 0x60
 8013ae6:	d8b2      	bhi.n	8013a4e <_scanf_float+0x8a>
 8013ae8:	2b54      	cmp	r3, #84	; 0x54
 8013aea:	d077      	beq.n	8013bdc <_scanf_float+0x218>
 8013aec:	2b59      	cmp	r3, #89	; 0x59
 8013aee:	d199      	bne.n	8013a24 <_scanf_float+0x60>
 8013af0:	2d07      	cmp	r5, #7
 8013af2:	d197      	bne.n	8013a24 <_scanf_float+0x60>
 8013af4:	2508      	movs	r5, #8
 8013af6:	e029      	b.n	8013b4c <_scanf_float+0x188>
 8013af8:	2b74      	cmp	r3, #116	; 0x74
 8013afa:	d06f      	beq.n	8013bdc <_scanf_float+0x218>
 8013afc:	2b79      	cmp	r3, #121	; 0x79
 8013afe:	e7f6      	b.n	8013aee <_scanf_float+0x12a>
 8013b00:	6821      	ldr	r1, [r4, #0]
 8013b02:	05c8      	lsls	r0, r1, #23
 8013b04:	d51a      	bpl.n	8013b3c <_scanf_float+0x178>
 8013b06:	9b02      	ldr	r3, [sp, #8]
 8013b08:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8013b0c:	6021      	str	r1, [r4, #0]
 8013b0e:	f109 0901 	add.w	r9, r9, #1
 8013b12:	b11b      	cbz	r3, 8013b1c <_scanf_float+0x158>
 8013b14:	3b01      	subs	r3, #1
 8013b16:	3201      	adds	r2, #1
 8013b18:	9302      	str	r3, [sp, #8]
 8013b1a:	60a2      	str	r2, [r4, #8]
 8013b1c:	68a3      	ldr	r3, [r4, #8]
 8013b1e:	3b01      	subs	r3, #1
 8013b20:	60a3      	str	r3, [r4, #8]
 8013b22:	6923      	ldr	r3, [r4, #16]
 8013b24:	3301      	adds	r3, #1
 8013b26:	6123      	str	r3, [r4, #16]
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	3b01      	subs	r3, #1
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	607b      	str	r3, [r7, #4]
 8013b30:	f340 8084 	ble.w	8013c3c <_scanf_float+0x278>
 8013b34:	683b      	ldr	r3, [r7, #0]
 8013b36:	3301      	adds	r3, #1
 8013b38:	603b      	str	r3, [r7, #0]
 8013b3a:	e766      	b.n	8013a0a <_scanf_float+0x46>
 8013b3c:	eb1a 0f05 	cmn.w	sl, r5
 8013b40:	f47f af70 	bne.w	8013a24 <_scanf_float+0x60>
 8013b44:	6822      	ldr	r2, [r4, #0]
 8013b46:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8013b4a:	6022      	str	r2, [r4, #0]
 8013b4c:	f806 3b01 	strb.w	r3, [r6], #1
 8013b50:	e7e4      	b.n	8013b1c <_scanf_float+0x158>
 8013b52:	6822      	ldr	r2, [r4, #0]
 8013b54:	0610      	lsls	r0, r2, #24
 8013b56:	f57f af65 	bpl.w	8013a24 <_scanf_float+0x60>
 8013b5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013b5e:	e7f4      	b.n	8013b4a <_scanf_float+0x186>
 8013b60:	f1ba 0f00 	cmp.w	sl, #0
 8013b64:	d10e      	bne.n	8013b84 <_scanf_float+0x1c0>
 8013b66:	f1b9 0f00 	cmp.w	r9, #0
 8013b6a:	d10e      	bne.n	8013b8a <_scanf_float+0x1c6>
 8013b6c:	6822      	ldr	r2, [r4, #0]
 8013b6e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8013b72:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8013b76:	d108      	bne.n	8013b8a <_scanf_float+0x1c6>
 8013b78:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013b7c:	6022      	str	r2, [r4, #0]
 8013b7e:	f04f 0a01 	mov.w	sl, #1
 8013b82:	e7e3      	b.n	8013b4c <_scanf_float+0x188>
 8013b84:	f1ba 0f02 	cmp.w	sl, #2
 8013b88:	d055      	beq.n	8013c36 <_scanf_float+0x272>
 8013b8a:	2d01      	cmp	r5, #1
 8013b8c:	d002      	beq.n	8013b94 <_scanf_float+0x1d0>
 8013b8e:	2d04      	cmp	r5, #4
 8013b90:	f47f af48 	bne.w	8013a24 <_scanf_float+0x60>
 8013b94:	3501      	adds	r5, #1
 8013b96:	b2ed      	uxtb	r5, r5
 8013b98:	e7d8      	b.n	8013b4c <_scanf_float+0x188>
 8013b9a:	f1ba 0f01 	cmp.w	sl, #1
 8013b9e:	f47f af41 	bne.w	8013a24 <_scanf_float+0x60>
 8013ba2:	f04f 0a02 	mov.w	sl, #2
 8013ba6:	e7d1      	b.n	8013b4c <_scanf_float+0x188>
 8013ba8:	b97d      	cbnz	r5, 8013bca <_scanf_float+0x206>
 8013baa:	f1b9 0f00 	cmp.w	r9, #0
 8013bae:	f47f af3c 	bne.w	8013a2a <_scanf_float+0x66>
 8013bb2:	6822      	ldr	r2, [r4, #0]
 8013bb4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8013bb8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8013bbc:	f47f af39 	bne.w	8013a32 <_scanf_float+0x6e>
 8013bc0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013bc4:	6022      	str	r2, [r4, #0]
 8013bc6:	2501      	movs	r5, #1
 8013bc8:	e7c0      	b.n	8013b4c <_scanf_float+0x188>
 8013bca:	2d03      	cmp	r5, #3
 8013bcc:	d0e2      	beq.n	8013b94 <_scanf_float+0x1d0>
 8013bce:	2d05      	cmp	r5, #5
 8013bd0:	e7de      	b.n	8013b90 <_scanf_float+0x1cc>
 8013bd2:	2d02      	cmp	r5, #2
 8013bd4:	f47f af26 	bne.w	8013a24 <_scanf_float+0x60>
 8013bd8:	2503      	movs	r5, #3
 8013bda:	e7b7      	b.n	8013b4c <_scanf_float+0x188>
 8013bdc:	2d06      	cmp	r5, #6
 8013bde:	f47f af21 	bne.w	8013a24 <_scanf_float+0x60>
 8013be2:	2507      	movs	r5, #7
 8013be4:	e7b2      	b.n	8013b4c <_scanf_float+0x188>
 8013be6:	6822      	ldr	r2, [r4, #0]
 8013be8:	0591      	lsls	r1, r2, #22
 8013bea:	f57f af1b 	bpl.w	8013a24 <_scanf_float+0x60>
 8013bee:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8013bf2:	6022      	str	r2, [r4, #0]
 8013bf4:	f8cd 9004 	str.w	r9, [sp, #4]
 8013bf8:	e7a8      	b.n	8013b4c <_scanf_float+0x188>
 8013bfa:	6822      	ldr	r2, [r4, #0]
 8013bfc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8013c00:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8013c04:	d006      	beq.n	8013c14 <_scanf_float+0x250>
 8013c06:	0550      	lsls	r0, r2, #21
 8013c08:	f57f af0c 	bpl.w	8013a24 <_scanf_float+0x60>
 8013c0c:	f1b9 0f00 	cmp.w	r9, #0
 8013c10:	f43f af0f 	beq.w	8013a32 <_scanf_float+0x6e>
 8013c14:	0591      	lsls	r1, r2, #22
 8013c16:	bf58      	it	pl
 8013c18:	9901      	ldrpl	r1, [sp, #4]
 8013c1a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013c1e:	bf58      	it	pl
 8013c20:	eba9 0101 	subpl.w	r1, r9, r1
 8013c24:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8013c28:	bf58      	it	pl
 8013c2a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8013c2e:	6022      	str	r2, [r4, #0]
 8013c30:	f04f 0900 	mov.w	r9, #0
 8013c34:	e78a      	b.n	8013b4c <_scanf_float+0x188>
 8013c36:	f04f 0a03 	mov.w	sl, #3
 8013c3a:	e787      	b.n	8013b4c <_scanf_float+0x188>
 8013c3c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013c40:	4639      	mov	r1, r7
 8013c42:	4640      	mov	r0, r8
 8013c44:	4798      	blx	r3
 8013c46:	2800      	cmp	r0, #0
 8013c48:	f43f aedf 	beq.w	8013a0a <_scanf_float+0x46>
 8013c4c:	e6ea      	b.n	8013a24 <_scanf_float+0x60>
 8013c4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013c52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013c56:	463a      	mov	r2, r7
 8013c58:	4640      	mov	r0, r8
 8013c5a:	4798      	blx	r3
 8013c5c:	6923      	ldr	r3, [r4, #16]
 8013c5e:	3b01      	subs	r3, #1
 8013c60:	6123      	str	r3, [r4, #16]
 8013c62:	e6ec      	b.n	8013a3e <_scanf_float+0x7a>
 8013c64:	1e6b      	subs	r3, r5, #1
 8013c66:	2b06      	cmp	r3, #6
 8013c68:	d825      	bhi.n	8013cb6 <_scanf_float+0x2f2>
 8013c6a:	2d02      	cmp	r5, #2
 8013c6c:	d836      	bhi.n	8013cdc <_scanf_float+0x318>
 8013c6e:	455e      	cmp	r6, fp
 8013c70:	f67f aee8 	bls.w	8013a44 <_scanf_float+0x80>
 8013c74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013c78:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013c7c:	463a      	mov	r2, r7
 8013c7e:	4640      	mov	r0, r8
 8013c80:	4798      	blx	r3
 8013c82:	6923      	ldr	r3, [r4, #16]
 8013c84:	3b01      	subs	r3, #1
 8013c86:	6123      	str	r3, [r4, #16]
 8013c88:	e7f1      	b.n	8013c6e <_scanf_float+0x2aa>
 8013c8a:	9802      	ldr	r0, [sp, #8]
 8013c8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013c90:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8013c94:	9002      	str	r0, [sp, #8]
 8013c96:	463a      	mov	r2, r7
 8013c98:	4640      	mov	r0, r8
 8013c9a:	4798      	blx	r3
 8013c9c:	6923      	ldr	r3, [r4, #16]
 8013c9e:	3b01      	subs	r3, #1
 8013ca0:	6123      	str	r3, [r4, #16]
 8013ca2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013ca6:	fa5f fa8a 	uxtb.w	sl, sl
 8013caa:	f1ba 0f02 	cmp.w	sl, #2
 8013cae:	d1ec      	bne.n	8013c8a <_scanf_float+0x2c6>
 8013cb0:	3d03      	subs	r5, #3
 8013cb2:	b2ed      	uxtb	r5, r5
 8013cb4:	1b76      	subs	r6, r6, r5
 8013cb6:	6823      	ldr	r3, [r4, #0]
 8013cb8:	05da      	lsls	r2, r3, #23
 8013cba:	d52f      	bpl.n	8013d1c <_scanf_float+0x358>
 8013cbc:	055b      	lsls	r3, r3, #21
 8013cbe:	d510      	bpl.n	8013ce2 <_scanf_float+0x31e>
 8013cc0:	455e      	cmp	r6, fp
 8013cc2:	f67f aebf 	bls.w	8013a44 <_scanf_float+0x80>
 8013cc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013cca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013cce:	463a      	mov	r2, r7
 8013cd0:	4640      	mov	r0, r8
 8013cd2:	4798      	blx	r3
 8013cd4:	6923      	ldr	r3, [r4, #16]
 8013cd6:	3b01      	subs	r3, #1
 8013cd8:	6123      	str	r3, [r4, #16]
 8013cda:	e7f1      	b.n	8013cc0 <_scanf_float+0x2fc>
 8013cdc:	46aa      	mov	sl, r5
 8013cde:	9602      	str	r6, [sp, #8]
 8013ce0:	e7df      	b.n	8013ca2 <_scanf_float+0x2de>
 8013ce2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8013ce6:	6923      	ldr	r3, [r4, #16]
 8013ce8:	2965      	cmp	r1, #101	; 0x65
 8013cea:	f103 33ff 	add.w	r3, r3, #4294967295
 8013cee:	f106 35ff 	add.w	r5, r6, #4294967295
 8013cf2:	6123      	str	r3, [r4, #16]
 8013cf4:	d00c      	beq.n	8013d10 <_scanf_float+0x34c>
 8013cf6:	2945      	cmp	r1, #69	; 0x45
 8013cf8:	d00a      	beq.n	8013d10 <_scanf_float+0x34c>
 8013cfa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013cfe:	463a      	mov	r2, r7
 8013d00:	4640      	mov	r0, r8
 8013d02:	4798      	blx	r3
 8013d04:	6923      	ldr	r3, [r4, #16]
 8013d06:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8013d0a:	3b01      	subs	r3, #1
 8013d0c:	1eb5      	subs	r5, r6, #2
 8013d0e:	6123      	str	r3, [r4, #16]
 8013d10:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013d14:	463a      	mov	r2, r7
 8013d16:	4640      	mov	r0, r8
 8013d18:	4798      	blx	r3
 8013d1a:	462e      	mov	r6, r5
 8013d1c:	6825      	ldr	r5, [r4, #0]
 8013d1e:	f015 0510 	ands.w	r5, r5, #16
 8013d22:	d158      	bne.n	8013dd6 <_scanf_float+0x412>
 8013d24:	7035      	strb	r5, [r6, #0]
 8013d26:	6823      	ldr	r3, [r4, #0]
 8013d28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8013d2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013d30:	d11c      	bne.n	8013d6c <_scanf_float+0x3a8>
 8013d32:	9b01      	ldr	r3, [sp, #4]
 8013d34:	454b      	cmp	r3, r9
 8013d36:	eba3 0209 	sub.w	r2, r3, r9
 8013d3a:	d124      	bne.n	8013d86 <_scanf_float+0x3c2>
 8013d3c:	2200      	movs	r2, #0
 8013d3e:	4659      	mov	r1, fp
 8013d40:	4640      	mov	r0, r8
 8013d42:	f001 f86b 	bl	8014e1c <_strtod_r>
 8013d46:	9b03      	ldr	r3, [sp, #12]
 8013d48:	6821      	ldr	r1, [r4, #0]
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	f011 0f02 	tst.w	r1, #2
 8013d50:	ec57 6b10 	vmov	r6, r7, d0
 8013d54:	f103 0204 	add.w	r2, r3, #4
 8013d58:	d020      	beq.n	8013d9c <_scanf_float+0x3d8>
 8013d5a:	9903      	ldr	r1, [sp, #12]
 8013d5c:	600a      	str	r2, [r1, #0]
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	e9c3 6700 	strd	r6, r7, [r3]
 8013d64:	68e3      	ldr	r3, [r4, #12]
 8013d66:	3301      	adds	r3, #1
 8013d68:	60e3      	str	r3, [r4, #12]
 8013d6a:	e66c      	b.n	8013a46 <_scanf_float+0x82>
 8013d6c:	9b04      	ldr	r3, [sp, #16]
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d0e4      	beq.n	8013d3c <_scanf_float+0x378>
 8013d72:	9905      	ldr	r1, [sp, #20]
 8013d74:	230a      	movs	r3, #10
 8013d76:	462a      	mov	r2, r5
 8013d78:	3101      	adds	r1, #1
 8013d7a:	4640      	mov	r0, r8
 8013d7c:	f001 f8d8 	bl	8014f30 <_strtol_r>
 8013d80:	9b04      	ldr	r3, [sp, #16]
 8013d82:	9e05      	ldr	r6, [sp, #20]
 8013d84:	1ac2      	subs	r2, r0, r3
 8013d86:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8013d8a:	429e      	cmp	r6, r3
 8013d8c:	bf28      	it	cs
 8013d8e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8013d92:	4912      	ldr	r1, [pc, #72]	; (8013ddc <_scanf_float+0x418>)
 8013d94:	4630      	mov	r0, r6
 8013d96:	f000 f977 	bl	8014088 <siprintf>
 8013d9a:	e7cf      	b.n	8013d3c <_scanf_float+0x378>
 8013d9c:	f011 0f04 	tst.w	r1, #4
 8013da0:	9903      	ldr	r1, [sp, #12]
 8013da2:	600a      	str	r2, [r1, #0]
 8013da4:	d1db      	bne.n	8013d5e <_scanf_float+0x39a>
 8013da6:	f8d3 8000 	ldr.w	r8, [r3]
 8013daa:	ee10 2a10 	vmov	r2, s0
 8013dae:	ee10 0a10 	vmov	r0, s0
 8013db2:	463b      	mov	r3, r7
 8013db4:	4639      	mov	r1, r7
 8013db6:	f7ec fed9 	bl	8000b6c <__aeabi_dcmpun>
 8013dba:	b128      	cbz	r0, 8013dc8 <_scanf_float+0x404>
 8013dbc:	4808      	ldr	r0, [pc, #32]	; (8013de0 <_scanf_float+0x41c>)
 8013dbe:	f000 f919 	bl	8013ff4 <nanf>
 8013dc2:	ed88 0a00 	vstr	s0, [r8]
 8013dc6:	e7cd      	b.n	8013d64 <_scanf_float+0x3a0>
 8013dc8:	4630      	mov	r0, r6
 8013dca:	4639      	mov	r1, r7
 8013dcc:	f7ec ff2c 	bl	8000c28 <__aeabi_d2f>
 8013dd0:	f8c8 0000 	str.w	r0, [r8]
 8013dd4:	e7c6      	b.n	8013d64 <_scanf_float+0x3a0>
 8013dd6:	2500      	movs	r5, #0
 8013dd8:	e635      	b.n	8013a46 <_scanf_float+0x82>
 8013dda:	bf00      	nop
 8013ddc:	0801a24a 	.word	0x0801a24a
 8013de0:	0801a2db 	.word	0x0801a2db

08013de4 <iprintf>:
 8013de4:	b40f      	push	{r0, r1, r2, r3}
 8013de6:	4b0a      	ldr	r3, [pc, #40]	; (8013e10 <iprintf+0x2c>)
 8013de8:	b513      	push	{r0, r1, r4, lr}
 8013dea:	681c      	ldr	r4, [r3, #0]
 8013dec:	b124      	cbz	r4, 8013df8 <iprintf+0x14>
 8013dee:	69a3      	ldr	r3, [r4, #24]
 8013df0:	b913      	cbnz	r3, 8013df8 <iprintf+0x14>
 8013df2:	4620      	mov	r0, r4
 8013df4:	f7fe ffcc 	bl	8012d90 <__sinit>
 8013df8:	ab05      	add	r3, sp, #20
 8013dfa:	9a04      	ldr	r2, [sp, #16]
 8013dfc:	68a1      	ldr	r1, [r4, #8]
 8013dfe:	9301      	str	r3, [sp, #4]
 8013e00:	4620      	mov	r0, r4
 8013e02:	f003 fdb1 	bl	8017968 <_vfiprintf_r>
 8013e06:	b002      	add	sp, #8
 8013e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013e0c:	b004      	add	sp, #16
 8013e0e:	4770      	bx	lr
 8013e10:	200000f0 	.word	0x200000f0

08013e14 <_puts_r>:
 8013e14:	b570      	push	{r4, r5, r6, lr}
 8013e16:	460e      	mov	r6, r1
 8013e18:	4605      	mov	r5, r0
 8013e1a:	b118      	cbz	r0, 8013e24 <_puts_r+0x10>
 8013e1c:	6983      	ldr	r3, [r0, #24]
 8013e1e:	b90b      	cbnz	r3, 8013e24 <_puts_r+0x10>
 8013e20:	f7fe ffb6 	bl	8012d90 <__sinit>
 8013e24:	69ab      	ldr	r3, [r5, #24]
 8013e26:	68ac      	ldr	r4, [r5, #8]
 8013e28:	b913      	cbnz	r3, 8013e30 <_puts_r+0x1c>
 8013e2a:	4628      	mov	r0, r5
 8013e2c:	f7fe ffb0 	bl	8012d90 <__sinit>
 8013e30:	4b2c      	ldr	r3, [pc, #176]	; (8013ee4 <_puts_r+0xd0>)
 8013e32:	429c      	cmp	r4, r3
 8013e34:	d120      	bne.n	8013e78 <_puts_r+0x64>
 8013e36:	686c      	ldr	r4, [r5, #4]
 8013e38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013e3a:	07db      	lsls	r3, r3, #31
 8013e3c:	d405      	bmi.n	8013e4a <_puts_r+0x36>
 8013e3e:	89a3      	ldrh	r3, [r4, #12]
 8013e40:	0598      	lsls	r0, r3, #22
 8013e42:	d402      	bmi.n	8013e4a <_puts_r+0x36>
 8013e44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013e46:	f7ff f866 	bl	8012f16 <__retarget_lock_acquire_recursive>
 8013e4a:	89a3      	ldrh	r3, [r4, #12]
 8013e4c:	0719      	lsls	r1, r3, #28
 8013e4e:	d51d      	bpl.n	8013e8c <_puts_r+0x78>
 8013e50:	6923      	ldr	r3, [r4, #16]
 8013e52:	b1db      	cbz	r3, 8013e8c <_puts_r+0x78>
 8013e54:	3e01      	subs	r6, #1
 8013e56:	68a3      	ldr	r3, [r4, #8]
 8013e58:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013e5c:	3b01      	subs	r3, #1
 8013e5e:	60a3      	str	r3, [r4, #8]
 8013e60:	bb39      	cbnz	r1, 8013eb2 <_puts_r+0x9e>
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	da38      	bge.n	8013ed8 <_puts_r+0xc4>
 8013e66:	4622      	mov	r2, r4
 8013e68:	210a      	movs	r1, #10
 8013e6a:	4628      	mov	r0, r5
 8013e6c:	f001 f8e0 	bl	8015030 <__swbuf_r>
 8013e70:	3001      	adds	r0, #1
 8013e72:	d011      	beq.n	8013e98 <_puts_r+0x84>
 8013e74:	250a      	movs	r5, #10
 8013e76:	e011      	b.n	8013e9c <_puts_r+0x88>
 8013e78:	4b1b      	ldr	r3, [pc, #108]	; (8013ee8 <_puts_r+0xd4>)
 8013e7a:	429c      	cmp	r4, r3
 8013e7c:	d101      	bne.n	8013e82 <_puts_r+0x6e>
 8013e7e:	68ac      	ldr	r4, [r5, #8]
 8013e80:	e7da      	b.n	8013e38 <_puts_r+0x24>
 8013e82:	4b1a      	ldr	r3, [pc, #104]	; (8013eec <_puts_r+0xd8>)
 8013e84:	429c      	cmp	r4, r3
 8013e86:	bf08      	it	eq
 8013e88:	68ec      	ldreq	r4, [r5, #12]
 8013e8a:	e7d5      	b.n	8013e38 <_puts_r+0x24>
 8013e8c:	4621      	mov	r1, r4
 8013e8e:	4628      	mov	r0, r5
 8013e90:	f001 f932 	bl	80150f8 <__swsetup_r>
 8013e94:	2800      	cmp	r0, #0
 8013e96:	d0dd      	beq.n	8013e54 <_puts_r+0x40>
 8013e98:	f04f 35ff 	mov.w	r5, #4294967295
 8013e9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013e9e:	07da      	lsls	r2, r3, #31
 8013ea0:	d405      	bmi.n	8013eae <_puts_r+0x9a>
 8013ea2:	89a3      	ldrh	r3, [r4, #12]
 8013ea4:	059b      	lsls	r3, r3, #22
 8013ea6:	d402      	bmi.n	8013eae <_puts_r+0x9a>
 8013ea8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013eaa:	f7ff f835 	bl	8012f18 <__retarget_lock_release_recursive>
 8013eae:	4628      	mov	r0, r5
 8013eb0:	bd70      	pop	{r4, r5, r6, pc}
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	da04      	bge.n	8013ec0 <_puts_r+0xac>
 8013eb6:	69a2      	ldr	r2, [r4, #24]
 8013eb8:	429a      	cmp	r2, r3
 8013eba:	dc06      	bgt.n	8013eca <_puts_r+0xb6>
 8013ebc:	290a      	cmp	r1, #10
 8013ebe:	d004      	beq.n	8013eca <_puts_r+0xb6>
 8013ec0:	6823      	ldr	r3, [r4, #0]
 8013ec2:	1c5a      	adds	r2, r3, #1
 8013ec4:	6022      	str	r2, [r4, #0]
 8013ec6:	7019      	strb	r1, [r3, #0]
 8013ec8:	e7c5      	b.n	8013e56 <_puts_r+0x42>
 8013eca:	4622      	mov	r2, r4
 8013ecc:	4628      	mov	r0, r5
 8013ece:	f001 f8af 	bl	8015030 <__swbuf_r>
 8013ed2:	3001      	adds	r0, #1
 8013ed4:	d1bf      	bne.n	8013e56 <_puts_r+0x42>
 8013ed6:	e7df      	b.n	8013e98 <_puts_r+0x84>
 8013ed8:	6823      	ldr	r3, [r4, #0]
 8013eda:	250a      	movs	r5, #10
 8013edc:	1c5a      	adds	r2, r3, #1
 8013ede:	6022      	str	r2, [r4, #0]
 8013ee0:	701d      	strb	r5, [r3, #0]
 8013ee2:	e7db      	b.n	8013e9c <_puts_r+0x88>
 8013ee4:	0801a1d4 	.word	0x0801a1d4
 8013ee8:	0801a1f4 	.word	0x0801a1f4
 8013eec:	0801a1b4 	.word	0x0801a1b4

08013ef0 <puts>:
 8013ef0:	4b02      	ldr	r3, [pc, #8]	; (8013efc <puts+0xc>)
 8013ef2:	4601      	mov	r1, r0
 8013ef4:	6818      	ldr	r0, [r3, #0]
 8013ef6:	f7ff bf8d 	b.w	8013e14 <_puts_r>
 8013efa:	bf00      	nop
 8013efc:	200000f0 	.word	0x200000f0

08013f00 <cleanup_glue>:
 8013f00:	b538      	push	{r3, r4, r5, lr}
 8013f02:	460c      	mov	r4, r1
 8013f04:	6809      	ldr	r1, [r1, #0]
 8013f06:	4605      	mov	r5, r0
 8013f08:	b109      	cbz	r1, 8013f0e <cleanup_glue+0xe>
 8013f0a:	f7ff fff9 	bl	8013f00 <cleanup_glue>
 8013f0e:	4621      	mov	r1, r4
 8013f10:	4628      	mov	r0, r5
 8013f12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013f16:	f7ff b841 	b.w	8012f9c <_free_r>
	...

08013f1c <_reclaim_reent>:
 8013f1c:	4b2c      	ldr	r3, [pc, #176]	; (8013fd0 <_reclaim_reent+0xb4>)
 8013f1e:	681b      	ldr	r3, [r3, #0]
 8013f20:	4283      	cmp	r3, r0
 8013f22:	b570      	push	{r4, r5, r6, lr}
 8013f24:	4604      	mov	r4, r0
 8013f26:	d051      	beq.n	8013fcc <_reclaim_reent+0xb0>
 8013f28:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013f2a:	b143      	cbz	r3, 8013f3e <_reclaim_reent+0x22>
 8013f2c:	68db      	ldr	r3, [r3, #12]
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d14a      	bne.n	8013fc8 <_reclaim_reent+0xac>
 8013f32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013f34:	6819      	ldr	r1, [r3, #0]
 8013f36:	b111      	cbz	r1, 8013f3e <_reclaim_reent+0x22>
 8013f38:	4620      	mov	r0, r4
 8013f3a:	f7ff f82f 	bl	8012f9c <_free_r>
 8013f3e:	6961      	ldr	r1, [r4, #20]
 8013f40:	b111      	cbz	r1, 8013f48 <_reclaim_reent+0x2c>
 8013f42:	4620      	mov	r0, r4
 8013f44:	f7ff f82a 	bl	8012f9c <_free_r>
 8013f48:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013f4a:	b111      	cbz	r1, 8013f52 <_reclaim_reent+0x36>
 8013f4c:	4620      	mov	r0, r4
 8013f4e:	f7ff f825 	bl	8012f9c <_free_r>
 8013f52:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8013f54:	b111      	cbz	r1, 8013f5c <_reclaim_reent+0x40>
 8013f56:	4620      	mov	r0, r4
 8013f58:	f7ff f820 	bl	8012f9c <_free_r>
 8013f5c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8013f5e:	b111      	cbz	r1, 8013f66 <_reclaim_reent+0x4a>
 8013f60:	4620      	mov	r0, r4
 8013f62:	f7ff f81b 	bl	8012f9c <_free_r>
 8013f66:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8013f68:	b111      	cbz	r1, 8013f70 <_reclaim_reent+0x54>
 8013f6a:	4620      	mov	r0, r4
 8013f6c:	f7ff f816 	bl	8012f9c <_free_r>
 8013f70:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8013f72:	b111      	cbz	r1, 8013f7a <_reclaim_reent+0x5e>
 8013f74:	4620      	mov	r0, r4
 8013f76:	f7ff f811 	bl	8012f9c <_free_r>
 8013f7a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8013f7c:	b111      	cbz	r1, 8013f84 <_reclaim_reent+0x68>
 8013f7e:	4620      	mov	r0, r4
 8013f80:	f7ff f80c 	bl	8012f9c <_free_r>
 8013f84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013f86:	b111      	cbz	r1, 8013f8e <_reclaim_reent+0x72>
 8013f88:	4620      	mov	r0, r4
 8013f8a:	f7ff f807 	bl	8012f9c <_free_r>
 8013f8e:	69a3      	ldr	r3, [r4, #24]
 8013f90:	b1e3      	cbz	r3, 8013fcc <_reclaim_reent+0xb0>
 8013f92:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013f94:	4620      	mov	r0, r4
 8013f96:	4798      	blx	r3
 8013f98:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8013f9a:	b1b9      	cbz	r1, 8013fcc <_reclaim_reent+0xb0>
 8013f9c:	4620      	mov	r0, r4
 8013f9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013fa2:	f7ff bfad 	b.w	8013f00 <cleanup_glue>
 8013fa6:	5949      	ldr	r1, [r1, r5]
 8013fa8:	b941      	cbnz	r1, 8013fbc <_reclaim_reent+0xa0>
 8013faa:	3504      	adds	r5, #4
 8013fac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013fae:	2d80      	cmp	r5, #128	; 0x80
 8013fb0:	68d9      	ldr	r1, [r3, #12]
 8013fb2:	d1f8      	bne.n	8013fa6 <_reclaim_reent+0x8a>
 8013fb4:	4620      	mov	r0, r4
 8013fb6:	f7fe fff1 	bl	8012f9c <_free_r>
 8013fba:	e7ba      	b.n	8013f32 <_reclaim_reent+0x16>
 8013fbc:	680e      	ldr	r6, [r1, #0]
 8013fbe:	4620      	mov	r0, r4
 8013fc0:	f7fe ffec 	bl	8012f9c <_free_r>
 8013fc4:	4631      	mov	r1, r6
 8013fc6:	e7ef      	b.n	8013fa8 <_reclaim_reent+0x8c>
 8013fc8:	2500      	movs	r5, #0
 8013fca:	e7ef      	b.n	8013fac <_reclaim_reent+0x90>
 8013fcc:	bd70      	pop	{r4, r5, r6, pc}
 8013fce:	bf00      	nop
 8013fd0:	200000f0 	.word	0x200000f0

08013fd4 <_sbrk_r>:
 8013fd4:	b538      	push	{r3, r4, r5, lr}
 8013fd6:	4d06      	ldr	r5, [pc, #24]	; (8013ff0 <_sbrk_r+0x1c>)
 8013fd8:	2300      	movs	r3, #0
 8013fda:	4604      	mov	r4, r0
 8013fdc:	4608      	mov	r0, r1
 8013fde:	602b      	str	r3, [r5, #0]
 8013fe0:	f004 f834 	bl	801804c <_sbrk>
 8013fe4:	1c43      	adds	r3, r0, #1
 8013fe6:	d102      	bne.n	8013fee <_sbrk_r+0x1a>
 8013fe8:	682b      	ldr	r3, [r5, #0]
 8013fea:	b103      	cbz	r3, 8013fee <_sbrk_r+0x1a>
 8013fec:	6023      	str	r3, [r4, #0]
 8013fee:	bd38      	pop	{r3, r4, r5, pc}
 8013ff0:	2000654c 	.word	0x2000654c

08013ff4 <nanf>:
 8013ff4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013ffc <nanf+0x8>
 8013ff8:	4770      	bx	lr
 8013ffa:	bf00      	nop
 8013ffc:	7fc00000 	.word	0x7fc00000

08014000 <_raise_r>:
 8014000:	291f      	cmp	r1, #31
 8014002:	b538      	push	{r3, r4, r5, lr}
 8014004:	4604      	mov	r4, r0
 8014006:	460d      	mov	r5, r1
 8014008:	d904      	bls.n	8014014 <_raise_r+0x14>
 801400a:	2316      	movs	r3, #22
 801400c:	6003      	str	r3, [r0, #0]
 801400e:	f04f 30ff 	mov.w	r0, #4294967295
 8014012:	bd38      	pop	{r3, r4, r5, pc}
 8014014:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014016:	b112      	cbz	r2, 801401e <_raise_r+0x1e>
 8014018:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801401c:	b94b      	cbnz	r3, 8014032 <_raise_r+0x32>
 801401e:	4620      	mov	r0, r4
 8014020:	f000 f830 	bl	8014084 <_getpid_r>
 8014024:	462a      	mov	r2, r5
 8014026:	4601      	mov	r1, r0
 8014028:	4620      	mov	r0, r4
 801402a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801402e:	f000 b817 	b.w	8014060 <_kill_r>
 8014032:	2b01      	cmp	r3, #1
 8014034:	d00a      	beq.n	801404c <_raise_r+0x4c>
 8014036:	1c59      	adds	r1, r3, #1
 8014038:	d103      	bne.n	8014042 <_raise_r+0x42>
 801403a:	2316      	movs	r3, #22
 801403c:	6003      	str	r3, [r0, #0]
 801403e:	2001      	movs	r0, #1
 8014040:	e7e7      	b.n	8014012 <_raise_r+0x12>
 8014042:	2400      	movs	r4, #0
 8014044:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014048:	4628      	mov	r0, r5
 801404a:	4798      	blx	r3
 801404c:	2000      	movs	r0, #0
 801404e:	e7e0      	b.n	8014012 <_raise_r+0x12>

08014050 <raise>:
 8014050:	4b02      	ldr	r3, [pc, #8]	; (801405c <raise+0xc>)
 8014052:	4601      	mov	r1, r0
 8014054:	6818      	ldr	r0, [r3, #0]
 8014056:	f7ff bfd3 	b.w	8014000 <_raise_r>
 801405a:	bf00      	nop
 801405c:	200000f0 	.word	0x200000f0

08014060 <_kill_r>:
 8014060:	b538      	push	{r3, r4, r5, lr}
 8014062:	4d07      	ldr	r5, [pc, #28]	; (8014080 <_kill_r+0x20>)
 8014064:	2300      	movs	r3, #0
 8014066:	4604      	mov	r4, r0
 8014068:	4608      	mov	r0, r1
 801406a:	4611      	mov	r1, r2
 801406c:	602b      	str	r3, [r5, #0]
 801406e:	f003 ffd5 	bl	801801c <_kill>
 8014072:	1c43      	adds	r3, r0, #1
 8014074:	d102      	bne.n	801407c <_kill_r+0x1c>
 8014076:	682b      	ldr	r3, [r5, #0]
 8014078:	b103      	cbz	r3, 801407c <_kill_r+0x1c>
 801407a:	6023      	str	r3, [r4, #0]
 801407c:	bd38      	pop	{r3, r4, r5, pc}
 801407e:	bf00      	nop
 8014080:	2000654c 	.word	0x2000654c

08014084 <_getpid_r>:
 8014084:	f003 bfba 	b.w	8017ffc <_getpid>

08014088 <siprintf>:
 8014088:	b40e      	push	{r1, r2, r3}
 801408a:	b500      	push	{lr}
 801408c:	b09c      	sub	sp, #112	; 0x70
 801408e:	ab1d      	add	r3, sp, #116	; 0x74
 8014090:	9002      	str	r0, [sp, #8]
 8014092:	9006      	str	r0, [sp, #24]
 8014094:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014098:	4809      	ldr	r0, [pc, #36]	; (80140c0 <siprintf+0x38>)
 801409a:	9107      	str	r1, [sp, #28]
 801409c:	9104      	str	r1, [sp, #16]
 801409e:	4909      	ldr	r1, [pc, #36]	; (80140c4 <siprintf+0x3c>)
 80140a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80140a4:	9105      	str	r1, [sp, #20]
 80140a6:	6800      	ldr	r0, [r0, #0]
 80140a8:	9301      	str	r3, [sp, #4]
 80140aa:	a902      	add	r1, sp, #8
 80140ac:	f003 f960 	bl	8017370 <_svfiprintf_r>
 80140b0:	9b02      	ldr	r3, [sp, #8]
 80140b2:	2200      	movs	r2, #0
 80140b4:	701a      	strb	r2, [r3, #0]
 80140b6:	b01c      	add	sp, #112	; 0x70
 80140b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80140bc:	b003      	add	sp, #12
 80140be:	4770      	bx	lr
 80140c0:	200000f0 	.word	0x200000f0
 80140c4:	ffff0208 	.word	0xffff0208

080140c8 <siscanf>:
 80140c8:	b40e      	push	{r1, r2, r3}
 80140ca:	b510      	push	{r4, lr}
 80140cc:	b09f      	sub	sp, #124	; 0x7c
 80140ce:	ac21      	add	r4, sp, #132	; 0x84
 80140d0:	f44f 7101 	mov.w	r1, #516	; 0x204
 80140d4:	f854 2b04 	ldr.w	r2, [r4], #4
 80140d8:	9201      	str	r2, [sp, #4]
 80140da:	f8ad 101c 	strh.w	r1, [sp, #28]
 80140de:	9004      	str	r0, [sp, #16]
 80140e0:	9008      	str	r0, [sp, #32]
 80140e2:	f7ec f88f 	bl	8000204 <strlen>
 80140e6:	4b0c      	ldr	r3, [pc, #48]	; (8014118 <siscanf+0x50>)
 80140e8:	9005      	str	r0, [sp, #20]
 80140ea:	9009      	str	r0, [sp, #36]	; 0x24
 80140ec:	930d      	str	r3, [sp, #52]	; 0x34
 80140ee:	480b      	ldr	r0, [pc, #44]	; (801411c <siscanf+0x54>)
 80140f0:	9a01      	ldr	r2, [sp, #4]
 80140f2:	6800      	ldr	r0, [r0, #0]
 80140f4:	9403      	str	r4, [sp, #12]
 80140f6:	2300      	movs	r3, #0
 80140f8:	9311      	str	r3, [sp, #68]	; 0x44
 80140fa:	9316      	str	r3, [sp, #88]	; 0x58
 80140fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014100:	f8ad 301e 	strh.w	r3, [sp, #30]
 8014104:	a904      	add	r1, sp, #16
 8014106:	4623      	mov	r3, r4
 8014108:	f003 fa8c 	bl	8017624 <__ssvfiscanf_r>
 801410c:	b01f      	add	sp, #124	; 0x7c
 801410e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014112:	b003      	add	sp, #12
 8014114:	4770      	bx	lr
 8014116:	bf00      	nop
 8014118:	08014143 	.word	0x08014143
 801411c:	200000f0 	.word	0x200000f0

08014120 <__sread>:
 8014120:	b510      	push	{r4, lr}
 8014122:	460c      	mov	r4, r1
 8014124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014128:	f003 fe9a 	bl	8017e60 <_read_r>
 801412c:	2800      	cmp	r0, #0
 801412e:	bfab      	itete	ge
 8014130:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014132:	89a3      	ldrhlt	r3, [r4, #12]
 8014134:	181b      	addge	r3, r3, r0
 8014136:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801413a:	bfac      	ite	ge
 801413c:	6563      	strge	r3, [r4, #84]	; 0x54
 801413e:	81a3      	strhlt	r3, [r4, #12]
 8014140:	bd10      	pop	{r4, pc}

08014142 <__seofread>:
 8014142:	2000      	movs	r0, #0
 8014144:	4770      	bx	lr

08014146 <__swrite>:
 8014146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801414a:	461f      	mov	r7, r3
 801414c:	898b      	ldrh	r3, [r1, #12]
 801414e:	05db      	lsls	r3, r3, #23
 8014150:	4605      	mov	r5, r0
 8014152:	460c      	mov	r4, r1
 8014154:	4616      	mov	r6, r2
 8014156:	d505      	bpl.n	8014164 <__swrite+0x1e>
 8014158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801415c:	2302      	movs	r3, #2
 801415e:	2200      	movs	r2, #0
 8014160:	f002 fb26 	bl	80167b0 <_lseek_r>
 8014164:	89a3      	ldrh	r3, [r4, #12]
 8014166:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801416a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801416e:	81a3      	strh	r3, [r4, #12]
 8014170:	4632      	mov	r2, r6
 8014172:	463b      	mov	r3, r7
 8014174:	4628      	mov	r0, r5
 8014176:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801417a:	f000 bfab 	b.w	80150d4 <_write_r>

0801417e <__sseek>:
 801417e:	b510      	push	{r4, lr}
 8014180:	460c      	mov	r4, r1
 8014182:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014186:	f002 fb13 	bl	80167b0 <_lseek_r>
 801418a:	1c43      	adds	r3, r0, #1
 801418c:	89a3      	ldrh	r3, [r4, #12]
 801418e:	bf15      	itete	ne
 8014190:	6560      	strne	r0, [r4, #84]	; 0x54
 8014192:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014196:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801419a:	81a3      	strheq	r3, [r4, #12]
 801419c:	bf18      	it	ne
 801419e:	81a3      	strhne	r3, [r4, #12]
 80141a0:	bd10      	pop	{r4, pc}

080141a2 <__sclose>:
 80141a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80141a6:	f001 b833 	b.w	8015210 <_close_r>

080141aa <strncmp>:
 80141aa:	b510      	push	{r4, lr}
 80141ac:	b16a      	cbz	r2, 80141ca <strncmp+0x20>
 80141ae:	3901      	subs	r1, #1
 80141b0:	1884      	adds	r4, r0, r2
 80141b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80141b6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80141ba:	4293      	cmp	r3, r2
 80141bc:	d103      	bne.n	80141c6 <strncmp+0x1c>
 80141be:	42a0      	cmp	r0, r4
 80141c0:	d001      	beq.n	80141c6 <strncmp+0x1c>
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d1f5      	bne.n	80141b2 <strncmp+0x8>
 80141c6:	1a98      	subs	r0, r3, r2
 80141c8:	bd10      	pop	{r4, pc}
 80141ca:	4610      	mov	r0, r2
 80141cc:	e7fc      	b.n	80141c8 <strncmp+0x1e>

080141ce <sulp>:
 80141ce:	b570      	push	{r4, r5, r6, lr}
 80141d0:	4604      	mov	r4, r0
 80141d2:	460d      	mov	r5, r1
 80141d4:	ec45 4b10 	vmov	d0, r4, r5
 80141d8:	4616      	mov	r6, r2
 80141da:	f002 fee9 	bl	8016fb0 <__ulp>
 80141de:	ec51 0b10 	vmov	r0, r1, d0
 80141e2:	b17e      	cbz	r6, 8014204 <sulp+0x36>
 80141e4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80141e8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	dd09      	ble.n	8014204 <sulp+0x36>
 80141f0:	051b      	lsls	r3, r3, #20
 80141f2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80141f6:	2400      	movs	r4, #0
 80141f8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80141fc:	4622      	mov	r2, r4
 80141fe:	462b      	mov	r3, r5
 8014200:	f7ec fa1a 	bl	8000638 <__aeabi_dmul>
 8014204:	bd70      	pop	{r4, r5, r6, pc}
	...

08014208 <_strtod_l>:
 8014208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801420c:	b0a3      	sub	sp, #140	; 0x8c
 801420e:	461f      	mov	r7, r3
 8014210:	2300      	movs	r3, #0
 8014212:	931e      	str	r3, [sp, #120]	; 0x78
 8014214:	4ba4      	ldr	r3, [pc, #656]	; (80144a8 <_strtod_l+0x2a0>)
 8014216:	9219      	str	r2, [sp, #100]	; 0x64
 8014218:	681b      	ldr	r3, [r3, #0]
 801421a:	9307      	str	r3, [sp, #28]
 801421c:	4604      	mov	r4, r0
 801421e:	4618      	mov	r0, r3
 8014220:	4688      	mov	r8, r1
 8014222:	f7eb ffef 	bl	8000204 <strlen>
 8014226:	f04f 0a00 	mov.w	sl, #0
 801422a:	4605      	mov	r5, r0
 801422c:	f04f 0b00 	mov.w	fp, #0
 8014230:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8014234:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014236:	781a      	ldrb	r2, [r3, #0]
 8014238:	2a2b      	cmp	r2, #43	; 0x2b
 801423a:	d04c      	beq.n	80142d6 <_strtod_l+0xce>
 801423c:	d839      	bhi.n	80142b2 <_strtod_l+0xaa>
 801423e:	2a0d      	cmp	r2, #13
 8014240:	d832      	bhi.n	80142a8 <_strtod_l+0xa0>
 8014242:	2a08      	cmp	r2, #8
 8014244:	d832      	bhi.n	80142ac <_strtod_l+0xa4>
 8014246:	2a00      	cmp	r2, #0
 8014248:	d03c      	beq.n	80142c4 <_strtod_l+0xbc>
 801424a:	2300      	movs	r3, #0
 801424c:	930e      	str	r3, [sp, #56]	; 0x38
 801424e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8014250:	7833      	ldrb	r3, [r6, #0]
 8014252:	2b30      	cmp	r3, #48	; 0x30
 8014254:	f040 80b4 	bne.w	80143c0 <_strtod_l+0x1b8>
 8014258:	7873      	ldrb	r3, [r6, #1]
 801425a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801425e:	2b58      	cmp	r3, #88	; 0x58
 8014260:	d16c      	bne.n	801433c <_strtod_l+0x134>
 8014262:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014264:	9301      	str	r3, [sp, #4]
 8014266:	ab1e      	add	r3, sp, #120	; 0x78
 8014268:	9702      	str	r7, [sp, #8]
 801426a:	9300      	str	r3, [sp, #0]
 801426c:	4a8f      	ldr	r2, [pc, #572]	; (80144ac <_strtod_l+0x2a4>)
 801426e:	ab1f      	add	r3, sp, #124	; 0x7c
 8014270:	a91d      	add	r1, sp, #116	; 0x74
 8014272:	4620      	mov	r0, r4
 8014274:	f001 ff90 	bl	8016198 <__gethex>
 8014278:	f010 0707 	ands.w	r7, r0, #7
 801427c:	4605      	mov	r5, r0
 801427e:	d005      	beq.n	801428c <_strtod_l+0x84>
 8014280:	2f06      	cmp	r7, #6
 8014282:	d12a      	bne.n	80142da <_strtod_l+0xd2>
 8014284:	3601      	adds	r6, #1
 8014286:	2300      	movs	r3, #0
 8014288:	961d      	str	r6, [sp, #116]	; 0x74
 801428a:	930e      	str	r3, [sp, #56]	; 0x38
 801428c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801428e:	2b00      	cmp	r3, #0
 8014290:	f040 8596 	bne.w	8014dc0 <_strtod_l+0xbb8>
 8014294:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014296:	b1db      	cbz	r3, 80142d0 <_strtod_l+0xc8>
 8014298:	4652      	mov	r2, sl
 801429a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801429e:	ec43 2b10 	vmov	d0, r2, r3
 80142a2:	b023      	add	sp, #140	; 0x8c
 80142a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142a8:	2a20      	cmp	r2, #32
 80142aa:	d1ce      	bne.n	801424a <_strtod_l+0x42>
 80142ac:	3301      	adds	r3, #1
 80142ae:	931d      	str	r3, [sp, #116]	; 0x74
 80142b0:	e7c0      	b.n	8014234 <_strtod_l+0x2c>
 80142b2:	2a2d      	cmp	r2, #45	; 0x2d
 80142b4:	d1c9      	bne.n	801424a <_strtod_l+0x42>
 80142b6:	2201      	movs	r2, #1
 80142b8:	920e      	str	r2, [sp, #56]	; 0x38
 80142ba:	1c5a      	adds	r2, r3, #1
 80142bc:	921d      	str	r2, [sp, #116]	; 0x74
 80142be:	785b      	ldrb	r3, [r3, #1]
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d1c4      	bne.n	801424e <_strtod_l+0x46>
 80142c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80142c6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	f040 8576 	bne.w	8014dbc <_strtod_l+0xbb4>
 80142d0:	4652      	mov	r2, sl
 80142d2:	465b      	mov	r3, fp
 80142d4:	e7e3      	b.n	801429e <_strtod_l+0x96>
 80142d6:	2200      	movs	r2, #0
 80142d8:	e7ee      	b.n	80142b8 <_strtod_l+0xb0>
 80142da:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80142dc:	b13a      	cbz	r2, 80142ee <_strtod_l+0xe6>
 80142de:	2135      	movs	r1, #53	; 0x35
 80142e0:	a820      	add	r0, sp, #128	; 0x80
 80142e2:	f002 ff70 	bl	80171c6 <__copybits>
 80142e6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80142e8:	4620      	mov	r0, r4
 80142ea:	f002 fb35 	bl	8016958 <_Bfree>
 80142ee:	3f01      	subs	r7, #1
 80142f0:	2f05      	cmp	r7, #5
 80142f2:	d807      	bhi.n	8014304 <_strtod_l+0xfc>
 80142f4:	e8df f007 	tbb	[pc, r7]
 80142f8:	1d180b0e 	.word	0x1d180b0e
 80142fc:	030e      	.short	0x030e
 80142fe:	f04f 0b00 	mov.w	fp, #0
 8014302:	46da      	mov	sl, fp
 8014304:	0728      	lsls	r0, r5, #28
 8014306:	d5c1      	bpl.n	801428c <_strtod_l+0x84>
 8014308:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801430c:	e7be      	b.n	801428c <_strtod_l+0x84>
 801430e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8014312:	e7f7      	b.n	8014304 <_strtod_l+0xfc>
 8014314:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8014318:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801431a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801431e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8014322:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8014326:	e7ed      	b.n	8014304 <_strtod_l+0xfc>
 8014328:	f8df b184 	ldr.w	fp, [pc, #388]	; 80144b0 <_strtod_l+0x2a8>
 801432c:	f04f 0a00 	mov.w	sl, #0
 8014330:	e7e8      	b.n	8014304 <_strtod_l+0xfc>
 8014332:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8014336:	f04f 3aff 	mov.w	sl, #4294967295
 801433a:	e7e3      	b.n	8014304 <_strtod_l+0xfc>
 801433c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801433e:	1c5a      	adds	r2, r3, #1
 8014340:	921d      	str	r2, [sp, #116]	; 0x74
 8014342:	785b      	ldrb	r3, [r3, #1]
 8014344:	2b30      	cmp	r3, #48	; 0x30
 8014346:	d0f9      	beq.n	801433c <_strtod_l+0x134>
 8014348:	2b00      	cmp	r3, #0
 801434a:	d09f      	beq.n	801428c <_strtod_l+0x84>
 801434c:	2301      	movs	r3, #1
 801434e:	f04f 0900 	mov.w	r9, #0
 8014352:	9304      	str	r3, [sp, #16]
 8014354:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014356:	930a      	str	r3, [sp, #40]	; 0x28
 8014358:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801435c:	464f      	mov	r7, r9
 801435e:	220a      	movs	r2, #10
 8014360:	981d      	ldr	r0, [sp, #116]	; 0x74
 8014362:	7806      	ldrb	r6, [r0, #0]
 8014364:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8014368:	b2d9      	uxtb	r1, r3
 801436a:	2909      	cmp	r1, #9
 801436c:	d92a      	bls.n	80143c4 <_strtod_l+0x1bc>
 801436e:	9907      	ldr	r1, [sp, #28]
 8014370:	462a      	mov	r2, r5
 8014372:	f7ff ff1a 	bl	80141aa <strncmp>
 8014376:	b398      	cbz	r0, 80143e0 <_strtod_l+0x1d8>
 8014378:	2000      	movs	r0, #0
 801437a:	4633      	mov	r3, r6
 801437c:	463d      	mov	r5, r7
 801437e:	9007      	str	r0, [sp, #28]
 8014380:	4602      	mov	r2, r0
 8014382:	2b65      	cmp	r3, #101	; 0x65
 8014384:	d001      	beq.n	801438a <_strtod_l+0x182>
 8014386:	2b45      	cmp	r3, #69	; 0x45
 8014388:	d118      	bne.n	80143bc <_strtod_l+0x1b4>
 801438a:	b91d      	cbnz	r5, 8014394 <_strtod_l+0x18c>
 801438c:	9b04      	ldr	r3, [sp, #16]
 801438e:	4303      	orrs	r3, r0
 8014390:	d098      	beq.n	80142c4 <_strtod_l+0xbc>
 8014392:	2500      	movs	r5, #0
 8014394:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8014398:	f108 0301 	add.w	r3, r8, #1
 801439c:	931d      	str	r3, [sp, #116]	; 0x74
 801439e:	f898 3001 	ldrb.w	r3, [r8, #1]
 80143a2:	2b2b      	cmp	r3, #43	; 0x2b
 80143a4:	d075      	beq.n	8014492 <_strtod_l+0x28a>
 80143a6:	2b2d      	cmp	r3, #45	; 0x2d
 80143a8:	d07b      	beq.n	80144a2 <_strtod_l+0x29a>
 80143aa:	f04f 0c00 	mov.w	ip, #0
 80143ae:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80143b2:	2909      	cmp	r1, #9
 80143b4:	f240 8082 	bls.w	80144bc <_strtod_l+0x2b4>
 80143b8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80143bc:	2600      	movs	r6, #0
 80143be:	e09d      	b.n	80144fc <_strtod_l+0x2f4>
 80143c0:	2300      	movs	r3, #0
 80143c2:	e7c4      	b.n	801434e <_strtod_l+0x146>
 80143c4:	2f08      	cmp	r7, #8
 80143c6:	bfd8      	it	le
 80143c8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80143ca:	f100 0001 	add.w	r0, r0, #1
 80143ce:	bfda      	itte	le
 80143d0:	fb02 3301 	mlale	r3, r2, r1, r3
 80143d4:	9309      	strle	r3, [sp, #36]	; 0x24
 80143d6:	fb02 3909 	mlagt	r9, r2, r9, r3
 80143da:	3701      	adds	r7, #1
 80143dc:	901d      	str	r0, [sp, #116]	; 0x74
 80143de:	e7bf      	b.n	8014360 <_strtod_l+0x158>
 80143e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80143e2:	195a      	adds	r2, r3, r5
 80143e4:	921d      	str	r2, [sp, #116]	; 0x74
 80143e6:	5d5b      	ldrb	r3, [r3, r5]
 80143e8:	2f00      	cmp	r7, #0
 80143ea:	d037      	beq.n	801445c <_strtod_l+0x254>
 80143ec:	9007      	str	r0, [sp, #28]
 80143ee:	463d      	mov	r5, r7
 80143f0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80143f4:	2a09      	cmp	r2, #9
 80143f6:	d912      	bls.n	801441e <_strtod_l+0x216>
 80143f8:	2201      	movs	r2, #1
 80143fa:	e7c2      	b.n	8014382 <_strtod_l+0x17a>
 80143fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80143fe:	1c5a      	adds	r2, r3, #1
 8014400:	921d      	str	r2, [sp, #116]	; 0x74
 8014402:	785b      	ldrb	r3, [r3, #1]
 8014404:	3001      	adds	r0, #1
 8014406:	2b30      	cmp	r3, #48	; 0x30
 8014408:	d0f8      	beq.n	80143fc <_strtod_l+0x1f4>
 801440a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801440e:	2a08      	cmp	r2, #8
 8014410:	f200 84db 	bhi.w	8014dca <_strtod_l+0xbc2>
 8014414:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8014416:	9007      	str	r0, [sp, #28]
 8014418:	2000      	movs	r0, #0
 801441a:	920a      	str	r2, [sp, #40]	; 0x28
 801441c:	4605      	mov	r5, r0
 801441e:	3b30      	subs	r3, #48	; 0x30
 8014420:	f100 0201 	add.w	r2, r0, #1
 8014424:	d014      	beq.n	8014450 <_strtod_l+0x248>
 8014426:	9907      	ldr	r1, [sp, #28]
 8014428:	4411      	add	r1, r2
 801442a:	9107      	str	r1, [sp, #28]
 801442c:	462a      	mov	r2, r5
 801442e:	eb00 0e05 	add.w	lr, r0, r5
 8014432:	210a      	movs	r1, #10
 8014434:	4572      	cmp	r2, lr
 8014436:	d113      	bne.n	8014460 <_strtod_l+0x258>
 8014438:	182a      	adds	r2, r5, r0
 801443a:	2a08      	cmp	r2, #8
 801443c:	f105 0501 	add.w	r5, r5, #1
 8014440:	4405      	add	r5, r0
 8014442:	dc1c      	bgt.n	801447e <_strtod_l+0x276>
 8014444:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014446:	220a      	movs	r2, #10
 8014448:	fb02 3301 	mla	r3, r2, r1, r3
 801444c:	9309      	str	r3, [sp, #36]	; 0x24
 801444e:	2200      	movs	r2, #0
 8014450:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014452:	1c59      	adds	r1, r3, #1
 8014454:	911d      	str	r1, [sp, #116]	; 0x74
 8014456:	785b      	ldrb	r3, [r3, #1]
 8014458:	4610      	mov	r0, r2
 801445a:	e7c9      	b.n	80143f0 <_strtod_l+0x1e8>
 801445c:	4638      	mov	r0, r7
 801445e:	e7d2      	b.n	8014406 <_strtod_l+0x1fe>
 8014460:	2a08      	cmp	r2, #8
 8014462:	dc04      	bgt.n	801446e <_strtod_l+0x266>
 8014464:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8014466:	434e      	muls	r6, r1
 8014468:	9609      	str	r6, [sp, #36]	; 0x24
 801446a:	3201      	adds	r2, #1
 801446c:	e7e2      	b.n	8014434 <_strtod_l+0x22c>
 801446e:	f102 0c01 	add.w	ip, r2, #1
 8014472:	f1bc 0f10 	cmp.w	ip, #16
 8014476:	bfd8      	it	le
 8014478:	fb01 f909 	mulle.w	r9, r1, r9
 801447c:	e7f5      	b.n	801446a <_strtod_l+0x262>
 801447e:	2d10      	cmp	r5, #16
 8014480:	bfdc      	itt	le
 8014482:	220a      	movle	r2, #10
 8014484:	fb02 3909 	mlale	r9, r2, r9, r3
 8014488:	e7e1      	b.n	801444e <_strtod_l+0x246>
 801448a:	2300      	movs	r3, #0
 801448c:	9307      	str	r3, [sp, #28]
 801448e:	2201      	movs	r2, #1
 8014490:	e77c      	b.n	801438c <_strtod_l+0x184>
 8014492:	f04f 0c00 	mov.w	ip, #0
 8014496:	f108 0302 	add.w	r3, r8, #2
 801449a:	931d      	str	r3, [sp, #116]	; 0x74
 801449c:	f898 3002 	ldrb.w	r3, [r8, #2]
 80144a0:	e785      	b.n	80143ae <_strtod_l+0x1a6>
 80144a2:	f04f 0c01 	mov.w	ip, #1
 80144a6:	e7f6      	b.n	8014496 <_strtod_l+0x28e>
 80144a8:	0801a3dc 	.word	0x0801a3dc
 80144ac:	0801a250 	.word	0x0801a250
 80144b0:	7ff00000 	.word	0x7ff00000
 80144b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80144b6:	1c59      	adds	r1, r3, #1
 80144b8:	911d      	str	r1, [sp, #116]	; 0x74
 80144ba:	785b      	ldrb	r3, [r3, #1]
 80144bc:	2b30      	cmp	r3, #48	; 0x30
 80144be:	d0f9      	beq.n	80144b4 <_strtod_l+0x2ac>
 80144c0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80144c4:	2908      	cmp	r1, #8
 80144c6:	f63f af79 	bhi.w	80143bc <_strtod_l+0x1b4>
 80144ca:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80144ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80144d0:	9308      	str	r3, [sp, #32]
 80144d2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80144d4:	1c59      	adds	r1, r3, #1
 80144d6:	911d      	str	r1, [sp, #116]	; 0x74
 80144d8:	785b      	ldrb	r3, [r3, #1]
 80144da:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80144de:	2e09      	cmp	r6, #9
 80144e0:	d937      	bls.n	8014552 <_strtod_l+0x34a>
 80144e2:	9e08      	ldr	r6, [sp, #32]
 80144e4:	1b89      	subs	r1, r1, r6
 80144e6:	2908      	cmp	r1, #8
 80144e8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80144ec:	dc02      	bgt.n	80144f4 <_strtod_l+0x2ec>
 80144ee:	4576      	cmp	r6, lr
 80144f0:	bfa8      	it	ge
 80144f2:	4676      	movge	r6, lr
 80144f4:	f1bc 0f00 	cmp.w	ip, #0
 80144f8:	d000      	beq.n	80144fc <_strtod_l+0x2f4>
 80144fa:	4276      	negs	r6, r6
 80144fc:	2d00      	cmp	r5, #0
 80144fe:	d14f      	bne.n	80145a0 <_strtod_l+0x398>
 8014500:	9904      	ldr	r1, [sp, #16]
 8014502:	4301      	orrs	r1, r0
 8014504:	f47f aec2 	bne.w	801428c <_strtod_l+0x84>
 8014508:	2a00      	cmp	r2, #0
 801450a:	f47f aedb 	bne.w	80142c4 <_strtod_l+0xbc>
 801450e:	2b69      	cmp	r3, #105	; 0x69
 8014510:	d027      	beq.n	8014562 <_strtod_l+0x35a>
 8014512:	dc24      	bgt.n	801455e <_strtod_l+0x356>
 8014514:	2b49      	cmp	r3, #73	; 0x49
 8014516:	d024      	beq.n	8014562 <_strtod_l+0x35a>
 8014518:	2b4e      	cmp	r3, #78	; 0x4e
 801451a:	f47f aed3 	bne.w	80142c4 <_strtod_l+0xbc>
 801451e:	499e      	ldr	r1, [pc, #632]	; (8014798 <_strtod_l+0x590>)
 8014520:	a81d      	add	r0, sp, #116	; 0x74
 8014522:	f002 f891 	bl	8016648 <__match>
 8014526:	2800      	cmp	r0, #0
 8014528:	f43f aecc 	beq.w	80142c4 <_strtod_l+0xbc>
 801452c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801452e:	781b      	ldrb	r3, [r3, #0]
 8014530:	2b28      	cmp	r3, #40	; 0x28
 8014532:	d12d      	bne.n	8014590 <_strtod_l+0x388>
 8014534:	4999      	ldr	r1, [pc, #612]	; (801479c <_strtod_l+0x594>)
 8014536:	aa20      	add	r2, sp, #128	; 0x80
 8014538:	a81d      	add	r0, sp, #116	; 0x74
 801453a:	f002 f899 	bl	8016670 <__hexnan>
 801453e:	2805      	cmp	r0, #5
 8014540:	d126      	bne.n	8014590 <_strtod_l+0x388>
 8014542:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014544:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8014548:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801454c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8014550:	e69c      	b.n	801428c <_strtod_l+0x84>
 8014552:	210a      	movs	r1, #10
 8014554:	fb01 3e0e 	mla	lr, r1, lr, r3
 8014558:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801455c:	e7b9      	b.n	80144d2 <_strtod_l+0x2ca>
 801455e:	2b6e      	cmp	r3, #110	; 0x6e
 8014560:	e7db      	b.n	801451a <_strtod_l+0x312>
 8014562:	498f      	ldr	r1, [pc, #572]	; (80147a0 <_strtod_l+0x598>)
 8014564:	a81d      	add	r0, sp, #116	; 0x74
 8014566:	f002 f86f 	bl	8016648 <__match>
 801456a:	2800      	cmp	r0, #0
 801456c:	f43f aeaa 	beq.w	80142c4 <_strtod_l+0xbc>
 8014570:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014572:	498c      	ldr	r1, [pc, #560]	; (80147a4 <_strtod_l+0x59c>)
 8014574:	3b01      	subs	r3, #1
 8014576:	a81d      	add	r0, sp, #116	; 0x74
 8014578:	931d      	str	r3, [sp, #116]	; 0x74
 801457a:	f002 f865 	bl	8016648 <__match>
 801457e:	b910      	cbnz	r0, 8014586 <_strtod_l+0x37e>
 8014580:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014582:	3301      	adds	r3, #1
 8014584:	931d      	str	r3, [sp, #116]	; 0x74
 8014586:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80147b4 <_strtod_l+0x5ac>
 801458a:	f04f 0a00 	mov.w	sl, #0
 801458e:	e67d      	b.n	801428c <_strtod_l+0x84>
 8014590:	4885      	ldr	r0, [pc, #532]	; (80147a8 <_strtod_l+0x5a0>)
 8014592:	f7fe fa7d 	bl	8012a90 <nan>
 8014596:	ed8d 0b04 	vstr	d0, [sp, #16]
 801459a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801459e:	e675      	b.n	801428c <_strtod_l+0x84>
 80145a0:	9b07      	ldr	r3, [sp, #28]
 80145a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80145a4:	1af3      	subs	r3, r6, r3
 80145a6:	2f00      	cmp	r7, #0
 80145a8:	bf08      	it	eq
 80145aa:	462f      	moveq	r7, r5
 80145ac:	2d10      	cmp	r5, #16
 80145ae:	9308      	str	r3, [sp, #32]
 80145b0:	46a8      	mov	r8, r5
 80145b2:	bfa8      	it	ge
 80145b4:	f04f 0810 	movge.w	r8, #16
 80145b8:	f7eb ffc4 	bl	8000544 <__aeabi_ui2d>
 80145bc:	2d09      	cmp	r5, #9
 80145be:	4682      	mov	sl, r0
 80145c0:	468b      	mov	fp, r1
 80145c2:	dd13      	ble.n	80145ec <_strtod_l+0x3e4>
 80145c4:	4b79      	ldr	r3, [pc, #484]	; (80147ac <_strtod_l+0x5a4>)
 80145c6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80145ca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80145ce:	f7ec f833 	bl	8000638 <__aeabi_dmul>
 80145d2:	4682      	mov	sl, r0
 80145d4:	4648      	mov	r0, r9
 80145d6:	468b      	mov	fp, r1
 80145d8:	f7eb ffb4 	bl	8000544 <__aeabi_ui2d>
 80145dc:	4602      	mov	r2, r0
 80145de:	460b      	mov	r3, r1
 80145e0:	4650      	mov	r0, sl
 80145e2:	4659      	mov	r1, fp
 80145e4:	f7eb fe72 	bl	80002cc <__adddf3>
 80145e8:	4682      	mov	sl, r0
 80145ea:	468b      	mov	fp, r1
 80145ec:	2d0f      	cmp	r5, #15
 80145ee:	dc38      	bgt.n	8014662 <_strtod_l+0x45a>
 80145f0:	9b08      	ldr	r3, [sp, #32]
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	f43f ae4a 	beq.w	801428c <_strtod_l+0x84>
 80145f8:	dd24      	ble.n	8014644 <_strtod_l+0x43c>
 80145fa:	2b16      	cmp	r3, #22
 80145fc:	dc0b      	bgt.n	8014616 <_strtod_l+0x40e>
 80145fe:	4d6b      	ldr	r5, [pc, #428]	; (80147ac <_strtod_l+0x5a4>)
 8014600:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8014604:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014608:	4652      	mov	r2, sl
 801460a:	465b      	mov	r3, fp
 801460c:	f7ec f814 	bl	8000638 <__aeabi_dmul>
 8014610:	4682      	mov	sl, r0
 8014612:	468b      	mov	fp, r1
 8014614:	e63a      	b.n	801428c <_strtod_l+0x84>
 8014616:	9a08      	ldr	r2, [sp, #32]
 8014618:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801461c:	4293      	cmp	r3, r2
 801461e:	db20      	blt.n	8014662 <_strtod_l+0x45a>
 8014620:	4c62      	ldr	r4, [pc, #392]	; (80147ac <_strtod_l+0x5a4>)
 8014622:	f1c5 050f 	rsb	r5, r5, #15
 8014626:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801462a:	4652      	mov	r2, sl
 801462c:	465b      	mov	r3, fp
 801462e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014632:	f7ec f801 	bl	8000638 <__aeabi_dmul>
 8014636:	9b08      	ldr	r3, [sp, #32]
 8014638:	1b5d      	subs	r5, r3, r5
 801463a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801463e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014642:	e7e3      	b.n	801460c <_strtod_l+0x404>
 8014644:	9b08      	ldr	r3, [sp, #32]
 8014646:	3316      	adds	r3, #22
 8014648:	db0b      	blt.n	8014662 <_strtod_l+0x45a>
 801464a:	9b07      	ldr	r3, [sp, #28]
 801464c:	4a57      	ldr	r2, [pc, #348]	; (80147ac <_strtod_l+0x5a4>)
 801464e:	1b9e      	subs	r6, r3, r6
 8014650:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8014654:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014658:	4650      	mov	r0, sl
 801465a:	4659      	mov	r1, fp
 801465c:	f7ec f916 	bl	800088c <__aeabi_ddiv>
 8014660:	e7d6      	b.n	8014610 <_strtod_l+0x408>
 8014662:	9b08      	ldr	r3, [sp, #32]
 8014664:	eba5 0808 	sub.w	r8, r5, r8
 8014668:	4498      	add	r8, r3
 801466a:	f1b8 0f00 	cmp.w	r8, #0
 801466e:	dd71      	ble.n	8014754 <_strtod_l+0x54c>
 8014670:	f018 030f 	ands.w	r3, r8, #15
 8014674:	d00a      	beq.n	801468c <_strtod_l+0x484>
 8014676:	494d      	ldr	r1, [pc, #308]	; (80147ac <_strtod_l+0x5a4>)
 8014678:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801467c:	4652      	mov	r2, sl
 801467e:	465b      	mov	r3, fp
 8014680:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014684:	f7eb ffd8 	bl	8000638 <__aeabi_dmul>
 8014688:	4682      	mov	sl, r0
 801468a:	468b      	mov	fp, r1
 801468c:	f038 080f 	bics.w	r8, r8, #15
 8014690:	d04d      	beq.n	801472e <_strtod_l+0x526>
 8014692:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8014696:	dd22      	ble.n	80146de <_strtod_l+0x4d6>
 8014698:	2500      	movs	r5, #0
 801469a:	462e      	mov	r6, r5
 801469c:	9509      	str	r5, [sp, #36]	; 0x24
 801469e:	9507      	str	r5, [sp, #28]
 80146a0:	2322      	movs	r3, #34	; 0x22
 80146a2:	f8df b110 	ldr.w	fp, [pc, #272]	; 80147b4 <_strtod_l+0x5ac>
 80146a6:	6023      	str	r3, [r4, #0]
 80146a8:	f04f 0a00 	mov.w	sl, #0
 80146ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	f43f adec 	beq.w	801428c <_strtod_l+0x84>
 80146b4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80146b6:	4620      	mov	r0, r4
 80146b8:	f002 f94e 	bl	8016958 <_Bfree>
 80146bc:	9907      	ldr	r1, [sp, #28]
 80146be:	4620      	mov	r0, r4
 80146c0:	f002 f94a 	bl	8016958 <_Bfree>
 80146c4:	4631      	mov	r1, r6
 80146c6:	4620      	mov	r0, r4
 80146c8:	f002 f946 	bl	8016958 <_Bfree>
 80146cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80146ce:	4620      	mov	r0, r4
 80146d0:	f002 f942 	bl	8016958 <_Bfree>
 80146d4:	4629      	mov	r1, r5
 80146d6:	4620      	mov	r0, r4
 80146d8:	f002 f93e 	bl	8016958 <_Bfree>
 80146dc:	e5d6      	b.n	801428c <_strtod_l+0x84>
 80146de:	2300      	movs	r3, #0
 80146e0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80146e4:	4650      	mov	r0, sl
 80146e6:	4659      	mov	r1, fp
 80146e8:	4699      	mov	r9, r3
 80146ea:	f1b8 0f01 	cmp.w	r8, #1
 80146ee:	dc21      	bgt.n	8014734 <_strtod_l+0x52c>
 80146f0:	b10b      	cbz	r3, 80146f6 <_strtod_l+0x4ee>
 80146f2:	4682      	mov	sl, r0
 80146f4:	468b      	mov	fp, r1
 80146f6:	4b2e      	ldr	r3, [pc, #184]	; (80147b0 <_strtod_l+0x5a8>)
 80146f8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80146fc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8014700:	4652      	mov	r2, sl
 8014702:	465b      	mov	r3, fp
 8014704:	e9d9 0100 	ldrd	r0, r1, [r9]
 8014708:	f7eb ff96 	bl	8000638 <__aeabi_dmul>
 801470c:	4b29      	ldr	r3, [pc, #164]	; (80147b4 <_strtod_l+0x5ac>)
 801470e:	460a      	mov	r2, r1
 8014710:	400b      	ands	r3, r1
 8014712:	4929      	ldr	r1, [pc, #164]	; (80147b8 <_strtod_l+0x5b0>)
 8014714:	428b      	cmp	r3, r1
 8014716:	4682      	mov	sl, r0
 8014718:	d8be      	bhi.n	8014698 <_strtod_l+0x490>
 801471a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801471e:	428b      	cmp	r3, r1
 8014720:	bf86      	itte	hi
 8014722:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80147bc <_strtod_l+0x5b4>
 8014726:	f04f 3aff 	movhi.w	sl, #4294967295
 801472a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801472e:	2300      	movs	r3, #0
 8014730:	9304      	str	r3, [sp, #16]
 8014732:	e081      	b.n	8014838 <_strtod_l+0x630>
 8014734:	f018 0f01 	tst.w	r8, #1
 8014738:	d007      	beq.n	801474a <_strtod_l+0x542>
 801473a:	4b1d      	ldr	r3, [pc, #116]	; (80147b0 <_strtod_l+0x5a8>)
 801473c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8014740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014744:	f7eb ff78 	bl	8000638 <__aeabi_dmul>
 8014748:	2301      	movs	r3, #1
 801474a:	f109 0901 	add.w	r9, r9, #1
 801474e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8014752:	e7ca      	b.n	80146ea <_strtod_l+0x4e2>
 8014754:	d0eb      	beq.n	801472e <_strtod_l+0x526>
 8014756:	f1c8 0800 	rsb	r8, r8, #0
 801475a:	f018 020f 	ands.w	r2, r8, #15
 801475e:	d00a      	beq.n	8014776 <_strtod_l+0x56e>
 8014760:	4b12      	ldr	r3, [pc, #72]	; (80147ac <_strtod_l+0x5a4>)
 8014762:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014766:	4650      	mov	r0, sl
 8014768:	4659      	mov	r1, fp
 801476a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801476e:	f7ec f88d 	bl	800088c <__aeabi_ddiv>
 8014772:	4682      	mov	sl, r0
 8014774:	468b      	mov	fp, r1
 8014776:	ea5f 1828 	movs.w	r8, r8, asr #4
 801477a:	d0d8      	beq.n	801472e <_strtod_l+0x526>
 801477c:	f1b8 0f1f 	cmp.w	r8, #31
 8014780:	dd1e      	ble.n	80147c0 <_strtod_l+0x5b8>
 8014782:	2500      	movs	r5, #0
 8014784:	462e      	mov	r6, r5
 8014786:	9509      	str	r5, [sp, #36]	; 0x24
 8014788:	9507      	str	r5, [sp, #28]
 801478a:	2322      	movs	r3, #34	; 0x22
 801478c:	f04f 0a00 	mov.w	sl, #0
 8014790:	f04f 0b00 	mov.w	fp, #0
 8014794:	6023      	str	r3, [r4, #0]
 8014796:	e789      	b.n	80146ac <_strtod_l+0x4a4>
 8014798:	0801a225 	.word	0x0801a225
 801479c:	0801a264 	.word	0x0801a264
 80147a0:	0801a21d 	.word	0x0801a21d
 80147a4:	0801a2df 	.word	0x0801a2df
 80147a8:	0801a2db 	.word	0x0801a2db
 80147ac:	0801a478 	.word	0x0801a478
 80147b0:	0801a450 	.word	0x0801a450
 80147b4:	7ff00000 	.word	0x7ff00000
 80147b8:	7ca00000 	.word	0x7ca00000
 80147bc:	7fefffff 	.word	0x7fefffff
 80147c0:	f018 0310 	ands.w	r3, r8, #16
 80147c4:	bf18      	it	ne
 80147c6:	236a      	movne	r3, #106	; 0x6a
 80147c8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8014b80 <_strtod_l+0x978>
 80147cc:	9304      	str	r3, [sp, #16]
 80147ce:	4650      	mov	r0, sl
 80147d0:	4659      	mov	r1, fp
 80147d2:	2300      	movs	r3, #0
 80147d4:	f018 0f01 	tst.w	r8, #1
 80147d8:	d004      	beq.n	80147e4 <_strtod_l+0x5dc>
 80147da:	e9d9 2300 	ldrd	r2, r3, [r9]
 80147de:	f7eb ff2b 	bl	8000638 <__aeabi_dmul>
 80147e2:	2301      	movs	r3, #1
 80147e4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80147e8:	f109 0908 	add.w	r9, r9, #8
 80147ec:	d1f2      	bne.n	80147d4 <_strtod_l+0x5cc>
 80147ee:	b10b      	cbz	r3, 80147f4 <_strtod_l+0x5ec>
 80147f0:	4682      	mov	sl, r0
 80147f2:	468b      	mov	fp, r1
 80147f4:	9b04      	ldr	r3, [sp, #16]
 80147f6:	b1bb      	cbz	r3, 8014828 <_strtod_l+0x620>
 80147f8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80147fc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014800:	2b00      	cmp	r3, #0
 8014802:	4659      	mov	r1, fp
 8014804:	dd10      	ble.n	8014828 <_strtod_l+0x620>
 8014806:	2b1f      	cmp	r3, #31
 8014808:	f340 8128 	ble.w	8014a5c <_strtod_l+0x854>
 801480c:	2b34      	cmp	r3, #52	; 0x34
 801480e:	bfde      	ittt	le
 8014810:	3b20      	suble	r3, #32
 8014812:	f04f 32ff 	movle.w	r2, #4294967295
 8014816:	fa02 f303 	lslle.w	r3, r2, r3
 801481a:	f04f 0a00 	mov.w	sl, #0
 801481e:	bfcc      	ite	gt
 8014820:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8014824:	ea03 0b01 	andle.w	fp, r3, r1
 8014828:	2200      	movs	r2, #0
 801482a:	2300      	movs	r3, #0
 801482c:	4650      	mov	r0, sl
 801482e:	4659      	mov	r1, fp
 8014830:	f7ec f96a 	bl	8000b08 <__aeabi_dcmpeq>
 8014834:	2800      	cmp	r0, #0
 8014836:	d1a4      	bne.n	8014782 <_strtod_l+0x57a>
 8014838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801483a:	9300      	str	r3, [sp, #0]
 801483c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801483e:	462b      	mov	r3, r5
 8014840:	463a      	mov	r2, r7
 8014842:	4620      	mov	r0, r4
 8014844:	f002 f8f4 	bl	8016a30 <__s2b>
 8014848:	9009      	str	r0, [sp, #36]	; 0x24
 801484a:	2800      	cmp	r0, #0
 801484c:	f43f af24 	beq.w	8014698 <_strtod_l+0x490>
 8014850:	9b07      	ldr	r3, [sp, #28]
 8014852:	1b9e      	subs	r6, r3, r6
 8014854:	9b08      	ldr	r3, [sp, #32]
 8014856:	2b00      	cmp	r3, #0
 8014858:	bfb4      	ite	lt
 801485a:	4633      	movlt	r3, r6
 801485c:	2300      	movge	r3, #0
 801485e:	9310      	str	r3, [sp, #64]	; 0x40
 8014860:	9b08      	ldr	r3, [sp, #32]
 8014862:	2500      	movs	r5, #0
 8014864:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014868:	9318      	str	r3, [sp, #96]	; 0x60
 801486a:	462e      	mov	r6, r5
 801486c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801486e:	4620      	mov	r0, r4
 8014870:	6859      	ldr	r1, [r3, #4]
 8014872:	f002 f831 	bl	80168d8 <_Balloc>
 8014876:	9007      	str	r0, [sp, #28]
 8014878:	2800      	cmp	r0, #0
 801487a:	f43f af11 	beq.w	80146a0 <_strtod_l+0x498>
 801487e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014880:	691a      	ldr	r2, [r3, #16]
 8014882:	3202      	adds	r2, #2
 8014884:	f103 010c 	add.w	r1, r3, #12
 8014888:	0092      	lsls	r2, r2, #2
 801488a:	300c      	adds	r0, #12
 801488c:	f7fe fb56 	bl	8012f3c <memcpy>
 8014890:	ec4b ab10 	vmov	d0, sl, fp
 8014894:	aa20      	add	r2, sp, #128	; 0x80
 8014896:	a91f      	add	r1, sp, #124	; 0x7c
 8014898:	4620      	mov	r0, r4
 801489a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801489e:	f002 fc03 	bl	80170a8 <__d2b>
 80148a2:	901e      	str	r0, [sp, #120]	; 0x78
 80148a4:	2800      	cmp	r0, #0
 80148a6:	f43f aefb 	beq.w	80146a0 <_strtod_l+0x498>
 80148aa:	2101      	movs	r1, #1
 80148ac:	4620      	mov	r0, r4
 80148ae:	f002 f959 	bl	8016b64 <__i2b>
 80148b2:	4606      	mov	r6, r0
 80148b4:	2800      	cmp	r0, #0
 80148b6:	f43f aef3 	beq.w	80146a0 <_strtod_l+0x498>
 80148ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80148bc:	9904      	ldr	r1, [sp, #16]
 80148be:	2b00      	cmp	r3, #0
 80148c0:	bfab      	itete	ge
 80148c2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80148c4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80148c6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80148c8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80148cc:	bfac      	ite	ge
 80148ce:	eb03 0902 	addge.w	r9, r3, r2
 80148d2:	1ad7      	sublt	r7, r2, r3
 80148d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80148d6:	eba3 0801 	sub.w	r8, r3, r1
 80148da:	4490      	add	r8, r2
 80148dc:	4ba3      	ldr	r3, [pc, #652]	; (8014b6c <_strtod_l+0x964>)
 80148de:	f108 38ff 	add.w	r8, r8, #4294967295
 80148e2:	4598      	cmp	r8, r3
 80148e4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80148e8:	f280 80cc 	bge.w	8014a84 <_strtod_l+0x87c>
 80148ec:	eba3 0308 	sub.w	r3, r3, r8
 80148f0:	2b1f      	cmp	r3, #31
 80148f2:	eba2 0203 	sub.w	r2, r2, r3
 80148f6:	f04f 0101 	mov.w	r1, #1
 80148fa:	f300 80b6 	bgt.w	8014a6a <_strtod_l+0x862>
 80148fe:	fa01 f303 	lsl.w	r3, r1, r3
 8014902:	9311      	str	r3, [sp, #68]	; 0x44
 8014904:	2300      	movs	r3, #0
 8014906:	930c      	str	r3, [sp, #48]	; 0x30
 8014908:	eb09 0802 	add.w	r8, r9, r2
 801490c:	9b04      	ldr	r3, [sp, #16]
 801490e:	45c1      	cmp	r9, r8
 8014910:	4417      	add	r7, r2
 8014912:	441f      	add	r7, r3
 8014914:	464b      	mov	r3, r9
 8014916:	bfa8      	it	ge
 8014918:	4643      	movge	r3, r8
 801491a:	42bb      	cmp	r3, r7
 801491c:	bfa8      	it	ge
 801491e:	463b      	movge	r3, r7
 8014920:	2b00      	cmp	r3, #0
 8014922:	bfc2      	ittt	gt
 8014924:	eba8 0803 	subgt.w	r8, r8, r3
 8014928:	1aff      	subgt	r7, r7, r3
 801492a:	eba9 0903 	subgt.w	r9, r9, r3
 801492e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014930:	2b00      	cmp	r3, #0
 8014932:	dd17      	ble.n	8014964 <_strtod_l+0x75c>
 8014934:	4631      	mov	r1, r6
 8014936:	461a      	mov	r2, r3
 8014938:	4620      	mov	r0, r4
 801493a:	f002 f9cf 	bl	8016cdc <__pow5mult>
 801493e:	4606      	mov	r6, r0
 8014940:	2800      	cmp	r0, #0
 8014942:	f43f aead 	beq.w	80146a0 <_strtod_l+0x498>
 8014946:	4601      	mov	r1, r0
 8014948:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801494a:	4620      	mov	r0, r4
 801494c:	f002 f920 	bl	8016b90 <__multiply>
 8014950:	900f      	str	r0, [sp, #60]	; 0x3c
 8014952:	2800      	cmp	r0, #0
 8014954:	f43f aea4 	beq.w	80146a0 <_strtod_l+0x498>
 8014958:	991e      	ldr	r1, [sp, #120]	; 0x78
 801495a:	4620      	mov	r0, r4
 801495c:	f001 fffc 	bl	8016958 <_Bfree>
 8014960:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014962:	931e      	str	r3, [sp, #120]	; 0x78
 8014964:	f1b8 0f00 	cmp.w	r8, #0
 8014968:	f300 8091 	bgt.w	8014a8e <_strtod_l+0x886>
 801496c:	9b08      	ldr	r3, [sp, #32]
 801496e:	2b00      	cmp	r3, #0
 8014970:	dd08      	ble.n	8014984 <_strtod_l+0x77c>
 8014972:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014974:	9907      	ldr	r1, [sp, #28]
 8014976:	4620      	mov	r0, r4
 8014978:	f002 f9b0 	bl	8016cdc <__pow5mult>
 801497c:	9007      	str	r0, [sp, #28]
 801497e:	2800      	cmp	r0, #0
 8014980:	f43f ae8e 	beq.w	80146a0 <_strtod_l+0x498>
 8014984:	2f00      	cmp	r7, #0
 8014986:	dd08      	ble.n	801499a <_strtod_l+0x792>
 8014988:	9907      	ldr	r1, [sp, #28]
 801498a:	463a      	mov	r2, r7
 801498c:	4620      	mov	r0, r4
 801498e:	f002 f9ff 	bl	8016d90 <__lshift>
 8014992:	9007      	str	r0, [sp, #28]
 8014994:	2800      	cmp	r0, #0
 8014996:	f43f ae83 	beq.w	80146a0 <_strtod_l+0x498>
 801499a:	f1b9 0f00 	cmp.w	r9, #0
 801499e:	dd08      	ble.n	80149b2 <_strtod_l+0x7aa>
 80149a0:	4631      	mov	r1, r6
 80149a2:	464a      	mov	r2, r9
 80149a4:	4620      	mov	r0, r4
 80149a6:	f002 f9f3 	bl	8016d90 <__lshift>
 80149aa:	4606      	mov	r6, r0
 80149ac:	2800      	cmp	r0, #0
 80149ae:	f43f ae77 	beq.w	80146a0 <_strtod_l+0x498>
 80149b2:	9a07      	ldr	r2, [sp, #28]
 80149b4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80149b6:	4620      	mov	r0, r4
 80149b8:	f002 fa72 	bl	8016ea0 <__mdiff>
 80149bc:	4605      	mov	r5, r0
 80149be:	2800      	cmp	r0, #0
 80149c0:	f43f ae6e 	beq.w	80146a0 <_strtod_l+0x498>
 80149c4:	68c3      	ldr	r3, [r0, #12]
 80149c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80149c8:	2300      	movs	r3, #0
 80149ca:	60c3      	str	r3, [r0, #12]
 80149cc:	4631      	mov	r1, r6
 80149ce:	f002 fa4b 	bl	8016e68 <__mcmp>
 80149d2:	2800      	cmp	r0, #0
 80149d4:	da65      	bge.n	8014aa2 <_strtod_l+0x89a>
 80149d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80149d8:	ea53 030a 	orrs.w	r3, r3, sl
 80149dc:	f040 8087 	bne.w	8014aee <_strtod_l+0x8e6>
 80149e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	f040 8082 	bne.w	8014aee <_strtod_l+0x8e6>
 80149ea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80149ee:	0d1b      	lsrs	r3, r3, #20
 80149f0:	051b      	lsls	r3, r3, #20
 80149f2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80149f6:	d97a      	bls.n	8014aee <_strtod_l+0x8e6>
 80149f8:	696b      	ldr	r3, [r5, #20]
 80149fa:	b913      	cbnz	r3, 8014a02 <_strtod_l+0x7fa>
 80149fc:	692b      	ldr	r3, [r5, #16]
 80149fe:	2b01      	cmp	r3, #1
 8014a00:	dd75      	ble.n	8014aee <_strtod_l+0x8e6>
 8014a02:	4629      	mov	r1, r5
 8014a04:	2201      	movs	r2, #1
 8014a06:	4620      	mov	r0, r4
 8014a08:	f002 f9c2 	bl	8016d90 <__lshift>
 8014a0c:	4631      	mov	r1, r6
 8014a0e:	4605      	mov	r5, r0
 8014a10:	f002 fa2a 	bl	8016e68 <__mcmp>
 8014a14:	2800      	cmp	r0, #0
 8014a16:	dd6a      	ble.n	8014aee <_strtod_l+0x8e6>
 8014a18:	9904      	ldr	r1, [sp, #16]
 8014a1a:	4a55      	ldr	r2, [pc, #340]	; (8014b70 <_strtod_l+0x968>)
 8014a1c:	465b      	mov	r3, fp
 8014a1e:	2900      	cmp	r1, #0
 8014a20:	f000 8085 	beq.w	8014b2e <_strtod_l+0x926>
 8014a24:	ea02 010b 	and.w	r1, r2, fp
 8014a28:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8014a2c:	dc7f      	bgt.n	8014b2e <_strtod_l+0x926>
 8014a2e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8014a32:	f77f aeaa 	ble.w	801478a <_strtod_l+0x582>
 8014a36:	4a4f      	ldr	r2, [pc, #316]	; (8014b74 <_strtod_l+0x96c>)
 8014a38:	2300      	movs	r3, #0
 8014a3a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8014a3e:	4650      	mov	r0, sl
 8014a40:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8014a44:	4659      	mov	r1, fp
 8014a46:	f7eb fdf7 	bl	8000638 <__aeabi_dmul>
 8014a4a:	460b      	mov	r3, r1
 8014a4c:	4303      	orrs	r3, r0
 8014a4e:	bf08      	it	eq
 8014a50:	2322      	moveq	r3, #34	; 0x22
 8014a52:	4682      	mov	sl, r0
 8014a54:	468b      	mov	fp, r1
 8014a56:	bf08      	it	eq
 8014a58:	6023      	streq	r3, [r4, #0]
 8014a5a:	e62b      	b.n	80146b4 <_strtod_l+0x4ac>
 8014a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8014a60:	fa02 f303 	lsl.w	r3, r2, r3
 8014a64:	ea03 0a0a 	and.w	sl, r3, sl
 8014a68:	e6de      	b.n	8014828 <_strtod_l+0x620>
 8014a6a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8014a6e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8014a72:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8014a76:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8014a7a:	fa01 f308 	lsl.w	r3, r1, r8
 8014a7e:	930c      	str	r3, [sp, #48]	; 0x30
 8014a80:	9111      	str	r1, [sp, #68]	; 0x44
 8014a82:	e741      	b.n	8014908 <_strtod_l+0x700>
 8014a84:	2300      	movs	r3, #0
 8014a86:	930c      	str	r3, [sp, #48]	; 0x30
 8014a88:	2301      	movs	r3, #1
 8014a8a:	9311      	str	r3, [sp, #68]	; 0x44
 8014a8c:	e73c      	b.n	8014908 <_strtod_l+0x700>
 8014a8e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8014a90:	4642      	mov	r2, r8
 8014a92:	4620      	mov	r0, r4
 8014a94:	f002 f97c 	bl	8016d90 <__lshift>
 8014a98:	901e      	str	r0, [sp, #120]	; 0x78
 8014a9a:	2800      	cmp	r0, #0
 8014a9c:	f47f af66 	bne.w	801496c <_strtod_l+0x764>
 8014aa0:	e5fe      	b.n	80146a0 <_strtod_l+0x498>
 8014aa2:	465f      	mov	r7, fp
 8014aa4:	d16e      	bne.n	8014b84 <_strtod_l+0x97c>
 8014aa6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014aa8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014aac:	b342      	cbz	r2, 8014b00 <_strtod_l+0x8f8>
 8014aae:	4a32      	ldr	r2, [pc, #200]	; (8014b78 <_strtod_l+0x970>)
 8014ab0:	4293      	cmp	r3, r2
 8014ab2:	d128      	bne.n	8014b06 <_strtod_l+0x8fe>
 8014ab4:	9b04      	ldr	r3, [sp, #16]
 8014ab6:	4650      	mov	r0, sl
 8014ab8:	b1eb      	cbz	r3, 8014af6 <_strtod_l+0x8ee>
 8014aba:	4a2d      	ldr	r2, [pc, #180]	; (8014b70 <_strtod_l+0x968>)
 8014abc:	403a      	ands	r2, r7
 8014abe:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8014ac2:	f04f 31ff 	mov.w	r1, #4294967295
 8014ac6:	d819      	bhi.n	8014afc <_strtod_l+0x8f4>
 8014ac8:	0d12      	lsrs	r2, r2, #20
 8014aca:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8014ace:	fa01 f303 	lsl.w	r3, r1, r3
 8014ad2:	4298      	cmp	r0, r3
 8014ad4:	d117      	bne.n	8014b06 <_strtod_l+0x8fe>
 8014ad6:	4b29      	ldr	r3, [pc, #164]	; (8014b7c <_strtod_l+0x974>)
 8014ad8:	429f      	cmp	r7, r3
 8014ada:	d102      	bne.n	8014ae2 <_strtod_l+0x8da>
 8014adc:	3001      	adds	r0, #1
 8014ade:	f43f addf 	beq.w	80146a0 <_strtod_l+0x498>
 8014ae2:	4b23      	ldr	r3, [pc, #140]	; (8014b70 <_strtod_l+0x968>)
 8014ae4:	403b      	ands	r3, r7
 8014ae6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8014aea:	f04f 0a00 	mov.w	sl, #0
 8014aee:	9b04      	ldr	r3, [sp, #16]
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	d1a0      	bne.n	8014a36 <_strtod_l+0x82e>
 8014af4:	e5de      	b.n	80146b4 <_strtod_l+0x4ac>
 8014af6:	f04f 33ff 	mov.w	r3, #4294967295
 8014afa:	e7ea      	b.n	8014ad2 <_strtod_l+0x8ca>
 8014afc:	460b      	mov	r3, r1
 8014afe:	e7e8      	b.n	8014ad2 <_strtod_l+0x8ca>
 8014b00:	ea53 030a 	orrs.w	r3, r3, sl
 8014b04:	d088      	beq.n	8014a18 <_strtod_l+0x810>
 8014b06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014b08:	b1db      	cbz	r3, 8014b42 <_strtod_l+0x93a>
 8014b0a:	423b      	tst	r3, r7
 8014b0c:	d0ef      	beq.n	8014aee <_strtod_l+0x8e6>
 8014b0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014b10:	9a04      	ldr	r2, [sp, #16]
 8014b12:	4650      	mov	r0, sl
 8014b14:	4659      	mov	r1, fp
 8014b16:	b1c3      	cbz	r3, 8014b4a <_strtod_l+0x942>
 8014b18:	f7ff fb59 	bl	80141ce <sulp>
 8014b1c:	4602      	mov	r2, r0
 8014b1e:	460b      	mov	r3, r1
 8014b20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014b24:	f7eb fbd2 	bl	80002cc <__adddf3>
 8014b28:	4682      	mov	sl, r0
 8014b2a:	468b      	mov	fp, r1
 8014b2c:	e7df      	b.n	8014aee <_strtod_l+0x8e6>
 8014b2e:	4013      	ands	r3, r2
 8014b30:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8014b34:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8014b38:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8014b3c:	f04f 3aff 	mov.w	sl, #4294967295
 8014b40:	e7d5      	b.n	8014aee <_strtod_l+0x8e6>
 8014b42:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014b44:	ea13 0f0a 	tst.w	r3, sl
 8014b48:	e7e0      	b.n	8014b0c <_strtod_l+0x904>
 8014b4a:	f7ff fb40 	bl	80141ce <sulp>
 8014b4e:	4602      	mov	r2, r0
 8014b50:	460b      	mov	r3, r1
 8014b52:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014b56:	f7eb fbb7 	bl	80002c8 <__aeabi_dsub>
 8014b5a:	2200      	movs	r2, #0
 8014b5c:	2300      	movs	r3, #0
 8014b5e:	4682      	mov	sl, r0
 8014b60:	468b      	mov	fp, r1
 8014b62:	f7eb ffd1 	bl	8000b08 <__aeabi_dcmpeq>
 8014b66:	2800      	cmp	r0, #0
 8014b68:	d0c1      	beq.n	8014aee <_strtod_l+0x8e6>
 8014b6a:	e60e      	b.n	801478a <_strtod_l+0x582>
 8014b6c:	fffffc02 	.word	0xfffffc02
 8014b70:	7ff00000 	.word	0x7ff00000
 8014b74:	39500000 	.word	0x39500000
 8014b78:	000fffff 	.word	0x000fffff
 8014b7c:	7fefffff 	.word	0x7fefffff
 8014b80:	0801a278 	.word	0x0801a278
 8014b84:	4631      	mov	r1, r6
 8014b86:	4628      	mov	r0, r5
 8014b88:	f002 faea 	bl	8017160 <__ratio>
 8014b8c:	ec59 8b10 	vmov	r8, r9, d0
 8014b90:	ee10 0a10 	vmov	r0, s0
 8014b94:	2200      	movs	r2, #0
 8014b96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014b9a:	4649      	mov	r1, r9
 8014b9c:	f7eb ffc8 	bl	8000b30 <__aeabi_dcmple>
 8014ba0:	2800      	cmp	r0, #0
 8014ba2:	d07c      	beq.n	8014c9e <_strtod_l+0xa96>
 8014ba4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d04c      	beq.n	8014c44 <_strtod_l+0xa3c>
 8014baa:	4b95      	ldr	r3, [pc, #596]	; (8014e00 <_strtod_l+0xbf8>)
 8014bac:	2200      	movs	r2, #0
 8014bae:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8014bb2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8014e00 <_strtod_l+0xbf8>
 8014bb6:	f04f 0800 	mov.w	r8, #0
 8014bba:	4b92      	ldr	r3, [pc, #584]	; (8014e04 <_strtod_l+0xbfc>)
 8014bbc:	403b      	ands	r3, r7
 8014bbe:	9311      	str	r3, [sp, #68]	; 0x44
 8014bc0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014bc2:	4b91      	ldr	r3, [pc, #580]	; (8014e08 <_strtod_l+0xc00>)
 8014bc4:	429a      	cmp	r2, r3
 8014bc6:	f040 80b2 	bne.w	8014d2e <_strtod_l+0xb26>
 8014bca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014bce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014bd2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8014bd6:	ec4b ab10 	vmov	d0, sl, fp
 8014bda:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8014bde:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014be2:	f002 f9e5 	bl	8016fb0 <__ulp>
 8014be6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014bea:	ec53 2b10 	vmov	r2, r3, d0
 8014bee:	f7eb fd23 	bl	8000638 <__aeabi_dmul>
 8014bf2:	4652      	mov	r2, sl
 8014bf4:	465b      	mov	r3, fp
 8014bf6:	f7eb fb69 	bl	80002cc <__adddf3>
 8014bfa:	460b      	mov	r3, r1
 8014bfc:	4981      	ldr	r1, [pc, #516]	; (8014e04 <_strtod_l+0xbfc>)
 8014bfe:	4a83      	ldr	r2, [pc, #524]	; (8014e0c <_strtod_l+0xc04>)
 8014c00:	4019      	ands	r1, r3
 8014c02:	4291      	cmp	r1, r2
 8014c04:	4682      	mov	sl, r0
 8014c06:	d95e      	bls.n	8014cc6 <_strtod_l+0xabe>
 8014c08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014c0a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8014c0e:	4293      	cmp	r3, r2
 8014c10:	d103      	bne.n	8014c1a <_strtod_l+0xa12>
 8014c12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c14:	3301      	adds	r3, #1
 8014c16:	f43f ad43 	beq.w	80146a0 <_strtod_l+0x498>
 8014c1a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8014e18 <_strtod_l+0xc10>
 8014c1e:	f04f 3aff 	mov.w	sl, #4294967295
 8014c22:	991e      	ldr	r1, [sp, #120]	; 0x78
 8014c24:	4620      	mov	r0, r4
 8014c26:	f001 fe97 	bl	8016958 <_Bfree>
 8014c2a:	9907      	ldr	r1, [sp, #28]
 8014c2c:	4620      	mov	r0, r4
 8014c2e:	f001 fe93 	bl	8016958 <_Bfree>
 8014c32:	4631      	mov	r1, r6
 8014c34:	4620      	mov	r0, r4
 8014c36:	f001 fe8f 	bl	8016958 <_Bfree>
 8014c3a:	4629      	mov	r1, r5
 8014c3c:	4620      	mov	r0, r4
 8014c3e:	f001 fe8b 	bl	8016958 <_Bfree>
 8014c42:	e613      	b.n	801486c <_strtod_l+0x664>
 8014c44:	f1ba 0f00 	cmp.w	sl, #0
 8014c48:	d11b      	bne.n	8014c82 <_strtod_l+0xa7a>
 8014c4a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014c4e:	b9f3      	cbnz	r3, 8014c8e <_strtod_l+0xa86>
 8014c50:	4b6b      	ldr	r3, [pc, #428]	; (8014e00 <_strtod_l+0xbf8>)
 8014c52:	2200      	movs	r2, #0
 8014c54:	4640      	mov	r0, r8
 8014c56:	4649      	mov	r1, r9
 8014c58:	f7eb ff60 	bl	8000b1c <__aeabi_dcmplt>
 8014c5c:	b9d0      	cbnz	r0, 8014c94 <_strtod_l+0xa8c>
 8014c5e:	4640      	mov	r0, r8
 8014c60:	4649      	mov	r1, r9
 8014c62:	4b6b      	ldr	r3, [pc, #428]	; (8014e10 <_strtod_l+0xc08>)
 8014c64:	2200      	movs	r2, #0
 8014c66:	f7eb fce7 	bl	8000638 <__aeabi_dmul>
 8014c6a:	4680      	mov	r8, r0
 8014c6c:	4689      	mov	r9, r1
 8014c6e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014c72:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8014c76:	931b      	str	r3, [sp, #108]	; 0x6c
 8014c78:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8014c7c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8014c80:	e79b      	b.n	8014bba <_strtod_l+0x9b2>
 8014c82:	f1ba 0f01 	cmp.w	sl, #1
 8014c86:	d102      	bne.n	8014c8e <_strtod_l+0xa86>
 8014c88:	2f00      	cmp	r7, #0
 8014c8a:	f43f ad7e 	beq.w	801478a <_strtod_l+0x582>
 8014c8e:	4b61      	ldr	r3, [pc, #388]	; (8014e14 <_strtod_l+0xc0c>)
 8014c90:	2200      	movs	r2, #0
 8014c92:	e78c      	b.n	8014bae <_strtod_l+0x9a6>
 8014c94:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8014e10 <_strtod_l+0xc08>
 8014c98:	f04f 0800 	mov.w	r8, #0
 8014c9c:	e7e7      	b.n	8014c6e <_strtod_l+0xa66>
 8014c9e:	4b5c      	ldr	r3, [pc, #368]	; (8014e10 <_strtod_l+0xc08>)
 8014ca0:	4640      	mov	r0, r8
 8014ca2:	4649      	mov	r1, r9
 8014ca4:	2200      	movs	r2, #0
 8014ca6:	f7eb fcc7 	bl	8000638 <__aeabi_dmul>
 8014caa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014cac:	4680      	mov	r8, r0
 8014cae:	4689      	mov	r9, r1
 8014cb0:	b933      	cbnz	r3, 8014cc0 <_strtod_l+0xab8>
 8014cb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014cb6:	9012      	str	r0, [sp, #72]	; 0x48
 8014cb8:	9313      	str	r3, [sp, #76]	; 0x4c
 8014cba:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8014cbe:	e7dd      	b.n	8014c7c <_strtod_l+0xa74>
 8014cc0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8014cc4:	e7f9      	b.n	8014cba <_strtod_l+0xab2>
 8014cc6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8014cca:	9b04      	ldr	r3, [sp, #16]
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d1a8      	bne.n	8014c22 <_strtod_l+0xa1a>
 8014cd0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014cd4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014cd6:	0d1b      	lsrs	r3, r3, #20
 8014cd8:	051b      	lsls	r3, r3, #20
 8014cda:	429a      	cmp	r2, r3
 8014cdc:	d1a1      	bne.n	8014c22 <_strtod_l+0xa1a>
 8014cde:	4640      	mov	r0, r8
 8014ce0:	4649      	mov	r1, r9
 8014ce2:	f7ec f809 	bl	8000cf8 <__aeabi_d2lz>
 8014ce6:	f7eb fc79 	bl	80005dc <__aeabi_l2d>
 8014cea:	4602      	mov	r2, r0
 8014cec:	460b      	mov	r3, r1
 8014cee:	4640      	mov	r0, r8
 8014cf0:	4649      	mov	r1, r9
 8014cf2:	f7eb fae9 	bl	80002c8 <__aeabi_dsub>
 8014cf6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014cf8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014cfc:	ea43 030a 	orr.w	r3, r3, sl
 8014d00:	4313      	orrs	r3, r2
 8014d02:	4680      	mov	r8, r0
 8014d04:	4689      	mov	r9, r1
 8014d06:	d053      	beq.n	8014db0 <_strtod_l+0xba8>
 8014d08:	a335      	add	r3, pc, #212	; (adr r3, 8014de0 <_strtod_l+0xbd8>)
 8014d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d0e:	f7eb ff05 	bl	8000b1c <__aeabi_dcmplt>
 8014d12:	2800      	cmp	r0, #0
 8014d14:	f47f acce 	bne.w	80146b4 <_strtod_l+0x4ac>
 8014d18:	a333      	add	r3, pc, #204	; (adr r3, 8014de8 <_strtod_l+0xbe0>)
 8014d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d1e:	4640      	mov	r0, r8
 8014d20:	4649      	mov	r1, r9
 8014d22:	f7eb ff19 	bl	8000b58 <__aeabi_dcmpgt>
 8014d26:	2800      	cmp	r0, #0
 8014d28:	f43f af7b 	beq.w	8014c22 <_strtod_l+0xa1a>
 8014d2c:	e4c2      	b.n	80146b4 <_strtod_l+0x4ac>
 8014d2e:	9b04      	ldr	r3, [sp, #16]
 8014d30:	b333      	cbz	r3, 8014d80 <_strtod_l+0xb78>
 8014d32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014d34:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014d38:	d822      	bhi.n	8014d80 <_strtod_l+0xb78>
 8014d3a:	a32d      	add	r3, pc, #180	; (adr r3, 8014df0 <_strtod_l+0xbe8>)
 8014d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d40:	4640      	mov	r0, r8
 8014d42:	4649      	mov	r1, r9
 8014d44:	f7eb fef4 	bl	8000b30 <__aeabi_dcmple>
 8014d48:	b1a0      	cbz	r0, 8014d74 <_strtod_l+0xb6c>
 8014d4a:	4649      	mov	r1, r9
 8014d4c:	4640      	mov	r0, r8
 8014d4e:	f7eb ff4b 	bl	8000be8 <__aeabi_d2uiz>
 8014d52:	2801      	cmp	r0, #1
 8014d54:	bf38      	it	cc
 8014d56:	2001      	movcc	r0, #1
 8014d58:	f7eb fbf4 	bl	8000544 <__aeabi_ui2d>
 8014d5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014d5e:	4680      	mov	r8, r0
 8014d60:	4689      	mov	r9, r1
 8014d62:	bb13      	cbnz	r3, 8014daa <_strtod_l+0xba2>
 8014d64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014d68:	9014      	str	r0, [sp, #80]	; 0x50
 8014d6a:	9315      	str	r3, [sp, #84]	; 0x54
 8014d6c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8014d70:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8014d74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014d76:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014d78:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8014d7c:	1a9b      	subs	r3, r3, r2
 8014d7e:	930d      	str	r3, [sp, #52]	; 0x34
 8014d80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014d84:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8014d88:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014d8c:	f002 f910 	bl	8016fb0 <__ulp>
 8014d90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014d94:	ec53 2b10 	vmov	r2, r3, d0
 8014d98:	f7eb fc4e 	bl	8000638 <__aeabi_dmul>
 8014d9c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014da0:	f7eb fa94 	bl	80002cc <__adddf3>
 8014da4:	4682      	mov	sl, r0
 8014da6:	468b      	mov	fp, r1
 8014da8:	e78f      	b.n	8014cca <_strtod_l+0xac2>
 8014daa:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8014dae:	e7dd      	b.n	8014d6c <_strtod_l+0xb64>
 8014db0:	a311      	add	r3, pc, #68	; (adr r3, 8014df8 <_strtod_l+0xbf0>)
 8014db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014db6:	f7eb feb1 	bl	8000b1c <__aeabi_dcmplt>
 8014dba:	e7b4      	b.n	8014d26 <_strtod_l+0xb1e>
 8014dbc:	2300      	movs	r3, #0
 8014dbe:	930e      	str	r3, [sp, #56]	; 0x38
 8014dc0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014dc2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014dc4:	6013      	str	r3, [r2, #0]
 8014dc6:	f7ff ba65 	b.w	8014294 <_strtod_l+0x8c>
 8014dca:	2b65      	cmp	r3, #101	; 0x65
 8014dcc:	f43f ab5d 	beq.w	801448a <_strtod_l+0x282>
 8014dd0:	2b45      	cmp	r3, #69	; 0x45
 8014dd2:	f43f ab5a 	beq.w	801448a <_strtod_l+0x282>
 8014dd6:	2201      	movs	r2, #1
 8014dd8:	f7ff bb92 	b.w	8014500 <_strtod_l+0x2f8>
 8014ddc:	f3af 8000 	nop.w
 8014de0:	94a03595 	.word	0x94a03595
 8014de4:	3fdfffff 	.word	0x3fdfffff
 8014de8:	35afe535 	.word	0x35afe535
 8014dec:	3fe00000 	.word	0x3fe00000
 8014df0:	ffc00000 	.word	0xffc00000
 8014df4:	41dfffff 	.word	0x41dfffff
 8014df8:	94a03595 	.word	0x94a03595
 8014dfc:	3fcfffff 	.word	0x3fcfffff
 8014e00:	3ff00000 	.word	0x3ff00000
 8014e04:	7ff00000 	.word	0x7ff00000
 8014e08:	7fe00000 	.word	0x7fe00000
 8014e0c:	7c9fffff 	.word	0x7c9fffff
 8014e10:	3fe00000 	.word	0x3fe00000
 8014e14:	bff00000 	.word	0xbff00000
 8014e18:	7fefffff 	.word	0x7fefffff

08014e1c <_strtod_r>:
 8014e1c:	4b01      	ldr	r3, [pc, #4]	; (8014e24 <_strtod_r+0x8>)
 8014e1e:	f7ff b9f3 	b.w	8014208 <_strtod_l>
 8014e22:	bf00      	nop
 8014e24:	20000158 	.word	0x20000158

08014e28 <_strtol_l.isra.0>:
 8014e28:	2b01      	cmp	r3, #1
 8014e2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014e2e:	d001      	beq.n	8014e34 <_strtol_l.isra.0+0xc>
 8014e30:	2b24      	cmp	r3, #36	; 0x24
 8014e32:	d906      	bls.n	8014e42 <_strtol_l.isra.0+0x1a>
 8014e34:	f7fd ff4e 	bl	8012cd4 <__errno>
 8014e38:	2316      	movs	r3, #22
 8014e3a:	6003      	str	r3, [r0, #0]
 8014e3c:	2000      	movs	r0, #0
 8014e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e42:	4f3a      	ldr	r7, [pc, #232]	; (8014f2c <_strtol_l.isra.0+0x104>)
 8014e44:	468e      	mov	lr, r1
 8014e46:	4676      	mov	r6, lr
 8014e48:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8014e4c:	5de5      	ldrb	r5, [r4, r7]
 8014e4e:	f015 0508 	ands.w	r5, r5, #8
 8014e52:	d1f8      	bne.n	8014e46 <_strtol_l.isra.0+0x1e>
 8014e54:	2c2d      	cmp	r4, #45	; 0x2d
 8014e56:	d134      	bne.n	8014ec2 <_strtol_l.isra.0+0x9a>
 8014e58:	f89e 4000 	ldrb.w	r4, [lr]
 8014e5c:	f04f 0801 	mov.w	r8, #1
 8014e60:	f106 0e02 	add.w	lr, r6, #2
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d05c      	beq.n	8014f22 <_strtol_l.isra.0+0xfa>
 8014e68:	2b10      	cmp	r3, #16
 8014e6a:	d10c      	bne.n	8014e86 <_strtol_l.isra.0+0x5e>
 8014e6c:	2c30      	cmp	r4, #48	; 0x30
 8014e6e:	d10a      	bne.n	8014e86 <_strtol_l.isra.0+0x5e>
 8014e70:	f89e 4000 	ldrb.w	r4, [lr]
 8014e74:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8014e78:	2c58      	cmp	r4, #88	; 0x58
 8014e7a:	d14d      	bne.n	8014f18 <_strtol_l.isra.0+0xf0>
 8014e7c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8014e80:	2310      	movs	r3, #16
 8014e82:	f10e 0e02 	add.w	lr, lr, #2
 8014e86:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8014e8a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8014e8e:	2600      	movs	r6, #0
 8014e90:	fbbc f9f3 	udiv	r9, ip, r3
 8014e94:	4635      	mov	r5, r6
 8014e96:	fb03 ca19 	mls	sl, r3, r9, ip
 8014e9a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8014e9e:	2f09      	cmp	r7, #9
 8014ea0:	d818      	bhi.n	8014ed4 <_strtol_l.isra.0+0xac>
 8014ea2:	463c      	mov	r4, r7
 8014ea4:	42a3      	cmp	r3, r4
 8014ea6:	dd24      	ble.n	8014ef2 <_strtol_l.isra.0+0xca>
 8014ea8:	2e00      	cmp	r6, #0
 8014eaa:	db1f      	blt.n	8014eec <_strtol_l.isra.0+0xc4>
 8014eac:	45a9      	cmp	r9, r5
 8014eae:	d31d      	bcc.n	8014eec <_strtol_l.isra.0+0xc4>
 8014eb0:	d101      	bne.n	8014eb6 <_strtol_l.isra.0+0x8e>
 8014eb2:	45a2      	cmp	sl, r4
 8014eb4:	db1a      	blt.n	8014eec <_strtol_l.isra.0+0xc4>
 8014eb6:	fb05 4503 	mla	r5, r5, r3, r4
 8014eba:	2601      	movs	r6, #1
 8014ebc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8014ec0:	e7eb      	b.n	8014e9a <_strtol_l.isra.0+0x72>
 8014ec2:	2c2b      	cmp	r4, #43	; 0x2b
 8014ec4:	bf08      	it	eq
 8014ec6:	f89e 4000 	ldrbeq.w	r4, [lr]
 8014eca:	46a8      	mov	r8, r5
 8014ecc:	bf08      	it	eq
 8014ece:	f106 0e02 	addeq.w	lr, r6, #2
 8014ed2:	e7c7      	b.n	8014e64 <_strtol_l.isra.0+0x3c>
 8014ed4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8014ed8:	2f19      	cmp	r7, #25
 8014eda:	d801      	bhi.n	8014ee0 <_strtol_l.isra.0+0xb8>
 8014edc:	3c37      	subs	r4, #55	; 0x37
 8014ede:	e7e1      	b.n	8014ea4 <_strtol_l.isra.0+0x7c>
 8014ee0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8014ee4:	2f19      	cmp	r7, #25
 8014ee6:	d804      	bhi.n	8014ef2 <_strtol_l.isra.0+0xca>
 8014ee8:	3c57      	subs	r4, #87	; 0x57
 8014eea:	e7db      	b.n	8014ea4 <_strtol_l.isra.0+0x7c>
 8014eec:	f04f 36ff 	mov.w	r6, #4294967295
 8014ef0:	e7e4      	b.n	8014ebc <_strtol_l.isra.0+0x94>
 8014ef2:	2e00      	cmp	r6, #0
 8014ef4:	da05      	bge.n	8014f02 <_strtol_l.isra.0+0xda>
 8014ef6:	2322      	movs	r3, #34	; 0x22
 8014ef8:	6003      	str	r3, [r0, #0]
 8014efa:	4665      	mov	r5, ip
 8014efc:	b942      	cbnz	r2, 8014f10 <_strtol_l.isra.0+0xe8>
 8014efe:	4628      	mov	r0, r5
 8014f00:	e79d      	b.n	8014e3e <_strtol_l.isra.0+0x16>
 8014f02:	f1b8 0f00 	cmp.w	r8, #0
 8014f06:	d000      	beq.n	8014f0a <_strtol_l.isra.0+0xe2>
 8014f08:	426d      	negs	r5, r5
 8014f0a:	2a00      	cmp	r2, #0
 8014f0c:	d0f7      	beq.n	8014efe <_strtol_l.isra.0+0xd6>
 8014f0e:	b10e      	cbz	r6, 8014f14 <_strtol_l.isra.0+0xec>
 8014f10:	f10e 31ff 	add.w	r1, lr, #4294967295
 8014f14:	6011      	str	r1, [r2, #0]
 8014f16:	e7f2      	b.n	8014efe <_strtol_l.isra.0+0xd6>
 8014f18:	2430      	movs	r4, #48	; 0x30
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	d1b3      	bne.n	8014e86 <_strtol_l.isra.0+0x5e>
 8014f1e:	2308      	movs	r3, #8
 8014f20:	e7b1      	b.n	8014e86 <_strtol_l.isra.0+0x5e>
 8014f22:	2c30      	cmp	r4, #48	; 0x30
 8014f24:	d0a4      	beq.n	8014e70 <_strtol_l.isra.0+0x48>
 8014f26:	230a      	movs	r3, #10
 8014f28:	e7ad      	b.n	8014e86 <_strtol_l.isra.0+0x5e>
 8014f2a:	bf00      	nop
 8014f2c:	0801a0b1 	.word	0x0801a0b1

08014f30 <_strtol_r>:
 8014f30:	f7ff bf7a 	b.w	8014e28 <_strtol_l.isra.0>

08014f34 <_strtoul_l.isra.0>:
 8014f34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014f38:	4e3b      	ldr	r6, [pc, #236]	; (8015028 <_strtoul_l.isra.0+0xf4>)
 8014f3a:	4686      	mov	lr, r0
 8014f3c:	468c      	mov	ip, r1
 8014f3e:	4660      	mov	r0, ip
 8014f40:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8014f44:	5da5      	ldrb	r5, [r4, r6]
 8014f46:	f015 0508 	ands.w	r5, r5, #8
 8014f4a:	d1f8      	bne.n	8014f3e <_strtoul_l.isra.0+0xa>
 8014f4c:	2c2d      	cmp	r4, #45	; 0x2d
 8014f4e:	d134      	bne.n	8014fba <_strtoul_l.isra.0+0x86>
 8014f50:	f89c 4000 	ldrb.w	r4, [ip]
 8014f54:	f04f 0801 	mov.w	r8, #1
 8014f58:	f100 0c02 	add.w	ip, r0, #2
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	d05e      	beq.n	801501e <_strtoul_l.isra.0+0xea>
 8014f60:	2b10      	cmp	r3, #16
 8014f62:	d10c      	bne.n	8014f7e <_strtoul_l.isra.0+0x4a>
 8014f64:	2c30      	cmp	r4, #48	; 0x30
 8014f66:	d10a      	bne.n	8014f7e <_strtoul_l.isra.0+0x4a>
 8014f68:	f89c 0000 	ldrb.w	r0, [ip]
 8014f6c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8014f70:	2858      	cmp	r0, #88	; 0x58
 8014f72:	d14f      	bne.n	8015014 <_strtoul_l.isra.0+0xe0>
 8014f74:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8014f78:	2310      	movs	r3, #16
 8014f7a:	f10c 0c02 	add.w	ip, ip, #2
 8014f7e:	f04f 37ff 	mov.w	r7, #4294967295
 8014f82:	2500      	movs	r5, #0
 8014f84:	fbb7 f7f3 	udiv	r7, r7, r3
 8014f88:	fb03 f907 	mul.w	r9, r3, r7
 8014f8c:	ea6f 0909 	mvn.w	r9, r9
 8014f90:	4628      	mov	r0, r5
 8014f92:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8014f96:	2e09      	cmp	r6, #9
 8014f98:	d818      	bhi.n	8014fcc <_strtoul_l.isra.0+0x98>
 8014f9a:	4634      	mov	r4, r6
 8014f9c:	42a3      	cmp	r3, r4
 8014f9e:	dd24      	ble.n	8014fea <_strtoul_l.isra.0+0xb6>
 8014fa0:	2d00      	cmp	r5, #0
 8014fa2:	db1f      	blt.n	8014fe4 <_strtoul_l.isra.0+0xb0>
 8014fa4:	4287      	cmp	r7, r0
 8014fa6:	d31d      	bcc.n	8014fe4 <_strtoul_l.isra.0+0xb0>
 8014fa8:	d101      	bne.n	8014fae <_strtoul_l.isra.0+0x7a>
 8014faa:	45a1      	cmp	r9, r4
 8014fac:	db1a      	blt.n	8014fe4 <_strtoul_l.isra.0+0xb0>
 8014fae:	fb00 4003 	mla	r0, r0, r3, r4
 8014fb2:	2501      	movs	r5, #1
 8014fb4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8014fb8:	e7eb      	b.n	8014f92 <_strtoul_l.isra.0+0x5e>
 8014fba:	2c2b      	cmp	r4, #43	; 0x2b
 8014fbc:	bf08      	it	eq
 8014fbe:	f89c 4000 	ldrbeq.w	r4, [ip]
 8014fc2:	46a8      	mov	r8, r5
 8014fc4:	bf08      	it	eq
 8014fc6:	f100 0c02 	addeq.w	ip, r0, #2
 8014fca:	e7c7      	b.n	8014f5c <_strtoul_l.isra.0+0x28>
 8014fcc:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8014fd0:	2e19      	cmp	r6, #25
 8014fd2:	d801      	bhi.n	8014fd8 <_strtoul_l.isra.0+0xa4>
 8014fd4:	3c37      	subs	r4, #55	; 0x37
 8014fd6:	e7e1      	b.n	8014f9c <_strtoul_l.isra.0+0x68>
 8014fd8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8014fdc:	2e19      	cmp	r6, #25
 8014fde:	d804      	bhi.n	8014fea <_strtoul_l.isra.0+0xb6>
 8014fe0:	3c57      	subs	r4, #87	; 0x57
 8014fe2:	e7db      	b.n	8014f9c <_strtoul_l.isra.0+0x68>
 8014fe4:	f04f 35ff 	mov.w	r5, #4294967295
 8014fe8:	e7e4      	b.n	8014fb4 <_strtoul_l.isra.0+0x80>
 8014fea:	2d00      	cmp	r5, #0
 8014fec:	da07      	bge.n	8014ffe <_strtoul_l.isra.0+0xca>
 8014fee:	2322      	movs	r3, #34	; 0x22
 8014ff0:	f8ce 3000 	str.w	r3, [lr]
 8014ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8014ff8:	b942      	cbnz	r2, 801500c <_strtoul_l.isra.0+0xd8>
 8014ffa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014ffe:	f1b8 0f00 	cmp.w	r8, #0
 8015002:	d000      	beq.n	8015006 <_strtoul_l.isra.0+0xd2>
 8015004:	4240      	negs	r0, r0
 8015006:	2a00      	cmp	r2, #0
 8015008:	d0f7      	beq.n	8014ffa <_strtoul_l.isra.0+0xc6>
 801500a:	b10d      	cbz	r5, 8015010 <_strtoul_l.isra.0+0xdc>
 801500c:	f10c 31ff 	add.w	r1, ip, #4294967295
 8015010:	6011      	str	r1, [r2, #0]
 8015012:	e7f2      	b.n	8014ffa <_strtoul_l.isra.0+0xc6>
 8015014:	2430      	movs	r4, #48	; 0x30
 8015016:	2b00      	cmp	r3, #0
 8015018:	d1b1      	bne.n	8014f7e <_strtoul_l.isra.0+0x4a>
 801501a:	2308      	movs	r3, #8
 801501c:	e7af      	b.n	8014f7e <_strtoul_l.isra.0+0x4a>
 801501e:	2c30      	cmp	r4, #48	; 0x30
 8015020:	d0a2      	beq.n	8014f68 <_strtoul_l.isra.0+0x34>
 8015022:	230a      	movs	r3, #10
 8015024:	e7ab      	b.n	8014f7e <_strtoul_l.isra.0+0x4a>
 8015026:	bf00      	nop
 8015028:	0801a0b1 	.word	0x0801a0b1

0801502c <_strtoul_r>:
 801502c:	f7ff bf82 	b.w	8014f34 <_strtoul_l.isra.0>

08015030 <__swbuf_r>:
 8015030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015032:	460e      	mov	r6, r1
 8015034:	4614      	mov	r4, r2
 8015036:	4605      	mov	r5, r0
 8015038:	b118      	cbz	r0, 8015042 <__swbuf_r+0x12>
 801503a:	6983      	ldr	r3, [r0, #24]
 801503c:	b90b      	cbnz	r3, 8015042 <__swbuf_r+0x12>
 801503e:	f7fd fea7 	bl	8012d90 <__sinit>
 8015042:	4b21      	ldr	r3, [pc, #132]	; (80150c8 <__swbuf_r+0x98>)
 8015044:	429c      	cmp	r4, r3
 8015046:	d12b      	bne.n	80150a0 <__swbuf_r+0x70>
 8015048:	686c      	ldr	r4, [r5, #4]
 801504a:	69a3      	ldr	r3, [r4, #24]
 801504c:	60a3      	str	r3, [r4, #8]
 801504e:	89a3      	ldrh	r3, [r4, #12]
 8015050:	071a      	lsls	r2, r3, #28
 8015052:	d52f      	bpl.n	80150b4 <__swbuf_r+0x84>
 8015054:	6923      	ldr	r3, [r4, #16]
 8015056:	b36b      	cbz	r3, 80150b4 <__swbuf_r+0x84>
 8015058:	6923      	ldr	r3, [r4, #16]
 801505a:	6820      	ldr	r0, [r4, #0]
 801505c:	1ac0      	subs	r0, r0, r3
 801505e:	6963      	ldr	r3, [r4, #20]
 8015060:	b2f6      	uxtb	r6, r6
 8015062:	4283      	cmp	r3, r0
 8015064:	4637      	mov	r7, r6
 8015066:	dc04      	bgt.n	8015072 <__swbuf_r+0x42>
 8015068:	4621      	mov	r1, r4
 801506a:	4628      	mov	r0, r5
 801506c:	f000 ffde 	bl	801602c <_fflush_r>
 8015070:	bb30      	cbnz	r0, 80150c0 <__swbuf_r+0x90>
 8015072:	68a3      	ldr	r3, [r4, #8]
 8015074:	3b01      	subs	r3, #1
 8015076:	60a3      	str	r3, [r4, #8]
 8015078:	6823      	ldr	r3, [r4, #0]
 801507a:	1c5a      	adds	r2, r3, #1
 801507c:	6022      	str	r2, [r4, #0]
 801507e:	701e      	strb	r6, [r3, #0]
 8015080:	6963      	ldr	r3, [r4, #20]
 8015082:	3001      	adds	r0, #1
 8015084:	4283      	cmp	r3, r0
 8015086:	d004      	beq.n	8015092 <__swbuf_r+0x62>
 8015088:	89a3      	ldrh	r3, [r4, #12]
 801508a:	07db      	lsls	r3, r3, #31
 801508c:	d506      	bpl.n	801509c <__swbuf_r+0x6c>
 801508e:	2e0a      	cmp	r6, #10
 8015090:	d104      	bne.n	801509c <__swbuf_r+0x6c>
 8015092:	4621      	mov	r1, r4
 8015094:	4628      	mov	r0, r5
 8015096:	f000 ffc9 	bl	801602c <_fflush_r>
 801509a:	b988      	cbnz	r0, 80150c0 <__swbuf_r+0x90>
 801509c:	4638      	mov	r0, r7
 801509e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80150a0:	4b0a      	ldr	r3, [pc, #40]	; (80150cc <__swbuf_r+0x9c>)
 80150a2:	429c      	cmp	r4, r3
 80150a4:	d101      	bne.n	80150aa <__swbuf_r+0x7a>
 80150a6:	68ac      	ldr	r4, [r5, #8]
 80150a8:	e7cf      	b.n	801504a <__swbuf_r+0x1a>
 80150aa:	4b09      	ldr	r3, [pc, #36]	; (80150d0 <__swbuf_r+0xa0>)
 80150ac:	429c      	cmp	r4, r3
 80150ae:	bf08      	it	eq
 80150b0:	68ec      	ldreq	r4, [r5, #12]
 80150b2:	e7ca      	b.n	801504a <__swbuf_r+0x1a>
 80150b4:	4621      	mov	r1, r4
 80150b6:	4628      	mov	r0, r5
 80150b8:	f000 f81e 	bl	80150f8 <__swsetup_r>
 80150bc:	2800      	cmp	r0, #0
 80150be:	d0cb      	beq.n	8015058 <__swbuf_r+0x28>
 80150c0:	f04f 37ff 	mov.w	r7, #4294967295
 80150c4:	e7ea      	b.n	801509c <__swbuf_r+0x6c>
 80150c6:	bf00      	nop
 80150c8:	0801a1d4 	.word	0x0801a1d4
 80150cc:	0801a1f4 	.word	0x0801a1f4
 80150d0:	0801a1b4 	.word	0x0801a1b4

080150d4 <_write_r>:
 80150d4:	b538      	push	{r3, r4, r5, lr}
 80150d6:	4d07      	ldr	r5, [pc, #28]	; (80150f4 <_write_r+0x20>)
 80150d8:	4604      	mov	r4, r0
 80150da:	4608      	mov	r0, r1
 80150dc:	4611      	mov	r1, r2
 80150de:	2200      	movs	r2, #0
 80150e0:	602a      	str	r2, [r5, #0]
 80150e2:	461a      	mov	r2, r3
 80150e4:	f002 ffc0 	bl	8018068 <_write>
 80150e8:	1c43      	adds	r3, r0, #1
 80150ea:	d102      	bne.n	80150f2 <_write_r+0x1e>
 80150ec:	682b      	ldr	r3, [r5, #0]
 80150ee:	b103      	cbz	r3, 80150f2 <_write_r+0x1e>
 80150f0:	6023      	str	r3, [r4, #0]
 80150f2:	bd38      	pop	{r3, r4, r5, pc}
 80150f4:	2000654c 	.word	0x2000654c

080150f8 <__swsetup_r>:
 80150f8:	4b32      	ldr	r3, [pc, #200]	; (80151c4 <__swsetup_r+0xcc>)
 80150fa:	b570      	push	{r4, r5, r6, lr}
 80150fc:	681d      	ldr	r5, [r3, #0]
 80150fe:	4606      	mov	r6, r0
 8015100:	460c      	mov	r4, r1
 8015102:	b125      	cbz	r5, 801510e <__swsetup_r+0x16>
 8015104:	69ab      	ldr	r3, [r5, #24]
 8015106:	b913      	cbnz	r3, 801510e <__swsetup_r+0x16>
 8015108:	4628      	mov	r0, r5
 801510a:	f7fd fe41 	bl	8012d90 <__sinit>
 801510e:	4b2e      	ldr	r3, [pc, #184]	; (80151c8 <__swsetup_r+0xd0>)
 8015110:	429c      	cmp	r4, r3
 8015112:	d10f      	bne.n	8015134 <__swsetup_r+0x3c>
 8015114:	686c      	ldr	r4, [r5, #4]
 8015116:	89a3      	ldrh	r3, [r4, #12]
 8015118:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801511c:	0719      	lsls	r1, r3, #28
 801511e:	d42c      	bmi.n	801517a <__swsetup_r+0x82>
 8015120:	06dd      	lsls	r5, r3, #27
 8015122:	d411      	bmi.n	8015148 <__swsetup_r+0x50>
 8015124:	2309      	movs	r3, #9
 8015126:	6033      	str	r3, [r6, #0]
 8015128:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801512c:	81a3      	strh	r3, [r4, #12]
 801512e:	f04f 30ff 	mov.w	r0, #4294967295
 8015132:	e03e      	b.n	80151b2 <__swsetup_r+0xba>
 8015134:	4b25      	ldr	r3, [pc, #148]	; (80151cc <__swsetup_r+0xd4>)
 8015136:	429c      	cmp	r4, r3
 8015138:	d101      	bne.n	801513e <__swsetup_r+0x46>
 801513a:	68ac      	ldr	r4, [r5, #8]
 801513c:	e7eb      	b.n	8015116 <__swsetup_r+0x1e>
 801513e:	4b24      	ldr	r3, [pc, #144]	; (80151d0 <__swsetup_r+0xd8>)
 8015140:	429c      	cmp	r4, r3
 8015142:	bf08      	it	eq
 8015144:	68ec      	ldreq	r4, [r5, #12]
 8015146:	e7e6      	b.n	8015116 <__swsetup_r+0x1e>
 8015148:	0758      	lsls	r0, r3, #29
 801514a:	d512      	bpl.n	8015172 <__swsetup_r+0x7a>
 801514c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801514e:	b141      	cbz	r1, 8015162 <__swsetup_r+0x6a>
 8015150:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015154:	4299      	cmp	r1, r3
 8015156:	d002      	beq.n	801515e <__swsetup_r+0x66>
 8015158:	4630      	mov	r0, r6
 801515a:	f7fd ff1f 	bl	8012f9c <_free_r>
 801515e:	2300      	movs	r3, #0
 8015160:	6363      	str	r3, [r4, #52]	; 0x34
 8015162:	89a3      	ldrh	r3, [r4, #12]
 8015164:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015168:	81a3      	strh	r3, [r4, #12]
 801516a:	2300      	movs	r3, #0
 801516c:	6063      	str	r3, [r4, #4]
 801516e:	6923      	ldr	r3, [r4, #16]
 8015170:	6023      	str	r3, [r4, #0]
 8015172:	89a3      	ldrh	r3, [r4, #12]
 8015174:	f043 0308 	orr.w	r3, r3, #8
 8015178:	81a3      	strh	r3, [r4, #12]
 801517a:	6923      	ldr	r3, [r4, #16]
 801517c:	b94b      	cbnz	r3, 8015192 <__swsetup_r+0x9a>
 801517e:	89a3      	ldrh	r3, [r4, #12]
 8015180:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015188:	d003      	beq.n	8015192 <__swsetup_r+0x9a>
 801518a:	4621      	mov	r1, r4
 801518c:	4630      	mov	r0, r6
 801518e:	f001 fb45 	bl	801681c <__smakebuf_r>
 8015192:	89a0      	ldrh	r0, [r4, #12]
 8015194:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015198:	f010 0301 	ands.w	r3, r0, #1
 801519c:	d00a      	beq.n	80151b4 <__swsetup_r+0xbc>
 801519e:	2300      	movs	r3, #0
 80151a0:	60a3      	str	r3, [r4, #8]
 80151a2:	6963      	ldr	r3, [r4, #20]
 80151a4:	425b      	negs	r3, r3
 80151a6:	61a3      	str	r3, [r4, #24]
 80151a8:	6923      	ldr	r3, [r4, #16]
 80151aa:	b943      	cbnz	r3, 80151be <__swsetup_r+0xc6>
 80151ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80151b0:	d1ba      	bne.n	8015128 <__swsetup_r+0x30>
 80151b2:	bd70      	pop	{r4, r5, r6, pc}
 80151b4:	0781      	lsls	r1, r0, #30
 80151b6:	bf58      	it	pl
 80151b8:	6963      	ldrpl	r3, [r4, #20]
 80151ba:	60a3      	str	r3, [r4, #8]
 80151bc:	e7f4      	b.n	80151a8 <__swsetup_r+0xb0>
 80151be:	2000      	movs	r0, #0
 80151c0:	e7f7      	b.n	80151b2 <__swsetup_r+0xba>
 80151c2:	bf00      	nop
 80151c4:	200000f0 	.word	0x200000f0
 80151c8:	0801a1d4 	.word	0x0801a1d4
 80151cc:	0801a1f4 	.word	0x0801a1f4
 80151d0:	0801a1b4 	.word	0x0801a1b4

080151d4 <__assert_func>:
 80151d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80151d6:	4614      	mov	r4, r2
 80151d8:	461a      	mov	r2, r3
 80151da:	4b09      	ldr	r3, [pc, #36]	; (8015200 <__assert_func+0x2c>)
 80151dc:	681b      	ldr	r3, [r3, #0]
 80151de:	4605      	mov	r5, r0
 80151e0:	68d8      	ldr	r0, [r3, #12]
 80151e2:	b14c      	cbz	r4, 80151f8 <__assert_func+0x24>
 80151e4:	4b07      	ldr	r3, [pc, #28]	; (8015204 <__assert_func+0x30>)
 80151e6:	9100      	str	r1, [sp, #0]
 80151e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80151ec:	4906      	ldr	r1, [pc, #24]	; (8015208 <__assert_func+0x34>)
 80151ee:	462b      	mov	r3, r5
 80151f0:	f000 ff58 	bl	80160a4 <fiprintf>
 80151f4:	f7fd fd66 	bl	8012cc4 <abort>
 80151f8:	4b04      	ldr	r3, [pc, #16]	; (801520c <__assert_func+0x38>)
 80151fa:	461c      	mov	r4, r3
 80151fc:	e7f3      	b.n	80151e6 <__assert_func+0x12>
 80151fe:	bf00      	nop
 8015200:	200000f0 	.word	0x200000f0
 8015204:	0801a2a0 	.word	0x0801a2a0
 8015208:	0801a2ad 	.word	0x0801a2ad
 801520c:	0801a2db 	.word	0x0801a2db

08015210 <_close_r>:
 8015210:	b538      	push	{r3, r4, r5, lr}
 8015212:	4d06      	ldr	r5, [pc, #24]	; (801522c <_close_r+0x1c>)
 8015214:	2300      	movs	r3, #0
 8015216:	4604      	mov	r4, r0
 8015218:	4608      	mov	r0, r1
 801521a:	602b      	str	r3, [r5, #0]
 801521c:	f002 fede 	bl	8017fdc <_close>
 8015220:	1c43      	adds	r3, r0, #1
 8015222:	d102      	bne.n	801522a <_close_r+0x1a>
 8015224:	682b      	ldr	r3, [r5, #0]
 8015226:	b103      	cbz	r3, 801522a <_close_r+0x1a>
 8015228:	6023      	str	r3, [r4, #0]
 801522a:	bd38      	pop	{r3, r4, r5, pc}
 801522c:	2000654c 	.word	0x2000654c

08015230 <quorem>:
 8015230:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015234:	6903      	ldr	r3, [r0, #16]
 8015236:	690c      	ldr	r4, [r1, #16]
 8015238:	42a3      	cmp	r3, r4
 801523a:	4607      	mov	r7, r0
 801523c:	f2c0 8081 	blt.w	8015342 <quorem+0x112>
 8015240:	3c01      	subs	r4, #1
 8015242:	f101 0814 	add.w	r8, r1, #20
 8015246:	f100 0514 	add.w	r5, r0, #20
 801524a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801524e:	9301      	str	r3, [sp, #4]
 8015250:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8015254:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015258:	3301      	adds	r3, #1
 801525a:	429a      	cmp	r2, r3
 801525c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8015260:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015264:	fbb2 f6f3 	udiv	r6, r2, r3
 8015268:	d331      	bcc.n	80152ce <quorem+0x9e>
 801526a:	f04f 0e00 	mov.w	lr, #0
 801526e:	4640      	mov	r0, r8
 8015270:	46ac      	mov	ip, r5
 8015272:	46f2      	mov	sl, lr
 8015274:	f850 2b04 	ldr.w	r2, [r0], #4
 8015278:	b293      	uxth	r3, r2
 801527a:	fb06 e303 	mla	r3, r6, r3, lr
 801527e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8015282:	b29b      	uxth	r3, r3
 8015284:	ebaa 0303 	sub.w	r3, sl, r3
 8015288:	0c12      	lsrs	r2, r2, #16
 801528a:	f8dc a000 	ldr.w	sl, [ip]
 801528e:	fb06 e202 	mla	r2, r6, r2, lr
 8015292:	fa13 f38a 	uxtah	r3, r3, sl
 8015296:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801529a:	fa1f fa82 	uxth.w	sl, r2
 801529e:	f8dc 2000 	ldr.w	r2, [ip]
 80152a2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80152a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80152aa:	b29b      	uxth	r3, r3
 80152ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80152b0:	4581      	cmp	r9, r0
 80152b2:	f84c 3b04 	str.w	r3, [ip], #4
 80152b6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80152ba:	d2db      	bcs.n	8015274 <quorem+0x44>
 80152bc:	f855 300b 	ldr.w	r3, [r5, fp]
 80152c0:	b92b      	cbnz	r3, 80152ce <quorem+0x9e>
 80152c2:	9b01      	ldr	r3, [sp, #4]
 80152c4:	3b04      	subs	r3, #4
 80152c6:	429d      	cmp	r5, r3
 80152c8:	461a      	mov	r2, r3
 80152ca:	d32e      	bcc.n	801532a <quorem+0xfa>
 80152cc:	613c      	str	r4, [r7, #16]
 80152ce:	4638      	mov	r0, r7
 80152d0:	f001 fdca 	bl	8016e68 <__mcmp>
 80152d4:	2800      	cmp	r0, #0
 80152d6:	db24      	blt.n	8015322 <quorem+0xf2>
 80152d8:	3601      	adds	r6, #1
 80152da:	4628      	mov	r0, r5
 80152dc:	f04f 0c00 	mov.w	ip, #0
 80152e0:	f858 2b04 	ldr.w	r2, [r8], #4
 80152e4:	f8d0 e000 	ldr.w	lr, [r0]
 80152e8:	b293      	uxth	r3, r2
 80152ea:	ebac 0303 	sub.w	r3, ip, r3
 80152ee:	0c12      	lsrs	r2, r2, #16
 80152f0:	fa13 f38e 	uxtah	r3, r3, lr
 80152f4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80152f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80152fc:	b29b      	uxth	r3, r3
 80152fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015302:	45c1      	cmp	r9, r8
 8015304:	f840 3b04 	str.w	r3, [r0], #4
 8015308:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801530c:	d2e8      	bcs.n	80152e0 <quorem+0xb0>
 801530e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015312:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015316:	b922      	cbnz	r2, 8015322 <quorem+0xf2>
 8015318:	3b04      	subs	r3, #4
 801531a:	429d      	cmp	r5, r3
 801531c:	461a      	mov	r2, r3
 801531e:	d30a      	bcc.n	8015336 <quorem+0x106>
 8015320:	613c      	str	r4, [r7, #16]
 8015322:	4630      	mov	r0, r6
 8015324:	b003      	add	sp, #12
 8015326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801532a:	6812      	ldr	r2, [r2, #0]
 801532c:	3b04      	subs	r3, #4
 801532e:	2a00      	cmp	r2, #0
 8015330:	d1cc      	bne.n	80152cc <quorem+0x9c>
 8015332:	3c01      	subs	r4, #1
 8015334:	e7c7      	b.n	80152c6 <quorem+0x96>
 8015336:	6812      	ldr	r2, [r2, #0]
 8015338:	3b04      	subs	r3, #4
 801533a:	2a00      	cmp	r2, #0
 801533c:	d1f0      	bne.n	8015320 <quorem+0xf0>
 801533e:	3c01      	subs	r4, #1
 8015340:	e7eb      	b.n	801531a <quorem+0xea>
 8015342:	2000      	movs	r0, #0
 8015344:	e7ee      	b.n	8015324 <quorem+0xf4>
	...

08015348 <_dtoa_r>:
 8015348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801534c:	ed2d 8b02 	vpush	{d8}
 8015350:	ec57 6b10 	vmov	r6, r7, d0
 8015354:	b095      	sub	sp, #84	; 0x54
 8015356:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015358:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801535c:	9105      	str	r1, [sp, #20]
 801535e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8015362:	4604      	mov	r4, r0
 8015364:	9209      	str	r2, [sp, #36]	; 0x24
 8015366:	930f      	str	r3, [sp, #60]	; 0x3c
 8015368:	b975      	cbnz	r5, 8015388 <_dtoa_r+0x40>
 801536a:	2010      	movs	r0, #16
 801536c:	f7fd fdd6 	bl	8012f1c <malloc>
 8015370:	4602      	mov	r2, r0
 8015372:	6260      	str	r0, [r4, #36]	; 0x24
 8015374:	b920      	cbnz	r0, 8015380 <_dtoa_r+0x38>
 8015376:	4bb2      	ldr	r3, [pc, #712]	; (8015640 <_dtoa_r+0x2f8>)
 8015378:	21ea      	movs	r1, #234	; 0xea
 801537a:	48b2      	ldr	r0, [pc, #712]	; (8015644 <_dtoa_r+0x2fc>)
 801537c:	f7ff ff2a 	bl	80151d4 <__assert_func>
 8015380:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015384:	6005      	str	r5, [r0, #0]
 8015386:	60c5      	str	r5, [r0, #12]
 8015388:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801538a:	6819      	ldr	r1, [r3, #0]
 801538c:	b151      	cbz	r1, 80153a4 <_dtoa_r+0x5c>
 801538e:	685a      	ldr	r2, [r3, #4]
 8015390:	604a      	str	r2, [r1, #4]
 8015392:	2301      	movs	r3, #1
 8015394:	4093      	lsls	r3, r2
 8015396:	608b      	str	r3, [r1, #8]
 8015398:	4620      	mov	r0, r4
 801539a:	f001 fadd 	bl	8016958 <_Bfree>
 801539e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80153a0:	2200      	movs	r2, #0
 80153a2:	601a      	str	r2, [r3, #0]
 80153a4:	1e3b      	subs	r3, r7, #0
 80153a6:	bfb9      	ittee	lt
 80153a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80153ac:	9303      	strlt	r3, [sp, #12]
 80153ae:	2300      	movge	r3, #0
 80153b0:	f8c8 3000 	strge.w	r3, [r8]
 80153b4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80153b8:	4ba3      	ldr	r3, [pc, #652]	; (8015648 <_dtoa_r+0x300>)
 80153ba:	bfbc      	itt	lt
 80153bc:	2201      	movlt	r2, #1
 80153be:	f8c8 2000 	strlt.w	r2, [r8]
 80153c2:	ea33 0309 	bics.w	r3, r3, r9
 80153c6:	d11b      	bne.n	8015400 <_dtoa_r+0xb8>
 80153c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80153ca:	f242 730f 	movw	r3, #9999	; 0x270f
 80153ce:	6013      	str	r3, [r2, #0]
 80153d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80153d4:	4333      	orrs	r3, r6
 80153d6:	f000 857a 	beq.w	8015ece <_dtoa_r+0xb86>
 80153da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80153dc:	b963      	cbnz	r3, 80153f8 <_dtoa_r+0xb0>
 80153de:	4b9b      	ldr	r3, [pc, #620]	; (801564c <_dtoa_r+0x304>)
 80153e0:	e024      	b.n	801542c <_dtoa_r+0xe4>
 80153e2:	4b9b      	ldr	r3, [pc, #620]	; (8015650 <_dtoa_r+0x308>)
 80153e4:	9300      	str	r3, [sp, #0]
 80153e6:	3308      	adds	r3, #8
 80153e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80153ea:	6013      	str	r3, [r2, #0]
 80153ec:	9800      	ldr	r0, [sp, #0]
 80153ee:	b015      	add	sp, #84	; 0x54
 80153f0:	ecbd 8b02 	vpop	{d8}
 80153f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153f8:	4b94      	ldr	r3, [pc, #592]	; (801564c <_dtoa_r+0x304>)
 80153fa:	9300      	str	r3, [sp, #0]
 80153fc:	3303      	adds	r3, #3
 80153fe:	e7f3      	b.n	80153e8 <_dtoa_r+0xa0>
 8015400:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015404:	2200      	movs	r2, #0
 8015406:	ec51 0b17 	vmov	r0, r1, d7
 801540a:	2300      	movs	r3, #0
 801540c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8015410:	f7eb fb7a 	bl	8000b08 <__aeabi_dcmpeq>
 8015414:	4680      	mov	r8, r0
 8015416:	b158      	cbz	r0, 8015430 <_dtoa_r+0xe8>
 8015418:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801541a:	2301      	movs	r3, #1
 801541c:	6013      	str	r3, [r2, #0]
 801541e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015420:	2b00      	cmp	r3, #0
 8015422:	f000 8551 	beq.w	8015ec8 <_dtoa_r+0xb80>
 8015426:	488b      	ldr	r0, [pc, #556]	; (8015654 <_dtoa_r+0x30c>)
 8015428:	6018      	str	r0, [r3, #0]
 801542a:	1e43      	subs	r3, r0, #1
 801542c:	9300      	str	r3, [sp, #0]
 801542e:	e7dd      	b.n	80153ec <_dtoa_r+0xa4>
 8015430:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8015434:	aa12      	add	r2, sp, #72	; 0x48
 8015436:	a913      	add	r1, sp, #76	; 0x4c
 8015438:	4620      	mov	r0, r4
 801543a:	f001 fe35 	bl	80170a8 <__d2b>
 801543e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8015442:	4683      	mov	fp, r0
 8015444:	2d00      	cmp	r5, #0
 8015446:	d07c      	beq.n	8015542 <_dtoa_r+0x1fa>
 8015448:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801544a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801544e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015452:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8015456:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801545a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801545e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8015462:	4b7d      	ldr	r3, [pc, #500]	; (8015658 <_dtoa_r+0x310>)
 8015464:	2200      	movs	r2, #0
 8015466:	4630      	mov	r0, r6
 8015468:	4639      	mov	r1, r7
 801546a:	f7ea ff2d 	bl	80002c8 <__aeabi_dsub>
 801546e:	a36e      	add	r3, pc, #440	; (adr r3, 8015628 <_dtoa_r+0x2e0>)
 8015470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015474:	f7eb f8e0 	bl	8000638 <__aeabi_dmul>
 8015478:	a36d      	add	r3, pc, #436	; (adr r3, 8015630 <_dtoa_r+0x2e8>)
 801547a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801547e:	f7ea ff25 	bl	80002cc <__adddf3>
 8015482:	4606      	mov	r6, r0
 8015484:	4628      	mov	r0, r5
 8015486:	460f      	mov	r7, r1
 8015488:	f7eb f86c 	bl	8000564 <__aeabi_i2d>
 801548c:	a36a      	add	r3, pc, #424	; (adr r3, 8015638 <_dtoa_r+0x2f0>)
 801548e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015492:	f7eb f8d1 	bl	8000638 <__aeabi_dmul>
 8015496:	4602      	mov	r2, r0
 8015498:	460b      	mov	r3, r1
 801549a:	4630      	mov	r0, r6
 801549c:	4639      	mov	r1, r7
 801549e:	f7ea ff15 	bl	80002cc <__adddf3>
 80154a2:	4606      	mov	r6, r0
 80154a4:	460f      	mov	r7, r1
 80154a6:	f7eb fb77 	bl	8000b98 <__aeabi_d2iz>
 80154aa:	2200      	movs	r2, #0
 80154ac:	4682      	mov	sl, r0
 80154ae:	2300      	movs	r3, #0
 80154b0:	4630      	mov	r0, r6
 80154b2:	4639      	mov	r1, r7
 80154b4:	f7eb fb32 	bl	8000b1c <__aeabi_dcmplt>
 80154b8:	b148      	cbz	r0, 80154ce <_dtoa_r+0x186>
 80154ba:	4650      	mov	r0, sl
 80154bc:	f7eb f852 	bl	8000564 <__aeabi_i2d>
 80154c0:	4632      	mov	r2, r6
 80154c2:	463b      	mov	r3, r7
 80154c4:	f7eb fb20 	bl	8000b08 <__aeabi_dcmpeq>
 80154c8:	b908      	cbnz	r0, 80154ce <_dtoa_r+0x186>
 80154ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80154ce:	f1ba 0f16 	cmp.w	sl, #22
 80154d2:	d854      	bhi.n	801557e <_dtoa_r+0x236>
 80154d4:	4b61      	ldr	r3, [pc, #388]	; (801565c <_dtoa_r+0x314>)
 80154d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80154da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80154e2:	f7eb fb1b 	bl	8000b1c <__aeabi_dcmplt>
 80154e6:	2800      	cmp	r0, #0
 80154e8:	d04b      	beq.n	8015582 <_dtoa_r+0x23a>
 80154ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80154ee:	2300      	movs	r3, #0
 80154f0:	930e      	str	r3, [sp, #56]	; 0x38
 80154f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80154f4:	1b5d      	subs	r5, r3, r5
 80154f6:	1e6b      	subs	r3, r5, #1
 80154f8:	9304      	str	r3, [sp, #16]
 80154fa:	bf43      	ittte	mi
 80154fc:	2300      	movmi	r3, #0
 80154fe:	f1c5 0801 	rsbmi	r8, r5, #1
 8015502:	9304      	strmi	r3, [sp, #16]
 8015504:	f04f 0800 	movpl.w	r8, #0
 8015508:	f1ba 0f00 	cmp.w	sl, #0
 801550c:	db3b      	blt.n	8015586 <_dtoa_r+0x23e>
 801550e:	9b04      	ldr	r3, [sp, #16]
 8015510:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8015514:	4453      	add	r3, sl
 8015516:	9304      	str	r3, [sp, #16]
 8015518:	2300      	movs	r3, #0
 801551a:	9306      	str	r3, [sp, #24]
 801551c:	9b05      	ldr	r3, [sp, #20]
 801551e:	2b09      	cmp	r3, #9
 8015520:	d869      	bhi.n	80155f6 <_dtoa_r+0x2ae>
 8015522:	2b05      	cmp	r3, #5
 8015524:	bfc4      	itt	gt
 8015526:	3b04      	subgt	r3, #4
 8015528:	9305      	strgt	r3, [sp, #20]
 801552a:	9b05      	ldr	r3, [sp, #20]
 801552c:	f1a3 0302 	sub.w	r3, r3, #2
 8015530:	bfcc      	ite	gt
 8015532:	2500      	movgt	r5, #0
 8015534:	2501      	movle	r5, #1
 8015536:	2b03      	cmp	r3, #3
 8015538:	d869      	bhi.n	801560e <_dtoa_r+0x2c6>
 801553a:	e8df f003 	tbb	[pc, r3]
 801553e:	4e2c      	.short	0x4e2c
 8015540:	5a4c      	.short	0x5a4c
 8015542:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8015546:	441d      	add	r5, r3
 8015548:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801554c:	2b20      	cmp	r3, #32
 801554e:	bfc1      	itttt	gt
 8015550:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8015554:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8015558:	fa09 f303 	lslgt.w	r3, r9, r3
 801555c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8015560:	bfda      	itte	le
 8015562:	f1c3 0320 	rsble	r3, r3, #32
 8015566:	fa06 f003 	lslle.w	r0, r6, r3
 801556a:	4318      	orrgt	r0, r3
 801556c:	f7ea ffea 	bl	8000544 <__aeabi_ui2d>
 8015570:	2301      	movs	r3, #1
 8015572:	4606      	mov	r6, r0
 8015574:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8015578:	3d01      	subs	r5, #1
 801557a:	9310      	str	r3, [sp, #64]	; 0x40
 801557c:	e771      	b.n	8015462 <_dtoa_r+0x11a>
 801557e:	2301      	movs	r3, #1
 8015580:	e7b6      	b.n	80154f0 <_dtoa_r+0x1a8>
 8015582:	900e      	str	r0, [sp, #56]	; 0x38
 8015584:	e7b5      	b.n	80154f2 <_dtoa_r+0x1aa>
 8015586:	f1ca 0300 	rsb	r3, sl, #0
 801558a:	9306      	str	r3, [sp, #24]
 801558c:	2300      	movs	r3, #0
 801558e:	eba8 080a 	sub.w	r8, r8, sl
 8015592:	930d      	str	r3, [sp, #52]	; 0x34
 8015594:	e7c2      	b.n	801551c <_dtoa_r+0x1d4>
 8015596:	2300      	movs	r3, #0
 8015598:	9308      	str	r3, [sp, #32]
 801559a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801559c:	2b00      	cmp	r3, #0
 801559e:	dc39      	bgt.n	8015614 <_dtoa_r+0x2cc>
 80155a0:	f04f 0901 	mov.w	r9, #1
 80155a4:	f8cd 9004 	str.w	r9, [sp, #4]
 80155a8:	464b      	mov	r3, r9
 80155aa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80155ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80155b0:	2200      	movs	r2, #0
 80155b2:	6042      	str	r2, [r0, #4]
 80155b4:	2204      	movs	r2, #4
 80155b6:	f102 0614 	add.w	r6, r2, #20
 80155ba:	429e      	cmp	r6, r3
 80155bc:	6841      	ldr	r1, [r0, #4]
 80155be:	d92f      	bls.n	8015620 <_dtoa_r+0x2d8>
 80155c0:	4620      	mov	r0, r4
 80155c2:	f001 f989 	bl	80168d8 <_Balloc>
 80155c6:	9000      	str	r0, [sp, #0]
 80155c8:	2800      	cmp	r0, #0
 80155ca:	d14b      	bne.n	8015664 <_dtoa_r+0x31c>
 80155cc:	4b24      	ldr	r3, [pc, #144]	; (8015660 <_dtoa_r+0x318>)
 80155ce:	4602      	mov	r2, r0
 80155d0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80155d4:	e6d1      	b.n	801537a <_dtoa_r+0x32>
 80155d6:	2301      	movs	r3, #1
 80155d8:	e7de      	b.n	8015598 <_dtoa_r+0x250>
 80155da:	2300      	movs	r3, #0
 80155dc:	9308      	str	r3, [sp, #32]
 80155de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80155e0:	eb0a 0903 	add.w	r9, sl, r3
 80155e4:	f109 0301 	add.w	r3, r9, #1
 80155e8:	2b01      	cmp	r3, #1
 80155ea:	9301      	str	r3, [sp, #4]
 80155ec:	bfb8      	it	lt
 80155ee:	2301      	movlt	r3, #1
 80155f0:	e7dd      	b.n	80155ae <_dtoa_r+0x266>
 80155f2:	2301      	movs	r3, #1
 80155f4:	e7f2      	b.n	80155dc <_dtoa_r+0x294>
 80155f6:	2501      	movs	r5, #1
 80155f8:	2300      	movs	r3, #0
 80155fa:	9305      	str	r3, [sp, #20]
 80155fc:	9508      	str	r5, [sp, #32]
 80155fe:	f04f 39ff 	mov.w	r9, #4294967295
 8015602:	2200      	movs	r2, #0
 8015604:	f8cd 9004 	str.w	r9, [sp, #4]
 8015608:	2312      	movs	r3, #18
 801560a:	9209      	str	r2, [sp, #36]	; 0x24
 801560c:	e7cf      	b.n	80155ae <_dtoa_r+0x266>
 801560e:	2301      	movs	r3, #1
 8015610:	9308      	str	r3, [sp, #32]
 8015612:	e7f4      	b.n	80155fe <_dtoa_r+0x2b6>
 8015614:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8015618:	f8cd 9004 	str.w	r9, [sp, #4]
 801561c:	464b      	mov	r3, r9
 801561e:	e7c6      	b.n	80155ae <_dtoa_r+0x266>
 8015620:	3101      	adds	r1, #1
 8015622:	6041      	str	r1, [r0, #4]
 8015624:	0052      	lsls	r2, r2, #1
 8015626:	e7c6      	b.n	80155b6 <_dtoa_r+0x26e>
 8015628:	636f4361 	.word	0x636f4361
 801562c:	3fd287a7 	.word	0x3fd287a7
 8015630:	8b60c8b3 	.word	0x8b60c8b3
 8015634:	3fc68a28 	.word	0x3fc68a28
 8015638:	509f79fb 	.word	0x509f79fb
 801563c:	3fd34413 	.word	0x3fd34413
 8015640:	0801a2e9 	.word	0x0801a2e9
 8015644:	0801a300 	.word	0x0801a300
 8015648:	7ff00000 	.word	0x7ff00000
 801564c:	0801a2e5 	.word	0x0801a2e5
 8015650:	0801a2dc 	.word	0x0801a2dc
 8015654:	0801a562 	.word	0x0801a562
 8015658:	3ff80000 	.word	0x3ff80000
 801565c:	0801a478 	.word	0x0801a478
 8015660:	0801a35f 	.word	0x0801a35f
 8015664:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015666:	9a00      	ldr	r2, [sp, #0]
 8015668:	601a      	str	r2, [r3, #0]
 801566a:	9b01      	ldr	r3, [sp, #4]
 801566c:	2b0e      	cmp	r3, #14
 801566e:	f200 80ad 	bhi.w	80157cc <_dtoa_r+0x484>
 8015672:	2d00      	cmp	r5, #0
 8015674:	f000 80aa 	beq.w	80157cc <_dtoa_r+0x484>
 8015678:	f1ba 0f00 	cmp.w	sl, #0
 801567c:	dd36      	ble.n	80156ec <_dtoa_r+0x3a4>
 801567e:	4ac3      	ldr	r2, [pc, #780]	; (801598c <_dtoa_r+0x644>)
 8015680:	f00a 030f 	and.w	r3, sl, #15
 8015684:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8015688:	ed93 7b00 	vldr	d7, [r3]
 801568c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8015690:	ea4f 172a 	mov.w	r7, sl, asr #4
 8015694:	eeb0 8a47 	vmov.f32	s16, s14
 8015698:	eef0 8a67 	vmov.f32	s17, s15
 801569c:	d016      	beq.n	80156cc <_dtoa_r+0x384>
 801569e:	4bbc      	ldr	r3, [pc, #752]	; (8015990 <_dtoa_r+0x648>)
 80156a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80156a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80156a8:	f7eb f8f0 	bl	800088c <__aeabi_ddiv>
 80156ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80156b0:	f007 070f 	and.w	r7, r7, #15
 80156b4:	2503      	movs	r5, #3
 80156b6:	4eb6      	ldr	r6, [pc, #728]	; (8015990 <_dtoa_r+0x648>)
 80156b8:	b957      	cbnz	r7, 80156d0 <_dtoa_r+0x388>
 80156ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80156be:	ec53 2b18 	vmov	r2, r3, d8
 80156c2:	f7eb f8e3 	bl	800088c <__aeabi_ddiv>
 80156c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80156ca:	e029      	b.n	8015720 <_dtoa_r+0x3d8>
 80156cc:	2502      	movs	r5, #2
 80156ce:	e7f2      	b.n	80156b6 <_dtoa_r+0x36e>
 80156d0:	07f9      	lsls	r1, r7, #31
 80156d2:	d508      	bpl.n	80156e6 <_dtoa_r+0x39e>
 80156d4:	ec51 0b18 	vmov	r0, r1, d8
 80156d8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80156dc:	f7ea ffac 	bl	8000638 <__aeabi_dmul>
 80156e0:	ec41 0b18 	vmov	d8, r0, r1
 80156e4:	3501      	adds	r5, #1
 80156e6:	107f      	asrs	r7, r7, #1
 80156e8:	3608      	adds	r6, #8
 80156ea:	e7e5      	b.n	80156b8 <_dtoa_r+0x370>
 80156ec:	f000 80a6 	beq.w	801583c <_dtoa_r+0x4f4>
 80156f0:	f1ca 0600 	rsb	r6, sl, #0
 80156f4:	4ba5      	ldr	r3, [pc, #660]	; (801598c <_dtoa_r+0x644>)
 80156f6:	4fa6      	ldr	r7, [pc, #664]	; (8015990 <_dtoa_r+0x648>)
 80156f8:	f006 020f 	and.w	r2, r6, #15
 80156fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015704:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015708:	f7ea ff96 	bl	8000638 <__aeabi_dmul>
 801570c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015710:	1136      	asrs	r6, r6, #4
 8015712:	2300      	movs	r3, #0
 8015714:	2502      	movs	r5, #2
 8015716:	2e00      	cmp	r6, #0
 8015718:	f040 8085 	bne.w	8015826 <_dtoa_r+0x4de>
 801571c:	2b00      	cmp	r3, #0
 801571e:	d1d2      	bne.n	80156c6 <_dtoa_r+0x37e>
 8015720:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015722:	2b00      	cmp	r3, #0
 8015724:	f000 808c 	beq.w	8015840 <_dtoa_r+0x4f8>
 8015728:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801572c:	4b99      	ldr	r3, [pc, #612]	; (8015994 <_dtoa_r+0x64c>)
 801572e:	2200      	movs	r2, #0
 8015730:	4630      	mov	r0, r6
 8015732:	4639      	mov	r1, r7
 8015734:	f7eb f9f2 	bl	8000b1c <__aeabi_dcmplt>
 8015738:	2800      	cmp	r0, #0
 801573a:	f000 8081 	beq.w	8015840 <_dtoa_r+0x4f8>
 801573e:	9b01      	ldr	r3, [sp, #4]
 8015740:	2b00      	cmp	r3, #0
 8015742:	d07d      	beq.n	8015840 <_dtoa_r+0x4f8>
 8015744:	f1b9 0f00 	cmp.w	r9, #0
 8015748:	dd3c      	ble.n	80157c4 <_dtoa_r+0x47c>
 801574a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801574e:	9307      	str	r3, [sp, #28]
 8015750:	2200      	movs	r2, #0
 8015752:	4b91      	ldr	r3, [pc, #580]	; (8015998 <_dtoa_r+0x650>)
 8015754:	4630      	mov	r0, r6
 8015756:	4639      	mov	r1, r7
 8015758:	f7ea ff6e 	bl	8000638 <__aeabi_dmul>
 801575c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015760:	3501      	adds	r5, #1
 8015762:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8015766:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801576a:	4628      	mov	r0, r5
 801576c:	f7ea fefa 	bl	8000564 <__aeabi_i2d>
 8015770:	4632      	mov	r2, r6
 8015772:	463b      	mov	r3, r7
 8015774:	f7ea ff60 	bl	8000638 <__aeabi_dmul>
 8015778:	4b88      	ldr	r3, [pc, #544]	; (801599c <_dtoa_r+0x654>)
 801577a:	2200      	movs	r2, #0
 801577c:	f7ea fda6 	bl	80002cc <__adddf3>
 8015780:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8015784:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015788:	9303      	str	r3, [sp, #12]
 801578a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801578c:	2b00      	cmp	r3, #0
 801578e:	d15c      	bne.n	801584a <_dtoa_r+0x502>
 8015790:	4b83      	ldr	r3, [pc, #524]	; (80159a0 <_dtoa_r+0x658>)
 8015792:	2200      	movs	r2, #0
 8015794:	4630      	mov	r0, r6
 8015796:	4639      	mov	r1, r7
 8015798:	f7ea fd96 	bl	80002c8 <__aeabi_dsub>
 801579c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80157a0:	4606      	mov	r6, r0
 80157a2:	460f      	mov	r7, r1
 80157a4:	f7eb f9d8 	bl	8000b58 <__aeabi_dcmpgt>
 80157a8:	2800      	cmp	r0, #0
 80157aa:	f040 8296 	bne.w	8015cda <_dtoa_r+0x992>
 80157ae:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80157b2:	4630      	mov	r0, r6
 80157b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80157b8:	4639      	mov	r1, r7
 80157ba:	f7eb f9af 	bl	8000b1c <__aeabi_dcmplt>
 80157be:	2800      	cmp	r0, #0
 80157c0:	f040 8288 	bne.w	8015cd4 <_dtoa_r+0x98c>
 80157c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80157c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80157cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	f2c0 8158 	blt.w	8015a84 <_dtoa_r+0x73c>
 80157d4:	f1ba 0f0e 	cmp.w	sl, #14
 80157d8:	f300 8154 	bgt.w	8015a84 <_dtoa_r+0x73c>
 80157dc:	4b6b      	ldr	r3, [pc, #428]	; (801598c <_dtoa_r+0x644>)
 80157de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80157e2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80157e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	f280 80e3 	bge.w	80159b4 <_dtoa_r+0x66c>
 80157ee:	9b01      	ldr	r3, [sp, #4]
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	f300 80df 	bgt.w	80159b4 <_dtoa_r+0x66c>
 80157f6:	f040 826d 	bne.w	8015cd4 <_dtoa_r+0x98c>
 80157fa:	4b69      	ldr	r3, [pc, #420]	; (80159a0 <_dtoa_r+0x658>)
 80157fc:	2200      	movs	r2, #0
 80157fe:	4640      	mov	r0, r8
 8015800:	4649      	mov	r1, r9
 8015802:	f7ea ff19 	bl	8000638 <__aeabi_dmul>
 8015806:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801580a:	f7eb f99b 	bl	8000b44 <__aeabi_dcmpge>
 801580e:	9e01      	ldr	r6, [sp, #4]
 8015810:	4637      	mov	r7, r6
 8015812:	2800      	cmp	r0, #0
 8015814:	f040 8243 	bne.w	8015c9e <_dtoa_r+0x956>
 8015818:	9d00      	ldr	r5, [sp, #0]
 801581a:	2331      	movs	r3, #49	; 0x31
 801581c:	f805 3b01 	strb.w	r3, [r5], #1
 8015820:	f10a 0a01 	add.w	sl, sl, #1
 8015824:	e23f      	b.n	8015ca6 <_dtoa_r+0x95e>
 8015826:	07f2      	lsls	r2, r6, #31
 8015828:	d505      	bpl.n	8015836 <_dtoa_r+0x4ee>
 801582a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801582e:	f7ea ff03 	bl	8000638 <__aeabi_dmul>
 8015832:	3501      	adds	r5, #1
 8015834:	2301      	movs	r3, #1
 8015836:	1076      	asrs	r6, r6, #1
 8015838:	3708      	adds	r7, #8
 801583a:	e76c      	b.n	8015716 <_dtoa_r+0x3ce>
 801583c:	2502      	movs	r5, #2
 801583e:	e76f      	b.n	8015720 <_dtoa_r+0x3d8>
 8015840:	9b01      	ldr	r3, [sp, #4]
 8015842:	f8cd a01c 	str.w	sl, [sp, #28]
 8015846:	930c      	str	r3, [sp, #48]	; 0x30
 8015848:	e78d      	b.n	8015766 <_dtoa_r+0x41e>
 801584a:	9900      	ldr	r1, [sp, #0]
 801584c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801584e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015850:	4b4e      	ldr	r3, [pc, #312]	; (801598c <_dtoa_r+0x644>)
 8015852:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015856:	4401      	add	r1, r0
 8015858:	9102      	str	r1, [sp, #8]
 801585a:	9908      	ldr	r1, [sp, #32]
 801585c:	eeb0 8a47 	vmov.f32	s16, s14
 8015860:	eef0 8a67 	vmov.f32	s17, s15
 8015864:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015868:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801586c:	2900      	cmp	r1, #0
 801586e:	d045      	beq.n	80158fc <_dtoa_r+0x5b4>
 8015870:	494c      	ldr	r1, [pc, #304]	; (80159a4 <_dtoa_r+0x65c>)
 8015872:	2000      	movs	r0, #0
 8015874:	f7eb f80a 	bl	800088c <__aeabi_ddiv>
 8015878:	ec53 2b18 	vmov	r2, r3, d8
 801587c:	f7ea fd24 	bl	80002c8 <__aeabi_dsub>
 8015880:	9d00      	ldr	r5, [sp, #0]
 8015882:	ec41 0b18 	vmov	d8, r0, r1
 8015886:	4639      	mov	r1, r7
 8015888:	4630      	mov	r0, r6
 801588a:	f7eb f985 	bl	8000b98 <__aeabi_d2iz>
 801588e:	900c      	str	r0, [sp, #48]	; 0x30
 8015890:	f7ea fe68 	bl	8000564 <__aeabi_i2d>
 8015894:	4602      	mov	r2, r0
 8015896:	460b      	mov	r3, r1
 8015898:	4630      	mov	r0, r6
 801589a:	4639      	mov	r1, r7
 801589c:	f7ea fd14 	bl	80002c8 <__aeabi_dsub>
 80158a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80158a2:	3330      	adds	r3, #48	; 0x30
 80158a4:	f805 3b01 	strb.w	r3, [r5], #1
 80158a8:	ec53 2b18 	vmov	r2, r3, d8
 80158ac:	4606      	mov	r6, r0
 80158ae:	460f      	mov	r7, r1
 80158b0:	f7eb f934 	bl	8000b1c <__aeabi_dcmplt>
 80158b4:	2800      	cmp	r0, #0
 80158b6:	d165      	bne.n	8015984 <_dtoa_r+0x63c>
 80158b8:	4632      	mov	r2, r6
 80158ba:	463b      	mov	r3, r7
 80158bc:	4935      	ldr	r1, [pc, #212]	; (8015994 <_dtoa_r+0x64c>)
 80158be:	2000      	movs	r0, #0
 80158c0:	f7ea fd02 	bl	80002c8 <__aeabi_dsub>
 80158c4:	ec53 2b18 	vmov	r2, r3, d8
 80158c8:	f7eb f928 	bl	8000b1c <__aeabi_dcmplt>
 80158cc:	2800      	cmp	r0, #0
 80158ce:	f040 80b9 	bne.w	8015a44 <_dtoa_r+0x6fc>
 80158d2:	9b02      	ldr	r3, [sp, #8]
 80158d4:	429d      	cmp	r5, r3
 80158d6:	f43f af75 	beq.w	80157c4 <_dtoa_r+0x47c>
 80158da:	4b2f      	ldr	r3, [pc, #188]	; (8015998 <_dtoa_r+0x650>)
 80158dc:	ec51 0b18 	vmov	r0, r1, d8
 80158e0:	2200      	movs	r2, #0
 80158e2:	f7ea fea9 	bl	8000638 <__aeabi_dmul>
 80158e6:	4b2c      	ldr	r3, [pc, #176]	; (8015998 <_dtoa_r+0x650>)
 80158e8:	ec41 0b18 	vmov	d8, r0, r1
 80158ec:	2200      	movs	r2, #0
 80158ee:	4630      	mov	r0, r6
 80158f0:	4639      	mov	r1, r7
 80158f2:	f7ea fea1 	bl	8000638 <__aeabi_dmul>
 80158f6:	4606      	mov	r6, r0
 80158f8:	460f      	mov	r7, r1
 80158fa:	e7c4      	b.n	8015886 <_dtoa_r+0x53e>
 80158fc:	ec51 0b17 	vmov	r0, r1, d7
 8015900:	f7ea fe9a 	bl	8000638 <__aeabi_dmul>
 8015904:	9b02      	ldr	r3, [sp, #8]
 8015906:	9d00      	ldr	r5, [sp, #0]
 8015908:	930c      	str	r3, [sp, #48]	; 0x30
 801590a:	ec41 0b18 	vmov	d8, r0, r1
 801590e:	4639      	mov	r1, r7
 8015910:	4630      	mov	r0, r6
 8015912:	f7eb f941 	bl	8000b98 <__aeabi_d2iz>
 8015916:	9011      	str	r0, [sp, #68]	; 0x44
 8015918:	f7ea fe24 	bl	8000564 <__aeabi_i2d>
 801591c:	4602      	mov	r2, r0
 801591e:	460b      	mov	r3, r1
 8015920:	4630      	mov	r0, r6
 8015922:	4639      	mov	r1, r7
 8015924:	f7ea fcd0 	bl	80002c8 <__aeabi_dsub>
 8015928:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801592a:	3330      	adds	r3, #48	; 0x30
 801592c:	f805 3b01 	strb.w	r3, [r5], #1
 8015930:	9b02      	ldr	r3, [sp, #8]
 8015932:	429d      	cmp	r5, r3
 8015934:	4606      	mov	r6, r0
 8015936:	460f      	mov	r7, r1
 8015938:	f04f 0200 	mov.w	r2, #0
 801593c:	d134      	bne.n	80159a8 <_dtoa_r+0x660>
 801593e:	4b19      	ldr	r3, [pc, #100]	; (80159a4 <_dtoa_r+0x65c>)
 8015940:	ec51 0b18 	vmov	r0, r1, d8
 8015944:	f7ea fcc2 	bl	80002cc <__adddf3>
 8015948:	4602      	mov	r2, r0
 801594a:	460b      	mov	r3, r1
 801594c:	4630      	mov	r0, r6
 801594e:	4639      	mov	r1, r7
 8015950:	f7eb f902 	bl	8000b58 <__aeabi_dcmpgt>
 8015954:	2800      	cmp	r0, #0
 8015956:	d175      	bne.n	8015a44 <_dtoa_r+0x6fc>
 8015958:	ec53 2b18 	vmov	r2, r3, d8
 801595c:	4911      	ldr	r1, [pc, #68]	; (80159a4 <_dtoa_r+0x65c>)
 801595e:	2000      	movs	r0, #0
 8015960:	f7ea fcb2 	bl	80002c8 <__aeabi_dsub>
 8015964:	4602      	mov	r2, r0
 8015966:	460b      	mov	r3, r1
 8015968:	4630      	mov	r0, r6
 801596a:	4639      	mov	r1, r7
 801596c:	f7eb f8d6 	bl	8000b1c <__aeabi_dcmplt>
 8015970:	2800      	cmp	r0, #0
 8015972:	f43f af27 	beq.w	80157c4 <_dtoa_r+0x47c>
 8015976:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015978:	1e6b      	subs	r3, r5, #1
 801597a:	930c      	str	r3, [sp, #48]	; 0x30
 801597c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015980:	2b30      	cmp	r3, #48	; 0x30
 8015982:	d0f8      	beq.n	8015976 <_dtoa_r+0x62e>
 8015984:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8015988:	e04a      	b.n	8015a20 <_dtoa_r+0x6d8>
 801598a:	bf00      	nop
 801598c:	0801a478 	.word	0x0801a478
 8015990:	0801a450 	.word	0x0801a450
 8015994:	3ff00000 	.word	0x3ff00000
 8015998:	40240000 	.word	0x40240000
 801599c:	401c0000 	.word	0x401c0000
 80159a0:	40140000 	.word	0x40140000
 80159a4:	3fe00000 	.word	0x3fe00000
 80159a8:	4baf      	ldr	r3, [pc, #700]	; (8015c68 <_dtoa_r+0x920>)
 80159aa:	f7ea fe45 	bl	8000638 <__aeabi_dmul>
 80159ae:	4606      	mov	r6, r0
 80159b0:	460f      	mov	r7, r1
 80159b2:	e7ac      	b.n	801590e <_dtoa_r+0x5c6>
 80159b4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80159b8:	9d00      	ldr	r5, [sp, #0]
 80159ba:	4642      	mov	r2, r8
 80159bc:	464b      	mov	r3, r9
 80159be:	4630      	mov	r0, r6
 80159c0:	4639      	mov	r1, r7
 80159c2:	f7ea ff63 	bl	800088c <__aeabi_ddiv>
 80159c6:	f7eb f8e7 	bl	8000b98 <__aeabi_d2iz>
 80159ca:	9002      	str	r0, [sp, #8]
 80159cc:	f7ea fdca 	bl	8000564 <__aeabi_i2d>
 80159d0:	4642      	mov	r2, r8
 80159d2:	464b      	mov	r3, r9
 80159d4:	f7ea fe30 	bl	8000638 <__aeabi_dmul>
 80159d8:	4602      	mov	r2, r0
 80159da:	460b      	mov	r3, r1
 80159dc:	4630      	mov	r0, r6
 80159de:	4639      	mov	r1, r7
 80159e0:	f7ea fc72 	bl	80002c8 <__aeabi_dsub>
 80159e4:	9e02      	ldr	r6, [sp, #8]
 80159e6:	9f01      	ldr	r7, [sp, #4]
 80159e8:	3630      	adds	r6, #48	; 0x30
 80159ea:	f805 6b01 	strb.w	r6, [r5], #1
 80159ee:	9e00      	ldr	r6, [sp, #0]
 80159f0:	1bae      	subs	r6, r5, r6
 80159f2:	42b7      	cmp	r7, r6
 80159f4:	4602      	mov	r2, r0
 80159f6:	460b      	mov	r3, r1
 80159f8:	d137      	bne.n	8015a6a <_dtoa_r+0x722>
 80159fa:	f7ea fc67 	bl	80002cc <__adddf3>
 80159fe:	4642      	mov	r2, r8
 8015a00:	464b      	mov	r3, r9
 8015a02:	4606      	mov	r6, r0
 8015a04:	460f      	mov	r7, r1
 8015a06:	f7eb f8a7 	bl	8000b58 <__aeabi_dcmpgt>
 8015a0a:	b9c8      	cbnz	r0, 8015a40 <_dtoa_r+0x6f8>
 8015a0c:	4642      	mov	r2, r8
 8015a0e:	464b      	mov	r3, r9
 8015a10:	4630      	mov	r0, r6
 8015a12:	4639      	mov	r1, r7
 8015a14:	f7eb f878 	bl	8000b08 <__aeabi_dcmpeq>
 8015a18:	b110      	cbz	r0, 8015a20 <_dtoa_r+0x6d8>
 8015a1a:	9b02      	ldr	r3, [sp, #8]
 8015a1c:	07d9      	lsls	r1, r3, #31
 8015a1e:	d40f      	bmi.n	8015a40 <_dtoa_r+0x6f8>
 8015a20:	4620      	mov	r0, r4
 8015a22:	4659      	mov	r1, fp
 8015a24:	f000 ff98 	bl	8016958 <_Bfree>
 8015a28:	2300      	movs	r3, #0
 8015a2a:	702b      	strb	r3, [r5, #0]
 8015a2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015a2e:	f10a 0001 	add.w	r0, sl, #1
 8015a32:	6018      	str	r0, [r3, #0]
 8015a34:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	f43f acd8 	beq.w	80153ec <_dtoa_r+0xa4>
 8015a3c:	601d      	str	r5, [r3, #0]
 8015a3e:	e4d5      	b.n	80153ec <_dtoa_r+0xa4>
 8015a40:	f8cd a01c 	str.w	sl, [sp, #28]
 8015a44:	462b      	mov	r3, r5
 8015a46:	461d      	mov	r5, r3
 8015a48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015a4c:	2a39      	cmp	r2, #57	; 0x39
 8015a4e:	d108      	bne.n	8015a62 <_dtoa_r+0x71a>
 8015a50:	9a00      	ldr	r2, [sp, #0]
 8015a52:	429a      	cmp	r2, r3
 8015a54:	d1f7      	bne.n	8015a46 <_dtoa_r+0x6fe>
 8015a56:	9a07      	ldr	r2, [sp, #28]
 8015a58:	9900      	ldr	r1, [sp, #0]
 8015a5a:	3201      	adds	r2, #1
 8015a5c:	9207      	str	r2, [sp, #28]
 8015a5e:	2230      	movs	r2, #48	; 0x30
 8015a60:	700a      	strb	r2, [r1, #0]
 8015a62:	781a      	ldrb	r2, [r3, #0]
 8015a64:	3201      	adds	r2, #1
 8015a66:	701a      	strb	r2, [r3, #0]
 8015a68:	e78c      	b.n	8015984 <_dtoa_r+0x63c>
 8015a6a:	4b7f      	ldr	r3, [pc, #508]	; (8015c68 <_dtoa_r+0x920>)
 8015a6c:	2200      	movs	r2, #0
 8015a6e:	f7ea fde3 	bl	8000638 <__aeabi_dmul>
 8015a72:	2200      	movs	r2, #0
 8015a74:	2300      	movs	r3, #0
 8015a76:	4606      	mov	r6, r0
 8015a78:	460f      	mov	r7, r1
 8015a7a:	f7eb f845 	bl	8000b08 <__aeabi_dcmpeq>
 8015a7e:	2800      	cmp	r0, #0
 8015a80:	d09b      	beq.n	80159ba <_dtoa_r+0x672>
 8015a82:	e7cd      	b.n	8015a20 <_dtoa_r+0x6d8>
 8015a84:	9a08      	ldr	r2, [sp, #32]
 8015a86:	2a00      	cmp	r2, #0
 8015a88:	f000 80c4 	beq.w	8015c14 <_dtoa_r+0x8cc>
 8015a8c:	9a05      	ldr	r2, [sp, #20]
 8015a8e:	2a01      	cmp	r2, #1
 8015a90:	f300 80a8 	bgt.w	8015be4 <_dtoa_r+0x89c>
 8015a94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015a96:	2a00      	cmp	r2, #0
 8015a98:	f000 80a0 	beq.w	8015bdc <_dtoa_r+0x894>
 8015a9c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015aa0:	9e06      	ldr	r6, [sp, #24]
 8015aa2:	4645      	mov	r5, r8
 8015aa4:	9a04      	ldr	r2, [sp, #16]
 8015aa6:	2101      	movs	r1, #1
 8015aa8:	441a      	add	r2, r3
 8015aaa:	4620      	mov	r0, r4
 8015aac:	4498      	add	r8, r3
 8015aae:	9204      	str	r2, [sp, #16]
 8015ab0:	f001 f858 	bl	8016b64 <__i2b>
 8015ab4:	4607      	mov	r7, r0
 8015ab6:	2d00      	cmp	r5, #0
 8015ab8:	dd0b      	ble.n	8015ad2 <_dtoa_r+0x78a>
 8015aba:	9b04      	ldr	r3, [sp, #16]
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	dd08      	ble.n	8015ad2 <_dtoa_r+0x78a>
 8015ac0:	42ab      	cmp	r3, r5
 8015ac2:	9a04      	ldr	r2, [sp, #16]
 8015ac4:	bfa8      	it	ge
 8015ac6:	462b      	movge	r3, r5
 8015ac8:	eba8 0803 	sub.w	r8, r8, r3
 8015acc:	1aed      	subs	r5, r5, r3
 8015ace:	1ad3      	subs	r3, r2, r3
 8015ad0:	9304      	str	r3, [sp, #16]
 8015ad2:	9b06      	ldr	r3, [sp, #24]
 8015ad4:	b1fb      	cbz	r3, 8015b16 <_dtoa_r+0x7ce>
 8015ad6:	9b08      	ldr	r3, [sp, #32]
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	f000 809f 	beq.w	8015c1c <_dtoa_r+0x8d4>
 8015ade:	2e00      	cmp	r6, #0
 8015ae0:	dd11      	ble.n	8015b06 <_dtoa_r+0x7be>
 8015ae2:	4639      	mov	r1, r7
 8015ae4:	4632      	mov	r2, r6
 8015ae6:	4620      	mov	r0, r4
 8015ae8:	f001 f8f8 	bl	8016cdc <__pow5mult>
 8015aec:	465a      	mov	r2, fp
 8015aee:	4601      	mov	r1, r0
 8015af0:	4607      	mov	r7, r0
 8015af2:	4620      	mov	r0, r4
 8015af4:	f001 f84c 	bl	8016b90 <__multiply>
 8015af8:	4659      	mov	r1, fp
 8015afa:	9007      	str	r0, [sp, #28]
 8015afc:	4620      	mov	r0, r4
 8015afe:	f000 ff2b 	bl	8016958 <_Bfree>
 8015b02:	9b07      	ldr	r3, [sp, #28]
 8015b04:	469b      	mov	fp, r3
 8015b06:	9b06      	ldr	r3, [sp, #24]
 8015b08:	1b9a      	subs	r2, r3, r6
 8015b0a:	d004      	beq.n	8015b16 <_dtoa_r+0x7ce>
 8015b0c:	4659      	mov	r1, fp
 8015b0e:	4620      	mov	r0, r4
 8015b10:	f001 f8e4 	bl	8016cdc <__pow5mult>
 8015b14:	4683      	mov	fp, r0
 8015b16:	2101      	movs	r1, #1
 8015b18:	4620      	mov	r0, r4
 8015b1a:	f001 f823 	bl	8016b64 <__i2b>
 8015b1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	4606      	mov	r6, r0
 8015b24:	dd7c      	ble.n	8015c20 <_dtoa_r+0x8d8>
 8015b26:	461a      	mov	r2, r3
 8015b28:	4601      	mov	r1, r0
 8015b2a:	4620      	mov	r0, r4
 8015b2c:	f001 f8d6 	bl	8016cdc <__pow5mult>
 8015b30:	9b05      	ldr	r3, [sp, #20]
 8015b32:	2b01      	cmp	r3, #1
 8015b34:	4606      	mov	r6, r0
 8015b36:	dd76      	ble.n	8015c26 <_dtoa_r+0x8de>
 8015b38:	2300      	movs	r3, #0
 8015b3a:	9306      	str	r3, [sp, #24]
 8015b3c:	6933      	ldr	r3, [r6, #16]
 8015b3e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015b42:	6918      	ldr	r0, [r3, #16]
 8015b44:	f000 ffbe 	bl	8016ac4 <__hi0bits>
 8015b48:	f1c0 0020 	rsb	r0, r0, #32
 8015b4c:	9b04      	ldr	r3, [sp, #16]
 8015b4e:	4418      	add	r0, r3
 8015b50:	f010 001f 	ands.w	r0, r0, #31
 8015b54:	f000 8086 	beq.w	8015c64 <_dtoa_r+0x91c>
 8015b58:	f1c0 0320 	rsb	r3, r0, #32
 8015b5c:	2b04      	cmp	r3, #4
 8015b5e:	dd7f      	ble.n	8015c60 <_dtoa_r+0x918>
 8015b60:	f1c0 001c 	rsb	r0, r0, #28
 8015b64:	9b04      	ldr	r3, [sp, #16]
 8015b66:	4403      	add	r3, r0
 8015b68:	4480      	add	r8, r0
 8015b6a:	4405      	add	r5, r0
 8015b6c:	9304      	str	r3, [sp, #16]
 8015b6e:	f1b8 0f00 	cmp.w	r8, #0
 8015b72:	dd05      	ble.n	8015b80 <_dtoa_r+0x838>
 8015b74:	4659      	mov	r1, fp
 8015b76:	4642      	mov	r2, r8
 8015b78:	4620      	mov	r0, r4
 8015b7a:	f001 f909 	bl	8016d90 <__lshift>
 8015b7e:	4683      	mov	fp, r0
 8015b80:	9b04      	ldr	r3, [sp, #16]
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	dd05      	ble.n	8015b92 <_dtoa_r+0x84a>
 8015b86:	4631      	mov	r1, r6
 8015b88:	461a      	mov	r2, r3
 8015b8a:	4620      	mov	r0, r4
 8015b8c:	f001 f900 	bl	8016d90 <__lshift>
 8015b90:	4606      	mov	r6, r0
 8015b92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	d069      	beq.n	8015c6c <_dtoa_r+0x924>
 8015b98:	4631      	mov	r1, r6
 8015b9a:	4658      	mov	r0, fp
 8015b9c:	f001 f964 	bl	8016e68 <__mcmp>
 8015ba0:	2800      	cmp	r0, #0
 8015ba2:	da63      	bge.n	8015c6c <_dtoa_r+0x924>
 8015ba4:	2300      	movs	r3, #0
 8015ba6:	4659      	mov	r1, fp
 8015ba8:	220a      	movs	r2, #10
 8015baa:	4620      	mov	r0, r4
 8015bac:	f000 fef6 	bl	801699c <__multadd>
 8015bb0:	9b08      	ldr	r3, [sp, #32]
 8015bb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015bb6:	4683      	mov	fp, r0
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	f000 818f 	beq.w	8015edc <_dtoa_r+0xb94>
 8015bbe:	4639      	mov	r1, r7
 8015bc0:	2300      	movs	r3, #0
 8015bc2:	220a      	movs	r2, #10
 8015bc4:	4620      	mov	r0, r4
 8015bc6:	f000 fee9 	bl	801699c <__multadd>
 8015bca:	f1b9 0f00 	cmp.w	r9, #0
 8015bce:	4607      	mov	r7, r0
 8015bd0:	f300 808e 	bgt.w	8015cf0 <_dtoa_r+0x9a8>
 8015bd4:	9b05      	ldr	r3, [sp, #20]
 8015bd6:	2b02      	cmp	r3, #2
 8015bd8:	dc50      	bgt.n	8015c7c <_dtoa_r+0x934>
 8015bda:	e089      	b.n	8015cf0 <_dtoa_r+0x9a8>
 8015bdc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015bde:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8015be2:	e75d      	b.n	8015aa0 <_dtoa_r+0x758>
 8015be4:	9b01      	ldr	r3, [sp, #4]
 8015be6:	1e5e      	subs	r6, r3, #1
 8015be8:	9b06      	ldr	r3, [sp, #24]
 8015bea:	42b3      	cmp	r3, r6
 8015bec:	bfbf      	itttt	lt
 8015bee:	9b06      	ldrlt	r3, [sp, #24]
 8015bf0:	9606      	strlt	r6, [sp, #24]
 8015bf2:	1af2      	sublt	r2, r6, r3
 8015bf4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8015bf6:	bfb6      	itet	lt
 8015bf8:	189b      	addlt	r3, r3, r2
 8015bfa:	1b9e      	subge	r6, r3, r6
 8015bfc:	930d      	strlt	r3, [sp, #52]	; 0x34
 8015bfe:	9b01      	ldr	r3, [sp, #4]
 8015c00:	bfb8      	it	lt
 8015c02:	2600      	movlt	r6, #0
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	bfb5      	itete	lt
 8015c08:	eba8 0503 	sublt.w	r5, r8, r3
 8015c0c:	9b01      	ldrge	r3, [sp, #4]
 8015c0e:	2300      	movlt	r3, #0
 8015c10:	4645      	movge	r5, r8
 8015c12:	e747      	b.n	8015aa4 <_dtoa_r+0x75c>
 8015c14:	9e06      	ldr	r6, [sp, #24]
 8015c16:	9f08      	ldr	r7, [sp, #32]
 8015c18:	4645      	mov	r5, r8
 8015c1a:	e74c      	b.n	8015ab6 <_dtoa_r+0x76e>
 8015c1c:	9a06      	ldr	r2, [sp, #24]
 8015c1e:	e775      	b.n	8015b0c <_dtoa_r+0x7c4>
 8015c20:	9b05      	ldr	r3, [sp, #20]
 8015c22:	2b01      	cmp	r3, #1
 8015c24:	dc18      	bgt.n	8015c58 <_dtoa_r+0x910>
 8015c26:	9b02      	ldr	r3, [sp, #8]
 8015c28:	b9b3      	cbnz	r3, 8015c58 <_dtoa_r+0x910>
 8015c2a:	9b03      	ldr	r3, [sp, #12]
 8015c2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015c30:	b9a3      	cbnz	r3, 8015c5c <_dtoa_r+0x914>
 8015c32:	9b03      	ldr	r3, [sp, #12]
 8015c34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015c38:	0d1b      	lsrs	r3, r3, #20
 8015c3a:	051b      	lsls	r3, r3, #20
 8015c3c:	b12b      	cbz	r3, 8015c4a <_dtoa_r+0x902>
 8015c3e:	9b04      	ldr	r3, [sp, #16]
 8015c40:	3301      	adds	r3, #1
 8015c42:	9304      	str	r3, [sp, #16]
 8015c44:	f108 0801 	add.w	r8, r8, #1
 8015c48:	2301      	movs	r3, #1
 8015c4a:	9306      	str	r3, [sp, #24]
 8015c4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	f47f af74 	bne.w	8015b3c <_dtoa_r+0x7f4>
 8015c54:	2001      	movs	r0, #1
 8015c56:	e779      	b.n	8015b4c <_dtoa_r+0x804>
 8015c58:	2300      	movs	r3, #0
 8015c5a:	e7f6      	b.n	8015c4a <_dtoa_r+0x902>
 8015c5c:	9b02      	ldr	r3, [sp, #8]
 8015c5e:	e7f4      	b.n	8015c4a <_dtoa_r+0x902>
 8015c60:	d085      	beq.n	8015b6e <_dtoa_r+0x826>
 8015c62:	4618      	mov	r0, r3
 8015c64:	301c      	adds	r0, #28
 8015c66:	e77d      	b.n	8015b64 <_dtoa_r+0x81c>
 8015c68:	40240000 	.word	0x40240000
 8015c6c:	9b01      	ldr	r3, [sp, #4]
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	dc38      	bgt.n	8015ce4 <_dtoa_r+0x99c>
 8015c72:	9b05      	ldr	r3, [sp, #20]
 8015c74:	2b02      	cmp	r3, #2
 8015c76:	dd35      	ble.n	8015ce4 <_dtoa_r+0x99c>
 8015c78:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8015c7c:	f1b9 0f00 	cmp.w	r9, #0
 8015c80:	d10d      	bne.n	8015c9e <_dtoa_r+0x956>
 8015c82:	4631      	mov	r1, r6
 8015c84:	464b      	mov	r3, r9
 8015c86:	2205      	movs	r2, #5
 8015c88:	4620      	mov	r0, r4
 8015c8a:	f000 fe87 	bl	801699c <__multadd>
 8015c8e:	4601      	mov	r1, r0
 8015c90:	4606      	mov	r6, r0
 8015c92:	4658      	mov	r0, fp
 8015c94:	f001 f8e8 	bl	8016e68 <__mcmp>
 8015c98:	2800      	cmp	r0, #0
 8015c9a:	f73f adbd 	bgt.w	8015818 <_dtoa_r+0x4d0>
 8015c9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ca0:	9d00      	ldr	r5, [sp, #0]
 8015ca2:	ea6f 0a03 	mvn.w	sl, r3
 8015ca6:	f04f 0800 	mov.w	r8, #0
 8015caa:	4631      	mov	r1, r6
 8015cac:	4620      	mov	r0, r4
 8015cae:	f000 fe53 	bl	8016958 <_Bfree>
 8015cb2:	2f00      	cmp	r7, #0
 8015cb4:	f43f aeb4 	beq.w	8015a20 <_dtoa_r+0x6d8>
 8015cb8:	f1b8 0f00 	cmp.w	r8, #0
 8015cbc:	d005      	beq.n	8015cca <_dtoa_r+0x982>
 8015cbe:	45b8      	cmp	r8, r7
 8015cc0:	d003      	beq.n	8015cca <_dtoa_r+0x982>
 8015cc2:	4641      	mov	r1, r8
 8015cc4:	4620      	mov	r0, r4
 8015cc6:	f000 fe47 	bl	8016958 <_Bfree>
 8015cca:	4639      	mov	r1, r7
 8015ccc:	4620      	mov	r0, r4
 8015cce:	f000 fe43 	bl	8016958 <_Bfree>
 8015cd2:	e6a5      	b.n	8015a20 <_dtoa_r+0x6d8>
 8015cd4:	2600      	movs	r6, #0
 8015cd6:	4637      	mov	r7, r6
 8015cd8:	e7e1      	b.n	8015c9e <_dtoa_r+0x956>
 8015cda:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8015cdc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8015ce0:	4637      	mov	r7, r6
 8015ce2:	e599      	b.n	8015818 <_dtoa_r+0x4d0>
 8015ce4:	9b08      	ldr	r3, [sp, #32]
 8015ce6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	f000 80fd 	beq.w	8015eea <_dtoa_r+0xba2>
 8015cf0:	2d00      	cmp	r5, #0
 8015cf2:	dd05      	ble.n	8015d00 <_dtoa_r+0x9b8>
 8015cf4:	4639      	mov	r1, r7
 8015cf6:	462a      	mov	r2, r5
 8015cf8:	4620      	mov	r0, r4
 8015cfa:	f001 f849 	bl	8016d90 <__lshift>
 8015cfe:	4607      	mov	r7, r0
 8015d00:	9b06      	ldr	r3, [sp, #24]
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	d05c      	beq.n	8015dc0 <_dtoa_r+0xa78>
 8015d06:	6879      	ldr	r1, [r7, #4]
 8015d08:	4620      	mov	r0, r4
 8015d0a:	f000 fde5 	bl	80168d8 <_Balloc>
 8015d0e:	4605      	mov	r5, r0
 8015d10:	b928      	cbnz	r0, 8015d1e <_dtoa_r+0x9d6>
 8015d12:	4b80      	ldr	r3, [pc, #512]	; (8015f14 <_dtoa_r+0xbcc>)
 8015d14:	4602      	mov	r2, r0
 8015d16:	f240 21ea 	movw	r1, #746	; 0x2ea
 8015d1a:	f7ff bb2e 	b.w	801537a <_dtoa_r+0x32>
 8015d1e:	693a      	ldr	r2, [r7, #16]
 8015d20:	3202      	adds	r2, #2
 8015d22:	0092      	lsls	r2, r2, #2
 8015d24:	f107 010c 	add.w	r1, r7, #12
 8015d28:	300c      	adds	r0, #12
 8015d2a:	f7fd f907 	bl	8012f3c <memcpy>
 8015d2e:	2201      	movs	r2, #1
 8015d30:	4629      	mov	r1, r5
 8015d32:	4620      	mov	r0, r4
 8015d34:	f001 f82c 	bl	8016d90 <__lshift>
 8015d38:	9b00      	ldr	r3, [sp, #0]
 8015d3a:	3301      	adds	r3, #1
 8015d3c:	9301      	str	r3, [sp, #4]
 8015d3e:	9b00      	ldr	r3, [sp, #0]
 8015d40:	444b      	add	r3, r9
 8015d42:	9307      	str	r3, [sp, #28]
 8015d44:	9b02      	ldr	r3, [sp, #8]
 8015d46:	f003 0301 	and.w	r3, r3, #1
 8015d4a:	46b8      	mov	r8, r7
 8015d4c:	9306      	str	r3, [sp, #24]
 8015d4e:	4607      	mov	r7, r0
 8015d50:	9b01      	ldr	r3, [sp, #4]
 8015d52:	4631      	mov	r1, r6
 8015d54:	3b01      	subs	r3, #1
 8015d56:	4658      	mov	r0, fp
 8015d58:	9302      	str	r3, [sp, #8]
 8015d5a:	f7ff fa69 	bl	8015230 <quorem>
 8015d5e:	4603      	mov	r3, r0
 8015d60:	3330      	adds	r3, #48	; 0x30
 8015d62:	9004      	str	r0, [sp, #16]
 8015d64:	4641      	mov	r1, r8
 8015d66:	4658      	mov	r0, fp
 8015d68:	9308      	str	r3, [sp, #32]
 8015d6a:	f001 f87d 	bl	8016e68 <__mcmp>
 8015d6e:	463a      	mov	r2, r7
 8015d70:	4681      	mov	r9, r0
 8015d72:	4631      	mov	r1, r6
 8015d74:	4620      	mov	r0, r4
 8015d76:	f001 f893 	bl	8016ea0 <__mdiff>
 8015d7a:	68c2      	ldr	r2, [r0, #12]
 8015d7c:	9b08      	ldr	r3, [sp, #32]
 8015d7e:	4605      	mov	r5, r0
 8015d80:	bb02      	cbnz	r2, 8015dc4 <_dtoa_r+0xa7c>
 8015d82:	4601      	mov	r1, r0
 8015d84:	4658      	mov	r0, fp
 8015d86:	f001 f86f 	bl	8016e68 <__mcmp>
 8015d8a:	9b08      	ldr	r3, [sp, #32]
 8015d8c:	4602      	mov	r2, r0
 8015d8e:	4629      	mov	r1, r5
 8015d90:	4620      	mov	r0, r4
 8015d92:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8015d96:	f000 fddf 	bl	8016958 <_Bfree>
 8015d9a:	9b05      	ldr	r3, [sp, #20]
 8015d9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015d9e:	9d01      	ldr	r5, [sp, #4]
 8015da0:	ea43 0102 	orr.w	r1, r3, r2
 8015da4:	9b06      	ldr	r3, [sp, #24]
 8015da6:	430b      	orrs	r3, r1
 8015da8:	9b08      	ldr	r3, [sp, #32]
 8015daa:	d10d      	bne.n	8015dc8 <_dtoa_r+0xa80>
 8015dac:	2b39      	cmp	r3, #57	; 0x39
 8015dae:	d029      	beq.n	8015e04 <_dtoa_r+0xabc>
 8015db0:	f1b9 0f00 	cmp.w	r9, #0
 8015db4:	dd01      	ble.n	8015dba <_dtoa_r+0xa72>
 8015db6:	9b04      	ldr	r3, [sp, #16]
 8015db8:	3331      	adds	r3, #49	; 0x31
 8015dba:	9a02      	ldr	r2, [sp, #8]
 8015dbc:	7013      	strb	r3, [r2, #0]
 8015dbe:	e774      	b.n	8015caa <_dtoa_r+0x962>
 8015dc0:	4638      	mov	r0, r7
 8015dc2:	e7b9      	b.n	8015d38 <_dtoa_r+0x9f0>
 8015dc4:	2201      	movs	r2, #1
 8015dc6:	e7e2      	b.n	8015d8e <_dtoa_r+0xa46>
 8015dc8:	f1b9 0f00 	cmp.w	r9, #0
 8015dcc:	db06      	blt.n	8015ddc <_dtoa_r+0xa94>
 8015dce:	9905      	ldr	r1, [sp, #20]
 8015dd0:	ea41 0909 	orr.w	r9, r1, r9
 8015dd4:	9906      	ldr	r1, [sp, #24]
 8015dd6:	ea59 0101 	orrs.w	r1, r9, r1
 8015dda:	d120      	bne.n	8015e1e <_dtoa_r+0xad6>
 8015ddc:	2a00      	cmp	r2, #0
 8015dde:	ddec      	ble.n	8015dba <_dtoa_r+0xa72>
 8015de0:	4659      	mov	r1, fp
 8015de2:	2201      	movs	r2, #1
 8015de4:	4620      	mov	r0, r4
 8015de6:	9301      	str	r3, [sp, #4]
 8015de8:	f000 ffd2 	bl	8016d90 <__lshift>
 8015dec:	4631      	mov	r1, r6
 8015dee:	4683      	mov	fp, r0
 8015df0:	f001 f83a 	bl	8016e68 <__mcmp>
 8015df4:	2800      	cmp	r0, #0
 8015df6:	9b01      	ldr	r3, [sp, #4]
 8015df8:	dc02      	bgt.n	8015e00 <_dtoa_r+0xab8>
 8015dfa:	d1de      	bne.n	8015dba <_dtoa_r+0xa72>
 8015dfc:	07da      	lsls	r2, r3, #31
 8015dfe:	d5dc      	bpl.n	8015dba <_dtoa_r+0xa72>
 8015e00:	2b39      	cmp	r3, #57	; 0x39
 8015e02:	d1d8      	bne.n	8015db6 <_dtoa_r+0xa6e>
 8015e04:	9a02      	ldr	r2, [sp, #8]
 8015e06:	2339      	movs	r3, #57	; 0x39
 8015e08:	7013      	strb	r3, [r2, #0]
 8015e0a:	462b      	mov	r3, r5
 8015e0c:	461d      	mov	r5, r3
 8015e0e:	3b01      	subs	r3, #1
 8015e10:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8015e14:	2a39      	cmp	r2, #57	; 0x39
 8015e16:	d050      	beq.n	8015eba <_dtoa_r+0xb72>
 8015e18:	3201      	adds	r2, #1
 8015e1a:	701a      	strb	r2, [r3, #0]
 8015e1c:	e745      	b.n	8015caa <_dtoa_r+0x962>
 8015e1e:	2a00      	cmp	r2, #0
 8015e20:	dd03      	ble.n	8015e2a <_dtoa_r+0xae2>
 8015e22:	2b39      	cmp	r3, #57	; 0x39
 8015e24:	d0ee      	beq.n	8015e04 <_dtoa_r+0xabc>
 8015e26:	3301      	adds	r3, #1
 8015e28:	e7c7      	b.n	8015dba <_dtoa_r+0xa72>
 8015e2a:	9a01      	ldr	r2, [sp, #4]
 8015e2c:	9907      	ldr	r1, [sp, #28]
 8015e2e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8015e32:	428a      	cmp	r2, r1
 8015e34:	d02a      	beq.n	8015e8c <_dtoa_r+0xb44>
 8015e36:	4659      	mov	r1, fp
 8015e38:	2300      	movs	r3, #0
 8015e3a:	220a      	movs	r2, #10
 8015e3c:	4620      	mov	r0, r4
 8015e3e:	f000 fdad 	bl	801699c <__multadd>
 8015e42:	45b8      	cmp	r8, r7
 8015e44:	4683      	mov	fp, r0
 8015e46:	f04f 0300 	mov.w	r3, #0
 8015e4a:	f04f 020a 	mov.w	r2, #10
 8015e4e:	4641      	mov	r1, r8
 8015e50:	4620      	mov	r0, r4
 8015e52:	d107      	bne.n	8015e64 <_dtoa_r+0xb1c>
 8015e54:	f000 fda2 	bl	801699c <__multadd>
 8015e58:	4680      	mov	r8, r0
 8015e5a:	4607      	mov	r7, r0
 8015e5c:	9b01      	ldr	r3, [sp, #4]
 8015e5e:	3301      	adds	r3, #1
 8015e60:	9301      	str	r3, [sp, #4]
 8015e62:	e775      	b.n	8015d50 <_dtoa_r+0xa08>
 8015e64:	f000 fd9a 	bl	801699c <__multadd>
 8015e68:	4639      	mov	r1, r7
 8015e6a:	4680      	mov	r8, r0
 8015e6c:	2300      	movs	r3, #0
 8015e6e:	220a      	movs	r2, #10
 8015e70:	4620      	mov	r0, r4
 8015e72:	f000 fd93 	bl	801699c <__multadd>
 8015e76:	4607      	mov	r7, r0
 8015e78:	e7f0      	b.n	8015e5c <_dtoa_r+0xb14>
 8015e7a:	f1b9 0f00 	cmp.w	r9, #0
 8015e7e:	9a00      	ldr	r2, [sp, #0]
 8015e80:	bfcc      	ite	gt
 8015e82:	464d      	movgt	r5, r9
 8015e84:	2501      	movle	r5, #1
 8015e86:	4415      	add	r5, r2
 8015e88:	f04f 0800 	mov.w	r8, #0
 8015e8c:	4659      	mov	r1, fp
 8015e8e:	2201      	movs	r2, #1
 8015e90:	4620      	mov	r0, r4
 8015e92:	9301      	str	r3, [sp, #4]
 8015e94:	f000 ff7c 	bl	8016d90 <__lshift>
 8015e98:	4631      	mov	r1, r6
 8015e9a:	4683      	mov	fp, r0
 8015e9c:	f000 ffe4 	bl	8016e68 <__mcmp>
 8015ea0:	2800      	cmp	r0, #0
 8015ea2:	dcb2      	bgt.n	8015e0a <_dtoa_r+0xac2>
 8015ea4:	d102      	bne.n	8015eac <_dtoa_r+0xb64>
 8015ea6:	9b01      	ldr	r3, [sp, #4]
 8015ea8:	07db      	lsls	r3, r3, #31
 8015eaa:	d4ae      	bmi.n	8015e0a <_dtoa_r+0xac2>
 8015eac:	462b      	mov	r3, r5
 8015eae:	461d      	mov	r5, r3
 8015eb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015eb4:	2a30      	cmp	r2, #48	; 0x30
 8015eb6:	d0fa      	beq.n	8015eae <_dtoa_r+0xb66>
 8015eb8:	e6f7      	b.n	8015caa <_dtoa_r+0x962>
 8015eba:	9a00      	ldr	r2, [sp, #0]
 8015ebc:	429a      	cmp	r2, r3
 8015ebe:	d1a5      	bne.n	8015e0c <_dtoa_r+0xac4>
 8015ec0:	f10a 0a01 	add.w	sl, sl, #1
 8015ec4:	2331      	movs	r3, #49	; 0x31
 8015ec6:	e779      	b.n	8015dbc <_dtoa_r+0xa74>
 8015ec8:	4b13      	ldr	r3, [pc, #76]	; (8015f18 <_dtoa_r+0xbd0>)
 8015eca:	f7ff baaf 	b.w	801542c <_dtoa_r+0xe4>
 8015ece:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	f47f aa86 	bne.w	80153e2 <_dtoa_r+0x9a>
 8015ed6:	4b11      	ldr	r3, [pc, #68]	; (8015f1c <_dtoa_r+0xbd4>)
 8015ed8:	f7ff baa8 	b.w	801542c <_dtoa_r+0xe4>
 8015edc:	f1b9 0f00 	cmp.w	r9, #0
 8015ee0:	dc03      	bgt.n	8015eea <_dtoa_r+0xba2>
 8015ee2:	9b05      	ldr	r3, [sp, #20]
 8015ee4:	2b02      	cmp	r3, #2
 8015ee6:	f73f aec9 	bgt.w	8015c7c <_dtoa_r+0x934>
 8015eea:	9d00      	ldr	r5, [sp, #0]
 8015eec:	4631      	mov	r1, r6
 8015eee:	4658      	mov	r0, fp
 8015ef0:	f7ff f99e 	bl	8015230 <quorem>
 8015ef4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8015ef8:	f805 3b01 	strb.w	r3, [r5], #1
 8015efc:	9a00      	ldr	r2, [sp, #0]
 8015efe:	1aaa      	subs	r2, r5, r2
 8015f00:	4591      	cmp	r9, r2
 8015f02:	ddba      	ble.n	8015e7a <_dtoa_r+0xb32>
 8015f04:	4659      	mov	r1, fp
 8015f06:	2300      	movs	r3, #0
 8015f08:	220a      	movs	r2, #10
 8015f0a:	4620      	mov	r0, r4
 8015f0c:	f000 fd46 	bl	801699c <__multadd>
 8015f10:	4683      	mov	fp, r0
 8015f12:	e7eb      	b.n	8015eec <_dtoa_r+0xba4>
 8015f14:	0801a35f 	.word	0x0801a35f
 8015f18:	0801a561 	.word	0x0801a561
 8015f1c:	0801a2dc 	.word	0x0801a2dc

08015f20 <__sflush_r>:
 8015f20:	898a      	ldrh	r2, [r1, #12]
 8015f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f26:	4605      	mov	r5, r0
 8015f28:	0710      	lsls	r0, r2, #28
 8015f2a:	460c      	mov	r4, r1
 8015f2c:	d458      	bmi.n	8015fe0 <__sflush_r+0xc0>
 8015f2e:	684b      	ldr	r3, [r1, #4]
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	dc05      	bgt.n	8015f40 <__sflush_r+0x20>
 8015f34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	dc02      	bgt.n	8015f40 <__sflush_r+0x20>
 8015f3a:	2000      	movs	r0, #0
 8015f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015f42:	2e00      	cmp	r6, #0
 8015f44:	d0f9      	beq.n	8015f3a <__sflush_r+0x1a>
 8015f46:	2300      	movs	r3, #0
 8015f48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015f4c:	682f      	ldr	r7, [r5, #0]
 8015f4e:	602b      	str	r3, [r5, #0]
 8015f50:	d032      	beq.n	8015fb8 <__sflush_r+0x98>
 8015f52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015f54:	89a3      	ldrh	r3, [r4, #12]
 8015f56:	075a      	lsls	r2, r3, #29
 8015f58:	d505      	bpl.n	8015f66 <__sflush_r+0x46>
 8015f5a:	6863      	ldr	r3, [r4, #4]
 8015f5c:	1ac0      	subs	r0, r0, r3
 8015f5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015f60:	b10b      	cbz	r3, 8015f66 <__sflush_r+0x46>
 8015f62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015f64:	1ac0      	subs	r0, r0, r3
 8015f66:	2300      	movs	r3, #0
 8015f68:	4602      	mov	r2, r0
 8015f6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015f6c:	6a21      	ldr	r1, [r4, #32]
 8015f6e:	4628      	mov	r0, r5
 8015f70:	47b0      	blx	r6
 8015f72:	1c43      	adds	r3, r0, #1
 8015f74:	89a3      	ldrh	r3, [r4, #12]
 8015f76:	d106      	bne.n	8015f86 <__sflush_r+0x66>
 8015f78:	6829      	ldr	r1, [r5, #0]
 8015f7a:	291d      	cmp	r1, #29
 8015f7c:	d82c      	bhi.n	8015fd8 <__sflush_r+0xb8>
 8015f7e:	4a2a      	ldr	r2, [pc, #168]	; (8016028 <__sflush_r+0x108>)
 8015f80:	40ca      	lsrs	r2, r1
 8015f82:	07d6      	lsls	r6, r2, #31
 8015f84:	d528      	bpl.n	8015fd8 <__sflush_r+0xb8>
 8015f86:	2200      	movs	r2, #0
 8015f88:	6062      	str	r2, [r4, #4]
 8015f8a:	04d9      	lsls	r1, r3, #19
 8015f8c:	6922      	ldr	r2, [r4, #16]
 8015f8e:	6022      	str	r2, [r4, #0]
 8015f90:	d504      	bpl.n	8015f9c <__sflush_r+0x7c>
 8015f92:	1c42      	adds	r2, r0, #1
 8015f94:	d101      	bne.n	8015f9a <__sflush_r+0x7a>
 8015f96:	682b      	ldr	r3, [r5, #0]
 8015f98:	b903      	cbnz	r3, 8015f9c <__sflush_r+0x7c>
 8015f9a:	6560      	str	r0, [r4, #84]	; 0x54
 8015f9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015f9e:	602f      	str	r7, [r5, #0]
 8015fa0:	2900      	cmp	r1, #0
 8015fa2:	d0ca      	beq.n	8015f3a <__sflush_r+0x1a>
 8015fa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015fa8:	4299      	cmp	r1, r3
 8015faa:	d002      	beq.n	8015fb2 <__sflush_r+0x92>
 8015fac:	4628      	mov	r0, r5
 8015fae:	f7fc fff5 	bl	8012f9c <_free_r>
 8015fb2:	2000      	movs	r0, #0
 8015fb4:	6360      	str	r0, [r4, #52]	; 0x34
 8015fb6:	e7c1      	b.n	8015f3c <__sflush_r+0x1c>
 8015fb8:	6a21      	ldr	r1, [r4, #32]
 8015fba:	2301      	movs	r3, #1
 8015fbc:	4628      	mov	r0, r5
 8015fbe:	47b0      	blx	r6
 8015fc0:	1c41      	adds	r1, r0, #1
 8015fc2:	d1c7      	bne.n	8015f54 <__sflush_r+0x34>
 8015fc4:	682b      	ldr	r3, [r5, #0]
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	d0c4      	beq.n	8015f54 <__sflush_r+0x34>
 8015fca:	2b1d      	cmp	r3, #29
 8015fcc:	d001      	beq.n	8015fd2 <__sflush_r+0xb2>
 8015fce:	2b16      	cmp	r3, #22
 8015fd0:	d101      	bne.n	8015fd6 <__sflush_r+0xb6>
 8015fd2:	602f      	str	r7, [r5, #0]
 8015fd4:	e7b1      	b.n	8015f3a <__sflush_r+0x1a>
 8015fd6:	89a3      	ldrh	r3, [r4, #12]
 8015fd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015fdc:	81a3      	strh	r3, [r4, #12]
 8015fde:	e7ad      	b.n	8015f3c <__sflush_r+0x1c>
 8015fe0:	690f      	ldr	r7, [r1, #16]
 8015fe2:	2f00      	cmp	r7, #0
 8015fe4:	d0a9      	beq.n	8015f3a <__sflush_r+0x1a>
 8015fe6:	0793      	lsls	r3, r2, #30
 8015fe8:	680e      	ldr	r6, [r1, #0]
 8015fea:	bf08      	it	eq
 8015fec:	694b      	ldreq	r3, [r1, #20]
 8015fee:	600f      	str	r7, [r1, #0]
 8015ff0:	bf18      	it	ne
 8015ff2:	2300      	movne	r3, #0
 8015ff4:	eba6 0807 	sub.w	r8, r6, r7
 8015ff8:	608b      	str	r3, [r1, #8]
 8015ffa:	f1b8 0f00 	cmp.w	r8, #0
 8015ffe:	dd9c      	ble.n	8015f3a <__sflush_r+0x1a>
 8016000:	6a21      	ldr	r1, [r4, #32]
 8016002:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016004:	4643      	mov	r3, r8
 8016006:	463a      	mov	r2, r7
 8016008:	4628      	mov	r0, r5
 801600a:	47b0      	blx	r6
 801600c:	2800      	cmp	r0, #0
 801600e:	dc06      	bgt.n	801601e <__sflush_r+0xfe>
 8016010:	89a3      	ldrh	r3, [r4, #12]
 8016012:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016016:	81a3      	strh	r3, [r4, #12]
 8016018:	f04f 30ff 	mov.w	r0, #4294967295
 801601c:	e78e      	b.n	8015f3c <__sflush_r+0x1c>
 801601e:	4407      	add	r7, r0
 8016020:	eba8 0800 	sub.w	r8, r8, r0
 8016024:	e7e9      	b.n	8015ffa <__sflush_r+0xda>
 8016026:	bf00      	nop
 8016028:	20400001 	.word	0x20400001

0801602c <_fflush_r>:
 801602c:	b538      	push	{r3, r4, r5, lr}
 801602e:	690b      	ldr	r3, [r1, #16]
 8016030:	4605      	mov	r5, r0
 8016032:	460c      	mov	r4, r1
 8016034:	b913      	cbnz	r3, 801603c <_fflush_r+0x10>
 8016036:	2500      	movs	r5, #0
 8016038:	4628      	mov	r0, r5
 801603a:	bd38      	pop	{r3, r4, r5, pc}
 801603c:	b118      	cbz	r0, 8016046 <_fflush_r+0x1a>
 801603e:	6983      	ldr	r3, [r0, #24]
 8016040:	b90b      	cbnz	r3, 8016046 <_fflush_r+0x1a>
 8016042:	f7fc fea5 	bl	8012d90 <__sinit>
 8016046:	4b14      	ldr	r3, [pc, #80]	; (8016098 <_fflush_r+0x6c>)
 8016048:	429c      	cmp	r4, r3
 801604a:	d11b      	bne.n	8016084 <_fflush_r+0x58>
 801604c:	686c      	ldr	r4, [r5, #4]
 801604e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016052:	2b00      	cmp	r3, #0
 8016054:	d0ef      	beq.n	8016036 <_fflush_r+0xa>
 8016056:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016058:	07d0      	lsls	r0, r2, #31
 801605a:	d404      	bmi.n	8016066 <_fflush_r+0x3a>
 801605c:	0599      	lsls	r1, r3, #22
 801605e:	d402      	bmi.n	8016066 <_fflush_r+0x3a>
 8016060:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016062:	f7fc ff58 	bl	8012f16 <__retarget_lock_acquire_recursive>
 8016066:	4628      	mov	r0, r5
 8016068:	4621      	mov	r1, r4
 801606a:	f7ff ff59 	bl	8015f20 <__sflush_r>
 801606e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016070:	07da      	lsls	r2, r3, #31
 8016072:	4605      	mov	r5, r0
 8016074:	d4e0      	bmi.n	8016038 <_fflush_r+0xc>
 8016076:	89a3      	ldrh	r3, [r4, #12]
 8016078:	059b      	lsls	r3, r3, #22
 801607a:	d4dd      	bmi.n	8016038 <_fflush_r+0xc>
 801607c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801607e:	f7fc ff4b 	bl	8012f18 <__retarget_lock_release_recursive>
 8016082:	e7d9      	b.n	8016038 <_fflush_r+0xc>
 8016084:	4b05      	ldr	r3, [pc, #20]	; (801609c <_fflush_r+0x70>)
 8016086:	429c      	cmp	r4, r3
 8016088:	d101      	bne.n	801608e <_fflush_r+0x62>
 801608a:	68ac      	ldr	r4, [r5, #8]
 801608c:	e7df      	b.n	801604e <_fflush_r+0x22>
 801608e:	4b04      	ldr	r3, [pc, #16]	; (80160a0 <_fflush_r+0x74>)
 8016090:	429c      	cmp	r4, r3
 8016092:	bf08      	it	eq
 8016094:	68ec      	ldreq	r4, [r5, #12]
 8016096:	e7da      	b.n	801604e <_fflush_r+0x22>
 8016098:	0801a1d4 	.word	0x0801a1d4
 801609c:	0801a1f4 	.word	0x0801a1f4
 80160a0:	0801a1b4 	.word	0x0801a1b4

080160a4 <fiprintf>:
 80160a4:	b40e      	push	{r1, r2, r3}
 80160a6:	b503      	push	{r0, r1, lr}
 80160a8:	4601      	mov	r1, r0
 80160aa:	ab03      	add	r3, sp, #12
 80160ac:	4805      	ldr	r0, [pc, #20]	; (80160c4 <fiprintf+0x20>)
 80160ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80160b2:	6800      	ldr	r0, [r0, #0]
 80160b4:	9301      	str	r3, [sp, #4]
 80160b6:	f001 fc57 	bl	8017968 <_vfiprintf_r>
 80160ba:	b002      	add	sp, #8
 80160bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80160c0:	b003      	add	sp, #12
 80160c2:	4770      	bx	lr
 80160c4:	200000f0 	.word	0x200000f0

080160c8 <rshift>:
 80160c8:	6903      	ldr	r3, [r0, #16]
 80160ca:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80160ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80160d2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80160d6:	f100 0414 	add.w	r4, r0, #20
 80160da:	dd45      	ble.n	8016168 <rshift+0xa0>
 80160dc:	f011 011f 	ands.w	r1, r1, #31
 80160e0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80160e4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80160e8:	d10c      	bne.n	8016104 <rshift+0x3c>
 80160ea:	f100 0710 	add.w	r7, r0, #16
 80160ee:	4629      	mov	r1, r5
 80160f0:	42b1      	cmp	r1, r6
 80160f2:	d334      	bcc.n	801615e <rshift+0x96>
 80160f4:	1a9b      	subs	r3, r3, r2
 80160f6:	009b      	lsls	r3, r3, #2
 80160f8:	1eea      	subs	r2, r5, #3
 80160fa:	4296      	cmp	r6, r2
 80160fc:	bf38      	it	cc
 80160fe:	2300      	movcc	r3, #0
 8016100:	4423      	add	r3, r4
 8016102:	e015      	b.n	8016130 <rshift+0x68>
 8016104:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8016108:	f1c1 0820 	rsb	r8, r1, #32
 801610c:	40cf      	lsrs	r7, r1
 801610e:	f105 0e04 	add.w	lr, r5, #4
 8016112:	46a1      	mov	r9, r4
 8016114:	4576      	cmp	r6, lr
 8016116:	46f4      	mov	ip, lr
 8016118:	d815      	bhi.n	8016146 <rshift+0x7e>
 801611a:	1a9b      	subs	r3, r3, r2
 801611c:	009a      	lsls	r2, r3, #2
 801611e:	3a04      	subs	r2, #4
 8016120:	3501      	adds	r5, #1
 8016122:	42ae      	cmp	r6, r5
 8016124:	bf38      	it	cc
 8016126:	2200      	movcc	r2, #0
 8016128:	18a3      	adds	r3, r4, r2
 801612a:	50a7      	str	r7, [r4, r2]
 801612c:	b107      	cbz	r7, 8016130 <rshift+0x68>
 801612e:	3304      	adds	r3, #4
 8016130:	1b1a      	subs	r2, r3, r4
 8016132:	42a3      	cmp	r3, r4
 8016134:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016138:	bf08      	it	eq
 801613a:	2300      	moveq	r3, #0
 801613c:	6102      	str	r2, [r0, #16]
 801613e:	bf08      	it	eq
 8016140:	6143      	streq	r3, [r0, #20]
 8016142:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016146:	f8dc c000 	ldr.w	ip, [ip]
 801614a:	fa0c fc08 	lsl.w	ip, ip, r8
 801614e:	ea4c 0707 	orr.w	r7, ip, r7
 8016152:	f849 7b04 	str.w	r7, [r9], #4
 8016156:	f85e 7b04 	ldr.w	r7, [lr], #4
 801615a:	40cf      	lsrs	r7, r1
 801615c:	e7da      	b.n	8016114 <rshift+0x4c>
 801615e:	f851 cb04 	ldr.w	ip, [r1], #4
 8016162:	f847 cf04 	str.w	ip, [r7, #4]!
 8016166:	e7c3      	b.n	80160f0 <rshift+0x28>
 8016168:	4623      	mov	r3, r4
 801616a:	e7e1      	b.n	8016130 <rshift+0x68>

0801616c <__hexdig_fun>:
 801616c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8016170:	2b09      	cmp	r3, #9
 8016172:	d802      	bhi.n	801617a <__hexdig_fun+0xe>
 8016174:	3820      	subs	r0, #32
 8016176:	b2c0      	uxtb	r0, r0
 8016178:	4770      	bx	lr
 801617a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801617e:	2b05      	cmp	r3, #5
 8016180:	d801      	bhi.n	8016186 <__hexdig_fun+0x1a>
 8016182:	3847      	subs	r0, #71	; 0x47
 8016184:	e7f7      	b.n	8016176 <__hexdig_fun+0xa>
 8016186:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801618a:	2b05      	cmp	r3, #5
 801618c:	d801      	bhi.n	8016192 <__hexdig_fun+0x26>
 801618e:	3827      	subs	r0, #39	; 0x27
 8016190:	e7f1      	b.n	8016176 <__hexdig_fun+0xa>
 8016192:	2000      	movs	r0, #0
 8016194:	4770      	bx	lr
	...

08016198 <__gethex>:
 8016198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801619c:	ed2d 8b02 	vpush	{d8}
 80161a0:	b089      	sub	sp, #36	; 0x24
 80161a2:	ee08 0a10 	vmov	s16, r0
 80161a6:	9304      	str	r3, [sp, #16]
 80161a8:	4bbc      	ldr	r3, [pc, #752]	; (801649c <__gethex+0x304>)
 80161aa:	681b      	ldr	r3, [r3, #0]
 80161ac:	9301      	str	r3, [sp, #4]
 80161ae:	4618      	mov	r0, r3
 80161b0:	468b      	mov	fp, r1
 80161b2:	4690      	mov	r8, r2
 80161b4:	f7ea f826 	bl	8000204 <strlen>
 80161b8:	9b01      	ldr	r3, [sp, #4]
 80161ba:	f8db 2000 	ldr.w	r2, [fp]
 80161be:	4403      	add	r3, r0
 80161c0:	4682      	mov	sl, r0
 80161c2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80161c6:	9305      	str	r3, [sp, #20]
 80161c8:	1c93      	adds	r3, r2, #2
 80161ca:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80161ce:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80161d2:	32fe      	adds	r2, #254	; 0xfe
 80161d4:	18d1      	adds	r1, r2, r3
 80161d6:	461f      	mov	r7, r3
 80161d8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80161dc:	9100      	str	r1, [sp, #0]
 80161de:	2830      	cmp	r0, #48	; 0x30
 80161e0:	d0f8      	beq.n	80161d4 <__gethex+0x3c>
 80161e2:	f7ff ffc3 	bl	801616c <__hexdig_fun>
 80161e6:	4604      	mov	r4, r0
 80161e8:	2800      	cmp	r0, #0
 80161ea:	d13a      	bne.n	8016262 <__gethex+0xca>
 80161ec:	9901      	ldr	r1, [sp, #4]
 80161ee:	4652      	mov	r2, sl
 80161f0:	4638      	mov	r0, r7
 80161f2:	f7fd ffda 	bl	80141aa <strncmp>
 80161f6:	4605      	mov	r5, r0
 80161f8:	2800      	cmp	r0, #0
 80161fa:	d168      	bne.n	80162ce <__gethex+0x136>
 80161fc:	f817 000a 	ldrb.w	r0, [r7, sl]
 8016200:	eb07 060a 	add.w	r6, r7, sl
 8016204:	f7ff ffb2 	bl	801616c <__hexdig_fun>
 8016208:	2800      	cmp	r0, #0
 801620a:	d062      	beq.n	80162d2 <__gethex+0x13a>
 801620c:	4633      	mov	r3, r6
 801620e:	7818      	ldrb	r0, [r3, #0]
 8016210:	2830      	cmp	r0, #48	; 0x30
 8016212:	461f      	mov	r7, r3
 8016214:	f103 0301 	add.w	r3, r3, #1
 8016218:	d0f9      	beq.n	801620e <__gethex+0x76>
 801621a:	f7ff ffa7 	bl	801616c <__hexdig_fun>
 801621e:	2301      	movs	r3, #1
 8016220:	fab0 f480 	clz	r4, r0
 8016224:	0964      	lsrs	r4, r4, #5
 8016226:	4635      	mov	r5, r6
 8016228:	9300      	str	r3, [sp, #0]
 801622a:	463a      	mov	r2, r7
 801622c:	4616      	mov	r6, r2
 801622e:	3201      	adds	r2, #1
 8016230:	7830      	ldrb	r0, [r6, #0]
 8016232:	f7ff ff9b 	bl	801616c <__hexdig_fun>
 8016236:	2800      	cmp	r0, #0
 8016238:	d1f8      	bne.n	801622c <__gethex+0x94>
 801623a:	9901      	ldr	r1, [sp, #4]
 801623c:	4652      	mov	r2, sl
 801623e:	4630      	mov	r0, r6
 8016240:	f7fd ffb3 	bl	80141aa <strncmp>
 8016244:	b980      	cbnz	r0, 8016268 <__gethex+0xd0>
 8016246:	b94d      	cbnz	r5, 801625c <__gethex+0xc4>
 8016248:	eb06 050a 	add.w	r5, r6, sl
 801624c:	462a      	mov	r2, r5
 801624e:	4616      	mov	r6, r2
 8016250:	3201      	adds	r2, #1
 8016252:	7830      	ldrb	r0, [r6, #0]
 8016254:	f7ff ff8a 	bl	801616c <__hexdig_fun>
 8016258:	2800      	cmp	r0, #0
 801625a:	d1f8      	bne.n	801624e <__gethex+0xb6>
 801625c:	1bad      	subs	r5, r5, r6
 801625e:	00ad      	lsls	r5, r5, #2
 8016260:	e004      	b.n	801626c <__gethex+0xd4>
 8016262:	2400      	movs	r4, #0
 8016264:	4625      	mov	r5, r4
 8016266:	e7e0      	b.n	801622a <__gethex+0x92>
 8016268:	2d00      	cmp	r5, #0
 801626a:	d1f7      	bne.n	801625c <__gethex+0xc4>
 801626c:	7833      	ldrb	r3, [r6, #0]
 801626e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016272:	2b50      	cmp	r3, #80	; 0x50
 8016274:	d13b      	bne.n	80162ee <__gethex+0x156>
 8016276:	7873      	ldrb	r3, [r6, #1]
 8016278:	2b2b      	cmp	r3, #43	; 0x2b
 801627a:	d02c      	beq.n	80162d6 <__gethex+0x13e>
 801627c:	2b2d      	cmp	r3, #45	; 0x2d
 801627e:	d02e      	beq.n	80162de <__gethex+0x146>
 8016280:	1c71      	adds	r1, r6, #1
 8016282:	f04f 0900 	mov.w	r9, #0
 8016286:	7808      	ldrb	r0, [r1, #0]
 8016288:	f7ff ff70 	bl	801616c <__hexdig_fun>
 801628c:	1e43      	subs	r3, r0, #1
 801628e:	b2db      	uxtb	r3, r3
 8016290:	2b18      	cmp	r3, #24
 8016292:	d82c      	bhi.n	80162ee <__gethex+0x156>
 8016294:	f1a0 0210 	sub.w	r2, r0, #16
 8016298:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801629c:	f7ff ff66 	bl	801616c <__hexdig_fun>
 80162a0:	1e43      	subs	r3, r0, #1
 80162a2:	b2db      	uxtb	r3, r3
 80162a4:	2b18      	cmp	r3, #24
 80162a6:	d91d      	bls.n	80162e4 <__gethex+0x14c>
 80162a8:	f1b9 0f00 	cmp.w	r9, #0
 80162ac:	d000      	beq.n	80162b0 <__gethex+0x118>
 80162ae:	4252      	negs	r2, r2
 80162b0:	4415      	add	r5, r2
 80162b2:	f8cb 1000 	str.w	r1, [fp]
 80162b6:	b1e4      	cbz	r4, 80162f2 <__gethex+0x15a>
 80162b8:	9b00      	ldr	r3, [sp, #0]
 80162ba:	2b00      	cmp	r3, #0
 80162bc:	bf14      	ite	ne
 80162be:	2700      	movne	r7, #0
 80162c0:	2706      	moveq	r7, #6
 80162c2:	4638      	mov	r0, r7
 80162c4:	b009      	add	sp, #36	; 0x24
 80162c6:	ecbd 8b02 	vpop	{d8}
 80162ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162ce:	463e      	mov	r6, r7
 80162d0:	4625      	mov	r5, r4
 80162d2:	2401      	movs	r4, #1
 80162d4:	e7ca      	b.n	801626c <__gethex+0xd4>
 80162d6:	f04f 0900 	mov.w	r9, #0
 80162da:	1cb1      	adds	r1, r6, #2
 80162dc:	e7d3      	b.n	8016286 <__gethex+0xee>
 80162de:	f04f 0901 	mov.w	r9, #1
 80162e2:	e7fa      	b.n	80162da <__gethex+0x142>
 80162e4:	230a      	movs	r3, #10
 80162e6:	fb03 0202 	mla	r2, r3, r2, r0
 80162ea:	3a10      	subs	r2, #16
 80162ec:	e7d4      	b.n	8016298 <__gethex+0x100>
 80162ee:	4631      	mov	r1, r6
 80162f0:	e7df      	b.n	80162b2 <__gethex+0x11a>
 80162f2:	1bf3      	subs	r3, r6, r7
 80162f4:	3b01      	subs	r3, #1
 80162f6:	4621      	mov	r1, r4
 80162f8:	2b07      	cmp	r3, #7
 80162fa:	dc0b      	bgt.n	8016314 <__gethex+0x17c>
 80162fc:	ee18 0a10 	vmov	r0, s16
 8016300:	f000 faea 	bl	80168d8 <_Balloc>
 8016304:	4604      	mov	r4, r0
 8016306:	b940      	cbnz	r0, 801631a <__gethex+0x182>
 8016308:	4b65      	ldr	r3, [pc, #404]	; (80164a0 <__gethex+0x308>)
 801630a:	4602      	mov	r2, r0
 801630c:	21de      	movs	r1, #222	; 0xde
 801630e:	4865      	ldr	r0, [pc, #404]	; (80164a4 <__gethex+0x30c>)
 8016310:	f7fe ff60 	bl	80151d4 <__assert_func>
 8016314:	3101      	adds	r1, #1
 8016316:	105b      	asrs	r3, r3, #1
 8016318:	e7ee      	b.n	80162f8 <__gethex+0x160>
 801631a:	f100 0914 	add.w	r9, r0, #20
 801631e:	f04f 0b00 	mov.w	fp, #0
 8016322:	f1ca 0301 	rsb	r3, sl, #1
 8016326:	f8cd 9008 	str.w	r9, [sp, #8]
 801632a:	f8cd b000 	str.w	fp, [sp]
 801632e:	9306      	str	r3, [sp, #24]
 8016330:	42b7      	cmp	r7, r6
 8016332:	d340      	bcc.n	80163b6 <__gethex+0x21e>
 8016334:	9802      	ldr	r0, [sp, #8]
 8016336:	9b00      	ldr	r3, [sp, #0]
 8016338:	f840 3b04 	str.w	r3, [r0], #4
 801633c:	eba0 0009 	sub.w	r0, r0, r9
 8016340:	1080      	asrs	r0, r0, #2
 8016342:	0146      	lsls	r6, r0, #5
 8016344:	6120      	str	r0, [r4, #16]
 8016346:	4618      	mov	r0, r3
 8016348:	f000 fbbc 	bl	8016ac4 <__hi0bits>
 801634c:	1a30      	subs	r0, r6, r0
 801634e:	f8d8 6000 	ldr.w	r6, [r8]
 8016352:	42b0      	cmp	r0, r6
 8016354:	dd63      	ble.n	801641e <__gethex+0x286>
 8016356:	1b87      	subs	r7, r0, r6
 8016358:	4639      	mov	r1, r7
 801635a:	4620      	mov	r0, r4
 801635c:	f000 ff56 	bl	801720c <__any_on>
 8016360:	4682      	mov	sl, r0
 8016362:	b1a8      	cbz	r0, 8016390 <__gethex+0x1f8>
 8016364:	1e7b      	subs	r3, r7, #1
 8016366:	1159      	asrs	r1, r3, #5
 8016368:	f003 021f 	and.w	r2, r3, #31
 801636c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8016370:	f04f 0a01 	mov.w	sl, #1
 8016374:	fa0a f202 	lsl.w	r2, sl, r2
 8016378:	420a      	tst	r2, r1
 801637a:	d009      	beq.n	8016390 <__gethex+0x1f8>
 801637c:	4553      	cmp	r3, sl
 801637e:	dd05      	ble.n	801638c <__gethex+0x1f4>
 8016380:	1eb9      	subs	r1, r7, #2
 8016382:	4620      	mov	r0, r4
 8016384:	f000 ff42 	bl	801720c <__any_on>
 8016388:	2800      	cmp	r0, #0
 801638a:	d145      	bne.n	8016418 <__gethex+0x280>
 801638c:	f04f 0a02 	mov.w	sl, #2
 8016390:	4639      	mov	r1, r7
 8016392:	4620      	mov	r0, r4
 8016394:	f7ff fe98 	bl	80160c8 <rshift>
 8016398:	443d      	add	r5, r7
 801639a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801639e:	42ab      	cmp	r3, r5
 80163a0:	da4c      	bge.n	801643c <__gethex+0x2a4>
 80163a2:	ee18 0a10 	vmov	r0, s16
 80163a6:	4621      	mov	r1, r4
 80163a8:	f000 fad6 	bl	8016958 <_Bfree>
 80163ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80163ae:	2300      	movs	r3, #0
 80163b0:	6013      	str	r3, [r2, #0]
 80163b2:	27a3      	movs	r7, #163	; 0xa3
 80163b4:	e785      	b.n	80162c2 <__gethex+0x12a>
 80163b6:	1e73      	subs	r3, r6, #1
 80163b8:	9a05      	ldr	r2, [sp, #20]
 80163ba:	9303      	str	r3, [sp, #12]
 80163bc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80163c0:	4293      	cmp	r3, r2
 80163c2:	d019      	beq.n	80163f8 <__gethex+0x260>
 80163c4:	f1bb 0f20 	cmp.w	fp, #32
 80163c8:	d107      	bne.n	80163da <__gethex+0x242>
 80163ca:	9b02      	ldr	r3, [sp, #8]
 80163cc:	9a00      	ldr	r2, [sp, #0]
 80163ce:	f843 2b04 	str.w	r2, [r3], #4
 80163d2:	9302      	str	r3, [sp, #8]
 80163d4:	2300      	movs	r3, #0
 80163d6:	9300      	str	r3, [sp, #0]
 80163d8:	469b      	mov	fp, r3
 80163da:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80163de:	f7ff fec5 	bl	801616c <__hexdig_fun>
 80163e2:	9b00      	ldr	r3, [sp, #0]
 80163e4:	f000 000f 	and.w	r0, r0, #15
 80163e8:	fa00 f00b 	lsl.w	r0, r0, fp
 80163ec:	4303      	orrs	r3, r0
 80163ee:	9300      	str	r3, [sp, #0]
 80163f0:	f10b 0b04 	add.w	fp, fp, #4
 80163f4:	9b03      	ldr	r3, [sp, #12]
 80163f6:	e00d      	b.n	8016414 <__gethex+0x27c>
 80163f8:	9b03      	ldr	r3, [sp, #12]
 80163fa:	9a06      	ldr	r2, [sp, #24]
 80163fc:	4413      	add	r3, r2
 80163fe:	42bb      	cmp	r3, r7
 8016400:	d3e0      	bcc.n	80163c4 <__gethex+0x22c>
 8016402:	4618      	mov	r0, r3
 8016404:	9901      	ldr	r1, [sp, #4]
 8016406:	9307      	str	r3, [sp, #28]
 8016408:	4652      	mov	r2, sl
 801640a:	f7fd fece 	bl	80141aa <strncmp>
 801640e:	9b07      	ldr	r3, [sp, #28]
 8016410:	2800      	cmp	r0, #0
 8016412:	d1d7      	bne.n	80163c4 <__gethex+0x22c>
 8016414:	461e      	mov	r6, r3
 8016416:	e78b      	b.n	8016330 <__gethex+0x198>
 8016418:	f04f 0a03 	mov.w	sl, #3
 801641c:	e7b8      	b.n	8016390 <__gethex+0x1f8>
 801641e:	da0a      	bge.n	8016436 <__gethex+0x29e>
 8016420:	1a37      	subs	r7, r6, r0
 8016422:	4621      	mov	r1, r4
 8016424:	ee18 0a10 	vmov	r0, s16
 8016428:	463a      	mov	r2, r7
 801642a:	f000 fcb1 	bl	8016d90 <__lshift>
 801642e:	1bed      	subs	r5, r5, r7
 8016430:	4604      	mov	r4, r0
 8016432:	f100 0914 	add.w	r9, r0, #20
 8016436:	f04f 0a00 	mov.w	sl, #0
 801643a:	e7ae      	b.n	801639a <__gethex+0x202>
 801643c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8016440:	42a8      	cmp	r0, r5
 8016442:	dd72      	ble.n	801652a <__gethex+0x392>
 8016444:	1b45      	subs	r5, r0, r5
 8016446:	42ae      	cmp	r6, r5
 8016448:	dc36      	bgt.n	80164b8 <__gethex+0x320>
 801644a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801644e:	2b02      	cmp	r3, #2
 8016450:	d02a      	beq.n	80164a8 <__gethex+0x310>
 8016452:	2b03      	cmp	r3, #3
 8016454:	d02c      	beq.n	80164b0 <__gethex+0x318>
 8016456:	2b01      	cmp	r3, #1
 8016458:	d115      	bne.n	8016486 <__gethex+0x2ee>
 801645a:	42ae      	cmp	r6, r5
 801645c:	d113      	bne.n	8016486 <__gethex+0x2ee>
 801645e:	2e01      	cmp	r6, #1
 8016460:	d10b      	bne.n	801647a <__gethex+0x2e2>
 8016462:	9a04      	ldr	r2, [sp, #16]
 8016464:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016468:	6013      	str	r3, [r2, #0]
 801646a:	2301      	movs	r3, #1
 801646c:	6123      	str	r3, [r4, #16]
 801646e:	f8c9 3000 	str.w	r3, [r9]
 8016472:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016474:	2762      	movs	r7, #98	; 0x62
 8016476:	601c      	str	r4, [r3, #0]
 8016478:	e723      	b.n	80162c2 <__gethex+0x12a>
 801647a:	1e71      	subs	r1, r6, #1
 801647c:	4620      	mov	r0, r4
 801647e:	f000 fec5 	bl	801720c <__any_on>
 8016482:	2800      	cmp	r0, #0
 8016484:	d1ed      	bne.n	8016462 <__gethex+0x2ca>
 8016486:	ee18 0a10 	vmov	r0, s16
 801648a:	4621      	mov	r1, r4
 801648c:	f000 fa64 	bl	8016958 <_Bfree>
 8016490:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016492:	2300      	movs	r3, #0
 8016494:	6013      	str	r3, [r2, #0]
 8016496:	2750      	movs	r7, #80	; 0x50
 8016498:	e713      	b.n	80162c2 <__gethex+0x12a>
 801649a:	bf00      	nop
 801649c:	0801a3dc 	.word	0x0801a3dc
 80164a0:	0801a35f 	.word	0x0801a35f
 80164a4:	0801a370 	.word	0x0801a370
 80164a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	d1eb      	bne.n	8016486 <__gethex+0x2ee>
 80164ae:	e7d8      	b.n	8016462 <__gethex+0x2ca>
 80164b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80164b2:	2b00      	cmp	r3, #0
 80164b4:	d1d5      	bne.n	8016462 <__gethex+0x2ca>
 80164b6:	e7e6      	b.n	8016486 <__gethex+0x2ee>
 80164b8:	1e6f      	subs	r7, r5, #1
 80164ba:	f1ba 0f00 	cmp.w	sl, #0
 80164be:	d131      	bne.n	8016524 <__gethex+0x38c>
 80164c0:	b127      	cbz	r7, 80164cc <__gethex+0x334>
 80164c2:	4639      	mov	r1, r7
 80164c4:	4620      	mov	r0, r4
 80164c6:	f000 fea1 	bl	801720c <__any_on>
 80164ca:	4682      	mov	sl, r0
 80164cc:	117b      	asrs	r3, r7, #5
 80164ce:	2101      	movs	r1, #1
 80164d0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80164d4:	f007 071f 	and.w	r7, r7, #31
 80164d8:	fa01 f707 	lsl.w	r7, r1, r7
 80164dc:	421f      	tst	r7, r3
 80164de:	4629      	mov	r1, r5
 80164e0:	4620      	mov	r0, r4
 80164e2:	bf18      	it	ne
 80164e4:	f04a 0a02 	orrne.w	sl, sl, #2
 80164e8:	1b76      	subs	r6, r6, r5
 80164ea:	f7ff fded 	bl	80160c8 <rshift>
 80164ee:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80164f2:	2702      	movs	r7, #2
 80164f4:	f1ba 0f00 	cmp.w	sl, #0
 80164f8:	d048      	beq.n	801658c <__gethex+0x3f4>
 80164fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80164fe:	2b02      	cmp	r3, #2
 8016500:	d015      	beq.n	801652e <__gethex+0x396>
 8016502:	2b03      	cmp	r3, #3
 8016504:	d017      	beq.n	8016536 <__gethex+0x39e>
 8016506:	2b01      	cmp	r3, #1
 8016508:	d109      	bne.n	801651e <__gethex+0x386>
 801650a:	f01a 0f02 	tst.w	sl, #2
 801650e:	d006      	beq.n	801651e <__gethex+0x386>
 8016510:	f8d9 0000 	ldr.w	r0, [r9]
 8016514:	ea4a 0a00 	orr.w	sl, sl, r0
 8016518:	f01a 0f01 	tst.w	sl, #1
 801651c:	d10e      	bne.n	801653c <__gethex+0x3a4>
 801651e:	f047 0710 	orr.w	r7, r7, #16
 8016522:	e033      	b.n	801658c <__gethex+0x3f4>
 8016524:	f04f 0a01 	mov.w	sl, #1
 8016528:	e7d0      	b.n	80164cc <__gethex+0x334>
 801652a:	2701      	movs	r7, #1
 801652c:	e7e2      	b.n	80164f4 <__gethex+0x35c>
 801652e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016530:	f1c3 0301 	rsb	r3, r3, #1
 8016534:	9315      	str	r3, [sp, #84]	; 0x54
 8016536:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016538:	2b00      	cmp	r3, #0
 801653a:	d0f0      	beq.n	801651e <__gethex+0x386>
 801653c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8016540:	f104 0314 	add.w	r3, r4, #20
 8016544:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8016548:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801654c:	f04f 0c00 	mov.w	ip, #0
 8016550:	4618      	mov	r0, r3
 8016552:	f853 2b04 	ldr.w	r2, [r3], #4
 8016556:	f1b2 3fff 	cmp.w	r2, #4294967295
 801655a:	d01c      	beq.n	8016596 <__gethex+0x3fe>
 801655c:	3201      	adds	r2, #1
 801655e:	6002      	str	r2, [r0, #0]
 8016560:	2f02      	cmp	r7, #2
 8016562:	f104 0314 	add.w	r3, r4, #20
 8016566:	d13f      	bne.n	80165e8 <__gethex+0x450>
 8016568:	f8d8 2000 	ldr.w	r2, [r8]
 801656c:	3a01      	subs	r2, #1
 801656e:	42b2      	cmp	r2, r6
 8016570:	d10a      	bne.n	8016588 <__gethex+0x3f0>
 8016572:	1171      	asrs	r1, r6, #5
 8016574:	2201      	movs	r2, #1
 8016576:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801657a:	f006 061f 	and.w	r6, r6, #31
 801657e:	fa02 f606 	lsl.w	r6, r2, r6
 8016582:	421e      	tst	r6, r3
 8016584:	bf18      	it	ne
 8016586:	4617      	movne	r7, r2
 8016588:	f047 0720 	orr.w	r7, r7, #32
 801658c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801658e:	601c      	str	r4, [r3, #0]
 8016590:	9b04      	ldr	r3, [sp, #16]
 8016592:	601d      	str	r5, [r3, #0]
 8016594:	e695      	b.n	80162c2 <__gethex+0x12a>
 8016596:	4299      	cmp	r1, r3
 8016598:	f843 cc04 	str.w	ip, [r3, #-4]
 801659c:	d8d8      	bhi.n	8016550 <__gethex+0x3b8>
 801659e:	68a3      	ldr	r3, [r4, #8]
 80165a0:	459b      	cmp	fp, r3
 80165a2:	db19      	blt.n	80165d8 <__gethex+0x440>
 80165a4:	6861      	ldr	r1, [r4, #4]
 80165a6:	ee18 0a10 	vmov	r0, s16
 80165aa:	3101      	adds	r1, #1
 80165ac:	f000 f994 	bl	80168d8 <_Balloc>
 80165b0:	4681      	mov	r9, r0
 80165b2:	b918      	cbnz	r0, 80165bc <__gethex+0x424>
 80165b4:	4b1a      	ldr	r3, [pc, #104]	; (8016620 <__gethex+0x488>)
 80165b6:	4602      	mov	r2, r0
 80165b8:	2184      	movs	r1, #132	; 0x84
 80165ba:	e6a8      	b.n	801630e <__gethex+0x176>
 80165bc:	6922      	ldr	r2, [r4, #16]
 80165be:	3202      	adds	r2, #2
 80165c0:	f104 010c 	add.w	r1, r4, #12
 80165c4:	0092      	lsls	r2, r2, #2
 80165c6:	300c      	adds	r0, #12
 80165c8:	f7fc fcb8 	bl	8012f3c <memcpy>
 80165cc:	4621      	mov	r1, r4
 80165ce:	ee18 0a10 	vmov	r0, s16
 80165d2:	f000 f9c1 	bl	8016958 <_Bfree>
 80165d6:	464c      	mov	r4, r9
 80165d8:	6923      	ldr	r3, [r4, #16]
 80165da:	1c5a      	adds	r2, r3, #1
 80165dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80165e0:	6122      	str	r2, [r4, #16]
 80165e2:	2201      	movs	r2, #1
 80165e4:	615a      	str	r2, [r3, #20]
 80165e6:	e7bb      	b.n	8016560 <__gethex+0x3c8>
 80165e8:	6922      	ldr	r2, [r4, #16]
 80165ea:	455a      	cmp	r2, fp
 80165ec:	dd0b      	ble.n	8016606 <__gethex+0x46e>
 80165ee:	2101      	movs	r1, #1
 80165f0:	4620      	mov	r0, r4
 80165f2:	f7ff fd69 	bl	80160c8 <rshift>
 80165f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80165fa:	3501      	adds	r5, #1
 80165fc:	42ab      	cmp	r3, r5
 80165fe:	f6ff aed0 	blt.w	80163a2 <__gethex+0x20a>
 8016602:	2701      	movs	r7, #1
 8016604:	e7c0      	b.n	8016588 <__gethex+0x3f0>
 8016606:	f016 061f 	ands.w	r6, r6, #31
 801660a:	d0fa      	beq.n	8016602 <__gethex+0x46a>
 801660c:	449a      	add	sl, r3
 801660e:	f1c6 0620 	rsb	r6, r6, #32
 8016612:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8016616:	f000 fa55 	bl	8016ac4 <__hi0bits>
 801661a:	42b0      	cmp	r0, r6
 801661c:	dbe7      	blt.n	80165ee <__gethex+0x456>
 801661e:	e7f0      	b.n	8016602 <__gethex+0x46a>
 8016620:	0801a35f 	.word	0x0801a35f

08016624 <L_shift>:
 8016624:	f1c2 0208 	rsb	r2, r2, #8
 8016628:	0092      	lsls	r2, r2, #2
 801662a:	b570      	push	{r4, r5, r6, lr}
 801662c:	f1c2 0620 	rsb	r6, r2, #32
 8016630:	6843      	ldr	r3, [r0, #4]
 8016632:	6804      	ldr	r4, [r0, #0]
 8016634:	fa03 f506 	lsl.w	r5, r3, r6
 8016638:	432c      	orrs	r4, r5
 801663a:	40d3      	lsrs	r3, r2
 801663c:	6004      	str	r4, [r0, #0]
 801663e:	f840 3f04 	str.w	r3, [r0, #4]!
 8016642:	4288      	cmp	r0, r1
 8016644:	d3f4      	bcc.n	8016630 <L_shift+0xc>
 8016646:	bd70      	pop	{r4, r5, r6, pc}

08016648 <__match>:
 8016648:	b530      	push	{r4, r5, lr}
 801664a:	6803      	ldr	r3, [r0, #0]
 801664c:	3301      	adds	r3, #1
 801664e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016652:	b914      	cbnz	r4, 801665a <__match+0x12>
 8016654:	6003      	str	r3, [r0, #0]
 8016656:	2001      	movs	r0, #1
 8016658:	bd30      	pop	{r4, r5, pc}
 801665a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801665e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8016662:	2d19      	cmp	r5, #25
 8016664:	bf98      	it	ls
 8016666:	3220      	addls	r2, #32
 8016668:	42a2      	cmp	r2, r4
 801666a:	d0f0      	beq.n	801664e <__match+0x6>
 801666c:	2000      	movs	r0, #0
 801666e:	e7f3      	b.n	8016658 <__match+0x10>

08016670 <__hexnan>:
 8016670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016674:	680b      	ldr	r3, [r1, #0]
 8016676:	6801      	ldr	r1, [r0, #0]
 8016678:	115e      	asrs	r6, r3, #5
 801667a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801667e:	f013 031f 	ands.w	r3, r3, #31
 8016682:	b087      	sub	sp, #28
 8016684:	bf18      	it	ne
 8016686:	3604      	addne	r6, #4
 8016688:	2500      	movs	r5, #0
 801668a:	1f37      	subs	r7, r6, #4
 801668c:	4682      	mov	sl, r0
 801668e:	4690      	mov	r8, r2
 8016690:	9301      	str	r3, [sp, #4]
 8016692:	f846 5c04 	str.w	r5, [r6, #-4]
 8016696:	46b9      	mov	r9, r7
 8016698:	463c      	mov	r4, r7
 801669a:	9502      	str	r5, [sp, #8]
 801669c:	46ab      	mov	fp, r5
 801669e:	784a      	ldrb	r2, [r1, #1]
 80166a0:	1c4b      	adds	r3, r1, #1
 80166a2:	9303      	str	r3, [sp, #12]
 80166a4:	b342      	cbz	r2, 80166f8 <__hexnan+0x88>
 80166a6:	4610      	mov	r0, r2
 80166a8:	9105      	str	r1, [sp, #20]
 80166aa:	9204      	str	r2, [sp, #16]
 80166ac:	f7ff fd5e 	bl	801616c <__hexdig_fun>
 80166b0:	2800      	cmp	r0, #0
 80166b2:	d14f      	bne.n	8016754 <__hexnan+0xe4>
 80166b4:	9a04      	ldr	r2, [sp, #16]
 80166b6:	9905      	ldr	r1, [sp, #20]
 80166b8:	2a20      	cmp	r2, #32
 80166ba:	d818      	bhi.n	80166ee <__hexnan+0x7e>
 80166bc:	9b02      	ldr	r3, [sp, #8]
 80166be:	459b      	cmp	fp, r3
 80166c0:	dd13      	ble.n	80166ea <__hexnan+0x7a>
 80166c2:	454c      	cmp	r4, r9
 80166c4:	d206      	bcs.n	80166d4 <__hexnan+0x64>
 80166c6:	2d07      	cmp	r5, #7
 80166c8:	dc04      	bgt.n	80166d4 <__hexnan+0x64>
 80166ca:	462a      	mov	r2, r5
 80166cc:	4649      	mov	r1, r9
 80166ce:	4620      	mov	r0, r4
 80166d0:	f7ff ffa8 	bl	8016624 <L_shift>
 80166d4:	4544      	cmp	r4, r8
 80166d6:	d950      	bls.n	801677a <__hexnan+0x10a>
 80166d8:	2300      	movs	r3, #0
 80166da:	f1a4 0904 	sub.w	r9, r4, #4
 80166de:	f844 3c04 	str.w	r3, [r4, #-4]
 80166e2:	f8cd b008 	str.w	fp, [sp, #8]
 80166e6:	464c      	mov	r4, r9
 80166e8:	461d      	mov	r5, r3
 80166ea:	9903      	ldr	r1, [sp, #12]
 80166ec:	e7d7      	b.n	801669e <__hexnan+0x2e>
 80166ee:	2a29      	cmp	r2, #41	; 0x29
 80166f0:	d156      	bne.n	80167a0 <__hexnan+0x130>
 80166f2:	3102      	adds	r1, #2
 80166f4:	f8ca 1000 	str.w	r1, [sl]
 80166f8:	f1bb 0f00 	cmp.w	fp, #0
 80166fc:	d050      	beq.n	80167a0 <__hexnan+0x130>
 80166fe:	454c      	cmp	r4, r9
 8016700:	d206      	bcs.n	8016710 <__hexnan+0xa0>
 8016702:	2d07      	cmp	r5, #7
 8016704:	dc04      	bgt.n	8016710 <__hexnan+0xa0>
 8016706:	462a      	mov	r2, r5
 8016708:	4649      	mov	r1, r9
 801670a:	4620      	mov	r0, r4
 801670c:	f7ff ff8a 	bl	8016624 <L_shift>
 8016710:	4544      	cmp	r4, r8
 8016712:	d934      	bls.n	801677e <__hexnan+0x10e>
 8016714:	f1a8 0204 	sub.w	r2, r8, #4
 8016718:	4623      	mov	r3, r4
 801671a:	f853 1b04 	ldr.w	r1, [r3], #4
 801671e:	f842 1f04 	str.w	r1, [r2, #4]!
 8016722:	429f      	cmp	r7, r3
 8016724:	d2f9      	bcs.n	801671a <__hexnan+0xaa>
 8016726:	1b3b      	subs	r3, r7, r4
 8016728:	f023 0303 	bic.w	r3, r3, #3
 801672c:	3304      	adds	r3, #4
 801672e:	3401      	adds	r4, #1
 8016730:	3e03      	subs	r6, #3
 8016732:	42b4      	cmp	r4, r6
 8016734:	bf88      	it	hi
 8016736:	2304      	movhi	r3, #4
 8016738:	4443      	add	r3, r8
 801673a:	2200      	movs	r2, #0
 801673c:	f843 2b04 	str.w	r2, [r3], #4
 8016740:	429f      	cmp	r7, r3
 8016742:	d2fb      	bcs.n	801673c <__hexnan+0xcc>
 8016744:	683b      	ldr	r3, [r7, #0]
 8016746:	b91b      	cbnz	r3, 8016750 <__hexnan+0xe0>
 8016748:	4547      	cmp	r7, r8
 801674a:	d127      	bne.n	801679c <__hexnan+0x12c>
 801674c:	2301      	movs	r3, #1
 801674e:	603b      	str	r3, [r7, #0]
 8016750:	2005      	movs	r0, #5
 8016752:	e026      	b.n	80167a2 <__hexnan+0x132>
 8016754:	3501      	adds	r5, #1
 8016756:	2d08      	cmp	r5, #8
 8016758:	f10b 0b01 	add.w	fp, fp, #1
 801675c:	dd06      	ble.n	801676c <__hexnan+0xfc>
 801675e:	4544      	cmp	r4, r8
 8016760:	d9c3      	bls.n	80166ea <__hexnan+0x7a>
 8016762:	2300      	movs	r3, #0
 8016764:	f844 3c04 	str.w	r3, [r4, #-4]
 8016768:	2501      	movs	r5, #1
 801676a:	3c04      	subs	r4, #4
 801676c:	6822      	ldr	r2, [r4, #0]
 801676e:	f000 000f 	and.w	r0, r0, #15
 8016772:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8016776:	6022      	str	r2, [r4, #0]
 8016778:	e7b7      	b.n	80166ea <__hexnan+0x7a>
 801677a:	2508      	movs	r5, #8
 801677c:	e7b5      	b.n	80166ea <__hexnan+0x7a>
 801677e:	9b01      	ldr	r3, [sp, #4]
 8016780:	2b00      	cmp	r3, #0
 8016782:	d0df      	beq.n	8016744 <__hexnan+0xd4>
 8016784:	f04f 32ff 	mov.w	r2, #4294967295
 8016788:	f1c3 0320 	rsb	r3, r3, #32
 801678c:	fa22 f303 	lsr.w	r3, r2, r3
 8016790:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8016794:	401a      	ands	r2, r3
 8016796:	f846 2c04 	str.w	r2, [r6, #-4]
 801679a:	e7d3      	b.n	8016744 <__hexnan+0xd4>
 801679c:	3f04      	subs	r7, #4
 801679e:	e7d1      	b.n	8016744 <__hexnan+0xd4>
 80167a0:	2004      	movs	r0, #4
 80167a2:	b007      	add	sp, #28
 80167a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080167a8 <_localeconv_r>:
 80167a8:	4800      	ldr	r0, [pc, #0]	; (80167ac <_localeconv_r+0x4>)
 80167aa:	4770      	bx	lr
 80167ac:	20000248 	.word	0x20000248

080167b0 <_lseek_r>:
 80167b0:	b538      	push	{r3, r4, r5, lr}
 80167b2:	4d07      	ldr	r5, [pc, #28]	; (80167d0 <_lseek_r+0x20>)
 80167b4:	4604      	mov	r4, r0
 80167b6:	4608      	mov	r0, r1
 80167b8:	4611      	mov	r1, r2
 80167ba:	2200      	movs	r2, #0
 80167bc:	602a      	str	r2, [r5, #0]
 80167be:	461a      	mov	r2, r3
 80167c0:	f001 fc34 	bl	801802c <_lseek>
 80167c4:	1c43      	adds	r3, r0, #1
 80167c6:	d102      	bne.n	80167ce <_lseek_r+0x1e>
 80167c8:	682b      	ldr	r3, [r5, #0]
 80167ca:	b103      	cbz	r3, 80167ce <_lseek_r+0x1e>
 80167cc:	6023      	str	r3, [r4, #0]
 80167ce:	bd38      	pop	{r3, r4, r5, pc}
 80167d0:	2000654c 	.word	0x2000654c

080167d4 <__swhatbuf_r>:
 80167d4:	b570      	push	{r4, r5, r6, lr}
 80167d6:	460e      	mov	r6, r1
 80167d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80167dc:	2900      	cmp	r1, #0
 80167de:	b096      	sub	sp, #88	; 0x58
 80167e0:	4614      	mov	r4, r2
 80167e2:	461d      	mov	r5, r3
 80167e4:	da07      	bge.n	80167f6 <__swhatbuf_r+0x22>
 80167e6:	2300      	movs	r3, #0
 80167e8:	602b      	str	r3, [r5, #0]
 80167ea:	89b3      	ldrh	r3, [r6, #12]
 80167ec:	061a      	lsls	r2, r3, #24
 80167ee:	d410      	bmi.n	8016812 <__swhatbuf_r+0x3e>
 80167f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80167f4:	e00e      	b.n	8016814 <__swhatbuf_r+0x40>
 80167f6:	466a      	mov	r2, sp
 80167f8:	f001 fbc6 	bl	8017f88 <_fstat_r>
 80167fc:	2800      	cmp	r0, #0
 80167fe:	dbf2      	blt.n	80167e6 <__swhatbuf_r+0x12>
 8016800:	9a01      	ldr	r2, [sp, #4]
 8016802:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016806:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801680a:	425a      	negs	r2, r3
 801680c:	415a      	adcs	r2, r3
 801680e:	602a      	str	r2, [r5, #0]
 8016810:	e7ee      	b.n	80167f0 <__swhatbuf_r+0x1c>
 8016812:	2340      	movs	r3, #64	; 0x40
 8016814:	2000      	movs	r0, #0
 8016816:	6023      	str	r3, [r4, #0]
 8016818:	b016      	add	sp, #88	; 0x58
 801681a:	bd70      	pop	{r4, r5, r6, pc}

0801681c <__smakebuf_r>:
 801681c:	898b      	ldrh	r3, [r1, #12]
 801681e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016820:	079d      	lsls	r5, r3, #30
 8016822:	4606      	mov	r6, r0
 8016824:	460c      	mov	r4, r1
 8016826:	d507      	bpl.n	8016838 <__smakebuf_r+0x1c>
 8016828:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801682c:	6023      	str	r3, [r4, #0]
 801682e:	6123      	str	r3, [r4, #16]
 8016830:	2301      	movs	r3, #1
 8016832:	6163      	str	r3, [r4, #20]
 8016834:	b002      	add	sp, #8
 8016836:	bd70      	pop	{r4, r5, r6, pc}
 8016838:	ab01      	add	r3, sp, #4
 801683a:	466a      	mov	r2, sp
 801683c:	f7ff ffca 	bl	80167d4 <__swhatbuf_r>
 8016840:	9900      	ldr	r1, [sp, #0]
 8016842:	4605      	mov	r5, r0
 8016844:	4630      	mov	r0, r6
 8016846:	f7fc fbf9 	bl	801303c <_malloc_r>
 801684a:	b948      	cbnz	r0, 8016860 <__smakebuf_r+0x44>
 801684c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016850:	059a      	lsls	r2, r3, #22
 8016852:	d4ef      	bmi.n	8016834 <__smakebuf_r+0x18>
 8016854:	f023 0303 	bic.w	r3, r3, #3
 8016858:	f043 0302 	orr.w	r3, r3, #2
 801685c:	81a3      	strh	r3, [r4, #12]
 801685e:	e7e3      	b.n	8016828 <__smakebuf_r+0xc>
 8016860:	4b0d      	ldr	r3, [pc, #52]	; (8016898 <__smakebuf_r+0x7c>)
 8016862:	62b3      	str	r3, [r6, #40]	; 0x28
 8016864:	89a3      	ldrh	r3, [r4, #12]
 8016866:	6020      	str	r0, [r4, #0]
 8016868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801686c:	81a3      	strh	r3, [r4, #12]
 801686e:	9b00      	ldr	r3, [sp, #0]
 8016870:	6163      	str	r3, [r4, #20]
 8016872:	9b01      	ldr	r3, [sp, #4]
 8016874:	6120      	str	r0, [r4, #16]
 8016876:	b15b      	cbz	r3, 8016890 <__smakebuf_r+0x74>
 8016878:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801687c:	4630      	mov	r0, r6
 801687e:	f001 fb95 	bl	8017fac <_isatty_r>
 8016882:	b128      	cbz	r0, 8016890 <__smakebuf_r+0x74>
 8016884:	89a3      	ldrh	r3, [r4, #12]
 8016886:	f023 0303 	bic.w	r3, r3, #3
 801688a:	f043 0301 	orr.w	r3, r3, #1
 801688e:	81a3      	strh	r3, [r4, #12]
 8016890:	89a0      	ldrh	r0, [r4, #12]
 8016892:	4305      	orrs	r5, r0
 8016894:	81a5      	strh	r5, [r4, #12]
 8016896:	e7cd      	b.n	8016834 <__smakebuf_r+0x18>
 8016898:	08012d29 	.word	0x08012d29

0801689c <__ascii_mbtowc>:
 801689c:	b082      	sub	sp, #8
 801689e:	b901      	cbnz	r1, 80168a2 <__ascii_mbtowc+0x6>
 80168a0:	a901      	add	r1, sp, #4
 80168a2:	b142      	cbz	r2, 80168b6 <__ascii_mbtowc+0x1a>
 80168a4:	b14b      	cbz	r3, 80168ba <__ascii_mbtowc+0x1e>
 80168a6:	7813      	ldrb	r3, [r2, #0]
 80168a8:	600b      	str	r3, [r1, #0]
 80168aa:	7812      	ldrb	r2, [r2, #0]
 80168ac:	1e10      	subs	r0, r2, #0
 80168ae:	bf18      	it	ne
 80168b0:	2001      	movne	r0, #1
 80168b2:	b002      	add	sp, #8
 80168b4:	4770      	bx	lr
 80168b6:	4610      	mov	r0, r2
 80168b8:	e7fb      	b.n	80168b2 <__ascii_mbtowc+0x16>
 80168ba:	f06f 0001 	mvn.w	r0, #1
 80168be:	e7f8      	b.n	80168b2 <__ascii_mbtowc+0x16>

080168c0 <__malloc_lock>:
 80168c0:	4801      	ldr	r0, [pc, #4]	; (80168c8 <__malloc_lock+0x8>)
 80168c2:	f7fc bb28 	b.w	8012f16 <__retarget_lock_acquire_recursive>
 80168c6:	bf00      	nop
 80168c8:	20006544 	.word	0x20006544

080168cc <__malloc_unlock>:
 80168cc:	4801      	ldr	r0, [pc, #4]	; (80168d4 <__malloc_unlock+0x8>)
 80168ce:	f7fc bb23 	b.w	8012f18 <__retarget_lock_release_recursive>
 80168d2:	bf00      	nop
 80168d4:	20006544 	.word	0x20006544

080168d8 <_Balloc>:
 80168d8:	b570      	push	{r4, r5, r6, lr}
 80168da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80168dc:	4604      	mov	r4, r0
 80168de:	460d      	mov	r5, r1
 80168e0:	b976      	cbnz	r6, 8016900 <_Balloc+0x28>
 80168e2:	2010      	movs	r0, #16
 80168e4:	f7fc fb1a 	bl	8012f1c <malloc>
 80168e8:	4602      	mov	r2, r0
 80168ea:	6260      	str	r0, [r4, #36]	; 0x24
 80168ec:	b920      	cbnz	r0, 80168f8 <_Balloc+0x20>
 80168ee:	4b18      	ldr	r3, [pc, #96]	; (8016950 <_Balloc+0x78>)
 80168f0:	4818      	ldr	r0, [pc, #96]	; (8016954 <_Balloc+0x7c>)
 80168f2:	2166      	movs	r1, #102	; 0x66
 80168f4:	f7fe fc6e 	bl	80151d4 <__assert_func>
 80168f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80168fc:	6006      	str	r6, [r0, #0]
 80168fe:	60c6      	str	r6, [r0, #12]
 8016900:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016902:	68f3      	ldr	r3, [r6, #12]
 8016904:	b183      	cbz	r3, 8016928 <_Balloc+0x50>
 8016906:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016908:	68db      	ldr	r3, [r3, #12]
 801690a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801690e:	b9b8      	cbnz	r0, 8016940 <_Balloc+0x68>
 8016910:	2101      	movs	r1, #1
 8016912:	fa01 f605 	lsl.w	r6, r1, r5
 8016916:	1d72      	adds	r2, r6, #5
 8016918:	0092      	lsls	r2, r2, #2
 801691a:	4620      	mov	r0, r4
 801691c:	f000 fc97 	bl	801724e <_calloc_r>
 8016920:	b160      	cbz	r0, 801693c <_Balloc+0x64>
 8016922:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8016926:	e00e      	b.n	8016946 <_Balloc+0x6e>
 8016928:	2221      	movs	r2, #33	; 0x21
 801692a:	2104      	movs	r1, #4
 801692c:	4620      	mov	r0, r4
 801692e:	f000 fc8e 	bl	801724e <_calloc_r>
 8016932:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016934:	60f0      	str	r0, [r6, #12]
 8016936:	68db      	ldr	r3, [r3, #12]
 8016938:	2b00      	cmp	r3, #0
 801693a:	d1e4      	bne.n	8016906 <_Balloc+0x2e>
 801693c:	2000      	movs	r0, #0
 801693e:	bd70      	pop	{r4, r5, r6, pc}
 8016940:	6802      	ldr	r2, [r0, #0]
 8016942:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016946:	2300      	movs	r3, #0
 8016948:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801694c:	e7f7      	b.n	801693e <_Balloc+0x66>
 801694e:	bf00      	nop
 8016950:	0801a2e9 	.word	0x0801a2e9
 8016954:	0801a3f0 	.word	0x0801a3f0

08016958 <_Bfree>:
 8016958:	b570      	push	{r4, r5, r6, lr}
 801695a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801695c:	4605      	mov	r5, r0
 801695e:	460c      	mov	r4, r1
 8016960:	b976      	cbnz	r6, 8016980 <_Bfree+0x28>
 8016962:	2010      	movs	r0, #16
 8016964:	f7fc fada 	bl	8012f1c <malloc>
 8016968:	4602      	mov	r2, r0
 801696a:	6268      	str	r0, [r5, #36]	; 0x24
 801696c:	b920      	cbnz	r0, 8016978 <_Bfree+0x20>
 801696e:	4b09      	ldr	r3, [pc, #36]	; (8016994 <_Bfree+0x3c>)
 8016970:	4809      	ldr	r0, [pc, #36]	; (8016998 <_Bfree+0x40>)
 8016972:	218a      	movs	r1, #138	; 0x8a
 8016974:	f7fe fc2e 	bl	80151d4 <__assert_func>
 8016978:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801697c:	6006      	str	r6, [r0, #0]
 801697e:	60c6      	str	r6, [r0, #12]
 8016980:	b13c      	cbz	r4, 8016992 <_Bfree+0x3a>
 8016982:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8016984:	6862      	ldr	r2, [r4, #4]
 8016986:	68db      	ldr	r3, [r3, #12]
 8016988:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801698c:	6021      	str	r1, [r4, #0]
 801698e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8016992:	bd70      	pop	{r4, r5, r6, pc}
 8016994:	0801a2e9 	.word	0x0801a2e9
 8016998:	0801a3f0 	.word	0x0801a3f0

0801699c <__multadd>:
 801699c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80169a0:	690e      	ldr	r6, [r1, #16]
 80169a2:	4607      	mov	r7, r0
 80169a4:	4698      	mov	r8, r3
 80169a6:	460c      	mov	r4, r1
 80169a8:	f101 0014 	add.w	r0, r1, #20
 80169ac:	2300      	movs	r3, #0
 80169ae:	6805      	ldr	r5, [r0, #0]
 80169b0:	b2a9      	uxth	r1, r5
 80169b2:	fb02 8101 	mla	r1, r2, r1, r8
 80169b6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80169ba:	0c2d      	lsrs	r5, r5, #16
 80169bc:	fb02 c505 	mla	r5, r2, r5, ip
 80169c0:	b289      	uxth	r1, r1
 80169c2:	3301      	adds	r3, #1
 80169c4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80169c8:	429e      	cmp	r6, r3
 80169ca:	f840 1b04 	str.w	r1, [r0], #4
 80169ce:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80169d2:	dcec      	bgt.n	80169ae <__multadd+0x12>
 80169d4:	f1b8 0f00 	cmp.w	r8, #0
 80169d8:	d022      	beq.n	8016a20 <__multadd+0x84>
 80169da:	68a3      	ldr	r3, [r4, #8]
 80169dc:	42b3      	cmp	r3, r6
 80169de:	dc19      	bgt.n	8016a14 <__multadd+0x78>
 80169e0:	6861      	ldr	r1, [r4, #4]
 80169e2:	4638      	mov	r0, r7
 80169e4:	3101      	adds	r1, #1
 80169e6:	f7ff ff77 	bl	80168d8 <_Balloc>
 80169ea:	4605      	mov	r5, r0
 80169ec:	b928      	cbnz	r0, 80169fa <__multadd+0x5e>
 80169ee:	4602      	mov	r2, r0
 80169f0:	4b0d      	ldr	r3, [pc, #52]	; (8016a28 <__multadd+0x8c>)
 80169f2:	480e      	ldr	r0, [pc, #56]	; (8016a2c <__multadd+0x90>)
 80169f4:	21b5      	movs	r1, #181	; 0xb5
 80169f6:	f7fe fbed 	bl	80151d4 <__assert_func>
 80169fa:	6922      	ldr	r2, [r4, #16]
 80169fc:	3202      	adds	r2, #2
 80169fe:	f104 010c 	add.w	r1, r4, #12
 8016a02:	0092      	lsls	r2, r2, #2
 8016a04:	300c      	adds	r0, #12
 8016a06:	f7fc fa99 	bl	8012f3c <memcpy>
 8016a0a:	4621      	mov	r1, r4
 8016a0c:	4638      	mov	r0, r7
 8016a0e:	f7ff ffa3 	bl	8016958 <_Bfree>
 8016a12:	462c      	mov	r4, r5
 8016a14:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8016a18:	3601      	adds	r6, #1
 8016a1a:	f8c3 8014 	str.w	r8, [r3, #20]
 8016a1e:	6126      	str	r6, [r4, #16]
 8016a20:	4620      	mov	r0, r4
 8016a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a26:	bf00      	nop
 8016a28:	0801a35f 	.word	0x0801a35f
 8016a2c:	0801a3f0 	.word	0x0801a3f0

08016a30 <__s2b>:
 8016a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016a34:	460c      	mov	r4, r1
 8016a36:	4615      	mov	r5, r2
 8016a38:	461f      	mov	r7, r3
 8016a3a:	2209      	movs	r2, #9
 8016a3c:	3308      	adds	r3, #8
 8016a3e:	4606      	mov	r6, r0
 8016a40:	fb93 f3f2 	sdiv	r3, r3, r2
 8016a44:	2100      	movs	r1, #0
 8016a46:	2201      	movs	r2, #1
 8016a48:	429a      	cmp	r2, r3
 8016a4a:	db09      	blt.n	8016a60 <__s2b+0x30>
 8016a4c:	4630      	mov	r0, r6
 8016a4e:	f7ff ff43 	bl	80168d8 <_Balloc>
 8016a52:	b940      	cbnz	r0, 8016a66 <__s2b+0x36>
 8016a54:	4602      	mov	r2, r0
 8016a56:	4b19      	ldr	r3, [pc, #100]	; (8016abc <__s2b+0x8c>)
 8016a58:	4819      	ldr	r0, [pc, #100]	; (8016ac0 <__s2b+0x90>)
 8016a5a:	21ce      	movs	r1, #206	; 0xce
 8016a5c:	f7fe fbba 	bl	80151d4 <__assert_func>
 8016a60:	0052      	lsls	r2, r2, #1
 8016a62:	3101      	adds	r1, #1
 8016a64:	e7f0      	b.n	8016a48 <__s2b+0x18>
 8016a66:	9b08      	ldr	r3, [sp, #32]
 8016a68:	6143      	str	r3, [r0, #20]
 8016a6a:	2d09      	cmp	r5, #9
 8016a6c:	f04f 0301 	mov.w	r3, #1
 8016a70:	6103      	str	r3, [r0, #16]
 8016a72:	dd16      	ble.n	8016aa2 <__s2b+0x72>
 8016a74:	f104 0909 	add.w	r9, r4, #9
 8016a78:	46c8      	mov	r8, r9
 8016a7a:	442c      	add	r4, r5
 8016a7c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8016a80:	4601      	mov	r1, r0
 8016a82:	3b30      	subs	r3, #48	; 0x30
 8016a84:	220a      	movs	r2, #10
 8016a86:	4630      	mov	r0, r6
 8016a88:	f7ff ff88 	bl	801699c <__multadd>
 8016a8c:	45a0      	cmp	r8, r4
 8016a8e:	d1f5      	bne.n	8016a7c <__s2b+0x4c>
 8016a90:	f1a5 0408 	sub.w	r4, r5, #8
 8016a94:	444c      	add	r4, r9
 8016a96:	1b2d      	subs	r5, r5, r4
 8016a98:	1963      	adds	r3, r4, r5
 8016a9a:	42bb      	cmp	r3, r7
 8016a9c:	db04      	blt.n	8016aa8 <__s2b+0x78>
 8016a9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016aa2:	340a      	adds	r4, #10
 8016aa4:	2509      	movs	r5, #9
 8016aa6:	e7f6      	b.n	8016a96 <__s2b+0x66>
 8016aa8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016aac:	4601      	mov	r1, r0
 8016aae:	3b30      	subs	r3, #48	; 0x30
 8016ab0:	220a      	movs	r2, #10
 8016ab2:	4630      	mov	r0, r6
 8016ab4:	f7ff ff72 	bl	801699c <__multadd>
 8016ab8:	e7ee      	b.n	8016a98 <__s2b+0x68>
 8016aba:	bf00      	nop
 8016abc:	0801a35f 	.word	0x0801a35f
 8016ac0:	0801a3f0 	.word	0x0801a3f0

08016ac4 <__hi0bits>:
 8016ac4:	0c03      	lsrs	r3, r0, #16
 8016ac6:	041b      	lsls	r3, r3, #16
 8016ac8:	b9d3      	cbnz	r3, 8016b00 <__hi0bits+0x3c>
 8016aca:	0400      	lsls	r0, r0, #16
 8016acc:	2310      	movs	r3, #16
 8016ace:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8016ad2:	bf04      	itt	eq
 8016ad4:	0200      	lsleq	r0, r0, #8
 8016ad6:	3308      	addeq	r3, #8
 8016ad8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8016adc:	bf04      	itt	eq
 8016ade:	0100      	lsleq	r0, r0, #4
 8016ae0:	3304      	addeq	r3, #4
 8016ae2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8016ae6:	bf04      	itt	eq
 8016ae8:	0080      	lsleq	r0, r0, #2
 8016aea:	3302      	addeq	r3, #2
 8016aec:	2800      	cmp	r0, #0
 8016aee:	db05      	blt.n	8016afc <__hi0bits+0x38>
 8016af0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8016af4:	f103 0301 	add.w	r3, r3, #1
 8016af8:	bf08      	it	eq
 8016afa:	2320      	moveq	r3, #32
 8016afc:	4618      	mov	r0, r3
 8016afe:	4770      	bx	lr
 8016b00:	2300      	movs	r3, #0
 8016b02:	e7e4      	b.n	8016ace <__hi0bits+0xa>

08016b04 <__lo0bits>:
 8016b04:	6803      	ldr	r3, [r0, #0]
 8016b06:	f013 0207 	ands.w	r2, r3, #7
 8016b0a:	4601      	mov	r1, r0
 8016b0c:	d00b      	beq.n	8016b26 <__lo0bits+0x22>
 8016b0e:	07da      	lsls	r2, r3, #31
 8016b10:	d424      	bmi.n	8016b5c <__lo0bits+0x58>
 8016b12:	0798      	lsls	r0, r3, #30
 8016b14:	bf49      	itett	mi
 8016b16:	085b      	lsrmi	r3, r3, #1
 8016b18:	089b      	lsrpl	r3, r3, #2
 8016b1a:	2001      	movmi	r0, #1
 8016b1c:	600b      	strmi	r3, [r1, #0]
 8016b1e:	bf5c      	itt	pl
 8016b20:	600b      	strpl	r3, [r1, #0]
 8016b22:	2002      	movpl	r0, #2
 8016b24:	4770      	bx	lr
 8016b26:	b298      	uxth	r0, r3
 8016b28:	b9b0      	cbnz	r0, 8016b58 <__lo0bits+0x54>
 8016b2a:	0c1b      	lsrs	r3, r3, #16
 8016b2c:	2010      	movs	r0, #16
 8016b2e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8016b32:	bf04      	itt	eq
 8016b34:	0a1b      	lsreq	r3, r3, #8
 8016b36:	3008      	addeq	r0, #8
 8016b38:	071a      	lsls	r2, r3, #28
 8016b3a:	bf04      	itt	eq
 8016b3c:	091b      	lsreq	r3, r3, #4
 8016b3e:	3004      	addeq	r0, #4
 8016b40:	079a      	lsls	r2, r3, #30
 8016b42:	bf04      	itt	eq
 8016b44:	089b      	lsreq	r3, r3, #2
 8016b46:	3002      	addeq	r0, #2
 8016b48:	07da      	lsls	r2, r3, #31
 8016b4a:	d403      	bmi.n	8016b54 <__lo0bits+0x50>
 8016b4c:	085b      	lsrs	r3, r3, #1
 8016b4e:	f100 0001 	add.w	r0, r0, #1
 8016b52:	d005      	beq.n	8016b60 <__lo0bits+0x5c>
 8016b54:	600b      	str	r3, [r1, #0]
 8016b56:	4770      	bx	lr
 8016b58:	4610      	mov	r0, r2
 8016b5a:	e7e8      	b.n	8016b2e <__lo0bits+0x2a>
 8016b5c:	2000      	movs	r0, #0
 8016b5e:	4770      	bx	lr
 8016b60:	2020      	movs	r0, #32
 8016b62:	4770      	bx	lr

08016b64 <__i2b>:
 8016b64:	b510      	push	{r4, lr}
 8016b66:	460c      	mov	r4, r1
 8016b68:	2101      	movs	r1, #1
 8016b6a:	f7ff feb5 	bl	80168d8 <_Balloc>
 8016b6e:	4602      	mov	r2, r0
 8016b70:	b928      	cbnz	r0, 8016b7e <__i2b+0x1a>
 8016b72:	4b05      	ldr	r3, [pc, #20]	; (8016b88 <__i2b+0x24>)
 8016b74:	4805      	ldr	r0, [pc, #20]	; (8016b8c <__i2b+0x28>)
 8016b76:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8016b7a:	f7fe fb2b 	bl	80151d4 <__assert_func>
 8016b7e:	2301      	movs	r3, #1
 8016b80:	6144      	str	r4, [r0, #20]
 8016b82:	6103      	str	r3, [r0, #16]
 8016b84:	bd10      	pop	{r4, pc}
 8016b86:	bf00      	nop
 8016b88:	0801a35f 	.word	0x0801a35f
 8016b8c:	0801a3f0 	.word	0x0801a3f0

08016b90 <__multiply>:
 8016b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b94:	4614      	mov	r4, r2
 8016b96:	690a      	ldr	r2, [r1, #16]
 8016b98:	6923      	ldr	r3, [r4, #16]
 8016b9a:	429a      	cmp	r2, r3
 8016b9c:	bfb8      	it	lt
 8016b9e:	460b      	movlt	r3, r1
 8016ba0:	460d      	mov	r5, r1
 8016ba2:	bfbc      	itt	lt
 8016ba4:	4625      	movlt	r5, r4
 8016ba6:	461c      	movlt	r4, r3
 8016ba8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8016bac:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8016bb0:	68ab      	ldr	r3, [r5, #8]
 8016bb2:	6869      	ldr	r1, [r5, #4]
 8016bb4:	eb0a 0709 	add.w	r7, sl, r9
 8016bb8:	42bb      	cmp	r3, r7
 8016bba:	b085      	sub	sp, #20
 8016bbc:	bfb8      	it	lt
 8016bbe:	3101      	addlt	r1, #1
 8016bc0:	f7ff fe8a 	bl	80168d8 <_Balloc>
 8016bc4:	b930      	cbnz	r0, 8016bd4 <__multiply+0x44>
 8016bc6:	4602      	mov	r2, r0
 8016bc8:	4b42      	ldr	r3, [pc, #264]	; (8016cd4 <__multiply+0x144>)
 8016bca:	4843      	ldr	r0, [pc, #268]	; (8016cd8 <__multiply+0x148>)
 8016bcc:	f240 115d 	movw	r1, #349	; 0x15d
 8016bd0:	f7fe fb00 	bl	80151d4 <__assert_func>
 8016bd4:	f100 0614 	add.w	r6, r0, #20
 8016bd8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8016bdc:	4633      	mov	r3, r6
 8016bde:	2200      	movs	r2, #0
 8016be0:	4543      	cmp	r3, r8
 8016be2:	d31e      	bcc.n	8016c22 <__multiply+0x92>
 8016be4:	f105 0c14 	add.w	ip, r5, #20
 8016be8:	f104 0314 	add.w	r3, r4, #20
 8016bec:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8016bf0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8016bf4:	9202      	str	r2, [sp, #8]
 8016bf6:	ebac 0205 	sub.w	r2, ip, r5
 8016bfa:	3a15      	subs	r2, #21
 8016bfc:	f022 0203 	bic.w	r2, r2, #3
 8016c00:	3204      	adds	r2, #4
 8016c02:	f105 0115 	add.w	r1, r5, #21
 8016c06:	458c      	cmp	ip, r1
 8016c08:	bf38      	it	cc
 8016c0a:	2204      	movcc	r2, #4
 8016c0c:	9201      	str	r2, [sp, #4]
 8016c0e:	9a02      	ldr	r2, [sp, #8]
 8016c10:	9303      	str	r3, [sp, #12]
 8016c12:	429a      	cmp	r2, r3
 8016c14:	d808      	bhi.n	8016c28 <__multiply+0x98>
 8016c16:	2f00      	cmp	r7, #0
 8016c18:	dc55      	bgt.n	8016cc6 <__multiply+0x136>
 8016c1a:	6107      	str	r7, [r0, #16]
 8016c1c:	b005      	add	sp, #20
 8016c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c22:	f843 2b04 	str.w	r2, [r3], #4
 8016c26:	e7db      	b.n	8016be0 <__multiply+0x50>
 8016c28:	f8b3 a000 	ldrh.w	sl, [r3]
 8016c2c:	f1ba 0f00 	cmp.w	sl, #0
 8016c30:	d020      	beq.n	8016c74 <__multiply+0xe4>
 8016c32:	f105 0e14 	add.w	lr, r5, #20
 8016c36:	46b1      	mov	r9, r6
 8016c38:	2200      	movs	r2, #0
 8016c3a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8016c3e:	f8d9 b000 	ldr.w	fp, [r9]
 8016c42:	b2a1      	uxth	r1, r4
 8016c44:	fa1f fb8b 	uxth.w	fp, fp
 8016c48:	fb0a b101 	mla	r1, sl, r1, fp
 8016c4c:	4411      	add	r1, r2
 8016c4e:	f8d9 2000 	ldr.w	r2, [r9]
 8016c52:	0c24      	lsrs	r4, r4, #16
 8016c54:	0c12      	lsrs	r2, r2, #16
 8016c56:	fb0a 2404 	mla	r4, sl, r4, r2
 8016c5a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8016c5e:	b289      	uxth	r1, r1
 8016c60:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8016c64:	45f4      	cmp	ip, lr
 8016c66:	f849 1b04 	str.w	r1, [r9], #4
 8016c6a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8016c6e:	d8e4      	bhi.n	8016c3a <__multiply+0xaa>
 8016c70:	9901      	ldr	r1, [sp, #4]
 8016c72:	5072      	str	r2, [r6, r1]
 8016c74:	9a03      	ldr	r2, [sp, #12]
 8016c76:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8016c7a:	3304      	adds	r3, #4
 8016c7c:	f1b9 0f00 	cmp.w	r9, #0
 8016c80:	d01f      	beq.n	8016cc2 <__multiply+0x132>
 8016c82:	6834      	ldr	r4, [r6, #0]
 8016c84:	f105 0114 	add.w	r1, r5, #20
 8016c88:	46b6      	mov	lr, r6
 8016c8a:	f04f 0a00 	mov.w	sl, #0
 8016c8e:	880a      	ldrh	r2, [r1, #0]
 8016c90:	f8be b002 	ldrh.w	fp, [lr, #2]
 8016c94:	fb09 b202 	mla	r2, r9, r2, fp
 8016c98:	4492      	add	sl, r2
 8016c9a:	b2a4      	uxth	r4, r4
 8016c9c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8016ca0:	f84e 4b04 	str.w	r4, [lr], #4
 8016ca4:	f851 4b04 	ldr.w	r4, [r1], #4
 8016ca8:	f8be 2000 	ldrh.w	r2, [lr]
 8016cac:	0c24      	lsrs	r4, r4, #16
 8016cae:	fb09 2404 	mla	r4, r9, r4, r2
 8016cb2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8016cb6:	458c      	cmp	ip, r1
 8016cb8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8016cbc:	d8e7      	bhi.n	8016c8e <__multiply+0xfe>
 8016cbe:	9a01      	ldr	r2, [sp, #4]
 8016cc0:	50b4      	str	r4, [r6, r2]
 8016cc2:	3604      	adds	r6, #4
 8016cc4:	e7a3      	b.n	8016c0e <__multiply+0x7e>
 8016cc6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	d1a5      	bne.n	8016c1a <__multiply+0x8a>
 8016cce:	3f01      	subs	r7, #1
 8016cd0:	e7a1      	b.n	8016c16 <__multiply+0x86>
 8016cd2:	bf00      	nop
 8016cd4:	0801a35f 	.word	0x0801a35f
 8016cd8:	0801a3f0 	.word	0x0801a3f0

08016cdc <__pow5mult>:
 8016cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016ce0:	4615      	mov	r5, r2
 8016ce2:	f012 0203 	ands.w	r2, r2, #3
 8016ce6:	4606      	mov	r6, r0
 8016ce8:	460f      	mov	r7, r1
 8016cea:	d007      	beq.n	8016cfc <__pow5mult+0x20>
 8016cec:	4c25      	ldr	r4, [pc, #148]	; (8016d84 <__pow5mult+0xa8>)
 8016cee:	3a01      	subs	r2, #1
 8016cf0:	2300      	movs	r3, #0
 8016cf2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016cf6:	f7ff fe51 	bl	801699c <__multadd>
 8016cfa:	4607      	mov	r7, r0
 8016cfc:	10ad      	asrs	r5, r5, #2
 8016cfe:	d03d      	beq.n	8016d7c <__pow5mult+0xa0>
 8016d00:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8016d02:	b97c      	cbnz	r4, 8016d24 <__pow5mult+0x48>
 8016d04:	2010      	movs	r0, #16
 8016d06:	f7fc f909 	bl	8012f1c <malloc>
 8016d0a:	4602      	mov	r2, r0
 8016d0c:	6270      	str	r0, [r6, #36]	; 0x24
 8016d0e:	b928      	cbnz	r0, 8016d1c <__pow5mult+0x40>
 8016d10:	4b1d      	ldr	r3, [pc, #116]	; (8016d88 <__pow5mult+0xac>)
 8016d12:	481e      	ldr	r0, [pc, #120]	; (8016d8c <__pow5mult+0xb0>)
 8016d14:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8016d18:	f7fe fa5c 	bl	80151d4 <__assert_func>
 8016d1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016d20:	6004      	str	r4, [r0, #0]
 8016d22:	60c4      	str	r4, [r0, #12]
 8016d24:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8016d28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016d2c:	b94c      	cbnz	r4, 8016d42 <__pow5mult+0x66>
 8016d2e:	f240 2171 	movw	r1, #625	; 0x271
 8016d32:	4630      	mov	r0, r6
 8016d34:	f7ff ff16 	bl	8016b64 <__i2b>
 8016d38:	2300      	movs	r3, #0
 8016d3a:	f8c8 0008 	str.w	r0, [r8, #8]
 8016d3e:	4604      	mov	r4, r0
 8016d40:	6003      	str	r3, [r0, #0]
 8016d42:	f04f 0900 	mov.w	r9, #0
 8016d46:	07eb      	lsls	r3, r5, #31
 8016d48:	d50a      	bpl.n	8016d60 <__pow5mult+0x84>
 8016d4a:	4639      	mov	r1, r7
 8016d4c:	4622      	mov	r2, r4
 8016d4e:	4630      	mov	r0, r6
 8016d50:	f7ff ff1e 	bl	8016b90 <__multiply>
 8016d54:	4639      	mov	r1, r7
 8016d56:	4680      	mov	r8, r0
 8016d58:	4630      	mov	r0, r6
 8016d5a:	f7ff fdfd 	bl	8016958 <_Bfree>
 8016d5e:	4647      	mov	r7, r8
 8016d60:	106d      	asrs	r5, r5, #1
 8016d62:	d00b      	beq.n	8016d7c <__pow5mult+0xa0>
 8016d64:	6820      	ldr	r0, [r4, #0]
 8016d66:	b938      	cbnz	r0, 8016d78 <__pow5mult+0x9c>
 8016d68:	4622      	mov	r2, r4
 8016d6a:	4621      	mov	r1, r4
 8016d6c:	4630      	mov	r0, r6
 8016d6e:	f7ff ff0f 	bl	8016b90 <__multiply>
 8016d72:	6020      	str	r0, [r4, #0]
 8016d74:	f8c0 9000 	str.w	r9, [r0]
 8016d78:	4604      	mov	r4, r0
 8016d7a:	e7e4      	b.n	8016d46 <__pow5mult+0x6a>
 8016d7c:	4638      	mov	r0, r7
 8016d7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016d82:	bf00      	nop
 8016d84:	0801a540 	.word	0x0801a540
 8016d88:	0801a2e9 	.word	0x0801a2e9
 8016d8c:	0801a3f0 	.word	0x0801a3f0

08016d90 <__lshift>:
 8016d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016d94:	460c      	mov	r4, r1
 8016d96:	6849      	ldr	r1, [r1, #4]
 8016d98:	6923      	ldr	r3, [r4, #16]
 8016d9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016d9e:	68a3      	ldr	r3, [r4, #8]
 8016da0:	4607      	mov	r7, r0
 8016da2:	4691      	mov	r9, r2
 8016da4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016da8:	f108 0601 	add.w	r6, r8, #1
 8016dac:	42b3      	cmp	r3, r6
 8016dae:	db0b      	blt.n	8016dc8 <__lshift+0x38>
 8016db0:	4638      	mov	r0, r7
 8016db2:	f7ff fd91 	bl	80168d8 <_Balloc>
 8016db6:	4605      	mov	r5, r0
 8016db8:	b948      	cbnz	r0, 8016dce <__lshift+0x3e>
 8016dba:	4602      	mov	r2, r0
 8016dbc:	4b28      	ldr	r3, [pc, #160]	; (8016e60 <__lshift+0xd0>)
 8016dbe:	4829      	ldr	r0, [pc, #164]	; (8016e64 <__lshift+0xd4>)
 8016dc0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8016dc4:	f7fe fa06 	bl	80151d4 <__assert_func>
 8016dc8:	3101      	adds	r1, #1
 8016dca:	005b      	lsls	r3, r3, #1
 8016dcc:	e7ee      	b.n	8016dac <__lshift+0x1c>
 8016dce:	2300      	movs	r3, #0
 8016dd0:	f100 0114 	add.w	r1, r0, #20
 8016dd4:	f100 0210 	add.w	r2, r0, #16
 8016dd8:	4618      	mov	r0, r3
 8016dda:	4553      	cmp	r3, sl
 8016ddc:	db33      	blt.n	8016e46 <__lshift+0xb6>
 8016dde:	6920      	ldr	r0, [r4, #16]
 8016de0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016de4:	f104 0314 	add.w	r3, r4, #20
 8016de8:	f019 091f 	ands.w	r9, r9, #31
 8016dec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016df0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016df4:	d02b      	beq.n	8016e4e <__lshift+0xbe>
 8016df6:	f1c9 0e20 	rsb	lr, r9, #32
 8016dfa:	468a      	mov	sl, r1
 8016dfc:	2200      	movs	r2, #0
 8016dfe:	6818      	ldr	r0, [r3, #0]
 8016e00:	fa00 f009 	lsl.w	r0, r0, r9
 8016e04:	4302      	orrs	r2, r0
 8016e06:	f84a 2b04 	str.w	r2, [sl], #4
 8016e0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8016e0e:	459c      	cmp	ip, r3
 8016e10:	fa22 f20e 	lsr.w	r2, r2, lr
 8016e14:	d8f3      	bhi.n	8016dfe <__lshift+0x6e>
 8016e16:	ebac 0304 	sub.w	r3, ip, r4
 8016e1a:	3b15      	subs	r3, #21
 8016e1c:	f023 0303 	bic.w	r3, r3, #3
 8016e20:	3304      	adds	r3, #4
 8016e22:	f104 0015 	add.w	r0, r4, #21
 8016e26:	4584      	cmp	ip, r0
 8016e28:	bf38      	it	cc
 8016e2a:	2304      	movcc	r3, #4
 8016e2c:	50ca      	str	r2, [r1, r3]
 8016e2e:	b10a      	cbz	r2, 8016e34 <__lshift+0xa4>
 8016e30:	f108 0602 	add.w	r6, r8, #2
 8016e34:	3e01      	subs	r6, #1
 8016e36:	4638      	mov	r0, r7
 8016e38:	612e      	str	r6, [r5, #16]
 8016e3a:	4621      	mov	r1, r4
 8016e3c:	f7ff fd8c 	bl	8016958 <_Bfree>
 8016e40:	4628      	mov	r0, r5
 8016e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016e46:	f842 0f04 	str.w	r0, [r2, #4]!
 8016e4a:	3301      	adds	r3, #1
 8016e4c:	e7c5      	b.n	8016dda <__lshift+0x4a>
 8016e4e:	3904      	subs	r1, #4
 8016e50:	f853 2b04 	ldr.w	r2, [r3], #4
 8016e54:	f841 2f04 	str.w	r2, [r1, #4]!
 8016e58:	459c      	cmp	ip, r3
 8016e5a:	d8f9      	bhi.n	8016e50 <__lshift+0xc0>
 8016e5c:	e7ea      	b.n	8016e34 <__lshift+0xa4>
 8016e5e:	bf00      	nop
 8016e60:	0801a35f 	.word	0x0801a35f
 8016e64:	0801a3f0 	.word	0x0801a3f0

08016e68 <__mcmp>:
 8016e68:	b530      	push	{r4, r5, lr}
 8016e6a:	6902      	ldr	r2, [r0, #16]
 8016e6c:	690c      	ldr	r4, [r1, #16]
 8016e6e:	1b12      	subs	r2, r2, r4
 8016e70:	d10e      	bne.n	8016e90 <__mcmp+0x28>
 8016e72:	f100 0314 	add.w	r3, r0, #20
 8016e76:	3114      	adds	r1, #20
 8016e78:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8016e7c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8016e80:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8016e84:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8016e88:	42a5      	cmp	r5, r4
 8016e8a:	d003      	beq.n	8016e94 <__mcmp+0x2c>
 8016e8c:	d305      	bcc.n	8016e9a <__mcmp+0x32>
 8016e8e:	2201      	movs	r2, #1
 8016e90:	4610      	mov	r0, r2
 8016e92:	bd30      	pop	{r4, r5, pc}
 8016e94:	4283      	cmp	r3, r0
 8016e96:	d3f3      	bcc.n	8016e80 <__mcmp+0x18>
 8016e98:	e7fa      	b.n	8016e90 <__mcmp+0x28>
 8016e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8016e9e:	e7f7      	b.n	8016e90 <__mcmp+0x28>

08016ea0 <__mdiff>:
 8016ea0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ea4:	460c      	mov	r4, r1
 8016ea6:	4606      	mov	r6, r0
 8016ea8:	4611      	mov	r1, r2
 8016eaa:	4620      	mov	r0, r4
 8016eac:	4617      	mov	r7, r2
 8016eae:	f7ff ffdb 	bl	8016e68 <__mcmp>
 8016eb2:	1e05      	subs	r5, r0, #0
 8016eb4:	d110      	bne.n	8016ed8 <__mdiff+0x38>
 8016eb6:	4629      	mov	r1, r5
 8016eb8:	4630      	mov	r0, r6
 8016eba:	f7ff fd0d 	bl	80168d8 <_Balloc>
 8016ebe:	b930      	cbnz	r0, 8016ece <__mdiff+0x2e>
 8016ec0:	4b39      	ldr	r3, [pc, #228]	; (8016fa8 <__mdiff+0x108>)
 8016ec2:	4602      	mov	r2, r0
 8016ec4:	f240 2132 	movw	r1, #562	; 0x232
 8016ec8:	4838      	ldr	r0, [pc, #224]	; (8016fac <__mdiff+0x10c>)
 8016eca:	f7fe f983 	bl	80151d4 <__assert_func>
 8016ece:	2301      	movs	r3, #1
 8016ed0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016ed4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ed8:	bfa4      	itt	ge
 8016eda:	463b      	movge	r3, r7
 8016edc:	4627      	movge	r7, r4
 8016ede:	4630      	mov	r0, r6
 8016ee0:	6879      	ldr	r1, [r7, #4]
 8016ee2:	bfa6      	itte	ge
 8016ee4:	461c      	movge	r4, r3
 8016ee6:	2500      	movge	r5, #0
 8016ee8:	2501      	movlt	r5, #1
 8016eea:	f7ff fcf5 	bl	80168d8 <_Balloc>
 8016eee:	b920      	cbnz	r0, 8016efa <__mdiff+0x5a>
 8016ef0:	4b2d      	ldr	r3, [pc, #180]	; (8016fa8 <__mdiff+0x108>)
 8016ef2:	4602      	mov	r2, r0
 8016ef4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8016ef8:	e7e6      	b.n	8016ec8 <__mdiff+0x28>
 8016efa:	693e      	ldr	r6, [r7, #16]
 8016efc:	60c5      	str	r5, [r0, #12]
 8016efe:	6925      	ldr	r5, [r4, #16]
 8016f00:	f107 0114 	add.w	r1, r7, #20
 8016f04:	f104 0914 	add.w	r9, r4, #20
 8016f08:	f100 0e14 	add.w	lr, r0, #20
 8016f0c:	f107 0210 	add.w	r2, r7, #16
 8016f10:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8016f14:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8016f18:	46f2      	mov	sl, lr
 8016f1a:	2700      	movs	r7, #0
 8016f1c:	f859 3b04 	ldr.w	r3, [r9], #4
 8016f20:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8016f24:	fa1f f883 	uxth.w	r8, r3
 8016f28:	fa17 f78b 	uxtah	r7, r7, fp
 8016f2c:	0c1b      	lsrs	r3, r3, #16
 8016f2e:	eba7 0808 	sub.w	r8, r7, r8
 8016f32:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8016f36:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8016f3a:	fa1f f888 	uxth.w	r8, r8
 8016f3e:	141f      	asrs	r7, r3, #16
 8016f40:	454d      	cmp	r5, r9
 8016f42:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8016f46:	f84a 3b04 	str.w	r3, [sl], #4
 8016f4a:	d8e7      	bhi.n	8016f1c <__mdiff+0x7c>
 8016f4c:	1b2b      	subs	r3, r5, r4
 8016f4e:	3b15      	subs	r3, #21
 8016f50:	f023 0303 	bic.w	r3, r3, #3
 8016f54:	3304      	adds	r3, #4
 8016f56:	3415      	adds	r4, #21
 8016f58:	42a5      	cmp	r5, r4
 8016f5a:	bf38      	it	cc
 8016f5c:	2304      	movcc	r3, #4
 8016f5e:	4419      	add	r1, r3
 8016f60:	4473      	add	r3, lr
 8016f62:	469e      	mov	lr, r3
 8016f64:	460d      	mov	r5, r1
 8016f66:	4565      	cmp	r5, ip
 8016f68:	d30e      	bcc.n	8016f88 <__mdiff+0xe8>
 8016f6a:	f10c 0203 	add.w	r2, ip, #3
 8016f6e:	1a52      	subs	r2, r2, r1
 8016f70:	f022 0203 	bic.w	r2, r2, #3
 8016f74:	3903      	subs	r1, #3
 8016f76:	458c      	cmp	ip, r1
 8016f78:	bf38      	it	cc
 8016f7a:	2200      	movcc	r2, #0
 8016f7c:	441a      	add	r2, r3
 8016f7e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8016f82:	b17b      	cbz	r3, 8016fa4 <__mdiff+0x104>
 8016f84:	6106      	str	r6, [r0, #16]
 8016f86:	e7a5      	b.n	8016ed4 <__mdiff+0x34>
 8016f88:	f855 8b04 	ldr.w	r8, [r5], #4
 8016f8c:	fa17 f488 	uxtah	r4, r7, r8
 8016f90:	1422      	asrs	r2, r4, #16
 8016f92:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8016f96:	b2a4      	uxth	r4, r4
 8016f98:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8016f9c:	f84e 4b04 	str.w	r4, [lr], #4
 8016fa0:	1417      	asrs	r7, r2, #16
 8016fa2:	e7e0      	b.n	8016f66 <__mdiff+0xc6>
 8016fa4:	3e01      	subs	r6, #1
 8016fa6:	e7ea      	b.n	8016f7e <__mdiff+0xde>
 8016fa8:	0801a35f 	.word	0x0801a35f
 8016fac:	0801a3f0 	.word	0x0801a3f0

08016fb0 <__ulp>:
 8016fb0:	b082      	sub	sp, #8
 8016fb2:	ed8d 0b00 	vstr	d0, [sp]
 8016fb6:	9b01      	ldr	r3, [sp, #4]
 8016fb8:	4912      	ldr	r1, [pc, #72]	; (8017004 <__ulp+0x54>)
 8016fba:	4019      	ands	r1, r3
 8016fbc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8016fc0:	2900      	cmp	r1, #0
 8016fc2:	dd05      	ble.n	8016fd0 <__ulp+0x20>
 8016fc4:	2200      	movs	r2, #0
 8016fc6:	460b      	mov	r3, r1
 8016fc8:	ec43 2b10 	vmov	d0, r2, r3
 8016fcc:	b002      	add	sp, #8
 8016fce:	4770      	bx	lr
 8016fd0:	4249      	negs	r1, r1
 8016fd2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8016fd6:	ea4f 5021 	mov.w	r0, r1, asr #20
 8016fda:	f04f 0200 	mov.w	r2, #0
 8016fde:	f04f 0300 	mov.w	r3, #0
 8016fe2:	da04      	bge.n	8016fee <__ulp+0x3e>
 8016fe4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8016fe8:	fa41 f300 	asr.w	r3, r1, r0
 8016fec:	e7ec      	b.n	8016fc8 <__ulp+0x18>
 8016fee:	f1a0 0114 	sub.w	r1, r0, #20
 8016ff2:	291e      	cmp	r1, #30
 8016ff4:	bfda      	itte	le
 8016ff6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8016ffa:	fa20 f101 	lsrle.w	r1, r0, r1
 8016ffe:	2101      	movgt	r1, #1
 8017000:	460a      	mov	r2, r1
 8017002:	e7e1      	b.n	8016fc8 <__ulp+0x18>
 8017004:	7ff00000 	.word	0x7ff00000

08017008 <__b2d>:
 8017008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801700a:	6905      	ldr	r5, [r0, #16]
 801700c:	f100 0714 	add.w	r7, r0, #20
 8017010:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8017014:	1f2e      	subs	r6, r5, #4
 8017016:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801701a:	4620      	mov	r0, r4
 801701c:	f7ff fd52 	bl	8016ac4 <__hi0bits>
 8017020:	f1c0 0320 	rsb	r3, r0, #32
 8017024:	280a      	cmp	r0, #10
 8017026:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80170a4 <__b2d+0x9c>
 801702a:	600b      	str	r3, [r1, #0]
 801702c:	dc14      	bgt.n	8017058 <__b2d+0x50>
 801702e:	f1c0 0e0b 	rsb	lr, r0, #11
 8017032:	fa24 f10e 	lsr.w	r1, r4, lr
 8017036:	42b7      	cmp	r7, r6
 8017038:	ea41 030c 	orr.w	r3, r1, ip
 801703c:	bf34      	ite	cc
 801703e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8017042:	2100      	movcs	r1, #0
 8017044:	3015      	adds	r0, #21
 8017046:	fa04 f000 	lsl.w	r0, r4, r0
 801704a:	fa21 f10e 	lsr.w	r1, r1, lr
 801704e:	ea40 0201 	orr.w	r2, r0, r1
 8017052:	ec43 2b10 	vmov	d0, r2, r3
 8017056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017058:	42b7      	cmp	r7, r6
 801705a:	bf3a      	itte	cc
 801705c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8017060:	f1a5 0608 	subcc.w	r6, r5, #8
 8017064:	2100      	movcs	r1, #0
 8017066:	380b      	subs	r0, #11
 8017068:	d017      	beq.n	801709a <__b2d+0x92>
 801706a:	f1c0 0c20 	rsb	ip, r0, #32
 801706e:	fa04 f500 	lsl.w	r5, r4, r0
 8017072:	42be      	cmp	r6, r7
 8017074:	fa21 f40c 	lsr.w	r4, r1, ip
 8017078:	ea45 0504 	orr.w	r5, r5, r4
 801707c:	bf8c      	ite	hi
 801707e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8017082:	2400      	movls	r4, #0
 8017084:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8017088:	fa01 f000 	lsl.w	r0, r1, r0
 801708c:	fa24 f40c 	lsr.w	r4, r4, ip
 8017090:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8017094:	ea40 0204 	orr.w	r2, r0, r4
 8017098:	e7db      	b.n	8017052 <__b2d+0x4a>
 801709a:	ea44 030c 	orr.w	r3, r4, ip
 801709e:	460a      	mov	r2, r1
 80170a0:	e7d7      	b.n	8017052 <__b2d+0x4a>
 80170a2:	bf00      	nop
 80170a4:	3ff00000 	.word	0x3ff00000

080170a8 <__d2b>:
 80170a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80170ac:	4689      	mov	r9, r1
 80170ae:	2101      	movs	r1, #1
 80170b0:	ec57 6b10 	vmov	r6, r7, d0
 80170b4:	4690      	mov	r8, r2
 80170b6:	f7ff fc0f 	bl	80168d8 <_Balloc>
 80170ba:	4604      	mov	r4, r0
 80170bc:	b930      	cbnz	r0, 80170cc <__d2b+0x24>
 80170be:	4602      	mov	r2, r0
 80170c0:	4b25      	ldr	r3, [pc, #148]	; (8017158 <__d2b+0xb0>)
 80170c2:	4826      	ldr	r0, [pc, #152]	; (801715c <__d2b+0xb4>)
 80170c4:	f240 310a 	movw	r1, #778	; 0x30a
 80170c8:	f7fe f884 	bl	80151d4 <__assert_func>
 80170cc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80170d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80170d4:	bb35      	cbnz	r5, 8017124 <__d2b+0x7c>
 80170d6:	2e00      	cmp	r6, #0
 80170d8:	9301      	str	r3, [sp, #4]
 80170da:	d028      	beq.n	801712e <__d2b+0x86>
 80170dc:	4668      	mov	r0, sp
 80170de:	9600      	str	r6, [sp, #0]
 80170e0:	f7ff fd10 	bl	8016b04 <__lo0bits>
 80170e4:	9900      	ldr	r1, [sp, #0]
 80170e6:	b300      	cbz	r0, 801712a <__d2b+0x82>
 80170e8:	9a01      	ldr	r2, [sp, #4]
 80170ea:	f1c0 0320 	rsb	r3, r0, #32
 80170ee:	fa02 f303 	lsl.w	r3, r2, r3
 80170f2:	430b      	orrs	r3, r1
 80170f4:	40c2      	lsrs	r2, r0
 80170f6:	6163      	str	r3, [r4, #20]
 80170f8:	9201      	str	r2, [sp, #4]
 80170fa:	9b01      	ldr	r3, [sp, #4]
 80170fc:	61a3      	str	r3, [r4, #24]
 80170fe:	2b00      	cmp	r3, #0
 8017100:	bf14      	ite	ne
 8017102:	2202      	movne	r2, #2
 8017104:	2201      	moveq	r2, #1
 8017106:	6122      	str	r2, [r4, #16]
 8017108:	b1d5      	cbz	r5, 8017140 <__d2b+0x98>
 801710a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801710e:	4405      	add	r5, r0
 8017110:	f8c9 5000 	str.w	r5, [r9]
 8017114:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017118:	f8c8 0000 	str.w	r0, [r8]
 801711c:	4620      	mov	r0, r4
 801711e:	b003      	add	sp, #12
 8017120:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017124:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017128:	e7d5      	b.n	80170d6 <__d2b+0x2e>
 801712a:	6161      	str	r1, [r4, #20]
 801712c:	e7e5      	b.n	80170fa <__d2b+0x52>
 801712e:	a801      	add	r0, sp, #4
 8017130:	f7ff fce8 	bl	8016b04 <__lo0bits>
 8017134:	9b01      	ldr	r3, [sp, #4]
 8017136:	6163      	str	r3, [r4, #20]
 8017138:	2201      	movs	r2, #1
 801713a:	6122      	str	r2, [r4, #16]
 801713c:	3020      	adds	r0, #32
 801713e:	e7e3      	b.n	8017108 <__d2b+0x60>
 8017140:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8017144:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017148:	f8c9 0000 	str.w	r0, [r9]
 801714c:	6918      	ldr	r0, [r3, #16]
 801714e:	f7ff fcb9 	bl	8016ac4 <__hi0bits>
 8017152:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8017156:	e7df      	b.n	8017118 <__d2b+0x70>
 8017158:	0801a35f 	.word	0x0801a35f
 801715c:	0801a3f0 	.word	0x0801a3f0

08017160 <__ratio>:
 8017160:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017164:	4688      	mov	r8, r1
 8017166:	4669      	mov	r1, sp
 8017168:	4681      	mov	r9, r0
 801716a:	f7ff ff4d 	bl	8017008 <__b2d>
 801716e:	a901      	add	r1, sp, #4
 8017170:	4640      	mov	r0, r8
 8017172:	ec55 4b10 	vmov	r4, r5, d0
 8017176:	f7ff ff47 	bl	8017008 <__b2d>
 801717a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801717e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8017182:	eba3 0c02 	sub.w	ip, r3, r2
 8017186:	e9dd 3200 	ldrd	r3, r2, [sp]
 801718a:	1a9b      	subs	r3, r3, r2
 801718c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8017190:	ec51 0b10 	vmov	r0, r1, d0
 8017194:	2b00      	cmp	r3, #0
 8017196:	bfd6      	itet	le
 8017198:	460a      	movle	r2, r1
 801719a:	462a      	movgt	r2, r5
 801719c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80171a0:	468b      	mov	fp, r1
 80171a2:	462f      	mov	r7, r5
 80171a4:	bfd4      	ite	le
 80171a6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80171aa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80171ae:	4620      	mov	r0, r4
 80171b0:	ee10 2a10 	vmov	r2, s0
 80171b4:	465b      	mov	r3, fp
 80171b6:	4639      	mov	r1, r7
 80171b8:	f7e9 fb68 	bl	800088c <__aeabi_ddiv>
 80171bc:	ec41 0b10 	vmov	d0, r0, r1
 80171c0:	b003      	add	sp, #12
 80171c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080171c6 <__copybits>:
 80171c6:	3901      	subs	r1, #1
 80171c8:	b570      	push	{r4, r5, r6, lr}
 80171ca:	1149      	asrs	r1, r1, #5
 80171cc:	6914      	ldr	r4, [r2, #16]
 80171ce:	3101      	adds	r1, #1
 80171d0:	f102 0314 	add.w	r3, r2, #20
 80171d4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80171d8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80171dc:	1f05      	subs	r5, r0, #4
 80171de:	42a3      	cmp	r3, r4
 80171e0:	d30c      	bcc.n	80171fc <__copybits+0x36>
 80171e2:	1aa3      	subs	r3, r4, r2
 80171e4:	3b11      	subs	r3, #17
 80171e6:	f023 0303 	bic.w	r3, r3, #3
 80171ea:	3211      	adds	r2, #17
 80171ec:	42a2      	cmp	r2, r4
 80171ee:	bf88      	it	hi
 80171f0:	2300      	movhi	r3, #0
 80171f2:	4418      	add	r0, r3
 80171f4:	2300      	movs	r3, #0
 80171f6:	4288      	cmp	r0, r1
 80171f8:	d305      	bcc.n	8017206 <__copybits+0x40>
 80171fa:	bd70      	pop	{r4, r5, r6, pc}
 80171fc:	f853 6b04 	ldr.w	r6, [r3], #4
 8017200:	f845 6f04 	str.w	r6, [r5, #4]!
 8017204:	e7eb      	b.n	80171de <__copybits+0x18>
 8017206:	f840 3b04 	str.w	r3, [r0], #4
 801720a:	e7f4      	b.n	80171f6 <__copybits+0x30>

0801720c <__any_on>:
 801720c:	f100 0214 	add.w	r2, r0, #20
 8017210:	6900      	ldr	r0, [r0, #16]
 8017212:	114b      	asrs	r3, r1, #5
 8017214:	4298      	cmp	r0, r3
 8017216:	b510      	push	{r4, lr}
 8017218:	db11      	blt.n	801723e <__any_on+0x32>
 801721a:	dd0a      	ble.n	8017232 <__any_on+0x26>
 801721c:	f011 011f 	ands.w	r1, r1, #31
 8017220:	d007      	beq.n	8017232 <__any_on+0x26>
 8017222:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8017226:	fa24 f001 	lsr.w	r0, r4, r1
 801722a:	fa00 f101 	lsl.w	r1, r0, r1
 801722e:	428c      	cmp	r4, r1
 8017230:	d10b      	bne.n	801724a <__any_on+0x3e>
 8017232:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017236:	4293      	cmp	r3, r2
 8017238:	d803      	bhi.n	8017242 <__any_on+0x36>
 801723a:	2000      	movs	r0, #0
 801723c:	bd10      	pop	{r4, pc}
 801723e:	4603      	mov	r3, r0
 8017240:	e7f7      	b.n	8017232 <__any_on+0x26>
 8017242:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017246:	2900      	cmp	r1, #0
 8017248:	d0f5      	beq.n	8017236 <__any_on+0x2a>
 801724a:	2001      	movs	r0, #1
 801724c:	e7f6      	b.n	801723c <__any_on+0x30>

0801724e <_calloc_r>:
 801724e:	b513      	push	{r0, r1, r4, lr}
 8017250:	434a      	muls	r2, r1
 8017252:	4611      	mov	r1, r2
 8017254:	9201      	str	r2, [sp, #4]
 8017256:	f7fb fef1 	bl	801303c <_malloc_r>
 801725a:	4604      	mov	r4, r0
 801725c:	b118      	cbz	r0, 8017266 <_calloc_r+0x18>
 801725e:	9a01      	ldr	r2, [sp, #4]
 8017260:	2100      	movs	r1, #0
 8017262:	f7fb fe93 	bl	8012f8c <memset>
 8017266:	4620      	mov	r0, r4
 8017268:	b002      	add	sp, #8
 801726a:	bd10      	pop	{r4, pc}

0801726c <_realloc_r>:
 801726c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801726e:	4607      	mov	r7, r0
 8017270:	4614      	mov	r4, r2
 8017272:	460e      	mov	r6, r1
 8017274:	b921      	cbnz	r1, 8017280 <_realloc_r+0x14>
 8017276:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801727a:	4611      	mov	r1, r2
 801727c:	f7fb bede 	b.w	801303c <_malloc_r>
 8017280:	b922      	cbnz	r2, 801728c <_realloc_r+0x20>
 8017282:	f7fb fe8b 	bl	8012f9c <_free_r>
 8017286:	4625      	mov	r5, r4
 8017288:	4628      	mov	r0, r5
 801728a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801728c:	f000 fe9e 	bl	8017fcc <_malloc_usable_size_r>
 8017290:	42a0      	cmp	r0, r4
 8017292:	d20f      	bcs.n	80172b4 <_realloc_r+0x48>
 8017294:	4621      	mov	r1, r4
 8017296:	4638      	mov	r0, r7
 8017298:	f7fb fed0 	bl	801303c <_malloc_r>
 801729c:	4605      	mov	r5, r0
 801729e:	2800      	cmp	r0, #0
 80172a0:	d0f2      	beq.n	8017288 <_realloc_r+0x1c>
 80172a2:	4631      	mov	r1, r6
 80172a4:	4622      	mov	r2, r4
 80172a6:	f7fb fe49 	bl	8012f3c <memcpy>
 80172aa:	4631      	mov	r1, r6
 80172ac:	4638      	mov	r0, r7
 80172ae:	f7fb fe75 	bl	8012f9c <_free_r>
 80172b2:	e7e9      	b.n	8017288 <_realloc_r+0x1c>
 80172b4:	4635      	mov	r5, r6
 80172b6:	e7e7      	b.n	8017288 <_realloc_r+0x1c>

080172b8 <__ssputs_r>:
 80172b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80172bc:	688e      	ldr	r6, [r1, #8]
 80172be:	429e      	cmp	r6, r3
 80172c0:	4682      	mov	sl, r0
 80172c2:	460c      	mov	r4, r1
 80172c4:	4690      	mov	r8, r2
 80172c6:	461f      	mov	r7, r3
 80172c8:	d838      	bhi.n	801733c <__ssputs_r+0x84>
 80172ca:	898a      	ldrh	r2, [r1, #12]
 80172cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80172d0:	d032      	beq.n	8017338 <__ssputs_r+0x80>
 80172d2:	6825      	ldr	r5, [r4, #0]
 80172d4:	6909      	ldr	r1, [r1, #16]
 80172d6:	eba5 0901 	sub.w	r9, r5, r1
 80172da:	6965      	ldr	r5, [r4, #20]
 80172dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80172e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80172e4:	3301      	adds	r3, #1
 80172e6:	444b      	add	r3, r9
 80172e8:	106d      	asrs	r5, r5, #1
 80172ea:	429d      	cmp	r5, r3
 80172ec:	bf38      	it	cc
 80172ee:	461d      	movcc	r5, r3
 80172f0:	0553      	lsls	r3, r2, #21
 80172f2:	d531      	bpl.n	8017358 <__ssputs_r+0xa0>
 80172f4:	4629      	mov	r1, r5
 80172f6:	f7fb fea1 	bl	801303c <_malloc_r>
 80172fa:	4606      	mov	r6, r0
 80172fc:	b950      	cbnz	r0, 8017314 <__ssputs_r+0x5c>
 80172fe:	230c      	movs	r3, #12
 8017300:	f8ca 3000 	str.w	r3, [sl]
 8017304:	89a3      	ldrh	r3, [r4, #12]
 8017306:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801730a:	81a3      	strh	r3, [r4, #12]
 801730c:	f04f 30ff 	mov.w	r0, #4294967295
 8017310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017314:	6921      	ldr	r1, [r4, #16]
 8017316:	464a      	mov	r2, r9
 8017318:	f7fb fe10 	bl	8012f3c <memcpy>
 801731c:	89a3      	ldrh	r3, [r4, #12]
 801731e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017326:	81a3      	strh	r3, [r4, #12]
 8017328:	6126      	str	r6, [r4, #16]
 801732a:	6165      	str	r5, [r4, #20]
 801732c:	444e      	add	r6, r9
 801732e:	eba5 0509 	sub.w	r5, r5, r9
 8017332:	6026      	str	r6, [r4, #0]
 8017334:	60a5      	str	r5, [r4, #8]
 8017336:	463e      	mov	r6, r7
 8017338:	42be      	cmp	r6, r7
 801733a:	d900      	bls.n	801733e <__ssputs_r+0x86>
 801733c:	463e      	mov	r6, r7
 801733e:	4632      	mov	r2, r6
 8017340:	6820      	ldr	r0, [r4, #0]
 8017342:	4641      	mov	r1, r8
 8017344:	f7fb fe08 	bl	8012f58 <memmove>
 8017348:	68a3      	ldr	r3, [r4, #8]
 801734a:	6822      	ldr	r2, [r4, #0]
 801734c:	1b9b      	subs	r3, r3, r6
 801734e:	4432      	add	r2, r6
 8017350:	60a3      	str	r3, [r4, #8]
 8017352:	6022      	str	r2, [r4, #0]
 8017354:	2000      	movs	r0, #0
 8017356:	e7db      	b.n	8017310 <__ssputs_r+0x58>
 8017358:	462a      	mov	r2, r5
 801735a:	f7ff ff87 	bl	801726c <_realloc_r>
 801735e:	4606      	mov	r6, r0
 8017360:	2800      	cmp	r0, #0
 8017362:	d1e1      	bne.n	8017328 <__ssputs_r+0x70>
 8017364:	6921      	ldr	r1, [r4, #16]
 8017366:	4650      	mov	r0, sl
 8017368:	f7fb fe18 	bl	8012f9c <_free_r>
 801736c:	e7c7      	b.n	80172fe <__ssputs_r+0x46>
	...

08017370 <_svfiprintf_r>:
 8017370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017374:	4698      	mov	r8, r3
 8017376:	898b      	ldrh	r3, [r1, #12]
 8017378:	061b      	lsls	r3, r3, #24
 801737a:	b09d      	sub	sp, #116	; 0x74
 801737c:	4607      	mov	r7, r0
 801737e:	460d      	mov	r5, r1
 8017380:	4614      	mov	r4, r2
 8017382:	d50e      	bpl.n	80173a2 <_svfiprintf_r+0x32>
 8017384:	690b      	ldr	r3, [r1, #16]
 8017386:	b963      	cbnz	r3, 80173a2 <_svfiprintf_r+0x32>
 8017388:	2140      	movs	r1, #64	; 0x40
 801738a:	f7fb fe57 	bl	801303c <_malloc_r>
 801738e:	6028      	str	r0, [r5, #0]
 8017390:	6128      	str	r0, [r5, #16]
 8017392:	b920      	cbnz	r0, 801739e <_svfiprintf_r+0x2e>
 8017394:	230c      	movs	r3, #12
 8017396:	603b      	str	r3, [r7, #0]
 8017398:	f04f 30ff 	mov.w	r0, #4294967295
 801739c:	e0d1      	b.n	8017542 <_svfiprintf_r+0x1d2>
 801739e:	2340      	movs	r3, #64	; 0x40
 80173a0:	616b      	str	r3, [r5, #20]
 80173a2:	2300      	movs	r3, #0
 80173a4:	9309      	str	r3, [sp, #36]	; 0x24
 80173a6:	2320      	movs	r3, #32
 80173a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80173ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80173b0:	2330      	movs	r3, #48	; 0x30
 80173b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801755c <_svfiprintf_r+0x1ec>
 80173b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80173ba:	f04f 0901 	mov.w	r9, #1
 80173be:	4623      	mov	r3, r4
 80173c0:	469a      	mov	sl, r3
 80173c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80173c6:	b10a      	cbz	r2, 80173cc <_svfiprintf_r+0x5c>
 80173c8:	2a25      	cmp	r2, #37	; 0x25
 80173ca:	d1f9      	bne.n	80173c0 <_svfiprintf_r+0x50>
 80173cc:	ebba 0b04 	subs.w	fp, sl, r4
 80173d0:	d00b      	beq.n	80173ea <_svfiprintf_r+0x7a>
 80173d2:	465b      	mov	r3, fp
 80173d4:	4622      	mov	r2, r4
 80173d6:	4629      	mov	r1, r5
 80173d8:	4638      	mov	r0, r7
 80173da:	f7ff ff6d 	bl	80172b8 <__ssputs_r>
 80173de:	3001      	adds	r0, #1
 80173e0:	f000 80aa 	beq.w	8017538 <_svfiprintf_r+0x1c8>
 80173e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80173e6:	445a      	add	r2, fp
 80173e8:	9209      	str	r2, [sp, #36]	; 0x24
 80173ea:	f89a 3000 	ldrb.w	r3, [sl]
 80173ee:	2b00      	cmp	r3, #0
 80173f0:	f000 80a2 	beq.w	8017538 <_svfiprintf_r+0x1c8>
 80173f4:	2300      	movs	r3, #0
 80173f6:	f04f 32ff 	mov.w	r2, #4294967295
 80173fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80173fe:	f10a 0a01 	add.w	sl, sl, #1
 8017402:	9304      	str	r3, [sp, #16]
 8017404:	9307      	str	r3, [sp, #28]
 8017406:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801740a:	931a      	str	r3, [sp, #104]	; 0x68
 801740c:	4654      	mov	r4, sl
 801740e:	2205      	movs	r2, #5
 8017410:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017414:	4851      	ldr	r0, [pc, #324]	; (801755c <_svfiprintf_r+0x1ec>)
 8017416:	f7e8 ff03 	bl	8000220 <memchr>
 801741a:	9a04      	ldr	r2, [sp, #16]
 801741c:	b9d8      	cbnz	r0, 8017456 <_svfiprintf_r+0xe6>
 801741e:	06d0      	lsls	r0, r2, #27
 8017420:	bf44      	itt	mi
 8017422:	2320      	movmi	r3, #32
 8017424:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017428:	0711      	lsls	r1, r2, #28
 801742a:	bf44      	itt	mi
 801742c:	232b      	movmi	r3, #43	; 0x2b
 801742e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017432:	f89a 3000 	ldrb.w	r3, [sl]
 8017436:	2b2a      	cmp	r3, #42	; 0x2a
 8017438:	d015      	beq.n	8017466 <_svfiprintf_r+0xf6>
 801743a:	9a07      	ldr	r2, [sp, #28]
 801743c:	4654      	mov	r4, sl
 801743e:	2000      	movs	r0, #0
 8017440:	f04f 0c0a 	mov.w	ip, #10
 8017444:	4621      	mov	r1, r4
 8017446:	f811 3b01 	ldrb.w	r3, [r1], #1
 801744a:	3b30      	subs	r3, #48	; 0x30
 801744c:	2b09      	cmp	r3, #9
 801744e:	d94e      	bls.n	80174ee <_svfiprintf_r+0x17e>
 8017450:	b1b0      	cbz	r0, 8017480 <_svfiprintf_r+0x110>
 8017452:	9207      	str	r2, [sp, #28]
 8017454:	e014      	b.n	8017480 <_svfiprintf_r+0x110>
 8017456:	eba0 0308 	sub.w	r3, r0, r8
 801745a:	fa09 f303 	lsl.w	r3, r9, r3
 801745e:	4313      	orrs	r3, r2
 8017460:	9304      	str	r3, [sp, #16]
 8017462:	46a2      	mov	sl, r4
 8017464:	e7d2      	b.n	801740c <_svfiprintf_r+0x9c>
 8017466:	9b03      	ldr	r3, [sp, #12]
 8017468:	1d19      	adds	r1, r3, #4
 801746a:	681b      	ldr	r3, [r3, #0]
 801746c:	9103      	str	r1, [sp, #12]
 801746e:	2b00      	cmp	r3, #0
 8017470:	bfbb      	ittet	lt
 8017472:	425b      	neglt	r3, r3
 8017474:	f042 0202 	orrlt.w	r2, r2, #2
 8017478:	9307      	strge	r3, [sp, #28]
 801747a:	9307      	strlt	r3, [sp, #28]
 801747c:	bfb8      	it	lt
 801747e:	9204      	strlt	r2, [sp, #16]
 8017480:	7823      	ldrb	r3, [r4, #0]
 8017482:	2b2e      	cmp	r3, #46	; 0x2e
 8017484:	d10c      	bne.n	80174a0 <_svfiprintf_r+0x130>
 8017486:	7863      	ldrb	r3, [r4, #1]
 8017488:	2b2a      	cmp	r3, #42	; 0x2a
 801748a:	d135      	bne.n	80174f8 <_svfiprintf_r+0x188>
 801748c:	9b03      	ldr	r3, [sp, #12]
 801748e:	1d1a      	adds	r2, r3, #4
 8017490:	681b      	ldr	r3, [r3, #0]
 8017492:	9203      	str	r2, [sp, #12]
 8017494:	2b00      	cmp	r3, #0
 8017496:	bfb8      	it	lt
 8017498:	f04f 33ff 	movlt.w	r3, #4294967295
 801749c:	3402      	adds	r4, #2
 801749e:	9305      	str	r3, [sp, #20]
 80174a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801756c <_svfiprintf_r+0x1fc>
 80174a4:	7821      	ldrb	r1, [r4, #0]
 80174a6:	2203      	movs	r2, #3
 80174a8:	4650      	mov	r0, sl
 80174aa:	f7e8 feb9 	bl	8000220 <memchr>
 80174ae:	b140      	cbz	r0, 80174c2 <_svfiprintf_r+0x152>
 80174b0:	2340      	movs	r3, #64	; 0x40
 80174b2:	eba0 000a 	sub.w	r0, r0, sl
 80174b6:	fa03 f000 	lsl.w	r0, r3, r0
 80174ba:	9b04      	ldr	r3, [sp, #16]
 80174bc:	4303      	orrs	r3, r0
 80174be:	3401      	adds	r4, #1
 80174c0:	9304      	str	r3, [sp, #16]
 80174c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80174c6:	4826      	ldr	r0, [pc, #152]	; (8017560 <_svfiprintf_r+0x1f0>)
 80174c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80174cc:	2206      	movs	r2, #6
 80174ce:	f7e8 fea7 	bl	8000220 <memchr>
 80174d2:	2800      	cmp	r0, #0
 80174d4:	d038      	beq.n	8017548 <_svfiprintf_r+0x1d8>
 80174d6:	4b23      	ldr	r3, [pc, #140]	; (8017564 <_svfiprintf_r+0x1f4>)
 80174d8:	bb1b      	cbnz	r3, 8017522 <_svfiprintf_r+0x1b2>
 80174da:	9b03      	ldr	r3, [sp, #12]
 80174dc:	3307      	adds	r3, #7
 80174de:	f023 0307 	bic.w	r3, r3, #7
 80174e2:	3308      	adds	r3, #8
 80174e4:	9303      	str	r3, [sp, #12]
 80174e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80174e8:	4433      	add	r3, r6
 80174ea:	9309      	str	r3, [sp, #36]	; 0x24
 80174ec:	e767      	b.n	80173be <_svfiprintf_r+0x4e>
 80174ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80174f2:	460c      	mov	r4, r1
 80174f4:	2001      	movs	r0, #1
 80174f6:	e7a5      	b.n	8017444 <_svfiprintf_r+0xd4>
 80174f8:	2300      	movs	r3, #0
 80174fa:	3401      	adds	r4, #1
 80174fc:	9305      	str	r3, [sp, #20]
 80174fe:	4619      	mov	r1, r3
 8017500:	f04f 0c0a 	mov.w	ip, #10
 8017504:	4620      	mov	r0, r4
 8017506:	f810 2b01 	ldrb.w	r2, [r0], #1
 801750a:	3a30      	subs	r2, #48	; 0x30
 801750c:	2a09      	cmp	r2, #9
 801750e:	d903      	bls.n	8017518 <_svfiprintf_r+0x1a8>
 8017510:	2b00      	cmp	r3, #0
 8017512:	d0c5      	beq.n	80174a0 <_svfiprintf_r+0x130>
 8017514:	9105      	str	r1, [sp, #20]
 8017516:	e7c3      	b.n	80174a0 <_svfiprintf_r+0x130>
 8017518:	fb0c 2101 	mla	r1, ip, r1, r2
 801751c:	4604      	mov	r4, r0
 801751e:	2301      	movs	r3, #1
 8017520:	e7f0      	b.n	8017504 <_svfiprintf_r+0x194>
 8017522:	ab03      	add	r3, sp, #12
 8017524:	9300      	str	r3, [sp, #0]
 8017526:	462a      	mov	r2, r5
 8017528:	4b0f      	ldr	r3, [pc, #60]	; (8017568 <_svfiprintf_r+0x1f8>)
 801752a:	a904      	add	r1, sp, #16
 801752c:	4638      	mov	r0, r7
 801752e:	f7fb fe7f 	bl	8013230 <_printf_float>
 8017532:	1c42      	adds	r2, r0, #1
 8017534:	4606      	mov	r6, r0
 8017536:	d1d6      	bne.n	80174e6 <_svfiprintf_r+0x176>
 8017538:	89ab      	ldrh	r3, [r5, #12]
 801753a:	065b      	lsls	r3, r3, #25
 801753c:	f53f af2c 	bmi.w	8017398 <_svfiprintf_r+0x28>
 8017540:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017542:	b01d      	add	sp, #116	; 0x74
 8017544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017548:	ab03      	add	r3, sp, #12
 801754a:	9300      	str	r3, [sp, #0]
 801754c:	462a      	mov	r2, r5
 801754e:	4b06      	ldr	r3, [pc, #24]	; (8017568 <_svfiprintf_r+0x1f8>)
 8017550:	a904      	add	r1, sp, #16
 8017552:	4638      	mov	r0, r7
 8017554:	f7fc f910 	bl	8013778 <_printf_i>
 8017558:	e7eb      	b.n	8017532 <_svfiprintf_r+0x1c2>
 801755a:	bf00      	nop
 801755c:	0801a54c 	.word	0x0801a54c
 8017560:	0801a556 	.word	0x0801a556
 8017564:	08013231 	.word	0x08013231
 8017568:	080172b9 	.word	0x080172b9
 801756c:	0801a552 	.word	0x0801a552

08017570 <_sungetc_r>:
 8017570:	b538      	push	{r3, r4, r5, lr}
 8017572:	1c4b      	adds	r3, r1, #1
 8017574:	4614      	mov	r4, r2
 8017576:	d103      	bne.n	8017580 <_sungetc_r+0x10>
 8017578:	f04f 35ff 	mov.w	r5, #4294967295
 801757c:	4628      	mov	r0, r5
 801757e:	bd38      	pop	{r3, r4, r5, pc}
 8017580:	8993      	ldrh	r3, [r2, #12]
 8017582:	f023 0320 	bic.w	r3, r3, #32
 8017586:	8193      	strh	r3, [r2, #12]
 8017588:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801758a:	6852      	ldr	r2, [r2, #4]
 801758c:	b2cd      	uxtb	r5, r1
 801758e:	b18b      	cbz	r3, 80175b4 <_sungetc_r+0x44>
 8017590:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017592:	4293      	cmp	r3, r2
 8017594:	dd08      	ble.n	80175a8 <_sungetc_r+0x38>
 8017596:	6823      	ldr	r3, [r4, #0]
 8017598:	1e5a      	subs	r2, r3, #1
 801759a:	6022      	str	r2, [r4, #0]
 801759c:	f803 5c01 	strb.w	r5, [r3, #-1]
 80175a0:	6863      	ldr	r3, [r4, #4]
 80175a2:	3301      	adds	r3, #1
 80175a4:	6063      	str	r3, [r4, #4]
 80175a6:	e7e9      	b.n	801757c <_sungetc_r+0xc>
 80175a8:	4621      	mov	r1, r4
 80175aa:	f000 fca5 	bl	8017ef8 <__submore>
 80175ae:	2800      	cmp	r0, #0
 80175b0:	d0f1      	beq.n	8017596 <_sungetc_r+0x26>
 80175b2:	e7e1      	b.n	8017578 <_sungetc_r+0x8>
 80175b4:	6921      	ldr	r1, [r4, #16]
 80175b6:	6823      	ldr	r3, [r4, #0]
 80175b8:	b151      	cbz	r1, 80175d0 <_sungetc_r+0x60>
 80175ba:	4299      	cmp	r1, r3
 80175bc:	d208      	bcs.n	80175d0 <_sungetc_r+0x60>
 80175be:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80175c2:	42a9      	cmp	r1, r5
 80175c4:	d104      	bne.n	80175d0 <_sungetc_r+0x60>
 80175c6:	3b01      	subs	r3, #1
 80175c8:	3201      	adds	r2, #1
 80175ca:	6023      	str	r3, [r4, #0]
 80175cc:	6062      	str	r2, [r4, #4]
 80175ce:	e7d5      	b.n	801757c <_sungetc_r+0xc>
 80175d0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80175d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80175d8:	6363      	str	r3, [r4, #52]	; 0x34
 80175da:	2303      	movs	r3, #3
 80175dc:	63a3      	str	r3, [r4, #56]	; 0x38
 80175de:	4623      	mov	r3, r4
 80175e0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80175e4:	6023      	str	r3, [r4, #0]
 80175e6:	2301      	movs	r3, #1
 80175e8:	e7dc      	b.n	80175a4 <_sungetc_r+0x34>

080175ea <__ssrefill_r>:
 80175ea:	b510      	push	{r4, lr}
 80175ec:	460c      	mov	r4, r1
 80175ee:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80175f0:	b169      	cbz	r1, 801760e <__ssrefill_r+0x24>
 80175f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80175f6:	4299      	cmp	r1, r3
 80175f8:	d001      	beq.n	80175fe <__ssrefill_r+0x14>
 80175fa:	f7fb fccf 	bl	8012f9c <_free_r>
 80175fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017600:	6063      	str	r3, [r4, #4]
 8017602:	2000      	movs	r0, #0
 8017604:	6360      	str	r0, [r4, #52]	; 0x34
 8017606:	b113      	cbz	r3, 801760e <__ssrefill_r+0x24>
 8017608:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801760a:	6023      	str	r3, [r4, #0]
 801760c:	bd10      	pop	{r4, pc}
 801760e:	6923      	ldr	r3, [r4, #16]
 8017610:	6023      	str	r3, [r4, #0]
 8017612:	2300      	movs	r3, #0
 8017614:	6063      	str	r3, [r4, #4]
 8017616:	89a3      	ldrh	r3, [r4, #12]
 8017618:	f043 0320 	orr.w	r3, r3, #32
 801761c:	81a3      	strh	r3, [r4, #12]
 801761e:	f04f 30ff 	mov.w	r0, #4294967295
 8017622:	e7f3      	b.n	801760c <__ssrefill_r+0x22>

08017624 <__ssvfiscanf_r>:
 8017624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017628:	460c      	mov	r4, r1
 801762a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801762e:	2100      	movs	r1, #0
 8017630:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8017634:	49b2      	ldr	r1, [pc, #712]	; (8017900 <__ssvfiscanf_r+0x2dc>)
 8017636:	91a0      	str	r1, [sp, #640]	; 0x280
 8017638:	f10d 0804 	add.w	r8, sp, #4
 801763c:	49b1      	ldr	r1, [pc, #708]	; (8017904 <__ssvfiscanf_r+0x2e0>)
 801763e:	4fb2      	ldr	r7, [pc, #712]	; (8017908 <__ssvfiscanf_r+0x2e4>)
 8017640:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 801790c <__ssvfiscanf_r+0x2e8>
 8017644:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8017648:	4606      	mov	r6, r0
 801764a:	91a1      	str	r1, [sp, #644]	; 0x284
 801764c:	9300      	str	r3, [sp, #0]
 801764e:	f892 a000 	ldrb.w	sl, [r2]
 8017652:	f1ba 0f00 	cmp.w	sl, #0
 8017656:	f000 8151 	beq.w	80178fc <__ssvfiscanf_r+0x2d8>
 801765a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 801765e:	f013 0308 	ands.w	r3, r3, #8
 8017662:	f102 0501 	add.w	r5, r2, #1
 8017666:	d019      	beq.n	801769c <__ssvfiscanf_r+0x78>
 8017668:	6863      	ldr	r3, [r4, #4]
 801766a:	2b00      	cmp	r3, #0
 801766c:	dd0f      	ble.n	801768e <__ssvfiscanf_r+0x6a>
 801766e:	6823      	ldr	r3, [r4, #0]
 8017670:	781a      	ldrb	r2, [r3, #0]
 8017672:	5cba      	ldrb	r2, [r7, r2]
 8017674:	0712      	lsls	r2, r2, #28
 8017676:	d401      	bmi.n	801767c <__ssvfiscanf_r+0x58>
 8017678:	462a      	mov	r2, r5
 801767a:	e7e8      	b.n	801764e <__ssvfiscanf_r+0x2a>
 801767c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801767e:	3201      	adds	r2, #1
 8017680:	9245      	str	r2, [sp, #276]	; 0x114
 8017682:	6862      	ldr	r2, [r4, #4]
 8017684:	3301      	adds	r3, #1
 8017686:	3a01      	subs	r2, #1
 8017688:	6062      	str	r2, [r4, #4]
 801768a:	6023      	str	r3, [r4, #0]
 801768c:	e7ec      	b.n	8017668 <__ssvfiscanf_r+0x44>
 801768e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017690:	4621      	mov	r1, r4
 8017692:	4630      	mov	r0, r6
 8017694:	4798      	blx	r3
 8017696:	2800      	cmp	r0, #0
 8017698:	d0e9      	beq.n	801766e <__ssvfiscanf_r+0x4a>
 801769a:	e7ed      	b.n	8017678 <__ssvfiscanf_r+0x54>
 801769c:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80176a0:	f040 8083 	bne.w	80177aa <__ssvfiscanf_r+0x186>
 80176a4:	9341      	str	r3, [sp, #260]	; 0x104
 80176a6:	9343      	str	r3, [sp, #268]	; 0x10c
 80176a8:	7853      	ldrb	r3, [r2, #1]
 80176aa:	2b2a      	cmp	r3, #42	; 0x2a
 80176ac:	bf02      	ittt	eq
 80176ae:	2310      	moveq	r3, #16
 80176b0:	1c95      	addeq	r5, r2, #2
 80176b2:	9341      	streq	r3, [sp, #260]	; 0x104
 80176b4:	220a      	movs	r2, #10
 80176b6:	46ab      	mov	fp, r5
 80176b8:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80176bc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80176c0:	2b09      	cmp	r3, #9
 80176c2:	d91d      	bls.n	8017700 <__ssvfiscanf_r+0xdc>
 80176c4:	4891      	ldr	r0, [pc, #580]	; (801790c <__ssvfiscanf_r+0x2e8>)
 80176c6:	2203      	movs	r2, #3
 80176c8:	f7e8 fdaa 	bl	8000220 <memchr>
 80176cc:	b140      	cbz	r0, 80176e0 <__ssvfiscanf_r+0xbc>
 80176ce:	2301      	movs	r3, #1
 80176d0:	eba0 0009 	sub.w	r0, r0, r9
 80176d4:	fa03 f000 	lsl.w	r0, r3, r0
 80176d8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80176da:	4318      	orrs	r0, r3
 80176dc:	9041      	str	r0, [sp, #260]	; 0x104
 80176de:	465d      	mov	r5, fp
 80176e0:	f815 3b01 	ldrb.w	r3, [r5], #1
 80176e4:	2b78      	cmp	r3, #120	; 0x78
 80176e6:	d806      	bhi.n	80176f6 <__ssvfiscanf_r+0xd2>
 80176e8:	2b57      	cmp	r3, #87	; 0x57
 80176ea:	d810      	bhi.n	801770e <__ssvfiscanf_r+0xea>
 80176ec:	2b25      	cmp	r3, #37	; 0x25
 80176ee:	d05c      	beq.n	80177aa <__ssvfiscanf_r+0x186>
 80176f0:	d856      	bhi.n	80177a0 <__ssvfiscanf_r+0x17c>
 80176f2:	2b00      	cmp	r3, #0
 80176f4:	d074      	beq.n	80177e0 <__ssvfiscanf_r+0x1bc>
 80176f6:	2303      	movs	r3, #3
 80176f8:	9347      	str	r3, [sp, #284]	; 0x11c
 80176fa:	230a      	movs	r3, #10
 80176fc:	9342      	str	r3, [sp, #264]	; 0x108
 80176fe:	e081      	b.n	8017804 <__ssvfiscanf_r+0x1e0>
 8017700:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8017702:	fb02 1303 	mla	r3, r2, r3, r1
 8017706:	3b30      	subs	r3, #48	; 0x30
 8017708:	9343      	str	r3, [sp, #268]	; 0x10c
 801770a:	465d      	mov	r5, fp
 801770c:	e7d3      	b.n	80176b6 <__ssvfiscanf_r+0x92>
 801770e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8017712:	2a20      	cmp	r2, #32
 8017714:	d8ef      	bhi.n	80176f6 <__ssvfiscanf_r+0xd2>
 8017716:	a101      	add	r1, pc, #4	; (adr r1, 801771c <__ssvfiscanf_r+0xf8>)
 8017718:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801771c:	080177ef 	.word	0x080177ef
 8017720:	080176f7 	.word	0x080176f7
 8017724:	080176f7 	.word	0x080176f7
 8017728:	0801784d 	.word	0x0801784d
 801772c:	080176f7 	.word	0x080176f7
 8017730:	080176f7 	.word	0x080176f7
 8017734:	080176f7 	.word	0x080176f7
 8017738:	080176f7 	.word	0x080176f7
 801773c:	080176f7 	.word	0x080176f7
 8017740:	080176f7 	.word	0x080176f7
 8017744:	080176f7 	.word	0x080176f7
 8017748:	08017863 	.word	0x08017863
 801774c:	08017839 	.word	0x08017839
 8017750:	080177a7 	.word	0x080177a7
 8017754:	080177a7 	.word	0x080177a7
 8017758:	080177a7 	.word	0x080177a7
 801775c:	080176f7 	.word	0x080176f7
 8017760:	0801783d 	.word	0x0801783d
 8017764:	080176f7 	.word	0x080176f7
 8017768:	080176f7 	.word	0x080176f7
 801776c:	080176f7 	.word	0x080176f7
 8017770:	080176f7 	.word	0x080176f7
 8017774:	08017873 	.word	0x08017873
 8017778:	08017845 	.word	0x08017845
 801777c:	080177e7 	.word	0x080177e7
 8017780:	080176f7 	.word	0x080176f7
 8017784:	080176f7 	.word	0x080176f7
 8017788:	0801786f 	.word	0x0801786f
 801778c:	080176f7 	.word	0x080176f7
 8017790:	08017839 	.word	0x08017839
 8017794:	080176f7 	.word	0x080176f7
 8017798:	080176f7 	.word	0x080176f7
 801779c:	080177ef 	.word	0x080177ef
 80177a0:	3b45      	subs	r3, #69	; 0x45
 80177a2:	2b02      	cmp	r3, #2
 80177a4:	d8a7      	bhi.n	80176f6 <__ssvfiscanf_r+0xd2>
 80177a6:	2305      	movs	r3, #5
 80177a8:	e02b      	b.n	8017802 <__ssvfiscanf_r+0x1de>
 80177aa:	6863      	ldr	r3, [r4, #4]
 80177ac:	2b00      	cmp	r3, #0
 80177ae:	dd0d      	ble.n	80177cc <__ssvfiscanf_r+0x1a8>
 80177b0:	6823      	ldr	r3, [r4, #0]
 80177b2:	781a      	ldrb	r2, [r3, #0]
 80177b4:	4552      	cmp	r2, sl
 80177b6:	f040 80a1 	bne.w	80178fc <__ssvfiscanf_r+0x2d8>
 80177ba:	3301      	adds	r3, #1
 80177bc:	6862      	ldr	r2, [r4, #4]
 80177be:	6023      	str	r3, [r4, #0]
 80177c0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80177c2:	3a01      	subs	r2, #1
 80177c4:	3301      	adds	r3, #1
 80177c6:	6062      	str	r2, [r4, #4]
 80177c8:	9345      	str	r3, [sp, #276]	; 0x114
 80177ca:	e755      	b.n	8017678 <__ssvfiscanf_r+0x54>
 80177cc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80177ce:	4621      	mov	r1, r4
 80177d0:	4630      	mov	r0, r6
 80177d2:	4798      	blx	r3
 80177d4:	2800      	cmp	r0, #0
 80177d6:	d0eb      	beq.n	80177b0 <__ssvfiscanf_r+0x18c>
 80177d8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80177da:	2800      	cmp	r0, #0
 80177dc:	f040 8084 	bne.w	80178e8 <__ssvfiscanf_r+0x2c4>
 80177e0:	f04f 30ff 	mov.w	r0, #4294967295
 80177e4:	e086      	b.n	80178f4 <__ssvfiscanf_r+0x2d0>
 80177e6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80177e8:	f042 0220 	orr.w	r2, r2, #32
 80177ec:	9241      	str	r2, [sp, #260]	; 0x104
 80177ee:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80177f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80177f4:	9241      	str	r2, [sp, #260]	; 0x104
 80177f6:	2210      	movs	r2, #16
 80177f8:	2b6f      	cmp	r3, #111	; 0x6f
 80177fa:	9242      	str	r2, [sp, #264]	; 0x108
 80177fc:	bf34      	ite	cc
 80177fe:	2303      	movcc	r3, #3
 8017800:	2304      	movcs	r3, #4
 8017802:	9347      	str	r3, [sp, #284]	; 0x11c
 8017804:	6863      	ldr	r3, [r4, #4]
 8017806:	2b00      	cmp	r3, #0
 8017808:	dd41      	ble.n	801788e <__ssvfiscanf_r+0x26a>
 801780a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801780c:	0659      	lsls	r1, r3, #25
 801780e:	d404      	bmi.n	801781a <__ssvfiscanf_r+0x1f6>
 8017810:	6823      	ldr	r3, [r4, #0]
 8017812:	781a      	ldrb	r2, [r3, #0]
 8017814:	5cba      	ldrb	r2, [r7, r2]
 8017816:	0712      	lsls	r2, r2, #28
 8017818:	d440      	bmi.n	801789c <__ssvfiscanf_r+0x278>
 801781a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801781c:	2b02      	cmp	r3, #2
 801781e:	dc4f      	bgt.n	80178c0 <__ssvfiscanf_r+0x29c>
 8017820:	466b      	mov	r3, sp
 8017822:	4622      	mov	r2, r4
 8017824:	a941      	add	r1, sp, #260	; 0x104
 8017826:	4630      	mov	r0, r6
 8017828:	f000 f9ce 	bl	8017bc8 <_scanf_chars>
 801782c:	2801      	cmp	r0, #1
 801782e:	d065      	beq.n	80178fc <__ssvfiscanf_r+0x2d8>
 8017830:	2802      	cmp	r0, #2
 8017832:	f47f af21 	bne.w	8017678 <__ssvfiscanf_r+0x54>
 8017836:	e7cf      	b.n	80177d8 <__ssvfiscanf_r+0x1b4>
 8017838:	220a      	movs	r2, #10
 801783a:	e7dd      	b.n	80177f8 <__ssvfiscanf_r+0x1d4>
 801783c:	2300      	movs	r3, #0
 801783e:	9342      	str	r3, [sp, #264]	; 0x108
 8017840:	2303      	movs	r3, #3
 8017842:	e7de      	b.n	8017802 <__ssvfiscanf_r+0x1de>
 8017844:	2308      	movs	r3, #8
 8017846:	9342      	str	r3, [sp, #264]	; 0x108
 8017848:	2304      	movs	r3, #4
 801784a:	e7da      	b.n	8017802 <__ssvfiscanf_r+0x1de>
 801784c:	4629      	mov	r1, r5
 801784e:	4640      	mov	r0, r8
 8017850:	f000 fb18 	bl	8017e84 <__sccl>
 8017854:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017856:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801785a:	9341      	str	r3, [sp, #260]	; 0x104
 801785c:	4605      	mov	r5, r0
 801785e:	2301      	movs	r3, #1
 8017860:	e7cf      	b.n	8017802 <__ssvfiscanf_r+0x1de>
 8017862:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017868:	9341      	str	r3, [sp, #260]	; 0x104
 801786a:	2300      	movs	r3, #0
 801786c:	e7c9      	b.n	8017802 <__ssvfiscanf_r+0x1de>
 801786e:	2302      	movs	r3, #2
 8017870:	e7c7      	b.n	8017802 <__ssvfiscanf_r+0x1de>
 8017872:	9841      	ldr	r0, [sp, #260]	; 0x104
 8017874:	06c3      	lsls	r3, r0, #27
 8017876:	f53f aeff 	bmi.w	8017678 <__ssvfiscanf_r+0x54>
 801787a:	9b00      	ldr	r3, [sp, #0]
 801787c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801787e:	1d19      	adds	r1, r3, #4
 8017880:	9100      	str	r1, [sp, #0]
 8017882:	681b      	ldr	r3, [r3, #0]
 8017884:	07c0      	lsls	r0, r0, #31
 8017886:	bf4c      	ite	mi
 8017888:	801a      	strhmi	r2, [r3, #0]
 801788a:	601a      	strpl	r2, [r3, #0]
 801788c:	e6f4      	b.n	8017678 <__ssvfiscanf_r+0x54>
 801788e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017890:	4621      	mov	r1, r4
 8017892:	4630      	mov	r0, r6
 8017894:	4798      	blx	r3
 8017896:	2800      	cmp	r0, #0
 8017898:	d0b7      	beq.n	801780a <__ssvfiscanf_r+0x1e6>
 801789a:	e79d      	b.n	80177d8 <__ssvfiscanf_r+0x1b4>
 801789c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801789e:	3201      	adds	r2, #1
 80178a0:	9245      	str	r2, [sp, #276]	; 0x114
 80178a2:	6862      	ldr	r2, [r4, #4]
 80178a4:	3a01      	subs	r2, #1
 80178a6:	2a00      	cmp	r2, #0
 80178a8:	6062      	str	r2, [r4, #4]
 80178aa:	dd02      	ble.n	80178b2 <__ssvfiscanf_r+0x28e>
 80178ac:	3301      	adds	r3, #1
 80178ae:	6023      	str	r3, [r4, #0]
 80178b0:	e7ae      	b.n	8017810 <__ssvfiscanf_r+0x1ec>
 80178b2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80178b4:	4621      	mov	r1, r4
 80178b6:	4630      	mov	r0, r6
 80178b8:	4798      	blx	r3
 80178ba:	2800      	cmp	r0, #0
 80178bc:	d0a8      	beq.n	8017810 <__ssvfiscanf_r+0x1ec>
 80178be:	e78b      	b.n	80177d8 <__ssvfiscanf_r+0x1b4>
 80178c0:	2b04      	cmp	r3, #4
 80178c2:	dc06      	bgt.n	80178d2 <__ssvfiscanf_r+0x2ae>
 80178c4:	466b      	mov	r3, sp
 80178c6:	4622      	mov	r2, r4
 80178c8:	a941      	add	r1, sp, #260	; 0x104
 80178ca:	4630      	mov	r0, r6
 80178cc:	f000 f9d4 	bl	8017c78 <_scanf_i>
 80178d0:	e7ac      	b.n	801782c <__ssvfiscanf_r+0x208>
 80178d2:	4b0f      	ldr	r3, [pc, #60]	; (8017910 <__ssvfiscanf_r+0x2ec>)
 80178d4:	2b00      	cmp	r3, #0
 80178d6:	f43f aecf 	beq.w	8017678 <__ssvfiscanf_r+0x54>
 80178da:	466b      	mov	r3, sp
 80178dc:	4622      	mov	r2, r4
 80178de:	a941      	add	r1, sp, #260	; 0x104
 80178e0:	4630      	mov	r0, r6
 80178e2:	f7fc f86f 	bl	80139c4 <_scanf_float>
 80178e6:	e7a1      	b.n	801782c <__ssvfiscanf_r+0x208>
 80178e8:	89a3      	ldrh	r3, [r4, #12]
 80178ea:	f013 0f40 	tst.w	r3, #64	; 0x40
 80178ee:	bf18      	it	ne
 80178f0:	f04f 30ff 	movne.w	r0, #4294967295
 80178f4:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80178f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178fc:	9844      	ldr	r0, [sp, #272]	; 0x110
 80178fe:	e7f9      	b.n	80178f4 <__ssvfiscanf_r+0x2d0>
 8017900:	08017571 	.word	0x08017571
 8017904:	080175eb 	.word	0x080175eb
 8017908:	0801a0b1 	.word	0x0801a0b1
 801790c:	0801a552 	.word	0x0801a552
 8017910:	080139c5 	.word	0x080139c5

08017914 <__sfputc_r>:
 8017914:	6893      	ldr	r3, [r2, #8]
 8017916:	3b01      	subs	r3, #1
 8017918:	2b00      	cmp	r3, #0
 801791a:	b410      	push	{r4}
 801791c:	6093      	str	r3, [r2, #8]
 801791e:	da08      	bge.n	8017932 <__sfputc_r+0x1e>
 8017920:	6994      	ldr	r4, [r2, #24]
 8017922:	42a3      	cmp	r3, r4
 8017924:	db01      	blt.n	801792a <__sfputc_r+0x16>
 8017926:	290a      	cmp	r1, #10
 8017928:	d103      	bne.n	8017932 <__sfputc_r+0x1e>
 801792a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801792e:	f7fd bb7f 	b.w	8015030 <__swbuf_r>
 8017932:	6813      	ldr	r3, [r2, #0]
 8017934:	1c58      	adds	r0, r3, #1
 8017936:	6010      	str	r0, [r2, #0]
 8017938:	7019      	strb	r1, [r3, #0]
 801793a:	4608      	mov	r0, r1
 801793c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017940:	4770      	bx	lr

08017942 <__sfputs_r>:
 8017942:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017944:	4606      	mov	r6, r0
 8017946:	460f      	mov	r7, r1
 8017948:	4614      	mov	r4, r2
 801794a:	18d5      	adds	r5, r2, r3
 801794c:	42ac      	cmp	r4, r5
 801794e:	d101      	bne.n	8017954 <__sfputs_r+0x12>
 8017950:	2000      	movs	r0, #0
 8017952:	e007      	b.n	8017964 <__sfputs_r+0x22>
 8017954:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017958:	463a      	mov	r2, r7
 801795a:	4630      	mov	r0, r6
 801795c:	f7ff ffda 	bl	8017914 <__sfputc_r>
 8017960:	1c43      	adds	r3, r0, #1
 8017962:	d1f3      	bne.n	801794c <__sfputs_r+0xa>
 8017964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017968 <_vfiprintf_r>:
 8017968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801796c:	460d      	mov	r5, r1
 801796e:	b09d      	sub	sp, #116	; 0x74
 8017970:	4614      	mov	r4, r2
 8017972:	4698      	mov	r8, r3
 8017974:	4606      	mov	r6, r0
 8017976:	b118      	cbz	r0, 8017980 <_vfiprintf_r+0x18>
 8017978:	6983      	ldr	r3, [r0, #24]
 801797a:	b90b      	cbnz	r3, 8017980 <_vfiprintf_r+0x18>
 801797c:	f7fb fa08 	bl	8012d90 <__sinit>
 8017980:	4b89      	ldr	r3, [pc, #548]	; (8017ba8 <_vfiprintf_r+0x240>)
 8017982:	429d      	cmp	r5, r3
 8017984:	d11b      	bne.n	80179be <_vfiprintf_r+0x56>
 8017986:	6875      	ldr	r5, [r6, #4]
 8017988:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801798a:	07d9      	lsls	r1, r3, #31
 801798c:	d405      	bmi.n	801799a <_vfiprintf_r+0x32>
 801798e:	89ab      	ldrh	r3, [r5, #12]
 8017990:	059a      	lsls	r2, r3, #22
 8017992:	d402      	bmi.n	801799a <_vfiprintf_r+0x32>
 8017994:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017996:	f7fb fabe 	bl	8012f16 <__retarget_lock_acquire_recursive>
 801799a:	89ab      	ldrh	r3, [r5, #12]
 801799c:	071b      	lsls	r3, r3, #28
 801799e:	d501      	bpl.n	80179a4 <_vfiprintf_r+0x3c>
 80179a0:	692b      	ldr	r3, [r5, #16]
 80179a2:	b9eb      	cbnz	r3, 80179e0 <_vfiprintf_r+0x78>
 80179a4:	4629      	mov	r1, r5
 80179a6:	4630      	mov	r0, r6
 80179a8:	f7fd fba6 	bl	80150f8 <__swsetup_r>
 80179ac:	b1c0      	cbz	r0, 80179e0 <_vfiprintf_r+0x78>
 80179ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80179b0:	07dc      	lsls	r4, r3, #31
 80179b2:	d50e      	bpl.n	80179d2 <_vfiprintf_r+0x6a>
 80179b4:	f04f 30ff 	mov.w	r0, #4294967295
 80179b8:	b01d      	add	sp, #116	; 0x74
 80179ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179be:	4b7b      	ldr	r3, [pc, #492]	; (8017bac <_vfiprintf_r+0x244>)
 80179c0:	429d      	cmp	r5, r3
 80179c2:	d101      	bne.n	80179c8 <_vfiprintf_r+0x60>
 80179c4:	68b5      	ldr	r5, [r6, #8]
 80179c6:	e7df      	b.n	8017988 <_vfiprintf_r+0x20>
 80179c8:	4b79      	ldr	r3, [pc, #484]	; (8017bb0 <_vfiprintf_r+0x248>)
 80179ca:	429d      	cmp	r5, r3
 80179cc:	bf08      	it	eq
 80179ce:	68f5      	ldreq	r5, [r6, #12]
 80179d0:	e7da      	b.n	8017988 <_vfiprintf_r+0x20>
 80179d2:	89ab      	ldrh	r3, [r5, #12]
 80179d4:	0598      	lsls	r0, r3, #22
 80179d6:	d4ed      	bmi.n	80179b4 <_vfiprintf_r+0x4c>
 80179d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80179da:	f7fb fa9d 	bl	8012f18 <__retarget_lock_release_recursive>
 80179de:	e7e9      	b.n	80179b4 <_vfiprintf_r+0x4c>
 80179e0:	2300      	movs	r3, #0
 80179e2:	9309      	str	r3, [sp, #36]	; 0x24
 80179e4:	2320      	movs	r3, #32
 80179e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80179ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80179ee:	2330      	movs	r3, #48	; 0x30
 80179f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017bb4 <_vfiprintf_r+0x24c>
 80179f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80179f8:	f04f 0901 	mov.w	r9, #1
 80179fc:	4623      	mov	r3, r4
 80179fe:	469a      	mov	sl, r3
 8017a00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017a04:	b10a      	cbz	r2, 8017a0a <_vfiprintf_r+0xa2>
 8017a06:	2a25      	cmp	r2, #37	; 0x25
 8017a08:	d1f9      	bne.n	80179fe <_vfiprintf_r+0x96>
 8017a0a:	ebba 0b04 	subs.w	fp, sl, r4
 8017a0e:	d00b      	beq.n	8017a28 <_vfiprintf_r+0xc0>
 8017a10:	465b      	mov	r3, fp
 8017a12:	4622      	mov	r2, r4
 8017a14:	4629      	mov	r1, r5
 8017a16:	4630      	mov	r0, r6
 8017a18:	f7ff ff93 	bl	8017942 <__sfputs_r>
 8017a1c:	3001      	adds	r0, #1
 8017a1e:	f000 80aa 	beq.w	8017b76 <_vfiprintf_r+0x20e>
 8017a22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017a24:	445a      	add	r2, fp
 8017a26:	9209      	str	r2, [sp, #36]	; 0x24
 8017a28:	f89a 3000 	ldrb.w	r3, [sl]
 8017a2c:	2b00      	cmp	r3, #0
 8017a2e:	f000 80a2 	beq.w	8017b76 <_vfiprintf_r+0x20e>
 8017a32:	2300      	movs	r3, #0
 8017a34:	f04f 32ff 	mov.w	r2, #4294967295
 8017a38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017a3c:	f10a 0a01 	add.w	sl, sl, #1
 8017a40:	9304      	str	r3, [sp, #16]
 8017a42:	9307      	str	r3, [sp, #28]
 8017a44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017a48:	931a      	str	r3, [sp, #104]	; 0x68
 8017a4a:	4654      	mov	r4, sl
 8017a4c:	2205      	movs	r2, #5
 8017a4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017a52:	4858      	ldr	r0, [pc, #352]	; (8017bb4 <_vfiprintf_r+0x24c>)
 8017a54:	f7e8 fbe4 	bl	8000220 <memchr>
 8017a58:	9a04      	ldr	r2, [sp, #16]
 8017a5a:	b9d8      	cbnz	r0, 8017a94 <_vfiprintf_r+0x12c>
 8017a5c:	06d1      	lsls	r1, r2, #27
 8017a5e:	bf44      	itt	mi
 8017a60:	2320      	movmi	r3, #32
 8017a62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017a66:	0713      	lsls	r3, r2, #28
 8017a68:	bf44      	itt	mi
 8017a6a:	232b      	movmi	r3, #43	; 0x2b
 8017a6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017a70:	f89a 3000 	ldrb.w	r3, [sl]
 8017a74:	2b2a      	cmp	r3, #42	; 0x2a
 8017a76:	d015      	beq.n	8017aa4 <_vfiprintf_r+0x13c>
 8017a78:	9a07      	ldr	r2, [sp, #28]
 8017a7a:	4654      	mov	r4, sl
 8017a7c:	2000      	movs	r0, #0
 8017a7e:	f04f 0c0a 	mov.w	ip, #10
 8017a82:	4621      	mov	r1, r4
 8017a84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017a88:	3b30      	subs	r3, #48	; 0x30
 8017a8a:	2b09      	cmp	r3, #9
 8017a8c:	d94e      	bls.n	8017b2c <_vfiprintf_r+0x1c4>
 8017a8e:	b1b0      	cbz	r0, 8017abe <_vfiprintf_r+0x156>
 8017a90:	9207      	str	r2, [sp, #28]
 8017a92:	e014      	b.n	8017abe <_vfiprintf_r+0x156>
 8017a94:	eba0 0308 	sub.w	r3, r0, r8
 8017a98:	fa09 f303 	lsl.w	r3, r9, r3
 8017a9c:	4313      	orrs	r3, r2
 8017a9e:	9304      	str	r3, [sp, #16]
 8017aa0:	46a2      	mov	sl, r4
 8017aa2:	e7d2      	b.n	8017a4a <_vfiprintf_r+0xe2>
 8017aa4:	9b03      	ldr	r3, [sp, #12]
 8017aa6:	1d19      	adds	r1, r3, #4
 8017aa8:	681b      	ldr	r3, [r3, #0]
 8017aaa:	9103      	str	r1, [sp, #12]
 8017aac:	2b00      	cmp	r3, #0
 8017aae:	bfbb      	ittet	lt
 8017ab0:	425b      	neglt	r3, r3
 8017ab2:	f042 0202 	orrlt.w	r2, r2, #2
 8017ab6:	9307      	strge	r3, [sp, #28]
 8017ab8:	9307      	strlt	r3, [sp, #28]
 8017aba:	bfb8      	it	lt
 8017abc:	9204      	strlt	r2, [sp, #16]
 8017abe:	7823      	ldrb	r3, [r4, #0]
 8017ac0:	2b2e      	cmp	r3, #46	; 0x2e
 8017ac2:	d10c      	bne.n	8017ade <_vfiprintf_r+0x176>
 8017ac4:	7863      	ldrb	r3, [r4, #1]
 8017ac6:	2b2a      	cmp	r3, #42	; 0x2a
 8017ac8:	d135      	bne.n	8017b36 <_vfiprintf_r+0x1ce>
 8017aca:	9b03      	ldr	r3, [sp, #12]
 8017acc:	1d1a      	adds	r2, r3, #4
 8017ace:	681b      	ldr	r3, [r3, #0]
 8017ad0:	9203      	str	r2, [sp, #12]
 8017ad2:	2b00      	cmp	r3, #0
 8017ad4:	bfb8      	it	lt
 8017ad6:	f04f 33ff 	movlt.w	r3, #4294967295
 8017ada:	3402      	adds	r4, #2
 8017adc:	9305      	str	r3, [sp, #20]
 8017ade:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017bc4 <_vfiprintf_r+0x25c>
 8017ae2:	7821      	ldrb	r1, [r4, #0]
 8017ae4:	2203      	movs	r2, #3
 8017ae6:	4650      	mov	r0, sl
 8017ae8:	f7e8 fb9a 	bl	8000220 <memchr>
 8017aec:	b140      	cbz	r0, 8017b00 <_vfiprintf_r+0x198>
 8017aee:	2340      	movs	r3, #64	; 0x40
 8017af0:	eba0 000a 	sub.w	r0, r0, sl
 8017af4:	fa03 f000 	lsl.w	r0, r3, r0
 8017af8:	9b04      	ldr	r3, [sp, #16]
 8017afa:	4303      	orrs	r3, r0
 8017afc:	3401      	adds	r4, #1
 8017afe:	9304      	str	r3, [sp, #16]
 8017b00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017b04:	482c      	ldr	r0, [pc, #176]	; (8017bb8 <_vfiprintf_r+0x250>)
 8017b06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017b0a:	2206      	movs	r2, #6
 8017b0c:	f7e8 fb88 	bl	8000220 <memchr>
 8017b10:	2800      	cmp	r0, #0
 8017b12:	d03f      	beq.n	8017b94 <_vfiprintf_r+0x22c>
 8017b14:	4b29      	ldr	r3, [pc, #164]	; (8017bbc <_vfiprintf_r+0x254>)
 8017b16:	bb1b      	cbnz	r3, 8017b60 <_vfiprintf_r+0x1f8>
 8017b18:	9b03      	ldr	r3, [sp, #12]
 8017b1a:	3307      	adds	r3, #7
 8017b1c:	f023 0307 	bic.w	r3, r3, #7
 8017b20:	3308      	adds	r3, #8
 8017b22:	9303      	str	r3, [sp, #12]
 8017b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b26:	443b      	add	r3, r7
 8017b28:	9309      	str	r3, [sp, #36]	; 0x24
 8017b2a:	e767      	b.n	80179fc <_vfiprintf_r+0x94>
 8017b2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8017b30:	460c      	mov	r4, r1
 8017b32:	2001      	movs	r0, #1
 8017b34:	e7a5      	b.n	8017a82 <_vfiprintf_r+0x11a>
 8017b36:	2300      	movs	r3, #0
 8017b38:	3401      	adds	r4, #1
 8017b3a:	9305      	str	r3, [sp, #20]
 8017b3c:	4619      	mov	r1, r3
 8017b3e:	f04f 0c0a 	mov.w	ip, #10
 8017b42:	4620      	mov	r0, r4
 8017b44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017b48:	3a30      	subs	r2, #48	; 0x30
 8017b4a:	2a09      	cmp	r2, #9
 8017b4c:	d903      	bls.n	8017b56 <_vfiprintf_r+0x1ee>
 8017b4e:	2b00      	cmp	r3, #0
 8017b50:	d0c5      	beq.n	8017ade <_vfiprintf_r+0x176>
 8017b52:	9105      	str	r1, [sp, #20]
 8017b54:	e7c3      	b.n	8017ade <_vfiprintf_r+0x176>
 8017b56:	fb0c 2101 	mla	r1, ip, r1, r2
 8017b5a:	4604      	mov	r4, r0
 8017b5c:	2301      	movs	r3, #1
 8017b5e:	e7f0      	b.n	8017b42 <_vfiprintf_r+0x1da>
 8017b60:	ab03      	add	r3, sp, #12
 8017b62:	9300      	str	r3, [sp, #0]
 8017b64:	462a      	mov	r2, r5
 8017b66:	4b16      	ldr	r3, [pc, #88]	; (8017bc0 <_vfiprintf_r+0x258>)
 8017b68:	a904      	add	r1, sp, #16
 8017b6a:	4630      	mov	r0, r6
 8017b6c:	f7fb fb60 	bl	8013230 <_printf_float>
 8017b70:	4607      	mov	r7, r0
 8017b72:	1c78      	adds	r0, r7, #1
 8017b74:	d1d6      	bne.n	8017b24 <_vfiprintf_r+0x1bc>
 8017b76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017b78:	07d9      	lsls	r1, r3, #31
 8017b7a:	d405      	bmi.n	8017b88 <_vfiprintf_r+0x220>
 8017b7c:	89ab      	ldrh	r3, [r5, #12]
 8017b7e:	059a      	lsls	r2, r3, #22
 8017b80:	d402      	bmi.n	8017b88 <_vfiprintf_r+0x220>
 8017b82:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017b84:	f7fb f9c8 	bl	8012f18 <__retarget_lock_release_recursive>
 8017b88:	89ab      	ldrh	r3, [r5, #12]
 8017b8a:	065b      	lsls	r3, r3, #25
 8017b8c:	f53f af12 	bmi.w	80179b4 <_vfiprintf_r+0x4c>
 8017b90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017b92:	e711      	b.n	80179b8 <_vfiprintf_r+0x50>
 8017b94:	ab03      	add	r3, sp, #12
 8017b96:	9300      	str	r3, [sp, #0]
 8017b98:	462a      	mov	r2, r5
 8017b9a:	4b09      	ldr	r3, [pc, #36]	; (8017bc0 <_vfiprintf_r+0x258>)
 8017b9c:	a904      	add	r1, sp, #16
 8017b9e:	4630      	mov	r0, r6
 8017ba0:	f7fb fdea 	bl	8013778 <_printf_i>
 8017ba4:	e7e4      	b.n	8017b70 <_vfiprintf_r+0x208>
 8017ba6:	bf00      	nop
 8017ba8:	0801a1d4 	.word	0x0801a1d4
 8017bac:	0801a1f4 	.word	0x0801a1f4
 8017bb0:	0801a1b4 	.word	0x0801a1b4
 8017bb4:	0801a54c 	.word	0x0801a54c
 8017bb8:	0801a556 	.word	0x0801a556
 8017bbc:	08013231 	.word	0x08013231
 8017bc0:	08017943 	.word	0x08017943
 8017bc4:	0801a552 	.word	0x0801a552

08017bc8 <_scanf_chars>:
 8017bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017bcc:	4615      	mov	r5, r2
 8017bce:	688a      	ldr	r2, [r1, #8]
 8017bd0:	4680      	mov	r8, r0
 8017bd2:	460c      	mov	r4, r1
 8017bd4:	b932      	cbnz	r2, 8017be4 <_scanf_chars+0x1c>
 8017bd6:	698a      	ldr	r2, [r1, #24]
 8017bd8:	2a00      	cmp	r2, #0
 8017bda:	bf0c      	ite	eq
 8017bdc:	2201      	moveq	r2, #1
 8017bde:	f04f 32ff 	movne.w	r2, #4294967295
 8017be2:	608a      	str	r2, [r1, #8]
 8017be4:	6822      	ldr	r2, [r4, #0]
 8017be6:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8017c74 <_scanf_chars+0xac>
 8017bea:	06d1      	lsls	r1, r2, #27
 8017bec:	bf5f      	itttt	pl
 8017bee:	681a      	ldrpl	r2, [r3, #0]
 8017bf0:	1d11      	addpl	r1, r2, #4
 8017bf2:	6019      	strpl	r1, [r3, #0]
 8017bf4:	6816      	ldrpl	r6, [r2, #0]
 8017bf6:	2700      	movs	r7, #0
 8017bf8:	69a0      	ldr	r0, [r4, #24]
 8017bfa:	b188      	cbz	r0, 8017c20 <_scanf_chars+0x58>
 8017bfc:	2801      	cmp	r0, #1
 8017bfe:	d107      	bne.n	8017c10 <_scanf_chars+0x48>
 8017c00:	682b      	ldr	r3, [r5, #0]
 8017c02:	781a      	ldrb	r2, [r3, #0]
 8017c04:	6963      	ldr	r3, [r4, #20]
 8017c06:	5c9b      	ldrb	r3, [r3, r2]
 8017c08:	b953      	cbnz	r3, 8017c20 <_scanf_chars+0x58>
 8017c0a:	bb27      	cbnz	r7, 8017c56 <_scanf_chars+0x8e>
 8017c0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017c10:	2802      	cmp	r0, #2
 8017c12:	d120      	bne.n	8017c56 <_scanf_chars+0x8e>
 8017c14:	682b      	ldr	r3, [r5, #0]
 8017c16:	781b      	ldrb	r3, [r3, #0]
 8017c18:	f813 3009 	ldrb.w	r3, [r3, r9]
 8017c1c:	071b      	lsls	r3, r3, #28
 8017c1e:	d41a      	bmi.n	8017c56 <_scanf_chars+0x8e>
 8017c20:	6823      	ldr	r3, [r4, #0]
 8017c22:	06da      	lsls	r2, r3, #27
 8017c24:	bf5e      	ittt	pl
 8017c26:	682b      	ldrpl	r3, [r5, #0]
 8017c28:	781b      	ldrbpl	r3, [r3, #0]
 8017c2a:	f806 3b01 	strbpl.w	r3, [r6], #1
 8017c2e:	682a      	ldr	r2, [r5, #0]
 8017c30:	686b      	ldr	r3, [r5, #4]
 8017c32:	3201      	adds	r2, #1
 8017c34:	602a      	str	r2, [r5, #0]
 8017c36:	68a2      	ldr	r2, [r4, #8]
 8017c38:	3b01      	subs	r3, #1
 8017c3a:	3a01      	subs	r2, #1
 8017c3c:	606b      	str	r3, [r5, #4]
 8017c3e:	3701      	adds	r7, #1
 8017c40:	60a2      	str	r2, [r4, #8]
 8017c42:	b142      	cbz	r2, 8017c56 <_scanf_chars+0x8e>
 8017c44:	2b00      	cmp	r3, #0
 8017c46:	dcd7      	bgt.n	8017bf8 <_scanf_chars+0x30>
 8017c48:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017c4c:	4629      	mov	r1, r5
 8017c4e:	4640      	mov	r0, r8
 8017c50:	4798      	blx	r3
 8017c52:	2800      	cmp	r0, #0
 8017c54:	d0d0      	beq.n	8017bf8 <_scanf_chars+0x30>
 8017c56:	6823      	ldr	r3, [r4, #0]
 8017c58:	f013 0310 	ands.w	r3, r3, #16
 8017c5c:	d105      	bne.n	8017c6a <_scanf_chars+0xa2>
 8017c5e:	68e2      	ldr	r2, [r4, #12]
 8017c60:	3201      	adds	r2, #1
 8017c62:	60e2      	str	r2, [r4, #12]
 8017c64:	69a2      	ldr	r2, [r4, #24]
 8017c66:	b102      	cbz	r2, 8017c6a <_scanf_chars+0xa2>
 8017c68:	7033      	strb	r3, [r6, #0]
 8017c6a:	6923      	ldr	r3, [r4, #16]
 8017c6c:	441f      	add	r7, r3
 8017c6e:	6127      	str	r7, [r4, #16]
 8017c70:	2000      	movs	r0, #0
 8017c72:	e7cb      	b.n	8017c0c <_scanf_chars+0x44>
 8017c74:	0801a0b1 	.word	0x0801a0b1

08017c78 <_scanf_i>:
 8017c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c7c:	4698      	mov	r8, r3
 8017c7e:	4b74      	ldr	r3, [pc, #464]	; (8017e50 <_scanf_i+0x1d8>)
 8017c80:	460c      	mov	r4, r1
 8017c82:	4682      	mov	sl, r0
 8017c84:	4616      	mov	r6, r2
 8017c86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017c8a:	b087      	sub	sp, #28
 8017c8c:	ab03      	add	r3, sp, #12
 8017c8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017c92:	4b70      	ldr	r3, [pc, #448]	; (8017e54 <_scanf_i+0x1dc>)
 8017c94:	69a1      	ldr	r1, [r4, #24]
 8017c96:	4a70      	ldr	r2, [pc, #448]	; (8017e58 <_scanf_i+0x1e0>)
 8017c98:	2903      	cmp	r1, #3
 8017c9a:	bf18      	it	ne
 8017c9c:	461a      	movne	r2, r3
 8017c9e:	68a3      	ldr	r3, [r4, #8]
 8017ca0:	9201      	str	r2, [sp, #4]
 8017ca2:	1e5a      	subs	r2, r3, #1
 8017ca4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8017ca8:	bf88      	it	hi
 8017caa:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8017cae:	4627      	mov	r7, r4
 8017cb0:	bf82      	ittt	hi
 8017cb2:	eb03 0905 	addhi.w	r9, r3, r5
 8017cb6:	f240 135d 	movwhi	r3, #349	; 0x15d
 8017cba:	60a3      	strhi	r3, [r4, #8]
 8017cbc:	f857 3b1c 	ldr.w	r3, [r7], #28
 8017cc0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8017cc4:	bf98      	it	ls
 8017cc6:	f04f 0900 	movls.w	r9, #0
 8017cca:	6023      	str	r3, [r4, #0]
 8017ccc:	463d      	mov	r5, r7
 8017cce:	f04f 0b00 	mov.w	fp, #0
 8017cd2:	6831      	ldr	r1, [r6, #0]
 8017cd4:	ab03      	add	r3, sp, #12
 8017cd6:	7809      	ldrb	r1, [r1, #0]
 8017cd8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8017cdc:	2202      	movs	r2, #2
 8017cde:	f7e8 fa9f 	bl	8000220 <memchr>
 8017ce2:	b328      	cbz	r0, 8017d30 <_scanf_i+0xb8>
 8017ce4:	f1bb 0f01 	cmp.w	fp, #1
 8017ce8:	d159      	bne.n	8017d9e <_scanf_i+0x126>
 8017cea:	6862      	ldr	r2, [r4, #4]
 8017cec:	b92a      	cbnz	r2, 8017cfa <_scanf_i+0x82>
 8017cee:	6822      	ldr	r2, [r4, #0]
 8017cf0:	2308      	movs	r3, #8
 8017cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017cf6:	6063      	str	r3, [r4, #4]
 8017cf8:	6022      	str	r2, [r4, #0]
 8017cfa:	6822      	ldr	r2, [r4, #0]
 8017cfc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8017d00:	6022      	str	r2, [r4, #0]
 8017d02:	68a2      	ldr	r2, [r4, #8]
 8017d04:	1e51      	subs	r1, r2, #1
 8017d06:	60a1      	str	r1, [r4, #8]
 8017d08:	b192      	cbz	r2, 8017d30 <_scanf_i+0xb8>
 8017d0a:	6832      	ldr	r2, [r6, #0]
 8017d0c:	1c51      	adds	r1, r2, #1
 8017d0e:	6031      	str	r1, [r6, #0]
 8017d10:	7812      	ldrb	r2, [r2, #0]
 8017d12:	f805 2b01 	strb.w	r2, [r5], #1
 8017d16:	6872      	ldr	r2, [r6, #4]
 8017d18:	3a01      	subs	r2, #1
 8017d1a:	2a00      	cmp	r2, #0
 8017d1c:	6072      	str	r2, [r6, #4]
 8017d1e:	dc07      	bgt.n	8017d30 <_scanf_i+0xb8>
 8017d20:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8017d24:	4631      	mov	r1, r6
 8017d26:	4650      	mov	r0, sl
 8017d28:	4790      	blx	r2
 8017d2a:	2800      	cmp	r0, #0
 8017d2c:	f040 8085 	bne.w	8017e3a <_scanf_i+0x1c2>
 8017d30:	f10b 0b01 	add.w	fp, fp, #1
 8017d34:	f1bb 0f03 	cmp.w	fp, #3
 8017d38:	d1cb      	bne.n	8017cd2 <_scanf_i+0x5a>
 8017d3a:	6863      	ldr	r3, [r4, #4]
 8017d3c:	b90b      	cbnz	r3, 8017d42 <_scanf_i+0xca>
 8017d3e:	230a      	movs	r3, #10
 8017d40:	6063      	str	r3, [r4, #4]
 8017d42:	6863      	ldr	r3, [r4, #4]
 8017d44:	4945      	ldr	r1, [pc, #276]	; (8017e5c <_scanf_i+0x1e4>)
 8017d46:	6960      	ldr	r0, [r4, #20]
 8017d48:	1ac9      	subs	r1, r1, r3
 8017d4a:	f000 f89b 	bl	8017e84 <__sccl>
 8017d4e:	f04f 0b00 	mov.w	fp, #0
 8017d52:	68a3      	ldr	r3, [r4, #8]
 8017d54:	6822      	ldr	r2, [r4, #0]
 8017d56:	2b00      	cmp	r3, #0
 8017d58:	d03d      	beq.n	8017dd6 <_scanf_i+0x15e>
 8017d5a:	6831      	ldr	r1, [r6, #0]
 8017d5c:	6960      	ldr	r0, [r4, #20]
 8017d5e:	f891 c000 	ldrb.w	ip, [r1]
 8017d62:	f810 000c 	ldrb.w	r0, [r0, ip]
 8017d66:	2800      	cmp	r0, #0
 8017d68:	d035      	beq.n	8017dd6 <_scanf_i+0x15e>
 8017d6a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8017d6e:	d124      	bne.n	8017dba <_scanf_i+0x142>
 8017d70:	0510      	lsls	r0, r2, #20
 8017d72:	d522      	bpl.n	8017dba <_scanf_i+0x142>
 8017d74:	f10b 0b01 	add.w	fp, fp, #1
 8017d78:	f1b9 0f00 	cmp.w	r9, #0
 8017d7c:	d003      	beq.n	8017d86 <_scanf_i+0x10e>
 8017d7e:	3301      	adds	r3, #1
 8017d80:	f109 39ff 	add.w	r9, r9, #4294967295
 8017d84:	60a3      	str	r3, [r4, #8]
 8017d86:	6873      	ldr	r3, [r6, #4]
 8017d88:	3b01      	subs	r3, #1
 8017d8a:	2b00      	cmp	r3, #0
 8017d8c:	6073      	str	r3, [r6, #4]
 8017d8e:	dd1b      	ble.n	8017dc8 <_scanf_i+0x150>
 8017d90:	6833      	ldr	r3, [r6, #0]
 8017d92:	3301      	adds	r3, #1
 8017d94:	6033      	str	r3, [r6, #0]
 8017d96:	68a3      	ldr	r3, [r4, #8]
 8017d98:	3b01      	subs	r3, #1
 8017d9a:	60a3      	str	r3, [r4, #8]
 8017d9c:	e7d9      	b.n	8017d52 <_scanf_i+0xda>
 8017d9e:	f1bb 0f02 	cmp.w	fp, #2
 8017da2:	d1ae      	bne.n	8017d02 <_scanf_i+0x8a>
 8017da4:	6822      	ldr	r2, [r4, #0]
 8017da6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8017daa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8017dae:	d1bf      	bne.n	8017d30 <_scanf_i+0xb8>
 8017db0:	2310      	movs	r3, #16
 8017db2:	6063      	str	r3, [r4, #4]
 8017db4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017db8:	e7a2      	b.n	8017d00 <_scanf_i+0x88>
 8017dba:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8017dbe:	6022      	str	r2, [r4, #0]
 8017dc0:	780b      	ldrb	r3, [r1, #0]
 8017dc2:	f805 3b01 	strb.w	r3, [r5], #1
 8017dc6:	e7de      	b.n	8017d86 <_scanf_i+0x10e>
 8017dc8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017dcc:	4631      	mov	r1, r6
 8017dce:	4650      	mov	r0, sl
 8017dd0:	4798      	blx	r3
 8017dd2:	2800      	cmp	r0, #0
 8017dd4:	d0df      	beq.n	8017d96 <_scanf_i+0x11e>
 8017dd6:	6823      	ldr	r3, [r4, #0]
 8017dd8:	05d9      	lsls	r1, r3, #23
 8017dda:	d50d      	bpl.n	8017df8 <_scanf_i+0x180>
 8017ddc:	42bd      	cmp	r5, r7
 8017dde:	d909      	bls.n	8017df4 <_scanf_i+0x17c>
 8017de0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8017de4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017de8:	4632      	mov	r2, r6
 8017dea:	4650      	mov	r0, sl
 8017dec:	4798      	blx	r3
 8017dee:	f105 39ff 	add.w	r9, r5, #4294967295
 8017df2:	464d      	mov	r5, r9
 8017df4:	42bd      	cmp	r5, r7
 8017df6:	d028      	beq.n	8017e4a <_scanf_i+0x1d2>
 8017df8:	6822      	ldr	r2, [r4, #0]
 8017dfa:	f012 0210 	ands.w	r2, r2, #16
 8017dfe:	d113      	bne.n	8017e28 <_scanf_i+0x1b0>
 8017e00:	702a      	strb	r2, [r5, #0]
 8017e02:	6863      	ldr	r3, [r4, #4]
 8017e04:	9e01      	ldr	r6, [sp, #4]
 8017e06:	4639      	mov	r1, r7
 8017e08:	4650      	mov	r0, sl
 8017e0a:	47b0      	blx	r6
 8017e0c:	f8d8 3000 	ldr.w	r3, [r8]
 8017e10:	6821      	ldr	r1, [r4, #0]
 8017e12:	1d1a      	adds	r2, r3, #4
 8017e14:	f8c8 2000 	str.w	r2, [r8]
 8017e18:	f011 0f20 	tst.w	r1, #32
 8017e1c:	681b      	ldr	r3, [r3, #0]
 8017e1e:	d00f      	beq.n	8017e40 <_scanf_i+0x1c8>
 8017e20:	6018      	str	r0, [r3, #0]
 8017e22:	68e3      	ldr	r3, [r4, #12]
 8017e24:	3301      	adds	r3, #1
 8017e26:	60e3      	str	r3, [r4, #12]
 8017e28:	1bed      	subs	r5, r5, r7
 8017e2a:	44ab      	add	fp, r5
 8017e2c:	6925      	ldr	r5, [r4, #16]
 8017e2e:	445d      	add	r5, fp
 8017e30:	6125      	str	r5, [r4, #16]
 8017e32:	2000      	movs	r0, #0
 8017e34:	b007      	add	sp, #28
 8017e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e3a:	f04f 0b00 	mov.w	fp, #0
 8017e3e:	e7ca      	b.n	8017dd6 <_scanf_i+0x15e>
 8017e40:	07ca      	lsls	r2, r1, #31
 8017e42:	bf4c      	ite	mi
 8017e44:	8018      	strhmi	r0, [r3, #0]
 8017e46:	6018      	strpl	r0, [r3, #0]
 8017e48:	e7eb      	b.n	8017e22 <_scanf_i+0x1aa>
 8017e4a:	2001      	movs	r0, #1
 8017e4c:	e7f2      	b.n	8017e34 <_scanf_i+0x1bc>
 8017e4e:	bf00      	nop
 8017e50:	08019f20 	.word	0x08019f20
 8017e54:	0801502d 	.word	0x0801502d
 8017e58:	08014f31 	.word	0x08014f31
 8017e5c:	0801a576 	.word	0x0801a576

08017e60 <_read_r>:
 8017e60:	b538      	push	{r3, r4, r5, lr}
 8017e62:	4d07      	ldr	r5, [pc, #28]	; (8017e80 <_read_r+0x20>)
 8017e64:	4604      	mov	r4, r0
 8017e66:	4608      	mov	r0, r1
 8017e68:	4611      	mov	r1, r2
 8017e6a:	2200      	movs	r2, #0
 8017e6c:	602a      	str	r2, [r5, #0]
 8017e6e:	461a      	mov	r2, r3
 8017e70:	f000 f8e4 	bl	801803c <_read>
 8017e74:	1c43      	adds	r3, r0, #1
 8017e76:	d102      	bne.n	8017e7e <_read_r+0x1e>
 8017e78:	682b      	ldr	r3, [r5, #0]
 8017e7a:	b103      	cbz	r3, 8017e7e <_read_r+0x1e>
 8017e7c:	6023      	str	r3, [r4, #0]
 8017e7e:	bd38      	pop	{r3, r4, r5, pc}
 8017e80:	2000654c 	.word	0x2000654c

08017e84 <__sccl>:
 8017e84:	b570      	push	{r4, r5, r6, lr}
 8017e86:	780b      	ldrb	r3, [r1, #0]
 8017e88:	4604      	mov	r4, r0
 8017e8a:	2b5e      	cmp	r3, #94	; 0x5e
 8017e8c:	bf0b      	itete	eq
 8017e8e:	784b      	ldrbeq	r3, [r1, #1]
 8017e90:	1c48      	addne	r0, r1, #1
 8017e92:	1c88      	addeq	r0, r1, #2
 8017e94:	2200      	movne	r2, #0
 8017e96:	bf08      	it	eq
 8017e98:	2201      	moveq	r2, #1
 8017e9a:	1e61      	subs	r1, r4, #1
 8017e9c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8017ea0:	f801 2f01 	strb.w	r2, [r1, #1]!
 8017ea4:	42a9      	cmp	r1, r5
 8017ea6:	d1fb      	bne.n	8017ea0 <__sccl+0x1c>
 8017ea8:	b90b      	cbnz	r3, 8017eae <__sccl+0x2a>
 8017eaa:	3801      	subs	r0, #1
 8017eac:	bd70      	pop	{r4, r5, r6, pc}
 8017eae:	f082 0101 	eor.w	r1, r2, #1
 8017eb2:	54e1      	strb	r1, [r4, r3]
 8017eb4:	1c42      	adds	r2, r0, #1
 8017eb6:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8017eba:	2d2d      	cmp	r5, #45	; 0x2d
 8017ebc:	f102 36ff 	add.w	r6, r2, #4294967295
 8017ec0:	4610      	mov	r0, r2
 8017ec2:	d006      	beq.n	8017ed2 <__sccl+0x4e>
 8017ec4:	2d5d      	cmp	r5, #93	; 0x5d
 8017ec6:	d0f1      	beq.n	8017eac <__sccl+0x28>
 8017ec8:	b90d      	cbnz	r5, 8017ece <__sccl+0x4a>
 8017eca:	4630      	mov	r0, r6
 8017ecc:	e7ee      	b.n	8017eac <__sccl+0x28>
 8017ece:	462b      	mov	r3, r5
 8017ed0:	e7ef      	b.n	8017eb2 <__sccl+0x2e>
 8017ed2:	7816      	ldrb	r6, [r2, #0]
 8017ed4:	2e5d      	cmp	r6, #93	; 0x5d
 8017ed6:	d0fa      	beq.n	8017ece <__sccl+0x4a>
 8017ed8:	42b3      	cmp	r3, r6
 8017eda:	dcf8      	bgt.n	8017ece <__sccl+0x4a>
 8017edc:	4618      	mov	r0, r3
 8017ede:	3001      	adds	r0, #1
 8017ee0:	4286      	cmp	r6, r0
 8017ee2:	5421      	strb	r1, [r4, r0]
 8017ee4:	dcfb      	bgt.n	8017ede <__sccl+0x5a>
 8017ee6:	43d8      	mvns	r0, r3
 8017ee8:	4430      	add	r0, r6
 8017eea:	1c5d      	adds	r5, r3, #1
 8017eec:	42b3      	cmp	r3, r6
 8017eee:	bfa8      	it	ge
 8017ef0:	2000      	movge	r0, #0
 8017ef2:	182b      	adds	r3, r5, r0
 8017ef4:	3202      	adds	r2, #2
 8017ef6:	e7de      	b.n	8017eb6 <__sccl+0x32>

08017ef8 <__submore>:
 8017ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017efc:	460c      	mov	r4, r1
 8017efe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017f00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017f04:	4299      	cmp	r1, r3
 8017f06:	d11d      	bne.n	8017f44 <__submore+0x4c>
 8017f08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017f0c:	f7fb f896 	bl	801303c <_malloc_r>
 8017f10:	b918      	cbnz	r0, 8017f1a <__submore+0x22>
 8017f12:	f04f 30ff 	mov.w	r0, #4294967295
 8017f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017f1e:	63a3      	str	r3, [r4, #56]	; 0x38
 8017f20:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8017f24:	6360      	str	r0, [r4, #52]	; 0x34
 8017f26:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8017f2a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8017f2e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8017f32:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017f36:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8017f3a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8017f3e:	6020      	str	r0, [r4, #0]
 8017f40:	2000      	movs	r0, #0
 8017f42:	e7e8      	b.n	8017f16 <__submore+0x1e>
 8017f44:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8017f46:	0077      	lsls	r7, r6, #1
 8017f48:	463a      	mov	r2, r7
 8017f4a:	f7ff f98f 	bl	801726c <_realloc_r>
 8017f4e:	4605      	mov	r5, r0
 8017f50:	2800      	cmp	r0, #0
 8017f52:	d0de      	beq.n	8017f12 <__submore+0x1a>
 8017f54:	eb00 0806 	add.w	r8, r0, r6
 8017f58:	4601      	mov	r1, r0
 8017f5a:	4632      	mov	r2, r6
 8017f5c:	4640      	mov	r0, r8
 8017f5e:	f7fa ffed 	bl	8012f3c <memcpy>
 8017f62:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8017f66:	f8c4 8000 	str.w	r8, [r4]
 8017f6a:	e7e9      	b.n	8017f40 <__submore+0x48>

08017f6c <__ascii_wctomb>:
 8017f6c:	b149      	cbz	r1, 8017f82 <__ascii_wctomb+0x16>
 8017f6e:	2aff      	cmp	r2, #255	; 0xff
 8017f70:	bf85      	ittet	hi
 8017f72:	238a      	movhi	r3, #138	; 0x8a
 8017f74:	6003      	strhi	r3, [r0, #0]
 8017f76:	700a      	strbls	r2, [r1, #0]
 8017f78:	f04f 30ff 	movhi.w	r0, #4294967295
 8017f7c:	bf98      	it	ls
 8017f7e:	2001      	movls	r0, #1
 8017f80:	4770      	bx	lr
 8017f82:	4608      	mov	r0, r1
 8017f84:	4770      	bx	lr
	...

08017f88 <_fstat_r>:
 8017f88:	b538      	push	{r3, r4, r5, lr}
 8017f8a:	4d07      	ldr	r5, [pc, #28]	; (8017fa8 <_fstat_r+0x20>)
 8017f8c:	2300      	movs	r3, #0
 8017f8e:	4604      	mov	r4, r0
 8017f90:	4608      	mov	r0, r1
 8017f92:	4611      	mov	r1, r2
 8017f94:	602b      	str	r3, [r5, #0]
 8017f96:	f000 f829 	bl	8017fec <_fstat>
 8017f9a:	1c43      	adds	r3, r0, #1
 8017f9c:	d102      	bne.n	8017fa4 <_fstat_r+0x1c>
 8017f9e:	682b      	ldr	r3, [r5, #0]
 8017fa0:	b103      	cbz	r3, 8017fa4 <_fstat_r+0x1c>
 8017fa2:	6023      	str	r3, [r4, #0]
 8017fa4:	bd38      	pop	{r3, r4, r5, pc}
 8017fa6:	bf00      	nop
 8017fa8:	2000654c 	.word	0x2000654c

08017fac <_isatty_r>:
 8017fac:	b538      	push	{r3, r4, r5, lr}
 8017fae:	4d06      	ldr	r5, [pc, #24]	; (8017fc8 <_isatty_r+0x1c>)
 8017fb0:	2300      	movs	r3, #0
 8017fb2:	4604      	mov	r4, r0
 8017fb4:	4608      	mov	r0, r1
 8017fb6:	602b      	str	r3, [r5, #0]
 8017fb8:	f000 f828 	bl	801800c <_isatty>
 8017fbc:	1c43      	adds	r3, r0, #1
 8017fbe:	d102      	bne.n	8017fc6 <_isatty_r+0x1a>
 8017fc0:	682b      	ldr	r3, [r5, #0]
 8017fc2:	b103      	cbz	r3, 8017fc6 <_isatty_r+0x1a>
 8017fc4:	6023      	str	r3, [r4, #0]
 8017fc6:	bd38      	pop	{r3, r4, r5, pc}
 8017fc8:	2000654c 	.word	0x2000654c

08017fcc <_malloc_usable_size_r>:
 8017fcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017fd0:	1f18      	subs	r0, r3, #4
 8017fd2:	2b00      	cmp	r3, #0
 8017fd4:	bfbc      	itt	lt
 8017fd6:	580b      	ldrlt	r3, [r1, r0]
 8017fd8:	18c0      	addlt	r0, r0, r3
 8017fda:	4770      	bx	lr

08017fdc <_close>:
 8017fdc:	4b02      	ldr	r3, [pc, #8]	; (8017fe8 <_close+0xc>)
 8017fde:	2258      	movs	r2, #88	; 0x58
 8017fe0:	601a      	str	r2, [r3, #0]
 8017fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8017fe6:	4770      	bx	lr
 8017fe8:	2000654c 	.word	0x2000654c

08017fec <_fstat>:
 8017fec:	4b02      	ldr	r3, [pc, #8]	; (8017ff8 <_fstat+0xc>)
 8017fee:	2258      	movs	r2, #88	; 0x58
 8017ff0:	601a      	str	r2, [r3, #0]
 8017ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8017ff6:	4770      	bx	lr
 8017ff8:	2000654c 	.word	0x2000654c

08017ffc <_getpid>:
 8017ffc:	4b02      	ldr	r3, [pc, #8]	; (8018008 <_getpid+0xc>)
 8017ffe:	2258      	movs	r2, #88	; 0x58
 8018000:	601a      	str	r2, [r3, #0]
 8018002:	f04f 30ff 	mov.w	r0, #4294967295
 8018006:	4770      	bx	lr
 8018008:	2000654c 	.word	0x2000654c

0801800c <_isatty>:
 801800c:	4b02      	ldr	r3, [pc, #8]	; (8018018 <_isatty+0xc>)
 801800e:	2258      	movs	r2, #88	; 0x58
 8018010:	601a      	str	r2, [r3, #0]
 8018012:	2000      	movs	r0, #0
 8018014:	4770      	bx	lr
 8018016:	bf00      	nop
 8018018:	2000654c 	.word	0x2000654c

0801801c <_kill>:
 801801c:	4b02      	ldr	r3, [pc, #8]	; (8018028 <_kill+0xc>)
 801801e:	2258      	movs	r2, #88	; 0x58
 8018020:	601a      	str	r2, [r3, #0]
 8018022:	f04f 30ff 	mov.w	r0, #4294967295
 8018026:	4770      	bx	lr
 8018028:	2000654c 	.word	0x2000654c

0801802c <_lseek>:
 801802c:	4b02      	ldr	r3, [pc, #8]	; (8018038 <_lseek+0xc>)
 801802e:	2258      	movs	r2, #88	; 0x58
 8018030:	601a      	str	r2, [r3, #0]
 8018032:	f04f 30ff 	mov.w	r0, #4294967295
 8018036:	4770      	bx	lr
 8018038:	2000654c 	.word	0x2000654c

0801803c <_read>:
 801803c:	4b02      	ldr	r3, [pc, #8]	; (8018048 <_read+0xc>)
 801803e:	2258      	movs	r2, #88	; 0x58
 8018040:	601a      	str	r2, [r3, #0]
 8018042:	f04f 30ff 	mov.w	r0, #4294967295
 8018046:	4770      	bx	lr
 8018048:	2000654c 	.word	0x2000654c

0801804c <_sbrk>:
 801804c:	4b04      	ldr	r3, [pc, #16]	; (8018060 <_sbrk+0x14>)
 801804e:	6819      	ldr	r1, [r3, #0]
 8018050:	4602      	mov	r2, r0
 8018052:	b909      	cbnz	r1, 8018058 <_sbrk+0xc>
 8018054:	4903      	ldr	r1, [pc, #12]	; (8018064 <_sbrk+0x18>)
 8018056:	6019      	str	r1, [r3, #0]
 8018058:	6818      	ldr	r0, [r3, #0]
 801805a:	4402      	add	r2, r0
 801805c:	601a      	str	r2, [r3, #0]
 801805e:	4770      	bx	lr
 8018060:	20005ae0 	.word	0x20005ae0
 8018064:	20006550 	.word	0x20006550

08018068 <_write>:
 8018068:	4b02      	ldr	r3, [pc, #8]	; (8018074 <_write+0xc>)
 801806a:	2258      	movs	r2, #88	; 0x58
 801806c:	601a      	str	r2, [r3, #0]
 801806e:	f04f 30ff 	mov.w	r0, #4294967295
 8018072:	4770      	bx	lr
 8018074:	2000654c 	.word	0x2000654c

08018078 <_exit>:
 8018078:	e7fe      	b.n	8018078 <_exit>
	...

0801807c <_init>:
 801807c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801807e:	bf00      	nop
 8018080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018082:	bc08      	pop	{r3}
 8018084:	469e      	mov	lr, r3
 8018086:	4770      	bx	lr

08018088 <_fini>:
 8018088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801808a:	bf00      	nop
 801808c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801808e:	bc08      	pop	{r3}
 8018090:	469e      	mov	lr, r3
 8018092:	4770      	bx	lr
