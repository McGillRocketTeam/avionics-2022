
FC_v2.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000206e0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002930  08020890  08020890  00030890  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080231c0  080231c0  00040334  2**0
                  CONTENTS
  4 .ARM          00000008  080231c0  080231c0  000331c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080231c8  080231c8  00040334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080231c8  080231c8  000331c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080231d0  080231d0  000331d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000334  20000000  080231d4  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040334  2**0
                  CONTENTS
 10 .bss          000099d8  20000334  20000334  00040334  2**2
                  ALLOC
 11 ._user_heap_stack 00000a04  20009d0c  20009d0c  00040334  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040334  2**0
                  CONTENTS, READONLY
 13 .debug_info   0007ab69  00000000  00000000  00040364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000af69  00000000  00000000  000baecd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003e18  00000000  00000000  000c5e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003ab0  00000000  00000000  000c9c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003964a  00000000  00000000  000cd700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004b2ac  00000000  00000000  00106d4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00115b93  00000000  00000000  00151ff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00267b89  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000124d8  00000000  00000000  00267bdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000cc  00000000  00000000  0027a0b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  0027a180  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000334 	.word	0x20000334
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08020878 	.word	0x08020878

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000338 	.word	0x20000338
 80001ec:	08020878 	.word	0x08020878

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_ldivmod>:
 8000cc8:	b97b      	cbnz	r3, 8000cea <__aeabi_ldivmod+0x22>
 8000cca:	b972      	cbnz	r2, 8000cea <__aeabi_ldivmod+0x22>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bfbe      	ittt	lt
 8000cd0:	2000      	movlt	r0, #0
 8000cd2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cd6:	e006      	blt.n	8000ce6 <__aeabi_ldivmod+0x1e>
 8000cd8:	bf08      	it	eq
 8000cda:	2800      	cmpeq	r0, #0
 8000cdc:	bf1c      	itt	ne
 8000cde:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ce2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce6:	f000 b9ef 	b.w	80010c8 <__aeabi_idiv0>
 8000cea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	db09      	blt.n	8000d0a <__aeabi_ldivmod+0x42>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db1a      	blt.n	8000d30 <__aeabi_ldivmod+0x68>
 8000cfa:	f000 f883 	bl	8000e04 <__udivmoddi4>
 8000cfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d06:	b004      	add	sp, #16
 8000d08:	4770      	bx	lr
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db1b      	blt.n	8000d4c <__aeabi_ldivmod+0x84>
 8000d14:	f000 f876 	bl	8000e04 <__udivmoddi4>
 8000d18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d20:	b004      	add	sp, #16
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	4252      	negs	r2, r2
 8000d2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2e:	4770      	bx	lr
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	f000 f865 	bl	8000e04 <__udivmoddi4>
 8000d3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d42:	b004      	add	sp, #16
 8000d44:	4240      	negs	r0, r0
 8000d46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4a:	4770      	bx	lr
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d52:	f000 f857 	bl	8000e04 <__udivmoddi4>
 8000d56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d5e:	b004      	add	sp, #16
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b9a4 	b.w	80010c8 <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f83c 	bl	8000e04 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_d2lz>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	460d      	mov	r5, r1
 8000da2:	f7ff febb 	bl	8000b1c <__aeabi_dcmplt>
 8000da6:	b928      	cbnz	r0, 8000db4 <__aeabi_d2lz+0x1c>
 8000da8:	4620      	mov	r0, r4
 8000daa:	4629      	mov	r1, r5
 8000dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000db0:	f000 b80a 	b.w	8000dc8 <__aeabi_d2ulz>
 8000db4:	4620      	mov	r0, r4
 8000db6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dba:	f000 f805 	bl	8000dc8 <__aeabi_d2ulz>
 8000dbe:	4240      	negs	r0, r0
 8000dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc4:	bd38      	pop	{r3, r4, r5, pc}
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_d2ulz>:
 8000dc8:	b5d0      	push	{r4, r6, r7, lr}
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <__aeabi_d2ulz+0x34>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4606      	mov	r6, r0
 8000dd0:	460f      	mov	r7, r1
 8000dd2:	f7ff fc31 	bl	8000638 <__aeabi_dmul>
 8000dd6:	f7ff ff07 	bl	8000be8 <__aeabi_d2uiz>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	f7ff fbb2 	bl	8000544 <__aeabi_ui2d>
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <__aeabi_d2ulz+0x38>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f7ff fc28 	bl	8000638 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4630      	mov	r0, r6
 8000dee:	4639      	mov	r1, r7
 8000df0:	f7ff fa6a 	bl	80002c8 <__aeabi_dsub>
 8000df4:	f7ff fef8 	bl	8000be8 <__aeabi_d2uiz>
 8000df8:	4621      	mov	r1, r4
 8000dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000dfc:	3df00000 	.word	0x3df00000
 8000e00:	41f00000 	.word	0x41f00000

08000e04 <__udivmoddi4>:
 8000e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e08:	9d08      	ldr	r5, [sp, #32]
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	468c      	mov	ip, r1
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8083 	bne.w	8000f1a <__udivmoddi4+0x116>
 8000e14:	428a      	cmp	r2, r1
 8000e16:	4617      	mov	r7, r2
 8000e18:	d947      	bls.n	8000eaa <__udivmoddi4+0xa6>
 8000e1a:	fab2 f282 	clz	r2, r2
 8000e1e:	b142      	cbz	r2, 8000e32 <__udivmoddi4+0x2e>
 8000e20:	f1c2 0020 	rsb	r0, r2, #32
 8000e24:	fa24 f000 	lsr.w	r0, r4, r0
 8000e28:	4091      	lsls	r1, r2
 8000e2a:	4097      	lsls	r7, r2
 8000e2c:	ea40 0c01 	orr.w	ip, r0, r1
 8000e30:	4094      	lsls	r4, r2
 8000e32:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e36:	0c23      	lsrs	r3, r4, #16
 8000e38:	fbbc f6f8 	udiv	r6, ip, r8
 8000e3c:	fa1f fe87 	uxth.w	lr, r7
 8000e40:	fb08 c116 	mls	r1, r8, r6, ip
 8000e44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e48:	fb06 f10e 	mul.w	r1, r6, lr
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d909      	bls.n	8000e64 <__udivmoddi4+0x60>
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e56:	f080 8119 	bcs.w	800108c <__udivmoddi4+0x288>
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	f240 8116 	bls.w	800108c <__udivmoddi4+0x288>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	443b      	add	r3, r7
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e6c:	fb08 3310 	mls	r3, r8, r0, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e78:	45a6      	cmp	lr, r4
 8000e7a:	d909      	bls.n	8000e90 <__udivmoddi4+0x8c>
 8000e7c:	193c      	adds	r4, r7, r4
 8000e7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e82:	f080 8105 	bcs.w	8001090 <__udivmoddi4+0x28c>
 8000e86:	45a6      	cmp	lr, r4
 8000e88:	f240 8102 	bls.w	8001090 <__udivmoddi4+0x28c>
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	443c      	add	r4, r7
 8000e90:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e94:	eba4 040e 	sub.w	r4, r4, lr
 8000e98:	2600      	movs	r6, #0
 8000e9a:	b11d      	cbz	r5, 8000ea4 <__udivmoddi4+0xa0>
 8000e9c:	40d4      	lsrs	r4, r2
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	b902      	cbnz	r2, 8000eae <__udivmoddi4+0xaa>
 8000eac:	deff      	udf	#255	; 0xff
 8000eae:	fab2 f282 	clz	r2, r2
 8000eb2:	2a00      	cmp	r2, #0
 8000eb4:	d150      	bne.n	8000f58 <__udivmoddi4+0x154>
 8000eb6:	1bcb      	subs	r3, r1, r7
 8000eb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ebc:	fa1f f887 	uxth.w	r8, r7
 8000ec0:	2601      	movs	r6, #1
 8000ec2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ec6:	0c21      	lsrs	r1, r4, #16
 8000ec8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb08 f30c 	mul.w	r3, r8, ip
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0xe4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ede:	d202      	bcs.n	8000ee6 <__udivmoddi4+0xe2>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	f200 80e9 	bhi.w	80010b8 <__udivmoddi4+0x2b4>
 8000ee6:	4684      	mov	ip, r0
 8000ee8:	1ac9      	subs	r1, r1, r3
 8000eea:	b2a3      	uxth	r3, r4
 8000eec:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ef0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ef4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ef8:	fb08 f800 	mul.w	r8, r8, r0
 8000efc:	45a0      	cmp	r8, r4
 8000efe:	d907      	bls.n	8000f10 <__udivmoddi4+0x10c>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f06:	d202      	bcs.n	8000f0e <__udivmoddi4+0x10a>
 8000f08:	45a0      	cmp	r8, r4
 8000f0a:	f200 80d9 	bhi.w	80010c0 <__udivmoddi4+0x2bc>
 8000f0e:	4618      	mov	r0, r3
 8000f10:	eba4 0408 	sub.w	r4, r4, r8
 8000f14:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000f18:	e7bf      	b.n	8000e9a <__udivmoddi4+0x96>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d909      	bls.n	8000f32 <__udivmoddi4+0x12e>
 8000f1e:	2d00      	cmp	r5, #0
 8000f20:	f000 80b1 	beq.w	8001086 <__udivmoddi4+0x282>
 8000f24:	2600      	movs	r6, #0
 8000f26:	e9c5 0100 	strd	r0, r1, [r5]
 8000f2a:	4630      	mov	r0, r6
 8000f2c:	4631      	mov	r1, r6
 8000f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f32:	fab3 f683 	clz	r6, r3
 8000f36:	2e00      	cmp	r6, #0
 8000f38:	d14a      	bne.n	8000fd0 <__udivmoddi4+0x1cc>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d302      	bcc.n	8000f44 <__udivmoddi4+0x140>
 8000f3e:	4282      	cmp	r2, r0
 8000f40:	f200 80b8 	bhi.w	80010b4 <__udivmoddi4+0x2b0>
 8000f44:	1a84      	subs	r4, r0, r2
 8000f46:	eb61 0103 	sbc.w	r1, r1, r3
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	468c      	mov	ip, r1
 8000f4e:	2d00      	cmp	r5, #0
 8000f50:	d0a8      	beq.n	8000ea4 <__udivmoddi4+0xa0>
 8000f52:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f56:	e7a5      	b.n	8000ea4 <__udivmoddi4+0xa0>
 8000f58:	f1c2 0320 	rsb	r3, r2, #32
 8000f5c:	fa20 f603 	lsr.w	r6, r0, r3
 8000f60:	4097      	lsls	r7, r2
 8000f62:	fa01 f002 	lsl.w	r0, r1, r2
 8000f66:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6a:	40d9      	lsrs	r1, r3
 8000f6c:	4330      	orrs	r0, r6
 8000f6e:	0c03      	lsrs	r3, r0, #16
 8000f70:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f74:	fa1f f887 	uxth.w	r8, r7
 8000f78:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f80:	fb06 f108 	mul.w	r1, r6, r8
 8000f84:	4299      	cmp	r1, r3
 8000f86:	fa04 f402 	lsl.w	r4, r4, r2
 8000f8a:	d909      	bls.n	8000fa0 <__udivmoddi4+0x19c>
 8000f8c:	18fb      	adds	r3, r7, r3
 8000f8e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f92:	f080 808d 	bcs.w	80010b0 <__udivmoddi4+0x2ac>
 8000f96:	4299      	cmp	r1, r3
 8000f98:	f240 808a 	bls.w	80010b0 <__udivmoddi4+0x2ac>
 8000f9c:	3e02      	subs	r6, #2
 8000f9e:	443b      	add	r3, r7
 8000fa0:	1a5b      	subs	r3, r3, r1
 8000fa2:	b281      	uxth	r1, r0
 8000fa4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fa8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb0:	fb00 f308 	mul.w	r3, r0, r8
 8000fb4:	428b      	cmp	r3, r1
 8000fb6:	d907      	bls.n	8000fc8 <__udivmoddi4+0x1c4>
 8000fb8:	1879      	adds	r1, r7, r1
 8000fba:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fbe:	d273      	bcs.n	80010a8 <__udivmoddi4+0x2a4>
 8000fc0:	428b      	cmp	r3, r1
 8000fc2:	d971      	bls.n	80010a8 <__udivmoddi4+0x2a4>
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	4439      	add	r1, r7
 8000fc8:	1acb      	subs	r3, r1, r3
 8000fca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000fce:	e778      	b.n	8000ec2 <__udivmoddi4+0xbe>
 8000fd0:	f1c6 0c20 	rsb	ip, r6, #32
 8000fd4:	fa03 f406 	lsl.w	r4, r3, r6
 8000fd8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000fdc:	431c      	orrs	r4, r3
 8000fde:	fa20 f70c 	lsr.w	r7, r0, ip
 8000fe2:	fa01 f306 	lsl.w	r3, r1, r6
 8000fe6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000fea:	fa21 f10c 	lsr.w	r1, r1, ip
 8000fee:	431f      	orrs	r7, r3
 8000ff0:	0c3b      	lsrs	r3, r7, #16
 8000ff2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff6:	fa1f f884 	uxth.w	r8, r4
 8000ffa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ffe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001002:	fb09 fa08 	mul.w	sl, r9, r8
 8001006:	458a      	cmp	sl, r1
 8001008:	fa02 f206 	lsl.w	r2, r2, r6
 800100c:	fa00 f306 	lsl.w	r3, r0, r6
 8001010:	d908      	bls.n	8001024 <__udivmoddi4+0x220>
 8001012:	1861      	adds	r1, r4, r1
 8001014:	f109 30ff 	add.w	r0, r9, #4294967295
 8001018:	d248      	bcs.n	80010ac <__udivmoddi4+0x2a8>
 800101a:	458a      	cmp	sl, r1
 800101c:	d946      	bls.n	80010ac <__udivmoddi4+0x2a8>
 800101e:	f1a9 0902 	sub.w	r9, r9, #2
 8001022:	4421      	add	r1, r4
 8001024:	eba1 010a 	sub.w	r1, r1, sl
 8001028:	b2bf      	uxth	r7, r7
 800102a:	fbb1 f0fe 	udiv	r0, r1, lr
 800102e:	fb0e 1110 	mls	r1, lr, r0, r1
 8001032:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001036:	fb00 f808 	mul.w	r8, r0, r8
 800103a:	45b8      	cmp	r8, r7
 800103c:	d907      	bls.n	800104e <__udivmoddi4+0x24a>
 800103e:	19e7      	adds	r7, r4, r7
 8001040:	f100 31ff 	add.w	r1, r0, #4294967295
 8001044:	d22e      	bcs.n	80010a4 <__udivmoddi4+0x2a0>
 8001046:	45b8      	cmp	r8, r7
 8001048:	d92c      	bls.n	80010a4 <__udivmoddi4+0x2a0>
 800104a:	3802      	subs	r0, #2
 800104c:	4427      	add	r7, r4
 800104e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001052:	eba7 0708 	sub.w	r7, r7, r8
 8001056:	fba0 8902 	umull	r8, r9, r0, r2
 800105a:	454f      	cmp	r7, r9
 800105c:	46c6      	mov	lr, r8
 800105e:	4649      	mov	r1, r9
 8001060:	d31a      	bcc.n	8001098 <__udivmoddi4+0x294>
 8001062:	d017      	beq.n	8001094 <__udivmoddi4+0x290>
 8001064:	b15d      	cbz	r5, 800107e <__udivmoddi4+0x27a>
 8001066:	ebb3 020e 	subs.w	r2, r3, lr
 800106a:	eb67 0701 	sbc.w	r7, r7, r1
 800106e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001072:	40f2      	lsrs	r2, r6
 8001074:	ea4c 0202 	orr.w	r2, ip, r2
 8001078:	40f7      	lsrs	r7, r6
 800107a:	e9c5 2700 	strd	r2, r7, [r5]
 800107e:	2600      	movs	r6, #0
 8001080:	4631      	mov	r1, r6
 8001082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001086:	462e      	mov	r6, r5
 8001088:	4628      	mov	r0, r5
 800108a:	e70b      	b.n	8000ea4 <__udivmoddi4+0xa0>
 800108c:	4606      	mov	r6, r0
 800108e:	e6e9      	b.n	8000e64 <__udivmoddi4+0x60>
 8001090:	4618      	mov	r0, r3
 8001092:	e6fd      	b.n	8000e90 <__udivmoddi4+0x8c>
 8001094:	4543      	cmp	r3, r8
 8001096:	d2e5      	bcs.n	8001064 <__udivmoddi4+0x260>
 8001098:	ebb8 0e02 	subs.w	lr, r8, r2
 800109c:	eb69 0104 	sbc.w	r1, r9, r4
 80010a0:	3801      	subs	r0, #1
 80010a2:	e7df      	b.n	8001064 <__udivmoddi4+0x260>
 80010a4:	4608      	mov	r0, r1
 80010a6:	e7d2      	b.n	800104e <__udivmoddi4+0x24a>
 80010a8:	4660      	mov	r0, ip
 80010aa:	e78d      	b.n	8000fc8 <__udivmoddi4+0x1c4>
 80010ac:	4681      	mov	r9, r0
 80010ae:	e7b9      	b.n	8001024 <__udivmoddi4+0x220>
 80010b0:	4666      	mov	r6, ip
 80010b2:	e775      	b.n	8000fa0 <__udivmoddi4+0x19c>
 80010b4:	4630      	mov	r0, r6
 80010b6:	e74a      	b.n	8000f4e <__udivmoddi4+0x14a>
 80010b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80010bc:	4439      	add	r1, r7
 80010be:	e713      	b.n	8000ee8 <__udivmoddi4+0xe4>
 80010c0:	3802      	subs	r0, #2
 80010c2:	443c      	add	r4, r7
 80010c4:	e724      	b.n	8000f10 <__udivmoddi4+0x10c>
 80010c6:	bf00      	nop

080010c8 <__aeabi_idiv0>:
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop

080010cc <println>:

#include <MRT_helpers.h>
#include <MRT_setup.h>
#include <tim.h>

void println(char* s){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	#if PRINT
	HAL_UART_Transmit(&DEBUGUART, (uint8_t*) s, strlen(s), HAL_MAX_DELAY);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff f895 	bl	8000204 <strlen>
 80010da:	4603      	mov	r3, r0
 80010dc:	b29a      	uxth	r2, r3
 80010de:	f04f 33ff 	mov.w	r3, #4294967295
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	4806      	ldr	r0, [pc, #24]	; (8001100 <println+0x34>)
 80010e6:	f010 fdbe 	bl	8011c66 <HAL_UART_Transmit>
	HAL_UART_Transmit(&DEBUGUART, (uint8_t*) "\r\n", 2, HAL_MAX_DELAY);
 80010ea:	f04f 33ff 	mov.w	r3, #4294967295
 80010ee:	2202      	movs	r2, #2
 80010f0:	4904      	ldr	r1, [pc, #16]	; (8001104 <println+0x38>)
 80010f2:	4803      	ldr	r0, [pc, #12]	; (8001100 <println+0x34>)
 80010f4:	f010 fdb7 	bl	8011c66 <HAL_UART_Transmit>
	#endif
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20008968 	.word	0x20008968
 8001104:	08020890 	.word	0x08020890

08001108 <print>:

void print(char* s){
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	#if PRINT
	HAL_UART_Transmit(&DEBUGUART, (uint8_t*) s, strlen(s), HAL_MAX_DELAY);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff f877 	bl	8000204 <strlen>
 8001116:	4603      	mov	r3, r0
 8001118:	b29a      	uxth	r2, r3
 800111a:	f04f 33ff 	mov.w	r3, #4294967295
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	4803      	ldr	r0, [pc, #12]	; (8001130 <print+0x28>)
 8001122:	f010 fda0 	bl	8011c66 <HAL_UART_Transmit>
	#endif
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20008968 	.word	0x20008968

08001134 <no_print>:

void no_print(char* s){
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
	//TODO Buffer function for Iridium
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <tone_freq>:

// buzz at particular frequency
void tone_freq(uint32_t duration, uint32_t repeats, uint32_t freq) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
	#if !NO_BUZZ
	// TIM2 base frequency is 90 MHz, PSC = 90-1
	// can calculate required ARR value
	TIM2->ARR = 1000000 / freq;
 8001154:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001158:	491c      	ldr	r1, [pc, #112]	; (80011cc <tone_freq+0x84>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001160:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->EGR |= TIM_EGR_UG;
 8001162:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001166:	695b      	ldr	r3, [r3, #20]
 8001168:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	6153      	str	r3, [r2, #20]

	for (uint32_t i = 0; i < repeats; i++) {
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
 8001176:	e01f      	b.n	80011b8 <tone_freq+0x70>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001178:	2108      	movs	r1, #8
 800117a:	4815      	ldr	r0, [pc, #84]	; (80011d0 <tone_freq+0x88>)
 800117c:	f00f fd94 	bl	8010ca8 <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(POWER_ON_EXT_LED_GPIO_Port, POWER_ON_EXT_LED_Pin, SET);
 8001180:	2201      	movs	r2, #1
 8001182:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001186:	4813      	ldr	r0, [pc, #76]	; (80011d4 <tone_freq+0x8c>)
 8001188:	f00c f8ca 	bl	800d320 <HAL_GPIO_WritePin>
		HAL_Delay(duration);
 800118c:	68f8      	ldr	r0, [r7, #12]
 800118e:	f00b f9bb 	bl	800c508 <HAL_Delay>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8001192:	2108      	movs	r1, #8
 8001194:	480e      	ldr	r0, [pc, #56]	; (80011d0 <tone_freq+0x88>)
 8001196:	f00f fe4f 	bl	8010e38 <HAL_TIM_PWM_Stop>
		HAL_GPIO_WritePin(POWER_ON_EXT_LED_GPIO_Port, POWER_ON_EXT_LED_Pin, RESET);
 800119a:	2200      	movs	r2, #0
 800119c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011a0:	480c      	ldr	r0, [pc, #48]	; (80011d4 <tone_freq+0x8c>)
 80011a2:	f00c f8bd 	bl	800d320 <HAL_GPIO_WritePin>
		if (repeats > 1)
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d902      	bls.n	80011b2 <tone_freq+0x6a>
			HAL_Delay(duration);
 80011ac:	68f8      	ldr	r0, [r7, #12]
 80011ae:	f00b f9ab 	bl	800c508 <HAL_Delay>
	for (uint32_t i = 0; i < repeats; i++) {
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	3301      	adds	r3, #1
 80011b6:	617b      	str	r3, [r7, #20]
 80011b8:	697a      	ldr	r2, [r7, #20]
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d3db      	bcc.n	8001178 <tone_freq+0x30>
	}
	#endif
}
 80011c0:	bf00      	nop
 80011c2:	bf00      	nop
 80011c4:	3718      	adds	r7, #24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	000f4240 	.word	0x000f4240
 80011d0:	200088dc 	.word	0x200088dc
 80011d4:	40020400 	.word	0x40020400

080011d8 <buzz_success>:
void buzz_success(void) { tone_freq(BUZZ_SUCCESS_DURATION, BUZZ_SUCCESS_REPEATS, BUZZ_SUCCESS_FREQ); }
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
 80011dc:	f240 4216 	movw	r2, #1046	; 0x416
 80011e0:	2102      	movs	r1, #2
 80011e2:	204b      	movs	r0, #75	; 0x4b
 80011e4:	f7ff ffb0 	bl	8001148 <tone_freq>
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}

080011ec <buzz_startup_success>:
void buzz_failure(void) { tone_freq(BUZZ_FAILURE_DURATION, BUZZ_FAILURE_REPEATS, BUZZ_FAILURE_FREQ); }
void buzz_startup_success(void) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 80011f2:	2300      	movs	r3, #0
 80011f4:	71fb      	strb	r3, [r7, #7]
 80011f6:	e008      	b.n	800120a <buzz_startup_success+0x1e>
		buzz_success();
 80011f8:	f7ff ffee 	bl	80011d8 <buzz_success>
		HAL_Delay(1000);
 80011fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001200:	f00b f982 	bl	800c508 <HAL_Delay>
	for (uint8_t i = 0; i < 3; i++) {
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	3301      	adds	r3, #1
 8001208:	71fb      	strb	r3, [r7, #7]
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	2b02      	cmp	r3, #2
 800120e:	d9f3      	bls.n	80011f8 <buzz_startup_success+0xc>
	}
}
 8001210:	bf00      	nop
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
	...

0800121c <MRT_Init>:


//**************************************************//
//PUBLIC FUNCTIONS

void MRT_Init(void){
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
	print((char*) "\r\n\r\n/********MRT Init********/\r\n");
 8001220:	480d      	ldr	r0, [pc, #52]	; (8001258 <MRT_Init+0x3c>)
 8001222:	f7ff ff71 	bl	8001108 <print>

	MRT_Reinitialize_Peripherals();
 8001226:	f000 f8fb 	bl	8001420 <MRT_Reinitialize_Peripherals>

	//Memory
	MRT_MEMORY_Init();
 800122a:	f003 f86f 	bl	800430c <MRT_MEMORY_Init>
	MRT_reset_info();
 800122e:	f000 f829 	bl	8001284 <MRT_reset_info>

	//IWDG
	#if IWDG_ACTIVE
	print((char*) "IWDG Init...");
 8001232:	480a      	ldr	r0, [pc, #40]	; (800125c <MRT_Init+0x40>)
 8001234:	f7ff ff68 	bl	8001108 <print>
	MX_IWDG_Init();
 8001238:	f001 fbb0 	bl	800299c <MX_IWDG_Init>
	print((char*) "OK\r\n");
 800123c:	4808      	ldr	r0, [pc, #32]	; (8001260 <MRT_Init+0x44>)
 800123e:	f7ff ff63 	bl	8001108 <print>
	#endif

	//RTC
	HAL_IWDG_Refresh(&hiwdg);
 8001242:	4808      	ldr	r0, [pc, #32]	; (8001264 <MRT_Init+0x48>)
 8001244:	f00d f950 	bl	800e4e8 <HAL_IWDG_Refresh>
	MRT_rtc_Init();
 8001248:	f001 fd84 	bl	8002d54 <MRT_rtc_Init>
		  checkForI2CDevices(huart8,hi2c1);
		  checkForI2CDevices(huart8,hi2c2);
		  checkForI2CDevices(huart8,hi2c3);
		#endif

		MRT_i2c_sensors_Init();
 800124c:	f004 fc0c 	bl	8005a68 <MRT_i2c_sensors_Init>
	#endif


	//Telemetry
	#if TELEMETRY_THREAD
		MRT_TELEMETRY_Init();
 8001250:	f009 fe9a 	bl	800af88 <MRT_TELEMETRY_Init>
	#endif

	#if FORCED_EJECTION_STAGE
		   ejection_stage_flag = FORCED_STAGE;
	#endif
}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}
 8001258:	08020894 	.word	0x08020894
 800125c:	080208b8 	.word	0x080208b8
 8001260:	080208c8 	.word	0x080208c8
 8001264:	20008760 	.word	0x20008760

08001268 <MRT_Deinit>:




void MRT_Deinit(void){
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
	print((char*) "\r\n\r\n/********MRT Deinit********/\r\n");
 800126c:	4804      	ldr	r0, [pc, #16]	; (8001280 <MRT_Deinit+0x18>)
 800126e:	f7ff ff4b 	bl	8001108 <print>

	MRT_Reinitialize_Peripherals();
 8001272:	f000 f8d5 	bl	8001420 <MRT_Reinitialize_Peripherals>
	#endif


	//Sensors
	#if SENSORS_THREAD
		MRT_i2c_sensors_Deinit();
 8001276:	f004 fc33 	bl	8005ae0 <MRT_i2c_sensors_Deinit>
	#endif

    //TODO
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	080208d0 	.word	0x080208d0

08001284 <MRT_reset_info>:

//**************************************************//
//PRIVATE FUNCTIONS


void MRT_reset_info(void){
 8001284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001286:	b0a9      	sub	sp, #164	; 0xa4
 8001288:	af06      	add	r7, sp, #24

	  char buffer[100];
	  sprintf(buffer,"Reset: %i,  WU: %i,  IWDG: %i\r\nPrevious RTC time: %i:%i:%i ::%i\r\n",
 800128a:	4b4e      	ldr	r3, [pc, #312]	; (80013c4 <MRT_reset_info+0x140>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	461e      	mov	r6, r3
 8001290:	4b4d      	ldr	r3, [pc, #308]	; (80013c8 <MRT_reset_info+0x144>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	469c      	mov	ip, r3
 8001296:	4b4d      	ldr	r3, [pc, #308]	; (80013cc <MRT_reset_info+0x148>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	461a      	mov	r2, r3
 800129c:	4b4c      	ldr	r3, [pc, #304]	; (80013d0 <MRT_reset_info+0x14c>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	4619      	mov	r1, r3
 80012a2:	4b4c      	ldr	r3, [pc, #304]	; (80013d4 <MRT_reset_info+0x150>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	461c      	mov	r4, r3
 80012a8:	4b4b      	ldr	r3, [pc, #300]	; (80013d8 <MRT_reset_info+0x154>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	461d      	mov	r5, r3
 80012ae:	4b4b      	ldr	r3, [pc, #300]	; (80013dc <MRT_reset_info+0x158>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80012b6:	9304      	str	r3, [sp, #16]
 80012b8:	9503      	str	r5, [sp, #12]
 80012ba:	9402      	str	r4, [sp, #8]
 80012bc:	9101      	str	r1, [sp, #4]
 80012be:	9200      	str	r2, [sp, #0]
 80012c0:	4663      	mov	r3, ip
 80012c2:	4632      	mov	r2, r6
 80012c4:	4946      	ldr	r1, [pc, #280]	; (80013e0 <MRT_reset_info+0x15c>)
 80012c6:	f01a fed3 	bl	801c070 <siprintf>
			  reset_flag, wu_flag, iwdg_flag, prev_hour, prev_min, prev_sec, prev_subsec);
	  print(buffer);
 80012ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff ff1a 	bl	8001108 <print>

	  //Check if IWDG is being deactivated
	  if (iwdg_flag==1){
 80012d4:	4b3d      	ldr	r3, [pc, #244]	; (80013cc <MRT_reset_info+0x148>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d119      	bne.n	8001310 <MRT_reset_info+0x8c>
		  print((char*) "Deactivating IWDG\r\n");
 80012dc:	4841      	ldr	r0, [pc, #260]	; (80013e4 <MRT_reset_info+0x160>)
 80012de:	f7ff ff13 	bl	8001108 <print>

		  iwdg_flag = 0; //Flip flag
 80012e2:	4b3a      	ldr	r3, [pc, #232]	; (80013cc <MRT_reset_info+0x148>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	701a      	strb	r2, [r3, #0]

		  //Write new flag to memory
		  rtc_bckp_reg_iwdg = iwdg_flag;
 80012e8:	4b38      	ldr	r3, [pc, #224]	; (80013cc <MRT_reset_info+0x148>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	461a      	mov	r2, r3
 80012ee:	4b3e      	ldr	r3, [pc, #248]	; (80013e8 <MRT_reset_info+0x164>)
 80012f0:	601a      	str	r2, [r3, #0]
		  ext_flash_iwdg = iwdg_flag;
 80012f2:	4b36      	ldr	r3, [pc, #216]	; (80013cc <MRT_reset_info+0x148>)
 80012f4:	781a      	ldrb	r2, [r3, #0]
 80012f6:	4b3d      	ldr	r3, [pc, #244]	; (80013ec <MRT_reset_info+0x168>)
 80012f8:	701a      	strb	r2, [r3, #0]
		  MRT_saveFlagValue(FC_STATE_IWDG);
 80012fa:	2002      	movs	r0, #2
 80012fc:	f002 fe72 	bl	8003fe4 <MRT_saveFlagValue>

		  HAL_Delay(500);
 8001300:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001304:	f00b f900 	bl	800c508 <HAL_Delay>

		  //Go to sleep
		  MRT_StandByMode(SLEEP_TIME);
 8001308:	f648 40a0 	movw	r0, #36000	; 0x8ca0
 800130c:	f001 fdc8 	bl	8002ea0 <MRT_StandByMode>
	  }


	  //Check if we are after waking up (and at which wake up we are at)
	  if (wu_flag > 0){
 8001310:	4b2d      	ldr	r3, [pc, #180]	; (80013c8 <MRT_reset_info+0x144>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d00b      	beq.n	8001330 <MRT_reset_info+0xac>
		  char buf[30];
		  sprintf(buf, "FC wake up %i\r\n", wu_flag);
 8001318:	4b2b      	ldr	r3, [pc, #172]	; (80013c8 <MRT_reset_info+0x144>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	461a      	mov	r2, r3
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	4933      	ldr	r1, [pc, #204]	; (80013f0 <MRT_reset_info+0x16c>)
 8001322:	4618      	mov	r0, r3
 8001324:	f01a fea4 	bl	801c070 <siprintf>
		  print(buf);
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff feec 	bl	8001108 <print>
	  }


	  //Check if we start from the beginning
	  if (reset_flag == 0){
 8001330:	4b24      	ldr	r3, [pc, #144]	; (80013c4 <MRT_reset_info+0x140>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d108      	bne.n	800134a <MRT_reset_info+0xc6>
		  print((char*) "FC restarted\r\n");
 8001338:	482e      	ldr	r0, [pc, #184]	; (80013f4 <MRT_reset_info+0x170>)
 800133a:	f7ff fee5 	bl	8001108 <print>

		  reset_flag = 1; //Flip flag
 800133e:	4b21      	ldr	r3, [pc, #132]	; (80013c4 <MRT_reset_info+0x140>)
 8001340:	2201      	movs	r2, #1
 8001342:	701a      	strb	r2, [r3, #0]

		  MRT_saveFlagValue(FC_STATE_RESET);
 8001344:	2000      	movs	r0, #0
 8001346:	f002 fe4d 	bl	8003fe4 <MRT_saveFlagValue>
	  }


	  //Check if before or after apogee
	  if (apogee_flag == 0){
 800134a:	4b2b      	ldr	r3, [pc, #172]	; (80013f8 <MRT_reset_info+0x174>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d103      	bne.n	800135a <MRT_reset_info+0xd6>
		  print((char*) "Pre-apogee\r\n");
 8001352:	482a      	ldr	r0, [pc, #168]	; (80013fc <MRT_reset_info+0x178>)
 8001354:	f7ff fed8 	bl	8001108 <print>
 8001358:	e006      	b.n	8001368 <MRT_reset_info+0xe4>
	  }
	  else if(apogee_flag==1){
 800135a:	4b27      	ldr	r3, [pc, #156]	; (80013f8 <MRT_reset_info+0x174>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d102      	bne.n	8001368 <MRT_reset_info+0xe4>
		  print((char*) "Post-apogee\r\n");
 8001362:	4827      	ldr	r0, [pc, #156]	; (8001400 <MRT_reset_info+0x17c>)
 8001364:	f7ff fed0 	bl	8001108 <print>
	  }


	  //Check ejection stage
	  print((char*)"Ejection Stage: ");
 8001368:	4826      	ldr	r0, [pc, #152]	; (8001404 <MRT_reset_info+0x180>)
 800136a:	f7ff fecd 	bl	8001108 <print>
	  if (ejection_stage_flag==PAD){
 800136e:	4b26      	ldr	r3, [pc, #152]	; (8001408 <MRT_reset_info+0x184>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d103      	bne.n	800137e <MRT_reset_info+0xfa>
		  print((char*)"Pad\r\n");
 8001376:	4825      	ldr	r0, [pc, #148]	; (800140c <MRT_reset_info+0x188>)
 8001378:	f7ff fec6 	bl	8001108 <print>
		  print((char*)"Main descent\r\n");
	  }
	  else if(ejection_stage_flag==LANDED){
		  print((char*)"Landed\r\n");
	  }
}
 800137c:	e01e      	b.n	80013bc <MRT_reset_info+0x138>
	  else if(ejection_stage_flag==BOOST){
 800137e:	4b22      	ldr	r3, [pc, #136]	; (8001408 <MRT_reset_info+0x184>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d103      	bne.n	800138e <MRT_reset_info+0x10a>
		  print((char*)"Boost\r\n");
 8001386:	4822      	ldr	r0, [pc, #136]	; (8001410 <MRT_reset_info+0x18c>)
 8001388:	f7ff febe 	bl	8001108 <print>
}
 800138c:	e016      	b.n	80013bc <MRT_reset_info+0x138>
	  else if(ejection_stage_flag==DROGUE_DESCENT){
 800138e:	4b1e      	ldr	r3, [pc, #120]	; (8001408 <MRT_reset_info+0x184>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b02      	cmp	r3, #2
 8001394:	d103      	bne.n	800139e <MRT_reset_info+0x11a>
		  print((char*)"Drogue descent\r\n");
 8001396:	481f      	ldr	r0, [pc, #124]	; (8001414 <MRT_reset_info+0x190>)
 8001398:	f7ff feb6 	bl	8001108 <print>
}
 800139c:	e00e      	b.n	80013bc <MRT_reset_info+0x138>
	  else if(ejection_stage_flag==MAIN_DESCENT){
 800139e:	4b1a      	ldr	r3, [pc, #104]	; (8001408 <MRT_reset_info+0x184>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b03      	cmp	r3, #3
 80013a4:	d103      	bne.n	80013ae <MRT_reset_info+0x12a>
		  print((char*)"Main descent\r\n");
 80013a6:	481c      	ldr	r0, [pc, #112]	; (8001418 <MRT_reset_info+0x194>)
 80013a8:	f7ff feae 	bl	8001108 <print>
}
 80013ac:	e006      	b.n	80013bc <MRT_reset_info+0x138>
	  else if(ejection_stage_flag==LANDED){
 80013ae:	4b16      	ldr	r3, [pc, #88]	; (8001408 <MRT_reset_info+0x184>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b04      	cmp	r3, #4
 80013b4:	d102      	bne.n	80013bc <MRT_reset_info+0x138>
		  print((char*)"Landed\r\n");
 80013b6:	4819      	ldr	r0, [pc, #100]	; (800141c <MRT_reset_info+0x198>)
 80013b8:	f7ff fea6 	bl	8001108 <print>
}
 80013bc:	bf00      	nop
 80013be:	378c      	adds	r7, #140	; 0x8c
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013c4:	200003f8 	.word	0x200003f8
 80013c8:	200003f9 	.word	0x200003f9
 80013cc:	200003fa 	.word	0x200003fa
 80013d0:	200003fd 	.word	0x200003fd
 80013d4:	200003fe 	.word	0x200003fe
 80013d8:	200003ff 	.word	0x200003ff
 80013dc:	20000400 	.word	0x20000400
 80013e0:	080208f4 	.word	0x080208f4
 80013e4:	08020938 	.word	0x08020938
 80013e8:	200003a0 	.word	0x200003a0
 80013ec:	200003ea 	.word	0x200003ea
 80013f0:	0802094c 	.word	0x0802094c
 80013f4:	0802095c 	.word	0x0802095c
 80013f8:	200003fb 	.word	0x200003fb
 80013fc:	0802096c 	.word	0x0802096c
 8001400:	0802097c 	.word	0x0802097c
 8001404:	0802098c 	.word	0x0802098c
 8001408:	200003fc 	.word	0x200003fc
 800140c:	080209a0 	.word	0x080209a0
 8001410:	080209a8 	.word	0x080209a8
 8001414:	080209b0 	.word	0x080209b0
 8001418:	080209c4 	.word	0x080209c4
 800141c:	080209d4 	.word	0x080209d4

08001420 <MRT_Reinitialize_Peripherals>:


void MRT_Reinitialize_Peripherals(void){
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
	  /*
	   * Reinitialize all peripherals
	   */

	  print((char*)"Reinitializing Peripherals...");
 8001424:	482f      	ldr	r0, [pc, #188]	; (80014e4 <MRT_Reinitialize_Peripherals+0xc4>)
 8001426:	f7ff fe6f 	bl	8001108 <print>

	  // reset LEDs
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 800142a:	2200      	movs	r2, #0
 800142c:	2102      	movs	r1, #2
 800142e:	482e      	ldr	r0, [pc, #184]	; (80014e8 <MRT_Reinitialize_Peripherals+0xc8>)
 8001430:	f00b ff76 	bl	800d320 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 8001434:	2200      	movs	r2, #0
 8001436:	2104      	movs	r1, #4
 8001438:	482b      	ldr	r0, [pc, #172]	; (80014e8 <MRT_Reinitialize_Peripherals+0xc8>)
 800143a:	f00b ff71 	bl	800d320 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 800143e:	2200      	movs	r2, #0
 8001440:	2108      	movs	r1, #8
 8001442:	4829      	ldr	r0, [pc, #164]	; (80014e8 <MRT_Reinitialize_Peripherals+0xc8>)
 8001444:	f00b ff6c 	bl	800d320 <HAL_GPIO_WritePin>

	  // reset recovery pyro pins
	  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 8001448:	2201      	movs	r2, #1
 800144a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800144e:	4827      	ldr	r0, [pc, #156]	; (80014ec <MRT_Reinitialize_Peripherals+0xcc>)
 8001450:	f00b ff66 	bl	800d320 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, RESET); //PG12 DROGUE GATE
 8001454:	2200      	movs	r2, #0
 8001456:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800145a:	4824      	ldr	r0, [pc, #144]	; (80014ec <MRT_Reinitialize_Peripherals+0xcc>)
 800145c:	f00b ff60 	bl	800d320 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, RESET); //PG11 MAIN GATE
 8001460:	2200      	movs	r2, #0
 8001462:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001466:	4821      	ldr	r0, [pc, #132]	; (80014ec <MRT_Reinitialize_Peripherals+0xcc>)
 8001468:	f00b ff5a 	bl	800d320 <HAL_GPIO_WritePin>

	  // reset prop pyro pins
	  HAL_GPIO_WritePin(OUT_PyroValve_Arming_GPIO_Port, OUT_PyroValve_Arming_Pin, SET); //PG1 ARMING_PROP
 800146c:	2201      	movs	r2, #1
 800146e:	2102      	movs	r1, #2
 8001470:	481e      	ldr	r0, [pc, #120]	; (80014ec <MRT_Reinitialize_Peripherals+0xcc>)
 8001472:	f00b ff55 	bl	800d320 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_PyroValve_Gate_1_GPIO_Port, OUT_PyroValve_Gate_1_Pin, RESET); //PF15 PROP GATE 1
 8001476:	2200      	movs	r2, #0
 8001478:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800147c:	481c      	ldr	r0, [pc, #112]	; (80014f0 <MRT_Reinitialize_Peripherals+0xd0>)
 800147e:	f00b ff4f 	bl	800d320 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_PyroValve_Gate_2_GPIO_Port,OUT_PyroValve_Gate_2_Pin, RESET); //PF14 PROP GATE 2
 8001482:	2200      	movs	r2, #0
 8001484:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001488:	4819      	ldr	r0, [pc, #100]	; (80014f0 <MRT_Reinitialize_Peripherals+0xd0>)
 800148a:	f00b ff49 	bl	800d320 <HAL_GPIO_WritePin>

	  // reset 12 V buck converter enable pin (disable converter)
	  HAL_GPIO_WritePin(EN_12V_Buck_GPIO_Port, EN_12V_Buck_Pin, RESET); //PE2 Buck converter enable
 800148e:	2200      	movs	r2, #0
 8001490:	2104      	movs	r1, #4
 8001492:	4818      	ldr	r0, [pc, #96]	; (80014f4 <MRT_Reinitialize_Peripherals+0xd4>)
 8001494:	f00b ff44 	bl	800d320 <HAL_GPIO_WritePin>
	  //HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET); //This was in the previous code
	  //HAL_GPIO_WritePin(OUT_Prop_ActuatedVent_Gate_GPIO_Port, OUT_Prop_ActuatedVent_Gate_Pin, RESET); //PE7 (MAY NOT BE THE RIGHT ONE)


	  // reset payload EN signal
	  HAL_GPIO_WritePin(PAYLOAD_I2C_EN_GPIO_Port, PAYLOAD_I2C_EN_Pin, RESET); //PE9 Payload I2C enable
 8001498:	2200      	movs	r2, #0
 800149a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800149e:	4815      	ldr	r0, [pc, #84]	; (80014f4 <MRT_Reinitialize_Peripherals+0xd4>)
 80014a0:	f00b ff3e 	bl	800d320 <HAL_GPIO_WritePin>

	  // set CS pin for thermocouple chip high
	  //	HAL_GPIO_WritePin(TH_CS_1_GPIO_Port, TH_CS_1_Pin, SET);

	  // set power off for VR
	  HAL_GPIO_WritePin(OUT_VR_PWR_GPIO_Port, OUT_VR_PWR_Pin, RESET); //PG9
 80014a4:	2200      	movs	r2, #0
 80014a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014aa:	4810      	ldr	r0, [pc, #64]	; (80014ec <MRT_Reinitialize_Peripherals+0xcc>)
 80014ac:	f00b ff38 	bl	800d320 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_VR_REC_GPIO_Port, OUT_VR_REC_Pin, RESET); //PD7
 80014b0:	2200      	movs	r2, #0
 80014b2:	2180      	movs	r1, #128	; 0x80
 80014b4:	4810      	ldr	r0, [pc, #64]	; (80014f8 <MRT_Reinitialize_Peripherals+0xd8>)
 80014b6:	f00b ff33 	bl	800d320 <HAL_GPIO_WritePin>

	  // FLASH set CS, WP and IO3 pins high
	  HAL_GPIO_WritePin(OUT_FLASH_CS_GPIO_Port, OUT_FLASH_CS_Pin, SET);
 80014ba:	2201      	movs	r2, #1
 80014bc:	2140      	movs	r1, #64	; 0x40
 80014be:	480e      	ldr	r0, [pc, #56]	; (80014f8 <MRT_Reinitialize_Peripherals+0xd8>)
 80014c0:	f00b ff2e 	bl	800d320 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_FLASH_WP_GPIO_Port, OUT_FLASH_WP_Pin, SET);
 80014c4:	2201      	movs	r2, #1
 80014c6:	2120      	movs	r1, #32
 80014c8:	480b      	ldr	r0, [pc, #44]	; (80014f8 <MRT_Reinitialize_Peripherals+0xd8>)
 80014ca:	f00b ff29 	bl	800d320 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_FLASH_IO3_GPIO_Port, OUT_FLASH_IO3_Pin, SET);
 80014ce:	2201      	movs	r2, #1
 80014d0:	2110      	movs	r1, #16
 80014d2:	4809      	ldr	r0, [pc, #36]	; (80014f8 <MRT_Reinitialize_Peripherals+0xd8>)
 80014d4:	f00b ff24 	bl	800d320 <HAL_GPIO_WritePin>

	  print((char*)"OK\r\n");
 80014d8:	4808      	ldr	r0, [pc, #32]	; (80014fc <MRT_Reinitialize_Peripherals+0xdc>)
 80014da:	f7ff fe15 	bl	8001108 <print>
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	080209e0 	.word	0x080209e0
 80014e8:	40020800 	.word	0x40020800
 80014ec:	40021800 	.word	0x40021800
 80014f0:	40021400 	.word	0x40021400
 80014f4:	40021000 	.word	0x40021000
 80014f8:	40020c00 	.word	0x40020c00
 80014fc:	080208c8 	.word	0x080208c8

08001500 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001506:	463b      	mov	r3, r7
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001512:	4b21      	ldr	r3, [pc, #132]	; (8001598 <MX_ADC1_Init+0x98>)
 8001514:	4a21      	ldr	r2, [pc, #132]	; (800159c <MX_ADC1_Init+0x9c>)
 8001516:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001518:	4b1f      	ldr	r3, [pc, #124]	; (8001598 <MX_ADC1_Init+0x98>)
 800151a:	2200      	movs	r2, #0
 800151c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800151e:	4b1e      	ldr	r3, [pc, #120]	; (8001598 <MX_ADC1_Init+0x98>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001524:	4b1c      	ldr	r3, [pc, #112]	; (8001598 <MX_ADC1_Init+0x98>)
 8001526:	2200      	movs	r2, #0
 8001528:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800152a:	4b1b      	ldr	r3, [pc, #108]	; (8001598 <MX_ADC1_Init+0x98>)
 800152c:	2200      	movs	r2, #0
 800152e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001530:	4b19      	ldr	r3, [pc, #100]	; (8001598 <MX_ADC1_Init+0x98>)
 8001532:	2200      	movs	r2, #0
 8001534:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001538:	4b17      	ldr	r3, [pc, #92]	; (8001598 <MX_ADC1_Init+0x98>)
 800153a:	2200      	movs	r2, #0
 800153c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800153e:	4b16      	ldr	r3, [pc, #88]	; (8001598 <MX_ADC1_Init+0x98>)
 8001540:	4a17      	ldr	r2, [pc, #92]	; (80015a0 <MX_ADC1_Init+0xa0>)
 8001542:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001544:	4b14      	ldr	r3, [pc, #80]	; (8001598 <MX_ADC1_Init+0x98>)
 8001546:	2200      	movs	r2, #0
 8001548:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800154a:	4b13      	ldr	r3, [pc, #76]	; (8001598 <MX_ADC1_Init+0x98>)
 800154c:	2201      	movs	r2, #1
 800154e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001550:	4b11      	ldr	r3, [pc, #68]	; (8001598 <MX_ADC1_Init+0x98>)
 8001552:	2200      	movs	r2, #0
 8001554:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001558:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <MX_ADC1_Init+0x98>)
 800155a:	2201      	movs	r2, #1
 800155c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800155e:	480e      	ldr	r0, [pc, #56]	; (8001598 <MX_ADC1_Init+0x98>)
 8001560:	f00a fff6 	bl	800c550 <HAL_ADC_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800156a:	f001 fb05 	bl	8002b78 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800156e:	2306      	movs	r3, #6
 8001570:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001572:	2301      	movs	r3, #1
 8001574:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001576:	2300      	movs	r3, #0
 8001578:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800157a:	463b      	mov	r3, r7
 800157c:	4619      	mov	r1, r3
 800157e:	4806      	ldr	r0, [pc, #24]	; (8001598 <MX_ADC1_Init+0x98>)
 8001580:	f00b f9c8 	bl	800c914 <HAL_ADC_ConfigChannel>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800158a:	f001 faf5 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800158e:	bf00      	nop
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20008644 	.word	0x20008644
 800159c:	40012000 	.word	0x40012000
 80015a0:	0f000001 	.word	0x0f000001

080015a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08a      	sub	sp, #40	; 0x28
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a17      	ldr	r2, [pc, #92]	; (8001620 <HAL_ADC_MspInit+0x7c>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d127      	bne.n	8001616 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
 80015ca:	4b16      	ldr	r3, [pc, #88]	; (8001624 <HAL_ADC_MspInit+0x80>)
 80015cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ce:	4a15      	ldr	r2, [pc, #84]	; (8001624 <HAL_ADC_MspInit+0x80>)
 80015d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d4:	6453      	str	r3, [r2, #68]	; 0x44
 80015d6:	4b13      	ldr	r3, [pc, #76]	; (8001624 <HAL_ADC_MspInit+0x80>)
 80015d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <HAL_ADC_MspInit+0x80>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a0e      	ldr	r2, [pc, #56]	; (8001624 <HAL_ADC_MspInit+0x80>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <HAL_ADC_MspInit+0x80>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 80015fe:	2340      	movs	r3, #64	; 0x40
 8001600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001602:	2303      	movs	r3, #3
 8001604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 800160a:	f107 0314 	add.w	r3, r7, #20
 800160e:	4619      	mov	r1, r3
 8001610:	4805      	ldr	r0, [pc, #20]	; (8001628 <HAL_ADC_MspInit+0x84>)
 8001612:	f00b fcc1 	bl	800cf98 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001616:	bf00      	nop
 8001618:	3728      	adds	r7, #40	; 0x28
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40012000 	.word	0x40012000
 8001624:	40023800 	.word	0x40023800
 8001628:	40020000 	.word	0x40020000

0800162c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001630:	f3bf 8f4f 	dsb	sy
}
 8001634:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001636:	4b06      	ldr	r3, [pc, #24]	; (8001650 <__NVIC_SystemReset+0x24>)
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800163e:	4904      	ldr	r1, [pc, #16]	; (8001650 <__NVIC_SystemReset+0x24>)
 8001640:	4b04      	ldr	r3, [pc, #16]	; (8001654 <__NVIC_SystemReset+0x28>)
 8001642:	4313      	orrs	r3, r2
 8001644:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001646:	f3bf 8f4f 	dsb	sy
}
 800164a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800164c:	bf00      	nop
 800164e:	e7fd      	b.n	800164c <__NVIC_SystemReset+0x20>
 8001650:	e000ed00 	.word	0xe000ed00
 8001654:	05fa0004 	.word	0x05fa0004

08001658 <vApplicationDaemonTaskStartupHook>:
/* Hook prototypes */
void vApplicationDaemonTaskStartupHook(void);

/* USER CODE BEGIN DAEMON_TASK_STARTUP_HOOK */
void vApplicationDaemonTaskStartupHook(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
	MRT_Init();
 800165c:	f7ff fdde 	bl	800121c <MRT_Init>

	println("\r\n\r\n/****Starting FC****/\r\n\r\n");
 8001660:	4820      	ldr	r0, [pc, #128]	; (80016e4 <vApplicationDaemonTaskStartupHook+0x8c>)
 8001662:	f7ff fd33 	bl	80010cc <println>
	HAL_IWDG_Refresh(&hiwdg);
 8001666:	4820      	ldr	r0, [pc, #128]	; (80016e8 <vApplicationDaemonTaskStartupHook+0x90>)
 8001668:	f00c ff3e 	bl	800e4e8 <HAL_IWDG_Refresh>
	buzz_startup_success();
 800166c:	f7ff fdbe 	bl	80011ec <buzz_startup_success>

	MRT_waitForLaunch();
 8001670:	f000 fd3c 	bl	80020ec <MRT_waitForLaunch>

	print("\tCreating the threads...");
 8001674:	481d      	ldr	r0, [pc, #116]	; (80016ec <vApplicationDaemonTaskStartupHook+0x94>)
 8001676:	f7ff fd47 	bl	8001108 <print>

	/* Create the thread(s) */
	/* creation of Memory0 */
	Memory0Handle = osThreadNew(StartMemory0, NULL, &Memory0_attributes);
 800167a:	4a1d      	ldr	r2, [pc, #116]	; (80016f0 <vApplicationDaemonTaskStartupHook+0x98>)
 800167c:	2100      	movs	r1, #0
 800167e:	481d      	ldr	r0, [pc, #116]	; (80016f4 <vApplicationDaemonTaskStartupHook+0x9c>)
 8001680:	f014 fae4 	bl	8015c4c <osThreadNew>
 8001684:	4603      	mov	r3, r0
 8001686:	4a1c      	ldr	r2, [pc, #112]	; (80016f8 <vApplicationDaemonTaskStartupHook+0xa0>)
 8001688:	6013      	str	r3, [r2, #0]

	/* creation of Ejection1 */
	Ejection1Handle = osThreadNew(StartEjection1, NULL, &Ejection1_attributes);
 800168a:	4a1c      	ldr	r2, [pc, #112]	; (80016fc <vApplicationDaemonTaskStartupHook+0xa4>)
 800168c:	2100      	movs	r1, #0
 800168e:	481c      	ldr	r0, [pc, #112]	; (8001700 <vApplicationDaemonTaskStartupHook+0xa8>)
 8001690:	f014 fadc 	bl	8015c4c <osThreadNew>
 8001694:	4603      	mov	r3, r0
 8001696:	4a1b      	ldr	r2, [pc, #108]	; (8001704 <vApplicationDaemonTaskStartupHook+0xac>)
 8001698:	6013      	str	r3, [r2, #0]

	/* creation of Telemetry2 */
	Telemetry2Handle = osThreadNew(StartTelemetry2, NULL, &Telemetry2_attributes);
 800169a:	4a1b      	ldr	r2, [pc, #108]	; (8001708 <vApplicationDaemonTaskStartupHook+0xb0>)
 800169c:	2100      	movs	r1, #0
 800169e:	481b      	ldr	r0, [pc, #108]	; (800170c <vApplicationDaemonTaskStartupHook+0xb4>)
 80016a0:	f014 fad4 	bl	8015c4c <osThreadNew>
 80016a4:	4603      	mov	r3, r0
 80016a6:	4a1a      	ldr	r2, [pc, #104]	; (8001710 <vApplicationDaemonTaskStartupHook+0xb8>)
 80016a8:	6013      	str	r3, [r2, #0]

	/* creation of Sensors3 */
	Sensors3Handle = osThreadNew(StartSensors3, NULL, &Sensors3_attributes);
 80016aa:	4a1a      	ldr	r2, [pc, #104]	; (8001714 <vApplicationDaemonTaskStartupHook+0xbc>)
 80016ac:	2100      	movs	r1, #0
 80016ae:	481a      	ldr	r0, [pc, #104]	; (8001718 <vApplicationDaemonTaskStartupHook+0xc0>)
 80016b0:	f014 facc 	bl	8015c4c <osThreadNew>
 80016b4:	4603      	mov	r3, r0
 80016b6:	4a19      	ldr	r2, [pc, #100]	; (800171c <vApplicationDaemonTaskStartupHook+0xc4>)
 80016b8:	6013      	str	r3, [r2, #0]

	/* creation of WatchDog */
	WatchDogHandle = osThreadNew(StartWatchDog, NULL, &WatchDog_attributes);
 80016ba:	4a19      	ldr	r2, [pc, #100]	; (8001720 <vApplicationDaemonTaskStartupHook+0xc8>)
 80016bc:	2100      	movs	r1, #0
 80016be:	4819      	ldr	r0, [pc, #100]	; (8001724 <vApplicationDaemonTaskStartupHook+0xcc>)
 80016c0:	f014 fac4 	bl	8015c4c <osThreadNew>
 80016c4:	4603      	mov	r3, r0
 80016c6:	4a18      	ldr	r2, [pc, #96]	; (8001728 <vApplicationDaemonTaskStartupHook+0xd0>)
 80016c8:	6013      	str	r3, [r2, #0]

	/* creation of Propulsion4 */
	Propulsion4Handle = osThreadNew(StartPropulsion4, NULL, &Propulsion4_attributes);
 80016ca:	4a18      	ldr	r2, [pc, #96]	; (800172c <vApplicationDaemonTaskStartupHook+0xd4>)
 80016cc:	2100      	movs	r1, #0
 80016ce:	4818      	ldr	r0, [pc, #96]	; (8001730 <vApplicationDaemonTaskStartupHook+0xd8>)
 80016d0:	f014 fabc 	bl	8015c4c <osThreadNew>
 80016d4:	4603      	mov	r3, r0
 80016d6:	4a17      	ldr	r2, [pc, #92]	; (8001734 <vApplicationDaemonTaskStartupHook+0xdc>)
 80016d8:	6013      	str	r3, [r2, #0]

	println("OK");
 80016da:	4817      	ldr	r0, [pc, #92]	; (8001738 <vApplicationDaemonTaskStartupHook+0xe0>)
 80016dc:	f7ff fcf6 	bl	80010cc <println>
}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	08020a44 	.word	0x08020a44
 80016e8:	20008760 	.word	0x20008760
 80016ec:	08020a64 	.word	0x08020a64
 80016f0:	080228d8 	.word	0x080228d8
 80016f4:	08001769 	.word	0x08001769
 80016f8:	20008690 	.word	0x20008690
 80016fc:	080228fc 	.word	0x080228fc
 8001700:	0800185d 	.word	0x0800185d
 8001704:	200086a8 	.word	0x200086a8
 8001708:	08022920 	.word	0x08022920
 800170c:	08001d11 	.word	0x08001d11
 8001710:	200086ac 	.word	0x200086ac
 8001714:	08022944 	.word	0x08022944
 8001718:	08001e19 	.word	0x08001e19
 800171c:	200086b0 	.word	0x200086b0
 8001720:	08022968 	.word	0x08022968
 8001724:	08001e91 	.word	0x08001e91
 8001728:	2000868c 	.word	0x2000868c
 800172c:	0802298c 	.word	0x0802298c
 8001730:	080020a1 	.word	0x080020a1
 8001734:	200086b4 	.word	0x200086b4
 8001738:	08020a80 	.word	0x08020a80

0800173c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

	println("\r\nFREERTOS Init");
 8001740:	4806      	ldr	r0, [pc, #24]	; (800175c <MX_FREERTOS_Init+0x20>)
 8001742:	f7ff fcc3 	bl	80010cc <println>
	print("\tInitializing the kernel...");
 8001746:	4806      	ldr	r0, [pc, #24]	; (8001760 <MX_FREERTOS_Init+0x24>)
 8001748:	f7ff fcde 	bl	8001108 <print>
	osKernelInitialize();
 800174c:	f014 fa34 	bl	8015bb8 <osKernelInitialize>
	println("OK");
 8001750:	4804      	ldr	r0, [pc, #16]	; (8001764 <MX_FREERTOS_Init+0x28>)
 8001752:	f7ff fcbb 	bl	80010cc <println>
  /* USER CODE END RTOS_THREADS */
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	08020a84 	.word	0x08020a84
 8001760:	08020a94 	.word	0x08020a94
 8001764:	08020a80 	.word	0x08020a80

08001768 <StartMemory0>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMemory0 */
void StartMemory0(void *argument)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMemory0 */

	//Add thread id to the list
	threadsID[0]=osThreadGetId();
 8001770:	f014 faff 	bl	8015d72 <osThreadGetId>
 8001774:	4603      	mov	r3, r0
 8001776:	4a2b      	ldr	r2, [pc, #172]	; (8001824 <StartMemory0+0xbc>)
 8001778:	6013      	str	r3, [r2, #0]

	#if !MEMORY_THREAD
    osThreadExit();
	#endif

    uint8_t reset_counter = 0;
 800177a:	2300      	movs	r3, #0
 800177c:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {

	 //Get RTC time
	 HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800177e:	2200      	movs	r2, #0
 8001780:	4929      	ldr	r1, [pc, #164]	; (8001828 <StartMemory0+0xc0>)
 8001782:	482a      	ldr	r0, [pc, #168]	; (800182c <StartMemory0+0xc4>)
 8001784:	f00d fefe 	bl	800f584 <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001788:	2200      	movs	r2, #0
 800178a:	4929      	ldr	r1, [pc, #164]	; (8001830 <StartMemory0+0xc8>)
 800178c:	4827      	ldr	r0, [pc, #156]	; (800182c <StartMemory0+0xc4>)
 800178e:	f00d fffe 	bl	800f78e <HAL_RTC_GetDate>

	 //Update global variables
	 prev_hour = sTime.Hours;
 8001792:	4b25      	ldr	r3, [pc, #148]	; (8001828 <StartMemory0+0xc0>)
 8001794:	781a      	ldrb	r2, [r3, #0]
 8001796:	4b27      	ldr	r3, [pc, #156]	; (8001834 <StartMemory0+0xcc>)
 8001798:	701a      	strb	r2, [r3, #0]
	 prev_min = sTime.Minutes;
 800179a:	4b23      	ldr	r3, [pc, #140]	; (8001828 <StartMemory0+0xc0>)
 800179c:	785a      	ldrb	r2, [r3, #1]
 800179e:	4b26      	ldr	r3, [pc, #152]	; (8001838 <StartMemory0+0xd0>)
 80017a0:	701a      	strb	r2, [r3, #0]
	 prev_sec = sTime.Seconds;
 80017a2:	4b21      	ldr	r3, [pc, #132]	; (8001828 <StartMemory0+0xc0>)
 80017a4:	789a      	ldrb	r2, [r3, #2]
 80017a6:	4b25      	ldr	r3, [pc, #148]	; (800183c <StartMemory0+0xd4>)
 80017a8:	701a      	strb	r2, [r3, #0]
	 if (__HAL_RTC_SHIFT_GET_FLAG(&hrtc, RTC_FLAG_SHPF)) prev_sec++; //Adjust following the user manual
 80017aa:	4b20      	ldr	r3, [pc, #128]	; (800182c <StartMemory0+0xc4>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	f003 0308 	and.w	r3, r3, #8
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d005      	beq.n	80017c4 <StartMemory0+0x5c>
 80017b8:	4b20      	ldr	r3, [pc, #128]	; (800183c <StartMemory0+0xd4>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	3301      	adds	r3, #1
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	4b1e      	ldr	r3, [pc, #120]	; (800183c <StartMemory0+0xd4>)
 80017c2:	701a      	strb	r2, [r3, #0]
	 prev_subsec = sTime.SubSeconds;
 80017c4:	4b18      	ldr	r3, [pc, #96]	; (8001828 <StartMemory0+0xc0>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	4a1d      	ldr	r2, [pc, #116]	; (8001840 <StartMemory0+0xd8>)
 80017ca:	6013      	str	r3, [r2, #0]

	// Save to SD card
	#if SD_CARD_
	reset_counter++;
 80017cc:	7bfb      	ldrb	r3, [r7, #15]
 80017ce:	3301      	adds	r3, #1
 80017d0:	73fb      	strb	r3, [r7, #15]
	MRT_formatAvionics();
 80017d2:	f002 fab7 	bl	8003d44 <MRT_formatAvionics>
	fres = sd_open_file(filename);
 80017d6:	481b      	ldr	r0, [pc, #108]	; (8001844 <StartMemory0+0xdc>)
 80017d8:	f002 ff5c 	bl	8004694 <sd_open_file>
 80017dc:	4603      	mov	r3, r0
 80017de:	461a      	mov	r2, r3
 80017e0:	4b19      	ldr	r3, [pc, #100]	; (8001848 <StartMemory0+0xe0>)
 80017e2:	701a      	strb	r2, [r3, #0]
	if (sd_write(&fil,(uint8_t*) msg_buffer_av) >= 0){
 80017e4:	4919      	ldr	r1, [pc, #100]	; (800184c <StartMemory0+0xe4>)
 80017e6:	481a      	ldr	r0, [pc, #104]	; (8001850 <StartMemory0+0xe8>)
 80017e8:	f002 ff6c 	bl	80046c4 <sd_write>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	db01      	blt.n	80017f6 <StartMemory0+0x8e>
		reset_counter=0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	73fb      	strb	r3, [r7, #15]
	}

	if (ejection_stage_flag < MAIN_DESCENT){
 80017f6:	4b17      	ldr	r3, [pc, #92]	; (8001854 <StartMemory0+0xec>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d805      	bhi.n	800180a <StartMemory0+0xa2>
		MRT_formatPropulsion();
 80017fe:	f003 ff45 	bl	800568c <MRT_formatPropulsion>
		sd_write(&fil,(uint8_t*) msg_buffer_pr);
 8001802:	4915      	ldr	r1, [pc, #84]	; (8001858 <StartMemory0+0xf0>)
 8001804:	4812      	ldr	r0, [pc, #72]	; (8001850 <StartMemory0+0xe8>)
 8001806:	f002 ff5d 	bl	80046c4 <sd_write>
	}
	f_close(&fil);
 800180a:	4811      	ldr	r0, [pc, #68]	; (8001850 <StartMemory0+0xe8>)
 800180c:	f013 fd84 	bl	8015318 <f_close>

	if (reset_counter>=30) NVIC_SystemReset(); //Reset system if we haven't been able to write for some time
 8001810:	7bfb      	ldrb	r3, [r7, #15]
 8001812:	2b1d      	cmp	r3, #29
 8001814:	d901      	bls.n	800181a <StartMemory0+0xb2>
 8001816:	f7ff ff09 	bl	800162c <__NVIC_SystemReset>
	#endif

	osDelay(1000/DATA_FREQ);
 800181a:	2064      	movs	r0, #100	; 0x64
 800181c:	f014 fb44 	bl	8015ea8 <osDelay>
	 HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001820:	e7ad      	b.n	800177e <StartMemory0+0x16>
 8001822:	bf00      	nop
 8001824:	20008694 	.word	0x20008694
 8001828:	20000358 	.word	0x20000358
 800182c:	2000876c 	.word	0x2000876c
 8001830:	2000036c 	.word	0x2000036c
 8001834:	200003fd 	.word	0x200003fd
 8001838:	200003fe 	.word	0x200003fe
 800183c:	200003ff 	.word	0x200003ff
 8001840:	20000400 	.word	0x20000400
 8001844:	200090e8 	.word	0x200090e8
 8001848:	200094e0 	.word	0x200094e0
 800184c:	200089f0 	.word	0x200089f0
 8001850:	200094e4 	.word	0x200094e4
 8001854:	200003fc 	.word	0x200003fc
 8001858:	20009740 	.word	0x20009740

0800185c <StartEjection1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEjection1 */
void StartEjection1(void *argument)
{
 800185c:	b5b0      	push	{r4, r5, r7, lr}
 800185e:	b096      	sub	sp, #88	; 0x58
 8001860:	af04      	add	r7, sp, #16
 8001862:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEjection1 */

	//Add thread id to the list
	threadsID[1]=osThreadGetId();
 8001864:	f014 fa85 	bl	8015d72 <osThreadGetId>
 8001868:	4603      	mov	r3, r0
 800186a:	4ac6      	ldr	r2, [pc, #792]	; (8001b84 <StartEjection1+0x328>)
 800186c:	6053      	str	r3, [r2, #4]
	#if !EJECTION_THREAD
	osThreadExit();
	#endif

	//Double check the state TODO bad? (say wakeup flag is raised but ground isn't reached yet
	if (ejection_stage_flag >= LANDED)  osThreadExit(); //Ground reached
 800186e:	4bc6      	ldr	r3, [pc, #792]	; (8001b88 <StartEjection1+0x32c>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	2b03      	cmp	r3, #3
 8001874:	d901      	bls.n	800187a <StartEjection1+0x1e>
 8001876:	f014 fae4 	bl	8015e42 <osThreadExit>

	osDelay(5000); //Let the LPS "warm up" to have a valid pressure_hPa
 800187a:	f241 3088 	movw	r0, #5000	; 0x1388
 800187e:	f014 fb13 	bl	8015ea8 <osDelay>

	//TODO put in setup.h?
	uint8_t counter = 0;
 8001882:	2300      	movs	r3, #0
 8001884:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint8_t COUNTER_THRESHOLD = 500;
 8001888:	23f4      	movs	r3, #244	; 0xf4
 800188a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t ALT_ERROR_MARGIN = 10; //In meters
 800188e:	230a      	movs	r3, #10
 8001890:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	uint8_t prev_alt = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

  /* Infinite loop */
  for(;;)
  {
	  altitude_m = MRT_getAltitude(hlps22hh.pressure_hPa);
 800189a:	4bbc      	ldr	r3, [pc, #752]	; (8001b8c <StartEjection1+0x330>)
 800189c:	edd3 7a00 	vldr	s15, [r3]
 80018a0:	eeb0 0a67 	vmov.f32	s0, s15
 80018a4:	f002 f9cc 	bl	8003c40 <MRT_getAltitude>
 80018a8:	eef0 7a40 	vmov.f32	s15, s0
 80018ac:	4bb8      	ldr	r3, [pc, #736]	; (8001b90 <StartEjection1+0x334>)
 80018ae:	edc3 7a00 	vstr	s15, [r3]

	  //TODO UPDATE TRUE APOGEE (TESTING?)
	  if (altitude_m > rtc_bckp_reg_alt_true_apogee){
 80018b2:	4bb8      	ldr	r3, [pc, #736]	; (8001b94 <StartEjection1+0x338>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	ee07 3a90 	vmov	s15, r3
 80018ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018be:	4bb4      	ldr	r3, [pc, #720]	; (8001b90 <StartEjection1+0x334>)
 80018c0:	edd3 7a00 	vldr	s15, [r3]
 80018c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018cc:	d514      	bpl.n	80018f8 <StartEjection1+0x9c>
		  rtc_bckp_reg_alt_true_apogee = altitude_m;
 80018ce:	4bb0      	ldr	r3, [pc, #704]	; (8001b90 <StartEjection1+0x334>)
 80018d0:	edd3 7a00 	vldr	s15, [r3]
 80018d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018d8:	ee17 2a90 	vmov	r2, s15
 80018dc:	4bad      	ldr	r3, [pc, #692]	; (8001b94 <StartEjection1+0x338>)
 80018de:	601a      	str	r2, [r3, #0]
		  rtc_bckp_reg_true_apogee_time = 100*prev_min + prev_sec;
 80018e0:	4bad      	ldr	r3, [pc, #692]	; (8001b98 <StartEjection1+0x33c>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	461a      	mov	r2, r3
 80018e6:	2364      	movs	r3, #100	; 0x64
 80018e8:	fb03 f302 	mul.w	r3, r3, r2
 80018ec:	4aab      	ldr	r2, [pc, #684]	; (8001b9c <StartEjection1+0x340>)
 80018ee:	7812      	ldrb	r2, [r2, #0]
 80018f0:	4413      	add	r3, r2
 80018f2:	461a      	mov	r2, r3
 80018f4:	4baa      	ldr	r3, [pc, #680]	; (8001ba0 <StartEjection1+0x344>)
 80018f6:	601a      	str	r2, [r3, #0]
	  }

	  //TODO check for apogee (starting to go down or stagnating, add to counter)
	  if(altitude_m < prev_alt || MAX(altitude_m - prev_alt, prev_alt - altitude_m) < ALT_ERROR_MARGIN){
 80018f8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80018fc:	ee07 3a90 	vmov	s15, r3
 8001900:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001904:	4ba2      	ldr	r3, [pc, #648]	; (8001b90 <StartEjection1+0x334>)
 8001906:	edd3 7a00 	vldr	s15, [r3]
 800190a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800190e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001912:	dc3c      	bgt.n	800198e <StartEjection1+0x132>
 8001914:	4b9e      	ldr	r3, [pc, #632]	; (8001b90 <StartEjection1+0x334>)
 8001916:	ed93 7a00 	vldr	s14, [r3]
 800191a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800191e:	ee07 3a90 	vmov	s15, r3
 8001922:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001926:	ee37 7a67 	vsub.f32	s14, s14, s15
 800192a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800192e:	ee07 3a90 	vmov	s15, r3
 8001932:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001936:	4b96      	ldr	r3, [pc, #600]	; (8001b90 <StartEjection1+0x334>)
 8001938:	edd3 7a00 	vldr	s15, [r3]
 800193c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001940:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001948:	dd0b      	ble.n	8001962 <StartEjection1+0x106>
 800194a:	4b91      	ldr	r3, [pc, #580]	; (8001b90 <StartEjection1+0x334>)
 800194c:	ed93 7a00 	vldr	s14, [r3]
 8001950:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001954:	ee07 3a90 	vmov	s15, r3
 8001958:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800195c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001960:	e00a      	b.n	8001978 <StartEjection1+0x11c>
 8001962:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001966:	ee07 3a90 	vmov	s15, r3
 800196a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800196e:	4b88      	ldr	r3, [pc, #544]	; (8001b90 <StartEjection1+0x334>)
 8001970:	edd3 7a00 	vldr	s15, [r3]
 8001974:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001978:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800197c:	ee07 3a10 	vmov	s14, r3
 8001980:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001984:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800198c:	d54f      	bpl.n	8001a2e <StartEjection1+0x1d2>
		  counter++;
 800198e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001992:	3301      	adds	r3, #1
 8001994:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		  char buff[50];
		  sprintf(buff, "Alt: %i,  MAX:%i, counter: %i", altitude_m, MAX(altitude_m - prev_alt, prev_alt - altitude_m), counter);
 8001998:	4b7d      	ldr	r3, [pc, #500]	; (8001b90 <StartEjection1+0x334>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f7fe fdf3 	bl	8000588 <__aeabi_f2d>
 80019a2:	4604      	mov	r4, r0
 80019a4:	460d      	mov	r5, r1
 80019a6:	4b7a      	ldr	r3, [pc, #488]	; (8001b90 <StartEjection1+0x334>)
 80019a8:	ed93 7a00 	vldr	s14, [r3]
 80019ac:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80019b0:	ee07 3a90 	vmov	s15, r3
 80019b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019bc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80019c0:	ee07 3a90 	vmov	s15, r3
 80019c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80019c8:	4b71      	ldr	r3, [pc, #452]	; (8001b90 <StartEjection1+0x334>)
 80019ca:	edd3 7a00 	vldr	s15, [r3]
 80019ce:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80019d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019da:	dd0b      	ble.n	80019f4 <StartEjection1+0x198>
 80019dc:	4b6c      	ldr	r3, [pc, #432]	; (8001b90 <StartEjection1+0x334>)
 80019de:	ed93 7a00 	vldr	s14, [r3]
 80019e2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80019e6:	ee07 3a90 	vmov	s15, r3
 80019ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019f2:	e00a      	b.n	8001a0a <StartEjection1+0x1ae>
 80019f4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80019f8:	ee07 3a90 	vmov	s15, r3
 80019fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a00:	4b63      	ldr	r3, [pc, #396]	; (8001b90 <StartEjection1+0x334>)
 8001a02:	edd3 7a00 	vldr	s15, [r3]
 8001a06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a0a:	ee17 0a90 	vmov	r0, s15
 8001a0e:	f7fe fdbb 	bl	8000588 <__aeabi_f2d>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8001a1a:	f107 000c 	add.w	r0, r7, #12
 8001a1e:	9102      	str	r1, [sp, #8]
 8001a20:	e9cd 2300 	strd	r2, r3, [sp]
 8001a24:	4622      	mov	r2, r4
 8001a26:	462b      	mov	r3, r5
 8001a28:	495e      	ldr	r1, [pc, #376]	; (8001ba4 <StartEjection1+0x348>)
 8001a2a:	f01a fb21 	bl	801c070 <siprintf>
	  }

	  if (counter >= COUNTER_THRESHOLD || ejection_stage_flag >= DROGUE_DESCENT){
 8001a2e:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001a32:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d204      	bcs.n	8001a44 <StartEjection1+0x1e8>
 8001a3a:	4b53      	ldr	r3, [pc, #332]	; (8001b88 <StartEjection1+0x32c>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	f240 8143 	bls.w	8001cca <StartEjection1+0x46e>

		  if (ejection_stage_flag < DROGUE_DESCENT){
 8001a44:	4b50      	ldr	r3, [pc, #320]	; (8001b88 <StartEjection1+0x32c>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d827      	bhi.n	8001a9c <StartEjection1+0x240>

			  //TODO update value to be saved in rtc bckp registers
			  rtc_bckp_reg_alt_apogee = altitude_m;
 8001a4c:	4b50      	ldr	r3, [pc, #320]	; (8001b90 <StartEjection1+0x334>)
 8001a4e:	edd3 7a00 	vldr	s15, [r3]
 8001a52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a56:	ee17 2a90 	vmov	r2, s15
 8001a5a:	4b53      	ldr	r3, [pc, #332]	; (8001ba8 <StartEjection1+0x34c>)
 8001a5c:	601a      	str	r2, [r3, #0]
			  rtc_bckp_reg_apogee_time = 100*prev_min + prev_sec;
 8001a5e:	4b4e      	ldr	r3, [pc, #312]	; (8001b98 <StartEjection1+0x33c>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	461a      	mov	r2, r3
 8001a64:	2364      	movs	r3, #100	; 0x64
 8001a66:	fb03 f302 	mul.w	r3, r3, r2
 8001a6a:	4a4c      	ldr	r2, [pc, #304]	; (8001b9c <StartEjection1+0x340>)
 8001a6c:	7812      	ldrb	r2, [r2, #0]
 8001a6e:	4413      	add	r3, r2
 8001a70:	461a      	mov	r2, r3
 8001a72:	4b4e      	ldr	r3, [pc, #312]	; (8001bac <StartEjection1+0x350>)
 8001a74:	601a      	str	r2, [r3, #0]

			  //Update state (save the state in WatchDog thread)
			  ejection_stage_flag = DROGUE_DESCENT;
 8001a76:	4b44      	ldr	r3, [pc, #272]	; (8001b88 <StartEjection1+0x32c>)
 8001a78:	2202      	movs	r2, #2
 8001a7a:	701a      	strb	r2, [r3, #0]
			  apogee_flag = 1; //Apogee reached //TODO is it where we change it???
 8001a7c:	4b4c      	ldr	r3, [pc, #304]	; (8001bb0 <StartEjection1+0x354>)
 8001a7e:	2201      	movs	r2, #1
 8001a80:	701a      	strb	r2, [r3, #0]
			  wd_ejection_flag = 1; //Raise the flag
 8001a82:	4b4c      	ldr	r3, [pc, #304]	; (8001bb4 <StartEjection1+0x358>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	701a      	strb	r2, [r3, #0]

			  println("Eject Drogue");
 8001a88:	484b      	ldr	r0, [pc, #300]	; (8001bb8 <StartEjection1+0x35c>)
 8001a8a:	f7ff fb1f 	bl	80010cc <println>
		  }

		  //Put outside of "if" such that we only need to remember the ejection stage instead if it + arming state
		  //TODO should I put a while loop, a foor loop or just "one time functions"?
		  while(!HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 8001a8e:	e005      	b.n	8001a9c <StartEjection1+0x240>
			  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 8001a90:	2201      	movs	r2, #1
 8001a92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a96:	4849      	ldr	r0, [pc, #292]	; (8001bbc <StartEjection1+0x360>)
 8001a98:	f00b fc42 	bl	800d320 <HAL_GPIO_WritePin>
		  while(!HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 8001a9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001aa0:	4846      	ldr	r0, [pc, #280]	; (8001bbc <StartEjection1+0x360>)
 8001aa2:	f00b fc25 	bl	800d2f0 <HAL_GPIO_ReadPin>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d0f1      	beq.n	8001a90 <StartEjection1+0x234>
		  }
		  while(!HAL_GPIO_ReadPin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin)){
 8001aac:	e005      	b.n	8001aba <StartEjection1+0x25e>
			  HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, SET); //PG12 DROGUE GATE
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ab4:	4841      	ldr	r0, [pc, #260]	; (8001bbc <StartEjection1+0x360>)
 8001ab6:	f00b fc33 	bl	800d320 <HAL_GPIO_WritePin>
		  while(!HAL_GPIO_ReadPin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin)){
 8001aba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001abe:	483f      	ldr	r0, [pc, #252]	; (8001bbc <StartEjection1+0x360>)
 8001ac0:	f00b fc16 	bl	800d2f0 <HAL_GPIO_ReadPin>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d0f1      	beq.n	8001aae <StartEjection1+0x252>
		  }
		  while(HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 8001aca:	e005      	b.n	8001ad8 <StartEjection1+0x27c>
			  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, RESET); //PG14 ARMING RCOV
 8001acc:	2200      	movs	r2, #0
 8001ace:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ad2:	483a      	ldr	r0, [pc, #232]	; (8001bbc <StartEjection1+0x360>)
 8001ad4:	f00b fc24 	bl	800d320 <HAL_GPIO_WritePin>
		  while(HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 8001ad8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001adc:	4837      	ldr	r0, [pc, #220]	; (8001bbc <StartEjection1+0x360>)
 8001ade:	f00b fc07 	bl	800d2f0 <HAL_GPIO_ReadPin>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1f1      	bne.n	8001acc <StartEjection1+0x270>
		  }

		  for(;;){

			  altitude_m = MRT_getAltitude(hlps22hh.pressure_hPa);
 8001ae8:	4b28      	ldr	r3, [pc, #160]	; (8001b8c <StartEjection1+0x330>)
 8001aea:	edd3 7a00 	vldr	s15, [r3]
 8001aee:	eeb0 0a67 	vmov.f32	s0, s15
 8001af2:	f002 f8a5 	bl	8003c40 <MRT_getAltitude>
 8001af6:	eef0 7a40 	vmov.f32	s15, s0
 8001afa:	4b25      	ldr	r3, [pc, #148]	; (8001b90 <StartEjection1+0x334>)
 8001afc:	edc3 7a00 	vstr	s15, [r3]

			  //We reached main deployment altitude
			  if (altitude_m < DEPLOY_ALT || ejection_stage_flag >= MAIN_DESCENT){
 8001b00:	4b23      	ldr	r3, [pc, #140]	; (8001b90 <StartEjection1+0x334>)
 8001b02:	edd3 7a00 	vldr	s15, [r3]
 8001b06:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001bc0 <StartEjection1+0x364>
 8001b0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b12:	d404      	bmi.n	8001b1e <StartEjection1+0x2c2>
 8001b14:	4b1c      	ldr	r3, [pc, #112]	; (8001b88 <StartEjection1+0x32c>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	f240 80d2 	bls.w	8001cc2 <StartEjection1+0x466>

				  if (ejection_stage_flag < MAIN_DESCENT){
 8001b1e:	4b1a      	ldr	r3, [pc, #104]	; (8001b88 <StartEjection1+0x32c>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d824      	bhi.n	8001b70 <StartEjection1+0x314>

					  //TODO update value to be saved in rtc bckp registers
					  rtc_bckp_reg_alt_main = altitude_m;
 8001b26:	4b1a      	ldr	r3, [pc, #104]	; (8001b90 <StartEjection1+0x334>)
 8001b28:	edd3 7a00 	vldr	s15, [r3]
 8001b2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b30:	ee17 2a90 	vmov	r2, s15
 8001b34:	4b23      	ldr	r3, [pc, #140]	; (8001bc4 <StartEjection1+0x368>)
 8001b36:	601a      	str	r2, [r3, #0]
					  rtc_bckp_reg_main_time = 100*prev_min + prev_sec;
 8001b38:	4b17      	ldr	r3, [pc, #92]	; (8001b98 <StartEjection1+0x33c>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	2364      	movs	r3, #100	; 0x64
 8001b40:	fb03 f302 	mul.w	r3, r3, r2
 8001b44:	4a15      	ldr	r2, [pc, #84]	; (8001b9c <StartEjection1+0x340>)
 8001b46:	7812      	ldrb	r2, [r2, #0]
 8001b48:	4413      	add	r3, r2
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	4b1e      	ldr	r3, [pc, #120]	; (8001bc8 <StartEjection1+0x36c>)
 8001b4e:	601a      	str	r2, [r3, #0]

					  //Update state (save the state in WatchDog thread)
					  ejection_stage_flag = MAIN_DESCENT;
 8001b50:	4b0d      	ldr	r3, [pc, #52]	; (8001b88 <StartEjection1+0x32c>)
 8001b52:	2203      	movs	r2, #3
 8001b54:	701a      	strb	r2, [r3, #0]
					  wd_ejection_flag = 1; //Raise the flag
 8001b56:	4b17      	ldr	r3, [pc, #92]	; (8001bb4 <StartEjection1+0x358>)
 8001b58:	2201      	movs	r2, #1
 8001b5a:	701a      	strb	r2, [r3, #0]

					  println("Eject Main");
 8001b5c:	481b      	ldr	r0, [pc, #108]	; (8001bcc <StartEjection1+0x370>)
 8001b5e:	f7ff fab5 	bl	80010cc <println>
				  }

				  //Put outside of "if" such that we only need to remember the ejection stage instead if it + arming state
				  //TODO should I put a while loop, a foor loop or just "one time functions"?
				  while(!HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 8001b62:	e005      	b.n	8001b70 <StartEjection1+0x314>
					  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 8001b64:	2201      	movs	r2, #1
 8001b66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b6a:	4814      	ldr	r0, [pc, #80]	; (8001bbc <StartEjection1+0x360>)
 8001b6c:	f00b fbd8 	bl	800d320 <HAL_GPIO_WritePin>
				  while(!HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 8001b70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b74:	4811      	ldr	r0, [pc, #68]	; (8001bbc <StartEjection1+0x360>)
 8001b76:	f00b fbbb 	bl	800d2f0 <HAL_GPIO_ReadPin>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d0f1      	beq.n	8001b64 <StartEjection1+0x308>
				  }
				  while(!HAL_GPIO_ReadPin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin)){
 8001b80:	e02c      	b.n	8001bdc <StartEjection1+0x380>
 8001b82:	bf00      	nop
 8001b84:	20008694 	.word	0x20008694
 8001b88:	200003fc 	.word	0x200003fc
 8001b8c:	20000558 	.word	0x20000558
 8001b90:	20000350 	.word	0x20000350
 8001b94:	200003c4 	.word	0x200003c4
 8001b98:	200003fe 	.word	0x200003fe
 8001b9c:	200003ff 	.word	0x200003ff
 8001ba0:	200003c8 	.word	0x200003c8
 8001ba4:	08020ab0 	.word	0x08020ab0
 8001ba8:	200003cc 	.word	0x200003cc
 8001bac:	200003d0 	.word	0x200003d0
 8001bb0:	200003fb 	.word	0x200003fb
 8001bb4:	20000354 	.word	0x20000354
 8001bb8:	08020ad0 	.word	0x08020ad0
 8001bbc:	40021800 	.word	0x40021800
 8001bc0:	44fa0000 	.word	0x44fa0000
 8001bc4:	200003d4 	.word	0x200003d4
 8001bc8:	200003d8 	.word	0x200003d8
 8001bcc:	08020ae0 	.word	0x08020ae0
					  HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, SET); //PG11 MAIN GATE
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bd6:	4844      	ldr	r0, [pc, #272]	; (8001ce8 <StartEjection1+0x48c>)
 8001bd8:	f00b fba2 	bl	800d320 <HAL_GPIO_WritePin>
				  while(!HAL_GPIO_ReadPin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin)){
 8001bdc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001be0:	4841      	ldr	r0, [pc, #260]	; (8001ce8 <StartEjection1+0x48c>)
 8001be2:	f00b fb85 	bl	800d2f0 <HAL_GPIO_ReadPin>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d0f1      	beq.n	8001bd0 <StartEjection1+0x374>
				  }
				  while(HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 8001bec:	e005      	b.n	8001bfa <StartEjection1+0x39e>
					  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, RESET); //PG14 ARMING RCOV
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bf4:	483c      	ldr	r0, [pc, #240]	; (8001ce8 <StartEjection1+0x48c>)
 8001bf6:	f00b fb93 	bl	800d320 <HAL_GPIO_WritePin>
				  while(HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 8001bfa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bfe:	483a      	ldr	r0, [pc, #232]	; (8001ce8 <StartEjection1+0x48c>)
 8001c00:	f00b fb76 	bl	800d2f0 <HAL_GPIO_ReadPin>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1f1      	bne.n	8001bee <StartEjection1+0x392>
				  }

				  uint8_t prev_altitude = 0;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
				  uint8_t cur_altitude = 0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
				  uint8_t counter = 0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
				  while(counter < 5){
 8001c1c:	e02d      	b.n	8001c7a <StartEjection1+0x41e>
					  cur_altitude = MRT_getAltitude(hlps22hh.pressure_hPa);
 8001c1e:	4b33      	ldr	r3, [pc, #204]	; (8001cec <StartEjection1+0x490>)
 8001c20:	edd3 7a00 	vldr	s15, [r3]
 8001c24:	eeb0 0a67 	vmov.f32	s0, s15
 8001c28:	f002 f80a 	bl	8003c40 <MRT_getAltitude>
 8001c2c:	eef0 7a40 	vmov.f32	s15, s0
 8001c30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c34:	edc7 7a00 	vstr	s15, [r7]
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
					  if (cur_altitude - prev_altitude < 1 && cur_altitude - prev_altitude > -1){ //TODO might need a bigger range to account for errors (gotta know what we expect to be our slowest descent speed)
 8001c3e:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8001c42:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	dc0c      	bgt.n	8001c66 <StartEjection1+0x40a>
 8001c4c:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8001c50:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	db05      	blt.n	8001c66 <StartEjection1+0x40a>
						  counter++;
 8001c5a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001c5e:	3301      	adds	r3, #1
 8001c60:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8001c64:	e002      	b.n	8001c6c <StartEjection1+0x410>
					  }
					  else{
						  counter = 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
					  }
					  prev_altitude = cur_altitude;
 8001c6c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001c70:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
					  osDelay(100);
 8001c74:	2064      	movs	r0, #100	; 0x64
 8001c76:	f014 f917 	bl	8015ea8 <osDelay>
				  while(counter < 5){
 8001c7a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	d9cd      	bls.n	8001c1e <StartEjection1+0x3c2>
				  }

				  //TODO update value to be saved in rtc bckp registers
				  rtc_bckp_reg_alt_landed = altitude_m;
 8001c82:	4b1b      	ldr	r3, [pc, #108]	; (8001cf0 <StartEjection1+0x494>)
 8001c84:	edd3 7a00 	vldr	s15, [r3]
 8001c88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c8c:	ee17 2a90 	vmov	r2, s15
 8001c90:	4b18      	ldr	r3, [pc, #96]	; (8001cf4 <StartEjection1+0x498>)
 8001c92:	601a      	str	r2, [r3, #0]
				  rtc_bckp_reg_landed_time = 100*prev_min + prev_sec;
 8001c94:	4b18      	ldr	r3, [pc, #96]	; (8001cf8 <StartEjection1+0x49c>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	461a      	mov	r2, r3
 8001c9a:	2364      	movs	r3, #100	; 0x64
 8001c9c:	fb03 f302 	mul.w	r3, r3, r2
 8001ca0:	4a16      	ldr	r2, [pc, #88]	; (8001cfc <StartEjection1+0x4a0>)
 8001ca2:	7812      	ldrb	r2, [r2, #0]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	4b15      	ldr	r3, [pc, #84]	; (8001d00 <StartEjection1+0x4a4>)
 8001caa:	601a      	str	r2, [r3, #0]

				  //Update state (saved state in WatchDog thread)
				  ejection_stage_flag = LANDED;
 8001cac:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <StartEjection1+0x4a8>)
 8001cae:	2204      	movs	r2, #4
 8001cb0:	701a      	strb	r2, [r3, #0]
				  wd_ejection_flag = 1;
 8001cb2:	4b15      	ldr	r3, [pc, #84]	; (8001d08 <StartEjection1+0x4ac>)
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	701a      	strb	r2, [r3, #0]

				  println("Ground Level Reached");
 8001cb8:	4814      	ldr	r0, [pc, #80]	; (8001d0c <StartEjection1+0x4b0>)
 8001cba:	f7ff fa07 	bl	80010cc <println>
				  osThreadExit();
 8001cbe:	f014 f8c0 	bl	8015e42 <osThreadExit>

			  }

			  osDelay(10);
 8001cc2:	200a      	movs	r0, #10
 8001cc4:	f014 f8f0 	bl	8015ea8 <osDelay>
			  altitude_m = MRT_getAltitude(hlps22hh.pressure_hPa);
 8001cc8:	e70e      	b.n	8001ae8 <StartEjection1+0x28c>
		  }
	  }


	  //Update previous altitude
	  prev_alt = altitude_m;
 8001cca:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <StartEjection1+0x494>)
 8001ccc:	edd3 7a00 	vldr	s15, [r3]
 8001cd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cd4:	edc7 7a00 	vstr	s15, [r7]
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

	  osDelay(10);
 8001cde:	200a      	movs	r0, #10
 8001ce0:	f014 f8e2 	bl	8015ea8 <osDelay>
	  altitude_m = MRT_getAltitude(hlps22hh.pressure_hPa);
 8001ce4:	e5d9      	b.n	800189a <StartEjection1+0x3e>
 8001ce6:	bf00      	nop
 8001ce8:	40021800 	.word	0x40021800
 8001cec:	20000558 	.word	0x20000558
 8001cf0:	20000350 	.word	0x20000350
 8001cf4:	200003dc 	.word	0x200003dc
 8001cf8:	200003fe 	.word	0x200003fe
 8001cfc:	200003ff 	.word	0x200003ff
 8001d00:	200003e0 	.word	0x200003e0
 8001d04:	200003fc 	.word	0x200003fc
 8001d08:	20000354 	.word	0x20000354
 8001d0c:	08020aec 	.word	0x08020aec

08001d10 <StartTelemetry2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTelemetry2 */
void StartTelemetry2(void *argument)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b0c4      	sub	sp, #272	; 0x110
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	1d3b      	adds	r3, r7, #4
 8001d18:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartTelemetry2 */

	//Add thread id to the list
	threadsID[2]=osThreadGetId();
 8001d1a:	f014 f82a 	bl	8015d72 <osThreadGetId>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	4a37      	ldr	r2, [pc, #220]	; (8001e00 <StartTelemetry2+0xf0>)
 8001d22:	6093      	str	r3, [r2, #8]
	#if !TELEMETRY_THREAD
	osThreadExit();
	#endif

	char radio_buffer[RADIO_BUFFER_SIZE];
	uint8_t counter = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	uint8_t iridium_counter = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e

  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, SET);
 8001d30:	2201      	movs	r2, #1
 8001d32:	2108      	movs	r1, #8
 8001d34:	4833      	ldr	r0, [pc, #204]	; (8001e04 <StartTelemetry2+0xf4>)
 8001d36:	f00b faf3 	bl	800d320 <HAL_GPIO_WritePin>

	  if (apogee_flag){
 8001d3a:	4b33      	ldr	r3, [pc, #204]	; (8001e08 <StartTelemetry2+0xf8>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <StartTelemetry2+0x3a>
		  osDelay(1000/POST_APOGEE_SEND_FREQ);
 8001d42:	200a      	movs	r0, #10
 8001d44:	f014 f8b0 	bl	8015ea8 <osDelay>
 8001d48:	e01b      	b.n	8001d82 <StartTelemetry2+0x72>
	  }
	  else{ //Only send prop data pre-apogee
		  //Send propulsion data
		  memset(radio_buffer, 0, RADIO_BUFFER_SIZE);
 8001d4a:	f107 030c 	add.w	r3, r7, #12
 8001d4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d52:	2100      	movs	r1, #0
 8001d54:	4618      	mov	r0, r3
 8001d56:	f018 fe8f 	bl	801aa78 <memset>
		  MRT_formatPropulsion();
 8001d5a:	f003 fc97 	bl	800568c <MRT_formatPropulsion>
		  memcpy(radio_buffer, msg_buffer_pr, strlen(msg_buffer_pr));
 8001d5e:	482b      	ldr	r0, [pc, #172]	; (8001e0c <StartTelemetry2+0xfc>)
 8001d60:	f7fe fa50 	bl	8000204 <strlen>
 8001d64:	4602      	mov	r2, r0
 8001d66:	f107 030c 	add.w	r3, r7, #12
 8001d6a:	4928      	ldr	r1, [pc, #160]	; (8001e0c <StartTelemetry2+0xfc>)
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f018 fe5b 	bl	801aa28 <memcpy>
		  MRT_radio_tx((char*) radio_buffer);
 8001d72:	f107 030c 	add.w	r3, r7, #12
 8001d76:	4618      	mov	r0, r3
 8001d78:	f009 f85c 	bl	800ae34 <MRT_radio_tx>

		  osDelay(1000/PRE_APOGEE_SEND_FREQ);
 8001d7c:	2014      	movs	r0, #20
 8001d7e:	f014 f893 	bl	8015ea8 <osDelay>
	  }

	  if (counter == SENSORS_SEND_FREQ_DIVIDER){
 8001d82:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001d86:	2b0a      	cmp	r3, #10
 8001d88:	d12e      	bne.n	8001de8 <StartTelemetry2+0xd8>
		  counter = 0;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		  float SEC = (uint8_t) time % 60; sprintf(&SEC,"%.0f",SEC);
		  float SUBSEC = time / 3600.0; sprintf(&SUBSEC,"%.0f",SUBSEC);
		  */

	  	  //Send sensors data
		  memset(radio_buffer, 0, RADIO_BUFFER_SIZE);
 8001d90:	f107 030c 	add.w	r3, r7, #12
 8001d94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d98:	2100      	movs	r1, #0
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f018 fe6c 	bl	801aa78 <memset>
		  MRT_formatAvionics();
 8001da0:	f001 ffd0 	bl	8003d44 <MRT_formatAvionics>
		  memcpy(radio_buffer, msg_buffer_av, strlen(msg_buffer_av));
 8001da4:	481a      	ldr	r0, [pc, #104]	; (8001e10 <StartTelemetry2+0x100>)
 8001da6:	f7fe fa2d 	bl	8000204 <strlen>
 8001daa:	4602      	mov	r2, r0
 8001dac:	f107 030c 	add.w	r3, r7, #12
 8001db0:	4917      	ldr	r1, [pc, #92]	; (8001e10 <StartTelemetry2+0x100>)
 8001db2:	4618      	mov	r0, r3
 8001db4:	f018 fe38 	bl	801aa28 <memcpy>
		  MRT_radio_tx((char*) radio_buffer);
 8001db8:	f107 030c 	add.w	r3, r7, #12
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f009 f839 	bl	800ae34 <MRT_radio_tx>


		  if(apogee_flag && iridium_counter == IRIDIUM_SEND_FREQ_DIVIDER){
 8001dc2:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <StartTelemetry2+0xf8>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d009      	beq.n	8001dde <StartTelemetry2+0xce>
 8001dca:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8001dce:	2b05      	cmp	r3, #5
 8001dd0:	d105      	bne.n	8001dde <StartTelemetry2+0xce>
			  iridium_counter = 0;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
			  #if IRIDIUM_ //Iridium send
			  hiridium.getTime(); //TODO doesn't cost anything
 8001dd8:	4b0e      	ldr	r3, [pc, #56]	; (8001e14 <StartTelemetry2+0x104>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	4798      	blx	r3
			  //hiridium.sendMessage(msg); TODO IT COSTS CREDITS WATCH OUT
			  #endif
		  }
		  iridium_counter++;
 8001dde:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8001de2:	3301      	adds	r3, #1
 8001de4:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	  }
	  counter++;
 8001de8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001dec:	3301      	adds	r3, #1
 8001dee:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f


	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 8001df2:	2200      	movs	r2, #0
 8001df4:	2108      	movs	r1, #8
 8001df6:	4803      	ldr	r0, [pc, #12]	; (8001e04 <StartTelemetry2+0xf4>)
 8001df8:	f00b fa92 	bl	800d320 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, SET);
 8001dfc:	e798      	b.n	8001d30 <StartTelemetry2+0x20>
 8001dfe:	bf00      	nop
 8001e00:	20008694 	.word	0x20008694
 8001e04:	40020800 	.word	0x40020800
 8001e08:	200003fb 	.word	0x200003fb
 8001e0c:	20009740 	.word	0x20009740
 8001e10:	200089f0 	.word	0x200089f0
 8001e14:	20000584 	.word	0x20000584

08001e18 <StartSensors3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensors3 */
void StartSensors3(void *argument)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensors3 */

	//Add thread id to the list
	threadsID[3]=osThreadGetId();
 8001e20:	f013 ffa7 	bl	8015d72 <osThreadGetId>
 8001e24:	4603      	mov	r3, r0
 8001e26:	4a13      	ldr	r2, [pc, #76]	; (8001e74 <StartSensors3+0x5c>)
 8001e28:	60d3      	str	r3, [r2, #12]


  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	2102      	movs	r1, #2
 8001e2e:	4812      	ldr	r0, [pc, #72]	; (8001e78 <StartSensors3+0x60>)
 8001e30:	f00b fa76 	bl	800d320 <HAL_GPIO_WritePin>

	  //GPS
	  hgps.pollAll();
 8001e34:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <StartSensors3+0x64>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	4798      	blx	r3

	  //LSM6DSR
	  hlsm6dsr.pollAll();
 8001e3a:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <StartSensors3+0x68>)
 8001e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3e:	4798      	blx	r3

	  //LPS22HH
	  hlps22hh.pollAll();
 8001e40:	4b10      	ldr	r3, [pc, #64]	; (8001e84 <StartSensors3+0x6c>)
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	4798      	blx	r3

	  //Gates continuity
	  gates_continuity = MRT_getContinuity();
 8001e46:	f001 ff49 	bl	8003cdc <MRT_getContinuity>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	4b0e      	ldr	r3, [pc, #56]	; (8001e88 <StartSensors3+0x70>)
 8001e50:	701a      	strb	r2, [r3, #0]

	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 8001e52:	2200      	movs	r2, #0
 8001e54:	2102      	movs	r1, #2
 8001e56:	4808      	ldr	r0, [pc, #32]	; (8001e78 <StartSensors3+0x60>)
 8001e58:	f00b fa62 	bl	800d320 <HAL_GPIO_WritePin>

	  if (apogee_flag){
 8001e5c:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <StartSensors3+0x74>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d003      	beq.n	8001e6c <StartSensors3+0x54>
		  osDelay(1000/POST_APOGEE_POLL_FREQ);
 8001e64:	200a      	movs	r0, #10
 8001e66:	f014 f81f 	bl	8015ea8 <osDelay>
 8001e6a:	e7de      	b.n	8001e2a <StartSensors3+0x12>
	  }
	  else{
		  osDelay(1000/PRE_APOGEE_POLL_FREQ);
 8001e6c:	2014      	movs	r0, #20
 8001e6e:	f014 f81b 	bl	8015ea8 <osDelay>
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 8001e72:	e7da      	b.n	8001e2a <StartSensors3+0x12>
 8001e74:	20008694 	.word	0x20008694
 8001e78:	40020800 	.word	0x40020800
 8001e7c:	2000056c 	.word	0x2000056c
 8001e80:	2000052c 	.word	0x2000052c
 8001e84:	20000558 	.word	0x20000558
 8001e88:	200003e7 	.word	0x200003e7
 8001e8c:	200003fb 	.word	0x200003fb

08001e90 <StartWatchDog>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWatchDog */
void StartWatchDog(void *argument)
{
 8001e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e94:	b0c6      	sub	sp, #280	; 0x118
 8001e96:	af04      	add	r7, sp, #16
 8001e98:	1d3b      	adds	r3, r7, #4
 8001e9a:	6018      	str	r0, [r3, #0]
	char buffer[WD_BUFFER_SIZE];

  /* Infinite loop */
  for(;;)
  {
	 HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	2104      	movs	r1, #4
 8001ea0:	4860      	ldr	r0, [pc, #384]	; (8002024 <StartWatchDog+0x194>)
 8001ea2:	f00b fa3d 	bl	800d320 <HAL_GPIO_WritePin>

	 HAL_IWDG_Refresh(&hiwdg);
 8001ea6:	4860      	ldr	r0, [pc, #384]	; (8002028 <StartWatchDog+0x198>)
 8001ea8:	f00c fb1e 	bl	800e4e8 <HAL_IWDG_Refresh>
	 uint64_t* i = 0x20CDCDCD;
	 *i = 10;
	#endif

	 //TODO remove for comp
	 memset(buffer, 0, WD_BUFFER_SIZE);
 8001eac:	f107 0308 	add.w	r3, r7, #8
 8001eb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f018 fdde 	bl	801aa78 <memset>
	 sprintf(buffer, "Time: %i:%i:%i ::%lu	Altitude: \r\n %f\r\n", prev_hour,prev_min,prev_sec,prev_subsec , altitude_m);
 8001ebc:	4b5b      	ldr	r3, [pc, #364]	; (800202c <StartWatchDog+0x19c>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	461e      	mov	r6, r3
 8001ec2:	4b5b      	ldr	r3, [pc, #364]	; (8002030 <StartWatchDog+0x1a0>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	4698      	mov	r8, r3
 8001ec8:	4b5a      	ldr	r3, [pc, #360]	; (8002034 <StartWatchDog+0x1a4>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	461d      	mov	r5, r3
 8001ece:	4b5a      	ldr	r3, [pc, #360]	; (8002038 <StartWatchDog+0x1a8>)
 8001ed0:	681c      	ldr	r4, [r3, #0]
 8001ed2:	4b5a      	ldr	r3, [pc, #360]	; (800203c <StartWatchDog+0x1ac>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7fe fb56 	bl	8000588 <__aeabi_f2d>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	f107 0008 	add.w	r0, r7, #8
 8001ee4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001ee8:	9401      	str	r4, [sp, #4]
 8001eea:	9500      	str	r5, [sp, #0]
 8001eec:	4643      	mov	r3, r8
 8001eee:	4632      	mov	r2, r6
 8001ef0:	4953      	ldr	r1, [pc, #332]	; (8002040 <StartWatchDog+0x1b0>)
 8001ef2:	f01a f8bd 	bl	801c070 <siprintf>
	 println((char*) buffer);
 8001ef6:	f107 0308 	add.w	r3, r7, #8
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff f8e6 	bl	80010cc <println>


	 //Check if new ejection stage to save in memory
	 if(wd_ejection_flag == 1){
 8001f00:	4b50      	ldr	r3, [pc, #320]	; (8002044 <StartWatchDog+0x1b4>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d15d      	bne.n	8001fc4 <StartWatchDog+0x134>

		wd_ejection_flag = 0;
 8001f08:	4b4e      	ldr	r3, [pc, #312]	; (8002044 <StartWatchDog+0x1b4>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	701a      	strb	r2, [r3, #0]

		//Update ejection stage flag and save it
		rtc_bckp_reg_ejection_stage = ejection_stage_flag;
 8001f0e:	4b4e      	ldr	r3, [pc, #312]	; (8002048 <StartWatchDog+0x1b8>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	461a      	mov	r2, r3
 8001f14:	4b4d      	ldr	r3, [pc, #308]	; (800204c <StartWatchDog+0x1bc>)
 8001f16:	601a      	str	r2, [r3, #0]
		ext_flash_ejection_stage = ejection_stage_flag;
 8001f18:	4b4b      	ldr	r3, [pc, #300]	; (8002048 <StartWatchDog+0x1b8>)
 8001f1a:	781a      	ldrb	r2, [r3, #0]
 8001f1c:	4b4c      	ldr	r3, [pc, #304]	; (8002050 <StartWatchDog+0x1c0>)
 8001f1e:	701a      	strb	r2, [r3, #0]
		MRT_saveFlagValue(FC_STATE_FLIGHT);
 8001f20:	2004      	movs	r0, #4
 8001f22:	f002 f85f 	bl	8003fe4 <MRT_saveFlagValue>

		//If applicable, update apogee flag
		if (ejection_stage_flag >= DROGUE_DESCENT){
 8001f26:	4b48      	ldr	r3, [pc, #288]	; (8002048 <StartWatchDog+0x1b8>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d90e      	bls.n	8001f4c <StartWatchDog+0xbc>
			apogee_flag = 1;
 8001f2e:	4b49      	ldr	r3, [pc, #292]	; (8002054 <StartWatchDog+0x1c4>)
 8001f30:	2201      	movs	r2, #1
 8001f32:	701a      	strb	r2, [r3, #0]
			rtc_bckp_reg_apogee = apogee_flag;
 8001f34:	4b47      	ldr	r3, [pc, #284]	; (8002054 <StartWatchDog+0x1c4>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	4b47      	ldr	r3, [pc, #284]	; (8002058 <StartWatchDog+0x1c8>)
 8001f3c:	601a      	str	r2, [r3, #0]
			ext_flash_apogee = apogee_flag;
 8001f3e:	4b45      	ldr	r3, [pc, #276]	; (8002054 <StartWatchDog+0x1c4>)
 8001f40:	781a      	ldrb	r2, [r3, #0]
 8001f42:	4b46      	ldr	r3, [pc, #280]	; (800205c <StartWatchDog+0x1cc>)
 8001f44:	701a      	strb	r2, [r3, #0]
			MRT_saveFlagValue(FC_STATE_APOGEE);
 8001f46:	2003      	movs	r0, #3
 8001f48:	f002 f84c 	bl	8003fe4 <MRT_saveFlagValue>
		}

		//TODO TESTING SAVE EVERY ALT REGISTERS
		MRT_RTC_setBackupReg(FC_STATE_ALT_PAD, rtc_bckp_reg_alt_pad);
 8001f4c:	4b44      	ldr	r3, [pc, #272]	; (8002060 <StartWatchDog+0x1d0>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4619      	mov	r1, r3
 8001f52:	2009      	movs	r0, #9
 8001f54:	f001 f96e 	bl	8003234 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_PAD_TIME, rtc_bckp_reg_pad_time);
 8001f58:	4b42      	ldr	r3, [pc, #264]	; (8002064 <StartWatchDog+0x1d4>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	200a      	movs	r0, #10
 8001f60:	f001 f968 	bl	8003234 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_STATE_TRUE_APOGEE, rtc_bckp_reg_alt_true_apogee);
 8001f64:	4b40      	ldr	r3, [pc, #256]	; (8002068 <StartWatchDog+0x1d8>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4619      	mov	r1, r3
 8001f6a:	200b      	movs	r0, #11
 8001f6c:	f001 f962 	bl	8003234 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_TRUE_APOGEE_TIME, rtc_bckp_reg_true_apogee_time);
 8001f70:	4b3e      	ldr	r3, [pc, #248]	; (800206c <StartWatchDog+0x1dc>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4619      	mov	r1, r3
 8001f76:	200c      	movs	r0, #12
 8001f78:	f001 f95c 	bl	8003234 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_STATE_ALT_APOGEE, rtc_bckp_reg_alt_apogee);
 8001f7c:	4b3c      	ldr	r3, [pc, #240]	; (8002070 <StartWatchDog+0x1e0>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4619      	mov	r1, r3
 8001f82:	200d      	movs	r0, #13
 8001f84:	f001 f956 	bl	8003234 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_APOGEE_TIME, rtc_bckp_reg_apogee_time);
 8001f88:	4b3a      	ldr	r3, [pc, #232]	; (8002074 <StartWatchDog+0x1e4>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	200e      	movs	r0, #14
 8001f90:	f001 f950 	bl	8003234 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_STATE_ALT_MAIN, rtc_bckp_reg_alt_main);
 8001f94:	4b38      	ldr	r3, [pc, #224]	; (8002078 <StartWatchDog+0x1e8>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4619      	mov	r1, r3
 8001f9a:	200f      	movs	r0, #15
 8001f9c:	f001 f94a 	bl	8003234 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_MAIN_TIME, rtc_bckp_reg_main_time);
 8001fa0:	4b36      	ldr	r3, [pc, #216]	; (800207c <StartWatchDog+0x1ec>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	2010      	movs	r0, #16
 8001fa8:	f001 f944 	bl	8003234 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_STATE_ALT_LANDED, rtc_bckp_reg_alt_landed);
 8001fac:	4b34      	ldr	r3, [pc, #208]	; (8002080 <StartWatchDog+0x1f0>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	2011      	movs	r0, #17
 8001fb4:	f001 f93e 	bl	8003234 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_LANDED_TIME, rtc_bckp_reg_landed_time);
 8001fb8:	4b32      	ldr	r3, [pc, #200]	; (8002084 <StartWatchDog+0x1f4>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	2012      	movs	r0, #18
 8001fc0:	f001 f938 	bl	8003234 <MRT_RTC_setBackupReg>
	 }

	  //Check if it's sleep time
	  if (flagA==1 || flagB==1){
 8001fc4:	4b30      	ldr	r3, [pc, #192]	; (8002088 <StartWatchDog+0x1f8>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d003      	beq.n	8001fd4 <StartWatchDog+0x144>
 8001fcc:	4b2f      	ldr	r3, [pc, #188]	; (800208c <StartWatchDog+0x1fc>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d112      	bne.n	8001ffa <StartWatchDog+0x16a>
		//Update iwdg_flag
		iwdg_flag = 1;
 8001fd4:	4b2e      	ldr	r3, [pc, #184]	; (8002090 <StartWatchDog+0x200>)
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	701a      	strb	r2, [r3, #0]
		rtc_bckp_reg_iwdg = iwdg_flag;
 8001fda:	4b2d      	ldr	r3, [pc, #180]	; (8002090 <StartWatchDog+0x200>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	4b2c      	ldr	r3, [pc, #176]	; (8002094 <StartWatchDog+0x204>)
 8001fe2:	601a      	str	r2, [r3, #0]
		ext_flash_iwdg = iwdg_flag;
 8001fe4:	4b2a      	ldr	r3, [pc, #168]	; (8002090 <StartWatchDog+0x200>)
 8001fe6:	781a      	ldrb	r2, [r3, #0]
 8001fe8:	4b2b      	ldr	r3, [pc, #172]	; (8002098 <StartWatchDog+0x208>)
 8001fea:	701a      	strb	r2, [r3, #0]
		MRT_saveFlagValue(FC_STATE_IWDG);
 8001fec:	2002      	movs	r0, #2
 8001fee:	f001 fff9 	bl	8003fe4 <MRT_saveFlagValue>

		//Save the RTC time
		MRT_saveTotalTime();
 8001ff2:	f002 f883 	bl	80040fc <MRT_saveTotalTime>

		//Reset to deactivate IWDG
		NVIC_SystemReset();
 8001ff6:	f7ff fb19 	bl	800162c <__NVIC_SystemReset>
	  }

	  //Save the RTC time
	  MRT_saveTotalTime();
 8001ffa:	f002 f87f 	bl	80040fc <MRT_saveTotalTime>


	  //Check for complete restart
	  if(restart_flag == 1){
 8001ffe:	4b27      	ldr	r3, [pc, #156]	; (800209c <StartWatchDog+0x20c>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d101      	bne.n	800200a <StartWatchDog+0x17a>
		  MRT_resetFromStart();
 8002006:	f001 fbd5 	bl	80037b4 <MRT_resetFromStart>
	  }

	  MRT_checkThreadStates();
 800200a:	f000 f97f 	bl	800230c <MRT_checkThreadStates>

	  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 800200e:	2200      	movs	r2, #0
 8002010:	2104      	movs	r1, #4
 8002012:	4804      	ldr	r0, [pc, #16]	; (8002024 <StartWatchDog+0x194>)
 8002014:	f00b f984 	bl	800d320 <HAL_GPIO_WritePin>

	  osDelay(1000/WD_FREQ);
 8002018:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800201c:	f013 ff44 	bl	8015ea8 <osDelay>
	 HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 8002020:	e73c      	b.n	8001e9c <StartWatchDog+0xc>
 8002022:	bf00      	nop
 8002024:	40020800 	.word	0x40020800
 8002028:	20008760 	.word	0x20008760
 800202c:	200003fd 	.word	0x200003fd
 8002030:	200003fe 	.word	0x200003fe
 8002034:	200003ff 	.word	0x200003ff
 8002038:	20000400 	.word	0x20000400
 800203c:	20000350 	.word	0x20000350
 8002040:	08020b04 	.word	0x08020b04
 8002044:	20000354 	.word	0x20000354
 8002048:	200003fc 	.word	0x200003fc
 800204c:	200003a8 	.word	0x200003a8
 8002050:	200003ec 	.word	0x200003ec
 8002054:	200003fb 	.word	0x200003fb
 8002058:	200003a4 	.word	0x200003a4
 800205c:	200003eb 	.word	0x200003eb
 8002060:	200003bc 	.word	0x200003bc
 8002064:	200003c0 	.word	0x200003c0
 8002068:	200003c4 	.word	0x200003c4
 800206c:	200003c8 	.word	0x200003c8
 8002070:	200003cc 	.word	0x200003cc
 8002074:	200003d0 	.word	0x200003d0
 8002078:	200003d4 	.word	0x200003d4
 800207c:	200003d8 	.word	0x200003d8
 8002080:	200003dc 	.word	0x200003dc
 8002084:	200003e0 	.word	0x200003e0
 8002088:	200003e4 	.word	0x200003e4
 800208c:	200003e5 	.word	0x200003e5
 8002090:	200003fa 	.word	0x200003fa
 8002094:	200003a0 	.word	0x200003a0
 8002098:	200003ea 	.word	0x200003ea
 800209c:	200003e6 	.word	0x200003e6

080020a0 <StartPropulsion4>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPropulsion4 */
void StartPropulsion4(void *argument)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPropulsion4 */

	//Add thread id to the list
	threadsID[4]=osThreadGetId();
 80020a8:	f013 fe63 	bl	8015d72 <osThreadGetId>
 80020ac:	4603      	mov	r3, r0
 80020ae:	4a0c      	ldr	r2, [pc, #48]	; (80020e0 <StartPropulsion4+0x40>)
 80020b0:	6113      	str	r3, [r2, #16]

	#if !PROPULSION_THREAD
	osThreadExit();
	#endif

	if (apogee_flag || ejection_stage_flag >= DROGUE_DESCENT){
 80020b2:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <StartPropulsion4+0x44>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d103      	bne.n	80020c2 <StartPropulsion4+0x22>
 80020ba:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <StartPropulsion4+0x48>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d901      	bls.n	80020c6 <StartPropulsion4+0x26>
		osThreadExit();
 80020c2:	f013 febe 	bl	8015e42 <osThreadExit>

  /* Infinite loop */
  for(;;)
  {
	  //Poll propulsion sensors
	  MRT_pollPropulsion();
 80020c6:	f003 faa9 	bl	800561c <MRT_pollPropulsion>

	  if (apogee_flag){
 80020ca:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <StartPropulsion4+0x44>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <StartPropulsion4+0x36>
		  osThreadExit();
 80020d2:	f013 feb6 	bl	8015e42 <osThreadExit>
	  }
	  else{
		  osDelay(1000/PRE_APOGEE_POLL_FREQ);
 80020d6:	2014      	movs	r0, #20
 80020d8:	f013 fee6 	bl	8015ea8 <osDelay>
	  MRT_pollPropulsion();
 80020dc:	e7f3      	b.n	80020c6 <StartPropulsion4+0x26>
 80020de:	bf00      	nop
 80020e0:	20008694 	.word	0x20008694
 80020e4:	200003fb 	.word	0x200003fb
 80020e8:	200003fc 	.word	0x200003fc

080020ec <MRT_waitForLaunch>:
/* USER CODE BEGIN Application */

//TODO private functions


void MRT_waitForLaunch(void){
 80020ec:	b5b0      	push	{r4, r5, r7, lr}
 80020ee:	b0c6      	sub	sp, #280	; 0x118
 80020f0:	af04      	add	r7, sp, #16

	println("Waiting for launch command from ground station\r\n");
 80020f2:	486e      	ldr	r0, [pc, #440]	; (80022ac <MRT_waitForLaunch+0x1c0>)
 80020f4:	f7fe ffea 	bl	80010cc <println>

	char radio_buffer[RADIO_BUFFER_SIZE];
	radio_command cmd = -1;
 80020f8:	23ff      	movs	r3, #255	; 0xff
 80020fa:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

	//Poll propulsion until launch command sent
	while((XTEND_ || SRADIO_) && ejection_stage_flag == PAD){
 80020fe:	e0a0      	b.n	8002242 <MRT_waitForLaunch+0x156>
		HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, SET);
 8002100:	2201      	movs	r2, #1
 8002102:	2108      	movs	r1, #8
 8002104:	486a      	ldr	r0, [pc, #424]	; (80022b0 <MRT_waitForLaunch+0x1c4>)
 8002106:	f00b f90b 	bl	800d320 <HAL_GPIO_WritePin>

		HAL_IWDG_Refresh(&hiwdg);
 800210a:	486a      	ldr	r0, [pc, #424]	; (80022b4 <MRT_waitForLaunch+0x1c8>)
 800210c:	f00c f9ec 	bl	800e4e8 <HAL_IWDG_Refresh>

		//Get RTC time
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002110:	2200      	movs	r2, #0
 8002112:	4969      	ldr	r1, [pc, #420]	; (80022b8 <MRT_waitForLaunch+0x1cc>)
 8002114:	4869      	ldr	r0, [pc, #420]	; (80022bc <MRT_waitForLaunch+0x1d0>)
 8002116:	f00d fa35 	bl	800f584 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800211a:	2200      	movs	r2, #0
 800211c:	4968      	ldr	r1, [pc, #416]	; (80022c0 <MRT_waitForLaunch+0x1d4>)
 800211e:	4867      	ldr	r0, [pc, #412]	; (80022bc <MRT_waitForLaunch+0x1d0>)
 8002120:	f00d fb35 	bl	800f78e <HAL_RTC_GetDate>

		//Update global variables
		prev_hour = sTime.Hours;
 8002124:	4b64      	ldr	r3, [pc, #400]	; (80022b8 <MRT_waitForLaunch+0x1cc>)
 8002126:	781a      	ldrb	r2, [r3, #0]
 8002128:	4b66      	ldr	r3, [pc, #408]	; (80022c4 <MRT_waitForLaunch+0x1d8>)
 800212a:	701a      	strb	r2, [r3, #0]
		prev_min = sTime.Minutes;
 800212c:	4b62      	ldr	r3, [pc, #392]	; (80022b8 <MRT_waitForLaunch+0x1cc>)
 800212e:	785a      	ldrb	r2, [r3, #1]
 8002130:	4b65      	ldr	r3, [pc, #404]	; (80022c8 <MRT_waitForLaunch+0x1dc>)
 8002132:	701a      	strb	r2, [r3, #0]
		prev_sec = sTime.Seconds;
 8002134:	4b60      	ldr	r3, [pc, #384]	; (80022b8 <MRT_waitForLaunch+0x1cc>)
 8002136:	789a      	ldrb	r2, [r3, #2]
 8002138:	4b64      	ldr	r3, [pc, #400]	; (80022cc <MRT_waitForLaunch+0x1e0>)
 800213a:	701a      	strb	r2, [r3, #0]
		if (__HAL_RTC_SHIFT_GET_FLAG(&hrtc, RTC_FLAG_SHPF)) prev_sec++; //Adjust following the user manual
 800213c:	4b5f      	ldr	r3, [pc, #380]	; (80022bc <MRT_waitForLaunch+0x1d0>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	f003 0308 	and.w	r3, r3, #8
 8002146:	2b00      	cmp	r3, #0
 8002148:	d005      	beq.n	8002156 <MRT_waitForLaunch+0x6a>
 800214a:	4b60      	ldr	r3, [pc, #384]	; (80022cc <MRT_waitForLaunch+0x1e0>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	3301      	adds	r3, #1
 8002150:	b2da      	uxtb	r2, r3
 8002152:	4b5e      	ldr	r3, [pc, #376]	; (80022cc <MRT_waitForLaunch+0x1e0>)
 8002154:	701a      	strb	r2, [r3, #0]
		prev_subsec = sTime.SubSeconds;
 8002156:	4b58      	ldr	r3, [pc, #352]	; (80022b8 <MRT_waitForLaunch+0x1cc>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	4a5d      	ldr	r2, [pc, #372]	; (80022d0 <MRT_waitForLaunch+0x1e4>)
 800215c:	6013      	str	r3, [r2, #0]

		//Save the RTC time
	    MRT_saveTotalTime();
 800215e:	f001 ffcd 	bl	80040fc <MRT_saveTotalTime>

		//Poll propulsion sensors
		MRT_pollPropulsion();
 8002162:	f003 fa5b 	bl	800561c <MRT_pollPropulsion>

		//Send propulsion data
		memset(radio_buffer, 0, RADIO_BUFFER_SIZE);
 8002166:	1d3b      	adds	r3, r7, #4
 8002168:	f44f 7280 	mov.w	r2, #256	; 0x100
 800216c:	2100      	movs	r1, #0
 800216e:	4618      	mov	r0, r3
 8002170:	f018 fc82 	bl	801aa78 <memset>
		sprintf(radio_buffer,"P,%.2f,%.2f, %i,E\r\n",transducer_voltage,thermocouple_temperature,(int) valve_status);
 8002174:	4b57      	ldr	r3, [pc, #348]	; (80022d4 <MRT_waitForLaunch+0x1e8>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f7fe fa05 	bl	8000588 <__aeabi_f2d>
 800217e:	4604      	mov	r4, r0
 8002180:	460d      	mov	r5, r1
 8002182:	4b55      	ldr	r3, [pc, #340]	; (80022d8 <MRT_waitForLaunch+0x1ec>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f7fe f9fe 	bl	8000588 <__aeabi_f2d>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	4952      	ldr	r1, [pc, #328]	; (80022dc <MRT_waitForLaunch+0x1f0>)
 8002192:	7809      	ldrb	r1, [r1, #0]
 8002194:	1d38      	adds	r0, r7, #4
 8002196:	9102      	str	r1, [sp, #8]
 8002198:	e9cd 2300 	strd	r2, r3, [sp]
 800219c:	4622      	mov	r2, r4
 800219e:	462b      	mov	r3, r5
 80021a0:	494f      	ldr	r1, [pc, #316]	; (80022e0 <MRT_waitForLaunch+0x1f4>)
 80021a2:	f019 ff65 	bl	801c070 <siprintf>
		MRT_radio_tx(radio_buffer);
 80021a6:	1d3b      	adds	r3, r7, #4
 80021a8:	4618      	mov	r0, r3
 80021aa:	f008 fe43 	bl	800ae34 <MRT_radio_tx>


		// Save to SD card
		#if SD_CARD_
		fres = sd_open_file(filename);
 80021ae:	484d      	ldr	r0, [pc, #308]	; (80022e4 <MRT_waitForLaunch+0x1f8>)
 80021b0:	f002 fa70 	bl	8004694 <sd_open_file>
 80021b4:	4603      	mov	r3, r0
 80021b6:	461a      	mov	r2, r3
 80021b8:	4b4b      	ldr	r3, [pc, #300]	; (80022e8 <MRT_waitForLaunch+0x1fc>)
 80021ba:	701a      	strb	r2, [r3, #0]
		MRT_formatPropulsion();
 80021bc:	f003 fa66 	bl	800568c <MRT_formatPropulsion>
		sd_write(&fil, msg_buffer_pr);
 80021c0:	494a      	ldr	r1, [pc, #296]	; (80022ec <MRT_waitForLaunch+0x200>)
 80021c2:	484b      	ldr	r0, [pc, #300]	; (80022f0 <MRT_waitForLaunch+0x204>)
 80021c4:	f002 fa7e 	bl	80046c4 <sd_write>
		f_close(&fil);
 80021c8:	4849      	ldr	r0, [pc, #292]	; (80022f0 <MRT_waitForLaunch+0x204>)
 80021ca:	f013 f8a5 	bl	8015318 <f_close>
		#endif


		//Check for launch command
		memset(radio_buffer, 0, RADIO_BUFFER_SIZE);
 80021ce:	1d3b      	adds	r3, r7, #4
 80021d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021d4:	2100      	movs	r1, #0
 80021d6:	4618      	mov	r0, r3
 80021d8:	f018 fc4e 	bl	801aa78 <memset>
		MRT_radio_rx(radio_buffer, 2, 0x500); //Timeout is about 1.2 sec (should be less than 5 sec)
 80021dc:	1d3b      	adds	r3, r7, #4
 80021de:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80021e2:	2102      	movs	r1, #2
 80021e4:	4618      	mov	r0, r3
 80021e6:	f008 fe47 	bl	800ae78 <MRT_radio_rx>
		cmd = radio_parse_command(radio_buffer);
 80021ea:	1d3b      	adds	r3, r7, #4
 80021ec:	4618      	mov	r0, r3
 80021ee:	f008 ff0d 	bl	800b00c <radio_parse_command>
 80021f2:	4603      	mov	r3, r0
 80021f4:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

		if (cmd == LAUNCH){
 80021f8:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d10b      	bne.n	8002218 <MRT_waitForLaunch+0x12c>
			//Update ejection stage flag and save it
			ejection_stage_flag = BOOST;
 8002200:	4b3c      	ldr	r3, [pc, #240]	; (80022f4 <MRT_waitForLaunch+0x208>)
 8002202:	2201      	movs	r2, #1
 8002204:	701a      	strb	r2, [r3, #0]
			rtc_bckp_reg_ejection_stage = BOOST;
 8002206:	4b3c      	ldr	r3, [pc, #240]	; (80022f8 <MRT_waitForLaunch+0x20c>)
 8002208:	2201      	movs	r2, #1
 800220a:	601a      	str	r2, [r3, #0]
			ext_flash_ejection_stage = BOOST;
 800220c:	4b3b      	ldr	r3, [pc, #236]	; (80022fc <MRT_waitForLaunch+0x210>)
 800220e:	2201      	movs	r2, #1
 8002210:	701a      	strb	r2, [r3, #0]
			MRT_saveFlagValue(FC_STATE_FLIGHT);
 8002212:	2004      	movs	r0, #4
 8002214:	f001 fee6 	bl	8003fe4 <MRT_saveFlagValue>
		}
		execute_parsed_command(cmd);
 8002218:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800221c:	4618      	mov	r0, r3
 800221e:	f008 ff61 	bl	800b0e4 <execute_parsed_command>
		MRT_radio_send_ack(cmd);
 8002222:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8002226:	4618      	mov	r0, r3
 8002228:	f008 fed6 	bl	800afd8 <MRT_radio_send_ack>

		HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 800222c:	2200      	movs	r2, #0
 800222e:	2108      	movs	r1, #8
 8002230:	481f      	ldr	r0, [pc, #124]	; (80022b0 <MRT_waitForLaunch+0x1c4>)
 8002232:	f00b f875 	bl	800d320 <HAL_GPIO_WritePin>

		//Reset IWDG timer
		HAL_IWDG_Refresh(&hiwdg);
 8002236:	481f      	ldr	r0, [pc, #124]	; (80022b4 <MRT_waitForLaunch+0x1c8>)
 8002238:	f00c f956 	bl	800e4e8 <HAL_IWDG_Refresh>

		HAL_Delay(1000/PRE_APOGEE_SEND_FREQ);
 800223c:	2014      	movs	r0, #20
 800223e:	f00a f963 	bl	800c508 <HAL_Delay>
	while((XTEND_ || SRADIO_) && ejection_stage_flag == PAD){
 8002242:	4b2c      	ldr	r3, [pc, #176]	; (80022f4 <MRT_waitForLaunch+0x208>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2b00      	cmp	r3, #0
 8002248:	f43f af5a 	beq.w	8002100 <MRT_waitForLaunch+0x14>
	}


	//Todo to test ejection
	hlps22hh.getPressure();
 800224c:	4b2c      	ldr	r3, [pc, #176]	; (8002300 <MRT_waitForLaunch+0x214>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	4798      	blx	r3
	rtc_bckp_reg_alt_pad = MRT_getAltitude(hlps22hh.pressure_hPa);
 8002252:	4b2b      	ldr	r3, [pc, #172]	; (8002300 <MRT_waitForLaunch+0x214>)
 8002254:	edd3 7a00 	vldr	s15, [r3]
 8002258:	eeb0 0a67 	vmov.f32	s0, s15
 800225c:	f001 fcf0 	bl	8003c40 <MRT_getAltitude>
 8002260:	eef0 7a40 	vmov.f32	s15, s0
 8002264:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002268:	ee17 2a90 	vmov	r2, s15
 800226c:	4b25      	ldr	r3, [pc, #148]	; (8002304 <MRT_waitForLaunch+0x218>)
 800226e:	601a      	str	r2, [r3, #0]
	MRT_RTC_setBackupReg(FC_STATE_ALT_PAD, rtc_bckp_reg_alt_pad);
 8002270:	4b24      	ldr	r3, [pc, #144]	; (8002304 <MRT_waitForLaunch+0x218>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4619      	mov	r1, r3
 8002276:	2009      	movs	r0, #9
 8002278:	f000 ffdc 	bl	8003234 <MRT_RTC_setBackupReg>
	rtc_bckp_reg_pad_time = 100*prev_min + prev_sec;
 800227c:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <MRT_waitForLaunch+0x1dc>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	461a      	mov	r2, r3
 8002282:	2364      	movs	r3, #100	; 0x64
 8002284:	fb03 f302 	mul.w	r3, r3, r2
 8002288:	4a10      	ldr	r2, [pc, #64]	; (80022cc <MRT_waitForLaunch+0x1e0>)
 800228a:	7812      	ldrb	r2, [r2, #0]
 800228c:	4413      	add	r3, r2
 800228e:	461a      	mov	r2, r3
 8002290:	4b1d      	ldr	r3, [pc, #116]	; (8002308 <MRT_waitForLaunch+0x21c>)
 8002292:	601a      	str	r2, [r3, #0]
	MRT_RTC_setBackupReg(FC_PAD_TIME, rtc_bckp_reg_pad_time);
 8002294:	4b1c      	ldr	r3, [pc, #112]	; (8002308 <MRT_waitForLaunch+0x21c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4619      	mov	r1, r3
 800229a:	200a      	movs	r0, #10
 800229c:	f000 ffca 	bl	8003234 <MRT_RTC_setBackupReg>
}
 80022a0:	bf00      	nop
 80022a2:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bdb0      	pop	{r4, r5, r7, pc}
 80022aa:	bf00      	nop
 80022ac:	08020b2c 	.word	0x08020b2c
 80022b0:	40020800 	.word	0x40020800
 80022b4:	20008760 	.word	0x20008760
 80022b8:	20000358 	.word	0x20000358
 80022bc:	2000876c 	.word	0x2000876c
 80022c0:	2000036c 	.word	0x2000036c
 80022c4:	200003fd 	.word	0x200003fd
 80022c8:	200003fe 	.word	0x200003fe
 80022cc:	200003ff 	.word	0x200003ff
 80022d0:	20000400 	.word	0x20000400
 80022d4:	20009778 	.word	0x20009778
 80022d8:	20009774 	.word	0x20009774
 80022dc:	20009772 	.word	0x20009772
 80022e0:	08020b60 	.word	0x08020b60
 80022e4:	200090e8 	.word	0x200090e8
 80022e8:	200094e0 	.word	0x200094e0
 80022ec:	20009740 	.word	0x20009740
 80022f0:	200094e4 	.word	0x200094e4
 80022f4:	200003fc 	.word	0x200003fc
 80022f8:	200003a8 	.word	0x200003a8
 80022fc:	200003ec 	.word	0x200003ec
 8002300:	20000558 	.word	0x20000558
 8002304:	200003bc 	.word	0x200003bc
 8002308:	200003c0 	.word	0x200003c0

0800230c <MRT_checkThreadStates>:


void MRT_checkThreadStates(void){
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
	  //Check each thread state
	  #if THREAD_KEEPER

	  osThreadState_t thread_state;

	  for (int i=0; i < NUMBER_OF_THREADS;i++){
 8002312:	2300      	movs	r3, #0
 8002314:	607b      	str	r3, [r7, #4]
 8002316:	e055      	b.n	80023c4 <MRT_checkThreadStates+0xb8>

		  thread_state = osThreadGetState(threadsID[i]);
 8002318:	4a2e      	ldr	r2, [pc, #184]	; (80023d4 <MRT_checkThreadStates+0xc8>)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002320:	4618      	mov	r0, r3
 8002322:	f013 fd31 	bl	8015d88 <osThreadGetState>
 8002326:	6038      	str	r0, [r7, #0]

		  if (thread_state == osThreadInactive ||
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d005      	beq.n	800233a <MRT_checkThreadStates+0x2e>
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	2b03      	cmp	r3, #3
 8002332:	d002      	beq.n	800233a <MRT_checkThreadStates+0x2e>
			  thread_state == osThreadBlocked  ||
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	2b04      	cmp	r3, #4
 8002338:	d128      	bne.n	800238c <MRT_checkThreadStates+0x80>
			  thread_state == osThreadTerminated){

			  //Ejection thread
			  if (i==1 && ejection_stage_flag < LANDED){
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d10a      	bne.n	8002356 <MRT_checkThreadStates+0x4a>
 8002340:	4b25      	ldr	r3, [pc, #148]	; (80023d8 <MRT_checkThreadStates+0xcc>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	2b03      	cmp	r3, #3
 8002346:	d806      	bhi.n	8002356 <MRT_checkThreadStates+0x4a>
				 osThreadResume(threadsID[i]);
 8002348:	4a22      	ldr	r2, [pc, #136]	; (80023d4 <MRT_checkThreadStates+0xc8>)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002350:	4618      	mov	r0, r3
 8002352:	f013 fd55 	bl	8015e00 <osThreadResume>
			  }

			  //Propulsion thread
			  if (i==4 && (apogee_flag || ejection_stage_flag >= DROGUE_DESCENT)){
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2b04      	cmp	r3, #4
 800235a:	d10f      	bne.n	800237c <MRT_checkThreadStates+0x70>
 800235c:	4b1f      	ldr	r3, [pc, #124]	; (80023dc <MRT_checkThreadStates+0xd0>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d103      	bne.n	800236c <MRT_checkThreadStates+0x60>
 8002364:	4b1c      	ldr	r3, [pc, #112]	; (80023d8 <MRT_checkThreadStates+0xcc>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d907      	bls.n	800237c <MRT_checkThreadStates+0x70>
				  osThreadTerminate(threadsID[i]);
 800236c:	4a19      	ldr	r2, [pc, #100]	; (80023d4 <MRT_checkThreadStates+0xc8>)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002374:	4618      	mov	r0, r3
 8002376:	f013 fd6a 	bl	8015e4e <osThreadTerminate>
				  continue;
 800237a:	e020      	b.n	80023be <MRT_checkThreadStates+0xb2>
			  }
			  else {
				 //Resume otherwise
				 osThreadResume(threadsID[i]);
 800237c:	4a15      	ldr	r2, [pc, #84]	; (80023d4 <MRT_checkThreadStates+0xc8>)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002384:	4618      	mov	r0, r3
 8002386:	f013 fd3b 	bl	8015e00 <osThreadResume>
			  if (i==4 && (apogee_flag || ejection_stage_flag >= DROGUE_DESCENT)){
 800238a:	e018      	b.n	80023be <MRT_checkThreadStates+0xb2>
			  }
		  }

		  else if (thread_state == osThreadError){
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002392:	d114      	bne.n	80023be <MRT_checkThreadStates+0xb2>
			  //If it's the propulsion thread
			  if (i==4 && (apogee_flag || ejection_stage_flag >= DROGUE_DESCENT)){
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b04      	cmp	r3, #4
 8002398:	d10f      	bne.n	80023ba <MRT_checkThreadStates+0xae>
 800239a:	4b10      	ldr	r3, [pc, #64]	; (80023dc <MRT_checkThreadStates+0xd0>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d103      	bne.n	80023aa <MRT_checkThreadStates+0x9e>
 80023a2:	4b0d      	ldr	r3, [pc, #52]	; (80023d8 <MRT_checkThreadStates+0xcc>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d907      	bls.n	80023ba <MRT_checkThreadStates+0xae>
				  osThreadTerminate(threadsID[i]);
 80023aa:	4a0a      	ldr	r2, [pc, #40]	; (80023d4 <MRT_checkThreadStates+0xc8>)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f013 fd4b 	bl	8015e4e <osThreadTerminate>
				  continue;
 80023b8:	e001      	b.n	80023be <MRT_checkThreadStates+0xb2>
			  }
			  else{
				 //Reset otherwise
				 NVIC_SystemReset();
 80023ba:	f7ff f937 	bl	800162c <__NVIC_SystemReset>
	  for (int i=0; i < NUMBER_OF_THREADS;i++){
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	3301      	adds	r3, #1
 80023c2:	607b      	str	r3, [r7, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	dda6      	ble.n	8002318 <MRT_checkThreadStates+0xc>
		  else if (thread_state == osThreadReserved){ TODO not sure what is this state
		  }
		  */
	  }
	  #endif
}
 80023ca:	bf00      	nop
 80023cc:	bf00      	nop
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	20008694 	.word	0x20008694
 80023d8:	200003fc 	.word	0x200003fc
 80023dc:	200003fb 	.word	0x200003fb

080023e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b08e      	sub	sp, #56	; 0x38
 80023e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	605a      	str	r2, [r3, #4]
 80023f0:	609a      	str	r2, [r3, #8]
 80023f2:	60da      	str	r2, [r3, #12]
 80023f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	623b      	str	r3, [r7, #32]
 80023fa:	4bb5      	ldr	r3, [pc, #724]	; (80026d0 <MX_GPIO_Init+0x2f0>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	4ab4      	ldr	r2, [pc, #720]	; (80026d0 <MX_GPIO_Init+0x2f0>)
 8002400:	f043 0310 	orr.w	r3, r3, #16
 8002404:	6313      	str	r3, [r2, #48]	; 0x30
 8002406:	4bb2      	ldr	r3, [pc, #712]	; (80026d0 <MX_GPIO_Init+0x2f0>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	f003 0310 	and.w	r3, r3, #16
 800240e:	623b      	str	r3, [r7, #32]
 8002410:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	61fb      	str	r3, [r7, #28]
 8002416:	4bae      	ldr	r3, [pc, #696]	; (80026d0 <MX_GPIO_Init+0x2f0>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	4aad      	ldr	r2, [pc, #692]	; (80026d0 <MX_GPIO_Init+0x2f0>)
 800241c:	f043 0304 	orr.w	r3, r3, #4
 8002420:	6313      	str	r3, [r2, #48]	; 0x30
 8002422:	4bab      	ldr	r3, [pc, #684]	; (80026d0 <MX_GPIO_Init+0x2f0>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	f003 0304 	and.w	r3, r3, #4
 800242a:	61fb      	str	r3, [r7, #28]
 800242c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800242e:	2300      	movs	r3, #0
 8002430:	61bb      	str	r3, [r7, #24]
 8002432:	4ba7      	ldr	r3, [pc, #668]	; (80026d0 <MX_GPIO_Init+0x2f0>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	4aa6      	ldr	r2, [pc, #664]	; (80026d0 <MX_GPIO_Init+0x2f0>)
 8002438:	f043 0320 	orr.w	r3, r3, #32
 800243c:	6313      	str	r3, [r2, #48]	; 0x30
 800243e:	4ba4      	ldr	r3, [pc, #656]	; (80026d0 <MX_GPIO_Init+0x2f0>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	f003 0320 	and.w	r3, r3, #32
 8002446:	61bb      	str	r3, [r7, #24]
 8002448:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	617b      	str	r3, [r7, #20]
 800244e:	4ba0      	ldr	r3, [pc, #640]	; (80026d0 <MX_GPIO_Init+0x2f0>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	4a9f      	ldr	r2, [pc, #636]	; (80026d0 <MX_GPIO_Init+0x2f0>)
 8002454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002458:	6313      	str	r3, [r2, #48]	; 0x30
 800245a:	4b9d      	ldr	r3, [pc, #628]	; (80026d0 <MX_GPIO_Init+0x2f0>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002462:	617b      	str	r3, [r7, #20]
 8002464:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	613b      	str	r3, [r7, #16]
 800246a:	4b99      	ldr	r3, [pc, #612]	; (80026d0 <MX_GPIO_Init+0x2f0>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	4a98      	ldr	r2, [pc, #608]	; (80026d0 <MX_GPIO_Init+0x2f0>)
 8002470:	f043 0301 	orr.w	r3, r3, #1
 8002474:	6313      	str	r3, [r2, #48]	; 0x30
 8002476:	4b96      	ldr	r3, [pc, #600]	; (80026d0 <MX_GPIO_Init+0x2f0>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	613b      	str	r3, [r7, #16]
 8002480:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	4b92      	ldr	r3, [pc, #584]	; (80026d0 <MX_GPIO_Init+0x2f0>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	4a91      	ldr	r2, [pc, #580]	; (80026d0 <MX_GPIO_Init+0x2f0>)
 800248c:	f043 0302 	orr.w	r3, r3, #2
 8002490:	6313      	str	r3, [r2, #48]	; 0x30
 8002492:	4b8f      	ldr	r3, [pc, #572]	; (80026d0 <MX_GPIO_Init+0x2f0>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	60bb      	str	r3, [r7, #8]
 80024a2:	4b8b      	ldr	r3, [pc, #556]	; (80026d0 <MX_GPIO_Init+0x2f0>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	4a8a      	ldr	r2, [pc, #552]	; (80026d0 <MX_GPIO_Init+0x2f0>)
 80024a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024ac:	6313      	str	r3, [r2, #48]	; 0x30
 80024ae:	4b88      	ldr	r3, [pc, #544]	; (80026d0 <MX_GPIO_Init+0x2f0>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b6:	60bb      	str	r3, [r7, #8]
 80024b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	607b      	str	r3, [r7, #4]
 80024be:	4b84      	ldr	r3, [pc, #528]	; (80026d0 <MX_GPIO_Init+0x2f0>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	4a83      	ldr	r2, [pc, #524]	; (80026d0 <MX_GPIO_Init+0x2f0>)
 80024c4:	f043 0308 	orr.w	r3, r3, #8
 80024c8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ca:	4b81      	ldr	r3, [pc, #516]	; (80026d0 <MX_GPIO_Init+0x2f0>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	607b      	str	r3, [r7, #4]
 80024d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 80024d6:	2200      	movs	r2, #0
 80024d8:	f248 4184 	movw	r1, #33924	; 0x8484
 80024dc:	487d      	ldr	r0, [pc, #500]	; (80026d4 <MX_GPIO_Init+0x2f4>)
 80024de:	f00a ff1f 	bl	800d320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80024e2:	2201      	movs	r2, #1
 80024e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024e8:	487b      	ldr	r0, [pc, #492]	; (80026d8 <MX_GPIO_Init+0x2f8>)
 80024ea:	f00a ff19 	bl	800d320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 80024ee:	2200      	movs	r2, #0
 80024f0:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80024f4:	4879      	ldr	r0, [pc, #484]	; (80026dc <MX_GPIO_Init+0x2fc>)
 80024f6:	f00a ff13 	bl	800d320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_LEDF_GPIO_Port, OUT_LEDF_Pin, GPIO_PIN_RESET);
 80024fa:	2200      	movs	r2, #0
 80024fc:	2108      	movs	r1, #8
 80024fe:	4878      	ldr	r0, [pc, #480]	; (80026e0 <MX_GPIO_Init+0x300>)
 8002500:	f00a ff0e 	bl	800d320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin, GPIO_PIN_RESET);
 8002504:	2200      	movs	r2, #0
 8002506:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800250a:	4873      	ldr	r0, [pc, #460]	; (80026d8 <MX_GPIO_Init+0x2f8>)
 800250c:	f00a ff08 	bl	800d320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 8002510:	2200      	movs	r2, #0
 8002512:	f645 2126 	movw	r1, #23078	; 0x5a26
 8002516:	4873      	ldr	r0, [pc, #460]	; (80026e4 <MX_GPIO_Init+0x304>)
 8002518:	f00a ff02 	bl	800d320 <HAL_GPIO_WritePin>
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_SX_CS_Pin|GPIO_PIN_8|POWER_ON_EXT_LED_Pin, GPIO_PIN_RESET);
 800251c:	2200      	movs	r2, #0
 800251e:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 8002522:	4871      	ldr	r0, [pc, #452]	; (80026e8 <MX_GPIO_Init+0x308>)
 8002524:	f00a fefc 	bl	800d320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8002528:	2200      	movs	r2, #0
 800252a:	f44f 41f9 	mov.w	r1, #31872	; 0x7c80
 800252e:	486f      	ldr	r0, [pc, #444]	; (80026ec <MX_GPIO_Init+0x30c>)
 8002530:	f00a fef6 	bl	800d320 <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|OUT_VR_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin, GPIO_PIN_SET);
 8002534:	2201      	movs	r2, #1
 8002536:	2170      	movs	r1, #112	; 0x70
 8002538:	486c      	ldr	r0, [pc, #432]	; (80026ec <MX_GPIO_Init+0x30c>)
 800253a:	f00a fef1 	bl	800d320 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin;
 800253e:	f248 4384 	movw	r3, #33924	; 0x8484
 8002542:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002544:	2301      	movs	r3, #1
 8002546:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002548:	2300      	movs	r3, #0
 800254a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800254c:	2300      	movs	r3, #0
 800254e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002554:	4619      	mov	r1, r3
 8002556:	485f      	ldr	r0, [pc, #380]	; (80026d4 <MX_GPIO_Init+0x2f4>)
 8002558:	f00a fd1e 	bl	800cf98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800255c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002560:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002562:	2301      	movs	r3, #1
 8002564:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002566:	2301      	movs	r3, #1
 8002568:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256a:	2300      	movs	r3, #0
 800256c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 800256e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002572:	4619      	mov	r1, r3
 8002574:	4858      	ldr	r0, [pc, #352]	; (80026d8 <MX_GPIO_Init+0x2f8>)
 8002576:	f00a fd0f 	bl	800cf98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 800257a:	2301      	movs	r3, #1
 800257c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800257e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002582:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002584:	2300      	movs	r3, #0
 8002586:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 8002588:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800258c:	4619      	mov	r1, r3
 800258e:	4853      	ldr	r0, [pc, #332]	; (80026dc <MX_GPIO_Init+0x2fc>)
 8002590:	f00a fd02 	bl	800cf98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin;
 8002594:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8002598:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800259a:	2301      	movs	r3, #1
 800259c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259e:	2300      	movs	r3, #0
 80025a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a2:	2300      	movs	r3, #0
 80025a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025aa:	4619      	mov	r1, r3
 80025ac:	484b      	ldr	r0, [pc, #300]	; (80026dc <MX_GPIO_Init+0x2fc>)
 80025ae:	f00a fcf3 	bl	800cf98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUT_LEDF_Pin;
 80025b2:	2308      	movs	r3, #8
 80025b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025b6:	2301      	movs	r3, #1
 80025b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025be:	2300      	movs	r3, #0
 80025c0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OUT_LEDF_GPIO_Port, &GPIO_InitStruct);
 80025c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025c6:	4619      	mov	r1, r3
 80025c8:	4845      	ldr	r0, [pc, #276]	; (80026e0 <MX_GPIO_Init+0x300>)
 80025ca:	f00a fce5 	bl	800cf98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 80025ce:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 80025d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025d4:	2300      	movs	r3, #0
 80025d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d8:	2300      	movs	r3, #0
 80025da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025e0:	4619      	mov	r1, r3
 80025e2:	483e      	ldr	r0, [pc, #248]	; (80026dc <MX_GPIO_Init+0x2fc>)
 80025e4:	f00a fcd8 	bl	800cf98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 80025e8:	2302      	movs	r3, #2
 80025ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025ec:	2300      	movs	r3, #0
 80025ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f0:	2300      	movs	r3, #0
 80025f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 80025f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025f8:	4619      	mov	r1, r3
 80025fa:	483b      	ldr	r0, [pc, #236]	; (80026e8 <MX_GPIO_Init+0x308>)
 80025fc:	f00a fccc 	bl	800cf98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_2_Pin;
 8002600:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002604:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002606:	2300      	movs	r3, #0
 8002608:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260a:	2300      	movs	r3, #0
 800260c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_PyroValve_Cont_2_GPIO_Port, &GPIO_InitStruct);
 800260e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002612:	4619      	mov	r1, r3
 8002614:	4830      	ldr	r0, [pc, #192]	; (80026d8 <MX_GPIO_Init+0x2f8>)
 8002616:	f00a fcbf 	bl	800cf98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin;
 800261a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800261e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002620:	2301      	movs	r3, #1
 8002622:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002624:	2300      	movs	r3, #0
 8002626:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002628:	2300      	movs	r3, #0
 800262a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800262c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002630:	4619      	mov	r1, r3
 8002632:	4829      	ldr	r0, [pc, #164]	; (80026d8 <MX_GPIO_Init+0x2f8>)
 8002634:	f00a fcb0 	bl	800cf98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_1_Pin|SX_BUSY_Pin|SX_DIO_Pin|IN_EJ_Main_Cont_Pin
 8002638:	f242 4319 	movw	r3, #9241	; 0x2419
 800263c:	627b      	str	r3, [r7, #36]	; 0x24
                          |IN_EJ_Drogue_Cont_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800263e:	2300      	movs	r3, #0
 8002640:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002642:	2300      	movs	r3, #0
 8002644:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800264a:	4619      	mov	r1, r3
 800264c:	4825      	ldr	r0, [pc, #148]	; (80026e4 <MX_GPIO_Init+0x304>)
 800264e:	f00a fca3 	bl	800cf98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 8002652:	f645 2326 	movw	r3, #23078	; 0x5a26
 8002656:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002658:	2301      	movs	r3, #1
 800265a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265c:	2300      	movs	r3, #0
 800265e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002660:	2300      	movs	r3, #0
 8002662:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002664:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002668:	4619      	mov	r1, r3
 800266a:	481e      	ldr	r0, [pc, #120]	; (80026e4 <MX_GPIO_Init+0x304>)
 800266c:	f00a fc94 	bl	800cf98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = PAYLOAD_I2C_EN_Pin|IN_XTend_Continuity_Pin;
 8002670:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002674:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002676:	2300      	movs	r3, #0
 8002678:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267a:	2300      	movs	r3, #0
 800267c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800267e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002682:	4619      	mov	r1, r3
 8002684:	4813      	ldr	r0, [pc, #76]	; (80026d4 <MX_GPIO_Init+0x2f4>)
 8002686:	f00a fc87 	bl	800cf98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB8 PBPin */
  GPIO_InitStruct.Pin = SPI2_SX_CS_Pin|GPIO_PIN_8|POWER_ON_EXT_LED_Pin;
 800268a:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 800268e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002690:	2301      	movs	r3, #1
 8002692:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002694:	2300      	movs	r3, #0
 8002696:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002698:	2300      	movs	r3, #0
 800269a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800269c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026a0:	4619      	mov	r1, r3
 80026a2:	4811      	ldr	r0, [pc, #68]	; (80026e8 <MX_GPIO_Init+0x308>)
 80026a4:	f00a fc78 	bl	800cf98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 80026a8:	f44f 43f9 	mov.w	r3, #31872	; 0x7c80
 80026ac:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|OUT_VR_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026ae:	2301      	movs	r3, #1
 80026b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b2:	2300      	movs	r3, #0
 80026b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b6:	2300      	movs	r3, #0
 80026b8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026be:	4619      	mov	r1, r3
 80026c0:	480a      	ldr	r0, [pc, #40]	; (80026ec <MX_GPIO_Init+0x30c>)
 80026c2:	f00a fc69 	bl	800cf98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 80026c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026cc:	2300      	movs	r3, #0
 80026ce:	e00f      	b.n	80026f0 <MX_GPIO_Init+0x310>
 80026d0:	40023800 	.word	0x40023800
 80026d4:	40021000 	.word	0x40021000
 80026d8:	40021400 	.word	0x40021400
 80026dc:	40020800 	.word	0x40020800
 80026e0:	40020000 	.word	0x40020000
 80026e4:	40021800 	.word	0x40021800
 80026e8:	40020400 	.word	0x40020400
 80026ec:	40020c00 	.word	0x40020c00
 80026f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f2:	2300      	movs	r3, #0
 80026f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 80026f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026fa:	4619      	mov	r1, r3
 80026fc:	4815      	ldr	r0, [pc, #84]	; (8002754 <MX_GPIO_Init+0x374>)
 80026fe:	f00a fc4b 	bl	800cf98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_LSM6DSR_INT1_Pin;
 8002702:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002706:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002708:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800270c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270e:	2300      	movs	r3, #0
 8002710:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002716:	4619      	mov	r1, r3
 8002718:	480f      	ldr	r0, [pc, #60]	; (8002758 <MX_GPIO_Init+0x378>)
 800271a:	f00a fc3d 	bl	800cf98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin;
 800271e:	2370      	movs	r3, #112	; 0x70
 8002720:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002722:	2301      	movs	r3, #1
 8002724:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002726:	2301      	movs	r3, #1
 8002728:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272a:	2300      	movs	r3, #0
 800272c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800272e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002732:	4619      	mov	r1, r3
 8002734:	4807      	ldr	r0, [pc, #28]	; (8002754 <MX_GPIO_Init+0x374>)
 8002736:	f00a fc2f 	bl	800cf98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800273a:	2200      	movs	r2, #0
 800273c:	2100      	movs	r1, #0
 800273e:	2006      	movs	r0, #6
 8002740:	f00a fbf2 	bl	800cf28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002744:	2006      	movs	r0, #6
 8002746:	f00a fc0b 	bl	800cf60 <HAL_NVIC_EnableIRQ>

}
 800274a:	bf00      	nop
 800274c:	3738      	adds	r7, #56	; 0x38
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40020c00 	.word	0x40020c00
 8002758:	40021800 	.word	0x40021800

0800275c <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002760:	4b1b      	ldr	r3, [pc, #108]	; (80027d0 <MX_I2C2_Init+0x74>)
 8002762:	4a1c      	ldr	r2, [pc, #112]	; (80027d4 <MX_I2C2_Init+0x78>)
 8002764:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002766:	4b1a      	ldr	r3, [pc, #104]	; (80027d0 <MX_I2C2_Init+0x74>)
 8002768:	4a1b      	ldr	r2, [pc, #108]	; (80027d8 <MX_I2C2_Init+0x7c>)
 800276a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800276c:	4b18      	ldr	r3, [pc, #96]	; (80027d0 <MX_I2C2_Init+0x74>)
 800276e:	2200      	movs	r2, #0
 8002770:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002772:	4b17      	ldr	r3, [pc, #92]	; (80027d0 <MX_I2C2_Init+0x74>)
 8002774:	2200      	movs	r2, #0
 8002776:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002778:	4b15      	ldr	r3, [pc, #84]	; (80027d0 <MX_I2C2_Init+0x74>)
 800277a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800277e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002780:	4b13      	ldr	r3, [pc, #76]	; (80027d0 <MX_I2C2_Init+0x74>)
 8002782:	2200      	movs	r2, #0
 8002784:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002786:	4b12      	ldr	r3, [pc, #72]	; (80027d0 <MX_I2C2_Init+0x74>)
 8002788:	2200      	movs	r2, #0
 800278a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800278c:	4b10      	ldr	r3, [pc, #64]	; (80027d0 <MX_I2C2_Init+0x74>)
 800278e:	2200      	movs	r2, #0
 8002790:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002792:	4b0f      	ldr	r3, [pc, #60]	; (80027d0 <MX_I2C2_Init+0x74>)
 8002794:	2200      	movs	r2, #0
 8002796:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002798:	480d      	ldr	r0, [pc, #52]	; (80027d0 <MX_I2C2_Init+0x74>)
 800279a:	f00a fdf3 	bl	800d384 <HAL_I2C_Init>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80027a4:	f000 f9e8 	bl	8002b78 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80027a8:	2100      	movs	r1, #0
 80027aa:	4809      	ldr	r0, [pc, #36]	; (80027d0 <MX_I2C2_Init+0x74>)
 80027ac:	f00b fddf 	bl	800e36e <HAL_I2CEx_ConfigAnalogFilter>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80027b6:	f000 f9df 	bl	8002b78 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80027ba:	2100      	movs	r1, #0
 80027bc:	4804      	ldr	r0, [pc, #16]	; (80027d0 <MX_I2C2_Init+0x74>)
 80027be:	f00b fe12 	bl	800e3e6 <HAL_I2CEx_ConfigDigitalFilter>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80027c8:	f000 f9d6 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80027cc:	bf00      	nop
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	2000870c 	.word	0x2000870c
 80027d4:	40005800 	.word	0x40005800
 80027d8:	000186a0 	.word	0x000186a0

080027dc <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80027e0:	4b1b      	ldr	r3, [pc, #108]	; (8002850 <MX_I2C3_Init+0x74>)
 80027e2:	4a1c      	ldr	r2, [pc, #112]	; (8002854 <MX_I2C3_Init+0x78>)
 80027e4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80027e6:	4b1a      	ldr	r3, [pc, #104]	; (8002850 <MX_I2C3_Init+0x74>)
 80027e8:	4a1b      	ldr	r2, [pc, #108]	; (8002858 <MX_I2C3_Init+0x7c>)
 80027ea:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80027ec:	4b18      	ldr	r3, [pc, #96]	; (8002850 <MX_I2C3_Init+0x74>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80027f2:	4b17      	ldr	r3, [pc, #92]	; (8002850 <MX_I2C3_Init+0x74>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027f8:	4b15      	ldr	r3, [pc, #84]	; (8002850 <MX_I2C3_Init+0x74>)
 80027fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027fe:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002800:	4b13      	ldr	r3, [pc, #76]	; (8002850 <MX_I2C3_Init+0x74>)
 8002802:	2200      	movs	r2, #0
 8002804:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002806:	4b12      	ldr	r3, [pc, #72]	; (8002850 <MX_I2C3_Init+0x74>)
 8002808:	2200      	movs	r2, #0
 800280a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800280c:	4b10      	ldr	r3, [pc, #64]	; (8002850 <MX_I2C3_Init+0x74>)
 800280e:	2200      	movs	r2, #0
 8002810:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002812:	4b0f      	ldr	r3, [pc, #60]	; (8002850 <MX_I2C3_Init+0x74>)
 8002814:	2200      	movs	r2, #0
 8002816:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002818:	480d      	ldr	r0, [pc, #52]	; (8002850 <MX_I2C3_Init+0x74>)
 800281a:	f00a fdb3 	bl	800d384 <HAL_I2C_Init>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002824:	f000 f9a8 	bl	8002b78 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002828:	2100      	movs	r1, #0
 800282a:	4809      	ldr	r0, [pc, #36]	; (8002850 <MX_I2C3_Init+0x74>)
 800282c:	f00b fd9f 	bl	800e36e <HAL_I2CEx_ConfigAnalogFilter>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8002836:	f000 f99f 	bl	8002b78 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800283a:	2100      	movs	r1, #0
 800283c:	4804      	ldr	r0, [pc, #16]	; (8002850 <MX_I2C3_Init+0x74>)
 800283e:	f00b fdd2 	bl	800e3e6 <HAL_I2CEx_ConfigDigitalFilter>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8002848:	f000 f996 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800284c:	bf00      	nop
 800284e:	bd80      	pop	{r7, pc}
 8002850:	200086b8 	.word	0x200086b8
 8002854:	40005c00 	.word	0x40005c00
 8002858:	000186a0 	.word	0x000186a0

0800285c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b08c      	sub	sp, #48	; 0x30
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002864:	f107 031c 	add.w	r3, r7, #28
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	609a      	str	r2, [r3, #8]
 8002870:	60da      	str	r2, [r3, #12]
 8002872:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a42      	ldr	r2, [pc, #264]	; (8002984 <HAL_I2C_MspInit+0x128>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d12d      	bne.n	80028da <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	61bb      	str	r3, [r7, #24]
 8002882:	4b41      	ldr	r3, [pc, #260]	; (8002988 <HAL_I2C_MspInit+0x12c>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	4a40      	ldr	r2, [pc, #256]	; (8002988 <HAL_I2C_MspInit+0x12c>)
 8002888:	f043 0302 	orr.w	r3, r3, #2
 800288c:	6313      	str	r3, [r2, #48]	; 0x30
 800288e:	4b3e      	ldr	r3, [pc, #248]	; (8002988 <HAL_I2C_MspInit+0x12c>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	61bb      	str	r3, [r7, #24]
 8002898:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800289a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800289e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028a0:	2312      	movs	r3, #18
 80028a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028a4:	2301      	movs	r3, #1
 80028a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a8:	2303      	movs	r3, #3
 80028aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80028ac:	2304      	movs	r3, #4
 80028ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028b0:	f107 031c 	add.w	r3, r7, #28
 80028b4:	4619      	mov	r1, r3
 80028b6:	4835      	ldr	r0, [pc, #212]	; (800298c <HAL_I2C_MspInit+0x130>)
 80028b8:	f00a fb6e 	bl	800cf98 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80028bc:	2300      	movs	r3, #0
 80028be:	617b      	str	r3, [r7, #20]
 80028c0:	4b31      	ldr	r3, [pc, #196]	; (8002988 <HAL_I2C_MspInit+0x12c>)
 80028c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c4:	4a30      	ldr	r2, [pc, #192]	; (8002988 <HAL_I2C_MspInit+0x12c>)
 80028c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028ca:	6413      	str	r3, [r2, #64]	; 0x40
 80028cc:	4b2e      	ldr	r3, [pc, #184]	; (8002988 <HAL_I2C_MspInit+0x12c>)
 80028ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028d4:	617b      	str	r3, [r7, #20]
 80028d6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80028d8:	e050      	b.n	800297c <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a2c      	ldr	r2, [pc, #176]	; (8002990 <HAL_I2C_MspInit+0x134>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d14b      	bne.n	800297c <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028e4:	2300      	movs	r3, #0
 80028e6:	613b      	str	r3, [r7, #16]
 80028e8:	4b27      	ldr	r3, [pc, #156]	; (8002988 <HAL_I2C_MspInit+0x12c>)
 80028ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ec:	4a26      	ldr	r2, [pc, #152]	; (8002988 <HAL_I2C_MspInit+0x12c>)
 80028ee:	f043 0304 	orr.w	r3, r3, #4
 80028f2:	6313      	str	r3, [r2, #48]	; 0x30
 80028f4:	4b24      	ldr	r3, [pc, #144]	; (8002988 <HAL_I2C_MspInit+0x12c>)
 80028f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f8:	f003 0304 	and.w	r3, r3, #4
 80028fc:	613b      	str	r3, [r7, #16]
 80028fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002900:	2300      	movs	r3, #0
 8002902:	60fb      	str	r3, [r7, #12]
 8002904:	4b20      	ldr	r3, [pc, #128]	; (8002988 <HAL_I2C_MspInit+0x12c>)
 8002906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002908:	4a1f      	ldr	r2, [pc, #124]	; (8002988 <HAL_I2C_MspInit+0x12c>)
 800290a:	f043 0301 	orr.w	r3, r3, #1
 800290e:	6313      	str	r3, [r2, #48]	; 0x30
 8002910:	4b1d      	ldr	r3, [pc, #116]	; (8002988 <HAL_I2C_MspInit+0x12c>)
 8002912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800291c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002920:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002922:	2312      	movs	r3, #18
 8002924:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002926:	2301      	movs	r3, #1
 8002928:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800292a:	2303      	movs	r3, #3
 800292c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800292e:	2304      	movs	r3, #4
 8002930:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002932:	f107 031c 	add.w	r3, r7, #28
 8002936:	4619      	mov	r1, r3
 8002938:	4816      	ldr	r0, [pc, #88]	; (8002994 <HAL_I2C_MspInit+0x138>)
 800293a:	f00a fb2d 	bl	800cf98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800293e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002944:	2312      	movs	r3, #18
 8002946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002948:	2301      	movs	r3, #1
 800294a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800294c:	2303      	movs	r3, #3
 800294e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002950:	2304      	movs	r3, #4
 8002952:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002954:	f107 031c 	add.w	r3, r7, #28
 8002958:	4619      	mov	r1, r3
 800295a:	480f      	ldr	r0, [pc, #60]	; (8002998 <HAL_I2C_MspInit+0x13c>)
 800295c:	f00a fb1c 	bl	800cf98 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002960:	2300      	movs	r3, #0
 8002962:	60bb      	str	r3, [r7, #8]
 8002964:	4b08      	ldr	r3, [pc, #32]	; (8002988 <HAL_I2C_MspInit+0x12c>)
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	4a07      	ldr	r2, [pc, #28]	; (8002988 <HAL_I2C_MspInit+0x12c>)
 800296a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800296e:	6413      	str	r3, [r2, #64]	; 0x40
 8002970:	4b05      	ldr	r3, [pc, #20]	; (8002988 <HAL_I2C_MspInit+0x12c>)
 8002972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002974:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002978:	60bb      	str	r3, [r7, #8]
 800297a:	68bb      	ldr	r3, [r7, #8]
}
 800297c:	bf00      	nop
 800297e:	3730      	adds	r7, #48	; 0x30
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40005800 	.word	0x40005800
 8002988:	40023800 	.word	0x40023800
 800298c:	40020400 	.word	0x40020400
 8002990:	40005c00 	.word	0x40005c00
 8002994:	40020800 	.word	0x40020800
 8002998:	40020000 	.word	0x40020000

0800299c <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80029a0:	4b09      	ldr	r3, [pc, #36]	; (80029c8 <MX_IWDG_Init+0x2c>)
 80029a2:	4a0a      	ldr	r2, [pc, #40]	; (80029cc <MX_IWDG_Init+0x30>)
 80029a4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 80029a6:	4b08      	ldr	r3, [pc, #32]	; (80029c8 <MX_IWDG_Init+0x2c>)
 80029a8:	2204      	movs	r2, #4
 80029aa:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 2499;
 80029ac:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <MX_IWDG_Init+0x2c>)
 80029ae:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80029b2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80029b4:	4804      	ldr	r0, [pc, #16]	; (80029c8 <MX_IWDG_Init+0x2c>)
 80029b6:	f00b fd55 	bl	800e464 <HAL_IWDG_Init>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80029c0:	f000 f8da 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80029c4:	bf00      	nop
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	20008760 	.word	0x20008760
 80029cc:	40003000 	.word	0x40003000

080029d0 <main>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int main(void){
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
	MRT_STM_Init();
 80029d4:	f000 f89c 	bl	8002b10 <MRT_STM_Init>
	__HAL_DBGMCU_FREEZE_IWDG();	// pause IWDG and RTC during debugging
 80029d8:	4b0f      	ldr	r3, [pc, #60]	; (8002a18 <main+0x48>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	4a0e      	ldr	r2, [pc, #56]	; (8002a18 <main+0x48>)
 80029de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029e2:	6093      	str	r3, [r2, #8]
	__HAL_FREEZE_RTC_DBGMCU();
 80029e4:	4b0c      	ldr	r3, [pc, #48]	; (8002a18 <main+0x48>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	4a0b      	ldr	r2, [pc, #44]	; (8002a18 <main+0x48>)
 80029ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029ee:	6093      	str	r3, [r2, #8]
	println("\r\n\r\nSTM Init...OK");
 80029f0:	480a      	ldr	r0, [pc, #40]	; (8002a1c <main+0x4c>)
 80029f2:	f7fe fb6b 	bl	80010cc <println>

	//TODO I2C SENSORS (lsm and lps) SOMETIMES DON'T WANT TO WORK ANYMORE -> NEED TO RESET THE POWER (Enter quick standByMode?)
	//check hardfault_handler

	//Initialize the os
	MX_FREERTOS_Init();
 80029f6:	f7fe fea1 	bl	800173c <MX_FREERTOS_Init>

	//Starting the os
	println("\r\n/****Starting the OS****/\r\n");
 80029fa:	4809      	ldr	r0, [pc, #36]	; (8002a20 <main+0x50>)
 80029fc:	f7fe fb66 	bl	80010cc <println>
	osKernelStart();
 8002a00:	f013 f8fe 	bl	8015c00 <osKernelStart>

	println("SOMETHING WENT HORRIBLY WRONG, WAITING FOR WATCH DOG RESET");
 8002a04:	4807      	ldr	r0, [pc, #28]	; (8002a24 <main+0x54>)
 8002a06:	f7fe fb61 	bl	80010cc <println>
	HAL_IWDG_Refresh(&hiwdg);
 8002a0a:	4807      	ldr	r0, [pc, #28]	; (8002a28 <main+0x58>)
 8002a0c:	f00b fd6c 	bl	800e4e8 <HAL_IWDG_Refresh>
	MRT_Deinit();
 8002a10:	f7fe fc2a 	bl	8001268 <MRT_Deinit>
	while (1){}
 8002a14:	e7fe      	b.n	8002a14 <main+0x44>
 8002a16:	bf00      	nop
 8002a18:	e0042000 	.word	0xe0042000
 8002a1c:	08020b74 	.word	0x08020b74
 8002a20:	08020b88 	.word	0x08020b88
 8002a24:	08020ba8 	.word	0x08020ba8
 8002a28:	20008760 	.word	0x20008760

08002a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b094      	sub	sp, #80	; 0x50
 8002a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a32:	f107 0320 	add.w	r3, r7, #32
 8002a36:	2230      	movs	r2, #48	; 0x30
 8002a38:	2100      	movs	r1, #0
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f018 f81c 	bl	801aa78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a40:	f107 030c 	add.w	r3, r7, #12
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	605a      	str	r2, [r3, #4]
 8002a4a:	609a      	str	r2, [r3, #8]
 8002a4c:	60da      	str	r2, [r3, #12]
 8002a4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a50:	2300      	movs	r3, #0
 8002a52:	60bb      	str	r3, [r7, #8]
 8002a54:	4b2c      	ldr	r3, [pc, #176]	; (8002b08 <SystemClock_Config+0xdc>)
 8002a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a58:	4a2b      	ldr	r2, [pc, #172]	; (8002b08 <SystemClock_Config+0xdc>)
 8002a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a5e:	6413      	str	r3, [r2, #64]	; 0x40
 8002a60:	4b29      	ldr	r3, [pc, #164]	; (8002b08 <SystemClock_Config+0xdc>)
 8002a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a68:	60bb      	str	r3, [r7, #8]
 8002a6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	607b      	str	r3, [r7, #4]
 8002a70:	4b26      	ldr	r3, [pc, #152]	; (8002b0c <SystemClock_Config+0xe0>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a25      	ldr	r2, [pc, #148]	; (8002b0c <SystemClock_Config+0xe0>)
 8002a76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a7a:	6013      	str	r3, [r2, #0]
 8002a7c:	4b23      	ldr	r3, [pc, #140]	; (8002b0c <SystemClock_Config+0xe0>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a84:	607b      	str	r3, [r7, #4]
 8002a86:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002a88:	2309      	movs	r3, #9
 8002a8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a90:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002a92:	2301      	movs	r3, #1
 8002a94:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a96:	2302      	movs	r3, #2
 8002a98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002aa0:	2308      	movs	r3, #8
 8002aa2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002aa4:	23b4      	movs	r3, #180	; 0xb4
 8002aa6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002aac:	2303      	movs	r3, #3
 8002aae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ab0:	f107 0320 	add.w	r3, r7, #32
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f00b fdb5 	bl	800e624 <HAL_RCC_OscConfig>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002ac0:	f000 f85a 	bl	8002b78 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002ac4:	f00b fd5e 	bl	800e584 <HAL_PWREx_EnableOverDrive>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002ace:	f000 f853 	bl	8002b78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ad2:	230f      	movs	r3, #15
 8002ad4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ada:	2300      	movs	r3, #0
 8002adc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002ade:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002ae2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002ae4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002ae8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002aea:	f107 030c 	add.w	r3, r7, #12
 8002aee:	2105      	movs	r1, #5
 8002af0:	4618      	mov	r0, r3
 8002af2:	f00c f80f 	bl	800eb14 <HAL_RCC_ClockConfig>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002afc:	f000 f83c 	bl	8002b78 <Error_Handler>
  }
}
 8002b00:	bf00      	nop
 8002b02:	3750      	adds	r7, #80	; 0x50
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	40007000 	.word	0x40007000

08002b10 <MRT_STM_Init>:

/* USER CODE BEGIN 4 */

void MRT_STM_Init(void){
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
	HAL_Init();
 8002b14:	f009 fcb6 	bl	800c484 <HAL_Init>
	SystemClock_Config();
 8002b18:	f7ff ff88 	bl	8002a2c <SystemClock_Config>

	MX_GPIO_Init();
 8002b1c:	f7ff fc60 	bl	80023e0 <MX_GPIO_Init>
	MX_ADC1_Init();
 8002b20:	f7fe fcee 	bl	8001500 <MX_ADC1_Init>
	MX_I2C2_Init();
 8002b24:	f7ff fe1a 	bl	800275c <MX_I2C2_Init>
	MX_I2C3_Init();
 8002b28:	f7ff fe58 	bl	80027dc <MX_I2C3_Init>
	MX_SPI2_Init();
 8002b2c:	f000 fba0 	bl	8003270 <MX_SPI2_Init>
	MX_SPI4_Init();
 8002b30:	f000 fbd4 	bl	80032dc <MX_SPI4_Init>
	MX_SPI5_Init();
 8002b34:	f000 fc08 	bl	8003348 <MX_SPI5_Init>
	MX_TIM2_Init();
 8002b38:	f000 fe58 	bl	80037ec <MX_TIM2_Init>
	MX_UART8_Init();
 8002b3c:	f000 ff24 	bl	8003988 <MX_UART8_Init>
	MX_USART3_UART_Init();
 8002b40:	f000 ff4c 	bl	80039dc <MX_USART3_UART_Init>
	MX_USART6_UART_Init();
 8002b44:	f000 ff74 	bl	8003a30 <MX_USART6_UART_Init>
	MX_RTC_Init();
 8002b48:	f000 f81c 	bl	8002b84 <MX_RTC_Init>
	//MX_IWDG_Init(); TODO ADDED IN MRT_Init()
	MX_FATFS_Init();
 8002b4c:	f00f fbf6 	bl	801233c <MX_FATFS_Init>
}
 8002b50:	bf00      	nop
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a04      	ldr	r2, [pc, #16]	; (8002b74 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d101      	bne.n	8002b6a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002b66:	f009 fcaf 	bl	800c4c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002b6a:	bf00      	nop
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40001000 	.word	0x40001000

08002b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002b7c:	b672      	cpsid	i
}
 8002b7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b80:	e7fe      	b.n	8002b80 <Error_Handler+0x8>
	...

08002b84 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b090      	sub	sp, #64	; 0x40
 8002b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002b8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b8e:	2200      	movs	r2, #0
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	605a      	str	r2, [r3, #4]
 8002b94:	609a      	str	r2, [r3, #8]
 8002b96:	60da      	str	r2, [r3, #12]
 8002b98:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8002b9e:	463b      	mov	r3, r7
 8002ba0:	2228      	movs	r2, #40	; 0x28
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f017 ff67 	bl	801aa78 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002baa:	4b4b      	ldr	r3, [pc, #300]	; (8002cd8 <MX_RTC_Init+0x154>)
 8002bac:	4a4b      	ldr	r2, [pc, #300]	; (8002cdc <MX_RTC_Init+0x158>)
 8002bae:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002bb0:	4b49      	ldr	r3, [pc, #292]	; (8002cd8 <MX_RTC_Init+0x154>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002bb6:	4b48      	ldr	r3, [pc, #288]	; (8002cd8 <MX_RTC_Init+0x154>)
 8002bb8:	227f      	movs	r2, #127	; 0x7f
 8002bba:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002bbc:	4b46      	ldr	r3, [pc, #280]	; (8002cd8 <MX_RTC_Init+0x154>)
 8002bbe:	22ff      	movs	r2, #255	; 0xff
 8002bc0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002bc2:	4b45      	ldr	r3, [pc, #276]	; (8002cd8 <MX_RTC_Init+0x154>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002bc8:	4b43      	ldr	r3, [pc, #268]	; (8002cd8 <MX_RTC_Init+0x154>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002bce:	4b42      	ldr	r3, [pc, #264]	; (8002cd8 <MX_RTC_Init+0x154>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002bd4:	4840      	ldr	r0, [pc, #256]	; (8002cd8 <MX_RTC_Init+0x154>)
 8002bd6:	f00c fb87 	bl	800f2e8 <HAL_RTC_Init>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8002be0:	f7ff ffca 	bl	8002b78 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002be4:	2300      	movs	r3, #0
 8002be6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8002bea:	2300      	movs	r3, #0
 8002bec:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002bfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c02:	2201      	movs	r2, #1
 8002c04:	4619      	mov	r1, r3
 8002c06:	4834      	ldr	r0, [pc, #208]	; (8002cd8 <MX_RTC_Init+0x154>)
 8002c08:	f00c fbff 	bl	800f40a <HAL_RTC_SetTime>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8002c12:	f7ff ffb1 	bl	8002b78 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002c16:	2301      	movs	r3, #1
 8002c18:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8002c22:	2301      	movs	r3, #1
 8002c24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002c2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c32:	2201      	movs	r2, #1
 8002c34:	4619      	mov	r1, r3
 8002c36:	4828      	ldr	r0, [pc, #160]	; (8002cd8 <MX_RTC_Init+0x154>)
 8002c38:	f00c fd02 	bl	800f640 <HAL_RTC_SetDate>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8002c42:	f7ff ff99 	bl	8002b78 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002c46:	2300      	movs	r3, #0
 8002c48:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002c52:	2300      	movs	r3, #0
 8002c54:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002c56:	2300      	movs	r3, #0
 8002c58:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002c62:	2300      	movs	r3, #0
 8002c64:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002c66:	2300      	movs	r3, #0
 8002c68:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002c70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c74:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002c76:	463b      	mov	r3, r7
 8002c78:	2201      	movs	r2, #1
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4816      	ldr	r0, [pc, #88]	; (8002cd8 <MX_RTC_Init+0x154>)
 8002c7e:	f00c fdd5 	bl	800f82c <HAL_RTC_SetAlarm_IT>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8002c88:	f7ff ff76 	bl	8002b78 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8002c8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c90:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002c92:	463b      	mov	r3, r7
 8002c94:	2201      	movs	r2, #1
 8002c96:	4619      	mov	r1, r3
 8002c98:	480f      	ldr	r0, [pc, #60]	; (8002cd8 <MX_RTC_Init+0x154>)
 8002c9a:	f00c fdc7 	bl	800f82c <HAL_RTC_SetAlarm_IT>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8002ca4:	f7ff ff68 	bl	8002b78 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8002ca8:	4b0b      	ldr	r3, [pc, #44]	; (8002cd8 <MX_RTC_Init+0x154>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	4b09      	ldr	r3, [pc, #36]	; (8002cd8 <MX_RTC_Init+0x154>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002cb8:	60da      	str	r2, [r3, #12]
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	4806      	ldr	r0, [pc, #24]	; (8002cd8 <MX_RTC_Init+0x154>)
 8002cc0:	f00c ffc2 	bl	800fc48 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <MX_RTC_Init+0x14a>
  {
    Error_Handler();
 8002cca:	f7ff ff55 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002cce:	bf00      	nop
 8002cd0:	3740      	adds	r7, #64	; 0x40
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	2000876c 	.word	0x2000876c
 8002cdc:	40002800 	.word	0x40002800

08002ce0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b08e      	sub	sp, #56	; 0x38
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ce8:	f107 0308 	add.w	r3, r7, #8
 8002cec:	2230      	movs	r2, #48	; 0x30
 8002cee:	2100      	movs	r1, #0
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f017 fec1 	bl	801aa78 <memset>
  if(rtcHandle->Instance==RTC)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a14      	ldr	r2, [pc, #80]	; (8002d4c <HAL_RTC_MspInit+0x6c>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d121      	bne.n	8002d44 <HAL_RTC_MspInit+0x64>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002d00:	2320      	movs	r3, #32
 8002d02:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002d04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d08:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d0a:	f107 0308 	add.w	r3, r7, #8
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f00c f92c 	bl	800ef6c <HAL_RCCEx_PeriphCLKConfig>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002d1a:	f7ff ff2d 	bl	8002b78 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002d1e:	4b0c      	ldr	r3, [pc, #48]	; (8002d50 <HAL_RTC_MspInit+0x70>)
 8002d20:	2201      	movs	r2, #1
 8002d22:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002d24:	2200      	movs	r2, #0
 8002d26:	2100      	movs	r1, #0
 8002d28:	2003      	movs	r0, #3
 8002d2a:	f00a f8fd 	bl	800cf28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002d2e:	2003      	movs	r0, #3
 8002d30:	f00a f916 	bl	800cf60 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002d34:	2200      	movs	r2, #0
 8002d36:	2100      	movs	r1, #0
 8002d38:	2029      	movs	r0, #41	; 0x29
 8002d3a:	f00a f8f5 	bl	800cf28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002d3e:	2029      	movs	r0, #41	; 0x29
 8002d40:	f00a f90e 	bl	800cf60 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002d44:	bf00      	nop
 8002d46:	3738      	adds	r7, #56	; 0x38
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	40002800 	.word	0x40002800
 8002d50:	42470e3c 	.word	0x42470e3c

08002d54 <MRT_rtc_Init>:


//**************************************************//
//FUNCTIONS

void MRT_rtc_Init(void){
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
	println("\r\nMRT RTC Init");
 8002d58:	4817      	ldr	r0, [pc, #92]	; (8002db8 <MRT_rtc_Init+0x64>)
 8002d5a:	f7fe f9b7 	bl	80010cc <println>

	print("\tSetting RTC to previous time...");
 8002d5e:	4817      	ldr	r0, [pc, #92]	; (8002dbc <MRT_rtc_Init+0x68>)
 8002d60:	f7fe f9d2 	bl	8001108 <print>
	MRT_set_rtc(prev_hour,prev_min,prev_sec);
 8002d64:	4b16      	ldr	r3, [pc, #88]	; (8002dc0 <MRT_rtc_Init+0x6c>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	4a16      	ldr	r2, [pc, #88]	; (8002dc4 <MRT_rtc_Init+0x70>)
 8002d6a:	7811      	ldrb	r1, [r2, #0]
 8002d6c:	4a16      	ldr	r2, [pc, #88]	; (8002dc8 <MRT_rtc_Init+0x74>)
 8002d6e:	7812      	ldrb	r2, [r2, #0]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f000 f8df 	bl	8002f34 <MRT_set_rtc>
	println("OK");
 8002d76:	4815      	ldr	r0, [pc, #84]	; (8002dcc <MRT_rtc_Init+0x78>)
 8002d78:	f7fe f9a8 	bl	80010cc <println>

	HAL_Delay(2000); //To make sure that when you set the Alarm it doesn't go off automatically
 8002d7c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002d80:	f009 fbc2 	bl	800c508 <HAL_Delay>

	//TODO for some reason, both set_alarm need to be uncommented or commented together
	//They can't be used individually (or else we get a hardfault during external flash setup??)
	#if ALARM_A_ACTIVE
		print("\tSetting alarmA...");
 8002d84:	4812      	ldr	r0, [pc, #72]	; (8002dd0 <MRT_rtc_Init+0x7c>)
 8002d86:	f7fe f9bf 	bl	8001108 <print>
		MRT_set_alarmA(PRE_WHEN_SLEEP_TIME_HOURS, PRE_WHEN_SLEEP_TIME_MIN, PRE_WHEN_SLEEP_TIME_SEC);
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	211e      	movs	r1, #30
 8002d8e:	2004      	movs	r0, #4
 8002d90:	f000 f916 	bl	8002fc0 <MRT_set_alarmA>
		println("OK");
 8002d94:	480d      	ldr	r0, [pc, #52]	; (8002dcc <MRT_rtc_Init+0x78>)
 8002d96:	f7fe f999 	bl	80010cc <println>
	#endif


	#if ALARM_B_ACTIVE
		print("\tSetting alarmB...");
 8002d9a:	480e      	ldr	r0, [pc, #56]	; (8002dd4 <MRT_rtc_Init+0x80>)
 8002d9c:	f7fe f9b4 	bl	8001108 <print>
		MRT_set_alarmB(POST_WHEN_SLEEP_TIME_HOURS, POST_WHEN_SLEEP_TIME_MIN, POST_WHEN_SLEEP_TIME_SEC);
 8002da0:	2200      	movs	r2, #0
 8002da2:	211e      	movs	r1, #30
 8002da4:	2012      	movs	r0, #18
 8002da6:	f000 f951 	bl	800304c <MRT_set_alarmB>
		println("OK");
 8002daa:	4808      	ldr	r0, [pc, #32]	; (8002dcc <MRT_rtc_Init+0x78>)
 8002dac:	f7fe f98e 	bl	80010cc <println>
	#endif

	MRT_clear_alarms_flags();
 8002db0:	f000 f812 	bl	8002dd8 <MRT_clear_alarms_flags>
}
 8002db4:	bf00      	nop
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	08020be4 	.word	0x08020be4
 8002dbc:	08020bf4 	.word	0x08020bf4
 8002dc0:	200003fd 	.word	0x200003fd
 8002dc4:	200003fe 	.word	0x200003fe
 8002dc8:	200003ff 	.word	0x200003ff
 8002dcc:	08020c18 	.word	0x08020c18
 8002dd0:	08020c1c 	.word	0x08020c1c
 8002dd4:	08020c30 	.word	0x08020c30

08002dd8 <MRT_clear_alarms_flags>:



void MRT_clear_alarms_flags(void){
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
	//Must be after alarm A was activated and before going to sleep

	print("Clearing the flags\r\n");
 8002ddc:	482c      	ldr	r0, [pc, #176]	; (8002e90 <MRT_clear_alarms_flags+0xb8>)
 8002dde:	f7fe f993 	bl	8001108 <print>

	//Clear alarmA flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8002de2:	4b2c      	ldr	r3, [pc, #176]	; (8002e94 <MRT_clear_alarms_flags+0xbc>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	22ca      	movs	r2, #202	; 0xca
 8002de8:	625a      	str	r2, [r3, #36]	; 0x24
 8002dea:	4b2a      	ldr	r3, [pc, #168]	; (8002e94 <MRT_clear_alarms_flags+0xbc>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2253      	movs	r2, #83	; 0x53
 8002df0:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 8002df2:	e008      	b.n	8002e06 <MRT_clear_alarms_flags+0x2e>
		//print("Clearing alarm A flag\r\n");
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002df4:	4b27      	ldr	r3, [pc, #156]	; (8002e94 <MRT_clear_alarms_flags+0xbc>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	b2da      	uxtb	r2, r3
 8002dfc:	4b25      	ldr	r3, [pc, #148]	; (8002e94 <MRT_clear_alarms_flags+0xbc>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002e04:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 8002e06:	4b23      	ldr	r3, [pc, #140]	; (8002e94 <MRT_clear_alarms_flags+0xbc>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1ef      	bne.n	8002df4 <MRT_clear_alarms_flags+0x1c>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8002e14:	4b1f      	ldr	r3, [pc, #124]	; (8002e94 <MRT_clear_alarms_flags+0xbc>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	22ff      	movs	r2, #255	; 0xff
 8002e1a:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002e1c:	4b1e      	ldr	r3, [pc, #120]	; (8002e98 <MRT_clear_alarms_flags+0xc0>)
 8002e1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e22:	615a      	str	r2, [r3, #20]



  	//Clear alarmB flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8002e24:	4b1b      	ldr	r3, [pc, #108]	; (8002e94 <MRT_clear_alarms_flags+0xbc>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	22ca      	movs	r2, #202	; 0xca
 8002e2a:	625a      	str	r2, [r3, #36]	; 0x24
 8002e2c:	4b19      	ldr	r3, [pc, #100]	; (8002e94 <MRT_clear_alarms_flags+0xbc>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2253      	movs	r2, #83	; 0x53
 8002e32:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 8002e34:	e008      	b.n	8002e48 <MRT_clear_alarms_flags+0x70>
		//print("Clearing alarm B flag\r\n");
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRBF);
 8002e36:	4b17      	ldr	r3, [pc, #92]	; (8002e94 <MRT_clear_alarms_flags+0xbc>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	4b15      	ldr	r3, [pc, #84]	; (8002e94 <MRT_clear_alarms_flags+0xbc>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002e46:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 8002e48:	4b12      	ldr	r3, [pc, #72]	; (8002e94 <MRT_clear_alarms_flags+0xbc>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1ef      	bne.n	8002e36 <MRT_clear_alarms_flags+0x5e>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8002e56:	4b0f      	ldr	r3, [pc, #60]	; (8002e94 <MRT_clear_alarms_flags+0xbc>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	22ff      	movs	r2, #255	; 0xff
 8002e5c:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002e5e:	4b0e      	ldr	r3, [pc, #56]	; (8002e98 <MRT_clear_alarms_flags+0xc0>)
 8002e60:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e64:	615a      	str	r2, [r3, #20]

	/* Clear the WU FLAG */
	//print("Clearing wake up flag\r\n");
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8002e66:	4b0d      	ldr	r3, [pc, #52]	; (8002e9c <MRT_clear_alarms_flags+0xc4>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a0c      	ldr	r2, [pc, #48]	; (8002e9c <MRT_clear_alarms_flags+0xc4>)
 8002e6c:	f043 0304 	orr.w	r3, r3, #4
 8002e70:	6013      	str	r3, [r2, #0]

	/* clear the RTC Wake UP (WU) flag */
	//print("Clearing RTC wake up flag\r\n");
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8002e72:	4b08      	ldr	r3, [pc, #32]	; (8002e94 <MRT_clear_alarms_flags+0xbc>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	4b06      	ldr	r3, [pc, #24]	; (8002e94 <MRT_clear_alarms_flags+0xbc>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002e82:	60da      	str	r2, [r3, #12]
	__HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002e84:	4b04      	ldr	r3, [pc, #16]	; (8002e98 <MRT_clear_alarms_flags+0xc0>)
 8002e86:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002e8a:	615a      	str	r2, [r3, #20]
}
 8002e8c:	bf00      	nop
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	08020c44 	.word	0x08020c44
 8002e94:	2000876c 	.word	0x2000876c
 8002e98:	40013c00 	.word	0x40013c00
 8002e9c:	40007000 	.word	0x40007000

08002ea0 <MRT_StandByMode>:

/*
 * This function is called to enter standby mode
 * @param seconds: time before it wakes up (max of 36 hours)
 */
void MRT_StandByMode(uint32_t seconds){
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b08c      	sub	sp, #48	; 0x30
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
	print("\r\n/*****StandByMode*****/\r\n");
 8002ea8:	481e      	ldr	r0, [pc, #120]	; (8002f24 <MRT_StandByMode+0x84>)
 8002eaa:	f7fe f92d 	bl	8001108 <print>

	/* Enable the WAKEUP PIN
	 * (Needs to be placed BEFORE clearing up the flags or else it wakes up as soon as we enter standby mode)*/
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8002eae:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002eb2:	f00b fb29 	bl	800e508 <HAL_PWR_EnableWakeUpPin>


	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8002eb6:	4b1c      	ldr	r3, [pc, #112]	; (8002f28 <MRT_StandByMode+0x88>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	22ca      	movs	r2, #202	; 0xca
 8002ebc:	625a      	str	r2, [r3, #36]	; 0x24
 8002ebe:	4b1a      	ldr	r3, [pc, #104]	; (8002f28 <MRT_StandByMode+0x88>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2253      	movs	r2, #83	; 0x53
 8002ec4:	625a      	str	r2, [r3, #36]	; 0x24
	//Need this line or else alarm B will wake up the board immediately
	//Weird thing is this is not needed for alarm A
	__HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8002ec6:	4b18      	ldr	r3, [pc, #96]	; (8002f28 <MRT_StandByMode+0x88>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	4b16      	ldr	r3, [pc, #88]	; (8002f28 <MRT_StandByMode+0x88>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ed4:	609a      	str	r2, [r3, #8]
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8002ed6:	4b14      	ldr	r3, [pc, #80]	; (8002f28 <MRT_StandByMode+0x88>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	22ff      	movs	r2, #255	; 0xff
 8002edc:	625a      	str	r2, [r3, #36]	; 0x24

	/*Clear the flags so it doesn't wake up as soon as it goes to sleep*/
	MRT_clear_alarms_flags();
 8002ede:	f7ff ff7b 	bl	8002dd8 <MRT_clear_alarms_flags>

	//Setup RTC wake up timer
	println("Setting up RTCW");
 8002ee2:	4812      	ldr	r0, [pc, #72]	; (8002f2c <MRT_StandByMode+0x8c>)
 8002ee4:	f7fe f8f2 	bl	80010cc <println>
	  Error_Handler();
	}
	*/

	char msg[30+sizeof(uint32_t)];
	sprintf(msg,"Going to sleep for %i seconds",(int) seconds);
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	f107 030c 	add.w	r3, r7, #12
 8002eee:	4910      	ldr	r1, [pc, #64]	; (8002f30 <MRT_StandByMode+0x90>)
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f019 f8bd 	bl	801c070 <siprintf>
	println(msg);
 8002ef6:	f107 030c 	add.w	r3, r7, #12
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7fe f8e6 	bl	80010cc <println>

	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, seconds, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8002f00:	2204      	movs	r2, #4
 8002f02:	6879      	ldr	r1, [r7, #4]
 8002f04:	4808      	ldr	r0, [pc, #32]	; (8002f28 <MRT_StandByMode+0x88>)
 8002f06:	f00c fe9f 	bl	800fc48 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <MRT_StandByMode+0x74>
	{
	  Error_Handler();
 8002f10:	f7ff fe32 	bl	8002b78 <Error_Handler>
	}

	HAL_SuspendTick(); //System tick interrupt disabled (might not be necessary)
 8002f14:	f000 fb9c 	bl	8003650 <HAL_SuspendTick>

	HAL_PWR_EnterSTANDBYMode();
 8002f18:	f00b fb1c 	bl	800e554 <HAL_PWR_EnterSTANDBYMode>
}
 8002f1c:	bf00      	nop
 8002f1e:	3730      	adds	r7, #48	; 0x30
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	08020c5c 	.word	0x08020c5c
 8002f28:	2000876c 	.word	0x2000876c
 8002f2c:	08020c78 	.word	0x08020c78
 8002f30:	08020c88 	.word	0x08020c88

08002f34 <MRT_set_rtc>:




void MRT_set_rtc(uint8_t h, uint8_t m, uint8_t s){
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b088      	sub	sp, #32
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	71fb      	strb	r3, [r7, #7]
 8002f3e:	460b      	mov	r3, r1
 8002f40:	71bb      	strb	r3, [r7, #6]
 8002f42:	4613      	mov	r3, r2
 8002f44:	717b      	strb	r3, [r7, #5]

	  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 4U, 0U);
	  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
	  */

	  sTime.Hours = int_to_hex_table[h];
 8002f46:	79fb      	ldrb	r3, [r7, #7]
 8002f48:	4a1a      	ldr	r2, [pc, #104]	; (8002fb4 <MRT_set_rtc+0x80>)
 8002f4a:	5cd3      	ldrb	r3, [r2, r3]
 8002f4c:	733b      	strb	r3, [r7, #12]
	  sTime.Minutes = int_to_hex_table[m];
 8002f4e:	79bb      	ldrb	r3, [r7, #6]
 8002f50:	4a18      	ldr	r2, [pc, #96]	; (8002fb4 <MRT_set_rtc+0x80>)
 8002f52:	5cd3      	ldrb	r3, [r2, r3]
 8002f54:	737b      	strb	r3, [r7, #13]
	  sTime.Seconds = int_to_hex_table[s];
 8002f56:	797b      	ldrb	r3, [r7, #5]
 8002f58:	4a16      	ldr	r2, [pc, #88]	; (8002fb4 <MRT_set_rtc+0x80>)
 8002f5a:	5cd3      	ldrb	r3, [r2, r3]
 8002f5c:	73bb      	strb	r3, [r7, #14]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	61bb      	str	r3, [r7, #24]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002f62:	2300      	movs	r3, #0
 8002f64:	61fb      	str	r3, [r7, #28]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002f66:	f107 030c 	add.w	r3, r7, #12
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4812      	ldr	r0, [pc, #72]	; (8002fb8 <MRT_set_rtc+0x84>)
 8002f70:	f00c fa4b 	bl	800f40a <HAL_RTC_SetTime>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <MRT_set_rtc+0x4a>
	  {
	    Error_Handler();
 8002f7a:	f7ff fdfd 	bl	8002b78 <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002f7e:	4b0f      	ldr	r3, [pc, #60]	; (8002fbc <MRT_set_rtc+0x88>)
 8002f80:	2201      	movs	r2, #1
 8002f82:	701a      	strb	r2, [r3, #0]
	  sDate.Month = RTC_MONTH_JANUARY;
 8002f84:	4b0d      	ldr	r3, [pc, #52]	; (8002fbc <MRT_set_rtc+0x88>)
 8002f86:	2201      	movs	r2, #1
 8002f88:	705a      	strb	r2, [r3, #1]
	  sDate.Date = 0x1;
 8002f8a:	4b0c      	ldr	r3, [pc, #48]	; (8002fbc <MRT_set_rtc+0x88>)
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	709a      	strb	r2, [r3, #2]
	  sDate.Year = 0x0;
 8002f90:	4b0a      	ldr	r3, [pc, #40]	; (8002fbc <MRT_set_rtc+0x88>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	70da      	strb	r2, [r3, #3]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002f96:	2201      	movs	r2, #1
 8002f98:	4908      	ldr	r1, [pc, #32]	; (8002fbc <MRT_set_rtc+0x88>)
 8002f9a:	4807      	ldr	r0, [pc, #28]	; (8002fb8 <MRT_set_rtc+0x84>)
 8002f9c:	f00c fb50 	bl	800f640 <HAL_RTC_SetDate>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <MRT_set_rtc+0x76>
	  {
	    Error_Handler();
 8002fa6:	f7ff fde7 	bl	8002b78 <Error_Handler>
	  }
}
 8002faa:	bf00      	nop
 8002fac:	3720      	adds	r7, #32
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	20000000 	.word	0x20000000
 8002fb8:	2000876c 	.word	0x2000876c
 8002fbc:	2000036c 	.word	0x2000036c

08002fc0 <MRT_set_alarmA>:



void MRT_set_alarmA(uint8_t h, uint8_t m, uint8_t s){
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	71fb      	strb	r3, [r7, #7]
 8002fca:	460b      	mov	r3, r1
 8002fcc:	71bb      	strb	r3, [r7, #6]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	717b      	strb	r3, [r7, #5]
	  /** Enable the Alarm A
	  */
	  sAlarm.AlarmTime.Hours = int_to_hex_table[h];
 8002fd2:	79fb      	ldrb	r3, [r7, #7]
 8002fd4:	4a1a      	ldr	r2, [pc, #104]	; (8003040 <MRT_set_alarmA+0x80>)
 8002fd6:	5cd2      	ldrb	r2, [r2, r3]
 8002fd8:	4b1a      	ldr	r3, [pc, #104]	; (8003044 <MRT_set_alarmA+0x84>)
 8002fda:	701a      	strb	r2, [r3, #0]
	  sAlarm.AlarmTime.Minutes = int_to_hex_table[m];
 8002fdc:	79bb      	ldrb	r3, [r7, #6]
 8002fde:	4a18      	ldr	r2, [pc, #96]	; (8003040 <MRT_set_alarmA+0x80>)
 8002fe0:	5cd2      	ldrb	r2, [r2, r3]
 8002fe2:	4b18      	ldr	r3, [pc, #96]	; (8003044 <MRT_set_alarmA+0x84>)
 8002fe4:	705a      	strb	r2, [r3, #1]
	  sAlarm.AlarmTime.Seconds = int_to_hex_table[s];
 8002fe6:	797b      	ldrb	r3, [r7, #5]
 8002fe8:	4a15      	ldr	r2, [pc, #84]	; (8003040 <MRT_set_alarmA+0x80>)
 8002fea:	5cd2      	ldrb	r2, [r2, r3]
 8002fec:	4b15      	ldr	r3, [pc, #84]	; (8003044 <MRT_set_alarmA+0x84>)
 8002fee:	709a      	strb	r2, [r3, #2]
	  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002ff0:	4b14      	ldr	r3, [pc, #80]	; (8003044 <MRT_set_alarmA+0x84>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	605a      	str	r2, [r3, #4]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002ff6:	4b13      	ldr	r3, [pc, #76]	; (8003044 <MRT_set_alarmA+0x84>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	60da      	str	r2, [r3, #12]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002ffc:	4b11      	ldr	r3, [pc, #68]	; (8003044 <MRT_set_alarmA+0x84>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	611a      	str	r2, [r3, #16]
	  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8003002:	4b10      	ldr	r3, [pc, #64]	; (8003044 <MRT_set_alarmA+0x84>)
 8003004:	2200      	movs	r2, #0
 8003006:	615a      	str	r2, [r3, #20]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003008:	4b0e      	ldr	r3, [pc, #56]	; (8003044 <MRT_set_alarmA+0x84>)
 800300a:	2200      	movs	r2, #0
 800300c:	619a      	str	r2, [r3, #24]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800300e:	4b0d      	ldr	r3, [pc, #52]	; (8003044 <MRT_set_alarmA+0x84>)
 8003010:	2200      	movs	r2, #0
 8003012:	61da      	str	r2, [r3, #28]
	  sAlarm.AlarmDateWeekDay = 0x1;
 8003014:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <MRT_set_alarmA+0x84>)
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2020 	strb.w	r2, [r3, #32]
	  sAlarm.Alarm = RTC_ALARM_A;
 800301c:	4b09      	ldr	r3, [pc, #36]	; (8003044 <MRT_set_alarmA+0x84>)
 800301e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003022:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8003024:	2201      	movs	r2, #1
 8003026:	4907      	ldr	r1, [pc, #28]	; (8003044 <MRT_set_alarmA+0x84>)
 8003028:	4807      	ldr	r0, [pc, #28]	; (8003048 <MRT_set_alarmA+0x88>)
 800302a:	f00c fbff 	bl	800f82c <HAL_RTC_SetAlarm_IT>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <MRT_set_alarmA+0x78>
	  {
	    Error_Handler();
 8003034:	f7ff fda0 	bl	8002b78 <Error_Handler>
	  }
}
 8003038:	bf00      	nop
 800303a:	3708      	adds	r7, #8
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	20000000 	.word	0x20000000
 8003044:	20000370 	.word	0x20000370
 8003048:	2000876c 	.word	0x2000876c

0800304c <MRT_set_alarmB>:



void MRT_set_alarmB(uint8_t h, uint8_t m, uint8_t s){
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	4603      	mov	r3, r0
 8003054:	71fb      	strb	r3, [r7, #7]
 8003056:	460b      	mov	r3, r1
 8003058:	71bb      	strb	r3, [r7, #6]
 800305a:	4613      	mov	r3, r2
 800305c:	717b      	strb	r3, [r7, #5]
	  /** Enable the AlarmB
	  */
	  sAlarm.AlarmTime.Hours = int_to_hex_table[h];
 800305e:	79fb      	ldrb	r3, [r7, #7]
 8003060:	4a1a      	ldr	r2, [pc, #104]	; (80030cc <MRT_set_alarmB+0x80>)
 8003062:	5cd2      	ldrb	r2, [r2, r3]
 8003064:	4b1a      	ldr	r3, [pc, #104]	; (80030d0 <MRT_set_alarmB+0x84>)
 8003066:	701a      	strb	r2, [r3, #0]
	  sAlarm.AlarmTime.Minutes = int_to_hex_table[m];
 8003068:	79bb      	ldrb	r3, [r7, #6]
 800306a:	4a18      	ldr	r2, [pc, #96]	; (80030cc <MRT_set_alarmB+0x80>)
 800306c:	5cd2      	ldrb	r2, [r2, r3]
 800306e:	4b18      	ldr	r3, [pc, #96]	; (80030d0 <MRT_set_alarmB+0x84>)
 8003070:	705a      	strb	r2, [r3, #1]
	  sAlarm.AlarmTime.Seconds = int_to_hex_table[s];
 8003072:	797b      	ldrb	r3, [r7, #5]
 8003074:	4a15      	ldr	r2, [pc, #84]	; (80030cc <MRT_set_alarmB+0x80>)
 8003076:	5cd2      	ldrb	r2, [r2, r3]
 8003078:	4b15      	ldr	r3, [pc, #84]	; (80030d0 <MRT_set_alarmB+0x84>)
 800307a:	709a      	strb	r2, [r3, #2]
	  sAlarm.AlarmTime.SubSeconds = 0x0;
 800307c:	4b14      	ldr	r3, [pc, #80]	; (80030d0 <MRT_set_alarmB+0x84>)
 800307e:	2200      	movs	r2, #0
 8003080:	605a      	str	r2, [r3, #4]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003082:	4b13      	ldr	r3, [pc, #76]	; (80030d0 <MRT_set_alarmB+0x84>)
 8003084:	2200      	movs	r2, #0
 8003086:	60da      	str	r2, [r3, #12]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003088:	4b11      	ldr	r3, [pc, #68]	; (80030d0 <MRT_set_alarmB+0x84>)
 800308a:	2200      	movs	r2, #0
 800308c:	611a      	str	r2, [r3, #16]
	  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800308e:	4b10      	ldr	r3, [pc, #64]	; (80030d0 <MRT_set_alarmB+0x84>)
 8003090:	2200      	movs	r2, #0
 8003092:	615a      	str	r2, [r3, #20]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003094:	4b0e      	ldr	r3, [pc, #56]	; (80030d0 <MRT_set_alarmB+0x84>)
 8003096:	2200      	movs	r2, #0
 8003098:	619a      	str	r2, [r3, #24]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800309a:	4b0d      	ldr	r3, [pc, #52]	; (80030d0 <MRT_set_alarmB+0x84>)
 800309c:	2200      	movs	r2, #0
 800309e:	61da      	str	r2, [r3, #28]
	  sAlarm.AlarmDateWeekDay = 0x1;
 80030a0:	4b0b      	ldr	r3, [pc, #44]	; (80030d0 <MRT_set_alarmB+0x84>)
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2020 	strb.w	r2, [r3, #32]
	  sAlarm.Alarm = RTC_ALARM_B;
 80030a8:	4b09      	ldr	r3, [pc, #36]	; (80030d0 <MRT_set_alarmB+0x84>)
 80030aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030ae:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80030b0:	2201      	movs	r2, #1
 80030b2:	4907      	ldr	r1, [pc, #28]	; (80030d0 <MRT_set_alarmB+0x84>)
 80030b4:	4807      	ldr	r0, [pc, #28]	; (80030d4 <MRT_set_alarmB+0x88>)
 80030b6:	f00c fbb9 	bl	800f82c <HAL_RTC_SetAlarm_IT>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <MRT_set_alarmB+0x78>
	  {
	    Error_Handler();
 80030c0:	f7ff fd5a 	bl	8002b78 <Error_Handler>
	  }
}
 80030c4:	bf00      	nop
 80030c6:	3708      	adds	r7, #8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	20000000 	.word	0x20000000
 80030d0:	20000370 	.word	0x20000370
 80030d4:	2000876c 	.word	0x2000876c

080030d8 <MRT_RTC_backup_regs_Init>:
							  &rtc_bckp_reg_alt_apogee, &rtc_bckp_reg_apogee_time, &rtc_bckp_reg_alt_main, &rtc_bckp_reg_main_time,
							  &rtc_bckp_reg_alt_landed, &rtc_bckp_reg_landed_time};


//Get all the backup regs values (initialization)
void MRT_RTC_backup_regs_Init(void){
 80030d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030da:	b0cf      	sub	sp, #316	; 0x13c
 80030dc:	af08      	add	r7, sp, #32
	for (int i = 0; i < NB_RTC_BCKP_REGS; i++){
 80030de:	2300      	movs	r3, #0
 80030e0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80030e4:	e011      	b.n	800310a <MRT_RTC_backup_regs_Init+0x32>
		*rtc_bckp_regs[i] = MRT_RTC_getBackupReg(i);
 80030e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030ea:	b2da      	uxtb	r2, r3
 80030ec:	4924      	ldr	r1, [pc, #144]	; (8003180 <MRT_RTC_backup_regs_Init+0xa8>)
 80030ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030f2:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 80030f6:	4610      	mov	r0, r2
 80030f8:	f000 f87e 	bl	80031f8 <MRT_RTC_getBackupReg>
 80030fc:	4603      	mov	r3, r0
 80030fe:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < NB_RTC_BCKP_REGS; i++){
 8003100:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003104:	3301      	adds	r3, #1
 8003106:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800310a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800310e:	2b12      	cmp	r3, #18
 8003110:	dde9      	ble.n	80030e6 <MRT_RTC_backup_regs_Init+0xe>
	}

	//TODO TESTING
	char buffer[256];
	sprintf(buffer, "ALTITUDES:\r\n\tGround: %i \tTime: %i"
 8003112:	4b1c      	ldr	r3, [pc, #112]	; (8003184 <MRT_RTC_backup_regs_Init+0xac>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	60fb      	str	r3, [r7, #12]
 8003118:	4b1b      	ldr	r3, [pc, #108]	; (8003188 <MRT_RTC_backup_regs_Init+0xb0>)
 800311a:	6819      	ldr	r1, [r3, #0]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	4b1b      	ldr	r3, [pc, #108]	; (800318c <MRT_RTC_backup_regs_Init+0xb4>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a1b      	ldr	r2, [pc, #108]	; (8003190 <MRT_RTC_backup_regs_Init+0xb8>)
 8003124:	6812      	ldr	r2, [r2, #0]
 8003126:	491b      	ldr	r1, [pc, #108]	; (8003194 <MRT_RTC_backup_regs_Init+0xbc>)
 8003128:	6809      	ldr	r1, [r1, #0]
 800312a:	481b      	ldr	r0, [pc, #108]	; (8003198 <MRT_RTC_backup_regs_Init+0xc0>)
 800312c:	6800      	ldr	r0, [r0, #0]
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	4c1a      	ldr	r4, [pc, #104]	; (800319c <MRT_RTC_backup_regs_Init+0xc4>)
 8003132:	6824      	ldr	r4, [r4, #0]
 8003134:	4d1a      	ldr	r5, [pc, #104]	; (80031a0 <MRT_RTC_backup_regs_Init+0xc8>)
 8003136:	682d      	ldr	r5, [r5, #0]
 8003138:	4e1a      	ldr	r6, [pc, #104]	; (80031a4 <MRT_RTC_backup_regs_Init+0xcc>)
 800313a:	6836      	ldr	r6, [r6, #0]
 800313c:	481a      	ldr	r0, [pc, #104]	; (80031a8 <MRT_RTC_backup_regs_Init+0xd0>)
 800313e:	6800      	ldr	r0, [r0, #0]
 8003140:	f107 0c14 	add.w	ip, r7, #20
 8003144:	9007      	str	r0, [sp, #28]
 8003146:	9606      	str	r6, [sp, #24]
 8003148:	9505      	str	r5, [sp, #20]
 800314a:	9404      	str	r4, [sp, #16]
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	9003      	str	r0, [sp, #12]
 8003150:	9102      	str	r1, [sp, #8]
 8003152:	9201      	str	r2, [sp, #4]
 8003154:	9300      	str	r3, [sp, #0]
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	4914      	ldr	r1, [pc, #80]	; (80031ac <MRT_RTC_backup_regs_Init+0xd4>)
 800315c:	4660      	mov	r0, ip
 800315e:	f018 ff87 	bl	801c070 <siprintf>
					"\r\n\tMain: %i \tTime: %i"
					"\r\n\tLanded: %i \tTime: %i\r\n",
			rtc_bckp_reg_alt_pad, rtc_bckp_reg_pad_time,  rtc_bckp_reg_alt_true_apogee, rtc_bckp_reg_true_apogee_time,
			rtc_bckp_reg_alt_apogee, rtc_bckp_reg_apogee_time, rtc_bckp_reg_alt_main, rtc_bckp_reg_main_time,
			rtc_bckp_reg_alt_landed, rtc_bckp_reg_landed_time);
	print(buffer);
 8003162:	f107 0314 	add.w	r3, r7, #20
 8003166:	4618      	mov	r0, r3
 8003168:	f7fd ffce 	bl	8001108 <print>

	HAL_Delay(2000);
 800316c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003170:	f009 f9ca 	bl	800c508 <HAL_Delay>
}
 8003174:	bf00      	nop
 8003176:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800317a:	46bd      	mov	sp, r7
 800317c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800317e:	bf00      	nop
 8003180:	2000003c 	.word	0x2000003c
 8003184:	200003bc 	.word	0x200003bc
 8003188:	200003c0 	.word	0x200003c0
 800318c:	200003c4 	.word	0x200003c4
 8003190:	200003c8 	.word	0x200003c8
 8003194:	200003cc 	.word	0x200003cc
 8003198:	200003d0 	.word	0x200003d0
 800319c:	200003d4 	.word	0x200003d4
 80031a0:	200003d8 	.word	0x200003d8
 80031a4:	200003dc 	.word	0x200003dc
 80031a8:	200003e0 	.word	0x200003e0
 80031ac:	08020ca8 	.word	0x08020ca8

080031b0 <MRT_RTC_clearBackupRegs>:

// initializes backup register values to zero
void MRT_RTC_clearBackupRegs(void) {
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 80031b6:	4b0f      	ldr	r3, [pc, #60]	; (80031f4 <MRT_RTC_clearBackupRegs+0x44>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	22ca      	movs	r2, #202	; 0xca
 80031bc:	625a      	str	r2, [r3, #36]	; 0x24
 80031be:	4b0d      	ldr	r3, [pc, #52]	; (80031f4 <MRT_RTC_clearBackupRegs+0x44>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2253      	movs	r2, #83	; 0x53
 80031c4:	625a      	str	r2, [r3, #36]	; 0x24
	for (uint8_t i = 0; i < 20; i++) {
 80031c6:	2300      	movs	r3, #0
 80031c8:	71fb      	strb	r3, [r7, #7]
 80031ca:	e008      	b.n	80031de <MRT_RTC_clearBackupRegs+0x2e>
		HAL_RTCEx_BKUPWrite(&hrtc, i, 0);	// set all backup register values to zero
 80031cc:	79fb      	ldrb	r3, [r7, #7]
 80031ce:	2200      	movs	r2, #0
 80031d0:	4619      	mov	r1, r3
 80031d2:	4808      	ldr	r0, [pc, #32]	; (80031f4 <MRT_RTC_clearBackupRegs+0x44>)
 80031d4:	f00c fe74 	bl	800fec0 <HAL_RTCEx_BKUPWrite>
	for (uint8_t i = 0; i < 20; i++) {
 80031d8:	79fb      	ldrb	r3, [r7, #7]
 80031da:	3301      	adds	r3, #1
 80031dc:	71fb      	strb	r3, [r7, #7]
 80031de:	79fb      	ldrb	r3, [r7, #7]
 80031e0:	2b13      	cmp	r3, #19
 80031e2:	d9f3      	bls.n	80031cc <MRT_RTC_clearBackupRegs+0x1c>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 80031e4:	4b03      	ldr	r3, [pc, #12]	; (80031f4 <MRT_RTC_clearBackupRegs+0x44>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	22ff      	movs	r2, #255	; 0xff
 80031ea:	625a      	str	r2, [r3, #36]	; 0x24
}
 80031ec:	bf00      	nop
 80031ee:	3708      	adds	r7, #8
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	2000876c 	.word	0x2000876c

080031f8 <MRT_RTC_getBackupReg>:

// gets the backup register value for the specified state
uint32_t MRT_RTC_getBackupReg(rtc_backup_reg state) {
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	4603      	mov	r3, r0
 8003200:	71fb      	strb	r3, [r7, #7]
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8003202:	4b0b      	ldr	r3, [pc, #44]	; (8003230 <MRT_RTC_getBackupReg+0x38>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	22ca      	movs	r2, #202	; 0xca
 8003208:	625a      	str	r2, [r3, #36]	; 0x24
 800320a:	4b09      	ldr	r3, [pc, #36]	; (8003230 <MRT_RTC_getBackupReg+0x38>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2253      	movs	r2, #83	; 0x53
 8003210:	625a      	str	r2, [r3, #36]	; 0x24
	uint32_t val = HAL_RTCEx_BKUPRead(&hrtc, (uint32_t) state);
 8003212:	79fb      	ldrb	r3, [r7, #7]
 8003214:	4619      	mov	r1, r3
 8003216:	4806      	ldr	r0, [pc, #24]	; (8003230 <MRT_RTC_getBackupReg+0x38>)
 8003218:	f00c fe6c 	bl	800fef4 <HAL_RTCEx_BKUPRead>
 800321c:	60f8      	str	r0, [r7, #12]
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 800321e:	4b04      	ldr	r3, [pc, #16]	; (8003230 <MRT_RTC_getBackupReg+0x38>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	22ff      	movs	r2, #255	; 0xff
 8003224:	625a      	str	r2, [r3, #36]	; 0x24
	return val;
 8003226:	68fb      	ldr	r3, [r7, #12]
}
 8003228:	4618      	mov	r0, r3
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	2000876c 	.word	0x2000876c

08003234 <MRT_RTC_setBackupReg>:

// sets the backup register value for the specified state
void MRT_RTC_setBackupReg(rtc_backup_reg state, uint32_t value) {
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	4603      	mov	r3, r0
 800323c:	6039      	str	r1, [r7, #0]
 800323e:	71fb      	strb	r3, [r7, #7]
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8003240:	4b0a      	ldr	r3, [pc, #40]	; (800326c <MRT_RTC_setBackupReg+0x38>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	22ca      	movs	r2, #202	; 0xca
 8003246:	625a      	str	r2, [r3, #36]	; 0x24
 8003248:	4b08      	ldr	r3, [pc, #32]	; (800326c <MRT_RTC_setBackupReg+0x38>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2253      	movs	r2, #83	; 0x53
 800324e:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_RTCEx_BKUPWrite(&hrtc, (uint32_t) state, value);
 8003250:	79fb      	ldrb	r3, [r7, #7]
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	4619      	mov	r1, r3
 8003256:	4805      	ldr	r0, [pc, #20]	; (800326c <MRT_RTC_setBackupReg+0x38>)
 8003258:	f00c fe32 	bl	800fec0 <HAL_RTCEx_BKUPWrite>
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 800325c:	4b03      	ldr	r3, [pc, #12]	; (800326c <MRT_RTC_setBackupReg+0x38>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	22ff      	movs	r2, #255	; 0xff
 8003262:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003264:	bf00      	nop
 8003266:	3708      	adds	r7, #8
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	2000876c 	.word	0x2000876c

08003270 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi4;
SPI_HandleTypeDef hspi5;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003274:	4b17      	ldr	r3, [pc, #92]	; (80032d4 <MX_SPI2_Init+0x64>)
 8003276:	4a18      	ldr	r2, [pc, #96]	; (80032d8 <MX_SPI2_Init+0x68>)
 8003278:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800327a:	4b16      	ldr	r3, [pc, #88]	; (80032d4 <MX_SPI2_Init+0x64>)
 800327c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003280:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003282:	4b14      	ldr	r3, [pc, #80]	; (80032d4 <MX_SPI2_Init+0x64>)
 8003284:	2200      	movs	r2, #0
 8003286:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003288:	4b12      	ldr	r3, [pc, #72]	; (80032d4 <MX_SPI2_Init+0x64>)
 800328a:	2200      	movs	r2, #0
 800328c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800328e:	4b11      	ldr	r3, [pc, #68]	; (80032d4 <MX_SPI2_Init+0x64>)
 8003290:	2200      	movs	r2, #0
 8003292:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003294:	4b0f      	ldr	r3, [pc, #60]	; (80032d4 <MX_SPI2_Init+0x64>)
 8003296:	2200      	movs	r2, #0
 8003298:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800329a:	4b0e      	ldr	r3, [pc, #56]	; (80032d4 <MX_SPI2_Init+0x64>)
 800329c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032a0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032a2:	4b0c      	ldr	r3, [pc, #48]	; (80032d4 <MX_SPI2_Init+0x64>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80032a8:	4b0a      	ldr	r3, [pc, #40]	; (80032d4 <MX_SPI2_Init+0x64>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80032ae:	4b09      	ldr	r3, [pc, #36]	; (80032d4 <MX_SPI2_Init+0x64>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032b4:	4b07      	ldr	r3, [pc, #28]	; (80032d4 <MX_SPI2_Init+0x64>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80032ba:	4b06      	ldr	r3, [pc, #24]	; (80032d4 <MX_SPI2_Init+0x64>)
 80032bc:	220a      	movs	r2, #10
 80032be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80032c0:	4804      	ldr	r0, [pc, #16]	; (80032d4 <MX_SPI2_Init+0x64>)
 80032c2:	f00c fe2f 	bl	800ff24 <HAL_SPI_Init>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d001      	beq.n	80032d0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80032cc:	f7ff fc54 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80032d0:	bf00      	nop
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	2000878c 	.word	0x2000878c
 80032d8:	40003800 	.word	0x40003800

080032dc <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80032e0:	4b17      	ldr	r3, [pc, #92]	; (8003340 <MX_SPI4_Init+0x64>)
 80032e2:	4a18      	ldr	r2, [pc, #96]	; (8003344 <MX_SPI4_Init+0x68>)
 80032e4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80032e6:	4b16      	ldr	r3, [pc, #88]	; (8003340 <MX_SPI4_Init+0x64>)
 80032e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80032ec:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80032ee:	4b14      	ldr	r3, [pc, #80]	; (8003340 <MX_SPI4_Init+0x64>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80032f4:	4b12      	ldr	r3, [pc, #72]	; (8003340 <MX_SPI4_Init+0x64>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80032fa:	4b11      	ldr	r3, [pc, #68]	; (8003340 <MX_SPI4_Init+0x64>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003300:	4b0f      	ldr	r3, [pc, #60]	; (8003340 <MX_SPI4_Init+0x64>)
 8003302:	2200      	movs	r2, #0
 8003304:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8003306:	4b0e      	ldr	r3, [pc, #56]	; (8003340 <MX_SPI4_Init+0x64>)
 8003308:	f44f 7200 	mov.w	r2, #512	; 0x200
 800330c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800330e:	4b0c      	ldr	r3, [pc, #48]	; (8003340 <MX_SPI4_Init+0x64>)
 8003310:	2200      	movs	r2, #0
 8003312:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003314:	4b0a      	ldr	r3, [pc, #40]	; (8003340 <MX_SPI4_Init+0x64>)
 8003316:	2200      	movs	r2, #0
 8003318:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800331a:	4b09      	ldr	r3, [pc, #36]	; (8003340 <MX_SPI4_Init+0x64>)
 800331c:	2200      	movs	r2, #0
 800331e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003320:	4b07      	ldr	r3, [pc, #28]	; (8003340 <MX_SPI4_Init+0x64>)
 8003322:	2200      	movs	r2, #0
 8003324:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8003326:	4b06      	ldr	r3, [pc, #24]	; (8003340 <MX_SPI4_Init+0x64>)
 8003328:	220a      	movs	r2, #10
 800332a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800332c:	4804      	ldr	r0, [pc, #16]	; (8003340 <MX_SPI4_Init+0x64>)
 800332e:	f00c fdf9 	bl	800ff24 <HAL_SPI_Init>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8003338:	f7ff fc1e 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800333c:	bf00      	nop
 800333e:	bd80      	pop	{r7, pc}
 8003340:	2000883c 	.word	0x2000883c
 8003344:	40013400 	.word	0x40013400

08003348 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 800334c:	4b17      	ldr	r3, [pc, #92]	; (80033ac <MX_SPI5_Init+0x64>)
 800334e:	4a18      	ldr	r2, [pc, #96]	; (80033b0 <MX_SPI5_Init+0x68>)
 8003350:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8003352:	4b16      	ldr	r3, [pc, #88]	; (80033ac <MX_SPI5_Init+0x64>)
 8003354:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003358:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800335a:	4b14      	ldr	r3, [pc, #80]	; (80033ac <MX_SPI5_Init+0x64>)
 800335c:	2200      	movs	r2, #0
 800335e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8003360:	4b12      	ldr	r3, [pc, #72]	; (80033ac <MX_SPI5_Init+0x64>)
 8003362:	2200      	movs	r2, #0
 8003364:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003366:	4b11      	ldr	r3, [pc, #68]	; (80033ac <MX_SPI5_Init+0x64>)
 8003368:	2200      	movs	r2, #0
 800336a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800336c:	4b0f      	ldr	r3, [pc, #60]	; (80033ac <MX_SPI5_Init+0x64>)
 800336e:	2200      	movs	r2, #0
 8003370:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8003372:	4b0e      	ldr	r3, [pc, #56]	; (80033ac <MX_SPI5_Init+0x64>)
 8003374:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003378:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800337a:	4b0c      	ldr	r3, [pc, #48]	; (80033ac <MX_SPI5_Init+0x64>)
 800337c:	2200      	movs	r2, #0
 800337e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003380:	4b0a      	ldr	r3, [pc, #40]	; (80033ac <MX_SPI5_Init+0x64>)
 8003382:	2200      	movs	r2, #0
 8003384:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8003386:	4b09      	ldr	r3, [pc, #36]	; (80033ac <MX_SPI5_Init+0x64>)
 8003388:	2200      	movs	r2, #0
 800338a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800338c:	4b07      	ldr	r3, [pc, #28]	; (80033ac <MX_SPI5_Init+0x64>)
 800338e:	2200      	movs	r2, #0
 8003390:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8003392:	4b06      	ldr	r3, [pc, #24]	; (80033ac <MX_SPI5_Init+0x64>)
 8003394:	220a      	movs	r2, #10
 8003396:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8003398:	4804      	ldr	r0, [pc, #16]	; (80033ac <MX_SPI5_Init+0x64>)
 800339a:	f00c fdc3 	bl	800ff24 <HAL_SPI_Init>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80033a4:	f7ff fbe8 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80033a8:	bf00      	nop
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	200087e4 	.word	0x200087e4
 80033b0:	40015000 	.word	0x40015000

080033b4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b08e      	sub	sp, #56	; 0x38
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	605a      	str	r2, [r3, #4]
 80033c6:	609a      	str	r2, [r3, #8]
 80033c8:	60da      	str	r2, [r3, #12]
 80033ca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a4c      	ldr	r2, [pc, #304]	; (8003504 <HAL_SPI_MspInit+0x150>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d12d      	bne.n	8003432 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80033d6:	2300      	movs	r3, #0
 80033d8:	623b      	str	r3, [r7, #32]
 80033da:	4b4b      	ldr	r3, [pc, #300]	; (8003508 <HAL_SPI_MspInit+0x154>)
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	4a4a      	ldr	r2, [pc, #296]	; (8003508 <HAL_SPI_MspInit+0x154>)
 80033e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033e4:	6413      	str	r3, [r2, #64]	; 0x40
 80033e6:	4b48      	ldr	r3, [pc, #288]	; (8003508 <HAL_SPI_MspInit+0x154>)
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033ee:	623b      	str	r3, [r7, #32]
 80033f0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033f2:	2300      	movs	r3, #0
 80033f4:	61fb      	str	r3, [r7, #28]
 80033f6:	4b44      	ldr	r3, [pc, #272]	; (8003508 <HAL_SPI_MspInit+0x154>)
 80033f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fa:	4a43      	ldr	r2, [pc, #268]	; (8003508 <HAL_SPI_MspInit+0x154>)
 80033fc:	f043 0302 	orr.w	r3, r3, #2
 8003400:	6313      	str	r3, [r2, #48]	; 0x30
 8003402:	4b41      	ldr	r3, [pc, #260]	; (8003508 <HAL_SPI_MspInit+0x154>)
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	61fb      	str	r3, [r7, #28]
 800340c:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800340e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003412:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003414:	2302      	movs	r3, #2
 8003416:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003418:	2300      	movs	r3, #0
 800341a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800341c:	2303      	movs	r3, #3
 800341e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003420:	2305      	movs	r3, #5
 8003422:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003424:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003428:	4619      	mov	r1, r3
 800342a:	4838      	ldr	r0, [pc, #224]	; (800350c <HAL_SPI_MspInit+0x158>)
 800342c:	f009 fdb4 	bl	800cf98 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8003430:	e064      	b.n	80034fc <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI4)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a36      	ldr	r2, [pc, #216]	; (8003510 <HAL_SPI_MspInit+0x15c>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d12d      	bne.n	8003498 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800343c:	2300      	movs	r3, #0
 800343e:	61bb      	str	r3, [r7, #24]
 8003440:	4b31      	ldr	r3, [pc, #196]	; (8003508 <HAL_SPI_MspInit+0x154>)
 8003442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003444:	4a30      	ldr	r2, [pc, #192]	; (8003508 <HAL_SPI_MspInit+0x154>)
 8003446:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800344a:	6453      	str	r3, [r2, #68]	; 0x44
 800344c:	4b2e      	ldr	r3, [pc, #184]	; (8003508 <HAL_SPI_MspInit+0x154>)
 800344e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003450:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003454:	61bb      	str	r3, [r7, #24]
 8003456:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003458:	2300      	movs	r3, #0
 800345a:	617b      	str	r3, [r7, #20]
 800345c:	4b2a      	ldr	r3, [pc, #168]	; (8003508 <HAL_SPI_MspInit+0x154>)
 800345e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003460:	4a29      	ldr	r2, [pc, #164]	; (8003508 <HAL_SPI_MspInit+0x154>)
 8003462:	f043 0310 	orr.w	r3, r3, #16
 8003466:	6313      	str	r3, [r2, #48]	; 0x30
 8003468:	4b27      	ldr	r3, [pc, #156]	; (8003508 <HAL_SPI_MspInit+0x154>)
 800346a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346c:	f003 0310 	and.w	r3, r3, #16
 8003470:	617b      	str	r3, [r7, #20]
 8003472:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8003474:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003478:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800347a:	2302      	movs	r3, #2
 800347c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800347e:	2300      	movs	r3, #0
 8003480:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003482:	2303      	movs	r3, #3
 8003484:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003486:	2305      	movs	r3, #5
 8003488:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800348a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800348e:	4619      	mov	r1, r3
 8003490:	4820      	ldr	r0, [pc, #128]	; (8003514 <HAL_SPI_MspInit+0x160>)
 8003492:	f009 fd81 	bl	800cf98 <HAL_GPIO_Init>
}
 8003496:	e031      	b.n	80034fc <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI5)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a1e      	ldr	r2, [pc, #120]	; (8003518 <HAL_SPI_MspInit+0x164>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d12c      	bne.n	80034fc <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 80034a2:	2300      	movs	r3, #0
 80034a4:	613b      	str	r3, [r7, #16]
 80034a6:	4b18      	ldr	r3, [pc, #96]	; (8003508 <HAL_SPI_MspInit+0x154>)
 80034a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034aa:	4a17      	ldr	r2, [pc, #92]	; (8003508 <HAL_SPI_MspInit+0x154>)
 80034ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034b0:	6453      	str	r3, [r2, #68]	; 0x44
 80034b2:	4b15      	ldr	r3, [pc, #84]	; (8003508 <HAL_SPI_MspInit+0x154>)
 80034b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034ba:	613b      	str	r3, [r7, #16]
 80034bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80034be:	2300      	movs	r3, #0
 80034c0:	60fb      	str	r3, [r7, #12]
 80034c2:	4b11      	ldr	r3, [pc, #68]	; (8003508 <HAL_SPI_MspInit+0x154>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	4a10      	ldr	r2, [pc, #64]	; (8003508 <HAL_SPI_MspInit+0x154>)
 80034c8:	f043 0320 	orr.w	r3, r3, #32
 80034cc:	6313      	str	r3, [r2, #48]	; 0x30
 80034ce:	4b0e      	ldr	r3, [pc, #56]	; (8003508 <HAL_SPI_MspInit+0x154>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	f003 0320 	and.w	r3, r3, #32
 80034d6:	60fb      	str	r3, [r7, #12]
 80034d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80034da:	f44f 7360 	mov.w	r3, #896	; 0x380
 80034de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e0:	2302      	movs	r3, #2
 80034e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034e4:	2301      	movs	r3, #1
 80034e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034e8:	2303      	movs	r3, #3
 80034ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80034ec:	2305      	movs	r3, #5
 80034ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80034f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034f4:	4619      	mov	r1, r3
 80034f6:	4809      	ldr	r0, [pc, #36]	; (800351c <HAL_SPI_MspInit+0x168>)
 80034f8:	f009 fd4e 	bl	800cf98 <HAL_GPIO_Init>
}
 80034fc:	bf00      	nop
 80034fe:	3738      	adds	r7, #56	; 0x38
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	40003800 	.word	0x40003800
 8003508:	40023800 	.word	0x40023800
 800350c:	40020400 	.word	0x40020400
 8003510:	40013400 	.word	0x40013400
 8003514:	40021000 	.word	0x40021000
 8003518:	40015000 	.word	0x40015000
 800351c:	40021400 	.word	0x40021400

08003520 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003526:	2300      	movs	r3, #0
 8003528:	607b      	str	r3, [r7, #4]
 800352a:	4b1b      	ldr	r3, [pc, #108]	; (8003598 <HAL_MspInit+0x78>)
 800352c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352e:	4a1a      	ldr	r2, [pc, #104]	; (8003598 <HAL_MspInit+0x78>)
 8003530:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003534:	6453      	str	r3, [r2, #68]	; 0x44
 8003536:	4b18      	ldr	r3, [pc, #96]	; (8003598 <HAL_MspInit+0x78>)
 8003538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800353e:	607b      	str	r3, [r7, #4]
 8003540:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003542:	2300      	movs	r3, #0
 8003544:	603b      	str	r3, [r7, #0]
 8003546:	4b14      	ldr	r3, [pc, #80]	; (8003598 <HAL_MspInit+0x78>)
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	4a13      	ldr	r2, [pc, #76]	; (8003598 <HAL_MspInit+0x78>)
 800354c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003550:	6413      	str	r3, [r2, #64]	; 0x40
 8003552:	4b11      	ldr	r3, [pc, #68]	; (8003598 <HAL_MspInit+0x78>)
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800355a:	603b      	str	r3, [r7, #0]
 800355c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 5, 0);
 800355e:	2200      	movs	r2, #0
 8003560:	2105      	movs	r1, #5
 8003562:	f06f 0009 	mvn.w	r0, #9
 8003566:	f009 fcdf 	bl	800cf28 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 15, 0);
 800356a:	2200      	movs	r2, #0
 800356c:	210f      	movs	r1, #15
 800356e:	f06f 0004 	mvn.w	r0, #4
 8003572:	f009 fcd9 	bl	800cf28 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 5, 0);
 8003576:	2200      	movs	r2, #0
 8003578:	2105      	movs	r1, #5
 800357a:	f06f 0003 	mvn.w	r0, #3
 800357e:	f009 fcd3 	bl	800cf28 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003582:	2200      	movs	r2, #0
 8003584:	210f      	movs	r1, #15
 8003586:	f06f 0001 	mvn.w	r0, #1
 800358a:	f009 fccd 	bl	800cf28 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800358e:	bf00      	nop
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	40023800 	.word	0x40023800

0800359c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b08c      	sub	sp, #48	; 0x30
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80035a4:	2300      	movs	r3, #0
 80035a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80035a8:	2300      	movs	r3, #0
 80035aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80035ac:	2200      	movs	r2, #0
 80035ae:	6879      	ldr	r1, [r7, #4]
 80035b0:	2036      	movs	r0, #54	; 0x36
 80035b2:	f009 fcb9 	bl	800cf28 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80035b6:	2036      	movs	r0, #54	; 0x36
 80035b8:	f009 fcd2 	bl	800cf60 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80035bc:	2300      	movs	r3, #0
 80035be:	60fb      	str	r3, [r7, #12]
 80035c0:	4b1f      	ldr	r3, [pc, #124]	; (8003640 <HAL_InitTick+0xa4>)
 80035c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c4:	4a1e      	ldr	r2, [pc, #120]	; (8003640 <HAL_InitTick+0xa4>)
 80035c6:	f043 0310 	orr.w	r3, r3, #16
 80035ca:	6413      	str	r3, [r2, #64]	; 0x40
 80035cc:	4b1c      	ldr	r3, [pc, #112]	; (8003640 <HAL_InitTick+0xa4>)
 80035ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d0:	f003 0310 	and.w	r3, r3, #16
 80035d4:	60fb      	str	r3, [r7, #12]
 80035d6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80035d8:	f107 0210 	add.w	r2, r7, #16
 80035dc:	f107 0314 	add.w	r3, r7, #20
 80035e0:	4611      	mov	r1, r2
 80035e2:	4618      	mov	r0, r3
 80035e4:	f00b fc90 	bl	800ef08 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80035e8:	f00b fc66 	bl	800eeb8 <HAL_RCC_GetPCLK1Freq>
 80035ec:	4603      	mov	r3, r0
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80035f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f4:	4a13      	ldr	r2, [pc, #76]	; (8003644 <HAL_InitTick+0xa8>)
 80035f6:	fba2 2303 	umull	r2, r3, r2, r3
 80035fa:	0c9b      	lsrs	r3, r3, #18
 80035fc:	3b01      	subs	r3, #1
 80035fe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003600:	4b11      	ldr	r3, [pc, #68]	; (8003648 <HAL_InitTick+0xac>)
 8003602:	4a12      	ldr	r2, [pc, #72]	; (800364c <HAL_InitTick+0xb0>)
 8003604:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003606:	4b10      	ldr	r3, [pc, #64]	; (8003648 <HAL_InitTick+0xac>)
 8003608:	f240 32e7 	movw	r2, #999	; 0x3e7
 800360c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800360e:	4a0e      	ldr	r2, [pc, #56]	; (8003648 <HAL_InitTick+0xac>)
 8003610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003612:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003614:	4b0c      	ldr	r3, [pc, #48]	; (8003648 <HAL_InitTick+0xac>)
 8003616:	2200      	movs	r2, #0
 8003618:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800361a:	4b0b      	ldr	r3, [pc, #44]	; (8003648 <HAL_InitTick+0xac>)
 800361c:	2200      	movs	r2, #0
 800361e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003620:	4809      	ldr	r0, [pc, #36]	; (8003648 <HAL_InitTick+0xac>)
 8003622:	f00d fa27 	bl	8010a74 <HAL_TIM_Base_Init>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d104      	bne.n	8003636 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800362c:	4806      	ldr	r0, [pc, #24]	; (8003648 <HAL_InitTick+0xac>)
 800362e:	f00d fa71 	bl	8010b14 <HAL_TIM_Base_Start_IT>
 8003632:	4603      	mov	r3, r0
 8003634:	e000      	b.n	8003638 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
}
 8003638:	4618      	mov	r0, r3
 800363a:	3730      	adds	r7, #48	; 0x30
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	40023800 	.word	0x40023800
 8003644:	431bde83 	.word	0x431bde83
 8003648:	20008894 	.word	0x20008894
 800364c:	40001000 	.word	0x40001000

08003650 <HAL_SuspendTick>:
  * @note   Disable the tick increment by disabling TIM6 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_SuspendTick(void)
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
  /* Disable TIM6 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim6, TIM_IT_UPDATE);
 8003654:	4b06      	ldr	r3, [pc, #24]	; (8003670 <HAL_SuspendTick+0x20>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68da      	ldr	r2, [r3, #12]
 800365a:	4b05      	ldr	r3, [pc, #20]	; (8003670 <HAL_SuspendTick+0x20>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 0201 	bic.w	r2, r2, #1
 8003662:	60da      	str	r2, [r3, #12]
}
 8003664:	bf00      	nop
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	20008894 	.word	0x20008894

08003674 <__NVIC_SystemReset>:
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003678:	f3bf 8f4f 	dsb	sy
}
 800367c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800367e:	4b06      	ldr	r3, [pc, #24]	; (8003698 <__NVIC_SystemReset+0x24>)
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003686:	4904      	ldr	r1, [pc, #16]	; (8003698 <__NVIC_SystemReset+0x24>)
 8003688:	4b04      	ldr	r3, [pc, #16]	; (800369c <__NVIC_SystemReset+0x28>)
 800368a:	4313      	orrs	r3, r2
 800368c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800368e:	f3bf 8f4f 	dsb	sy
}
 8003692:	bf00      	nop
    __NOP();
 8003694:	bf00      	nop
 8003696:	e7fd      	b.n	8003694 <__NVIC_SystemReset+0x20>
 8003698:	e000ed00 	.word	0xe000ed00
 800369c:	05fa0004 	.word	0x05fa0004

080036a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80036a4:	e7fe      	b.n	80036a4 <NMI_Handler+0x4>
	...

080036a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

	println((char*) "Hardfault: Going into standByMode and waiting for IWDG reset");
 80036ac:	4804      	ldr	r0, [pc, #16]	; (80036c0 <HardFault_Handler+0x18>)
 80036ae:	f7fd fd0d 	bl	80010cc <println>
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 80036b2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80036b6:	f00a ff27 	bl	800e508 <HAL_PWR_EnableWakeUpPin>
	HAL_PWR_EnterSTANDBYMode();
 80036ba:	f00a ff4b 	bl	800e554 <HAL_PWR_EnterSTANDBYMode>

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036be:	e7fe      	b.n	80036be <HardFault_Handler+0x16>
 80036c0:	08020d2c 	.word	0x08020d2c

080036c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036c8:	e7fe      	b.n	80036c8 <MemManage_Handler+0x4>

080036ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036ca:	b480      	push	{r7}
 80036cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036ce:	e7fe      	b.n	80036ce <BusFault_Handler+0x4>

080036d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036d0:	b480      	push	{r7}
 80036d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036d4:	e7fe      	b.n	80036d4 <UsageFault_Handler+0x4>

080036d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036d6:	b480      	push	{r7}
 80036d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036da:	bf00      	nop
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80036e8:	4802      	ldr	r0, [pc, #8]	; (80036f4 <RTC_WKUP_IRQHandler+0x10>)
 80036ea:	f00c fbc5 	bl	800fe78 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80036ee:	bf00      	nop
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	2000876c 	.word	0x2000876c

080036f8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80036fc:	2001      	movs	r0, #1
 80036fe:	f009 fe29 	bl	800d354 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003702:	bf00      	nop
 8003704:	bd80      	pop	{r7, pc}
	...

08003708 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800370c:	4802      	ldr	r0, [pc, #8]	; (8003718 <TIM6_DAC_IRQHandler+0x10>)
 800370e:	f00d fc03 	bl	8010f18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003712:	bf00      	nop
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	20008894 	.word	0x20008894

0800371c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	4603      	mov	r3, r0
 8003724:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == IN_Button_Pin){
 8003726:	88fb      	ldrh	r3, [r7, #6]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d102      	bne.n	8003732 <HAL_GPIO_EXTI_Callback+0x16>
		//Manual reset from external button
		restart_flag = 1;
 800372c:	4b04      	ldr	r3, [pc, #16]	; (8003740 <HAL_GPIO_EXTI_Callback+0x24>)
 800372e:	2201      	movs	r2, #1
 8003730:	701a      	strb	r2, [r3, #0]
	}
}
 8003732:	bf00      	nop
 8003734:	370c      	adds	r7, #12
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	200003e6 	.word	0x200003e6

08003744 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003748:	4802      	ldr	r0, [pc, #8]	; (8003754 <RTC_Alarm_IRQHandler+0x10>)
 800374a:	f00c f9a7 	bl	800fa9c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800374e:	bf00      	nop
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	2000876c 	.word	0x2000876c

08003758 <HAL_RTC_AlarmAEventCallback>:


void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
	println("\r\nAlarmA");
 8003760:	4804      	ldr	r0, [pc, #16]	; (8003774 <HAL_RTC_AlarmAEventCallback+0x1c>)
 8003762:	f7fd fcb3 	bl	80010cc <println>
	flagA = 1;
 8003766:	4b04      	ldr	r3, [pc, #16]	; (8003778 <HAL_RTC_AlarmAEventCallback+0x20>)
 8003768:	2201      	movs	r2, #1
 800376a:	701a      	strb	r2, [r3, #0]
	return;
 800376c:	bf00      	nop
}
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	08020d6c 	.word	0x08020d6c
 8003778:	200003e4 	.word	0x200003e4

0800377c <HAL_RTCEx_AlarmBEventCallback>:


void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc){
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
	println("\r\nAlarmB");
 8003784:	4804      	ldr	r0, [pc, #16]	; (8003798 <HAL_RTCEx_AlarmBEventCallback+0x1c>)
 8003786:	f7fd fca1 	bl	80010cc <println>
	flagB = 1;
 800378a:	4b04      	ldr	r3, [pc, #16]	; (800379c <HAL_RTCEx_AlarmBEventCallback+0x20>)
 800378c:	2201      	movs	r2, #1
 800378e:	701a      	strb	r2, [r3, #0]
	return;
 8003790:	bf00      	nop
}
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	08020d78 	.word	0x08020d78
 800379c:	200003e5 	.word	0x200003e5

080037a0 <HAL_RTCEx_WakeUpTimerEventCallback>:


void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc){
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
	return;
 80037a8:	bf00      	nop
}
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <MRT_resetFromStart>:



void MRT_resetFromStart(void){
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0

	//Clear memory
	MRT_clearExternalFlash();
 80037b8:	f000 fbfa 	bl	8003fb0 <MRT_clearExternalFlash>
	MRT_RTC_clearBackupRegs();
 80037bc:	f7ff fcf8 	bl	80031b0 <MRT_RTC_clearBackupRegs>

	//Shutdown Iridium
	//TODO should have deninit for every system?
	#if IRIDIUM_
	MRT_Iridium_Deinit();
 80037c0:	f006 fcc8 	bl	800a154 <MRT_Iridium_Deinit>
	#endif

	//Reset function
	NVIC_SystemReset();
 80037c4:	f7ff ff56 	bl	8003674 <__NVIC_SystemReset>

080037c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80037cc:	4b06      	ldr	r3, [pc, #24]	; (80037e8 <SystemInit+0x20>)
 80037ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d2:	4a05      	ldr	r2, [pc, #20]	; (80037e8 <SystemInit+0x20>)
 80037d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80037dc:	bf00      	nop
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	e000ed00 	.word	0xe000ed00

080037ec <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b08e      	sub	sp, #56	; 0x38
 80037f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037f6:	2200      	movs	r2, #0
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	605a      	str	r2, [r3, #4]
 80037fc:	609a      	str	r2, [r3, #8]
 80037fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003800:	f107 0320 	add.w	r3, r7, #32
 8003804:	2200      	movs	r2, #0
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800380a:	1d3b      	adds	r3, r7, #4
 800380c:	2200      	movs	r2, #0
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	605a      	str	r2, [r3, #4]
 8003812:	609a      	str	r2, [r3, #8]
 8003814:	60da      	str	r2, [r3, #12]
 8003816:	611a      	str	r2, [r3, #16]
 8003818:	615a      	str	r2, [r3, #20]
 800381a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800381c:	4b2d      	ldr	r3, [pc, #180]	; (80038d4 <MX_TIM2_Init+0xe8>)
 800381e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003822:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8003824:	4b2b      	ldr	r3, [pc, #172]	; (80038d4 <MX_TIM2_Init+0xe8>)
 8003826:	2259      	movs	r2, #89	; 0x59
 8003828:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800382a:	4b2a      	ldr	r3, [pc, #168]	; (80038d4 <MX_TIM2_Init+0xe8>)
 800382c:	2200      	movs	r2, #0
 800382e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400-1;
 8003830:	4b28      	ldr	r3, [pc, #160]	; (80038d4 <MX_TIM2_Init+0xe8>)
 8003832:	f240 128f 	movw	r2, #399	; 0x18f
 8003836:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003838:	4b26      	ldr	r3, [pc, #152]	; (80038d4 <MX_TIM2_Init+0xe8>)
 800383a:	2200      	movs	r2, #0
 800383c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800383e:	4b25      	ldr	r3, [pc, #148]	; (80038d4 <MX_TIM2_Init+0xe8>)
 8003840:	2200      	movs	r2, #0
 8003842:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003844:	4823      	ldr	r0, [pc, #140]	; (80038d4 <MX_TIM2_Init+0xe8>)
 8003846:	f00d f915 	bl	8010a74 <HAL_TIM_Base_Init>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d001      	beq.n	8003854 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003850:	f7ff f992 	bl	8002b78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003858:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800385a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800385e:	4619      	mov	r1, r3
 8003860:	481c      	ldr	r0, [pc, #112]	; (80038d4 <MX_TIM2_Init+0xe8>)
 8003862:	f00d fd23 	bl	80112ac <HAL_TIM_ConfigClockSource>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800386c:	f7ff f984 	bl	8002b78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003870:	4818      	ldr	r0, [pc, #96]	; (80038d4 <MX_TIM2_Init+0xe8>)
 8003872:	f00d f9bf 	bl	8010bf4 <HAL_TIM_PWM_Init>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800387c:	f7ff f97c 	bl	8002b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003880:	2320      	movs	r3, #32
 8003882:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003884:	2300      	movs	r3, #0
 8003886:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003888:	f107 0320 	add.w	r3, r7, #32
 800388c:	4619      	mov	r1, r3
 800388e:	4811      	ldr	r0, [pc, #68]	; (80038d4 <MX_TIM2_Init+0xe8>)
 8003890:	f00e f90c 	bl	8011aac <HAL_TIMEx_MasterConfigSynchronization>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800389a:	f7ff f96d 	bl	8002b78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800389e:	2360      	movs	r3, #96	; 0x60
 80038a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 80038a2:	2364      	movs	r3, #100	; 0x64
 80038a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038a6:	2300      	movs	r3, #0
 80038a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038aa:	2300      	movs	r3, #0
 80038ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80038ae:	1d3b      	adds	r3, r7, #4
 80038b0:	2208      	movs	r2, #8
 80038b2:	4619      	mov	r1, r3
 80038b4:	4807      	ldr	r0, [pc, #28]	; (80038d4 <MX_TIM2_Init+0xe8>)
 80038b6:	f00d fc37 	bl	8011128 <HAL_TIM_PWM_ConfigChannel>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d001      	beq.n	80038c4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80038c0:	f7ff f95a 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80038c4:	4803      	ldr	r0, [pc, #12]	; (80038d4 <MX_TIM2_Init+0xe8>)
 80038c6:	f000 f827 	bl	8003918 <HAL_TIM_MspPostInit>

}
 80038ca:	bf00      	nop
 80038cc:	3738      	adds	r7, #56	; 0x38
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	200088dc 	.word	0x200088dc

080038d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e8:	d10d      	bne.n	8003906 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80038ea:	2300      	movs	r3, #0
 80038ec:	60fb      	str	r3, [r7, #12]
 80038ee:	4b09      	ldr	r3, [pc, #36]	; (8003914 <HAL_TIM_Base_MspInit+0x3c>)
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	4a08      	ldr	r2, [pc, #32]	; (8003914 <HAL_TIM_Base_MspInit+0x3c>)
 80038f4:	f043 0301 	orr.w	r3, r3, #1
 80038f8:	6413      	str	r3, [r2, #64]	; 0x40
 80038fa:	4b06      	ldr	r3, [pc, #24]	; (8003914 <HAL_TIM_Base_MspInit+0x3c>)
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	60fb      	str	r3, [r7, #12]
 8003904:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003906:	bf00      	nop
 8003908:	3714      	adds	r7, #20
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	40023800 	.word	0x40023800

08003918 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b088      	sub	sp, #32
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003920:	f107 030c 	add.w	r3, r7, #12
 8003924:	2200      	movs	r2, #0
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	605a      	str	r2, [r3, #4]
 800392a:	609a      	str	r2, [r3, #8]
 800392c:	60da      	str	r2, [r3, #12]
 800392e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003938:	d11d      	bne.n	8003976 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800393a:	2300      	movs	r3, #0
 800393c:	60bb      	str	r3, [r7, #8]
 800393e:	4b10      	ldr	r3, [pc, #64]	; (8003980 <HAL_TIM_MspPostInit+0x68>)
 8003940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003942:	4a0f      	ldr	r2, [pc, #60]	; (8003980 <HAL_TIM_MspPostInit+0x68>)
 8003944:	f043 0301 	orr.w	r3, r3, #1
 8003948:	6313      	str	r3, [r2, #48]	; 0x30
 800394a:	4b0d      	ldr	r3, [pc, #52]	; (8003980 <HAL_TIM_MspPostInit+0x68>)
 800394c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	60bb      	str	r3, [r7, #8]
 8003954:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8003956:	2304      	movs	r3, #4
 8003958:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800395a:	2302      	movs	r3, #2
 800395c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800395e:	2300      	movs	r3, #0
 8003960:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003962:	2300      	movs	r3, #0
 8003964:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003966:	2301      	movs	r3, #1
 8003968:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 800396a:	f107 030c 	add.w	r3, r7, #12
 800396e:	4619      	mov	r1, r3
 8003970:	4804      	ldr	r0, [pc, #16]	; (8003984 <HAL_TIM_MspPostInit+0x6c>)
 8003972:	f009 fb11 	bl	800cf98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003976:	bf00      	nop
 8003978:	3720      	adds	r7, #32
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	40023800 	.word	0x40023800
 8003984:	40020000 	.word	0x40020000

08003988 <MX_UART8_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART8 init function */
void MX_UART8_Init(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 800398c:	4b11      	ldr	r3, [pc, #68]	; (80039d4 <MX_UART8_Init+0x4c>)
 800398e:	4a12      	ldr	r2, [pc, #72]	; (80039d8 <MX_UART8_Init+0x50>)
 8003990:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8003992:	4b10      	ldr	r3, [pc, #64]	; (80039d4 <MX_UART8_Init+0x4c>)
 8003994:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003998:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800399a:	4b0e      	ldr	r3, [pc, #56]	; (80039d4 <MX_UART8_Init+0x4c>)
 800399c:	2200      	movs	r2, #0
 800399e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80039a0:	4b0c      	ldr	r3, [pc, #48]	; (80039d4 <MX_UART8_Init+0x4c>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80039a6:	4b0b      	ldr	r3, [pc, #44]	; (80039d4 <MX_UART8_Init+0x4c>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80039ac:	4b09      	ldr	r3, [pc, #36]	; (80039d4 <MX_UART8_Init+0x4c>)
 80039ae:	220c      	movs	r2, #12
 80039b0:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039b2:	4b08      	ldr	r3, [pc, #32]	; (80039d4 <MX_UART8_Init+0x4c>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80039b8:	4b06      	ldr	r3, [pc, #24]	; (80039d4 <MX_UART8_Init+0x4c>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80039be:	4805      	ldr	r0, [pc, #20]	; (80039d4 <MX_UART8_Init+0x4c>)
 80039c0:	f00e f904 	bl	8011bcc <HAL_UART_Init>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <MX_UART8_Init+0x46>
  {
    Error_Handler();
 80039ca:	f7ff f8d5 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80039ce:	bf00      	nop
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	20008968 	.word	0x20008968
 80039d8:	40007c00 	.word	0x40007c00

080039dc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80039e0:	4b11      	ldr	r3, [pc, #68]	; (8003a28 <MX_USART3_UART_Init+0x4c>)
 80039e2:	4a12      	ldr	r2, [pc, #72]	; (8003a2c <MX_USART3_UART_Init+0x50>)
 80039e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80039e6:	4b10      	ldr	r3, [pc, #64]	; (8003a28 <MX_USART3_UART_Init+0x4c>)
 80039e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80039ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80039ee:	4b0e      	ldr	r3, [pc, #56]	; (8003a28 <MX_USART3_UART_Init+0x4c>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80039f4:	4b0c      	ldr	r3, [pc, #48]	; (8003a28 <MX_USART3_UART_Init+0x4c>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80039fa:	4b0b      	ldr	r3, [pc, #44]	; (8003a28 <MX_USART3_UART_Init+0x4c>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003a00:	4b09      	ldr	r3, [pc, #36]	; (8003a28 <MX_USART3_UART_Init+0x4c>)
 8003a02:	220c      	movs	r2, #12
 8003a04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a06:	4b08      	ldr	r3, [pc, #32]	; (8003a28 <MX_USART3_UART_Init+0x4c>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a0c:	4b06      	ldr	r3, [pc, #24]	; (8003a28 <MX_USART3_UART_Init+0x4c>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003a12:	4805      	ldr	r0, [pc, #20]	; (8003a28 <MX_USART3_UART_Init+0x4c>)
 8003a14:	f00e f8da 	bl	8011bcc <HAL_UART_Init>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003a1e:	f7ff f8ab 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003a22:	bf00      	nop
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	20008924 	.word	0x20008924
 8003a2c:	40004800 	.word	0x40004800

08003a30 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003a34:	4b11      	ldr	r3, [pc, #68]	; (8003a7c <MX_USART6_UART_Init+0x4c>)
 8003a36:	4a12      	ldr	r2, [pc, #72]	; (8003a80 <MX_USART6_UART_Init+0x50>)
 8003a38:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8003a3a:	4b10      	ldr	r3, [pc, #64]	; (8003a7c <MX_USART6_UART_Init+0x4c>)
 8003a3c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003a40:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003a42:	4b0e      	ldr	r3, [pc, #56]	; (8003a7c <MX_USART6_UART_Init+0x4c>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003a48:	4b0c      	ldr	r3, [pc, #48]	; (8003a7c <MX_USART6_UART_Init+0x4c>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003a4e:	4b0b      	ldr	r3, [pc, #44]	; (8003a7c <MX_USART6_UART_Init+0x4c>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003a54:	4b09      	ldr	r3, [pc, #36]	; (8003a7c <MX_USART6_UART_Init+0x4c>)
 8003a56:	220c      	movs	r2, #12
 8003a58:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a5a:	4b08      	ldr	r3, [pc, #32]	; (8003a7c <MX_USART6_UART_Init+0x4c>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a60:	4b06      	ldr	r3, [pc, #24]	; (8003a7c <MX_USART6_UART_Init+0x4c>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003a66:	4805      	ldr	r0, [pc, #20]	; (8003a7c <MX_USART6_UART_Init+0x4c>)
 8003a68:	f00e f8b0 	bl	8011bcc <HAL_UART_Init>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003a72:	f7ff f881 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003a76:	bf00      	nop
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	200089ac 	.word	0x200089ac
 8003a80:	40011400 	.word	0x40011400

08003a84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b08e      	sub	sp, #56	; 0x38
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	605a      	str	r2, [r3, #4]
 8003a96:	609a      	str	r2, [r3, #8]
 8003a98:	60da      	str	r2, [r3, #12]
 8003a9a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART8)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a4b      	ldr	r2, [pc, #300]	; (8003bd0 <HAL_UART_MspInit+0x14c>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d12c      	bne.n	8003b00 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* UART8 clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	623b      	str	r3, [r7, #32]
 8003aaa:	4b4a      	ldr	r3, [pc, #296]	; (8003bd4 <HAL_UART_MspInit+0x150>)
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	4a49      	ldr	r2, [pc, #292]	; (8003bd4 <HAL_UART_MspInit+0x150>)
 8003ab0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ab6:	4b47      	ldr	r3, [pc, #284]	; (8003bd4 <HAL_UART_MspInit+0x150>)
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003abe:	623b      	str	r3, [r7, #32]
 8003ac0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61fb      	str	r3, [r7, #28]
 8003ac6:	4b43      	ldr	r3, [pc, #268]	; (8003bd4 <HAL_UART_MspInit+0x150>)
 8003ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aca:	4a42      	ldr	r2, [pc, #264]	; (8003bd4 <HAL_UART_MspInit+0x150>)
 8003acc:	f043 0310 	orr.w	r3, r3, #16
 8003ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ad2:	4b40      	ldr	r3, [pc, #256]	; (8003bd4 <HAL_UART_MspInit+0x150>)
 8003ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad6:	f003 0310 	and.w	r3, r3, #16
 8003ada:	61fb      	str	r3, [r7, #28]
 8003adc:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aea:	2303      	movs	r3, #3
 8003aec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8003aee:	2308      	movs	r3, #8
 8003af0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003af6:	4619      	mov	r1, r3
 8003af8:	4837      	ldr	r0, [pc, #220]	; (8003bd8 <HAL_UART_MspInit+0x154>)
 8003afa:	f009 fa4d 	bl	800cf98 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003afe:	e063      	b.n	8003bc8 <HAL_UART_MspInit+0x144>
  else if(uartHandle->Instance==USART3)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a35      	ldr	r2, [pc, #212]	; (8003bdc <HAL_UART_MspInit+0x158>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d12d      	bne.n	8003b66 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	61bb      	str	r3, [r7, #24]
 8003b0e:	4b31      	ldr	r3, [pc, #196]	; (8003bd4 <HAL_UART_MspInit+0x150>)
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	4a30      	ldr	r2, [pc, #192]	; (8003bd4 <HAL_UART_MspInit+0x150>)
 8003b14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b18:	6413      	str	r3, [r2, #64]	; 0x40
 8003b1a:	4b2e      	ldr	r3, [pc, #184]	; (8003bd4 <HAL_UART_MspInit+0x150>)
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b22:	61bb      	str	r3, [r7, #24]
 8003b24:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b26:	2300      	movs	r3, #0
 8003b28:	617b      	str	r3, [r7, #20]
 8003b2a:	4b2a      	ldr	r3, [pc, #168]	; (8003bd4 <HAL_UART_MspInit+0x150>)
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2e:	4a29      	ldr	r2, [pc, #164]	; (8003bd4 <HAL_UART_MspInit+0x150>)
 8003b30:	f043 0308 	orr.w	r3, r3, #8
 8003b34:	6313      	str	r3, [r2, #48]	; 0x30
 8003b36:	4b27      	ldr	r3, [pc, #156]	; (8003bd4 <HAL_UART_MspInit+0x150>)
 8003b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3a:	f003 0308 	and.w	r3, r3, #8
 8003b3e:	617b      	str	r3, [r7, #20]
 8003b40:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 8003b42:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003b46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b48:	2302      	movs	r3, #2
 8003b4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b50:	2303      	movs	r3, #3
 8003b52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003b54:	2307      	movs	r3, #7
 8003b56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	4820      	ldr	r0, [pc, #128]	; (8003be0 <HAL_UART_MspInit+0x15c>)
 8003b60:	f009 fa1a 	bl	800cf98 <HAL_GPIO_Init>
}
 8003b64:	e030      	b.n	8003bc8 <HAL_UART_MspInit+0x144>
  else if(uartHandle->Instance==USART6)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a1e      	ldr	r2, [pc, #120]	; (8003be4 <HAL_UART_MspInit+0x160>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d12b      	bne.n	8003bc8 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003b70:	2300      	movs	r3, #0
 8003b72:	613b      	str	r3, [r7, #16]
 8003b74:	4b17      	ldr	r3, [pc, #92]	; (8003bd4 <HAL_UART_MspInit+0x150>)
 8003b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b78:	4a16      	ldr	r2, [pc, #88]	; (8003bd4 <HAL_UART_MspInit+0x150>)
 8003b7a:	f043 0320 	orr.w	r3, r3, #32
 8003b7e:	6453      	str	r3, [r2, #68]	; 0x44
 8003b80:	4b14      	ldr	r3, [pc, #80]	; (8003bd4 <HAL_UART_MspInit+0x150>)
 8003b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b84:	f003 0320 	and.w	r3, r3, #32
 8003b88:	613b      	str	r3, [r7, #16]
 8003b8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	4b10      	ldr	r3, [pc, #64]	; (8003bd4 <HAL_UART_MspInit+0x150>)
 8003b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b94:	4a0f      	ldr	r2, [pc, #60]	; (8003bd4 <HAL_UART_MspInit+0x150>)
 8003b96:	f043 0304 	orr.w	r3, r3, #4
 8003b9a:	6313      	str	r3, [r2, #48]	; 0x30
 8003b9c:	4b0d      	ldr	r3, [pc, #52]	; (8003bd4 <HAL_UART_MspInit+0x150>)
 8003b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba0:	f003 0304 	and.w	r3, r3, #4
 8003ba4:	60fb      	str	r3, [r7, #12]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 8003ba8:	23c0      	movs	r3, #192	; 0xc0
 8003baa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bac:	2302      	movs	r3, #2
 8003bae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003bb8:	2308      	movs	r3, #8
 8003bba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4809      	ldr	r0, [pc, #36]	; (8003be8 <HAL_UART_MspInit+0x164>)
 8003bc4:	f009 f9e8 	bl	800cf98 <HAL_GPIO_Init>
}
 8003bc8:	bf00      	nop
 8003bca:	3738      	adds	r7, #56	; 0x38
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	40007c00 	.word	0x40007c00
 8003bd4:	40023800 	.word	0x40023800
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	40004800 	.word	0x40004800
 8003be0:	40020c00 	.word	0x40020c00
 8003be4:	40011400 	.word	0x40011400
 8003be8:	40020800 	.word	0x40020800

08003bec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003bec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c24 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003bf0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003bf2:	e003      	b.n	8003bfc <LoopCopyDataInit>

08003bf4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003bf4:	4b0c      	ldr	r3, [pc, #48]	; (8003c28 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003bf6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003bf8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003bfa:	3104      	adds	r1, #4

08003bfc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003bfc:	480b      	ldr	r0, [pc, #44]	; (8003c2c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003bfe:	4b0c      	ldr	r3, [pc, #48]	; (8003c30 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003c00:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003c02:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003c04:	d3f6      	bcc.n	8003bf4 <CopyDataInit>
  ldr  r2, =_sbss
 8003c06:	4a0b      	ldr	r2, [pc, #44]	; (8003c34 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003c08:	e002      	b.n	8003c10 <LoopFillZerobss>

08003c0a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003c0a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003c0c:	f842 3b04 	str.w	r3, [r2], #4

08003c10 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003c10:	4b09      	ldr	r3, [pc, #36]	; (8003c38 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003c12:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003c14:	d3f9      	bcc.n	8003c0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003c16:	f7ff fdd7 	bl	80037c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c1a:	f016 fdaf 	bl	801a77c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c1e:	f7fe fed7 	bl	80029d0 <main>
  bx  lr    
 8003c22:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003c24:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003c28:	080231d4 	.word	0x080231d4
  ldr  r0, =_sdata
 8003c2c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003c30:	20000334 	.word	0x20000334
  ldr  r2, =_sbss
 8003c34:	20000334 	.word	0x20000334
  ldr  r3, = _ebss
 8003c38:	20009d0c 	.word	0x20009d0c

08003c3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c3c:	e7fe      	b.n	8003c3c <ADC_IRQHandler>
	...

08003c40 <MRT_getAltitude>:

/*
 * Gets the altitude using temperature, pressure and sea-level pressure
 *https://www.mide.com/air-pressure-at-altitude-calculator
 */
float MRT_getAltitude(float pressure){
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	ed87 0a01 	vstr	s0, [r7, #4]
	return BASE_HEIGHT+(SEA_LEVEL_TEMPERATURE/-0.0065)*(pow(pressure/SEA_LEVEL_PRESSURE,0.190263236)-1); //(-R*-0.0065/(go*M)) = 0.190263236
 8003c4a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c4e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003cd0 <MRT_getAltitude+0x90>
 8003c52:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003c56:	ee16 0a90 	vmov	r0, s13
 8003c5a:	f7fc fc95 	bl	8000588 <__aeabi_f2d>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	460b      	mov	r3, r1
 8003c62:	ed9f 1b17 	vldr	d1, [pc, #92]	; 8003cc0 <MRT_getAltitude+0x80>
 8003c66:	ec43 2b10 	vmov	d0, r2, r3
 8003c6a:	f015 fcc7 	bl	80195fc <pow>
 8003c6e:	ec51 0b10 	vmov	r0, r1, d0
 8003c72:	f04f 0200 	mov.w	r2, #0
 8003c76:	4b17      	ldr	r3, [pc, #92]	; (8003cd4 <MRT_getAltitude+0x94>)
 8003c78:	f7fc fb26 	bl	80002c8 <__aeabi_dsub>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	460b      	mov	r3, r1
 8003c80:	4610      	mov	r0, r2
 8003c82:	4619      	mov	r1, r3
 8003c84:	a310      	add	r3, pc, #64	; (adr r3, 8003cc8 <MRT_getAltitude+0x88>)
 8003c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c8a:	f7fc fcd5 	bl	8000638 <__aeabi_dmul>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	460b      	mov	r3, r1
 8003c92:	4610      	mov	r0, r2
 8003c94:	4619      	mov	r1, r3
 8003c96:	f04f 0200 	mov.w	r2, #0
 8003c9a:	4b0f      	ldr	r3, [pc, #60]	; (8003cd8 <MRT_getAltitude+0x98>)
 8003c9c:	f7fc fb16 	bl	80002cc <__adddf3>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	4610      	mov	r0, r2
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	f7fc ffbe 	bl	8000c28 <__aeabi_d2f>
 8003cac:	4603      	mov	r3, r0
 8003cae:	ee07 3a90 	vmov	s15, r3
}
 8003cb2:	eeb0 0a67 	vmov.f32	s0, s15
 8003cb6:	3708      	adds	r7, #8
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	f3af 8000 	nop.w
 8003cc0:	b4202506 	.word	0xb4202506
 8003cc4:	3fc85a8b 	.word	0x3fc85a8b
 8003cc8:	76276276 	.word	0x76276276
 8003ccc:	c0e481c2 	.word	0xc0e481c2
 8003cd0:	447d8000 	.word	0x447d8000
 8003cd4:	3ff00000 	.word	0x3ff00000
 8003cd8:	40590000 	.word	0x40590000

08003cdc <MRT_getContinuity>:
 * Checks the continuity of the gates
 *
 * returns a binary number in its decimal form. Each bit is the state of a gate.
 * bit3 bit2 bit1 bit0 = drogue1 drogue2 prop1 prop2
 */
uint8_t MRT_getContinuity(void){
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
	uint8_t drogue1 = HAL_GPIO_ReadPin(IN_EJ_Drogue_Cont_GPIO_Port, IN_EJ_Drogue_Cont_Pin);
 8003ce2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003ce6:	4815      	ldr	r0, [pc, #84]	; (8003d3c <MRT_getContinuity+0x60>)
 8003ce8:	f009 fb02 	bl	800d2f0 <HAL_GPIO_ReadPin>
 8003cec:	4603      	mov	r3, r0
 8003cee:	71fb      	strb	r3, [r7, #7]
	uint8_t drogue2 = HAL_GPIO_ReadPin(IN_EJ_Main_Cont_GPIO_Port, IN_EJ_Main_Cont_Pin);
 8003cf0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003cf4:	4811      	ldr	r0, [pc, #68]	; (8003d3c <MRT_getContinuity+0x60>)
 8003cf6:	f009 fafb 	bl	800d2f0 <HAL_GPIO_ReadPin>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	71bb      	strb	r3, [r7, #6]
	uint8_t prop1 = HAL_GPIO_ReadPin(IN_PyroValve_Cont_1_GPIO_Port, IN_PyroValve_Cont_1_Pin);
 8003cfe:	2101      	movs	r1, #1
 8003d00:	480e      	ldr	r0, [pc, #56]	; (8003d3c <MRT_getContinuity+0x60>)
 8003d02:	f009 faf5 	bl	800d2f0 <HAL_GPIO_ReadPin>
 8003d06:	4603      	mov	r3, r0
 8003d08:	717b      	strb	r3, [r7, #5]
	uint8_t prop2 = HAL_GPIO_ReadPin(IN_PyroValve_Cont_2_GPIO_Port, IN_PyroValve_Cont_2_Pin);
 8003d0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d0e:	480c      	ldr	r0, [pc, #48]	; (8003d40 <MRT_getContinuity+0x64>)
 8003d10:	f009 faee 	bl	800d2f0 <HAL_GPIO_ReadPin>
 8003d14:	4603      	mov	r3, r0
 8003d16:	713b      	strb	r3, [r7, #4]
	uint8_t continuity = 8*drogue1 + 4*drogue2 + 2*prop1 + prop2;
 8003d18:	79fb      	ldrb	r3, [r7, #7]
 8003d1a:	005a      	lsls	r2, r3, #1
 8003d1c:	79bb      	ldrb	r3, [r7, #6]
 8003d1e:	4413      	add	r3, r2
 8003d20:	005a      	lsls	r2, r3, #1
 8003d22:	797b      	ldrb	r3, [r7, #5]
 8003d24:	4413      	add	r3, r2
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	005b      	lsls	r3, r3, #1
 8003d2a:	b2da      	uxtb	r2, r3
 8003d2c:	793b      	ldrb	r3, [r7, #4]
 8003d2e:	4413      	add	r3, r2
 8003d30:	70fb      	strb	r3, [r7, #3]
	return continuity;
 8003d32:	78fb      	ldrb	r3, [r7, #3]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3708      	adds	r7, #8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	40021800 	.word	0x40021800
 8003d40:	40021400 	.word	0x40021400

08003d44 <MRT_formatAvionics>:


// formats avionics telemetry string using sprintf
void MRT_formatAvionics(void) {
 8003d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d48:	b0a3      	sub	sp, #140	; 0x8c
 8003d4a:	af16      	add	r7, sp, #88	; 0x58
	memset(msg_buffer_av, 0, 200);
 8003d4c:	22c8      	movs	r2, #200	; 0xc8
 8003d4e:	2100      	movs	r1, #0
 8003d50:	483c      	ldr	r0, [pc, #240]	; (8003e44 <MRT_formatAvionics+0x100>)
 8003d52:	f016 fe91 	bl	801aa78 <memset>
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
		hlsm6dsr.acceleration_mg[0],	hlsm6dsr.acceleration_mg[1],	hlsm6dsr.acceleration_mg[2],
 8003d56:	4b3c      	ldr	r3, [pc, #240]	; (8003e48 <MRT_formatAvionics+0x104>)
 8003d58:	681b      	ldr	r3, [r3, #0]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7fc fc14 	bl	8000588 <__aeabi_f2d>
 8003d60:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
		hlsm6dsr.acceleration_mg[0],	hlsm6dsr.acceleration_mg[1],	hlsm6dsr.acceleration_mg[2],
 8003d64:	4b38      	ldr	r3, [pc, #224]	; (8003e48 <MRT_formatAvionics+0x104>)
 8003d66:	685b      	ldr	r3, [r3, #4]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7fc fc0d 	bl	8000588 <__aeabi_f2d>
 8003d6e:	e9c7 0108 	strd	r0, r1, [r7, #32]
		hlsm6dsr.acceleration_mg[0],	hlsm6dsr.acceleration_mg[1],	hlsm6dsr.acceleration_mg[2],
 8003d72:	4b35      	ldr	r3, [pc, #212]	; (8003e48 <MRT_formatAvionics+0x104>)
 8003d74:	689b      	ldr	r3, [r3, #8]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7fc fc06 	bl	8000588 <__aeabi_f2d>
 8003d7c:	e9c7 0106 	strd	r0, r1, [r7, #24]
		hlsm6dsr.angular_rate_mdps[0],	hlsm6dsr.angular_rate_mdps[1],	hlsm6dsr.angular_rate_mdps[2],
 8003d80:	4b31      	ldr	r3, [pc, #196]	; (8003e48 <MRT_formatAvionics+0x104>)
 8003d82:	68db      	ldr	r3, [r3, #12]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7fc fbff 	bl	8000588 <__aeabi_f2d>
 8003d8a:	e9c7 0104 	strd	r0, r1, [r7, #16]
		hlsm6dsr.angular_rate_mdps[0],	hlsm6dsr.angular_rate_mdps[1],	hlsm6dsr.angular_rate_mdps[2],
 8003d8e:	4b2e      	ldr	r3, [pc, #184]	; (8003e48 <MRT_formatAvionics+0x104>)
 8003d90:	691b      	ldr	r3, [r3, #16]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7fc fbf8 	bl	8000588 <__aeabi_f2d>
 8003d98:	e9c7 0102 	strd	r0, r1, [r7, #8]
		hlsm6dsr.angular_rate_mdps[0],	hlsm6dsr.angular_rate_mdps[1],	hlsm6dsr.angular_rate_mdps[2],
 8003d9c:	4b2a      	ldr	r3, [pc, #168]	; (8003e48 <MRT_formatAvionics+0x104>)
 8003d9e:	695b      	ldr	r3, [r3, #20]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7fc fbf1 	bl	8000588 <__aeabi_f2d>
 8003da6:	e9c7 0100 	strd	r0, r1, [r7]
		hlps22hh.pressure_hPa,	hgps.latitude,	hgps.longitude,
 8003daa:	4b28      	ldr	r3, [pc, #160]	; (8003e4c <MRT_formatAvionics+0x108>)
 8003dac:	681b      	ldr	r3, [r3, #0]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fc fbea 	bl	8000588 <__aeabi_f2d>
 8003db4:	4682      	mov	sl, r0
 8003db6:	468b      	mov	fp, r1
		hlps22hh.pressure_hPa,	hgps.latitude,	hgps.longitude,
 8003db8:	4b25      	ldr	r3, [pc, #148]	; (8003e50 <MRT_formatAvionics+0x10c>)
 8003dba:	681b      	ldr	r3, [r3, #0]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7fc fbe3 	bl	8000588 <__aeabi_f2d>
 8003dc2:	4680      	mov	r8, r0
 8003dc4:	4689      	mov	r9, r1
		hlps22hh.pressure_hPa,	hgps.latitude,	hgps.longitude,
 8003dc6:	4b22      	ldr	r3, [pc, #136]	; (8003e50 <MRT_formatAvionics+0x10c>)
 8003dc8:	685b      	ldr	r3, [r3, #4]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7fc fbdc 	bl	8000588 <__aeabi_f2d>
 8003dd0:	4604      	mov	r4, r0
 8003dd2:	460d      	mov	r5, r1
 8003dd4:	4b1f      	ldr	r3, [pc, #124]	; (8003e54 <MRT_formatAvionics+0x110>)
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	461e      	mov	r6, r3
 8003dda:	4b1f      	ldr	r3, [pc, #124]	; (8003e58 <MRT_formatAvionics+0x114>)
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	4618      	mov	r0, r3
 8003de0:	4b1e      	ldr	r3, [pc, #120]	; (8003e5c <MRT_formatAvionics+0x118>)
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	4b1e      	ldr	r3, [pc, #120]	; (8003e60 <MRT_formatAvionics+0x11c>)
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	4619      	mov	r1, r3
 8003dea:	4b1e      	ldr	r3, [pc, #120]	; (8003e64 <MRT_formatAvionics+0x120>)
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	9314      	str	r3, [sp, #80]	; 0x50
 8003df0:	9113      	str	r1, [sp, #76]	; 0x4c
 8003df2:	9212      	str	r2, [sp, #72]	; 0x48
 8003df4:	9011      	str	r0, [sp, #68]	; 0x44
 8003df6:	9610      	str	r6, [sp, #64]	; 0x40
 8003df8:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
 8003dfc:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8003e00:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8003e04:	ed97 7b00 	vldr	d7, [r7]
 8003e08:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003e0c:	ed97 7b02 	vldr	d7, [r7, #8]
 8003e10:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003e14:	ed97 7b04 	vldr	d7, [r7, #16]
 8003e18:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003e1c:	ed97 7b06 	vldr	d7, [r7, #24]
 8003e20:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003e24:	ed97 7b08 	vldr	d7, [r7, #32]
 8003e28:	ed8d 7b00 	vstr	d7, [sp]
 8003e2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e30:	490d      	ldr	r1, [pc, #52]	; (8003e68 <MRT_formatAvionics+0x124>)
 8003e32:	4804      	ldr	r0, [pc, #16]	; (8003e44 <MRT_formatAvionics+0x100>)
 8003e34:	f018 f91c 	bl	801c070 <siprintf>
		prev_min, prev_sec, prev_subsec,
		gates_continuity,	ejection_stage_flag);
}
 8003e38:	bf00      	nop
 8003e3a:	3734      	adds	r7, #52	; 0x34
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e42:	bf00      	nop
 8003e44:	200089f0 	.word	0x200089f0
 8003e48:	2000052c 	.word	0x2000052c
 8003e4c:	20000558 	.word	0x20000558
 8003e50:	2000056c 	.word	0x2000056c
 8003e54:	200003fe 	.word	0x200003fe
 8003e58:	200003ff 	.word	0x200003ff
 8003e5c:	20000400 	.word	0x20000400
 8003e60:	200003e7 	.word	0x200003e7
 8003e64:	200003fc 	.word	0x200003fc
 8003e68:	08020d84 	.word	0x08020d84

08003e6c <MRT_external_flash_Init>:


//**************************************************//
//FUNCTIONS

void MRT_external_flash_Init(void){
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0

	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003e72:	2300      	movs	r3, #0
 8003e74:	607b      	str	r3, [r7, #4]
 8003e76:	e007      	b.n	8003e88 <MRT_external_flash_Init+0x1c>
		FLAGS_NULL_BUFFER[i] = 0; //Setup the flags null buffer for the correct number of values
 8003e78:	4a13      	ldr	r2, [pc, #76]	; (8003ec8 <MRT_external_flash_Init+0x5c>)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	2200      	movs	r2, #0
 8003e80:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	3301      	adds	r3, #1
 8003e86:	607b      	str	r3, [r7, #4]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b04      	cmp	r3, #4
 8003e8c:	ddf4      	ble.n	8003e78 <MRT_external_flash_Init+0xc>
	}

	if (!W25qxx_Init()) {
 8003e8e:	f000 feb1 	bl	8004bf4 <W25qxx_Init>
 8003e92:	4603      	mov	r3, r0
 8003e94:	f083 0301 	eor.w	r3, r3, #1
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <MRT_external_flash_Init+0x36>
		Error_Handler(); // hangs and blinks LEDF
 8003e9e:	f7fe fe6b 	bl	8002b78 <Error_Handler>
	}

	//Retrieve flags
	W25qxx_ReadSector(ext_flash_flags_buffer, FLAGS_SECTOR, FLAGS_OFFSET, NB_OF_FLAGS);
 8003ea2:	2305      	movs	r3, #5
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	4808      	ldr	r0, [pc, #32]	; (8003ecc <MRT_external_flash_Init+0x60>)
 8003eaa:	f001 fa7d 	bl	80053a8 <W25qxx_ReadSector>

	//Retrieve RTC time (last recorded)
	W25qxx_ReadSector(ext_flash_time_buffer, RTC_SECTOR, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 8003eae:	2304      	movs	r3, #4
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	2102      	movs	r1, #2
 8003eb4:	4806      	ldr	r0, [pc, #24]	; (8003ed0 <MRT_external_flash_Init+0x64>)
 8003eb6:	f001 fa77 	bl	80053a8 <W25qxx_ReadSector>

	//Assign each value read to their variable
	MRT_updateExternalFlashValues();
 8003eba:	f000 f843 	bl	8003f44 <MRT_updateExternalFlashValues>
}
 8003ebe:	bf00      	nop
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	20008ab8 	.word	0x20008ab8
 8003ecc:	20008ac4 	.word	0x20008ac4
 8003ed0:	20008ac0 	.word	0x20008ac0

08003ed4 <MRT_updateExternalFlashBuffers>:


void MRT_updateExternalFlashBuffers(void){
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003eda:	2300      	movs	r3, #0
 8003edc:	607b      	str	r3, [r7, #4]
 8003ede:	e00c      	b.n	8003efa <MRT_updateExternalFlashBuffers+0x26>
		ext_flash_flags_buffer[i] = *ext_flash_flags[i];
 8003ee0:	4a14      	ldr	r2, [pc, #80]	; (8003f34 <MRT_updateExternalFlashBuffers+0x60>)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ee8:	7819      	ldrb	r1, [r3, #0]
 8003eea:	4a13      	ldr	r2, [pc, #76]	; (8003f38 <MRT_updateExternalFlashBuffers+0x64>)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4413      	add	r3, r2
 8003ef0:	460a      	mov	r2, r1
 8003ef2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	607b      	str	r3, [r7, #4]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2b04      	cmp	r3, #4
 8003efe:	ddef      	ble.n	8003ee0 <MRT_updateExternalFlashBuffers+0xc>
	}
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 8003f00:	2300      	movs	r3, #0
 8003f02:	603b      	str	r3, [r7, #0]
 8003f04:	e00c      	b.n	8003f20 <MRT_updateExternalFlashBuffers+0x4c>
		ext_flash_time_buffer[i] = *ext_flash_time[i];
 8003f06:	4a0d      	ldr	r2, [pc, #52]	; (8003f3c <MRT_updateExternalFlashBuffers+0x68>)
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f0e:	7819      	ldrb	r1, [r3, #0]
 8003f10:	4a0b      	ldr	r2, [pc, #44]	; (8003f40 <MRT_updateExternalFlashBuffers+0x6c>)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	4413      	add	r3, r2
 8003f16:	460a      	mov	r2, r1
 8003f18:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	603b      	str	r3, [r7, #0]
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	2b03      	cmp	r3, #3
 8003f24:	ddef      	ble.n	8003f06 <MRT_updateExternalFlashBuffers+0x32>
	}
}
 8003f26:	bf00      	nop
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr
 8003f34:	2000008c 	.word	0x2000008c
 8003f38:	20008ac4 	.word	0x20008ac4
 8003f3c:	200000a0 	.word	0x200000a0
 8003f40:	20008ac0 	.word	0x20008ac0

08003f44 <MRT_updateExternalFlashValues>:


void MRT_updateExternalFlashValues(void){
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	607b      	str	r3, [r7, #4]
 8003f4e:	e00b      	b.n	8003f68 <MRT_updateExternalFlashValues+0x24>
		*ext_flash_flags[i] = ext_flash_flags_buffer[i];
 8003f50:	4a13      	ldr	r2, [pc, #76]	; (8003fa0 <MRT_updateExternalFlashValues+0x5c>)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f58:	4912      	ldr	r1, [pc, #72]	; (8003fa4 <MRT_updateExternalFlashValues+0x60>)
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	440a      	add	r2, r1
 8003f5e:	7812      	ldrb	r2, [r2, #0]
 8003f60:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	3301      	adds	r3, #1
 8003f66:	607b      	str	r3, [r7, #4]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b04      	cmp	r3, #4
 8003f6c:	ddf0      	ble.n	8003f50 <MRT_updateExternalFlashValues+0xc>
	}
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 8003f6e:	2300      	movs	r3, #0
 8003f70:	603b      	str	r3, [r7, #0]
 8003f72:	e00b      	b.n	8003f8c <MRT_updateExternalFlashValues+0x48>
		*ext_flash_time[i] = ext_flash_time_buffer[i];
 8003f74:	4a0c      	ldr	r2, [pc, #48]	; (8003fa8 <MRT_updateExternalFlashValues+0x64>)
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f7c:	490b      	ldr	r1, [pc, #44]	; (8003fac <MRT_updateExternalFlashValues+0x68>)
 8003f7e:	683a      	ldr	r2, [r7, #0]
 8003f80:	440a      	add	r2, r1
 8003f82:	7812      	ldrb	r2, [r2, #0]
 8003f84:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	3301      	adds	r3, #1
 8003f8a:	603b      	str	r3, [r7, #0]
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	2b03      	cmp	r3, #3
 8003f90:	ddf0      	ble.n	8003f74 <MRT_updateExternalFlashValues+0x30>
	}
}
 8003f92:	bf00      	nop
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr
 8003fa0:	2000008c 	.word	0x2000008c
 8003fa4:	20008ac4 	.word	0x20008ac4
 8003fa8:	200000a0 	.word	0x200000a0
 8003fac:	20008ac0 	.word	0x20008ac0

08003fb0 <MRT_clearExternalFlash>:


void MRT_clearExternalFlash(void){
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	af00      	add	r7, sp, #0
	//Clear flags
	W25qxx_EraseSector(FLAGS_SECTOR);
 8003fb4:	2001      	movs	r0, #1
 8003fb6:	f000 ff6f 	bl	8004e98 <W25qxx_EraseSector>
	W25qxx_WriteSector(FLAGS_NULL_BUFFER, FLAGS_SECTOR, FLAGS_OFFSET, NB_OF_FLAGS);
 8003fba:	2305      	movs	r3, #5
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	4806      	ldr	r0, [pc, #24]	; (8003fdc <MRT_clearExternalFlash+0x2c>)
 8003fc2:	f001 f8b3 	bl	800512c <W25qxx_WriteSector>

	//Clear RTC time (last recorded)
	W25qxx_EraseSector(RTC_SECTOR);
 8003fc6:	2002      	movs	r0, #2
 8003fc8:	f000 ff66 	bl	8004e98 <W25qxx_EraseSector>
	W25qxx_WriteSector(RTC_TIME_NULL_BUFFER, RTC_SECTOR, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 8003fcc:	2304      	movs	r3, #4
 8003fce:	2200      	movs	r2, #0
 8003fd0:	2102      	movs	r1, #2
 8003fd2:	4803      	ldr	r0, [pc, #12]	; (8003fe0 <MRT_clearExternalFlash+0x30>)
 8003fd4:	f001 f8aa 	bl	800512c <W25qxx_WriteSector>
}
 8003fd8:	bf00      	nop
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	20008ab8 	.word	0x20008ab8
 8003fe0:	200003f4 	.word	0x200003f4

08003fe4 <MRT_saveFlagValue>:
//Public functions

/*
 * Save a flag value (value updated outside the function)
 */
void MRT_saveFlagValue(rtc_backup_reg state){
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	4603      	mov	r3, r0
 8003fec:	71fb      	strb	r3, [r7, #7]
	//Write new flags to flash memory
	MRT_updateExternalFlashBuffers();
 8003fee:	f7ff ff71 	bl	8003ed4 <MRT_updateExternalFlashBuffers>
	W25qxx_EraseSector(FLAGS_SECTOR);
 8003ff2:	2001      	movs	r0, #1
 8003ff4:	f000 ff50 	bl	8004e98 <W25qxx_EraseSector>
	W25qxx_WriteSector(ext_flash_flags_buffer, FLAGS_SECTOR, FLAGS_OFFSET, NB_OF_FLAGS);
 8003ff8:	2305      	movs	r3, #5
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	2101      	movs	r1, #1
 8003ffe:	4808      	ldr	r0, [pc, #32]	; (8004020 <MRT_saveFlagValue+0x3c>)
 8004000:	f001 f894 	bl	800512c <W25qxx_WriteSector>

	//Write new flag to RTC backup register
	MRT_RTC_setBackupReg(state, *rtc_bckp_regs[state]);
 8004004:	79fb      	ldrb	r3, [r7, #7]
 8004006:	4a07      	ldr	r2, [pc, #28]	; (8004024 <MRT_saveFlagValue+0x40>)
 8004008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	79fb      	ldrb	r3, [r7, #7]
 8004010:	4611      	mov	r1, r2
 8004012:	4618      	mov	r0, r3
 8004014:	f7ff f90e 	bl	8003234 <MRT_RTC_setBackupReg>
}
 8004018:	bf00      	nop
 800401a:	3708      	adds	r7, #8
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	20008ac4 	.word	0x20008ac4
 8004024:	2000003c 	.word	0x2000003c

08004028 <MRT_checkFlagsValues>:


/*
 * Check for memory issues
 */
uint8_t MRT_checkFlagsValues(rtc_backup_reg val_index, uint32_t max_val){
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	4603      	mov	r3, r0
 8004030:	6039      	str	r1, [r7, #0]
 8004032:	71fb      	strb	r3, [r7, #7]

	uint8_t ret = true;
 8004034:	2301      	movs	r3, #1
 8004036:	73fb      	strb	r3, [r7, #15]

	//Check for a random value (unsigned int so can't be negative)
	if (*rtc_bckp_regs[val_index] > max_val){
 8004038:	79fb      	ldrb	r3, [r7, #7]
 800403a:	4a2e      	ldr	r2, [pc, #184]	; (80040f4 <MRT_checkFlagsValues+0xcc>)
 800403c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	429a      	cmp	r2, r3
 8004046:	d207      	bcs.n	8004058 <MRT_checkFlagsValues+0x30>
		*rtc_bckp_regs[val_index] = 0;
 8004048:	79fb      	ldrb	r3, [r7, #7]
 800404a:	4a2a      	ldr	r2, [pc, #168]	; (80040f4 <MRT_checkFlagsValues+0xcc>)
 800404c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004050:	2200      	movs	r2, #0
 8004052:	601a      	str	r2, [r3, #0]
		ret = false;
 8004054:	2300      	movs	r3, #0
 8004056:	73fb      	strb	r3, [r7, #15]
	}
	if (*ext_flash_flags[val_index] > max_val){
 8004058:	79fb      	ldrb	r3, [r7, #7]
 800405a:	4a27      	ldr	r2, [pc, #156]	; (80040f8 <MRT_checkFlagsValues+0xd0>)
 800405c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	461a      	mov	r2, r3
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	4293      	cmp	r3, r2
 8004068:	d207      	bcs.n	800407a <MRT_checkFlagsValues+0x52>
		*ext_flash_flags[val_index] = 0;
 800406a:	79fb      	ldrb	r3, [r7, #7]
 800406c:	4a22      	ldr	r2, [pc, #136]	; (80040f8 <MRT_checkFlagsValues+0xd0>)
 800406e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004072:	2200      	movs	r2, #0
 8004074:	701a      	strb	r2, [r3, #0]
		ret = false;
 8004076:	2300      	movs	r3, #0
 8004078:	73fb      	strb	r3, [r7, #15]
	}

	if (*rtc_bckp_regs[val_index] != *ext_flash_flags[val_index]){
 800407a:	79fb      	ldrb	r3, [r7, #7]
 800407c:	4a1d      	ldr	r2, [pc, #116]	; (80040f4 <MRT_checkFlagsValues+0xcc>)
 800407e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	79fa      	ldrb	r2, [r7, #7]
 8004086:	491c      	ldr	r1, [pc, #112]	; (80040f8 <MRT_checkFlagsValues+0xd0>)
 8004088:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800408c:	7812      	ldrb	r2, [r2, #0]
 800408e:	4293      	cmp	r3, r2
 8004090:	d028      	beq.n	80040e4 <MRT_checkFlagsValues+0xbc>
		*rtc_bckp_regs[val_index] = MAX(*rtc_bckp_regs[val_index], *ext_flash_flags[val_index]);
 8004092:	79fb      	ldrb	r3, [r7, #7]
 8004094:	4a18      	ldr	r2, [pc, #96]	; (80040f8 <MRT_checkFlagsValues+0xd0>)
 8004096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	4618      	mov	r0, r3
 800409e:	79fb      	ldrb	r3, [r7, #7]
 80040a0:	4a14      	ldr	r2, [pc, #80]	; (80040f4 <MRT_checkFlagsValues+0xcc>)
 80040a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	79fb      	ldrb	r3, [r7, #7]
 80040aa:	4912      	ldr	r1, [pc, #72]	; (80040f4 <MRT_checkFlagsValues+0xcc>)
 80040ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80040b0:	4282      	cmp	r2, r0
 80040b2:	bf38      	it	cc
 80040b4:	4602      	movcc	r2, r0
 80040b6:	601a      	str	r2, [r3, #0]
		*ext_flash_flags[val_index] = MAX(*rtc_bckp_regs[val_index], *ext_flash_flags[val_index]);
 80040b8:	79fb      	ldrb	r3, [r7, #7]
 80040ba:	4a0f      	ldr	r2, [pc, #60]	; (80040f8 <MRT_checkFlagsValues+0xd0>)
 80040bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	4619      	mov	r1, r3
 80040c4:	79fb      	ldrb	r3, [r7, #7]
 80040c6:	4a0b      	ldr	r2, [pc, #44]	; (80040f4 <MRT_checkFlagsValues+0xcc>)
 80040c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4299      	cmp	r1, r3
 80040d0:	bf38      	it	cc
 80040d2:	4619      	movcc	r1, r3
 80040d4:	79fb      	ldrb	r3, [r7, #7]
 80040d6:	4a08      	ldr	r2, [pc, #32]	; (80040f8 <MRT_checkFlagsValues+0xd0>)
 80040d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040dc:	b2ca      	uxtb	r2, r1
 80040de:	701a      	strb	r2, [r3, #0]
		ret = false;
 80040e0:	2300      	movs	r3, #0
 80040e2:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 80040e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3714      	adds	r7, #20
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	2000003c 	.word	0x2000003c
 80040f8:	2000008c 	.word	0x2000008c

080040fc <MRT_saveTotalTime>:
//Public functions

/*
 * Update every time values in memory
 */
void MRT_saveTotalTime(void){
 80040fc:	b580      	push	{r7, lr}
 80040fe:	af00      	add	r7, sp, #0

	//Update variables
	MRT_updateTimeValues();
 8004100:	f000 f852 	bl	80041a8 <MRT_updateTimeValues>

	//Write new RTC time to external flash
	MRT_updateExternalFlashBuffers();
 8004104:	f7ff fee6 	bl	8003ed4 <MRT_updateExternalFlashBuffers>
	W25qxx_EraseSector(RTC_SECTOR);
 8004108:	2002      	movs	r0, #2
 800410a:	f000 fec5 	bl	8004e98 <W25qxx_EraseSector>
	W25qxx_WriteSector(ext_flash_time_buffer, RTC_SECTOR, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 800410e:	2304      	movs	r3, #4
 8004110:	2200      	movs	r2, #0
 8004112:	2102      	movs	r1, #2
 8004114:	480e      	ldr	r0, [pc, #56]	; (8004150 <MRT_saveTotalTime+0x54>)
 8004116:	f001 f809 	bl	800512c <W25qxx_WriteSector>

	//Write new RTC time to backup registers
	MRT_RTC_setBackupReg(RTC_HOUR, rtc_bckp_reg_hour);
 800411a:	4b0e      	ldr	r3, [pc, #56]	; (8004154 <MRT_saveTotalTime+0x58>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4619      	mov	r1, r3
 8004120:	2005      	movs	r0, #5
 8004122:	f7ff f887 	bl	8003234 <MRT_RTC_setBackupReg>
	MRT_RTC_setBackupReg(RTC_MINUTE, rtc_bckp_reg_min);
 8004126:	4b0c      	ldr	r3, [pc, #48]	; (8004158 <MRT_saveTotalTime+0x5c>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4619      	mov	r1, r3
 800412c:	2006      	movs	r0, #6
 800412e:	f7ff f881 	bl	8003234 <MRT_RTC_setBackupReg>
	MRT_RTC_setBackupReg(RTC_SECOND, rtc_bckp_reg_sec);
 8004132:	4b0a      	ldr	r3, [pc, #40]	; (800415c <MRT_saveTotalTime+0x60>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4619      	mov	r1, r3
 8004138:	2007      	movs	r0, #7
 800413a:	f7ff f87b 	bl	8003234 <MRT_RTC_setBackupReg>
	MRT_RTC_setBackupReg(RTC_SUBSEC, rtc_bckp_reg_subsec);
 800413e:	4b08      	ldr	r3, [pc, #32]	; (8004160 <MRT_saveTotalTime+0x64>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4619      	mov	r1, r3
 8004144:	2008      	movs	r0, #8
 8004146:	f7ff f875 	bl	8003234 <MRT_RTC_setBackupReg>
}
 800414a:	bf00      	nop
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	20008ac0 	.word	0x20008ac0
 8004154:	200003ac 	.word	0x200003ac
 8004158:	200003b0 	.word	0x200003b0
 800415c:	200003b4 	.word	0x200003b4
 8004160:	200003b8 	.word	0x200003b8

08004164 <MRT_saveTimeValue>:
//Private functions

/*
 * Save an RTC value (value updated outside the function)
 */
void MRT_saveTimeValue(rtc_backup_reg state){
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	4603      	mov	r3, r0
 800416c:	71fb      	strb	r3, [r7, #7]

	//Write new RTC time to flash memory
	MRT_updateExternalFlashBuffers();
 800416e:	f7ff feb1 	bl	8003ed4 <MRT_updateExternalFlashBuffers>
	W25qxx_EraseSector(RTC_SECTOR);
 8004172:	2002      	movs	r0, #2
 8004174:	f000 fe90 	bl	8004e98 <W25qxx_EraseSector>
	W25qxx_WriteSector(ext_flash_time_buffer, RTC_SECTOR, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 8004178:	2304      	movs	r3, #4
 800417a:	2200      	movs	r2, #0
 800417c:	2102      	movs	r1, #2
 800417e:	4808      	ldr	r0, [pc, #32]	; (80041a0 <MRT_saveTimeValue+0x3c>)
 8004180:	f000 ffd4 	bl	800512c <W25qxx_WriteSector>

	//Write new RTC time to backup registers
	MRT_RTC_setBackupReg(state, *rtc_bckp_regs[state]);
 8004184:	79fb      	ldrb	r3, [r7, #7]
 8004186:	4a07      	ldr	r2, [pc, #28]	; (80041a4 <MRT_saveTimeValue+0x40>)
 8004188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	79fb      	ldrb	r3, [r7, #7]
 8004190:	4611      	mov	r1, r2
 8004192:	4618      	mov	r0, r3
 8004194:	f7ff f84e 	bl	8003234 <MRT_RTC_setBackupReg>
}
 8004198:	bf00      	nop
 800419a:	3708      	adds	r7, #8
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	20008ac0 	.word	0x20008ac0
 80041a4:	2000003c 	.word	0x2000003c

080041a8 <MRT_updateTimeValues>:


/*
 * Update all time values
 */
void MRT_updateTimeValues(void){
 80041a8:	b480      	push	{r7}
 80041aa:	af00      	add	r7, sp, #0
	//External Flash
	ext_flash_hour = prev_hour;
 80041ac:	4b13      	ldr	r3, [pc, #76]	; (80041fc <MRT_updateTimeValues+0x54>)
 80041ae:	781a      	ldrb	r2, [r3, #0]
 80041b0:	4b13      	ldr	r3, [pc, #76]	; (8004200 <MRT_updateTimeValues+0x58>)
 80041b2:	701a      	strb	r2, [r3, #0]
	ext_flash_min = prev_min;
 80041b4:	4b13      	ldr	r3, [pc, #76]	; (8004204 <MRT_updateTimeValues+0x5c>)
 80041b6:	781a      	ldrb	r2, [r3, #0]
 80041b8:	4b13      	ldr	r3, [pc, #76]	; (8004208 <MRT_updateTimeValues+0x60>)
 80041ba:	701a      	strb	r2, [r3, #0]
	ext_flash_sec = prev_sec;
 80041bc:	4b13      	ldr	r3, [pc, #76]	; (800420c <MRT_updateTimeValues+0x64>)
 80041be:	781a      	ldrb	r2, [r3, #0]
 80041c0:	4b13      	ldr	r3, [pc, #76]	; (8004210 <MRT_updateTimeValues+0x68>)
 80041c2:	701a      	strb	r2, [r3, #0]
	ext_flash_subsec = prev_subsec;
 80041c4:	4b13      	ldr	r3, [pc, #76]	; (8004214 <MRT_updateTimeValues+0x6c>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a13      	ldr	r2, [pc, #76]	; (8004218 <MRT_updateTimeValues+0x70>)
 80041ca:	6013      	str	r3, [r2, #0]

	//RTC backup registers
	rtc_bckp_reg_hour = prev_hour;
 80041cc:	4b0b      	ldr	r3, [pc, #44]	; (80041fc <MRT_updateTimeValues+0x54>)
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	461a      	mov	r2, r3
 80041d2:	4b12      	ldr	r3, [pc, #72]	; (800421c <MRT_updateTimeValues+0x74>)
 80041d4:	601a      	str	r2, [r3, #0]
	rtc_bckp_reg_min = prev_min;
 80041d6:	4b0b      	ldr	r3, [pc, #44]	; (8004204 <MRT_updateTimeValues+0x5c>)
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	461a      	mov	r2, r3
 80041dc:	4b10      	ldr	r3, [pc, #64]	; (8004220 <MRT_updateTimeValues+0x78>)
 80041de:	601a      	str	r2, [r3, #0]
	rtc_bckp_reg_sec = prev_sec;
 80041e0:	4b0a      	ldr	r3, [pc, #40]	; (800420c <MRT_updateTimeValues+0x64>)
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	461a      	mov	r2, r3
 80041e6:	4b0f      	ldr	r3, [pc, #60]	; (8004224 <MRT_updateTimeValues+0x7c>)
 80041e8:	601a      	str	r2, [r3, #0]
	rtc_bckp_reg_subsec = prev_subsec;
 80041ea:	4b0a      	ldr	r3, [pc, #40]	; (8004214 <MRT_updateTimeValues+0x6c>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a0e      	ldr	r2, [pc, #56]	; (8004228 <MRT_updateTimeValues+0x80>)
 80041f0:	6013      	str	r3, [r2, #0]
}
 80041f2:	bf00      	nop
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr
 80041fc:	200003fd 	.word	0x200003fd
 8004200:	200003ed 	.word	0x200003ed
 8004204:	200003fe 	.word	0x200003fe
 8004208:	200003ee 	.word	0x200003ee
 800420c:	200003ff 	.word	0x200003ff
 8004210:	200003ef 	.word	0x200003ef
 8004214:	20000400 	.word	0x20000400
 8004218:	200003f0 	.word	0x200003f0
 800421c:	200003ac 	.word	0x200003ac
 8004220:	200003b0 	.word	0x200003b0
 8004224:	200003b4 	.word	0x200003b4
 8004228:	200003b8 	.word	0x200003b8

0800422c <MRT_checkTimeValues>:


/*
 * Check for memory issues
 */
uint8_t MRT_checkTimeValues(rtc_backup_reg val_index, uint32_t max_val){
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	4603      	mov	r3, r0
 8004234:	6039      	str	r1, [r7, #0]
 8004236:	71fb      	strb	r3, [r7, #7]

	uint8_t ret = true;
 8004238:	2301      	movs	r3, #1
 800423a:	73fb      	strb	r3, [r7, #15]

	//Check for a random value (unsigned int so can't be negative)
	if (*rtc_bckp_regs[val_index] > max_val){
 800423c:	79fb      	ldrb	r3, [r7, #7]
 800423e:	4a31      	ldr	r2, [pc, #196]	; (8004304 <MRT_checkTimeValues+0xd8>)
 8004240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	429a      	cmp	r2, r3
 800424a:	d207      	bcs.n	800425c <MRT_checkTimeValues+0x30>
		*rtc_bckp_regs[val_index] = 0;
 800424c:	79fb      	ldrb	r3, [r7, #7]
 800424e:	4a2d      	ldr	r2, [pc, #180]	; (8004304 <MRT_checkTimeValues+0xd8>)
 8004250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004254:	2200      	movs	r2, #0
 8004256:	601a      	str	r2, [r3, #0]
		ret = false;
 8004258:	2300      	movs	r3, #0
 800425a:	73fb      	strb	r3, [r7, #15]
	}
	if (*ext_flash_time[val_index - NB_OF_FLAGS] > max_val){
 800425c:	79fb      	ldrb	r3, [r7, #7]
 800425e:	3b05      	subs	r3, #5
 8004260:	4a29      	ldr	r2, [pc, #164]	; (8004308 <MRT_checkTimeValues+0xdc>)
 8004262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	461a      	mov	r2, r3
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	4293      	cmp	r3, r2
 800426e:	d208      	bcs.n	8004282 <MRT_checkTimeValues+0x56>
		*ext_flash_time[val_index - NB_OF_FLAGS] = 0;
 8004270:	79fb      	ldrb	r3, [r7, #7]
 8004272:	3b05      	subs	r3, #5
 8004274:	4a24      	ldr	r2, [pc, #144]	; (8004308 <MRT_checkTimeValues+0xdc>)
 8004276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800427a:	2200      	movs	r2, #0
 800427c:	701a      	strb	r2, [r3, #0]
		ret = false;
 800427e:	2300      	movs	r3, #0
 8004280:	73fb      	strb	r3, [r7, #15]
	}

	if (*rtc_bckp_regs[val_index] != *ext_flash_time[val_index - NB_OF_FLAGS]){
 8004282:	79fb      	ldrb	r3, [r7, #7]
 8004284:	4a1f      	ldr	r2, [pc, #124]	; (8004304 <MRT_checkTimeValues+0xd8>)
 8004286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	79fa      	ldrb	r2, [r7, #7]
 800428e:	3a05      	subs	r2, #5
 8004290:	491d      	ldr	r1, [pc, #116]	; (8004308 <MRT_checkTimeValues+0xdc>)
 8004292:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004296:	7812      	ldrb	r2, [r2, #0]
 8004298:	4293      	cmp	r3, r2
 800429a:	d02b      	beq.n	80042f4 <MRT_checkTimeValues+0xc8>
		*rtc_bckp_regs[val_index] = MAX(*rtc_bckp_regs[val_index], *ext_flash_time[val_index - NB_OF_FLAGS]);
 800429c:	79fb      	ldrb	r3, [r7, #7]
 800429e:	3b05      	subs	r3, #5
 80042a0:	4a19      	ldr	r2, [pc, #100]	; (8004308 <MRT_checkTimeValues+0xdc>)
 80042a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	4618      	mov	r0, r3
 80042aa:	79fb      	ldrb	r3, [r7, #7]
 80042ac:	4a15      	ldr	r2, [pc, #84]	; (8004304 <MRT_checkTimeValues+0xd8>)
 80042ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	79fb      	ldrb	r3, [r7, #7]
 80042b6:	4913      	ldr	r1, [pc, #76]	; (8004304 <MRT_checkTimeValues+0xd8>)
 80042b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80042bc:	4282      	cmp	r2, r0
 80042be:	bf38      	it	cc
 80042c0:	4602      	movcc	r2, r0
 80042c2:	601a      	str	r2, [r3, #0]
		*ext_flash_time[val_index - NB_OF_FLAGS] = MAX(*rtc_bckp_regs[val_index], *ext_flash_time[val_index - NB_OF_FLAGS]);
 80042c4:	79fb      	ldrb	r3, [r7, #7]
 80042c6:	3b05      	subs	r3, #5
 80042c8:	4a0f      	ldr	r2, [pc, #60]	; (8004308 <MRT_checkTimeValues+0xdc>)
 80042ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	4619      	mov	r1, r3
 80042d2:	79fb      	ldrb	r3, [r7, #7]
 80042d4:	4a0b      	ldr	r2, [pc, #44]	; (8004304 <MRT_checkTimeValues+0xd8>)
 80042d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4299      	cmp	r1, r3
 80042de:	bf38      	it	cc
 80042e0:	4619      	movcc	r1, r3
 80042e2:	79fb      	ldrb	r3, [r7, #7]
 80042e4:	3b05      	subs	r3, #5
 80042e6:	4a08      	ldr	r2, [pc, #32]	; (8004308 <MRT_checkTimeValues+0xdc>)
 80042e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042ec:	b2ca      	uxtb	r2, r1
 80042ee:	701a      	strb	r2, [r3, #0]
		ret = false;
 80042f0:	2300      	movs	r3, #0
 80042f2:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 80042f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3714      	adds	r7, #20
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	2000003c 	.word	0x2000003c
 8004308:	200000a0 	.word	0x200000a0

0800430c <MRT_MEMORY_Init>:
//**************************************************//
//MISC


//Public
void MRT_MEMORY_Init(void){
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0

	//External flash
	MRT_external_flash_Init();
 8004310:	f7ff fdac 	bl	8003e6c <MRT_external_flash_Init>

	//Backup registers
	MRT_RTC_backup_regs_Init();
 8004314:	f7fe fee0 	bl	80030d8 <MRT_RTC_backup_regs_Init>

	//Get the previous flags and rtc time from memory
	MRT_stateRestoration();
 8004318:	f000 f82e 	bl	8004378 <MRT_stateRestoration>
	//TODO SD card (doesn't work)
	#if MEMORY_THREAD

		//SD card
		#if SD_CARD_
			HAL_IWDG_Refresh(&hiwdg);
 800431c:	480f      	ldr	r0, [pc, #60]	; (800435c <MRT_MEMORY_Init+0x50>)
 800431e:	f00a f8e3 	bl	800e4e8 <HAL_IWDG_Refresh>

			// check if SD card is inserted
			if (HAL_GPIO_ReadPin(IN_SD_CARD_DETECT_GPIO_Port, IN_SD_CARD_DETECT_Pin) == GPIO_PIN_RESET) {
 8004322:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004326:	480e      	ldr	r0, [pc, #56]	; (8004360 <MRT_MEMORY_Init+0x54>)
 8004328:	f008 ffe2 	bl	800d2f0 <HAL_GPIO_ReadPin>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10f      	bne.n	8004352 <MRT_MEMORY_Init+0x46>
			  // init sd card with dynamic filename
			  fres = sd_init_dynamic_filename("AB", sd_file_header, filename);
 8004332:	4a0c      	ldr	r2, [pc, #48]	; (8004364 <MRT_MEMORY_Init+0x58>)
 8004334:	490c      	ldr	r1, [pc, #48]	; (8004368 <MRT_MEMORY_Init+0x5c>)
 8004336:	480d      	ldr	r0, [pc, #52]	; (800436c <MRT_MEMORY_Init+0x60>)
 8004338:	f000 f92e 	bl	8004598 <sd_init_dynamic_filename>
 800433c:	4603      	mov	r3, r0
 800433e:	461a      	mov	r2, r3
 8004340:	4b0b      	ldr	r3, [pc, #44]	; (8004370 <MRT_MEMORY_Init+0x64>)
 8004342:	701a      	strb	r2, [r3, #0]
			  if (fres != FR_OK) {
 8004344:	4b0a      	ldr	r3, [pc, #40]	; (8004370 <MRT_MEMORY_Init+0x64>)
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d005      	beq.n	8004358 <MRT_MEMORY_Init+0x4c>
					Error_Handler();
 800434c:	f7fe fc14 	bl	8002b78 <Error_Handler>
				println("No SD card inserted");
			  //Error_Handler(); TODO no a good idea if SD card stops working for no reason (will stop the FC)
			}
		#endif
	#endif
}
 8004350:	e002      	b.n	8004358 <MRT_MEMORY_Init+0x4c>
				println("No SD card inserted");
 8004352:	4808      	ldr	r0, [pc, #32]	; (8004374 <MRT_MEMORY_Init+0x68>)
 8004354:	f7fc feba 	bl	80010cc <println>
}
 8004358:	bf00      	nop
 800435a:	bd80      	pop	{r7, pc}
 800435c:	20008760 	.word	0x20008760
 8004360:	40020800 	.word	0x40020800
 8004364:	200090e8 	.word	0x200090e8
 8004368:	080229c8 	.word	0x080229c8
 800436c:	08020de0 	.word	0x08020de0
 8004370:	200094e0 	.word	0x200094e0
 8004374:	08020de4 	.word	0x08020de4

08004378 <MRT_stateRestoration>:


//Private

//Get the flags values and RTC time
void MRT_stateRestoration(void){
 8004378:	b580      	push	{r7, lr}
 800437a:	af00      	add	r7, sp, #0

	//Check for a wakeup
	MRT_checkWakeUp();
 800437c:	f000 f8ca 	bl	8004514 <MRT_checkWakeUp>

	//If RTC detected a wake up, update the flash memory and the backup registers
	if (wu_flag == 1){
 8004380:	4b51      	ldr	r3, [pc, #324]	; (80044c8 <MRT_stateRestoration+0x150>)
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d111      	bne.n	80043ac <MRT_stateRestoration+0x34>

		//Update values
		ext_flash_wu += 1;
 8004388:	4b50      	ldr	r3, [pc, #320]	; (80044cc <MRT_stateRestoration+0x154>)
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	3301      	adds	r3, #1
 800438e:	b2da      	uxtb	r2, r3
 8004390:	4b4e      	ldr	r3, [pc, #312]	; (80044cc <MRT_stateRestoration+0x154>)
 8004392:	701a      	strb	r2, [r3, #0]
		rtc_bckp_reg_wu += 1;
 8004394:	4b4e      	ldr	r3, [pc, #312]	; (80044d0 <MRT_stateRestoration+0x158>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	3301      	adds	r3, #1
 800439a:	4a4d      	ldr	r2, [pc, #308]	; (80044d0 <MRT_stateRestoration+0x158>)
 800439c:	6013      	str	r3, [r2, #0]

		//Check for memory issues¸
		MRT_checkFlagsValues(FC_STATE_WU, 2);
 800439e:	2102      	movs	r1, #2
 80043a0:	2001      	movs	r0, #1
 80043a2:	f7ff fe41 	bl	8004028 <MRT_checkFlagsValues>

		//Update memory
		MRT_saveFlagValue(FC_STATE_WU);
 80043a6:	2001      	movs	r0, #1
 80043a8:	f7ff fe1c 	bl	8003fe4 <MRT_saveFlagValue>
	}
	//Update the wu_flag value
	wu_flag = rtc_bckp_reg_wu;
 80043ac:	4b48      	ldr	r3, [pc, #288]	; (80044d0 <MRT_stateRestoration+0x158>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	b2da      	uxtb	r2, r3
 80043b2:	4b45      	ldr	r3, [pc, #276]	; (80044c8 <MRT_stateRestoration+0x150>)
 80043b4:	701a      	strb	r2, [r3, #0]


	//Check flags values

	//Reset flag
	if(MRT_checkFlagsValues(FC_STATE_RESET, 1) == false)	MRT_saveFlagValue(FC_STATE_RESET);
 80043b6:	2101      	movs	r1, #1
 80043b8:	2000      	movs	r0, #0
 80043ba:	f7ff fe35 	bl	8004028 <MRT_checkFlagsValues>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d102      	bne.n	80043ca <MRT_stateRestoration+0x52>
 80043c4:	2000      	movs	r0, #0
 80043c6:	f7ff fe0d 	bl	8003fe4 <MRT_saveFlagValue>
	reset_flag = rtc_bckp_reg_reset;
 80043ca:	4b42      	ldr	r3, [pc, #264]	; (80044d4 <MRT_stateRestoration+0x15c>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	b2da      	uxtb	r2, r3
 80043d0:	4b41      	ldr	r3, [pc, #260]	; (80044d8 <MRT_stateRestoration+0x160>)
 80043d2:	701a      	strb	r2, [r3, #0]

	//Wake up flag (TODO double check??)
	if(MRT_checkFlagsValues(FC_STATE_WU, 1) == false)	MRT_saveFlagValue(FC_STATE_WU);
 80043d4:	2101      	movs	r1, #1
 80043d6:	2001      	movs	r0, #1
 80043d8:	f7ff fe26 	bl	8004028 <MRT_checkFlagsValues>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d102      	bne.n	80043e8 <MRT_stateRestoration+0x70>
 80043e2:	2001      	movs	r0, #1
 80043e4:	f7ff fdfe 	bl	8003fe4 <MRT_saveFlagValue>
	wu_flag = rtc_bckp_reg_wu;
 80043e8:	4b39      	ldr	r3, [pc, #228]	; (80044d0 <MRT_stateRestoration+0x158>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	b2da      	uxtb	r2, r3
 80043ee:	4b36      	ldr	r3, [pc, #216]	; (80044c8 <MRT_stateRestoration+0x150>)
 80043f0:	701a      	strb	r2, [r3, #0]

	//IWDG flag
	if(MRT_checkFlagsValues(FC_STATE_IWDG, 1) == false)	MRT_saveFlagValue(FC_STATE_IWDG);
 80043f2:	2101      	movs	r1, #1
 80043f4:	2002      	movs	r0, #2
 80043f6:	f7ff fe17 	bl	8004028 <MRT_checkFlagsValues>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d102      	bne.n	8004406 <MRT_stateRestoration+0x8e>
 8004400:	2002      	movs	r0, #2
 8004402:	f7ff fdef 	bl	8003fe4 <MRT_saveFlagValue>
	iwdg_flag = rtc_bckp_reg_iwdg;
 8004406:	4b35      	ldr	r3, [pc, #212]	; (80044dc <MRT_stateRestoration+0x164>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	b2da      	uxtb	r2, r3
 800440c:	4b34      	ldr	r3, [pc, #208]	; (80044e0 <MRT_stateRestoration+0x168>)
 800440e:	701a      	strb	r2, [r3, #0]

	//Apogee flag
	if(MRT_checkFlagsValues(FC_STATE_APOGEE, 1) == false)	MRT_saveFlagValue(FC_STATE_APOGEE);
 8004410:	2101      	movs	r1, #1
 8004412:	2003      	movs	r0, #3
 8004414:	f7ff fe08 	bl	8004028 <MRT_checkFlagsValues>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d102      	bne.n	8004424 <MRT_stateRestoration+0xac>
 800441e:	2003      	movs	r0, #3
 8004420:	f7ff fde0 	bl	8003fe4 <MRT_saveFlagValue>
	apogee_flag = rtc_bckp_reg_apogee;
 8004424:	4b2f      	ldr	r3, [pc, #188]	; (80044e4 <MRT_stateRestoration+0x16c>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	b2da      	uxtb	r2, r3
 800442a:	4b2f      	ldr	r3, [pc, #188]	; (80044e8 <MRT_stateRestoration+0x170>)
 800442c:	701a      	strb	r2, [r3, #0]

	//Ejection state flag
	if(MRT_checkFlagsValues(FC_STATE_FLIGHT, 4) == false)	MRT_saveFlagValue(FC_STATE_FLIGHT);
 800442e:	2104      	movs	r1, #4
 8004430:	2004      	movs	r0, #4
 8004432:	f7ff fdf9 	bl	8004028 <MRT_checkFlagsValues>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d102      	bne.n	8004442 <MRT_stateRestoration+0xca>
 800443c:	2004      	movs	r0, #4
 800443e:	f7ff fdd1 	bl	8003fe4 <MRT_saveFlagValue>
	ejection_stage_flag = rtc_bckp_reg_ejection_stage;
 8004442:	4b2a      	ldr	r3, [pc, #168]	; (80044ec <MRT_stateRestoration+0x174>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	b2da      	uxtb	r2, r3
 8004448:	4b29      	ldr	r3, [pc, #164]	; (80044f0 <MRT_stateRestoration+0x178>)
 800444a:	701a      	strb	r2, [r3, #0]


	//Check RTC time values
	//Hours
	if(MRT_checkTimeValues(RTC_HOUR, 23) == false)	MRT_saveTimeValue(RTC_HOUR);
 800444c:	2117      	movs	r1, #23
 800444e:	2005      	movs	r0, #5
 8004450:	f7ff feec 	bl	800422c <MRT_checkTimeValues>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d102      	bne.n	8004460 <MRT_stateRestoration+0xe8>
 800445a:	2005      	movs	r0, #5
 800445c:	f7ff fe82 	bl	8004164 <MRT_saveTimeValue>
	prev_hour = rtc_bckp_reg_hour;
 8004460:	4b24      	ldr	r3, [pc, #144]	; (80044f4 <MRT_stateRestoration+0x17c>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	b2da      	uxtb	r2, r3
 8004466:	4b24      	ldr	r3, [pc, #144]	; (80044f8 <MRT_stateRestoration+0x180>)
 8004468:	701a      	strb	r2, [r3, #0]

	//Minutes
	if(MRT_checkTimeValues(RTC_MINUTE, 59) == false)	MRT_saveTimeValue(RTC_MINUTE);
 800446a:	213b      	movs	r1, #59	; 0x3b
 800446c:	2006      	movs	r0, #6
 800446e:	f7ff fedd 	bl	800422c <MRT_checkTimeValues>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d102      	bne.n	800447e <MRT_stateRestoration+0x106>
 8004478:	2006      	movs	r0, #6
 800447a:	f7ff fe73 	bl	8004164 <MRT_saveTimeValue>
	prev_min = rtc_bckp_reg_min;
 800447e:	4b1f      	ldr	r3, [pc, #124]	; (80044fc <MRT_stateRestoration+0x184>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	b2da      	uxtb	r2, r3
 8004484:	4b1e      	ldr	r3, [pc, #120]	; (8004500 <MRT_stateRestoration+0x188>)
 8004486:	701a      	strb	r2, [r3, #0]

	//Seconds
	if(MRT_checkTimeValues(RTC_SECOND, 59) == false)	MRT_saveTimeValue(RTC_SECOND);
 8004488:	213b      	movs	r1, #59	; 0x3b
 800448a:	2007      	movs	r0, #7
 800448c:	f7ff fece 	bl	800422c <MRT_checkTimeValues>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d102      	bne.n	800449c <MRT_stateRestoration+0x124>
 8004496:	2007      	movs	r0, #7
 8004498:	f7ff fe64 	bl	8004164 <MRT_saveTimeValue>
	prev_sec = rtc_bckp_reg_sec;
 800449c:	4b19      	ldr	r3, [pc, #100]	; (8004504 <MRT_stateRestoration+0x18c>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	b2da      	uxtb	r2, r3
 80044a2:	4b19      	ldr	r3, [pc, #100]	; (8004508 <MRT_stateRestoration+0x190>)
 80044a4:	701a      	strb	r2, [r3, #0]

	//Sub-Seconds
	if(MRT_checkTimeValues(RTC_SUBSEC, 999) == false)	MRT_saveTimeValue(RTC_SUBSEC);
 80044a6:	f240 31e7 	movw	r1, #999	; 0x3e7
 80044aa:	2008      	movs	r0, #8
 80044ac:	f7ff febe 	bl	800422c <MRT_checkTimeValues>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d102      	bne.n	80044bc <MRT_stateRestoration+0x144>
 80044b6:	2008      	movs	r0, #8
 80044b8:	f7ff fe54 	bl	8004164 <MRT_saveTimeValue>
	prev_subsec = rtc_bckp_reg_subsec;
 80044bc:	4b13      	ldr	r3, [pc, #76]	; (800450c <MRT_stateRestoration+0x194>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a13      	ldr	r2, [pc, #76]	; (8004510 <MRT_stateRestoration+0x198>)
 80044c2:	6013      	str	r3, [r2, #0]
}
 80044c4:	bf00      	nop
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	200003f9 	.word	0x200003f9
 80044cc:	200003e9 	.word	0x200003e9
 80044d0:	2000039c 	.word	0x2000039c
 80044d4:	20000398 	.word	0x20000398
 80044d8:	200003f8 	.word	0x200003f8
 80044dc:	200003a0 	.word	0x200003a0
 80044e0:	200003fa 	.word	0x200003fa
 80044e4:	200003a4 	.word	0x200003a4
 80044e8:	200003fb 	.word	0x200003fb
 80044ec:	200003a8 	.word	0x200003a8
 80044f0:	200003fc 	.word	0x200003fc
 80044f4:	200003ac 	.word	0x200003ac
 80044f8:	200003fd 	.word	0x200003fd
 80044fc:	200003b0 	.word	0x200003b0
 8004500:	200003fe 	.word	0x200003fe
 8004504:	200003b4 	.word	0x200003b4
 8004508:	200003ff 	.word	0x200003ff
 800450c:	200003b8 	.word	0x200003b8
 8004510:	20000400 	.word	0x20000400

08004514 <MRT_checkWakeUp>:


/*
 * Check if FC is back from wakeup
 */
void MRT_checkWakeUp(void){
 8004514:	b580      	push	{r7, lr}
 8004516:	af00      	add	r7, sp, #0
	//If WU flag set, wake up procedure
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8004518:	4b0e      	ldr	r3, [pc, #56]	; (8004554 <MRT_checkWakeUp+0x40>)
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b02      	cmp	r3, #2
 8004522:	d112      	bne.n	800454a <MRT_checkWakeUp+0x36>
	{

		wu_flag = 1;
 8004524:	4b0c      	ldr	r3, [pc, #48]	; (8004558 <MRT_checkWakeUp+0x44>)
 8004526:	2201      	movs	r2, #1
 8004528:	701a      	strb	r2, [r3, #0]

		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 800452a:	4b0a      	ldr	r3, [pc, #40]	; (8004554 <MRT_checkWakeUp+0x40>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a09      	ldr	r2, [pc, #36]	; (8004554 <MRT_checkWakeUp+0x40>)
 8004530:	f043 0308 	orr.w	r3, r3, #8
 8004534:	6013      	str	r3, [r2, #0]

		println("Wakeup from STANDBY MODE");
 8004536:	4809      	ldr	r0, [pc, #36]	; (800455c <MRT_checkWakeUp+0x48>)
 8004538:	f7fc fdc8 	bl	80010cc <println>

		/** Disable the WWAKEUP PIN **/
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 800453c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004540:	f009 fff4 	bl	800e52c <HAL_PWR_DisableWakeUpPin>

		/** Deactivate the RTC wakeup  **/
		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8004544:	4806      	ldr	r0, [pc, #24]	; (8004560 <MRT_checkWakeUp+0x4c>)
 8004546:	f00b fc3f 	bl	800fdc8 <HAL_RTCEx_DeactivateWakeUpTimer>
	}

	MRT_clear_alarms_flags();
 800454a:	f7fe fc45 	bl	8002dd8 <MRT_clear_alarms_flags>
}
 800454e:	bf00      	nop
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	40007000 	.word	0x40007000
 8004558:	200003f9 	.word	0x200003f9
 800455c:	08020df8 	.word	0x08020df8
 8004560:	2000876c 	.word	0x2000876c

08004564 <myprintf>:


uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value);
void str2upper(char* string, char* upper);

void myprintf(const char *fmt, ...) { // currently does nothing, was copied from a tutorial to make the code work
 8004564:	b40f      	push	{r0, r1, r2, r3}
 8004566:	b580      	push	{r7, lr}
 8004568:	b082      	sub	sp, #8
 800456a:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 800456c:	f107 0314 	add.w	r3, r7, #20
 8004570:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	f44f 7180 	mov.w	r1, #256	; 0x100
 800457a:	4806      	ldr	r0, [pc, #24]	; (8004594 <myprintf+0x30>)
 800457c:	f019 f832 	bl	801d5e4 <vsniprintf>
  va_end(args);

  //CDC_Transmit_FS((uint8_t *)buffer, strlen(buffer));
  //HAL_UART_Transmit(&DEBUGUART, (uint8_t*)buffer, strlen(buffer), -1);
  print(buffer);
 8004580:	4804      	ldr	r0, [pc, #16]	; (8004594 <myprintf+0x30>)
 8004582:	f7fc fdc1 	bl	8001108 <print>
}
 8004586:	bf00      	nop
 8004588:	3708      	adds	r7, #8
 800458a:	46bd      	mov	sp, r7
 800458c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004590:	b004      	add	sp, #16
 8004592:	4770      	bx	lr
 8004594:	20000404 	.word	0x20000404

08004598 <sd_init_dynamic_filename>:
 * creates new file of form "[prefix][number].txt"
 * where the string composed of "[prefix][number]" is 8 characters long.
 *
 */
FRESULT sd_init_dynamic_filename(char *prefix, char *header_text, char* return_filename)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b08a      	sub	sp, #40	; 0x28
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
	FRESULT fres = f_mount(&FatFs, "", 1);
 80045a4:	2201      	movs	r2, #1
 80045a6:	4932      	ldr	r1, [pc, #200]	; (8004670 <sd_init_dynamic_filename+0xd8>)
 80045a8:	4832      	ldr	r0, [pc, #200]	; (8004674 <sd_init_dynamic_filename+0xdc>)
 80045aa:	f010 fa5f 	bl	8014a6c <f_mount>
 80045ae:	4603      	mov	r3, r0
 80045b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (fres != FR_OK) {
 80045b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d008      	beq.n	80045ce <sd_init_dynamic_filename+0x36>
		myprintf("f_mount error (%i)\r\n", fres);
 80045bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045c0:	4619      	mov	r1, r3
 80045c2:	482d      	ldr	r0, [pc, #180]	; (8004678 <sd_init_dynamic_filename+0xe0>)
 80045c4:	f7ff ffce 	bl	8004564 <myprintf>
		return fres;
 80045c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045cc:	e04b      	b.n	8004666 <sd_init_dynamic_filename+0xce>
	}

	// scan files on drive to figure out what suffix number is appropriate
	uint32_t max_used_value = 0;
 80045ce:	2300      	movs	r3, #0
 80045d0:	623b      	str	r3, [r7, #32]
	fres = scan_files("", prefix, &max_used_value);
 80045d2:	f107 0320 	add.w	r3, r7, #32
 80045d6:	461a      	mov	r2, r3
 80045d8:	68f9      	ldr	r1, [r7, #12]
 80045da:	4825      	ldr	r0, [pc, #148]	; (8004670 <sd_init_dynamic_filename+0xd8>)
 80045dc:	f000 f89c 	bl	8004718 <scan_files>
 80045e0:	4603      	mov	r3, r0
 80045e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// create filename (max filename length in char array is 13 without LFN)
	char filename[13];
	sprintf(filename, "%s%06lu.txt", prefix, max_used_value + 1);
 80045e6:	6a3b      	ldr	r3, [r7, #32]
 80045e8:	3301      	adds	r3, #1
 80045ea:	f107 0010 	add.w	r0, r7, #16
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	4922      	ldr	r1, [pc, #136]	; (800467c <sd_init_dynamic_filename+0xe4>)
 80045f2:	f017 fd3d 	bl	801c070 <siprintf>
	return_filename = strcpy(return_filename, filename); // needed so that other functions can open the file!
 80045f6:	f107 0310 	add.w	r3, r7, #16
 80045fa:	4619      	mov	r1, r3
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f017 fdd5 	bl	801c1ac <strcpy>
 8004602:	6078      	str	r0, [r7, #4]

	// open file (create file) on SD card
	fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8004604:	f107 0310 	add.w	r3, r7, #16
 8004608:	221a      	movs	r2, #26
 800460a:	4619      	mov	r1, r3
 800460c:	481c      	ldr	r0, [pc, #112]	; (8004680 <sd_init_dynamic_filename+0xe8>)
 800460e:	f010 fa91 	bl	8014b34 <f_open>
 8004612:	4603      	mov	r3, r0
 8004614:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (fres == FR_OK) {
 8004618:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800461c:	2b00      	cmp	r3, #0
 800461e:	d11a      	bne.n	8004656 <sd_init_dynamic_filename+0xbe>
		myprintf("I was able to open filename.txt for writing\r\n");
 8004620:	4818      	ldr	r0, [pc, #96]	; (8004684 <sd_init_dynamic_filename+0xec>)
 8004622:	f7ff ff9f 	bl	8004564 <myprintf>
	} else {
		myprintf("f_open error (%i)\r\n", fres);
		return fres;
	}
	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 8004626:	4b16      	ldr	r3, [pc, #88]	; (8004680 <sd_init_dynamic_filename+0xe8>)
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	4619      	mov	r1, r3
 800462c:	4814      	ldr	r0, [pc, #80]	; (8004680 <sd_init_dynamic_filename+0xe8>)
 800462e:	f010 fea2 	bl	8015376 <f_lseek>

	// save indicate start of new log session
	sprintf((char *)msg_buffer, "--- new logging session! ---\r\n");
 8004632:	4915      	ldr	r1, [pc, #84]	; (8004688 <sd_init_dynamic_filename+0xf0>)
 8004634:	4815      	ldr	r0, [pc, #84]	; (800468c <sd_init_dynamic_filename+0xf4>)
 8004636:	f017 fd1b 	bl	801c070 <siprintf>
	sd_write(&fil, msg_buffer);
 800463a:	4914      	ldr	r1, [pc, #80]	; (800468c <sd_init_dynamic_filename+0xf4>)
 800463c:	4810      	ldr	r0, [pc, #64]	; (8004680 <sd_init_dynamic_filename+0xe8>)
 800463e:	f000 f841 	bl	80046c4 <sd_write>

	// save header row to indicate what the data is
	sd_write(&fil, (uint8_t *)header_text);
 8004642:	68b9      	ldr	r1, [r7, #8]
 8004644:	480e      	ldr	r0, [pc, #56]	; (8004680 <sd_init_dynamic_filename+0xe8>)
 8004646:	f000 f83d 	bl	80046c4 <sd_write>
	f_close(&fil);
 800464a:	480d      	ldr	r0, [pc, #52]	; (8004680 <sd_init_dynamic_filename+0xe8>)
 800464c:	f010 fe64 	bl	8015318 <f_close>

	return fres;
 8004650:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004654:	e007      	b.n	8004666 <sd_init_dynamic_filename+0xce>
		myprintf("f_open error (%i)\r\n", fres);
 8004656:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800465a:	4619      	mov	r1, r3
 800465c:	480c      	ldr	r0, [pc, #48]	; (8004690 <sd_init_dynamic_filename+0xf8>)
 800465e:	f7ff ff81 	bl	8004564 <myprintf>
		return fres;
 8004662:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004666:	4618      	mov	r0, r3
 8004668:	3728      	adds	r7, #40	; 0x28
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	08020e14 	.word	0x08020e14
 8004674:	20008acc 	.word	0x20008acc
 8004678:	08020e18 	.word	0x08020e18
 800467c:	08020e94 	.word	0x08020e94
 8004680:	200094e4 	.word	0x200094e4
 8004684:	08020e30 	.word	0x08020e30
 8004688:	08020e74 	.word	0x08020e74
 800468c:	20008d00 	.word	0x20008d00
 8004690:	08020e60 	.word	0x08020e60

08004694 <sd_open_file>:

/*
 * always open in mode FA_WRITE | FA_OPEN_ALWAYS and then appends.
 */
FRESULT sd_open_file(char *filename)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
	// write start to SD card
	FRESULT fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS);
 800469c:	2212      	movs	r2, #18
 800469e:	6879      	ldr	r1, [r7, #4]
 80046a0:	4807      	ldr	r0, [pc, #28]	; (80046c0 <sd_open_file+0x2c>)
 80046a2:	f010 fa47 	bl	8014b34 <f_open>
 80046a6:	4603      	mov	r3, r0
 80046a8:	73fb      	strb	r3, [r7, #15]

	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 80046aa:	4b05      	ldr	r3, [pc, #20]	; (80046c0 <sd_open_file+0x2c>)
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	4619      	mov	r1, r3
 80046b0:	4803      	ldr	r0, [pc, #12]	; (80046c0 <sd_open_file+0x2c>)
 80046b2:	f010 fe60 	bl	8015376 <f_lseek>

	return fres;
 80046b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	200094e4 	.word	0x200094e4

080046c4 <sd_write>:
 * @brief  write buffer to file on sd card.
 * @param  fp 		file to save to
 * @param  buffer	data to write to file
 */
int8_t sd_write(FIL* fp, uint8_t* buffer)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
	UINT bytesWrote;
	FRESULT fres = f_write(fp, buffer, strlen((char const *)buffer), &bytesWrote);
 80046ce:	6838      	ldr	r0, [r7, #0]
 80046d0:	f7fb fd98 	bl	8000204 <strlen>
 80046d4:	4602      	mov	r2, r0
 80046d6:	f107 0308 	add.w	r3, r7, #8
 80046da:	6839      	ldr	r1, [r7, #0]
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f010 fbee 	bl	8014ebe <f_write>
 80046e2:	4603      	mov	r3, r0
 80046e4:	73fb      	strb	r3, [r7, #15]
	if (fres == FR_OK) {
 80046e6:	7bfb      	ldrb	r3, [r7, #15]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d107      	bne.n	80046fc <sd_write+0x38>
		myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	4619      	mov	r1, r3
 80046f0:	4807      	ldr	r0, [pc, #28]	; (8004710 <sd_write+0x4c>)
 80046f2:	f7ff ff37 	bl	8004564 <myprintf>
		return bytesWrote;
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	b25b      	sxtb	r3, r3
 80046fa:	e004      	b.n	8004706 <sd_write+0x42>
	} else {
		myprintf("f_write error (%i)\r\n");
 80046fc:	4805      	ldr	r0, [pc, #20]	; (8004714 <sd_write+0x50>)
 80046fe:	f7ff ff31 	bl	8004564 <myprintf>
		return -1;
 8004702:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8004706:	4618      	mov	r0, r3
 8004708:	3710      	adds	r7, #16
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	08020ea0 	.word	0x08020ea0
 8004714:	08020ec4 	.word	0x08020ec4

08004718 <scan_files>:
FRESULT scan_files (
    char* path,        /* Start node to be scanned (***also used as work area***) */
	char* prefix,	   /* prefix in the filename for our datafiles */
	uint32_t* max_used_value
)
{
 8004718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800471a:	b099      	sub	sp, #100	; 0x64
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
 8004724:	466b      	mov	r3, sp
 8004726:	461d      	mov	r5, r3
    DIR dir;
//    UINT i;
    static FILINFO fno;

    // does not change so make it static
    uint8_t len_prefix = strlen(prefix);
 8004728:	68b8      	ldr	r0, [r7, #8]
 800472a:	f7fb fd6b 	bl	8000204 <strlen>
 800472e:	4603      	mov	r3, r0
 8004730:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    char prefix_upper[len_prefix];
 8004734:	f897 405e 	ldrb.w	r4, [r7, #94]	; 0x5e
 8004738:	4623      	mov	r3, r4
 800473a:	3b01      	subs	r3, #1
 800473c:	65bb      	str	r3, [r7, #88]	; 0x58
 800473e:	b2e0      	uxtb	r0, r4
 8004740:	f04f 0100 	mov.w	r1, #0
 8004744:	f04f 0200 	mov.w	r2, #0
 8004748:	f04f 0300 	mov.w	r3, #0
 800474c:	00cb      	lsls	r3, r1, #3
 800474e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004752:	00c2      	lsls	r2, r0, #3
 8004754:	b2e0      	uxtb	r0, r4
 8004756:	f04f 0100 	mov.w	r1, #0
 800475a:	f04f 0200 	mov.w	r2, #0
 800475e:	f04f 0300 	mov.w	r3, #0
 8004762:	00cb      	lsls	r3, r1, #3
 8004764:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004768:	00c2      	lsls	r2, r0, #3
 800476a:	4623      	mov	r3, r4
 800476c:	3307      	adds	r3, #7
 800476e:	08db      	lsrs	r3, r3, #3
 8004770:	00db      	lsls	r3, r3, #3
 8004772:	ebad 0d03 	sub.w	sp, sp, r3
 8004776:	466b      	mov	r3, sp
 8004778:	3300      	adds	r3, #0
 800477a:	657b      	str	r3, [r7, #84]	; 0x54
	str2upper(prefix, prefix_upper);
 800477c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800477e:	4619      	mov	r1, r3
 8004780:	68b8      	ldr	r0, [r7, #8]
 8004782:	f000 f8ff 	bl	8004984 <str2upper>

	*max_used_value = 0; // initialize to known minimum value
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	601a      	str	r2, [r3, #0]
	uint32_t num_files_fc = 0; // suffix on the files containing fc data already on sd card
 800478c:	2300      	movs	r3, #0
 800478e:	617b      	str	r3, [r7, #20]

    res = f_opendir(&dir, path);                       /* Open the directory */
 8004790:	f107 0318 	add.w	r3, r7, #24
 8004794:	68f9      	ldr	r1, [r7, #12]
 8004796:	4618      	mov	r0, r3
 8004798:	f011 f840 	bl	801581c <f_opendir>
 800479c:	4603      	mov	r3, r0
 800479e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (res == FR_OK) {
 80047a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d16c      	bne.n	8004884 <scan_files+0x16c>
        for (;;) {
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 80047aa:	f107 0318 	add.w	r3, r7, #24
 80047ae:	4939      	ldr	r1, [pc, #228]	; (8004894 <scan_files+0x17c>)
 80047b0:	4618      	mov	r0, r3
 80047b2:	f011 f8d7 	bl	8015964 <f_readdir>
 80047b6:	4603      	mov	r3, r0
 80047b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 80047bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d15a      	bne.n	800487a <scan_files+0x162>
 80047c4:	4b33      	ldr	r3, [pc, #204]	; (8004894 <scan_files+0x17c>)
 80047c6:	7a5b      	ldrb	r3, [r3, #9]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d056      	beq.n	800487a <scan_files+0x162>
            if (fno.fattrib & AM_DIR) {                    /* It is a directory */
 80047cc:	4b31      	ldr	r3, [pc, #196]	; (8004894 <scan_files+0x17c>)
 80047ce:	7a1b      	ldrb	r3, [r3, #8]
 80047d0:	f003 0310 	and.w	r3, r3, #16
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d14e      	bne.n	8004876 <scan_files+0x15e>
//                i = strlen(path);
//                sprintf(&path[i], "/%s", fno.fname);
//                res = scan_files(path, prefix, max_used_value);    /* Enter the directory */
//                if (res != FR_OK) break;
//                path[i] = 0;
            } else {                                       /* It is a file. */
 80047d8:	466b      	mov	r3, sp
 80047da:	461e      	mov	r6, r3
//                printf("%s/%s\n", path, fno.fname);

            	// check if filename contains parts of our standard prefix "FC000000.txt"
            	// but first convert to uppercase to make case insensitive

            	char fname_upper[strlen((char *)fno.fname)];
 80047dc:	482e      	ldr	r0, [pc, #184]	; (8004898 <scan_files+0x180>)
 80047de:	f7fb fd11 	bl	8000204 <strlen>
 80047e2:	4604      	mov	r4, r0
 80047e4:	4623      	mov	r3, r4
 80047e6:	3b01      	subs	r3, #1
 80047e8:	653b      	str	r3, [r7, #80]	; 0x50
 80047ea:	4620      	mov	r0, r4
 80047ec:	f04f 0100 	mov.w	r1, #0
 80047f0:	f04f 0200 	mov.w	r2, #0
 80047f4:	f04f 0300 	mov.w	r3, #0
 80047f8:	00cb      	lsls	r3, r1, #3
 80047fa:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80047fe:	00c2      	lsls	r2, r0, #3
 8004800:	4620      	mov	r0, r4
 8004802:	f04f 0100 	mov.w	r1, #0
 8004806:	f04f 0200 	mov.w	r2, #0
 800480a:	f04f 0300 	mov.w	r3, #0
 800480e:	00cb      	lsls	r3, r1, #3
 8004810:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004814:	00c2      	lsls	r2, r0, #3
 8004816:	1de3      	adds	r3, r4, #7
 8004818:	08db      	lsrs	r3, r3, #3
 800481a:	00db      	lsls	r3, r3, #3
 800481c:	ebad 0d03 	sub.w	sp, sp, r3
 8004820:	466b      	mov	r3, sp
 8004822:	3300      	adds	r3, #0
 8004824:	64fb      	str	r3, [r7, #76]	; 0x4c
            	str2upper((char *)fno.fname, fname_upper);
 8004826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004828:	4619      	mov	r1, r3
 800482a:	481b      	ldr	r0, [pc, #108]	; (8004898 <scan_files+0x180>)
 800482c:	f000 f8aa 	bl	8004984 <str2upper>

            	int8_t contains_prefix = strncmp(fno.fname, prefix_upper, len_prefix);
 8004830:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004832:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8004836:	4619      	mov	r1, r3
 8004838:	4817      	ldr	r0, [pc, #92]	; (8004898 <scan_files+0x180>)
 800483a:	f017 fcbf 	bl	801c1bc <strncmp>
 800483e:	4603      	mov	r3, r0
 8004840:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

            	if (contains_prefix == 0)
 8004844:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8004848:	2b00      	cmp	r3, #0
 800484a:	d112      	bne.n	8004872 <scan_files+0x15a>
            	{
            		// can do error checking with status if desired
            		uint8_t status = extract_filename_suffix(fname_upper, len_prefix, &num_files_fc);
 800484c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800484e:	f107 0214 	add.w	r2, r7, #20
 8004852:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
 8004856:	4618      	mov	r0, r3
 8004858:	f000 f820 	bl	800489c <extract_filename_suffix>
 800485c:	4603      	mov	r3, r0
 800485e:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

            		if (num_files_fc > *max_used_value)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	429a      	cmp	r2, r3
 800486a:	d202      	bcs.n	8004872 <scan_files+0x15a>
            		{
            			*max_used_value = num_files_fc;
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	601a      	str	r2, [r3, #0]
 8004872:	46b5      	mov	sp, r6
 8004874:	e799      	b.n	80047aa <scan_files+0x92>
            	continue; // don't enter directory
 8004876:	bf00      	nop
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8004878:	e797      	b.n	80047aa <scan_files+0x92>
            		}
            	}
            }
        }

        f_closedir(&dir);
 800487a:	f107 0318 	add.w	r3, r7, #24
 800487e:	4618      	mov	r0, r3
 8004880:	f011 f845 	bl	801590e <f_closedir>
    }

    return res;
 8004884:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004888:	46ad      	mov	sp, r5
}
 800488a:	4618      	mov	r0, r3
 800488c:	3764      	adds	r7, #100	; 0x64
 800488e:	46bd      	mov	sp, r7
 8004890:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004892:	bf00      	nop
 8004894:	20000504 	.word	0x20000504
 8004898:	2000050d 	.word	0x2000050d

0800489c <extract_filename_suffix>:
 * which is assumed to be .txt. assumes that filename contains prefix.
 *
 * returns integer indicating success/fail: 0 = success, 1 = fail
 */
uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value)
{
 800489c:	b5b0      	push	{r4, r5, r7, lr}
 800489e:	b088      	sub	sp, #32
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	460b      	mov	r3, r1
 80048a6:	607a      	str	r2, [r7, #4]
 80048a8:	72fb      	strb	r3, [r7, #11]
 80048aa:	466b      	mov	r3, sp
 80048ac:	461d      	mov	r5, r3
	uint8_t len_filename = strlen(filename);
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	f7fb fca8 	bl	8000204 <strlen>
 80048b4:	4603      	mov	r3, r0
 80048b6:	77bb      	strb	r3, [r7, #30]

	// add characters between prefix and filename extension to buffer
	uint8_t len_buf = 8;
 80048b8:	2308      	movs	r3, #8
 80048ba:	777b      	strb	r3, [r7, #29]
	char buf[len_buf]; // filenames can't be longer than 8 characters total
 80048bc:	7f7c      	ldrb	r4, [r7, #29]
 80048be:	4623      	mov	r3, r4
 80048c0:	3b01      	subs	r3, #1
 80048c2:	61bb      	str	r3, [r7, #24]
 80048c4:	b2e0      	uxtb	r0, r4
 80048c6:	f04f 0100 	mov.w	r1, #0
 80048ca:	f04f 0200 	mov.w	r2, #0
 80048ce:	f04f 0300 	mov.w	r3, #0
 80048d2:	00cb      	lsls	r3, r1, #3
 80048d4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80048d8:	00c2      	lsls	r2, r0, #3
 80048da:	b2e0      	uxtb	r0, r4
 80048dc:	f04f 0100 	mov.w	r1, #0
 80048e0:	f04f 0200 	mov.w	r2, #0
 80048e4:	f04f 0300 	mov.w	r3, #0
 80048e8:	00cb      	lsls	r3, r1, #3
 80048ea:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80048ee:	00c2      	lsls	r2, r0, #3
 80048f0:	4623      	mov	r3, r4
 80048f2:	3307      	adds	r3, #7
 80048f4:	08db      	lsrs	r3, r3, #3
 80048f6:	00db      	lsls	r3, r3, #3
 80048f8:	ebad 0d03 	sub.w	sp, sp, r3
 80048fc:	466b      	mov	r3, sp
 80048fe:	3300      	adds	r3, #0
 8004900:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < len_buf; i++)
 8004902:	2300      	movs	r3, #0
 8004904:	77fb      	strb	r3, [r7, #31]
 8004906:	e014      	b.n	8004932 <extract_filename_suffix+0x96>
	{
		if (len_prefix - 1 + i < len_filename - 1) // go to end of filename
 8004908:	7afb      	ldrb	r3, [r7, #11]
 800490a:	1e5a      	subs	r2, r3, #1
 800490c:	7ffb      	ldrb	r3, [r7, #31]
 800490e:	441a      	add	r2, r3
 8004910:	7fbb      	ldrb	r3, [r7, #30]
 8004912:	3b01      	subs	r3, #1
 8004914:	429a      	cmp	r2, r3
 8004916:	da11      	bge.n	800493c <extract_filename_suffix+0xa0>
		{
			buf[i] = filename[len_prefix + i];
 8004918:	7afa      	ldrb	r2, [r7, #11]
 800491a:	7ffb      	ldrb	r3, [r7, #31]
 800491c:	4413      	add	r3, r2
 800491e:	461a      	mov	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	441a      	add	r2, r3
 8004924:	7ffb      	ldrb	r3, [r7, #31]
 8004926:	7811      	ldrb	r1, [r2, #0]
 8004928:	697a      	ldr	r2, [r7, #20]
 800492a:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < len_buf; i++)
 800492c:	7ffb      	ldrb	r3, [r7, #31]
 800492e:	3301      	adds	r3, #1
 8004930:	77fb      	strb	r3, [r7, #31]
 8004932:	7ffa      	ldrb	r2, [r7, #31]
 8004934:	7f7b      	ldrb	r3, [r7, #29]
 8004936:	429a      	cmp	r2, r3
 8004938:	d3e6      	bcc.n	8004908 <extract_filename_suffix+0x6c>
 800493a:	e000      	b.n	800493e <extract_filename_suffix+0xa2>
		}
		else break;
 800493c:	bf00      	nop
	}

	// change chars to integer, strtol will strip out the .txt
	char *ptr;
	*num_value = strtol(buf, &ptr, 10);
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	f107 0110 	add.w	r1, r7, #16
 8004944:	220a      	movs	r2, #10
 8004946:	4618      	mov	r0, r3
 8004948:	f018 fb58 	bl	801cffc <strtol>
 800494c:	4603      	mov	r3, r0
 800494e:	461a      	mov	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	601a      	str	r2, [r3, #0]

	if (ptr == buf || *num_value == LONG_MIN || *num_value == LONG_MAX)
 8004954:	697a      	ldr	r2, [r7, #20]
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	429a      	cmp	r2, r3
 800495a:	d00a      	beq.n	8004972 <extract_filename_suffix+0xd6>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004964:	d005      	beq.n	8004972 <extract_filename_suffix+0xd6>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800496e:	4293      	cmp	r3, r2
 8004970:	d101      	bne.n	8004976 <extract_filename_suffix+0xda>
	{
		return 1;
 8004972:	2301      	movs	r3, #1
 8004974:	e000      	b.n	8004978 <extract_filename_suffix+0xdc>
	}

	return 0;
 8004976:	2300      	movs	r3, #0
 8004978:	46ad      	mov	sp, r5
}
 800497a:	4618      	mov	r0, r3
 800497c:	3720      	adds	r7, #32
 800497e:	46bd      	mov	sp, r7
 8004980:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004984 <str2upper>:
/**
 * assumes that upper has enough characters in the array
 * to store the uppercase version.
 */
void str2upper(char* string, char* upper)
{
 8004984:	b590      	push	{r4, r7, lr}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 800498e:	2300      	movs	r3, #0
 8004990:	73fb      	strb	r3, [r7, #15]
 8004992:	e019      	b.n	80049c8 <str2upper+0x44>
	{
		upper[i] = toupper(string[i]);
 8004994:	7bfb      	ldrb	r3, [r7, #15]
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	4413      	add	r3, r2
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	73bb      	strb	r3, [r7, #14]
 800499e:	7bbb      	ldrb	r3, [r7, #14]
 80049a0:	3301      	adds	r3, #1
 80049a2:	4a0f      	ldr	r2, [pc, #60]	; (80049e0 <str2upper+0x5c>)
 80049a4:	4413      	add	r3, r2
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	f003 0303 	and.w	r3, r3, #3
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d102      	bne.n	80049b6 <str2upper+0x32>
 80049b0:	7bbb      	ldrb	r3, [r7, #14]
 80049b2:	3b20      	subs	r3, #32
 80049b4:	e000      	b.n	80049b8 <str2upper+0x34>
 80049b6:	7bbb      	ldrb	r3, [r7, #14]
 80049b8:	7bfa      	ldrb	r2, [r7, #15]
 80049ba:	6839      	ldr	r1, [r7, #0]
 80049bc:	440a      	add	r2, r1
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	7013      	strb	r3, [r2, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 80049c2:	7bfb      	ldrb	r3, [r7, #15]
 80049c4:	3301      	adds	r3, #1
 80049c6:	73fb      	strb	r3, [r7, #15]
 80049c8:	7bfc      	ldrb	r4, [r7, #15]
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f7fb fc1a 	bl	8000204 <strlen>
 80049d0:	4603      	mov	r3, r0
 80049d2:	429c      	cmp	r4, r3
 80049d4:	d3de      	bcc.n	8004994 <str2upper+0x10>
	}
}
 80049d6:	bf00      	nop
 80049d8:	bf00      	nop
 80049da:	3714      	adds	r7, #20
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd90      	pop	{r4, r7, pc}
 80049e0:	08022b38 	.word	0x08022b38

080049e4 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af02      	add	r7, sp, #8
 80049ea:	4603      	mov	r3, r0
 80049ec:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 80049ee:	f107 020f 	add.w	r2, r7, #15
 80049f2:	1df9      	adds	r1, r7, #7
 80049f4:	2364      	movs	r3, #100	; 0x64
 80049f6:	9300      	str	r3, [sp, #0]
 80049f8:	2301      	movs	r3, #1
 80049fa:	4804      	ldr	r0, [pc, #16]	; (8004a0c <W25qxx_Spi+0x28>)
 80049fc:	f00b fd68 	bl	80104d0 <HAL_SPI_TransmitReceive>
	return ret;
 8004a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3710      	adds	r7, #16
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	200087e4 	.word	0x200087e4

08004a10 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8004a16:	2300      	movs	r3, #0
 8004a18:	60fb      	str	r3, [r7, #12]
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	60bb      	str	r3, [r7, #8]
 8004a1e:	2300      	movs	r3, #0
 8004a20:	607b      	str	r3, [r7, #4]
 8004a22:	2300      	movs	r3, #0
 8004a24:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004a26:	2200      	movs	r2, #0
 8004a28:	2140      	movs	r1, #64	; 0x40
 8004a2a:	4813      	ldr	r0, [pc, #76]	; (8004a78 <W25qxx_ReadID+0x68>)
 8004a2c:	f008 fc78 	bl	800d320 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8004a30:	209f      	movs	r0, #159	; 0x9f
 8004a32:	f7ff ffd7 	bl	80049e4 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004a36:	20a5      	movs	r0, #165	; 0xa5
 8004a38:	f7ff ffd4 	bl	80049e4 <W25qxx_Spi>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004a40:	20a5      	movs	r0, #165	; 0xa5
 8004a42:	f7ff ffcf 	bl	80049e4 <W25qxx_Spi>
 8004a46:	4603      	mov	r3, r0
 8004a48:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004a4a:	20a5      	movs	r0, #165	; 0xa5
 8004a4c:	f7ff ffca 	bl	80049e4 <W25qxx_Spi>
 8004a50:	4603      	mov	r3, r0
 8004a52:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004a54:	2201      	movs	r2, #1
 8004a56:	2140      	movs	r1, #64	; 0x40
 8004a58:	4807      	ldr	r0, [pc, #28]	; (8004a78 <W25qxx_ReadID+0x68>)
 8004a5a:	f008 fc61 	bl	800d320 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	041a      	lsls	r2, r3, #16
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	021b      	lsls	r3, r3, #8
 8004a66:	4313      	orrs	r3, r2
 8004a68:	683a      	ldr	r2, [r7, #0]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	60fb      	str	r3, [r7, #12]
	return Temp;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3710      	adds	r7, #16
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	40020c00 	.word	0x40020c00

08004a7c <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8004a7c:	b590      	push	{r4, r7, lr}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004a82:	2200      	movs	r2, #0
 8004a84:	2140      	movs	r1, #64	; 0x40
 8004a86:	4816      	ldr	r0, [pc, #88]	; (8004ae0 <W25qxx_ReadUniqID+0x64>)
 8004a88:	f008 fc4a 	bl	800d320 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8004a8c:	204b      	movs	r0, #75	; 0x4b
 8004a8e:	f7ff ffa9 	bl	80049e4 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8004a92:	2300      	movs	r3, #0
 8004a94:	71fb      	strb	r3, [r7, #7]
 8004a96:	e005      	b.n	8004aa4 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004a98:	20a5      	movs	r0, #165	; 0xa5
 8004a9a:	f7ff ffa3 	bl	80049e4 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8004a9e:	79fb      	ldrb	r3, [r7, #7]
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	71fb      	strb	r3, [r7, #7]
 8004aa4:	79fb      	ldrb	r3, [r7, #7]
 8004aa6:	2b03      	cmp	r3, #3
 8004aa8:	d9f6      	bls.n	8004a98 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 8004aaa:	2300      	movs	r3, #0
 8004aac:	71bb      	strb	r3, [r7, #6]
 8004aae:	e00b      	b.n	8004ac8 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004ab0:	79bc      	ldrb	r4, [r7, #6]
 8004ab2:	20a5      	movs	r0, #165	; 0xa5
 8004ab4:	f7ff ff96 	bl	80049e4 <W25qxx_Spi>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	461a      	mov	r2, r3
 8004abc:	4b09      	ldr	r3, [pc, #36]	; (8004ae4 <W25qxx_ReadUniqID+0x68>)
 8004abe:	4423      	add	r3, r4
 8004ac0:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8004ac2:	79bb      	ldrb	r3, [r7, #6]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	71bb      	strb	r3, [r7, #6]
 8004ac8:	79bb      	ldrb	r3, [r7, #6]
 8004aca:	2b07      	cmp	r3, #7
 8004acc:	d9f0      	bls.n	8004ab0 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004ace:	2201      	movs	r2, #1
 8004ad0:	2140      	movs	r1, #64	; 0x40
 8004ad2:	4803      	ldr	r0, [pc, #12]	; (8004ae0 <W25qxx_ReadUniqID+0x64>)
 8004ad4:	f008 fc24 	bl	800d320 <HAL_GPIO_WritePin>
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd90      	pop	{r4, r7, pc}
 8004ae0:	40020c00 	.word	0x40020c00
 8004ae4:	20009714 	.word	0x20009714

08004ae8 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004aec:	2200      	movs	r2, #0
 8004aee:	2140      	movs	r1, #64	; 0x40
 8004af0:	4807      	ldr	r0, [pc, #28]	; (8004b10 <W25qxx_WriteEnable+0x28>)
 8004af2:	f008 fc15 	bl	800d320 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8004af6:	2006      	movs	r0, #6
 8004af8:	f7ff ff74 	bl	80049e4 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004afc:	2201      	movs	r2, #1
 8004afe:	2140      	movs	r1, #64	; 0x40
 8004b00:	4803      	ldr	r0, [pc, #12]	; (8004b10 <W25qxx_WriteEnable+0x28>)
 8004b02:	f008 fc0d 	bl	800d320 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8004b06:	2001      	movs	r0, #1
 8004b08:	f011 f9ce 	bl	8015ea8 <osDelay>
}
 8004b0c:	bf00      	nop
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	40020c00 	.word	0x40020c00

08004b14 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004b22:	2200      	movs	r2, #0
 8004b24:	2140      	movs	r1, #64	; 0x40
 8004b26:	481c      	ldr	r0, [pc, #112]	; (8004b98 <W25qxx_ReadStatusRegister+0x84>)
 8004b28:	f008 fbfa 	bl	800d320 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8004b2c:	79fb      	ldrb	r3, [r7, #7]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d10c      	bne.n	8004b4c <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8004b32:	2005      	movs	r0, #5
 8004b34:	f7ff ff56 	bl	80049e4 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004b38:	20a5      	movs	r0, #165	; 0xa5
 8004b3a:	f7ff ff53 	bl	80049e4 <W25qxx_Spi>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8004b42:	4a16      	ldr	r2, [pc, #88]	; (8004b9c <W25qxx_ReadStatusRegister+0x88>)
 8004b44:	7bfb      	ldrb	r3, [r7, #15]
 8004b46:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8004b4a:	e01b      	b.n	8004b84 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8004b4c:	79fb      	ldrb	r3, [r7, #7]
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d10c      	bne.n	8004b6c <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8004b52:	2035      	movs	r0, #53	; 0x35
 8004b54:	f7ff ff46 	bl	80049e4 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004b58:	20a5      	movs	r0, #165	; 0xa5
 8004b5a:	f7ff ff43 	bl	80049e4 <W25qxx_Spi>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8004b62:	4a0e      	ldr	r2, [pc, #56]	; (8004b9c <W25qxx_ReadStatusRegister+0x88>)
 8004b64:	7bfb      	ldrb	r3, [r7, #15]
 8004b66:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8004b6a:	e00b      	b.n	8004b84 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8004b6c:	2015      	movs	r0, #21
 8004b6e:	f7ff ff39 	bl	80049e4 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004b72:	20a5      	movs	r0, #165	; 0xa5
 8004b74:	f7ff ff36 	bl	80049e4 <W25qxx_Spi>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8004b7c:	4a07      	ldr	r2, [pc, #28]	; (8004b9c <W25qxx_ReadStatusRegister+0x88>)
 8004b7e:	7bfb      	ldrb	r3, [r7, #15]
 8004b80:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004b84:	2201      	movs	r2, #1
 8004b86:	2140      	movs	r1, #64	; 0x40
 8004b88:	4803      	ldr	r0, [pc, #12]	; (8004b98 <W25qxx_ReadStatusRegister+0x84>)
 8004b8a:	f008 fbc9 	bl	800d320 <HAL_GPIO_WritePin>
	return status;
 8004b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3710      	adds	r7, #16
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	40020c00 	.word	0x40020c00
 8004b9c:	20009714 	.word	0x20009714

08004ba0 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8004ba4:	2001      	movs	r0, #1
 8004ba6:	f011 f97f 	bl	8015ea8 <osDelay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004baa:	2200      	movs	r2, #0
 8004bac:	2140      	movs	r1, #64	; 0x40
 8004bae:	480f      	ldr	r0, [pc, #60]	; (8004bec <W25qxx_WaitForWriteEnd+0x4c>)
 8004bb0:	f008 fbb6 	bl	800d320 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8004bb4:	2005      	movs	r0, #5
 8004bb6:	f7ff ff15 	bl	80049e4 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004bba:	20a5      	movs	r0, #165	; 0xa5
 8004bbc:	f7ff ff12 	bl	80049e4 <W25qxx_Spi>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	4b0a      	ldr	r3, [pc, #40]	; (8004bf0 <W25qxx_WaitForWriteEnd+0x50>)
 8004bc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8004bca:	2001      	movs	r0, #1
 8004bcc:	f011 f96c 	bl	8015ea8 <osDelay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8004bd0:	4b07      	ldr	r3, [pc, #28]	; (8004bf0 <W25qxx_WaitForWriteEnd+0x50>)
 8004bd2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004bd6:	f003 0301 	and.w	r3, r3, #1
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1ed      	bne.n	8004bba <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004bde:	2201      	movs	r2, #1
 8004be0:	2140      	movs	r1, #64	; 0x40
 8004be2:	4802      	ldr	r0, [pc, #8]	; (8004bec <W25qxx_WaitForWriteEnd+0x4c>)
 8004be4:	f008 fb9c 	bl	800d320 <HAL_GPIO_WritePin>
}
 8004be8:	bf00      	nop
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	40020c00 	.word	0x40020c00
 8004bf0:	20009714 	.word	0x20009714

08004bf4 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8004bfa:	4b90      	ldr	r3, [pc, #576]	; (8004e3c <W25qxx_Init+0x248>)
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 8004c02:	e002      	b.n	8004c0a <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8004c04:	2001      	movs	r0, #1
 8004c06:	f011 f94f 	bl	8015ea8 <osDelay>
	while (HAL_GetTick() < 100)
 8004c0a:	f007 fc71 	bl	800c4f0 <HAL_GetTick>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b63      	cmp	r3, #99	; 0x63
 8004c12:	d9f7      	bls.n	8004c04 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004c14:	2201      	movs	r2, #1
 8004c16:	2140      	movs	r1, #64	; 0x40
 8004c18:	4889      	ldr	r0, [pc, #548]	; (8004e40 <W25qxx_Init+0x24c>)
 8004c1a:	f008 fb81 	bl	800d320 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8004c1e:	2064      	movs	r0, #100	; 0x64
 8004c20:	f011 f942 	bl	8015ea8 <osDelay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
 8004c24:	4887      	ldr	r0, [pc, #540]	; (8004e44 <W25qxx_Init+0x250>)
 8004c26:	f017 f957 	bl	801bed8 <puts>
#endif
	id = W25qxx_ReadID();
 8004c2a:	f7ff fef1 	bl	8004a10 <W25qxx_ReadID>
 8004c2e:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
 8004c30:	6879      	ldr	r1, [r7, #4]
 8004c32:	4885      	ldr	r0, [pc, #532]	; (8004e48 <W25qxx_Init+0x254>)
 8004c34:	f017 f8ca 	bl	801bdcc <iprintf>
#endif
	switch (id & 0x000000FF)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	3b11      	subs	r3, #17
 8004c3e:	2b0f      	cmp	r3, #15
 8004c40:	f200 808b 	bhi.w	8004d5a <W25qxx_Init+0x166>
 8004c44:	a201      	add	r2, pc, #4	; (adr r2, 8004c4c <W25qxx_Init+0x58>)
 8004c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c4a:	bf00      	nop
 8004c4c:	08004d47 	.word	0x08004d47
 8004c50:	08004d33 	.word	0x08004d33
 8004c54:	08004d1f 	.word	0x08004d1f
 8004c58:	08004d0b 	.word	0x08004d0b
 8004c5c:	08004cf7 	.word	0x08004cf7
 8004c60:	08004ce3 	.word	0x08004ce3
 8004c64:	08004ccf 	.word	0x08004ccf
 8004c68:	08004cb9 	.word	0x08004cb9
 8004c6c:	08004ca3 	.word	0x08004ca3
 8004c70:	08004d5b 	.word	0x08004d5b
 8004c74:	08004d5b 	.word	0x08004d5b
 8004c78:	08004d5b 	.word	0x08004d5b
 8004c7c:	08004d5b 	.word	0x08004d5b
 8004c80:	08004d5b 	.word	0x08004d5b
 8004c84:	08004d5b 	.word	0x08004d5b
 8004c88:	08004c8d 	.word	0x08004c8d
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8004c8c:	4b6b      	ldr	r3, [pc, #428]	; (8004e3c <W25qxx_Init+0x248>)
 8004c8e:	220a      	movs	r2, #10
 8004c90:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8004c92:	4b6a      	ldr	r3, [pc, #424]	; (8004e3c <W25qxx_Init+0x248>)
 8004c94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c98:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
 8004c9a:	486c      	ldr	r0, [pc, #432]	; (8004e4c <W25qxx_Init+0x258>)
 8004c9c:	f017 f91c 	bl	801bed8 <puts>
#endif
		break;
 8004ca0:	e064      	b.n	8004d6c <W25qxx_Init+0x178>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8004ca2:	4b66      	ldr	r3, [pc, #408]	; (8004e3c <W25qxx_Init+0x248>)
 8004ca4:	2209      	movs	r2, #9
 8004ca6:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8004ca8:	4b64      	ldr	r3, [pc, #400]	; (8004e3c <W25qxx_Init+0x248>)
 8004caa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cae:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
 8004cb0:	4867      	ldr	r0, [pc, #412]	; (8004e50 <W25qxx_Init+0x25c>)
 8004cb2:	f017 f911 	bl	801bed8 <puts>
#endif
		break;
 8004cb6:	e059      	b.n	8004d6c <W25qxx_Init+0x178>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8004cb8:	4b60      	ldr	r3, [pc, #384]	; (8004e3c <W25qxx_Init+0x248>)
 8004cba:	2208      	movs	r2, #8
 8004cbc:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8004cbe:	4b5f      	ldr	r3, [pc, #380]	; (8004e3c <W25qxx_Init+0x248>)
 8004cc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004cc4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
 8004cc6:	4863      	ldr	r0, [pc, #396]	; (8004e54 <W25qxx_Init+0x260>)
 8004cc8:	f017 f906 	bl	801bed8 <puts>
#endif
		break;
 8004ccc:	e04e      	b.n	8004d6c <W25qxx_Init+0x178>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8004cce:	4b5b      	ldr	r3, [pc, #364]	; (8004e3c <W25qxx_Init+0x248>)
 8004cd0:	2207      	movs	r2, #7
 8004cd2:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8004cd4:	4b59      	ldr	r3, [pc, #356]	; (8004e3c <W25qxx_Init+0x248>)
 8004cd6:	2280      	movs	r2, #128	; 0x80
 8004cd8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
 8004cda:	485f      	ldr	r0, [pc, #380]	; (8004e58 <W25qxx_Init+0x264>)
 8004cdc:	f017 f8fc 	bl	801bed8 <puts>
#endif
		break;
 8004ce0:	e044      	b.n	8004d6c <W25qxx_Init+0x178>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8004ce2:	4b56      	ldr	r3, [pc, #344]	; (8004e3c <W25qxx_Init+0x248>)
 8004ce4:	2206      	movs	r2, #6
 8004ce6:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8004ce8:	4b54      	ldr	r3, [pc, #336]	; (8004e3c <W25qxx_Init+0x248>)
 8004cea:	2240      	movs	r2, #64	; 0x40
 8004cec:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
 8004cee:	485b      	ldr	r0, [pc, #364]	; (8004e5c <W25qxx_Init+0x268>)
 8004cf0:	f017 f8f2 	bl	801bed8 <puts>
#endif
		break;
 8004cf4:	e03a      	b.n	8004d6c <W25qxx_Init+0x178>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8004cf6:	4b51      	ldr	r3, [pc, #324]	; (8004e3c <W25qxx_Init+0x248>)
 8004cf8:	2205      	movs	r2, #5
 8004cfa:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8004cfc:	4b4f      	ldr	r3, [pc, #316]	; (8004e3c <W25qxx_Init+0x248>)
 8004cfe:	2220      	movs	r2, #32
 8004d00:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
 8004d02:	4857      	ldr	r0, [pc, #348]	; (8004e60 <W25qxx_Init+0x26c>)
 8004d04:	f017 f8e8 	bl	801bed8 <puts>
#endif
		break;
 8004d08:	e030      	b.n	8004d6c <W25qxx_Init+0x178>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8004d0a:	4b4c      	ldr	r3, [pc, #304]	; (8004e3c <W25qxx_Init+0x248>)
 8004d0c:	2204      	movs	r2, #4
 8004d0e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8004d10:	4b4a      	ldr	r3, [pc, #296]	; (8004e3c <W25qxx_Init+0x248>)
 8004d12:	2210      	movs	r2, #16
 8004d14:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
 8004d16:	4853      	ldr	r0, [pc, #332]	; (8004e64 <W25qxx_Init+0x270>)
 8004d18:	f017 f8de 	bl	801bed8 <puts>
#endif
		break;
 8004d1c:	e026      	b.n	8004d6c <W25qxx_Init+0x178>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8004d1e:	4b47      	ldr	r3, [pc, #284]	; (8004e3c <W25qxx_Init+0x248>)
 8004d20:	2203      	movs	r2, #3
 8004d22:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8004d24:	4b45      	ldr	r3, [pc, #276]	; (8004e3c <W25qxx_Init+0x248>)
 8004d26:	2208      	movs	r2, #8
 8004d28:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
 8004d2a:	484f      	ldr	r0, [pc, #316]	; (8004e68 <W25qxx_Init+0x274>)
 8004d2c:	f017 f8d4 	bl	801bed8 <puts>
#endif
		break;
 8004d30:	e01c      	b.n	8004d6c <W25qxx_Init+0x178>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8004d32:	4b42      	ldr	r3, [pc, #264]	; (8004e3c <W25qxx_Init+0x248>)
 8004d34:	2202      	movs	r2, #2
 8004d36:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8004d38:	4b40      	ldr	r3, [pc, #256]	; (8004e3c <W25qxx_Init+0x248>)
 8004d3a:	2204      	movs	r2, #4
 8004d3c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
 8004d3e:	484b      	ldr	r0, [pc, #300]	; (8004e6c <W25qxx_Init+0x278>)
 8004d40:	f017 f8ca 	bl	801bed8 <puts>
#endif
		break;
 8004d44:	e012      	b.n	8004d6c <W25qxx_Init+0x178>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8004d46:	4b3d      	ldr	r3, [pc, #244]	; (8004e3c <W25qxx_Init+0x248>)
 8004d48:	2201      	movs	r2, #1
 8004d4a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8004d4c:	4b3b      	ldr	r3, [pc, #236]	; (8004e3c <W25qxx_Init+0x248>)
 8004d4e:	2202      	movs	r2, #2
 8004d50:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
 8004d52:	4847      	ldr	r0, [pc, #284]	; (8004e70 <W25qxx_Init+0x27c>)
 8004d54:	f017 f8c0 	bl	801bed8 <puts>
#endif
		break;
 8004d58:	e008      	b.n	8004d6c <W25qxx_Init+0x178>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
 8004d5a:	4846      	ldr	r0, [pc, #280]	; (8004e74 <W25qxx_Init+0x280>)
 8004d5c:	f017 f8bc 	bl	801bed8 <puts>
#endif
		w25qxx.Lock = 0;
 8004d60:	4b36      	ldr	r3, [pc, #216]	; (8004e3c <W25qxx_Init+0x248>)
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	e063      	b.n	8004e34 <W25qxx_Init+0x240>
	}
	w25qxx.PageSize = 256;
 8004d6c:	4b33      	ldr	r3, [pc, #204]	; (8004e3c <W25qxx_Init+0x248>)
 8004d6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d72:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8004d74:	4b31      	ldr	r3, [pc, #196]	; (8004e3c <W25qxx_Init+0x248>)
 8004d76:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004d7a:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8004d7c:	4b2f      	ldr	r3, [pc, #188]	; (8004e3c <W25qxx_Init+0x248>)
 8004d7e:	69db      	ldr	r3, [r3, #28]
 8004d80:	011b      	lsls	r3, r3, #4
 8004d82:	4a2e      	ldr	r2, [pc, #184]	; (8004e3c <W25qxx_Init+0x248>)
 8004d84:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8004d86:	4b2d      	ldr	r3, [pc, #180]	; (8004e3c <W25qxx_Init+0x248>)
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	4a2c      	ldr	r2, [pc, #176]	; (8004e3c <W25qxx_Init+0x248>)
 8004d8c:	6912      	ldr	r2, [r2, #16]
 8004d8e:	fb02 f303 	mul.w	r3, r2, r3
 8004d92:	4a2a      	ldr	r2, [pc, #168]	; (8004e3c <W25qxx_Init+0x248>)
 8004d94:	8952      	ldrh	r2, [r2, #10]
 8004d96:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d9a:	4a28      	ldr	r2, [pc, #160]	; (8004e3c <W25qxx_Init+0x248>)
 8004d9c:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8004d9e:	4b27      	ldr	r3, [pc, #156]	; (8004e3c <W25qxx_Init+0x248>)
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	011b      	lsls	r3, r3, #4
 8004da4:	4a25      	ldr	r2, [pc, #148]	; (8004e3c <W25qxx_Init+0x248>)
 8004da6:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8004da8:	4b24      	ldr	r3, [pc, #144]	; (8004e3c <W25qxx_Init+0x248>)
 8004daa:	695b      	ldr	r3, [r3, #20]
 8004dac:	4a23      	ldr	r2, [pc, #140]	; (8004e3c <W25qxx_Init+0x248>)
 8004dae:	6912      	ldr	r2, [r2, #16]
 8004db0:	fb02 f303 	mul.w	r3, r2, r3
 8004db4:	0a9b      	lsrs	r3, r3, #10
 8004db6:	4a21      	ldr	r2, [pc, #132]	; (8004e3c <W25qxx_Init+0x248>)
 8004db8:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8004dba:	f7ff fe5f 	bl	8004a7c <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8004dbe:	2001      	movs	r0, #1
 8004dc0:	f7ff fea8 	bl	8004b14 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8004dc4:	2002      	movs	r0, #2
 8004dc6:	f7ff fea5 	bl	8004b14 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8004dca:	2003      	movs	r0, #3
 8004dcc:	f7ff fea2 	bl	8004b14 <W25qxx_ReadStatusRegister>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Page Size: %d Bytes\r\n", w25qxx.PageSize);
 8004dd0:	4b1a      	ldr	r3, [pc, #104]	; (8004e3c <W25qxx_Init+0x248>)
 8004dd2:	895b      	ldrh	r3, [r3, #10]
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	4828      	ldr	r0, [pc, #160]	; (8004e78 <W25qxx_Init+0x284>)
 8004dd8:	f016 fff8 	bl	801bdcc <iprintf>
	printf("w25qxx Page Count: %d\r\n", w25qxx.PageCount);
 8004ddc:	4b17      	ldr	r3, [pc, #92]	; (8004e3c <W25qxx_Init+0x248>)
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	4619      	mov	r1, r3
 8004de2:	4826      	ldr	r0, [pc, #152]	; (8004e7c <W25qxx_Init+0x288>)
 8004de4:	f016 fff2 	bl	801bdcc <iprintf>
	printf("w25qxx Sector Size: %d Bytes\r\n", w25qxx.SectorSize);
 8004de8:	4b14      	ldr	r3, [pc, #80]	; (8004e3c <W25qxx_Init+0x248>)
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	4619      	mov	r1, r3
 8004dee:	4824      	ldr	r0, [pc, #144]	; (8004e80 <W25qxx_Init+0x28c>)
 8004df0:	f016 ffec 	bl	801bdcc <iprintf>
	printf("w25qxx Sector Count: %d\r\n", w25qxx.SectorCount);
 8004df4:	4b11      	ldr	r3, [pc, #68]	; (8004e3c <W25qxx_Init+0x248>)
 8004df6:	695b      	ldr	r3, [r3, #20]
 8004df8:	4619      	mov	r1, r3
 8004dfa:	4822      	ldr	r0, [pc, #136]	; (8004e84 <W25qxx_Init+0x290>)
 8004dfc:	f016 ffe6 	bl	801bdcc <iprintf>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
 8004e00:	4b0e      	ldr	r3, [pc, #56]	; (8004e3c <W25qxx_Init+0x248>)
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	4619      	mov	r1, r3
 8004e06:	4820      	ldr	r0, [pc, #128]	; (8004e88 <W25qxx_Init+0x294>)
 8004e08:	f016 ffe0 	bl	801bdcc <iprintf>
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
 8004e0c:	4b0b      	ldr	r3, [pc, #44]	; (8004e3c <W25qxx_Init+0x248>)
 8004e0e:	69db      	ldr	r3, [r3, #28]
 8004e10:	4619      	mov	r1, r3
 8004e12:	481e      	ldr	r0, [pc, #120]	; (8004e8c <W25qxx_Init+0x298>)
 8004e14:	f016 ffda 	bl	801bdcc <iprintf>
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
 8004e18:	4b08      	ldr	r3, [pc, #32]	; (8004e3c <W25qxx_Init+0x248>)
 8004e1a:	6a1b      	ldr	r3, [r3, #32]
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	481c      	ldr	r0, [pc, #112]	; (8004e90 <W25qxx_Init+0x29c>)
 8004e20:	f016 ffd4 	bl	801bdcc <iprintf>
	printf("w25qxx Init Done\r\n");
 8004e24:	481b      	ldr	r0, [pc, #108]	; (8004e94 <W25qxx_Init+0x2a0>)
 8004e26:	f017 f857 	bl	801bed8 <puts>
#endif
	w25qxx.Lock = 0;
 8004e2a:	4b04      	ldr	r3, [pc, #16]	; (8004e3c <W25qxx_Init+0x248>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8004e32:	2301      	movs	r3, #1
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3708      	adds	r7, #8
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	20009714 	.word	0x20009714
 8004e40:	40020c00 	.word	0x40020c00
 8004e44:	08020edc 	.word	0x08020edc
 8004e48:	08020ef4 	.word	0x08020ef4
 8004e4c:	08020f08 	.word	0x08020f08
 8004e50:	08020f20 	.word	0x08020f20
 8004e54:	08020f38 	.word	0x08020f38
 8004e58:	08020f50 	.word	0x08020f50
 8004e5c:	08020f68 	.word	0x08020f68
 8004e60:	08020f80 	.word	0x08020f80
 8004e64:	08020f98 	.word	0x08020f98
 8004e68:	08020fb0 	.word	0x08020fb0
 8004e6c:	08020fc8 	.word	0x08020fc8
 8004e70:	08020fe0 	.word	0x08020fe0
 8004e74:	08020ff8 	.word	0x08020ff8
 8004e78:	0802100c 	.word	0x0802100c
 8004e7c:	0802102c 	.word	0x0802102c
 8004e80:	08021044 	.word	0x08021044
 8004e84:	08021064 	.word	0x08021064
 8004e88:	08021080 	.word	0x08021080
 8004e8c:	080210a0 	.word	0x080210a0
 8004e90:	080210bc 	.word	0x080210bc
 8004e94:	080210dc 	.word	0x080210dc

08004e98 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8004ea0:	e002      	b.n	8004ea8 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 8004ea2:	2001      	movs	r0, #1
 8004ea4:	f011 f800 	bl	8015ea8 <osDelay>
	while (w25qxx.Lock == 1)
 8004ea8:	4b2d      	ldr	r3, [pc, #180]	; (8004f60 <W25qxx_EraseSector+0xc8>)
 8004eaa:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d0f7      	beq.n	8004ea2 <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 8004eb2:	4b2b      	ldr	r3, [pc, #172]	; (8004f60 <W25qxx_EraseSector+0xc8>)
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
 8004eba:	f007 fb19 	bl	800c4f0 <HAL_GetTick>
 8004ebe:	60f8      	str	r0, [r7, #12]
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
 8004ec0:	6879      	ldr	r1, [r7, #4]
 8004ec2:	4828      	ldr	r0, [pc, #160]	; (8004f64 <W25qxx_EraseSector+0xcc>)
 8004ec4:	f016 ff82 	bl	801bdcc <iprintf>
#endif
	W25qxx_WaitForWriteEnd();
 8004ec8:	f7ff fe6a 	bl	8004ba0 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8004ecc:	4b24      	ldr	r3, [pc, #144]	; (8004f60 <W25qxx_EraseSector+0xc8>)
 8004ece:	691a      	ldr	r2, [r3, #16]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	fb02 f303 	mul.w	r3, r2, r3
 8004ed6:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8004ed8:	f7ff fe06 	bl	8004ae8 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004edc:	2200      	movs	r2, #0
 8004ede:	2140      	movs	r1, #64	; 0x40
 8004ee0:	4821      	ldr	r0, [pc, #132]	; (8004f68 <W25qxx_EraseSector+0xd0>)
 8004ee2:	f008 fa1d 	bl	800d320 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8004ee6:	4b1e      	ldr	r3, [pc, #120]	; (8004f60 <W25qxx_EraseSector+0xc8>)
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	2b08      	cmp	r3, #8
 8004eec:	d909      	bls.n	8004f02 <W25qxx_EraseSector+0x6a>
	{
		W25qxx_Spi(0x21);
 8004eee:	2021      	movs	r0, #33	; 0x21
 8004ef0:	f7ff fd78 	bl	80049e4 <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	0e1b      	lsrs	r3, r3, #24
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	4618      	mov	r0, r3
 8004efc:	f7ff fd72 	bl	80049e4 <W25qxx_Spi>
 8004f00:	e002      	b.n	8004f08 <W25qxx_EraseSector+0x70>
	}
	else
	{
		W25qxx_Spi(0x20);
 8004f02:	2020      	movs	r0, #32
 8004f04:	f7ff fd6e 	bl	80049e4 <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	0c1b      	lsrs	r3, r3, #16
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7ff fd68 	bl	80049e4 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	0a1b      	lsrs	r3, r3, #8
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7ff fd62 	bl	80049e4 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	4618      	mov	r0, r3
 8004f26:	f7ff fd5d 	bl	80049e4 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	2140      	movs	r1, #64	; 0x40
 8004f2e:	480e      	ldr	r0, [pc, #56]	; (8004f68 <W25qxx_EraseSector+0xd0>)
 8004f30:	f008 f9f6 	bl	800d320 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8004f34:	f7ff fe34 	bl	8004ba0 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
 8004f38:	f007 fada 	bl	800c4f0 <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	4619      	mov	r1, r3
 8004f44:	4809      	ldr	r0, [pc, #36]	; (8004f6c <W25qxx_EraseSector+0xd4>)
 8004f46:	f016 ff41 	bl	801bdcc <iprintf>
#endif
	W25qxx_Delay(1);
 8004f4a:	2001      	movs	r0, #1
 8004f4c:	f010 ffac 	bl	8015ea8 <osDelay>
	w25qxx.Lock = 0;
 8004f50:	4b03      	ldr	r3, [pc, #12]	; (8004f60 <W25qxx_EraseSector+0xc8>)
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004f58:	bf00      	nop
 8004f5a:	3710      	adds	r7, #16
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	20009714 	.word	0x20009714
 8004f64:	08021134 	.word	0x08021134
 8004f68:	40020c00 	.word	0x40020c00
 8004f6c:	08021158 	.word	0x08021158

08004f70 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8004f78:	4b07      	ldr	r3, [pc, #28]	; (8004f98 <W25qxx_SectorToPage+0x28>)
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	fb02 f303 	mul.w	r3, r2, r3
 8004f82:	4a05      	ldr	r2, [pc, #20]	; (8004f98 <W25qxx_SectorToPage+0x28>)
 8004f84:	8952      	ldrh	r2, [r2, #10]
 8004f86:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	370c      	adds	r7, #12
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	20009714 	.word	0x20009714

08004f9c <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b086      	sub	sp, #24
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
 8004fa8:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8004faa:	e002      	b.n	8004fb2 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8004fac:	2001      	movs	r0, #1
 8004fae:	f010 ff7b 	bl	8015ea8 <osDelay>
	while (w25qxx.Lock == 1)
 8004fb2:	4b57      	ldr	r3, [pc, #348]	; (8005110 <W25qxx_WritePage+0x174>)
 8004fb4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d0f7      	beq.n	8004fac <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8004fbc:	4b54      	ldr	r3, [pc, #336]	; (8005110 <W25qxx_WritePage+0x174>)
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8004fc4:	683a      	ldr	r2, [r7, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4413      	add	r3, r2
 8004fca:	4a51      	ldr	r2, [pc, #324]	; (8005110 <W25qxx_WritePage+0x174>)
 8004fcc:	8952      	ldrh	r2, [r2, #10]
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d802      	bhi.n	8004fd8 <W25qxx_WritePage+0x3c>
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d105      	bne.n	8004fe4 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8004fd8:	4b4d      	ldr	r3, [pc, #308]	; (8005110 <W25qxx_WritePage+0x174>)
 8004fda:	895b      	ldrh	r3, [r3, #10]
 8004fdc:	461a      	mov	r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	4413      	add	r3, r2
 8004fea:	4a49      	ldr	r2, [pc, #292]	; (8005110 <W25qxx_WritePage+0x174>)
 8004fec:	8952      	ldrh	r2, [r2, #10]
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d905      	bls.n	8004ffe <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8004ff2:	4b47      	ldr	r3, [pc, #284]	; (8005110 <W25qxx_WritePage+0x174>)
 8004ff4:	895b      	ldrh	r3, [r3, #10]
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	68b9      	ldr	r1, [r7, #8]
 8005004:	4843      	ldr	r0, [pc, #268]	; (8005114 <W25qxx_WritePage+0x178>)
 8005006:	f016 fee1 	bl	801bdcc <iprintf>
	W25qxx_Delay(100);
 800500a:	2064      	movs	r0, #100	; 0x64
 800500c:	f010 ff4c 	bl	8015ea8 <osDelay>
	uint32_t StartTime = HAL_GetTick();
 8005010:	f007 fa6e 	bl	800c4f0 <HAL_GetTick>
 8005014:	6138      	str	r0, [r7, #16]
#endif
	W25qxx_WaitForWriteEnd();
 8005016:	f7ff fdc3 	bl	8004ba0 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 800501a:	f7ff fd65 	bl	8004ae8 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800501e:	2200      	movs	r2, #0
 8005020:	2140      	movs	r1, #64	; 0x40
 8005022:	483d      	ldr	r0, [pc, #244]	; (8005118 <W25qxx_WritePage+0x17c>)
 8005024:	f008 f97c 	bl	800d320 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8005028:	4b39      	ldr	r3, [pc, #228]	; (8005110 <W25qxx_WritePage+0x174>)
 800502a:	895b      	ldrh	r3, [r3, #10]
 800502c:	461a      	mov	r2, r3
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	fb03 f302 	mul.w	r3, r3, r2
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	4413      	add	r3, r2
 8005038:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 800503a:	4b35      	ldr	r3, [pc, #212]	; (8005110 <W25qxx_WritePage+0x174>)
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	2b08      	cmp	r3, #8
 8005040:	d909      	bls.n	8005056 <W25qxx_WritePage+0xba>
	{
		W25qxx_Spi(0x12);
 8005042:	2012      	movs	r0, #18
 8005044:	f7ff fcce 	bl	80049e4 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	0e1b      	lsrs	r3, r3, #24
 800504c:	b2db      	uxtb	r3, r3
 800504e:	4618      	mov	r0, r3
 8005050:	f7ff fcc8 	bl	80049e4 <W25qxx_Spi>
 8005054:	e002      	b.n	800505c <W25qxx_WritePage+0xc0>
	}
	else
	{
		W25qxx_Spi(0x02);
 8005056:	2002      	movs	r0, #2
 8005058:	f7ff fcc4 	bl	80049e4 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	0c1b      	lsrs	r3, r3, #16
 8005060:	b2db      	uxtb	r3, r3
 8005062:	4618      	mov	r0, r3
 8005064:	f7ff fcbe 	bl	80049e4 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	0a1b      	lsrs	r3, r3, #8
 800506c:	b2db      	uxtb	r3, r3
 800506e:	4618      	mov	r0, r3
 8005070:	f7ff fcb8 	bl	80049e4 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	b2db      	uxtb	r3, r3
 8005078:	4618      	mov	r0, r3
 800507a:	f7ff fcb3 	bl	80049e4 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	b29a      	uxth	r2, r3
 8005082:	2364      	movs	r3, #100	; 0x64
 8005084:	68f9      	ldr	r1, [r7, #12]
 8005086:	4825      	ldr	r0, [pc, #148]	; (800511c <W25qxx_WritePage+0x180>)
 8005088:	f00a ffd5 	bl	8010036 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800508c:	2201      	movs	r2, #1
 800508e:	2140      	movs	r1, #64	; 0x40
 8005090:	4821      	ldr	r0, [pc, #132]	; (8005118 <W25qxx_WritePage+0x17c>)
 8005092:	f008 f945 	bl	800d320 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8005096:	f7ff fd83 	bl	8004ba0 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 800509a:	f007 fa29 	bl	800c4f0 <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 80050a6:	2300      	movs	r3, #0
 80050a8:	617b      	str	r3, [r7, #20]
 80050aa:	e018      	b.n	80050de <W25qxx_WritePage+0x142>
	{
		if ((i % 8 == 0) && (i > 2))
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	f003 0307 	and.w	r3, r3, #7
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d108      	bne.n	80050c8 <W25qxx_WritePage+0x12c>
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d905      	bls.n	80050c8 <W25qxx_WritePage+0x12c>
		{
			printf("\r\n");
 80050bc:	4818      	ldr	r0, [pc, #96]	; (8005120 <W25qxx_WritePage+0x184>)
 80050be:	f016 ff0b 	bl	801bed8 <puts>
			W25qxx_Delay(10);
 80050c2:	200a      	movs	r0, #10
 80050c4:	f010 fef0 	bl	8015ea8 <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	4413      	add	r3, r2
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	4619      	mov	r1, r3
 80050d2:	4814      	ldr	r0, [pc, #80]	; (8005124 <W25qxx_WritePage+0x188>)
 80050d4:	f016 fe7a 	bl	801bdcc <iprintf>
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	3301      	adds	r3, #1
 80050dc:	617b      	str	r3, [r7, #20]
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d3e2      	bcc.n	80050ac <W25qxx_WritePage+0x110>
	}
	printf("\r\n");
 80050e6:	480e      	ldr	r0, [pc, #56]	; (8005120 <W25qxx_WritePage+0x184>)
 80050e8:	f016 fef6 	bl	801bed8 <puts>
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
 80050ec:	6939      	ldr	r1, [r7, #16]
 80050ee:	480e      	ldr	r0, [pc, #56]	; (8005128 <W25qxx_WritePage+0x18c>)
 80050f0:	f016 fe6c 	bl	801bdcc <iprintf>
	W25qxx_Delay(100);
 80050f4:	2064      	movs	r0, #100	; 0x64
 80050f6:	f010 fed7 	bl	8015ea8 <osDelay>
#endif
	W25qxx_Delay(1);
 80050fa:	2001      	movs	r0, #1
 80050fc:	f010 fed4 	bl	8015ea8 <osDelay>
	w25qxx.Lock = 0;
 8005100:	4b03      	ldr	r3, [pc, #12]	; (8005110 <W25qxx_WritePage+0x174>)
 8005102:	2200      	movs	r2, #0
 8005104:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8005108:	bf00      	nop
 800510a:	3718      	adds	r7, #24
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	20009714 	.word	0x20009714
 8005114:	080213bc 	.word	0x080213bc
 8005118:	40020c00 	.word	0x40020c00
 800511c:	200087e4 	.word	0x200087e4
 8005120:	080213f8 	.word	0x080213f8
 8005124:	080213fc 	.word	0x080213fc
 8005128:	08021404 	.word	0x08021404

0800512c <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b088      	sub	sp, #32
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
 8005138:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 800513a:	4b36      	ldr	r3, [pc, #216]	; (8005214 <W25qxx_WriteSector+0xe8>)
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	683a      	ldr	r2, [r7, #0]
 8005140:	429a      	cmp	r2, r3
 8005142:	d802      	bhi.n	800514a <W25qxx_WriteSector+0x1e>
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d102      	bne.n	8005150 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 800514a:	4b32      	ldr	r3, [pc, #200]	; (8005214 <W25qxx_WriteSector+0xe8>)
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	68b9      	ldr	r1, [r7, #8]
 8005156:	4830      	ldr	r0, [pc, #192]	; (8005218 <W25qxx_WriteSector+0xec>)
 8005158:	f016 fe38 	bl	801bdcc <iprintf>
	W25qxx_Delay(100);
 800515c:	2064      	movs	r0, #100	; 0x64
 800515e:	f010 fea3 	bl	8015ea8 <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8005162:	4b2c      	ldr	r3, [pc, #176]	; (8005214 <W25qxx_WriteSector+0xe8>)
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	429a      	cmp	r2, r3
 800516a:	d306      	bcc.n	800517a <W25qxx_WriteSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx WriteSector Faild!\r\n");
 800516c:	482b      	ldr	r0, [pc, #172]	; (800521c <W25qxx_WriteSector+0xf0>)
 800516e:	f016 feb3 	bl	801bed8 <puts>
		W25qxx_Delay(100);
 8005172:	2064      	movs	r0, #100	; 0x64
 8005174:	f010 fe98 	bl	8015ea8 <osDelay>
#endif
		return;
 8005178:	e048      	b.n	800520c <W25qxx_WriteSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	441a      	add	r2, r3
 8005180:	4b24      	ldr	r3, [pc, #144]	; (8005214 <W25qxx_WriteSector+0xe8>)
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	429a      	cmp	r2, r3
 8005186:	d905      	bls.n	8005194 <W25qxx_WriteSector+0x68>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8005188:	4b22      	ldr	r3, [pc, #136]	; (8005214 <W25qxx_WriteSector+0xe8>)
 800518a:	691a      	ldr	r2, [r3, #16]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	61bb      	str	r3, [r7, #24]
 8005192:	e001      	b.n	8005198 <W25qxx_WriteSector+0x6c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8005198:	68b8      	ldr	r0, [r7, #8]
 800519a:	f7ff fee9 	bl	8004f70 <W25qxx_SectorToPage>
 800519e:	4602      	mov	r2, r0
 80051a0:	4b1c      	ldr	r3, [pc, #112]	; (8005214 <W25qxx_WriteSector+0xe8>)
 80051a2:	895b      	ldrh	r3, [r3, #10]
 80051a4:	4619      	mov	r1, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80051ac:	4413      	add	r3, r2
 80051ae:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 80051b0:	4b18      	ldr	r3, [pc, #96]	; (8005214 <W25qxx_WriteSector+0xe8>)
 80051b2:	895b      	ldrh	r3, [r3, #10]
 80051b4:	461a      	mov	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80051bc:	fb02 f201 	mul.w	r2, r2, r1
 80051c0:	1a9b      	subs	r3, r3, r2
 80051c2:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	69f9      	ldr	r1, [r7, #28]
 80051ca:	68f8      	ldr	r0, [r7, #12]
 80051cc:	f7ff fee6 	bl	8004f9c <W25qxx_WritePage>
		StartPage++;
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	3301      	adds	r3, #1
 80051d4:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 80051d6:	4b0f      	ldr	r3, [pc, #60]	; (8005214 <W25qxx_WriteSector+0xe8>)
 80051d8:	895b      	ldrh	r3, [r3, #10]
 80051da:	461a      	mov	r2, r3
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	1a9a      	subs	r2, r3, r2
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	4413      	add	r3, r2
 80051e4:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 80051e6:	4b0b      	ldr	r3, [pc, #44]	; (8005214 <W25qxx_WriteSector+0xe8>)
 80051e8:	895b      	ldrh	r3, [r3, #10]
 80051ea:	461a      	mov	r2, r3
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	4413      	add	r3, r2
 80051f4:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 80051f6:	2300      	movs	r3, #0
 80051f8:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	dce1      	bgt.n	80051c4 <W25qxx_WriteSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
 8005200:	4807      	ldr	r0, [pc, #28]	; (8005220 <W25qxx_WriteSector+0xf4>)
 8005202:	f016 fe69 	bl	801bed8 <puts>
	W25qxx_Delay(100);
 8005206:	2064      	movs	r0, #100	; 0x64
 8005208:	f010 fe4e 	bl	8015ea8 <osDelay>
#endif
}
 800520c:	3720      	adds	r7, #32
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	20009714 	.word	0x20009714
 8005218:	08021428 	.word	0x08021428
 800521c:	08021468 	.word	0x08021468
 8005220:	08021488 	.word	0x08021488

08005224 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b086      	sub	sp, #24
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	607a      	str	r2, [r7, #4]
 8005230:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8005232:	e002      	b.n	800523a <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8005234:	2001      	movs	r0, #1
 8005236:	f010 fe37 	bl	8015ea8 <osDelay>
	while (w25qxx.Lock == 1)
 800523a:	4b54      	ldr	r3, [pc, #336]	; (800538c <W25qxx_ReadPage+0x168>)
 800523c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005240:	2b01      	cmp	r3, #1
 8005242:	d0f7      	beq.n	8005234 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8005244:	4b51      	ldr	r3, [pc, #324]	; (800538c <W25qxx_ReadPage+0x168>)
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 800524c:	4b4f      	ldr	r3, [pc, #316]	; (800538c <W25qxx_ReadPage+0x168>)
 800524e:	895b      	ldrh	r3, [r3, #10]
 8005250:	461a      	mov	r2, r3
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	4293      	cmp	r3, r2
 8005256:	d802      	bhi.n	800525e <W25qxx_ReadPage+0x3a>
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d102      	bne.n	8005264 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 800525e:	4b4b      	ldr	r3, [pc, #300]	; (800538c <W25qxx_ReadPage+0x168>)
 8005260:	895b      	ldrh	r3, [r3, #10]
 8005262:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	4413      	add	r3, r2
 800526a:	4a48      	ldr	r2, [pc, #288]	; (800538c <W25qxx_ReadPage+0x168>)
 800526c:	8952      	ldrh	r2, [r2, #10]
 800526e:	4293      	cmp	r3, r2
 8005270:	d905      	bls.n	800527e <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8005272:	4b46      	ldr	r3, [pc, #280]	; (800538c <W25qxx_ReadPage+0x168>)
 8005274:	895b      	ldrh	r3, [r3, #10]
 8005276:	461a      	mov	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	68b9      	ldr	r1, [r7, #8]
 8005284:	4842      	ldr	r0, [pc, #264]	; (8005390 <W25qxx_ReadPage+0x16c>)
 8005286:	f016 fda1 	bl	801bdcc <iprintf>
	W25qxx_Delay(100);
 800528a:	2064      	movs	r0, #100	; 0x64
 800528c:	f010 fe0c 	bl	8015ea8 <osDelay>
	uint32_t StartTime = HAL_GetTick();
 8005290:	f007 f92e 	bl	800c4f0 <HAL_GetTick>
 8005294:	6138      	str	r0, [r7, #16]
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8005296:	4b3d      	ldr	r3, [pc, #244]	; (800538c <W25qxx_ReadPage+0x168>)
 8005298:	895b      	ldrh	r3, [r3, #10]
 800529a:	461a      	mov	r2, r3
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	fb03 f302 	mul.w	r3, r3, r2
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	4413      	add	r3, r2
 80052a6:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80052a8:	2200      	movs	r2, #0
 80052aa:	2140      	movs	r1, #64	; 0x40
 80052ac:	4839      	ldr	r0, [pc, #228]	; (8005394 <W25qxx_ReadPage+0x170>)
 80052ae:	f008 f837 	bl	800d320 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 80052b2:	4b36      	ldr	r3, [pc, #216]	; (800538c <W25qxx_ReadPage+0x168>)
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	2b08      	cmp	r3, #8
 80052b8:	d909      	bls.n	80052ce <W25qxx_ReadPage+0xaa>
	{
		W25qxx_Spi(0x0C);
 80052ba:	200c      	movs	r0, #12
 80052bc:	f7ff fb92 	bl	80049e4 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	0e1b      	lsrs	r3, r3, #24
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7ff fb8c 	bl	80049e4 <W25qxx_Spi>
 80052cc:	e002      	b.n	80052d4 <W25qxx_ReadPage+0xb0>
	}
	else
	{
		W25qxx_Spi(0x0B);
 80052ce:	200b      	movs	r0, #11
 80052d0:	f7ff fb88 	bl	80049e4 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	0c1b      	lsrs	r3, r3, #16
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	4618      	mov	r0, r3
 80052dc:	f7ff fb82 	bl	80049e4 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	0a1b      	lsrs	r3, r3, #8
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7ff fb7c 	bl	80049e4 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7ff fb77 	bl	80049e4 <W25qxx_Spi>
	W25qxx_Spi(0);
 80052f6:	2000      	movs	r0, #0
 80052f8:	f7ff fb74 	bl	80049e4 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	b29a      	uxth	r2, r3
 8005300:	2364      	movs	r3, #100	; 0x64
 8005302:	68f9      	ldr	r1, [r7, #12]
 8005304:	4824      	ldr	r0, [pc, #144]	; (8005398 <W25qxx_ReadPage+0x174>)
 8005306:	f00a ffd2 	bl	80102ae <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800530a:	2201      	movs	r2, #1
 800530c:	2140      	movs	r1, #64	; 0x40
 800530e:	4821      	ldr	r0, [pc, #132]	; (8005394 <W25qxx_ReadPage+0x170>)
 8005310:	f008 f806 	bl	800d320 <HAL_GPIO_WritePin>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 8005314:	f007 f8ec 	bl	800c4f0 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 8005320:	2300      	movs	r3, #0
 8005322:	617b      	str	r3, [r7, #20]
 8005324:	e018      	b.n	8005358 <W25qxx_ReadPage+0x134>
	{
		if ((i % 8 == 0) && (i > 2))
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	f003 0307 	and.w	r3, r3, #7
 800532c:	2b00      	cmp	r3, #0
 800532e:	d108      	bne.n	8005342 <W25qxx_ReadPage+0x11e>
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	2b02      	cmp	r3, #2
 8005334:	d905      	bls.n	8005342 <W25qxx_ReadPage+0x11e>
		{
			printf("\r\n");
 8005336:	4819      	ldr	r0, [pc, #100]	; (800539c <W25qxx_ReadPage+0x178>)
 8005338:	f016 fdce 	bl	801bed8 <puts>
			W25qxx_Delay(10);
 800533c:	200a      	movs	r0, #10
 800533e:	f010 fdb3 	bl	8015ea8 <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	4413      	add	r3, r2
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	4619      	mov	r1, r3
 800534c:	4814      	ldr	r0, [pc, #80]	; (80053a0 <W25qxx_ReadPage+0x17c>)
 800534e:	f016 fd3d 	bl	801bdcc <iprintf>
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	3301      	adds	r3, #1
 8005356:	617b      	str	r3, [r7, #20]
 8005358:	697a      	ldr	r2, [r7, #20]
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	429a      	cmp	r2, r3
 800535e:	d3e2      	bcc.n	8005326 <W25qxx_ReadPage+0x102>
	}
	printf("\r\n");
 8005360:	480e      	ldr	r0, [pc, #56]	; (800539c <W25qxx_ReadPage+0x178>)
 8005362:	f016 fdb9 	bl	801bed8 <puts>
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
 8005366:	6939      	ldr	r1, [r7, #16]
 8005368:	480e      	ldr	r0, [pc, #56]	; (80053a4 <W25qxx_ReadPage+0x180>)
 800536a:	f016 fd2f 	bl	801bdcc <iprintf>
	W25qxx_Delay(100);
 800536e:	2064      	movs	r0, #100	; 0x64
 8005370:	f010 fd9a 	bl	8015ea8 <osDelay>
#endif
	W25qxx_Delay(1);
 8005374:	2001      	movs	r0, #1
 8005376:	f010 fd97 	bl	8015ea8 <osDelay>
	w25qxx.Lock = 0;
 800537a:	4b04      	ldr	r3, [pc, #16]	; (800538c <W25qxx_ReadPage+0x168>)
 800537c:	2200      	movs	r2, #0
 800537e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8005382:	bf00      	nop
 8005384:	3718      	adds	r7, #24
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	20009714 	.word	0x20009714
 8005390:	080215d4 	.word	0x080215d4
 8005394:	40020c00 	.word	0x40020c00
 8005398:	200087e4 	.word	0x200087e4
 800539c:	080213f8 	.word	0x080213f8
 80053a0:	080213fc 	.word	0x080213fc
 80053a4:	08021610 	.word	0x08021610

080053a8 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b088      	sub	sp, #32
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
 80053b4:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 80053b6:	4b36      	ldr	r3, [pc, #216]	; (8005490 <W25qxx_ReadSector+0xe8>)
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	683a      	ldr	r2, [r7, #0]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d802      	bhi.n	80053c6 <W25qxx_ReadSector+0x1e>
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d102      	bne.n	80053cc <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 80053c6:	4b32      	ldr	r3, [pc, #200]	; (8005490 <W25qxx_ReadSector+0xe8>)
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	68b9      	ldr	r1, [r7, #8]
 80053d2:	4830      	ldr	r0, [pc, #192]	; (8005494 <W25qxx_ReadSector+0xec>)
 80053d4:	f016 fcfa 	bl	801bdcc <iprintf>
	W25qxx_Delay(100);
 80053d8:	2064      	movs	r0, #100	; 0x64
 80053da:	f010 fd65 	bl	8015ea8 <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 80053de:	4b2c      	ldr	r3, [pc, #176]	; (8005490 <W25qxx_ReadSector+0xe8>)
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d306      	bcc.n	80053f6 <W25qxx_ReadSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx ReadSector Faild!\r\n");
 80053e8:	482b      	ldr	r0, [pc, #172]	; (8005498 <W25qxx_ReadSector+0xf0>)
 80053ea:	f016 fd75 	bl	801bed8 <puts>
		W25qxx_Delay(100);
 80053ee:	2064      	movs	r0, #100	; 0x64
 80053f0:	f010 fd5a 	bl	8015ea8 <osDelay>
#endif
		return;
 80053f4:	e048      	b.n	8005488 <W25qxx_ReadSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	441a      	add	r2, r3
 80053fc:	4b24      	ldr	r3, [pc, #144]	; (8005490 <W25qxx_ReadSector+0xe8>)
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	429a      	cmp	r2, r3
 8005402:	d905      	bls.n	8005410 <W25qxx_ReadSector+0x68>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8005404:	4b22      	ldr	r3, [pc, #136]	; (8005490 <W25qxx_ReadSector+0xe8>)
 8005406:	691a      	ldr	r2, [r3, #16]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	61bb      	str	r3, [r7, #24]
 800540e:	e001      	b.n	8005414 <W25qxx_ReadSector+0x6c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8005414:	68b8      	ldr	r0, [r7, #8]
 8005416:	f7ff fdab 	bl	8004f70 <W25qxx_SectorToPage>
 800541a:	4602      	mov	r2, r0
 800541c:	4b1c      	ldr	r3, [pc, #112]	; (8005490 <W25qxx_ReadSector+0xe8>)
 800541e:	895b      	ldrh	r3, [r3, #10]
 8005420:	4619      	mov	r1, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	fbb3 f3f1 	udiv	r3, r3, r1
 8005428:	4413      	add	r3, r2
 800542a:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 800542c:	4b18      	ldr	r3, [pc, #96]	; (8005490 <W25qxx_ReadSector+0xe8>)
 800542e:	895b      	ldrh	r3, [r3, #10]
 8005430:	461a      	mov	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	fbb3 f1f2 	udiv	r1, r3, r2
 8005438:	fb02 f201 	mul.w	r2, r2, r1
 800543c:	1a9b      	subs	r3, r3, r2
 800543e:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	69f9      	ldr	r1, [r7, #28]
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	f7ff feec 	bl	8005224 <W25qxx_ReadPage>
		StartPage++;
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	3301      	adds	r3, #1
 8005450:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 8005452:	4b0f      	ldr	r3, [pc, #60]	; (8005490 <W25qxx_ReadSector+0xe8>)
 8005454:	895b      	ldrh	r3, [r3, #10]
 8005456:	461a      	mov	r2, r3
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	1a9a      	subs	r2, r3, r2
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	4413      	add	r3, r2
 8005460:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8005462:	4b0b      	ldr	r3, [pc, #44]	; (8005490 <W25qxx_ReadSector+0xe8>)
 8005464:	895b      	ldrh	r3, [r3, #10]
 8005466:	461a      	mov	r2, r3
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	4413      	add	r3, r2
 8005470:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8005472:	2300      	movs	r3, #0
 8005474:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	2b00      	cmp	r3, #0
 800547a:	dce1      	bgt.n	8005440 <W25qxx_ReadSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
 800547c:	4807      	ldr	r0, [pc, #28]	; (800549c <W25qxx_ReadSector+0xf4>)
 800547e:	f016 fd2b 	bl	801bed8 <puts>
	W25qxx_Delay(100);
 8005482:	2064      	movs	r0, #100	; 0x64
 8005484:	f010 fd10 	bl	8015ea8 <osDelay>
#endif
}
 8005488:	3720      	adds	r7, #32
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	20009714 	.word	0x20009714
 8005494:	08021634 	.word	0x08021634
 8005498:	08021674 	.word	0x08021674
 800549c:	08021694 	.word	0x08021694

080054a0 <VR_Power_On>:


#include "main.h"


void VR_Power_On(void) {
 80054a0:	b580      	push	{r7, lr}
 80054a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_VR_PWR_GPIO_Port, OUT_VR_PWR_Pin, SET);
 80054a4:	2201      	movs	r2, #1
 80054a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80054aa:	4804      	ldr	r0, [pc, #16]	; (80054bc <VR_Power_On+0x1c>)
 80054ac:	f007 ff38 	bl	800d320 <HAL_GPIO_WritePin>
	// note that runcam needs around 3-5 seconds to fully power on
	HAL_Delay(5000);
 80054b0:	f241 3088 	movw	r0, #5000	; 0x1388
 80054b4:	f007 f828 	bl	800c508 <HAL_Delay>
}
 80054b8:	bf00      	nop
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	40021800 	.word	0x40021800

080054c0 <VR_Power_Off>:

void VR_Power_Off(void) {
 80054c0:	b580      	push	{r7, lr}
 80054c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_VR_PWR_GPIO_Port, OUT_VR_PWR_Pin, RESET);
 80054c4:	2200      	movs	r2, #0
 80054c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80054ca:	4802      	ldr	r0, [pc, #8]	; (80054d4 <VR_Power_Off+0x14>)
 80054cc:	f007 ff28 	bl	800d320 <HAL_GPIO_WritePin>
}
 80054d0:	bf00      	nop
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	40021800 	.word	0x40021800

080054d8 <VR_Start_Rec>:

void VR_Start_Rec(void) {
 80054d8:	b580      	push	{r7, lr}
 80054da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_VR_REC_GPIO_Port, OUT_VR_REC_Pin, SET); // HIGH = start record
 80054dc:	2201      	movs	r2, #1
 80054de:	2180      	movs	r1, #128	; 0x80
 80054e0:	4802      	ldr	r0, [pc, #8]	; (80054ec <VR_Start_Rec+0x14>)
 80054e2:	f007 ff1d 	bl	800d320 <HAL_GPIO_WritePin>
}
 80054e6:	bf00      	nop
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	40020c00 	.word	0x40020c00

080054f0 <VR_Stop_Rec>:

void VR_Stop_Rec(void) {
 80054f0:	b580      	push	{r7, lr}
 80054f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_VR_REC_GPIO_Port, OUT_VR_REC_Pin, RESET); // LOW = stop recording
 80054f4:	2200      	movs	r2, #0
 80054f6:	2180      	movs	r1, #128	; 0x80
 80054f8:	4802      	ldr	r0, [pc, #8]	; (8005504 <VR_Stop_Rec+0x14>)
 80054fa:	f007 ff11 	bl	800d320 <HAL_GPIO_WritePin>
}
 80054fe:	bf00      	nop
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	40020c00 	.word	0x40020c00

08005508 <Max31855_Read_Temp>:
uint32_t sign=0;									  // Sign bit
uint8_t DATARX[4];                                    // Raw Data from MAX6675
//uint8_t DATATX = {0xFF, 0xFF, 0xFF, 0xFF};                                    // Raw Data from MAX6675

// ------------------- Functions ----------------
float Max31855_Read_Temp(void) {
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
	int Temp = 0;                                        // Temperature Variable
 800550e:	2300      	movs	r3, #0
 8005510:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_RESET); // Low State for SPI Communication
 8005512:	2200      	movs	r2, #0
 8005514:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005518:	483b      	ldr	r0, [pc, #236]	; (8005608 <Max31855_Read_Temp+0x100>)
 800551a:	f007 ff01 	bl	800d320 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi4, DATARX, 4, 1000);                // DATA Transfer
 800551e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005522:	2204      	movs	r2, #4
 8005524:	4939      	ldr	r1, [pc, #228]	; (800560c <Max31855_Read_Temp+0x104>)
 8005526:	483a      	ldr	r0, [pc, #232]	; (8005610 <Max31855_Read_Temp+0x108>)
 8005528:	f00a fec1 	bl	80102ae <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_SET); // High State for SPI Communication
 800552c:	2201      	movs	r2, #1
 800552e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005532:	4835      	ldr	r0, [pc, #212]	; (8005608 <Max31855_Read_Temp+0x100>)
 8005534:	f007 fef4 	bl	800d320 <HAL_GPIO_WritePin>


	uint32_t v = DATARX[3] | (DATARX[2] << 8) | (DATARX[1] << 16) | (DATARX[0] << 24);
 8005538:	4b34      	ldr	r3, [pc, #208]	; (800560c <Max31855_Read_Temp+0x104>)
 800553a:	78db      	ldrb	r3, [r3, #3]
 800553c:	461a      	mov	r2, r3
 800553e:	4b33      	ldr	r3, [pc, #204]	; (800560c <Max31855_Read_Temp+0x104>)
 8005540:	789b      	ldrb	r3, [r3, #2]
 8005542:	021b      	lsls	r3, r3, #8
 8005544:	431a      	orrs	r2, r3
 8005546:	4b31      	ldr	r3, [pc, #196]	; (800560c <Max31855_Read_Temp+0x104>)
 8005548:	785b      	ldrb	r3, [r3, #1]
 800554a:	041b      	lsls	r3, r3, #16
 800554c:	431a      	orrs	r2, r3
 800554e:	4b2f      	ldr	r3, [pc, #188]	; (800560c <Max31855_Read_Temp+0x104>)
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	061b      	lsls	r3, r3, #24
 8005554:	4313      	orrs	r3, r2
 8005556:	603b      	str	r3, [r7, #0]

	Error = v & 0x07;								  // Error Detection
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	b2db      	uxtb	r3, r3
 800555c:	f003 0307 	and.w	r3, r3, #7
 8005560:	b2da      	uxtb	r2, r3
 8005562:	4b2c      	ldr	r3, [pc, #176]	; (8005614 <Max31855_Read_Temp+0x10c>)
 8005564:	701a      	strb	r2, [r3, #0]



		sign = (DATARX[0] & (0x80)) >> 7;					// Sign Bit calculation
 8005566:	4b29      	ldr	r3, [pc, #164]	; (800560c <Max31855_Read_Temp+0x104>)
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	09db      	lsrs	r3, r3, #7
 800556c:	b2db      	uxtb	r3, r3
 800556e:	461a      	mov	r2, r3
 8005570:	4b29      	ldr	r3, [pc, #164]	; (8005618 <Max31855_Read_Temp+0x110>)
 8005572:	601a      	str	r2, [r3, #0]

		if (DATARX[3] & 0x07)								 // Returns Error Number
 8005574:	4b25      	ldr	r3, [pc, #148]	; (800560c <Max31855_Read_Temp+0x104>)
 8005576:	78db      	ldrb	r3, [r3, #3]
 8005578:	f003 0307 	and.w	r3, r3, #7
 800557c:	2b00      	cmp	r3, #0
 800557e:	d009      	beq.n	8005594 <Max31855_Read_Temp+0x8c>
			return (-1 * (DATARX[3] & 0x07));
 8005580:	4b22      	ldr	r3, [pc, #136]	; (800560c <Max31855_Read_Temp+0x104>)
 8005582:	78db      	ldrb	r3, [r3, #3]
 8005584:	f003 0307 	and.w	r3, r3, #7
 8005588:	425b      	negs	r3, r3
 800558a:	ee07 3a90 	vmov	s15, r3
 800558e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005592:	e033      	b.n	80055fc <Max31855_Read_Temp+0xf4>

		else if (sign == 1) {								// Negative Temperature
 8005594:	4b20      	ldr	r3, [pc, #128]	; (8005618 <Max31855_Read_Temp+0x110>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d11d      	bne.n	80055d8 <Max31855_Read_Temp+0xd0>
			Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 800559c:	4b1b      	ldr	r3, [pc, #108]	; (800560c <Max31855_Read_Temp+0x104>)
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	019b      	lsls	r3, r3, #6
 80055a2:	4a1a      	ldr	r2, [pc, #104]	; (800560c <Max31855_Read_Temp+0x104>)
 80055a4:	7852      	ldrb	r2, [r2, #1]
 80055a6:	0892      	lsrs	r2, r2, #2
 80055a8:	b2d2      	uxtb	r2, r2
 80055aa:	4313      	orrs	r3, r2
 80055ac:	607b      	str	r3, [r7, #4]
			Temp &= 0b01111111111111;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055b4:	607b      	str	r3, [r7, #4]
			Temp ^= 0b01111111111111;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f483 53ff 	eor.w	r3, r3, #8160	; 0x1fe0
 80055bc:	f083 031f 	eor.w	r3, r3, #31
 80055c0:	607b      	str	r3, [r7, #4]
			return ((float) -Temp / 4);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	425b      	negs	r3, r3
 80055c6:	ee07 3a90 	vmov	s15, r3
 80055ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80055ce:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80055d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80055d6:	e011      	b.n	80055fc <Max31855_Read_Temp+0xf4>
		}

		else												 // Positive Temperature
		{
			Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 80055d8:	4b0c      	ldr	r3, [pc, #48]	; (800560c <Max31855_Read_Temp+0x104>)
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	019b      	lsls	r3, r3, #6
 80055de:	4a0b      	ldr	r2, [pc, #44]	; (800560c <Max31855_Read_Temp+0x104>)
 80055e0:	7852      	ldrb	r2, [r2, #1]
 80055e2:	0892      	lsrs	r2, r2, #2
 80055e4:	b2d2      	uxtb	r2, r2
 80055e6:	4313      	orrs	r3, r2
 80055e8:	607b      	str	r3, [r7, #4]
			return ((float) Temp / 4.0);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	ee07 3a90 	vmov	s15, r3
 80055f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80055f4:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80055f8:	eec7 7a26 	vdiv.f32	s15, s14, s13

	// LSB = 0.25 degrees C
	centigrade *= 0.25;
	return centigrade;
	*/
}
 80055fc:	eeb0 0a67 	vmov.f32	s0, s15
 8005600:	3708      	adds	r7, #8
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	40021000 	.word	0x40021000
 800560c:	2000973c 	.word	0x2000973c
 8005610:	2000883c 	.word	0x2000883c
 8005614:	2000051c 	.word	0x2000051c
 8005618:	20000520 	.word	0x20000520

0800561c <MRT_pollPropulsion>:


//**************************************************//
//PUBLIC FUNCTIONS

void MRT_pollPropulsion(void){
 800561c:	b580      	push	{r7, lr}
 800561e:	af00      	add	r7, sp, #0
	MRT_getThermoTemp();
 8005620:	f000 f806 	bl	8005630 <MRT_getThermoTemp>
	MRT_getTransducerVoltage();
 8005624:	f000 f812 	bl	800564c <MRT_getTransducerVoltage>
	MRT_getValveStatus();
 8005628:	f000 f820 	bl	800566c <MRT_getValveStatus>
}
 800562c:	bf00      	nop
 800562e:	bd80      	pop	{r7, pc}

08005630 <MRT_getThermoTemp>:

void MRT_getThermoTemp(void){
 8005630:	b580      	push	{r7, lr}
 8005632:	af00      	add	r7, sp, #0
	thermocouple_temperature = Max31855_Read_Temp();
 8005634:	f7ff ff68 	bl	8005508 <Max31855_Read_Temp>
 8005638:	eef0 7a40 	vmov.f32	s15, s0
 800563c:	4b02      	ldr	r3, [pc, #8]	; (8005648 <MRT_getThermoTemp+0x18>)
 800563e:	edc3 7a00 	vstr	s15, [r3]
}
 8005642:	bf00      	nop
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	20009774 	.word	0x20009774

0800564c <MRT_getTransducerVoltage>:

void MRT_getTransducerVoltage(void){
 800564c:	b580      	push	{r7, lr}
 800564e:	af00      	add	r7, sp, #0
	transducer_voltage = MRT_prop_poll_pressure_transducer(&TRANSDUCER_ADC);
 8005650:	4804      	ldr	r0, [pc, #16]	; (8005664 <MRT_getTransducerVoltage+0x18>)
 8005652:	f000 f85d 	bl	8005710 <MRT_prop_poll_pressure_transducer>
 8005656:	eef0 7a40 	vmov.f32	s15, s0
 800565a:	4b03      	ldr	r3, [pc, #12]	; (8005668 <MRT_getTransducerVoltage+0x1c>)
 800565c:	edc3 7a00 	vstr	s15, [r3]
}
 8005660:	bf00      	nop
 8005662:	bd80      	pop	{r7, pc}
 8005664:	20008644 	.word	0x20008644
 8005668:	20009778 	.word	0x20009778

0800566c <MRT_getValveStatus>:

void MRT_getValveStatus(void){
 800566c:	b580      	push	{r7, lr}
 800566e:	af00      	add	r7, sp, #0
	valve_status = HAL_GPIO_ReadPin(IN_Prop_ActuatedVent_Feedback_GPIO_Port,IN_Prop_ActuatedVent_Feedback_Pin);
 8005670:	2102      	movs	r1, #2
 8005672:	4804      	ldr	r0, [pc, #16]	; (8005684 <MRT_getValveStatus+0x18>)
 8005674:	f007 fe3c 	bl	800d2f0 <HAL_GPIO_ReadPin>
 8005678:	4603      	mov	r3, r0
 800567a:	461a      	mov	r2, r3
 800567c:	4b02      	ldr	r3, [pc, #8]	; (8005688 <MRT_getValveStatus+0x1c>)
 800567e:	701a      	strb	r2, [r3, #0]
}
 8005680:	bf00      	nop
 8005682:	bd80      	pop	{r7, pc}
 8005684:	40020400 	.word	0x40020400
 8005688:	20009772 	.word	0x20009772

0800568c <MRT_formatPropulsion>:

// formats propulsion telemetry string using sprintf
void MRT_formatPropulsion(void) {
 800568c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800568e:	b089      	sub	sp, #36	; 0x24
 8005690:	af06      	add	r7, sp, #24
	memset(msg_buffer_pr, 0, 50);
 8005692:	2232      	movs	r2, #50	; 0x32
 8005694:	2100      	movs	r1, #0
 8005696:	4816      	ldr	r0, [pc, #88]	; (80056f0 <MRT_formatPropulsion+0x64>)
 8005698:	f015 f9ee 	bl	801aa78 <memset>
	//tank_pressure = convert_prop_tank_pressure(); // convert buffered readings to voltage TODO??
	sprintf(msg_buffer_pr, "P,%03.2f,%03.2f,%d,%02d,%02d,%lu,E\r\n",
 800569c:	4b15      	ldr	r3, [pc, #84]	; (80056f4 <MRT_formatPropulsion+0x68>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4618      	mov	r0, r3
 80056a2:	f7fa ff71 	bl	8000588 <__aeabi_f2d>
 80056a6:	4604      	mov	r4, r0
 80056a8:	460d      	mov	r5, r1
 80056aa:	4b13      	ldr	r3, [pc, #76]	; (80056f8 <MRT_formatPropulsion+0x6c>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7fa ff6a 	bl	8000588 <__aeabi_f2d>
 80056b4:	4602      	mov	r2, r0
 80056b6:	460b      	mov	r3, r1
 80056b8:	4910      	ldr	r1, [pc, #64]	; (80056fc <MRT_formatPropulsion+0x70>)
 80056ba:	7809      	ldrb	r1, [r1, #0]
 80056bc:	4608      	mov	r0, r1
 80056be:	4910      	ldr	r1, [pc, #64]	; (8005700 <MRT_formatPropulsion+0x74>)
 80056c0:	7809      	ldrb	r1, [r1, #0]
 80056c2:	460e      	mov	r6, r1
 80056c4:	490f      	ldr	r1, [pc, #60]	; (8005704 <MRT_formatPropulsion+0x78>)
 80056c6:	7809      	ldrb	r1, [r1, #0]
 80056c8:	6079      	str	r1, [r7, #4]
 80056ca:	490f      	ldr	r1, [pc, #60]	; (8005708 <MRT_formatPropulsion+0x7c>)
 80056cc:	6809      	ldr	r1, [r1, #0]
 80056ce:	9105      	str	r1, [sp, #20]
 80056d0:	6879      	ldr	r1, [r7, #4]
 80056d2:	9104      	str	r1, [sp, #16]
 80056d4:	9603      	str	r6, [sp, #12]
 80056d6:	9002      	str	r0, [sp, #8]
 80056d8:	e9cd 2300 	strd	r2, r3, [sp]
 80056dc:	4622      	mov	r2, r4
 80056de:	462b      	mov	r3, r5
 80056e0:	490a      	ldr	r1, [pc, #40]	; (800570c <MRT_formatPropulsion+0x80>)
 80056e2:	4803      	ldr	r0, [pc, #12]	; (80056f0 <MRT_formatPropulsion+0x64>)
 80056e4:	f016 fcc4 	bl	801c070 <siprintf>
			transducer_voltage, thermocouple_temperature, valve_status,
			prev_min, prev_sec, prev_subsec);
}
 80056e8:	bf00      	nop
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056f0:	20009740 	.word	0x20009740
 80056f4:	20009778 	.word	0x20009778
 80056f8:	20009774 	.word	0x20009774
 80056fc:	20009772 	.word	0x20009772
 8005700:	200003fe 	.word	0x200003fe
 8005704:	200003ff 	.word	0x200003ff
 8005708:	20000400 	.word	0x20000400
 800570c:	08021728 	.word	0x08021728

08005710 <MRT_prop_poll_pressure_transducer>:
//PRIVATE FUNCTIONS

/*
 * Get the pressure transducer voltage (poll ADC)
 */
float MRT_prop_poll_pressure_transducer(ADC_HandleTypeDef* hadc) {
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
	// reading adc
	HAL_ADC_Start(hadc);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f006 ff5d 	bl	800c5d8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, 1000);
 800571e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f007 f85d 	bl	800c7e2 <HAL_ADC_PollForConversion>
	uint32_t pressure_sensor_raw = HAL_ADC_GetValue(hadc);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f007 f8e5 	bl	800c8f8 <HAL_ADC_GetValue>
 800572e:	60f8      	str	r0, [r7, #12]
	HAL_ADC_Stop(hadc);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f007 f823 	bl	800c77c <HAL_ADC_Stop>

	float voltage = (float) (pressure_sensor_raw / 4095.0) * 3.3; // assuming 12 bits
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f7fa ff04 	bl	8000544 <__aeabi_ui2d>
 800573c:	a312      	add	r3, pc, #72	; (adr r3, 8005788 <MRT_prop_poll_pressure_transducer+0x78>)
 800573e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005742:	f7fb f8a3 	bl	800088c <__aeabi_ddiv>
 8005746:	4602      	mov	r2, r0
 8005748:	460b      	mov	r3, r1
 800574a:	4610      	mov	r0, r2
 800574c:	4619      	mov	r1, r3
 800574e:	f7fb fa6b 	bl	8000c28 <__aeabi_d2f>
 8005752:	4603      	mov	r3, r0
 8005754:	4618      	mov	r0, r3
 8005756:	f7fa ff17 	bl	8000588 <__aeabi_f2d>
 800575a:	a30d      	add	r3, pc, #52	; (adr r3, 8005790 <MRT_prop_poll_pressure_transducer+0x80>)
 800575c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005760:	f7fa ff6a 	bl	8000638 <__aeabi_dmul>
 8005764:	4602      	mov	r2, r0
 8005766:	460b      	mov	r3, r1
 8005768:	4610      	mov	r0, r2
 800576a:	4619      	mov	r1, r3
 800576c:	f7fb fa5c 	bl	8000c28 <__aeabi_d2f>
 8005770:	4603      	mov	r3, r0
 8005772:	60bb      	str	r3, [r7, #8]

	return voltage;
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	ee07 3a90 	vmov	s15, r3
}
 800577a:	eeb0 0a67 	vmov.f32	s0, s15
 800577e:	3710      	adds	r7, #16
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	f3af 8000 	nop.w
 8005788:	00000000 	.word	0x00000000
 800578c:	40affe00 	.word	0x40affe00
 8005790:	66666666 	.word	0x66666666
 8005794:	400a6666 	.word	0x400a6666

08005798 <MRT_LSM6DSR_Constructor>:


//**************************************************//
/*****LSM6DSR STATIC FUNCTIONS*****/

void MRT_LSM6DSR_Constructor(){
 8005798:	b598      	push	{r3, r4, r7, lr}
 800579a:	af00      	add	r7, sp, #0
	if (lsm6dsr==NULL){
 800579c:	4b08      	ldr	r3, [pc, #32]	; (80057c0 <MRT_LSM6DSR_Constructor+0x28>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d10b      	bne.n	80057bc <MRT_LSM6DSR_Constructor+0x24>
		lsm6dsr = new LSM6DSR(&LSM6DSR_I2C, (uint8_t) MRT_LSM6DSR_ADDRESS);
 80057a4:	203c      	movs	r0, #60	; 0x3c
 80057a6:	f013 fef9 	bl	801959c <_Znwj>
 80057aa:	4603      	mov	r3, r0
 80057ac:	461c      	mov	r4, r3
 80057ae:	226a      	movs	r2, #106	; 0x6a
 80057b0:	4904      	ldr	r1, [pc, #16]	; (80057c4 <MRT_LSM6DSR_Constructor+0x2c>)
 80057b2:	4620      	mov	r0, r4
 80057b4:	f000 f99c 	bl	8005af0 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh>
 80057b8:	4b01      	ldr	r3, [pc, #4]	; (80057c0 <MRT_LSM6DSR_Constructor+0x28>)
 80057ba:	601c      	str	r4, [r3, #0]
	}
}
 80057bc:	bf00      	nop
 80057be:	bd98      	pop	{r3, r4, r7, pc}
 80057c0:	20000524 	.word	0x20000524
 80057c4:	200086b8 	.word	0x200086b8

080057c8 <MRT_LSM6DSR_Destructor>:

void MRT_LSM6DSR_Destructor(){
 80057c8:	b480      	push	{r7}
 80057ca:	af00      	add	r7, sp, #0
	if (lsm6dsr!=NULL){
 80057cc:	4b05      	ldr	r3, [pc, #20]	; (80057e4 <MRT_LSM6DSR_Destructor+0x1c>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d002      	beq.n	80057da <MRT_LSM6DSR_Destructor+0x12>
		lsm6dsr = NULL;
 80057d4:	4b03      	ldr	r3, [pc, #12]	; (80057e4 <MRT_LSM6DSR_Destructor+0x1c>)
 80057d6:	2200      	movs	r2, #0
 80057d8:	601a      	str	r2, [r3, #0]
	}
}
 80057da:	bf00      	nop
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr
 80057e4:	20000524 	.word	0x20000524

080057e8 <MRT_LSM6DSR_getAcceleration>:

void MRT_LSM6DSR_getAcceleration(void){
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
	float* temp_array = lsm6dsr->getAcceleration();
 80057ee:	4b0b      	ldr	r3, [pc, #44]	; (800581c <MRT_LSM6DSR_getAcceleration+0x34>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4618      	mov	r0, r3
 80057f4:	f000 fa22 	bl	8005c3c <_ZN7LSM6DSR15getAccelerationEv>
 80057f8:	6078      	str	r0, [r7, #4]
	hlsm6dsr.acceleration_mg[0] = temp_array[0];
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a08      	ldr	r2, [pc, #32]	; (8005820 <MRT_LSM6DSR_getAcceleration+0x38>)
 8005800:	6013      	str	r3, [r2, #0]
	hlsm6dsr.acceleration_mg[1] = temp_array[1];
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	4a06      	ldr	r2, [pc, #24]	; (8005820 <MRT_LSM6DSR_getAcceleration+0x38>)
 8005808:	6053      	str	r3, [r2, #4]
	hlsm6dsr.acceleration_mg[2] = temp_array[2];
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	4a04      	ldr	r2, [pc, #16]	; (8005820 <MRT_LSM6DSR_getAcceleration+0x38>)
 8005810:	6093      	str	r3, [r2, #8]
}
 8005812:	bf00      	nop
 8005814:	3708      	adds	r7, #8
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	20000524 	.word	0x20000524
 8005820:	2000052c 	.word	0x2000052c

08005824 <MRT_LSM6DSR_getAngularRate>:
void MRT_LSM6DSR_getAngularRate(void){
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
	float* temp_array = lsm6dsr->getAngularRate();
 800582a:	4b0b      	ldr	r3, [pc, #44]	; (8005858 <MRT_LSM6DSR_getAngularRate+0x34>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4618      	mov	r0, r3
 8005830:	f000 fa82 	bl	8005d38 <_ZN7LSM6DSR14getAngularRateEv>
 8005834:	6078      	str	r0, [r7, #4]
	hlsm6dsr.angular_rate_mdps[0] = temp_array[0];
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a08      	ldr	r2, [pc, #32]	; (800585c <MRT_LSM6DSR_getAngularRate+0x38>)
 800583c:	60d3      	str	r3, [r2, #12]
	hlsm6dsr.angular_rate_mdps[1] = temp_array[1];
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	4a06      	ldr	r2, [pc, #24]	; (800585c <MRT_LSM6DSR_getAngularRate+0x38>)
 8005844:	6113      	str	r3, [r2, #16]
	hlsm6dsr.angular_rate_mdps[2] = temp_array[2];
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	4a04      	ldr	r2, [pc, #16]	; (800585c <MRT_LSM6DSR_getAngularRate+0x38>)
 800584c:	6153      	str	r3, [r2, #20]
}
 800584e:	bf00      	nop
 8005850:	3708      	adds	r7, #8
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	20000524 	.word	0x20000524
 800585c:	2000052c 	.word	0x2000052c

08005860 <MRT_LSM6DSR_getTemperature>:
void MRT_LSM6DSR_getTemperature(void){
 8005860:	b580      	push	{r7, lr}
 8005862:	af00      	add	r7, sp, #0
	lsm6dsr->getTemperature();
 8005864:	4b05      	ldr	r3, [pc, #20]	; (800587c <MRT_LSM6DSR_getTemperature+0x1c>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4618      	mov	r0, r3
 800586a:	f000 fa2f 	bl	8005ccc <_ZN7LSM6DSR14getTemperatureEv>
	hlsm6dsr.temperature_degC = lsm6dsr->temperature_degC;
 800586e:	4b03      	ldr	r3, [pc, #12]	; (800587c <MRT_LSM6DSR_getTemperature+0x1c>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	699b      	ldr	r3, [r3, #24]
 8005874:	4a02      	ldr	r2, [pc, #8]	; (8005880 <MRT_LSM6DSR_getTemperature+0x20>)
 8005876:	6193      	str	r3, [r2, #24]
}
 8005878:	bf00      	nop
 800587a:	bd80      	pop	{r7, pc}
 800587c:	20000524 	.word	0x20000524
 8005880:	2000052c 	.word	0x2000052c

08005884 <MRT_LSM6DSR_pollAll>:

void MRT_LSM6DSR_pollAll(void){
 8005884:	b580      	push	{r7, lr}
 8005886:	af00      	add	r7, sp, #0
	MRT_LSM6DSR_getAcceleration();
 8005888:	f7ff ffae 	bl	80057e8 <MRT_LSM6DSR_getAcceleration>
	MRT_LSM6DSR_getAngularRate();
 800588c:	f7ff ffca 	bl	8005824 <MRT_LSM6DSR_getAngularRate>
	MRT_LSM6DSR_getTemperature();
 8005890:	f7ff ffe6 	bl	8005860 <MRT_LSM6DSR_getTemperature>
}
 8005894:	bf00      	nop
 8005896:	bd80      	pop	{r7, pc}

08005898 <MRT_LPS22HH_Constructor>:


//**************************************************//
/*****LPS22HH STATIC FUNCTIONS*****/

void MRT_LPS22HH_Constructor(){
 8005898:	b598      	push	{r3, r4, r7, lr}
 800589a:	af00      	add	r7, sp, #0
	if (lps22hh==NULL){
 800589c:	4b08      	ldr	r3, [pc, #32]	; (80058c0 <MRT_LPS22HH_Constructor+0x28>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d10b      	bne.n	80058bc <MRT_LPS22HH_Constructor+0x24>
		lps22hh = new LPS22HH(&LPS22HH_I2C, (uint8_t) MRT_LPS22HH_ADDRESS);
 80058a4:	2020      	movs	r0, #32
 80058a6:	f013 fe79 	bl	801959c <_Znwj>
 80058aa:	4603      	mov	r3, r0
 80058ac:	461c      	mov	r4, r3
 80058ae:	22b3      	movs	r2, #179	; 0xb3
 80058b0:	4904      	ldr	r1, [pc, #16]	; (80058c4 <MRT_LPS22HH_Constructor+0x2c>)
 80058b2:	4620      	mov	r0, r4
 80058b4:	f000 fac4 	bl	8005e40 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh>
 80058b8:	4b01      	ldr	r3, [pc, #4]	; (80058c0 <MRT_LPS22HH_Constructor+0x28>)
 80058ba:	601c      	str	r4, [r3, #0]
	}
}
 80058bc:	bf00      	nop
 80058be:	bd98      	pop	{r3, r4, r7, pc}
 80058c0:	20000528 	.word	0x20000528
 80058c4:	200086b8 	.word	0x200086b8

080058c8 <MRT_LPS22HH_Destructor>:

void MRT_LPS22HH_Destructor(){
 80058c8:	b480      	push	{r7}
 80058ca:	af00      	add	r7, sp, #0
	if (lps22hh!=NULL){
 80058cc:	4b05      	ldr	r3, [pc, #20]	; (80058e4 <MRT_LPS22HH_Destructor+0x1c>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d002      	beq.n	80058da <MRT_LPS22HH_Destructor+0x12>
		lps22hh = NULL;
 80058d4:	4b03      	ldr	r3, [pc, #12]	; (80058e4 <MRT_LPS22HH_Destructor+0x1c>)
 80058d6:	2200      	movs	r2, #0
 80058d8:	601a      	str	r2, [r3, #0]
	}
}
 80058da:	bf00      	nop
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr
 80058e4:	20000528 	.word	0x20000528

080058e8 <MRT_LPS22HH_getPressure>:

void MRT_LPS22HH_getPressure(void){
 80058e8:	b580      	push	{r7, lr}
 80058ea:	af00      	add	r7, sp, #0
	hlps22hh.pressure_hPa = lps22hh->getPressure();
 80058ec:	4b05      	ldr	r3, [pc, #20]	; (8005904 <MRT_LPS22HH_getPressure+0x1c>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4618      	mov	r0, r3
 80058f2:	f000 fb27 	bl	8005f44 <_ZN7LPS22HH11getPressureEv>
 80058f6:	eef0 7a40 	vmov.f32	s15, s0
 80058fa:	4b03      	ldr	r3, [pc, #12]	; (8005908 <MRT_LPS22HH_getPressure+0x20>)
 80058fc:	edc3 7a00 	vstr	s15, [r3]
}
 8005900:	bf00      	nop
 8005902:	bd80      	pop	{r7, pc}
 8005904:	20000528 	.word	0x20000528
 8005908:	20000558 	.word	0x20000558

0800590c <MRT_LPS22HH_getTemperature>:

void MRT_LPS22HH_getTemperature(void){
 800590c:	b580      	push	{r7, lr}
 800590e:	af00      	add	r7, sp, #0
	hlps22hh.temperature_degC = lps22hh->getTemperature();
 8005910:	4b05      	ldr	r3, [pc, #20]	; (8005928 <MRT_LPS22HH_getTemperature+0x1c>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4618      	mov	r0, r3
 8005916:	f000 fb49 	bl	8005fac <_ZN7LPS22HH14getTemperatureEv>
 800591a:	eef0 7a40 	vmov.f32	s15, s0
 800591e:	4b03      	ldr	r3, [pc, #12]	; (800592c <MRT_LPS22HH_getTemperature+0x20>)
 8005920:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8005924:	bf00      	nop
 8005926:	bd80      	pop	{r7, pc}
 8005928:	20000528 	.word	0x20000528
 800592c:	20000558 	.word	0x20000558

08005930 <MRT_LPS22HH_pollAll>:

void MRT_LPS22HH_pollAll(void){
 8005930:	b580      	push	{r7, lr}
 8005932:	af00      	add	r7, sp, #0
	MRT_LPS22HH_getPressure();
 8005934:	f7ff ffd8 	bl	80058e8 <MRT_LPS22HH_getPressure>
	MRT_LPS22HH_getTemperature();
 8005938:	f7ff ffe8 	bl	800590c <MRT_LPS22HH_getTemperature>
}
 800593c:	bf00      	nop
 800593e:	bd80      	pop	{r7, pc}

08005940 <MRT_GPS_pollAll>:


//**************************************************//
/*****GPS STATIC FUNCTIONS*****/

void MRT_GPS_pollAll(void){
 8005940:	b580      	push	{r7, lr}
 8005942:	af00      	add	r7, sp, #0
	GPS_Poll(&hgps.latitude, &hgps.longitude, &hgps.time);
 8005944:	4a03      	ldr	r2, [pc, #12]	; (8005954 <MRT_GPS_pollAll+0x14>)
 8005946:	4904      	ldr	r1, [pc, #16]	; (8005958 <MRT_GPS_pollAll+0x18>)
 8005948:	4804      	ldr	r0, [pc, #16]	; (800595c <MRT_GPS_pollAll+0x1c>)
 800594a:	f000 fb9f 	bl	800608c <GPS_Poll>
}
 800594e:	bf00      	nop
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	20000574 	.word	0x20000574
 8005958:	20000570 	.word	0x20000570
 800595c:	2000056c 	.word	0x2000056c

08005960 <MRT_LSM6DSR_Init>:


//**************************************************//
/*****PUBLIC STATIC FUNCTIONS*****/

HLSM6DSR MRT_LSM6DSR_Init(void){
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
	MRT_LSM6DSR_Constructor();
 8005968:	f7ff ff16 	bl	8005798 <MRT_LSM6DSR_Constructor>
	HLSM6DSR lsm6dsr_handler;
	lsm6dsr_handler.getAcceleration = &MRT_LSM6DSR_getAcceleration;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a16      	ldr	r2, [pc, #88]	; (80059c8 <MRT_LSM6DSR_Init+0x68>)
 8005970:	61da      	str	r2, [r3, #28]
	lsm6dsr_handler.getAngularRate = &MRT_LSM6DSR_getAngularRate;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a15      	ldr	r2, [pc, #84]	; (80059cc <MRT_LSM6DSR_Init+0x6c>)
 8005976:	621a      	str	r2, [r3, #32]
	lsm6dsr_handler.getTemperature = &MRT_LSM6DSR_getTemperature;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a15      	ldr	r2, [pc, #84]	; (80059d0 <MRT_LSM6DSR_Init+0x70>)
 800597c:	625a      	str	r2, [r3, #36]	; 0x24
	lsm6dsr_handler.pollAll = &MRT_LSM6DSR_pollAll;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a14      	ldr	r2, [pc, #80]	; (80059d4 <MRT_LSM6DSR_Init+0x74>)
 8005982:	629a      	str	r2, [r3, #40]	; 0x28

	lsm6dsr_handler.acceleration_mg[0] = 0;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f04f 0200 	mov.w	r2, #0
 800598a:	601a      	str	r2, [r3, #0]
	lsm6dsr_handler.acceleration_mg[1] = 0;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f04f 0200 	mov.w	r2, #0
 8005992:	605a      	str	r2, [r3, #4]
	lsm6dsr_handler.acceleration_mg[2] = 0;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f04f 0200 	mov.w	r2, #0
 800599a:	609a      	str	r2, [r3, #8]
	lsm6dsr_handler.angular_rate_mdps[0] = 0;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f04f 0200 	mov.w	r2, #0
 80059a2:	60da      	str	r2, [r3, #12]
	lsm6dsr_handler.angular_rate_mdps[1] = 0;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f04f 0200 	mov.w	r2, #0
 80059aa:	611a      	str	r2, [r3, #16]
	lsm6dsr_handler.angular_rate_mdps[2] = 0;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f04f 0200 	mov.w	r2, #0
 80059b2:	615a      	str	r2, [r3, #20]
	lsm6dsr_handler.temperature_degC = 0;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f04f 0200 	mov.w	r2, #0
 80059ba:	619a      	str	r2, [r3, #24]
	return lsm6dsr_handler;
 80059bc:	bf00      	nop
}
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	3708      	adds	r7, #8
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	080057e9 	.word	0x080057e9
 80059cc:	08005825 	.word	0x08005825
 80059d0:	08005861 	.word	0x08005861
 80059d4:	08005885 	.word	0x08005885

080059d8 <MRT_LPS22HH_Init>:

struct HLPS22HH MRT_LPS22HH_Init(void){
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
	MRT_LPS22HH_Constructor();
 80059e0:	f7ff ff5a 	bl	8005898 <MRT_LPS22HH_Constructor>
	struct HLPS22HH lps22hh_handler;
	lps22hh_handler.getPressure = &MRT_LPS22HH_getPressure;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a0a      	ldr	r2, [pc, #40]	; (8005a10 <MRT_LPS22HH_Init+0x38>)
 80059e8:	609a      	str	r2, [r3, #8]
	lps22hh_handler.getTemperature = &MRT_LPS22HH_getTemperature;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a09      	ldr	r2, [pc, #36]	; (8005a14 <MRT_LPS22HH_Init+0x3c>)
 80059ee:	60da      	str	r2, [r3, #12]
	lps22hh_handler.pollAll = &MRT_LPS22HH_pollAll;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a09      	ldr	r2, [pc, #36]	; (8005a18 <MRT_LPS22HH_Init+0x40>)
 80059f4:	611a      	str	r2, [r3, #16]

	lps22hh_handler.pressure_hPa = 0;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f04f 0200 	mov.w	r2, #0
 80059fc:	601a      	str	r2, [r3, #0]
	lps22hh_handler.temperature_degC = 0;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f04f 0200 	mov.w	r2, #0
 8005a04:	605a      	str	r2, [r3, #4]
	return lps22hh_handler;
 8005a06:	bf00      	nop
}
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	3708      	adds	r7, #8
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	080058e9 	.word	0x080058e9
 8005a14:	0800590d 	.word	0x0800590d
 8005a18:	08005931 	.word	0x08005931

08005a1c <MRT_GPS_Init>:

struct HGPS MRT_GPS_Init(void){
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b082      	sub	sp, #8
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
	struct HGPS gps_handler;
	gps_handler.pollAll = &MRT_GPS_pollAll;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a0c      	ldr	r2, [pc, #48]	; (8005a58 <MRT_GPS_Init+0x3c>)
 8005a28:	60da      	str	r2, [r3, #12]
	GPS_Init(&GPS_UART, print, tone_freq);
 8005a2a:	4a0c      	ldr	r2, [pc, #48]	; (8005a5c <MRT_GPS_Init+0x40>)
 8005a2c:	490c      	ldr	r1, [pc, #48]	; (8005a60 <MRT_GPS_Init+0x44>)
 8005a2e:	480d      	ldr	r0, [pc, #52]	; (8005a64 <MRT_GPS_Init+0x48>)
 8005a30:	f000 fd8c 	bl	800654c <GPS_Init>
	gps_handler.latitude = 0;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f04f 0200 	mov.w	r2, #0
 8005a3a:	601a      	str	r2, [r3, #0]
	gps_handler.longitude = 0;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f04f 0200 	mov.w	r2, #0
 8005a42:	605a      	str	r2, [r3, #4]
	gps_handler.time = 0;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f04f 0200 	mov.w	r2, #0
 8005a4a:	609a      	str	r2, [r3, #8]
	return gps_handler;
 8005a4c:	bf00      	nop
}
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	3708      	adds	r7, #8
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	08005941 	.word	0x08005941
 8005a5c:	08001149 	.word	0x08001149
 8005a60:	08001109 	.word	0x08001109
 8005a64:	200089ac 	.word	0x200089ac

08005a68 <MRT_i2c_sensors_Init>:

void MRT_i2c_sensors_Init(void){
 8005a68:	b5b0      	push	{r4, r5, r7, lr}
 8005a6a:	b08c      	sub	sp, #48	; 0x30
 8005a6c:	af00      	add	r7, sp, #0

	//LSM6DSR
	#if LSM6DSR_
	HAL_IWDG_Refresh(&hiwdg);
 8005a6e:	4818      	ldr	r0, [pc, #96]	; (8005ad0 <MRT_i2c_sensors_Init+0x68>)
 8005a70:	f008 fd3a 	bl	800e4e8 <HAL_IWDG_Refresh>
	hlsm6dsr = MRT_LSM6DSR_Init();
 8005a74:	4c17      	ldr	r4, [pc, #92]	; (8005ad4 <MRT_i2c_sensors_Init+0x6c>)
 8005a76:	463b      	mov	r3, r7
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f7ff ff71 	bl	8005960 <MRT_LSM6DSR_Init>
 8005a7e:	4625      	mov	r5, r4
 8005a80:	463c      	mov	r4, r7
 8005a82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a8a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005a8e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	#endif

	//LPS22HH
	#if LPS22HH_
	HAL_IWDG_Refresh(&hiwdg);
 8005a92:	480f      	ldr	r0, [pc, #60]	; (8005ad0 <MRT_i2c_sensors_Init+0x68>)
 8005a94:	f008 fd28 	bl	800e4e8 <HAL_IWDG_Refresh>
	hlps22hh = MRT_LPS22HH_Init();
 8005a98:	4c0f      	ldr	r4, [pc, #60]	; (8005ad8 <MRT_i2c_sensors_Init+0x70>)
 8005a9a:	463b      	mov	r3, r7
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f7ff ff9b 	bl	80059d8 <MRT_LPS22HH_Init>
 8005aa2:	4625      	mov	r5, r4
 8005aa4:	463c      	mov	r4, r7
 8005aa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005aa8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005aaa:	6823      	ldr	r3, [r4, #0]
 8005aac:	602b      	str	r3, [r5, #0]
	#endif

	//GPS
	#if GPS_
	HAL_IWDG_Refresh(&hiwdg);
 8005aae:	4808      	ldr	r0, [pc, #32]	; (8005ad0 <MRT_i2c_sensors_Init+0x68>)
 8005ab0:	f008 fd1a 	bl	800e4e8 <HAL_IWDG_Refresh>
	hgps = MRT_GPS_Init();
 8005ab4:	4c09      	ldr	r4, [pc, #36]	; (8005adc <MRT_i2c_sensors_Init+0x74>)
 8005ab6:	463b      	mov	r3, r7
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f7ff ffaf 	bl	8005a1c <MRT_GPS_Init>
 8005abe:	463b      	mov	r3, r7
 8005ac0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005ac2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	#endif

}
 8005ac6:	bf00      	nop
 8005ac8:	3730      	adds	r7, #48	; 0x30
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bdb0      	pop	{r4, r5, r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	20008760 	.word	0x20008760
 8005ad4:	2000052c 	.word	0x2000052c
 8005ad8:	20000558 	.word	0x20000558
 8005adc:	2000056c 	.word	0x2000056c

08005ae0 <MRT_i2c_sensors_Deinit>:


void MRT_i2c_sensors_Deinit(void){
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	af00      	add	r7, sp, #0

	//LSM6DSR
	#if LSM6DSR_
	MRT_LSM6DSR_Destructor();
 8005ae4:	f7ff fe70 	bl	80057c8 <MRT_LSM6DSR_Destructor>
	#endif

	//LPS22HH
	#if LPS22HH_
	MRT_LPS22HH_Destructor();
 8005ae8:	f7ff feee 	bl	80058c8 <MRT_LPS22HH_Destructor>
	#endif

	//GPS
	//NO DEINIT NEEDED HERE
}
 8005aec:	bf00      	nop
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh>:


//**************************************************//
/*****LSM6DSR*****/

LSM6DSR::LSM6DSR(I2C_HandleTypeDef* i2c_bus, uint8_t address){
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b088      	sub	sp, #32
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	4613      	mov	r3, r2
 8005afc:	71fb      	strb	r3, [r7, #7]
	println((char*) "\r\nLSM6DSR Init");
 8005afe:	4846      	ldr	r0, [pc, #280]	; (8005c18 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x128>)
 8005b00:	f7fb fae4 	bl	80010cc <println>

	/* Initialize mems driver interface */
	ctx.write_reg = write;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	4a45      	ldr	r2, [pc, #276]	; (8005c1c <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x12c>)
 8005b08:	61da      	str	r2, [r3, #28]
	ctx.read_reg = read;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	4a44      	ldr	r2, [pc, #272]	; (8005c20 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x130>)
 8005b0e:	621a      	str	r2, [r3, #32]
	ctx.handle = i2c_bus;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	68ba      	ldr	r2, [r7, #8]
 8005b14:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait sensor boot time */
	HAL_Delay(LSM6DSR_BOOT_TIME);
 8005b16:	2064      	movs	r0, #100	; 0x64
 8005b18:	f006 fcf6 	bl	800c508 <HAL_Delay>
	/* Check device ID */
	lsm6dsr_device_id_get(&ctx, &whoamI);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f103 021c 	add.w	r2, r3, #28
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	3338      	adds	r3, #56	; 0x38
 8005b26:	4619      	mov	r1, r3
 8005b28:	4610      	mov	r0, r2
 8005b2a:	f001 fae5 	bl	80070f8 <lsm6dsr_device_id_get>

	print((char*) "\tChecking Sensor ID...");
 8005b2e:	483d      	ldr	r0, [pc, #244]	; (8005c24 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x134>)
 8005b30:	f7fb faea 	bl	8001108 <print>
	if (whoamI != address){
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005b3a:	79fa      	ldrb	r2, [r7, #7]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d014      	beq.n	8005b6a <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x7a>
	  println((char*) "NOT OK");
 8005b40:	4839      	ldr	r0, [pc, #228]	; (8005c28 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x138>)
 8005b42:	f7fb fac3 	bl	80010cc <println>
	  print((char*) "\tThis Device is: ");
 8005b46:	4839      	ldr	r0, [pc, #228]	; (8005c2c <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x13c>)
 8005b48:	f7fb fade 	bl	8001108 <print>

	  char buffer[10];
	  sprintf(buffer, "%X\r\n", whoamI);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005b52:	461a      	mov	r2, r3
 8005b54:	f107 0314 	add.w	r3, r7, #20
 8005b58:	4935      	ldr	r1, [pc, #212]	; (8005c30 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x140>)
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f016 fa88 	bl	801c070 <siprintf>
	  print(buffer);
 8005b60:	f107 0314 	add.w	r3, r7, #20
 8005b64:	4618      	mov	r0, r3
 8005b66:	f7fb facf 	bl	8001108 <print>
		HAL_PWR_EnterSTANDBYMode();
		*/


	}
	println((char*) "OK");
 8005b6a:	4832      	ldr	r0, [pc, #200]	; (8005c34 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x144>)
 8005b6c:	f7fb faae 	bl	80010cc <println>

	/* Restore default configuration */
	print((char*) "\tRestore default configuration...");
 8005b70:	4831      	ldr	r0, [pc, #196]	; (8005c38 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x148>)
 8005b72:	f7fb fac9 	bl	8001108 <print>
	lsm6dsr_reset_set(&ctx, PROPERTY_ENABLE);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	331c      	adds	r3, #28
 8005b7a:	2101      	movs	r1, #1
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f001 facc 	bl	800711a <lsm6dsr_reset_set>
	HAL_Delay(500);
 8005b82:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005b86:	f006 fcbf 	bl	800c508 <HAL_Delay>
	do {
	lsm6dsr_reset_get(&ctx, &rst);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f103 021c 	add.w	r2, r3, #28
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	3339      	adds	r3, #57	; 0x39
 8005b94:	4619      	mov	r1, r3
 8005b96:	4610      	mov	r0, r2
 8005b98:	f001 fae5 	bl	8007166 <lsm6dsr_reset_get>
	} while (rst);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d000      	beq.n	8005ba8 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0xb8>
	do {
 8005ba6:	e7f0      	b.n	8005b8a <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x9a>
	println((char*) "OK");
 8005ba8:	4822      	ldr	r0, [pc, #136]	; (8005c34 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x144>)
 8005baa:	f7fb fa8f 	bl	80010cc <println>

	/* Disable I3C interface */
    lsm6dsr_i3c_disable_set(&ctx, LSM6DSR_I3C_DISABLE);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	331c      	adds	r3, #28
 8005bb2:	2180      	movs	r1, #128	; 0x80
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f001 fb4d 	bl	8007254 <lsm6dsr_i3c_disable_set>

	/* Enable Block Data Update */
	lsm6dsr_block_data_update_set(&ctx, PROPERTY_ENABLE);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	331c      	adds	r3, #28
 8005bbe:	2101      	movs	r1, #1
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f001 f949 	bl	8006e58 <lsm6dsr_block_data_update_set>
	/* Set Output Data Rate */
	lsm6dsr_xl_data_rate_set(&ctx, LSM6DSR_XL_ODR_12Hz5);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	331c      	adds	r3, #28
 8005bca:	2101      	movs	r1, #1
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f000 ff25 	bl	8006a1c <lsm6dsr_xl_data_rate_set>
	lsm6dsr_gy_data_rate_set(&ctx, LSM6DSR_GY_ODR_12Hz5);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	331c      	adds	r3, #28
 8005bd6:	2101      	movs	r1, #1
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f001 f841 	bl	8006c60 <lsm6dsr_gy_data_rate_set>
	/* Set full scale */
	lsm6dsr_xl_full_scale_set(&ctx, LSM6DSR_2g);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	331c      	adds	r3, #28
 8005be2:	2100      	movs	r1, #0
 8005be4:	4618      	mov	r0, r3
 8005be6:	f000 fef3 	bl	80069d0 <lsm6dsr_xl_full_scale_set>
	lsm6dsr_gy_full_scale_set(&ctx, LSM6DSR_2000dps);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	331c      	adds	r3, #28
 8005bee:	210c      	movs	r1, #12
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f001 f80f 	bl	8006c14 <lsm6dsr_gy_full_scale_set>
	/* Configure filtering chain(No aux interface)
	* Accelerometer - LPF1 + LPF2 path
	*/
	lsm6dsr_xl_hp_path_on_out_set(&ctx, LSM6DSR_LP_ODR_DIV_100);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	331c      	adds	r3, #28
 8005bfa:	2104      	movs	r1, #4
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f001 faf1 	bl	80071e4 <lsm6dsr_xl_hp_path_on_out_set>
	lsm6dsr_xl_filter_lp2_set(&ctx, PROPERTY_ENABLE);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	331c      	adds	r3, #28
 8005c06:	2101      	movs	r1, #1
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f001 fac5 	bl	8007198 <lsm6dsr_xl_filter_lp2_set>
}
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	4618      	mov	r0, r3
 8005c12:	3720      	adds	r7, #32
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	08021750 	.word	0x08021750
 8005c1c:	08005dcb 	.word	0x08005dcb
 8005c20:	08005e05 	.word	0x08005e05
 8005c24:	08021760 	.word	0x08021760
 8005c28:	08021778 	.word	0x08021778
 8005c2c:	08021780 	.word	0x08021780
 8005c30:	08021794 	.word	0x08021794
 8005c34:	0802179c 	.word	0x0802179c
 8005c38:	080217a0 	.word	0x080217a0

08005c3c <_ZN7LSM6DSR15getAccelerationEv>:


float* LSM6DSR::getAcceleration(void){
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
	lsm6dsr_xl_flag_data_ready_get(&ctx, &reg);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f103 021c 	add.w	r2, r3, #28
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	3328      	adds	r3, #40	; 0x28
 8005c4e:	4619      	mov	r1, r3
 8005c50:	4610      	mov	r0, r2
 8005c52:	f001 f927 	bl	8006ea4 <lsm6dsr_xl_flag_data_ready_get>

	if (reg){
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d030      	beq.n	8005cc2 <_ZN7LSM6DSR15getAccelerationEv+0x86>
		// Read magnetic field data
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	332a      	adds	r3, #42	; 0x2a
 8005c64:	2206      	movs	r2, #6
 8005c66:	2100      	movs	r1, #0
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f014 ff05 	bl	801aa78 <memset>
		lsm6dsr_acceleration_raw_get(&ctx, data_raw_acceleration);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f103 021c 	add.w	r2, r3, #28
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	332a      	adds	r3, #42	; 0x2a
 8005c78:	4619      	mov	r1, r3
 8005c7a:	4610      	mov	r0, r2
 8005c7c:	f001 f9cb 	bl	8007016 <lsm6dsr_acceleration_raw_get>
		acceleration_mg[0] = lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[0]);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8005c86:	4618      	mov	r0, r3
 8005c88:	f000 fe56 	bl	8006938 <lsm6dsr_from_fs2g_to_mg>
 8005c8c:	eef0 7a40 	vmov.f32	s15, s0
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	edc3 7a00 	vstr	s15, [r3]
		acceleration_mg[1] = lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[1]);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f000 fe4b 	bl	8006938 <lsm6dsr_from_fs2g_to_mg>
 8005ca2:	eef0 7a40 	vmov.f32	s15, s0
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	edc3 7a01 	vstr	s15, [r3, #4]
		acceleration_mg[2] = lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[2]);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f000 fe40 	bl	8006938 <lsm6dsr_from_fs2g_to_mg>
 8005cb8:	eef0 7a40 	vmov.f32	s15, s0
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	edc3 7a02 	vstr	s15, [r3, #8]
	}
	return acceleration_mg;
 8005cc2:	687b      	ldr	r3, [r7, #4]
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3708      	adds	r7, #8
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <_ZN7LSM6DSR14getTemperatureEv>:


float LSM6DSR::getTemperature(void){
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
    lsm6dsr_temp_flag_data_ready_get(&ctx, &reg);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f103 021c 	add.w	r2, r3, #28
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	3328      	adds	r3, #40	; 0x28
 8005cde:	4619      	mov	r1, r3
 8005ce0:	4610      	mov	r0, r2
 8005ce2:	f001 f911 	bl	8006f08 <lsm6dsr_temp_flag_data_ready_get>

    if (reg){
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d01a      	beq.n	8005d26 <_ZN7LSM6DSR14getTemperatureEv+0x5a>
		// Read temperature data
		memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	3336      	adds	r3, #54	; 0x36
 8005cf4:	2202      	movs	r2, #2
 8005cf6:	2100      	movs	r1, #0
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f014 febd 	bl	801aa78 <memset>
		lsm6dsr_temperature_raw_get(&ctx, &data_raw_temperature);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f103 021c 	add.w	r2, r3, #28
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	3336      	adds	r3, #54	; 0x36
 8005d08:	4619      	mov	r1, r3
 8005d0a:	4610      	mov	r0, r2
 8005d0c:	f001 f915 	bl	8006f3a <lsm6dsr_temperature_raw_get>
		temperature_degC = lsm6dsr_from_lsb_to_celsius(data_raw_temperature);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8005d16:	4618      	mov	r0, r3
 8005d18:	f000 fe3e 	bl	8006998 <lsm6dsr_from_lsb_to_celsius>
 8005d1c:	eef0 7a40 	vmov.f32	s15, s0
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	edc3 7a06 	vstr	s15, [r3, #24]
	}
    return temperature_degC;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	699b      	ldr	r3, [r3, #24]
 8005d2a:	ee07 3a90 	vmov	s15, r3
}
 8005d2e:	eeb0 0a67 	vmov.f32	s0, s15
 8005d32:	3708      	adds	r7, #8
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <_ZN7LSM6DSR14getAngularRateEv>:


float* LSM6DSR::getAngularRate(void){
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
    lsm6dsr_gy_flag_data_ready_get(&ctx, &reg);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f103 021c 	add.w	r2, r3, #28
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	3328      	adds	r3, #40	; 0x28
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	4610      	mov	r0, r2
 8005d4e:	f001 f8c2 	bl	8006ed6 <lsm6dsr_gy_flag_data_ready_get>

    if (reg){
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d030      	beq.n	8005dbe <_ZN7LSM6DSR14getAngularRateEv+0x86>
		// Read magnetic field data
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	3330      	adds	r3, #48	; 0x30
 8005d60:	2206      	movs	r2, #6
 8005d62:	2100      	movs	r1, #0
 8005d64:	4618      	mov	r0, r3
 8005d66:	f014 fe87 	bl	801aa78 <memset>
		lsm6dsr_angular_rate_raw_get(&ctx, data_raw_angular_rate);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f103 021c 	add.w	r2, r3, #28
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	3330      	adds	r3, #48	; 0x30
 8005d74:	4619      	mov	r1, r3
 8005d76:	4610      	mov	r0, r2
 8005d78:	f001 f902 	bl	8006f80 <lsm6dsr_angular_rate_raw_get>
		angular_rate_mdps[0] = lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005d82:	4618      	mov	r0, r3
 8005d84:	f000 fdf0 	bl	8006968 <lsm6dsr_from_fs2000dps_to_mdps>
 8005d88:	eef0 7a40 	vmov.f32	s15, s0
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	edc3 7a03 	vstr	s15, [r3, #12]
		angular_rate_mdps[1] = lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f000 fde5 	bl	8006968 <lsm6dsr_from_fs2000dps_to_mdps>
 8005d9e:	eef0 7a40 	vmov.f32	s15, s0
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	edc3 7a04 	vstr	s15, [r3, #16]
		angular_rate_mdps[2] = lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8005dae:	4618      	mov	r0, r3
 8005db0:	f000 fdda 	bl	8006968 <lsm6dsr_from_fs2000dps_to_mdps>
 8005db4:	eef0 7a40 	vmov.f32	s15, s0
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	edc3 7a05 	vstr	s15, [r3, #20]
		fs500dps_to_mdps
		fs1000dps_to_mdps
		fs2000dps_to_mdps
		*/
	}
    return angular_rate_mdps;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	330c      	adds	r3, #12
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3708      	adds	r7, #8
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <_ZN7LSM6DSR5writeEPvhPKht>:


int32_t LSM6DSR::write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b088      	sub	sp, #32
 8005dce:	af04      	add	r7, sp, #16
 8005dd0:	60f8      	str	r0, [r7, #12]
 8005dd2:	607a      	str	r2, [r7, #4]
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	72fb      	strb	r3, [r7, #11]
 8005dda:	4613      	mov	r3, r2
 8005ddc:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write((I2C_HandleTypeDef*) handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8005dde:	7afb      	ldrb	r3, [r7, #11]
 8005de0:	b29a      	uxth	r2, r3
 8005de2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005de6:	9302      	str	r3, [sp, #8]
 8005de8:	893b      	ldrh	r3, [r7, #8]
 8005dea:	9301      	str	r3, [sp, #4]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	9300      	str	r3, [sp, #0]
 8005df0:	2301      	movs	r3, #1
 8005df2:	21d5      	movs	r1, #213	; 0xd5
 8005df4:	68f8      	ldr	r0, [r7, #12]
 8005df6:	f007 fc09 	bl	800d60c <HAL_I2C_Mem_Write>
  return 0;
 8005dfa:	2300      	movs	r3, #0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3710      	adds	r7, #16
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <_ZN7LSM6DSR4readEPvhPht>:

int32_t LSM6DSR::read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b088      	sub	sp, #32
 8005e08:	af04      	add	r7, sp, #16
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	607a      	str	r2, [r7, #4]
 8005e0e:	461a      	mov	r2, r3
 8005e10:	460b      	mov	r3, r1
 8005e12:	72fb      	strb	r3, [r7, #11]
 8005e14:	4613      	mov	r3, r2
 8005e16:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read((I2C_HandleTypeDef*) handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8005e18:	7afb      	ldrb	r3, [r7, #11]
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005e20:	9302      	str	r3, [sp, #8]
 8005e22:	893b      	ldrh	r3, [r7, #8]
 8005e24:	9301      	str	r3, [sp, #4]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	9300      	str	r3, [sp, #0]
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	21d5      	movs	r1, #213	; 0xd5
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f007 fce6 	bl	800d800 <HAL_I2C_Mem_Read>
  return 0;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3710      	adds	r7, #16
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
	...

08005e40 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh>:

//**************************************************//
/*****LPS22HH*****/


LPS22HH::LPS22HH(I2C_HandleTypeDef* i2c_bus, uint8_t address){
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b088      	sub	sp, #32
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	71fb      	strb	r3, [r7, #7]
	println((char*) "\r\nLPS22HH Init");
 8005e4e:	4834      	ldr	r0, [pc, #208]	; (8005f20 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xe0>)
 8005e50:	f7fb f93c 	bl	80010cc <println>

	/* Initialize mems driver interface */
	ctx.write_reg = write;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	4a33      	ldr	r2, [pc, #204]	; (8005f24 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xe4>)
 8005e58:	609a      	str	r2, [r3, #8]
	ctx.read_reg = read;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	4a32      	ldr	r2, [pc, #200]	; (8005f28 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xe8>)
 8005e5e:	60da      	str	r2, [r3, #12]
	ctx.handle = i2c_bus;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	68ba      	ldr	r2, [r7, #8]
 8005e64:	611a      	str	r2, [r3, #16]
	/* Wait sensor boot time */
	HAL_Delay(LPS22HH_BOOT_TIME);
 8005e66:	2064      	movs	r0, #100	; 0x64
 8005e68:	f006 fb4e 	bl	800c508 <HAL_Delay>
	/* Check device ID */
	whoamI = 0;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	779a      	strb	r2, [r3, #30]
	lps22hh_device_id_get(&ctx, &whoamI);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f103 0208 	add.w	r2, r3, #8
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	331e      	adds	r3, #30
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	4610      	mov	r0, r2
 8005e80:	f000 fcda 	bl	8006838 <lps22hh_device_id_get>


	print((char*) "\tChecking Sensor ID...");
 8005e84:	4829      	ldr	r0, [pc, #164]	; (8005f2c <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xec>)
 8005e86:	f7fb f93f 	bl	8001108 <print>
	if ( whoamI != address ){
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	7f9b      	ldrb	r3, [r3, #30]
 8005e8e:	79fa      	ldrb	r2, [r7, #7]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d013      	beq.n	8005ebc <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x7c>
	  println((char*) "NOT OK");
 8005e94:	4826      	ldr	r0, [pc, #152]	; (8005f30 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xf0>)
 8005e96:	f7fb f919 	bl	80010cc <println>
	  print((char*) "\tThis Device is: ");
 8005e9a:	4826      	ldr	r0, [pc, #152]	; (8005f34 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xf4>)
 8005e9c:	f7fb f934 	bl	8001108 <print>

	  char buffer[10];
	  sprintf(buffer, "%X\r\n", whoamI);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	7f9b      	ldrb	r3, [r3, #30]
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	f107 0314 	add.w	r3, r7, #20
 8005eaa:	4923      	ldr	r1, [pc, #140]	; (8005f38 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xf8>)
 8005eac:	4618      	mov	r0, r3
 8005eae:	f016 f8df 	bl	801c070 <siprintf>
	  print(buffer);
 8005eb2:	f107 0314 	add.w	r3, r7, #20
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7fb f926 	bl	8001108 <print>
		MRT_clear_alarms_flags();
		HAL_PWR_EnterSTANDBYMode();
		*/

	}
	println((char*) "OK");
 8005ebc:	481f      	ldr	r0, [pc, #124]	; (8005f3c <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xfc>)
 8005ebe:	f7fb f905 	bl	80010cc <println>

	/* Restore default configuration */
	print((char*) "\tRestore default configuration...");
 8005ec2:	481f      	ldr	r0, [pc, #124]	; (8005f40 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x100>)
 8005ec4:	f7fb f920 	bl	8001108 <print>
	lps22hh_reset_set(&ctx, PROPERTY_ENABLE);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	3308      	adds	r3, #8
 8005ecc:	2101      	movs	r1, #1
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f000 fcc3 	bl	800685a <lps22hh_reset_set>
	HAL_Delay(500);
 8005ed4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005ed8:	f006 fb16 	bl	800c508 <HAL_Delay>
	do {
	lps22hh_reset_get(&ctx, &rst);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f103 0208 	add.w	r2, r3, #8
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	331f      	adds	r3, #31
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	4610      	mov	r0, r2
 8005eea:	f000 fcdc 	bl	80068a6 <lps22hh_reset_get>
	} while (rst);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	7fdb      	ldrb	r3, [r3, #31]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d000      	beq.n	8005ef8 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xb8>
	do {
 8005ef6:	e7f1      	b.n	8005edc <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x9c>
	println((char*) "OK");
 8005ef8:	4810      	ldr	r0, [pc, #64]	; (8005f3c <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xfc>)
 8005efa:	f7fb f8e7 	bl	80010cc <println>

	/* Enable Block Data Update */
	lps22hh_block_data_update_set(&ctx, PROPERTY_ENABLE);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	3308      	adds	r3, #8
 8005f02:	2101      	movs	r1, #1
 8005f04:	4618      	mov	r0, r3
 8005f06:	f000 fba5 	bl	8006654 <lps22hh_block_data_update_set>

	/* Set Output Data Rate */
	lps22hh_data_rate_set(&ctx, LPS22HH_75_Hz_LOW_NOISE);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	3308      	adds	r3, #8
 8005f0e:	2115      	movs	r1, #21
 8005f10:	4618      	mov	r0, r3
 8005f12:	f000 fbc5 	bl	80066a0 <lps22hh_data_rate_set>
}
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3720      	adds	r7, #32
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	080217c4 	.word	0x080217c4
 8005f24:	08006017 	.word	0x08006017
 8005f28:	08006051 	.word	0x08006051
 8005f2c:	08021760 	.word	0x08021760
 8005f30:	08021778 	.word	0x08021778
 8005f34:	08021780 	.word	0x08021780
 8005f38:	08021794 	.word	0x08021794
 8005f3c:	0802179c 	.word	0x0802179c
 8005f40:	080217a0 	.word	0x080217a0

08005f44 <_ZN7LPS22HH11getPressureEv>:



float LPS22HH::getPressure(void){
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
	/* Read output only if new value is available */
	lps22hh_press_flag_data_ready_get(&ctx, &reg);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f103 0208 	add.w	r2, r3, #8
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	3314      	adds	r3, #20
 8005f56:	4619      	mov	r1, r3
 8005f58:	4610      	mov	r0, r2
 8005f5a:	f000 fbef 	bl	800673c <lps22hh_press_flag_data_ready_get>

	if (reg) {
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	7d1b      	ldrb	r3, [r3, #20]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d019      	beq.n	8005f9a <_ZN7LPS22HH11getPressureEv+0x56>
	  memset(&data_raw_pressure, 0x00, sizeof(uint32_t));
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	3318      	adds	r3, #24
 8005f6a:	2204      	movs	r2, #4
 8005f6c:	2100      	movs	r1, #0
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f014 fd82 	bl	801aa78 <memset>
	  lps22hh_pressure_raw_get(&ctx, &data_raw_pressure);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f103 0208 	add.w	r2, r3, #8
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	3318      	adds	r3, #24
 8005f7e:	4619      	mov	r1, r3
 8005f80:	4610      	mov	r0, r2
 8005f82:	f000 fc0d 	bl	80067a0 <lps22hh_pressure_raw_get>
	  pressure_hPa = lps22hh_from_lsb_to_hpa(data_raw_pressure);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	699b      	ldr	r3, [r3, #24]
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f000 fb30 	bl	80065f0 <lps22hh_from_lsb_to_hpa>
 8005f90:	eef0 7a40 	vmov.f32	s15, s0
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	edc3 7a00 	vstr	s15, [r3]
	}
	return pressure_hPa;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	ee07 3a90 	vmov	s15, r3
}
 8005fa2:	eeb0 0a67 	vmov.f32	s0, s15
 8005fa6:	3708      	adds	r7, #8
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <_ZN7LPS22HH14getTemperatureEv>:


float LPS22HH::getTemperature(void){
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
	/* Read output only if new value is available */
	lps22hh_temp_flag_data_ready_get(&ctx, &reg);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f103 0208 	add.w	r2, r3, #8
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	3314      	adds	r3, #20
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	4610      	mov	r0, r2
 8005fc2:	f000 fbd4 	bl	800676e <lps22hh_temp_flag_data_ready_get>

	if (reg) {
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	7d1b      	ldrb	r3, [r3, #20]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d01a      	beq.n	8006004 <_ZN7LPS22HH14getTemperatureEv+0x58>
	  memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	331c      	adds	r3, #28
 8005fd2:	2202      	movs	r2, #2
 8005fd4:	2100      	movs	r1, #0
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f014 fd4e 	bl	801aa78 <memset>
	  lps22hh_temperature_raw_get(&ctx, &data_raw_temperature);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f103 0208 	add.w	r2, r3, #8
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	331c      	adds	r3, #28
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	4610      	mov	r0, r2
 8005fea:	f000 fc02 	bl	80067f2 <lps22hh_temperature_raw_get>
	  temperature_degC = lps22hh_from_lsb_to_celsius(data_raw_temperature);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f000 fb13 	bl	8006620 <lps22hh_from_lsb_to_celsius>
 8005ffa:	eef0 7a40 	vmov.f32	s15, s0
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	edc3 7a01 	vstr	s15, [r3, #4]
	}
	return temperature_degC;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	ee07 3a90 	vmov	s15, r3
}
 800600c:	eeb0 0a67 	vmov.f32	s0, s15
 8006010:	3708      	adds	r7, #8
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}

08006016 <_ZN7LPS22HH5writeEPvhPKht>:



int32_t LPS22HH::write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 8006016:	b580      	push	{r7, lr}
 8006018:	b088      	sub	sp, #32
 800601a:	af04      	add	r7, sp, #16
 800601c:	60f8      	str	r0, [r7, #12]
 800601e:	607a      	str	r2, [r7, #4]
 8006020:	461a      	mov	r2, r3
 8006022:	460b      	mov	r3, r1
 8006024:	72fb      	strb	r3, [r7, #11]
 8006026:	4613      	mov	r3, r2
 8006028:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write((I2C_HandleTypeDef*) handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 800602a:	7afb      	ldrb	r3, [r7, #11]
 800602c:	b29a      	uxth	r2, r3
 800602e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006032:	9302      	str	r3, [sp, #8]
 8006034:	893b      	ldrh	r3, [r7, #8]
 8006036:	9301      	str	r3, [sp, #4]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	9300      	str	r3, [sp, #0]
 800603c:	2301      	movs	r3, #1
 800603e:	21b9      	movs	r1, #185	; 0xb9
 8006040:	68f8      	ldr	r0, [r7, #12]
 8006042:	f007 fae3 	bl	800d60c <HAL_I2C_Mem_Write>
  return 0;
 8006046:	2300      	movs	r3, #0
}
 8006048:	4618      	mov	r0, r3
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <_ZN7LPS22HH4readEPvhPht>:

int32_t LPS22HH::read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 8006050:	b580      	push	{r7, lr}
 8006052:	b088      	sub	sp, #32
 8006054:	af04      	add	r7, sp, #16
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	607a      	str	r2, [r7, #4]
 800605a:	461a      	mov	r2, r3
 800605c:	460b      	mov	r3, r1
 800605e:	72fb      	strb	r3, [r7, #11]
 8006060:	4613      	mov	r3, r2
 8006062:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read((I2C_HandleTypeDef*) handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8006064:	7afb      	ldrb	r3, [r7, #11]
 8006066:	b29a      	uxth	r2, r3
 8006068:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800606c:	9302      	str	r3, [sp, #8]
 800606e:	893b      	ldrh	r3, [r7, #8]
 8006070:	9301      	str	r3, [sp, #4]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	9300      	str	r3, [sp, #0]
 8006076:	2301      	movs	r3, #1
 8006078:	21b9      	movs	r1, #185	; 0xb9
 800607a:	68f8      	ldr	r0, [r7, #12]
 800607c:	f007 fbc0 	bl	800d800 <HAL_I2C_Mem_Read>
  return 0;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3710      	adds	r7, #16
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
	...

0800608c <GPS_Poll>:
#define LED3_GPIO_Port	((GPIO_TypeDef *) ((0x40000000UL + 0x00020000UL) + 0x0800UL))//OUT_LED3_GPIO_Port
#define LED3_Pin	(uint16_t)0x0008//OUT_LED3_Pin


void GPS_Poll(float *latitude, float *longitude, float *time)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b08c      	sub	sp, #48	; 0x30
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
	uint16_t max_loop_count = 100;
 8006098:	2364      	movs	r3, #100	; 0x64
 800609a:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t loop_count = 0;
 800609c:	2300      	movs	r3, #0
 800609e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int done = 0;
 80060a0:	2300      	movs	r3, #0
 80060a2:	62bb      	str	r3, [r7, #40]	; 0x28
	while(loop_count < max_loop_count && !done){
 80060a4:	e073      	b.n	800618e <GPS_Poll+0x102>
		HAL_UART_Receive(GPS.uart, (uint8_t*)&rx_current, 1, 100);
 80060a6:	4b3f      	ldr	r3, [pc, #252]	; (80061a4 <GPS_Poll+0x118>)
 80060a8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80060aa:	2364      	movs	r3, #100	; 0x64
 80060ac:	2201      	movs	r2, #1
 80060ae:	493e      	ldr	r1, [pc, #248]	; (80061a8 <GPS_Poll+0x11c>)
 80060b0:	f00b fe6b 	bl	8011d8a <HAL_UART_Receive>
		//HAL_UART_Transmit(&huart1, (uint8_t*)&rx_current, 1, 100);
		if (rx_current != '\n' && rx_index < sizeof(rx_buffer)) {
 80060b4:	4b3c      	ldr	r3, [pc, #240]	; (80061a8 <GPS_Poll+0x11c>)
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	2b0a      	cmp	r3, #10
 80060ba:	d00f      	beq.n	80060dc <GPS_Poll+0x50>
 80060bc:	4b3b      	ldr	r3, [pc, #236]	; (80061ac <GPS_Poll+0x120>)
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	2b63      	cmp	r3, #99	; 0x63
 80060c2:	d80b      	bhi.n	80060dc <GPS_Poll+0x50>
			rx_buffer[rx_index++] = rx_current;
 80060c4:	4b39      	ldr	r3, [pc, #228]	; (80061ac <GPS_Poll+0x120>)
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	1c5a      	adds	r2, r3, #1
 80060ca:	b2d1      	uxtb	r1, r2
 80060cc:	4a37      	ldr	r2, [pc, #220]	; (80061ac <GPS_Poll+0x120>)
 80060ce:	7011      	strb	r1, [r2, #0]
 80060d0:	461a      	mov	r2, r3
 80060d2:	4b35      	ldr	r3, [pc, #212]	; (80061a8 <GPS_Poll+0x11c>)
 80060d4:	7819      	ldrb	r1, [r3, #0]
 80060d6:	4b36      	ldr	r3, [pc, #216]	; (80061b0 <GPS_Poll+0x124>)
 80060d8:	5499      	strb	r1, [r3, r2]
 80060da:	e021      	b.n	8006120 <GPS_Poll+0x94>
		} else {
			if(GPS_validate((char*) rx_buffer)){
 80060dc:	4834      	ldr	r0, [pc, #208]	; (80061b0 <GPS_Poll+0x124>)
 80060de:	f000 f869 	bl	80061b4 <GPS_validate>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d013      	beq.n	8006110 <GPS_Poll+0x84>
				if(GPS_parse((char*) rx_buffer)){
 80060e8:	4831      	ldr	r0, [pc, #196]	; (80061b0 <GPS_Poll+0x124>)
 80060ea:	f000 f8c5 	bl	8006278 <GPS_parse>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00d      	beq.n	8006110 <GPS_Poll+0x84>
					*latitude = GPS.dec_latitude;
 80060f4:	4b2b      	ldr	r3, [pc, #172]	; (80061a4 <GPS_Poll+0x118>)
 80060f6:	685a      	ldr	r2, [r3, #4]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	601a      	str	r2, [r3, #0]
					*longitude = GPS.dec_longitude;
 80060fc:	4b29      	ldr	r3, [pc, #164]	; (80061a4 <GPS_Poll+0x118>)
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	601a      	str	r2, [r3, #0]
					*time = GPS.utc_time;
 8006104:	4b27      	ldr	r3, [pc, #156]	; (80061a4 <GPS_Poll+0x118>)
 8006106:	695a      	ldr	r2, [r3, #20]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	601a      	str	r2, [r3, #0]
					done = 1;
 800610c:	2301      	movs	r3, #1
 800610e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
			}
			rx_index = 0;
 8006110:	4b26      	ldr	r3, [pc, #152]	; (80061ac <GPS_Poll+0x120>)
 8006112:	2200      	movs	r2, #0
 8006114:	701a      	strb	r2, [r3, #0]
			memset(rx_buffer, 0, sizeof(rx_buffer));
 8006116:	2264      	movs	r2, #100	; 0x64
 8006118:	2100      	movs	r1, #0
 800611a:	4825      	ldr	r0, [pc, #148]	; (80061b0 <GPS_Poll+0x124>)
 800611c:	f014 fcac 	bl	801aa78 <memset>
		}

		// f437 usart doesnt have these flags in hardware, use software to clear the flags
		// (check docstring for __HAL_UART_CLEAR_FLAG function)
		__HAL_UART_CLEAR_OREFLAG(GPS.uart);
 8006120:	2300      	movs	r3, #0
 8006122:	623b      	str	r3, [r7, #32]
 8006124:	4b1f      	ldr	r3, [pc, #124]	; (80061a4 <GPS_Poll+0x118>)
 8006126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	623b      	str	r3, [r7, #32]
 800612e:	4b1d      	ldr	r3, [pc, #116]	; (80061a4 <GPS_Poll+0x118>)
 8006130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	623b      	str	r3, [r7, #32]
 8006138:	6a3b      	ldr	r3, [r7, #32]
		__HAL_UART_CLEAR_NEFLAG(GPS.uart);
 800613a:	2300      	movs	r3, #0
 800613c:	61fb      	str	r3, [r7, #28]
 800613e:	4b19      	ldr	r3, [pc, #100]	; (80061a4 <GPS_Poll+0x118>)
 8006140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	61fb      	str	r3, [r7, #28]
 8006148:	4b16      	ldr	r3, [pc, #88]	; (80061a4 <GPS_Poll+0x118>)
 800614a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	61fb      	str	r3, [r7, #28]
 8006152:	69fb      	ldr	r3, [r7, #28]
		__HAL_UART_CLEAR_PEFLAG(GPS.uart);
 8006154:	2300      	movs	r3, #0
 8006156:	61bb      	str	r3, [r7, #24]
 8006158:	4b12      	ldr	r3, [pc, #72]	; (80061a4 <GPS_Poll+0x118>)
 800615a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	61bb      	str	r3, [r7, #24]
 8006162:	4b10      	ldr	r3, [pc, #64]	; (80061a4 <GPS_Poll+0x118>)
 8006164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	61bb      	str	r3, [r7, #24]
 800616c:	69bb      	ldr	r3, [r7, #24]
		__HAL_UART_CLEAR_FEFLAG(GPS.uart);
 800616e:	2300      	movs	r3, #0
 8006170:	617b      	str	r3, [r7, #20]
 8006172:	4b0c      	ldr	r3, [pc, #48]	; (80061a4 <GPS_Poll+0x118>)
 8006174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	617b      	str	r3, [r7, #20]
 800617c:	4b09      	ldr	r3, [pc, #36]	; (80061a4 <GPS_Poll+0x118>)
 800617e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	617b      	str	r3, [r7, #20]
 8006186:	697b      	ldr	r3, [r7, #20]

		loop_count++;
 8006188:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800618a:	3301      	adds	r3, #1
 800618c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(loop_count < max_loop_count && !done){
 800618e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006190:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006192:	429a      	cmp	r2, r3
 8006194:	d202      	bcs.n	800619c <GPS_Poll+0x110>
 8006196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006198:	2b00      	cmp	r3, #0
 800619a:	d084      	beq.n	80060a6 <GPS_Poll+0x1a>
	}
}
 800619c:	bf00      	nop
 800619e:	3730      	adds	r7, #48	; 0x30
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	2000977c 	.word	0x2000977c
 80061a8:	2000057c 	.word	0x2000057c
 80061ac:	2000057d 	.word	0x2000057d
 80061b0:	200097e0 	.word	0x200097e0

080061b4 <GPS_validate>:

int GPS_validate(char *nmeastr){
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b086      	sub	sp, #24
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 80061bc:	2300      	movs	r3, #0
 80061be:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 80061c0:	2300      	movs	r3, #0
 80061c2:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	4413      	add	r3, r2
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	2b24      	cmp	r3, #36	; 0x24
 80061ce:	d103      	bne.n	80061d8 <GPS_validate+0x24>
        i++;
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	3301      	adds	r3, #1
 80061d4:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80061d6:	e00c      	b.n	80061f2 <GPS_validate+0x3e>
        return 0;
 80061d8:	2300      	movs	r3, #0
 80061da:	e047      	b.n	800626c <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	4413      	add	r3, r2
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	461a      	mov	r2, r3
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	4053      	eors	r3, r2
 80061ea:	613b      	str	r3, [r7, #16]
        i++;
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	3301      	adds	r3, #1
 80061f0:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	4413      	add	r3, r2
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d008      	beq.n	8006210 <GPS_validate+0x5c>
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	4413      	add	r3, r2
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	2b2a      	cmp	r3, #42	; 0x2a
 8006208:	d002      	beq.n	8006210 <GPS_validate+0x5c>
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	2b4a      	cmp	r3, #74	; 0x4a
 800620e:	dde5      	ble.n	80061dc <GPS_validate+0x28>
    }

    if(i >= 75){
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	2b4a      	cmp	r3, #74	; 0x4a
 8006214:	dd01      	ble.n	800621a <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 8006216:	2300      	movs	r3, #0
 8006218:	e028      	b.n	800626c <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	4413      	add	r3, r2
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	2b2a      	cmp	r3, #42	; 0x2a
 8006224:	d119      	bne.n	800625a <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	3301      	adds	r3, #1
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	4413      	add	r3, r2
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	3302      	adds	r3, #2
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	4413      	add	r3, r2
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 800623e:	2300      	movs	r3, #0
 8006240:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 8006242:	f107 0308 	add.w	r3, r7, #8
 8006246:	693a      	ldr	r2, [r7, #16]
 8006248:	490a      	ldr	r1, [pc, #40]	; (8006274 <GPS_validate+0xc0>)
 800624a:	4618      	mov	r0, r3
 800624c:	f015 ff10 	bl	801c070 <siprintf>
    return((checkcalcstr[0] == check[0])
 8006250:	7a3a      	ldrb	r2, [r7, #8]
 8006252:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8006254:	429a      	cmp	r2, r3
 8006256:	d108      	bne.n	800626a <GPS_validate+0xb6>
 8006258:	e001      	b.n	800625e <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 800625a:	2300      	movs	r3, #0
 800625c:	e006      	b.n	800626c <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 800625e:	7a7a      	ldrb	r2, [r7, #9]
 8006260:	7b7b      	ldrb	r3, [r7, #13]
 8006262:	429a      	cmp	r2, r3
 8006264:	d101      	bne.n	800626a <GPS_validate+0xb6>
 8006266:	2301      	movs	r3, #1
 8006268:	e000      	b.n	800626c <GPS_validate+0xb8>
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3718      	adds	r7, #24
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	080217d4 	.word	0x080217d4

08006278 <GPS_parse>:

int GPS_parse(char *GPSstrParse){
 8006278:	b580      	push	{r7, lr}
 800627a:	b08a      	sub	sp, #40	; 0x28
 800627c:	af08      	add	r7, sp, #32
 800627e:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GNGGA", 6)){
 8006280:	2206      	movs	r2, #6
 8006282:	496d      	ldr	r1, [pc, #436]	; (8006438 <GPS_parse+0x1c0>)
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f015 ff99 	bl	801c1bc <strncmp>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d139      	bne.n	8006304 <GPS_parse+0x8c>
    	if (sscanf(GPSstrParse, "$GNGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 8006290:	4b6a      	ldr	r3, [pc, #424]	; (800643c <GPS_parse+0x1c4>)
 8006292:	9307      	str	r3, [sp, #28]
 8006294:	4b6a      	ldr	r3, [pc, #424]	; (8006440 <GPS_parse+0x1c8>)
 8006296:	9306      	str	r3, [sp, #24]
 8006298:	4b6a      	ldr	r3, [pc, #424]	; (8006444 <GPS_parse+0x1cc>)
 800629a:	9305      	str	r3, [sp, #20]
 800629c:	4b6a      	ldr	r3, [pc, #424]	; (8006448 <GPS_parse+0x1d0>)
 800629e:	9304      	str	r3, [sp, #16]
 80062a0:	4b6a      	ldr	r3, [pc, #424]	; (800644c <GPS_parse+0x1d4>)
 80062a2:	9303      	str	r3, [sp, #12]
 80062a4:	4b6a      	ldr	r3, [pc, #424]	; (8006450 <GPS_parse+0x1d8>)
 80062a6:	9302      	str	r3, [sp, #8]
 80062a8:	4b6a      	ldr	r3, [pc, #424]	; (8006454 <GPS_parse+0x1dc>)
 80062aa:	9301      	str	r3, [sp, #4]
 80062ac:	4b6a      	ldr	r3, [pc, #424]	; (8006458 <GPS_parse+0x1e0>)
 80062ae:	9300      	str	r3, [sp, #0]
 80062b0:	4b6a      	ldr	r3, [pc, #424]	; (800645c <GPS_parse+0x1e4>)
 80062b2:	4a6b      	ldr	r2, [pc, #428]	; (8006460 <GPS_parse+0x1e8>)
 80062b4:	496b      	ldr	r1, [pc, #428]	; (8006464 <GPS_parse+0x1ec>)
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f015 fefa 	bl	801c0b0 <siscanf>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f340 80b5 	ble.w	800642e <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80062c4:	4b68      	ldr	r3, [pc, #416]	; (8006468 <GPS_parse+0x1f0>)
 80062c6:	edd3 7a04 	vldr	s15, [r3, #16]
 80062ca:	4b67      	ldr	r3, [pc, #412]	; (8006468 <GPS_parse+0x1f0>)
 80062cc:	7e1b      	ldrb	r3, [r3, #24]
 80062ce:	4618      	mov	r0, r3
 80062d0:	eeb0 0a67 	vmov.f32	s0, s15
 80062d4:	f000 f8ec 	bl	80064b0 <GPS_nmea_to_dec>
 80062d8:	eef0 7a40 	vmov.f32	s15, s0
 80062dc:	4b62      	ldr	r3, [pc, #392]	; (8006468 <GPS_parse+0x1f0>)
 80062de:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80062e2:	4b61      	ldr	r3, [pc, #388]	; (8006468 <GPS_parse+0x1f0>)
 80062e4:	edd3 7a03 	vldr	s15, [r3, #12]
 80062e8:	4b5f      	ldr	r3, [pc, #380]	; (8006468 <GPS_parse+0x1f0>)
 80062ea:	7e5b      	ldrb	r3, [r3, #25]
 80062ec:	4618      	mov	r0, r3
 80062ee:	eeb0 0a67 	vmov.f32	s0, s15
 80062f2:	f000 f8dd 	bl	80064b0 <GPS_nmea_to_dec>
 80062f6:	eef0 7a40 	vmov.f32	s15, s0
 80062fa:	4b5b      	ldr	r3, [pc, #364]	; (8006468 <GPS_parse+0x1f0>)
 80062fc:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 8006300:	2301      	movs	r3, #1
 8006302:	e095      	b.n	8006430 <GPS_parse+0x1b8>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GNRMC", 6)){
 8006304:	2206      	movs	r2, #6
 8006306:	4959      	ldr	r1, [pc, #356]	; (800646c <GPS_parse+0x1f4>)
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f015 ff57 	bl	801c1bc <strncmp>
 800630e:	4603      	mov	r3, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d134      	bne.n	800637e <GPS_parse+0x106>
    	if(sscanf(GPSstrParse, "$GNRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1){
 8006314:	4b56      	ldr	r3, [pc, #344]	; (8006470 <GPS_parse+0x1f8>)
 8006316:	9305      	str	r3, [sp, #20]
 8006318:	4b56      	ldr	r3, [pc, #344]	; (8006474 <GPS_parse+0x1fc>)
 800631a:	9304      	str	r3, [sp, #16]
 800631c:	4b56      	ldr	r3, [pc, #344]	; (8006478 <GPS_parse+0x200>)
 800631e:	9303      	str	r3, [sp, #12]
 8006320:	4b4b      	ldr	r3, [pc, #300]	; (8006450 <GPS_parse+0x1d8>)
 8006322:	9302      	str	r3, [sp, #8]
 8006324:	4b4b      	ldr	r3, [pc, #300]	; (8006454 <GPS_parse+0x1dc>)
 8006326:	9301      	str	r3, [sp, #4]
 8006328:	4b4b      	ldr	r3, [pc, #300]	; (8006458 <GPS_parse+0x1e0>)
 800632a:	9300      	str	r3, [sp, #0]
 800632c:	4b4b      	ldr	r3, [pc, #300]	; (800645c <GPS_parse+0x1e4>)
 800632e:	4a4c      	ldr	r2, [pc, #304]	; (8006460 <GPS_parse+0x1e8>)
 8006330:	4952      	ldr	r1, [pc, #328]	; (800647c <GPS_parse+0x204>)
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f015 febc 	bl	801c0b0 <siscanf>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	dd77      	ble.n	800642e <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 800633e:	4b4a      	ldr	r3, [pc, #296]	; (8006468 <GPS_parse+0x1f0>)
 8006340:	edd3 7a04 	vldr	s15, [r3, #16]
 8006344:	4b48      	ldr	r3, [pc, #288]	; (8006468 <GPS_parse+0x1f0>)
 8006346:	7e1b      	ldrb	r3, [r3, #24]
 8006348:	4618      	mov	r0, r3
 800634a:	eeb0 0a67 	vmov.f32	s0, s15
 800634e:	f000 f8af 	bl	80064b0 <GPS_nmea_to_dec>
 8006352:	eef0 7a40 	vmov.f32	s15, s0
 8006356:	4b44      	ldr	r3, [pc, #272]	; (8006468 <GPS_parse+0x1f0>)
 8006358:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 800635c:	4b42      	ldr	r3, [pc, #264]	; (8006468 <GPS_parse+0x1f0>)
 800635e:	edd3 7a03 	vldr	s15, [r3, #12]
 8006362:	4b41      	ldr	r3, [pc, #260]	; (8006468 <GPS_parse+0x1f0>)
 8006364:	7e5b      	ldrb	r3, [r3, #25]
 8006366:	4618      	mov	r0, r3
 8006368:	eeb0 0a67 	vmov.f32	s0, s15
 800636c:	f000 f8a0 	bl	80064b0 <GPS_nmea_to_dec>
 8006370:	eef0 7a40 	vmov.f32	s15, s0
 8006374:	4b3c      	ldr	r3, [pc, #240]	; (8006468 <GPS_parse+0x1f0>)
 8006376:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 800637a:	2301      	movs	r3, #1
 800637c:	e058      	b.n	8006430 <GPS_parse+0x1b8>
    	}


    }
    else if (!strncmp(GPSstrParse, "$GNGLL", 6)){
 800637e:	2206      	movs	r2, #6
 8006380:	493f      	ldr	r1, [pc, #252]	; (8006480 <GPS_parse+0x208>)
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f015 ff1a 	bl	801c1bc <strncmp>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d130      	bne.n	80063f0 <GPS_parse+0x178>
        if(sscanf(GPSstrParse, "$GNGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1){
 800638e:	4b3d      	ldr	r3, [pc, #244]	; (8006484 <GPS_parse+0x20c>)
 8006390:	9303      	str	r3, [sp, #12]
 8006392:	4b33      	ldr	r3, [pc, #204]	; (8006460 <GPS_parse+0x1e8>)
 8006394:	9302      	str	r3, [sp, #8]
 8006396:	4b2e      	ldr	r3, [pc, #184]	; (8006450 <GPS_parse+0x1d8>)
 8006398:	9301      	str	r3, [sp, #4]
 800639a:	4b2e      	ldr	r3, [pc, #184]	; (8006454 <GPS_parse+0x1dc>)
 800639c:	9300      	str	r3, [sp, #0]
 800639e:	4b2e      	ldr	r3, [pc, #184]	; (8006458 <GPS_parse+0x1e0>)
 80063a0:	4a2e      	ldr	r2, [pc, #184]	; (800645c <GPS_parse+0x1e4>)
 80063a2:	4939      	ldr	r1, [pc, #228]	; (8006488 <GPS_parse+0x210>)
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f015 fe83 	bl	801c0b0 <siscanf>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	dd3e      	ble.n	800642e <GPS_parse+0x1b6>
        	GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80063b0:	4b2d      	ldr	r3, [pc, #180]	; (8006468 <GPS_parse+0x1f0>)
 80063b2:	edd3 7a04 	vldr	s15, [r3, #16]
 80063b6:	4b2c      	ldr	r3, [pc, #176]	; (8006468 <GPS_parse+0x1f0>)
 80063b8:	7e1b      	ldrb	r3, [r3, #24]
 80063ba:	4618      	mov	r0, r3
 80063bc:	eeb0 0a67 	vmov.f32	s0, s15
 80063c0:	f000 f876 	bl	80064b0 <GPS_nmea_to_dec>
 80063c4:	eef0 7a40 	vmov.f32	s15, s0
 80063c8:	4b27      	ldr	r3, [pc, #156]	; (8006468 <GPS_parse+0x1f0>)
 80063ca:	edc3 7a01 	vstr	s15, [r3, #4]
        	GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80063ce:	4b26      	ldr	r3, [pc, #152]	; (8006468 <GPS_parse+0x1f0>)
 80063d0:	edd3 7a03 	vldr	s15, [r3, #12]
 80063d4:	4b24      	ldr	r3, [pc, #144]	; (8006468 <GPS_parse+0x1f0>)
 80063d6:	7e5b      	ldrb	r3, [r3, #25]
 80063d8:	4618      	mov	r0, r3
 80063da:	eeb0 0a67 	vmov.f32	s0, s15
 80063de:	f000 f867 	bl	80064b0 <GPS_nmea_to_dec>
 80063e2:	eef0 7a40 	vmov.f32	s15, s0
 80063e6:	4b20      	ldr	r3, [pc, #128]	; (8006468 <GPS_parse+0x1f0>)
 80063e8:	edc3 7a00 	vstr	s15, [r3]
        	return 1;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e01f      	b.n	8006430 <GPS_parse+0x1b8>
        }

    }
    else if (!strncmp(GPSstrParse, "$GNVTG", 6)){
 80063f0:	2206      	movs	r2, #6
 80063f2:	4926      	ldr	r1, [pc, #152]	; (800648c <GPS_parse+0x214>)
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f015 fee1 	bl	801c1bc <strncmp>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d116      	bne.n	800642e <GPS_parse+0x1b6>
        if(sscanf(GPSstrParse, "$GNVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8006400:	4b23      	ldr	r3, [pc, #140]	; (8006490 <GPS_parse+0x218>)
 8006402:	9305      	str	r3, [sp, #20]
 8006404:	4b23      	ldr	r3, [pc, #140]	; (8006494 <GPS_parse+0x21c>)
 8006406:	9304      	str	r3, [sp, #16]
 8006408:	4b23      	ldr	r3, [pc, #140]	; (8006498 <GPS_parse+0x220>)
 800640a:	9303      	str	r3, [sp, #12]
 800640c:	4b1a      	ldr	r3, [pc, #104]	; (8006478 <GPS_parse+0x200>)
 800640e:	9302      	str	r3, [sp, #8]
 8006410:	4b22      	ldr	r3, [pc, #136]	; (800649c <GPS_parse+0x224>)
 8006412:	9301      	str	r3, [sp, #4]
 8006414:	4b22      	ldr	r3, [pc, #136]	; (80064a0 <GPS_parse+0x228>)
 8006416:	9300      	str	r3, [sp, #0]
 8006418:	4b22      	ldr	r3, [pc, #136]	; (80064a4 <GPS_parse+0x22c>)
 800641a:	4a23      	ldr	r2, [pc, #140]	; (80064a8 <GPS_parse+0x230>)
 800641c:	4923      	ldr	r1, [pc, #140]	; (80064ac <GPS_parse+0x234>)
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f015 fe46 	bl	801c0b0 <siscanf>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	dd01      	ble.n	800642e <GPS_parse+0x1b6>
            return 0;
 800642a:	2300      	movs	r3, #0
 800642c:	e000      	b.n	8006430 <GPS_parse+0x1b8>
    }
    return 0;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3708      	adds	r7, #8
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	080217dc 	.word	0x080217dc
 800643c:	200097a8 	.word	0x200097a8
 8006440:	200097a4 	.word	0x200097a4
 8006444:	200097a0 	.word	0x200097a0
 8006448:	2000979c 	.word	0x2000979c
 800644c:	20009798 	.word	0x20009798
 8006450:	20009795 	.word	0x20009795
 8006454:	20009788 	.word	0x20009788
 8006458:	20009794 	.word	0x20009794
 800645c:	2000978c 	.word	0x2000978c
 8006460:	20009790 	.word	0x20009790
 8006464:	080217e4 	.word	0x080217e4
 8006468:	2000977c 	.word	0x2000977c
 800646c:	0802180c 	.word	0x0802180c
 8006470:	200097b4 	.word	0x200097b4
 8006474:	200097b0 	.word	0x200097b0
 8006478:	200097ac 	.word	0x200097ac
 800647c:	08021814 	.word	0x08021814
 8006480:	08021834 	.word	0x08021834
 8006484:	200097b8 	.word	0x200097b8
 8006488:	0802183c 	.word	0x0802183c
 800648c:	08021858 	.word	0x08021858
 8006490:	200097d0 	.word	0x200097d0
 8006494:	200097cc 	.word	0x200097cc
 8006498:	200097c9 	.word	0x200097c9
 800649c:	200097c8 	.word	0x200097c8
 80064a0:	200097c4 	.word	0x200097c4
 80064a4:	200097c0 	.word	0x200097c0
 80064a8:	200097bc 	.word	0x200097bc
 80064ac:	08021860 	.word	0x08021860

080064b0 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 80064b0:	b480      	push	{r7}
 80064b2:	b087      	sub	sp, #28
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80064ba:	4603      	mov	r3, r0
 80064bc:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 80064be:	ed97 7a01 	vldr	s14, [r7, #4]
 80064c2:	eddf 6a20 	vldr	s13, [pc, #128]	; 8006544 <GPS_nmea_to_dec+0x94>
 80064c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80064ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064ce:	ee17 3a90 	vmov	r3, s15
 80064d2:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	2264      	movs	r2, #100	; 0x64
 80064d8:	fb02 f303 	mul.w	r3, r2, r3
 80064dc:	ee07 3a90 	vmov	s15, r3
 80064e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064e4:	ed97 7a01 	vldr	s14, [r7, #4]
 80064e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064ec:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 80064f0:	ed97 7a03 	vldr	s14, [r7, #12]
 80064f4:	eddf 6a14 	vldr	s13, [pc, #80]	; 8006548 <GPS_nmea_to_dec+0x98>
 80064f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80064fc:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	ee07 3a90 	vmov	s15, r3
 8006506:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800650a:	ed97 7a02 	vldr	s14, [r7, #8]
 800650e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006512:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 8006516:	78fb      	ldrb	r3, [r7, #3]
 8006518:	2b53      	cmp	r3, #83	; 0x53
 800651a:	d002      	beq.n	8006522 <GPS_nmea_to_dec+0x72>
 800651c:	78fb      	ldrb	r3, [r7, #3]
 800651e:	2b57      	cmp	r3, #87	; 0x57
 8006520:	d105      	bne.n	800652e <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 8006522:	edd7 7a05 	vldr	s15, [r7, #20]
 8006526:	eef1 7a67 	vneg.f32	s15, s15
 800652a:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	ee07 3a90 	vmov	s15, r3
}
 8006534:	eeb0 0a67 	vmov.f32	s0, s15
 8006538:	371c      	adds	r7, #28
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	42c80000 	.word	0x42c80000
 8006548:	42700000 	.word	0x42700000

0800654c <GPS_Init>:
	}
}


void GPS_Init(UART_HandleTypeDef* data_uart, void (*gps_print)(char*),
		void (*gps_tone_freq)(uint32_t duration, uint32_t repeats, uint32_t freq)){
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]
	GPS.print = gps_print;
 8006558:	4a0a      	ldr	r2, [pc, #40]	; (8006584 <GPS_Init+0x38>)
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	65d3      	str	r3, [r2, #92]	; 0x5c
	GPS.print((char*) "\r\nGPS Init...");
 800655e:	4b09      	ldr	r3, [pc, #36]	; (8006584 <GPS_Init+0x38>)
 8006560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006562:	4809      	ldr	r0, [pc, #36]	; (8006588 <GPS_Init+0x3c>)
 8006564:	4798      	blx	r3
	GPS.uart = data_uart;
 8006566:	4a07      	ldr	r2, [pc, #28]	; (8006584 <GPS_Init+0x38>)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6593      	str	r3, [r2, #88]	; 0x58
	GPS.tone_freq = gps_tone_freq;
 800656c:	4a05      	ldr	r2, [pc, #20]	; (8006584 <GPS_Init+0x38>)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6613      	str	r3, [r2, #96]	; 0x60
	GPS.print((char*) "OK\r\n");
 8006572:	4b04      	ldr	r3, [pc, #16]	; (8006584 <GPS_Init+0x38>)
 8006574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006576:	4805      	ldr	r0, [pc, #20]	; (800658c <GPS_Init+0x40>)
 8006578:	4798      	blx	r3
}
 800657a:	bf00      	nop
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	2000977c 	.word	0x2000977c
 8006588:	08021880 	.word	0x08021880
 800658c:	08021890 	.word	0x08021890

08006590 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8006590:	b590      	push	{r4, r7, lr}
 8006592:	b087      	sub	sp, #28
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	607a      	str	r2, [r7, #4]
 800659a:	461a      	mov	r2, r3
 800659c:	460b      	mov	r3, r1
 800659e:	72fb      	strb	r3, [r7, #11]
 80065a0:	4613      	mov	r3, r2
 80065a2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	685c      	ldr	r4, [r3, #4]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6898      	ldr	r0, [r3, #8]
 80065ac:	893b      	ldrh	r3, [r7, #8]
 80065ae:	7af9      	ldrb	r1, [r7, #11]
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	47a0      	blx	r4
 80065b4:	6178      	str	r0, [r7, #20]

  return ret;
 80065b6:	697b      	ldr	r3, [r7, #20]
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	371c      	adds	r7, #28
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd90      	pop	{r4, r7, pc}

080065c0 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80065c0:	b590      	push	{r4, r7, lr}
 80065c2:	b087      	sub	sp, #28
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	607a      	str	r2, [r7, #4]
 80065ca:	461a      	mov	r2, r3
 80065cc:	460b      	mov	r3, r1
 80065ce:	72fb      	strb	r3, [r7, #11]
 80065d0:	4613      	mov	r3, r2
 80065d2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681c      	ldr	r4, [r3, #0]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6898      	ldr	r0, [r3, #8]
 80065dc:	893b      	ldrh	r3, [r7, #8]
 80065de:	7af9      	ldrb	r1, [r7, #11]
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	47a0      	blx	r4
 80065e4:	6178      	str	r0, [r7, #20]

  return ret;
 80065e6:	697b      	ldr	r3, [r7, #20]
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	371c      	adds	r7, #28
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd90      	pop	{r4, r7, pc}

080065f0 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b083      	sub	sp, #12
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	ee07 3a90 	vmov	s15, r3
 80065fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006602:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800661c <lps22hh_from_lsb_to_hpa+0x2c>
 8006606:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800660a:	eef0 7a66 	vmov.f32	s15, s13
}
 800660e:	eeb0 0a67 	vmov.f32	s0, s15
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr
 800661c:	49800000 	.word	0x49800000

08006620 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	4603      	mov	r3, r0
 8006628:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 800662a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800662e:	ee07 3a90 	vmov	s15, r3
 8006632:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006636:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8006650 <lps22hh_from_lsb_to_celsius+0x30>
 800663a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800663e:	eef0 7a66 	vmov.f32	s15, s13
}
 8006642:	eeb0 0a67 	vmov.f32	s0, s15
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr
 8006650:	42c80000 	.word	0x42c80000

08006654 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	460b      	mov	r3, r1
 800665e:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8006660:	f107 0208 	add.w	r2, r7, #8
 8006664:	2301      	movs	r3, #1
 8006666:	2110      	movs	r1, #16
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f7ff ff91 	bl	8006590 <lps22hh_read_reg>
 800666e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d10f      	bne.n	8006696 <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8006676:	78fb      	ldrb	r3, [r7, #3]
 8006678:	f003 0301 	and.w	r3, r3, #1
 800667c:	b2da      	uxtb	r2, r3
 800667e:	7a3b      	ldrb	r3, [r7, #8]
 8006680:	f362 0341 	bfi	r3, r2, #1, #1
 8006684:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8006686:	f107 0208 	add.w	r2, r7, #8
 800668a:	2301      	movs	r3, #1
 800668c:	2110      	movs	r1, #16
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f7ff ff96 	bl	80065c0 <lps22hh_write_reg>
 8006694:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006696:	68fb      	ldr	r3, [r7, #12]
}
 8006698:	4618      	mov	r0, r3
 800669a:	3710      	adds	r7, #16
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b086      	sub	sp, #24
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	460b      	mov	r3, r1
 80066aa:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80066ac:	f107 0210 	add.w	r2, r7, #16
 80066b0:	2301      	movs	r3, #1
 80066b2:	2110      	movs	r1, #16
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f7ff ff6b 	bl	8006590 <lps22hh_read_reg>
 80066ba:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d107      	bne.n	80066d2 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80066c2:	f107 020c 	add.w	r2, r7, #12
 80066c6:	2301      	movs	r3, #1
 80066c8:	2111      	movs	r1, #17
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f7ff ff60 	bl	8006590 <lps22hh_read_reg>
 80066d0:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d10f      	bne.n	80066f8 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 80066d8:	78fb      	ldrb	r3, [r7, #3]
 80066da:	f003 0307 	and.w	r3, r3, #7
 80066de:	b2da      	uxtb	r2, r3
 80066e0:	7c3b      	ldrb	r3, [r7, #16]
 80066e2:	f362 1306 	bfi	r3, r2, #4, #3
 80066e6:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80066e8:	f107 0210 	add.w	r2, r7, #16
 80066ec:	2301      	movs	r3, #1
 80066ee:	2110      	movs	r1, #16
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f7ff ff65 	bl	80065c0 <lps22hh_write_reg>
 80066f6:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d119      	bne.n	8006732 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 80066fe:	78fb      	ldrb	r3, [r7, #3]
 8006700:	091b      	lsrs	r3, r3, #4
 8006702:	f003 0301 	and.w	r3, r3, #1
 8006706:	b2da      	uxtb	r2, r3
 8006708:	7b3b      	ldrb	r3, [r7, #12]
 800670a:	f362 0341 	bfi	r3, r2, #1, #1
 800670e:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8006710:	78fb      	ldrb	r3, [r7, #3]
 8006712:	08db      	lsrs	r3, r3, #3
 8006714:	f003 0301 	and.w	r3, r3, #1
 8006718:	b2da      	uxtb	r2, r3
 800671a:	7b3b      	ldrb	r3, [r7, #12]
 800671c:	f362 0300 	bfi	r3, r2, #0, #1
 8006720:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8006722:	f107 020c 	add.w	r2, r7, #12
 8006726:	2301      	movs	r3, #1
 8006728:	2111      	movs	r1, #17
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f7ff ff48 	bl	80065c0 <lps22hh_write_reg>
 8006730:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8006732:	697b      	ldr	r3, [r7, #20]
}
 8006734:	4618      	mov	r0, r3
 8006736:	3718      	adds	r7, #24
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <lps22hh_press_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_press_flag_data_ready_get(stmdev_ctx_t *ctx,
                                          uint8_t *val)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 8006746:	f107 0208 	add.w	r2, r7, #8
 800674a:	2301      	movs	r3, #1
 800674c:	2127      	movs	r1, #39	; 0x27
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f7ff ff1e 	bl	8006590 <lps22hh_read_reg>
 8006754:	60f8      	str	r0, [r7, #12]
  *val = reg.p_da;
 8006756:	7a3b      	ldrb	r3, [r7, #8]
 8006758:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800675c:	b2db      	uxtb	r3, r3
 800675e:	461a      	mov	r2, r3
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	701a      	strb	r2, [r3, #0]

  return ret;
 8006764:	68fb      	ldr	r3, [r7, #12]
}
 8006766:	4618      	mov	r0, r3
 8006768:	3710      	adds	r7, #16
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}

0800676e <lps22hh_temp_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 800676e:	b580      	push	{r7, lr}
 8006770:	b084      	sub	sp, #16
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
 8006776:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 8006778:	f107 0208 	add.w	r2, r7, #8
 800677c:	2301      	movs	r3, #1
 800677e:	2127      	movs	r1, #39	; 0x27
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f7ff ff05 	bl	8006590 <lps22hh_read_reg>
 8006786:	60f8      	str	r0, [r7, #12]
  *val = reg.t_da;
 8006788:	7a3b      	ldrb	r3, [r7, #8]
 800678a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800678e:	b2db      	uxtb	r3, r3
 8006790:	461a      	mov	r2, r3
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	701a      	strb	r2, [r3, #0]

  return ret;
 8006796:	68fb      	ldr	r3, [r7, #12]
}
 8006798:	4618      	mov	r0, r3
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 80067aa:	f107 0208 	add.w	r2, r7, #8
 80067ae:	2303      	movs	r3, #3
 80067b0:	2128      	movs	r1, #40	; 0x28
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f7ff feec 	bl	8006590 <lps22hh_read_reg>
 80067b8:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 80067ba:	7abb      	ldrb	r3, [r7, #10]
 80067bc:	461a      	mov	r2, r3
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	021b      	lsls	r3, r3, #8
 80067c8:	7a7a      	ldrb	r2, [r7, #9]
 80067ca:	441a      	add	r2, r3
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	021b      	lsls	r3, r3, #8
 80067d6:	7a3a      	ldrb	r2, [r7, #8]
 80067d8:	441a      	add	r2, r3
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	021a      	lsls	r2, r3, #8
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	601a      	str	r2, [r3, #0]

  return ret;
 80067e8:	68fb      	ldr	r3, [r7, #12]
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3710      	adds	r7, #16
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b084      	sub	sp, #16
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
 80067fa:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 80067fc:	f107 0208 	add.w	r2, r7, #8
 8006800:	2302      	movs	r3, #2
 8006802:	212b      	movs	r1, #43	; 0x2b
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f7ff fec3 	bl	8006590 <lps22hh_read_reg>
 800680a:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 800680c:	7a7b      	ldrb	r3, [r7, #9]
 800680e:	b21a      	sxth	r2, r3
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	f9b3 3000 	ldrsh.w	r3, [r3]
 800681a:	b29b      	uxth	r3, r3
 800681c:	021b      	lsls	r3, r3, #8
 800681e:	b29a      	uxth	r2, r3
 8006820:	7a3b      	ldrb	r3, [r7, #8]
 8006822:	b29b      	uxth	r3, r3
 8006824:	4413      	add	r3, r2
 8006826:	b29b      	uxth	r3, r3
 8006828:	b21a      	sxth	r2, r3
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	801a      	strh	r2, [r3, #0]

  return ret;
 800682e:	68fb      	ldr	r3, [r7, #12]
}
 8006830:	4618      	mov	r0, r3
 8006832:	3710      	adds	r7, #16
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8006842:	2301      	movs	r3, #1
 8006844:	683a      	ldr	r2, [r7, #0]
 8006846:	210f      	movs	r1, #15
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f7ff fea1 	bl	8006590 <lps22hh_read_reg>
 800684e:	60f8      	str	r0, [r7, #12]

  return ret;
 8006850:	68fb      	ldr	r3, [r7, #12]
}
 8006852:	4618      	mov	r0, r3
 8006854:	3710      	adds	r7, #16
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800685a:	b580      	push	{r7, lr}
 800685c:	b084      	sub	sp, #16
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
 8006862:	460b      	mov	r3, r1
 8006864:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8006866:	f107 0208 	add.w	r2, r7, #8
 800686a:	2301      	movs	r3, #1
 800686c:	2111      	movs	r1, #17
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f7ff fe8e 	bl	8006590 <lps22hh_read_reg>
 8006874:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d10f      	bne.n	800689c <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 800687c:	78fb      	ldrb	r3, [r7, #3]
 800687e:	f003 0301 	and.w	r3, r3, #1
 8006882:	b2da      	uxtb	r2, r3
 8006884:	7a3b      	ldrb	r3, [r7, #8]
 8006886:	f362 0382 	bfi	r3, r2, #2, #1
 800688a:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 800688c:	f107 0208 	add.w	r2, r7, #8
 8006890:	2301      	movs	r3, #1
 8006892:	2111      	movs	r1, #17
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f7ff fe93 	bl	80065c0 <lps22hh_write_reg>
 800689a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800689c:	68fb      	ldr	r3, [r7, #12]
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b084      	sub	sp, #16
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
 80068ae:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80068b0:	f107 0208 	add.w	r2, r7, #8
 80068b4:	2301      	movs	r3, #1
 80068b6:	2111      	movs	r1, #17
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f7ff fe69 	bl	8006590 <lps22hh_read_reg>
 80068be:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 80068c0:	7a3b      	ldrb	r3, [r7, #8]
 80068c2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	461a      	mov	r2, r3
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	701a      	strb	r2, [r3, #0]

  return ret;
 80068ce:	68fb      	ldr	r3, [r7, #12]
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3710      	adds	r7, #16
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <lsm6dsr_read_reg>:
  *
  */
int32_t lsm6dsr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80068d8:	b590      	push	{r4, r7, lr}
 80068da:	b087      	sub	sp, #28
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	607a      	str	r2, [r7, #4]
 80068e2:	461a      	mov	r2, r3
 80068e4:	460b      	mov	r3, r1
 80068e6:	72fb      	strb	r3, [r7, #11]
 80068e8:	4613      	mov	r3, r2
 80068ea:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	685c      	ldr	r4, [r3, #4]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6898      	ldr	r0, [r3, #8]
 80068f4:	893b      	ldrh	r3, [r7, #8]
 80068f6:	7af9      	ldrb	r1, [r7, #11]
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	47a0      	blx	r4
 80068fc:	6178      	str	r0, [r7, #20]

  return ret;
 80068fe:	697b      	ldr	r3, [r7, #20]
}
 8006900:	4618      	mov	r0, r3
 8006902:	371c      	adds	r7, #28
 8006904:	46bd      	mov	sp, r7
 8006906:	bd90      	pop	{r4, r7, pc}

08006908 <lsm6dsr_write_reg>:
  *
  */
int32_t lsm6dsr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8006908:	b590      	push	{r4, r7, lr}
 800690a:	b087      	sub	sp, #28
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	607a      	str	r2, [r7, #4]
 8006912:	461a      	mov	r2, r3
 8006914:	460b      	mov	r3, r1
 8006916:	72fb      	strb	r3, [r7, #11]
 8006918:	4613      	mov	r3, r2
 800691a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681c      	ldr	r4, [r3, #0]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6898      	ldr	r0, [r3, #8]
 8006924:	893b      	ldrh	r3, [r7, #8]
 8006926:	7af9      	ldrb	r1, [r7, #11]
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	47a0      	blx	r4
 800692c:	6178      	str	r0, [r7, #20]

  return ret;
 800692e:	697b      	ldr	r3, [r7, #20]
}
 8006930:	4618      	mov	r0, r3
 8006932:	371c      	adds	r7, #28
 8006934:	46bd      	mov	sp, r7
 8006936:	bd90      	pop	{r4, r7, pc}

08006938 <lsm6dsr_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsr_from_fs2g_to_mg(int16_t lsb)
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	4603      	mov	r3, r0
 8006940:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 8006942:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006946:	ee07 3a90 	vmov	s15, r3
 800694a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800694e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8006964 <lsm6dsr_from_fs2g_to_mg+0x2c>
 8006952:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8006956:	eeb0 0a67 	vmov.f32	s0, s15
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr
 8006964:	3d79db23 	.word	0x3d79db23

08006968 <lsm6dsr_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsr_from_fs2000dps_to_mdps(int16_t lsb)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	4603      	mov	r3, r0
 8006970:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 8006972:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006976:	ee07 3a90 	vmov	s15, r3
 800697a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800697e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8006994 <lsm6dsr_from_fs2000dps_to_mdps+0x2c>
 8006982:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8006986:	eeb0 0a67 	vmov.f32	s0, s15
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr
 8006994:	428c0000 	.word	0x428c0000

08006998 <lsm6dsr_from_lsb_to_celsius>:
{
  return ((float_t)lsb * 140.0f);
}

float_t lsm6dsr_from_lsb_to_celsius(int16_t lsb)
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	4603      	mov	r3, r0
 80069a0:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 80069a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80069a6:	ee07 3a90 	vmov	s15, r3
 80069aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80069ae:	eddf 6a07 	vldr	s13, [pc, #28]	; 80069cc <lsm6dsr_from_lsb_to_celsius+0x34>
 80069b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80069b6:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80069ba:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 80069be:	eeb0 0a67 	vmov.f32	s0, s15
 80069c2:	370c      	adds	r7, #12
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr
 80069cc:	43800000 	.word	0x43800000

080069d0 <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	460b      	mov	r3, r1
 80069da:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80069dc:	f107 0208 	add.w	r2, r7, #8
 80069e0:	2301      	movs	r3, #1
 80069e2:	2110      	movs	r1, #16
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f7ff ff77 	bl	80068d8 <lsm6dsr_read_reg>
 80069ea:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d10f      	bne.n	8006a12 <lsm6dsr_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 80069f2:	78fb      	ldrb	r3, [r7, #3]
 80069f4:	f003 0303 	and.w	r3, r3, #3
 80069f8:	b2da      	uxtb	r2, r3
 80069fa:	7a3b      	ldrb	r3, [r7, #8]
 80069fc:	f362 0383 	bfi	r3, r2, #2, #2
 8006a00:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8006a02:	f107 0208 	add.w	r2, r7, #8
 8006a06:	2301      	movs	r3, #1
 8006a08:	2110      	movs	r1, #16
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f7ff ff7c 	bl	8006908 <lsm6dsr_write_reg>
 8006a10:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8006a12:	68fb      	ldr	r3, [r7, #12]
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3710      	adds	r7, #16
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b086      	sub	sp, #24
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	460b      	mov	r3, r1
 8006a26:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_xl_t odr_xl =  val;
 8006a28:	78fb      	ldrb	r3, [r7, #3]
 8006a2a:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8006a2c:	f107 030c 	add.w	r3, r7, #12
 8006a30:	4619      	mov	r1, r3
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 fc54 	bl	80072e0 <lsm6dsr_fsm_enable_get>
 8006a38:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	f040 80c4 	bne.w	8006bca <lsm6dsr_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006a42:	7b3b      	ldrb	r3, [r7, #12]
 8006a44:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006a48:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8006a4a:	7b3b      	ldrb	r3, [r7, #12]
 8006a4c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006a50:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006a52:	4313      	orrs	r3, r2
 8006a54:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8006a56:	7b3b      	ldrb	r3, [r7, #12]
 8006a58:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006a5c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8006a62:	7b3b      	ldrb	r3, [r7, #12]
 8006a64:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006a68:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8006a6e:	7b3b      	ldrb	r3, [r7, #12]
 8006a70:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006a74:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8006a76:	4313      	orrs	r3, r2
 8006a78:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8006a7a:	7b3b      	ldrb	r3, [r7, #12]
 8006a7c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006a80:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8006a82:	4313      	orrs	r3, r2
 8006a84:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8006a86:	7b3b      	ldrb	r3, [r7, #12]
 8006a88:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006a8c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8006a92:	7b3b      	ldrb	r3, [r7, #12]
 8006a94:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006a98:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8006a9e:	7b7b      	ldrb	r3, [r7, #13]
 8006aa0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006aa4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8006aaa:	7b7b      	ldrb	r3, [r7, #13]
 8006aac:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006ab0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8006ab6:	7b7b      	ldrb	r3, [r7, #13]
 8006ab8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006abc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8006ac2:	7b7b      	ldrb	r3, [r7, #13]
 8006ac4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006ac8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8006aca:	4313      	orrs	r3, r2
 8006acc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8006ace:	7b7b      	ldrb	r3, [r7, #13]
 8006ad0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006ad4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8006ada:	7b7b      	ldrb	r3, [r7, #13]
 8006adc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006ae0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8006ae6:	7b7b      	ldrb	r3, [r7, #13]
 8006ae8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006aec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8006aee:	4313      	orrs	r3, r2
 8006af0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8006af2:	7b7b      	ldrb	r3, [r7, #13]
 8006af4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006af8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8006afa:	4313      	orrs	r3, r2
 8006afc:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d163      	bne.n	8006bca <lsm6dsr_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8006b02:	f107 030b 	add.w	r3, r7, #11
 8006b06:	4619      	mov	r1, r3
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 fc15 	bl	8007338 <lsm6dsr_fsm_data_rate_get>
 8006b0e:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d159      	bne.n	8006bca <lsm6dsr_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8006b16:	7afb      	ldrb	r3, [r7, #11]
 8006b18:	2b03      	cmp	r3, #3
 8006b1a:	d853      	bhi.n	8006bc4 <lsm6dsr_xl_data_rate_set+0x1a8>
 8006b1c:	a201      	add	r2, pc, #4	; (adr r2, 8006b24 <lsm6dsr_xl_data_rate_set+0x108>)
 8006b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b22:	bf00      	nop
 8006b24:	08006b35 	.word	0x08006b35
 8006b28:	08006b47 	.word	0x08006b47
 8006b2c:	08006b65 	.word	0x08006b65
 8006b30:	08006b8f 	.word	0x08006b8f
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF)
 8006b34:	78fb      	ldrb	r3, [r7, #3]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d102      	bne.n	8006b40 <lsm6dsr_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006b3e:	e045      	b.n	8006bcc <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006b40:	78fb      	ldrb	r3, [r7, #3]
 8006b42:	75fb      	strb	r3, [r7, #23]
            break;
 8006b44:	e042      	b.n	8006bcc <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8006b46:	78fb      	ldrb	r3, [r7, #3]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d102      	bne.n	8006b52 <lsm6dsr_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8006b4c:	2302      	movs	r3, #2
 8006b4e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006b50:	e03c      	b.n	8006bcc <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8006b52:	78fb      	ldrb	r3, [r7, #3]
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d102      	bne.n	8006b5e <lsm6dsr_xl_data_rate_set+0x142>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8006b58:	2302      	movs	r3, #2
 8006b5a:	75fb      	strb	r3, [r7, #23]
            break;
 8006b5c:	e036      	b.n	8006bcc <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006b5e:	78fb      	ldrb	r3, [r7, #3]
 8006b60:	75fb      	strb	r3, [r7, #23]
            break;
 8006b62:	e033      	b.n	8006bcc <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8006b64:	78fb      	ldrb	r3, [r7, #3]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d102      	bne.n	8006b70 <lsm6dsr_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006b6e:	e02d      	b.n	8006bcc <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8006b70:	78fb      	ldrb	r3, [r7, #3]
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d102      	bne.n	8006b7c <lsm6dsr_xl_data_rate_set+0x160>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8006b76:	2303      	movs	r3, #3
 8006b78:	75fb      	strb	r3, [r7, #23]
            break;
 8006b7a:	e027      	b.n	8006bcc <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 8006b7c:	78fb      	ldrb	r3, [r7, #3]
 8006b7e:	2b02      	cmp	r3, #2
 8006b80:	d102      	bne.n	8006b88 <lsm6dsr_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8006b82:	2303      	movs	r3, #3
 8006b84:	75fb      	strb	r3, [r7, #23]
            break;
 8006b86:	e021      	b.n	8006bcc <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006b88:	78fb      	ldrb	r3, [r7, #3]
 8006b8a:	75fb      	strb	r3, [r7, #23]
            break;
 8006b8c:	e01e      	b.n	8006bcc <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8006b8e:	78fb      	ldrb	r3, [r7, #3]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d102      	bne.n	8006b9a <lsm6dsr_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8006b94:	2304      	movs	r3, #4
 8006b96:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006b98:	e018      	b.n	8006bcc <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8006b9a:	78fb      	ldrb	r3, [r7, #3]
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d102      	bne.n	8006ba6 <lsm6dsr_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8006ba0:	2304      	movs	r3, #4
 8006ba2:	75fb      	strb	r3, [r7, #23]
            break;
 8006ba4:	e012      	b.n	8006bcc <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 8006ba6:	78fb      	ldrb	r3, [r7, #3]
 8006ba8:	2b02      	cmp	r3, #2
 8006baa:	d102      	bne.n	8006bb2 <lsm6dsr_xl_data_rate_set+0x196>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8006bac:	2304      	movs	r3, #4
 8006bae:	75fb      	strb	r3, [r7, #23]
            break;
 8006bb0:	e00c      	b.n	8006bcc <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_52Hz)
 8006bb2:	78fb      	ldrb	r3, [r7, #3]
 8006bb4:	2b03      	cmp	r3, #3
 8006bb6:	d102      	bne.n	8006bbe <lsm6dsr_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8006bb8:	2304      	movs	r3, #4
 8006bba:	75fb      	strb	r3, [r7, #23]
            break;
 8006bbc:	e006      	b.n	8006bcc <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006bbe:	78fb      	ldrb	r3, [r7, #3]
 8006bc0:	75fb      	strb	r3, [r7, #23]
            break;
 8006bc2:	e003      	b.n	8006bcc <lsm6dsr_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8006bc4:	78fb      	ldrb	r3, [r7, #3]
 8006bc6:	75fb      	strb	r3, [r7, #23]
            break;
 8006bc8:	e000      	b.n	8006bcc <lsm6dsr_xl_data_rate_set+0x1b0>
        }
      }
 8006bca:	bf00      	nop
    }
  }

  if (ret == 0)
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d107      	bne.n	8006be2 <lsm6dsr_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8006bd2:	f107 0208 	add.w	r2, r7, #8
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	2110      	movs	r1, #16
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f7ff fe7c 	bl	80068d8 <lsm6dsr_read_reg>
 8006be0:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d10f      	bne.n	8006c08 <lsm6dsr_xl_data_rate_set+0x1ec>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8006be8:	7dfb      	ldrb	r3, [r7, #23]
 8006bea:	f003 030f 	and.w	r3, r3, #15
 8006bee:	b2da      	uxtb	r2, r3
 8006bf0:	7a3b      	ldrb	r3, [r7, #8]
 8006bf2:	f362 1307 	bfi	r3, r2, #4, #4
 8006bf6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8006bf8:	f107 0208 	add.w	r2, r7, #8
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	2110      	movs	r1, #16
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f7ff fe81 	bl	8006908 <lsm6dsr_write_reg>
 8006c06:	6138      	str	r0, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8006c08:	693b      	ldr	r3, [r7, #16]
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3718      	adds	r7, #24
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
 8006c12:	bf00      	nop

08006c14 <lsm6dsr_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t val)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006c20:	f107 0208 	add.w	r2, r7, #8
 8006c24:	2301      	movs	r3, #1
 8006c26:	2111      	movs	r1, #17
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f7ff fe55 	bl	80068d8 <lsm6dsr_read_reg>
 8006c2e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d10f      	bne.n	8006c56 <lsm6dsr_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 8006c36:	78fb      	ldrb	r3, [r7, #3]
 8006c38:	f003 030f 	and.w	r3, r3, #15
 8006c3c:	b2da      	uxtb	r2, r3
 8006c3e:	7a3b      	ldrb	r3, [r7, #8]
 8006c40:	f362 0303 	bfi	r3, r2, #0, #4
 8006c44:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006c46:	f107 0208 	add.w	r2, r7, #8
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	2111      	movs	r1, #17
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f7ff fe5a 	bl	8006908 <lsm6dsr_write_reg>
 8006c54:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006c56:	68fb      	ldr	r3, [r7, #12]
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3710      	adds	r7, #16
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b086      	sub	sp, #24
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	460b      	mov	r3, r1
 8006c6a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_g_t odr_gy =  val;
 8006c6c:	78fb      	ldrb	r3, [r7, #3]
 8006c6e:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8006c70:	f107 030c 	add.w	r3, r7, #12
 8006c74:	4619      	mov	r1, r3
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 fb32 	bl	80072e0 <lsm6dsr_fsm_enable_get>
 8006c7c:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	f040 80c4 	bne.w	8006e0e <lsm6dsr_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006c86:	7b3b      	ldrb	r3, [r7, #12]
 8006c88:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006c8c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8006c8e:	7b3b      	ldrb	r3, [r7, #12]
 8006c90:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006c94:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006c96:	4313      	orrs	r3, r2
 8006c98:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8006c9a:	7b3b      	ldrb	r3, [r7, #12]
 8006c9c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006ca0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8006ca6:	7b3b      	ldrb	r3, [r7, #12]
 8006ca8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006cac:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8006cb2:	7b3b      	ldrb	r3, [r7, #12]
 8006cb4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006cb8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8006cbe:	7b3b      	ldrb	r3, [r7, #12]
 8006cc0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006cc4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8006cca:	7b3b      	ldrb	r3, [r7, #12]
 8006ccc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006cd0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8006cd6:	7b3b      	ldrb	r3, [r7, #12]
 8006cd8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006cdc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8006ce2:	7b7b      	ldrb	r3, [r7, #13]
 8006ce4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006ce8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8006cea:	4313      	orrs	r3, r2
 8006cec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8006cee:	7b7b      	ldrb	r3, [r7, #13]
 8006cf0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006cf4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8006cfa:	7b7b      	ldrb	r3, [r7, #13]
 8006cfc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006d00:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8006d02:	4313      	orrs	r3, r2
 8006d04:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8006d06:	7b7b      	ldrb	r3, [r7, #13]
 8006d08:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006d0c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8006d12:	7b7b      	ldrb	r3, [r7, #13]
 8006d14:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006d18:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8006d1e:	7b7b      	ldrb	r3, [r7, #13]
 8006d20:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006d24:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8006d26:	4313      	orrs	r3, r2
 8006d28:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8006d2a:	7b7b      	ldrb	r3, [r7, #13]
 8006d2c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006d30:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8006d32:	4313      	orrs	r3, r2
 8006d34:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8006d36:	7b7b      	ldrb	r3, [r7, #13]
 8006d38:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006d3c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d163      	bne.n	8006e0e <lsm6dsr_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8006d46:	f107 030b 	add.w	r3, r7, #11
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 faf3 	bl	8007338 <lsm6dsr_fsm_data_rate_get>
 8006d52:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d159      	bne.n	8006e0e <lsm6dsr_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8006d5a:	7afb      	ldrb	r3, [r7, #11]
 8006d5c:	2b03      	cmp	r3, #3
 8006d5e:	d853      	bhi.n	8006e08 <lsm6dsr_gy_data_rate_set+0x1a8>
 8006d60:	a201      	add	r2, pc, #4	; (adr r2, 8006d68 <lsm6dsr_gy_data_rate_set+0x108>)
 8006d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d66:	bf00      	nop
 8006d68:	08006d79 	.word	0x08006d79
 8006d6c:	08006d8b 	.word	0x08006d8b
 8006d70:	08006da9 	.word	0x08006da9
 8006d74:	08006dd3 	.word	0x08006dd3
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF)
 8006d78:	78fb      	ldrb	r3, [r7, #3]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d102      	bne.n	8006d84 <lsm6dsr_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006d82:	e045      	b.n	8006e10 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006d84:	78fb      	ldrb	r3, [r7, #3]
 8006d86:	75fb      	strb	r3, [r7, #23]
            break;
 8006d88:	e042      	b.n	8006e10 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8006d8a:	78fb      	ldrb	r3, [r7, #3]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d102      	bne.n	8006d96 <lsm6dsr_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8006d90:	2302      	movs	r3, #2
 8006d92:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006d94:	e03c      	b.n	8006e10 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8006d96:	78fb      	ldrb	r3, [r7, #3]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d102      	bne.n	8006da2 <lsm6dsr_gy_data_rate_set+0x142>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8006d9c:	2302      	movs	r3, #2
 8006d9e:	75fb      	strb	r3, [r7, #23]
            break;
 8006da0:	e036      	b.n	8006e10 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006da2:	78fb      	ldrb	r3, [r7, #3]
 8006da4:	75fb      	strb	r3, [r7, #23]
            break;
 8006da6:	e033      	b.n	8006e10 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8006da8:	78fb      	ldrb	r3, [r7, #3]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d102      	bne.n	8006db4 <lsm6dsr_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8006dae:	2303      	movs	r3, #3
 8006db0:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006db2:	e02d      	b.n	8006e10 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8006db4:	78fb      	ldrb	r3, [r7, #3]
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d102      	bne.n	8006dc0 <lsm6dsr_gy_data_rate_set+0x160>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8006dba:	2303      	movs	r3, #3
 8006dbc:	75fb      	strb	r3, [r7, #23]
            break;
 8006dbe:	e027      	b.n	8006e10 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 8006dc0:	78fb      	ldrb	r3, [r7, #3]
 8006dc2:	2b02      	cmp	r3, #2
 8006dc4:	d102      	bne.n	8006dcc <lsm6dsr_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	75fb      	strb	r3, [r7, #23]
            break;
 8006dca:	e021      	b.n	8006e10 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006dcc:	78fb      	ldrb	r3, [r7, #3]
 8006dce:	75fb      	strb	r3, [r7, #23]
            break;
 8006dd0:	e01e      	b.n	8006e10 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8006dd2:	78fb      	ldrb	r3, [r7, #3]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d102      	bne.n	8006dde <lsm6dsr_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8006dd8:	2304      	movs	r3, #4
 8006dda:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006ddc:	e018      	b.n	8006e10 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8006dde:	78fb      	ldrb	r3, [r7, #3]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d102      	bne.n	8006dea <lsm6dsr_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8006de4:	2304      	movs	r3, #4
 8006de6:	75fb      	strb	r3, [r7, #23]
            break;
 8006de8:	e012      	b.n	8006e10 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 8006dea:	78fb      	ldrb	r3, [r7, #3]
 8006dec:	2b02      	cmp	r3, #2
 8006dee:	d102      	bne.n	8006df6 <lsm6dsr_gy_data_rate_set+0x196>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8006df0:	2304      	movs	r3, #4
 8006df2:	75fb      	strb	r3, [r7, #23]
            break;
 8006df4:	e00c      	b.n	8006e10 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_52Hz)
 8006df6:	78fb      	ldrb	r3, [r7, #3]
 8006df8:	2b03      	cmp	r3, #3
 8006dfa:	d102      	bne.n	8006e02 <lsm6dsr_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8006dfc:	2304      	movs	r3, #4
 8006dfe:	75fb      	strb	r3, [r7, #23]
            break;
 8006e00:	e006      	b.n	8006e10 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006e02:	78fb      	ldrb	r3, [r7, #3]
 8006e04:	75fb      	strb	r3, [r7, #23]
            break;
 8006e06:	e003      	b.n	8006e10 <lsm6dsr_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8006e08:	78fb      	ldrb	r3, [r7, #3]
 8006e0a:	75fb      	strb	r3, [r7, #23]
            break;
 8006e0c:	e000      	b.n	8006e10 <lsm6dsr_gy_data_rate_set+0x1b0>
        }
      }
 8006e0e:	bf00      	nop
    }
  }

  if (ret == 0)
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d107      	bne.n	8006e26 <lsm6dsr_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006e16:	f107 0208 	add.w	r2, r7, #8
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	2111      	movs	r1, #17
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f7ff fd5a 	bl	80068d8 <lsm6dsr_read_reg>
 8006e24:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d10f      	bne.n	8006e4c <lsm6dsr_gy_data_rate_set+0x1ec>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8006e2c:	7dfb      	ldrb	r3, [r7, #23]
 8006e2e:	f003 030f 	and.w	r3, r3, #15
 8006e32:	b2da      	uxtb	r2, r3
 8006e34:	7a3b      	ldrb	r3, [r7, #8]
 8006e36:	f362 1307 	bfi	r3, r2, #4, #4
 8006e3a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006e3c:	f107 0208 	add.w	r2, r7, #8
 8006e40:	2301      	movs	r3, #1
 8006e42:	2111      	movs	r1, #17
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f7ff fd5f 	bl	8006908 <lsm6dsr_write_reg>
 8006e4a:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8006e4c:	693b      	ldr	r3, [r7, #16]
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3718      	adds	r7, #24
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop

08006e58 <lsm6dsr_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	460b      	mov	r3, r1
 8006e62:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8006e64:	f107 0208 	add.w	r2, r7, #8
 8006e68:	2301      	movs	r3, #1
 8006e6a:	2112      	movs	r1, #18
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f7ff fd33 	bl	80068d8 <lsm6dsr_read_reg>
 8006e72:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d10f      	bne.n	8006e9a <lsm6dsr_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 8006e7a:	78fb      	ldrb	r3, [r7, #3]
 8006e7c:	f003 0301 	and.w	r3, r3, #1
 8006e80:	b2da      	uxtb	r2, r3
 8006e82:	7a3b      	ldrb	r3, [r7, #8]
 8006e84:	f362 1386 	bfi	r3, r2, #6, #1
 8006e88:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8006e8a:	f107 0208 	add.w	r2, r7, #8
 8006e8e:	2301      	movs	r3, #1
 8006e90:	2112      	movs	r1, #18
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f7ff fd38 	bl	8006908 <lsm6dsr_write_reg>
 8006e98:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3710      	adds	r7, #16
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <lsm6dsr_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8006eae:	f107 0208 	add.w	r2, r7, #8
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	211e      	movs	r1, #30
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f7ff fd0e 	bl	80068d8 <lsm6dsr_read_reg>
 8006ebc:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 8006ebe:	7a3b      	ldrb	r3, [r7, #8]
 8006ec0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	701a      	strb	r2, [r3, #0]

  return ret;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3710      	adds	r7, #16
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}

08006ed6 <lsm6dsr_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8006ed6:	b580      	push	{r7, lr}
 8006ed8:	b084      	sub	sp, #16
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
 8006ede:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8006ee0:	f107 0208 	add.w	r2, r7, #8
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	211e      	movs	r1, #30
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f7ff fcf5 	bl	80068d8 <lsm6dsr_read_reg>
 8006eee:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 8006ef0:	7a3b      	ldrb	r3, [r7, #8]
 8006ef2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	461a      	mov	r2, r3
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	701a      	strb	r2, [r3, #0]

  return ret;
 8006efe:	68fb      	ldr	r3, [r7, #12]
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3710      	adds	r7, #16
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <lsm6dsr_temp_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8006f12:	f107 0208 	add.w	r2, r7, #8
 8006f16:	2301      	movs	r3, #1
 8006f18:	211e      	movs	r1, #30
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f7ff fcdc 	bl	80068d8 <lsm6dsr_read_reg>
 8006f20:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.tda;
 8006f22:	7a3b      	ldrb	r3, [r7, #8]
 8006f24:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	701a      	strb	r2, [r3, #0]

  return ret;
 8006f30:	68fb      	ldr	r3, [r7, #12]
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}

08006f3a <lsm6dsr_temperature_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8006f3a:	b580      	push	{r7, lr}
 8006f3c:	b084      	sub	sp, #16
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
 8006f42:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUT_TEMP_L, buff, 2);
 8006f44:	f107 0208 	add.w	r2, r7, #8
 8006f48:	2302      	movs	r3, #2
 8006f4a:	2120      	movs	r1, #32
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f7ff fcc3 	bl	80068d8 <lsm6dsr_read_reg>
 8006f52:	60f8      	str	r0, [r7, #12]
  val[0] = (int16_t)buff[1];
 8006f54:	7a7b      	ldrb	r3, [r7, #9]
 8006f56:	b21a      	sxth	r2, r3
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	021b      	lsls	r3, r3, #8
 8006f66:	b29a      	uxth	r2, r3
 8006f68:	7a3b      	ldrb	r3, [r7, #8]
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	4413      	add	r3, r2
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	b21a      	sxth	r2, r3
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	801a      	strh	r2, [r3, #0]

  return ret;
 8006f76:	68fb      	ldr	r3, [r7, #12]
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3710      	adds	r7, #16
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <lsm6dsr_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b086      	sub	sp, #24
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_G, buff, 6);
 8006f8a:	f107 020c 	add.w	r2, r7, #12
 8006f8e:	2306      	movs	r3, #6
 8006f90:	2122      	movs	r1, #34	; 0x22
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f7ff fca0 	bl	80068d8 <lsm6dsr_read_reg>
 8006f98:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8006f9a:	7b7b      	ldrb	r3, [r7, #13]
 8006f9c:	b21a      	sxth	r2, r3
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	021b      	lsls	r3, r3, #8
 8006fac:	b29a      	uxth	r2, r3
 8006fae:	7b3b      	ldrb	r3, [r7, #12]
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	4413      	add	r3, r2
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	b21a      	sxth	r2, r3
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8006fbc:	7bfa      	ldrb	r2, [r7, #15]
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	3302      	adds	r3, #2
 8006fc2:	b212      	sxth	r2, r2
 8006fc4:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	3302      	adds	r3, #2
 8006fca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	021b      	lsls	r3, r3, #8
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	7bbb      	ldrb	r3, [r7, #14]
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	4413      	add	r3, r2
 8006fda:	b29a      	uxth	r2, r3
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	3302      	adds	r3, #2
 8006fe0:	b212      	sxth	r2, r2
 8006fe2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8006fe4:	7c7a      	ldrb	r2, [r7, #17]
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	3304      	adds	r3, #4
 8006fea:	b212      	sxth	r2, r2
 8006fec:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	3304      	adds	r3, #4
 8006ff2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	021b      	lsls	r3, r3, #8
 8006ffa:	b29a      	uxth	r2, r3
 8006ffc:	7c3b      	ldrb	r3, [r7, #16]
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	4413      	add	r3, r2
 8007002:	b29a      	uxth	r2, r3
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	3304      	adds	r3, #4
 8007008:	b212      	sxth	r2, r2
 800700a:	801a      	strh	r2, [r3, #0]

  return ret;
 800700c:	697b      	ldr	r3, [r7, #20]
}
 800700e:	4618      	mov	r0, r3
 8007010:	3718      	adds	r7, #24
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <lsm6dsr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8007016:	b580      	push	{r7, lr}
 8007018:	b086      	sub	sp, #24
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
 800701e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_A, buff, 6);
 8007020:	f107 020c 	add.w	r2, r7, #12
 8007024:	2306      	movs	r3, #6
 8007026:	2128      	movs	r1, #40	; 0x28
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f7ff fc55 	bl	80068d8 <lsm6dsr_read_reg>
 800702e:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8007030:	7b7b      	ldrb	r3, [r7, #13]
 8007032:	b21a      	sxth	r2, r3
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800703e:	b29b      	uxth	r3, r3
 8007040:	021b      	lsls	r3, r3, #8
 8007042:	b29a      	uxth	r2, r3
 8007044:	7b3b      	ldrb	r3, [r7, #12]
 8007046:	b29b      	uxth	r3, r3
 8007048:	4413      	add	r3, r2
 800704a:	b29b      	uxth	r3, r3
 800704c:	b21a      	sxth	r2, r3
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8007052:	7bfa      	ldrb	r2, [r7, #15]
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	3302      	adds	r3, #2
 8007058:	b212      	sxth	r2, r2
 800705a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	3302      	adds	r3, #2
 8007060:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007064:	b29b      	uxth	r3, r3
 8007066:	021b      	lsls	r3, r3, #8
 8007068:	b29a      	uxth	r2, r3
 800706a:	7bbb      	ldrb	r3, [r7, #14]
 800706c:	b29b      	uxth	r3, r3
 800706e:	4413      	add	r3, r2
 8007070:	b29a      	uxth	r2, r3
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	3302      	adds	r3, #2
 8007076:	b212      	sxth	r2, r2
 8007078:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800707a:	7c7a      	ldrb	r2, [r7, #17]
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	3304      	adds	r3, #4
 8007080:	b212      	sxth	r2, r2
 8007082:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	3304      	adds	r3, #4
 8007088:	f9b3 3000 	ldrsh.w	r3, [r3]
 800708c:	b29b      	uxth	r3, r3
 800708e:	021b      	lsls	r3, r3, #8
 8007090:	b29a      	uxth	r2, r3
 8007092:	7c3b      	ldrb	r3, [r7, #16]
 8007094:	b29b      	uxth	r3, r3
 8007096:	4413      	add	r3, r2
 8007098:	b29a      	uxth	r2, r3
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	3304      	adds	r3, #4
 800709e:	b212      	sxth	r2, r2
 80070a0:	801a      	strh	r2, [r3, #0]

  return ret;
 80070a2:	697b      	ldr	r3, [r7, #20]
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3718      	adds	r7, #24
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	460b      	mov	r3, r1
 80070b6:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 80070b8:	f107 0208 	add.w	r2, r7, #8
 80070bc:	2301      	movs	r3, #1
 80070be:	2101      	movs	r1, #1
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f7ff fc09 	bl	80068d8 <lsm6dsr_read_reg>
 80070c6:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d10f      	bne.n	80070ee <lsm6dsr_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 80070ce:	78fb      	ldrb	r3, [r7, #3]
 80070d0:	f003 0303 	and.w	r3, r3, #3
 80070d4:	b2da      	uxtb	r2, r3
 80070d6:	7a3b      	ldrb	r3, [r7, #8]
 80070d8:	f362 1387 	bfi	r3, r2, #6, #2
 80070dc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 80070de:	f107 0208 	add.w	r2, r7, #8
 80070e2:	2301      	movs	r3, #1
 80070e4:	2101      	movs	r1, #1
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f7ff fc0e 	bl	8006908 <lsm6dsr_write_reg>
 80070ec:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 80070ee:	68fb      	ldr	r3, [r7, #12]
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 8007102:	2301      	movs	r3, #1
 8007104:	683a      	ldr	r2, [r7, #0]
 8007106:	210f      	movs	r1, #15
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f7ff fbe5 	bl	80068d8 <lsm6dsr_read_reg>
 800710e:	60f8      	str	r0, [r7, #12]

  return ret;
 8007110:	68fb      	ldr	r3, [r7, #12]
}
 8007112:	4618      	mov	r0, r3
 8007114:	3710      	adds	r7, #16
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}

0800711a <lsm6dsr_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800711a:	b580      	push	{r7, lr}
 800711c:	b084      	sub	sp, #16
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
 8007122:	460b      	mov	r3, r1
 8007124:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007126:	f107 0208 	add.w	r2, r7, #8
 800712a:	2301      	movs	r3, #1
 800712c:	2112      	movs	r1, #18
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f7ff fbd2 	bl	80068d8 <lsm6dsr_read_reg>
 8007134:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d10f      	bne.n	800715c <lsm6dsr_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 800713c:	78fb      	ldrb	r3, [r7, #3]
 800713e:	f003 0301 	and.w	r3, r3, #1
 8007142:	b2da      	uxtb	r2, r3
 8007144:	7a3b      	ldrb	r3, [r7, #8]
 8007146:	f362 0300 	bfi	r3, r2, #0, #1
 800714a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800714c:	f107 0208 	add.w	r2, r7, #8
 8007150:	2301      	movs	r3, #1
 8007152:	2112      	movs	r1, #18
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f7ff fbd7 	bl	8006908 <lsm6dsr_write_reg>
 800715a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800715c:	68fb      	ldr	r3, [r7, #12]
}
 800715e:	4618      	mov	r0, r3
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}

08007166 <lsm6dsr_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8007166:	b580      	push	{r7, lr}
 8007168:	b084      	sub	sp, #16
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
 800716e:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007170:	f107 0208 	add.w	r2, r7, #8
 8007174:	2301      	movs	r3, #1
 8007176:	2112      	movs	r1, #18
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f7ff fbad 	bl	80068d8 <lsm6dsr_read_reg>
 800717e:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 8007180:	7a3b      	ldrb	r3, [r7, #8]
 8007182:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007186:	b2db      	uxtb	r3, r3
 8007188:	461a      	mov	r2, r3
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	701a      	strb	r2, [r3, #0]

  return ret;
 800718e:	68fb      	ldr	r3, [r7, #12]
}
 8007190:	4618      	mov	r0, r3
 8007192:	3710      	adds	r7, #16
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <lsm6dsr_xl_filter_lp2_set>:
  * @param  val    Change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_filter_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	460b      	mov	r3, r1
 80071a2:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80071a4:	f107 0208 	add.w	r2, r7, #8
 80071a8:	2301      	movs	r3, #1
 80071aa:	2110      	movs	r1, #16
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f7ff fb93 	bl	80068d8 <lsm6dsr_read_reg>
 80071b2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d10f      	bne.n	80071da <lsm6dsr_xl_filter_lp2_set+0x42>
  {
    ctrl1_xl.lpf2_xl_en = (uint8_t)val;
 80071ba:	78fb      	ldrb	r3, [r7, #3]
 80071bc:	f003 0301 	and.w	r3, r3, #1
 80071c0:	b2da      	uxtb	r2, r3
 80071c2:	7a3b      	ldrb	r3, [r7, #8]
 80071c4:	f362 0341 	bfi	r3, r2, #1, #1
 80071c8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 80071ca:	f107 0208 	add.w	r2, r7, #8
 80071ce:	2301      	movs	r3, #1
 80071d0:	2110      	movs	r1, #16
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f7ff fb98 	bl	8006908 <lsm6dsr_write_reg>
 80071d8:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 80071da:	68fb      	ldr	r3, [r7, #12]
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3710      	adds	r7, #16
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <lsm6dsr_xl_hp_path_on_out_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                      lsm6dsr_hp_slope_xl_en_t val)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	460b      	mov	r3, r1
 80071ee:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 80071f0:	f107 0208 	add.w	r2, r7, #8
 80071f4:	2301      	movs	r3, #1
 80071f6:	2117      	movs	r1, #23
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f7ff fb6d 	bl	80068d8 <lsm6dsr_read_reg>
 80071fe:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d121      	bne.n	800724a <lsm6dsr_xl_hp_path_on_out_set+0x66>
  {
    ctrl8_xl.hp_slope_xl_en = (((uint8_t)val & 0x10U) >> 4);
 8007206:	78fb      	ldrb	r3, [r7, #3]
 8007208:	091b      	lsrs	r3, r3, #4
 800720a:	f003 0301 	and.w	r3, r3, #1
 800720e:	b2da      	uxtb	r2, r3
 8007210:	7a3b      	ldrb	r3, [r7, #8]
 8007212:	f362 0382 	bfi	r3, r2, #2, #1
 8007216:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_ref_mode_xl = (((uint8_t)val & 0x20U) >> 5);
 8007218:	78fb      	ldrb	r3, [r7, #3]
 800721a:	095b      	lsrs	r3, r3, #5
 800721c:	f003 0301 	and.w	r3, r3, #1
 8007220:	b2da      	uxtb	r2, r3
 8007222:	7a3b      	ldrb	r3, [r7, #8]
 8007224:	f362 1304 	bfi	r3, r2, #4, #1
 8007228:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t)val & 0x07U;
 800722a:	78fb      	ldrb	r3, [r7, #3]
 800722c:	f003 0307 	and.w	r3, r3, #7
 8007230:	b2da      	uxtb	r2, r3
 8007232:	7a3b      	ldrb	r3, [r7, #8]
 8007234:	f362 1347 	bfi	r3, r2, #5, #3
 8007238:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL8_XL,
 800723a:	f107 0208 	add.w	r2, r7, #8
 800723e:	2301      	movs	r3, #1
 8007240:	2117      	movs	r1, #23
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f7ff fb60 	bl	8006908 <lsm6dsr_write_reg>
 8007248:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl8_xl, 1);
  }

  return ret;
 800724a:	68fb      	ldr	r3, [r7, #12]
}
 800724c:	4618      	mov	r0, r3
 800724e:	3710      	adds	r7, #16
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <lsm6dsr_i3c_disable_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dsr_i3c_disable_t val)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b086      	sub	sp, #24
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	460b      	mov	r3, r1
 800725e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl9_xl_t ctrl9_xl;
  lsm6dsr_i3c_bus_avb_t i3c_bus_avb;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8007260:	f107 0210 	add.w	r2, r7, #16
 8007264:	2301      	movs	r3, #1
 8007266:	2118      	movs	r1, #24
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f7ff fb35 	bl	80068d8 <lsm6dsr_read_reg>
 800726e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d111      	bne.n	800729a <lsm6dsr_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8007276:	78fb      	ldrb	r3, [r7, #3]
 8007278:	09db      	lsrs	r3, r3, #7
 800727a:	b2db      	uxtb	r3, r3
 800727c:	f003 0301 	and.w	r3, r3, #1
 8007280:	b2da      	uxtb	r2, r3
 8007282:	7c3b      	ldrb	r3, [r7, #16]
 8007284:	f362 0341 	bfi	r3, r2, #1, #1
 8007288:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL9_XL,
 800728a:	f107 0210 	add.w	r2, r7, #16
 800728e:	2301      	movs	r3, #1
 8007290:	2118      	movs	r1, #24
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f7ff fb38 	bl	8006908 <lsm6dsr_write_reg>
 8007298:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl9_xl, 1);
  }

  if (ret == 0)
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d107      	bne.n	80072b0 <lsm6dsr_i3c_disable_set+0x5c>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 80072a0:	f107 020c 	add.w	r2, r7, #12
 80072a4:	2301      	movs	r3, #1
 80072a6:	2162      	movs	r1, #98	; 0x62
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f7ff fb15 	bl	80068d8 <lsm6dsr_read_reg>
 80072ae:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d10f      	bne.n	80072d6 <lsm6dsr_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 80072b6:	78fb      	ldrb	r3, [r7, #3]
 80072b8:	f003 0303 	and.w	r3, r3, #3
 80072bc:	b2da      	uxtb	r2, r3
 80072be:	7b3b      	ldrb	r3, [r7, #12]
 80072c0:	f362 03c4 	bfi	r3, r2, #3, #2
 80072c4:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 80072c6:	f107 020c 	add.w	r2, r7, #12
 80072ca:	2301      	movs	r3, #1
 80072cc:	2162      	movs	r1, #98	; 0x62
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f7ff fb1a 	bl	8006908 <lsm6dsr_write_reg>
 80072d4:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 80072d6:	697b      	ldr	r3, [r7, #20]
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3718      	adds	r7, #24
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 80072ea:	2102      	movs	r1, #2
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f7ff fedd 	bl	80070ac <lsm6dsr_mem_bank_set>
 80072f2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d106      	bne.n	8007308 <lsm6dsr_fsm_enable_get+0x28>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 80072fa:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 80072fc:	2301      	movs	r3, #1
 80072fe:	2146      	movs	r1, #70	; 0x46
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f7ff fae9 	bl	80068d8 <lsm6dsr_read_reg>
 8007306:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d107      	bne.n	800731e <lsm6dsr_fsm_enable_get+0x3e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 8007312:	2301      	movs	r3, #1
 8007314:	2147      	movs	r1, #71	; 0x47
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f7ff fade 	bl	80068d8 <lsm6dsr_read_reg>
 800731c:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d104      	bne.n	800732e <lsm6dsr_fsm_enable_get+0x4e>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8007324:	2100      	movs	r1, #0
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f7ff fec0 	bl	80070ac <lsm6dsr_mem_bank_set>
 800732c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800732e:	68fb      	ldr	r3, [r7, #12]
}
 8007330:	4618      	mov	r0, r3
 8007332:	3710      	adds	r7, #16
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8007342:	2102      	movs	r1, #2
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f7ff feb1 	bl	80070ac <lsm6dsr_mem_bank_set>
 800734a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d107      	bne.n	8007362 <lsm6dsr_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 8007352:	f107 0208 	add.w	r2, r7, #8
 8007356:	2301      	movs	r3, #1
 8007358:	215f      	movs	r1, #95	; 0x5f
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f7ff fabc 	bl	80068d8 <lsm6dsr_read_reg>
 8007360:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d104      	bne.n	8007372 <lsm6dsr_fsm_data_rate_get+0x3a>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8007368:	2100      	movs	r1, #0
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f7ff fe9e 	bl	80070ac <lsm6dsr_mem_bank_set>
 8007370:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 8007372:	7a3b      	ldrb	r3, [r7, #8]
 8007374:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007378:	b2db      	uxtb	r3, r3
 800737a:	2b03      	cmp	r3, #3
 800737c:	d81a      	bhi.n	80073b4 <lsm6dsr_fsm_data_rate_get+0x7c>
 800737e:	a201      	add	r2, pc, #4	; (adr r2, 8007384 <lsm6dsr_fsm_data_rate_get+0x4c>)
 8007380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007384:	08007395 	.word	0x08007395
 8007388:	0800739d 	.word	0x0800739d
 800738c:	080073a5 	.word	0x080073a5
 8007390:	080073ad 	.word	0x080073ad
  {
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	2200      	movs	r2, #0
 8007398:	701a      	strb	r2, [r3, #0]
      break;
 800739a:	e00f      	b.n	80073bc <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	2201      	movs	r2, #1
 80073a0:	701a      	strb	r2, [r3, #0]
      break;
 80073a2:	e00b      	b.n	80073bc <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	2202      	movs	r2, #2
 80073a8:	701a      	strb	r2, [r3, #0]
      break;
 80073aa:	e007      	b.n	80073bc <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	2203      	movs	r2, #3
 80073b0:	701a      	strb	r2, [r3, #0]
      break;
 80073b2:	e003      	b.n	80073bc <lsm6dsr_fsm_data_rate_get+0x84>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	2200      	movs	r2, #0
 80073b8:	701a      	strb	r2, [r3, #0]
      break;
 80073ba:	bf00      	nop
  }

  return ret;
 80073bc:	68fb      	ldr	r3, [r7, #12]
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop

080073c8 <_ZN7TwoWire5writeEi>:
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	683a      	ldr	r2, [r7, #0]
 80073da:	b2d2      	uxtb	r2, r2
 80073dc:	4611      	mov	r1, r2
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	4798      	blx	r3
 80073e2:	4603      	mov	r3, r0
 80073e4:	4618      	mov	r0, r3
 80073e6:	3708      	adds	r7, #8
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <_Z12ISBDCallbackv>:

bool ISBDCallback() __attribute__((weak));
void ISBDConsoleCallback(IridiumSBD *device, char c) __attribute__((weak));
void ISBDDiagsCallback(IridiumSBD *device, char c) __attribute__((weak));

bool ISBDCallback() { return true; }
 80073ec:	b480      	push	{r7}
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	2301      	movs	r3, #1
 80073f2:	4618      	mov	r0, r3
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <_Z19ISBDConsoleCallbackP10IridiumSBDc>:
void ISBDConsoleCallback(IridiumSBD *device, char c) { }
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	460b      	mov	r3, r1
 8007406:	70fb      	strb	r3, [r7, #3]
 8007408:	bf00      	nop
 800740a:	370c      	adds	r7, #12
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <_Z17ISBDDiagsCallbackP10IridiumSBDc>:
void ISBDDiagsCallback(IridiumSBD *device, char c) { }
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	460b      	mov	r3, r1
 800741e:	70fb      	strb	r3, [r7, #3]
 8007420:	bf00      	nop
 8007422:	370c      	adds	r7, #12
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <_ZN10IridiumSBD5beginEv>:



// Power on the RockBLOCK or return from sleep
int IridiumSBD::begin()
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
   if (this->reentrant)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800743a:	2b00      	cmp	r3, #0
 800743c:	d001      	beq.n	8007442 <_ZN10IridiumSBD5beginEv+0x16>
      return ISBD_REENTRANT;
 800743e:	2309      	movs	r3, #9
 8007440:	e01a      	b.n	8007478 <_ZN10IridiumSBD5beginEv+0x4c>

   this->reentrant = true;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2201      	movs	r2, #1
 8007446:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   int ret = internalBegin();
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 fb2a 	bl	8007aa4 <_ZN10IridiumSBD13internalBeginEv>
 8007450:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

   // Absent a successful startup, keep the device turned off
   if (ret != ISBD_SUCCESS)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d00a      	beq.n	8007476 <_ZN10IridiumSBD5beginEv+0x4a>
   {
      if (this->useSerial)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	7c5b      	ldrb	r3, [r3, #17]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d002      	beq.n	800746e <_ZN10IridiumSBD5beginEv+0x42>
         endSerialPort(); // Apollo3 v2.1 Serial fix
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f001 fc71 	bl	8008d50 <_ZN10IridiumSBD13endSerialPortEv>
      power(false);
 800746e:	2100      	movs	r1, #0
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f001 fbbf 	bl	8008bf4 <_ZN10IridiumSBD5powerEb>
   }

   return ret;
 8007476:	68fb      	ldr	r3, [r7, #12]
}
 8007478:	4618      	mov	r0, r3
 800747a:	3710      	adds	r7, #16
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <_ZN10IridiumSBD11sendSBDTextEPKc>:
   return ret;
}

// Transmit a text message
int IridiumSBD::sendSBDText(const char *message)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b086      	sub	sp, #24
 8007484:	af02      	add	r7, sp, #8
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
   if (this->reentrant)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8007490:	2b00      	cmp	r3, #0
 8007492:	d001      	beq.n	8007498 <_ZN10IridiumSBD11sendSBDTextEPKc+0x18>
      return ISBD_REENTRANT;
 8007494:	2309      	movs	r3, #9
 8007496:	e013      	b.n	80074c0 <_ZN10IridiumSBD11sendSBDTextEPKc+0x40>

   this->reentrant = true;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   int ret = internalSendReceiveSBD(message, NULL, 0, NULL, NULL);
 80074a0:	2300      	movs	r3, #0
 80074a2:	9301      	str	r3, [sp, #4]
 80074a4:	2300      	movs	r3, #0
 80074a6:	9300      	str	r3, [sp, #0]
 80074a8:	2300      	movs	r3, #0
 80074aa:	2200      	movs	r2, #0
 80074ac:	6839      	ldr	r1, [r7, #0]
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 fc80 	bl	8007db4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj>
 80074b4:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   return ret;
 80074be:	68fb      	ldr	r3, [r7, #12]
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3710      	adds	r7, #16
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <_ZN10IridiumSBD16getSignalQualityERi>:
   return ret;
}

// High-level wrapper for AT+CSQ
int IridiumSBD::getSignalQuality(int &quality)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
   if (this->reentrant)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d001      	beq.n	80074e0 <_ZN10IridiumSBD16getSignalQualityERi+0x18>
      return ISBD_REENTRANT;
 80074dc:	2309      	movs	r3, #9
 80074de:	e00d      	b.n	80074fc <_ZN10IridiumSBD16getSignalQualityERi+0x34>

   this->reentrant = true;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   int ret = internalGetSignalQuality(quality);
 80074e8:	6839      	ldr	r1, [r7, #0]
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 ff1e 	bl	800832c <_ZN10IridiumSBD24internalGetSignalQualityERi>
 80074f0:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   return ret;
 80074fa:	68fb      	ldr	r3, [r7, #12]
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3710      	adds	r7, #16
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <_ZN10IridiumSBD5sleepEv>:

// Gracefully put device to lower power mode (if sleep pin provided)
int IridiumSBD::sleep()
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
   if (this->reentrant)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8007512:	2b00      	cmp	r3, #0
 8007514:	d001      	beq.n	800751a <_ZN10IridiumSBD5sleepEv+0x16>
      return ISBD_REENTRANT;
 8007516:	2309      	movs	r3, #9
 8007518:	e025      	b.n	8007566 <_ZN10IridiumSBD5sleepEv+0x62>

   if (this->useSerial && (this->sleepPin == -1))
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	7c5b      	ldrb	r3, [r3, #17]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d006      	beq.n	8007530 <_ZN10IridiumSBD5sleepEv+0x2c>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800752a:	d101      	bne.n	8007530 <_ZN10IridiumSBD5sleepEv+0x2c>
      return ISBD_NO_SLEEP_PIN;
 800752c:	230b      	movs	r3, #11
 800752e:	e01a      	b.n	8007566 <_ZN10IridiumSBD5sleepEv+0x62>

   this->reentrant = true;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2201      	movs	r2, #1
 8007534:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   int ret = internalSleep();
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 ff7d 	bl	8008438 <_ZN10IridiumSBD13internalSleepEv>
 800753e:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

   if (ret == ISBD_SUCCESS)
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d10a      	bne.n	8007564 <_ZN10IridiumSBD5sleepEv+0x60>
   {
      if (this->useSerial)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	7c5b      	ldrb	r3, [r3, #17]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d002      	beq.n	800755c <_ZN10IridiumSBD5sleepEv+0x58>
         endSerialPort(); // Apollo3 v2.1 Serial fix
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f001 fbfa 	bl	8008d50 <_ZN10IridiumSBD13endSerialPortEv>
      power(false); // power off
 800755c:	2100      	movs	r1, #0
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f001 fb48 	bl	8008bf4 <_ZN10IridiumSBD5powerEb>
   }

   return ret;
 8007564:	68fb      	ldr	r3, [r7, #12]
}
 8007566:	4618      	mov	r0, r3
 8007568:	3710      	adds	r7, #16
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}

0800756e <_ZN10IridiumSBD15adjustATTimeoutEi>:
   }
}

// Tweak AT timeout
void IridiumSBD::adjustATTimeout(int seconds)
{
 800756e:	b480      	push	{r7}
 8007570:	b083      	sub	sp, #12
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
 8007576:	6039      	str	r1, [r7, #0]
   this->atTimeout = seconds;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	683a      	ldr	r2, [r7, #0]
 800757c:	661a      	str	r2, [r3, #96]	; 0x60
}
 800757e:	bf00      	nop
 8007580:	370c      	adds	r7, #12
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr

0800758a <_ZN10IridiumSBD16enableRingAlertsEb>:
{
   this->msstmWorkaroundRequested = useWorkAround;
}

void IridiumSBD::enableRingAlerts(bool enable) // true to enable SBDRING alerts and RING signal pin
{
 800758a:	b580      	push	{r7, lr}
 800758c:	b082      	sub	sp, #8
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
 8007592:	460b      	mov	r3, r1
 8007594:	70fb      	strb	r3, [r7, #3]
   this->ringAlertsEnabled = enable;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	78fa      	ldrb	r2, [r7, #3]
 800759a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
   if (enable)
 800759e:	78fb      	ldrb	r3, [r7, #3]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d00d      	beq.n	80075c0 <_ZN10IridiumSBD16enableRingAlertsEb+0x36>
   {
      this->ringAsserted = false;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
      if (!this->useSerial) // If we are using I2C, clear the ring indicator flag
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	7c5b      	ldrb	r3, [r3, #17]
 80075b0:	f083 0301 	eor.w	r3, r3, #1
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d002      	beq.n	80075c0 <_ZN10IridiumSBD16enableRingAlertsEb+0x36>
      {
        clearRingIndicator();
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 f9b2 	bl	8007924 <_ZN10IridiumSBD18clearRingIndicatorEv>
      }
   }
}
 80075c0:	bf00      	nop
 80075c2:	3708      	adds	r7, #8
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <_ZN10IridiumSBD13getSystemTimeER2tm>:

   return ret;
}

int IridiumSBD::getSystemTime(struct tm &tm)
{
 80075c8:	b5b0      	push	{r4, r5, r7, lr}
 80075ca:	b09c      	sub	sp, #112	; 0x70
 80075cc:	af02      	add	r7, sp, #8
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
   char msstmResponseBuf[24];

   send(F("AT-MSSTM\r"));
 80075d2:	2301      	movs	r3, #1
 80075d4:	2201      	movs	r2, #1
 80075d6:	493f      	ldr	r1, [pc, #252]	; (80076d4 <_ZN10IridiumSBD13getSystemTimeER2tm+0x10c>)
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f001 fbc7 	bl	8008d6c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(msstmResponseBuf, sizeof(msstmResponseBuf), "-MSSTM: "))
 80075de:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80075e2:	4b3d      	ldr	r3, [pc, #244]	; (80076d8 <_ZN10IridiumSBD13getSystemTimeER2tm+0x110>)
 80075e4:	9300      	str	r3, [sp, #0]
 80075e6:	4b3d      	ldr	r3, [pc, #244]	; (80076dc <_ZN10IridiumSBD13getSystemTimeER2tm+0x114>)
 80075e8:	2218      	movs	r2, #24
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 ff5c 	bl	80084a8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 80075f0:	4603      	mov	r3, r0
 80075f2:	f083 0301 	eor.w	r3, r3, #1
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d009      	beq.n	8007610 <_ZN10IridiumSBD13getSystemTimeER2tm+0x48>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f001 f811 	bl	8008624 <_ZN10IridiumSBD9cancelledEv>
 8007602:	4603      	mov	r3, r0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d001      	beq.n	800760c <_ZN10IridiumSBD13getSystemTimeER2tm+0x44>
 8007608:	2304      	movs	r3, #4
 800760a:	e05e      	b.n	80076ca <_ZN10IridiumSBD13getSystemTimeER2tm+0x102>
 800760c:	2303      	movs	r3, #3
 800760e:	e05c      	b.n	80076ca <_ZN10IridiumSBD13getSystemTimeER2tm+0x102>

   if (!isxdigit(msstmResponseBuf[0]))
 8007610:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8007614:	4618      	mov	r0, r3
 8007616:	f013 f8d5 	bl	801a7c4 <isxdigit>
 800761a:	4603      	mov	r3, r0
 800761c:	2b00      	cmp	r3, #0
 800761e:	d101      	bne.n	8007624 <_ZN10IridiumSBD13getSystemTimeER2tm+0x5c>
      return ISBD_NO_NETWORK;
 8007620:	230c      	movs	r3, #12
 8007622:	e052      	b.n	80076ca <_ZN10IridiumSBD13getSystemTimeER2tm+0x102>

   // Latest epoch began at May 11, 2014, at 14:23:55 UTC.
   struct tm epoch_start;
   epoch_start.tm_year = 2014 - 1900;
 8007624:	2372      	movs	r3, #114	; 0x72
 8007626:	62bb      	str	r3, [r7, #40]	; 0x28
   epoch_start.tm_mon = 5 - 1;
 8007628:	2304      	movs	r3, #4
 800762a:	627b      	str	r3, [r7, #36]	; 0x24
   epoch_start.tm_mday = 11;
 800762c:	230b      	movs	r3, #11
 800762e:	623b      	str	r3, [r7, #32]
   epoch_start.tm_hour = 14;
 8007630:	230e      	movs	r3, #14
 8007632:	61fb      	str	r3, [r7, #28]
   epoch_start.tm_min = 23;
 8007634:	2317      	movs	r3, #23
 8007636:	61bb      	str	r3, [r7, #24]
   epoch_start.tm_sec = 55;
 8007638:	2337      	movs	r3, #55	; 0x37
 800763a:	617b      	str	r3, [r7, #20]

   unsigned long ticks_since_epoch = strtoul(msstmResponseBuf, NULL, 16);
 800763c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007640:	2210      	movs	r2, #16
 8007642:	2100      	movs	r1, #0
 8007644:	4618      	mov	r0, r3
 8007646:	f015 fd61 	bl	801d10c <strtoul>
 800764a:	6678      	str	r0, [r7, #100]	; 0x64
      seconds less than the equivalent ticks_since_epoch. Subtract that away and
      we'll be left with a small number that won't overflow when we scale by 90/1000.

      Many thanks to Scott Weldon for this suggestion.
   */
   unsigned long secs_since_epoch = (ticks_since_epoch / 1000) * 90;
 800764c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800764e:	4a24      	ldr	r2, [pc, #144]	; (80076e0 <_ZN10IridiumSBD13getSystemTimeER2tm+0x118>)
 8007650:	fba2 2303 	umull	r2, r3, r2, r3
 8007654:	099b      	lsrs	r3, r3, #6
 8007656:	225a      	movs	r2, #90	; 0x5a
 8007658:	fb02 f303 	mul.w	r3, r2, r3
 800765c:	663b      	str	r3, [r7, #96]	; 0x60
   unsigned long small_ticks = ticks_since_epoch - (secs_since_epoch / 90) * 1000;
 800765e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007660:	085b      	lsrs	r3, r3, #1
 8007662:	4a20      	ldr	r2, [pc, #128]	; (80076e4 <_ZN10IridiumSBD13getSystemTimeER2tm+0x11c>)
 8007664:	fba2 2303 	umull	r2, r3, r2, r3
 8007668:	095b      	lsrs	r3, r3, #5
 800766a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800766e:	fb02 f303 	mul.w	r3, r2, r3
 8007672:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	65fb      	str	r3, [r7, #92]	; 0x5c
   secs_since_epoch += small_ticks * 90 / 1000;
 8007678:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800767a:	225a      	movs	r2, #90	; 0x5a
 800767c:	fb02 f303 	mul.w	r3, r2, r3
 8007680:	4a17      	ldr	r2, [pc, #92]	; (80076e0 <_ZN10IridiumSBD13getSystemTimeER2tm+0x118>)
 8007682:	fba2 2303 	umull	r2, r3, r2, r3
 8007686:	099b      	lsrs	r3, r3, #6
 8007688:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800768a:	4413      	add	r3, r2
 800768c:	663b      	str	r3, [r7, #96]	; 0x60

   time_t epoch_time = mktime(&epoch_start);
 800768e:	f107 0314 	add.w	r3, r7, #20
 8007692:	4618      	mov	r0, r3
 8007694:	f013 fad0 	bl	801ac38 <mktime>
 8007698:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
   time_t now = epoch_time + secs_since_epoch;
 800769c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800769e:	4618      	mov	r0, r3
 80076a0:	f04f 0100 	mov.w	r1, #0
 80076a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80076a8:	1884      	adds	r4, r0, r2
 80076aa:	eb41 0503 	adc.w	r5, r1, r3
 80076ae:	e9c7 4502 	strd	r4, r5, [r7, #8]
   memcpy(&tm, localtime(&now), sizeof tm);
 80076b2:	f107 0308 	add.w	r3, r7, #8
 80076b6:	4618      	mov	r0, r3
 80076b8:	f013 f88c 	bl	801a7d4 <localtime>
 80076bc:	4603      	mov	r3, r0
 80076be:	2224      	movs	r2, #36	; 0x24
 80076c0:	4619      	mov	r1, r3
 80076c2:	6838      	ldr	r0, [r7, #0]
 80076c4:	f013 f9b0 	bl	801aa28 <memcpy>
   return ISBD_SUCCESS;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3768      	adds	r7, #104	; 0x68
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bdb0      	pop	{r4, r5, r7, pc}
 80076d2:	bf00      	nop
 80076d4:	080218c0 	.word	0x080218c0
 80076d8:	080218d8 	.word	0x080218d8
 80076dc:	080218cc 	.word	0x080218cc
 80076e0:	10624dd3 	.word	0x10624dd3
 80076e4:	b60b60b7 	.word	0xb60b60b7

080076e8 <_ZN10IridiumSBD18getFirmwareVersionEPcj>:

int IridiumSBD::getFirmwareVersion(char *version, size_t bufferSize)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b086      	sub	sp, #24
 80076ec:	af02      	add	r7, sp, #8
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	607a      	str	r2, [r7, #4]
   if (bufferSize < 8)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2b07      	cmp	r3, #7
 80076f8:	d801      	bhi.n	80076fe <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x16>
      return ISBD_RX_OVERFLOW;
 80076fa:	2308      	movs	r3, #8
 80076fc:	e01e      	b.n	800773c <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>

   send(F("AT+CGMR\r"));
 80076fe:	2301      	movs	r3, #1
 8007700:	2201      	movs	r2, #1
 8007702:	4910      	ldr	r1, [pc, #64]	; (8007744 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x5c>)
 8007704:	68f8      	ldr	r0, [r7, #12]
 8007706:	f001 fb31 	bl	8008d6c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(version, bufferSize, "Call Processor Version: "))
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	4b0e      	ldr	r3, [pc, #56]	; (8007748 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x60>)
 800770e:	9300      	str	r3, [sp, #0]
 8007710:	4b0e      	ldr	r3, [pc, #56]	; (800774c <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x64>)
 8007712:	68b9      	ldr	r1, [r7, #8]
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f000 fec7 	bl	80084a8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 800771a:	4603      	mov	r3, r0
 800771c:	f083 0301 	eor.w	r3, r3, #1
 8007720:	b2db      	uxtb	r3, r3
 8007722:	2b00      	cmp	r3, #0
 8007724:	d009      	beq.n	800773a <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x52>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	f000 ff7c 	bl	8008624 <_ZN10IridiumSBD9cancelledEv>
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d001      	beq.n	8007736 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x4e>
 8007732:	2304      	movs	r3, #4
 8007734:	e002      	b.n	800773c <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>
 8007736:	2303      	movs	r3, #3
 8007738:	e000      	b.n	800773c <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>

   return ISBD_SUCCESS;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	3710      	adds	r7, #16
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}
 8007744:	080218e0 	.word	0x080218e0
 8007748:	080218d8 	.word	0x080218d8
 800774c:	080218ec 	.word	0x080218ec

08007750 <_ZN10IridiumSBD21enableSuperCapChargerEb>:

void IridiumSBD::enableSuperCapCharger(bool enable)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b082      	sub	sp, #8
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	460b      	mov	r3, r1
 800775a:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the charger manually)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	7c5b      	ldrb	r3, [r3, #17]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d004      	beq.n	800776e <_ZN10IridiumSBD21enableSuperCapChargerEb+0x1e>
  {
    diagprint(F("enableSuperCapCharger is only valid when using I2C on the Qwiic Iridium\r\n"));
 8007764:	4918      	ldr	r1, [pc, #96]	; (80077c8 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x78>)
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f001 fc7e 	bl	8009068 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 800776c:	e028      	b.n	80077c0 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x70>
  }

  // Enable/disable the supercapacitor charger by pulling its SHDN pin high/low
  check9603pins(); // Update IO_REGISTER
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f001 ff6b 	bl	800964a <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8007774:	78fb      	ldrb	r3, [r7, #3]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d00b      	beq.n	8007792 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x42>
  {
    IO_REGISTER |= IO_SHDN; // Set the SHDN bit
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007786:	4313      	orrs	r3, r2
 8007788:	b2da      	uxtb	r2, r3
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8007790:	e00f      	b.n	80077b2 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x62>
  }
  else
  {
    IO_REGISTER &= ~IO_SHDN; // Clear the SHDN bit
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8007798:	b25a      	sxtb	r2, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80077a0:	b25b      	sxtb	r3, r3
 80077a2:	43db      	mvns	r3, r3
 80077a4:	b25b      	sxtb	r3, r3
 80077a6:	4013      	ands	r3, r2
 80077a8:	b25b      	sxtb	r3, r3
 80077aa:	b2da      	uxtb	r2, r3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  }
  set9603pins(IO_REGISTER); // Update the pins
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80077b8:	4619      	mov	r1, r3
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f001 ff7e 	bl	80096bc <_ZN10IridiumSBD11set9603pinsEh>
}
 80077c0:	3708      	adds	r7, #8
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop
 80077c8:	08021908 	.word	0x08021908

080077cc <_ZN10IridiumSBD20checkSuperCapChargerEv>:

bool IridiumSBD::checkSuperCapCharger()
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b082      	sub	sp, #8
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial (the user will have to check PGOOD manually)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	7c5b      	ldrb	r3, [r3, #17]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d005      	beq.n	80077e8 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x1c>
  {
    diagprint(F("checkSuperCapCharger is only valid when using I2C on the Qwiic Iridium\r\n"));
 80077dc:	4912      	ldr	r1, [pc, #72]	; (8007828 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x5c>)
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f001 fc42 	bl	8009068 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return(false);
 80077e4:	2300      	movs	r3, #0
 80077e6:	e01a      	b.n	800781e <_ZN10IridiumSBD20checkSuperCapChargerEv+0x52>
  }

  // Check the status of the supercapacitor charger PGOOD pin
  check9603pins(); // Update IO_REGISTER
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f001 ff2e 	bl	800964a <_ZN10IridiumSBD13check9603pinsEv>
  if (IO_REGISTER &= IO_PGOOD) // If the PGOOD bit is set, return true
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 80077fa:	4013      	ands	r3, r2
 80077fc:	b2da      	uxtb	r2, r3
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800780a:	2b00      	cmp	r3, #0
 800780c:	bf14      	ite	ne
 800780e:	2301      	movne	r3, #1
 8007810:	2300      	moveq	r3, #0
 8007812:	b2db      	uxtb	r3, r3
 8007814:	2b00      	cmp	r3, #0
 8007816:	d001      	beq.n	800781c <_ZN10IridiumSBD20checkSuperCapChargerEv+0x50>
  {
    return(true);
 8007818:	2301      	movs	r3, #1
 800781a:	e000      	b.n	800781e <_ZN10IridiumSBD20checkSuperCapChargerEv+0x52>
  }
  else
  {
    return(false);
 800781c:	2300      	movs	r3, #0
  }
}
 800781e:	4618      	mov	r0, r3
 8007820:	3708      	adds	r7, #8
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop
 8007828:	08021954 	.word	0x08021954

0800782c <_ZN10IridiumSBD16enable9603NpowerEb>:

void IridiumSBD::enable9603Npower(bool enable)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	460b      	mov	r3, r1
 8007836:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N power manually)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	7c5b      	ldrb	r3, [r3, #17]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d004      	beq.n	800784a <_ZN10IridiumSBD16enable9603NpowerEb+0x1e>
  {
    diagprint(F("enable9603Npower is only valid when using I2C on the Qwiic Iridium\r\n"));
 8007840:	4918      	ldr	r1, [pc, #96]	; (80078a4 <_ZN10IridiumSBD16enable9603NpowerEb+0x78>)
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f001 fc10 	bl	8009068 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8007848:	e028      	b.n	800789c <_ZN10IridiumSBD16enable9603NpowerEb+0x70>
  }

  // Enable/disable power to the 9603N by pulling PWR_EN high/low
  check9603pins(); // Update IO_REGISTER
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f001 fefd 	bl	800964a <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8007850:	78fb      	ldrb	r3, [r7, #3]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00b      	beq.n	800786e <_ZN10IridiumSBD16enable9603NpowerEb+0x42>
  {
    IO_REGISTER |= IO_PWR_EN; // Set the PWR_EN bit
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8007862:	4313      	orrs	r3, r2
 8007864:	b2da      	uxtb	r2, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 800786c:	e00f      	b.n	800788e <_ZN10IridiumSBD16enable9603NpowerEb+0x62>
  }
  else
  {
    IO_REGISTER &= ~IO_PWR_EN; // Clear the PWR_EN bit
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8007874:	b25a      	sxtb	r2, r3
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800787c:	b25b      	sxtb	r3, r3
 800787e:	43db      	mvns	r3, r3
 8007880:	b25b      	sxtb	r3, r3
 8007882:	4013      	ands	r3, r2
 8007884:	b25b      	sxtb	r3, r3
 8007886:	b2da      	uxtb	r2, r3
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  }
  set9603pins(IO_REGISTER); // Update the pins
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8007894:	4619      	mov	r1, r3
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f001 ff10 	bl	80096bc <_ZN10IridiumSBD11set9603pinsEh>
}
 800789c:	3708      	adds	r7, #8
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop
 80078a4:	080219a0 	.word	0x080219a0

080078a8 <_ZN10IridiumSBD10enable9603Eb>:

void IridiumSBD::enable9603(bool enable)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	460b      	mov	r3, r1
 80078b2:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N manually)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	7c5b      	ldrb	r3, [r3, #17]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d004      	beq.n	80078c6 <_ZN10IridiumSBD10enable9603Eb+0x1e>
  {
    diagprint(F("enable9603 is only valid when using I2C on the Qwiic Iridium\r\n"));
 80078bc:	4918      	ldr	r1, [pc, #96]	; (8007920 <_ZN10IridiumSBD10enable9603Eb+0x78>)
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f001 fbd2 	bl	8009068 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 80078c4:	e028      	b.n	8007918 <_ZN10IridiumSBD10enable9603Eb+0x70>
  }

  // Enable/disable the 9603 by pulling ON_OFF high/low
  check9603pins(); // Update IO_REGISTER
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f001 febf 	bl	800964a <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 80078cc:	78fb      	ldrb	r3, [r7, #3]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00b      	beq.n	80078ea <_ZN10IridiumSBD10enable9603Eb+0x42>
  {
    IO_REGISTER |= IO_ON_OFF; // Set the ON_OFF bit
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 80078de:	4313      	orrs	r3, r2
 80078e0:	b2da      	uxtb	r2, r3
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 80078e8:	e00f      	b.n	800790a <_ZN10IridiumSBD10enable9603Eb+0x62>
  }
  else
  {
    IO_REGISTER &= ~IO_ON_OFF; // Clear the ON_OFF bit
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80078f0:	b25a      	sxtb	r2, r3
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 80078f8:	b25b      	sxtb	r3, r3
 80078fa:	43db      	mvns	r3, r3
 80078fc:	b25b      	sxtb	r3, r3
 80078fe:	4013      	ands	r3, r2
 8007900:	b25b      	sxtb	r3, r3
 8007902:	b2da      	uxtb	r2, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  }
  set9603pins(IO_REGISTER); // Update the pins
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8007910:	4619      	mov	r1, r3
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f001 fed2 	bl	80096bc <_ZN10IridiumSBD11set9603pinsEh>
}
 8007918:	3708      	adds	r7, #8
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
 800791e:	bf00      	nop
 8007920:	080219e8 	.word	0x080219e8

08007924 <_ZN10IridiumSBD18clearRingIndicatorEv>:
    return(false);
  }
}

void IridiumSBD::clearRingIndicator()
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b082      	sub	sp, #8
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	7c5b      	ldrb	r3, [r3, #17]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d004      	beq.n	800793e <_ZN10IridiumSBD18clearRingIndicatorEv+0x1a>
  {
    diagprint(F("clearRingIndicator is only valid when using I2C on the Qwiic Iridium\r\n"));
 8007934:	4912      	ldr	r1, [pc, #72]	; (8007980 <_ZN10IridiumSBD18clearRingIndicatorEv+0x5c>)
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f001 fb96 	bl	8009068 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 800793c:	e01d      	b.n	800797a <_ZN10IridiumSBD18clearRingIndicatorEv+0x56>
  }

  // Clear the 9603 RI flag
  check9603pins(); // Update IO_REGISTER
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f001 fe83 	bl	800964a <_ZN10IridiumSBD13check9603pinsEv>
  IO_REGISTER &= ~IO_RI; // Clear the RI bit
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800794a:	b25a      	sxtb	r2, r3
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007952:	b25b      	sxtb	r3, r3
 8007954:	43db      	mvns	r3, r3
 8007956:	b25b      	sxtb	r3, r3
 8007958:	4013      	ands	r3, r2
 800795a:	b25b      	sxtb	r3, r3
 800795c:	b2da      	uxtb	r2, r3
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  set9603pins(IO_REGISTER); // Update the pins
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800796a:	4619      	mov	r1, r3
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f001 fea5 	bl	80096bc <_ZN10IridiumSBD11set9603pinsEh>
  this->ringAsserted = false; // Also clear the ringAsserted flag
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
}
 800797a:	3708      	adds	r7, #8
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}
 8007980:	08021ab8 	.word	0x08021ab8

08007984 <_ZN10IridiumSBD21checkNetworkAvailableEv>:

bool IridiumSBD::checkNetworkAvailable()
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b082      	sub	sp, #8
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	7c5b      	ldrb	r3, [r3, #17]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d005      	beq.n	80079a0 <_ZN10IridiumSBD21checkNetworkAvailableEv+0x1c>
  {
    diagprint(F("checkNetworkAvailable is only valid when using I2C on the Qwiic Iridium\r\n"));
 8007994:	4912      	ldr	r1, [pc, #72]	; (80079e0 <_ZN10IridiumSBD21checkNetworkAvailableEv+0x5c>)
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f001 fb66 	bl	8009068 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return(false);
 800799c:	2300      	movs	r3, #0
 800799e:	e01a      	b.n	80079d6 <_ZN10IridiumSBD21checkNetworkAvailableEv+0x52>
  }

  // Check the status of the 9603 Network Available pin
  check9603pins(); // Update IO_REGISTER
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f001 fe52 	bl	800964a <_ZN10IridiumSBD13check9603pinsEv>
  if (IO_REGISTER &= IO_NA) // If the NA bit is set, return true
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80079b2:	4013      	ands	r3, r2
 80079b4:	b2da      	uxtb	r2, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	bf14      	ite	ne
 80079c6:	2301      	movne	r3, #1
 80079c8:	2300      	moveq	r3, #0
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d001      	beq.n	80079d4 <_ZN10IridiumSBD21checkNetworkAvailableEv+0x50>
  {
    return(true);
 80079d0:	2301      	movs	r3, #1
 80079d2:	e000      	b.n	80079d6 <_ZN10IridiumSBD21checkNetworkAvailableEv+0x52>
  }
  else
  {
    return(false);
 80079d4:	2300      	movs	r3, #0
  }
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3708      	adds	r7, #8
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
 80079de:	bf00      	nop
 80079e0:	08021b00 	.word	0x08021b00

080079e4 <_ZN10IridiumSBD12clearBuffersEi>:

// High-level wrapper for AT+SBDD
int IridiumSBD::clearBuffers(int buffers)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
   if (this->reentrant)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d001      	beq.n	80079fc <_ZN10IridiumSBD12clearBuffersEi+0x18>
      return ISBD_REENTRANT;
 80079f8:	2309      	movs	r3, #9
 80079fa:	e00d      	b.n	8007a18 <_ZN10IridiumSBD12clearBuffersEi+0x34>

   this->reentrant = true;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2201      	movs	r2, #1
 8007a00:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   int ret = internalClearBuffers(buffers);
 8007a04:	6839      	ldr	r1, [r7, #0]
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f001 fee2 	bl	80097d0 <_ZN10IridiumSBD20internalClearBuffersEi>
 8007a0c:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2200      	movs	r2, #0
 8007a12:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   return ret;
 8007a16:	68fb      	ldr	r3, [r7, #12]
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3710      	adds	r7, #16
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <_ZN10IridiumSBD7getIMEIEPcj>:

// High-level wrapper for AT+CGSN
int IridiumSBD::getIMEI(char *IMEI, size_t bufferSize)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b086      	sub	sp, #24
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	60b9      	str	r1, [r7, #8]
 8007a2a:	607a      	str	r2, [r7, #4]
   if (this->reentrant)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d001      	beq.n	8007a3a <_ZN10IridiumSBD7getIMEIEPcj+0x1a>
      return ISBD_REENTRANT;
 8007a36:	2309      	movs	r3, #9
 8007a38:	e00e      	b.n	8007a58 <_ZN10IridiumSBD7getIMEIEPcj+0x38>

   this->reentrant = true;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   int ret = internalGetIMEI(IMEI, bufferSize);
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	68b9      	ldr	r1, [r7, #8]
 8007a46:	68f8      	ldr	r0, [r7, #12]
 8007a48:	f001 ff0e 	bl	8009868 <_ZN10IridiumSBD15internalGetIMEIEPcj>
 8007a4c:	6178      	str	r0, [r7, #20]
   this->reentrant = false;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2200      	movs	r2, #0
 8007a52:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   return ret;
 8007a56:	697b      	ldr	r3, [r7, #20]
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3718      	adds	r7, #24
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <_ZN10IridiumSBD11isConnectedEv>:

//Returns true if the I2C device is connected
//Always returns true for serial
//boolean IridiumSBD::isConnected() TODO
bool IridiumSBD::isConnected()
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
   if (this->useSerial) // If we are using Serial
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	7c5b      	ldrb	r3, [r3, #17]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d001      	beq.n	8007a74 <_ZN10IridiumSBD11isConnectedEv+0x14>
   {
		return true;
 8007a70:	2301      	movs	r3, #1
 8007a72:	e012      	b.n	8007a9a <_ZN10IridiumSBD11isConnectedEv+0x3a>
   }
   else
   {
		wireport->beginTransmission((uint8_t)deviceaddress);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	68da      	ldr	r2, [r3, #12]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	7c1b      	ldrb	r3, [r3, #16]
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	4610      	mov	r0, r2
 8007a80:	f002 fd8e 	bl	800a5a0 <_ZN7TwoWire17beginTransmissionEh>
		return (wireport->endTransmission() == 0); // Check that the device ack's
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f002 fdd3 	bl	800a634 <_ZN7TwoWire15endTransmissionEv>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	bf0c      	ite	eq
 8007a94:	2301      	moveq	r3, #1
 8007a96:	2300      	movne	r3, #0
 8007a98:	b2db      	uxtb	r3, r3
   }
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3708      	adds	r7, #8
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
	...

08007aa4 <_ZN10IridiumSBD13internalBeginEv>:
/*
Private interface
*/

int IridiumSBD::internalBegin()
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b090      	sub	sp, #64	; 0x40
 8007aa8:	af02      	add	r7, sp, #8
 8007aaa:	6078      	str	r0, [r7, #4]
   diagprint(F("Calling internalBegin\r\n"));
 8007aac:	49b0      	ldr	r1, [pc, #704]	; (8007d70 <_ZN10IridiumSBD13internalBeginEv+0x2cc>)
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f001 fada 	bl	8009068 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (!this->asleep)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8007aba:	f083 0301 	eor.w	r3, r3, #1
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d001      	beq.n	8007ac8 <_ZN10IridiumSBD13internalBeginEv+0x24>
      return ISBD_ALREADY_AWAKE;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	e14f      	b.n	8007d68 <_ZN10IridiumSBD13internalBeginEv+0x2c4>

   if (!this->useSerial) // If we are using I2C
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	7c5b      	ldrb	r3, [r3, #17]
 8007acc:	f083 0301 	eor.w	r3, r3, #1
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d005      	beq.n	8007ae2 <_ZN10IridiumSBD13internalBeginEv+0x3e>
   {
      check9603pins(); // Update IO_REGISTER with the status of the 9603 pins
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f001 fdb7 	bl	800964a <_ZN10IridiumSBD13check9603pinsEv>
      check9603data(); // Get any waiting 9603 serial data
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f001 fce3 	bl	80094a8 <_ZN10IridiumSBD13check9603dataEv>
   }

   power(true); // power on
 8007ae2:	2101      	movs	r1, #1
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f001 f885 	bl	8008bf4 <_ZN10IridiumSBD5powerEb>

   bool modemAlive = false;
 8007aea:	2300      	movs	r3, #0
 8007aec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

   unsigned long startupTime = 500; //ms
 8007af0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007af4:	62fb      	str	r3, [r7, #44]	; 0x2c
   for (unsigned long start = millis(); millis() - start < startupTime;)
 8007af6:	f004 fcfb 	bl	800c4f0 <HAL_GetTick>
 8007afa:	62b8      	str	r0, [r7, #40]	; 0x28
 8007afc:	f004 fcf8 	bl	800c4f0 <HAL_GetTick>
 8007b00:	4602      	mov	r2, r0
 8007b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b04:	1ad3      	subs	r3, r2, r3
 8007b06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	bf8c      	ite	hi
 8007b0c:	2301      	movhi	r3, #1
 8007b0e:	2300      	movls	r3, #0
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d007      	beq.n	8007b26 <_ZN10IridiumSBD13internalBeginEv+0x82>
      if (cancelled())
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 fd84 	bl	8008624 <_ZN10IridiumSBD9cancelledEv>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d0ec      	beq.n	8007afc <_ZN10IridiumSBD13internalBeginEv+0x58>
         return ISBD_CANCELLED;
 8007b22:	2304      	movs	r3, #4
 8007b24:	e120      	b.n	8007d68 <_ZN10IridiumSBD13internalBeginEv+0x2c4>

   if (this->useSerial) // If we are using Serial
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	7c5b      	ldrb	r3, [r3, #17]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d002      	beq.n	8007b34 <_ZN10IridiumSBD13internalBeginEv+0x90>
      beginSerialPort(); // Apollo3 v2.1 Serial fix - begin the Serial port 500ms after power(true)
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f001 f900 	bl	8008d34 <_ZN10IridiumSBD15beginSerialPortEv>

   // Turn on modem and wait for a response from "AT" command to begin
   for (unsigned long start = millis(); !modemAlive && millis() - start < 1000UL * this->startupTimeout;)
 8007b34:	f004 fcdc 	bl	800c4f0 <HAL_GetTick>
 8007b38:	6278      	str	r0, [r7, #36]	; 0x24
 8007b3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007b3e:	f083 0301 	eor.w	r3, r3, #1
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d00f      	beq.n	8007b68 <_ZN10IridiumSBD13internalBeginEv+0xc4>
 8007b48:	f004 fcd2 	bl	800c4f0 <HAL_GetTick>
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b50:	1ad2      	subs	r2, r2, r3
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b56:	4619      	mov	r1, r3
 8007b58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007b5c:	fb03 f301 	mul.w	r3, r3, r1
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d201      	bcs.n	8007b68 <_ZN10IridiumSBD13internalBeginEv+0xc4>
 8007b64:	2301      	movs	r3, #1
 8007b66:	e000      	b.n	8007b6a <_ZN10IridiumSBD13internalBeginEv+0xc6>
 8007b68:	2300      	movs	r3, #0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d018      	beq.n	8007ba0 <_ZN10IridiumSBD13internalBeginEv+0xfc>
   {
      send(F("AT\r"));
 8007b6e:	2301      	movs	r3, #1
 8007b70:	2201      	movs	r2, #1
 8007b72:	4980      	ldr	r1, [pc, #512]	; (8007d74 <_ZN10IridiumSBD13internalBeginEv+0x2d0>)
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f001 f8f9 	bl	8008d6c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
      modemAlive = waitForATResponse();
 8007b7a:	4b7f      	ldr	r3, [pc, #508]	; (8007d78 <_ZN10IridiumSBD13internalBeginEv+0x2d4>)
 8007b7c:	9300      	str	r3, [sp, #0]
 8007b7e:	2300      	movs	r3, #0
 8007b80:	2200      	movs	r2, #0
 8007b82:	2100      	movs	r1, #0
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 fc8f 	bl	80084a8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (cancelled())
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 fd47 	bl	8008624 <_ZN10IridiumSBD9cancelledEv>
 8007b96:	4603      	mov	r3, r0
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d0ce      	beq.n	8007b3a <_ZN10IridiumSBD13internalBeginEv+0x96>
         return ISBD_CANCELLED;
 8007b9c:	2304      	movs	r3, #4
 8007b9e:	e0e3      	b.n	8007d68 <_ZN10IridiumSBD13internalBeginEv+0x2c4>
   }

   if (!modemAlive)
 8007ba0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007ba4:	f083 0301 	eor.w	r3, r3, #1
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d005      	beq.n	8007bba <_ZN10IridiumSBD13internalBeginEv+0x116>
   {
      diagprint(F("No modem detected.\r\n"));
 8007bae:	4973      	ldr	r1, [pc, #460]	; (8007d7c <_ZN10IridiumSBD13internalBeginEv+0x2d8>)
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f001 fa59 	bl	8009068 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      return ISBD_NO_MODEM_DETECTED;
 8007bb6:	2305      	movs	r3, #5
 8007bb8:	e0d6      	b.n	8007d68 <_ZN10IridiumSBD13internalBeginEv+0x2c4>
   }

   // The usual initialization sequence
   const char *strings[3] = { "ATE1\r", "AT&D0\r", "AT&K0\r" };
 8007bba:	4a71      	ldr	r2, [pc, #452]	; (8007d80 <_ZN10IridiumSBD13internalBeginEv+0x2dc>)
 8007bbc:	f107 0310 	add.w	r3, r7, #16
 8007bc0:	ca07      	ldmia	r2, {r0, r1, r2}
 8007bc2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   for (int i=0; i<3; ++i)
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	633b      	str	r3, [r7, #48]	; 0x30
 8007bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bcc:	2b02      	cmp	r3, #2
 8007bce:	dc26      	bgt.n	8007c1e <_ZN10IridiumSBD13internalBeginEv+0x17a>
   {
      send(strings[i]);
 8007bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8007bd8:	4413      	add	r3, r2
 8007bda:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8007bde:	4619      	mov	r1, r3
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f001 f91f 	bl	8008e24 <_ZN10IridiumSBD4sendEPKc>
      if (!waitForATResponse())
 8007be6:	4b64      	ldr	r3, [pc, #400]	; (8007d78 <_ZN10IridiumSBD13internalBeginEv+0x2d4>)
 8007be8:	9300      	str	r3, [sp, #0]
 8007bea:	2300      	movs	r3, #0
 8007bec:	2200      	movs	r2, #0
 8007bee:	2100      	movs	r1, #0
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 fc59 	bl	80084a8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	f083 0301 	eor.w	r3, r3, #1
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d009      	beq.n	8007c16 <_ZN10IridiumSBD13internalBeginEv+0x172>
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 fd0e 	bl	8008624 <_ZN10IridiumSBD9cancelledEv>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d001      	beq.n	8007c12 <_ZN10IridiumSBD13internalBeginEv+0x16e>
 8007c0e:	2304      	movs	r3, #4
 8007c10:	e0aa      	b.n	8007d68 <_ZN10IridiumSBD13internalBeginEv+0x2c4>
 8007c12:	2303      	movs	r3, #3
 8007c14:	e0a8      	b.n	8007d68 <_ZN10IridiumSBD13internalBeginEv+0x2c4>
   for (int i=0; i<3; ++i)
 8007c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c18:	3301      	adds	r3, #1
 8007c1a:	633b      	str	r3, [r7, #48]	; 0x30
 8007c1c:	e7d5      	b.n	8007bca <_ZN10IridiumSBD13internalBeginEv+0x126>
   }

   // Enable or disable RING alerts as requested by user
   // By default they are on if a RING pin was supplied on constructor
   diagprint(F("Ring alerts are")); diagprint(ringAlertsEnabled ? F("") : F(" NOT")); diagprint(F(" enabled.\r\n"));
 8007c1e:	4959      	ldr	r1, [pc, #356]	; (8007d84 <_ZN10IridiumSBD13internalBeginEv+0x2e0>)
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f001 fa21 	bl	8009068 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d001      	beq.n	8007c34 <_ZN10IridiumSBD13internalBeginEv+0x190>
 8007c30:	4b55      	ldr	r3, [pc, #340]	; (8007d88 <_ZN10IridiumSBD13internalBeginEv+0x2e4>)
 8007c32:	e000      	b.n	8007c36 <_ZN10IridiumSBD13internalBeginEv+0x192>
 8007c34:	4b55      	ldr	r3, [pc, #340]	; (8007d8c <_ZN10IridiumSBD13internalBeginEv+0x2e8>)
 8007c36:	4619      	mov	r1, r3
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f001 fa15 	bl	8009068 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8007c3e:	4954      	ldr	r1, [pc, #336]	; (8007d90 <_ZN10IridiumSBD13internalBeginEv+0x2ec>)
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f001 fa11 	bl	8009068 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (ringAlertsEnabled) enableRingAlerts(true); // This will clear ringAsserted and the Ring Indicator flag
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d004      	beq.n	8007c5a <_ZN10IridiumSBD13internalBeginEv+0x1b6>
 8007c50:	2101      	movs	r1, #1
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f7ff fc99 	bl	800758a <_ZN10IridiumSBD16enableRingAlertsEb>
 8007c58:	e009      	b.n	8007c6e <_ZN10IridiumSBD13internalBeginEv+0x1ca>
   else {
	   if (!this->useSerial) clearRingIndicator(); // If ring alerts are not enabled and using I2C, make sure the Ring Indicator flag is clear
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	7c5b      	ldrb	r3, [r3, #17]
 8007c5e:	f083 0301 	eor.w	r3, r3, #1
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d002      	beq.n	8007c6e <_ZN10IridiumSBD13internalBeginEv+0x1ca>
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f7ff fe5b 	bl	8007924 <_ZN10IridiumSBD18clearRingIndicatorEv>
   }

   send(ringAlertsEnabled ? F("AT+SBDMTA=1\r") : F("AT+SBDMTA=0\r"));
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d001      	beq.n	8007c7c <_ZN10IridiumSBD13internalBeginEv+0x1d8>
 8007c78:	4946      	ldr	r1, [pc, #280]	; (8007d94 <_ZN10IridiumSBD13internalBeginEv+0x2f0>)
 8007c7a:	e000      	b.n	8007c7e <_ZN10IridiumSBD13internalBeginEv+0x1da>
 8007c7c:	4946      	ldr	r1, [pc, #280]	; (8007d98 <_ZN10IridiumSBD13internalBeginEv+0x2f4>)
 8007c7e:	2301      	movs	r3, #1
 8007c80:	2201      	movs	r2, #1
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f001 f872 	bl	8008d6c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   HAL_Delay(10); //TODO Added
 8007c88:	200a      	movs	r0, #10
 8007c8a:	f004 fc3d 	bl	800c508 <HAL_Delay>
   if (!waitForATResponse())
 8007c8e:	4b3a      	ldr	r3, [pc, #232]	; (8007d78 <_ZN10IridiumSBD13internalBeginEv+0x2d4>)
 8007c90:	9300      	str	r3, [sp, #0]
 8007c92:	2300      	movs	r3, #0
 8007c94:	2200      	movs	r2, #0
 8007c96:	2100      	movs	r1, #0
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 fc05 	bl	80084a8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	f083 0301 	eor.w	r3, r3, #1
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d009      	beq.n	8007cbe <_ZN10IridiumSBD13internalBeginEv+0x21a>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 fcba 	bl	8008624 <_ZN10IridiumSBD9cancelledEv>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d001      	beq.n	8007cba <_ZN10IridiumSBD13internalBeginEv+0x216>
 8007cb6:	2304      	movs	r3, #4
 8007cb8:	e056      	b.n	8007d68 <_ZN10IridiumSBD13internalBeginEv+0x2c4>
 8007cba:	2303      	movs	r3, #3
 8007cbc:	e054      	b.n	8007d68 <_ZN10IridiumSBD13internalBeginEv+0x2c4>

   // Decide whether the internal MSSTM workaround should be enforced on TX/RX
   // By default it is unless the firmware rev is >= TA13001
   char version[8];
   int ret = getFirmwareVersion(version, sizeof(version));
 8007cbe:	f107 0308 	add.w	r3, r7, #8
 8007cc2:	2208      	movs	r2, #8
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f7ff fd0e 	bl	80076e8 <_ZN10IridiumSBD18getFirmwareVersionEPcj>
 8007ccc:	6238      	str	r0, [r7, #32]
   if (ret != ISBD_SUCCESS)
 8007cce:	6a3b      	ldr	r3, [r7, #32]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d008      	beq.n	8007ce6 <_ZN10IridiumSBD13internalBeginEv+0x242>
   {
      diagprint(F("Unknown FW version\r\n"));
 8007cd4:	4931      	ldr	r1, [pc, #196]	; (8007d9c <_ZN10IridiumSBD13internalBeginEv+0x2f8>)
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f001 f9c6 	bl	8009068 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      msstmWorkaroundRequested = true;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8007ce4:	e027      	b.n	8007d36 <_ZN10IridiumSBD13internalBeginEv+0x292>
   }
   else
   {
      diagprint(F("Firmware version is ")); diagprint(version); diagprint(F("\r\n"));
 8007ce6:	492e      	ldr	r1, [pc, #184]	; (8007da0 <_ZN10IridiumSBD13internalBeginEv+0x2fc>)
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f001 f9bd 	bl	8009068 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8007cee:	f107 0308 	add.w	r3, r7, #8
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f001 f9d5 	bl	80090a4 <_ZN10IridiumSBD9diagprintEPKc>
 8007cfa:	492a      	ldr	r1, [pc, #168]	; (8007da4 <_ZN10IridiumSBD13internalBeginEv+0x300>)
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f001 f9b3 	bl	8009068 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (version[0] == 'T' && version[1] == 'A')
 8007d02:	7a3b      	ldrb	r3, [r7, #8]
 8007d04:	2b54      	cmp	r3, #84	; 0x54
 8007d06:	d116      	bne.n	8007d36 <_ZN10IridiumSBD13internalBeginEv+0x292>
 8007d08:	7a7b      	ldrb	r3, [r7, #9]
 8007d0a:	2b41      	cmp	r3, #65	; 0x41
 8007d0c:	d113      	bne.n	8007d36 <_ZN10IridiumSBD13internalBeginEv+0x292>
      {
         unsigned long ver = strtoul(version + 2, NULL, 10);
 8007d0e:	f107 0308 	add.w	r3, r7, #8
 8007d12:	3302      	adds	r3, #2
 8007d14:	220a      	movs	r2, #10
 8007d16:	2100      	movs	r1, #0
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f015 f9f7 	bl	801d10c <strtoul>
 8007d1e:	61f8      	str	r0, [r7, #28]
         msstmWorkaroundRequested = ver < ISBD_MSSTM_WORKAROUND_FW_VER;
 8007d20:	69fb      	ldr	r3, [r7, #28]
 8007d22:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8007d26:	4293      	cmp	r3, r2
 8007d28:	bf94      	ite	ls
 8007d2a:	2301      	movls	r3, #1
 8007d2c:	2300      	movhi	r3, #0
 8007d2e:	b2da      	uxtb	r2, r3
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
      }
   }
   diagprint(F("MSSTM workaround is")); diagprint(msstmWorkaroundRequested ? F("") : F(" NOT")); diagprint(F(" enforced.\r\n"));
 8007d36:	491c      	ldr	r1, [pc, #112]	; (8007da8 <_ZN10IridiumSBD13internalBeginEv+0x304>)
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f001 f995 	bl	8009068 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d001      	beq.n	8007d4c <_ZN10IridiumSBD13internalBeginEv+0x2a8>
 8007d48:	4b0f      	ldr	r3, [pc, #60]	; (8007d88 <_ZN10IridiumSBD13internalBeginEv+0x2e4>)
 8007d4a:	e000      	b.n	8007d4e <_ZN10IridiumSBD13internalBeginEv+0x2aa>
 8007d4c:	4b0f      	ldr	r3, [pc, #60]	; (8007d8c <_ZN10IridiumSBD13internalBeginEv+0x2e8>)
 8007d4e:	4619      	mov	r1, r3
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f001 f989 	bl	8009068 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8007d56:	4915      	ldr	r1, [pc, #84]	; (8007dac <_ZN10IridiumSBD13internalBeginEv+0x308>)
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f001 f985 	bl	8009068 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   // Done!
   diagprint(F("InternalBegin: success!\r\n"));
 8007d5e:	4914      	ldr	r1, [pc, #80]	; (8007db0 <_ZN10IridiumSBD13internalBeginEv+0x30c>)
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f001 f981 	bl	8009068 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   return ISBD_SUCCESS;
 8007d66:	2300      	movs	r3, #0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3738      	adds	r7, #56	; 0x38
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	08021bd8 	.word	0x08021bd8
 8007d74:	08021bf0 	.word	0x08021bf0
 8007d78:	080218d8 	.word	0x080218d8
 8007d7c:	08021bf4 	.word	0x08021bf4
 8007d80:	08021cc8 	.word	0x08021cc8
 8007d84:	08021c0c 	.word	0x08021c0c
 8007d88:	08021c1c 	.word	0x08021c1c
 8007d8c:	08021c20 	.word	0x08021c20
 8007d90:	08021c28 	.word	0x08021c28
 8007d94:	08021c34 	.word	0x08021c34
 8007d98:	08021c44 	.word	0x08021c44
 8007d9c:	08021c54 	.word	0x08021c54
 8007da0:	08021c6c 	.word	0x08021c6c
 8007da4:	08021c84 	.word	0x08021c84
 8007da8:	08021c88 	.word	0x08021c88
 8007dac:	08021c9c 	.word	0x08021c9c
 8007db0:	08021cac 	.word	0x08021cac

08007db4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj>:

int IridiumSBD::internalSendReceiveSBD(const char *txTxtMessage, const uint8_t *txData, size_t txDataSize, uint8_t *rxBuffer, size_t *prxBufferSize)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b096      	sub	sp, #88	; 0x58
 8007db8:	af04      	add	r7, sp, #16
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	607a      	str	r2, [r7, #4]
 8007dc0:	603b      	str	r3, [r7, #0]
   diagprint(F("internalSendReceive\r\n"));
 8007dc2:	49a5      	ldr	r1, [pc, #660]	; (8008058 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2a4>)
 8007dc4:	68f8      	ldr	r0, [r7, #12]
 8007dc6:	f001 f94f 	bl	8009068 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (this->asleep)
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d001      	beq.n	8007dd8 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x24>
      return ISBD_IS_ASLEEP;
 8007dd4:	230a      	movs	r3, #10
 8007dd6:	e289      	b.n	80082ec <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>

   // Binary transmission?
   if (txData && txDataSize)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	f000 8152 	beq.w	8008084 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2d0>
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	f000 814e 	beq.w	8008084 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2d0>
   {
      if (txDataSize > ISBD_MAX_MESSAGE_LENGTH)
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8007dee:	d901      	bls.n	8007df4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x40>
         return ISBD_MSG_TOO_LONG;
 8007df0:	230d      	movs	r3, #13
 8007df2:	e27b      	b.n	80082ec <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>

      // send will use serial or wire as appropriate
      send(F("AT+SBDWB="), true, false);
 8007df4:	2300      	movs	r3, #0
 8007df6:	2201      	movs	r2, #1
 8007df8:	4998      	ldr	r1, [pc, #608]	; (800805c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2a8>)
 8007dfa:	68f8      	ldr	r0, [r7, #12]
 8007dfc:	f000 ffb6 	bl	8008d6c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
      send(txDataSize);
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	4619      	mov	r1, r3
 8007e06:	68f8      	ldr	r0, [r7, #12]
 8007e08:	f001 f8e8 	bl	8008fdc <_ZN10IridiumSBD4sendEt>
      send(F("\r"), false);
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	2200      	movs	r2, #0
 8007e10:	4993      	ldr	r1, [pc, #588]	; (8008060 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2ac>)
 8007e12:	68f8      	ldr	r0, [r7, #12]
 8007e14:	f000 ffaa 	bl	8008d6c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
      if (!waitForATResponse(NULL, 0, NULL, "READY\r\n"))
 8007e18:	4b92      	ldr	r3, [pc, #584]	; (8008064 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2b0>)
 8007e1a:	9300      	str	r3, [sp, #0]
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	2200      	movs	r2, #0
 8007e20:	2100      	movs	r1, #0
 8007e22:	68f8      	ldr	r0, [r7, #12]
 8007e24:	f000 fb40 	bl	80084a8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	f083 0301 	eor.w	r3, r3, #1
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d009      	beq.n	8007e48 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x94>
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8007e34:	68f8      	ldr	r0, [r7, #12]
 8007e36:	f000 fbf5 	bl	8008624 <_ZN10IridiumSBD9cancelledEv>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d001      	beq.n	8007e44 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x90>
 8007e40:	2304      	movs	r3, #4
 8007e42:	e253      	b.n	80082ec <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
 8007e44:	2303      	movs	r3, #3
 8007e46:	e251      	b.n	80082ec <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>

      uint16_t checksum = 0;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

      if (this->useSerial)
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	7c5b      	ldrb	r3, [r3, #17]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d03a      	beq.n	8007ecc <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x118>
      {
         for (size_t i=0; i<txDataSize; ++i)
 8007e56:	2300      	movs	r3, #0
 8007e58:	643b      	str	r3, [r7, #64]	; 0x40
 8007e5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d21a      	bcs.n	8007e98 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0xe4>
         {
            stream->write(txData[i]);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	4618      	mov	r0, r3
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	6879      	ldr	r1, [r7, #4]
 8007e72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e74:	440a      	add	r2, r1
 8007e76:	7812      	ldrb	r2, [r2, #0]
 8007e78:	4611      	mov	r1, r2
 8007e7a:	4798      	blx	r3
            checksum += (uint16_t)txData[i];
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e80:	4413      	add	r3, r2
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	b29a      	uxth	r2, r3
 8007e86:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007e8a:	4413      	add	r3, r2
 8007e8c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
         for (size_t i=0; i<txDataSize; ++i)
 8007e90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e92:	3301      	adds	r3, #1
 8007e94:	643b      	str	r3, [r7, #64]	; 0x40
 8007e96:	e7e0      	b.n	8007e5a <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0xa6>
         }
         stream->write((uint8_t)(checksum >> 8));
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8007eaa:	1212      	asrs	r2, r2, #8
 8007eac:	b2d2      	uxtb	r2, r2
 8007eae:	4611      	mov	r1, r2
 8007eb0:	4798      	blx	r3
         stream->write((uint8_t)(checksum & 0xFF));
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8007ec4:	b2d2      	uxtb	r2, r2
 8007ec6:	4611      	mov	r1, r2
 8007ec8:	4798      	blx	r3
 8007eca:	e092      	b.n	8007ff2 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x23e>
      }
      else
      {
         //lastCheck = millis(); // Update lastCheck so we enforce a full I2C_POLLING_WAIT
         // We need to make sure we don't send too much I2C data in one go (otherwise we will overflow the ATtiny841's I2C buffer)
         size_t bytes_to_send = txDataSize; // Send this many bytes in total
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	63fb      	str	r3, [r7, #60]	; 0x3c
         size_t i=0;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	63bb      	str	r3, [r7, #56]	; 0x38
         size_t nexti;
         while (bytes_to_send > (TINY_I2C_BUFFER_LENGTH - 3)) // If there are too many bytes to send all in one go
 8007ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ed6:	2b1d      	cmp	r3, #29
 8007ed8:	d937      	bls.n	8007f4a <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x196>
         {
            nexti = i + (TINY_I2C_BUFFER_LENGTH - 3);
 8007eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007edc:	331d      	adds	r3, #29
 8007ede:	637b      	str	r3, [r7, #52]	; 0x34
            wireport->beginTransmission((uint8_t)deviceaddress);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	68da      	ldr	r2, [r3, #12]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	7c1b      	ldrb	r3, [r3, #16]
 8007ee8:	4619      	mov	r1, r3
 8007eea:	4610      	mov	r0, r2
 8007eec:	f002 fb58 	bl	800a5a0 <_ZN7TwoWire17beginTransmissionEh>
            wireport->write(DATA_REG); // Point to the serial data 'register'
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	21ff      	movs	r1, #255	; 0xff
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f7ff fa66 	bl	80073c8 <_ZN7TwoWire5writeEi>
            for (; i<nexti; ++i)
 8007efc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d219      	bcs.n	8007f38 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x184>
            {
               wireport->write(txData[i]); // Write each byte
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	68d8      	ldr	r0, [r3, #12]
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	6879      	ldr	r1, [r7, #4]
 8007f12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f14:	440a      	add	r2, r1
 8007f16:	7812      	ldrb	r2, [r2, #0]
 8007f18:	4611      	mov	r1, r2
 8007f1a:	4798      	blx	r3
               checksum += (uint16_t)txData[i];
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f20:	4413      	add	r3, r2
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	b29a      	uxth	r2, r3
 8007f26:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007f2a:	4413      	add	r3, r2
 8007f2c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            for (; i<nexti; ++i)
 8007f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f32:	3301      	adds	r3, #1
 8007f34:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f36:	e7e1      	b.n	8007efc <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x148>
            }
            bytes_to_send = bytes_to_send - (TINY_I2C_BUFFER_LENGTH - 3); // Decrease the number of bytes still to send
 8007f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f3a:	3b1d      	subs	r3, #29
 8007f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
            wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	68db      	ldr	r3, [r3, #12]
 8007f42:	4618      	mov	r0, r3
 8007f44:	f002 fb76 	bl	800a634 <_ZN7TwoWire15endTransmissionEv>
         while (bytes_to_send > (TINY_I2C_BUFFER_LENGTH - 3)) // If there are too many bytes to send all in one go
 8007f48:	e7c4      	b.n	8007ed4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x120>
         }
         // There are now <= (TINY_I2C_BUFFER_LENGTH - 3) bytes left to send, so send them and then release the bus
         wireport->beginTransmission((uint8_t)deviceaddress);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	68da      	ldr	r2, [r3, #12]
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	7c1b      	ldrb	r3, [r3, #16]
 8007f52:	4619      	mov	r1, r3
 8007f54:	4610      	mov	r0, r2
 8007f56:	f002 fb23 	bl	800a5a0 <_ZN7TwoWire17beginTransmissionEh>
         wireport->write(DATA_REG); // Point to the 'serial register'
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	21ff      	movs	r1, #255	; 0xff
 8007f60:	4618      	mov	r0, r3
 8007f62:	f7ff fa31 	bl	80073c8 <_ZN7TwoWire5writeEi>
         for (; i<txDataSize; ++i)
 8007f66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d219      	bcs.n	8007fa2 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x1ee>
         {
            wireport->write(txData[i]);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	68d8      	ldr	r0, [r3, #12]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	68db      	ldr	r3, [r3, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	6879      	ldr	r1, [r7, #4]
 8007f7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f7e:	440a      	add	r2, r1
 8007f80:	7812      	ldrb	r2, [r2, #0]
 8007f82:	4611      	mov	r1, r2
 8007f84:	4798      	blx	r3
            checksum += (uint16_t)txData[i];
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f8a:	4413      	add	r3, r2
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	b29a      	uxth	r2, r3
 8007f90:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007f94:	4413      	add	r3, r2
 8007f96:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
         for (; i<txDataSize; ++i)
 8007f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007fa0:	e7e1      	b.n	8007f66 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x1b2>
         }
         wireport->write((uint8_t)(checksum >> 8));
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	68d8      	ldr	r0, [r3, #12]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8007fb2:	1212      	asrs	r2, r2, #8
 8007fb4:	b2d2      	uxtb	r2, r2
 8007fb6:	4611      	mov	r1, r2
 8007fb8:	4798      	blx	r3
         wireport->write((uint8_t)(checksum & 0xFF));
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	68da      	ldr	r2, [r3, #12]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	68db      	ldr	r3, [r3, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8007fca:	b2c9      	uxtb	r1, r1
 8007fcc:	4610      	mov	r0, r2
 8007fce:	4798      	blx	r3
         if (wireport->endTransmission() != 0) //Send data and release bus
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	68db      	ldr	r3, [r3, #12]
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f002 fb2d 	bl	800a634 <_ZN7TwoWire15endTransmissionEv>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	bf14      	ite	ne
 8007fe0:	2301      	movne	r3, #1
 8007fe2:	2300      	moveq	r3, #0
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d003      	beq.n	8007ff2 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x23e>
            diagprint(F("I2C write was not successful!\r\n"));
 8007fea:	491f      	ldr	r1, [pc, #124]	; (8008068 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2b4>)
 8007fec:	68f8      	ldr	r0, [r7, #12]
 8007fee:	f001 f83b 	bl	8009068 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      }

      consoleprint(F("["));
 8007ff2:	491e      	ldr	r1, [pc, #120]	; (800806c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2b8>)
 8007ff4:	68f8      	ldr	r0, [r7, #12]
 8007ff6:	f001 f88f 	bl	8009118 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
      consoleprint((uint16_t)txDataSize);
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	4619      	mov	r1, r3
 8008000:	68f8      	ldr	r0, [r7, #12]
 8008002:	f001 f8c1 	bl	8009188 <_ZN10IridiumSBD12consoleprintEt>
      consoleprint(F(" bytes]"));
 8008006:	491a      	ldr	r1, [pc, #104]	; (8008070 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2bc>)
 8008008:	68f8      	ldr	r0, [r7, #12]
 800800a:	f001 f885 	bl	8009118 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>

      diagprint(F("Checksum:"));
 800800e:	4919      	ldr	r1, [pc, #100]	; (8008074 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2c0>)
 8008010:	68f8      	ldr	r0, [r7, #12]
 8008012:	f001 f829 	bl	8009068 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      diagprint(checksum);
 8008016:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800801a:	4619      	mov	r1, r3
 800801c:	68f8      	ldr	r0, [r7, #12]
 800801e:	f001 f85b 	bl	80090d8 <_ZN10IridiumSBD9diagprintEt>
      diagprint(F("\r\n"));
 8008022:	4915      	ldr	r1, [pc, #84]	; (8008078 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2c4>)
 8008024:	68f8      	ldr	r0, [r7, #12]
 8008026:	f001 f81f 	bl	8009068 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

      if (!waitForATResponse(NULL, 0, NULL, "0\r\n\r\nOK\r\n"))
 800802a:	4b14      	ldr	r3, [pc, #80]	; (800807c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2c8>)
 800802c:	9300      	str	r3, [sp, #0]
 800802e:	2300      	movs	r3, #0
 8008030:	2200      	movs	r2, #0
 8008032:	2100      	movs	r1, #0
 8008034:	68f8      	ldr	r0, [r7, #12]
 8008036:	f000 fa37 	bl	80084a8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 800803a:	4603      	mov	r3, r0
 800803c:	f083 0301 	eor.w	r3, r3, #1
 8008040:	b2db      	uxtb	r3, r3
 8008042:	2b00      	cmp	r3, #0
 8008044:	f000 8091 	beq.w	800816a <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3b6>
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8008048:	68f8      	ldr	r0, [r7, #12]
 800804a:	f000 faeb 	bl	8008624 <_ZN10IridiumSBD9cancelledEv>
 800804e:	4603      	mov	r3, r0
 8008050:	2b00      	cmp	r3, #0
 8008052:	d015      	beq.n	8008080 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2cc>
 8008054:	2304      	movs	r3, #4
 8008056:	e149      	b.n	80082ec <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
 8008058:	08021cd4 	.word	0x08021cd4
 800805c:	08021cec 	.word	0x08021cec
 8008060:	08021cf8 	.word	0x08021cf8
 8008064:	08021cfc 	.word	0x08021cfc
 8008068:	08021d04 	.word	0x08021d04
 800806c:	08021d24 	.word	0x08021d24
 8008070:	08021d28 	.word	0x08021d28
 8008074:	08021d30 	.word	0x08021d30
 8008078:	08021c84 	.word	0x08021c84
 800807c:	08021d3c 	.word	0x08021d3c
 8008080:	2303      	movs	r3, #3
 8008082:	e133      	b.n	80082ec <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
   }

   else // Text transmission
   {
#if true // use long string implementation
      if (txTxtMessage == NULL) // It's ok to have a NULL txtTxtMessage if the transaction is RX only
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d11d      	bne.n	80080c6 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x312>
      {
         send(F("AT+SBDWT=\r"));
 800808a:	2301      	movs	r3, #1
 800808c:	2201      	movs	r2, #1
 800808e:	4999      	ldr	r1, [pc, #612]	; (80082f4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x540>)
 8008090:	68f8      	ldr	r0, [r7, #12]
 8008092:	f000 fe6b 	bl	8008d6c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
         if (!waitForATResponse())
 8008096:	4b98      	ldr	r3, [pc, #608]	; (80082f8 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x544>)
 8008098:	9300      	str	r3, [sp, #0]
 800809a:	2300      	movs	r3, #0
 800809c:	2200      	movs	r2, #0
 800809e:	2100      	movs	r1, #0
 80080a0:	68f8      	ldr	r0, [r7, #12]
 80080a2:	f000 fa01 	bl	80084a8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 80080a6:	4603      	mov	r3, r0
 80080a8:	f083 0301 	eor.w	r3, r3, #1
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d05c      	beq.n	800816c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3b8>
            return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 80080b2:	68f8      	ldr	r0, [r7, #12]
 80080b4:	f000 fab6 	bl	8008624 <_ZN10IridiumSBD9cancelledEv>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d001      	beq.n	80080c2 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x30e>
 80080be:	2304      	movs	r3, #4
 80080c0:	e114      	b.n	80082ec <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
 80080c2:	2303      	movs	r3, #3
 80080c4:	e112      	b.n	80082ec <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
      }
      else
      {
         // remove any embedded \r
         char *p = strchr(txTxtMessage, '\r');
 80080c6:	210d      	movs	r1, #13
 80080c8:	68b8      	ldr	r0, [r7, #8]
 80080ca:	f014 f862 	bl	801c192 <strchr>
 80080ce:	6338      	str	r0, [r7, #48]	; 0x30
         if (p) *p = 0;
 80080d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d002      	beq.n	80080dc <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x328>
 80080d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d8:	2200      	movs	r2, #0
 80080da:	701a      	strb	r2, [r3, #0]
         if (strlen(txTxtMessage) > ISBD_MAX_MESSAGE_LENGTH)
 80080dc:	68b8      	ldr	r0, [r7, #8]
 80080de:	f7f8 f891 	bl	8000204 <strlen>
 80080e2:	4603      	mov	r3, r0
 80080e4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80080e8:	d901      	bls.n	80080ee <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x33a>
            return ISBD_MSG_TOO_LONG;
 80080ea:	230d      	movs	r3, #13
 80080ec:	e0fe      	b.n	80082ec <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
         send(F("AT+SBDWT\r"));
 80080ee:	2301      	movs	r3, #1
 80080f0:	2201      	movs	r2, #1
 80080f2:	4982      	ldr	r1, [pc, #520]	; (80082fc <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x548>)
 80080f4:	68f8      	ldr	r0, [r7, #12]
 80080f6:	f000 fe39 	bl	8008d6c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
         if (!waitForATResponse(NULL, 0, NULL, "READY\r\n"))
 80080fa:	4b81      	ldr	r3, [pc, #516]	; (8008300 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x54c>)
 80080fc:	9300      	str	r3, [sp, #0]
 80080fe:	2300      	movs	r3, #0
 8008100:	2200      	movs	r2, #0
 8008102:	2100      	movs	r1, #0
 8008104:	68f8      	ldr	r0, [r7, #12]
 8008106:	f000 f9cf 	bl	80084a8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 800810a:	4603      	mov	r3, r0
 800810c:	f083 0301 	eor.w	r3, r3, #1
 8008110:	b2db      	uxtb	r3, r3
 8008112:	2b00      	cmp	r3, #0
 8008114:	d009      	beq.n	800812a <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x376>
            return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8008116:	68f8      	ldr	r0, [r7, #12]
 8008118:	f000 fa84 	bl	8008624 <_ZN10IridiumSBD9cancelledEv>
 800811c:	4603      	mov	r3, r0
 800811e:	2b00      	cmp	r3, #0
 8008120:	d001      	beq.n	8008126 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x372>
 8008122:	2304      	movs	r3, #4
 8008124:	e0e2      	b.n	80082ec <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
 8008126:	2303      	movs	r3, #3
 8008128:	e0e0      	b.n	80082ec <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
         sendlong(txTxtMessage);
 800812a:	68b9      	ldr	r1, [r7, #8]
 800812c:	68f8      	ldr	r0, [r7, #12]
 800812e:	f000 fec5 	bl	8008ebc <_ZN10IridiumSBD8sendlongEPKc>
         send("\r");
 8008132:	4974      	ldr	r1, [pc, #464]	; (8008304 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x550>)
 8008134:	68f8      	ldr	r0, [r7, #12]
 8008136:	f000 fe75 	bl	8008e24 <_ZN10IridiumSBD4sendEPKc>
         if (!waitForATResponse(NULL, 0, NULL, "0\r\n\r\nOK\r\n"))
 800813a:	4b73      	ldr	r3, [pc, #460]	; (8008308 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x554>)
 800813c:	9300      	str	r3, [sp, #0]
 800813e:	2300      	movs	r3, #0
 8008140:	2200      	movs	r2, #0
 8008142:	2100      	movs	r1, #0
 8008144:	68f8      	ldr	r0, [r7, #12]
 8008146:	f000 f9af 	bl	80084a8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 800814a:	4603      	mov	r3, r0
 800814c:	f083 0301 	eor.w	r3, r3, #1
 8008150:	b2db      	uxtb	r3, r3
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00a      	beq.n	800816c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3b8>
            return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8008156:	68f8      	ldr	r0, [r7, #12]
 8008158:	f000 fa64 	bl	8008624 <_ZN10IridiumSBD9cancelledEv>
 800815c:	4603      	mov	r3, r0
 800815e:	2b00      	cmp	r3, #0
 8008160:	d001      	beq.n	8008166 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3b2>
 8008162:	2304      	movs	r3, #4
 8008164:	e0c2      	b.n	80082ec <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
 8008166:	2303      	movs	r3, #3
 8008168:	e0c0      	b.n	80082ec <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 800816a:	bf00      	nop
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
#endif
   }

   // Long SBDIX loop begins here
   for (unsigned long start = millis(); millis() - start < 1000UL * this->sendReceiveTimeout;)
 800816c:	f004 f9c0 	bl	800c4f0 <HAL_GetTick>
 8008170:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008172:	f004 f9bd 	bl	800c4f0 <HAL_GetTick>
 8008176:	4602      	mov	r2, r0
 8008178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800817a:	1ad2      	subs	r2, r2, r3
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008180:	4619      	mov	r1, r3
 8008182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008186:	fb03 f301 	mul.w	r3, r3, r1
 800818a:	429a      	cmp	r2, r3
 800818c:	bf34      	ite	cc
 800818e:	2301      	movcc	r3, #1
 8008190:	2300      	movcs	r3, #0
 8008192:	b2db      	uxtb	r3, r3
 8008194:	2b00      	cmp	r3, #0
 8008196:	f000 80a4 	beq.w	80082e2 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x52e>
   {
      bool okToProceed = true;
 800819a:	2301      	movs	r3, #1
 800819c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      if (this->msstmWorkaroundRequested)
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d00e      	beq.n	80081c8 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x414>
      {
         okToProceed = false;
 80081aa:	2300      	movs	r3, #0
 80081ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
         int ret = internalMSSTMWorkaround(okToProceed);
 80081b0:	f107 0323 	add.w	r3, r7, #35	; 0x23
 80081b4:	4619      	mov	r1, r3
 80081b6:	68f8      	ldr	r0, [r7, #12]
 80081b8:	f000 f902 	bl	80083c0 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb>
 80081bc:	62b8      	str	r0, [r7, #40]	; 0x28
         if (ret != ISBD_SUCCESS)
 80081be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d001      	beq.n	80081c8 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x414>
            return ret;
 80081c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c6:	e091      	b.n	80082ec <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
      }

      if (okToProceed)
 80081c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d077      	beq.n	80082c0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x50c>
      {
         uint16_t moCode = 0, moMSN = 0, mtCode = 0, mtMSN = 0, mtLen = 0, mtRemaining = 0;
 80081d0:	2300      	movs	r3, #0
 80081d2:	843b      	strh	r3, [r7, #32]
 80081d4:	2300      	movs	r3, #0
 80081d6:	83fb      	strh	r3, [r7, #30]
 80081d8:	2300      	movs	r3, #0
 80081da:	83bb      	strh	r3, [r7, #28]
 80081dc:	2300      	movs	r3, #0
 80081de:	837b      	strh	r3, [r7, #26]
 80081e0:	2300      	movs	r3, #0
 80081e2:	833b      	strh	r3, [r7, #24]
 80081e4:	2300      	movs	r3, #0
 80081e6:	82fb      	strh	r3, [r7, #22]
         int ret = doSBDIX(moCode, moMSN, mtCode, mtMSN, mtLen, mtRemaining);
 80081e8:	f107 001c 	add.w	r0, r7, #28
 80081ec:	f107 021e 	add.w	r2, r7, #30
 80081f0:	f107 0120 	add.w	r1, r7, #32
 80081f4:	f107 0316 	add.w	r3, r7, #22
 80081f8:	9302      	str	r3, [sp, #8]
 80081fa:	f107 0318 	add.w	r3, r7, #24
 80081fe:	9301      	str	r3, [sp, #4]
 8008200:	f107 031a 	add.w	r3, r7, #26
 8008204:	9300      	str	r3, [sp, #0]
 8008206:	4603      	mov	r3, r0
 8008208:	68f8      	ldr	r0, [r7, #12]
 800820a:	f000 fa3b 	bl	8008684 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_>
 800820e:	6278      	str	r0, [r7, #36]	; 0x24
         if (ret != ISBD_SUCCESS)
 8008210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008212:	2b00      	cmp	r3, #0
 8008214:	d001      	beq.n	800821a <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x466>
            return ret;
 8008216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008218:	e068      	b.n	80082ec <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>

         diagprint(F("SBDIX MO code: "));
 800821a:	493c      	ldr	r1, [pc, #240]	; (800830c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x558>)
 800821c:	68f8      	ldr	r0, [r7, #12]
 800821e:	f000 ff23 	bl	8009068 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
         diagprint(moCode);
 8008222:	8c3b      	ldrh	r3, [r7, #32]
 8008224:	4619      	mov	r1, r3
 8008226:	68f8      	ldr	r0, [r7, #12]
 8008228:	f000 ff56 	bl	80090d8 <_ZN10IridiumSBD9diagprintEt>
         diagprint(F("\r\n"));
 800822c:	4938      	ldr	r1, [pc, #224]	; (8008310 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x55c>)
 800822e:	68f8      	ldr	r0, [r7, #12]
 8008230:	f000 ff1a 	bl	8009068 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

         if (moCode <= 4) // this range indicates successful return!
 8008234:	8c3b      	ldrh	r3, [r7, #32]
 8008236:	2b04      	cmp	r3, #4
 8008238:	d820      	bhi.n	800827c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4c8>
         {
            diagprint(F("SBDIX success!\r\n"));
 800823a:	4936      	ldr	r1, [pc, #216]	; (8008314 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x560>)
 800823c:	68f8      	ldr	r0, [r7, #12]
 800823e:	f000 ff13 	bl	8009068 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

            this->remainingMessages = mtRemaining;
 8008242:	8afb      	ldrh	r3, [r7, #22]
 8008244:	461a      	mov	r2, r3
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	675a      	str	r2, [r3, #116]	; 0x74
            if (mtCode == 1 && rxBuffer) // retrieved 1 message
 800824a:	8bbb      	ldrh	r3, [r7, #28]
 800824c:	2b01      	cmp	r3, #1
 800824e:	d10d      	bne.n	800826c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4b8>
 8008250:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008252:	2b00      	cmp	r3, #0
 8008254:	d00a      	beq.n	800826c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4b8>
            {
               diagprint(F("Incoming message!\r\n"));
 8008256:	4930      	ldr	r1, [pc, #192]	; (8008318 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x564>)
 8008258:	68f8      	ldr	r0, [r7, #12]
 800825a:	f000 ff05 	bl	8009068 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
               return doSBDRB(rxBuffer, prxBufferSize);
 800825e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008260:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008262:	68f8      	ldr	r0, [r7, #12]
 8008264:	f000 fa74 	bl	8008750 <_ZN10IridiumSBD7doSBDRBEPhPj>
 8008268:	4603      	mov	r3, r0
 800826a:	e028      	b.n	80082be <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x50a>
            }

            else
            {
               // No data returned
               if (prxBufferSize)
 800826c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800826e:	2b00      	cmp	r3, #0
 8008270:	d002      	beq.n	8008278 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4c4>
                  *prxBufferSize = 0;
 8008272:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008274:	2200      	movs	r2, #0
 8008276:	601a      	str	r2, [r3, #0]
            }
            return ISBD_SUCCESS;
 8008278:	2300      	movs	r3, #0
 800827a:	e020      	b.n	80082be <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x50a>
         }

         else if (moCode == 12 || moCode == 14 || moCode == 16) // fatal failure: no retry
 800827c:	8c3b      	ldrh	r3, [r7, #32]
 800827e:	2b0c      	cmp	r3, #12
 8008280:	d005      	beq.n	800828e <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4da>
 8008282:	8c3b      	ldrh	r3, [r7, #32]
 8008284:	2b0e      	cmp	r3, #14
 8008286:	d002      	beq.n	800828e <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4da>
 8008288:	8c3b      	ldrh	r3, [r7, #32]
 800828a:	2b10      	cmp	r3, #16
 800828c:	d105      	bne.n	800829a <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4e6>
         {
            diagprint(F("SBDIX fatal!\r\n"));
 800828e:	4923      	ldr	r1, [pc, #140]	; (800831c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x568>)
 8008290:	68f8      	ldr	r0, [r7, #12]
 8008292:	f000 fee9 	bl	8009068 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
            return ISBD_SBDIX_FATAL_ERROR;
 8008296:	2306      	movs	r3, #6
 8008298:	e011      	b.n	80082be <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x50a>
         }

         else // retry
         {
            diagprint(F("Waiting for SBDIX retry...\r\n"));
 800829a:	4921      	ldr	r1, [pc, #132]	; (8008320 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x56c>)
 800829c:	68f8      	ldr	r0, [r7, #12]
 800829e:	f000 fee3 	bl	8009068 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
            if (!noBlockWait(sbdixInterval))
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082a6:	4619      	mov	r1, r3
 80082a8:	68f8      	ldr	r0, [r7, #12]
 80082aa:	f000 f8d7 	bl	800845c <_ZN10IridiumSBD11noBlockWaitEi>
 80082ae:	4603      	mov	r3, r0
 80082b0:	f083 0301 	eor.w	r3, r3, #1
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	f43f af5b 	beq.w	8008172 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3be>
               return ISBD_CANCELLED;
 80082bc:	2304      	movs	r3, #4
            return ret;
 80082be:	e015      	b.n	80082ec <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
         }
      }

      else // MSSTM check fail
      {
         diagprint(F("Waiting for MSSTM retry...\r\n"));
 80082c0:	4918      	ldr	r1, [pc, #96]	; (8008324 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x570>)
 80082c2:	68f8      	ldr	r0, [r7, #12]
 80082c4:	f000 fed0 	bl	8009068 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
         if (!noBlockWait(ISBD_MSSTM_RETRY_INTERVAL))
 80082c8:	210a      	movs	r1, #10
 80082ca:	68f8      	ldr	r0, [r7, #12]
 80082cc:	f000 f8c6 	bl	800845c <_ZN10IridiumSBD11noBlockWaitEi>
 80082d0:	4603      	mov	r3, r0
 80082d2:	f083 0301 	eor.w	r3, r3, #1
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	2b00      	cmp	r3, #0
 80082da:	f43f af4a 	beq.w	8008172 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3be>
            return ISBD_CANCELLED;
 80082de:	2304      	movs	r3, #4
 80082e0:	e004      	b.n	80082ec <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
      }
   } // big wait loop

   diagprint(F("SBDIX timeout!\r\n"));
 80082e2:	4911      	ldr	r1, [pc, #68]	; (8008328 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x574>)
 80082e4:	68f8      	ldr	r0, [r7, #12]
 80082e6:	f000 febf 	bl	8009068 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   return ISBD_SENDRECEIVE_TIMEOUT;
 80082ea:	2307      	movs	r3, #7
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3748      	adds	r7, #72	; 0x48
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	08021d48 	.word	0x08021d48
 80082f8:	080218d8 	.word	0x080218d8
 80082fc:	08021d54 	.word	0x08021d54
 8008300:	08021cfc 	.word	0x08021cfc
 8008304:	08021cf8 	.word	0x08021cf8
 8008308:	08021d3c 	.word	0x08021d3c
 800830c:	08021d60 	.word	0x08021d60
 8008310:	08021c84 	.word	0x08021c84
 8008314:	08021d70 	.word	0x08021d70
 8008318:	08021d84 	.word	0x08021d84
 800831c:	08021d98 	.word	0x08021d98
 8008320:	08021da8 	.word	0x08021da8
 8008324:	08021dc8 	.word	0x08021dc8
 8008328:	08021de8 	.word	0x08021de8

0800832c <_ZN10IridiumSBD24internalGetSignalQualityERi>:

int IridiumSBD::internalGetSignalQuality(int &quality)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b086      	sub	sp, #24
 8008330:	af02      	add	r7, sp, #8
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]
   if (this->asleep)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800833c:	2b00      	cmp	r3, #0
 800833e:	d001      	beq.n	8008344 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x18>
      return ISBD_IS_ASLEEP;
 8008340:	230a      	movs	r3, #10
 8008342:	e032      	b.n	80083aa <_ZN10IridiumSBD24internalGetSignalQualityERi+0x7e>

   char csqResponseBuf[2];

   send(F("AT+CSQ\r"));
 8008344:	2301      	movs	r3, #1
 8008346:	2201      	movs	r2, #1
 8008348:	491a      	ldr	r1, [pc, #104]	; (80083b4 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x88>)
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 fd0e 	bl	8008d6c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(csqResponseBuf, sizeof(csqResponseBuf), "+CSQ:"))
 8008350:	f107 010c 	add.w	r1, r7, #12
 8008354:	4b18      	ldr	r3, [pc, #96]	; (80083b8 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x8c>)
 8008356:	9300      	str	r3, [sp, #0]
 8008358:	4b18      	ldr	r3, [pc, #96]	; (80083bc <_ZN10IridiumSBD24internalGetSignalQualityERi+0x90>)
 800835a:	2202      	movs	r2, #2
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 f8a3 	bl	80084a8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8008362:	4603      	mov	r3, r0
 8008364:	f083 0301 	eor.w	r3, r3, #1
 8008368:	b2db      	uxtb	r3, r3
 800836a:	2b00      	cmp	r3, #0
 800836c:	d009      	beq.n	8008382 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x56>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 f958 	bl	8008624 <_ZN10IridiumSBD9cancelledEv>
 8008374:	4603      	mov	r3, r0
 8008376:	2b00      	cmp	r3, #0
 8008378:	d001      	beq.n	800837e <_ZN10IridiumSBD24internalGetSignalQualityERi+0x52>
 800837a:	2304      	movs	r3, #4
 800837c:	e015      	b.n	80083aa <_ZN10IridiumSBD24internalGetSignalQualityERi+0x7e>
 800837e:	2303      	movs	r3, #3
 8008380:	e013      	b.n	80083aa <_ZN10IridiumSBD24internalGetSignalQualityERi+0x7e>

   if (isdigit(csqResponseBuf[0]))
 8008382:	7b3b      	ldrb	r3, [r7, #12]
 8008384:	3b30      	subs	r3, #48	; 0x30
 8008386:	2b09      	cmp	r3, #9
 8008388:	bf94      	ite	ls
 800838a:	2301      	movls	r3, #1
 800838c:	2300      	movhi	r3, #0
 800838e:	b2db      	uxtb	r3, r3
 8008390:	2b00      	cmp	r3, #0
 8008392:	d009      	beq.n	80083a8 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x7c>
   {
      quality = atoi(csqResponseBuf);
 8008394:	f107 030c 	add.w	r3, r7, #12
 8008398:	4618      	mov	r0, r3
 800839a:	f012 f8ea 	bl	801a572 <atoi>
 800839e:	4602      	mov	r2, r0
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	601a      	str	r2, [r3, #0]
      return ISBD_SUCCESS;
 80083a4:	2300      	movs	r3, #0
 80083a6:	e000      	b.n	80083aa <_ZN10IridiumSBD24internalGetSignalQualityERi+0x7e>
   }

   return ISBD_PROTOCOL_ERROR;
 80083a8:	2303      	movs	r3, #3
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3710      	adds	r7, #16
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
 80083b2:	bf00      	nop
 80083b4:	08021dfc 	.word	0x08021dfc
 80083b8:	080218d8 	.word	0x080218d8
 80083bc:	08021e04 	.word	0x08021e04

080083c0 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb>:

int IridiumSBD::internalMSSTMWorkaround(bool &okToProceed)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b08a      	sub	sp, #40	; 0x28
 80083c4:	af02      	add	r7, sp, #8
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
   satellite. Ensuring that the received signal strength reported in response to AT command +CSQ and +CIER is above 2-3 bars
   before attempting SBD communication will protect against lockout.
   */
   char msstmResponseBuf[24];

   send(F("AT-MSSTM\r"));
 80083ca:	2301      	movs	r3, #1
 80083cc:	2201      	movs	r2, #1
 80083ce:	4917      	ldr	r1, [pc, #92]	; (800842c <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x6c>)
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 fccb 	bl	8008d6c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(msstmResponseBuf, sizeof(msstmResponseBuf), "-MSSTM: "))
 80083d6:	f107 0108 	add.w	r1, r7, #8
 80083da:	4b15      	ldr	r3, [pc, #84]	; (8008430 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x70>)
 80083dc:	9300      	str	r3, [sp, #0]
 80083de:	4b15      	ldr	r3, [pc, #84]	; (8008434 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x74>)
 80083e0:	2218      	movs	r2, #24
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 f860 	bl	80084a8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 80083e8:	4603      	mov	r3, r0
 80083ea:	f083 0301 	eor.w	r3, r3, #1
 80083ee:	b2db      	uxtb	r3, r3
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d009      	beq.n	8008408 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x48>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 f915 	bl	8008624 <_ZN10IridiumSBD9cancelledEv>
 80083fa:	4603      	mov	r3, r0
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d001      	beq.n	8008404 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x44>
 8008400:	2304      	movs	r3, #4
 8008402:	e00e      	b.n	8008422 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x62>
 8008404:	2303      	movs	r3, #3
 8008406:	e00c      	b.n	8008422 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x62>

   // Response buf now contains either an 8-digit number or the string "no network service"
   okToProceed = isxdigit(msstmResponseBuf[0]);
 8008408:	7a3b      	ldrb	r3, [r7, #8]
 800840a:	4618      	mov	r0, r3
 800840c:	f012 f9da 	bl	801a7c4 <isxdigit>
 8008410:	4603      	mov	r3, r0
 8008412:	2b00      	cmp	r3, #0
 8008414:	bf14      	ite	ne
 8008416:	2301      	movne	r3, #1
 8008418:	2300      	moveq	r3, #0
 800841a:	b2da      	uxtb	r2, r3
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	701a      	strb	r2, [r3, #0]
   return ISBD_SUCCESS;
 8008420:	2300      	movs	r3, #0
}
 8008422:	4618      	mov	r0, r3
 8008424:	3720      	adds	r7, #32
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	080218c0 	.word	0x080218c0
 8008430:	080218d8 	.word	0x080218d8
 8008434:	080218cc 	.word	0x080218cc

08008438 <_ZN10IridiumSBD13internalSleepEv>:

int IridiumSBD::internalSleep()
{
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
   if (this->asleep)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8008446:	2b00      	cmp	r3, #0
 8008448:	d001      	beq.n	800844e <_ZN10IridiumSBD13internalSleepEv+0x16>
      return ISBD_IS_ASLEEP;
 800844a:	230a      	movs	r3, #10
 800844c:	e000      	b.n	8008450 <_ZN10IridiumSBD13internalSleepEv+0x18>

   if (!waitForATResponse())
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
#endif

   return ISBD_SUCCESS;
 800844e:	2300      	movs	r3, #0
}
 8008450:	4618      	mov	r0, r3
 8008452:	370c      	adds	r7, #12
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr

0800845c <_ZN10IridiumSBD11noBlockWaitEi>:

bool IridiumSBD::noBlockWait(int seconds)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b084      	sub	sp, #16
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
   for (unsigned long start=millis(); millis() - start < 1000UL * seconds;)
 8008466:	f004 f843 	bl	800c4f0 <HAL_GetTick>
 800846a:	60f8      	str	r0, [r7, #12]
 800846c:	f004 f840 	bl	800c4f0 <HAL_GetTick>
 8008470:	4602      	mov	r2, r0
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	1ad2      	subs	r2, r2, r3
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800847c:	fb01 f303 	mul.w	r3, r1, r3
 8008480:	429a      	cmp	r2, r3
 8008482:	bf34      	ite	cc
 8008484:	2301      	movcc	r3, #1
 8008486:	2300      	movcs	r3, #0
 8008488:	b2db      	uxtb	r3, r3
 800848a:	2b00      	cmp	r3, #0
 800848c:	d007      	beq.n	800849e <_ZN10IridiumSBD11noBlockWaitEi+0x42>
      if (cancelled())
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 f8c8 	bl	8008624 <_ZN10IridiumSBD9cancelledEv>
 8008494:	4603      	mov	r3, r0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d0e8      	beq.n	800846c <_ZN10IridiumSBD11noBlockWaitEi+0x10>
         return false;
 800849a:	2300      	movs	r3, #0
 800849c:	e000      	b.n	80084a0 <_ZN10IridiumSBD11noBlockWaitEi+0x44>

   return true;
 800849e:	2301      	movs	r3, #1
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3710      	adds	r7, #16
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>:

// Wait for response from previous AT command.  This process terminates when "terminator" string is seen or upon timeout.
// If "prompt" string is provided (example "+CSQ:"), then all characters following prompt up to the next CRLF are
// stored in response buffer for later parsing by caller.
bool IridiumSBD::waitForATResponse(char *response, int responseSize, const char *prompt, const char *terminator)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b08a      	sub	sp, #40	; 0x28
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	60f8      	str	r0, [r7, #12]
 80084b0:	60b9      	str	r1, [r7, #8]
 80084b2:	607a      	str	r2, [r7, #4]
 80084b4:	603b      	str	r3, [r7, #0]
   diagprint(F("Waiting for response "));
 80084b6:	4959      	ldr	r1, [pc, #356]	; (800861c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x174>)
 80084b8:	68f8      	ldr	r0, [r7, #12]
 80084ba:	f000 fdd5 	bl	8009068 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   diagprint(terminator);
 80084be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80084c0:	68f8      	ldr	r0, [r7, #12]
 80084c2:	f000 fdef 	bl	80090a4 <_ZN10IridiumSBD9diagprintEPKc>
   this->print((char*) terminator); //TODO doesn't print otherwise
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084cc:	4798      	blx	r3
   diagprint(F("\r\n"));
 80084ce:	4954      	ldr	r1, [pc, #336]	; (8008620 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x178>)
 80084d0:	68f8      	ldr	r0, [r7, #12]
 80084d2:	f000 fdc9 	bl	8009068 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (response)
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d005      	beq.n	80084e8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x40>
      memset(response, 0, responseSize);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	461a      	mov	r2, r3
 80084e0:	2100      	movs	r1, #0
 80084e2:	68b8      	ldr	r0, [r7, #8]
 80084e4:	f012 fac8 	bl	801aa78 <memset>

   int matchPromptPos = 0; // Matches chars in prompt
 80084e8:	2300      	movs	r3, #0
 80084ea:	627b      	str	r3, [r7, #36]	; 0x24
   int matchTerminatorPos = 0; // Matches chars in terminator
 80084ec:	2300      	movs	r3, #0
 80084ee:	623b      	str	r3, [r7, #32]
   enum {LOOKING_FOR_PROMPT, GATHERING_RESPONSE, LOOKING_FOR_TERMINATOR};
   int promptState = prompt ? LOOKING_FOR_PROMPT : LOOKING_FOR_TERMINATOR;
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d001      	beq.n	80084fa <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x52>
 80084f6:	2300      	movs	r3, #0
 80084f8:	e000      	b.n	80084fc <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x54>
 80084fa:	2302      	movs	r3, #2
 80084fc:	61fb      	str	r3, [r7, #28]
   //consoleprint(F("<< ")); //TODO If we comment out this it looks cleaner in the serial

   for (unsigned long start=millis(); millis() - start < 1000UL * atTimeout;)
 80084fe:	f003 fff7 	bl	800c4f0 <HAL_GetTick>
 8008502:	61b8      	str	r0, [r7, #24]
 8008504:	f003 fff4 	bl	800c4f0 <HAL_GetTick>
 8008508:	4602      	mov	r2, r0
 800850a:	69bb      	ldr	r3, [r7, #24]
 800850c:	1ad2      	subs	r2, r2, r3
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008512:	4619      	mov	r1, r3
 8008514:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008518:	fb03 f301 	mul.w	r3, r3, r1
 800851c:	429a      	cmp	r2, r3
 800851e:	bf34      	ite	cc
 8008520:	2301      	movcc	r3, #1
 8008522:	2300      	movcs	r3, #0
 8008524:	b2db      	uxtb	r3, r3
 8008526:	2b00      	cmp	r3, #0
 8008528:	d072      	beq.n	8008610 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x168>
   {
      if (cancelled())
 800852a:	68f8      	ldr	r0, [r7, #12]
 800852c:	f000 f87a 	bl	8008624 <_ZN10IridiumSBD9cancelledEv>
 8008530:	4603      	mov	r3, r0
 8008532:	2b00      	cmp	r3, #0
 8008534:	d001      	beq.n	800853a <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x92>
         return false;
 8008536:	2300      	movs	r3, #0
 8008538:	e06b      	b.n	8008612 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x16a>

      while (filteredavailable() > 0)
 800853a:	68f8      	ldr	r0, [r7, #12]
 800853c:	f000 ff52 	bl	80093e4 <_ZN10IridiumSBD17filteredavailableEv>
 8008540:	4603      	mov	r3, r0
 8008542:	2b00      	cmp	r3, #0
 8008544:	bfcc      	ite	gt
 8008546:	2301      	movgt	r3, #1
 8008548:	2300      	movle	r3, #0
 800854a:	b2db      	uxtb	r3, r3
 800854c:	2b00      	cmp	r3, #0
 800854e:	d0d9      	beq.n	8008504 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x5c>
      {
         char c = filteredread();
 8008550:	68f8      	ldr	r0, [r7, #12]
 8008552:	f000 ff63 	bl	800941c <_ZN10IridiumSBD12filteredreadEv>
 8008556:	4603      	mov	r3, r0
 8008558:	75fb      	strb	r3, [r7, #23]
         if (prompt)
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d03b      	beq.n	80085d8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x130>
         {
            switch (promptState)
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d003      	beq.n	800856e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xc6>
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	2b01      	cmp	r3, #1
 800856a:	d01d      	beq.n	80085a8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x100>
 800856c:	e034      	b.n	80085d8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x130>
            {
            case LOOKING_FOR_PROMPT:
               if (c == prompt[matchPromptPos])
 800856e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008570:	683a      	ldr	r2, [r7, #0]
 8008572:	4413      	add	r3, r2
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	7dfa      	ldrb	r2, [r7, #23]
 8008578:	429a      	cmp	r2, r3
 800857a:	d10b      	bne.n	8008594 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xec>
               {
                  ++matchPromptPos;
 800857c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857e:	3301      	adds	r3, #1
 8008580:	627b      	str	r3, [r7, #36]	; 0x24
                  if (prompt[matchPromptPos] == '\0')
 8008582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008584:	683a      	ldr	r2, [r7, #0]
 8008586:	4413      	add	r3, r2
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d121      	bne.n	80085d2 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12a>
                     promptState = GATHERING_RESPONSE;
 800858e:	2301      	movs	r3, #1
 8008590:	61fb      	str	r3, [r7, #28]
               else
               {
                  matchPromptPos = c == prompt[0] ? 1 : 0;
               }

               break;
 8008592:	e01e      	b.n	80085d2 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12a>
                  matchPromptPos = c == prompt[0] ? 1 : 0;
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	7dfa      	ldrb	r2, [r7, #23]
 800859a:	429a      	cmp	r2, r3
 800859c:	d101      	bne.n	80085a2 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xfa>
 800859e:	2301      	movs	r3, #1
 80085a0:	e000      	b.n	80085a4 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xfc>
 80085a2:	2300      	movs	r3, #0
 80085a4:	627b      	str	r3, [r7, #36]	; 0x24
               break;
 80085a6:	e014      	b.n	80085d2 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12a>
            case GATHERING_RESPONSE: // gathering response from end of prompt to first \r
               if (response)
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d013      	beq.n	80085d6 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12e>
               {
                  if (c == '\r' || responseSize < 2)
 80085ae:	7dfb      	ldrb	r3, [r7, #23]
 80085b0:	2b0d      	cmp	r3, #13
 80085b2:	d002      	beq.n	80085ba <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x112>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	dc02      	bgt.n	80085c0 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x118>
                  {
                     promptState = LOOKING_FOR_TERMINATOR;
 80085ba:	2302      	movs	r3, #2
 80085bc:	61fb      	str	r3, [r7, #28]
                  {
                     *response++ = c;
                     responseSize--;
                  }
               }
               break;
 80085be:	e00a      	b.n	80085d6 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12e>
                     *response++ = c;
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	1c5a      	adds	r2, r3, #1
 80085c4:	60ba      	str	r2, [r7, #8]
 80085c6:	7dfa      	ldrb	r2, [r7, #23]
 80085c8:	701a      	strb	r2, [r3, #0]
                     responseSize--;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	3b01      	subs	r3, #1
 80085ce:	607b      	str	r3, [r7, #4]
               break;
 80085d0:	e001      	b.n	80085d6 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12e>
               break;
 80085d2:	bf00      	nop
 80085d4:	e000      	b.n	80085d8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x130>
               break;
 80085d6:	bf00      	nop
            }
         }

         if (c == terminator[matchTerminatorPos])
 80085d8:	6a3b      	ldr	r3, [r7, #32]
 80085da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085dc:	4413      	add	r3, r2
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	7dfa      	ldrb	r2, [r7, #23]
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d10a      	bne.n	80085fc <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x154>
         {
            ++matchTerminatorPos;
 80085e6:	6a3b      	ldr	r3, [r7, #32]
 80085e8:	3301      	adds	r3, #1
 80085ea:	623b      	str	r3, [r7, #32]
            if (terminator[matchTerminatorPos] == '\0')
 80085ec:	6a3b      	ldr	r3, [r7, #32]
 80085ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085f0:	4413      	add	r3, r2
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d1a0      	bne.n	800853a <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x92>
               return true;
 80085f8:	2301      	movs	r3, #1
 80085fa:	e00a      	b.n	8008612 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x16a>
         }
         else
         {
            matchTerminatorPos = c == terminator[0] ? 1 : 0;
 80085fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	7dfa      	ldrb	r2, [r7, #23]
 8008602:	429a      	cmp	r2, r3
 8008604:	d101      	bne.n	800860a <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x162>
 8008606:	2301      	movs	r3, #1
 8008608:	e000      	b.n	800860c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x164>
 800860a:	2300      	movs	r3, #0
 800860c:	623b      	str	r3, [r7, #32]
      while (filteredavailable() > 0)
 800860e:	e794      	b.n	800853a <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x92>
         }
      } // while (filteredavailable() > 0)
   } // timer loop
   return false;
 8008610:	2300      	movs	r3, #0
}
 8008612:	4618      	mov	r0, r3
 8008614:	3728      	adds	r7, #40	; 0x28
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop
 800861c:	08021e0c 	.word	0x08021e0c
 8008620:	08021c84 	.word	0x08021c84

08008624 <_ZN10IridiumSBD9cancelledEv>:

bool IridiumSBD::cancelled()
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b082      	sub	sp, #8
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
   if (this->useSerial)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	7c5b      	ldrb	r3, [r3, #17]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d019      	beq.n	8008668 <_ZN10IridiumSBD9cancelledEv+0x44>
   {
	   //TODO For some reason when using digitalRead here it didn't work so simply replaced with HAL function
	   //if ((ringPin != -1) && digitalRead(ringPin) == LOW)
	     if ((ringPin != -1) && HAL_GPIO_ReadPin(ringPin_GPIO_Port,ringPin_Pin) == LOW)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800863a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800863e:	d008      	beq.n	8008652 <_ZN10IridiumSBD9cancelledEv+0x2e>
 8008640:	2110      	movs	r1, #16
 8008642:	480e      	ldr	r0, [pc, #56]	; (800867c <_ZN10IridiumSBD9cancelledEv+0x58>)
 8008644:	f004 fe54 	bl	800d2f0 <HAL_GPIO_ReadPin>
 8008648:	4603      	mov	r3, r0
 800864a:	2b00      	cmp	r3, #0
 800864c:	d101      	bne.n	8008652 <_ZN10IridiumSBD9cancelledEv+0x2e>
 800864e:	2301      	movs	r3, #1
 8008650:	e000      	b.n	8008654 <_ZN10IridiumSBD9cancelledEv+0x30>
 8008652:	2300      	movs	r3, #0
 8008654:	2b00      	cmp	r3, #0
 8008656:	d007      	beq.n	8008668 <_ZN10IridiumSBD9cancelledEv+0x44>
	  {
         ringAsserted = true;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2201      	movs	r2, #1
 800865c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
		 diagprint(F("ringPin seen!\r\n"));
 8008660:	4907      	ldr	r1, [pc, #28]	; (8008680 <_ZN10IridiumSBD9cancelledEv+0x5c>)
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 fd00 	bl	8009068 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
	  }
   }

   return !ISBDCallback();
 8008668:	f7fe fec0 	bl	80073ec <_Z12ISBDCallbackv>
 800866c:	4603      	mov	r3, r0
 800866e:	f083 0301 	eor.w	r3, r3, #1
 8008672:	b2db      	uxtb	r3, r3
}
 8008674:	4618      	mov	r0, r3
 8008676:	3708      	adds	r7, #8
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}
 800867c:	40020800 	.word	0x40020800
 8008680:	08021e24 	.word	0x08021e24

08008684 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_>:

int IridiumSBD::doSBDIX(uint16_t &moCode, uint16_t &moMSN, uint16_t &mtCode, uint16_t &mtMSN, uint16_t &mtLen, uint16_t &mtRemaining)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b096      	sub	sp, #88	; 0x58
 8008688:	af02      	add	r7, sp, #8
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	607a      	str	r2, [r7, #4]
 8008690:	603b      	str	r3, [r7, #0]
   // Returns xx,xxxxx,xx,xxxxx,xx,xxx
   char sbdixResponseBuf[32];
   send(F("AT+SBDIX\r"));
 8008692:	2301      	movs	r3, #1
 8008694:	2201      	movs	r2, #1
 8008696:	492a      	ldr	r1, [pc, #168]	; (8008740 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xbc>)
 8008698:	68f8      	ldr	r0, [r7, #12]
 800869a:	f000 fb67 	bl	8008d6c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(sbdixResponseBuf, sizeof(sbdixResponseBuf), "+SBDIX: "))
 800869e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80086a2:	4b28      	ldr	r3, [pc, #160]	; (8008744 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xc0>)
 80086a4:	9300      	str	r3, [sp, #0]
 80086a6:	4b28      	ldr	r3, [pc, #160]	; (8008748 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xc4>)
 80086a8:	2220      	movs	r2, #32
 80086aa:	68f8      	ldr	r0, [r7, #12]
 80086ac:	f7ff fefc 	bl	80084a8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 80086b0:	4603      	mov	r3, r0
 80086b2:	f083 0301 	eor.w	r3, r3, #1
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d009      	beq.n	80086d0 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x4c>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 80086bc:	68f8      	ldr	r0, [r7, #12]
 80086be:	f7ff ffb1 	bl	8008624 <_ZN10IridiumSBD9cancelledEv>
 80086c2:	4603      	mov	r3, r0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d001      	beq.n	80086cc <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x48>
 80086c8:	2304      	movs	r3, #4
 80086ca:	e035      	b.n	8008738 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xb4>
 80086cc:	2303      	movs	r3, #3
 80086ce:	e033      	b.n	8008738 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xb4>

   uint16_t *values[6] = { &moCode, &moMSN, &mtCode, &mtMSN, &mtLen, &mtRemaining };
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	613b      	str	r3, [r7, #16]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	617b      	str	r3, [r7, #20]
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	61bb      	str	r3, [r7, #24]
 80086dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80086de:	61fb      	str	r3, [r7, #28]
 80086e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086e2:	623b      	str	r3, [r7, #32]
 80086e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80086e6:	627b      	str	r3, [r7, #36]	; 0x24
   for (int i=0; i<6; ++i)
 80086e8:	2300      	movs	r3, #0
 80086ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086ee:	2b05      	cmp	r3, #5
 80086f0:	dc21      	bgt.n	8008736 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xb2>
   {
      char *p = strtok(i == 0 ? sbdixResponseBuf : NULL, ", ");
 80086f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d102      	bne.n	80086fe <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x7a>
 80086f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80086fc:	e000      	b.n	8008700 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x7c>
 80086fe:	2300      	movs	r3, #0
 8008700:	4912      	ldr	r1, [pc, #72]	; (800874c <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xc8>)
 8008702:	4618      	mov	r0, r3
 8008704:	f014 fb98 	bl	801ce38 <strtok>
 8008708:	64b8      	str	r0, [r7, #72]	; 0x48
      if (p == NULL)
 800870a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800870c:	2b00      	cmp	r3, #0
 800870e:	d101      	bne.n	8008714 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x90>
         return ISBD_PROTOCOL_ERROR;
 8008710:	2303      	movs	r3, #3
 8008712:	e011      	b.n	8008738 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xb4>
      *values[i] = atol(p);
 8008714:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8008716:	f011 ff30 	bl	801a57a <atol>
 800871a:	4602      	mov	r2, r0
 800871c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8008724:	440b      	add	r3, r1
 8008726:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800872a:	b292      	uxth	r2, r2
 800872c:	801a      	strh	r2, [r3, #0]
   for (int i=0; i<6; ++i)
 800872e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008730:	3301      	adds	r3, #1
 8008732:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008734:	e7da      	b.n	80086ec <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x68>
   }
   return ISBD_SUCCESS;
 8008736:	2300      	movs	r3, #0
}
 8008738:	4618      	mov	r0, r3
 800873a:	3750      	adds	r7, #80	; 0x50
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}
 8008740:	08021e34 	.word	0x08021e34
 8008744:	080218d8 	.word	0x080218d8
 8008748:	08021e40 	.word	0x08021e40
 800874c:	08021e4c 	.word	0x08021e4c

08008750 <_ZN10IridiumSBD7doSBDRBEPhPj>:

int IridiumSBD::doSBDRB(uint8_t *rxBuffer, size_t *prxBufferSize)
{
 8008750:	b590      	push	{r4, r7, lr}
 8008752:	b08b      	sub	sp, #44	; 0x2c
 8008754:	af02      	add	r7, sp, #8
 8008756:	60f8      	str	r0, [r7, #12]
 8008758:	60b9      	str	r1, [r7, #8]
 800875a:	607a      	str	r2, [r7, #4]
   bool rxOverflow = false;
 800875c:	2300      	movs	r3, #0
 800875e:	77fb      	strb	r3, [r7, #31]

   send(F("AT+SBDRB\r"));
 8008760:	2301      	movs	r3, #1
 8008762:	2201      	movs	r2, #1
 8008764:	49a2      	ldr	r1, [pc, #648]	; (80089f0 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2a0>)
 8008766:	68f8      	ldr	r0, [r7, #12]
 8008768:	f000 fb00 	bl	8008d6c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(NULL, 0, NULL, "AT+SBDRB\r")) // waits for its own echo
 800876c:	4ba0      	ldr	r3, [pc, #640]	; (80089f0 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2a0>)
 800876e:	9300      	str	r3, [sp, #0]
 8008770:	2300      	movs	r3, #0
 8008772:	2200      	movs	r2, #0
 8008774:	2100      	movs	r1, #0
 8008776:	68f8      	ldr	r0, [r7, #12]
 8008778:	f7ff fe96 	bl	80084a8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 800877c:	4603      	mov	r3, r0
 800877e:	f083 0301 	eor.w	r3, r3, #1
 8008782:	b2db      	uxtb	r3, r3
 8008784:	2b00      	cmp	r3, #0
 8008786:	d009      	beq.n	800879c <_ZN10IridiumSBD7doSBDRBEPhPj+0x4c>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8008788:	68f8      	ldr	r0, [r7, #12]
 800878a:	f7ff ff4b 	bl	8008624 <_ZN10IridiumSBD9cancelledEv>
 800878e:	4603      	mov	r3, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d001      	beq.n	8008798 <_ZN10IridiumSBD7doSBDRBEPhPj+0x48>
 8008794:	2304      	movs	r3, #4
 8008796:	e223      	b.n	8008be0 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
 8008798:	2303      	movs	r3, #3
 800879a:	e221      	b.n	8008be0 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>

   if(!this->useSerial) check9603data(); // Check for any 9603 serial data
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	7c5b      	ldrb	r3, [r3, #17]
 80087a0:	f083 0301 	eor.w	r3, r3, #1
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d002      	beq.n	80087b0 <_ZN10IridiumSBD7doSBDRBEPhPj+0x60>
 80087aa:	68f8      	ldr	r0, [r7, #12]
 80087ac:	f000 fe7c 	bl	80094a8 <_ZN10IridiumSBD13check9603dataEv>

   // Time to read the binary data: size[2], body[size], checksum[2]
   unsigned long start = millis();
 80087b0:	f003 fe9e 	bl	800c4f0 <HAL_GetTick>
 80087b4:	6138      	str	r0, [r7, #16]
   while (millis() - start < 1000UL * atTimeout)
 80087b6:	f003 fe9b 	bl	800c4f0 <HAL_GetTick>
 80087ba:	4602      	mov	r2, r0
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	1ad2      	subs	r2, r2, r3
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087c4:	4619      	mov	r1, r3
 80087c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80087ca:	fb03 f301 	mul.w	r3, r3, r1
 80087ce:	429a      	cmp	r2, r3
 80087d0:	bf34      	ite	cc
 80087d2:	2301      	movcc	r3, #1
 80087d4:	2300      	movcs	r3, #0
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d03c      	beq.n	8008856 <_ZN10IridiumSBD7doSBDRBEPhPj+0x106>
   {
      if(!this->useSerial) check9603data(); // Keep checking for new 9603 serial data
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	7c5b      	ldrb	r3, [r3, #17]
 80087e0:	f083 0301 	eor.w	r3, r3, #1
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d002      	beq.n	80087f0 <_ZN10IridiumSBD7doSBDRBEPhPj+0xa0>
 80087ea:	68f8      	ldr	r0, [r7, #12]
 80087ec:	f000 fe5c 	bl	80094a8 <_ZN10IridiumSBD13check9603dataEv>
      if (cancelled())
 80087f0:	68f8      	ldr	r0, [r7, #12]
 80087f2:	f7ff ff17 	bl	8008624 <_ZN10IridiumSBD9cancelledEv>
 80087f6:	4603      	mov	r3, r0
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d001      	beq.n	8008800 <_ZN10IridiumSBD7doSBDRBEPhPj+0xb0>
         return ISBD_CANCELLED;
 80087fc:	2304      	movs	r3, #4
 80087fe:	e1ef      	b.n	8008be0 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
      if (this->useSerial && (stream->available() >= 2))
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	7c5b      	ldrb	r3, [r3, #17]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d00d      	beq.n	8008824 <_ZN10IridiumSBD7doSBDRBEPhPj+0xd4>
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	689a      	ldr	r2, [r3, #8]
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	689b      	ldr	r3, [r3, #8]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	3308      	adds	r3, #8
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4610      	mov	r0, r2
 8008818:	4798      	blx	r3
 800881a:	4603      	mov	r3, r0
 800881c:	2b01      	cmp	r3, #1
 800881e:	dd01      	ble.n	8008824 <_ZN10IridiumSBD7doSBDRBEPhPj+0xd4>
 8008820:	2301      	movs	r3, #1
 8008822:	e000      	b.n	8008826 <_ZN10IridiumSBD7doSBDRBEPhPj+0xd6>
 8008824:	2300      	movs	r3, #0
 8008826:	2b00      	cmp	r3, #0
 8008828:	d112      	bne.n	8008850 <_ZN10IridiumSBD7doSBDRBEPhPj+0x100>
         break;
      if ((!this->useSerial) && (i2cSerAvailable() >= 2))
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	7c5b      	ldrb	r3, [r3, #17]
 800882e:	f083 0301 	eor.w	r3, r3, #1
 8008832:	b2db      	uxtb	r3, r3
 8008834:	2b00      	cmp	r3, #0
 8008836:	d007      	beq.n	8008848 <_ZN10IridiumSBD7doSBDRBEPhPj+0xf8>
 8008838:	68f8      	ldr	r0, [r7, #12]
 800883a:	f000 ff65 	bl	8009708 <_ZN10IridiumSBD15i2cSerAvailableEv>
 800883e:	4603      	mov	r3, r0
 8008840:	2b01      	cmp	r3, #1
 8008842:	dd01      	ble.n	8008848 <_ZN10IridiumSBD7doSBDRBEPhPj+0xf8>
 8008844:	2301      	movs	r3, #1
 8008846:	e000      	b.n	800884a <_ZN10IridiumSBD7doSBDRBEPhPj+0xfa>
 8008848:	2300      	movs	r3, #0
 800884a:	2b00      	cmp	r3, #0
 800884c:	d102      	bne.n	8008854 <_ZN10IridiumSBD7doSBDRBEPhPj+0x104>
   while (millis() - start < 1000UL * atTimeout)
 800884e:	e7b2      	b.n	80087b6 <_ZN10IridiumSBD7doSBDRBEPhPj+0x66>
         break;
 8008850:	bf00      	nop
 8008852:	e000      	b.n	8008856 <_ZN10IridiumSBD7doSBDRBEPhPj+0x106>
         break;
 8008854:	bf00      	nop
   }

   if (this->useSerial && (stream->available() < 2))
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	7c5b      	ldrb	r3, [r3, #17]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d00d      	beq.n	800887a <_ZN10IridiumSBD7doSBDRBEPhPj+0x12a>
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	689a      	ldr	r2, [r3, #8]
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	689b      	ldr	r3, [r3, #8]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	3308      	adds	r3, #8
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4610      	mov	r0, r2
 800886e:	4798      	blx	r3
 8008870:	4603      	mov	r3, r0
 8008872:	2b01      	cmp	r3, #1
 8008874:	dc01      	bgt.n	800887a <_ZN10IridiumSBD7doSBDRBEPhPj+0x12a>
 8008876:	2301      	movs	r3, #1
 8008878:	e000      	b.n	800887c <_ZN10IridiumSBD7doSBDRBEPhPj+0x12c>
 800887a:	2300      	movs	r3, #0
 800887c:	2b00      	cmp	r3, #0
 800887e:	d001      	beq.n	8008884 <_ZN10IridiumSBD7doSBDRBEPhPj+0x134>
      return ISBD_SENDRECEIVE_TIMEOUT;
 8008880:	2307      	movs	r3, #7
 8008882:	e1ad      	b.n	8008be0 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
   if ((!this->useSerial) && (i2cSerAvailable() < 2))
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	7c5b      	ldrb	r3, [r3, #17]
 8008888:	f083 0301 	eor.w	r3, r3, #1
 800888c:	b2db      	uxtb	r3, r3
 800888e:	2b00      	cmp	r3, #0
 8008890:	d007      	beq.n	80088a2 <_ZN10IridiumSBD7doSBDRBEPhPj+0x152>
 8008892:	68f8      	ldr	r0, [r7, #12]
 8008894:	f000 ff38 	bl	8009708 <_ZN10IridiumSBD15i2cSerAvailableEv>
 8008898:	4603      	mov	r3, r0
 800889a:	2b01      	cmp	r3, #1
 800889c:	dc01      	bgt.n	80088a2 <_ZN10IridiumSBD7doSBDRBEPhPj+0x152>
 800889e:	2301      	movs	r3, #1
 80088a0:	e000      	b.n	80088a4 <_ZN10IridiumSBD7doSBDRBEPhPj+0x154>
 80088a2:	2300      	movs	r3, #0
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d001      	beq.n	80088ac <_ZN10IridiumSBD7doSBDRBEPhPj+0x15c>
      return ISBD_SENDRECEIVE_TIMEOUT;
 80088a8:	2307      	movs	r3, #7
 80088aa:	e199      	b.n	8008be0 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>

   uint16_t size;
   if (this->useSerial)
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	7c5b      	ldrb	r3, [r3, #17]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d01a      	beq.n	80088ea <_ZN10IridiumSBD7doSBDRBEPhPj+0x19a>
   {
      size = 256 * stream->read() + stream->read();
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	689a      	ldr	r2, [r3, #8]
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	689b      	ldr	r3, [r3, #8]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	330c      	adds	r3, #12
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4610      	mov	r0, r2
 80088c4:	4798      	blx	r3
 80088c6:	4603      	mov	r3, r0
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	021b      	lsls	r3, r3, #8
 80088cc:	b29c      	uxth	r4, r3
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	689a      	ldr	r2, [r3, #8]
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	689b      	ldr	r3, [r3, #8]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	330c      	adds	r3, #12
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4610      	mov	r0, r2
 80088de:	4798      	blx	r3
 80088e0:	4603      	mov	r3, r0
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	4423      	add	r3, r4
 80088e6:	83bb      	strh	r3, [r7, #28]
 80088e8:	e00d      	b.n	8008906 <_ZN10IridiumSBD7doSBDRBEPhPj+0x1b6>
   }
   else
   {
      size = 256 * i2cSerRead() + i2cSerRead();
 80088ea:	68f8      	ldr	r0, [r7, #12]
 80088ec:	f000 ff24 	bl	8009738 <_ZN10IridiumSBD10i2cSerReadEv>
 80088f0:	4603      	mov	r3, r0
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	021b      	lsls	r3, r3, #8
 80088f6:	b29c      	uxth	r4, r3
 80088f8:	68f8      	ldr	r0, [r7, #12]
 80088fa:	f000 ff1d 	bl	8009738 <_ZN10IridiumSBD10i2cSerReadEv>
 80088fe:	4603      	mov	r3, r0
 8008900:	b29b      	uxth	r3, r3
 8008902:	4423      	add	r3, r4
 8008904:	83bb      	strh	r3, [r7, #28]
   }
   consoleprint(F("[Binary size:"));
 8008906:	493b      	ldr	r1, [pc, #236]	; (80089f4 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2a4>)
 8008908:	68f8      	ldr	r0, [r7, #12]
 800890a:	f000 fc05 	bl	8009118 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(size);
 800890e:	8bbb      	ldrh	r3, [r7, #28]
 8008910:	4619      	mov	r1, r3
 8008912:	68f8      	ldr	r0, [r7, #12]
 8008914:	f000 fc38 	bl	8009188 <_ZN10IridiumSBD12consoleprintEt>
   consoleprint(F("]"));
 8008918:	4937      	ldr	r1, [pc, #220]	; (80089f8 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2a8>)
 800891a:	68f8      	ldr	r0, [r7, #12]
 800891c:	f000 fbfc 	bl	8009118 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>

   for (uint16_t bytesRead = 0; bytesRead < size;)
 8008920:	2300      	movs	r3, #0
 8008922:	837b      	strh	r3, [r7, #26]
 8008924:	8b7a      	ldrh	r2, [r7, #26]
 8008926:	8bbb      	ldrh	r3, [r7, #28]
 8008928:	429a      	cmp	r2, r3
 800892a:	d27f      	bcs.n	8008a2c <_ZN10IridiumSBD7doSBDRBEPhPj+0x2dc>
   {
      if (cancelled())
 800892c:	68f8      	ldr	r0, [r7, #12]
 800892e:	f7ff fe79 	bl	8008624 <_ZN10IridiumSBD9cancelledEv>
 8008932:	4603      	mov	r3, r0
 8008934:	2b00      	cmp	r3, #0
 8008936:	d001      	beq.n	800893c <_ZN10IridiumSBD7doSBDRBEPhPj+0x1ec>
         return ISBD_CANCELLED;
 8008938:	2304      	movs	r3, #4
 800893a:	e151      	b.n	8008be0 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>

      if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	7c5b      	ldrb	r3, [r3, #17]
 8008940:	f083 0301 	eor.w	r3, r3, #1
 8008944:	b2db      	uxtb	r3, r3
 8008946:	2b00      	cmp	r3, #0
 8008948:	d002      	beq.n	8008950 <_ZN10IridiumSBD7doSBDRBEPhPj+0x200>
 800894a:	68f8      	ldr	r0, [r7, #12]
 800894c:	f000 fdac 	bl	80094a8 <_ZN10IridiumSBD13check9603dataEv>

      if ((this->useSerial && (stream->available())) || ((!this->useSerial) && i2cSerAvailable()))
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	7c5b      	ldrb	r3, [r3, #17]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d00b      	beq.n	8008970 <_ZN10IridiumSBD7doSBDRBEPhPj+0x220>
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	689a      	ldr	r2, [r3, #8]
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	3308      	adds	r3, #8
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4610      	mov	r0, r2
 8008968:	4798      	blx	r3
 800896a:	4603      	mov	r3, r0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d10c      	bne.n	800898a <_ZN10IridiumSBD7doSBDRBEPhPj+0x23a>
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	7c5b      	ldrb	r3, [r3, #17]
 8008974:	f083 0301 	eor.w	r3, r3, #1
 8008978:	b2db      	uxtb	r3, r3
 800897a:	2b00      	cmp	r3, #0
 800897c:	d007      	beq.n	800898e <_ZN10IridiumSBD7doSBDRBEPhPj+0x23e>
 800897e:	68f8      	ldr	r0, [r7, #12]
 8008980:	f000 fec2 	bl	8009708 <_ZN10IridiumSBD15i2cSerAvailableEv>
 8008984:	4603      	mov	r3, r0
 8008986:	2b00      	cmp	r3, #0
 8008988:	d001      	beq.n	800898e <_ZN10IridiumSBD7doSBDRBEPhPj+0x23e>
 800898a:	2301      	movs	r3, #1
 800898c:	e000      	b.n	8008990 <_ZN10IridiumSBD7doSBDRBEPhPj+0x240>
 800898e:	2300      	movs	r3, #0
 8008990:	2b00      	cmp	r3, #0
 8008992:	d035      	beq.n	8008a00 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2b0>
      {
         uint8_t c;
         if (this->useSerial)
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	7c5b      	ldrb	r3, [r3, #17]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d00b      	beq.n	80089b4 <_ZN10IridiumSBD7doSBDRBEPhPj+0x264>
         {
            c = stream->read();
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	689a      	ldr	r2, [r3, #8]
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	330c      	adds	r3, #12
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4610      	mov	r0, r2
 80089ac:	4798      	blx	r3
 80089ae:	4603      	mov	r3, r0
 80089b0:	767b      	strb	r3, [r7, #25]
 80089b2:	e004      	b.n	80089be <_ZN10IridiumSBD7doSBDRBEPhPj+0x26e>
         }
         else
         {
            c = i2cSerRead();
 80089b4:	68f8      	ldr	r0, [r7, #12]
 80089b6:	f000 febf 	bl	8009738 <_ZN10IridiumSBD10i2cSerReadEv>
 80089ba:	4603      	mov	r3, r0
 80089bc:	767b      	strb	r3, [r7, #25]
         }
         bytesRead++;
 80089be:	8b7b      	ldrh	r3, [r7, #26]
 80089c0:	3301      	adds	r3, #1
 80089c2:	837b      	strh	r3, [r7, #26]
         if (rxBuffer && prxBufferSize)
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d01a      	beq.n	8008a00 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2b0>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d017      	beq.n	8008a00 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2b0>
         {
            if (*prxBufferSize > 0)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d011      	beq.n	80089fc <_ZN10IridiumSBD7doSBDRBEPhPj+0x2ac>
            {
               *rxBuffer++ = c;
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	1c5a      	adds	r2, r3, #1
 80089dc:	60ba      	str	r2, [r7, #8]
 80089de:	7e7a      	ldrb	r2, [r7, #25]
 80089e0:	701a      	strb	r2, [r3, #0]
               (*prxBufferSize)--;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	1e5a      	subs	r2, r3, #1
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	601a      	str	r2, [r3, #0]
 80089ec:	e008      	b.n	8008a00 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2b0>
 80089ee:	bf00      	nop
 80089f0:	08021e50 	.word	0x08021e50
 80089f4:	08021e5c 	.word	0x08021e5c
 80089f8:	08021e6c 	.word	0x08021e6c
            }
            else
            {
               rxOverflow = true;
 80089fc:	2301      	movs	r3, #1
 80089fe:	77fb      	strb	r3, [r7, #31]
            }
         }
      }

      if (millis() - start >= 1000UL * atTimeout)
 8008a00:	f003 fd76 	bl	800c4f0 <HAL_GetTick>
 8008a04:	4602      	mov	r2, r0
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	1ad2      	subs	r2, r2, r3
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a0e:	4619      	mov	r1, r3
 8008a10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008a14:	fb03 f301 	mul.w	r3, r3, r1
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	bf2c      	ite	cs
 8008a1c:	2301      	movcs	r3, #1
 8008a1e:	2300      	movcc	r3, #0
 8008a20:	b2db      	uxtb	r3, r3
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	f43f af7e 	beq.w	8008924 <_ZN10IridiumSBD7doSBDRBEPhPj+0x1d4>
         return ISBD_SENDRECEIVE_TIMEOUT;
 8008a28:	2307      	movs	r3, #7
 8008a2a:	e0d9      	b.n	8008be0 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
   }

   while (millis() - start < 1000UL * atTimeout)
 8008a2c:	f003 fd60 	bl	800c4f0 <HAL_GetTick>
 8008a30:	4602      	mov	r2, r0
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	1ad2      	subs	r2, r2, r3
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008a40:	fb03 f301 	mul.w	r3, r3, r1
 8008a44:	429a      	cmp	r2, r3
 8008a46:	bf34      	ite	cc
 8008a48:	2301      	movcc	r3, #1
 8008a4a:	2300      	movcs	r3, #0
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d03c      	beq.n	8008acc <_ZN10IridiumSBD7doSBDRBEPhPj+0x37c>
   {
      if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	7c5b      	ldrb	r3, [r3, #17]
 8008a56:	f083 0301 	eor.w	r3, r3, #1
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d002      	beq.n	8008a66 <_ZN10IridiumSBD7doSBDRBEPhPj+0x316>
 8008a60:	68f8      	ldr	r0, [r7, #12]
 8008a62:	f000 fd21 	bl	80094a8 <_ZN10IridiumSBD13check9603dataEv>
      if (cancelled())
 8008a66:	68f8      	ldr	r0, [r7, #12]
 8008a68:	f7ff fddc 	bl	8008624 <_ZN10IridiumSBD9cancelledEv>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d001      	beq.n	8008a76 <_ZN10IridiumSBD7doSBDRBEPhPj+0x326>
         return ISBD_CANCELLED;
 8008a72:	2304      	movs	r3, #4
 8008a74:	e0b4      	b.n	8008be0 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
      if (this->useSerial && (stream->available() >= 2))
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	7c5b      	ldrb	r3, [r3, #17]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00d      	beq.n	8008a9a <_ZN10IridiumSBD7doSBDRBEPhPj+0x34a>
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	689a      	ldr	r2, [r3, #8]
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	3308      	adds	r3, #8
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4610      	mov	r0, r2
 8008a8e:	4798      	blx	r3
 8008a90:	4603      	mov	r3, r0
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	dd01      	ble.n	8008a9a <_ZN10IridiumSBD7doSBDRBEPhPj+0x34a>
 8008a96:	2301      	movs	r3, #1
 8008a98:	e000      	b.n	8008a9c <_ZN10IridiumSBD7doSBDRBEPhPj+0x34c>
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d112      	bne.n	8008ac6 <_ZN10IridiumSBD7doSBDRBEPhPj+0x376>
         break;
      if ((!this->useSerial) && (i2cSerAvailable() >= 2))
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	7c5b      	ldrb	r3, [r3, #17]
 8008aa4:	f083 0301 	eor.w	r3, r3, #1
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d007      	beq.n	8008abe <_ZN10IridiumSBD7doSBDRBEPhPj+0x36e>
 8008aae:	68f8      	ldr	r0, [r7, #12]
 8008ab0:	f000 fe2a 	bl	8009708 <_ZN10IridiumSBD15i2cSerAvailableEv>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	dd01      	ble.n	8008abe <_ZN10IridiumSBD7doSBDRBEPhPj+0x36e>
 8008aba:	2301      	movs	r3, #1
 8008abc:	e000      	b.n	8008ac0 <_ZN10IridiumSBD7doSBDRBEPhPj+0x370>
 8008abe:	2300      	movs	r3, #0
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d102      	bne.n	8008aca <_ZN10IridiumSBD7doSBDRBEPhPj+0x37a>
   while (millis() - start < 1000UL * atTimeout)
 8008ac4:	e7b2      	b.n	8008a2c <_ZN10IridiumSBD7doSBDRBEPhPj+0x2dc>
         break;
 8008ac6:	bf00      	nop
 8008ac8:	e000      	b.n	8008acc <_ZN10IridiumSBD7doSBDRBEPhPj+0x37c>
         break;
 8008aca:	bf00      	nop
   }

   if (this->useSerial && (stream->available() < 2))
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	7c5b      	ldrb	r3, [r3, #17]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d00d      	beq.n	8008af0 <_ZN10IridiumSBD7doSBDRBEPhPj+0x3a0>
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	689a      	ldr	r2, [r3, #8]
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	689b      	ldr	r3, [r3, #8]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	3308      	adds	r3, #8
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4610      	mov	r0, r2
 8008ae4:	4798      	blx	r3
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	dc01      	bgt.n	8008af0 <_ZN10IridiumSBD7doSBDRBEPhPj+0x3a0>
 8008aec:	2301      	movs	r3, #1
 8008aee:	e000      	b.n	8008af2 <_ZN10IridiumSBD7doSBDRBEPhPj+0x3a2>
 8008af0:	2300      	movs	r3, #0
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d001      	beq.n	8008afa <_ZN10IridiumSBD7doSBDRBEPhPj+0x3aa>
      return ISBD_SENDRECEIVE_TIMEOUT;
 8008af6:	2307      	movs	r3, #7
 8008af8:	e072      	b.n	8008be0 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
   if ((!this->useSerial) && (i2cSerAvailable() < 2))
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	7c5b      	ldrb	r3, [r3, #17]
 8008afe:	f083 0301 	eor.w	r3, r3, #1
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d007      	beq.n	8008b18 <_ZN10IridiumSBD7doSBDRBEPhPj+0x3c8>
 8008b08:	68f8      	ldr	r0, [r7, #12]
 8008b0a:	f000 fdfd 	bl	8009708 <_ZN10IridiumSBD15i2cSerAvailableEv>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	dc01      	bgt.n	8008b18 <_ZN10IridiumSBD7doSBDRBEPhPj+0x3c8>
 8008b14:	2301      	movs	r3, #1
 8008b16:	e000      	b.n	8008b1a <_ZN10IridiumSBD7doSBDRBEPhPj+0x3ca>
 8008b18:	2300      	movs	r3, #0
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d001      	beq.n	8008b22 <_ZN10IridiumSBD7doSBDRBEPhPj+0x3d2>
      return ISBD_SENDRECEIVE_TIMEOUT;
 8008b1e:	2307      	movs	r3, #7
 8008b20:	e05e      	b.n	8008be0 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>

   uint16_t checksum;
   if (this->useSerial)
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	7c5b      	ldrb	r3, [r3, #17]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d01a      	beq.n	8008b60 <_ZN10IridiumSBD7doSBDRBEPhPj+0x410>
   {
      checksum = 256 * stream->read() + stream->read();
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	689a      	ldr	r2, [r3, #8]
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	330c      	adds	r3, #12
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4610      	mov	r0, r2
 8008b3a:	4798      	blx	r3
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	021b      	lsls	r3, r3, #8
 8008b42:	b29c      	uxth	r4, r3
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	689a      	ldr	r2, [r3, #8]
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	330c      	adds	r3, #12
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4610      	mov	r0, r2
 8008b54:	4798      	blx	r3
 8008b56:	4603      	mov	r3, r0
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	4423      	add	r3, r4
 8008b5c:	82fb      	strh	r3, [r7, #22]
 8008b5e:	e00d      	b.n	8008b7c <_ZN10IridiumSBD7doSBDRBEPhPj+0x42c>
   }
   else
   {
      checksum = 256 * i2cSerRead() + i2cSerRead();
 8008b60:	68f8      	ldr	r0, [r7, #12]
 8008b62:	f000 fde9 	bl	8009738 <_ZN10IridiumSBD10i2cSerReadEv>
 8008b66:	4603      	mov	r3, r0
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	021b      	lsls	r3, r3, #8
 8008b6c:	b29c      	uxth	r4, r3
 8008b6e:	68f8      	ldr	r0, [r7, #12]
 8008b70:	f000 fde2 	bl	8009738 <_ZN10IridiumSBD10i2cSerReadEv>
 8008b74:	4603      	mov	r3, r0
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	4423      	add	r3, r4
 8008b7a:	82fb      	strh	r3, [r7, #22]
   }
   consoleprint(F("[csum:"));
 8008b7c:	491a      	ldr	r1, [pc, #104]	; (8008be8 <_ZN10IridiumSBD7doSBDRBEPhPj+0x498>)
 8008b7e:	68f8      	ldr	r0, [r7, #12]
 8008b80:	f000 faca 	bl	8009118 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(checksum);
 8008b84:	8afb      	ldrh	r3, [r7, #22]
 8008b86:	4619      	mov	r1, r3
 8008b88:	68f8      	ldr	r0, [r7, #12]
 8008b8a:	f000 fafd 	bl	8009188 <_ZN10IridiumSBD12consoleprintEt>
   consoleprint(F("]"));
 8008b8e:	4917      	ldr	r1, [pc, #92]	; (8008bec <_ZN10IridiumSBD7doSBDRBEPhPj+0x49c>)
 8008b90:	68f8      	ldr	r0, [r7, #12]
 8008b92:	f000 fac1 	bl	8009118 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>

   // Return actual size of returned buffer
   if (prxBufferSize)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d002      	beq.n	8008ba2 <_ZN10IridiumSBD7doSBDRBEPhPj+0x452>
      *prxBufferSize = (size_t)size;
 8008b9c:	8bba      	ldrh	r2, [r7, #28]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	601a      	str	r2, [r3, #0]

   // Wait for final OK
   if (!waitForATResponse())
 8008ba2:	4b13      	ldr	r3, [pc, #76]	; (8008bf0 <_ZN10IridiumSBD7doSBDRBEPhPj+0x4a0>)
 8008ba4:	9300      	str	r3, [sp, #0]
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	2200      	movs	r2, #0
 8008baa:	2100      	movs	r1, #0
 8008bac:	68f8      	ldr	r0, [r7, #12]
 8008bae:	f7ff fc7b 	bl	80084a8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	f083 0301 	eor.w	r3, r3, #1
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d009      	beq.n	8008bd2 <_ZN10IridiumSBD7doSBDRBEPhPj+0x482>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8008bbe:	68f8      	ldr	r0, [r7, #12]
 8008bc0:	f7ff fd30 	bl	8008624 <_ZN10IridiumSBD9cancelledEv>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d001      	beq.n	8008bce <_ZN10IridiumSBD7doSBDRBEPhPj+0x47e>
 8008bca:	2304      	movs	r3, #4
 8008bcc:	e008      	b.n	8008be0 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
 8008bce:	2303      	movs	r3, #3
 8008bd0:	e006      	b.n	8008be0 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>

   return rxOverflow ? ISBD_RX_OVERFLOW : ISBD_SUCCESS;
 8008bd2:	7ffb      	ldrb	r3, [r7, #31]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d001      	beq.n	8008bdc <_ZN10IridiumSBD7doSBDRBEPhPj+0x48c>
 8008bd8:	2308      	movs	r3, #8
 8008bda:	e000      	b.n	8008bde <_ZN10IridiumSBD7doSBDRBEPhPj+0x48e>
 8008bdc:	2300      	movs	r3, #0
 8008bde:	bf00      	nop
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3724      	adds	r7, #36	; 0x24
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd90      	pop	{r4, r7, pc}
 8008be8:	08021e70 	.word	0x08021e70
 8008bec:	08021e6c 	.word	0x08021e6c
 8008bf0:	080218d8 	.word	0x080218d8

08008bf4 <_ZN10IridiumSBD5powerEb>:

void IridiumSBD::power(bool on)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	70fb      	strb	r3, [r7, #3]
   this->asleep = !on;
 8008c00:	78fb      	ldrb	r3, [r7, #3]
 8008c02:	f083 0301 	eor.w	r3, r3, #1
 8008c06:	b2da      	uxtb	r2, r3
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

   if (this->useSerial)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	7c5b      	ldrb	r3, [r3, #17]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d010      	beq.n	8008c38 <_ZN10IridiumSBD5powerEb+0x44>
   {
      if (this->sleepPin == -1)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c1e:	d04a      	beq.n	8008cb6 <_ZN10IridiumSBD5powerEb+0xc2>
      {
         return;
      }
      else
      {
          if (this->sleepPinConfigured == false)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d106      	bne.n	8008c38 <_ZN10IridiumSBD5powerEb+0x44>
          {
             configureSleepPin();
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 f84c 	bl	8008cc8 <_ZN10IridiumSBD17configureSleepPinEv>
             this->sleepPinConfigured = true;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2201      	movs	r2, #1
 8008c34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          }
      }
   }

   if (on)
 8008c38:	78fb      	ldrb	r3, [r7, #3]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d017      	beq.n	8008c6e <_ZN10IridiumSBD5powerEb+0x7a>
   {
      diagprint(F("Powering on modem...\r\n"));
 8008c3e:	4920      	ldr	r1, [pc, #128]	; (8008cc0 <_ZN10IridiumSBD5powerEb+0xcc>)
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 fa11 	bl	8009068 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	7c5b      	ldrb	r3, [r3, #17]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d004      	beq.n	8008c58 <_ZN10IridiumSBD5powerEb+0x64>
      {
         setSleepPin(HIGH); // HIGH = awake
 8008c4e:	2101      	movs	r1, #1
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 f847 	bl	8008ce4 <_ZN10IridiumSBD11setSleepPinEh>
 8008c56:	e003      	b.n	8008c60 <_ZN10IridiumSBD5powerEb+0x6c>
      }
      else
      {
         enable9603(true);
 8008c58:	2101      	movs	r1, #1
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f7fe fe24 	bl	80078a8 <_ZN10IridiumSBD10enable9603Eb>
      }
      lastPowerOnTime = millis();
 8008c60:	f003 fc46 	bl	800c4f0 <HAL_GetTick>
 8008c64:	4602      	mov	r2, r0
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8008c6c:	e024      	b.n	8008cb8 <_ZN10IridiumSBD5powerEb+0xc4>
   }
   else
   {
      // Best Practices Guide suggests waiting at least 2 seconds
      // before powering off again
      unsigned long elapsed = millis() - lastPowerOnTime;
 8008c6e:	f003 fc3f 	bl	800c4f0 <HAL_GetTick>
 8008c72:	4602      	mov	r2, r0
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c7a:	1ad3      	subs	r3, r2, r3
 8008c7c:	60fb      	str	r3, [r7, #12]
      if (elapsed < 2000UL)
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008c84:	d205      	bcs.n	8008c92 <_ZN10IridiumSBD5powerEb+0x9e>
         //delay(2000UL - elapsed); TODO
    	  HAL_Delay(2000UL - elapsed);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f003 fc3b 	bl	800c508 <HAL_Delay>

      diagprint(F("Powering off modem...\r\n"));
 8008c92:	490c      	ldr	r1, [pc, #48]	; (8008cc4 <_ZN10IridiumSBD5powerEb+0xd0>)
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 f9e7 	bl	8009068 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	7c5b      	ldrb	r3, [r3, #17]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d004      	beq.n	8008cac <_ZN10IridiumSBD5powerEb+0xb8>
      {
         setSleepPin(LOW); // LOW = asleep
 8008ca2:	2100      	movs	r1, #0
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 f81d 	bl	8008ce4 <_ZN10IridiumSBD11setSleepPinEh>
 8008caa:	e005      	b.n	8008cb8 <_ZN10IridiumSBD5powerEb+0xc4>
      }
      else
      {
         enable9603(false);
 8008cac:	2100      	movs	r1, #0
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f7fe fdfa 	bl	80078a8 <_ZN10IridiumSBD10enable9603Eb>
 8008cb4:	e000      	b.n	8008cb8 <_ZN10IridiumSBD5powerEb+0xc4>
         return;
 8008cb6:	bf00      	nop
      }
   }
}
 8008cb8:	3710      	adds	r7, #16
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	08021e78 	.word	0x08021e78
 8008cc4:	08021e90 	.word	0x08021e90

08008cc8 <_ZN10IridiumSBD17configureSleepPinEv>:

void IridiumSBD::configureSleepPin()
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
	//pinMode(sleepPin, OUTPUT); // Make the sleep pin an output TODO (doesnt work with this)
   //pinMode(sleepPin, OUTPUT_PP); // Make the sleep pin an output
   diagprint(F("configureSleepPin: sleepPin configured\r\n"));
 8008cd0:	4903      	ldr	r1, [pc, #12]	; (8008ce0 <_ZN10IridiumSBD17configureSleepPinEv+0x18>)
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 f9c8 	bl	8009068 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8008cd8:	bf00      	nop
 8008cda:	3708      	adds	r7, #8
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}
 8008ce0:	08021ea8 	.word	0x08021ea8

08008ce4 <_ZN10IridiumSBD11setSleepPinEh>:

void IridiumSBD::setSleepPin(uint8_t enable)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b082      	sub	sp, #8
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	460b      	mov	r3, r1
 8008cee:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(sleepPin_GPIO_Port,sleepPin_Pin,GPIO_PIN_SET);
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	2108      	movs	r1, #8
 8008cf4:	480b      	ldr	r0, [pc, #44]	; (8008d24 <_ZN10IridiumSBD11setSleepPinEh+0x40>)
 8008cf6:	f004 fb13 	bl	800d320 <HAL_GPIO_WritePin>
   //digitalWrite(this->sleepPin, enable); // HIGH = awake, LOW = asleep TODO
   diagprint(F("setSleepPin: sleepPin set "));
 8008cfa:	490b      	ldr	r1, [pc, #44]	; (8008d28 <_ZN10IridiumSBD11setSleepPinEh+0x44>)
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f000 f9b3 	bl	8009068 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   if (enable == HIGH)
 8008d02:	78fb      	ldrb	r3, [r7, #3]
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d104      	bne.n	8008d12 <_ZN10IridiumSBD11setSleepPinEh+0x2e>
      diagprint(F("HIGH\r\n"));
 8008d08:	4908      	ldr	r1, [pc, #32]	; (8008d2c <_ZN10IridiumSBD11setSleepPinEh+0x48>)
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 f9ac 	bl	8009068 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   else
      diagprint(F("LOW\r\n"));
}
 8008d10:	e003      	b.n	8008d1a <_ZN10IridiumSBD11setSleepPinEh+0x36>
      diagprint(F("LOW\r\n"));
 8008d12:	4907      	ldr	r1, [pc, #28]	; (8008d30 <_ZN10IridiumSBD11setSleepPinEh+0x4c>)
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f000 f9a7 	bl	8009068 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8008d1a:	bf00      	nop
 8008d1c:	3708      	adds	r7, #8
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
 8008d22:	bf00      	nop
 8008d24:	40020800 	.word	0x40020800
 8008d28:	08021ed4 	.word	0x08021ed4
 8008d2c:	08021ef0 	.word	0x08021ef0
 8008d30:	08021ef8 	.word	0x08021ef8

08008d34 <_ZN10IridiumSBD15beginSerialPortEv>:

void IridiumSBD::beginSerialPort()
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b082      	sub	sp, #8
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
   diagprint(F("IridiumSBD::beginSerialPort\r\n"));
 8008d3c:	4903      	ldr	r1, [pc, #12]	; (8008d4c <_ZN10IridiumSBD15beginSerialPortEv+0x18>)
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 f992 	bl	8009068 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8008d44:	bf00      	nop
 8008d46:	3708      	adds	r7, #8
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}
 8008d4c:	08021f00 	.word	0x08021f00

08008d50 <_ZN10IridiumSBD13endSerialPortEv>:

void IridiumSBD::endSerialPort()
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b082      	sub	sp, #8
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
   diagprint(F("IridiumSBD::endSerialPort\r\n"));
 8008d58:	4903      	ldr	r1, [pc, #12]	; (8008d68 <_ZN10IridiumSBD13endSerialPortEv+0x18>)
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 f984 	bl	8009068 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8008d60:	bf00      	nop
 8008d62:	3708      	adds	r7, #8
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}
 8008d68:	08021f20 	.word	0x08021f20

08008d6c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>:

void IridiumSBD::send(FlashString str, bool beginLine, bool endLine)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	60f8      	str	r0, [r7, #12]
 8008d74:	60b9      	str	r1, [r7, #8]
 8008d76:	4611      	mov	r1, r2
 8008d78:	461a      	mov	r2, r3
 8008d7a:	460b      	mov	r3, r1
 8008d7c:	71fb      	strb	r3, [r7, #7]
 8008d7e:	4613      	mov	r3, r2
 8008d80:	71bb      	strb	r3, [r7, #6]
   if (beginLine)
 8008d82:	79fb      	ldrb	r3, [r7, #7]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d003      	beq.n	8008d90 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x24>
      consoleprint(F(">> "));
 8008d88:	4923      	ldr	r1, [pc, #140]	; (8008e18 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xac>)
 8008d8a:	68f8      	ldr	r0, [r7, #12]
 8008d8c:	f000 f9c4 	bl	8009118 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(str);
 8008d90:	68b9      	ldr	r1, [r7, #8]
 8008d92:	68f8      	ldr	r0, [r7, #12]
 8008d94:	f000 f9c0 	bl	8009118 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (endLine)
 8008d98:	79bb      	ldrb	r3, [r7, #6]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d003      	beq.n	8008da6 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x3a>
      consoleprint(F("\r\n"));
 8008d9e:	491f      	ldr	r1, [pc, #124]	; (8008e1c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xb0>)
 8008da0:	68f8      	ldr	r0, [r7, #12]
 8008da2:	f000 f9b9 	bl	8009118 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (this->useSerial)
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	7c5b      	ldrb	r3, [r3, #17]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d006      	beq.n	8008dbc <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x50>
   {
      stream->print(str);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	689b      	ldr	r3, [r3, #8]
 8008db2:	68b9      	ldr	r1, [r7, #8]
 8008db4:	4618      	mov	r0, r3
 8008db6:	f001 fa7f 	bl	800a2b8 <_ZN5Print5printEPK19__FlashStringHelper>
      wireport->write(DATA_REG); // Point to the 'serial register'
      wireport->print(str);
      if (wireport->endTransmission() != 0) //Release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 8008dba:	e029      	b.n	8008e10 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xa4>
      lastCheck = millis(); // Update lastCheck so we enforce a full I2C_POLLING_WAIT //TODO Uncommented this line
 8008dbc:	f003 fb98 	bl	800c4f0 <HAL_GetTick>
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	66da      	str	r2, [r3, #108]	; 0x6c
      wireport->beginTransmission((uint8_t)deviceaddress);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	68da      	ldr	r2, [r3, #12]
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	7c1b      	ldrb	r3, [r3, #16]
 8008dce:	4619      	mov	r1, r3
 8008dd0:	4610      	mov	r0, r2
 8008dd2:	f001 fbe5 	bl	800a5a0 <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	68db      	ldr	r3, [r3, #12]
 8008dda:	21ff      	movs	r1, #255	; 0xff
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f7fe faf3 	bl	80073c8 <_ZN7TwoWire5writeEi>
      wireport->print(str);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	68b9      	ldr	r1, [r7, #8]
 8008de8:	4618      	mov	r0, r3
 8008dea:	f001 fa65 	bl	800a2b8 <_ZN5Print5printEPK19__FlashStringHelper>
      if (wireport->endTransmission() != 0) //Release bus
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	68db      	ldr	r3, [r3, #12]
 8008df2:	4618      	mov	r0, r3
 8008df4:	f001 fc1e 	bl	800a634 <_ZN7TwoWire15endTransmissionEv>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	bf14      	ite	ne
 8008dfe:	2301      	movne	r3, #1
 8008e00:	2300      	moveq	r3, #0
 8008e02:	b2db      	uxtb	r3, r3
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d003      	beq.n	8008e10 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xa4>
         diagprint(F("I2C write was not successful!\r\n"));
 8008e08:	4905      	ldr	r1, [pc, #20]	; (8008e20 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xb4>)
 8008e0a:	68f8      	ldr	r0, [r7, #12]
 8008e0c:	f000 f92c 	bl	8009068 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8008e10:	bf00      	nop
 8008e12:	3710      	adds	r7, #16
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}
 8008e18:	08021f3c 	.word	0x08021f3c
 8008e1c:	08021c84 	.word	0x08021c84
 8008e20:	08021d04 	.word	0x08021d04

08008e24 <_ZN10IridiumSBD4sendEPKc>:

void IridiumSBD::send(const char *str)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b082      	sub	sp, #8
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]
   consoleprint(F(">> "));
 8008e2e:	4920      	ldr	r1, [pc, #128]	; (8008eb0 <_ZN10IridiumSBD4sendEPKc+0x8c>)
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f000 f971 	bl	8009118 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(str);
 8008e36:	6839      	ldr	r1, [r7, #0]
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 f98b 	bl	8009154 <_ZN10IridiumSBD12consoleprintEPKc>
   consoleprint(F("\r\n"));
 8008e3e:	491d      	ldr	r1, [pc, #116]	; (8008eb4 <_ZN10IridiumSBD4sendEPKc+0x90>)
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 f969 	bl	8009118 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (this->useSerial)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	7c5b      	ldrb	r3, [r3, #17]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d006      	beq.n	8008e5c <_ZN10IridiumSBD4sendEPKc+0x38>
   {
      stream->print(str);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	689b      	ldr	r3, [r3, #8]
 8008e52:	6839      	ldr	r1, [r7, #0]
 8008e54:	4618      	mov	r0, r3
 8008e56:	f001 fa3d 	bl	800a2d4 <_ZN5Print5printEPKc>
      wireport->write(DATA_REG); // Point to the 'serial register'
      wireport->print(str);
      if (wireport->endTransmission() != 0) //Release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 8008e5a:	e024      	b.n	8008ea6 <_ZN10IridiumSBD4sendEPKc+0x82>
      wireport->beginTransmission((uint8_t)deviceaddress);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	68da      	ldr	r2, [r3, #12]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	7c1b      	ldrb	r3, [r3, #16]
 8008e64:	4619      	mov	r1, r3
 8008e66:	4610      	mov	r0, r2
 8008e68:	f001 fb9a 	bl	800a5a0 <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	68db      	ldr	r3, [r3, #12]
 8008e70:	21ff      	movs	r1, #255	; 0xff
 8008e72:	4618      	mov	r0, r3
 8008e74:	f7fe faa8 	bl	80073c8 <_ZN7TwoWire5writeEi>
      wireport->print(str);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	68db      	ldr	r3, [r3, #12]
 8008e7c:	6839      	ldr	r1, [r7, #0]
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f001 fa28 	bl	800a2d4 <_ZN5Print5printEPKc>
      if (wireport->endTransmission() != 0) //Release bus
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	68db      	ldr	r3, [r3, #12]
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f001 fbd3 	bl	800a634 <_ZN7TwoWire15endTransmissionEv>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	bf14      	ite	ne
 8008e94:	2301      	movne	r3, #1
 8008e96:	2300      	moveq	r3, #0
 8008e98:	b2db      	uxtb	r3, r3
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d003      	beq.n	8008ea6 <_ZN10IridiumSBD4sendEPKc+0x82>
         diagprint(F("I2C write was not successful!\r\n"));
 8008e9e:	4906      	ldr	r1, [pc, #24]	; (8008eb8 <_ZN10IridiumSBD4sendEPKc+0x94>)
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 f8e1 	bl	8009068 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8008ea6:	bf00      	nop
 8008ea8:	3708      	adds	r7, #8
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
 8008eae:	bf00      	nop
 8008eb0:	08021f3c 	.word	0x08021f3c
 8008eb4:	08021c84 	.word	0x08021c84
 8008eb8:	08021d04 	.word	0x08021d04

08008ebc <_ZN10IridiumSBD8sendlongEPKc>:

void IridiumSBD::sendlong(const char *str)
// Send a long string that might need to be broken up for the I2C port
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b086      	sub	sp, #24
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	6039      	str	r1, [r7, #0]
   consoleprint(F(">> "));
 8008ec6:	4942      	ldr	r1, [pc, #264]	; (8008fd0 <_ZN10IridiumSBD8sendlongEPKc+0x114>)
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 f925 	bl	8009118 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   this->print((char*) str);//TODO doesn't print otherwise
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	6838      	ldr	r0, [r7, #0]
 8008ed4:	4798      	blx	r3
   consoleprint(str);
 8008ed6:	6839      	ldr	r1, [r7, #0]
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f000 f93b 	bl	8009154 <_ZN10IridiumSBD12consoleprintEPKc>
   consoleprint(F("\r\n"));
 8008ede:	493d      	ldr	r1, [pc, #244]	; (8008fd4 <_ZN10IridiumSBD8sendlongEPKc+0x118>)
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f000 f919 	bl	8009118 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>

   if (this->useSerial)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	7c5b      	ldrb	r3, [r3, #17]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d006      	beq.n	8008efc <_ZN10IridiumSBD8sendlongEPKc+0x40>
   {
      stream->print(str); // If we are using serial then send it and don't worry about the long length
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	689b      	ldr	r3, [r3, #8]
 8008ef2:	6839      	ldr	r1, [r7, #0]
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f001 f9ed 	bl	800a2d4 <_ZN5Print5printEPKc>
         wireport->write(str[i]);
      }
      if (wireport->endTransmission() != 0) //Send data and release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 8008efa:	e065      	b.n	8008fc8 <_ZN10IridiumSBD8sendlongEPKc+0x10c>
      size_t bytes_to_send = strlen(str); // Send this many bytes in total
 8008efc:	6838      	ldr	r0, [r7, #0]
 8008efe:	f7f7 f981 	bl	8000204 <strlen>
 8008f02:	6178      	str	r0, [r7, #20]
      size_t txDataSize = bytes_to_send;
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	60fb      	str	r3, [r7, #12]
      size_t i=0;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	613b      	str	r3, [r7, #16]
      while (bytes_to_send > (TINY_I2C_BUFFER_LENGTH - 1)) // If there are too many bytes to send all in one go
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	2b1f      	cmp	r3, #31
 8008f10:	d92a      	bls.n	8008f68 <_ZN10IridiumSBD8sendlongEPKc+0xac>
         nexti = i + (TINY_I2C_BUFFER_LENGTH - 1);
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	331f      	adds	r3, #31
 8008f16:	60bb      	str	r3, [r7, #8]
         wireport->beginTransmission((uint8_t)deviceaddress);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	68da      	ldr	r2, [r3, #12]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	7c1b      	ldrb	r3, [r3, #16]
 8008f20:	4619      	mov	r1, r3
 8008f22:	4610      	mov	r0, r2
 8008f24:	f001 fb3c 	bl	800a5a0 <_ZN7TwoWire17beginTransmissionEh>
         wireport->write(DATA_REG); // Point to the 'serial register'
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	68db      	ldr	r3, [r3, #12]
 8008f2c:	21ff      	movs	r1, #255	; 0xff
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f7fe fa4a 	bl	80073c8 <_ZN7TwoWire5writeEi>
         for (; i<nexti; ++i)
 8008f34:	693a      	ldr	r2, [r7, #16]
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d20c      	bcs.n	8008f56 <_ZN10IridiumSBD8sendlongEPKc+0x9a>
            wireport->write(str[i]); // Write each byte
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	68d8      	ldr	r0, [r3, #12]
 8008f40:	683a      	ldr	r2, [r7, #0]
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	4413      	add	r3, r2
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	4619      	mov	r1, r3
 8008f4a:	f7fe fa3d 	bl	80073c8 <_ZN7TwoWire5writeEi>
         for (; i<nexti; ++i)
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	3301      	adds	r3, #1
 8008f52:	613b      	str	r3, [r7, #16]
 8008f54:	e7ee      	b.n	8008f34 <_ZN10IridiumSBD8sendlongEPKc+0x78>
         bytes_to_send = bytes_to_send - (TINY_I2C_BUFFER_LENGTH - 1); // Decrease the number of bytes still to send
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	3b1f      	subs	r3, #31
 8008f5a:	617b      	str	r3, [r7, #20]
         wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	4618      	mov	r0, r3
 8008f62:	f001 fb67 	bl	800a634 <_ZN7TwoWire15endTransmissionEv>
      while (bytes_to_send > (TINY_I2C_BUFFER_LENGTH - 1)) // If there are too many bytes to send all in one go
 8008f66:	e7d1      	b.n	8008f0c <_ZN10IridiumSBD8sendlongEPKc+0x50>
      wireport->beginTransmission((uint8_t)deviceaddress);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	68da      	ldr	r2, [r3, #12]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	7c1b      	ldrb	r3, [r3, #16]
 8008f70:	4619      	mov	r1, r3
 8008f72:	4610      	mov	r0, r2
 8008f74:	f001 fb14 	bl	800a5a0 <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	68db      	ldr	r3, [r3, #12]
 8008f7c:	21ff      	movs	r1, #255	; 0xff
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f7fe fa22 	bl	80073c8 <_ZN7TwoWire5writeEi>
      for (; i<txDataSize; ++i)
 8008f84:	693a      	ldr	r2, [r7, #16]
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d20c      	bcs.n	8008fa6 <_ZN10IridiumSBD8sendlongEPKc+0xea>
         wireport->write(str[i]);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	68d8      	ldr	r0, [r3, #12]
 8008f90:	683a      	ldr	r2, [r7, #0]
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	4413      	add	r3, r2
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	4619      	mov	r1, r3
 8008f9a:	f7fe fa15 	bl	80073c8 <_ZN7TwoWire5writeEi>
      for (; i<txDataSize; ++i)
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	613b      	str	r3, [r7, #16]
 8008fa4:	e7ee      	b.n	8008f84 <_ZN10IridiumSBD8sendlongEPKc+0xc8>
      if (wireport->endTransmission() != 0) //Send data and release bus
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	68db      	ldr	r3, [r3, #12]
 8008faa:	4618      	mov	r0, r3
 8008fac:	f001 fb42 	bl	800a634 <_ZN7TwoWire15endTransmissionEv>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	bf14      	ite	ne
 8008fb6:	2301      	movne	r3, #1
 8008fb8:	2300      	moveq	r3, #0
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d003      	beq.n	8008fc8 <_ZN10IridiumSBD8sendlongEPKc+0x10c>
         diagprint(F("I2C write was not successful!\r\n"));
 8008fc0:	4905      	ldr	r1, [pc, #20]	; (8008fd8 <_ZN10IridiumSBD8sendlongEPKc+0x11c>)
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 f850 	bl	8009068 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8008fc8:	bf00      	nop
 8008fca:	3718      	adds	r7, #24
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}
 8008fd0:	08021f3c 	.word	0x08021f3c
 8008fd4:	08021c84 	.word	0x08021c84
 8008fd8:	08021d04 	.word	0x08021d04

08008fdc <_ZN10IridiumSBD4sendEt>:

void IridiumSBD::send(uint16_t n)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b082      	sub	sp, #8
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	807b      	strh	r3, [r7, #2]
   consoleprint(n);
 8008fe8:	887b      	ldrh	r3, [r7, #2]
 8008fea:	4619      	mov	r1, r3
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 f8cb 	bl	8009188 <_ZN10IridiumSBD12consoleprintEt>
   if (this->useSerial)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	7c5b      	ldrb	r3, [r3, #17]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d008      	beq.n	800900c <_ZN10IridiumSBD4sendEt+0x30>
   {
      stream->print(n);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	689b      	ldr	r3, [r3, #8]
 8008ffe:	4618      	mov	r0, r3
 8009000:	887b      	ldrh	r3, [r7, #2]
 8009002:	220a      	movs	r2, #10
 8009004:	4619      	mov	r1, r3
 8009006:	f001 f985 	bl	800a314 <_ZN5Print5printEii>
      wireport->write(DATA_REG); // Point to the 'serial register'
      wireport->print(n);
      if (wireport->endTransmission() != 0) //Send data and release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 800900a:	e026      	b.n	800905a <_ZN10IridiumSBD4sendEt+0x7e>
      wireport->beginTransmission((uint8_t)deviceaddress);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	68da      	ldr	r2, [r3, #12]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	7c1b      	ldrb	r3, [r3, #16]
 8009014:	4619      	mov	r1, r3
 8009016:	4610      	mov	r0, r2
 8009018:	f001 fac2 	bl	800a5a0 <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	68db      	ldr	r3, [r3, #12]
 8009020:	21ff      	movs	r1, #255	; 0xff
 8009022:	4618      	mov	r0, r3
 8009024:	f7fe f9d0 	bl	80073c8 <_ZN7TwoWire5writeEi>
      wireport->print(n);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	68db      	ldr	r3, [r3, #12]
 800902c:	4618      	mov	r0, r3
 800902e:	887b      	ldrh	r3, [r7, #2]
 8009030:	220a      	movs	r2, #10
 8009032:	4619      	mov	r1, r3
 8009034:	f001 f96e 	bl	800a314 <_ZN5Print5printEii>
      if (wireport->endTransmission() != 0) //Send data and release bus
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	68db      	ldr	r3, [r3, #12]
 800903c:	4618      	mov	r0, r3
 800903e:	f001 faf9 	bl	800a634 <_ZN7TwoWire15endTransmissionEv>
 8009042:	4603      	mov	r3, r0
 8009044:	2b00      	cmp	r3, #0
 8009046:	bf14      	ite	ne
 8009048:	2301      	movne	r3, #1
 800904a:	2300      	moveq	r3, #0
 800904c:	b2db      	uxtb	r3, r3
 800904e:	2b00      	cmp	r3, #0
 8009050:	d003      	beq.n	800905a <_ZN10IridiumSBD4sendEt+0x7e>
         diagprint(F("I2C write was not successful!\r\n"));
 8009052:	4904      	ldr	r1, [pc, #16]	; (8009064 <_ZN10IridiumSBD4sendEt+0x88>)
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 f807 	bl	8009068 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 800905a:	bf00      	nop
 800905c:	3708      	adds	r7, #8
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
 8009062:	bf00      	nop
 8009064:	08021d04 	.word	0x08021d04

08009068 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>:

void IridiumSBD::diagprint(FlashString str)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b084      	sub	sp, #16
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	6039      	str	r1, [r7, #0]
   PGM_P p = reinterpret_cast<PGM_P>(str);
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	60fb      	str	r3, [r7, #12]
   while (1)
   {
      char c = pgm_read_byte(p++);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	1c5a      	adds	r2, r3, #1
 800907a:	60fa      	str	r2, [r7, #12]
 800907c:	781b      	ldrb	r3, [r3, #0]
 800907e:	72fb      	strb	r3, [r7, #11]
      if (c == 0) break;
 8009080:	7afb      	ldrb	r3, [r7, #11]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d005      	beq.n	8009092 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0x2a>
      ISBDDiagsCallback(this, c);
 8009086:	7afb      	ldrb	r3, [r7, #11]
 8009088:	4619      	mov	r1, r3
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f7fe f9c2 	bl	8007414 <_Z17ISBDDiagsCallbackP10IridiumSBDc>
   }
 8009090:	e7f1      	b.n	8009076 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0xe>
      if (c == 0) break;
 8009092:	bf00      	nop

   //TODO
   this->print((char*) str);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	6838      	ldr	r0, [r7, #0]
 800909a:	4798      	blx	r3
}
 800909c:	bf00      	nop
 800909e:	3710      	adds	r7, #16
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <_ZN10IridiumSBD9diagprintEPKc>:

void IridiumSBD::diagprint(const char *str)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b082      	sub	sp, #8
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	6039      	str	r1, [r7, #0]
   while (*str)
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	781b      	ldrb	r3, [r3, #0]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d008      	beq.n	80090c8 <_ZN10IridiumSBD9diagprintEPKc+0x24>
      ISBDDiagsCallback(this, *str++);
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	1c5a      	adds	r2, r3, #1
 80090ba:	603a      	str	r2, [r7, #0]
 80090bc:	781b      	ldrb	r3, [r3, #0]
 80090be:	4619      	mov	r1, r3
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f7fe f9a7 	bl	8007414 <_Z17ISBDDiagsCallbackP10IridiumSBDc>
   while (*str)
 80090c6:	e7f2      	b.n	80090ae <_ZN10IridiumSBD9diagprintEPKc+0xa>

   //TODO
   this->print((char*) str);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	6838      	ldr	r0, [r7, #0]
 80090ce:	4798      	blx	r3
}
 80090d0:	bf00      	nop
 80090d2:	3708      	adds	r7, #8
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <_ZN10IridiumSBD9diagprintEt>:

void IridiumSBD::diagprint(uint16_t n)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b086      	sub	sp, #24
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	460b      	mov	r3, r1
 80090e2:	807b      	strh	r3, [r7, #2]
   char str[10];
   sprintf(str, "%u", n);
 80090e4:	887a      	ldrh	r2, [r7, #2]
 80090e6:	f107 030c 	add.w	r3, r7, #12
 80090ea:	490a      	ldr	r1, [pc, #40]	; (8009114 <_ZN10IridiumSBD9diagprintEt+0x3c>)
 80090ec:	4618      	mov	r0, r3
 80090ee:	f012 ffbf 	bl	801c070 <siprintf>
   diagprint(str);
 80090f2:	f107 030c 	add.w	r3, r7, #12
 80090f6:	4619      	mov	r1, r3
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f7ff ffd3 	bl	80090a4 <_ZN10IridiumSBD9diagprintEPKc>

   //TODO
   this->print((char*) str);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f107 020c 	add.w	r2, r7, #12
 8009106:	4610      	mov	r0, r2
 8009108:	4798      	blx	r3
}
 800910a:	bf00      	nop
 800910c:	3718      	adds	r7, #24
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop
 8009114:	08021f40 	.word	0x08021f40

08009118 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>:

void IridiumSBD::consoleprint(FlashString str)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
   PGM_P p = reinterpret_cast<PGM_P>(str);
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	60fb      	str	r3, [r7, #12]
   while (1)
   {
      char c = pgm_read_byte(p++);
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	1c5a      	adds	r2, r3, #1
 800912a:	60fa      	str	r2, [r7, #12]
 800912c:	781b      	ldrb	r3, [r3, #0]
 800912e:	72fb      	strb	r3, [r7, #11]
      if (c == 0) break;
 8009130:	7afb      	ldrb	r3, [r7, #11]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d005      	beq.n	8009142 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper+0x2a>
      ISBDConsoleCallback(this, c);
 8009136:	7afb      	ldrb	r3, [r7, #11]
 8009138:	4619      	mov	r1, r3
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f7fe f95e 	bl	80073fc <_Z19ISBDConsoleCallbackP10IridiumSBDc>
   }
 8009140:	e7f1      	b.n	8009126 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper+0xe>
      if (c == 0) break;
 8009142:	bf00      	nop

   //TODO
   this->print((char*) str);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	6838      	ldr	r0, [r7, #0]
 800914a:	4798      	blx	r3
}
 800914c:	bf00      	nop
 800914e:	3710      	adds	r7, #16
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}

08009154 <_ZN10IridiumSBD12consoleprintEPKc>:

void IridiumSBD::consoleprint(const char *str)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b082      	sub	sp, #8
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
   while (*str)
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	781b      	ldrb	r3, [r3, #0]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d008      	beq.n	8009178 <_ZN10IridiumSBD12consoleprintEPKc+0x24>
      ISBDConsoleCallback(this, *str++);
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	1c5a      	adds	r2, r3, #1
 800916a:	603a      	str	r2, [r7, #0]
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	4619      	mov	r1, r3
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f7fe f943 	bl	80073fc <_Z19ISBDConsoleCallbackP10IridiumSBDc>
   while (*str)
 8009176:	e7f2      	b.n	800915e <_ZN10IridiumSBD12consoleprintEPKc+0xa>

   //TODO
   this->print((char*) str);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	6838      	ldr	r0, [r7, #0]
 800917e:	4798      	blx	r3
}
 8009180:	bf00      	nop
 8009182:	3708      	adds	r7, #8
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <_ZN10IridiumSBD12consoleprintEt>:

void IridiumSBD::consoleprint(uint16_t n)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b086      	sub	sp, #24
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	460b      	mov	r3, r1
 8009192:	807b      	strh	r3, [r7, #2]
   char str[10];
   sprintf(str, "%u", n);
 8009194:	887a      	ldrh	r2, [r7, #2]
 8009196:	f107 030c 	add.w	r3, r7, #12
 800919a:	490a      	ldr	r1, [pc, #40]	; (80091c4 <_ZN10IridiumSBD12consoleprintEt+0x3c>)
 800919c:	4618      	mov	r0, r3
 800919e:	f012 ff67 	bl	801c070 <siprintf>
   consoleprint(str); //TODO
 80091a2:	f107 030c 	add.w	r3, r7, #12
 80091a6:	4619      	mov	r1, r3
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f7ff ffd3 	bl	8009154 <_ZN10IridiumSBD12consoleprintEPKc>
   //consoleprint((const char*) str);
   this->print((char*) str);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f107 020c 	add.w	r2, r7, #12
 80091b6:	4610      	mov	r0, r2
 80091b8:	4798      	blx	r3
}
 80091ba:	bf00      	nop
 80091bc:	3718      	adds	r7, #24
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}
 80091c2:	bf00      	nop
 80091c4:	08021f40 	.word	0x08021f40

080091c8 <_ZN10IridiumSBD12consoleprintEc>:

void IridiumSBD::consoleprint(char c)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b082      	sub	sp, #8
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	460b      	mov	r3, r1
 80091d2:	70fb      	strb	r3, [r7, #3]
   ISBDConsoleCallback(this, c);
 80091d4:	78fb      	ldrb	r3, [r7, #3]
 80091d6:	4619      	mov	r1, r3
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f7fe f90f 	bl	80073fc <_Z19ISBDConsoleCallbackP10IridiumSBDc>
}
 80091de:	bf00      	nop
 80091e0:	3708      	adds	r7, #8
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
	...

080091e8 <_ZN10IridiumSBD11SBDRINGSeenEv>:

void IridiumSBD::SBDRINGSeen()
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b082      	sub	sp, #8
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
   ringAsserted = true;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2201      	movs	r2, #1
 80091f4:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
   diagprint(F("SBDRING alert seen!\r\n"));
 80091f8:	4903      	ldr	r1, [pc, #12]	; (8009208 <_ZN10IridiumSBD11SBDRINGSeenEv+0x20>)
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f7ff ff34 	bl	8009068 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8009200:	bf00      	nop
 8009202:	3708      	adds	r7, #8
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}
 8009208:	08021f44 	.word	0x08021f44

0800920c <_ZN10IridiumSBD13filterSBDRINGEv>:
// Read characters until we find one that doesn't match SBDRING
// If nextChar is -1 it means we are still entertaining a possible
// match with SBDRING\r\n.  Once we find a mismatch, stuff it into
// nextChar.
void IridiumSBD::filterSBDRING()
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
   if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	7c5b      	ldrb	r3, [r3, #17]
 8009218:	f083 0301 	eor.w	r3, r3, #1
 800921c:	b2db      	uxtb	r3, r3
 800921e:	2b00      	cmp	r3, #0
 8009220:	d002      	beq.n	8009228 <_ZN10IridiumSBD13filterSBDRINGEv+0x1c>
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f000 f940 	bl	80094a8 <_ZN10IridiumSBD13check9603dataEv>
   while (((this->useSerial && (stream->available() > 0)) || ((!this->useSerial) && (i2cSerAvailable() > 0))) && nextChar == -1)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	7c5b      	ldrb	r3, [r3, #17]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d00b      	beq.n	8009248 <_ZN10IridiumSBD13filterSBDRINGEv+0x3c>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	689a      	ldr	r2, [r3, #8]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	689b      	ldr	r3, [r3, #8]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	3308      	adds	r3, #8
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4610      	mov	r0, r2
 8009240:	4798      	blx	r3
 8009242:	4603      	mov	r3, r0
 8009244:	2b00      	cmp	r3, #0
 8009246:	dc0c      	bgt.n	8009262 <_ZN10IridiumSBD13filterSBDRINGEv+0x56>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	7c5b      	ldrb	r3, [r3, #17]
 800924c:	f083 0301 	eor.w	r3, r3, #1
 8009250:	b2db      	uxtb	r3, r3
 8009252:	2b00      	cmp	r3, #0
 8009254:	d00d      	beq.n	8009272 <_ZN10IridiumSBD13filterSBDRINGEv+0x66>
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 fa56 	bl	8009708 <_ZN10IridiumSBD15i2cSerAvailableEv>
 800925c:	4603      	mov	r3, r0
 800925e:	2b00      	cmp	r3, #0
 8009260:	dd07      	ble.n	8009272 <_ZN10IridiumSBD13filterSBDRINGEv+0x66>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800926c:	d101      	bne.n	8009272 <_ZN10IridiumSBD13filterSBDRINGEv+0x66>
 800926e:	2301      	movs	r3, #1
 8009270:	e000      	b.n	8009274 <_ZN10IridiumSBD13filterSBDRINGEv+0x68>
 8009272:	2300      	movs	r3, #0
 8009274:	2b00      	cmp	r3, #0
 8009276:	f000 80af 	beq.w	80093d8 <_ZN10IridiumSBD13filterSBDRINGEv+0x1cc>
   {
      char c;
      if (this->useSerial)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	7c5b      	ldrb	r3, [r3, #17]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d00b      	beq.n	800929a <_ZN10IridiumSBD13filterSBDRINGEv+0x8e>
      {
         c = stream->read();
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	689a      	ldr	r2, [r3, #8]
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	689b      	ldr	r3, [r3, #8]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	330c      	adds	r3, #12
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4610      	mov	r0, r2
 8009292:	4798      	blx	r3
 8009294:	4603      	mov	r3, r0
 8009296:	73fb      	strb	r3, [r7, #15]
 8009298:	e004      	b.n	80092a4 <_ZN10IridiumSBD13filterSBDRINGEv+0x98>
      }
      else
      {
         c = i2cSerRead();
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 fa4c 	bl	8009738 <_ZN10IridiumSBD10i2cSerReadEv>
 80092a0:	4603      	mov	r3, r0
 80092a2:	73fb      	strb	r3, [r7, #15]
      }
      consoleprint(c);
 80092a4:	7bfb      	ldrb	r3, [r7, #15]
 80092a6:	4619      	mov	r1, r3
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f7ff ff8d 	bl	80091c8 <_ZN10IridiumSBD12consoleprintEc>
      if (*head != 0 && c == *head)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	f000 8087 	beq.w	80093ca <_ZN10IridiumSBD13filterSBDRINGEv+0x1be>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	7bfa      	ldrb	r2, [r7, #15]
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d17f      	bne.n	80093ca <_ZN10IridiumSBD13filterSBDRINGEv+0x1be>
      {
         ++head;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092d0:	1c5a      	adds	r2, r3, #1
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
         if (*head == 0)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092de:	781b      	ldrb	r3, [r3, #0]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d10d      	bne.n	8009300 <_ZN10IridiumSBD13filterSBDRINGEv+0xf4>
         {
            SBDRINGSeen();
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f7ff ff7f 	bl	80091e8 <_ZN10IridiumSBD11SBDRINGSeenEv>
            head = tail = SBDRING;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	4a3c      	ldr	r2, [pc, #240]	; (80093e0 <_ZN10IridiumSBD13filterSBDRINGEv+0x1d4>)
 80092ee:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
            if ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) // pop the character back into nextChar
            {
               --head;
               nextChar = c;
            }
         }
 80092fe:	e069      	b.n	80093d4 <_ZN10IridiumSBD13filterSBDRINGEv+0x1c8>
            for (unsigned long start = millis(); ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) && millis() - start < FILTERTIMEOUT; );
 8009300:	f003 f8f6 	bl	800c4f0 <HAL_GetTick>
 8009304:	60b8      	str	r0, [r7, #8]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	7c5b      	ldrb	r3, [r3, #17]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d00b      	beq.n	8009326 <_ZN10IridiumSBD13filterSBDRINGEv+0x11a>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	689a      	ldr	r2, [r3, #8]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	689b      	ldr	r3, [r3, #8]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	3308      	adds	r3, #8
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4610      	mov	r0, r2
 800931e:	4798      	blx	r3
 8009320:	4603      	mov	r3, r0
 8009322:	2b00      	cmp	r3, #0
 8009324:	d00c      	beq.n	8009340 <_ZN10IridiumSBD13filterSBDRINGEv+0x134>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	7c5b      	ldrb	r3, [r3, #17]
 800932a:	f083 0301 	eor.w	r3, r3, #1
 800932e:	b2db      	uxtb	r3, r3
 8009330:	2b00      	cmp	r3, #0
 8009332:	d00e      	beq.n	8009352 <_ZN10IridiumSBD13filterSBDRINGEv+0x146>
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 f9e7 	bl	8009708 <_ZN10IridiumSBD15i2cSerAvailableEv>
 800933a:	4603      	mov	r3, r0
 800933c:	2b00      	cmp	r3, #0
 800933e:	d108      	bne.n	8009352 <_ZN10IridiumSBD13filterSBDRINGEv+0x146>
 8009340:	f003 f8d6 	bl	800c4f0 <HAL_GetTick>
 8009344:	4602      	mov	r2, r0
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	1ad3      	subs	r3, r2, r3
 800934a:	2b09      	cmp	r3, #9
 800934c:	d801      	bhi.n	8009352 <_ZN10IridiumSBD13filterSBDRINGEv+0x146>
 800934e:	2301      	movs	r3, #1
 8009350:	e000      	b.n	8009354 <_ZN10IridiumSBD13filterSBDRINGEv+0x148>
 8009352:	2300      	movs	r3, #0
 8009354:	2b00      	cmp	r3, #0
 8009356:	d000      	beq.n	800935a <_ZN10IridiumSBD13filterSBDRINGEv+0x14e>
 8009358:	e7d5      	b.n	8009306 <_ZN10IridiumSBD13filterSBDRINGEv+0xfa>
            if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	7c5b      	ldrb	r3, [r3, #17]
 800935e:	f083 0301 	eor.w	r3, r3, #1
 8009362:	b2db      	uxtb	r3, r3
 8009364:	2b00      	cmp	r3, #0
 8009366:	d002      	beq.n	800936e <_ZN10IridiumSBD13filterSBDRINGEv+0x162>
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f000 f89d 	bl	80094a8 <_ZN10IridiumSBD13check9603dataEv>
            if ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) // pop the character back into nextChar
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	7c5b      	ldrb	r3, [r3, #17]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d00b      	beq.n	800938e <_ZN10IridiumSBD13filterSBDRINGEv+0x182>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	689a      	ldr	r2, [r3, #8]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	689b      	ldr	r3, [r3, #8]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	3308      	adds	r3, #8
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4610      	mov	r0, r2
 8009386:	4798      	blx	r3
 8009388:	4603      	mov	r3, r0
 800938a:	2b00      	cmp	r3, #0
 800938c:	d00c      	beq.n	80093a8 <_ZN10IridiumSBD13filterSBDRINGEv+0x19c>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	7c5b      	ldrb	r3, [r3, #17]
 8009392:	f083 0301 	eor.w	r3, r3, #1
 8009396:	b2db      	uxtb	r3, r3
 8009398:	2b00      	cmp	r3, #0
 800939a:	d007      	beq.n	80093ac <_ZN10IridiumSBD13filterSBDRINGEv+0x1a0>
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 f9b3 	bl	8009708 <_ZN10IridiumSBD15i2cSerAvailableEv>
 80093a2:	4603      	mov	r3, r0
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d101      	bne.n	80093ac <_ZN10IridiumSBD13filterSBDRINGEv+0x1a0>
 80093a8:	2301      	movs	r3, #1
 80093aa:	e000      	b.n	80093ae <_ZN10IridiumSBD13filterSBDRINGEv+0x1a2>
 80093ac:	2300      	movs	r3, #0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d010      	beq.n	80093d4 <_ZN10IridiumSBD13filterSBDRINGEv+0x1c8>
               --head;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093b8:	1e5a      	subs	r2, r3, #1
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
               nextChar = c;
 80093c0:	7bfa      	ldrb	r2, [r7, #15]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
         }
 80093c8:	e004      	b.n	80093d4 <_ZN10IridiumSBD13filterSBDRINGEv+0x1c8>
      }
      else
      {
         nextChar = c;
 80093ca:	7bfa      	ldrb	r2, [r7, #15]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80093d2:	e729      	b.n	8009228 <_ZN10IridiumSBD13filterSBDRINGEv+0x1c>
         }
 80093d4:	bf00      	nop
   while (((this->useSerial && (stream->available() > 0)) || ((!this->useSerial) && (i2cSerAvailable() > 0))) && nextChar == -1)
 80093d6:	e727      	b.n	8009228 <_ZN10IridiumSBD13filterSBDRINGEv+0x1c>
      }
   }
}
 80093d8:	bf00      	nop
 80093da:	3710      	adds	r7, #16
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}
 80093e0:	08022a18 	.word	0x08022a18

080093e4 <_ZN10IridiumSBD17filteredavailableEv>:

const char IridiumSBD::SBDRING[] = "SBDRING\r\n";

int IridiumSBD::filteredavailable()
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b082      	sub	sp, #8
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
   filterSBDRING();
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f7ff ff0d 	bl	800920c <_ZN10IridiumSBD13filterSBDRINGEv>
   return head - tail + (nextChar != -1 ? 1 : 0);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80093fe:	1ad3      	subs	r3, r2, r3
 8009400:	687a      	ldr	r2, [r7, #4]
 8009402:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 8009406:	f1b2 3fff 	cmp.w	r2, #4294967295
 800940a:	d001      	beq.n	8009410 <_ZN10IridiumSBD17filteredavailableEv+0x2c>
 800940c:	2201      	movs	r2, #1
 800940e:	e000      	b.n	8009412 <_ZN10IridiumSBD17filteredavailableEv+0x2e>
 8009410:	2200      	movs	r2, #0
 8009412:	4413      	add	r3, r2
}
 8009414:	4618      	mov	r0, r3
 8009416:	3708      	adds	r7, #8
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}

0800941c <_ZN10IridiumSBD12filteredreadEv>:

int IridiumSBD::filteredread()
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b084      	sub	sp, #16
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
   filterSBDRING();
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f7ff fef1 	bl	800920c <_ZN10IridiumSBD13filterSBDRINGEv>

   // Use up the queue first
   if (head > tail)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009436:	429a      	cmp	r2, r3
 8009438:	d91c      	bls.n	8009474 <_ZN10IridiumSBD12filteredreadEv+0x58>
   {
      char c = *tail++;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009440:	1c59      	adds	r1, r3, #1
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	73bb      	strb	r3, [r7, #14]
      if (head == tail)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009458:	429a      	cmp	r2, r3
 800945a:	d109      	bne.n	8009470 <_ZN10IridiumSBD12filteredreadEv+0x54>
         head = tail = SBDRING;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	4a11      	ldr	r2, [pc, #68]	; (80094a4 <_ZN10IridiumSBD12filteredreadEv+0x88>)
 8009460:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      return c;
 8009470:	7bbb      	ldrb	r3, [r7, #14]
 8009472:	e012      	b.n	800949a <_ZN10IridiumSBD12filteredreadEv+0x7e>
   }

   // Then the "extra" char
   else if (nextChar != -1)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800947a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800947e:	d00a      	beq.n	8009496 <_ZN10IridiumSBD12filteredreadEv+0x7a>
   {
      char c = (char)nextChar;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009486:	73fb      	strb	r3, [r7, #15]
      nextChar = -1;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f04f 32ff 	mov.w	r2, #4294967295
 800948e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
      return c;
 8009492:	7bfb      	ldrb	r3, [r7, #15]
 8009494:	e001      	b.n	800949a <_ZN10IridiumSBD12filteredreadEv+0x7e>
   }

   return -1;
 8009496:	f04f 33ff 	mov.w	r3, #4294967295
}
 800949a:	4618      	mov	r0, r3
 800949c:	3710      	adds	r7, #16
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
 80094a2:	bf00      	nop
 80094a4:	08022a18 	.word	0x08022a18

080094a8 <_ZN10IridiumSBD13check9603dataEv>:

//Checks the number of available serial bytes
//Reads the available serial bytes (if any) and stores them in i2c_ser_buffer
void IridiumSBD::check9603data()
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b084      	sub	sp, #16
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  if (millis() - lastCheck >= I2C_POLLING_WAIT_MS)
 80094b0:	f003 f81e 	bl	800c4f0 <HAL_GetTick>
 80094b4:	4602      	mov	r2, r0
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094ba:	1ad3      	subs	r3, r2, r3
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
 80094c2:	4293      	cmp	r3, r2
 80094c4:	bf2c      	ite	cs
 80094c6:	2301      	movcs	r3, #1
 80094c8:	2300      	movcc	r3, #0
 80094ca:	b2db      	uxtb	r3, r3
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	f000 80b8 	beq.w	8009642 <_ZN10IridiumSBD13check9603dataEv+0x19a>
  {
    //Check how many serial bytes are waiting to be read
    uint16_t bytesAvailable = 0;
 80094d2:	2300      	movs	r3, #0
 80094d4:	81fb      	strh	r3, [r7, #14]
    wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	68da      	ldr	r2, [r3, #12]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	7c1b      	ldrb	r3, [r3, #16]
 80094de:	4619      	mov	r1, r3
 80094e0:	4610      	mov	r0, r2
 80094e2:	f001 f85d 	bl	800a5a0 <_ZN7TwoWire17beginTransmissionEh>
    wireport->write(LEN_REG); // Point to the serial buffer length
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	68db      	ldr	r3, [r3, #12]
 80094ea:	21fd      	movs	r1, #253	; 0xfd
 80094ec:	4618      	mov	r0, r3
 80094ee:	f7fd ff6b 	bl	80073c8 <_ZN7TwoWire5writeEi>
    wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	68db      	ldr	r3, [r3, #12]
 80094f6:	4618      	mov	r0, r3
 80094f8:	f001 f89c 	bl	800a634 <_ZN7TwoWire15endTransmissionEv>
    if (wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)2) == 2) // Request two bytes
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	68d8      	ldr	r0, [r3, #12]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	7c1b      	ldrb	r3, [r3, #16]
 8009504:	2202      	movs	r2, #2
 8009506:	4619      	mov	r1, r3
 8009508:	f001 f837 	bl	800a57a <_ZN7TwoWire11requestFromEhh>
 800950c:	4603      	mov	r3, r0
 800950e:	2b02      	cmp	r3, #2
 8009510:	bf0c      	ite	eq
 8009512:	2301      	moveq	r3, #1
 8009514:	2300      	movne	r3, #0
 8009516:	b2db      	uxtb	r3, r3
 8009518:	2b00      	cmp	r3, #0
 800951a:	d01d      	beq.n	8009558 <_ZN10IridiumSBD13check9603dataEv+0xb0>
    {
      uint8_t msb = wireport->read();
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	68da      	ldr	r2, [r3, #12]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	68db      	ldr	r3, [r3, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	330c      	adds	r3, #12
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4610      	mov	r0, r2
 800952c:	4798      	blx	r3
 800952e:	4603      	mov	r3, r0
 8009530:	737b      	strb	r3, [r7, #13]
      uint8_t lsb = wireport->read();
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	68da      	ldr	r2, [r3, #12]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	68db      	ldr	r3, [r3, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	330c      	adds	r3, #12
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4610      	mov	r0, r2
 8009542:	4798      	blx	r3
 8009544:	4603      	mov	r3, r0
 8009546:	733b      	strb	r3, [r7, #12]
      bytesAvailable = (((uint16_t)msb) << 8) | lsb;
 8009548:	7b7b      	ldrb	r3, [r7, #13]
 800954a:	021b      	lsls	r3, r3, #8
 800954c:	b21a      	sxth	r2, r3
 800954e:	7b3b      	ldrb	r3, [r7, #12]
 8009550:	b21b      	sxth	r3, r3
 8009552:	4313      	orrs	r3, r2
 8009554:	b21b      	sxth	r3, r3
 8009556:	81fb      	strh	r3, [r7, #14]
    }

    //Now read the serial bytes (if any)
    if (bytesAvailable > 0)
 8009558:	89fb      	ldrh	r3, [r7, #14]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d06c      	beq.n	8009638 <_ZN10IridiumSBD13check9603dataEv+0x190>
    {
      // Request the bytes
      // Poke them into the i2c_serial buffer
      // Release the bus afterwards
      wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	68da      	ldr	r2, [r3, #12]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	7c1b      	ldrb	r3, [r3, #16]
 8009566:	4619      	mov	r1, r3
 8009568:	4610      	mov	r0, r2
 800956a:	f001 f819 	bl	800a5a0 <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the serial buffer
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	68db      	ldr	r3, [r3, #12]
 8009572:	21ff      	movs	r1, #255	; 0xff
 8009574:	4618      	mov	r0, r3
 8009576:	f7fd ff27 	bl	80073c8 <_ZN7TwoWire5writeEi>
      wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	68db      	ldr	r3, [r3, #12]
 800957e:	4618      	mov	r0, r3
 8009580:	f001 f858 	bl	800a634 <_ZN7TwoWire15endTransmissionEv>
      while (bytesAvailable > SER_PACKET_SIZE) // If there are _more_ than SER_PACKET_SIZE bytes to be read
 8009584:	89fb      	ldrh	r3, [r7, #14]
 8009586:	2b08      	cmp	r3, #8
 8009588:	d92c      	bls.n	80095e4 <_ZN10IridiumSBD13check9603dataEv+0x13c>
      {
        wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)SER_PACKET_SIZE, (uint8_t)false); // Request SER_PACKET_SIZE bytes, don't release the bus
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	68d8      	ldr	r0, [r3, #12]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	7c19      	ldrb	r1, [r3, #16]
 8009592:	2300      	movs	r3, #0
 8009594:	2208      	movs	r2, #8
 8009596:	f000 ffb5 	bl	800a504 <_ZN7TwoWire11requestFromEhhh>
        while (wireport->available())
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	68da      	ldr	r2, [r3, #12]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	68db      	ldr	r3, [r3, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	3308      	adds	r3, #8
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4610      	mov	r0, r2
 80095aa:	4798      	blx	r3
 80095ac:	4603      	mov	r3, r0
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	bf14      	ite	ne
 80095b2:	2301      	movne	r3, #1
 80095b4:	2300      	moveq	r3, #0
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d00f      	beq.n	80095dc <_ZN10IridiumSBD13check9603dataEv+0x134>
        {
          i2cSerPoke(wireport->read()); // Read and store each byte
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	68da      	ldr	r2, [r3, #12]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	68db      	ldr	r3, [r3, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	330c      	adds	r3, #12
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4610      	mov	r0, r2
 80095cc:	4798      	blx	r3
 80095ce:	4603      	mov	r3, r0
 80095d0:	b2db      	uxtb	r3, r3
 80095d2:	4619      	mov	r1, r3
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 f8d5 	bl	8009784 <_ZN10IridiumSBD10i2cSerPokeEc>
        while (wireport->available())
 80095da:	e7de      	b.n	800959a <_ZN10IridiumSBD13check9603dataEv+0xf2>
        }
        bytesAvailable -= SER_PACKET_SIZE; // Decrease the number of bytes available by SER_PACKET_SIZE
 80095dc:	89fb      	ldrh	r3, [r7, #14]
 80095de:	3b08      	subs	r3, #8
 80095e0:	81fb      	strh	r3, [r7, #14]
      while (bytesAvailable > SER_PACKET_SIZE) // If there are _more_ than SER_PACKET_SIZE bytes to be read
 80095e2:	e7cf      	b.n	8009584 <_ZN10IridiumSBD13check9603dataEv+0xdc>
      }
      wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)bytesAvailable); // Request remaining bytes, release the bus
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	68d8      	ldr	r0, [r3, #12]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	7c1b      	ldrb	r3, [r3, #16]
 80095ec:	89fa      	ldrh	r2, [r7, #14]
 80095ee:	b2d2      	uxtb	r2, r2
 80095f0:	4619      	mov	r1, r3
 80095f2:	f000 ffc2 	bl	800a57a <_ZN7TwoWire11requestFromEhh>
      while (wireport->available())
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	68da      	ldr	r2, [r3, #12]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	68db      	ldr	r3, [r3, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	3308      	adds	r3, #8
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4610      	mov	r0, r2
 8009606:	4798      	blx	r3
 8009608:	4603      	mov	r3, r0
 800960a:	2b00      	cmp	r3, #0
 800960c:	bf14      	ite	ne
 800960e:	2301      	movne	r3, #1
 8009610:	2300      	moveq	r3, #0
 8009612:	b2db      	uxtb	r3, r3
 8009614:	2b00      	cmp	r3, #0
 8009616:	d00f      	beq.n	8009638 <_ZN10IridiumSBD13check9603dataEv+0x190>
      {
        i2cSerPoke(wireport->read()); // Read and store each byte
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	68da      	ldr	r2, [r3, #12]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	68db      	ldr	r3, [r3, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	330c      	adds	r3, #12
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4610      	mov	r0, r2
 8009628:	4798      	blx	r3
 800962a:	4603      	mov	r3, r0
 800962c:	b2db      	uxtb	r3, r3
 800962e:	4619      	mov	r1, r3
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f000 f8a7 	bl	8009784 <_ZN10IridiumSBD10i2cSerPokeEc>
      while (wireport->available())
 8009636:	e7de      	b.n	80095f6 <_ZN10IridiumSBD13check9603dataEv+0x14e>
      }
    }

    lastCheck = millis(); //Put off checking to avoid excessive I2C bus traffic
 8009638:	f002 ff5a 	bl	800c4f0 <HAL_GetTick>
 800963c:	4602      	mov	r2, r0
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8009642:	bf00      	nop
 8009644:	3710      	adds	r7, #16
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}

0800964a <_ZN10IridiumSBD13check9603pinsEv>:

//Reads the IO pins and update IO_REGISTER
void IridiumSBD::check9603pins()
{
 800964a:	b580      	push	{r7, lr}
 800964c:	b082      	sub	sp, #8
 800964e:	af00      	add	r7, sp, #0
 8009650:	6078      	str	r0, [r7, #4]
  //Read the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	68da      	ldr	r2, [r3, #12]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	7c1b      	ldrb	r3, [r3, #16]
 800965a:	4619      	mov	r1, r3
 800965c:	4610      	mov	r0, r2
 800965e:	f000 ff9f 	bl	800a5a0 <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	68db      	ldr	r3, [r3, #12]
 8009666:	2110      	movs	r1, #16
 8009668:	4618      	mov	r0, r3
 800966a:	f7fd fead 	bl	80073c8 <_ZN7TwoWire5writeEi>
  wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	68db      	ldr	r3, [r3, #12]
 8009672:	4618      	mov	r0, r3
 8009674:	f000 ffde 	bl	800a634 <_ZN7TwoWire15endTransmissionEv>
  if (wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)1) == 1) // Request one byte from the IO register
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	68d8      	ldr	r0, [r3, #12]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	7c1b      	ldrb	r3, [r3, #16]
 8009680:	2201      	movs	r2, #1
 8009682:	4619      	mov	r1, r3
 8009684:	f000 ff79 	bl	800a57a <_ZN7TwoWire11requestFromEhh>
 8009688:	4603      	mov	r3, r0
 800968a:	2b01      	cmp	r3, #1
 800968c:	bf0c      	ite	eq
 800968e:	2301      	moveq	r3, #1
 8009690:	2300      	movne	r3, #0
 8009692:	b2db      	uxtb	r3, r3
 8009694:	2b00      	cmp	r3, #0
 8009696:	d00d      	beq.n	80096b4 <_ZN10IridiumSBD13check9603pinsEv+0x6a>
  {
    IO_REGISTER = wireport->read(); // Read the IO register
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	68da      	ldr	r2, [r3, #12]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	68db      	ldr	r3, [r3, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	330c      	adds	r3, #12
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4610      	mov	r0, r2
 80096a8:	4798      	blx	r3
 80096aa:	4603      	mov	r3, r0
 80096ac:	b2da      	uxtb	r2, r3
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  }
}
 80096b4:	bf00      	nop
 80096b6:	3708      	adds	r7, #8
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <_ZN10IridiumSBD11set9603pinsEh>:

//Set the IO pins
void IridiumSBD::set9603pins(uint8_t pins)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b082      	sub	sp, #8
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	460b      	mov	r3, r1
 80096c6:	70fb      	strb	r3, [r7, #3]
  //Write to the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	68da      	ldr	r2, [r3, #12]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	7c1b      	ldrb	r3, [r3, #16]
 80096d0:	4619      	mov	r1, r3
 80096d2:	4610      	mov	r0, r2
 80096d4:	f000 ff64 	bl	800a5a0 <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	68db      	ldr	r3, [r3, #12]
 80096dc:	2110      	movs	r1, #16
 80096de:	4618      	mov	r0, r3
 80096e0:	f7fd fe72 	bl	80073c8 <_ZN7TwoWire5writeEi>
  wireport->write(pins); // Set the pins
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	68da      	ldr	r2, [r3, #12]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	68db      	ldr	r3, [r3, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	78f9      	ldrb	r1, [r7, #3]
 80096f2:	4610      	mov	r0, r2
 80096f4:	4798      	blx	r3
  wireport->endTransmission(); // Send data and surrender the bus
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	68db      	ldr	r3, [r3, #12]
 80096fa:	4618      	mov	r0, r3
 80096fc:	f000 ff9a 	bl	800a634 <_ZN7TwoWire15endTransmissionEv>
}
 8009700:	bf00      	nop
 8009702:	3708      	adds	r7, #8
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <_ZN10IridiumSBD15i2cSerAvailableEv>:
    return(ISBD_SUCCESS);
}

// I2C_SER functions
int IridiumSBD::i2cSerAvailable()
{
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  return (i2c_ser_buffer_tail + I2C_SER_MAX_BUFF - i2c_ser_buffer_head) % I2C_SER_MAX_BUFF;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009714:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800971c:	1ad3      	subs	r3, r2, r3
 800971e:	425a      	negs	r2, r3
 8009720:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009724:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8009728:	bf58      	it	pl
 800972a:	4253      	negpl	r3, r2
}
 800972c:	4618      	mov	r0, r3
 800972e:	370c      	adds	r7, #12
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr

08009738 <_ZN10IridiumSBD10i2cSerReadEv>:

int IridiumSBD::i2cSerRead()
{
 8009738:	b480      	push	{r7}
 800973a:	b085      	sub	sp, #20
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  // Empty buffer?
  if (i2c_ser_buffer_head == i2c_ser_buffer_tail)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009748:	429a      	cmp	r2, r3
 800974a:	d102      	bne.n	8009752 <_ZN10IridiumSBD10i2cSerReadEv+0x1a>
    return -1;
 800974c:	f04f 33ff 	mov.w	r3, #4294967295
 8009750:	e012      	b.n	8009778 <_ZN10IridiumSBD10i2cSerReadEv+0x40>

  // Read from "head"
  uint8_t d = i2c_ser_buffer[i2c_ser_buffer_head]; // grab next byte
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009756:	687a      	ldr	r2, [r7, #4]
 8009758:	4413      	add	r3, r2
 800975a:	7c9b      	ldrb	r3, [r3, #18]
 800975c:	73fb      	strb	r3, [r7, #15]
  i2c_ser_buffer_head = (i2c_ser_buffer_head + 1) % I2C_SER_MAX_BUFF; // update head
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009762:	3301      	adds	r3, #1
 8009764:	425a      	negs	r2, r3
 8009766:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800976a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800976e:	bf58      	it	pl
 8009770:	4253      	negpl	r3, r2
 8009772:	687a      	ldr	r2, [r7, #4]
 8009774:	6593      	str	r3, [r2, #88]	; 0x58
  return d;
 8009776:	7bfb      	ldrb	r3, [r7, #15]
}
 8009778:	4618      	mov	r0, r3
 800977a:	3714      	adds	r7, #20
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr

08009784 <_ZN10IridiumSBD10i2cSerPokeEc>:

void IridiumSBD::i2cSerPoke(char serChar)
{
 8009784:	b480      	push	{r7}
 8009786:	b085      	sub	sp, #20
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	460b      	mov	r3, r1
 800978e:	70fb      	strb	r3, [r7, #3]
  // Calculate the new value for the tail
  int next = (i2c_ser_buffer_tail + 1) % I2C_SER_MAX_BUFF;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009794:	3301      	adds	r3, #1
 8009796:	425a      	negs	r2, r3
 8009798:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800979c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80097a0:	bf58      	it	pl
 80097a2:	4253      	negpl	r3, r2
 80097a4:	60fb      	str	r3, [r7, #12]
  // If the buffer is not full (i.e. we are not about to overwrite the head byte)
  // If the buffer is full, the byte is lost
  if (next != i2c_ser_buffer_head)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097aa:	68fa      	ldr	r2, [r7, #12]
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d008      	beq.n	80097c2 <_ZN10IridiumSBD10i2cSerPokeEc+0x3e>
  {
    // save new data in buffer: tail points to where byte goes
    i2c_ser_buffer[i2c_ser_buffer_tail] = serChar; // save new byte
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	4413      	add	r3, r2
 80097b8:	78fa      	ldrb	r2, [r7, #3]
 80097ba:	749a      	strb	r2, [r3, #18]
    i2c_ser_buffer_tail = next;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	68fa      	ldr	r2, [r7, #12]
 80097c0:	655a      	str	r2, [r3, #84]	; 0x54
  }
}
 80097c2:	bf00      	nop
 80097c4:	3714      	adds	r7, #20
 80097c6:	46bd      	mov	sp, r7
 80097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097cc:	4770      	bx	lr
	...

080097d0 <_ZN10IridiumSBD20internalClearBuffersEi>:

int IridiumSBD::internalClearBuffers(int buffers)
// Clear the MO/MT/Both buffers
// Defaults to clearing the MO buffer to avoid resending old messages
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b084      	sub	sp, #16
 80097d4:	af02      	add	r7, sp, #8
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	6039      	str	r1, [r7, #0]
   if (this->asleep)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d001      	beq.n	80097e8 <_ZN10IridiumSBD20internalClearBuffersEi+0x18>
      return ISBD_IS_ASLEEP;
 80097e4:	230a      	movs	r3, #10
 80097e6:	e032      	b.n	800984e <_ZN10IridiumSBD20internalClearBuffersEi+0x7e>

   if (buffers == ISBD_CLEAR_MT) // Clear MT buffer
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	2b01      	cmp	r3, #1
 80097ec:	d106      	bne.n	80097fc <_ZN10IridiumSBD20internalClearBuffersEi+0x2c>
   {
      send(F("AT+SBDD1\r"));
 80097ee:	2301      	movs	r3, #1
 80097f0:	2201      	movs	r2, #1
 80097f2:	4919      	ldr	r1, [pc, #100]	; (8009858 <_ZN10IridiumSBD20internalClearBuffersEi+0x88>)
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f7ff fab9 	bl	8008d6c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
 80097fa:	e00f      	b.n	800981c <_ZN10IridiumSBD20internalClearBuffersEi+0x4c>
   }
   else if (buffers == ISBD_CLEAR_BOTH) // Clear both buffers
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	2b02      	cmp	r3, #2
 8009800:	d106      	bne.n	8009810 <_ZN10IridiumSBD20internalClearBuffersEi+0x40>
   {
      send(F("AT+SBDD2\r"));
 8009802:	2301      	movs	r3, #1
 8009804:	2201      	movs	r2, #1
 8009806:	4915      	ldr	r1, [pc, #84]	; (800985c <_ZN10IridiumSBD20internalClearBuffersEi+0x8c>)
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f7ff faaf 	bl	8008d6c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
 800980e:	e005      	b.n	800981c <_ZN10IridiumSBD20internalClearBuffersEi+0x4c>
   }
   else // Clear MO buffer
   {
      send(F("AT+SBDD0\r"));
 8009810:	2301      	movs	r3, #1
 8009812:	2201      	movs	r2, #1
 8009814:	4912      	ldr	r1, [pc, #72]	; (8009860 <_ZN10IridiumSBD20internalClearBuffersEi+0x90>)
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f7ff faa8 	bl	8008d6c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   }
   if (!waitForATResponse())
 800981c:	4b11      	ldr	r3, [pc, #68]	; (8009864 <_ZN10IridiumSBD20internalClearBuffersEi+0x94>)
 800981e:	9300      	str	r3, [sp, #0]
 8009820:	2300      	movs	r3, #0
 8009822:	2200      	movs	r2, #0
 8009824:	2100      	movs	r1, #0
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f7fe fe3e 	bl	80084a8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 800982c:	4603      	mov	r3, r0
 800982e:	f083 0301 	eor.w	r3, r3, #1
 8009832:	b2db      	uxtb	r3, r3
 8009834:	2b00      	cmp	r3, #0
 8009836:	d009      	beq.n	800984c <_ZN10IridiumSBD20internalClearBuffersEi+0x7c>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f7fe fef3 	bl	8008624 <_ZN10IridiumSBD9cancelledEv>
 800983e:	4603      	mov	r3, r0
 8009840:	2b00      	cmp	r3, #0
 8009842:	d001      	beq.n	8009848 <_ZN10IridiumSBD20internalClearBuffersEi+0x78>
 8009844:	2304      	movs	r3, #4
 8009846:	e002      	b.n	800984e <_ZN10IridiumSBD20internalClearBuffersEi+0x7e>
 8009848:	2303      	movs	r3, #3
 800984a:	e000      	b.n	800984e <_ZN10IridiumSBD20internalClearBuffersEi+0x7e>

   return ISBD_SUCCESS;
 800984c:	2300      	movs	r3, #0
}
 800984e:	4618      	mov	r0, r3
 8009850:	3708      	adds	r7, #8
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
 8009856:	bf00      	nop
 8009858:	08021f90 	.word	0x08021f90
 800985c:	08021f9c 	.word	0x08021f9c
 8009860:	08021fa8 	.word	0x08021fa8
 8009864:	080218d8 	.word	0x080218d8

08009868 <_ZN10IridiumSBD15internalGetIMEIEPcj>:

int IridiumSBD::internalGetIMEI(char *IMEI, size_t bufferSize)
// Get the IMEI
// https://github.com/mikalhart/IridiumSBD/pull/21
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b086      	sub	sp, #24
 800986c:	af02      	add	r7, sp, #8
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	60b9      	str	r1, [r7, #8]
 8009872:	607a      	str	r2, [r7, #4]
   if (this->asleep)
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800987a:	2b00      	cmp	r3, #0
 800987c:	d001      	beq.n	8009882 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x1a>
      return ISBD_IS_ASLEEP;
 800987e:	230a      	movs	r3, #10
 8009880:	e023      	b.n	80098ca <_ZN10IridiumSBD15internalGetIMEIEPcj+0x62>

   if (bufferSize < 16) // IMEI is 15 digits
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2b0f      	cmp	r3, #15
 8009886:	d801      	bhi.n	800988c <_ZN10IridiumSBD15internalGetIMEIEPcj+0x24>
      return ISBD_RX_OVERFLOW;
 8009888:	2308      	movs	r3, #8
 800988a:	e01e      	b.n	80098ca <_ZN10IridiumSBD15internalGetIMEIEPcj+0x62>

   send(F("AT+CGSN\r"));
 800988c:	2301      	movs	r3, #1
 800988e:	2201      	movs	r2, #1
 8009890:	4910      	ldr	r1, [pc, #64]	; (80098d4 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x6c>)
 8009892:	68f8      	ldr	r0, [r7, #12]
 8009894:	f7ff fa6a 	bl	8008d6c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(IMEI, bufferSize, "\n"))
 8009898:	687a      	ldr	r2, [r7, #4]
 800989a:	4b0f      	ldr	r3, [pc, #60]	; (80098d8 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x70>)
 800989c:	9300      	str	r3, [sp, #0]
 800989e:	4b0f      	ldr	r3, [pc, #60]	; (80098dc <_ZN10IridiumSBD15internalGetIMEIEPcj+0x74>)
 80098a0:	68b9      	ldr	r1, [r7, #8]
 80098a2:	68f8      	ldr	r0, [r7, #12]
 80098a4:	f7fe fe00 	bl	80084a8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 80098a8:	4603      	mov	r3, r0
 80098aa:	f083 0301 	eor.w	r3, r3, #1
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d009      	beq.n	80098c8 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x60>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 80098b4:	68f8      	ldr	r0, [r7, #12]
 80098b6:	f7fe feb5 	bl	8008624 <_ZN10IridiumSBD9cancelledEv>
 80098ba:	4603      	mov	r3, r0
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d001      	beq.n	80098c4 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x5c>
 80098c0:	2304      	movs	r3, #4
 80098c2:	e002      	b.n	80098ca <_ZN10IridiumSBD15internalGetIMEIEPcj+0x62>
 80098c4:	2303      	movs	r3, #3
 80098c6:	e000      	b.n	80098ca <_ZN10IridiumSBD15internalGetIMEIEPcj+0x62>

   return ISBD_SUCCESS;
 80098c8:	2300      	movs	r3, #0
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3710      	adds	r7, #16
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
 80098d2:	bf00      	nop
 80098d4:	08021fb4 	.word	0x08021fb4
 80098d8:	080218d8 	.word	0x080218d8
 80098dc:	08021fc0 	.word	0x08021fc0

080098e0 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE>:
}
#endif


//uint8_t IridiumSBD::MRT_Iridium_setup(UART_HandleTypeDef huart,POWERPROFILE profile){ TODO??
uint8_t IridiumSBD::MRT_Iridium_setup(uint8_t timeout, uint8_t i2c_bus, void (*iridium_print)(char*)){
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b094      	sub	sp, #80	; 0x50
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	60f8      	str	r0, [r7, #12]
 80098e8:	607b      	str	r3, [r7, #4]
 80098ea:	460b      	mov	r3, r1
 80098ec:	72fb      	strb	r3, [r7, #11]
 80098ee:	4613      	mov	r3, r2
 80098f0:	72bb      	strb	r3, [r7, #10]
	this->print = iridium_print;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	687a      	ldr	r2, [r7, #4]
 80098f6:	601a      	str	r2, [r3, #0]
	this->print((char*) "\r\nIridium 9603N Init\r\n");
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4868      	ldr	r0, [pc, #416]	; (8009aa0 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1c0>)
 80098fe:	4798      	blx	r3

	this->print((char*) "\tSetting I2C bus...");
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4867      	ldr	r0, [pc, #412]	; (8009aa4 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1c4>)
 8009906:	4798      	blx	r3
	if (i2c_bus == 1){
 8009908:	7abb      	ldrb	r3, [r7, #10]
 800990a:	2b01      	cmp	r3, #1
 800990c:	d103      	bne.n	8009916 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x36>
		this->wireport = &Wire;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	4a65      	ldr	r2, [pc, #404]	; (8009aa8 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1c8>)
 8009912:	60da      	str	r2, [r3, #12]
 8009914:	e00c      	b.n	8009930 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x50>
	}
	else if (i2c_bus == 2){
 8009916:	7abb      	ldrb	r3, [r7, #10]
 8009918:	2b02      	cmp	r3, #2
 800991a:	d103      	bne.n	8009924 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x44>
		this->wireport = &Wire1;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	4a63      	ldr	r2, [pc, #396]	; (8009aac <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1cc>)
 8009920:	60da      	str	r2, [r3, #12]
 8009922:	e005      	b.n	8009930 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x50>
	}
	else if (i2c_bus == 3){
 8009924:	7abb      	ldrb	r3, [r7, #10]
 8009926:	2b03      	cmp	r3, #3
 8009928:	d102      	bne.n	8009930 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x50>
		this->wireport = &Wire2;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	4a60      	ldr	r2, [pc, #384]	; (8009ab0 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1d0>)
 800992e:	60da      	str	r2, [r3, #12]
	}
	this->print((char*) "OK\r\n");
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	485f      	ldr	r0, [pc, #380]	; (8009ab4 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1d4>)
 8009936:	4798      	blx	r3

	this->print((char*) "\tChecking device connection...");
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	485e      	ldr	r0, [pc, #376]	; (8009ab8 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1d8>)
 800993e:	4798      	blx	r3
	bool connected = 0;
 8009940:	2300      	movs	r3, #0
 8009942:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	for (int i=0; i<3; i++){
 8009946:	2300      	movs	r3, #0
 8009948:	64bb      	str	r3, [r7, #72]	; 0x48
 800994a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800994c:	2b02      	cmp	r3, #2
 800994e:	dc2d      	bgt.n	80099ac <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0xcc>
		if(this->isConnected()){
 8009950:	68f8      	ldr	r0, [r7, #12]
 8009952:	f7fe f885 	bl	8007a60 <_ZN10IridiumSBD11isConnectedEv>
 8009956:	4603      	mov	r3, r0
 8009958:	2b00      	cmp	r3, #0
 800995a:	d003      	beq.n	8009964 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x84>
			connected=1;
 800995c:	2301      	movs	r3, #1
 800995e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			break;
 8009962:	e023      	b.n	80099ac <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0xcc>
		}
		HAL_Delay(300);
 8009964:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009968:	f002 fdce 	bl	800c508 <HAL_Delay>
		this->print((char*) "\r\tChecking device connection   ");
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4852      	ldr	r0, [pc, #328]	; (8009abc <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1dc>)
 8009972:	4798      	blx	r3
		HAL_Delay(300);
 8009974:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009978:	f002 fdc6 	bl	800c508 <HAL_Delay>
		this->print((char*) "\r\tChecking device connection.  ");
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	484f      	ldr	r0, [pc, #316]	; (8009ac0 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1e0>)
 8009982:	4798      	blx	r3
		HAL_Delay(300);
 8009984:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009988:	f002 fdbe 	bl	800c508 <HAL_Delay>
		this->print((char*) "\r\tChecking device connection.. ");
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	484c      	ldr	r0, [pc, #304]	; (8009ac4 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1e4>)
 8009992:	4798      	blx	r3
		HAL_Delay(300);
 8009994:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009998:	f002 fdb6 	bl	800c508 <HAL_Delay>
		this->print((char*) "\r\tChecking device connection...");
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4849      	ldr	r0, [pc, #292]	; (8009ac8 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1e8>)
 80099a2:	4798      	blx	r3
	for (int i=0; i<3; i++){
 80099a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099a6:	3301      	adds	r3, #1
 80099a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80099aa:	e7ce      	b.n	800994a <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x6a>
	}
	if(connected){
 80099ac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d014      	beq.n	80099de <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0xfe>
		this->print((char*) "OK\r\n");
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	483e      	ldr	r0, [pc, #248]	; (8009ab4 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1d4>)
 80099ba:	4798      	blx	r3
		this->print((char*) "\tError: Iridium failed to connect. Check I2C connection\r\n");
		return -1;
	}

	//Activate the superchargers
	this->print((char*) "\tActivating the superchargers...");
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4842      	ldr	r0, [pc, #264]	; (8009acc <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1ec>)
 80099c2:	4798      	blx	r3
	this->enableSuperCapCharger(true);
 80099c4:	2101      	movs	r1, #1
 80099c6:	68f8      	ldr	r0, [r7, #12]
 80099c8:	f7fd fec2 	bl	8007750 <_ZN10IridiumSBD21enableSuperCapChargerEb>
	this->print((char*) "OK\r\n");
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	4838      	ldr	r0, [pc, #224]	; (8009ab4 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1d4>)
 80099d2:	4798      	blx	r3


	//Wait for the supercapacitors to charge
	//int start=millis();
	this->print((char*) "\tWaiting for the supercapacitors to charge...");
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	483d      	ldr	r0, [pc, #244]	; (8009ad0 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1f0>)
 80099da:	4798      	blx	r3
 80099dc:	e009      	b.n	80099f2 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x112>
		this->print((char*) "NOT OK\r\n");
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	483c      	ldr	r0, [pc, #240]	; (8009ad4 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1f4>)
 80099e4:	4798      	blx	r3
		this->print((char*) "\tError: Iridium failed to connect. Check I2C connection\r\n");
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	483b      	ldr	r0, [pc, #236]	; (8009ad8 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1f8>)
 80099ec:	4798      	blx	r3
		return -1;
 80099ee:	23ff      	movs	r3, #255	; 0xff
 80099f0:	e052      	b.n	8009a98 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1b8>
	while (!this->checkSuperCapCharger()){
 80099f2:	68f8      	ldr	r0, [r7, #12]
 80099f4:	f7fd feea 	bl	80077cc <_ZN10IridiumSBD20checkSuperCapChargerEv>
 80099f8:	4603      	mov	r3, r0
 80099fa:	f083 0301 	eor.w	r3, r3, #1
 80099fe:	b2db      	uxtb	r3, r3
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d004      	beq.n	8009a0e <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x12e>
		HAL_Delay(333);
 8009a04:	f240 104d 	movw	r0, #333	; 0x14d
 8009a08:	f002 fd7e 	bl	800c508 <HAL_Delay>
	while (!this->checkSuperCapCharger()){
 8009a0c:	e7f1      	b.n	80099f2 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x112>
	}
	this->print((char*) "OK\r\n");
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	4828      	ldr	r0, [pc, #160]	; (8009ab4 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1d4>)
 8009a14:	4798      	blx	r3


	//Enable power for the 9603N
	this->print((char*) "\tEnabling 9603N power...");
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4830      	ldr	r0, [pc, #192]	; (8009adc <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1fc>)
 8009a1c:	4798      	blx	r3
	this->enable9603Npower(true);
 8009a1e:	2101      	movs	r1, #1
 8009a20:	68f8      	ldr	r0, [r7, #12]
 8009a22:	f7fd ff03 	bl	800782c <_ZN10IridiumSBD16enable9603NpowerEb>
	this->print((char*) "OK\r\n");
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4822      	ldr	r0, [pc, #136]	; (8009ab4 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1d4>)
 8009a2c:	4798      	blx	r3
	/*
	 * Begin satellite modem operation
	 */

	//Power on the rockblock
	this->print((char*) "\tStarting Modem...");
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	482b      	ldr	r0, [pc, #172]	; (8009ae0 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x200>)
 8009a34:	4798      	blx	r3
	//this->setPowerProfile(profile);
	int err = this->begin();
 8009a36:	68f8      	ldr	r0, [r7, #12]
 8009a38:	f7fd fcf8 	bl	800742c <_ZN10IridiumSBD5beginEv>
 8009a3c:	6478      	str	r0, [r7, #68]	; 0x44
	if (err != ISBD_SUCCESS)
 8009a3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d00b      	beq.n	8009a5c <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x17c>
	  {
		this->print((char*) "Failed: ");
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4826      	ldr	r0, [pc, #152]	; (8009ae4 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x204>)
 8009a4a:	4798      	blx	r3
		this->MRT_Iridium_ErrorMessage(err);
 8009a4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a4e:	b2db      	uxtb	r3, r3
 8009a50:	4619      	mov	r1, r3
 8009a52:	68f8      	ldr	r0, [r7, #12]
 8009a54:	f000 f8a2 	bl	8009b9c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>

	    return HAL_ERROR;
 8009a58:	2301      	movs	r3, #1
 8009a5a:	e01d      	b.n	8009a98 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1b8>
	  }
	this->print((char*) "OK\r\n");
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4814      	ldr	r0, [pc, #80]	; (8009ab4 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1d4>)
 8009a62:	4798      	blx	r3

	//Setup default IMEI to 000000000000000 (no IMEI)
	IMEI= (char*) "000000000000000";
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	4a20      	ldr	r2, [pc, #128]	; (8009ae8 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x208>)
 8009a68:	605a      	str	r2, [r3, #4]

	char str[50];
	sprintf(str, "\tSetting timeout of %i seconds...", timeout);
 8009a6a:	7afa      	ldrb	r2, [r7, #11]
 8009a6c:	f107 0310 	add.w	r3, r7, #16
 8009a70:	491e      	ldr	r1, [pc, #120]	; (8009aec <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x20c>)
 8009a72:	4618      	mov	r0, r3
 8009a74:	f012 fafc 	bl	801c070 <siprintf>
	this->print((char*) str);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f107 0210 	add.w	r2, r7, #16
 8009a80:	4610      	mov	r0, r2
 8009a82:	4798      	blx	r3
	adjustATTimeout(timeout);
 8009a84:	7afb      	ldrb	r3, [r7, #11]
 8009a86:	4619      	mov	r1, r3
 8009a88:	68f8      	ldr	r0, [r7, #12]
 8009a8a:	f7fd fd70 	bl	800756e <_ZN10IridiumSBD15adjustATTimeoutEi>
	this->print((char*) "OK\r\n");
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4808      	ldr	r0, [pc, #32]	; (8009ab4 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1d4>)
 8009a94:	4798      	blx	r3

	return HAL_OK;
 8009a96:	2300      	movs	r3, #0
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3750      	adds	r7, #80	; 0x50
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}
 8009aa0:	08021fc4 	.word	0x08021fc4
 8009aa4:	08021fdc 	.word	0x08021fdc
 8009aa8:	20000598 	.word	0x20000598
 8009aac:	20000650 	.word	0x20000650
 8009ab0:	20000708 	.word	0x20000708
 8009ab4:	080218d8 	.word	0x080218d8
 8009ab8:	08021ff0 	.word	0x08021ff0
 8009abc:	08022010 	.word	0x08022010
 8009ac0:	08022030 	.word	0x08022030
 8009ac4:	08022050 	.word	0x08022050
 8009ac8:	08022070 	.word	0x08022070
 8009acc:	080220d8 	.word	0x080220d8
 8009ad0:	080220fc 	.word	0x080220fc
 8009ad4:	08022090 	.word	0x08022090
 8009ad8:	0802209c 	.word	0x0802209c
 8009adc:	0802212c 	.word	0x0802212c
 8009ae0:	08022148 	.word	0x08022148
 8009ae4:	0802215c 	.word	0x0802215c
 8009ae8:	08022168 	.word	0x08022168
 8009aec:	08022178 	.word	0x08022178

08009af0 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv>:


boolean IridiumSBD::MRT_Iridium_shutdown(void){
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b08a      	sub	sp, #40	; 0x28
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]

	this->print((char*) "Iridium 9603N Deinit\r\n");
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	4820      	ldr	r0, [pc, #128]	; (8009b80 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x90>)
 8009afe:	4798      	blx	r3

	// Power down the modem
	this->print((char*) "\tPutting the 9603N to sleep...");
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	481f      	ldr	r0, [pc, #124]	; (8009b84 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x94>)
 8009b06:	4798      	blx	r3
	int err = this->sleep();
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f7fd fcfb 	bl	8007504 <_ZN10IridiumSBD5sleepEv>
 8009b0e:	6278      	str	r0, [r7, #36]	; 0x24
	if (err != ISBD_SUCCESS)
 8009b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d00e      	beq.n	8009b34 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x44>
	{
		char str[24+sizeof(int)];
		sprintf(str, "sleep failed: error  %i\r\n", err);
 8009b16:	f107 0308 	add.w	r3, r7, #8
 8009b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b1c:	491a      	ldr	r1, [pc, #104]	; (8009b88 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x98>)
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f012 faa6 	bl	801c070 <siprintf>
		this->print((char*) str);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f107 0208 	add.w	r2, r7, #8
 8009b2c:	4610      	mov	r0, r2
 8009b2e:	4798      	blx	r3
		return false;
 8009b30:	2300      	movs	r3, #0
 8009b32:	e020      	b.n	8009b76 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x86>
	}
	this->print((char*) "OK\r\n");
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	4814      	ldr	r0, [pc, #80]	; (8009b8c <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x9c>)
 8009b3a:	4798      	blx	r3

	// Disable 9603N power
	this->print((char*) "\tDisabling 9603N power...");
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4813      	ldr	r0, [pc, #76]	; (8009b90 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xa0>)
 8009b42:	4798      	blx	r3
	this->enable9603Npower(false);
 8009b44:	2100      	movs	r1, #0
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f7fd fe70 	bl	800782c <_ZN10IridiumSBD16enable9603NpowerEb>
	this->print((char*) "OK\r\n");
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	480e      	ldr	r0, [pc, #56]	; (8009b8c <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x9c>)
 8009b52:	4798      	blx	r3

	// Disable the supercapacitor charger
	this->print((char*) "\tDisabling the supercapacitor charger...");
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	480e      	ldr	r0, [pc, #56]	; (8009b94 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xa4>)
 8009b5a:	4798      	blx	r3
	this->enableSuperCapCharger(false);
 8009b5c:	2100      	movs	r1, #0
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f7fd fdf6 	bl	8007750 <_ZN10IridiumSBD21enableSuperCapChargerEb>
	this->print((char*) "OK\r\n");
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	4808      	ldr	r0, [pc, #32]	; (8009b8c <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x9c>)
 8009b6a:	4798      	blx	r3

	this->print((char*) "\tIridium successfully shutdown\r\n");
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4809      	ldr	r0, [pc, #36]	; (8009b98 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xa8>)
 8009b72:	4798      	blx	r3
	return true;
 8009b74:	2301      	movs	r3, #1
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3728      	adds	r7, #40	; 0x28
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}
 8009b7e:	bf00      	nop
 8009b80:	0802219c 	.word	0x0802219c
 8009b84:	080221b4 	.word	0x080221b4
 8009b88:	080221d4 	.word	0x080221d4
 8009b8c:	080218d8 	.word	0x080218d8
 8009b90:	080221f0 	.word	0x080221f0
 8009b94:	0802220c 	.word	0x0802220c
 8009b98:	08022238 	.word	0x08022238

08009b9c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>:



void IridiumSBD::MRT_Iridium_ErrorMessage(uint8_t error){
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b082      	sub	sp, #8
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	460b      	mov	r3, r1
 8009ba6:	70fb      	strb	r3, [r7, #3]
	this->print((char*) "\r\n\tError:\t");
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4834      	ldr	r0, [pc, #208]	; (8009c80 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xe4>)
 8009bae:	4798      	blx	r3
	if (error == ISBD_ALREADY_AWAKE){
 8009bb0:	78fb      	ldrb	r3, [r7, #3]
 8009bb2:	2b01      	cmp	r3, #1
 8009bb4:	d104      	bne.n	8009bc0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x24>
		this->print((char*) "\tAlready Awake\r\n");
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4832      	ldr	r0, [pc, #200]	; (8009c84 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xe8>)
 8009bbc:	4798      	blx	r3
		this->print((char*) "\tDEBUG LINE REACHED\r\n");
	}
	else{
		this->print((char*) "\tUNKNOWN\r\n");
	}
}
 8009bbe:	e05b      	b.n	8009c78 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_SERIAL_FAILURE){
 8009bc0:	78fb      	ldrb	r3, [r7, #3]
 8009bc2:	2b02      	cmp	r3, #2
 8009bc4:	d104      	bne.n	8009bd0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x34>
		this->print((char*) "\tSerial Failure\r\n");
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	482f      	ldr	r0, [pc, #188]	; (8009c88 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xec>)
 8009bcc:	4798      	blx	r3
}
 8009bce:	e053      	b.n	8009c78 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_PROTOCOL_ERROR){
 8009bd0:	78fb      	ldrb	r3, [r7, #3]
 8009bd2:	2b03      	cmp	r3, #3
 8009bd4:	d104      	bne.n	8009be0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x44>
		this->print((char*) "\tProtocol Error\r\n");
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	482c      	ldr	r0, [pc, #176]	; (8009c8c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xf0>)
 8009bdc:	4798      	blx	r3
}
 8009bde:	e04b      	b.n	8009c78 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_CANCELLED){
 8009be0:	78fb      	ldrb	r3, [r7, #3]
 8009be2:	2b04      	cmp	r3, #4
 8009be4:	d104      	bne.n	8009bf0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x54>
		this->print((char*) "\tCancelled\r\n");
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4829      	ldr	r0, [pc, #164]	; (8009c90 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xf4>)
 8009bec:	4798      	blx	r3
}
 8009bee:	e043      	b.n	8009c78 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_NO_MODEM_DETECTED){
 8009bf0:	78fb      	ldrb	r3, [r7, #3]
 8009bf2:	2b05      	cmp	r3, #5
 8009bf4:	d104      	bne.n	8009c00 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x64>
		this->print((char*) "\tNo modem detected: check wiring.\r\n");
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4826      	ldr	r0, [pc, #152]	; (8009c94 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xf8>)
 8009bfc:	4798      	blx	r3
}
 8009bfe:	e03b      	b.n	8009c78 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_SBDIX_FATAL_ERROR){
 8009c00:	78fb      	ldrb	r3, [r7, #3]
 8009c02:	2b06      	cmp	r3, #6
 8009c04:	d104      	bne.n	8009c10 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x74>
		this->print((char*) "\tSDBIX Fatal Error\r\n");
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	4823      	ldr	r0, [pc, #140]	; (8009c98 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xfc>)
 8009c0c:	4798      	blx	r3
}
 8009c0e:	e033      	b.n	8009c78 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_SENDRECEIVE_TIMEOUT){
 8009c10:	78fb      	ldrb	r3, [r7, #3]
 8009c12:	2b07      	cmp	r3, #7
 8009c14:	d104      	bne.n	8009c20 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x84>
		this->print((char*) "\tSend-Receive Timeout\r\n");
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	4820      	ldr	r0, [pc, #128]	; (8009c9c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x100>)
 8009c1c:	4798      	blx	r3
}
 8009c1e:	e02b      	b.n	8009c78 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_RX_OVERFLOW){
 8009c20:	78fb      	ldrb	r3, [r7, #3]
 8009c22:	2b08      	cmp	r3, #8
 8009c24:	d104      	bne.n	8009c30 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x94>
		this->print((char*) "\tRX Overflow\r\n");
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	481d      	ldr	r0, [pc, #116]	; (8009ca0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x104>)
 8009c2c:	4798      	blx	r3
}
 8009c2e:	e023      	b.n	8009c78 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_REENTRANT){
 8009c30:	78fb      	ldrb	r3, [r7, #3]
 8009c32:	2b09      	cmp	r3, #9
 8009c34:	d104      	bne.n	8009c40 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xa4>
		this->print((char*) "\tREENTRANT\r\n");
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	481a      	ldr	r0, [pc, #104]	; (8009ca4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x108>)
 8009c3c:	4798      	blx	r3
}
 8009c3e:	e01b      	b.n	8009c78 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_IS_ASLEEP){
 8009c40:	78fb      	ldrb	r3, [r7, #3]
 8009c42:	2b0a      	cmp	r3, #10
 8009c44:	d104      	bne.n	8009c50 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xb4>
		this->print((char*) "\tIs Asleep\r\n");
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	4817      	ldr	r0, [pc, #92]	; (8009ca8 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x10c>)
 8009c4c:	4798      	blx	r3
}
 8009c4e:	e013      	b.n	8009c78 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_NO_SLEEP_PIN){
 8009c50:	78fb      	ldrb	r3, [r7, #3]
 8009c52:	2b0b      	cmp	r3, #11
 8009c54:	d104      	bne.n	8009c60 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xc4>
		this->print((char*) "\tNo Sleep Pin\r\n");
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	4814      	ldr	r0, [pc, #80]	; (8009cac <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x110>)
 8009c5c:	4798      	blx	r3
}
 8009c5e:	e00b      	b.n	8009c78 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if(error == 20){
 8009c60:	78fb      	ldrb	r3, [r7, #3]
 8009c62:	2b14      	cmp	r3, #20
 8009c64:	d104      	bne.n	8009c70 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xd4>
		this->print((char*) "\tDEBUG LINE REACHED\r\n");
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4811      	ldr	r0, [pc, #68]	; (8009cb0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x114>)
 8009c6c:	4798      	blx	r3
}
 8009c6e:	e003      	b.n	8009c78 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
		this->print((char*) "\tUNKNOWN\r\n");
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	480f      	ldr	r0, [pc, #60]	; (8009cb4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x118>)
 8009c76:	4798      	blx	r3
}
 8009c78:	bf00      	nop
 8009c7a:	3708      	adds	r7, #8
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}
 8009c80:	0802225c 	.word	0x0802225c
 8009c84:	08022268 	.word	0x08022268
 8009c88:	0802227c 	.word	0x0802227c
 8009c8c:	08022290 	.word	0x08022290
 8009c90:	080222a4 	.word	0x080222a4
 8009c94:	080222b4 	.word	0x080222b4
 8009c98:	080222d8 	.word	0x080222d8
 8009c9c:	080222f0 	.word	0x080222f0
 8009ca0:	08022308 	.word	0x08022308
 8009ca4:	08022318 	.word	0x08022318
 8009ca8:	08022328 	.word	0x08022328
 8009cac:	08022338 	.word	0x08022338
 8009cb0:	08022348 	.word	0x08022348
 8009cb4:	08022360 	.word	0x08022360

08009cb8 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv>:


/*
 * This function requests the satellite modem's IMEI number.
 */
boolean IridiumSBD::MRT_Iridium_getIMEI(void){
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b092      	sub	sp, #72	; 0x48
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]

	//Check if we already have the IMEI
	if (strcmp(IMEI,"000000000000000")==0){
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	491f      	ldr	r1, [pc, #124]	; (8009d44 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x8c>)
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f7f6 fa92 	bl	80001f0 <strcmp>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d124      	bne.n	8009d1c <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x64>

		//Reset the IMEI
		IMEI=new char[16];
 8009cd2:	2010      	movs	r0, #16
 8009cd4:	f00f fc73 	bl	80195be <_Znaj>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	461a      	mov	r2, r3
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	605a      	str	r2, [r3, #4]

		// Get the IMEI
		this->print((char*) "\r\nIridium: Retrieving the IMEI\r\n");
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4818      	ldr	r0, [pc, #96]	; (8009d48 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x90>)
 8009ce6:	4798      	blx	r3
		int err = this->getIMEI(IMEI, 16);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	685b      	ldr	r3, [r3, #4]
 8009cec:	2210      	movs	r2, #16
 8009cee:	4619      	mov	r1, r3
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f7fd fe95 	bl	8007a20 <_ZN10IridiumSBD7getIMEIEPcj>
 8009cf6:	6478      	str	r0, [r7, #68]	; 0x44
		if (err != ISBD_SUCCESS)
 8009cf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d00e      	beq.n	8009d1c <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x64>
		{
			char str[24+sizeof(int)];
		    sprintf(str, "\tgetIMEI failed: error %i\r\n", err);
 8009cfe:	f107 030c 	add.w	r3, r7, #12
 8009d02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d04:	4911      	ldr	r1, [pc, #68]	; (8009d4c <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x94>)
 8009d06:	4618      	mov	r0, r3
 8009d08:	f012 f9b2 	bl	801c070 <siprintf>
		    this->print((char*) str);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f107 020c 	add.w	r2, r7, #12
 8009d14:	4610      	mov	r0, r2
 8009d16:	4798      	blx	r3
		    return false;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	e00e      	b.n	8009d3a <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x82>
		  }
	}

	char str[28];//IMEI is 15 integers long
	sprintf(str, "\tIMEI is %s\r\n", IMEI);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	685a      	ldr	r2, [r3, #4]
 8009d20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009d24:	490a      	ldr	r1, [pc, #40]	; (8009d50 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x98>)
 8009d26:	4618      	mov	r0, r3
 8009d28:	f012 f9a2 	bl	801c070 <siprintf>
	this->print((char*) str);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009d34:	4610      	mov	r0, r2
 8009d36:	4798      	blx	r3
	return true;
 8009d38:	2301      	movs	r3, #1
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3748      	adds	r7, #72	; 0x48
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}
 8009d42:	bf00      	nop
 8009d44:	08022168 	.word	0x08022168
 8009d48:	0802236c 	.word	0x0802236c
 8009d4c:	08022390 	.word	0x08022390
 8009d50:	080223ac 	.word	0x080223ac

08009d54 <_ZN10IridiumSBD15MRT_Iridium_CSQEv>:
 * This sketch checks the Iridium signal quality and returns the status
 * of the Network Available signal.
 *
 * The boolean param is if you want to check for network availability
 */
int IridiumSBD::MRT_Iridium_CSQ(){
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b09e      	sub	sp, #120	; 0x78
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
	this->print((char*) "\r\nIridium: Checking Signal Quality\r\n");
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	481c      	ldr	r0, [pc, #112]	; (8009dd4 <_ZN10IridiumSBD15MRT_Iridium_CSQEv+0x80>)
 8009d62:	4798      	blx	r3
	int signalQuality = -1;
 8009d64:	f04f 33ff 	mov.w	r3, #4294967295
 8009d68:	673b      	str	r3, [r7, #112]	; 0x70

	this->MRT_Iridium_getIMEI();
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f7ff ffa4 	bl	8009cb8 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv>

	// Check the signal quality.
	// This returns a number between 0 and 5.
	// 2 or better is preferred.
	int err = this->getSignalQuality(signalQuality);
 8009d70:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8009d74:	4619      	mov	r1, r3
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f7fd fba6 	bl	80074c8 <_ZN10IridiumSBD16getSignalQualityERi>
 8009d7c:	6778      	str	r0, [r7, #116]	; 0x74
	if (err != ISBD_SUCCESS)
 8009d7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d015      	beq.n	8009db0 <_ZN10IridiumSBD15MRT_Iridium_CSQEv+0x5c>
	{
	  char str[34+sizeof(int)];
	  sprintf(str, "\tSignalQuality failed: error  %i\r\n", err);
 8009d84:	f107 030c 	add.w	r3, r7, #12
 8009d88:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009d8a:	4913      	ldr	r1, [pc, #76]	; (8009dd8 <_ZN10IridiumSBD15MRT_Iridium_CSQEv+0x84>)
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f012 f96f 	bl	801c070 <siprintf>
	  this->print((char*) str);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f107 020c 	add.w	r2, r7, #12
 8009d9a:	4610      	mov	r0, r2
 8009d9c:	4798      	blx	r3
	  this->MRT_Iridium_ErrorMessage(err);
 8009d9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009da0:	b2db      	uxtb	r3, r3
 8009da2:	4619      	mov	r1, r3
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f7ff fef9 	bl	8009b9c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>
	  return -1;
 8009daa:	f04f 33ff 	mov.w	r3, #4294967295
 8009dae:	e00d      	b.n	8009dcc <_ZN10IridiumSBD15MRT_Iridium_CSQEv+0x78>
	}

	char str[56+sizeof(int)];
	sprintf(str, "\tOn a scale of 0 to 5, signal quality is currently  %i\r\n", signalQuality);
 8009db0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009db2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009db6:	4909      	ldr	r1, [pc, #36]	; (8009ddc <_ZN10IridiumSBD15MRT_Iridium_CSQEv+0x88>)
 8009db8:	4618      	mov	r0, r3
 8009dba:	f012 f959 	bl	801c070 <siprintf>
	this->print((char*) str);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8009dc6:	4610      	mov	r0, r2
 8009dc8:	4798      	blx	r3

	return signalQuality;
 8009dca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3778      	adds	r7, #120	; 0x78
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}
 8009dd4:	080223bc 	.word	0x080223bc
 8009dd8:	080223e4 	.word	0x080223e4
 8009ddc:	08022408 	.word	0x08022408

08009de0 <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv>:


/*
 * This function checks if a network is available
 */
boolean IridiumSBD::MRT_Iridium_NetworkAvailability(void){
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b082      	sub	sp, #8
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]

	// Check Network Available.
	this->print((char*) "\r\nIridium: Checking if Network is Available:\t");
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	480c      	ldr	r0, [pc, #48]	; (8009e20 <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv+0x40>)
 8009dee:	4798      	blx	r3
	if (!this->checkNetworkAvailable()){
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f7fd fdc7 	bl	8007984 <_ZN10IridiumSBD21checkNetworkAvailableEv>
 8009df6:	4603      	mov	r3, r0
 8009df8:	f083 0301 	eor.w	r3, r3, #1
 8009dfc:	b2db      	uxtb	r3, r3
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d005      	beq.n	8009e0e <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv+0x2e>
		this->print((char*) "not available.\r\n");
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	4807      	ldr	r0, [pc, #28]	; (8009e24 <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv+0x44>)
 8009e08:	4798      	blx	r3
		//diagprint(F("(This might be because the 9603N has not yet aquired the ring channel.)\r\n"));
		return false;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	e004      	b.n	8009e18 <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv+0x38>
	}

	this->print((char*) "available.\r\n");
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	4805      	ldr	r0, [pc, #20]	; (8009e28 <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv+0x48>)
 8009e14:	4798      	blx	r3
	return true;
 8009e16:	2301      	movs	r3, #1
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3708      	adds	r7, #8
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}
 8009e20:	08022444 	.word	0x08022444
 8009e24:	08022474 	.word	0x08022474
 8009e28:	08022488 	.word	0x08022488

08009e2c <_ZN10IridiumSBD19MRT_Iridium_getTimeEv>:


/*
 * This function requests the time
 */
boolean IridiumSBD::MRT_Iridium_getTime(void){
 8009e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e2e:	b0a1      	sub	sp, #132	; 0x84
 8009e30:	af04      	add	r7, sp, #16
 8009e32:	6078      	str	r0, [r7, #4]
	this->print((char*) "\r\nIridium: Retrieving time\r\n");
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	4820      	ldr	r0, [pc, #128]	; (8009ebc <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x90>)
 8009e3a:	4798      	blx	r3
	struct tm t; // struct tm is defined in time.h
	int err = this->getSystemTime(t); // Ask the 9603N for the system time
 8009e3c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009e40:	4619      	mov	r1, r3
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f7fd fbc0 	bl	80075c8 <_ZN10IridiumSBD13getSystemTimeER2tm>
 8009e48:	66f8      	str	r0, [r7, #108]	; 0x6c
	if (err == ISBD_SUCCESS) // Was it successful?
 8009e4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d11c      	bne.n	8009e8a <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x5e>
	    {
		char buf[61];
		sprintf(buf, "\r\n\t<< Iridium date/time is %d-%02d-%02d %02d:%02d:%02d\r\n",
				t.tm_year + 1900, t.tm_mon + 1, t.tm_mday, t.tm_hour, t.tm_min, t.tm_sec);
 8009e50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
		sprintf(buf, "\r\n\t<< Iridium date/time is %d-%02d-%02d %02d:%02d:%02d\r\n",
 8009e52:	f203 756c 	addw	r5, r3, #1900	; 0x76c
				t.tm_year + 1900, t.tm_mon + 1, t.tm_mday, t.tm_hour, t.tm_min, t.tm_sec);
 8009e56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
		sprintf(buf, "\r\n\t<< Iridium date/time is %d-%02d-%02d %02d:%02d:%02d\r\n",
 8009e58:	1c5e      	adds	r6, r3, #1
 8009e5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e5c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009e5e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009e60:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8009e62:	f107 0408 	add.w	r4, r7, #8
 8009e66:	9003      	str	r0, [sp, #12]
 8009e68:	9102      	str	r1, [sp, #8]
 8009e6a:	9201      	str	r2, [sp, #4]
 8009e6c:	9300      	str	r3, [sp, #0]
 8009e6e:	4633      	mov	r3, r6
 8009e70:	462a      	mov	r2, r5
 8009e72:	4913      	ldr	r1, [pc, #76]	; (8009ec0 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x94>)
 8009e74:	4620      	mov	r0, r4
 8009e76:	f012 f8fb 	bl	801c070 <siprintf>
		this->print((char*) buf);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f107 0208 	add.w	r2, r7, #8
 8009e82:	4610      	mov	r0, r2
 8009e84:	4798      	blx	r3
		return true;
 8009e86:	2301      	movs	r3, #1
 8009e88:	e013      	b.n	8009eb2 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x86>
	}

	else if (err == ISBD_NO_NETWORK) // Did it fail because the 9603N has not yet seen the network?
 8009e8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e8c:	2b0c      	cmp	r3, #12
 8009e8e:	d105      	bne.n	8009e9c <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x70>
	     {
		 this->print((char*) "\tNo network detected.\r\n");
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	480b      	ldr	r0, [pc, #44]	; (8009ec4 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x98>)
 8009e96:	4798      	blx	r3
	   	 return false;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	e00a      	b.n	8009eb2 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x86>
	}

	else
	    {
		this->print((char*) "\tUnexpected Error ");
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4809      	ldr	r0, [pc, #36]	; (8009ec8 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x9c>)
 8009ea2:	4798      	blx	r3
		this->MRT_Iridium_ErrorMessage(err);
 8009ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ea6:	b2db      	uxtb	r3, r3
 8009ea8:	4619      	mov	r1, r3
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f7ff fe76 	bl	8009b9c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>
		return false;
 8009eb0:	2300      	movs	r3, #0
	}
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3774      	adds	r7, #116	; 0x74
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	08022498 	.word	0x08022498
 8009ec0:	080224b8 	.word	0x080224b8
 8009ec4:	080224f4 	.word	0x080224f4
 8009ec8:	0802250c 	.word	0x0802250c

08009ecc <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc>:
 * This sketch sends a "Hello, world!" message from the satellite modem.
 * If you have activated your account and have credits, this message
 * should arrive at the endpoints (delivery group) you have configured
 * (email address or HTTP POST).
 */
boolean IridiumSBD::MRT_Iridium_sendMessage(char* msg){
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b090      	sub	sp, #64	; 0x40
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	6039      	str	r1, [r7, #0]
	int temp = this->atTimeout; //Save default atTimeout
	adjustATTimeout(timeout);
*/

	// Send the message
	this->print((char*) "\r\nIridium: Trying to send the message.  This might take several minutes.\r\n");
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4828      	ldr	r0, [pc, #160]	; (8009f7c <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xb0>)
 8009edc:	4798      	blx	r3
	int err = this->sendSBDText((const char*) msg);
 8009ede:	6839      	ldr	r1, [r7, #0]
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f7fd facd 	bl	8007480 <_ZN10IridiumSBD11sendSBDTextEPKc>
 8009ee6:	63f8      	str	r0, [r7, #60]	; 0x3c
	//int err = this->sendSBDText((const char*) "Hello, world!");
	//int err = ISBD_SENDRECEIVE_TIMEOUT;

	if (err != ISBD_SUCCESS){
 8009ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d01b      	beq.n	8009f26 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0x5a>
		char str[50];
		sprintf(str, "\tsendSBDText failed: error -> %i\r\n", err);
 8009eee:	f107 0308 	add.w	r3, r7, #8
 8009ef2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009ef4:	4922      	ldr	r1, [pc, #136]	; (8009f80 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xb4>)
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f012 f8ba 	bl	801c070 <siprintf>
		this->print((char*) str);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f107 0208 	add.w	r2, r7, #8
 8009f04:	4610      	mov	r0, r2
 8009f06:	4798      	blx	r3
	    if (err == ISBD_SENDRECEIVE_TIMEOUT){
 8009f08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f0a:	2b07      	cmp	r3, #7
 8009f0c:	d103      	bne.n	8009f16 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0x4a>
	    	this->print((char*) "\tTry again with a better view of the sky.\r\n");
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	481c      	ldr	r0, [pc, #112]	; (8009f84 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xb8>)
 8009f14:	4798      	blx	r3
	    }
	    this->MRT_Iridium_ErrorMessage((uint8_t) err);
 8009f16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f18:	b2db      	uxtb	r3, r3
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f7ff fe3d 	bl	8009b9c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>
	    return false;
 8009f22:	2300      	movs	r3, #0
 8009f24:	e025      	b.n	8009f72 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xa6>
	}

	else{
		this->print((char*) "\tMessage sent\r\n");
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	4817      	ldr	r0, [pc, #92]	; (8009f88 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xbc>)
 8009f2c:	4798      	blx	r3
	}

	// Clear the Mobile Originated message buffer
	this->print((char*) "\tClearing the MO buffer.\r\n");
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4816      	ldr	r0, [pc, #88]	; (8009f8c <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xc0>)
 8009f34:	4798      	blx	r3
	err = this->clearBuffers(ISBD_CLEAR_MO); // Clear MO buffer
 8009f36:	2100      	movs	r1, #0
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f7fd fd53 	bl	80079e4 <_ZN10IridiumSBD12clearBuffersEi>
 8009f3e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (err != ISBD_SUCCESS){
 8009f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d014      	beq.n	8009f70 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xa4>
		char str[50];
		sprintf(str, "clearBuffers failed: error -> %i\r\n", err);
 8009f46:	f107 0308 	add.w	r3, r7, #8
 8009f4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009f4c:	4910      	ldr	r1, [pc, #64]	; (8009f90 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xc4>)
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f012 f88e 	bl	801c070 <siprintf>
		this->print((char*) str);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f107 0208 	add.w	r2, r7, #8
 8009f5c:	4610      	mov	r0, r2
 8009f5e:	4798      	blx	r3
		this->MRT_Iridium_ErrorMessage((uint8_t) err);
 8009f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f62:	b2db      	uxtb	r3, r3
 8009f64:	4619      	mov	r1, r3
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f7ff fe18 	bl	8009b9c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>
		return false;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	e000      	b.n	8009f72 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xa6>
	}
	return true;
 8009f70:	2301      	movs	r3, #1
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3740      	adds	r7, #64	; 0x40
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}
 8009f7a:	bf00      	nop
 8009f7c:	08022520 	.word	0x08022520
 8009f80:	0802256c 	.word	0x0802256c
 8009f84:	08022590 	.word	0x08022590
 8009f88:	080225bc 	.word	0x080225bc
 8009f8c:	080225cc 	.word	0x080225cc
 8009f90:	080225e8 	.word	0x080225e8

08009f94 <_ZN10IridiumSBDC1ER7TwoWireh>:
      if (ringPin != -1)
         pinMode(ringPin, INPUT);
   }
   */

IridiumSBD(TwoWire &wirePort = IRIDIUM_I2C, uint8_t deviceAddress = 0x63)
 8009f94:	b480      	push	{r7}
 8009f96:	b085      	sub	sp, #20
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	60f8      	str	r0, [r7, #12]
 8009f9c:	60b9      	str	r1, [r7, #8]
 8009f9e:	4613      	mov	r3, r2
 8009fa0:	71fb      	strb	r3, [r7, #7]
   {
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	66da      	str	r2, [r3, #108]	; 0x6c
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2205      	movs	r2, #5
 8009fac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	2202      	movs	r2, #2
 8009fbc:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2204      	movs	r2, #4
 8009fc4:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	2208      	movs	r2, #8
 8009fcc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2210      	movs	r2, #16
 8009fd4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	2220      	movs	r2, #32
 8009fdc:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	2240      	movs	r2, #64	; 0x40
 8009fe4:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
      useSerial = false;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	2200      	movs	r2, #0
 8009fec:	745a      	strb	r2, [r3, #17]
      wireport = &wirePort;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	68ba      	ldr	r2, [r7, #8]
 8009ff2:	60da      	str	r2, [r3, #12]
      deviceaddress = deviceAddress;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	79fa      	ldrb	r2, [r7, #7]
 8009ff8:	741a      	strb	r2, [r3, #16]
      sbdixInterval = ISBD_USB_SBDIX_INTERVAL;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	221e      	movs	r2, #30
 8009ffe:	65da      	str	r2, [r3, #92]	; 0x5c
      atTimeout = ISBD_DEFAULT_AT_TIMEOUT;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	221e      	movs	r2, #30
 800a004:	661a      	str	r2, [r3, #96]	; 0x60
      sendReceiveTimeout = ISBD_DEFAULT_SENDRECEIVE_TIME;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a00c:	665a      	str	r2, [r3, #100]	; 0x64
      startupTimeout = ISBD_STARTUP_MAX_TIME;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	22f0      	movs	r2, #240	; 0xf0
 800a012:	669a      	str	r2, [r3, #104]	; 0x68
      remainingMessages = -1;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f04f 32ff 	mov.w	r2, #4294967295
 800a01a:	675a      	str	r2, [r3, #116]	; 0x74
      asleep = true;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	2201      	movs	r2, #1
 800a020:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
      reentrant = false;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2200      	movs	r2, #0
 800a028:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
      sleepPin = -1;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f04f 32ff 	mov.w	r2, #4294967295
 800a032:	67da      	str	r2, [r3, #124]	; 0x7c
      sleepPinConfigured = false;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	2200      	movs	r2, #0
 800a038:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      ringPin = -1;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f04f 32ff 	mov.w	r2, #4294967295
 800a042:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      msstmWorkaroundRequested = false;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	2200      	movs	r2, #0
 800a04a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
      ringAlertsEnabled = true;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	2201      	movs	r2, #1
 800a052:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
      ringAsserted = false;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	2200      	movs	r2, #0
 800a05a:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
      lastPowerOnTime = 0UL;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	2200      	movs	r2, #0
 800a062:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      head = SBDRING;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	4a0c      	ldr	r2, [pc, #48]	; (800a09c <_ZN10IridiumSBDC1ER7TwoWireh+0x108>)
 800a06a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      tail = SBDRING;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	4a0a      	ldr	r2, [pc, #40]	; (800a09c <_ZN10IridiumSBDC1ER7TwoWireh+0x108>)
 800a072:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      nextChar = -1;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	f04f 32ff 	mov.w	r2, #4294967295
 800a07c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
      i2c_ser_buffer_tail = 0;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2200      	movs	r2, #0
 800a084:	655a      	str	r2, [r3, #84]	; 0x54
      i2c_ser_buffer_head = 0;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2200      	movs	r2, #0
 800a08a:	659a      	str	r2, [r3, #88]	; 0x58
   }
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	4618      	mov	r0, r3
 800a090:	3714      	adds	r7, #20
 800a092:	46bd      	mov	sp, r7
 800a094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a098:	4770      	bx	lr
 800a09a:	bf00      	nop
 800a09c:	08022a18 	.word	0x08022a18

0800a0a0 <MRT_Iridium_Constructor>:

//C structs
struct HIRIDIUM hiridium;


void MRT_Iridium_Constructor(){
 800a0a0:	b598      	push	{r3, r4, r7, lr}
 800a0a2:	af00      	add	r7, sp, #0
	if (E_T==NULL){
 800a0a4:	4b08      	ldr	r3, [pc, #32]	; (800a0c8 <MRT_Iridium_Constructor+0x28>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d10b      	bne.n	800a0c4 <MRT_Iridium_Constructor+0x24>
		E_T = new IridiumSBD();
 800a0ac:	20a4      	movs	r0, #164	; 0xa4
 800a0ae:	f00f fa75 	bl	801959c <_Znwj>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	461c      	mov	r4, r3
 800a0b6:	2263      	movs	r2, #99	; 0x63
 800a0b8:	4904      	ldr	r1, [pc, #16]	; (800a0cc <MRT_Iridium_Constructor+0x2c>)
 800a0ba:	4620      	mov	r0, r4
 800a0bc:	f7ff ff6a 	bl	8009f94 <_ZN10IridiumSBDC1ER7TwoWireh>
 800a0c0:	4b01      	ldr	r3, [pc, #4]	; (800a0c8 <MRT_Iridium_Constructor+0x28>)
 800a0c2:	601c      	str	r4, [r3, #0]
	}
}
 800a0c4:	bf00      	nop
 800a0c6:	bd98      	pop	{r3, r4, r7, pc}
 800a0c8:	20000580 	.word	0x20000580
 800a0cc:	20000598 	.word	0x20000598

0800a0d0 <MRT_Iridium_Destructor>:

void MRT_Iridium_Destructor(){
 800a0d0:	b480      	push	{r7}
 800a0d2:	af00      	add	r7, sp, #0
	if (E_T!=NULL){
 800a0d4:	4b05      	ldr	r3, [pc, #20]	; (800a0ec <MRT_Iridium_Destructor+0x1c>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d002      	beq.n	800a0e2 <MRT_Iridium_Destructor+0x12>
		E_T = NULL;
 800a0dc:	4b03      	ldr	r3, [pc, #12]	; (800a0ec <MRT_Iridium_Destructor+0x1c>)
 800a0de:	2200      	movs	r2, #0
 800a0e0:	601a      	str	r2, [r3, #0]
	}
}
 800a0e2:	bf00      	nop
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ea:	4770      	bx	lr
 800a0ec:	20000580 	.word	0x20000580

0800a0f0 <MRT_Iridium_Init>:


struct HIRIDIUM MRT_Iridium_Init(uint8_t timeout, uint8_t i2c_bus, void (*iridium_print)(char*)){
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b084      	sub	sp, #16
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	60f8      	str	r0, [r7, #12]
 800a0f8:	607b      	str	r3, [r7, #4]
 800a0fa:	460b      	mov	r3, r1
 800a0fc:	72fb      	strb	r3, [r7, #11]
 800a0fe:	4613      	mov	r3, r2
 800a100:	72bb      	strb	r3, [r7, #10]
	MRT_Iridium_Constructor();
 800a102:	f7ff ffcd 	bl	800a0a0 <MRT_Iridium_Constructor>
	E_T->MRT_Iridium_setup(timeout, i2c_bus, iridium_print);
 800a106:	4b0d      	ldr	r3, [pc, #52]	; (800a13c <MRT_Iridium_Init+0x4c>)
 800a108:	6818      	ldr	r0, [r3, #0]
 800a10a:	7aba      	ldrb	r2, [r7, #10]
 800a10c:	7af9      	ldrb	r1, [r7, #11]
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f7ff fbe6 	bl	80098e0 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE>
	HIRIDIUM iridium_handler;
	iridium_handler.CSQ = &MRT_Iridium_CSQ;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	4a0a      	ldr	r2, [pc, #40]	; (800a140 <MRT_Iridium_Init+0x50>)
 800a118:	60da      	str	r2, [r3, #12]
	iridium_handler.getIMEI = &MRT_Iridium_getIMEI;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	4a09      	ldr	r2, [pc, #36]	; (800a144 <MRT_Iridium_Init+0x54>)
 800a11e:	601a      	str	r2, [r3, #0]
	iridium_handler.getNetworkAvailability = &MRT_Iridium_NetworkAvailability;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	4a09      	ldr	r2, [pc, #36]	; (800a148 <MRT_Iridium_Init+0x58>)
 800a124:	609a      	str	r2, [r3, #8]
	iridium_handler.getTime = &MRT_Iridium_getTime;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	4a08      	ldr	r2, [pc, #32]	; (800a14c <MRT_Iridium_Init+0x5c>)
 800a12a:	605a      	str	r2, [r3, #4]
	iridium_handler.sendMessage = &MRT_Iridium_sendMessage;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	4a08      	ldr	r2, [pc, #32]	; (800a150 <MRT_Iridium_Init+0x60>)
 800a130:	611a      	str	r2, [r3, #16]
	return iridium_handler;
 800a132:	bf00      	nop
}
 800a134:	68f8      	ldr	r0, [r7, #12]
 800a136:	3710      	adds	r7, #16
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}
 800a13c:	20000580 	.word	0x20000580
 800a140:	0800a1a9 	.word	0x0800a1a9
 800a144:	0800a185 	.word	0x0800a185
 800a148:	0800a1c1 	.word	0x0800a1c1
 800a14c:	0800a1e5 	.word	0x0800a1e5
 800a150:	0800a209 	.word	0x0800a209

0800a154 <MRT_Iridium_Deinit>:

bool MRT_Iridium_Deinit(void){
 800a154:	b580      	push	{r7, lr}
 800a156:	b082      	sub	sp, #8
 800a158:	af00      	add	r7, sp, #0
	bool b = E_T->MRT_Iridium_shutdown();
 800a15a:	4b09      	ldr	r3, [pc, #36]	; (800a180 <MRT_Iridium_Deinit+0x2c>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	4618      	mov	r0, r3
 800a160:	f7ff fcc6 	bl	8009af0 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv>
 800a164:	4603      	mov	r3, r0
 800a166:	2b00      	cmp	r3, #0
 800a168:	bf14      	ite	ne
 800a16a:	2301      	movne	r3, #1
 800a16c:	2300      	moveq	r3, #0
 800a16e:	71fb      	strb	r3, [r7, #7]
	MRT_Iridium_Destructor();
 800a170:	f7ff ffae 	bl	800a0d0 <MRT_Iridium_Destructor>
	return b;
 800a174:	79fb      	ldrb	r3, [r7, #7]
}
 800a176:	4618      	mov	r0, r3
 800a178:	3708      	adds	r7, #8
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}
 800a17e:	bf00      	nop
 800a180:	20000580 	.word	0x20000580

0800a184 <MRT_Iridium_getIMEI>:

void MRT_Iridium_ErrorMessage(uint8_t error){
	return E_T->MRT_Iridium_ErrorMessage(error);
}

bool MRT_Iridium_getIMEI(void){
 800a184:	b580      	push	{r7, lr}
 800a186:	af00      	add	r7, sp, #0
	return E_T->MRT_Iridium_getIMEI();
 800a188:	4b06      	ldr	r3, [pc, #24]	; (800a1a4 <MRT_Iridium_getIMEI+0x20>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	4618      	mov	r0, r3
 800a18e:	f7ff fd93 	bl	8009cb8 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv>
 800a192:	4603      	mov	r3, r0
 800a194:	2b00      	cmp	r3, #0
 800a196:	bf14      	ite	ne
 800a198:	2301      	movne	r3, #1
 800a19a:	2300      	moveq	r3, #0
 800a19c:	b2db      	uxtb	r3, r3
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	bd80      	pop	{r7, pc}
 800a1a2:	bf00      	nop
 800a1a4:	20000580 	.word	0x20000580

0800a1a8 <MRT_Iridium_CSQ>:


int MRT_Iridium_CSQ(){
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	af00      	add	r7, sp, #0
	return E_T->MRT_Iridium_CSQ();
 800a1ac:	4b03      	ldr	r3, [pc, #12]	; (800a1bc <MRT_Iridium_CSQ+0x14>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f7ff fdcf 	bl	8009d54 <_ZN10IridiumSBD15MRT_Iridium_CSQEv>
 800a1b6:	4603      	mov	r3, r0
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	bd80      	pop	{r7, pc}
 800a1bc:	20000580 	.word	0x20000580

0800a1c0 <MRT_Iridium_NetworkAvailability>:

bool MRT_Iridium_NetworkAvailability(){
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	af00      	add	r7, sp, #0
	return E_T->MRT_Iridium_NetworkAvailability();
 800a1c4:	4b06      	ldr	r3, [pc, #24]	; (800a1e0 <MRT_Iridium_NetworkAvailability+0x20>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f7ff fe09 	bl	8009de0 <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	bf14      	ite	ne
 800a1d4:	2301      	movne	r3, #1
 800a1d6:	2300      	moveq	r3, #0
 800a1d8:	b2db      	uxtb	r3, r3
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	bd80      	pop	{r7, pc}
 800a1de:	bf00      	nop
 800a1e0:	20000580 	.word	0x20000580

0800a1e4 <MRT_Iridium_getTime>:


bool MRT_Iridium_getTime(void){
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	af00      	add	r7, sp, #0
	return E_T->MRT_Iridium_getTime();
 800a1e8:	4b06      	ldr	r3, [pc, #24]	; (800a204 <MRT_Iridium_getTime+0x20>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f7ff fe1d 	bl	8009e2c <_ZN10IridiumSBD19MRT_Iridium_getTimeEv>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	bf14      	ite	ne
 800a1f8:	2301      	movne	r3, #1
 800a1fa:	2300      	moveq	r3, #0
 800a1fc:	b2db      	uxtb	r3, r3
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	bd80      	pop	{r7, pc}
 800a202:	bf00      	nop
 800a204:	20000580 	.word	0x20000580

0800a208 <MRT_Iridium_sendMessage>:

bool MRT_Iridium_sendMessage(char* msg){
 800a208:	b580      	push	{r7, lr}
 800a20a:	b082      	sub	sp, #8
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
	return E_T->MRT_Iridium_sendMessage(msg);
 800a210:	4b07      	ldr	r3, [pc, #28]	; (800a230 <MRT_Iridium_sendMessage+0x28>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	6879      	ldr	r1, [r7, #4]
 800a216:	4618      	mov	r0, r3
 800a218:	f7ff fe58 	bl	8009ecc <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc>
 800a21c:	4603      	mov	r3, r0
 800a21e:	2b00      	cmp	r3, #0
 800a220:	bf14      	ite	ne
 800a222:	2301      	movne	r3, #1
 800a224:	2300      	moveq	r3, #0
 800a226:	b2db      	uxtb	r3, r3
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3708      	adds	r7, #8
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}
 800a230:	20000580 	.word	0x20000580

0800a234 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 800a234:	b590      	push	{r4, r7, lr}
 800a236:	b083      	sub	sp, #12
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
 800a23c:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d101      	bne.n	800a248 <_ZN5Print5writeEPKc+0x14>
 800a244:	2300      	movs	r3, #0
 800a246:	e00d      	b.n	800a264 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	3304      	adds	r3, #4
 800a24e:	681c      	ldr	r4, [r3, #0]
 800a250:	6838      	ldr	r0, [r7, #0]
 800a252:	f7f5 ffd7 	bl	8000204 <strlen>
 800a256:	4603      	mov	r3, r0
 800a258:	461a      	mov	r2, r3
 800a25a:	6839      	ldr	r1, [r7, #0]
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	47a0      	blx	r4
 800a260:	4603      	mov	r3, r0
 800a262:	bf00      	nop
    }
 800a264:	4618      	mov	r0, r3
 800a266:	370c      	adds	r7, #12
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd90      	pop	{r4, r7, pc}

0800a26c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b086      	sub	sp, #24
 800a270:	af00      	add	r7, sp, #0
 800a272:	60f8      	str	r0, [r7, #12]
 800a274:	60b9      	str	r1, [r7, #8]
 800a276:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 800a278:	2300      	movs	r3, #0
 800a27a:	617b      	str	r3, [r7, #20]
  while (size--) {
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	1e5a      	subs	r2, r3, #1
 800a280:	607a      	str	r2, [r7, #4]
 800a282:	2b00      	cmp	r3, #0
 800a284:	bf14      	ite	ne
 800a286:	2301      	movne	r3, #1
 800a288:	2300      	moveq	r3, #0
 800a28a:	b2db      	uxtb	r3, r3
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d00e      	beq.n	800a2ae <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	681a      	ldr	r2, [r3, #0]
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	1c59      	adds	r1, r3, #1
 800a29a:	60b9      	str	r1, [r7, #8]
 800a29c:	781b      	ldrb	r3, [r3, #0]
 800a29e:	4619      	mov	r1, r3
 800a2a0:	68f8      	ldr	r0, [r7, #12]
 800a2a2:	4790      	blx	r2
 800a2a4:	4602      	mov	r2, r0
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	4413      	add	r3, r2
 800a2aa:	617b      	str	r3, [r7, #20]
  while (size--) {
 800a2ac:	e7e6      	b.n	800a27c <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 800a2ae:	697b      	ldr	r3, [r7, #20]
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3718      	adds	r7, #24
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}

0800a2b8 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b082      	sub	sp, #8
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
 800a2c2:	6839      	ldr	r1, [r7, #0]
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f000 f805 	bl	800a2d4 <_ZN5Print5printEPKc>
 800a2ca:	4603      	mov	r3, r0
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3708      	adds	r7, #8
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}

0800a2d4 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b082      	sub	sp, #8
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	6039      	str	r1, [r7, #0]
  return write(str);
 800a2de:	6839      	ldr	r1, [r7, #0]
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f7ff ffa7 	bl	800a234 <_ZN5Print5writeEPKc>
 800a2e6:	4603      	mov	r3, r0
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3708      	adds	r7, #8
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}

0800a2f0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b082      	sub	sp, #8
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	460b      	mov	r3, r1
 800a2fa:	70fb      	strb	r3, [r7, #3]
  return write(c);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	78fa      	ldrb	r2, [r7, #3]
 800a304:	4611      	mov	r1, r2
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	4798      	blx	r3
 800a30a:	4603      	mov	r3, r0
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3708      	adds	r7, #8
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}

0800a314 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b084      	sub	sp, #16
 800a318:	af00      	add	r7, sp, #0
 800a31a:	60f8      	str	r0, [r7, #12]
 800a31c:	60b9      	str	r1, [r7, #8]
 800a31e:	607a      	str	r2, [r7, #4]
  return print((long) n, base);
 800a320:	687a      	ldr	r2, [r7, #4]
 800a322:	68b9      	ldr	r1, [r7, #8]
 800a324:	68f8      	ldr	r0, [r7, #12]
 800a326:	f000 f805 	bl	800a334 <_ZN5Print5printEli>
 800a32a:	4603      	mov	r3, r0
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3710      	adds	r7, #16
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}

0800a334 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b086      	sub	sp, #24
 800a338:	af00      	add	r7, sp, #0
 800a33a:	60f8      	str	r0, [r7, #12]
 800a33c:	60b9      	str	r1, [r7, #8]
 800a33e:	607a      	str	r2, [r7, #4]
  if (base == 0) {
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d109      	bne.n	800a35a <_ZN5Print5printEli+0x26>
    return write(n);
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	68ba      	ldr	r2, [r7, #8]
 800a34e:	b2d2      	uxtb	r2, r2
 800a350:	4611      	mov	r1, r2
 800a352:	68f8      	ldr	r0, [r7, #12]
 800a354:	4798      	blx	r3
 800a356:	4603      	mov	r3, r0
 800a358:	e029      	b.n	800a3ae <_ZN5Print5printEli+0x7a>
  } else if (base == 10) {
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2b0a      	cmp	r3, #10
 800a35e:	d11d      	bne.n	800a39c <_ZN5Print5printEli+0x68>
    if (n < 0) {
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	2b00      	cmp	r3, #0
 800a364:	da12      	bge.n	800a38c <_ZN5Print5printEli+0x58>
      int t = print('-');
 800a366:	212d      	movs	r1, #45	; 0x2d
 800a368:	68f8      	ldr	r0, [r7, #12]
 800a36a:	f7ff ffc1 	bl	800a2f0 <_ZN5Print5printEc>
 800a36e:	4603      	mov	r3, r0
 800a370:	617b      	str	r3, [r7, #20]
      n = -n;
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	425b      	negs	r3, r3
 800a376:	60bb      	str	r3, [r7, #8]
      return printNumber(n, 10) + t;
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	220a      	movs	r2, #10
 800a37c:	4619      	mov	r1, r3
 800a37e:	68f8      	ldr	r0, [r7, #12]
 800a380:	f000 f819 	bl	800a3b6 <_ZN5Print11printNumberEmh>
 800a384:	4602      	mov	r2, r0
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	4413      	add	r3, r2
 800a38a:	e010      	b.n	800a3ae <_ZN5Print5printEli+0x7a>
    }
    return printNumber(n, 10);
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	220a      	movs	r2, #10
 800a390:	4619      	mov	r1, r3
 800a392:	68f8      	ldr	r0, [r7, #12]
 800a394:	f000 f80f 	bl	800a3b6 <_ZN5Print11printNumberEmh>
 800a398:	4603      	mov	r3, r0
 800a39a:	e008      	b.n	800a3ae <_ZN5Print5printEli+0x7a>
  } else {
    return printNumber(n, base);
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	687a      	ldr	r2, [r7, #4]
 800a3a0:	b2d2      	uxtb	r2, r2
 800a3a2:	4619      	mov	r1, r3
 800a3a4:	68f8      	ldr	r0, [r7, #12]
 800a3a6:	f000 f806 	bl	800a3b6 <_ZN5Print11printNumberEmh>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	bf00      	nop
  }
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3718      	adds	r7, #24
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}

0800a3b6 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 800a3b6:	b580      	push	{r7, lr}
 800a3b8:	b090      	sub	sp, #64	; 0x40
 800a3ba:	af00      	add	r7, sp, #0
 800a3bc:	60f8      	str	r0, [r7, #12]
 800a3be:	60b9      	str	r1, [r7, #8]
 800a3c0:	4613      	mov	r3, r2
 800a3c2:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
 800a3c4:	f107 0314 	add.w	r3, r7, #20
 800a3c8:	3320      	adds	r3, #32
 800a3ca:	63fb      	str	r3, [r7, #60]	; 0x3c

  *str = '\0';
 800a3cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 800a3d2:	79fb      	ldrb	r3, [r7, #7]
 800a3d4:	2b01      	cmp	r3, #1
 800a3d6:	d801      	bhi.n	800a3dc <_ZN5Print11printNumberEmh+0x26>
 800a3d8:	230a      	movs	r3, #10
 800a3da:	71fb      	strb	r3, [r7, #7]

  do {
    unsigned long m = n;
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	63bb      	str	r3, [r7, #56]	; 0x38
    n /= base;
 800a3e0:	79fb      	ldrb	r3, [r7, #7]
 800a3e2:	68ba      	ldr	r2, [r7, #8]
 800a3e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3e8:	60bb      	str	r3, [r7, #8]
    char c = m - base * n;
 800a3ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ec:	b2da      	uxtb	r2, r3
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	b2db      	uxtb	r3, r3
 800a3f2:	79f9      	ldrb	r1, [r7, #7]
 800a3f4:	fb11 f303 	smulbb	r3, r1, r3
 800a3f8:	b2db      	uxtb	r3, r3
 800a3fa:	1ad3      	subs	r3, r2, r3
 800a3fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 800a400:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a404:	2b09      	cmp	r3, #9
 800a406:	d804      	bhi.n	800a412 <_ZN5Print11printNumberEmh+0x5c>
 800a408:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a40c:	3330      	adds	r3, #48	; 0x30
 800a40e:	b2db      	uxtb	r3, r3
 800a410:	e003      	b.n	800a41a <_ZN5Print11printNumberEmh+0x64>
 800a412:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a416:	3337      	adds	r3, #55	; 0x37
 800a418:	b2db      	uxtb	r3, r3
 800a41a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a41c:	3a01      	subs	r2, #1
 800a41e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a420:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a422:	7013      	strb	r3, [r2, #0]
  } while(n);
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d000      	beq.n	800a42c <_ZN5Print11printNumberEmh+0x76>
  do {
 800a42a:	e7d7      	b.n	800a3dc <_ZN5Print11printNumberEmh+0x26>

  return write(str);
 800a42c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a42e:	68f8      	ldr	r0, [r7, #12]
 800a430:	f7ff ff00 	bl	800a234 <_ZN5Print5writeEPKc>
 800a434:	4603      	mov	r3, r0
}
 800a436:	4618      	mov	r0, r3
 800a438:	3740      	adds	r7, #64	; 0x40
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}
	...

0800a440 <_ZN5PrintC1Ev>:
    Print() : write_error(0) {}
 800a440:	b480      	push	{r7}
 800a442:	b083      	sub	sp, #12
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
 800a448:	4a06      	ldr	r2, [pc, #24]	; (800a464 <_ZN5PrintC1Ev+0x24>)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	601a      	str	r2, [r3, #0]
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2200      	movs	r2, #0
 800a452:	605a      	str	r2, [r3, #4]
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	4618      	mov	r0, r3
 800a458:	370c      	adds	r7, #12
 800a45a:	46bd      	mov	sp, r7
 800a45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a460:	4770      	bx	lr
 800a462:	bf00      	nop
 800a464:	08022a2c 	.word	0x08022a2c

0800a468 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 800a468:	b580      	push	{r7, lr}
 800a46a:	b082      	sub	sp, #8
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	4618      	mov	r0, r3
 800a474:	f7ff ffe4 	bl	800a440 <_ZN5PrintC1Ev>
 800a478:	4a05      	ldr	r2, [pc, #20]	; (800a490 <_ZN6StreamC1Ev+0x28>)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	601a      	str	r2, [r3, #0]
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a484:	609a      	str	r2, [r3, #8]
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	4618      	mov	r0, r3
 800a48a:	3708      	adds	r7, #8
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}
 800a490:	08022a5c 	.word	0x08022a5c

0800a494 <_ZN7TwoWireC1EP11I2C_TypeDef>:

#define FLAG_TIMEOUT ((int)0x1000)
#define LONG_TIMEOUT ((int)0x8000)

// Constructors ////////////////////////////////////////////////////////////////
TwoWire::TwoWire(I2C_TypeDef *twi)
 800a494:	b580      	push	{r7, lr}
 800a496:	b082      	sub	sp, #8
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
 800a49c:	6039      	str	r1, [r7, #0]
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f7ff ffe1 	bl	800a468 <_ZN6StreamC1Ev>
 800a4a6:	4a16      	ldr	r2, [pc, #88]	; (800a500 <_ZN7TwoWireC1EP11I2C_TypeDef+0x6c>)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	601a      	str	r2, [r3, #0]
{
  I2cHandle.Instance = twi;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	683a      	ldr	r2, [r7, #0]
 800a4b0:	63da      	str	r2, [r3, #60]	; 0x3c
  memset(rxBuffer, 0, BUFFER_LENGTH);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	3390      	adds	r3, #144	; 0x90
 800a4b6:	2220      	movs	r2, #32
 800a4b8:	2100      	movs	r1, #0
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f010 fadc 	bl	801aa78 <memset>
  rxBufferIndex = 0;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = 0;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  txAddress = 0;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	741a      	strb	r2, [r3, #16]
  txBufferIndex = 0;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  transmitting = 0;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  defaultAddress = 0x00;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3708      	adds	r7, #8
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}
 800a500:	08022a3c 	.word	0x08022a3c

0800a504 <_ZN7TwoWire11requestFromEhhh>:
  I2cHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
  HAL_I2C_Init(&I2cHandle);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b086      	sub	sp, #24
 800a508:	af02      	add	r7, sp, #8
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	4608      	mov	r0, r1
 800a50e:	4611      	mov	r1, r2
 800a510:	461a      	mov	r2, r3
 800a512:	4603      	mov	r3, r0
 800a514:	70fb      	strb	r3, [r7, #3]
 800a516:	460b      	mov	r3, r1
 800a518:	70bb      	strb	r3, [r7, #2]
 800a51a:	4613      	mov	r3, r2
 800a51c:	707b      	strb	r3, [r7, #1]
  uint8_t ret_val;

  disableInterrupt();
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	f000 fc24 	bl	800ad6c <_ZN7TwoWire16disableInterruptEv>

  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
 800a524:	78bb      	ldrb	r3, [r7, #2]
 800a526:	2b20      	cmp	r3, #32
 800a528:	d901      	bls.n	800a52e <_ZN7TwoWire11requestFromEhhh+0x2a>
    quantity = BUFFER_LENGTH;
 800a52a:	2320      	movs	r3, #32
 800a52c:	70bb      	strb	r3, [r7, #2]
  }
  // perform blocking read into buffer
  int read = i2c_master_read((address << 1), (char *)rxBuffer, quantity, sendStop);
 800a52e:	78fb      	ldrb	r3, [r7, #3]
 800a530:	005b      	lsls	r3, r3, #1
 800a532:	b2d9      	uxtb	r1, r3
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f103 0290 	add.w	r2, r3, #144	; 0x90
 800a53a:	78b8      	ldrb	r0, [r7, #2]
 800a53c:	787b      	ldrb	r3, [r7, #1]
 800a53e:	9300      	str	r3, [sp, #0]
 800a540:	4603      	mov	r3, r0
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f000 f9cf 	bl	800a8e6 <_ZN7TwoWire15i2c_master_readEhPchh>
 800a548:	60b8      	str	r0, [r7, #8]

  if(read < 0)
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	da02      	bge.n	800a556 <_ZN7TwoWire11requestFromEhhh+0x52>
  {
    ret_val = 0;
 800a550:	2300      	movs	r3, #0
 800a552:	73fb      	strb	r3, [r7, #15]
 800a554:	e001      	b.n	800a55a <_ZN7TwoWire11requestFromEhhh+0x56>
  }else
  {
    ret_val = read;
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	73fb      	strb	r3, [r7, #15]
  }

  // set rx buffer iterator vars
  rxBufferIndex = 0;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2200      	movs	r2, #0
 800a55e:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = ret_val;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	7bfa      	ldrb	r2, [r7, #15]
 800a566:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

  enableInterrupt();
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f000 fbcc 	bl	800ad08 <_ZN7TwoWire15enableInterruptEv>

  return ret_val;
 800a570:	7bfb      	ldrb	r3, [r7, #15]
}
 800a572:	4618      	mov	r0, r3
 800a574:	3710      	adds	r7, #16
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}

0800a57a <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
 800a57a:	b580      	push	{r7, lr}
 800a57c:	b082      	sub	sp, #8
 800a57e:	af00      	add	r7, sp, #0
 800a580:	6078      	str	r0, [r7, #4]
 800a582:	460b      	mov	r3, r1
 800a584:	70fb      	strb	r3, [r7, #3]
 800a586:	4613      	mov	r3, r2
 800a588:	70bb      	strb	r3, [r7, #2]
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 800a58a:	78ba      	ldrb	r2, [r7, #2]
 800a58c:	78f9      	ldrb	r1, [r7, #3]
 800a58e:	2301      	movs	r3, #1
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f7ff ffb7 	bl	800a504 <_ZN7TwoWire11requestFromEhhh>
 800a596:	4603      	mov	r3, r0
}
 800a598:	4618      	mov	r0, r3
 800a59a:	3708      	adds	r7, #8
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}

0800a5a0 <_ZN7TwoWire17beginTransmissionEh>:
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b083      	sub	sp, #12
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
 800a5a8:	460b      	mov	r3, r1
 800a5aa:	70fb      	strb	r3, [r7, #3]
  // indicate that we are transmitting
  transmitting = 1;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  // set address of targeted slave
  txAddress = address;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	78fa      	ldrb	r2, [r7, #3]
 800a5b8:	741a      	strb	r2, [r3, #16]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 800a5ca:	bf00      	nop
 800a5cc:	370c      	adds	r7, #12
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d4:	4770      	bx	lr

0800a5d6 <_ZN7TwoWire15endTransmissionEh>:
//  is very possible to leave the bus in a hung state if
//  no call to endTransmission(true) is made. Some I2C
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
 800a5d6:	b580      	push	{r7, lr}
 800a5d8:	b086      	sub	sp, #24
 800a5da:	af02      	add	r7, sp, #8
 800a5dc:	6078      	str	r0, [r7, #4]
 800a5de:	460b      	mov	r3, r1
 800a5e0:	70fb      	strb	r3, [r7, #3]
  // transmit buffer (blocking)
  disableInterrupt();
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f000 fbc2 	bl	800ad6c <_ZN7TwoWire16disableInterruptEv>

  int8_t ret = i2c_master_write((txAddress << 1), (const char *)txBuffer, txBufferLength, sendStop);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	7c1b      	ldrb	r3, [r3, #16]
 800a5ec:	0059      	lsls	r1, r3, #1
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f103 0211 	add.w	r2, r3, #17
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	78fb      	ldrb	r3, [r7, #3]
 800a5fe:	9300      	str	r3, [sp, #0]
 800a600:	4603      	mov	r3, r0
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f000 fa00 	bl	800aa08 <_ZN7TwoWire16i2c_master_writeEiPKcii>
 800a608:	4603      	mov	r3, r0
 800a60a:	73fb      	strb	r3, [r7, #15]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2200      	movs	r2, #0
 800a610:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2200      	movs	r2, #0
 800a618:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  // indicate that we are done transmitting
  transmitting = 0;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2200      	movs	r2, #0
 800a620:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  enableInterrupt();
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f000 fb6f 	bl	800ad08 <_ZN7TwoWire15enableInterruptEv>

  return ret;
 800a62a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3710      	adds	r7, #16
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <_ZN7TwoWire15endTransmissionEv>:

//  This provides backwards compatibility with the original
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b082      	sub	sp, #8
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
  return endTransmission(true);
 800a63c:	2101      	movs	r1, #1
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f7ff ffc9 	bl	800a5d6 <_ZN7TwoWire15endTransmissionEh>
 800a644:	4603      	mov	r3, r0
}
 800a646:	4618      	mov	r0, r3
 800a648:	3708      	adds	r7, #8
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}

0800a64e <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
 800a64e:	b580      	push	{r7, lr}
 800a650:	b082      	sub	sp, #8
 800a652:	af00      	add	r7, sp, #0
 800a654:	6078      	str	r0, [r7, #4]
 800a656:	460b      	mov	r3, r1
 800a658:	70fb      	strb	r3, [r7, #3]
  if(transmitting){
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800a660:	2b00      	cmp	r3, #0
 800a662:	d01d      	beq.n	800a6a0 <_ZN7TwoWire5writeEh+0x52>
    // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a66a:	2b1f      	cmp	r3, #31
 800a66c:	d901      	bls.n	800a672 <_ZN7TwoWire5writeEh+0x24>
      return 0;
 800a66e:	2300      	movs	r3, #0
 800a670:	e028      	b.n	800a6c4 <_ZN7TwoWire5writeEh+0x76>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a678:	4619      	mov	r1, r3
 800a67a:	78fa      	ldrb	r2, [r7, #3]
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	440b      	add	r3, r1
 800a680:	745a      	strb	r2, [r3, #17]
    ++txBufferIndex;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a688:	3301      	adds	r3, #1
 800a68a:	b2da      	uxtb	r2, r3
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    // update amount in buffer
    txBufferLength = txBufferIndex;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800a69e:	e010      	b.n	800a6c2 <_ZN7TwoWire5writeEh+0x74>
  }else{
    // in slave send mode
  // transmit buffer (blocking)
    disableInterrupt();
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f000 fb63 	bl	800ad6c <_ZN7TwoWire16disableInterruptEv>

    // reply to master
  i2c_slave_write((const char *)&data, 1);
 800a6a6:	1cfb      	adds	r3, r7, #3
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	4619      	mov	r1, r3
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f000 fa95 	bl	800abdc <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f000 fb28 	bl	800ad08 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	333c      	adds	r3, #60	; 0x3c
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f003 fac5 	bl	800dc4c <HAL_I2C_EnableListen_IT>
  }
  return 1;
 800a6c2:	2301      	movs	r3, #1
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3708      	adds	r7, #8
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}

0800a6cc <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b086      	sub	sp, #24
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	60f8      	str	r0, [r7, #12]
 800a6d4:	60b9      	str	r1, [r7, #8]
 800a6d6:	607a      	str	r2, [r7, #4]
  if(transmitting){
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d013      	beq.n	800a70a <_ZN7TwoWire5writeEPKhj+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	617b      	str	r3, [r7, #20]
 800a6e6:	697a      	ldr	r2, [r7, #20]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	429a      	cmp	r2, r3
 800a6ec:	d21e      	bcs.n	800a72c <_ZN7TwoWire5writeEPKhj+0x60>
      write(data[i]);
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	68b9      	ldr	r1, [r7, #8]
 800a6f6:	697a      	ldr	r2, [r7, #20]
 800a6f8:	440a      	add	r2, r1
 800a6fa:	7812      	ldrb	r2, [r2, #0]
 800a6fc:	4611      	mov	r1, r2
 800a6fe:	68f8      	ldr	r0, [r7, #12]
 800a700:	4798      	blx	r3
    for(size_t i = 0; i < quantity; ++i){
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	3301      	adds	r3, #1
 800a706:	617b      	str	r3, [r7, #20]
 800a708:	e7ed      	b.n	800a6e6 <_ZN7TwoWire5writeEPKhj+0x1a>
    }
  }else{
    // in slave send mode
    // reply to master
  disableInterrupt();
 800a70a:	68f8      	ldr	r0, [r7, #12]
 800a70c:	f000 fb2e 	bl	800ad6c <_ZN7TwoWire16disableInterruptEv>

  i2c_slave_write((const char *)data, quantity);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	461a      	mov	r2, r3
 800a714:	68b9      	ldr	r1, [r7, #8]
 800a716:	68f8      	ldr	r0, [r7, #12]
 800a718:	f000 fa60 	bl	800abdc <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 800a71c:	68f8      	ldr	r0, [r7, #12]
 800a71e:	f000 faf3 	bl	800ad08 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	333c      	adds	r3, #60	; 0x3c
 800a726:	4618      	mov	r0, r3
 800a728:	f003 fa90 	bl	800dc4c <HAL_I2C_EnableListen_IT>
  }
  return quantity;
 800a72c:	687b      	ldr	r3, [r7, #4]
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3718      	adds	r7, #24
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}

0800a736 <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
 800a736:	b480      	push	{r7}
 800a738:	b083      	sub	sp, #12
 800a73a:	af00      	add	r7, sp, #0
 800a73c:	6078      	str	r0, [r7, #4]
  return rxBufferLength - rxBufferIndex;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a744:	b2db      	uxtb	r3, r3
 800a746:	461a      	mov	r2, r3
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800a74e:	b2db      	uxtb	r3, r3
 800a750:	1ad3      	subs	r3, r2, r3
}
 800a752:	4618      	mov	r0, r3
 800a754:	370c      	adds	r7, #12
 800a756:	46bd      	mov	sp, r7
 800a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75c:	4770      	bx	lr

0800a75e <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
 800a75e:	b480      	push	{r7}
 800a760:	b085      	sub	sp, #20
 800a762:	af00      	add	r7, sp, #0
 800a764:	6078      	str	r0, [r7, #4]
  int value = -1;
 800a766:	f04f 33ff 	mov.w	r3, #4294967295
 800a76a:	60fb      	str	r3, [r7, #12]

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800a772:	b2da      	uxtb	r2, r3
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a77a:	b2db      	uxtb	r3, r3
 800a77c:	429a      	cmp	r2, r3
 800a77e:	bf34      	ite	cc
 800a780:	2301      	movcc	r3, #1
 800a782:	2300      	movcs	r3, #0
 800a784:	b2db      	uxtb	r3, r3
 800a786:	2b00      	cmp	r3, #0
 800a788:	d012      	beq.n	800a7b0 <_ZN7TwoWire4readEv+0x52>
    value = rxBuffer[rxBufferIndex];
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800a790:	b2db      	uxtb	r3, r3
 800a792:	461a      	mov	r2, r3
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	4413      	add	r3, r2
 800a798:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800a79c:	60fb      	str	r3, [r7, #12]
    ++rxBufferIndex;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800a7a4:	b2db      	uxtb	r3, r3
 800a7a6:	3301      	adds	r3, #1
 800a7a8:	b2da      	uxtb	r2, r3
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  }

  return value;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3714      	adds	r7, #20
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7bc:	4770      	bx	lr

0800a7be <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
 800a7be:	b480      	push	{r7}
 800a7c0:	b085      	sub	sp, #20
 800a7c2:	af00      	add	r7, sp, #0
 800a7c4:	6078      	str	r0, [r7, #4]
  int value = -1;
 800a7c6:	f04f 33ff 	mov.w	r3, #4294967295
 800a7ca:	60fb      	str	r3, [r7, #12]

  if(rxBufferIndex < rxBufferLength){
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800a7d2:	b2da      	uxtb	r2, r3
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a7da:	b2db      	uxtb	r3, r3
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	bf34      	ite	cc
 800a7e0:	2301      	movcc	r3, #1
 800a7e2:	2300      	movcs	r3, #0
 800a7e4:	b2db      	uxtb	r3, r3
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d009      	beq.n	800a7fe <_ZN7TwoWire4peekEv+0x40>
    value = rxBuffer[rxBufferIndex];
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800a7f0:	b2db      	uxtb	r3, r3
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	4413      	add	r3, r2
 800a7f8:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800a7fc:	60fb      	str	r3, [r7, #12]
  }

  return value;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
}
 800a800:	4618      	mov	r0, r3
 800a802:	3714      	adds	r7, #20
 800a804:	46bd      	mov	sp, r7
 800a806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80a:	4770      	bx	lr

0800a80c <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b083      	sub	sp, #12
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
  // XXX: to be implemented.
}
 800a814:	bf00      	nop
 800a816:	370c      	adds	r7, #12
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr

0800a820 <_ZN7TwoWire16i2c_master_startEv>:
{
  user_onRequest = function;
}

int TwoWire::i2c_master_start()
{
 800a820:	b480      	push	{r7}
 800a822:	b085      	sub	sp, #20
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a82c:	60bb      	str	r3, [r7, #8]

    int timeout;

    // Clear Acknowledge failure flag
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a832:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a836:	615a      	str	r2, [r3, #20]

    // Wait the STOP condition has been previously correctly sent
  // This timeout can be avoid in some specific cases by simply clearing the STOP bit
    timeout = FLAG_TIMEOUT;
 800a838:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a83c:	60fb      	str	r3, [r7, #12]
    while ((i2c->CR1 & I2C_CR1_STOP) == I2C_CR1_STOP) {
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a846:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a84a:	bf0c      	ite	eq
 800a84c:	2301      	moveq	r3, #1
 800a84e:	2300      	movne	r3, #0
 800a850:	b2db      	uxtb	r3, r3
 800a852:	2b00      	cmp	r3, #0
 800a854:	d00b      	beq.n	800a86e <_ZN7TwoWire16i2c_master_startEv+0x4e>
        if ((timeout--) == 0) {
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	1e5a      	subs	r2, r3, #1
 800a85a:	60fa      	str	r2, [r7, #12]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	bf0c      	ite	eq
 800a860:	2301      	moveq	r3, #1
 800a862:	2300      	movne	r3, #0
 800a864:	b2db      	uxtb	r3, r3
 800a866:	2b00      	cmp	r3, #0
 800a868:	d0e9      	beq.n	800a83e <_ZN7TwoWire16i2c_master_startEv+0x1e>
            return 1;
 800a86a:	2301      	movs	r3, #1
 800a86c:	e021      	b.n	800a8b2 <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    // Generate the START condition
    i2c->CR1 |= I2C_CR1_START;
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	601a      	str	r2, [r3, #0]

    // Wait the START condition has been correctly sent
    timeout = FLAG_TIMEOUT;
 800a87a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a87e:	60fb      	str	r3, [r7, #12]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a884:	695b      	ldr	r3, [r3, #20]
 800a886:	f003 0301 	and.w	r3, r3, #1
 800a88a:	2b01      	cmp	r3, #1
 800a88c:	bf14      	ite	ne
 800a88e:	2301      	movne	r3, #1
 800a890:	2300      	moveq	r3, #0
 800a892:	b2db      	uxtb	r3, r3
 800a894:	2b00      	cmp	r3, #0
 800a896:	d00b      	beq.n	800a8b0 <_ZN7TwoWire16i2c_master_startEv+0x90>
        if ((timeout--) == 0) {
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	1e5a      	subs	r2, r3, #1
 800a89c:	60fa      	str	r2, [r7, #12]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	bf0c      	ite	eq
 800a8a2:	2301      	moveq	r3, #1
 800a8a4:	2300      	movne	r3, #0
 800a8a6:	b2db      	uxtb	r3, r3
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d0e9      	beq.n	800a880 <_ZN7TwoWire16i2c_master_startEv+0x60>
            return 1;
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	e000      	b.n	800a8b2 <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    return 0;
 800a8b0:	2300      	movs	r3, #0
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3714      	adds	r7, #20
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8bc:	4770      	bx	lr

0800a8be <_ZN7TwoWire15i2c_master_stopEv>:

int TwoWire::i2c_master_stop()
{
 800a8be:	b480      	push	{r7}
 800a8c0:	b085      	sub	sp, #20
 800a8c2:	af00      	add	r7, sp, #0
 800a8c4:	6078      	str	r0, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8ca:	60fb      	str	r3, [r7, #12]

    // Generate the STOP condition
    i2c->CR1 |= I2C_CR1_STOP;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	601a      	str	r2, [r3, #0]

    return 0;
 800a8d8:	2300      	movs	r3, #0
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3714      	adds	r7, #20
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e4:	4770      	bx	lr

0800a8e6 <_ZN7TwoWire15i2c_master_readEhPchh>:

int TwoWire::i2c_master_read(uint8_t address, char *data, uint8_t length, uint8_t stop)
{
 800a8e6:	b580      	push	{r7, lr}
 800a8e8:	b08a      	sub	sp, #40	; 0x28
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	60f8      	str	r0, [r7, #12]
 800a8ee:	607a      	str	r2, [r7, #4]
 800a8f0:	461a      	mov	r2, r3
 800a8f2:	460b      	mov	r3, r1
 800a8f4:	72fb      	strb	r3, [r7, #11]
 800a8f6:	4613      	mov	r3, r2
 800a8f8:	72bb      	strb	r3, [r7, #10]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8fe:	61fb      	str	r3, [r7, #28]
    int timeout;
    int count;
    int value;
    int ret;

    i2c_master_start();
 800a900:	68f8      	ldr	r0, [r7, #12]
 800a902:	f7ff ff8d 	bl	800a820 <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 800a906:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a90a:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a910:	695b      	ldr	r3, [r3, #20]
 800a912:	f003 0301 	and.w	r3, r3, #1
 800a916:	2b01      	cmp	r3, #1
 800a918:	bf14      	ite	ne
 800a91a:	2301      	movne	r3, #1
 800a91c:	2300      	moveq	r3, #0
 800a91e:	b2db      	uxtb	r3, r3
 800a920:	2b00      	cmp	r3, #0
 800a922:	d008      	beq.n	800a936 <_ZN7TwoWire15i2c_master_readEhPchh+0x50>
        timeout--;
 800a924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a926:	3b01      	subs	r3, #1
 800a928:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 800a92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d1ed      	bne.n	800a90c <_ZN7TwoWire15i2c_master_readEhPchh+0x26>
            return -1;
 800a930:	f04f 33ff 	mov.w	r3, #4294967295
 800a934:	e064      	b.n	800aa00 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_READ(address);
 800a936:	7afb      	ldrb	r3, [r7, #11]
 800a938:	f043 0301 	orr.w	r3, r3, #1
 800a93c:	b2db      	uxtb	r3, r3
 800a93e:	461a      	mov	r2, r3
 800a940:	69fb      	ldr	r3, [r7, #28]
 800a942:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 800a944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a948:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a94e:	695b      	ldr	r3, [r3, #20]
 800a950:	f003 0302 	and.w	r3, r3, #2
 800a954:	2b02      	cmp	r3, #2
 800a956:	bf14      	ite	ne
 800a958:	2301      	movne	r3, #1
 800a95a:	2300      	moveq	r3, #0
 800a95c:	b2db      	uxtb	r3, r3
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d008      	beq.n	800a974 <_ZN7TwoWire15i2c_master_readEhPchh+0x8e>
        timeout--;
 800a962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a964:	3b01      	subs	r3, #1
 800a966:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 800a968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d1ed      	bne.n	800a94a <_ZN7TwoWire15i2c_master_readEhPchh+0x64>
            return -1;
 800a96e:	f04f 33ff 	mov.w	r3, #4294967295
 800a972:	e045      	b.n	800aa00 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 800a974:	2300      	movs	r3, #0
 800a976:	613b      	str	r3, [r7, #16]
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a97c:	695b      	ldr	r3, [r3, #20]
 800a97e:	613b      	str	r3, [r7, #16]
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a984:	699b      	ldr	r3, [r3, #24]
 800a986:	613b      	str	r3, [r7, #16]
 800a988:	693b      	ldr	r3, [r7, #16]

    // Read all bytes except last one
    for (count = 0; count < (length - 1); count++) {
 800a98a:	2300      	movs	r3, #0
 800a98c:	623b      	str	r3, [r7, #32]
 800a98e:	7abb      	ldrb	r3, [r7, #10]
 800a990:	3b01      	subs	r3, #1
 800a992:	6a3a      	ldr	r2, [r7, #32]
 800a994:	429a      	cmp	r2, r3
 800a996:	da17      	bge.n	800a9c8 <_ZN7TwoWire15i2c_master_readEhPchh+0xe2>
        ret = i2c_master_byte_read(&value, 0);
 800a998:	f107 0314 	add.w	r3, r7, #20
 800a99c:	2200      	movs	r2, #0
 800a99e:	4619      	mov	r1, r3
 800a9a0:	68f8      	ldr	r0, [r7, #12]
 800a9a2:	f000 f8a4 	bl	800aaee <_ZN7TwoWire20i2c_master_byte_readEPii>
 800a9a6:	61b8      	str	r0, [r7, #24]
        if(ret)
 800a9a8:	69bb      	ldr	r3, [r7, #24]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d002      	beq.n	800a9b4 <_ZN7TwoWire15i2c_master_readEhPchh+0xce>
        {
          return -1;
 800a9ae:	f04f 33ff 	mov.w	r3, #4294967295
 800a9b2:	e025      	b.n	800aa00 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
        data[count] = (char)value;
 800a9b4:	6979      	ldr	r1, [r7, #20]
 800a9b6:	6a3b      	ldr	r3, [r7, #32]
 800a9b8:	687a      	ldr	r2, [r7, #4]
 800a9ba:	4413      	add	r3, r2
 800a9bc:	b2ca      	uxtb	r2, r1
 800a9be:	701a      	strb	r2, [r3, #0]
    for (count = 0; count < (length - 1); count++) {
 800a9c0:	6a3b      	ldr	r3, [r7, #32]
 800a9c2:	3301      	adds	r3, #1
 800a9c4:	623b      	str	r3, [r7, #32]
 800a9c6:	e7e2      	b.n	800a98e <_ZN7TwoWire15i2c_master_readEhPchh+0xa8>
    }

    // If not repeated start, send stop.
    // Warning: must be done BEFORE the data is read.
    if (stop) {
 800a9c8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d002      	beq.n	800a9d6 <_ZN7TwoWire15i2c_master_readEhPchh+0xf0>
        i2c_master_stop();
 800a9d0:	68f8      	ldr	r0, [r7, #12]
 800a9d2:	f7ff ff74 	bl	800a8be <_ZN7TwoWire15i2c_master_stopEv>
    }

    // Read the last byte
    ret = i2c_master_byte_read(&value, 1);
 800a9d6:	f107 0314 	add.w	r3, r7, #20
 800a9da:	2201      	movs	r2, #1
 800a9dc:	4619      	mov	r1, r3
 800a9de:	68f8      	ldr	r0, [r7, #12]
 800a9e0:	f000 f885 	bl	800aaee <_ZN7TwoWire20i2c_master_byte_readEPii>
 800a9e4:	61b8      	str	r0, [r7, #24]
    if(ret)
 800a9e6:	69bb      	ldr	r3, [r7, #24]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d002      	beq.n	800a9f2 <_ZN7TwoWire15i2c_master_readEhPchh+0x10c>
    {
      return -1;
 800a9ec:	f04f 33ff 	mov.w	r3, #4294967295
 800a9f0:	e006      	b.n	800aa00 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
    }
    data[count] = (char)value;
 800a9f2:	6979      	ldr	r1, [r7, #20]
 800a9f4:	6a3b      	ldr	r3, [r7, #32]
 800a9f6:	687a      	ldr	r2, [r7, #4]
 800a9f8:	4413      	add	r3, r2
 800a9fa:	b2ca      	uxtb	r2, r1
 800a9fc:	701a      	strb	r2, [r3, #0]

    return length;
 800a9fe:	7abb      	ldrb	r3, [r7, #10]
}
 800aa00:	4618      	mov	r0, r3
 800aa02:	3728      	adds	r7, #40	; 0x28
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}

0800aa08 <_ZN7TwoWire16i2c_master_writeEiPKcii>:

int TwoWire::i2c_master_write(int address, const char *data, int length, int stop)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b088      	sub	sp, #32
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	60f8      	str	r0, [r7, #12]
 800aa10:	60b9      	str	r1, [r7, #8]
 800aa12:	607a      	str	r2, [r7, #4]
 800aa14:	603b      	str	r3, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa1a:	617b      	str	r3, [r7, #20]
    int timeout;
    int count;

    i2c_master_start();
 800aa1c:	68f8      	ldr	r0, [r7, #12]
 800aa1e:	f7ff feff 	bl	800a820 <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 800aa22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa26:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa2c:	695b      	ldr	r3, [r3, #20]
 800aa2e:	f003 0301 	and.w	r3, r3, #1
 800aa32:	2b01      	cmp	r3, #1
 800aa34:	bf14      	ite	ne
 800aa36:	2301      	movne	r3, #1
 800aa38:	2300      	moveq	r3, #0
 800aa3a:	b2db      	uxtb	r3, r3
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d007      	beq.n	800aa50 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x48>
        timeout--;
 800aa40:	69fb      	ldr	r3, [r7, #28]
 800aa42:	3b01      	subs	r3, #1
 800aa44:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 800aa46:	69fb      	ldr	r3, [r7, #28]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d1ed      	bne.n	800aa28 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x20>
            return 4;
 800aa4c:	2304      	movs	r3, #4
 800aa4e:	e04a      	b.n	800aae6 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_WRITE(address);
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	b2db      	uxtb	r3, r3
 800aa54:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 800aa5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa60:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa66:	695b      	ldr	r3, [r3, #20]
 800aa68:	f003 0302 	and.w	r3, r3, #2
 800aa6c:	2b02      	cmp	r3, #2
 800aa6e:	bf14      	ite	ne
 800aa70:	2301      	movne	r3, #1
 800aa72:	2300      	moveq	r3, #0
 800aa74:	b2db      	uxtb	r3, r3
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d007      	beq.n	800aa8a <_ZN7TwoWire16i2c_master_writeEiPKcii+0x82>
        timeout--;
 800aa7a:	69fb      	ldr	r3, [r7, #28]
 800aa7c:	3b01      	subs	r3, #1
 800aa7e:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 800aa80:	69fb      	ldr	r3, [r7, #28]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d1ed      	bne.n	800aa62 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x5a>
            return 2;
 800aa86:	2302      	movs	r3, #2
 800aa88:	e02d      	b.n	800aae6 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	613b      	str	r3, [r7, #16]
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa92:	695b      	ldr	r3, [r3, #20]
 800aa94:	613b      	str	r3, [r7, #16]
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa9a:	699b      	ldr	r3, [r3, #24]
 800aa9c:	613b      	str	r3, [r7, #16]
 800aa9e:	693b      	ldr	r3, [r7, #16]

    for (count = 0; count < length; count++) {
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	61bb      	str	r3, [r7, #24]
 800aaa4:	69ba      	ldr	r2, [r7, #24]
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	429a      	cmp	r2, r3
 800aaaa:	da15      	bge.n	800aad8 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xd0>
        if (i2c_master_byte_write(data[count]) != 1) {
 800aaac:	69bb      	ldr	r3, [r7, #24]
 800aaae:	687a      	ldr	r2, [r7, #4]
 800aab0:	4413      	add	r3, r2
 800aab2:	781b      	ldrb	r3, [r3, #0]
 800aab4:	4619      	mov	r1, r3
 800aab6:	68f8      	ldr	r0, [r7, #12]
 800aab8:	f000 f85a 	bl	800ab70 <_ZN7TwoWire21i2c_master_byte_writeEi>
 800aabc:	4603      	mov	r3, r0
 800aabe:	2b01      	cmp	r3, #1
 800aac0:	bf14      	ite	ne
 800aac2:	2301      	movne	r3, #1
 800aac4:	2300      	moveq	r3, #0
 800aac6:	b2db      	uxtb	r3, r3
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d001      	beq.n	800aad0 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xc8>
            return 3;
 800aacc:	2303      	movs	r3, #3
 800aace:	e00a      	b.n	800aae6 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
    for (count = 0; count < length; count++) {
 800aad0:	69bb      	ldr	r3, [r7, #24]
 800aad2:	3301      	adds	r3, #1
 800aad4:	61bb      	str	r3, [r7, #24]
 800aad6:	e7e5      	b.n	800aaa4 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x9c>
        }
    }

    // If not repeated start, send stop.
    if (stop) {
 800aad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d002      	beq.n	800aae4 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xdc>
        i2c_master_stop();
 800aade:	68f8      	ldr	r0, [r7, #12]
 800aae0:	f7ff feed 	bl	800a8be <_ZN7TwoWire15i2c_master_stopEv>
    }

    return 0;
 800aae4:	2300      	movs	r3, #0
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3720      	adds	r7, #32
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}

0800aaee <_ZN7TwoWire20i2c_master_byte_readEPii>:

int TwoWire::i2c_master_byte_read(int *value, int last)
{
 800aaee:	b480      	push	{r7}
 800aaf0:	b087      	sub	sp, #28
 800aaf2:	af00      	add	r7, sp, #0
 800aaf4:	60f8      	str	r0, [r7, #12]
 800aaf6:	60b9      	str	r1, [r7, #8]
 800aaf8:	607a      	str	r2, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aafe:	613b      	str	r3, [r7, #16]
    int timeout;

    if (last) {
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d006      	beq.n	800ab14 <_ZN7TwoWire20i2c_master_byte_readEPii+0x26>
        // Don't acknowledge the last byte
        i2c->CR1 &= ~I2C_CR1_ACK;
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	601a      	str	r2, [r3, #0]
 800ab12:	e005      	b.n	800ab20 <_ZN7TwoWire20i2c_master_byte_readEPii+0x32>
    } else {
        // Acknowledge the byte
        i2c->CR1 |= I2C_CR1_ACK;
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	601a      	str	r2, [r3, #0]
    }

    // Wait until the byte is received
    timeout = FLAG_TIMEOUT;
 800ab20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab24:	617b      	str	r3, [r7, #20]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_RXNE) == RESET) {
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab2a:	695b      	ldr	r3, [r3, #20]
 800ab2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab30:	2b40      	cmp	r3, #64	; 0x40
 800ab32:	bf14      	ite	ne
 800ab34:	2301      	movne	r3, #1
 800ab36:	2300      	moveq	r3, #0
 800ab38:	b2db      	uxtb	r3, r3
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d00c      	beq.n	800ab58 <_ZN7TwoWire20i2c_master_byte_readEPii+0x6a>
        if ((timeout--) == 0) {
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	1e5a      	subs	r2, r3, #1
 800ab42:	617a      	str	r2, [r7, #20]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	bf0c      	ite	eq
 800ab48:	2301      	moveq	r3, #1
 800ab4a:	2300      	movne	r3, #0
 800ab4c:	b2db      	uxtb	r3, r3
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d0e9      	beq.n	800ab26 <_ZN7TwoWire20i2c_master_byte_readEPii+0x38>
            return -1;
 800ab52:	f04f 33ff 	mov.w	r3, #4294967295
 800ab56:	e005      	b.n	800ab64 <_ZN7TwoWire20i2c_master_byte_readEPii+0x76>
        }
    }

    *value = (int)i2c->DR;
 800ab58:	693b      	ldr	r3, [r7, #16]
 800ab5a:	691b      	ldr	r3, [r3, #16]
 800ab5c:	461a      	mov	r2, r3
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	601a      	str	r2, [r3, #0]

    return 0;
 800ab62:	2300      	movs	r3, #0
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	371c      	adds	r7, #28
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6e:	4770      	bx	lr

0800ab70 <_ZN7TwoWire21i2c_master_byte_writeEi>:

int TwoWire::i2c_master_byte_write(int data)
{
 800ab70:	b480      	push	{r7}
 800ab72:	b085      	sub	sp, #20
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
 800ab78:	6039      	str	r1, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab7e:	60bb      	str	r3, [r7, #8]
    int timeout;

    i2c->DR = (uint8_t)data;
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	b2db      	uxtb	r3, r3
 800ab84:	461a      	mov	r2, r3
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	611a      	str	r2, [r3, #16]

    // Wait until the byte is transmitted
    timeout = FLAG_TIMEOUT;
 800ab8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab8e:	60fb      	str	r3, [r7, #12]
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab94:	695b      	ldr	r3, [r3, #20]
 800ab96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab9a:	2b80      	cmp	r3, #128	; 0x80
 800ab9c:	d008      	beq.n	800abb0 <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
            (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == RESET)) {
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aba2:	695b      	ldr	r3, [r3, #20]
 800aba4:	f003 0304 	and.w	r3, r3, #4
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 800aba8:	2b04      	cmp	r3, #4
 800abaa:	d001      	beq.n	800abb0 <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
 800abac:	2301      	movs	r3, #1
 800abae:	e000      	b.n	800abb2 <_ZN7TwoWire21i2c_master_byte_writeEi+0x42>
 800abb0:	2300      	movs	r3, #0
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d00b      	beq.n	800abce <_ZN7TwoWire21i2c_master_byte_writeEi+0x5e>
        if ((timeout--) == 0) {
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	1e5a      	subs	r2, r3, #1
 800abba:	60fa      	str	r2, [r7, #12]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	bf0c      	ite	eq
 800abc0:	2301      	moveq	r3, #1
 800abc2:	2300      	movne	r3, #0
 800abc4:	b2db      	uxtb	r3, r3
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d0e2      	beq.n	800ab90 <_ZN7TwoWire21i2c_master_byte_writeEi+0x20>
            return 0;
 800abca:	2300      	movs	r3, #0
 800abcc:	e000      	b.n	800abd0 <_ZN7TwoWire21i2c_master_byte_writeEi+0x60>
        }
    }

    return 1;
 800abce:	2301      	movs	r3, #1
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	3714      	adds	r7, #20
 800abd4:	46bd      	mov	sp, r7
 800abd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abda:	4770      	bx	lr

0800abdc <_ZN7TwoWire15i2c_slave_writeEPKci>:

int TwoWire::i2c_slave_write(const char *data, int length)
{
 800abdc:	b480      	push	{r7}
 800abde:	b089      	sub	sp, #36	; 0x24
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	60f8      	str	r0, [r7, #12]
 800abe4:	60b9      	str	r1, [r7, #8]
 800abe6:	607a      	str	r2, [r7, #4]
    uint32_t Timeout;
    int size = 0;
 800abe8:	2300      	movs	r3, #0
 800abea:	61bb      	str	r3, [r7, #24]

    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abf0:	617b      	str	r3, [r7, #20]

    while (length > 0) {
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	dd41      	ble.n	800ac7c <_ZN7TwoWire15i2c_slave_writeEPKci+0xa0>
        /* Wait until TXE flag is set */
        Timeout = FLAG_TIMEOUT;
 800abf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800abfc:	61fb      	str	r3, [r7, #28]
        while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) {
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac02:	695b      	ldr	r3, [r3, #20]
 800ac04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac08:	2b80      	cmp	r3, #128	; 0x80
 800ac0a:	bf14      	ite	ne
 800ac0c:	2301      	movne	r3, #1
 800ac0e:	2300      	moveq	r3, #0
 800ac10:	b2db      	uxtb	r3, r3
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d008      	beq.n	800ac28 <_ZN7TwoWire15i2c_slave_writeEPKci+0x4c>
            Timeout--;
 800ac16:	69fb      	ldr	r3, [r7, #28]
 800ac18:	3b01      	subs	r3, #1
 800ac1a:	61fb      	str	r3, [r7, #28]
            if (Timeout == 0) {
 800ac1c:	69fb      	ldr	r3, [r7, #28]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d1ed      	bne.n	800abfe <_ZN7TwoWire15i2c_slave_writeEPKci+0x22>
                return -1;
 800ac22:	f04f 33ff 	mov.w	r3, #4294967295
 800ac26:	e068      	b.n	800acfa <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
            }
        }

        /* Write data to DR */
        i2c->DR = (*data++);
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	1c5a      	adds	r2, r3, #1
 800ac2c:	60ba      	str	r2, [r7, #8]
 800ac2e:	781b      	ldrb	r3, [r3, #0]
 800ac30:	461a      	mov	r2, r3
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	611a      	str	r2, [r3, #16]
        length--;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	3b01      	subs	r3, #1
 800ac3a:	607b      	str	r3, [r7, #4]
        size++;
 800ac3c:	69bb      	ldr	r3, [r7, #24]
 800ac3e:	3301      	adds	r3, #1
 800ac40:	61bb      	str	r3, [r7, #24]

        if ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == SET) && (length != 0)) {
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac46:	695b      	ldr	r3, [r3, #20]
 800ac48:	f003 0304 	and.w	r3, r3, #4
 800ac4c:	2b04      	cmp	r3, #4
 800ac4e:	d104      	bne.n	800ac5a <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d001      	beq.n	800ac5a <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 800ac56:	2301      	movs	r3, #1
 800ac58:	e000      	b.n	800ac5c <_ZN7TwoWire15i2c_slave_writeEPKci+0x80>
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d0c8      	beq.n	800abf2 <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
            /* Write data to DR */
            i2c->DR = (*data++);
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	1c5a      	adds	r2, r3, #1
 800ac64:	60ba      	str	r2, [r7, #8]
 800ac66:	781b      	ldrb	r3, [r3, #0]
 800ac68:	461a      	mov	r2, r3
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	611a      	str	r2, [r3, #16]
            length--;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	3b01      	subs	r3, #1
 800ac72:	607b      	str	r3, [r7, #4]
            size++;
 800ac74:	69bb      	ldr	r3, [r7, #24]
 800ac76:	3301      	adds	r3, #1
 800ac78:	61bb      	str	r3, [r7, #24]
    while (length > 0) {
 800ac7a:	e7ba      	b.n	800abf2 <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
        }
    }

    /* Wait until AF flag is set */
    Timeout = FLAG_TIMEOUT;
 800ac7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac80:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_AF) == RESET) {
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac86:	695b      	ldr	r3, [r3, #20]
 800ac88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ac8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac90:	bf14      	ite	ne
 800ac92:	2301      	movne	r3, #1
 800ac94:	2300      	moveq	r3, #0
 800ac96:	b2db      	uxtb	r3, r3
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d008      	beq.n	800acae <_ZN7TwoWire15i2c_slave_writeEPKci+0xd2>
        Timeout--;
 800ac9c:	69fb      	ldr	r3, [r7, #28]
 800ac9e:	3b01      	subs	r3, #1
 800aca0:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 800aca2:	69fb      	ldr	r3, [r7, #28]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d1ec      	bne.n	800ac82 <_ZN7TwoWire15i2c_slave_writeEPKci+0xa6>
            return -1;
 800aca8:	f04f 33ff 	mov.w	r3, #4294967295
 800acac:	e025      	b.n	800acfa <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acb2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800acb6:	615a      	str	r2, [r3, #20]

    /* Wait until BUSY flag is reset */
    Timeout = FLAG_TIMEOUT;
 800acb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800acbc:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BUSY) == SET) {
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acc2:	699b      	ldr	r3, [r3, #24]
 800acc4:	f003 0302 	and.w	r3, r3, #2
 800acc8:	2b02      	cmp	r3, #2
 800acca:	bf0c      	ite	eq
 800accc:	2301      	moveq	r3, #1
 800acce:	2300      	movne	r3, #0
 800acd0:	b2db      	uxtb	r3, r3
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d008      	beq.n	800ace8 <_ZN7TwoWire15i2c_slave_writeEPKci+0x10c>
        Timeout--;
 800acd6:	69fb      	ldr	r3, [r7, #28]
 800acd8:	3b01      	subs	r3, #1
 800acda:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 800acdc:	69fb      	ldr	r3, [r7, #28]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d1ed      	bne.n	800acbe <_ZN7TwoWire15i2c_slave_writeEPKci+0xe2>
            return -1;
 800ace2:	f04f 33ff 	mov.w	r3, #4294967295
 800ace6:	e008      	b.n	800acfa <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    I2cHandle.State = HAL_I2C_STATE_READY;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	2220      	movs	r2, #32
 800acec:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

    /* Process Unlocked */
    __HAL_UNLOCK(&I2cHandle);
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	2200      	movs	r2, #0
 800acf4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return size;
 800acf8:	69bb      	ldr	r3, [r7, #24]
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	3724      	adds	r7, #36	; 0x24
 800acfe:	46bd      	mov	sp, r7
 800ad00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad04:	4770      	bx	lr
	...

0800ad08 <_ZN7TwoWire15enableInterruptEv>:
      }
    }
}

void TwoWire::enableInterrupt(void)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b082      	sub	sp, #8
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad14:	4a12      	ldr	r2, [pc, #72]	; (800ad60 <_ZN7TwoWire15enableInterruptEv+0x58>)
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d106      	bne.n	800ad28 <_ZN7TwoWire15enableInterruptEv+0x20>
    {
      HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 800ad1a:	2049      	movs	r0, #73	; 0x49
 800ad1c:	f002 f920 	bl	800cf60 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 800ad20:	2048      	movs	r0, #72	; 0x48
 800ad22:	f002 f91d 	bl	800cf60 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 800ad26:	e016      	b.n	800ad56 <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad2c:	4a0d      	ldr	r2, [pc, #52]	; (800ad64 <_ZN7TwoWire15enableInterruptEv+0x5c>)
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d106      	bne.n	800ad40 <_ZN7TwoWire15enableInterruptEv+0x38>
      HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800ad32:	2022      	movs	r0, #34	; 0x22
 800ad34:	f002 f914 	bl	800cf60 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800ad38:	2021      	movs	r0, #33	; 0x21
 800ad3a:	f002 f911 	bl	800cf60 <HAL_NVIC_EnableIRQ>
}
 800ad3e:	e00a      	b.n	800ad56 <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad44:	4a08      	ldr	r2, [pc, #32]	; (800ad68 <_ZN7TwoWire15enableInterruptEv+0x60>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d105      	bne.n	800ad56 <_ZN7TwoWire15enableInterruptEv+0x4e>
      HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800ad4a:	2020      	movs	r0, #32
 800ad4c:	f002 f908 	bl	800cf60 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800ad50:	201f      	movs	r0, #31
 800ad52:	f002 f905 	bl	800cf60 <HAL_NVIC_EnableIRQ>
}
 800ad56:	bf00      	nop
 800ad58:	3708      	adds	r7, #8
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}
 800ad5e:	bf00      	nop
 800ad60:	40005c00 	.word	0x40005c00
 800ad64:	40005800 	.word	0x40005800
 800ad68:	40005400 	.word	0x40005400

0800ad6c <_ZN7TwoWire16disableInterruptEv>:

void TwoWire::disableInterrupt(void)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b082      	sub	sp, #8
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad78:	4a12      	ldr	r2, [pc, #72]	; (800adc4 <_ZN7TwoWire16disableInterruptEv+0x58>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d106      	bne.n	800ad8c <_ZN7TwoWire16disableInterruptEv+0x20>
    {
      HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 800ad7e:	2049      	movs	r0, #73	; 0x49
 800ad80:	f002 f8fc 	bl	800cf7c <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 800ad84:	2048      	movs	r0, #72	; 0x48
 800ad86:	f002 f8f9 	bl	800cf7c <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 800ad8a:	e016      	b.n	800adba <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad90:	4a0d      	ldr	r2, [pc, #52]	; (800adc8 <_ZN7TwoWire16disableInterruptEv+0x5c>)
 800ad92:	4293      	cmp	r3, r2
 800ad94:	d106      	bne.n	800ada4 <_ZN7TwoWire16disableInterruptEv+0x38>
      HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 800ad96:	2022      	movs	r0, #34	; 0x22
 800ad98:	f002 f8f0 	bl	800cf7c <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 800ad9c:	2021      	movs	r0, #33	; 0x21
 800ad9e:	f002 f8ed 	bl	800cf7c <HAL_NVIC_DisableIRQ>
}
 800ada2:	e00a      	b.n	800adba <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ada8:	4a08      	ldr	r2, [pc, #32]	; (800adcc <_ZN7TwoWire16disableInterruptEv+0x60>)
 800adaa:	4293      	cmp	r3, r2
 800adac:	d105      	bne.n	800adba <_ZN7TwoWire16disableInterruptEv+0x4e>
      HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 800adae:	2020      	movs	r0, #32
 800adb0:	f002 f8e4 	bl	800cf7c <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 800adb4:	201f      	movs	r0, #31
 800adb6:	f002 f8e1 	bl	800cf7c <HAL_NVIC_DisableIRQ>
}
 800adba:	bf00      	nop
 800adbc:	3708      	adds	r7, #8
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}
 800adc2:	bf00      	nop
 800adc4:	40005c00 	.word	0x40005c00
 800adc8:	40005800 	.word	0x40005800
 800adcc:	40005400 	.word	0x40005400

0800add0 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire  = TwoWire(I2C1);
TwoWire Wire1 = TwoWire(I2C2);
TwoWire Wire2 = TwoWire(I2C3);
 800add0:	b580      	push	{r7, lr}
 800add2:	b082      	sub	sp, #8
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	6039      	str	r1, [r7, #0]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2b01      	cmp	r3, #1
 800adde:	d110      	bne.n	800ae02 <_Z41__static_initialization_and_destruction_0ii+0x32>
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d10b      	bne.n	800ae02 <_Z41__static_initialization_and_destruction_0ii+0x32>
TwoWire Wire  = TwoWire(I2C1);
 800adea:	4908      	ldr	r1, [pc, #32]	; (800ae0c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 800adec:	4808      	ldr	r0, [pc, #32]	; (800ae10 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800adee:	f7ff fb51 	bl	800a494 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire1 = TwoWire(I2C2);
 800adf2:	4908      	ldr	r1, [pc, #32]	; (800ae14 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800adf4:	4808      	ldr	r0, [pc, #32]	; (800ae18 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800adf6:	f7ff fb4d 	bl	800a494 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire2 = TwoWire(I2C3);
 800adfa:	4908      	ldr	r1, [pc, #32]	; (800ae1c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800adfc:	4808      	ldr	r0, [pc, #32]	; (800ae20 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800adfe:	f7ff fb49 	bl	800a494 <_ZN7TwoWireC1EP11I2C_TypeDef>
 800ae02:	bf00      	nop
 800ae04:	3708      	adds	r7, #8
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}
 800ae0a:	bf00      	nop
 800ae0c:	40005400 	.word	0x40005400
 800ae10:	20000598 	.word	0x20000598
 800ae14:	40005800 	.word	0x40005800
 800ae18:	20000650 	.word	0x20000650
 800ae1c:	40005c00 	.word	0x40005c00
 800ae20:	20000708 	.word	0x20000708

0800ae24 <_GLOBAL__sub_I__ZN7TwoWireC2EP11I2C_TypeDef>:
 800ae24:	b580      	push	{r7, lr}
 800ae26:	af00      	add	r7, sp, #0
 800ae28:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ae2c:	2001      	movs	r0, #1
 800ae2e:	f7ff ffcf 	bl	800add0 <_Z41__static_initialization_and_destruction_0ii>
 800ae32:	bd80      	pop	{r7, pc}

0800ae34 <MRT_radio_tx>:
#include <iwdg.h>
#include <string.h>
#include <sx126x.h>


void MRT_radio_tx(char* buffer){
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b082      	sub	sp, #8
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
	#if XTEND_ //Xtend send
		if (strlen(buffer) < XTEND_BUFFER_SIZE)	HAL_UART_Transmit(&XTEND_UART,(uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
	#elif SRADIO_ //SRadio send TODO
		if (strlen(buffer) < SRADIO_BUFFER_SIZE){
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f7f5 f9e1 	bl	8000204 <strlen>
 800ae42:	4603      	mov	r3, r0
 800ae44:	2bff      	cmp	r3, #255	; 0xff
 800ae46:	d80a      	bhi.n	800ae5e <MRT_radio_tx+0x2a>
			//sx126x_set_tx(&SRADIO_SPI, 1000, SRADIO_BUFFER_SIZE);
			Tx_setup();
 800ae48:	f000 fb1c 	bl	800b484 <Tx_setup>
			TxProtocol((uint8_t*) buffer, strlen(buffer));
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f7f5 f9d9 	bl	8000204 <strlen>
 800ae52:	4603      	mov	r3, r0
 800ae54:	b2db      	uxtb	r3, r3
 800ae56:	4619      	mov	r1, r3
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f000 fc27 	bl	800b6ac <TxProtocol>
		}
	#endif

	print((char*) "Radio sending:\t");
 800ae5e:	4805      	ldr	r0, [pc, #20]	; (800ae74 <MRT_radio_tx+0x40>)
 800ae60:	f7f6 f952 	bl	8001108 <print>
	println(buffer);
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f7f6 f931 	bl	80010cc <println>
}
 800ae6a:	bf00      	nop
 800ae6c:	3708      	adds	r7, #8
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}
 800ae72:	bf00      	nop
 800ae74:	0802279c 	.word	0x0802279c

0800ae78 <MRT_radio_rx>:


void MRT_radio_rx(char* buffer, uint8_t size, uint16_t timeout){
 800ae78:	b5b0      	push	{r4, r5, r7, lr}
 800ae7a:	b084      	sub	sp, #16
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
 800ae80:	460b      	mov	r3, r1
 800ae82:	70fb      	strb	r3, [r7, #3]
 800ae84:	4613      	mov	r3, r2
 800ae86:	803b      	strh	r3, [r7, #0]
	#if XTEND_ //Xtend receive
		if (size < XTEND_BUFFER_SIZE){
			HAL_UART_Receive(&XTEND_UART,(uint8_t*) buffer, sizeof(char) * size, timeout);
		}
	#elif SRADIO_ //SRadio receive TODO
		if (size < SRADIO_BUFFER_SIZE){
 800ae88:	466b      	mov	r3, sp
 800ae8a:	461d      	mov	r5, r3
			//sx126x_set_rx(&SRADIO_SPI,5000);
			Rx_setup();
 800ae8c:	f000 fc4a 	bl	800b724 <Rx_setup>

			//Note: The last character is always random and needs to be removed
			char temp_buf[size];
 800ae90:	78fc      	ldrb	r4, [r7, #3]
 800ae92:	4623      	mov	r3, r4
 800ae94:	3b01      	subs	r3, #1
 800ae96:	60fb      	str	r3, [r7, #12]
 800ae98:	b2e0      	uxtb	r0, r4
 800ae9a:	f04f 0100 	mov.w	r1, #0
 800ae9e:	f04f 0200 	mov.w	r2, #0
 800aea2:	f04f 0300 	mov.w	r3, #0
 800aea6:	00cb      	lsls	r3, r1, #3
 800aea8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800aeac:	00c2      	lsls	r2, r0, #3
 800aeae:	b2e0      	uxtb	r0, r4
 800aeb0:	f04f 0100 	mov.w	r1, #0
 800aeb4:	f04f 0200 	mov.w	r2, #0
 800aeb8:	f04f 0300 	mov.w	r3, #0
 800aebc:	00cb      	lsls	r3, r1, #3
 800aebe:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800aec2:	00c2      	lsls	r2, r0, #3
 800aec4:	4623      	mov	r3, r4
 800aec6:	3307      	adds	r3, #7
 800aec8:	08db      	lsrs	r3, r3, #3
 800aeca:	00db      	lsls	r3, r3, #3
 800aecc:	ebad 0d03 	sub.w	sp, sp, r3
 800aed0:	466b      	mov	r3, sp
 800aed2:	3300      	adds	r3, #0
 800aed4:	60bb      	str	r3, [r7, #8]
			memset(temp_buf,0,size);
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	78fa      	ldrb	r2, [r7, #3]
 800aeda:	2100      	movs	r1, #0
 800aedc:	4618      	mov	r0, r3
 800aede:	f00f fdcb 	bl	801aa78 <memset>
			RxProtocol((uint8_t*) temp_buf);
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	4618      	mov	r0, r3
 800aee6:	f000 fd11 	bl	800b90c <RxProtocol>
			//memcpy(buffer,temp_buf,strlen(temp_buf)-1);
			memcpy(buffer,temp_buf,size);
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	78fa      	ldrb	r2, [r7, #3]
 800aeee:	4619      	mov	r1, r3
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f00f fd99 	bl	801aa28 <memcpy>
 800aef6:	46ad      	mov	sp, r5
		}
	#endif

	print((char*) "Radio receiving:\t");
 800aef8:	4804      	ldr	r0, [pc, #16]	; (800af0c <MRT_radio_rx+0x94>)
 800aefa:	f7f6 f905 	bl	8001108 <print>
	println(buffer);
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f7f6 f8e4 	bl	80010cc <println>
}
 800af04:	bf00      	nop
 800af06:	3710      	adds	r7, #16
 800af08:	46bd      	mov	sp, r7
 800af0a:	bdb0      	pop	{r4, r5, r7, pc}
 800af0c:	080227ac 	.word	0x080227ac

0800af10 <MRT_radio_Init>:



void MRT_radio_Init(void){
 800af10:	b590      	push	{r4, r7, lr}
 800af12:	b093      	sub	sp, #76	; 0x4c
 800af14:	af12      	add	r7, sp, #72	; 0x48
	println("\r\nRadio Init");
 800af16:	4816      	ldr	r0, [pc, #88]	; (800af70 <MRT_radio_Init+0x60>)
 800af18:	f7f6 f8d8 	bl	80010cc <println>
	#if XTEND_
	print("\tXTEND Init...");
	HAL_GPIO_WritePin(XTend_CTS_Pin, GPIO_PIN_10, GPIO_PIN_RESET);
	println("OK");
	#elif SRADIO_
	print("\tSRADIO Init...");
 800af1c:	4815      	ldr	r0, [pc, #84]	; (800af74 <MRT_radio_Init+0x64>)
 800af1e:	f7f6 f8f3 	bl	8001108 <print>
	set_hspi(SRADIO_SPI);
 800af22:	4c15      	ldr	r4, [pc, #84]	; (800af78 <MRT_radio_Init+0x68>)
 800af24:	4668      	mov	r0, sp
 800af26:	f104 0310 	add.w	r3, r4, #16
 800af2a:	2248      	movs	r2, #72	; 0x48
 800af2c:	4619      	mov	r1, r3
 800af2e:	f00f fd7b 	bl	801aa28 <memcpy>
 800af32:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800af36:	f000 fa8d 	bl	800b454 <set_hspi>
	set_NSS_pin(SPI2_SX_CS_GPIO_Port, SPI2_SX_CS_Pin);
 800af3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800af3e:	480f      	ldr	r0, [pc, #60]	; (800af7c <MRT_radio_Init+0x6c>)
 800af40:	f000 fa30 	bl	800b3a4 <set_NSS_pin>
	set_BUSY_pin(SX_BUSY_GPIO_Port, SX_BUSY_Pin);
 800af44:	2108      	movs	r1, #8
 800af46:	480e      	ldr	r0, [pc, #56]	; (800af80 <MRT_radio_Init+0x70>)
 800af48:	f000 fa42 	bl	800b3d0 <set_BUSY_pin>
	set_NRESET_pin(SX_RST_GPIO_Port, SX_RST_Pin);
 800af4c:	2104      	movs	r1, #4
 800af4e:	480c      	ldr	r0, [pc, #48]	; (800af80 <MRT_radio_Init+0x70>)
 800af50:	f000 fa54 	bl	800b3fc <set_NRESET_pin>
	set_DIO1_pin(SX_DIO_GPIO_Port, SX_DIO_Pin);
 800af54:	2110      	movs	r1, #16
 800af56:	480a      	ldr	r0, [pc, #40]	; (800af80 <MRT_radio_Init+0x70>)
 800af58:	f000 fa66 	bl	800b428 <set_DIO1_pin>
	//  set_DIO2_pin(DIO2_1_GPIO_Port, DIO2_1_Pin);
	//  set_DIO3_pin(DIO3_1_GPIO_Port, DIO3_1_Pin);
	Tx_setup();
 800af5c:	f000 fa92 	bl	800b484 <Tx_setup>
	//Rx_setup();
	println("OK");
 800af60:	4808      	ldr	r0, [pc, #32]	; (800af84 <MRT_radio_Init+0x74>)
 800af62:	f7f6 f8b3 	bl	80010cc <println>
	#else
	println("\tNo radio currently in use");
	#endif
}
 800af66:	bf00      	nop
 800af68:	3704      	adds	r7, #4
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd90      	pop	{r4, r7, pc}
 800af6e:	bf00      	nop
 800af70:	080227c0 	.word	0x080227c0
 800af74:	080227d0 	.word	0x080227d0
 800af78:	2000878c 	.word	0x2000878c
 800af7c:	40020400 	.word	0x40020400
 800af80:	40021800 	.word	0x40021800
 800af84:	080227e0 	.word	0x080227e0

0800af88 <MRT_TELEMETRY_Init>:


void MRT_TELEMETRY_Init(void){
 800af88:	b5b0      	push	{r4, r5, r7, lr}
 800af8a:	b086      	sub	sp, #24
 800af8c:	af00      	add	r7, sp, #0

	MRT_radio_Init();
 800af8e:	f7ff ffbf 	bl	800af10 <MRT_radio_Init>

	HAL_IWDG_Refresh(&hiwdg);
 800af92:	480d      	ldr	r0, [pc, #52]	; (800afc8 <MRT_TELEMETRY_Init+0x40>)
 800af94:	f003 faa8 	bl	800e4e8 <HAL_IWDG_Refresh>

	#if IRIDIUM_
		HAL_GPIO_WritePin(Iridium_RST_GPIO_Port, Iridium_RST_Pin, SET);
 800af98:	2201      	movs	r2, #1
 800af9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800af9e:	480b      	ldr	r0, [pc, #44]	; (800afcc <MRT_TELEMETRY_Init+0x44>)
 800afa0:	f002 f9be 	bl	800d320 <HAL_GPIO_WritePin>
		#if IRIDIUM_INTERNAL_PRINTtGA
		hiridium = MRT_Iridium_Init(IRIDIUM_TIMEOUT, IRIDIUM_I2C, print);
		#else
		hiridium = MRT_Iridium_Init(IRIDIUM_TIMEOUT, IRIDIUM_I2C, no_print); //Doesn't print the internal commands
 800afa4:	4c0a      	ldr	r4, [pc, #40]	; (800afd0 <MRT_TELEMETRY_Init+0x48>)
 800afa6:	4638      	mov	r0, r7
 800afa8:	4b0a      	ldr	r3, [pc, #40]	; (800afd4 <MRT_TELEMETRY_Init+0x4c>)
 800afaa:	2202      	movs	r2, #2
 800afac:	2101      	movs	r1, #1
 800afae:	f7ff f89f 	bl	800a0f0 <MRT_Iridium_Init>
 800afb2:	4625      	mov	r5, r4
 800afb4:	463c      	mov	r4, r7
 800afb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800afb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800afba:	6823      	ldr	r3, [r4, #0]
 800afbc:	602b      	str	r3, [r5, #0]
		#endif
	#endif
}
 800afbe:	bf00      	nop
 800afc0:	3718      	adds	r7, #24
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bdb0      	pop	{r4, r5, r7, pc}
 800afc6:	bf00      	nop
 800afc8:	20008760 	.word	0x20008760
 800afcc:	40021000 	.word	0x40021000
 800afd0:	20000584 	.word	0x20000584
 800afd4:	08001135 	.word	0x08001135

0800afd8 <MRT_radio_send_ack>:



void MRT_radio_send_ack(radio_command cmd){
 800afd8:	b580      	push	{r7, lr}
 800afda:	b088      	sub	sp, #32
 800afdc:	af00      	add	r7, sp, #0
 800afde:	4603      	mov	r3, r0
 800afe0:	71fb      	strb	r3, [r7, #7]
	if(cmd>=0 && cmd<=9){
 800afe2:	79fb      	ldrb	r3, [r7, #7]
 800afe4:	2b09      	cmp	r3, #9
 800afe6:	d80b      	bhi.n	800b000 <MRT_radio_send_ack+0x28>
		char buffer[20];
		sprintf(buffer, "radio_ack_%i\r\n",cmd);
 800afe8:	79fa      	ldrb	r2, [r7, #7]
 800afea:	f107 030c 	add.w	r3, r7, #12
 800afee:	4906      	ldr	r1, [pc, #24]	; (800b008 <MRT_radio_send_ack+0x30>)
 800aff0:	4618      	mov	r0, r3
 800aff2:	f011 f83d 	bl	801c070 <siprintf>
		MRT_radio_tx(buffer);
 800aff6:	f107 030c 	add.w	r3, r7, #12
 800affa:	4618      	mov	r0, r3
 800affc:	f7ff ff1a 	bl	800ae34 <MRT_radio_tx>
	}
}
 800b000:	bf00      	nop
 800b002:	3720      	adds	r7, #32
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}
 800b008:	080227e4 	.word	0x080227e4

0800b00c <radio_parse_command>:
//extern volatile uint8_t state_arm_rcov; TODO NOT USED YET
//extern volatile uint8_t state_arm_prop; TODO NOT USED YET

//extern volatile char rx_buf[10]; // dma buffer NOT IN USE YET

radio_command radio_parse_command(char* rx_buf) {
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b082      	sub	sp, #8
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
		sprintf(radio_buffer,"%i",rx_buf[i]);
		println(radio_buffer);
	}
	#endif

	if (strcmp(rx_buf, "lr") == 0) { // launch command
 800b014:	492a      	ldr	r1, [pc, #168]	; (800b0c0 <radio_parse_command+0xb4>)
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f7f5 f8ea 	bl	80001f0 <strcmp>
 800b01c:	4603      	mov	r3, r0
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d101      	bne.n	800b026 <radio_parse_command+0x1a>
		return LAUNCH;
 800b022:	2301      	movs	r3, #1
 800b024:	e048      	b.n	800b0b8 <radio_parse_command+0xac>
	}
	else if (strcmp(rx_buf, "ap") == 0) { // arm propulsion
 800b026:	4927      	ldr	r1, [pc, #156]	; (800b0c4 <radio_parse_command+0xb8>)
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f7f5 f8e1 	bl	80001f0 <strcmp>
 800b02e:	4603      	mov	r3, r0
 800b030:	2b00      	cmp	r3, #0
 800b032:	d101      	bne.n	800b038 <radio_parse_command+0x2c>
		return ARM_PROP;
 800b034:	2302      	movs	r3, #2
 800b036:	e03f      	b.n	800b0b8 <radio_parse_command+0xac>
	}
	else if (strcmp(rx_buf, "ar") == 0) { // arm recovery
 800b038:	4923      	ldr	r1, [pc, #140]	; (800b0c8 <radio_parse_command+0xbc>)
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f7f5 f8d8 	bl	80001f0 <strcmp>
 800b040:	4603      	mov	r3, r0
 800b042:	2b00      	cmp	r3, #0
 800b044:	d101      	bne.n	800b04a <radio_parse_command+0x3e>
		return ARM_RCOV;
 800b046:	2303      	movs	r3, #3
 800b048:	e036      	b.n	800b0b8 <radio_parse_command+0xac>
	}
	else if (strcmp(rx_buf, "dp") == 0) { // disarm propulsion
 800b04a:	4920      	ldr	r1, [pc, #128]	; (800b0cc <radio_parse_command+0xc0>)
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f7f5 f8cf 	bl	80001f0 <strcmp>
 800b052:	4603      	mov	r3, r0
 800b054:	2b00      	cmp	r3, #0
 800b056:	d101      	bne.n	800b05c <radio_parse_command+0x50>
		return DISARM_PROP;
 800b058:	2304      	movs	r3, #4
 800b05a:	e02d      	b.n	800b0b8 <radio_parse_command+0xac>
	}
	else if (strcmp(rx_buf, "dr") == 0) { // disarm recovery
 800b05c:	491c      	ldr	r1, [pc, #112]	; (800b0d0 <radio_parse_command+0xc4>)
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f7f5 f8c6 	bl	80001f0 <strcmp>
 800b064:	4603      	mov	r3, r0
 800b066:	2b00      	cmp	r3, #0
 800b068:	d101      	bne.n	800b06e <radio_parse_command+0x62>
		return DISARM_RCOV;
 800b06a:	2305      	movs	r3, #5
 800b06c:	e024      	b.n	800b0b8 <radio_parse_command+0xac>
	}
	else if (strcmp(rx_buf, "v1") == 0) { // vr power on
 800b06e:	4919      	ldr	r1, [pc, #100]	; (800b0d4 <radio_parse_command+0xc8>)
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f7f5 f8bd 	bl	80001f0 <strcmp>
 800b076:	4603      	mov	r3, r0
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d101      	bne.n	800b080 <radio_parse_command+0x74>
		return VR_POWER_ON;
 800b07c:	2306      	movs	r3, #6
 800b07e:	e01b      	b.n	800b0b8 <radio_parse_command+0xac>
	}
	else if (strcmp(rx_buf, "v2") == 0) { // vr start
 800b080:	4915      	ldr	r1, [pc, #84]	; (800b0d8 <radio_parse_command+0xcc>)
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f7f5 f8b4 	bl	80001f0 <strcmp>
 800b088:	4603      	mov	r3, r0
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d101      	bne.n	800b092 <radio_parse_command+0x86>
		return VR_REC_START;
 800b08e:	2307      	movs	r3, #7
 800b090:	e012      	b.n	800b0b8 <radio_parse_command+0xac>
	}
	else if (strcmp(rx_buf, "v3") == 0) { // vr stop
 800b092:	4912      	ldr	r1, [pc, #72]	; (800b0dc <radio_parse_command+0xd0>)
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	f7f5 f8ab 	bl	80001f0 <strcmp>
 800b09a:	4603      	mov	r3, r0
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d101      	bne.n	800b0a4 <radio_parse_command+0x98>
		return VR_REC_STOP;
 800b0a0:	2308      	movs	r3, #8
 800b0a2:	e009      	b.n	800b0b8 <radio_parse_command+0xac>
	}
	else if (strcmp(rx_buf, "v4") == 0) { // vr power off
 800b0a4:	490e      	ldr	r1, [pc, #56]	; (800b0e0 <radio_parse_command+0xd4>)
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f7f5 f8a2 	bl	80001f0 <strcmp>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d101      	bne.n	800b0b6 <radio_parse_command+0xaa>
		return VR_POWER_OFF;
 800b0b2:	2309      	movs	r3, #9
 800b0b4:	e000      	b.n	800b0b8 <radio_parse_command+0xac>
	}

	// all other commands are invalid, ignore.
	else{
		return -1;
 800b0b6:	23ff      	movs	r3, #255	; 0xff
	}
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	3708      	adds	r7, #8
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}
 800b0c0:	080227f4 	.word	0x080227f4
 800b0c4:	080227f8 	.word	0x080227f8
 800b0c8:	080227fc 	.word	0x080227fc
 800b0cc:	08022800 	.word	0x08022800
 800b0d0:	08022804 	.word	0x08022804
 800b0d4:	08022808 	.word	0x08022808
 800b0d8:	0802280c 	.word	0x0802280c
 800b0dc:	08022810 	.word	0x08022810
 800b0e0:	08022814 	.word	0x08022814

0800b0e4 <execute_parsed_command>:

void execute_parsed_command(radio_command cmd) {
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b082      	sub	sp, #8
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	71fb      	strb	r3, [r7, #7]
	// TODO: decide whether we want to send an ack back to ground station, maybe as special event message
	switch (cmd) {
 800b0ee:	79fb      	ldrb	r3, [r7, #7]
 800b0f0:	3b01      	subs	r3, #1
 800b0f2:	2b08      	cmp	r3, #8
 800b0f4:	d84a      	bhi.n	800b18c <execute_parsed_command+0xa8>
 800b0f6:	a201      	add	r2, pc, #4	; (adr r2, 800b0fc <execute_parsed_command+0x18>)
 800b0f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0fc:	0800b121 	.word	0x0800b121
 800b100:	0800b12d 	.word	0x0800b12d
 800b104:	0800b139 	.word	0x0800b139
 800b108:	0800b145 	.word	0x0800b145
 800b10c:	0800b151 	.word	0x0800b151
 800b110:	0800b15d 	.word	0x0800b15d
 800b114:	0800b169 	.word	0x0800b169
 800b118:	0800b175 	.word	0x0800b175
 800b11c:	0800b181 	.word	0x0800b181
	case LAUNCH:
		rocket_launch();
 800b120:	f000 f84c 	bl	800b1bc <rocket_launch>
		println((char*) "launch");
 800b124:	481c      	ldr	r0, [pc, #112]	; (800b198 <execute_parsed_command+0xb4>)
 800b126:	f7f5 ffd1 	bl	80010cc <println>
		break;
 800b12a:	e030      	b.n	800b18e <execute_parsed_command+0xaa>

	case ARM_PROP:
		arming_propulsion();
 800b12c:	f000 f860 	bl	800b1f0 <arming_propulsion>
		println((char*) "arm pr");
 800b130:	481a      	ldr	r0, [pc, #104]	; (800b19c <execute_parsed_command+0xb8>)
 800b132:	f7f5 ffcb 	bl	80010cc <println>
		break;
 800b136:	e02a      	b.n	800b18e <execute_parsed_command+0xaa>

	case ARM_RCOV:
		arming_recovery();
 800b138:	f000 f866 	bl	800b208 <arming_recovery>
		println((char*) "arm rc");
 800b13c:	4818      	ldr	r0, [pc, #96]	; (800b1a0 <execute_parsed_command+0xbc>)
 800b13e:	f7f5 ffc5 	bl	80010cc <println>
		break;
 800b142:	e024      	b.n	800b18e <execute_parsed_command+0xaa>

	case DISARM_PROP:
		disarm_propulsion();
 800b144:	f000 f86c 	bl	800b220 <disarm_propulsion>
		println((char*) "disarm pr");
 800b148:	4816      	ldr	r0, [pc, #88]	; (800b1a4 <execute_parsed_command+0xc0>)
 800b14a:	f7f5 ffbf 	bl	80010cc <println>
		break;
 800b14e:	e01e      	b.n	800b18e <execute_parsed_command+0xaa>

	case DISARM_RCOV:
		disarm_recovery();
 800b150:	f000 f880 	bl	800b254 <disarm_recovery>
		println((char*) "disarm rc");
 800b154:	4814      	ldr	r0, [pc, #80]	; (800b1a8 <execute_parsed_command+0xc4>)
 800b156:	f7f5 ffb9 	bl	80010cc <println>
		break;
 800b15a:	e018      	b.n	800b18e <execute_parsed_command+0xaa>

	case VR_POWER_ON:
		VR_Power_On();
 800b15c:	f7fa f9a0 	bl	80054a0 <VR_Power_On>
		println((char*) "vr on");
 800b160:	4812      	ldr	r0, [pc, #72]	; (800b1ac <execute_parsed_command+0xc8>)
 800b162:	f7f5 ffb3 	bl	80010cc <println>
		break;
 800b166:	e012      	b.n	800b18e <execute_parsed_command+0xaa>

	case VR_REC_START:
		VR_Start_Rec();
 800b168:	f7fa f9b6 	bl	80054d8 <VR_Start_Rec>
		println((char*) "vr start");
 800b16c:	4810      	ldr	r0, [pc, #64]	; (800b1b0 <execute_parsed_command+0xcc>)
 800b16e:	f7f5 ffad 	bl	80010cc <println>
		break;
 800b172:	e00c      	b.n	800b18e <execute_parsed_command+0xaa>

	case VR_REC_STOP:
		VR_Stop_Rec();
 800b174:	f7fa f9bc 	bl	80054f0 <VR_Stop_Rec>
		println((char*) "vr stop");
 800b178:	480e      	ldr	r0, [pc, #56]	; (800b1b4 <execute_parsed_command+0xd0>)
 800b17a:	f7f5 ffa7 	bl	80010cc <println>
		break;
 800b17e:	e006      	b.n	800b18e <execute_parsed_command+0xaa>

	case VR_POWER_OFF:
		VR_Power_Off();
 800b180:	f7fa f99e 	bl	80054c0 <VR_Power_Off>
		println((char*) "vr off");
 800b184:	480c      	ldr	r0, [pc, #48]	; (800b1b8 <execute_parsed_command+0xd4>)
 800b186:	f7f5 ffa1 	bl	80010cc <println>
		break;
 800b18a:	e000      	b.n	800b18e <execute_parsed_command+0xaa>

	default:
		break;
 800b18c:	bf00      	nop
	}
}
 800b18e:	bf00      	nop
 800b190:	3708      	adds	r7, #8
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}
 800b196:	bf00      	nop
 800b198:	08022818 	.word	0x08022818
 800b19c:	08022820 	.word	0x08022820
 800b1a0:	08022828 	.word	0x08022828
 800b1a4:	08022830 	.word	0x08022830
 800b1a8:	0802283c 	.word	0x0802283c
 800b1ac:	08022848 	.word	0x08022848
 800b1b0:	08022850 	.word	0x08022850
 800b1b4:	0802285c 	.word	0x0802285c
 800b1b8:	08022864 	.word	0x08022864

0800b1bc <rocket_launch>:

void rocket_launch(void) {
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	af00      	add	r7, sp, #0
	// just to be safe, set arming pin high to ensure pyro channels are armed
	HAL_GPIO_WritePin(OUT_PyroValve_Arming_GPIO_Port, OUT_PyroValve_Arming_Pin, SET);
 800b1c0:	2201      	movs	r2, #1
 800b1c2:	2102      	movs	r1, #2
 800b1c4:	4808      	ldr	r0, [pc, #32]	; (800b1e8 <rocket_launch+0x2c>)
 800b1c6:	f002 f8ab 	bl	800d320 <HAL_GPIO_WritePin>

	// open valve by firing the prop pyro ejection channels
	HAL_GPIO_WritePin(OUT_PyroValve_Gate_1_GPIO_Port, OUT_PyroValve_Gate_1_Pin, SET);
 800b1ca:	2201      	movs	r2, #1
 800b1cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b1d0:	4806      	ldr	r0, [pc, #24]	; (800b1ec <rocket_launch+0x30>)
 800b1d2:	f002 f8a5 	bl	800d320 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUT_PyroValve_Gate_2_GPIO_Port, OUT_PyroValve_Gate_2_Pin, SET);
 800b1d6:	2201      	movs	r2, #1
 800b1d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b1dc:	4803      	ldr	r0, [pc, #12]	; (800b1ec <rocket_launch+0x30>)
 800b1de:	f002 f89f 	bl	800d320 <HAL_GPIO_WritePin>
}
 800b1e2:	bf00      	nop
 800b1e4:	bd80      	pop	{r7, pc}
 800b1e6:	bf00      	nop
 800b1e8:	40021800 	.word	0x40021800
 800b1ec:	40021400 	.word	0x40021400

0800b1f0 <arming_propulsion>:

void arming_propulsion(void) {
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	af00      	add	r7, sp, #0
	// arm, TODO: decide whether to add feedback/check on arming status
	HAL_GPIO_WritePin(OUT_PyroValve_Arming_GPIO_Port, OUT_PyroValve_Arming_Pin, SET);
 800b1f4:	2201      	movs	r2, #1
 800b1f6:	2102      	movs	r1, #2
 800b1f8:	4802      	ldr	r0, [pc, #8]	; (800b204 <arming_propulsion+0x14>)
 800b1fa:	f002 f891 	bl	800d320 <HAL_GPIO_WritePin>
	//state_arm_prop = 1;
	//set_backup_state(FC_STATE_ARM_PROP, //state_arm_prop);
}
 800b1fe:	bf00      	nop
 800b200:	bd80      	pop	{r7, pc}
 800b202:	bf00      	nop
 800b204:	40021800 	.word	0x40021800

0800b208 <arming_recovery>:

void arming_recovery(void) {
 800b208:	b580      	push	{r7, lr}
 800b20a:	af00      	add	r7, sp, #0
	// arm, TODO: decide whether to add feedback/check on arming status
	HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET);
 800b20c:	2201      	movs	r2, #1
 800b20e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b212:	4802      	ldr	r0, [pc, #8]	; (800b21c <arming_recovery+0x14>)
 800b214:	f002 f884 	bl	800d320 <HAL_GPIO_WritePin>
	//state_arm_rcov = 1;
	//set_backup_state(FC_STATE_ARM_RCOV, //state_arm_rcov);
}
 800b218:	bf00      	nop
 800b21a:	bd80      	pop	{r7, pc}
 800b21c:	40021800 	.word	0x40021800

0800b220 <disarm_propulsion>:

void disarm_propulsion(void) {
 800b220:	b580      	push	{r7, lr}
 800b222:	af00      	add	r7, sp, #0
	// disarm, TODO: decide whether to add feedback/check on arming status
	HAL_GPIO_WritePin(OUT_PyroValve_Arming_GPIO_Port, OUT_PyroValve_Arming_Pin, RESET);
 800b224:	2200      	movs	r2, #0
 800b226:	2102      	movs	r1, #2
 800b228:	4808      	ldr	r0, [pc, #32]	; (800b24c <disarm_propulsion+0x2c>)
 800b22a:	f002 f879 	bl	800d320 <HAL_GPIO_WritePin>

	// also reset the gates in case they were high
	HAL_GPIO_WritePin(OUT_PyroValve_Gate_1_GPIO_Port, OUT_PyroValve_Gate_1_Pin, RESET);
 800b22e:	2200      	movs	r2, #0
 800b230:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b234:	4806      	ldr	r0, [pc, #24]	; (800b250 <disarm_propulsion+0x30>)
 800b236:	f002 f873 	bl	800d320 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUT_PyroValve_Gate_2_GPIO_Port, OUT_PyroValve_Gate_2_Pin, RESET);
 800b23a:	2200      	movs	r2, #0
 800b23c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b240:	4803      	ldr	r0, [pc, #12]	; (800b250 <disarm_propulsion+0x30>)
 800b242:	f002 f86d 	bl	800d320 <HAL_GPIO_WritePin>

	//state_arm_prop = 0;
	//set_backup_state(FC_STATE_ARM_PROP, //state_arm_prop);
}
 800b246:	bf00      	nop
 800b248:	bd80      	pop	{r7, pc}
 800b24a:	bf00      	nop
 800b24c:	40021800 	.word	0x40021800
 800b250:	40021400 	.word	0x40021400

0800b254 <disarm_recovery>:

void disarm_recovery(void) {
 800b254:	b580      	push	{r7, lr}
 800b256:	af00      	add	r7, sp, #0
	// disarm, TODO: decide whether to add feedback/check on arming status
	HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, RESET);
 800b258:	2200      	movs	r2, #0
 800b25a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b25e:	4808      	ldr	r0, [pc, #32]	; (800b280 <disarm_recovery+0x2c>)
 800b260:	f002 f85e 	bl	800d320 <HAL_GPIO_WritePin>

	// also reset the gates in case they were high
	HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, RESET);
 800b264:	2200      	movs	r2, #0
 800b266:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b26a:	4805      	ldr	r0, [pc, #20]	; (800b280 <disarm_recovery+0x2c>)
 800b26c:	f002 f858 	bl	800d320 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, RESET);
 800b270:	2200      	movs	r2, #0
 800b272:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b276:	4802      	ldr	r0, [pc, #8]	; (800b280 <disarm_recovery+0x2c>)
 800b278:	f002 f852 	bl	800d320 <HAL_GPIO_WritePin>

	//state_arm_rcov = 0;
	//set_backup_state(FC_STATE_ARM_RCOV, //state_arm_rcov);
}
 800b27c:	bf00      	nop
 800b27e:	bd80      	pop	{r7, pc}
 800b280:	40021800 	.word	0x40021800

0800b284 <sx126x_hal_write>:
 * @returns Operation status
 */


sx126x_hal_status_t sx126x_hal_write( const void* hspi, const uint8_t* command, const uint16_t command_length,
                                      const uint8_t* data, const uint16_t data_length ){
 800b284:	b580      	push	{r7, lr}
 800b286:	b086      	sub	sp, #24
 800b288:	af00      	add	r7, sp, #0
 800b28a:	60f8      	str	r0, [r7, #12]
 800b28c:	60b9      	str	r1, [r7, #8]
 800b28e:	603b      	str	r3, [r7, #0]
 800b290:	4613      	mov	r3, r2
 800b292:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    while(HAL_GPIO_ReadPin(BUSY_GPIO,BUSY) == GPIO_PIN_SET);
 800b294:	bf00      	nop
 800b296:	4b18      	ldr	r3, [pc, #96]	; (800b2f8 <sx126x_hal_write+0x74>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	4a18      	ldr	r2, [pc, #96]	; (800b2fc <sx126x_hal_write+0x78>)
 800b29c:	8812      	ldrh	r2, [r2, #0]
 800b29e:	4611      	mov	r1, r2
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f002 f825 	bl	800d2f0 <HAL_GPIO_ReadPin>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	2b01      	cmp	r3, #1
 800b2aa:	d0f4      	beq.n	800b296 <sx126x_hal_write+0x12>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 800b2ac:	4b14      	ldr	r3, [pc, #80]	; (800b300 <sx126x_hal_write+0x7c>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	4a14      	ldr	r2, [pc, #80]	; (800b304 <sx126x_hal_write+0x80>)
 800b2b2:	8811      	ldrh	r1, [r2, #0]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f002 f832 	bl	800d320 <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(hspi, command, command_length, 100);
 800b2bc:	88fa      	ldrh	r2, [r7, #6]
 800b2be:	2364      	movs	r3, #100	; 0x64
 800b2c0:	68b9      	ldr	r1, [r7, #8]
 800b2c2:	68f8      	ldr	r0, [r7, #12]
 800b2c4:	f004 feb7 	bl	8010036 <HAL_SPI_Transmit>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	75fb      	strb	r3, [r7, #23]
    status = HAL_SPI_Transmit(hspi, data, data_length, 100);
 800b2cc:	8c3a      	ldrh	r2, [r7, #32]
 800b2ce:	2364      	movs	r3, #100	; 0x64
 800b2d0:	6839      	ldr	r1, [r7, #0]
 800b2d2:	68f8      	ldr	r0, [r7, #12]
 800b2d4:	f004 feaf 	bl	8010036 <HAL_SPI_Transmit>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
 800b2dc:	4b08      	ldr	r3, [pc, #32]	; (800b300 <sx126x_hal_write+0x7c>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	4a08      	ldr	r2, [pc, #32]	; (800b304 <sx126x_hal_write+0x80>)
 800b2e2:	8811      	ldrh	r1, [r2, #0]
 800b2e4:	2201      	movs	r2, #1
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f002 f81a 	bl	800d320 <HAL_GPIO_WritePin>
    return status;
 800b2ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3718      	adds	r7, #24
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}
 800b2f6:	bf00      	nop
 800b2f8:	200007d4 	.word	0x200007d4
 800b2fc:	200007d0 	.word	0x200007d0
 800b300:	200007c4 	.word	0x200007c4
 800b304:	200007c0 	.word	0x200007c0

0800b308 <sx126x_hal_read>:
 * @param [in] data_length      Buffer size to be received
 *
 * @returns Operation status
 */
sx126x_hal_status_t sx126x_hal_read( const void* hspi, const uint8_t* command, const uint16_t command_length,
                                     uint8_t* data, const uint8_t offset ){
 800b308:	b580      	push	{r7, lr}
 800b30a:	b088      	sub	sp, #32
 800b30c:	af02      	add	r7, sp, #8
 800b30e:	60f8      	str	r0, [r7, #12]
 800b310:	60b9      	str	r1, [r7, #8]
 800b312:	603b      	str	r3, [r7, #0]
 800b314:	4613      	mov	r3, r2
 800b316:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    while(HAL_GPIO_ReadPin(BUSY_GPIO, BUSY) == GPIO_PIN_SET);
 800b318:	bf00      	nop
 800b31a:	4b1e      	ldr	r3, [pc, #120]	; (800b394 <sx126x_hal_read+0x8c>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	4a1e      	ldr	r2, [pc, #120]	; (800b398 <sx126x_hal_read+0x90>)
 800b320:	8812      	ldrh	r2, [r2, #0]
 800b322:	4611      	mov	r1, r2
 800b324:	4618      	mov	r0, r3
 800b326:	f001 ffe3 	bl	800d2f0 <HAL_GPIO_ReadPin>
 800b32a:	4603      	mov	r3, r0
 800b32c:	2b01      	cmp	r3, #1
 800b32e:	d0f4      	beq.n	800b31a <sx126x_hal_read+0x12>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 800b330:	4b1a      	ldr	r3, [pc, #104]	; (800b39c <sx126x_hal_read+0x94>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	4a1a      	ldr	r2, [pc, #104]	; (800b3a0 <sx126x_hal_read+0x98>)
 800b336:	8811      	ldrh	r1, [r2, #0]
 800b338:	2200      	movs	r2, #0
 800b33a:	4618      	mov	r0, r3
 800b33c:	f001 fff0 	bl	800d320 <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(hspi, command, offset, 100);
 800b340:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b344:	b29a      	uxth	r2, r3
 800b346:	2364      	movs	r3, #100	; 0x64
 800b348:	68b9      	ldr	r1, [r7, #8]
 800b34a:	68f8      	ldr	r0, [r7, #12]
 800b34c:	f004 fe73 	bl	8010036 <HAL_SPI_Transmit>
 800b350:	4603      	mov	r3, r0
 800b352:	75fb      	strb	r3, [r7, #23]
    status = HAL_SPI_TransmitReceive(hspi, command+offset, data, command_length-offset, 100);
 800b354:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b358:	68ba      	ldr	r2, [r7, #8]
 800b35a:	18d1      	adds	r1, r2, r3
 800b35c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b360:	b29b      	uxth	r3, r3
 800b362:	88fa      	ldrh	r2, [r7, #6]
 800b364:	1ad3      	subs	r3, r2, r3
 800b366:	b29b      	uxth	r3, r3
 800b368:	2264      	movs	r2, #100	; 0x64
 800b36a:	9200      	str	r2, [sp, #0]
 800b36c:	683a      	ldr	r2, [r7, #0]
 800b36e:	68f8      	ldr	r0, [r7, #12]
 800b370:	f005 f8ae 	bl	80104d0 <HAL_SPI_TransmitReceive>
 800b374:	4603      	mov	r3, r0
 800b376:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
 800b378:	4b08      	ldr	r3, [pc, #32]	; (800b39c <sx126x_hal_read+0x94>)
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	4a08      	ldr	r2, [pc, #32]	; (800b3a0 <sx126x_hal_read+0x98>)
 800b37e:	8811      	ldrh	r1, [r2, #0]
 800b380:	2201      	movs	r2, #1
 800b382:	4618      	mov	r0, r3
 800b384:	f001 ffcc 	bl	800d320 <HAL_GPIO_WritePin>
    return status;
 800b388:	7dfb      	ldrb	r3, [r7, #23]
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	3718      	adds	r7, #24
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}
 800b392:	bf00      	nop
 800b394:	200007d4 	.word	0x200007d4
 800b398:	200007d0 	.word	0x200007d0
 800b39c:	200007c4 	.word	0x200007c4
 800b3a0:	200007c0 	.word	0x200007c0

0800b3a4 <set_NSS_pin>:
    status = HAL_SPI_TransmitReceive(&hspi, (uint8_t*)params, (uint8_t*)response, numOfParams, 100);
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
    return status;
}

void set_NSS_pin(GPIO_TypeDef* _NSS_GPIO, uint16_t _NSS){
 800b3a4:	b480      	push	{r7}
 800b3a6:	b083      	sub	sp, #12
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
 800b3ac:	460b      	mov	r3, r1
 800b3ae:	807b      	strh	r3, [r7, #2]
    NSS = _NSS;
 800b3b0:	4a05      	ldr	r2, [pc, #20]	; (800b3c8 <set_NSS_pin+0x24>)
 800b3b2:	887b      	ldrh	r3, [r7, #2]
 800b3b4:	8013      	strh	r3, [r2, #0]
    NSS_GPIO = _NSS_GPIO;
 800b3b6:	4a05      	ldr	r2, [pc, #20]	; (800b3cc <set_NSS_pin+0x28>)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6013      	str	r3, [r2, #0]
}
 800b3bc:	bf00      	nop
 800b3be:	370c      	adds	r7, #12
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c6:	4770      	bx	lr
 800b3c8:	200007c0 	.word	0x200007c0
 800b3cc:	200007c4 	.word	0x200007c4

0800b3d0 <set_BUSY_pin>:

void set_BUSY_pin(GPIO_TypeDef* _BUSY_GPIO, uint16_t _BUSY){
 800b3d0:	b480      	push	{r7}
 800b3d2:	b083      	sub	sp, #12
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	460b      	mov	r3, r1
 800b3da:	807b      	strh	r3, [r7, #2]
    BUSY = _BUSY;
 800b3dc:	4a05      	ldr	r2, [pc, #20]	; (800b3f4 <set_BUSY_pin+0x24>)
 800b3de:	887b      	ldrh	r3, [r7, #2]
 800b3e0:	8013      	strh	r3, [r2, #0]
    BUSY_GPIO = _BUSY_GPIO;
 800b3e2:	4a05      	ldr	r2, [pc, #20]	; (800b3f8 <set_BUSY_pin+0x28>)
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	6013      	str	r3, [r2, #0]
}
 800b3e8:	bf00      	nop
 800b3ea:	370c      	adds	r7, #12
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f2:	4770      	bx	lr
 800b3f4:	200007d0 	.word	0x200007d0
 800b3f8:	200007d4 	.word	0x200007d4

0800b3fc <set_NRESET_pin>:

void set_NRESET_pin(GPIO_TypeDef* _NRESET_GPIO, uint16_t _NRESET){
 800b3fc:	b480      	push	{r7}
 800b3fe:	b083      	sub	sp, #12
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
 800b404:	460b      	mov	r3, r1
 800b406:	807b      	strh	r3, [r7, #2]
    NRESET = _NRESET;
 800b408:	4a05      	ldr	r2, [pc, #20]	; (800b420 <set_NRESET_pin+0x24>)
 800b40a:	887b      	ldrh	r3, [r7, #2]
 800b40c:	8013      	strh	r3, [r2, #0]
    NRESET_GPIO = _NRESET_GPIO;
 800b40e:	4a05      	ldr	r2, [pc, #20]	; (800b424 <set_NRESET_pin+0x28>)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	6013      	str	r3, [r2, #0]
}
 800b414:	bf00      	nop
 800b416:	370c      	adds	r7, #12
 800b418:	46bd      	mov	sp, r7
 800b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41e:	4770      	bx	lr
 800b420:	200007c8 	.word	0x200007c8
 800b424:	200007cc 	.word	0x200007cc

0800b428 <set_DIO1_pin>:

void set_DIO1_pin(GPIO_TypeDef* _DIO1_GPIO, uint16_t _DIO1){
 800b428:	b480      	push	{r7}
 800b42a:	b083      	sub	sp, #12
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	460b      	mov	r3, r1
 800b432:	807b      	strh	r3, [r7, #2]
    DIO1 = _DIO1;
 800b434:	4a05      	ldr	r2, [pc, #20]	; (800b44c <set_DIO1_pin+0x24>)
 800b436:	887b      	ldrh	r3, [r7, #2]
 800b438:	8013      	strh	r3, [r2, #0]
    DIO1_GPIO = _DIO1_GPIO;
 800b43a:	4a05      	ldr	r2, [pc, #20]	; (800b450 <set_DIO1_pin+0x28>)
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6013      	str	r3, [r2, #0]
}
 800b440:	bf00      	nop
 800b442:	370c      	adds	r7, #12
 800b444:	46bd      	mov	sp, r7
 800b446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44a:	4770      	bx	lr
 800b44c:	200007d8 	.word	0x200007d8
 800b450:	200007dc 	.word	0x200007dc

0800b454 <set_hspi>:
void set_DIO3_pin(GPIO_TypeDef* _DIO3_GPIO, uint16_t _DIO3){
    DIO3 = _DIO3;
    DIO3_GPIO = _DIO3_GPIO;
}

void set_hspi(SPI_HandleTypeDef _hspi){
 800b454:	b084      	sub	sp, #16
 800b456:	b580      	push	{r7, lr}
 800b458:	af00      	add	r7, sp, #0
 800b45a:	f107 0c08 	add.w	ip, r7, #8
 800b45e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    hspi = _hspi;
 800b462:	4b07      	ldr	r3, [pc, #28]	; (800b480 <set_hspi+0x2c>)
 800b464:	4618      	mov	r0, r3
 800b466:	f107 0308 	add.w	r3, r7, #8
 800b46a:	2258      	movs	r2, #88	; 0x58
 800b46c:	4619      	mov	r1, r3
 800b46e:	f00f fadb 	bl	801aa28 <memcpy>
}
 800b472:	bf00      	nop
 800b474:	46bd      	mov	sp, r7
 800b476:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b47a:	b004      	add	sp, #16
 800b47c:	4770      	bx	lr
 800b47e:	bf00      	nop
 800b480:	200007e0 	.word	0x200007e0

0800b484 <Tx_setup>:

void Tx_setup(){
 800b484:	b580      	push	{r7, lr}
 800b486:	b086      	sub	sp, #24
 800b488:	af02      	add	r7, sp, #8
    //NEED TO ADD COMMAND ERROR HANDLING
    HAL_GPIO_WritePin(NRESET_GPIO, NRESET, GPIO_PIN_SET);
 800b48a:	4b66      	ldr	r3, [pc, #408]	; (800b624 <Tx_setup+0x1a0>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	4a66      	ldr	r2, [pc, #408]	; (800b628 <Tx_setup+0x1a4>)
 800b490:	8811      	ldrh	r1, [r2, #0]
 800b492:	2201      	movs	r2, #1
 800b494:	4618      	mov	r0, r3
 800b496:	f001 ff43 	bl	800d320 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 800b49a:	4b64      	ldr	r3, [pc, #400]	; (800b62c <Tx_setup+0x1a8>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	4a64      	ldr	r2, [pc, #400]	; (800b630 <Tx_setup+0x1ac>)
 800b4a0:	8811      	ldrh	r1, [r2, #0]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f001 ff3b 	bl	800d320 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 800b4aa:	2032      	movs	r0, #50	; 0x32
 800b4ac:	f001 f82c 	bl	800c508 <HAL_Delay>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);             //make sure chip select is off
 800b4b0:	4b5e      	ldr	r3, [pc, #376]	; (800b62c <Tx_setup+0x1a8>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	4a5e      	ldr	r2, [pc, #376]	; (800b630 <Tx_setup+0x1ac>)
 800b4b6:	8811      	ldrh	r1, [r2, #0]
 800b4b8:	2201      	movs	r2, #1
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f001 ff30 	bl	800d320 <HAL_GPIO_WritePin>

    //set to standby for setup
    sx126x_set_standby(&hspi, 0);
 800b4c0:	2100      	movs	r1, #0
 800b4c2:	485c      	ldr	r0, [pc, #368]	; (800b634 <Tx_setup+0x1b0>)
 800b4c4:	f000 fa8a 	bl	800b9dc <sx126x_set_standby>

    //set general parameters
    sx126x_set_rf_freq(&hspi, frequency);                       //set rf frequency
 800b4c8:	4b5b      	ldr	r3, [pc, #364]	; (800b638 <Tx_setup+0x1b4>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	4619      	mov	r1, r3
 800b4ce:	4859      	ldr	r0, [pc, #356]	; (800b634 <Tx_setup+0x1b0>)
 800b4d0:	f000 fdfe 	bl	800c0d0 <sx126x_set_rf_freq>
    sx126x_set_pkt_type(&hspi, packet_type);                    //set packet type
 800b4d4:	4b59      	ldr	r3, [pc, #356]	; (800b63c <Tx_setup+0x1b8>)
 800b4d6:	781b      	ldrb	r3, [r3, #0]
 800b4d8:	4619      	mov	r1, r3
 800b4da:	4856      	ldr	r0, [pc, #344]	; (800b634 <Tx_setup+0x1b0>)
 800b4dc:	f000 fe32 	bl	800c144 <sx126x_set_pkt_type>
    sx126x_set_rx_tx_fallback_mode(&hspi, fallback_mode);       //set rx tx fallback mode
 800b4e0:	4b57      	ldr	r3, [pc, #348]	; (800b640 <Tx_setup+0x1bc>)
 800b4e2:	781b      	ldrb	r3, [r3, #0]
 800b4e4:	4619      	mov	r1, r3
 800b4e6:	4853      	ldr	r0, [pc, #332]	; (800b634 <Tx_setup+0x1b0>)
 800b4e8:	f000 fbcf 	bl	800bc8a <sx126x_set_rx_tx_fallback_mode>
    sx126x_set_dio2_as_rf_sw_ctrl(&hspi, 1);                    //set dio2 as rf sw -> 1 is to activate it 0 would be to have it as regular irq
 800b4ec:	2101      	movs	r1, #1
 800b4ee:	4851      	ldr	r0, [pc, #324]	; (800b634 <Tx_setup+0x1b0>)
 800b4f0:	f000 fdac 	bl	800c04c <sx126x_set_dio2_as_rf_sw_ctrl>
    sx126x_set_dio3_as_tcxo_ctrl(&hspi, tcxo_voltage_ctrl, 100);//set dio3 as tcxo ctrl, 100 is for the delay in ms
 800b4f4:	4b53      	ldr	r3, [pc, #332]	; (800b644 <Tx_setup+0x1c0>)
 800b4f6:	781b      	ldrb	r3, [r3, #0]
 800b4f8:	2264      	movs	r2, #100	; 0x64
 800b4fa:	4619      	mov	r1, r3
 800b4fc:	484d      	ldr	r0, [pc, #308]	; (800b634 <Tx_setup+0x1b0>)
 800b4fe:	f000 fdbf 	bl	800c080 <sx126x_set_dio3_as_tcxo_ctrl>

    //calibrate functions
    sx126x_cal(&hspi, cal_mask);                                //calibrate radio, mask chooses what to calibrate
 800b502:	4b51      	ldr	r3, [pc, #324]	; (800b648 <Tx_setup+0x1c4>)
 800b504:	781b      	ldrb	r3, [r3, #0]
 800b506:	4619      	mov	r1, r3
 800b508:	484a      	ldr	r0, [pc, #296]	; (800b634 <Tx_setup+0x1b0>)
 800b50a:	f000 fb5b 	bl	800bbc4 <sx126x_cal>
    HAL_Delay(50);
 800b50e:	2032      	movs	r0, #50	; 0x32
 800b510:	f000 fffa 	bl	800c508 <HAL_Delay>
    sx126x_set_reg_mode(&hspi, regulator_mode);                 //ldo or dc-dc
 800b514:	4b4d      	ldr	r3, [pc, #308]	; (800b64c <Tx_setup+0x1c8>)
 800b516:	781b      	ldrb	r3, [r3, #0]
 800b518:	4619      	mov	r1, r3
 800b51a:	4846      	ldr	r0, [pc, #280]	; (800b634 <Tx_setup+0x1b0>)
 800b51c:	f000 fb38 	bl	800bb90 <sx126x_set_reg_mode>
    sx126x_cal_img_hex(&hspi, cal_low_freq, cal_hi_freq);       //image calibration frequencies
 800b520:	4b4b      	ldr	r3, [pc, #300]	; (800b650 <Tx_setup+0x1cc>)
 800b522:	781b      	ldrb	r3, [r3, #0]
 800b524:	4a4b      	ldr	r2, [pc, #300]	; (800b654 <Tx_setup+0x1d0>)
 800b526:	7812      	ldrb	r2, [r2, #0]
 800b528:	4619      	mov	r1, r3
 800b52a:	4842      	ldr	r0, [pc, #264]	; (800b634 <Tx_setup+0x1b0>)
 800b52c:	f000 fb64 	bl	800bbf8 <sx126x_cal_img_hex>

    //set pa config
    struct sx126x_pa_cfg_params_s *params = malloc(sizeof(sx126x_pa_cfg_params_t));
 800b530:	2004      	movs	r0, #4
 800b532:	f00f fa69 	bl	801aa08 <malloc>
 800b536:	4603      	mov	r3, r0
 800b538:	60fb      	str	r3, [r7, #12]
    params->pa_duty_cycle=pa_duty_cyc;
 800b53a:	4b47      	ldr	r3, [pc, #284]	; (800b658 <Tx_setup+0x1d4>)
 800b53c:	781a      	ldrb	r2, [r3, #0]
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	701a      	strb	r2, [r3, #0]
    params->hp_max=pa_hp_max;
 800b542:	4b46      	ldr	r3, [pc, #280]	; (800b65c <Tx_setup+0x1d8>)
 800b544:	781a      	ldrb	r2, [r3, #0]
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	705a      	strb	r2, [r3, #1]
    params->device_sel=pa_device_sel;
 800b54a:	4b45      	ldr	r3, [pc, #276]	; (800b660 <Tx_setup+0x1dc>)
 800b54c:	781a      	ldrb	r2, [r3, #0]
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	709a      	strb	r2, [r3, #2]
    params->pa_lut=pa_lut;
 800b552:	4b44      	ldr	r3, [pc, #272]	; (800b664 <Tx_setup+0x1e0>)
 800b554:	781a      	ldrb	r2, [r3, #0]
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	70da      	strb	r2, [r3, #3]
    sx126x_set_pa_cfg(&hspi, params);
 800b55a:	68f9      	ldr	r1, [r7, #12]
 800b55c:	4835      	ldr	r0, [pc, #212]	; (800b634 <Tx_setup+0x1b0>)
 800b55e:	f000 fb6f 	bl	800bc40 <sx126x_set_pa_cfg>
    free(params);
 800b562:	68f8      	ldr	r0, [r7, #12]
 800b564:	f00f fa58 	bl	801aa18 <free>

    //set transmission parameters
    sx126x_set_tx_params(&hspi, tx_power, ramp_time);
 800b568:	4b3f      	ldr	r3, [pc, #252]	; (800b668 <Tx_setup+0x1e4>)
 800b56a:	781b      	ldrb	r3, [r3, #0]
 800b56c:	b25b      	sxtb	r3, r3
 800b56e:	4a3f      	ldr	r2, [pc, #252]	; (800b66c <Tx_setup+0x1e8>)
 800b570:	7812      	ldrb	r2, [r2, #0]
 800b572:	4619      	mov	r1, r3
 800b574:	482f      	ldr	r0, [pc, #188]	; (800b634 <Tx_setup+0x1b0>)
 800b576:	f000 fdff 	bl	800c178 <sx126x_set_tx_params>
    sx126x_set_buffer_base_address(&hspi, tx_address_base, rx_address_base);
 800b57a:	4b3d      	ldr	r3, [pc, #244]	; (800b670 <Tx_setup+0x1ec>)
 800b57c:	781b      	ldrb	r3, [r3, #0]
 800b57e:	4a3d      	ldr	r2, [pc, #244]	; (800b674 <Tx_setup+0x1f0>)
 800b580:	7812      	ldrb	r2, [r2, #0]
 800b582:	4619      	mov	r1, r3
 800b584:	482b      	ldr	r0, [pc, #172]	; (800b634 <Tx_setup+0x1b0>)
 800b586:	f000 feb5 	bl	800c2f4 <sx126x_set_buffer_base_address>

    //set modulation parameters
    struct sx126x_mod_params_lora_s *mod_params = malloc(sizeof(sx126x_mod_params_lora_t));
 800b58a:	2004      	movs	r0, #4
 800b58c:	f00f fa3c 	bl	801aa08 <malloc>
 800b590:	4603      	mov	r3, r0
 800b592:	60bb      	str	r3, [r7, #8]
    mod_params->sf=lora_sf;
 800b594:	4b38      	ldr	r3, [pc, #224]	; (800b678 <Tx_setup+0x1f4>)
 800b596:	781a      	ldrb	r2, [r3, #0]
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	701a      	strb	r2, [r3, #0]
    mod_params->bw=lora_bw;
 800b59c:	4b37      	ldr	r3, [pc, #220]	; (800b67c <Tx_setup+0x1f8>)
 800b59e:	781a      	ldrb	r2, [r3, #0]
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	705a      	strb	r2, [r3, #1]
    mod_params->cr=lora_cr;
 800b5a4:	4b36      	ldr	r3, [pc, #216]	; (800b680 <Tx_setup+0x1fc>)
 800b5a6:	781a      	ldrb	r2, [r3, #0]
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	709a      	strb	r2, [r3, #2]
    mod_params->ldro=lora_ldro;
 800b5ac:	4b35      	ldr	r3, [pc, #212]	; (800b684 <Tx_setup+0x200>)
 800b5ae:	781a      	ldrb	r2, [r3, #0]
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	70da      	strb	r2, [r3, #3]
    sx126x_set_lora_mod_params(&hspi, mod_params);
 800b5b4:	68b9      	ldr	r1, [r7, #8]
 800b5b6:	481f      	ldr	r0, [pc, #124]	; (800b634 <Tx_setup+0x1b0>)
 800b5b8:	f000 fe02 	bl	800c1c0 <sx126x_set_lora_mod_params>
    free(mod_params);
 800b5bc:	68b8      	ldr	r0, [r7, #8]
 800b5be:	f00f fa2b 	bl	801aa18 <free>

    //set lora packet params
    struct sx126x_pkt_params_lora_s *lora_params = malloc(sizeof(sx126x_pkt_params_lora_t));
 800b5c2:	2006      	movs	r0, #6
 800b5c4:	f00f fa20 	bl	801aa08 <malloc>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	607b      	str	r3, [r7, #4]
    lora_params->preamble_len_in_symb=pkt_preamble_len;
 800b5cc:	4b2e      	ldr	r3, [pc, #184]	; (800b688 <Tx_setup+0x204>)
 800b5ce:	881a      	ldrh	r2, [r3, #0]
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	801a      	strh	r2, [r3, #0]
    lora_params->header_type=header_type;
 800b5d4:	4b2d      	ldr	r3, [pc, #180]	; (800b68c <Tx_setup+0x208>)
 800b5d6:	781a      	ldrb	r2, [r3, #0]
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	709a      	strb	r2, [r3, #2]
    lora_params->pld_len_in_bytes=payload_len;
 800b5dc:	4b2c      	ldr	r3, [pc, #176]	; (800b690 <Tx_setup+0x20c>)
 800b5de:	781a      	ldrb	r2, [r3, #0]
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	70da      	strb	r2, [r3, #3]
    lora_params->crc_is_on=crc_is_on;
 800b5e4:	4b2b      	ldr	r3, [pc, #172]	; (800b694 <Tx_setup+0x210>)
 800b5e6:	781a      	ldrb	r2, [r3, #0]
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	711a      	strb	r2, [r3, #4]
    lora_params->invert_iq_is_on=invert_iq_is_on;
 800b5ec:	4b2a      	ldr	r3, [pc, #168]	; (800b698 <Tx_setup+0x214>)
 800b5ee:	781a      	ldrb	r2, [r3, #0]
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	715a      	strb	r2, [r3, #5]
    sx126x_set_lora_pkt_params(&hspi, lora_params);
 800b5f4:	6879      	ldr	r1, [r7, #4]
 800b5f6:	480f      	ldr	r0, [pc, #60]	; (800b634 <Tx_setup+0x1b0>)
 800b5f8:	f000 fe0e 	bl	800c218 <sx126x_set_lora_pkt_params>
    free(lora_params);
 800b5fc:	6878      	ldr	r0, [r7, #4]
 800b5fe:	f00f fa0b 	bl	801aa18 <free>

    //set dio and irq parameters
    sx126x_set_dio_irq_params(&hspi, irq_mask, dio1_mask, dio2_mask, dio3_mask);
 800b602:	4b26      	ldr	r3, [pc, #152]	; (800b69c <Tx_setup+0x218>)
 800b604:	8819      	ldrh	r1, [r3, #0]
 800b606:	4b26      	ldr	r3, [pc, #152]	; (800b6a0 <Tx_setup+0x21c>)
 800b608:	881a      	ldrh	r2, [r3, #0]
 800b60a:	4b26      	ldr	r3, [pc, #152]	; (800b6a4 <Tx_setup+0x220>)
 800b60c:	8818      	ldrh	r0, [r3, #0]
 800b60e:	4b26      	ldr	r3, [pc, #152]	; (800b6a8 <Tx_setup+0x224>)
 800b610:	881b      	ldrh	r3, [r3, #0]
 800b612:	9300      	str	r3, [sp, #0]
 800b614:	4603      	mov	r3, r0
 800b616:	4807      	ldr	r0, [pc, #28]	; (800b634 <Tx_setup+0x1b0>)
 800b618:	f000 fc7c 	bl	800bf14 <sx126x_set_dio_irq_params>

}
 800b61c:	bf00      	nop
 800b61e:	3710      	adds	r7, #16
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}
 800b624:	200007cc 	.word	0x200007cc
 800b628:	200007c8 	.word	0x200007c8
 800b62c:	200007c4 	.word	0x200007c4
 800b630:	200007c0 	.word	0x200007c0
 800b634:	200007e0 	.word	0x200007e0
 800b638:	200000b0 	.word	0x200000b0
 800b63c:	200000b4 	.word	0x200000b4
 800b640:	200000b5 	.word	0x200000b5
 800b644:	200000b6 	.word	0x200000b6
 800b648:	200000b8 	.word	0x200000b8
 800b64c:	200000b7 	.word	0x200000b7
 800b650:	200000b9 	.word	0x200000b9
 800b654:	200000ba 	.word	0x200000ba
 800b658:	200000bb 	.word	0x200000bb
 800b65c:	200000bc 	.word	0x200000bc
 800b660:	20000838 	.word	0x20000838
 800b664:	200000bd 	.word	0x200000bd
 800b668:	200000be 	.word	0x200000be
 800b66c:	200000bf 	.word	0x200000bf
 800b670:	20000839 	.word	0x20000839
 800b674:	2000083a 	.word	0x2000083a
 800b678:	200000c0 	.word	0x200000c0
 800b67c:	200000c1 	.word	0x200000c1
 800b680:	200000c2 	.word	0x200000c2
 800b684:	2000083b 	.word	0x2000083b
 800b688:	200000c4 	.word	0x200000c4
 800b68c:	2000083c 	.word	0x2000083c
 800b690:	200000c6 	.word	0x200000c6
 800b694:	200000c7 	.word	0x200000c7
 800b698:	2000083d 	.word	0x2000083d
 800b69c:	200000c8 	.word	0x200000c8
 800b6a0:	200000ca 	.word	0x200000ca
 800b6a4:	20000840 	.word	0x20000840
 800b6a8:	20000842 	.word	0x20000842

0800b6ac <TxProtocol>:

void TxProtocol(uint8_t data[], uint8_t data_length){
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b084      	sub	sp, #16
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
 800b6b4:	460b      	mov	r3, r1
 800b6b6:	70fb      	strb	r3, [r7, #3]

    HAL_StatusTypeDef command_status;
    command_status = sx126x_clear_irq_status(&hspi, dio1_mask);
 800b6b8:	4b18      	ldr	r3, [pc, #96]	; (800b71c <TxProtocol+0x70>)
 800b6ba:	881b      	ldrh	r3, [r3, #0]
 800b6bc:	4619      	mov	r1, r3
 800b6be:	4818      	ldr	r0, [pc, #96]	; (800b720 <TxProtocol+0x74>)
 800b6c0:	f000 fc9e 	bl	800c000 <sx126x_clear_irq_status>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	73fb      	strb	r3, [r7, #15]
    command_status = sx126x_write_buffer(&hspi, 0, data, data_length); // 0 is the offset
 800b6c8:	78fb      	ldrb	r3, [r7, #3]
 800b6ca:	687a      	ldr	r2, [r7, #4]
 800b6cc:	2100      	movs	r1, #0
 800b6ce:	4814      	ldr	r0, [pc, #80]	; (800b720 <TxProtocol+0x74>)
 800b6d0:	f000 fb48 	bl	800bd64 <sx126x_write_buffer>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	73fb      	strb	r3, [r7, #15]
    command_status = sx126x_set_tx(&hspi, 6000, data_length);
 800b6d8:	78fb      	ldrb	r3, [r7, #3]
 800b6da:	461a      	mov	r2, r3
 800b6dc:	f241 7170 	movw	r1, #6000	; 0x1770
 800b6e0:	480f      	ldr	r0, [pc, #60]	; (800b720 <TxProtocol+0x74>)
 800b6e2:	f000 f995 	bl	800ba10 <sx126x_set_tx>
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	73fb      	strb	r3, [r7, #15]
    osDelay(100);
 800b6ea:	2064      	movs	r0, #100	; 0x64
 800b6ec:	f00a fbdc 	bl	8015ea8 <osDelay>

    sx126x_irq_mask_t irq;
    do {
        command_status = sx126x_get_irq_status(&hspi, &irq); //reading the irq into irq
 800b6f0:	f107 030c 	add.w	r3, r7, #12
 800b6f4:	4619      	mov	r1, r3
 800b6f6:	480a      	ldr	r0, [pc, #40]	; (800b720 <TxProtocol+0x74>)
 800b6f8:	f000 fc50 	bl	800bf9c <sx126x_get_irq_status>
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	73fb      	strb	r3, [r7, #15]
    } while ( (!(irq & SX126X_IRQ_TX_DONE)) && (!(irq & SX126X_IRQ_TIMEOUT)) );
 800b700:	89bb      	ldrh	r3, [r7, #12]
 800b702:	f003 0301 	and.w	r3, r3, #1
 800b706:	2b00      	cmp	r3, #0
 800b708:	d104      	bne.n	800b714 <TxProtocol+0x68>
 800b70a:	89bb      	ldrh	r3, [r7, #12]
 800b70c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b710:	2b00      	cmp	r3, #0
 800b712:	d0ed      	beq.n	800b6f0 <TxProtocol+0x44>
}
 800b714:	bf00      	nop
 800b716:	3710      	adds	r7, #16
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}
 800b71c:	200000ca 	.word	0x200000ca
 800b720:	200007e0 	.word	0x200007e0

0800b724 <Rx_setup>:

void Rx_setup(){
 800b724:	b580      	push	{r7, lr}
 800b726:	b084      	sub	sp, #16
 800b728:	af02      	add	r7, sp, #8
    //NEED TO ADD COMMAND ERROR HANDLING
    HAL_GPIO_WritePin(NRESET_GPIO, NRESET, GPIO_PIN_SET);
 800b72a:	4b5a      	ldr	r3, [pc, #360]	; (800b894 <Rx_setup+0x170>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	4a5a      	ldr	r2, [pc, #360]	; (800b898 <Rx_setup+0x174>)
 800b730:	8811      	ldrh	r1, [r2, #0]
 800b732:	2201      	movs	r2, #1
 800b734:	4618      	mov	r0, r3
 800b736:	f001 fdf3 	bl	800d320 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 800b73a:	4b58      	ldr	r3, [pc, #352]	; (800b89c <Rx_setup+0x178>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	4a58      	ldr	r2, [pc, #352]	; (800b8a0 <Rx_setup+0x17c>)
 800b740:	8811      	ldrh	r1, [r2, #0]
 800b742:	2200      	movs	r2, #0
 800b744:	4618      	mov	r0, r3
 800b746:	f001 fdeb 	bl	800d320 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 800b74a:	2032      	movs	r0, #50	; 0x32
 800b74c:	f000 fedc 	bl	800c508 <HAL_Delay>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);             //make sure chip select is off
 800b750:	4b52      	ldr	r3, [pc, #328]	; (800b89c <Rx_setup+0x178>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	4a52      	ldr	r2, [pc, #328]	; (800b8a0 <Rx_setup+0x17c>)
 800b756:	8811      	ldrh	r1, [r2, #0]
 800b758:	2201      	movs	r2, #1
 800b75a:	4618      	mov	r0, r3
 800b75c:	f001 fde0 	bl	800d320 <HAL_GPIO_WritePin>

    //set to standby for setup
    sx126x_set_standby(&hspi, 0);
 800b760:	2100      	movs	r1, #0
 800b762:	4850      	ldr	r0, [pc, #320]	; (800b8a4 <Rx_setup+0x180>)
 800b764:	f000 f93a 	bl	800b9dc <sx126x_set_standby>

    //set general parameters
    sx126x_set_rf_freq(&hspi, frequency);                       //set rf frequency
 800b768:	4b4f      	ldr	r3, [pc, #316]	; (800b8a8 <Rx_setup+0x184>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	4619      	mov	r1, r3
 800b76e:	484d      	ldr	r0, [pc, #308]	; (800b8a4 <Rx_setup+0x180>)
 800b770:	f000 fcae 	bl	800c0d0 <sx126x_set_rf_freq>
    sx126x_set_pkt_type(&hspi, packet_type);                    //set packet type
 800b774:	4b4d      	ldr	r3, [pc, #308]	; (800b8ac <Rx_setup+0x188>)
 800b776:	781b      	ldrb	r3, [r3, #0]
 800b778:	4619      	mov	r1, r3
 800b77a:	484a      	ldr	r0, [pc, #296]	; (800b8a4 <Rx_setup+0x180>)
 800b77c:	f000 fce2 	bl	800c144 <sx126x_set_pkt_type>
    sx126x_set_rx_tx_fallback_mode(&hspi, fallback_mode);       //set rx tx fallback mode
 800b780:	4b4b      	ldr	r3, [pc, #300]	; (800b8b0 <Rx_setup+0x18c>)
 800b782:	781b      	ldrb	r3, [r3, #0]
 800b784:	4619      	mov	r1, r3
 800b786:	4847      	ldr	r0, [pc, #284]	; (800b8a4 <Rx_setup+0x180>)
 800b788:	f000 fa7f 	bl	800bc8a <sx126x_set_rx_tx_fallback_mode>
    sx126x_set_dio2_as_rf_sw_ctrl(&hspi, 1);                    //set dio2 as rf sw -> 1 is to activate it 0 would be to have it as regular irq
 800b78c:	2101      	movs	r1, #1
 800b78e:	4845      	ldr	r0, [pc, #276]	; (800b8a4 <Rx_setup+0x180>)
 800b790:	f000 fc5c 	bl	800c04c <sx126x_set_dio2_as_rf_sw_ctrl>
    sx126x_set_dio3_as_tcxo_ctrl(&hspi, tcxo_voltage_ctrl, 100);//set dio3 as tcxo ctrl, 100 is for the delay in ms
 800b794:	4b47      	ldr	r3, [pc, #284]	; (800b8b4 <Rx_setup+0x190>)
 800b796:	781b      	ldrb	r3, [r3, #0]
 800b798:	2264      	movs	r2, #100	; 0x64
 800b79a:	4619      	mov	r1, r3
 800b79c:	4841      	ldr	r0, [pc, #260]	; (800b8a4 <Rx_setup+0x180>)
 800b79e:	f000 fc6f 	bl	800c080 <sx126x_set_dio3_as_tcxo_ctrl>

    //calibrate functions
    sx126x_cal(&hspi, cal_mask);                                //calibrate radio, mask chooses what to calibrate
 800b7a2:	4b45      	ldr	r3, [pc, #276]	; (800b8b8 <Rx_setup+0x194>)
 800b7a4:	781b      	ldrb	r3, [r3, #0]
 800b7a6:	4619      	mov	r1, r3
 800b7a8:	483e      	ldr	r0, [pc, #248]	; (800b8a4 <Rx_setup+0x180>)
 800b7aa:	f000 fa0b 	bl	800bbc4 <sx126x_cal>
    HAL_Delay(50);
 800b7ae:	2032      	movs	r0, #50	; 0x32
 800b7b0:	f000 feaa 	bl	800c508 <HAL_Delay>
    sx126x_set_reg_mode(&hspi, regulator_mode);                 //ldo or dc-dc
 800b7b4:	4b41      	ldr	r3, [pc, #260]	; (800b8bc <Rx_setup+0x198>)
 800b7b6:	781b      	ldrb	r3, [r3, #0]
 800b7b8:	4619      	mov	r1, r3
 800b7ba:	483a      	ldr	r0, [pc, #232]	; (800b8a4 <Rx_setup+0x180>)
 800b7bc:	f000 f9e8 	bl	800bb90 <sx126x_set_reg_mode>
    sx126x_cal_img_hex(&hspi, cal_low_freq, cal_hi_freq);       //image calibration frequencies
 800b7c0:	4b3f      	ldr	r3, [pc, #252]	; (800b8c0 <Rx_setup+0x19c>)
 800b7c2:	781b      	ldrb	r3, [r3, #0]
 800b7c4:	4a3f      	ldr	r2, [pc, #252]	; (800b8c4 <Rx_setup+0x1a0>)
 800b7c6:	7812      	ldrb	r2, [r2, #0]
 800b7c8:	4619      	mov	r1, r3
 800b7ca:	4836      	ldr	r0, [pc, #216]	; (800b8a4 <Rx_setup+0x180>)
 800b7cc:	f000 fa14 	bl	800bbf8 <sx126x_cal_img_hex>

    sx126x_set_buffer_base_address(&hspi, tx_address_base, rx_address_base);
 800b7d0:	4b3d      	ldr	r3, [pc, #244]	; (800b8c8 <Rx_setup+0x1a4>)
 800b7d2:	781b      	ldrb	r3, [r3, #0]
 800b7d4:	4a3d      	ldr	r2, [pc, #244]	; (800b8cc <Rx_setup+0x1a8>)
 800b7d6:	7812      	ldrb	r2, [r2, #0]
 800b7d8:	4619      	mov	r1, r3
 800b7da:	4832      	ldr	r0, [pc, #200]	; (800b8a4 <Rx_setup+0x180>)
 800b7dc:	f000 fd8a 	bl	800c2f4 <sx126x_set_buffer_base_address>

    //set modulation parameters
    struct sx126x_mod_params_lora_s *mod_params = malloc(sizeof(sx126x_mod_params_lora_t));
 800b7e0:	2004      	movs	r0, #4
 800b7e2:	f00f f911 	bl	801aa08 <malloc>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	607b      	str	r3, [r7, #4]
    mod_params->sf=lora_sf;
 800b7ea:	4b39      	ldr	r3, [pc, #228]	; (800b8d0 <Rx_setup+0x1ac>)
 800b7ec:	781a      	ldrb	r2, [r3, #0]
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	701a      	strb	r2, [r3, #0]
    mod_params->bw=lora_bw;
 800b7f2:	4b38      	ldr	r3, [pc, #224]	; (800b8d4 <Rx_setup+0x1b0>)
 800b7f4:	781a      	ldrb	r2, [r3, #0]
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	705a      	strb	r2, [r3, #1]
    mod_params->cr=lora_cr;
 800b7fa:	4b37      	ldr	r3, [pc, #220]	; (800b8d8 <Rx_setup+0x1b4>)
 800b7fc:	781a      	ldrb	r2, [r3, #0]
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	709a      	strb	r2, [r3, #2]
    mod_params->ldro=lora_ldro;
 800b802:	4b36      	ldr	r3, [pc, #216]	; (800b8dc <Rx_setup+0x1b8>)
 800b804:	781a      	ldrb	r2, [r3, #0]
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	70da      	strb	r2, [r3, #3]
    sx126x_set_lora_mod_params(&hspi, mod_params);
 800b80a:	6879      	ldr	r1, [r7, #4]
 800b80c:	4825      	ldr	r0, [pc, #148]	; (800b8a4 <Rx_setup+0x180>)
 800b80e:	f000 fcd7 	bl	800c1c0 <sx126x_set_lora_mod_params>
    free(mod_params);
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f00f f900 	bl	801aa18 <free>

    //set lora packet params
    struct sx126x_pkt_params_lora_s *lora_params = malloc(sizeof(sx126x_pkt_params_lora_t));
 800b818:	2006      	movs	r0, #6
 800b81a:	f00f f8f5 	bl	801aa08 <malloc>
 800b81e:	4603      	mov	r3, r0
 800b820:	603b      	str	r3, [r7, #0]
    lora_params->preamble_len_in_symb=pkt_preamble_len;
 800b822:	4b2f      	ldr	r3, [pc, #188]	; (800b8e0 <Rx_setup+0x1bc>)
 800b824:	881a      	ldrh	r2, [r3, #0]
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	801a      	strh	r2, [r3, #0]
    lora_params->header_type=header_type;
 800b82a:	4b2e      	ldr	r3, [pc, #184]	; (800b8e4 <Rx_setup+0x1c0>)
 800b82c:	781a      	ldrb	r2, [r3, #0]
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	709a      	strb	r2, [r3, #2]
    lora_params->pld_len_in_bytes=payload_len;
 800b832:	4b2d      	ldr	r3, [pc, #180]	; (800b8e8 <Rx_setup+0x1c4>)
 800b834:	781a      	ldrb	r2, [r3, #0]
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	70da      	strb	r2, [r3, #3]
    lora_params->crc_is_on=crc_is_on;
 800b83a:	4b2c      	ldr	r3, [pc, #176]	; (800b8ec <Rx_setup+0x1c8>)
 800b83c:	781a      	ldrb	r2, [r3, #0]
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	711a      	strb	r2, [r3, #4]
    lora_params->invert_iq_is_on=invert_iq_is_on;
 800b842:	4b2b      	ldr	r3, [pc, #172]	; (800b8f0 <Rx_setup+0x1cc>)
 800b844:	781a      	ldrb	r2, [r3, #0]
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	715a      	strb	r2, [r3, #5]
    sx126x_set_lora_pkt_params(&hspi, lora_params);
 800b84a:	6839      	ldr	r1, [r7, #0]
 800b84c:	4815      	ldr	r0, [pc, #84]	; (800b8a4 <Rx_setup+0x180>)
 800b84e:	f000 fce3 	bl	800c218 <sx126x_set_lora_pkt_params>
    free(lora_params);
 800b852:	6838      	ldr	r0, [r7, #0]
 800b854:	f00f f8e0 	bl	801aa18 <free>

    //set dio and irq parameters
    sx126x_set_dio_irq_params(&hspi, irq_mask, dio1_mask, dio2_mask, dio3_mask);
 800b858:	4b26      	ldr	r3, [pc, #152]	; (800b8f4 <Rx_setup+0x1d0>)
 800b85a:	8819      	ldrh	r1, [r3, #0]
 800b85c:	4b26      	ldr	r3, [pc, #152]	; (800b8f8 <Rx_setup+0x1d4>)
 800b85e:	881a      	ldrh	r2, [r3, #0]
 800b860:	4b26      	ldr	r3, [pc, #152]	; (800b8fc <Rx_setup+0x1d8>)
 800b862:	8818      	ldrh	r0, [r3, #0]
 800b864:	4b26      	ldr	r3, [pc, #152]	; (800b900 <Rx_setup+0x1dc>)
 800b866:	881b      	ldrh	r3, [r3, #0]
 800b868:	9300      	str	r3, [sp, #0]
 800b86a:	4603      	mov	r3, r0
 800b86c:	480d      	ldr	r0, [pc, #52]	; (800b8a4 <Rx_setup+0x180>)
 800b86e:	f000 fb51 	bl	800bf14 <sx126x_set_dio_irq_params>

    //timer for TIMEOUT params
    sx126x_stop_timer_on_preamble(&hspi, timer_is_stopped_at_header);
 800b872:	4b24      	ldr	r3, [pc, #144]	; (800b904 <Rx_setup+0x1e0>)
 800b874:	781b      	ldrb	r3, [r3, #0]
 800b876:	4619      	mov	r1, r3
 800b878:	480a      	ldr	r0, [pc, #40]	; (800b8a4 <Rx_setup+0x180>)
 800b87a:	f000 f96f 	bl	800bb5c <sx126x_stop_timer_on_preamble>
    sx126x_set_lora_symb_nb_timeout(&hspi, nb_symbols_for_valid_rx);
 800b87e:	4b22      	ldr	r3, [pc, #136]	; (800b908 <Rx_setup+0x1e4>)
 800b880:	781b      	ldrb	r3, [r3, #0]
 800b882:	4619      	mov	r1, r3
 800b884:	4807      	ldr	r0, [pc, #28]	; (800b8a4 <Rx_setup+0x180>)
 800b886:	f000 fd59 	bl	800c33c <sx126x_set_lora_symb_nb_timeout>


}
 800b88a:	bf00      	nop
 800b88c:	3708      	adds	r7, #8
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}
 800b892:	bf00      	nop
 800b894:	200007cc 	.word	0x200007cc
 800b898:	200007c8 	.word	0x200007c8
 800b89c:	200007c4 	.word	0x200007c4
 800b8a0:	200007c0 	.word	0x200007c0
 800b8a4:	200007e0 	.word	0x200007e0
 800b8a8:	200000b0 	.word	0x200000b0
 800b8ac:	200000b4 	.word	0x200000b4
 800b8b0:	200000b5 	.word	0x200000b5
 800b8b4:	200000b6 	.word	0x200000b6
 800b8b8:	200000b8 	.word	0x200000b8
 800b8bc:	200000b7 	.word	0x200000b7
 800b8c0:	200000b9 	.word	0x200000b9
 800b8c4:	200000ba 	.word	0x200000ba
 800b8c8:	20000839 	.word	0x20000839
 800b8cc:	2000083a 	.word	0x2000083a
 800b8d0:	200000c0 	.word	0x200000c0
 800b8d4:	200000c1 	.word	0x200000c1
 800b8d8:	200000c2 	.word	0x200000c2
 800b8dc:	2000083b 	.word	0x2000083b
 800b8e0:	200000c4 	.word	0x200000c4
 800b8e4:	2000083c 	.word	0x2000083c
 800b8e8:	200000c6 	.word	0x200000c6
 800b8ec:	200000c7 	.word	0x200000c7
 800b8f0:	2000083d 	.word	0x2000083d
 800b8f4:	200000c8 	.word	0x200000c8
 800b8f8:	200000ca 	.word	0x200000ca
 800b8fc:	20000840 	.word	0x20000840
 800b900:	20000842 	.word	0x20000842
 800b904:	2000083e 	.word	0x2000083e
 800b908:	2000083f 	.word	0x2000083f

0800b90c <RxProtocol>:

void RxProtocol(uint8_t buffer_received[]){
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b084      	sub	sp, #16
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]

    HAL_StatusTypeDef command_status;
    command_status = sx126x_clear_irq_status(&hspi, dio1_mask);
 800b914:	4b2f      	ldr	r3, [pc, #188]	; (800b9d4 <RxProtocol+0xc8>)
 800b916:	881b      	ldrh	r3, [r3, #0]
 800b918:	4619      	mov	r1, r3
 800b91a:	482f      	ldr	r0, [pc, #188]	; (800b9d8 <RxProtocol+0xcc>)
 800b91c:	f000 fb70 	bl	800c000 <sx126x_clear_irq_status>
 800b920:	4603      	mov	r3, r0
 800b922:	73fb      	strb	r3, [r7, #15]
    command_status = sx126x_set_rx(&hspi, 3000);
 800b924:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800b928:	482b      	ldr	r0, [pc, #172]	; (800b9d8 <RxProtocol+0xcc>)
 800b92a:	f000 f8dd 	bl	800bae8 <sx126x_set_rx>
 800b92e:	4603      	mov	r3, r0
 800b930:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(1400);
 800b932:	f44f 60af 	mov.w	r0, #1400	; 0x578
 800b936:	f000 fde7 	bl	800c508 <HAL_Delay>

    sx126x_irq_mask_t irq;
    command_status = sx126x_get_irq_status(&hspi, &irq); //reading the irq into irq
 800b93a:	f107 030c 	add.w	r3, r7, #12
 800b93e:	4619      	mov	r1, r3
 800b940:	4825      	ldr	r0, [pc, #148]	; (800b9d8 <RxProtocol+0xcc>)
 800b942:	f000 fb2b 	bl	800bf9c <sx126x_get_irq_status>
 800b946:	4603      	mov	r3, r0
 800b948:	73fb      	strb	r3, [r7, #15]
    do {
        command_status = sx126x_get_irq_status(&hspi, &irq); //reading the irq into irq
 800b94a:	f107 030c 	add.w	r3, r7, #12
 800b94e:	4619      	mov	r1, r3
 800b950:	4821      	ldr	r0, [pc, #132]	; (800b9d8 <RxProtocol+0xcc>)
 800b952:	f000 fb23 	bl	800bf9c <sx126x_get_irq_status>
 800b956:	4603      	mov	r3, r0
 800b958:	73fb      	strb	r3, [r7, #15]
    } while ( (!(irq & SX126X_IRQ_RX_DONE)) && (!(irq & SX126X_IRQ_TIMEOUT)) );
 800b95a:	89bb      	ldrh	r3, [r7, #12]
 800b95c:	f003 0302 	and.w	r3, r3, #2
 800b960:	2b00      	cmp	r3, #0
 800b962:	d104      	bne.n	800b96e <RxProtocol+0x62>
 800b964:	89bb      	ldrh	r3, [r7, #12]
 800b966:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d0ed      	beq.n	800b94a <RxProtocol+0x3e>

    if (irq & SX126X_IRQ_TIMEOUT) {
 800b96e:	89bb      	ldrh	r3, [r7, #12]
 800b970:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b974:	2b00      	cmp	r3, #0
 800b976:	d005      	beq.n	800b984 <RxProtocol+0x78>
        //transmitBuffer("RX TIMEOUT!");
        sx126x_clear_irq_status(&hspi, SX126X_IRQ_TIMEOUT);
 800b978:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b97c:	4816      	ldr	r0, [pc, #88]	; (800b9d8 <RxProtocol+0xcc>)
 800b97e:	f000 fb3f 	bl	800c000 <sx126x_clear_irq_status>
                //transmitBuffer("----- RECEIVED DATA -----");
                //transmitBuffer(buffer_received);
            }
        }
    }
}
 800b982:	e022      	b.n	800b9ca <RxProtocol+0xbe>
        if (irq & SX126X_IRQ_HEADER_ERROR || irq & SX126X_IRQ_CRC_ERROR) {
 800b984:	89bb      	ldrh	r3, [r7, #12]
 800b986:	f003 0320 	and.w	r3, r3, #32
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d104      	bne.n	800b998 <RxProtocol+0x8c>
 800b98e:	89bb      	ldrh	r3, [r7, #12]
 800b990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b994:	2b00      	cmp	r3, #0
 800b996:	d004      	beq.n	800b9a2 <RxProtocol+0x96>
            sx126x_clear_irq_status(&hspi, SX126X_IRQ_HEADER_ERROR | SX126X_IRQ_CRC_ERROR);
 800b998:	2160      	movs	r1, #96	; 0x60
 800b99a:	480f      	ldr	r0, [pc, #60]	; (800b9d8 <RxProtocol+0xcc>)
 800b99c:	f000 fb30 	bl	800c000 <sx126x_clear_irq_status>
}
 800b9a0:	e013      	b.n	800b9ca <RxProtocol+0xbe>
        } else if (irq & SX126X_IRQ_RX_DONE) {
 800b9a2:	89bb      	ldrh	r3, [r7, #12]
 800b9a4:	f003 0302 	and.w	r3, r3, #2
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d00e      	beq.n	800b9ca <RxProtocol+0xbe>
            command_status = sx126x_read_buffer(&hspi, buffer_received);
 800b9ac:	6879      	ldr	r1, [r7, #4]
 800b9ae:	480a      	ldr	r0, [pc, #40]	; (800b9d8 <RxProtocol+0xcc>)
 800b9b0:	f000 f9f8 	bl	800bda4 <sx126x_read_buffer>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	73fb      	strb	r3, [r7, #15]
            if (command_status != SX126X_STATUS_OK) {
 800b9b8:	7bfb      	ldrb	r3, [r7, #15]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d105      	bne.n	800b9ca <RxProtocol+0xbe>
                sx126x_get_irq_status(&hspi, &irq);
 800b9be:	f107 030c 	add.w	r3, r7, #12
 800b9c2:	4619      	mov	r1, r3
 800b9c4:	4804      	ldr	r0, [pc, #16]	; (800b9d8 <RxProtocol+0xcc>)
 800b9c6:	f000 fae9 	bl	800bf9c <sx126x_get_irq_status>
}
 800b9ca:	bf00      	nop
 800b9cc:	3710      	adds	r7, #16
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}
 800b9d2:	bf00      	nop
 800b9d4:	200000ca 	.word	0x200000ca
 800b9d8:	200007e0 	.word	0x200007e0

0800b9dc <sx126x_set_standby>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_SLEEP, 0, 0 );
}

sx126x_status_t sx126x_set_standby( const void* context, const sx126x_standby_cfg_t cfg )
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b086      	sub	sp, #24
 800b9e0:	af02      	add	r7, sp, #8
 800b9e2:	6078      	str	r0, [r7, #4]
 800b9e4:	460b      	mov	r3, r1
 800b9e6:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_STANDBY] = { 0 };
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_STANDBY;
 800b9ec:	2380      	movs	r3, #128	; 0x80
 800b9ee:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) cfg;
 800b9f0:	78fb      	ldrb	r3, [r7, #3]
 800b9f2:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_STANDBY, 0, 0 );
 800b9f4:	f107 010c 	add.w	r1, r7, #12
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	9300      	str	r3, [sp, #0]
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	2202      	movs	r2, #2
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	f7ff fc3f 	bl	800b284 <sx126x_hal_write>
 800ba06:	4603      	mov	r3, r0
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	3710      	adds	r7, #16
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}

0800ba10 <sx126x_set_tx>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_FS, 0, 0 );
}

sx126x_status_t sx126x_set_tx( const void* context, const uint32_t timeout_in_ms , uint8_t lora_data_length)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b086      	sub	sp, #24
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	60f8      	str	r0, [r7, #12]
 800ba18:	60b9      	str	r1, [r7, #8]
 800ba1a:	4613      	mov	r3, r2
 800ba1c:	71fb      	strb	r3, [r7, #7]
    if (packet_type == SX126X_PKT_TYPE_LORA) {
 800ba1e:	4b1b      	ldr	r3, [pc, #108]	; (800ba8c <sx126x_set_tx+0x7c>)
 800ba20:	781b      	ldrb	r3, [r3, #0]
 800ba22:	2b01      	cmp	r3, #1
 800ba24:	d11e      	bne.n	800ba64 <sx126x_set_tx+0x54>
        struct sx126x_pkt_params_lora_s *lora_params = malloc(sizeof(sx126x_pkt_params_lora_t));
 800ba26:	2006      	movs	r0, #6
 800ba28:	f00e ffee 	bl	801aa08 <malloc>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	617b      	str	r3, [r7, #20]
        lora_params->preamble_len_in_symb=pkt_preamble_len;
 800ba30:	4b17      	ldr	r3, [pc, #92]	; (800ba90 <sx126x_set_tx+0x80>)
 800ba32:	881a      	ldrh	r2, [r3, #0]
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	801a      	strh	r2, [r3, #0]
        lora_params->header_type=header_type;
 800ba38:	4b16      	ldr	r3, [pc, #88]	; (800ba94 <sx126x_set_tx+0x84>)
 800ba3a:	781a      	ldrb	r2, [r3, #0]
 800ba3c:	697b      	ldr	r3, [r7, #20]
 800ba3e:	709a      	strb	r2, [r3, #2]
        lora_params->pld_len_in_bytes=lora_data_length;
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	79fa      	ldrb	r2, [r7, #7]
 800ba44:	70da      	strb	r2, [r3, #3]
        lora_params->crc_is_on=crc_is_on;
 800ba46:	4b14      	ldr	r3, [pc, #80]	; (800ba98 <sx126x_set_tx+0x88>)
 800ba48:	781a      	ldrb	r2, [r3, #0]
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	711a      	strb	r2, [r3, #4]
        lora_params->invert_iq_is_on=invert_iq_is_on;
 800ba4e:	4b13      	ldr	r3, [pc, #76]	; (800ba9c <sx126x_set_tx+0x8c>)
 800ba50:	781a      	ldrb	r2, [r3, #0]
 800ba52:	697b      	ldr	r3, [r7, #20]
 800ba54:	715a      	strb	r2, [r3, #5]
        sx126x_set_lora_pkt_params(&hspi, lora_params);
 800ba56:	6979      	ldr	r1, [r7, #20]
 800ba58:	4811      	ldr	r0, [pc, #68]	; (800baa0 <sx126x_set_tx+0x90>)
 800ba5a:	f000 fbdd 	bl	800c218 <sx126x_set_lora_pkt_params>
        free(lora_params);
 800ba5e:	6978      	ldr	r0, [r7, #20]
 800ba60:	f00e ffda 	bl	801aa18 <free>
    }

    if( timeout_in_ms > SX126X_MAX_TIMEOUT_IN_MS )
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ba6a:	d301      	bcc.n	800ba70 <sx126x_set_tx+0x60>
    {
        return SX126X_STATUS_UNKNOWN_VALUE;
 800ba6c:	2302      	movs	r3, #2
 800ba6e:	e008      	b.n	800ba82 <sx126x_set_tx+0x72>
    }

    const uint32_t timeout_in_rtc_step = sx126x_convert_timeout_in_ms_to_rtc_step( timeout_in_ms );
 800ba70:	68b8      	ldr	r0, [r7, #8]
 800ba72:	f000 fcfb 	bl	800c46c <sx126x_convert_timeout_in_ms_to_rtc_step>
 800ba76:	6138      	str	r0, [r7, #16]

    return sx126x_set_tx_with_timeout_in_rtc_step( context, timeout_in_rtc_step );
 800ba78:	6939      	ldr	r1, [r7, #16]
 800ba7a:	68f8      	ldr	r0, [r7, #12]
 800ba7c:	f000 f812 	bl	800baa4 <sx126x_set_tx_with_timeout_in_rtc_step>
 800ba80:	4603      	mov	r3, r0
}
 800ba82:	4618      	mov	r0, r3
 800ba84:	3718      	adds	r7, #24
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}
 800ba8a:	bf00      	nop
 800ba8c:	200000b4 	.word	0x200000b4
 800ba90:	200000c4 	.word	0x200000c4
 800ba94:	2000083c 	.word	0x2000083c
 800ba98:	200000c7 	.word	0x200000c7
 800ba9c:	2000083d 	.word	0x2000083d
 800baa0:	200007e0 	.word	0x200007e0

0800baa4 <sx126x_set_tx_with_timeout_in_rtc_step>:

sx126x_status_t sx126x_set_tx_with_timeout_in_rtc_step( const void* context, const uint32_t timeout_in_rtc_step )
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b086      	sub	sp, #24
 800baa8:	af02      	add	r7, sp, #8
 800baaa:	6078      	str	r0, [r7, #4]
 800baac:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_TX] = { 0 };
 800baae:	2300      	movs	r3, #0
 800bab0:	60fb      	str	r3, [r7, #12]

    buf[0] = SX126X_SET_TX;
 800bab2:	2383      	movs	r3, #131	; 0x83
 800bab4:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t )( timeout_in_rtc_step >> 16 );
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	0c1b      	lsrs	r3, r3, #16
 800baba:	b2db      	uxtb	r3, r3
 800babc:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout_in_rtc_step >> 8 );
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	0a1b      	lsrs	r3, r3, #8
 800bac2:	b2db      	uxtb	r3, r3
 800bac4:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout_in_rtc_step >> 0 );
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	b2db      	uxtb	r3, r3
 800baca:	73fb      	strb	r3, [r7, #15]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX, 0, 0 );
 800bacc:	f107 010c 	add.w	r1, r7, #12
 800bad0:	2300      	movs	r3, #0
 800bad2:	9300      	str	r3, [sp, #0]
 800bad4:	2300      	movs	r3, #0
 800bad6:	2204      	movs	r2, #4
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f7ff fbd3 	bl	800b284 <sx126x_hal_write>
 800bade:	4603      	mov	r3, r0
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	3710      	adds	r7, #16
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}

0800bae8 <sx126x_set_rx>:

sx126x_status_t sx126x_set_rx( const void* context, const uint32_t timeout_in_ms )
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b084      	sub	sp, #16
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
 800baf0:	6039      	str	r1, [r7, #0]
    if( timeout_in_ms > SX126X_MAX_TIMEOUT_IN_MS )
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800baf8:	d301      	bcc.n	800bafe <sx126x_set_rx+0x16>
    {
        return SX126X_STATUS_UNKNOWN_VALUE;
 800bafa:	2302      	movs	r3, #2
 800bafc:	e008      	b.n	800bb10 <sx126x_set_rx+0x28>
    }

    const uint32_t timeout_in_rtc_step = sx126x_convert_timeout_in_ms_to_rtc_step( timeout_in_ms );
 800bafe:	6838      	ldr	r0, [r7, #0]
 800bb00:	f000 fcb4 	bl	800c46c <sx126x_convert_timeout_in_ms_to_rtc_step>
 800bb04:	60f8      	str	r0, [r7, #12]

    return sx126x_set_rx_with_timeout_in_rtc_step( context, timeout_in_rtc_step );
 800bb06:	68f9      	ldr	r1, [r7, #12]
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f000 f805 	bl	800bb18 <sx126x_set_rx_with_timeout_in_rtc_step>
 800bb0e:	4603      	mov	r3, r0
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3710      	adds	r7, #16
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}

0800bb18 <sx126x_set_rx_with_timeout_in_rtc_step>:

sx126x_status_t sx126x_set_rx_with_timeout_in_rtc_step( const void* context, const uint32_t timeout_in_rtc_step )
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b086      	sub	sp, #24
 800bb1c:	af02      	add	r7, sp, #8
 800bb1e:	6078      	str	r0, [r7, #4]
 800bb20:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_RX] = { 0 };
 800bb22:	2300      	movs	r3, #0
 800bb24:	60fb      	str	r3, [r7, #12]

    buf[0] = SX126X_SET_RX;
 800bb26:	2382      	movs	r3, #130	; 0x82
 800bb28:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t )( timeout_in_rtc_step >> 16 );
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	0c1b      	lsrs	r3, r3, #16
 800bb2e:	b2db      	uxtb	r3, r3
 800bb30:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout_in_rtc_step >> 8 );
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	0a1b      	lsrs	r3, r3, #8
 800bb36:	b2db      	uxtb	r3, r3
 800bb38:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout_in_rtc_step >> 0 );
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	b2db      	uxtb	r3, r3
 800bb3e:	73fb      	strb	r3, [r7, #15]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RX, 0, 0 );
 800bb40:	f107 010c 	add.w	r1, r7, #12
 800bb44:	2300      	movs	r3, #0
 800bb46:	9300      	str	r3, [sp, #0]
 800bb48:	2300      	movs	r3, #0
 800bb4a:	2204      	movs	r2, #4
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f7ff fb99 	bl	800b284 <sx126x_hal_write>
 800bb52:	4603      	mov	r3, r0
}
 800bb54:	4618      	mov	r0, r3
 800bb56:	3710      	adds	r7, #16
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd80      	pop	{r7, pc}

0800bb5c <sx126x_stop_timer_on_preamble>:

sx126x_status_t sx126x_stop_timer_on_preamble( const void* context, const bool enable )
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b086      	sub	sp, #24
 800bb60:	af02      	add	r7, sp, #8
 800bb62:	6078      	str	r0, [r7, #4]
 800bb64:	460b      	mov	r3, r1
 800bb66:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_STOP_TIMER_ON_PREAMBLE] = { 0 };
 800bb68:	2300      	movs	r3, #0
 800bb6a:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_STOP_TIMER_ON_PREAMBLE;
 800bb6c:	239f      	movs	r3, #159	; 0x9f
 800bb6e:	733b      	strb	r3, [r7, #12]

    buf[1] = ( enable == true ) ? 1 : 0;
 800bb70:	78fb      	ldrb	r3, [r7, #3]
 800bb72:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_STOP_TIMER_ON_PREAMBLE, 0, 0 );
 800bb74:	f107 010c 	add.w	r1, r7, #12
 800bb78:	2300      	movs	r3, #0
 800bb7a:	9300      	str	r3, [sp, #0]
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	2202      	movs	r2, #2
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	f7ff fb7f 	bl	800b284 <sx126x_hal_write>
 800bb86:	4603      	mov	r3, r0
}
 800bb88:	4618      	mov	r0, r3
 800bb8a:	3710      	adds	r7, #16
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bd80      	pop	{r7, pc}

0800bb90 <sx126x_set_reg_mode>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_INFINITE_PREAMBLE, 0, 0 );
}

sx126x_status_t sx126x_set_reg_mode( const void* context, const sx126x_reg_mod_t mode )
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b086      	sub	sp, #24
 800bb94:	af02      	add	r7, sp, #8
 800bb96:	6078      	str	r0, [r7, #4]
 800bb98:	460b      	mov	r3, r1
 800bb9a:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_REGULATOR_MODE] = { 0 };
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_REGULATOR_MODE;
 800bba0:	2396      	movs	r3, #150	; 0x96
 800bba2:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) mode;
 800bba4:	78fb      	ldrb	r3, [r7, #3]
 800bba6:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_REGULATOR_MODE, 0, 0 );
 800bba8:	f107 010c 	add.w	r1, r7, #12
 800bbac:	2300      	movs	r3, #0
 800bbae:	9300      	str	r3, [sp, #0]
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	2202      	movs	r2, #2
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	f7ff fb65 	bl	800b284 <sx126x_hal_write>
 800bbba:	4603      	mov	r3, r0
}
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	3710      	adds	r7, #16
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}

0800bbc4 <sx126x_cal>:

sx126x_status_t sx126x_cal( const void* context, const sx126x_cal_mask_t param )
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b086      	sub	sp, #24
 800bbc8:	af02      	add	r7, sp, #8
 800bbca:	6078      	str	r0, [r7, #4]
 800bbcc:	460b      	mov	r3, r1
 800bbce:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_CALIBRATE] = { 0 };
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_CALIBRATE;
 800bbd4:	2389      	movs	r3, #137	; 0x89
 800bbd6:	733b      	strb	r3, [r7, #12]

    buf[1] = param;
 800bbd8:	78fb      	ldrb	r3, [r7, #3]
 800bbda:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE, 0, 0 );
 800bbdc:	f107 010c 	add.w	r1, r7, #12
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	9300      	str	r3, [sp, #0]
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	2202      	movs	r2, #2
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	f7ff fb4b 	bl	800b284 <sx126x_hal_write>
 800bbee:	4603      	mov	r3, r0
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	3710      	adds	r7, #16
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}

0800bbf8 <sx126x_cal_img_hex>:

sx126x_status_t sx126x_cal_img_hex( const void* context, const uint8_t low_freq, const uint8_t high_freq)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b086      	sub	sp, #24
 800bbfc:	af02      	add	r7, sp, #8
 800bbfe:	6078      	str	r0, [r7, #4]
 800bc00:	460b      	mov	r3, r1
 800bc02:	70fb      	strb	r3, [r7, #3]
 800bc04:	4613      	mov	r3, r2
 800bc06:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_CALIBRATE_IMAGE] = { 0 };
 800bc08:	4b0c      	ldr	r3, [pc, #48]	; (800bc3c <sx126x_cal_img_hex+0x44>)
 800bc0a:	881b      	ldrh	r3, [r3, #0]
 800bc0c:	81bb      	strh	r3, [r7, #12]
 800bc0e:	2300      	movs	r3, #0
 800bc10:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_CALIBRATE_IMAGE;
 800bc12:	2398      	movs	r3, #152	; 0x98
 800bc14:	733b      	strb	r3, [r7, #12]
    buf[1] = low_freq;
 800bc16:	78fb      	ldrb	r3, [r7, #3]
 800bc18:	737b      	strb	r3, [r7, #13]
    buf[2] = high_freq;
 800bc1a:	78bb      	ldrb	r3, [r7, #2]
 800bc1c:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE_IMAGE, 0, 0 );
 800bc1e:	f107 010c 	add.w	r1, r7, #12
 800bc22:	2300      	movs	r3, #0
 800bc24:	9300      	str	r3, [sp, #0]
 800bc26:	2300      	movs	r3, #0
 800bc28:	2203      	movs	r2, #3
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f7ff fb2a 	bl	800b284 <sx126x_hal_write>
 800bc30:	4603      	mov	r3, r0
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3710      	adds	r7, #16
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}
 800bc3a:	bf00      	nop
 800bc3c:	0802286c 	.word	0x0802286c

0800bc40 <sx126x_set_pa_cfg>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE_IMAGE, 0, 0 );
}

sx126x_status_t sx126x_set_pa_cfg( const void* context, const sx126x_pa_cfg_params_t* params )
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b086      	sub	sp, #24
 800bc44:	af02      	add	r7, sp, #8
 800bc46:	6078      	str	r0, [r7, #4]
 800bc48:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_PA_CFG] = { 0 };
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	60bb      	str	r3, [r7, #8]
 800bc4e:	2300      	movs	r3, #0
 800bc50:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_PA_CFG;
 800bc52:	2395      	movs	r3, #149	; 0x95
 800bc54:	723b      	strb	r3, [r7, #8]
    buf[1] = params->pa_duty_cycle;
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	781b      	ldrb	r3, [r3, #0]
 800bc5a:	727b      	strb	r3, [r7, #9]
    buf[2] = params->hp_max;
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	785b      	ldrb	r3, [r3, #1]
 800bc60:	72bb      	strb	r3, [r7, #10]
    buf[3] = params->device_sel;
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	789b      	ldrb	r3, [r3, #2]
 800bc66:	72fb      	strb	r3, [r7, #11]
    buf[4] = params->pa_lut;
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	78db      	ldrb	r3, [r3, #3]
 800bc6c:	733b      	strb	r3, [r7, #12]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PA_CFG, 0, 0 );
 800bc6e:	f107 0108 	add.w	r1, r7, #8
 800bc72:	2300      	movs	r3, #0
 800bc74:	9300      	str	r3, [sp, #0]
 800bc76:	2300      	movs	r3, #0
 800bc78:	2205      	movs	r2, #5
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f7ff fb02 	bl	800b284 <sx126x_hal_write>
 800bc80:	4603      	mov	r3, r0
}
 800bc82:	4618      	mov	r0, r3
 800bc84:	3710      	adds	r7, #16
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}

0800bc8a <sx126x_set_rx_tx_fallback_mode>:

sx126x_status_t sx126x_set_rx_tx_fallback_mode( const void* context, const sx126x_fallback_modes_t fallback_mode )
{
 800bc8a:	b580      	push	{r7, lr}
 800bc8c:	b086      	sub	sp, #24
 800bc8e:	af02      	add	r7, sp, #8
 800bc90:	6078      	str	r0, [r7, #4]
 800bc92:	460b      	mov	r3, r1
 800bc94:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_RX_TX_FALLBACK_MODE] = { 0 };
 800bc96:	2300      	movs	r3, #0
 800bc98:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_RX_TX_FALLBACK_MODE;
 800bc9a:	2393      	movs	r3, #147	; 0x93
 800bc9c:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) fallback_mode;
 800bc9e:	78fb      	ldrb	r3, [r7, #3]
 800bca0:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RX_TX_FALLBACK_MODE, 0, 0 );
 800bca2:	f107 010c 	add.w	r1, r7, #12
 800bca6:	2300      	movs	r3, #0
 800bca8:	9300      	str	r3, [sp, #0]
 800bcaa:	2300      	movs	r3, #0
 800bcac:	2202      	movs	r2, #2
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	f7ff fae8 	bl	800b284 <sx126x_hal_write>
 800bcb4:	4603      	mov	r3, r0
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	3710      	adds	r7, #16
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}
	...

0800bcc0 <sx126x_write_register>:
// Registers and buffer Access
//

sx126x_status_t sx126x_write_register( const void* context, const uint16_t address, const uint8_t* buffer,
                                       const uint8_t size )
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b088      	sub	sp, #32
 800bcc4:	af02      	add	r7, sp, #8
 800bcc6:	60f8      	str	r0, [r7, #12]
 800bcc8:	607a      	str	r2, [r7, #4]
 800bcca:	461a      	mov	r2, r3
 800bccc:	460b      	mov	r3, r1
 800bcce:	817b      	strh	r3, [r7, #10]
 800bcd0:	4613      	mov	r3, r2
 800bcd2:	727b      	strb	r3, [r7, #9]
    uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = { 0 };
 800bcd4:	4b0e      	ldr	r3, [pc, #56]	; (800bd10 <sx126x_write_register+0x50>)
 800bcd6:	881b      	ldrh	r3, [r3, #0]
 800bcd8:	82bb      	strh	r3, [r7, #20]
 800bcda:	2300      	movs	r3, #0
 800bcdc:	75bb      	strb	r3, [r7, #22]

    buf[0] = SX126X_WRITE_REGISTER;
 800bcde:	230d      	movs	r3, #13
 800bce0:	753b      	strb	r3, [r7, #20]

    buf[1] = ( uint8_t )( address >> 8 );
 800bce2:	897b      	ldrh	r3, [r7, #10]
 800bce4:	0a1b      	lsrs	r3, r3, #8
 800bce6:	b29b      	uxth	r3, r3
 800bce8:	b2db      	uxtb	r3, r3
 800bcea:	757b      	strb	r3, [r7, #21]
    buf[2] = ( uint8_t )( address >> 0 );
 800bcec:	897b      	ldrh	r3, [r7, #10]
 800bcee:	b2db      	uxtb	r3, r3
 800bcf0:	75bb      	strb	r3, [r7, #22]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_REGISTER, buffer, size );
 800bcf2:	7a7b      	ldrb	r3, [r7, #9]
 800bcf4:	b29b      	uxth	r3, r3
 800bcf6:	f107 0114 	add.w	r1, r7, #20
 800bcfa:	9300      	str	r3, [sp, #0]
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2203      	movs	r2, #3
 800bd00:	68f8      	ldr	r0, [r7, #12]
 800bd02:	f7ff fabf 	bl	800b284 <sx126x_hal_write>
 800bd06:	4603      	mov	r3, r0
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3718      	adds	r7, #24
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}
 800bd10:	0802286c 	.word	0x0802286c

0800bd14 <sx126x_read_register>:

sx126x_status_t sx126x_read_register( const void* context, const uint16_t address, uint8_t* buffer, const uint8_t size )
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b088      	sub	sp, #32
 800bd18:	af02      	add	r7, sp, #8
 800bd1a:	60f8      	str	r0, [r7, #12]
 800bd1c:	607a      	str	r2, [r7, #4]
 800bd1e:	461a      	mov	r2, r3
 800bd20:	460b      	mov	r3, r1
 800bd22:	817b      	strh	r3, [r7, #10]
 800bd24:	4613      	mov	r3, r2
 800bd26:	727b      	strb	r3, [r7, #9]
    uint8_t         buf[SX126X_SIZE_READ_REGISTER] = { 0 };
 800bd28:	2300      	movs	r3, #0
 800bd2a:	613b      	str	r3, [r7, #16]
    sx126x_status_t status                         = SX126X_STATUS_ERROR;
 800bd2c:	2303      	movs	r3, #3
 800bd2e:	75fb      	strb	r3, [r7, #23]

    buf[0] = SX126X_READ_REGISTER;
 800bd30:	231d      	movs	r3, #29
 800bd32:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t )( address >> 8 );
 800bd34:	897b      	ldrh	r3, [r7, #10]
 800bd36:	0a1b      	lsrs	r3, r3, #8
 800bd38:	b29b      	uxth	r3, r3
 800bd3a:	b2db      	uxtb	r3, r3
 800bd3c:	747b      	strb	r3, [r7, #17]
    buf[2] = ( uint8_t )( address >> 0 );
 800bd3e:	897b      	ldrh	r3, [r7, #10]
 800bd40:	b2db      	uxtb	r3, r3
 800bd42:	74bb      	strb	r3, [r7, #18]

    status = ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_READ_REGISTER, buffer, size );
 800bd44:	f107 0110 	add.w	r1, r7, #16
 800bd48:	7a7b      	ldrb	r3, [r7, #9]
 800bd4a:	9300      	str	r3, [sp, #0]
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2204      	movs	r2, #4
 800bd50:	68f8      	ldr	r0, [r7, #12]
 800bd52:	f7ff fad9 	bl	800b308 <sx126x_hal_read>
 800bd56:	4603      	mov	r3, r0
 800bd58:	75fb      	strb	r3, [r7, #23]

    return status;
 800bd5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	3718      	adds	r7, #24
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}

0800bd64 <sx126x_write_buffer>:

sx126x_status_t sx126x_write_buffer( const void* context, const uint8_t buffer_offset, const uint8_t* buffer,
                                     const uint8_t size )
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b088      	sub	sp, #32
 800bd68:	af02      	add	r7, sp, #8
 800bd6a:	60f8      	str	r0, [r7, #12]
 800bd6c:	607a      	str	r2, [r7, #4]
 800bd6e:	461a      	mov	r2, r3
 800bd70:	460b      	mov	r3, r1
 800bd72:	72fb      	strb	r3, [r7, #11]
 800bd74:	4613      	mov	r3, r2
 800bd76:	72bb      	strb	r3, [r7, #10]
    uint8_t buf[SX126X_SIZE_WRITE_BUFFER] = { 0 };
 800bd78:	2300      	movs	r3, #0
 800bd7a:	82bb      	strh	r3, [r7, #20]

    buf[0] = SX126X_WRITE_BUFFER;
 800bd7c:	230e      	movs	r3, #14
 800bd7e:	753b      	strb	r3, [r7, #20]

    buf[1] = buffer_offset;
 800bd80:	7afb      	ldrb	r3, [r7, #11]
 800bd82:	757b      	strb	r3, [r7, #21]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_BUFFER, buffer, size );
 800bd84:	7abb      	ldrb	r3, [r7, #10]
 800bd86:	b29b      	uxth	r3, r3
 800bd88:	f107 0114 	add.w	r1, r7, #20
 800bd8c:	9300      	str	r3, [sp, #0]
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2202      	movs	r2, #2
 800bd92:	68f8      	ldr	r0, [r7, #12]
 800bd94:	f7ff fa76 	bl	800b284 <sx126x_hal_write>
 800bd98:	4603      	mov	r3, r0
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	3718      	adds	r7, #24
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}
	...

0800bda4 <sx126x_read_buffer>:

sx126x_status_t sx126x_read_buffer( const void* context, uint8_t* buffer)
{
 800bda4:	b5b0      	push	{r4, r5, r7, lr}
 800bda6:	b08c      	sub	sp, #48	; 0x30
 800bda8:	af02      	add	r7, sp, #8
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	6039      	str	r1, [r7, #0]
 800bdae:	466b      	mov	r3, sp
 800bdb0:	461d      	mov	r5, r3
    sx126x_status_t status                       = SX126X_STATUS_ERROR;
 800bdb2:	2303      	movs	r3, #3
 800bdb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	sx126x_rx_buffer_status_t buffer_status;
    sx126x_get_rx_buffer_status(&hspi, &buffer_status);
 800bdb8:	f107 030c 	add.w	r3, r7, #12
 800bdbc:	4619      	mov	r1, r3
 800bdbe:	4854      	ldr	r0, [pc, #336]	; (800bf10 <sx126x_read_buffer+0x16c>)
 800bdc0:	f000 fb02 	bl	800c3c8 <sx126x_get_rx_buffer_status>
    uint8_t size = buffer_status.pld_len_in_bytes;
 800bdc4:	7b3b      	ldrb	r3, [r7, #12]
 800bdc6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    uint8_t offset = buffer_status.buffer_start_pointer;
 800bdca:	7b7b      	ldrb	r3, [r7, #13]
 800bdcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    uint8_t received_buf[size + 1];
 800bdd0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bdd4:	1c5c      	adds	r4, r3, #1
 800bdd6:	1e63      	subs	r3, r4, #1
 800bdd8:	61fb      	str	r3, [r7, #28]
 800bdda:	4623      	mov	r3, r4
 800bddc:	4618      	mov	r0, r3
 800bdde:	f04f 0100 	mov.w	r1, #0
 800bde2:	f04f 0200 	mov.w	r2, #0
 800bde6:	f04f 0300 	mov.w	r3, #0
 800bdea:	00cb      	lsls	r3, r1, #3
 800bdec:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800bdf0:	00c2      	lsls	r2, r0, #3
 800bdf2:	4623      	mov	r3, r4
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f04f 0100 	mov.w	r1, #0
 800bdfa:	f04f 0200 	mov.w	r2, #0
 800bdfe:	f04f 0300 	mov.w	r3, #0
 800be02:	00cb      	lsls	r3, r1, #3
 800be04:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800be08:	00c2      	lsls	r2, r0, #3
 800be0a:	4623      	mov	r3, r4
 800be0c:	3307      	adds	r3, #7
 800be0e:	08db      	lsrs	r3, r3, #3
 800be10:	00db      	lsls	r3, r3, #3
 800be12:	ebad 0d03 	sub.w	sp, sp, r3
 800be16:	ab02      	add	r3, sp, #8
 800be18:	3300      	adds	r3, #0
 800be1a:	61bb      	str	r3, [r7, #24]
    uint8_t cmd_buf[size + 1 + SX126X_OFFSET_READ_BUFFER];
 800be1c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800be20:	1cdc      	adds	r4, r3, #3
 800be22:	1e63      	subs	r3, r4, #1
 800be24:	617b      	str	r3, [r7, #20]
 800be26:	4623      	mov	r3, r4
 800be28:	4618      	mov	r0, r3
 800be2a:	f04f 0100 	mov.w	r1, #0
 800be2e:	f04f 0200 	mov.w	r2, #0
 800be32:	f04f 0300 	mov.w	r3, #0
 800be36:	00cb      	lsls	r3, r1, #3
 800be38:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800be3c:	00c2      	lsls	r2, r0, #3
 800be3e:	4623      	mov	r3, r4
 800be40:	4618      	mov	r0, r3
 800be42:	f04f 0100 	mov.w	r1, #0
 800be46:	f04f 0200 	mov.w	r2, #0
 800be4a:	f04f 0300 	mov.w	r3, #0
 800be4e:	00cb      	lsls	r3, r1, #3
 800be50:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800be54:	00c2      	lsls	r2, r0, #3
 800be56:	4623      	mov	r3, r4
 800be58:	3307      	adds	r3, #7
 800be5a:	08db      	lsrs	r3, r3, #3
 800be5c:	00db      	lsls	r3, r3, #3
 800be5e:	ebad 0d03 	sub.w	sp, sp, r3
 800be62:	ab02      	add	r3, sp, #8
 800be64:	3300      	adds	r3, #0
 800be66:	613b      	str	r3, [r7, #16]

    for (uint8_t i=2; i<size+1+SX126X_OFFSET_READ_BUFFER; i++){
 800be68:	2302      	movs	r3, #2
 800be6a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800be6e:	e009      	b.n	800be84 <sx126x_read_buffer+0xe0>
        cmd_buf[i] = 0x00;
 800be70:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800be74:	693a      	ldr	r2, [r7, #16]
 800be76:	2100      	movs	r1, #0
 800be78:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i=2; i<size+1+SX126X_OFFSET_READ_BUFFER; i++){
 800be7a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800be7e:	3301      	adds	r3, #1
 800be80:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800be84:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800be88:	1c9a      	adds	r2, r3, #2
 800be8a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800be8e:	429a      	cmp	r2, r3
 800be90:	daee      	bge.n	800be70 <sx126x_read_buffer+0xcc>
    }

    cmd_buf[0] = SX126X_READ_BUFFER;
 800be92:	693b      	ldr	r3, [r7, #16]
 800be94:	221e      	movs	r2, #30
 800be96:	701a      	strb	r2, [r3, #0]
    cmd_buf[1] = offset;
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800be9e:	705a      	strb	r2, [r3, #1]

    status = ( sx126x_status_t ) sx126x_hal_read( context, cmd_buf, SX126X_OFFSET_READ_BUFFER + size, received_buf,  SX126X_OFFSET_READ_BUFFER);
 800bea0:	6939      	ldr	r1, [r7, #16]
 800bea2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bea6:	b29b      	uxth	r3, r3
 800bea8:	3302      	adds	r3, #2
 800beaa:	b29a      	uxth	r2, r3
 800beac:	69bb      	ldr	r3, [r7, #24]
 800beae:	2002      	movs	r0, #2
 800beb0:	9000      	str	r0, [sp, #0]
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	f7ff fa28 	bl	800b308 <sx126x_hal_read>
 800beb8:	4603      	mov	r3, r0
 800beba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (status == SX126X_STATUS_OK) {
 800bebe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d11c      	bne.n	800bf00 <sx126x_read_buffer+0x15c>
        status = received_buf[0];
 800bec6:	69bb      	ldr	r3, [r7, #24]
 800bec8:	781b      	ldrb	r3, [r3, #0]
 800beca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        //CO U LD T R Y T O U SE SPRINTF
        for (uint8_t i=1; i<=size; i++){
 800bece:	2301      	movs	r3, #1
 800bed0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bed4:	e00e      	b.n	800bef4 <sx126x_read_buffer+0x150>
            buffer[i-1] = received_buf[i];
 800bed6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800beda:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bede:	3b01      	subs	r3, #1
 800bee0:	6839      	ldr	r1, [r7, #0]
 800bee2:	440b      	add	r3, r1
 800bee4:	69b9      	ldr	r1, [r7, #24]
 800bee6:	5c8a      	ldrb	r2, [r1, r2]
 800bee8:	701a      	strb	r2, [r3, #0]
        for (uint8_t i=1; i<=size; i++){
 800beea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800beee:	3301      	adds	r3, #1
 800bef0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bef4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800bef8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800befc:	429a      	cmp	r2, r3
 800befe:	d9ea      	bls.n	800bed6 <sx126x_read_buffer+0x132>
        }
    }
    //ADD FUCKING RETURN STATUS FROM RECEIVED_BUF[0]
    return status;
 800bf00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf04:	46ad      	mov	sp, r5
}
 800bf06:	4618      	mov	r0, r3
 800bf08:	3728      	adds	r7, #40	; 0x28
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bdb0      	pop	{r4, r5, r7, pc}
 800bf0e:	bf00      	nop
 800bf10:	200007e0 	.word	0x200007e0

0800bf14 <sx126x_set_dio_irq_params>:
//
// DIO and IRQ Control Functions
//
sx126x_status_t sx126x_set_dio_irq_params( const void* context, const uint16_t irq_mask, const uint16_t dio1_mask,
                                           const uint16_t dio2_mask, const uint16_t dio3_mask )
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b08a      	sub	sp, #40	; 0x28
 800bf18:	af02      	add	r7, sp, #8
 800bf1a:	60f8      	str	r0, [r7, #12]
 800bf1c:	4608      	mov	r0, r1
 800bf1e:	4611      	mov	r1, r2
 800bf20:	461a      	mov	r2, r3
 800bf22:	4603      	mov	r3, r0
 800bf24:	817b      	strh	r3, [r7, #10]
 800bf26:	460b      	mov	r3, r1
 800bf28:	813b      	strh	r3, [r7, #8]
 800bf2a:	4613      	mov	r3, r2
 800bf2c:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = { 0 };
 800bf2e:	2300      	movs	r3, #0
 800bf30:	617b      	str	r3, [r7, #20]
 800bf32:	f107 0318 	add.w	r3, r7, #24
 800bf36:	2200      	movs	r2, #0
 800bf38:	601a      	str	r2, [r3, #0]
 800bf3a:	711a      	strb	r2, [r3, #4]

    buf[0] = SX126X_SET_DIO_IRQ_PARAMS;
 800bf3c:	2308      	movs	r3, #8
 800bf3e:	753b      	strb	r3, [r7, #20]

    buf[1] = ( uint8_t )( irq_mask >> 8 );
 800bf40:	897b      	ldrh	r3, [r7, #10]
 800bf42:	0a1b      	lsrs	r3, r3, #8
 800bf44:	b29b      	uxth	r3, r3
 800bf46:	b2db      	uxtb	r3, r3
 800bf48:	757b      	strb	r3, [r7, #21]
    buf[2] = ( uint8_t )( irq_mask >> 0 );
 800bf4a:	897b      	ldrh	r3, [r7, #10]
 800bf4c:	b2db      	uxtb	r3, r3
 800bf4e:	75bb      	strb	r3, [r7, #22]

    buf[3] = ( uint8_t )( dio1_mask >> 8 );
 800bf50:	893b      	ldrh	r3, [r7, #8]
 800bf52:	0a1b      	lsrs	r3, r3, #8
 800bf54:	b29b      	uxth	r3, r3
 800bf56:	b2db      	uxtb	r3, r3
 800bf58:	75fb      	strb	r3, [r7, #23]
    buf[4] = ( uint8_t )( dio1_mask >> 0 );
 800bf5a:	893b      	ldrh	r3, [r7, #8]
 800bf5c:	b2db      	uxtb	r3, r3
 800bf5e:	763b      	strb	r3, [r7, #24]

    buf[5] = ( uint8_t )( dio2_mask >> 8 );
 800bf60:	88fb      	ldrh	r3, [r7, #6]
 800bf62:	0a1b      	lsrs	r3, r3, #8
 800bf64:	b29b      	uxth	r3, r3
 800bf66:	b2db      	uxtb	r3, r3
 800bf68:	767b      	strb	r3, [r7, #25]
    buf[6] = ( uint8_t )( dio2_mask >> 0 );
 800bf6a:	88fb      	ldrh	r3, [r7, #6]
 800bf6c:	b2db      	uxtb	r3, r3
 800bf6e:	76bb      	strb	r3, [r7, #26]

    buf[7] = ( uint8_t )( dio3_mask >> 8 );
 800bf70:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bf72:	0a1b      	lsrs	r3, r3, #8
 800bf74:	b29b      	uxth	r3, r3
 800bf76:	b2db      	uxtb	r3, r3
 800bf78:	76fb      	strb	r3, [r7, #27]
    buf[8] = ( uint8_t )( dio3_mask >> 0 );
 800bf7a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bf7c:	b2db      	uxtb	r3, r3
 800bf7e:	773b      	strb	r3, [r7, #28]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO_IRQ_PARAMS, 0, 0 );
 800bf80:	f107 0114 	add.w	r1, r7, #20
 800bf84:	2300      	movs	r3, #0
 800bf86:	9300      	str	r3, [sp, #0]
 800bf88:	2300      	movs	r3, #0
 800bf8a:	2209      	movs	r2, #9
 800bf8c:	68f8      	ldr	r0, [r7, #12]
 800bf8e:	f7ff f979 	bl	800b284 <sx126x_hal_write>
 800bf92:	4603      	mov	r3, r0
}
 800bf94:	4618      	mov	r0, r3
 800bf96:	3720      	adds	r7, #32
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bd80      	pop	{r7, pc}

0800bf9c <sx126x_get_irq_status>:

sx126x_status_t sx126x_get_irq_status( const void* context, sx126x_irq_mask_t* irq )
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b088      	sub	sp, #32
 800bfa0:	af02      	add	r7, sp, #8
 800bfa2:	6078      	str	r0, [r7, #4]
 800bfa4:	6039      	str	r1, [r7, #0]
    uint8_t         buf[SX126X_SIZE_GET_IRQ_STATUS]             = { 0x00 }; //0x00 is no operational, its just so that theyre equal
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	613b      	str	r3, [r7, #16]
    uint8_t         received_buf[sizeof( sx126x_irq_mask_t )+1] = { 0x00 };
 800bfaa:	4b14      	ldr	r3, [pc, #80]	; (800bffc <sx126x_get_irq_status+0x60>)
 800bfac:	881b      	ldrh	r3, [r3, #0]
 800bfae:	81bb      	strh	r3, [r7, #12]
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	73bb      	strb	r3, [r7, #14]
    sx126x_status_t status                                      = SX126X_STATUS_ERROR;
 800bfb4:	2303      	movs	r3, #3
 800bfb6:	75fb      	strb	r3, [r7, #23]

    buf[0] = SX126X_GET_IRQ_STATUS;
 800bfb8:	2312      	movs	r3, #18
 800bfba:	743b      	strb	r3, [r7, #16]

    status = ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_GET_IRQ_STATUS, received_buf,
 800bfbc:	f107 030c 	add.w	r3, r7, #12
 800bfc0:	f107 0110 	add.w	r1, r7, #16
 800bfc4:	2201      	movs	r2, #1
 800bfc6:	9200      	str	r2, [sp, #0]
 800bfc8:	2204      	movs	r2, #4
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f7ff f99c 	bl	800b308 <sx126x_hal_read>
 800bfd0:	4603      	mov	r3, r0
 800bfd2:	75fb      	strb	r3, [r7, #23]
                                                  SX126X_OFFSET_GET_IRQ_STATUS );

    if( status == SX126X_STATUS_OK )
 800bfd4:	7dfb      	ldrb	r3, [r7, #23]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d10b      	bne.n	800bff2 <sx126x_get_irq_status+0x56>
    {
        *irq = ( ( sx126x_irq_mask_t ) received_buf[1] << 8 ) | ( ( sx126x_irq_mask_t ) received_buf[2] << 0 );
 800bfda:	7b7b      	ldrb	r3, [r7, #13]
 800bfdc:	021b      	lsls	r3, r3, #8
 800bfde:	b21a      	sxth	r2, r3
 800bfe0:	7bbb      	ldrb	r3, [r7, #14]
 800bfe2:	b21b      	sxth	r3, r3
 800bfe4:	4313      	orrs	r3, r2
 800bfe6:	b21b      	sxth	r3, r3
 800bfe8:	b29a      	uxth	r2, r3
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	801a      	strh	r2, [r3, #0]
        status = received_buf[0]; //its the status
 800bfee:	7b3b      	ldrb	r3, [r7, #12]
 800bff0:	75fb      	strb	r3, [r7, #23]
    }

    return status;
 800bff2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bff4:	4618      	mov	r0, r3
 800bff6:	3718      	adds	r7, #24
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bd80      	pop	{r7, pc}
 800bffc:	0802286c 	.word	0x0802286c

0800c000 <sx126x_clear_irq_status>:

sx126x_status_t sx126x_clear_irq_status( const void* context, const sx126x_irq_mask_t irq_mask )
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b086      	sub	sp, #24
 800c004:	af02      	add	r7, sp, #8
 800c006:	6078      	str	r0, [r7, #4]
 800c008:	460b      	mov	r3, r1
 800c00a:	807b      	strh	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_CLR_IRQ_STATUS] = { 0 };
 800c00c:	4b0e      	ldr	r3, [pc, #56]	; (800c048 <sx126x_clear_irq_status+0x48>)
 800c00e:	881b      	ldrh	r3, [r3, #0]
 800c010:	81bb      	strh	r3, [r7, #12]
 800c012:	2300      	movs	r3, #0
 800c014:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_CLR_IRQ_STATUS;
 800c016:	2302      	movs	r3, #2
 800c018:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t )( irq_mask >> 8 );
 800c01a:	887b      	ldrh	r3, [r7, #2]
 800c01c:	0a1b      	lsrs	r3, r3, #8
 800c01e:	b29b      	uxth	r3, r3
 800c020:	b2db      	uxtb	r3, r3
 800c022:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( irq_mask >> 0 );
 800c024:	887b      	ldrh	r3, [r7, #2]
 800c026:	b2db      	uxtb	r3, r3
 800c028:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CLR_IRQ_STATUS, 0, 0 );
 800c02a:	f107 010c 	add.w	r1, r7, #12
 800c02e:	2300      	movs	r3, #0
 800c030:	9300      	str	r3, [sp, #0]
 800c032:	2300      	movs	r3, #0
 800c034:	2203      	movs	r2, #3
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f7ff f924 	bl	800b284 <sx126x_hal_write>
 800c03c:	4603      	mov	r3, r0
}
 800c03e:	4618      	mov	r0, r3
 800c040:	3710      	adds	r7, #16
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}
 800c046:	bf00      	nop
 800c048:	0802286c 	.word	0x0802286c

0800c04c <sx126x_set_dio2_as_rf_sw_ctrl>:
    }
    return status;
}

sx126x_status_t sx126x_set_dio2_as_rf_sw_ctrl( const void* context, const bool enable )
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b086      	sub	sp, #24
 800c050:	af02      	add	r7, sp, #8
 800c052:	6078      	str	r0, [r7, #4]
 800c054:	460b      	mov	r3, r1
 800c056:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL] = { 0 };
 800c058:	2300      	movs	r3, #0
 800c05a:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_DIO2_AS_RF_SWITCH_CTRL;
 800c05c:	239d      	movs	r3, #157	; 0x9d
 800c05e:	733b      	strb	r3, [r7, #12]

    buf[1] = ( enable == true ) ? 1 : 0;
 800c060:	78fb      	ldrb	r3, [r7, #3]
 800c062:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL, 0, 0 );
 800c064:	f107 010c 	add.w	r1, r7, #12
 800c068:	2300      	movs	r3, #0
 800c06a:	9300      	str	r3, [sp, #0]
 800c06c:	2300      	movs	r3, #0
 800c06e:	2202      	movs	r2, #2
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f7ff f907 	bl	800b284 <sx126x_hal_write>
 800c076:	4603      	mov	r3, r0
}
 800c078:	4618      	mov	r0, r3
 800c07a:	3710      	adds	r7, #16
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}

0800c080 <sx126x_set_dio3_as_tcxo_ctrl>:

sx126x_status_t sx126x_set_dio3_as_tcxo_ctrl( const void* context, const sx126x_tcxo_ctrl_voltages_t tcxo_voltage,
                                              const uint32_t timeout )
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b088      	sub	sp, #32
 800c084:	af02      	add	r7, sp, #8
 800c086:	60f8      	str	r0, [r7, #12]
 800c088:	460b      	mov	r3, r1
 800c08a:	607a      	str	r2, [r7, #4]
 800c08c:	72fb      	strb	r3, [r7, #11]
    uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = { 0 };
 800c08e:	2300      	movs	r3, #0
 800c090:	613b      	str	r3, [r7, #16]
 800c092:	2300      	movs	r3, #0
 800c094:	753b      	strb	r3, [r7, #20]

    buf[0] = SX126X_SET_DIO3_AS_TCXO_CTRL;
 800c096:	2397      	movs	r3, #151	; 0x97
 800c098:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t ) tcxo_voltage;
 800c09a:	7afb      	ldrb	r3, [r7, #11]
 800c09c:	747b      	strb	r3, [r7, #17]

    buf[2] = ( uint8_t )( timeout >> 16 );
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	0c1b      	lsrs	r3, r3, #16
 800c0a2:	b2db      	uxtb	r3, r3
 800c0a4:	74bb      	strb	r3, [r7, #18]
    buf[3] = ( uint8_t )( timeout >> 8 );
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	0a1b      	lsrs	r3, r3, #8
 800c0aa:	b2db      	uxtb	r3, r3
 800c0ac:	74fb      	strb	r3, [r7, #19]
    buf[4] = ( uint8_t )( timeout >> 0 );
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	b2db      	uxtb	r3, r3
 800c0b2:	753b      	strb	r3, [r7, #20]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL, 0, 0 );
 800c0b4:	f107 0110 	add.w	r1, r7, #16
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	9300      	str	r3, [sp, #0]
 800c0bc:	2300      	movs	r3, #0
 800c0be:	2205      	movs	r2, #5
 800c0c0:	68f8      	ldr	r0, [r7, #12]
 800c0c2:	f7ff f8df 	bl	800b284 <sx126x_hal_write>
 800c0c6:	4603      	mov	r3, r0
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	3718      	adds	r7, #24
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}

0800c0d0 <sx126x_set_rf_freq>:
//
// RF Modulation and Packet-Related Functions
//

sx126x_status_t sx126x_set_rf_freq( const void* context, const uint32_t freq_in_hz )
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b084      	sub	sp, #16
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
 800c0d8:	6039      	str	r1, [r7, #0]
    const uint32_t freq = sx126x_convert_freq_in_hz_to_pll_step( freq_in_hz );
 800c0da:	6838      	ldr	r0, [r7, #0]
 800c0dc:	f000 f9a0 	bl	800c420 <sx126x_convert_freq_in_hz_to_pll_step>
 800c0e0:	60f8      	str	r0, [r7, #12]

    return sx126x_set_rf_freq_in_pll_steps( context, freq );
 800c0e2:	68f9      	ldr	r1, [r7, #12]
 800c0e4:	6878      	ldr	r0, [r7, #4]
 800c0e6:	f000 f805 	bl	800c0f4 <sx126x_set_rf_freq_in_pll_steps>
 800c0ea:	4603      	mov	r3, r0
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	3710      	adds	r7, #16
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}

0800c0f4 <sx126x_set_rf_freq_in_pll_steps>:

sx126x_status_t sx126x_set_rf_freq_in_pll_steps( const void* context, const uint32_t freq )
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b086      	sub	sp, #24
 800c0f8:	af02      	add	r7, sp, #8
 800c0fa:	6078      	str	r0, [r7, #4]
 800c0fc:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = { 0 };
 800c0fe:	2300      	movs	r3, #0
 800c100:	60bb      	str	r3, [r7, #8]
 800c102:	2300      	movs	r3, #0
 800c104:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_RF_FREQUENCY;
 800c106:	2386      	movs	r3, #134	; 0x86
 800c108:	723b      	strb	r3, [r7, #8]

    buf[1] = ( uint8_t )( freq >> 24 );
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	0e1b      	lsrs	r3, r3, #24
 800c10e:	b2db      	uxtb	r3, r3
 800c110:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( freq >> 16 );
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	0c1b      	lsrs	r3, r3, #16
 800c116:	b2db      	uxtb	r3, r3
 800c118:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( freq >> 8 );
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	0a1b      	lsrs	r3, r3, #8
 800c11e:	b2db      	uxtb	r3, r3
 800c120:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( freq >> 0 );
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	b2db      	uxtb	r3, r3
 800c126:	733b      	strb	r3, [r7, #12]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RF_FREQUENCY, 0, 0 );
 800c128:	f107 0108 	add.w	r1, r7, #8
 800c12c:	2300      	movs	r3, #0
 800c12e:	9300      	str	r3, [sp, #0]
 800c130:	2300      	movs	r3, #0
 800c132:	2205      	movs	r2, #5
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	f7ff f8a5 	bl	800b284 <sx126x_hal_write>
 800c13a:	4603      	mov	r3, r0
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	3710      	adds	r7, #16
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}

0800c144 <sx126x_set_pkt_type>:

sx126x_status_t sx126x_set_pkt_type( const void* context, const sx126x_pkt_type_t pkt_type )
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b086      	sub	sp, #24
 800c148:	af02      	add	r7, sp, #8
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	460b      	mov	r3, r1
 800c14e:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_PKT_TYPE] = { 0 };
 800c150:	2300      	movs	r3, #0
 800c152:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_PKT_TYPE;
 800c154:	238a      	movs	r3, #138	; 0x8a
 800c156:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) pkt_type;
 800c158:	78fb      	ldrb	r3, [r7, #3]
 800c15a:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_TYPE, 0, 0 );
 800c15c:	f107 010c 	add.w	r1, r7, #12
 800c160:	2300      	movs	r3, #0
 800c162:	9300      	str	r3, [sp, #0]
 800c164:	2300      	movs	r3, #0
 800c166:	2202      	movs	r2, #2
 800c168:	6878      	ldr	r0, [r7, #4]
 800c16a:	f7ff f88b 	bl	800b284 <sx126x_hal_write>
 800c16e:	4603      	mov	r3, r0
}
 800c170:	4618      	mov	r0, r3
 800c172:	3710      	adds	r7, #16
 800c174:	46bd      	mov	sp, r7
 800c176:	bd80      	pop	{r7, pc}

0800c178 <sx126x_set_tx_params>:

    return status;
}

sx126x_status_t sx126x_set_tx_params( const void* context, const int8_t pwr_in_dbm, const sx126x_ramp_time_t ramp_time )
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b086      	sub	sp, #24
 800c17c:	af02      	add	r7, sp, #8
 800c17e:	6078      	str	r0, [r7, #4]
 800c180:	460b      	mov	r3, r1
 800c182:	70fb      	strb	r3, [r7, #3]
 800c184:	4613      	mov	r3, r2
 800c186:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_SET_TX_PARAMS] = { 0 };
 800c188:	4b0c      	ldr	r3, [pc, #48]	; (800c1bc <sx126x_set_tx_params+0x44>)
 800c18a:	881b      	ldrh	r3, [r3, #0]
 800c18c:	81bb      	strh	r3, [r7, #12]
 800c18e:	2300      	movs	r3, #0
 800c190:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_SET_TX_PARAMS;
 800c192:	238e      	movs	r3, #142	; 0x8e
 800c194:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) pwr_in_dbm;
 800c196:	78fb      	ldrb	r3, [r7, #3]
 800c198:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t ) ramp_time;
 800c19a:	78bb      	ldrb	r3, [r7, #2]
 800c19c:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_PARAMS, 0, 0 );
 800c19e:	f107 010c 	add.w	r1, r7, #12
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	9300      	str	r3, [sp, #0]
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	2203      	movs	r2, #3
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f7ff f86a 	bl	800b284 <sx126x_hal_write>
 800c1b0:	4603      	mov	r3, r0
}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	3710      	adds	r7, #16
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}
 800c1ba:	bf00      	nop
 800c1bc:	0802286c 	.word	0x0802286c

0800c1c0 <sx126x_set_lora_mod_params>:
    }
    return status;
}

sx126x_status_t sx126x_set_lora_mod_params( const void* context, const sx126x_mod_params_lora_t* params )
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b086      	sub	sp, #24
 800c1c4:	af02      	add	r7, sp, #8
 800c1c6:	6078      	str	r0, [r7, #4]
 800c1c8:	6039      	str	r1, [r7, #0]
    sx126x_status_t status = SX126X_STATUS_ERROR;
 800c1ca:	2303      	movs	r3, #3
 800c1cc:	73fb      	strb	r3, [r7, #15]

    uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = { 0 };
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	60bb      	str	r3, [r7, #8]
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_MODULATION_PARAMS;
 800c1d6:	238b      	movs	r3, #139	; 0x8b
 800c1d8:	723b      	strb	r3, [r7, #8]

    buf[1] = ( uint8_t )( params->sf );
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	781b      	ldrb	r3, [r3, #0]
 800c1de:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( params->bw );
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	785b      	ldrb	r3, [r3, #1]
 800c1e4:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( params->cr );
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	789b      	ldrb	r3, [r3, #2]
 800c1ea:	72fb      	strb	r3, [r7, #11]
    buf[4] = params->ldro & 0x01;
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	78db      	ldrb	r3, [r3, #3]
 800c1f0:	f003 0301 	and.w	r3, r3, #1
 800c1f4:	b2db      	uxtb	r3, r3
 800c1f6:	733b      	strb	r3, [r7, #12]

    status = ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_MODULATION_PARAMS_LORA, 0, 0 );
 800c1f8:	f107 0108 	add.w	r1, r7, #8
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	9300      	str	r3, [sp, #0]
 800c200:	2300      	movs	r3, #0
 800c202:	2205      	movs	r2, #5
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	f7ff f83d 	bl	800b284 <sx126x_hal_write>
 800c20a:	4603      	mov	r3, r0
 800c20c:	73fb      	strb	r3, [r7, #15]
        status = sx126x_tx_modulation_workaround( context, SX126X_PKT_TYPE_LORA, params->bw );
        // WORKAROUND END
    }
    */

    return status;
 800c20e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c210:	4618      	mov	r0, r3
 800c212:	3710      	adds	r7, #16
 800c214:	46bd      	mov	sp, r7
 800c216:	bd80      	pop	{r7, pc}

0800c218 <sx126x_set_lora_pkt_params>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_GFSK, 0, 0 );
}

sx126x_status_t sx126x_set_lora_pkt_params( const void* context, const sx126x_pkt_params_lora_t* params )
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b088      	sub	sp, #32
 800c21c:	af02      	add	r7, sp, #8
 800c21e:	6078      	str	r0, [r7, #4]
 800c220:	6039      	str	r1, [r7, #0]
    sx126x_status_t status = SX126X_STATUS_ERROR;
 800c222:	2303      	movs	r3, #3
 800c224:	75fb      	strb	r3, [r7, #23]

    uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = { 0 };
 800c226:	2300      	movs	r3, #0
 800c228:	613b      	str	r3, [r7, #16]
 800c22a:	f107 0314 	add.w	r3, r7, #20
 800c22e:	2100      	movs	r1, #0
 800c230:	460a      	mov	r2, r1
 800c232:	801a      	strh	r2, [r3, #0]
 800c234:	460a      	mov	r2, r1
 800c236:	709a      	strb	r2, [r3, #2]

    buf[0] = SX126X_SET_PKT_PARAMS;
 800c238:	238c      	movs	r3, #140	; 0x8c
 800c23a:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t )( params->preamble_len_in_symb >> 8 );
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	881b      	ldrh	r3, [r3, #0]
 800c240:	0a1b      	lsrs	r3, r3, #8
 800c242:	b29b      	uxth	r3, r3
 800c244:	b2db      	uxtb	r3, r3
 800c246:	747b      	strb	r3, [r7, #17]
    buf[2] = ( uint8_t )( params->preamble_len_in_symb >> 0 );
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	881b      	ldrh	r3, [r3, #0]
 800c24c:	b2db      	uxtb	r3, r3
 800c24e:	74bb      	strb	r3, [r7, #18]
    buf[3] = ( uint8_t )( params->header_type );
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	789b      	ldrb	r3, [r3, #2]
 800c254:	74fb      	strb	r3, [r7, #19]
    buf[4] = params->pld_len_in_bytes;
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	78db      	ldrb	r3, [r3, #3]
 800c25a:	753b      	strb	r3, [r7, #20]
    buf[5] = ( uint8_t )( params->crc_is_on ? 1 : 0 );
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	791b      	ldrb	r3, [r3, #4]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d001      	beq.n	800c268 <sx126x_set_lora_pkt_params+0x50>
 800c264:	2301      	movs	r3, #1
 800c266:	e000      	b.n	800c26a <sx126x_set_lora_pkt_params+0x52>
 800c268:	2300      	movs	r3, #0
 800c26a:	757b      	strb	r3, [r7, #21]
    buf[6] = ( uint8_t )( params->invert_iq_is_on ? 1 : 0 );
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	795b      	ldrb	r3, [r3, #5]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d001      	beq.n	800c278 <sx126x_set_lora_pkt_params+0x60>
 800c274:	2301      	movs	r3, #1
 800c276:	e000      	b.n	800c27a <sx126x_set_lora_pkt_params+0x62>
 800c278:	2300      	movs	r3, #0
 800c27a:	75bb      	strb	r3, [r7, #22]

    status = ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_LORA, 0, 0 );
 800c27c:	f107 0110 	add.w	r1, r7, #16
 800c280:	2300      	movs	r3, #0
 800c282:	9300      	str	r3, [sp, #0]
 800c284:	2300      	movs	r3, #0
 800c286:	2207      	movs	r2, #7
 800c288:	6878      	ldr	r0, [r7, #4]
 800c28a:	f7fe fffb 	bl	800b284 <sx126x_hal_write>
 800c28e:	4603      	mov	r3, r0
 800c290:	75fb      	strb	r3, [r7, #23]

    // WORKAROUND - Optimizing the Inverted IQ Operation, see datasheet DS_SX1261-2_V1.2 §15.4
    if( status == SX126X_STATUS_OK )
 800c292:	7dfb      	ldrb	r3, [r7, #23]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d127      	bne.n	800c2e8 <sx126x_set_lora_pkt_params+0xd0>
    {
        uint8_t reg_value = 0;
 800c298:	2300      	movs	r3, #0
 800c29a:	73fb      	strb	r3, [r7, #15]

        status = sx126x_read_register( context, SX126X_REG_IRQ_POLARITY, &reg_value, 1 );
 800c29c:	f107 020f 	add.w	r2, r7, #15
 800c2a0:	2301      	movs	r3, #1
 800c2a2:	f240 7136 	movw	r1, #1846	; 0x736
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f7ff fd34 	bl	800bd14 <sx126x_read_register>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	75fb      	strb	r3, [r7, #23]
        if( status == SX126X_STATUS_OK )
 800c2b0:	7dfb      	ldrb	r3, [r7, #23]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d118      	bne.n	800c2e8 <sx126x_set_lora_pkt_params+0xd0>
        {
            if( params->invert_iq_is_on == true )
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	795b      	ldrb	r3, [r3, #5]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d005      	beq.n	800c2ca <sx126x_set_lora_pkt_params+0xb2>
            {
                reg_value &= ~( 1 << 2 );  // Bit 2 set to 0 when using inverted IQ polarity
 800c2be:	7bfb      	ldrb	r3, [r7, #15]
 800c2c0:	f023 0304 	bic.w	r3, r3, #4
 800c2c4:	b2db      	uxtb	r3, r3
 800c2c6:	73fb      	strb	r3, [r7, #15]
 800c2c8:	e004      	b.n	800c2d4 <sx126x_set_lora_pkt_params+0xbc>
            }
            else
            {
                reg_value |= ( 1 << 2 );  // Bit 2 set to 1 when using standard IQ polarity
 800c2ca:	7bfb      	ldrb	r3, [r7, #15]
 800c2cc:	f043 0304 	orr.w	r3, r3, #4
 800c2d0:	b2db      	uxtb	r3, r3
 800c2d2:	73fb      	strb	r3, [r7, #15]
            }
            status = sx126x_write_register( context, SX126X_REG_IRQ_POLARITY, &reg_value, 1 );
 800c2d4:	f107 020f 	add.w	r2, r7, #15
 800c2d8:	2301      	movs	r3, #1
 800c2da:	f240 7136 	movw	r1, #1846	; 0x736
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	f7ff fcee 	bl	800bcc0 <sx126x_write_register>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	75fb      	strb	r3, [r7, #23]
        }
    }
    // WORKAROUND END

    return status;
 800c2e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3718      	adds	r7, #24
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}
	...

0800c2f4 <sx126x_set_buffer_base_address>:
    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_CAD_PARAMS, 0, 0 );
}

sx126x_status_t sx126x_set_buffer_base_address( const void* context, const uint8_t tx_base_address,
                                                const uint8_t rx_base_address )
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b086      	sub	sp, #24
 800c2f8:	af02      	add	r7, sp, #8
 800c2fa:	6078      	str	r0, [r7, #4]
 800c2fc:	460b      	mov	r3, r1
 800c2fe:	70fb      	strb	r3, [r7, #3]
 800c300:	4613      	mov	r3, r2
 800c302:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_SET_BUFFER_BASE_ADDRESS] = { 0 };
 800c304:	4b0c      	ldr	r3, [pc, #48]	; (800c338 <sx126x_set_buffer_base_address+0x44>)
 800c306:	881b      	ldrh	r3, [r3, #0]
 800c308:	81bb      	strh	r3, [r7, #12]
 800c30a:	2300      	movs	r3, #0
 800c30c:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_SET_BUFFER_BASE_ADDRESS;
 800c30e:	238f      	movs	r3, #143	; 0x8f
 800c310:	733b      	strb	r3, [r7, #12]

    buf[1] = tx_base_address;
 800c312:	78fb      	ldrb	r3, [r7, #3]
 800c314:	737b      	strb	r3, [r7, #13]
    buf[2] = rx_base_address;
 800c316:	78bb      	ldrb	r3, [r7, #2]
 800c318:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_BUFFER_BASE_ADDRESS, 0, 0 );
 800c31a:	f107 010c 	add.w	r1, r7, #12
 800c31e:	2300      	movs	r3, #0
 800c320:	9300      	str	r3, [sp, #0]
 800c322:	2300      	movs	r3, #0
 800c324:	2203      	movs	r2, #3
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f7fe ffac 	bl	800b284 <sx126x_hal_write>
 800c32c:	4603      	mov	r3, r0
}
 800c32e:	4618      	mov	r0, r3
 800c330:	3710      	adds	r7, #16
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}
 800c336:	bf00      	nop
 800c338:	0802286c 	.word	0x0802286c

0800c33c <sx126x_set_lora_symb_nb_timeout>:

sx126x_status_t sx126x_set_lora_symb_nb_timeout( const void* context, const uint8_t nb_of_symbs )
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b088      	sub	sp, #32
 800c340:	af02      	add	r7, sp, #8
 800c342:	6078      	str	r0, [r7, #4]
 800c344:	460b      	mov	r3, r1
 800c346:	70fb      	strb	r3, [r7, #3]
    uint8_t         buf[SX126X_SIZE_SET_LORA_SYMB_NUM_TIMEOUT] = { 0 };
 800c348:	2300      	movs	r3, #0
 800c34a:	823b      	strh	r3, [r7, #16]
    sx126x_status_t status                                     = SX126X_STATUS_ERROR;
 800c34c:	2303      	movs	r3, #3
 800c34e:	75fb      	strb	r3, [r7, #23]

    buf[0] = SX126X_SET_LORA_SYMB_NUM_TIMEOUT;
 800c350:	23a0      	movs	r3, #160	; 0xa0
 800c352:	743b      	strb	r3, [r7, #16]

    buf[1] = nb_of_symbs;
 800c354:	78fb      	ldrb	r3, [r7, #3]
 800c356:	747b      	strb	r3, [r7, #17]

    status = ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_LORA_SYMB_NUM_TIMEOUT, 0, 0 );
 800c358:	f107 0110 	add.w	r1, r7, #16
 800c35c:	2300      	movs	r3, #0
 800c35e:	9300      	str	r3, [sp, #0]
 800c360:	2300      	movs	r3, #0
 800c362:	2202      	movs	r2, #2
 800c364:	6878      	ldr	r0, [r7, #4]
 800c366:	f7fe ff8d 	bl	800b284 <sx126x_hal_write>
 800c36a:	4603      	mov	r3, r0
 800c36c:	75fb      	strb	r3, [r7, #23]

    if( ( status == SX126X_STATUS_OK ) && ( nb_of_symbs >= 64 ) )
 800c36e:	7dfb      	ldrb	r3, [r7, #23]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d124      	bne.n	800c3be <sx126x_set_lora_symb_nb_timeout+0x82>
 800c374:	78fb      	ldrb	r3, [r7, #3]
 800c376:	2b3f      	cmp	r3, #63	; 0x3f
 800c378:	d921      	bls.n	800c3be <sx126x_set_lora_symb_nb_timeout+0x82>
    {
        uint8_t mant = nb_of_symbs >> 1;
 800c37a:	78fb      	ldrb	r3, [r7, #3]
 800c37c:	085b      	lsrs	r3, r3, #1
 800c37e:	75bb      	strb	r3, [r7, #22]
        uint8_t exp  = 0;
 800c380:	2300      	movs	r3, #0
 800c382:	757b      	strb	r3, [r7, #21]
        uint8_t reg  = 0;
 800c384:	2300      	movs	r3, #0
 800c386:	73fb      	strb	r3, [r7, #15]

        while( mant > 31 )
 800c388:	e005      	b.n	800c396 <sx126x_set_lora_symb_nb_timeout+0x5a>
        {
            mant >>= 2;
 800c38a:	7dbb      	ldrb	r3, [r7, #22]
 800c38c:	089b      	lsrs	r3, r3, #2
 800c38e:	75bb      	strb	r3, [r7, #22]
            exp++;
 800c390:	7d7b      	ldrb	r3, [r7, #21]
 800c392:	3301      	adds	r3, #1
 800c394:	757b      	strb	r3, [r7, #21]
        while( mant > 31 )
 800c396:	7dbb      	ldrb	r3, [r7, #22]
 800c398:	2b1f      	cmp	r3, #31
 800c39a:	d8f6      	bhi.n	800c38a <sx126x_set_lora_symb_nb_timeout+0x4e>
        }

        reg    = exp + ( mant << 3 );
 800c39c:	7dbb      	ldrb	r3, [r7, #22]
 800c39e:	00db      	lsls	r3, r3, #3
 800c3a0:	b2da      	uxtb	r2, r3
 800c3a2:	7d7b      	ldrb	r3, [r7, #21]
 800c3a4:	4413      	add	r3, r2
 800c3a6:	b2db      	uxtb	r3, r3
 800c3a8:	73fb      	strb	r3, [r7, #15]
        status = sx126x_write_register( context, SX126X_REG_LR_SYNCH_TIMEOUT, &reg, 1 );
 800c3aa:	f107 020f 	add.w	r2, r7, #15
 800c3ae:	2301      	movs	r3, #1
 800c3b0:	f240 7106 	movw	r1, #1798	; 0x706
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f7ff fc83 	bl	800bcc0 <sx126x_write_register>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	75fb      	strb	r3, [r7, #23]
    }

    return status;
 800c3be:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	3718      	adds	r7, #24
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bd80      	pop	{r7, pc}

0800c3c8 <sx126x_get_rx_buffer_status>:

    return status;
}

sx126x_status_t sx126x_get_rx_buffer_status( const void* context, sx126x_rx_buffer_status_t* rx_buffer_status )
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b088      	sub	sp, #32
 800c3cc:	af02      	add	r7, sp, #8
 800c3ce:	6078      	str	r0, [r7, #4]
 800c3d0:	6039      	str	r1, [r7, #0]
    uint8_t         buf[SX126X_SIZE_GET_RX_BUFFER_STATUS]               = { 0x00 };
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	613b      	str	r3, [r7, #16]
    uint8_t         status_local[sizeof( sx126x_rx_buffer_status_t )+1] = { 0x00 };
 800c3d6:	4b11      	ldr	r3, [pc, #68]	; (800c41c <sx126x_get_rx_buffer_status+0x54>)
 800c3d8:	881b      	ldrh	r3, [r3, #0]
 800c3da:	81bb      	strh	r3, [r7, #12]
 800c3dc:	2300      	movs	r3, #0
 800c3de:	73bb      	strb	r3, [r7, #14]
    sx126x_status_t status                                              = SX126X_STATUS_ERROR;
 800c3e0:	2303      	movs	r3, #3
 800c3e2:	75fb      	strb	r3, [r7, #23]

    buf[0] = SX126X_GET_RX_BUFFER_STATUS;
 800c3e4:	2313      	movs	r3, #19
 800c3e6:	743b      	strb	r3, [r7, #16]

    status = ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_GET_RX_BUFFER_STATUS, status_local,
 800c3e8:	f107 030c 	add.w	r3, r7, #12
 800c3ec:	f107 0110 	add.w	r1, r7, #16
 800c3f0:	2201      	movs	r2, #1
 800c3f2:	9200      	str	r2, [sp, #0]
 800c3f4:	2204      	movs	r2, #4
 800c3f6:	6878      	ldr	r0, [r7, #4]
 800c3f8:	f7fe ff86 	bl	800b308 <sx126x_hal_read>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	75fb      	strb	r3, [r7, #23]
                                                  SX126X_OFFSET_GET_RX_BUFFER_STATUS );

    if( status == SX126X_STATUS_OK )
 800c400:	7dfb      	ldrb	r3, [r7, #23]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d105      	bne.n	800c412 <sx126x_get_rx_buffer_status+0x4a>
    {
        rx_buffer_status->pld_len_in_bytes     = status_local[1];
 800c406:	7b7a      	ldrb	r2, [r7, #13]
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	701a      	strb	r2, [r3, #0]
        rx_buffer_status->buffer_start_pointer = status_local[2];
 800c40c:	7bba      	ldrb	r2, [r7, #14]
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	705a      	strb	r2, [r3, #1]
    }

    return (sx126x_status_t) status_local[0];
 800c412:	7b3b      	ldrb	r3, [r7, #12]
}
 800c414:	4618      	mov	r0, r3
 800c416:	3718      	adds	r7, #24
 800c418:	46bd      	mov	sp, r7
 800c41a:	bd80      	pop	{r7, pc}
 800c41c:	0802286c 	.word	0x0802286c

0800c420 <sx126x_convert_freq_in_hz_to_pll_step>:

    return status;
}

uint32_t sx126x_convert_freq_in_hz_to_pll_step( uint32_t freq_in_hz )
{
 800c420:	b480      	push	{r7}
 800c422:	b085      	sub	sp, #20
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
    uint32_t steps_int;
    uint32_t steps_frac;

    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    steps_int  = freq_in_hz / SX126X_PLL_STEP_SCALED;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	4a0f      	ldr	r2, [pc, #60]	; (800c468 <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 800c42c:	fba2 2303 	umull	r2, r3, r2, r3
 800c430:	0b1b      	lsrs	r3, r3, #12
 800c432:	60fb      	str	r3, [r7, #12]
    steps_frac = freq_in_hz - ( steps_int * SX126X_PLL_STEP_SCALED );
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	f643 5209 	movw	r2, #15625	; 0x3d09
 800c43a:	fb02 f303 	mul.w	r3, r2, r3
 800c43e:	687a      	ldr	r2, [r7, #4]
 800c440:	1ad3      	subs	r3, r2, r3
 800c442:	60bb      	str	r3, [r7, #8]

    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	039a      	lsls	r2, r3, #14
           ( ( ( steps_frac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	039b      	lsls	r3, r3, #14
 800c44c:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 800c450:	3304      	adds	r3, #4
 800c452:	4905      	ldr	r1, [pc, #20]	; (800c468 <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 800c454:	fba1 1303 	umull	r1, r3, r1, r3
 800c458:	0b1b      	lsrs	r3, r3, #12
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 800c45a:	4413      	add	r3, r2
             SX126X_PLL_STEP_SCALED );
}
 800c45c:	4618      	mov	r0, r3
 800c45e:	3714      	adds	r7, #20
 800c460:	46bd      	mov	sp, r7
 800c462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c466:	4770      	bx	lr
 800c468:	431bde83 	.word	0x431bde83

0800c46c <sx126x_convert_timeout_in_ms_to_rtc_step>:

uint32_t sx126x_convert_timeout_in_ms_to_rtc_step( uint32_t timeout_in_ms )
{
 800c46c:	b480      	push	{r7}
 800c46e:	b083      	sub	sp, #12
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
    return ( uint32_t )( timeout_in_ms * ( SX126X_RTC_FREQ_IN_HZ / 1000 ) );
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	019b      	lsls	r3, r3, #6
}
 800c478:	4618      	mov	r0, r3
 800c47a:	370c      	adds	r7, #12
 800c47c:	46bd      	mov	sp, r7
 800c47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c482:	4770      	bx	lr

0800c484 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800c488:	4b0e      	ldr	r3, [pc, #56]	; (800c4c4 <HAL_Init+0x40>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	4a0d      	ldr	r2, [pc, #52]	; (800c4c4 <HAL_Init+0x40>)
 800c48e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c492:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800c494:	4b0b      	ldr	r3, [pc, #44]	; (800c4c4 <HAL_Init+0x40>)
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	4a0a      	ldr	r2, [pc, #40]	; (800c4c4 <HAL_Init+0x40>)
 800c49a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c49e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800c4a0:	4b08      	ldr	r3, [pc, #32]	; (800c4c4 <HAL_Init+0x40>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	4a07      	ldr	r2, [pc, #28]	; (800c4c4 <HAL_Init+0x40>)
 800c4a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c4aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800c4ac:	2003      	movs	r0, #3
 800c4ae:	f000 fd30 	bl	800cf12 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800c4b2:	200f      	movs	r0, #15
 800c4b4:	f7f7 f872 	bl	800359c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800c4b8:	f7f7 f832 	bl	8003520 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800c4bc:	2300      	movs	r3, #0
}
 800c4be:	4618      	mov	r0, r3
 800c4c0:	bd80      	pop	{r7, pc}
 800c4c2:	bf00      	nop
 800c4c4:	40023c00 	.word	0x40023c00

0800c4c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800c4c8:	b480      	push	{r7}
 800c4ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800c4cc:	4b06      	ldr	r3, [pc, #24]	; (800c4e8 <HAL_IncTick+0x20>)
 800c4ce:	781b      	ldrb	r3, [r3, #0]
 800c4d0:	461a      	mov	r2, r3
 800c4d2:	4b06      	ldr	r3, [pc, #24]	; (800c4ec <HAL_IncTick+0x24>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	4413      	add	r3, r2
 800c4d8:	4a04      	ldr	r2, [pc, #16]	; (800c4ec <HAL_IncTick+0x24>)
 800c4da:	6013      	str	r3, [r2, #0]
}
 800c4dc:	bf00      	nop
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e4:	4770      	bx	lr
 800c4e6:	bf00      	nop
 800c4e8:	200000d0 	.word	0x200000d0
 800c4ec:	20009844 	.word	0x20009844

0800c4f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800c4f0:	b480      	push	{r7}
 800c4f2:	af00      	add	r7, sp, #0
  return uwTick;
 800c4f4:	4b03      	ldr	r3, [pc, #12]	; (800c504 <HAL_GetTick+0x14>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c500:	4770      	bx	lr
 800c502:	bf00      	nop
 800c504:	20009844 	.word	0x20009844

0800c508 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b084      	sub	sp, #16
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800c510:	f7ff ffee 	bl	800c4f0 <HAL_GetTick>
 800c514:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c520:	d005      	beq.n	800c52e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800c522:	4b0a      	ldr	r3, [pc, #40]	; (800c54c <HAL_Delay+0x44>)
 800c524:	781b      	ldrb	r3, [r3, #0]
 800c526:	461a      	mov	r2, r3
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	4413      	add	r3, r2
 800c52c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800c52e:	bf00      	nop
 800c530:	f7ff ffde 	bl	800c4f0 <HAL_GetTick>
 800c534:	4602      	mov	r2, r0
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	1ad3      	subs	r3, r2, r3
 800c53a:	68fa      	ldr	r2, [r7, #12]
 800c53c:	429a      	cmp	r2, r3
 800c53e:	d8f7      	bhi.n	800c530 <HAL_Delay+0x28>
  {
  }
}
 800c540:	bf00      	nop
 800c542:	bf00      	nop
 800c544:	3710      	adds	r7, #16
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}
 800c54a:	bf00      	nop
 800c54c:	200000d0 	.word	0x200000d0

0800c550 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b084      	sub	sp, #16
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c558:	2300      	movs	r3, #0
 800c55a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d101      	bne.n	800c566 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800c562:	2301      	movs	r3, #1
 800c564:	e033      	b.n	800c5ce <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d109      	bne.n	800c582 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800c56e:	6878      	ldr	r0, [r7, #4]
 800c570:	f7f5 f818 	bl	80015a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2200      	movs	r2, #0
 800c578:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	2200      	movs	r2, #0
 800c57e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c586:	f003 0310 	and.w	r3, r3, #16
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d118      	bne.n	800c5c0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c592:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800c596:	f023 0302 	bic.w	r3, r3, #2
 800c59a:	f043 0202 	orr.w	r2, r3, #2
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	f000 fae8 	bl	800cb78 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5b2:	f023 0303 	bic.w	r3, r3, #3
 800c5b6:	f043 0201 	orr.w	r2, r3, #1
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	641a      	str	r2, [r3, #64]	; 0x40
 800c5be:	e001      	b.n	800c5c4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800c5c0:	2301      	movs	r3, #1
 800c5c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800c5cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	3710      	adds	r7, #16
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}
	...

0800c5d8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800c5d8:	b480      	push	{r7}
 800c5da:	b085      	sub	sp, #20
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c5ea:	2b01      	cmp	r3, #1
 800c5ec:	d101      	bne.n	800c5f2 <HAL_ADC_Start+0x1a>
 800c5ee:	2302      	movs	r3, #2
 800c5f0:	e0b2      	b.n	800c758 <HAL_ADC_Start+0x180>
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2201      	movs	r2, #1
 800c5f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	689b      	ldr	r3, [r3, #8]
 800c600:	f003 0301 	and.w	r3, r3, #1
 800c604:	2b01      	cmp	r3, #1
 800c606:	d018      	beq.n	800c63a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	689a      	ldr	r2, [r3, #8]
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	f042 0201 	orr.w	r2, r2, #1
 800c616:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800c618:	4b52      	ldr	r3, [pc, #328]	; (800c764 <HAL_ADC_Start+0x18c>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	4a52      	ldr	r2, [pc, #328]	; (800c768 <HAL_ADC_Start+0x190>)
 800c61e:	fba2 2303 	umull	r2, r3, r2, r3
 800c622:	0c9a      	lsrs	r2, r3, #18
 800c624:	4613      	mov	r3, r2
 800c626:	005b      	lsls	r3, r3, #1
 800c628:	4413      	add	r3, r2
 800c62a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800c62c:	e002      	b.n	800c634 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	3b01      	subs	r3, #1
 800c632:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d1f9      	bne.n	800c62e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	689b      	ldr	r3, [r3, #8]
 800c640:	f003 0301 	and.w	r3, r3, #1
 800c644:	2b01      	cmp	r3, #1
 800c646:	d17a      	bne.n	800c73e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c64c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800c650:	f023 0301 	bic.w	r3, r3, #1
 800c654:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	685b      	ldr	r3, [r3, #4]
 800c662:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c666:	2b00      	cmp	r3, #0
 800c668:	d007      	beq.n	800c67a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c66e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800c672:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c67e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c686:	d106      	bne.n	800c696 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c68c:	f023 0206 	bic.w	r2, r3, #6
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	645a      	str	r2, [r3, #68]	; 0x44
 800c694:	e002      	b.n	800c69c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	2200      	movs	r2, #0
 800c69a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2200      	movs	r2, #0
 800c6a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800c6a4:	4b31      	ldr	r3, [pc, #196]	; (800c76c <HAL_ADC_Start+0x194>)
 800c6a6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800c6b0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	685b      	ldr	r3, [r3, #4]
 800c6b6:	f003 031f 	and.w	r3, r3, #31
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d12a      	bne.n	800c714 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	4a2b      	ldr	r2, [pc, #172]	; (800c770 <HAL_ADC_Start+0x198>)
 800c6c4:	4293      	cmp	r3, r2
 800c6c6:	d015      	beq.n	800c6f4 <HAL_ADC_Start+0x11c>
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	4a29      	ldr	r2, [pc, #164]	; (800c774 <HAL_ADC_Start+0x19c>)
 800c6ce:	4293      	cmp	r3, r2
 800c6d0:	d105      	bne.n	800c6de <HAL_ADC_Start+0x106>
 800c6d2:	4b26      	ldr	r3, [pc, #152]	; (800c76c <HAL_ADC_Start+0x194>)
 800c6d4:	685b      	ldr	r3, [r3, #4]
 800c6d6:	f003 031f 	and.w	r3, r3, #31
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d00a      	beq.n	800c6f4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	4a25      	ldr	r2, [pc, #148]	; (800c778 <HAL_ADC_Start+0x1a0>)
 800c6e4:	4293      	cmp	r3, r2
 800c6e6:	d136      	bne.n	800c756 <HAL_ADC_Start+0x17e>
 800c6e8:	4b20      	ldr	r3, [pc, #128]	; (800c76c <HAL_ADC_Start+0x194>)
 800c6ea:	685b      	ldr	r3, [r3, #4]
 800c6ec:	f003 0310 	and.w	r3, r3, #16
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d130      	bne.n	800c756 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	689b      	ldr	r3, [r3, #8]
 800c6fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d129      	bne.n	800c756 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	689a      	ldr	r2, [r3, #8]
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800c710:	609a      	str	r2, [r3, #8]
 800c712:	e020      	b.n	800c756 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	4a15      	ldr	r2, [pc, #84]	; (800c770 <HAL_ADC_Start+0x198>)
 800c71a:	4293      	cmp	r3, r2
 800c71c:	d11b      	bne.n	800c756 <HAL_ADC_Start+0x17e>
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	689b      	ldr	r3, [r3, #8]
 800c724:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d114      	bne.n	800c756 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	689a      	ldr	r2, [r3, #8]
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800c73a:	609a      	str	r2, [r3, #8]
 800c73c:	e00b      	b.n	800c756 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c742:	f043 0210 	orr.w	r2, r3, #16
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c74e:	f043 0201 	orr.w	r2, r3, #1
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800c756:	2300      	movs	r3, #0
}
 800c758:	4618      	mov	r0, r3
 800c75a:	3714      	adds	r7, #20
 800c75c:	46bd      	mov	sp, r7
 800c75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c762:	4770      	bx	lr
 800c764:	20000088 	.word	0x20000088
 800c768:	431bde83 	.word	0x431bde83
 800c76c:	40012300 	.word	0x40012300
 800c770:	40012000 	.word	0x40012000
 800c774:	40012100 	.word	0x40012100
 800c778:	40012200 	.word	0x40012200

0800c77c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800c77c:	b480      	push	{r7}
 800c77e:	b083      	sub	sp, #12
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c78a:	2b01      	cmp	r3, #1
 800c78c:	d101      	bne.n	800c792 <HAL_ADC_Stop+0x16>
 800c78e:	2302      	movs	r3, #2
 800c790:	e021      	b.n	800c7d6 <HAL_ADC_Stop+0x5a>
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	2201      	movs	r2, #1
 800c796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	689a      	ldr	r2, [r3, #8]
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	f022 0201 	bic.w	r2, r2, #1
 800c7a8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	689b      	ldr	r3, [r3, #8]
 800c7b0:	f003 0301 	and.w	r3, r3, #1
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d109      	bne.n	800c7cc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7bc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800c7c0:	f023 0301 	bic.w	r3, r3, #1
 800c7c4:	f043 0201 	orr.w	r2, r3, #1
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800c7d4:	2300      	movs	r3, #0
}
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	370c      	adds	r7, #12
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e0:	4770      	bx	lr

0800c7e2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800c7e2:	b580      	push	{r7, lr}
 800c7e4:	b084      	sub	sp, #16
 800c7e6:	af00      	add	r7, sp, #0
 800c7e8:	6078      	str	r0, [r7, #4]
 800c7ea:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	689b      	ldr	r3, [r3, #8]
 800c7f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c7fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c7fe:	d113      	bne.n	800c828 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	689b      	ldr	r3, [r3, #8]
 800c806:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800c80a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c80e:	d10b      	bne.n	800c828 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c814:	f043 0220 	orr.w	r2, r3, #32
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2200      	movs	r2, #0
 800c820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800c824:	2301      	movs	r3, #1
 800c826:	e063      	b.n	800c8f0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800c828:	f7ff fe62 	bl	800c4f0 <HAL_GetTick>
 800c82c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800c82e:	e021      	b.n	800c874 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c836:	d01d      	beq.n	800c874 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d007      	beq.n	800c84e <HAL_ADC_PollForConversion+0x6c>
 800c83e:	f7ff fe57 	bl	800c4f0 <HAL_GetTick>
 800c842:	4602      	mov	r2, r0
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	1ad3      	subs	r3, r2, r3
 800c848:	683a      	ldr	r2, [r7, #0]
 800c84a:	429a      	cmp	r2, r3
 800c84c:	d212      	bcs.n	800c874 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	f003 0302 	and.w	r3, r3, #2
 800c858:	2b02      	cmp	r3, #2
 800c85a:	d00b      	beq.n	800c874 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c860:	f043 0204 	orr.w	r2, r3, #4
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2200      	movs	r2, #0
 800c86c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800c870:	2303      	movs	r3, #3
 800c872:	e03d      	b.n	800c8f0 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	f003 0302 	and.w	r3, r3, #2
 800c87e:	2b02      	cmp	r3, #2
 800c880:	d1d6      	bne.n	800c830 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	f06f 0212 	mvn.w	r2, #18
 800c88a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c890:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	689b      	ldr	r3, [r3, #8]
 800c89e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d123      	bne.n	800c8ee <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d11f      	bne.n	800c8ee <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8b4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d006      	beq.n	800c8ca <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	689b      	ldr	r3, [r3, #8]
 800c8c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d111      	bne.n	800c8ee <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d105      	bne.n	800c8ee <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8e6:	f043 0201 	orr.w	r2, r3, #1
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800c8ee:	2300      	movs	r3, #0
}
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	3710      	adds	r7, #16
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}

0800c8f8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800c8f8:	b480      	push	{r7}
 800c8fa:	b083      	sub	sp, #12
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800c906:	4618      	mov	r0, r3
 800c908:	370c      	adds	r7, #12
 800c90a:	46bd      	mov	sp, r7
 800c90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c910:	4770      	bx	lr
	...

0800c914 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800c914:	b480      	push	{r7}
 800c916:	b085      	sub	sp, #20
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
 800c91c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800c91e:	2300      	movs	r3, #0
 800c920:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c928:	2b01      	cmp	r3, #1
 800c92a:	d101      	bne.n	800c930 <HAL_ADC_ConfigChannel+0x1c>
 800c92c:	2302      	movs	r3, #2
 800c92e:	e113      	b.n	800cb58 <HAL_ADC_ConfigChannel+0x244>
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2201      	movs	r2, #1
 800c934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	2b09      	cmp	r3, #9
 800c93e:	d925      	bls.n	800c98c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	68d9      	ldr	r1, [r3, #12]
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	b29b      	uxth	r3, r3
 800c94c:	461a      	mov	r2, r3
 800c94e:	4613      	mov	r3, r2
 800c950:	005b      	lsls	r3, r3, #1
 800c952:	4413      	add	r3, r2
 800c954:	3b1e      	subs	r3, #30
 800c956:	2207      	movs	r2, #7
 800c958:	fa02 f303 	lsl.w	r3, r2, r3
 800c95c:	43da      	mvns	r2, r3
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	400a      	ands	r2, r1
 800c964:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	68d9      	ldr	r1, [r3, #12]
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	689a      	ldr	r2, [r3, #8]
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	b29b      	uxth	r3, r3
 800c976:	4618      	mov	r0, r3
 800c978:	4603      	mov	r3, r0
 800c97a:	005b      	lsls	r3, r3, #1
 800c97c:	4403      	add	r3, r0
 800c97e:	3b1e      	subs	r3, #30
 800c980:	409a      	lsls	r2, r3
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	430a      	orrs	r2, r1
 800c988:	60da      	str	r2, [r3, #12]
 800c98a:	e022      	b.n	800c9d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	6919      	ldr	r1, [r3, #16]
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	b29b      	uxth	r3, r3
 800c998:	461a      	mov	r2, r3
 800c99a:	4613      	mov	r3, r2
 800c99c:	005b      	lsls	r3, r3, #1
 800c99e:	4413      	add	r3, r2
 800c9a0:	2207      	movs	r2, #7
 800c9a2:	fa02 f303 	lsl.w	r3, r2, r3
 800c9a6:	43da      	mvns	r2, r3
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	400a      	ands	r2, r1
 800c9ae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	6919      	ldr	r1, [r3, #16]
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	689a      	ldr	r2, [r3, #8]
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	b29b      	uxth	r3, r3
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	005b      	lsls	r3, r3, #1
 800c9c6:	4403      	add	r3, r0
 800c9c8:	409a      	lsls	r2, r3
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	430a      	orrs	r2, r1
 800c9d0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	685b      	ldr	r3, [r3, #4]
 800c9d6:	2b06      	cmp	r3, #6
 800c9d8:	d824      	bhi.n	800ca24 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	685a      	ldr	r2, [r3, #4]
 800c9e4:	4613      	mov	r3, r2
 800c9e6:	009b      	lsls	r3, r3, #2
 800c9e8:	4413      	add	r3, r2
 800c9ea:	3b05      	subs	r3, #5
 800c9ec:	221f      	movs	r2, #31
 800c9ee:	fa02 f303 	lsl.w	r3, r2, r3
 800c9f2:	43da      	mvns	r2, r3
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	400a      	ands	r2, r1
 800c9fa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	b29b      	uxth	r3, r3
 800ca08:	4618      	mov	r0, r3
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	685a      	ldr	r2, [r3, #4]
 800ca0e:	4613      	mov	r3, r2
 800ca10:	009b      	lsls	r3, r3, #2
 800ca12:	4413      	add	r3, r2
 800ca14:	3b05      	subs	r3, #5
 800ca16:	fa00 f203 	lsl.w	r2, r0, r3
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	430a      	orrs	r2, r1
 800ca20:	635a      	str	r2, [r3, #52]	; 0x34
 800ca22:	e04c      	b.n	800cabe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	685b      	ldr	r3, [r3, #4]
 800ca28:	2b0c      	cmp	r3, #12
 800ca2a:	d824      	bhi.n	800ca76 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	685a      	ldr	r2, [r3, #4]
 800ca36:	4613      	mov	r3, r2
 800ca38:	009b      	lsls	r3, r3, #2
 800ca3a:	4413      	add	r3, r2
 800ca3c:	3b23      	subs	r3, #35	; 0x23
 800ca3e:	221f      	movs	r2, #31
 800ca40:	fa02 f303 	lsl.w	r3, r2, r3
 800ca44:	43da      	mvns	r2, r3
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	400a      	ands	r2, r1
 800ca4c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	b29b      	uxth	r3, r3
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	685a      	ldr	r2, [r3, #4]
 800ca60:	4613      	mov	r3, r2
 800ca62:	009b      	lsls	r3, r3, #2
 800ca64:	4413      	add	r3, r2
 800ca66:	3b23      	subs	r3, #35	; 0x23
 800ca68:	fa00 f203 	lsl.w	r2, r0, r3
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	430a      	orrs	r2, r1
 800ca72:	631a      	str	r2, [r3, #48]	; 0x30
 800ca74:	e023      	b.n	800cabe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	685a      	ldr	r2, [r3, #4]
 800ca80:	4613      	mov	r3, r2
 800ca82:	009b      	lsls	r3, r3, #2
 800ca84:	4413      	add	r3, r2
 800ca86:	3b41      	subs	r3, #65	; 0x41
 800ca88:	221f      	movs	r2, #31
 800ca8a:	fa02 f303 	lsl.w	r3, r2, r3
 800ca8e:	43da      	mvns	r2, r3
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	400a      	ands	r2, r1
 800ca96:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	b29b      	uxth	r3, r3
 800caa4:	4618      	mov	r0, r3
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	685a      	ldr	r2, [r3, #4]
 800caaa:	4613      	mov	r3, r2
 800caac:	009b      	lsls	r3, r3, #2
 800caae:	4413      	add	r3, r2
 800cab0:	3b41      	subs	r3, #65	; 0x41
 800cab2:	fa00 f203 	lsl.w	r2, r0, r3
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	430a      	orrs	r2, r1
 800cabc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800cabe:	4b29      	ldr	r3, [pc, #164]	; (800cb64 <HAL_ADC_ConfigChannel+0x250>)
 800cac0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	4a28      	ldr	r2, [pc, #160]	; (800cb68 <HAL_ADC_ConfigChannel+0x254>)
 800cac8:	4293      	cmp	r3, r2
 800caca:	d10f      	bne.n	800caec <HAL_ADC_ConfigChannel+0x1d8>
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	2b12      	cmp	r3, #18
 800cad2:	d10b      	bne.n	800caec <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	685b      	ldr	r3, [r3, #4]
 800cad8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	685b      	ldr	r3, [r3, #4]
 800cae4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	4a1d      	ldr	r2, [pc, #116]	; (800cb68 <HAL_ADC_ConfigChannel+0x254>)
 800caf2:	4293      	cmp	r3, r2
 800caf4:	d12b      	bne.n	800cb4e <HAL_ADC_ConfigChannel+0x23a>
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	4a1c      	ldr	r2, [pc, #112]	; (800cb6c <HAL_ADC_ConfigChannel+0x258>)
 800cafc:	4293      	cmp	r3, r2
 800cafe:	d003      	beq.n	800cb08 <HAL_ADC_ConfigChannel+0x1f4>
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	2b11      	cmp	r3, #17
 800cb06:	d122      	bne.n	800cb4e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	685b      	ldr	r3, [r3, #4]
 800cb0c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	685b      	ldr	r3, [r3, #4]
 800cb18:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	4a11      	ldr	r2, [pc, #68]	; (800cb6c <HAL_ADC_ConfigChannel+0x258>)
 800cb26:	4293      	cmp	r3, r2
 800cb28:	d111      	bne.n	800cb4e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800cb2a:	4b11      	ldr	r3, [pc, #68]	; (800cb70 <HAL_ADC_ConfigChannel+0x25c>)
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	4a11      	ldr	r2, [pc, #68]	; (800cb74 <HAL_ADC_ConfigChannel+0x260>)
 800cb30:	fba2 2303 	umull	r2, r3, r2, r3
 800cb34:	0c9a      	lsrs	r2, r3, #18
 800cb36:	4613      	mov	r3, r2
 800cb38:	009b      	lsls	r3, r3, #2
 800cb3a:	4413      	add	r3, r2
 800cb3c:	005b      	lsls	r3, r3, #1
 800cb3e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800cb40:	e002      	b.n	800cb48 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800cb42:	68bb      	ldr	r3, [r7, #8]
 800cb44:	3b01      	subs	r3, #1
 800cb46:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800cb48:	68bb      	ldr	r3, [r7, #8]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d1f9      	bne.n	800cb42 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	2200      	movs	r2, #0
 800cb52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800cb56:	2300      	movs	r3, #0
}
 800cb58:	4618      	mov	r0, r3
 800cb5a:	3714      	adds	r7, #20
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb62:	4770      	bx	lr
 800cb64:	40012300 	.word	0x40012300
 800cb68:	40012000 	.word	0x40012000
 800cb6c:	10000012 	.word	0x10000012
 800cb70:	20000088 	.word	0x20000088
 800cb74:	431bde83 	.word	0x431bde83

0800cb78 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800cb78:	b480      	push	{r7}
 800cb7a:	b085      	sub	sp, #20
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800cb80:	4b79      	ldr	r3, [pc, #484]	; (800cd68 <ADC_Init+0x1f0>)
 800cb82:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	685b      	ldr	r3, [r3, #4]
 800cb88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	685a      	ldr	r2, [r3, #4]
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	685b      	ldr	r3, [r3, #4]
 800cb98:	431a      	orrs	r2, r3
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	685a      	ldr	r2, [r3, #4]
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cbac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	6859      	ldr	r1, [r3, #4]
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	691b      	ldr	r3, [r3, #16]
 800cbb8:	021a      	lsls	r2, r3, #8
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	430a      	orrs	r2, r1
 800cbc0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	685a      	ldr	r2, [r3, #4]
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800cbd0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	6859      	ldr	r1, [r3, #4]
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	689a      	ldr	r2, [r3, #8]
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	430a      	orrs	r2, r1
 800cbe2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	689a      	ldr	r2, [r3, #8]
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cbf2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	6899      	ldr	r1, [r3, #8]
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	68da      	ldr	r2, [r3, #12]
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	430a      	orrs	r2, r1
 800cc04:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc0a:	4a58      	ldr	r2, [pc, #352]	; (800cd6c <ADC_Init+0x1f4>)
 800cc0c:	4293      	cmp	r3, r2
 800cc0e:	d022      	beq.n	800cc56 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	689a      	ldr	r2, [r3, #8]
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800cc1e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	6899      	ldr	r1, [r3, #8]
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	430a      	orrs	r2, r1
 800cc30:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	689a      	ldr	r2, [r3, #8]
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800cc40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	6899      	ldr	r1, [r3, #8]
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	430a      	orrs	r2, r1
 800cc52:	609a      	str	r2, [r3, #8]
 800cc54:	e00f      	b.n	800cc76 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	689a      	ldr	r2, [r3, #8]
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800cc64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	689a      	ldr	r2, [r3, #8]
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800cc74:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	689a      	ldr	r2, [r3, #8]
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	f022 0202 	bic.w	r2, r2, #2
 800cc84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	6899      	ldr	r1, [r3, #8]
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	7e1b      	ldrb	r3, [r3, #24]
 800cc90:	005a      	lsls	r2, r3, #1
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	430a      	orrs	r2, r1
 800cc98:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d01b      	beq.n	800ccdc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	685a      	ldr	r2, [r3, #4]
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ccb2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	685a      	ldr	r2, [r3, #4]
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800ccc2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	6859      	ldr	r1, [r3, #4]
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccce:	3b01      	subs	r3, #1
 800ccd0:	035a      	lsls	r2, r3, #13
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	430a      	orrs	r2, r1
 800ccd8:	605a      	str	r2, [r3, #4]
 800ccda:	e007      	b.n	800ccec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	685a      	ldr	r2, [r3, #4]
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ccea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800ccfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	69db      	ldr	r3, [r3, #28]
 800cd06:	3b01      	subs	r3, #1
 800cd08:	051a      	lsls	r2, r3, #20
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	430a      	orrs	r2, r1
 800cd10:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	689a      	ldr	r2, [r3, #8]
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800cd20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	6899      	ldr	r1, [r3, #8]
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cd2e:	025a      	lsls	r2, r3, #9
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	430a      	orrs	r2, r1
 800cd36:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	689a      	ldr	r2, [r3, #8]
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cd46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	6899      	ldr	r1, [r3, #8]
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	695b      	ldr	r3, [r3, #20]
 800cd52:	029a      	lsls	r2, r3, #10
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	430a      	orrs	r2, r1
 800cd5a:	609a      	str	r2, [r3, #8]
}
 800cd5c:	bf00      	nop
 800cd5e:	3714      	adds	r7, #20
 800cd60:	46bd      	mov	sp, r7
 800cd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd66:	4770      	bx	lr
 800cd68:	40012300 	.word	0x40012300
 800cd6c:	0f000001 	.word	0x0f000001

0800cd70 <__NVIC_SetPriorityGrouping>:
{
 800cd70:	b480      	push	{r7}
 800cd72:	b085      	sub	sp, #20
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f003 0307 	and.w	r3, r3, #7
 800cd7e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800cd80:	4b0c      	ldr	r3, [pc, #48]	; (800cdb4 <__NVIC_SetPriorityGrouping+0x44>)
 800cd82:	68db      	ldr	r3, [r3, #12]
 800cd84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800cd86:	68ba      	ldr	r2, [r7, #8]
 800cd88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800cd8c:	4013      	ands	r3, r2
 800cd8e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800cd94:	68bb      	ldr	r3, [r7, #8]
 800cd96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800cd98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800cd9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cda0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800cda2:	4a04      	ldr	r2, [pc, #16]	; (800cdb4 <__NVIC_SetPriorityGrouping+0x44>)
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	60d3      	str	r3, [r2, #12]
}
 800cda8:	bf00      	nop
 800cdaa:	3714      	adds	r7, #20
 800cdac:	46bd      	mov	sp, r7
 800cdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb2:	4770      	bx	lr
 800cdb4:	e000ed00 	.word	0xe000ed00

0800cdb8 <__NVIC_GetPriorityGrouping>:
{
 800cdb8:	b480      	push	{r7}
 800cdba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800cdbc:	4b04      	ldr	r3, [pc, #16]	; (800cdd0 <__NVIC_GetPriorityGrouping+0x18>)
 800cdbe:	68db      	ldr	r3, [r3, #12]
 800cdc0:	0a1b      	lsrs	r3, r3, #8
 800cdc2:	f003 0307 	and.w	r3, r3, #7
}
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdce:	4770      	bx	lr
 800cdd0:	e000ed00 	.word	0xe000ed00

0800cdd4 <__NVIC_EnableIRQ>:
{
 800cdd4:	b480      	push	{r7}
 800cdd6:	b083      	sub	sp, #12
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	4603      	mov	r3, r0
 800cddc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cdde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	db0b      	blt.n	800cdfe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800cde6:	79fb      	ldrb	r3, [r7, #7]
 800cde8:	f003 021f 	and.w	r2, r3, #31
 800cdec:	4907      	ldr	r1, [pc, #28]	; (800ce0c <__NVIC_EnableIRQ+0x38>)
 800cdee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cdf2:	095b      	lsrs	r3, r3, #5
 800cdf4:	2001      	movs	r0, #1
 800cdf6:	fa00 f202 	lsl.w	r2, r0, r2
 800cdfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800cdfe:	bf00      	nop
 800ce00:	370c      	adds	r7, #12
 800ce02:	46bd      	mov	sp, r7
 800ce04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce08:	4770      	bx	lr
 800ce0a:	bf00      	nop
 800ce0c:	e000e100 	.word	0xe000e100

0800ce10 <__NVIC_DisableIRQ>:
{
 800ce10:	b480      	push	{r7}
 800ce12:	b083      	sub	sp, #12
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	4603      	mov	r3, r0
 800ce18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ce1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	db12      	blt.n	800ce48 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ce22:	79fb      	ldrb	r3, [r7, #7]
 800ce24:	f003 021f 	and.w	r2, r3, #31
 800ce28:	490a      	ldr	r1, [pc, #40]	; (800ce54 <__NVIC_DisableIRQ+0x44>)
 800ce2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce2e:	095b      	lsrs	r3, r3, #5
 800ce30:	2001      	movs	r0, #1
 800ce32:	fa00 f202 	lsl.w	r2, r0, r2
 800ce36:	3320      	adds	r3, #32
 800ce38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800ce3c:	f3bf 8f4f 	dsb	sy
}
 800ce40:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ce42:	f3bf 8f6f 	isb	sy
}
 800ce46:	bf00      	nop
}
 800ce48:	bf00      	nop
 800ce4a:	370c      	adds	r7, #12
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce52:	4770      	bx	lr
 800ce54:	e000e100 	.word	0xe000e100

0800ce58 <__NVIC_SetPriority>:
{
 800ce58:	b480      	push	{r7}
 800ce5a:	b083      	sub	sp, #12
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	4603      	mov	r3, r0
 800ce60:	6039      	str	r1, [r7, #0]
 800ce62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ce64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	db0a      	blt.n	800ce82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	b2da      	uxtb	r2, r3
 800ce70:	490c      	ldr	r1, [pc, #48]	; (800cea4 <__NVIC_SetPriority+0x4c>)
 800ce72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce76:	0112      	lsls	r2, r2, #4
 800ce78:	b2d2      	uxtb	r2, r2
 800ce7a:	440b      	add	r3, r1
 800ce7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ce80:	e00a      	b.n	800ce98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	b2da      	uxtb	r2, r3
 800ce86:	4908      	ldr	r1, [pc, #32]	; (800cea8 <__NVIC_SetPriority+0x50>)
 800ce88:	79fb      	ldrb	r3, [r7, #7]
 800ce8a:	f003 030f 	and.w	r3, r3, #15
 800ce8e:	3b04      	subs	r3, #4
 800ce90:	0112      	lsls	r2, r2, #4
 800ce92:	b2d2      	uxtb	r2, r2
 800ce94:	440b      	add	r3, r1
 800ce96:	761a      	strb	r2, [r3, #24]
}
 800ce98:	bf00      	nop
 800ce9a:	370c      	adds	r7, #12
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea2:	4770      	bx	lr
 800cea4:	e000e100 	.word	0xe000e100
 800cea8:	e000ed00 	.word	0xe000ed00

0800ceac <NVIC_EncodePriority>:
{
 800ceac:	b480      	push	{r7}
 800ceae:	b089      	sub	sp, #36	; 0x24
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	60f8      	str	r0, [r7, #12]
 800ceb4:	60b9      	str	r1, [r7, #8]
 800ceb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	f003 0307 	and.w	r3, r3, #7
 800cebe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800cec0:	69fb      	ldr	r3, [r7, #28]
 800cec2:	f1c3 0307 	rsb	r3, r3, #7
 800cec6:	2b04      	cmp	r3, #4
 800cec8:	bf28      	it	cs
 800ceca:	2304      	movcs	r3, #4
 800cecc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800cece:	69fb      	ldr	r3, [r7, #28]
 800ced0:	3304      	adds	r3, #4
 800ced2:	2b06      	cmp	r3, #6
 800ced4:	d902      	bls.n	800cedc <NVIC_EncodePriority+0x30>
 800ced6:	69fb      	ldr	r3, [r7, #28]
 800ced8:	3b03      	subs	r3, #3
 800ceda:	e000      	b.n	800cede <NVIC_EncodePriority+0x32>
 800cedc:	2300      	movs	r3, #0
 800cede:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800cee0:	f04f 32ff 	mov.w	r2, #4294967295
 800cee4:	69bb      	ldr	r3, [r7, #24]
 800cee6:	fa02 f303 	lsl.w	r3, r2, r3
 800ceea:	43da      	mvns	r2, r3
 800ceec:	68bb      	ldr	r3, [r7, #8]
 800ceee:	401a      	ands	r2, r3
 800cef0:	697b      	ldr	r3, [r7, #20]
 800cef2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800cef4:	f04f 31ff 	mov.w	r1, #4294967295
 800cef8:	697b      	ldr	r3, [r7, #20]
 800cefa:	fa01 f303 	lsl.w	r3, r1, r3
 800cefe:	43d9      	mvns	r1, r3
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800cf04:	4313      	orrs	r3, r2
}
 800cf06:	4618      	mov	r0, r3
 800cf08:	3724      	adds	r7, #36	; 0x24
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf10:	4770      	bx	lr

0800cf12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800cf12:	b580      	push	{r7, lr}
 800cf14:	b082      	sub	sp, #8
 800cf16:	af00      	add	r7, sp, #0
 800cf18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f7ff ff28 	bl	800cd70 <__NVIC_SetPriorityGrouping>
}
 800cf20:	bf00      	nop
 800cf22:	3708      	adds	r7, #8
 800cf24:	46bd      	mov	sp, r7
 800cf26:	bd80      	pop	{r7, pc}

0800cf28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b086      	sub	sp, #24
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	4603      	mov	r3, r0
 800cf30:	60b9      	str	r1, [r7, #8]
 800cf32:	607a      	str	r2, [r7, #4]
 800cf34:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800cf36:	2300      	movs	r3, #0
 800cf38:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800cf3a:	f7ff ff3d 	bl	800cdb8 <__NVIC_GetPriorityGrouping>
 800cf3e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800cf40:	687a      	ldr	r2, [r7, #4]
 800cf42:	68b9      	ldr	r1, [r7, #8]
 800cf44:	6978      	ldr	r0, [r7, #20]
 800cf46:	f7ff ffb1 	bl	800ceac <NVIC_EncodePriority>
 800cf4a:	4602      	mov	r2, r0
 800cf4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf50:	4611      	mov	r1, r2
 800cf52:	4618      	mov	r0, r3
 800cf54:	f7ff ff80 	bl	800ce58 <__NVIC_SetPriority>
}
 800cf58:	bf00      	nop
 800cf5a:	3718      	adds	r7, #24
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	bd80      	pop	{r7, pc}

0800cf60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b082      	sub	sp, #8
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	4603      	mov	r3, r0
 800cf68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800cf6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f7ff ff30 	bl	800cdd4 <__NVIC_EnableIRQ>
}
 800cf74:	bf00      	nop
 800cf76:	3708      	adds	r7, #8
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bd80      	pop	{r7, pc}

0800cf7c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b082      	sub	sp, #8
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	4603      	mov	r3, r0
 800cf84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800cf86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	f7ff ff40 	bl	800ce10 <__NVIC_DisableIRQ>
}
 800cf90:	bf00      	nop
 800cf92:	3708      	adds	r7, #8
 800cf94:	46bd      	mov	sp, r7
 800cf96:	bd80      	pop	{r7, pc}

0800cf98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800cf98:	b480      	push	{r7}
 800cf9a:	b089      	sub	sp, #36	; 0x24
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
 800cfa0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800cfaa:	2300      	movs	r3, #0
 800cfac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800cfae:	2300      	movs	r3, #0
 800cfb0:	61fb      	str	r3, [r7, #28]
 800cfb2:	e177      	b.n	800d2a4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800cfb4:	2201      	movs	r2, #1
 800cfb6:	69fb      	ldr	r3, [r7, #28]
 800cfb8:	fa02 f303 	lsl.w	r3, r2, r3
 800cfbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	697a      	ldr	r2, [r7, #20]
 800cfc4:	4013      	ands	r3, r2
 800cfc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800cfc8:	693a      	ldr	r2, [r7, #16]
 800cfca:	697b      	ldr	r3, [r7, #20]
 800cfcc:	429a      	cmp	r2, r3
 800cfce:	f040 8166 	bne.w	800d29e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	685b      	ldr	r3, [r3, #4]
 800cfd6:	f003 0303 	and.w	r3, r3, #3
 800cfda:	2b01      	cmp	r3, #1
 800cfdc:	d005      	beq.n	800cfea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	685b      	ldr	r3, [r3, #4]
 800cfe2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800cfe6:	2b02      	cmp	r3, #2
 800cfe8:	d130      	bne.n	800d04c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	689b      	ldr	r3, [r3, #8]
 800cfee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800cff0:	69fb      	ldr	r3, [r7, #28]
 800cff2:	005b      	lsls	r3, r3, #1
 800cff4:	2203      	movs	r2, #3
 800cff6:	fa02 f303 	lsl.w	r3, r2, r3
 800cffa:	43db      	mvns	r3, r3
 800cffc:	69ba      	ldr	r2, [r7, #24]
 800cffe:	4013      	ands	r3, r2
 800d000:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	68da      	ldr	r2, [r3, #12]
 800d006:	69fb      	ldr	r3, [r7, #28]
 800d008:	005b      	lsls	r3, r3, #1
 800d00a:	fa02 f303 	lsl.w	r3, r2, r3
 800d00e:	69ba      	ldr	r2, [r7, #24]
 800d010:	4313      	orrs	r3, r2
 800d012:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	69ba      	ldr	r2, [r7, #24]
 800d018:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	685b      	ldr	r3, [r3, #4]
 800d01e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800d020:	2201      	movs	r2, #1
 800d022:	69fb      	ldr	r3, [r7, #28]
 800d024:	fa02 f303 	lsl.w	r3, r2, r3
 800d028:	43db      	mvns	r3, r3
 800d02a:	69ba      	ldr	r2, [r7, #24]
 800d02c:	4013      	ands	r3, r2
 800d02e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	685b      	ldr	r3, [r3, #4]
 800d034:	091b      	lsrs	r3, r3, #4
 800d036:	f003 0201 	and.w	r2, r3, #1
 800d03a:	69fb      	ldr	r3, [r7, #28]
 800d03c:	fa02 f303 	lsl.w	r3, r2, r3
 800d040:	69ba      	ldr	r2, [r7, #24]
 800d042:	4313      	orrs	r3, r2
 800d044:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	69ba      	ldr	r2, [r7, #24]
 800d04a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	685b      	ldr	r3, [r3, #4]
 800d050:	f003 0303 	and.w	r3, r3, #3
 800d054:	2b03      	cmp	r3, #3
 800d056:	d017      	beq.n	800d088 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	68db      	ldr	r3, [r3, #12]
 800d05c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800d05e:	69fb      	ldr	r3, [r7, #28]
 800d060:	005b      	lsls	r3, r3, #1
 800d062:	2203      	movs	r2, #3
 800d064:	fa02 f303 	lsl.w	r3, r2, r3
 800d068:	43db      	mvns	r3, r3
 800d06a:	69ba      	ldr	r2, [r7, #24]
 800d06c:	4013      	ands	r3, r2
 800d06e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	689a      	ldr	r2, [r3, #8]
 800d074:	69fb      	ldr	r3, [r7, #28]
 800d076:	005b      	lsls	r3, r3, #1
 800d078:	fa02 f303 	lsl.w	r3, r2, r3
 800d07c:	69ba      	ldr	r2, [r7, #24]
 800d07e:	4313      	orrs	r3, r2
 800d080:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	69ba      	ldr	r2, [r7, #24]
 800d086:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d088:	683b      	ldr	r3, [r7, #0]
 800d08a:	685b      	ldr	r3, [r3, #4]
 800d08c:	f003 0303 	and.w	r3, r3, #3
 800d090:	2b02      	cmp	r3, #2
 800d092:	d123      	bne.n	800d0dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800d094:	69fb      	ldr	r3, [r7, #28]
 800d096:	08da      	lsrs	r2, r3, #3
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	3208      	adds	r2, #8
 800d09c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800d0a2:	69fb      	ldr	r3, [r7, #28]
 800d0a4:	f003 0307 	and.w	r3, r3, #7
 800d0a8:	009b      	lsls	r3, r3, #2
 800d0aa:	220f      	movs	r2, #15
 800d0ac:	fa02 f303 	lsl.w	r3, r2, r3
 800d0b0:	43db      	mvns	r3, r3
 800d0b2:	69ba      	ldr	r2, [r7, #24]
 800d0b4:	4013      	ands	r3, r2
 800d0b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	691a      	ldr	r2, [r3, #16]
 800d0bc:	69fb      	ldr	r3, [r7, #28]
 800d0be:	f003 0307 	and.w	r3, r3, #7
 800d0c2:	009b      	lsls	r3, r3, #2
 800d0c4:	fa02 f303 	lsl.w	r3, r2, r3
 800d0c8:	69ba      	ldr	r2, [r7, #24]
 800d0ca:	4313      	orrs	r3, r2
 800d0cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800d0ce:	69fb      	ldr	r3, [r7, #28]
 800d0d0:	08da      	lsrs	r2, r3, #3
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	3208      	adds	r2, #8
 800d0d6:	69b9      	ldr	r1, [r7, #24]
 800d0d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800d0e2:	69fb      	ldr	r3, [r7, #28]
 800d0e4:	005b      	lsls	r3, r3, #1
 800d0e6:	2203      	movs	r2, #3
 800d0e8:	fa02 f303 	lsl.w	r3, r2, r3
 800d0ec:	43db      	mvns	r3, r3
 800d0ee:	69ba      	ldr	r2, [r7, #24]
 800d0f0:	4013      	ands	r3, r2
 800d0f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d0f4:	683b      	ldr	r3, [r7, #0]
 800d0f6:	685b      	ldr	r3, [r3, #4]
 800d0f8:	f003 0203 	and.w	r2, r3, #3
 800d0fc:	69fb      	ldr	r3, [r7, #28]
 800d0fe:	005b      	lsls	r3, r3, #1
 800d100:	fa02 f303 	lsl.w	r3, r2, r3
 800d104:	69ba      	ldr	r2, [r7, #24]
 800d106:	4313      	orrs	r3, r2
 800d108:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	69ba      	ldr	r2, [r7, #24]
 800d10e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	685b      	ldr	r3, [r3, #4]
 800d114:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d118:	2b00      	cmp	r3, #0
 800d11a:	f000 80c0 	beq.w	800d29e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d11e:	2300      	movs	r3, #0
 800d120:	60fb      	str	r3, [r7, #12]
 800d122:	4b66      	ldr	r3, [pc, #408]	; (800d2bc <HAL_GPIO_Init+0x324>)
 800d124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d126:	4a65      	ldr	r2, [pc, #404]	; (800d2bc <HAL_GPIO_Init+0x324>)
 800d128:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d12c:	6453      	str	r3, [r2, #68]	; 0x44
 800d12e:	4b63      	ldr	r3, [pc, #396]	; (800d2bc <HAL_GPIO_Init+0x324>)
 800d130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d136:	60fb      	str	r3, [r7, #12]
 800d138:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800d13a:	4a61      	ldr	r2, [pc, #388]	; (800d2c0 <HAL_GPIO_Init+0x328>)
 800d13c:	69fb      	ldr	r3, [r7, #28]
 800d13e:	089b      	lsrs	r3, r3, #2
 800d140:	3302      	adds	r3, #2
 800d142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d146:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800d148:	69fb      	ldr	r3, [r7, #28]
 800d14a:	f003 0303 	and.w	r3, r3, #3
 800d14e:	009b      	lsls	r3, r3, #2
 800d150:	220f      	movs	r2, #15
 800d152:	fa02 f303 	lsl.w	r3, r2, r3
 800d156:	43db      	mvns	r3, r3
 800d158:	69ba      	ldr	r2, [r7, #24]
 800d15a:	4013      	ands	r3, r2
 800d15c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	4a58      	ldr	r2, [pc, #352]	; (800d2c4 <HAL_GPIO_Init+0x32c>)
 800d162:	4293      	cmp	r3, r2
 800d164:	d037      	beq.n	800d1d6 <HAL_GPIO_Init+0x23e>
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	4a57      	ldr	r2, [pc, #348]	; (800d2c8 <HAL_GPIO_Init+0x330>)
 800d16a:	4293      	cmp	r3, r2
 800d16c:	d031      	beq.n	800d1d2 <HAL_GPIO_Init+0x23a>
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	4a56      	ldr	r2, [pc, #344]	; (800d2cc <HAL_GPIO_Init+0x334>)
 800d172:	4293      	cmp	r3, r2
 800d174:	d02b      	beq.n	800d1ce <HAL_GPIO_Init+0x236>
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	4a55      	ldr	r2, [pc, #340]	; (800d2d0 <HAL_GPIO_Init+0x338>)
 800d17a:	4293      	cmp	r3, r2
 800d17c:	d025      	beq.n	800d1ca <HAL_GPIO_Init+0x232>
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	4a54      	ldr	r2, [pc, #336]	; (800d2d4 <HAL_GPIO_Init+0x33c>)
 800d182:	4293      	cmp	r3, r2
 800d184:	d01f      	beq.n	800d1c6 <HAL_GPIO_Init+0x22e>
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	4a53      	ldr	r2, [pc, #332]	; (800d2d8 <HAL_GPIO_Init+0x340>)
 800d18a:	4293      	cmp	r3, r2
 800d18c:	d019      	beq.n	800d1c2 <HAL_GPIO_Init+0x22a>
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	4a52      	ldr	r2, [pc, #328]	; (800d2dc <HAL_GPIO_Init+0x344>)
 800d192:	4293      	cmp	r3, r2
 800d194:	d013      	beq.n	800d1be <HAL_GPIO_Init+0x226>
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	4a51      	ldr	r2, [pc, #324]	; (800d2e0 <HAL_GPIO_Init+0x348>)
 800d19a:	4293      	cmp	r3, r2
 800d19c:	d00d      	beq.n	800d1ba <HAL_GPIO_Init+0x222>
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	4a50      	ldr	r2, [pc, #320]	; (800d2e4 <HAL_GPIO_Init+0x34c>)
 800d1a2:	4293      	cmp	r3, r2
 800d1a4:	d007      	beq.n	800d1b6 <HAL_GPIO_Init+0x21e>
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	4a4f      	ldr	r2, [pc, #316]	; (800d2e8 <HAL_GPIO_Init+0x350>)
 800d1aa:	4293      	cmp	r3, r2
 800d1ac:	d101      	bne.n	800d1b2 <HAL_GPIO_Init+0x21a>
 800d1ae:	2309      	movs	r3, #9
 800d1b0:	e012      	b.n	800d1d8 <HAL_GPIO_Init+0x240>
 800d1b2:	230a      	movs	r3, #10
 800d1b4:	e010      	b.n	800d1d8 <HAL_GPIO_Init+0x240>
 800d1b6:	2308      	movs	r3, #8
 800d1b8:	e00e      	b.n	800d1d8 <HAL_GPIO_Init+0x240>
 800d1ba:	2307      	movs	r3, #7
 800d1bc:	e00c      	b.n	800d1d8 <HAL_GPIO_Init+0x240>
 800d1be:	2306      	movs	r3, #6
 800d1c0:	e00a      	b.n	800d1d8 <HAL_GPIO_Init+0x240>
 800d1c2:	2305      	movs	r3, #5
 800d1c4:	e008      	b.n	800d1d8 <HAL_GPIO_Init+0x240>
 800d1c6:	2304      	movs	r3, #4
 800d1c8:	e006      	b.n	800d1d8 <HAL_GPIO_Init+0x240>
 800d1ca:	2303      	movs	r3, #3
 800d1cc:	e004      	b.n	800d1d8 <HAL_GPIO_Init+0x240>
 800d1ce:	2302      	movs	r3, #2
 800d1d0:	e002      	b.n	800d1d8 <HAL_GPIO_Init+0x240>
 800d1d2:	2301      	movs	r3, #1
 800d1d4:	e000      	b.n	800d1d8 <HAL_GPIO_Init+0x240>
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	69fa      	ldr	r2, [r7, #28]
 800d1da:	f002 0203 	and.w	r2, r2, #3
 800d1de:	0092      	lsls	r2, r2, #2
 800d1e0:	4093      	lsls	r3, r2
 800d1e2:	69ba      	ldr	r2, [r7, #24]
 800d1e4:	4313      	orrs	r3, r2
 800d1e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d1e8:	4935      	ldr	r1, [pc, #212]	; (800d2c0 <HAL_GPIO_Init+0x328>)
 800d1ea:	69fb      	ldr	r3, [r7, #28]
 800d1ec:	089b      	lsrs	r3, r3, #2
 800d1ee:	3302      	adds	r3, #2
 800d1f0:	69ba      	ldr	r2, [r7, #24]
 800d1f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800d1f6:	4b3d      	ldr	r3, [pc, #244]	; (800d2ec <HAL_GPIO_Init+0x354>)
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d1fc:	693b      	ldr	r3, [r7, #16]
 800d1fe:	43db      	mvns	r3, r3
 800d200:	69ba      	ldr	r2, [r7, #24]
 800d202:	4013      	ands	r3, r2
 800d204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800d206:	683b      	ldr	r3, [r7, #0]
 800d208:	685b      	ldr	r3, [r3, #4]
 800d20a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d003      	beq.n	800d21a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800d212:	69ba      	ldr	r2, [r7, #24]
 800d214:	693b      	ldr	r3, [r7, #16]
 800d216:	4313      	orrs	r3, r2
 800d218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800d21a:	4a34      	ldr	r2, [pc, #208]	; (800d2ec <HAL_GPIO_Init+0x354>)
 800d21c:	69bb      	ldr	r3, [r7, #24]
 800d21e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800d220:	4b32      	ldr	r3, [pc, #200]	; (800d2ec <HAL_GPIO_Init+0x354>)
 800d222:	685b      	ldr	r3, [r3, #4]
 800d224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d226:	693b      	ldr	r3, [r7, #16]
 800d228:	43db      	mvns	r3, r3
 800d22a:	69ba      	ldr	r2, [r7, #24]
 800d22c:	4013      	ands	r3, r2
 800d22e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	685b      	ldr	r3, [r3, #4]
 800d234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d003      	beq.n	800d244 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800d23c:	69ba      	ldr	r2, [r7, #24]
 800d23e:	693b      	ldr	r3, [r7, #16]
 800d240:	4313      	orrs	r3, r2
 800d242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800d244:	4a29      	ldr	r2, [pc, #164]	; (800d2ec <HAL_GPIO_Init+0x354>)
 800d246:	69bb      	ldr	r3, [r7, #24]
 800d248:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800d24a:	4b28      	ldr	r3, [pc, #160]	; (800d2ec <HAL_GPIO_Init+0x354>)
 800d24c:	689b      	ldr	r3, [r3, #8]
 800d24e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d250:	693b      	ldr	r3, [r7, #16]
 800d252:	43db      	mvns	r3, r3
 800d254:	69ba      	ldr	r2, [r7, #24]
 800d256:	4013      	ands	r3, r2
 800d258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	685b      	ldr	r3, [r3, #4]
 800d25e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d262:	2b00      	cmp	r3, #0
 800d264:	d003      	beq.n	800d26e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800d266:	69ba      	ldr	r2, [r7, #24]
 800d268:	693b      	ldr	r3, [r7, #16]
 800d26a:	4313      	orrs	r3, r2
 800d26c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800d26e:	4a1f      	ldr	r2, [pc, #124]	; (800d2ec <HAL_GPIO_Init+0x354>)
 800d270:	69bb      	ldr	r3, [r7, #24]
 800d272:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800d274:	4b1d      	ldr	r3, [pc, #116]	; (800d2ec <HAL_GPIO_Init+0x354>)
 800d276:	68db      	ldr	r3, [r3, #12]
 800d278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d27a:	693b      	ldr	r3, [r7, #16]
 800d27c:	43db      	mvns	r3, r3
 800d27e:	69ba      	ldr	r2, [r7, #24]
 800d280:	4013      	ands	r3, r2
 800d282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	685b      	ldr	r3, [r3, #4]
 800d288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d003      	beq.n	800d298 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800d290:	69ba      	ldr	r2, [r7, #24]
 800d292:	693b      	ldr	r3, [r7, #16]
 800d294:	4313      	orrs	r3, r2
 800d296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800d298:	4a14      	ldr	r2, [pc, #80]	; (800d2ec <HAL_GPIO_Init+0x354>)
 800d29a:	69bb      	ldr	r3, [r7, #24]
 800d29c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d29e:	69fb      	ldr	r3, [r7, #28]
 800d2a0:	3301      	adds	r3, #1
 800d2a2:	61fb      	str	r3, [r7, #28]
 800d2a4:	69fb      	ldr	r3, [r7, #28]
 800d2a6:	2b0f      	cmp	r3, #15
 800d2a8:	f67f ae84 	bls.w	800cfb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800d2ac:	bf00      	nop
 800d2ae:	bf00      	nop
 800d2b0:	3724      	adds	r7, #36	; 0x24
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b8:	4770      	bx	lr
 800d2ba:	bf00      	nop
 800d2bc:	40023800 	.word	0x40023800
 800d2c0:	40013800 	.word	0x40013800
 800d2c4:	40020000 	.word	0x40020000
 800d2c8:	40020400 	.word	0x40020400
 800d2cc:	40020800 	.word	0x40020800
 800d2d0:	40020c00 	.word	0x40020c00
 800d2d4:	40021000 	.word	0x40021000
 800d2d8:	40021400 	.word	0x40021400
 800d2dc:	40021800 	.word	0x40021800
 800d2e0:	40021c00 	.word	0x40021c00
 800d2e4:	40022000 	.word	0x40022000
 800d2e8:	40022400 	.word	0x40022400
 800d2ec:	40013c00 	.word	0x40013c00

0800d2f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d2f0:	b480      	push	{r7}
 800d2f2:	b085      	sub	sp, #20
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
 800d2f8:	460b      	mov	r3, r1
 800d2fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	691a      	ldr	r2, [r3, #16]
 800d300:	887b      	ldrh	r3, [r7, #2]
 800d302:	4013      	ands	r3, r2
 800d304:	2b00      	cmp	r3, #0
 800d306:	d002      	beq.n	800d30e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800d308:	2301      	movs	r3, #1
 800d30a:	73fb      	strb	r3, [r7, #15]
 800d30c:	e001      	b.n	800d312 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800d30e:	2300      	movs	r3, #0
 800d310:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800d312:	7bfb      	ldrb	r3, [r7, #15]
}
 800d314:	4618      	mov	r0, r3
 800d316:	3714      	adds	r7, #20
 800d318:	46bd      	mov	sp, r7
 800d31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31e:	4770      	bx	lr

0800d320 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d320:	b480      	push	{r7}
 800d322:	b083      	sub	sp, #12
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
 800d328:	460b      	mov	r3, r1
 800d32a:	807b      	strh	r3, [r7, #2]
 800d32c:	4613      	mov	r3, r2
 800d32e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800d330:	787b      	ldrb	r3, [r7, #1]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d003      	beq.n	800d33e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d336:	887a      	ldrh	r2, [r7, #2]
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800d33c:	e003      	b.n	800d346 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800d33e:	887b      	ldrh	r3, [r7, #2]
 800d340:	041a      	lsls	r2, r3, #16
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	619a      	str	r2, [r3, #24]
}
 800d346:	bf00      	nop
 800d348:	370c      	adds	r7, #12
 800d34a:	46bd      	mov	sp, r7
 800d34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d350:	4770      	bx	lr
	...

0800d354 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b082      	sub	sp, #8
 800d358:	af00      	add	r7, sp, #0
 800d35a:	4603      	mov	r3, r0
 800d35c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800d35e:	4b08      	ldr	r3, [pc, #32]	; (800d380 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800d360:	695a      	ldr	r2, [r3, #20]
 800d362:	88fb      	ldrh	r3, [r7, #6]
 800d364:	4013      	ands	r3, r2
 800d366:	2b00      	cmp	r3, #0
 800d368:	d006      	beq.n	800d378 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800d36a:	4a05      	ldr	r2, [pc, #20]	; (800d380 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800d36c:	88fb      	ldrh	r3, [r7, #6]
 800d36e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800d370:	88fb      	ldrh	r3, [r7, #6]
 800d372:	4618      	mov	r0, r3
 800d374:	f7f6 f9d2 	bl	800371c <HAL_GPIO_EXTI_Callback>
  }
}
 800d378:	bf00      	nop
 800d37a:	3708      	adds	r7, #8
 800d37c:	46bd      	mov	sp, r7
 800d37e:	bd80      	pop	{r7, pc}
 800d380:	40013c00 	.word	0x40013c00

0800d384 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b084      	sub	sp, #16
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d101      	bne.n	800d396 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800d392:	2301      	movs	r3, #1
 800d394:	e12b      	b.n	800d5ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d39c:	b2db      	uxtb	r3, r3
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d106      	bne.n	800d3b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	f7f5 fa56 	bl	800285c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	2224      	movs	r2, #36	; 0x24
 800d3b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	681a      	ldr	r2, [r3, #0]
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	f022 0201 	bic.w	r2, r2, #1
 800d3c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	681a      	ldr	r2, [r3, #0]
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d3d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	681a      	ldr	r2, [r3, #0]
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d3e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800d3e8:	f001 fd66 	bl	800eeb8 <HAL_RCC_GetPCLK1Freq>
 800d3ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	685b      	ldr	r3, [r3, #4]
 800d3f2:	4a81      	ldr	r2, [pc, #516]	; (800d5f8 <HAL_I2C_Init+0x274>)
 800d3f4:	4293      	cmp	r3, r2
 800d3f6:	d807      	bhi.n	800d408 <HAL_I2C_Init+0x84>
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	4a80      	ldr	r2, [pc, #512]	; (800d5fc <HAL_I2C_Init+0x278>)
 800d3fc:	4293      	cmp	r3, r2
 800d3fe:	bf94      	ite	ls
 800d400:	2301      	movls	r3, #1
 800d402:	2300      	movhi	r3, #0
 800d404:	b2db      	uxtb	r3, r3
 800d406:	e006      	b.n	800d416 <HAL_I2C_Init+0x92>
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	4a7d      	ldr	r2, [pc, #500]	; (800d600 <HAL_I2C_Init+0x27c>)
 800d40c:	4293      	cmp	r3, r2
 800d40e:	bf94      	ite	ls
 800d410:	2301      	movls	r3, #1
 800d412:	2300      	movhi	r3, #0
 800d414:	b2db      	uxtb	r3, r3
 800d416:	2b00      	cmp	r3, #0
 800d418:	d001      	beq.n	800d41e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800d41a:	2301      	movs	r3, #1
 800d41c:	e0e7      	b.n	800d5ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	4a78      	ldr	r2, [pc, #480]	; (800d604 <HAL_I2C_Init+0x280>)
 800d422:	fba2 2303 	umull	r2, r3, r2, r3
 800d426:	0c9b      	lsrs	r3, r3, #18
 800d428:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	685b      	ldr	r3, [r3, #4]
 800d430:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	68ba      	ldr	r2, [r7, #8]
 800d43a:	430a      	orrs	r2, r1
 800d43c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	6a1b      	ldr	r3, [r3, #32]
 800d444:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	685b      	ldr	r3, [r3, #4]
 800d44c:	4a6a      	ldr	r2, [pc, #424]	; (800d5f8 <HAL_I2C_Init+0x274>)
 800d44e:	4293      	cmp	r3, r2
 800d450:	d802      	bhi.n	800d458 <HAL_I2C_Init+0xd4>
 800d452:	68bb      	ldr	r3, [r7, #8]
 800d454:	3301      	adds	r3, #1
 800d456:	e009      	b.n	800d46c <HAL_I2C_Init+0xe8>
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800d45e:	fb02 f303 	mul.w	r3, r2, r3
 800d462:	4a69      	ldr	r2, [pc, #420]	; (800d608 <HAL_I2C_Init+0x284>)
 800d464:	fba2 2303 	umull	r2, r3, r2, r3
 800d468:	099b      	lsrs	r3, r3, #6
 800d46a:	3301      	adds	r3, #1
 800d46c:	687a      	ldr	r2, [r7, #4]
 800d46e:	6812      	ldr	r2, [r2, #0]
 800d470:	430b      	orrs	r3, r1
 800d472:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	69db      	ldr	r3, [r3, #28]
 800d47a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800d47e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	685b      	ldr	r3, [r3, #4]
 800d486:	495c      	ldr	r1, [pc, #368]	; (800d5f8 <HAL_I2C_Init+0x274>)
 800d488:	428b      	cmp	r3, r1
 800d48a:	d819      	bhi.n	800d4c0 <HAL_I2C_Init+0x13c>
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	1e59      	subs	r1, r3, #1
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	685b      	ldr	r3, [r3, #4]
 800d494:	005b      	lsls	r3, r3, #1
 800d496:	fbb1 f3f3 	udiv	r3, r1, r3
 800d49a:	1c59      	adds	r1, r3, #1
 800d49c:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d4a0:	400b      	ands	r3, r1
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d00a      	beq.n	800d4bc <HAL_I2C_Init+0x138>
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	1e59      	subs	r1, r3, #1
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	685b      	ldr	r3, [r3, #4]
 800d4ae:	005b      	lsls	r3, r3, #1
 800d4b0:	fbb1 f3f3 	udiv	r3, r1, r3
 800d4b4:	3301      	adds	r3, #1
 800d4b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d4ba:	e051      	b.n	800d560 <HAL_I2C_Init+0x1dc>
 800d4bc:	2304      	movs	r3, #4
 800d4be:	e04f      	b.n	800d560 <HAL_I2C_Init+0x1dc>
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	689b      	ldr	r3, [r3, #8]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d111      	bne.n	800d4ec <HAL_I2C_Init+0x168>
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	1e58      	subs	r0, r3, #1
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	6859      	ldr	r1, [r3, #4]
 800d4d0:	460b      	mov	r3, r1
 800d4d2:	005b      	lsls	r3, r3, #1
 800d4d4:	440b      	add	r3, r1
 800d4d6:	fbb0 f3f3 	udiv	r3, r0, r3
 800d4da:	3301      	adds	r3, #1
 800d4dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	bf0c      	ite	eq
 800d4e4:	2301      	moveq	r3, #1
 800d4e6:	2300      	movne	r3, #0
 800d4e8:	b2db      	uxtb	r3, r3
 800d4ea:	e012      	b.n	800d512 <HAL_I2C_Init+0x18e>
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	1e58      	subs	r0, r3, #1
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	6859      	ldr	r1, [r3, #4]
 800d4f4:	460b      	mov	r3, r1
 800d4f6:	009b      	lsls	r3, r3, #2
 800d4f8:	440b      	add	r3, r1
 800d4fa:	0099      	lsls	r1, r3, #2
 800d4fc:	440b      	add	r3, r1
 800d4fe:	fbb0 f3f3 	udiv	r3, r0, r3
 800d502:	3301      	adds	r3, #1
 800d504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d508:	2b00      	cmp	r3, #0
 800d50a:	bf0c      	ite	eq
 800d50c:	2301      	moveq	r3, #1
 800d50e:	2300      	movne	r3, #0
 800d510:	b2db      	uxtb	r3, r3
 800d512:	2b00      	cmp	r3, #0
 800d514:	d001      	beq.n	800d51a <HAL_I2C_Init+0x196>
 800d516:	2301      	movs	r3, #1
 800d518:	e022      	b.n	800d560 <HAL_I2C_Init+0x1dc>
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	689b      	ldr	r3, [r3, #8]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d10e      	bne.n	800d540 <HAL_I2C_Init+0x1bc>
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	1e58      	subs	r0, r3, #1
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	6859      	ldr	r1, [r3, #4]
 800d52a:	460b      	mov	r3, r1
 800d52c:	005b      	lsls	r3, r3, #1
 800d52e:	440b      	add	r3, r1
 800d530:	fbb0 f3f3 	udiv	r3, r0, r3
 800d534:	3301      	adds	r3, #1
 800d536:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d53a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d53e:	e00f      	b.n	800d560 <HAL_I2C_Init+0x1dc>
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	1e58      	subs	r0, r3, #1
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	6859      	ldr	r1, [r3, #4]
 800d548:	460b      	mov	r3, r1
 800d54a:	009b      	lsls	r3, r3, #2
 800d54c:	440b      	add	r3, r1
 800d54e:	0099      	lsls	r1, r3, #2
 800d550:	440b      	add	r3, r1
 800d552:	fbb0 f3f3 	udiv	r3, r0, r3
 800d556:	3301      	adds	r3, #1
 800d558:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d55c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d560:	6879      	ldr	r1, [r7, #4]
 800d562:	6809      	ldr	r1, [r1, #0]
 800d564:	4313      	orrs	r3, r2
 800d566:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	69da      	ldr	r2, [r3, #28]
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	6a1b      	ldr	r3, [r3, #32]
 800d57a:	431a      	orrs	r2, r3
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	430a      	orrs	r2, r1
 800d582:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	689b      	ldr	r3, [r3, #8]
 800d58a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800d58e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d592:	687a      	ldr	r2, [r7, #4]
 800d594:	6911      	ldr	r1, [r2, #16]
 800d596:	687a      	ldr	r2, [r7, #4]
 800d598:	68d2      	ldr	r2, [r2, #12]
 800d59a:	4311      	orrs	r1, r2
 800d59c:	687a      	ldr	r2, [r7, #4]
 800d59e:	6812      	ldr	r2, [r2, #0]
 800d5a0:	430b      	orrs	r3, r1
 800d5a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	68db      	ldr	r3, [r3, #12]
 800d5aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	695a      	ldr	r2, [r3, #20]
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	699b      	ldr	r3, [r3, #24]
 800d5b6:	431a      	orrs	r2, r3
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	430a      	orrs	r2, r1
 800d5be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	681a      	ldr	r2, [r3, #0]
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	f042 0201 	orr.w	r2, r2, #1
 800d5ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	2220      	movs	r2, #32
 800d5da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800d5ec:	2300      	movs	r3, #0
}
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	3710      	adds	r7, #16
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bd80      	pop	{r7, pc}
 800d5f6:	bf00      	nop
 800d5f8:	000186a0 	.word	0x000186a0
 800d5fc:	001e847f 	.word	0x001e847f
 800d600:	003d08ff 	.word	0x003d08ff
 800d604:	431bde83 	.word	0x431bde83
 800d608:	10624dd3 	.word	0x10624dd3

0800d60c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b088      	sub	sp, #32
 800d610:	af02      	add	r7, sp, #8
 800d612:	60f8      	str	r0, [r7, #12]
 800d614:	4608      	mov	r0, r1
 800d616:	4611      	mov	r1, r2
 800d618:	461a      	mov	r2, r3
 800d61a:	4603      	mov	r3, r0
 800d61c:	817b      	strh	r3, [r7, #10]
 800d61e:	460b      	mov	r3, r1
 800d620:	813b      	strh	r3, [r7, #8]
 800d622:	4613      	mov	r3, r2
 800d624:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d626:	f7fe ff63 	bl	800c4f0 <HAL_GetTick>
 800d62a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d632:	b2db      	uxtb	r3, r3
 800d634:	2b20      	cmp	r3, #32
 800d636:	f040 80d9 	bne.w	800d7ec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d63a:	697b      	ldr	r3, [r7, #20]
 800d63c:	9300      	str	r3, [sp, #0]
 800d63e:	2319      	movs	r3, #25
 800d640:	2201      	movs	r2, #1
 800d642:	496d      	ldr	r1, [pc, #436]	; (800d7f8 <HAL_I2C_Mem_Write+0x1ec>)
 800d644:	68f8      	ldr	r0, [r7, #12]
 800d646:	f000 fcb5 	bl	800dfb4 <I2C_WaitOnFlagUntilTimeout>
 800d64a:	4603      	mov	r3, r0
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d001      	beq.n	800d654 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800d650:	2302      	movs	r3, #2
 800d652:	e0cc      	b.n	800d7ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d65a:	2b01      	cmp	r3, #1
 800d65c:	d101      	bne.n	800d662 <HAL_I2C_Mem_Write+0x56>
 800d65e:	2302      	movs	r3, #2
 800d660:	e0c5      	b.n	800d7ee <HAL_I2C_Mem_Write+0x1e2>
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	2201      	movs	r2, #1
 800d666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	f003 0301 	and.w	r3, r3, #1
 800d674:	2b01      	cmp	r3, #1
 800d676:	d007      	beq.n	800d688 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	681a      	ldr	r2, [r3, #0]
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	f042 0201 	orr.w	r2, r2, #1
 800d686:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	681a      	ldr	r2, [r3, #0]
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d696:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	2221      	movs	r2, #33	; 0x21
 800d69c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	2240      	movs	r2, #64	; 0x40
 800d6a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	6a3a      	ldr	r2, [r7, #32]
 800d6b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d6b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d6be:	b29a      	uxth	r2, r3
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	4a4d      	ldr	r2, [pc, #308]	; (800d7fc <HAL_I2C_Mem_Write+0x1f0>)
 800d6c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d6ca:	88f8      	ldrh	r0, [r7, #6]
 800d6cc:	893a      	ldrh	r2, [r7, #8]
 800d6ce:	8979      	ldrh	r1, [r7, #10]
 800d6d0:	697b      	ldr	r3, [r7, #20]
 800d6d2:	9301      	str	r3, [sp, #4]
 800d6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d6:	9300      	str	r3, [sp, #0]
 800d6d8:	4603      	mov	r3, r0
 800d6da:	68f8      	ldr	r0, [r7, #12]
 800d6dc:	f000 faec 	bl	800dcb8 <I2C_RequestMemoryWrite>
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d052      	beq.n	800d78c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800d6e6:	2301      	movs	r3, #1
 800d6e8:	e081      	b.n	800d7ee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d6ea:	697a      	ldr	r2, [r7, #20]
 800d6ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d6ee:	68f8      	ldr	r0, [r7, #12]
 800d6f0:	f000 fd36 	bl	800e160 <I2C_WaitOnTXEFlagUntilTimeout>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d00d      	beq.n	800d716 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6fe:	2b04      	cmp	r3, #4
 800d700:	d107      	bne.n	800d712 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	681a      	ldr	r2, [r3, #0]
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d710:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800d712:	2301      	movs	r3, #1
 800d714:	e06b      	b.n	800d7ee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d71a:	781a      	ldrb	r2, [r3, #0]
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d726:	1c5a      	adds	r2, r3, #1
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d730:	3b01      	subs	r3, #1
 800d732:	b29a      	uxth	r2, r3
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d73c:	b29b      	uxth	r3, r3
 800d73e:	3b01      	subs	r3, #1
 800d740:	b29a      	uxth	r2, r3
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	695b      	ldr	r3, [r3, #20]
 800d74c:	f003 0304 	and.w	r3, r3, #4
 800d750:	2b04      	cmp	r3, #4
 800d752:	d11b      	bne.n	800d78c <HAL_I2C_Mem_Write+0x180>
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d017      	beq.n	800d78c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d760:	781a      	ldrb	r2, [r3, #0]
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d76c:	1c5a      	adds	r2, r3, #1
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d776:	3b01      	subs	r3, #1
 800d778:	b29a      	uxth	r2, r3
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d782:	b29b      	uxth	r3, r3
 800d784:	3b01      	subs	r3, #1
 800d786:	b29a      	uxth	r2, r3
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d790:	2b00      	cmp	r3, #0
 800d792:	d1aa      	bne.n	800d6ea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d794:	697a      	ldr	r2, [r7, #20]
 800d796:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d798:	68f8      	ldr	r0, [r7, #12]
 800d79a:	f000 fd22 	bl	800e1e2 <I2C_WaitOnBTFFlagUntilTimeout>
 800d79e:	4603      	mov	r3, r0
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d00d      	beq.n	800d7c0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7a8:	2b04      	cmp	r3, #4
 800d7aa:	d107      	bne.n	800d7bc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	681a      	ldr	r2, [r3, #0]
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d7ba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800d7bc:	2301      	movs	r3, #1
 800d7be:	e016      	b.n	800d7ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	681a      	ldr	r2, [r3, #0]
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d7ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	2220      	movs	r2, #32
 800d7d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	2200      	movs	r2, #0
 800d7dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	e000      	b.n	800d7ee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800d7ec:	2302      	movs	r3, #2
  }
}
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	3718      	adds	r7, #24
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	bd80      	pop	{r7, pc}
 800d7f6:	bf00      	nop
 800d7f8:	00100002 	.word	0x00100002
 800d7fc:	ffff0000 	.word	0xffff0000

0800d800 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b08c      	sub	sp, #48	; 0x30
 800d804:	af02      	add	r7, sp, #8
 800d806:	60f8      	str	r0, [r7, #12]
 800d808:	4608      	mov	r0, r1
 800d80a:	4611      	mov	r1, r2
 800d80c:	461a      	mov	r2, r3
 800d80e:	4603      	mov	r3, r0
 800d810:	817b      	strh	r3, [r7, #10]
 800d812:	460b      	mov	r3, r1
 800d814:	813b      	strh	r3, [r7, #8]
 800d816:	4613      	mov	r3, r2
 800d818:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d81a:	f7fe fe69 	bl	800c4f0 <HAL_GetTick>
 800d81e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d826:	b2db      	uxtb	r3, r3
 800d828:	2b20      	cmp	r3, #32
 800d82a:	f040 8208 	bne.w	800dc3e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d830:	9300      	str	r3, [sp, #0]
 800d832:	2319      	movs	r3, #25
 800d834:	2201      	movs	r2, #1
 800d836:	497b      	ldr	r1, [pc, #492]	; (800da24 <HAL_I2C_Mem_Read+0x224>)
 800d838:	68f8      	ldr	r0, [r7, #12]
 800d83a:	f000 fbbb 	bl	800dfb4 <I2C_WaitOnFlagUntilTimeout>
 800d83e:	4603      	mov	r3, r0
 800d840:	2b00      	cmp	r3, #0
 800d842:	d001      	beq.n	800d848 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800d844:	2302      	movs	r3, #2
 800d846:	e1fb      	b.n	800dc40 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d84e:	2b01      	cmp	r3, #1
 800d850:	d101      	bne.n	800d856 <HAL_I2C_Mem_Read+0x56>
 800d852:	2302      	movs	r3, #2
 800d854:	e1f4      	b.n	800dc40 <HAL_I2C_Mem_Read+0x440>
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	2201      	movs	r2, #1
 800d85a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	f003 0301 	and.w	r3, r3, #1
 800d868:	2b01      	cmp	r3, #1
 800d86a:	d007      	beq.n	800d87c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	681a      	ldr	r2, [r3, #0]
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	f042 0201 	orr.w	r2, r2, #1
 800d87a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	681a      	ldr	r2, [r3, #0]
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d88a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	2222      	movs	r2, #34	; 0x22
 800d890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	2240      	movs	r2, #64	; 0x40
 800d898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	2200      	movs	r2, #0
 800d8a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800d8ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d8b2:	b29a      	uxth	r2, r3
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	4a5b      	ldr	r2, [pc, #364]	; (800da28 <HAL_I2C_Mem_Read+0x228>)
 800d8bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d8be:	88f8      	ldrh	r0, [r7, #6]
 800d8c0:	893a      	ldrh	r2, [r7, #8]
 800d8c2:	8979      	ldrh	r1, [r7, #10]
 800d8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8c6:	9301      	str	r3, [sp, #4]
 800d8c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ca:	9300      	str	r3, [sp, #0]
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	68f8      	ldr	r0, [r7, #12]
 800d8d0:	f000 fa88 	bl	800dde4 <I2C_RequestMemoryRead>
 800d8d4:	4603      	mov	r3, r0
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d001      	beq.n	800d8de <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800d8da:	2301      	movs	r3, #1
 800d8dc:	e1b0      	b.n	800dc40 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d113      	bne.n	800d90e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	623b      	str	r3, [r7, #32]
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	695b      	ldr	r3, [r3, #20]
 800d8f0:	623b      	str	r3, [r7, #32]
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	699b      	ldr	r3, [r3, #24]
 800d8f8:	623b      	str	r3, [r7, #32]
 800d8fa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	681a      	ldr	r2, [r3, #0]
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d90a:	601a      	str	r2, [r3, #0]
 800d90c:	e184      	b.n	800dc18 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d912:	2b01      	cmp	r3, #1
 800d914:	d11b      	bne.n	800d94e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	681a      	ldr	r2, [r3, #0]
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d924:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d926:	2300      	movs	r3, #0
 800d928:	61fb      	str	r3, [r7, #28]
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	695b      	ldr	r3, [r3, #20]
 800d930:	61fb      	str	r3, [r7, #28]
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	699b      	ldr	r3, [r3, #24]
 800d938:	61fb      	str	r3, [r7, #28]
 800d93a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	681a      	ldr	r2, [r3, #0]
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d94a:	601a      	str	r2, [r3, #0]
 800d94c:	e164      	b.n	800dc18 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d952:	2b02      	cmp	r3, #2
 800d954:	d11b      	bne.n	800d98e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	681a      	ldr	r2, [r3, #0]
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d964:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	681a      	ldr	r2, [r3, #0]
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d974:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d976:	2300      	movs	r3, #0
 800d978:	61bb      	str	r3, [r7, #24]
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	695b      	ldr	r3, [r3, #20]
 800d980:	61bb      	str	r3, [r7, #24]
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	699b      	ldr	r3, [r3, #24]
 800d988:	61bb      	str	r3, [r7, #24]
 800d98a:	69bb      	ldr	r3, [r7, #24]
 800d98c:	e144      	b.n	800dc18 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d98e:	2300      	movs	r3, #0
 800d990:	617b      	str	r3, [r7, #20]
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	695b      	ldr	r3, [r3, #20]
 800d998:	617b      	str	r3, [r7, #20]
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	699b      	ldr	r3, [r3, #24]
 800d9a0:	617b      	str	r3, [r7, #20]
 800d9a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800d9a4:	e138      	b.n	800dc18 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d9aa:	2b03      	cmp	r3, #3
 800d9ac:	f200 80f1 	bhi.w	800db92 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d9b4:	2b01      	cmp	r3, #1
 800d9b6:	d123      	bne.n	800da00 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d9b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d9bc:	68f8      	ldr	r0, [r7, #12]
 800d9be:	f000 fc51 	bl	800e264 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d001      	beq.n	800d9cc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800d9c8:	2301      	movs	r3, #1
 800d9ca:	e139      	b.n	800dc40 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	691a      	ldr	r2, [r3, #16]
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9d6:	b2d2      	uxtb	r2, r2
 800d9d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9de:	1c5a      	adds	r2, r3, #1
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d9e8:	3b01      	subs	r3, #1
 800d9ea:	b29a      	uxth	r2, r3
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d9f4:	b29b      	uxth	r3, r3
 800d9f6:	3b01      	subs	r3, #1
 800d9f8:	b29a      	uxth	r2, r3
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d9fe:	e10b      	b.n	800dc18 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800da04:	2b02      	cmp	r3, #2
 800da06:	d14e      	bne.n	800daa6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800da08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da0a:	9300      	str	r3, [sp, #0]
 800da0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da0e:	2200      	movs	r2, #0
 800da10:	4906      	ldr	r1, [pc, #24]	; (800da2c <HAL_I2C_Mem_Read+0x22c>)
 800da12:	68f8      	ldr	r0, [r7, #12]
 800da14:	f000 face 	bl	800dfb4 <I2C_WaitOnFlagUntilTimeout>
 800da18:	4603      	mov	r3, r0
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d008      	beq.n	800da30 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800da1e:	2301      	movs	r3, #1
 800da20:	e10e      	b.n	800dc40 <HAL_I2C_Mem_Read+0x440>
 800da22:	bf00      	nop
 800da24:	00100002 	.word	0x00100002
 800da28:	ffff0000 	.word	0xffff0000
 800da2c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	681a      	ldr	r2, [r3, #0]
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800da3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	691a      	ldr	r2, [r3, #16]
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da4a:	b2d2      	uxtb	r2, r2
 800da4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da52:	1c5a      	adds	r2, r3, #1
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800da5c:	3b01      	subs	r3, #1
 800da5e:	b29a      	uxth	r2, r3
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800da68:	b29b      	uxth	r3, r3
 800da6a:	3b01      	subs	r3, #1
 800da6c:	b29a      	uxth	r2, r3
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	691a      	ldr	r2, [r3, #16]
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da7c:	b2d2      	uxtb	r2, r2
 800da7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da84:	1c5a      	adds	r2, r3, #1
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800da8e:	3b01      	subs	r3, #1
 800da90:	b29a      	uxth	r2, r3
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800da9a:	b29b      	uxth	r3, r3
 800da9c:	3b01      	subs	r3, #1
 800da9e:	b29a      	uxth	r2, r3
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800daa4:	e0b8      	b.n	800dc18 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800daa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daa8:	9300      	str	r3, [sp, #0]
 800daaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daac:	2200      	movs	r2, #0
 800daae:	4966      	ldr	r1, [pc, #408]	; (800dc48 <HAL_I2C_Mem_Read+0x448>)
 800dab0:	68f8      	ldr	r0, [r7, #12]
 800dab2:	f000 fa7f 	bl	800dfb4 <I2C_WaitOnFlagUntilTimeout>
 800dab6:	4603      	mov	r3, r0
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d001      	beq.n	800dac0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800dabc:	2301      	movs	r3, #1
 800dabe:	e0bf      	b.n	800dc40 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	681a      	ldr	r2, [r3, #0]
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dace:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	691a      	ldr	r2, [r3, #16]
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dada:	b2d2      	uxtb	r2, r2
 800dadc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dae2:	1c5a      	adds	r2, r3, #1
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800daec:	3b01      	subs	r3, #1
 800daee:	b29a      	uxth	r2, r3
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800daf8:	b29b      	uxth	r3, r3
 800dafa:	3b01      	subs	r3, #1
 800dafc:	b29a      	uxth	r2, r3
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800db02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db04:	9300      	str	r3, [sp, #0]
 800db06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db08:	2200      	movs	r2, #0
 800db0a:	494f      	ldr	r1, [pc, #316]	; (800dc48 <HAL_I2C_Mem_Read+0x448>)
 800db0c:	68f8      	ldr	r0, [r7, #12]
 800db0e:	f000 fa51 	bl	800dfb4 <I2C_WaitOnFlagUntilTimeout>
 800db12:	4603      	mov	r3, r0
 800db14:	2b00      	cmp	r3, #0
 800db16:	d001      	beq.n	800db1c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800db18:	2301      	movs	r3, #1
 800db1a:	e091      	b.n	800dc40 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	681a      	ldr	r2, [r3, #0]
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800db2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	691a      	ldr	r2, [r3, #16]
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db36:	b2d2      	uxtb	r2, r2
 800db38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db3e:	1c5a      	adds	r2, r3, #1
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db48:	3b01      	subs	r3, #1
 800db4a:	b29a      	uxth	r2, r3
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800db54:	b29b      	uxth	r3, r3
 800db56:	3b01      	subs	r3, #1
 800db58:	b29a      	uxth	r2, r3
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	691a      	ldr	r2, [r3, #16]
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db68:	b2d2      	uxtb	r2, r2
 800db6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db70:	1c5a      	adds	r2, r3, #1
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db7a:	3b01      	subs	r3, #1
 800db7c:	b29a      	uxth	r2, r3
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800db86:	b29b      	uxth	r3, r3
 800db88:	3b01      	subs	r3, #1
 800db8a:	b29a      	uxth	r2, r3
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800db90:	e042      	b.n	800dc18 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800db92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db94:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800db96:	68f8      	ldr	r0, [r7, #12]
 800db98:	f000 fb64 	bl	800e264 <I2C_WaitOnRXNEFlagUntilTimeout>
 800db9c:	4603      	mov	r3, r0
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d001      	beq.n	800dba6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800dba2:	2301      	movs	r3, #1
 800dba4:	e04c      	b.n	800dc40 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	691a      	ldr	r2, [r3, #16]
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbb0:	b2d2      	uxtb	r2, r2
 800dbb2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbb8:	1c5a      	adds	r2, r3, #1
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dbc2:	3b01      	subs	r3, #1
 800dbc4:	b29a      	uxth	r2, r3
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dbce:	b29b      	uxth	r3, r3
 800dbd0:	3b01      	subs	r3, #1
 800dbd2:	b29a      	uxth	r2, r3
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	695b      	ldr	r3, [r3, #20]
 800dbde:	f003 0304 	and.w	r3, r3, #4
 800dbe2:	2b04      	cmp	r3, #4
 800dbe4:	d118      	bne.n	800dc18 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	691a      	ldr	r2, [r3, #16]
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbf0:	b2d2      	uxtb	r2, r2
 800dbf2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbf8:	1c5a      	adds	r2, r3, #1
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dc02:	3b01      	subs	r3, #1
 800dc04:	b29a      	uxth	r2, r3
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dc0e:	b29b      	uxth	r3, r3
 800dc10:	3b01      	subs	r3, #1
 800dc12:	b29a      	uxth	r2, r3
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	f47f aec2 	bne.w	800d9a6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	2220      	movs	r2, #32
 800dc26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	2200      	movs	r2, #0
 800dc36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	e000      	b.n	800dc40 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800dc3e:	2302      	movs	r3, #2
  }
}
 800dc40:	4618      	mov	r0, r3
 800dc42:	3728      	adds	r7, #40	; 0x28
 800dc44:	46bd      	mov	sp, r7
 800dc46:	bd80      	pop	{r7, pc}
 800dc48:	00010004 	.word	0x00010004

0800dc4c <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 800dc4c:	b480      	push	{r7}
 800dc4e:	b083      	sub	sp, #12
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dc5a:	b2db      	uxtb	r3, r3
 800dc5c:	2b20      	cmp	r3, #32
 800dc5e:	d124      	bne.n	800dcaa <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2228      	movs	r2, #40	; 0x28
 800dc64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	f003 0301 	and.w	r3, r3, #1
 800dc72:	2b01      	cmp	r3, #1
 800dc74:	d007      	beq.n	800dc86 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	681a      	ldr	r2, [r3, #0]
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	f042 0201 	orr.w	r2, r2, #1
 800dc84:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	681a      	ldr	r2, [r3, #0]
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dc94:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	685a      	ldr	r2, [r3, #4]
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800dca4:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800dca6:	2300      	movs	r3, #0
 800dca8:	e000      	b.n	800dcac <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800dcaa:	2302      	movs	r3, #2
  }
}
 800dcac:	4618      	mov	r0, r3
 800dcae:	370c      	adds	r7, #12
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb6:	4770      	bx	lr

0800dcb8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b088      	sub	sp, #32
 800dcbc:	af02      	add	r7, sp, #8
 800dcbe:	60f8      	str	r0, [r7, #12]
 800dcc0:	4608      	mov	r0, r1
 800dcc2:	4611      	mov	r1, r2
 800dcc4:	461a      	mov	r2, r3
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	817b      	strh	r3, [r7, #10]
 800dcca:	460b      	mov	r3, r1
 800dccc:	813b      	strh	r3, [r7, #8]
 800dcce:	4613      	mov	r3, r2
 800dcd0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	681a      	ldr	r2, [r3, #0]
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dce0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800dce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dce4:	9300      	str	r3, [sp, #0]
 800dce6:	6a3b      	ldr	r3, [r7, #32]
 800dce8:	2200      	movs	r2, #0
 800dcea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800dcee:	68f8      	ldr	r0, [r7, #12]
 800dcf0:	f000 f960 	bl	800dfb4 <I2C_WaitOnFlagUntilTimeout>
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d00d      	beq.n	800dd16 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dd08:	d103      	bne.n	800dd12 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dd10:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800dd12:	2303      	movs	r3, #3
 800dd14:	e05f      	b.n	800ddd6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800dd16:	897b      	ldrh	r3, [r7, #10]
 800dd18:	b2db      	uxtb	r3, r3
 800dd1a:	461a      	mov	r2, r3
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800dd24:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800dd26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd28:	6a3a      	ldr	r2, [r7, #32]
 800dd2a:	492d      	ldr	r1, [pc, #180]	; (800dde0 <I2C_RequestMemoryWrite+0x128>)
 800dd2c:	68f8      	ldr	r0, [r7, #12]
 800dd2e:	f000 f998 	bl	800e062 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800dd32:	4603      	mov	r3, r0
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d001      	beq.n	800dd3c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800dd38:	2301      	movs	r3, #1
 800dd3a:	e04c      	b.n	800ddd6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	617b      	str	r3, [r7, #20]
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	695b      	ldr	r3, [r3, #20]
 800dd46:	617b      	str	r3, [r7, #20]
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	699b      	ldr	r3, [r3, #24]
 800dd4e:	617b      	str	r3, [r7, #20]
 800dd50:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800dd52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd54:	6a39      	ldr	r1, [r7, #32]
 800dd56:	68f8      	ldr	r0, [r7, #12]
 800dd58:	f000 fa02 	bl	800e160 <I2C_WaitOnTXEFlagUntilTimeout>
 800dd5c:	4603      	mov	r3, r0
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d00d      	beq.n	800dd7e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd66:	2b04      	cmp	r3, #4
 800dd68:	d107      	bne.n	800dd7a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	681a      	ldr	r2, [r3, #0]
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dd78:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800dd7a:	2301      	movs	r3, #1
 800dd7c:	e02b      	b.n	800ddd6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800dd7e:	88fb      	ldrh	r3, [r7, #6]
 800dd80:	2b01      	cmp	r3, #1
 800dd82:	d105      	bne.n	800dd90 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800dd84:	893b      	ldrh	r3, [r7, #8]
 800dd86:	b2da      	uxtb	r2, r3
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	611a      	str	r2, [r3, #16]
 800dd8e:	e021      	b.n	800ddd4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800dd90:	893b      	ldrh	r3, [r7, #8]
 800dd92:	0a1b      	lsrs	r3, r3, #8
 800dd94:	b29b      	uxth	r3, r3
 800dd96:	b2da      	uxtb	r2, r3
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800dd9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dda0:	6a39      	ldr	r1, [r7, #32]
 800dda2:	68f8      	ldr	r0, [r7, #12]
 800dda4:	f000 f9dc 	bl	800e160 <I2C_WaitOnTXEFlagUntilTimeout>
 800dda8:	4603      	mov	r3, r0
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d00d      	beq.n	800ddca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddb2:	2b04      	cmp	r3, #4
 800ddb4:	d107      	bne.n	800ddc6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	681a      	ldr	r2, [r3, #0]
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ddc4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800ddc6:	2301      	movs	r3, #1
 800ddc8:	e005      	b.n	800ddd6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ddca:	893b      	ldrh	r3, [r7, #8]
 800ddcc:	b2da      	uxtb	r2, r3
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800ddd4:	2300      	movs	r3, #0
}
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	3718      	adds	r7, #24
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bd80      	pop	{r7, pc}
 800ddde:	bf00      	nop
 800dde0:	00010002 	.word	0x00010002

0800dde4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b088      	sub	sp, #32
 800dde8:	af02      	add	r7, sp, #8
 800ddea:	60f8      	str	r0, [r7, #12]
 800ddec:	4608      	mov	r0, r1
 800ddee:	4611      	mov	r1, r2
 800ddf0:	461a      	mov	r2, r3
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	817b      	strh	r3, [r7, #10]
 800ddf6:	460b      	mov	r3, r1
 800ddf8:	813b      	strh	r3, [r7, #8]
 800ddfa:	4613      	mov	r3, r2
 800ddfc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	681a      	ldr	r2, [r3, #0]
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800de0c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	681a      	ldr	r2, [r3, #0]
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800de1c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800de1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de20:	9300      	str	r3, [sp, #0]
 800de22:	6a3b      	ldr	r3, [r7, #32]
 800de24:	2200      	movs	r2, #0
 800de26:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800de2a:	68f8      	ldr	r0, [r7, #12]
 800de2c:	f000 f8c2 	bl	800dfb4 <I2C_WaitOnFlagUntilTimeout>
 800de30:	4603      	mov	r3, r0
 800de32:	2b00      	cmp	r3, #0
 800de34:	d00d      	beq.n	800de52 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800de44:	d103      	bne.n	800de4e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	f44f 7200 	mov.w	r2, #512	; 0x200
 800de4c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800de4e:	2303      	movs	r3, #3
 800de50:	e0aa      	b.n	800dfa8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800de52:	897b      	ldrh	r3, [r7, #10]
 800de54:	b2db      	uxtb	r3, r3
 800de56:	461a      	mov	r2, r3
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800de60:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800de62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de64:	6a3a      	ldr	r2, [r7, #32]
 800de66:	4952      	ldr	r1, [pc, #328]	; (800dfb0 <I2C_RequestMemoryRead+0x1cc>)
 800de68:	68f8      	ldr	r0, [r7, #12]
 800de6a:	f000 f8fa 	bl	800e062 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800de6e:	4603      	mov	r3, r0
 800de70:	2b00      	cmp	r3, #0
 800de72:	d001      	beq.n	800de78 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800de74:	2301      	movs	r3, #1
 800de76:	e097      	b.n	800dfa8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800de78:	2300      	movs	r3, #0
 800de7a:	617b      	str	r3, [r7, #20]
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	695b      	ldr	r3, [r3, #20]
 800de82:	617b      	str	r3, [r7, #20]
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	699b      	ldr	r3, [r3, #24]
 800de8a:	617b      	str	r3, [r7, #20]
 800de8c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800de8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de90:	6a39      	ldr	r1, [r7, #32]
 800de92:	68f8      	ldr	r0, [r7, #12]
 800de94:	f000 f964 	bl	800e160 <I2C_WaitOnTXEFlagUntilTimeout>
 800de98:	4603      	mov	r3, r0
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d00d      	beq.n	800deba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dea2:	2b04      	cmp	r3, #4
 800dea4:	d107      	bne.n	800deb6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	681a      	ldr	r2, [r3, #0]
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800deb4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800deb6:	2301      	movs	r3, #1
 800deb8:	e076      	b.n	800dfa8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800deba:	88fb      	ldrh	r3, [r7, #6]
 800debc:	2b01      	cmp	r3, #1
 800debe:	d105      	bne.n	800decc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800dec0:	893b      	ldrh	r3, [r7, #8]
 800dec2:	b2da      	uxtb	r2, r3
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	611a      	str	r2, [r3, #16]
 800deca:	e021      	b.n	800df10 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800decc:	893b      	ldrh	r3, [r7, #8]
 800dece:	0a1b      	lsrs	r3, r3, #8
 800ded0:	b29b      	uxth	r3, r3
 800ded2:	b2da      	uxtb	r2, r3
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800deda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dedc:	6a39      	ldr	r1, [r7, #32]
 800dede:	68f8      	ldr	r0, [r7, #12]
 800dee0:	f000 f93e 	bl	800e160 <I2C_WaitOnTXEFlagUntilTimeout>
 800dee4:	4603      	mov	r3, r0
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d00d      	beq.n	800df06 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800deee:	2b04      	cmp	r3, #4
 800def0:	d107      	bne.n	800df02 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	681a      	ldr	r2, [r3, #0]
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800df00:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800df02:	2301      	movs	r3, #1
 800df04:	e050      	b.n	800dfa8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800df06:	893b      	ldrh	r3, [r7, #8]
 800df08:	b2da      	uxtb	r2, r3
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800df10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df12:	6a39      	ldr	r1, [r7, #32]
 800df14:	68f8      	ldr	r0, [r7, #12]
 800df16:	f000 f923 	bl	800e160 <I2C_WaitOnTXEFlagUntilTimeout>
 800df1a:	4603      	mov	r3, r0
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d00d      	beq.n	800df3c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df24:	2b04      	cmp	r3, #4
 800df26:	d107      	bne.n	800df38 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	681a      	ldr	r2, [r3, #0]
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800df36:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800df38:	2301      	movs	r3, #1
 800df3a:	e035      	b.n	800dfa8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	681a      	ldr	r2, [r3, #0]
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800df4a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800df4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df4e:	9300      	str	r3, [sp, #0]
 800df50:	6a3b      	ldr	r3, [r7, #32]
 800df52:	2200      	movs	r2, #0
 800df54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800df58:	68f8      	ldr	r0, [r7, #12]
 800df5a:	f000 f82b 	bl	800dfb4 <I2C_WaitOnFlagUntilTimeout>
 800df5e:	4603      	mov	r3, r0
 800df60:	2b00      	cmp	r3, #0
 800df62:	d00d      	beq.n	800df80 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800df72:	d103      	bne.n	800df7c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	f44f 7200 	mov.w	r2, #512	; 0x200
 800df7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800df7c:	2303      	movs	r3, #3
 800df7e:	e013      	b.n	800dfa8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800df80:	897b      	ldrh	r3, [r7, #10]
 800df82:	b2db      	uxtb	r3, r3
 800df84:	f043 0301 	orr.w	r3, r3, #1
 800df88:	b2da      	uxtb	r2, r3
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800df90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df92:	6a3a      	ldr	r2, [r7, #32]
 800df94:	4906      	ldr	r1, [pc, #24]	; (800dfb0 <I2C_RequestMemoryRead+0x1cc>)
 800df96:	68f8      	ldr	r0, [r7, #12]
 800df98:	f000 f863 	bl	800e062 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800df9c:	4603      	mov	r3, r0
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d001      	beq.n	800dfa6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800dfa2:	2301      	movs	r3, #1
 800dfa4:	e000      	b.n	800dfa8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800dfa6:	2300      	movs	r3, #0
}
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	3718      	adds	r7, #24
 800dfac:	46bd      	mov	sp, r7
 800dfae:	bd80      	pop	{r7, pc}
 800dfb0:	00010002 	.word	0x00010002

0800dfb4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b084      	sub	sp, #16
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	60f8      	str	r0, [r7, #12]
 800dfbc:	60b9      	str	r1, [r7, #8]
 800dfbe:	603b      	str	r3, [r7, #0]
 800dfc0:	4613      	mov	r3, r2
 800dfc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800dfc4:	e025      	b.n	800e012 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dfc6:	683b      	ldr	r3, [r7, #0]
 800dfc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfcc:	d021      	beq.n	800e012 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dfce:	f7fe fa8f 	bl	800c4f0 <HAL_GetTick>
 800dfd2:	4602      	mov	r2, r0
 800dfd4:	69bb      	ldr	r3, [r7, #24]
 800dfd6:	1ad3      	subs	r3, r2, r3
 800dfd8:	683a      	ldr	r2, [r7, #0]
 800dfda:	429a      	cmp	r2, r3
 800dfdc:	d302      	bcc.n	800dfe4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800dfde:	683b      	ldr	r3, [r7, #0]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d116      	bne.n	800e012 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	2220      	movs	r2, #32
 800dfee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	2200      	movs	r2, #0
 800dff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dffe:	f043 0220 	orr.w	r2, r3, #32
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	2200      	movs	r2, #0
 800e00a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e00e:	2301      	movs	r3, #1
 800e010:	e023      	b.n	800e05a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e012:	68bb      	ldr	r3, [r7, #8]
 800e014:	0c1b      	lsrs	r3, r3, #16
 800e016:	b2db      	uxtb	r3, r3
 800e018:	2b01      	cmp	r3, #1
 800e01a:	d10d      	bne.n	800e038 <I2C_WaitOnFlagUntilTimeout+0x84>
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	695b      	ldr	r3, [r3, #20]
 800e022:	43da      	mvns	r2, r3
 800e024:	68bb      	ldr	r3, [r7, #8]
 800e026:	4013      	ands	r3, r2
 800e028:	b29b      	uxth	r3, r3
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	bf0c      	ite	eq
 800e02e:	2301      	moveq	r3, #1
 800e030:	2300      	movne	r3, #0
 800e032:	b2db      	uxtb	r3, r3
 800e034:	461a      	mov	r2, r3
 800e036:	e00c      	b.n	800e052 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	699b      	ldr	r3, [r3, #24]
 800e03e:	43da      	mvns	r2, r3
 800e040:	68bb      	ldr	r3, [r7, #8]
 800e042:	4013      	ands	r3, r2
 800e044:	b29b      	uxth	r3, r3
 800e046:	2b00      	cmp	r3, #0
 800e048:	bf0c      	ite	eq
 800e04a:	2301      	moveq	r3, #1
 800e04c:	2300      	movne	r3, #0
 800e04e:	b2db      	uxtb	r3, r3
 800e050:	461a      	mov	r2, r3
 800e052:	79fb      	ldrb	r3, [r7, #7]
 800e054:	429a      	cmp	r2, r3
 800e056:	d0b6      	beq.n	800dfc6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e058:	2300      	movs	r3, #0
}
 800e05a:	4618      	mov	r0, r3
 800e05c:	3710      	adds	r7, #16
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd80      	pop	{r7, pc}

0800e062 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800e062:	b580      	push	{r7, lr}
 800e064:	b084      	sub	sp, #16
 800e066:	af00      	add	r7, sp, #0
 800e068:	60f8      	str	r0, [r7, #12]
 800e06a:	60b9      	str	r1, [r7, #8]
 800e06c:	607a      	str	r2, [r7, #4]
 800e06e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e070:	e051      	b.n	800e116 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	695b      	ldr	r3, [r3, #20]
 800e078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e07c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e080:	d123      	bne.n	800e0ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	681a      	ldr	r2, [r3, #0]
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e090:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e09a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	2200      	movs	r2, #0
 800e0a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	2220      	movs	r2, #32
 800e0a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0b6:	f043 0204 	orr.w	r2, r3, #4
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e0c6:	2301      	movs	r3, #1
 800e0c8:	e046      	b.n	800e158 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0d0:	d021      	beq.n	800e116 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e0d2:	f7fe fa0d 	bl	800c4f0 <HAL_GetTick>
 800e0d6:	4602      	mov	r2, r0
 800e0d8:	683b      	ldr	r3, [r7, #0]
 800e0da:	1ad3      	subs	r3, r2, r3
 800e0dc:	687a      	ldr	r2, [r7, #4]
 800e0de:	429a      	cmp	r2, r3
 800e0e0:	d302      	bcc.n	800e0e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d116      	bne.n	800e116 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	2220      	movs	r2, #32
 800e0f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e102:	f043 0220 	orr.w	r2, r3, #32
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	2200      	movs	r2, #0
 800e10e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e112:	2301      	movs	r3, #1
 800e114:	e020      	b.n	800e158 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e116:	68bb      	ldr	r3, [r7, #8]
 800e118:	0c1b      	lsrs	r3, r3, #16
 800e11a:	b2db      	uxtb	r3, r3
 800e11c:	2b01      	cmp	r3, #1
 800e11e:	d10c      	bne.n	800e13a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	695b      	ldr	r3, [r3, #20]
 800e126:	43da      	mvns	r2, r3
 800e128:	68bb      	ldr	r3, [r7, #8]
 800e12a:	4013      	ands	r3, r2
 800e12c:	b29b      	uxth	r3, r3
 800e12e:	2b00      	cmp	r3, #0
 800e130:	bf14      	ite	ne
 800e132:	2301      	movne	r3, #1
 800e134:	2300      	moveq	r3, #0
 800e136:	b2db      	uxtb	r3, r3
 800e138:	e00b      	b.n	800e152 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	699b      	ldr	r3, [r3, #24]
 800e140:	43da      	mvns	r2, r3
 800e142:	68bb      	ldr	r3, [r7, #8]
 800e144:	4013      	ands	r3, r2
 800e146:	b29b      	uxth	r3, r3
 800e148:	2b00      	cmp	r3, #0
 800e14a:	bf14      	ite	ne
 800e14c:	2301      	movne	r3, #1
 800e14e:	2300      	moveq	r3, #0
 800e150:	b2db      	uxtb	r3, r3
 800e152:	2b00      	cmp	r3, #0
 800e154:	d18d      	bne.n	800e072 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800e156:	2300      	movs	r3, #0
}
 800e158:	4618      	mov	r0, r3
 800e15a:	3710      	adds	r7, #16
 800e15c:	46bd      	mov	sp, r7
 800e15e:	bd80      	pop	{r7, pc}

0800e160 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e160:	b580      	push	{r7, lr}
 800e162:	b084      	sub	sp, #16
 800e164:	af00      	add	r7, sp, #0
 800e166:	60f8      	str	r0, [r7, #12]
 800e168:	60b9      	str	r1, [r7, #8]
 800e16a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e16c:	e02d      	b.n	800e1ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800e16e:	68f8      	ldr	r0, [r7, #12]
 800e170:	f000 f8ce 	bl	800e310 <I2C_IsAcknowledgeFailed>
 800e174:	4603      	mov	r3, r0
 800e176:	2b00      	cmp	r3, #0
 800e178:	d001      	beq.n	800e17e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800e17a:	2301      	movs	r3, #1
 800e17c:	e02d      	b.n	800e1da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e17e:	68bb      	ldr	r3, [r7, #8]
 800e180:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e184:	d021      	beq.n	800e1ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e186:	f7fe f9b3 	bl	800c4f0 <HAL_GetTick>
 800e18a:	4602      	mov	r2, r0
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	1ad3      	subs	r3, r2, r3
 800e190:	68ba      	ldr	r2, [r7, #8]
 800e192:	429a      	cmp	r2, r3
 800e194:	d302      	bcc.n	800e19c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800e196:	68bb      	ldr	r3, [r7, #8]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d116      	bne.n	800e1ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	2200      	movs	r2, #0
 800e1a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	2220      	movs	r2, #32
 800e1a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1b6:	f043 0220 	orr.w	r2, r3, #32
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e1c6:	2301      	movs	r3, #1
 800e1c8:	e007      	b.n	800e1da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	695b      	ldr	r3, [r3, #20]
 800e1d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e1d4:	2b80      	cmp	r3, #128	; 0x80
 800e1d6:	d1ca      	bne.n	800e16e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e1d8:	2300      	movs	r3, #0
}
 800e1da:	4618      	mov	r0, r3
 800e1dc:	3710      	adds	r7, #16
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	bd80      	pop	{r7, pc}

0800e1e2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e1e2:	b580      	push	{r7, lr}
 800e1e4:	b084      	sub	sp, #16
 800e1e6:	af00      	add	r7, sp, #0
 800e1e8:	60f8      	str	r0, [r7, #12]
 800e1ea:	60b9      	str	r1, [r7, #8]
 800e1ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800e1ee:	e02d      	b.n	800e24c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800e1f0:	68f8      	ldr	r0, [r7, #12]
 800e1f2:	f000 f88d 	bl	800e310 <I2C_IsAcknowledgeFailed>
 800e1f6:	4603      	mov	r3, r0
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d001      	beq.n	800e200 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800e1fc:	2301      	movs	r3, #1
 800e1fe:	e02d      	b.n	800e25c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e200:	68bb      	ldr	r3, [r7, #8]
 800e202:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e206:	d021      	beq.n	800e24c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e208:	f7fe f972 	bl	800c4f0 <HAL_GetTick>
 800e20c:	4602      	mov	r2, r0
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	1ad3      	subs	r3, r2, r3
 800e212:	68ba      	ldr	r2, [r7, #8]
 800e214:	429a      	cmp	r2, r3
 800e216:	d302      	bcc.n	800e21e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800e218:	68bb      	ldr	r3, [r7, #8]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d116      	bne.n	800e24c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	2200      	movs	r2, #0
 800e222:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	2220      	movs	r2, #32
 800e228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	2200      	movs	r2, #0
 800e230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e238:	f043 0220 	orr.w	r2, r3, #32
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	2200      	movs	r2, #0
 800e244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e248:	2301      	movs	r3, #1
 800e24a:	e007      	b.n	800e25c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	695b      	ldr	r3, [r3, #20]
 800e252:	f003 0304 	and.w	r3, r3, #4
 800e256:	2b04      	cmp	r3, #4
 800e258:	d1ca      	bne.n	800e1f0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e25a:	2300      	movs	r3, #0
}
 800e25c:	4618      	mov	r0, r3
 800e25e:	3710      	adds	r7, #16
 800e260:	46bd      	mov	sp, r7
 800e262:	bd80      	pop	{r7, pc}

0800e264 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e264:	b580      	push	{r7, lr}
 800e266:	b084      	sub	sp, #16
 800e268:	af00      	add	r7, sp, #0
 800e26a:	60f8      	str	r0, [r7, #12]
 800e26c:	60b9      	str	r1, [r7, #8]
 800e26e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e270:	e042      	b.n	800e2f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	695b      	ldr	r3, [r3, #20]
 800e278:	f003 0310 	and.w	r3, r3, #16
 800e27c:	2b10      	cmp	r3, #16
 800e27e:	d119      	bne.n	800e2b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	f06f 0210 	mvn.w	r2, #16
 800e288:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	2200      	movs	r2, #0
 800e28e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	2220      	movs	r2, #32
 800e294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	2200      	movs	r2, #0
 800e29c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e2b0:	2301      	movs	r3, #1
 800e2b2:	e029      	b.n	800e308 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e2b4:	f7fe f91c 	bl	800c4f0 <HAL_GetTick>
 800e2b8:	4602      	mov	r2, r0
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	1ad3      	subs	r3, r2, r3
 800e2be:	68ba      	ldr	r2, [r7, #8]
 800e2c0:	429a      	cmp	r2, r3
 800e2c2:	d302      	bcc.n	800e2ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800e2c4:	68bb      	ldr	r3, [r7, #8]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d116      	bne.n	800e2f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	2220      	movs	r2, #32
 800e2d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	2200      	movs	r2, #0
 800e2dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2e4:	f043 0220 	orr.w	r2, r3, #32
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	2200      	movs	r2, #0
 800e2f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e2f4:	2301      	movs	r3, #1
 800e2f6:	e007      	b.n	800e308 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	695b      	ldr	r3, [r3, #20]
 800e2fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e302:	2b40      	cmp	r3, #64	; 0x40
 800e304:	d1b5      	bne.n	800e272 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800e306:	2300      	movs	r3, #0
}
 800e308:	4618      	mov	r0, r3
 800e30a:	3710      	adds	r7, #16
 800e30c:	46bd      	mov	sp, r7
 800e30e:	bd80      	pop	{r7, pc}

0800e310 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800e310:	b480      	push	{r7}
 800e312:	b083      	sub	sp, #12
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	695b      	ldr	r3, [r3, #20]
 800e31e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e322:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e326:	d11b      	bne.n	800e360 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e330:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	2200      	movs	r2, #0
 800e336:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	2220      	movs	r2, #32
 800e33c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	2200      	movs	r2, #0
 800e344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e34c:	f043 0204 	orr.w	r2, r3, #4
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	2200      	movs	r2, #0
 800e358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800e35c:	2301      	movs	r3, #1
 800e35e:	e000      	b.n	800e362 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800e360:	2300      	movs	r3, #0
}
 800e362:	4618      	mov	r0, r3
 800e364:	370c      	adds	r7, #12
 800e366:	46bd      	mov	sp, r7
 800e368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36c:	4770      	bx	lr

0800e36e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800e36e:	b480      	push	{r7}
 800e370:	b083      	sub	sp, #12
 800e372:	af00      	add	r7, sp, #0
 800e374:	6078      	str	r0, [r7, #4]
 800e376:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e37e:	b2db      	uxtb	r3, r3
 800e380:	2b20      	cmp	r3, #32
 800e382:	d129      	bne.n	800e3d8 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	2224      	movs	r2, #36	; 0x24
 800e388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	681a      	ldr	r2, [r3, #0]
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	f022 0201 	bic.w	r2, r2, #1
 800e39a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	f022 0210 	bic.w	r2, r2, #16
 800e3aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	683a      	ldr	r2, [r7, #0]
 800e3b8:	430a      	orrs	r2, r1
 800e3ba:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	681a      	ldr	r2, [r3, #0]
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	f042 0201 	orr.w	r2, r2, #1
 800e3ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	2220      	movs	r2, #32
 800e3d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	e000      	b.n	800e3da <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800e3d8:	2302      	movs	r3, #2
  }
}
 800e3da:	4618      	mov	r0, r3
 800e3dc:	370c      	adds	r7, #12
 800e3de:	46bd      	mov	sp, r7
 800e3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e4:	4770      	bx	lr

0800e3e6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800e3e6:	b480      	push	{r7}
 800e3e8:	b085      	sub	sp, #20
 800e3ea:	af00      	add	r7, sp, #0
 800e3ec:	6078      	str	r0, [r7, #4]
 800e3ee:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e3fa:	b2db      	uxtb	r3, r3
 800e3fc:	2b20      	cmp	r3, #32
 800e3fe:	d12a      	bne.n	800e456 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	2224      	movs	r2, #36	; 0x24
 800e404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	681a      	ldr	r2, [r3, #0]
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	f022 0201 	bic.w	r2, r2, #1
 800e416:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e41e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800e420:	89fb      	ldrh	r3, [r7, #14]
 800e422:	f023 030f 	bic.w	r3, r3, #15
 800e426:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	b29a      	uxth	r2, r3
 800e42c:	89fb      	ldrh	r3, [r7, #14]
 800e42e:	4313      	orrs	r3, r2
 800e430:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	89fa      	ldrh	r2, [r7, #14]
 800e438:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	681a      	ldr	r2, [r3, #0]
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	f042 0201 	orr.w	r2, r2, #1
 800e448:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	2220      	movs	r2, #32
 800e44e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800e452:	2300      	movs	r3, #0
 800e454:	e000      	b.n	800e458 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800e456:	2302      	movs	r3, #2
  }
}
 800e458:	4618      	mov	r0, r3
 800e45a:	3714      	adds	r7, #20
 800e45c:	46bd      	mov	sp, r7
 800e45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e462:	4770      	bx	lr

0800e464 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800e464:	b580      	push	{r7, lr}
 800e466:	b084      	sub	sp, #16
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d101      	bne.n	800e476 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800e472:	2301      	movs	r3, #1
 800e474:	e034      	b.n	800e4e0 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800e47e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	f245 5255 	movw	r2, #21845	; 0x5555
 800e488:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	687a      	ldr	r2, [r7, #4]
 800e490:	6852      	ldr	r2, [r2, #4]
 800e492:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	687a      	ldr	r2, [r7, #4]
 800e49a:	6892      	ldr	r2, [r2, #8]
 800e49c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800e49e:	f7fe f827 	bl	800c4f0 <HAL_GetTick>
 800e4a2:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800e4a4:	e00f      	b.n	800e4c6 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800e4a6:	f7fe f823 	bl	800c4f0 <HAL_GetTick>
 800e4aa:	4602      	mov	r2, r0
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	1ad3      	subs	r3, r2, r3
 800e4b0:	2b31      	cmp	r3, #49	; 0x31
 800e4b2:	d908      	bls.n	800e4c6 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	68db      	ldr	r3, [r3, #12]
 800e4ba:	f003 0303 	and.w	r3, r3, #3
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d001      	beq.n	800e4c6 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800e4c2:	2303      	movs	r3, #3
 800e4c4:	e00c      	b.n	800e4e0 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	68db      	ldr	r3, [r3, #12]
 800e4cc:	f003 0303 	and.w	r3, r3, #3
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d1e8      	bne.n	800e4a6 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800e4dc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800e4de:	2300      	movs	r3, #0
}
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	3710      	adds	r7, #16
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	bd80      	pop	{r7, pc}

0800e4e8 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800e4e8:	b480      	push	{r7}
 800e4ea:	b083      	sub	sp, #12
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800e4f8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800e4fa:	2300      	movs	r3, #0
}
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	370c      	adds	r7, #12
 800e500:	46bd      	mov	sp, r7
 800e502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e506:	4770      	bx	lr

0800e508 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 800e508:	b480      	push	{r7}
 800e50a:	b083      	sub	sp, #12
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 800e510:	4b05      	ldr	r3, [pc, #20]	; (800e528 <HAL_PWR_EnableWakeUpPin+0x20>)
 800e512:	685a      	ldr	r2, [r3, #4]
 800e514:	4904      	ldr	r1, [pc, #16]	; (800e528 <HAL_PWR_EnableWakeUpPin+0x20>)
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	4313      	orrs	r3, r2
 800e51a:	604b      	str	r3, [r1, #4]
}
 800e51c:	bf00      	nop
 800e51e:	370c      	adds	r7, #12
 800e520:	46bd      	mov	sp, r7
 800e522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e526:	4770      	bx	lr
 800e528:	40007000 	.word	0x40007000

0800e52c <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 800e52c:	b480      	push	{r7}
 800e52e:	b083      	sub	sp, #12
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 800e534:	4b06      	ldr	r3, [pc, #24]	; (800e550 <HAL_PWR_DisableWakeUpPin+0x24>)
 800e536:	685a      	ldr	r2, [r3, #4]
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	43db      	mvns	r3, r3
 800e53c:	4904      	ldr	r1, [pc, #16]	; (800e550 <HAL_PWR_DisableWakeUpPin+0x24>)
 800e53e:	4013      	ands	r3, r2
 800e540:	604b      	str	r3, [r1, #4]
}
 800e542:	bf00      	nop
 800e544:	370c      	adds	r7, #12
 800e546:	46bd      	mov	sp, r7
 800e548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e54c:	4770      	bx	lr
 800e54e:	bf00      	nop
 800e550:	40007000 	.word	0x40007000

0800e554 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 800e554:	b480      	push	{r7}
 800e556:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 800e558:	4b08      	ldr	r3, [pc, #32]	; (800e57c <HAL_PWR_EnterSTANDBYMode+0x28>)
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	4a07      	ldr	r2, [pc, #28]	; (800e57c <HAL_PWR_EnterSTANDBYMode+0x28>)
 800e55e:	f043 0302 	orr.w	r3, r3, #2
 800e562:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800e564:	4b06      	ldr	r3, [pc, #24]	; (800e580 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800e566:	691b      	ldr	r3, [r3, #16]
 800e568:	4a05      	ldr	r2, [pc, #20]	; (800e580 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800e56a:	f043 0304 	orr.w	r3, r3, #4
 800e56e:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 800e570:	bf30      	wfi
}
 800e572:	bf00      	nop
 800e574:	46bd      	mov	sp, r7
 800e576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57a:	4770      	bx	lr
 800e57c:	40007000 	.word	0x40007000
 800e580:	e000ed00 	.word	0xe000ed00

0800e584 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800e584:	b580      	push	{r7, lr}
 800e586:	b082      	sub	sp, #8
 800e588:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800e58a:	2300      	movs	r3, #0
 800e58c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800e58e:	2300      	movs	r3, #0
 800e590:	603b      	str	r3, [r7, #0]
 800e592:	4b20      	ldr	r3, [pc, #128]	; (800e614 <HAL_PWREx_EnableOverDrive+0x90>)
 800e594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e596:	4a1f      	ldr	r2, [pc, #124]	; (800e614 <HAL_PWREx_EnableOverDrive+0x90>)
 800e598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e59c:	6413      	str	r3, [r2, #64]	; 0x40
 800e59e:	4b1d      	ldr	r3, [pc, #116]	; (800e614 <HAL_PWREx_EnableOverDrive+0x90>)
 800e5a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e5a6:	603b      	str	r3, [r7, #0]
 800e5a8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800e5aa:	4b1b      	ldr	r3, [pc, #108]	; (800e618 <HAL_PWREx_EnableOverDrive+0x94>)
 800e5ac:	2201      	movs	r2, #1
 800e5ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800e5b0:	f7fd ff9e 	bl	800c4f0 <HAL_GetTick>
 800e5b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800e5b6:	e009      	b.n	800e5cc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800e5b8:	f7fd ff9a 	bl	800c4f0 <HAL_GetTick>
 800e5bc:	4602      	mov	r2, r0
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	1ad3      	subs	r3, r2, r3
 800e5c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e5c6:	d901      	bls.n	800e5cc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800e5c8:	2303      	movs	r3, #3
 800e5ca:	e01f      	b.n	800e60c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800e5cc:	4b13      	ldr	r3, [pc, #76]	; (800e61c <HAL_PWREx_EnableOverDrive+0x98>)
 800e5ce:	685b      	ldr	r3, [r3, #4]
 800e5d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e5d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e5d8:	d1ee      	bne.n	800e5b8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800e5da:	4b11      	ldr	r3, [pc, #68]	; (800e620 <HAL_PWREx_EnableOverDrive+0x9c>)
 800e5dc:	2201      	movs	r2, #1
 800e5de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800e5e0:	f7fd ff86 	bl	800c4f0 <HAL_GetTick>
 800e5e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800e5e6:	e009      	b.n	800e5fc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800e5e8:	f7fd ff82 	bl	800c4f0 <HAL_GetTick>
 800e5ec:	4602      	mov	r2, r0
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	1ad3      	subs	r3, r2, r3
 800e5f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e5f6:	d901      	bls.n	800e5fc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800e5f8:	2303      	movs	r3, #3
 800e5fa:	e007      	b.n	800e60c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800e5fc:	4b07      	ldr	r3, [pc, #28]	; (800e61c <HAL_PWREx_EnableOverDrive+0x98>)
 800e5fe:	685b      	ldr	r3, [r3, #4]
 800e600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e604:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e608:	d1ee      	bne.n	800e5e8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800e60a:	2300      	movs	r3, #0
}
 800e60c:	4618      	mov	r0, r3
 800e60e:	3708      	adds	r7, #8
 800e610:	46bd      	mov	sp, r7
 800e612:	bd80      	pop	{r7, pc}
 800e614:	40023800 	.word	0x40023800
 800e618:	420e0040 	.word	0x420e0040
 800e61c:	40007000 	.word	0x40007000
 800e620:	420e0044 	.word	0x420e0044

0800e624 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e624:	b580      	push	{r7, lr}
 800e626:	b086      	sub	sp, #24
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d101      	bne.n	800e636 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e632:	2301      	movs	r3, #1
 800e634:	e264      	b.n	800eb00 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	f003 0301 	and.w	r3, r3, #1
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d075      	beq.n	800e72e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800e642:	4ba3      	ldr	r3, [pc, #652]	; (800e8d0 <HAL_RCC_OscConfig+0x2ac>)
 800e644:	689b      	ldr	r3, [r3, #8]
 800e646:	f003 030c 	and.w	r3, r3, #12
 800e64a:	2b04      	cmp	r3, #4
 800e64c:	d00c      	beq.n	800e668 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e64e:	4ba0      	ldr	r3, [pc, #640]	; (800e8d0 <HAL_RCC_OscConfig+0x2ac>)
 800e650:	689b      	ldr	r3, [r3, #8]
 800e652:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800e656:	2b08      	cmp	r3, #8
 800e658:	d112      	bne.n	800e680 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e65a:	4b9d      	ldr	r3, [pc, #628]	; (800e8d0 <HAL_RCC_OscConfig+0x2ac>)
 800e65c:	685b      	ldr	r3, [r3, #4]
 800e65e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e662:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e666:	d10b      	bne.n	800e680 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e668:	4b99      	ldr	r3, [pc, #612]	; (800e8d0 <HAL_RCC_OscConfig+0x2ac>)
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e670:	2b00      	cmp	r3, #0
 800e672:	d05b      	beq.n	800e72c <HAL_RCC_OscConfig+0x108>
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	685b      	ldr	r3, [r3, #4]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d157      	bne.n	800e72c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800e67c:	2301      	movs	r3, #1
 800e67e:	e23f      	b.n	800eb00 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	685b      	ldr	r3, [r3, #4]
 800e684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e688:	d106      	bne.n	800e698 <HAL_RCC_OscConfig+0x74>
 800e68a:	4b91      	ldr	r3, [pc, #580]	; (800e8d0 <HAL_RCC_OscConfig+0x2ac>)
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	4a90      	ldr	r2, [pc, #576]	; (800e8d0 <HAL_RCC_OscConfig+0x2ac>)
 800e690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e694:	6013      	str	r3, [r2, #0]
 800e696:	e01d      	b.n	800e6d4 <HAL_RCC_OscConfig+0xb0>
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	685b      	ldr	r3, [r3, #4]
 800e69c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e6a0:	d10c      	bne.n	800e6bc <HAL_RCC_OscConfig+0x98>
 800e6a2:	4b8b      	ldr	r3, [pc, #556]	; (800e8d0 <HAL_RCC_OscConfig+0x2ac>)
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	4a8a      	ldr	r2, [pc, #552]	; (800e8d0 <HAL_RCC_OscConfig+0x2ac>)
 800e6a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e6ac:	6013      	str	r3, [r2, #0]
 800e6ae:	4b88      	ldr	r3, [pc, #544]	; (800e8d0 <HAL_RCC_OscConfig+0x2ac>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	4a87      	ldr	r2, [pc, #540]	; (800e8d0 <HAL_RCC_OscConfig+0x2ac>)
 800e6b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e6b8:	6013      	str	r3, [r2, #0]
 800e6ba:	e00b      	b.n	800e6d4 <HAL_RCC_OscConfig+0xb0>
 800e6bc:	4b84      	ldr	r3, [pc, #528]	; (800e8d0 <HAL_RCC_OscConfig+0x2ac>)
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	4a83      	ldr	r2, [pc, #524]	; (800e8d0 <HAL_RCC_OscConfig+0x2ac>)
 800e6c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e6c6:	6013      	str	r3, [r2, #0]
 800e6c8:	4b81      	ldr	r3, [pc, #516]	; (800e8d0 <HAL_RCC_OscConfig+0x2ac>)
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	4a80      	ldr	r2, [pc, #512]	; (800e8d0 <HAL_RCC_OscConfig+0x2ac>)
 800e6ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e6d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	685b      	ldr	r3, [r3, #4]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d013      	beq.n	800e704 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e6dc:	f7fd ff08 	bl	800c4f0 <HAL_GetTick>
 800e6e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e6e2:	e008      	b.n	800e6f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e6e4:	f7fd ff04 	bl	800c4f0 <HAL_GetTick>
 800e6e8:	4602      	mov	r2, r0
 800e6ea:	693b      	ldr	r3, [r7, #16]
 800e6ec:	1ad3      	subs	r3, r2, r3
 800e6ee:	2b64      	cmp	r3, #100	; 0x64
 800e6f0:	d901      	bls.n	800e6f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800e6f2:	2303      	movs	r3, #3
 800e6f4:	e204      	b.n	800eb00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e6f6:	4b76      	ldr	r3, [pc, #472]	; (800e8d0 <HAL_RCC_OscConfig+0x2ac>)
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d0f0      	beq.n	800e6e4 <HAL_RCC_OscConfig+0xc0>
 800e702:	e014      	b.n	800e72e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e704:	f7fd fef4 	bl	800c4f0 <HAL_GetTick>
 800e708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e70a:	e008      	b.n	800e71e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e70c:	f7fd fef0 	bl	800c4f0 <HAL_GetTick>
 800e710:	4602      	mov	r2, r0
 800e712:	693b      	ldr	r3, [r7, #16]
 800e714:	1ad3      	subs	r3, r2, r3
 800e716:	2b64      	cmp	r3, #100	; 0x64
 800e718:	d901      	bls.n	800e71e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800e71a:	2303      	movs	r3, #3
 800e71c:	e1f0      	b.n	800eb00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e71e:	4b6c      	ldr	r3, [pc, #432]	; (800e8d0 <HAL_RCC_OscConfig+0x2ac>)
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e726:	2b00      	cmp	r3, #0
 800e728:	d1f0      	bne.n	800e70c <HAL_RCC_OscConfig+0xe8>
 800e72a:	e000      	b.n	800e72e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e72c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	f003 0302 	and.w	r3, r3, #2
 800e736:	2b00      	cmp	r3, #0
 800e738:	d063      	beq.n	800e802 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800e73a:	4b65      	ldr	r3, [pc, #404]	; (800e8d0 <HAL_RCC_OscConfig+0x2ac>)
 800e73c:	689b      	ldr	r3, [r3, #8]
 800e73e:	f003 030c 	and.w	r3, r3, #12
 800e742:	2b00      	cmp	r3, #0
 800e744:	d00b      	beq.n	800e75e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e746:	4b62      	ldr	r3, [pc, #392]	; (800e8d0 <HAL_RCC_OscConfig+0x2ac>)
 800e748:	689b      	ldr	r3, [r3, #8]
 800e74a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800e74e:	2b08      	cmp	r3, #8
 800e750:	d11c      	bne.n	800e78c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e752:	4b5f      	ldr	r3, [pc, #380]	; (800e8d0 <HAL_RCC_OscConfig+0x2ac>)
 800e754:	685b      	ldr	r3, [r3, #4]
 800e756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d116      	bne.n	800e78c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e75e:	4b5c      	ldr	r3, [pc, #368]	; (800e8d0 <HAL_RCC_OscConfig+0x2ac>)
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	f003 0302 	and.w	r3, r3, #2
 800e766:	2b00      	cmp	r3, #0
 800e768:	d005      	beq.n	800e776 <HAL_RCC_OscConfig+0x152>
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	68db      	ldr	r3, [r3, #12]
 800e76e:	2b01      	cmp	r3, #1
 800e770:	d001      	beq.n	800e776 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800e772:	2301      	movs	r3, #1
 800e774:	e1c4      	b.n	800eb00 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e776:	4b56      	ldr	r3, [pc, #344]	; (800e8d0 <HAL_RCC_OscConfig+0x2ac>)
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	691b      	ldr	r3, [r3, #16]
 800e782:	00db      	lsls	r3, r3, #3
 800e784:	4952      	ldr	r1, [pc, #328]	; (800e8d0 <HAL_RCC_OscConfig+0x2ac>)
 800e786:	4313      	orrs	r3, r2
 800e788:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e78a:	e03a      	b.n	800e802 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	68db      	ldr	r3, [r3, #12]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d020      	beq.n	800e7d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e794:	4b4f      	ldr	r3, [pc, #316]	; (800e8d4 <HAL_RCC_OscConfig+0x2b0>)
 800e796:	2201      	movs	r2, #1
 800e798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e79a:	f7fd fea9 	bl	800c4f0 <HAL_GetTick>
 800e79e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e7a0:	e008      	b.n	800e7b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e7a2:	f7fd fea5 	bl	800c4f0 <HAL_GetTick>
 800e7a6:	4602      	mov	r2, r0
 800e7a8:	693b      	ldr	r3, [r7, #16]
 800e7aa:	1ad3      	subs	r3, r2, r3
 800e7ac:	2b02      	cmp	r3, #2
 800e7ae:	d901      	bls.n	800e7b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800e7b0:	2303      	movs	r3, #3
 800e7b2:	e1a5      	b.n	800eb00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e7b4:	4b46      	ldr	r3, [pc, #280]	; (800e8d0 <HAL_RCC_OscConfig+0x2ac>)
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	f003 0302 	and.w	r3, r3, #2
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d0f0      	beq.n	800e7a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e7c0:	4b43      	ldr	r3, [pc, #268]	; (800e8d0 <HAL_RCC_OscConfig+0x2ac>)
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	691b      	ldr	r3, [r3, #16]
 800e7cc:	00db      	lsls	r3, r3, #3
 800e7ce:	4940      	ldr	r1, [pc, #256]	; (800e8d0 <HAL_RCC_OscConfig+0x2ac>)
 800e7d0:	4313      	orrs	r3, r2
 800e7d2:	600b      	str	r3, [r1, #0]
 800e7d4:	e015      	b.n	800e802 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e7d6:	4b3f      	ldr	r3, [pc, #252]	; (800e8d4 <HAL_RCC_OscConfig+0x2b0>)
 800e7d8:	2200      	movs	r2, #0
 800e7da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e7dc:	f7fd fe88 	bl	800c4f0 <HAL_GetTick>
 800e7e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e7e2:	e008      	b.n	800e7f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e7e4:	f7fd fe84 	bl	800c4f0 <HAL_GetTick>
 800e7e8:	4602      	mov	r2, r0
 800e7ea:	693b      	ldr	r3, [r7, #16]
 800e7ec:	1ad3      	subs	r3, r2, r3
 800e7ee:	2b02      	cmp	r3, #2
 800e7f0:	d901      	bls.n	800e7f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800e7f2:	2303      	movs	r3, #3
 800e7f4:	e184      	b.n	800eb00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e7f6:	4b36      	ldr	r3, [pc, #216]	; (800e8d0 <HAL_RCC_OscConfig+0x2ac>)
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	f003 0302 	and.w	r3, r3, #2
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d1f0      	bne.n	800e7e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	f003 0308 	and.w	r3, r3, #8
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d030      	beq.n	800e870 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	695b      	ldr	r3, [r3, #20]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d016      	beq.n	800e844 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e816:	4b30      	ldr	r3, [pc, #192]	; (800e8d8 <HAL_RCC_OscConfig+0x2b4>)
 800e818:	2201      	movs	r2, #1
 800e81a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e81c:	f7fd fe68 	bl	800c4f0 <HAL_GetTick>
 800e820:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e822:	e008      	b.n	800e836 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e824:	f7fd fe64 	bl	800c4f0 <HAL_GetTick>
 800e828:	4602      	mov	r2, r0
 800e82a:	693b      	ldr	r3, [r7, #16]
 800e82c:	1ad3      	subs	r3, r2, r3
 800e82e:	2b02      	cmp	r3, #2
 800e830:	d901      	bls.n	800e836 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800e832:	2303      	movs	r3, #3
 800e834:	e164      	b.n	800eb00 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e836:	4b26      	ldr	r3, [pc, #152]	; (800e8d0 <HAL_RCC_OscConfig+0x2ac>)
 800e838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e83a:	f003 0302 	and.w	r3, r3, #2
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d0f0      	beq.n	800e824 <HAL_RCC_OscConfig+0x200>
 800e842:	e015      	b.n	800e870 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e844:	4b24      	ldr	r3, [pc, #144]	; (800e8d8 <HAL_RCC_OscConfig+0x2b4>)
 800e846:	2200      	movs	r2, #0
 800e848:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e84a:	f7fd fe51 	bl	800c4f0 <HAL_GetTick>
 800e84e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e850:	e008      	b.n	800e864 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e852:	f7fd fe4d 	bl	800c4f0 <HAL_GetTick>
 800e856:	4602      	mov	r2, r0
 800e858:	693b      	ldr	r3, [r7, #16]
 800e85a:	1ad3      	subs	r3, r2, r3
 800e85c:	2b02      	cmp	r3, #2
 800e85e:	d901      	bls.n	800e864 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800e860:	2303      	movs	r3, #3
 800e862:	e14d      	b.n	800eb00 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e864:	4b1a      	ldr	r3, [pc, #104]	; (800e8d0 <HAL_RCC_OscConfig+0x2ac>)
 800e866:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e868:	f003 0302 	and.w	r3, r3, #2
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d1f0      	bne.n	800e852 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	f003 0304 	and.w	r3, r3, #4
 800e878:	2b00      	cmp	r3, #0
 800e87a:	f000 80a0 	beq.w	800e9be <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e87e:	2300      	movs	r3, #0
 800e880:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e882:	4b13      	ldr	r3, [pc, #76]	; (800e8d0 <HAL_RCC_OscConfig+0x2ac>)
 800e884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d10f      	bne.n	800e8ae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e88e:	2300      	movs	r3, #0
 800e890:	60bb      	str	r3, [r7, #8]
 800e892:	4b0f      	ldr	r3, [pc, #60]	; (800e8d0 <HAL_RCC_OscConfig+0x2ac>)
 800e894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e896:	4a0e      	ldr	r2, [pc, #56]	; (800e8d0 <HAL_RCC_OscConfig+0x2ac>)
 800e898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e89c:	6413      	str	r3, [r2, #64]	; 0x40
 800e89e:	4b0c      	ldr	r3, [pc, #48]	; (800e8d0 <HAL_RCC_OscConfig+0x2ac>)
 800e8a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e8a6:	60bb      	str	r3, [r7, #8]
 800e8a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e8aa:	2301      	movs	r3, #1
 800e8ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e8ae:	4b0b      	ldr	r3, [pc, #44]	; (800e8dc <HAL_RCC_OscConfig+0x2b8>)
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d121      	bne.n	800e8fe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800e8ba:	4b08      	ldr	r3, [pc, #32]	; (800e8dc <HAL_RCC_OscConfig+0x2b8>)
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	4a07      	ldr	r2, [pc, #28]	; (800e8dc <HAL_RCC_OscConfig+0x2b8>)
 800e8c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e8c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e8c6:	f7fd fe13 	bl	800c4f0 <HAL_GetTick>
 800e8ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e8cc:	e011      	b.n	800e8f2 <HAL_RCC_OscConfig+0x2ce>
 800e8ce:	bf00      	nop
 800e8d0:	40023800 	.word	0x40023800
 800e8d4:	42470000 	.word	0x42470000
 800e8d8:	42470e80 	.word	0x42470e80
 800e8dc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e8e0:	f7fd fe06 	bl	800c4f0 <HAL_GetTick>
 800e8e4:	4602      	mov	r2, r0
 800e8e6:	693b      	ldr	r3, [r7, #16]
 800e8e8:	1ad3      	subs	r3, r2, r3
 800e8ea:	2b02      	cmp	r3, #2
 800e8ec:	d901      	bls.n	800e8f2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800e8ee:	2303      	movs	r3, #3
 800e8f0:	e106      	b.n	800eb00 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e8f2:	4b85      	ldr	r3, [pc, #532]	; (800eb08 <HAL_RCC_OscConfig+0x4e4>)
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d0f0      	beq.n	800e8e0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	689b      	ldr	r3, [r3, #8]
 800e902:	2b01      	cmp	r3, #1
 800e904:	d106      	bne.n	800e914 <HAL_RCC_OscConfig+0x2f0>
 800e906:	4b81      	ldr	r3, [pc, #516]	; (800eb0c <HAL_RCC_OscConfig+0x4e8>)
 800e908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e90a:	4a80      	ldr	r2, [pc, #512]	; (800eb0c <HAL_RCC_OscConfig+0x4e8>)
 800e90c:	f043 0301 	orr.w	r3, r3, #1
 800e910:	6713      	str	r3, [r2, #112]	; 0x70
 800e912:	e01c      	b.n	800e94e <HAL_RCC_OscConfig+0x32a>
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	689b      	ldr	r3, [r3, #8]
 800e918:	2b05      	cmp	r3, #5
 800e91a:	d10c      	bne.n	800e936 <HAL_RCC_OscConfig+0x312>
 800e91c:	4b7b      	ldr	r3, [pc, #492]	; (800eb0c <HAL_RCC_OscConfig+0x4e8>)
 800e91e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e920:	4a7a      	ldr	r2, [pc, #488]	; (800eb0c <HAL_RCC_OscConfig+0x4e8>)
 800e922:	f043 0304 	orr.w	r3, r3, #4
 800e926:	6713      	str	r3, [r2, #112]	; 0x70
 800e928:	4b78      	ldr	r3, [pc, #480]	; (800eb0c <HAL_RCC_OscConfig+0x4e8>)
 800e92a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e92c:	4a77      	ldr	r2, [pc, #476]	; (800eb0c <HAL_RCC_OscConfig+0x4e8>)
 800e92e:	f043 0301 	orr.w	r3, r3, #1
 800e932:	6713      	str	r3, [r2, #112]	; 0x70
 800e934:	e00b      	b.n	800e94e <HAL_RCC_OscConfig+0x32a>
 800e936:	4b75      	ldr	r3, [pc, #468]	; (800eb0c <HAL_RCC_OscConfig+0x4e8>)
 800e938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e93a:	4a74      	ldr	r2, [pc, #464]	; (800eb0c <HAL_RCC_OscConfig+0x4e8>)
 800e93c:	f023 0301 	bic.w	r3, r3, #1
 800e940:	6713      	str	r3, [r2, #112]	; 0x70
 800e942:	4b72      	ldr	r3, [pc, #456]	; (800eb0c <HAL_RCC_OscConfig+0x4e8>)
 800e944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e946:	4a71      	ldr	r2, [pc, #452]	; (800eb0c <HAL_RCC_OscConfig+0x4e8>)
 800e948:	f023 0304 	bic.w	r3, r3, #4
 800e94c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	689b      	ldr	r3, [r3, #8]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d015      	beq.n	800e982 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e956:	f7fd fdcb 	bl	800c4f0 <HAL_GetTick>
 800e95a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e95c:	e00a      	b.n	800e974 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e95e:	f7fd fdc7 	bl	800c4f0 <HAL_GetTick>
 800e962:	4602      	mov	r2, r0
 800e964:	693b      	ldr	r3, [r7, #16]
 800e966:	1ad3      	subs	r3, r2, r3
 800e968:	f241 3288 	movw	r2, #5000	; 0x1388
 800e96c:	4293      	cmp	r3, r2
 800e96e:	d901      	bls.n	800e974 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800e970:	2303      	movs	r3, #3
 800e972:	e0c5      	b.n	800eb00 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e974:	4b65      	ldr	r3, [pc, #404]	; (800eb0c <HAL_RCC_OscConfig+0x4e8>)
 800e976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e978:	f003 0302 	and.w	r3, r3, #2
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d0ee      	beq.n	800e95e <HAL_RCC_OscConfig+0x33a>
 800e980:	e014      	b.n	800e9ac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e982:	f7fd fdb5 	bl	800c4f0 <HAL_GetTick>
 800e986:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e988:	e00a      	b.n	800e9a0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e98a:	f7fd fdb1 	bl	800c4f0 <HAL_GetTick>
 800e98e:	4602      	mov	r2, r0
 800e990:	693b      	ldr	r3, [r7, #16]
 800e992:	1ad3      	subs	r3, r2, r3
 800e994:	f241 3288 	movw	r2, #5000	; 0x1388
 800e998:	4293      	cmp	r3, r2
 800e99a:	d901      	bls.n	800e9a0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800e99c:	2303      	movs	r3, #3
 800e99e:	e0af      	b.n	800eb00 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e9a0:	4b5a      	ldr	r3, [pc, #360]	; (800eb0c <HAL_RCC_OscConfig+0x4e8>)
 800e9a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9a4:	f003 0302 	and.w	r3, r3, #2
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d1ee      	bne.n	800e98a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800e9ac:	7dfb      	ldrb	r3, [r7, #23]
 800e9ae:	2b01      	cmp	r3, #1
 800e9b0:	d105      	bne.n	800e9be <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e9b2:	4b56      	ldr	r3, [pc, #344]	; (800eb0c <HAL_RCC_OscConfig+0x4e8>)
 800e9b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9b6:	4a55      	ldr	r2, [pc, #340]	; (800eb0c <HAL_RCC_OscConfig+0x4e8>)
 800e9b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e9bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	699b      	ldr	r3, [r3, #24]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	f000 809b 	beq.w	800eafe <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800e9c8:	4b50      	ldr	r3, [pc, #320]	; (800eb0c <HAL_RCC_OscConfig+0x4e8>)
 800e9ca:	689b      	ldr	r3, [r3, #8]
 800e9cc:	f003 030c 	and.w	r3, r3, #12
 800e9d0:	2b08      	cmp	r3, #8
 800e9d2:	d05c      	beq.n	800ea8e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	699b      	ldr	r3, [r3, #24]
 800e9d8:	2b02      	cmp	r3, #2
 800e9da:	d141      	bne.n	800ea60 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e9dc:	4b4c      	ldr	r3, [pc, #304]	; (800eb10 <HAL_RCC_OscConfig+0x4ec>)
 800e9de:	2200      	movs	r2, #0
 800e9e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e9e2:	f7fd fd85 	bl	800c4f0 <HAL_GetTick>
 800e9e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e9e8:	e008      	b.n	800e9fc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e9ea:	f7fd fd81 	bl	800c4f0 <HAL_GetTick>
 800e9ee:	4602      	mov	r2, r0
 800e9f0:	693b      	ldr	r3, [r7, #16]
 800e9f2:	1ad3      	subs	r3, r2, r3
 800e9f4:	2b02      	cmp	r3, #2
 800e9f6:	d901      	bls.n	800e9fc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800e9f8:	2303      	movs	r3, #3
 800e9fa:	e081      	b.n	800eb00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e9fc:	4b43      	ldr	r3, [pc, #268]	; (800eb0c <HAL_RCC_OscConfig+0x4e8>)
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d1f0      	bne.n	800e9ea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	69da      	ldr	r2, [r3, #28]
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	6a1b      	ldr	r3, [r3, #32]
 800ea10:	431a      	orrs	r2, r3
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea16:	019b      	lsls	r3, r3, #6
 800ea18:	431a      	orrs	r2, r3
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea1e:	085b      	lsrs	r3, r3, #1
 800ea20:	3b01      	subs	r3, #1
 800ea22:	041b      	lsls	r3, r3, #16
 800ea24:	431a      	orrs	r2, r3
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea2a:	061b      	lsls	r3, r3, #24
 800ea2c:	4937      	ldr	r1, [pc, #220]	; (800eb0c <HAL_RCC_OscConfig+0x4e8>)
 800ea2e:	4313      	orrs	r3, r2
 800ea30:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ea32:	4b37      	ldr	r3, [pc, #220]	; (800eb10 <HAL_RCC_OscConfig+0x4ec>)
 800ea34:	2201      	movs	r2, #1
 800ea36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ea38:	f7fd fd5a 	bl	800c4f0 <HAL_GetTick>
 800ea3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ea3e:	e008      	b.n	800ea52 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ea40:	f7fd fd56 	bl	800c4f0 <HAL_GetTick>
 800ea44:	4602      	mov	r2, r0
 800ea46:	693b      	ldr	r3, [r7, #16]
 800ea48:	1ad3      	subs	r3, r2, r3
 800ea4a:	2b02      	cmp	r3, #2
 800ea4c:	d901      	bls.n	800ea52 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800ea4e:	2303      	movs	r3, #3
 800ea50:	e056      	b.n	800eb00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ea52:	4b2e      	ldr	r3, [pc, #184]	; (800eb0c <HAL_RCC_OscConfig+0x4e8>)
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d0f0      	beq.n	800ea40 <HAL_RCC_OscConfig+0x41c>
 800ea5e:	e04e      	b.n	800eafe <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ea60:	4b2b      	ldr	r3, [pc, #172]	; (800eb10 <HAL_RCC_OscConfig+0x4ec>)
 800ea62:	2200      	movs	r2, #0
 800ea64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ea66:	f7fd fd43 	bl	800c4f0 <HAL_GetTick>
 800ea6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ea6c:	e008      	b.n	800ea80 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ea6e:	f7fd fd3f 	bl	800c4f0 <HAL_GetTick>
 800ea72:	4602      	mov	r2, r0
 800ea74:	693b      	ldr	r3, [r7, #16]
 800ea76:	1ad3      	subs	r3, r2, r3
 800ea78:	2b02      	cmp	r3, #2
 800ea7a:	d901      	bls.n	800ea80 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800ea7c:	2303      	movs	r3, #3
 800ea7e:	e03f      	b.n	800eb00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ea80:	4b22      	ldr	r3, [pc, #136]	; (800eb0c <HAL_RCC_OscConfig+0x4e8>)
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d1f0      	bne.n	800ea6e <HAL_RCC_OscConfig+0x44a>
 800ea8c:	e037      	b.n	800eafe <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	699b      	ldr	r3, [r3, #24]
 800ea92:	2b01      	cmp	r3, #1
 800ea94:	d101      	bne.n	800ea9a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800ea96:	2301      	movs	r3, #1
 800ea98:	e032      	b.n	800eb00 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800ea9a:	4b1c      	ldr	r3, [pc, #112]	; (800eb0c <HAL_RCC_OscConfig+0x4e8>)
 800ea9c:	685b      	ldr	r3, [r3, #4]
 800ea9e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	699b      	ldr	r3, [r3, #24]
 800eaa4:	2b01      	cmp	r3, #1
 800eaa6:	d028      	beq.n	800eafa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800eab2:	429a      	cmp	r2, r3
 800eab4:	d121      	bne.n	800eafa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800eac0:	429a      	cmp	r2, r3
 800eac2:	d11a      	bne.n	800eafa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800eac4:	68fa      	ldr	r2, [r7, #12]
 800eac6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800eaca:	4013      	ands	r3, r2
 800eacc:	687a      	ldr	r2, [r7, #4]
 800eace:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ead0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ead2:	4293      	cmp	r3, r2
 800ead4:	d111      	bne.n	800eafa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eae0:	085b      	lsrs	r3, r3, #1
 800eae2:	3b01      	subs	r3, #1
 800eae4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800eae6:	429a      	cmp	r2, r3
 800eae8:	d107      	bne.n	800eafa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaf4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800eaf6:	429a      	cmp	r2, r3
 800eaf8:	d001      	beq.n	800eafe <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800eafa:	2301      	movs	r3, #1
 800eafc:	e000      	b.n	800eb00 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800eafe:	2300      	movs	r3, #0
}
 800eb00:	4618      	mov	r0, r3
 800eb02:	3718      	adds	r7, #24
 800eb04:	46bd      	mov	sp, r7
 800eb06:	bd80      	pop	{r7, pc}
 800eb08:	40007000 	.word	0x40007000
 800eb0c:	40023800 	.word	0x40023800
 800eb10:	42470060 	.word	0x42470060

0800eb14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b084      	sub	sp, #16
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
 800eb1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d101      	bne.n	800eb28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800eb24:	2301      	movs	r3, #1
 800eb26:	e0cc      	b.n	800ecc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800eb28:	4b68      	ldr	r3, [pc, #416]	; (800eccc <HAL_RCC_ClockConfig+0x1b8>)
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	f003 030f 	and.w	r3, r3, #15
 800eb30:	683a      	ldr	r2, [r7, #0]
 800eb32:	429a      	cmp	r2, r3
 800eb34:	d90c      	bls.n	800eb50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800eb36:	4b65      	ldr	r3, [pc, #404]	; (800eccc <HAL_RCC_ClockConfig+0x1b8>)
 800eb38:	683a      	ldr	r2, [r7, #0]
 800eb3a:	b2d2      	uxtb	r2, r2
 800eb3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800eb3e:	4b63      	ldr	r3, [pc, #396]	; (800eccc <HAL_RCC_ClockConfig+0x1b8>)
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	f003 030f 	and.w	r3, r3, #15
 800eb46:	683a      	ldr	r2, [r7, #0]
 800eb48:	429a      	cmp	r2, r3
 800eb4a:	d001      	beq.n	800eb50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800eb4c:	2301      	movs	r3, #1
 800eb4e:	e0b8      	b.n	800ecc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	f003 0302 	and.w	r3, r3, #2
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d020      	beq.n	800eb9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	f003 0304 	and.w	r3, r3, #4
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d005      	beq.n	800eb74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800eb68:	4b59      	ldr	r3, [pc, #356]	; (800ecd0 <HAL_RCC_ClockConfig+0x1bc>)
 800eb6a:	689b      	ldr	r3, [r3, #8]
 800eb6c:	4a58      	ldr	r2, [pc, #352]	; (800ecd0 <HAL_RCC_ClockConfig+0x1bc>)
 800eb6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800eb72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	f003 0308 	and.w	r3, r3, #8
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d005      	beq.n	800eb8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800eb80:	4b53      	ldr	r3, [pc, #332]	; (800ecd0 <HAL_RCC_ClockConfig+0x1bc>)
 800eb82:	689b      	ldr	r3, [r3, #8]
 800eb84:	4a52      	ldr	r2, [pc, #328]	; (800ecd0 <HAL_RCC_ClockConfig+0x1bc>)
 800eb86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800eb8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800eb8c:	4b50      	ldr	r3, [pc, #320]	; (800ecd0 <HAL_RCC_ClockConfig+0x1bc>)
 800eb8e:	689b      	ldr	r3, [r3, #8]
 800eb90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	689b      	ldr	r3, [r3, #8]
 800eb98:	494d      	ldr	r1, [pc, #308]	; (800ecd0 <HAL_RCC_ClockConfig+0x1bc>)
 800eb9a:	4313      	orrs	r3, r2
 800eb9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	f003 0301 	and.w	r3, r3, #1
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d044      	beq.n	800ec34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	685b      	ldr	r3, [r3, #4]
 800ebae:	2b01      	cmp	r3, #1
 800ebb0:	d107      	bne.n	800ebc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ebb2:	4b47      	ldr	r3, [pc, #284]	; (800ecd0 <HAL_RCC_ClockConfig+0x1bc>)
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d119      	bne.n	800ebf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ebbe:	2301      	movs	r3, #1
 800ebc0:	e07f      	b.n	800ecc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	685b      	ldr	r3, [r3, #4]
 800ebc6:	2b02      	cmp	r3, #2
 800ebc8:	d003      	beq.n	800ebd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ebce:	2b03      	cmp	r3, #3
 800ebd0:	d107      	bne.n	800ebe2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ebd2:	4b3f      	ldr	r3, [pc, #252]	; (800ecd0 <HAL_RCC_ClockConfig+0x1bc>)
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d109      	bne.n	800ebf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ebde:	2301      	movs	r3, #1
 800ebe0:	e06f      	b.n	800ecc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ebe2:	4b3b      	ldr	r3, [pc, #236]	; (800ecd0 <HAL_RCC_ClockConfig+0x1bc>)
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	f003 0302 	and.w	r3, r3, #2
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d101      	bne.n	800ebf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ebee:	2301      	movs	r3, #1
 800ebf0:	e067      	b.n	800ecc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ebf2:	4b37      	ldr	r3, [pc, #220]	; (800ecd0 <HAL_RCC_ClockConfig+0x1bc>)
 800ebf4:	689b      	ldr	r3, [r3, #8]
 800ebf6:	f023 0203 	bic.w	r2, r3, #3
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	685b      	ldr	r3, [r3, #4]
 800ebfe:	4934      	ldr	r1, [pc, #208]	; (800ecd0 <HAL_RCC_ClockConfig+0x1bc>)
 800ec00:	4313      	orrs	r3, r2
 800ec02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ec04:	f7fd fc74 	bl	800c4f0 <HAL_GetTick>
 800ec08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ec0a:	e00a      	b.n	800ec22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ec0c:	f7fd fc70 	bl	800c4f0 <HAL_GetTick>
 800ec10:	4602      	mov	r2, r0
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	1ad3      	subs	r3, r2, r3
 800ec16:	f241 3288 	movw	r2, #5000	; 0x1388
 800ec1a:	4293      	cmp	r3, r2
 800ec1c:	d901      	bls.n	800ec22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ec1e:	2303      	movs	r3, #3
 800ec20:	e04f      	b.n	800ecc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ec22:	4b2b      	ldr	r3, [pc, #172]	; (800ecd0 <HAL_RCC_ClockConfig+0x1bc>)
 800ec24:	689b      	ldr	r3, [r3, #8]
 800ec26:	f003 020c 	and.w	r2, r3, #12
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	685b      	ldr	r3, [r3, #4]
 800ec2e:	009b      	lsls	r3, r3, #2
 800ec30:	429a      	cmp	r2, r3
 800ec32:	d1eb      	bne.n	800ec0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ec34:	4b25      	ldr	r3, [pc, #148]	; (800eccc <HAL_RCC_ClockConfig+0x1b8>)
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	f003 030f 	and.w	r3, r3, #15
 800ec3c:	683a      	ldr	r2, [r7, #0]
 800ec3e:	429a      	cmp	r2, r3
 800ec40:	d20c      	bcs.n	800ec5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ec42:	4b22      	ldr	r3, [pc, #136]	; (800eccc <HAL_RCC_ClockConfig+0x1b8>)
 800ec44:	683a      	ldr	r2, [r7, #0]
 800ec46:	b2d2      	uxtb	r2, r2
 800ec48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ec4a:	4b20      	ldr	r3, [pc, #128]	; (800eccc <HAL_RCC_ClockConfig+0x1b8>)
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	f003 030f 	and.w	r3, r3, #15
 800ec52:	683a      	ldr	r2, [r7, #0]
 800ec54:	429a      	cmp	r2, r3
 800ec56:	d001      	beq.n	800ec5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800ec58:	2301      	movs	r3, #1
 800ec5a:	e032      	b.n	800ecc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	f003 0304 	and.w	r3, r3, #4
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d008      	beq.n	800ec7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ec68:	4b19      	ldr	r3, [pc, #100]	; (800ecd0 <HAL_RCC_ClockConfig+0x1bc>)
 800ec6a:	689b      	ldr	r3, [r3, #8]
 800ec6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	68db      	ldr	r3, [r3, #12]
 800ec74:	4916      	ldr	r1, [pc, #88]	; (800ecd0 <HAL_RCC_ClockConfig+0x1bc>)
 800ec76:	4313      	orrs	r3, r2
 800ec78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	f003 0308 	and.w	r3, r3, #8
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d009      	beq.n	800ec9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ec86:	4b12      	ldr	r3, [pc, #72]	; (800ecd0 <HAL_RCC_ClockConfig+0x1bc>)
 800ec88:	689b      	ldr	r3, [r3, #8]
 800ec8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	691b      	ldr	r3, [r3, #16]
 800ec92:	00db      	lsls	r3, r3, #3
 800ec94:	490e      	ldr	r1, [pc, #56]	; (800ecd0 <HAL_RCC_ClockConfig+0x1bc>)
 800ec96:	4313      	orrs	r3, r2
 800ec98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800ec9a:	f000 f821 	bl	800ece0 <HAL_RCC_GetSysClockFreq>
 800ec9e:	4602      	mov	r2, r0
 800eca0:	4b0b      	ldr	r3, [pc, #44]	; (800ecd0 <HAL_RCC_ClockConfig+0x1bc>)
 800eca2:	689b      	ldr	r3, [r3, #8]
 800eca4:	091b      	lsrs	r3, r3, #4
 800eca6:	f003 030f 	and.w	r3, r3, #15
 800ecaa:	490a      	ldr	r1, [pc, #40]	; (800ecd4 <HAL_RCC_ClockConfig+0x1c0>)
 800ecac:	5ccb      	ldrb	r3, [r1, r3]
 800ecae:	fa22 f303 	lsr.w	r3, r2, r3
 800ecb2:	4a09      	ldr	r2, [pc, #36]	; (800ecd8 <HAL_RCC_ClockConfig+0x1c4>)
 800ecb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800ecb6:	4b09      	ldr	r3, [pc, #36]	; (800ecdc <HAL_RCC_ClockConfig+0x1c8>)
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	4618      	mov	r0, r3
 800ecbc:	f7f4 fc6e 	bl	800359c <HAL_InitTick>

  return HAL_OK;
 800ecc0:	2300      	movs	r3, #0
}
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	3710      	adds	r7, #16
 800ecc6:	46bd      	mov	sp, r7
 800ecc8:	bd80      	pop	{r7, pc}
 800ecca:	bf00      	nop
 800eccc:	40023c00 	.word	0x40023c00
 800ecd0:	40023800 	.word	0x40023800
 800ecd4:	080229b0 	.word	0x080229b0
 800ecd8:	20000088 	.word	0x20000088
 800ecdc:	200000cc 	.word	0x200000cc

0800ece0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ece0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ece4:	b084      	sub	sp, #16
 800ece6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800ece8:	2300      	movs	r3, #0
 800ecea:	607b      	str	r3, [r7, #4]
 800ecec:	2300      	movs	r3, #0
 800ecee:	60fb      	str	r3, [r7, #12]
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ecf8:	4b67      	ldr	r3, [pc, #412]	; (800ee98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800ecfa:	689b      	ldr	r3, [r3, #8]
 800ecfc:	f003 030c 	and.w	r3, r3, #12
 800ed00:	2b08      	cmp	r3, #8
 800ed02:	d00d      	beq.n	800ed20 <HAL_RCC_GetSysClockFreq+0x40>
 800ed04:	2b08      	cmp	r3, #8
 800ed06:	f200 80bd 	bhi.w	800ee84 <HAL_RCC_GetSysClockFreq+0x1a4>
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d002      	beq.n	800ed14 <HAL_RCC_GetSysClockFreq+0x34>
 800ed0e:	2b04      	cmp	r3, #4
 800ed10:	d003      	beq.n	800ed1a <HAL_RCC_GetSysClockFreq+0x3a>
 800ed12:	e0b7      	b.n	800ee84 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ed14:	4b61      	ldr	r3, [pc, #388]	; (800ee9c <HAL_RCC_GetSysClockFreq+0x1bc>)
 800ed16:	60bb      	str	r3, [r7, #8]
       break;
 800ed18:	e0b7      	b.n	800ee8a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ed1a:	4b60      	ldr	r3, [pc, #384]	; (800ee9c <HAL_RCC_GetSysClockFreq+0x1bc>)
 800ed1c:	60bb      	str	r3, [r7, #8]
      break;
 800ed1e:	e0b4      	b.n	800ee8a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ed20:	4b5d      	ldr	r3, [pc, #372]	; (800ee98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800ed22:	685b      	ldr	r3, [r3, #4]
 800ed24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ed28:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ed2a:	4b5b      	ldr	r3, [pc, #364]	; (800ee98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800ed2c:	685b      	ldr	r3, [r3, #4]
 800ed2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d04d      	beq.n	800edd2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ed36:	4b58      	ldr	r3, [pc, #352]	; (800ee98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800ed38:	685b      	ldr	r3, [r3, #4]
 800ed3a:	099b      	lsrs	r3, r3, #6
 800ed3c:	461a      	mov	r2, r3
 800ed3e:	f04f 0300 	mov.w	r3, #0
 800ed42:	f240 10ff 	movw	r0, #511	; 0x1ff
 800ed46:	f04f 0100 	mov.w	r1, #0
 800ed4a:	ea02 0800 	and.w	r8, r2, r0
 800ed4e:	ea03 0901 	and.w	r9, r3, r1
 800ed52:	4640      	mov	r0, r8
 800ed54:	4649      	mov	r1, r9
 800ed56:	f04f 0200 	mov.w	r2, #0
 800ed5a:	f04f 0300 	mov.w	r3, #0
 800ed5e:	014b      	lsls	r3, r1, #5
 800ed60:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800ed64:	0142      	lsls	r2, r0, #5
 800ed66:	4610      	mov	r0, r2
 800ed68:	4619      	mov	r1, r3
 800ed6a:	ebb0 0008 	subs.w	r0, r0, r8
 800ed6e:	eb61 0109 	sbc.w	r1, r1, r9
 800ed72:	f04f 0200 	mov.w	r2, #0
 800ed76:	f04f 0300 	mov.w	r3, #0
 800ed7a:	018b      	lsls	r3, r1, #6
 800ed7c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800ed80:	0182      	lsls	r2, r0, #6
 800ed82:	1a12      	subs	r2, r2, r0
 800ed84:	eb63 0301 	sbc.w	r3, r3, r1
 800ed88:	f04f 0000 	mov.w	r0, #0
 800ed8c:	f04f 0100 	mov.w	r1, #0
 800ed90:	00d9      	lsls	r1, r3, #3
 800ed92:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ed96:	00d0      	lsls	r0, r2, #3
 800ed98:	4602      	mov	r2, r0
 800ed9a:	460b      	mov	r3, r1
 800ed9c:	eb12 0208 	adds.w	r2, r2, r8
 800eda0:	eb43 0309 	adc.w	r3, r3, r9
 800eda4:	f04f 0000 	mov.w	r0, #0
 800eda8:	f04f 0100 	mov.w	r1, #0
 800edac:	0299      	lsls	r1, r3, #10
 800edae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800edb2:	0290      	lsls	r0, r2, #10
 800edb4:	4602      	mov	r2, r0
 800edb6:	460b      	mov	r3, r1
 800edb8:	4610      	mov	r0, r2
 800edba:	4619      	mov	r1, r3
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	461a      	mov	r2, r3
 800edc0:	f04f 0300 	mov.w	r3, #0
 800edc4:	f7f1 ffd0 	bl	8000d68 <__aeabi_uldivmod>
 800edc8:	4602      	mov	r2, r0
 800edca:	460b      	mov	r3, r1
 800edcc:	4613      	mov	r3, r2
 800edce:	60fb      	str	r3, [r7, #12]
 800edd0:	e04a      	b.n	800ee68 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800edd2:	4b31      	ldr	r3, [pc, #196]	; (800ee98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800edd4:	685b      	ldr	r3, [r3, #4]
 800edd6:	099b      	lsrs	r3, r3, #6
 800edd8:	461a      	mov	r2, r3
 800edda:	f04f 0300 	mov.w	r3, #0
 800edde:	f240 10ff 	movw	r0, #511	; 0x1ff
 800ede2:	f04f 0100 	mov.w	r1, #0
 800ede6:	ea02 0400 	and.w	r4, r2, r0
 800edea:	ea03 0501 	and.w	r5, r3, r1
 800edee:	4620      	mov	r0, r4
 800edf0:	4629      	mov	r1, r5
 800edf2:	f04f 0200 	mov.w	r2, #0
 800edf6:	f04f 0300 	mov.w	r3, #0
 800edfa:	014b      	lsls	r3, r1, #5
 800edfc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800ee00:	0142      	lsls	r2, r0, #5
 800ee02:	4610      	mov	r0, r2
 800ee04:	4619      	mov	r1, r3
 800ee06:	1b00      	subs	r0, r0, r4
 800ee08:	eb61 0105 	sbc.w	r1, r1, r5
 800ee0c:	f04f 0200 	mov.w	r2, #0
 800ee10:	f04f 0300 	mov.w	r3, #0
 800ee14:	018b      	lsls	r3, r1, #6
 800ee16:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800ee1a:	0182      	lsls	r2, r0, #6
 800ee1c:	1a12      	subs	r2, r2, r0
 800ee1e:	eb63 0301 	sbc.w	r3, r3, r1
 800ee22:	f04f 0000 	mov.w	r0, #0
 800ee26:	f04f 0100 	mov.w	r1, #0
 800ee2a:	00d9      	lsls	r1, r3, #3
 800ee2c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ee30:	00d0      	lsls	r0, r2, #3
 800ee32:	4602      	mov	r2, r0
 800ee34:	460b      	mov	r3, r1
 800ee36:	1912      	adds	r2, r2, r4
 800ee38:	eb45 0303 	adc.w	r3, r5, r3
 800ee3c:	f04f 0000 	mov.w	r0, #0
 800ee40:	f04f 0100 	mov.w	r1, #0
 800ee44:	0299      	lsls	r1, r3, #10
 800ee46:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800ee4a:	0290      	lsls	r0, r2, #10
 800ee4c:	4602      	mov	r2, r0
 800ee4e:	460b      	mov	r3, r1
 800ee50:	4610      	mov	r0, r2
 800ee52:	4619      	mov	r1, r3
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	461a      	mov	r2, r3
 800ee58:	f04f 0300 	mov.w	r3, #0
 800ee5c:	f7f1 ff84 	bl	8000d68 <__aeabi_uldivmod>
 800ee60:	4602      	mov	r2, r0
 800ee62:	460b      	mov	r3, r1
 800ee64:	4613      	mov	r3, r2
 800ee66:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800ee68:	4b0b      	ldr	r3, [pc, #44]	; (800ee98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800ee6a:	685b      	ldr	r3, [r3, #4]
 800ee6c:	0c1b      	lsrs	r3, r3, #16
 800ee6e:	f003 0303 	and.w	r3, r3, #3
 800ee72:	3301      	adds	r3, #1
 800ee74:	005b      	lsls	r3, r3, #1
 800ee76:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800ee78:	68fa      	ldr	r2, [r7, #12]
 800ee7a:	683b      	ldr	r3, [r7, #0]
 800ee7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee80:	60bb      	str	r3, [r7, #8]
      break;
 800ee82:	e002      	b.n	800ee8a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ee84:	4b05      	ldr	r3, [pc, #20]	; (800ee9c <HAL_RCC_GetSysClockFreq+0x1bc>)
 800ee86:	60bb      	str	r3, [r7, #8]
      break;
 800ee88:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ee8a:	68bb      	ldr	r3, [r7, #8]
}
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	3710      	adds	r7, #16
 800ee90:	46bd      	mov	sp, r7
 800ee92:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800ee96:	bf00      	nop
 800ee98:	40023800 	.word	0x40023800
 800ee9c:	00f42400 	.word	0x00f42400

0800eea0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800eea0:	b480      	push	{r7}
 800eea2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800eea4:	4b03      	ldr	r3, [pc, #12]	; (800eeb4 <HAL_RCC_GetHCLKFreq+0x14>)
 800eea6:	681b      	ldr	r3, [r3, #0]
}
 800eea8:	4618      	mov	r0, r3
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb0:	4770      	bx	lr
 800eeb2:	bf00      	nop
 800eeb4:	20000088 	.word	0x20000088

0800eeb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800eebc:	f7ff fff0 	bl	800eea0 <HAL_RCC_GetHCLKFreq>
 800eec0:	4602      	mov	r2, r0
 800eec2:	4b05      	ldr	r3, [pc, #20]	; (800eed8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800eec4:	689b      	ldr	r3, [r3, #8]
 800eec6:	0a9b      	lsrs	r3, r3, #10
 800eec8:	f003 0307 	and.w	r3, r3, #7
 800eecc:	4903      	ldr	r1, [pc, #12]	; (800eedc <HAL_RCC_GetPCLK1Freq+0x24>)
 800eece:	5ccb      	ldrb	r3, [r1, r3]
 800eed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800eed4:	4618      	mov	r0, r3
 800eed6:	bd80      	pop	{r7, pc}
 800eed8:	40023800 	.word	0x40023800
 800eedc:	080229c0 	.word	0x080229c0

0800eee0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800eee0:	b580      	push	{r7, lr}
 800eee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800eee4:	f7ff ffdc 	bl	800eea0 <HAL_RCC_GetHCLKFreq>
 800eee8:	4602      	mov	r2, r0
 800eeea:	4b05      	ldr	r3, [pc, #20]	; (800ef00 <HAL_RCC_GetPCLK2Freq+0x20>)
 800eeec:	689b      	ldr	r3, [r3, #8]
 800eeee:	0b5b      	lsrs	r3, r3, #13
 800eef0:	f003 0307 	and.w	r3, r3, #7
 800eef4:	4903      	ldr	r1, [pc, #12]	; (800ef04 <HAL_RCC_GetPCLK2Freq+0x24>)
 800eef6:	5ccb      	ldrb	r3, [r1, r3]
 800eef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800eefc:	4618      	mov	r0, r3
 800eefe:	bd80      	pop	{r7, pc}
 800ef00:	40023800 	.word	0x40023800
 800ef04:	080229c0 	.word	0x080229c0

0800ef08 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ef08:	b480      	push	{r7}
 800ef0a:	b083      	sub	sp, #12
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
 800ef10:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	220f      	movs	r2, #15
 800ef16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ef18:	4b12      	ldr	r3, [pc, #72]	; (800ef64 <HAL_RCC_GetClockConfig+0x5c>)
 800ef1a:	689b      	ldr	r3, [r3, #8]
 800ef1c:	f003 0203 	and.w	r2, r3, #3
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800ef24:	4b0f      	ldr	r3, [pc, #60]	; (800ef64 <HAL_RCC_GetClockConfig+0x5c>)
 800ef26:	689b      	ldr	r3, [r3, #8]
 800ef28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800ef30:	4b0c      	ldr	r3, [pc, #48]	; (800ef64 <HAL_RCC_GetClockConfig+0x5c>)
 800ef32:	689b      	ldr	r3, [r3, #8]
 800ef34:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800ef3c:	4b09      	ldr	r3, [pc, #36]	; (800ef64 <HAL_RCC_GetClockConfig+0x5c>)
 800ef3e:	689b      	ldr	r3, [r3, #8]
 800ef40:	08db      	lsrs	r3, r3, #3
 800ef42:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ef4a:	4b07      	ldr	r3, [pc, #28]	; (800ef68 <HAL_RCC_GetClockConfig+0x60>)
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	f003 020f 	and.w	r2, r3, #15
 800ef52:	683b      	ldr	r3, [r7, #0]
 800ef54:	601a      	str	r2, [r3, #0]
}
 800ef56:	bf00      	nop
 800ef58:	370c      	adds	r7, #12
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef60:	4770      	bx	lr
 800ef62:	bf00      	nop
 800ef64:	40023800 	.word	0x40023800
 800ef68:	40023c00 	.word	0x40023c00

0800ef6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ef6c:	b580      	push	{r7, lr}
 800ef6e:	b086      	sub	sp, #24
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ef74:	2300      	movs	r3, #0
 800ef76:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800ef78:	2300      	movs	r3, #0
 800ef7a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	f003 0301 	and.w	r3, r3, #1
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d10b      	bne.n	800efa0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d105      	bne.n	800efa0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d075      	beq.n	800f08c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800efa0:	4bad      	ldr	r3, [pc, #692]	; (800f258 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800efa2:	2200      	movs	r2, #0
 800efa4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800efa6:	f7fd faa3 	bl	800c4f0 <HAL_GetTick>
 800efaa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800efac:	e008      	b.n	800efc0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800efae:	f7fd fa9f 	bl	800c4f0 <HAL_GetTick>
 800efb2:	4602      	mov	r2, r0
 800efb4:	697b      	ldr	r3, [r7, #20]
 800efb6:	1ad3      	subs	r3, r2, r3
 800efb8:	2b02      	cmp	r3, #2
 800efba:	d901      	bls.n	800efc0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800efbc:	2303      	movs	r3, #3
 800efbe:	e18b      	b.n	800f2d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800efc0:	4ba6      	ldr	r3, [pc, #664]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d1f0      	bne.n	800efae <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	f003 0301 	and.w	r3, r3, #1
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d009      	beq.n	800efec <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	685b      	ldr	r3, [r3, #4]
 800efdc:	019a      	lsls	r2, r3, #6
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	689b      	ldr	r3, [r3, #8]
 800efe2:	071b      	lsls	r3, r3, #28
 800efe4:	499d      	ldr	r1, [pc, #628]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800efe6:	4313      	orrs	r3, r2
 800efe8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	f003 0302 	and.w	r3, r3, #2
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d01f      	beq.n	800f038 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800eff8:	4b98      	ldr	r3, [pc, #608]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800effa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800effe:	0f1b      	lsrs	r3, r3, #28
 800f000:	f003 0307 	and.w	r3, r3, #7
 800f004:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	685b      	ldr	r3, [r3, #4]
 800f00a:	019a      	lsls	r2, r3, #6
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	68db      	ldr	r3, [r3, #12]
 800f010:	061b      	lsls	r3, r3, #24
 800f012:	431a      	orrs	r2, r3
 800f014:	693b      	ldr	r3, [r7, #16]
 800f016:	071b      	lsls	r3, r3, #28
 800f018:	4990      	ldr	r1, [pc, #576]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800f01a:	4313      	orrs	r3, r2
 800f01c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800f020:	4b8e      	ldr	r3, [pc, #568]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800f022:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f026:	f023 021f 	bic.w	r2, r3, #31
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	69db      	ldr	r3, [r3, #28]
 800f02e:	3b01      	subs	r3, #1
 800f030:	498a      	ldr	r1, [pc, #552]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800f032:	4313      	orrs	r3, r2
 800f034:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f040:	2b00      	cmp	r3, #0
 800f042:	d00d      	beq.n	800f060 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	685b      	ldr	r3, [r3, #4]
 800f048:	019a      	lsls	r2, r3, #6
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	68db      	ldr	r3, [r3, #12]
 800f04e:	061b      	lsls	r3, r3, #24
 800f050:	431a      	orrs	r2, r3
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	689b      	ldr	r3, [r3, #8]
 800f056:	071b      	lsls	r3, r3, #28
 800f058:	4980      	ldr	r1, [pc, #512]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800f05a:	4313      	orrs	r3, r2
 800f05c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800f060:	4b7d      	ldr	r3, [pc, #500]	; (800f258 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800f062:	2201      	movs	r2, #1
 800f064:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800f066:	f7fd fa43 	bl	800c4f0 <HAL_GetTick>
 800f06a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800f06c:	e008      	b.n	800f080 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800f06e:	f7fd fa3f 	bl	800c4f0 <HAL_GetTick>
 800f072:	4602      	mov	r2, r0
 800f074:	697b      	ldr	r3, [r7, #20]
 800f076:	1ad3      	subs	r3, r2, r3
 800f078:	2b02      	cmp	r3, #2
 800f07a:	d901      	bls.n	800f080 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800f07c:	2303      	movs	r3, #3
 800f07e:	e12b      	b.n	800f2d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800f080:	4b76      	ldr	r3, [pc, #472]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d0f0      	beq.n	800f06e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	f003 0304 	and.w	r3, r3, #4
 800f094:	2b00      	cmp	r3, #0
 800f096:	d105      	bne.n	800f0a4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d079      	beq.n	800f198 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800f0a4:	4b6e      	ldr	r3, [pc, #440]	; (800f260 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800f0aa:	f7fd fa21 	bl	800c4f0 <HAL_GetTick>
 800f0ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800f0b0:	e008      	b.n	800f0c4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800f0b2:	f7fd fa1d 	bl	800c4f0 <HAL_GetTick>
 800f0b6:	4602      	mov	r2, r0
 800f0b8:	697b      	ldr	r3, [r7, #20]
 800f0ba:	1ad3      	subs	r3, r2, r3
 800f0bc:	2b02      	cmp	r3, #2
 800f0be:	d901      	bls.n	800f0c4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800f0c0:	2303      	movs	r3, #3
 800f0c2:	e109      	b.n	800f2d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800f0c4:	4b65      	ldr	r3, [pc, #404]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f0cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f0d0:	d0ef      	beq.n	800f0b2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	f003 0304 	and.w	r3, r3, #4
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d020      	beq.n	800f120 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800f0de:	4b5f      	ldr	r3, [pc, #380]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800f0e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f0e4:	0f1b      	lsrs	r3, r3, #28
 800f0e6:	f003 0307 	and.w	r3, r3, #7
 800f0ea:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	691b      	ldr	r3, [r3, #16]
 800f0f0:	019a      	lsls	r2, r3, #6
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	695b      	ldr	r3, [r3, #20]
 800f0f6:	061b      	lsls	r3, r3, #24
 800f0f8:	431a      	orrs	r2, r3
 800f0fa:	693b      	ldr	r3, [r7, #16]
 800f0fc:	071b      	lsls	r3, r3, #28
 800f0fe:	4957      	ldr	r1, [pc, #348]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800f100:	4313      	orrs	r3, r2
 800f102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800f106:	4b55      	ldr	r3, [pc, #340]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800f108:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f10c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	6a1b      	ldr	r3, [r3, #32]
 800f114:	3b01      	subs	r3, #1
 800f116:	021b      	lsls	r3, r3, #8
 800f118:	4950      	ldr	r1, [pc, #320]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800f11a:	4313      	orrs	r3, r2
 800f11c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	f003 0308 	and.w	r3, r3, #8
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d01e      	beq.n	800f16a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800f12c:	4b4b      	ldr	r3, [pc, #300]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800f12e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f132:	0e1b      	lsrs	r3, r3, #24
 800f134:	f003 030f 	and.w	r3, r3, #15
 800f138:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	691b      	ldr	r3, [r3, #16]
 800f13e:	019a      	lsls	r2, r3, #6
 800f140:	693b      	ldr	r3, [r7, #16]
 800f142:	061b      	lsls	r3, r3, #24
 800f144:	431a      	orrs	r2, r3
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	699b      	ldr	r3, [r3, #24]
 800f14a:	071b      	lsls	r3, r3, #28
 800f14c:	4943      	ldr	r1, [pc, #268]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800f14e:	4313      	orrs	r3, r2
 800f150:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800f154:	4b41      	ldr	r3, [pc, #260]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800f156:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f15a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f162:	493e      	ldr	r1, [pc, #248]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800f164:	4313      	orrs	r3, r2
 800f166:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800f16a:	4b3d      	ldr	r3, [pc, #244]	; (800f260 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800f16c:	2201      	movs	r2, #1
 800f16e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800f170:	f7fd f9be 	bl	800c4f0 <HAL_GetTick>
 800f174:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800f176:	e008      	b.n	800f18a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800f178:	f7fd f9ba 	bl	800c4f0 <HAL_GetTick>
 800f17c:	4602      	mov	r2, r0
 800f17e:	697b      	ldr	r3, [r7, #20]
 800f180:	1ad3      	subs	r3, r2, r3
 800f182:	2b02      	cmp	r3, #2
 800f184:	d901      	bls.n	800f18a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800f186:	2303      	movs	r3, #3
 800f188:	e0a6      	b.n	800f2d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800f18a:	4b34      	ldr	r3, [pc, #208]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f192:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f196:	d1ef      	bne.n	800f178 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	f003 0320 	and.w	r3, r3, #32
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	f000 808d 	beq.w	800f2c0 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	60fb      	str	r3, [r7, #12]
 800f1aa:	4b2c      	ldr	r3, [pc, #176]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800f1ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1ae:	4a2b      	ldr	r2, [pc, #172]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800f1b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f1b4:	6413      	str	r3, [r2, #64]	; 0x40
 800f1b6:	4b29      	ldr	r3, [pc, #164]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800f1b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f1be:	60fb      	str	r3, [r7, #12]
 800f1c0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800f1c2:	4b28      	ldr	r3, [pc, #160]	; (800f264 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	4a27      	ldr	r2, [pc, #156]	; (800f264 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800f1c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f1cc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800f1ce:	f7fd f98f 	bl	800c4f0 <HAL_GetTick>
 800f1d2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800f1d4:	e008      	b.n	800f1e8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800f1d6:	f7fd f98b 	bl	800c4f0 <HAL_GetTick>
 800f1da:	4602      	mov	r2, r0
 800f1dc:	697b      	ldr	r3, [r7, #20]
 800f1de:	1ad3      	subs	r3, r2, r3
 800f1e0:	2b02      	cmp	r3, #2
 800f1e2:	d901      	bls.n	800f1e8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 800f1e4:	2303      	movs	r3, #3
 800f1e6:	e077      	b.n	800f2d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800f1e8:	4b1e      	ldr	r3, [pc, #120]	; (800f264 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d0f0      	beq.n	800f1d6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800f1f4:	4b19      	ldr	r3, [pc, #100]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800f1f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f1fc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800f1fe:	693b      	ldr	r3, [r7, #16]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d039      	beq.n	800f278 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f208:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f20c:	693a      	ldr	r2, [r7, #16]
 800f20e:	429a      	cmp	r2, r3
 800f210:	d032      	beq.n	800f278 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f212:	4b12      	ldr	r3, [pc, #72]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800f214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f216:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f21a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800f21c:	4b12      	ldr	r3, [pc, #72]	; (800f268 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800f21e:	2201      	movs	r2, #1
 800f220:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800f222:	4b11      	ldr	r3, [pc, #68]	; (800f268 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800f224:	2200      	movs	r2, #0
 800f226:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800f228:	4a0c      	ldr	r2, [pc, #48]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800f22a:	693b      	ldr	r3, [r7, #16]
 800f22c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800f22e:	4b0b      	ldr	r3, [pc, #44]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800f230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f232:	f003 0301 	and.w	r3, r3, #1
 800f236:	2b01      	cmp	r3, #1
 800f238:	d11e      	bne.n	800f278 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800f23a:	f7fd f959 	bl	800c4f0 <HAL_GetTick>
 800f23e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f240:	e014      	b.n	800f26c <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f242:	f7fd f955 	bl	800c4f0 <HAL_GetTick>
 800f246:	4602      	mov	r2, r0
 800f248:	697b      	ldr	r3, [r7, #20]
 800f24a:	1ad3      	subs	r3, r2, r3
 800f24c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f250:	4293      	cmp	r3, r2
 800f252:	d90b      	bls.n	800f26c <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 800f254:	2303      	movs	r3, #3
 800f256:	e03f      	b.n	800f2d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800f258:	42470068 	.word	0x42470068
 800f25c:	40023800 	.word	0x40023800
 800f260:	42470070 	.word	0x42470070
 800f264:	40007000 	.word	0x40007000
 800f268:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f26c:	4b1c      	ldr	r3, [pc, #112]	; (800f2e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800f26e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f270:	f003 0302 	and.w	r3, r3, #2
 800f274:	2b00      	cmp	r3, #0
 800f276:	d0e4      	beq.n	800f242 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f27c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f280:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f284:	d10d      	bne.n	800f2a2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800f286:	4b16      	ldr	r3, [pc, #88]	; (800f2e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800f288:	689b      	ldr	r3, [r3, #8]
 800f28a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f292:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800f296:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f29a:	4911      	ldr	r1, [pc, #68]	; (800f2e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800f29c:	4313      	orrs	r3, r2
 800f29e:	608b      	str	r3, [r1, #8]
 800f2a0:	e005      	b.n	800f2ae <HAL_RCCEx_PeriphCLKConfig+0x342>
 800f2a2:	4b0f      	ldr	r3, [pc, #60]	; (800f2e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800f2a4:	689b      	ldr	r3, [r3, #8]
 800f2a6:	4a0e      	ldr	r2, [pc, #56]	; (800f2e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800f2a8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800f2ac:	6093      	str	r3, [r2, #8]
 800f2ae:	4b0c      	ldr	r3, [pc, #48]	; (800f2e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800f2b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f2ba:	4909      	ldr	r1, [pc, #36]	; (800f2e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800f2bc:	4313      	orrs	r3, r2
 800f2be:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	f003 0310 	and.w	r3, r3, #16
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d004      	beq.n	800f2d6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800f2d2:	4b04      	ldr	r3, [pc, #16]	; (800f2e4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800f2d4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800f2d6:	2300      	movs	r3, #0
}
 800f2d8:	4618      	mov	r0, r3
 800f2da:	3718      	adds	r7, #24
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	bd80      	pop	{r7, pc}
 800f2e0:	40023800 	.word	0x40023800
 800f2e4:	424711e0 	.word	0x424711e0

0800f2e8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800f2e8:	b580      	push	{r7, lr}
 800f2ea:	b082      	sub	sp, #8
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d101      	bne.n	800f2fa <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800f2f6:	2301      	movs	r3, #1
 800f2f8:	e083      	b.n	800f402 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	7f5b      	ldrb	r3, [r3, #29]
 800f2fe:	b2db      	uxtb	r3, r3
 800f300:	2b00      	cmp	r3, #0
 800f302:	d105      	bne.n	800f310 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	2200      	movs	r2, #0
 800f308:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800f30a:	6878      	ldr	r0, [r7, #4]
 800f30c:	f7f3 fce8 	bl	8002ce0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	2202      	movs	r2, #2
 800f314:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	22ca      	movs	r2, #202	; 0xca
 800f31c:	625a      	str	r2, [r3, #36]	; 0x24
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	2253      	movs	r2, #83	; 0x53
 800f324:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800f326:	6878      	ldr	r0, [r7, #4]
 800f328:	f000 fc26 	bl	800fb78 <RTC_EnterInitMode>
 800f32c:	4603      	mov	r3, r0
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d008      	beq.n	800f344 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	22ff      	movs	r2, #255	; 0xff
 800f338:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	2204      	movs	r2, #4
 800f33e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800f340:	2301      	movs	r3, #1
 800f342:	e05e      	b.n	800f402 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	689b      	ldr	r3, [r3, #8]
 800f34a:	687a      	ldr	r2, [r7, #4]
 800f34c:	6812      	ldr	r2, [r2, #0]
 800f34e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f356:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	6899      	ldr	r1, [r3, #8]
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	685a      	ldr	r2, [r3, #4]
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	691b      	ldr	r3, [r3, #16]
 800f366:	431a      	orrs	r2, r3
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	695b      	ldr	r3, [r3, #20]
 800f36c:	431a      	orrs	r2, r3
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	430a      	orrs	r2, r1
 800f374:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	687a      	ldr	r2, [r7, #4]
 800f37c:	68d2      	ldr	r2, [r2, #12]
 800f37e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	6919      	ldr	r1, [r3, #16]
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	689b      	ldr	r3, [r3, #8]
 800f38a:	041a      	lsls	r2, r3, #16
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	430a      	orrs	r2, r1
 800f392:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	68da      	ldr	r2, [r3, #12]
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f3a2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	689b      	ldr	r3, [r3, #8]
 800f3aa:	f003 0320 	and.w	r3, r3, #32
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d10e      	bne.n	800f3d0 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800f3b2:	6878      	ldr	r0, [r7, #4]
 800f3b4:	f000 fbb8 	bl	800fb28 <HAL_RTC_WaitForSynchro>
 800f3b8:	4603      	mov	r3, r0
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d008      	beq.n	800f3d0 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	22ff      	movs	r2, #255	; 0xff
 800f3c4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	2204      	movs	r2, #4
 800f3ca:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800f3cc:	2301      	movs	r3, #1
 800f3ce:	e018      	b.n	800f402 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f3de:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	699a      	ldr	r2, [r3, #24]
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	430a      	orrs	r2, r1
 800f3f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	22ff      	movs	r2, #255	; 0xff
 800f3f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	2201      	movs	r2, #1
 800f3fe:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800f400:	2300      	movs	r3, #0
  }
}
 800f402:	4618      	mov	r0, r3
 800f404:	3708      	adds	r7, #8
 800f406:	46bd      	mov	sp, r7
 800f408:	bd80      	pop	{r7, pc}

0800f40a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800f40a:	b590      	push	{r4, r7, lr}
 800f40c:	b087      	sub	sp, #28
 800f40e:	af00      	add	r7, sp, #0
 800f410:	60f8      	str	r0, [r7, #12]
 800f412:	60b9      	str	r1, [r7, #8]
 800f414:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800f416:	2300      	movs	r3, #0
 800f418:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	7f1b      	ldrb	r3, [r3, #28]
 800f41e:	2b01      	cmp	r3, #1
 800f420:	d101      	bne.n	800f426 <HAL_RTC_SetTime+0x1c>
 800f422:	2302      	movs	r3, #2
 800f424:	e0aa      	b.n	800f57c <HAL_RTC_SetTime+0x172>
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	2201      	movs	r2, #1
 800f42a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	2202      	movs	r2, #2
 800f430:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d126      	bne.n	800f486 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	689b      	ldr	r3, [r3, #8]
 800f43e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f442:	2b00      	cmp	r3, #0
 800f444:	d102      	bne.n	800f44c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800f446:	68bb      	ldr	r3, [r7, #8]
 800f448:	2200      	movs	r2, #0
 800f44a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800f44c:	68bb      	ldr	r3, [r7, #8]
 800f44e:	781b      	ldrb	r3, [r3, #0]
 800f450:	4618      	mov	r0, r3
 800f452:	f000 fbbd 	bl	800fbd0 <RTC_ByteToBcd2>
 800f456:	4603      	mov	r3, r0
 800f458:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800f45a:	68bb      	ldr	r3, [r7, #8]
 800f45c:	785b      	ldrb	r3, [r3, #1]
 800f45e:	4618      	mov	r0, r3
 800f460:	f000 fbb6 	bl	800fbd0 <RTC_ByteToBcd2>
 800f464:	4603      	mov	r3, r0
 800f466:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800f468:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800f46a:	68bb      	ldr	r3, [r7, #8]
 800f46c:	789b      	ldrb	r3, [r3, #2]
 800f46e:	4618      	mov	r0, r3
 800f470:	f000 fbae 	bl	800fbd0 <RTC_ByteToBcd2>
 800f474:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800f476:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800f47a:	68bb      	ldr	r3, [r7, #8]
 800f47c:	78db      	ldrb	r3, [r3, #3]
 800f47e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800f480:	4313      	orrs	r3, r2
 800f482:	617b      	str	r3, [r7, #20]
 800f484:	e018      	b.n	800f4b8 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	689b      	ldr	r3, [r3, #8]
 800f48c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f490:	2b00      	cmp	r3, #0
 800f492:	d102      	bne.n	800f49a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800f494:	68bb      	ldr	r3, [r7, #8]
 800f496:	2200      	movs	r2, #0
 800f498:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800f49a:	68bb      	ldr	r3, [r7, #8]
 800f49c:	781b      	ldrb	r3, [r3, #0]
 800f49e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800f4a0:	68bb      	ldr	r3, [r7, #8]
 800f4a2:	785b      	ldrb	r3, [r3, #1]
 800f4a4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800f4a6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800f4a8:	68ba      	ldr	r2, [r7, #8]
 800f4aa:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800f4ac:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800f4ae:	68bb      	ldr	r3, [r7, #8]
 800f4b0:	78db      	ldrb	r3, [r3, #3]
 800f4b2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800f4b4:	4313      	orrs	r3, r2
 800f4b6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	22ca      	movs	r2, #202	; 0xca
 800f4be:	625a      	str	r2, [r3, #36]	; 0x24
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	2253      	movs	r2, #83	; 0x53
 800f4c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800f4c8:	68f8      	ldr	r0, [r7, #12]
 800f4ca:	f000 fb55 	bl	800fb78 <RTC_EnterInitMode>
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d00b      	beq.n	800f4ec <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	22ff      	movs	r2, #255	; 0xff
 800f4da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	2204      	movs	r2, #4
 800f4e0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	2200      	movs	r2, #0
 800f4e6:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800f4e8:	2301      	movs	r3, #1
 800f4ea:	e047      	b.n	800f57c <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	681a      	ldr	r2, [r3, #0]
 800f4f0:	697b      	ldr	r3, [r7, #20]
 800f4f2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800f4f6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800f4fa:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	689a      	ldr	r2, [r3, #8]
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f50a:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	6899      	ldr	r1, [r3, #8]
 800f512:	68bb      	ldr	r3, [r7, #8]
 800f514:	68da      	ldr	r2, [r3, #12]
 800f516:	68bb      	ldr	r3, [r7, #8]
 800f518:	691b      	ldr	r3, [r3, #16]
 800f51a:	431a      	orrs	r2, r3
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	430a      	orrs	r2, r1
 800f522:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	68da      	ldr	r2, [r3, #12]
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f532:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	689b      	ldr	r3, [r3, #8]
 800f53a:	f003 0320 	and.w	r3, r3, #32
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d111      	bne.n	800f566 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800f542:	68f8      	ldr	r0, [r7, #12]
 800f544:	f000 faf0 	bl	800fb28 <HAL_RTC_WaitForSynchro>
 800f548:	4603      	mov	r3, r0
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d00b      	beq.n	800f566 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	22ff      	movs	r2, #255	; 0xff
 800f554:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	2204      	movs	r2, #4
 800f55a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	2200      	movs	r2, #0
 800f560:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800f562:	2301      	movs	r3, #1
 800f564:	e00a      	b.n	800f57c <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	22ff      	movs	r2, #255	; 0xff
 800f56c:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	2201      	movs	r2, #1
 800f572:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	2200      	movs	r2, #0
 800f578:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800f57a:	2300      	movs	r3, #0
  }
}
 800f57c:	4618      	mov	r0, r3
 800f57e:	371c      	adds	r7, #28
 800f580:	46bd      	mov	sp, r7
 800f582:	bd90      	pop	{r4, r7, pc}

0800f584 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800f584:	b580      	push	{r7, lr}
 800f586:	b086      	sub	sp, #24
 800f588:	af00      	add	r7, sp, #0
 800f58a:	60f8      	str	r0, [r7, #12]
 800f58c:	60b9      	str	r1, [r7, #8]
 800f58e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800f590:	2300      	movs	r3, #0
 800f592:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f59a:	68bb      	ldr	r3, [r7, #8]
 800f59c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	691b      	ldr	r3, [r3, #16]
 800f5a4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800f5a8:	68bb      	ldr	r3, [r7, #8]
 800f5aa:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800f5b6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800f5ba:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800f5bc:	697b      	ldr	r3, [r7, #20]
 800f5be:	0c1b      	lsrs	r3, r3, #16
 800f5c0:	b2db      	uxtb	r3, r3
 800f5c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f5c6:	b2da      	uxtb	r2, r3
 800f5c8:	68bb      	ldr	r3, [r7, #8]
 800f5ca:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800f5cc:	697b      	ldr	r3, [r7, #20]
 800f5ce:	0a1b      	lsrs	r3, r3, #8
 800f5d0:	b2db      	uxtb	r3, r3
 800f5d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f5d6:	b2da      	uxtb	r2, r3
 800f5d8:	68bb      	ldr	r3, [r7, #8]
 800f5da:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800f5dc:	697b      	ldr	r3, [r7, #20]
 800f5de:	b2db      	uxtb	r3, r3
 800f5e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f5e4:	b2da      	uxtb	r2, r3
 800f5e6:	68bb      	ldr	r3, [r7, #8]
 800f5e8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800f5ea:	697b      	ldr	r3, [r7, #20]
 800f5ec:	0c1b      	lsrs	r3, r3, #16
 800f5ee:	b2db      	uxtb	r3, r3
 800f5f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f5f4:	b2da      	uxtb	r2, r3
 800f5f6:	68bb      	ldr	r3, [r7, #8]
 800f5f8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d11a      	bne.n	800f636 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800f600:	68bb      	ldr	r3, [r7, #8]
 800f602:	781b      	ldrb	r3, [r3, #0]
 800f604:	4618      	mov	r0, r3
 800f606:	f000 fb01 	bl	800fc0c <RTC_Bcd2ToByte>
 800f60a:	4603      	mov	r3, r0
 800f60c:	461a      	mov	r2, r3
 800f60e:	68bb      	ldr	r3, [r7, #8]
 800f610:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800f612:	68bb      	ldr	r3, [r7, #8]
 800f614:	785b      	ldrb	r3, [r3, #1]
 800f616:	4618      	mov	r0, r3
 800f618:	f000 faf8 	bl	800fc0c <RTC_Bcd2ToByte>
 800f61c:	4603      	mov	r3, r0
 800f61e:	461a      	mov	r2, r3
 800f620:	68bb      	ldr	r3, [r7, #8]
 800f622:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800f624:	68bb      	ldr	r3, [r7, #8]
 800f626:	789b      	ldrb	r3, [r3, #2]
 800f628:	4618      	mov	r0, r3
 800f62a:	f000 faef 	bl	800fc0c <RTC_Bcd2ToByte>
 800f62e:	4603      	mov	r3, r0
 800f630:	461a      	mov	r2, r3
 800f632:	68bb      	ldr	r3, [r7, #8]
 800f634:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800f636:	2300      	movs	r3, #0
}
 800f638:	4618      	mov	r0, r3
 800f63a:	3718      	adds	r7, #24
 800f63c:	46bd      	mov	sp, r7
 800f63e:	bd80      	pop	{r7, pc}

0800f640 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800f640:	b590      	push	{r4, r7, lr}
 800f642:	b087      	sub	sp, #28
 800f644:	af00      	add	r7, sp, #0
 800f646:	60f8      	str	r0, [r7, #12]
 800f648:	60b9      	str	r1, [r7, #8]
 800f64a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800f64c:	2300      	movs	r3, #0
 800f64e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	7f1b      	ldrb	r3, [r3, #28]
 800f654:	2b01      	cmp	r3, #1
 800f656:	d101      	bne.n	800f65c <HAL_RTC_SetDate+0x1c>
 800f658:	2302      	movs	r3, #2
 800f65a:	e094      	b.n	800f786 <HAL_RTC_SetDate+0x146>
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	2201      	movs	r2, #1
 800f660:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	2202      	movs	r2, #2
 800f666:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d10e      	bne.n	800f68c <HAL_RTC_SetDate+0x4c>
 800f66e:	68bb      	ldr	r3, [r7, #8]
 800f670:	785b      	ldrb	r3, [r3, #1]
 800f672:	f003 0310 	and.w	r3, r3, #16
 800f676:	2b00      	cmp	r3, #0
 800f678:	d008      	beq.n	800f68c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800f67a:	68bb      	ldr	r3, [r7, #8]
 800f67c:	785b      	ldrb	r3, [r3, #1]
 800f67e:	f023 0310 	bic.w	r3, r3, #16
 800f682:	b2db      	uxtb	r3, r3
 800f684:	330a      	adds	r3, #10
 800f686:	b2da      	uxtb	r2, r3
 800f688:	68bb      	ldr	r3, [r7, #8]
 800f68a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d11c      	bne.n	800f6cc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800f692:	68bb      	ldr	r3, [r7, #8]
 800f694:	78db      	ldrb	r3, [r3, #3]
 800f696:	4618      	mov	r0, r3
 800f698:	f000 fa9a 	bl	800fbd0 <RTC_ByteToBcd2>
 800f69c:	4603      	mov	r3, r0
 800f69e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800f6a0:	68bb      	ldr	r3, [r7, #8]
 800f6a2:	785b      	ldrb	r3, [r3, #1]
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	f000 fa93 	bl	800fbd0 <RTC_ByteToBcd2>
 800f6aa:	4603      	mov	r3, r0
 800f6ac:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800f6ae:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800f6b0:	68bb      	ldr	r3, [r7, #8]
 800f6b2:	789b      	ldrb	r3, [r3, #2]
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	f000 fa8b 	bl	800fbd0 <RTC_ByteToBcd2>
 800f6ba:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800f6bc:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800f6c0:	68bb      	ldr	r3, [r7, #8]
 800f6c2:	781b      	ldrb	r3, [r3, #0]
 800f6c4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800f6c6:	4313      	orrs	r3, r2
 800f6c8:	617b      	str	r3, [r7, #20]
 800f6ca:	e00e      	b.n	800f6ea <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800f6cc:	68bb      	ldr	r3, [r7, #8]
 800f6ce:	78db      	ldrb	r3, [r3, #3]
 800f6d0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800f6d2:	68bb      	ldr	r3, [r7, #8]
 800f6d4:	785b      	ldrb	r3, [r3, #1]
 800f6d6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800f6d8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800f6da:	68ba      	ldr	r2, [r7, #8]
 800f6dc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800f6de:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800f6e0:	68bb      	ldr	r3, [r7, #8]
 800f6e2:	781b      	ldrb	r3, [r3, #0]
 800f6e4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800f6e6:	4313      	orrs	r3, r2
 800f6e8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	22ca      	movs	r2, #202	; 0xca
 800f6f0:	625a      	str	r2, [r3, #36]	; 0x24
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	2253      	movs	r2, #83	; 0x53
 800f6f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800f6fa:	68f8      	ldr	r0, [r7, #12]
 800f6fc:	f000 fa3c 	bl	800fb78 <RTC_EnterInitMode>
 800f700:	4603      	mov	r3, r0
 800f702:	2b00      	cmp	r3, #0
 800f704:	d00b      	beq.n	800f71e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	22ff      	movs	r2, #255	; 0xff
 800f70c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	2204      	movs	r2, #4
 800f712:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	2200      	movs	r2, #0
 800f718:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800f71a:	2301      	movs	r3, #1
 800f71c:	e033      	b.n	800f786 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	681a      	ldr	r2, [r3, #0]
 800f722:	697b      	ldr	r3, [r7, #20]
 800f724:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f728:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f72c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	68da      	ldr	r2, [r3, #12]
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f73c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	689b      	ldr	r3, [r3, #8]
 800f744:	f003 0320 	and.w	r3, r3, #32
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d111      	bne.n	800f770 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800f74c:	68f8      	ldr	r0, [r7, #12]
 800f74e:	f000 f9eb 	bl	800fb28 <HAL_RTC_WaitForSynchro>
 800f752:	4603      	mov	r3, r0
 800f754:	2b00      	cmp	r3, #0
 800f756:	d00b      	beq.n	800f770 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	22ff      	movs	r2, #255	; 0xff
 800f75e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	2204      	movs	r2, #4
 800f764:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	2200      	movs	r2, #0
 800f76a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800f76c:	2301      	movs	r3, #1
 800f76e:	e00a      	b.n	800f786 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	22ff      	movs	r2, #255	; 0xff
 800f776:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	2201      	movs	r2, #1
 800f77c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	2200      	movs	r2, #0
 800f782:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800f784:	2300      	movs	r3, #0
  }
}
 800f786:	4618      	mov	r0, r3
 800f788:	371c      	adds	r7, #28
 800f78a:	46bd      	mov	sp, r7
 800f78c:	bd90      	pop	{r4, r7, pc}

0800f78e <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800f78e:	b580      	push	{r7, lr}
 800f790:	b086      	sub	sp, #24
 800f792:	af00      	add	r7, sp, #0
 800f794:	60f8      	str	r0, [r7, #12]
 800f796:	60b9      	str	r1, [r7, #8]
 800f798:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800f79a:	2300      	movs	r3, #0
 800f79c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	685b      	ldr	r3, [r3, #4]
 800f7a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f7a8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f7ac:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800f7ae:	697b      	ldr	r3, [r7, #20]
 800f7b0:	0c1b      	lsrs	r3, r3, #16
 800f7b2:	b2da      	uxtb	r2, r3
 800f7b4:	68bb      	ldr	r3, [r7, #8]
 800f7b6:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800f7b8:	697b      	ldr	r3, [r7, #20]
 800f7ba:	0a1b      	lsrs	r3, r3, #8
 800f7bc:	b2db      	uxtb	r3, r3
 800f7be:	f003 031f 	and.w	r3, r3, #31
 800f7c2:	b2da      	uxtb	r2, r3
 800f7c4:	68bb      	ldr	r3, [r7, #8]
 800f7c6:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800f7c8:	697b      	ldr	r3, [r7, #20]
 800f7ca:	b2db      	uxtb	r3, r3
 800f7cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f7d0:	b2da      	uxtb	r2, r3
 800f7d2:	68bb      	ldr	r3, [r7, #8]
 800f7d4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800f7d6:	697b      	ldr	r3, [r7, #20]
 800f7d8:	0b5b      	lsrs	r3, r3, #13
 800f7da:	b2db      	uxtb	r3, r3
 800f7dc:	f003 0307 	and.w	r3, r3, #7
 800f7e0:	b2da      	uxtb	r2, r3
 800f7e2:	68bb      	ldr	r3, [r7, #8]
 800f7e4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d11a      	bne.n	800f822 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800f7ec:	68bb      	ldr	r3, [r7, #8]
 800f7ee:	78db      	ldrb	r3, [r3, #3]
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	f000 fa0b 	bl	800fc0c <RTC_Bcd2ToByte>
 800f7f6:	4603      	mov	r3, r0
 800f7f8:	461a      	mov	r2, r3
 800f7fa:	68bb      	ldr	r3, [r7, #8]
 800f7fc:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800f7fe:	68bb      	ldr	r3, [r7, #8]
 800f800:	785b      	ldrb	r3, [r3, #1]
 800f802:	4618      	mov	r0, r3
 800f804:	f000 fa02 	bl	800fc0c <RTC_Bcd2ToByte>
 800f808:	4603      	mov	r3, r0
 800f80a:	461a      	mov	r2, r3
 800f80c:	68bb      	ldr	r3, [r7, #8]
 800f80e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800f810:	68bb      	ldr	r3, [r7, #8]
 800f812:	789b      	ldrb	r3, [r3, #2]
 800f814:	4618      	mov	r0, r3
 800f816:	f000 f9f9 	bl	800fc0c <RTC_Bcd2ToByte>
 800f81a:	4603      	mov	r3, r0
 800f81c:	461a      	mov	r2, r3
 800f81e:	68bb      	ldr	r3, [r7, #8]
 800f820:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800f822:	2300      	movs	r3, #0
}
 800f824:	4618      	mov	r0, r3
 800f826:	3718      	adds	r7, #24
 800f828:	46bd      	mov	sp, r7
 800f82a:	bd80      	pop	{r7, pc}

0800f82c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800f82c:	b590      	push	{r4, r7, lr}
 800f82e:	b089      	sub	sp, #36	; 0x24
 800f830:	af00      	add	r7, sp, #0
 800f832:	60f8      	str	r0, [r7, #12]
 800f834:	60b9      	str	r1, [r7, #8]
 800f836:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 800f838:	2300      	movs	r3, #0
 800f83a:	61fb      	str	r3, [r7, #28]
 800f83c:	2300      	movs	r3, #0
 800f83e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 800f840:	4b93      	ldr	r3, [pc, #588]	; (800fa90 <HAL_RTC_SetAlarm_IT+0x264>)
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	4a93      	ldr	r2, [pc, #588]	; (800fa94 <HAL_RTC_SetAlarm_IT+0x268>)
 800f846:	fba2 2303 	umull	r2, r3, r2, r3
 800f84a:	0adb      	lsrs	r3, r3, #11
 800f84c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f850:	fb02 f303 	mul.w	r3, r2, r3
 800f854:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	7f1b      	ldrb	r3, [r3, #28]
 800f85a:	2b01      	cmp	r3, #1
 800f85c:	d101      	bne.n	800f862 <HAL_RTC_SetAlarm_IT+0x36>
 800f85e:	2302      	movs	r3, #2
 800f860:	e111      	b.n	800fa86 <HAL_RTC_SetAlarm_IT+0x25a>
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	2201      	movs	r2, #1
 800f866:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	2202      	movs	r2, #2
 800f86c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	2b00      	cmp	r3, #0
 800f872:	d137      	bne.n	800f8e4 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	689b      	ldr	r3, [r3, #8]
 800f87a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d102      	bne.n	800f888 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800f882:	68bb      	ldr	r3, [r7, #8]
 800f884:	2200      	movs	r2, #0
 800f886:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800f888:	68bb      	ldr	r3, [r7, #8]
 800f88a:	781b      	ldrb	r3, [r3, #0]
 800f88c:	4618      	mov	r0, r3
 800f88e:	f000 f99f 	bl	800fbd0 <RTC_ByteToBcd2>
 800f892:	4603      	mov	r3, r0
 800f894:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800f896:	68bb      	ldr	r3, [r7, #8]
 800f898:	785b      	ldrb	r3, [r3, #1]
 800f89a:	4618      	mov	r0, r3
 800f89c:	f000 f998 	bl	800fbd0 <RTC_ByteToBcd2>
 800f8a0:	4603      	mov	r3, r0
 800f8a2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800f8a4:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800f8a6:	68bb      	ldr	r3, [r7, #8]
 800f8a8:	789b      	ldrb	r3, [r3, #2]
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	f000 f990 	bl	800fbd0 <RTC_ByteToBcd2>
 800f8b0:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800f8b2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800f8b6:	68bb      	ldr	r3, [r7, #8]
 800f8b8:	78db      	ldrb	r3, [r3, #3]
 800f8ba:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800f8bc:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800f8c0:	68bb      	ldr	r3, [r7, #8]
 800f8c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	f000 f982 	bl	800fbd0 <RTC_ByteToBcd2>
 800f8cc:	4603      	mov	r3, r0
 800f8ce:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800f8d0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800f8d4:	68bb      	ldr	r3, [r7, #8]
 800f8d6:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800f8d8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800f8da:	68bb      	ldr	r3, [r7, #8]
 800f8dc:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800f8de:	4313      	orrs	r3, r2
 800f8e0:	61fb      	str	r3, [r7, #28]
 800f8e2:	e023      	b.n	800f92c <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	689b      	ldr	r3, [r3, #8]
 800f8ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d102      	bne.n	800f8f8 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800f8f2:	68bb      	ldr	r3, [r7, #8]
 800f8f4:	2200      	movs	r2, #0
 800f8f6:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800f8f8:	68bb      	ldr	r3, [r7, #8]
 800f8fa:	781b      	ldrb	r3, [r3, #0]
 800f8fc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800f8fe:	68bb      	ldr	r3, [r7, #8]
 800f900:	785b      	ldrb	r3, [r3, #1]
 800f902:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800f904:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800f906:	68ba      	ldr	r2, [r7, #8]
 800f908:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800f90a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800f90c:	68bb      	ldr	r3, [r7, #8]
 800f90e:	78db      	ldrb	r3, [r3, #3]
 800f910:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800f912:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800f914:	68bb      	ldr	r3, [r7, #8]
 800f916:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f91a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800f91c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800f91e:	68bb      	ldr	r3, [r7, #8]
 800f920:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800f922:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800f924:	68bb      	ldr	r3, [r7, #8]
 800f926:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800f928:	4313      	orrs	r3, r2
 800f92a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800f92c:	68bb      	ldr	r3, [r7, #8]
 800f92e:	685a      	ldr	r2, [r3, #4]
 800f930:	68bb      	ldr	r3, [r7, #8]
 800f932:	699b      	ldr	r3, [r3, #24]
 800f934:	4313      	orrs	r3, r2
 800f936:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	22ca      	movs	r2, #202	; 0xca
 800f93e:	625a      	str	r2, [r3, #36]	; 0x24
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	2253      	movs	r2, #83	; 0x53
 800f946:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800f948:	68bb      	ldr	r3, [r7, #8]
 800f94a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f94c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f950:	d141      	bne.n	800f9d6 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	689a      	ldr	r2, [r3, #8]
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f960:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	68db      	ldr	r3, [r3, #12]
 800f968:	b2da      	uxtb	r2, r3
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800f972:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800f974:	697b      	ldr	r3, [r7, #20]
 800f976:	1e5a      	subs	r2, r3, #1
 800f978:	617a      	str	r2, [r7, #20]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d10b      	bne.n	800f996 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	22ff      	movs	r2, #255	; 0xff
 800f984:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	2203      	movs	r2, #3
 800f98a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	2200      	movs	r2, #0
 800f990:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800f992:	2303      	movs	r3, #3
 800f994:	e077      	b.n	800fa86 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	68db      	ldr	r3, [r3, #12]
 800f99c:	f003 0301 	and.w	r3, r3, #1
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d0e7      	beq.n	800f974 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	69fa      	ldr	r2, [r7, #28]
 800f9aa:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	69ba      	ldr	r2, [r7, #24]
 800f9b2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	689a      	ldr	r2, [r3, #8]
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f9c2:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	689a      	ldr	r2, [r3, #8]
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f9d2:	609a      	str	r2, [r3, #8]
 800f9d4:	e040      	b.n	800fa58 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	689a      	ldr	r2, [r3, #8]
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800f9e4:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	68db      	ldr	r3, [r3, #12]
 800f9ec:	b2da      	uxtb	r2, r3
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	f462 7220 	orn	r2, r2, #640	; 0x280
 800f9f6:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800f9f8:	697b      	ldr	r3, [r7, #20]
 800f9fa:	1e5a      	subs	r2, r3, #1
 800f9fc:	617a      	str	r2, [r7, #20]
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d10b      	bne.n	800fa1a <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	22ff      	movs	r2, #255	; 0xff
 800fa08:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	2203      	movs	r2, #3
 800fa0e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	2200      	movs	r2, #0
 800fa14:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800fa16:	2303      	movs	r3, #3
 800fa18:	e035      	b.n	800fa86 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	68db      	ldr	r3, [r3, #12]
 800fa20:	f003 0302 	and.w	r3, r3, #2
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d0e7      	beq.n	800f9f8 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	69fa      	ldr	r2, [r7, #28]
 800fa2e:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	69ba      	ldr	r2, [r7, #24]
 800fa36:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	689a      	ldr	r2, [r3, #8]
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fa46:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	689a      	ldr	r2, [r3, #8]
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800fa56:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800fa58:	4b0f      	ldr	r3, [pc, #60]	; (800fa98 <HAL_RTC_SetAlarm_IT+0x26c>)
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	4a0e      	ldr	r2, [pc, #56]	; (800fa98 <HAL_RTC_SetAlarm_IT+0x26c>)
 800fa5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fa62:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 800fa64:	4b0c      	ldr	r3, [pc, #48]	; (800fa98 <HAL_RTC_SetAlarm_IT+0x26c>)
 800fa66:	689b      	ldr	r3, [r3, #8]
 800fa68:	4a0b      	ldr	r2, [pc, #44]	; (800fa98 <HAL_RTC_SetAlarm_IT+0x26c>)
 800fa6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fa6e:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	22ff      	movs	r2, #255	; 0xff
 800fa76:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	2201      	movs	r2, #1
 800fa7c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	2200      	movs	r2, #0
 800fa82:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800fa84:	2300      	movs	r3, #0
}
 800fa86:	4618      	mov	r0, r3
 800fa88:	3724      	adds	r7, #36	; 0x24
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	bd90      	pop	{r4, r7, pc}
 800fa8e:	bf00      	nop
 800fa90:	20000088 	.word	0x20000088
 800fa94:	10624dd3 	.word	0x10624dd3
 800fa98:	40013c00 	.word	0x40013c00

0800fa9c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b082      	sub	sp, #8
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	689b      	ldr	r3, [r3, #8]
 800faaa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d012      	beq.n	800fad8 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	68db      	ldr	r3, [r3, #12]
 800fab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d00b      	beq.n	800fad8 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800fac0:	6878      	ldr	r0, [r7, #4]
 800fac2:	f7f3 fe49 	bl	8003758 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	68db      	ldr	r3, [r3, #12]
 800facc:	b2da      	uxtb	r2, r3
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800fad6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	689b      	ldr	r3, [r3, #8]
 800fade:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d012      	beq.n	800fb0c <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	68db      	ldr	r3, [r3, #12]
 800faec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d00b      	beq.n	800fb0c <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800faf4:	6878      	ldr	r0, [r7, #4]
 800faf6:	f7f3 fe41 	bl	800377c <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	68db      	ldr	r3, [r3, #12]
 800fb00:	b2da      	uxtb	r2, r3
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	f462 7220 	orn	r2, r2, #640	; 0x280
 800fb0a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800fb0c:	4b05      	ldr	r3, [pc, #20]	; (800fb24 <HAL_RTC_AlarmIRQHandler+0x88>)
 800fb0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800fb12:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	2201      	movs	r2, #1
 800fb18:	775a      	strb	r2, [r3, #29]
}
 800fb1a:	bf00      	nop
 800fb1c:	3708      	adds	r7, #8
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	bd80      	pop	{r7, pc}
 800fb22:	bf00      	nop
 800fb24:	40013c00 	.word	0x40013c00

0800fb28 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b084      	sub	sp, #16
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800fb30:	2300      	movs	r3, #0
 800fb32:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	68da      	ldr	r2, [r3, #12]
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800fb42:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800fb44:	f7fc fcd4 	bl	800c4f0 <HAL_GetTick>
 800fb48:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800fb4a:	e009      	b.n	800fb60 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800fb4c:	f7fc fcd0 	bl	800c4f0 <HAL_GetTick>
 800fb50:	4602      	mov	r2, r0
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	1ad3      	subs	r3, r2, r3
 800fb56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fb5a:	d901      	bls.n	800fb60 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800fb5c:	2303      	movs	r3, #3
 800fb5e:	e007      	b.n	800fb70 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	68db      	ldr	r3, [r3, #12]
 800fb66:	f003 0320 	and.w	r3, r3, #32
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d0ee      	beq.n	800fb4c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800fb6e:	2300      	movs	r3, #0
}
 800fb70:	4618      	mov	r0, r3
 800fb72:	3710      	adds	r7, #16
 800fb74:	46bd      	mov	sp, r7
 800fb76:	bd80      	pop	{r7, pc}

0800fb78 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b084      	sub	sp, #16
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800fb80:	2300      	movs	r3, #0
 800fb82:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	68db      	ldr	r3, [r3, #12]
 800fb8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d119      	bne.n	800fbc6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	f04f 32ff 	mov.w	r2, #4294967295
 800fb9a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800fb9c:	f7fc fca8 	bl	800c4f0 <HAL_GetTick>
 800fba0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800fba2:	e009      	b.n	800fbb8 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800fba4:	f7fc fca4 	bl	800c4f0 <HAL_GetTick>
 800fba8:	4602      	mov	r2, r0
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	1ad3      	subs	r3, r2, r3
 800fbae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fbb2:	d901      	bls.n	800fbb8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800fbb4:	2303      	movs	r3, #3
 800fbb6:	e007      	b.n	800fbc8 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	68db      	ldr	r3, [r3, #12]
 800fbbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d0ee      	beq.n	800fba4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800fbc6:	2300      	movs	r3, #0
}
 800fbc8:	4618      	mov	r0, r3
 800fbca:	3710      	adds	r7, #16
 800fbcc:	46bd      	mov	sp, r7
 800fbce:	bd80      	pop	{r7, pc}

0800fbd0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800fbd0:	b480      	push	{r7}
 800fbd2:	b085      	sub	sp, #20
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800fbda:	2300      	movs	r3, #0
 800fbdc:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800fbde:	e005      	b.n	800fbec <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	3301      	adds	r3, #1
 800fbe4:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800fbe6:	79fb      	ldrb	r3, [r7, #7]
 800fbe8:	3b0a      	subs	r3, #10
 800fbea:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800fbec:	79fb      	ldrb	r3, [r7, #7]
 800fbee:	2b09      	cmp	r3, #9
 800fbf0:	d8f6      	bhi.n	800fbe0 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	b2db      	uxtb	r3, r3
 800fbf6:	011b      	lsls	r3, r3, #4
 800fbf8:	b2da      	uxtb	r2, r3
 800fbfa:	79fb      	ldrb	r3, [r7, #7]
 800fbfc:	4313      	orrs	r3, r2
 800fbfe:	b2db      	uxtb	r3, r3
}
 800fc00:	4618      	mov	r0, r3
 800fc02:	3714      	adds	r7, #20
 800fc04:	46bd      	mov	sp, r7
 800fc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc0a:	4770      	bx	lr

0800fc0c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800fc0c:	b480      	push	{r7}
 800fc0e:	b085      	sub	sp, #20
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	4603      	mov	r3, r0
 800fc14:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800fc16:	2300      	movs	r3, #0
 800fc18:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800fc1a:	79fb      	ldrb	r3, [r7, #7]
 800fc1c:	091b      	lsrs	r3, r3, #4
 800fc1e:	b2db      	uxtb	r3, r3
 800fc20:	461a      	mov	r2, r3
 800fc22:	4613      	mov	r3, r2
 800fc24:	009b      	lsls	r3, r3, #2
 800fc26:	4413      	add	r3, r2
 800fc28:	005b      	lsls	r3, r3, #1
 800fc2a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800fc2c:	79fb      	ldrb	r3, [r7, #7]
 800fc2e:	f003 030f 	and.w	r3, r3, #15
 800fc32:	b2da      	uxtb	r2, r3
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	b2db      	uxtb	r3, r3
 800fc38:	4413      	add	r3, r2
 800fc3a:	b2db      	uxtb	r3, r3
}
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	3714      	adds	r7, #20
 800fc40:	46bd      	mov	sp, r7
 800fc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc46:	4770      	bx	lr

0800fc48 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800fc48:	b480      	push	{r7}
 800fc4a:	b087      	sub	sp, #28
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	60f8      	str	r0, [r7, #12]
 800fc50:	60b9      	str	r1, [r7, #8]
 800fc52:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	7f1b      	ldrb	r3, [r3, #28]
 800fc58:	2b01      	cmp	r3, #1
 800fc5a:	d101      	bne.n	800fc60 <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 800fc5c:	2302      	movs	r3, #2
 800fc5e:	e0a6      	b.n	800fdae <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	2201      	movs	r2, #1
 800fc64:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	2202      	movs	r2, #2
 800fc6a:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	22ca      	movs	r2, #202	; 0xca
 800fc72:	625a      	str	r2, [r3, #36]	; 0x24
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	2253      	movs	r2, #83	; 0x53
 800fc7a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	689b      	ldr	r3, [r3, #8]
 800fc82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d022      	beq.n	800fcd0 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800fc8a:	4b4c      	ldr	r3, [pc, #304]	; (800fdbc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	4a4c      	ldr	r2, [pc, #304]	; (800fdc0 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800fc90:	fba2 2303 	umull	r2, r3, r2, r3
 800fc94:	0adb      	lsrs	r3, r3, #11
 800fc96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800fc9a:	fb02 f303 	mul.w	r3, r2, r3
 800fc9e:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 800fca0:	697b      	ldr	r3, [r7, #20]
 800fca2:	1e5a      	subs	r2, r3, #1
 800fca4:	617a      	str	r2, [r7, #20]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d10b      	bne.n	800fcc2 <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	22ff      	movs	r2, #255	; 0xff
 800fcb0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	2203      	movs	r2, #3
 800fcb6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	2200      	movs	r2, #0
 800fcbc:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800fcbe:	2303      	movs	r3, #3
 800fcc0:	e075      	b.n	800fdae <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	68db      	ldr	r3, [r3, #12]
 800fcc8:	f003 0304 	and.w	r3, r3, #4
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d1e7      	bne.n	800fca0 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	689a      	ldr	r2, [r3, #8]
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fcde:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800fce0:	4b36      	ldr	r3, [pc, #216]	; (800fdbc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	4a36      	ldr	r2, [pc, #216]	; (800fdc0 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800fce6:	fba2 2303 	umull	r2, r3, r2, r3
 800fcea:	0adb      	lsrs	r3, r3, #11
 800fcec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800fcf0:	fb02 f303 	mul.w	r3, r2, r3
 800fcf4:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 800fcf6:	697b      	ldr	r3, [r7, #20]
 800fcf8:	1e5a      	subs	r2, r3, #1
 800fcfa:	617a      	str	r2, [r7, #20]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d10b      	bne.n	800fd18 <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	22ff      	movs	r2, #255	; 0xff
 800fd06:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	2203      	movs	r2, #3
 800fd0c:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	2200      	movs	r2, #0
 800fd12:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800fd14:	2303      	movs	r3, #3
 800fd16:	e04a      	b.n	800fdae <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	68db      	ldr	r3, [r3, #12]
 800fd1e:	f003 0304 	and.w	r3, r3, #4
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d0e7      	beq.n	800fcf6 <HAL_RTCEx_SetWakeUpTimer_IT+0xae>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	68ba      	ldr	r2, [r7, #8]
 800fd2c:	615a      	str	r2, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	689a      	ldr	r2, [r3, #8]
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	f022 0207 	bic.w	r2, r2, #7
 800fd3c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	6899      	ldr	r1, [r3, #8]
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	687a      	ldr	r2, [r7, #4]
 800fd4a:	430a      	orrs	r2, r1
 800fd4c:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800fd4e:	4b1d      	ldr	r3, [pc, #116]	; (800fdc4 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	4a1c      	ldr	r2, [pc, #112]	; (800fdc4 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800fd54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800fd58:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 800fd5a:	4b1a      	ldr	r3, [pc, #104]	; (800fdc4 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800fd5c:	689b      	ldr	r3, [r3, #8]
 800fd5e:	4a19      	ldr	r2, [pc, #100]	; (800fdc4 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800fd60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800fd64:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	68db      	ldr	r3, [r3, #12]
 800fd6c:	b2da      	uxtb	r2, r3
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800fd76:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	689a      	ldr	r2, [r3, #8]
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800fd86:	609a      	str	r2, [r3, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	689a      	ldr	r2, [r3, #8]
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fd96:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	22ff      	movs	r2, #255	; 0xff
 800fd9e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	2201      	movs	r2, #1
 800fda4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	2200      	movs	r2, #0
 800fdaa:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800fdac:	2300      	movs	r3, #0
}
 800fdae:	4618      	mov	r0, r3
 800fdb0:	371c      	adds	r7, #28
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb8:	4770      	bx	lr
 800fdba:	bf00      	nop
 800fdbc:	20000088 	.word	0x20000088
 800fdc0:	10624dd3 	.word	0x10624dd3
 800fdc4:	40013c00 	.word	0x40013c00

0800fdc8 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	b084      	sub	sp, #16
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	7f1b      	ldrb	r3, [r3, #28]
 800fdd8:	2b01      	cmp	r3, #1
 800fdda:	d101      	bne.n	800fde0 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 800fddc:	2302      	movs	r3, #2
 800fdde:	e047      	b.n	800fe70 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	2201      	movs	r2, #1
 800fde4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	2202      	movs	r2, #2
 800fdea:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	22ca      	movs	r2, #202	; 0xca
 800fdf2:	625a      	str	r2, [r3, #36]	; 0x24
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	2253      	movs	r2, #83	; 0x53
 800fdfa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	689a      	ldr	r2, [r3, #8]
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fe0a:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	689a      	ldr	r2, [r3, #8]
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800fe1a:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 800fe1c:	f7fc fb68 	bl	800c4f0 <HAL_GetTick>
 800fe20:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800fe22:	e013      	b.n	800fe4c <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800fe24:	f7fc fb64 	bl	800c4f0 <HAL_GetTick>
 800fe28:	4602      	mov	r2, r0
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	1ad3      	subs	r3, r2, r3
 800fe2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fe32:	d90b      	bls.n	800fe4c <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	22ff      	movs	r2, #255	; 0xff
 800fe3a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	2203      	movs	r2, #3
 800fe40:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	2200      	movs	r2, #0
 800fe46:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800fe48:	2303      	movs	r3, #3
 800fe4a:	e011      	b.n	800fe70 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	68db      	ldr	r3, [r3, #12]
 800fe52:	f003 0304 	and.w	r3, r3, #4
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d0e4      	beq.n	800fe24 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	22ff      	movs	r2, #255	; 0xff
 800fe60:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	2201      	movs	r2, #1
 800fe66:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	2200      	movs	r2, #0
 800fe6c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800fe6e:	2300      	movs	r3, #0
}
 800fe70:	4618      	mov	r0, r3
 800fe72:	3710      	adds	r7, #16
 800fe74:	46bd      	mov	sp, r7
 800fe76:	bd80      	pop	{r7, pc}

0800fe78 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b082      	sub	sp, #8
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != (uint32_t)RESET)
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	68db      	ldr	r3, [r3, #12]
 800fe86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d00b      	beq.n	800fea6 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800fe8e:	6878      	ldr	r0, [r7, #4]
 800fe90:	f7f3 fc86 	bl	80037a0 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	68db      	ldr	r3, [r3, #12]
 800fe9a:	b2da      	uxtb	r2, r3
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800fea4:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800fea6:	4b05      	ldr	r3, [pc, #20]	; (800febc <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 800fea8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800feac:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	2201      	movs	r2, #1
 800feb2:	775a      	strb	r2, [r3, #29]
}
 800feb4:	bf00      	nop
 800feb6:	3708      	adds	r7, #8
 800feb8:	46bd      	mov	sp, r7
 800feba:	bd80      	pop	{r7, pc}
 800febc:	40013c00 	.word	0x40013c00

0800fec0 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800fec0:	b480      	push	{r7}
 800fec2:	b087      	sub	sp, #28
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	60f8      	str	r0, [r7, #12]
 800fec8:	60b9      	str	r1, [r7, #8]
 800feca:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800fecc:	2300      	movs	r3, #0
 800fece:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	3350      	adds	r3, #80	; 0x50
 800fed6:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800fed8:	68bb      	ldr	r3, [r7, #8]
 800feda:	009b      	lsls	r3, r3, #2
 800fedc:	697a      	ldr	r2, [r7, #20]
 800fede:	4413      	add	r3, r2
 800fee0:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800fee2:	697b      	ldr	r3, [r7, #20]
 800fee4:	687a      	ldr	r2, [r7, #4]
 800fee6:	601a      	str	r2, [r3, #0]
}
 800fee8:	bf00      	nop
 800feea:	371c      	adds	r7, #28
 800feec:	46bd      	mov	sp, r7
 800feee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef2:	4770      	bx	lr

0800fef4 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800fef4:	b480      	push	{r7}
 800fef6:	b085      	sub	sp, #20
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
 800fefc:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800fefe:	2300      	movs	r3, #0
 800ff00:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	3350      	adds	r3, #80	; 0x50
 800ff08:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800ff0a:	683b      	ldr	r3, [r7, #0]
 800ff0c:	009b      	lsls	r3, r3, #2
 800ff0e:	68fa      	ldr	r2, [r7, #12]
 800ff10:	4413      	add	r3, r2
 800ff12:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	681b      	ldr	r3, [r3, #0]
}
 800ff18:	4618      	mov	r0, r3
 800ff1a:	3714      	adds	r7, #20
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff22:	4770      	bx	lr

0800ff24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b082      	sub	sp, #8
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d101      	bne.n	800ff36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ff32:	2301      	movs	r3, #1
 800ff34:	e07b      	b.n	801002e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d108      	bne.n	800ff50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	685b      	ldr	r3, [r3, #4]
 800ff42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ff46:	d009      	beq.n	800ff5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	2200      	movs	r2, #0
 800ff4c:	61da      	str	r2, [r3, #28]
 800ff4e:	e005      	b.n	800ff5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	2200      	movs	r2, #0
 800ff54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	2200      	movs	r2, #0
 800ff5a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	2200      	movs	r2, #0
 800ff60:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ff68:	b2db      	uxtb	r3, r3
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d106      	bne.n	800ff7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	2200      	movs	r2, #0
 800ff72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ff76:	6878      	ldr	r0, [r7, #4]
 800ff78:	f7f3 fa1c 	bl	80033b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	2202      	movs	r2, #2
 800ff80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	681a      	ldr	r2, [r3, #0]
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ff92:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	685b      	ldr	r3, [r3, #4]
 800ff98:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	689b      	ldr	r3, [r3, #8]
 800ffa0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800ffa4:	431a      	orrs	r2, r3
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	68db      	ldr	r3, [r3, #12]
 800ffaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ffae:	431a      	orrs	r2, r3
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	691b      	ldr	r3, [r3, #16]
 800ffb4:	f003 0302 	and.w	r3, r3, #2
 800ffb8:	431a      	orrs	r2, r3
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	695b      	ldr	r3, [r3, #20]
 800ffbe:	f003 0301 	and.w	r3, r3, #1
 800ffc2:	431a      	orrs	r2, r3
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	699b      	ldr	r3, [r3, #24]
 800ffc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ffcc:	431a      	orrs	r2, r3
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	69db      	ldr	r3, [r3, #28]
 800ffd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ffd6:	431a      	orrs	r2, r3
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	6a1b      	ldr	r3, [r3, #32]
 800ffdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ffe0:	ea42 0103 	orr.w	r1, r2, r3
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffe8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	430a      	orrs	r2, r1
 800fff2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	699b      	ldr	r3, [r3, #24]
 800fff8:	0c1b      	lsrs	r3, r3, #16
 800fffa:	f003 0104 	and.w	r1, r3, #4
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010002:	f003 0210 	and.w	r2, r3, #16
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	430a      	orrs	r2, r1
 801000c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	69da      	ldr	r2, [r3, #28]
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801001c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	2200      	movs	r2, #0
 8010022:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	2201      	movs	r2, #1
 8010028:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 801002c:	2300      	movs	r3, #0
}
 801002e:	4618      	mov	r0, r3
 8010030:	3708      	adds	r7, #8
 8010032:	46bd      	mov	sp, r7
 8010034:	bd80      	pop	{r7, pc}

08010036 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010036:	b580      	push	{r7, lr}
 8010038:	b088      	sub	sp, #32
 801003a:	af00      	add	r7, sp, #0
 801003c:	60f8      	str	r0, [r7, #12]
 801003e:	60b9      	str	r1, [r7, #8]
 8010040:	603b      	str	r3, [r7, #0]
 8010042:	4613      	mov	r3, r2
 8010044:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8010046:	2300      	movs	r3, #0
 8010048:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8010050:	2b01      	cmp	r3, #1
 8010052:	d101      	bne.n	8010058 <HAL_SPI_Transmit+0x22>
 8010054:	2302      	movs	r3, #2
 8010056:	e126      	b.n	80102a6 <HAL_SPI_Transmit+0x270>
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	2201      	movs	r2, #1
 801005c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010060:	f7fc fa46 	bl	800c4f0 <HAL_GetTick>
 8010064:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8010066:	88fb      	ldrh	r3, [r7, #6]
 8010068:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010070:	b2db      	uxtb	r3, r3
 8010072:	2b01      	cmp	r3, #1
 8010074:	d002      	beq.n	801007c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8010076:	2302      	movs	r3, #2
 8010078:	77fb      	strb	r3, [r7, #31]
    goto error;
 801007a:	e10b      	b.n	8010294 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 801007c:	68bb      	ldr	r3, [r7, #8]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d002      	beq.n	8010088 <HAL_SPI_Transmit+0x52>
 8010082:	88fb      	ldrh	r3, [r7, #6]
 8010084:	2b00      	cmp	r3, #0
 8010086:	d102      	bne.n	801008e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8010088:	2301      	movs	r3, #1
 801008a:	77fb      	strb	r3, [r7, #31]
    goto error;
 801008c:	e102      	b.n	8010294 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	2203      	movs	r2, #3
 8010092:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	2200      	movs	r2, #0
 801009a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	68ba      	ldr	r2, [r7, #8]
 80100a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	88fa      	ldrh	r2, [r7, #6]
 80100a6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	88fa      	ldrh	r2, [r7, #6]
 80100ac:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	2200      	movs	r2, #0
 80100b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	2200      	movs	r2, #0
 80100b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	2200      	movs	r2, #0
 80100be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	2200      	movs	r2, #0
 80100c4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	2200      	movs	r2, #0
 80100ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	689b      	ldr	r3, [r3, #8]
 80100d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80100d4:	d10f      	bne.n	80100f6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	681a      	ldr	r2, [r3, #0]
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80100e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	681a      	ldr	r2, [r3, #0]
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80100f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010100:	2b40      	cmp	r3, #64	; 0x40
 8010102:	d007      	beq.n	8010114 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	681a      	ldr	r2, [r3, #0]
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010112:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	68db      	ldr	r3, [r3, #12]
 8010118:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801011c:	d14b      	bne.n	80101b6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	685b      	ldr	r3, [r3, #4]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d002      	beq.n	801012c <HAL_SPI_Transmit+0xf6>
 8010126:	8afb      	ldrh	r3, [r7, #22]
 8010128:	2b01      	cmp	r3, #1
 801012a:	d13e      	bne.n	80101aa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010130:	881a      	ldrh	r2, [r3, #0]
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801013c:	1c9a      	adds	r2, r3, #2
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010146:	b29b      	uxth	r3, r3
 8010148:	3b01      	subs	r3, #1
 801014a:	b29a      	uxth	r2, r3
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8010150:	e02b      	b.n	80101aa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	689b      	ldr	r3, [r3, #8]
 8010158:	f003 0302 	and.w	r3, r3, #2
 801015c:	2b02      	cmp	r3, #2
 801015e:	d112      	bne.n	8010186 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010164:	881a      	ldrh	r2, [r3, #0]
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010170:	1c9a      	adds	r2, r3, #2
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801017a:	b29b      	uxth	r3, r3
 801017c:	3b01      	subs	r3, #1
 801017e:	b29a      	uxth	r2, r3
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	86da      	strh	r2, [r3, #54]	; 0x36
 8010184:	e011      	b.n	80101aa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010186:	f7fc f9b3 	bl	800c4f0 <HAL_GetTick>
 801018a:	4602      	mov	r2, r0
 801018c:	69bb      	ldr	r3, [r7, #24]
 801018e:	1ad3      	subs	r3, r2, r3
 8010190:	683a      	ldr	r2, [r7, #0]
 8010192:	429a      	cmp	r2, r3
 8010194:	d803      	bhi.n	801019e <HAL_SPI_Transmit+0x168>
 8010196:	683b      	ldr	r3, [r7, #0]
 8010198:	f1b3 3fff 	cmp.w	r3, #4294967295
 801019c:	d102      	bne.n	80101a4 <HAL_SPI_Transmit+0x16e>
 801019e:	683b      	ldr	r3, [r7, #0]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d102      	bne.n	80101aa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80101a4:	2303      	movs	r3, #3
 80101a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80101a8:	e074      	b.n	8010294 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80101ae:	b29b      	uxth	r3, r3
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d1ce      	bne.n	8010152 <HAL_SPI_Transmit+0x11c>
 80101b4:	e04c      	b.n	8010250 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	685b      	ldr	r3, [r3, #4]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d002      	beq.n	80101c4 <HAL_SPI_Transmit+0x18e>
 80101be:	8afb      	ldrh	r3, [r7, #22]
 80101c0:	2b01      	cmp	r3, #1
 80101c2:	d140      	bne.n	8010246 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	330c      	adds	r3, #12
 80101ce:	7812      	ldrb	r2, [r2, #0]
 80101d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101d6:	1c5a      	adds	r2, r3, #1
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80101e0:	b29b      	uxth	r3, r3
 80101e2:	3b01      	subs	r3, #1
 80101e4:	b29a      	uxth	r2, r3
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80101ea:	e02c      	b.n	8010246 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	689b      	ldr	r3, [r3, #8]
 80101f2:	f003 0302 	and.w	r3, r3, #2
 80101f6:	2b02      	cmp	r3, #2
 80101f8:	d113      	bne.n	8010222 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	330c      	adds	r3, #12
 8010204:	7812      	ldrb	r2, [r2, #0]
 8010206:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801020c:	1c5a      	adds	r2, r3, #1
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010216:	b29b      	uxth	r3, r3
 8010218:	3b01      	subs	r3, #1
 801021a:	b29a      	uxth	r2, r3
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	86da      	strh	r2, [r3, #54]	; 0x36
 8010220:	e011      	b.n	8010246 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010222:	f7fc f965 	bl	800c4f0 <HAL_GetTick>
 8010226:	4602      	mov	r2, r0
 8010228:	69bb      	ldr	r3, [r7, #24]
 801022a:	1ad3      	subs	r3, r2, r3
 801022c:	683a      	ldr	r2, [r7, #0]
 801022e:	429a      	cmp	r2, r3
 8010230:	d803      	bhi.n	801023a <HAL_SPI_Transmit+0x204>
 8010232:	683b      	ldr	r3, [r7, #0]
 8010234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010238:	d102      	bne.n	8010240 <HAL_SPI_Transmit+0x20a>
 801023a:	683b      	ldr	r3, [r7, #0]
 801023c:	2b00      	cmp	r3, #0
 801023e:	d102      	bne.n	8010246 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8010240:	2303      	movs	r3, #3
 8010242:	77fb      	strb	r3, [r7, #31]
          goto error;
 8010244:	e026      	b.n	8010294 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801024a:	b29b      	uxth	r3, r3
 801024c:	2b00      	cmp	r3, #0
 801024e:	d1cd      	bne.n	80101ec <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010250:	69ba      	ldr	r2, [r7, #24]
 8010252:	6839      	ldr	r1, [r7, #0]
 8010254:	68f8      	ldr	r0, [r7, #12]
 8010256:	f000 fbcb 	bl	80109f0 <SPI_EndRxTxTransaction>
 801025a:	4603      	mov	r3, r0
 801025c:	2b00      	cmp	r3, #0
 801025e:	d002      	beq.n	8010266 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	2220      	movs	r2, #32
 8010264:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	689b      	ldr	r3, [r3, #8]
 801026a:	2b00      	cmp	r3, #0
 801026c:	d10a      	bne.n	8010284 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801026e:	2300      	movs	r3, #0
 8010270:	613b      	str	r3, [r7, #16]
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	68db      	ldr	r3, [r3, #12]
 8010278:	613b      	str	r3, [r7, #16]
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	689b      	ldr	r3, [r3, #8]
 8010280:	613b      	str	r3, [r7, #16]
 8010282:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010288:	2b00      	cmp	r3, #0
 801028a:	d002      	beq.n	8010292 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 801028c:	2301      	movs	r3, #1
 801028e:	77fb      	strb	r3, [r7, #31]
 8010290:	e000      	b.n	8010294 <HAL_SPI_Transmit+0x25e>
  }

error:
 8010292:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	2201      	movs	r2, #1
 8010298:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	2200      	movs	r2, #0
 80102a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80102a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80102a6:	4618      	mov	r0, r3
 80102a8:	3720      	adds	r7, #32
 80102aa:	46bd      	mov	sp, r7
 80102ac:	bd80      	pop	{r7, pc}

080102ae <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80102ae:	b580      	push	{r7, lr}
 80102b0:	b088      	sub	sp, #32
 80102b2:	af02      	add	r7, sp, #8
 80102b4:	60f8      	str	r0, [r7, #12]
 80102b6:	60b9      	str	r1, [r7, #8]
 80102b8:	603b      	str	r3, [r7, #0]
 80102ba:	4613      	mov	r3, r2
 80102bc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80102be:	2300      	movs	r3, #0
 80102c0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	685b      	ldr	r3, [r3, #4]
 80102c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80102ca:	d112      	bne.n	80102f2 <HAL_SPI_Receive+0x44>
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	689b      	ldr	r3, [r3, #8]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d10e      	bne.n	80102f2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	2204      	movs	r2, #4
 80102d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80102dc:	88fa      	ldrh	r2, [r7, #6]
 80102de:	683b      	ldr	r3, [r7, #0]
 80102e0:	9300      	str	r3, [sp, #0]
 80102e2:	4613      	mov	r3, r2
 80102e4:	68ba      	ldr	r2, [r7, #8]
 80102e6:	68b9      	ldr	r1, [r7, #8]
 80102e8:	68f8      	ldr	r0, [r7, #12]
 80102ea:	f000 f8f1 	bl	80104d0 <HAL_SPI_TransmitReceive>
 80102ee:	4603      	mov	r3, r0
 80102f0:	e0ea      	b.n	80104c8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80102f8:	2b01      	cmp	r3, #1
 80102fa:	d101      	bne.n	8010300 <HAL_SPI_Receive+0x52>
 80102fc:	2302      	movs	r3, #2
 80102fe:	e0e3      	b.n	80104c8 <HAL_SPI_Receive+0x21a>
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	2201      	movs	r2, #1
 8010304:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010308:	f7fc f8f2 	bl	800c4f0 <HAL_GetTick>
 801030c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010314:	b2db      	uxtb	r3, r3
 8010316:	2b01      	cmp	r3, #1
 8010318:	d002      	beq.n	8010320 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801031a:	2302      	movs	r3, #2
 801031c:	75fb      	strb	r3, [r7, #23]
    goto error;
 801031e:	e0ca      	b.n	80104b6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8010320:	68bb      	ldr	r3, [r7, #8]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d002      	beq.n	801032c <HAL_SPI_Receive+0x7e>
 8010326:	88fb      	ldrh	r3, [r7, #6]
 8010328:	2b00      	cmp	r3, #0
 801032a:	d102      	bne.n	8010332 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801032c:	2301      	movs	r3, #1
 801032e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8010330:	e0c1      	b.n	80104b6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	2204      	movs	r2, #4
 8010336:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	2200      	movs	r2, #0
 801033e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	68ba      	ldr	r2, [r7, #8]
 8010344:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	88fa      	ldrh	r2, [r7, #6]
 801034a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	88fa      	ldrh	r2, [r7, #6]
 8010350:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	2200      	movs	r2, #0
 8010356:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	2200      	movs	r2, #0
 801035c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	2200      	movs	r2, #0
 8010362:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	2200      	movs	r2, #0
 8010368:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	2200      	movs	r2, #0
 801036e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	689b      	ldr	r3, [r3, #8]
 8010374:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010378:	d10f      	bne.n	801039a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	681a      	ldr	r2, [r3, #0]
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010388:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	681a      	ldr	r2, [r3, #0]
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8010398:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80103a4:	2b40      	cmp	r3, #64	; 0x40
 80103a6:	d007      	beq.n	80103b8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	681a      	ldr	r2, [r3, #0]
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80103b6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	68db      	ldr	r3, [r3, #12]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d162      	bne.n	8010486 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80103c0:	e02e      	b.n	8010420 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	689b      	ldr	r3, [r3, #8]
 80103c8:	f003 0301 	and.w	r3, r3, #1
 80103cc:	2b01      	cmp	r3, #1
 80103ce:	d115      	bne.n	80103fc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	f103 020c 	add.w	r2, r3, #12
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103dc:	7812      	ldrb	r2, [r2, #0]
 80103de:	b2d2      	uxtb	r2, r2
 80103e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103e6:	1c5a      	adds	r2, r3, #1
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80103f0:	b29b      	uxth	r3, r3
 80103f2:	3b01      	subs	r3, #1
 80103f4:	b29a      	uxth	r2, r3
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80103fa:	e011      	b.n	8010420 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80103fc:	f7fc f878 	bl	800c4f0 <HAL_GetTick>
 8010400:	4602      	mov	r2, r0
 8010402:	693b      	ldr	r3, [r7, #16]
 8010404:	1ad3      	subs	r3, r2, r3
 8010406:	683a      	ldr	r2, [r7, #0]
 8010408:	429a      	cmp	r2, r3
 801040a:	d803      	bhi.n	8010414 <HAL_SPI_Receive+0x166>
 801040c:	683b      	ldr	r3, [r7, #0]
 801040e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010412:	d102      	bne.n	801041a <HAL_SPI_Receive+0x16c>
 8010414:	683b      	ldr	r3, [r7, #0]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d102      	bne.n	8010420 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 801041a:	2303      	movs	r3, #3
 801041c:	75fb      	strb	r3, [r7, #23]
          goto error;
 801041e:	e04a      	b.n	80104b6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010424:	b29b      	uxth	r3, r3
 8010426:	2b00      	cmp	r3, #0
 8010428:	d1cb      	bne.n	80103c2 <HAL_SPI_Receive+0x114>
 801042a:	e031      	b.n	8010490 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	689b      	ldr	r3, [r3, #8]
 8010432:	f003 0301 	and.w	r3, r3, #1
 8010436:	2b01      	cmp	r3, #1
 8010438:	d113      	bne.n	8010462 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	68da      	ldr	r2, [r3, #12]
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010444:	b292      	uxth	r2, r2
 8010446:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801044c:	1c9a      	adds	r2, r3, #2
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010456:	b29b      	uxth	r3, r3
 8010458:	3b01      	subs	r3, #1
 801045a:	b29a      	uxth	r2, r3
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8010460:	e011      	b.n	8010486 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010462:	f7fc f845 	bl	800c4f0 <HAL_GetTick>
 8010466:	4602      	mov	r2, r0
 8010468:	693b      	ldr	r3, [r7, #16]
 801046a:	1ad3      	subs	r3, r2, r3
 801046c:	683a      	ldr	r2, [r7, #0]
 801046e:	429a      	cmp	r2, r3
 8010470:	d803      	bhi.n	801047a <HAL_SPI_Receive+0x1cc>
 8010472:	683b      	ldr	r3, [r7, #0]
 8010474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010478:	d102      	bne.n	8010480 <HAL_SPI_Receive+0x1d2>
 801047a:	683b      	ldr	r3, [r7, #0]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d102      	bne.n	8010486 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8010480:	2303      	movs	r3, #3
 8010482:	75fb      	strb	r3, [r7, #23]
          goto error;
 8010484:	e017      	b.n	80104b6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801048a:	b29b      	uxth	r3, r3
 801048c:	2b00      	cmp	r3, #0
 801048e:	d1cd      	bne.n	801042c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010490:	693a      	ldr	r2, [r7, #16]
 8010492:	6839      	ldr	r1, [r7, #0]
 8010494:	68f8      	ldr	r0, [r7, #12]
 8010496:	f000 fa45 	bl	8010924 <SPI_EndRxTransaction>
 801049a:	4603      	mov	r3, r0
 801049c:	2b00      	cmp	r3, #0
 801049e:	d002      	beq.n	80104a6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	2220      	movs	r2, #32
 80104a4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d002      	beq.n	80104b4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80104ae:	2301      	movs	r3, #1
 80104b0:	75fb      	strb	r3, [r7, #23]
 80104b2:	e000      	b.n	80104b6 <HAL_SPI_Receive+0x208>
  }

error :
 80104b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	2201      	movs	r2, #1
 80104ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	2200      	movs	r2, #0
 80104c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80104c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80104c8:	4618      	mov	r0, r3
 80104ca:	3718      	adds	r7, #24
 80104cc:	46bd      	mov	sp, r7
 80104ce:	bd80      	pop	{r7, pc}

080104d0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b08c      	sub	sp, #48	; 0x30
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	60f8      	str	r0, [r7, #12]
 80104d8:	60b9      	str	r1, [r7, #8]
 80104da:	607a      	str	r2, [r7, #4]
 80104dc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80104de:	2301      	movs	r3, #1
 80104e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80104e2:	2300      	movs	r3, #0
 80104e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80104ee:	2b01      	cmp	r3, #1
 80104f0:	d101      	bne.n	80104f6 <HAL_SPI_TransmitReceive+0x26>
 80104f2:	2302      	movs	r3, #2
 80104f4:	e18a      	b.n	801080c <HAL_SPI_TransmitReceive+0x33c>
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	2201      	movs	r2, #1
 80104fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80104fe:	f7fb fff7 	bl	800c4f0 <HAL_GetTick>
 8010502:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801050a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	685b      	ldr	r3, [r3, #4]
 8010512:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8010514:	887b      	ldrh	r3, [r7, #2]
 8010516:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8010518:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801051c:	2b01      	cmp	r3, #1
 801051e:	d00f      	beq.n	8010540 <HAL_SPI_TransmitReceive+0x70>
 8010520:	69fb      	ldr	r3, [r7, #28]
 8010522:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010526:	d107      	bne.n	8010538 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	689b      	ldr	r3, [r3, #8]
 801052c:	2b00      	cmp	r3, #0
 801052e:	d103      	bne.n	8010538 <HAL_SPI_TransmitReceive+0x68>
 8010530:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010534:	2b04      	cmp	r3, #4
 8010536:	d003      	beq.n	8010540 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8010538:	2302      	movs	r3, #2
 801053a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 801053e:	e15b      	b.n	80107f8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8010540:	68bb      	ldr	r3, [r7, #8]
 8010542:	2b00      	cmp	r3, #0
 8010544:	d005      	beq.n	8010552 <HAL_SPI_TransmitReceive+0x82>
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d002      	beq.n	8010552 <HAL_SPI_TransmitReceive+0x82>
 801054c:	887b      	ldrh	r3, [r7, #2]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d103      	bne.n	801055a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8010552:	2301      	movs	r3, #1
 8010554:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8010558:	e14e      	b.n	80107f8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010560:	b2db      	uxtb	r3, r3
 8010562:	2b04      	cmp	r3, #4
 8010564:	d003      	beq.n	801056e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	2205      	movs	r2, #5
 801056a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	2200      	movs	r2, #0
 8010572:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	687a      	ldr	r2, [r7, #4]
 8010578:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	887a      	ldrh	r2, [r7, #2]
 801057e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	887a      	ldrh	r2, [r7, #2]
 8010584:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	68ba      	ldr	r2, [r7, #8]
 801058a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	887a      	ldrh	r2, [r7, #2]
 8010590:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	887a      	ldrh	r2, [r7, #2]
 8010596:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	2200      	movs	r2, #0
 801059c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	2200      	movs	r2, #0
 80105a2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80105ae:	2b40      	cmp	r3, #64	; 0x40
 80105b0:	d007      	beq.n	80105c2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	681a      	ldr	r2, [r3, #0]
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80105c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	68db      	ldr	r3, [r3, #12]
 80105c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80105ca:	d178      	bne.n	80106be <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	685b      	ldr	r3, [r3, #4]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d002      	beq.n	80105da <HAL_SPI_TransmitReceive+0x10a>
 80105d4:	8b7b      	ldrh	r3, [r7, #26]
 80105d6:	2b01      	cmp	r3, #1
 80105d8:	d166      	bne.n	80106a8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105de:	881a      	ldrh	r2, [r3, #0]
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105ea:	1c9a      	adds	r2, r3, #2
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80105f4:	b29b      	uxth	r3, r3
 80105f6:	3b01      	subs	r3, #1
 80105f8:	b29a      	uxth	r2, r3
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80105fe:	e053      	b.n	80106a8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	689b      	ldr	r3, [r3, #8]
 8010606:	f003 0302 	and.w	r3, r3, #2
 801060a:	2b02      	cmp	r3, #2
 801060c:	d11b      	bne.n	8010646 <HAL_SPI_TransmitReceive+0x176>
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010612:	b29b      	uxth	r3, r3
 8010614:	2b00      	cmp	r3, #0
 8010616:	d016      	beq.n	8010646 <HAL_SPI_TransmitReceive+0x176>
 8010618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801061a:	2b01      	cmp	r3, #1
 801061c:	d113      	bne.n	8010646 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010622:	881a      	ldrh	r2, [r3, #0]
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801062e:	1c9a      	adds	r2, r3, #2
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010638:	b29b      	uxth	r3, r3
 801063a:	3b01      	subs	r3, #1
 801063c:	b29a      	uxth	r2, r3
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8010642:	2300      	movs	r3, #0
 8010644:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	689b      	ldr	r3, [r3, #8]
 801064c:	f003 0301 	and.w	r3, r3, #1
 8010650:	2b01      	cmp	r3, #1
 8010652:	d119      	bne.n	8010688 <HAL_SPI_TransmitReceive+0x1b8>
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010658:	b29b      	uxth	r3, r3
 801065a:	2b00      	cmp	r3, #0
 801065c:	d014      	beq.n	8010688 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	68da      	ldr	r2, [r3, #12]
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010668:	b292      	uxth	r2, r2
 801066a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010670:	1c9a      	adds	r2, r3, #2
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801067a:	b29b      	uxth	r3, r3
 801067c:	3b01      	subs	r3, #1
 801067e:	b29a      	uxth	r2, r3
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8010684:	2301      	movs	r3, #1
 8010686:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8010688:	f7fb ff32 	bl	800c4f0 <HAL_GetTick>
 801068c:	4602      	mov	r2, r0
 801068e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010690:	1ad3      	subs	r3, r2, r3
 8010692:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010694:	429a      	cmp	r2, r3
 8010696:	d807      	bhi.n	80106a8 <HAL_SPI_TransmitReceive+0x1d8>
 8010698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801069a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801069e:	d003      	beq.n	80106a8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80106a0:	2303      	movs	r3, #3
 80106a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80106a6:	e0a7      	b.n	80107f8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80106ac:	b29b      	uxth	r3, r3
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d1a6      	bne.n	8010600 <HAL_SPI_TransmitReceive+0x130>
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80106b6:	b29b      	uxth	r3, r3
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d1a1      	bne.n	8010600 <HAL_SPI_TransmitReceive+0x130>
 80106bc:	e07c      	b.n	80107b8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	685b      	ldr	r3, [r3, #4]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d002      	beq.n	80106cc <HAL_SPI_TransmitReceive+0x1fc>
 80106c6:	8b7b      	ldrh	r3, [r7, #26]
 80106c8:	2b01      	cmp	r3, #1
 80106ca:	d16b      	bne.n	80107a4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	330c      	adds	r3, #12
 80106d6:	7812      	ldrb	r2, [r2, #0]
 80106d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106de:	1c5a      	adds	r2, r3, #1
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80106e8:	b29b      	uxth	r3, r3
 80106ea:	3b01      	subs	r3, #1
 80106ec:	b29a      	uxth	r2, r3
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80106f2:	e057      	b.n	80107a4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	689b      	ldr	r3, [r3, #8]
 80106fa:	f003 0302 	and.w	r3, r3, #2
 80106fe:	2b02      	cmp	r3, #2
 8010700:	d11c      	bne.n	801073c <HAL_SPI_TransmitReceive+0x26c>
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010706:	b29b      	uxth	r3, r3
 8010708:	2b00      	cmp	r3, #0
 801070a:	d017      	beq.n	801073c <HAL_SPI_TransmitReceive+0x26c>
 801070c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801070e:	2b01      	cmp	r3, #1
 8010710:	d114      	bne.n	801073c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	330c      	adds	r3, #12
 801071c:	7812      	ldrb	r2, [r2, #0]
 801071e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010724:	1c5a      	adds	r2, r3, #1
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801072e:	b29b      	uxth	r3, r3
 8010730:	3b01      	subs	r3, #1
 8010732:	b29a      	uxth	r2, r3
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8010738:	2300      	movs	r3, #0
 801073a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	689b      	ldr	r3, [r3, #8]
 8010742:	f003 0301 	and.w	r3, r3, #1
 8010746:	2b01      	cmp	r3, #1
 8010748:	d119      	bne.n	801077e <HAL_SPI_TransmitReceive+0x2ae>
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801074e:	b29b      	uxth	r3, r3
 8010750:	2b00      	cmp	r3, #0
 8010752:	d014      	beq.n	801077e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	68da      	ldr	r2, [r3, #12]
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801075e:	b2d2      	uxtb	r2, r2
 8010760:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010766:	1c5a      	adds	r2, r3, #1
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010770:	b29b      	uxth	r3, r3
 8010772:	3b01      	subs	r3, #1
 8010774:	b29a      	uxth	r2, r3
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801077a:	2301      	movs	r3, #1
 801077c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801077e:	f7fb feb7 	bl	800c4f0 <HAL_GetTick>
 8010782:	4602      	mov	r2, r0
 8010784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010786:	1ad3      	subs	r3, r2, r3
 8010788:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801078a:	429a      	cmp	r2, r3
 801078c:	d803      	bhi.n	8010796 <HAL_SPI_TransmitReceive+0x2c6>
 801078e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010794:	d102      	bne.n	801079c <HAL_SPI_TransmitReceive+0x2cc>
 8010796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010798:	2b00      	cmp	r3, #0
 801079a:	d103      	bne.n	80107a4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 801079c:	2303      	movs	r3, #3
 801079e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80107a2:	e029      	b.n	80107f8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80107a8:	b29b      	uxth	r3, r3
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d1a2      	bne.n	80106f4 <HAL_SPI_TransmitReceive+0x224>
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80107b2:	b29b      	uxth	r3, r3
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d19d      	bne.n	80106f4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80107b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80107ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80107bc:	68f8      	ldr	r0, [r7, #12]
 80107be:	f000 f917 	bl	80109f0 <SPI_EndRxTxTransaction>
 80107c2:	4603      	mov	r3, r0
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d006      	beq.n	80107d6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80107c8:	2301      	movs	r3, #1
 80107ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	2220      	movs	r2, #32
 80107d2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80107d4:	e010      	b.n	80107f8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	689b      	ldr	r3, [r3, #8]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d10b      	bne.n	80107f6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80107de:	2300      	movs	r3, #0
 80107e0:	617b      	str	r3, [r7, #20]
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	68db      	ldr	r3, [r3, #12]
 80107e8:	617b      	str	r3, [r7, #20]
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	689b      	ldr	r3, [r3, #8]
 80107f0:	617b      	str	r3, [r7, #20]
 80107f2:	697b      	ldr	r3, [r7, #20]
 80107f4:	e000      	b.n	80107f8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80107f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	2201      	movs	r2, #1
 80107fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	2200      	movs	r2, #0
 8010804:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8010808:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 801080c:	4618      	mov	r0, r3
 801080e:	3730      	adds	r7, #48	; 0x30
 8010810:	46bd      	mov	sp, r7
 8010812:	bd80      	pop	{r7, pc}

08010814 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8010814:	b580      	push	{r7, lr}
 8010816:	b088      	sub	sp, #32
 8010818:	af00      	add	r7, sp, #0
 801081a:	60f8      	str	r0, [r7, #12]
 801081c:	60b9      	str	r1, [r7, #8]
 801081e:	603b      	str	r3, [r7, #0]
 8010820:	4613      	mov	r3, r2
 8010822:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8010824:	f7fb fe64 	bl	800c4f0 <HAL_GetTick>
 8010828:	4602      	mov	r2, r0
 801082a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801082c:	1a9b      	subs	r3, r3, r2
 801082e:	683a      	ldr	r2, [r7, #0]
 8010830:	4413      	add	r3, r2
 8010832:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8010834:	f7fb fe5c 	bl	800c4f0 <HAL_GetTick>
 8010838:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801083a:	4b39      	ldr	r3, [pc, #228]	; (8010920 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	015b      	lsls	r3, r3, #5
 8010840:	0d1b      	lsrs	r3, r3, #20
 8010842:	69fa      	ldr	r2, [r7, #28]
 8010844:	fb02 f303 	mul.w	r3, r2, r3
 8010848:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801084a:	e054      	b.n	80108f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801084c:	683b      	ldr	r3, [r7, #0]
 801084e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010852:	d050      	beq.n	80108f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8010854:	f7fb fe4c 	bl	800c4f0 <HAL_GetTick>
 8010858:	4602      	mov	r2, r0
 801085a:	69bb      	ldr	r3, [r7, #24]
 801085c:	1ad3      	subs	r3, r2, r3
 801085e:	69fa      	ldr	r2, [r7, #28]
 8010860:	429a      	cmp	r2, r3
 8010862:	d902      	bls.n	801086a <SPI_WaitFlagStateUntilTimeout+0x56>
 8010864:	69fb      	ldr	r3, [r7, #28]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d13d      	bne.n	80108e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	685a      	ldr	r2, [r3, #4]
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8010878:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	685b      	ldr	r3, [r3, #4]
 801087e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010882:	d111      	bne.n	80108a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	689b      	ldr	r3, [r3, #8]
 8010888:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801088c:	d004      	beq.n	8010898 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	689b      	ldr	r3, [r3, #8]
 8010892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010896:	d107      	bne.n	80108a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	681a      	ldr	r2, [r3, #0]
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80108a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80108ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80108b0:	d10f      	bne.n	80108d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	681a      	ldr	r2, [r3, #0]
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80108c0:	601a      	str	r2, [r3, #0]
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	681a      	ldr	r2, [r3, #0]
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80108d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	2201      	movs	r2, #1
 80108d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	2200      	movs	r2, #0
 80108de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80108e2:	2303      	movs	r3, #3
 80108e4:	e017      	b.n	8010916 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80108e6:	697b      	ldr	r3, [r7, #20]
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d101      	bne.n	80108f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80108ec:	2300      	movs	r3, #0
 80108ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80108f0:	697b      	ldr	r3, [r7, #20]
 80108f2:	3b01      	subs	r3, #1
 80108f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	689a      	ldr	r2, [r3, #8]
 80108fc:	68bb      	ldr	r3, [r7, #8]
 80108fe:	4013      	ands	r3, r2
 8010900:	68ba      	ldr	r2, [r7, #8]
 8010902:	429a      	cmp	r2, r3
 8010904:	bf0c      	ite	eq
 8010906:	2301      	moveq	r3, #1
 8010908:	2300      	movne	r3, #0
 801090a:	b2db      	uxtb	r3, r3
 801090c:	461a      	mov	r2, r3
 801090e:	79fb      	ldrb	r3, [r7, #7]
 8010910:	429a      	cmp	r2, r3
 8010912:	d19b      	bne.n	801084c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8010914:	2300      	movs	r3, #0
}
 8010916:	4618      	mov	r0, r3
 8010918:	3720      	adds	r7, #32
 801091a:	46bd      	mov	sp, r7
 801091c:	bd80      	pop	{r7, pc}
 801091e:	bf00      	nop
 8010920:	20000088 	.word	0x20000088

08010924 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8010924:	b580      	push	{r7, lr}
 8010926:	b086      	sub	sp, #24
 8010928:	af02      	add	r7, sp, #8
 801092a:	60f8      	str	r0, [r7, #12]
 801092c:	60b9      	str	r1, [r7, #8]
 801092e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	685b      	ldr	r3, [r3, #4]
 8010934:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010938:	d111      	bne.n	801095e <SPI_EndRxTransaction+0x3a>
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	689b      	ldr	r3, [r3, #8]
 801093e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010942:	d004      	beq.n	801094e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	689b      	ldr	r3, [r3, #8]
 8010948:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801094c:	d107      	bne.n	801095e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	681a      	ldr	r2, [r3, #0]
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801095c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	685b      	ldr	r3, [r3, #4]
 8010962:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010966:	d12a      	bne.n	80109be <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	689b      	ldr	r3, [r3, #8]
 801096c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010970:	d012      	beq.n	8010998 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	9300      	str	r3, [sp, #0]
 8010976:	68bb      	ldr	r3, [r7, #8]
 8010978:	2200      	movs	r2, #0
 801097a:	2180      	movs	r1, #128	; 0x80
 801097c:	68f8      	ldr	r0, [r7, #12]
 801097e:	f7ff ff49 	bl	8010814 <SPI_WaitFlagStateUntilTimeout>
 8010982:	4603      	mov	r3, r0
 8010984:	2b00      	cmp	r3, #0
 8010986:	d02d      	beq.n	80109e4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801098c:	f043 0220 	orr.w	r2, r3, #32
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8010994:	2303      	movs	r3, #3
 8010996:	e026      	b.n	80109e6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	9300      	str	r3, [sp, #0]
 801099c:	68bb      	ldr	r3, [r7, #8]
 801099e:	2200      	movs	r2, #0
 80109a0:	2101      	movs	r1, #1
 80109a2:	68f8      	ldr	r0, [r7, #12]
 80109a4:	f7ff ff36 	bl	8010814 <SPI_WaitFlagStateUntilTimeout>
 80109a8:	4603      	mov	r3, r0
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d01a      	beq.n	80109e4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80109b2:	f043 0220 	orr.w	r2, r3, #32
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80109ba:	2303      	movs	r3, #3
 80109bc:	e013      	b.n	80109e6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	9300      	str	r3, [sp, #0]
 80109c2:	68bb      	ldr	r3, [r7, #8]
 80109c4:	2200      	movs	r2, #0
 80109c6:	2101      	movs	r1, #1
 80109c8:	68f8      	ldr	r0, [r7, #12]
 80109ca:	f7ff ff23 	bl	8010814 <SPI_WaitFlagStateUntilTimeout>
 80109ce:	4603      	mov	r3, r0
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d007      	beq.n	80109e4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80109d8:	f043 0220 	orr.w	r2, r3, #32
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80109e0:	2303      	movs	r3, #3
 80109e2:	e000      	b.n	80109e6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80109e4:	2300      	movs	r3, #0
}
 80109e6:	4618      	mov	r0, r3
 80109e8:	3710      	adds	r7, #16
 80109ea:	46bd      	mov	sp, r7
 80109ec:	bd80      	pop	{r7, pc}
	...

080109f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b088      	sub	sp, #32
 80109f4:	af02      	add	r7, sp, #8
 80109f6:	60f8      	str	r0, [r7, #12]
 80109f8:	60b9      	str	r1, [r7, #8]
 80109fa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80109fc:	4b1b      	ldr	r3, [pc, #108]	; (8010a6c <SPI_EndRxTxTransaction+0x7c>)
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	4a1b      	ldr	r2, [pc, #108]	; (8010a70 <SPI_EndRxTxTransaction+0x80>)
 8010a02:	fba2 2303 	umull	r2, r3, r2, r3
 8010a06:	0d5b      	lsrs	r3, r3, #21
 8010a08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010a0c:	fb02 f303 	mul.w	r3, r2, r3
 8010a10:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	685b      	ldr	r3, [r3, #4]
 8010a16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010a1a:	d112      	bne.n	8010a42 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	9300      	str	r3, [sp, #0]
 8010a20:	68bb      	ldr	r3, [r7, #8]
 8010a22:	2200      	movs	r2, #0
 8010a24:	2180      	movs	r1, #128	; 0x80
 8010a26:	68f8      	ldr	r0, [r7, #12]
 8010a28:	f7ff fef4 	bl	8010814 <SPI_WaitFlagStateUntilTimeout>
 8010a2c:	4603      	mov	r3, r0
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d016      	beq.n	8010a60 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a36:	f043 0220 	orr.w	r2, r3, #32
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8010a3e:	2303      	movs	r3, #3
 8010a40:	e00f      	b.n	8010a62 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8010a42:	697b      	ldr	r3, [r7, #20]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d00a      	beq.n	8010a5e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8010a48:	697b      	ldr	r3, [r7, #20]
 8010a4a:	3b01      	subs	r3, #1
 8010a4c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	689b      	ldr	r3, [r3, #8]
 8010a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010a58:	2b80      	cmp	r3, #128	; 0x80
 8010a5a:	d0f2      	beq.n	8010a42 <SPI_EndRxTxTransaction+0x52>
 8010a5c:	e000      	b.n	8010a60 <SPI_EndRxTxTransaction+0x70>
        break;
 8010a5e:	bf00      	nop
  }

  return HAL_OK;
 8010a60:	2300      	movs	r3, #0
}
 8010a62:	4618      	mov	r0, r3
 8010a64:	3718      	adds	r7, #24
 8010a66:	46bd      	mov	sp, r7
 8010a68:	bd80      	pop	{r7, pc}
 8010a6a:	bf00      	nop
 8010a6c:	20000088 	.word	0x20000088
 8010a70:	165e9f81 	.word	0x165e9f81

08010a74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010a74:	b580      	push	{r7, lr}
 8010a76:	b082      	sub	sp, #8
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d101      	bne.n	8010a86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010a82:	2301      	movs	r3, #1
 8010a84:	e041      	b.n	8010b0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010a8c:	b2db      	uxtb	r3, r3
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d106      	bne.n	8010aa0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	2200      	movs	r2, #0
 8010a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010a9a:	6878      	ldr	r0, [r7, #4]
 8010a9c:	f7f2 ff1c 	bl	80038d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	2202      	movs	r2, #2
 8010aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	681a      	ldr	r2, [r3, #0]
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	3304      	adds	r3, #4
 8010ab0:	4619      	mov	r1, r3
 8010ab2:	4610      	mov	r0, r2
 8010ab4:	f000 fcea 	bl	801148c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	2201      	movs	r2, #1
 8010abc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	2201      	movs	r2, #1
 8010ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	2201      	movs	r2, #1
 8010acc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	2201      	movs	r2, #1
 8010ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	2201      	movs	r2, #1
 8010adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	2201      	movs	r2, #1
 8010ae4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	2201      	movs	r2, #1
 8010aec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	2201      	movs	r2, #1
 8010af4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	2201      	movs	r2, #1
 8010afc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	2201      	movs	r2, #1
 8010b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010b08:	2300      	movs	r3, #0
}
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	3708      	adds	r7, #8
 8010b0e:	46bd      	mov	sp, r7
 8010b10:	bd80      	pop	{r7, pc}
	...

08010b14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010b14:	b480      	push	{r7}
 8010b16:	b085      	sub	sp, #20
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010b22:	b2db      	uxtb	r3, r3
 8010b24:	2b01      	cmp	r3, #1
 8010b26:	d001      	beq.n	8010b2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010b28:	2301      	movs	r3, #1
 8010b2a:	e04e      	b.n	8010bca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	2202      	movs	r2, #2
 8010b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	68da      	ldr	r2, [r3, #12]
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	f042 0201 	orr.w	r2, r2, #1
 8010b42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	4a23      	ldr	r2, [pc, #140]	; (8010bd8 <HAL_TIM_Base_Start_IT+0xc4>)
 8010b4a:	4293      	cmp	r3, r2
 8010b4c:	d022      	beq.n	8010b94 <HAL_TIM_Base_Start_IT+0x80>
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010b56:	d01d      	beq.n	8010b94 <HAL_TIM_Base_Start_IT+0x80>
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	4a1f      	ldr	r2, [pc, #124]	; (8010bdc <HAL_TIM_Base_Start_IT+0xc8>)
 8010b5e:	4293      	cmp	r3, r2
 8010b60:	d018      	beq.n	8010b94 <HAL_TIM_Base_Start_IT+0x80>
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	4a1e      	ldr	r2, [pc, #120]	; (8010be0 <HAL_TIM_Base_Start_IT+0xcc>)
 8010b68:	4293      	cmp	r3, r2
 8010b6a:	d013      	beq.n	8010b94 <HAL_TIM_Base_Start_IT+0x80>
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	4a1c      	ldr	r2, [pc, #112]	; (8010be4 <HAL_TIM_Base_Start_IT+0xd0>)
 8010b72:	4293      	cmp	r3, r2
 8010b74:	d00e      	beq.n	8010b94 <HAL_TIM_Base_Start_IT+0x80>
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	4a1b      	ldr	r2, [pc, #108]	; (8010be8 <HAL_TIM_Base_Start_IT+0xd4>)
 8010b7c:	4293      	cmp	r3, r2
 8010b7e:	d009      	beq.n	8010b94 <HAL_TIM_Base_Start_IT+0x80>
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	4a19      	ldr	r2, [pc, #100]	; (8010bec <HAL_TIM_Base_Start_IT+0xd8>)
 8010b86:	4293      	cmp	r3, r2
 8010b88:	d004      	beq.n	8010b94 <HAL_TIM_Base_Start_IT+0x80>
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	4a18      	ldr	r2, [pc, #96]	; (8010bf0 <HAL_TIM_Base_Start_IT+0xdc>)
 8010b90:	4293      	cmp	r3, r2
 8010b92:	d111      	bne.n	8010bb8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	689b      	ldr	r3, [r3, #8]
 8010b9a:	f003 0307 	and.w	r3, r3, #7
 8010b9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	2b06      	cmp	r3, #6
 8010ba4:	d010      	beq.n	8010bc8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	681a      	ldr	r2, [r3, #0]
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	f042 0201 	orr.w	r2, r2, #1
 8010bb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010bb6:	e007      	b.n	8010bc8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	681a      	ldr	r2, [r3, #0]
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	f042 0201 	orr.w	r2, r2, #1
 8010bc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010bc8:	2300      	movs	r3, #0
}
 8010bca:	4618      	mov	r0, r3
 8010bcc:	3714      	adds	r7, #20
 8010bce:	46bd      	mov	sp, r7
 8010bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd4:	4770      	bx	lr
 8010bd6:	bf00      	nop
 8010bd8:	40010000 	.word	0x40010000
 8010bdc:	40000400 	.word	0x40000400
 8010be0:	40000800 	.word	0x40000800
 8010be4:	40000c00 	.word	0x40000c00
 8010be8:	40010400 	.word	0x40010400
 8010bec:	40014000 	.word	0x40014000
 8010bf0:	40001800 	.word	0x40001800

08010bf4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010bf4:	b580      	push	{r7, lr}
 8010bf6:	b082      	sub	sp, #8
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d101      	bne.n	8010c06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010c02:	2301      	movs	r3, #1
 8010c04:	e041      	b.n	8010c8a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010c0c:	b2db      	uxtb	r3, r3
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d106      	bne.n	8010c20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	2200      	movs	r2, #0
 8010c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8010c1a:	6878      	ldr	r0, [r7, #4]
 8010c1c:	f000 f839 	bl	8010c92 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	2202      	movs	r2, #2
 8010c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	681a      	ldr	r2, [r3, #0]
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	3304      	adds	r3, #4
 8010c30:	4619      	mov	r1, r3
 8010c32:	4610      	mov	r0, r2
 8010c34:	f000 fc2a 	bl	801148c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	2201      	movs	r2, #1
 8010c3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	2201      	movs	r2, #1
 8010c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	2201      	movs	r2, #1
 8010c4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	2201      	movs	r2, #1
 8010c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	2201      	movs	r2, #1
 8010c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	2201      	movs	r2, #1
 8010c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	2201      	movs	r2, #1
 8010c6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	2201      	movs	r2, #1
 8010c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	2201      	movs	r2, #1
 8010c7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	2201      	movs	r2, #1
 8010c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010c88:	2300      	movs	r3, #0
}
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	3708      	adds	r7, #8
 8010c8e:	46bd      	mov	sp, r7
 8010c90:	bd80      	pop	{r7, pc}

08010c92 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8010c92:	b480      	push	{r7}
 8010c94:	b083      	sub	sp, #12
 8010c96:	af00      	add	r7, sp, #0
 8010c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8010c9a:	bf00      	nop
 8010c9c:	370c      	adds	r7, #12
 8010c9e:	46bd      	mov	sp, r7
 8010ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca4:	4770      	bx	lr
	...

08010ca8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b084      	sub	sp, #16
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]
 8010cb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8010cb2:	683b      	ldr	r3, [r7, #0]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d109      	bne.n	8010ccc <HAL_TIM_PWM_Start+0x24>
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010cbe:	b2db      	uxtb	r3, r3
 8010cc0:	2b01      	cmp	r3, #1
 8010cc2:	bf14      	ite	ne
 8010cc4:	2301      	movne	r3, #1
 8010cc6:	2300      	moveq	r3, #0
 8010cc8:	b2db      	uxtb	r3, r3
 8010cca:	e022      	b.n	8010d12 <HAL_TIM_PWM_Start+0x6a>
 8010ccc:	683b      	ldr	r3, [r7, #0]
 8010cce:	2b04      	cmp	r3, #4
 8010cd0:	d109      	bne.n	8010ce6 <HAL_TIM_PWM_Start+0x3e>
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010cd8:	b2db      	uxtb	r3, r3
 8010cda:	2b01      	cmp	r3, #1
 8010cdc:	bf14      	ite	ne
 8010cde:	2301      	movne	r3, #1
 8010ce0:	2300      	moveq	r3, #0
 8010ce2:	b2db      	uxtb	r3, r3
 8010ce4:	e015      	b.n	8010d12 <HAL_TIM_PWM_Start+0x6a>
 8010ce6:	683b      	ldr	r3, [r7, #0]
 8010ce8:	2b08      	cmp	r3, #8
 8010cea:	d109      	bne.n	8010d00 <HAL_TIM_PWM_Start+0x58>
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010cf2:	b2db      	uxtb	r3, r3
 8010cf4:	2b01      	cmp	r3, #1
 8010cf6:	bf14      	ite	ne
 8010cf8:	2301      	movne	r3, #1
 8010cfa:	2300      	moveq	r3, #0
 8010cfc:	b2db      	uxtb	r3, r3
 8010cfe:	e008      	b.n	8010d12 <HAL_TIM_PWM_Start+0x6a>
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010d06:	b2db      	uxtb	r3, r3
 8010d08:	2b01      	cmp	r3, #1
 8010d0a:	bf14      	ite	ne
 8010d0c:	2301      	movne	r3, #1
 8010d0e:	2300      	moveq	r3, #0
 8010d10:	b2db      	uxtb	r3, r3
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d001      	beq.n	8010d1a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8010d16:	2301      	movs	r3, #1
 8010d18:	e07c      	b.n	8010e14 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010d1a:	683b      	ldr	r3, [r7, #0]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d104      	bne.n	8010d2a <HAL_TIM_PWM_Start+0x82>
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	2202      	movs	r2, #2
 8010d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010d28:	e013      	b.n	8010d52 <HAL_TIM_PWM_Start+0xaa>
 8010d2a:	683b      	ldr	r3, [r7, #0]
 8010d2c:	2b04      	cmp	r3, #4
 8010d2e:	d104      	bne.n	8010d3a <HAL_TIM_PWM_Start+0x92>
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	2202      	movs	r2, #2
 8010d34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010d38:	e00b      	b.n	8010d52 <HAL_TIM_PWM_Start+0xaa>
 8010d3a:	683b      	ldr	r3, [r7, #0]
 8010d3c:	2b08      	cmp	r3, #8
 8010d3e:	d104      	bne.n	8010d4a <HAL_TIM_PWM_Start+0xa2>
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	2202      	movs	r2, #2
 8010d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010d48:	e003      	b.n	8010d52 <HAL_TIM_PWM_Start+0xaa>
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	2202      	movs	r2, #2
 8010d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	2201      	movs	r2, #1
 8010d58:	6839      	ldr	r1, [r7, #0]
 8010d5a:	4618      	mov	r0, r3
 8010d5c:	f000 fe80 	bl	8011a60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	4a2d      	ldr	r2, [pc, #180]	; (8010e1c <HAL_TIM_PWM_Start+0x174>)
 8010d66:	4293      	cmp	r3, r2
 8010d68:	d004      	beq.n	8010d74 <HAL_TIM_PWM_Start+0xcc>
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	4a2c      	ldr	r2, [pc, #176]	; (8010e20 <HAL_TIM_PWM_Start+0x178>)
 8010d70:	4293      	cmp	r3, r2
 8010d72:	d101      	bne.n	8010d78 <HAL_TIM_PWM_Start+0xd0>
 8010d74:	2301      	movs	r3, #1
 8010d76:	e000      	b.n	8010d7a <HAL_TIM_PWM_Start+0xd2>
 8010d78:	2300      	movs	r3, #0
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d007      	beq.n	8010d8e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010d8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	4a22      	ldr	r2, [pc, #136]	; (8010e1c <HAL_TIM_PWM_Start+0x174>)
 8010d94:	4293      	cmp	r3, r2
 8010d96:	d022      	beq.n	8010dde <HAL_TIM_PWM_Start+0x136>
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010da0:	d01d      	beq.n	8010dde <HAL_TIM_PWM_Start+0x136>
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	4a1f      	ldr	r2, [pc, #124]	; (8010e24 <HAL_TIM_PWM_Start+0x17c>)
 8010da8:	4293      	cmp	r3, r2
 8010daa:	d018      	beq.n	8010dde <HAL_TIM_PWM_Start+0x136>
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	4a1d      	ldr	r2, [pc, #116]	; (8010e28 <HAL_TIM_PWM_Start+0x180>)
 8010db2:	4293      	cmp	r3, r2
 8010db4:	d013      	beq.n	8010dde <HAL_TIM_PWM_Start+0x136>
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	4a1c      	ldr	r2, [pc, #112]	; (8010e2c <HAL_TIM_PWM_Start+0x184>)
 8010dbc:	4293      	cmp	r3, r2
 8010dbe:	d00e      	beq.n	8010dde <HAL_TIM_PWM_Start+0x136>
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	4a16      	ldr	r2, [pc, #88]	; (8010e20 <HAL_TIM_PWM_Start+0x178>)
 8010dc6:	4293      	cmp	r3, r2
 8010dc8:	d009      	beq.n	8010dde <HAL_TIM_PWM_Start+0x136>
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	4a18      	ldr	r2, [pc, #96]	; (8010e30 <HAL_TIM_PWM_Start+0x188>)
 8010dd0:	4293      	cmp	r3, r2
 8010dd2:	d004      	beq.n	8010dde <HAL_TIM_PWM_Start+0x136>
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	4a16      	ldr	r2, [pc, #88]	; (8010e34 <HAL_TIM_PWM_Start+0x18c>)
 8010dda:	4293      	cmp	r3, r2
 8010ddc:	d111      	bne.n	8010e02 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	689b      	ldr	r3, [r3, #8]
 8010de4:	f003 0307 	and.w	r3, r3, #7
 8010de8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	2b06      	cmp	r3, #6
 8010dee:	d010      	beq.n	8010e12 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	681a      	ldr	r2, [r3, #0]
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	f042 0201 	orr.w	r2, r2, #1
 8010dfe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010e00:	e007      	b.n	8010e12 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	681a      	ldr	r2, [r3, #0]
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	f042 0201 	orr.w	r2, r2, #1
 8010e10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010e12:	2300      	movs	r3, #0
}
 8010e14:	4618      	mov	r0, r3
 8010e16:	3710      	adds	r7, #16
 8010e18:	46bd      	mov	sp, r7
 8010e1a:	bd80      	pop	{r7, pc}
 8010e1c:	40010000 	.word	0x40010000
 8010e20:	40010400 	.word	0x40010400
 8010e24:	40000400 	.word	0x40000400
 8010e28:	40000800 	.word	0x40000800
 8010e2c:	40000c00 	.word	0x40000c00
 8010e30:	40014000 	.word	0x40014000
 8010e34:	40001800 	.word	0x40001800

08010e38 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010e38:	b580      	push	{r7, lr}
 8010e3a:	b082      	sub	sp, #8
 8010e3c:	af00      	add	r7, sp, #0
 8010e3e:	6078      	str	r0, [r7, #4]
 8010e40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	2200      	movs	r2, #0
 8010e48:	6839      	ldr	r1, [r7, #0]
 8010e4a:	4618      	mov	r0, r3
 8010e4c:	f000 fe08 	bl	8011a60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	4a2e      	ldr	r2, [pc, #184]	; (8010f10 <HAL_TIM_PWM_Stop+0xd8>)
 8010e56:	4293      	cmp	r3, r2
 8010e58:	d004      	beq.n	8010e64 <HAL_TIM_PWM_Stop+0x2c>
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	4a2d      	ldr	r2, [pc, #180]	; (8010f14 <HAL_TIM_PWM_Stop+0xdc>)
 8010e60:	4293      	cmp	r3, r2
 8010e62:	d101      	bne.n	8010e68 <HAL_TIM_PWM_Stop+0x30>
 8010e64:	2301      	movs	r3, #1
 8010e66:	e000      	b.n	8010e6a <HAL_TIM_PWM_Stop+0x32>
 8010e68:	2300      	movs	r3, #0
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d017      	beq.n	8010e9e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	6a1a      	ldr	r2, [r3, #32]
 8010e74:	f241 1311 	movw	r3, #4369	; 0x1111
 8010e78:	4013      	ands	r3, r2
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d10f      	bne.n	8010e9e <HAL_TIM_PWM_Stop+0x66>
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	6a1a      	ldr	r2, [r3, #32]
 8010e84:	f240 4344 	movw	r3, #1092	; 0x444
 8010e88:	4013      	ands	r3, r2
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d107      	bne.n	8010e9e <HAL_TIM_PWM_Stop+0x66>
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8010e9c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	6a1a      	ldr	r2, [r3, #32]
 8010ea4:	f241 1311 	movw	r3, #4369	; 0x1111
 8010ea8:	4013      	ands	r3, r2
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d10f      	bne.n	8010ece <HAL_TIM_PWM_Stop+0x96>
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	6a1a      	ldr	r2, [r3, #32]
 8010eb4:	f240 4344 	movw	r3, #1092	; 0x444
 8010eb8:	4013      	ands	r3, r2
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d107      	bne.n	8010ece <HAL_TIM_PWM_Stop+0x96>
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	681a      	ldr	r2, [r3, #0]
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	f022 0201 	bic.w	r2, r2, #1
 8010ecc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8010ece:	683b      	ldr	r3, [r7, #0]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d104      	bne.n	8010ede <HAL_TIM_PWM_Stop+0xa6>
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	2201      	movs	r2, #1
 8010ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010edc:	e013      	b.n	8010f06 <HAL_TIM_PWM_Stop+0xce>
 8010ede:	683b      	ldr	r3, [r7, #0]
 8010ee0:	2b04      	cmp	r3, #4
 8010ee2:	d104      	bne.n	8010eee <HAL_TIM_PWM_Stop+0xb6>
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	2201      	movs	r2, #1
 8010ee8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010eec:	e00b      	b.n	8010f06 <HAL_TIM_PWM_Stop+0xce>
 8010eee:	683b      	ldr	r3, [r7, #0]
 8010ef0:	2b08      	cmp	r3, #8
 8010ef2:	d104      	bne.n	8010efe <HAL_TIM_PWM_Stop+0xc6>
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	2201      	movs	r2, #1
 8010ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010efc:	e003      	b.n	8010f06 <HAL_TIM_PWM_Stop+0xce>
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	2201      	movs	r2, #1
 8010f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8010f06:	2300      	movs	r3, #0
}
 8010f08:	4618      	mov	r0, r3
 8010f0a:	3708      	adds	r7, #8
 8010f0c:	46bd      	mov	sp, r7
 8010f0e:	bd80      	pop	{r7, pc}
 8010f10:	40010000 	.word	0x40010000
 8010f14:	40010400 	.word	0x40010400

08010f18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010f18:	b580      	push	{r7, lr}
 8010f1a:	b082      	sub	sp, #8
 8010f1c:	af00      	add	r7, sp, #0
 8010f1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	691b      	ldr	r3, [r3, #16]
 8010f26:	f003 0302 	and.w	r3, r3, #2
 8010f2a:	2b02      	cmp	r3, #2
 8010f2c:	d122      	bne.n	8010f74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	68db      	ldr	r3, [r3, #12]
 8010f34:	f003 0302 	and.w	r3, r3, #2
 8010f38:	2b02      	cmp	r3, #2
 8010f3a:	d11b      	bne.n	8010f74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	f06f 0202 	mvn.w	r2, #2
 8010f44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	2201      	movs	r2, #1
 8010f4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	699b      	ldr	r3, [r3, #24]
 8010f52:	f003 0303 	and.w	r3, r3, #3
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d003      	beq.n	8010f62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010f5a:	6878      	ldr	r0, [r7, #4]
 8010f5c:	f000 fa77 	bl	801144e <HAL_TIM_IC_CaptureCallback>
 8010f60:	e005      	b.n	8010f6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010f62:	6878      	ldr	r0, [r7, #4]
 8010f64:	f000 fa69 	bl	801143a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010f68:	6878      	ldr	r0, [r7, #4]
 8010f6a:	f000 fa7a 	bl	8011462 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	2200      	movs	r2, #0
 8010f72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	691b      	ldr	r3, [r3, #16]
 8010f7a:	f003 0304 	and.w	r3, r3, #4
 8010f7e:	2b04      	cmp	r3, #4
 8010f80:	d122      	bne.n	8010fc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	68db      	ldr	r3, [r3, #12]
 8010f88:	f003 0304 	and.w	r3, r3, #4
 8010f8c:	2b04      	cmp	r3, #4
 8010f8e:	d11b      	bne.n	8010fc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	f06f 0204 	mvn.w	r2, #4
 8010f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	2202      	movs	r2, #2
 8010f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	699b      	ldr	r3, [r3, #24]
 8010fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d003      	beq.n	8010fb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010fae:	6878      	ldr	r0, [r7, #4]
 8010fb0:	f000 fa4d 	bl	801144e <HAL_TIM_IC_CaptureCallback>
 8010fb4:	e005      	b.n	8010fc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010fb6:	6878      	ldr	r0, [r7, #4]
 8010fb8:	f000 fa3f 	bl	801143a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010fbc:	6878      	ldr	r0, [r7, #4]
 8010fbe:	f000 fa50 	bl	8011462 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	2200      	movs	r2, #0
 8010fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	691b      	ldr	r3, [r3, #16]
 8010fce:	f003 0308 	and.w	r3, r3, #8
 8010fd2:	2b08      	cmp	r3, #8
 8010fd4:	d122      	bne.n	801101c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	68db      	ldr	r3, [r3, #12]
 8010fdc:	f003 0308 	and.w	r3, r3, #8
 8010fe0:	2b08      	cmp	r3, #8
 8010fe2:	d11b      	bne.n	801101c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	f06f 0208 	mvn.w	r2, #8
 8010fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	2204      	movs	r2, #4
 8010ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	69db      	ldr	r3, [r3, #28]
 8010ffa:	f003 0303 	and.w	r3, r3, #3
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d003      	beq.n	801100a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011002:	6878      	ldr	r0, [r7, #4]
 8011004:	f000 fa23 	bl	801144e <HAL_TIM_IC_CaptureCallback>
 8011008:	e005      	b.n	8011016 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801100a:	6878      	ldr	r0, [r7, #4]
 801100c:	f000 fa15 	bl	801143a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011010:	6878      	ldr	r0, [r7, #4]
 8011012:	f000 fa26 	bl	8011462 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	2200      	movs	r2, #0
 801101a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	691b      	ldr	r3, [r3, #16]
 8011022:	f003 0310 	and.w	r3, r3, #16
 8011026:	2b10      	cmp	r3, #16
 8011028:	d122      	bne.n	8011070 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	68db      	ldr	r3, [r3, #12]
 8011030:	f003 0310 	and.w	r3, r3, #16
 8011034:	2b10      	cmp	r3, #16
 8011036:	d11b      	bne.n	8011070 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	f06f 0210 	mvn.w	r2, #16
 8011040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	2208      	movs	r2, #8
 8011046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	69db      	ldr	r3, [r3, #28]
 801104e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011052:	2b00      	cmp	r3, #0
 8011054:	d003      	beq.n	801105e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011056:	6878      	ldr	r0, [r7, #4]
 8011058:	f000 f9f9 	bl	801144e <HAL_TIM_IC_CaptureCallback>
 801105c:	e005      	b.n	801106a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801105e:	6878      	ldr	r0, [r7, #4]
 8011060:	f000 f9eb 	bl	801143a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011064:	6878      	ldr	r0, [r7, #4]
 8011066:	f000 f9fc 	bl	8011462 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	2200      	movs	r2, #0
 801106e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	691b      	ldr	r3, [r3, #16]
 8011076:	f003 0301 	and.w	r3, r3, #1
 801107a:	2b01      	cmp	r3, #1
 801107c:	d10e      	bne.n	801109c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	68db      	ldr	r3, [r3, #12]
 8011084:	f003 0301 	and.w	r3, r3, #1
 8011088:	2b01      	cmp	r3, #1
 801108a:	d107      	bne.n	801109c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	f06f 0201 	mvn.w	r2, #1
 8011094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8011096:	6878      	ldr	r0, [r7, #4]
 8011098:	f7f1 fd5c 	bl	8002b54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	691b      	ldr	r3, [r3, #16]
 80110a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80110a6:	2b80      	cmp	r3, #128	; 0x80
 80110a8:	d10e      	bne.n	80110c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	68db      	ldr	r3, [r3, #12]
 80110b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80110b4:	2b80      	cmp	r3, #128	; 0x80
 80110b6:	d107      	bne.n	80110c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80110c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80110c2:	6878      	ldr	r0, [r7, #4]
 80110c4:	f000 fd78 	bl	8011bb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	691b      	ldr	r3, [r3, #16]
 80110ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80110d2:	2b40      	cmp	r3, #64	; 0x40
 80110d4:	d10e      	bne.n	80110f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	68db      	ldr	r3, [r3, #12]
 80110dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80110e0:	2b40      	cmp	r3, #64	; 0x40
 80110e2:	d107      	bne.n	80110f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80110ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80110ee:	6878      	ldr	r0, [r7, #4]
 80110f0:	f000 f9c1 	bl	8011476 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	691b      	ldr	r3, [r3, #16]
 80110fa:	f003 0320 	and.w	r3, r3, #32
 80110fe:	2b20      	cmp	r3, #32
 8011100:	d10e      	bne.n	8011120 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	68db      	ldr	r3, [r3, #12]
 8011108:	f003 0320 	and.w	r3, r3, #32
 801110c:	2b20      	cmp	r3, #32
 801110e:	d107      	bne.n	8011120 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	f06f 0220 	mvn.w	r2, #32
 8011118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801111a:	6878      	ldr	r0, [r7, #4]
 801111c:	f000 fd42 	bl	8011ba4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8011120:	bf00      	nop
 8011122:	3708      	adds	r7, #8
 8011124:	46bd      	mov	sp, r7
 8011126:	bd80      	pop	{r7, pc}

08011128 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8011128:	b580      	push	{r7, lr}
 801112a:	b086      	sub	sp, #24
 801112c:	af00      	add	r7, sp, #0
 801112e:	60f8      	str	r0, [r7, #12]
 8011130:	60b9      	str	r1, [r7, #8]
 8011132:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011134:	2300      	movs	r3, #0
 8011136:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801113e:	2b01      	cmp	r3, #1
 8011140:	d101      	bne.n	8011146 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8011142:	2302      	movs	r3, #2
 8011144:	e0ae      	b.n	80112a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	2201      	movs	r2, #1
 801114a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	2b0c      	cmp	r3, #12
 8011152:	f200 809f 	bhi.w	8011294 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8011156:	a201      	add	r2, pc, #4	; (adr r2, 801115c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8011158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801115c:	08011191 	.word	0x08011191
 8011160:	08011295 	.word	0x08011295
 8011164:	08011295 	.word	0x08011295
 8011168:	08011295 	.word	0x08011295
 801116c:	080111d1 	.word	0x080111d1
 8011170:	08011295 	.word	0x08011295
 8011174:	08011295 	.word	0x08011295
 8011178:	08011295 	.word	0x08011295
 801117c:	08011213 	.word	0x08011213
 8011180:	08011295 	.word	0x08011295
 8011184:	08011295 	.word	0x08011295
 8011188:	08011295 	.word	0x08011295
 801118c:	08011253 	.word	0x08011253
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	68b9      	ldr	r1, [r7, #8]
 8011196:	4618      	mov	r0, r3
 8011198:	f000 fa18 	bl	80115cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	699a      	ldr	r2, [r3, #24]
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	f042 0208 	orr.w	r2, r2, #8
 80111aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	699a      	ldr	r2, [r3, #24]
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	f022 0204 	bic.w	r2, r2, #4
 80111ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	6999      	ldr	r1, [r3, #24]
 80111c2:	68bb      	ldr	r3, [r7, #8]
 80111c4:	691a      	ldr	r2, [r3, #16]
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	430a      	orrs	r2, r1
 80111cc:	619a      	str	r2, [r3, #24]
      break;
 80111ce:	e064      	b.n	801129a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	68b9      	ldr	r1, [r7, #8]
 80111d6:	4618      	mov	r0, r3
 80111d8:	f000 fa68 	bl	80116ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	699a      	ldr	r2, [r3, #24]
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80111ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	699a      	ldr	r2, [r3, #24]
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80111fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	6999      	ldr	r1, [r3, #24]
 8011202:	68bb      	ldr	r3, [r7, #8]
 8011204:	691b      	ldr	r3, [r3, #16]
 8011206:	021a      	lsls	r2, r3, #8
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	430a      	orrs	r2, r1
 801120e:	619a      	str	r2, [r3, #24]
      break;
 8011210:	e043      	b.n	801129a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	68b9      	ldr	r1, [r7, #8]
 8011218:	4618      	mov	r0, r3
 801121a:	f000 fabd 	bl	8011798 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	69da      	ldr	r2, [r3, #28]
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	f042 0208 	orr.w	r2, r2, #8
 801122c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	69da      	ldr	r2, [r3, #28]
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	f022 0204 	bic.w	r2, r2, #4
 801123c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	69d9      	ldr	r1, [r3, #28]
 8011244:	68bb      	ldr	r3, [r7, #8]
 8011246:	691a      	ldr	r2, [r3, #16]
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	430a      	orrs	r2, r1
 801124e:	61da      	str	r2, [r3, #28]
      break;
 8011250:	e023      	b.n	801129a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	68b9      	ldr	r1, [r7, #8]
 8011258:	4618      	mov	r0, r3
 801125a:	f000 fb11 	bl	8011880 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	69da      	ldr	r2, [r3, #28]
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801126c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	69da      	ldr	r2, [r3, #28]
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801127c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	69d9      	ldr	r1, [r3, #28]
 8011284:	68bb      	ldr	r3, [r7, #8]
 8011286:	691b      	ldr	r3, [r3, #16]
 8011288:	021a      	lsls	r2, r3, #8
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	430a      	orrs	r2, r1
 8011290:	61da      	str	r2, [r3, #28]
      break;
 8011292:	e002      	b.n	801129a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8011294:	2301      	movs	r3, #1
 8011296:	75fb      	strb	r3, [r7, #23]
      break;
 8011298:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	2200      	movs	r2, #0
 801129e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80112a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80112a4:	4618      	mov	r0, r3
 80112a6:	3718      	adds	r7, #24
 80112a8:	46bd      	mov	sp, r7
 80112aa:	bd80      	pop	{r7, pc}

080112ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80112ac:	b580      	push	{r7, lr}
 80112ae:	b084      	sub	sp, #16
 80112b0:	af00      	add	r7, sp, #0
 80112b2:	6078      	str	r0, [r7, #4]
 80112b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80112b6:	2300      	movs	r3, #0
 80112b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80112c0:	2b01      	cmp	r3, #1
 80112c2:	d101      	bne.n	80112c8 <HAL_TIM_ConfigClockSource+0x1c>
 80112c4:	2302      	movs	r3, #2
 80112c6:	e0b4      	b.n	8011432 <HAL_TIM_ConfigClockSource+0x186>
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	2201      	movs	r2, #1
 80112cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	2202      	movs	r2, #2
 80112d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	689b      	ldr	r3, [r3, #8]
 80112de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80112e0:	68bb      	ldr	r3, [r7, #8]
 80112e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80112e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80112e8:	68bb      	ldr	r3, [r7, #8]
 80112ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80112ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	68ba      	ldr	r2, [r7, #8]
 80112f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80112f8:	683b      	ldr	r3, [r7, #0]
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011300:	d03e      	beq.n	8011380 <HAL_TIM_ConfigClockSource+0xd4>
 8011302:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011306:	f200 8087 	bhi.w	8011418 <HAL_TIM_ConfigClockSource+0x16c>
 801130a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801130e:	f000 8086 	beq.w	801141e <HAL_TIM_ConfigClockSource+0x172>
 8011312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011316:	d87f      	bhi.n	8011418 <HAL_TIM_ConfigClockSource+0x16c>
 8011318:	2b70      	cmp	r3, #112	; 0x70
 801131a:	d01a      	beq.n	8011352 <HAL_TIM_ConfigClockSource+0xa6>
 801131c:	2b70      	cmp	r3, #112	; 0x70
 801131e:	d87b      	bhi.n	8011418 <HAL_TIM_ConfigClockSource+0x16c>
 8011320:	2b60      	cmp	r3, #96	; 0x60
 8011322:	d050      	beq.n	80113c6 <HAL_TIM_ConfigClockSource+0x11a>
 8011324:	2b60      	cmp	r3, #96	; 0x60
 8011326:	d877      	bhi.n	8011418 <HAL_TIM_ConfigClockSource+0x16c>
 8011328:	2b50      	cmp	r3, #80	; 0x50
 801132a:	d03c      	beq.n	80113a6 <HAL_TIM_ConfigClockSource+0xfa>
 801132c:	2b50      	cmp	r3, #80	; 0x50
 801132e:	d873      	bhi.n	8011418 <HAL_TIM_ConfigClockSource+0x16c>
 8011330:	2b40      	cmp	r3, #64	; 0x40
 8011332:	d058      	beq.n	80113e6 <HAL_TIM_ConfigClockSource+0x13a>
 8011334:	2b40      	cmp	r3, #64	; 0x40
 8011336:	d86f      	bhi.n	8011418 <HAL_TIM_ConfigClockSource+0x16c>
 8011338:	2b30      	cmp	r3, #48	; 0x30
 801133a:	d064      	beq.n	8011406 <HAL_TIM_ConfigClockSource+0x15a>
 801133c:	2b30      	cmp	r3, #48	; 0x30
 801133e:	d86b      	bhi.n	8011418 <HAL_TIM_ConfigClockSource+0x16c>
 8011340:	2b20      	cmp	r3, #32
 8011342:	d060      	beq.n	8011406 <HAL_TIM_ConfigClockSource+0x15a>
 8011344:	2b20      	cmp	r3, #32
 8011346:	d867      	bhi.n	8011418 <HAL_TIM_ConfigClockSource+0x16c>
 8011348:	2b00      	cmp	r3, #0
 801134a:	d05c      	beq.n	8011406 <HAL_TIM_ConfigClockSource+0x15a>
 801134c:	2b10      	cmp	r3, #16
 801134e:	d05a      	beq.n	8011406 <HAL_TIM_ConfigClockSource+0x15a>
 8011350:	e062      	b.n	8011418 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	6818      	ldr	r0, [r3, #0]
 8011356:	683b      	ldr	r3, [r7, #0]
 8011358:	6899      	ldr	r1, [r3, #8]
 801135a:	683b      	ldr	r3, [r7, #0]
 801135c:	685a      	ldr	r2, [r3, #4]
 801135e:	683b      	ldr	r3, [r7, #0]
 8011360:	68db      	ldr	r3, [r3, #12]
 8011362:	f000 fb5d 	bl	8011a20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	689b      	ldr	r3, [r3, #8]
 801136c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801136e:	68bb      	ldr	r3, [r7, #8]
 8011370:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8011374:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	68ba      	ldr	r2, [r7, #8]
 801137c:	609a      	str	r2, [r3, #8]
      break;
 801137e:	e04f      	b.n	8011420 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	6818      	ldr	r0, [r3, #0]
 8011384:	683b      	ldr	r3, [r7, #0]
 8011386:	6899      	ldr	r1, [r3, #8]
 8011388:	683b      	ldr	r3, [r7, #0]
 801138a:	685a      	ldr	r2, [r3, #4]
 801138c:	683b      	ldr	r3, [r7, #0]
 801138e:	68db      	ldr	r3, [r3, #12]
 8011390:	f000 fb46 	bl	8011a20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	689a      	ldr	r2, [r3, #8]
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80113a2:	609a      	str	r2, [r3, #8]
      break;
 80113a4:	e03c      	b.n	8011420 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	6818      	ldr	r0, [r3, #0]
 80113aa:	683b      	ldr	r3, [r7, #0]
 80113ac:	6859      	ldr	r1, [r3, #4]
 80113ae:	683b      	ldr	r3, [r7, #0]
 80113b0:	68db      	ldr	r3, [r3, #12]
 80113b2:	461a      	mov	r2, r3
 80113b4:	f000 faba 	bl	801192c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	2150      	movs	r1, #80	; 0x50
 80113be:	4618      	mov	r0, r3
 80113c0:	f000 fb13 	bl	80119ea <TIM_ITRx_SetConfig>
      break;
 80113c4:	e02c      	b.n	8011420 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	6818      	ldr	r0, [r3, #0]
 80113ca:	683b      	ldr	r3, [r7, #0]
 80113cc:	6859      	ldr	r1, [r3, #4]
 80113ce:	683b      	ldr	r3, [r7, #0]
 80113d0:	68db      	ldr	r3, [r3, #12]
 80113d2:	461a      	mov	r2, r3
 80113d4:	f000 fad9 	bl	801198a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	2160      	movs	r1, #96	; 0x60
 80113de:	4618      	mov	r0, r3
 80113e0:	f000 fb03 	bl	80119ea <TIM_ITRx_SetConfig>
      break;
 80113e4:	e01c      	b.n	8011420 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	6818      	ldr	r0, [r3, #0]
 80113ea:	683b      	ldr	r3, [r7, #0]
 80113ec:	6859      	ldr	r1, [r3, #4]
 80113ee:	683b      	ldr	r3, [r7, #0]
 80113f0:	68db      	ldr	r3, [r3, #12]
 80113f2:	461a      	mov	r2, r3
 80113f4:	f000 fa9a 	bl	801192c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	2140      	movs	r1, #64	; 0x40
 80113fe:	4618      	mov	r0, r3
 8011400:	f000 faf3 	bl	80119ea <TIM_ITRx_SetConfig>
      break;
 8011404:	e00c      	b.n	8011420 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	681a      	ldr	r2, [r3, #0]
 801140a:	683b      	ldr	r3, [r7, #0]
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	4619      	mov	r1, r3
 8011410:	4610      	mov	r0, r2
 8011412:	f000 faea 	bl	80119ea <TIM_ITRx_SetConfig>
      break;
 8011416:	e003      	b.n	8011420 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8011418:	2301      	movs	r3, #1
 801141a:	73fb      	strb	r3, [r7, #15]
      break;
 801141c:	e000      	b.n	8011420 <HAL_TIM_ConfigClockSource+0x174>
      break;
 801141e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	2201      	movs	r2, #1
 8011424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	2200      	movs	r2, #0
 801142c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8011430:	7bfb      	ldrb	r3, [r7, #15]
}
 8011432:	4618      	mov	r0, r3
 8011434:	3710      	adds	r7, #16
 8011436:	46bd      	mov	sp, r7
 8011438:	bd80      	pop	{r7, pc}

0801143a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801143a:	b480      	push	{r7}
 801143c:	b083      	sub	sp, #12
 801143e:	af00      	add	r7, sp, #0
 8011440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8011442:	bf00      	nop
 8011444:	370c      	adds	r7, #12
 8011446:	46bd      	mov	sp, r7
 8011448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801144c:	4770      	bx	lr

0801144e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801144e:	b480      	push	{r7}
 8011450:	b083      	sub	sp, #12
 8011452:	af00      	add	r7, sp, #0
 8011454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8011456:	bf00      	nop
 8011458:	370c      	adds	r7, #12
 801145a:	46bd      	mov	sp, r7
 801145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011460:	4770      	bx	lr

08011462 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8011462:	b480      	push	{r7}
 8011464:	b083      	sub	sp, #12
 8011466:	af00      	add	r7, sp, #0
 8011468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801146a:	bf00      	nop
 801146c:	370c      	adds	r7, #12
 801146e:	46bd      	mov	sp, r7
 8011470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011474:	4770      	bx	lr

08011476 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8011476:	b480      	push	{r7}
 8011478:	b083      	sub	sp, #12
 801147a:	af00      	add	r7, sp, #0
 801147c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801147e:	bf00      	nop
 8011480:	370c      	adds	r7, #12
 8011482:	46bd      	mov	sp, r7
 8011484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011488:	4770      	bx	lr
	...

0801148c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801148c:	b480      	push	{r7}
 801148e:	b085      	sub	sp, #20
 8011490:	af00      	add	r7, sp, #0
 8011492:	6078      	str	r0, [r7, #4]
 8011494:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	4a40      	ldr	r2, [pc, #256]	; (80115a0 <TIM_Base_SetConfig+0x114>)
 80114a0:	4293      	cmp	r3, r2
 80114a2:	d013      	beq.n	80114cc <TIM_Base_SetConfig+0x40>
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80114aa:	d00f      	beq.n	80114cc <TIM_Base_SetConfig+0x40>
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	4a3d      	ldr	r2, [pc, #244]	; (80115a4 <TIM_Base_SetConfig+0x118>)
 80114b0:	4293      	cmp	r3, r2
 80114b2:	d00b      	beq.n	80114cc <TIM_Base_SetConfig+0x40>
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	4a3c      	ldr	r2, [pc, #240]	; (80115a8 <TIM_Base_SetConfig+0x11c>)
 80114b8:	4293      	cmp	r3, r2
 80114ba:	d007      	beq.n	80114cc <TIM_Base_SetConfig+0x40>
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	4a3b      	ldr	r2, [pc, #236]	; (80115ac <TIM_Base_SetConfig+0x120>)
 80114c0:	4293      	cmp	r3, r2
 80114c2:	d003      	beq.n	80114cc <TIM_Base_SetConfig+0x40>
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	4a3a      	ldr	r2, [pc, #232]	; (80115b0 <TIM_Base_SetConfig+0x124>)
 80114c8:	4293      	cmp	r3, r2
 80114ca:	d108      	bne.n	80114de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80114d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80114d4:	683b      	ldr	r3, [r7, #0]
 80114d6:	685b      	ldr	r3, [r3, #4]
 80114d8:	68fa      	ldr	r2, [r7, #12]
 80114da:	4313      	orrs	r3, r2
 80114dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	4a2f      	ldr	r2, [pc, #188]	; (80115a0 <TIM_Base_SetConfig+0x114>)
 80114e2:	4293      	cmp	r3, r2
 80114e4:	d02b      	beq.n	801153e <TIM_Base_SetConfig+0xb2>
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80114ec:	d027      	beq.n	801153e <TIM_Base_SetConfig+0xb2>
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	4a2c      	ldr	r2, [pc, #176]	; (80115a4 <TIM_Base_SetConfig+0x118>)
 80114f2:	4293      	cmp	r3, r2
 80114f4:	d023      	beq.n	801153e <TIM_Base_SetConfig+0xb2>
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	4a2b      	ldr	r2, [pc, #172]	; (80115a8 <TIM_Base_SetConfig+0x11c>)
 80114fa:	4293      	cmp	r3, r2
 80114fc:	d01f      	beq.n	801153e <TIM_Base_SetConfig+0xb2>
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	4a2a      	ldr	r2, [pc, #168]	; (80115ac <TIM_Base_SetConfig+0x120>)
 8011502:	4293      	cmp	r3, r2
 8011504:	d01b      	beq.n	801153e <TIM_Base_SetConfig+0xb2>
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	4a29      	ldr	r2, [pc, #164]	; (80115b0 <TIM_Base_SetConfig+0x124>)
 801150a:	4293      	cmp	r3, r2
 801150c:	d017      	beq.n	801153e <TIM_Base_SetConfig+0xb2>
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	4a28      	ldr	r2, [pc, #160]	; (80115b4 <TIM_Base_SetConfig+0x128>)
 8011512:	4293      	cmp	r3, r2
 8011514:	d013      	beq.n	801153e <TIM_Base_SetConfig+0xb2>
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	4a27      	ldr	r2, [pc, #156]	; (80115b8 <TIM_Base_SetConfig+0x12c>)
 801151a:	4293      	cmp	r3, r2
 801151c:	d00f      	beq.n	801153e <TIM_Base_SetConfig+0xb2>
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	4a26      	ldr	r2, [pc, #152]	; (80115bc <TIM_Base_SetConfig+0x130>)
 8011522:	4293      	cmp	r3, r2
 8011524:	d00b      	beq.n	801153e <TIM_Base_SetConfig+0xb2>
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	4a25      	ldr	r2, [pc, #148]	; (80115c0 <TIM_Base_SetConfig+0x134>)
 801152a:	4293      	cmp	r3, r2
 801152c:	d007      	beq.n	801153e <TIM_Base_SetConfig+0xb2>
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	4a24      	ldr	r2, [pc, #144]	; (80115c4 <TIM_Base_SetConfig+0x138>)
 8011532:	4293      	cmp	r3, r2
 8011534:	d003      	beq.n	801153e <TIM_Base_SetConfig+0xb2>
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	4a23      	ldr	r2, [pc, #140]	; (80115c8 <TIM_Base_SetConfig+0x13c>)
 801153a:	4293      	cmp	r3, r2
 801153c:	d108      	bne.n	8011550 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011544:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011546:	683b      	ldr	r3, [r7, #0]
 8011548:	68db      	ldr	r3, [r3, #12]
 801154a:	68fa      	ldr	r2, [r7, #12]
 801154c:	4313      	orrs	r3, r2
 801154e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011556:	683b      	ldr	r3, [r7, #0]
 8011558:	695b      	ldr	r3, [r3, #20]
 801155a:	4313      	orrs	r3, r2
 801155c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	68fa      	ldr	r2, [r7, #12]
 8011562:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011564:	683b      	ldr	r3, [r7, #0]
 8011566:	689a      	ldr	r2, [r3, #8]
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801156c:	683b      	ldr	r3, [r7, #0]
 801156e:	681a      	ldr	r2, [r3, #0]
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	4a0a      	ldr	r2, [pc, #40]	; (80115a0 <TIM_Base_SetConfig+0x114>)
 8011578:	4293      	cmp	r3, r2
 801157a:	d003      	beq.n	8011584 <TIM_Base_SetConfig+0xf8>
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	4a0c      	ldr	r2, [pc, #48]	; (80115b0 <TIM_Base_SetConfig+0x124>)
 8011580:	4293      	cmp	r3, r2
 8011582:	d103      	bne.n	801158c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011584:	683b      	ldr	r3, [r7, #0]
 8011586:	691a      	ldr	r2, [r3, #16]
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	2201      	movs	r2, #1
 8011590:	615a      	str	r2, [r3, #20]
}
 8011592:	bf00      	nop
 8011594:	3714      	adds	r7, #20
 8011596:	46bd      	mov	sp, r7
 8011598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801159c:	4770      	bx	lr
 801159e:	bf00      	nop
 80115a0:	40010000 	.word	0x40010000
 80115a4:	40000400 	.word	0x40000400
 80115a8:	40000800 	.word	0x40000800
 80115ac:	40000c00 	.word	0x40000c00
 80115b0:	40010400 	.word	0x40010400
 80115b4:	40014000 	.word	0x40014000
 80115b8:	40014400 	.word	0x40014400
 80115bc:	40014800 	.word	0x40014800
 80115c0:	40001800 	.word	0x40001800
 80115c4:	40001c00 	.word	0x40001c00
 80115c8:	40002000 	.word	0x40002000

080115cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80115cc:	b480      	push	{r7}
 80115ce:	b087      	sub	sp, #28
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	6078      	str	r0, [r7, #4]
 80115d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	6a1b      	ldr	r3, [r3, #32]
 80115da:	f023 0201 	bic.w	r2, r3, #1
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	6a1b      	ldr	r3, [r3, #32]
 80115e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	685b      	ldr	r3, [r3, #4]
 80115ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	699b      	ldr	r3, [r3, #24]
 80115f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80115fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	f023 0303 	bic.w	r3, r3, #3
 8011602:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011604:	683b      	ldr	r3, [r7, #0]
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	68fa      	ldr	r2, [r7, #12]
 801160a:	4313      	orrs	r3, r2
 801160c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801160e:	697b      	ldr	r3, [r7, #20]
 8011610:	f023 0302 	bic.w	r3, r3, #2
 8011614:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8011616:	683b      	ldr	r3, [r7, #0]
 8011618:	689b      	ldr	r3, [r3, #8]
 801161a:	697a      	ldr	r2, [r7, #20]
 801161c:	4313      	orrs	r3, r2
 801161e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	4a20      	ldr	r2, [pc, #128]	; (80116a4 <TIM_OC1_SetConfig+0xd8>)
 8011624:	4293      	cmp	r3, r2
 8011626:	d003      	beq.n	8011630 <TIM_OC1_SetConfig+0x64>
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	4a1f      	ldr	r2, [pc, #124]	; (80116a8 <TIM_OC1_SetConfig+0xdc>)
 801162c:	4293      	cmp	r3, r2
 801162e:	d10c      	bne.n	801164a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8011630:	697b      	ldr	r3, [r7, #20]
 8011632:	f023 0308 	bic.w	r3, r3, #8
 8011636:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8011638:	683b      	ldr	r3, [r7, #0]
 801163a:	68db      	ldr	r3, [r3, #12]
 801163c:	697a      	ldr	r2, [r7, #20]
 801163e:	4313      	orrs	r3, r2
 8011640:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8011642:	697b      	ldr	r3, [r7, #20]
 8011644:	f023 0304 	bic.w	r3, r3, #4
 8011648:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	4a15      	ldr	r2, [pc, #84]	; (80116a4 <TIM_OC1_SetConfig+0xd8>)
 801164e:	4293      	cmp	r3, r2
 8011650:	d003      	beq.n	801165a <TIM_OC1_SetConfig+0x8e>
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	4a14      	ldr	r2, [pc, #80]	; (80116a8 <TIM_OC1_SetConfig+0xdc>)
 8011656:	4293      	cmp	r3, r2
 8011658:	d111      	bne.n	801167e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801165a:	693b      	ldr	r3, [r7, #16]
 801165c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011660:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8011662:	693b      	ldr	r3, [r7, #16]
 8011664:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011668:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801166a:	683b      	ldr	r3, [r7, #0]
 801166c:	695b      	ldr	r3, [r3, #20]
 801166e:	693a      	ldr	r2, [r7, #16]
 8011670:	4313      	orrs	r3, r2
 8011672:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8011674:	683b      	ldr	r3, [r7, #0]
 8011676:	699b      	ldr	r3, [r3, #24]
 8011678:	693a      	ldr	r2, [r7, #16]
 801167a:	4313      	orrs	r3, r2
 801167c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	693a      	ldr	r2, [r7, #16]
 8011682:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	68fa      	ldr	r2, [r7, #12]
 8011688:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801168a:	683b      	ldr	r3, [r7, #0]
 801168c:	685a      	ldr	r2, [r3, #4]
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	697a      	ldr	r2, [r7, #20]
 8011696:	621a      	str	r2, [r3, #32]
}
 8011698:	bf00      	nop
 801169a:	371c      	adds	r7, #28
 801169c:	46bd      	mov	sp, r7
 801169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116a2:	4770      	bx	lr
 80116a4:	40010000 	.word	0x40010000
 80116a8:	40010400 	.word	0x40010400

080116ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80116ac:	b480      	push	{r7}
 80116ae:	b087      	sub	sp, #28
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	6078      	str	r0, [r7, #4]
 80116b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	6a1b      	ldr	r3, [r3, #32]
 80116ba:	f023 0210 	bic.w	r2, r3, #16
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	6a1b      	ldr	r3, [r3, #32]
 80116c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	685b      	ldr	r3, [r3, #4]
 80116cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	699b      	ldr	r3, [r3, #24]
 80116d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80116da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80116e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80116e4:	683b      	ldr	r3, [r7, #0]
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	021b      	lsls	r3, r3, #8
 80116ea:	68fa      	ldr	r2, [r7, #12]
 80116ec:	4313      	orrs	r3, r2
 80116ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80116f0:	697b      	ldr	r3, [r7, #20]
 80116f2:	f023 0320 	bic.w	r3, r3, #32
 80116f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80116f8:	683b      	ldr	r3, [r7, #0]
 80116fa:	689b      	ldr	r3, [r3, #8]
 80116fc:	011b      	lsls	r3, r3, #4
 80116fe:	697a      	ldr	r2, [r7, #20]
 8011700:	4313      	orrs	r3, r2
 8011702:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	4a22      	ldr	r2, [pc, #136]	; (8011790 <TIM_OC2_SetConfig+0xe4>)
 8011708:	4293      	cmp	r3, r2
 801170a:	d003      	beq.n	8011714 <TIM_OC2_SetConfig+0x68>
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	4a21      	ldr	r2, [pc, #132]	; (8011794 <TIM_OC2_SetConfig+0xe8>)
 8011710:	4293      	cmp	r3, r2
 8011712:	d10d      	bne.n	8011730 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8011714:	697b      	ldr	r3, [r7, #20]
 8011716:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801171a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801171c:	683b      	ldr	r3, [r7, #0]
 801171e:	68db      	ldr	r3, [r3, #12]
 8011720:	011b      	lsls	r3, r3, #4
 8011722:	697a      	ldr	r2, [r7, #20]
 8011724:	4313      	orrs	r3, r2
 8011726:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8011728:	697b      	ldr	r3, [r7, #20]
 801172a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801172e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	4a17      	ldr	r2, [pc, #92]	; (8011790 <TIM_OC2_SetConfig+0xe4>)
 8011734:	4293      	cmp	r3, r2
 8011736:	d003      	beq.n	8011740 <TIM_OC2_SetConfig+0x94>
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	4a16      	ldr	r2, [pc, #88]	; (8011794 <TIM_OC2_SetConfig+0xe8>)
 801173c:	4293      	cmp	r3, r2
 801173e:	d113      	bne.n	8011768 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8011740:	693b      	ldr	r3, [r7, #16]
 8011742:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011746:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8011748:	693b      	ldr	r3, [r7, #16]
 801174a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801174e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8011750:	683b      	ldr	r3, [r7, #0]
 8011752:	695b      	ldr	r3, [r3, #20]
 8011754:	009b      	lsls	r3, r3, #2
 8011756:	693a      	ldr	r2, [r7, #16]
 8011758:	4313      	orrs	r3, r2
 801175a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801175c:	683b      	ldr	r3, [r7, #0]
 801175e:	699b      	ldr	r3, [r3, #24]
 8011760:	009b      	lsls	r3, r3, #2
 8011762:	693a      	ldr	r2, [r7, #16]
 8011764:	4313      	orrs	r3, r2
 8011766:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	693a      	ldr	r2, [r7, #16]
 801176c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	68fa      	ldr	r2, [r7, #12]
 8011772:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8011774:	683b      	ldr	r3, [r7, #0]
 8011776:	685a      	ldr	r2, [r3, #4]
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	697a      	ldr	r2, [r7, #20]
 8011780:	621a      	str	r2, [r3, #32]
}
 8011782:	bf00      	nop
 8011784:	371c      	adds	r7, #28
 8011786:	46bd      	mov	sp, r7
 8011788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801178c:	4770      	bx	lr
 801178e:	bf00      	nop
 8011790:	40010000 	.word	0x40010000
 8011794:	40010400 	.word	0x40010400

08011798 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011798:	b480      	push	{r7}
 801179a:	b087      	sub	sp, #28
 801179c:	af00      	add	r7, sp, #0
 801179e:	6078      	str	r0, [r7, #4]
 80117a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	6a1b      	ldr	r3, [r3, #32]
 80117a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	6a1b      	ldr	r3, [r3, #32]
 80117b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	685b      	ldr	r3, [r3, #4]
 80117b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	69db      	ldr	r3, [r3, #28]
 80117be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80117c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	f023 0303 	bic.w	r3, r3, #3
 80117ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80117d0:	683b      	ldr	r3, [r7, #0]
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	68fa      	ldr	r2, [r7, #12]
 80117d6:	4313      	orrs	r3, r2
 80117d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80117da:	697b      	ldr	r3, [r7, #20]
 80117dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80117e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80117e2:	683b      	ldr	r3, [r7, #0]
 80117e4:	689b      	ldr	r3, [r3, #8]
 80117e6:	021b      	lsls	r3, r3, #8
 80117e8:	697a      	ldr	r2, [r7, #20]
 80117ea:	4313      	orrs	r3, r2
 80117ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	4a21      	ldr	r2, [pc, #132]	; (8011878 <TIM_OC3_SetConfig+0xe0>)
 80117f2:	4293      	cmp	r3, r2
 80117f4:	d003      	beq.n	80117fe <TIM_OC3_SetConfig+0x66>
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	4a20      	ldr	r2, [pc, #128]	; (801187c <TIM_OC3_SetConfig+0xe4>)
 80117fa:	4293      	cmp	r3, r2
 80117fc:	d10d      	bne.n	801181a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80117fe:	697b      	ldr	r3, [r7, #20]
 8011800:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011804:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8011806:	683b      	ldr	r3, [r7, #0]
 8011808:	68db      	ldr	r3, [r3, #12]
 801180a:	021b      	lsls	r3, r3, #8
 801180c:	697a      	ldr	r2, [r7, #20]
 801180e:	4313      	orrs	r3, r2
 8011810:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8011812:	697b      	ldr	r3, [r7, #20]
 8011814:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011818:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	4a16      	ldr	r2, [pc, #88]	; (8011878 <TIM_OC3_SetConfig+0xe0>)
 801181e:	4293      	cmp	r3, r2
 8011820:	d003      	beq.n	801182a <TIM_OC3_SetConfig+0x92>
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	4a15      	ldr	r2, [pc, #84]	; (801187c <TIM_OC3_SetConfig+0xe4>)
 8011826:	4293      	cmp	r3, r2
 8011828:	d113      	bne.n	8011852 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801182a:	693b      	ldr	r3, [r7, #16]
 801182c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011830:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8011832:	693b      	ldr	r3, [r7, #16]
 8011834:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011838:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801183a:	683b      	ldr	r3, [r7, #0]
 801183c:	695b      	ldr	r3, [r3, #20]
 801183e:	011b      	lsls	r3, r3, #4
 8011840:	693a      	ldr	r2, [r7, #16]
 8011842:	4313      	orrs	r3, r2
 8011844:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8011846:	683b      	ldr	r3, [r7, #0]
 8011848:	699b      	ldr	r3, [r3, #24]
 801184a:	011b      	lsls	r3, r3, #4
 801184c:	693a      	ldr	r2, [r7, #16]
 801184e:	4313      	orrs	r3, r2
 8011850:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	693a      	ldr	r2, [r7, #16]
 8011856:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	68fa      	ldr	r2, [r7, #12]
 801185c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801185e:	683b      	ldr	r3, [r7, #0]
 8011860:	685a      	ldr	r2, [r3, #4]
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	697a      	ldr	r2, [r7, #20]
 801186a:	621a      	str	r2, [r3, #32]
}
 801186c:	bf00      	nop
 801186e:	371c      	adds	r7, #28
 8011870:	46bd      	mov	sp, r7
 8011872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011876:	4770      	bx	lr
 8011878:	40010000 	.word	0x40010000
 801187c:	40010400 	.word	0x40010400

08011880 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011880:	b480      	push	{r7}
 8011882:	b087      	sub	sp, #28
 8011884:	af00      	add	r7, sp, #0
 8011886:	6078      	str	r0, [r7, #4]
 8011888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	6a1b      	ldr	r3, [r3, #32]
 801188e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	6a1b      	ldr	r3, [r3, #32]
 801189a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	685b      	ldr	r3, [r3, #4]
 80118a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	69db      	ldr	r3, [r3, #28]
 80118a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80118ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80118b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80118b8:	683b      	ldr	r3, [r7, #0]
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	021b      	lsls	r3, r3, #8
 80118be:	68fa      	ldr	r2, [r7, #12]
 80118c0:	4313      	orrs	r3, r2
 80118c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80118c4:	693b      	ldr	r3, [r7, #16]
 80118c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80118ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80118cc:	683b      	ldr	r3, [r7, #0]
 80118ce:	689b      	ldr	r3, [r3, #8]
 80118d0:	031b      	lsls	r3, r3, #12
 80118d2:	693a      	ldr	r2, [r7, #16]
 80118d4:	4313      	orrs	r3, r2
 80118d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	4a12      	ldr	r2, [pc, #72]	; (8011924 <TIM_OC4_SetConfig+0xa4>)
 80118dc:	4293      	cmp	r3, r2
 80118de:	d003      	beq.n	80118e8 <TIM_OC4_SetConfig+0x68>
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	4a11      	ldr	r2, [pc, #68]	; (8011928 <TIM_OC4_SetConfig+0xa8>)
 80118e4:	4293      	cmp	r3, r2
 80118e6:	d109      	bne.n	80118fc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80118e8:	697b      	ldr	r3, [r7, #20]
 80118ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80118ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80118f0:	683b      	ldr	r3, [r7, #0]
 80118f2:	695b      	ldr	r3, [r3, #20]
 80118f4:	019b      	lsls	r3, r3, #6
 80118f6:	697a      	ldr	r2, [r7, #20]
 80118f8:	4313      	orrs	r3, r2
 80118fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	697a      	ldr	r2, [r7, #20]
 8011900:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	68fa      	ldr	r2, [r7, #12]
 8011906:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011908:	683b      	ldr	r3, [r7, #0]
 801190a:	685a      	ldr	r2, [r3, #4]
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	693a      	ldr	r2, [r7, #16]
 8011914:	621a      	str	r2, [r3, #32]
}
 8011916:	bf00      	nop
 8011918:	371c      	adds	r7, #28
 801191a:	46bd      	mov	sp, r7
 801191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011920:	4770      	bx	lr
 8011922:	bf00      	nop
 8011924:	40010000 	.word	0x40010000
 8011928:	40010400 	.word	0x40010400

0801192c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801192c:	b480      	push	{r7}
 801192e:	b087      	sub	sp, #28
 8011930:	af00      	add	r7, sp, #0
 8011932:	60f8      	str	r0, [r7, #12]
 8011934:	60b9      	str	r1, [r7, #8]
 8011936:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	6a1b      	ldr	r3, [r3, #32]
 801193c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	6a1b      	ldr	r3, [r3, #32]
 8011942:	f023 0201 	bic.w	r2, r3, #1
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801194a:	68fb      	ldr	r3, [r7, #12]
 801194c:	699b      	ldr	r3, [r3, #24]
 801194e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011950:	693b      	ldr	r3, [r7, #16]
 8011952:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011956:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	011b      	lsls	r3, r3, #4
 801195c:	693a      	ldr	r2, [r7, #16]
 801195e:	4313      	orrs	r3, r2
 8011960:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011962:	697b      	ldr	r3, [r7, #20]
 8011964:	f023 030a 	bic.w	r3, r3, #10
 8011968:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801196a:	697a      	ldr	r2, [r7, #20]
 801196c:	68bb      	ldr	r3, [r7, #8]
 801196e:	4313      	orrs	r3, r2
 8011970:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	693a      	ldr	r2, [r7, #16]
 8011976:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	697a      	ldr	r2, [r7, #20]
 801197c:	621a      	str	r2, [r3, #32]
}
 801197e:	bf00      	nop
 8011980:	371c      	adds	r7, #28
 8011982:	46bd      	mov	sp, r7
 8011984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011988:	4770      	bx	lr

0801198a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801198a:	b480      	push	{r7}
 801198c:	b087      	sub	sp, #28
 801198e:	af00      	add	r7, sp, #0
 8011990:	60f8      	str	r0, [r7, #12]
 8011992:	60b9      	str	r1, [r7, #8]
 8011994:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	6a1b      	ldr	r3, [r3, #32]
 801199a:	f023 0210 	bic.w	r2, r3, #16
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	699b      	ldr	r3, [r3, #24]
 80119a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	6a1b      	ldr	r3, [r3, #32]
 80119ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80119ae:	697b      	ldr	r3, [r7, #20]
 80119b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80119b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	031b      	lsls	r3, r3, #12
 80119ba:	697a      	ldr	r2, [r7, #20]
 80119bc:	4313      	orrs	r3, r2
 80119be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80119c0:	693b      	ldr	r3, [r7, #16]
 80119c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80119c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80119c8:	68bb      	ldr	r3, [r7, #8]
 80119ca:	011b      	lsls	r3, r3, #4
 80119cc:	693a      	ldr	r2, [r7, #16]
 80119ce:	4313      	orrs	r3, r2
 80119d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	697a      	ldr	r2, [r7, #20]
 80119d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	693a      	ldr	r2, [r7, #16]
 80119dc:	621a      	str	r2, [r3, #32]
}
 80119de:	bf00      	nop
 80119e0:	371c      	adds	r7, #28
 80119e2:	46bd      	mov	sp, r7
 80119e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119e8:	4770      	bx	lr

080119ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80119ea:	b480      	push	{r7}
 80119ec:	b085      	sub	sp, #20
 80119ee:	af00      	add	r7, sp, #0
 80119f0:	6078      	str	r0, [r7, #4]
 80119f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	689b      	ldr	r3, [r3, #8]
 80119f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011a00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8011a02:	683a      	ldr	r2, [r7, #0]
 8011a04:	68fb      	ldr	r3, [r7, #12]
 8011a06:	4313      	orrs	r3, r2
 8011a08:	f043 0307 	orr.w	r3, r3, #7
 8011a0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	68fa      	ldr	r2, [r7, #12]
 8011a12:	609a      	str	r2, [r3, #8]
}
 8011a14:	bf00      	nop
 8011a16:	3714      	adds	r7, #20
 8011a18:	46bd      	mov	sp, r7
 8011a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a1e:	4770      	bx	lr

08011a20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011a20:	b480      	push	{r7}
 8011a22:	b087      	sub	sp, #28
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	60f8      	str	r0, [r7, #12]
 8011a28:	60b9      	str	r1, [r7, #8]
 8011a2a:	607a      	str	r2, [r7, #4]
 8011a2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	689b      	ldr	r3, [r3, #8]
 8011a32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011a34:	697b      	ldr	r3, [r7, #20]
 8011a36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011a3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011a3c:	683b      	ldr	r3, [r7, #0]
 8011a3e:	021a      	lsls	r2, r3, #8
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	431a      	orrs	r2, r3
 8011a44:	68bb      	ldr	r3, [r7, #8]
 8011a46:	4313      	orrs	r3, r2
 8011a48:	697a      	ldr	r2, [r7, #20]
 8011a4a:	4313      	orrs	r3, r2
 8011a4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	697a      	ldr	r2, [r7, #20]
 8011a52:	609a      	str	r2, [r3, #8]
}
 8011a54:	bf00      	nop
 8011a56:	371c      	adds	r7, #28
 8011a58:	46bd      	mov	sp, r7
 8011a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a5e:	4770      	bx	lr

08011a60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011a60:	b480      	push	{r7}
 8011a62:	b087      	sub	sp, #28
 8011a64:	af00      	add	r7, sp, #0
 8011a66:	60f8      	str	r0, [r7, #12]
 8011a68:	60b9      	str	r1, [r7, #8]
 8011a6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011a6c:	68bb      	ldr	r3, [r7, #8]
 8011a6e:	f003 031f 	and.w	r3, r3, #31
 8011a72:	2201      	movs	r2, #1
 8011a74:	fa02 f303 	lsl.w	r3, r2, r3
 8011a78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	6a1a      	ldr	r2, [r3, #32]
 8011a7e:	697b      	ldr	r3, [r7, #20]
 8011a80:	43db      	mvns	r3, r3
 8011a82:	401a      	ands	r2, r3
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	6a1a      	ldr	r2, [r3, #32]
 8011a8c:	68bb      	ldr	r3, [r7, #8]
 8011a8e:	f003 031f 	and.w	r3, r3, #31
 8011a92:	6879      	ldr	r1, [r7, #4]
 8011a94:	fa01 f303 	lsl.w	r3, r1, r3
 8011a98:	431a      	orrs	r2, r3
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	621a      	str	r2, [r3, #32]
}
 8011a9e:	bf00      	nop
 8011aa0:	371c      	adds	r7, #28
 8011aa2:	46bd      	mov	sp, r7
 8011aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa8:	4770      	bx	lr
	...

08011aac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011aac:	b480      	push	{r7}
 8011aae:	b085      	sub	sp, #20
 8011ab0:	af00      	add	r7, sp, #0
 8011ab2:	6078      	str	r0, [r7, #4]
 8011ab4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011abc:	2b01      	cmp	r3, #1
 8011abe:	d101      	bne.n	8011ac4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011ac0:	2302      	movs	r3, #2
 8011ac2:	e05a      	b.n	8011b7a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	2201      	movs	r2, #1
 8011ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	2202      	movs	r2, #2
 8011ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	685b      	ldr	r3, [r3, #4]
 8011ada:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	689b      	ldr	r3, [r3, #8]
 8011ae2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011aea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011aec:	683b      	ldr	r3, [r7, #0]
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	68fa      	ldr	r2, [r7, #12]
 8011af2:	4313      	orrs	r3, r2
 8011af4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	68fa      	ldr	r2, [r7, #12]
 8011afc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	4a21      	ldr	r2, [pc, #132]	; (8011b88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8011b04:	4293      	cmp	r3, r2
 8011b06:	d022      	beq.n	8011b4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011b10:	d01d      	beq.n	8011b4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	4a1d      	ldr	r2, [pc, #116]	; (8011b8c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8011b18:	4293      	cmp	r3, r2
 8011b1a:	d018      	beq.n	8011b4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	4a1b      	ldr	r2, [pc, #108]	; (8011b90 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8011b22:	4293      	cmp	r3, r2
 8011b24:	d013      	beq.n	8011b4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	4a1a      	ldr	r2, [pc, #104]	; (8011b94 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8011b2c:	4293      	cmp	r3, r2
 8011b2e:	d00e      	beq.n	8011b4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	4a18      	ldr	r2, [pc, #96]	; (8011b98 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8011b36:	4293      	cmp	r3, r2
 8011b38:	d009      	beq.n	8011b4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	4a17      	ldr	r2, [pc, #92]	; (8011b9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8011b40:	4293      	cmp	r3, r2
 8011b42:	d004      	beq.n	8011b4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	4a15      	ldr	r2, [pc, #84]	; (8011ba0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8011b4a:	4293      	cmp	r3, r2
 8011b4c:	d10c      	bne.n	8011b68 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011b4e:	68bb      	ldr	r3, [r7, #8]
 8011b50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011b54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011b56:	683b      	ldr	r3, [r7, #0]
 8011b58:	685b      	ldr	r3, [r3, #4]
 8011b5a:	68ba      	ldr	r2, [r7, #8]
 8011b5c:	4313      	orrs	r3, r2
 8011b5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	68ba      	ldr	r2, [r7, #8]
 8011b66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	2201      	movs	r2, #1
 8011b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	2200      	movs	r2, #0
 8011b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011b78:	2300      	movs	r3, #0
}
 8011b7a:	4618      	mov	r0, r3
 8011b7c:	3714      	adds	r7, #20
 8011b7e:	46bd      	mov	sp, r7
 8011b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b84:	4770      	bx	lr
 8011b86:	bf00      	nop
 8011b88:	40010000 	.word	0x40010000
 8011b8c:	40000400 	.word	0x40000400
 8011b90:	40000800 	.word	0x40000800
 8011b94:	40000c00 	.word	0x40000c00
 8011b98:	40010400 	.word	0x40010400
 8011b9c:	40014000 	.word	0x40014000
 8011ba0:	40001800 	.word	0x40001800

08011ba4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011ba4:	b480      	push	{r7}
 8011ba6:	b083      	sub	sp, #12
 8011ba8:	af00      	add	r7, sp, #0
 8011baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011bac:	bf00      	nop
 8011bae:	370c      	adds	r7, #12
 8011bb0:	46bd      	mov	sp, r7
 8011bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bb6:	4770      	bx	lr

08011bb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011bb8:	b480      	push	{r7}
 8011bba:	b083      	sub	sp, #12
 8011bbc:	af00      	add	r7, sp, #0
 8011bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011bc0:	bf00      	nop
 8011bc2:	370c      	adds	r7, #12
 8011bc4:	46bd      	mov	sp, r7
 8011bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bca:	4770      	bx	lr

08011bcc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011bcc:	b580      	push	{r7, lr}
 8011bce:	b082      	sub	sp, #8
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d101      	bne.n	8011bde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011bda:	2301      	movs	r3, #1
 8011bdc:	e03f      	b.n	8011c5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011be4:	b2db      	uxtb	r3, r3
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d106      	bne.n	8011bf8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	2200      	movs	r2, #0
 8011bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011bf2:	6878      	ldr	r0, [r7, #4]
 8011bf4:	f7f1 ff46 	bl	8003a84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	2224      	movs	r2, #36	; 0x24
 8011bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	68da      	ldr	r2, [r3, #12]
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8011c0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8011c10:	6878      	ldr	r0, [r7, #4]
 8011c12:	f000 f9cb 	bl	8011fac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	691a      	ldr	r2, [r3, #16]
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011c24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	695a      	ldr	r2, [r3, #20]
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011c34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	68da      	ldr	r2, [r3, #12]
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8011c44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	2200      	movs	r2, #0
 8011c4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	2220      	movs	r2, #32
 8011c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	2220      	movs	r2, #32
 8011c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8011c5c:	2300      	movs	r3, #0
}
 8011c5e:	4618      	mov	r0, r3
 8011c60:	3708      	adds	r7, #8
 8011c62:	46bd      	mov	sp, r7
 8011c64:	bd80      	pop	{r7, pc}

08011c66 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011c66:	b580      	push	{r7, lr}
 8011c68:	b08a      	sub	sp, #40	; 0x28
 8011c6a:	af02      	add	r7, sp, #8
 8011c6c:	60f8      	str	r0, [r7, #12]
 8011c6e:	60b9      	str	r1, [r7, #8]
 8011c70:	603b      	str	r3, [r7, #0]
 8011c72:	4613      	mov	r3, r2
 8011c74:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8011c76:	2300      	movs	r3, #0
 8011c78:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011c80:	b2db      	uxtb	r3, r3
 8011c82:	2b20      	cmp	r3, #32
 8011c84:	d17c      	bne.n	8011d80 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8011c86:	68bb      	ldr	r3, [r7, #8]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d002      	beq.n	8011c92 <HAL_UART_Transmit+0x2c>
 8011c8c:	88fb      	ldrh	r3, [r7, #6]
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d101      	bne.n	8011c96 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8011c92:	2301      	movs	r3, #1
 8011c94:	e075      	b.n	8011d82 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011c9c:	2b01      	cmp	r3, #1
 8011c9e:	d101      	bne.n	8011ca4 <HAL_UART_Transmit+0x3e>
 8011ca0:	2302      	movs	r3, #2
 8011ca2:	e06e      	b.n	8011d82 <HAL_UART_Transmit+0x11c>
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	2201      	movs	r2, #1
 8011ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	2200      	movs	r2, #0
 8011cb0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	2221      	movs	r2, #33	; 0x21
 8011cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8011cba:	f7fa fc19 	bl	800c4f0 <HAL_GetTick>
 8011cbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	88fa      	ldrh	r2, [r7, #6]
 8011cc4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	88fa      	ldrh	r2, [r7, #6]
 8011cca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	689b      	ldr	r3, [r3, #8]
 8011cd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011cd4:	d108      	bne.n	8011ce8 <HAL_UART_Transmit+0x82>
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	691b      	ldr	r3, [r3, #16]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d104      	bne.n	8011ce8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8011cde:	2300      	movs	r3, #0
 8011ce0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8011ce2:	68bb      	ldr	r3, [r7, #8]
 8011ce4:	61bb      	str	r3, [r7, #24]
 8011ce6:	e003      	b.n	8011cf0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8011ce8:	68bb      	ldr	r3, [r7, #8]
 8011cea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011cec:	2300      	movs	r3, #0
 8011cee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	2200      	movs	r2, #0
 8011cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8011cf8:	e02a      	b.n	8011d50 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011cfa:	683b      	ldr	r3, [r7, #0]
 8011cfc:	9300      	str	r3, [sp, #0]
 8011cfe:	697b      	ldr	r3, [r7, #20]
 8011d00:	2200      	movs	r2, #0
 8011d02:	2180      	movs	r1, #128	; 0x80
 8011d04:	68f8      	ldr	r0, [r7, #12]
 8011d06:	f000 f8e2 	bl	8011ece <UART_WaitOnFlagUntilTimeout>
 8011d0a:	4603      	mov	r3, r0
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d001      	beq.n	8011d14 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8011d10:	2303      	movs	r3, #3
 8011d12:	e036      	b.n	8011d82 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8011d14:	69fb      	ldr	r3, [r7, #28]
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d10b      	bne.n	8011d32 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8011d1a:	69bb      	ldr	r3, [r7, #24]
 8011d1c:	881b      	ldrh	r3, [r3, #0]
 8011d1e:	461a      	mov	r2, r3
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011d28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8011d2a:	69bb      	ldr	r3, [r7, #24]
 8011d2c:	3302      	adds	r3, #2
 8011d2e:	61bb      	str	r3, [r7, #24]
 8011d30:	e007      	b.n	8011d42 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8011d32:	69fb      	ldr	r3, [r7, #28]
 8011d34:	781a      	ldrb	r2, [r3, #0]
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8011d3c:	69fb      	ldr	r3, [r7, #28]
 8011d3e:	3301      	adds	r3, #1
 8011d40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011d46:	b29b      	uxth	r3, r3
 8011d48:	3b01      	subs	r3, #1
 8011d4a:	b29a      	uxth	r2, r3
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8011d50:	68fb      	ldr	r3, [r7, #12]
 8011d52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011d54:	b29b      	uxth	r3, r3
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d1cf      	bne.n	8011cfa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8011d5a:	683b      	ldr	r3, [r7, #0]
 8011d5c:	9300      	str	r3, [sp, #0]
 8011d5e:	697b      	ldr	r3, [r7, #20]
 8011d60:	2200      	movs	r2, #0
 8011d62:	2140      	movs	r1, #64	; 0x40
 8011d64:	68f8      	ldr	r0, [r7, #12]
 8011d66:	f000 f8b2 	bl	8011ece <UART_WaitOnFlagUntilTimeout>
 8011d6a:	4603      	mov	r3, r0
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d001      	beq.n	8011d74 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8011d70:	2303      	movs	r3, #3
 8011d72:	e006      	b.n	8011d82 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	2220      	movs	r2, #32
 8011d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8011d7c:	2300      	movs	r3, #0
 8011d7e:	e000      	b.n	8011d82 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8011d80:	2302      	movs	r3, #2
  }
}
 8011d82:	4618      	mov	r0, r3
 8011d84:	3720      	adds	r7, #32
 8011d86:	46bd      	mov	sp, r7
 8011d88:	bd80      	pop	{r7, pc}

08011d8a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011d8a:	b580      	push	{r7, lr}
 8011d8c:	b08a      	sub	sp, #40	; 0x28
 8011d8e:	af02      	add	r7, sp, #8
 8011d90:	60f8      	str	r0, [r7, #12]
 8011d92:	60b9      	str	r1, [r7, #8]
 8011d94:	603b      	str	r3, [r7, #0]
 8011d96:	4613      	mov	r3, r2
 8011d98:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8011d9a:	2300      	movs	r3, #0
 8011d9c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011da4:	b2db      	uxtb	r3, r3
 8011da6:	2b20      	cmp	r3, #32
 8011da8:	f040 808c 	bne.w	8011ec4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8011dac:	68bb      	ldr	r3, [r7, #8]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d002      	beq.n	8011db8 <HAL_UART_Receive+0x2e>
 8011db2:	88fb      	ldrh	r3, [r7, #6]
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d101      	bne.n	8011dbc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8011db8:	2301      	movs	r3, #1
 8011dba:	e084      	b.n	8011ec6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011dc2:	2b01      	cmp	r3, #1
 8011dc4:	d101      	bne.n	8011dca <HAL_UART_Receive+0x40>
 8011dc6:	2302      	movs	r3, #2
 8011dc8:	e07d      	b.n	8011ec6 <HAL_UART_Receive+0x13c>
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	2201      	movs	r2, #1
 8011dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	2200      	movs	r2, #0
 8011dd6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	2222      	movs	r2, #34	; 0x22
 8011ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	2200      	movs	r2, #0
 8011de4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8011de6:	f7fa fb83 	bl	800c4f0 <HAL_GetTick>
 8011dea:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	88fa      	ldrh	r2, [r7, #6]
 8011df0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	88fa      	ldrh	r2, [r7, #6]
 8011df6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	689b      	ldr	r3, [r3, #8]
 8011dfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011e00:	d108      	bne.n	8011e14 <HAL_UART_Receive+0x8a>
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	691b      	ldr	r3, [r3, #16]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d104      	bne.n	8011e14 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8011e0e:	68bb      	ldr	r3, [r7, #8]
 8011e10:	61bb      	str	r3, [r7, #24]
 8011e12:	e003      	b.n	8011e1c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8011e14:	68bb      	ldr	r3, [r7, #8]
 8011e16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011e18:	2300      	movs	r3, #0
 8011e1a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	2200      	movs	r2, #0
 8011e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8011e24:	e043      	b.n	8011eae <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8011e26:	683b      	ldr	r3, [r7, #0]
 8011e28:	9300      	str	r3, [sp, #0]
 8011e2a:	697b      	ldr	r3, [r7, #20]
 8011e2c:	2200      	movs	r2, #0
 8011e2e:	2120      	movs	r1, #32
 8011e30:	68f8      	ldr	r0, [r7, #12]
 8011e32:	f000 f84c 	bl	8011ece <UART_WaitOnFlagUntilTimeout>
 8011e36:	4603      	mov	r3, r0
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d001      	beq.n	8011e40 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8011e3c:	2303      	movs	r3, #3
 8011e3e:	e042      	b.n	8011ec6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8011e40:	69fb      	ldr	r3, [r7, #28]
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d10c      	bne.n	8011e60 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	685b      	ldr	r3, [r3, #4]
 8011e4c:	b29b      	uxth	r3, r3
 8011e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011e52:	b29a      	uxth	r2, r3
 8011e54:	69bb      	ldr	r3, [r7, #24]
 8011e56:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8011e58:	69bb      	ldr	r3, [r7, #24]
 8011e5a:	3302      	adds	r3, #2
 8011e5c:	61bb      	str	r3, [r7, #24]
 8011e5e:	e01f      	b.n	8011ea0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	689b      	ldr	r3, [r3, #8]
 8011e64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011e68:	d007      	beq.n	8011e7a <HAL_UART_Receive+0xf0>
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	689b      	ldr	r3, [r3, #8]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d10a      	bne.n	8011e88 <HAL_UART_Receive+0xfe>
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	691b      	ldr	r3, [r3, #16]
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d106      	bne.n	8011e88 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	685b      	ldr	r3, [r3, #4]
 8011e80:	b2da      	uxtb	r2, r3
 8011e82:	69fb      	ldr	r3, [r7, #28]
 8011e84:	701a      	strb	r2, [r3, #0]
 8011e86:	e008      	b.n	8011e9a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	685b      	ldr	r3, [r3, #4]
 8011e8e:	b2db      	uxtb	r3, r3
 8011e90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011e94:	b2da      	uxtb	r2, r3
 8011e96:	69fb      	ldr	r3, [r7, #28]
 8011e98:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8011e9a:	69fb      	ldr	r3, [r7, #28]
 8011e9c:	3301      	adds	r3, #1
 8011e9e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8011ea4:	b29b      	uxth	r3, r3
 8011ea6:	3b01      	subs	r3, #1
 8011ea8:	b29a      	uxth	r2, r3
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8011eb2:	b29b      	uxth	r3, r3
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d1b6      	bne.n	8011e26 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	2220      	movs	r2, #32
 8011ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8011ec0:	2300      	movs	r3, #0
 8011ec2:	e000      	b.n	8011ec6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8011ec4:	2302      	movs	r3, #2
  }
}
 8011ec6:	4618      	mov	r0, r3
 8011ec8:	3720      	adds	r7, #32
 8011eca:	46bd      	mov	sp, r7
 8011ecc:	bd80      	pop	{r7, pc}

08011ece <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8011ece:	b580      	push	{r7, lr}
 8011ed0:	b090      	sub	sp, #64	; 0x40
 8011ed2:	af00      	add	r7, sp, #0
 8011ed4:	60f8      	str	r0, [r7, #12]
 8011ed6:	60b9      	str	r1, [r7, #8]
 8011ed8:	603b      	str	r3, [r7, #0]
 8011eda:	4613      	mov	r3, r2
 8011edc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011ede:	e050      	b.n	8011f82 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011ee0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ee6:	d04c      	beq.n	8011f82 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8011ee8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d007      	beq.n	8011efe <UART_WaitOnFlagUntilTimeout+0x30>
 8011eee:	f7fa faff 	bl	800c4f0 <HAL_GetTick>
 8011ef2:	4602      	mov	r2, r0
 8011ef4:	683b      	ldr	r3, [r7, #0]
 8011ef6:	1ad3      	subs	r3, r2, r3
 8011ef8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011efa:	429a      	cmp	r2, r3
 8011efc:	d241      	bcs.n	8011f82 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	330c      	adds	r3, #12
 8011f04:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f08:	e853 3f00 	ldrex	r3, [r3]
 8011f0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f10:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8011f14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	330c      	adds	r3, #12
 8011f1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011f1e:	637a      	str	r2, [r7, #52]	; 0x34
 8011f20:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011f24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011f26:	e841 2300 	strex	r3, r2, [r1]
 8011f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d1e5      	bne.n	8011efe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	3314      	adds	r3, #20
 8011f38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f3a:	697b      	ldr	r3, [r7, #20]
 8011f3c:	e853 3f00 	ldrex	r3, [r3]
 8011f40:	613b      	str	r3, [r7, #16]
   return(result);
 8011f42:	693b      	ldr	r3, [r7, #16]
 8011f44:	f023 0301 	bic.w	r3, r3, #1
 8011f48:	63bb      	str	r3, [r7, #56]	; 0x38
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	3314      	adds	r3, #20
 8011f50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011f52:	623a      	str	r2, [r7, #32]
 8011f54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f56:	69f9      	ldr	r1, [r7, #28]
 8011f58:	6a3a      	ldr	r2, [r7, #32]
 8011f5a:	e841 2300 	strex	r3, r2, [r1]
 8011f5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8011f60:	69bb      	ldr	r3, [r7, #24]
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d1e5      	bne.n	8011f32 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	2220      	movs	r2, #32
 8011f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	2220      	movs	r2, #32
 8011f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	2200      	movs	r2, #0
 8011f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8011f7e:	2303      	movs	r3, #3
 8011f80:	e00f      	b.n	8011fa2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	681a      	ldr	r2, [r3, #0]
 8011f88:	68bb      	ldr	r3, [r7, #8]
 8011f8a:	4013      	ands	r3, r2
 8011f8c:	68ba      	ldr	r2, [r7, #8]
 8011f8e:	429a      	cmp	r2, r3
 8011f90:	bf0c      	ite	eq
 8011f92:	2301      	moveq	r3, #1
 8011f94:	2300      	movne	r3, #0
 8011f96:	b2db      	uxtb	r3, r3
 8011f98:	461a      	mov	r2, r3
 8011f9a:	79fb      	ldrb	r3, [r7, #7]
 8011f9c:	429a      	cmp	r2, r3
 8011f9e:	d09f      	beq.n	8011ee0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8011fa0:	2300      	movs	r3, #0
}
 8011fa2:	4618      	mov	r0, r3
 8011fa4:	3740      	adds	r7, #64	; 0x40
 8011fa6:	46bd      	mov	sp, r7
 8011fa8:	bd80      	pop	{r7, pc}
	...

08011fac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fb0:	b09f      	sub	sp, #124	; 0x7c
 8011fb2:	af00      	add	r7, sp, #0
 8011fb4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011fb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	691b      	ldr	r3, [r3, #16]
 8011fbc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8011fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011fc2:	68d9      	ldr	r1, [r3, #12]
 8011fc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011fc6:	681a      	ldr	r2, [r3, #0]
 8011fc8:	ea40 0301 	orr.w	r3, r0, r1
 8011fcc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8011fce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011fd0:	689a      	ldr	r2, [r3, #8]
 8011fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011fd4:	691b      	ldr	r3, [r3, #16]
 8011fd6:	431a      	orrs	r2, r3
 8011fd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011fda:	695b      	ldr	r3, [r3, #20]
 8011fdc:	431a      	orrs	r2, r3
 8011fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011fe0:	69db      	ldr	r3, [r3, #28]
 8011fe2:	4313      	orrs	r3, r2
 8011fe4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8011fe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	68db      	ldr	r3, [r3, #12]
 8011fec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8011ff0:	f021 010c 	bic.w	r1, r1, #12
 8011ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011ff6:	681a      	ldr	r2, [r3, #0]
 8011ff8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011ffa:	430b      	orrs	r3, r1
 8011ffc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8011ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	695b      	ldr	r3, [r3, #20]
 8012004:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8012008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801200a:	6999      	ldr	r1, [r3, #24]
 801200c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801200e:	681a      	ldr	r2, [r3, #0]
 8012010:	ea40 0301 	orr.w	r3, r0, r1
 8012014:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8012016:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012018:	681a      	ldr	r2, [r3, #0]
 801201a:	4bc5      	ldr	r3, [pc, #788]	; (8012330 <UART_SetConfig+0x384>)
 801201c:	429a      	cmp	r2, r3
 801201e:	d004      	beq.n	801202a <UART_SetConfig+0x7e>
 8012020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012022:	681a      	ldr	r2, [r3, #0]
 8012024:	4bc3      	ldr	r3, [pc, #780]	; (8012334 <UART_SetConfig+0x388>)
 8012026:	429a      	cmp	r2, r3
 8012028:	d103      	bne.n	8012032 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 801202a:	f7fc ff59 	bl	800eee0 <HAL_RCC_GetPCLK2Freq>
 801202e:	6778      	str	r0, [r7, #116]	; 0x74
 8012030:	e002      	b.n	8012038 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8012032:	f7fc ff41 	bl	800eeb8 <HAL_RCC_GetPCLK1Freq>
 8012036:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801203a:	69db      	ldr	r3, [r3, #28]
 801203c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012040:	f040 80b6 	bne.w	80121b0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8012044:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012046:	461c      	mov	r4, r3
 8012048:	f04f 0500 	mov.w	r5, #0
 801204c:	4622      	mov	r2, r4
 801204e:	462b      	mov	r3, r5
 8012050:	1891      	adds	r1, r2, r2
 8012052:	6439      	str	r1, [r7, #64]	; 0x40
 8012054:	415b      	adcs	r3, r3
 8012056:	647b      	str	r3, [r7, #68]	; 0x44
 8012058:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801205c:	1912      	adds	r2, r2, r4
 801205e:	eb45 0303 	adc.w	r3, r5, r3
 8012062:	f04f 0000 	mov.w	r0, #0
 8012066:	f04f 0100 	mov.w	r1, #0
 801206a:	00d9      	lsls	r1, r3, #3
 801206c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8012070:	00d0      	lsls	r0, r2, #3
 8012072:	4602      	mov	r2, r0
 8012074:	460b      	mov	r3, r1
 8012076:	1911      	adds	r1, r2, r4
 8012078:	6639      	str	r1, [r7, #96]	; 0x60
 801207a:	416b      	adcs	r3, r5
 801207c:	667b      	str	r3, [r7, #100]	; 0x64
 801207e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012080:	685b      	ldr	r3, [r3, #4]
 8012082:	461a      	mov	r2, r3
 8012084:	f04f 0300 	mov.w	r3, #0
 8012088:	1891      	adds	r1, r2, r2
 801208a:	63b9      	str	r1, [r7, #56]	; 0x38
 801208c:	415b      	adcs	r3, r3
 801208e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012090:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8012094:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8012098:	f7ee fe66 	bl	8000d68 <__aeabi_uldivmod>
 801209c:	4602      	mov	r2, r0
 801209e:	460b      	mov	r3, r1
 80120a0:	4ba5      	ldr	r3, [pc, #660]	; (8012338 <UART_SetConfig+0x38c>)
 80120a2:	fba3 2302 	umull	r2, r3, r3, r2
 80120a6:	095b      	lsrs	r3, r3, #5
 80120a8:	011e      	lsls	r6, r3, #4
 80120aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80120ac:	461c      	mov	r4, r3
 80120ae:	f04f 0500 	mov.w	r5, #0
 80120b2:	4622      	mov	r2, r4
 80120b4:	462b      	mov	r3, r5
 80120b6:	1891      	adds	r1, r2, r2
 80120b8:	6339      	str	r1, [r7, #48]	; 0x30
 80120ba:	415b      	adcs	r3, r3
 80120bc:	637b      	str	r3, [r7, #52]	; 0x34
 80120be:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80120c2:	1912      	adds	r2, r2, r4
 80120c4:	eb45 0303 	adc.w	r3, r5, r3
 80120c8:	f04f 0000 	mov.w	r0, #0
 80120cc:	f04f 0100 	mov.w	r1, #0
 80120d0:	00d9      	lsls	r1, r3, #3
 80120d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80120d6:	00d0      	lsls	r0, r2, #3
 80120d8:	4602      	mov	r2, r0
 80120da:	460b      	mov	r3, r1
 80120dc:	1911      	adds	r1, r2, r4
 80120de:	65b9      	str	r1, [r7, #88]	; 0x58
 80120e0:	416b      	adcs	r3, r5
 80120e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80120e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80120e6:	685b      	ldr	r3, [r3, #4]
 80120e8:	461a      	mov	r2, r3
 80120ea:	f04f 0300 	mov.w	r3, #0
 80120ee:	1891      	adds	r1, r2, r2
 80120f0:	62b9      	str	r1, [r7, #40]	; 0x28
 80120f2:	415b      	adcs	r3, r3
 80120f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80120f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80120fa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80120fe:	f7ee fe33 	bl	8000d68 <__aeabi_uldivmod>
 8012102:	4602      	mov	r2, r0
 8012104:	460b      	mov	r3, r1
 8012106:	4b8c      	ldr	r3, [pc, #560]	; (8012338 <UART_SetConfig+0x38c>)
 8012108:	fba3 1302 	umull	r1, r3, r3, r2
 801210c:	095b      	lsrs	r3, r3, #5
 801210e:	2164      	movs	r1, #100	; 0x64
 8012110:	fb01 f303 	mul.w	r3, r1, r3
 8012114:	1ad3      	subs	r3, r2, r3
 8012116:	00db      	lsls	r3, r3, #3
 8012118:	3332      	adds	r3, #50	; 0x32
 801211a:	4a87      	ldr	r2, [pc, #540]	; (8012338 <UART_SetConfig+0x38c>)
 801211c:	fba2 2303 	umull	r2, r3, r2, r3
 8012120:	095b      	lsrs	r3, r3, #5
 8012122:	005b      	lsls	r3, r3, #1
 8012124:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8012128:	441e      	add	r6, r3
 801212a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801212c:	4618      	mov	r0, r3
 801212e:	f04f 0100 	mov.w	r1, #0
 8012132:	4602      	mov	r2, r0
 8012134:	460b      	mov	r3, r1
 8012136:	1894      	adds	r4, r2, r2
 8012138:	623c      	str	r4, [r7, #32]
 801213a:	415b      	adcs	r3, r3
 801213c:	627b      	str	r3, [r7, #36]	; 0x24
 801213e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8012142:	1812      	adds	r2, r2, r0
 8012144:	eb41 0303 	adc.w	r3, r1, r3
 8012148:	f04f 0400 	mov.w	r4, #0
 801214c:	f04f 0500 	mov.w	r5, #0
 8012150:	00dd      	lsls	r5, r3, #3
 8012152:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8012156:	00d4      	lsls	r4, r2, #3
 8012158:	4622      	mov	r2, r4
 801215a:	462b      	mov	r3, r5
 801215c:	1814      	adds	r4, r2, r0
 801215e:	653c      	str	r4, [r7, #80]	; 0x50
 8012160:	414b      	adcs	r3, r1
 8012162:	657b      	str	r3, [r7, #84]	; 0x54
 8012164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012166:	685b      	ldr	r3, [r3, #4]
 8012168:	461a      	mov	r2, r3
 801216a:	f04f 0300 	mov.w	r3, #0
 801216e:	1891      	adds	r1, r2, r2
 8012170:	61b9      	str	r1, [r7, #24]
 8012172:	415b      	adcs	r3, r3
 8012174:	61fb      	str	r3, [r7, #28]
 8012176:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801217a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 801217e:	f7ee fdf3 	bl	8000d68 <__aeabi_uldivmod>
 8012182:	4602      	mov	r2, r0
 8012184:	460b      	mov	r3, r1
 8012186:	4b6c      	ldr	r3, [pc, #432]	; (8012338 <UART_SetConfig+0x38c>)
 8012188:	fba3 1302 	umull	r1, r3, r3, r2
 801218c:	095b      	lsrs	r3, r3, #5
 801218e:	2164      	movs	r1, #100	; 0x64
 8012190:	fb01 f303 	mul.w	r3, r1, r3
 8012194:	1ad3      	subs	r3, r2, r3
 8012196:	00db      	lsls	r3, r3, #3
 8012198:	3332      	adds	r3, #50	; 0x32
 801219a:	4a67      	ldr	r2, [pc, #412]	; (8012338 <UART_SetConfig+0x38c>)
 801219c:	fba2 2303 	umull	r2, r3, r2, r3
 80121a0:	095b      	lsrs	r3, r3, #5
 80121a2:	f003 0207 	and.w	r2, r3, #7
 80121a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	4432      	add	r2, r6
 80121ac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80121ae:	e0b9      	b.n	8012324 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80121b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80121b2:	461c      	mov	r4, r3
 80121b4:	f04f 0500 	mov.w	r5, #0
 80121b8:	4622      	mov	r2, r4
 80121ba:	462b      	mov	r3, r5
 80121bc:	1891      	adds	r1, r2, r2
 80121be:	6139      	str	r1, [r7, #16]
 80121c0:	415b      	adcs	r3, r3
 80121c2:	617b      	str	r3, [r7, #20]
 80121c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80121c8:	1912      	adds	r2, r2, r4
 80121ca:	eb45 0303 	adc.w	r3, r5, r3
 80121ce:	f04f 0000 	mov.w	r0, #0
 80121d2:	f04f 0100 	mov.w	r1, #0
 80121d6:	00d9      	lsls	r1, r3, #3
 80121d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80121dc:	00d0      	lsls	r0, r2, #3
 80121de:	4602      	mov	r2, r0
 80121e0:	460b      	mov	r3, r1
 80121e2:	eb12 0804 	adds.w	r8, r2, r4
 80121e6:	eb43 0905 	adc.w	r9, r3, r5
 80121ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80121ec:	685b      	ldr	r3, [r3, #4]
 80121ee:	4618      	mov	r0, r3
 80121f0:	f04f 0100 	mov.w	r1, #0
 80121f4:	f04f 0200 	mov.w	r2, #0
 80121f8:	f04f 0300 	mov.w	r3, #0
 80121fc:	008b      	lsls	r3, r1, #2
 80121fe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8012202:	0082      	lsls	r2, r0, #2
 8012204:	4640      	mov	r0, r8
 8012206:	4649      	mov	r1, r9
 8012208:	f7ee fdae 	bl	8000d68 <__aeabi_uldivmod>
 801220c:	4602      	mov	r2, r0
 801220e:	460b      	mov	r3, r1
 8012210:	4b49      	ldr	r3, [pc, #292]	; (8012338 <UART_SetConfig+0x38c>)
 8012212:	fba3 2302 	umull	r2, r3, r3, r2
 8012216:	095b      	lsrs	r3, r3, #5
 8012218:	011e      	lsls	r6, r3, #4
 801221a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801221c:	4618      	mov	r0, r3
 801221e:	f04f 0100 	mov.w	r1, #0
 8012222:	4602      	mov	r2, r0
 8012224:	460b      	mov	r3, r1
 8012226:	1894      	adds	r4, r2, r2
 8012228:	60bc      	str	r4, [r7, #8]
 801222a:	415b      	adcs	r3, r3
 801222c:	60fb      	str	r3, [r7, #12]
 801222e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012232:	1812      	adds	r2, r2, r0
 8012234:	eb41 0303 	adc.w	r3, r1, r3
 8012238:	f04f 0400 	mov.w	r4, #0
 801223c:	f04f 0500 	mov.w	r5, #0
 8012240:	00dd      	lsls	r5, r3, #3
 8012242:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8012246:	00d4      	lsls	r4, r2, #3
 8012248:	4622      	mov	r2, r4
 801224a:	462b      	mov	r3, r5
 801224c:	1814      	adds	r4, r2, r0
 801224e:	64bc      	str	r4, [r7, #72]	; 0x48
 8012250:	414b      	adcs	r3, r1
 8012252:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012256:	685b      	ldr	r3, [r3, #4]
 8012258:	4618      	mov	r0, r3
 801225a:	f04f 0100 	mov.w	r1, #0
 801225e:	f04f 0200 	mov.w	r2, #0
 8012262:	f04f 0300 	mov.w	r3, #0
 8012266:	008b      	lsls	r3, r1, #2
 8012268:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801226c:	0082      	lsls	r2, r0, #2
 801226e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8012272:	f7ee fd79 	bl	8000d68 <__aeabi_uldivmod>
 8012276:	4602      	mov	r2, r0
 8012278:	460b      	mov	r3, r1
 801227a:	4b2f      	ldr	r3, [pc, #188]	; (8012338 <UART_SetConfig+0x38c>)
 801227c:	fba3 1302 	umull	r1, r3, r3, r2
 8012280:	095b      	lsrs	r3, r3, #5
 8012282:	2164      	movs	r1, #100	; 0x64
 8012284:	fb01 f303 	mul.w	r3, r1, r3
 8012288:	1ad3      	subs	r3, r2, r3
 801228a:	011b      	lsls	r3, r3, #4
 801228c:	3332      	adds	r3, #50	; 0x32
 801228e:	4a2a      	ldr	r2, [pc, #168]	; (8012338 <UART_SetConfig+0x38c>)
 8012290:	fba2 2303 	umull	r2, r3, r2, r3
 8012294:	095b      	lsrs	r3, r3, #5
 8012296:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801229a:	441e      	add	r6, r3
 801229c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801229e:	4618      	mov	r0, r3
 80122a0:	f04f 0100 	mov.w	r1, #0
 80122a4:	4602      	mov	r2, r0
 80122a6:	460b      	mov	r3, r1
 80122a8:	1894      	adds	r4, r2, r2
 80122aa:	603c      	str	r4, [r7, #0]
 80122ac:	415b      	adcs	r3, r3
 80122ae:	607b      	str	r3, [r7, #4]
 80122b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80122b4:	1812      	adds	r2, r2, r0
 80122b6:	eb41 0303 	adc.w	r3, r1, r3
 80122ba:	f04f 0400 	mov.w	r4, #0
 80122be:	f04f 0500 	mov.w	r5, #0
 80122c2:	00dd      	lsls	r5, r3, #3
 80122c4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80122c8:	00d4      	lsls	r4, r2, #3
 80122ca:	4622      	mov	r2, r4
 80122cc:	462b      	mov	r3, r5
 80122ce:	eb12 0a00 	adds.w	sl, r2, r0
 80122d2:	eb43 0b01 	adc.w	fp, r3, r1
 80122d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80122d8:	685b      	ldr	r3, [r3, #4]
 80122da:	4618      	mov	r0, r3
 80122dc:	f04f 0100 	mov.w	r1, #0
 80122e0:	f04f 0200 	mov.w	r2, #0
 80122e4:	f04f 0300 	mov.w	r3, #0
 80122e8:	008b      	lsls	r3, r1, #2
 80122ea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80122ee:	0082      	lsls	r2, r0, #2
 80122f0:	4650      	mov	r0, sl
 80122f2:	4659      	mov	r1, fp
 80122f4:	f7ee fd38 	bl	8000d68 <__aeabi_uldivmod>
 80122f8:	4602      	mov	r2, r0
 80122fa:	460b      	mov	r3, r1
 80122fc:	4b0e      	ldr	r3, [pc, #56]	; (8012338 <UART_SetConfig+0x38c>)
 80122fe:	fba3 1302 	umull	r1, r3, r3, r2
 8012302:	095b      	lsrs	r3, r3, #5
 8012304:	2164      	movs	r1, #100	; 0x64
 8012306:	fb01 f303 	mul.w	r3, r1, r3
 801230a:	1ad3      	subs	r3, r2, r3
 801230c:	011b      	lsls	r3, r3, #4
 801230e:	3332      	adds	r3, #50	; 0x32
 8012310:	4a09      	ldr	r2, [pc, #36]	; (8012338 <UART_SetConfig+0x38c>)
 8012312:	fba2 2303 	umull	r2, r3, r2, r3
 8012316:	095b      	lsrs	r3, r3, #5
 8012318:	f003 020f 	and.w	r2, r3, #15
 801231c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	4432      	add	r2, r6
 8012322:	609a      	str	r2, [r3, #8]
}
 8012324:	bf00      	nop
 8012326:	377c      	adds	r7, #124	; 0x7c
 8012328:	46bd      	mov	sp, r7
 801232a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801232e:	bf00      	nop
 8012330:	40011000 	.word	0x40011000
 8012334:	40011400 	.word	0x40011400
 8012338:	51eb851f 	.word	0x51eb851f

0801233c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801233c:	b580      	push	{r7, lr}
 801233e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8012340:	4904      	ldr	r1, [pc, #16]	; (8012354 <MX_FATFS_Init+0x18>)
 8012342:	4805      	ldr	r0, [pc, #20]	; (8012358 <MX_FATFS_Init+0x1c>)
 8012344:	f003 fb9e 	bl	8015a84 <FATFS_LinkDriver>
 8012348:	4603      	mov	r3, r0
 801234a:	461a      	mov	r2, r3
 801234c:	4b03      	ldr	r3, [pc, #12]	; (801235c <MX_FATFS_Init+0x20>)
 801234e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8012350:	bf00      	nop
 8012352:	bd80      	pop	{r7, pc}
 8012354:	20009848 	.word	0x20009848
 8012358:	200000d4 	.word	0x200000d4
 801235c:	2000984c 	.word	0x2000984c

08012360 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8012360:	b480      	push	{r7}
 8012362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8012364:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8012366:	4618      	mov	r0, r3
 8012368:	46bd      	mov	sp, r7
 801236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801236e:	4770      	bx	lr

08012370 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8012370:	b580      	push	{r7, lr}
 8012372:	b082      	sub	sp, #8
 8012374:	af00      	add	r7, sp, #0
 8012376:	4603      	mov	r3, r0
 8012378:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 801237a:	79fb      	ldrb	r3, [r7, #7]
 801237c:	4618      	mov	r0, r3
 801237e:	f000 f9dd 	bl	801273c <USER_SPI_initialize>
 8012382:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8012384:	4618      	mov	r0, r3
 8012386:	3708      	adds	r7, #8
 8012388:	46bd      	mov	sp, r7
 801238a:	bd80      	pop	{r7, pc}

0801238c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 801238c:	b580      	push	{r7, lr}
 801238e:	b082      	sub	sp, #8
 8012390:	af00      	add	r7, sp, #0
 8012392:	4603      	mov	r3, r0
 8012394:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8012396:	79fb      	ldrb	r3, [r7, #7]
 8012398:	4618      	mov	r0, r3
 801239a:	f000 fab9 	bl	8012910 <USER_SPI_status>
 801239e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80123a0:	4618      	mov	r0, r3
 80123a2:	3708      	adds	r7, #8
 80123a4:	46bd      	mov	sp, r7
 80123a6:	bd80      	pop	{r7, pc}

080123a8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80123a8:	b580      	push	{r7, lr}
 80123aa:	b084      	sub	sp, #16
 80123ac:	af00      	add	r7, sp, #0
 80123ae:	60b9      	str	r1, [r7, #8]
 80123b0:	607a      	str	r2, [r7, #4]
 80123b2:	603b      	str	r3, [r7, #0]
 80123b4:	4603      	mov	r3, r0
 80123b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 80123b8:	7bf8      	ldrb	r0, [r7, #15]
 80123ba:	683b      	ldr	r3, [r7, #0]
 80123bc:	687a      	ldr	r2, [r7, #4]
 80123be:	68b9      	ldr	r1, [r7, #8]
 80123c0:	f000 fabc 	bl	801293c <USER_SPI_read>
 80123c4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80123c6:	4618      	mov	r0, r3
 80123c8:	3710      	adds	r7, #16
 80123ca:	46bd      	mov	sp, r7
 80123cc:	bd80      	pop	{r7, pc}

080123ce <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80123ce:	b580      	push	{r7, lr}
 80123d0:	b084      	sub	sp, #16
 80123d2:	af00      	add	r7, sp, #0
 80123d4:	60b9      	str	r1, [r7, #8]
 80123d6:	607a      	str	r2, [r7, #4]
 80123d8:	603b      	str	r3, [r7, #0]
 80123da:	4603      	mov	r3, r0
 80123dc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 80123de:	7bf8      	ldrb	r0, [r7, #15]
 80123e0:	683b      	ldr	r3, [r7, #0]
 80123e2:	687a      	ldr	r2, [r7, #4]
 80123e4:	68b9      	ldr	r1, [r7, #8]
 80123e6:	f000 fb0f 	bl	8012a08 <USER_SPI_write>
 80123ea:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80123ec:	4618      	mov	r0, r3
 80123ee:	3710      	adds	r7, #16
 80123f0:	46bd      	mov	sp, r7
 80123f2:	bd80      	pop	{r7, pc}

080123f4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80123f4:	b580      	push	{r7, lr}
 80123f6:	b082      	sub	sp, #8
 80123f8:	af00      	add	r7, sp, #0
 80123fa:	4603      	mov	r3, r0
 80123fc:	603a      	str	r2, [r7, #0]
 80123fe:	71fb      	strb	r3, [r7, #7]
 8012400:	460b      	mov	r3, r1
 8012402:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8012404:	79b9      	ldrb	r1, [r7, #6]
 8012406:	79fb      	ldrb	r3, [r7, #7]
 8012408:	683a      	ldr	r2, [r7, #0]
 801240a:	4618      	mov	r0, r3
 801240c:	f000 fb78 	bl	8012b00 <USER_SPI_ioctl>
 8012410:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8012412:	4618      	mov	r0, r3
 8012414:	3708      	adds	r7, #8
 8012416:	46bd      	mov	sp, r7
 8012418:	bd80      	pop	{r7, pc}
	...

0801241c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 801241c:	b580      	push	{r7, lr}
 801241e:	b082      	sub	sp, #8
 8012420:	af00      	add	r7, sp, #0
 8012422:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8012424:	f7fa f864 	bl	800c4f0 <HAL_GetTick>
 8012428:	4603      	mov	r3, r0
 801242a:	4a04      	ldr	r2, [pc, #16]	; (801243c <SPI_Timer_On+0x20>)
 801242c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 801242e:	4a04      	ldr	r2, [pc, #16]	; (8012440 <SPI_Timer_On+0x24>)
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	6013      	str	r3, [r2, #0]
}
 8012434:	bf00      	nop
 8012436:	3708      	adds	r7, #8
 8012438:	46bd      	mov	sp, r7
 801243a:	bd80      	pop	{r7, pc}
 801243c:	20009cb4 	.word	0x20009cb4
 8012440:	20009cb8 	.word	0x20009cb8

08012444 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8012444:	b580      	push	{r7, lr}
 8012446:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8012448:	f7fa f852 	bl	800c4f0 <HAL_GetTick>
 801244c:	4602      	mov	r2, r0
 801244e:	4b06      	ldr	r3, [pc, #24]	; (8012468 <SPI_Timer_Status+0x24>)
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	1ad2      	subs	r2, r2, r3
 8012454:	4b05      	ldr	r3, [pc, #20]	; (801246c <SPI_Timer_Status+0x28>)
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	429a      	cmp	r2, r3
 801245a:	bf34      	ite	cc
 801245c:	2301      	movcc	r3, #1
 801245e:	2300      	movcs	r3, #0
 8012460:	b2db      	uxtb	r3, r3
}
 8012462:	4618      	mov	r0, r3
 8012464:	bd80      	pop	{r7, pc}
 8012466:	bf00      	nop
 8012468:	20009cb4 	.word	0x20009cb4
 801246c:	20009cb8 	.word	0x20009cb8

08012470 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8012470:	b580      	push	{r7, lr}
 8012472:	b086      	sub	sp, #24
 8012474:	af02      	add	r7, sp, #8
 8012476:	4603      	mov	r3, r0
 8012478:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 801247a:	f107 020f 	add.w	r2, r7, #15
 801247e:	1df9      	adds	r1, r7, #7
 8012480:	2332      	movs	r3, #50	; 0x32
 8012482:	9300      	str	r3, [sp, #0]
 8012484:	2301      	movs	r3, #1
 8012486:	4804      	ldr	r0, [pc, #16]	; (8012498 <xchg_spi+0x28>)
 8012488:	f7fe f822 	bl	80104d0 <HAL_SPI_TransmitReceive>
    return rxDat;
 801248c:	7bfb      	ldrb	r3, [r7, #15]
}
 801248e:	4618      	mov	r0, r3
 8012490:	3710      	adds	r7, #16
 8012492:	46bd      	mov	sp, r7
 8012494:	bd80      	pop	{r7, pc}
 8012496:	bf00      	nop
 8012498:	200087e4 	.word	0x200087e4

0801249c <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 801249c:	b590      	push	{r4, r7, lr}
 801249e:	b085      	sub	sp, #20
 80124a0:	af00      	add	r7, sp, #0
 80124a2:	6078      	str	r0, [r7, #4]
 80124a4:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80124a6:	2300      	movs	r3, #0
 80124a8:	60fb      	str	r3, [r7, #12]
 80124aa:	e00a      	b.n	80124c2 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80124ac:	687a      	ldr	r2, [r7, #4]
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	18d4      	adds	r4, r2, r3
 80124b2:	20ff      	movs	r0, #255	; 0xff
 80124b4:	f7ff ffdc 	bl	8012470 <xchg_spi>
 80124b8:	4603      	mov	r3, r0
 80124ba:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	3301      	adds	r3, #1
 80124c0:	60fb      	str	r3, [r7, #12]
 80124c2:	68fa      	ldr	r2, [r7, #12]
 80124c4:	683b      	ldr	r3, [r7, #0]
 80124c6:	429a      	cmp	r2, r3
 80124c8:	d3f0      	bcc.n	80124ac <rcvr_spi_multi+0x10>
	}
}
 80124ca:	bf00      	nop
 80124cc:	bf00      	nop
 80124ce:	3714      	adds	r7, #20
 80124d0:	46bd      	mov	sp, r7
 80124d2:	bd90      	pop	{r4, r7, pc}

080124d4 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80124d4:	b580      	push	{r7, lr}
 80124d6:	b084      	sub	sp, #16
 80124d8:	af00      	add	r7, sp, #0
 80124da:	6078      	str	r0, [r7, #4]
 80124dc:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 80124de:	2300      	movs	r3, #0
 80124e0:	60fb      	str	r3, [r7, #12]
 80124e2:	e009      	b.n	80124f8 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 80124e4:	687a      	ldr	r2, [r7, #4]
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	4413      	add	r3, r2
 80124ea:	781b      	ldrb	r3, [r3, #0]
 80124ec:	4618      	mov	r0, r3
 80124ee:	f7ff ffbf 	bl	8012470 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	3301      	adds	r3, #1
 80124f6:	60fb      	str	r3, [r7, #12]
 80124f8:	68fa      	ldr	r2, [r7, #12]
 80124fa:	683b      	ldr	r3, [r7, #0]
 80124fc:	429a      	cmp	r2, r3
 80124fe:	d3f1      	bcc.n	80124e4 <xmit_spi_multi+0x10>
	}
}
 8012500:	bf00      	nop
 8012502:	bf00      	nop
 8012504:	3710      	adds	r7, #16
 8012506:	46bd      	mov	sp, r7
 8012508:	bd80      	pop	{r7, pc}

0801250a <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 801250a:	b580      	push	{r7, lr}
 801250c:	b086      	sub	sp, #24
 801250e:	af00      	add	r7, sp, #0
 8012510:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8012512:	f7f9 ffed 	bl	800c4f0 <HAL_GetTick>
 8012516:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 801251c:	20ff      	movs	r0, #255	; 0xff
 801251e:	f7ff ffa7 	bl	8012470 <xchg_spi>
 8012522:	4603      	mov	r3, r0
 8012524:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8012526:	7bfb      	ldrb	r3, [r7, #15]
 8012528:	2bff      	cmp	r3, #255	; 0xff
 801252a:	d007      	beq.n	801253c <wait_ready+0x32>
 801252c:	f7f9 ffe0 	bl	800c4f0 <HAL_GetTick>
 8012530:	4602      	mov	r2, r0
 8012532:	697b      	ldr	r3, [r7, #20]
 8012534:	1ad3      	subs	r3, r2, r3
 8012536:	693a      	ldr	r2, [r7, #16]
 8012538:	429a      	cmp	r2, r3
 801253a:	d8ef      	bhi.n	801251c <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 801253c:	7bfb      	ldrb	r3, [r7, #15]
 801253e:	2bff      	cmp	r3, #255	; 0xff
 8012540:	bf0c      	ite	eq
 8012542:	2301      	moveq	r3, #1
 8012544:	2300      	movne	r3, #0
 8012546:	b2db      	uxtb	r3, r3
}
 8012548:	4618      	mov	r0, r3
 801254a:	3718      	adds	r7, #24
 801254c:	46bd      	mov	sp, r7
 801254e:	bd80      	pop	{r7, pc}

08012550 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8012550:	b580      	push	{r7, lr}
 8012552:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8012554:	2201      	movs	r2, #1
 8012556:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801255a:	4804      	ldr	r0, [pc, #16]	; (801256c <despiselect+0x1c>)
 801255c:	f7fa fee0 	bl	800d320 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8012560:	20ff      	movs	r0, #255	; 0xff
 8012562:	f7ff ff85 	bl	8012470 <xchg_spi>

}
 8012566:	bf00      	nop
 8012568:	bd80      	pop	{r7, pc}
 801256a:	bf00      	nop
 801256c:	40021400 	.word	0x40021400

08012570 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8012570:	b580      	push	{r7, lr}
 8012572:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8012574:	2200      	movs	r2, #0
 8012576:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801257a:	480a      	ldr	r0, [pc, #40]	; (80125a4 <spiselect+0x34>)
 801257c:	f7fa fed0 	bl	800d320 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8012580:	20ff      	movs	r0, #255	; 0xff
 8012582:	f7ff ff75 	bl	8012470 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8012586:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801258a:	f7ff ffbe 	bl	801250a <wait_ready>
 801258e:	4603      	mov	r3, r0
 8012590:	2b00      	cmp	r3, #0
 8012592:	d001      	beq.n	8012598 <spiselect+0x28>
 8012594:	2301      	movs	r3, #1
 8012596:	e002      	b.n	801259e <spiselect+0x2e>

	despiselect();
 8012598:	f7ff ffda 	bl	8012550 <despiselect>
	return 0;	/* Timeout */
 801259c:	2300      	movs	r3, #0
}
 801259e:	4618      	mov	r0, r3
 80125a0:	bd80      	pop	{r7, pc}
 80125a2:	bf00      	nop
 80125a4:	40021400 	.word	0x40021400

080125a8 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80125a8:	b580      	push	{r7, lr}
 80125aa:	b084      	sub	sp, #16
 80125ac:	af00      	add	r7, sp, #0
 80125ae:	6078      	str	r0, [r7, #4]
 80125b0:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80125b2:	20c8      	movs	r0, #200	; 0xc8
 80125b4:	f7ff ff32 	bl	801241c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80125b8:	20ff      	movs	r0, #255	; 0xff
 80125ba:	f7ff ff59 	bl	8012470 <xchg_spi>
 80125be:	4603      	mov	r3, r0
 80125c0:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80125c2:	7bfb      	ldrb	r3, [r7, #15]
 80125c4:	2bff      	cmp	r3, #255	; 0xff
 80125c6:	d104      	bne.n	80125d2 <rcvr_datablock+0x2a>
 80125c8:	f7ff ff3c 	bl	8012444 <SPI_Timer_Status>
 80125cc:	4603      	mov	r3, r0
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d1f2      	bne.n	80125b8 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80125d2:	7bfb      	ldrb	r3, [r7, #15]
 80125d4:	2bfe      	cmp	r3, #254	; 0xfe
 80125d6:	d001      	beq.n	80125dc <rcvr_datablock+0x34>
 80125d8:	2300      	movs	r3, #0
 80125da:	e00a      	b.n	80125f2 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80125dc:	6839      	ldr	r1, [r7, #0]
 80125de:	6878      	ldr	r0, [r7, #4]
 80125e0:	f7ff ff5c 	bl	801249c <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80125e4:	20ff      	movs	r0, #255	; 0xff
 80125e6:	f7ff ff43 	bl	8012470 <xchg_spi>
 80125ea:	20ff      	movs	r0, #255	; 0xff
 80125ec:	f7ff ff40 	bl	8012470 <xchg_spi>

	return 1;						/* Function succeeded */
 80125f0:	2301      	movs	r3, #1
}
 80125f2:	4618      	mov	r0, r3
 80125f4:	3710      	adds	r7, #16
 80125f6:	46bd      	mov	sp, r7
 80125f8:	bd80      	pop	{r7, pc}

080125fa <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80125fa:	b580      	push	{r7, lr}
 80125fc:	b084      	sub	sp, #16
 80125fe:	af00      	add	r7, sp, #0
 8012600:	6078      	str	r0, [r7, #4]
 8012602:	460b      	mov	r3, r1
 8012604:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8012606:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801260a:	f7ff ff7e 	bl	801250a <wait_ready>
 801260e:	4603      	mov	r3, r0
 8012610:	2b00      	cmp	r3, #0
 8012612:	d101      	bne.n	8012618 <xmit_datablock+0x1e>
 8012614:	2300      	movs	r3, #0
 8012616:	e01e      	b.n	8012656 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8012618:	78fb      	ldrb	r3, [r7, #3]
 801261a:	4618      	mov	r0, r3
 801261c:	f7ff ff28 	bl	8012470 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8012620:	78fb      	ldrb	r3, [r7, #3]
 8012622:	2bfd      	cmp	r3, #253	; 0xfd
 8012624:	d016      	beq.n	8012654 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8012626:	f44f 7100 	mov.w	r1, #512	; 0x200
 801262a:	6878      	ldr	r0, [r7, #4]
 801262c:	f7ff ff52 	bl	80124d4 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8012630:	20ff      	movs	r0, #255	; 0xff
 8012632:	f7ff ff1d 	bl	8012470 <xchg_spi>
 8012636:	20ff      	movs	r0, #255	; 0xff
 8012638:	f7ff ff1a 	bl	8012470 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 801263c:	20ff      	movs	r0, #255	; 0xff
 801263e:	f7ff ff17 	bl	8012470 <xchg_spi>
 8012642:	4603      	mov	r3, r0
 8012644:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8012646:	7bfb      	ldrb	r3, [r7, #15]
 8012648:	f003 031f 	and.w	r3, r3, #31
 801264c:	2b05      	cmp	r3, #5
 801264e:	d001      	beq.n	8012654 <xmit_datablock+0x5a>
 8012650:	2300      	movs	r3, #0
 8012652:	e000      	b.n	8012656 <xmit_datablock+0x5c>
	}
	return 1;
 8012654:	2301      	movs	r3, #1
}
 8012656:	4618      	mov	r0, r3
 8012658:	3710      	adds	r7, #16
 801265a:	46bd      	mov	sp, r7
 801265c:	bd80      	pop	{r7, pc}

0801265e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 801265e:	b580      	push	{r7, lr}
 8012660:	b084      	sub	sp, #16
 8012662:	af00      	add	r7, sp, #0
 8012664:	4603      	mov	r3, r0
 8012666:	6039      	str	r1, [r7, #0]
 8012668:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 801266a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801266e:	2b00      	cmp	r3, #0
 8012670:	da0e      	bge.n	8012690 <send_cmd+0x32>
		cmd &= 0x7F;
 8012672:	79fb      	ldrb	r3, [r7, #7]
 8012674:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012678:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 801267a:	2100      	movs	r1, #0
 801267c:	2037      	movs	r0, #55	; 0x37
 801267e:	f7ff ffee 	bl	801265e <send_cmd>
 8012682:	4603      	mov	r3, r0
 8012684:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8012686:	7bbb      	ldrb	r3, [r7, #14]
 8012688:	2b01      	cmp	r3, #1
 801268a:	d901      	bls.n	8012690 <send_cmd+0x32>
 801268c:	7bbb      	ldrb	r3, [r7, #14]
 801268e:	e051      	b.n	8012734 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8012690:	79fb      	ldrb	r3, [r7, #7]
 8012692:	2b0c      	cmp	r3, #12
 8012694:	d008      	beq.n	80126a8 <send_cmd+0x4a>
		despiselect();
 8012696:	f7ff ff5b 	bl	8012550 <despiselect>
		if (!spiselect()) return 0xFF;
 801269a:	f7ff ff69 	bl	8012570 <spiselect>
 801269e:	4603      	mov	r3, r0
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d101      	bne.n	80126a8 <send_cmd+0x4a>
 80126a4:	23ff      	movs	r3, #255	; 0xff
 80126a6:	e045      	b.n	8012734 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80126a8:	79fb      	ldrb	r3, [r7, #7]
 80126aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80126ae:	b2db      	uxtb	r3, r3
 80126b0:	4618      	mov	r0, r3
 80126b2:	f7ff fedd 	bl	8012470 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80126b6:	683b      	ldr	r3, [r7, #0]
 80126b8:	0e1b      	lsrs	r3, r3, #24
 80126ba:	b2db      	uxtb	r3, r3
 80126bc:	4618      	mov	r0, r3
 80126be:	f7ff fed7 	bl	8012470 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80126c2:	683b      	ldr	r3, [r7, #0]
 80126c4:	0c1b      	lsrs	r3, r3, #16
 80126c6:	b2db      	uxtb	r3, r3
 80126c8:	4618      	mov	r0, r3
 80126ca:	f7ff fed1 	bl	8012470 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80126ce:	683b      	ldr	r3, [r7, #0]
 80126d0:	0a1b      	lsrs	r3, r3, #8
 80126d2:	b2db      	uxtb	r3, r3
 80126d4:	4618      	mov	r0, r3
 80126d6:	f7ff fecb 	bl	8012470 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80126da:	683b      	ldr	r3, [r7, #0]
 80126dc:	b2db      	uxtb	r3, r3
 80126de:	4618      	mov	r0, r3
 80126e0:	f7ff fec6 	bl	8012470 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80126e4:	2301      	movs	r3, #1
 80126e6:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80126e8:	79fb      	ldrb	r3, [r7, #7]
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d101      	bne.n	80126f2 <send_cmd+0x94>
 80126ee:	2395      	movs	r3, #149	; 0x95
 80126f0:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80126f2:	79fb      	ldrb	r3, [r7, #7]
 80126f4:	2b08      	cmp	r3, #8
 80126f6:	d101      	bne.n	80126fc <send_cmd+0x9e>
 80126f8:	2387      	movs	r3, #135	; 0x87
 80126fa:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80126fc:	7bfb      	ldrb	r3, [r7, #15]
 80126fe:	4618      	mov	r0, r3
 8012700:	f7ff feb6 	bl	8012470 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8012704:	79fb      	ldrb	r3, [r7, #7]
 8012706:	2b0c      	cmp	r3, #12
 8012708:	d102      	bne.n	8012710 <send_cmd+0xb2>
 801270a:	20ff      	movs	r0, #255	; 0xff
 801270c:	f7ff feb0 	bl	8012470 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8012710:	230a      	movs	r3, #10
 8012712:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8012714:	20ff      	movs	r0, #255	; 0xff
 8012716:	f7ff feab 	bl	8012470 <xchg_spi>
 801271a:	4603      	mov	r3, r0
 801271c:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 801271e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012722:	2b00      	cmp	r3, #0
 8012724:	da05      	bge.n	8012732 <send_cmd+0xd4>
 8012726:	7bfb      	ldrb	r3, [r7, #15]
 8012728:	3b01      	subs	r3, #1
 801272a:	73fb      	strb	r3, [r7, #15]
 801272c:	7bfb      	ldrb	r3, [r7, #15]
 801272e:	2b00      	cmp	r3, #0
 8012730:	d1f0      	bne.n	8012714 <send_cmd+0xb6>

	return res;							/* Return received response */
 8012732:	7bbb      	ldrb	r3, [r7, #14]
}
 8012734:	4618      	mov	r0, r3
 8012736:	3710      	adds	r7, #16
 8012738:	46bd      	mov	sp, r7
 801273a:	bd80      	pop	{r7, pc}

0801273c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 801273c:	b590      	push	{r4, r7, lr}
 801273e:	b085      	sub	sp, #20
 8012740:	af00      	add	r7, sp, #0
 8012742:	4603      	mov	r3, r0
 8012744:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8012746:	79fb      	ldrb	r3, [r7, #7]
 8012748:	2b00      	cmp	r3, #0
 801274a:	d001      	beq.n	8012750 <USER_SPI_initialize+0x14>
 801274c:	2301      	movs	r3, #1
 801274e:	e0d4      	b.n	80128fa <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8012750:	4b6c      	ldr	r3, [pc, #432]	; (8012904 <USER_SPI_initialize+0x1c8>)
 8012752:	781b      	ldrb	r3, [r3, #0]
 8012754:	b2db      	uxtb	r3, r3
 8012756:	f003 0302 	and.w	r3, r3, #2
 801275a:	2b00      	cmp	r3, #0
 801275c:	d003      	beq.n	8012766 <USER_SPI_initialize+0x2a>
 801275e:	4b69      	ldr	r3, [pc, #420]	; (8012904 <USER_SPI_initialize+0x1c8>)
 8012760:	781b      	ldrb	r3, [r3, #0]
 8012762:	b2db      	uxtb	r3, r3
 8012764:	e0c9      	b.n	80128fa <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 8012766:	4b68      	ldr	r3, [pc, #416]	; (8012908 <USER_SPI_initialize+0x1cc>)
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	681a      	ldr	r2, [r3, #0]
 801276c:	4b66      	ldr	r3, [pc, #408]	; (8012908 <USER_SPI_initialize+0x1cc>)
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 8012774:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8012776:	230a      	movs	r3, #10
 8012778:	73fb      	strb	r3, [r7, #15]
 801277a:	e005      	b.n	8012788 <USER_SPI_initialize+0x4c>
 801277c:	20ff      	movs	r0, #255	; 0xff
 801277e:	f7ff fe77 	bl	8012470 <xchg_spi>
 8012782:	7bfb      	ldrb	r3, [r7, #15]
 8012784:	3b01      	subs	r3, #1
 8012786:	73fb      	strb	r3, [r7, #15]
 8012788:	7bfb      	ldrb	r3, [r7, #15]
 801278a:	2b00      	cmp	r3, #0
 801278c:	d1f6      	bne.n	801277c <USER_SPI_initialize+0x40>

	ty = 0;
 801278e:	2300      	movs	r3, #0
 8012790:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8012792:	2100      	movs	r1, #0
 8012794:	2000      	movs	r0, #0
 8012796:	f7ff ff62 	bl	801265e <send_cmd>
 801279a:	4603      	mov	r3, r0
 801279c:	2b01      	cmp	r3, #1
 801279e:	f040 808b 	bne.w	80128b8 <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80127a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80127a6:	f7ff fe39 	bl	801241c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80127aa:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80127ae:	2008      	movs	r0, #8
 80127b0:	f7ff ff55 	bl	801265e <send_cmd>
 80127b4:	4603      	mov	r3, r0
 80127b6:	2b01      	cmp	r3, #1
 80127b8:	d151      	bne.n	801285e <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80127ba:	2300      	movs	r3, #0
 80127bc:	73fb      	strb	r3, [r7, #15]
 80127be:	e00d      	b.n	80127dc <USER_SPI_initialize+0xa0>
 80127c0:	7bfc      	ldrb	r4, [r7, #15]
 80127c2:	20ff      	movs	r0, #255	; 0xff
 80127c4:	f7ff fe54 	bl	8012470 <xchg_spi>
 80127c8:	4603      	mov	r3, r0
 80127ca:	461a      	mov	r2, r3
 80127cc:	f107 0310 	add.w	r3, r7, #16
 80127d0:	4423      	add	r3, r4
 80127d2:	f803 2c08 	strb.w	r2, [r3, #-8]
 80127d6:	7bfb      	ldrb	r3, [r7, #15]
 80127d8:	3301      	adds	r3, #1
 80127da:	73fb      	strb	r3, [r7, #15]
 80127dc:	7bfb      	ldrb	r3, [r7, #15]
 80127de:	2b03      	cmp	r3, #3
 80127e0:	d9ee      	bls.n	80127c0 <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80127e2:	7abb      	ldrb	r3, [r7, #10]
 80127e4:	2b01      	cmp	r3, #1
 80127e6:	d167      	bne.n	80128b8 <USER_SPI_initialize+0x17c>
 80127e8:	7afb      	ldrb	r3, [r7, #11]
 80127ea:	2baa      	cmp	r3, #170	; 0xaa
 80127ec:	d164      	bne.n	80128b8 <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80127ee:	bf00      	nop
 80127f0:	f7ff fe28 	bl	8012444 <SPI_Timer_Status>
 80127f4:	4603      	mov	r3, r0
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d007      	beq.n	801280a <USER_SPI_initialize+0xce>
 80127fa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80127fe:	20a9      	movs	r0, #169	; 0xa9
 8012800:	f7ff ff2d 	bl	801265e <send_cmd>
 8012804:	4603      	mov	r3, r0
 8012806:	2b00      	cmp	r3, #0
 8012808:	d1f2      	bne.n	80127f0 <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 801280a:	f7ff fe1b 	bl	8012444 <SPI_Timer_Status>
 801280e:	4603      	mov	r3, r0
 8012810:	2b00      	cmp	r3, #0
 8012812:	d051      	beq.n	80128b8 <USER_SPI_initialize+0x17c>
 8012814:	2100      	movs	r1, #0
 8012816:	203a      	movs	r0, #58	; 0x3a
 8012818:	f7ff ff21 	bl	801265e <send_cmd>
 801281c:	4603      	mov	r3, r0
 801281e:	2b00      	cmp	r3, #0
 8012820:	d14a      	bne.n	80128b8 <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8012822:	2300      	movs	r3, #0
 8012824:	73fb      	strb	r3, [r7, #15]
 8012826:	e00d      	b.n	8012844 <USER_SPI_initialize+0x108>
 8012828:	7bfc      	ldrb	r4, [r7, #15]
 801282a:	20ff      	movs	r0, #255	; 0xff
 801282c:	f7ff fe20 	bl	8012470 <xchg_spi>
 8012830:	4603      	mov	r3, r0
 8012832:	461a      	mov	r2, r3
 8012834:	f107 0310 	add.w	r3, r7, #16
 8012838:	4423      	add	r3, r4
 801283a:	f803 2c08 	strb.w	r2, [r3, #-8]
 801283e:	7bfb      	ldrb	r3, [r7, #15]
 8012840:	3301      	adds	r3, #1
 8012842:	73fb      	strb	r3, [r7, #15]
 8012844:	7bfb      	ldrb	r3, [r7, #15]
 8012846:	2b03      	cmp	r3, #3
 8012848:	d9ee      	bls.n	8012828 <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 801284a:	7a3b      	ldrb	r3, [r7, #8]
 801284c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012850:	2b00      	cmp	r3, #0
 8012852:	d001      	beq.n	8012858 <USER_SPI_initialize+0x11c>
 8012854:	230c      	movs	r3, #12
 8012856:	e000      	b.n	801285a <USER_SPI_initialize+0x11e>
 8012858:	2304      	movs	r3, #4
 801285a:	737b      	strb	r3, [r7, #13]
 801285c:	e02c      	b.n	80128b8 <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 801285e:	2100      	movs	r1, #0
 8012860:	20a9      	movs	r0, #169	; 0xa9
 8012862:	f7ff fefc 	bl	801265e <send_cmd>
 8012866:	4603      	mov	r3, r0
 8012868:	2b01      	cmp	r3, #1
 801286a:	d804      	bhi.n	8012876 <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 801286c:	2302      	movs	r3, #2
 801286e:	737b      	strb	r3, [r7, #13]
 8012870:	23a9      	movs	r3, #169	; 0xa9
 8012872:	73bb      	strb	r3, [r7, #14]
 8012874:	e003      	b.n	801287e <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8012876:	2301      	movs	r3, #1
 8012878:	737b      	strb	r3, [r7, #13]
 801287a:	2301      	movs	r3, #1
 801287c:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 801287e:	bf00      	nop
 8012880:	f7ff fde0 	bl	8012444 <SPI_Timer_Status>
 8012884:	4603      	mov	r3, r0
 8012886:	2b00      	cmp	r3, #0
 8012888:	d007      	beq.n	801289a <USER_SPI_initialize+0x15e>
 801288a:	7bbb      	ldrb	r3, [r7, #14]
 801288c:	2100      	movs	r1, #0
 801288e:	4618      	mov	r0, r3
 8012890:	f7ff fee5 	bl	801265e <send_cmd>
 8012894:	4603      	mov	r3, r0
 8012896:	2b00      	cmp	r3, #0
 8012898:	d1f2      	bne.n	8012880 <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 801289a:	f7ff fdd3 	bl	8012444 <SPI_Timer_Status>
 801289e:	4603      	mov	r3, r0
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d007      	beq.n	80128b4 <USER_SPI_initialize+0x178>
 80128a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80128a8:	2010      	movs	r0, #16
 80128aa:	f7ff fed8 	bl	801265e <send_cmd>
 80128ae:	4603      	mov	r3, r0
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d001      	beq.n	80128b8 <USER_SPI_initialize+0x17c>
				ty = 0;
 80128b4:	2300      	movs	r3, #0
 80128b6:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80128b8:	4a14      	ldr	r2, [pc, #80]	; (801290c <USER_SPI_initialize+0x1d0>)
 80128ba:	7b7b      	ldrb	r3, [r7, #13]
 80128bc:	7013      	strb	r3, [r2, #0]
	despiselect();
 80128be:	f7ff fe47 	bl	8012550 <despiselect>

	if (ty) {			/* OK */
 80128c2:	7b7b      	ldrb	r3, [r7, #13]
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d012      	beq.n	80128ee <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 80128c8:	4b0f      	ldr	r3, [pc, #60]	; (8012908 <USER_SPI_initialize+0x1cc>)
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80128d2:	4b0d      	ldr	r3, [pc, #52]	; (8012908 <USER_SPI_initialize+0x1cc>)
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	f042 0208 	orr.w	r2, r2, #8
 80128da:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80128dc:	4b09      	ldr	r3, [pc, #36]	; (8012904 <USER_SPI_initialize+0x1c8>)
 80128de:	781b      	ldrb	r3, [r3, #0]
 80128e0:	b2db      	uxtb	r3, r3
 80128e2:	f023 0301 	bic.w	r3, r3, #1
 80128e6:	b2da      	uxtb	r2, r3
 80128e8:	4b06      	ldr	r3, [pc, #24]	; (8012904 <USER_SPI_initialize+0x1c8>)
 80128ea:	701a      	strb	r2, [r3, #0]
 80128ec:	e002      	b.n	80128f4 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80128ee:	4b05      	ldr	r3, [pc, #20]	; (8012904 <USER_SPI_initialize+0x1c8>)
 80128f0:	2201      	movs	r2, #1
 80128f2:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80128f4:	4b03      	ldr	r3, [pc, #12]	; (8012904 <USER_SPI_initialize+0x1c8>)
 80128f6:	781b      	ldrb	r3, [r3, #0]
 80128f8:	b2db      	uxtb	r3, r3
}
 80128fa:	4618      	mov	r0, r3
 80128fc:	3714      	adds	r7, #20
 80128fe:	46bd      	mov	sp, r7
 8012900:	bd90      	pop	{r4, r7, pc}
 8012902:	bf00      	nop
 8012904:	200000e8 	.word	0x200000e8
 8012908:	200087e4 	.word	0x200087e4
 801290c:	20000844 	.word	0x20000844

08012910 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8012910:	b480      	push	{r7}
 8012912:	b083      	sub	sp, #12
 8012914:	af00      	add	r7, sp, #0
 8012916:	4603      	mov	r3, r0
 8012918:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 801291a:	79fb      	ldrb	r3, [r7, #7]
 801291c:	2b00      	cmp	r3, #0
 801291e:	d001      	beq.n	8012924 <USER_SPI_status+0x14>
 8012920:	2301      	movs	r3, #1
 8012922:	e002      	b.n	801292a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8012924:	4b04      	ldr	r3, [pc, #16]	; (8012938 <USER_SPI_status+0x28>)
 8012926:	781b      	ldrb	r3, [r3, #0]
 8012928:	b2db      	uxtb	r3, r3
}
 801292a:	4618      	mov	r0, r3
 801292c:	370c      	adds	r7, #12
 801292e:	46bd      	mov	sp, r7
 8012930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012934:	4770      	bx	lr
 8012936:	bf00      	nop
 8012938:	200000e8 	.word	0x200000e8

0801293c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 801293c:	b580      	push	{r7, lr}
 801293e:	b084      	sub	sp, #16
 8012940:	af00      	add	r7, sp, #0
 8012942:	60b9      	str	r1, [r7, #8]
 8012944:	607a      	str	r2, [r7, #4]
 8012946:	603b      	str	r3, [r7, #0]
 8012948:	4603      	mov	r3, r0
 801294a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 801294c:	7bfb      	ldrb	r3, [r7, #15]
 801294e:	2b00      	cmp	r3, #0
 8012950:	d102      	bne.n	8012958 <USER_SPI_read+0x1c>
 8012952:	683b      	ldr	r3, [r7, #0]
 8012954:	2b00      	cmp	r3, #0
 8012956:	d101      	bne.n	801295c <USER_SPI_read+0x20>
 8012958:	2304      	movs	r3, #4
 801295a:	e04d      	b.n	80129f8 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 801295c:	4b28      	ldr	r3, [pc, #160]	; (8012a00 <USER_SPI_read+0xc4>)
 801295e:	781b      	ldrb	r3, [r3, #0]
 8012960:	b2db      	uxtb	r3, r3
 8012962:	f003 0301 	and.w	r3, r3, #1
 8012966:	2b00      	cmp	r3, #0
 8012968:	d001      	beq.n	801296e <USER_SPI_read+0x32>
 801296a:	2303      	movs	r3, #3
 801296c:	e044      	b.n	80129f8 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 801296e:	4b25      	ldr	r3, [pc, #148]	; (8012a04 <USER_SPI_read+0xc8>)
 8012970:	781b      	ldrb	r3, [r3, #0]
 8012972:	f003 0308 	and.w	r3, r3, #8
 8012976:	2b00      	cmp	r3, #0
 8012978:	d102      	bne.n	8012980 <USER_SPI_read+0x44>
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	025b      	lsls	r3, r3, #9
 801297e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8012980:	683b      	ldr	r3, [r7, #0]
 8012982:	2b01      	cmp	r3, #1
 8012984:	d111      	bne.n	80129aa <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8012986:	6879      	ldr	r1, [r7, #4]
 8012988:	2011      	movs	r0, #17
 801298a:	f7ff fe68 	bl	801265e <send_cmd>
 801298e:	4603      	mov	r3, r0
 8012990:	2b00      	cmp	r3, #0
 8012992:	d129      	bne.n	80129e8 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8012994:	f44f 7100 	mov.w	r1, #512	; 0x200
 8012998:	68b8      	ldr	r0, [r7, #8]
 801299a:	f7ff fe05 	bl	80125a8 <rcvr_datablock>
 801299e:	4603      	mov	r3, r0
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d021      	beq.n	80129e8 <USER_SPI_read+0xac>
			count = 0;
 80129a4:	2300      	movs	r3, #0
 80129a6:	603b      	str	r3, [r7, #0]
 80129a8:	e01e      	b.n	80129e8 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80129aa:	6879      	ldr	r1, [r7, #4]
 80129ac:	2012      	movs	r0, #18
 80129ae:	f7ff fe56 	bl	801265e <send_cmd>
 80129b2:	4603      	mov	r3, r0
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d117      	bne.n	80129e8 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80129b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80129bc:	68b8      	ldr	r0, [r7, #8]
 80129be:	f7ff fdf3 	bl	80125a8 <rcvr_datablock>
 80129c2:	4603      	mov	r3, r0
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d00a      	beq.n	80129de <USER_SPI_read+0xa2>
				buff += 512;
 80129c8:	68bb      	ldr	r3, [r7, #8]
 80129ca:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80129ce:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80129d0:	683b      	ldr	r3, [r7, #0]
 80129d2:	3b01      	subs	r3, #1
 80129d4:	603b      	str	r3, [r7, #0]
 80129d6:	683b      	ldr	r3, [r7, #0]
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d1ed      	bne.n	80129b8 <USER_SPI_read+0x7c>
 80129dc:	e000      	b.n	80129e0 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80129de:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80129e0:	2100      	movs	r1, #0
 80129e2:	200c      	movs	r0, #12
 80129e4:	f7ff fe3b 	bl	801265e <send_cmd>
		}
	}
	despiselect();
 80129e8:	f7ff fdb2 	bl	8012550 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80129ec:	683b      	ldr	r3, [r7, #0]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	bf14      	ite	ne
 80129f2:	2301      	movne	r3, #1
 80129f4:	2300      	moveq	r3, #0
 80129f6:	b2db      	uxtb	r3, r3
}
 80129f8:	4618      	mov	r0, r3
 80129fa:	3710      	adds	r7, #16
 80129fc:	46bd      	mov	sp, r7
 80129fe:	bd80      	pop	{r7, pc}
 8012a00:	200000e8 	.word	0x200000e8
 8012a04:	20000844 	.word	0x20000844

08012a08 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8012a08:	b580      	push	{r7, lr}
 8012a0a:	b084      	sub	sp, #16
 8012a0c:	af00      	add	r7, sp, #0
 8012a0e:	60b9      	str	r1, [r7, #8]
 8012a10:	607a      	str	r2, [r7, #4]
 8012a12:	603b      	str	r3, [r7, #0]
 8012a14:	4603      	mov	r3, r0
 8012a16:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8012a18:	7bfb      	ldrb	r3, [r7, #15]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d102      	bne.n	8012a24 <USER_SPI_write+0x1c>
 8012a1e:	683b      	ldr	r3, [r7, #0]
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d101      	bne.n	8012a28 <USER_SPI_write+0x20>
 8012a24:	2304      	movs	r3, #4
 8012a26:	e063      	b.n	8012af0 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8012a28:	4b33      	ldr	r3, [pc, #204]	; (8012af8 <USER_SPI_write+0xf0>)
 8012a2a:	781b      	ldrb	r3, [r3, #0]
 8012a2c:	b2db      	uxtb	r3, r3
 8012a2e:	f003 0301 	and.w	r3, r3, #1
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d001      	beq.n	8012a3a <USER_SPI_write+0x32>
 8012a36:	2303      	movs	r3, #3
 8012a38:	e05a      	b.n	8012af0 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8012a3a:	4b2f      	ldr	r3, [pc, #188]	; (8012af8 <USER_SPI_write+0xf0>)
 8012a3c:	781b      	ldrb	r3, [r3, #0]
 8012a3e:	b2db      	uxtb	r3, r3
 8012a40:	f003 0304 	and.w	r3, r3, #4
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d001      	beq.n	8012a4c <USER_SPI_write+0x44>
 8012a48:	2302      	movs	r3, #2
 8012a4a:	e051      	b.n	8012af0 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8012a4c:	4b2b      	ldr	r3, [pc, #172]	; (8012afc <USER_SPI_write+0xf4>)
 8012a4e:	781b      	ldrb	r3, [r3, #0]
 8012a50:	f003 0308 	and.w	r3, r3, #8
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d102      	bne.n	8012a5e <USER_SPI_write+0x56>
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	025b      	lsls	r3, r3, #9
 8012a5c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8012a5e:	683b      	ldr	r3, [r7, #0]
 8012a60:	2b01      	cmp	r3, #1
 8012a62:	d110      	bne.n	8012a86 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8012a64:	6879      	ldr	r1, [r7, #4]
 8012a66:	2018      	movs	r0, #24
 8012a68:	f7ff fdf9 	bl	801265e <send_cmd>
 8012a6c:	4603      	mov	r3, r0
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d136      	bne.n	8012ae0 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8012a72:	21fe      	movs	r1, #254	; 0xfe
 8012a74:	68b8      	ldr	r0, [r7, #8]
 8012a76:	f7ff fdc0 	bl	80125fa <xmit_datablock>
 8012a7a:	4603      	mov	r3, r0
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d02f      	beq.n	8012ae0 <USER_SPI_write+0xd8>
			count = 0;
 8012a80:	2300      	movs	r3, #0
 8012a82:	603b      	str	r3, [r7, #0]
 8012a84:	e02c      	b.n	8012ae0 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8012a86:	4b1d      	ldr	r3, [pc, #116]	; (8012afc <USER_SPI_write+0xf4>)
 8012a88:	781b      	ldrb	r3, [r3, #0]
 8012a8a:	f003 0306 	and.w	r3, r3, #6
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d003      	beq.n	8012a9a <USER_SPI_write+0x92>
 8012a92:	6839      	ldr	r1, [r7, #0]
 8012a94:	2097      	movs	r0, #151	; 0x97
 8012a96:	f7ff fde2 	bl	801265e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8012a9a:	6879      	ldr	r1, [r7, #4]
 8012a9c:	2019      	movs	r0, #25
 8012a9e:	f7ff fdde 	bl	801265e <send_cmd>
 8012aa2:	4603      	mov	r3, r0
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d11b      	bne.n	8012ae0 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8012aa8:	21fc      	movs	r1, #252	; 0xfc
 8012aaa:	68b8      	ldr	r0, [r7, #8]
 8012aac:	f7ff fda5 	bl	80125fa <xmit_datablock>
 8012ab0:	4603      	mov	r3, r0
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d00a      	beq.n	8012acc <USER_SPI_write+0xc4>
				buff += 512;
 8012ab6:	68bb      	ldr	r3, [r7, #8]
 8012ab8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8012abc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8012abe:	683b      	ldr	r3, [r7, #0]
 8012ac0:	3b01      	subs	r3, #1
 8012ac2:	603b      	str	r3, [r7, #0]
 8012ac4:	683b      	ldr	r3, [r7, #0]
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d1ee      	bne.n	8012aa8 <USER_SPI_write+0xa0>
 8012aca:	e000      	b.n	8012ace <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8012acc:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8012ace:	21fd      	movs	r1, #253	; 0xfd
 8012ad0:	2000      	movs	r0, #0
 8012ad2:	f7ff fd92 	bl	80125fa <xmit_datablock>
 8012ad6:	4603      	mov	r3, r0
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d101      	bne.n	8012ae0 <USER_SPI_write+0xd8>
 8012adc:	2301      	movs	r3, #1
 8012ade:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8012ae0:	f7ff fd36 	bl	8012550 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8012ae4:	683b      	ldr	r3, [r7, #0]
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	bf14      	ite	ne
 8012aea:	2301      	movne	r3, #1
 8012aec:	2300      	moveq	r3, #0
 8012aee:	b2db      	uxtb	r3, r3
}
 8012af0:	4618      	mov	r0, r3
 8012af2:	3710      	adds	r7, #16
 8012af4:	46bd      	mov	sp, r7
 8012af6:	bd80      	pop	{r7, pc}
 8012af8:	200000e8 	.word	0x200000e8
 8012afc:	20000844 	.word	0x20000844

08012b00 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8012b00:	b580      	push	{r7, lr}
 8012b02:	b08c      	sub	sp, #48	; 0x30
 8012b04:	af00      	add	r7, sp, #0
 8012b06:	4603      	mov	r3, r0
 8012b08:	603a      	str	r2, [r7, #0]
 8012b0a:	71fb      	strb	r3, [r7, #7]
 8012b0c:	460b      	mov	r3, r1
 8012b0e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8012b10:	79fb      	ldrb	r3, [r7, #7]
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d001      	beq.n	8012b1a <USER_SPI_ioctl+0x1a>
 8012b16:	2304      	movs	r3, #4
 8012b18:	e15a      	b.n	8012dd0 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8012b1a:	4baf      	ldr	r3, [pc, #700]	; (8012dd8 <USER_SPI_ioctl+0x2d8>)
 8012b1c:	781b      	ldrb	r3, [r3, #0]
 8012b1e:	b2db      	uxtb	r3, r3
 8012b20:	f003 0301 	and.w	r3, r3, #1
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d001      	beq.n	8012b2c <USER_SPI_ioctl+0x2c>
 8012b28:	2303      	movs	r3, #3
 8012b2a:	e151      	b.n	8012dd0 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8012b2c:	2301      	movs	r3, #1
 8012b2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8012b32:	79bb      	ldrb	r3, [r7, #6]
 8012b34:	2b04      	cmp	r3, #4
 8012b36:	f200 8136 	bhi.w	8012da6 <USER_SPI_ioctl+0x2a6>
 8012b3a:	a201      	add	r2, pc, #4	; (adr r2, 8012b40 <USER_SPI_ioctl+0x40>)
 8012b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b40:	08012b55 	.word	0x08012b55
 8012b44:	08012b69 	.word	0x08012b69
 8012b48:	08012da7 	.word	0x08012da7
 8012b4c:	08012c15 	.word	0x08012c15
 8012b50:	08012d0b 	.word	0x08012d0b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8012b54:	f7ff fd0c 	bl	8012570 <spiselect>
 8012b58:	4603      	mov	r3, r0
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	f000 8127 	beq.w	8012dae <USER_SPI_ioctl+0x2ae>
 8012b60:	2300      	movs	r3, #0
 8012b62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8012b66:	e122      	b.n	8012dae <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8012b68:	2100      	movs	r1, #0
 8012b6a:	2009      	movs	r0, #9
 8012b6c:	f7ff fd77 	bl	801265e <send_cmd>
 8012b70:	4603      	mov	r3, r0
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	f040 811d 	bne.w	8012db2 <USER_SPI_ioctl+0x2b2>
 8012b78:	f107 030c 	add.w	r3, r7, #12
 8012b7c:	2110      	movs	r1, #16
 8012b7e:	4618      	mov	r0, r3
 8012b80:	f7ff fd12 	bl	80125a8 <rcvr_datablock>
 8012b84:	4603      	mov	r3, r0
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	f000 8113 	beq.w	8012db2 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8012b8c:	7b3b      	ldrb	r3, [r7, #12]
 8012b8e:	099b      	lsrs	r3, r3, #6
 8012b90:	b2db      	uxtb	r3, r3
 8012b92:	2b01      	cmp	r3, #1
 8012b94:	d111      	bne.n	8012bba <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8012b96:	7d7b      	ldrb	r3, [r7, #21]
 8012b98:	461a      	mov	r2, r3
 8012b9a:	7d3b      	ldrb	r3, [r7, #20]
 8012b9c:	021b      	lsls	r3, r3, #8
 8012b9e:	4413      	add	r3, r2
 8012ba0:	461a      	mov	r2, r3
 8012ba2:	7cfb      	ldrb	r3, [r7, #19]
 8012ba4:	041b      	lsls	r3, r3, #16
 8012ba6:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8012baa:	4413      	add	r3, r2
 8012bac:	3301      	adds	r3, #1
 8012bae:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8012bb0:	69fb      	ldr	r3, [r7, #28]
 8012bb2:	029a      	lsls	r2, r3, #10
 8012bb4:	683b      	ldr	r3, [r7, #0]
 8012bb6:	601a      	str	r2, [r3, #0]
 8012bb8:	e028      	b.n	8012c0c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8012bba:	7c7b      	ldrb	r3, [r7, #17]
 8012bbc:	f003 030f 	and.w	r3, r3, #15
 8012bc0:	b2da      	uxtb	r2, r3
 8012bc2:	7dbb      	ldrb	r3, [r7, #22]
 8012bc4:	09db      	lsrs	r3, r3, #7
 8012bc6:	b2db      	uxtb	r3, r3
 8012bc8:	4413      	add	r3, r2
 8012bca:	b2da      	uxtb	r2, r3
 8012bcc:	7d7b      	ldrb	r3, [r7, #21]
 8012bce:	005b      	lsls	r3, r3, #1
 8012bd0:	b2db      	uxtb	r3, r3
 8012bd2:	f003 0306 	and.w	r3, r3, #6
 8012bd6:	b2db      	uxtb	r3, r3
 8012bd8:	4413      	add	r3, r2
 8012bda:	b2db      	uxtb	r3, r3
 8012bdc:	3302      	adds	r3, #2
 8012bde:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8012be2:	7d3b      	ldrb	r3, [r7, #20]
 8012be4:	099b      	lsrs	r3, r3, #6
 8012be6:	b2db      	uxtb	r3, r3
 8012be8:	461a      	mov	r2, r3
 8012bea:	7cfb      	ldrb	r3, [r7, #19]
 8012bec:	009b      	lsls	r3, r3, #2
 8012bee:	441a      	add	r2, r3
 8012bf0:	7cbb      	ldrb	r3, [r7, #18]
 8012bf2:	029b      	lsls	r3, r3, #10
 8012bf4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8012bf8:	4413      	add	r3, r2
 8012bfa:	3301      	adds	r3, #1
 8012bfc:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8012bfe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8012c02:	3b09      	subs	r3, #9
 8012c04:	69fa      	ldr	r2, [r7, #28]
 8012c06:	409a      	lsls	r2, r3
 8012c08:	683b      	ldr	r3, [r7, #0]
 8012c0a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8012c0c:	2300      	movs	r3, #0
 8012c0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8012c12:	e0ce      	b.n	8012db2 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8012c14:	4b71      	ldr	r3, [pc, #452]	; (8012ddc <USER_SPI_ioctl+0x2dc>)
 8012c16:	781b      	ldrb	r3, [r3, #0]
 8012c18:	f003 0304 	and.w	r3, r3, #4
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d031      	beq.n	8012c84 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8012c20:	2100      	movs	r1, #0
 8012c22:	208d      	movs	r0, #141	; 0x8d
 8012c24:	f7ff fd1b 	bl	801265e <send_cmd>
 8012c28:	4603      	mov	r3, r0
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	f040 80c3 	bne.w	8012db6 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8012c30:	20ff      	movs	r0, #255	; 0xff
 8012c32:	f7ff fc1d 	bl	8012470 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8012c36:	f107 030c 	add.w	r3, r7, #12
 8012c3a:	2110      	movs	r1, #16
 8012c3c:	4618      	mov	r0, r3
 8012c3e:	f7ff fcb3 	bl	80125a8 <rcvr_datablock>
 8012c42:	4603      	mov	r3, r0
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	f000 80b6 	beq.w	8012db6 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8012c4a:	2330      	movs	r3, #48	; 0x30
 8012c4c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8012c50:	e007      	b.n	8012c62 <USER_SPI_ioctl+0x162>
 8012c52:	20ff      	movs	r0, #255	; 0xff
 8012c54:	f7ff fc0c 	bl	8012470 <xchg_spi>
 8012c58:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8012c5c:	3b01      	subs	r3, #1
 8012c5e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8012c62:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d1f3      	bne.n	8012c52 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8012c6a:	7dbb      	ldrb	r3, [r7, #22]
 8012c6c:	091b      	lsrs	r3, r3, #4
 8012c6e:	b2db      	uxtb	r3, r3
 8012c70:	461a      	mov	r2, r3
 8012c72:	2310      	movs	r3, #16
 8012c74:	fa03 f202 	lsl.w	r2, r3, r2
 8012c78:	683b      	ldr	r3, [r7, #0]
 8012c7a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8012c7c:	2300      	movs	r3, #0
 8012c7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8012c82:	e098      	b.n	8012db6 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8012c84:	2100      	movs	r1, #0
 8012c86:	2009      	movs	r0, #9
 8012c88:	f7ff fce9 	bl	801265e <send_cmd>
 8012c8c:	4603      	mov	r3, r0
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	f040 8091 	bne.w	8012db6 <USER_SPI_ioctl+0x2b6>
 8012c94:	f107 030c 	add.w	r3, r7, #12
 8012c98:	2110      	movs	r1, #16
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	f7ff fc84 	bl	80125a8 <rcvr_datablock>
 8012ca0:	4603      	mov	r3, r0
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	f000 8087 	beq.w	8012db6 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8012ca8:	4b4c      	ldr	r3, [pc, #304]	; (8012ddc <USER_SPI_ioctl+0x2dc>)
 8012caa:	781b      	ldrb	r3, [r3, #0]
 8012cac:	f003 0302 	and.w	r3, r3, #2
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d012      	beq.n	8012cda <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8012cb4:	7dbb      	ldrb	r3, [r7, #22]
 8012cb6:	005b      	lsls	r3, r3, #1
 8012cb8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8012cbc:	7dfa      	ldrb	r2, [r7, #23]
 8012cbe:	09d2      	lsrs	r2, r2, #7
 8012cc0:	b2d2      	uxtb	r2, r2
 8012cc2:	4413      	add	r3, r2
 8012cc4:	1c5a      	adds	r2, r3, #1
 8012cc6:	7e7b      	ldrb	r3, [r7, #25]
 8012cc8:	099b      	lsrs	r3, r3, #6
 8012cca:	b2db      	uxtb	r3, r3
 8012ccc:	3b01      	subs	r3, #1
 8012cce:	fa02 f303 	lsl.w	r3, r2, r3
 8012cd2:	461a      	mov	r2, r3
 8012cd4:	683b      	ldr	r3, [r7, #0]
 8012cd6:	601a      	str	r2, [r3, #0]
 8012cd8:	e013      	b.n	8012d02 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8012cda:	7dbb      	ldrb	r3, [r7, #22]
 8012cdc:	109b      	asrs	r3, r3, #2
 8012cde:	b29b      	uxth	r3, r3
 8012ce0:	f003 031f 	and.w	r3, r3, #31
 8012ce4:	3301      	adds	r3, #1
 8012ce6:	7dfa      	ldrb	r2, [r7, #23]
 8012ce8:	00d2      	lsls	r2, r2, #3
 8012cea:	f002 0218 	and.w	r2, r2, #24
 8012cee:	7df9      	ldrb	r1, [r7, #23]
 8012cf0:	0949      	lsrs	r1, r1, #5
 8012cf2:	b2c9      	uxtb	r1, r1
 8012cf4:	440a      	add	r2, r1
 8012cf6:	3201      	adds	r2, #1
 8012cf8:	fb02 f303 	mul.w	r3, r2, r3
 8012cfc:	461a      	mov	r2, r3
 8012cfe:	683b      	ldr	r3, [r7, #0]
 8012d00:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8012d02:	2300      	movs	r3, #0
 8012d04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8012d08:	e055      	b.n	8012db6 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8012d0a:	4b34      	ldr	r3, [pc, #208]	; (8012ddc <USER_SPI_ioctl+0x2dc>)
 8012d0c:	781b      	ldrb	r3, [r3, #0]
 8012d0e:	f003 0306 	and.w	r3, r3, #6
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d051      	beq.n	8012dba <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8012d16:	f107 020c 	add.w	r2, r7, #12
 8012d1a:	79fb      	ldrb	r3, [r7, #7]
 8012d1c:	210b      	movs	r1, #11
 8012d1e:	4618      	mov	r0, r3
 8012d20:	f7ff feee 	bl	8012b00 <USER_SPI_ioctl>
 8012d24:	4603      	mov	r3, r0
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d149      	bne.n	8012dbe <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8012d2a:	7b3b      	ldrb	r3, [r7, #12]
 8012d2c:	099b      	lsrs	r3, r3, #6
 8012d2e:	b2db      	uxtb	r3, r3
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d104      	bne.n	8012d3e <USER_SPI_ioctl+0x23e>
 8012d34:	7dbb      	ldrb	r3, [r7, #22]
 8012d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d041      	beq.n	8012dc2 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8012d3e:	683b      	ldr	r3, [r7, #0]
 8012d40:	623b      	str	r3, [r7, #32]
 8012d42:	6a3b      	ldr	r3, [r7, #32]
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	62bb      	str	r3, [r7, #40]	; 0x28
 8012d48:	6a3b      	ldr	r3, [r7, #32]
 8012d4a:	685b      	ldr	r3, [r3, #4]
 8012d4c:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8012d4e:	4b23      	ldr	r3, [pc, #140]	; (8012ddc <USER_SPI_ioctl+0x2dc>)
 8012d50:	781b      	ldrb	r3, [r3, #0]
 8012d52:	f003 0308 	and.w	r3, r3, #8
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d105      	bne.n	8012d66 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8012d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d5c:	025b      	lsls	r3, r3, #9
 8012d5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8012d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d62:	025b      	lsls	r3, r3, #9
 8012d64:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8012d66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012d68:	2020      	movs	r0, #32
 8012d6a:	f7ff fc78 	bl	801265e <send_cmd>
 8012d6e:	4603      	mov	r3, r0
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d128      	bne.n	8012dc6 <USER_SPI_ioctl+0x2c6>
 8012d74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012d76:	2021      	movs	r0, #33	; 0x21
 8012d78:	f7ff fc71 	bl	801265e <send_cmd>
 8012d7c:	4603      	mov	r3, r0
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d121      	bne.n	8012dc6 <USER_SPI_ioctl+0x2c6>
 8012d82:	2100      	movs	r1, #0
 8012d84:	2026      	movs	r0, #38	; 0x26
 8012d86:	f7ff fc6a 	bl	801265e <send_cmd>
 8012d8a:	4603      	mov	r3, r0
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d11a      	bne.n	8012dc6 <USER_SPI_ioctl+0x2c6>
 8012d90:	f247 5030 	movw	r0, #30000	; 0x7530
 8012d94:	f7ff fbb9 	bl	801250a <wait_ready>
 8012d98:	4603      	mov	r3, r0
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d013      	beq.n	8012dc6 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8012d9e:	2300      	movs	r3, #0
 8012da0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8012da4:	e00f      	b.n	8012dc6 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8012da6:	2304      	movs	r3, #4
 8012da8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8012dac:	e00c      	b.n	8012dc8 <USER_SPI_ioctl+0x2c8>
		break;
 8012dae:	bf00      	nop
 8012db0:	e00a      	b.n	8012dc8 <USER_SPI_ioctl+0x2c8>
		break;
 8012db2:	bf00      	nop
 8012db4:	e008      	b.n	8012dc8 <USER_SPI_ioctl+0x2c8>
		break;
 8012db6:	bf00      	nop
 8012db8:	e006      	b.n	8012dc8 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8012dba:	bf00      	nop
 8012dbc:	e004      	b.n	8012dc8 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8012dbe:	bf00      	nop
 8012dc0:	e002      	b.n	8012dc8 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8012dc2:	bf00      	nop
 8012dc4:	e000      	b.n	8012dc8 <USER_SPI_ioctl+0x2c8>
		break;
 8012dc6:	bf00      	nop
	}

	despiselect();
 8012dc8:	f7ff fbc2 	bl	8012550 <despiselect>

	return res;
 8012dcc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	3730      	adds	r7, #48	; 0x30
 8012dd4:	46bd      	mov	sp, r7
 8012dd6:	bd80      	pop	{r7, pc}
 8012dd8:	200000e8 	.word	0x200000e8
 8012ddc:	20000844 	.word	0x20000844

08012de0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8012de0:	b580      	push	{r7, lr}
 8012de2:	b084      	sub	sp, #16
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	4603      	mov	r3, r0
 8012de8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8012dea:	79fb      	ldrb	r3, [r7, #7]
 8012dec:	4a08      	ldr	r2, [pc, #32]	; (8012e10 <disk_status+0x30>)
 8012dee:	009b      	lsls	r3, r3, #2
 8012df0:	4413      	add	r3, r2
 8012df2:	685b      	ldr	r3, [r3, #4]
 8012df4:	685b      	ldr	r3, [r3, #4]
 8012df6:	79fa      	ldrb	r2, [r7, #7]
 8012df8:	4905      	ldr	r1, [pc, #20]	; (8012e10 <disk_status+0x30>)
 8012dfa:	440a      	add	r2, r1
 8012dfc:	7a12      	ldrb	r2, [r2, #8]
 8012dfe:	4610      	mov	r0, r2
 8012e00:	4798      	blx	r3
 8012e02:	4603      	mov	r3, r0
 8012e04:	73fb      	strb	r3, [r7, #15]
  return stat;
 8012e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e08:	4618      	mov	r0, r3
 8012e0a:	3710      	adds	r7, #16
 8012e0c:	46bd      	mov	sp, r7
 8012e0e:	bd80      	pop	{r7, pc}
 8012e10:	20000870 	.word	0x20000870

08012e14 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8012e14:	b580      	push	{r7, lr}
 8012e16:	b084      	sub	sp, #16
 8012e18:	af00      	add	r7, sp, #0
 8012e1a:	4603      	mov	r3, r0
 8012e1c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8012e1e:	2300      	movs	r3, #0
 8012e20:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8012e22:	79fb      	ldrb	r3, [r7, #7]
 8012e24:	4a0d      	ldr	r2, [pc, #52]	; (8012e5c <disk_initialize+0x48>)
 8012e26:	5cd3      	ldrb	r3, [r2, r3]
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d111      	bne.n	8012e50 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8012e2c:	79fb      	ldrb	r3, [r7, #7]
 8012e2e:	4a0b      	ldr	r2, [pc, #44]	; (8012e5c <disk_initialize+0x48>)
 8012e30:	2101      	movs	r1, #1
 8012e32:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8012e34:	79fb      	ldrb	r3, [r7, #7]
 8012e36:	4a09      	ldr	r2, [pc, #36]	; (8012e5c <disk_initialize+0x48>)
 8012e38:	009b      	lsls	r3, r3, #2
 8012e3a:	4413      	add	r3, r2
 8012e3c:	685b      	ldr	r3, [r3, #4]
 8012e3e:	681b      	ldr	r3, [r3, #0]
 8012e40:	79fa      	ldrb	r2, [r7, #7]
 8012e42:	4906      	ldr	r1, [pc, #24]	; (8012e5c <disk_initialize+0x48>)
 8012e44:	440a      	add	r2, r1
 8012e46:	7a12      	ldrb	r2, [r2, #8]
 8012e48:	4610      	mov	r0, r2
 8012e4a:	4798      	blx	r3
 8012e4c:	4603      	mov	r3, r0
 8012e4e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8012e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e52:	4618      	mov	r0, r3
 8012e54:	3710      	adds	r7, #16
 8012e56:	46bd      	mov	sp, r7
 8012e58:	bd80      	pop	{r7, pc}
 8012e5a:	bf00      	nop
 8012e5c:	20000870 	.word	0x20000870

08012e60 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8012e60:	b590      	push	{r4, r7, lr}
 8012e62:	b087      	sub	sp, #28
 8012e64:	af00      	add	r7, sp, #0
 8012e66:	60b9      	str	r1, [r7, #8]
 8012e68:	607a      	str	r2, [r7, #4]
 8012e6a:	603b      	str	r3, [r7, #0]
 8012e6c:	4603      	mov	r3, r0
 8012e6e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8012e70:	7bfb      	ldrb	r3, [r7, #15]
 8012e72:	4a0a      	ldr	r2, [pc, #40]	; (8012e9c <disk_read+0x3c>)
 8012e74:	009b      	lsls	r3, r3, #2
 8012e76:	4413      	add	r3, r2
 8012e78:	685b      	ldr	r3, [r3, #4]
 8012e7a:	689c      	ldr	r4, [r3, #8]
 8012e7c:	7bfb      	ldrb	r3, [r7, #15]
 8012e7e:	4a07      	ldr	r2, [pc, #28]	; (8012e9c <disk_read+0x3c>)
 8012e80:	4413      	add	r3, r2
 8012e82:	7a18      	ldrb	r0, [r3, #8]
 8012e84:	683b      	ldr	r3, [r7, #0]
 8012e86:	687a      	ldr	r2, [r7, #4]
 8012e88:	68b9      	ldr	r1, [r7, #8]
 8012e8a:	47a0      	blx	r4
 8012e8c:	4603      	mov	r3, r0
 8012e8e:	75fb      	strb	r3, [r7, #23]
  return res;
 8012e90:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e92:	4618      	mov	r0, r3
 8012e94:	371c      	adds	r7, #28
 8012e96:	46bd      	mov	sp, r7
 8012e98:	bd90      	pop	{r4, r7, pc}
 8012e9a:	bf00      	nop
 8012e9c:	20000870 	.word	0x20000870

08012ea0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8012ea0:	b590      	push	{r4, r7, lr}
 8012ea2:	b087      	sub	sp, #28
 8012ea4:	af00      	add	r7, sp, #0
 8012ea6:	60b9      	str	r1, [r7, #8]
 8012ea8:	607a      	str	r2, [r7, #4]
 8012eaa:	603b      	str	r3, [r7, #0]
 8012eac:	4603      	mov	r3, r0
 8012eae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8012eb0:	7bfb      	ldrb	r3, [r7, #15]
 8012eb2:	4a0a      	ldr	r2, [pc, #40]	; (8012edc <disk_write+0x3c>)
 8012eb4:	009b      	lsls	r3, r3, #2
 8012eb6:	4413      	add	r3, r2
 8012eb8:	685b      	ldr	r3, [r3, #4]
 8012eba:	68dc      	ldr	r4, [r3, #12]
 8012ebc:	7bfb      	ldrb	r3, [r7, #15]
 8012ebe:	4a07      	ldr	r2, [pc, #28]	; (8012edc <disk_write+0x3c>)
 8012ec0:	4413      	add	r3, r2
 8012ec2:	7a18      	ldrb	r0, [r3, #8]
 8012ec4:	683b      	ldr	r3, [r7, #0]
 8012ec6:	687a      	ldr	r2, [r7, #4]
 8012ec8:	68b9      	ldr	r1, [r7, #8]
 8012eca:	47a0      	blx	r4
 8012ecc:	4603      	mov	r3, r0
 8012ece:	75fb      	strb	r3, [r7, #23]
  return res;
 8012ed0:	7dfb      	ldrb	r3, [r7, #23]
}
 8012ed2:	4618      	mov	r0, r3
 8012ed4:	371c      	adds	r7, #28
 8012ed6:	46bd      	mov	sp, r7
 8012ed8:	bd90      	pop	{r4, r7, pc}
 8012eda:	bf00      	nop
 8012edc:	20000870 	.word	0x20000870

08012ee0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8012ee0:	b580      	push	{r7, lr}
 8012ee2:	b084      	sub	sp, #16
 8012ee4:	af00      	add	r7, sp, #0
 8012ee6:	4603      	mov	r3, r0
 8012ee8:	603a      	str	r2, [r7, #0]
 8012eea:	71fb      	strb	r3, [r7, #7]
 8012eec:	460b      	mov	r3, r1
 8012eee:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8012ef0:	79fb      	ldrb	r3, [r7, #7]
 8012ef2:	4a09      	ldr	r2, [pc, #36]	; (8012f18 <disk_ioctl+0x38>)
 8012ef4:	009b      	lsls	r3, r3, #2
 8012ef6:	4413      	add	r3, r2
 8012ef8:	685b      	ldr	r3, [r3, #4]
 8012efa:	691b      	ldr	r3, [r3, #16]
 8012efc:	79fa      	ldrb	r2, [r7, #7]
 8012efe:	4906      	ldr	r1, [pc, #24]	; (8012f18 <disk_ioctl+0x38>)
 8012f00:	440a      	add	r2, r1
 8012f02:	7a10      	ldrb	r0, [r2, #8]
 8012f04:	79b9      	ldrb	r1, [r7, #6]
 8012f06:	683a      	ldr	r2, [r7, #0]
 8012f08:	4798      	blx	r3
 8012f0a:	4603      	mov	r3, r0
 8012f0c:	73fb      	strb	r3, [r7, #15]
  return res;
 8012f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f10:	4618      	mov	r0, r3
 8012f12:	3710      	adds	r7, #16
 8012f14:	46bd      	mov	sp, r7
 8012f16:	bd80      	pop	{r7, pc}
 8012f18:	20000870 	.word	0x20000870

08012f1c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8012f1c:	b480      	push	{r7}
 8012f1e:	b085      	sub	sp, #20
 8012f20:	af00      	add	r7, sp, #0
 8012f22:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	3301      	adds	r3, #1
 8012f28:	781b      	ldrb	r3, [r3, #0]
 8012f2a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8012f2c:	89fb      	ldrh	r3, [r7, #14]
 8012f2e:	021b      	lsls	r3, r3, #8
 8012f30:	b21a      	sxth	r2, r3
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	781b      	ldrb	r3, [r3, #0]
 8012f36:	b21b      	sxth	r3, r3
 8012f38:	4313      	orrs	r3, r2
 8012f3a:	b21b      	sxth	r3, r3
 8012f3c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8012f3e:	89fb      	ldrh	r3, [r7, #14]
}
 8012f40:	4618      	mov	r0, r3
 8012f42:	3714      	adds	r7, #20
 8012f44:	46bd      	mov	sp, r7
 8012f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f4a:	4770      	bx	lr

08012f4c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8012f4c:	b480      	push	{r7}
 8012f4e:	b085      	sub	sp, #20
 8012f50:	af00      	add	r7, sp, #0
 8012f52:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	3303      	adds	r3, #3
 8012f58:	781b      	ldrb	r3, [r3, #0]
 8012f5a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8012f5c:	68fb      	ldr	r3, [r7, #12]
 8012f5e:	021b      	lsls	r3, r3, #8
 8012f60:	687a      	ldr	r2, [r7, #4]
 8012f62:	3202      	adds	r2, #2
 8012f64:	7812      	ldrb	r2, [r2, #0]
 8012f66:	4313      	orrs	r3, r2
 8012f68:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8012f6a:	68fb      	ldr	r3, [r7, #12]
 8012f6c:	021b      	lsls	r3, r3, #8
 8012f6e:	687a      	ldr	r2, [r7, #4]
 8012f70:	3201      	adds	r2, #1
 8012f72:	7812      	ldrb	r2, [r2, #0]
 8012f74:	4313      	orrs	r3, r2
 8012f76:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8012f78:	68fb      	ldr	r3, [r7, #12]
 8012f7a:	021b      	lsls	r3, r3, #8
 8012f7c:	687a      	ldr	r2, [r7, #4]
 8012f7e:	7812      	ldrb	r2, [r2, #0]
 8012f80:	4313      	orrs	r3, r2
 8012f82:	60fb      	str	r3, [r7, #12]
	return rv;
 8012f84:	68fb      	ldr	r3, [r7, #12]
}
 8012f86:	4618      	mov	r0, r3
 8012f88:	3714      	adds	r7, #20
 8012f8a:	46bd      	mov	sp, r7
 8012f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f90:	4770      	bx	lr

08012f92 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8012f92:	b480      	push	{r7}
 8012f94:	b083      	sub	sp, #12
 8012f96:	af00      	add	r7, sp, #0
 8012f98:	6078      	str	r0, [r7, #4]
 8012f9a:	460b      	mov	r3, r1
 8012f9c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	1c5a      	adds	r2, r3, #1
 8012fa2:	607a      	str	r2, [r7, #4]
 8012fa4:	887a      	ldrh	r2, [r7, #2]
 8012fa6:	b2d2      	uxtb	r2, r2
 8012fa8:	701a      	strb	r2, [r3, #0]
 8012faa:	887b      	ldrh	r3, [r7, #2]
 8012fac:	0a1b      	lsrs	r3, r3, #8
 8012fae:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	1c5a      	adds	r2, r3, #1
 8012fb4:	607a      	str	r2, [r7, #4]
 8012fb6:	887a      	ldrh	r2, [r7, #2]
 8012fb8:	b2d2      	uxtb	r2, r2
 8012fba:	701a      	strb	r2, [r3, #0]
}
 8012fbc:	bf00      	nop
 8012fbe:	370c      	adds	r7, #12
 8012fc0:	46bd      	mov	sp, r7
 8012fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fc6:	4770      	bx	lr

08012fc8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8012fc8:	b480      	push	{r7}
 8012fca:	b083      	sub	sp, #12
 8012fcc:	af00      	add	r7, sp, #0
 8012fce:	6078      	str	r0, [r7, #4]
 8012fd0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	1c5a      	adds	r2, r3, #1
 8012fd6:	607a      	str	r2, [r7, #4]
 8012fd8:	683a      	ldr	r2, [r7, #0]
 8012fda:	b2d2      	uxtb	r2, r2
 8012fdc:	701a      	strb	r2, [r3, #0]
 8012fde:	683b      	ldr	r3, [r7, #0]
 8012fe0:	0a1b      	lsrs	r3, r3, #8
 8012fe2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	1c5a      	adds	r2, r3, #1
 8012fe8:	607a      	str	r2, [r7, #4]
 8012fea:	683a      	ldr	r2, [r7, #0]
 8012fec:	b2d2      	uxtb	r2, r2
 8012fee:	701a      	strb	r2, [r3, #0]
 8012ff0:	683b      	ldr	r3, [r7, #0]
 8012ff2:	0a1b      	lsrs	r3, r3, #8
 8012ff4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	1c5a      	adds	r2, r3, #1
 8012ffa:	607a      	str	r2, [r7, #4]
 8012ffc:	683a      	ldr	r2, [r7, #0]
 8012ffe:	b2d2      	uxtb	r2, r2
 8013000:	701a      	strb	r2, [r3, #0]
 8013002:	683b      	ldr	r3, [r7, #0]
 8013004:	0a1b      	lsrs	r3, r3, #8
 8013006:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	1c5a      	adds	r2, r3, #1
 801300c:	607a      	str	r2, [r7, #4]
 801300e:	683a      	ldr	r2, [r7, #0]
 8013010:	b2d2      	uxtb	r2, r2
 8013012:	701a      	strb	r2, [r3, #0]
}
 8013014:	bf00      	nop
 8013016:	370c      	adds	r7, #12
 8013018:	46bd      	mov	sp, r7
 801301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801301e:	4770      	bx	lr

08013020 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8013020:	b480      	push	{r7}
 8013022:	b087      	sub	sp, #28
 8013024:	af00      	add	r7, sp, #0
 8013026:	60f8      	str	r0, [r7, #12]
 8013028:	60b9      	str	r1, [r7, #8]
 801302a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8013030:	68bb      	ldr	r3, [r7, #8]
 8013032:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	2b00      	cmp	r3, #0
 8013038:	d00d      	beq.n	8013056 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801303a:	693a      	ldr	r2, [r7, #16]
 801303c:	1c53      	adds	r3, r2, #1
 801303e:	613b      	str	r3, [r7, #16]
 8013040:	697b      	ldr	r3, [r7, #20]
 8013042:	1c59      	adds	r1, r3, #1
 8013044:	6179      	str	r1, [r7, #20]
 8013046:	7812      	ldrb	r2, [r2, #0]
 8013048:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	3b01      	subs	r3, #1
 801304e:	607b      	str	r3, [r7, #4]
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	2b00      	cmp	r3, #0
 8013054:	d1f1      	bne.n	801303a <mem_cpy+0x1a>
	}
}
 8013056:	bf00      	nop
 8013058:	371c      	adds	r7, #28
 801305a:	46bd      	mov	sp, r7
 801305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013060:	4770      	bx	lr

08013062 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8013062:	b480      	push	{r7}
 8013064:	b087      	sub	sp, #28
 8013066:	af00      	add	r7, sp, #0
 8013068:	60f8      	str	r0, [r7, #12]
 801306a:	60b9      	str	r1, [r7, #8]
 801306c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8013072:	697b      	ldr	r3, [r7, #20]
 8013074:	1c5a      	adds	r2, r3, #1
 8013076:	617a      	str	r2, [r7, #20]
 8013078:	68ba      	ldr	r2, [r7, #8]
 801307a:	b2d2      	uxtb	r2, r2
 801307c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	3b01      	subs	r3, #1
 8013082:	607b      	str	r3, [r7, #4]
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	2b00      	cmp	r3, #0
 8013088:	d1f3      	bne.n	8013072 <mem_set+0x10>
}
 801308a:	bf00      	nop
 801308c:	bf00      	nop
 801308e:	371c      	adds	r7, #28
 8013090:	46bd      	mov	sp, r7
 8013092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013096:	4770      	bx	lr

08013098 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8013098:	b480      	push	{r7}
 801309a:	b089      	sub	sp, #36	; 0x24
 801309c:	af00      	add	r7, sp, #0
 801309e:	60f8      	str	r0, [r7, #12]
 80130a0:	60b9      	str	r1, [r7, #8]
 80130a2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	61fb      	str	r3, [r7, #28]
 80130a8:	68bb      	ldr	r3, [r7, #8]
 80130aa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80130ac:	2300      	movs	r3, #0
 80130ae:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80130b0:	69fb      	ldr	r3, [r7, #28]
 80130b2:	1c5a      	adds	r2, r3, #1
 80130b4:	61fa      	str	r2, [r7, #28]
 80130b6:	781b      	ldrb	r3, [r3, #0]
 80130b8:	4619      	mov	r1, r3
 80130ba:	69bb      	ldr	r3, [r7, #24]
 80130bc:	1c5a      	adds	r2, r3, #1
 80130be:	61ba      	str	r2, [r7, #24]
 80130c0:	781b      	ldrb	r3, [r3, #0]
 80130c2:	1acb      	subs	r3, r1, r3
 80130c4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	3b01      	subs	r3, #1
 80130ca:	607b      	str	r3, [r7, #4]
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d002      	beq.n	80130d8 <mem_cmp+0x40>
 80130d2:	697b      	ldr	r3, [r7, #20]
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d0eb      	beq.n	80130b0 <mem_cmp+0x18>

	return r;
 80130d8:	697b      	ldr	r3, [r7, #20]
}
 80130da:	4618      	mov	r0, r3
 80130dc:	3724      	adds	r7, #36	; 0x24
 80130de:	46bd      	mov	sp, r7
 80130e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130e4:	4770      	bx	lr

080130e6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80130e6:	b480      	push	{r7}
 80130e8:	b083      	sub	sp, #12
 80130ea:	af00      	add	r7, sp, #0
 80130ec:	6078      	str	r0, [r7, #4]
 80130ee:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80130f0:	e002      	b.n	80130f8 <chk_chr+0x12>
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	3301      	adds	r3, #1
 80130f6:	607b      	str	r3, [r7, #4]
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	781b      	ldrb	r3, [r3, #0]
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d005      	beq.n	801310c <chk_chr+0x26>
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	781b      	ldrb	r3, [r3, #0]
 8013104:	461a      	mov	r2, r3
 8013106:	683b      	ldr	r3, [r7, #0]
 8013108:	4293      	cmp	r3, r2
 801310a:	d1f2      	bne.n	80130f2 <chk_chr+0xc>
	return *str;
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	781b      	ldrb	r3, [r3, #0]
}
 8013110:	4618      	mov	r0, r3
 8013112:	370c      	adds	r7, #12
 8013114:	46bd      	mov	sp, r7
 8013116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801311a:	4770      	bx	lr

0801311c <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 801311c:	b580      	push	{r7, lr}
 801311e:	b082      	sub	sp, #8
 8013120:	af00      	add	r7, sp, #0
 8013122:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	2b00      	cmp	r3, #0
 8013128:	d009      	beq.n	801313e <lock_fs+0x22>
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	68db      	ldr	r3, [r3, #12]
 801312e:	4618      	mov	r0, r3
 8013130:	f002 fcde 	bl	8015af0 <ff_req_grant>
 8013134:	4603      	mov	r3, r0
 8013136:	2b00      	cmp	r3, #0
 8013138:	d001      	beq.n	801313e <lock_fs+0x22>
 801313a:	2301      	movs	r3, #1
 801313c:	e000      	b.n	8013140 <lock_fs+0x24>
 801313e:	2300      	movs	r3, #0
}
 8013140:	4618      	mov	r0, r3
 8013142:	3708      	adds	r7, #8
 8013144:	46bd      	mov	sp, r7
 8013146:	bd80      	pop	{r7, pc}

08013148 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8013148:	b580      	push	{r7, lr}
 801314a:	b082      	sub	sp, #8
 801314c:	af00      	add	r7, sp, #0
 801314e:	6078      	str	r0, [r7, #4]
 8013150:	460b      	mov	r3, r1
 8013152:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	2b00      	cmp	r3, #0
 8013158:	d00d      	beq.n	8013176 <unlock_fs+0x2e>
 801315a:	78fb      	ldrb	r3, [r7, #3]
 801315c:	2b0c      	cmp	r3, #12
 801315e:	d00a      	beq.n	8013176 <unlock_fs+0x2e>
 8013160:	78fb      	ldrb	r3, [r7, #3]
 8013162:	2b0b      	cmp	r3, #11
 8013164:	d007      	beq.n	8013176 <unlock_fs+0x2e>
 8013166:	78fb      	ldrb	r3, [r7, #3]
 8013168:	2b0f      	cmp	r3, #15
 801316a:	d004      	beq.n	8013176 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	68db      	ldr	r3, [r3, #12]
 8013170:	4618      	mov	r0, r3
 8013172:	f002 fcd2 	bl	8015b1a <ff_rel_grant>
	}
}
 8013176:	bf00      	nop
 8013178:	3708      	adds	r7, #8
 801317a:	46bd      	mov	sp, r7
 801317c:	bd80      	pop	{r7, pc}
	...

08013180 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8013180:	b480      	push	{r7}
 8013182:	b085      	sub	sp, #20
 8013184:	af00      	add	r7, sp, #0
 8013186:	6078      	str	r0, [r7, #4]
 8013188:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801318a:	2300      	movs	r3, #0
 801318c:	60bb      	str	r3, [r7, #8]
 801318e:	68bb      	ldr	r3, [r7, #8]
 8013190:	60fb      	str	r3, [r7, #12]
 8013192:	e029      	b.n	80131e8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8013194:	4a27      	ldr	r2, [pc, #156]	; (8013234 <chk_lock+0xb4>)
 8013196:	68fb      	ldr	r3, [r7, #12]
 8013198:	011b      	lsls	r3, r3, #4
 801319a:	4413      	add	r3, r2
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d01d      	beq.n	80131de <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80131a2:	4a24      	ldr	r2, [pc, #144]	; (8013234 <chk_lock+0xb4>)
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	011b      	lsls	r3, r3, #4
 80131a8:	4413      	add	r3, r2
 80131aa:	681a      	ldr	r2, [r3, #0]
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	429a      	cmp	r2, r3
 80131b2:	d116      	bne.n	80131e2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80131b4:	4a1f      	ldr	r2, [pc, #124]	; (8013234 <chk_lock+0xb4>)
 80131b6:	68fb      	ldr	r3, [r7, #12]
 80131b8:	011b      	lsls	r3, r3, #4
 80131ba:	4413      	add	r3, r2
 80131bc:	3304      	adds	r3, #4
 80131be:	681a      	ldr	r2, [r3, #0]
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80131c4:	429a      	cmp	r2, r3
 80131c6:	d10c      	bne.n	80131e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80131c8:	4a1a      	ldr	r2, [pc, #104]	; (8013234 <chk_lock+0xb4>)
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	011b      	lsls	r3, r3, #4
 80131ce:	4413      	add	r3, r2
 80131d0:	3308      	adds	r3, #8
 80131d2:	681a      	ldr	r2, [r3, #0]
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80131d8:	429a      	cmp	r2, r3
 80131da:	d102      	bne.n	80131e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80131dc:	e007      	b.n	80131ee <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80131de:	2301      	movs	r3, #1
 80131e0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	3301      	adds	r3, #1
 80131e6:	60fb      	str	r3, [r7, #12]
 80131e8:	68fb      	ldr	r3, [r7, #12]
 80131ea:	2b01      	cmp	r3, #1
 80131ec:	d9d2      	bls.n	8013194 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80131ee:	68fb      	ldr	r3, [r7, #12]
 80131f0:	2b02      	cmp	r3, #2
 80131f2:	d109      	bne.n	8013208 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80131f4:	68bb      	ldr	r3, [r7, #8]
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d102      	bne.n	8013200 <chk_lock+0x80>
 80131fa:	683b      	ldr	r3, [r7, #0]
 80131fc:	2b02      	cmp	r3, #2
 80131fe:	d101      	bne.n	8013204 <chk_lock+0x84>
 8013200:	2300      	movs	r3, #0
 8013202:	e010      	b.n	8013226 <chk_lock+0xa6>
 8013204:	2312      	movs	r3, #18
 8013206:	e00e      	b.n	8013226 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8013208:	683b      	ldr	r3, [r7, #0]
 801320a:	2b00      	cmp	r3, #0
 801320c:	d108      	bne.n	8013220 <chk_lock+0xa0>
 801320e:	4a09      	ldr	r2, [pc, #36]	; (8013234 <chk_lock+0xb4>)
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	011b      	lsls	r3, r3, #4
 8013214:	4413      	add	r3, r2
 8013216:	330c      	adds	r3, #12
 8013218:	881b      	ldrh	r3, [r3, #0]
 801321a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801321e:	d101      	bne.n	8013224 <chk_lock+0xa4>
 8013220:	2310      	movs	r3, #16
 8013222:	e000      	b.n	8013226 <chk_lock+0xa6>
 8013224:	2300      	movs	r3, #0
}
 8013226:	4618      	mov	r0, r3
 8013228:	3714      	adds	r7, #20
 801322a:	46bd      	mov	sp, r7
 801322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013230:	4770      	bx	lr
 8013232:	bf00      	nop
 8013234:	20000850 	.word	0x20000850

08013238 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8013238:	b480      	push	{r7}
 801323a:	b083      	sub	sp, #12
 801323c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801323e:	2300      	movs	r3, #0
 8013240:	607b      	str	r3, [r7, #4]
 8013242:	e002      	b.n	801324a <enq_lock+0x12>
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	3301      	adds	r3, #1
 8013248:	607b      	str	r3, [r7, #4]
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	2b01      	cmp	r3, #1
 801324e:	d806      	bhi.n	801325e <enq_lock+0x26>
 8013250:	4a09      	ldr	r2, [pc, #36]	; (8013278 <enq_lock+0x40>)
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	011b      	lsls	r3, r3, #4
 8013256:	4413      	add	r3, r2
 8013258:	681b      	ldr	r3, [r3, #0]
 801325a:	2b00      	cmp	r3, #0
 801325c:	d1f2      	bne.n	8013244 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	2b02      	cmp	r3, #2
 8013262:	bf14      	ite	ne
 8013264:	2301      	movne	r3, #1
 8013266:	2300      	moveq	r3, #0
 8013268:	b2db      	uxtb	r3, r3
}
 801326a:	4618      	mov	r0, r3
 801326c:	370c      	adds	r7, #12
 801326e:	46bd      	mov	sp, r7
 8013270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013274:	4770      	bx	lr
 8013276:	bf00      	nop
 8013278:	20000850 	.word	0x20000850

0801327c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801327c:	b480      	push	{r7}
 801327e:	b085      	sub	sp, #20
 8013280:	af00      	add	r7, sp, #0
 8013282:	6078      	str	r0, [r7, #4]
 8013284:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8013286:	2300      	movs	r3, #0
 8013288:	60fb      	str	r3, [r7, #12]
 801328a:	e01f      	b.n	80132cc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801328c:	4a41      	ldr	r2, [pc, #260]	; (8013394 <inc_lock+0x118>)
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	011b      	lsls	r3, r3, #4
 8013292:	4413      	add	r3, r2
 8013294:	681a      	ldr	r2, [r3, #0]
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	681b      	ldr	r3, [r3, #0]
 801329a:	429a      	cmp	r2, r3
 801329c:	d113      	bne.n	80132c6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801329e:	4a3d      	ldr	r2, [pc, #244]	; (8013394 <inc_lock+0x118>)
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	011b      	lsls	r3, r3, #4
 80132a4:	4413      	add	r3, r2
 80132a6:	3304      	adds	r3, #4
 80132a8:	681a      	ldr	r2, [r3, #0]
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80132ae:	429a      	cmp	r2, r3
 80132b0:	d109      	bne.n	80132c6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80132b2:	4a38      	ldr	r2, [pc, #224]	; (8013394 <inc_lock+0x118>)
 80132b4:	68fb      	ldr	r3, [r7, #12]
 80132b6:	011b      	lsls	r3, r3, #4
 80132b8:	4413      	add	r3, r2
 80132ba:	3308      	adds	r3, #8
 80132bc:	681a      	ldr	r2, [r3, #0]
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80132c2:	429a      	cmp	r2, r3
 80132c4:	d006      	beq.n	80132d4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80132c6:	68fb      	ldr	r3, [r7, #12]
 80132c8:	3301      	adds	r3, #1
 80132ca:	60fb      	str	r3, [r7, #12]
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	2b01      	cmp	r3, #1
 80132d0:	d9dc      	bls.n	801328c <inc_lock+0x10>
 80132d2:	e000      	b.n	80132d6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80132d4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	2b02      	cmp	r3, #2
 80132da:	d132      	bne.n	8013342 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80132dc:	2300      	movs	r3, #0
 80132de:	60fb      	str	r3, [r7, #12]
 80132e0:	e002      	b.n	80132e8 <inc_lock+0x6c>
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	3301      	adds	r3, #1
 80132e6:	60fb      	str	r3, [r7, #12]
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	2b01      	cmp	r3, #1
 80132ec:	d806      	bhi.n	80132fc <inc_lock+0x80>
 80132ee:	4a29      	ldr	r2, [pc, #164]	; (8013394 <inc_lock+0x118>)
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	011b      	lsls	r3, r3, #4
 80132f4:	4413      	add	r3, r2
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d1f2      	bne.n	80132e2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	2b02      	cmp	r3, #2
 8013300:	d101      	bne.n	8013306 <inc_lock+0x8a>
 8013302:	2300      	movs	r3, #0
 8013304:	e040      	b.n	8013388 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	681a      	ldr	r2, [r3, #0]
 801330a:	4922      	ldr	r1, [pc, #136]	; (8013394 <inc_lock+0x118>)
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	011b      	lsls	r3, r3, #4
 8013310:	440b      	add	r3, r1
 8013312:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	689a      	ldr	r2, [r3, #8]
 8013318:	491e      	ldr	r1, [pc, #120]	; (8013394 <inc_lock+0x118>)
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	011b      	lsls	r3, r3, #4
 801331e:	440b      	add	r3, r1
 8013320:	3304      	adds	r3, #4
 8013322:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	695a      	ldr	r2, [r3, #20]
 8013328:	491a      	ldr	r1, [pc, #104]	; (8013394 <inc_lock+0x118>)
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	011b      	lsls	r3, r3, #4
 801332e:	440b      	add	r3, r1
 8013330:	3308      	adds	r3, #8
 8013332:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8013334:	4a17      	ldr	r2, [pc, #92]	; (8013394 <inc_lock+0x118>)
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	011b      	lsls	r3, r3, #4
 801333a:	4413      	add	r3, r2
 801333c:	330c      	adds	r3, #12
 801333e:	2200      	movs	r2, #0
 8013340:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8013342:	683b      	ldr	r3, [r7, #0]
 8013344:	2b00      	cmp	r3, #0
 8013346:	d009      	beq.n	801335c <inc_lock+0xe0>
 8013348:	4a12      	ldr	r2, [pc, #72]	; (8013394 <inc_lock+0x118>)
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	011b      	lsls	r3, r3, #4
 801334e:	4413      	add	r3, r2
 8013350:	330c      	adds	r3, #12
 8013352:	881b      	ldrh	r3, [r3, #0]
 8013354:	2b00      	cmp	r3, #0
 8013356:	d001      	beq.n	801335c <inc_lock+0xe0>
 8013358:	2300      	movs	r3, #0
 801335a:	e015      	b.n	8013388 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801335c:	683b      	ldr	r3, [r7, #0]
 801335e:	2b00      	cmp	r3, #0
 8013360:	d108      	bne.n	8013374 <inc_lock+0xf8>
 8013362:	4a0c      	ldr	r2, [pc, #48]	; (8013394 <inc_lock+0x118>)
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	011b      	lsls	r3, r3, #4
 8013368:	4413      	add	r3, r2
 801336a:	330c      	adds	r3, #12
 801336c:	881b      	ldrh	r3, [r3, #0]
 801336e:	3301      	adds	r3, #1
 8013370:	b29a      	uxth	r2, r3
 8013372:	e001      	b.n	8013378 <inc_lock+0xfc>
 8013374:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013378:	4906      	ldr	r1, [pc, #24]	; (8013394 <inc_lock+0x118>)
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	011b      	lsls	r3, r3, #4
 801337e:	440b      	add	r3, r1
 8013380:	330c      	adds	r3, #12
 8013382:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	3301      	adds	r3, #1
}
 8013388:	4618      	mov	r0, r3
 801338a:	3714      	adds	r7, #20
 801338c:	46bd      	mov	sp, r7
 801338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013392:	4770      	bx	lr
 8013394:	20000850 	.word	0x20000850

08013398 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8013398:	b480      	push	{r7}
 801339a:	b085      	sub	sp, #20
 801339c:	af00      	add	r7, sp, #0
 801339e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	3b01      	subs	r3, #1
 80133a4:	607b      	str	r3, [r7, #4]
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	2b01      	cmp	r3, #1
 80133aa:	d825      	bhi.n	80133f8 <dec_lock+0x60>
		n = Files[i].ctr;
 80133ac:	4a17      	ldr	r2, [pc, #92]	; (801340c <dec_lock+0x74>)
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	011b      	lsls	r3, r3, #4
 80133b2:	4413      	add	r3, r2
 80133b4:	330c      	adds	r3, #12
 80133b6:	881b      	ldrh	r3, [r3, #0]
 80133b8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80133ba:	89fb      	ldrh	r3, [r7, #14]
 80133bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80133c0:	d101      	bne.n	80133c6 <dec_lock+0x2e>
 80133c2:	2300      	movs	r3, #0
 80133c4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80133c6:	89fb      	ldrh	r3, [r7, #14]
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d002      	beq.n	80133d2 <dec_lock+0x3a>
 80133cc:	89fb      	ldrh	r3, [r7, #14]
 80133ce:	3b01      	subs	r3, #1
 80133d0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80133d2:	4a0e      	ldr	r2, [pc, #56]	; (801340c <dec_lock+0x74>)
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	011b      	lsls	r3, r3, #4
 80133d8:	4413      	add	r3, r2
 80133da:	330c      	adds	r3, #12
 80133dc:	89fa      	ldrh	r2, [r7, #14]
 80133de:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80133e0:	89fb      	ldrh	r3, [r7, #14]
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d105      	bne.n	80133f2 <dec_lock+0x5a>
 80133e6:	4a09      	ldr	r2, [pc, #36]	; (801340c <dec_lock+0x74>)
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	011b      	lsls	r3, r3, #4
 80133ec:	4413      	add	r3, r2
 80133ee:	2200      	movs	r2, #0
 80133f0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80133f2:	2300      	movs	r3, #0
 80133f4:	737b      	strb	r3, [r7, #13]
 80133f6:	e001      	b.n	80133fc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80133f8:	2302      	movs	r3, #2
 80133fa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80133fc:	7b7b      	ldrb	r3, [r7, #13]
}
 80133fe:	4618      	mov	r0, r3
 8013400:	3714      	adds	r7, #20
 8013402:	46bd      	mov	sp, r7
 8013404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013408:	4770      	bx	lr
 801340a:	bf00      	nop
 801340c:	20000850 	.word	0x20000850

08013410 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8013410:	b480      	push	{r7}
 8013412:	b085      	sub	sp, #20
 8013414:	af00      	add	r7, sp, #0
 8013416:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8013418:	2300      	movs	r3, #0
 801341a:	60fb      	str	r3, [r7, #12]
 801341c:	e010      	b.n	8013440 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801341e:	4a0d      	ldr	r2, [pc, #52]	; (8013454 <clear_lock+0x44>)
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	011b      	lsls	r3, r3, #4
 8013424:	4413      	add	r3, r2
 8013426:	681b      	ldr	r3, [r3, #0]
 8013428:	687a      	ldr	r2, [r7, #4]
 801342a:	429a      	cmp	r2, r3
 801342c:	d105      	bne.n	801343a <clear_lock+0x2a>
 801342e:	4a09      	ldr	r2, [pc, #36]	; (8013454 <clear_lock+0x44>)
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	011b      	lsls	r3, r3, #4
 8013434:	4413      	add	r3, r2
 8013436:	2200      	movs	r2, #0
 8013438:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801343a:	68fb      	ldr	r3, [r7, #12]
 801343c:	3301      	adds	r3, #1
 801343e:	60fb      	str	r3, [r7, #12]
 8013440:	68fb      	ldr	r3, [r7, #12]
 8013442:	2b01      	cmp	r3, #1
 8013444:	d9eb      	bls.n	801341e <clear_lock+0xe>
	}
}
 8013446:	bf00      	nop
 8013448:	bf00      	nop
 801344a:	3714      	adds	r7, #20
 801344c:	46bd      	mov	sp, r7
 801344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013452:	4770      	bx	lr
 8013454:	20000850 	.word	0x20000850

08013458 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8013458:	b580      	push	{r7, lr}
 801345a:	b086      	sub	sp, #24
 801345c:	af00      	add	r7, sp, #0
 801345e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8013460:	2300      	movs	r3, #0
 8013462:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	78db      	ldrb	r3, [r3, #3]
 8013468:	2b00      	cmp	r3, #0
 801346a:	d034      	beq.n	80134d6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013470:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	7858      	ldrb	r0, [r3, #1]
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801347c:	2301      	movs	r3, #1
 801347e:	697a      	ldr	r2, [r7, #20]
 8013480:	f7ff fd0e 	bl	8012ea0 <disk_write>
 8013484:	4603      	mov	r3, r0
 8013486:	2b00      	cmp	r3, #0
 8013488:	d002      	beq.n	8013490 <sync_window+0x38>
			res = FR_DISK_ERR;
 801348a:	2301      	movs	r3, #1
 801348c:	73fb      	strb	r3, [r7, #15]
 801348e:	e022      	b.n	80134d6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	2200      	movs	r2, #0
 8013494:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801349a:	697a      	ldr	r2, [r7, #20]
 801349c:	1ad2      	subs	r2, r2, r3
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	69db      	ldr	r3, [r3, #28]
 80134a2:	429a      	cmp	r2, r3
 80134a4:	d217      	bcs.n	80134d6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	789b      	ldrb	r3, [r3, #2]
 80134aa:	613b      	str	r3, [r7, #16]
 80134ac:	e010      	b.n	80134d0 <sync_window+0x78>
					wsect += fs->fsize;
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	69db      	ldr	r3, [r3, #28]
 80134b2:	697a      	ldr	r2, [r7, #20]
 80134b4:	4413      	add	r3, r2
 80134b6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	7858      	ldrb	r0, [r3, #1]
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80134c2:	2301      	movs	r3, #1
 80134c4:	697a      	ldr	r2, [r7, #20]
 80134c6:	f7ff fceb 	bl	8012ea0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80134ca:	693b      	ldr	r3, [r7, #16]
 80134cc:	3b01      	subs	r3, #1
 80134ce:	613b      	str	r3, [r7, #16]
 80134d0:	693b      	ldr	r3, [r7, #16]
 80134d2:	2b01      	cmp	r3, #1
 80134d4:	d8eb      	bhi.n	80134ae <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80134d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80134d8:	4618      	mov	r0, r3
 80134da:	3718      	adds	r7, #24
 80134dc:	46bd      	mov	sp, r7
 80134de:	bd80      	pop	{r7, pc}

080134e0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80134e0:	b580      	push	{r7, lr}
 80134e2:	b084      	sub	sp, #16
 80134e4:	af00      	add	r7, sp, #0
 80134e6:	6078      	str	r0, [r7, #4]
 80134e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80134ea:	2300      	movs	r3, #0
 80134ec:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80134f2:	683a      	ldr	r2, [r7, #0]
 80134f4:	429a      	cmp	r2, r3
 80134f6:	d01b      	beq.n	8013530 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80134f8:	6878      	ldr	r0, [r7, #4]
 80134fa:	f7ff ffad 	bl	8013458 <sync_window>
 80134fe:	4603      	mov	r3, r0
 8013500:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8013502:	7bfb      	ldrb	r3, [r7, #15]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d113      	bne.n	8013530 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	7858      	ldrb	r0, [r3, #1]
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8013512:	2301      	movs	r3, #1
 8013514:	683a      	ldr	r2, [r7, #0]
 8013516:	f7ff fca3 	bl	8012e60 <disk_read>
 801351a:	4603      	mov	r3, r0
 801351c:	2b00      	cmp	r3, #0
 801351e:	d004      	beq.n	801352a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8013520:	f04f 33ff 	mov.w	r3, #4294967295
 8013524:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8013526:	2301      	movs	r3, #1
 8013528:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	683a      	ldr	r2, [r7, #0]
 801352e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8013530:	7bfb      	ldrb	r3, [r7, #15]
}
 8013532:	4618      	mov	r0, r3
 8013534:	3710      	adds	r7, #16
 8013536:	46bd      	mov	sp, r7
 8013538:	bd80      	pop	{r7, pc}
	...

0801353c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801353c:	b580      	push	{r7, lr}
 801353e:	b084      	sub	sp, #16
 8013540:	af00      	add	r7, sp, #0
 8013542:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8013544:	6878      	ldr	r0, [r7, #4]
 8013546:	f7ff ff87 	bl	8013458 <sync_window>
 801354a:	4603      	mov	r3, r0
 801354c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801354e:	7bfb      	ldrb	r3, [r7, #15]
 8013550:	2b00      	cmp	r3, #0
 8013552:	d158      	bne.n	8013606 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	781b      	ldrb	r3, [r3, #0]
 8013558:	2b03      	cmp	r3, #3
 801355a:	d148      	bne.n	80135ee <sync_fs+0xb2>
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	791b      	ldrb	r3, [r3, #4]
 8013560:	2b01      	cmp	r3, #1
 8013562:	d144      	bne.n	80135ee <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	3334      	adds	r3, #52	; 0x34
 8013568:	f44f 7200 	mov.w	r2, #512	; 0x200
 801356c:	2100      	movs	r1, #0
 801356e:	4618      	mov	r0, r3
 8013570:	f7ff fd77 	bl	8013062 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	3334      	adds	r3, #52	; 0x34
 8013578:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801357c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8013580:	4618      	mov	r0, r3
 8013582:	f7ff fd06 	bl	8012f92 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	3334      	adds	r3, #52	; 0x34
 801358a:	4921      	ldr	r1, [pc, #132]	; (8013610 <sync_fs+0xd4>)
 801358c:	4618      	mov	r0, r3
 801358e:	f7ff fd1b 	bl	8012fc8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	3334      	adds	r3, #52	; 0x34
 8013596:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801359a:	491e      	ldr	r1, [pc, #120]	; (8013614 <sync_fs+0xd8>)
 801359c:	4618      	mov	r0, r3
 801359e:	f7ff fd13 	bl	8012fc8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	3334      	adds	r3, #52	; 0x34
 80135a6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	695b      	ldr	r3, [r3, #20]
 80135ae:	4619      	mov	r1, r3
 80135b0:	4610      	mov	r0, r2
 80135b2:	f7ff fd09 	bl	8012fc8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	3334      	adds	r3, #52	; 0x34
 80135ba:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	691b      	ldr	r3, [r3, #16]
 80135c2:	4619      	mov	r1, r3
 80135c4:	4610      	mov	r0, r2
 80135c6:	f7ff fcff 	bl	8012fc8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	6a1b      	ldr	r3, [r3, #32]
 80135ce:	1c5a      	adds	r2, r3, #1
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	7858      	ldrb	r0, [r3, #1]
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80135e2:	2301      	movs	r3, #1
 80135e4:	f7ff fc5c 	bl	8012ea0 <disk_write>
			fs->fsi_flag = 0;
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	2200      	movs	r2, #0
 80135ec:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	785b      	ldrb	r3, [r3, #1]
 80135f2:	2200      	movs	r2, #0
 80135f4:	2100      	movs	r1, #0
 80135f6:	4618      	mov	r0, r3
 80135f8:	f7ff fc72 	bl	8012ee0 <disk_ioctl>
 80135fc:	4603      	mov	r3, r0
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d001      	beq.n	8013606 <sync_fs+0xca>
 8013602:	2301      	movs	r3, #1
 8013604:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8013606:	7bfb      	ldrb	r3, [r7, #15]
}
 8013608:	4618      	mov	r0, r3
 801360a:	3710      	adds	r7, #16
 801360c:	46bd      	mov	sp, r7
 801360e:	bd80      	pop	{r7, pc}
 8013610:	41615252 	.word	0x41615252
 8013614:	61417272 	.word	0x61417272

08013618 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8013618:	b480      	push	{r7}
 801361a:	b083      	sub	sp, #12
 801361c:	af00      	add	r7, sp, #0
 801361e:	6078      	str	r0, [r7, #4]
 8013620:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8013622:	683b      	ldr	r3, [r7, #0]
 8013624:	3b02      	subs	r3, #2
 8013626:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	699b      	ldr	r3, [r3, #24]
 801362c:	3b02      	subs	r3, #2
 801362e:	683a      	ldr	r2, [r7, #0]
 8013630:	429a      	cmp	r2, r3
 8013632:	d301      	bcc.n	8013638 <clust2sect+0x20>
 8013634:	2300      	movs	r3, #0
 8013636:	e008      	b.n	801364a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	895b      	ldrh	r3, [r3, #10]
 801363c:	461a      	mov	r2, r3
 801363e:	683b      	ldr	r3, [r7, #0]
 8013640:	fb03 f202 	mul.w	r2, r3, r2
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013648:	4413      	add	r3, r2
}
 801364a:	4618      	mov	r0, r3
 801364c:	370c      	adds	r7, #12
 801364e:	46bd      	mov	sp, r7
 8013650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013654:	4770      	bx	lr

08013656 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8013656:	b580      	push	{r7, lr}
 8013658:	b086      	sub	sp, #24
 801365a:	af00      	add	r7, sp, #0
 801365c:	6078      	str	r0, [r7, #4]
 801365e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	681b      	ldr	r3, [r3, #0]
 8013664:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8013666:	683b      	ldr	r3, [r7, #0]
 8013668:	2b01      	cmp	r3, #1
 801366a:	d904      	bls.n	8013676 <get_fat+0x20>
 801366c:	693b      	ldr	r3, [r7, #16]
 801366e:	699b      	ldr	r3, [r3, #24]
 8013670:	683a      	ldr	r2, [r7, #0]
 8013672:	429a      	cmp	r2, r3
 8013674:	d302      	bcc.n	801367c <get_fat+0x26>
		val = 1;	/* Internal error */
 8013676:	2301      	movs	r3, #1
 8013678:	617b      	str	r3, [r7, #20]
 801367a:	e08f      	b.n	801379c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801367c:	f04f 33ff 	mov.w	r3, #4294967295
 8013680:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8013682:	693b      	ldr	r3, [r7, #16]
 8013684:	781b      	ldrb	r3, [r3, #0]
 8013686:	2b03      	cmp	r3, #3
 8013688:	d062      	beq.n	8013750 <get_fat+0xfa>
 801368a:	2b03      	cmp	r3, #3
 801368c:	dc7c      	bgt.n	8013788 <get_fat+0x132>
 801368e:	2b01      	cmp	r3, #1
 8013690:	d002      	beq.n	8013698 <get_fat+0x42>
 8013692:	2b02      	cmp	r3, #2
 8013694:	d042      	beq.n	801371c <get_fat+0xc6>
 8013696:	e077      	b.n	8013788 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8013698:	683b      	ldr	r3, [r7, #0]
 801369a:	60fb      	str	r3, [r7, #12]
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	085b      	lsrs	r3, r3, #1
 80136a0:	68fa      	ldr	r2, [r7, #12]
 80136a2:	4413      	add	r3, r2
 80136a4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80136a6:	693b      	ldr	r3, [r7, #16]
 80136a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	0a5b      	lsrs	r3, r3, #9
 80136ae:	4413      	add	r3, r2
 80136b0:	4619      	mov	r1, r3
 80136b2:	6938      	ldr	r0, [r7, #16]
 80136b4:	f7ff ff14 	bl	80134e0 <move_window>
 80136b8:	4603      	mov	r3, r0
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d167      	bne.n	801378e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80136be:	68fb      	ldr	r3, [r7, #12]
 80136c0:	1c5a      	adds	r2, r3, #1
 80136c2:	60fa      	str	r2, [r7, #12]
 80136c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80136c8:	693a      	ldr	r2, [r7, #16]
 80136ca:	4413      	add	r3, r2
 80136cc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80136d0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80136d2:	693b      	ldr	r3, [r7, #16]
 80136d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	0a5b      	lsrs	r3, r3, #9
 80136da:	4413      	add	r3, r2
 80136dc:	4619      	mov	r1, r3
 80136de:	6938      	ldr	r0, [r7, #16]
 80136e0:	f7ff fefe 	bl	80134e0 <move_window>
 80136e4:	4603      	mov	r3, r0
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d153      	bne.n	8013792 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80136f0:	693a      	ldr	r2, [r7, #16]
 80136f2:	4413      	add	r3, r2
 80136f4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80136f8:	021b      	lsls	r3, r3, #8
 80136fa:	461a      	mov	r2, r3
 80136fc:	68bb      	ldr	r3, [r7, #8]
 80136fe:	4313      	orrs	r3, r2
 8013700:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8013702:	683b      	ldr	r3, [r7, #0]
 8013704:	f003 0301 	and.w	r3, r3, #1
 8013708:	2b00      	cmp	r3, #0
 801370a:	d002      	beq.n	8013712 <get_fat+0xbc>
 801370c:	68bb      	ldr	r3, [r7, #8]
 801370e:	091b      	lsrs	r3, r3, #4
 8013710:	e002      	b.n	8013718 <get_fat+0xc2>
 8013712:	68bb      	ldr	r3, [r7, #8]
 8013714:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013718:	617b      	str	r3, [r7, #20]
			break;
 801371a:	e03f      	b.n	801379c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801371c:	693b      	ldr	r3, [r7, #16]
 801371e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013720:	683b      	ldr	r3, [r7, #0]
 8013722:	0a1b      	lsrs	r3, r3, #8
 8013724:	4413      	add	r3, r2
 8013726:	4619      	mov	r1, r3
 8013728:	6938      	ldr	r0, [r7, #16]
 801372a:	f7ff fed9 	bl	80134e0 <move_window>
 801372e:	4603      	mov	r3, r0
 8013730:	2b00      	cmp	r3, #0
 8013732:	d130      	bne.n	8013796 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8013734:	693b      	ldr	r3, [r7, #16]
 8013736:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801373a:	683b      	ldr	r3, [r7, #0]
 801373c:	005b      	lsls	r3, r3, #1
 801373e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8013742:	4413      	add	r3, r2
 8013744:	4618      	mov	r0, r3
 8013746:	f7ff fbe9 	bl	8012f1c <ld_word>
 801374a:	4603      	mov	r3, r0
 801374c:	617b      	str	r3, [r7, #20]
			break;
 801374e:	e025      	b.n	801379c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013750:	693b      	ldr	r3, [r7, #16]
 8013752:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013754:	683b      	ldr	r3, [r7, #0]
 8013756:	09db      	lsrs	r3, r3, #7
 8013758:	4413      	add	r3, r2
 801375a:	4619      	mov	r1, r3
 801375c:	6938      	ldr	r0, [r7, #16]
 801375e:	f7ff febf 	bl	80134e0 <move_window>
 8013762:	4603      	mov	r3, r0
 8013764:	2b00      	cmp	r3, #0
 8013766:	d118      	bne.n	801379a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8013768:	693b      	ldr	r3, [r7, #16]
 801376a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801376e:	683b      	ldr	r3, [r7, #0]
 8013770:	009b      	lsls	r3, r3, #2
 8013772:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013776:	4413      	add	r3, r2
 8013778:	4618      	mov	r0, r3
 801377a:	f7ff fbe7 	bl	8012f4c <ld_dword>
 801377e:	4603      	mov	r3, r0
 8013780:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8013784:	617b      	str	r3, [r7, #20]
			break;
 8013786:	e009      	b.n	801379c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8013788:	2301      	movs	r3, #1
 801378a:	617b      	str	r3, [r7, #20]
 801378c:	e006      	b.n	801379c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801378e:	bf00      	nop
 8013790:	e004      	b.n	801379c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013792:	bf00      	nop
 8013794:	e002      	b.n	801379c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013796:	bf00      	nop
 8013798:	e000      	b.n	801379c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801379a:	bf00      	nop
		}
	}

	return val;
 801379c:	697b      	ldr	r3, [r7, #20]
}
 801379e:	4618      	mov	r0, r3
 80137a0:	3718      	adds	r7, #24
 80137a2:	46bd      	mov	sp, r7
 80137a4:	bd80      	pop	{r7, pc}

080137a6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80137a6:	b590      	push	{r4, r7, lr}
 80137a8:	b089      	sub	sp, #36	; 0x24
 80137aa:	af00      	add	r7, sp, #0
 80137ac:	60f8      	str	r0, [r7, #12]
 80137ae:	60b9      	str	r1, [r7, #8]
 80137b0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80137b2:	2302      	movs	r3, #2
 80137b4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80137b6:	68bb      	ldr	r3, [r7, #8]
 80137b8:	2b01      	cmp	r3, #1
 80137ba:	f240 80d2 	bls.w	8013962 <put_fat+0x1bc>
 80137be:	68fb      	ldr	r3, [r7, #12]
 80137c0:	699b      	ldr	r3, [r3, #24]
 80137c2:	68ba      	ldr	r2, [r7, #8]
 80137c4:	429a      	cmp	r2, r3
 80137c6:	f080 80cc 	bcs.w	8013962 <put_fat+0x1bc>
		switch (fs->fs_type) {
 80137ca:	68fb      	ldr	r3, [r7, #12]
 80137cc:	781b      	ldrb	r3, [r3, #0]
 80137ce:	2b03      	cmp	r3, #3
 80137d0:	f000 8096 	beq.w	8013900 <put_fat+0x15a>
 80137d4:	2b03      	cmp	r3, #3
 80137d6:	f300 80cd 	bgt.w	8013974 <put_fat+0x1ce>
 80137da:	2b01      	cmp	r3, #1
 80137dc:	d002      	beq.n	80137e4 <put_fat+0x3e>
 80137de:	2b02      	cmp	r3, #2
 80137e0:	d06e      	beq.n	80138c0 <put_fat+0x11a>
 80137e2:	e0c7      	b.n	8013974 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80137e4:	68bb      	ldr	r3, [r7, #8]
 80137e6:	61bb      	str	r3, [r7, #24]
 80137e8:	69bb      	ldr	r3, [r7, #24]
 80137ea:	085b      	lsrs	r3, r3, #1
 80137ec:	69ba      	ldr	r2, [r7, #24]
 80137ee:	4413      	add	r3, r2
 80137f0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80137f2:	68fb      	ldr	r3, [r7, #12]
 80137f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80137f6:	69bb      	ldr	r3, [r7, #24]
 80137f8:	0a5b      	lsrs	r3, r3, #9
 80137fa:	4413      	add	r3, r2
 80137fc:	4619      	mov	r1, r3
 80137fe:	68f8      	ldr	r0, [r7, #12]
 8013800:	f7ff fe6e 	bl	80134e0 <move_window>
 8013804:	4603      	mov	r3, r0
 8013806:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013808:	7ffb      	ldrb	r3, [r7, #31]
 801380a:	2b00      	cmp	r3, #0
 801380c:	f040 80ab 	bne.w	8013966 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8013810:	68fb      	ldr	r3, [r7, #12]
 8013812:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013816:	69bb      	ldr	r3, [r7, #24]
 8013818:	1c59      	adds	r1, r3, #1
 801381a:	61b9      	str	r1, [r7, #24]
 801381c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013820:	4413      	add	r3, r2
 8013822:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8013824:	68bb      	ldr	r3, [r7, #8]
 8013826:	f003 0301 	and.w	r3, r3, #1
 801382a:	2b00      	cmp	r3, #0
 801382c:	d00d      	beq.n	801384a <put_fat+0xa4>
 801382e:	697b      	ldr	r3, [r7, #20]
 8013830:	781b      	ldrb	r3, [r3, #0]
 8013832:	b25b      	sxtb	r3, r3
 8013834:	f003 030f 	and.w	r3, r3, #15
 8013838:	b25a      	sxtb	r2, r3
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	b2db      	uxtb	r3, r3
 801383e:	011b      	lsls	r3, r3, #4
 8013840:	b25b      	sxtb	r3, r3
 8013842:	4313      	orrs	r3, r2
 8013844:	b25b      	sxtb	r3, r3
 8013846:	b2db      	uxtb	r3, r3
 8013848:	e001      	b.n	801384e <put_fat+0xa8>
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	b2db      	uxtb	r3, r3
 801384e:	697a      	ldr	r2, [r7, #20]
 8013850:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	2201      	movs	r2, #1
 8013856:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801385c:	69bb      	ldr	r3, [r7, #24]
 801385e:	0a5b      	lsrs	r3, r3, #9
 8013860:	4413      	add	r3, r2
 8013862:	4619      	mov	r1, r3
 8013864:	68f8      	ldr	r0, [r7, #12]
 8013866:	f7ff fe3b 	bl	80134e0 <move_window>
 801386a:	4603      	mov	r3, r0
 801386c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801386e:	7ffb      	ldrb	r3, [r7, #31]
 8013870:	2b00      	cmp	r3, #0
 8013872:	d17a      	bne.n	801396a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801387a:	69bb      	ldr	r3, [r7, #24]
 801387c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013880:	4413      	add	r3, r2
 8013882:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8013884:	68bb      	ldr	r3, [r7, #8]
 8013886:	f003 0301 	and.w	r3, r3, #1
 801388a:	2b00      	cmp	r3, #0
 801388c:	d003      	beq.n	8013896 <put_fat+0xf0>
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	091b      	lsrs	r3, r3, #4
 8013892:	b2db      	uxtb	r3, r3
 8013894:	e00e      	b.n	80138b4 <put_fat+0x10e>
 8013896:	697b      	ldr	r3, [r7, #20]
 8013898:	781b      	ldrb	r3, [r3, #0]
 801389a:	b25b      	sxtb	r3, r3
 801389c:	f023 030f 	bic.w	r3, r3, #15
 80138a0:	b25a      	sxtb	r2, r3
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	0a1b      	lsrs	r3, r3, #8
 80138a6:	b25b      	sxtb	r3, r3
 80138a8:	f003 030f 	and.w	r3, r3, #15
 80138ac:	b25b      	sxtb	r3, r3
 80138ae:	4313      	orrs	r3, r2
 80138b0:	b25b      	sxtb	r3, r3
 80138b2:	b2db      	uxtb	r3, r3
 80138b4:	697a      	ldr	r2, [r7, #20]
 80138b6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	2201      	movs	r2, #1
 80138bc:	70da      	strb	r2, [r3, #3]
			break;
 80138be:	e059      	b.n	8013974 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80138c4:	68bb      	ldr	r3, [r7, #8]
 80138c6:	0a1b      	lsrs	r3, r3, #8
 80138c8:	4413      	add	r3, r2
 80138ca:	4619      	mov	r1, r3
 80138cc:	68f8      	ldr	r0, [r7, #12]
 80138ce:	f7ff fe07 	bl	80134e0 <move_window>
 80138d2:	4603      	mov	r3, r0
 80138d4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80138d6:	7ffb      	ldrb	r3, [r7, #31]
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d148      	bne.n	801396e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80138e2:	68bb      	ldr	r3, [r7, #8]
 80138e4:	005b      	lsls	r3, r3, #1
 80138e6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80138ea:	4413      	add	r3, r2
 80138ec:	687a      	ldr	r2, [r7, #4]
 80138ee:	b292      	uxth	r2, r2
 80138f0:	4611      	mov	r1, r2
 80138f2:	4618      	mov	r0, r3
 80138f4:	f7ff fb4d 	bl	8012f92 <st_word>
			fs->wflag = 1;
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	2201      	movs	r2, #1
 80138fc:	70da      	strb	r2, [r3, #3]
			break;
 80138fe:	e039      	b.n	8013974 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8013900:	68fb      	ldr	r3, [r7, #12]
 8013902:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013904:	68bb      	ldr	r3, [r7, #8]
 8013906:	09db      	lsrs	r3, r3, #7
 8013908:	4413      	add	r3, r2
 801390a:	4619      	mov	r1, r3
 801390c:	68f8      	ldr	r0, [r7, #12]
 801390e:	f7ff fde7 	bl	80134e0 <move_window>
 8013912:	4603      	mov	r3, r0
 8013914:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013916:	7ffb      	ldrb	r3, [r7, #31]
 8013918:	2b00      	cmp	r3, #0
 801391a:	d12a      	bne.n	8013972 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013928:	68bb      	ldr	r3, [r7, #8]
 801392a:	009b      	lsls	r3, r3, #2
 801392c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013930:	4413      	add	r3, r2
 8013932:	4618      	mov	r0, r3
 8013934:	f7ff fb0a 	bl	8012f4c <ld_dword>
 8013938:	4603      	mov	r3, r0
 801393a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801393e:	4323      	orrs	r3, r4
 8013940:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8013942:	68fb      	ldr	r3, [r7, #12]
 8013944:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013948:	68bb      	ldr	r3, [r7, #8]
 801394a:	009b      	lsls	r3, r3, #2
 801394c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013950:	4413      	add	r3, r2
 8013952:	6879      	ldr	r1, [r7, #4]
 8013954:	4618      	mov	r0, r3
 8013956:	f7ff fb37 	bl	8012fc8 <st_dword>
			fs->wflag = 1;
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	2201      	movs	r2, #1
 801395e:	70da      	strb	r2, [r3, #3]
			break;
 8013960:	e008      	b.n	8013974 <put_fat+0x1ce>
		}
	}
 8013962:	bf00      	nop
 8013964:	e006      	b.n	8013974 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8013966:	bf00      	nop
 8013968:	e004      	b.n	8013974 <put_fat+0x1ce>
			if (res != FR_OK) break;
 801396a:	bf00      	nop
 801396c:	e002      	b.n	8013974 <put_fat+0x1ce>
			if (res != FR_OK) break;
 801396e:	bf00      	nop
 8013970:	e000      	b.n	8013974 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8013972:	bf00      	nop
	return res;
 8013974:	7ffb      	ldrb	r3, [r7, #31]
}
 8013976:	4618      	mov	r0, r3
 8013978:	3724      	adds	r7, #36	; 0x24
 801397a:	46bd      	mov	sp, r7
 801397c:	bd90      	pop	{r4, r7, pc}

0801397e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801397e:	b580      	push	{r7, lr}
 8013980:	b088      	sub	sp, #32
 8013982:	af00      	add	r7, sp, #0
 8013984:	60f8      	str	r0, [r7, #12]
 8013986:	60b9      	str	r1, [r7, #8]
 8013988:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801398a:	2300      	movs	r3, #0
 801398c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	681b      	ldr	r3, [r3, #0]
 8013992:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8013994:	68bb      	ldr	r3, [r7, #8]
 8013996:	2b01      	cmp	r3, #1
 8013998:	d904      	bls.n	80139a4 <remove_chain+0x26>
 801399a:	69bb      	ldr	r3, [r7, #24]
 801399c:	699b      	ldr	r3, [r3, #24]
 801399e:	68ba      	ldr	r2, [r7, #8]
 80139a0:	429a      	cmp	r2, r3
 80139a2:	d301      	bcc.n	80139a8 <remove_chain+0x2a>
 80139a4:	2302      	movs	r3, #2
 80139a6:	e04b      	b.n	8013a40 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d00c      	beq.n	80139c8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80139ae:	f04f 32ff 	mov.w	r2, #4294967295
 80139b2:	6879      	ldr	r1, [r7, #4]
 80139b4:	69b8      	ldr	r0, [r7, #24]
 80139b6:	f7ff fef6 	bl	80137a6 <put_fat>
 80139ba:	4603      	mov	r3, r0
 80139bc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80139be:	7ffb      	ldrb	r3, [r7, #31]
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d001      	beq.n	80139c8 <remove_chain+0x4a>
 80139c4:	7ffb      	ldrb	r3, [r7, #31]
 80139c6:	e03b      	b.n	8013a40 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80139c8:	68b9      	ldr	r1, [r7, #8]
 80139ca:	68f8      	ldr	r0, [r7, #12]
 80139cc:	f7ff fe43 	bl	8013656 <get_fat>
 80139d0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80139d2:	697b      	ldr	r3, [r7, #20]
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d031      	beq.n	8013a3c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80139d8:	697b      	ldr	r3, [r7, #20]
 80139da:	2b01      	cmp	r3, #1
 80139dc:	d101      	bne.n	80139e2 <remove_chain+0x64>
 80139de:	2302      	movs	r3, #2
 80139e0:	e02e      	b.n	8013a40 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80139e2:	697b      	ldr	r3, [r7, #20]
 80139e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139e8:	d101      	bne.n	80139ee <remove_chain+0x70>
 80139ea:	2301      	movs	r3, #1
 80139ec:	e028      	b.n	8013a40 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80139ee:	2200      	movs	r2, #0
 80139f0:	68b9      	ldr	r1, [r7, #8]
 80139f2:	69b8      	ldr	r0, [r7, #24]
 80139f4:	f7ff fed7 	bl	80137a6 <put_fat>
 80139f8:	4603      	mov	r3, r0
 80139fa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80139fc:	7ffb      	ldrb	r3, [r7, #31]
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d001      	beq.n	8013a06 <remove_chain+0x88>
 8013a02:	7ffb      	ldrb	r3, [r7, #31]
 8013a04:	e01c      	b.n	8013a40 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8013a06:	69bb      	ldr	r3, [r7, #24]
 8013a08:	695a      	ldr	r2, [r3, #20]
 8013a0a:	69bb      	ldr	r3, [r7, #24]
 8013a0c:	699b      	ldr	r3, [r3, #24]
 8013a0e:	3b02      	subs	r3, #2
 8013a10:	429a      	cmp	r2, r3
 8013a12:	d20b      	bcs.n	8013a2c <remove_chain+0xae>
			fs->free_clst++;
 8013a14:	69bb      	ldr	r3, [r7, #24]
 8013a16:	695b      	ldr	r3, [r3, #20]
 8013a18:	1c5a      	adds	r2, r3, #1
 8013a1a:	69bb      	ldr	r3, [r7, #24]
 8013a1c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8013a1e:	69bb      	ldr	r3, [r7, #24]
 8013a20:	791b      	ldrb	r3, [r3, #4]
 8013a22:	f043 0301 	orr.w	r3, r3, #1
 8013a26:	b2da      	uxtb	r2, r3
 8013a28:	69bb      	ldr	r3, [r7, #24]
 8013a2a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8013a2c:	697b      	ldr	r3, [r7, #20]
 8013a2e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8013a30:	69bb      	ldr	r3, [r7, #24]
 8013a32:	699b      	ldr	r3, [r3, #24]
 8013a34:	68ba      	ldr	r2, [r7, #8]
 8013a36:	429a      	cmp	r2, r3
 8013a38:	d3c6      	bcc.n	80139c8 <remove_chain+0x4a>
 8013a3a:	e000      	b.n	8013a3e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8013a3c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8013a3e:	2300      	movs	r3, #0
}
 8013a40:	4618      	mov	r0, r3
 8013a42:	3720      	adds	r7, #32
 8013a44:	46bd      	mov	sp, r7
 8013a46:	bd80      	pop	{r7, pc}

08013a48 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8013a48:	b580      	push	{r7, lr}
 8013a4a:	b088      	sub	sp, #32
 8013a4c:	af00      	add	r7, sp, #0
 8013a4e:	6078      	str	r0, [r7, #4]
 8013a50:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8013a58:	683b      	ldr	r3, [r7, #0]
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d10d      	bne.n	8013a7a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8013a5e:	693b      	ldr	r3, [r7, #16]
 8013a60:	691b      	ldr	r3, [r3, #16]
 8013a62:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8013a64:	69bb      	ldr	r3, [r7, #24]
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d004      	beq.n	8013a74 <create_chain+0x2c>
 8013a6a:	693b      	ldr	r3, [r7, #16]
 8013a6c:	699b      	ldr	r3, [r3, #24]
 8013a6e:	69ba      	ldr	r2, [r7, #24]
 8013a70:	429a      	cmp	r2, r3
 8013a72:	d31b      	bcc.n	8013aac <create_chain+0x64>
 8013a74:	2301      	movs	r3, #1
 8013a76:	61bb      	str	r3, [r7, #24]
 8013a78:	e018      	b.n	8013aac <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8013a7a:	6839      	ldr	r1, [r7, #0]
 8013a7c:	6878      	ldr	r0, [r7, #4]
 8013a7e:	f7ff fdea 	bl	8013656 <get_fat>
 8013a82:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8013a84:	68fb      	ldr	r3, [r7, #12]
 8013a86:	2b01      	cmp	r3, #1
 8013a88:	d801      	bhi.n	8013a8e <create_chain+0x46>
 8013a8a:	2301      	movs	r3, #1
 8013a8c:	e070      	b.n	8013b70 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a94:	d101      	bne.n	8013a9a <create_chain+0x52>
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	e06a      	b.n	8013b70 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8013a9a:	693b      	ldr	r3, [r7, #16]
 8013a9c:	699b      	ldr	r3, [r3, #24]
 8013a9e:	68fa      	ldr	r2, [r7, #12]
 8013aa0:	429a      	cmp	r2, r3
 8013aa2:	d201      	bcs.n	8013aa8 <create_chain+0x60>
 8013aa4:	68fb      	ldr	r3, [r7, #12]
 8013aa6:	e063      	b.n	8013b70 <create_chain+0x128>
		scl = clst;
 8013aa8:	683b      	ldr	r3, [r7, #0]
 8013aaa:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8013aac:	69bb      	ldr	r3, [r7, #24]
 8013aae:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8013ab0:	69fb      	ldr	r3, [r7, #28]
 8013ab2:	3301      	adds	r3, #1
 8013ab4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8013ab6:	693b      	ldr	r3, [r7, #16]
 8013ab8:	699b      	ldr	r3, [r3, #24]
 8013aba:	69fa      	ldr	r2, [r7, #28]
 8013abc:	429a      	cmp	r2, r3
 8013abe:	d307      	bcc.n	8013ad0 <create_chain+0x88>
				ncl = 2;
 8013ac0:	2302      	movs	r3, #2
 8013ac2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8013ac4:	69fa      	ldr	r2, [r7, #28]
 8013ac6:	69bb      	ldr	r3, [r7, #24]
 8013ac8:	429a      	cmp	r2, r3
 8013aca:	d901      	bls.n	8013ad0 <create_chain+0x88>
 8013acc:	2300      	movs	r3, #0
 8013ace:	e04f      	b.n	8013b70 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8013ad0:	69f9      	ldr	r1, [r7, #28]
 8013ad2:	6878      	ldr	r0, [r7, #4]
 8013ad4:	f7ff fdbf 	bl	8013656 <get_fat>
 8013ad8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d00e      	beq.n	8013afe <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	2b01      	cmp	r3, #1
 8013ae4:	d003      	beq.n	8013aee <create_chain+0xa6>
 8013ae6:	68fb      	ldr	r3, [r7, #12]
 8013ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013aec:	d101      	bne.n	8013af2 <create_chain+0xaa>
 8013aee:	68fb      	ldr	r3, [r7, #12]
 8013af0:	e03e      	b.n	8013b70 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8013af2:	69fa      	ldr	r2, [r7, #28]
 8013af4:	69bb      	ldr	r3, [r7, #24]
 8013af6:	429a      	cmp	r2, r3
 8013af8:	d1da      	bne.n	8013ab0 <create_chain+0x68>
 8013afa:	2300      	movs	r3, #0
 8013afc:	e038      	b.n	8013b70 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8013afe:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8013b00:	f04f 32ff 	mov.w	r2, #4294967295
 8013b04:	69f9      	ldr	r1, [r7, #28]
 8013b06:	6938      	ldr	r0, [r7, #16]
 8013b08:	f7ff fe4d 	bl	80137a6 <put_fat>
 8013b0c:	4603      	mov	r3, r0
 8013b0e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8013b10:	7dfb      	ldrb	r3, [r7, #23]
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d109      	bne.n	8013b2a <create_chain+0xe2>
 8013b16:	683b      	ldr	r3, [r7, #0]
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d006      	beq.n	8013b2a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8013b1c:	69fa      	ldr	r2, [r7, #28]
 8013b1e:	6839      	ldr	r1, [r7, #0]
 8013b20:	6938      	ldr	r0, [r7, #16]
 8013b22:	f7ff fe40 	bl	80137a6 <put_fat>
 8013b26:	4603      	mov	r3, r0
 8013b28:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8013b2a:	7dfb      	ldrb	r3, [r7, #23]
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d116      	bne.n	8013b5e <create_chain+0x116>
		fs->last_clst = ncl;
 8013b30:	693b      	ldr	r3, [r7, #16]
 8013b32:	69fa      	ldr	r2, [r7, #28]
 8013b34:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8013b36:	693b      	ldr	r3, [r7, #16]
 8013b38:	695a      	ldr	r2, [r3, #20]
 8013b3a:	693b      	ldr	r3, [r7, #16]
 8013b3c:	699b      	ldr	r3, [r3, #24]
 8013b3e:	3b02      	subs	r3, #2
 8013b40:	429a      	cmp	r2, r3
 8013b42:	d804      	bhi.n	8013b4e <create_chain+0x106>
 8013b44:	693b      	ldr	r3, [r7, #16]
 8013b46:	695b      	ldr	r3, [r3, #20]
 8013b48:	1e5a      	subs	r2, r3, #1
 8013b4a:	693b      	ldr	r3, [r7, #16]
 8013b4c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8013b4e:	693b      	ldr	r3, [r7, #16]
 8013b50:	791b      	ldrb	r3, [r3, #4]
 8013b52:	f043 0301 	orr.w	r3, r3, #1
 8013b56:	b2da      	uxtb	r2, r3
 8013b58:	693b      	ldr	r3, [r7, #16]
 8013b5a:	711a      	strb	r2, [r3, #4]
 8013b5c:	e007      	b.n	8013b6e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8013b5e:	7dfb      	ldrb	r3, [r7, #23]
 8013b60:	2b01      	cmp	r3, #1
 8013b62:	d102      	bne.n	8013b6a <create_chain+0x122>
 8013b64:	f04f 33ff 	mov.w	r3, #4294967295
 8013b68:	e000      	b.n	8013b6c <create_chain+0x124>
 8013b6a:	2301      	movs	r3, #1
 8013b6c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8013b6e:	69fb      	ldr	r3, [r7, #28]
}
 8013b70:	4618      	mov	r0, r3
 8013b72:	3720      	adds	r7, #32
 8013b74:	46bd      	mov	sp, r7
 8013b76:	bd80      	pop	{r7, pc}

08013b78 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8013b78:	b480      	push	{r7}
 8013b7a:	b087      	sub	sp, #28
 8013b7c:	af00      	add	r7, sp, #0
 8013b7e:	6078      	str	r0, [r7, #4]
 8013b80:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b8c:	3304      	adds	r3, #4
 8013b8e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8013b90:	683b      	ldr	r3, [r7, #0]
 8013b92:	0a5b      	lsrs	r3, r3, #9
 8013b94:	68fa      	ldr	r2, [r7, #12]
 8013b96:	8952      	ldrh	r2, [r2, #10]
 8013b98:	fbb3 f3f2 	udiv	r3, r3, r2
 8013b9c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013b9e:	693b      	ldr	r3, [r7, #16]
 8013ba0:	1d1a      	adds	r2, r3, #4
 8013ba2:	613a      	str	r2, [r7, #16]
 8013ba4:	681b      	ldr	r3, [r3, #0]
 8013ba6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8013ba8:	68bb      	ldr	r3, [r7, #8]
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d101      	bne.n	8013bb2 <clmt_clust+0x3a>
 8013bae:	2300      	movs	r3, #0
 8013bb0:	e010      	b.n	8013bd4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8013bb2:	697a      	ldr	r2, [r7, #20]
 8013bb4:	68bb      	ldr	r3, [r7, #8]
 8013bb6:	429a      	cmp	r2, r3
 8013bb8:	d307      	bcc.n	8013bca <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8013bba:	697a      	ldr	r2, [r7, #20]
 8013bbc:	68bb      	ldr	r3, [r7, #8]
 8013bbe:	1ad3      	subs	r3, r2, r3
 8013bc0:	617b      	str	r3, [r7, #20]
 8013bc2:	693b      	ldr	r3, [r7, #16]
 8013bc4:	3304      	adds	r3, #4
 8013bc6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013bc8:	e7e9      	b.n	8013b9e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8013bca:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8013bcc:	693b      	ldr	r3, [r7, #16]
 8013bce:	681a      	ldr	r2, [r3, #0]
 8013bd0:	697b      	ldr	r3, [r7, #20]
 8013bd2:	4413      	add	r3, r2
}
 8013bd4:	4618      	mov	r0, r3
 8013bd6:	371c      	adds	r7, #28
 8013bd8:	46bd      	mov	sp, r7
 8013bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bde:	4770      	bx	lr

08013be0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8013be0:	b580      	push	{r7, lr}
 8013be2:	b086      	sub	sp, #24
 8013be4:	af00      	add	r7, sp, #0
 8013be6:	6078      	str	r0, [r7, #4]
 8013be8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8013bf0:	683b      	ldr	r3, [r7, #0]
 8013bf2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013bf6:	d204      	bcs.n	8013c02 <dir_sdi+0x22>
 8013bf8:	683b      	ldr	r3, [r7, #0]
 8013bfa:	f003 031f 	and.w	r3, r3, #31
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d001      	beq.n	8013c06 <dir_sdi+0x26>
		return FR_INT_ERR;
 8013c02:	2302      	movs	r3, #2
 8013c04:	e063      	b.n	8013cce <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	683a      	ldr	r2, [r7, #0]
 8013c0a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	689b      	ldr	r3, [r3, #8]
 8013c10:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8013c12:	697b      	ldr	r3, [r7, #20]
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d106      	bne.n	8013c26 <dir_sdi+0x46>
 8013c18:	693b      	ldr	r3, [r7, #16]
 8013c1a:	781b      	ldrb	r3, [r3, #0]
 8013c1c:	2b02      	cmp	r3, #2
 8013c1e:	d902      	bls.n	8013c26 <dir_sdi+0x46>
		clst = fs->dirbase;
 8013c20:	693b      	ldr	r3, [r7, #16]
 8013c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c24:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8013c26:	697b      	ldr	r3, [r7, #20]
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d10c      	bne.n	8013c46 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8013c2c:	683b      	ldr	r3, [r7, #0]
 8013c2e:	095b      	lsrs	r3, r3, #5
 8013c30:	693a      	ldr	r2, [r7, #16]
 8013c32:	8912      	ldrh	r2, [r2, #8]
 8013c34:	4293      	cmp	r3, r2
 8013c36:	d301      	bcc.n	8013c3c <dir_sdi+0x5c>
 8013c38:	2302      	movs	r3, #2
 8013c3a:	e048      	b.n	8013cce <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8013c3c:	693b      	ldr	r3, [r7, #16]
 8013c3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	61da      	str	r2, [r3, #28]
 8013c44:	e029      	b.n	8013c9a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8013c46:	693b      	ldr	r3, [r7, #16]
 8013c48:	895b      	ldrh	r3, [r3, #10]
 8013c4a:	025b      	lsls	r3, r3, #9
 8013c4c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013c4e:	e019      	b.n	8013c84 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	6979      	ldr	r1, [r7, #20]
 8013c54:	4618      	mov	r0, r3
 8013c56:	f7ff fcfe 	bl	8013656 <get_fat>
 8013c5a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013c5c:	697b      	ldr	r3, [r7, #20]
 8013c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c62:	d101      	bne.n	8013c68 <dir_sdi+0x88>
 8013c64:	2301      	movs	r3, #1
 8013c66:	e032      	b.n	8013cce <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8013c68:	697b      	ldr	r3, [r7, #20]
 8013c6a:	2b01      	cmp	r3, #1
 8013c6c:	d904      	bls.n	8013c78 <dir_sdi+0x98>
 8013c6e:	693b      	ldr	r3, [r7, #16]
 8013c70:	699b      	ldr	r3, [r3, #24]
 8013c72:	697a      	ldr	r2, [r7, #20]
 8013c74:	429a      	cmp	r2, r3
 8013c76:	d301      	bcc.n	8013c7c <dir_sdi+0x9c>
 8013c78:	2302      	movs	r3, #2
 8013c7a:	e028      	b.n	8013cce <dir_sdi+0xee>
			ofs -= csz;
 8013c7c:	683a      	ldr	r2, [r7, #0]
 8013c7e:	68fb      	ldr	r3, [r7, #12]
 8013c80:	1ad3      	subs	r3, r2, r3
 8013c82:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013c84:	683a      	ldr	r2, [r7, #0]
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	429a      	cmp	r2, r3
 8013c8a:	d2e1      	bcs.n	8013c50 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8013c8c:	6979      	ldr	r1, [r7, #20]
 8013c8e:	6938      	ldr	r0, [r7, #16]
 8013c90:	f7ff fcc2 	bl	8013618 <clust2sect>
 8013c94:	4602      	mov	r2, r0
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	697a      	ldr	r2, [r7, #20]
 8013c9e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	69db      	ldr	r3, [r3, #28]
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d101      	bne.n	8013cac <dir_sdi+0xcc>
 8013ca8:	2302      	movs	r3, #2
 8013caa:	e010      	b.n	8013cce <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	69da      	ldr	r2, [r3, #28]
 8013cb0:	683b      	ldr	r3, [r7, #0]
 8013cb2:	0a5b      	lsrs	r3, r3, #9
 8013cb4:	441a      	add	r2, r3
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8013cba:	693b      	ldr	r3, [r7, #16]
 8013cbc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013cc0:	683b      	ldr	r3, [r7, #0]
 8013cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013cc6:	441a      	add	r2, r3
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013ccc:	2300      	movs	r3, #0
}
 8013cce:	4618      	mov	r0, r3
 8013cd0:	3718      	adds	r7, #24
 8013cd2:	46bd      	mov	sp, r7
 8013cd4:	bd80      	pop	{r7, pc}

08013cd6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8013cd6:	b580      	push	{r7, lr}
 8013cd8:	b086      	sub	sp, #24
 8013cda:	af00      	add	r7, sp, #0
 8013cdc:	6078      	str	r0, [r7, #4]
 8013cde:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	681b      	ldr	r3, [r3, #0]
 8013ce4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	695b      	ldr	r3, [r3, #20]
 8013cea:	3320      	adds	r3, #32
 8013cec:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	69db      	ldr	r3, [r3, #28]
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d003      	beq.n	8013cfe <dir_next+0x28>
 8013cf6:	68bb      	ldr	r3, [r7, #8]
 8013cf8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013cfc:	d301      	bcc.n	8013d02 <dir_next+0x2c>
 8013cfe:	2304      	movs	r3, #4
 8013d00:	e0aa      	b.n	8013e58 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8013d02:	68bb      	ldr	r3, [r7, #8]
 8013d04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	f040 8098 	bne.w	8013e3e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	69db      	ldr	r3, [r3, #28]
 8013d12:	1c5a      	adds	r2, r3, #1
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	699b      	ldr	r3, [r3, #24]
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d10b      	bne.n	8013d38 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8013d20:	68bb      	ldr	r3, [r7, #8]
 8013d22:	095b      	lsrs	r3, r3, #5
 8013d24:	68fa      	ldr	r2, [r7, #12]
 8013d26:	8912      	ldrh	r2, [r2, #8]
 8013d28:	4293      	cmp	r3, r2
 8013d2a:	f0c0 8088 	bcc.w	8013e3e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	2200      	movs	r2, #0
 8013d32:	61da      	str	r2, [r3, #28]
 8013d34:	2304      	movs	r3, #4
 8013d36:	e08f      	b.n	8013e58 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8013d38:	68bb      	ldr	r3, [r7, #8]
 8013d3a:	0a5b      	lsrs	r3, r3, #9
 8013d3c:	68fa      	ldr	r2, [r7, #12]
 8013d3e:	8952      	ldrh	r2, [r2, #10]
 8013d40:	3a01      	subs	r2, #1
 8013d42:	4013      	ands	r3, r2
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d17a      	bne.n	8013e3e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8013d48:	687a      	ldr	r2, [r7, #4]
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	699b      	ldr	r3, [r3, #24]
 8013d4e:	4619      	mov	r1, r3
 8013d50:	4610      	mov	r0, r2
 8013d52:	f7ff fc80 	bl	8013656 <get_fat>
 8013d56:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8013d58:	697b      	ldr	r3, [r7, #20]
 8013d5a:	2b01      	cmp	r3, #1
 8013d5c:	d801      	bhi.n	8013d62 <dir_next+0x8c>
 8013d5e:	2302      	movs	r3, #2
 8013d60:	e07a      	b.n	8013e58 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8013d62:	697b      	ldr	r3, [r7, #20]
 8013d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d68:	d101      	bne.n	8013d6e <dir_next+0x98>
 8013d6a:	2301      	movs	r3, #1
 8013d6c:	e074      	b.n	8013e58 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	699b      	ldr	r3, [r3, #24]
 8013d72:	697a      	ldr	r2, [r7, #20]
 8013d74:	429a      	cmp	r2, r3
 8013d76:	d358      	bcc.n	8013e2a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8013d78:	683b      	ldr	r3, [r7, #0]
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d104      	bne.n	8013d88 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	2200      	movs	r2, #0
 8013d82:	61da      	str	r2, [r3, #28]
 8013d84:	2304      	movs	r3, #4
 8013d86:	e067      	b.n	8013e58 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8013d88:	687a      	ldr	r2, [r7, #4]
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	699b      	ldr	r3, [r3, #24]
 8013d8e:	4619      	mov	r1, r3
 8013d90:	4610      	mov	r0, r2
 8013d92:	f7ff fe59 	bl	8013a48 <create_chain>
 8013d96:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8013d98:	697b      	ldr	r3, [r7, #20]
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d101      	bne.n	8013da2 <dir_next+0xcc>
 8013d9e:	2307      	movs	r3, #7
 8013da0:	e05a      	b.n	8013e58 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8013da2:	697b      	ldr	r3, [r7, #20]
 8013da4:	2b01      	cmp	r3, #1
 8013da6:	d101      	bne.n	8013dac <dir_next+0xd6>
 8013da8:	2302      	movs	r3, #2
 8013daa:	e055      	b.n	8013e58 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013dac:	697b      	ldr	r3, [r7, #20]
 8013dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013db2:	d101      	bne.n	8013db8 <dir_next+0xe2>
 8013db4:	2301      	movs	r3, #1
 8013db6:	e04f      	b.n	8013e58 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8013db8:	68f8      	ldr	r0, [r7, #12]
 8013dba:	f7ff fb4d 	bl	8013458 <sync_window>
 8013dbe:	4603      	mov	r3, r0
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d001      	beq.n	8013dc8 <dir_next+0xf2>
 8013dc4:	2301      	movs	r3, #1
 8013dc6:	e047      	b.n	8013e58 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8013dc8:	68fb      	ldr	r3, [r7, #12]
 8013dca:	3334      	adds	r3, #52	; 0x34
 8013dcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013dd0:	2100      	movs	r1, #0
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	f7ff f945 	bl	8013062 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013dd8:	2300      	movs	r3, #0
 8013dda:	613b      	str	r3, [r7, #16]
 8013ddc:	6979      	ldr	r1, [r7, #20]
 8013dde:	68f8      	ldr	r0, [r7, #12]
 8013de0:	f7ff fc1a 	bl	8013618 <clust2sect>
 8013de4:	4602      	mov	r2, r0
 8013de6:	68fb      	ldr	r3, [r7, #12]
 8013de8:	631a      	str	r2, [r3, #48]	; 0x30
 8013dea:	e012      	b.n	8013e12 <dir_next+0x13c>
						fs->wflag = 1;
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	2201      	movs	r2, #1
 8013df0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8013df2:	68f8      	ldr	r0, [r7, #12]
 8013df4:	f7ff fb30 	bl	8013458 <sync_window>
 8013df8:	4603      	mov	r3, r0
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d001      	beq.n	8013e02 <dir_next+0x12c>
 8013dfe:	2301      	movs	r3, #1
 8013e00:	e02a      	b.n	8013e58 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013e02:	693b      	ldr	r3, [r7, #16]
 8013e04:	3301      	adds	r3, #1
 8013e06:	613b      	str	r3, [r7, #16]
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e0c:	1c5a      	adds	r2, r3, #1
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	631a      	str	r2, [r3, #48]	; 0x30
 8013e12:	68fb      	ldr	r3, [r7, #12]
 8013e14:	895b      	ldrh	r3, [r3, #10]
 8013e16:	461a      	mov	r2, r3
 8013e18:	693b      	ldr	r3, [r7, #16]
 8013e1a:	4293      	cmp	r3, r2
 8013e1c:	d3e6      	bcc.n	8013dec <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013e22:	693b      	ldr	r3, [r7, #16]
 8013e24:	1ad2      	subs	r2, r2, r3
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	697a      	ldr	r2, [r7, #20]
 8013e2e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8013e30:	6979      	ldr	r1, [r7, #20]
 8013e32:	68f8      	ldr	r0, [r7, #12]
 8013e34:	f7ff fbf0 	bl	8013618 <clust2sect>
 8013e38:	4602      	mov	r2, r0
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	68ba      	ldr	r2, [r7, #8]
 8013e42:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8013e44:	68fb      	ldr	r3, [r7, #12]
 8013e46:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013e4a:	68bb      	ldr	r3, [r7, #8]
 8013e4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e50:	441a      	add	r2, r3
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013e56:	2300      	movs	r3, #0
}
 8013e58:	4618      	mov	r0, r3
 8013e5a:	3718      	adds	r7, #24
 8013e5c:	46bd      	mov	sp, r7
 8013e5e:	bd80      	pop	{r7, pc}

08013e60 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8013e60:	b580      	push	{r7, lr}
 8013e62:	b086      	sub	sp, #24
 8013e64:	af00      	add	r7, sp, #0
 8013e66:	6078      	str	r0, [r7, #4]
 8013e68:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	681b      	ldr	r3, [r3, #0]
 8013e6e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8013e70:	2100      	movs	r1, #0
 8013e72:	6878      	ldr	r0, [r7, #4]
 8013e74:	f7ff feb4 	bl	8013be0 <dir_sdi>
 8013e78:	4603      	mov	r3, r0
 8013e7a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013e7c:	7dfb      	ldrb	r3, [r7, #23]
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d12b      	bne.n	8013eda <dir_alloc+0x7a>
		n = 0;
 8013e82:	2300      	movs	r3, #0
 8013e84:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	69db      	ldr	r3, [r3, #28]
 8013e8a:	4619      	mov	r1, r3
 8013e8c:	68f8      	ldr	r0, [r7, #12]
 8013e8e:	f7ff fb27 	bl	80134e0 <move_window>
 8013e92:	4603      	mov	r3, r0
 8013e94:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013e96:	7dfb      	ldrb	r3, [r7, #23]
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d11d      	bne.n	8013ed8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	6a1b      	ldr	r3, [r3, #32]
 8013ea0:	781b      	ldrb	r3, [r3, #0]
 8013ea2:	2be5      	cmp	r3, #229	; 0xe5
 8013ea4:	d004      	beq.n	8013eb0 <dir_alloc+0x50>
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	6a1b      	ldr	r3, [r3, #32]
 8013eaa:	781b      	ldrb	r3, [r3, #0]
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d107      	bne.n	8013ec0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8013eb0:	693b      	ldr	r3, [r7, #16]
 8013eb2:	3301      	adds	r3, #1
 8013eb4:	613b      	str	r3, [r7, #16]
 8013eb6:	693a      	ldr	r2, [r7, #16]
 8013eb8:	683b      	ldr	r3, [r7, #0]
 8013eba:	429a      	cmp	r2, r3
 8013ebc:	d102      	bne.n	8013ec4 <dir_alloc+0x64>
 8013ebe:	e00c      	b.n	8013eda <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8013ec0:	2300      	movs	r3, #0
 8013ec2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8013ec4:	2101      	movs	r1, #1
 8013ec6:	6878      	ldr	r0, [r7, #4]
 8013ec8:	f7ff ff05 	bl	8013cd6 <dir_next>
 8013ecc:	4603      	mov	r3, r0
 8013ece:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8013ed0:	7dfb      	ldrb	r3, [r7, #23]
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d0d7      	beq.n	8013e86 <dir_alloc+0x26>
 8013ed6:	e000      	b.n	8013eda <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8013ed8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8013eda:	7dfb      	ldrb	r3, [r7, #23]
 8013edc:	2b04      	cmp	r3, #4
 8013ede:	d101      	bne.n	8013ee4 <dir_alloc+0x84>
 8013ee0:	2307      	movs	r3, #7
 8013ee2:	75fb      	strb	r3, [r7, #23]
	return res;
 8013ee4:	7dfb      	ldrb	r3, [r7, #23]
}
 8013ee6:	4618      	mov	r0, r3
 8013ee8:	3718      	adds	r7, #24
 8013eea:	46bd      	mov	sp, r7
 8013eec:	bd80      	pop	{r7, pc}

08013eee <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8013eee:	b580      	push	{r7, lr}
 8013ef0:	b084      	sub	sp, #16
 8013ef2:	af00      	add	r7, sp, #0
 8013ef4:	6078      	str	r0, [r7, #4]
 8013ef6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8013ef8:	683b      	ldr	r3, [r7, #0]
 8013efa:	331a      	adds	r3, #26
 8013efc:	4618      	mov	r0, r3
 8013efe:	f7ff f80d 	bl	8012f1c <ld_word>
 8013f02:	4603      	mov	r3, r0
 8013f04:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	781b      	ldrb	r3, [r3, #0]
 8013f0a:	2b03      	cmp	r3, #3
 8013f0c:	d109      	bne.n	8013f22 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8013f0e:	683b      	ldr	r3, [r7, #0]
 8013f10:	3314      	adds	r3, #20
 8013f12:	4618      	mov	r0, r3
 8013f14:	f7ff f802 	bl	8012f1c <ld_word>
 8013f18:	4603      	mov	r3, r0
 8013f1a:	041b      	lsls	r3, r3, #16
 8013f1c:	68fa      	ldr	r2, [r7, #12]
 8013f1e:	4313      	orrs	r3, r2
 8013f20:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8013f22:	68fb      	ldr	r3, [r7, #12]
}
 8013f24:	4618      	mov	r0, r3
 8013f26:	3710      	adds	r7, #16
 8013f28:	46bd      	mov	sp, r7
 8013f2a:	bd80      	pop	{r7, pc}

08013f2c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8013f2c:	b580      	push	{r7, lr}
 8013f2e:	b084      	sub	sp, #16
 8013f30:	af00      	add	r7, sp, #0
 8013f32:	60f8      	str	r0, [r7, #12]
 8013f34:	60b9      	str	r1, [r7, #8]
 8013f36:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8013f38:	68bb      	ldr	r3, [r7, #8]
 8013f3a:	331a      	adds	r3, #26
 8013f3c:	687a      	ldr	r2, [r7, #4]
 8013f3e:	b292      	uxth	r2, r2
 8013f40:	4611      	mov	r1, r2
 8013f42:	4618      	mov	r0, r3
 8013f44:	f7ff f825 	bl	8012f92 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	781b      	ldrb	r3, [r3, #0]
 8013f4c:	2b03      	cmp	r3, #3
 8013f4e:	d109      	bne.n	8013f64 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8013f50:	68bb      	ldr	r3, [r7, #8]
 8013f52:	f103 0214 	add.w	r2, r3, #20
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	0c1b      	lsrs	r3, r3, #16
 8013f5a:	b29b      	uxth	r3, r3
 8013f5c:	4619      	mov	r1, r3
 8013f5e:	4610      	mov	r0, r2
 8013f60:	f7ff f817 	bl	8012f92 <st_word>
	}
}
 8013f64:	bf00      	nop
 8013f66:	3710      	adds	r7, #16
 8013f68:	46bd      	mov	sp, r7
 8013f6a:	bd80      	pop	{r7, pc}

08013f6c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8013f6c:	b580      	push	{r7, lr}
 8013f6e:	b086      	sub	sp, #24
 8013f70:	af00      	add	r7, sp, #0
 8013f72:	6078      	str	r0, [r7, #4]
 8013f74:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8013f76:	2304      	movs	r3, #4
 8013f78:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	681b      	ldr	r3, [r3, #0]
 8013f7e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8013f80:	e03c      	b.n	8013ffc <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	69db      	ldr	r3, [r3, #28]
 8013f86:	4619      	mov	r1, r3
 8013f88:	6938      	ldr	r0, [r7, #16]
 8013f8a:	f7ff faa9 	bl	80134e0 <move_window>
 8013f8e:	4603      	mov	r3, r0
 8013f90:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013f92:	7dfb      	ldrb	r3, [r7, #23]
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d136      	bne.n	8014006 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	6a1b      	ldr	r3, [r3, #32]
 8013f9c:	781b      	ldrb	r3, [r3, #0]
 8013f9e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8013fa0:	7bfb      	ldrb	r3, [r7, #15]
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d102      	bne.n	8013fac <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8013fa6:	2304      	movs	r3, #4
 8013fa8:	75fb      	strb	r3, [r7, #23]
 8013faa:	e031      	b.n	8014010 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	6a1b      	ldr	r3, [r3, #32]
 8013fb0:	330b      	adds	r3, #11
 8013fb2:	781b      	ldrb	r3, [r3, #0]
 8013fb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013fb8:	73bb      	strb	r3, [r7, #14]
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	7bba      	ldrb	r2, [r7, #14]
 8013fbe:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8013fc0:	7bfb      	ldrb	r3, [r7, #15]
 8013fc2:	2be5      	cmp	r3, #229	; 0xe5
 8013fc4:	d011      	beq.n	8013fea <dir_read+0x7e>
 8013fc6:	7bfb      	ldrb	r3, [r7, #15]
 8013fc8:	2b2e      	cmp	r3, #46	; 0x2e
 8013fca:	d00e      	beq.n	8013fea <dir_read+0x7e>
 8013fcc:	7bbb      	ldrb	r3, [r7, #14]
 8013fce:	2b0f      	cmp	r3, #15
 8013fd0:	d00b      	beq.n	8013fea <dir_read+0x7e>
 8013fd2:	7bbb      	ldrb	r3, [r7, #14]
 8013fd4:	f023 0320 	bic.w	r3, r3, #32
 8013fd8:	2b08      	cmp	r3, #8
 8013fda:	bf0c      	ite	eq
 8013fdc:	2301      	moveq	r3, #1
 8013fde:	2300      	movne	r3, #0
 8013fe0:	b2db      	uxtb	r3, r3
 8013fe2:	461a      	mov	r2, r3
 8013fe4:	683b      	ldr	r3, [r7, #0]
 8013fe6:	4293      	cmp	r3, r2
 8013fe8:	d00f      	beq.n	801400a <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8013fea:	2100      	movs	r1, #0
 8013fec:	6878      	ldr	r0, [r7, #4]
 8013fee:	f7ff fe72 	bl	8013cd6 <dir_next>
 8013ff2:	4603      	mov	r3, r0
 8013ff4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013ff6:	7dfb      	ldrb	r3, [r7, #23]
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d108      	bne.n	801400e <dir_read+0xa2>
	while (dp->sect) {
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	69db      	ldr	r3, [r3, #28]
 8014000:	2b00      	cmp	r3, #0
 8014002:	d1be      	bne.n	8013f82 <dir_read+0x16>
 8014004:	e004      	b.n	8014010 <dir_read+0xa4>
		if (res != FR_OK) break;
 8014006:	bf00      	nop
 8014008:	e002      	b.n	8014010 <dir_read+0xa4>
				break;
 801400a:	bf00      	nop
 801400c:	e000      	b.n	8014010 <dir_read+0xa4>
		if (res != FR_OK) break;
 801400e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8014010:	7dfb      	ldrb	r3, [r7, #23]
 8014012:	2b00      	cmp	r3, #0
 8014014:	d002      	beq.n	801401c <dir_read+0xb0>
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	2200      	movs	r2, #0
 801401a:	61da      	str	r2, [r3, #28]
	return res;
 801401c:	7dfb      	ldrb	r3, [r7, #23]
}
 801401e:	4618      	mov	r0, r3
 8014020:	3718      	adds	r7, #24
 8014022:	46bd      	mov	sp, r7
 8014024:	bd80      	pop	{r7, pc}

08014026 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8014026:	b580      	push	{r7, lr}
 8014028:	b086      	sub	sp, #24
 801402a:	af00      	add	r7, sp, #0
 801402c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8014034:	2100      	movs	r1, #0
 8014036:	6878      	ldr	r0, [r7, #4]
 8014038:	f7ff fdd2 	bl	8013be0 <dir_sdi>
 801403c:	4603      	mov	r3, r0
 801403e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8014040:	7dfb      	ldrb	r3, [r7, #23]
 8014042:	2b00      	cmp	r3, #0
 8014044:	d001      	beq.n	801404a <dir_find+0x24>
 8014046:	7dfb      	ldrb	r3, [r7, #23]
 8014048:	e03e      	b.n	80140c8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	69db      	ldr	r3, [r3, #28]
 801404e:	4619      	mov	r1, r3
 8014050:	6938      	ldr	r0, [r7, #16]
 8014052:	f7ff fa45 	bl	80134e0 <move_window>
 8014056:	4603      	mov	r3, r0
 8014058:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801405a:	7dfb      	ldrb	r3, [r7, #23]
 801405c:	2b00      	cmp	r3, #0
 801405e:	d12f      	bne.n	80140c0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	6a1b      	ldr	r3, [r3, #32]
 8014064:	781b      	ldrb	r3, [r3, #0]
 8014066:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8014068:	7bfb      	ldrb	r3, [r7, #15]
 801406a:	2b00      	cmp	r3, #0
 801406c:	d102      	bne.n	8014074 <dir_find+0x4e>
 801406e:	2304      	movs	r3, #4
 8014070:	75fb      	strb	r3, [r7, #23]
 8014072:	e028      	b.n	80140c6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	6a1b      	ldr	r3, [r3, #32]
 8014078:	330b      	adds	r3, #11
 801407a:	781b      	ldrb	r3, [r3, #0]
 801407c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014080:	b2da      	uxtb	r2, r3
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	6a1b      	ldr	r3, [r3, #32]
 801408a:	330b      	adds	r3, #11
 801408c:	781b      	ldrb	r3, [r3, #0]
 801408e:	f003 0308 	and.w	r3, r3, #8
 8014092:	2b00      	cmp	r3, #0
 8014094:	d10a      	bne.n	80140ac <dir_find+0x86>
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	6a18      	ldr	r0, [r3, #32]
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	3324      	adds	r3, #36	; 0x24
 801409e:	220b      	movs	r2, #11
 80140a0:	4619      	mov	r1, r3
 80140a2:	f7fe fff9 	bl	8013098 <mem_cmp>
 80140a6:	4603      	mov	r3, r0
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d00b      	beq.n	80140c4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80140ac:	2100      	movs	r1, #0
 80140ae:	6878      	ldr	r0, [r7, #4]
 80140b0:	f7ff fe11 	bl	8013cd6 <dir_next>
 80140b4:	4603      	mov	r3, r0
 80140b6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80140b8:	7dfb      	ldrb	r3, [r7, #23]
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d0c5      	beq.n	801404a <dir_find+0x24>
 80140be:	e002      	b.n	80140c6 <dir_find+0xa0>
		if (res != FR_OK) break;
 80140c0:	bf00      	nop
 80140c2:	e000      	b.n	80140c6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80140c4:	bf00      	nop

	return res;
 80140c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80140c8:	4618      	mov	r0, r3
 80140ca:	3718      	adds	r7, #24
 80140cc:	46bd      	mov	sp, r7
 80140ce:	bd80      	pop	{r7, pc}

080140d0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80140d0:	b580      	push	{r7, lr}
 80140d2:	b084      	sub	sp, #16
 80140d4:	af00      	add	r7, sp, #0
 80140d6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	681b      	ldr	r3, [r3, #0]
 80140dc:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80140de:	2101      	movs	r1, #1
 80140e0:	6878      	ldr	r0, [r7, #4]
 80140e2:	f7ff febd 	bl	8013e60 <dir_alloc>
 80140e6:	4603      	mov	r3, r0
 80140e8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80140ea:	7bfb      	ldrb	r3, [r7, #15]
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d11c      	bne.n	801412a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	69db      	ldr	r3, [r3, #28]
 80140f4:	4619      	mov	r1, r3
 80140f6:	68b8      	ldr	r0, [r7, #8]
 80140f8:	f7ff f9f2 	bl	80134e0 <move_window>
 80140fc:	4603      	mov	r3, r0
 80140fe:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8014100:	7bfb      	ldrb	r3, [r7, #15]
 8014102:	2b00      	cmp	r3, #0
 8014104:	d111      	bne.n	801412a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	6a1b      	ldr	r3, [r3, #32]
 801410a:	2220      	movs	r2, #32
 801410c:	2100      	movs	r1, #0
 801410e:	4618      	mov	r0, r3
 8014110:	f7fe ffa7 	bl	8013062 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	6a18      	ldr	r0, [r3, #32]
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	3324      	adds	r3, #36	; 0x24
 801411c:	220b      	movs	r2, #11
 801411e:	4619      	mov	r1, r3
 8014120:	f7fe ff7e 	bl	8013020 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8014124:	68bb      	ldr	r3, [r7, #8]
 8014126:	2201      	movs	r2, #1
 8014128:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801412a:	7bfb      	ldrb	r3, [r7, #15]
}
 801412c:	4618      	mov	r0, r3
 801412e:	3710      	adds	r7, #16
 8014130:	46bd      	mov	sp, r7
 8014132:	bd80      	pop	{r7, pc}

08014134 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8014134:	b580      	push	{r7, lr}
 8014136:	b086      	sub	sp, #24
 8014138:	af00      	add	r7, sp, #0
 801413a:	6078      	str	r0, [r7, #4]
 801413c:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 801413e:	683b      	ldr	r3, [r7, #0]
 8014140:	2200      	movs	r2, #0
 8014142:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	69db      	ldr	r3, [r3, #28]
 8014148:	2b00      	cmp	r3, #0
 801414a:	d04e      	beq.n	80141ea <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 801414c:	2300      	movs	r3, #0
 801414e:	613b      	str	r3, [r7, #16]
 8014150:	693b      	ldr	r3, [r7, #16]
 8014152:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8014154:	e021      	b.n	801419a <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	6a1a      	ldr	r2, [r3, #32]
 801415a:	697b      	ldr	r3, [r7, #20]
 801415c:	1c59      	adds	r1, r3, #1
 801415e:	6179      	str	r1, [r7, #20]
 8014160:	4413      	add	r3, r2
 8014162:	781b      	ldrb	r3, [r3, #0]
 8014164:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8014166:	7bfb      	ldrb	r3, [r7, #15]
 8014168:	2b20      	cmp	r3, #32
 801416a:	d100      	bne.n	801416e <get_fileinfo+0x3a>
 801416c:	e015      	b.n	801419a <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 801416e:	7bfb      	ldrb	r3, [r7, #15]
 8014170:	2b05      	cmp	r3, #5
 8014172:	d101      	bne.n	8014178 <get_fileinfo+0x44>
 8014174:	23e5      	movs	r3, #229	; 0xe5
 8014176:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8014178:	697b      	ldr	r3, [r7, #20]
 801417a:	2b09      	cmp	r3, #9
 801417c:	d106      	bne.n	801418c <get_fileinfo+0x58>
 801417e:	693b      	ldr	r3, [r7, #16]
 8014180:	1c5a      	adds	r2, r3, #1
 8014182:	613a      	str	r2, [r7, #16]
 8014184:	683a      	ldr	r2, [r7, #0]
 8014186:	4413      	add	r3, r2
 8014188:	222e      	movs	r2, #46	; 0x2e
 801418a:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 801418c:	693b      	ldr	r3, [r7, #16]
 801418e:	1c5a      	adds	r2, r3, #1
 8014190:	613a      	str	r2, [r7, #16]
 8014192:	683a      	ldr	r2, [r7, #0]
 8014194:	4413      	add	r3, r2
 8014196:	7bfa      	ldrb	r2, [r7, #15]
 8014198:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 801419a:	697b      	ldr	r3, [r7, #20]
 801419c:	2b0a      	cmp	r3, #10
 801419e:	d9da      	bls.n	8014156 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 80141a0:	683a      	ldr	r2, [r7, #0]
 80141a2:	693b      	ldr	r3, [r7, #16]
 80141a4:	4413      	add	r3, r2
 80141a6:	3309      	adds	r3, #9
 80141a8:	2200      	movs	r2, #0
 80141aa:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	6a1b      	ldr	r3, [r3, #32]
 80141b0:	7ada      	ldrb	r2, [r3, #11]
 80141b2:	683b      	ldr	r3, [r7, #0]
 80141b4:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	6a1b      	ldr	r3, [r3, #32]
 80141ba:	331c      	adds	r3, #28
 80141bc:	4618      	mov	r0, r3
 80141be:	f7fe fec5 	bl	8012f4c <ld_dword>
 80141c2:	4602      	mov	r2, r0
 80141c4:	683b      	ldr	r3, [r7, #0]
 80141c6:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	6a1b      	ldr	r3, [r3, #32]
 80141cc:	3316      	adds	r3, #22
 80141ce:	4618      	mov	r0, r3
 80141d0:	f7fe febc 	bl	8012f4c <ld_dword>
 80141d4:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80141d6:	68bb      	ldr	r3, [r7, #8]
 80141d8:	b29a      	uxth	r2, r3
 80141da:	683b      	ldr	r3, [r7, #0]
 80141dc:	80da      	strh	r2, [r3, #6]
 80141de:	68bb      	ldr	r3, [r7, #8]
 80141e0:	0c1b      	lsrs	r3, r3, #16
 80141e2:	b29a      	uxth	r2, r3
 80141e4:	683b      	ldr	r3, [r7, #0]
 80141e6:	809a      	strh	r2, [r3, #4]
 80141e8:	e000      	b.n	80141ec <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80141ea:	bf00      	nop
}
 80141ec:	3718      	adds	r7, #24
 80141ee:	46bd      	mov	sp, r7
 80141f0:	bd80      	pop	{r7, pc}
	...

080141f4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80141f4:	b580      	push	{r7, lr}
 80141f6:	b088      	sub	sp, #32
 80141f8:	af00      	add	r7, sp, #0
 80141fa:	6078      	str	r0, [r7, #4]
 80141fc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80141fe:	683b      	ldr	r3, [r7, #0]
 8014200:	681b      	ldr	r3, [r3, #0]
 8014202:	60fb      	str	r3, [r7, #12]
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	3324      	adds	r3, #36	; 0x24
 8014208:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801420a:	220b      	movs	r2, #11
 801420c:	2120      	movs	r1, #32
 801420e:	68b8      	ldr	r0, [r7, #8]
 8014210:	f7fe ff27 	bl	8013062 <mem_set>
	si = i = 0; ni = 8;
 8014214:	2300      	movs	r3, #0
 8014216:	613b      	str	r3, [r7, #16]
 8014218:	693b      	ldr	r3, [r7, #16]
 801421a:	61fb      	str	r3, [r7, #28]
 801421c:	2308      	movs	r3, #8
 801421e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8014220:	69fb      	ldr	r3, [r7, #28]
 8014222:	1c5a      	adds	r2, r3, #1
 8014224:	61fa      	str	r2, [r7, #28]
 8014226:	68fa      	ldr	r2, [r7, #12]
 8014228:	4413      	add	r3, r2
 801422a:	781b      	ldrb	r3, [r3, #0]
 801422c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801422e:	7efb      	ldrb	r3, [r7, #27]
 8014230:	2b20      	cmp	r3, #32
 8014232:	d94e      	bls.n	80142d2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8014234:	7efb      	ldrb	r3, [r7, #27]
 8014236:	2b2f      	cmp	r3, #47	; 0x2f
 8014238:	d006      	beq.n	8014248 <create_name+0x54>
 801423a:	7efb      	ldrb	r3, [r7, #27]
 801423c:	2b5c      	cmp	r3, #92	; 0x5c
 801423e:	d110      	bne.n	8014262 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8014240:	e002      	b.n	8014248 <create_name+0x54>
 8014242:	69fb      	ldr	r3, [r7, #28]
 8014244:	3301      	adds	r3, #1
 8014246:	61fb      	str	r3, [r7, #28]
 8014248:	68fa      	ldr	r2, [r7, #12]
 801424a:	69fb      	ldr	r3, [r7, #28]
 801424c:	4413      	add	r3, r2
 801424e:	781b      	ldrb	r3, [r3, #0]
 8014250:	2b2f      	cmp	r3, #47	; 0x2f
 8014252:	d0f6      	beq.n	8014242 <create_name+0x4e>
 8014254:	68fa      	ldr	r2, [r7, #12]
 8014256:	69fb      	ldr	r3, [r7, #28]
 8014258:	4413      	add	r3, r2
 801425a:	781b      	ldrb	r3, [r3, #0]
 801425c:	2b5c      	cmp	r3, #92	; 0x5c
 801425e:	d0f0      	beq.n	8014242 <create_name+0x4e>
			break;
 8014260:	e038      	b.n	80142d4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8014262:	7efb      	ldrb	r3, [r7, #27]
 8014264:	2b2e      	cmp	r3, #46	; 0x2e
 8014266:	d003      	beq.n	8014270 <create_name+0x7c>
 8014268:	693a      	ldr	r2, [r7, #16]
 801426a:	697b      	ldr	r3, [r7, #20]
 801426c:	429a      	cmp	r2, r3
 801426e:	d30c      	bcc.n	801428a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8014270:	697b      	ldr	r3, [r7, #20]
 8014272:	2b0b      	cmp	r3, #11
 8014274:	d002      	beq.n	801427c <create_name+0x88>
 8014276:	7efb      	ldrb	r3, [r7, #27]
 8014278:	2b2e      	cmp	r3, #46	; 0x2e
 801427a:	d001      	beq.n	8014280 <create_name+0x8c>
 801427c:	2306      	movs	r3, #6
 801427e:	e044      	b.n	801430a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8014280:	2308      	movs	r3, #8
 8014282:	613b      	str	r3, [r7, #16]
 8014284:	230b      	movs	r3, #11
 8014286:	617b      	str	r3, [r7, #20]
			continue;
 8014288:	e022      	b.n	80142d0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 801428a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801428e:	2b00      	cmp	r3, #0
 8014290:	da04      	bge.n	801429c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8014292:	7efb      	ldrb	r3, [r7, #27]
 8014294:	3b80      	subs	r3, #128	; 0x80
 8014296:	4a1f      	ldr	r2, [pc, #124]	; (8014314 <create_name+0x120>)
 8014298:	5cd3      	ldrb	r3, [r2, r3]
 801429a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 801429c:	7efb      	ldrb	r3, [r7, #27]
 801429e:	4619      	mov	r1, r3
 80142a0:	481d      	ldr	r0, [pc, #116]	; (8014318 <create_name+0x124>)
 80142a2:	f7fe ff20 	bl	80130e6 <chk_chr>
 80142a6:	4603      	mov	r3, r0
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d001      	beq.n	80142b0 <create_name+0xbc>
 80142ac:	2306      	movs	r3, #6
 80142ae:	e02c      	b.n	801430a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80142b0:	7efb      	ldrb	r3, [r7, #27]
 80142b2:	2b60      	cmp	r3, #96	; 0x60
 80142b4:	d905      	bls.n	80142c2 <create_name+0xce>
 80142b6:	7efb      	ldrb	r3, [r7, #27]
 80142b8:	2b7a      	cmp	r3, #122	; 0x7a
 80142ba:	d802      	bhi.n	80142c2 <create_name+0xce>
 80142bc:	7efb      	ldrb	r3, [r7, #27]
 80142be:	3b20      	subs	r3, #32
 80142c0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80142c2:	693b      	ldr	r3, [r7, #16]
 80142c4:	1c5a      	adds	r2, r3, #1
 80142c6:	613a      	str	r2, [r7, #16]
 80142c8:	68ba      	ldr	r2, [r7, #8]
 80142ca:	4413      	add	r3, r2
 80142cc:	7efa      	ldrb	r2, [r7, #27]
 80142ce:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80142d0:	e7a6      	b.n	8014220 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80142d2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80142d4:	68fa      	ldr	r2, [r7, #12]
 80142d6:	69fb      	ldr	r3, [r7, #28]
 80142d8:	441a      	add	r2, r3
 80142da:	683b      	ldr	r3, [r7, #0]
 80142dc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80142de:	693b      	ldr	r3, [r7, #16]
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d101      	bne.n	80142e8 <create_name+0xf4>
 80142e4:	2306      	movs	r3, #6
 80142e6:	e010      	b.n	801430a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80142e8:	68bb      	ldr	r3, [r7, #8]
 80142ea:	781b      	ldrb	r3, [r3, #0]
 80142ec:	2be5      	cmp	r3, #229	; 0xe5
 80142ee:	d102      	bne.n	80142f6 <create_name+0x102>
 80142f0:	68bb      	ldr	r3, [r7, #8]
 80142f2:	2205      	movs	r2, #5
 80142f4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80142f6:	7efb      	ldrb	r3, [r7, #27]
 80142f8:	2b20      	cmp	r3, #32
 80142fa:	d801      	bhi.n	8014300 <create_name+0x10c>
 80142fc:	2204      	movs	r2, #4
 80142fe:	e000      	b.n	8014302 <create_name+0x10e>
 8014300:	2200      	movs	r2, #0
 8014302:	68bb      	ldr	r3, [r7, #8]
 8014304:	330b      	adds	r3, #11
 8014306:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8014308:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801430a:	4618      	mov	r0, r3
 801430c:	3720      	adds	r7, #32
 801430e:	46bd      	mov	sp, r7
 8014310:	bd80      	pop	{r7, pc}
 8014312:	bf00      	nop
 8014314:	08022a74 	.word	0x08022a74
 8014318:	08022870 	.word	0x08022870

0801431c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801431c:	b580      	push	{r7, lr}
 801431e:	b086      	sub	sp, #24
 8014320:	af00      	add	r7, sp, #0
 8014322:	6078      	str	r0, [r7, #4]
 8014324:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801432a:	693b      	ldr	r3, [r7, #16]
 801432c:	681b      	ldr	r3, [r3, #0]
 801432e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8014330:	e002      	b.n	8014338 <follow_path+0x1c>
 8014332:	683b      	ldr	r3, [r7, #0]
 8014334:	3301      	adds	r3, #1
 8014336:	603b      	str	r3, [r7, #0]
 8014338:	683b      	ldr	r3, [r7, #0]
 801433a:	781b      	ldrb	r3, [r3, #0]
 801433c:	2b2f      	cmp	r3, #47	; 0x2f
 801433e:	d0f8      	beq.n	8014332 <follow_path+0x16>
 8014340:	683b      	ldr	r3, [r7, #0]
 8014342:	781b      	ldrb	r3, [r3, #0]
 8014344:	2b5c      	cmp	r3, #92	; 0x5c
 8014346:	d0f4      	beq.n	8014332 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8014348:	693b      	ldr	r3, [r7, #16]
 801434a:	2200      	movs	r2, #0
 801434c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801434e:	683b      	ldr	r3, [r7, #0]
 8014350:	781b      	ldrb	r3, [r3, #0]
 8014352:	2b1f      	cmp	r3, #31
 8014354:	d80a      	bhi.n	801436c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	2280      	movs	r2, #128	; 0x80
 801435a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801435e:	2100      	movs	r1, #0
 8014360:	6878      	ldr	r0, [r7, #4]
 8014362:	f7ff fc3d 	bl	8013be0 <dir_sdi>
 8014366:	4603      	mov	r3, r0
 8014368:	75fb      	strb	r3, [r7, #23]
 801436a:	e043      	b.n	80143f4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801436c:	463b      	mov	r3, r7
 801436e:	4619      	mov	r1, r3
 8014370:	6878      	ldr	r0, [r7, #4]
 8014372:	f7ff ff3f 	bl	80141f4 <create_name>
 8014376:	4603      	mov	r3, r0
 8014378:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801437a:	7dfb      	ldrb	r3, [r7, #23]
 801437c:	2b00      	cmp	r3, #0
 801437e:	d134      	bne.n	80143ea <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8014380:	6878      	ldr	r0, [r7, #4]
 8014382:	f7ff fe50 	bl	8014026 <dir_find>
 8014386:	4603      	mov	r3, r0
 8014388:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8014390:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8014392:	7dfb      	ldrb	r3, [r7, #23]
 8014394:	2b00      	cmp	r3, #0
 8014396:	d00a      	beq.n	80143ae <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8014398:	7dfb      	ldrb	r3, [r7, #23]
 801439a:	2b04      	cmp	r3, #4
 801439c:	d127      	bne.n	80143ee <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801439e:	7afb      	ldrb	r3, [r7, #11]
 80143a0:	f003 0304 	and.w	r3, r3, #4
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d122      	bne.n	80143ee <follow_path+0xd2>
 80143a8:	2305      	movs	r3, #5
 80143aa:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80143ac:	e01f      	b.n	80143ee <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80143ae:	7afb      	ldrb	r3, [r7, #11]
 80143b0:	f003 0304 	and.w	r3, r3, #4
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d11c      	bne.n	80143f2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80143b8:	693b      	ldr	r3, [r7, #16]
 80143ba:	799b      	ldrb	r3, [r3, #6]
 80143bc:	f003 0310 	and.w	r3, r3, #16
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d102      	bne.n	80143ca <follow_path+0xae>
				res = FR_NO_PATH; break;
 80143c4:	2305      	movs	r3, #5
 80143c6:	75fb      	strb	r3, [r7, #23]
 80143c8:	e014      	b.n	80143f4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80143ca:	68fb      	ldr	r3, [r7, #12]
 80143cc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	695b      	ldr	r3, [r3, #20]
 80143d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80143d8:	4413      	add	r3, r2
 80143da:	4619      	mov	r1, r3
 80143dc:	68f8      	ldr	r0, [r7, #12]
 80143de:	f7ff fd86 	bl	8013eee <ld_clust>
 80143e2:	4602      	mov	r2, r0
 80143e4:	693b      	ldr	r3, [r7, #16]
 80143e6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80143e8:	e7c0      	b.n	801436c <follow_path+0x50>
			if (res != FR_OK) break;
 80143ea:	bf00      	nop
 80143ec:	e002      	b.n	80143f4 <follow_path+0xd8>
				break;
 80143ee:	bf00      	nop
 80143f0:	e000      	b.n	80143f4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80143f2:	bf00      	nop
			}
		}
	}

	return res;
 80143f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80143f6:	4618      	mov	r0, r3
 80143f8:	3718      	adds	r7, #24
 80143fa:	46bd      	mov	sp, r7
 80143fc:	bd80      	pop	{r7, pc}

080143fe <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80143fe:	b480      	push	{r7}
 8014400:	b087      	sub	sp, #28
 8014402:	af00      	add	r7, sp, #0
 8014404:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8014406:	f04f 33ff 	mov.w	r3, #4294967295
 801440a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	681b      	ldr	r3, [r3, #0]
 8014410:	2b00      	cmp	r3, #0
 8014412:	d031      	beq.n	8014478 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	681b      	ldr	r3, [r3, #0]
 8014418:	617b      	str	r3, [r7, #20]
 801441a:	e002      	b.n	8014422 <get_ldnumber+0x24>
 801441c:	697b      	ldr	r3, [r7, #20]
 801441e:	3301      	adds	r3, #1
 8014420:	617b      	str	r3, [r7, #20]
 8014422:	697b      	ldr	r3, [r7, #20]
 8014424:	781b      	ldrb	r3, [r3, #0]
 8014426:	2b20      	cmp	r3, #32
 8014428:	d903      	bls.n	8014432 <get_ldnumber+0x34>
 801442a:	697b      	ldr	r3, [r7, #20]
 801442c:	781b      	ldrb	r3, [r3, #0]
 801442e:	2b3a      	cmp	r3, #58	; 0x3a
 8014430:	d1f4      	bne.n	801441c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8014432:	697b      	ldr	r3, [r7, #20]
 8014434:	781b      	ldrb	r3, [r3, #0]
 8014436:	2b3a      	cmp	r3, #58	; 0x3a
 8014438:	d11c      	bne.n	8014474 <get_ldnumber+0x76>
			tp = *path;
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	681b      	ldr	r3, [r3, #0]
 801443e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	1c5a      	adds	r2, r3, #1
 8014444:	60fa      	str	r2, [r7, #12]
 8014446:	781b      	ldrb	r3, [r3, #0]
 8014448:	3b30      	subs	r3, #48	; 0x30
 801444a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801444c:	68bb      	ldr	r3, [r7, #8]
 801444e:	2b09      	cmp	r3, #9
 8014450:	d80e      	bhi.n	8014470 <get_ldnumber+0x72>
 8014452:	68fa      	ldr	r2, [r7, #12]
 8014454:	697b      	ldr	r3, [r7, #20]
 8014456:	429a      	cmp	r2, r3
 8014458:	d10a      	bne.n	8014470 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801445a:	68bb      	ldr	r3, [r7, #8]
 801445c:	2b00      	cmp	r3, #0
 801445e:	d107      	bne.n	8014470 <get_ldnumber+0x72>
					vol = (int)i;
 8014460:	68bb      	ldr	r3, [r7, #8]
 8014462:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8014464:	697b      	ldr	r3, [r7, #20]
 8014466:	3301      	adds	r3, #1
 8014468:	617b      	str	r3, [r7, #20]
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	697a      	ldr	r2, [r7, #20]
 801446e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8014470:	693b      	ldr	r3, [r7, #16]
 8014472:	e002      	b.n	801447a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8014474:	2300      	movs	r3, #0
 8014476:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8014478:	693b      	ldr	r3, [r7, #16]
}
 801447a:	4618      	mov	r0, r3
 801447c:	371c      	adds	r7, #28
 801447e:	46bd      	mov	sp, r7
 8014480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014484:	4770      	bx	lr
	...

08014488 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8014488:	b580      	push	{r7, lr}
 801448a:	b082      	sub	sp, #8
 801448c:	af00      	add	r7, sp, #0
 801448e:	6078      	str	r0, [r7, #4]
 8014490:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	2200      	movs	r2, #0
 8014496:	70da      	strb	r2, [r3, #3]
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	f04f 32ff 	mov.w	r2, #4294967295
 801449e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80144a0:	6839      	ldr	r1, [r7, #0]
 80144a2:	6878      	ldr	r0, [r7, #4]
 80144a4:	f7ff f81c 	bl	80134e0 <move_window>
 80144a8:	4603      	mov	r3, r0
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d001      	beq.n	80144b2 <check_fs+0x2a>
 80144ae:	2304      	movs	r3, #4
 80144b0:	e038      	b.n	8014524 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	3334      	adds	r3, #52	; 0x34
 80144b6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80144ba:	4618      	mov	r0, r3
 80144bc:	f7fe fd2e 	bl	8012f1c <ld_word>
 80144c0:	4603      	mov	r3, r0
 80144c2:	461a      	mov	r2, r3
 80144c4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80144c8:	429a      	cmp	r2, r3
 80144ca:	d001      	beq.n	80144d0 <check_fs+0x48>
 80144cc:	2303      	movs	r3, #3
 80144ce:	e029      	b.n	8014524 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80144d6:	2be9      	cmp	r3, #233	; 0xe9
 80144d8:	d009      	beq.n	80144ee <check_fs+0x66>
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80144e0:	2beb      	cmp	r3, #235	; 0xeb
 80144e2:	d11e      	bne.n	8014522 <check_fs+0x9a>
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80144ea:	2b90      	cmp	r3, #144	; 0x90
 80144ec:	d119      	bne.n	8014522 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	3334      	adds	r3, #52	; 0x34
 80144f2:	3336      	adds	r3, #54	; 0x36
 80144f4:	4618      	mov	r0, r3
 80144f6:	f7fe fd29 	bl	8012f4c <ld_dword>
 80144fa:	4603      	mov	r3, r0
 80144fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8014500:	4a0a      	ldr	r2, [pc, #40]	; (801452c <check_fs+0xa4>)
 8014502:	4293      	cmp	r3, r2
 8014504:	d101      	bne.n	801450a <check_fs+0x82>
 8014506:	2300      	movs	r3, #0
 8014508:	e00c      	b.n	8014524 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	3334      	adds	r3, #52	; 0x34
 801450e:	3352      	adds	r3, #82	; 0x52
 8014510:	4618      	mov	r0, r3
 8014512:	f7fe fd1b 	bl	8012f4c <ld_dword>
 8014516:	4603      	mov	r3, r0
 8014518:	4a05      	ldr	r2, [pc, #20]	; (8014530 <check_fs+0xa8>)
 801451a:	4293      	cmp	r3, r2
 801451c:	d101      	bne.n	8014522 <check_fs+0x9a>
 801451e:	2300      	movs	r3, #0
 8014520:	e000      	b.n	8014524 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8014522:	2302      	movs	r3, #2
}
 8014524:	4618      	mov	r0, r3
 8014526:	3708      	adds	r7, #8
 8014528:	46bd      	mov	sp, r7
 801452a:	bd80      	pop	{r7, pc}
 801452c:	00544146 	.word	0x00544146
 8014530:	33544146 	.word	0x33544146

08014534 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8014534:	b580      	push	{r7, lr}
 8014536:	b096      	sub	sp, #88	; 0x58
 8014538:	af00      	add	r7, sp, #0
 801453a:	60f8      	str	r0, [r7, #12]
 801453c:	60b9      	str	r1, [r7, #8]
 801453e:	4613      	mov	r3, r2
 8014540:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8014542:	68bb      	ldr	r3, [r7, #8]
 8014544:	2200      	movs	r2, #0
 8014546:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8014548:	68f8      	ldr	r0, [r7, #12]
 801454a:	f7ff ff58 	bl	80143fe <get_ldnumber>
 801454e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8014550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014552:	2b00      	cmp	r3, #0
 8014554:	da01      	bge.n	801455a <find_volume+0x26>
 8014556:	230b      	movs	r3, #11
 8014558:	e236      	b.n	80149c8 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801455a:	4aac      	ldr	r2, [pc, #688]	; (801480c <find_volume+0x2d8>)
 801455c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801455e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014562:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8014564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014566:	2b00      	cmp	r3, #0
 8014568:	d101      	bne.n	801456e <find_volume+0x3a>
 801456a:	230c      	movs	r3, #12
 801456c:	e22c      	b.n	80149c8 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 801456e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014570:	f7fe fdd4 	bl	801311c <lock_fs>
 8014574:	4603      	mov	r3, r0
 8014576:	2b00      	cmp	r3, #0
 8014578:	d101      	bne.n	801457e <find_volume+0x4a>
 801457a:	230f      	movs	r3, #15
 801457c:	e224      	b.n	80149c8 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 801457e:	68bb      	ldr	r3, [r7, #8]
 8014580:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014582:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8014584:	79fb      	ldrb	r3, [r7, #7]
 8014586:	f023 0301 	bic.w	r3, r3, #1
 801458a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801458c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801458e:	781b      	ldrb	r3, [r3, #0]
 8014590:	2b00      	cmp	r3, #0
 8014592:	d01a      	beq.n	80145ca <find_volume+0x96>
		stat = disk_status(fs->drv);
 8014594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014596:	785b      	ldrb	r3, [r3, #1]
 8014598:	4618      	mov	r0, r3
 801459a:	f7fe fc21 	bl	8012de0 <disk_status>
 801459e:	4603      	mov	r3, r0
 80145a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80145a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80145a8:	f003 0301 	and.w	r3, r3, #1
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d10c      	bne.n	80145ca <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80145b0:	79fb      	ldrb	r3, [r7, #7]
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d007      	beq.n	80145c6 <find_volume+0x92>
 80145b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80145ba:	f003 0304 	and.w	r3, r3, #4
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d001      	beq.n	80145c6 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 80145c2:	230a      	movs	r3, #10
 80145c4:	e200      	b.n	80149c8 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 80145c6:	2300      	movs	r3, #0
 80145c8:	e1fe      	b.n	80149c8 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80145ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145cc:	2200      	movs	r2, #0
 80145ce:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80145d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80145d2:	b2da      	uxtb	r2, r3
 80145d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145d6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80145d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145da:	785b      	ldrb	r3, [r3, #1]
 80145dc:	4618      	mov	r0, r3
 80145de:	f7fe fc19 	bl	8012e14 <disk_initialize>
 80145e2:	4603      	mov	r3, r0
 80145e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80145e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80145ec:	f003 0301 	and.w	r3, r3, #1
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d001      	beq.n	80145f8 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80145f4:	2303      	movs	r3, #3
 80145f6:	e1e7      	b.n	80149c8 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80145f8:	79fb      	ldrb	r3, [r7, #7]
 80145fa:	2b00      	cmp	r3, #0
 80145fc:	d007      	beq.n	801460e <find_volume+0xda>
 80145fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014602:	f003 0304 	and.w	r3, r3, #4
 8014606:	2b00      	cmp	r3, #0
 8014608:	d001      	beq.n	801460e <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 801460a:	230a      	movs	r3, #10
 801460c:	e1dc      	b.n	80149c8 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801460e:	2300      	movs	r3, #0
 8014610:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8014612:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014614:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014616:	f7ff ff37 	bl	8014488 <check_fs>
 801461a:	4603      	mov	r3, r0
 801461c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8014620:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014624:	2b02      	cmp	r3, #2
 8014626:	d14b      	bne.n	80146c0 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8014628:	2300      	movs	r3, #0
 801462a:	643b      	str	r3, [r7, #64]	; 0x40
 801462c:	e01f      	b.n	801466e <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801462e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014630:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8014634:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014636:	011b      	lsls	r3, r3, #4
 8014638:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801463c:	4413      	add	r3, r2
 801463e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8014640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014642:	3304      	adds	r3, #4
 8014644:	781b      	ldrb	r3, [r3, #0]
 8014646:	2b00      	cmp	r3, #0
 8014648:	d006      	beq.n	8014658 <find_volume+0x124>
 801464a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801464c:	3308      	adds	r3, #8
 801464e:	4618      	mov	r0, r3
 8014650:	f7fe fc7c 	bl	8012f4c <ld_dword>
 8014654:	4602      	mov	r2, r0
 8014656:	e000      	b.n	801465a <find_volume+0x126>
 8014658:	2200      	movs	r2, #0
 801465a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801465c:	009b      	lsls	r3, r3, #2
 801465e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8014662:	440b      	add	r3, r1
 8014664:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8014668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801466a:	3301      	adds	r3, #1
 801466c:	643b      	str	r3, [r7, #64]	; 0x40
 801466e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014670:	2b03      	cmp	r3, #3
 8014672:	d9dc      	bls.n	801462e <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8014674:	2300      	movs	r3, #0
 8014676:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8014678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801467a:	2b00      	cmp	r3, #0
 801467c:	d002      	beq.n	8014684 <find_volume+0x150>
 801467e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014680:	3b01      	subs	r3, #1
 8014682:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8014684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014686:	009b      	lsls	r3, r3, #2
 8014688:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801468c:	4413      	add	r3, r2
 801468e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8014692:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8014694:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014696:	2b00      	cmp	r3, #0
 8014698:	d005      	beq.n	80146a6 <find_volume+0x172>
 801469a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801469c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801469e:	f7ff fef3 	bl	8014488 <check_fs>
 80146a2:	4603      	mov	r3, r0
 80146a4:	e000      	b.n	80146a8 <find_volume+0x174>
 80146a6:	2303      	movs	r3, #3
 80146a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80146ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80146b0:	2b01      	cmp	r3, #1
 80146b2:	d905      	bls.n	80146c0 <find_volume+0x18c>
 80146b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80146b6:	3301      	adds	r3, #1
 80146b8:	643b      	str	r3, [r7, #64]	; 0x40
 80146ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80146bc:	2b03      	cmp	r3, #3
 80146be:	d9e1      	bls.n	8014684 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80146c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80146c4:	2b04      	cmp	r3, #4
 80146c6:	d101      	bne.n	80146cc <find_volume+0x198>
 80146c8:	2301      	movs	r3, #1
 80146ca:	e17d      	b.n	80149c8 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80146cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80146d0:	2b01      	cmp	r3, #1
 80146d2:	d901      	bls.n	80146d8 <find_volume+0x1a4>
 80146d4:	230d      	movs	r3, #13
 80146d6:	e177      	b.n	80149c8 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80146d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146da:	3334      	adds	r3, #52	; 0x34
 80146dc:	330b      	adds	r3, #11
 80146de:	4618      	mov	r0, r3
 80146e0:	f7fe fc1c 	bl	8012f1c <ld_word>
 80146e4:	4603      	mov	r3, r0
 80146e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80146ea:	d001      	beq.n	80146f0 <find_volume+0x1bc>
 80146ec:	230d      	movs	r3, #13
 80146ee:	e16b      	b.n	80149c8 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80146f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146f2:	3334      	adds	r3, #52	; 0x34
 80146f4:	3316      	adds	r3, #22
 80146f6:	4618      	mov	r0, r3
 80146f8:	f7fe fc10 	bl	8012f1c <ld_word>
 80146fc:	4603      	mov	r3, r0
 80146fe:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8014700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014702:	2b00      	cmp	r3, #0
 8014704:	d106      	bne.n	8014714 <find_volume+0x1e0>
 8014706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014708:	3334      	adds	r3, #52	; 0x34
 801470a:	3324      	adds	r3, #36	; 0x24
 801470c:	4618      	mov	r0, r3
 801470e:	f7fe fc1d 	bl	8012f4c <ld_dword>
 8014712:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8014714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014716:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014718:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801471a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801471c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8014720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014722:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8014724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014726:	789b      	ldrb	r3, [r3, #2]
 8014728:	2b01      	cmp	r3, #1
 801472a:	d005      	beq.n	8014738 <find_volume+0x204>
 801472c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801472e:	789b      	ldrb	r3, [r3, #2]
 8014730:	2b02      	cmp	r3, #2
 8014732:	d001      	beq.n	8014738 <find_volume+0x204>
 8014734:	230d      	movs	r3, #13
 8014736:	e147      	b.n	80149c8 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8014738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801473a:	789b      	ldrb	r3, [r3, #2]
 801473c:	461a      	mov	r2, r3
 801473e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014740:	fb02 f303 	mul.w	r3, r2, r3
 8014744:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8014746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014748:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801474c:	b29a      	uxth	r2, r3
 801474e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014750:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8014752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014754:	895b      	ldrh	r3, [r3, #10]
 8014756:	2b00      	cmp	r3, #0
 8014758:	d008      	beq.n	801476c <find_volume+0x238>
 801475a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801475c:	895b      	ldrh	r3, [r3, #10]
 801475e:	461a      	mov	r2, r3
 8014760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014762:	895b      	ldrh	r3, [r3, #10]
 8014764:	3b01      	subs	r3, #1
 8014766:	4013      	ands	r3, r2
 8014768:	2b00      	cmp	r3, #0
 801476a:	d001      	beq.n	8014770 <find_volume+0x23c>
 801476c:	230d      	movs	r3, #13
 801476e:	e12b      	b.n	80149c8 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8014770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014772:	3334      	adds	r3, #52	; 0x34
 8014774:	3311      	adds	r3, #17
 8014776:	4618      	mov	r0, r3
 8014778:	f7fe fbd0 	bl	8012f1c <ld_word>
 801477c:	4603      	mov	r3, r0
 801477e:	461a      	mov	r2, r3
 8014780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014782:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8014784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014786:	891b      	ldrh	r3, [r3, #8]
 8014788:	f003 030f 	and.w	r3, r3, #15
 801478c:	b29b      	uxth	r3, r3
 801478e:	2b00      	cmp	r3, #0
 8014790:	d001      	beq.n	8014796 <find_volume+0x262>
 8014792:	230d      	movs	r3, #13
 8014794:	e118      	b.n	80149c8 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8014796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014798:	3334      	adds	r3, #52	; 0x34
 801479a:	3313      	adds	r3, #19
 801479c:	4618      	mov	r0, r3
 801479e:	f7fe fbbd 	bl	8012f1c <ld_word>
 80147a2:	4603      	mov	r3, r0
 80147a4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80147a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d106      	bne.n	80147ba <find_volume+0x286>
 80147ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147ae:	3334      	adds	r3, #52	; 0x34
 80147b0:	3320      	adds	r3, #32
 80147b2:	4618      	mov	r0, r3
 80147b4:	f7fe fbca 	bl	8012f4c <ld_dword>
 80147b8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80147ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147bc:	3334      	adds	r3, #52	; 0x34
 80147be:	330e      	adds	r3, #14
 80147c0:	4618      	mov	r0, r3
 80147c2:	f7fe fbab 	bl	8012f1c <ld_word>
 80147c6:	4603      	mov	r3, r0
 80147c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80147ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d101      	bne.n	80147d4 <find_volume+0x2a0>
 80147d0:	230d      	movs	r3, #13
 80147d2:	e0f9      	b.n	80149c8 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80147d4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80147d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80147d8:	4413      	add	r3, r2
 80147da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80147dc:	8912      	ldrh	r2, [r2, #8]
 80147de:	0912      	lsrs	r2, r2, #4
 80147e0:	b292      	uxth	r2, r2
 80147e2:	4413      	add	r3, r2
 80147e4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80147e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80147e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147ea:	429a      	cmp	r2, r3
 80147ec:	d201      	bcs.n	80147f2 <find_volume+0x2be>
 80147ee:	230d      	movs	r3, #13
 80147f0:	e0ea      	b.n	80149c8 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80147f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80147f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147f6:	1ad3      	subs	r3, r2, r3
 80147f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80147fa:	8952      	ldrh	r2, [r2, #10]
 80147fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8014800:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8014802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014804:	2b00      	cmp	r3, #0
 8014806:	d103      	bne.n	8014810 <find_volume+0x2dc>
 8014808:	230d      	movs	r3, #13
 801480a:	e0dd      	b.n	80149c8 <find_volume+0x494>
 801480c:	20000848 	.word	0x20000848
		fmt = FS_FAT32;
 8014810:	2303      	movs	r3, #3
 8014812:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8014816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014818:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801481c:	4293      	cmp	r3, r2
 801481e:	d802      	bhi.n	8014826 <find_volume+0x2f2>
 8014820:	2302      	movs	r3, #2
 8014822:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8014826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014828:	f640 72f5 	movw	r2, #4085	; 0xff5
 801482c:	4293      	cmp	r3, r2
 801482e:	d802      	bhi.n	8014836 <find_volume+0x302>
 8014830:	2301      	movs	r3, #1
 8014832:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8014836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014838:	1c9a      	adds	r2, r3, #2
 801483a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801483c:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 801483e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014840:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014842:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8014844:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014846:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014848:	441a      	add	r2, r3
 801484a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801484c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 801484e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014852:	441a      	add	r2, r3
 8014854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014856:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8014858:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801485c:	2b03      	cmp	r3, #3
 801485e:	d11e      	bne.n	801489e <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8014860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014862:	3334      	adds	r3, #52	; 0x34
 8014864:	332a      	adds	r3, #42	; 0x2a
 8014866:	4618      	mov	r0, r3
 8014868:	f7fe fb58 	bl	8012f1c <ld_word>
 801486c:	4603      	mov	r3, r0
 801486e:	2b00      	cmp	r3, #0
 8014870:	d001      	beq.n	8014876 <find_volume+0x342>
 8014872:	230d      	movs	r3, #13
 8014874:	e0a8      	b.n	80149c8 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8014876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014878:	891b      	ldrh	r3, [r3, #8]
 801487a:	2b00      	cmp	r3, #0
 801487c:	d001      	beq.n	8014882 <find_volume+0x34e>
 801487e:	230d      	movs	r3, #13
 8014880:	e0a2      	b.n	80149c8 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8014882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014884:	3334      	adds	r3, #52	; 0x34
 8014886:	332c      	adds	r3, #44	; 0x2c
 8014888:	4618      	mov	r0, r3
 801488a:	f7fe fb5f 	bl	8012f4c <ld_dword>
 801488e:	4602      	mov	r2, r0
 8014890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014892:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8014894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014896:	699b      	ldr	r3, [r3, #24]
 8014898:	009b      	lsls	r3, r3, #2
 801489a:	647b      	str	r3, [r7, #68]	; 0x44
 801489c:	e01f      	b.n	80148de <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801489e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148a0:	891b      	ldrh	r3, [r3, #8]
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	d101      	bne.n	80148aa <find_volume+0x376>
 80148a6:	230d      	movs	r3, #13
 80148a8:	e08e      	b.n	80149c8 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80148aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80148ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80148b0:	441a      	add	r2, r3
 80148b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148b4:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80148b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80148ba:	2b02      	cmp	r3, #2
 80148bc:	d103      	bne.n	80148c6 <find_volume+0x392>
 80148be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148c0:	699b      	ldr	r3, [r3, #24]
 80148c2:	005b      	lsls	r3, r3, #1
 80148c4:	e00a      	b.n	80148dc <find_volume+0x3a8>
 80148c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148c8:	699a      	ldr	r2, [r3, #24]
 80148ca:	4613      	mov	r3, r2
 80148cc:	005b      	lsls	r3, r3, #1
 80148ce:	4413      	add	r3, r2
 80148d0:	085a      	lsrs	r2, r3, #1
 80148d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148d4:	699b      	ldr	r3, [r3, #24]
 80148d6:	f003 0301 	and.w	r3, r3, #1
 80148da:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80148dc:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80148de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148e0:	69da      	ldr	r2, [r3, #28]
 80148e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80148e4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80148e8:	0a5b      	lsrs	r3, r3, #9
 80148ea:	429a      	cmp	r2, r3
 80148ec:	d201      	bcs.n	80148f2 <find_volume+0x3be>
 80148ee:	230d      	movs	r3, #13
 80148f0:	e06a      	b.n	80149c8 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80148f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148f4:	f04f 32ff 	mov.w	r2, #4294967295
 80148f8:	615a      	str	r2, [r3, #20]
 80148fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148fc:	695a      	ldr	r2, [r3, #20]
 80148fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014900:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8014902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014904:	2280      	movs	r2, #128	; 0x80
 8014906:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8014908:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801490c:	2b03      	cmp	r3, #3
 801490e:	d149      	bne.n	80149a4 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8014910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014912:	3334      	adds	r3, #52	; 0x34
 8014914:	3330      	adds	r3, #48	; 0x30
 8014916:	4618      	mov	r0, r3
 8014918:	f7fe fb00 	bl	8012f1c <ld_word>
 801491c:	4603      	mov	r3, r0
 801491e:	2b01      	cmp	r3, #1
 8014920:	d140      	bne.n	80149a4 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 8014922:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014924:	3301      	adds	r3, #1
 8014926:	4619      	mov	r1, r3
 8014928:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801492a:	f7fe fdd9 	bl	80134e0 <move_window>
 801492e:	4603      	mov	r3, r0
 8014930:	2b00      	cmp	r3, #0
 8014932:	d137      	bne.n	80149a4 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 8014934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014936:	2200      	movs	r2, #0
 8014938:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801493a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801493c:	3334      	adds	r3, #52	; 0x34
 801493e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014942:	4618      	mov	r0, r3
 8014944:	f7fe faea 	bl	8012f1c <ld_word>
 8014948:	4603      	mov	r3, r0
 801494a:	461a      	mov	r2, r3
 801494c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8014950:	429a      	cmp	r2, r3
 8014952:	d127      	bne.n	80149a4 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8014954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014956:	3334      	adds	r3, #52	; 0x34
 8014958:	4618      	mov	r0, r3
 801495a:	f7fe faf7 	bl	8012f4c <ld_dword>
 801495e:	4603      	mov	r3, r0
 8014960:	4a1b      	ldr	r2, [pc, #108]	; (80149d0 <find_volume+0x49c>)
 8014962:	4293      	cmp	r3, r2
 8014964:	d11e      	bne.n	80149a4 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8014966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014968:	3334      	adds	r3, #52	; 0x34
 801496a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801496e:	4618      	mov	r0, r3
 8014970:	f7fe faec 	bl	8012f4c <ld_dword>
 8014974:	4603      	mov	r3, r0
 8014976:	4a17      	ldr	r2, [pc, #92]	; (80149d4 <find_volume+0x4a0>)
 8014978:	4293      	cmp	r3, r2
 801497a:	d113      	bne.n	80149a4 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801497c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801497e:	3334      	adds	r3, #52	; 0x34
 8014980:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8014984:	4618      	mov	r0, r3
 8014986:	f7fe fae1 	bl	8012f4c <ld_dword>
 801498a:	4602      	mov	r2, r0
 801498c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801498e:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8014990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014992:	3334      	adds	r3, #52	; 0x34
 8014994:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8014998:	4618      	mov	r0, r3
 801499a:	f7fe fad7 	bl	8012f4c <ld_dword>
 801499e:	4602      	mov	r2, r0
 80149a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149a2:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80149a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149a6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80149aa:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80149ac:	4b0a      	ldr	r3, [pc, #40]	; (80149d8 <find_volume+0x4a4>)
 80149ae:	881b      	ldrh	r3, [r3, #0]
 80149b0:	3301      	adds	r3, #1
 80149b2:	b29a      	uxth	r2, r3
 80149b4:	4b08      	ldr	r3, [pc, #32]	; (80149d8 <find_volume+0x4a4>)
 80149b6:	801a      	strh	r2, [r3, #0]
 80149b8:	4b07      	ldr	r3, [pc, #28]	; (80149d8 <find_volume+0x4a4>)
 80149ba:	881a      	ldrh	r2, [r3, #0]
 80149bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149be:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80149c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80149c2:	f7fe fd25 	bl	8013410 <clear_lock>
#endif
	return FR_OK;
 80149c6:	2300      	movs	r3, #0
}
 80149c8:	4618      	mov	r0, r3
 80149ca:	3758      	adds	r7, #88	; 0x58
 80149cc:	46bd      	mov	sp, r7
 80149ce:	bd80      	pop	{r7, pc}
 80149d0:	41615252 	.word	0x41615252
 80149d4:	61417272 	.word	0x61417272
 80149d8:	2000084c 	.word	0x2000084c

080149dc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80149dc:	b580      	push	{r7, lr}
 80149de:	b084      	sub	sp, #16
 80149e0:	af00      	add	r7, sp, #0
 80149e2:	6078      	str	r0, [r7, #4]
 80149e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80149e6:	2309      	movs	r3, #9
 80149e8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d02e      	beq.n	8014a4e <validate+0x72>
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	681b      	ldr	r3, [r3, #0]
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d02a      	beq.n	8014a4e <validate+0x72>
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	681b      	ldr	r3, [r3, #0]
 80149fc:	781b      	ldrb	r3, [r3, #0]
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d025      	beq.n	8014a4e <validate+0x72>
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	889a      	ldrh	r2, [r3, #4]
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	681b      	ldr	r3, [r3, #0]
 8014a0a:	88db      	ldrh	r3, [r3, #6]
 8014a0c:	429a      	cmp	r2, r3
 8014a0e:	d11e      	bne.n	8014a4e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	4618      	mov	r0, r3
 8014a16:	f7fe fb81 	bl	801311c <lock_fs>
 8014a1a:	4603      	mov	r3, r0
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d014      	beq.n	8014a4a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	785b      	ldrb	r3, [r3, #1]
 8014a26:	4618      	mov	r0, r3
 8014a28:	f7fe f9da 	bl	8012de0 <disk_status>
 8014a2c:	4603      	mov	r3, r0
 8014a2e:	f003 0301 	and.w	r3, r3, #1
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d102      	bne.n	8014a3c <validate+0x60>
				res = FR_OK;
 8014a36:	2300      	movs	r3, #0
 8014a38:	73fb      	strb	r3, [r7, #15]
 8014a3a:	e008      	b.n	8014a4e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	681b      	ldr	r3, [r3, #0]
 8014a40:	2100      	movs	r1, #0
 8014a42:	4618      	mov	r0, r3
 8014a44:	f7fe fb80 	bl	8013148 <unlock_fs>
 8014a48:	e001      	b.n	8014a4e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8014a4a:	230f      	movs	r3, #15
 8014a4c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8014a4e:	7bfb      	ldrb	r3, [r7, #15]
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d102      	bne.n	8014a5a <validate+0x7e>
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	e000      	b.n	8014a5c <validate+0x80>
 8014a5a:	2300      	movs	r3, #0
 8014a5c:	683a      	ldr	r2, [r7, #0]
 8014a5e:	6013      	str	r3, [r2, #0]
	return res;
 8014a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a62:	4618      	mov	r0, r3
 8014a64:	3710      	adds	r7, #16
 8014a66:	46bd      	mov	sp, r7
 8014a68:	bd80      	pop	{r7, pc}
	...

08014a6c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8014a6c:	b580      	push	{r7, lr}
 8014a6e:	b088      	sub	sp, #32
 8014a70:	af00      	add	r7, sp, #0
 8014a72:	60f8      	str	r0, [r7, #12]
 8014a74:	60b9      	str	r1, [r7, #8]
 8014a76:	4613      	mov	r3, r2
 8014a78:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8014a7a:	68bb      	ldr	r3, [r7, #8]
 8014a7c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8014a7e:	f107 0310 	add.w	r3, r7, #16
 8014a82:	4618      	mov	r0, r3
 8014a84:	f7ff fcbb 	bl	80143fe <get_ldnumber>
 8014a88:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8014a8a:	69fb      	ldr	r3, [r7, #28]
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	da01      	bge.n	8014a94 <f_mount+0x28>
 8014a90:	230b      	movs	r3, #11
 8014a92:	e048      	b.n	8014b26 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8014a94:	4a26      	ldr	r2, [pc, #152]	; (8014b30 <f_mount+0xc4>)
 8014a96:	69fb      	ldr	r3, [r7, #28]
 8014a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014a9c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8014a9e:	69bb      	ldr	r3, [r7, #24]
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d00f      	beq.n	8014ac4 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8014aa4:	69b8      	ldr	r0, [r7, #24]
 8014aa6:	f7fe fcb3 	bl	8013410 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8014aaa:	69bb      	ldr	r3, [r7, #24]
 8014aac:	68db      	ldr	r3, [r3, #12]
 8014aae:	4618      	mov	r0, r3
 8014ab0:	f001 f812 	bl	8015ad8 <ff_del_syncobj>
 8014ab4:	4603      	mov	r3, r0
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	d101      	bne.n	8014abe <f_mount+0x52>
 8014aba:	2302      	movs	r3, #2
 8014abc:	e033      	b.n	8014b26 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8014abe:	69bb      	ldr	r3, [r7, #24]
 8014ac0:	2200      	movs	r2, #0
 8014ac2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8014ac4:	68fb      	ldr	r3, [r7, #12]
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d00f      	beq.n	8014aea <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8014aca:	68fb      	ldr	r3, [r7, #12]
 8014acc:	2200      	movs	r2, #0
 8014ace:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8014ad0:	69fb      	ldr	r3, [r7, #28]
 8014ad2:	b2da      	uxtb	r2, r3
 8014ad4:	68fb      	ldr	r3, [r7, #12]
 8014ad6:	330c      	adds	r3, #12
 8014ad8:	4619      	mov	r1, r3
 8014ada:	4610      	mov	r0, r2
 8014adc:	f000 ffe1 	bl	8015aa2 <ff_cre_syncobj>
 8014ae0:	4603      	mov	r3, r0
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	d101      	bne.n	8014aea <f_mount+0x7e>
 8014ae6:	2302      	movs	r3, #2
 8014ae8:	e01d      	b.n	8014b26 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8014aea:	68fa      	ldr	r2, [r7, #12]
 8014aec:	4910      	ldr	r1, [pc, #64]	; (8014b30 <f_mount+0xc4>)
 8014aee:	69fb      	ldr	r3, [r7, #28]
 8014af0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8014af4:	68fb      	ldr	r3, [r7, #12]
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	d002      	beq.n	8014b00 <f_mount+0x94>
 8014afa:	79fb      	ldrb	r3, [r7, #7]
 8014afc:	2b01      	cmp	r3, #1
 8014afe:	d001      	beq.n	8014b04 <f_mount+0x98>
 8014b00:	2300      	movs	r3, #0
 8014b02:	e010      	b.n	8014b26 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8014b04:	f107 010c 	add.w	r1, r7, #12
 8014b08:	f107 0308 	add.w	r3, r7, #8
 8014b0c:	2200      	movs	r2, #0
 8014b0e:	4618      	mov	r0, r3
 8014b10:	f7ff fd10 	bl	8014534 <find_volume>
 8014b14:	4603      	mov	r3, r0
 8014b16:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8014b18:	68fb      	ldr	r3, [r7, #12]
 8014b1a:	7dfa      	ldrb	r2, [r7, #23]
 8014b1c:	4611      	mov	r1, r2
 8014b1e:	4618      	mov	r0, r3
 8014b20:	f7fe fb12 	bl	8013148 <unlock_fs>
 8014b24:	7dfb      	ldrb	r3, [r7, #23]
}
 8014b26:	4618      	mov	r0, r3
 8014b28:	3720      	adds	r7, #32
 8014b2a:	46bd      	mov	sp, r7
 8014b2c:	bd80      	pop	{r7, pc}
 8014b2e:	bf00      	nop
 8014b30:	20000848 	.word	0x20000848

08014b34 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8014b34:	b580      	push	{r7, lr}
 8014b36:	b098      	sub	sp, #96	; 0x60
 8014b38:	af00      	add	r7, sp, #0
 8014b3a:	60f8      	str	r0, [r7, #12]
 8014b3c:	60b9      	str	r1, [r7, #8]
 8014b3e:	4613      	mov	r3, r2
 8014b40:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8014b42:	68fb      	ldr	r3, [r7, #12]
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d101      	bne.n	8014b4c <f_open+0x18>
 8014b48:	2309      	movs	r3, #9
 8014b4a:	e1b4      	b.n	8014eb6 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8014b4c:	79fb      	ldrb	r3, [r7, #7]
 8014b4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014b52:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8014b54:	79fa      	ldrb	r2, [r7, #7]
 8014b56:	f107 0110 	add.w	r1, r7, #16
 8014b5a:	f107 0308 	add.w	r3, r7, #8
 8014b5e:	4618      	mov	r0, r3
 8014b60:	f7ff fce8 	bl	8014534 <find_volume>
 8014b64:	4603      	mov	r3, r0
 8014b66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8014b6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	f040 8191 	bne.w	8014e96 <f_open+0x362>
		dj.obj.fs = fs;
 8014b74:	693b      	ldr	r3, [r7, #16]
 8014b76:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8014b78:	68ba      	ldr	r2, [r7, #8]
 8014b7a:	f107 0314 	add.w	r3, r7, #20
 8014b7e:	4611      	mov	r1, r2
 8014b80:	4618      	mov	r0, r3
 8014b82:	f7ff fbcb 	bl	801431c <follow_path>
 8014b86:	4603      	mov	r3, r0
 8014b88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8014b8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	d11a      	bne.n	8014bca <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8014b94:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8014b98:	b25b      	sxtb	r3, r3
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	da03      	bge.n	8014ba6 <f_open+0x72>
				res = FR_INVALID_NAME;
 8014b9e:	2306      	movs	r3, #6
 8014ba0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014ba4:	e011      	b.n	8014bca <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014ba6:	79fb      	ldrb	r3, [r7, #7]
 8014ba8:	f023 0301 	bic.w	r3, r3, #1
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	bf14      	ite	ne
 8014bb0:	2301      	movne	r3, #1
 8014bb2:	2300      	moveq	r3, #0
 8014bb4:	b2db      	uxtb	r3, r3
 8014bb6:	461a      	mov	r2, r3
 8014bb8:	f107 0314 	add.w	r3, r7, #20
 8014bbc:	4611      	mov	r1, r2
 8014bbe:	4618      	mov	r0, r3
 8014bc0:	f7fe fade 	bl	8013180 <chk_lock>
 8014bc4:	4603      	mov	r3, r0
 8014bc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8014bca:	79fb      	ldrb	r3, [r7, #7]
 8014bcc:	f003 031c 	and.w	r3, r3, #28
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d07f      	beq.n	8014cd4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8014bd4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d017      	beq.n	8014c0c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8014bdc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014be0:	2b04      	cmp	r3, #4
 8014be2:	d10e      	bne.n	8014c02 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8014be4:	f7fe fb28 	bl	8013238 <enq_lock>
 8014be8:	4603      	mov	r3, r0
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d006      	beq.n	8014bfc <f_open+0xc8>
 8014bee:	f107 0314 	add.w	r3, r7, #20
 8014bf2:	4618      	mov	r0, r3
 8014bf4:	f7ff fa6c 	bl	80140d0 <dir_register>
 8014bf8:	4603      	mov	r3, r0
 8014bfa:	e000      	b.n	8014bfe <f_open+0xca>
 8014bfc:	2312      	movs	r3, #18
 8014bfe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8014c02:	79fb      	ldrb	r3, [r7, #7]
 8014c04:	f043 0308 	orr.w	r3, r3, #8
 8014c08:	71fb      	strb	r3, [r7, #7]
 8014c0a:	e010      	b.n	8014c2e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8014c0c:	7ebb      	ldrb	r3, [r7, #26]
 8014c0e:	f003 0311 	and.w	r3, r3, #17
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	d003      	beq.n	8014c1e <f_open+0xea>
					res = FR_DENIED;
 8014c16:	2307      	movs	r3, #7
 8014c18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014c1c:	e007      	b.n	8014c2e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8014c1e:	79fb      	ldrb	r3, [r7, #7]
 8014c20:	f003 0304 	and.w	r3, r3, #4
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	d002      	beq.n	8014c2e <f_open+0xfa>
 8014c28:	2308      	movs	r3, #8
 8014c2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8014c2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d168      	bne.n	8014d08 <f_open+0x1d4>
 8014c36:	79fb      	ldrb	r3, [r7, #7]
 8014c38:	f003 0308 	and.w	r3, r3, #8
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d063      	beq.n	8014d08 <f_open+0x1d4>
				dw = GET_FATTIME();
 8014c40:	f7fd fb8e 	bl	8012360 <get_fattime>
 8014c44:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8014c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c48:	330e      	adds	r3, #14
 8014c4a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014c4c:	4618      	mov	r0, r3
 8014c4e:	f7fe f9bb 	bl	8012fc8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8014c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c54:	3316      	adds	r3, #22
 8014c56:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014c58:	4618      	mov	r0, r3
 8014c5a:	f7fe f9b5 	bl	8012fc8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8014c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c60:	330b      	adds	r3, #11
 8014c62:	2220      	movs	r2, #32
 8014c64:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8014c66:	693b      	ldr	r3, [r7, #16]
 8014c68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014c6a:	4611      	mov	r1, r2
 8014c6c:	4618      	mov	r0, r3
 8014c6e:	f7ff f93e 	bl	8013eee <ld_clust>
 8014c72:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8014c74:	693b      	ldr	r3, [r7, #16]
 8014c76:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014c78:	2200      	movs	r2, #0
 8014c7a:	4618      	mov	r0, r3
 8014c7c:	f7ff f956 	bl	8013f2c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8014c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c82:	331c      	adds	r3, #28
 8014c84:	2100      	movs	r1, #0
 8014c86:	4618      	mov	r0, r3
 8014c88:	f7fe f99e 	bl	8012fc8 <st_dword>
					fs->wflag = 1;
 8014c8c:	693b      	ldr	r3, [r7, #16]
 8014c8e:	2201      	movs	r2, #1
 8014c90:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8014c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	d037      	beq.n	8014d08 <f_open+0x1d4>
						dw = fs->winsect;
 8014c98:	693b      	ldr	r3, [r7, #16]
 8014c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014c9c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8014c9e:	f107 0314 	add.w	r3, r7, #20
 8014ca2:	2200      	movs	r2, #0
 8014ca4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8014ca6:	4618      	mov	r0, r3
 8014ca8:	f7fe fe69 	bl	801397e <remove_chain>
 8014cac:	4603      	mov	r3, r0
 8014cae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8014cb2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d126      	bne.n	8014d08 <f_open+0x1d4>
							res = move_window(fs, dw);
 8014cba:	693b      	ldr	r3, [r7, #16]
 8014cbc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014cbe:	4618      	mov	r0, r3
 8014cc0:	f7fe fc0e 	bl	80134e0 <move_window>
 8014cc4:	4603      	mov	r3, r0
 8014cc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8014cca:	693b      	ldr	r3, [r7, #16]
 8014ccc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014cce:	3a01      	subs	r2, #1
 8014cd0:	611a      	str	r2, [r3, #16]
 8014cd2:	e019      	b.n	8014d08 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8014cd4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d115      	bne.n	8014d08 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8014cdc:	7ebb      	ldrb	r3, [r7, #26]
 8014cde:	f003 0310 	and.w	r3, r3, #16
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d003      	beq.n	8014cee <f_open+0x1ba>
					res = FR_NO_FILE;
 8014ce6:	2304      	movs	r3, #4
 8014ce8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014cec:	e00c      	b.n	8014d08 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8014cee:	79fb      	ldrb	r3, [r7, #7]
 8014cf0:	f003 0302 	and.w	r3, r3, #2
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	d007      	beq.n	8014d08 <f_open+0x1d4>
 8014cf8:	7ebb      	ldrb	r3, [r7, #26]
 8014cfa:	f003 0301 	and.w	r3, r3, #1
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d002      	beq.n	8014d08 <f_open+0x1d4>
						res = FR_DENIED;
 8014d02:	2307      	movs	r3, #7
 8014d04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8014d08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d128      	bne.n	8014d62 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8014d10:	79fb      	ldrb	r3, [r7, #7]
 8014d12:	f003 0308 	and.w	r3, r3, #8
 8014d16:	2b00      	cmp	r3, #0
 8014d18:	d003      	beq.n	8014d22 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8014d1a:	79fb      	ldrb	r3, [r7, #7]
 8014d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014d20:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8014d22:	693b      	ldr	r3, [r7, #16]
 8014d24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014d26:	68fb      	ldr	r3, [r7, #12]
 8014d28:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8014d2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014d2c:	68fb      	ldr	r3, [r7, #12]
 8014d2e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014d30:	79fb      	ldrb	r3, [r7, #7]
 8014d32:	f023 0301 	bic.w	r3, r3, #1
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	bf14      	ite	ne
 8014d3a:	2301      	movne	r3, #1
 8014d3c:	2300      	moveq	r3, #0
 8014d3e:	b2db      	uxtb	r3, r3
 8014d40:	461a      	mov	r2, r3
 8014d42:	f107 0314 	add.w	r3, r7, #20
 8014d46:	4611      	mov	r1, r2
 8014d48:	4618      	mov	r0, r3
 8014d4a:	f7fe fa97 	bl	801327c <inc_lock>
 8014d4e:	4602      	mov	r2, r0
 8014d50:	68fb      	ldr	r3, [r7, #12]
 8014d52:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8014d54:	68fb      	ldr	r3, [r7, #12]
 8014d56:	691b      	ldr	r3, [r3, #16]
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d102      	bne.n	8014d62 <f_open+0x22e>
 8014d5c:	2302      	movs	r3, #2
 8014d5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8014d62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	f040 8095 	bne.w	8014e96 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8014d6c:	693b      	ldr	r3, [r7, #16]
 8014d6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014d70:	4611      	mov	r1, r2
 8014d72:	4618      	mov	r0, r3
 8014d74:	f7ff f8bb 	bl	8013eee <ld_clust>
 8014d78:	4602      	mov	r2, r0
 8014d7a:	68fb      	ldr	r3, [r7, #12]
 8014d7c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8014d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d80:	331c      	adds	r3, #28
 8014d82:	4618      	mov	r0, r3
 8014d84:	f7fe f8e2 	bl	8012f4c <ld_dword>
 8014d88:	4602      	mov	r2, r0
 8014d8a:	68fb      	ldr	r3, [r7, #12]
 8014d8c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	2200      	movs	r2, #0
 8014d92:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8014d94:	693a      	ldr	r2, [r7, #16]
 8014d96:	68fb      	ldr	r3, [r7, #12]
 8014d98:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8014d9a:	693b      	ldr	r3, [r7, #16]
 8014d9c:	88da      	ldrh	r2, [r3, #6]
 8014d9e:	68fb      	ldr	r3, [r7, #12]
 8014da0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8014da2:	68fb      	ldr	r3, [r7, #12]
 8014da4:	79fa      	ldrb	r2, [r7, #7]
 8014da6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8014da8:	68fb      	ldr	r3, [r7, #12]
 8014daa:	2200      	movs	r2, #0
 8014dac:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8014dae:	68fb      	ldr	r3, [r7, #12]
 8014db0:	2200      	movs	r2, #0
 8014db2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8014db4:	68fb      	ldr	r3, [r7, #12]
 8014db6:	2200      	movs	r2, #0
 8014db8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8014dba:	68fb      	ldr	r3, [r7, #12]
 8014dbc:	3330      	adds	r3, #48	; 0x30
 8014dbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014dc2:	2100      	movs	r1, #0
 8014dc4:	4618      	mov	r0, r3
 8014dc6:	f7fe f94c 	bl	8013062 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8014dca:	79fb      	ldrb	r3, [r7, #7]
 8014dcc:	f003 0320 	and.w	r3, r3, #32
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d060      	beq.n	8014e96 <f_open+0x362>
 8014dd4:	68fb      	ldr	r3, [r7, #12]
 8014dd6:	68db      	ldr	r3, [r3, #12]
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	d05c      	beq.n	8014e96 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8014ddc:	68fb      	ldr	r3, [r7, #12]
 8014dde:	68da      	ldr	r2, [r3, #12]
 8014de0:	68fb      	ldr	r3, [r7, #12]
 8014de2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8014de4:	693b      	ldr	r3, [r7, #16]
 8014de6:	895b      	ldrh	r3, [r3, #10]
 8014de8:	025b      	lsls	r3, r3, #9
 8014dea:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8014dec:	68fb      	ldr	r3, [r7, #12]
 8014dee:	689b      	ldr	r3, [r3, #8]
 8014df0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014df2:	68fb      	ldr	r3, [r7, #12]
 8014df4:	68db      	ldr	r3, [r3, #12]
 8014df6:	657b      	str	r3, [r7, #84]	; 0x54
 8014df8:	e016      	b.n	8014e28 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8014dfa:	68fb      	ldr	r3, [r7, #12]
 8014dfc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014dfe:	4618      	mov	r0, r3
 8014e00:	f7fe fc29 	bl	8013656 <get_fat>
 8014e04:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8014e06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014e08:	2b01      	cmp	r3, #1
 8014e0a:	d802      	bhi.n	8014e12 <f_open+0x2de>
 8014e0c:	2302      	movs	r3, #2
 8014e0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014e12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e18:	d102      	bne.n	8014e20 <f_open+0x2ec>
 8014e1a:	2301      	movs	r3, #1
 8014e1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014e20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014e22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014e24:	1ad3      	subs	r3, r2, r3
 8014e26:	657b      	str	r3, [r7, #84]	; 0x54
 8014e28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014e2c:	2b00      	cmp	r3, #0
 8014e2e:	d103      	bne.n	8014e38 <f_open+0x304>
 8014e30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014e32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014e34:	429a      	cmp	r2, r3
 8014e36:	d8e0      	bhi.n	8014dfa <f_open+0x2c6>
				}
				fp->clust = clst;
 8014e38:	68fb      	ldr	r3, [r7, #12]
 8014e3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014e3c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8014e3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	d127      	bne.n	8014e96 <f_open+0x362>
 8014e46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014e48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d022      	beq.n	8014e96 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8014e50:	693b      	ldr	r3, [r7, #16]
 8014e52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014e54:	4618      	mov	r0, r3
 8014e56:	f7fe fbdf 	bl	8013618 <clust2sect>
 8014e5a:	6478      	str	r0, [r7, #68]	; 0x44
 8014e5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d103      	bne.n	8014e6a <f_open+0x336>
						res = FR_INT_ERR;
 8014e62:	2302      	movs	r3, #2
 8014e64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014e68:	e015      	b.n	8014e96 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8014e6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014e6c:	0a5a      	lsrs	r2, r3, #9
 8014e6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014e70:	441a      	add	r2, r3
 8014e72:	68fb      	ldr	r3, [r7, #12]
 8014e74:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8014e76:	693b      	ldr	r3, [r7, #16]
 8014e78:	7858      	ldrb	r0, [r3, #1]
 8014e7a:	68fb      	ldr	r3, [r7, #12]
 8014e7c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014e80:	68fb      	ldr	r3, [r7, #12]
 8014e82:	6a1a      	ldr	r2, [r3, #32]
 8014e84:	2301      	movs	r3, #1
 8014e86:	f7fd ffeb 	bl	8012e60 <disk_read>
 8014e8a:	4603      	mov	r3, r0
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d002      	beq.n	8014e96 <f_open+0x362>
 8014e90:	2301      	movs	r3, #1
 8014e92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8014e96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d002      	beq.n	8014ea4 <f_open+0x370>
 8014e9e:	68fb      	ldr	r3, [r7, #12]
 8014ea0:	2200      	movs	r2, #0
 8014ea2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8014ea4:	693b      	ldr	r3, [r7, #16]
 8014ea6:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8014eaa:	4611      	mov	r1, r2
 8014eac:	4618      	mov	r0, r3
 8014eae:	f7fe f94b 	bl	8013148 <unlock_fs>
 8014eb2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8014eb6:	4618      	mov	r0, r3
 8014eb8:	3760      	adds	r7, #96	; 0x60
 8014eba:	46bd      	mov	sp, r7
 8014ebc:	bd80      	pop	{r7, pc}

08014ebe <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8014ebe:	b580      	push	{r7, lr}
 8014ec0:	b08c      	sub	sp, #48	; 0x30
 8014ec2:	af00      	add	r7, sp, #0
 8014ec4:	60f8      	str	r0, [r7, #12]
 8014ec6:	60b9      	str	r1, [r7, #8]
 8014ec8:	607a      	str	r2, [r7, #4]
 8014eca:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8014ecc:	68bb      	ldr	r3, [r7, #8]
 8014ece:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8014ed0:	683b      	ldr	r3, [r7, #0]
 8014ed2:	2200      	movs	r2, #0
 8014ed4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	f107 0210 	add.w	r2, r7, #16
 8014edc:	4611      	mov	r1, r2
 8014ede:	4618      	mov	r0, r3
 8014ee0:	f7ff fd7c 	bl	80149dc <validate>
 8014ee4:	4603      	mov	r3, r0
 8014ee6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014eea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d107      	bne.n	8014f02 <f_write+0x44>
 8014ef2:	68fb      	ldr	r3, [r7, #12]
 8014ef4:	7d5b      	ldrb	r3, [r3, #21]
 8014ef6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8014efa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d009      	beq.n	8014f16 <f_write+0x58>
 8014f02:	693b      	ldr	r3, [r7, #16]
 8014f04:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8014f08:	4611      	mov	r1, r2
 8014f0a:	4618      	mov	r0, r3
 8014f0c:	f7fe f91c 	bl	8013148 <unlock_fs>
 8014f10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014f14:	e173      	b.n	80151fe <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8014f16:	68fb      	ldr	r3, [r7, #12]
 8014f18:	7d1b      	ldrb	r3, [r3, #20]
 8014f1a:	f003 0302 	and.w	r3, r3, #2
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	d106      	bne.n	8014f30 <f_write+0x72>
 8014f22:	693b      	ldr	r3, [r7, #16]
 8014f24:	2107      	movs	r1, #7
 8014f26:	4618      	mov	r0, r3
 8014f28:	f7fe f90e 	bl	8013148 <unlock_fs>
 8014f2c:	2307      	movs	r3, #7
 8014f2e:	e166      	b.n	80151fe <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	699a      	ldr	r2, [r3, #24]
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	441a      	add	r2, r3
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	699b      	ldr	r3, [r3, #24]
 8014f3c:	429a      	cmp	r2, r3
 8014f3e:	f080 814b 	bcs.w	80151d8 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8014f42:	68fb      	ldr	r3, [r7, #12]
 8014f44:	699b      	ldr	r3, [r3, #24]
 8014f46:	43db      	mvns	r3, r3
 8014f48:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8014f4a:	e145      	b.n	80151d8 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8014f4c:	68fb      	ldr	r3, [r7, #12]
 8014f4e:	699b      	ldr	r3, [r3, #24]
 8014f50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	f040 8101 	bne.w	801515c <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	699b      	ldr	r3, [r3, #24]
 8014f5e:	0a5b      	lsrs	r3, r3, #9
 8014f60:	693a      	ldr	r2, [r7, #16]
 8014f62:	8952      	ldrh	r2, [r2, #10]
 8014f64:	3a01      	subs	r2, #1
 8014f66:	4013      	ands	r3, r2
 8014f68:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8014f6a:	69bb      	ldr	r3, [r7, #24]
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d14d      	bne.n	801500c <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8014f70:	68fb      	ldr	r3, [r7, #12]
 8014f72:	699b      	ldr	r3, [r3, #24]
 8014f74:	2b00      	cmp	r3, #0
 8014f76:	d10c      	bne.n	8014f92 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8014f78:	68fb      	ldr	r3, [r7, #12]
 8014f7a:	689b      	ldr	r3, [r3, #8]
 8014f7c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8014f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d11a      	bne.n	8014fba <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	2100      	movs	r1, #0
 8014f88:	4618      	mov	r0, r3
 8014f8a:	f7fe fd5d 	bl	8013a48 <create_chain>
 8014f8e:	62b8      	str	r0, [r7, #40]	; 0x28
 8014f90:	e013      	b.n	8014fba <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8014f92:	68fb      	ldr	r3, [r7, #12]
 8014f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d007      	beq.n	8014faa <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8014f9a:	68fb      	ldr	r3, [r7, #12]
 8014f9c:	699b      	ldr	r3, [r3, #24]
 8014f9e:	4619      	mov	r1, r3
 8014fa0:	68f8      	ldr	r0, [r7, #12]
 8014fa2:	f7fe fde9 	bl	8013b78 <clmt_clust>
 8014fa6:	62b8      	str	r0, [r7, #40]	; 0x28
 8014fa8:	e007      	b.n	8014fba <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8014faa:	68fa      	ldr	r2, [r7, #12]
 8014fac:	68fb      	ldr	r3, [r7, #12]
 8014fae:	69db      	ldr	r3, [r3, #28]
 8014fb0:	4619      	mov	r1, r3
 8014fb2:	4610      	mov	r0, r2
 8014fb4:	f7fe fd48 	bl	8013a48 <create_chain>
 8014fb8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	f000 8110 	beq.w	80151e2 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fc4:	2b01      	cmp	r3, #1
 8014fc6:	d109      	bne.n	8014fdc <f_write+0x11e>
 8014fc8:	68fb      	ldr	r3, [r7, #12]
 8014fca:	2202      	movs	r2, #2
 8014fcc:	755a      	strb	r2, [r3, #21]
 8014fce:	693b      	ldr	r3, [r7, #16]
 8014fd0:	2102      	movs	r1, #2
 8014fd2:	4618      	mov	r0, r3
 8014fd4:	f7fe f8b8 	bl	8013148 <unlock_fs>
 8014fd8:	2302      	movs	r3, #2
 8014fda:	e110      	b.n	80151fe <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014fe2:	d109      	bne.n	8014ff8 <f_write+0x13a>
 8014fe4:	68fb      	ldr	r3, [r7, #12]
 8014fe6:	2201      	movs	r2, #1
 8014fe8:	755a      	strb	r2, [r3, #21]
 8014fea:	693b      	ldr	r3, [r7, #16]
 8014fec:	2101      	movs	r1, #1
 8014fee:	4618      	mov	r0, r3
 8014ff0:	f7fe f8aa 	bl	8013148 <unlock_fs>
 8014ff4:	2301      	movs	r3, #1
 8014ff6:	e102      	b.n	80151fe <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8014ff8:	68fb      	ldr	r3, [r7, #12]
 8014ffa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014ffc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8014ffe:	68fb      	ldr	r3, [r7, #12]
 8015000:	689b      	ldr	r3, [r3, #8]
 8015002:	2b00      	cmp	r3, #0
 8015004:	d102      	bne.n	801500c <f_write+0x14e>
 8015006:	68fb      	ldr	r3, [r7, #12]
 8015008:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801500a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801500c:	68fb      	ldr	r3, [r7, #12]
 801500e:	7d1b      	ldrb	r3, [r3, #20]
 8015010:	b25b      	sxtb	r3, r3
 8015012:	2b00      	cmp	r3, #0
 8015014:	da1d      	bge.n	8015052 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015016:	693b      	ldr	r3, [r7, #16]
 8015018:	7858      	ldrb	r0, [r3, #1]
 801501a:	68fb      	ldr	r3, [r7, #12]
 801501c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015020:	68fb      	ldr	r3, [r7, #12]
 8015022:	6a1a      	ldr	r2, [r3, #32]
 8015024:	2301      	movs	r3, #1
 8015026:	f7fd ff3b 	bl	8012ea0 <disk_write>
 801502a:	4603      	mov	r3, r0
 801502c:	2b00      	cmp	r3, #0
 801502e:	d009      	beq.n	8015044 <f_write+0x186>
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	2201      	movs	r2, #1
 8015034:	755a      	strb	r2, [r3, #21]
 8015036:	693b      	ldr	r3, [r7, #16]
 8015038:	2101      	movs	r1, #1
 801503a:	4618      	mov	r0, r3
 801503c:	f7fe f884 	bl	8013148 <unlock_fs>
 8015040:	2301      	movs	r3, #1
 8015042:	e0dc      	b.n	80151fe <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015044:	68fb      	ldr	r3, [r7, #12]
 8015046:	7d1b      	ldrb	r3, [r3, #20]
 8015048:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801504c:	b2da      	uxtb	r2, r3
 801504e:	68fb      	ldr	r3, [r7, #12]
 8015050:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8015052:	693a      	ldr	r2, [r7, #16]
 8015054:	68fb      	ldr	r3, [r7, #12]
 8015056:	69db      	ldr	r3, [r3, #28]
 8015058:	4619      	mov	r1, r3
 801505a:	4610      	mov	r0, r2
 801505c:	f7fe fadc 	bl	8013618 <clust2sect>
 8015060:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8015062:	697b      	ldr	r3, [r7, #20]
 8015064:	2b00      	cmp	r3, #0
 8015066:	d109      	bne.n	801507c <f_write+0x1be>
 8015068:	68fb      	ldr	r3, [r7, #12]
 801506a:	2202      	movs	r2, #2
 801506c:	755a      	strb	r2, [r3, #21]
 801506e:	693b      	ldr	r3, [r7, #16]
 8015070:	2102      	movs	r1, #2
 8015072:	4618      	mov	r0, r3
 8015074:	f7fe f868 	bl	8013148 <unlock_fs>
 8015078:	2302      	movs	r3, #2
 801507a:	e0c0      	b.n	80151fe <f_write+0x340>
			sect += csect;
 801507c:	697a      	ldr	r2, [r7, #20]
 801507e:	69bb      	ldr	r3, [r7, #24]
 8015080:	4413      	add	r3, r2
 8015082:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	0a5b      	lsrs	r3, r3, #9
 8015088:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801508a:	6a3b      	ldr	r3, [r7, #32]
 801508c:	2b00      	cmp	r3, #0
 801508e:	d041      	beq.n	8015114 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8015090:	69ba      	ldr	r2, [r7, #24]
 8015092:	6a3b      	ldr	r3, [r7, #32]
 8015094:	4413      	add	r3, r2
 8015096:	693a      	ldr	r2, [r7, #16]
 8015098:	8952      	ldrh	r2, [r2, #10]
 801509a:	4293      	cmp	r3, r2
 801509c:	d905      	bls.n	80150aa <f_write+0x1ec>
					cc = fs->csize - csect;
 801509e:	693b      	ldr	r3, [r7, #16]
 80150a0:	895b      	ldrh	r3, [r3, #10]
 80150a2:	461a      	mov	r2, r3
 80150a4:	69bb      	ldr	r3, [r7, #24]
 80150a6:	1ad3      	subs	r3, r2, r3
 80150a8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80150aa:	693b      	ldr	r3, [r7, #16]
 80150ac:	7858      	ldrb	r0, [r3, #1]
 80150ae:	6a3b      	ldr	r3, [r7, #32]
 80150b0:	697a      	ldr	r2, [r7, #20]
 80150b2:	69f9      	ldr	r1, [r7, #28]
 80150b4:	f7fd fef4 	bl	8012ea0 <disk_write>
 80150b8:	4603      	mov	r3, r0
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d009      	beq.n	80150d2 <f_write+0x214>
 80150be:	68fb      	ldr	r3, [r7, #12]
 80150c0:	2201      	movs	r2, #1
 80150c2:	755a      	strb	r2, [r3, #21]
 80150c4:	693b      	ldr	r3, [r7, #16]
 80150c6:	2101      	movs	r1, #1
 80150c8:	4618      	mov	r0, r3
 80150ca:	f7fe f83d 	bl	8013148 <unlock_fs>
 80150ce:	2301      	movs	r3, #1
 80150d0:	e095      	b.n	80151fe <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	6a1a      	ldr	r2, [r3, #32]
 80150d6:	697b      	ldr	r3, [r7, #20]
 80150d8:	1ad3      	subs	r3, r2, r3
 80150da:	6a3a      	ldr	r2, [r7, #32]
 80150dc:	429a      	cmp	r2, r3
 80150de:	d915      	bls.n	801510c <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80150e0:	68fb      	ldr	r3, [r7, #12]
 80150e2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80150e6:	68fb      	ldr	r3, [r7, #12]
 80150e8:	6a1a      	ldr	r2, [r3, #32]
 80150ea:	697b      	ldr	r3, [r7, #20]
 80150ec:	1ad3      	subs	r3, r2, r3
 80150ee:	025b      	lsls	r3, r3, #9
 80150f0:	69fa      	ldr	r2, [r7, #28]
 80150f2:	4413      	add	r3, r2
 80150f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80150f8:	4619      	mov	r1, r3
 80150fa:	f7fd ff91 	bl	8013020 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80150fe:	68fb      	ldr	r3, [r7, #12]
 8015100:	7d1b      	ldrb	r3, [r3, #20]
 8015102:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015106:	b2da      	uxtb	r2, r3
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801510c:	6a3b      	ldr	r3, [r7, #32]
 801510e:	025b      	lsls	r3, r3, #9
 8015110:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8015112:	e044      	b.n	801519e <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	6a1b      	ldr	r3, [r3, #32]
 8015118:	697a      	ldr	r2, [r7, #20]
 801511a:	429a      	cmp	r2, r3
 801511c:	d01b      	beq.n	8015156 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 801511e:	68fb      	ldr	r3, [r7, #12]
 8015120:	699a      	ldr	r2, [r3, #24]
 8015122:	68fb      	ldr	r3, [r7, #12]
 8015124:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8015126:	429a      	cmp	r2, r3
 8015128:	d215      	bcs.n	8015156 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801512a:	693b      	ldr	r3, [r7, #16]
 801512c:	7858      	ldrb	r0, [r3, #1]
 801512e:	68fb      	ldr	r3, [r7, #12]
 8015130:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015134:	2301      	movs	r3, #1
 8015136:	697a      	ldr	r2, [r7, #20]
 8015138:	f7fd fe92 	bl	8012e60 <disk_read>
 801513c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801513e:	2b00      	cmp	r3, #0
 8015140:	d009      	beq.n	8015156 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8015142:	68fb      	ldr	r3, [r7, #12]
 8015144:	2201      	movs	r2, #1
 8015146:	755a      	strb	r2, [r3, #21]
 8015148:	693b      	ldr	r3, [r7, #16]
 801514a:	2101      	movs	r1, #1
 801514c:	4618      	mov	r0, r3
 801514e:	f7fd fffb 	bl	8013148 <unlock_fs>
 8015152:	2301      	movs	r3, #1
 8015154:	e053      	b.n	80151fe <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8015156:	68fb      	ldr	r3, [r7, #12]
 8015158:	697a      	ldr	r2, [r7, #20]
 801515a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801515c:	68fb      	ldr	r3, [r7, #12]
 801515e:	699b      	ldr	r3, [r3, #24]
 8015160:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015164:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8015168:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801516a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	429a      	cmp	r2, r3
 8015170:	d901      	bls.n	8015176 <f_write+0x2b8>
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801517c:	68fb      	ldr	r3, [r7, #12]
 801517e:	699b      	ldr	r3, [r3, #24]
 8015180:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015184:	4413      	add	r3, r2
 8015186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015188:	69f9      	ldr	r1, [r7, #28]
 801518a:	4618      	mov	r0, r3
 801518c:	f7fd ff48 	bl	8013020 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8015190:	68fb      	ldr	r3, [r7, #12]
 8015192:	7d1b      	ldrb	r3, [r3, #20]
 8015194:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015198:	b2da      	uxtb	r2, r3
 801519a:	68fb      	ldr	r3, [r7, #12]
 801519c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801519e:	69fa      	ldr	r2, [r7, #28]
 80151a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151a2:	4413      	add	r3, r2
 80151a4:	61fb      	str	r3, [r7, #28]
 80151a6:	68fb      	ldr	r3, [r7, #12]
 80151a8:	699a      	ldr	r2, [r3, #24]
 80151aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151ac:	441a      	add	r2, r3
 80151ae:	68fb      	ldr	r3, [r7, #12]
 80151b0:	619a      	str	r2, [r3, #24]
 80151b2:	68fb      	ldr	r3, [r7, #12]
 80151b4:	68da      	ldr	r2, [r3, #12]
 80151b6:	68fb      	ldr	r3, [r7, #12]
 80151b8:	699b      	ldr	r3, [r3, #24]
 80151ba:	429a      	cmp	r2, r3
 80151bc:	bf38      	it	cc
 80151be:	461a      	movcc	r2, r3
 80151c0:	68fb      	ldr	r3, [r7, #12]
 80151c2:	60da      	str	r2, [r3, #12]
 80151c4:	683b      	ldr	r3, [r7, #0]
 80151c6:	681a      	ldr	r2, [r3, #0]
 80151c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151ca:	441a      	add	r2, r3
 80151cc:	683b      	ldr	r3, [r7, #0]
 80151ce:	601a      	str	r2, [r3, #0]
 80151d0:	687a      	ldr	r2, [r7, #4]
 80151d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151d4:	1ad3      	subs	r3, r2, r3
 80151d6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	2b00      	cmp	r3, #0
 80151dc:	f47f aeb6 	bne.w	8014f4c <f_write+0x8e>
 80151e0:	e000      	b.n	80151e4 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80151e2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80151e4:	68fb      	ldr	r3, [r7, #12]
 80151e6:	7d1b      	ldrb	r3, [r3, #20]
 80151e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80151ec:	b2da      	uxtb	r2, r3
 80151ee:	68fb      	ldr	r3, [r7, #12]
 80151f0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80151f2:	693b      	ldr	r3, [r7, #16]
 80151f4:	2100      	movs	r1, #0
 80151f6:	4618      	mov	r0, r3
 80151f8:	f7fd ffa6 	bl	8013148 <unlock_fs>
 80151fc:	2300      	movs	r3, #0
}
 80151fe:	4618      	mov	r0, r3
 8015200:	3730      	adds	r7, #48	; 0x30
 8015202:	46bd      	mov	sp, r7
 8015204:	bd80      	pop	{r7, pc}

08015206 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8015206:	b580      	push	{r7, lr}
 8015208:	b086      	sub	sp, #24
 801520a:	af00      	add	r7, sp, #0
 801520c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	f107 0208 	add.w	r2, r7, #8
 8015214:	4611      	mov	r1, r2
 8015216:	4618      	mov	r0, r3
 8015218:	f7ff fbe0 	bl	80149dc <validate>
 801521c:	4603      	mov	r3, r0
 801521e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8015220:	7dfb      	ldrb	r3, [r7, #23]
 8015222:	2b00      	cmp	r3, #0
 8015224:	d16d      	bne.n	8015302 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	7d1b      	ldrb	r3, [r3, #20]
 801522a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801522e:	2b00      	cmp	r3, #0
 8015230:	d067      	beq.n	8015302 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	7d1b      	ldrb	r3, [r3, #20]
 8015236:	b25b      	sxtb	r3, r3
 8015238:	2b00      	cmp	r3, #0
 801523a:	da1a      	bge.n	8015272 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801523c:	68bb      	ldr	r3, [r7, #8]
 801523e:	7858      	ldrb	r0, [r3, #1]
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	6a1a      	ldr	r2, [r3, #32]
 801524a:	2301      	movs	r3, #1
 801524c:	f7fd fe28 	bl	8012ea0 <disk_write>
 8015250:	4603      	mov	r3, r0
 8015252:	2b00      	cmp	r3, #0
 8015254:	d006      	beq.n	8015264 <f_sync+0x5e>
 8015256:	68bb      	ldr	r3, [r7, #8]
 8015258:	2101      	movs	r1, #1
 801525a:	4618      	mov	r0, r3
 801525c:	f7fd ff74 	bl	8013148 <unlock_fs>
 8015260:	2301      	movs	r3, #1
 8015262:	e055      	b.n	8015310 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	7d1b      	ldrb	r3, [r3, #20]
 8015268:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801526c:	b2da      	uxtb	r2, r3
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8015272:	f7fd f875 	bl	8012360 <get_fattime>
 8015276:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8015278:	68ba      	ldr	r2, [r7, #8]
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801527e:	4619      	mov	r1, r3
 8015280:	4610      	mov	r0, r2
 8015282:	f7fe f92d 	bl	80134e0 <move_window>
 8015286:	4603      	mov	r3, r0
 8015288:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801528a:	7dfb      	ldrb	r3, [r7, #23]
 801528c:	2b00      	cmp	r3, #0
 801528e:	d138      	bne.n	8015302 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015294:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8015296:	68fb      	ldr	r3, [r7, #12]
 8015298:	330b      	adds	r3, #11
 801529a:	781a      	ldrb	r2, [r3, #0]
 801529c:	68fb      	ldr	r3, [r7, #12]
 801529e:	330b      	adds	r3, #11
 80152a0:	f042 0220 	orr.w	r2, r2, #32
 80152a4:	b2d2      	uxtb	r2, r2
 80152a6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	6818      	ldr	r0, [r3, #0]
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	689b      	ldr	r3, [r3, #8]
 80152b0:	461a      	mov	r2, r3
 80152b2:	68f9      	ldr	r1, [r7, #12]
 80152b4:	f7fe fe3a 	bl	8013f2c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80152b8:	68fb      	ldr	r3, [r7, #12]
 80152ba:	f103 021c 	add.w	r2, r3, #28
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	68db      	ldr	r3, [r3, #12]
 80152c2:	4619      	mov	r1, r3
 80152c4:	4610      	mov	r0, r2
 80152c6:	f7fd fe7f 	bl	8012fc8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80152ca:	68fb      	ldr	r3, [r7, #12]
 80152cc:	3316      	adds	r3, #22
 80152ce:	6939      	ldr	r1, [r7, #16]
 80152d0:	4618      	mov	r0, r3
 80152d2:	f7fd fe79 	bl	8012fc8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80152d6:	68fb      	ldr	r3, [r7, #12]
 80152d8:	3312      	adds	r3, #18
 80152da:	2100      	movs	r1, #0
 80152dc:	4618      	mov	r0, r3
 80152de:	f7fd fe58 	bl	8012f92 <st_word>
					fs->wflag = 1;
 80152e2:	68bb      	ldr	r3, [r7, #8]
 80152e4:	2201      	movs	r2, #1
 80152e6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80152e8:	68bb      	ldr	r3, [r7, #8]
 80152ea:	4618      	mov	r0, r3
 80152ec:	f7fe f926 	bl	801353c <sync_fs>
 80152f0:	4603      	mov	r3, r0
 80152f2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	7d1b      	ldrb	r3, [r3, #20]
 80152f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80152fc:	b2da      	uxtb	r2, r3
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8015302:	68bb      	ldr	r3, [r7, #8]
 8015304:	7dfa      	ldrb	r2, [r7, #23]
 8015306:	4611      	mov	r1, r2
 8015308:	4618      	mov	r0, r3
 801530a:	f7fd ff1d 	bl	8013148 <unlock_fs>
 801530e:	7dfb      	ldrb	r3, [r7, #23]
}
 8015310:	4618      	mov	r0, r3
 8015312:	3718      	adds	r7, #24
 8015314:	46bd      	mov	sp, r7
 8015316:	bd80      	pop	{r7, pc}

08015318 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8015318:	b580      	push	{r7, lr}
 801531a:	b084      	sub	sp, #16
 801531c:	af00      	add	r7, sp, #0
 801531e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8015320:	6878      	ldr	r0, [r7, #4]
 8015322:	f7ff ff70 	bl	8015206 <f_sync>
 8015326:	4603      	mov	r3, r0
 8015328:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801532a:	7bfb      	ldrb	r3, [r7, #15]
 801532c:	2b00      	cmp	r3, #0
 801532e:	d11d      	bne.n	801536c <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	f107 0208 	add.w	r2, r7, #8
 8015336:	4611      	mov	r1, r2
 8015338:	4618      	mov	r0, r3
 801533a:	f7ff fb4f 	bl	80149dc <validate>
 801533e:	4603      	mov	r3, r0
 8015340:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8015342:	7bfb      	ldrb	r3, [r7, #15]
 8015344:	2b00      	cmp	r3, #0
 8015346:	d111      	bne.n	801536c <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	691b      	ldr	r3, [r3, #16]
 801534c:	4618      	mov	r0, r3
 801534e:	f7fe f823 	bl	8013398 <dec_lock>
 8015352:	4603      	mov	r3, r0
 8015354:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8015356:	7bfb      	ldrb	r3, [r7, #15]
 8015358:	2b00      	cmp	r3, #0
 801535a:	d102      	bne.n	8015362 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	2200      	movs	r2, #0
 8015360:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8015362:	68bb      	ldr	r3, [r7, #8]
 8015364:	2100      	movs	r1, #0
 8015366:	4618      	mov	r0, r3
 8015368:	f7fd feee 	bl	8013148 <unlock_fs>
#endif
		}
	}
	return res;
 801536c:	7bfb      	ldrb	r3, [r7, #15]
}
 801536e:	4618      	mov	r0, r3
 8015370:	3710      	adds	r7, #16
 8015372:	46bd      	mov	sp, r7
 8015374:	bd80      	pop	{r7, pc}

08015376 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8015376:	b580      	push	{r7, lr}
 8015378:	b090      	sub	sp, #64	; 0x40
 801537a:	af00      	add	r7, sp, #0
 801537c:	6078      	str	r0, [r7, #4]
 801537e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	f107 0208 	add.w	r2, r7, #8
 8015386:	4611      	mov	r1, r2
 8015388:	4618      	mov	r0, r3
 801538a:	f7ff fb27 	bl	80149dc <validate>
 801538e:	4603      	mov	r3, r0
 8015390:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8015394:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015398:	2b00      	cmp	r3, #0
 801539a:	d103      	bne.n	80153a4 <f_lseek+0x2e>
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	7d5b      	ldrb	r3, [r3, #21]
 80153a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80153a4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d009      	beq.n	80153c0 <f_lseek+0x4a>
 80153ac:	68bb      	ldr	r3, [r7, #8]
 80153ae:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80153b2:	4611      	mov	r1, r2
 80153b4:	4618      	mov	r0, r3
 80153b6:	f7fd fec7 	bl	8013148 <unlock_fs>
 80153ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80153be:	e229      	b.n	8015814 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	f000 80ea 	beq.w	801559e <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80153ca:	683b      	ldr	r3, [r7, #0]
 80153cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80153d0:	d164      	bne.n	801549c <f_lseek+0x126>
			tbl = fp->cltbl;
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80153d6:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80153d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153da:	1d1a      	adds	r2, r3, #4
 80153dc:	627a      	str	r2, [r7, #36]	; 0x24
 80153de:	681b      	ldr	r3, [r3, #0]
 80153e0:	617b      	str	r3, [r7, #20]
 80153e2:	2302      	movs	r3, #2
 80153e4:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	689b      	ldr	r3, [r3, #8]
 80153ea:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80153ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	d044      	beq.n	801547c <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80153f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153f4:	613b      	str	r3, [r7, #16]
 80153f6:	2300      	movs	r3, #0
 80153f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80153fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153fc:	3302      	adds	r3, #2
 80153fe:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8015400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015402:	60fb      	str	r3, [r7, #12]
 8015404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015406:	3301      	adds	r3, #1
 8015408:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801540e:	4618      	mov	r0, r3
 8015410:	f7fe f921 	bl	8013656 <get_fat>
 8015414:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8015416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015418:	2b01      	cmp	r3, #1
 801541a:	d809      	bhi.n	8015430 <f_lseek+0xba>
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	2202      	movs	r2, #2
 8015420:	755a      	strb	r2, [r3, #21]
 8015422:	68bb      	ldr	r3, [r7, #8]
 8015424:	2102      	movs	r1, #2
 8015426:	4618      	mov	r0, r3
 8015428:	f7fd fe8e 	bl	8013148 <unlock_fs>
 801542c:	2302      	movs	r3, #2
 801542e:	e1f1      	b.n	8015814 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015436:	d109      	bne.n	801544c <f_lseek+0xd6>
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	2201      	movs	r2, #1
 801543c:	755a      	strb	r2, [r3, #21]
 801543e:	68bb      	ldr	r3, [r7, #8]
 8015440:	2101      	movs	r1, #1
 8015442:	4618      	mov	r0, r3
 8015444:	f7fd fe80 	bl	8013148 <unlock_fs>
 8015448:	2301      	movs	r3, #1
 801544a:	e1e3      	b.n	8015814 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	3301      	adds	r3, #1
 8015450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015452:	429a      	cmp	r2, r3
 8015454:	d0d4      	beq.n	8015400 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8015456:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015458:	697b      	ldr	r3, [r7, #20]
 801545a:	429a      	cmp	r2, r3
 801545c:	d809      	bhi.n	8015472 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 801545e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015460:	1d1a      	adds	r2, r3, #4
 8015462:	627a      	str	r2, [r7, #36]	; 0x24
 8015464:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015466:	601a      	str	r2, [r3, #0]
 8015468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801546a:	1d1a      	adds	r2, r3, #4
 801546c:	627a      	str	r2, [r7, #36]	; 0x24
 801546e:	693a      	ldr	r2, [r7, #16]
 8015470:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8015472:	68bb      	ldr	r3, [r7, #8]
 8015474:	699b      	ldr	r3, [r3, #24]
 8015476:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015478:	429a      	cmp	r2, r3
 801547a:	d3ba      	bcc.n	80153f2 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015480:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015482:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8015484:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015486:	697b      	ldr	r3, [r7, #20]
 8015488:	429a      	cmp	r2, r3
 801548a:	d803      	bhi.n	8015494 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 801548c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801548e:	2200      	movs	r2, #0
 8015490:	601a      	str	r2, [r3, #0]
 8015492:	e1b6      	b.n	8015802 <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8015494:	2311      	movs	r3, #17
 8015496:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801549a:	e1b2      	b.n	8015802 <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	68db      	ldr	r3, [r3, #12]
 80154a0:	683a      	ldr	r2, [r7, #0]
 80154a2:	429a      	cmp	r2, r3
 80154a4:	d902      	bls.n	80154ac <f_lseek+0x136>
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	68db      	ldr	r3, [r3, #12]
 80154aa:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	683a      	ldr	r2, [r7, #0]
 80154b0:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80154b2:	683b      	ldr	r3, [r7, #0]
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	f000 81a4 	beq.w	8015802 <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80154ba:	683b      	ldr	r3, [r7, #0]
 80154bc:	3b01      	subs	r3, #1
 80154be:	4619      	mov	r1, r3
 80154c0:	6878      	ldr	r0, [r7, #4]
 80154c2:	f7fe fb59 	bl	8013b78 <clmt_clust>
 80154c6:	4602      	mov	r2, r0
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80154cc:	68ba      	ldr	r2, [r7, #8]
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	69db      	ldr	r3, [r3, #28]
 80154d2:	4619      	mov	r1, r3
 80154d4:	4610      	mov	r0, r2
 80154d6:	f7fe f89f 	bl	8013618 <clust2sect>
 80154da:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80154dc:	69bb      	ldr	r3, [r7, #24]
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d109      	bne.n	80154f6 <f_lseek+0x180>
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	2202      	movs	r2, #2
 80154e6:	755a      	strb	r2, [r3, #21]
 80154e8:	68bb      	ldr	r3, [r7, #8]
 80154ea:	2102      	movs	r1, #2
 80154ec:	4618      	mov	r0, r3
 80154ee:	f7fd fe2b 	bl	8013148 <unlock_fs>
 80154f2:	2302      	movs	r3, #2
 80154f4:	e18e      	b.n	8015814 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80154f6:	683b      	ldr	r3, [r7, #0]
 80154f8:	3b01      	subs	r3, #1
 80154fa:	0a5b      	lsrs	r3, r3, #9
 80154fc:	68ba      	ldr	r2, [r7, #8]
 80154fe:	8952      	ldrh	r2, [r2, #10]
 8015500:	3a01      	subs	r2, #1
 8015502:	4013      	ands	r3, r2
 8015504:	69ba      	ldr	r2, [r7, #24]
 8015506:	4413      	add	r3, r2
 8015508:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	699b      	ldr	r3, [r3, #24]
 801550e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015512:	2b00      	cmp	r3, #0
 8015514:	f000 8175 	beq.w	8015802 <f_lseek+0x48c>
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	6a1b      	ldr	r3, [r3, #32]
 801551c:	69ba      	ldr	r2, [r7, #24]
 801551e:	429a      	cmp	r2, r3
 8015520:	f000 816f 	beq.w	8015802 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	7d1b      	ldrb	r3, [r3, #20]
 8015528:	b25b      	sxtb	r3, r3
 801552a:	2b00      	cmp	r3, #0
 801552c:	da1d      	bge.n	801556a <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801552e:	68bb      	ldr	r3, [r7, #8]
 8015530:	7858      	ldrb	r0, [r3, #1]
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	6a1a      	ldr	r2, [r3, #32]
 801553c:	2301      	movs	r3, #1
 801553e:	f7fd fcaf 	bl	8012ea0 <disk_write>
 8015542:	4603      	mov	r3, r0
 8015544:	2b00      	cmp	r3, #0
 8015546:	d009      	beq.n	801555c <f_lseek+0x1e6>
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	2201      	movs	r2, #1
 801554c:	755a      	strb	r2, [r3, #21]
 801554e:	68bb      	ldr	r3, [r7, #8]
 8015550:	2101      	movs	r1, #1
 8015552:	4618      	mov	r0, r3
 8015554:	f7fd fdf8 	bl	8013148 <unlock_fs>
 8015558:	2301      	movs	r3, #1
 801555a:	e15b      	b.n	8015814 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	7d1b      	ldrb	r3, [r3, #20]
 8015560:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015564:	b2da      	uxtb	r2, r3
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 801556a:	68bb      	ldr	r3, [r7, #8]
 801556c:	7858      	ldrb	r0, [r3, #1]
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015574:	2301      	movs	r3, #1
 8015576:	69ba      	ldr	r2, [r7, #24]
 8015578:	f7fd fc72 	bl	8012e60 <disk_read>
 801557c:	4603      	mov	r3, r0
 801557e:	2b00      	cmp	r3, #0
 8015580:	d009      	beq.n	8015596 <f_lseek+0x220>
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	2201      	movs	r2, #1
 8015586:	755a      	strb	r2, [r3, #21]
 8015588:	68bb      	ldr	r3, [r7, #8]
 801558a:	2101      	movs	r1, #1
 801558c:	4618      	mov	r0, r3
 801558e:	f7fd fddb 	bl	8013148 <unlock_fs>
 8015592:	2301      	movs	r3, #1
 8015594:	e13e      	b.n	8015814 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	69ba      	ldr	r2, [r7, #24]
 801559a:	621a      	str	r2, [r3, #32]
 801559c:	e131      	b.n	8015802 <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	68db      	ldr	r3, [r3, #12]
 80155a2:	683a      	ldr	r2, [r7, #0]
 80155a4:	429a      	cmp	r2, r3
 80155a6:	d908      	bls.n	80155ba <f_lseek+0x244>
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	7d1b      	ldrb	r3, [r3, #20]
 80155ac:	f003 0302 	and.w	r3, r3, #2
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	d102      	bne.n	80155ba <f_lseek+0x244>
			ofs = fp->obj.objsize;
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	68db      	ldr	r3, [r3, #12]
 80155b8:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	699b      	ldr	r3, [r3, #24]
 80155be:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80155c0:	2300      	movs	r3, #0
 80155c2:	637b      	str	r3, [r7, #52]	; 0x34
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80155c8:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80155ca:	683b      	ldr	r3, [r7, #0]
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	f000 80c0 	beq.w	8015752 <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80155d2:	68bb      	ldr	r3, [r7, #8]
 80155d4:	895b      	ldrh	r3, [r3, #10]
 80155d6:	025b      	lsls	r3, r3, #9
 80155d8:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80155da:	6a3b      	ldr	r3, [r7, #32]
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d01b      	beq.n	8015618 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80155e0:	683b      	ldr	r3, [r7, #0]
 80155e2:	1e5a      	subs	r2, r3, #1
 80155e4:	69fb      	ldr	r3, [r7, #28]
 80155e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80155ea:	6a3b      	ldr	r3, [r7, #32]
 80155ec:	1e59      	subs	r1, r3, #1
 80155ee:	69fb      	ldr	r3, [r7, #28]
 80155f0:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80155f4:	429a      	cmp	r2, r3
 80155f6:	d30f      	bcc.n	8015618 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80155f8:	6a3b      	ldr	r3, [r7, #32]
 80155fa:	1e5a      	subs	r2, r3, #1
 80155fc:	69fb      	ldr	r3, [r7, #28]
 80155fe:	425b      	negs	r3, r3
 8015600:	401a      	ands	r2, r3
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	699b      	ldr	r3, [r3, #24]
 801560a:	683a      	ldr	r2, [r7, #0]
 801560c:	1ad3      	subs	r3, r2, r3
 801560e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	69db      	ldr	r3, [r3, #28]
 8015614:	63bb      	str	r3, [r7, #56]	; 0x38
 8015616:	e02c      	b.n	8015672 <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	689b      	ldr	r3, [r3, #8]
 801561c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801561e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015620:	2b00      	cmp	r3, #0
 8015622:	d123      	bne.n	801566c <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	2100      	movs	r1, #0
 8015628:	4618      	mov	r0, r3
 801562a:	f7fe fa0d 	bl	8013a48 <create_chain>
 801562e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8015630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015632:	2b01      	cmp	r3, #1
 8015634:	d109      	bne.n	801564a <f_lseek+0x2d4>
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	2202      	movs	r2, #2
 801563a:	755a      	strb	r2, [r3, #21]
 801563c:	68bb      	ldr	r3, [r7, #8]
 801563e:	2102      	movs	r1, #2
 8015640:	4618      	mov	r0, r3
 8015642:	f7fd fd81 	bl	8013148 <unlock_fs>
 8015646:	2302      	movs	r3, #2
 8015648:	e0e4      	b.n	8015814 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801564a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801564c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015650:	d109      	bne.n	8015666 <f_lseek+0x2f0>
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	2201      	movs	r2, #1
 8015656:	755a      	strb	r2, [r3, #21]
 8015658:	68bb      	ldr	r3, [r7, #8]
 801565a:	2101      	movs	r1, #1
 801565c:	4618      	mov	r0, r3
 801565e:	f7fd fd73 	bl	8013148 <unlock_fs>
 8015662:	2301      	movs	r3, #1
 8015664:	e0d6      	b.n	8015814 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801566a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015670:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8015672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015674:	2b00      	cmp	r3, #0
 8015676:	d06c      	beq.n	8015752 <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 8015678:	e044      	b.n	8015704 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 801567a:	683a      	ldr	r2, [r7, #0]
 801567c:	69fb      	ldr	r3, [r7, #28]
 801567e:	1ad3      	subs	r3, r2, r3
 8015680:	603b      	str	r3, [r7, #0]
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	699a      	ldr	r2, [r3, #24]
 8015686:	69fb      	ldr	r3, [r7, #28]
 8015688:	441a      	add	r2, r3
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	7d1b      	ldrb	r3, [r3, #20]
 8015692:	f003 0302 	and.w	r3, r3, #2
 8015696:	2b00      	cmp	r3, #0
 8015698:	d00b      	beq.n	80156b2 <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801569e:	4618      	mov	r0, r3
 80156a0:	f7fe f9d2 	bl	8013a48 <create_chain>
 80156a4:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80156a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d108      	bne.n	80156be <f_lseek+0x348>
							ofs = 0; break;
 80156ac:	2300      	movs	r3, #0
 80156ae:	603b      	str	r3, [r7, #0]
 80156b0:	e02c      	b.n	801570c <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80156b6:	4618      	mov	r0, r3
 80156b8:	f7fd ffcd 	bl	8013656 <get_fat>
 80156bc:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80156be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80156c4:	d109      	bne.n	80156da <f_lseek+0x364>
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	2201      	movs	r2, #1
 80156ca:	755a      	strb	r2, [r3, #21]
 80156cc:	68bb      	ldr	r3, [r7, #8]
 80156ce:	2101      	movs	r1, #1
 80156d0:	4618      	mov	r0, r3
 80156d2:	f7fd fd39 	bl	8013148 <unlock_fs>
 80156d6:	2301      	movs	r3, #1
 80156d8:	e09c      	b.n	8015814 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80156da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156dc:	2b01      	cmp	r3, #1
 80156de:	d904      	bls.n	80156ea <f_lseek+0x374>
 80156e0:	68bb      	ldr	r3, [r7, #8]
 80156e2:	699b      	ldr	r3, [r3, #24]
 80156e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80156e6:	429a      	cmp	r2, r3
 80156e8:	d309      	bcc.n	80156fe <f_lseek+0x388>
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	2202      	movs	r2, #2
 80156ee:	755a      	strb	r2, [r3, #21]
 80156f0:	68bb      	ldr	r3, [r7, #8]
 80156f2:	2102      	movs	r1, #2
 80156f4:	4618      	mov	r0, r3
 80156f6:	f7fd fd27 	bl	8013148 <unlock_fs>
 80156fa:	2302      	movs	r3, #2
 80156fc:	e08a      	b.n	8015814 <f_lseek+0x49e>
					fp->clust = clst;
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015702:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8015704:	683a      	ldr	r2, [r7, #0]
 8015706:	69fb      	ldr	r3, [r7, #28]
 8015708:	429a      	cmp	r2, r3
 801570a:	d8b6      	bhi.n	801567a <f_lseek+0x304>
				}
				fp->fptr += ofs;
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	699a      	ldr	r2, [r3, #24]
 8015710:	683b      	ldr	r3, [r7, #0]
 8015712:	441a      	add	r2, r3
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8015718:	683b      	ldr	r3, [r7, #0]
 801571a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801571e:	2b00      	cmp	r3, #0
 8015720:	d017      	beq.n	8015752 <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8015722:	68bb      	ldr	r3, [r7, #8]
 8015724:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015726:	4618      	mov	r0, r3
 8015728:	f7fd ff76 	bl	8013618 <clust2sect>
 801572c:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 801572e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015730:	2b00      	cmp	r3, #0
 8015732:	d109      	bne.n	8015748 <f_lseek+0x3d2>
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	2202      	movs	r2, #2
 8015738:	755a      	strb	r2, [r3, #21]
 801573a:	68bb      	ldr	r3, [r7, #8]
 801573c:	2102      	movs	r1, #2
 801573e:	4618      	mov	r0, r3
 8015740:	f7fd fd02 	bl	8013148 <unlock_fs>
 8015744:	2302      	movs	r3, #2
 8015746:	e065      	b.n	8015814 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 8015748:	683b      	ldr	r3, [r7, #0]
 801574a:	0a5b      	lsrs	r3, r3, #9
 801574c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801574e:	4413      	add	r3, r2
 8015750:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	699a      	ldr	r2, [r3, #24]
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	68db      	ldr	r3, [r3, #12]
 801575a:	429a      	cmp	r2, r3
 801575c:	d90a      	bls.n	8015774 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	699a      	ldr	r2, [r3, #24]
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	7d1b      	ldrb	r3, [r3, #20]
 801576a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801576e:	b2da      	uxtb	r2, r3
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	699b      	ldr	r3, [r3, #24]
 8015778:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801577c:	2b00      	cmp	r3, #0
 801577e:	d040      	beq.n	8015802 <f_lseek+0x48c>
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	6a1b      	ldr	r3, [r3, #32]
 8015784:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015786:	429a      	cmp	r2, r3
 8015788:	d03b      	beq.n	8015802 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	7d1b      	ldrb	r3, [r3, #20]
 801578e:	b25b      	sxtb	r3, r3
 8015790:	2b00      	cmp	r3, #0
 8015792:	da1d      	bge.n	80157d0 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015794:	68bb      	ldr	r3, [r7, #8]
 8015796:	7858      	ldrb	r0, [r3, #1]
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	6a1a      	ldr	r2, [r3, #32]
 80157a2:	2301      	movs	r3, #1
 80157a4:	f7fd fb7c 	bl	8012ea0 <disk_write>
 80157a8:	4603      	mov	r3, r0
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d009      	beq.n	80157c2 <f_lseek+0x44c>
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	2201      	movs	r2, #1
 80157b2:	755a      	strb	r2, [r3, #21]
 80157b4:	68bb      	ldr	r3, [r7, #8]
 80157b6:	2101      	movs	r1, #1
 80157b8:	4618      	mov	r0, r3
 80157ba:	f7fd fcc5 	bl	8013148 <unlock_fs>
 80157be:	2301      	movs	r3, #1
 80157c0:	e028      	b.n	8015814 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	7d1b      	ldrb	r3, [r3, #20]
 80157c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80157ca:	b2da      	uxtb	r2, r3
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80157d0:	68bb      	ldr	r3, [r7, #8]
 80157d2:	7858      	ldrb	r0, [r3, #1]
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80157da:	2301      	movs	r3, #1
 80157dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80157de:	f7fd fb3f 	bl	8012e60 <disk_read>
 80157e2:	4603      	mov	r3, r0
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	d009      	beq.n	80157fc <f_lseek+0x486>
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	2201      	movs	r2, #1
 80157ec:	755a      	strb	r2, [r3, #21]
 80157ee:	68bb      	ldr	r3, [r7, #8]
 80157f0:	2101      	movs	r1, #1
 80157f2:	4618      	mov	r0, r3
 80157f4:	f7fd fca8 	bl	8013148 <unlock_fs>
 80157f8:	2301      	movs	r3, #1
 80157fa:	e00b      	b.n	8015814 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015800:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8015802:	68bb      	ldr	r3, [r7, #8]
 8015804:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8015808:	4611      	mov	r1, r2
 801580a:	4618      	mov	r0, r3
 801580c:	f7fd fc9c 	bl	8013148 <unlock_fs>
 8015810:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8015814:	4618      	mov	r0, r3
 8015816:	3740      	adds	r7, #64	; 0x40
 8015818:	46bd      	mov	sp, r7
 801581a:	bd80      	pop	{r7, pc}

0801581c <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 801581c:	b580      	push	{r7, lr}
 801581e:	b086      	sub	sp, #24
 8015820:	af00      	add	r7, sp, #0
 8015822:	6078      	str	r0, [r7, #4]
 8015824:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	2b00      	cmp	r3, #0
 801582a:	d101      	bne.n	8015830 <f_opendir+0x14>
 801582c:	2309      	movs	r3, #9
 801582e:	e06a      	b.n	8015906 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8015834:	f107 010c 	add.w	r1, r7, #12
 8015838:	463b      	mov	r3, r7
 801583a:	2200      	movs	r2, #0
 801583c:	4618      	mov	r0, r3
 801583e:	f7fe fe79 	bl	8014534 <find_volume>
 8015842:	4603      	mov	r3, r0
 8015844:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8015846:	7dfb      	ldrb	r3, [r7, #23]
 8015848:	2b00      	cmp	r3, #0
 801584a:	d14f      	bne.n	80158ec <f_opendir+0xd0>
		obj->fs = fs;
 801584c:	68fa      	ldr	r2, [r7, #12]
 801584e:	693b      	ldr	r3, [r7, #16]
 8015850:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8015852:	683b      	ldr	r3, [r7, #0]
 8015854:	4619      	mov	r1, r3
 8015856:	6878      	ldr	r0, [r7, #4]
 8015858:	f7fe fd60 	bl	801431c <follow_path>
 801585c:	4603      	mov	r3, r0
 801585e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8015860:	7dfb      	ldrb	r3, [r7, #23]
 8015862:	2b00      	cmp	r3, #0
 8015864:	d13d      	bne.n	80158e2 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801586c:	b25b      	sxtb	r3, r3
 801586e:	2b00      	cmp	r3, #0
 8015870:	db12      	blt.n	8015898 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8015872:	693b      	ldr	r3, [r7, #16]
 8015874:	799b      	ldrb	r3, [r3, #6]
 8015876:	f003 0310 	and.w	r3, r3, #16
 801587a:	2b00      	cmp	r3, #0
 801587c:	d00a      	beq.n	8015894 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 801587e:	68fa      	ldr	r2, [r7, #12]
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	6a1b      	ldr	r3, [r3, #32]
 8015884:	4619      	mov	r1, r3
 8015886:	4610      	mov	r0, r2
 8015888:	f7fe fb31 	bl	8013eee <ld_clust>
 801588c:	4602      	mov	r2, r0
 801588e:	693b      	ldr	r3, [r7, #16]
 8015890:	609a      	str	r2, [r3, #8]
 8015892:	e001      	b.n	8015898 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8015894:	2305      	movs	r3, #5
 8015896:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8015898:	7dfb      	ldrb	r3, [r7, #23]
 801589a:	2b00      	cmp	r3, #0
 801589c:	d121      	bne.n	80158e2 <f_opendir+0xc6>
				obj->id = fs->id;
 801589e:	68fb      	ldr	r3, [r7, #12]
 80158a0:	88da      	ldrh	r2, [r3, #6]
 80158a2:	693b      	ldr	r3, [r7, #16]
 80158a4:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80158a6:	2100      	movs	r1, #0
 80158a8:	6878      	ldr	r0, [r7, #4]
 80158aa:	f7fe f999 	bl	8013be0 <dir_sdi>
 80158ae:	4603      	mov	r3, r0
 80158b0:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 80158b2:	7dfb      	ldrb	r3, [r7, #23]
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	d114      	bne.n	80158e2 <f_opendir+0xc6>
					if (obj->sclust) {
 80158b8:	693b      	ldr	r3, [r7, #16]
 80158ba:	689b      	ldr	r3, [r3, #8]
 80158bc:	2b00      	cmp	r3, #0
 80158be:	d00d      	beq.n	80158dc <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80158c0:	2100      	movs	r1, #0
 80158c2:	6878      	ldr	r0, [r7, #4]
 80158c4:	f7fd fcda 	bl	801327c <inc_lock>
 80158c8:	4602      	mov	r2, r0
 80158ca:	693b      	ldr	r3, [r7, #16]
 80158cc:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80158ce:	693b      	ldr	r3, [r7, #16]
 80158d0:	691b      	ldr	r3, [r3, #16]
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	d105      	bne.n	80158e2 <f_opendir+0xc6>
 80158d6:	2312      	movs	r3, #18
 80158d8:	75fb      	strb	r3, [r7, #23]
 80158da:	e002      	b.n	80158e2 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80158dc:	693b      	ldr	r3, [r7, #16]
 80158de:	2200      	movs	r2, #0
 80158e0:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80158e2:	7dfb      	ldrb	r3, [r7, #23]
 80158e4:	2b04      	cmp	r3, #4
 80158e6:	d101      	bne.n	80158ec <f_opendir+0xd0>
 80158e8:	2305      	movs	r3, #5
 80158ea:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80158ec:	7dfb      	ldrb	r3, [r7, #23]
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d002      	beq.n	80158f8 <f_opendir+0xdc>
 80158f2:	693b      	ldr	r3, [r7, #16]
 80158f4:	2200      	movs	r2, #0
 80158f6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80158f8:	68fb      	ldr	r3, [r7, #12]
 80158fa:	7dfa      	ldrb	r2, [r7, #23]
 80158fc:	4611      	mov	r1, r2
 80158fe:	4618      	mov	r0, r3
 8015900:	f7fd fc22 	bl	8013148 <unlock_fs>
 8015904:	7dfb      	ldrb	r3, [r7, #23]
}
 8015906:	4618      	mov	r0, r3
 8015908:	3718      	adds	r7, #24
 801590a:	46bd      	mov	sp, r7
 801590c:	bd80      	pop	{r7, pc}

0801590e <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 801590e:	b580      	push	{r7, lr}
 8015910:	b084      	sub	sp, #16
 8015912:	af00      	add	r7, sp, #0
 8015914:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	f107 0208 	add.w	r2, r7, #8
 801591c:	4611      	mov	r1, r2
 801591e:	4618      	mov	r0, r3
 8015920:	f7ff f85c 	bl	80149dc <validate>
 8015924:	4603      	mov	r3, r0
 8015926:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8015928:	7bfb      	ldrb	r3, [r7, #15]
 801592a:	2b00      	cmp	r3, #0
 801592c:	d115      	bne.n	801595a <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	691b      	ldr	r3, [r3, #16]
 8015932:	2b00      	cmp	r3, #0
 8015934:	d006      	beq.n	8015944 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	691b      	ldr	r3, [r3, #16]
 801593a:	4618      	mov	r0, r3
 801593c:	f7fd fd2c 	bl	8013398 <dec_lock>
 8015940:	4603      	mov	r3, r0
 8015942:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8015944:	7bfb      	ldrb	r3, [r7, #15]
 8015946:	2b00      	cmp	r3, #0
 8015948:	d102      	bne.n	8015950 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	2200      	movs	r2, #0
 801594e:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 8015950:	68bb      	ldr	r3, [r7, #8]
 8015952:	2100      	movs	r1, #0
 8015954:	4618      	mov	r0, r3
 8015956:	f7fd fbf7 	bl	8013148 <unlock_fs>
#endif
	}
	return res;
 801595a:	7bfb      	ldrb	r3, [r7, #15]
}
 801595c:	4618      	mov	r0, r3
 801595e:	3710      	adds	r7, #16
 8015960:	46bd      	mov	sp, r7
 8015962:	bd80      	pop	{r7, pc}

08015964 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8015964:	b580      	push	{r7, lr}
 8015966:	b084      	sub	sp, #16
 8015968:	af00      	add	r7, sp, #0
 801596a:	6078      	str	r0, [r7, #4]
 801596c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	f107 0208 	add.w	r2, r7, #8
 8015974:	4611      	mov	r1, r2
 8015976:	4618      	mov	r0, r3
 8015978:	f7ff f830 	bl	80149dc <validate>
 801597c:	4603      	mov	r3, r0
 801597e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8015980:	7bfb      	ldrb	r3, [r7, #15]
 8015982:	2b00      	cmp	r3, #0
 8015984:	d126      	bne.n	80159d4 <f_readdir+0x70>
		if (!fno) {
 8015986:	683b      	ldr	r3, [r7, #0]
 8015988:	2b00      	cmp	r3, #0
 801598a:	d106      	bne.n	801599a <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 801598c:	2100      	movs	r1, #0
 801598e:	6878      	ldr	r0, [r7, #4]
 8015990:	f7fe f926 	bl	8013be0 <dir_sdi>
 8015994:	4603      	mov	r3, r0
 8015996:	73fb      	strb	r3, [r7, #15]
 8015998:	e01c      	b.n	80159d4 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 801599a:	2100      	movs	r1, #0
 801599c:	6878      	ldr	r0, [r7, #4]
 801599e:	f7fe fae5 	bl	8013f6c <dir_read>
 80159a2:	4603      	mov	r3, r0
 80159a4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80159a6:	7bfb      	ldrb	r3, [r7, #15]
 80159a8:	2b04      	cmp	r3, #4
 80159aa:	d101      	bne.n	80159b0 <f_readdir+0x4c>
 80159ac:	2300      	movs	r3, #0
 80159ae:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 80159b0:	7bfb      	ldrb	r3, [r7, #15]
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	d10e      	bne.n	80159d4 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 80159b6:	6839      	ldr	r1, [r7, #0]
 80159b8:	6878      	ldr	r0, [r7, #4]
 80159ba:	f7fe fbbb 	bl	8014134 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80159be:	2100      	movs	r1, #0
 80159c0:	6878      	ldr	r0, [r7, #4]
 80159c2:	f7fe f988 	bl	8013cd6 <dir_next>
 80159c6:	4603      	mov	r3, r0
 80159c8:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80159ca:	7bfb      	ldrb	r3, [r7, #15]
 80159cc:	2b04      	cmp	r3, #4
 80159ce:	d101      	bne.n	80159d4 <f_readdir+0x70>
 80159d0:	2300      	movs	r3, #0
 80159d2:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80159d4:	68bb      	ldr	r3, [r7, #8]
 80159d6:	7bfa      	ldrb	r2, [r7, #15]
 80159d8:	4611      	mov	r1, r2
 80159da:	4618      	mov	r0, r3
 80159dc:	f7fd fbb4 	bl	8013148 <unlock_fs>
 80159e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80159e2:	4618      	mov	r0, r3
 80159e4:	3710      	adds	r7, #16
 80159e6:	46bd      	mov	sp, r7
 80159e8:	bd80      	pop	{r7, pc}
	...

080159ec <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80159ec:	b480      	push	{r7}
 80159ee:	b087      	sub	sp, #28
 80159f0:	af00      	add	r7, sp, #0
 80159f2:	60f8      	str	r0, [r7, #12]
 80159f4:	60b9      	str	r1, [r7, #8]
 80159f6:	4613      	mov	r3, r2
 80159f8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80159fa:	2301      	movs	r3, #1
 80159fc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80159fe:	2300      	movs	r3, #0
 8015a00:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8015a02:	4b1f      	ldr	r3, [pc, #124]	; (8015a80 <FATFS_LinkDriverEx+0x94>)
 8015a04:	7a5b      	ldrb	r3, [r3, #9]
 8015a06:	b2db      	uxtb	r3, r3
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	d131      	bne.n	8015a70 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8015a0c:	4b1c      	ldr	r3, [pc, #112]	; (8015a80 <FATFS_LinkDriverEx+0x94>)
 8015a0e:	7a5b      	ldrb	r3, [r3, #9]
 8015a10:	b2db      	uxtb	r3, r3
 8015a12:	461a      	mov	r2, r3
 8015a14:	4b1a      	ldr	r3, [pc, #104]	; (8015a80 <FATFS_LinkDriverEx+0x94>)
 8015a16:	2100      	movs	r1, #0
 8015a18:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8015a1a:	4b19      	ldr	r3, [pc, #100]	; (8015a80 <FATFS_LinkDriverEx+0x94>)
 8015a1c:	7a5b      	ldrb	r3, [r3, #9]
 8015a1e:	b2db      	uxtb	r3, r3
 8015a20:	4a17      	ldr	r2, [pc, #92]	; (8015a80 <FATFS_LinkDriverEx+0x94>)
 8015a22:	009b      	lsls	r3, r3, #2
 8015a24:	4413      	add	r3, r2
 8015a26:	68fa      	ldr	r2, [r7, #12]
 8015a28:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8015a2a:	4b15      	ldr	r3, [pc, #84]	; (8015a80 <FATFS_LinkDriverEx+0x94>)
 8015a2c:	7a5b      	ldrb	r3, [r3, #9]
 8015a2e:	b2db      	uxtb	r3, r3
 8015a30:	461a      	mov	r2, r3
 8015a32:	4b13      	ldr	r3, [pc, #76]	; (8015a80 <FATFS_LinkDriverEx+0x94>)
 8015a34:	4413      	add	r3, r2
 8015a36:	79fa      	ldrb	r2, [r7, #7]
 8015a38:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8015a3a:	4b11      	ldr	r3, [pc, #68]	; (8015a80 <FATFS_LinkDriverEx+0x94>)
 8015a3c:	7a5b      	ldrb	r3, [r3, #9]
 8015a3e:	b2db      	uxtb	r3, r3
 8015a40:	1c5a      	adds	r2, r3, #1
 8015a42:	b2d1      	uxtb	r1, r2
 8015a44:	4a0e      	ldr	r2, [pc, #56]	; (8015a80 <FATFS_LinkDriverEx+0x94>)
 8015a46:	7251      	strb	r1, [r2, #9]
 8015a48:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8015a4a:	7dbb      	ldrb	r3, [r7, #22]
 8015a4c:	3330      	adds	r3, #48	; 0x30
 8015a4e:	b2da      	uxtb	r2, r3
 8015a50:	68bb      	ldr	r3, [r7, #8]
 8015a52:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8015a54:	68bb      	ldr	r3, [r7, #8]
 8015a56:	3301      	adds	r3, #1
 8015a58:	223a      	movs	r2, #58	; 0x3a
 8015a5a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8015a5c:	68bb      	ldr	r3, [r7, #8]
 8015a5e:	3302      	adds	r3, #2
 8015a60:	222f      	movs	r2, #47	; 0x2f
 8015a62:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8015a64:	68bb      	ldr	r3, [r7, #8]
 8015a66:	3303      	adds	r3, #3
 8015a68:	2200      	movs	r2, #0
 8015a6a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8015a6c:	2300      	movs	r3, #0
 8015a6e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8015a70:	7dfb      	ldrb	r3, [r7, #23]
}
 8015a72:	4618      	mov	r0, r3
 8015a74:	371c      	adds	r7, #28
 8015a76:	46bd      	mov	sp, r7
 8015a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a7c:	4770      	bx	lr
 8015a7e:	bf00      	nop
 8015a80:	20000870 	.word	0x20000870

08015a84 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8015a84:	b580      	push	{r7, lr}
 8015a86:	b082      	sub	sp, #8
 8015a88:	af00      	add	r7, sp, #0
 8015a8a:	6078      	str	r0, [r7, #4]
 8015a8c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8015a8e:	2200      	movs	r2, #0
 8015a90:	6839      	ldr	r1, [r7, #0]
 8015a92:	6878      	ldr	r0, [r7, #4]
 8015a94:	f7ff ffaa 	bl	80159ec <FATFS_LinkDriverEx>
 8015a98:	4603      	mov	r3, r0
}
 8015a9a:	4618      	mov	r0, r3
 8015a9c:	3708      	adds	r7, #8
 8015a9e:	46bd      	mov	sp, r7
 8015aa0:	bd80      	pop	{r7, pc}

08015aa2 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8015aa2:	b580      	push	{r7, lr}
 8015aa4:	b084      	sub	sp, #16
 8015aa6:	af00      	add	r7, sp, #0
 8015aa8:	4603      	mov	r3, r0
 8015aaa:	6039      	str	r1, [r7, #0]
 8015aac:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8015aae:	2200      	movs	r2, #0
 8015ab0:	2101      	movs	r1, #1
 8015ab2:	2001      	movs	r0, #1
 8015ab4:	f000 fa13 	bl	8015ede <osSemaphoreNew>
 8015ab8:	4602      	mov	r2, r0
 8015aba:	683b      	ldr	r3, [r7, #0]
 8015abc:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8015abe:	683b      	ldr	r3, [r7, #0]
 8015ac0:	681b      	ldr	r3, [r3, #0]
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	bf14      	ite	ne
 8015ac6:	2301      	movne	r3, #1
 8015ac8:	2300      	moveq	r3, #0
 8015aca:	b2db      	uxtb	r3, r3
 8015acc:	60fb      	str	r3, [r7, #12]

    return ret;
 8015ace:	68fb      	ldr	r3, [r7, #12]
}
 8015ad0:	4618      	mov	r0, r3
 8015ad2:	3710      	adds	r7, #16
 8015ad4:	46bd      	mov	sp, r7
 8015ad6:	bd80      	pop	{r7, pc}

08015ad8 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8015ad8:	b580      	push	{r7, lr}
 8015ada:	b082      	sub	sp, #8
 8015adc:	af00      	add	r7, sp, #0
 8015ade:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8015ae0:	6878      	ldr	r0, [r7, #4]
 8015ae2:	f000 fb1b 	bl	801611c <osSemaphoreDelete>
#endif
    return 1;
 8015ae6:	2301      	movs	r3, #1
}
 8015ae8:	4618      	mov	r0, r3
 8015aea:	3708      	adds	r7, #8
 8015aec:	46bd      	mov	sp, r7
 8015aee:	bd80      	pop	{r7, pc}

08015af0 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8015af0:	b580      	push	{r7, lr}
 8015af2:	b084      	sub	sp, #16
 8015af4:	af00      	add	r7, sp, #0
 8015af6:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8015af8:	2300      	movs	r3, #0
 8015afa:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8015afc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8015b00:	6878      	ldr	r0, [r7, #4]
 8015b02:	f000 fa75 	bl	8015ff0 <osSemaphoreAcquire>
 8015b06:	4603      	mov	r3, r0
 8015b08:	2b00      	cmp	r3, #0
 8015b0a:	d101      	bne.n	8015b10 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8015b0c:	2301      	movs	r3, #1
 8015b0e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8015b10:	68fb      	ldr	r3, [r7, #12]
}
 8015b12:	4618      	mov	r0, r3
 8015b14:	3710      	adds	r7, #16
 8015b16:	46bd      	mov	sp, r7
 8015b18:	bd80      	pop	{r7, pc}

08015b1a <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8015b1a:	b580      	push	{r7, lr}
 8015b1c:	b082      	sub	sp, #8
 8015b1e:	af00      	add	r7, sp, #0
 8015b20:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8015b22:	6878      	ldr	r0, [r7, #4]
 8015b24:	f000 fab6 	bl	8016094 <osSemaphoreRelease>
#endif
}
 8015b28:	bf00      	nop
 8015b2a:	3708      	adds	r7, #8
 8015b2c:	46bd      	mov	sp, r7
 8015b2e:	bd80      	pop	{r7, pc}

08015b30 <__NVIC_SetPriority>:
{
 8015b30:	b480      	push	{r7}
 8015b32:	b083      	sub	sp, #12
 8015b34:	af00      	add	r7, sp, #0
 8015b36:	4603      	mov	r3, r0
 8015b38:	6039      	str	r1, [r7, #0]
 8015b3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	db0a      	blt.n	8015b5a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015b44:	683b      	ldr	r3, [r7, #0]
 8015b46:	b2da      	uxtb	r2, r3
 8015b48:	490c      	ldr	r1, [pc, #48]	; (8015b7c <__NVIC_SetPriority+0x4c>)
 8015b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015b4e:	0112      	lsls	r2, r2, #4
 8015b50:	b2d2      	uxtb	r2, r2
 8015b52:	440b      	add	r3, r1
 8015b54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8015b58:	e00a      	b.n	8015b70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015b5a:	683b      	ldr	r3, [r7, #0]
 8015b5c:	b2da      	uxtb	r2, r3
 8015b5e:	4908      	ldr	r1, [pc, #32]	; (8015b80 <__NVIC_SetPriority+0x50>)
 8015b60:	79fb      	ldrb	r3, [r7, #7]
 8015b62:	f003 030f 	and.w	r3, r3, #15
 8015b66:	3b04      	subs	r3, #4
 8015b68:	0112      	lsls	r2, r2, #4
 8015b6a:	b2d2      	uxtb	r2, r2
 8015b6c:	440b      	add	r3, r1
 8015b6e:	761a      	strb	r2, [r3, #24]
}
 8015b70:	bf00      	nop
 8015b72:	370c      	adds	r7, #12
 8015b74:	46bd      	mov	sp, r7
 8015b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b7a:	4770      	bx	lr
 8015b7c:	e000e100 	.word	0xe000e100
 8015b80:	e000ed00 	.word	0xe000ed00

08015b84 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8015b84:	b580      	push	{r7, lr}
 8015b86:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8015b88:	4b05      	ldr	r3, [pc, #20]	; (8015ba0 <SysTick_Handler+0x1c>)
 8015b8a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8015b8c:	f002 fba0 	bl	80182d0 <xTaskGetSchedulerState>
 8015b90:	4603      	mov	r3, r0
 8015b92:	2b01      	cmp	r3, #1
 8015b94:	d001      	beq.n	8015b9a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8015b96:	f003 fa87 	bl	80190a8 <xPortSysTickHandler>
  }
}
 8015b9a:	bf00      	nop
 8015b9c:	bd80      	pop	{r7, pc}
 8015b9e:	bf00      	nop
 8015ba0:	e000e010 	.word	0xe000e010

08015ba4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8015ba4:	b580      	push	{r7, lr}
 8015ba6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8015ba8:	2100      	movs	r1, #0
 8015baa:	f06f 0004 	mvn.w	r0, #4
 8015bae:	f7ff ffbf 	bl	8015b30 <__NVIC_SetPriority>
#endif
}
 8015bb2:	bf00      	nop
 8015bb4:	bd80      	pop	{r7, pc}
	...

08015bb8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8015bb8:	b480      	push	{r7}
 8015bba:	b083      	sub	sp, #12
 8015bbc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015bbe:	f3ef 8305 	mrs	r3, IPSR
 8015bc2:	603b      	str	r3, [r7, #0]
  return(result);
 8015bc4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d003      	beq.n	8015bd2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8015bca:	f06f 0305 	mvn.w	r3, #5
 8015bce:	607b      	str	r3, [r7, #4]
 8015bd0:	e00c      	b.n	8015bec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8015bd2:	4b0a      	ldr	r3, [pc, #40]	; (8015bfc <osKernelInitialize+0x44>)
 8015bd4:	681b      	ldr	r3, [r3, #0]
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d105      	bne.n	8015be6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8015bda:	4b08      	ldr	r3, [pc, #32]	; (8015bfc <osKernelInitialize+0x44>)
 8015bdc:	2201      	movs	r2, #1
 8015bde:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8015be0:	2300      	movs	r3, #0
 8015be2:	607b      	str	r3, [r7, #4]
 8015be4:	e002      	b.n	8015bec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8015be6:	f04f 33ff 	mov.w	r3, #4294967295
 8015bea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8015bec:	687b      	ldr	r3, [r7, #4]
}
 8015bee:	4618      	mov	r0, r3
 8015bf0:	370c      	adds	r7, #12
 8015bf2:	46bd      	mov	sp, r7
 8015bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bf8:	4770      	bx	lr
 8015bfa:	bf00      	nop
 8015bfc:	2000087c 	.word	0x2000087c

08015c00 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8015c00:	b580      	push	{r7, lr}
 8015c02:	b082      	sub	sp, #8
 8015c04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015c06:	f3ef 8305 	mrs	r3, IPSR
 8015c0a:	603b      	str	r3, [r7, #0]
  return(result);
 8015c0c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d003      	beq.n	8015c1a <osKernelStart+0x1a>
    stat = osErrorISR;
 8015c12:	f06f 0305 	mvn.w	r3, #5
 8015c16:	607b      	str	r3, [r7, #4]
 8015c18:	e010      	b.n	8015c3c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8015c1a:	4b0b      	ldr	r3, [pc, #44]	; (8015c48 <osKernelStart+0x48>)
 8015c1c:	681b      	ldr	r3, [r3, #0]
 8015c1e:	2b01      	cmp	r3, #1
 8015c20:	d109      	bne.n	8015c36 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8015c22:	f7ff ffbf 	bl	8015ba4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8015c26:	4b08      	ldr	r3, [pc, #32]	; (8015c48 <osKernelStart+0x48>)
 8015c28:	2202      	movs	r2, #2
 8015c2a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8015c2c:	f001 fee4 	bl	80179f8 <vTaskStartScheduler>
      stat = osOK;
 8015c30:	2300      	movs	r3, #0
 8015c32:	607b      	str	r3, [r7, #4]
 8015c34:	e002      	b.n	8015c3c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8015c36:	f04f 33ff 	mov.w	r3, #4294967295
 8015c3a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8015c3c:	687b      	ldr	r3, [r7, #4]
}
 8015c3e:	4618      	mov	r0, r3
 8015c40:	3708      	adds	r7, #8
 8015c42:	46bd      	mov	sp, r7
 8015c44:	bd80      	pop	{r7, pc}
 8015c46:	bf00      	nop
 8015c48:	2000087c 	.word	0x2000087c

08015c4c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8015c4c:	b580      	push	{r7, lr}
 8015c4e:	b08e      	sub	sp, #56	; 0x38
 8015c50:	af04      	add	r7, sp, #16
 8015c52:	60f8      	str	r0, [r7, #12]
 8015c54:	60b9      	str	r1, [r7, #8]
 8015c56:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8015c58:	2300      	movs	r3, #0
 8015c5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015c5c:	f3ef 8305 	mrs	r3, IPSR
 8015c60:	617b      	str	r3, [r7, #20]
  return(result);
 8015c62:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	d17f      	bne.n	8015d68 <osThreadNew+0x11c>
 8015c68:	68fb      	ldr	r3, [r7, #12]
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	d07c      	beq.n	8015d68 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8015c6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015c72:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8015c74:	2318      	movs	r3, #24
 8015c76:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8015c78:	2300      	movs	r3, #0
 8015c7a:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8015c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8015c80:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	d045      	beq.n	8015d14 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	681b      	ldr	r3, [r3, #0]
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	d002      	beq.n	8015c96 <osThreadNew+0x4a>
        name = attr->name;
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	681b      	ldr	r3, [r3, #0]
 8015c94:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	699b      	ldr	r3, [r3, #24]
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	d002      	beq.n	8015ca4 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	699b      	ldr	r3, [r3, #24]
 8015ca2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8015ca4:	69fb      	ldr	r3, [r7, #28]
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	d008      	beq.n	8015cbc <osThreadNew+0x70>
 8015caa:	69fb      	ldr	r3, [r7, #28]
 8015cac:	2b38      	cmp	r3, #56	; 0x38
 8015cae:	d805      	bhi.n	8015cbc <osThreadNew+0x70>
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	685b      	ldr	r3, [r3, #4]
 8015cb4:	f003 0301 	and.w	r3, r3, #1
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	d001      	beq.n	8015cc0 <osThreadNew+0x74>
        return (NULL);
 8015cbc:	2300      	movs	r3, #0
 8015cbe:	e054      	b.n	8015d6a <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	695b      	ldr	r3, [r3, #20]
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	d003      	beq.n	8015cd0 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	695b      	ldr	r3, [r3, #20]
 8015ccc:	089b      	lsrs	r3, r3, #2
 8015cce:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	689b      	ldr	r3, [r3, #8]
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d00e      	beq.n	8015cf6 <osThreadNew+0xaa>
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	68db      	ldr	r3, [r3, #12]
 8015cdc:	2bbb      	cmp	r3, #187	; 0xbb
 8015cde:	d90a      	bls.n	8015cf6 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d006      	beq.n	8015cf6 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	695b      	ldr	r3, [r3, #20]
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	d002      	beq.n	8015cf6 <osThreadNew+0xaa>
        mem = 1;
 8015cf0:	2301      	movs	r3, #1
 8015cf2:	61bb      	str	r3, [r7, #24]
 8015cf4:	e010      	b.n	8015d18 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	689b      	ldr	r3, [r3, #8]
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	d10c      	bne.n	8015d18 <osThreadNew+0xcc>
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	68db      	ldr	r3, [r3, #12]
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	d108      	bne.n	8015d18 <osThreadNew+0xcc>
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	691b      	ldr	r3, [r3, #16]
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	d104      	bne.n	8015d18 <osThreadNew+0xcc>
          mem = 0;
 8015d0e:	2300      	movs	r3, #0
 8015d10:	61bb      	str	r3, [r7, #24]
 8015d12:	e001      	b.n	8015d18 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8015d14:	2300      	movs	r3, #0
 8015d16:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8015d18:	69bb      	ldr	r3, [r7, #24]
 8015d1a:	2b01      	cmp	r3, #1
 8015d1c:	d110      	bne.n	8015d40 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8015d22:	687a      	ldr	r2, [r7, #4]
 8015d24:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8015d26:	9202      	str	r2, [sp, #8]
 8015d28:	9301      	str	r3, [sp, #4]
 8015d2a:	69fb      	ldr	r3, [r7, #28]
 8015d2c:	9300      	str	r3, [sp, #0]
 8015d2e:	68bb      	ldr	r3, [r7, #8]
 8015d30:	6a3a      	ldr	r2, [r7, #32]
 8015d32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015d34:	68f8      	ldr	r0, [r7, #12]
 8015d36:	f001 fb0b 	bl	8017350 <xTaskCreateStatic>
 8015d3a:	4603      	mov	r3, r0
 8015d3c:	613b      	str	r3, [r7, #16]
 8015d3e:	e013      	b.n	8015d68 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8015d40:	69bb      	ldr	r3, [r7, #24]
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	d110      	bne.n	8015d68 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8015d46:	6a3b      	ldr	r3, [r7, #32]
 8015d48:	b29a      	uxth	r2, r3
 8015d4a:	f107 0310 	add.w	r3, r7, #16
 8015d4e:	9301      	str	r3, [sp, #4]
 8015d50:	69fb      	ldr	r3, [r7, #28]
 8015d52:	9300      	str	r3, [sp, #0]
 8015d54:	68bb      	ldr	r3, [r7, #8]
 8015d56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015d58:	68f8      	ldr	r0, [r7, #12]
 8015d5a:	f001 fb56 	bl	801740a <xTaskCreate>
 8015d5e:	4603      	mov	r3, r0
 8015d60:	2b01      	cmp	r3, #1
 8015d62:	d001      	beq.n	8015d68 <osThreadNew+0x11c>
            hTask = NULL;
 8015d64:	2300      	movs	r3, #0
 8015d66:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8015d68:	693b      	ldr	r3, [r7, #16]
}
 8015d6a:	4618      	mov	r0, r3
 8015d6c:	3728      	adds	r7, #40	; 0x28
 8015d6e:	46bd      	mov	sp, r7
 8015d70:	bd80      	pop	{r7, pc}

08015d72 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 8015d72:	b580      	push	{r7, lr}
 8015d74:	b082      	sub	sp, #8
 8015d76:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8015d78:	f002 fa9a 	bl	80182b0 <xTaskGetCurrentTaskHandle>
 8015d7c:	6078      	str	r0, [r7, #4]

  return (id);
 8015d7e:	687b      	ldr	r3, [r7, #4]
}
 8015d80:	4618      	mov	r0, r3
 8015d82:	3708      	adds	r7, #8
 8015d84:	46bd      	mov	sp, r7
 8015d86:	bd80      	pop	{r7, pc}

08015d88 <osThreadGetState>:

osThreadState_t osThreadGetState (osThreadId_t thread_id) {
 8015d88:	b580      	push	{r7, lr}
 8015d8a:	b086      	sub	sp, #24
 8015d8c:	af00      	add	r7, sp, #0
 8015d8e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015d94:	f3ef 8305 	mrs	r3, IPSR
 8015d98:	60fb      	str	r3, [r7, #12]
  return(result);
 8015d9a:	68fb      	ldr	r3, [r7, #12]
  osThreadState_t state;

  if (IS_IRQ() || (hTask == NULL)) {
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	d102      	bne.n	8015da6 <osThreadGetState+0x1e>
 8015da0:	693b      	ldr	r3, [r7, #16]
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	d103      	bne.n	8015dae <osThreadGetState+0x26>
    state = osThreadError;
 8015da6:	f04f 33ff 	mov.w	r3, #4294967295
 8015daa:	617b      	str	r3, [r7, #20]
 8015dac:	e022      	b.n	8015df4 <osThreadGetState+0x6c>
  }
  else {
    switch (eTaskGetState (hTask)) {
 8015dae:	6938      	ldr	r0, [r7, #16]
 8015db0:	f001 fd2c 	bl	801780c <eTaskGetState>
 8015db4:	4603      	mov	r3, r0
 8015db6:	2b04      	cmp	r3, #4
 8015db8:	d818      	bhi.n	8015dec <osThreadGetState+0x64>
 8015dba:	a201      	add	r2, pc, #4	; (adr r2, 8015dc0 <osThreadGetState+0x38>)
 8015dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015dc0:	08015dd5 	.word	0x08015dd5
 8015dc4:	08015ddb 	.word	0x08015ddb
 8015dc8:	08015de1 	.word	0x08015de1
 8015dcc:	08015de1 	.word	0x08015de1
 8015dd0:	08015de7 	.word	0x08015de7
      case eRunning:   state = osThreadRunning;    break;
 8015dd4:	2302      	movs	r3, #2
 8015dd6:	617b      	str	r3, [r7, #20]
 8015dd8:	e00c      	b.n	8015df4 <osThreadGetState+0x6c>
      case eReady:     state = osThreadReady;      break;
 8015dda:	2301      	movs	r3, #1
 8015ddc:	617b      	str	r3, [r7, #20]
 8015dde:	e009      	b.n	8015df4 <osThreadGetState+0x6c>
      case eBlocked:
      case eSuspended: state = osThreadBlocked;    break;
 8015de0:	2303      	movs	r3, #3
 8015de2:	617b      	str	r3, [r7, #20]
 8015de4:	e006      	b.n	8015df4 <osThreadGetState+0x6c>
      case eDeleted:   state = osThreadTerminated; break;
 8015de6:	2304      	movs	r3, #4
 8015de8:	617b      	str	r3, [r7, #20]
 8015dea:	e003      	b.n	8015df4 <osThreadGetState+0x6c>
      case eInvalid:
      default:         state = osThreadError;      break;
 8015dec:	f04f 33ff 	mov.w	r3, #4294967295
 8015df0:	617b      	str	r3, [r7, #20]
 8015df2:	bf00      	nop
    }
  }

  return (state);
 8015df4:	697b      	ldr	r3, [r7, #20]
}
 8015df6:	4618      	mov	r0, r3
 8015df8:	3718      	adds	r7, #24
 8015dfa:	46bd      	mov	sp, r7
 8015dfc:	bd80      	pop	{r7, pc}
 8015dfe:	bf00      	nop

08015e00 <osThreadResume>:
  }

  return (stat);
}

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8015e00:	b580      	push	{r7, lr}
 8015e02:	b086      	sub	sp, #24
 8015e04:	af00      	add	r7, sp, #0
 8015e06:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015e0c:	f3ef 8305 	mrs	r3, IPSR
 8015e10:	60fb      	str	r3, [r7, #12]
  return(result);
 8015e12:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d003      	beq.n	8015e20 <osThreadResume+0x20>
    stat = osErrorISR;
 8015e18:	f06f 0305 	mvn.w	r3, #5
 8015e1c:	617b      	str	r3, [r7, #20]
 8015e1e:	e00b      	b.n	8015e38 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 8015e20:	693b      	ldr	r3, [r7, #16]
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	d103      	bne.n	8015e2e <osThreadResume+0x2e>
    stat = osErrorParameter;
 8015e26:	f06f 0303 	mvn.w	r3, #3
 8015e2a:	617b      	str	r3, [r7, #20]
 8015e2c:	e004      	b.n	8015e38 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 8015e2e:	2300      	movs	r3, #0
 8015e30:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 8015e32:	6938      	ldr	r0, [r7, #16]
 8015e34:	f001 fd82 	bl	801793c <vTaskResume>
  }

  return (stat);
 8015e38:	697b      	ldr	r3, [r7, #20]
}
 8015e3a:	4618      	mov	r0, r3
 8015e3c:	3718      	adds	r7, #24
 8015e3e:	46bd      	mov	sp, r7
 8015e40:	bd80      	pop	{r7, pc}

08015e42 <osThreadExit>:
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 8015e42:	b580      	push	{r7, lr}
 8015e44:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 8015e46:	2000      	movs	r0, #0
 8015e48:	f001 fc3a 	bl	80176c0 <vTaskDelete>
#endif
  for (;;);
 8015e4c:	e7fe      	b.n	8015e4c <osThreadExit+0xa>

08015e4e <osThreadTerminate>:
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8015e4e:	b580      	push	{r7, lr}
 8015e50:	b086      	sub	sp, #24
 8015e52:	af00      	add	r7, sp, #0
 8015e54:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015e5a:	f3ef 8305 	mrs	r3, IPSR
 8015e5e:	60bb      	str	r3, [r7, #8]
  return(result);
 8015e60:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	d003      	beq.n	8015e6e <osThreadTerminate+0x20>
    stat = osErrorISR;
 8015e66:	f06f 0305 	mvn.w	r3, #5
 8015e6a:	617b      	str	r3, [r7, #20]
 8015e6c:	e017      	b.n	8015e9e <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8015e6e:	693b      	ldr	r3, [r7, #16]
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	d103      	bne.n	8015e7c <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8015e74:	f06f 0303 	mvn.w	r3, #3
 8015e78:	617b      	str	r3, [r7, #20]
 8015e7a:	e010      	b.n	8015e9e <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 8015e7c:	6938      	ldr	r0, [r7, #16]
 8015e7e:	f001 fcc5 	bl	801780c <eTaskGetState>
 8015e82:	4603      	mov	r3, r0
 8015e84:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8015e86:	7bfb      	ldrb	r3, [r7, #15]
 8015e88:	2b04      	cmp	r3, #4
 8015e8a:	d005      	beq.n	8015e98 <osThreadTerminate+0x4a>
      stat = osOK;
 8015e8c:	2300      	movs	r3, #0
 8015e8e:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8015e90:	6938      	ldr	r0, [r7, #16]
 8015e92:	f001 fc15 	bl	80176c0 <vTaskDelete>
 8015e96:	e002      	b.n	8015e9e <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8015e98:	f06f 0302 	mvn.w	r3, #2
 8015e9c:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8015e9e:	697b      	ldr	r3, [r7, #20]
}
 8015ea0:	4618      	mov	r0, r3
 8015ea2:	3718      	adds	r7, #24
 8015ea4:	46bd      	mov	sp, r7
 8015ea6:	bd80      	pop	{r7, pc}

08015ea8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8015ea8:	b580      	push	{r7, lr}
 8015eaa:	b084      	sub	sp, #16
 8015eac:	af00      	add	r7, sp, #0
 8015eae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015eb0:	f3ef 8305 	mrs	r3, IPSR
 8015eb4:	60bb      	str	r3, [r7, #8]
  return(result);
 8015eb6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	d003      	beq.n	8015ec4 <osDelay+0x1c>
    stat = osErrorISR;
 8015ebc:	f06f 0305 	mvn.w	r3, #5
 8015ec0:	60fb      	str	r3, [r7, #12]
 8015ec2:	e007      	b.n	8015ed4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8015ec4:	2300      	movs	r3, #0
 8015ec6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d002      	beq.n	8015ed4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8015ece:	6878      	ldr	r0, [r7, #4]
 8015ed0:	f001 fc68 	bl	80177a4 <vTaskDelay>
    }
  }

  return (stat);
 8015ed4:	68fb      	ldr	r3, [r7, #12]
}
 8015ed6:	4618      	mov	r0, r3
 8015ed8:	3710      	adds	r7, #16
 8015eda:	46bd      	mov	sp, r7
 8015edc:	bd80      	pop	{r7, pc}

08015ede <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8015ede:	b580      	push	{r7, lr}
 8015ee0:	b08a      	sub	sp, #40	; 0x28
 8015ee2:	af02      	add	r7, sp, #8
 8015ee4:	60f8      	str	r0, [r7, #12]
 8015ee6:	60b9      	str	r1, [r7, #8]
 8015ee8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8015eea:	2300      	movs	r3, #0
 8015eec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015eee:	f3ef 8305 	mrs	r3, IPSR
 8015ef2:	613b      	str	r3, [r7, #16]
  return(result);
 8015ef4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d175      	bne.n	8015fe6 <osSemaphoreNew+0x108>
 8015efa:	68fb      	ldr	r3, [r7, #12]
 8015efc:	2b00      	cmp	r3, #0
 8015efe:	d072      	beq.n	8015fe6 <osSemaphoreNew+0x108>
 8015f00:	68ba      	ldr	r2, [r7, #8]
 8015f02:	68fb      	ldr	r3, [r7, #12]
 8015f04:	429a      	cmp	r2, r3
 8015f06:	d86e      	bhi.n	8015fe6 <osSemaphoreNew+0x108>
    mem = -1;
 8015f08:	f04f 33ff 	mov.w	r3, #4294967295
 8015f0c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	d015      	beq.n	8015f40 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	689b      	ldr	r3, [r3, #8]
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d006      	beq.n	8015f2a <osSemaphoreNew+0x4c>
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	68db      	ldr	r3, [r3, #12]
 8015f20:	2b4f      	cmp	r3, #79	; 0x4f
 8015f22:	d902      	bls.n	8015f2a <osSemaphoreNew+0x4c>
        mem = 1;
 8015f24:	2301      	movs	r3, #1
 8015f26:	61bb      	str	r3, [r7, #24]
 8015f28:	e00c      	b.n	8015f44 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	689b      	ldr	r3, [r3, #8]
 8015f2e:	2b00      	cmp	r3, #0
 8015f30:	d108      	bne.n	8015f44 <osSemaphoreNew+0x66>
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	68db      	ldr	r3, [r3, #12]
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d104      	bne.n	8015f44 <osSemaphoreNew+0x66>
          mem = 0;
 8015f3a:	2300      	movs	r3, #0
 8015f3c:	61bb      	str	r3, [r7, #24]
 8015f3e:	e001      	b.n	8015f44 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8015f40:	2300      	movs	r3, #0
 8015f42:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8015f44:	69bb      	ldr	r3, [r7, #24]
 8015f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f4a:	d04c      	beq.n	8015fe6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8015f4c:	68fb      	ldr	r3, [r7, #12]
 8015f4e:	2b01      	cmp	r3, #1
 8015f50:	d128      	bne.n	8015fa4 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8015f52:	69bb      	ldr	r3, [r7, #24]
 8015f54:	2b01      	cmp	r3, #1
 8015f56:	d10a      	bne.n	8015f6e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	689b      	ldr	r3, [r3, #8]
 8015f5c:	2203      	movs	r2, #3
 8015f5e:	9200      	str	r2, [sp, #0]
 8015f60:	2200      	movs	r2, #0
 8015f62:	2100      	movs	r1, #0
 8015f64:	2001      	movs	r0, #1
 8015f66:	f000 fa4d 	bl	8016404 <xQueueGenericCreateStatic>
 8015f6a:	61f8      	str	r0, [r7, #28]
 8015f6c:	e005      	b.n	8015f7a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8015f6e:	2203      	movs	r2, #3
 8015f70:	2100      	movs	r1, #0
 8015f72:	2001      	movs	r0, #1
 8015f74:	f000 fabe 	bl	80164f4 <xQueueGenericCreate>
 8015f78:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8015f7a:	69fb      	ldr	r3, [r7, #28]
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d022      	beq.n	8015fc6 <osSemaphoreNew+0xe8>
 8015f80:	68bb      	ldr	r3, [r7, #8]
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	d01f      	beq.n	8015fc6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8015f86:	2300      	movs	r3, #0
 8015f88:	2200      	movs	r2, #0
 8015f8a:	2100      	movs	r1, #0
 8015f8c:	69f8      	ldr	r0, [r7, #28]
 8015f8e:	f000 fb79 	bl	8016684 <xQueueGenericSend>
 8015f92:	4603      	mov	r3, r0
 8015f94:	2b01      	cmp	r3, #1
 8015f96:	d016      	beq.n	8015fc6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8015f98:	69f8      	ldr	r0, [r7, #28]
 8015f9a:	f001 f805 	bl	8016fa8 <vQueueDelete>
            hSemaphore = NULL;
 8015f9e:	2300      	movs	r3, #0
 8015fa0:	61fb      	str	r3, [r7, #28]
 8015fa2:	e010      	b.n	8015fc6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8015fa4:	69bb      	ldr	r3, [r7, #24]
 8015fa6:	2b01      	cmp	r3, #1
 8015fa8:	d108      	bne.n	8015fbc <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	689b      	ldr	r3, [r3, #8]
 8015fae:	461a      	mov	r2, r3
 8015fb0:	68b9      	ldr	r1, [r7, #8]
 8015fb2:	68f8      	ldr	r0, [r7, #12]
 8015fb4:	f000 fafb 	bl	80165ae <xQueueCreateCountingSemaphoreStatic>
 8015fb8:	61f8      	str	r0, [r7, #28]
 8015fba:	e004      	b.n	8015fc6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8015fbc:	68b9      	ldr	r1, [r7, #8]
 8015fbe:	68f8      	ldr	r0, [r7, #12]
 8015fc0:	f000 fb2c 	bl	801661c <xQueueCreateCountingSemaphore>
 8015fc4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8015fc6:	69fb      	ldr	r3, [r7, #28]
 8015fc8:	2b00      	cmp	r3, #0
 8015fca:	d00c      	beq.n	8015fe6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	2b00      	cmp	r3, #0
 8015fd0:	d003      	beq.n	8015fda <osSemaphoreNew+0xfc>
          name = attr->name;
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	681b      	ldr	r3, [r3, #0]
 8015fd6:	617b      	str	r3, [r7, #20]
 8015fd8:	e001      	b.n	8015fde <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8015fda:	2300      	movs	r3, #0
 8015fdc:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8015fde:	6979      	ldr	r1, [r7, #20]
 8015fe0:	69f8      	ldr	r0, [r7, #28]
 8015fe2:	f001 f92d 	bl	8017240 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8015fe6:	69fb      	ldr	r3, [r7, #28]
}
 8015fe8:	4618      	mov	r0, r3
 8015fea:	3720      	adds	r7, #32
 8015fec:	46bd      	mov	sp, r7
 8015fee:	bd80      	pop	{r7, pc}

08015ff0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8015ff0:	b580      	push	{r7, lr}
 8015ff2:	b086      	sub	sp, #24
 8015ff4:	af00      	add	r7, sp, #0
 8015ff6:	6078      	str	r0, [r7, #4]
 8015ff8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8015ffe:	2300      	movs	r3, #0
 8016000:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8016002:	693b      	ldr	r3, [r7, #16]
 8016004:	2b00      	cmp	r3, #0
 8016006:	d103      	bne.n	8016010 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8016008:	f06f 0303 	mvn.w	r3, #3
 801600c:	617b      	str	r3, [r7, #20]
 801600e:	e039      	b.n	8016084 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016010:	f3ef 8305 	mrs	r3, IPSR
 8016014:	60fb      	str	r3, [r7, #12]
  return(result);
 8016016:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8016018:	2b00      	cmp	r3, #0
 801601a:	d022      	beq.n	8016062 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 801601c:	683b      	ldr	r3, [r7, #0]
 801601e:	2b00      	cmp	r3, #0
 8016020:	d003      	beq.n	801602a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8016022:	f06f 0303 	mvn.w	r3, #3
 8016026:	617b      	str	r3, [r7, #20]
 8016028:	e02c      	b.n	8016084 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 801602a:	2300      	movs	r3, #0
 801602c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 801602e:	f107 0308 	add.w	r3, r7, #8
 8016032:	461a      	mov	r2, r3
 8016034:	2100      	movs	r1, #0
 8016036:	6938      	ldr	r0, [r7, #16]
 8016038:	f000 ff36 	bl	8016ea8 <xQueueReceiveFromISR>
 801603c:	4603      	mov	r3, r0
 801603e:	2b01      	cmp	r3, #1
 8016040:	d003      	beq.n	801604a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8016042:	f06f 0302 	mvn.w	r3, #2
 8016046:	617b      	str	r3, [r7, #20]
 8016048:	e01c      	b.n	8016084 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 801604a:	68bb      	ldr	r3, [r7, #8]
 801604c:	2b00      	cmp	r3, #0
 801604e:	d019      	beq.n	8016084 <osSemaphoreAcquire+0x94>
 8016050:	4b0f      	ldr	r3, [pc, #60]	; (8016090 <osSemaphoreAcquire+0xa0>)
 8016052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016056:	601a      	str	r2, [r3, #0]
 8016058:	f3bf 8f4f 	dsb	sy
 801605c:	f3bf 8f6f 	isb	sy
 8016060:	e010      	b.n	8016084 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8016062:	6839      	ldr	r1, [r7, #0]
 8016064:	6938      	ldr	r0, [r7, #16]
 8016066:	f000 fe13 	bl	8016c90 <xQueueSemaphoreTake>
 801606a:	4603      	mov	r3, r0
 801606c:	2b01      	cmp	r3, #1
 801606e:	d009      	beq.n	8016084 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8016070:	683b      	ldr	r3, [r7, #0]
 8016072:	2b00      	cmp	r3, #0
 8016074:	d003      	beq.n	801607e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8016076:	f06f 0301 	mvn.w	r3, #1
 801607a:	617b      	str	r3, [r7, #20]
 801607c:	e002      	b.n	8016084 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 801607e:	f06f 0302 	mvn.w	r3, #2
 8016082:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8016084:	697b      	ldr	r3, [r7, #20]
}
 8016086:	4618      	mov	r0, r3
 8016088:	3718      	adds	r7, #24
 801608a:	46bd      	mov	sp, r7
 801608c:	bd80      	pop	{r7, pc}
 801608e:	bf00      	nop
 8016090:	e000ed04 	.word	0xe000ed04

08016094 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8016094:	b580      	push	{r7, lr}
 8016096:	b086      	sub	sp, #24
 8016098:	af00      	add	r7, sp, #0
 801609a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80160a0:	2300      	movs	r3, #0
 80160a2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80160a4:	693b      	ldr	r3, [r7, #16]
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	d103      	bne.n	80160b2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80160aa:	f06f 0303 	mvn.w	r3, #3
 80160ae:	617b      	str	r3, [r7, #20]
 80160b0:	e02c      	b.n	801610c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80160b2:	f3ef 8305 	mrs	r3, IPSR
 80160b6:	60fb      	str	r3, [r7, #12]
  return(result);
 80160b8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d01a      	beq.n	80160f4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80160be:	2300      	movs	r3, #0
 80160c0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80160c2:	f107 0308 	add.w	r3, r7, #8
 80160c6:	4619      	mov	r1, r3
 80160c8:	6938      	ldr	r0, [r7, #16]
 80160ca:	f000 fc74 	bl	80169b6 <xQueueGiveFromISR>
 80160ce:	4603      	mov	r3, r0
 80160d0:	2b01      	cmp	r3, #1
 80160d2:	d003      	beq.n	80160dc <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80160d4:	f06f 0302 	mvn.w	r3, #2
 80160d8:	617b      	str	r3, [r7, #20]
 80160da:	e017      	b.n	801610c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80160dc:	68bb      	ldr	r3, [r7, #8]
 80160de:	2b00      	cmp	r3, #0
 80160e0:	d014      	beq.n	801610c <osSemaphoreRelease+0x78>
 80160e2:	4b0d      	ldr	r3, [pc, #52]	; (8016118 <osSemaphoreRelease+0x84>)
 80160e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80160e8:	601a      	str	r2, [r3, #0]
 80160ea:	f3bf 8f4f 	dsb	sy
 80160ee:	f3bf 8f6f 	isb	sy
 80160f2:	e00b      	b.n	801610c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80160f4:	2300      	movs	r3, #0
 80160f6:	2200      	movs	r2, #0
 80160f8:	2100      	movs	r1, #0
 80160fa:	6938      	ldr	r0, [r7, #16]
 80160fc:	f000 fac2 	bl	8016684 <xQueueGenericSend>
 8016100:	4603      	mov	r3, r0
 8016102:	2b01      	cmp	r3, #1
 8016104:	d002      	beq.n	801610c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8016106:	f06f 0302 	mvn.w	r3, #2
 801610a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 801610c:	697b      	ldr	r3, [r7, #20]
}
 801610e:	4618      	mov	r0, r3
 8016110:	3718      	adds	r7, #24
 8016112:	46bd      	mov	sp, r7
 8016114:	bd80      	pop	{r7, pc}
 8016116:	bf00      	nop
 8016118:	e000ed04 	.word	0xe000ed04

0801611c <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 801611c:	b580      	push	{r7, lr}
 801611e:	b086      	sub	sp, #24
 8016120:	af00      	add	r7, sp, #0
 8016122:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016128:	f3ef 8305 	mrs	r3, IPSR
 801612c:	60fb      	str	r3, [r7, #12]
  return(result);
 801612e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8016130:	2b00      	cmp	r3, #0
 8016132:	d003      	beq.n	801613c <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8016134:	f06f 0305 	mvn.w	r3, #5
 8016138:	617b      	str	r3, [r7, #20]
 801613a:	e00e      	b.n	801615a <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 801613c:	693b      	ldr	r3, [r7, #16]
 801613e:	2b00      	cmp	r3, #0
 8016140:	d103      	bne.n	801614a <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8016142:	f06f 0303 	mvn.w	r3, #3
 8016146:	617b      	str	r3, [r7, #20]
 8016148:	e007      	b.n	801615a <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 801614a:	6938      	ldr	r0, [r7, #16]
 801614c:	f001 f8a2 	bl	8017294 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8016150:	2300      	movs	r3, #0
 8016152:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8016154:	6938      	ldr	r0, [r7, #16]
 8016156:	f000 ff27 	bl	8016fa8 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 801615a:	697b      	ldr	r3, [r7, #20]
}
 801615c:	4618      	mov	r0, r3
 801615e:	3718      	adds	r7, #24
 8016160:	46bd      	mov	sp, r7
 8016162:	bd80      	pop	{r7, pc}

08016164 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8016164:	b480      	push	{r7}
 8016166:	b085      	sub	sp, #20
 8016168:	af00      	add	r7, sp, #0
 801616a:	60f8      	str	r0, [r7, #12]
 801616c:	60b9      	str	r1, [r7, #8]
 801616e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8016170:	68fb      	ldr	r3, [r7, #12]
 8016172:	4a07      	ldr	r2, [pc, #28]	; (8016190 <vApplicationGetIdleTaskMemory+0x2c>)
 8016174:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8016176:	68bb      	ldr	r3, [r7, #8]
 8016178:	4a06      	ldr	r2, [pc, #24]	; (8016194 <vApplicationGetIdleTaskMemory+0x30>)
 801617a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016182:	601a      	str	r2, [r3, #0]
}
 8016184:	bf00      	nop
 8016186:	3714      	adds	r7, #20
 8016188:	46bd      	mov	sp, r7
 801618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801618e:	4770      	bx	lr
 8016190:	20000880 	.word	0x20000880
 8016194:	2000093c 	.word	0x2000093c

08016198 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8016198:	b480      	push	{r7}
 801619a:	b085      	sub	sp, #20
 801619c:	af00      	add	r7, sp, #0
 801619e:	60f8      	str	r0, [r7, #12]
 80161a0:	60b9      	str	r1, [r7, #8]
 80161a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80161a4:	68fb      	ldr	r3, [r7, #12]
 80161a6:	4a07      	ldr	r2, [pc, #28]	; (80161c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80161a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80161aa:	68bb      	ldr	r3, [r7, #8]
 80161ac:	4a06      	ldr	r2, [pc, #24]	; (80161c8 <vApplicationGetTimerTaskMemory+0x30>)
 80161ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80161b6:	601a      	str	r2, [r3, #0]
}
 80161b8:	bf00      	nop
 80161ba:	3714      	adds	r7, #20
 80161bc:	46bd      	mov	sp, r7
 80161be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161c2:	4770      	bx	lr
 80161c4:	2000113c 	.word	0x2000113c
 80161c8:	200011f8 	.word	0x200011f8

080161cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80161cc:	b480      	push	{r7}
 80161ce:	b083      	sub	sp, #12
 80161d0:	af00      	add	r7, sp, #0
 80161d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	f103 0208 	add.w	r2, r3, #8
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	f04f 32ff 	mov.w	r2, #4294967295
 80161e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	f103 0208 	add.w	r2, r3, #8
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	f103 0208 	add.w	r2, r3, #8
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	2200      	movs	r2, #0
 80161fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8016200:	bf00      	nop
 8016202:	370c      	adds	r7, #12
 8016204:	46bd      	mov	sp, r7
 8016206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801620a:	4770      	bx	lr

0801620c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801620c:	b480      	push	{r7}
 801620e:	b083      	sub	sp, #12
 8016210:	af00      	add	r7, sp, #0
 8016212:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	2200      	movs	r2, #0
 8016218:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801621a:	bf00      	nop
 801621c:	370c      	adds	r7, #12
 801621e:	46bd      	mov	sp, r7
 8016220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016224:	4770      	bx	lr

08016226 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016226:	b480      	push	{r7}
 8016228:	b085      	sub	sp, #20
 801622a:	af00      	add	r7, sp, #0
 801622c:	6078      	str	r0, [r7, #4]
 801622e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	685b      	ldr	r3, [r3, #4]
 8016234:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8016236:	683b      	ldr	r3, [r7, #0]
 8016238:	68fa      	ldr	r2, [r7, #12]
 801623a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801623c:	68fb      	ldr	r3, [r7, #12]
 801623e:	689a      	ldr	r2, [r3, #8]
 8016240:	683b      	ldr	r3, [r7, #0]
 8016242:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8016244:	68fb      	ldr	r3, [r7, #12]
 8016246:	689b      	ldr	r3, [r3, #8]
 8016248:	683a      	ldr	r2, [r7, #0]
 801624a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801624c:	68fb      	ldr	r3, [r7, #12]
 801624e:	683a      	ldr	r2, [r7, #0]
 8016250:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8016252:	683b      	ldr	r3, [r7, #0]
 8016254:	687a      	ldr	r2, [r7, #4]
 8016256:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	681b      	ldr	r3, [r3, #0]
 801625c:	1c5a      	adds	r2, r3, #1
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	601a      	str	r2, [r3, #0]
}
 8016262:	bf00      	nop
 8016264:	3714      	adds	r7, #20
 8016266:	46bd      	mov	sp, r7
 8016268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801626c:	4770      	bx	lr

0801626e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801626e:	b480      	push	{r7}
 8016270:	b085      	sub	sp, #20
 8016272:	af00      	add	r7, sp, #0
 8016274:	6078      	str	r0, [r7, #4]
 8016276:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8016278:	683b      	ldr	r3, [r7, #0]
 801627a:	681b      	ldr	r3, [r3, #0]
 801627c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801627e:	68bb      	ldr	r3, [r7, #8]
 8016280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016284:	d103      	bne.n	801628e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	691b      	ldr	r3, [r3, #16]
 801628a:	60fb      	str	r3, [r7, #12]
 801628c:	e00c      	b.n	80162a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	3308      	adds	r3, #8
 8016292:	60fb      	str	r3, [r7, #12]
 8016294:	e002      	b.n	801629c <vListInsert+0x2e>
 8016296:	68fb      	ldr	r3, [r7, #12]
 8016298:	685b      	ldr	r3, [r3, #4]
 801629a:	60fb      	str	r3, [r7, #12]
 801629c:	68fb      	ldr	r3, [r7, #12]
 801629e:	685b      	ldr	r3, [r3, #4]
 80162a0:	681b      	ldr	r3, [r3, #0]
 80162a2:	68ba      	ldr	r2, [r7, #8]
 80162a4:	429a      	cmp	r2, r3
 80162a6:	d2f6      	bcs.n	8016296 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80162a8:	68fb      	ldr	r3, [r7, #12]
 80162aa:	685a      	ldr	r2, [r3, #4]
 80162ac:	683b      	ldr	r3, [r7, #0]
 80162ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80162b0:	683b      	ldr	r3, [r7, #0]
 80162b2:	685b      	ldr	r3, [r3, #4]
 80162b4:	683a      	ldr	r2, [r7, #0]
 80162b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80162b8:	683b      	ldr	r3, [r7, #0]
 80162ba:	68fa      	ldr	r2, [r7, #12]
 80162bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80162be:	68fb      	ldr	r3, [r7, #12]
 80162c0:	683a      	ldr	r2, [r7, #0]
 80162c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80162c4:	683b      	ldr	r3, [r7, #0]
 80162c6:	687a      	ldr	r2, [r7, #4]
 80162c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	681b      	ldr	r3, [r3, #0]
 80162ce:	1c5a      	adds	r2, r3, #1
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	601a      	str	r2, [r3, #0]
}
 80162d4:	bf00      	nop
 80162d6:	3714      	adds	r7, #20
 80162d8:	46bd      	mov	sp, r7
 80162da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162de:	4770      	bx	lr

080162e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80162e0:	b480      	push	{r7}
 80162e2:	b085      	sub	sp, #20
 80162e4:	af00      	add	r7, sp, #0
 80162e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	691b      	ldr	r3, [r3, #16]
 80162ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	685b      	ldr	r3, [r3, #4]
 80162f2:	687a      	ldr	r2, [r7, #4]
 80162f4:	6892      	ldr	r2, [r2, #8]
 80162f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	689b      	ldr	r3, [r3, #8]
 80162fc:	687a      	ldr	r2, [r7, #4]
 80162fe:	6852      	ldr	r2, [r2, #4]
 8016300:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8016302:	68fb      	ldr	r3, [r7, #12]
 8016304:	685b      	ldr	r3, [r3, #4]
 8016306:	687a      	ldr	r2, [r7, #4]
 8016308:	429a      	cmp	r2, r3
 801630a:	d103      	bne.n	8016314 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	689a      	ldr	r2, [r3, #8]
 8016310:	68fb      	ldr	r3, [r7, #12]
 8016312:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	2200      	movs	r2, #0
 8016318:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801631a:	68fb      	ldr	r3, [r7, #12]
 801631c:	681b      	ldr	r3, [r3, #0]
 801631e:	1e5a      	subs	r2, r3, #1
 8016320:	68fb      	ldr	r3, [r7, #12]
 8016322:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8016324:	68fb      	ldr	r3, [r7, #12]
 8016326:	681b      	ldr	r3, [r3, #0]
}
 8016328:	4618      	mov	r0, r3
 801632a:	3714      	adds	r7, #20
 801632c:	46bd      	mov	sp, r7
 801632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016332:	4770      	bx	lr

08016334 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8016334:	b580      	push	{r7, lr}
 8016336:	b084      	sub	sp, #16
 8016338:	af00      	add	r7, sp, #0
 801633a:	6078      	str	r0, [r7, #4]
 801633c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8016342:	68fb      	ldr	r3, [r7, #12]
 8016344:	2b00      	cmp	r3, #0
 8016346:	d10a      	bne.n	801635e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8016348:	f04f 0350 	mov.w	r3, #80	; 0x50
 801634c:	f383 8811 	msr	BASEPRI, r3
 8016350:	f3bf 8f6f 	isb	sy
 8016354:	f3bf 8f4f 	dsb	sy
 8016358:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801635a:	bf00      	nop
 801635c:	e7fe      	b.n	801635c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801635e:	f002 fe11 	bl	8018f84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016362:	68fb      	ldr	r3, [r7, #12]
 8016364:	681a      	ldr	r2, [r3, #0]
 8016366:	68fb      	ldr	r3, [r7, #12]
 8016368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801636a:	68f9      	ldr	r1, [r7, #12]
 801636c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801636e:	fb01 f303 	mul.w	r3, r1, r3
 8016372:	441a      	add	r2, r3
 8016374:	68fb      	ldr	r3, [r7, #12]
 8016376:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8016378:	68fb      	ldr	r3, [r7, #12]
 801637a:	2200      	movs	r2, #0
 801637c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801637e:	68fb      	ldr	r3, [r7, #12]
 8016380:	681a      	ldr	r2, [r3, #0]
 8016382:	68fb      	ldr	r3, [r7, #12]
 8016384:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016386:	68fb      	ldr	r3, [r7, #12]
 8016388:	681a      	ldr	r2, [r3, #0]
 801638a:	68fb      	ldr	r3, [r7, #12]
 801638c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801638e:	3b01      	subs	r3, #1
 8016390:	68f9      	ldr	r1, [r7, #12]
 8016392:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8016394:	fb01 f303 	mul.w	r3, r1, r3
 8016398:	441a      	add	r2, r3
 801639a:	68fb      	ldr	r3, [r7, #12]
 801639c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801639e:	68fb      	ldr	r3, [r7, #12]
 80163a0:	22ff      	movs	r2, #255	; 0xff
 80163a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80163a6:	68fb      	ldr	r3, [r7, #12]
 80163a8:	22ff      	movs	r2, #255	; 0xff
 80163aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80163ae:	683b      	ldr	r3, [r7, #0]
 80163b0:	2b00      	cmp	r3, #0
 80163b2:	d114      	bne.n	80163de <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80163b4:	68fb      	ldr	r3, [r7, #12]
 80163b6:	691b      	ldr	r3, [r3, #16]
 80163b8:	2b00      	cmp	r3, #0
 80163ba:	d01a      	beq.n	80163f2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80163bc:	68fb      	ldr	r3, [r7, #12]
 80163be:	3310      	adds	r3, #16
 80163c0:	4618      	mov	r0, r3
 80163c2:	f001 fdb3 	bl	8017f2c <xTaskRemoveFromEventList>
 80163c6:	4603      	mov	r3, r0
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d012      	beq.n	80163f2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80163cc:	4b0c      	ldr	r3, [pc, #48]	; (8016400 <xQueueGenericReset+0xcc>)
 80163ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80163d2:	601a      	str	r2, [r3, #0]
 80163d4:	f3bf 8f4f 	dsb	sy
 80163d8:	f3bf 8f6f 	isb	sy
 80163dc:	e009      	b.n	80163f2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80163de:	68fb      	ldr	r3, [r7, #12]
 80163e0:	3310      	adds	r3, #16
 80163e2:	4618      	mov	r0, r3
 80163e4:	f7ff fef2 	bl	80161cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80163e8:	68fb      	ldr	r3, [r7, #12]
 80163ea:	3324      	adds	r3, #36	; 0x24
 80163ec:	4618      	mov	r0, r3
 80163ee:	f7ff feed 	bl	80161cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80163f2:	f002 fdf7 	bl	8018fe4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80163f6:	2301      	movs	r3, #1
}
 80163f8:	4618      	mov	r0, r3
 80163fa:	3710      	adds	r7, #16
 80163fc:	46bd      	mov	sp, r7
 80163fe:	bd80      	pop	{r7, pc}
 8016400:	e000ed04 	.word	0xe000ed04

08016404 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8016404:	b580      	push	{r7, lr}
 8016406:	b08e      	sub	sp, #56	; 0x38
 8016408:	af02      	add	r7, sp, #8
 801640a:	60f8      	str	r0, [r7, #12]
 801640c:	60b9      	str	r1, [r7, #8]
 801640e:	607a      	str	r2, [r7, #4]
 8016410:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016412:	68fb      	ldr	r3, [r7, #12]
 8016414:	2b00      	cmp	r3, #0
 8016416:	d10a      	bne.n	801642e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8016418:	f04f 0350 	mov.w	r3, #80	; 0x50
 801641c:	f383 8811 	msr	BASEPRI, r3
 8016420:	f3bf 8f6f 	isb	sy
 8016424:	f3bf 8f4f 	dsb	sy
 8016428:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801642a:	bf00      	nop
 801642c:	e7fe      	b.n	801642c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801642e:	683b      	ldr	r3, [r7, #0]
 8016430:	2b00      	cmp	r3, #0
 8016432:	d10a      	bne.n	801644a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8016434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016438:	f383 8811 	msr	BASEPRI, r3
 801643c:	f3bf 8f6f 	isb	sy
 8016440:	f3bf 8f4f 	dsb	sy
 8016444:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016446:	bf00      	nop
 8016448:	e7fe      	b.n	8016448 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	2b00      	cmp	r3, #0
 801644e:	d002      	beq.n	8016456 <xQueueGenericCreateStatic+0x52>
 8016450:	68bb      	ldr	r3, [r7, #8]
 8016452:	2b00      	cmp	r3, #0
 8016454:	d001      	beq.n	801645a <xQueueGenericCreateStatic+0x56>
 8016456:	2301      	movs	r3, #1
 8016458:	e000      	b.n	801645c <xQueueGenericCreateStatic+0x58>
 801645a:	2300      	movs	r3, #0
 801645c:	2b00      	cmp	r3, #0
 801645e:	d10a      	bne.n	8016476 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8016460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016464:	f383 8811 	msr	BASEPRI, r3
 8016468:	f3bf 8f6f 	isb	sy
 801646c:	f3bf 8f4f 	dsb	sy
 8016470:	623b      	str	r3, [r7, #32]
}
 8016472:	bf00      	nop
 8016474:	e7fe      	b.n	8016474 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	2b00      	cmp	r3, #0
 801647a:	d102      	bne.n	8016482 <xQueueGenericCreateStatic+0x7e>
 801647c:	68bb      	ldr	r3, [r7, #8]
 801647e:	2b00      	cmp	r3, #0
 8016480:	d101      	bne.n	8016486 <xQueueGenericCreateStatic+0x82>
 8016482:	2301      	movs	r3, #1
 8016484:	e000      	b.n	8016488 <xQueueGenericCreateStatic+0x84>
 8016486:	2300      	movs	r3, #0
 8016488:	2b00      	cmp	r3, #0
 801648a:	d10a      	bne.n	80164a2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 801648c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016490:	f383 8811 	msr	BASEPRI, r3
 8016494:	f3bf 8f6f 	isb	sy
 8016498:	f3bf 8f4f 	dsb	sy
 801649c:	61fb      	str	r3, [r7, #28]
}
 801649e:	bf00      	nop
 80164a0:	e7fe      	b.n	80164a0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80164a2:	2350      	movs	r3, #80	; 0x50
 80164a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80164a6:	697b      	ldr	r3, [r7, #20]
 80164a8:	2b50      	cmp	r3, #80	; 0x50
 80164aa:	d00a      	beq.n	80164c2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80164ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164b0:	f383 8811 	msr	BASEPRI, r3
 80164b4:	f3bf 8f6f 	isb	sy
 80164b8:	f3bf 8f4f 	dsb	sy
 80164bc:	61bb      	str	r3, [r7, #24]
}
 80164be:	bf00      	nop
 80164c0:	e7fe      	b.n	80164c0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80164c2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80164c4:	683b      	ldr	r3, [r7, #0]
 80164c6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80164c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	d00d      	beq.n	80164ea <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80164ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164d0:	2201      	movs	r2, #1
 80164d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80164d6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80164da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164dc:	9300      	str	r3, [sp, #0]
 80164de:	4613      	mov	r3, r2
 80164e0:	687a      	ldr	r2, [r7, #4]
 80164e2:	68b9      	ldr	r1, [r7, #8]
 80164e4:	68f8      	ldr	r0, [r7, #12]
 80164e6:	f000 f83f 	bl	8016568 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80164ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80164ec:	4618      	mov	r0, r3
 80164ee:	3730      	adds	r7, #48	; 0x30
 80164f0:	46bd      	mov	sp, r7
 80164f2:	bd80      	pop	{r7, pc}

080164f4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80164f4:	b580      	push	{r7, lr}
 80164f6:	b08a      	sub	sp, #40	; 0x28
 80164f8:	af02      	add	r7, sp, #8
 80164fa:	60f8      	str	r0, [r7, #12]
 80164fc:	60b9      	str	r1, [r7, #8]
 80164fe:	4613      	mov	r3, r2
 8016500:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016502:	68fb      	ldr	r3, [r7, #12]
 8016504:	2b00      	cmp	r3, #0
 8016506:	d10a      	bne.n	801651e <xQueueGenericCreate+0x2a>
	__asm volatile
 8016508:	f04f 0350 	mov.w	r3, #80	; 0x50
 801650c:	f383 8811 	msr	BASEPRI, r3
 8016510:	f3bf 8f6f 	isb	sy
 8016514:	f3bf 8f4f 	dsb	sy
 8016518:	613b      	str	r3, [r7, #16]
}
 801651a:	bf00      	nop
 801651c:	e7fe      	b.n	801651c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801651e:	68fb      	ldr	r3, [r7, #12]
 8016520:	68ba      	ldr	r2, [r7, #8]
 8016522:	fb02 f303 	mul.w	r3, r2, r3
 8016526:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8016528:	69fb      	ldr	r3, [r7, #28]
 801652a:	3350      	adds	r3, #80	; 0x50
 801652c:	4618      	mov	r0, r3
 801652e:	f002 fe4b 	bl	80191c8 <pvPortMalloc>
 8016532:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8016534:	69bb      	ldr	r3, [r7, #24]
 8016536:	2b00      	cmp	r3, #0
 8016538:	d011      	beq.n	801655e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801653a:	69bb      	ldr	r3, [r7, #24]
 801653c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801653e:	697b      	ldr	r3, [r7, #20]
 8016540:	3350      	adds	r3, #80	; 0x50
 8016542:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8016544:	69bb      	ldr	r3, [r7, #24]
 8016546:	2200      	movs	r2, #0
 8016548:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801654c:	79fa      	ldrb	r2, [r7, #7]
 801654e:	69bb      	ldr	r3, [r7, #24]
 8016550:	9300      	str	r3, [sp, #0]
 8016552:	4613      	mov	r3, r2
 8016554:	697a      	ldr	r2, [r7, #20]
 8016556:	68b9      	ldr	r1, [r7, #8]
 8016558:	68f8      	ldr	r0, [r7, #12]
 801655a:	f000 f805 	bl	8016568 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801655e:	69bb      	ldr	r3, [r7, #24]
	}
 8016560:	4618      	mov	r0, r3
 8016562:	3720      	adds	r7, #32
 8016564:	46bd      	mov	sp, r7
 8016566:	bd80      	pop	{r7, pc}

08016568 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8016568:	b580      	push	{r7, lr}
 801656a:	b084      	sub	sp, #16
 801656c:	af00      	add	r7, sp, #0
 801656e:	60f8      	str	r0, [r7, #12]
 8016570:	60b9      	str	r1, [r7, #8]
 8016572:	607a      	str	r2, [r7, #4]
 8016574:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8016576:	68bb      	ldr	r3, [r7, #8]
 8016578:	2b00      	cmp	r3, #0
 801657a:	d103      	bne.n	8016584 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801657c:	69bb      	ldr	r3, [r7, #24]
 801657e:	69ba      	ldr	r2, [r7, #24]
 8016580:	601a      	str	r2, [r3, #0]
 8016582:	e002      	b.n	801658a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8016584:	69bb      	ldr	r3, [r7, #24]
 8016586:	687a      	ldr	r2, [r7, #4]
 8016588:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801658a:	69bb      	ldr	r3, [r7, #24]
 801658c:	68fa      	ldr	r2, [r7, #12]
 801658e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8016590:	69bb      	ldr	r3, [r7, #24]
 8016592:	68ba      	ldr	r2, [r7, #8]
 8016594:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8016596:	2101      	movs	r1, #1
 8016598:	69b8      	ldr	r0, [r7, #24]
 801659a:	f7ff fecb 	bl	8016334 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801659e:	69bb      	ldr	r3, [r7, #24]
 80165a0:	78fa      	ldrb	r2, [r7, #3]
 80165a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80165a6:	bf00      	nop
 80165a8:	3710      	adds	r7, #16
 80165aa:	46bd      	mov	sp, r7
 80165ac:	bd80      	pop	{r7, pc}

080165ae <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80165ae:	b580      	push	{r7, lr}
 80165b0:	b08a      	sub	sp, #40	; 0x28
 80165b2:	af02      	add	r7, sp, #8
 80165b4:	60f8      	str	r0, [r7, #12]
 80165b6:	60b9      	str	r1, [r7, #8]
 80165b8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80165ba:	68fb      	ldr	r3, [r7, #12]
 80165bc:	2b00      	cmp	r3, #0
 80165be:	d10a      	bne.n	80165d6 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80165c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165c4:	f383 8811 	msr	BASEPRI, r3
 80165c8:	f3bf 8f6f 	isb	sy
 80165cc:	f3bf 8f4f 	dsb	sy
 80165d0:	61bb      	str	r3, [r7, #24]
}
 80165d2:	bf00      	nop
 80165d4:	e7fe      	b.n	80165d4 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80165d6:	68ba      	ldr	r2, [r7, #8]
 80165d8:	68fb      	ldr	r3, [r7, #12]
 80165da:	429a      	cmp	r2, r3
 80165dc:	d90a      	bls.n	80165f4 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80165de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165e2:	f383 8811 	msr	BASEPRI, r3
 80165e6:	f3bf 8f6f 	isb	sy
 80165ea:	f3bf 8f4f 	dsb	sy
 80165ee:	617b      	str	r3, [r7, #20]
}
 80165f0:	bf00      	nop
 80165f2:	e7fe      	b.n	80165f2 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80165f4:	2302      	movs	r3, #2
 80165f6:	9300      	str	r3, [sp, #0]
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	2200      	movs	r2, #0
 80165fc:	2100      	movs	r1, #0
 80165fe:	68f8      	ldr	r0, [r7, #12]
 8016600:	f7ff ff00 	bl	8016404 <xQueueGenericCreateStatic>
 8016604:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8016606:	69fb      	ldr	r3, [r7, #28]
 8016608:	2b00      	cmp	r3, #0
 801660a:	d002      	beq.n	8016612 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801660c:	69fb      	ldr	r3, [r7, #28]
 801660e:	68ba      	ldr	r2, [r7, #8]
 8016610:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8016612:	69fb      	ldr	r3, [r7, #28]
	}
 8016614:	4618      	mov	r0, r3
 8016616:	3720      	adds	r7, #32
 8016618:	46bd      	mov	sp, r7
 801661a:	bd80      	pop	{r7, pc}

0801661c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 801661c:	b580      	push	{r7, lr}
 801661e:	b086      	sub	sp, #24
 8016620:	af00      	add	r7, sp, #0
 8016622:	6078      	str	r0, [r7, #4]
 8016624:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	2b00      	cmp	r3, #0
 801662a:	d10a      	bne.n	8016642 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 801662c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016630:	f383 8811 	msr	BASEPRI, r3
 8016634:	f3bf 8f6f 	isb	sy
 8016638:	f3bf 8f4f 	dsb	sy
 801663c:	613b      	str	r3, [r7, #16]
}
 801663e:	bf00      	nop
 8016640:	e7fe      	b.n	8016640 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8016642:	683a      	ldr	r2, [r7, #0]
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	429a      	cmp	r2, r3
 8016648:	d90a      	bls.n	8016660 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 801664a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801664e:	f383 8811 	msr	BASEPRI, r3
 8016652:	f3bf 8f6f 	isb	sy
 8016656:	f3bf 8f4f 	dsb	sy
 801665a:	60fb      	str	r3, [r7, #12]
}
 801665c:	bf00      	nop
 801665e:	e7fe      	b.n	801665e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8016660:	2202      	movs	r2, #2
 8016662:	2100      	movs	r1, #0
 8016664:	6878      	ldr	r0, [r7, #4]
 8016666:	f7ff ff45 	bl	80164f4 <xQueueGenericCreate>
 801666a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 801666c:	697b      	ldr	r3, [r7, #20]
 801666e:	2b00      	cmp	r3, #0
 8016670:	d002      	beq.n	8016678 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8016672:	697b      	ldr	r3, [r7, #20]
 8016674:	683a      	ldr	r2, [r7, #0]
 8016676:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8016678:	697b      	ldr	r3, [r7, #20]
	}
 801667a:	4618      	mov	r0, r3
 801667c:	3718      	adds	r7, #24
 801667e:	46bd      	mov	sp, r7
 8016680:	bd80      	pop	{r7, pc}
	...

08016684 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8016684:	b580      	push	{r7, lr}
 8016686:	b08e      	sub	sp, #56	; 0x38
 8016688:	af00      	add	r7, sp, #0
 801668a:	60f8      	str	r0, [r7, #12]
 801668c:	60b9      	str	r1, [r7, #8]
 801668e:	607a      	str	r2, [r7, #4]
 8016690:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8016692:	2300      	movs	r3, #0
 8016694:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016696:	68fb      	ldr	r3, [r7, #12]
 8016698:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801669a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801669c:	2b00      	cmp	r3, #0
 801669e:	d10a      	bne.n	80166b6 <xQueueGenericSend+0x32>
	__asm volatile
 80166a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166a4:	f383 8811 	msr	BASEPRI, r3
 80166a8:	f3bf 8f6f 	isb	sy
 80166ac:	f3bf 8f4f 	dsb	sy
 80166b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80166b2:	bf00      	nop
 80166b4:	e7fe      	b.n	80166b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80166b6:	68bb      	ldr	r3, [r7, #8]
 80166b8:	2b00      	cmp	r3, #0
 80166ba:	d103      	bne.n	80166c4 <xQueueGenericSend+0x40>
 80166bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80166c0:	2b00      	cmp	r3, #0
 80166c2:	d101      	bne.n	80166c8 <xQueueGenericSend+0x44>
 80166c4:	2301      	movs	r3, #1
 80166c6:	e000      	b.n	80166ca <xQueueGenericSend+0x46>
 80166c8:	2300      	movs	r3, #0
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	d10a      	bne.n	80166e4 <xQueueGenericSend+0x60>
	__asm volatile
 80166ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166d2:	f383 8811 	msr	BASEPRI, r3
 80166d6:	f3bf 8f6f 	isb	sy
 80166da:	f3bf 8f4f 	dsb	sy
 80166de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80166e0:	bf00      	nop
 80166e2:	e7fe      	b.n	80166e2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80166e4:	683b      	ldr	r3, [r7, #0]
 80166e6:	2b02      	cmp	r3, #2
 80166e8:	d103      	bne.n	80166f2 <xQueueGenericSend+0x6e>
 80166ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80166ee:	2b01      	cmp	r3, #1
 80166f0:	d101      	bne.n	80166f6 <xQueueGenericSend+0x72>
 80166f2:	2301      	movs	r3, #1
 80166f4:	e000      	b.n	80166f8 <xQueueGenericSend+0x74>
 80166f6:	2300      	movs	r3, #0
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	d10a      	bne.n	8016712 <xQueueGenericSend+0x8e>
	__asm volatile
 80166fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016700:	f383 8811 	msr	BASEPRI, r3
 8016704:	f3bf 8f6f 	isb	sy
 8016708:	f3bf 8f4f 	dsb	sy
 801670c:	623b      	str	r3, [r7, #32]
}
 801670e:	bf00      	nop
 8016710:	e7fe      	b.n	8016710 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016712:	f001 fddd 	bl	80182d0 <xTaskGetSchedulerState>
 8016716:	4603      	mov	r3, r0
 8016718:	2b00      	cmp	r3, #0
 801671a:	d102      	bne.n	8016722 <xQueueGenericSend+0x9e>
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	2b00      	cmp	r3, #0
 8016720:	d101      	bne.n	8016726 <xQueueGenericSend+0xa2>
 8016722:	2301      	movs	r3, #1
 8016724:	e000      	b.n	8016728 <xQueueGenericSend+0xa4>
 8016726:	2300      	movs	r3, #0
 8016728:	2b00      	cmp	r3, #0
 801672a:	d10a      	bne.n	8016742 <xQueueGenericSend+0xbe>
	__asm volatile
 801672c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016730:	f383 8811 	msr	BASEPRI, r3
 8016734:	f3bf 8f6f 	isb	sy
 8016738:	f3bf 8f4f 	dsb	sy
 801673c:	61fb      	str	r3, [r7, #28]
}
 801673e:	bf00      	nop
 8016740:	e7fe      	b.n	8016740 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016742:	f002 fc1f 	bl	8018f84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016748:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801674a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801674c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801674e:	429a      	cmp	r2, r3
 8016750:	d302      	bcc.n	8016758 <xQueueGenericSend+0xd4>
 8016752:	683b      	ldr	r3, [r7, #0]
 8016754:	2b02      	cmp	r3, #2
 8016756:	d129      	bne.n	80167ac <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016758:	683a      	ldr	r2, [r7, #0]
 801675a:	68b9      	ldr	r1, [r7, #8]
 801675c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801675e:	f000 fc5e 	bl	801701e <prvCopyDataToQueue>
 8016762:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016768:	2b00      	cmp	r3, #0
 801676a:	d010      	beq.n	801678e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801676c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801676e:	3324      	adds	r3, #36	; 0x24
 8016770:	4618      	mov	r0, r3
 8016772:	f001 fbdb 	bl	8017f2c <xTaskRemoveFromEventList>
 8016776:	4603      	mov	r3, r0
 8016778:	2b00      	cmp	r3, #0
 801677a:	d013      	beq.n	80167a4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801677c:	4b3f      	ldr	r3, [pc, #252]	; (801687c <xQueueGenericSend+0x1f8>)
 801677e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016782:	601a      	str	r2, [r3, #0]
 8016784:	f3bf 8f4f 	dsb	sy
 8016788:	f3bf 8f6f 	isb	sy
 801678c:	e00a      	b.n	80167a4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801678e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016790:	2b00      	cmp	r3, #0
 8016792:	d007      	beq.n	80167a4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8016794:	4b39      	ldr	r3, [pc, #228]	; (801687c <xQueueGenericSend+0x1f8>)
 8016796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801679a:	601a      	str	r2, [r3, #0]
 801679c:	f3bf 8f4f 	dsb	sy
 80167a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80167a4:	f002 fc1e 	bl	8018fe4 <vPortExitCritical>
				return pdPASS;
 80167a8:	2301      	movs	r3, #1
 80167aa:	e063      	b.n	8016874 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	2b00      	cmp	r3, #0
 80167b0:	d103      	bne.n	80167ba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80167b2:	f002 fc17 	bl	8018fe4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80167b6:	2300      	movs	r3, #0
 80167b8:	e05c      	b.n	8016874 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80167ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80167bc:	2b00      	cmp	r3, #0
 80167be:	d106      	bne.n	80167ce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80167c0:	f107 0314 	add.w	r3, r7, #20
 80167c4:	4618      	mov	r0, r3
 80167c6:	f001 fc15 	bl	8017ff4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80167ca:	2301      	movs	r3, #1
 80167cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80167ce:	f002 fc09 	bl	8018fe4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80167d2:	f001 f981 	bl	8017ad8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80167d6:	f002 fbd5 	bl	8018f84 <vPortEnterCritical>
 80167da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80167e0:	b25b      	sxtb	r3, r3
 80167e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80167e6:	d103      	bne.n	80167f0 <xQueueGenericSend+0x16c>
 80167e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167ea:	2200      	movs	r2, #0
 80167ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80167f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80167f6:	b25b      	sxtb	r3, r3
 80167f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80167fc:	d103      	bne.n	8016806 <xQueueGenericSend+0x182>
 80167fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016800:	2200      	movs	r2, #0
 8016802:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016806:	f002 fbed 	bl	8018fe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801680a:	1d3a      	adds	r2, r7, #4
 801680c:	f107 0314 	add.w	r3, r7, #20
 8016810:	4611      	mov	r1, r2
 8016812:	4618      	mov	r0, r3
 8016814:	f001 fc04 	bl	8018020 <xTaskCheckForTimeOut>
 8016818:	4603      	mov	r3, r0
 801681a:	2b00      	cmp	r3, #0
 801681c:	d124      	bne.n	8016868 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801681e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016820:	f000 fcf5 	bl	801720e <prvIsQueueFull>
 8016824:	4603      	mov	r3, r0
 8016826:	2b00      	cmp	r3, #0
 8016828:	d018      	beq.n	801685c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801682a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801682c:	3310      	adds	r3, #16
 801682e:	687a      	ldr	r2, [r7, #4]
 8016830:	4611      	mov	r1, r2
 8016832:	4618      	mov	r0, r3
 8016834:	f001 fb2a 	bl	8017e8c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8016838:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801683a:	f000 fc80 	bl	801713e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801683e:	f001 f959 	bl	8017af4 <xTaskResumeAll>
 8016842:	4603      	mov	r3, r0
 8016844:	2b00      	cmp	r3, #0
 8016846:	f47f af7c 	bne.w	8016742 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801684a:	4b0c      	ldr	r3, [pc, #48]	; (801687c <xQueueGenericSend+0x1f8>)
 801684c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016850:	601a      	str	r2, [r3, #0]
 8016852:	f3bf 8f4f 	dsb	sy
 8016856:	f3bf 8f6f 	isb	sy
 801685a:	e772      	b.n	8016742 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801685c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801685e:	f000 fc6e 	bl	801713e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016862:	f001 f947 	bl	8017af4 <xTaskResumeAll>
 8016866:	e76c      	b.n	8016742 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8016868:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801686a:	f000 fc68 	bl	801713e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801686e:	f001 f941 	bl	8017af4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8016872:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8016874:	4618      	mov	r0, r3
 8016876:	3738      	adds	r7, #56	; 0x38
 8016878:	46bd      	mov	sp, r7
 801687a:	bd80      	pop	{r7, pc}
 801687c:	e000ed04 	.word	0xe000ed04

08016880 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8016880:	b580      	push	{r7, lr}
 8016882:	b090      	sub	sp, #64	; 0x40
 8016884:	af00      	add	r7, sp, #0
 8016886:	60f8      	str	r0, [r7, #12]
 8016888:	60b9      	str	r1, [r7, #8]
 801688a:	607a      	str	r2, [r7, #4]
 801688c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801688e:	68fb      	ldr	r3, [r7, #12]
 8016890:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8016892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016894:	2b00      	cmp	r3, #0
 8016896:	d10a      	bne.n	80168ae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8016898:	f04f 0350 	mov.w	r3, #80	; 0x50
 801689c:	f383 8811 	msr	BASEPRI, r3
 80168a0:	f3bf 8f6f 	isb	sy
 80168a4:	f3bf 8f4f 	dsb	sy
 80168a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80168aa:	bf00      	nop
 80168ac:	e7fe      	b.n	80168ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80168ae:	68bb      	ldr	r3, [r7, #8]
 80168b0:	2b00      	cmp	r3, #0
 80168b2:	d103      	bne.n	80168bc <xQueueGenericSendFromISR+0x3c>
 80168b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	d101      	bne.n	80168c0 <xQueueGenericSendFromISR+0x40>
 80168bc:	2301      	movs	r3, #1
 80168be:	e000      	b.n	80168c2 <xQueueGenericSendFromISR+0x42>
 80168c0:	2300      	movs	r3, #0
 80168c2:	2b00      	cmp	r3, #0
 80168c4:	d10a      	bne.n	80168dc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80168c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168ca:	f383 8811 	msr	BASEPRI, r3
 80168ce:	f3bf 8f6f 	isb	sy
 80168d2:	f3bf 8f4f 	dsb	sy
 80168d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80168d8:	bf00      	nop
 80168da:	e7fe      	b.n	80168da <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80168dc:	683b      	ldr	r3, [r7, #0]
 80168de:	2b02      	cmp	r3, #2
 80168e0:	d103      	bne.n	80168ea <xQueueGenericSendFromISR+0x6a>
 80168e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80168e6:	2b01      	cmp	r3, #1
 80168e8:	d101      	bne.n	80168ee <xQueueGenericSendFromISR+0x6e>
 80168ea:	2301      	movs	r3, #1
 80168ec:	e000      	b.n	80168f0 <xQueueGenericSendFromISR+0x70>
 80168ee:	2300      	movs	r3, #0
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	d10a      	bne.n	801690a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80168f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168f8:	f383 8811 	msr	BASEPRI, r3
 80168fc:	f3bf 8f6f 	isb	sy
 8016900:	f3bf 8f4f 	dsb	sy
 8016904:	623b      	str	r3, [r7, #32]
}
 8016906:	bf00      	nop
 8016908:	e7fe      	b.n	8016908 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801690a:	f002 fc1d 	bl	8019148 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801690e:	f3ef 8211 	mrs	r2, BASEPRI
 8016912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016916:	f383 8811 	msr	BASEPRI, r3
 801691a:	f3bf 8f6f 	isb	sy
 801691e:	f3bf 8f4f 	dsb	sy
 8016922:	61fa      	str	r2, [r7, #28]
 8016924:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8016926:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016928:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801692a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801692c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801692e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016932:	429a      	cmp	r2, r3
 8016934:	d302      	bcc.n	801693c <xQueueGenericSendFromISR+0xbc>
 8016936:	683b      	ldr	r3, [r7, #0]
 8016938:	2b02      	cmp	r3, #2
 801693a:	d12f      	bne.n	801699c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801693c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801693e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801694a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801694c:	683a      	ldr	r2, [r7, #0]
 801694e:	68b9      	ldr	r1, [r7, #8]
 8016950:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016952:	f000 fb64 	bl	801701e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8016956:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801695a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801695e:	d112      	bne.n	8016986 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016964:	2b00      	cmp	r3, #0
 8016966:	d016      	beq.n	8016996 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801696a:	3324      	adds	r3, #36	; 0x24
 801696c:	4618      	mov	r0, r3
 801696e:	f001 fadd 	bl	8017f2c <xTaskRemoveFromEventList>
 8016972:	4603      	mov	r3, r0
 8016974:	2b00      	cmp	r3, #0
 8016976:	d00e      	beq.n	8016996 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	2b00      	cmp	r3, #0
 801697c:	d00b      	beq.n	8016996 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	2201      	movs	r2, #1
 8016982:	601a      	str	r2, [r3, #0]
 8016984:	e007      	b.n	8016996 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016986:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801698a:	3301      	adds	r3, #1
 801698c:	b2db      	uxtb	r3, r3
 801698e:	b25a      	sxtb	r2, r3
 8016990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016992:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8016996:	2301      	movs	r3, #1
 8016998:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801699a:	e001      	b.n	80169a0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801699c:	2300      	movs	r3, #0
 801699e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80169a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80169a2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80169a4:	697b      	ldr	r3, [r7, #20]
 80169a6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80169aa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80169ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80169ae:	4618      	mov	r0, r3
 80169b0:	3740      	adds	r7, #64	; 0x40
 80169b2:	46bd      	mov	sp, r7
 80169b4:	bd80      	pop	{r7, pc}

080169b6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80169b6:	b580      	push	{r7, lr}
 80169b8:	b08e      	sub	sp, #56	; 0x38
 80169ba:	af00      	add	r7, sp, #0
 80169bc:	6078      	str	r0, [r7, #4]
 80169be:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80169c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	d10a      	bne.n	80169e0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80169ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169ce:	f383 8811 	msr	BASEPRI, r3
 80169d2:	f3bf 8f6f 	isb	sy
 80169d6:	f3bf 8f4f 	dsb	sy
 80169da:	623b      	str	r3, [r7, #32]
}
 80169dc:	bf00      	nop
 80169de:	e7fe      	b.n	80169de <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80169e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80169e4:	2b00      	cmp	r3, #0
 80169e6:	d00a      	beq.n	80169fe <xQueueGiveFromISR+0x48>
	__asm volatile
 80169e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169ec:	f383 8811 	msr	BASEPRI, r3
 80169f0:	f3bf 8f6f 	isb	sy
 80169f4:	f3bf 8f4f 	dsb	sy
 80169f8:	61fb      	str	r3, [r7, #28]
}
 80169fa:	bf00      	nop
 80169fc:	e7fe      	b.n	80169fc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80169fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a00:	681b      	ldr	r3, [r3, #0]
 8016a02:	2b00      	cmp	r3, #0
 8016a04:	d103      	bne.n	8016a0e <xQueueGiveFromISR+0x58>
 8016a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a08:	689b      	ldr	r3, [r3, #8]
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	d101      	bne.n	8016a12 <xQueueGiveFromISR+0x5c>
 8016a0e:	2301      	movs	r3, #1
 8016a10:	e000      	b.n	8016a14 <xQueueGiveFromISR+0x5e>
 8016a12:	2300      	movs	r3, #0
 8016a14:	2b00      	cmp	r3, #0
 8016a16:	d10a      	bne.n	8016a2e <xQueueGiveFromISR+0x78>
	__asm volatile
 8016a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a1c:	f383 8811 	msr	BASEPRI, r3
 8016a20:	f3bf 8f6f 	isb	sy
 8016a24:	f3bf 8f4f 	dsb	sy
 8016a28:	61bb      	str	r3, [r7, #24]
}
 8016a2a:	bf00      	nop
 8016a2c:	e7fe      	b.n	8016a2c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016a2e:	f002 fb8b 	bl	8019148 <vPortValidateInterruptPriority>
	__asm volatile
 8016a32:	f3ef 8211 	mrs	r2, BASEPRI
 8016a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a3a:	f383 8811 	msr	BASEPRI, r3
 8016a3e:	f3bf 8f6f 	isb	sy
 8016a42:	f3bf 8f4f 	dsb	sy
 8016a46:	617a      	str	r2, [r7, #20]
 8016a48:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8016a4a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016a52:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8016a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016a58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016a5a:	429a      	cmp	r2, r3
 8016a5c:	d22b      	bcs.n	8016ab6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8016a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016a64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a6a:	1c5a      	adds	r2, r3, #1
 8016a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a6e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8016a70:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a78:	d112      	bne.n	8016aa0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	d016      	beq.n	8016ab0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a84:	3324      	adds	r3, #36	; 0x24
 8016a86:	4618      	mov	r0, r3
 8016a88:	f001 fa50 	bl	8017f2c <xTaskRemoveFromEventList>
 8016a8c:	4603      	mov	r3, r0
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d00e      	beq.n	8016ab0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8016a92:	683b      	ldr	r3, [r7, #0]
 8016a94:	2b00      	cmp	r3, #0
 8016a96:	d00b      	beq.n	8016ab0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8016a98:	683b      	ldr	r3, [r7, #0]
 8016a9a:	2201      	movs	r2, #1
 8016a9c:	601a      	str	r2, [r3, #0]
 8016a9e:	e007      	b.n	8016ab0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016aa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016aa4:	3301      	adds	r3, #1
 8016aa6:	b2db      	uxtb	r3, r3
 8016aa8:	b25a      	sxtb	r2, r3
 8016aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016aac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8016ab0:	2301      	movs	r3, #1
 8016ab2:	637b      	str	r3, [r7, #52]	; 0x34
 8016ab4:	e001      	b.n	8016aba <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8016ab6:	2300      	movs	r3, #0
 8016ab8:	637b      	str	r3, [r7, #52]	; 0x34
 8016aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016abc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8016abe:	68fb      	ldr	r3, [r7, #12]
 8016ac0:	f383 8811 	msr	BASEPRI, r3
}
 8016ac4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8016ac8:	4618      	mov	r0, r3
 8016aca:	3738      	adds	r7, #56	; 0x38
 8016acc:	46bd      	mov	sp, r7
 8016ace:	bd80      	pop	{r7, pc}

08016ad0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8016ad0:	b580      	push	{r7, lr}
 8016ad2:	b08c      	sub	sp, #48	; 0x30
 8016ad4:	af00      	add	r7, sp, #0
 8016ad6:	60f8      	str	r0, [r7, #12]
 8016ad8:	60b9      	str	r1, [r7, #8]
 8016ada:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8016adc:	2300      	movs	r3, #0
 8016ade:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016ae0:	68fb      	ldr	r3, [r7, #12]
 8016ae2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8016ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ae6:	2b00      	cmp	r3, #0
 8016ae8:	d10a      	bne.n	8016b00 <xQueueReceive+0x30>
	__asm volatile
 8016aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016aee:	f383 8811 	msr	BASEPRI, r3
 8016af2:	f3bf 8f6f 	isb	sy
 8016af6:	f3bf 8f4f 	dsb	sy
 8016afa:	623b      	str	r3, [r7, #32]
}
 8016afc:	bf00      	nop
 8016afe:	e7fe      	b.n	8016afe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016b00:	68bb      	ldr	r3, [r7, #8]
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	d103      	bne.n	8016b0e <xQueueReceive+0x3e>
 8016b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d101      	bne.n	8016b12 <xQueueReceive+0x42>
 8016b0e:	2301      	movs	r3, #1
 8016b10:	e000      	b.n	8016b14 <xQueueReceive+0x44>
 8016b12:	2300      	movs	r3, #0
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	d10a      	bne.n	8016b2e <xQueueReceive+0x5e>
	__asm volatile
 8016b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b1c:	f383 8811 	msr	BASEPRI, r3
 8016b20:	f3bf 8f6f 	isb	sy
 8016b24:	f3bf 8f4f 	dsb	sy
 8016b28:	61fb      	str	r3, [r7, #28]
}
 8016b2a:	bf00      	nop
 8016b2c:	e7fe      	b.n	8016b2c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016b2e:	f001 fbcf 	bl	80182d0 <xTaskGetSchedulerState>
 8016b32:	4603      	mov	r3, r0
 8016b34:	2b00      	cmp	r3, #0
 8016b36:	d102      	bne.n	8016b3e <xQueueReceive+0x6e>
 8016b38:	687b      	ldr	r3, [r7, #4]
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	d101      	bne.n	8016b42 <xQueueReceive+0x72>
 8016b3e:	2301      	movs	r3, #1
 8016b40:	e000      	b.n	8016b44 <xQueueReceive+0x74>
 8016b42:	2300      	movs	r3, #0
 8016b44:	2b00      	cmp	r3, #0
 8016b46:	d10a      	bne.n	8016b5e <xQueueReceive+0x8e>
	__asm volatile
 8016b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b4c:	f383 8811 	msr	BASEPRI, r3
 8016b50:	f3bf 8f6f 	isb	sy
 8016b54:	f3bf 8f4f 	dsb	sy
 8016b58:	61bb      	str	r3, [r7, #24]
}
 8016b5a:	bf00      	nop
 8016b5c:	e7fe      	b.n	8016b5c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016b5e:	f002 fa11 	bl	8018f84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016b66:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	d01f      	beq.n	8016bae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016b6e:	68b9      	ldr	r1, [r7, #8]
 8016b70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016b72:	f000 fabe 	bl	80170f2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8016b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b78:	1e5a      	subs	r2, r3, #1
 8016b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b7c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b80:	691b      	ldr	r3, [r3, #16]
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	d00f      	beq.n	8016ba6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b88:	3310      	adds	r3, #16
 8016b8a:	4618      	mov	r0, r3
 8016b8c:	f001 f9ce 	bl	8017f2c <xTaskRemoveFromEventList>
 8016b90:	4603      	mov	r3, r0
 8016b92:	2b00      	cmp	r3, #0
 8016b94:	d007      	beq.n	8016ba6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8016b96:	4b3d      	ldr	r3, [pc, #244]	; (8016c8c <xQueueReceive+0x1bc>)
 8016b98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016b9c:	601a      	str	r2, [r3, #0]
 8016b9e:	f3bf 8f4f 	dsb	sy
 8016ba2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8016ba6:	f002 fa1d 	bl	8018fe4 <vPortExitCritical>
				return pdPASS;
 8016baa:	2301      	movs	r3, #1
 8016bac:	e069      	b.n	8016c82 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	2b00      	cmp	r3, #0
 8016bb2:	d103      	bne.n	8016bbc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016bb4:	f002 fa16 	bl	8018fe4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8016bb8:	2300      	movs	r3, #0
 8016bba:	e062      	b.n	8016c82 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bbe:	2b00      	cmp	r3, #0
 8016bc0:	d106      	bne.n	8016bd0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016bc2:	f107 0310 	add.w	r3, r7, #16
 8016bc6:	4618      	mov	r0, r3
 8016bc8:	f001 fa14 	bl	8017ff4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016bcc:	2301      	movs	r3, #1
 8016bce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016bd0:	f002 fa08 	bl	8018fe4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016bd4:	f000 ff80 	bl	8017ad8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016bd8:	f002 f9d4 	bl	8018f84 <vPortEnterCritical>
 8016bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016be2:	b25b      	sxtb	r3, r3
 8016be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016be8:	d103      	bne.n	8016bf2 <xQueueReceive+0x122>
 8016bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bec:	2200      	movs	r2, #0
 8016bee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bf4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016bf8:	b25b      	sxtb	r3, r3
 8016bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016bfe:	d103      	bne.n	8016c08 <xQueueReceive+0x138>
 8016c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c02:	2200      	movs	r2, #0
 8016c04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016c08:	f002 f9ec 	bl	8018fe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016c0c:	1d3a      	adds	r2, r7, #4
 8016c0e:	f107 0310 	add.w	r3, r7, #16
 8016c12:	4611      	mov	r1, r2
 8016c14:	4618      	mov	r0, r3
 8016c16:	f001 fa03 	bl	8018020 <xTaskCheckForTimeOut>
 8016c1a:	4603      	mov	r3, r0
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	d123      	bne.n	8016c68 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016c20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016c22:	f000 fade 	bl	80171e2 <prvIsQueueEmpty>
 8016c26:	4603      	mov	r3, r0
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d017      	beq.n	8016c5c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c2e:	3324      	adds	r3, #36	; 0x24
 8016c30:	687a      	ldr	r2, [r7, #4]
 8016c32:	4611      	mov	r1, r2
 8016c34:	4618      	mov	r0, r3
 8016c36:	f001 f929 	bl	8017e8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016c3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016c3c:	f000 fa7f 	bl	801713e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016c40:	f000 ff58 	bl	8017af4 <xTaskResumeAll>
 8016c44:	4603      	mov	r3, r0
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	d189      	bne.n	8016b5e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8016c4a:	4b10      	ldr	r3, [pc, #64]	; (8016c8c <xQueueReceive+0x1bc>)
 8016c4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016c50:	601a      	str	r2, [r3, #0]
 8016c52:	f3bf 8f4f 	dsb	sy
 8016c56:	f3bf 8f6f 	isb	sy
 8016c5a:	e780      	b.n	8016b5e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8016c5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016c5e:	f000 fa6e 	bl	801713e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016c62:	f000 ff47 	bl	8017af4 <xTaskResumeAll>
 8016c66:	e77a      	b.n	8016b5e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8016c68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016c6a:	f000 fa68 	bl	801713e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016c6e:	f000 ff41 	bl	8017af4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016c72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016c74:	f000 fab5 	bl	80171e2 <prvIsQueueEmpty>
 8016c78:	4603      	mov	r3, r0
 8016c7a:	2b00      	cmp	r3, #0
 8016c7c:	f43f af6f 	beq.w	8016b5e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8016c80:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8016c82:	4618      	mov	r0, r3
 8016c84:	3730      	adds	r7, #48	; 0x30
 8016c86:	46bd      	mov	sp, r7
 8016c88:	bd80      	pop	{r7, pc}
 8016c8a:	bf00      	nop
 8016c8c:	e000ed04 	.word	0xe000ed04

08016c90 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8016c90:	b580      	push	{r7, lr}
 8016c92:	b08e      	sub	sp, #56	; 0x38
 8016c94:	af00      	add	r7, sp, #0
 8016c96:	6078      	str	r0, [r7, #4]
 8016c98:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8016c9a:	2300      	movs	r3, #0
 8016c9c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8016ca2:	2300      	movs	r3, #0
 8016ca4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8016ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	d10a      	bne.n	8016cc2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8016cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cb0:	f383 8811 	msr	BASEPRI, r3
 8016cb4:	f3bf 8f6f 	isb	sy
 8016cb8:	f3bf 8f4f 	dsb	sy
 8016cbc:	623b      	str	r3, [r7, #32]
}
 8016cbe:	bf00      	nop
 8016cc0:	e7fe      	b.n	8016cc0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8016cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016cc6:	2b00      	cmp	r3, #0
 8016cc8:	d00a      	beq.n	8016ce0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8016cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cce:	f383 8811 	msr	BASEPRI, r3
 8016cd2:	f3bf 8f6f 	isb	sy
 8016cd6:	f3bf 8f4f 	dsb	sy
 8016cda:	61fb      	str	r3, [r7, #28]
}
 8016cdc:	bf00      	nop
 8016cde:	e7fe      	b.n	8016cde <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016ce0:	f001 faf6 	bl	80182d0 <xTaskGetSchedulerState>
 8016ce4:	4603      	mov	r3, r0
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	d102      	bne.n	8016cf0 <xQueueSemaphoreTake+0x60>
 8016cea:	683b      	ldr	r3, [r7, #0]
 8016cec:	2b00      	cmp	r3, #0
 8016cee:	d101      	bne.n	8016cf4 <xQueueSemaphoreTake+0x64>
 8016cf0:	2301      	movs	r3, #1
 8016cf2:	e000      	b.n	8016cf6 <xQueueSemaphoreTake+0x66>
 8016cf4:	2300      	movs	r3, #0
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	d10a      	bne.n	8016d10 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8016cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cfe:	f383 8811 	msr	BASEPRI, r3
 8016d02:	f3bf 8f6f 	isb	sy
 8016d06:	f3bf 8f4f 	dsb	sy
 8016d0a:	61bb      	str	r3, [r7, #24]
}
 8016d0c:	bf00      	nop
 8016d0e:	e7fe      	b.n	8016d0e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016d10:	f002 f938 	bl	8018f84 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8016d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016d18:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8016d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d1c:	2b00      	cmp	r3, #0
 8016d1e:	d024      	beq.n	8016d6a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8016d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d22:	1e5a      	subs	r2, r3, #1
 8016d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d26:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d2a:	681b      	ldr	r3, [r3, #0]
 8016d2c:	2b00      	cmp	r3, #0
 8016d2e:	d104      	bne.n	8016d3a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8016d30:	f001 fc44 	bl	80185bc <pvTaskIncrementMutexHeldCount>
 8016d34:	4602      	mov	r2, r0
 8016d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d38:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d3c:	691b      	ldr	r3, [r3, #16]
 8016d3e:	2b00      	cmp	r3, #0
 8016d40:	d00f      	beq.n	8016d62 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d44:	3310      	adds	r3, #16
 8016d46:	4618      	mov	r0, r3
 8016d48:	f001 f8f0 	bl	8017f2c <xTaskRemoveFromEventList>
 8016d4c:	4603      	mov	r3, r0
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	d007      	beq.n	8016d62 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8016d52:	4b54      	ldr	r3, [pc, #336]	; (8016ea4 <xQueueSemaphoreTake+0x214>)
 8016d54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016d58:	601a      	str	r2, [r3, #0]
 8016d5a:	f3bf 8f4f 	dsb	sy
 8016d5e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8016d62:	f002 f93f 	bl	8018fe4 <vPortExitCritical>
				return pdPASS;
 8016d66:	2301      	movs	r3, #1
 8016d68:	e097      	b.n	8016e9a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016d6a:	683b      	ldr	r3, [r7, #0]
 8016d6c:	2b00      	cmp	r3, #0
 8016d6e:	d111      	bne.n	8016d94 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8016d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d72:	2b00      	cmp	r3, #0
 8016d74:	d00a      	beq.n	8016d8c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8016d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d7a:	f383 8811 	msr	BASEPRI, r3
 8016d7e:	f3bf 8f6f 	isb	sy
 8016d82:	f3bf 8f4f 	dsb	sy
 8016d86:	617b      	str	r3, [r7, #20]
}
 8016d88:	bf00      	nop
 8016d8a:	e7fe      	b.n	8016d8a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8016d8c:	f002 f92a 	bl	8018fe4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8016d90:	2300      	movs	r3, #0
 8016d92:	e082      	b.n	8016e9a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	d106      	bne.n	8016da8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016d9a:	f107 030c 	add.w	r3, r7, #12
 8016d9e:	4618      	mov	r0, r3
 8016da0:	f001 f928 	bl	8017ff4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016da4:	2301      	movs	r3, #1
 8016da6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016da8:	f002 f91c 	bl	8018fe4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016dac:	f000 fe94 	bl	8017ad8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016db0:	f002 f8e8 	bl	8018f84 <vPortEnterCritical>
 8016db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016db6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016dba:	b25b      	sxtb	r3, r3
 8016dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016dc0:	d103      	bne.n	8016dca <xQueueSemaphoreTake+0x13a>
 8016dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dc4:	2200      	movs	r2, #0
 8016dc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016dd0:	b25b      	sxtb	r3, r3
 8016dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016dd6:	d103      	bne.n	8016de0 <xQueueSemaphoreTake+0x150>
 8016dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dda:	2200      	movs	r2, #0
 8016ddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016de0:	f002 f900 	bl	8018fe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016de4:	463a      	mov	r2, r7
 8016de6:	f107 030c 	add.w	r3, r7, #12
 8016dea:	4611      	mov	r1, r2
 8016dec:	4618      	mov	r0, r3
 8016dee:	f001 f917 	bl	8018020 <xTaskCheckForTimeOut>
 8016df2:	4603      	mov	r3, r0
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d132      	bne.n	8016e5e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016df8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016dfa:	f000 f9f2 	bl	80171e2 <prvIsQueueEmpty>
 8016dfe:	4603      	mov	r3, r0
 8016e00:	2b00      	cmp	r3, #0
 8016e02:	d026      	beq.n	8016e52 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e06:	681b      	ldr	r3, [r3, #0]
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	d109      	bne.n	8016e20 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8016e0c:	f002 f8ba 	bl	8018f84 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e12:	689b      	ldr	r3, [r3, #8]
 8016e14:	4618      	mov	r0, r3
 8016e16:	f001 fa79 	bl	801830c <xTaskPriorityInherit>
 8016e1a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8016e1c:	f002 f8e2 	bl	8018fe4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e22:	3324      	adds	r3, #36	; 0x24
 8016e24:	683a      	ldr	r2, [r7, #0]
 8016e26:	4611      	mov	r1, r2
 8016e28:	4618      	mov	r0, r3
 8016e2a:	f001 f82f 	bl	8017e8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016e2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016e30:	f000 f985 	bl	801713e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016e34:	f000 fe5e 	bl	8017af4 <xTaskResumeAll>
 8016e38:	4603      	mov	r3, r0
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	f47f af68 	bne.w	8016d10 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8016e40:	4b18      	ldr	r3, [pc, #96]	; (8016ea4 <xQueueSemaphoreTake+0x214>)
 8016e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016e46:	601a      	str	r2, [r3, #0]
 8016e48:	f3bf 8f4f 	dsb	sy
 8016e4c:	f3bf 8f6f 	isb	sy
 8016e50:	e75e      	b.n	8016d10 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8016e52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016e54:	f000 f973 	bl	801713e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016e58:	f000 fe4c 	bl	8017af4 <xTaskResumeAll>
 8016e5c:	e758      	b.n	8016d10 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8016e5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016e60:	f000 f96d 	bl	801713e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016e64:	f000 fe46 	bl	8017af4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016e68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016e6a:	f000 f9ba 	bl	80171e2 <prvIsQueueEmpty>
 8016e6e:	4603      	mov	r3, r0
 8016e70:	2b00      	cmp	r3, #0
 8016e72:	f43f af4d 	beq.w	8016d10 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8016e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	d00d      	beq.n	8016e98 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8016e7c:	f002 f882 	bl	8018f84 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8016e80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016e82:	f000 f8b4 	bl	8016fee <prvGetDisinheritPriorityAfterTimeout>
 8016e86:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8016e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e8a:	689b      	ldr	r3, [r3, #8]
 8016e8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016e8e:	4618      	mov	r0, r3
 8016e90:	f001 fb12 	bl	80184b8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8016e94:	f002 f8a6 	bl	8018fe4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8016e98:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8016e9a:	4618      	mov	r0, r3
 8016e9c:	3738      	adds	r7, #56	; 0x38
 8016e9e:	46bd      	mov	sp, r7
 8016ea0:	bd80      	pop	{r7, pc}
 8016ea2:	bf00      	nop
 8016ea4:	e000ed04 	.word	0xe000ed04

08016ea8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8016ea8:	b580      	push	{r7, lr}
 8016eaa:	b08e      	sub	sp, #56	; 0x38
 8016eac:	af00      	add	r7, sp, #0
 8016eae:	60f8      	str	r0, [r7, #12]
 8016eb0:	60b9      	str	r1, [r7, #8]
 8016eb2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016eb4:	68fb      	ldr	r3, [r7, #12]
 8016eb6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8016eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	d10a      	bne.n	8016ed4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8016ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ec2:	f383 8811 	msr	BASEPRI, r3
 8016ec6:	f3bf 8f6f 	isb	sy
 8016eca:	f3bf 8f4f 	dsb	sy
 8016ece:	623b      	str	r3, [r7, #32]
}
 8016ed0:	bf00      	nop
 8016ed2:	e7fe      	b.n	8016ed2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016ed4:	68bb      	ldr	r3, [r7, #8]
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	d103      	bne.n	8016ee2 <xQueueReceiveFromISR+0x3a>
 8016eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016ede:	2b00      	cmp	r3, #0
 8016ee0:	d101      	bne.n	8016ee6 <xQueueReceiveFromISR+0x3e>
 8016ee2:	2301      	movs	r3, #1
 8016ee4:	e000      	b.n	8016ee8 <xQueueReceiveFromISR+0x40>
 8016ee6:	2300      	movs	r3, #0
 8016ee8:	2b00      	cmp	r3, #0
 8016eea:	d10a      	bne.n	8016f02 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8016eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ef0:	f383 8811 	msr	BASEPRI, r3
 8016ef4:	f3bf 8f6f 	isb	sy
 8016ef8:	f3bf 8f4f 	dsb	sy
 8016efc:	61fb      	str	r3, [r7, #28]
}
 8016efe:	bf00      	nop
 8016f00:	e7fe      	b.n	8016f00 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016f02:	f002 f921 	bl	8019148 <vPortValidateInterruptPriority>
	__asm volatile
 8016f06:	f3ef 8211 	mrs	r2, BASEPRI
 8016f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f0e:	f383 8811 	msr	BASEPRI, r3
 8016f12:	f3bf 8f6f 	isb	sy
 8016f16:	f3bf 8f4f 	dsb	sy
 8016f1a:	61ba      	str	r2, [r7, #24]
 8016f1c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8016f1e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016f20:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016f26:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f2a:	2b00      	cmp	r3, #0
 8016f2c:	d02f      	beq.n	8016f8e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8016f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016f34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016f38:	68b9      	ldr	r1, [r7, #8]
 8016f3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016f3c:	f000 f8d9 	bl	80170f2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8016f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f42:	1e5a      	subs	r2, r3, #1
 8016f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f46:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8016f48:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016f50:	d112      	bne.n	8016f78 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f54:	691b      	ldr	r3, [r3, #16]
 8016f56:	2b00      	cmp	r3, #0
 8016f58:	d016      	beq.n	8016f88 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f5c:	3310      	adds	r3, #16
 8016f5e:	4618      	mov	r0, r3
 8016f60:	f000 ffe4 	bl	8017f2c <xTaskRemoveFromEventList>
 8016f64:	4603      	mov	r3, r0
 8016f66:	2b00      	cmp	r3, #0
 8016f68:	d00e      	beq.n	8016f88 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8016f6a:	687b      	ldr	r3, [r7, #4]
 8016f6c:	2b00      	cmp	r3, #0
 8016f6e:	d00b      	beq.n	8016f88 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	2201      	movs	r2, #1
 8016f74:	601a      	str	r2, [r3, #0]
 8016f76:	e007      	b.n	8016f88 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8016f78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016f7c:	3301      	adds	r3, #1
 8016f7e:	b2db      	uxtb	r3, r3
 8016f80:	b25a      	sxtb	r2, r3
 8016f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8016f88:	2301      	movs	r3, #1
 8016f8a:	637b      	str	r3, [r7, #52]	; 0x34
 8016f8c:	e001      	b.n	8016f92 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8016f8e:	2300      	movs	r3, #0
 8016f90:	637b      	str	r3, [r7, #52]	; 0x34
 8016f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f94:	613b      	str	r3, [r7, #16]
	__asm volatile
 8016f96:	693b      	ldr	r3, [r7, #16]
 8016f98:	f383 8811 	msr	BASEPRI, r3
}
 8016f9c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8016fa0:	4618      	mov	r0, r3
 8016fa2:	3738      	adds	r7, #56	; 0x38
 8016fa4:	46bd      	mov	sp, r7
 8016fa6:	bd80      	pop	{r7, pc}

08016fa8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8016fa8:	b580      	push	{r7, lr}
 8016faa:	b084      	sub	sp, #16
 8016fac:	af00      	add	r7, sp, #0
 8016fae:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8016fb0:	687b      	ldr	r3, [r7, #4]
 8016fb2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8016fb4:	68fb      	ldr	r3, [r7, #12]
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	d10a      	bne.n	8016fd0 <vQueueDelete+0x28>
	__asm volatile
 8016fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016fbe:	f383 8811 	msr	BASEPRI, r3
 8016fc2:	f3bf 8f6f 	isb	sy
 8016fc6:	f3bf 8f4f 	dsb	sy
 8016fca:	60bb      	str	r3, [r7, #8]
}
 8016fcc:	bf00      	nop
 8016fce:	e7fe      	b.n	8016fce <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8016fd0:	68f8      	ldr	r0, [r7, #12]
 8016fd2:	f000 f95f 	bl	8017294 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8016fd6:	68fb      	ldr	r3, [r7, #12]
 8016fd8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8016fdc:	2b00      	cmp	r3, #0
 8016fde:	d102      	bne.n	8016fe6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8016fe0:	68f8      	ldr	r0, [r7, #12]
 8016fe2:	f002 f9bd 	bl	8019360 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8016fe6:	bf00      	nop
 8016fe8:	3710      	adds	r7, #16
 8016fea:	46bd      	mov	sp, r7
 8016fec:	bd80      	pop	{r7, pc}

08016fee <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8016fee:	b480      	push	{r7}
 8016ff0:	b085      	sub	sp, #20
 8016ff2:	af00      	add	r7, sp, #0
 8016ff4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8016ff6:	687b      	ldr	r3, [r7, #4]
 8016ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ffa:	2b00      	cmp	r3, #0
 8016ffc:	d006      	beq.n	801700c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017002:	681b      	ldr	r3, [r3, #0]
 8017004:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8017008:	60fb      	str	r3, [r7, #12]
 801700a:	e001      	b.n	8017010 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801700c:	2300      	movs	r3, #0
 801700e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8017010:	68fb      	ldr	r3, [r7, #12]
	}
 8017012:	4618      	mov	r0, r3
 8017014:	3714      	adds	r7, #20
 8017016:	46bd      	mov	sp, r7
 8017018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801701c:	4770      	bx	lr

0801701e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801701e:	b580      	push	{r7, lr}
 8017020:	b086      	sub	sp, #24
 8017022:	af00      	add	r7, sp, #0
 8017024:	60f8      	str	r0, [r7, #12]
 8017026:	60b9      	str	r1, [r7, #8]
 8017028:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801702a:	2300      	movs	r3, #0
 801702c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801702e:	68fb      	ldr	r3, [r7, #12]
 8017030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017032:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8017034:	68fb      	ldr	r3, [r7, #12]
 8017036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017038:	2b00      	cmp	r3, #0
 801703a:	d10d      	bne.n	8017058 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801703c:	68fb      	ldr	r3, [r7, #12]
 801703e:	681b      	ldr	r3, [r3, #0]
 8017040:	2b00      	cmp	r3, #0
 8017042:	d14d      	bne.n	80170e0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017044:	68fb      	ldr	r3, [r7, #12]
 8017046:	689b      	ldr	r3, [r3, #8]
 8017048:	4618      	mov	r0, r3
 801704a:	f001 f9c7 	bl	80183dc <xTaskPriorityDisinherit>
 801704e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8017050:	68fb      	ldr	r3, [r7, #12]
 8017052:	2200      	movs	r2, #0
 8017054:	609a      	str	r2, [r3, #8]
 8017056:	e043      	b.n	80170e0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	2b00      	cmp	r3, #0
 801705c:	d119      	bne.n	8017092 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801705e:	68fb      	ldr	r3, [r7, #12]
 8017060:	6858      	ldr	r0, [r3, #4]
 8017062:	68fb      	ldr	r3, [r7, #12]
 8017064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017066:	461a      	mov	r2, r3
 8017068:	68b9      	ldr	r1, [r7, #8]
 801706a:	f003 fcdd 	bl	801aa28 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801706e:	68fb      	ldr	r3, [r7, #12]
 8017070:	685a      	ldr	r2, [r3, #4]
 8017072:	68fb      	ldr	r3, [r7, #12]
 8017074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017076:	441a      	add	r2, r3
 8017078:	68fb      	ldr	r3, [r7, #12]
 801707a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801707c:	68fb      	ldr	r3, [r7, #12]
 801707e:	685a      	ldr	r2, [r3, #4]
 8017080:	68fb      	ldr	r3, [r7, #12]
 8017082:	689b      	ldr	r3, [r3, #8]
 8017084:	429a      	cmp	r2, r3
 8017086:	d32b      	bcc.n	80170e0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8017088:	68fb      	ldr	r3, [r7, #12]
 801708a:	681a      	ldr	r2, [r3, #0]
 801708c:	68fb      	ldr	r3, [r7, #12]
 801708e:	605a      	str	r2, [r3, #4]
 8017090:	e026      	b.n	80170e0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8017092:	68fb      	ldr	r3, [r7, #12]
 8017094:	68d8      	ldr	r0, [r3, #12]
 8017096:	68fb      	ldr	r3, [r7, #12]
 8017098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801709a:	461a      	mov	r2, r3
 801709c:	68b9      	ldr	r1, [r7, #8]
 801709e:	f003 fcc3 	bl	801aa28 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80170a2:	68fb      	ldr	r3, [r7, #12]
 80170a4:	68da      	ldr	r2, [r3, #12]
 80170a6:	68fb      	ldr	r3, [r7, #12]
 80170a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80170aa:	425b      	negs	r3, r3
 80170ac:	441a      	add	r2, r3
 80170ae:	68fb      	ldr	r3, [r7, #12]
 80170b0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80170b2:	68fb      	ldr	r3, [r7, #12]
 80170b4:	68da      	ldr	r2, [r3, #12]
 80170b6:	68fb      	ldr	r3, [r7, #12]
 80170b8:	681b      	ldr	r3, [r3, #0]
 80170ba:	429a      	cmp	r2, r3
 80170bc:	d207      	bcs.n	80170ce <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80170be:	68fb      	ldr	r3, [r7, #12]
 80170c0:	689a      	ldr	r2, [r3, #8]
 80170c2:	68fb      	ldr	r3, [r7, #12]
 80170c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80170c6:	425b      	negs	r3, r3
 80170c8:	441a      	add	r2, r3
 80170ca:	68fb      	ldr	r3, [r7, #12]
 80170cc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	2b02      	cmp	r3, #2
 80170d2:	d105      	bne.n	80170e0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80170d4:	693b      	ldr	r3, [r7, #16]
 80170d6:	2b00      	cmp	r3, #0
 80170d8:	d002      	beq.n	80170e0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80170da:	693b      	ldr	r3, [r7, #16]
 80170dc:	3b01      	subs	r3, #1
 80170de:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80170e0:	693b      	ldr	r3, [r7, #16]
 80170e2:	1c5a      	adds	r2, r3, #1
 80170e4:	68fb      	ldr	r3, [r7, #12]
 80170e6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80170e8:	697b      	ldr	r3, [r7, #20]
}
 80170ea:	4618      	mov	r0, r3
 80170ec:	3718      	adds	r7, #24
 80170ee:	46bd      	mov	sp, r7
 80170f0:	bd80      	pop	{r7, pc}

080170f2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80170f2:	b580      	push	{r7, lr}
 80170f4:	b082      	sub	sp, #8
 80170f6:	af00      	add	r7, sp, #0
 80170f8:	6078      	str	r0, [r7, #4]
 80170fa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80170fc:	687b      	ldr	r3, [r7, #4]
 80170fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017100:	2b00      	cmp	r3, #0
 8017102:	d018      	beq.n	8017136 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	68da      	ldr	r2, [r3, #12]
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801710c:	441a      	add	r2, r3
 801710e:	687b      	ldr	r3, [r7, #4]
 8017110:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8017112:	687b      	ldr	r3, [r7, #4]
 8017114:	68da      	ldr	r2, [r3, #12]
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	689b      	ldr	r3, [r3, #8]
 801711a:	429a      	cmp	r2, r3
 801711c:	d303      	bcc.n	8017126 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801711e:	687b      	ldr	r3, [r7, #4]
 8017120:	681a      	ldr	r2, [r3, #0]
 8017122:	687b      	ldr	r3, [r7, #4]
 8017124:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017126:	687b      	ldr	r3, [r7, #4]
 8017128:	68d9      	ldr	r1, [r3, #12]
 801712a:	687b      	ldr	r3, [r7, #4]
 801712c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801712e:	461a      	mov	r2, r3
 8017130:	6838      	ldr	r0, [r7, #0]
 8017132:	f003 fc79 	bl	801aa28 <memcpy>
	}
}
 8017136:	bf00      	nop
 8017138:	3708      	adds	r7, #8
 801713a:	46bd      	mov	sp, r7
 801713c:	bd80      	pop	{r7, pc}

0801713e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801713e:	b580      	push	{r7, lr}
 8017140:	b084      	sub	sp, #16
 8017142:	af00      	add	r7, sp, #0
 8017144:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8017146:	f001 ff1d 	bl	8018f84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801714a:	687b      	ldr	r3, [r7, #4]
 801714c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017150:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017152:	e011      	b.n	8017178 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017154:	687b      	ldr	r3, [r7, #4]
 8017156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017158:	2b00      	cmp	r3, #0
 801715a:	d012      	beq.n	8017182 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801715c:	687b      	ldr	r3, [r7, #4]
 801715e:	3324      	adds	r3, #36	; 0x24
 8017160:	4618      	mov	r0, r3
 8017162:	f000 fee3 	bl	8017f2c <xTaskRemoveFromEventList>
 8017166:	4603      	mov	r3, r0
 8017168:	2b00      	cmp	r3, #0
 801716a:	d001      	beq.n	8017170 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801716c:	f000 ffba 	bl	80180e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8017170:	7bfb      	ldrb	r3, [r7, #15]
 8017172:	3b01      	subs	r3, #1
 8017174:	b2db      	uxtb	r3, r3
 8017176:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017178:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801717c:	2b00      	cmp	r3, #0
 801717e:	dce9      	bgt.n	8017154 <prvUnlockQueue+0x16>
 8017180:	e000      	b.n	8017184 <prvUnlockQueue+0x46>
					break;
 8017182:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	22ff      	movs	r2, #255	; 0xff
 8017188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801718c:	f001 ff2a 	bl	8018fe4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8017190:	f001 fef8 	bl	8018f84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8017194:	687b      	ldr	r3, [r7, #4]
 8017196:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801719a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801719c:	e011      	b.n	80171c2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801719e:	687b      	ldr	r3, [r7, #4]
 80171a0:	691b      	ldr	r3, [r3, #16]
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	d012      	beq.n	80171cc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	3310      	adds	r3, #16
 80171aa:	4618      	mov	r0, r3
 80171ac:	f000 febe 	bl	8017f2c <xTaskRemoveFromEventList>
 80171b0:	4603      	mov	r3, r0
 80171b2:	2b00      	cmp	r3, #0
 80171b4:	d001      	beq.n	80171ba <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80171b6:	f000 ff95 	bl	80180e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80171ba:	7bbb      	ldrb	r3, [r7, #14]
 80171bc:	3b01      	subs	r3, #1
 80171be:	b2db      	uxtb	r3, r3
 80171c0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80171c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80171c6:	2b00      	cmp	r3, #0
 80171c8:	dce9      	bgt.n	801719e <prvUnlockQueue+0x60>
 80171ca:	e000      	b.n	80171ce <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80171cc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80171ce:	687b      	ldr	r3, [r7, #4]
 80171d0:	22ff      	movs	r2, #255	; 0xff
 80171d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80171d6:	f001 ff05 	bl	8018fe4 <vPortExitCritical>
}
 80171da:	bf00      	nop
 80171dc:	3710      	adds	r7, #16
 80171de:	46bd      	mov	sp, r7
 80171e0:	bd80      	pop	{r7, pc}

080171e2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80171e2:	b580      	push	{r7, lr}
 80171e4:	b084      	sub	sp, #16
 80171e6:	af00      	add	r7, sp, #0
 80171e8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80171ea:	f001 fecb 	bl	8018f84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	d102      	bne.n	80171fc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80171f6:	2301      	movs	r3, #1
 80171f8:	60fb      	str	r3, [r7, #12]
 80171fa:	e001      	b.n	8017200 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80171fc:	2300      	movs	r3, #0
 80171fe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017200:	f001 fef0 	bl	8018fe4 <vPortExitCritical>

	return xReturn;
 8017204:	68fb      	ldr	r3, [r7, #12]
}
 8017206:	4618      	mov	r0, r3
 8017208:	3710      	adds	r7, #16
 801720a:	46bd      	mov	sp, r7
 801720c:	bd80      	pop	{r7, pc}

0801720e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801720e:	b580      	push	{r7, lr}
 8017210:	b084      	sub	sp, #16
 8017212:	af00      	add	r7, sp, #0
 8017214:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017216:	f001 feb5 	bl	8018f84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801721a:	687b      	ldr	r3, [r7, #4]
 801721c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801721e:	687b      	ldr	r3, [r7, #4]
 8017220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017222:	429a      	cmp	r2, r3
 8017224:	d102      	bne.n	801722c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8017226:	2301      	movs	r3, #1
 8017228:	60fb      	str	r3, [r7, #12]
 801722a:	e001      	b.n	8017230 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801722c:	2300      	movs	r3, #0
 801722e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017230:	f001 fed8 	bl	8018fe4 <vPortExitCritical>

	return xReturn;
 8017234:	68fb      	ldr	r3, [r7, #12]
}
 8017236:	4618      	mov	r0, r3
 8017238:	3710      	adds	r7, #16
 801723a:	46bd      	mov	sp, r7
 801723c:	bd80      	pop	{r7, pc}
	...

08017240 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8017240:	b480      	push	{r7}
 8017242:	b085      	sub	sp, #20
 8017244:	af00      	add	r7, sp, #0
 8017246:	6078      	str	r0, [r7, #4]
 8017248:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801724a:	2300      	movs	r3, #0
 801724c:	60fb      	str	r3, [r7, #12]
 801724e:	e014      	b.n	801727a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8017250:	4a0f      	ldr	r2, [pc, #60]	; (8017290 <vQueueAddToRegistry+0x50>)
 8017252:	68fb      	ldr	r3, [r7, #12]
 8017254:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8017258:	2b00      	cmp	r3, #0
 801725a:	d10b      	bne.n	8017274 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801725c:	490c      	ldr	r1, [pc, #48]	; (8017290 <vQueueAddToRegistry+0x50>)
 801725e:	68fb      	ldr	r3, [r7, #12]
 8017260:	683a      	ldr	r2, [r7, #0]
 8017262:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8017266:	4a0a      	ldr	r2, [pc, #40]	; (8017290 <vQueueAddToRegistry+0x50>)
 8017268:	68fb      	ldr	r3, [r7, #12]
 801726a:	00db      	lsls	r3, r3, #3
 801726c:	4413      	add	r3, r2
 801726e:	687a      	ldr	r2, [r7, #4]
 8017270:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8017272:	e006      	b.n	8017282 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017274:	68fb      	ldr	r3, [r7, #12]
 8017276:	3301      	adds	r3, #1
 8017278:	60fb      	str	r3, [r7, #12]
 801727a:	68fb      	ldr	r3, [r7, #12]
 801727c:	2b07      	cmp	r3, #7
 801727e:	d9e7      	bls.n	8017250 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8017280:	bf00      	nop
 8017282:	bf00      	nop
 8017284:	3714      	adds	r7, #20
 8017286:	46bd      	mov	sp, r7
 8017288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801728c:	4770      	bx	lr
 801728e:	bf00      	nop
 8017290:	20009cbc 	.word	0x20009cbc

08017294 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8017294:	b480      	push	{r7}
 8017296:	b085      	sub	sp, #20
 8017298:	af00      	add	r7, sp, #0
 801729a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801729c:	2300      	movs	r3, #0
 801729e:	60fb      	str	r3, [r7, #12]
 80172a0:	e016      	b.n	80172d0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80172a2:	4a10      	ldr	r2, [pc, #64]	; (80172e4 <vQueueUnregisterQueue+0x50>)
 80172a4:	68fb      	ldr	r3, [r7, #12]
 80172a6:	00db      	lsls	r3, r3, #3
 80172a8:	4413      	add	r3, r2
 80172aa:	685b      	ldr	r3, [r3, #4]
 80172ac:	687a      	ldr	r2, [r7, #4]
 80172ae:	429a      	cmp	r2, r3
 80172b0:	d10b      	bne.n	80172ca <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80172b2:	4a0c      	ldr	r2, [pc, #48]	; (80172e4 <vQueueUnregisterQueue+0x50>)
 80172b4:	68fb      	ldr	r3, [r7, #12]
 80172b6:	2100      	movs	r1, #0
 80172b8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80172bc:	4a09      	ldr	r2, [pc, #36]	; (80172e4 <vQueueUnregisterQueue+0x50>)
 80172be:	68fb      	ldr	r3, [r7, #12]
 80172c0:	00db      	lsls	r3, r3, #3
 80172c2:	4413      	add	r3, r2
 80172c4:	2200      	movs	r2, #0
 80172c6:	605a      	str	r2, [r3, #4]
				break;
 80172c8:	e006      	b.n	80172d8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80172ca:	68fb      	ldr	r3, [r7, #12]
 80172cc:	3301      	adds	r3, #1
 80172ce:	60fb      	str	r3, [r7, #12]
 80172d0:	68fb      	ldr	r3, [r7, #12]
 80172d2:	2b07      	cmp	r3, #7
 80172d4:	d9e5      	bls.n	80172a2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80172d6:	bf00      	nop
 80172d8:	bf00      	nop
 80172da:	3714      	adds	r7, #20
 80172dc:	46bd      	mov	sp, r7
 80172de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172e2:	4770      	bx	lr
 80172e4:	20009cbc 	.word	0x20009cbc

080172e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80172e8:	b580      	push	{r7, lr}
 80172ea:	b086      	sub	sp, #24
 80172ec:	af00      	add	r7, sp, #0
 80172ee:	60f8      	str	r0, [r7, #12]
 80172f0:	60b9      	str	r1, [r7, #8]
 80172f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80172f4:	68fb      	ldr	r3, [r7, #12]
 80172f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80172f8:	f001 fe44 	bl	8018f84 <vPortEnterCritical>
 80172fc:	697b      	ldr	r3, [r7, #20]
 80172fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017302:	b25b      	sxtb	r3, r3
 8017304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017308:	d103      	bne.n	8017312 <vQueueWaitForMessageRestricted+0x2a>
 801730a:	697b      	ldr	r3, [r7, #20]
 801730c:	2200      	movs	r2, #0
 801730e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017312:	697b      	ldr	r3, [r7, #20]
 8017314:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017318:	b25b      	sxtb	r3, r3
 801731a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801731e:	d103      	bne.n	8017328 <vQueueWaitForMessageRestricted+0x40>
 8017320:	697b      	ldr	r3, [r7, #20]
 8017322:	2200      	movs	r2, #0
 8017324:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017328:	f001 fe5c 	bl	8018fe4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801732c:	697b      	ldr	r3, [r7, #20]
 801732e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017330:	2b00      	cmp	r3, #0
 8017332:	d106      	bne.n	8017342 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8017334:	697b      	ldr	r3, [r7, #20]
 8017336:	3324      	adds	r3, #36	; 0x24
 8017338:	687a      	ldr	r2, [r7, #4]
 801733a:	68b9      	ldr	r1, [r7, #8]
 801733c:	4618      	mov	r0, r3
 801733e:	f000 fdc9 	bl	8017ed4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8017342:	6978      	ldr	r0, [r7, #20]
 8017344:	f7ff fefb 	bl	801713e <prvUnlockQueue>
	}
 8017348:	bf00      	nop
 801734a:	3718      	adds	r7, #24
 801734c:	46bd      	mov	sp, r7
 801734e:	bd80      	pop	{r7, pc}

08017350 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8017350:	b580      	push	{r7, lr}
 8017352:	b08e      	sub	sp, #56	; 0x38
 8017354:	af04      	add	r7, sp, #16
 8017356:	60f8      	str	r0, [r7, #12]
 8017358:	60b9      	str	r1, [r7, #8]
 801735a:	607a      	str	r2, [r7, #4]
 801735c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801735e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017360:	2b00      	cmp	r3, #0
 8017362:	d10a      	bne.n	801737a <xTaskCreateStatic+0x2a>
	__asm volatile
 8017364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017368:	f383 8811 	msr	BASEPRI, r3
 801736c:	f3bf 8f6f 	isb	sy
 8017370:	f3bf 8f4f 	dsb	sy
 8017374:	623b      	str	r3, [r7, #32]
}
 8017376:	bf00      	nop
 8017378:	e7fe      	b.n	8017378 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801737a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801737c:	2b00      	cmp	r3, #0
 801737e:	d10a      	bne.n	8017396 <xTaskCreateStatic+0x46>
	__asm volatile
 8017380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017384:	f383 8811 	msr	BASEPRI, r3
 8017388:	f3bf 8f6f 	isb	sy
 801738c:	f3bf 8f4f 	dsb	sy
 8017390:	61fb      	str	r3, [r7, #28]
}
 8017392:	bf00      	nop
 8017394:	e7fe      	b.n	8017394 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8017396:	23bc      	movs	r3, #188	; 0xbc
 8017398:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801739a:	693b      	ldr	r3, [r7, #16]
 801739c:	2bbc      	cmp	r3, #188	; 0xbc
 801739e:	d00a      	beq.n	80173b6 <xTaskCreateStatic+0x66>
	__asm volatile
 80173a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173a4:	f383 8811 	msr	BASEPRI, r3
 80173a8:	f3bf 8f6f 	isb	sy
 80173ac:	f3bf 8f4f 	dsb	sy
 80173b0:	61bb      	str	r3, [r7, #24]
}
 80173b2:	bf00      	nop
 80173b4:	e7fe      	b.n	80173b4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80173b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80173b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	d01e      	beq.n	80173fc <xTaskCreateStatic+0xac>
 80173be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80173c0:	2b00      	cmp	r3, #0
 80173c2:	d01b      	beq.n	80173fc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80173c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80173c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80173c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80173cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80173ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173d0:	2202      	movs	r2, #2
 80173d2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80173d6:	2300      	movs	r3, #0
 80173d8:	9303      	str	r3, [sp, #12]
 80173da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173dc:	9302      	str	r3, [sp, #8]
 80173de:	f107 0314 	add.w	r3, r7, #20
 80173e2:	9301      	str	r3, [sp, #4]
 80173e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173e6:	9300      	str	r3, [sp, #0]
 80173e8:	683b      	ldr	r3, [r7, #0]
 80173ea:	687a      	ldr	r2, [r7, #4]
 80173ec:	68b9      	ldr	r1, [r7, #8]
 80173ee:	68f8      	ldr	r0, [r7, #12]
 80173f0:	f000 f850 	bl	8017494 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80173f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80173f6:	f000 f8f3 	bl	80175e0 <prvAddNewTaskToReadyList>
 80173fa:	e001      	b.n	8017400 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80173fc:	2300      	movs	r3, #0
 80173fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8017400:	697b      	ldr	r3, [r7, #20]
	}
 8017402:	4618      	mov	r0, r3
 8017404:	3728      	adds	r7, #40	; 0x28
 8017406:	46bd      	mov	sp, r7
 8017408:	bd80      	pop	{r7, pc}

0801740a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801740a:	b580      	push	{r7, lr}
 801740c:	b08c      	sub	sp, #48	; 0x30
 801740e:	af04      	add	r7, sp, #16
 8017410:	60f8      	str	r0, [r7, #12]
 8017412:	60b9      	str	r1, [r7, #8]
 8017414:	603b      	str	r3, [r7, #0]
 8017416:	4613      	mov	r3, r2
 8017418:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801741a:	88fb      	ldrh	r3, [r7, #6]
 801741c:	009b      	lsls	r3, r3, #2
 801741e:	4618      	mov	r0, r3
 8017420:	f001 fed2 	bl	80191c8 <pvPortMalloc>
 8017424:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8017426:	697b      	ldr	r3, [r7, #20]
 8017428:	2b00      	cmp	r3, #0
 801742a:	d00e      	beq.n	801744a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801742c:	20bc      	movs	r0, #188	; 0xbc
 801742e:	f001 fecb 	bl	80191c8 <pvPortMalloc>
 8017432:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8017434:	69fb      	ldr	r3, [r7, #28]
 8017436:	2b00      	cmp	r3, #0
 8017438:	d003      	beq.n	8017442 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801743a:	69fb      	ldr	r3, [r7, #28]
 801743c:	697a      	ldr	r2, [r7, #20]
 801743e:	631a      	str	r2, [r3, #48]	; 0x30
 8017440:	e005      	b.n	801744e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8017442:	6978      	ldr	r0, [r7, #20]
 8017444:	f001 ff8c 	bl	8019360 <vPortFree>
 8017448:	e001      	b.n	801744e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801744a:	2300      	movs	r3, #0
 801744c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801744e:	69fb      	ldr	r3, [r7, #28]
 8017450:	2b00      	cmp	r3, #0
 8017452:	d017      	beq.n	8017484 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8017454:	69fb      	ldr	r3, [r7, #28]
 8017456:	2200      	movs	r2, #0
 8017458:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801745c:	88fa      	ldrh	r2, [r7, #6]
 801745e:	2300      	movs	r3, #0
 8017460:	9303      	str	r3, [sp, #12]
 8017462:	69fb      	ldr	r3, [r7, #28]
 8017464:	9302      	str	r3, [sp, #8]
 8017466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017468:	9301      	str	r3, [sp, #4]
 801746a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801746c:	9300      	str	r3, [sp, #0]
 801746e:	683b      	ldr	r3, [r7, #0]
 8017470:	68b9      	ldr	r1, [r7, #8]
 8017472:	68f8      	ldr	r0, [r7, #12]
 8017474:	f000 f80e 	bl	8017494 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017478:	69f8      	ldr	r0, [r7, #28]
 801747a:	f000 f8b1 	bl	80175e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801747e:	2301      	movs	r3, #1
 8017480:	61bb      	str	r3, [r7, #24]
 8017482:	e002      	b.n	801748a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8017484:	f04f 33ff 	mov.w	r3, #4294967295
 8017488:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801748a:	69bb      	ldr	r3, [r7, #24]
	}
 801748c:	4618      	mov	r0, r3
 801748e:	3720      	adds	r7, #32
 8017490:	46bd      	mov	sp, r7
 8017492:	bd80      	pop	{r7, pc}

08017494 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8017494:	b580      	push	{r7, lr}
 8017496:	b088      	sub	sp, #32
 8017498:	af00      	add	r7, sp, #0
 801749a:	60f8      	str	r0, [r7, #12]
 801749c:	60b9      	str	r1, [r7, #8]
 801749e:	607a      	str	r2, [r7, #4]
 80174a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80174a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	009b      	lsls	r3, r3, #2
 80174aa:	461a      	mov	r2, r3
 80174ac:	21a5      	movs	r1, #165	; 0xa5
 80174ae:	f003 fae3 	bl	801aa78 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80174b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80174b6:	687b      	ldr	r3, [r7, #4]
 80174b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80174bc:	3b01      	subs	r3, #1
 80174be:	009b      	lsls	r3, r3, #2
 80174c0:	4413      	add	r3, r2
 80174c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80174c4:	69bb      	ldr	r3, [r7, #24]
 80174c6:	f023 0307 	bic.w	r3, r3, #7
 80174ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80174cc:	69bb      	ldr	r3, [r7, #24]
 80174ce:	f003 0307 	and.w	r3, r3, #7
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	d00a      	beq.n	80174ec <prvInitialiseNewTask+0x58>
	__asm volatile
 80174d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174da:	f383 8811 	msr	BASEPRI, r3
 80174de:	f3bf 8f6f 	isb	sy
 80174e2:	f3bf 8f4f 	dsb	sy
 80174e6:	617b      	str	r3, [r7, #20]
}
 80174e8:	bf00      	nop
 80174ea:	e7fe      	b.n	80174ea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80174ec:	68bb      	ldr	r3, [r7, #8]
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	d01f      	beq.n	8017532 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80174f2:	2300      	movs	r3, #0
 80174f4:	61fb      	str	r3, [r7, #28]
 80174f6:	e012      	b.n	801751e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80174f8:	68ba      	ldr	r2, [r7, #8]
 80174fa:	69fb      	ldr	r3, [r7, #28]
 80174fc:	4413      	add	r3, r2
 80174fe:	7819      	ldrb	r1, [r3, #0]
 8017500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017502:	69fb      	ldr	r3, [r7, #28]
 8017504:	4413      	add	r3, r2
 8017506:	3334      	adds	r3, #52	; 0x34
 8017508:	460a      	mov	r2, r1
 801750a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801750c:	68ba      	ldr	r2, [r7, #8]
 801750e:	69fb      	ldr	r3, [r7, #28]
 8017510:	4413      	add	r3, r2
 8017512:	781b      	ldrb	r3, [r3, #0]
 8017514:	2b00      	cmp	r3, #0
 8017516:	d006      	beq.n	8017526 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017518:	69fb      	ldr	r3, [r7, #28]
 801751a:	3301      	adds	r3, #1
 801751c:	61fb      	str	r3, [r7, #28]
 801751e:	69fb      	ldr	r3, [r7, #28]
 8017520:	2b0f      	cmp	r3, #15
 8017522:	d9e9      	bls.n	80174f8 <prvInitialiseNewTask+0x64>
 8017524:	e000      	b.n	8017528 <prvInitialiseNewTask+0x94>
			{
				break;
 8017526:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8017528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801752a:	2200      	movs	r2, #0
 801752c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8017530:	e003      	b.n	801753a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8017532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017534:	2200      	movs	r2, #0
 8017536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801753a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801753c:	2b37      	cmp	r3, #55	; 0x37
 801753e:	d901      	bls.n	8017544 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8017540:	2337      	movs	r3, #55	; 0x37
 8017542:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8017544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017546:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017548:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801754a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801754c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801754e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8017550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017552:	2200      	movs	r2, #0
 8017554:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8017556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017558:	3304      	adds	r3, #4
 801755a:	4618      	mov	r0, r3
 801755c:	f7fe fe56 	bl	801620c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8017560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017562:	3318      	adds	r3, #24
 8017564:	4618      	mov	r0, r3
 8017566:	f7fe fe51 	bl	801620c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801756a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801756c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801756e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017572:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017578:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801757a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801757c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801757e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8017580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017582:	2200      	movs	r2, #0
 8017584:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8017588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801758a:	2200      	movs	r2, #0
 801758c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8017590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017592:	3354      	adds	r3, #84	; 0x54
 8017594:	2260      	movs	r2, #96	; 0x60
 8017596:	2100      	movs	r1, #0
 8017598:	4618      	mov	r0, r3
 801759a:	f003 fa6d 	bl	801aa78 <memset>
 801759e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175a0:	4a0c      	ldr	r2, [pc, #48]	; (80175d4 <prvInitialiseNewTask+0x140>)
 80175a2:	659a      	str	r2, [r3, #88]	; 0x58
 80175a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175a6:	4a0c      	ldr	r2, [pc, #48]	; (80175d8 <prvInitialiseNewTask+0x144>)
 80175a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80175aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175ac:	4a0b      	ldr	r2, [pc, #44]	; (80175dc <prvInitialiseNewTask+0x148>)
 80175ae:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80175b0:	683a      	ldr	r2, [r7, #0]
 80175b2:	68f9      	ldr	r1, [r7, #12]
 80175b4:	69b8      	ldr	r0, [r7, #24]
 80175b6:	f001 fbb9 	bl	8018d2c <pxPortInitialiseStack>
 80175ba:	4602      	mov	r2, r0
 80175bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175be:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80175c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175c2:	2b00      	cmp	r3, #0
 80175c4:	d002      	beq.n	80175cc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80175c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80175ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80175cc:	bf00      	nop
 80175ce:	3720      	adds	r7, #32
 80175d0:	46bd      	mov	sp, r7
 80175d2:	bd80      	pop	{r7, pc}
 80175d4:	08022c5c 	.word	0x08022c5c
 80175d8:	08022c7c 	.word	0x08022c7c
 80175dc:	08022c3c 	.word	0x08022c3c

080175e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80175e0:	b580      	push	{r7, lr}
 80175e2:	b082      	sub	sp, #8
 80175e4:	af00      	add	r7, sp, #0
 80175e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80175e8:	f001 fccc 	bl	8018f84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80175ec:	4b2d      	ldr	r3, [pc, #180]	; (80176a4 <prvAddNewTaskToReadyList+0xc4>)
 80175ee:	681b      	ldr	r3, [r3, #0]
 80175f0:	3301      	adds	r3, #1
 80175f2:	4a2c      	ldr	r2, [pc, #176]	; (80176a4 <prvAddNewTaskToReadyList+0xc4>)
 80175f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80175f6:	4b2c      	ldr	r3, [pc, #176]	; (80176a8 <prvAddNewTaskToReadyList+0xc8>)
 80175f8:	681b      	ldr	r3, [r3, #0]
 80175fa:	2b00      	cmp	r3, #0
 80175fc:	d109      	bne.n	8017612 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80175fe:	4a2a      	ldr	r2, [pc, #168]	; (80176a8 <prvAddNewTaskToReadyList+0xc8>)
 8017600:	687b      	ldr	r3, [r7, #4]
 8017602:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8017604:	4b27      	ldr	r3, [pc, #156]	; (80176a4 <prvAddNewTaskToReadyList+0xc4>)
 8017606:	681b      	ldr	r3, [r3, #0]
 8017608:	2b01      	cmp	r3, #1
 801760a:	d110      	bne.n	801762e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801760c:	f000 fd8e 	bl	801812c <prvInitialiseTaskLists>
 8017610:	e00d      	b.n	801762e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8017612:	4b26      	ldr	r3, [pc, #152]	; (80176ac <prvAddNewTaskToReadyList+0xcc>)
 8017614:	681b      	ldr	r3, [r3, #0]
 8017616:	2b00      	cmp	r3, #0
 8017618:	d109      	bne.n	801762e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801761a:	4b23      	ldr	r3, [pc, #140]	; (80176a8 <prvAddNewTaskToReadyList+0xc8>)
 801761c:	681b      	ldr	r3, [r3, #0]
 801761e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017624:	429a      	cmp	r2, r3
 8017626:	d802      	bhi.n	801762e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8017628:	4a1f      	ldr	r2, [pc, #124]	; (80176a8 <prvAddNewTaskToReadyList+0xc8>)
 801762a:	687b      	ldr	r3, [r7, #4]
 801762c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801762e:	4b20      	ldr	r3, [pc, #128]	; (80176b0 <prvAddNewTaskToReadyList+0xd0>)
 8017630:	681b      	ldr	r3, [r3, #0]
 8017632:	3301      	adds	r3, #1
 8017634:	4a1e      	ldr	r2, [pc, #120]	; (80176b0 <prvAddNewTaskToReadyList+0xd0>)
 8017636:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8017638:	4b1d      	ldr	r3, [pc, #116]	; (80176b0 <prvAddNewTaskToReadyList+0xd0>)
 801763a:	681a      	ldr	r2, [r3, #0]
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017644:	4b1b      	ldr	r3, [pc, #108]	; (80176b4 <prvAddNewTaskToReadyList+0xd4>)
 8017646:	681b      	ldr	r3, [r3, #0]
 8017648:	429a      	cmp	r2, r3
 801764a:	d903      	bls.n	8017654 <prvAddNewTaskToReadyList+0x74>
 801764c:	687b      	ldr	r3, [r7, #4]
 801764e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017650:	4a18      	ldr	r2, [pc, #96]	; (80176b4 <prvAddNewTaskToReadyList+0xd4>)
 8017652:	6013      	str	r3, [r2, #0]
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017658:	4613      	mov	r3, r2
 801765a:	009b      	lsls	r3, r3, #2
 801765c:	4413      	add	r3, r2
 801765e:	009b      	lsls	r3, r3, #2
 8017660:	4a15      	ldr	r2, [pc, #84]	; (80176b8 <prvAddNewTaskToReadyList+0xd8>)
 8017662:	441a      	add	r2, r3
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	3304      	adds	r3, #4
 8017668:	4619      	mov	r1, r3
 801766a:	4610      	mov	r0, r2
 801766c:	f7fe fddb 	bl	8016226 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8017670:	f001 fcb8 	bl	8018fe4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8017674:	4b0d      	ldr	r3, [pc, #52]	; (80176ac <prvAddNewTaskToReadyList+0xcc>)
 8017676:	681b      	ldr	r3, [r3, #0]
 8017678:	2b00      	cmp	r3, #0
 801767a:	d00e      	beq.n	801769a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801767c:	4b0a      	ldr	r3, [pc, #40]	; (80176a8 <prvAddNewTaskToReadyList+0xc8>)
 801767e:	681b      	ldr	r3, [r3, #0]
 8017680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017682:	687b      	ldr	r3, [r7, #4]
 8017684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017686:	429a      	cmp	r2, r3
 8017688:	d207      	bcs.n	801769a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801768a:	4b0c      	ldr	r3, [pc, #48]	; (80176bc <prvAddNewTaskToReadyList+0xdc>)
 801768c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017690:	601a      	str	r2, [r3, #0]
 8017692:	f3bf 8f4f 	dsb	sy
 8017696:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801769a:	bf00      	nop
 801769c:	3708      	adds	r7, #8
 801769e:	46bd      	mov	sp, r7
 80176a0:	bd80      	pop	{r7, pc}
 80176a2:	bf00      	nop
 80176a4:	200026cc 	.word	0x200026cc
 80176a8:	200021f8 	.word	0x200021f8
 80176ac:	200026d8 	.word	0x200026d8
 80176b0:	200026e8 	.word	0x200026e8
 80176b4:	200026d4 	.word	0x200026d4
 80176b8:	200021fc 	.word	0x200021fc
 80176bc:	e000ed04 	.word	0xe000ed04

080176c0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80176c0:	b580      	push	{r7, lr}
 80176c2:	b084      	sub	sp, #16
 80176c4:	af00      	add	r7, sp, #0
 80176c6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80176c8:	f001 fc5c 	bl	8018f84 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80176cc:	687b      	ldr	r3, [r7, #4]
 80176ce:	2b00      	cmp	r3, #0
 80176d0:	d102      	bne.n	80176d8 <vTaskDelete+0x18>
 80176d2:	4b2c      	ldr	r3, [pc, #176]	; (8017784 <vTaskDelete+0xc4>)
 80176d4:	681b      	ldr	r3, [r3, #0]
 80176d6:	e000      	b.n	80176da <vTaskDelete+0x1a>
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80176dc:	68fb      	ldr	r3, [r7, #12]
 80176de:	3304      	adds	r3, #4
 80176e0:	4618      	mov	r0, r3
 80176e2:	f7fe fdfd 	bl	80162e0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80176e6:	68fb      	ldr	r3, [r7, #12]
 80176e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80176ea:	2b00      	cmp	r3, #0
 80176ec:	d004      	beq.n	80176f8 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80176ee:	68fb      	ldr	r3, [r7, #12]
 80176f0:	3318      	adds	r3, #24
 80176f2:	4618      	mov	r0, r3
 80176f4:	f7fe fdf4 	bl	80162e0 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80176f8:	4b23      	ldr	r3, [pc, #140]	; (8017788 <vTaskDelete+0xc8>)
 80176fa:	681b      	ldr	r3, [r3, #0]
 80176fc:	3301      	adds	r3, #1
 80176fe:	4a22      	ldr	r2, [pc, #136]	; (8017788 <vTaskDelete+0xc8>)
 8017700:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8017702:	4b20      	ldr	r3, [pc, #128]	; (8017784 <vTaskDelete+0xc4>)
 8017704:	681b      	ldr	r3, [r3, #0]
 8017706:	68fa      	ldr	r2, [r7, #12]
 8017708:	429a      	cmp	r2, r3
 801770a:	d10b      	bne.n	8017724 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 801770c:	68fb      	ldr	r3, [r7, #12]
 801770e:	3304      	adds	r3, #4
 8017710:	4619      	mov	r1, r3
 8017712:	481e      	ldr	r0, [pc, #120]	; (801778c <vTaskDelete+0xcc>)
 8017714:	f7fe fd87 	bl	8016226 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8017718:	4b1d      	ldr	r3, [pc, #116]	; (8017790 <vTaskDelete+0xd0>)
 801771a:	681b      	ldr	r3, [r3, #0]
 801771c:	3301      	adds	r3, #1
 801771e:	4a1c      	ldr	r2, [pc, #112]	; (8017790 <vTaskDelete+0xd0>)
 8017720:	6013      	str	r3, [r2, #0]
 8017722:	e009      	b.n	8017738 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8017724:	4b1b      	ldr	r3, [pc, #108]	; (8017794 <vTaskDelete+0xd4>)
 8017726:	681b      	ldr	r3, [r3, #0]
 8017728:	3b01      	subs	r3, #1
 801772a:	4a1a      	ldr	r2, [pc, #104]	; (8017794 <vTaskDelete+0xd4>)
 801772c:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 801772e:	68f8      	ldr	r0, [r7, #12]
 8017730:	f000 fd6a 	bl	8018208 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8017734:	f000 fd9c 	bl	8018270 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8017738:	f001 fc54 	bl	8018fe4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 801773c:	4b16      	ldr	r3, [pc, #88]	; (8017798 <vTaskDelete+0xd8>)
 801773e:	681b      	ldr	r3, [r3, #0]
 8017740:	2b00      	cmp	r3, #0
 8017742:	d01b      	beq.n	801777c <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8017744:	4b0f      	ldr	r3, [pc, #60]	; (8017784 <vTaskDelete+0xc4>)
 8017746:	681b      	ldr	r3, [r3, #0]
 8017748:	68fa      	ldr	r2, [r7, #12]
 801774a:	429a      	cmp	r2, r3
 801774c:	d116      	bne.n	801777c <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 801774e:	4b13      	ldr	r3, [pc, #76]	; (801779c <vTaskDelete+0xdc>)
 8017750:	681b      	ldr	r3, [r3, #0]
 8017752:	2b00      	cmp	r3, #0
 8017754:	d00a      	beq.n	801776c <vTaskDelete+0xac>
	__asm volatile
 8017756:	f04f 0350 	mov.w	r3, #80	; 0x50
 801775a:	f383 8811 	msr	BASEPRI, r3
 801775e:	f3bf 8f6f 	isb	sy
 8017762:	f3bf 8f4f 	dsb	sy
 8017766:	60bb      	str	r3, [r7, #8]
}
 8017768:	bf00      	nop
 801776a:	e7fe      	b.n	801776a <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 801776c:	4b0c      	ldr	r3, [pc, #48]	; (80177a0 <vTaskDelete+0xe0>)
 801776e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017772:	601a      	str	r2, [r3, #0]
 8017774:	f3bf 8f4f 	dsb	sy
 8017778:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801777c:	bf00      	nop
 801777e:	3710      	adds	r7, #16
 8017780:	46bd      	mov	sp, r7
 8017782:	bd80      	pop	{r7, pc}
 8017784:	200021f8 	.word	0x200021f8
 8017788:	200026e8 	.word	0x200026e8
 801778c:	200026a0 	.word	0x200026a0
 8017790:	200026b4 	.word	0x200026b4
 8017794:	200026cc 	.word	0x200026cc
 8017798:	200026d8 	.word	0x200026d8
 801779c:	200026f4 	.word	0x200026f4
 80177a0:	e000ed04 	.word	0xe000ed04

080177a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80177a4:	b580      	push	{r7, lr}
 80177a6:	b084      	sub	sp, #16
 80177a8:	af00      	add	r7, sp, #0
 80177aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80177ac:	2300      	movs	r3, #0
 80177ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	2b00      	cmp	r3, #0
 80177b4:	d017      	beq.n	80177e6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80177b6:	4b13      	ldr	r3, [pc, #76]	; (8017804 <vTaskDelay+0x60>)
 80177b8:	681b      	ldr	r3, [r3, #0]
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	d00a      	beq.n	80177d4 <vTaskDelay+0x30>
	__asm volatile
 80177be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177c2:	f383 8811 	msr	BASEPRI, r3
 80177c6:	f3bf 8f6f 	isb	sy
 80177ca:	f3bf 8f4f 	dsb	sy
 80177ce:	60bb      	str	r3, [r7, #8]
}
 80177d0:	bf00      	nop
 80177d2:	e7fe      	b.n	80177d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80177d4:	f000 f980 	bl	8017ad8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80177d8:	2100      	movs	r1, #0
 80177da:	6878      	ldr	r0, [r7, #4]
 80177dc:	f000 ff02 	bl	80185e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80177e0:	f000 f988 	bl	8017af4 <xTaskResumeAll>
 80177e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80177e6:	68fb      	ldr	r3, [r7, #12]
 80177e8:	2b00      	cmp	r3, #0
 80177ea:	d107      	bne.n	80177fc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80177ec:	4b06      	ldr	r3, [pc, #24]	; (8017808 <vTaskDelay+0x64>)
 80177ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80177f2:	601a      	str	r2, [r3, #0]
 80177f4:	f3bf 8f4f 	dsb	sy
 80177f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80177fc:	bf00      	nop
 80177fe:	3710      	adds	r7, #16
 8017800:	46bd      	mov	sp, r7
 8017802:	bd80      	pop	{r7, pc}
 8017804:	200026f4 	.word	0x200026f4
 8017808:	e000ed04 	.word	0xe000ed04

0801780c <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 801780c:	b580      	push	{r7, lr}
 801780e:	b088      	sub	sp, #32
 8017810:	af00      	add	r7, sp, #0
 8017812:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8017814:	687b      	ldr	r3, [r7, #4]
 8017816:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8017818:	69bb      	ldr	r3, [r7, #24]
 801781a:	2b00      	cmp	r3, #0
 801781c:	d10a      	bne.n	8017834 <eTaskGetState+0x28>
	__asm volatile
 801781e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017822:	f383 8811 	msr	BASEPRI, r3
 8017826:	f3bf 8f6f 	isb	sy
 801782a:	f3bf 8f4f 	dsb	sy
 801782e:	60bb      	str	r3, [r7, #8]
}
 8017830:	bf00      	nop
 8017832:	e7fe      	b.n	8017832 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8017834:	4b23      	ldr	r3, [pc, #140]	; (80178c4 <eTaskGetState+0xb8>)
 8017836:	681b      	ldr	r3, [r3, #0]
 8017838:	69ba      	ldr	r2, [r7, #24]
 801783a:	429a      	cmp	r2, r3
 801783c:	d102      	bne.n	8017844 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 801783e:	2300      	movs	r3, #0
 8017840:	77fb      	strb	r3, [r7, #31]
 8017842:	e03a      	b.n	80178ba <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8017844:	f001 fb9e 	bl	8018f84 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8017848:	69bb      	ldr	r3, [r7, #24]
 801784a:	695b      	ldr	r3, [r3, #20]
 801784c:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 801784e:	4b1e      	ldr	r3, [pc, #120]	; (80178c8 <eTaskGetState+0xbc>)
 8017850:	681b      	ldr	r3, [r3, #0]
 8017852:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8017854:	4b1d      	ldr	r3, [pc, #116]	; (80178cc <eTaskGetState+0xc0>)
 8017856:	681b      	ldr	r3, [r3, #0]
 8017858:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 801785a:	f001 fbc3 	bl	8018fe4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 801785e:	697a      	ldr	r2, [r7, #20]
 8017860:	693b      	ldr	r3, [r7, #16]
 8017862:	429a      	cmp	r2, r3
 8017864:	d003      	beq.n	801786e <eTaskGetState+0x62>
 8017866:	697a      	ldr	r2, [r7, #20]
 8017868:	68fb      	ldr	r3, [r7, #12]
 801786a:	429a      	cmp	r2, r3
 801786c:	d102      	bne.n	8017874 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 801786e:	2302      	movs	r3, #2
 8017870:	77fb      	strb	r3, [r7, #31]
 8017872:	e022      	b.n	80178ba <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8017874:	697b      	ldr	r3, [r7, #20]
 8017876:	4a16      	ldr	r2, [pc, #88]	; (80178d0 <eTaskGetState+0xc4>)
 8017878:	4293      	cmp	r3, r2
 801787a:	d112      	bne.n	80178a2 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 801787c:	69bb      	ldr	r3, [r7, #24]
 801787e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017880:	2b00      	cmp	r3, #0
 8017882:	d10b      	bne.n	801789c <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8017884:	69bb      	ldr	r3, [r7, #24]
 8017886:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 801788a:	b2db      	uxtb	r3, r3
 801788c:	2b01      	cmp	r3, #1
 801788e:	d102      	bne.n	8017896 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8017890:	2302      	movs	r3, #2
 8017892:	77fb      	strb	r3, [r7, #31]
 8017894:	e011      	b.n	80178ba <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8017896:	2303      	movs	r3, #3
 8017898:	77fb      	strb	r3, [r7, #31]
 801789a:	e00e      	b.n	80178ba <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 801789c:	2302      	movs	r3, #2
 801789e:	77fb      	strb	r3, [r7, #31]
 80178a0:	e00b      	b.n	80178ba <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80178a2:	697b      	ldr	r3, [r7, #20]
 80178a4:	4a0b      	ldr	r2, [pc, #44]	; (80178d4 <eTaskGetState+0xc8>)
 80178a6:	4293      	cmp	r3, r2
 80178a8:	d002      	beq.n	80178b0 <eTaskGetState+0xa4>
 80178aa:	697b      	ldr	r3, [r7, #20]
 80178ac:	2b00      	cmp	r3, #0
 80178ae:	d102      	bne.n	80178b6 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 80178b0:	2304      	movs	r3, #4
 80178b2:	77fb      	strb	r3, [r7, #31]
 80178b4:	e001      	b.n	80178ba <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 80178b6:	2301      	movs	r3, #1
 80178b8:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 80178ba:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80178bc:	4618      	mov	r0, r3
 80178be:	3720      	adds	r7, #32
 80178c0:	46bd      	mov	sp, r7
 80178c2:	bd80      	pop	{r7, pc}
 80178c4:	200021f8 	.word	0x200021f8
 80178c8:	20002684 	.word	0x20002684
 80178cc:	20002688 	.word	0x20002688
 80178d0:	200026b8 	.word	0x200026b8
 80178d4:	200026a0 	.word	0x200026a0

080178d8 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80178d8:	b480      	push	{r7}
 80178da:	b087      	sub	sp, #28
 80178dc:	af00      	add	r7, sp, #0
 80178de:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80178e0:	2300      	movs	r3, #0
 80178e2:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80178e4:	687b      	ldr	r3, [r7, #4]
 80178e6:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80178e8:	687b      	ldr	r3, [r7, #4]
 80178ea:	2b00      	cmp	r3, #0
 80178ec:	d10a      	bne.n	8017904 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 80178ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178f2:	f383 8811 	msr	BASEPRI, r3
 80178f6:	f3bf 8f6f 	isb	sy
 80178fa:	f3bf 8f4f 	dsb	sy
 80178fe:	60fb      	str	r3, [r7, #12]
}
 8017900:	bf00      	nop
 8017902:	e7fe      	b.n	8017902 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8017904:	693b      	ldr	r3, [r7, #16]
 8017906:	695b      	ldr	r3, [r3, #20]
 8017908:	4a0a      	ldr	r2, [pc, #40]	; (8017934 <prvTaskIsTaskSuspended+0x5c>)
 801790a:	4293      	cmp	r3, r2
 801790c:	d10a      	bne.n	8017924 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 801790e:	693b      	ldr	r3, [r7, #16]
 8017910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017912:	4a09      	ldr	r2, [pc, #36]	; (8017938 <prvTaskIsTaskSuspended+0x60>)
 8017914:	4293      	cmp	r3, r2
 8017916:	d005      	beq.n	8017924 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8017918:	693b      	ldr	r3, [r7, #16]
 801791a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801791c:	2b00      	cmp	r3, #0
 801791e:	d101      	bne.n	8017924 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8017920:	2301      	movs	r3, #1
 8017922:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017924:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8017926:	4618      	mov	r0, r3
 8017928:	371c      	adds	r7, #28
 801792a:	46bd      	mov	sp, r7
 801792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017930:	4770      	bx	lr
 8017932:	bf00      	nop
 8017934:	200026b8 	.word	0x200026b8
 8017938:	2000268c 	.word	0x2000268c

0801793c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 801793c:	b580      	push	{r7, lr}
 801793e:	b084      	sub	sp, #16
 8017940:	af00      	add	r7, sp, #0
 8017942:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8017944:	687b      	ldr	r3, [r7, #4]
 8017946:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8017948:	687b      	ldr	r3, [r7, #4]
 801794a:	2b00      	cmp	r3, #0
 801794c:	d10a      	bne.n	8017964 <vTaskResume+0x28>
	__asm volatile
 801794e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017952:	f383 8811 	msr	BASEPRI, r3
 8017956:	f3bf 8f6f 	isb	sy
 801795a:	f3bf 8f4f 	dsb	sy
 801795e:	60bb      	str	r3, [r7, #8]
}
 8017960:	bf00      	nop
 8017962:	e7fe      	b.n	8017962 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8017964:	4b20      	ldr	r3, [pc, #128]	; (80179e8 <vTaskResume+0xac>)
 8017966:	681b      	ldr	r3, [r3, #0]
 8017968:	68fa      	ldr	r2, [r7, #12]
 801796a:	429a      	cmp	r2, r3
 801796c:	d038      	beq.n	80179e0 <vTaskResume+0xa4>
 801796e:	68fb      	ldr	r3, [r7, #12]
 8017970:	2b00      	cmp	r3, #0
 8017972:	d035      	beq.n	80179e0 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8017974:	f001 fb06 	bl	8018f84 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8017978:	68f8      	ldr	r0, [r7, #12]
 801797a:	f7ff ffad 	bl	80178d8 <prvTaskIsTaskSuspended>
 801797e:	4603      	mov	r3, r0
 8017980:	2b00      	cmp	r3, #0
 8017982:	d02b      	beq.n	80179dc <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8017984:	68fb      	ldr	r3, [r7, #12]
 8017986:	3304      	adds	r3, #4
 8017988:	4618      	mov	r0, r3
 801798a:	f7fe fca9 	bl	80162e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801798e:	68fb      	ldr	r3, [r7, #12]
 8017990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017992:	4b16      	ldr	r3, [pc, #88]	; (80179ec <vTaskResume+0xb0>)
 8017994:	681b      	ldr	r3, [r3, #0]
 8017996:	429a      	cmp	r2, r3
 8017998:	d903      	bls.n	80179a2 <vTaskResume+0x66>
 801799a:	68fb      	ldr	r3, [r7, #12]
 801799c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801799e:	4a13      	ldr	r2, [pc, #76]	; (80179ec <vTaskResume+0xb0>)
 80179a0:	6013      	str	r3, [r2, #0]
 80179a2:	68fb      	ldr	r3, [r7, #12]
 80179a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80179a6:	4613      	mov	r3, r2
 80179a8:	009b      	lsls	r3, r3, #2
 80179aa:	4413      	add	r3, r2
 80179ac:	009b      	lsls	r3, r3, #2
 80179ae:	4a10      	ldr	r2, [pc, #64]	; (80179f0 <vTaskResume+0xb4>)
 80179b0:	441a      	add	r2, r3
 80179b2:	68fb      	ldr	r3, [r7, #12]
 80179b4:	3304      	adds	r3, #4
 80179b6:	4619      	mov	r1, r3
 80179b8:	4610      	mov	r0, r2
 80179ba:	f7fe fc34 	bl	8016226 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80179be:	68fb      	ldr	r3, [r7, #12]
 80179c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80179c2:	4b09      	ldr	r3, [pc, #36]	; (80179e8 <vTaskResume+0xac>)
 80179c4:	681b      	ldr	r3, [r3, #0]
 80179c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80179c8:	429a      	cmp	r2, r3
 80179ca:	d307      	bcc.n	80179dc <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80179cc:	4b09      	ldr	r3, [pc, #36]	; (80179f4 <vTaskResume+0xb8>)
 80179ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80179d2:	601a      	str	r2, [r3, #0]
 80179d4:	f3bf 8f4f 	dsb	sy
 80179d8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80179dc:	f001 fb02 	bl	8018fe4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80179e0:	bf00      	nop
 80179e2:	3710      	adds	r7, #16
 80179e4:	46bd      	mov	sp, r7
 80179e6:	bd80      	pop	{r7, pc}
 80179e8:	200021f8 	.word	0x200021f8
 80179ec:	200026d4 	.word	0x200026d4
 80179f0:	200021fc 	.word	0x200021fc
 80179f4:	e000ed04 	.word	0xe000ed04

080179f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80179f8:	b580      	push	{r7, lr}
 80179fa:	b08a      	sub	sp, #40	; 0x28
 80179fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80179fe:	2300      	movs	r3, #0
 8017a00:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8017a02:	2300      	movs	r3, #0
 8017a04:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8017a06:	463a      	mov	r2, r7
 8017a08:	1d39      	adds	r1, r7, #4
 8017a0a:	f107 0308 	add.w	r3, r7, #8
 8017a0e:	4618      	mov	r0, r3
 8017a10:	f7fe fba8 	bl	8016164 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8017a14:	6839      	ldr	r1, [r7, #0]
 8017a16:	687b      	ldr	r3, [r7, #4]
 8017a18:	68ba      	ldr	r2, [r7, #8]
 8017a1a:	9202      	str	r2, [sp, #8]
 8017a1c:	9301      	str	r3, [sp, #4]
 8017a1e:	2300      	movs	r3, #0
 8017a20:	9300      	str	r3, [sp, #0]
 8017a22:	2300      	movs	r3, #0
 8017a24:	460a      	mov	r2, r1
 8017a26:	4924      	ldr	r1, [pc, #144]	; (8017ab8 <vTaskStartScheduler+0xc0>)
 8017a28:	4824      	ldr	r0, [pc, #144]	; (8017abc <vTaskStartScheduler+0xc4>)
 8017a2a:	f7ff fc91 	bl	8017350 <xTaskCreateStatic>
 8017a2e:	4603      	mov	r3, r0
 8017a30:	4a23      	ldr	r2, [pc, #140]	; (8017ac0 <vTaskStartScheduler+0xc8>)
 8017a32:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8017a34:	4b22      	ldr	r3, [pc, #136]	; (8017ac0 <vTaskStartScheduler+0xc8>)
 8017a36:	681b      	ldr	r3, [r3, #0]
 8017a38:	2b00      	cmp	r3, #0
 8017a3a:	d002      	beq.n	8017a42 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8017a3c:	2301      	movs	r3, #1
 8017a3e:	617b      	str	r3, [r7, #20]
 8017a40:	e001      	b.n	8017a46 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8017a42:	2300      	movs	r3, #0
 8017a44:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8017a46:	697b      	ldr	r3, [r7, #20]
 8017a48:	2b01      	cmp	r3, #1
 8017a4a:	d102      	bne.n	8017a52 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8017a4c:	f000 fe1e 	bl	801868c <xTimerCreateTimerTask>
 8017a50:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8017a52:	697b      	ldr	r3, [r7, #20]
 8017a54:	2b01      	cmp	r3, #1
 8017a56:	d11b      	bne.n	8017a90 <vTaskStartScheduler+0x98>
	__asm volatile
 8017a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a5c:	f383 8811 	msr	BASEPRI, r3
 8017a60:	f3bf 8f6f 	isb	sy
 8017a64:	f3bf 8f4f 	dsb	sy
 8017a68:	613b      	str	r3, [r7, #16]
}
 8017a6a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8017a6c:	4b15      	ldr	r3, [pc, #84]	; (8017ac4 <vTaskStartScheduler+0xcc>)
 8017a6e:	681b      	ldr	r3, [r3, #0]
 8017a70:	3354      	adds	r3, #84	; 0x54
 8017a72:	4a15      	ldr	r2, [pc, #84]	; (8017ac8 <vTaskStartScheduler+0xd0>)
 8017a74:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8017a76:	4b15      	ldr	r3, [pc, #84]	; (8017acc <vTaskStartScheduler+0xd4>)
 8017a78:	f04f 32ff 	mov.w	r2, #4294967295
 8017a7c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8017a7e:	4b14      	ldr	r3, [pc, #80]	; (8017ad0 <vTaskStartScheduler+0xd8>)
 8017a80:	2201      	movs	r2, #1
 8017a82:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8017a84:	4b13      	ldr	r3, [pc, #76]	; (8017ad4 <vTaskStartScheduler+0xdc>)
 8017a86:	2200      	movs	r2, #0
 8017a88:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8017a8a:	f001 f9d9 	bl	8018e40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8017a8e:	e00e      	b.n	8017aae <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8017a90:	697b      	ldr	r3, [r7, #20]
 8017a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017a96:	d10a      	bne.n	8017aae <vTaskStartScheduler+0xb6>
	__asm volatile
 8017a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a9c:	f383 8811 	msr	BASEPRI, r3
 8017aa0:	f3bf 8f6f 	isb	sy
 8017aa4:	f3bf 8f4f 	dsb	sy
 8017aa8:	60fb      	str	r3, [r7, #12]
}
 8017aaa:	bf00      	nop
 8017aac:	e7fe      	b.n	8017aac <vTaskStartScheduler+0xb4>
}
 8017aae:	bf00      	nop
 8017ab0:	3718      	adds	r7, #24
 8017ab2:	46bd      	mov	sp, r7
 8017ab4:	bd80      	pop	{r7, pc}
 8017ab6:	bf00      	nop
 8017ab8:	080228b4 	.word	0x080228b4
 8017abc:	080180fd 	.word	0x080180fd
 8017ac0:	200026f0 	.word	0x200026f0
 8017ac4:	200021f8 	.word	0x200021f8
 8017ac8:	200000f8 	.word	0x200000f8
 8017acc:	200026ec 	.word	0x200026ec
 8017ad0:	200026d8 	.word	0x200026d8
 8017ad4:	200026d0 	.word	0x200026d0

08017ad8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8017ad8:	b480      	push	{r7}
 8017ada:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8017adc:	4b04      	ldr	r3, [pc, #16]	; (8017af0 <vTaskSuspendAll+0x18>)
 8017ade:	681b      	ldr	r3, [r3, #0]
 8017ae0:	3301      	adds	r3, #1
 8017ae2:	4a03      	ldr	r2, [pc, #12]	; (8017af0 <vTaskSuspendAll+0x18>)
 8017ae4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8017ae6:	bf00      	nop
 8017ae8:	46bd      	mov	sp, r7
 8017aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017aee:	4770      	bx	lr
 8017af0:	200026f4 	.word	0x200026f4

08017af4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8017af4:	b580      	push	{r7, lr}
 8017af6:	b084      	sub	sp, #16
 8017af8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8017afa:	2300      	movs	r3, #0
 8017afc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8017afe:	2300      	movs	r3, #0
 8017b00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8017b02:	4b42      	ldr	r3, [pc, #264]	; (8017c0c <xTaskResumeAll+0x118>)
 8017b04:	681b      	ldr	r3, [r3, #0]
 8017b06:	2b00      	cmp	r3, #0
 8017b08:	d10a      	bne.n	8017b20 <xTaskResumeAll+0x2c>
	__asm volatile
 8017b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b0e:	f383 8811 	msr	BASEPRI, r3
 8017b12:	f3bf 8f6f 	isb	sy
 8017b16:	f3bf 8f4f 	dsb	sy
 8017b1a:	603b      	str	r3, [r7, #0]
}
 8017b1c:	bf00      	nop
 8017b1e:	e7fe      	b.n	8017b1e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8017b20:	f001 fa30 	bl	8018f84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8017b24:	4b39      	ldr	r3, [pc, #228]	; (8017c0c <xTaskResumeAll+0x118>)
 8017b26:	681b      	ldr	r3, [r3, #0]
 8017b28:	3b01      	subs	r3, #1
 8017b2a:	4a38      	ldr	r2, [pc, #224]	; (8017c0c <xTaskResumeAll+0x118>)
 8017b2c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017b2e:	4b37      	ldr	r3, [pc, #220]	; (8017c0c <xTaskResumeAll+0x118>)
 8017b30:	681b      	ldr	r3, [r3, #0]
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	d162      	bne.n	8017bfc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8017b36:	4b36      	ldr	r3, [pc, #216]	; (8017c10 <xTaskResumeAll+0x11c>)
 8017b38:	681b      	ldr	r3, [r3, #0]
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	d05e      	beq.n	8017bfc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017b3e:	e02f      	b.n	8017ba0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017b40:	4b34      	ldr	r3, [pc, #208]	; (8017c14 <xTaskResumeAll+0x120>)
 8017b42:	68db      	ldr	r3, [r3, #12]
 8017b44:	68db      	ldr	r3, [r3, #12]
 8017b46:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017b48:	68fb      	ldr	r3, [r7, #12]
 8017b4a:	3318      	adds	r3, #24
 8017b4c:	4618      	mov	r0, r3
 8017b4e:	f7fe fbc7 	bl	80162e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017b52:	68fb      	ldr	r3, [r7, #12]
 8017b54:	3304      	adds	r3, #4
 8017b56:	4618      	mov	r0, r3
 8017b58:	f7fe fbc2 	bl	80162e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017b5c:	68fb      	ldr	r3, [r7, #12]
 8017b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017b60:	4b2d      	ldr	r3, [pc, #180]	; (8017c18 <xTaskResumeAll+0x124>)
 8017b62:	681b      	ldr	r3, [r3, #0]
 8017b64:	429a      	cmp	r2, r3
 8017b66:	d903      	bls.n	8017b70 <xTaskResumeAll+0x7c>
 8017b68:	68fb      	ldr	r3, [r7, #12]
 8017b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b6c:	4a2a      	ldr	r2, [pc, #168]	; (8017c18 <xTaskResumeAll+0x124>)
 8017b6e:	6013      	str	r3, [r2, #0]
 8017b70:	68fb      	ldr	r3, [r7, #12]
 8017b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017b74:	4613      	mov	r3, r2
 8017b76:	009b      	lsls	r3, r3, #2
 8017b78:	4413      	add	r3, r2
 8017b7a:	009b      	lsls	r3, r3, #2
 8017b7c:	4a27      	ldr	r2, [pc, #156]	; (8017c1c <xTaskResumeAll+0x128>)
 8017b7e:	441a      	add	r2, r3
 8017b80:	68fb      	ldr	r3, [r7, #12]
 8017b82:	3304      	adds	r3, #4
 8017b84:	4619      	mov	r1, r3
 8017b86:	4610      	mov	r0, r2
 8017b88:	f7fe fb4d 	bl	8016226 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017b8c:	68fb      	ldr	r3, [r7, #12]
 8017b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017b90:	4b23      	ldr	r3, [pc, #140]	; (8017c20 <xTaskResumeAll+0x12c>)
 8017b92:	681b      	ldr	r3, [r3, #0]
 8017b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b96:	429a      	cmp	r2, r3
 8017b98:	d302      	bcc.n	8017ba0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8017b9a:	4b22      	ldr	r3, [pc, #136]	; (8017c24 <xTaskResumeAll+0x130>)
 8017b9c:	2201      	movs	r2, #1
 8017b9e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017ba0:	4b1c      	ldr	r3, [pc, #112]	; (8017c14 <xTaskResumeAll+0x120>)
 8017ba2:	681b      	ldr	r3, [r3, #0]
 8017ba4:	2b00      	cmp	r3, #0
 8017ba6:	d1cb      	bne.n	8017b40 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8017ba8:	68fb      	ldr	r3, [r7, #12]
 8017baa:	2b00      	cmp	r3, #0
 8017bac:	d001      	beq.n	8017bb2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8017bae:	f000 fb5f 	bl	8018270 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8017bb2:	4b1d      	ldr	r3, [pc, #116]	; (8017c28 <xTaskResumeAll+0x134>)
 8017bb4:	681b      	ldr	r3, [r3, #0]
 8017bb6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8017bb8:	687b      	ldr	r3, [r7, #4]
 8017bba:	2b00      	cmp	r3, #0
 8017bbc:	d010      	beq.n	8017be0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8017bbe:	f000 f847 	bl	8017c50 <xTaskIncrementTick>
 8017bc2:	4603      	mov	r3, r0
 8017bc4:	2b00      	cmp	r3, #0
 8017bc6:	d002      	beq.n	8017bce <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8017bc8:	4b16      	ldr	r3, [pc, #88]	; (8017c24 <xTaskResumeAll+0x130>)
 8017bca:	2201      	movs	r2, #1
 8017bcc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	3b01      	subs	r3, #1
 8017bd2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	2b00      	cmp	r3, #0
 8017bd8:	d1f1      	bne.n	8017bbe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8017bda:	4b13      	ldr	r3, [pc, #76]	; (8017c28 <xTaskResumeAll+0x134>)
 8017bdc:	2200      	movs	r2, #0
 8017bde:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8017be0:	4b10      	ldr	r3, [pc, #64]	; (8017c24 <xTaskResumeAll+0x130>)
 8017be2:	681b      	ldr	r3, [r3, #0]
 8017be4:	2b00      	cmp	r3, #0
 8017be6:	d009      	beq.n	8017bfc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8017be8:	2301      	movs	r3, #1
 8017bea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8017bec:	4b0f      	ldr	r3, [pc, #60]	; (8017c2c <xTaskResumeAll+0x138>)
 8017bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017bf2:	601a      	str	r2, [r3, #0]
 8017bf4:	f3bf 8f4f 	dsb	sy
 8017bf8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017bfc:	f001 f9f2 	bl	8018fe4 <vPortExitCritical>

	return xAlreadyYielded;
 8017c00:	68bb      	ldr	r3, [r7, #8]
}
 8017c02:	4618      	mov	r0, r3
 8017c04:	3710      	adds	r7, #16
 8017c06:	46bd      	mov	sp, r7
 8017c08:	bd80      	pop	{r7, pc}
 8017c0a:	bf00      	nop
 8017c0c:	200026f4 	.word	0x200026f4
 8017c10:	200026cc 	.word	0x200026cc
 8017c14:	2000268c 	.word	0x2000268c
 8017c18:	200026d4 	.word	0x200026d4
 8017c1c:	200021fc 	.word	0x200021fc
 8017c20:	200021f8 	.word	0x200021f8
 8017c24:	200026e0 	.word	0x200026e0
 8017c28:	200026dc 	.word	0x200026dc
 8017c2c:	e000ed04 	.word	0xe000ed04

08017c30 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8017c30:	b480      	push	{r7}
 8017c32:	b083      	sub	sp, #12
 8017c34:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8017c36:	4b05      	ldr	r3, [pc, #20]	; (8017c4c <xTaskGetTickCount+0x1c>)
 8017c38:	681b      	ldr	r3, [r3, #0]
 8017c3a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8017c3c:	687b      	ldr	r3, [r7, #4]
}
 8017c3e:	4618      	mov	r0, r3
 8017c40:	370c      	adds	r7, #12
 8017c42:	46bd      	mov	sp, r7
 8017c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c48:	4770      	bx	lr
 8017c4a:	bf00      	nop
 8017c4c:	200026d0 	.word	0x200026d0

08017c50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8017c50:	b580      	push	{r7, lr}
 8017c52:	b086      	sub	sp, #24
 8017c54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8017c56:	2300      	movs	r3, #0
 8017c58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017c5a:	4b4f      	ldr	r3, [pc, #316]	; (8017d98 <xTaskIncrementTick+0x148>)
 8017c5c:	681b      	ldr	r3, [r3, #0]
 8017c5e:	2b00      	cmp	r3, #0
 8017c60:	f040 808f 	bne.w	8017d82 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8017c64:	4b4d      	ldr	r3, [pc, #308]	; (8017d9c <xTaskIncrementTick+0x14c>)
 8017c66:	681b      	ldr	r3, [r3, #0]
 8017c68:	3301      	adds	r3, #1
 8017c6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8017c6c:	4a4b      	ldr	r2, [pc, #300]	; (8017d9c <xTaskIncrementTick+0x14c>)
 8017c6e:	693b      	ldr	r3, [r7, #16]
 8017c70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8017c72:	693b      	ldr	r3, [r7, #16]
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	d120      	bne.n	8017cba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8017c78:	4b49      	ldr	r3, [pc, #292]	; (8017da0 <xTaskIncrementTick+0x150>)
 8017c7a:	681b      	ldr	r3, [r3, #0]
 8017c7c:	681b      	ldr	r3, [r3, #0]
 8017c7e:	2b00      	cmp	r3, #0
 8017c80:	d00a      	beq.n	8017c98 <xTaskIncrementTick+0x48>
	__asm volatile
 8017c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c86:	f383 8811 	msr	BASEPRI, r3
 8017c8a:	f3bf 8f6f 	isb	sy
 8017c8e:	f3bf 8f4f 	dsb	sy
 8017c92:	603b      	str	r3, [r7, #0]
}
 8017c94:	bf00      	nop
 8017c96:	e7fe      	b.n	8017c96 <xTaskIncrementTick+0x46>
 8017c98:	4b41      	ldr	r3, [pc, #260]	; (8017da0 <xTaskIncrementTick+0x150>)
 8017c9a:	681b      	ldr	r3, [r3, #0]
 8017c9c:	60fb      	str	r3, [r7, #12]
 8017c9e:	4b41      	ldr	r3, [pc, #260]	; (8017da4 <xTaskIncrementTick+0x154>)
 8017ca0:	681b      	ldr	r3, [r3, #0]
 8017ca2:	4a3f      	ldr	r2, [pc, #252]	; (8017da0 <xTaskIncrementTick+0x150>)
 8017ca4:	6013      	str	r3, [r2, #0]
 8017ca6:	4a3f      	ldr	r2, [pc, #252]	; (8017da4 <xTaskIncrementTick+0x154>)
 8017ca8:	68fb      	ldr	r3, [r7, #12]
 8017caa:	6013      	str	r3, [r2, #0]
 8017cac:	4b3e      	ldr	r3, [pc, #248]	; (8017da8 <xTaskIncrementTick+0x158>)
 8017cae:	681b      	ldr	r3, [r3, #0]
 8017cb0:	3301      	adds	r3, #1
 8017cb2:	4a3d      	ldr	r2, [pc, #244]	; (8017da8 <xTaskIncrementTick+0x158>)
 8017cb4:	6013      	str	r3, [r2, #0]
 8017cb6:	f000 fadb 	bl	8018270 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8017cba:	4b3c      	ldr	r3, [pc, #240]	; (8017dac <xTaskIncrementTick+0x15c>)
 8017cbc:	681b      	ldr	r3, [r3, #0]
 8017cbe:	693a      	ldr	r2, [r7, #16]
 8017cc0:	429a      	cmp	r2, r3
 8017cc2:	d349      	bcc.n	8017d58 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017cc4:	4b36      	ldr	r3, [pc, #216]	; (8017da0 <xTaskIncrementTick+0x150>)
 8017cc6:	681b      	ldr	r3, [r3, #0]
 8017cc8:	681b      	ldr	r3, [r3, #0]
 8017cca:	2b00      	cmp	r3, #0
 8017ccc:	d104      	bne.n	8017cd8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017cce:	4b37      	ldr	r3, [pc, #220]	; (8017dac <xTaskIncrementTick+0x15c>)
 8017cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8017cd4:	601a      	str	r2, [r3, #0]
					break;
 8017cd6:	e03f      	b.n	8017d58 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017cd8:	4b31      	ldr	r3, [pc, #196]	; (8017da0 <xTaskIncrementTick+0x150>)
 8017cda:	681b      	ldr	r3, [r3, #0]
 8017cdc:	68db      	ldr	r3, [r3, #12]
 8017cde:	68db      	ldr	r3, [r3, #12]
 8017ce0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8017ce2:	68bb      	ldr	r3, [r7, #8]
 8017ce4:	685b      	ldr	r3, [r3, #4]
 8017ce6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8017ce8:	693a      	ldr	r2, [r7, #16]
 8017cea:	687b      	ldr	r3, [r7, #4]
 8017cec:	429a      	cmp	r2, r3
 8017cee:	d203      	bcs.n	8017cf8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8017cf0:	4a2e      	ldr	r2, [pc, #184]	; (8017dac <xTaskIncrementTick+0x15c>)
 8017cf2:	687b      	ldr	r3, [r7, #4]
 8017cf4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8017cf6:	e02f      	b.n	8017d58 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017cf8:	68bb      	ldr	r3, [r7, #8]
 8017cfa:	3304      	adds	r3, #4
 8017cfc:	4618      	mov	r0, r3
 8017cfe:	f7fe faef 	bl	80162e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8017d02:	68bb      	ldr	r3, [r7, #8]
 8017d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017d06:	2b00      	cmp	r3, #0
 8017d08:	d004      	beq.n	8017d14 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017d0a:	68bb      	ldr	r3, [r7, #8]
 8017d0c:	3318      	adds	r3, #24
 8017d0e:	4618      	mov	r0, r3
 8017d10:	f7fe fae6 	bl	80162e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8017d14:	68bb      	ldr	r3, [r7, #8]
 8017d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017d18:	4b25      	ldr	r3, [pc, #148]	; (8017db0 <xTaskIncrementTick+0x160>)
 8017d1a:	681b      	ldr	r3, [r3, #0]
 8017d1c:	429a      	cmp	r2, r3
 8017d1e:	d903      	bls.n	8017d28 <xTaskIncrementTick+0xd8>
 8017d20:	68bb      	ldr	r3, [r7, #8]
 8017d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d24:	4a22      	ldr	r2, [pc, #136]	; (8017db0 <xTaskIncrementTick+0x160>)
 8017d26:	6013      	str	r3, [r2, #0]
 8017d28:	68bb      	ldr	r3, [r7, #8]
 8017d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017d2c:	4613      	mov	r3, r2
 8017d2e:	009b      	lsls	r3, r3, #2
 8017d30:	4413      	add	r3, r2
 8017d32:	009b      	lsls	r3, r3, #2
 8017d34:	4a1f      	ldr	r2, [pc, #124]	; (8017db4 <xTaskIncrementTick+0x164>)
 8017d36:	441a      	add	r2, r3
 8017d38:	68bb      	ldr	r3, [r7, #8]
 8017d3a:	3304      	adds	r3, #4
 8017d3c:	4619      	mov	r1, r3
 8017d3e:	4610      	mov	r0, r2
 8017d40:	f7fe fa71 	bl	8016226 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017d44:	68bb      	ldr	r3, [r7, #8]
 8017d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017d48:	4b1b      	ldr	r3, [pc, #108]	; (8017db8 <xTaskIncrementTick+0x168>)
 8017d4a:	681b      	ldr	r3, [r3, #0]
 8017d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d4e:	429a      	cmp	r2, r3
 8017d50:	d3b8      	bcc.n	8017cc4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8017d52:	2301      	movs	r3, #1
 8017d54:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017d56:	e7b5      	b.n	8017cc4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8017d58:	4b17      	ldr	r3, [pc, #92]	; (8017db8 <xTaskIncrementTick+0x168>)
 8017d5a:	681b      	ldr	r3, [r3, #0]
 8017d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017d5e:	4915      	ldr	r1, [pc, #84]	; (8017db4 <xTaskIncrementTick+0x164>)
 8017d60:	4613      	mov	r3, r2
 8017d62:	009b      	lsls	r3, r3, #2
 8017d64:	4413      	add	r3, r2
 8017d66:	009b      	lsls	r3, r3, #2
 8017d68:	440b      	add	r3, r1
 8017d6a:	681b      	ldr	r3, [r3, #0]
 8017d6c:	2b01      	cmp	r3, #1
 8017d6e:	d901      	bls.n	8017d74 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8017d70:	2301      	movs	r3, #1
 8017d72:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8017d74:	4b11      	ldr	r3, [pc, #68]	; (8017dbc <xTaskIncrementTick+0x16c>)
 8017d76:	681b      	ldr	r3, [r3, #0]
 8017d78:	2b00      	cmp	r3, #0
 8017d7a:	d007      	beq.n	8017d8c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8017d7c:	2301      	movs	r3, #1
 8017d7e:	617b      	str	r3, [r7, #20]
 8017d80:	e004      	b.n	8017d8c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8017d82:	4b0f      	ldr	r3, [pc, #60]	; (8017dc0 <xTaskIncrementTick+0x170>)
 8017d84:	681b      	ldr	r3, [r3, #0]
 8017d86:	3301      	adds	r3, #1
 8017d88:	4a0d      	ldr	r2, [pc, #52]	; (8017dc0 <xTaskIncrementTick+0x170>)
 8017d8a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8017d8c:	697b      	ldr	r3, [r7, #20]
}
 8017d8e:	4618      	mov	r0, r3
 8017d90:	3718      	adds	r7, #24
 8017d92:	46bd      	mov	sp, r7
 8017d94:	bd80      	pop	{r7, pc}
 8017d96:	bf00      	nop
 8017d98:	200026f4 	.word	0x200026f4
 8017d9c:	200026d0 	.word	0x200026d0
 8017da0:	20002684 	.word	0x20002684
 8017da4:	20002688 	.word	0x20002688
 8017da8:	200026e4 	.word	0x200026e4
 8017dac:	200026ec 	.word	0x200026ec
 8017db0:	200026d4 	.word	0x200026d4
 8017db4:	200021fc 	.word	0x200021fc
 8017db8:	200021f8 	.word	0x200021f8
 8017dbc:	200026e0 	.word	0x200026e0
 8017dc0:	200026dc 	.word	0x200026dc

08017dc4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8017dc4:	b480      	push	{r7}
 8017dc6:	b085      	sub	sp, #20
 8017dc8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8017dca:	4b2a      	ldr	r3, [pc, #168]	; (8017e74 <vTaskSwitchContext+0xb0>)
 8017dcc:	681b      	ldr	r3, [r3, #0]
 8017dce:	2b00      	cmp	r3, #0
 8017dd0:	d003      	beq.n	8017dda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8017dd2:	4b29      	ldr	r3, [pc, #164]	; (8017e78 <vTaskSwitchContext+0xb4>)
 8017dd4:	2201      	movs	r2, #1
 8017dd6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8017dd8:	e046      	b.n	8017e68 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8017dda:	4b27      	ldr	r3, [pc, #156]	; (8017e78 <vTaskSwitchContext+0xb4>)
 8017ddc:	2200      	movs	r2, #0
 8017dde:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017de0:	4b26      	ldr	r3, [pc, #152]	; (8017e7c <vTaskSwitchContext+0xb8>)
 8017de2:	681b      	ldr	r3, [r3, #0]
 8017de4:	60fb      	str	r3, [r7, #12]
 8017de6:	e010      	b.n	8017e0a <vTaskSwitchContext+0x46>
 8017de8:	68fb      	ldr	r3, [r7, #12]
 8017dea:	2b00      	cmp	r3, #0
 8017dec:	d10a      	bne.n	8017e04 <vTaskSwitchContext+0x40>
	__asm volatile
 8017dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017df2:	f383 8811 	msr	BASEPRI, r3
 8017df6:	f3bf 8f6f 	isb	sy
 8017dfa:	f3bf 8f4f 	dsb	sy
 8017dfe:	607b      	str	r3, [r7, #4]
}
 8017e00:	bf00      	nop
 8017e02:	e7fe      	b.n	8017e02 <vTaskSwitchContext+0x3e>
 8017e04:	68fb      	ldr	r3, [r7, #12]
 8017e06:	3b01      	subs	r3, #1
 8017e08:	60fb      	str	r3, [r7, #12]
 8017e0a:	491d      	ldr	r1, [pc, #116]	; (8017e80 <vTaskSwitchContext+0xbc>)
 8017e0c:	68fa      	ldr	r2, [r7, #12]
 8017e0e:	4613      	mov	r3, r2
 8017e10:	009b      	lsls	r3, r3, #2
 8017e12:	4413      	add	r3, r2
 8017e14:	009b      	lsls	r3, r3, #2
 8017e16:	440b      	add	r3, r1
 8017e18:	681b      	ldr	r3, [r3, #0]
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	d0e4      	beq.n	8017de8 <vTaskSwitchContext+0x24>
 8017e1e:	68fa      	ldr	r2, [r7, #12]
 8017e20:	4613      	mov	r3, r2
 8017e22:	009b      	lsls	r3, r3, #2
 8017e24:	4413      	add	r3, r2
 8017e26:	009b      	lsls	r3, r3, #2
 8017e28:	4a15      	ldr	r2, [pc, #84]	; (8017e80 <vTaskSwitchContext+0xbc>)
 8017e2a:	4413      	add	r3, r2
 8017e2c:	60bb      	str	r3, [r7, #8]
 8017e2e:	68bb      	ldr	r3, [r7, #8]
 8017e30:	685b      	ldr	r3, [r3, #4]
 8017e32:	685a      	ldr	r2, [r3, #4]
 8017e34:	68bb      	ldr	r3, [r7, #8]
 8017e36:	605a      	str	r2, [r3, #4]
 8017e38:	68bb      	ldr	r3, [r7, #8]
 8017e3a:	685a      	ldr	r2, [r3, #4]
 8017e3c:	68bb      	ldr	r3, [r7, #8]
 8017e3e:	3308      	adds	r3, #8
 8017e40:	429a      	cmp	r2, r3
 8017e42:	d104      	bne.n	8017e4e <vTaskSwitchContext+0x8a>
 8017e44:	68bb      	ldr	r3, [r7, #8]
 8017e46:	685b      	ldr	r3, [r3, #4]
 8017e48:	685a      	ldr	r2, [r3, #4]
 8017e4a:	68bb      	ldr	r3, [r7, #8]
 8017e4c:	605a      	str	r2, [r3, #4]
 8017e4e:	68bb      	ldr	r3, [r7, #8]
 8017e50:	685b      	ldr	r3, [r3, #4]
 8017e52:	68db      	ldr	r3, [r3, #12]
 8017e54:	4a0b      	ldr	r2, [pc, #44]	; (8017e84 <vTaskSwitchContext+0xc0>)
 8017e56:	6013      	str	r3, [r2, #0]
 8017e58:	4a08      	ldr	r2, [pc, #32]	; (8017e7c <vTaskSwitchContext+0xb8>)
 8017e5a:	68fb      	ldr	r3, [r7, #12]
 8017e5c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8017e5e:	4b09      	ldr	r3, [pc, #36]	; (8017e84 <vTaskSwitchContext+0xc0>)
 8017e60:	681b      	ldr	r3, [r3, #0]
 8017e62:	3354      	adds	r3, #84	; 0x54
 8017e64:	4a08      	ldr	r2, [pc, #32]	; (8017e88 <vTaskSwitchContext+0xc4>)
 8017e66:	6013      	str	r3, [r2, #0]
}
 8017e68:	bf00      	nop
 8017e6a:	3714      	adds	r7, #20
 8017e6c:	46bd      	mov	sp, r7
 8017e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e72:	4770      	bx	lr
 8017e74:	200026f4 	.word	0x200026f4
 8017e78:	200026e0 	.word	0x200026e0
 8017e7c:	200026d4 	.word	0x200026d4
 8017e80:	200021fc 	.word	0x200021fc
 8017e84:	200021f8 	.word	0x200021f8
 8017e88:	200000f8 	.word	0x200000f8

08017e8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8017e8c:	b580      	push	{r7, lr}
 8017e8e:	b084      	sub	sp, #16
 8017e90:	af00      	add	r7, sp, #0
 8017e92:	6078      	str	r0, [r7, #4]
 8017e94:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8017e96:	687b      	ldr	r3, [r7, #4]
 8017e98:	2b00      	cmp	r3, #0
 8017e9a:	d10a      	bne.n	8017eb2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8017e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ea0:	f383 8811 	msr	BASEPRI, r3
 8017ea4:	f3bf 8f6f 	isb	sy
 8017ea8:	f3bf 8f4f 	dsb	sy
 8017eac:	60fb      	str	r3, [r7, #12]
}
 8017eae:	bf00      	nop
 8017eb0:	e7fe      	b.n	8017eb0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017eb2:	4b07      	ldr	r3, [pc, #28]	; (8017ed0 <vTaskPlaceOnEventList+0x44>)
 8017eb4:	681b      	ldr	r3, [r3, #0]
 8017eb6:	3318      	adds	r3, #24
 8017eb8:	4619      	mov	r1, r3
 8017eba:	6878      	ldr	r0, [r7, #4]
 8017ebc:	f7fe f9d7 	bl	801626e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017ec0:	2101      	movs	r1, #1
 8017ec2:	6838      	ldr	r0, [r7, #0]
 8017ec4:	f000 fb8e 	bl	80185e4 <prvAddCurrentTaskToDelayedList>
}
 8017ec8:	bf00      	nop
 8017eca:	3710      	adds	r7, #16
 8017ecc:	46bd      	mov	sp, r7
 8017ece:	bd80      	pop	{r7, pc}
 8017ed0:	200021f8 	.word	0x200021f8

08017ed4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017ed4:	b580      	push	{r7, lr}
 8017ed6:	b086      	sub	sp, #24
 8017ed8:	af00      	add	r7, sp, #0
 8017eda:	60f8      	str	r0, [r7, #12]
 8017edc:	60b9      	str	r1, [r7, #8]
 8017ede:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8017ee0:	68fb      	ldr	r3, [r7, #12]
 8017ee2:	2b00      	cmp	r3, #0
 8017ee4:	d10a      	bne.n	8017efc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8017ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017eea:	f383 8811 	msr	BASEPRI, r3
 8017eee:	f3bf 8f6f 	isb	sy
 8017ef2:	f3bf 8f4f 	dsb	sy
 8017ef6:	617b      	str	r3, [r7, #20]
}
 8017ef8:	bf00      	nop
 8017efa:	e7fe      	b.n	8017efa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017efc:	4b0a      	ldr	r3, [pc, #40]	; (8017f28 <vTaskPlaceOnEventListRestricted+0x54>)
 8017efe:	681b      	ldr	r3, [r3, #0]
 8017f00:	3318      	adds	r3, #24
 8017f02:	4619      	mov	r1, r3
 8017f04:	68f8      	ldr	r0, [r7, #12]
 8017f06:	f7fe f98e 	bl	8016226 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8017f0a:	687b      	ldr	r3, [r7, #4]
 8017f0c:	2b00      	cmp	r3, #0
 8017f0e:	d002      	beq.n	8017f16 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8017f10:	f04f 33ff 	mov.w	r3, #4294967295
 8017f14:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8017f16:	6879      	ldr	r1, [r7, #4]
 8017f18:	68b8      	ldr	r0, [r7, #8]
 8017f1a:	f000 fb63 	bl	80185e4 <prvAddCurrentTaskToDelayedList>
	}
 8017f1e:	bf00      	nop
 8017f20:	3718      	adds	r7, #24
 8017f22:	46bd      	mov	sp, r7
 8017f24:	bd80      	pop	{r7, pc}
 8017f26:	bf00      	nop
 8017f28:	200021f8 	.word	0x200021f8

08017f2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8017f2c:	b580      	push	{r7, lr}
 8017f2e:	b086      	sub	sp, #24
 8017f30:	af00      	add	r7, sp, #0
 8017f32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017f34:	687b      	ldr	r3, [r7, #4]
 8017f36:	68db      	ldr	r3, [r3, #12]
 8017f38:	68db      	ldr	r3, [r3, #12]
 8017f3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8017f3c:	693b      	ldr	r3, [r7, #16]
 8017f3e:	2b00      	cmp	r3, #0
 8017f40:	d10a      	bne.n	8017f58 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8017f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f46:	f383 8811 	msr	BASEPRI, r3
 8017f4a:	f3bf 8f6f 	isb	sy
 8017f4e:	f3bf 8f4f 	dsb	sy
 8017f52:	60fb      	str	r3, [r7, #12]
}
 8017f54:	bf00      	nop
 8017f56:	e7fe      	b.n	8017f56 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8017f58:	693b      	ldr	r3, [r7, #16]
 8017f5a:	3318      	adds	r3, #24
 8017f5c:	4618      	mov	r0, r3
 8017f5e:	f7fe f9bf 	bl	80162e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017f62:	4b1e      	ldr	r3, [pc, #120]	; (8017fdc <xTaskRemoveFromEventList+0xb0>)
 8017f64:	681b      	ldr	r3, [r3, #0]
 8017f66:	2b00      	cmp	r3, #0
 8017f68:	d11d      	bne.n	8017fa6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8017f6a:	693b      	ldr	r3, [r7, #16]
 8017f6c:	3304      	adds	r3, #4
 8017f6e:	4618      	mov	r0, r3
 8017f70:	f7fe f9b6 	bl	80162e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8017f74:	693b      	ldr	r3, [r7, #16]
 8017f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017f78:	4b19      	ldr	r3, [pc, #100]	; (8017fe0 <xTaskRemoveFromEventList+0xb4>)
 8017f7a:	681b      	ldr	r3, [r3, #0]
 8017f7c:	429a      	cmp	r2, r3
 8017f7e:	d903      	bls.n	8017f88 <xTaskRemoveFromEventList+0x5c>
 8017f80:	693b      	ldr	r3, [r7, #16]
 8017f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f84:	4a16      	ldr	r2, [pc, #88]	; (8017fe0 <xTaskRemoveFromEventList+0xb4>)
 8017f86:	6013      	str	r3, [r2, #0]
 8017f88:	693b      	ldr	r3, [r7, #16]
 8017f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017f8c:	4613      	mov	r3, r2
 8017f8e:	009b      	lsls	r3, r3, #2
 8017f90:	4413      	add	r3, r2
 8017f92:	009b      	lsls	r3, r3, #2
 8017f94:	4a13      	ldr	r2, [pc, #76]	; (8017fe4 <xTaskRemoveFromEventList+0xb8>)
 8017f96:	441a      	add	r2, r3
 8017f98:	693b      	ldr	r3, [r7, #16]
 8017f9a:	3304      	adds	r3, #4
 8017f9c:	4619      	mov	r1, r3
 8017f9e:	4610      	mov	r0, r2
 8017fa0:	f7fe f941 	bl	8016226 <vListInsertEnd>
 8017fa4:	e005      	b.n	8017fb2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8017fa6:	693b      	ldr	r3, [r7, #16]
 8017fa8:	3318      	adds	r3, #24
 8017faa:	4619      	mov	r1, r3
 8017fac:	480e      	ldr	r0, [pc, #56]	; (8017fe8 <xTaskRemoveFromEventList+0xbc>)
 8017fae:	f7fe f93a 	bl	8016226 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8017fb2:	693b      	ldr	r3, [r7, #16]
 8017fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017fb6:	4b0d      	ldr	r3, [pc, #52]	; (8017fec <xTaskRemoveFromEventList+0xc0>)
 8017fb8:	681b      	ldr	r3, [r3, #0]
 8017fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017fbc:	429a      	cmp	r2, r3
 8017fbe:	d905      	bls.n	8017fcc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8017fc0:	2301      	movs	r3, #1
 8017fc2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8017fc4:	4b0a      	ldr	r3, [pc, #40]	; (8017ff0 <xTaskRemoveFromEventList+0xc4>)
 8017fc6:	2201      	movs	r2, #1
 8017fc8:	601a      	str	r2, [r3, #0]
 8017fca:	e001      	b.n	8017fd0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8017fcc:	2300      	movs	r3, #0
 8017fce:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8017fd0:	697b      	ldr	r3, [r7, #20]
}
 8017fd2:	4618      	mov	r0, r3
 8017fd4:	3718      	adds	r7, #24
 8017fd6:	46bd      	mov	sp, r7
 8017fd8:	bd80      	pop	{r7, pc}
 8017fda:	bf00      	nop
 8017fdc:	200026f4 	.word	0x200026f4
 8017fe0:	200026d4 	.word	0x200026d4
 8017fe4:	200021fc 	.word	0x200021fc
 8017fe8:	2000268c 	.word	0x2000268c
 8017fec:	200021f8 	.word	0x200021f8
 8017ff0:	200026e0 	.word	0x200026e0

08017ff4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8017ff4:	b480      	push	{r7}
 8017ff6:	b083      	sub	sp, #12
 8017ff8:	af00      	add	r7, sp, #0
 8017ffa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8017ffc:	4b06      	ldr	r3, [pc, #24]	; (8018018 <vTaskInternalSetTimeOutState+0x24>)
 8017ffe:	681a      	ldr	r2, [r3, #0]
 8018000:	687b      	ldr	r3, [r7, #4]
 8018002:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8018004:	4b05      	ldr	r3, [pc, #20]	; (801801c <vTaskInternalSetTimeOutState+0x28>)
 8018006:	681a      	ldr	r2, [r3, #0]
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	605a      	str	r2, [r3, #4]
}
 801800c:	bf00      	nop
 801800e:	370c      	adds	r7, #12
 8018010:	46bd      	mov	sp, r7
 8018012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018016:	4770      	bx	lr
 8018018:	200026e4 	.word	0x200026e4
 801801c:	200026d0 	.word	0x200026d0

08018020 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8018020:	b580      	push	{r7, lr}
 8018022:	b088      	sub	sp, #32
 8018024:	af00      	add	r7, sp, #0
 8018026:	6078      	str	r0, [r7, #4]
 8018028:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801802a:	687b      	ldr	r3, [r7, #4]
 801802c:	2b00      	cmp	r3, #0
 801802e:	d10a      	bne.n	8018046 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8018030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018034:	f383 8811 	msr	BASEPRI, r3
 8018038:	f3bf 8f6f 	isb	sy
 801803c:	f3bf 8f4f 	dsb	sy
 8018040:	613b      	str	r3, [r7, #16]
}
 8018042:	bf00      	nop
 8018044:	e7fe      	b.n	8018044 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8018046:	683b      	ldr	r3, [r7, #0]
 8018048:	2b00      	cmp	r3, #0
 801804a:	d10a      	bne.n	8018062 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801804c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018050:	f383 8811 	msr	BASEPRI, r3
 8018054:	f3bf 8f6f 	isb	sy
 8018058:	f3bf 8f4f 	dsb	sy
 801805c:	60fb      	str	r3, [r7, #12]
}
 801805e:	bf00      	nop
 8018060:	e7fe      	b.n	8018060 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8018062:	f000 ff8f 	bl	8018f84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8018066:	4b1d      	ldr	r3, [pc, #116]	; (80180dc <xTaskCheckForTimeOut+0xbc>)
 8018068:	681b      	ldr	r3, [r3, #0]
 801806a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801806c:	687b      	ldr	r3, [r7, #4]
 801806e:	685b      	ldr	r3, [r3, #4]
 8018070:	69ba      	ldr	r2, [r7, #24]
 8018072:	1ad3      	subs	r3, r2, r3
 8018074:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8018076:	683b      	ldr	r3, [r7, #0]
 8018078:	681b      	ldr	r3, [r3, #0]
 801807a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801807e:	d102      	bne.n	8018086 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8018080:	2300      	movs	r3, #0
 8018082:	61fb      	str	r3, [r7, #28]
 8018084:	e023      	b.n	80180ce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8018086:	687b      	ldr	r3, [r7, #4]
 8018088:	681a      	ldr	r2, [r3, #0]
 801808a:	4b15      	ldr	r3, [pc, #84]	; (80180e0 <xTaskCheckForTimeOut+0xc0>)
 801808c:	681b      	ldr	r3, [r3, #0]
 801808e:	429a      	cmp	r2, r3
 8018090:	d007      	beq.n	80180a2 <xTaskCheckForTimeOut+0x82>
 8018092:	687b      	ldr	r3, [r7, #4]
 8018094:	685b      	ldr	r3, [r3, #4]
 8018096:	69ba      	ldr	r2, [r7, #24]
 8018098:	429a      	cmp	r2, r3
 801809a:	d302      	bcc.n	80180a2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801809c:	2301      	movs	r3, #1
 801809e:	61fb      	str	r3, [r7, #28]
 80180a0:	e015      	b.n	80180ce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80180a2:	683b      	ldr	r3, [r7, #0]
 80180a4:	681b      	ldr	r3, [r3, #0]
 80180a6:	697a      	ldr	r2, [r7, #20]
 80180a8:	429a      	cmp	r2, r3
 80180aa:	d20b      	bcs.n	80180c4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80180ac:	683b      	ldr	r3, [r7, #0]
 80180ae:	681a      	ldr	r2, [r3, #0]
 80180b0:	697b      	ldr	r3, [r7, #20]
 80180b2:	1ad2      	subs	r2, r2, r3
 80180b4:	683b      	ldr	r3, [r7, #0]
 80180b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80180b8:	6878      	ldr	r0, [r7, #4]
 80180ba:	f7ff ff9b 	bl	8017ff4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80180be:	2300      	movs	r3, #0
 80180c0:	61fb      	str	r3, [r7, #28]
 80180c2:	e004      	b.n	80180ce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80180c4:	683b      	ldr	r3, [r7, #0]
 80180c6:	2200      	movs	r2, #0
 80180c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80180ca:	2301      	movs	r3, #1
 80180cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80180ce:	f000 ff89 	bl	8018fe4 <vPortExitCritical>

	return xReturn;
 80180d2:	69fb      	ldr	r3, [r7, #28]
}
 80180d4:	4618      	mov	r0, r3
 80180d6:	3720      	adds	r7, #32
 80180d8:	46bd      	mov	sp, r7
 80180da:	bd80      	pop	{r7, pc}
 80180dc:	200026d0 	.word	0x200026d0
 80180e0:	200026e4 	.word	0x200026e4

080180e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80180e4:	b480      	push	{r7}
 80180e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80180e8:	4b03      	ldr	r3, [pc, #12]	; (80180f8 <vTaskMissedYield+0x14>)
 80180ea:	2201      	movs	r2, #1
 80180ec:	601a      	str	r2, [r3, #0]
}
 80180ee:	bf00      	nop
 80180f0:	46bd      	mov	sp, r7
 80180f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180f6:	4770      	bx	lr
 80180f8:	200026e0 	.word	0x200026e0

080180fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80180fc:	b580      	push	{r7, lr}
 80180fe:	b082      	sub	sp, #8
 8018100:	af00      	add	r7, sp, #0
 8018102:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8018104:	f000 f852 	bl	80181ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8018108:	4b06      	ldr	r3, [pc, #24]	; (8018124 <prvIdleTask+0x28>)
 801810a:	681b      	ldr	r3, [r3, #0]
 801810c:	2b01      	cmp	r3, #1
 801810e:	d9f9      	bls.n	8018104 <prvIdleTask+0x8>
			{
				taskYIELD();
 8018110:	4b05      	ldr	r3, [pc, #20]	; (8018128 <prvIdleTask+0x2c>)
 8018112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018116:	601a      	str	r2, [r3, #0]
 8018118:	f3bf 8f4f 	dsb	sy
 801811c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8018120:	e7f0      	b.n	8018104 <prvIdleTask+0x8>
 8018122:	bf00      	nop
 8018124:	200021fc 	.word	0x200021fc
 8018128:	e000ed04 	.word	0xe000ed04

0801812c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801812c:	b580      	push	{r7, lr}
 801812e:	b082      	sub	sp, #8
 8018130:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018132:	2300      	movs	r3, #0
 8018134:	607b      	str	r3, [r7, #4]
 8018136:	e00c      	b.n	8018152 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8018138:	687a      	ldr	r2, [r7, #4]
 801813a:	4613      	mov	r3, r2
 801813c:	009b      	lsls	r3, r3, #2
 801813e:	4413      	add	r3, r2
 8018140:	009b      	lsls	r3, r3, #2
 8018142:	4a12      	ldr	r2, [pc, #72]	; (801818c <prvInitialiseTaskLists+0x60>)
 8018144:	4413      	add	r3, r2
 8018146:	4618      	mov	r0, r3
 8018148:	f7fe f840 	bl	80161cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801814c:	687b      	ldr	r3, [r7, #4]
 801814e:	3301      	adds	r3, #1
 8018150:	607b      	str	r3, [r7, #4]
 8018152:	687b      	ldr	r3, [r7, #4]
 8018154:	2b37      	cmp	r3, #55	; 0x37
 8018156:	d9ef      	bls.n	8018138 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8018158:	480d      	ldr	r0, [pc, #52]	; (8018190 <prvInitialiseTaskLists+0x64>)
 801815a:	f7fe f837 	bl	80161cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801815e:	480d      	ldr	r0, [pc, #52]	; (8018194 <prvInitialiseTaskLists+0x68>)
 8018160:	f7fe f834 	bl	80161cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8018164:	480c      	ldr	r0, [pc, #48]	; (8018198 <prvInitialiseTaskLists+0x6c>)
 8018166:	f7fe f831 	bl	80161cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801816a:	480c      	ldr	r0, [pc, #48]	; (801819c <prvInitialiseTaskLists+0x70>)
 801816c:	f7fe f82e 	bl	80161cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8018170:	480b      	ldr	r0, [pc, #44]	; (80181a0 <prvInitialiseTaskLists+0x74>)
 8018172:	f7fe f82b 	bl	80161cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8018176:	4b0b      	ldr	r3, [pc, #44]	; (80181a4 <prvInitialiseTaskLists+0x78>)
 8018178:	4a05      	ldr	r2, [pc, #20]	; (8018190 <prvInitialiseTaskLists+0x64>)
 801817a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801817c:	4b0a      	ldr	r3, [pc, #40]	; (80181a8 <prvInitialiseTaskLists+0x7c>)
 801817e:	4a05      	ldr	r2, [pc, #20]	; (8018194 <prvInitialiseTaskLists+0x68>)
 8018180:	601a      	str	r2, [r3, #0]
}
 8018182:	bf00      	nop
 8018184:	3708      	adds	r7, #8
 8018186:	46bd      	mov	sp, r7
 8018188:	bd80      	pop	{r7, pc}
 801818a:	bf00      	nop
 801818c:	200021fc 	.word	0x200021fc
 8018190:	2000265c 	.word	0x2000265c
 8018194:	20002670 	.word	0x20002670
 8018198:	2000268c 	.word	0x2000268c
 801819c:	200026a0 	.word	0x200026a0
 80181a0:	200026b8 	.word	0x200026b8
 80181a4:	20002684 	.word	0x20002684
 80181a8:	20002688 	.word	0x20002688

080181ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80181ac:	b580      	push	{r7, lr}
 80181ae:	b082      	sub	sp, #8
 80181b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80181b2:	e019      	b.n	80181e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80181b4:	f000 fee6 	bl	8018f84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80181b8:	4b10      	ldr	r3, [pc, #64]	; (80181fc <prvCheckTasksWaitingTermination+0x50>)
 80181ba:	68db      	ldr	r3, [r3, #12]
 80181bc:	68db      	ldr	r3, [r3, #12]
 80181be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80181c0:	687b      	ldr	r3, [r7, #4]
 80181c2:	3304      	adds	r3, #4
 80181c4:	4618      	mov	r0, r3
 80181c6:	f7fe f88b 	bl	80162e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80181ca:	4b0d      	ldr	r3, [pc, #52]	; (8018200 <prvCheckTasksWaitingTermination+0x54>)
 80181cc:	681b      	ldr	r3, [r3, #0]
 80181ce:	3b01      	subs	r3, #1
 80181d0:	4a0b      	ldr	r2, [pc, #44]	; (8018200 <prvCheckTasksWaitingTermination+0x54>)
 80181d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80181d4:	4b0b      	ldr	r3, [pc, #44]	; (8018204 <prvCheckTasksWaitingTermination+0x58>)
 80181d6:	681b      	ldr	r3, [r3, #0]
 80181d8:	3b01      	subs	r3, #1
 80181da:	4a0a      	ldr	r2, [pc, #40]	; (8018204 <prvCheckTasksWaitingTermination+0x58>)
 80181dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80181de:	f000 ff01 	bl	8018fe4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80181e2:	6878      	ldr	r0, [r7, #4]
 80181e4:	f000 f810 	bl	8018208 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80181e8:	4b06      	ldr	r3, [pc, #24]	; (8018204 <prvCheckTasksWaitingTermination+0x58>)
 80181ea:	681b      	ldr	r3, [r3, #0]
 80181ec:	2b00      	cmp	r3, #0
 80181ee:	d1e1      	bne.n	80181b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80181f0:	bf00      	nop
 80181f2:	bf00      	nop
 80181f4:	3708      	adds	r7, #8
 80181f6:	46bd      	mov	sp, r7
 80181f8:	bd80      	pop	{r7, pc}
 80181fa:	bf00      	nop
 80181fc:	200026a0 	.word	0x200026a0
 8018200:	200026cc 	.word	0x200026cc
 8018204:	200026b4 	.word	0x200026b4

08018208 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8018208:	b580      	push	{r7, lr}
 801820a:	b084      	sub	sp, #16
 801820c:	af00      	add	r7, sp, #0
 801820e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8018210:	687b      	ldr	r3, [r7, #4]
 8018212:	3354      	adds	r3, #84	; 0x54
 8018214:	4618      	mov	r0, r3
 8018216:	f003 fe75 	bl	801bf04 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801821a:	687b      	ldr	r3, [r7, #4]
 801821c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8018220:	2b00      	cmp	r3, #0
 8018222:	d108      	bne.n	8018236 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8018224:	687b      	ldr	r3, [r7, #4]
 8018226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018228:	4618      	mov	r0, r3
 801822a:	f001 f899 	bl	8019360 <vPortFree>
				vPortFree( pxTCB );
 801822e:	6878      	ldr	r0, [r7, #4]
 8018230:	f001 f896 	bl	8019360 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8018234:	e018      	b.n	8018268 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8018236:	687b      	ldr	r3, [r7, #4]
 8018238:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 801823c:	2b01      	cmp	r3, #1
 801823e:	d103      	bne.n	8018248 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8018240:	6878      	ldr	r0, [r7, #4]
 8018242:	f001 f88d 	bl	8019360 <vPortFree>
	}
 8018246:	e00f      	b.n	8018268 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8018248:	687b      	ldr	r3, [r7, #4]
 801824a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 801824e:	2b02      	cmp	r3, #2
 8018250:	d00a      	beq.n	8018268 <prvDeleteTCB+0x60>
	__asm volatile
 8018252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018256:	f383 8811 	msr	BASEPRI, r3
 801825a:	f3bf 8f6f 	isb	sy
 801825e:	f3bf 8f4f 	dsb	sy
 8018262:	60fb      	str	r3, [r7, #12]
}
 8018264:	bf00      	nop
 8018266:	e7fe      	b.n	8018266 <prvDeleteTCB+0x5e>
	}
 8018268:	bf00      	nop
 801826a:	3710      	adds	r7, #16
 801826c:	46bd      	mov	sp, r7
 801826e:	bd80      	pop	{r7, pc}

08018270 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8018270:	b480      	push	{r7}
 8018272:	b083      	sub	sp, #12
 8018274:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018276:	4b0c      	ldr	r3, [pc, #48]	; (80182a8 <prvResetNextTaskUnblockTime+0x38>)
 8018278:	681b      	ldr	r3, [r3, #0]
 801827a:	681b      	ldr	r3, [r3, #0]
 801827c:	2b00      	cmp	r3, #0
 801827e:	d104      	bne.n	801828a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8018280:	4b0a      	ldr	r3, [pc, #40]	; (80182ac <prvResetNextTaskUnblockTime+0x3c>)
 8018282:	f04f 32ff 	mov.w	r2, #4294967295
 8018286:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8018288:	e008      	b.n	801829c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801828a:	4b07      	ldr	r3, [pc, #28]	; (80182a8 <prvResetNextTaskUnblockTime+0x38>)
 801828c:	681b      	ldr	r3, [r3, #0]
 801828e:	68db      	ldr	r3, [r3, #12]
 8018290:	68db      	ldr	r3, [r3, #12]
 8018292:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8018294:	687b      	ldr	r3, [r7, #4]
 8018296:	685b      	ldr	r3, [r3, #4]
 8018298:	4a04      	ldr	r2, [pc, #16]	; (80182ac <prvResetNextTaskUnblockTime+0x3c>)
 801829a:	6013      	str	r3, [r2, #0]
}
 801829c:	bf00      	nop
 801829e:	370c      	adds	r7, #12
 80182a0:	46bd      	mov	sp, r7
 80182a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182a6:	4770      	bx	lr
 80182a8:	20002684 	.word	0x20002684
 80182ac:	200026ec 	.word	0x200026ec

080182b0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80182b0:	b480      	push	{r7}
 80182b2:	b083      	sub	sp, #12
 80182b4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80182b6:	4b05      	ldr	r3, [pc, #20]	; (80182cc <xTaskGetCurrentTaskHandle+0x1c>)
 80182b8:	681b      	ldr	r3, [r3, #0]
 80182ba:	607b      	str	r3, [r7, #4]

		return xReturn;
 80182bc:	687b      	ldr	r3, [r7, #4]
	}
 80182be:	4618      	mov	r0, r3
 80182c0:	370c      	adds	r7, #12
 80182c2:	46bd      	mov	sp, r7
 80182c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182c8:	4770      	bx	lr
 80182ca:	bf00      	nop
 80182cc:	200021f8 	.word	0x200021f8

080182d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80182d0:	b480      	push	{r7}
 80182d2:	b083      	sub	sp, #12
 80182d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80182d6:	4b0b      	ldr	r3, [pc, #44]	; (8018304 <xTaskGetSchedulerState+0x34>)
 80182d8:	681b      	ldr	r3, [r3, #0]
 80182da:	2b00      	cmp	r3, #0
 80182dc:	d102      	bne.n	80182e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80182de:	2301      	movs	r3, #1
 80182e0:	607b      	str	r3, [r7, #4]
 80182e2:	e008      	b.n	80182f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80182e4:	4b08      	ldr	r3, [pc, #32]	; (8018308 <xTaskGetSchedulerState+0x38>)
 80182e6:	681b      	ldr	r3, [r3, #0]
 80182e8:	2b00      	cmp	r3, #0
 80182ea:	d102      	bne.n	80182f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80182ec:	2302      	movs	r3, #2
 80182ee:	607b      	str	r3, [r7, #4]
 80182f0:	e001      	b.n	80182f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80182f2:	2300      	movs	r3, #0
 80182f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80182f6:	687b      	ldr	r3, [r7, #4]
	}
 80182f8:	4618      	mov	r0, r3
 80182fa:	370c      	adds	r7, #12
 80182fc:	46bd      	mov	sp, r7
 80182fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018302:	4770      	bx	lr
 8018304:	200026d8 	.word	0x200026d8
 8018308:	200026f4 	.word	0x200026f4

0801830c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801830c:	b580      	push	{r7, lr}
 801830e:	b084      	sub	sp, #16
 8018310:	af00      	add	r7, sp, #0
 8018312:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8018314:	687b      	ldr	r3, [r7, #4]
 8018316:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8018318:	2300      	movs	r3, #0
 801831a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801831c:	687b      	ldr	r3, [r7, #4]
 801831e:	2b00      	cmp	r3, #0
 8018320:	d051      	beq.n	80183c6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8018322:	68bb      	ldr	r3, [r7, #8]
 8018324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018326:	4b2a      	ldr	r3, [pc, #168]	; (80183d0 <xTaskPriorityInherit+0xc4>)
 8018328:	681b      	ldr	r3, [r3, #0]
 801832a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801832c:	429a      	cmp	r2, r3
 801832e:	d241      	bcs.n	80183b4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8018330:	68bb      	ldr	r3, [r7, #8]
 8018332:	699b      	ldr	r3, [r3, #24]
 8018334:	2b00      	cmp	r3, #0
 8018336:	db06      	blt.n	8018346 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018338:	4b25      	ldr	r3, [pc, #148]	; (80183d0 <xTaskPriorityInherit+0xc4>)
 801833a:	681b      	ldr	r3, [r3, #0]
 801833c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801833e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018342:	68bb      	ldr	r3, [r7, #8]
 8018344:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8018346:	68bb      	ldr	r3, [r7, #8]
 8018348:	6959      	ldr	r1, [r3, #20]
 801834a:	68bb      	ldr	r3, [r7, #8]
 801834c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801834e:	4613      	mov	r3, r2
 8018350:	009b      	lsls	r3, r3, #2
 8018352:	4413      	add	r3, r2
 8018354:	009b      	lsls	r3, r3, #2
 8018356:	4a1f      	ldr	r2, [pc, #124]	; (80183d4 <xTaskPriorityInherit+0xc8>)
 8018358:	4413      	add	r3, r2
 801835a:	4299      	cmp	r1, r3
 801835c:	d122      	bne.n	80183a4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801835e:	68bb      	ldr	r3, [r7, #8]
 8018360:	3304      	adds	r3, #4
 8018362:	4618      	mov	r0, r3
 8018364:	f7fd ffbc 	bl	80162e0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8018368:	4b19      	ldr	r3, [pc, #100]	; (80183d0 <xTaskPriorityInherit+0xc4>)
 801836a:	681b      	ldr	r3, [r3, #0]
 801836c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801836e:	68bb      	ldr	r3, [r7, #8]
 8018370:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8018372:	68bb      	ldr	r3, [r7, #8]
 8018374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018376:	4b18      	ldr	r3, [pc, #96]	; (80183d8 <xTaskPriorityInherit+0xcc>)
 8018378:	681b      	ldr	r3, [r3, #0]
 801837a:	429a      	cmp	r2, r3
 801837c:	d903      	bls.n	8018386 <xTaskPriorityInherit+0x7a>
 801837e:	68bb      	ldr	r3, [r7, #8]
 8018380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018382:	4a15      	ldr	r2, [pc, #84]	; (80183d8 <xTaskPriorityInherit+0xcc>)
 8018384:	6013      	str	r3, [r2, #0]
 8018386:	68bb      	ldr	r3, [r7, #8]
 8018388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801838a:	4613      	mov	r3, r2
 801838c:	009b      	lsls	r3, r3, #2
 801838e:	4413      	add	r3, r2
 8018390:	009b      	lsls	r3, r3, #2
 8018392:	4a10      	ldr	r2, [pc, #64]	; (80183d4 <xTaskPriorityInherit+0xc8>)
 8018394:	441a      	add	r2, r3
 8018396:	68bb      	ldr	r3, [r7, #8]
 8018398:	3304      	adds	r3, #4
 801839a:	4619      	mov	r1, r3
 801839c:	4610      	mov	r0, r2
 801839e:	f7fd ff42 	bl	8016226 <vListInsertEnd>
 80183a2:	e004      	b.n	80183ae <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80183a4:	4b0a      	ldr	r3, [pc, #40]	; (80183d0 <xTaskPriorityInherit+0xc4>)
 80183a6:	681b      	ldr	r3, [r3, #0]
 80183a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80183aa:	68bb      	ldr	r3, [r7, #8]
 80183ac:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80183ae:	2301      	movs	r3, #1
 80183b0:	60fb      	str	r3, [r7, #12]
 80183b2:	e008      	b.n	80183c6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80183b4:	68bb      	ldr	r3, [r7, #8]
 80183b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80183b8:	4b05      	ldr	r3, [pc, #20]	; (80183d0 <xTaskPriorityInherit+0xc4>)
 80183ba:	681b      	ldr	r3, [r3, #0]
 80183bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80183be:	429a      	cmp	r2, r3
 80183c0:	d201      	bcs.n	80183c6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80183c2:	2301      	movs	r3, #1
 80183c4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80183c6:	68fb      	ldr	r3, [r7, #12]
	}
 80183c8:	4618      	mov	r0, r3
 80183ca:	3710      	adds	r7, #16
 80183cc:	46bd      	mov	sp, r7
 80183ce:	bd80      	pop	{r7, pc}
 80183d0:	200021f8 	.word	0x200021f8
 80183d4:	200021fc 	.word	0x200021fc
 80183d8:	200026d4 	.word	0x200026d4

080183dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80183dc:	b580      	push	{r7, lr}
 80183de:	b086      	sub	sp, #24
 80183e0:	af00      	add	r7, sp, #0
 80183e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80183e4:	687b      	ldr	r3, [r7, #4]
 80183e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80183e8:	2300      	movs	r3, #0
 80183ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80183ec:	687b      	ldr	r3, [r7, #4]
 80183ee:	2b00      	cmp	r3, #0
 80183f0:	d056      	beq.n	80184a0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80183f2:	4b2e      	ldr	r3, [pc, #184]	; (80184ac <xTaskPriorityDisinherit+0xd0>)
 80183f4:	681b      	ldr	r3, [r3, #0]
 80183f6:	693a      	ldr	r2, [r7, #16]
 80183f8:	429a      	cmp	r2, r3
 80183fa:	d00a      	beq.n	8018412 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80183fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018400:	f383 8811 	msr	BASEPRI, r3
 8018404:	f3bf 8f6f 	isb	sy
 8018408:	f3bf 8f4f 	dsb	sy
 801840c:	60fb      	str	r3, [r7, #12]
}
 801840e:	bf00      	nop
 8018410:	e7fe      	b.n	8018410 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8018412:	693b      	ldr	r3, [r7, #16]
 8018414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018416:	2b00      	cmp	r3, #0
 8018418:	d10a      	bne.n	8018430 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801841a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801841e:	f383 8811 	msr	BASEPRI, r3
 8018422:	f3bf 8f6f 	isb	sy
 8018426:	f3bf 8f4f 	dsb	sy
 801842a:	60bb      	str	r3, [r7, #8]
}
 801842c:	bf00      	nop
 801842e:	e7fe      	b.n	801842e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8018430:	693b      	ldr	r3, [r7, #16]
 8018432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018434:	1e5a      	subs	r2, r3, #1
 8018436:	693b      	ldr	r3, [r7, #16]
 8018438:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801843a:	693b      	ldr	r3, [r7, #16]
 801843c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801843e:	693b      	ldr	r3, [r7, #16]
 8018440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018442:	429a      	cmp	r2, r3
 8018444:	d02c      	beq.n	80184a0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8018446:	693b      	ldr	r3, [r7, #16]
 8018448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801844a:	2b00      	cmp	r3, #0
 801844c:	d128      	bne.n	80184a0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801844e:	693b      	ldr	r3, [r7, #16]
 8018450:	3304      	adds	r3, #4
 8018452:	4618      	mov	r0, r3
 8018454:	f7fd ff44 	bl	80162e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8018458:	693b      	ldr	r3, [r7, #16]
 801845a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801845c:	693b      	ldr	r3, [r7, #16]
 801845e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018460:	693b      	ldr	r3, [r7, #16]
 8018462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018464:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018468:	693b      	ldr	r3, [r7, #16]
 801846a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801846c:	693b      	ldr	r3, [r7, #16]
 801846e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018470:	4b0f      	ldr	r3, [pc, #60]	; (80184b0 <xTaskPriorityDisinherit+0xd4>)
 8018472:	681b      	ldr	r3, [r3, #0]
 8018474:	429a      	cmp	r2, r3
 8018476:	d903      	bls.n	8018480 <xTaskPriorityDisinherit+0xa4>
 8018478:	693b      	ldr	r3, [r7, #16]
 801847a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801847c:	4a0c      	ldr	r2, [pc, #48]	; (80184b0 <xTaskPriorityDisinherit+0xd4>)
 801847e:	6013      	str	r3, [r2, #0]
 8018480:	693b      	ldr	r3, [r7, #16]
 8018482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018484:	4613      	mov	r3, r2
 8018486:	009b      	lsls	r3, r3, #2
 8018488:	4413      	add	r3, r2
 801848a:	009b      	lsls	r3, r3, #2
 801848c:	4a09      	ldr	r2, [pc, #36]	; (80184b4 <xTaskPriorityDisinherit+0xd8>)
 801848e:	441a      	add	r2, r3
 8018490:	693b      	ldr	r3, [r7, #16]
 8018492:	3304      	adds	r3, #4
 8018494:	4619      	mov	r1, r3
 8018496:	4610      	mov	r0, r2
 8018498:	f7fd fec5 	bl	8016226 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801849c:	2301      	movs	r3, #1
 801849e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80184a0:	697b      	ldr	r3, [r7, #20]
	}
 80184a2:	4618      	mov	r0, r3
 80184a4:	3718      	adds	r7, #24
 80184a6:	46bd      	mov	sp, r7
 80184a8:	bd80      	pop	{r7, pc}
 80184aa:	bf00      	nop
 80184ac:	200021f8 	.word	0x200021f8
 80184b0:	200026d4 	.word	0x200026d4
 80184b4:	200021fc 	.word	0x200021fc

080184b8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80184b8:	b580      	push	{r7, lr}
 80184ba:	b088      	sub	sp, #32
 80184bc:	af00      	add	r7, sp, #0
 80184be:	6078      	str	r0, [r7, #4]
 80184c0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80184c2:	687b      	ldr	r3, [r7, #4]
 80184c4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80184c6:	2301      	movs	r3, #1
 80184c8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80184ca:	687b      	ldr	r3, [r7, #4]
 80184cc:	2b00      	cmp	r3, #0
 80184ce:	d06a      	beq.n	80185a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80184d0:	69bb      	ldr	r3, [r7, #24]
 80184d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80184d4:	2b00      	cmp	r3, #0
 80184d6:	d10a      	bne.n	80184ee <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80184d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184dc:	f383 8811 	msr	BASEPRI, r3
 80184e0:	f3bf 8f6f 	isb	sy
 80184e4:	f3bf 8f4f 	dsb	sy
 80184e8:	60fb      	str	r3, [r7, #12]
}
 80184ea:	bf00      	nop
 80184ec:	e7fe      	b.n	80184ec <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80184ee:	69bb      	ldr	r3, [r7, #24]
 80184f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80184f2:	683a      	ldr	r2, [r7, #0]
 80184f4:	429a      	cmp	r2, r3
 80184f6:	d902      	bls.n	80184fe <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80184f8:	683b      	ldr	r3, [r7, #0]
 80184fa:	61fb      	str	r3, [r7, #28]
 80184fc:	e002      	b.n	8018504 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80184fe:	69bb      	ldr	r3, [r7, #24]
 8018500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018502:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8018504:	69bb      	ldr	r3, [r7, #24]
 8018506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018508:	69fa      	ldr	r2, [r7, #28]
 801850a:	429a      	cmp	r2, r3
 801850c:	d04b      	beq.n	80185a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801850e:	69bb      	ldr	r3, [r7, #24]
 8018510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018512:	697a      	ldr	r2, [r7, #20]
 8018514:	429a      	cmp	r2, r3
 8018516:	d146      	bne.n	80185a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8018518:	4b25      	ldr	r3, [pc, #148]	; (80185b0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801851a:	681b      	ldr	r3, [r3, #0]
 801851c:	69ba      	ldr	r2, [r7, #24]
 801851e:	429a      	cmp	r2, r3
 8018520:	d10a      	bne.n	8018538 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8018522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018526:	f383 8811 	msr	BASEPRI, r3
 801852a:	f3bf 8f6f 	isb	sy
 801852e:	f3bf 8f4f 	dsb	sy
 8018532:	60bb      	str	r3, [r7, #8]
}
 8018534:	bf00      	nop
 8018536:	e7fe      	b.n	8018536 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8018538:	69bb      	ldr	r3, [r7, #24]
 801853a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801853c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801853e:	69bb      	ldr	r3, [r7, #24]
 8018540:	69fa      	ldr	r2, [r7, #28]
 8018542:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8018544:	69bb      	ldr	r3, [r7, #24]
 8018546:	699b      	ldr	r3, [r3, #24]
 8018548:	2b00      	cmp	r3, #0
 801854a:	db04      	blt.n	8018556 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801854c:	69fb      	ldr	r3, [r7, #28]
 801854e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018552:	69bb      	ldr	r3, [r7, #24]
 8018554:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8018556:	69bb      	ldr	r3, [r7, #24]
 8018558:	6959      	ldr	r1, [r3, #20]
 801855a:	693a      	ldr	r2, [r7, #16]
 801855c:	4613      	mov	r3, r2
 801855e:	009b      	lsls	r3, r3, #2
 8018560:	4413      	add	r3, r2
 8018562:	009b      	lsls	r3, r3, #2
 8018564:	4a13      	ldr	r2, [pc, #76]	; (80185b4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8018566:	4413      	add	r3, r2
 8018568:	4299      	cmp	r1, r3
 801856a:	d11c      	bne.n	80185a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801856c:	69bb      	ldr	r3, [r7, #24]
 801856e:	3304      	adds	r3, #4
 8018570:	4618      	mov	r0, r3
 8018572:	f7fd feb5 	bl	80162e0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8018576:	69bb      	ldr	r3, [r7, #24]
 8018578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801857a:	4b0f      	ldr	r3, [pc, #60]	; (80185b8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801857c:	681b      	ldr	r3, [r3, #0]
 801857e:	429a      	cmp	r2, r3
 8018580:	d903      	bls.n	801858a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8018582:	69bb      	ldr	r3, [r7, #24]
 8018584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018586:	4a0c      	ldr	r2, [pc, #48]	; (80185b8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8018588:	6013      	str	r3, [r2, #0]
 801858a:	69bb      	ldr	r3, [r7, #24]
 801858c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801858e:	4613      	mov	r3, r2
 8018590:	009b      	lsls	r3, r3, #2
 8018592:	4413      	add	r3, r2
 8018594:	009b      	lsls	r3, r3, #2
 8018596:	4a07      	ldr	r2, [pc, #28]	; (80185b4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8018598:	441a      	add	r2, r3
 801859a:	69bb      	ldr	r3, [r7, #24]
 801859c:	3304      	adds	r3, #4
 801859e:	4619      	mov	r1, r3
 80185a0:	4610      	mov	r0, r2
 80185a2:	f7fd fe40 	bl	8016226 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80185a6:	bf00      	nop
 80185a8:	3720      	adds	r7, #32
 80185aa:	46bd      	mov	sp, r7
 80185ac:	bd80      	pop	{r7, pc}
 80185ae:	bf00      	nop
 80185b0:	200021f8 	.word	0x200021f8
 80185b4:	200021fc 	.word	0x200021fc
 80185b8:	200026d4 	.word	0x200026d4

080185bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80185bc:	b480      	push	{r7}
 80185be:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80185c0:	4b07      	ldr	r3, [pc, #28]	; (80185e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80185c2:	681b      	ldr	r3, [r3, #0]
 80185c4:	2b00      	cmp	r3, #0
 80185c6:	d004      	beq.n	80185d2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80185c8:	4b05      	ldr	r3, [pc, #20]	; (80185e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80185ca:	681b      	ldr	r3, [r3, #0]
 80185cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80185ce:	3201      	adds	r2, #1
 80185d0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80185d2:	4b03      	ldr	r3, [pc, #12]	; (80185e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80185d4:	681b      	ldr	r3, [r3, #0]
	}
 80185d6:	4618      	mov	r0, r3
 80185d8:	46bd      	mov	sp, r7
 80185da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185de:	4770      	bx	lr
 80185e0:	200021f8 	.word	0x200021f8

080185e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80185e4:	b580      	push	{r7, lr}
 80185e6:	b084      	sub	sp, #16
 80185e8:	af00      	add	r7, sp, #0
 80185ea:	6078      	str	r0, [r7, #4]
 80185ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80185ee:	4b21      	ldr	r3, [pc, #132]	; (8018674 <prvAddCurrentTaskToDelayedList+0x90>)
 80185f0:	681b      	ldr	r3, [r3, #0]
 80185f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80185f4:	4b20      	ldr	r3, [pc, #128]	; (8018678 <prvAddCurrentTaskToDelayedList+0x94>)
 80185f6:	681b      	ldr	r3, [r3, #0]
 80185f8:	3304      	adds	r3, #4
 80185fa:	4618      	mov	r0, r3
 80185fc:	f7fd fe70 	bl	80162e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018600:	687b      	ldr	r3, [r7, #4]
 8018602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018606:	d10a      	bne.n	801861e <prvAddCurrentTaskToDelayedList+0x3a>
 8018608:	683b      	ldr	r3, [r7, #0]
 801860a:	2b00      	cmp	r3, #0
 801860c:	d007      	beq.n	801861e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801860e:	4b1a      	ldr	r3, [pc, #104]	; (8018678 <prvAddCurrentTaskToDelayedList+0x94>)
 8018610:	681b      	ldr	r3, [r3, #0]
 8018612:	3304      	adds	r3, #4
 8018614:	4619      	mov	r1, r3
 8018616:	4819      	ldr	r0, [pc, #100]	; (801867c <prvAddCurrentTaskToDelayedList+0x98>)
 8018618:	f7fd fe05 	bl	8016226 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801861c:	e026      	b.n	801866c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801861e:	68fa      	ldr	r2, [r7, #12]
 8018620:	687b      	ldr	r3, [r7, #4]
 8018622:	4413      	add	r3, r2
 8018624:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8018626:	4b14      	ldr	r3, [pc, #80]	; (8018678 <prvAddCurrentTaskToDelayedList+0x94>)
 8018628:	681b      	ldr	r3, [r3, #0]
 801862a:	68ba      	ldr	r2, [r7, #8]
 801862c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801862e:	68ba      	ldr	r2, [r7, #8]
 8018630:	68fb      	ldr	r3, [r7, #12]
 8018632:	429a      	cmp	r2, r3
 8018634:	d209      	bcs.n	801864a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018636:	4b12      	ldr	r3, [pc, #72]	; (8018680 <prvAddCurrentTaskToDelayedList+0x9c>)
 8018638:	681a      	ldr	r2, [r3, #0]
 801863a:	4b0f      	ldr	r3, [pc, #60]	; (8018678 <prvAddCurrentTaskToDelayedList+0x94>)
 801863c:	681b      	ldr	r3, [r3, #0]
 801863e:	3304      	adds	r3, #4
 8018640:	4619      	mov	r1, r3
 8018642:	4610      	mov	r0, r2
 8018644:	f7fd fe13 	bl	801626e <vListInsert>
}
 8018648:	e010      	b.n	801866c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801864a:	4b0e      	ldr	r3, [pc, #56]	; (8018684 <prvAddCurrentTaskToDelayedList+0xa0>)
 801864c:	681a      	ldr	r2, [r3, #0]
 801864e:	4b0a      	ldr	r3, [pc, #40]	; (8018678 <prvAddCurrentTaskToDelayedList+0x94>)
 8018650:	681b      	ldr	r3, [r3, #0]
 8018652:	3304      	adds	r3, #4
 8018654:	4619      	mov	r1, r3
 8018656:	4610      	mov	r0, r2
 8018658:	f7fd fe09 	bl	801626e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801865c:	4b0a      	ldr	r3, [pc, #40]	; (8018688 <prvAddCurrentTaskToDelayedList+0xa4>)
 801865e:	681b      	ldr	r3, [r3, #0]
 8018660:	68ba      	ldr	r2, [r7, #8]
 8018662:	429a      	cmp	r2, r3
 8018664:	d202      	bcs.n	801866c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8018666:	4a08      	ldr	r2, [pc, #32]	; (8018688 <prvAddCurrentTaskToDelayedList+0xa4>)
 8018668:	68bb      	ldr	r3, [r7, #8]
 801866a:	6013      	str	r3, [r2, #0]
}
 801866c:	bf00      	nop
 801866e:	3710      	adds	r7, #16
 8018670:	46bd      	mov	sp, r7
 8018672:	bd80      	pop	{r7, pc}
 8018674:	200026d0 	.word	0x200026d0
 8018678:	200021f8 	.word	0x200021f8
 801867c:	200026b8 	.word	0x200026b8
 8018680:	20002688 	.word	0x20002688
 8018684:	20002684 	.word	0x20002684
 8018688:	200026ec 	.word	0x200026ec

0801868c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801868c:	b580      	push	{r7, lr}
 801868e:	b08a      	sub	sp, #40	; 0x28
 8018690:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8018692:	2300      	movs	r3, #0
 8018694:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8018696:	f000 fb09 	bl	8018cac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801869a:	4b1c      	ldr	r3, [pc, #112]	; (801870c <xTimerCreateTimerTask+0x80>)
 801869c:	681b      	ldr	r3, [r3, #0]
 801869e:	2b00      	cmp	r3, #0
 80186a0:	d021      	beq.n	80186e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80186a2:	2300      	movs	r3, #0
 80186a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80186a6:	2300      	movs	r3, #0
 80186a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80186aa:	1d3a      	adds	r2, r7, #4
 80186ac:	f107 0108 	add.w	r1, r7, #8
 80186b0:	f107 030c 	add.w	r3, r7, #12
 80186b4:	4618      	mov	r0, r3
 80186b6:	f7fd fd6f 	bl	8016198 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80186ba:	6879      	ldr	r1, [r7, #4]
 80186bc:	68bb      	ldr	r3, [r7, #8]
 80186be:	68fa      	ldr	r2, [r7, #12]
 80186c0:	9202      	str	r2, [sp, #8]
 80186c2:	9301      	str	r3, [sp, #4]
 80186c4:	2337      	movs	r3, #55	; 0x37
 80186c6:	9300      	str	r3, [sp, #0]
 80186c8:	2300      	movs	r3, #0
 80186ca:	460a      	mov	r2, r1
 80186cc:	4910      	ldr	r1, [pc, #64]	; (8018710 <xTimerCreateTimerTask+0x84>)
 80186ce:	4811      	ldr	r0, [pc, #68]	; (8018714 <xTimerCreateTimerTask+0x88>)
 80186d0:	f7fe fe3e 	bl	8017350 <xTaskCreateStatic>
 80186d4:	4603      	mov	r3, r0
 80186d6:	4a10      	ldr	r2, [pc, #64]	; (8018718 <xTimerCreateTimerTask+0x8c>)
 80186d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80186da:	4b0f      	ldr	r3, [pc, #60]	; (8018718 <xTimerCreateTimerTask+0x8c>)
 80186dc:	681b      	ldr	r3, [r3, #0]
 80186de:	2b00      	cmp	r3, #0
 80186e0:	d001      	beq.n	80186e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80186e2:	2301      	movs	r3, #1
 80186e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80186e6:	697b      	ldr	r3, [r7, #20]
 80186e8:	2b00      	cmp	r3, #0
 80186ea:	d10a      	bne.n	8018702 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80186ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186f0:	f383 8811 	msr	BASEPRI, r3
 80186f4:	f3bf 8f6f 	isb	sy
 80186f8:	f3bf 8f4f 	dsb	sy
 80186fc:	613b      	str	r3, [r7, #16]
}
 80186fe:	bf00      	nop
 8018700:	e7fe      	b.n	8018700 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8018702:	697b      	ldr	r3, [r7, #20]
}
 8018704:	4618      	mov	r0, r3
 8018706:	3718      	adds	r7, #24
 8018708:	46bd      	mov	sp, r7
 801870a:	bd80      	pop	{r7, pc}
 801870c:	20002728 	.word	0x20002728
 8018710:	080228bc 	.word	0x080228bc
 8018714:	08018851 	.word	0x08018851
 8018718:	2000272c 	.word	0x2000272c

0801871c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801871c:	b580      	push	{r7, lr}
 801871e:	b08a      	sub	sp, #40	; 0x28
 8018720:	af00      	add	r7, sp, #0
 8018722:	60f8      	str	r0, [r7, #12]
 8018724:	60b9      	str	r1, [r7, #8]
 8018726:	607a      	str	r2, [r7, #4]
 8018728:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801872a:	2300      	movs	r3, #0
 801872c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801872e:	68fb      	ldr	r3, [r7, #12]
 8018730:	2b00      	cmp	r3, #0
 8018732:	d10a      	bne.n	801874a <xTimerGenericCommand+0x2e>
	__asm volatile
 8018734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018738:	f383 8811 	msr	BASEPRI, r3
 801873c:	f3bf 8f6f 	isb	sy
 8018740:	f3bf 8f4f 	dsb	sy
 8018744:	623b      	str	r3, [r7, #32]
}
 8018746:	bf00      	nop
 8018748:	e7fe      	b.n	8018748 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801874a:	4b1a      	ldr	r3, [pc, #104]	; (80187b4 <xTimerGenericCommand+0x98>)
 801874c:	681b      	ldr	r3, [r3, #0]
 801874e:	2b00      	cmp	r3, #0
 8018750:	d02a      	beq.n	80187a8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8018752:	68bb      	ldr	r3, [r7, #8]
 8018754:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8018756:	687b      	ldr	r3, [r7, #4]
 8018758:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801875a:	68fb      	ldr	r3, [r7, #12]
 801875c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801875e:	68bb      	ldr	r3, [r7, #8]
 8018760:	2b05      	cmp	r3, #5
 8018762:	dc18      	bgt.n	8018796 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8018764:	f7ff fdb4 	bl	80182d0 <xTaskGetSchedulerState>
 8018768:	4603      	mov	r3, r0
 801876a:	2b02      	cmp	r3, #2
 801876c:	d109      	bne.n	8018782 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801876e:	4b11      	ldr	r3, [pc, #68]	; (80187b4 <xTimerGenericCommand+0x98>)
 8018770:	6818      	ldr	r0, [r3, #0]
 8018772:	f107 0110 	add.w	r1, r7, #16
 8018776:	2300      	movs	r3, #0
 8018778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801877a:	f7fd ff83 	bl	8016684 <xQueueGenericSend>
 801877e:	6278      	str	r0, [r7, #36]	; 0x24
 8018780:	e012      	b.n	80187a8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8018782:	4b0c      	ldr	r3, [pc, #48]	; (80187b4 <xTimerGenericCommand+0x98>)
 8018784:	6818      	ldr	r0, [r3, #0]
 8018786:	f107 0110 	add.w	r1, r7, #16
 801878a:	2300      	movs	r3, #0
 801878c:	2200      	movs	r2, #0
 801878e:	f7fd ff79 	bl	8016684 <xQueueGenericSend>
 8018792:	6278      	str	r0, [r7, #36]	; 0x24
 8018794:	e008      	b.n	80187a8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8018796:	4b07      	ldr	r3, [pc, #28]	; (80187b4 <xTimerGenericCommand+0x98>)
 8018798:	6818      	ldr	r0, [r3, #0]
 801879a:	f107 0110 	add.w	r1, r7, #16
 801879e:	2300      	movs	r3, #0
 80187a0:	683a      	ldr	r2, [r7, #0]
 80187a2:	f7fe f86d 	bl	8016880 <xQueueGenericSendFromISR>
 80187a6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80187a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80187aa:	4618      	mov	r0, r3
 80187ac:	3728      	adds	r7, #40	; 0x28
 80187ae:	46bd      	mov	sp, r7
 80187b0:	bd80      	pop	{r7, pc}
 80187b2:	bf00      	nop
 80187b4:	20002728 	.word	0x20002728

080187b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80187b8:	b580      	push	{r7, lr}
 80187ba:	b088      	sub	sp, #32
 80187bc:	af02      	add	r7, sp, #8
 80187be:	6078      	str	r0, [r7, #4]
 80187c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80187c2:	4b22      	ldr	r3, [pc, #136]	; (801884c <prvProcessExpiredTimer+0x94>)
 80187c4:	681b      	ldr	r3, [r3, #0]
 80187c6:	68db      	ldr	r3, [r3, #12]
 80187c8:	68db      	ldr	r3, [r3, #12]
 80187ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80187cc:	697b      	ldr	r3, [r7, #20]
 80187ce:	3304      	adds	r3, #4
 80187d0:	4618      	mov	r0, r3
 80187d2:	f7fd fd85 	bl	80162e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80187d6:	697b      	ldr	r3, [r7, #20]
 80187d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80187dc:	f003 0304 	and.w	r3, r3, #4
 80187e0:	2b00      	cmp	r3, #0
 80187e2:	d022      	beq.n	801882a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80187e4:	697b      	ldr	r3, [r7, #20]
 80187e6:	699a      	ldr	r2, [r3, #24]
 80187e8:	687b      	ldr	r3, [r7, #4]
 80187ea:	18d1      	adds	r1, r2, r3
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	683a      	ldr	r2, [r7, #0]
 80187f0:	6978      	ldr	r0, [r7, #20]
 80187f2:	f000 f8d3 	bl	801899c <prvInsertTimerInActiveList>
 80187f6:	4603      	mov	r3, r0
 80187f8:	2b00      	cmp	r3, #0
 80187fa:	d01f      	beq.n	801883c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80187fc:	2300      	movs	r3, #0
 80187fe:	9300      	str	r3, [sp, #0]
 8018800:	2300      	movs	r3, #0
 8018802:	687a      	ldr	r2, [r7, #4]
 8018804:	2100      	movs	r1, #0
 8018806:	6978      	ldr	r0, [r7, #20]
 8018808:	f7ff ff88 	bl	801871c <xTimerGenericCommand>
 801880c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801880e:	693b      	ldr	r3, [r7, #16]
 8018810:	2b00      	cmp	r3, #0
 8018812:	d113      	bne.n	801883c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8018814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018818:	f383 8811 	msr	BASEPRI, r3
 801881c:	f3bf 8f6f 	isb	sy
 8018820:	f3bf 8f4f 	dsb	sy
 8018824:	60fb      	str	r3, [r7, #12]
}
 8018826:	bf00      	nop
 8018828:	e7fe      	b.n	8018828 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801882a:	697b      	ldr	r3, [r7, #20]
 801882c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018830:	f023 0301 	bic.w	r3, r3, #1
 8018834:	b2da      	uxtb	r2, r3
 8018836:	697b      	ldr	r3, [r7, #20]
 8018838:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801883c:	697b      	ldr	r3, [r7, #20]
 801883e:	6a1b      	ldr	r3, [r3, #32]
 8018840:	6978      	ldr	r0, [r7, #20]
 8018842:	4798      	blx	r3
}
 8018844:	bf00      	nop
 8018846:	3718      	adds	r7, #24
 8018848:	46bd      	mov	sp, r7
 801884a:	bd80      	pop	{r7, pc}
 801884c:	20002720 	.word	0x20002720

08018850 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8018850:	b580      	push	{r7, lr}
 8018852:	b084      	sub	sp, #16
 8018854:	af00      	add	r7, sp, #0
 8018856:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
 8018858:	f7e8 fefe 	bl	8001658 <vApplicationDaemonTaskStartupHook>

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801885c:	f107 0308 	add.w	r3, r7, #8
 8018860:	4618      	mov	r0, r3
 8018862:	f000 f857 	bl	8018914 <prvGetNextExpireTime>
 8018866:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8018868:	68bb      	ldr	r3, [r7, #8]
 801886a:	4619      	mov	r1, r3
 801886c:	68f8      	ldr	r0, [r7, #12]
 801886e:	f000 f803 	bl	8018878 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8018872:	f000 f8d5 	bl	8018a20 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018876:	e7f1      	b.n	801885c <prvTimerTask+0xc>

08018878 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8018878:	b580      	push	{r7, lr}
 801887a:	b084      	sub	sp, #16
 801887c:	af00      	add	r7, sp, #0
 801887e:	6078      	str	r0, [r7, #4]
 8018880:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8018882:	f7ff f929 	bl	8017ad8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018886:	f107 0308 	add.w	r3, r7, #8
 801888a:	4618      	mov	r0, r3
 801888c:	f000 f866 	bl	801895c <prvSampleTimeNow>
 8018890:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8018892:	68bb      	ldr	r3, [r7, #8]
 8018894:	2b00      	cmp	r3, #0
 8018896:	d130      	bne.n	80188fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8018898:	683b      	ldr	r3, [r7, #0]
 801889a:	2b00      	cmp	r3, #0
 801889c:	d10a      	bne.n	80188b4 <prvProcessTimerOrBlockTask+0x3c>
 801889e:	687a      	ldr	r2, [r7, #4]
 80188a0:	68fb      	ldr	r3, [r7, #12]
 80188a2:	429a      	cmp	r2, r3
 80188a4:	d806      	bhi.n	80188b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80188a6:	f7ff f925 	bl	8017af4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80188aa:	68f9      	ldr	r1, [r7, #12]
 80188ac:	6878      	ldr	r0, [r7, #4]
 80188ae:	f7ff ff83 	bl	80187b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80188b2:	e024      	b.n	80188fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80188b4:	683b      	ldr	r3, [r7, #0]
 80188b6:	2b00      	cmp	r3, #0
 80188b8:	d008      	beq.n	80188cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80188ba:	4b13      	ldr	r3, [pc, #76]	; (8018908 <prvProcessTimerOrBlockTask+0x90>)
 80188bc:	681b      	ldr	r3, [r3, #0]
 80188be:	681b      	ldr	r3, [r3, #0]
 80188c0:	2b00      	cmp	r3, #0
 80188c2:	d101      	bne.n	80188c8 <prvProcessTimerOrBlockTask+0x50>
 80188c4:	2301      	movs	r3, #1
 80188c6:	e000      	b.n	80188ca <prvProcessTimerOrBlockTask+0x52>
 80188c8:	2300      	movs	r3, #0
 80188ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80188cc:	4b0f      	ldr	r3, [pc, #60]	; (801890c <prvProcessTimerOrBlockTask+0x94>)
 80188ce:	6818      	ldr	r0, [r3, #0]
 80188d0:	687a      	ldr	r2, [r7, #4]
 80188d2:	68fb      	ldr	r3, [r7, #12]
 80188d4:	1ad3      	subs	r3, r2, r3
 80188d6:	683a      	ldr	r2, [r7, #0]
 80188d8:	4619      	mov	r1, r3
 80188da:	f7fe fd05 	bl	80172e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80188de:	f7ff f909 	bl	8017af4 <xTaskResumeAll>
 80188e2:	4603      	mov	r3, r0
 80188e4:	2b00      	cmp	r3, #0
 80188e6:	d10a      	bne.n	80188fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80188e8:	4b09      	ldr	r3, [pc, #36]	; (8018910 <prvProcessTimerOrBlockTask+0x98>)
 80188ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80188ee:	601a      	str	r2, [r3, #0]
 80188f0:	f3bf 8f4f 	dsb	sy
 80188f4:	f3bf 8f6f 	isb	sy
}
 80188f8:	e001      	b.n	80188fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80188fa:	f7ff f8fb 	bl	8017af4 <xTaskResumeAll>
}
 80188fe:	bf00      	nop
 8018900:	3710      	adds	r7, #16
 8018902:	46bd      	mov	sp, r7
 8018904:	bd80      	pop	{r7, pc}
 8018906:	bf00      	nop
 8018908:	20002724 	.word	0x20002724
 801890c:	20002728 	.word	0x20002728
 8018910:	e000ed04 	.word	0xe000ed04

08018914 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8018914:	b480      	push	{r7}
 8018916:	b085      	sub	sp, #20
 8018918:	af00      	add	r7, sp, #0
 801891a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801891c:	4b0e      	ldr	r3, [pc, #56]	; (8018958 <prvGetNextExpireTime+0x44>)
 801891e:	681b      	ldr	r3, [r3, #0]
 8018920:	681b      	ldr	r3, [r3, #0]
 8018922:	2b00      	cmp	r3, #0
 8018924:	d101      	bne.n	801892a <prvGetNextExpireTime+0x16>
 8018926:	2201      	movs	r2, #1
 8018928:	e000      	b.n	801892c <prvGetNextExpireTime+0x18>
 801892a:	2200      	movs	r2, #0
 801892c:	687b      	ldr	r3, [r7, #4]
 801892e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8018930:	687b      	ldr	r3, [r7, #4]
 8018932:	681b      	ldr	r3, [r3, #0]
 8018934:	2b00      	cmp	r3, #0
 8018936:	d105      	bne.n	8018944 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018938:	4b07      	ldr	r3, [pc, #28]	; (8018958 <prvGetNextExpireTime+0x44>)
 801893a:	681b      	ldr	r3, [r3, #0]
 801893c:	68db      	ldr	r3, [r3, #12]
 801893e:	681b      	ldr	r3, [r3, #0]
 8018940:	60fb      	str	r3, [r7, #12]
 8018942:	e001      	b.n	8018948 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8018944:	2300      	movs	r3, #0
 8018946:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8018948:	68fb      	ldr	r3, [r7, #12]
}
 801894a:	4618      	mov	r0, r3
 801894c:	3714      	adds	r7, #20
 801894e:	46bd      	mov	sp, r7
 8018950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018954:	4770      	bx	lr
 8018956:	bf00      	nop
 8018958:	20002720 	.word	0x20002720

0801895c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801895c:	b580      	push	{r7, lr}
 801895e:	b084      	sub	sp, #16
 8018960:	af00      	add	r7, sp, #0
 8018962:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8018964:	f7ff f964 	bl	8017c30 <xTaskGetTickCount>
 8018968:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801896a:	4b0b      	ldr	r3, [pc, #44]	; (8018998 <prvSampleTimeNow+0x3c>)
 801896c:	681b      	ldr	r3, [r3, #0]
 801896e:	68fa      	ldr	r2, [r7, #12]
 8018970:	429a      	cmp	r2, r3
 8018972:	d205      	bcs.n	8018980 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8018974:	f000 f936 	bl	8018be4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8018978:	687b      	ldr	r3, [r7, #4]
 801897a:	2201      	movs	r2, #1
 801897c:	601a      	str	r2, [r3, #0]
 801897e:	e002      	b.n	8018986 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8018980:	687b      	ldr	r3, [r7, #4]
 8018982:	2200      	movs	r2, #0
 8018984:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8018986:	4a04      	ldr	r2, [pc, #16]	; (8018998 <prvSampleTimeNow+0x3c>)
 8018988:	68fb      	ldr	r3, [r7, #12]
 801898a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801898c:	68fb      	ldr	r3, [r7, #12]
}
 801898e:	4618      	mov	r0, r3
 8018990:	3710      	adds	r7, #16
 8018992:	46bd      	mov	sp, r7
 8018994:	bd80      	pop	{r7, pc}
 8018996:	bf00      	nop
 8018998:	20002730 	.word	0x20002730

0801899c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801899c:	b580      	push	{r7, lr}
 801899e:	b086      	sub	sp, #24
 80189a0:	af00      	add	r7, sp, #0
 80189a2:	60f8      	str	r0, [r7, #12]
 80189a4:	60b9      	str	r1, [r7, #8]
 80189a6:	607a      	str	r2, [r7, #4]
 80189a8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80189aa:	2300      	movs	r3, #0
 80189ac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80189ae:	68fb      	ldr	r3, [r7, #12]
 80189b0:	68ba      	ldr	r2, [r7, #8]
 80189b2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80189b4:	68fb      	ldr	r3, [r7, #12]
 80189b6:	68fa      	ldr	r2, [r7, #12]
 80189b8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80189ba:	68ba      	ldr	r2, [r7, #8]
 80189bc:	687b      	ldr	r3, [r7, #4]
 80189be:	429a      	cmp	r2, r3
 80189c0:	d812      	bhi.n	80189e8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80189c2:	687a      	ldr	r2, [r7, #4]
 80189c4:	683b      	ldr	r3, [r7, #0]
 80189c6:	1ad2      	subs	r2, r2, r3
 80189c8:	68fb      	ldr	r3, [r7, #12]
 80189ca:	699b      	ldr	r3, [r3, #24]
 80189cc:	429a      	cmp	r2, r3
 80189ce:	d302      	bcc.n	80189d6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80189d0:	2301      	movs	r3, #1
 80189d2:	617b      	str	r3, [r7, #20]
 80189d4:	e01b      	b.n	8018a0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80189d6:	4b10      	ldr	r3, [pc, #64]	; (8018a18 <prvInsertTimerInActiveList+0x7c>)
 80189d8:	681a      	ldr	r2, [r3, #0]
 80189da:	68fb      	ldr	r3, [r7, #12]
 80189dc:	3304      	adds	r3, #4
 80189de:	4619      	mov	r1, r3
 80189e0:	4610      	mov	r0, r2
 80189e2:	f7fd fc44 	bl	801626e <vListInsert>
 80189e6:	e012      	b.n	8018a0e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80189e8:	687a      	ldr	r2, [r7, #4]
 80189ea:	683b      	ldr	r3, [r7, #0]
 80189ec:	429a      	cmp	r2, r3
 80189ee:	d206      	bcs.n	80189fe <prvInsertTimerInActiveList+0x62>
 80189f0:	68ba      	ldr	r2, [r7, #8]
 80189f2:	683b      	ldr	r3, [r7, #0]
 80189f4:	429a      	cmp	r2, r3
 80189f6:	d302      	bcc.n	80189fe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80189f8:	2301      	movs	r3, #1
 80189fa:	617b      	str	r3, [r7, #20]
 80189fc:	e007      	b.n	8018a0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80189fe:	4b07      	ldr	r3, [pc, #28]	; (8018a1c <prvInsertTimerInActiveList+0x80>)
 8018a00:	681a      	ldr	r2, [r3, #0]
 8018a02:	68fb      	ldr	r3, [r7, #12]
 8018a04:	3304      	adds	r3, #4
 8018a06:	4619      	mov	r1, r3
 8018a08:	4610      	mov	r0, r2
 8018a0a:	f7fd fc30 	bl	801626e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8018a0e:	697b      	ldr	r3, [r7, #20]
}
 8018a10:	4618      	mov	r0, r3
 8018a12:	3718      	adds	r7, #24
 8018a14:	46bd      	mov	sp, r7
 8018a16:	bd80      	pop	{r7, pc}
 8018a18:	20002724 	.word	0x20002724
 8018a1c:	20002720 	.word	0x20002720

08018a20 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8018a20:	b580      	push	{r7, lr}
 8018a22:	b08e      	sub	sp, #56	; 0x38
 8018a24:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018a26:	e0ca      	b.n	8018bbe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8018a28:	687b      	ldr	r3, [r7, #4]
 8018a2a:	2b00      	cmp	r3, #0
 8018a2c:	da18      	bge.n	8018a60 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8018a2e:	1d3b      	adds	r3, r7, #4
 8018a30:	3304      	adds	r3, #4
 8018a32:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8018a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a36:	2b00      	cmp	r3, #0
 8018a38:	d10a      	bne.n	8018a50 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8018a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a3e:	f383 8811 	msr	BASEPRI, r3
 8018a42:	f3bf 8f6f 	isb	sy
 8018a46:	f3bf 8f4f 	dsb	sy
 8018a4a:	61fb      	str	r3, [r7, #28]
}
 8018a4c:	bf00      	nop
 8018a4e:	e7fe      	b.n	8018a4e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8018a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a52:	681b      	ldr	r3, [r3, #0]
 8018a54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018a56:	6850      	ldr	r0, [r2, #4]
 8018a58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018a5a:	6892      	ldr	r2, [r2, #8]
 8018a5c:	4611      	mov	r1, r2
 8018a5e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8018a60:	687b      	ldr	r3, [r7, #4]
 8018a62:	2b00      	cmp	r3, #0
 8018a64:	f2c0 80aa 	blt.w	8018bbc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8018a68:	68fb      	ldr	r3, [r7, #12]
 8018a6a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8018a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a6e:	695b      	ldr	r3, [r3, #20]
 8018a70:	2b00      	cmp	r3, #0
 8018a72:	d004      	beq.n	8018a7e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a76:	3304      	adds	r3, #4
 8018a78:	4618      	mov	r0, r3
 8018a7a:	f7fd fc31 	bl	80162e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018a7e:	463b      	mov	r3, r7
 8018a80:	4618      	mov	r0, r3
 8018a82:	f7ff ff6b 	bl	801895c <prvSampleTimeNow>
 8018a86:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	2b09      	cmp	r3, #9
 8018a8c:	f200 8097 	bhi.w	8018bbe <prvProcessReceivedCommands+0x19e>
 8018a90:	a201      	add	r2, pc, #4	; (adr r2, 8018a98 <prvProcessReceivedCommands+0x78>)
 8018a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018a96:	bf00      	nop
 8018a98:	08018ac1 	.word	0x08018ac1
 8018a9c:	08018ac1 	.word	0x08018ac1
 8018aa0:	08018ac1 	.word	0x08018ac1
 8018aa4:	08018b35 	.word	0x08018b35
 8018aa8:	08018b49 	.word	0x08018b49
 8018aac:	08018b93 	.word	0x08018b93
 8018ab0:	08018ac1 	.word	0x08018ac1
 8018ab4:	08018ac1 	.word	0x08018ac1
 8018ab8:	08018b35 	.word	0x08018b35
 8018abc:	08018b49 	.word	0x08018b49
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ac2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018ac6:	f043 0301 	orr.w	r3, r3, #1
 8018aca:	b2da      	uxtb	r2, r3
 8018acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ace:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8018ad2:	68ba      	ldr	r2, [r7, #8]
 8018ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ad6:	699b      	ldr	r3, [r3, #24]
 8018ad8:	18d1      	adds	r1, r2, r3
 8018ada:	68bb      	ldr	r3, [r7, #8]
 8018adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018ade:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018ae0:	f7ff ff5c 	bl	801899c <prvInsertTimerInActiveList>
 8018ae4:	4603      	mov	r3, r0
 8018ae6:	2b00      	cmp	r3, #0
 8018ae8:	d069      	beq.n	8018bbe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018aec:	6a1b      	ldr	r3, [r3, #32]
 8018aee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018af0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018af4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018af8:	f003 0304 	and.w	r3, r3, #4
 8018afc:	2b00      	cmp	r3, #0
 8018afe:	d05e      	beq.n	8018bbe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8018b00:	68ba      	ldr	r2, [r7, #8]
 8018b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b04:	699b      	ldr	r3, [r3, #24]
 8018b06:	441a      	add	r2, r3
 8018b08:	2300      	movs	r3, #0
 8018b0a:	9300      	str	r3, [sp, #0]
 8018b0c:	2300      	movs	r3, #0
 8018b0e:	2100      	movs	r1, #0
 8018b10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018b12:	f7ff fe03 	bl	801871c <xTimerGenericCommand>
 8018b16:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8018b18:	6a3b      	ldr	r3, [r7, #32]
 8018b1a:	2b00      	cmp	r3, #0
 8018b1c:	d14f      	bne.n	8018bbe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8018b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b22:	f383 8811 	msr	BASEPRI, r3
 8018b26:	f3bf 8f6f 	isb	sy
 8018b2a:	f3bf 8f4f 	dsb	sy
 8018b2e:	61bb      	str	r3, [r7, #24]
}
 8018b30:	bf00      	nop
 8018b32:	e7fe      	b.n	8018b32 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018b3a:	f023 0301 	bic.w	r3, r3, #1
 8018b3e:	b2da      	uxtb	r2, r3
 8018b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8018b46:	e03a      	b.n	8018bbe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018b4e:	f043 0301 	orr.w	r3, r3, #1
 8018b52:	b2da      	uxtb	r2, r3
 8018b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8018b5a:	68ba      	ldr	r2, [r7, #8]
 8018b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b5e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8018b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b62:	699b      	ldr	r3, [r3, #24]
 8018b64:	2b00      	cmp	r3, #0
 8018b66:	d10a      	bne.n	8018b7e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8018b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b6c:	f383 8811 	msr	BASEPRI, r3
 8018b70:	f3bf 8f6f 	isb	sy
 8018b74:	f3bf 8f4f 	dsb	sy
 8018b78:	617b      	str	r3, [r7, #20]
}
 8018b7a:	bf00      	nop
 8018b7c:	e7fe      	b.n	8018b7c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8018b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b80:	699a      	ldr	r2, [r3, #24]
 8018b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b84:	18d1      	adds	r1, r2, r3
 8018b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018b8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018b8c:	f7ff ff06 	bl	801899c <prvInsertTimerInActiveList>
					break;
 8018b90:	e015      	b.n	8018bbe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8018b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018b98:	f003 0302 	and.w	r3, r3, #2
 8018b9c:	2b00      	cmp	r3, #0
 8018b9e:	d103      	bne.n	8018ba8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8018ba0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018ba2:	f000 fbdd 	bl	8019360 <vPortFree>
 8018ba6:	e00a      	b.n	8018bbe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018baa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018bae:	f023 0301 	bic.w	r3, r3, #1
 8018bb2:	b2da      	uxtb	r2, r3
 8018bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018bb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8018bba:	e000      	b.n	8018bbe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8018bbc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018bbe:	4b08      	ldr	r3, [pc, #32]	; (8018be0 <prvProcessReceivedCommands+0x1c0>)
 8018bc0:	681b      	ldr	r3, [r3, #0]
 8018bc2:	1d39      	adds	r1, r7, #4
 8018bc4:	2200      	movs	r2, #0
 8018bc6:	4618      	mov	r0, r3
 8018bc8:	f7fd ff82 	bl	8016ad0 <xQueueReceive>
 8018bcc:	4603      	mov	r3, r0
 8018bce:	2b00      	cmp	r3, #0
 8018bd0:	f47f af2a 	bne.w	8018a28 <prvProcessReceivedCommands+0x8>
	}
}
 8018bd4:	bf00      	nop
 8018bd6:	bf00      	nop
 8018bd8:	3730      	adds	r7, #48	; 0x30
 8018bda:	46bd      	mov	sp, r7
 8018bdc:	bd80      	pop	{r7, pc}
 8018bde:	bf00      	nop
 8018be0:	20002728 	.word	0x20002728

08018be4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8018be4:	b580      	push	{r7, lr}
 8018be6:	b088      	sub	sp, #32
 8018be8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8018bea:	e048      	b.n	8018c7e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018bec:	4b2d      	ldr	r3, [pc, #180]	; (8018ca4 <prvSwitchTimerLists+0xc0>)
 8018bee:	681b      	ldr	r3, [r3, #0]
 8018bf0:	68db      	ldr	r3, [r3, #12]
 8018bf2:	681b      	ldr	r3, [r3, #0]
 8018bf4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018bf6:	4b2b      	ldr	r3, [pc, #172]	; (8018ca4 <prvSwitchTimerLists+0xc0>)
 8018bf8:	681b      	ldr	r3, [r3, #0]
 8018bfa:	68db      	ldr	r3, [r3, #12]
 8018bfc:	68db      	ldr	r3, [r3, #12]
 8018bfe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018c00:	68fb      	ldr	r3, [r7, #12]
 8018c02:	3304      	adds	r3, #4
 8018c04:	4618      	mov	r0, r3
 8018c06:	f7fd fb6b 	bl	80162e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018c0a:	68fb      	ldr	r3, [r7, #12]
 8018c0c:	6a1b      	ldr	r3, [r3, #32]
 8018c0e:	68f8      	ldr	r0, [r7, #12]
 8018c10:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018c12:	68fb      	ldr	r3, [r7, #12]
 8018c14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018c18:	f003 0304 	and.w	r3, r3, #4
 8018c1c:	2b00      	cmp	r3, #0
 8018c1e:	d02e      	beq.n	8018c7e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8018c20:	68fb      	ldr	r3, [r7, #12]
 8018c22:	699b      	ldr	r3, [r3, #24]
 8018c24:	693a      	ldr	r2, [r7, #16]
 8018c26:	4413      	add	r3, r2
 8018c28:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8018c2a:	68ba      	ldr	r2, [r7, #8]
 8018c2c:	693b      	ldr	r3, [r7, #16]
 8018c2e:	429a      	cmp	r2, r3
 8018c30:	d90e      	bls.n	8018c50 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8018c32:	68fb      	ldr	r3, [r7, #12]
 8018c34:	68ba      	ldr	r2, [r7, #8]
 8018c36:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018c38:	68fb      	ldr	r3, [r7, #12]
 8018c3a:	68fa      	ldr	r2, [r7, #12]
 8018c3c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018c3e:	4b19      	ldr	r3, [pc, #100]	; (8018ca4 <prvSwitchTimerLists+0xc0>)
 8018c40:	681a      	ldr	r2, [r3, #0]
 8018c42:	68fb      	ldr	r3, [r7, #12]
 8018c44:	3304      	adds	r3, #4
 8018c46:	4619      	mov	r1, r3
 8018c48:	4610      	mov	r0, r2
 8018c4a:	f7fd fb10 	bl	801626e <vListInsert>
 8018c4e:	e016      	b.n	8018c7e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018c50:	2300      	movs	r3, #0
 8018c52:	9300      	str	r3, [sp, #0]
 8018c54:	2300      	movs	r3, #0
 8018c56:	693a      	ldr	r2, [r7, #16]
 8018c58:	2100      	movs	r1, #0
 8018c5a:	68f8      	ldr	r0, [r7, #12]
 8018c5c:	f7ff fd5e 	bl	801871c <xTimerGenericCommand>
 8018c60:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8018c62:	687b      	ldr	r3, [r7, #4]
 8018c64:	2b00      	cmp	r3, #0
 8018c66:	d10a      	bne.n	8018c7e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8018c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c6c:	f383 8811 	msr	BASEPRI, r3
 8018c70:	f3bf 8f6f 	isb	sy
 8018c74:	f3bf 8f4f 	dsb	sy
 8018c78:	603b      	str	r3, [r7, #0]
}
 8018c7a:	bf00      	nop
 8018c7c:	e7fe      	b.n	8018c7c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8018c7e:	4b09      	ldr	r3, [pc, #36]	; (8018ca4 <prvSwitchTimerLists+0xc0>)
 8018c80:	681b      	ldr	r3, [r3, #0]
 8018c82:	681b      	ldr	r3, [r3, #0]
 8018c84:	2b00      	cmp	r3, #0
 8018c86:	d1b1      	bne.n	8018bec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8018c88:	4b06      	ldr	r3, [pc, #24]	; (8018ca4 <prvSwitchTimerLists+0xc0>)
 8018c8a:	681b      	ldr	r3, [r3, #0]
 8018c8c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8018c8e:	4b06      	ldr	r3, [pc, #24]	; (8018ca8 <prvSwitchTimerLists+0xc4>)
 8018c90:	681b      	ldr	r3, [r3, #0]
 8018c92:	4a04      	ldr	r2, [pc, #16]	; (8018ca4 <prvSwitchTimerLists+0xc0>)
 8018c94:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8018c96:	4a04      	ldr	r2, [pc, #16]	; (8018ca8 <prvSwitchTimerLists+0xc4>)
 8018c98:	697b      	ldr	r3, [r7, #20]
 8018c9a:	6013      	str	r3, [r2, #0]
}
 8018c9c:	bf00      	nop
 8018c9e:	3718      	adds	r7, #24
 8018ca0:	46bd      	mov	sp, r7
 8018ca2:	bd80      	pop	{r7, pc}
 8018ca4:	20002720 	.word	0x20002720
 8018ca8:	20002724 	.word	0x20002724

08018cac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8018cac:	b580      	push	{r7, lr}
 8018cae:	b082      	sub	sp, #8
 8018cb0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8018cb2:	f000 f967 	bl	8018f84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8018cb6:	4b15      	ldr	r3, [pc, #84]	; (8018d0c <prvCheckForValidListAndQueue+0x60>)
 8018cb8:	681b      	ldr	r3, [r3, #0]
 8018cba:	2b00      	cmp	r3, #0
 8018cbc:	d120      	bne.n	8018d00 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8018cbe:	4814      	ldr	r0, [pc, #80]	; (8018d10 <prvCheckForValidListAndQueue+0x64>)
 8018cc0:	f7fd fa84 	bl	80161cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8018cc4:	4813      	ldr	r0, [pc, #76]	; (8018d14 <prvCheckForValidListAndQueue+0x68>)
 8018cc6:	f7fd fa81 	bl	80161cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8018cca:	4b13      	ldr	r3, [pc, #76]	; (8018d18 <prvCheckForValidListAndQueue+0x6c>)
 8018ccc:	4a10      	ldr	r2, [pc, #64]	; (8018d10 <prvCheckForValidListAndQueue+0x64>)
 8018cce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8018cd0:	4b12      	ldr	r3, [pc, #72]	; (8018d1c <prvCheckForValidListAndQueue+0x70>)
 8018cd2:	4a10      	ldr	r2, [pc, #64]	; (8018d14 <prvCheckForValidListAndQueue+0x68>)
 8018cd4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8018cd6:	2300      	movs	r3, #0
 8018cd8:	9300      	str	r3, [sp, #0]
 8018cda:	4b11      	ldr	r3, [pc, #68]	; (8018d20 <prvCheckForValidListAndQueue+0x74>)
 8018cdc:	4a11      	ldr	r2, [pc, #68]	; (8018d24 <prvCheckForValidListAndQueue+0x78>)
 8018cde:	2110      	movs	r1, #16
 8018ce0:	200a      	movs	r0, #10
 8018ce2:	f7fd fb8f 	bl	8016404 <xQueueGenericCreateStatic>
 8018ce6:	4603      	mov	r3, r0
 8018ce8:	4a08      	ldr	r2, [pc, #32]	; (8018d0c <prvCheckForValidListAndQueue+0x60>)
 8018cea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8018cec:	4b07      	ldr	r3, [pc, #28]	; (8018d0c <prvCheckForValidListAndQueue+0x60>)
 8018cee:	681b      	ldr	r3, [r3, #0]
 8018cf0:	2b00      	cmp	r3, #0
 8018cf2:	d005      	beq.n	8018d00 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8018cf4:	4b05      	ldr	r3, [pc, #20]	; (8018d0c <prvCheckForValidListAndQueue+0x60>)
 8018cf6:	681b      	ldr	r3, [r3, #0]
 8018cf8:	490b      	ldr	r1, [pc, #44]	; (8018d28 <prvCheckForValidListAndQueue+0x7c>)
 8018cfa:	4618      	mov	r0, r3
 8018cfc:	f7fe faa0 	bl	8017240 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018d00:	f000 f970 	bl	8018fe4 <vPortExitCritical>
}
 8018d04:	bf00      	nop
 8018d06:	46bd      	mov	sp, r7
 8018d08:	bd80      	pop	{r7, pc}
 8018d0a:	bf00      	nop
 8018d0c:	20002728 	.word	0x20002728
 8018d10:	200026f8 	.word	0x200026f8
 8018d14:	2000270c 	.word	0x2000270c
 8018d18:	20002720 	.word	0x20002720
 8018d1c:	20002724 	.word	0x20002724
 8018d20:	200027d4 	.word	0x200027d4
 8018d24:	20002734 	.word	0x20002734
 8018d28:	080228c4 	.word	0x080228c4

08018d2c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8018d2c:	b480      	push	{r7}
 8018d2e:	b085      	sub	sp, #20
 8018d30:	af00      	add	r7, sp, #0
 8018d32:	60f8      	str	r0, [r7, #12]
 8018d34:	60b9      	str	r1, [r7, #8]
 8018d36:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8018d38:	68fb      	ldr	r3, [r7, #12]
 8018d3a:	3b04      	subs	r3, #4
 8018d3c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8018d3e:	68fb      	ldr	r3, [r7, #12]
 8018d40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8018d44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018d46:	68fb      	ldr	r3, [r7, #12]
 8018d48:	3b04      	subs	r3, #4
 8018d4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8018d4c:	68bb      	ldr	r3, [r7, #8]
 8018d4e:	f023 0201 	bic.w	r2, r3, #1
 8018d52:	68fb      	ldr	r3, [r7, #12]
 8018d54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018d56:	68fb      	ldr	r3, [r7, #12]
 8018d58:	3b04      	subs	r3, #4
 8018d5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8018d5c:	4a0c      	ldr	r2, [pc, #48]	; (8018d90 <pxPortInitialiseStack+0x64>)
 8018d5e:	68fb      	ldr	r3, [r7, #12]
 8018d60:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8018d62:	68fb      	ldr	r3, [r7, #12]
 8018d64:	3b14      	subs	r3, #20
 8018d66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8018d68:	687a      	ldr	r2, [r7, #4]
 8018d6a:	68fb      	ldr	r3, [r7, #12]
 8018d6c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8018d6e:	68fb      	ldr	r3, [r7, #12]
 8018d70:	3b04      	subs	r3, #4
 8018d72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8018d74:	68fb      	ldr	r3, [r7, #12]
 8018d76:	f06f 0202 	mvn.w	r2, #2
 8018d7a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8018d7c:	68fb      	ldr	r3, [r7, #12]
 8018d7e:	3b20      	subs	r3, #32
 8018d80:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8018d82:	68fb      	ldr	r3, [r7, #12]
}
 8018d84:	4618      	mov	r0, r3
 8018d86:	3714      	adds	r7, #20
 8018d88:	46bd      	mov	sp, r7
 8018d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d8e:	4770      	bx	lr
 8018d90:	08018d95 	.word	0x08018d95

08018d94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8018d94:	b480      	push	{r7}
 8018d96:	b085      	sub	sp, #20
 8018d98:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8018d9a:	2300      	movs	r3, #0
 8018d9c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8018d9e:	4b12      	ldr	r3, [pc, #72]	; (8018de8 <prvTaskExitError+0x54>)
 8018da0:	681b      	ldr	r3, [r3, #0]
 8018da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018da6:	d00a      	beq.n	8018dbe <prvTaskExitError+0x2a>
	__asm volatile
 8018da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018dac:	f383 8811 	msr	BASEPRI, r3
 8018db0:	f3bf 8f6f 	isb	sy
 8018db4:	f3bf 8f4f 	dsb	sy
 8018db8:	60fb      	str	r3, [r7, #12]
}
 8018dba:	bf00      	nop
 8018dbc:	e7fe      	b.n	8018dbc <prvTaskExitError+0x28>
	__asm volatile
 8018dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018dc2:	f383 8811 	msr	BASEPRI, r3
 8018dc6:	f3bf 8f6f 	isb	sy
 8018dca:	f3bf 8f4f 	dsb	sy
 8018dce:	60bb      	str	r3, [r7, #8]
}
 8018dd0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8018dd2:	bf00      	nop
 8018dd4:	687b      	ldr	r3, [r7, #4]
 8018dd6:	2b00      	cmp	r3, #0
 8018dd8:	d0fc      	beq.n	8018dd4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8018dda:	bf00      	nop
 8018ddc:	bf00      	nop
 8018dde:	3714      	adds	r7, #20
 8018de0:	46bd      	mov	sp, r7
 8018de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018de6:	4770      	bx	lr
 8018de8:	200000ec 	.word	0x200000ec
 8018dec:	00000000 	.word	0x00000000

08018df0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8018df0:	4b07      	ldr	r3, [pc, #28]	; (8018e10 <pxCurrentTCBConst2>)
 8018df2:	6819      	ldr	r1, [r3, #0]
 8018df4:	6808      	ldr	r0, [r1, #0]
 8018df6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018dfa:	f380 8809 	msr	PSP, r0
 8018dfe:	f3bf 8f6f 	isb	sy
 8018e02:	f04f 0000 	mov.w	r0, #0
 8018e06:	f380 8811 	msr	BASEPRI, r0
 8018e0a:	4770      	bx	lr
 8018e0c:	f3af 8000 	nop.w

08018e10 <pxCurrentTCBConst2>:
 8018e10:	200021f8 	.word	0x200021f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8018e14:	bf00      	nop
 8018e16:	bf00      	nop

08018e18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8018e18:	4808      	ldr	r0, [pc, #32]	; (8018e3c <prvPortStartFirstTask+0x24>)
 8018e1a:	6800      	ldr	r0, [r0, #0]
 8018e1c:	6800      	ldr	r0, [r0, #0]
 8018e1e:	f380 8808 	msr	MSP, r0
 8018e22:	f04f 0000 	mov.w	r0, #0
 8018e26:	f380 8814 	msr	CONTROL, r0
 8018e2a:	b662      	cpsie	i
 8018e2c:	b661      	cpsie	f
 8018e2e:	f3bf 8f4f 	dsb	sy
 8018e32:	f3bf 8f6f 	isb	sy
 8018e36:	df00      	svc	0
 8018e38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8018e3a:	bf00      	nop
 8018e3c:	e000ed08 	.word	0xe000ed08

08018e40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8018e40:	b580      	push	{r7, lr}
 8018e42:	b086      	sub	sp, #24
 8018e44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8018e46:	4b46      	ldr	r3, [pc, #280]	; (8018f60 <xPortStartScheduler+0x120>)
 8018e48:	681b      	ldr	r3, [r3, #0]
 8018e4a:	4a46      	ldr	r2, [pc, #280]	; (8018f64 <xPortStartScheduler+0x124>)
 8018e4c:	4293      	cmp	r3, r2
 8018e4e:	d10a      	bne.n	8018e66 <xPortStartScheduler+0x26>
	__asm volatile
 8018e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e54:	f383 8811 	msr	BASEPRI, r3
 8018e58:	f3bf 8f6f 	isb	sy
 8018e5c:	f3bf 8f4f 	dsb	sy
 8018e60:	613b      	str	r3, [r7, #16]
}
 8018e62:	bf00      	nop
 8018e64:	e7fe      	b.n	8018e64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8018e66:	4b3e      	ldr	r3, [pc, #248]	; (8018f60 <xPortStartScheduler+0x120>)
 8018e68:	681b      	ldr	r3, [r3, #0]
 8018e6a:	4a3f      	ldr	r2, [pc, #252]	; (8018f68 <xPortStartScheduler+0x128>)
 8018e6c:	4293      	cmp	r3, r2
 8018e6e:	d10a      	bne.n	8018e86 <xPortStartScheduler+0x46>
	__asm volatile
 8018e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e74:	f383 8811 	msr	BASEPRI, r3
 8018e78:	f3bf 8f6f 	isb	sy
 8018e7c:	f3bf 8f4f 	dsb	sy
 8018e80:	60fb      	str	r3, [r7, #12]
}
 8018e82:	bf00      	nop
 8018e84:	e7fe      	b.n	8018e84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8018e86:	4b39      	ldr	r3, [pc, #228]	; (8018f6c <xPortStartScheduler+0x12c>)
 8018e88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8018e8a:	697b      	ldr	r3, [r7, #20]
 8018e8c:	781b      	ldrb	r3, [r3, #0]
 8018e8e:	b2db      	uxtb	r3, r3
 8018e90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8018e92:	697b      	ldr	r3, [r7, #20]
 8018e94:	22ff      	movs	r2, #255	; 0xff
 8018e96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8018e98:	697b      	ldr	r3, [r7, #20]
 8018e9a:	781b      	ldrb	r3, [r3, #0]
 8018e9c:	b2db      	uxtb	r3, r3
 8018e9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8018ea0:	78fb      	ldrb	r3, [r7, #3]
 8018ea2:	b2db      	uxtb	r3, r3
 8018ea4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8018ea8:	b2da      	uxtb	r2, r3
 8018eaa:	4b31      	ldr	r3, [pc, #196]	; (8018f70 <xPortStartScheduler+0x130>)
 8018eac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8018eae:	4b31      	ldr	r3, [pc, #196]	; (8018f74 <xPortStartScheduler+0x134>)
 8018eb0:	2207      	movs	r2, #7
 8018eb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018eb4:	e009      	b.n	8018eca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8018eb6:	4b2f      	ldr	r3, [pc, #188]	; (8018f74 <xPortStartScheduler+0x134>)
 8018eb8:	681b      	ldr	r3, [r3, #0]
 8018eba:	3b01      	subs	r3, #1
 8018ebc:	4a2d      	ldr	r2, [pc, #180]	; (8018f74 <xPortStartScheduler+0x134>)
 8018ebe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8018ec0:	78fb      	ldrb	r3, [r7, #3]
 8018ec2:	b2db      	uxtb	r3, r3
 8018ec4:	005b      	lsls	r3, r3, #1
 8018ec6:	b2db      	uxtb	r3, r3
 8018ec8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018eca:	78fb      	ldrb	r3, [r7, #3]
 8018ecc:	b2db      	uxtb	r3, r3
 8018ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018ed2:	2b80      	cmp	r3, #128	; 0x80
 8018ed4:	d0ef      	beq.n	8018eb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8018ed6:	4b27      	ldr	r3, [pc, #156]	; (8018f74 <xPortStartScheduler+0x134>)
 8018ed8:	681b      	ldr	r3, [r3, #0]
 8018eda:	f1c3 0307 	rsb	r3, r3, #7
 8018ede:	2b04      	cmp	r3, #4
 8018ee0:	d00a      	beq.n	8018ef8 <xPortStartScheduler+0xb8>
	__asm volatile
 8018ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ee6:	f383 8811 	msr	BASEPRI, r3
 8018eea:	f3bf 8f6f 	isb	sy
 8018eee:	f3bf 8f4f 	dsb	sy
 8018ef2:	60bb      	str	r3, [r7, #8]
}
 8018ef4:	bf00      	nop
 8018ef6:	e7fe      	b.n	8018ef6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8018ef8:	4b1e      	ldr	r3, [pc, #120]	; (8018f74 <xPortStartScheduler+0x134>)
 8018efa:	681b      	ldr	r3, [r3, #0]
 8018efc:	021b      	lsls	r3, r3, #8
 8018efe:	4a1d      	ldr	r2, [pc, #116]	; (8018f74 <xPortStartScheduler+0x134>)
 8018f00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8018f02:	4b1c      	ldr	r3, [pc, #112]	; (8018f74 <xPortStartScheduler+0x134>)
 8018f04:	681b      	ldr	r3, [r3, #0]
 8018f06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8018f0a:	4a1a      	ldr	r2, [pc, #104]	; (8018f74 <xPortStartScheduler+0x134>)
 8018f0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8018f0e:	687b      	ldr	r3, [r7, #4]
 8018f10:	b2da      	uxtb	r2, r3
 8018f12:	697b      	ldr	r3, [r7, #20]
 8018f14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8018f16:	4b18      	ldr	r3, [pc, #96]	; (8018f78 <xPortStartScheduler+0x138>)
 8018f18:	681b      	ldr	r3, [r3, #0]
 8018f1a:	4a17      	ldr	r2, [pc, #92]	; (8018f78 <xPortStartScheduler+0x138>)
 8018f1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8018f20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8018f22:	4b15      	ldr	r3, [pc, #84]	; (8018f78 <xPortStartScheduler+0x138>)
 8018f24:	681b      	ldr	r3, [r3, #0]
 8018f26:	4a14      	ldr	r2, [pc, #80]	; (8018f78 <xPortStartScheduler+0x138>)
 8018f28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8018f2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8018f2e:	f000 f8dd 	bl	80190ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8018f32:	4b12      	ldr	r3, [pc, #72]	; (8018f7c <xPortStartScheduler+0x13c>)
 8018f34:	2200      	movs	r2, #0
 8018f36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8018f38:	f000 f8fc 	bl	8019134 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8018f3c:	4b10      	ldr	r3, [pc, #64]	; (8018f80 <xPortStartScheduler+0x140>)
 8018f3e:	681b      	ldr	r3, [r3, #0]
 8018f40:	4a0f      	ldr	r2, [pc, #60]	; (8018f80 <xPortStartScheduler+0x140>)
 8018f42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8018f46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8018f48:	f7ff ff66 	bl	8018e18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8018f4c:	f7fe ff3a 	bl	8017dc4 <vTaskSwitchContext>
	prvTaskExitError();
 8018f50:	f7ff ff20 	bl	8018d94 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8018f54:	2300      	movs	r3, #0
}
 8018f56:	4618      	mov	r0, r3
 8018f58:	3718      	adds	r7, #24
 8018f5a:	46bd      	mov	sp, r7
 8018f5c:	bd80      	pop	{r7, pc}
 8018f5e:	bf00      	nop
 8018f60:	e000ed00 	.word	0xe000ed00
 8018f64:	410fc271 	.word	0x410fc271
 8018f68:	410fc270 	.word	0x410fc270
 8018f6c:	e000e400 	.word	0xe000e400
 8018f70:	20002824 	.word	0x20002824
 8018f74:	20002828 	.word	0x20002828
 8018f78:	e000ed20 	.word	0xe000ed20
 8018f7c:	200000ec 	.word	0x200000ec
 8018f80:	e000ef34 	.word	0xe000ef34

08018f84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8018f84:	b480      	push	{r7}
 8018f86:	b083      	sub	sp, #12
 8018f88:	af00      	add	r7, sp, #0
	__asm volatile
 8018f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f8e:	f383 8811 	msr	BASEPRI, r3
 8018f92:	f3bf 8f6f 	isb	sy
 8018f96:	f3bf 8f4f 	dsb	sy
 8018f9a:	607b      	str	r3, [r7, #4]
}
 8018f9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8018f9e:	4b0f      	ldr	r3, [pc, #60]	; (8018fdc <vPortEnterCritical+0x58>)
 8018fa0:	681b      	ldr	r3, [r3, #0]
 8018fa2:	3301      	adds	r3, #1
 8018fa4:	4a0d      	ldr	r2, [pc, #52]	; (8018fdc <vPortEnterCritical+0x58>)
 8018fa6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8018fa8:	4b0c      	ldr	r3, [pc, #48]	; (8018fdc <vPortEnterCritical+0x58>)
 8018faa:	681b      	ldr	r3, [r3, #0]
 8018fac:	2b01      	cmp	r3, #1
 8018fae:	d10f      	bne.n	8018fd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8018fb0:	4b0b      	ldr	r3, [pc, #44]	; (8018fe0 <vPortEnterCritical+0x5c>)
 8018fb2:	681b      	ldr	r3, [r3, #0]
 8018fb4:	b2db      	uxtb	r3, r3
 8018fb6:	2b00      	cmp	r3, #0
 8018fb8:	d00a      	beq.n	8018fd0 <vPortEnterCritical+0x4c>
	__asm volatile
 8018fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018fbe:	f383 8811 	msr	BASEPRI, r3
 8018fc2:	f3bf 8f6f 	isb	sy
 8018fc6:	f3bf 8f4f 	dsb	sy
 8018fca:	603b      	str	r3, [r7, #0]
}
 8018fcc:	bf00      	nop
 8018fce:	e7fe      	b.n	8018fce <vPortEnterCritical+0x4a>
	}
}
 8018fd0:	bf00      	nop
 8018fd2:	370c      	adds	r7, #12
 8018fd4:	46bd      	mov	sp, r7
 8018fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fda:	4770      	bx	lr
 8018fdc:	200000ec 	.word	0x200000ec
 8018fe0:	e000ed04 	.word	0xe000ed04

08018fe4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8018fe4:	b480      	push	{r7}
 8018fe6:	b083      	sub	sp, #12
 8018fe8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8018fea:	4b12      	ldr	r3, [pc, #72]	; (8019034 <vPortExitCritical+0x50>)
 8018fec:	681b      	ldr	r3, [r3, #0]
 8018fee:	2b00      	cmp	r3, #0
 8018ff0:	d10a      	bne.n	8019008 <vPortExitCritical+0x24>
	__asm volatile
 8018ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ff6:	f383 8811 	msr	BASEPRI, r3
 8018ffa:	f3bf 8f6f 	isb	sy
 8018ffe:	f3bf 8f4f 	dsb	sy
 8019002:	607b      	str	r3, [r7, #4]
}
 8019004:	bf00      	nop
 8019006:	e7fe      	b.n	8019006 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8019008:	4b0a      	ldr	r3, [pc, #40]	; (8019034 <vPortExitCritical+0x50>)
 801900a:	681b      	ldr	r3, [r3, #0]
 801900c:	3b01      	subs	r3, #1
 801900e:	4a09      	ldr	r2, [pc, #36]	; (8019034 <vPortExitCritical+0x50>)
 8019010:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8019012:	4b08      	ldr	r3, [pc, #32]	; (8019034 <vPortExitCritical+0x50>)
 8019014:	681b      	ldr	r3, [r3, #0]
 8019016:	2b00      	cmp	r3, #0
 8019018:	d105      	bne.n	8019026 <vPortExitCritical+0x42>
 801901a:	2300      	movs	r3, #0
 801901c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801901e:	683b      	ldr	r3, [r7, #0]
 8019020:	f383 8811 	msr	BASEPRI, r3
}
 8019024:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8019026:	bf00      	nop
 8019028:	370c      	adds	r7, #12
 801902a:	46bd      	mov	sp, r7
 801902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019030:	4770      	bx	lr
 8019032:	bf00      	nop
 8019034:	200000ec 	.word	0x200000ec
	...

08019040 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8019040:	f3ef 8009 	mrs	r0, PSP
 8019044:	f3bf 8f6f 	isb	sy
 8019048:	4b15      	ldr	r3, [pc, #84]	; (80190a0 <pxCurrentTCBConst>)
 801904a:	681a      	ldr	r2, [r3, #0]
 801904c:	f01e 0f10 	tst.w	lr, #16
 8019050:	bf08      	it	eq
 8019052:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8019056:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801905a:	6010      	str	r0, [r2, #0]
 801905c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8019060:	f04f 0050 	mov.w	r0, #80	; 0x50
 8019064:	f380 8811 	msr	BASEPRI, r0
 8019068:	f3bf 8f4f 	dsb	sy
 801906c:	f3bf 8f6f 	isb	sy
 8019070:	f7fe fea8 	bl	8017dc4 <vTaskSwitchContext>
 8019074:	f04f 0000 	mov.w	r0, #0
 8019078:	f380 8811 	msr	BASEPRI, r0
 801907c:	bc09      	pop	{r0, r3}
 801907e:	6819      	ldr	r1, [r3, #0]
 8019080:	6808      	ldr	r0, [r1, #0]
 8019082:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019086:	f01e 0f10 	tst.w	lr, #16
 801908a:	bf08      	it	eq
 801908c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8019090:	f380 8809 	msr	PSP, r0
 8019094:	f3bf 8f6f 	isb	sy
 8019098:	4770      	bx	lr
 801909a:	bf00      	nop
 801909c:	f3af 8000 	nop.w

080190a0 <pxCurrentTCBConst>:
 80190a0:	200021f8 	.word	0x200021f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80190a4:	bf00      	nop
 80190a6:	bf00      	nop

080190a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80190a8:	b580      	push	{r7, lr}
 80190aa:	b082      	sub	sp, #8
 80190ac:	af00      	add	r7, sp, #0
	__asm volatile
 80190ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80190b2:	f383 8811 	msr	BASEPRI, r3
 80190b6:	f3bf 8f6f 	isb	sy
 80190ba:	f3bf 8f4f 	dsb	sy
 80190be:	607b      	str	r3, [r7, #4]
}
 80190c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80190c2:	f7fe fdc5 	bl	8017c50 <xTaskIncrementTick>
 80190c6:	4603      	mov	r3, r0
 80190c8:	2b00      	cmp	r3, #0
 80190ca:	d003      	beq.n	80190d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80190cc:	4b06      	ldr	r3, [pc, #24]	; (80190e8 <xPortSysTickHandler+0x40>)
 80190ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80190d2:	601a      	str	r2, [r3, #0]
 80190d4:	2300      	movs	r3, #0
 80190d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80190d8:	683b      	ldr	r3, [r7, #0]
 80190da:	f383 8811 	msr	BASEPRI, r3
}
 80190de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80190e0:	bf00      	nop
 80190e2:	3708      	adds	r7, #8
 80190e4:	46bd      	mov	sp, r7
 80190e6:	bd80      	pop	{r7, pc}
 80190e8:	e000ed04 	.word	0xe000ed04

080190ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80190ec:	b480      	push	{r7}
 80190ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80190f0:	4b0b      	ldr	r3, [pc, #44]	; (8019120 <vPortSetupTimerInterrupt+0x34>)
 80190f2:	2200      	movs	r2, #0
 80190f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80190f6:	4b0b      	ldr	r3, [pc, #44]	; (8019124 <vPortSetupTimerInterrupt+0x38>)
 80190f8:	2200      	movs	r2, #0
 80190fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80190fc:	4b0a      	ldr	r3, [pc, #40]	; (8019128 <vPortSetupTimerInterrupt+0x3c>)
 80190fe:	681b      	ldr	r3, [r3, #0]
 8019100:	4a0a      	ldr	r2, [pc, #40]	; (801912c <vPortSetupTimerInterrupt+0x40>)
 8019102:	fba2 2303 	umull	r2, r3, r2, r3
 8019106:	099b      	lsrs	r3, r3, #6
 8019108:	4a09      	ldr	r2, [pc, #36]	; (8019130 <vPortSetupTimerInterrupt+0x44>)
 801910a:	3b01      	subs	r3, #1
 801910c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801910e:	4b04      	ldr	r3, [pc, #16]	; (8019120 <vPortSetupTimerInterrupt+0x34>)
 8019110:	2207      	movs	r2, #7
 8019112:	601a      	str	r2, [r3, #0]
}
 8019114:	bf00      	nop
 8019116:	46bd      	mov	sp, r7
 8019118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801911c:	4770      	bx	lr
 801911e:	bf00      	nop
 8019120:	e000e010 	.word	0xe000e010
 8019124:	e000e018 	.word	0xe000e018
 8019128:	20000088 	.word	0x20000088
 801912c:	10624dd3 	.word	0x10624dd3
 8019130:	e000e014 	.word	0xe000e014

08019134 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8019134:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8019144 <vPortEnableVFP+0x10>
 8019138:	6801      	ldr	r1, [r0, #0]
 801913a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801913e:	6001      	str	r1, [r0, #0]
 8019140:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8019142:	bf00      	nop
 8019144:	e000ed88 	.word	0xe000ed88

08019148 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8019148:	b480      	push	{r7}
 801914a:	b085      	sub	sp, #20
 801914c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801914e:	f3ef 8305 	mrs	r3, IPSR
 8019152:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8019154:	68fb      	ldr	r3, [r7, #12]
 8019156:	2b0f      	cmp	r3, #15
 8019158:	d914      	bls.n	8019184 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801915a:	4a17      	ldr	r2, [pc, #92]	; (80191b8 <vPortValidateInterruptPriority+0x70>)
 801915c:	68fb      	ldr	r3, [r7, #12]
 801915e:	4413      	add	r3, r2
 8019160:	781b      	ldrb	r3, [r3, #0]
 8019162:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8019164:	4b15      	ldr	r3, [pc, #84]	; (80191bc <vPortValidateInterruptPriority+0x74>)
 8019166:	781b      	ldrb	r3, [r3, #0]
 8019168:	7afa      	ldrb	r2, [r7, #11]
 801916a:	429a      	cmp	r2, r3
 801916c:	d20a      	bcs.n	8019184 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801916e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019172:	f383 8811 	msr	BASEPRI, r3
 8019176:	f3bf 8f6f 	isb	sy
 801917a:	f3bf 8f4f 	dsb	sy
 801917e:	607b      	str	r3, [r7, #4]
}
 8019180:	bf00      	nop
 8019182:	e7fe      	b.n	8019182 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8019184:	4b0e      	ldr	r3, [pc, #56]	; (80191c0 <vPortValidateInterruptPriority+0x78>)
 8019186:	681b      	ldr	r3, [r3, #0]
 8019188:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801918c:	4b0d      	ldr	r3, [pc, #52]	; (80191c4 <vPortValidateInterruptPriority+0x7c>)
 801918e:	681b      	ldr	r3, [r3, #0]
 8019190:	429a      	cmp	r2, r3
 8019192:	d90a      	bls.n	80191aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8019194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019198:	f383 8811 	msr	BASEPRI, r3
 801919c:	f3bf 8f6f 	isb	sy
 80191a0:	f3bf 8f4f 	dsb	sy
 80191a4:	603b      	str	r3, [r7, #0]
}
 80191a6:	bf00      	nop
 80191a8:	e7fe      	b.n	80191a8 <vPortValidateInterruptPriority+0x60>
	}
 80191aa:	bf00      	nop
 80191ac:	3714      	adds	r7, #20
 80191ae:	46bd      	mov	sp, r7
 80191b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191b4:	4770      	bx	lr
 80191b6:	bf00      	nop
 80191b8:	e000e3f0 	.word	0xe000e3f0
 80191bc:	20002824 	.word	0x20002824
 80191c0:	e000ed0c 	.word	0xe000ed0c
 80191c4:	20002828 	.word	0x20002828

080191c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80191c8:	b580      	push	{r7, lr}
 80191ca:	b08a      	sub	sp, #40	; 0x28
 80191cc:	af00      	add	r7, sp, #0
 80191ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80191d0:	2300      	movs	r3, #0
 80191d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80191d4:	f7fe fc80 	bl	8017ad8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80191d8:	4b5b      	ldr	r3, [pc, #364]	; (8019348 <pvPortMalloc+0x180>)
 80191da:	681b      	ldr	r3, [r3, #0]
 80191dc:	2b00      	cmp	r3, #0
 80191de:	d101      	bne.n	80191e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80191e0:	f000 f920 	bl	8019424 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80191e4:	4b59      	ldr	r3, [pc, #356]	; (801934c <pvPortMalloc+0x184>)
 80191e6:	681a      	ldr	r2, [r3, #0]
 80191e8:	687b      	ldr	r3, [r7, #4]
 80191ea:	4013      	ands	r3, r2
 80191ec:	2b00      	cmp	r3, #0
 80191ee:	f040 8093 	bne.w	8019318 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80191f2:	687b      	ldr	r3, [r7, #4]
 80191f4:	2b00      	cmp	r3, #0
 80191f6:	d01d      	beq.n	8019234 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80191f8:	2208      	movs	r2, #8
 80191fa:	687b      	ldr	r3, [r7, #4]
 80191fc:	4413      	add	r3, r2
 80191fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8019200:	687b      	ldr	r3, [r7, #4]
 8019202:	f003 0307 	and.w	r3, r3, #7
 8019206:	2b00      	cmp	r3, #0
 8019208:	d014      	beq.n	8019234 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801920a:	687b      	ldr	r3, [r7, #4]
 801920c:	f023 0307 	bic.w	r3, r3, #7
 8019210:	3308      	adds	r3, #8
 8019212:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019214:	687b      	ldr	r3, [r7, #4]
 8019216:	f003 0307 	and.w	r3, r3, #7
 801921a:	2b00      	cmp	r3, #0
 801921c:	d00a      	beq.n	8019234 <pvPortMalloc+0x6c>
	__asm volatile
 801921e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019222:	f383 8811 	msr	BASEPRI, r3
 8019226:	f3bf 8f6f 	isb	sy
 801922a:	f3bf 8f4f 	dsb	sy
 801922e:	617b      	str	r3, [r7, #20]
}
 8019230:	bf00      	nop
 8019232:	e7fe      	b.n	8019232 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8019234:	687b      	ldr	r3, [r7, #4]
 8019236:	2b00      	cmp	r3, #0
 8019238:	d06e      	beq.n	8019318 <pvPortMalloc+0x150>
 801923a:	4b45      	ldr	r3, [pc, #276]	; (8019350 <pvPortMalloc+0x188>)
 801923c:	681b      	ldr	r3, [r3, #0]
 801923e:	687a      	ldr	r2, [r7, #4]
 8019240:	429a      	cmp	r2, r3
 8019242:	d869      	bhi.n	8019318 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8019244:	4b43      	ldr	r3, [pc, #268]	; (8019354 <pvPortMalloc+0x18c>)
 8019246:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8019248:	4b42      	ldr	r3, [pc, #264]	; (8019354 <pvPortMalloc+0x18c>)
 801924a:	681b      	ldr	r3, [r3, #0]
 801924c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801924e:	e004      	b.n	801925a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8019250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019252:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8019254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019256:	681b      	ldr	r3, [r3, #0]
 8019258:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801925a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801925c:	685b      	ldr	r3, [r3, #4]
 801925e:	687a      	ldr	r2, [r7, #4]
 8019260:	429a      	cmp	r2, r3
 8019262:	d903      	bls.n	801926c <pvPortMalloc+0xa4>
 8019264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019266:	681b      	ldr	r3, [r3, #0]
 8019268:	2b00      	cmp	r3, #0
 801926a:	d1f1      	bne.n	8019250 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801926c:	4b36      	ldr	r3, [pc, #216]	; (8019348 <pvPortMalloc+0x180>)
 801926e:	681b      	ldr	r3, [r3, #0]
 8019270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019272:	429a      	cmp	r2, r3
 8019274:	d050      	beq.n	8019318 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8019276:	6a3b      	ldr	r3, [r7, #32]
 8019278:	681b      	ldr	r3, [r3, #0]
 801927a:	2208      	movs	r2, #8
 801927c:	4413      	add	r3, r2
 801927e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8019280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019282:	681a      	ldr	r2, [r3, #0]
 8019284:	6a3b      	ldr	r3, [r7, #32]
 8019286:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8019288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801928a:	685a      	ldr	r2, [r3, #4]
 801928c:	687b      	ldr	r3, [r7, #4]
 801928e:	1ad2      	subs	r2, r2, r3
 8019290:	2308      	movs	r3, #8
 8019292:	005b      	lsls	r3, r3, #1
 8019294:	429a      	cmp	r2, r3
 8019296:	d91f      	bls.n	80192d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8019298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801929a:	687b      	ldr	r3, [r7, #4]
 801929c:	4413      	add	r3, r2
 801929e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80192a0:	69bb      	ldr	r3, [r7, #24]
 80192a2:	f003 0307 	and.w	r3, r3, #7
 80192a6:	2b00      	cmp	r3, #0
 80192a8:	d00a      	beq.n	80192c0 <pvPortMalloc+0xf8>
	__asm volatile
 80192aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80192ae:	f383 8811 	msr	BASEPRI, r3
 80192b2:	f3bf 8f6f 	isb	sy
 80192b6:	f3bf 8f4f 	dsb	sy
 80192ba:	613b      	str	r3, [r7, #16]
}
 80192bc:	bf00      	nop
 80192be:	e7fe      	b.n	80192be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80192c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192c2:	685a      	ldr	r2, [r3, #4]
 80192c4:	687b      	ldr	r3, [r7, #4]
 80192c6:	1ad2      	subs	r2, r2, r3
 80192c8:	69bb      	ldr	r3, [r7, #24]
 80192ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80192cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192ce:	687a      	ldr	r2, [r7, #4]
 80192d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80192d2:	69b8      	ldr	r0, [r7, #24]
 80192d4:	f000 f908 	bl	80194e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80192d8:	4b1d      	ldr	r3, [pc, #116]	; (8019350 <pvPortMalloc+0x188>)
 80192da:	681a      	ldr	r2, [r3, #0]
 80192dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192de:	685b      	ldr	r3, [r3, #4]
 80192e0:	1ad3      	subs	r3, r2, r3
 80192e2:	4a1b      	ldr	r2, [pc, #108]	; (8019350 <pvPortMalloc+0x188>)
 80192e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80192e6:	4b1a      	ldr	r3, [pc, #104]	; (8019350 <pvPortMalloc+0x188>)
 80192e8:	681a      	ldr	r2, [r3, #0]
 80192ea:	4b1b      	ldr	r3, [pc, #108]	; (8019358 <pvPortMalloc+0x190>)
 80192ec:	681b      	ldr	r3, [r3, #0]
 80192ee:	429a      	cmp	r2, r3
 80192f0:	d203      	bcs.n	80192fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80192f2:	4b17      	ldr	r3, [pc, #92]	; (8019350 <pvPortMalloc+0x188>)
 80192f4:	681b      	ldr	r3, [r3, #0]
 80192f6:	4a18      	ldr	r2, [pc, #96]	; (8019358 <pvPortMalloc+0x190>)
 80192f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80192fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192fc:	685a      	ldr	r2, [r3, #4]
 80192fe:	4b13      	ldr	r3, [pc, #76]	; (801934c <pvPortMalloc+0x184>)
 8019300:	681b      	ldr	r3, [r3, #0]
 8019302:	431a      	orrs	r2, r3
 8019304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019306:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8019308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801930a:	2200      	movs	r2, #0
 801930c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801930e:	4b13      	ldr	r3, [pc, #76]	; (801935c <pvPortMalloc+0x194>)
 8019310:	681b      	ldr	r3, [r3, #0]
 8019312:	3301      	adds	r3, #1
 8019314:	4a11      	ldr	r2, [pc, #68]	; (801935c <pvPortMalloc+0x194>)
 8019316:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8019318:	f7fe fbec 	bl	8017af4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801931c:	69fb      	ldr	r3, [r7, #28]
 801931e:	f003 0307 	and.w	r3, r3, #7
 8019322:	2b00      	cmp	r3, #0
 8019324:	d00a      	beq.n	801933c <pvPortMalloc+0x174>
	__asm volatile
 8019326:	f04f 0350 	mov.w	r3, #80	; 0x50
 801932a:	f383 8811 	msr	BASEPRI, r3
 801932e:	f3bf 8f6f 	isb	sy
 8019332:	f3bf 8f4f 	dsb	sy
 8019336:	60fb      	str	r3, [r7, #12]
}
 8019338:	bf00      	nop
 801933a:	e7fe      	b.n	801933a <pvPortMalloc+0x172>
	return pvReturn;
 801933c:	69fb      	ldr	r3, [r7, #28]
}
 801933e:	4618      	mov	r0, r3
 8019340:	3728      	adds	r7, #40	; 0x28
 8019342:	46bd      	mov	sp, r7
 8019344:	bd80      	pop	{r7, pc}
 8019346:	bf00      	nop
 8019348:	200085f4 	.word	0x200085f4
 801934c:	20008608 	.word	0x20008608
 8019350:	200085f8 	.word	0x200085f8
 8019354:	200085ec 	.word	0x200085ec
 8019358:	200085fc 	.word	0x200085fc
 801935c:	20008600 	.word	0x20008600

08019360 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8019360:	b580      	push	{r7, lr}
 8019362:	b086      	sub	sp, #24
 8019364:	af00      	add	r7, sp, #0
 8019366:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8019368:	687b      	ldr	r3, [r7, #4]
 801936a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801936c:	687b      	ldr	r3, [r7, #4]
 801936e:	2b00      	cmp	r3, #0
 8019370:	d04d      	beq.n	801940e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8019372:	2308      	movs	r3, #8
 8019374:	425b      	negs	r3, r3
 8019376:	697a      	ldr	r2, [r7, #20]
 8019378:	4413      	add	r3, r2
 801937a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801937c:	697b      	ldr	r3, [r7, #20]
 801937e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8019380:	693b      	ldr	r3, [r7, #16]
 8019382:	685a      	ldr	r2, [r3, #4]
 8019384:	4b24      	ldr	r3, [pc, #144]	; (8019418 <vPortFree+0xb8>)
 8019386:	681b      	ldr	r3, [r3, #0]
 8019388:	4013      	ands	r3, r2
 801938a:	2b00      	cmp	r3, #0
 801938c:	d10a      	bne.n	80193a4 <vPortFree+0x44>
	__asm volatile
 801938e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019392:	f383 8811 	msr	BASEPRI, r3
 8019396:	f3bf 8f6f 	isb	sy
 801939a:	f3bf 8f4f 	dsb	sy
 801939e:	60fb      	str	r3, [r7, #12]
}
 80193a0:	bf00      	nop
 80193a2:	e7fe      	b.n	80193a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80193a4:	693b      	ldr	r3, [r7, #16]
 80193a6:	681b      	ldr	r3, [r3, #0]
 80193a8:	2b00      	cmp	r3, #0
 80193aa:	d00a      	beq.n	80193c2 <vPortFree+0x62>
	__asm volatile
 80193ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80193b0:	f383 8811 	msr	BASEPRI, r3
 80193b4:	f3bf 8f6f 	isb	sy
 80193b8:	f3bf 8f4f 	dsb	sy
 80193bc:	60bb      	str	r3, [r7, #8]
}
 80193be:	bf00      	nop
 80193c0:	e7fe      	b.n	80193c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80193c2:	693b      	ldr	r3, [r7, #16]
 80193c4:	685a      	ldr	r2, [r3, #4]
 80193c6:	4b14      	ldr	r3, [pc, #80]	; (8019418 <vPortFree+0xb8>)
 80193c8:	681b      	ldr	r3, [r3, #0]
 80193ca:	4013      	ands	r3, r2
 80193cc:	2b00      	cmp	r3, #0
 80193ce:	d01e      	beq.n	801940e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80193d0:	693b      	ldr	r3, [r7, #16]
 80193d2:	681b      	ldr	r3, [r3, #0]
 80193d4:	2b00      	cmp	r3, #0
 80193d6:	d11a      	bne.n	801940e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80193d8:	693b      	ldr	r3, [r7, #16]
 80193da:	685a      	ldr	r2, [r3, #4]
 80193dc:	4b0e      	ldr	r3, [pc, #56]	; (8019418 <vPortFree+0xb8>)
 80193de:	681b      	ldr	r3, [r3, #0]
 80193e0:	43db      	mvns	r3, r3
 80193e2:	401a      	ands	r2, r3
 80193e4:	693b      	ldr	r3, [r7, #16]
 80193e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80193e8:	f7fe fb76 	bl	8017ad8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80193ec:	693b      	ldr	r3, [r7, #16]
 80193ee:	685a      	ldr	r2, [r3, #4]
 80193f0:	4b0a      	ldr	r3, [pc, #40]	; (801941c <vPortFree+0xbc>)
 80193f2:	681b      	ldr	r3, [r3, #0]
 80193f4:	4413      	add	r3, r2
 80193f6:	4a09      	ldr	r2, [pc, #36]	; (801941c <vPortFree+0xbc>)
 80193f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80193fa:	6938      	ldr	r0, [r7, #16]
 80193fc:	f000 f874 	bl	80194e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8019400:	4b07      	ldr	r3, [pc, #28]	; (8019420 <vPortFree+0xc0>)
 8019402:	681b      	ldr	r3, [r3, #0]
 8019404:	3301      	adds	r3, #1
 8019406:	4a06      	ldr	r2, [pc, #24]	; (8019420 <vPortFree+0xc0>)
 8019408:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801940a:	f7fe fb73 	bl	8017af4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801940e:	bf00      	nop
 8019410:	3718      	adds	r7, #24
 8019412:	46bd      	mov	sp, r7
 8019414:	bd80      	pop	{r7, pc}
 8019416:	bf00      	nop
 8019418:	20008608 	.word	0x20008608
 801941c:	200085f8 	.word	0x200085f8
 8019420:	20008604 	.word	0x20008604

08019424 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8019424:	b480      	push	{r7}
 8019426:	b085      	sub	sp, #20
 8019428:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801942a:	f645 53c0 	movw	r3, #24000	; 0x5dc0
 801942e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8019430:	4b27      	ldr	r3, [pc, #156]	; (80194d0 <prvHeapInit+0xac>)
 8019432:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8019434:	68fb      	ldr	r3, [r7, #12]
 8019436:	f003 0307 	and.w	r3, r3, #7
 801943a:	2b00      	cmp	r3, #0
 801943c:	d00c      	beq.n	8019458 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801943e:	68fb      	ldr	r3, [r7, #12]
 8019440:	3307      	adds	r3, #7
 8019442:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019444:	68fb      	ldr	r3, [r7, #12]
 8019446:	f023 0307 	bic.w	r3, r3, #7
 801944a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801944c:	68ba      	ldr	r2, [r7, #8]
 801944e:	68fb      	ldr	r3, [r7, #12]
 8019450:	1ad3      	subs	r3, r2, r3
 8019452:	4a1f      	ldr	r2, [pc, #124]	; (80194d0 <prvHeapInit+0xac>)
 8019454:	4413      	add	r3, r2
 8019456:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8019458:	68fb      	ldr	r3, [r7, #12]
 801945a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801945c:	4a1d      	ldr	r2, [pc, #116]	; (80194d4 <prvHeapInit+0xb0>)
 801945e:	687b      	ldr	r3, [r7, #4]
 8019460:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8019462:	4b1c      	ldr	r3, [pc, #112]	; (80194d4 <prvHeapInit+0xb0>)
 8019464:	2200      	movs	r2, #0
 8019466:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8019468:	687b      	ldr	r3, [r7, #4]
 801946a:	68ba      	ldr	r2, [r7, #8]
 801946c:	4413      	add	r3, r2
 801946e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8019470:	2208      	movs	r2, #8
 8019472:	68fb      	ldr	r3, [r7, #12]
 8019474:	1a9b      	subs	r3, r3, r2
 8019476:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019478:	68fb      	ldr	r3, [r7, #12]
 801947a:	f023 0307 	bic.w	r3, r3, #7
 801947e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8019480:	68fb      	ldr	r3, [r7, #12]
 8019482:	4a15      	ldr	r2, [pc, #84]	; (80194d8 <prvHeapInit+0xb4>)
 8019484:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8019486:	4b14      	ldr	r3, [pc, #80]	; (80194d8 <prvHeapInit+0xb4>)
 8019488:	681b      	ldr	r3, [r3, #0]
 801948a:	2200      	movs	r2, #0
 801948c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801948e:	4b12      	ldr	r3, [pc, #72]	; (80194d8 <prvHeapInit+0xb4>)
 8019490:	681b      	ldr	r3, [r3, #0]
 8019492:	2200      	movs	r2, #0
 8019494:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8019496:	687b      	ldr	r3, [r7, #4]
 8019498:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801949a:	683b      	ldr	r3, [r7, #0]
 801949c:	68fa      	ldr	r2, [r7, #12]
 801949e:	1ad2      	subs	r2, r2, r3
 80194a0:	683b      	ldr	r3, [r7, #0]
 80194a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80194a4:	4b0c      	ldr	r3, [pc, #48]	; (80194d8 <prvHeapInit+0xb4>)
 80194a6:	681a      	ldr	r2, [r3, #0]
 80194a8:	683b      	ldr	r3, [r7, #0]
 80194aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80194ac:	683b      	ldr	r3, [r7, #0]
 80194ae:	685b      	ldr	r3, [r3, #4]
 80194b0:	4a0a      	ldr	r2, [pc, #40]	; (80194dc <prvHeapInit+0xb8>)
 80194b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80194b4:	683b      	ldr	r3, [r7, #0]
 80194b6:	685b      	ldr	r3, [r3, #4]
 80194b8:	4a09      	ldr	r2, [pc, #36]	; (80194e0 <prvHeapInit+0xbc>)
 80194ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80194bc:	4b09      	ldr	r3, [pc, #36]	; (80194e4 <prvHeapInit+0xc0>)
 80194be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80194c2:	601a      	str	r2, [r3, #0]
}
 80194c4:	bf00      	nop
 80194c6:	3714      	adds	r7, #20
 80194c8:	46bd      	mov	sp, r7
 80194ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194ce:	4770      	bx	lr
 80194d0:	2000282c 	.word	0x2000282c
 80194d4:	200085ec 	.word	0x200085ec
 80194d8:	200085f4 	.word	0x200085f4
 80194dc:	200085fc 	.word	0x200085fc
 80194e0:	200085f8 	.word	0x200085f8
 80194e4:	20008608 	.word	0x20008608

080194e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80194e8:	b480      	push	{r7}
 80194ea:	b085      	sub	sp, #20
 80194ec:	af00      	add	r7, sp, #0
 80194ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80194f0:	4b28      	ldr	r3, [pc, #160]	; (8019594 <prvInsertBlockIntoFreeList+0xac>)
 80194f2:	60fb      	str	r3, [r7, #12]
 80194f4:	e002      	b.n	80194fc <prvInsertBlockIntoFreeList+0x14>
 80194f6:	68fb      	ldr	r3, [r7, #12]
 80194f8:	681b      	ldr	r3, [r3, #0]
 80194fa:	60fb      	str	r3, [r7, #12]
 80194fc:	68fb      	ldr	r3, [r7, #12]
 80194fe:	681b      	ldr	r3, [r3, #0]
 8019500:	687a      	ldr	r2, [r7, #4]
 8019502:	429a      	cmp	r2, r3
 8019504:	d8f7      	bhi.n	80194f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8019506:	68fb      	ldr	r3, [r7, #12]
 8019508:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801950a:	68fb      	ldr	r3, [r7, #12]
 801950c:	685b      	ldr	r3, [r3, #4]
 801950e:	68ba      	ldr	r2, [r7, #8]
 8019510:	4413      	add	r3, r2
 8019512:	687a      	ldr	r2, [r7, #4]
 8019514:	429a      	cmp	r2, r3
 8019516:	d108      	bne.n	801952a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8019518:	68fb      	ldr	r3, [r7, #12]
 801951a:	685a      	ldr	r2, [r3, #4]
 801951c:	687b      	ldr	r3, [r7, #4]
 801951e:	685b      	ldr	r3, [r3, #4]
 8019520:	441a      	add	r2, r3
 8019522:	68fb      	ldr	r3, [r7, #12]
 8019524:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8019526:	68fb      	ldr	r3, [r7, #12]
 8019528:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801952a:	687b      	ldr	r3, [r7, #4]
 801952c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801952e:	687b      	ldr	r3, [r7, #4]
 8019530:	685b      	ldr	r3, [r3, #4]
 8019532:	68ba      	ldr	r2, [r7, #8]
 8019534:	441a      	add	r2, r3
 8019536:	68fb      	ldr	r3, [r7, #12]
 8019538:	681b      	ldr	r3, [r3, #0]
 801953a:	429a      	cmp	r2, r3
 801953c:	d118      	bne.n	8019570 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801953e:	68fb      	ldr	r3, [r7, #12]
 8019540:	681a      	ldr	r2, [r3, #0]
 8019542:	4b15      	ldr	r3, [pc, #84]	; (8019598 <prvInsertBlockIntoFreeList+0xb0>)
 8019544:	681b      	ldr	r3, [r3, #0]
 8019546:	429a      	cmp	r2, r3
 8019548:	d00d      	beq.n	8019566 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801954a:	687b      	ldr	r3, [r7, #4]
 801954c:	685a      	ldr	r2, [r3, #4]
 801954e:	68fb      	ldr	r3, [r7, #12]
 8019550:	681b      	ldr	r3, [r3, #0]
 8019552:	685b      	ldr	r3, [r3, #4]
 8019554:	441a      	add	r2, r3
 8019556:	687b      	ldr	r3, [r7, #4]
 8019558:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801955a:	68fb      	ldr	r3, [r7, #12]
 801955c:	681b      	ldr	r3, [r3, #0]
 801955e:	681a      	ldr	r2, [r3, #0]
 8019560:	687b      	ldr	r3, [r7, #4]
 8019562:	601a      	str	r2, [r3, #0]
 8019564:	e008      	b.n	8019578 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8019566:	4b0c      	ldr	r3, [pc, #48]	; (8019598 <prvInsertBlockIntoFreeList+0xb0>)
 8019568:	681a      	ldr	r2, [r3, #0]
 801956a:	687b      	ldr	r3, [r7, #4]
 801956c:	601a      	str	r2, [r3, #0]
 801956e:	e003      	b.n	8019578 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8019570:	68fb      	ldr	r3, [r7, #12]
 8019572:	681a      	ldr	r2, [r3, #0]
 8019574:	687b      	ldr	r3, [r7, #4]
 8019576:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8019578:	68fa      	ldr	r2, [r7, #12]
 801957a:	687b      	ldr	r3, [r7, #4]
 801957c:	429a      	cmp	r2, r3
 801957e:	d002      	beq.n	8019586 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8019580:	68fb      	ldr	r3, [r7, #12]
 8019582:	687a      	ldr	r2, [r7, #4]
 8019584:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019586:	bf00      	nop
 8019588:	3714      	adds	r7, #20
 801958a:	46bd      	mov	sp, r7
 801958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019590:	4770      	bx	lr
 8019592:	bf00      	nop
 8019594:	200085ec 	.word	0x200085ec
 8019598:	200085f4 	.word	0x200085f4

0801959c <_Znwj>:
 801959c:	2801      	cmp	r0, #1
 801959e:	bf38      	it	cc
 80195a0:	2001      	movcc	r0, #1
 80195a2:	b510      	push	{r4, lr}
 80195a4:	4604      	mov	r4, r0
 80195a6:	4620      	mov	r0, r4
 80195a8:	f001 fa2e 	bl	801aa08 <malloc>
 80195ac:	b930      	cbnz	r0, 80195bc <_Znwj+0x20>
 80195ae:	f000 f81d 	bl	80195ec <_ZSt15get_new_handlerv>
 80195b2:	b908      	cbnz	r0, 80195b8 <_Znwj+0x1c>
 80195b4:	f000 ffd6 	bl	801a564 <abort>
 80195b8:	4780      	blx	r0
 80195ba:	e7f4      	b.n	80195a6 <_Znwj+0xa>
 80195bc:	bd10      	pop	{r4, pc}

080195be <_Znaj>:
 80195be:	f7ff bfed 	b.w	801959c <_Znwj>

080195c2 <__cxa_pure_virtual>:
 80195c2:	b508      	push	{r3, lr}
 80195c4:	f000 f80c 	bl	80195e0 <_ZSt9terminatev>

080195c8 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80195c8:	b508      	push	{r3, lr}
 80195ca:	4780      	blx	r0
 80195cc:	f000 ffca 	bl	801a564 <abort>

080195d0 <_ZSt13get_terminatev>:
 80195d0:	4b02      	ldr	r3, [pc, #8]	; (80195dc <_ZSt13get_terminatev+0xc>)
 80195d2:	6818      	ldr	r0, [r3, #0]
 80195d4:	f3bf 8f5b 	dmb	ish
 80195d8:	4770      	bx	lr
 80195da:	bf00      	nop
 80195dc:	200000f0 	.word	0x200000f0

080195e0 <_ZSt9terminatev>:
 80195e0:	b508      	push	{r3, lr}
 80195e2:	f7ff fff5 	bl	80195d0 <_ZSt13get_terminatev>
 80195e6:	f7ff ffef 	bl	80195c8 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

080195ec <_ZSt15get_new_handlerv>:
 80195ec:	4b02      	ldr	r3, [pc, #8]	; (80195f8 <_ZSt15get_new_handlerv+0xc>)
 80195ee:	6818      	ldr	r0, [r3, #0]
 80195f0:	f3bf 8f5b 	dmb	ish
 80195f4:	4770      	bx	lr
 80195f6:	bf00      	nop
 80195f8:	2000860c 	.word	0x2000860c

080195fc <pow>:
 80195fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019600:	ec59 8b10 	vmov	r8, r9, d0
 8019604:	ec57 6b11 	vmov	r6, r7, d1
 8019608:	f000 f8a6 	bl	8019758 <__ieee754_pow>
 801960c:	4b4e      	ldr	r3, [pc, #312]	; (8019748 <pow+0x14c>)
 801960e:	f993 3000 	ldrsb.w	r3, [r3]
 8019612:	3301      	adds	r3, #1
 8019614:	ec55 4b10 	vmov	r4, r5, d0
 8019618:	d015      	beq.n	8019646 <pow+0x4a>
 801961a:	4632      	mov	r2, r6
 801961c:	463b      	mov	r3, r7
 801961e:	4630      	mov	r0, r6
 8019620:	4639      	mov	r1, r7
 8019622:	f7e7 faa3 	bl	8000b6c <__aeabi_dcmpun>
 8019626:	b970      	cbnz	r0, 8019646 <pow+0x4a>
 8019628:	4642      	mov	r2, r8
 801962a:	464b      	mov	r3, r9
 801962c:	4640      	mov	r0, r8
 801962e:	4649      	mov	r1, r9
 8019630:	f7e7 fa9c 	bl	8000b6c <__aeabi_dcmpun>
 8019634:	2200      	movs	r2, #0
 8019636:	2300      	movs	r3, #0
 8019638:	b148      	cbz	r0, 801964e <pow+0x52>
 801963a:	4630      	mov	r0, r6
 801963c:	4639      	mov	r1, r7
 801963e:	f7e7 fa63 	bl	8000b08 <__aeabi_dcmpeq>
 8019642:	2800      	cmp	r0, #0
 8019644:	d17d      	bne.n	8019742 <pow+0x146>
 8019646:	ec45 4b10 	vmov	d0, r4, r5
 801964a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801964e:	4640      	mov	r0, r8
 8019650:	4649      	mov	r1, r9
 8019652:	f7e7 fa59 	bl	8000b08 <__aeabi_dcmpeq>
 8019656:	b1e0      	cbz	r0, 8019692 <pow+0x96>
 8019658:	2200      	movs	r2, #0
 801965a:	2300      	movs	r3, #0
 801965c:	4630      	mov	r0, r6
 801965e:	4639      	mov	r1, r7
 8019660:	f7e7 fa52 	bl	8000b08 <__aeabi_dcmpeq>
 8019664:	2800      	cmp	r0, #0
 8019666:	d16c      	bne.n	8019742 <pow+0x146>
 8019668:	ec47 6b10 	vmov	d0, r6, r7
 801966c:	f000 fe53 	bl	801a316 <finite>
 8019670:	2800      	cmp	r0, #0
 8019672:	d0e8      	beq.n	8019646 <pow+0x4a>
 8019674:	2200      	movs	r2, #0
 8019676:	2300      	movs	r3, #0
 8019678:	4630      	mov	r0, r6
 801967a:	4639      	mov	r1, r7
 801967c:	f7e7 fa4e 	bl	8000b1c <__aeabi_dcmplt>
 8019680:	2800      	cmp	r0, #0
 8019682:	d0e0      	beq.n	8019646 <pow+0x4a>
 8019684:	f000 ff7e 	bl	801a584 <__errno>
 8019688:	2321      	movs	r3, #33	; 0x21
 801968a:	6003      	str	r3, [r0, #0]
 801968c:	2400      	movs	r4, #0
 801968e:	4d2f      	ldr	r5, [pc, #188]	; (801974c <pow+0x150>)
 8019690:	e7d9      	b.n	8019646 <pow+0x4a>
 8019692:	ec45 4b10 	vmov	d0, r4, r5
 8019696:	f000 fe3e 	bl	801a316 <finite>
 801969a:	bbb8      	cbnz	r0, 801970c <pow+0x110>
 801969c:	ec49 8b10 	vmov	d0, r8, r9
 80196a0:	f000 fe39 	bl	801a316 <finite>
 80196a4:	b390      	cbz	r0, 801970c <pow+0x110>
 80196a6:	ec47 6b10 	vmov	d0, r6, r7
 80196aa:	f000 fe34 	bl	801a316 <finite>
 80196ae:	b368      	cbz	r0, 801970c <pow+0x110>
 80196b0:	4622      	mov	r2, r4
 80196b2:	462b      	mov	r3, r5
 80196b4:	4620      	mov	r0, r4
 80196b6:	4629      	mov	r1, r5
 80196b8:	f7e7 fa58 	bl	8000b6c <__aeabi_dcmpun>
 80196bc:	b160      	cbz	r0, 80196d8 <pow+0xdc>
 80196be:	f000 ff61 	bl	801a584 <__errno>
 80196c2:	2321      	movs	r3, #33	; 0x21
 80196c4:	6003      	str	r3, [r0, #0]
 80196c6:	2200      	movs	r2, #0
 80196c8:	2300      	movs	r3, #0
 80196ca:	4610      	mov	r0, r2
 80196cc:	4619      	mov	r1, r3
 80196ce:	f7e7 f8dd 	bl	800088c <__aeabi_ddiv>
 80196d2:	4604      	mov	r4, r0
 80196d4:	460d      	mov	r5, r1
 80196d6:	e7b6      	b.n	8019646 <pow+0x4a>
 80196d8:	f000 ff54 	bl	801a584 <__errno>
 80196dc:	2322      	movs	r3, #34	; 0x22
 80196de:	6003      	str	r3, [r0, #0]
 80196e0:	2200      	movs	r2, #0
 80196e2:	2300      	movs	r3, #0
 80196e4:	4640      	mov	r0, r8
 80196e6:	4649      	mov	r1, r9
 80196e8:	f7e7 fa18 	bl	8000b1c <__aeabi_dcmplt>
 80196ec:	2400      	movs	r4, #0
 80196ee:	b158      	cbz	r0, 8019708 <pow+0x10c>
 80196f0:	ec47 6b10 	vmov	d0, r6, r7
 80196f4:	f000 fe24 	bl	801a340 <rint>
 80196f8:	4632      	mov	r2, r6
 80196fa:	ec51 0b10 	vmov	r0, r1, d0
 80196fe:	463b      	mov	r3, r7
 8019700:	f7e7 fa02 	bl	8000b08 <__aeabi_dcmpeq>
 8019704:	2800      	cmp	r0, #0
 8019706:	d0c2      	beq.n	801968e <pow+0x92>
 8019708:	4d11      	ldr	r5, [pc, #68]	; (8019750 <pow+0x154>)
 801970a:	e79c      	b.n	8019646 <pow+0x4a>
 801970c:	2200      	movs	r2, #0
 801970e:	2300      	movs	r3, #0
 8019710:	4620      	mov	r0, r4
 8019712:	4629      	mov	r1, r5
 8019714:	f7e7 f9f8 	bl	8000b08 <__aeabi_dcmpeq>
 8019718:	2800      	cmp	r0, #0
 801971a:	d094      	beq.n	8019646 <pow+0x4a>
 801971c:	ec49 8b10 	vmov	d0, r8, r9
 8019720:	f000 fdf9 	bl	801a316 <finite>
 8019724:	2800      	cmp	r0, #0
 8019726:	d08e      	beq.n	8019646 <pow+0x4a>
 8019728:	ec47 6b10 	vmov	d0, r6, r7
 801972c:	f000 fdf3 	bl	801a316 <finite>
 8019730:	2800      	cmp	r0, #0
 8019732:	d088      	beq.n	8019646 <pow+0x4a>
 8019734:	f000 ff26 	bl	801a584 <__errno>
 8019738:	2322      	movs	r3, #34	; 0x22
 801973a:	6003      	str	r3, [r0, #0]
 801973c:	2400      	movs	r4, #0
 801973e:	2500      	movs	r5, #0
 8019740:	e781      	b.n	8019646 <pow+0x4a>
 8019742:	4d04      	ldr	r5, [pc, #16]	; (8019754 <pow+0x158>)
 8019744:	2400      	movs	r4, #0
 8019746:	e77e      	b.n	8019646 <pow+0x4a>
 8019748:	200000f4 	.word	0x200000f4
 801974c:	fff00000 	.word	0xfff00000
 8019750:	7ff00000 	.word	0x7ff00000
 8019754:	3ff00000 	.word	0x3ff00000

08019758 <__ieee754_pow>:
 8019758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801975c:	ed2d 8b06 	vpush	{d8-d10}
 8019760:	b08d      	sub	sp, #52	; 0x34
 8019762:	ed8d 1b02 	vstr	d1, [sp, #8]
 8019766:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 801976a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 801976e:	ea56 0100 	orrs.w	r1, r6, r0
 8019772:	ec53 2b10 	vmov	r2, r3, d0
 8019776:	f000 84d1 	beq.w	801a11c <__ieee754_pow+0x9c4>
 801977a:	497f      	ldr	r1, [pc, #508]	; (8019978 <__ieee754_pow+0x220>)
 801977c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8019780:	428c      	cmp	r4, r1
 8019782:	ee10 8a10 	vmov	r8, s0
 8019786:	4699      	mov	r9, r3
 8019788:	dc09      	bgt.n	801979e <__ieee754_pow+0x46>
 801978a:	d103      	bne.n	8019794 <__ieee754_pow+0x3c>
 801978c:	b97a      	cbnz	r2, 80197ae <__ieee754_pow+0x56>
 801978e:	42a6      	cmp	r6, r4
 8019790:	dd02      	ble.n	8019798 <__ieee754_pow+0x40>
 8019792:	e00c      	b.n	80197ae <__ieee754_pow+0x56>
 8019794:	428e      	cmp	r6, r1
 8019796:	dc02      	bgt.n	801979e <__ieee754_pow+0x46>
 8019798:	428e      	cmp	r6, r1
 801979a:	d110      	bne.n	80197be <__ieee754_pow+0x66>
 801979c:	b178      	cbz	r0, 80197be <__ieee754_pow+0x66>
 801979e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80197a2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80197a6:	ea54 0308 	orrs.w	r3, r4, r8
 80197aa:	f000 84b7 	beq.w	801a11c <__ieee754_pow+0x9c4>
 80197ae:	4873      	ldr	r0, [pc, #460]	; (801997c <__ieee754_pow+0x224>)
 80197b0:	b00d      	add	sp, #52	; 0x34
 80197b2:	ecbd 8b06 	vpop	{d8-d10}
 80197b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197ba:	f000 bdb9 	b.w	801a330 <nan>
 80197be:	f1b9 0f00 	cmp.w	r9, #0
 80197c2:	da36      	bge.n	8019832 <__ieee754_pow+0xda>
 80197c4:	496e      	ldr	r1, [pc, #440]	; (8019980 <__ieee754_pow+0x228>)
 80197c6:	428e      	cmp	r6, r1
 80197c8:	dc51      	bgt.n	801986e <__ieee754_pow+0x116>
 80197ca:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80197ce:	428e      	cmp	r6, r1
 80197d0:	f340 84af 	ble.w	801a132 <__ieee754_pow+0x9da>
 80197d4:	1531      	asrs	r1, r6, #20
 80197d6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80197da:	2914      	cmp	r1, #20
 80197dc:	dd0f      	ble.n	80197fe <__ieee754_pow+0xa6>
 80197de:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 80197e2:	fa20 fc01 	lsr.w	ip, r0, r1
 80197e6:	fa0c f101 	lsl.w	r1, ip, r1
 80197ea:	4281      	cmp	r1, r0
 80197ec:	f040 84a1 	bne.w	801a132 <__ieee754_pow+0x9da>
 80197f0:	f00c 0c01 	and.w	ip, ip, #1
 80197f4:	f1cc 0102 	rsb	r1, ip, #2
 80197f8:	9100      	str	r1, [sp, #0]
 80197fa:	b180      	cbz	r0, 801981e <__ieee754_pow+0xc6>
 80197fc:	e059      	b.n	80198b2 <__ieee754_pow+0x15a>
 80197fe:	2800      	cmp	r0, #0
 8019800:	d155      	bne.n	80198ae <__ieee754_pow+0x156>
 8019802:	f1c1 0114 	rsb	r1, r1, #20
 8019806:	fa46 fc01 	asr.w	ip, r6, r1
 801980a:	fa0c f101 	lsl.w	r1, ip, r1
 801980e:	42b1      	cmp	r1, r6
 8019810:	f040 848c 	bne.w	801a12c <__ieee754_pow+0x9d4>
 8019814:	f00c 0c01 	and.w	ip, ip, #1
 8019818:	f1cc 0102 	rsb	r1, ip, #2
 801981c:	9100      	str	r1, [sp, #0]
 801981e:	4959      	ldr	r1, [pc, #356]	; (8019984 <__ieee754_pow+0x22c>)
 8019820:	428e      	cmp	r6, r1
 8019822:	d12d      	bne.n	8019880 <__ieee754_pow+0x128>
 8019824:	2f00      	cmp	r7, #0
 8019826:	da79      	bge.n	801991c <__ieee754_pow+0x1c4>
 8019828:	4956      	ldr	r1, [pc, #344]	; (8019984 <__ieee754_pow+0x22c>)
 801982a:	2000      	movs	r0, #0
 801982c:	f7e7 f82e 	bl	800088c <__aeabi_ddiv>
 8019830:	e016      	b.n	8019860 <__ieee754_pow+0x108>
 8019832:	2100      	movs	r1, #0
 8019834:	9100      	str	r1, [sp, #0]
 8019836:	2800      	cmp	r0, #0
 8019838:	d13b      	bne.n	80198b2 <__ieee754_pow+0x15a>
 801983a:	494f      	ldr	r1, [pc, #316]	; (8019978 <__ieee754_pow+0x220>)
 801983c:	428e      	cmp	r6, r1
 801983e:	d1ee      	bne.n	801981e <__ieee754_pow+0xc6>
 8019840:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8019844:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8019848:	ea53 0308 	orrs.w	r3, r3, r8
 801984c:	f000 8466 	beq.w	801a11c <__ieee754_pow+0x9c4>
 8019850:	4b4d      	ldr	r3, [pc, #308]	; (8019988 <__ieee754_pow+0x230>)
 8019852:	429c      	cmp	r4, r3
 8019854:	dd0d      	ble.n	8019872 <__ieee754_pow+0x11a>
 8019856:	2f00      	cmp	r7, #0
 8019858:	f280 8464 	bge.w	801a124 <__ieee754_pow+0x9cc>
 801985c:	2000      	movs	r0, #0
 801985e:	2100      	movs	r1, #0
 8019860:	ec41 0b10 	vmov	d0, r0, r1
 8019864:	b00d      	add	sp, #52	; 0x34
 8019866:	ecbd 8b06 	vpop	{d8-d10}
 801986a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801986e:	2102      	movs	r1, #2
 8019870:	e7e0      	b.n	8019834 <__ieee754_pow+0xdc>
 8019872:	2f00      	cmp	r7, #0
 8019874:	daf2      	bge.n	801985c <__ieee754_pow+0x104>
 8019876:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 801987a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801987e:	e7ef      	b.n	8019860 <__ieee754_pow+0x108>
 8019880:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8019884:	d104      	bne.n	8019890 <__ieee754_pow+0x138>
 8019886:	4610      	mov	r0, r2
 8019888:	4619      	mov	r1, r3
 801988a:	f7e6 fed5 	bl	8000638 <__aeabi_dmul>
 801988e:	e7e7      	b.n	8019860 <__ieee754_pow+0x108>
 8019890:	493e      	ldr	r1, [pc, #248]	; (801998c <__ieee754_pow+0x234>)
 8019892:	428f      	cmp	r7, r1
 8019894:	d10d      	bne.n	80198b2 <__ieee754_pow+0x15a>
 8019896:	f1b9 0f00 	cmp.w	r9, #0
 801989a:	db0a      	blt.n	80198b2 <__ieee754_pow+0x15a>
 801989c:	ec43 2b10 	vmov	d0, r2, r3
 80198a0:	b00d      	add	sp, #52	; 0x34
 80198a2:	ecbd 8b06 	vpop	{d8-d10}
 80198a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198aa:	f000 bc77 	b.w	801a19c <__ieee754_sqrt>
 80198ae:	2100      	movs	r1, #0
 80198b0:	9100      	str	r1, [sp, #0]
 80198b2:	ec43 2b10 	vmov	d0, r2, r3
 80198b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80198ba:	f000 fd23 	bl	801a304 <fabs>
 80198be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80198c2:	ec51 0b10 	vmov	r0, r1, d0
 80198c6:	f1b8 0f00 	cmp.w	r8, #0
 80198ca:	d12a      	bne.n	8019922 <__ieee754_pow+0x1ca>
 80198cc:	b12c      	cbz	r4, 80198da <__ieee754_pow+0x182>
 80198ce:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8019984 <__ieee754_pow+0x22c>
 80198d2:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 80198d6:	45e6      	cmp	lr, ip
 80198d8:	d123      	bne.n	8019922 <__ieee754_pow+0x1ca>
 80198da:	2f00      	cmp	r7, #0
 80198dc:	da05      	bge.n	80198ea <__ieee754_pow+0x192>
 80198de:	4602      	mov	r2, r0
 80198e0:	460b      	mov	r3, r1
 80198e2:	2000      	movs	r0, #0
 80198e4:	4927      	ldr	r1, [pc, #156]	; (8019984 <__ieee754_pow+0x22c>)
 80198e6:	f7e6 ffd1 	bl	800088c <__aeabi_ddiv>
 80198ea:	f1b9 0f00 	cmp.w	r9, #0
 80198ee:	dab7      	bge.n	8019860 <__ieee754_pow+0x108>
 80198f0:	9b00      	ldr	r3, [sp, #0]
 80198f2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80198f6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80198fa:	4323      	orrs	r3, r4
 80198fc:	d108      	bne.n	8019910 <__ieee754_pow+0x1b8>
 80198fe:	4602      	mov	r2, r0
 8019900:	460b      	mov	r3, r1
 8019902:	4610      	mov	r0, r2
 8019904:	4619      	mov	r1, r3
 8019906:	f7e6 fcdf 	bl	80002c8 <__aeabi_dsub>
 801990a:	4602      	mov	r2, r0
 801990c:	460b      	mov	r3, r1
 801990e:	e78d      	b.n	801982c <__ieee754_pow+0xd4>
 8019910:	9b00      	ldr	r3, [sp, #0]
 8019912:	2b01      	cmp	r3, #1
 8019914:	d1a4      	bne.n	8019860 <__ieee754_pow+0x108>
 8019916:	4602      	mov	r2, r0
 8019918:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801991c:	4610      	mov	r0, r2
 801991e:	4619      	mov	r1, r3
 8019920:	e79e      	b.n	8019860 <__ieee754_pow+0x108>
 8019922:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8019926:	f10c 35ff 	add.w	r5, ip, #4294967295
 801992a:	950a      	str	r5, [sp, #40]	; 0x28
 801992c:	9d00      	ldr	r5, [sp, #0]
 801992e:	46ac      	mov	ip, r5
 8019930:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8019932:	ea5c 0505 	orrs.w	r5, ip, r5
 8019936:	d0e4      	beq.n	8019902 <__ieee754_pow+0x1aa>
 8019938:	4b15      	ldr	r3, [pc, #84]	; (8019990 <__ieee754_pow+0x238>)
 801993a:	429e      	cmp	r6, r3
 801993c:	f340 80fc 	ble.w	8019b38 <__ieee754_pow+0x3e0>
 8019940:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8019944:	429e      	cmp	r6, r3
 8019946:	4b10      	ldr	r3, [pc, #64]	; (8019988 <__ieee754_pow+0x230>)
 8019948:	dd07      	ble.n	801995a <__ieee754_pow+0x202>
 801994a:	429c      	cmp	r4, r3
 801994c:	dc0a      	bgt.n	8019964 <__ieee754_pow+0x20c>
 801994e:	2f00      	cmp	r7, #0
 8019950:	da84      	bge.n	801985c <__ieee754_pow+0x104>
 8019952:	a307      	add	r3, pc, #28	; (adr r3, 8019970 <__ieee754_pow+0x218>)
 8019954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019958:	e795      	b.n	8019886 <__ieee754_pow+0x12e>
 801995a:	429c      	cmp	r4, r3
 801995c:	dbf7      	blt.n	801994e <__ieee754_pow+0x1f6>
 801995e:	4b09      	ldr	r3, [pc, #36]	; (8019984 <__ieee754_pow+0x22c>)
 8019960:	429c      	cmp	r4, r3
 8019962:	dd17      	ble.n	8019994 <__ieee754_pow+0x23c>
 8019964:	2f00      	cmp	r7, #0
 8019966:	dcf4      	bgt.n	8019952 <__ieee754_pow+0x1fa>
 8019968:	e778      	b.n	801985c <__ieee754_pow+0x104>
 801996a:	bf00      	nop
 801996c:	f3af 8000 	nop.w
 8019970:	8800759c 	.word	0x8800759c
 8019974:	7e37e43c 	.word	0x7e37e43c
 8019978:	7ff00000 	.word	0x7ff00000
 801997c:	08022f38 	.word	0x08022f38
 8019980:	433fffff 	.word	0x433fffff
 8019984:	3ff00000 	.word	0x3ff00000
 8019988:	3fefffff 	.word	0x3fefffff
 801998c:	3fe00000 	.word	0x3fe00000
 8019990:	41e00000 	.word	0x41e00000
 8019994:	4b64      	ldr	r3, [pc, #400]	; (8019b28 <__ieee754_pow+0x3d0>)
 8019996:	2200      	movs	r2, #0
 8019998:	f7e6 fc96 	bl	80002c8 <__aeabi_dsub>
 801999c:	a356      	add	r3, pc, #344	; (adr r3, 8019af8 <__ieee754_pow+0x3a0>)
 801999e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199a2:	4604      	mov	r4, r0
 80199a4:	460d      	mov	r5, r1
 80199a6:	f7e6 fe47 	bl	8000638 <__aeabi_dmul>
 80199aa:	a355      	add	r3, pc, #340	; (adr r3, 8019b00 <__ieee754_pow+0x3a8>)
 80199ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199b0:	4606      	mov	r6, r0
 80199b2:	460f      	mov	r7, r1
 80199b4:	4620      	mov	r0, r4
 80199b6:	4629      	mov	r1, r5
 80199b8:	f7e6 fe3e 	bl	8000638 <__aeabi_dmul>
 80199bc:	4b5b      	ldr	r3, [pc, #364]	; (8019b2c <__ieee754_pow+0x3d4>)
 80199be:	4682      	mov	sl, r0
 80199c0:	468b      	mov	fp, r1
 80199c2:	2200      	movs	r2, #0
 80199c4:	4620      	mov	r0, r4
 80199c6:	4629      	mov	r1, r5
 80199c8:	f7e6 fe36 	bl	8000638 <__aeabi_dmul>
 80199cc:	4602      	mov	r2, r0
 80199ce:	460b      	mov	r3, r1
 80199d0:	a14d      	add	r1, pc, #308	; (adr r1, 8019b08 <__ieee754_pow+0x3b0>)
 80199d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80199d6:	f7e6 fc77 	bl	80002c8 <__aeabi_dsub>
 80199da:	4622      	mov	r2, r4
 80199dc:	462b      	mov	r3, r5
 80199de:	f7e6 fe2b 	bl	8000638 <__aeabi_dmul>
 80199e2:	4602      	mov	r2, r0
 80199e4:	460b      	mov	r3, r1
 80199e6:	2000      	movs	r0, #0
 80199e8:	4951      	ldr	r1, [pc, #324]	; (8019b30 <__ieee754_pow+0x3d8>)
 80199ea:	f7e6 fc6d 	bl	80002c8 <__aeabi_dsub>
 80199ee:	4622      	mov	r2, r4
 80199f0:	4680      	mov	r8, r0
 80199f2:	4689      	mov	r9, r1
 80199f4:	462b      	mov	r3, r5
 80199f6:	4620      	mov	r0, r4
 80199f8:	4629      	mov	r1, r5
 80199fa:	f7e6 fe1d 	bl	8000638 <__aeabi_dmul>
 80199fe:	4602      	mov	r2, r0
 8019a00:	460b      	mov	r3, r1
 8019a02:	4640      	mov	r0, r8
 8019a04:	4649      	mov	r1, r9
 8019a06:	f7e6 fe17 	bl	8000638 <__aeabi_dmul>
 8019a0a:	a341      	add	r3, pc, #260	; (adr r3, 8019b10 <__ieee754_pow+0x3b8>)
 8019a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a10:	f7e6 fe12 	bl	8000638 <__aeabi_dmul>
 8019a14:	4602      	mov	r2, r0
 8019a16:	460b      	mov	r3, r1
 8019a18:	4650      	mov	r0, sl
 8019a1a:	4659      	mov	r1, fp
 8019a1c:	f7e6 fc54 	bl	80002c8 <__aeabi_dsub>
 8019a20:	4602      	mov	r2, r0
 8019a22:	460b      	mov	r3, r1
 8019a24:	4680      	mov	r8, r0
 8019a26:	4689      	mov	r9, r1
 8019a28:	4630      	mov	r0, r6
 8019a2a:	4639      	mov	r1, r7
 8019a2c:	f7e6 fc4e 	bl	80002cc <__adddf3>
 8019a30:	2400      	movs	r4, #0
 8019a32:	4632      	mov	r2, r6
 8019a34:	463b      	mov	r3, r7
 8019a36:	4620      	mov	r0, r4
 8019a38:	460d      	mov	r5, r1
 8019a3a:	f7e6 fc45 	bl	80002c8 <__aeabi_dsub>
 8019a3e:	4602      	mov	r2, r0
 8019a40:	460b      	mov	r3, r1
 8019a42:	4640      	mov	r0, r8
 8019a44:	4649      	mov	r1, r9
 8019a46:	f7e6 fc3f 	bl	80002c8 <__aeabi_dsub>
 8019a4a:	9b00      	ldr	r3, [sp, #0]
 8019a4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019a4e:	3b01      	subs	r3, #1
 8019a50:	4313      	orrs	r3, r2
 8019a52:	4682      	mov	sl, r0
 8019a54:	468b      	mov	fp, r1
 8019a56:	f040 81f1 	bne.w	8019e3c <__ieee754_pow+0x6e4>
 8019a5a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8019b18 <__ieee754_pow+0x3c0>
 8019a5e:	eeb0 8a47 	vmov.f32	s16, s14
 8019a62:	eef0 8a67 	vmov.f32	s17, s15
 8019a66:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8019a6a:	2600      	movs	r6, #0
 8019a6c:	4632      	mov	r2, r6
 8019a6e:	463b      	mov	r3, r7
 8019a70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019a74:	f7e6 fc28 	bl	80002c8 <__aeabi_dsub>
 8019a78:	4622      	mov	r2, r4
 8019a7a:	462b      	mov	r3, r5
 8019a7c:	f7e6 fddc 	bl	8000638 <__aeabi_dmul>
 8019a80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019a84:	4680      	mov	r8, r0
 8019a86:	4689      	mov	r9, r1
 8019a88:	4650      	mov	r0, sl
 8019a8a:	4659      	mov	r1, fp
 8019a8c:	f7e6 fdd4 	bl	8000638 <__aeabi_dmul>
 8019a90:	4602      	mov	r2, r0
 8019a92:	460b      	mov	r3, r1
 8019a94:	4640      	mov	r0, r8
 8019a96:	4649      	mov	r1, r9
 8019a98:	f7e6 fc18 	bl	80002cc <__adddf3>
 8019a9c:	4632      	mov	r2, r6
 8019a9e:	463b      	mov	r3, r7
 8019aa0:	4680      	mov	r8, r0
 8019aa2:	4689      	mov	r9, r1
 8019aa4:	4620      	mov	r0, r4
 8019aa6:	4629      	mov	r1, r5
 8019aa8:	f7e6 fdc6 	bl	8000638 <__aeabi_dmul>
 8019aac:	460b      	mov	r3, r1
 8019aae:	4604      	mov	r4, r0
 8019ab0:	460d      	mov	r5, r1
 8019ab2:	4602      	mov	r2, r0
 8019ab4:	4649      	mov	r1, r9
 8019ab6:	4640      	mov	r0, r8
 8019ab8:	f7e6 fc08 	bl	80002cc <__adddf3>
 8019abc:	4b1d      	ldr	r3, [pc, #116]	; (8019b34 <__ieee754_pow+0x3dc>)
 8019abe:	4299      	cmp	r1, r3
 8019ac0:	ec45 4b19 	vmov	d9, r4, r5
 8019ac4:	4606      	mov	r6, r0
 8019ac6:	460f      	mov	r7, r1
 8019ac8:	468b      	mov	fp, r1
 8019aca:	f340 82fe 	ble.w	801a0ca <__ieee754_pow+0x972>
 8019ace:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8019ad2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8019ad6:	4303      	orrs	r3, r0
 8019ad8:	f000 81f0 	beq.w	8019ebc <__ieee754_pow+0x764>
 8019adc:	a310      	add	r3, pc, #64	; (adr r3, 8019b20 <__ieee754_pow+0x3c8>)
 8019ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ae2:	ec51 0b18 	vmov	r0, r1, d8
 8019ae6:	f7e6 fda7 	bl	8000638 <__aeabi_dmul>
 8019aea:	a30d      	add	r3, pc, #52	; (adr r3, 8019b20 <__ieee754_pow+0x3c8>)
 8019aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019af0:	e6cb      	b.n	801988a <__ieee754_pow+0x132>
 8019af2:	bf00      	nop
 8019af4:	f3af 8000 	nop.w
 8019af8:	60000000 	.word	0x60000000
 8019afc:	3ff71547 	.word	0x3ff71547
 8019b00:	f85ddf44 	.word	0xf85ddf44
 8019b04:	3e54ae0b 	.word	0x3e54ae0b
 8019b08:	55555555 	.word	0x55555555
 8019b0c:	3fd55555 	.word	0x3fd55555
 8019b10:	652b82fe 	.word	0x652b82fe
 8019b14:	3ff71547 	.word	0x3ff71547
 8019b18:	00000000 	.word	0x00000000
 8019b1c:	bff00000 	.word	0xbff00000
 8019b20:	8800759c 	.word	0x8800759c
 8019b24:	7e37e43c 	.word	0x7e37e43c
 8019b28:	3ff00000 	.word	0x3ff00000
 8019b2c:	3fd00000 	.word	0x3fd00000
 8019b30:	3fe00000 	.word	0x3fe00000
 8019b34:	408fffff 	.word	0x408fffff
 8019b38:	4bd7      	ldr	r3, [pc, #860]	; (8019e98 <__ieee754_pow+0x740>)
 8019b3a:	ea03 0309 	and.w	r3, r3, r9
 8019b3e:	2200      	movs	r2, #0
 8019b40:	b92b      	cbnz	r3, 8019b4e <__ieee754_pow+0x3f6>
 8019b42:	4bd6      	ldr	r3, [pc, #856]	; (8019e9c <__ieee754_pow+0x744>)
 8019b44:	f7e6 fd78 	bl	8000638 <__aeabi_dmul>
 8019b48:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8019b4c:	460c      	mov	r4, r1
 8019b4e:	1523      	asrs	r3, r4, #20
 8019b50:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8019b54:	4413      	add	r3, r2
 8019b56:	9309      	str	r3, [sp, #36]	; 0x24
 8019b58:	4bd1      	ldr	r3, [pc, #836]	; (8019ea0 <__ieee754_pow+0x748>)
 8019b5a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8019b5e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8019b62:	429c      	cmp	r4, r3
 8019b64:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8019b68:	dd08      	ble.n	8019b7c <__ieee754_pow+0x424>
 8019b6a:	4bce      	ldr	r3, [pc, #824]	; (8019ea4 <__ieee754_pow+0x74c>)
 8019b6c:	429c      	cmp	r4, r3
 8019b6e:	f340 8163 	ble.w	8019e38 <__ieee754_pow+0x6e0>
 8019b72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019b74:	3301      	adds	r3, #1
 8019b76:	9309      	str	r3, [sp, #36]	; 0x24
 8019b78:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8019b7c:	2400      	movs	r4, #0
 8019b7e:	00e3      	lsls	r3, r4, #3
 8019b80:	930b      	str	r3, [sp, #44]	; 0x2c
 8019b82:	4bc9      	ldr	r3, [pc, #804]	; (8019ea8 <__ieee754_pow+0x750>)
 8019b84:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8019b88:	ed93 7b00 	vldr	d7, [r3]
 8019b8c:	4629      	mov	r1, r5
 8019b8e:	ec53 2b17 	vmov	r2, r3, d7
 8019b92:	eeb0 8a47 	vmov.f32	s16, s14
 8019b96:	eef0 8a67 	vmov.f32	s17, s15
 8019b9a:	4682      	mov	sl, r0
 8019b9c:	f7e6 fb94 	bl	80002c8 <__aeabi_dsub>
 8019ba0:	4652      	mov	r2, sl
 8019ba2:	4606      	mov	r6, r0
 8019ba4:	460f      	mov	r7, r1
 8019ba6:	462b      	mov	r3, r5
 8019ba8:	ec51 0b18 	vmov	r0, r1, d8
 8019bac:	f7e6 fb8e 	bl	80002cc <__adddf3>
 8019bb0:	4602      	mov	r2, r0
 8019bb2:	460b      	mov	r3, r1
 8019bb4:	2000      	movs	r0, #0
 8019bb6:	49bd      	ldr	r1, [pc, #756]	; (8019eac <__ieee754_pow+0x754>)
 8019bb8:	f7e6 fe68 	bl	800088c <__aeabi_ddiv>
 8019bbc:	ec41 0b19 	vmov	d9, r0, r1
 8019bc0:	4602      	mov	r2, r0
 8019bc2:	460b      	mov	r3, r1
 8019bc4:	4630      	mov	r0, r6
 8019bc6:	4639      	mov	r1, r7
 8019bc8:	f7e6 fd36 	bl	8000638 <__aeabi_dmul>
 8019bcc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8019bd0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019bd4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8019bd8:	2300      	movs	r3, #0
 8019bda:	9304      	str	r3, [sp, #16]
 8019bdc:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8019be0:	46ab      	mov	fp, r5
 8019be2:	106d      	asrs	r5, r5, #1
 8019be4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8019be8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8019bec:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8019bf0:	2200      	movs	r2, #0
 8019bf2:	4640      	mov	r0, r8
 8019bf4:	4649      	mov	r1, r9
 8019bf6:	4614      	mov	r4, r2
 8019bf8:	461d      	mov	r5, r3
 8019bfa:	f7e6 fd1d 	bl	8000638 <__aeabi_dmul>
 8019bfe:	4602      	mov	r2, r0
 8019c00:	460b      	mov	r3, r1
 8019c02:	4630      	mov	r0, r6
 8019c04:	4639      	mov	r1, r7
 8019c06:	f7e6 fb5f 	bl	80002c8 <__aeabi_dsub>
 8019c0a:	ec53 2b18 	vmov	r2, r3, d8
 8019c0e:	4606      	mov	r6, r0
 8019c10:	460f      	mov	r7, r1
 8019c12:	4620      	mov	r0, r4
 8019c14:	4629      	mov	r1, r5
 8019c16:	f7e6 fb57 	bl	80002c8 <__aeabi_dsub>
 8019c1a:	4602      	mov	r2, r0
 8019c1c:	460b      	mov	r3, r1
 8019c1e:	4650      	mov	r0, sl
 8019c20:	4659      	mov	r1, fp
 8019c22:	f7e6 fb51 	bl	80002c8 <__aeabi_dsub>
 8019c26:	4642      	mov	r2, r8
 8019c28:	464b      	mov	r3, r9
 8019c2a:	f7e6 fd05 	bl	8000638 <__aeabi_dmul>
 8019c2e:	4602      	mov	r2, r0
 8019c30:	460b      	mov	r3, r1
 8019c32:	4630      	mov	r0, r6
 8019c34:	4639      	mov	r1, r7
 8019c36:	f7e6 fb47 	bl	80002c8 <__aeabi_dsub>
 8019c3a:	ec53 2b19 	vmov	r2, r3, d9
 8019c3e:	f7e6 fcfb 	bl	8000638 <__aeabi_dmul>
 8019c42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019c46:	ec41 0b18 	vmov	d8, r0, r1
 8019c4a:	4610      	mov	r0, r2
 8019c4c:	4619      	mov	r1, r3
 8019c4e:	f7e6 fcf3 	bl	8000638 <__aeabi_dmul>
 8019c52:	a37d      	add	r3, pc, #500	; (adr r3, 8019e48 <__ieee754_pow+0x6f0>)
 8019c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c58:	4604      	mov	r4, r0
 8019c5a:	460d      	mov	r5, r1
 8019c5c:	f7e6 fcec 	bl	8000638 <__aeabi_dmul>
 8019c60:	a37b      	add	r3, pc, #492	; (adr r3, 8019e50 <__ieee754_pow+0x6f8>)
 8019c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c66:	f7e6 fb31 	bl	80002cc <__adddf3>
 8019c6a:	4622      	mov	r2, r4
 8019c6c:	462b      	mov	r3, r5
 8019c6e:	f7e6 fce3 	bl	8000638 <__aeabi_dmul>
 8019c72:	a379      	add	r3, pc, #484	; (adr r3, 8019e58 <__ieee754_pow+0x700>)
 8019c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c78:	f7e6 fb28 	bl	80002cc <__adddf3>
 8019c7c:	4622      	mov	r2, r4
 8019c7e:	462b      	mov	r3, r5
 8019c80:	f7e6 fcda 	bl	8000638 <__aeabi_dmul>
 8019c84:	a376      	add	r3, pc, #472	; (adr r3, 8019e60 <__ieee754_pow+0x708>)
 8019c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c8a:	f7e6 fb1f 	bl	80002cc <__adddf3>
 8019c8e:	4622      	mov	r2, r4
 8019c90:	462b      	mov	r3, r5
 8019c92:	f7e6 fcd1 	bl	8000638 <__aeabi_dmul>
 8019c96:	a374      	add	r3, pc, #464	; (adr r3, 8019e68 <__ieee754_pow+0x710>)
 8019c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c9c:	f7e6 fb16 	bl	80002cc <__adddf3>
 8019ca0:	4622      	mov	r2, r4
 8019ca2:	462b      	mov	r3, r5
 8019ca4:	f7e6 fcc8 	bl	8000638 <__aeabi_dmul>
 8019ca8:	a371      	add	r3, pc, #452	; (adr r3, 8019e70 <__ieee754_pow+0x718>)
 8019caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019cae:	f7e6 fb0d 	bl	80002cc <__adddf3>
 8019cb2:	4622      	mov	r2, r4
 8019cb4:	4606      	mov	r6, r0
 8019cb6:	460f      	mov	r7, r1
 8019cb8:	462b      	mov	r3, r5
 8019cba:	4620      	mov	r0, r4
 8019cbc:	4629      	mov	r1, r5
 8019cbe:	f7e6 fcbb 	bl	8000638 <__aeabi_dmul>
 8019cc2:	4602      	mov	r2, r0
 8019cc4:	460b      	mov	r3, r1
 8019cc6:	4630      	mov	r0, r6
 8019cc8:	4639      	mov	r1, r7
 8019cca:	f7e6 fcb5 	bl	8000638 <__aeabi_dmul>
 8019cce:	4642      	mov	r2, r8
 8019cd0:	4604      	mov	r4, r0
 8019cd2:	460d      	mov	r5, r1
 8019cd4:	464b      	mov	r3, r9
 8019cd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019cda:	f7e6 faf7 	bl	80002cc <__adddf3>
 8019cde:	ec53 2b18 	vmov	r2, r3, d8
 8019ce2:	f7e6 fca9 	bl	8000638 <__aeabi_dmul>
 8019ce6:	4622      	mov	r2, r4
 8019ce8:	462b      	mov	r3, r5
 8019cea:	f7e6 faef 	bl	80002cc <__adddf3>
 8019cee:	4642      	mov	r2, r8
 8019cf0:	4682      	mov	sl, r0
 8019cf2:	468b      	mov	fp, r1
 8019cf4:	464b      	mov	r3, r9
 8019cf6:	4640      	mov	r0, r8
 8019cf8:	4649      	mov	r1, r9
 8019cfa:	f7e6 fc9d 	bl	8000638 <__aeabi_dmul>
 8019cfe:	4b6c      	ldr	r3, [pc, #432]	; (8019eb0 <__ieee754_pow+0x758>)
 8019d00:	2200      	movs	r2, #0
 8019d02:	4606      	mov	r6, r0
 8019d04:	460f      	mov	r7, r1
 8019d06:	f7e6 fae1 	bl	80002cc <__adddf3>
 8019d0a:	4652      	mov	r2, sl
 8019d0c:	465b      	mov	r3, fp
 8019d0e:	f7e6 fadd 	bl	80002cc <__adddf3>
 8019d12:	9c04      	ldr	r4, [sp, #16]
 8019d14:	460d      	mov	r5, r1
 8019d16:	4622      	mov	r2, r4
 8019d18:	460b      	mov	r3, r1
 8019d1a:	4640      	mov	r0, r8
 8019d1c:	4649      	mov	r1, r9
 8019d1e:	f7e6 fc8b 	bl	8000638 <__aeabi_dmul>
 8019d22:	4b63      	ldr	r3, [pc, #396]	; (8019eb0 <__ieee754_pow+0x758>)
 8019d24:	4680      	mov	r8, r0
 8019d26:	4689      	mov	r9, r1
 8019d28:	2200      	movs	r2, #0
 8019d2a:	4620      	mov	r0, r4
 8019d2c:	4629      	mov	r1, r5
 8019d2e:	f7e6 facb 	bl	80002c8 <__aeabi_dsub>
 8019d32:	4632      	mov	r2, r6
 8019d34:	463b      	mov	r3, r7
 8019d36:	f7e6 fac7 	bl	80002c8 <__aeabi_dsub>
 8019d3a:	4602      	mov	r2, r0
 8019d3c:	460b      	mov	r3, r1
 8019d3e:	4650      	mov	r0, sl
 8019d40:	4659      	mov	r1, fp
 8019d42:	f7e6 fac1 	bl	80002c8 <__aeabi_dsub>
 8019d46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019d4a:	f7e6 fc75 	bl	8000638 <__aeabi_dmul>
 8019d4e:	4622      	mov	r2, r4
 8019d50:	4606      	mov	r6, r0
 8019d52:	460f      	mov	r7, r1
 8019d54:	462b      	mov	r3, r5
 8019d56:	ec51 0b18 	vmov	r0, r1, d8
 8019d5a:	f7e6 fc6d 	bl	8000638 <__aeabi_dmul>
 8019d5e:	4602      	mov	r2, r0
 8019d60:	460b      	mov	r3, r1
 8019d62:	4630      	mov	r0, r6
 8019d64:	4639      	mov	r1, r7
 8019d66:	f7e6 fab1 	bl	80002cc <__adddf3>
 8019d6a:	4606      	mov	r6, r0
 8019d6c:	460f      	mov	r7, r1
 8019d6e:	4602      	mov	r2, r0
 8019d70:	460b      	mov	r3, r1
 8019d72:	4640      	mov	r0, r8
 8019d74:	4649      	mov	r1, r9
 8019d76:	f7e6 faa9 	bl	80002cc <__adddf3>
 8019d7a:	9c04      	ldr	r4, [sp, #16]
 8019d7c:	a33e      	add	r3, pc, #248	; (adr r3, 8019e78 <__ieee754_pow+0x720>)
 8019d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d82:	4620      	mov	r0, r4
 8019d84:	460d      	mov	r5, r1
 8019d86:	f7e6 fc57 	bl	8000638 <__aeabi_dmul>
 8019d8a:	4642      	mov	r2, r8
 8019d8c:	ec41 0b18 	vmov	d8, r0, r1
 8019d90:	464b      	mov	r3, r9
 8019d92:	4620      	mov	r0, r4
 8019d94:	4629      	mov	r1, r5
 8019d96:	f7e6 fa97 	bl	80002c8 <__aeabi_dsub>
 8019d9a:	4602      	mov	r2, r0
 8019d9c:	460b      	mov	r3, r1
 8019d9e:	4630      	mov	r0, r6
 8019da0:	4639      	mov	r1, r7
 8019da2:	f7e6 fa91 	bl	80002c8 <__aeabi_dsub>
 8019da6:	a336      	add	r3, pc, #216	; (adr r3, 8019e80 <__ieee754_pow+0x728>)
 8019da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019dac:	f7e6 fc44 	bl	8000638 <__aeabi_dmul>
 8019db0:	a335      	add	r3, pc, #212	; (adr r3, 8019e88 <__ieee754_pow+0x730>)
 8019db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019db6:	4606      	mov	r6, r0
 8019db8:	460f      	mov	r7, r1
 8019dba:	4620      	mov	r0, r4
 8019dbc:	4629      	mov	r1, r5
 8019dbe:	f7e6 fc3b 	bl	8000638 <__aeabi_dmul>
 8019dc2:	4602      	mov	r2, r0
 8019dc4:	460b      	mov	r3, r1
 8019dc6:	4630      	mov	r0, r6
 8019dc8:	4639      	mov	r1, r7
 8019dca:	f7e6 fa7f 	bl	80002cc <__adddf3>
 8019dce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019dd0:	4b38      	ldr	r3, [pc, #224]	; (8019eb4 <__ieee754_pow+0x75c>)
 8019dd2:	4413      	add	r3, r2
 8019dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019dd8:	f7e6 fa78 	bl	80002cc <__adddf3>
 8019ddc:	4682      	mov	sl, r0
 8019dde:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019de0:	468b      	mov	fp, r1
 8019de2:	f7e6 fbbf 	bl	8000564 <__aeabi_i2d>
 8019de6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019de8:	4b33      	ldr	r3, [pc, #204]	; (8019eb8 <__ieee754_pow+0x760>)
 8019dea:	4413      	add	r3, r2
 8019dec:	e9d3 8900 	ldrd	r8, r9, [r3]
 8019df0:	4606      	mov	r6, r0
 8019df2:	460f      	mov	r7, r1
 8019df4:	4652      	mov	r2, sl
 8019df6:	465b      	mov	r3, fp
 8019df8:	ec51 0b18 	vmov	r0, r1, d8
 8019dfc:	f7e6 fa66 	bl	80002cc <__adddf3>
 8019e00:	4642      	mov	r2, r8
 8019e02:	464b      	mov	r3, r9
 8019e04:	f7e6 fa62 	bl	80002cc <__adddf3>
 8019e08:	4632      	mov	r2, r6
 8019e0a:	463b      	mov	r3, r7
 8019e0c:	f7e6 fa5e 	bl	80002cc <__adddf3>
 8019e10:	9c04      	ldr	r4, [sp, #16]
 8019e12:	4632      	mov	r2, r6
 8019e14:	463b      	mov	r3, r7
 8019e16:	4620      	mov	r0, r4
 8019e18:	460d      	mov	r5, r1
 8019e1a:	f7e6 fa55 	bl	80002c8 <__aeabi_dsub>
 8019e1e:	4642      	mov	r2, r8
 8019e20:	464b      	mov	r3, r9
 8019e22:	f7e6 fa51 	bl	80002c8 <__aeabi_dsub>
 8019e26:	ec53 2b18 	vmov	r2, r3, d8
 8019e2a:	f7e6 fa4d 	bl	80002c8 <__aeabi_dsub>
 8019e2e:	4602      	mov	r2, r0
 8019e30:	460b      	mov	r3, r1
 8019e32:	4650      	mov	r0, sl
 8019e34:	4659      	mov	r1, fp
 8019e36:	e606      	b.n	8019a46 <__ieee754_pow+0x2ee>
 8019e38:	2401      	movs	r4, #1
 8019e3a:	e6a0      	b.n	8019b7e <__ieee754_pow+0x426>
 8019e3c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8019e90 <__ieee754_pow+0x738>
 8019e40:	e60d      	b.n	8019a5e <__ieee754_pow+0x306>
 8019e42:	bf00      	nop
 8019e44:	f3af 8000 	nop.w
 8019e48:	4a454eef 	.word	0x4a454eef
 8019e4c:	3fca7e28 	.word	0x3fca7e28
 8019e50:	93c9db65 	.word	0x93c9db65
 8019e54:	3fcd864a 	.word	0x3fcd864a
 8019e58:	a91d4101 	.word	0xa91d4101
 8019e5c:	3fd17460 	.word	0x3fd17460
 8019e60:	518f264d 	.word	0x518f264d
 8019e64:	3fd55555 	.word	0x3fd55555
 8019e68:	db6fabff 	.word	0xdb6fabff
 8019e6c:	3fdb6db6 	.word	0x3fdb6db6
 8019e70:	33333303 	.word	0x33333303
 8019e74:	3fe33333 	.word	0x3fe33333
 8019e78:	e0000000 	.word	0xe0000000
 8019e7c:	3feec709 	.word	0x3feec709
 8019e80:	dc3a03fd 	.word	0xdc3a03fd
 8019e84:	3feec709 	.word	0x3feec709
 8019e88:	145b01f5 	.word	0x145b01f5
 8019e8c:	be3e2fe0 	.word	0xbe3e2fe0
 8019e90:	00000000 	.word	0x00000000
 8019e94:	3ff00000 	.word	0x3ff00000
 8019e98:	7ff00000 	.word	0x7ff00000
 8019e9c:	43400000 	.word	0x43400000
 8019ea0:	0003988e 	.word	0x0003988e
 8019ea4:	000bb679 	.word	0x000bb679
 8019ea8:	08022af8 	.word	0x08022af8
 8019eac:	3ff00000 	.word	0x3ff00000
 8019eb0:	40080000 	.word	0x40080000
 8019eb4:	08022b18 	.word	0x08022b18
 8019eb8:	08022b08 	.word	0x08022b08
 8019ebc:	a3b5      	add	r3, pc, #724	; (adr r3, 801a194 <__ieee754_pow+0xa3c>)
 8019ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ec2:	4640      	mov	r0, r8
 8019ec4:	4649      	mov	r1, r9
 8019ec6:	f7e6 fa01 	bl	80002cc <__adddf3>
 8019eca:	4622      	mov	r2, r4
 8019ecc:	ec41 0b1a 	vmov	d10, r0, r1
 8019ed0:	462b      	mov	r3, r5
 8019ed2:	4630      	mov	r0, r6
 8019ed4:	4639      	mov	r1, r7
 8019ed6:	f7e6 f9f7 	bl	80002c8 <__aeabi_dsub>
 8019eda:	4602      	mov	r2, r0
 8019edc:	460b      	mov	r3, r1
 8019ede:	ec51 0b1a 	vmov	r0, r1, d10
 8019ee2:	f7e6 fe39 	bl	8000b58 <__aeabi_dcmpgt>
 8019ee6:	2800      	cmp	r0, #0
 8019ee8:	f47f adf8 	bne.w	8019adc <__ieee754_pow+0x384>
 8019eec:	4aa4      	ldr	r2, [pc, #656]	; (801a180 <__ieee754_pow+0xa28>)
 8019eee:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8019ef2:	4293      	cmp	r3, r2
 8019ef4:	f340 810b 	ble.w	801a10e <__ieee754_pow+0x9b6>
 8019ef8:	151b      	asrs	r3, r3, #20
 8019efa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8019efe:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8019f02:	fa4a f303 	asr.w	r3, sl, r3
 8019f06:	445b      	add	r3, fp
 8019f08:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8019f0c:	4e9d      	ldr	r6, [pc, #628]	; (801a184 <__ieee754_pow+0xa2c>)
 8019f0e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8019f12:	4116      	asrs	r6, r2
 8019f14:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8019f18:	2000      	movs	r0, #0
 8019f1a:	ea23 0106 	bic.w	r1, r3, r6
 8019f1e:	f1c2 0214 	rsb	r2, r2, #20
 8019f22:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8019f26:	fa4a fa02 	asr.w	sl, sl, r2
 8019f2a:	f1bb 0f00 	cmp.w	fp, #0
 8019f2e:	4602      	mov	r2, r0
 8019f30:	460b      	mov	r3, r1
 8019f32:	4620      	mov	r0, r4
 8019f34:	4629      	mov	r1, r5
 8019f36:	bfb8      	it	lt
 8019f38:	f1ca 0a00 	rsblt	sl, sl, #0
 8019f3c:	f7e6 f9c4 	bl	80002c8 <__aeabi_dsub>
 8019f40:	ec41 0b19 	vmov	d9, r0, r1
 8019f44:	4642      	mov	r2, r8
 8019f46:	464b      	mov	r3, r9
 8019f48:	ec51 0b19 	vmov	r0, r1, d9
 8019f4c:	f7e6 f9be 	bl	80002cc <__adddf3>
 8019f50:	2400      	movs	r4, #0
 8019f52:	a379      	add	r3, pc, #484	; (adr r3, 801a138 <__ieee754_pow+0x9e0>)
 8019f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f58:	4620      	mov	r0, r4
 8019f5a:	460d      	mov	r5, r1
 8019f5c:	f7e6 fb6c 	bl	8000638 <__aeabi_dmul>
 8019f60:	ec53 2b19 	vmov	r2, r3, d9
 8019f64:	4606      	mov	r6, r0
 8019f66:	460f      	mov	r7, r1
 8019f68:	4620      	mov	r0, r4
 8019f6a:	4629      	mov	r1, r5
 8019f6c:	f7e6 f9ac 	bl	80002c8 <__aeabi_dsub>
 8019f70:	4602      	mov	r2, r0
 8019f72:	460b      	mov	r3, r1
 8019f74:	4640      	mov	r0, r8
 8019f76:	4649      	mov	r1, r9
 8019f78:	f7e6 f9a6 	bl	80002c8 <__aeabi_dsub>
 8019f7c:	a370      	add	r3, pc, #448	; (adr r3, 801a140 <__ieee754_pow+0x9e8>)
 8019f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f82:	f7e6 fb59 	bl	8000638 <__aeabi_dmul>
 8019f86:	a370      	add	r3, pc, #448	; (adr r3, 801a148 <__ieee754_pow+0x9f0>)
 8019f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f8c:	4680      	mov	r8, r0
 8019f8e:	4689      	mov	r9, r1
 8019f90:	4620      	mov	r0, r4
 8019f92:	4629      	mov	r1, r5
 8019f94:	f7e6 fb50 	bl	8000638 <__aeabi_dmul>
 8019f98:	4602      	mov	r2, r0
 8019f9a:	460b      	mov	r3, r1
 8019f9c:	4640      	mov	r0, r8
 8019f9e:	4649      	mov	r1, r9
 8019fa0:	f7e6 f994 	bl	80002cc <__adddf3>
 8019fa4:	4604      	mov	r4, r0
 8019fa6:	460d      	mov	r5, r1
 8019fa8:	4602      	mov	r2, r0
 8019faa:	460b      	mov	r3, r1
 8019fac:	4630      	mov	r0, r6
 8019fae:	4639      	mov	r1, r7
 8019fb0:	f7e6 f98c 	bl	80002cc <__adddf3>
 8019fb4:	4632      	mov	r2, r6
 8019fb6:	463b      	mov	r3, r7
 8019fb8:	4680      	mov	r8, r0
 8019fba:	4689      	mov	r9, r1
 8019fbc:	f7e6 f984 	bl	80002c8 <__aeabi_dsub>
 8019fc0:	4602      	mov	r2, r0
 8019fc2:	460b      	mov	r3, r1
 8019fc4:	4620      	mov	r0, r4
 8019fc6:	4629      	mov	r1, r5
 8019fc8:	f7e6 f97e 	bl	80002c8 <__aeabi_dsub>
 8019fcc:	4642      	mov	r2, r8
 8019fce:	4606      	mov	r6, r0
 8019fd0:	460f      	mov	r7, r1
 8019fd2:	464b      	mov	r3, r9
 8019fd4:	4640      	mov	r0, r8
 8019fd6:	4649      	mov	r1, r9
 8019fd8:	f7e6 fb2e 	bl	8000638 <__aeabi_dmul>
 8019fdc:	a35c      	add	r3, pc, #368	; (adr r3, 801a150 <__ieee754_pow+0x9f8>)
 8019fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fe2:	4604      	mov	r4, r0
 8019fe4:	460d      	mov	r5, r1
 8019fe6:	f7e6 fb27 	bl	8000638 <__aeabi_dmul>
 8019fea:	a35b      	add	r3, pc, #364	; (adr r3, 801a158 <__ieee754_pow+0xa00>)
 8019fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ff0:	f7e6 f96a 	bl	80002c8 <__aeabi_dsub>
 8019ff4:	4622      	mov	r2, r4
 8019ff6:	462b      	mov	r3, r5
 8019ff8:	f7e6 fb1e 	bl	8000638 <__aeabi_dmul>
 8019ffc:	a358      	add	r3, pc, #352	; (adr r3, 801a160 <__ieee754_pow+0xa08>)
 8019ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a002:	f7e6 f963 	bl	80002cc <__adddf3>
 801a006:	4622      	mov	r2, r4
 801a008:	462b      	mov	r3, r5
 801a00a:	f7e6 fb15 	bl	8000638 <__aeabi_dmul>
 801a00e:	a356      	add	r3, pc, #344	; (adr r3, 801a168 <__ieee754_pow+0xa10>)
 801a010:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a014:	f7e6 f958 	bl	80002c8 <__aeabi_dsub>
 801a018:	4622      	mov	r2, r4
 801a01a:	462b      	mov	r3, r5
 801a01c:	f7e6 fb0c 	bl	8000638 <__aeabi_dmul>
 801a020:	a353      	add	r3, pc, #332	; (adr r3, 801a170 <__ieee754_pow+0xa18>)
 801a022:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a026:	f7e6 f951 	bl	80002cc <__adddf3>
 801a02a:	4622      	mov	r2, r4
 801a02c:	462b      	mov	r3, r5
 801a02e:	f7e6 fb03 	bl	8000638 <__aeabi_dmul>
 801a032:	4602      	mov	r2, r0
 801a034:	460b      	mov	r3, r1
 801a036:	4640      	mov	r0, r8
 801a038:	4649      	mov	r1, r9
 801a03a:	f7e6 f945 	bl	80002c8 <__aeabi_dsub>
 801a03e:	4604      	mov	r4, r0
 801a040:	460d      	mov	r5, r1
 801a042:	4602      	mov	r2, r0
 801a044:	460b      	mov	r3, r1
 801a046:	4640      	mov	r0, r8
 801a048:	4649      	mov	r1, r9
 801a04a:	f7e6 faf5 	bl	8000638 <__aeabi_dmul>
 801a04e:	2200      	movs	r2, #0
 801a050:	ec41 0b19 	vmov	d9, r0, r1
 801a054:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801a058:	4620      	mov	r0, r4
 801a05a:	4629      	mov	r1, r5
 801a05c:	f7e6 f934 	bl	80002c8 <__aeabi_dsub>
 801a060:	4602      	mov	r2, r0
 801a062:	460b      	mov	r3, r1
 801a064:	ec51 0b19 	vmov	r0, r1, d9
 801a068:	f7e6 fc10 	bl	800088c <__aeabi_ddiv>
 801a06c:	4632      	mov	r2, r6
 801a06e:	4604      	mov	r4, r0
 801a070:	460d      	mov	r5, r1
 801a072:	463b      	mov	r3, r7
 801a074:	4640      	mov	r0, r8
 801a076:	4649      	mov	r1, r9
 801a078:	f7e6 fade 	bl	8000638 <__aeabi_dmul>
 801a07c:	4632      	mov	r2, r6
 801a07e:	463b      	mov	r3, r7
 801a080:	f7e6 f924 	bl	80002cc <__adddf3>
 801a084:	4602      	mov	r2, r0
 801a086:	460b      	mov	r3, r1
 801a088:	4620      	mov	r0, r4
 801a08a:	4629      	mov	r1, r5
 801a08c:	f7e6 f91c 	bl	80002c8 <__aeabi_dsub>
 801a090:	4642      	mov	r2, r8
 801a092:	464b      	mov	r3, r9
 801a094:	f7e6 f918 	bl	80002c8 <__aeabi_dsub>
 801a098:	460b      	mov	r3, r1
 801a09a:	4602      	mov	r2, r0
 801a09c:	493a      	ldr	r1, [pc, #232]	; (801a188 <__ieee754_pow+0xa30>)
 801a09e:	2000      	movs	r0, #0
 801a0a0:	f7e6 f912 	bl	80002c8 <__aeabi_dsub>
 801a0a4:	e9cd 0100 	strd	r0, r1, [sp]
 801a0a8:	9b01      	ldr	r3, [sp, #4]
 801a0aa:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801a0ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801a0b2:	da2f      	bge.n	801a114 <__ieee754_pow+0x9bc>
 801a0b4:	4650      	mov	r0, sl
 801a0b6:	ed9d 0b00 	vldr	d0, [sp]
 801a0ba:	f000 f9cd 	bl	801a458 <scalbn>
 801a0be:	ec51 0b10 	vmov	r0, r1, d0
 801a0c2:	ec53 2b18 	vmov	r2, r3, d8
 801a0c6:	f7ff bbe0 	b.w	801988a <__ieee754_pow+0x132>
 801a0ca:	4b30      	ldr	r3, [pc, #192]	; (801a18c <__ieee754_pow+0xa34>)
 801a0cc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801a0d0:	429e      	cmp	r6, r3
 801a0d2:	f77f af0b 	ble.w	8019eec <__ieee754_pow+0x794>
 801a0d6:	4b2e      	ldr	r3, [pc, #184]	; (801a190 <__ieee754_pow+0xa38>)
 801a0d8:	440b      	add	r3, r1
 801a0da:	4303      	orrs	r3, r0
 801a0dc:	d00b      	beq.n	801a0f6 <__ieee754_pow+0x99e>
 801a0de:	a326      	add	r3, pc, #152	; (adr r3, 801a178 <__ieee754_pow+0xa20>)
 801a0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0e4:	ec51 0b18 	vmov	r0, r1, d8
 801a0e8:	f7e6 faa6 	bl	8000638 <__aeabi_dmul>
 801a0ec:	a322      	add	r3, pc, #136	; (adr r3, 801a178 <__ieee754_pow+0xa20>)
 801a0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0f2:	f7ff bbca 	b.w	801988a <__ieee754_pow+0x132>
 801a0f6:	4622      	mov	r2, r4
 801a0f8:	462b      	mov	r3, r5
 801a0fa:	f7e6 f8e5 	bl	80002c8 <__aeabi_dsub>
 801a0fe:	4642      	mov	r2, r8
 801a100:	464b      	mov	r3, r9
 801a102:	f7e6 fd1f 	bl	8000b44 <__aeabi_dcmpge>
 801a106:	2800      	cmp	r0, #0
 801a108:	f43f aef0 	beq.w	8019eec <__ieee754_pow+0x794>
 801a10c:	e7e7      	b.n	801a0de <__ieee754_pow+0x986>
 801a10e:	f04f 0a00 	mov.w	sl, #0
 801a112:	e717      	b.n	8019f44 <__ieee754_pow+0x7ec>
 801a114:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a118:	4619      	mov	r1, r3
 801a11a:	e7d2      	b.n	801a0c2 <__ieee754_pow+0x96a>
 801a11c:	491a      	ldr	r1, [pc, #104]	; (801a188 <__ieee754_pow+0xa30>)
 801a11e:	2000      	movs	r0, #0
 801a120:	f7ff bb9e 	b.w	8019860 <__ieee754_pow+0x108>
 801a124:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a128:	f7ff bb9a 	b.w	8019860 <__ieee754_pow+0x108>
 801a12c:	9000      	str	r0, [sp, #0]
 801a12e:	f7ff bb76 	b.w	801981e <__ieee754_pow+0xc6>
 801a132:	2100      	movs	r1, #0
 801a134:	f7ff bb60 	b.w	80197f8 <__ieee754_pow+0xa0>
 801a138:	00000000 	.word	0x00000000
 801a13c:	3fe62e43 	.word	0x3fe62e43
 801a140:	fefa39ef 	.word	0xfefa39ef
 801a144:	3fe62e42 	.word	0x3fe62e42
 801a148:	0ca86c39 	.word	0x0ca86c39
 801a14c:	be205c61 	.word	0xbe205c61
 801a150:	72bea4d0 	.word	0x72bea4d0
 801a154:	3e663769 	.word	0x3e663769
 801a158:	c5d26bf1 	.word	0xc5d26bf1
 801a15c:	3ebbbd41 	.word	0x3ebbbd41
 801a160:	af25de2c 	.word	0xaf25de2c
 801a164:	3f11566a 	.word	0x3f11566a
 801a168:	16bebd93 	.word	0x16bebd93
 801a16c:	3f66c16c 	.word	0x3f66c16c
 801a170:	5555553e 	.word	0x5555553e
 801a174:	3fc55555 	.word	0x3fc55555
 801a178:	c2f8f359 	.word	0xc2f8f359
 801a17c:	01a56e1f 	.word	0x01a56e1f
 801a180:	3fe00000 	.word	0x3fe00000
 801a184:	000fffff 	.word	0x000fffff
 801a188:	3ff00000 	.word	0x3ff00000
 801a18c:	4090cbff 	.word	0x4090cbff
 801a190:	3f6f3400 	.word	0x3f6f3400
 801a194:	652b82fe 	.word	0x652b82fe
 801a198:	3c971547 	.word	0x3c971547

0801a19c <__ieee754_sqrt>:
 801a19c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a1a0:	ec55 4b10 	vmov	r4, r5, d0
 801a1a4:	4e56      	ldr	r6, [pc, #344]	; (801a300 <__ieee754_sqrt+0x164>)
 801a1a6:	43ae      	bics	r6, r5
 801a1a8:	ee10 0a10 	vmov	r0, s0
 801a1ac:	ee10 3a10 	vmov	r3, s0
 801a1b0:	4629      	mov	r1, r5
 801a1b2:	462a      	mov	r2, r5
 801a1b4:	d110      	bne.n	801a1d8 <__ieee754_sqrt+0x3c>
 801a1b6:	ee10 2a10 	vmov	r2, s0
 801a1ba:	462b      	mov	r3, r5
 801a1bc:	f7e6 fa3c 	bl	8000638 <__aeabi_dmul>
 801a1c0:	4602      	mov	r2, r0
 801a1c2:	460b      	mov	r3, r1
 801a1c4:	4620      	mov	r0, r4
 801a1c6:	4629      	mov	r1, r5
 801a1c8:	f7e6 f880 	bl	80002cc <__adddf3>
 801a1cc:	4604      	mov	r4, r0
 801a1ce:	460d      	mov	r5, r1
 801a1d0:	ec45 4b10 	vmov	d0, r4, r5
 801a1d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a1d8:	2d00      	cmp	r5, #0
 801a1da:	dc10      	bgt.n	801a1fe <__ieee754_sqrt+0x62>
 801a1dc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801a1e0:	4330      	orrs	r0, r6
 801a1e2:	d0f5      	beq.n	801a1d0 <__ieee754_sqrt+0x34>
 801a1e4:	b15d      	cbz	r5, 801a1fe <__ieee754_sqrt+0x62>
 801a1e6:	ee10 2a10 	vmov	r2, s0
 801a1ea:	462b      	mov	r3, r5
 801a1ec:	ee10 0a10 	vmov	r0, s0
 801a1f0:	f7e6 f86a 	bl	80002c8 <__aeabi_dsub>
 801a1f4:	4602      	mov	r2, r0
 801a1f6:	460b      	mov	r3, r1
 801a1f8:	f7e6 fb48 	bl	800088c <__aeabi_ddiv>
 801a1fc:	e7e6      	b.n	801a1cc <__ieee754_sqrt+0x30>
 801a1fe:	1509      	asrs	r1, r1, #20
 801a200:	d076      	beq.n	801a2f0 <__ieee754_sqrt+0x154>
 801a202:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801a206:	07ce      	lsls	r6, r1, #31
 801a208:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801a20c:	bf5e      	ittt	pl
 801a20e:	0fda      	lsrpl	r2, r3, #31
 801a210:	005b      	lslpl	r3, r3, #1
 801a212:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801a216:	0fda      	lsrs	r2, r3, #31
 801a218:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801a21c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801a220:	2000      	movs	r0, #0
 801a222:	106d      	asrs	r5, r5, #1
 801a224:	005b      	lsls	r3, r3, #1
 801a226:	f04f 0e16 	mov.w	lr, #22
 801a22a:	4684      	mov	ip, r0
 801a22c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801a230:	eb0c 0401 	add.w	r4, ip, r1
 801a234:	4294      	cmp	r4, r2
 801a236:	bfde      	ittt	le
 801a238:	1b12      	suble	r2, r2, r4
 801a23a:	eb04 0c01 	addle.w	ip, r4, r1
 801a23e:	1840      	addle	r0, r0, r1
 801a240:	0052      	lsls	r2, r2, #1
 801a242:	f1be 0e01 	subs.w	lr, lr, #1
 801a246:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801a24a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801a24e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801a252:	d1ed      	bne.n	801a230 <__ieee754_sqrt+0x94>
 801a254:	4671      	mov	r1, lr
 801a256:	2720      	movs	r7, #32
 801a258:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801a25c:	4562      	cmp	r2, ip
 801a25e:	eb04 060e 	add.w	r6, r4, lr
 801a262:	dc02      	bgt.n	801a26a <__ieee754_sqrt+0xce>
 801a264:	d113      	bne.n	801a28e <__ieee754_sqrt+0xf2>
 801a266:	429e      	cmp	r6, r3
 801a268:	d811      	bhi.n	801a28e <__ieee754_sqrt+0xf2>
 801a26a:	2e00      	cmp	r6, #0
 801a26c:	eb06 0e04 	add.w	lr, r6, r4
 801a270:	da43      	bge.n	801a2fa <__ieee754_sqrt+0x15e>
 801a272:	f1be 0f00 	cmp.w	lr, #0
 801a276:	db40      	blt.n	801a2fa <__ieee754_sqrt+0x15e>
 801a278:	f10c 0801 	add.w	r8, ip, #1
 801a27c:	eba2 020c 	sub.w	r2, r2, ip
 801a280:	429e      	cmp	r6, r3
 801a282:	bf88      	it	hi
 801a284:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801a288:	1b9b      	subs	r3, r3, r6
 801a28a:	4421      	add	r1, r4
 801a28c:	46c4      	mov	ip, r8
 801a28e:	0052      	lsls	r2, r2, #1
 801a290:	3f01      	subs	r7, #1
 801a292:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801a296:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801a29a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801a29e:	d1dd      	bne.n	801a25c <__ieee754_sqrt+0xc0>
 801a2a0:	4313      	orrs	r3, r2
 801a2a2:	d006      	beq.n	801a2b2 <__ieee754_sqrt+0x116>
 801a2a4:	1c4c      	adds	r4, r1, #1
 801a2a6:	bf13      	iteet	ne
 801a2a8:	3101      	addne	r1, #1
 801a2aa:	3001      	addeq	r0, #1
 801a2ac:	4639      	moveq	r1, r7
 801a2ae:	f021 0101 	bicne.w	r1, r1, #1
 801a2b2:	1043      	asrs	r3, r0, #1
 801a2b4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801a2b8:	0849      	lsrs	r1, r1, #1
 801a2ba:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801a2be:	07c2      	lsls	r2, r0, #31
 801a2c0:	bf48      	it	mi
 801a2c2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801a2c6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801a2ca:	460c      	mov	r4, r1
 801a2cc:	463d      	mov	r5, r7
 801a2ce:	e77f      	b.n	801a1d0 <__ieee754_sqrt+0x34>
 801a2d0:	0ada      	lsrs	r2, r3, #11
 801a2d2:	3815      	subs	r0, #21
 801a2d4:	055b      	lsls	r3, r3, #21
 801a2d6:	2a00      	cmp	r2, #0
 801a2d8:	d0fa      	beq.n	801a2d0 <__ieee754_sqrt+0x134>
 801a2da:	02d7      	lsls	r7, r2, #11
 801a2dc:	d50a      	bpl.n	801a2f4 <__ieee754_sqrt+0x158>
 801a2de:	f1c1 0420 	rsb	r4, r1, #32
 801a2e2:	fa23 f404 	lsr.w	r4, r3, r4
 801a2e6:	1e4d      	subs	r5, r1, #1
 801a2e8:	408b      	lsls	r3, r1
 801a2ea:	4322      	orrs	r2, r4
 801a2ec:	1b41      	subs	r1, r0, r5
 801a2ee:	e788      	b.n	801a202 <__ieee754_sqrt+0x66>
 801a2f0:	4608      	mov	r0, r1
 801a2f2:	e7f0      	b.n	801a2d6 <__ieee754_sqrt+0x13a>
 801a2f4:	0052      	lsls	r2, r2, #1
 801a2f6:	3101      	adds	r1, #1
 801a2f8:	e7ef      	b.n	801a2da <__ieee754_sqrt+0x13e>
 801a2fa:	46e0      	mov	r8, ip
 801a2fc:	e7be      	b.n	801a27c <__ieee754_sqrt+0xe0>
 801a2fe:	bf00      	nop
 801a300:	7ff00000 	.word	0x7ff00000

0801a304 <fabs>:
 801a304:	ec51 0b10 	vmov	r0, r1, d0
 801a308:	ee10 2a10 	vmov	r2, s0
 801a30c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a310:	ec43 2b10 	vmov	d0, r2, r3
 801a314:	4770      	bx	lr

0801a316 <finite>:
 801a316:	b082      	sub	sp, #8
 801a318:	ed8d 0b00 	vstr	d0, [sp]
 801a31c:	9801      	ldr	r0, [sp, #4]
 801a31e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801a322:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801a326:	0fc0      	lsrs	r0, r0, #31
 801a328:	b002      	add	sp, #8
 801a32a:	4770      	bx	lr
 801a32c:	0000      	movs	r0, r0
	...

0801a330 <nan>:
 801a330:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801a338 <nan+0x8>
 801a334:	4770      	bx	lr
 801a336:	bf00      	nop
 801a338:	00000000 	.word	0x00000000
 801a33c:	7ff80000 	.word	0x7ff80000

0801a340 <rint>:
 801a340:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a342:	ec51 0b10 	vmov	r0, r1, d0
 801a346:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801a34a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801a34e:	2e13      	cmp	r6, #19
 801a350:	ee10 4a10 	vmov	r4, s0
 801a354:	460b      	mov	r3, r1
 801a356:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801a35a:	dc58      	bgt.n	801a40e <rint+0xce>
 801a35c:	2e00      	cmp	r6, #0
 801a35e:	da2b      	bge.n	801a3b8 <rint+0x78>
 801a360:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801a364:	4302      	orrs	r2, r0
 801a366:	d023      	beq.n	801a3b0 <rint+0x70>
 801a368:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801a36c:	4302      	orrs	r2, r0
 801a36e:	4254      	negs	r4, r2
 801a370:	4314      	orrs	r4, r2
 801a372:	0c4b      	lsrs	r3, r1, #17
 801a374:	0b24      	lsrs	r4, r4, #12
 801a376:	045b      	lsls	r3, r3, #17
 801a378:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801a37c:	ea44 0103 	orr.w	r1, r4, r3
 801a380:	4b32      	ldr	r3, [pc, #200]	; (801a44c <rint+0x10c>)
 801a382:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801a386:	e9d3 6700 	ldrd	r6, r7, [r3]
 801a38a:	4602      	mov	r2, r0
 801a38c:	460b      	mov	r3, r1
 801a38e:	4630      	mov	r0, r6
 801a390:	4639      	mov	r1, r7
 801a392:	f7e5 ff9b 	bl	80002cc <__adddf3>
 801a396:	e9cd 0100 	strd	r0, r1, [sp]
 801a39a:	463b      	mov	r3, r7
 801a39c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a3a0:	4632      	mov	r2, r6
 801a3a2:	f7e5 ff91 	bl	80002c8 <__aeabi_dsub>
 801a3a6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a3aa:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801a3ae:	4639      	mov	r1, r7
 801a3b0:	ec41 0b10 	vmov	d0, r0, r1
 801a3b4:	b003      	add	sp, #12
 801a3b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a3b8:	4a25      	ldr	r2, [pc, #148]	; (801a450 <rint+0x110>)
 801a3ba:	4132      	asrs	r2, r6
 801a3bc:	ea01 0702 	and.w	r7, r1, r2
 801a3c0:	4307      	orrs	r7, r0
 801a3c2:	d0f5      	beq.n	801a3b0 <rint+0x70>
 801a3c4:	0851      	lsrs	r1, r2, #1
 801a3c6:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 801a3ca:	4314      	orrs	r4, r2
 801a3cc:	d00c      	beq.n	801a3e8 <rint+0xa8>
 801a3ce:	ea23 0201 	bic.w	r2, r3, r1
 801a3d2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801a3d6:	2e13      	cmp	r6, #19
 801a3d8:	fa43 f606 	asr.w	r6, r3, r6
 801a3dc:	bf0c      	ite	eq
 801a3de:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801a3e2:	2400      	movne	r4, #0
 801a3e4:	ea42 0306 	orr.w	r3, r2, r6
 801a3e8:	4918      	ldr	r1, [pc, #96]	; (801a44c <rint+0x10c>)
 801a3ea:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801a3ee:	4622      	mov	r2, r4
 801a3f0:	e9d5 4500 	ldrd	r4, r5, [r5]
 801a3f4:	4620      	mov	r0, r4
 801a3f6:	4629      	mov	r1, r5
 801a3f8:	f7e5 ff68 	bl	80002cc <__adddf3>
 801a3fc:	e9cd 0100 	strd	r0, r1, [sp]
 801a400:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a404:	4622      	mov	r2, r4
 801a406:	462b      	mov	r3, r5
 801a408:	f7e5 ff5e 	bl	80002c8 <__aeabi_dsub>
 801a40c:	e7d0      	b.n	801a3b0 <rint+0x70>
 801a40e:	2e33      	cmp	r6, #51	; 0x33
 801a410:	dd07      	ble.n	801a422 <rint+0xe2>
 801a412:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801a416:	d1cb      	bne.n	801a3b0 <rint+0x70>
 801a418:	ee10 2a10 	vmov	r2, s0
 801a41c:	f7e5 ff56 	bl	80002cc <__adddf3>
 801a420:	e7c6      	b.n	801a3b0 <rint+0x70>
 801a422:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801a426:	f04f 36ff 	mov.w	r6, #4294967295
 801a42a:	40d6      	lsrs	r6, r2
 801a42c:	4230      	tst	r0, r6
 801a42e:	d0bf      	beq.n	801a3b0 <rint+0x70>
 801a430:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 801a434:	ea4f 0156 	mov.w	r1, r6, lsr #1
 801a438:	bf1f      	itttt	ne
 801a43a:	ea24 0101 	bicne.w	r1, r4, r1
 801a43e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801a442:	fa44 f202 	asrne.w	r2, r4, r2
 801a446:	ea41 0402 	orrne.w	r4, r1, r2
 801a44a:	e7cd      	b.n	801a3e8 <rint+0xa8>
 801a44c:	08022b28 	.word	0x08022b28
 801a450:	000fffff 	.word	0x000fffff
 801a454:	00000000 	.word	0x00000000

0801a458 <scalbn>:
 801a458:	b570      	push	{r4, r5, r6, lr}
 801a45a:	ec55 4b10 	vmov	r4, r5, d0
 801a45e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801a462:	4606      	mov	r6, r0
 801a464:	462b      	mov	r3, r5
 801a466:	b99a      	cbnz	r2, 801a490 <scalbn+0x38>
 801a468:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801a46c:	4323      	orrs	r3, r4
 801a46e:	d036      	beq.n	801a4de <scalbn+0x86>
 801a470:	4b39      	ldr	r3, [pc, #228]	; (801a558 <scalbn+0x100>)
 801a472:	4629      	mov	r1, r5
 801a474:	ee10 0a10 	vmov	r0, s0
 801a478:	2200      	movs	r2, #0
 801a47a:	f7e6 f8dd 	bl	8000638 <__aeabi_dmul>
 801a47e:	4b37      	ldr	r3, [pc, #220]	; (801a55c <scalbn+0x104>)
 801a480:	429e      	cmp	r6, r3
 801a482:	4604      	mov	r4, r0
 801a484:	460d      	mov	r5, r1
 801a486:	da10      	bge.n	801a4aa <scalbn+0x52>
 801a488:	a32b      	add	r3, pc, #172	; (adr r3, 801a538 <scalbn+0xe0>)
 801a48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a48e:	e03a      	b.n	801a506 <scalbn+0xae>
 801a490:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801a494:	428a      	cmp	r2, r1
 801a496:	d10c      	bne.n	801a4b2 <scalbn+0x5a>
 801a498:	ee10 2a10 	vmov	r2, s0
 801a49c:	4620      	mov	r0, r4
 801a49e:	4629      	mov	r1, r5
 801a4a0:	f7e5 ff14 	bl	80002cc <__adddf3>
 801a4a4:	4604      	mov	r4, r0
 801a4a6:	460d      	mov	r5, r1
 801a4a8:	e019      	b.n	801a4de <scalbn+0x86>
 801a4aa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801a4ae:	460b      	mov	r3, r1
 801a4b0:	3a36      	subs	r2, #54	; 0x36
 801a4b2:	4432      	add	r2, r6
 801a4b4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801a4b8:	428a      	cmp	r2, r1
 801a4ba:	dd08      	ble.n	801a4ce <scalbn+0x76>
 801a4bc:	2d00      	cmp	r5, #0
 801a4be:	a120      	add	r1, pc, #128	; (adr r1, 801a540 <scalbn+0xe8>)
 801a4c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a4c4:	da1c      	bge.n	801a500 <scalbn+0xa8>
 801a4c6:	a120      	add	r1, pc, #128	; (adr r1, 801a548 <scalbn+0xf0>)
 801a4c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a4cc:	e018      	b.n	801a500 <scalbn+0xa8>
 801a4ce:	2a00      	cmp	r2, #0
 801a4d0:	dd08      	ble.n	801a4e4 <scalbn+0x8c>
 801a4d2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a4d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801a4da:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801a4de:	ec45 4b10 	vmov	d0, r4, r5
 801a4e2:	bd70      	pop	{r4, r5, r6, pc}
 801a4e4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801a4e8:	da19      	bge.n	801a51e <scalbn+0xc6>
 801a4ea:	f24c 3350 	movw	r3, #50000	; 0xc350
 801a4ee:	429e      	cmp	r6, r3
 801a4f0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801a4f4:	dd0a      	ble.n	801a50c <scalbn+0xb4>
 801a4f6:	a112      	add	r1, pc, #72	; (adr r1, 801a540 <scalbn+0xe8>)
 801a4f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a4fc:	2b00      	cmp	r3, #0
 801a4fe:	d1e2      	bne.n	801a4c6 <scalbn+0x6e>
 801a500:	a30f      	add	r3, pc, #60	; (adr r3, 801a540 <scalbn+0xe8>)
 801a502:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a506:	f7e6 f897 	bl	8000638 <__aeabi_dmul>
 801a50a:	e7cb      	b.n	801a4a4 <scalbn+0x4c>
 801a50c:	a10a      	add	r1, pc, #40	; (adr r1, 801a538 <scalbn+0xe0>)
 801a50e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a512:	2b00      	cmp	r3, #0
 801a514:	d0b8      	beq.n	801a488 <scalbn+0x30>
 801a516:	a10e      	add	r1, pc, #56	; (adr r1, 801a550 <scalbn+0xf8>)
 801a518:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a51c:	e7b4      	b.n	801a488 <scalbn+0x30>
 801a51e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a522:	3236      	adds	r2, #54	; 0x36
 801a524:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801a528:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801a52c:	4620      	mov	r0, r4
 801a52e:	4b0c      	ldr	r3, [pc, #48]	; (801a560 <scalbn+0x108>)
 801a530:	2200      	movs	r2, #0
 801a532:	e7e8      	b.n	801a506 <scalbn+0xae>
 801a534:	f3af 8000 	nop.w
 801a538:	c2f8f359 	.word	0xc2f8f359
 801a53c:	01a56e1f 	.word	0x01a56e1f
 801a540:	8800759c 	.word	0x8800759c
 801a544:	7e37e43c 	.word	0x7e37e43c
 801a548:	8800759c 	.word	0x8800759c
 801a54c:	fe37e43c 	.word	0xfe37e43c
 801a550:	c2f8f359 	.word	0xc2f8f359
 801a554:	81a56e1f 	.word	0x81a56e1f
 801a558:	43500000 	.word	0x43500000
 801a55c:	ffff3cb0 	.word	0xffff3cb0
 801a560:	3c900000 	.word	0x3c900000

0801a564 <abort>:
 801a564:	b508      	push	{r3, lr}
 801a566:	2006      	movs	r0, #6
 801a568:	f001 fd66 	bl	801c038 <raise>
 801a56c:	2001      	movs	r0, #1
 801a56e:	f006 f981 	bl	8020874 <_exit>

0801a572 <atoi>:
 801a572:	220a      	movs	r2, #10
 801a574:	2100      	movs	r1, #0
 801a576:	f002 bd41 	b.w	801cffc <strtol>

0801a57a <atol>:
 801a57a:	220a      	movs	r2, #10
 801a57c:	2100      	movs	r1, #0
 801a57e:	f002 bd3d 	b.w	801cffc <strtol>
	...

0801a584 <__errno>:
 801a584:	4b01      	ldr	r3, [pc, #4]	; (801a58c <__errno+0x8>)
 801a586:	6818      	ldr	r0, [r3, #0]
 801a588:	4770      	bx	lr
 801a58a:	bf00      	nop
 801a58c:	200000f8 	.word	0x200000f8

0801a590 <std>:
 801a590:	2300      	movs	r3, #0
 801a592:	b510      	push	{r4, lr}
 801a594:	4604      	mov	r4, r0
 801a596:	e9c0 3300 	strd	r3, r3, [r0]
 801a59a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a59e:	6083      	str	r3, [r0, #8]
 801a5a0:	8181      	strh	r1, [r0, #12]
 801a5a2:	6643      	str	r3, [r0, #100]	; 0x64
 801a5a4:	81c2      	strh	r2, [r0, #14]
 801a5a6:	6183      	str	r3, [r0, #24]
 801a5a8:	4619      	mov	r1, r3
 801a5aa:	2208      	movs	r2, #8
 801a5ac:	305c      	adds	r0, #92	; 0x5c
 801a5ae:	f000 fa63 	bl	801aa78 <memset>
 801a5b2:	4b05      	ldr	r3, [pc, #20]	; (801a5c8 <std+0x38>)
 801a5b4:	6263      	str	r3, [r4, #36]	; 0x24
 801a5b6:	4b05      	ldr	r3, [pc, #20]	; (801a5cc <std+0x3c>)
 801a5b8:	62a3      	str	r3, [r4, #40]	; 0x28
 801a5ba:	4b05      	ldr	r3, [pc, #20]	; (801a5d0 <std+0x40>)
 801a5bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a5be:	4b05      	ldr	r3, [pc, #20]	; (801a5d4 <std+0x44>)
 801a5c0:	6224      	str	r4, [r4, #32]
 801a5c2:	6323      	str	r3, [r4, #48]	; 0x30
 801a5c4:	bd10      	pop	{r4, pc}
 801a5c6:	bf00      	nop
 801a5c8:	0801c109 	.word	0x0801c109
 801a5cc:	0801c12f 	.word	0x0801c12f
 801a5d0:	0801c167 	.word	0x0801c167
 801a5d4:	0801c18b 	.word	0x0801c18b

0801a5d8 <_cleanup_r>:
 801a5d8:	4901      	ldr	r1, [pc, #4]	; (801a5e0 <_cleanup_r+0x8>)
 801a5da:	f000 b8af 	b.w	801a73c <_fwalk_reent>
 801a5de:	bf00      	nop
 801a5e0:	0801e625 	.word	0x0801e625

0801a5e4 <__sfmoreglue>:
 801a5e4:	b570      	push	{r4, r5, r6, lr}
 801a5e6:	1e4a      	subs	r2, r1, #1
 801a5e8:	2568      	movs	r5, #104	; 0x68
 801a5ea:	4355      	muls	r5, r2
 801a5ec:	460e      	mov	r6, r1
 801a5ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a5f2:	f000 fd17 	bl	801b024 <_malloc_r>
 801a5f6:	4604      	mov	r4, r0
 801a5f8:	b140      	cbz	r0, 801a60c <__sfmoreglue+0x28>
 801a5fa:	2100      	movs	r1, #0
 801a5fc:	e9c0 1600 	strd	r1, r6, [r0]
 801a600:	300c      	adds	r0, #12
 801a602:	60a0      	str	r0, [r4, #8]
 801a604:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a608:	f000 fa36 	bl	801aa78 <memset>
 801a60c:	4620      	mov	r0, r4
 801a60e:	bd70      	pop	{r4, r5, r6, pc}

0801a610 <__sfp_lock_acquire>:
 801a610:	4801      	ldr	r0, [pc, #4]	; (801a618 <__sfp_lock_acquire+0x8>)
 801a612:	f000 b9f5 	b.w	801aa00 <__retarget_lock_acquire_recursive>
 801a616:	bf00      	nop
 801a618:	20009d04 	.word	0x20009d04

0801a61c <__sfp_lock_release>:
 801a61c:	4801      	ldr	r0, [pc, #4]	; (801a624 <__sfp_lock_release+0x8>)
 801a61e:	f000 b9f1 	b.w	801aa04 <__retarget_lock_release_recursive>
 801a622:	bf00      	nop
 801a624:	20009d04 	.word	0x20009d04

0801a628 <__sinit_lock_acquire>:
 801a628:	4801      	ldr	r0, [pc, #4]	; (801a630 <__sinit_lock_acquire+0x8>)
 801a62a:	f000 b9e9 	b.w	801aa00 <__retarget_lock_acquire_recursive>
 801a62e:	bf00      	nop
 801a630:	20009cff 	.word	0x20009cff

0801a634 <__sinit_lock_release>:
 801a634:	4801      	ldr	r0, [pc, #4]	; (801a63c <__sinit_lock_release+0x8>)
 801a636:	f000 b9e5 	b.w	801aa04 <__retarget_lock_release_recursive>
 801a63a:	bf00      	nop
 801a63c:	20009cff 	.word	0x20009cff

0801a640 <__sinit>:
 801a640:	b510      	push	{r4, lr}
 801a642:	4604      	mov	r4, r0
 801a644:	f7ff fff0 	bl	801a628 <__sinit_lock_acquire>
 801a648:	69a3      	ldr	r3, [r4, #24]
 801a64a:	b11b      	cbz	r3, 801a654 <__sinit+0x14>
 801a64c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a650:	f7ff bff0 	b.w	801a634 <__sinit_lock_release>
 801a654:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a658:	6523      	str	r3, [r4, #80]	; 0x50
 801a65a:	4b13      	ldr	r3, [pc, #76]	; (801a6a8 <__sinit+0x68>)
 801a65c:	4a13      	ldr	r2, [pc, #76]	; (801a6ac <__sinit+0x6c>)
 801a65e:	681b      	ldr	r3, [r3, #0]
 801a660:	62a2      	str	r2, [r4, #40]	; 0x28
 801a662:	42a3      	cmp	r3, r4
 801a664:	bf04      	itt	eq
 801a666:	2301      	moveq	r3, #1
 801a668:	61a3      	streq	r3, [r4, #24]
 801a66a:	4620      	mov	r0, r4
 801a66c:	f000 f820 	bl	801a6b0 <__sfp>
 801a670:	6060      	str	r0, [r4, #4]
 801a672:	4620      	mov	r0, r4
 801a674:	f000 f81c 	bl	801a6b0 <__sfp>
 801a678:	60a0      	str	r0, [r4, #8]
 801a67a:	4620      	mov	r0, r4
 801a67c:	f000 f818 	bl	801a6b0 <__sfp>
 801a680:	2200      	movs	r2, #0
 801a682:	60e0      	str	r0, [r4, #12]
 801a684:	2104      	movs	r1, #4
 801a686:	6860      	ldr	r0, [r4, #4]
 801a688:	f7ff ff82 	bl	801a590 <std>
 801a68c:	68a0      	ldr	r0, [r4, #8]
 801a68e:	2201      	movs	r2, #1
 801a690:	2109      	movs	r1, #9
 801a692:	f7ff ff7d 	bl	801a590 <std>
 801a696:	68e0      	ldr	r0, [r4, #12]
 801a698:	2202      	movs	r2, #2
 801a69a:	2112      	movs	r1, #18
 801a69c:	f7ff ff78 	bl	801a590 <std>
 801a6a0:	2301      	movs	r3, #1
 801a6a2:	61a3      	str	r3, [r4, #24]
 801a6a4:	e7d2      	b.n	801a64c <__sinit+0xc>
 801a6a6:	bf00      	nop
 801a6a8:	08022c9c 	.word	0x08022c9c
 801a6ac:	0801a5d9 	.word	0x0801a5d9

0801a6b0 <__sfp>:
 801a6b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a6b2:	4607      	mov	r7, r0
 801a6b4:	f7ff ffac 	bl	801a610 <__sfp_lock_acquire>
 801a6b8:	4b1e      	ldr	r3, [pc, #120]	; (801a734 <__sfp+0x84>)
 801a6ba:	681e      	ldr	r6, [r3, #0]
 801a6bc:	69b3      	ldr	r3, [r6, #24]
 801a6be:	b913      	cbnz	r3, 801a6c6 <__sfp+0x16>
 801a6c0:	4630      	mov	r0, r6
 801a6c2:	f7ff ffbd 	bl	801a640 <__sinit>
 801a6c6:	3648      	adds	r6, #72	; 0x48
 801a6c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a6cc:	3b01      	subs	r3, #1
 801a6ce:	d503      	bpl.n	801a6d8 <__sfp+0x28>
 801a6d0:	6833      	ldr	r3, [r6, #0]
 801a6d2:	b30b      	cbz	r3, 801a718 <__sfp+0x68>
 801a6d4:	6836      	ldr	r6, [r6, #0]
 801a6d6:	e7f7      	b.n	801a6c8 <__sfp+0x18>
 801a6d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a6dc:	b9d5      	cbnz	r5, 801a714 <__sfp+0x64>
 801a6de:	4b16      	ldr	r3, [pc, #88]	; (801a738 <__sfp+0x88>)
 801a6e0:	60e3      	str	r3, [r4, #12]
 801a6e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a6e6:	6665      	str	r5, [r4, #100]	; 0x64
 801a6e8:	f000 f988 	bl	801a9fc <__retarget_lock_init_recursive>
 801a6ec:	f7ff ff96 	bl	801a61c <__sfp_lock_release>
 801a6f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a6f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a6f8:	6025      	str	r5, [r4, #0]
 801a6fa:	61a5      	str	r5, [r4, #24]
 801a6fc:	2208      	movs	r2, #8
 801a6fe:	4629      	mov	r1, r5
 801a700:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a704:	f000 f9b8 	bl	801aa78 <memset>
 801a708:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a70c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a710:	4620      	mov	r0, r4
 801a712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a714:	3468      	adds	r4, #104	; 0x68
 801a716:	e7d9      	b.n	801a6cc <__sfp+0x1c>
 801a718:	2104      	movs	r1, #4
 801a71a:	4638      	mov	r0, r7
 801a71c:	f7ff ff62 	bl	801a5e4 <__sfmoreglue>
 801a720:	4604      	mov	r4, r0
 801a722:	6030      	str	r0, [r6, #0]
 801a724:	2800      	cmp	r0, #0
 801a726:	d1d5      	bne.n	801a6d4 <__sfp+0x24>
 801a728:	f7ff ff78 	bl	801a61c <__sfp_lock_release>
 801a72c:	230c      	movs	r3, #12
 801a72e:	603b      	str	r3, [r7, #0]
 801a730:	e7ee      	b.n	801a710 <__sfp+0x60>
 801a732:	bf00      	nop
 801a734:	08022c9c 	.word	0x08022c9c
 801a738:	ffff0001 	.word	0xffff0001

0801a73c <_fwalk_reent>:
 801a73c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a740:	4606      	mov	r6, r0
 801a742:	4688      	mov	r8, r1
 801a744:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a748:	2700      	movs	r7, #0
 801a74a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a74e:	f1b9 0901 	subs.w	r9, r9, #1
 801a752:	d505      	bpl.n	801a760 <_fwalk_reent+0x24>
 801a754:	6824      	ldr	r4, [r4, #0]
 801a756:	2c00      	cmp	r4, #0
 801a758:	d1f7      	bne.n	801a74a <_fwalk_reent+0xe>
 801a75a:	4638      	mov	r0, r7
 801a75c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a760:	89ab      	ldrh	r3, [r5, #12]
 801a762:	2b01      	cmp	r3, #1
 801a764:	d907      	bls.n	801a776 <_fwalk_reent+0x3a>
 801a766:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a76a:	3301      	adds	r3, #1
 801a76c:	d003      	beq.n	801a776 <_fwalk_reent+0x3a>
 801a76e:	4629      	mov	r1, r5
 801a770:	4630      	mov	r0, r6
 801a772:	47c0      	blx	r8
 801a774:	4307      	orrs	r7, r0
 801a776:	3568      	adds	r5, #104	; 0x68
 801a778:	e7e9      	b.n	801a74e <_fwalk_reent+0x12>
	...

0801a77c <__libc_init_array>:
 801a77c:	b570      	push	{r4, r5, r6, lr}
 801a77e:	4d0d      	ldr	r5, [pc, #52]	; (801a7b4 <__libc_init_array+0x38>)
 801a780:	4c0d      	ldr	r4, [pc, #52]	; (801a7b8 <__libc_init_array+0x3c>)
 801a782:	1b64      	subs	r4, r4, r5
 801a784:	10a4      	asrs	r4, r4, #2
 801a786:	2600      	movs	r6, #0
 801a788:	42a6      	cmp	r6, r4
 801a78a:	d109      	bne.n	801a7a0 <__libc_init_array+0x24>
 801a78c:	4d0b      	ldr	r5, [pc, #44]	; (801a7bc <__libc_init_array+0x40>)
 801a78e:	4c0c      	ldr	r4, [pc, #48]	; (801a7c0 <__libc_init_array+0x44>)
 801a790:	f006 f872 	bl	8020878 <_init>
 801a794:	1b64      	subs	r4, r4, r5
 801a796:	10a4      	asrs	r4, r4, #2
 801a798:	2600      	movs	r6, #0
 801a79a:	42a6      	cmp	r6, r4
 801a79c:	d105      	bne.n	801a7aa <__libc_init_array+0x2e>
 801a79e:	bd70      	pop	{r4, r5, r6, pc}
 801a7a0:	f855 3b04 	ldr.w	r3, [r5], #4
 801a7a4:	4798      	blx	r3
 801a7a6:	3601      	adds	r6, #1
 801a7a8:	e7ee      	b.n	801a788 <__libc_init_array+0xc>
 801a7aa:	f855 3b04 	ldr.w	r3, [r5], #4
 801a7ae:	4798      	blx	r3
 801a7b0:	3601      	adds	r6, #1
 801a7b2:	e7f2      	b.n	801a79a <__libc_init_array+0x1e>
 801a7b4:	080231c8 	.word	0x080231c8
 801a7b8:	080231c8 	.word	0x080231c8
 801a7bc:	080231c8 	.word	0x080231c8
 801a7c0:	080231d0 	.word	0x080231d0

0801a7c4 <isxdigit>:
 801a7c4:	4b02      	ldr	r3, [pc, #8]	; (801a7d0 <isxdigit+0xc>)
 801a7c6:	4418      	add	r0, r3
 801a7c8:	7840      	ldrb	r0, [r0, #1]
 801a7ca:	f000 0044 	and.w	r0, r0, #68	; 0x44
 801a7ce:	4770      	bx	lr
 801a7d0:	08022b38 	.word	0x08022b38

0801a7d4 <localtime>:
 801a7d4:	b538      	push	{r3, r4, r5, lr}
 801a7d6:	4b0b      	ldr	r3, [pc, #44]	; (801a804 <localtime+0x30>)
 801a7d8:	681d      	ldr	r5, [r3, #0]
 801a7da:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 801a7dc:	4604      	mov	r4, r0
 801a7de:	b953      	cbnz	r3, 801a7f6 <localtime+0x22>
 801a7e0:	2024      	movs	r0, #36	; 0x24
 801a7e2:	f000 f911 	bl	801aa08 <malloc>
 801a7e6:	4602      	mov	r2, r0
 801a7e8:	63e8      	str	r0, [r5, #60]	; 0x3c
 801a7ea:	b920      	cbnz	r0, 801a7f6 <localtime+0x22>
 801a7ec:	4b06      	ldr	r3, [pc, #24]	; (801a808 <localtime+0x34>)
 801a7ee:	4807      	ldr	r0, [pc, #28]	; (801a80c <localtime+0x38>)
 801a7f0:	2132      	movs	r1, #50	; 0x32
 801a7f2:	f002 ffd7 	bl	801d7a4 <__assert_func>
 801a7f6:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 801a7f8:	4620      	mov	r0, r4
 801a7fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a7fe:	f000 b807 	b.w	801a810 <localtime_r>
 801a802:	bf00      	nop
 801a804:	200000f8 	.word	0x200000f8
 801a808:	08022ca0 	.word	0x08022ca0
 801a80c:	08022cb7 	.word	0x08022cb7

0801a810 <localtime_r>:
 801a810:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801a814:	4607      	mov	r7, r0
 801a816:	9101      	str	r1, [sp, #4]
 801a818:	f004 fb04 	bl	801ee24 <__gettzinfo>
 801a81c:	9901      	ldr	r1, [sp, #4]
 801a81e:	4680      	mov	r8, r0
 801a820:	4638      	mov	r0, r7
 801a822:	f004 fb03 	bl	801ee2c <gmtime_r>
 801a826:	6943      	ldr	r3, [r0, #20]
 801a828:	079a      	lsls	r2, r3, #30
 801a82a:	4604      	mov	r4, r0
 801a82c:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 801a830:	d105      	bne.n	801a83e <localtime_r+0x2e>
 801a832:	2264      	movs	r2, #100	; 0x64
 801a834:	fb96 f3f2 	sdiv	r3, r6, r2
 801a838:	fb02 6313 	mls	r3, r2, r3, r6
 801a83c:	bb7b      	cbnz	r3, 801a89e <localtime_r+0x8e>
 801a83e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801a842:	fb96 f5f3 	sdiv	r5, r6, r3
 801a846:	fb03 6515 	mls	r5, r3, r5, r6
 801a84a:	fab5 f585 	clz	r5, r5
 801a84e:	096d      	lsrs	r5, r5, #5
 801a850:	4b68      	ldr	r3, [pc, #416]	; (801a9f4 <localtime_r+0x1e4>)
 801a852:	2230      	movs	r2, #48	; 0x30
 801a854:	fb02 3505 	mla	r5, r2, r5, r3
 801a858:	f002 fd0a 	bl	801d270 <__tz_lock>
 801a85c:	f002 fd14 	bl	801d288 <_tzset_unlocked>
 801a860:	4b65      	ldr	r3, [pc, #404]	; (801a9f8 <localtime_r+0x1e8>)
 801a862:	681b      	ldr	r3, [r3, #0]
 801a864:	b353      	cbz	r3, 801a8bc <localtime_r+0xac>
 801a866:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801a86a:	42b3      	cmp	r3, r6
 801a86c:	d119      	bne.n	801a8a2 <localtime_r+0x92>
 801a86e:	f8d8 1000 	ldr.w	r1, [r8]
 801a872:	e9d7 6700 	ldrd	r6, r7, [r7]
 801a876:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 801a87a:	b9d1      	cbnz	r1, 801a8b2 <localtime_r+0xa2>
 801a87c:	4296      	cmp	r6, r2
 801a87e:	eb77 0303 	sbcs.w	r3, r7, r3
 801a882:	da23      	bge.n	801a8cc <localtime_r+0xbc>
 801a884:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801a888:	4296      	cmp	r6, r2
 801a88a:	eb77 0303 	sbcs.w	r3, r7, r3
 801a88e:	bfb4      	ite	lt
 801a890:	2301      	movlt	r3, #1
 801a892:	2300      	movge	r3, #0
 801a894:	6223      	str	r3, [r4, #32]
 801a896:	db1b      	blt.n	801a8d0 <localtime_r+0xc0>
 801a898:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 801a89c:	e01a      	b.n	801a8d4 <localtime_r+0xc4>
 801a89e:	2501      	movs	r5, #1
 801a8a0:	e7d6      	b.n	801a850 <localtime_r+0x40>
 801a8a2:	4630      	mov	r0, r6
 801a8a4:	f002 fc3c 	bl	801d120 <__tzcalc_limits>
 801a8a8:	2800      	cmp	r0, #0
 801a8aa:	d1e0      	bne.n	801a86e <localtime_r+0x5e>
 801a8ac:	f04f 33ff 	mov.w	r3, #4294967295
 801a8b0:	e004      	b.n	801a8bc <localtime_r+0xac>
 801a8b2:	4296      	cmp	r6, r2
 801a8b4:	eb77 0303 	sbcs.w	r3, r7, r3
 801a8b8:	da02      	bge.n	801a8c0 <localtime_r+0xb0>
 801a8ba:	2300      	movs	r3, #0
 801a8bc:	6223      	str	r3, [r4, #32]
 801a8be:	e7eb      	b.n	801a898 <localtime_r+0x88>
 801a8c0:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801a8c4:	4296      	cmp	r6, r2
 801a8c6:	eb77 0303 	sbcs.w	r3, r7, r3
 801a8ca:	daf6      	bge.n	801a8ba <localtime_r+0xaa>
 801a8cc:	2301      	movs	r3, #1
 801a8ce:	6223      	str	r3, [r4, #32]
 801a8d0:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 801a8d4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801a8d8:	203c      	movs	r0, #60	; 0x3c
 801a8da:	fb91 f6f3 	sdiv	r6, r1, r3
 801a8de:	fb03 1316 	mls	r3, r3, r6, r1
 801a8e2:	6861      	ldr	r1, [r4, #4]
 801a8e4:	fb93 f2f0 	sdiv	r2, r3, r0
 801a8e8:	fb00 3012 	mls	r0, r0, r2, r3
 801a8ec:	6823      	ldr	r3, [r4, #0]
 801a8ee:	1a89      	subs	r1, r1, r2
 801a8f0:	68a2      	ldr	r2, [r4, #8]
 801a8f2:	6061      	str	r1, [r4, #4]
 801a8f4:	1a1b      	subs	r3, r3, r0
 801a8f6:	1b92      	subs	r2, r2, r6
 801a8f8:	2b3b      	cmp	r3, #59	; 0x3b
 801a8fa:	6023      	str	r3, [r4, #0]
 801a8fc:	60a2      	str	r2, [r4, #8]
 801a8fe:	dd35      	ble.n	801a96c <localtime_r+0x15c>
 801a900:	3101      	adds	r1, #1
 801a902:	6061      	str	r1, [r4, #4]
 801a904:	3b3c      	subs	r3, #60	; 0x3c
 801a906:	6023      	str	r3, [r4, #0]
 801a908:	6863      	ldr	r3, [r4, #4]
 801a90a:	2b3b      	cmp	r3, #59	; 0x3b
 801a90c:	dd34      	ble.n	801a978 <localtime_r+0x168>
 801a90e:	3201      	adds	r2, #1
 801a910:	60a2      	str	r2, [r4, #8]
 801a912:	3b3c      	subs	r3, #60	; 0x3c
 801a914:	6063      	str	r3, [r4, #4]
 801a916:	68a3      	ldr	r3, [r4, #8]
 801a918:	2b17      	cmp	r3, #23
 801a91a:	dd33      	ble.n	801a984 <localtime_r+0x174>
 801a91c:	69e2      	ldr	r2, [r4, #28]
 801a91e:	3201      	adds	r2, #1
 801a920:	61e2      	str	r2, [r4, #28]
 801a922:	69a2      	ldr	r2, [r4, #24]
 801a924:	3201      	adds	r2, #1
 801a926:	2a06      	cmp	r2, #6
 801a928:	bfc8      	it	gt
 801a92a:	2200      	movgt	r2, #0
 801a92c:	61a2      	str	r2, [r4, #24]
 801a92e:	68e2      	ldr	r2, [r4, #12]
 801a930:	3b18      	subs	r3, #24
 801a932:	3201      	adds	r2, #1
 801a934:	60a3      	str	r3, [r4, #8]
 801a936:	6923      	ldr	r3, [r4, #16]
 801a938:	60e2      	str	r2, [r4, #12]
 801a93a:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 801a93e:	428a      	cmp	r2, r1
 801a940:	dd0e      	ble.n	801a960 <localtime_r+0x150>
 801a942:	2b0b      	cmp	r3, #11
 801a944:	eba2 0201 	sub.w	r2, r2, r1
 801a948:	60e2      	str	r2, [r4, #12]
 801a94a:	f103 0201 	add.w	r2, r3, #1
 801a94e:	bf09      	itett	eq
 801a950:	6963      	ldreq	r3, [r4, #20]
 801a952:	6122      	strne	r2, [r4, #16]
 801a954:	2200      	moveq	r2, #0
 801a956:	3301      	addeq	r3, #1
 801a958:	bf02      	ittt	eq
 801a95a:	6122      	streq	r2, [r4, #16]
 801a95c:	6163      	streq	r3, [r4, #20]
 801a95e:	61e2      	streq	r2, [r4, #28]
 801a960:	f002 fc8c 	bl	801d27c <__tz_unlock>
 801a964:	4620      	mov	r0, r4
 801a966:	b002      	add	sp, #8
 801a968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a96c:	2b00      	cmp	r3, #0
 801a96e:	dacb      	bge.n	801a908 <localtime_r+0xf8>
 801a970:	3901      	subs	r1, #1
 801a972:	6061      	str	r1, [r4, #4]
 801a974:	333c      	adds	r3, #60	; 0x3c
 801a976:	e7c6      	b.n	801a906 <localtime_r+0xf6>
 801a978:	2b00      	cmp	r3, #0
 801a97a:	dacc      	bge.n	801a916 <localtime_r+0x106>
 801a97c:	3a01      	subs	r2, #1
 801a97e:	60a2      	str	r2, [r4, #8]
 801a980:	333c      	adds	r3, #60	; 0x3c
 801a982:	e7c7      	b.n	801a914 <localtime_r+0x104>
 801a984:	2b00      	cmp	r3, #0
 801a986:	daeb      	bge.n	801a960 <localtime_r+0x150>
 801a988:	69e2      	ldr	r2, [r4, #28]
 801a98a:	3a01      	subs	r2, #1
 801a98c:	61e2      	str	r2, [r4, #28]
 801a98e:	69a2      	ldr	r2, [r4, #24]
 801a990:	3a01      	subs	r2, #1
 801a992:	bf48      	it	mi
 801a994:	2206      	movmi	r2, #6
 801a996:	61a2      	str	r2, [r4, #24]
 801a998:	68e2      	ldr	r2, [r4, #12]
 801a99a:	3318      	adds	r3, #24
 801a99c:	3a01      	subs	r2, #1
 801a99e:	60e2      	str	r2, [r4, #12]
 801a9a0:	60a3      	str	r3, [r4, #8]
 801a9a2:	2a00      	cmp	r2, #0
 801a9a4:	d1dc      	bne.n	801a960 <localtime_r+0x150>
 801a9a6:	6923      	ldr	r3, [r4, #16]
 801a9a8:	3b01      	subs	r3, #1
 801a9aa:	d405      	bmi.n	801a9b8 <localtime_r+0x1a8>
 801a9ac:	6123      	str	r3, [r4, #16]
 801a9ae:	6923      	ldr	r3, [r4, #16]
 801a9b0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801a9b4:	60e3      	str	r3, [r4, #12]
 801a9b6:	e7d3      	b.n	801a960 <localtime_r+0x150>
 801a9b8:	230b      	movs	r3, #11
 801a9ba:	6123      	str	r3, [r4, #16]
 801a9bc:	6963      	ldr	r3, [r4, #20]
 801a9be:	1e5a      	subs	r2, r3, #1
 801a9c0:	6162      	str	r2, [r4, #20]
 801a9c2:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 801a9c6:	0793      	lsls	r3, r2, #30
 801a9c8:	d105      	bne.n	801a9d6 <localtime_r+0x1c6>
 801a9ca:	2164      	movs	r1, #100	; 0x64
 801a9cc:	fb92 f3f1 	sdiv	r3, r2, r1
 801a9d0:	fb01 2313 	mls	r3, r1, r3, r2
 801a9d4:	b963      	cbnz	r3, 801a9f0 <localtime_r+0x1e0>
 801a9d6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801a9da:	fb92 f3f1 	sdiv	r3, r2, r1
 801a9de:	fb01 2313 	mls	r3, r1, r3, r2
 801a9e2:	fab3 f383 	clz	r3, r3
 801a9e6:	095b      	lsrs	r3, r3, #5
 801a9e8:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 801a9ec:	61e3      	str	r3, [r4, #28]
 801a9ee:	e7de      	b.n	801a9ae <localtime_r+0x19e>
 801a9f0:	2301      	movs	r3, #1
 801a9f2:	e7f9      	b.n	801a9e8 <localtime_r+0x1d8>
 801a9f4:	08022d78 	.word	0x08022d78
 801a9f8:	20008634 	.word	0x20008634

0801a9fc <__retarget_lock_init_recursive>:
 801a9fc:	4770      	bx	lr

0801a9fe <__retarget_lock_acquire>:
 801a9fe:	4770      	bx	lr

0801aa00 <__retarget_lock_acquire_recursive>:
 801aa00:	4770      	bx	lr

0801aa02 <__retarget_lock_release>:
 801aa02:	4770      	bx	lr

0801aa04 <__retarget_lock_release_recursive>:
 801aa04:	4770      	bx	lr
	...

0801aa08 <malloc>:
 801aa08:	4b02      	ldr	r3, [pc, #8]	; (801aa14 <malloc+0xc>)
 801aa0a:	4601      	mov	r1, r0
 801aa0c:	6818      	ldr	r0, [r3, #0]
 801aa0e:	f000 bb09 	b.w	801b024 <_malloc_r>
 801aa12:	bf00      	nop
 801aa14:	200000f8 	.word	0x200000f8

0801aa18 <free>:
 801aa18:	4b02      	ldr	r3, [pc, #8]	; (801aa24 <free+0xc>)
 801aa1a:	4601      	mov	r1, r0
 801aa1c:	6818      	ldr	r0, [r3, #0]
 801aa1e:	f000 bab1 	b.w	801af84 <_free_r>
 801aa22:	bf00      	nop
 801aa24:	200000f8 	.word	0x200000f8

0801aa28 <memcpy>:
 801aa28:	440a      	add	r2, r1
 801aa2a:	4291      	cmp	r1, r2
 801aa2c:	f100 33ff 	add.w	r3, r0, #4294967295
 801aa30:	d100      	bne.n	801aa34 <memcpy+0xc>
 801aa32:	4770      	bx	lr
 801aa34:	b510      	push	{r4, lr}
 801aa36:	f811 4b01 	ldrb.w	r4, [r1], #1
 801aa3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801aa3e:	4291      	cmp	r1, r2
 801aa40:	d1f9      	bne.n	801aa36 <memcpy+0xe>
 801aa42:	bd10      	pop	{r4, pc}

0801aa44 <memmove>:
 801aa44:	4288      	cmp	r0, r1
 801aa46:	b510      	push	{r4, lr}
 801aa48:	eb01 0402 	add.w	r4, r1, r2
 801aa4c:	d902      	bls.n	801aa54 <memmove+0x10>
 801aa4e:	4284      	cmp	r4, r0
 801aa50:	4623      	mov	r3, r4
 801aa52:	d807      	bhi.n	801aa64 <memmove+0x20>
 801aa54:	1e43      	subs	r3, r0, #1
 801aa56:	42a1      	cmp	r1, r4
 801aa58:	d008      	beq.n	801aa6c <memmove+0x28>
 801aa5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801aa5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801aa62:	e7f8      	b.n	801aa56 <memmove+0x12>
 801aa64:	4402      	add	r2, r0
 801aa66:	4601      	mov	r1, r0
 801aa68:	428a      	cmp	r2, r1
 801aa6a:	d100      	bne.n	801aa6e <memmove+0x2a>
 801aa6c:	bd10      	pop	{r4, pc}
 801aa6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801aa72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801aa76:	e7f7      	b.n	801aa68 <memmove+0x24>

0801aa78 <memset>:
 801aa78:	4402      	add	r2, r0
 801aa7a:	4603      	mov	r3, r0
 801aa7c:	4293      	cmp	r3, r2
 801aa7e:	d100      	bne.n	801aa82 <memset+0xa>
 801aa80:	4770      	bx	lr
 801aa82:	f803 1b01 	strb.w	r1, [r3], #1
 801aa86:	e7f9      	b.n	801aa7c <memset+0x4>

0801aa88 <validate_structure>:
 801aa88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801aa8a:	6801      	ldr	r1, [r0, #0]
 801aa8c:	293b      	cmp	r1, #59	; 0x3b
 801aa8e:	4604      	mov	r4, r0
 801aa90:	d911      	bls.n	801aab6 <validate_structure+0x2e>
 801aa92:	223c      	movs	r2, #60	; 0x3c
 801aa94:	4668      	mov	r0, sp
 801aa96:	f002 feb3 	bl	801d800 <div>
 801aa9a:	9a01      	ldr	r2, [sp, #4]
 801aa9c:	6863      	ldr	r3, [r4, #4]
 801aa9e:	9900      	ldr	r1, [sp, #0]
 801aaa0:	2a00      	cmp	r2, #0
 801aaa2:	440b      	add	r3, r1
 801aaa4:	6063      	str	r3, [r4, #4]
 801aaa6:	bfbb      	ittet	lt
 801aaa8:	323c      	addlt	r2, #60	; 0x3c
 801aaaa:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801aaae:	6022      	strge	r2, [r4, #0]
 801aab0:	6022      	strlt	r2, [r4, #0]
 801aab2:	bfb8      	it	lt
 801aab4:	6063      	strlt	r3, [r4, #4]
 801aab6:	6861      	ldr	r1, [r4, #4]
 801aab8:	293b      	cmp	r1, #59	; 0x3b
 801aaba:	d911      	bls.n	801aae0 <validate_structure+0x58>
 801aabc:	223c      	movs	r2, #60	; 0x3c
 801aabe:	4668      	mov	r0, sp
 801aac0:	f002 fe9e 	bl	801d800 <div>
 801aac4:	9a01      	ldr	r2, [sp, #4]
 801aac6:	68a3      	ldr	r3, [r4, #8]
 801aac8:	9900      	ldr	r1, [sp, #0]
 801aaca:	2a00      	cmp	r2, #0
 801aacc:	440b      	add	r3, r1
 801aace:	60a3      	str	r3, [r4, #8]
 801aad0:	bfbb      	ittet	lt
 801aad2:	323c      	addlt	r2, #60	; 0x3c
 801aad4:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801aad8:	6062      	strge	r2, [r4, #4]
 801aada:	6062      	strlt	r2, [r4, #4]
 801aadc:	bfb8      	it	lt
 801aade:	60a3      	strlt	r3, [r4, #8]
 801aae0:	68a1      	ldr	r1, [r4, #8]
 801aae2:	2917      	cmp	r1, #23
 801aae4:	d911      	bls.n	801ab0a <validate_structure+0x82>
 801aae6:	2218      	movs	r2, #24
 801aae8:	4668      	mov	r0, sp
 801aaea:	f002 fe89 	bl	801d800 <div>
 801aaee:	9a01      	ldr	r2, [sp, #4]
 801aaf0:	68e3      	ldr	r3, [r4, #12]
 801aaf2:	9900      	ldr	r1, [sp, #0]
 801aaf4:	2a00      	cmp	r2, #0
 801aaf6:	440b      	add	r3, r1
 801aaf8:	60e3      	str	r3, [r4, #12]
 801aafa:	bfbb      	ittet	lt
 801aafc:	3218      	addlt	r2, #24
 801aafe:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801ab02:	60a2      	strge	r2, [r4, #8]
 801ab04:	60a2      	strlt	r2, [r4, #8]
 801ab06:	bfb8      	it	lt
 801ab08:	60e3      	strlt	r3, [r4, #12]
 801ab0a:	6921      	ldr	r1, [r4, #16]
 801ab0c:	290b      	cmp	r1, #11
 801ab0e:	d911      	bls.n	801ab34 <validate_structure+0xac>
 801ab10:	220c      	movs	r2, #12
 801ab12:	4668      	mov	r0, sp
 801ab14:	f002 fe74 	bl	801d800 <div>
 801ab18:	9a01      	ldr	r2, [sp, #4]
 801ab1a:	6963      	ldr	r3, [r4, #20]
 801ab1c:	9900      	ldr	r1, [sp, #0]
 801ab1e:	2a00      	cmp	r2, #0
 801ab20:	440b      	add	r3, r1
 801ab22:	6163      	str	r3, [r4, #20]
 801ab24:	bfbb      	ittet	lt
 801ab26:	320c      	addlt	r2, #12
 801ab28:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801ab2c:	6122      	strge	r2, [r4, #16]
 801ab2e:	6122      	strlt	r2, [r4, #16]
 801ab30:	bfb8      	it	lt
 801ab32:	6163      	strlt	r3, [r4, #20]
 801ab34:	6963      	ldr	r3, [r4, #20]
 801ab36:	0799      	lsls	r1, r3, #30
 801ab38:	d120      	bne.n	801ab7c <validate_structure+0xf4>
 801ab3a:	2164      	movs	r1, #100	; 0x64
 801ab3c:	fb93 f2f1 	sdiv	r2, r3, r1
 801ab40:	fb01 3212 	mls	r2, r1, r2, r3
 801ab44:	b9e2      	cbnz	r2, 801ab80 <validate_structure+0xf8>
 801ab46:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 801ab4a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801ab4e:	fb93 f2f1 	sdiv	r2, r3, r1
 801ab52:	fb01 3312 	mls	r3, r1, r2, r3
 801ab56:	2b00      	cmp	r3, #0
 801ab58:	bf14      	ite	ne
 801ab5a:	231c      	movne	r3, #28
 801ab5c:	231d      	moveq	r3, #29
 801ab5e:	68e2      	ldr	r2, [r4, #12]
 801ab60:	2a00      	cmp	r2, #0
 801ab62:	dc0f      	bgt.n	801ab84 <validate_structure+0xfc>
 801ab64:	4f33      	ldr	r7, [pc, #204]	; (801ac34 <validate_structure+0x1ac>)
 801ab66:	260b      	movs	r6, #11
 801ab68:	2064      	movs	r0, #100	; 0x64
 801ab6a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 801ab6e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801ab72:	f1bc 0f00 	cmp.w	ip, #0
 801ab76:	dd31      	ble.n	801abdc <validate_structure+0x154>
 801ab78:	b003      	add	sp, #12
 801ab7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ab7c:	231c      	movs	r3, #28
 801ab7e:	e7ee      	b.n	801ab5e <validate_structure+0xd6>
 801ab80:	231d      	movs	r3, #29
 801ab82:	e7ec      	b.n	801ab5e <validate_structure+0xd6>
 801ab84:	4f2b      	ldr	r7, [pc, #172]	; (801ac34 <validate_structure+0x1ac>)
 801ab86:	f04f 0c00 	mov.w	ip, #0
 801ab8a:	2564      	movs	r5, #100	; 0x64
 801ab8c:	f44f 76c8 	mov.w	r6, #400	; 0x190
 801ab90:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 801ab94:	2a01      	cmp	r2, #1
 801ab96:	bf14      	ite	ne
 801ab98:	f857 0022 	ldrne.w	r0, [r7, r2, lsl #2]
 801ab9c:	4618      	moveq	r0, r3
 801ab9e:	4281      	cmp	r1, r0
 801aba0:	ddea      	ble.n	801ab78 <validate_structure+0xf0>
 801aba2:	3201      	adds	r2, #1
 801aba4:	1a09      	subs	r1, r1, r0
 801aba6:	2a0c      	cmp	r2, #12
 801aba8:	60e1      	str	r1, [r4, #12]
 801abaa:	6122      	str	r2, [r4, #16]
 801abac:	d1f0      	bne.n	801ab90 <validate_structure+0x108>
 801abae:	6963      	ldr	r3, [r4, #20]
 801abb0:	1c5a      	adds	r2, r3, #1
 801abb2:	0791      	lsls	r1, r2, #30
 801abb4:	e9c4 c204 	strd	ip, r2, [r4, #16]
 801abb8:	d137      	bne.n	801ac2a <validate_structure+0x1a2>
 801abba:	fb92 f1f5 	sdiv	r1, r2, r5
 801abbe:	fb05 2211 	mls	r2, r5, r1, r2
 801abc2:	2a00      	cmp	r2, #0
 801abc4:	d133      	bne.n	801ac2e <validate_structure+0x1a6>
 801abc6:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 801abca:	fb93 f2f6 	sdiv	r2, r3, r6
 801abce:	fb06 3312 	mls	r3, r6, r2, r3
 801abd2:	2b00      	cmp	r3, #0
 801abd4:	bf14      	ite	ne
 801abd6:	231c      	movne	r3, #28
 801abd8:	231d      	moveq	r3, #29
 801abda:	e7d9      	b.n	801ab90 <validate_structure+0x108>
 801abdc:	6921      	ldr	r1, [r4, #16]
 801abde:	3901      	subs	r1, #1
 801abe0:	6121      	str	r1, [r4, #16]
 801abe2:	3101      	adds	r1, #1
 801abe4:	d114      	bne.n	801ac10 <validate_structure+0x188>
 801abe6:	6963      	ldr	r3, [r4, #20]
 801abe8:	1e59      	subs	r1, r3, #1
 801abea:	078a      	lsls	r2, r1, #30
 801abec:	e9c4 6104 	strd	r6, r1, [r4, #16]
 801abf0:	d117      	bne.n	801ac22 <validate_structure+0x19a>
 801abf2:	fb91 f2f0 	sdiv	r2, r1, r0
 801abf6:	fb00 1112 	mls	r1, r0, r2, r1
 801abfa:	b9a1      	cbnz	r1, 801ac26 <validate_structure+0x19e>
 801abfc:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 801ac00:	fb93 f2f5 	sdiv	r2, r3, r5
 801ac04:	fb05 3312 	mls	r3, r5, r2, r3
 801ac08:	2b00      	cmp	r3, #0
 801ac0a:	bf14      	ite	ne
 801ac0c:	231c      	movne	r3, #28
 801ac0e:	231d      	moveq	r3, #29
 801ac10:	6922      	ldr	r2, [r4, #16]
 801ac12:	2a01      	cmp	r2, #1
 801ac14:	bf14      	ite	ne
 801ac16:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 801ac1a:	461a      	moveq	r2, r3
 801ac1c:	4462      	add	r2, ip
 801ac1e:	60e2      	str	r2, [r4, #12]
 801ac20:	e7a5      	b.n	801ab6e <validate_structure+0xe6>
 801ac22:	231c      	movs	r3, #28
 801ac24:	e7f4      	b.n	801ac10 <validate_structure+0x188>
 801ac26:	231d      	movs	r3, #29
 801ac28:	e7f2      	b.n	801ac10 <validate_structure+0x188>
 801ac2a:	231c      	movs	r3, #28
 801ac2c:	e7b0      	b.n	801ab90 <validate_structure+0x108>
 801ac2e:	231d      	movs	r3, #29
 801ac30:	e7ae      	b.n	801ab90 <validate_structure+0x108>
 801ac32:	bf00      	nop
 801ac34:	08022d18 	.word	0x08022d18

0801ac38 <mktime>:
 801ac38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac3c:	b08b      	sub	sp, #44	; 0x2c
 801ac3e:	4605      	mov	r5, r0
 801ac40:	f004 f8f0 	bl	801ee24 <__gettzinfo>
 801ac44:	4607      	mov	r7, r0
 801ac46:	4628      	mov	r0, r5
 801ac48:	f7ff ff1e 	bl	801aa88 <validate_structure>
 801ac4c:	e9d5 2300 	ldrd	r2, r3, [r5]
 801ac50:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 801ac54:	68a8      	ldr	r0, [r5, #8]
 801ac56:	696e      	ldr	r6, [r5, #20]
 801ac58:	fb0a 2303 	mla	r3, sl, r3, r2
 801ac5c:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
 801ac60:	fb0a 3a00 	mla	sl, sl, r0, r3
 801ac64:	e9d5 4303 	ldrd	r4, r3, [r5, #12]
 801ac68:	4ac3      	ldr	r2, [pc, #780]	; (801af78 <mktime+0x340>)
 801ac6a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801ac6e:	3c01      	subs	r4, #1
 801ac70:	2b01      	cmp	r3, #1
 801ac72:	4414      	add	r4, r2
 801ac74:	dd11      	ble.n	801ac9a <mktime+0x62>
 801ac76:	07b1      	lsls	r1, r6, #30
 801ac78:	d10f      	bne.n	801ac9a <mktime+0x62>
 801ac7a:	2264      	movs	r2, #100	; 0x64
 801ac7c:	fb96 f3f2 	sdiv	r3, r6, r2
 801ac80:	fb02 6313 	mls	r3, r2, r3, r6
 801ac84:	b943      	cbnz	r3, 801ac98 <mktime+0x60>
 801ac86:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 801ac8a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801ac8e:	fb91 f3f2 	sdiv	r3, r1, r2
 801ac92:	fb02 1313 	mls	r3, r2, r3, r1
 801ac96:	b903      	cbnz	r3, 801ac9a <mktime+0x62>
 801ac98:	3401      	adds	r4, #1
 801ac9a:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 801ac9e:	3310      	adds	r3, #16
 801aca0:	f644 6220 	movw	r2, #20000	; 0x4e20
 801aca4:	4293      	cmp	r3, r2
 801aca6:	61ec      	str	r4, [r5, #28]
 801aca8:	f200 8161 	bhi.w	801af6e <mktime+0x336>
 801acac:	2e46      	cmp	r6, #70	; 0x46
 801acae:	dd77      	ble.n	801ada0 <mktime+0x168>
 801acb0:	2346      	movs	r3, #70	; 0x46
 801acb2:	f240 1e6d 	movw	lr, #365	; 0x16d
 801acb6:	2164      	movs	r1, #100	; 0x64
 801acb8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801acbc:	079a      	lsls	r2, r3, #30
 801acbe:	d169      	bne.n	801ad94 <mktime+0x15c>
 801acc0:	fb93 f2f1 	sdiv	r2, r3, r1
 801acc4:	fb01 3212 	mls	r2, r1, r2, r3
 801acc8:	2a00      	cmp	r2, #0
 801acca:	d166      	bne.n	801ad9a <mktime+0x162>
 801accc:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 801acd0:	fb9c f2f0 	sdiv	r2, ip, r0
 801acd4:	fb00 c212 	mls	r2, r0, r2, ip
 801acd8:	2a00      	cmp	r2, #0
 801acda:	bf14      	ite	ne
 801acdc:	4672      	movne	r2, lr
 801acde:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801ace2:	3301      	adds	r3, #1
 801ace4:	429e      	cmp	r6, r3
 801ace6:	4414      	add	r4, r2
 801ace8:	d1e8      	bne.n	801acbc <mktime+0x84>
 801acea:	4ba4      	ldr	r3, [pc, #656]	; (801af7c <mktime+0x344>)
 801acec:	ea4f 7bea 	mov.w	fp, sl, asr #31
 801acf0:	fbc3 ab04 	smlal	sl, fp, r3, r4
 801acf4:	f002 fabc 	bl	801d270 <__tz_lock>
 801acf8:	f002 fac6 	bl	801d288 <_tzset_unlocked>
 801acfc:	4ba0      	ldr	r3, [pc, #640]	; (801af80 <mktime+0x348>)
 801acfe:	f8d3 9000 	ldr.w	r9, [r3]
 801ad02:	f1b9 0f00 	cmp.w	r9, #0
 801ad06:	d03f      	beq.n	801ad88 <mktime+0x150>
 801ad08:	f8d5 9020 	ldr.w	r9, [r5, #32]
 801ad0c:	6968      	ldr	r0, [r5, #20]
 801ad0e:	687b      	ldr	r3, [r7, #4]
 801ad10:	f1b9 0f01 	cmp.w	r9, #1
 801ad14:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801ad18:	46c8      	mov	r8, r9
 801ad1a:	bfa8      	it	ge
 801ad1c:	f04f 0801 	movge.w	r8, #1
 801ad20:	4283      	cmp	r3, r0
 801ad22:	d17f      	bne.n	801ae24 <mktime+0x1ec>
 801ad24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ad26:	4619      	mov	r1, r3
 801ad28:	17da      	asrs	r2, r3, #31
 801ad2a:	e9cd 1200 	strd	r1, r2, [sp]
 801ad2e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 801ad32:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801ad36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ad3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ad3c:	1a80      	subs	r0, r0, r2
 801ad3e:	eb61 71e2 	sbc.w	r1, r1, r2, asr #31
 801ad42:	4582      	cmp	sl, r0
 801ad44:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801ad48:	eb7b 0101 	sbcs.w	r1, fp, r1
 801ad4c:	da71      	bge.n	801ae32 <mktime+0x1fa>
 801ad4e:	9800      	ldr	r0, [sp, #0]
 801ad50:	6a39      	ldr	r1, [r7, #32]
 801ad52:	1a09      	subs	r1, r1, r0
 801ad54:	9104      	str	r1, [sp, #16]
 801ad56:	9801      	ldr	r0, [sp, #4]
 801ad58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ad5a:	eb61 0100 	sbc.w	r1, r1, r0
 801ad5e:	9105      	str	r1, [sp, #20]
 801ad60:	6839      	ldr	r1, [r7, #0]
 801ad62:	2900      	cmp	r1, #0
 801ad64:	d075      	beq.n	801ae52 <mktime+0x21a>
 801ad66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ad6a:	4582      	cmp	sl, r0
 801ad6c:	eb7b 0101 	sbcs.w	r1, fp, r1
 801ad70:	db05      	blt.n	801ad7e <mktime+0x146>
 801ad72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ad76:	4582      	cmp	sl, r0
 801ad78:	eb7b 0101 	sbcs.w	r1, fp, r1
 801ad7c:	db6f      	blt.n	801ae5e <mktime+0x226>
 801ad7e:	f1b9 0f00 	cmp.w	r9, #0
 801ad82:	f04f 0900 	mov.w	r9, #0
 801ad86:	da6f      	bge.n	801ae68 <mktime+0x230>
 801ad88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad8a:	eb1a 0a03 	adds.w	sl, sl, r3
 801ad8e:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801ad92:	e0ae      	b.n	801aef2 <mktime+0x2ba>
 801ad94:	f240 126d 	movw	r2, #365	; 0x16d
 801ad98:	e7a3      	b.n	801ace2 <mktime+0xaa>
 801ad9a:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801ad9e:	e7a0      	b.n	801ace2 <mktime+0xaa>
 801ada0:	d0a3      	beq.n	801acea <mktime+0xb2>
 801ada2:	2345      	movs	r3, #69	; 0x45
 801ada4:	f240 1e6d 	movw	lr, #365	; 0x16d
 801ada8:	2164      	movs	r1, #100	; 0x64
 801adaa:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801adae:	e012      	b.n	801add6 <mktime+0x19e>
 801adb0:	bb62      	cbnz	r2, 801ae0c <mktime+0x1d4>
 801adb2:	fb93 f2f1 	sdiv	r2, r3, r1
 801adb6:	fb01 3212 	mls	r2, r1, r2, r3
 801adba:	bb52      	cbnz	r2, 801ae12 <mktime+0x1da>
 801adbc:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 801adc0:	fb9c f2f0 	sdiv	r2, ip, r0
 801adc4:	fb00 c212 	mls	r2, r0, r2, ip
 801adc8:	2a00      	cmp	r2, #0
 801adca:	bf14      	ite	ne
 801adcc:	4672      	movne	r2, lr
 801adce:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801add2:	1aa4      	subs	r4, r4, r2
 801add4:	3b01      	subs	r3, #1
 801add6:	429e      	cmp	r6, r3
 801add8:	f003 0203 	and.w	r2, r3, #3
 801addc:	dbe8      	blt.n	801adb0 <mktime+0x178>
 801adde:	b9da      	cbnz	r2, 801ae18 <mktime+0x1e0>
 801ade0:	2264      	movs	r2, #100	; 0x64
 801ade2:	fb96 f3f2 	sdiv	r3, r6, r2
 801ade6:	fb02 6313 	mls	r3, r2, r3, r6
 801adea:	b9c3      	cbnz	r3, 801ae1e <mktime+0x1e6>
 801adec:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 801adf0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801adf4:	fb91 f3f2 	sdiv	r3, r1, r2
 801adf8:	fb02 1313 	mls	r3, r2, r3, r1
 801adfc:	2b00      	cmp	r3, #0
 801adfe:	f240 136d 	movw	r3, #365	; 0x16d
 801ae02:	bf08      	it	eq
 801ae04:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 801ae08:	1ae4      	subs	r4, r4, r3
 801ae0a:	e76e      	b.n	801acea <mktime+0xb2>
 801ae0c:	f240 126d 	movw	r2, #365	; 0x16d
 801ae10:	e7df      	b.n	801add2 <mktime+0x19a>
 801ae12:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801ae16:	e7dc      	b.n	801add2 <mktime+0x19a>
 801ae18:	f240 136d 	movw	r3, #365	; 0x16d
 801ae1c:	e7f4      	b.n	801ae08 <mktime+0x1d0>
 801ae1e:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 801ae22:	e7f1      	b.n	801ae08 <mktime+0x1d0>
 801ae24:	f002 f97c 	bl	801d120 <__tzcalc_limits>
 801ae28:	2800      	cmp	r0, #0
 801ae2a:	f47f af7b 	bne.w	801ad24 <mktime+0xec>
 801ae2e:	46c1      	mov	r9, r8
 801ae30:	e054      	b.n	801aedc <mktime+0x2a4>
 801ae32:	9800      	ldr	r0, [sp, #0]
 801ae34:	9902      	ldr	r1, [sp, #8]
 801ae36:	1a09      	subs	r1, r1, r0
 801ae38:	9108      	str	r1, [sp, #32]
 801ae3a:	9801      	ldr	r0, [sp, #4]
 801ae3c:	9903      	ldr	r1, [sp, #12]
 801ae3e:	eb61 0100 	sbc.w	r1, r1, r0
 801ae42:	9109      	str	r1, [sp, #36]	; 0x24
 801ae44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801ae48:	4582      	cmp	sl, r0
 801ae4a:	eb7b 0101 	sbcs.w	r1, fp, r1
 801ae4e:	dbee      	blt.n	801ae2e <mktime+0x1f6>
 801ae50:	e77d      	b.n	801ad4e <mktime+0x116>
 801ae52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ae56:	4582      	cmp	sl, r0
 801ae58:	eb7b 0101 	sbcs.w	r1, fp, r1
 801ae5c:	db89      	blt.n	801ad72 <mktime+0x13a>
 801ae5e:	f1b9 0f00 	cmp.w	r9, #0
 801ae62:	db3f      	blt.n	801aee4 <mktime+0x2ac>
 801ae64:	f04f 0901 	mov.w	r9, #1
 801ae68:	ea88 0809 	eor.w	r8, r8, r9
 801ae6c:	f1b8 0f01 	cmp.w	r8, #1
 801ae70:	d134      	bne.n	801aedc <mktime+0x2a4>
 801ae72:	f1b9 0f00 	cmp.w	r9, #0
 801ae76:	d04f      	beq.n	801af18 <mktime+0x2e0>
 801ae78:	1ad3      	subs	r3, r2, r3
 801ae7a:	682a      	ldr	r2, [r5, #0]
 801ae7c:	f8d5 800c 	ldr.w	r8, [r5, #12]
 801ae80:	441a      	add	r2, r3
 801ae82:	eb1a 0a03 	adds.w	sl, sl, r3
 801ae86:	602a      	str	r2, [r5, #0]
 801ae88:	4628      	mov	r0, r5
 801ae8a:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801ae8e:	f7ff fdfb 	bl	801aa88 <validate_structure>
 801ae92:	68ea      	ldr	r2, [r5, #12]
 801ae94:	ebb2 0208 	subs.w	r2, r2, r8
 801ae98:	d020      	beq.n	801aedc <mktime+0x2a4>
 801ae9a:	2a01      	cmp	r2, #1
 801ae9c:	dc3e      	bgt.n	801af1c <mktime+0x2e4>
 801ae9e:	1c90      	adds	r0, r2, #2
 801aea0:	bfd8      	it	le
 801aea2:	2201      	movle	r2, #1
 801aea4:	69eb      	ldr	r3, [r5, #28]
 801aea6:	18d3      	adds	r3, r2, r3
 801aea8:	4414      	add	r4, r2
 801aeaa:	d540      	bpl.n	801af2e <mktime+0x2f6>
 801aeac:	1e72      	subs	r2, r6, #1
 801aeae:	0791      	lsls	r1, r2, #30
 801aeb0:	d137      	bne.n	801af22 <mktime+0x2ea>
 801aeb2:	2164      	movs	r1, #100	; 0x64
 801aeb4:	fb92 f3f1 	sdiv	r3, r2, r1
 801aeb8:	fb01 2313 	mls	r3, r1, r3, r2
 801aebc:	bba3      	cbnz	r3, 801af28 <mktime+0x2f0>
 801aebe:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 801aec2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801aec6:	fb96 f3f2 	sdiv	r3, r6, r2
 801aeca:	fb02 6613 	mls	r6, r2, r3, r6
 801aece:	2e00      	cmp	r6, #0
 801aed0:	f240 136d 	movw	r3, #365	; 0x16d
 801aed4:	bf18      	it	ne
 801aed6:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 801aeda:	61eb      	str	r3, [r5, #28]
 801aedc:	f1b9 0f01 	cmp.w	r9, #1
 801aee0:	f47f af52 	bne.w	801ad88 <mktime+0x150>
 801aee4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aee6:	eb1a 0a03 	adds.w	sl, sl, r3
 801aeea:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801aeee:	f04f 0901 	mov.w	r9, #1
 801aef2:	f002 f9c3 	bl	801d27c <__tz_unlock>
 801aef6:	3404      	adds	r4, #4
 801aef8:	2307      	movs	r3, #7
 801aefa:	fb94 f3f3 	sdiv	r3, r4, r3
 801aefe:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801af02:	1ae4      	subs	r4, r4, r3
 801af04:	bf48      	it	mi
 801af06:	3407      	addmi	r4, #7
 801af08:	f8c5 9020 	str.w	r9, [r5, #32]
 801af0c:	61ac      	str	r4, [r5, #24]
 801af0e:	4650      	mov	r0, sl
 801af10:	4659      	mov	r1, fp
 801af12:	b00b      	add	sp, #44	; 0x2c
 801af14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af18:	1a9b      	subs	r3, r3, r2
 801af1a:	e7ae      	b.n	801ae7a <mktime+0x242>
 801af1c:	f04f 32ff 	mov.w	r2, #4294967295
 801af20:	e7c0      	b.n	801aea4 <mktime+0x26c>
 801af22:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 801af26:	e7d8      	b.n	801aeda <mktime+0x2a2>
 801af28:	f240 136d 	movw	r3, #365	; 0x16d
 801af2c:	e7d5      	b.n	801aeda <mktime+0x2a2>
 801af2e:	07b2      	lsls	r2, r6, #30
 801af30:	d117      	bne.n	801af62 <mktime+0x32a>
 801af32:	2164      	movs	r1, #100	; 0x64
 801af34:	fb96 f2f1 	sdiv	r2, r6, r1
 801af38:	fb01 6212 	mls	r2, r1, r2, r6
 801af3c:	b9a2      	cbnz	r2, 801af68 <mktime+0x330>
 801af3e:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 801af42:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801af46:	fb96 f2f1 	sdiv	r2, r6, r1
 801af4a:	fb01 6612 	mls	r6, r1, r2, r6
 801af4e:	2e00      	cmp	r6, #0
 801af50:	f240 126d 	movw	r2, #365	; 0x16d
 801af54:	bf08      	it	eq
 801af56:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801af5a:	4293      	cmp	r3, r2
 801af5c:	bfa8      	it	ge
 801af5e:	1a9b      	subge	r3, r3, r2
 801af60:	e7bb      	b.n	801aeda <mktime+0x2a2>
 801af62:	f240 126d 	movw	r2, #365	; 0x16d
 801af66:	e7f8      	b.n	801af5a <mktime+0x322>
 801af68:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801af6c:	e7f5      	b.n	801af5a <mktime+0x322>
 801af6e:	f04f 3aff 	mov.w	sl, #4294967295
 801af72:	f04f 3bff 	mov.w	fp, #4294967295
 801af76:	e7ca      	b.n	801af0e <mktime+0x2d6>
 801af78:	08022d48 	.word	0x08022d48
 801af7c:	00015180 	.word	0x00015180
 801af80:	20008634 	.word	0x20008634

0801af84 <_free_r>:
 801af84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801af86:	2900      	cmp	r1, #0
 801af88:	d048      	beq.n	801b01c <_free_r+0x98>
 801af8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801af8e:	9001      	str	r0, [sp, #4]
 801af90:	2b00      	cmp	r3, #0
 801af92:	f1a1 0404 	sub.w	r4, r1, #4
 801af96:	bfb8      	it	lt
 801af98:	18e4      	addlt	r4, r4, r3
 801af9a:	f004 f883 	bl	801f0a4 <__malloc_lock>
 801af9e:	4a20      	ldr	r2, [pc, #128]	; (801b020 <_free_r+0x9c>)
 801afa0:	9801      	ldr	r0, [sp, #4]
 801afa2:	6813      	ldr	r3, [r2, #0]
 801afa4:	4615      	mov	r5, r2
 801afa6:	b933      	cbnz	r3, 801afb6 <_free_r+0x32>
 801afa8:	6063      	str	r3, [r4, #4]
 801afaa:	6014      	str	r4, [r2, #0]
 801afac:	b003      	add	sp, #12
 801afae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801afb2:	f004 b87d 	b.w	801f0b0 <__malloc_unlock>
 801afb6:	42a3      	cmp	r3, r4
 801afb8:	d90b      	bls.n	801afd2 <_free_r+0x4e>
 801afba:	6821      	ldr	r1, [r4, #0]
 801afbc:	1862      	adds	r2, r4, r1
 801afbe:	4293      	cmp	r3, r2
 801afc0:	bf04      	itt	eq
 801afc2:	681a      	ldreq	r2, [r3, #0]
 801afc4:	685b      	ldreq	r3, [r3, #4]
 801afc6:	6063      	str	r3, [r4, #4]
 801afc8:	bf04      	itt	eq
 801afca:	1852      	addeq	r2, r2, r1
 801afcc:	6022      	streq	r2, [r4, #0]
 801afce:	602c      	str	r4, [r5, #0]
 801afd0:	e7ec      	b.n	801afac <_free_r+0x28>
 801afd2:	461a      	mov	r2, r3
 801afd4:	685b      	ldr	r3, [r3, #4]
 801afd6:	b10b      	cbz	r3, 801afdc <_free_r+0x58>
 801afd8:	42a3      	cmp	r3, r4
 801afda:	d9fa      	bls.n	801afd2 <_free_r+0x4e>
 801afdc:	6811      	ldr	r1, [r2, #0]
 801afde:	1855      	adds	r5, r2, r1
 801afe0:	42a5      	cmp	r5, r4
 801afe2:	d10b      	bne.n	801affc <_free_r+0x78>
 801afe4:	6824      	ldr	r4, [r4, #0]
 801afe6:	4421      	add	r1, r4
 801afe8:	1854      	adds	r4, r2, r1
 801afea:	42a3      	cmp	r3, r4
 801afec:	6011      	str	r1, [r2, #0]
 801afee:	d1dd      	bne.n	801afac <_free_r+0x28>
 801aff0:	681c      	ldr	r4, [r3, #0]
 801aff2:	685b      	ldr	r3, [r3, #4]
 801aff4:	6053      	str	r3, [r2, #4]
 801aff6:	4421      	add	r1, r4
 801aff8:	6011      	str	r1, [r2, #0]
 801affa:	e7d7      	b.n	801afac <_free_r+0x28>
 801affc:	d902      	bls.n	801b004 <_free_r+0x80>
 801affe:	230c      	movs	r3, #12
 801b000:	6003      	str	r3, [r0, #0]
 801b002:	e7d3      	b.n	801afac <_free_r+0x28>
 801b004:	6825      	ldr	r5, [r4, #0]
 801b006:	1961      	adds	r1, r4, r5
 801b008:	428b      	cmp	r3, r1
 801b00a:	bf04      	itt	eq
 801b00c:	6819      	ldreq	r1, [r3, #0]
 801b00e:	685b      	ldreq	r3, [r3, #4]
 801b010:	6063      	str	r3, [r4, #4]
 801b012:	bf04      	itt	eq
 801b014:	1949      	addeq	r1, r1, r5
 801b016:	6021      	streq	r1, [r4, #0]
 801b018:	6054      	str	r4, [r2, #4]
 801b01a:	e7c7      	b.n	801afac <_free_r+0x28>
 801b01c:	b003      	add	sp, #12
 801b01e:	bd30      	pop	{r4, r5, pc}
 801b020:	20008610 	.word	0x20008610

0801b024 <_malloc_r>:
 801b024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b026:	1ccd      	adds	r5, r1, #3
 801b028:	f025 0503 	bic.w	r5, r5, #3
 801b02c:	3508      	adds	r5, #8
 801b02e:	2d0c      	cmp	r5, #12
 801b030:	bf38      	it	cc
 801b032:	250c      	movcc	r5, #12
 801b034:	2d00      	cmp	r5, #0
 801b036:	4606      	mov	r6, r0
 801b038:	db01      	blt.n	801b03e <_malloc_r+0x1a>
 801b03a:	42a9      	cmp	r1, r5
 801b03c:	d903      	bls.n	801b046 <_malloc_r+0x22>
 801b03e:	230c      	movs	r3, #12
 801b040:	6033      	str	r3, [r6, #0]
 801b042:	2000      	movs	r0, #0
 801b044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b046:	f004 f82d 	bl	801f0a4 <__malloc_lock>
 801b04a:	4921      	ldr	r1, [pc, #132]	; (801b0d0 <_malloc_r+0xac>)
 801b04c:	680a      	ldr	r2, [r1, #0]
 801b04e:	4614      	mov	r4, r2
 801b050:	b99c      	cbnz	r4, 801b07a <_malloc_r+0x56>
 801b052:	4f20      	ldr	r7, [pc, #128]	; (801b0d4 <_malloc_r+0xb0>)
 801b054:	683b      	ldr	r3, [r7, #0]
 801b056:	b923      	cbnz	r3, 801b062 <_malloc_r+0x3e>
 801b058:	4621      	mov	r1, r4
 801b05a:	4630      	mov	r0, r6
 801b05c:	f000 ffae 	bl	801bfbc <_sbrk_r>
 801b060:	6038      	str	r0, [r7, #0]
 801b062:	4629      	mov	r1, r5
 801b064:	4630      	mov	r0, r6
 801b066:	f000 ffa9 	bl	801bfbc <_sbrk_r>
 801b06a:	1c43      	adds	r3, r0, #1
 801b06c:	d123      	bne.n	801b0b6 <_malloc_r+0x92>
 801b06e:	230c      	movs	r3, #12
 801b070:	6033      	str	r3, [r6, #0]
 801b072:	4630      	mov	r0, r6
 801b074:	f004 f81c 	bl	801f0b0 <__malloc_unlock>
 801b078:	e7e3      	b.n	801b042 <_malloc_r+0x1e>
 801b07a:	6823      	ldr	r3, [r4, #0]
 801b07c:	1b5b      	subs	r3, r3, r5
 801b07e:	d417      	bmi.n	801b0b0 <_malloc_r+0x8c>
 801b080:	2b0b      	cmp	r3, #11
 801b082:	d903      	bls.n	801b08c <_malloc_r+0x68>
 801b084:	6023      	str	r3, [r4, #0]
 801b086:	441c      	add	r4, r3
 801b088:	6025      	str	r5, [r4, #0]
 801b08a:	e004      	b.n	801b096 <_malloc_r+0x72>
 801b08c:	6863      	ldr	r3, [r4, #4]
 801b08e:	42a2      	cmp	r2, r4
 801b090:	bf0c      	ite	eq
 801b092:	600b      	streq	r3, [r1, #0]
 801b094:	6053      	strne	r3, [r2, #4]
 801b096:	4630      	mov	r0, r6
 801b098:	f004 f80a 	bl	801f0b0 <__malloc_unlock>
 801b09c:	f104 000b 	add.w	r0, r4, #11
 801b0a0:	1d23      	adds	r3, r4, #4
 801b0a2:	f020 0007 	bic.w	r0, r0, #7
 801b0a6:	1ac2      	subs	r2, r0, r3
 801b0a8:	d0cc      	beq.n	801b044 <_malloc_r+0x20>
 801b0aa:	1a1b      	subs	r3, r3, r0
 801b0ac:	50a3      	str	r3, [r4, r2]
 801b0ae:	e7c9      	b.n	801b044 <_malloc_r+0x20>
 801b0b0:	4622      	mov	r2, r4
 801b0b2:	6864      	ldr	r4, [r4, #4]
 801b0b4:	e7cc      	b.n	801b050 <_malloc_r+0x2c>
 801b0b6:	1cc4      	adds	r4, r0, #3
 801b0b8:	f024 0403 	bic.w	r4, r4, #3
 801b0bc:	42a0      	cmp	r0, r4
 801b0be:	d0e3      	beq.n	801b088 <_malloc_r+0x64>
 801b0c0:	1a21      	subs	r1, r4, r0
 801b0c2:	4630      	mov	r0, r6
 801b0c4:	f000 ff7a 	bl	801bfbc <_sbrk_r>
 801b0c8:	3001      	adds	r0, #1
 801b0ca:	d1dd      	bne.n	801b088 <_malloc_r+0x64>
 801b0cc:	e7cf      	b.n	801b06e <_malloc_r+0x4a>
 801b0ce:	bf00      	nop
 801b0d0:	20008610 	.word	0x20008610
 801b0d4:	20008614 	.word	0x20008614

0801b0d8 <__cvt>:
 801b0d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b0dc:	ec55 4b10 	vmov	r4, r5, d0
 801b0e0:	2d00      	cmp	r5, #0
 801b0e2:	460e      	mov	r6, r1
 801b0e4:	4619      	mov	r1, r3
 801b0e6:	462b      	mov	r3, r5
 801b0e8:	bfbb      	ittet	lt
 801b0ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801b0ee:	461d      	movlt	r5, r3
 801b0f0:	2300      	movge	r3, #0
 801b0f2:	232d      	movlt	r3, #45	; 0x2d
 801b0f4:	700b      	strb	r3, [r1, #0]
 801b0f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b0f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801b0fc:	4691      	mov	r9, r2
 801b0fe:	f023 0820 	bic.w	r8, r3, #32
 801b102:	bfbc      	itt	lt
 801b104:	4622      	movlt	r2, r4
 801b106:	4614      	movlt	r4, r2
 801b108:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801b10c:	d005      	beq.n	801b11a <__cvt+0x42>
 801b10e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801b112:	d100      	bne.n	801b116 <__cvt+0x3e>
 801b114:	3601      	adds	r6, #1
 801b116:	2102      	movs	r1, #2
 801b118:	e000      	b.n	801b11c <__cvt+0x44>
 801b11a:	2103      	movs	r1, #3
 801b11c:	ab03      	add	r3, sp, #12
 801b11e:	9301      	str	r3, [sp, #4]
 801b120:	ab02      	add	r3, sp, #8
 801b122:	9300      	str	r3, [sp, #0]
 801b124:	ec45 4b10 	vmov	d0, r4, r5
 801b128:	4653      	mov	r3, sl
 801b12a:	4632      	mov	r2, r6
 801b12c:	f002 fc08 	bl	801d940 <_dtoa_r>
 801b130:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801b134:	4607      	mov	r7, r0
 801b136:	d102      	bne.n	801b13e <__cvt+0x66>
 801b138:	f019 0f01 	tst.w	r9, #1
 801b13c:	d022      	beq.n	801b184 <__cvt+0xac>
 801b13e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801b142:	eb07 0906 	add.w	r9, r7, r6
 801b146:	d110      	bne.n	801b16a <__cvt+0x92>
 801b148:	783b      	ldrb	r3, [r7, #0]
 801b14a:	2b30      	cmp	r3, #48	; 0x30
 801b14c:	d10a      	bne.n	801b164 <__cvt+0x8c>
 801b14e:	2200      	movs	r2, #0
 801b150:	2300      	movs	r3, #0
 801b152:	4620      	mov	r0, r4
 801b154:	4629      	mov	r1, r5
 801b156:	f7e5 fcd7 	bl	8000b08 <__aeabi_dcmpeq>
 801b15a:	b918      	cbnz	r0, 801b164 <__cvt+0x8c>
 801b15c:	f1c6 0601 	rsb	r6, r6, #1
 801b160:	f8ca 6000 	str.w	r6, [sl]
 801b164:	f8da 3000 	ldr.w	r3, [sl]
 801b168:	4499      	add	r9, r3
 801b16a:	2200      	movs	r2, #0
 801b16c:	2300      	movs	r3, #0
 801b16e:	4620      	mov	r0, r4
 801b170:	4629      	mov	r1, r5
 801b172:	f7e5 fcc9 	bl	8000b08 <__aeabi_dcmpeq>
 801b176:	b108      	cbz	r0, 801b17c <__cvt+0xa4>
 801b178:	f8cd 900c 	str.w	r9, [sp, #12]
 801b17c:	2230      	movs	r2, #48	; 0x30
 801b17e:	9b03      	ldr	r3, [sp, #12]
 801b180:	454b      	cmp	r3, r9
 801b182:	d307      	bcc.n	801b194 <__cvt+0xbc>
 801b184:	9b03      	ldr	r3, [sp, #12]
 801b186:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b188:	1bdb      	subs	r3, r3, r7
 801b18a:	4638      	mov	r0, r7
 801b18c:	6013      	str	r3, [r2, #0]
 801b18e:	b004      	add	sp, #16
 801b190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b194:	1c59      	adds	r1, r3, #1
 801b196:	9103      	str	r1, [sp, #12]
 801b198:	701a      	strb	r2, [r3, #0]
 801b19a:	e7f0      	b.n	801b17e <__cvt+0xa6>

0801b19c <__exponent>:
 801b19c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b19e:	4603      	mov	r3, r0
 801b1a0:	2900      	cmp	r1, #0
 801b1a2:	bfb8      	it	lt
 801b1a4:	4249      	neglt	r1, r1
 801b1a6:	f803 2b02 	strb.w	r2, [r3], #2
 801b1aa:	bfb4      	ite	lt
 801b1ac:	222d      	movlt	r2, #45	; 0x2d
 801b1ae:	222b      	movge	r2, #43	; 0x2b
 801b1b0:	2909      	cmp	r1, #9
 801b1b2:	7042      	strb	r2, [r0, #1]
 801b1b4:	dd2a      	ble.n	801b20c <__exponent+0x70>
 801b1b6:	f10d 0407 	add.w	r4, sp, #7
 801b1ba:	46a4      	mov	ip, r4
 801b1bc:	270a      	movs	r7, #10
 801b1be:	46a6      	mov	lr, r4
 801b1c0:	460a      	mov	r2, r1
 801b1c2:	fb91 f6f7 	sdiv	r6, r1, r7
 801b1c6:	fb07 1516 	mls	r5, r7, r6, r1
 801b1ca:	3530      	adds	r5, #48	; 0x30
 801b1cc:	2a63      	cmp	r2, #99	; 0x63
 801b1ce:	f104 34ff 	add.w	r4, r4, #4294967295
 801b1d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801b1d6:	4631      	mov	r1, r6
 801b1d8:	dcf1      	bgt.n	801b1be <__exponent+0x22>
 801b1da:	3130      	adds	r1, #48	; 0x30
 801b1dc:	f1ae 0502 	sub.w	r5, lr, #2
 801b1e0:	f804 1c01 	strb.w	r1, [r4, #-1]
 801b1e4:	1c44      	adds	r4, r0, #1
 801b1e6:	4629      	mov	r1, r5
 801b1e8:	4561      	cmp	r1, ip
 801b1ea:	d30a      	bcc.n	801b202 <__exponent+0x66>
 801b1ec:	f10d 0209 	add.w	r2, sp, #9
 801b1f0:	eba2 020e 	sub.w	r2, r2, lr
 801b1f4:	4565      	cmp	r5, ip
 801b1f6:	bf88      	it	hi
 801b1f8:	2200      	movhi	r2, #0
 801b1fa:	4413      	add	r3, r2
 801b1fc:	1a18      	subs	r0, r3, r0
 801b1fe:	b003      	add	sp, #12
 801b200:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b202:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b206:	f804 2f01 	strb.w	r2, [r4, #1]!
 801b20a:	e7ed      	b.n	801b1e8 <__exponent+0x4c>
 801b20c:	2330      	movs	r3, #48	; 0x30
 801b20e:	3130      	adds	r1, #48	; 0x30
 801b210:	7083      	strb	r3, [r0, #2]
 801b212:	70c1      	strb	r1, [r0, #3]
 801b214:	1d03      	adds	r3, r0, #4
 801b216:	e7f1      	b.n	801b1fc <__exponent+0x60>

0801b218 <_printf_float>:
 801b218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b21c:	ed2d 8b02 	vpush	{d8}
 801b220:	b08d      	sub	sp, #52	; 0x34
 801b222:	460c      	mov	r4, r1
 801b224:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801b228:	4616      	mov	r6, r2
 801b22a:	461f      	mov	r7, r3
 801b22c:	4605      	mov	r5, r0
 801b22e:	f003 fead 	bl	801ef8c <_localeconv_r>
 801b232:	f8d0 a000 	ldr.w	sl, [r0]
 801b236:	4650      	mov	r0, sl
 801b238:	f7e4 ffe4 	bl	8000204 <strlen>
 801b23c:	2300      	movs	r3, #0
 801b23e:	930a      	str	r3, [sp, #40]	; 0x28
 801b240:	6823      	ldr	r3, [r4, #0]
 801b242:	9305      	str	r3, [sp, #20]
 801b244:	f8d8 3000 	ldr.w	r3, [r8]
 801b248:	f894 b018 	ldrb.w	fp, [r4, #24]
 801b24c:	3307      	adds	r3, #7
 801b24e:	f023 0307 	bic.w	r3, r3, #7
 801b252:	f103 0208 	add.w	r2, r3, #8
 801b256:	f8c8 2000 	str.w	r2, [r8]
 801b25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b25e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801b262:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801b266:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801b26a:	9307      	str	r3, [sp, #28]
 801b26c:	f8cd 8018 	str.w	r8, [sp, #24]
 801b270:	ee08 0a10 	vmov	s16, r0
 801b274:	4b9f      	ldr	r3, [pc, #636]	; (801b4f4 <_printf_float+0x2dc>)
 801b276:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b27a:	f04f 32ff 	mov.w	r2, #4294967295
 801b27e:	f7e5 fc75 	bl	8000b6c <__aeabi_dcmpun>
 801b282:	bb88      	cbnz	r0, 801b2e8 <_printf_float+0xd0>
 801b284:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b288:	4b9a      	ldr	r3, [pc, #616]	; (801b4f4 <_printf_float+0x2dc>)
 801b28a:	f04f 32ff 	mov.w	r2, #4294967295
 801b28e:	f7e5 fc4f 	bl	8000b30 <__aeabi_dcmple>
 801b292:	bb48      	cbnz	r0, 801b2e8 <_printf_float+0xd0>
 801b294:	2200      	movs	r2, #0
 801b296:	2300      	movs	r3, #0
 801b298:	4640      	mov	r0, r8
 801b29a:	4649      	mov	r1, r9
 801b29c:	f7e5 fc3e 	bl	8000b1c <__aeabi_dcmplt>
 801b2a0:	b110      	cbz	r0, 801b2a8 <_printf_float+0x90>
 801b2a2:	232d      	movs	r3, #45	; 0x2d
 801b2a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b2a8:	4b93      	ldr	r3, [pc, #588]	; (801b4f8 <_printf_float+0x2e0>)
 801b2aa:	4894      	ldr	r0, [pc, #592]	; (801b4fc <_printf_float+0x2e4>)
 801b2ac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801b2b0:	bf94      	ite	ls
 801b2b2:	4698      	movls	r8, r3
 801b2b4:	4680      	movhi	r8, r0
 801b2b6:	2303      	movs	r3, #3
 801b2b8:	6123      	str	r3, [r4, #16]
 801b2ba:	9b05      	ldr	r3, [sp, #20]
 801b2bc:	f023 0204 	bic.w	r2, r3, #4
 801b2c0:	6022      	str	r2, [r4, #0]
 801b2c2:	f04f 0900 	mov.w	r9, #0
 801b2c6:	9700      	str	r7, [sp, #0]
 801b2c8:	4633      	mov	r3, r6
 801b2ca:	aa0b      	add	r2, sp, #44	; 0x2c
 801b2cc:	4621      	mov	r1, r4
 801b2ce:	4628      	mov	r0, r5
 801b2d0:	f000 f9d8 	bl	801b684 <_printf_common>
 801b2d4:	3001      	adds	r0, #1
 801b2d6:	f040 8090 	bne.w	801b3fa <_printf_float+0x1e2>
 801b2da:	f04f 30ff 	mov.w	r0, #4294967295
 801b2de:	b00d      	add	sp, #52	; 0x34
 801b2e0:	ecbd 8b02 	vpop	{d8}
 801b2e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b2e8:	4642      	mov	r2, r8
 801b2ea:	464b      	mov	r3, r9
 801b2ec:	4640      	mov	r0, r8
 801b2ee:	4649      	mov	r1, r9
 801b2f0:	f7e5 fc3c 	bl	8000b6c <__aeabi_dcmpun>
 801b2f4:	b140      	cbz	r0, 801b308 <_printf_float+0xf0>
 801b2f6:	464b      	mov	r3, r9
 801b2f8:	2b00      	cmp	r3, #0
 801b2fa:	bfbc      	itt	lt
 801b2fc:	232d      	movlt	r3, #45	; 0x2d
 801b2fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801b302:	487f      	ldr	r0, [pc, #508]	; (801b500 <_printf_float+0x2e8>)
 801b304:	4b7f      	ldr	r3, [pc, #508]	; (801b504 <_printf_float+0x2ec>)
 801b306:	e7d1      	b.n	801b2ac <_printf_float+0x94>
 801b308:	6863      	ldr	r3, [r4, #4]
 801b30a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801b30e:	9206      	str	r2, [sp, #24]
 801b310:	1c5a      	adds	r2, r3, #1
 801b312:	d13f      	bne.n	801b394 <_printf_float+0x17c>
 801b314:	2306      	movs	r3, #6
 801b316:	6063      	str	r3, [r4, #4]
 801b318:	9b05      	ldr	r3, [sp, #20]
 801b31a:	6861      	ldr	r1, [r4, #4]
 801b31c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801b320:	2300      	movs	r3, #0
 801b322:	9303      	str	r3, [sp, #12]
 801b324:	ab0a      	add	r3, sp, #40	; 0x28
 801b326:	e9cd b301 	strd	fp, r3, [sp, #4]
 801b32a:	ab09      	add	r3, sp, #36	; 0x24
 801b32c:	ec49 8b10 	vmov	d0, r8, r9
 801b330:	9300      	str	r3, [sp, #0]
 801b332:	6022      	str	r2, [r4, #0]
 801b334:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801b338:	4628      	mov	r0, r5
 801b33a:	f7ff fecd 	bl	801b0d8 <__cvt>
 801b33e:	9b06      	ldr	r3, [sp, #24]
 801b340:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b342:	2b47      	cmp	r3, #71	; 0x47
 801b344:	4680      	mov	r8, r0
 801b346:	d108      	bne.n	801b35a <_printf_float+0x142>
 801b348:	1cc8      	adds	r0, r1, #3
 801b34a:	db02      	blt.n	801b352 <_printf_float+0x13a>
 801b34c:	6863      	ldr	r3, [r4, #4]
 801b34e:	4299      	cmp	r1, r3
 801b350:	dd41      	ble.n	801b3d6 <_printf_float+0x1be>
 801b352:	f1ab 0b02 	sub.w	fp, fp, #2
 801b356:	fa5f fb8b 	uxtb.w	fp, fp
 801b35a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801b35e:	d820      	bhi.n	801b3a2 <_printf_float+0x18a>
 801b360:	3901      	subs	r1, #1
 801b362:	465a      	mov	r2, fp
 801b364:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801b368:	9109      	str	r1, [sp, #36]	; 0x24
 801b36a:	f7ff ff17 	bl	801b19c <__exponent>
 801b36e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b370:	1813      	adds	r3, r2, r0
 801b372:	2a01      	cmp	r2, #1
 801b374:	4681      	mov	r9, r0
 801b376:	6123      	str	r3, [r4, #16]
 801b378:	dc02      	bgt.n	801b380 <_printf_float+0x168>
 801b37a:	6822      	ldr	r2, [r4, #0]
 801b37c:	07d2      	lsls	r2, r2, #31
 801b37e:	d501      	bpl.n	801b384 <_printf_float+0x16c>
 801b380:	3301      	adds	r3, #1
 801b382:	6123      	str	r3, [r4, #16]
 801b384:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801b388:	2b00      	cmp	r3, #0
 801b38a:	d09c      	beq.n	801b2c6 <_printf_float+0xae>
 801b38c:	232d      	movs	r3, #45	; 0x2d
 801b38e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b392:	e798      	b.n	801b2c6 <_printf_float+0xae>
 801b394:	9a06      	ldr	r2, [sp, #24]
 801b396:	2a47      	cmp	r2, #71	; 0x47
 801b398:	d1be      	bne.n	801b318 <_printf_float+0x100>
 801b39a:	2b00      	cmp	r3, #0
 801b39c:	d1bc      	bne.n	801b318 <_printf_float+0x100>
 801b39e:	2301      	movs	r3, #1
 801b3a0:	e7b9      	b.n	801b316 <_printf_float+0xfe>
 801b3a2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801b3a6:	d118      	bne.n	801b3da <_printf_float+0x1c2>
 801b3a8:	2900      	cmp	r1, #0
 801b3aa:	6863      	ldr	r3, [r4, #4]
 801b3ac:	dd0b      	ble.n	801b3c6 <_printf_float+0x1ae>
 801b3ae:	6121      	str	r1, [r4, #16]
 801b3b0:	b913      	cbnz	r3, 801b3b8 <_printf_float+0x1a0>
 801b3b2:	6822      	ldr	r2, [r4, #0]
 801b3b4:	07d0      	lsls	r0, r2, #31
 801b3b6:	d502      	bpl.n	801b3be <_printf_float+0x1a6>
 801b3b8:	3301      	adds	r3, #1
 801b3ba:	440b      	add	r3, r1
 801b3bc:	6123      	str	r3, [r4, #16]
 801b3be:	65a1      	str	r1, [r4, #88]	; 0x58
 801b3c0:	f04f 0900 	mov.w	r9, #0
 801b3c4:	e7de      	b.n	801b384 <_printf_float+0x16c>
 801b3c6:	b913      	cbnz	r3, 801b3ce <_printf_float+0x1b6>
 801b3c8:	6822      	ldr	r2, [r4, #0]
 801b3ca:	07d2      	lsls	r2, r2, #31
 801b3cc:	d501      	bpl.n	801b3d2 <_printf_float+0x1ba>
 801b3ce:	3302      	adds	r3, #2
 801b3d0:	e7f4      	b.n	801b3bc <_printf_float+0x1a4>
 801b3d2:	2301      	movs	r3, #1
 801b3d4:	e7f2      	b.n	801b3bc <_printf_float+0x1a4>
 801b3d6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801b3da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b3dc:	4299      	cmp	r1, r3
 801b3de:	db05      	blt.n	801b3ec <_printf_float+0x1d4>
 801b3e0:	6823      	ldr	r3, [r4, #0]
 801b3e2:	6121      	str	r1, [r4, #16]
 801b3e4:	07d8      	lsls	r0, r3, #31
 801b3e6:	d5ea      	bpl.n	801b3be <_printf_float+0x1a6>
 801b3e8:	1c4b      	adds	r3, r1, #1
 801b3ea:	e7e7      	b.n	801b3bc <_printf_float+0x1a4>
 801b3ec:	2900      	cmp	r1, #0
 801b3ee:	bfd4      	ite	le
 801b3f0:	f1c1 0202 	rsble	r2, r1, #2
 801b3f4:	2201      	movgt	r2, #1
 801b3f6:	4413      	add	r3, r2
 801b3f8:	e7e0      	b.n	801b3bc <_printf_float+0x1a4>
 801b3fa:	6823      	ldr	r3, [r4, #0]
 801b3fc:	055a      	lsls	r2, r3, #21
 801b3fe:	d407      	bmi.n	801b410 <_printf_float+0x1f8>
 801b400:	6923      	ldr	r3, [r4, #16]
 801b402:	4642      	mov	r2, r8
 801b404:	4631      	mov	r1, r6
 801b406:	4628      	mov	r0, r5
 801b408:	47b8      	blx	r7
 801b40a:	3001      	adds	r0, #1
 801b40c:	d12c      	bne.n	801b468 <_printf_float+0x250>
 801b40e:	e764      	b.n	801b2da <_printf_float+0xc2>
 801b410:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801b414:	f240 80e0 	bls.w	801b5d8 <_printf_float+0x3c0>
 801b418:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801b41c:	2200      	movs	r2, #0
 801b41e:	2300      	movs	r3, #0
 801b420:	f7e5 fb72 	bl	8000b08 <__aeabi_dcmpeq>
 801b424:	2800      	cmp	r0, #0
 801b426:	d034      	beq.n	801b492 <_printf_float+0x27a>
 801b428:	4a37      	ldr	r2, [pc, #220]	; (801b508 <_printf_float+0x2f0>)
 801b42a:	2301      	movs	r3, #1
 801b42c:	4631      	mov	r1, r6
 801b42e:	4628      	mov	r0, r5
 801b430:	47b8      	blx	r7
 801b432:	3001      	adds	r0, #1
 801b434:	f43f af51 	beq.w	801b2da <_printf_float+0xc2>
 801b438:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b43c:	429a      	cmp	r2, r3
 801b43e:	db02      	blt.n	801b446 <_printf_float+0x22e>
 801b440:	6823      	ldr	r3, [r4, #0]
 801b442:	07d8      	lsls	r0, r3, #31
 801b444:	d510      	bpl.n	801b468 <_printf_float+0x250>
 801b446:	ee18 3a10 	vmov	r3, s16
 801b44a:	4652      	mov	r2, sl
 801b44c:	4631      	mov	r1, r6
 801b44e:	4628      	mov	r0, r5
 801b450:	47b8      	blx	r7
 801b452:	3001      	adds	r0, #1
 801b454:	f43f af41 	beq.w	801b2da <_printf_float+0xc2>
 801b458:	f04f 0800 	mov.w	r8, #0
 801b45c:	f104 091a 	add.w	r9, r4, #26
 801b460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b462:	3b01      	subs	r3, #1
 801b464:	4543      	cmp	r3, r8
 801b466:	dc09      	bgt.n	801b47c <_printf_float+0x264>
 801b468:	6823      	ldr	r3, [r4, #0]
 801b46a:	079b      	lsls	r3, r3, #30
 801b46c:	f100 8105 	bmi.w	801b67a <_printf_float+0x462>
 801b470:	68e0      	ldr	r0, [r4, #12]
 801b472:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b474:	4298      	cmp	r0, r3
 801b476:	bfb8      	it	lt
 801b478:	4618      	movlt	r0, r3
 801b47a:	e730      	b.n	801b2de <_printf_float+0xc6>
 801b47c:	2301      	movs	r3, #1
 801b47e:	464a      	mov	r2, r9
 801b480:	4631      	mov	r1, r6
 801b482:	4628      	mov	r0, r5
 801b484:	47b8      	blx	r7
 801b486:	3001      	adds	r0, #1
 801b488:	f43f af27 	beq.w	801b2da <_printf_float+0xc2>
 801b48c:	f108 0801 	add.w	r8, r8, #1
 801b490:	e7e6      	b.n	801b460 <_printf_float+0x248>
 801b492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b494:	2b00      	cmp	r3, #0
 801b496:	dc39      	bgt.n	801b50c <_printf_float+0x2f4>
 801b498:	4a1b      	ldr	r2, [pc, #108]	; (801b508 <_printf_float+0x2f0>)
 801b49a:	2301      	movs	r3, #1
 801b49c:	4631      	mov	r1, r6
 801b49e:	4628      	mov	r0, r5
 801b4a0:	47b8      	blx	r7
 801b4a2:	3001      	adds	r0, #1
 801b4a4:	f43f af19 	beq.w	801b2da <_printf_float+0xc2>
 801b4a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b4ac:	4313      	orrs	r3, r2
 801b4ae:	d102      	bne.n	801b4b6 <_printf_float+0x29e>
 801b4b0:	6823      	ldr	r3, [r4, #0]
 801b4b2:	07d9      	lsls	r1, r3, #31
 801b4b4:	d5d8      	bpl.n	801b468 <_printf_float+0x250>
 801b4b6:	ee18 3a10 	vmov	r3, s16
 801b4ba:	4652      	mov	r2, sl
 801b4bc:	4631      	mov	r1, r6
 801b4be:	4628      	mov	r0, r5
 801b4c0:	47b8      	blx	r7
 801b4c2:	3001      	adds	r0, #1
 801b4c4:	f43f af09 	beq.w	801b2da <_printf_float+0xc2>
 801b4c8:	f04f 0900 	mov.w	r9, #0
 801b4cc:	f104 0a1a 	add.w	sl, r4, #26
 801b4d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b4d2:	425b      	negs	r3, r3
 801b4d4:	454b      	cmp	r3, r9
 801b4d6:	dc01      	bgt.n	801b4dc <_printf_float+0x2c4>
 801b4d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b4da:	e792      	b.n	801b402 <_printf_float+0x1ea>
 801b4dc:	2301      	movs	r3, #1
 801b4de:	4652      	mov	r2, sl
 801b4e0:	4631      	mov	r1, r6
 801b4e2:	4628      	mov	r0, r5
 801b4e4:	47b8      	blx	r7
 801b4e6:	3001      	adds	r0, #1
 801b4e8:	f43f aef7 	beq.w	801b2da <_printf_float+0xc2>
 801b4ec:	f109 0901 	add.w	r9, r9, #1
 801b4f0:	e7ee      	b.n	801b4d0 <_printf_float+0x2b8>
 801b4f2:	bf00      	nop
 801b4f4:	7fefffff 	.word	0x7fefffff
 801b4f8:	08022dd8 	.word	0x08022dd8
 801b4fc:	08022ddc 	.word	0x08022ddc
 801b500:	08022de4 	.word	0x08022de4
 801b504:	08022de0 	.word	0x08022de0
 801b508:	080231a9 	.word	0x080231a9
 801b50c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b50e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b510:	429a      	cmp	r2, r3
 801b512:	bfa8      	it	ge
 801b514:	461a      	movge	r2, r3
 801b516:	2a00      	cmp	r2, #0
 801b518:	4691      	mov	r9, r2
 801b51a:	dc37      	bgt.n	801b58c <_printf_float+0x374>
 801b51c:	f04f 0b00 	mov.w	fp, #0
 801b520:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b524:	f104 021a 	add.w	r2, r4, #26
 801b528:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b52a:	9305      	str	r3, [sp, #20]
 801b52c:	eba3 0309 	sub.w	r3, r3, r9
 801b530:	455b      	cmp	r3, fp
 801b532:	dc33      	bgt.n	801b59c <_printf_float+0x384>
 801b534:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b538:	429a      	cmp	r2, r3
 801b53a:	db3b      	blt.n	801b5b4 <_printf_float+0x39c>
 801b53c:	6823      	ldr	r3, [r4, #0]
 801b53e:	07da      	lsls	r2, r3, #31
 801b540:	d438      	bmi.n	801b5b4 <_printf_float+0x39c>
 801b542:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b544:	9b05      	ldr	r3, [sp, #20]
 801b546:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b548:	1ad3      	subs	r3, r2, r3
 801b54a:	eba2 0901 	sub.w	r9, r2, r1
 801b54e:	4599      	cmp	r9, r3
 801b550:	bfa8      	it	ge
 801b552:	4699      	movge	r9, r3
 801b554:	f1b9 0f00 	cmp.w	r9, #0
 801b558:	dc35      	bgt.n	801b5c6 <_printf_float+0x3ae>
 801b55a:	f04f 0800 	mov.w	r8, #0
 801b55e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b562:	f104 0a1a 	add.w	sl, r4, #26
 801b566:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b56a:	1a9b      	subs	r3, r3, r2
 801b56c:	eba3 0309 	sub.w	r3, r3, r9
 801b570:	4543      	cmp	r3, r8
 801b572:	f77f af79 	ble.w	801b468 <_printf_float+0x250>
 801b576:	2301      	movs	r3, #1
 801b578:	4652      	mov	r2, sl
 801b57a:	4631      	mov	r1, r6
 801b57c:	4628      	mov	r0, r5
 801b57e:	47b8      	blx	r7
 801b580:	3001      	adds	r0, #1
 801b582:	f43f aeaa 	beq.w	801b2da <_printf_float+0xc2>
 801b586:	f108 0801 	add.w	r8, r8, #1
 801b58a:	e7ec      	b.n	801b566 <_printf_float+0x34e>
 801b58c:	4613      	mov	r3, r2
 801b58e:	4631      	mov	r1, r6
 801b590:	4642      	mov	r2, r8
 801b592:	4628      	mov	r0, r5
 801b594:	47b8      	blx	r7
 801b596:	3001      	adds	r0, #1
 801b598:	d1c0      	bne.n	801b51c <_printf_float+0x304>
 801b59a:	e69e      	b.n	801b2da <_printf_float+0xc2>
 801b59c:	2301      	movs	r3, #1
 801b59e:	4631      	mov	r1, r6
 801b5a0:	4628      	mov	r0, r5
 801b5a2:	9205      	str	r2, [sp, #20]
 801b5a4:	47b8      	blx	r7
 801b5a6:	3001      	adds	r0, #1
 801b5a8:	f43f ae97 	beq.w	801b2da <_printf_float+0xc2>
 801b5ac:	9a05      	ldr	r2, [sp, #20]
 801b5ae:	f10b 0b01 	add.w	fp, fp, #1
 801b5b2:	e7b9      	b.n	801b528 <_printf_float+0x310>
 801b5b4:	ee18 3a10 	vmov	r3, s16
 801b5b8:	4652      	mov	r2, sl
 801b5ba:	4631      	mov	r1, r6
 801b5bc:	4628      	mov	r0, r5
 801b5be:	47b8      	blx	r7
 801b5c0:	3001      	adds	r0, #1
 801b5c2:	d1be      	bne.n	801b542 <_printf_float+0x32a>
 801b5c4:	e689      	b.n	801b2da <_printf_float+0xc2>
 801b5c6:	9a05      	ldr	r2, [sp, #20]
 801b5c8:	464b      	mov	r3, r9
 801b5ca:	4442      	add	r2, r8
 801b5cc:	4631      	mov	r1, r6
 801b5ce:	4628      	mov	r0, r5
 801b5d0:	47b8      	blx	r7
 801b5d2:	3001      	adds	r0, #1
 801b5d4:	d1c1      	bne.n	801b55a <_printf_float+0x342>
 801b5d6:	e680      	b.n	801b2da <_printf_float+0xc2>
 801b5d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b5da:	2a01      	cmp	r2, #1
 801b5dc:	dc01      	bgt.n	801b5e2 <_printf_float+0x3ca>
 801b5de:	07db      	lsls	r3, r3, #31
 801b5e0:	d538      	bpl.n	801b654 <_printf_float+0x43c>
 801b5e2:	2301      	movs	r3, #1
 801b5e4:	4642      	mov	r2, r8
 801b5e6:	4631      	mov	r1, r6
 801b5e8:	4628      	mov	r0, r5
 801b5ea:	47b8      	blx	r7
 801b5ec:	3001      	adds	r0, #1
 801b5ee:	f43f ae74 	beq.w	801b2da <_printf_float+0xc2>
 801b5f2:	ee18 3a10 	vmov	r3, s16
 801b5f6:	4652      	mov	r2, sl
 801b5f8:	4631      	mov	r1, r6
 801b5fa:	4628      	mov	r0, r5
 801b5fc:	47b8      	blx	r7
 801b5fe:	3001      	adds	r0, #1
 801b600:	f43f ae6b 	beq.w	801b2da <_printf_float+0xc2>
 801b604:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801b608:	2200      	movs	r2, #0
 801b60a:	2300      	movs	r3, #0
 801b60c:	f7e5 fa7c 	bl	8000b08 <__aeabi_dcmpeq>
 801b610:	b9d8      	cbnz	r0, 801b64a <_printf_float+0x432>
 801b612:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b614:	f108 0201 	add.w	r2, r8, #1
 801b618:	3b01      	subs	r3, #1
 801b61a:	4631      	mov	r1, r6
 801b61c:	4628      	mov	r0, r5
 801b61e:	47b8      	blx	r7
 801b620:	3001      	adds	r0, #1
 801b622:	d10e      	bne.n	801b642 <_printf_float+0x42a>
 801b624:	e659      	b.n	801b2da <_printf_float+0xc2>
 801b626:	2301      	movs	r3, #1
 801b628:	4652      	mov	r2, sl
 801b62a:	4631      	mov	r1, r6
 801b62c:	4628      	mov	r0, r5
 801b62e:	47b8      	blx	r7
 801b630:	3001      	adds	r0, #1
 801b632:	f43f ae52 	beq.w	801b2da <_printf_float+0xc2>
 801b636:	f108 0801 	add.w	r8, r8, #1
 801b63a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b63c:	3b01      	subs	r3, #1
 801b63e:	4543      	cmp	r3, r8
 801b640:	dcf1      	bgt.n	801b626 <_printf_float+0x40e>
 801b642:	464b      	mov	r3, r9
 801b644:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801b648:	e6dc      	b.n	801b404 <_printf_float+0x1ec>
 801b64a:	f04f 0800 	mov.w	r8, #0
 801b64e:	f104 0a1a 	add.w	sl, r4, #26
 801b652:	e7f2      	b.n	801b63a <_printf_float+0x422>
 801b654:	2301      	movs	r3, #1
 801b656:	4642      	mov	r2, r8
 801b658:	e7df      	b.n	801b61a <_printf_float+0x402>
 801b65a:	2301      	movs	r3, #1
 801b65c:	464a      	mov	r2, r9
 801b65e:	4631      	mov	r1, r6
 801b660:	4628      	mov	r0, r5
 801b662:	47b8      	blx	r7
 801b664:	3001      	adds	r0, #1
 801b666:	f43f ae38 	beq.w	801b2da <_printf_float+0xc2>
 801b66a:	f108 0801 	add.w	r8, r8, #1
 801b66e:	68e3      	ldr	r3, [r4, #12]
 801b670:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801b672:	1a5b      	subs	r3, r3, r1
 801b674:	4543      	cmp	r3, r8
 801b676:	dcf0      	bgt.n	801b65a <_printf_float+0x442>
 801b678:	e6fa      	b.n	801b470 <_printf_float+0x258>
 801b67a:	f04f 0800 	mov.w	r8, #0
 801b67e:	f104 0919 	add.w	r9, r4, #25
 801b682:	e7f4      	b.n	801b66e <_printf_float+0x456>

0801b684 <_printf_common>:
 801b684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b688:	4616      	mov	r6, r2
 801b68a:	4699      	mov	r9, r3
 801b68c:	688a      	ldr	r2, [r1, #8]
 801b68e:	690b      	ldr	r3, [r1, #16]
 801b690:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b694:	4293      	cmp	r3, r2
 801b696:	bfb8      	it	lt
 801b698:	4613      	movlt	r3, r2
 801b69a:	6033      	str	r3, [r6, #0]
 801b69c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b6a0:	4607      	mov	r7, r0
 801b6a2:	460c      	mov	r4, r1
 801b6a4:	b10a      	cbz	r2, 801b6aa <_printf_common+0x26>
 801b6a6:	3301      	adds	r3, #1
 801b6a8:	6033      	str	r3, [r6, #0]
 801b6aa:	6823      	ldr	r3, [r4, #0]
 801b6ac:	0699      	lsls	r1, r3, #26
 801b6ae:	bf42      	ittt	mi
 801b6b0:	6833      	ldrmi	r3, [r6, #0]
 801b6b2:	3302      	addmi	r3, #2
 801b6b4:	6033      	strmi	r3, [r6, #0]
 801b6b6:	6825      	ldr	r5, [r4, #0]
 801b6b8:	f015 0506 	ands.w	r5, r5, #6
 801b6bc:	d106      	bne.n	801b6cc <_printf_common+0x48>
 801b6be:	f104 0a19 	add.w	sl, r4, #25
 801b6c2:	68e3      	ldr	r3, [r4, #12]
 801b6c4:	6832      	ldr	r2, [r6, #0]
 801b6c6:	1a9b      	subs	r3, r3, r2
 801b6c8:	42ab      	cmp	r3, r5
 801b6ca:	dc26      	bgt.n	801b71a <_printf_common+0x96>
 801b6cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b6d0:	1e13      	subs	r3, r2, #0
 801b6d2:	6822      	ldr	r2, [r4, #0]
 801b6d4:	bf18      	it	ne
 801b6d6:	2301      	movne	r3, #1
 801b6d8:	0692      	lsls	r2, r2, #26
 801b6da:	d42b      	bmi.n	801b734 <_printf_common+0xb0>
 801b6dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b6e0:	4649      	mov	r1, r9
 801b6e2:	4638      	mov	r0, r7
 801b6e4:	47c0      	blx	r8
 801b6e6:	3001      	adds	r0, #1
 801b6e8:	d01e      	beq.n	801b728 <_printf_common+0xa4>
 801b6ea:	6823      	ldr	r3, [r4, #0]
 801b6ec:	68e5      	ldr	r5, [r4, #12]
 801b6ee:	6832      	ldr	r2, [r6, #0]
 801b6f0:	f003 0306 	and.w	r3, r3, #6
 801b6f4:	2b04      	cmp	r3, #4
 801b6f6:	bf08      	it	eq
 801b6f8:	1aad      	subeq	r5, r5, r2
 801b6fa:	68a3      	ldr	r3, [r4, #8]
 801b6fc:	6922      	ldr	r2, [r4, #16]
 801b6fe:	bf0c      	ite	eq
 801b700:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b704:	2500      	movne	r5, #0
 801b706:	4293      	cmp	r3, r2
 801b708:	bfc4      	itt	gt
 801b70a:	1a9b      	subgt	r3, r3, r2
 801b70c:	18ed      	addgt	r5, r5, r3
 801b70e:	2600      	movs	r6, #0
 801b710:	341a      	adds	r4, #26
 801b712:	42b5      	cmp	r5, r6
 801b714:	d11a      	bne.n	801b74c <_printf_common+0xc8>
 801b716:	2000      	movs	r0, #0
 801b718:	e008      	b.n	801b72c <_printf_common+0xa8>
 801b71a:	2301      	movs	r3, #1
 801b71c:	4652      	mov	r2, sl
 801b71e:	4649      	mov	r1, r9
 801b720:	4638      	mov	r0, r7
 801b722:	47c0      	blx	r8
 801b724:	3001      	adds	r0, #1
 801b726:	d103      	bne.n	801b730 <_printf_common+0xac>
 801b728:	f04f 30ff 	mov.w	r0, #4294967295
 801b72c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b730:	3501      	adds	r5, #1
 801b732:	e7c6      	b.n	801b6c2 <_printf_common+0x3e>
 801b734:	18e1      	adds	r1, r4, r3
 801b736:	1c5a      	adds	r2, r3, #1
 801b738:	2030      	movs	r0, #48	; 0x30
 801b73a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b73e:	4422      	add	r2, r4
 801b740:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b744:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b748:	3302      	adds	r3, #2
 801b74a:	e7c7      	b.n	801b6dc <_printf_common+0x58>
 801b74c:	2301      	movs	r3, #1
 801b74e:	4622      	mov	r2, r4
 801b750:	4649      	mov	r1, r9
 801b752:	4638      	mov	r0, r7
 801b754:	47c0      	blx	r8
 801b756:	3001      	adds	r0, #1
 801b758:	d0e6      	beq.n	801b728 <_printf_common+0xa4>
 801b75a:	3601      	adds	r6, #1
 801b75c:	e7d9      	b.n	801b712 <_printf_common+0x8e>
	...

0801b760 <_printf_i>:
 801b760:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b764:	460c      	mov	r4, r1
 801b766:	4691      	mov	r9, r2
 801b768:	7e27      	ldrb	r7, [r4, #24]
 801b76a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b76c:	2f78      	cmp	r7, #120	; 0x78
 801b76e:	4680      	mov	r8, r0
 801b770:	469a      	mov	sl, r3
 801b772:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b776:	d807      	bhi.n	801b788 <_printf_i+0x28>
 801b778:	2f62      	cmp	r7, #98	; 0x62
 801b77a:	d80a      	bhi.n	801b792 <_printf_i+0x32>
 801b77c:	2f00      	cmp	r7, #0
 801b77e:	f000 80d8 	beq.w	801b932 <_printf_i+0x1d2>
 801b782:	2f58      	cmp	r7, #88	; 0x58
 801b784:	f000 80a3 	beq.w	801b8ce <_printf_i+0x16e>
 801b788:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801b78c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b790:	e03a      	b.n	801b808 <_printf_i+0xa8>
 801b792:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b796:	2b15      	cmp	r3, #21
 801b798:	d8f6      	bhi.n	801b788 <_printf_i+0x28>
 801b79a:	a001      	add	r0, pc, #4	; (adr r0, 801b7a0 <_printf_i+0x40>)
 801b79c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801b7a0:	0801b7f9 	.word	0x0801b7f9
 801b7a4:	0801b80d 	.word	0x0801b80d
 801b7a8:	0801b789 	.word	0x0801b789
 801b7ac:	0801b789 	.word	0x0801b789
 801b7b0:	0801b789 	.word	0x0801b789
 801b7b4:	0801b789 	.word	0x0801b789
 801b7b8:	0801b80d 	.word	0x0801b80d
 801b7bc:	0801b789 	.word	0x0801b789
 801b7c0:	0801b789 	.word	0x0801b789
 801b7c4:	0801b789 	.word	0x0801b789
 801b7c8:	0801b789 	.word	0x0801b789
 801b7cc:	0801b919 	.word	0x0801b919
 801b7d0:	0801b83d 	.word	0x0801b83d
 801b7d4:	0801b8fb 	.word	0x0801b8fb
 801b7d8:	0801b789 	.word	0x0801b789
 801b7dc:	0801b789 	.word	0x0801b789
 801b7e0:	0801b93b 	.word	0x0801b93b
 801b7e4:	0801b789 	.word	0x0801b789
 801b7e8:	0801b83d 	.word	0x0801b83d
 801b7ec:	0801b789 	.word	0x0801b789
 801b7f0:	0801b789 	.word	0x0801b789
 801b7f4:	0801b903 	.word	0x0801b903
 801b7f8:	680b      	ldr	r3, [r1, #0]
 801b7fa:	1d1a      	adds	r2, r3, #4
 801b7fc:	681b      	ldr	r3, [r3, #0]
 801b7fe:	600a      	str	r2, [r1, #0]
 801b800:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801b804:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b808:	2301      	movs	r3, #1
 801b80a:	e0a3      	b.n	801b954 <_printf_i+0x1f4>
 801b80c:	6825      	ldr	r5, [r4, #0]
 801b80e:	6808      	ldr	r0, [r1, #0]
 801b810:	062e      	lsls	r6, r5, #24
 801b812:	f100 0304 	add.w	r3, r0, #4
 801b816:	d50a      	bpl.n	801b82e <_printf_i+0xce>
 801b818:	6805      	ldr	r5, [r0, #0]
 801b81a:	600b      	str	r3, [r1, #0]
 801b81c:	2d00      	cmp	r5, #0
 801b81e:	da03      	bge.n	801b828 <_printf_i+0xc8>
 801b820:	232d      	movs	r3, #45	; 0x2d
 801b822:	426d      	negs	r5, r5
 801b824:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b828:	485e      	ldr	r0, [pc, #376]	; (801b9a4 <_printf_i+0x244>)
 801b82a:	230a      	movs	r3, #10
 801b82c:	e019      	b.n	801b862 <_printf_i+0x102>
 801b82e:	f015 0f40 	tst.w	r5, #64	; 0x40
 801b832:	6805      	ldr	r5, [r0, #0]
 801b834:	600b      	str	r3, [r1, #0]
 801b836:	bf18      	it	ne
 801b838:	b22d      	sxthne	r5, r5
 801b83a:	e7ef      	b.n	801b81c <_printf_i+0xbc>
 801b83c:	680b      	ldr	r3, [r1, #0]
 801b83e:	6825      	ldr	r5, [r4, #0]
 801b840:	1d18      	adds	r0, r3, #4
 801b842:	6008      	str	r0, [r1, #0]
 801b844:	0628      	lsls	r0, r5, #24
 801b846:	d501      	bpl.n	801b84c <_printf_i+0xec>
 801b848:	681d      	ldr	r5, [r3, #0]
 801b84a:	e002      	b.n	801b852 <_printf_i+0xf2>
 801b84c:	0669      	lsls	r1, r5, #25
 801b84e:	d5fb      	bpl.n	801b848 <_printf_i+0xe8>
 801b850:	881d      	ldrh	r5, [r3, #0]
 801b852:	4854      	ldr	r0, [pc, #336]	; (801b9a4 <_printf_i+0x244>)
 801b854:	2f6f      	cmp	r7, #111	; 0x6f
 801b856:	bf0c      	ite	eq
 801b858:	2308      	moveq	r3, #8
 801b85a:	230a      	movne	r3, #10
 801b85c:	2100      	movs	r1, #0
 801b85e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b862:	6866      	ldr	r6, [r4, #4]
 801b864:	60a6      	str	r6, [r4, #8]
 801b866:	2e00      	cmp	r6, #0
 801b868:	bfa2      	ittt	ge
 801b86a:	6821      	ldrge	r1, [r4, #0]
 801b86c:	f021 0104 	bicge.w	r1, r1, #4
 801b870:	6021      	strge	r1, [r4, #0]
 801b872:	b90d      	cbnz	r5, 801b878 <_printf_i+0x118>
 801b874:	2e00      	cmp	r6, #0
 801b876:	d04d      	beq.n	801b914 <_printf_i+0x1b4>
 801b878:	4616      	mov	r6, r2
 801b87a:	fbb5 f1f3 	udiv	r1, r5, r3
 801b87e:	fb03 5711 	mls	r7, r3, r1, r5
 801b882:	5dc7      	ldrb	r7, [r0, r7]
 801b884:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801b888:	462f      	mov	r7, r5
 801b88a:	42bb      	cmp	r3, r7
 801b88c:	460d      	mov	r5, r1
 801b88e:	d9f4      	bls.n	801b87a <_printf_i+0x11a>
 801b890:	2b08      	cmp	r3, #8
 801b892:	d10b      	bne.n	801b8ac <_printf_i+0x14c>
 801b894:	6823      	ldr	r3, [r4, #0]
 801b896:	07df      	lsls	r7, r3, #31
 801b898:	d508      	bpl.n	801b8ac <_printf_i+0x14c>
 801b89a:	6923      	ldr	r3, [r4, #16]
 801b89c:	6861      	ldr	r1, [r4, #4]
 801b89e:	4299      	cmp	r1, r3
 801b8a0:	bfde      	ittt	le
 801b8a2:	2330      	movle	r3, #48	; 0x30
 801b8a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 801b8a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 801b8ac:	1b92      	subs	r2, r2, r6
 801b8ae:	6122      	str	r2, [r4, #16]
 801b8b0:	f8cd a000 	str.w	sl, [sp]
 801b8b4:	464b      	mov	r3, r9
 801b8b6:	aa03      	add	r2, sp, #12
 801b8b8:	4621      	mov	r1, r4
 801b8ba:	4640      	mov	r0, r8
 801b8bc:	f7ff fee2 	bl	801b684 <_printf_common>
 801b8c0:	3001      	adds	r0, #1
 801b8c2:	d14c      	bne.n	801b95e <_printf_i+0x1fe>
 801b8c4:	f04f 30ff 	mov.w	r0, #4294967295
 801b8c8:	b004      	add	sp, #16
 801b8ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b8ce:	4835      	ldr	r0, [pc, #212]	; (801b9a4 <_printf_i+0x244>)
 801b8d0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801b8d4:	6823      	ldr	r3, [r4, #0]
 801b8d6:	680e      	ldr	r6, [r1, #0]
 801b8d8:	061f      	lsls	r7, r3, #24
 801b8da:	f856 5b04 	ldr.w	r5, [r6], #4
 801b8de:	600e      	str	r6, [r1, #0]
 801b8e0:	d514      	bpl.n	801b90c <_printf_i+0x1ac>
 801b8e2:	07d9      	lsls	r1, r3, #31
 801b8e4:	bf44      	itt	mi
 801b8e6:	f043 0320 	orrmi.w	r3, r3, #32
 801b8ea:	6023      	strmi	r3, [r4, #0]
 801b8ec:	b91d      	cbnz	r5, 801b8f6 <_printf_i+0x196>
 801b8ee:	6823      	ldr	r3, [r4, #0]
 801b8f0:	f023 0320 	bic.w	r3, r3, #32
 801b8f4:	6023      	str	r3, [r4, #0]
 801b8f6:	2310      	movs	r3, #16
 801b8f8:	e7b0      	b.n	801b85c <_printf_i+0xfc>
 801b8fa:	6823      	ldr	r3, [r4, #0]
 801b8fc:	f043 0320 	orr.w	r3, r3, #32
 801b900:	6023      	str	r3, [r4, #0]
 801b902:	2378      	movs	r3, #120	; 0x78
 801b904:	4828      	ldr	r0, [pc, #160]	; (801b9a8 <_printf_i+0x248>)
 801b906:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b90a:	e7e3      	b.n	801b8d4 <_printf_i+0x174>
 801b90c:	065e      	lsls	r6, r3, #25
 801b90e:	bf48      	it	mi
 801b910:	b2ad      	uxthmi	r5, r5
 801b912:	e7e6      	b.n	801b8e2 <_printf_i+0x182>
 801b914:	4616      	mov	r6, r2
 801b916:	e7bb      	b.n	801b890 <_printf_i+0x130>
 801b918:	680b      	ldr	r3, [r1, #0]
 801b91a:	6826      	ldr	r6, [r4, #0]
 801b91c:	6960      	ldr	r0, [r4, #20]
 801b91e:	1d1d      	adds	r5, r3, #4
 801b920:	600d      	str	r5, [r1, #0]
 801b922:	0635      	lsls	r5, r6, #24
 801b924:	681b      	ldr	r3, [r3, #0]
 801b926:	d501      	bpl.n	801b92c <_printf_i+0x1cc>
 801b928:	6018      	str	r0, [r3, #0]
 801b92a:	e002      	b.n	801b932 <_printf_i+0x1d2>
 801b92c:	0671      	lsls	r1, r6, #25
 801b92e:	d5fb      	bpl.n	801b928 <_printf_i+0x1c8>
 801b930:	8018      	strh	r0, [r3, #0]
 801b932:	2300      	movs	r3, #0
 801b934:	6123      	str	r3, [r4, #16]
 801b936:	4616      	mov	r6, r2
 801b938:	e7ba      	b.n	801b8b0 <_printf_i+0x150>
 801b93a:	680b      	ldr	r3, [r1, #0]
 801b93c:	1d1a      	adds	r2, r3, #4
 801b93e:	600a      	str	r2, [r1, #0]
 801b940:	681e      	ldr	r6, [r3, #0]
 801b942:	6862      	ldr	r2, [r4, #4]
 801b944:	2100      	movs	r1, #0
 801b946:	4630      	mov	r0, r6
 801b948:	f7e4 fc6a 	bl	8000220 <memchr>
 801b94c:	b108      	cbz	r0, 801b952 <_printf_i+0x1f2>
 801b94e:	1b80      	subs	r0, r0, r6
 801b950:	6060      	str	r0, [r4, #4]
 801b952:	6863      	ldr	r3, [r4, #4]
 801b954:	6123      	str	r3, [r4, #16]
 801b956:	2300      	movs	r3, #0
 801b958:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b95c:	e7a8      	b.n	801b8b0 <_printf_i+0x150>
 801b95e:	6923      	ldr	r3, [r4, #16]
 801b960:	4632      	mov	r2, r6
 801b962:	4649      	mov	r1, r9
 801b964:	4640      	mov	r0, r8
 801b966:	47d0      	blx	sl
 801b968:	3001      	adds	r0, #1
 801b96a:	d0ab      	beq.n	801b8c4 <_printf_i+0x164>
 801b96c:	6823      	ldr	r3, [r4, #0]
 801b96e:	079b      	lsls	r3, r3, #30
 801b970:	d413      	bmi.n	801b99a <_printf_i+0x23a>
 801b972:	68e0      	ldr	r0, [r4, #12]
 801b974:	9b03      	ldr	r3, [sp, #12]
 801b976:	4298      	cmp	r0, r3
 801b978:	bfb8      	it	lt
 801b97a:	4618      	movlt	r0, r3
 801b97c:	e7a4      	b.n	801b8c8 <_printf_i+0x168>
 801b97e:	2301      	movs	r3, #1
 801b980:	4632      	mov	r2, r6
 801b982:	4649      	mov	r1, r9
 801b984:	4640      	mov	r0, r8
 801b986:	47d0      	blx	sl
 801b988:	3001      	adds	r0, #1
 801b98a:	d09b      	beq.n	801b8c4 <_printf_i+0x164>
 801b98c:	3501      	adds	r5, #1
 801b98e:	68e3      	ldr	r3, [r4, #12]
 801b990:	9903      	ldr	r1, [sp, #12]
 801b992:	1a5b      	subs	r3, r3, r1
 801b994:	42ab      	cmp	r3, r5
 801b996:	dcf2      	bgt.n	801b97e <_printf_i+0x21e>
 801b998:	e7eb      	b.n	801b972 <_printf_i+0x212>
 801b99a:	2500      	movs	r5, #0
 801b99c:	f104 0619 	add.w	r6, r4, #25
 801b9a0:	e7f5      	b.n	801b98e <_printf_i+0x22e>
 801b9a2:	bf00      	nop
 801b9a4:	08022de8 	.word	0x08022de8
 801b9a8:	08022df9 	.word	0x08022df9

0801b9ac <_scanf_float>:
 801b9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9b0:	b087      	sub	sp, #28
 801b9b2:	4617      	mov	r7, r2
 801b9b4:	9303      	str	r3, [sp, #12]
 801b9b6:	688b      	ldr	r3, [r1, #8]
 801b9b8:	1e5a      	subs	r2, r3, #1
 801b9ba:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801b9be:	bf83      	ittte	hi
 801b9c0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801b9c4:	195b      	addhi	r3, r3, r5
 801b9c6:	9302      	strhi	r3, [sp, #8]
 801b9c8:	2300      	movls	r3, #0
 801b9ca:	bf86      	itte	hi
 801b9cc:	f240 135d 	movwhi	r3, #349	; 0x15d
 801b9d0:	608b      	strhi	r3, [r1, #8]
 801b9d2:	9302      	strls	r3, [sp, #8]
 801b9d4:	680b      	ldr	r3, [r1, #0]
 801b9d6:	468b      	mov	fp, r1
 801b9d8:	2500      	movs	r5, #0
 801b9da:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801b9de:	f84b 3b1c 	str.w	r3, [fp], #28
 801b9e2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801b9e6:	4680      	mov	r8, r0
 801b9e8:	460c      	mov	r4, r1
 801b9ea:	465e      	mov	r6, fp
 801b9ec:	46aa      	mov	sl, r5
 801b9ee:	46a9      	mov	r9, r5
 801b9f0:	9501      	str	r5, [sp, #4]
 801b9f2:	68a2      	ldr	r2, [r4, #8]
 801b9f4:	b152      	cbz	r2, 801ba0c <_scanf_float+0x60>
 801b9f6:	683b      	ldr	r3, [r7, #0]
 801b9f8:	781b      	ldrb	r3, [r3, #0]
 801b9fa:	2b4e      	cmp	r3, #78	; 0x4e
 801b9fc:	d864      	bhi.n	801bac8 <_scanf_float+0x11c>
 801b9fe:	2b40      	cmp	r3, #64	; 0x40
 801ba00:	d83c      	bhi.n	801ba7c <_scanf_float+0xd0>
 801ba02:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801ba06:	b2c8      	uxtb	r0, r1
 801ba08:	280e      	cmp	r0, #14
 801ba0a:	d93a      	bls.n	801ba82 <_scanf_float+0xd6>
 801ba0c:	f1b9 0f00 	cmp.w	r9, #0
 801ba10:	d003      	beq.n	801ba1a <_scanf_float+0x6e>
 801ba12:	6823      	ldr	r3, [r4, #0]
 801ba14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801ba18:	6023      	str	r3, [r4, #0]
 801ba1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ba1e:	f1ba 0f01 	cmp.w	sl, #1
 801ba22:	f200 8113 	bhi.w	801bc4c <_scanf_float+0x2a0>
 801ba26:	455e      	cmp	r6, fp
 801ba28:	f200 8105 	bhi.w	801bc36 <_scanf_float+0x28a>
 801ba2c:	2501      	movs	r5, #1
 801ba2e:	4628      	mov	r0, r5
 801ba30:	b007      	add	sp, #28
 801ba32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba36:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801ba3a:	2a0d      	cmp	r2, #13
 801ba3c:	d8e6      	bhi.n	801ba0c <_scanf_float+0x60>
 801ba3e:	a101      	add	r1, pc, #4	; (adr r1, 801ba44 <_scanf_float+0x98>)
 801ba40:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801ba44:	0801bb83 	.word	0x0801bb83
 801ba48:	0801ba0d 	.word	0x0801ba0d
 801ba4c:	0801ba0d 	.word	0x0801ba0d
 801ba50:	0801ba0d 	.word	0x0801ba0d
 801ba54:	0801bbe3 	.word	0x0801bbe3
 801ba58:	0801bbbb 	.word	0x0801bbbb
 801ba5c:	0801ba0d 	.word	0x0801ba0d
 801ba60:	0801ba0d 	.word	0x0801ba0d
 801ba64:	0801bb91 	.word	0x0801bb91
 801ba68:	0801ba0d 	.word	0x0801ba0d
 801ba6c:	0801ba0d 	.word	0x0801ba0d
 801ba70:	0801ba0d 	.word	0x0801ba0d
 801ba74:	0801ba0d 	.word	0x0801ba0d
 801ba78:	0801bb49 	.word	0x0801bb49
 801ba7c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801ba80:	e7db      	b.n	801ba3a <_scanf_float+0x8e>
 801ba82:	290e      	cmp	r1, #14
 801ba84:	d8c2      	bhi.n	801ba0c <_scanf_float+0x60>
 801ba86:	a001      	add	r0, pc, #4	; (adr r0, 801ba8c <_scanf_float+0xe0>)
 801ba88:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801ba8c:	0801bb3b 	.word	0x0801bb3b
 801ba90:	0801ba0d 	.word	0x0801ba0d
 801ba94:	0801bb3b 	.word	0x0801bb3b
 801ba98:	0801bbcf 	.word	0x0801bbcf
 801ba9c:	0801ba0d 	.word	0x0801ba0d
 801baa0:	0801bae9 	.word	0x0801bae9
 801baa4:	0801bb25 	.word	0x0801bb25
 801baa8:	0801bb25 	.word	0x0801bb25
 801baac:	0801bb25 	.word	0x0801bb25
 801bab0:	0801bb25 	.word	0x0801bb25
 801bab4:	0801bb25 	.word	0x0801bb25
 801bab8:	0801bb25 	.word	0x0801bb25
 801babc:	0801bb25 	.word	0x0801bb25
 801bac0:	0801bb25 	.word	0x0801bb25
 801bac4:	0801bb25 	.word	0x0801bb25
 801bac8:	2b6e      	cmp	r3, #110	; 0x6e
 801baca:	d809      	bhi.n	801bae0 <_scanf_float+0x134>
 801bacc:	2b60      	cmp	r3, #96	; 0x60
 801bace:	d8b2      	bhi.n	801ba36 <_scanf_float+0x8a>
 801bad0:	2b54      	cmp	r3, #84	; 0x54
 801bad2:	d077      	beq.n	801bbc4 <_scanf_float+0x218>
 801bad4:	2b59      	cmp	r3, #89	; 0x59
 801bad6:	d199      	bne.n	801ba0c <_scanf_float+0x60>
 801bad8:	2d07      	cmp	r5, #7
 801bada:	d197      	bne.n	801ba0c <_scanf_float+0x60>
 801badc:	2508      	movs	r5, #8
 801bade:	e029      	b.n	801bb34 <_scanf_float+0x188>
 801bae0:	2b74      	cmp	r3, #116	; 0x74
 801bae2:	d06f      	beq.n	801bbc4 <_scanf_float+0x218>
 801bae4:	2b79      	cmp	r3, #121	; 0x79
 801bae6:	e7f6      	b.n	801bad6 <_scanf_float+0x12a>
 801bae8:	6821      	ldr	r1, [r4, #0]
 801baea:	05c8      	lsls	r0, r1, #23
 801baec:	d51a      	bpl.n	801bb24 <_scanf_float+0x178>
 801baee:	9b02      	ldr	r3, [sp, #8]
 801baf0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801baf4:	6021      	str	r1, [r4, #0]
 801baf6:	f109 0901 	add.w	r9, r9, #1
 801bafa:	b11b      	cbz	r3, 801bb04 <_scanf_float+0x158>
 801bafc:	3b01      	subs	r3, #1
 801bafe:	3201      	adds	r2, #1
 801bb00:	9302      	str	r3, [sp, #8]
 801bb02:	60a2      	str	r2, [r4, #8]
 801bb04:	68a3      	ldr	r3, [r4, #8]
 801bb06:	3b01      	subs	r3, #1
 801bb08:	60a3      	str	r3, [r4, #8]
 801bb0a:	6923      	ldr	r3, [r4, #16]
 801bb0c:	3301      	adds	r3, #1
 801bb0e:	6123      	str	r3, [r4, #16]
 801bb10:	687b      	ldr	r3, [r7, #4]
 801bb12:	3b01      	subs	r3, #1
 801bb14:	2b00      	cmp	r3, #0
 801bb16:	607b      	str	r3, [r7, #4]
 801bb18:	f340 8084 	ble.w	801bc24 <_scanf_float+0x278>
 801bb1c:	683b      	ldr	r3, [r7, #0]
 801bb1e:	3301      	adds	r3, #1
 801bb20:	603b      	str	r3, [r7, #0]
 801bb22:	e766      	b.n	801b9f2 <_scanf_float+0x46>
 801bb24:	eb1a 0f05 	cmn.w	sl, r5
 801bb28:	f47f af70 	bne.w	801ba0c <_scanf_float+0x60>
 801bb2c:	6822      	ldr	r2, [r4, #0]
 801bb2e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801bb32:	6022      	str	r2, [r4, #0]
 801bb34:	f806 3b01 	strb.w	r3, [r6], #1
 801bb38:	e7e4      	b.n	801bb04 <_scanf_float+0x158>
 801bb3a:	6822      	ldr	r2, [r4, #0]
 801bb3c:	0610      	lsls	r0, r2, #24
 801bb3e:	f57f af65 	bpl.w	801ba0c <_scanf_float+0x60>
 801bb42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801bb46:	e7f4      	b.n	801bb32 <_scanf_float+0x186>
 801bb48:	f1ba 0f00 	cmp.w	sl, #0
 801bb4c:	d10e      	bne.n	801bb6c <_scanf_float+0x1c0>
 801bb4e:	f1b9 0f00 	cmp.w	r9, #0
 801bb52:	d10e      	bne.n	801bb72 <_scanf_float+0x1c6>
 801bb54:	6822      	ldr	r2, [r4, #0]
 801bb56:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801bb5a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801bb5e:	d108      	bne.n	801bb72 <_scanf_float+0x1c6>
 801bb60:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801bb64:	6022      	str	r2, [r4, #0]
 801bb66:	f04f 0a01 	mov.w	sl, #1
 801bb6a:	e7e3      	b.n	801bb34 <_scanf_float+0x188>
 801bb6c:	f1ba 0f02 	cmp.w	sl, #2
 801bb70:	d055      	beq.n	801bc1e <_scanf_float+0x272>
 801bb72:	2d01      	cmp	r5, #1
 801bb74:	d002      	beq.n	801bb7c <_scanf_float+0x1d0>
 801bb76:	2d04      	cmp	r5, #4
 801bb78:	f47f af48 	bne.w	801ba0c <_scanf_float+0x60>
 801bb7c:	3501      	adds	r5, #1
 801bb7e:	b2ed      	uxtb	r5, r5
 801bb80:	e7d8      	b.n	801bb34 <_scanf_float+0x188>
 801bb82:	f1ba 0f01 	cmp.w	sl, #1
 801bb86:	f47f af41 	bne.w	801ba0c <_scanf_float+0x60>
 801bb8a:	f04f 0a02 	mov.w	sl, #2
 801bb8e:	e7d1      	b.n	801bb34 <_scanf_float+0x188>
 801bb90:	b97d      	cbnz	r5, 801bbb2 <_scanf_float+0x206>
 801bb92:	f1b9 0f00 	cmp.w	r9, #0
 801bb96:	f47f af3c 	bne.w	801ba12 <_scanf_float+0x66>
 801bb9a:	6822      	ldr	r2, [r4, #0]
 801bb9c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801bba0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801bba4:	f47f af39 	bne.w	801ba1a <_scanf_float+0x6e>
 801bba8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801bbac:	6022      	str	r2, [r4, #0]
 801bbae:	2501      	movs	r5, #1
 801bbb0:	e7c0      	b.n	801bb34 <_scanf_float+0x188>
 801bbb2:	2d03      	cmp	r5, #3
 801bbb4:	d0e2      	beq.n	801bb7c <_scanf_float+0x1d0>
 801bbb6:	2d05      	cmp	r5, #5
 801bbb8:	e7de      	b.n	801bb78 <_scanf_float+0x1cc>
 801bbba:	2d02      	cmp	r5, #2
 801bbbc:	f47f af26 	bne.w	801ba0c <_scanf_float+0x60>
 801bbc0:	2503      	movs	r5, #3
 801bbc2:	e7b7      	b.n	801bb34 <_scanf_float+0x188>
 801bbc4:	2d06      	cmp	r5, #6
 801bbc6:	f47f af21 	bne.w	801ba0c <_scanf_float+0x60>
 801bbca:	2507      	movs	r5, #7
 801bbcc:	e7b2      	b.n	801bb34 <_scanf_float+0x188>
 801bbce:	6822      	ldr	r2, [r4, #0]
 801bbd0:	0591      	lsls	r1, r2, #22
 801bbd2:	f57f af1b 	bpl.w	801ba0c <_scanf_float+0x60>
 801bbd6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801bbda:	6022      	str	r2, [r4, #0]
 801bbdc:	f8cd 9004 	str.w	r9, [sp, #4]
 801bbe0:	e7a8      	b.n	801bb34 <_scanf_float+0x188>
 801bbe2:	6822      	ldr	r2, [r4, #0]
 801bbe4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801bbe8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801bbec:	d006      	beq.n	801bbfc <_scanf_float+0x250>
 801bbee:	0550      	lsls	r0, r2, #21
 801bbf0:	f57f af0c 	bpl.w	801ba0c <_scanf_float+0x60>
 801bbf4:	f1b9 0f00 	cmp.w	r9, #0
 801bbf8:	f43f af0f 	beq.w	801ba1a <_scanf_float+0x6e>
 801bbfc:	0591      	lsls	r1, r2, #22
 801bbfe:	bf58      	it	pl
 801bc00:	9901      	ldrpl	r1, [sp, #4]
 801bc02:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801bc06:	bf58      	it	pl
 801bc08:	eba9 0101 	subpl.w	r1, r9, r1
 801bc0c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801bc10:	bf58      	it	pl
 801bc12:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801bc16:	6022      	str	r2, [r4, #0]
 801bc18:	f04f 0900 	mov.w	r9, #0
 801bc1c:	e78a      	b.n	801bb34 <_scanf_float+0x188>
 801bc1e:	f04f 0a03 	mov.w	sl, #3
 801bc22:	e787      	b.n	801bb34 <_scanf_float+0x188>
 801bc24:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801bc28:	4639      	mov	r1, r7
 801bc2a:	4640      	mov	r0, r8
 801bc2c:	4798      	blx	r3
 801bc2e:	2800      	cmp	r0, #0
 801bc30:	f43f aedf 	beq.w	801b9f2 <_scanf_float+0x46>
 801bc34:	e6ea      	b.n	801ba0c <_scanf_float+0x60>
 801bc36:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bc3a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801bc3e:	463a      	mov	r2, r7
 801bc40:	4640      	mov	r0, r8
 801bc42:	4798      	blx	r3
 801bc44:	6923      	ldr	r3, [r4, #16]
 801bc46:	3b01      	subs	r3, #1
 801bc48:	6123      	str	r3, [r4, #16]
 801bc4a:	e6ec      	b.n	801ba26 <_scanf_float+0x7a>
 801bc4c:	1e6b      	subs	r3, r5, #1
 801bc4e:	2b06      	cmp	r3, #6
 801bc50:	d825      	bhi.n	801bc9e <_scanf_float+0x2f2>
 801bc52:	2d02      	cmp	r5, #2
 801bc54:	d836      	bhi.n	801bcc4 <_scanf_float+0x318>
 801bc56:	455e      	cmp	r6, fp
 801bc58:	f67f aee8 	bls.w	801ba2c <_scanf_float+0x80>
 801bc5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bc60:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801bc64:	463a      	mov	r2, r7
 801bc66:	4640      	mov	r0, r8
 801bc68:	4798      	blx	r3
 801bc6a:	6923      	ldr	r3, [r4, #16]
 801bc6c:	3b01      	subs	r3, #1
 801bc6e:	6123      	str	r3, [r4, #16]
 801bc70:	e7f1      	b.n	801bc56 <_scanf_float+0x2aa>
 801bc72:	9802      	ldr	r0, [sp, #8]
 801bc74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bc78:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801bc7c:	9002      	str	r0, [sp, #8]
 801bc7e:	463a      	mov	r2, r7
 801bc80:	4640      	mov	r0, r8
 801bc82:	4798      	blx	r3
 801bc84:	6923      	ldr	r3, [r4, #16]
 801bc86:	3b01      	subs	r3, #1
 801bc88:	6123      	str	r3, [r4, #16]
 801bc8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bc8e:	fa5f fa8a 	uxtb.w	sl, sl
 801bc92:	f1ba 0f02 	cmp.w	sl, #2
 801bc96:	d1ec      	bne.n	801bc72 <_scanf_float+0x2c6>
 801bc98:	3d03      	subs	r5, #3
 801bc9a:	b2ed      	uxtb	r5, r5
 801bc9c:	1b76      	subs	r6, r6, r5
 801bc9e:	6823      	ldr	r3, [r4, #0]
 801bca0:	05da      	lsls	r2, r3, #23
 801bca2:	d52f      	bpl.n	801bd04 <_scanf_float+0x358>
 801bca4:	055b      	lsls	r3, r3, #21
 801bca6:	d510      	bpl.n	801bcca <_scanf_float+0x31e>
 801bca8:	455e      	cmp	r6, fp
 801bcaa:	f67f aebf 	bls.w	801ba2c <_scanf_float+0x80>
 801bcae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bcb2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801bcb6:	463a      	mov	r2, r7
 801bcb8:	4640      	mov	r0, r8
 801bcba:	4798      	blx	r3
 801bcbc:	6923      	ldr	r3, [r4, #16]
 801bcbe:	3b01      	subs	r3, #1
 801bcc0:	6123      	str	r3, [r4, #16]
 801bcc2:	e7f1      	b.n	801bca8 <_scanf_float+0x2fc>
 801bcc4:	46aa      	mov	sl, r5
 801bcc6:	9602      	str	r6, [sp, #8]
 801bcc8:	e7df      	b.n	801bc8a <_scanf_float+0x2de>
 801bcca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801bcce:	6923      	ldr	r3, [r4, #16]
 801bcd0:	2965      	cmp	r1, #101	; 0x65
 801bcd2:	f103 33ff 	add.w	r3, r3, #4294967295
 801bcd6:	f106 35ff 	add.w	r5, r6, #4294967295
 801bcda:	6123      	str	r3, [r4, #16]
 801bcdc:	d00c      	beq.n	801bcf8 <_scanf_float+0x34c>
 801bcde:	2945      	cmp	r1, #69	; 0x45
 801bce0:	d00a      	beq.n	801bcf8 <_scanf_float+0x34c>
 801bce2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bce6:	463a      	mov	r2, r7
 801bce8:	4640      	mov	r0, r8
 801bcea:	4798      	blx	r3
 801bcec:	6923      	ldr	r3, [r4, #16]
 801bcee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801bcf2:	3b01      	subs	r3, #1
 801bcf4:	1eb5      	subs	r5, r6, #2
 801bcf6:	6123      	str	r3, [r4, #16]
 801bcf8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bcfc:	463a      	mov	r2, r7
 801bcfe:	4640      	mov	r0, r8
 801bd00:	4798      	blx	r3
 801bd02:	462e      	mov	r6, r5
 801bd04:	6825      	ldr	r5, [r4, #0]
 801bd06:	f015 0510 	ands.w	r5, r5, #16
 801bd0a:	d158      	bne.n	801bdbe <_scanf_float+0x412>
 801bd0c:	7035      	strb	r5, [r6, #0]
 801bd0e:	6823      	ldr	r3, [r4, #0]
 801bd10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801bd14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801bd18:	d11c      	bne.n	801bd54 <_scanf_float+0x3a8>
 801bd1a:	9b01      	ldr	r3, [sp, #4]
 801bd1c:	454b      	cmp	r3, r9
 801bd1e:	eba3 0209 	sub.w	r2, r3, r9
 801bd22:	d124      	bne.n	801bd6e <_scanf_float+0x3c2>
 801bd24:	2200      	movs	r2, #0
 801bd26:	4659      	mov	r1, fp
 801bd28:	4640      	mov	r0, r8
 801bd2a:	f001 f87f 	bl	801ce2c <_strtod_r>
 801bd2e:	9b03      	ldr	r3, [sp, #12]
 801bd30:	6821      	ldr	r1, [r4, #0]
 801bd32:	681b      	ldr	r3, [r3, #0]
 801bd34:	f011 0f02 	tst.w	r1, #2
 801bd38:	ec57 6b10 	vmov	r6, r7, d0
 801bd3c:	f103 0204 	add.w	r2, r3, #4
 801bd40:	d020      	beq.n	801bd84 <_scanf_float+0x3d8>
 801bd42:	9903      	ldr	r1, [sp, #12]
 801bd44:	600a      	str	r2, [r1, #0]
 801bd46:	681b      	ldr	r3, [r3, #0]
 801bd48:	e9c3 6700 	strd	r6, r7, [r3]
 801bd4c:	68e3      	ldr	r3, [r4, #12]
 801bd4e:	3301      	adds	r3, #1
 801bd50:	60e3      	str	r3, [r4, #12]
 801bd52:	e66c      	b.n	801ba2e <_scanf_float+0x82>
 801bd54:	9b04      	ldr	r3, [sp, #16]
 801bd56:	2b00      	cmp	r3, #0
 801bd58:	d0e4      	beq.n	801bd24 <_scanf_float+0x378>
 801bd5a:	9905      	ldr	r1, [sp, #20]
 801bd5c:	230a      	movs	r3, #10
 801bd5e:	462a      	mov	r2, r5
 801bd60:	3101      	adds	r1, #1
 801bd62:	4640      	mov	r0, r8
 801bd64:	f001 f948 	bl	801cff8 <_strtol_r>
 801bd68:	9b04      	ldr	r3, [sp, #16]
 801bd6a:	9e05      	ldr	r6, [sp, #20]
 801bd6c:	1ac2      	subs	r2, r0, r3
 801bd6e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801bd72:	429e      	cmp	r6, r3
 801bd74:	bf28      	it	cs
 801bd76:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801bd7a:	4912      	ldr	r1, [pc, #72]	; (801bdc4 <_scanf_float+0x418>)
 801bd7c:	4630      	mov	r0, r6
 801bd7e:	f000 f977 	bl	801c070 <siprintf>
 801bd82:	e7cf      	b.n	801bd24 <_scanf_float+0x378>
 801bd84:	f011 0f04 	tst.w	r1, #4
 801bd88:	9903      	ldr	r1, [sp, #12]
 801bd8a:	600a      	str	r2, [r1, #0]
 801bd8c:	d1db      	bne.n	801bd46 <_scanf_float+0x39a>
 801bd8e:	f8d3 8000 	ldr.w	r8, [r3]
 801bd92:	ee10 2a10 	vmov	r2, s0
 801bd96:	ee10 0a10 	vmov	r0, s0
 801bd9a:	463b      	mov	r3, r7
 801bd9c:	4639      	mov	r1, r7
 801bd9e:	f7e4 fee5 	bl	8000b6c <__aeabi_dcmpun>
 801bda2:	b128      	cbz	r0, 801bdb0 <_scanf_float+0x404>
 801bda4:	4808      	ldr	r0, [pc, #32]	; (801bdc8 <_scanf_float+0x41c>)
 801bda6:	f000 f919 	bl	801bfdc <nanf>
 801bdaa:	ed88 0a00 	vstr	s0, [r8]
 801bdae:	e7cd      	b.n	801bd4c <_scanf_float+0x3a0>
 801bdb0:	4630      	mov	r0, r6
 801bdb2:	4639      	mov	r1, r7
 801bdb4:	f7e4 ff38 	bl	8000c28 <__aeabi_d2f>
 801bdb8:	f8c8 0000 	str.w	r0, [r8]
 801bdbc:	e7c6      	b.n	801bd4c <_scanf_float+0x3a0>
 801bdbe:	2500      	movs	r5, #0
 801bdc0:	e635      	b.n	801ba2e <_scanf_float+0x82>
 801bdc2:	bf00      	nop
 801bdc4:	08022e0a 	.word	0x08022e0a
 801bdc8:	08022f38 	.word	0x08022f38

0801bdcc <iprintf>:
 801bdcc:	b40f      	push	{r0, r1, r2, r3}
 801bdce:	4b0a      	ldr	r3, [pc, #40]	; (801bdf8 <iprintf+0x2c>)
 801bdd0:	b513      	push	{r0, r1, r4, lr}
 801bdd2:	681c      	ldr	r4, [r3, #0]
 801bdd4:	b124      	cbz	r4, 801bde0 <iprintf+0x14>
 801bdd6:	69a3      	ldr	r3, [r4, #24]
 801bdd8:	b913      	cbnz	r3, 801bde0 <iprintf+0x14>
 801bdda:	4620      	mov	r0, r4
 801bddc:	f7fe fc30 	bl	801a640 <__sinit>
 801bde0:	ab05      	add	r3, sp, #20
 801bde2:	9a04      	ldr	r2, [sp, #16]
 801bde4:	68a1      	ldr	r1, [r4, #8]
 801bde6:	9301      	str	r3, [sp, #4]
 801bde8:	4620      	mov	r0, r4
 801bdea:	f004 f9af 	bl	802014c <_vfiprintf_r>
 801bdee:	b002      	add	sp, #8
 801bdf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bdf4:	b004      	add	sp, #16
 801bdf6:	4770      	bx	lr
 801bdf8:	200000f8 	.word	0x200000f8

0801bdfc <_puts_r>:
 801bdfc:	b570      	push	{r4, r5, r6, lr}
 801bdfe:	460e      	mov	r6, r1
 801be00:	4605      	mov	r5, r0
 801be02:	b118      	cbz	r0, 801be0c <_puts_r+0x10>
 801be04:	6983      	ldr	r3, [r0, #24]
 801be06:	b90b      	cbnz	r3, 801be0c <_puts_r+0x10>
 801be08:	f7fe fc1a 	bl	801a640 <__sinit>
 801be0c:	69ab      	ldr	r3, [r5, #24]
 801be0e:	68ac      	ldr	r4, [r5, #8]
 801be10:	b913      	cbnz	r3, 801be18 <_puts_r+0x1c>
 801be12:	4628      	mov	r0, r5
 801be14:	f7fe fc14 	bl	801a640 <__sinit>
 801be18:	4b2c      	ldr	r3, [pc, #176]	; (801becc <_puts_r+0xd0>)
 801be1a:	429c      	cmp	r4, r3
 801be1c:	d120      	bne.n	801be60 <_puts_r+0x64>
 801be1e:	686c      	ldr	r4, [r5, #4]
 801be20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801be22:	07db      	lsls	r3, r3, #31
 801be24:	d405      	bmi.n	801be32 <_puts_r+0x36>
 801be26:	89a3      	ldrh	r3, [r4, #12]
 801be28:	0598      	lsls	r0, r3, #22
 801be2a:	d402      	bmi.n	801be32 <_puts_r+0x36>
 801be2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801be2e:	f7fe fde7 	bl	801aa00 <__retarget_lock_acquire_recursive>
 801be32:	89a3      	ldrh	r3, [r4, #12]
 801be34:	0719      	lsls	r1, r3, #28
 801be36:	d51d      	bpl.n	801be74 <_puts_r+0x78>
 801be38:	6923      	ldr	r3, [r4, #16]
 801be3a:	b1db      	cbz	r3, 801be74 <_puts_r+0x78>
 801be3c:	3e01      	subs	r6, #1
 801be3e:	68a3      	ldr	r3, [r4, #8]
 801be40:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801be44:	3b01      	subs	r3, #1
 801be46:	60a3      	str	r3, [r4, #8]
 801be48:	bb39      	cbnz	r1, 801be9a <_puts_r+0x9e>
 801be4a:	2b00      	cmp	r3, #0
 801be4c:	da38      	bge.n	801bec0 <_puts_r+0xc4>
 801be4e:	4622      	mov	r2, r4
 801be50:	210a      	movs	r1, #10
 801be52:	4628      	mov	r0, r5
 801be54:	f001 fbd4 	bl	801d600 <__swbuf_r>
 801be58:	3001      	adds	r0, #1
 801be5a:	d011      	beq.n	801be80 <_puts_r+0x84>
 801be5c:	250a      	movs	r5, #10
 801be5e:	e011      	b.n	801be84 <_puts_r+0x88>
 801be60:	4b1b      	ldr	r3, [pc, #108]	; (801bed0 <_puts_r+0xd4>)
 801be62:	429c      	cmp	r4, r3
 801be64:	d101      	bne.n	801be6a <_puts_r+0x6e>
 801be66:	68ac      	ldr	r4, [r5, #8]
 801be68:	e7da      	b.n	801be20 <_puts_r+0x24>
 801be6a:	4b1a      	ldr	r3, [pc, #104]	; (801bed4 <_puts_r+0xd8>)
 801be6c:	429c      	cmp	r4, r3
 801be6e:	bf08      	it	eq
 801be70:	68ec      	ldreq	r4, [r5, #12]
 801be72:	e7d5      	b.n	801be20 <_puts_r+0x24>
 801be74:	4621      	mov	r1, r4
 801be76:	4628      	mov	r0, r5
 801be78:	f001 fc26 	bl	801d6c8 <__swsetup_r>
 801be7c:	2800      	cmp	r0, #0
 801be7e:	d0dd      	beq.n	801be3c <_puts_r+0x40>
 801be80:	f04f 35ff 	mov.w	r5, #4294967295
 801be84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801be86:	07da      	lsls	r2, r3, #31
 801be88:	d405      	bmi.n	801be96 <_puts_r+0x9a>
 801be8a:	89a3      	ldrh	r3, [r4, #12]
 801be8c:	059b      	lsls	r3, r3, #22
 801be8e:	d402      	bmi.n	801be96 <_puts_r+0x9a>
 801be90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801be92:	f7fe fdb7 	bl	801aa04 <__retarget_lock_release_recursive>
 801be96:	4628      	mov	r0, r5
 801be98:	bd70      	pop	{r4, r5, r6, pc}
 801be9a:	2b00      	cmp	r3, #0
 801be9c:	da04      	bge.n	801bea8 <_puts_r+0xac>
 801be9e:	69a2      	ldr	r2, [r4, #24]
 801bea0:	429a      	cmp	r2, r3
 801bea2:	dc06      	bgt.n	801beb2 <_puts_r+0xb6>
 801bea4:	290a      	cmp	r1, #10
 801bea6:	d004      	beq.n	801beb2 <_puts_r+0xb6>
 801bea8:	6823      	ldr	r3, [r4, #0]
 801beaa:	1c5a      	adds	r2, r3, #1
 801beac:	6022      	str	r2, [r4, #0]
 801beae:	7019      	strb	r1, [r3, #0]
 801beb0:	e7c5      	b.n	801be3e <_puts_r+0x42>
 801beb2:	4622      	mov	r2, r4
 801beb4:	4628      	mov	r0, r5
 801beb6:	f001 fba3 	bl	801d600 <__swbuf_r>
 801beba:	3001      	adds	r0, #1
 801bebc:	d1bf      	bne.n	801be3e <_puts_r+0x42>
 801bebe:	e7df      	b.n	801be80 <_puts_r+0x84>
 801bec0:	6823      	ldr	r3, [r4, #0]
 801bec2:	250a      	movs	r5, #10
 801bec4:	1c5a      	adds	r2, r3, #1
 801bec6:	6022      	str	r2, [r4, #0]
 801bec8:	701d      	strb	r5, [r3, #0]
 801beca:	e7db      	b.n	801be84 <_puts_r+0x88>
 801becc:	08022c5c 	.word	0x08022c5c
 801bed0:	08022c7c 	.word	0x08022c7c
 801bed4:	08022c3c 	.word	0x08022c3c

0801bed8 <puts>:
 801bed8:	4b02      	ldr	r3, [pc, #8]	; (801bee4 <puts+0xc>)
 801beda:	4601      	mov	r1, r0
 801bedc:	6818      	ldr	r0, [r3, #0]
 801bede:	f7ff bf8d 	b.w	801bdfc <_puts_r>
 801bee2:	bf00      	nop
 801bee4:	200000f8 	.word	0x200000f8

0801bee8 <cleanup_glue>:
 801bee8:	b538      	push	{r3, r4, r5, lr}
 801beea:	460c      	mov	r4, r1
 801beec:	6809      	ldr	r1, [r1, #0]
 801beee:	4605      	mov	r5, r0
 801bef0:	b109      	cbz	r1, 801bef6 <cleanup_glue+0xe>
 801bef2:	f7ff fff9 	bl	801bee8 <cleanup_glue>
 801bef6:	4621      	mov	r1, r4
 801bef8:	4628      	mov	r0, r5
 801befa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801befe:	f7ff b841 	b.w	801af84 <_free_r>
	...

0801bf04 <_reclaim_reent>:
 801bf04:	4b2c      	ldr	r3, [pc, #176]	; (801bfb8 <_reclaim_reent+0xb4>)
 801bf06:	681b      	ldr	r3, [r3, #0]
 801bf08:	4283      	cmp	r3, r0
 801bf0a:	b570      	push	{r4, r5, r6, lr}
 801bf0c:	4604      	mov	r4, r0
 801bf0e:	d051      	beq.n	801bfb4 <_reclaim_reent+0xb0>
 801bf10:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801bf12:	b143      	cbz	r3, 801bf26 <_reclaim_reent+0x22>
 801bf14:	68db      	ldr	r3, [r3, #12]
 801bf16:	2b00      	cmp	r3, #0
 801bf18:	d14a      	bne.n	801bfb0 <_reclaim_reent+0xac>
 801bf1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801bf1c:	6819      	ldr	r1, [r3, #0]
 801bf1e:	b111      	cbz	r1, 801bf26 <_reclaim_reent+0x22>
 801bf20:	4620      	mov	r0, r4
 801bf22:	f7ff f82f 	bl	801af84 <_free_r>
 801bf26:	6961      	ldr	r1, [r4, #20]
 801bf28:	b111      	cbz	r1, 801bf30 <_reclaim_reent+0x2c>
 801bf2a:	4620      	mov	r0, r4
 801bf2c:	f7ff f82a 	bl	801af84 <_free_r>
 801bf30:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801bf32:	b111      	cbz	r1, 801bf3a <_reclaim_reent+0x36>
 801bf34:	4620      	mov	r0, r4
 801bf36:	f7ff f825 	bl	801af84 <_free_r>
 801bf3a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801bf3c:	b111      	cbz	r1, 801bf44 <_reclaim_reent+0x40>
 801bf3e:	4620      	mov	r0, r4
 801bf40:	f7ff f820 	bl	801af84 <_free_r>
 801bf44:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801bf46:	b111      	cbz	r1, 801bf4e <_reclaim_reent+0x4a>
 801bf48:	4620      	mov	r0, r4
 801bf4a:	f7ff f81b 	bl	801af84 <_free_r>
 801bf4e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801bf50:	b111      	cbz	r1, 801bf58 <_reclaim_reent+0x54>
 801bf52:	4620      	mov	r0, r4
 801bf54:	f7ff f816 	bl	801af84 <_free_r>
 801bf58:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801bf5a:	b111      	cbz	r1, 801bf62 <_reclaim_reent+0x5e>
 801bf5c:	4620      	mov	r0, r4
 801bf5e:	f7ff f811 	bl	801af84 <_free_r>
 801bf62:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801bf64:	b111      	cbz	r1, 801bf6c <_reclaim_reent+0x68>
 801bf66:	4620      	mov	r0, r4
 801bf68:	f7ff f80c 	bl	801af84 <_free_r>
 801bf6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bf6e:	b111      	cbz	r1, 801bf76 <_reclaim_reent+0x72>
 801bf70:	4620      	mov	r0, r4
 801bf72:	f7ff f807 	bl	801af84 <_free_r>
 801bf76:	69a3      	ldr	r3, [r4, #24]
 801bf78:	b1e3      	cbz	r3, 801bfb4 <_reclaim_reent+0xb0>
 801bf7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801bf7c:	4620      	mov	r0, r4
 801bf7e:	4798      	blx	r3
 801bf80:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801bf82:	b1b9      	cbz	r1, 801bfb4 <_reclaim_reent+0xb0>
 801bf84:	4620      	mov	r0, r4
 801bf86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bf8a:	f7ff bfad 	b.w	801bee8 <cleanup_glue>
 801bf8e:	5949      	ldr	r1, [r1, r5]
 801bf90:	b941      	cbnz	r1, 801bfa4 <_reclaim_reent+0xa0>
 801bf92:	3504      	adds	r5, #4
 801bf94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801bf96:	2d80      	cmp	r5, #128	; 0x80
 801bf98:	68d9      	ldr	r1, [r3, #12]
 801bf9a:	d1f8      	bne.n	801bf8e <_reclaim_reent+0x8a>
 801bf9c:	4620      	mov	r0, r4
 801bf9e:	f7fe fff1 	bl	801af84 <_free_r>
 801bfa2:	e7ba      	b.n	801bf1a <_reclaim_reent+0x16>
 801bfa4:	680e      	ldr	r6, [r1, #0]
 801bfa6:	4620      	mov	r0, r4
 801bfa8:	f7fe ffec 	bl	801af84 <_free_r>
 801bfac:	4631      	mov	r1, r6
 801bfae:	e7ef      	b.n	801bf90 <_reclaim_reent+0x8c>
 801bfb0:	2500      	movs	r5, #0
 801bfb2:	e7ef      	b.n	801bf94 <_reclaim_reent+0x90>
 801bfb4:	bd70      	pop	{r4, r5, r6, pc}
 801bfb6:	bf00      	nop
 801bfb8:	200000f8 	.word	0x200000f8

0801bfbc <_sbrk_r>:
 801bfbc:	b538      	push	{r3, r4, r5, lr}
 801bfbe:	4d06      	ldr	r5, [pc, #24]	; (801bfd8 <_sbrk_r+0x1c>)
 801bfc0:	2300      	movs	r3, #0
 801bfc2:	4604      	mov	r4, r0
 801bfc4:	4608      	mov	r0, r1
 801bfc6:	602b      	str	r3, [r5, #0]
 801bfc8:	f004 fc3e 	bl	8020848 <_sbrk>
 801bfcc:	1c43      	adds	r3, r0, #1
 801bfce:	d102      	bne.n	801bfd6 <_sbrk_r+0x1a>
 801bfd0:	682b      	ldr	r3, [r5, #0]
 801bfd2:	b103      	cbz	r3, 801bfd6 <_sbrk_r+0x1a>
 801bfd4:	6023      	str	r3, [r4, #0]
 801bfd6:	bd38      	pop	{r3, r4, r5, pc}
 801bfd8:	20009d08 	.word	0x20009d08

0801bfdc <nanf>:
 801bfdc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801bfe4 <nanf+0x8>
 801bfe0:	4770      	bx	lr
 801bfe2:	bf00      	nop
 801bfe4:	7fc00000 	.word	0x7fc00000

0801bfe8 <_raise_r>:
 801bfe8:	291f      	cmp	r1, #31
 801bfea:	b538      	push	{r3, r4, r5, lr}
 801bfec:	4604      	mov	r4, r0
 801bfee:	460d      	mov	r5, r1
 801bff0:	d904      	bls.n	801bffc <_raise_r+0x14>
 801bff2:	2316      	movs	r3, #22
 801bff4:	6003      	str	r3, [r0, #0]
 801bff6:	f04f 30ff 	mov.w	r0, #4294967295
 801bffa:	bd38      	pop	{r3, r4, r5, pc}
 801bffc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801bffe:	b112      	cbz	r2, 801c006 <_raise_r+0x1e>
 801c000:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c004:	b94b      	cbnz	r3, 801c01a <_raise_r+0x32>
 801c006:	4620      	mov	r0, r4
 801c008:	f000 f830 	bl	801c06c <_getpid_r>
 801c00c:	462a      	mov	r2, r5
 801c00e:	4601      	mov	r1, r0
 801c010:	4620      	mov	r0, r4
 801c012:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c016:	f000 b817 	b.w	801c048 <_kill_r>
 801c01a:	2b01      	cmp	r3, #1
 801c01c:	d00a      	beq.n	801c034 <_raise_r+0x4c>
 801c01e:	1c59      	adds	r1, r3, #1
 801c020:	d103      	bne.n	801c02a <_raise_r+0x42>
 801c022:	2316      	movs	r3, #22
 801c024:	6003      	str	r3, [r0, #0]
 801c026:	2001      	movs	r0, #1
 801c028:	e7e7      	b.n	801bffa <_raise_r+0x12>
 801c02a:	2400      	movs	r4, #0
 801c02c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801c030:	4628      	mov	r0, r5
 801c032:	4798      	blx	r3
 801c034:	2000      	movs	r0, #0
 801c036:	e7e0      	b.n	801bffa <_raise_r+0x12>

0801c038 <raise>:
 801c038:	4b02      	ldr	r3, [pc, #8]	; (801c044 <raise+0xc>)
 801c03a:	4601      	mov	r1, r0
 801c03c:	6818      	ldr	r0, [r3, #0]
 801c03e:	f7ff bfd3 	b.w	801bfe8 <_raise_r>
 801c042:	bf00      	nop
 801c044:	200000f8 	.word	0x200000f8

0801c048 <_kill_r>:
 801c048:	b538      	push	{r3, r4, r5, lr}
 801c04a:	4d07      	ldr	r5, [pc, #28]	; (801c068 <_kill_r+0x20>)
 801c04c:	2300      	movs	r3, #0
 801c04e:	4604      	mov	r4, r0
 801c050:	4608      	mov	r0, r1
 801c052:	4611      	mov	r1, r2
 801c054:	602b      	str	r3, [r5, #0]
 801c056:	f004 fbdf 	bl	8020818 <_kill>
 801c05a:	1c43      	adds	r3, r0, #1
 801c05c:	d102      	bne.n	801c064 <_kill_r+0x1c>
 801c05e:	682b      	ldr	r3, [r5, #0]
 801c060:	b103      	cbz	r3, 801c064 <_kill_r+0x1c>
 801c062:	6023      	str	r3, [r4, #0]
 801c064:	bd38      	pop	{r3, r4, r5, pc}
 801c066:	bf00      	nop
 801c068:	20009d08 	.word	0x20009d08

0801c06c <_getpid_r>:
 801c06c:	f004 bbc4 	b.w	80207f8 <_getpid>

0801c070 <siprintf>:
 801c070:	b40e      	push	{r1, r2, r3}
 801c072:	b500      	push	{lr}
 801c074:	b09c      	sub	sp, #112	; 0x70
 801c076:	ab1d      	add	r3, sp, #116	; 0x74
 801c078:	9002      	str	r0, [sp, #8]
 801c07a:	9006      	str	r0, [sp, #24]
 801c07c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801c080:	4809      	ldr	r0, [pc, #36]	; (801c0a8 <siprintf+0x38>)
 801c082:	9107      	str	r1, [sp, #28]
 801c084:	9104      	str	r1, [sp, #16]
 801c086:	4909      	ldr	r1, [pc, #36]	; (801c0ac <siprintf+0x3c>)
 801c088:	f853 2b04 	ldr.w	r2, [r3], #4
 801c08c:	9105      	str	r1, [sp, #20]
 801c08e:	6800      	ldr	r0, [r0, #0]
 801c090:	9301      	str	r3, [sp, #4]
 801c092:	a902      	add	r1, sp, #8
 801c094:	f003 fd5e 	bl	801fb54 <_svfiprintf_r>
 801c098:	9b02      	ldr	r3, [sp, #8]
 801c09a:	2200      	movs	r2, #0
 801c09c:	701a      	strb	r2, [r3, #0]
 801c09e:	b01c      	add	sp, #112	; 0x70
 801c0a0:	f85d eb04 	ldr.w	lr, [sp], #4
 801c0a4:	b003      	add	sp, #12
 801c0a6:	4770      	bx	lr
 801c0a8:	200000f8 	.word	0x200000f8
 801c0ac:	ffff0208 	.word	0xffff0208

0801c0b0 <siscanf>:
 801c0b0:	b40e      	push	{r1, r2, r3}
 801c0b2:	b510      	push	{r4, lr}
 801c0b4:	b09f      	sub	sp, #124	; 0x7c
 801c0b6:	ac21      	add	r4, sp, #132	; 0x84
 801c0b8:	f44f 7101 	mov.w	r1, #516	; 0x204
 801c0bc:	f854 2b04 	ldr.w	r2, [r4], #4
 801c0c0:	9201      	str	r2, [sp, #4]
 801c0c2:	f8ad 101c 	strh.w	r1, [sp, #28]
 801c0c6:	9004      	str	r0, [sp, #16]
 801c0c8:	9008      	str	r0, [sp, #32]
 801c0ca:	f7e4 f89b 	bl	8000204 <strlen>
 801c0ce:	4b0c      	ldr	r3, [pc, #48]	; (801c100 <siscanf+0x50>)
 801c0d0:	9005      	str	r0, [sp, #20]
 801c0d2:	9009      	str	r0, [sp, #36]	; 0x24
 801c0d4:	930d      	str	r3, [sp, #52]	; 0x34
 801c0d6:	480b      	ldr	r0, [pc, #44]	; (801c104 <siscanf+0x54>)
 801c0d8:	9a01      	ldr	r2, [sp, #4]
 801c0da:	6800      	ldr	r0, [r0, #0]
 801c0dc:	9403      	str	r4, [sp, #12]
 801c0de:	2300      	movs	r3, #0
 801c0e0:	9311      	str	r3, [sp, #68]	; 0x44
 801c0e2:	9316      	str	r3, [sp, #88]	; 0x58
 801c0e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c0e8:	f8ad 301e 	strh.w	r3, [sp, #30]
 801c0ec:	a904      	add	r1, sp, #16
 801c0ee:	4623      	mov	r3, r4
 801c0f0:	f003 fe8a 	bl	801fe08 <__ssvfiscanf_r>
 801c0f4:	b01f      	add	sp, #124	; 0x7c
 801c0f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c0fa:	b003      	add	sp, #12
 801c0fc:	4770      	bx	lr
 801c0fe:	bf00      	nop
 801c100:	0801c12b 	.word	0x0801c12b
 801c104:	200000f8 	.word	0x200000f8

0801c108 <__sread>:
 801c108:	b510      	push	{r4, lr}
 801c10a:	460c      	mov	r4, r1
 801c10c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c110:	f004 fa98 	bl	8020644 <_read_r>
 801c114:	2800      	cmp	r0, #0
 801c116:	bfab      	itete	ge
 801c118:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801c11a:	89a3      	ldrhlt	r3, [r4, #12]
 801c11c:	181b      	addge	r3, r3, r0
 801c11e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801c122:	bfac      	ite	ge
 801c124:	6563      	strge	r3, [r4, #84]	; 0x54
 801c126:	81a3      	strhlt	r3, [r4, #12]
 801c128:	bd10      	pop	{r4, pc}

0801c12a <__seofread>:
 801c12a:	2000      	movs	r0, #0
 801c12c:	4770      	bx	lr

0801c12e <__swrite>:
 801c12e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c132:	461f      	mov	r7, r3
 801c134:	898b      	ldrh	r3, [r1, #12]
 801c136:	05db      	lsls	r3, r3, #23
 801c138:	4605      	mov	r5, r0
 801c13a:	460c      	mov	r4, r1
 801c13c:	4616      	mov	r6, r2
 801c13e:	d505      	bpl.n	801c14c <__swrite+0x1e>
 801c140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c144:	2302      	movs	r3, #2
 801c146:	2200      	movs	r2, #0
 801c148:	f002 ff24 	bl	801ef94 <_lseek_r>
 801c14c:	89a3      	ldrh	r3, [r4, #12]
 801c14e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c152:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c156:	81a3      	strh	r3, [r4, #12]
 801c158:	4632      	mov	r2, r6
 801c15a:	463b      	mov	r3, r7
 801c15c:	4628      	mov	r0, r5
 801c15e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c162:	f001 ba9f 	b.w	801d6a4 <_write_r>

0801c166 <__sseek>:
 801c166:	b510      	push	{r4, lr}
 801c168:	460c      	mov	r4, r1
 801c16a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c16e:	f002 ff11 	bl	801ef94 <_lseek_r>
 801c172:	1c43      	adds	r3, r0, #1
 801c174:	89a3      	ldrh	r3, [r4, #12]
 801c176:	bf15      	itete	ne
 801c178:	6560      	strne	r0, [r4, #84]	; 0x54
 801c17a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801c17e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801c182:	81a3      	strheq	r3, [r4, #12]
 801c184:	bf18      	it	ne
 801c186:	81a3      	strhne	r3, [r4, #12]
 801c188:	bd10      	pop	{r4, pc}

0801c18a <__sclose>:
 801c18a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c18e:	f001 bb27 	b.w	801d7e0 <_close_r>

0801c192 <strchr>:
 801c192:	b2c9      	uxtb	r1, r1
 801c194:	4603      	mov	r3, r0
 801c196:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c19a:	b11a      	cbz	r2, 801c1a4 <strchr+0x12>
 801c19c:	428a      	cmp	r2, r1
 801c19e:	d1f9      	bne.n	801c194 <strchr+0x2>
 801c1a0:	4618      	mov	r0, r3
 801c1a2:	4770      	bx	lr
 801c1a4:	2900      	cmp	r1, #0
 801c1a6:	bf18      	it	ne
 801c1a8:	2300      	movne	r3, #0
 801c1aa:	e7f9      	b.n	801c1a0 <strchr+0xe>

0801c1ac <strcpy>:
 801c1ac:	4603      	mov	r3, r0
 801c1ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c1b2:	f803 2b01 	strb.w	r2, [r3], #1
 801c1b6:	2a00      	cmp	r2, #0
 801c1b8:	d1f9      	bne.n	801c1ae <strcpy+0x2>
 801c1ba:	4770      	bx	lr

0801c1bc <strncmp>:
 801c1bc:	b510      	push	{r4, lr}
 801c1be:	b16a      	cbz	r2, 801c1dc <strncmp+0x20>
 801c1c0:	3901      	subs	r1, #1
 801c1c2:	1884      	adds	r4, r0, r2
 801c1c4:	f810 3b01 	ldrb.w	r3, [r0], #1
 801c1c8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801c1cc:	4293      	cmp	r3, r2
 801c1ce:	d103      	bne.n	801c1d8 <strncmp+0x1c>
 801c1d0:	42a0      	cmp	r0, r4
 801c1d2:	d001      	beq.n	801c1d8 <strncmp+0x1c>
 801c1d4:	2b00      	cmp	r3, #0
 801c1d6:	d1f5      	bne.n	801c1c4 <strncmp+0x8>
 801c1d8:	1a98      	subs	r0, r3, r2
 801c1da:	bd10      	pop	{r4, pc}
 801c1dc:	4610      	mov	r0, r2
 801c1de:	e7fc      	b.n	801c1da <strncmp+0x1e>

0801c1e0 <sulp>:
 801c1e0:	b570      	push	{r4, r5, r6, lr}
 801c1e2:	4604      	mov	r4, r0
 801c1e4:	460d      	mov	r5, r1
 801c1e6:	ec45 4b10 	vmov	d0, r4, r5
 801c1ea:	4616      	mov	r6, r2
 801c1ec:	f003 fad2 	bl	801f794 <__ulp>
 801c1f0:	ec51 0b10 	vmov	r0, r1, d0
 801c1f4:	b17e      	cbz	r6, 801c216 <sulp+0x36>
 801c1f6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801c1fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801c1fe:	2b00      	cmp	r3, #0
 801c200:	dd09      	ble.n	801c216 <sulp+0x36>
 801c202:	051b      	lsls	r3, r3, #20
 801c204:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801c208:	2400      	movs	r4, #0
 801c20a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801c20e:	4622      	mov	r2, r4
 801c210:	462b      	mov	r3, r5
 801c212:	f7e4 fa11 	bl	8000638 <__aeabi_dmul>
 801c216:	bd70      	pop	{r4, r5, r6, pc}

0801c218 <_strtod_l>:
 801c218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c21c:	b0a3      	sub	sp, #140	; 0x8c
 801c21e:	461f      	mov	r7, r3
 801c220:	2300      	movs	r3, #0
 801c222:	931e      	str	r3, [sp, #120]	; 0x78
 801c224:	4ba4      	ldr	r3, [pc, #656]	; (801c4b8 <_strtod_l+0x2a0>)
 801c226:	9219      	str	r2, [sp, #100]	; 0x64
 801c228:	681b      	ldr	r3, [r3, #0]
 801c22a:	9307      	str	r3, [sp, #28]
 801c22c:	4604      	mov	r4, r0
 801c22e:	4618      	mov	r0, r3
 801c230:	4688      	mov	r8, r1
 801c232:	f7e3 ffe7 	bl	8000204 <strlen>
 801c236:	f04f 0a00 	mov.w	sl, #0
 801c23a:	4605      	mov	r5, r0
 801c23c:	f04f 0b00 	mov.w	fp, #0
 801c240:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801c244:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c246:	781a      	ldrb	r2, [r3, #0]
 801c248:	2a2b      	cmp	r2, #43	; 0x2b
 801c24a:	d04c      	beq.n	801c2e6 <_strtod_l+0xce>
 801c24c:	d839      	bhi.n	801c2c2 <_strtod_l+0xaa>
 801c24e:	2a0d      	cmp	r2, #13
 801c250:	d832      	bhi.n	801c2b8 <_strtod_l+0xa0>
 801c252:	2a08      	cmp	r2, #8
 801c254:	d832      	bhi.n	801c2bc <_strtod_l+0xa4>
 801c256:	2a00      	cmp	r2, #0
 801c258:	d03c      	beq.n	801c2d4 <_strtod_l+0xbc>
 801c25a:	2300      	movs	r3, #0
 801c25c:	930e      	str	r3, [sp, #56]	; 0x38
 801c25e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801c260:	7833      	ldrb	r3, [r6, #0]
 801c262:	2b30      	cmp	r3, #48	; 0x30
 801c264:	f040 80b4 	bne.w	801c3d0 <_strtod_l+0x1b8>
 801c268:	7873      	ldrb	r3, [r6, #1]
 801c26a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801c26e:	2b58      	cmp	r3, #88	; 0x58
 801c270:	d16c      	bne.n	801c34c <_strtod_l+0x134>
 801c272:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c274:	9301      	str	r3, [sp, #4]
 801c276:	ab1e      	add	r3, sp, #120	; 0x78
 801c278:	9702      	str	r7, [sp, #8]
 801c27a:	9300      	str	r3, [sp, #0]
 801c27c:	4a8f      	ldr	r2, [pc, #572]	; (801c4bc <_strtod_l+0x2a4>)
 801c27e:	ab1f      	add	r3, sp, #124	; 0x7c
 801c280:	a91d      	add	r1, sp, #116	; 0x74
 801c282:	4620      	mov	r0, r4
 801c284:	f002 fa84 	bl	801e790 <__gethex>
 801c288:	f010 0707 	ands.w	r7, r0, #7
 801c28c:	4605      	mov	r5, r0
 801c28e:	d005      	beq.n	801c29c <_strtod_l+0x84>
 801c290:	2f06      	cmp	r7, #6
 801c292:	d12a      	bne.n	801c2ea <_strtod_l+0xd2>
 801c294:	3601      	adds	r6, #1
 801c296:	2300      	movs	r3, #0
 801c298:	961d      	str	r6, [sp, #116]	; 0x74
 801c29a:	930e      	str	r3, [sp, #56]	; 0x38
 801c29c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801c29e:	2b00      	cmp	r3, #0
 801c2a0:	f040 8596 	bne.w	801cdd0 <_strtod_l+0xbb8>
 801c2a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c2a6:	b1db      	cbz	r3, 801c2e0 <_strtod_l+0xc8>
 801c2a8:	4652      	mov	r2, sl
 801c2aa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801c2ae:	ec43 2b10 	vmov	d0, r2, r3
 801c2b2:	b023      	add	sp, #140	; 0x8c
 801c2b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c2b8:	2a20      	cmp	r2, #32
 801c2ba:	d1ce      	bne.n	801c25a <_strtod_l+0x42>
 801c2bc:	3301      	adds	r3, #1
 801c2be:	931d      	str	r3, [sp, #116]	; 0x74
 801c2c0:	e7c0      	b.n	801c244 <_strtod_l+0x2c>
 801c2c2:	2a2d      	cmp	r2, #45	; 0x2d
 801c2c4:	d1c9      	bne.n	801c25a <_strtod_l+0x42>
 801c2c6:	2201      	movs	r2, #1
 801c2c8:	920e      	str	r2, [sp, #56]	; 0x38
 801c2ca:	1c5a      	adds	r2, r3, #1
 801c2cc:	921d      	str	r2, [sp, #116]	; 0x74
 801c2ce:	785b      	ldrb	r3, [r3, #1]
 801c2d0:	2b00      	cmp	r3, #0
 801c2d2:	d1c4      	bne.n	801c25e <_strtod_l+0x46>
 801c2d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801c2d6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801c2da:	2b00      	cmp	r3, #0
 801c2dc:	f040 8576 	bne.w	801cdcc <_strtod_l+0xbb4>
 801c2e0:	4652      	mov	r2, sl
 801c2e2:	465b      	mov	r3, fp
 801c2e4:	e7e3      	b.n	801c2ae <_strtod_l+0x96>
 801c2e6:	2200      	movs	r2, #0
 801c2e8:	e7ee      	b.n	801c2c8 <_strtod_l+0xb0>
 801c2ea:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801c2ec:	b13a      	cbz	r2, 801c2fe <_strtod_l+0xe6>
 801c2ee:	2135      	movs	r1, #53	; 0x35
 801c2f0:	a820      	add	r0, sp, #128	; 0x80
 801c2f2:	f003 fb5a 	bl	801f9aa <__copybits>
 801c2f6:	991e      	ldr	r1, [sp, #120]	; 0x78
 801c2f8:	4620      	mov	r0, r4
 801c2fa:	f002 ff1f 	bl	801f13c <_Bfree>
 801c2fe:	3f01      	subs	r7, #1
 801c300:	2f05      	cmp	r7, #5
 801c302:	d807      	bhi.n	801c314 <_strtod_l+0xfc>
 801c304:	e8df f007 	tbb	[pc, r7]
 801c308:	1d180b0e 	.word	0x1d180b0e
 801c30c:	030e      	.short	0x030e
 801c30e:	f04f 0b00 	mov.w	fp, #0
 801c312:	46da      	mov	sl, fp
 801c314:	0728      	lsls	r0, r5, #28
 801c316:	d5c1      	bpl.n	801c29c <_strtod_l+0x84>
 801c318:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801c31c:	e7be      	b.n	801c29c <_strtod_l+0x84>
 801c31e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801c322:	e7f7      	b.n	801c314 <_strtod_l+0xfc>
 801c324:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 801c328:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801c32a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801c32e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801c332:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801c336:	e7ed      	b.n	801c314 <_strtod_l+0xfc>
 801c338:	f8df b184 	ldr.w	fp, [pc, #388]	; 801c4c0 <_strtod_l+0x2a8>
 801c33c:	f04f 0a00 	mov.w	sl, #0
 801c340:	e7e8      	b.n	801c314 <_strtod_l+0xfc>
 801c342:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801c346:	f04f 3aff 	mov.w	sl, #4294967295
 801c34a:	e7e3      	b.n	801c314 <_strtod_l+0xfc>
 801c34c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c34e:	1c5a      	adds	r2, r3, #1
 801c350:	921d      	str	r2, [sp, #116]	; 0x74
 801c352:	785b      	ldrb	r3, [r3, #1]
 801c354:	2b30      	cmp	r3, #48	; 0x30
 801c356:	d0f9      	beq.n	801c34c <_strtod_l+0x134>
 801c358:	2b00      	cmp	r3, #0
 801c35a:	d09f      	beq.n	801c29c <_strtod_l+0x84>
 801c35c:	2301      	movs	r3, #1
 801c35e:	f04f 0900 	mov.w	r9, #0
 801c362:	9304      	str	r3, [sp, #16]
 801c364:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c366:	930a      	str	r3, [sp, #40]	; 0x28
 801c368:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801c36c:	464f      	mov	r7, r9
 801c36e:	220a      	movs	r2, #10
 801c370:	981d      	ldr	r0, [sp, #116]	; 0x74
 801c372:	7806      	ldrb	r6, [r0, #0]
 801c374:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801c378:	b2d9      	uxtb	r1, r3
 801c37a:	2909      	cmp	r1, #9
 801c37c:	d92a      	bls.n	801c3d4 <_strtod_l+0x1bc>
 801c37e:	9907      	ldr	r1, [sp, #28]
 801c380:	462a      	mov	r2, r5
 801c382:	f7ff ff1b 	bl	801c1bc <strncmp>
 801c386:	b398      	cbz	r0, 801c3f0 <_strtod_l+0x1d8>
 801c388:	2000      	movs	r0, #0
 801c38a:	4633      	mov	r3, r6
 801c38c:	463d      	mov	r5, r7
 801c38e:	9007      	str	r0, [sp, #28]
 801c390:	4602      	mov	r2, r0
 801c392:	2b65      	cmp	r3, #101	; 0x65
 801c394:	d001      	beq.n	801c39a <_strtod_l+0x182>
 801c396:	2b45      	cmp	r3, #69	; 0x45
 801c398:	d118      	bne.n	801c3cc <_strtod_l+0x1b4>
 801c39a:	b91d      	cbnz	r5, 801c3a4 <_strtod_l+0x18c>
 801c39c:	9b04      	ldr	r3, [sp, #16]
 801c39e:	4303      	orrs	r3, r0
 801c3a0:	d098      	beq.n	801c2d4 <_strtod_l+0xbc>
 801c3a2:	2500      	movs	r5, #0
 801c3a4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 801c3a8:	f108 0301 	add.w	r3, r8, #1
 801c3ac:	931d      	str	r3, [sp, #116]	; 0x74
 801c3ae:	f898 3001 	ldrb.w	r3, [r8, #1]
 801c3b2:	2b2b      	cmp	r3, #43	; 0x2b
 801c3b4:	d075      	beq.n	801c4a2 <_strtod_l+0x28a>
 801c3b6:	2b2d      	cmp	r3, #45	; 0x2d
 801c3b8:	d07b      	beq.n	801c4b2 <_strtod_l+0x29a>
 801c3ba:	f04f 0c00 	mov.w	ip, #0
 801c3be:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801c3c2:	2909      	cmp	r1, #9
 801c3c4:	f240 8082 	bls.w	801c4cc <_strtod_l+0x2b4>
 801c3c8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801c3cc:	2600      	movs	r6, #0
 801c3ce:	e09d      	b.n	801c50c <_strtod_l+0x2f4>
 801c3d0:	2300      	movs	r3, #0
 801c3d2:	e7c4      	b.n	801c35e <_strtod_l+0x146>
 801c3d4:	2f08      	cmp	r7, #8
 801c3d6:	bfd8      	it	le
 801c3d8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801c3da:	f100 0001 	add.w	r0, r0, #1
 801c3de:	bfda      	itte	le
 801c3e0:	fb02 3301 	mlale	r3, r2, r1, r3
 801c3e4:	9309      	strle	r3, [sp, #36]	; 0x24
 801c3e6:	fb02 3909 	mlagt	r9, r2, r9, r3
 801c3ea:	3701      	adds	r7, #1
 801c3ec:	901d      	str	r0, [sp, #116]	; 0x74
 801c3ee:	e7bf      	b.n	801c370 <_strtod_l+0x158>
 801c3f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c3f2:	195a      	adds	r2, r3, r5
 801c3f4:	921d      	str	r2, [sp, #116]	; 0x74
 801c3f6:	5d5b      	ldrb	r3, [r3, r5]
 801c3f8:	2f00      	cmp	r7, #0
 801c3fa:	d037      	beq.n	801c46c <_strtod_l+0x254>
 801c3fc:	9007      	str	r0, [sp, #28]
 801c3fe:	463d      	mov	r5, r7
 801c400:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801c404:	2a09      	cmp	r2, #9
 801c406:	d912      	bls.n	801c42e <_strtod_l+0x216>
 801c408:	2201      	movs	r2, #1
 801c40a:	e7c2      	b.n	801c392 <_strtod_l+0x17a>
 801c40c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c40e:	1c5a      	adds	r2, r3, #1
 801c410:	921d      	str	r2, [sp, #116]	; 0x74
 801c412:	785b      	ldrb	r3, [r3, #1]
 801c414:	3001      	adds	r0, #1
 801c416:	2b30      	cmp	r3, #48	; 0x30
 801c418:	d0f8      	beq.n	801c40c <_strtod_l+0x1f4>
 801c41a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801c41e:	2a08      	cmp	r2, #8
 801c420:	f200 84db 	bhi.w	801cdda <_strtod_l+0xbc2>
 801c424:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801c426:	9007      	str	r0, [sp, #28]
 801c428:	2000      	movs	r0, #0
 801c42a:	920a      	str	r2, [sp, #40]	; 0x28
 801c42c:	4605      	mov	r5, r0
 801c42e:	3b30      	subs	r3, #48	; 0x30
 801c430:	f100 0201 	add.w	r2, r0, #1
 801c434:	d014      	beq.n	801c460 <_strtod_l+0x248>
 801c436:	9907      	ldr	r1, [sp, #28]
 801c438:	4411      	add	r1, r2
 801c43a:	9107      	str	r1, [sp, #28]
 801c43c:	462a      	mov	r2, r5
 801c43e:	eb00 0e05 	add.w	lr, r0, r5
 801c442:	210a      	movs	r1, #10
 801c444:	4572      	cmp	r2, lr
 801c446:	d113      	bne.n	801c470 <_strtod_l+0x258>
 801c448:	182a      	adds	r2, r5, r0
 801c44a:	2a08      	cmp	r2, #8
 801c44c:	f105 0501 	add.w	r5, r5, #1
 801c450:	4405      	add	r5, r0
 801c452:	dc1c      	bgt.n	801c48e <_strtod_l+0x276>
 801c454:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c456:	220a      	movs	r2, #10
 801c458:	fb02 3301 	mla	r3, r2, r1, r3
 801c45c:	9309      	str	r3, [sp, #36]	; 0x24
 801c45e:	2200      	movs	r2, #0
 801c460:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c462:	1c59      	adds	r1, r3, #1
 801c464:	911d      	str	r1, [sp, #116]	; 0x74
 801c466:	785b      	ldrb	r3, [r3, #1]
 801c468:	4610      	mov	r0, r2
 801c46a:	e7c9      	b.n	801c400 <_strtod_l+0x1e8>
 801c46c:	4638      	mov	r0, r7
 801c46e:	e7d2      	b.n	801c416 <_strtod_l+0x1fe>
 801c470:	2a08      	cmp	r2, #8
 801c472:	dc04      	bgt.n	801c47e <_strtod_l+0x266>
 801c474:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801c476:	434e      	muls	r6, r1
 801c478:	9609      	str	r6, [sp, #36]	; 0x24
 801c47a:	3201      	adds	r2, #1
 801c47c:	e7e2      	b.n	801c444 <_strtod_l+0x22c>
 801c47e:	f102 0c01 	add.w	ip, r2, #1
 801c482:	f1bc 0f10 	cmp.w	ip, #16
 801c486:	bfd8      	it	le
 801c488:	fb01 f909 	mulle.w	r9, r1, r9
 801c48c:	e7f5      	b.n	801c47a <_strtod_l+0x262>
 801c48e:	2d10      	cmp	r5, #16
 801c490:	bfdc      	itt	le
 801c492:	220a      	movle	r2, #10
 801c494:	fb02 3909 	mlale	r9, r2, r9, r3
 801c498:	e7e1      	b.n	801c45e <_strtod_l+0x246>
 801c49a:	2300      	movs	r3, #0
 801c49c:	9307      	str	r3, [sp, #28]
 801c49e:	2201      	movs	r2, #1
 801c4a0:	e77c      	b.n	801c39c <_strtod_l+0x184>
 801c4a2:	f04f 0c00 	mov.w	ip, #0
 801c4a6:	f108 0302 	add.w	r3, r8, #2
 801c4aa:	931d      	str	r3, [sp, #116]	; 0x74
 801c4ac:	f898 3002 	ldrb.w	r3, [r8, #2]
 801c4b0:	e785      	b.n	801c3be <_strtod_l+0x1a6>
 801c4b2:	f04f 0c01 	mov.w	ip, #1
 801c4b6:	e7f6      	b.n	801c4a6 <_strtod_l+0x28e>
 801c4b8:	08023020 	.word	0x08023020
 801c4bc:	08022e10 	.word	0x08022e10
 801c4c0:	7ff00000 	.word	0x7ff00000
 801c4c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c4c6:	1c59      	adds	r1, r3, #1
 801c4c8:	911d      	str	r1, [sp, #116]	; 0x74
 801c4ca:	785b      	ldrb	r3, [r3, #1]
 801c4cc:	2b30      	cmp	r3, #48	; 0x30
 801c4ce:	d0f9      	beq.n	801c4c4 <_strtod_l+0x2ac>
 801c4d0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801c4d4:	2908      	cmp	r1, #8
 801c4d6:	f63f af79 	bhi.w	801c3cc <_strtod_l+0x1b4>
 801c4da:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801c4de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c4e0:	9308      	str	r3, [sp, #32]
 801c4e2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c4e4:	1c59      	adds	r1, r3, #1
 801c4e6:	911d      	str	r1, [sp, #116]	; 0x74
 801c4e8:	785b      	ldrb	r3, [r3, #1]
 801c4ea:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801c4ee:	2e09      	cmp	r6, #9
 801c4f0:	d937      	bls.n	801c562 <_strtod_l+0x34a>
 801c4f2:	9e08      	ldr	r6, [sp, #32]
 801c4f4:	1b89      	subs	r1, r1, r6
 801c4f6:	2908      	cmp	r1, #8
 801c4f8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801c4fc:	dc02      	bgt.n	801c504 <_strtod_l+0x2ec>
 801c4fe:	4576      	cmp	r6, lr
 801c500:	bfa8      	it	ge
 801c502:	4676      	movge	r6, lr
 801c504:	f1bc 0f00 	cmp.w	ip, #0
 801c508:	d000      	beq.n	801c50c <_strtod_l+0x2f4>
 801c50a:	4276      	negs	r6, r6
 801c50c:	2d00      	cmp	r5, #0
 801c50e:	d14f      	bne.n	801c5b0 <_strtod_l+0x398>
 801c510:	9904      	ldr	r1, [sp, #16]
 801c512:	4301      	orrs	r1, r0
 801c514:	f47f aec2 	bne.w	801c29c <_strtod_l+0x84>
 801c518:	2a00      	cmp	r2, #0
 801c51a:	f47f aedb 	bne.w	801c2d4 <_strtod_l+0xbc>
 801c51e:	2b69      	cmp	r3, #105	; 0x69
 801c520:	d027      	beq.n	801c572 <_strtod_l+0x35a>
 801c522:	dc24      	bgt.n	801c56e <_strtod_l+0x356>
 801c524:	2b49      	cmp	r3, #73	; 0x49
 801c526:	d024      	beq.n	801c572 <_strtod_l+0x35a>
 801c528:	2b4e      	cmp	r3, #78	; 0x4e
 801c52a:	f47f aed3 	bne.w	801c2d4 <_strtod_l+0xbc>
 801c52e:	499e      	ldr	r1, [pc, #632]	; (801c7a8 <_strtod_l+0x590>)
 801c530:	a81d      	add	r0, sp, #116	; 0x74
 801c532:	f002 fb85 	bl	801ec40 <__match>
 801c536:	2800      	cmp	r0, #0
 801c538:	f43f aecc 	beq.w	801c2d4 <_strtod_l+0xbc>
 801c53c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c53e:	781b      	ldrb	r3, [r3, #0]
 801c540:	2b28      	cmp	r3, #40	; 0x28
 801c542:	d12d      	bne.n	801c5a0 <_strtod_l+0x388>
 801c544:	4999      	ldr	r1, [pc, #612]	; (801c7ac <_strtod_l+0x594>)
 801c546:	aa20      	add	r2, sp, #128	; 0x80
 801c548:	a81d      	add	r0, sp, #116	; 0x74
 801c54a:	f002 fb8d 	bl	801ec68 <__hexnan>
 801c54e:	2805      	cmp	r0, #5
 801c550:	d126      	bne.n	801c5a0 <_strtod_l+0x388>
 801c552:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c554:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 801c558:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801c55c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801c560:	e69c      	b.n	801c29c <_strtod_l+0x84>
 801c562:	210a      	movs	r1, #10
 801c564:	fb01 3e0e 	mla	lr, r1, lr, r3
 801c568:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801c56c:	e7b9      	b.n	801c4e2 <_strtod_l+0x2ca>
 801c56e:	2b6e      	cmp	r3, #110	; 0x6e
 801c570:	e7db      	b.n	801c52a <_strtod_l+0x312>
 801c572:	498f      	ldr	r1, [pc, #572]	; (801c7b0 <_strtod_l+0x598>)
 801c574:	a81d      	add	r0, sp, #116	; 0x74
 801c576:	f002 fb63 	bl	801ec40 <__match>
 801c57a:	2800      	cmp	r0, #0
 801c57c:	f43f aeaa 	beq.w	801c2d4 <_strtod_l+0xbc>
 801c580:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c582:	498c      	ldr	r1, [pc, #560]	; (801c7b4 <_strtod_l+0x59c>)
 801c584:	3b01      	subs	r3, #1
 801c586:	a81d      	add	r0, sp, #116	; 0x74
 801c588:	931d      	str	r3, [sp, #116]	; 0x74
 801c58a:	f002 fb59 	bl	801ec40 <__match>
 801c58e:	b910      	cbnz	r0, 801c596 <_strtod_l+0x37e>
 801c590:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c592:	3301      	adds	r3, #1
 801c594:	931d      	str	r3, [sp, #116]	; 0x74
 801c596:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801c7c4 <_strtod_l+0x5ac>
 801c59a:	f04f 0a00 	mov.w	sl, #0
 801c59e:	e67d      	b.n	801c29c <_strtod_l+0x84>
 801c5a0:	4885      	ldr	r0, [pc, #532]	; (801c7b8 <_strtod_l+0x5a0>)
 801c5a2:	f7fd fec5 	bl	801a330 <nan>
 801c5a6:	ed8d 0b04 	vstr	d0, [sp, #16]
 801c5aa:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801c5ae:	e675      	b.n	801c29c <_strtod_l+0x84>
 801c5b0:	9b07      	ldr	r3, [sp, #28]
 801c5b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c5b4:	1af3      	subs	r3, r6, r3
 801c5b6:	2f00      	cmp	r7, #0
 801c5b8:	bf08      	it	eq
 801c5ba:	462f      	moveq	r7, r5
 801c5bc:	2d10      	cmp	r5, #16
 801c5be:	9308      	str	r3, [sp, #32]
 801c5c0:	46a8      	mov	r8, r5
 801c5c2:	bfa8      	it	ge
 801c5c4:	f04f 0810 	movge.w	r8, #16
 801c5c8:	f7e3 ffbc 	bl	8000544 <__aeabi_ui2d>
 801c5cc:	2d09      	cmp	r5, #9
 801c5ce:	4682      	mov	sl, r0
 801c5d0:	468b      	mov	fp, r1
 801c5d2:	dd13      	ble.n	801c5fc <_strtod_l+0x3e4>
 801c5d4:	4b79      	ldr	r3, [pc, #484]	; (801c7bc <_strtod_l+0x5a4>)
 801c5d6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801c5da:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801c5de:	f7e4 f82b 	bl	8000638 <__aeabi_dmul>
 801c5e2:	4682      	mov	sl, r0
 801c5e4:	4648      	mov	r0, r9
 801c5e6:	468b      	mov	fp, r1
 801c5e8:	f7e3 ffac 	bl	8000544 <__aeabi_ui2d>
 801c5ec:	4602      	mov	r2, r0
 801c5ee:	460b      	mov	r3, r1
 801c5f0:	4650      	mov	r0, sl
 801c5f2:	4659      	mov	r1, fp
 801c5f4:	f7e3 fe6a 	bl	80002cc <__adddf3>
 801c5f8:	4682      	mov	sl, r0
 801c5fa:	468b      	mov	fp, r1
 801c5fc:	2d0f      	cmp	r5, #15
 801c5fe:	dc38      	bgt.n	801c672 <_strtod_l+0x45a>
 801c600:	9b08      	ldr	r3, [sp, #32]
 801c602:	2b00      	cmp	r3, #0
 801c604:	f43f ae4a 	beq.w	801c29c <_strtod_l+0x84>
 801c608:	dd24      	ble.n	801c654 <_strtod_l+0x43c>
 801c60a:	2b16      	cmp	r3, #22
 801c60c:	dc0b      	bgt.n	801c626 <_strtod_l+0x40e>
 801c60e:	4d6b      	ldr	r5, [pc, #428]	; (801c7bc <_strtod_l+0x5a4>)
 801c610:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801c614:	e9d5 0100 	ldrd	r0, r1, [r5]
 801c618:	4652      	mov	r2, sl
 801c61a:	465b      	mov	r3, fp
 801c61c:	f7e4 f80c 	bl	8000638 <__aeabi_dmul>
 801c620:	4682      	mov	sl, r0
 801c622:	468b      	mov	fp, r1
 801c624:	e63a      	b.n	801c29c <_strtod_l+0x84>
 801c626:	9a08      	ldr	r2, [sp, #32]
 801c628:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801c62c:	4293      	cmp	r3, r2
 801c62e:	db20      	blt.n	801c672 <_strtod_l+0x45a>
 801c630:	4c62      	ldr	r4, [pc, #392]	; (801c7bc <_strtod_l+0x5a4>)
 801c632:	f1c5 050f 	rsb	r5, r5, #15
 801c636:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801c63a:	4652      	mov	r2, sl
 801c63c:	465b      	mov	r3, fp
 801c63e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c642:	f7e3 fff9 	bl	8000638 <__aeabi_dmul>
 801c646:	9b08      	ldr	r3, [sp, #32]
 801c648:	1b5d      	subs	r5, r3, r5
 801c64a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801c64e:	e9d4 2300 	ldrd	r2, r3, [r4]
 801c652:	e7e3      	b.n	801c61c <_strtod_l+0x404>
 801c654:	9b08      	ldr	r3, [sp, #32]
 801c656:	3316      	adds	r3, #22
 801c658:	db0b      	blt.n	801c672 <_strtod_l+0x45a>
 801c65a:	9b07      	ldr	r3, [sp, #28]
 801c65c:	4a57      	ldr	r2, [pc, #348]	; (801c7bc <_strtod_l+0x5a4>)
 801c65e:	1b9e      	subs	r6, r3, r6
 801c660:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801c664:	e9d6 2300 	ldrd	r2, r3, [r6]
 801c668:	4650      	mov	r0, sl
 801c66a:	4659      	mov	r1, fp
 801c66c:	f7e4 f90e 	bl	800088c <__aeabi_ddiv>
 801c670:	e7d6      	b.n	801c620 <_strtod_l+0x408>
 801c672:	9b08      	ldr	r3, [sp, #32]
 801c674:	eba5 0808 	sub.w	r8, r5, r8
 801c678:	4498      	add	r8, r3
 801c67a:	f1b8 0f00 	cmp.w	r8, #0
 801c67e:	dd71      	ble.n	801c764 <_strtod_l+0x54c>
 801c680:	f018 030f 	ands.w	r3, r8, #15
 801c684:	d00a      	beq.n	801c69c <_strtod_l+0x484>
 801c686:	494d      	ldr	r1, [pc, #308]	; (801c7bc <_strtod_l+0x5a4>)
 801c688:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801c68c:	4652      	mov	r2, sl
 801c68e:	465b      	mov	r3, fp
 801c690:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c694:	f7e3 ffd0 	bl	8000638 <__aeabi_dmul>
 801c698:	4682      	mov	sl, r0
 801c69a:	468b      	mov	fp, r1
 801c69c:	f038 080f 	bics.w	r8, r8, #15
 801c6a0:	d04d      	beq.n	801c73e <_strtod_l+0x526>
 801c6a2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801c6a6:	dd22      	ble.n	801c6ee <_strtod_l+0x4d6>
 801c6a8:	2500      	movs	r5, #0
 801c6aa:	462e      	mov	r6, r5
 801c6ac:	9509      	str	r5, [sp, #36]	; 0x24
 801c6ae:	9507      	str	r5, [sp, #28]
 801c6b0:	2322      	movs	r3, #34	; 0x22
 801c6b2:	f8df b110 	ldr.w	fp, [pc, #272]	; 801c7c4 <_strtod_l+0x5ac>
 801c6b6:	6023      	str	r3, [r4, #0]
 801c6b8:	f04f 0a00 	mov.w	sl, #0
 801c6bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c6be:	2b00      	cmp	r3, #0
 801c6c0:	f43f adec 	beq.w	801c29c <_strtod_l+0x84>
 801c6c4:	991e      	ldr	r1, [sp, #120]	; 0x78
 801c6c6:	4620      	mov	r0, r4
 801c6c8:	f002 fd38 	bl	801f13c <_Bfree>
 801c6cc:	9907      	ldr	r1, [sp, #28]
 801c6ce:	4620      	mov	r0, r4
 801c6d0:	f002 fd34 	bl	801f13c <_Bfree>
 801c6d4:	4631      	mov	r1, r6
 801c6d6:	4620      	mov	r0, r4
 801c6d8:	f002 fd30 	bl	801f13c <_Bfree>
 801c6dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c6de:	4620      	mov	r0, r4
 801c6e0:	f002 fd2c 	bl	801f13c <_Bfree>
 801c6e4:	4629      	mov	r1, r5
 801c6e6:	4620      	mov	r0, r4
 801c6e8:	f002 fd28 	bl	801f13c <_Bfree>
 801c6ec:	e5d6      	b.n	801c29c <_strtod_l+0x84>
 801c6ee:	2300      	movs	r3, #0
 801c6f0:	ea4f 1828 	mov.w	r8, r8, asr #4
 801c6f4:	4650      	mov	r0, sl
 801c6f6:	4659      	mov	r1, fp
 801c6f8:	4699      	mov	r9, r3
 801c6fa:	f1b8 0f01 	cmp.w	r8, #1
 801c6fe:	dc21      	bgt.n	801c744 <_strtod_l+0x52c>
 801c700:	b10b      	cbz	r3, 801c706 <_strtod_l+0x4ee>
 801c702:	4682      	mov	sl, r0
 801c704:	468b      	mov	fp, r1
 801c706:	4b2e      	ldr	r3, [pc, #184]	; (801c7c0 <_strtod_l+0x5a8>)
 801c708:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801c70c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801c710:	4652      	mov	r2, sl
 801c712:	465b      	mov	r3, fp
 801c714:	e9d9 0100 	ldrd	r0, r1, [r9]
 801c718:	f7e3 ff8e 	bl	8000638 <__aeabi_dmul>
 801c71c:	4b29      	ldr	r3, [pc, #164]	; (801c7c4 <_strtod_l+0x5ac>)
 801c71e:	460a      	mov	r2, r1
 801c720:	400b      	ands	r3, r1
 801c722:	4929      	ldr	r1, [pc, #164]	; (801c7c8 <_strtod_l+0x5b0>)
 801c724:	428b      	cmp	r3, r1
 801c726:	4682      	mov	sl, r0
 801c728:	d8be      	bhi.n	801c6a8 <_strtod_l+0x490>
 801c72a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801c72e:	428b      	cmp	r3, r1
 801c730:	bf86      	itte	hi
 801c732:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801c7cc <_strtod_l+0x5b4>
 801c736:	f04f 3aff 	movhi.w	sl, #4294967295
 801c73a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801c73e:	2300      	movs	r3, #0
 801c740:	9304      	str	r3, [sp, #16]
 801c742:	e081      	b.n	801c848 <_strtod_l+0x630>
 801c744:	f018 0f01 	tst.w	r8, #1
 801c748:	d007      	beq.n	801c75a <_strtod_l+0x542>
 801c74a:	4b1d      	ldr	r3, [pc, #116]	; (801c7c0 <_strtod_l+0x5a8>)
 801c74c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801c750:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c754:	f7e3 ff70 	bl	8000638 <__aeabi_dmul>
 801c758:	2301      	movs	r3, #1
 801c75a:	f109 0901 	add.w	r9, r9, #1
 801c75e:	ea4f 0868 	mov.w	r8, r8, asr #1
 801c762:	e7ca      	b.n	801c6fa <_strtod_l+0x4e2>
 801c764:	d0eb      	beq.n	801c73e <_strtod_l+0x526>
 801c766:	f1c8 0800 	rsb	r8, r8, #0
 801c76a:	f018 020f 	ands.w	r2, r8, #15
 801c76e:	d00a      	beq.n	801c786 <_strtod_l+0x56e>
 801c770:	4b12      	ldr	r3, [pc, #72]	; (801c7bc <_strtod_l+0x5a4>)
 801c772:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c776:	4650      	mov	r0, sl
 801c778:	4659      	mov	r1, fp
 801c77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c77e:	f7e4 f885 	bl	800088c <__aeabi_ddiv>
 801c782:	4682      	mov	sl, r0
 801c784:	468b      	mov	fp, r1
 801c786:	ea5f 1828 	movs.w	r8, r8, asr #4
 801c78a:	d0d8      	beq.n	801c73e <_strtod_l+0x526>
 801c78c:	f1b8 0f1f 	cmp.w	r8, #31
 801c790:	dd1e      	ble.n	801c7d0 <_strtod_l+0x5b8>
 801c792:	2500      	movs	r5, #0
 801c794:	462e      	mov	r6, r5
 801c796:	9509      	str	r5, [sp, #36]	; 0x24
 801c798:	9507      	str	r5, [sp, #28]
 801c79a:	2322      	movs	r3, #34	; 0x22
 801c79c:	f04f 0a00 	mov.w	sl, #0
 801c7a0:	f04f 0b00 	mov.w	fp, #0
 801c7a4:	6023      	str	r3, [r4, #0]
 801c7a6:	e789      	b.n	801c6bc <_strtod_l+0x4a4>
 801c7a8:	08022de5 	.word	0x08022de5
 801c7ac:	08022e24 	.word	0x08022e24
 801c7b0:	08022ddd 	.word	0x08022ddd
 801c7b4:	08022f3c 	.word	0x08022f3c
 801c7b8:	08022f38 	.word	0x08022f38
 801c7bc:	080230c0 	.word	0x080230c0
 801c7c0:	08023098 	.word	0x08023098
 801c7c4:	7ff00000 	.word	0x7ff00000
 801c7c8:	7ca00000 	.word	0x7ca00000
 801c7cc:	7fefffff 	.word	0x7fefffff
 801c7d0:	f018 0310 	ands.w	r3, r8, #16
 801c7d4:	bf18      	it	ne
 801c7d6:	236a      	movne	r3, #106	; 0x6a
 801c7d8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 801cb90 <_strtod_l+0x978>
 801c7dc:	9304      	str	r3, [sp, #16]
 801c7de:	4650      	mov	r0, sl
 801c7e0:	4659      	mov	r1, fp
 801c7e2:	2300      	movs	r3, #0
 801c7e4:	f018 0f01 	tst.w	r8, #1
 801c7e8:	d004      	beq.n	801c7f4 <_strtod_l+0x5dc>
 801c7ea:	e9d9 2300 	ldrd	r2, r3, [r9]
 801c7ee:	f7e3 ff23 	bl	8000638 <__aeabi_dmul>
 801c7f2:	2301      	movs	r3, #1
 801c7f4:	ea5f 0868 	movs.w	r8, r8, asr #1
 801c7f8:	f109 0908 	add.w	r9, r9, #8
 801c7fc:	d1f2      	bne.n	801c7e4 <_strtod_l+0x5cc>
 801c7fe:	b10b      	cbz	r3, 801c804 <_strtod_l+0x5ec>
 801c800:	4682      	mov	sl, r0
 801c802:	468b      	mov	fp, r1
 801c804:	9b04      	ldr	r3, [sp, #16]
 801c806:	b1bb      	cbz	r3, 801c838 <_strtod_l+0x620>
 801c808:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801c80c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801c810:	2b00      	cmp	r3, #0
 801c812:	4659      	mov	r1, fp
 801c814:	dd10      	ble.n	801c838 <_strtod_l+0x620>
 801c816:	2b1f      	cmp	r3, #31
 801c818:	f340 8128 	ble.w	801ca6c <_strtod_l+0x854>
 801c81c:	2b34      	cmp	r3, #52	; 0x34
 801c81e:	bfde      	ittt	le
 801c820:	3b20      	suble	r3, #32
 801c822:	f04f 32ff 	movle.w	r2, #4294967295
 801c826:	fa02 f303 	lslle.w	r3, r2, r3
 801c82a:	f04f 0a00 	mov.w	sl, #0
 801c82e:	bfcc      	ite	gt
 801c830:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801c834:	ea03 0b01 	andle.w	fp, r3, r1
 801c838:	2200      	movs	r2, #0
 801c83a:	2300      	movs	r3, #0
 801c83c:	4650      	mov	r0, sl
 801c83e:	4659      	mov	r1, fp
 801c840:	f7e4 f962 	bl	8000b08 <__aeabi_dcmpeq>
 801c844:	2800      	cmp	r0, #0
 801c846:	d1a4      	bne.n	801c792 <_strtod_l+0x57a>
 801c848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c84a:	9300      	str	r3, [sp, #0]
 801c84c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801c84e:	462b      	mov	r3, r5
 801c850:	463a      	mov	r2, r7
 801c852:	4620      	mov	r0, r4
 801c854:	f002 fcde 	bl	801f214 <__s2b>
 801c858:	9009      	str	r0, [sp, #36]	; 0x24
 801c85a:	2800      	cmp	r0, #0
 801c85c:	f43f af24 	beq.w	801c6a8 <_strtod_l+0x490>
 801c860:	9b07      	ldr	r3, [sp, #28]
 801c862:	1b9e      	subs	r6, r3, r6
 801c864:	9b08      	ldr	r3, [sp, #32]
 801c866:	2b00      	cmp	r3, #0
 801c868:	bfb4      	ite	lt
 801c86a:	4633      	movlt	r3, r6
 801c86c:	2300      	movge	r3, #0
 801c86e:	9310      	str	r3, [sp, #64]	; 0x40
 801c870:	9b08      	ldr	r3, [sp, #32]
 801c872:	2500      	movs	r5, #0
 801c874:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c878:	9318      	str	r3, [sp, #96]	; 0x60
 801c87a:	462e      	mov	r6, r5
 801c87c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c87e:	4620      	mov	r0, r4
 801c880:	6859      	ldr	r1, [r3, #4]
 801c882:	f002 fc1b 	bl	801f0bc <_Balloc>
 801c886:	9007      	str	r0, [sp, #28]
 801c888:	2800      	cmp	r0, #0
 801c88a:	f43f af11 	beq.w	801c6b0 <_strtod_l+0x498>
 801c88e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c890:	691a      	ldr	r2, [r3, #16]
 801c892:	3202      	adds	r2, #2
 801c894:	f103 010c 	add.w	r1, r3, #12
 801c898:	0092      	lsls	r2, r2, #2
 801c89a:	300c      	adds	r0, #12
 801c89c:	f7fe f8c4 	bl	801aa28 <memcpy>
 801c8a0:	ec4b ab10 	vmov	d0, sl, fp
 801c8a4:	aa20      	add	r2, sp, #128	; 0x80
 801c8a6:	a91f      	add	r1, sp, #124	; 0x7c
 801c8a8:	4620      	mov	r0, r4
 801c8aa:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801c8ae:	f002 ffed 	bl	801f88c <__d2b>
 801c8b2:	901e      	str	r0, [sp, #120]	; 0x78
 801c8b4:	2800      	cmp	r0, #0
 801c8b6:	f43f aefb 	beq.w	801c6b0 <_strtod_l+0x498>
 801c8ba:	2101      	movs	r1, #1
 801c8bc:	4620      	mov	r0, r4
 801c8be:	f002 fd43 	bl	801f348 <__i2b>
 801c8c2:	4606      	mov	r6, r0
 801c8c4:	2800      	cmp	r0, #0
 801c8c6:	f43f aef3 	beq.w	801c6b0 <_strtod_l+0x498>
 801c8ca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c8cc:	9904      	ldr	r1, [sp, #16]
 801c8ce:	2b00      	cmp	r3, #0
 801c8d0:	bfab      	itete	ge
 801c8d2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801c8d4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801c8d6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 801c8d8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801c8dc:	bfac      	ite	ge
 801c8de:	eb03 0902 	addge.w	r9, r3, r2
 801c8e2:	1ad7      	sublt	r7, r2, r3
 801c8e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801c8e6:	eba3 0801 	sub.w	r8, r3, r1
 801c8ea:	4490      	add	r8, r2
 801c8ec:	4ba3      	ldr	r3, [pc, #652]	; (801cb7c <_strtod_l+0x964>)
 801c8ee:	f108 38ff 	add.w	r8, r8, #4294967295
 801c8f2:	4598      	cmp	r8, r3
 801c8f4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801c8f8:	f280 80cc 	bge.w	801ca94 <_strtod_l+0x87c>
 801c8fc:	eba3 0308 	sub.w	r3, r3, r8
 801c900:	2b1f      	cmp	r3, #31
 801c902:	eba2 0203 	sub.w	r2, r2, r3
 801c906:	f04f 0101 	mov.w	r1, #1
 801c90a:	f300 80b6 	bgt.w	801ca7a <_strtod_l+0x862>
 801c90e:	fa01 f303 	lsl.w	r3, r1, r3
 801c912:	9311      	str	r3, [sp, #68]	; 0x44
 801c914:	2300      	movs	r3, #0
 801c916:	930c      	str	r3, [sp, #48]	; 0x30
 801c918:	eb09 0802 	add.w	r8, r9, r2
 801c91c:	9b04      	ldr	r3, [sp, #16]
 801c91e:	45c1      	cmp	r9, r8
 801c920:	4417      	add	r7, r2
 801c922:	441f      	add	r7, r3
 801c924:	464b      	mov	r3, r9
 801c926:	bfa8      	it	ge
 801c928:	4643      	movge	r3, r8
 801c92a:	42bb      	cmp	r3, r7
 801c92c:	bfa8      	it	ge
 801c92e:	463b      	movge	r3, r7
 801c930:	2b00      	cmp	r3, #0
 801c932:	bfc2      	ittt	gt
 801c934:	eba8 0803 	subgt.w	r8, r8, r3
 801c938:	1aff      	subgt	r7, r7, r3
 801c93a:	eba9 0903 	subgt.w	r9, r9, r3
 801c93e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c940:	2b00      	cmp	r3, #0
 801c942:	dd17      	ble.n	801c974 <_strtod_l+0x75c>
 801c944:	4631      	mov	r1, r6
 801c946:	461a      	mov	r2, r3
 801c948:	4620      	mov	r0, r4
 801c94a:	f002 fdb9 	bl	801f4c0 <__pow5mult>
 801c94e:	4606      	mov	r6, r0
 801c950:	2800      	cmp	r0, #0
 801c952:	f43f aead 	beq.w	801c6b0 <_strtod_l+0x498>
 801c956:	4601      	mov	r1, r0
 801c958:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801c95a:	4620      	mov	r0, r4
 801c95c:	f002 fd0a 	bl	801f374 <__multiply>
 801c960:	900f      	str	r0, [sp, #60]	; 0x3c
 801c962:	2800      	cmp	r0, #0
 801c964:	f43f aea4 	beq.w	801c6b0 <_strtod_l+0x498>
 801c968:	991e      	ldr	r1, [sp, #120]	; 0x78
 801c96a:	4620      	mov	r0, r4
 801c96c:	f002 fbe6 	bl	801f13c <_Bfree>
 801c970:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c972:	931e      	str	r3, [sp, #120]	; 0x78
 801c974:	f1b8 0f00 	cmp.w	r8, #0
 801c978:	f300 8091 	bgt.w	801ca9e <_strtod_l+0x886>
 801c97c:	9b08      	ldr	r3, [sp, #32]
 801c97e:	2b00      	cmp	r3, #0
 801c980:	dd08      	ble.n	801c994 <_strtod_l+0x77c>
 801c982:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c984:	9907      	ldr	r1, [sp, #28]
 801c986:	4620      	mov	r0, r4
 801c988:	f002 fd9a 	bl	801f4c0 <__pow5mult>
 801c98c:	9007      	str	r0, [sp, #28]
 801c98e:	2800      	cmp	r0, #0
 801c990:	f43f ae8e 	beq.w	801c6b0 <_strtod_l+0x498>
 801c994:	2f00      	cmp	r7, #0
 801c996:	dd08      	ble.n	801c9aa <_strtod_l+0x792>
 801c998:	9907      	ldr	r1, [sp, #28]
 801c99a:	463a      	mov	r2, r7
 801c99c:	4620      	mov	r0, r4
 801c99e:	f002 fde9 	bl	801f574 <__lshift>
 801c9a2:	9007      	str	r0, [sp, #28]
 801c9a4:	2800      	cmp	r0, #0
 801c9a6:	f43f ae83 	beq.w	801c6b0 <_strtod_l+0x498>
 801c9aa:	f1b9 0f00 	cmp.w	r9, #0
 801c9ae:	dd08      	ble.n	801c9c2 <_strtod_l+0x7aa>
 801c9b0:	4631      	mov	r1, r6
 801c9b2:	464a      	mov	r2, r9
 801c9b4:	4620      	mov	r0, r4
 801c9b6:	f002 fddd 	bl	801f574 <__lshift>
 801c9ba:	4606      	mov	r6, r0
 801c9bc:	2800      	cmp	r0, #0
 801c9be:	f43f ae77 	beq.w	801c6b0 <_strtod_l+0x498>
 801c9c2:	9a07      	ldr	r2, [sp, #28]
 801c9c4:	991e      	ldr	r1, [sp, #120]	; 0x78
 801c9c6:	4620      	mov	r0, r4
 801c9c8:	f002 fe5c 	bl	801f684 <__mdiff>
 801c9cc:	4605      	mov	r5, r0
 801c9ce:	2800      	cmp	r0, #0
 801c9d0:	f43f ae6e 	beq.w	801c6b0 <_strtod_l+0x498>
 801c9d4:	68c3      	ldr	r3, [r0, #12]
 801c9d6:	930f      	str	r3, [sp, #60]	; 0x3c
 801c9d8:	2300      	movs	r3, #0
 801c9da:	60c3      	str	r3, [r0, #12]
 801c9dc:	4631      	mov	r1, r6
 801c9de:	f002 fe35 	bl	801f64c <__mcmp>
 801c9e2:	2800      	cmp	r0, #0
 801c9e4:	da65      	bge.n	801cab2 <_strtod_l+0x89a>
 801c9e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c9e8:	ea53 030a 	orrs.w	r3, r3, sl
 801c9ec:	f040 8087 	bne.w	801cafe <_strtod_l+0x8e6>
 801c9f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c9f4:	2b00      	cmp	r3, #0
 801c9f6:	f040 8082 	bne.w	801cafe <_strtod_l+0x8e6>
 801c9fa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801c9fe:	0d1b      	lsrs	r3, r3, #20
 801ca00:	051b      	lsls	r3, r3, #20
 801ca02:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801ca06:	d97a      	bls.n	801cafe <_strtod_l+0x8e6>
 801ca08:	696b      	ldr	r3, [r5, #20]
 801ca0a:	b913      	cbnz	r3, 801ca12 <_strtod_l+0x7fa>
 801ca0c:	692b      	ldr	r3, [r5, #16]
 801ca0e:	2b01      	cmp	r3, #1
 801ca10:	dd75      	ble.n	801cafe <_strtod_l+0x8e6>
 801ca12:	4629      	mov	r1, r5
 801ca14:	2201      	movs	r2, #1
 801ca16:	4620      	mov	r0, r4
 801ca18:	f002 fdac 	bl	801f574 <__lshift>
 801ca1c:	4631      	mov	r1, r6
 801ca1e:	4605      	mov	r5, r0
 801ca20:	f002 fe14 	bl	801f64c <__mcmp>
 801ca24:	2800      	cmp	r0, #0
 801ca26:	dd6a      	ble.n	801cafe <_strtod_l+0x8e6>
 801ca28:	9904      	ldr	r1, [sp, #16]
 801ca2a:	4a55      	ldr	r2, [pc, #340]	; (801cb80 <_strtod_l+0x968>)
 801ca2c:	465b      	mov	r3, fp
 801ca2e:	2900      	cmp	r1, #0
 801ca30:	f000 8085 	beq.w	801cb3e <_strtod_l+0x926>
 801ca34:	ea02 010b 	and.w	r1, r2, fp
 801ca38:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801ca3c:	dc7f      	bgt.n	801cb3e <_strtod_l+0x926>
 801ca3e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801ca42:	f77f aeaa 	ble.w	801c79a <_strtod_l+0x582>
 801ca46:	4a4f      	ldr	r2, [pc, #316]	; (801cb84 <_strtod_l+0x96c>)
 801ca48:	2300      	movs	r3, #0
 801ca4a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801ca4e:	4650      	mov	r0, sl
 801ca50:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801ca54:	4659      	mov	r1, fp
 801ca56:	f7e3 fdef 	bl	8000638 <__aeabi_dmul>
 801ca5a:	460b      	mov	r3, r1
 801ca5c:	4303      	orrs	r3, r0
 801ca5e:	bf08      	it	eq
 801ca60:	2322      	moveq	r3, #34	; 0x22
 801ca62:	4682      	mov	sl, r0
 801ca64:	468b      	mov	fp, r1
 801ca66:	bf08      	it	eq
 801ca68:	6023      	streq	r3, [r4, #0]
 801ca6a:	e62b      	b.n	801c6c4 <_strtod_l+0x4ac>
 801ca6c:	f04f 32ff 	mov.w	r2, #4294967295
 801ca70:	fa02 f303 	lsl.w	r3, r2, r3
 801ca74:	ea03 0a0a 	and.w	sl, r3, sl
 801ca78:	e6de      	b.n	801c838 <_strtod_l+0x620>
 801ca7a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801ca7e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801ca82:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801ca86:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801ca8a:	fa01 f308 	lsl.w	r3, r1, r8
 801ca8e:	930c      	str	r3, [sp, #48]	; 0x30
 801ca90:	9111      	str	r1, [sp, #68]	; 0x44
 801ca92:	e741      	b.n	801c918 <_strtod_l+0x700>
 801ca94:	2300      	movs	r3, #0
 801ca96:	930c      	str	r3, [sp, #48]	; 0x30
 801ca98:	2301      	movs	r3, #1
 801ca9a:	9311      	str	r3, [sp, #68]	; 0x44
 801ca9c:	e73c      	b.n	801c918 <_strtod_l+0x700>
 801ca9e:	991e      	ldr	r1, [sp, #120]	; 0x78
 801caa0:	4642      	mov	r2, r8
 801caa2:	4620      	mov	r0, r4
 801caa4:	f002 fd66 	bl	801f574 <__lshift>
 801caa8:	901e      	str	r0, [sp, #120]	; 0x78
 801caaa:	2800      	cmp	r0, #0
 801caac:	f47f af66 	bne.w	801c97c <_strtod_l+0x764>
 801cab0:	e5fe      	b.n	801c6b0 <_strtod_l+0x498>
 801cab2:	465f      	mov	r7, fp
 801cab4:	d16e      	bne.n	801cb94 <_strtod_l+0x97c>
 801cab6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cab8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801cabc:	b342      	cbz	r2, 801cb10 <_strtod_l+0x8f8>
 801cabe:	4a32      	ldr	r2, [pc, #200]	; (801cb88 <_strtod_l+0x970>)
 801cac0:	4293      	cmp	r3, r2
 801cac2:	d128      	bne.n	801cb16 <_strtod_l+0x8fe>
 801cac4:	9b04      	ldr	r3, [sp, #16]
 801cac6:	4650      	mov	r0, sl
 801cac8:	b1eb      	cbz	r3, 801cb06 <_strtod_l+0x8ee>
 801caca:	4a2d      	ldr	r2, [pc, #180]	; (801cb80 <_strtod_l+0x968>)
 801cacc:	403a      	ands	r2, r7
 801cace:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801cad2:	f04f 31ff 	mov.w	r1, #4294967295
 801cad6:	d819      	bhi.n	801cb0c <_strtod_l+0x8f4>
 801cad8:	0d12      	lsrs	r2, r2, #20
 801cada:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801cade:	fa01 f303 	lsl.w	r3, r1, r3
 801cae2:	4298      	cmp	r0, r3
 801cae4:	d117      	bne.n	801cb16 <_strtod_l+0x8fe>
 801cae6:	4b29      	ldr	r3, [pc, #164]	; (801cb8c <_strtod_l+0x974>)
 801cae8:	429f      	cmp	r7, r3
 801caea:	d102      	bne.n	801caf2 <_strtod_l+0x8da>
 801caec:	3001      	adds	r0, #1
 801caee:	f43f addf 	beq.w	801c6b0 <_strtod_l+0x498>
 801caf2:	4b23      	ldr	r3, [pc, #140]	; (801cb80 <_strtod_l+0x968>)
 801caf4:	403b      	ands	r3, r7
 801caf6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801cafa:	f04f 0a00 	mov.w	sl, #0
 801cafe:	9b04      	ldr	r3, [sp, #16]
 801cb00:	2b00      	cmp	r3, #0
 801cb02:	d1a0      	bne.n	801ca46 <_strtod_l+0x82e>
 801cb04:	e5de      	b.n	801c6c4 <_strtod_l+0x4ac>
 801cb06:	f04f 33ff 	mov.w	r3, #4294967295
 801cb0a:	e7ea      	b.n	801cae2 <_strtod_l+0x8ca>
 801cb0c:	460b      	mov	r3, r1
 801cb0e:	e7e8      	b.n	801cae2 <_strtod_l+0x8ca>
 801cb10:	ea53 030a 	orrs.w	r3, r3, sl
 801cb14:	d088      	beq.n	801ca28 <_strtod_l+0x810>
 801cb16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cb18:	b1db      	cbz	r3, 801cb52 <_strtod_l+0x93a>
 801cb1a:	423b      	tst	r3, r7
 801cb1c:	d0ef      	beq.n	801cafe <_strtod_l+0x8e6>
 801cb1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cb20:	9a04      	ldr	r2, [sp, #16]
 801cb22:	4650      	mov	r0, sl
 801cb24:	4659      	mov	r1, fp
 801cb26:	b1c3      	cbz	r3, 801cb5a <_strtod_l+0x942>
 801cb28:	f7ff fb5a 	bl	801c1e0 <sulp>
 801cb2c:	4602      	mov	r2, r0
 801cb2e:	460b      	mov	r3, r1
 801cb30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801cb34:	f7e3 fbca 	bl	80002cc <__adddf3>
 801cb38:	4682      	mov	sl, r0
 801cb3a:	468b      	mov	fp, r1
 801cb3c:	e7df      	b.n	801cafe <_strtod_l+0x8e6>
 801cb3e:	4013      	ands	r3, r2
 801cb40:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801cb44:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801cb48:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801cb4c:	f04f 3aff 	mov.w	sl, #4294967295
 801cb50:	e7d5      	b.n	801cafe <_strtod_l+0x8e6>
 801cb52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801cb54:	ea13 0f0a 	tst.w	r3, sl
 801cb58:	e7e0      	b.n	801cb1c <_strtod_l+0x904>
 801cb5a:	f7ff fb41 	bl	801c1e0 <sulp>
 801cb5e:	4602      	mov	r2, r0
 801cb60:	460b      	mov	r3, r1
 801cb62:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801cb66:	f7e3 fbaf 	bl	80002c8 <__aeabi_dsub>
 801cb6a:	2200      	movs	r2, #0
 801cb6c:	2300      	movs	r3, #0
 801cb6e:	4682      	mov	sl, r0
 801cb70:	468b      	mov	fp, r1
 801cb72:	f7e3 ffc9 	bl	8000b08 <__aeabi_dcmpeq>
 801cb76:	2800      	cmp	r0, #0
 801cb78:	d0c1      	beq.n	801cafe <_strtod_l+0x8e6>
 801cb7a:	e60e      	b.n	801c79a <_strtod_l+0x582>
 801cb7c:	fffffc02 	.word	0xfffffc02
 801cb80:	7ff00000 	.word	0x7ff00000
 801cb84:	39500000 	.word	0x39500000
 801cb88:	000fffff 	.word	0x000fffff
 801cb8c:	7fefffff 	.word	0x7fefffff
 801cb90:	08022e38 	.word	0x08022e38
 801cb94:	4631      	mov	r1, r6
 801cb96:	4628      	mov	r0, r5
 801cb98:	f002 fed4 	bl	801f944 <__ratio>
 801cb9c:	ec59 8b10 	vmov	r8, r9, d0
 801cba0:	ee10 0a10 	vmov	r0, s0
 801cba4:	2200      	movs	r2, #0
 801cba6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801cbaa:	4649      	mov	r1, r9
 801cbac:	f7e3 ffc0 	bl	8000b30 <__aeabi_dcmple>
 801cbb0:	2800      	cmp	r0, #0
 801cbb2:	d07c      	beq.n	801ccae <_strtod_l+0xa96>
 801cbb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cbb6:	2b00      	cmp	r3, #0
 801cbb8:	d04c      	beq.n	801cc54 <_strtod_l+0xa3c>
 801cbba:	4b95      	ldr	r3, [pc, #596]	; (801ce10 <_strtod_l+0xbf8>)
 801cbbc:	2200      	movs	r2, #0
 801cbbe:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801cbc2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801ce10 <_strtod_l+0xbf8>
 801cbc6:	f04f 0800 	mov.w	r8, #0
 801cbca:	4b92      	ldr	r3, [pc, #584]	; (801ce14 <_strtod_l+0xbfc>)
 801cbcc:	403b      	ands	r3, r7
 801cbce:	9311      	str	r3, [sp, #68]	; 0x44
 801cbd0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cbd2:	4b91      	ldr	r3, [pc, #580]	; (801ce18 <_strtod_l+0xc00>)
 801cbd4:	429a      	cmp	r2, r3
 801cbd6:	f040 80b2 	bne.w	801cd3e <_strtod_l+0xb26>
 801cbda:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801cbde:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801cbe2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801cbe6:	ec4b ab10 	vmov	d0, sl, fp
 801cbea:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801cbee:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801cbf2:	f002 fdcf 	bl	801f794 <__ulp>
 801cbf6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801cbfa:	ec53 2b10 	vmov	r2, r3, d0
 801cbfe:	f7e3 fd1b 	bl	8000638 <__aeabi_dmul>
 801cc02:	4652      	mov	r2, sl
 801cc04:	465b      	mov	r3, fp
 801cc06:	f7e3 fb61 	bl	80002cc <__adddf3>
 801cc0a:	460b      	mov	r3, r1
 801cc0c:	4981      	ldr	r1, [pc, #516]	; (801ce14 <_strtod_l+0xbfc>)
 801cc0e:	4a83      	ldr	r2, [pc, #524]	; (801ce1c <_strtod_l+0xc04>)
 801cc10:	4019      	ands	r1, r3
 801cc12:	4291      	cmp	r1, r2
 801cc14:	4682      	mov	sl, r0
 801cc16:	d95e      	bls.n	801ccd6 <_strtod_l+0xabe>
 801cc18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cc1a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801cc1e:	4293      	cmp	r3, r2
 801cc20:	d103      	bne.n	801cc2a <_strtod_l+0xa12>
 801cc22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cc24:	3301      	adds	r3, #1
 801cc26:	f43f ad43 	beq.w	801c6b0 <_strtod_l+0x498>
 801cc2a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 801ce28 <_strtod_l+0xc10>
 801cc2e:	f04f 3aff 	mov.w	sl, #4294967295
 801cc32:	991e      	ldr	r1, [sp, #120]	; 0x78
 801cc34:	4620      	mov	r0, r4
 801cc36:	f002 fa81 	bl	801f13c <_Bfree>
 801cc3a:	9907      	ldr	r1, [sp, #28]
 801cc3c:	4620      	mov	r0, r4
 801cc3e:	f002 fa7d 	bl	801f13c <_Bfree>
 801cc42:	4631      	mov	r1, r6
 801cc44:	4620      	mov	r0, r4
 801cc46:	f002 fa79 	bl	801f13c <_Bfree>
 801cc4a:	4629      	mov	r1, r5
 801cc4c:	4620      	mov	r0, r4
 801cc4e:	f002 fa75 	bl	801f13c <_Bfree>
 801cc52:	e613      	b.n	801c87c <_strtod_l+0x664>
 801cc54:	f1ba 0f00 	cmp.w	sl, #0
 801cc58:	d11b      	bne.n	801cc92 <_strtod_l+0xa7a>
 801cc5a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801cc5e:	b9f3      	cbnz	r3, 801cc9e <_strtod_l+0xa86>
 801cc60:	4b6b      	ldr	r3, [pc, #428]	; (801ce10 <_strtod_l+0xbf8>)
 801cc62:	2200      	movs	r2, #0
 801cc64:	4640      	mov	r0, r8
 801cc66:	4649      	mov	r1, r9
 801cc68:	f7e3 ff58 	bl	8000b1c <__aeabi_dcmplt>
 801cc6c:	b9d0      	cbnz	r0, 801cca4 <_strtod_l+0xa8c>
 801cc6e:	4640      	mov	r0, r8
 801cc70:	4649      	mov	r1, r9
 801cc72:	4b6b      	ldr	r3, [pc, #428]	; (801ce20 <_strtod_l+0xc08>)
 801cc74:	2200      	movs	r2, #0
 801cc76:	f7e3 fcdf 	bl	8000638 <__aeabi_dmul>
 801cc7a:	4680      	mov	r8, r0
 801cc7c:	4689      	mov	r9, r1
 801cc7e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801cc82:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801cc86:	931b      	str	r3, [sp, #108]	; 0x6c
 801cc88:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801cc8c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801cc90:	e79b      	b.n	801cbca <_strtod_l+0x9b2>
 801cc92:	f1ba 0f01 	cmp.w	sl, #1
 801cc96:	d102      	bne.n	801cc9e <_strtod_l+0xa86>
 801cc98:	2f00      	cmp	r7, #0
 801cc9a:	f43f ad7e 	beq.w	801c79a <_strtod_l+0x582>
 801cc9e:	4b61      	ldr	r3, [pc, #388]	; (801ce24 <_strtod_l+0xc0c>)
 801cca0:	2200      	movs	r2, #0
 801cca2:	e78c      	b.n	801cbbe <_strtod_l+0x9a6>
 801cca4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801ce20 <_strtod_l+0xc08>
 801cca8:	f04f 0800 	mov.w	r8, #0
 801ccac:	e7e7      	b.n	801cc7e <_strtod_l+0xa66>
 801ccae:	4b5c      	ldr	r3, [pc, #368]	; (801ce20 <_strtod_l+0xc08>)
 801ccb0:	4640      	mov	r0, r8
 801ccb2:	4649      	mov	r1, r9
 801ccb4:	2200      	movs	r2, #0
 801ccb6:	f7e3 fcbf 	bl	8000638 <__aeabi_dmul>
 801ccba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ccbc:	4680      	mov	r8, r0
 801ccbe:	4689      	mov	r9, r1
 801ccc0:	b933      	cbnz	r3, 801ccd0 <_strtod_l+0xab8>
 801ccc2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ccc6:	9012      	str	r0, [sp, #72]	; 0x48
 801ccc8:	9313      	str	r3, [sp, #76]	; 0x4c
 801ccca:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801ccce:	e7dd      	b.n	801cc8c <_strtod_l+0xa74>
 801ccd0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801ccd4:	e7f9      	b.n	801ccca <_strtod_l+0xab2>
 801ccd6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801ccda:	9b04      	ldr	r3, [sp, #16]
 801ccdc:	2b00      	cmp	r3, #0
 801ccde:	d1a8      	bne.n	801cc32 <_strtod_l+0xa1a>
 801cce0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801cce4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cce6:	0d1b      	lsrs	r3, r3, #20
 801cce8:	051b      	lsls	r3, r3, #20
 801ccea:	429a      	cmp	r2, r3
 801ccec:	d1a1      	bne.n	801cc32 <_strtod_l+0xa1a>
 801ccee:	4640      	mov	r0, r8
 801ccf0:	4649      	mov	r1, r9
 801ccf2:	f7e4 f851 	bl	8000d98 <__aeabi_d2lz>
 801ccf6:	f7e3 fc71 	bl	80005dc <__aeabi_l2d>
 801ccfa:	4602      	mov	r2, r0
 801ccfc:	460b      	mov	r3, r1
 801ccfe:	4640      	mov	r0, r8
 801cd00:	4649      	mov	r1, r9
 801cd02:	f7e3 fae1 	bl	80002c8 <__aeabi_dsub>
 801cd06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cd08:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801cd0c:	ea43 030a 	orr.w	r3, r3, sl
 801cd10:	4313      	orrs	r3, r2
 801cd12:	4680      	mov	r8, r0
 801cd14:	4689      	mov	r9, r1
 801cd16:	d053      	beq.n	801cdc0 <_strtod_l+0xba8>
 801cd18:	a335      	add	r3, pc, #212	; (adr r3, 801cdf0 <_strtod_l+0xbd8>)
 801cd1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd1e:	f7e3 fefd 	bl	8000b1c <__aeabi_dcmplt>
 801cd22:	2800      	cmp	r0, #0
 801cd24:	f47f acce 	bne.w	801c6c4 <_strtod_l+0x4ac>
 801cd28:	a333      	add	r3, pc, #204	; (adr r3, 801cdf8 <_strtod_l+0xbe0>)
 801cd2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd2e:	4640      	mov	r0, r8
 801cd30:	4649      	mov	r1, r9
 801cd32:	f7e3 ff11 	bl	8000b58 <__aeabi_dcmpgt>
 801cd36:	2800      	cmp	r0, #0
 801cd38:	f43f af7b 	beq.w	801cc32 <_strtod_l+0xa1a>
 801cd3c:	e4c2      	b.n	801c6c4 <_strtod_l+0x4ac>
 801cd3e:	9b04      	ldr	r3, [sp, #16]
 801cd40:	b333      	cbz	r3, 801cd90 <_strtod_l+0xb78>
 801cd42:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801cd44:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801cd48:	d822      	bhi.n	801cd90 <_strtod_l+0xb78>
 801cd4a:	a32d      	add	r3, pc, #180	; (adr r3, 801ce00 <_strtod_l+0xbe8>)
 801cd4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd50:	4640      	mov	r0, r8
 801cd52:	4649      	mov	r1, r9
 801cd54:	f7e3 feec 	bl	8000b30 <__aeabi_dcmple>
 801cd58:	b1a0      	cbz	r0, 801cd84 <_strtod_l+0xb6c>
 801cd5a:	4649      	mov	r1, r9
 801cd5c:	4640      	mov	r0, r8
 801cd5e:	f7e3 ff43 	bl	8000be8 <__aeabi_d2uiz>
 801cd62:	2801      	cmp	r0, #1
 801cd64:	bf38      	it	cc
 801cd66:	2001      	movcc	r0, #1
 801cd68:	f7e3 fbec 	bl	8000544 <__aeabi_ui2d>
 801cd6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cd6e:	4680      	mov	r8, r0
 801cd70:	4689      	mov	r9, r1
 801cd72:	bb13      	cbnz	r3, 801cdba <_strtod_l+0xba2>
 801cd74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801cd78:	9014      	str	r0, [sp, #80]	; 0x50
 801cd7a:	9315      	str	r3, [sp, #84]	; 0x54
 801cd7c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801cd80:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801cd84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cd86:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cd88:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801cd8c:	1a9b      	subs	r3, r3, r2
 801cd8e:	930d      	str	r3, [sp, #52]	; 0x34
 801cd90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801cd94:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801cd98:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801cd9c:	f002 fcfa 	bl	801f794 <__ulp>
 801cda0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801cda4:	ec53 2b10 	vmov	r2, r3, d0
 801cda8:	f7e3 fc46 	bl	8000638 <__aeabi_dmul>
 801cdac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801cdb0:	f7e3 fa8c 	bl	80002cc <__adddf3>
 801cdb4:	4682      	mov	sl, r0
 801cdb6:	468b      	mov	fp, r1
 801cdb8:	e78f      	b.n	801ccda <_strtod_l+0xac2>
 801cdba:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801cdbe:	e7dd      	b.n	801cd7c <_strtod_l+0xb64>
 801cdc0:	a311      	add	r3, pc, #68	; (adr r3, 801ce08 <_strtod_l+0xbf0>)
 801cdc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cdc6:	f7e3 fea9 	bl	8000b1c <__aeabi_dcmplt>
 801cdca:	e7b4      	b.n	801cd36 <_strtod_l+0xb1e>
 801cdcc:	2300      	movs	r3, #0
 801cdce:	930e      	str	r3, [sp, #56]	; 0x38
 801cdd0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801cdd2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801cdd4:	6013      	str	r3, [r2, #0]
 801cdd6:	f7ff ba65 	b.w	801c2a4 <_strtod_l+0x8c>
 801cdda:	2b65      	cmp	r3, #101	; 0x65
 801cddc:	f43f ab5d 	beq.w	801c49a <_strtod_l+0x282>
 801cde0:	2b45      	cmp	r3, #69	; 0x45
 801cde2:	f43f ab5a 	beq.w	801c49a <_strtod_l+0x282>
 801cde6:	2201      	movs	r2, #1
 801cde8:	f7ff bb92 	b.w	801c510 <_strtod_l+0x2f8>
 801cdec:	f3af 8000 	nop.w
 801cdf0:	94a03595 	.word	0x94a03595
 801cdf4:	3fdfffff 	.word	0x3fdfffff
 801cdf8:	35afe535 	.word	0x35afe535
 801cdfc:	3fe00000 	.word	0x3fe00000
 801ce00:	ffc00000 	.word	0xffc00000
 801ce04:	41dfffff 	.word	0x41dfffff
 801ce08:	94a03595 	.word	0x94a03595
 801ce0c:	3fcfffff 	.word	0x3fcfffff
 801ce10:	3ff00000 	.word	0x3ff00000
 801ce14:	7ff00000 	.word	0x7ff00000
 801ce18:	7fe00000 	.word	0x7fe00000
 801ce1c:	7c9fffff 	.word	0x7c9fffff
 801ce20:	3fe00000 	.word	0x3fe00000
 801ce24:	bff00000 	.word	0xbff00000
 801ce28:	7fefffff 	.word	0x7fefffff

0801ce2c <_strtod_r>:
 801ce2c:	4b01      	ldr	r3, [pc, #4]	; (801ce34 <_strtod_r+0x8>)
 801ce2e:	f7ff b9f3 	b.w	801c218 <_strtod_l>
 801ce32:	bf00      	nop
 801ce34:	200001c4 	.word	0x200001c4

0801ce38 <strtok>:
 801ce38:	4b16      	ldr	r3, [pc, #88]	; (801ce94 <strtok+0x5c>)
 801ce3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ce3c:	681e      	ldr	r6, [r3, #0]
 801ce3e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 801ce40:	4605      	mov	r5, r0
 801ce42:	b9fc      	cbnz	r4, 801ce84 <strtok+0x4c>
 801ce44:	2050      	movs	r0, #80	; 0x50
 801ce46:	9101      	str	r1, [sp, #4]
 801ce48:	f7fd fdde 	bl	801aa08 <malloc>
 801ce4c:	9901      	ldr	r1, [sp, #4]
 801ce4e:	65b0      	str	r0, [r6, #88]	; 0x58
 801ce50:	4602      	mov	r2, r0
 801ce52:	b920      	cbnz	r0, 801ce5e <strtok+0x26>
 801ce54:	4b10      	ldr	r3, [pc, #64]	; (801ce98 <strtok+0x60>)
 801ce56:	4811      	ldr	r0, [pc, #68]	; (801ce9c <strtok+0x64>)
 801ce58:	2157      	movs	r1, #87	; 0x57
 801ce5a:	f000 fca3 	bl	801d7a4 <__assert_func>
 801ce5e:	e9c0 4400 	strd	r4, r4, [r0]
 801ce62:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801ce66:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801ce6a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801ce6e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801ce72:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801ce76:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801ce7a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801ce7e:	6184      	str	r4, [r0, #24]
 801ce80:	7704      	strb	r4, [r0, #28]
 801ce82:	6244      	str	r4, [r0, #36]	; 0x24
 801ce84:	6db2      	ldr	r2, [r6, #88]	; 0x58
 801ce86:	2301      	movs	r3, #1
 801ce88:	4628      	mov	r0, r5
 801ce8a:	b002      	add	sp, #8
 801ce8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ce90:	f000 b806 	b.w	801cea0 <__strtok_r>
 801ce94:	200000f8 	.word	0x200000f8
 801ce98:	08022ca0 	.word	0x08022ca0
 801ce9c:	08022e60 	.word	0x08022e60

0801cea0 <__strtok_r>:
 801cea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cea2:	b908      	cbnz	r0, 801cea8 <__strtok_r+0x8>
 801cea4:	6810      	ldr	r0, [r2, #0]
 801cea6:	b188      	cbz	r0, 801cecc <__strtok_r+0x2c>
 801cea8:	4604      	mov	r4, r0
 801ceaa:	4620      	mov	r0, r4
 801ceac:	f814 5b01 	ldrb.w	r5, [r4], #1
 801ceb0:	460f      	mov	r7, r1
 801ceb2:	f817 6b01 	ldrb.w	r6, [r7], #1
 801ceb6:	b91e      	cbnz	r6, 801cec0 <__strtok_r+0x20>
 801ceb8:	b965      	cbnz	r5, 801ced4 <__strtok_r+0x34>
 801ceba:	6015      	str	r5, [r2, #0]
 801cebc:	4628      	mov	r0, r5
 801cebe:	e005      	b.n	801cecc <__strtok_r+0x2c>
 801cec0:	42b5      	cmp	r5, r6
 801cec2:	d1f6      	bne.n	801ceb2 <__strtok_r+0x12>
 801cec4:	2b00      	cmp	r3, #0
 801cec6:	d1f0      	bne.n	801ceaa <__strtok_r+0xa>
 801cec8:	6014      	str	r4, [r2, #0]
 801ceca:	7003      	strb	r3, [r0, #0]
 801cecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cece:	461c      	mov	r4, r3
 801ced0:	e00c      	b.n	801ceec <__strtok_r+0x4c>
 801ced2:	b915      	cbnz	r5, 801ceda <__strtok_r+0x3a>
 801ced4:	f814 3b01 	ldrb.w	r3, [r4], #1
 801ced8:	460e      	mov	r6, r1
 801ceda:	f816 5b01 	ldrb.w	r5, [r6], #1
 801cede:	42ab      	cmp	r3, r5
 801cee0:	d1f7      	bne.n	801ced2 <__strtok_r+0x32>
 801cee2:	2b00      	cmp	r3, #0
 801cee4:	d0f3      	beq.n	801cece <__strtok_r+0x2e>
 801cee6:	2300      	movs	r3, #0
 801cee8:	f804 3c01 	strb.w	r3, [r4, #-1]
 801ceec:	6014      	str	r4, [r2, #0]
 801ceee:	e7ed      	b.n	801cecc <__strtok_r+0x2c>

0801cef0 <_strtol_l.isra.0>:
 801cef0:	2b01      	cmp	r3, #1
 801cef2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cef6:	d001      	beq.n	801cefc <_strtol_l.isra.0+0xc>
 801cef8:	2b24      	cmp	r3, #36	; 0x24
 801cefa:	d906      	bls.n	801cf0a <_strtol_l.isra.0+0x1a>
 801cefc:	f7fd fb42 	bl	801a584 <__errno>
 801cf00:	2316      	movs	r3, #22
 801cf02:	6003      	str	r3, [r0, #0]
 801cf04:	2000      	movs	r0, #0
 801cf06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cf0a:	4f3a      	ldr	r7, [pc, #232]	; (801cff4 <_strtol_l.isra.0+0x104>)
 801cf0c:	468e      	mov	lr, r1
 801cf0e:	4676      	mov	r6, lr
 801cf10:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801cf14:	5de5      	ldrb	r5, [r4, r7]
 801cf16:	f015 0508 	ands.w	r5, r5, #8
 801cf1a:	d1f8      	bne.n	801cf0e <_strtol_l.isra.0+0x1e>
 801cf1c:	2c2d      	cmp	r4, #45	; 0x2d
 801cf1e:	d134      	bne.n	801cf8a <_strtol_l.isra.0+0x9a>
 801cf20:	f89e 4000 	ldrb.w	r4, [lr]
 801cf24:	f04f 0801 	mov.w	r8, #1
 801cf28:	f106 0e02 	add.w	lr, r6, #2
 801cf2c:	2b00      	cmp	r3, #0
 801cf2e:	d05c      	beq.n	801cfea <_strtol_l.isra.0+0xfa>
 801cf30:	2b10      	cmp	r3, #16
 801cf32:	d10c      	bne.n	801cf4e <_strtol_l.isra.0+0x5e>
 801cf34:	2c30      	cmp	r4, #48	; 0x30
 801cf36:	d10a      	bne.n	801cf4e <_strtol_l.isra.0+0x5e>
 801cf38:	f89e 4000 	ldrb.w	r4, [lr]
 801cf3c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801cf40:	2c58      	cmp	r4, #88	; 0x58
 801cf42:	d14d      	bne.n	801cfe0 <_strtol_l.isra.0+0xf0>
 801cf44:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801cf48:	2310      	movs	r3, #16
 801cf4a:	f10e 0e02 	add.w	lr, lr, #2
 801cf4e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801cf52:	f10c 3cff 	add.w	ip, ip, #4294967295
 801cf56:	2600      	movs	r6, #0
 801cf58:	fbbc f9f3 	udiv	r9, ip, r3
 801cf5c:	4635      	mov	r5, r6
 801cf5e:	fb03 ca19 	mls	sl, r3, r9, ip
 801cf62:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801cf66:	2f09      	cmp	r7, #9
 801cf68:	d818      	bhi.n	801cf9c <_strtol_l.isra.0+0xac>
 801cf6a:	463c      	mov	r4, r7
 801cf6c:	42a3      	cmp	r3, r4
 801cf6e:	dd24      	ble.n	801cfba <_strtol_l.isra.0+0xca>
 801cf70:	2e00      	cmp	r6, #0
 801cf72:	db1f      	blt.n	801cfb4 <_strtol_l.isra.0+0xc4>
 801cf74:	45a9      	cmp	r9, r5
 801cf76:	d31d      	bcc.n	801cfb4 <_strtol_l.isra.0+0xc4>
 801cf78:	d101      	bne.n	801cf7e <_strtol_l.isra.0+0x8e>
 801cf7a:	45a2      	cmp	sl, r4
 801cf7c:	db1a      	blt.n	801cfb4 <_strtol_l.isra.0+0xc4>
 801cf7e:	fb05 4503 	mla	r5, r5, r3, r4
 801cf82:	2601      	movs	r6, #1
 801cf84:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801cf88:	e7eb      	b.n	801cf62 <_strtol_l.isra.0+0x72>
 801cf8a:	2c2b      	cmp	r4, #43	; 0x2b
 801cf8c:	bf08      	it	eq
 801cf8e:	f89e 4000 	ldrbeq.w	r4, [lr]
 801cf92:	46a8      	mov	r8, r5
 801cf94:	bf08      	it	eq
 801cf96:	f106 0e02 	addeq.w	lr, r6, #2
 801cf9a:	e7c7      	b.n	801cf2c <_strtol_l.isra.0+0x3c>
 801cf9c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801cfa0:	2f19      	cmp	r7, #25
 801cfa2:	d801      	bhi.n	801cfa8 <_strtol_l.isra.0+0xb8>
 801cfa4:	3c37      	subs	r4, #55	; 0x37
 801cfa6:	e7e1      	b.n	801cf6c <_strtol_l.isra.0+0x7c>
 801cfa8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801cfac:	2f19      	cmp	r7, #25
 801cfae:	d804      	bhi.n	801cfba <_strtol_l.isra.0+0xca>
 801cfb0:	3c57      	subs	r4, #87	; 0x57
 801cfb2:	e7db      	b.n	801cf6c <_strtol_l.isra.0+0x7c>
 801cfb4:	f04f 36ff 	mov.w	r6, #4294967295
 801cfb8:	e7e4      	b.n	801cf84 <_strtol_l.isra.0+0x94>
 801cfba:	2e00      	cmp	r6, #0
 801cfbc:	da05      	bge.n	801cfca <_strtol_l.isra.0+0xda>
 801cfbe:	2322      	movs	r3, #34	; 0x22
 801cfc0:	6003      	str	r3, [r0, #0]
 801cfc2:	4665      	mov	r5, ip
 801cfc4:	b942      	cbnz	r2, 801cfd8 <_strtol_l.isra.0+0xe8>
 801cfc6:	4628      	mov	r0, r5
 801cfc8:	e79d      	b.n	801cf06 <_strtol_l.isra.0+0x16>
 801cfca:	f1b8 0f00 	cmp.w	r8, #0
 801cfce:	d000      	beq.n	801cfd2 <_strtol_l.isra.0+0xe2>
 801cfd0:	426d      	negs	r5, r5
 801cfd2:	2a00      	cmp	r2, #0
 801cfd4:	d0f7      	beq.n	801cfc6 <_strtol_l.isra.0+0xd6>
 801cfd6:	b10e      	cbz	r6, 801cfdc <_strtol_l.isra.0+0xec>
 801cfd8:	f10e 31ff 	add.w	r1, lr, #4294967295
 801cfdc:	6011      	str	r1, [r2, #0]
 801cfde:	e7f2      	b.n	801cfc6 <_strtol_l.isra.0+0xd6>
 801cfe0:	2430      	movs	r4, #48	; 0x30
 801cfe2:	2b00      	cmp	r3, #0
 801cfe4:	d1b3      	bne.n	801cf4e <_strtol_l.isra.0+0x5e>
 801cfe6:	2308      	movs	r3, #8
 801cfe8:	e7b1      	b.n	801cf4e <_strtol_l.isra.0+0x5e>
 801cfea:	2c30      	cmp	r4, #48	; 0x30
 801cfec:	d0a4      	beq.n	801cf38 <_strtol_l.isra.0+0x48>
 801cfee:	230a      	movs	r3, #10
 801cff0:	e7ad      	b.n	801cf4e <_strtol_l.isra.0+0x5e>
 801cff2:	bf00      	nop
 801cff4:	08022b39 	.word	0x08022b39

0801cff8 <_strtol_r>:
 801cff8:	f7ff bf7a 	b.w	801cef0 <_strtol_l.isra.0>

0801cffc <strtol>:
 801cffc:	4613      	mov	r3, r2
 801cffe:	460a      	mov	r2, r1
 801d000:	4601      	mov	r1, r0
 801d002:	4802      	ldr	r0, [pc, #8]	; (801d00c <strtol+0x10>)
 801d004:	6800      	ldr	r0, [r0, #0]
 801d006:	f7ff bf73 	b.w	801cef0 <_strtol_l.isra.0>
 801d00a:	bf00      	nop
 801d00c:	200000f8 	.word	0x200000f8

0801d010 <_strtoul_l.isra.0>:
 801d010:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d014:	4e3b      	ldr	r6, [pc, #236]	; (801d104 <_strtoul_l.isra.0+0xf4>)
 801d016:	4686      	mov	lr, r0
 801d018:	468c      	mov	ip, r1
 801d01a:	4660      	mov	r0, ip
 801d01c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801d020:	5da5      	ldrb	r5, [r4, r6]
 801d022:	f015 0508 	ands.w	r5, r5, #8
 801d026:	d1f8      	bne.n	801d01a <_strtoul_l.isra.0+0xa>
 801d028:	2c2d      	cmp	r4, #45	; 0x2d
 801d02a:	d134      	bne.n	801d096 <_strtoul_l.isra.0+0x86>
 801d02c:	f89c 4000 	ldrb.w	r4, [ip]
 801d030:	f04f 0801 	mov.w	r8, #1
 801d034:	f100 0c02 	add.w	ip, r0, #2
 801d038:	2b00      	cmp	r3, #0
 801d03a:	d05e      	beq.n	801d0fa <_strtoul_l.isra.0+0xea>
 801d03c:	2b10      	cmp	r3, #16
 801d03e:	d10c      	bne.n	801d05a <_strtoul_l.isra.0+0x4a>
 801d040:	2c30      	cmp	r4, #48	; 0x30
 801d042:	d10a      	bne.n	801d05a <_strtoul_l.isra.0+0x4a>
 801d044:	f89c 0000 	ldrb.w	r0, [ip]
 801d048:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801d04c:	2858      	cmp	r0, #88	; 0x58
 801d04e:	d14f      	bne.n	801d0f0 <_strtoul_l.isra.0+0xe0>
 801d050:	f89c 4001 	ldrb.w	r4, [ip, #1]
 801d054:	2310      	movs	r3, #16
 801d056:	f10c 0c02 	add.w	ip, ip, #2
 801d05a:	f04f 37ff 	mov.w	r7, #4294967295
 801d05e:	2500      	movs	r5, #0
 801d060:	fbb7 f7f3 	udiv	r7, r7, r3
 801d064:	fb03 f907 	mul.w	r9, r3, r7
 801d068:	ea6f 0909 	mvn.w	r9, r9
 801d06c:	4628      	mov	r0, r5
 801d06e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801d072:	2e09      	cmp	r6, #9
 801d074:	d818      	bhi.n	801d0a8 <_strtoul_l.isra.0+0x98>
 801d076:	4634      	mov	r4, r6
 801d078:	42a3      	cmp	r3, r4
 801d07a:	dd24      	ble.n	801d0c6 <_strtoul_l.isra.0+0xb6>
 801d07c:	2d00      	cmp	r5, #0
 801d07e:	db1f      	blt.n	801d0c0 <_strtoul_l.isra.0+0xb0>
 801d080:	4287      	cmp	r7, r0
 801d082:	d31d      	bcc.n	801d0c0 <_strtoul_l.isra.0+0xb0>
 801d084:	d101      	bne.n	801d08a <_strtoul_l.isra.0+0x7a>
 801d086:	45a1      	cmp	r9, r4
 801d088:	db1a      	blt.n	801d0c0 <_strtoul_l.isra.0+0xb0>
 801d08a:	fb00 4003 	mla	r0, r0, r3, r4
 801d08e:	2501      	movs	r5, #1
 801d090:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801d094:	e7eb      	b.n	801d06e <_strtoul_l.isra.0+0x5e>
 801d096:	2c2b      	cmp	r4, #43	; 0x2b
 801d098:	bf08      	it	eq
 801d09a:	f89c 4000 	ldrbeq.w	r4, [ip]
 801d09e:	46a8      	mov	r8, r5
 801d0a0:	bf08      	it	eq
 801d0a2:	f100 0c02 	addeq.w	ip, r0, #2
 801d0a6:	e7c7      	b.n	801d038 <_strtoul_l.isra.0+0x28>
 801d0a8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801d0ac:	2e19      	cmp	r6, #25
 801d0ae:	d801      	bhi.n	801d0b4 <_strtoul_l.isra.0+0xa4>
 801d0b0:	3c37      	subs	r4, #55	; 0x37
 801d0b2:	e7e1      	b.n	801d078 <_strtoul_l.isra.0+0x68>
 801d0b4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 801d0b8:	2e19      	cmp	r6, #25
 801d0ba:	d804      	bhi.n	801d0c6 <_strtoul_l.isra.0+0xb6>
 801d0bc:	3c57      	subs	r4, #87	; 0x57
 801d0be:	e7db      	b.n	801d078 <_strtoul_l.isra.0+0x68>
 801d0c0:	f04f 35ff 	mov.w	r5, #4294967295
 801d0c4:	e7e4      	b.n	801d090 <_strtoul_l.isra.0+0x80>
 801d0c6:	2d00      	cmp	r5, #0
 801d0c8:	da07      	bge.n	801d0da <_strtoul_l.isra.0+0xca>
 801d0ca:	2322      	movs	r3, #34	; 0x22
 801d0cc:	f8ce 3000 	str.w	r3, [lr]
 801d0d0:	f04f 30ff 	mov.w	r0, #4294967295
 801d0d4:	b942      	cbnz	r2, 801d0e8 <_strtoul_l.isra.0+0xd8>
 801d0d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d0da:	f1b8 0f00 	cmp.w	r8, #0
 801d0de:	d000      	beq.n	801d0e2 <_strtoul_l.isra.0+0xd2>
 801d0e0:	4240      	negs	r0, r0
 801d0e2:	2a00      	cmp	r2, #0
 801d0e4:	d0f7      	beq.n	801d0d6 <_strtoul_l.isra.0+0xc6>
 801d0e6:	b10d      	cbz	r5, 801d0ec <_strtoul_l.isra.0+0xdc>
 801d0e8:	f10c 31ff 	add.w	r1, ip, #4294967295
 801d0ec:	6011      	str	r1, [r2, #0]
 801d0ee:	e7f2      	b.n	801d0d6 <_strtoul_l.isra.0+0xc6>
 801d0f0:	2430      	movs	r4, #48	; 0x30
 801d0f2:	2b00      	cmp	r3, #0
 801d0f4:	d1b1      	bne.n	801d05a <_strtoul_l.isra.0+0x4a>
 801d0f6:	2308      	movs	r3, #8
 801d0f8:	e7af      	b.n	801d05a <_strtoul_l.isra.0+0x4a>
 801d0fa:	2c30      	cmp	r4, #48	; 0x30
 801d0fc:	d0a2      	beq.n	801d044 <_strtoul_l.isra.0+0x34>
 801d0fe:	230a      	movs	r3, #10
 801d100:	e7ab      	b.n	801d05a <_strtoul_l.isra.0+0x4a>
 801d102:	bf00      	nop
 801d104:	08022b39 	.word	0x08022b39

0801d108 <_strtoul_r>:
 801d108:	f7ff bf82 	b.w	801d010 <_strtoul_l.isra.0>

0801d10c <strtoul>:
 801d10c:	4613      	mov	r3, r2
 801d10e:	460a      	mov	r2, r1
 801d110:	4601      	mov	r1, r0
 801d112:	4802      	ldr	r0, [pc, #8]	; (801d11c <strtoul+0x10>)
 801d114:	6800      	ldr	r0, [r0, #0]
 801d116:	f7ff bf7b 	b.w	801d010 <_strtoul_l.isra.0>
 801d11a:	bf00      	nop
 801d11c:	200000f8 	.word	0x200000f8

0801d120 <__tzcalc_limits>:
 801d120:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d124:	4680      	mov	r8, r0
 801d126:	f001 fe7d 	bl	801ee24 <__gettzinfo>
 801d12a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 801d12e:	4598      	cmp	r8, r3
 801d130:	f340 8098 	ble.w	801d264 <__tzcalc_limits+0x144>
 801d134:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 801d138:	4443      	add	r3, r8
 801d13a:	109b      	asrs	r3, r3, #2
 801d13c:	f240 126d 	movw	r2, #365	; 0x16d
 801d140:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 801d144:	fb02 3505 	mla	r5, r2, r5, r3
 801d148:	f06f 0263 	mvn.w	r2, #99	; 0x63
 801d14c:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 801d150:	fb93 f3f2 	sdiv	r3, r3, r2
 801d154:	441d      	add	r5, r3
 801d156:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801d15a:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 801d15e:	fb98 f7f3 	sdiv	r7, r8, r3
 801d162:	fb03 8717 	mls	r7, r3, r7, r8
 801d166:	4442      	add	r2, r8
 801d168:	fab7 fc87 	clz	ip, r7
 801d16c:	fbb2 f2f3 	udiv	r2, r2, r3
 801d170:	f008 0303 	and.w	r3, r8, #3
 801d174:	4415      	add	r5, r2
 801d176:	2264      	movs	r2, #100	; 0x64
 801d178:	f8c0 8004 	str.w	r8, [r0, #4]
 801d17c:	fb98 f6f2 	sdiv	r6, r8, r2
 801d180:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801d184:	fb02 8616 	mls	r6, r2, r6, r8
 801d188:	4604      	mov	r4, r0
 801d18a:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 801d18e:	9300      	str	r3, [sp, #0]
 801d190:	f04f 0e07 	mov.w	lr, #7
 801d194:	7a22      	ldrb	r2, [r4, #8]
 801d196:	6963      	ldr	r3, [r4, #20]
 801d198:	2a4a      	cmp	r2, #74	; 0x4a
 801d19a:	d128      	bne.n	801d1ee <__tzcalc_limits+0xce>
 801d19c:	9900      	ldr	r1, [sp, #0]
 801d19e:	18ea      	adds	r2, r5, r3
 801d1a0:	b901      	cbnz	r1, 801d1a4 <__tzcalc_limits+0x84>
 801d1a2:	b906      	cbnz	r6, 801d1a6 <__tzcalc_limits+0x86>
 801d1a4:	bb0f      	cbnz	r7, 801d1ea <__tzcalc_limits+0xca>
 801d1a6:	2b3b      	cmp	r3, #59	; 0x3b
 801d1a8:	bfd4      	ite	le
 801d1aa:	2300      	movle	r3, #0
 801d1ac:	2301      	movgt	r3, #1
 801d1ae:	4413      	add	r3, r2
 801d1b0:	1e5a      	subs	r2, r3, #1
 801d1b2:	69a3      	ldr	r3, [r4, #24]
 801d1b4:	492c      	ldr	r1, [pc, #176]	; (801d268 <__tzcalc_limits+0x148>)
 801d1b6:	fb01 3202 	mla	r2, r1, r2, r3
 801d1ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801d1bc:	4413      	add	r3, r2
 801d1be:	461a      	mov	r2, r3
 801d1c0:	17db      	asrs	r3, r3, #31
 801d1c2:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801d1c6:	3428      	adds	r4, #40	; 0x28
 801d1c8:	45a3      	cmp	fp, r4
 801d1ca:	d1e3      	bne.n	801d194 <__tzcalc_limits+0x74>
 801d1cc:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 801d1d0:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 801d1d4:	4294      	cmp	r4, r2
 801d1d6:	eb75 0303 	sbcs.w	r3, r5, r3
 801d1da:	bfb4      	ite	lt
 801d1dc:	2301      	movlt	r3, #1
 801d1de:	2300      	movge	r3, #0
 801d1e0:	6003      	str	r3, [r0, #0]
 801d1e2:	2001      	movs	r0, #1
 801d1e4:	b003      	add	sp, #12
 801d1e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d1ea:	2300      	movs	r3, #0
 801d1ec:	e7df      	b.n	801d1ae <__tzcalc_limits+0x8e>
 801d1ee:	2a44      	cmp	r2, #68	; 0x44
 801d1f0:	d101      	bne.n	801d1f6 <__tzcalc_limits+0xd6>
 801d1f2:	18ea      	adds	r2, r5, r3
 801d1f4:	e7dd      	b.n	801d1b2 <__tzcalc_limits+0x92>
 801d1f6:	9a00      	ldr	r2, [sp, #0]
 801d1f8:	bb72      	cbnz	r2, 801d258 <__tzcalc_limits+0x138>
 801d1fa:	2e00      	cmp	r6, #0
 801d1fc:	bf0c      	ite	eq
 801d1fe:	46e0      	moveq	r8, ip
 801d200:	f04f 0801 	movne.w	r8, #1
 801d204:	4919      	ldr	r1, [pc, #100]	; (801d26c <__tzcalc_limits+0x14c>)
 801d206:	68e2      	ldr	r2, [r4, #12]
 801d208:	9201      	str	r2, [sp, #4]
 801d20a:	f04f 0a30 	mov.w	sl, #48	; 0x30
 801d20e:	fb0a 1808 	mla	r8, sl, r8, r1
 801d212:	462a      	mov	r2, r5
 801d214:	f04f 0900 	mov.w	r9, #0
 801d218:	f1a8 0804 	sub.w	r8, r8, #4
 801d21c:	9901      	ldr	r1, [sp, #4]
 801d21e:	f109 0901 	add.w	r9, r9, #1
 801d222:	4549      	cmp	r1, r9
 801d224:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 801d228:	dc18      	bgt.n	801d25c <__tzcalc_limits+0x13c>
 801d22a:	f102 0804 	add.w	r8, r2, #4
 801d22e:	fb98 f9fe 	sdiv	r9, r8, lr
 801d232:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 801d236:	eba8 0909 	sub.w	r9, r8, r9
 801d23a:	ebb3 0909 	subs.w	r9, r3, r9
 801d23e:	6923      	ldr	r3, [r4, #16]
 801d240:	f103 33ff 	add.w	r3, r3, #4294967295
 801d244:	bf48      	it	mi
 801d246:	f109 0907 	addmi.w	r9, r9, #7
 801d24a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801d24e:	444b      	add	r3, r9
 801d250:	4553      	cmp	r3, sl
 801d252:	da05      	bge.n	801d260 <__tzcalc_limits+0x140>
 801d254:	441a      	add	r2, r3
 801d256:	e7ac      	b.n	801d1b2 <__tzcalc_limits+0x92>
 801d258:	46e0      	mov	r8, ip
 801d25a:	e7d3      	b.n	801d204 <__tzcalc_limits+0xe4>
 801d25c:	4452      	add	r2, sl
 801d25e:	e7dd      	b.n	801d21c <__tzcalc_limits+0xfc>
 801d260:	3b07      	subs	r3, #7
 801d262:	e7f5      	b.n	801d250 <__tzcalc_limits+0x130>
 801d264:	2000      	movs	r0, #0
 801d266:	e7bd      	b.n	801d1e4 <__tzcalc_limits+0xc4>
 801d268:	00015180 	.word	0x00015180
 801d26c:	08022d78 	.word	0x08022d78

0801d270 <__tz_lock>:
 801d270:	4801      	ldr	r0, [pc, #4]	; (801d278 <__tz_lock+0x8>)
 801d272:	f7fd bbc4 	b.w	801a9fe <__retarget_lock_acquire>
 801d276:	bf00      	nop
 801d278:	20009d03 	.word	0x20009d03

0801d27c <__tz_unlock>:
 801d27c:	4801      	ldr	r0, [pc, #4]	; (801d284 <__tz_unlock+0x8>)
 801d27e:	f7fd bbc0 	b.w	801aa02 <__retarget_lock_release>
 801d282:	bf00      	nop
 801d284:	20009d03 	.word	0x20009d03

0801d288 <_tzset_unlocked>:
 801d288:	4b01      	ldr	r3, [pc, #4]	; (801d290 <_tzset_unlocked+0x8>)
 801d28a:	6818      	ldr	r0, [r3, #0]
 801d28c:	f000 b802 	b.w	801d294 <_tzset_unlocked_r>
 801d290:	200000f8 	.word	0x200000f8

0801d294 <_tzset_unlocked_r>:
 801d294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d298:	b08d      	sub	sp, #52	; 0x34
 801d29a:	4607      	mov	r7, r0
 801d29c:	f001 fdc2 	bl	801ee24 <__gettzinfo>
 801d2a0:	49ae      	ldr	r1, [pc, #696]	; (801d55c <_tzset_unlocked_r+0x2c8>)
 801d2a2:	4eaf      	ldr	r6, [pc, #700]	; (801d560 <_tzset_unlocked_r+0x2cc>)
 801d2a4:	4605      	mov	r5, r0
 801d2a6:	4638      	mov	r0, r7
 801d2a8:	f001 fdb4 	bl	801ee14 <_getenv_r>
 801d2ac:	4604      	mov	r4, r0
 801d2ae:	b970      	cbnz	r0, 801d2ce <_tzset_unlocked_r+0x3a>
 801d2b0:	4bac      	ldr	r3, [pc, #688]	; (801d564 <_tzset_unlocked_r+0x2d0>)
 801d2b2:	4aad      	ldr	r2, [pc, #692]	; (801d568 <_tzset_unlocked_r+0x2d4>)
 801d2b4:	6018      	str	r0, [r3, #0]
 801d2b6:	4bad      	ldr	r3, [pc, #692]	; (801d56c <_tzset_unlocked_r+0x2d8>)
 801d2b8:	6018      	str	r0, [r3, #0]
 801d2ba:	4bad      	ldr	r3, [pc, #692]	; (801d570 <_tzset_unlocked_r+0x2dc>)
 801d2bc:	6830      	ldr	r0, [r6, #0]
 801d2be:	e9c3 2200 	strd	r2, r2, [r3]
 801d2c2:	f7fd fba9 	bl	801aa18 <free>
 801d2c6:	6034      	str	r4, [r6, #0]
 801d2c8:	b00d      	add	sp, #52	; 0x34
 801d2ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d2ce:	6831      	ldr	r1, [r6, #0]
 801d2d0:	2900      	cmp	r1, #0
 801d2d2:	d15f      	bne.n	801d394 <_tzset_unlocked_r+0x100>
 801d2d4:	6830      	ldr	r0, [r6, #0]
 801d2d6:	f7fd fb9f 	bl	801aa18 <free>
 801d2da:	4620      	mov	r0, r4
 801d2dc:	f7e2 ff92 	bl	8000204 <strlen>
 801d2e0:	1c41      	adds	r1, r0, #1
 801d2e2:	4638      	mov	r0, r7
 801d2e4:	f7fd fe9e 	bl	801b024 <_malloc_r>
 801d2e8:	6030      	str	r0, [r6, #0]
 801d2ea:	2800      	cmp	r0, #0
 801d2ec:	d157      	bne.n	801d39e <_tzset_unlocked_r+0x10a>
 801d2ee:	7823      	ldrb	r3, [r4, #0]
 801d2f0:	4aa0      	ldr	r2, [pc, #640]	; (801d574 <_tzset_unlocked_r+0x2e0>)
 801d2f2:	49a1      	ldr	r1, [pc, #644]	; (801d578 <_tzset_unlocked_r+0x2e4>)
 801d2f4:	2b3a      	cmp	r3, #58	; 0x3a
 801d2f6:	bf08      	it	eq
 801d2f8:	3401      	addeq	r4, #1
 801d2fa:	ae0a      	add	r6, sp, #40	; 0x28
 801d2fc:	4633      	mov	r3, r6
 801d2fe:	4620      	mov	r0, r4
 801d300:	f7fe fed6 	bl	801c0b0 <siscanf>
 801d304:	2800      	cmp	r0, #0
 801d306:	dddf      	ble.n	801d2c8 <_tzset_unlocked_r+0x34>
 801d308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d30a:	18e7      	adds	r7, r4, r3
 801d30c:	5ce3      	ldrb	r3, [r4, r3]
 801d30e:	2b2d      	cmp	r3, #45	; 0x2d
 801d310:	d149      	bne.n	801d3a6 <_tzset_unlocked_r+0x112>
 801d312:	3701      	adds	r7, #1
 801d314:	f04f 34ff 	mov.w	r4, #4294967295
 801d318:	f10d 0a20 	add.w	sl, sp, #32
 801d31c:	f10d 0b1e 	add.w	fp, sp, #30
 801d320:	f04f 0800 	mov.w	r8, #0
 801d324:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 801d328:	4994      	ldr	r1, [pc, #592]	; (801d57c <_tzset_unlocked_r+0x2e8>)
 801d32a:	9603      	str	r6, [sp, #12]
 801d32c:	f8cd b000 	str.w	fp, [sp]
 801d330:	4633      	mov	r3, r6
 801d332:	aa07      	add	r2, sp, #28
 801d334:	4638      	mov	r0, r7
 801d336:	f8ad 801e 	strh.w	r8, [sp, #30]
 801d33a:	f8ad 8020 	strh.w	r8, [sp, #32]
 801d33e:	f7fe feb7 	bl	801c0b0 <siscanf>
 801d342:	4540      	cmp	r0, r8
 801d344:	ddc0      	ble.n	801d2c8 <_tzset_unlocked_r+0x34>
 801d346:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801d34a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801d34e:	f8df 9238 	ldr.w	r9, [pc, #568]	; 801d588 <_tzset_unlocked_r+0x2f4>
 801d352:	213c      	movs	r1, #60	; 0x3c
 801d354:	fb01 2203 	mla	r2, r1, r3, r2
 801d358:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801d35c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801d360:	fb01 2303 	mla	r3, r1, r3, r2
 801d364:	435c      	muls	r4, r3
 801d366:	62ac      	str	r4, [r5, #40]	; 0x28
 801d368:	4c81      	ldr	r4, [pc, #516]	; (801d570 <_tzset_unlocked_r+0x2dc>)
 801d36a:	4b82      	ldr	r3, [pc, #520]	; (801d574 <_tzset_unlocked_r+0x2e0>)
 801d36c:	6023      	str	r3, [r4, #0]
 801d36e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d370:	4981      	ldr	r1, [pc, #516]	; (801d578 <_tzset_unlocked_r+0x2e4>)
 801d372:	441f      	add	r7, r3
 801d374:	464a      	mov	r2, r9
 801d376:	4633      	mov	r3, r6
 801d378:	4638      	mov	r0, r7
 801d37a:	f7fe fe99 	bl	801c0b0 <siscanf>
 801d37e:	4540      	cmp	r0, r8
 801d380:	dc16      	bgt.n	801d3b0 <_tzset_unlocked_r+0x11c>
 801d382:	6823      	ldr	r3, [r4, #0]
 801d384:	6063      	str	r3, [r4, #4]
 801d386:	4b77      	ldr	r3, [pc, #476]	; (801d564 <_tzset_unlocked_r+0x2d0>)
 801d388:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801d38a:	601a      	str	r2, [r3, #0]
 801d38c:	4b77      	ldr	r3, [pc, #476]	; (801d56c <_tzset_unlocked_r+0x2d8>)
 801d38e:	f8c3 8000 	str.w	r8, [r3]
 801d392:	e799      	b.n	801d2c8 <_tzset_unlocked_r+0x34>
 801d394:	f7e2 ff2c 	bl	80001f0 <strcmp>
 801d398:	2800      	cmp	r0, #0
 801d39a:	d19b      	bne.n	801d2d4 <_tzset_unlocked_r+0x40>
 801d39c:	e794      	b.n	801d2c8 <_tzset_unlocked_r+0x34>
 801d39e:	4621      	mov	r1, r4
 801d3a0:	f7fe ff04 	bl	801c1ac <strcpy>
 801d3a4:	e7a3      	b.n	801d2ee <_tzset_unlocked_r+0x5a>
 801d3a6:	2b2b      	cmp	r3, #43	; 0x2b
 801d3a8:	bf08      	it	eq
 801d3aa:	3701      	addeq	r7, #1
 801d3ac:	2401      	movs	r4, #1
 801d3ae:	e7b3      	b.n	801d318 <_tzset_unlocked_r+0x84>
 801d3b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d3b2:	f8c4 9004 	str.w	r9, [r4, #4]
 801d3b6:	18fc      	adds	r4, r7, r3
 801d3b8:	5cfb      	ldrb	r3, [r7, r3]
 801d3ba:	2b2d      	cmp	r3, #45	; 0x2d
 801d3bc:	f040 808b 	bne.w	801d4d6 <_tzset_unlocked_r+0x242>
 801d3c0:	3401      	adds	r4, #1
 801d3c2:	f04f 37ff 	mov.w	r7, #4294967295
 801d3c6:	2300      	movs	r3, #0
 801d3c8:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d3cc:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d3d0:	f8ad 3020 	strh.w	r3, [sp, #32]
 801d3d4:	930a      	str	r3, [sp, #40]	; 0x28
 801d3d6:	e9cd a602 	strd	sl, r6, [sp, #8]
 801d3da:	e9cd b600 	strd	fp, r6, [sp]
 801d3de:	4967      	ldr	r1, [pc, #412]	; (801d57c <_tzset_unlocked_r+0x2e8>)
 801d3e0:	4633      	mov	r3, r6
 801d3e2:	aa07      	add	r2, sp, #28
 801d3e4:	4620      	mov	r0, r4
 801d3e6:	f7fe fe63 	bl	801c0b0 <siscanf>
 801d3ea:	2800      	cmp	r0, #0
 801d3ec:	dc78      	bgt.n	801d4e0 <_tzset_unlocked_r+0x24c>
 801d3ee:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 801d3f0:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 801d3f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d3f6:	652f      	str	r7, [r5, #80]	; 0x50
 801d3f8:	441c      	add	r4, r3
 801d3fa:	462f      	mov	r7, r5
 801d3fc:	f04f 0900 	mov.w	r9, #0
 801d400:	7823      	ldrb	r3, [r4, #0]
 801d402:	2b2c      	cmp	r3, #44	; 0x2c
 801d404:	bf08      	it	eq
 801d406:	3401      	addeq	r4, #1
 801d408:	f894 8000 	ldrb.w	r8, [r4]
 801d40c:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 801d410:	d178      	bne.n	801d504 <_tzset_unlocked_r+0x270>
 801d412:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 801d416:	e9cd 6301 	strd	r6, r3, [sp, #4]
 801d41a:	ab09      	add	r3, sp, #36	; 0x24
 801d41c:	9300      	str	r3, [sp, #0]
 801d41e:	4958      	ldr	r1, [pc, #352]	; (801d580 <_tzset_unlocked_r+0x2ec>)
 801d420:	9603      	str	r6, [sp, #12]
 801d422:	4633      	mov	r3, r6
 801d424:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 801d428:	4620      	mov	r0, r4
 801d42a:	f7fe fe41 	bl	801c0b0 <siscanf>
 801d42e:	2803      	cmp	r0, #3
 801d430:	f47f af4a 	bne.w	801d2c8 <_tzset_unlocked_r+0x34>
 801d434:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801d438:	1e4b      	subs	r3, r1, #1
 801d43a:	2b0b      	cmp	r3, #11
 801d43c:	f63f af44 	bhi.w	801d2c8 <_tzset_unlocked_r+0x34>
 801d440:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801d444:	1e53      	subs	r3, r2, #1
 801d446:	2b04      	cmp	r3, #4
 801d448:	f63f af3e 	bhi.w	801d2c8 <_tzset_unlocked_r+0x34>
 801d44c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801d450:	2b06      	cmp	r3, #6
 801d452:	f63f af39 	bhi.w	801d2c8 <_tzset_unlocked_r+0x34>
 801d456:	e9c7 1203 	strd	r1, r2, [r7, #12]
 801d45a:	f887 8008 	strb.w	r8, [r7, #8]
 801d45e:	617b      	str	r3, [r7, #20]
 801d460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d462:	eb04 0803 	add.w	r8, r4, r3
 801d466:	2302      	movs	r3, #2
 801d468:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d46c:	2300      	movs	r3, #0
 801d46e:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d472:	f8ad 3020 	strh.w	r3, [sp, #32]
 801d476:	930a      	str	r3, [sp, #40]	; 0x28
 801d478:	f898 3000 	ldrb.w	r3, [r8]
 801d47c:	2b2f      	cmp	r3, #47	; 0x2f
 801d47e:	d109      	bne.n	801d494 <_tzset_unlocked_r+0x200>
 801d480:	e9cd a602 	strd	sl, r6, [sp, #8]
 801d484:	e9cd b600 	strd	fp, r6, [sp]
 801d488:	493e      	ldr	r1, [pc, #248]	; (801d584 <_tzset_unlocked_r+0x2f0>)
 801d48a:	4633      	mov	r3, r6
 801d48c:	aa07      	add	r2, sp, #28
 801d48e:	4640      	mov	r0, r8
 801d490:	f7fe fe0e 	bl	801c0b0 <siscanf>
 801d494:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801d498:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801d49c:	213c      	movs	r1, #60	; 0x3c
 801d49e:	fb01 2203 	mla	r2, r1, r3, r2
 801d4a2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801d4a6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801d4aa:	fb01 2303 	mla	r3, r1, r3, r2
 801d4ae:	61bb      	str	r3, [r7, #24]
 801d4b0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801d4b2:	3728      	adds	r7, #40	; 0x28
 801d4b4:	4444      	add	r4, r8
 801d4b6:	f1b9 0f00 	cmp.w	r9, #0
 801d4ba:	d020      	beq.n	801d4fe <_tzset_unlocked_r+0x26a>
 801d4bc:	6868      	ldr	r0, [r5, #4]
 801d4be:	f7ff fe2f 	bl	801d120 <__tzcalc_limits>
 801d4c2:	4b28      	ldr	r3, [pc, #160]	; (801d564 <_tzset_unlocked_r+0x2d0>)
 801d4c4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801d4c6:	601a      	str	r2, [r3, #0]
 801d4c8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801d4ca:	1a9b      	subs	r3, r3, r2
 801d4cc:	4a27      	ldr	r2, [pc, #156]	; (801d56c <_tzset_unlocked_r+0x2d8>)
 801d4ce:	bf18      	it	ne
 801d4d0:	2301      	movne	r3, #1
 801d4d2:	6013      	str	r3, [r2, #0]
 801d4d4:	e6f8      	b.n	801d2c8 <_tzset_unlocked_r+0x34>
 801d4d6:	2b2b      	cmp	r3, #43	; 0x2b
 801d4d8:	bf08      	it	eq
 801d4da:	3401      	addeq	r4, #1
 801d4dc:	2701      	movs	r7, #1
 801d4de:	e772      	b.n	801d3c6 <_tzset_unlocked_r+0x132>
 801d4e0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801d4e4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801d4e8:	213c      	movs	r1, #60	; 0x3c
 801d4ea:	fb01 2203 	mla	r2, r1, r3, r2
 801d4ee:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801d4f2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801d4f6:	fb01 2303 	mla	r3, r1, r3, r2
 801d4fa:	435f      	muls	r7, r3
 801d4fc:	e77a      	b.n	801d3f4 <_tzset_unlocked_r+0x160>
 801d4fe:	f04f 0901 	mov.w	r9, #1
 801d502:	e77d      	b.n	801d400 <_tzset_unlocked_r+0x16c>
 801d504:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 801d508:	bf06      	itte	eq
 801d50a:	3401      	addeq	r4, #1
 801d50c:	4643      	moveq	r3, r8
 801d50e:	2344      	movne	r3, #68	; 0x44
 801d510:	220a      	movs	r2, #10
 801d512:	a90b      	add	r1, sp, #44	; 0x2c
 801d514:	4620      	mov	r0, r4
 801d516:	9305      	str	r3, [sp, #20]
 801d518:	f7ff fdf8 	bl	801d10c <strtoul>
 801d51c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801d520:	9b05      	ldr	r3, [sp, #20]
 801d522:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 801d526:	45a0      	cmp	r8, r4
 801d528:	d114      	bne.n	801d554 <_tzset_unlocked_r+0x2c0>
 801d52a:	234d      	movs	r3, #77	; 0x4d
 801d52c:	f1b9 0f00 	cmp.w	r9, #0
 801d530:	d107      	bne.n	801d542 <_tzset_unlocked_r+0x2ae>
 801d532:	722b      	strb	r3, [r5, #8]
 801d534:	2103      	movs	r1, #3
 801d536:	2302      	movs	r3, #2
 801d538:	e9c5 1303 	strd	r1, r3, [r5, #12]
 801d53c:	f8c5 9014 	str.w	r9, [r5, #20]
 801d540:	e791      	b.n	801d466 <_tzset_unlocked_r+0x1d2>
 801d542:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 801d546:	220b      	movs	r2, #11
 801d548:	2301      	movs	r3, #1
 801d54a:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 801d54e:	2300      	movs	r3, #0
 801d550:	63eb      	str	r3, [r5, #60]	; 0x3c
 801d552:	e788      	b.n	801d466 <_tzset_unlocked_r+0x1d2>
 801d554:	b280      	uxth	r0, r0
 801d556:	723b      	strb	r3, [r7, #8]
 801d558:	6178      	str	r0, [r7, #20]
 801d55a:	e784      	b.n	801d466 <_tzset_unlocked_r+0x1d2>
 801d55c:	08022ec1 	.word	0x08022ec1
 801d560:	20008630 	.word	0x20008630
 801d564:	20008638 	.word	0x20008638
 801d568:	08022ec4 	.word	0x08022ec4
 801d56c:	20008634 	.word	0x20008634
 801d570:	2000015c 	.word	0x2000015c
 801d574:	20008623 	.word	0x20008623
 801d578:	08022ec8 	.word	0x08022ec8
 801d57c:	08022eeb 	.word	0x08022eeb
 801d580:	08022ed7 	.word	0x08022ed7
 801d584:	08022eea 	.word	0x08022eea
 801d588:	20008618 	.word	0x20008618

0801d58c <_vsniprintf_r>:
 801d58c:	b530      	push	{r4, r5, lr}
 801d58e:	1e14      	subs	r4, r2, #0
 801d590:	4605      	mov	r5, r0
 801d592:	b09b      	sub	sp, #108	; 0x6c
 801d594:	4618      	mov	r0, r3
 801d596:	da05      	bge.n	801d5a4 <_vsniprintf_r+0x18>
 801d598:	238b      	movs	r3, #139	; 0x8b
 801d59a:	602b      	str	r3, [r5, #0]
 801d59c:	f04f 30ff 	mov.w	r0, #4294967295
 801d5a0:	b01b      	add	sp, #108	; 0x6c
 801d5a2:	bd30      	pop	{r4, r5, pc}
 801d5a4:	f44f 7302 	mov.w	r3, #520	; 0x208
 801d5a8:	f8ad 300c 	strh.w	r3, [sp, #12]
 801d5ac:	bf14      	ite	ne
 801d5ae:	f104 33ff 	addne.w	r3, r4, #4294967295
 801d5b2:	4623      	moveq	r3, r4
 801d5b4:	9302      	str	r3, [sp, #8]
 801d5b6:	9305      	str	r3, [sp, #20]
 801d5b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d5bc:	9100      	str	r1, [sp, #0]
 801d5be:	9104      	str	r1, [sp, #16]
 801d5c0:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d5c4:	4602      	mov	r2, r0
 801d5c6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801d5c8:	4669      	mov	r1, sp
 801d5ca:	4628      	mov	r0, r5
 801d5cc:	f002 fac2 	bl	801fb54 <_svfiprintf_r>
 801d5d0:	1c43      	adds	r3, r0, #1
 801d5d2:	bfbc      	itt	lt
 801d5d4:	238b      	movlt	r3, #139	; 0x8b
 801d5d6:	602b      	strlt	r3, [r5, #0]
 801d5d8:	2c00      	cmp	r4, #0
 801d5da:	d0e1      	beq.n	801d5a0 <_vsniprintf_r+0x14>
 801d5dc:	9b00      	ldr	r3, [sp, #0]
 801d5de:	2200      	movs	r2, #0
 801d5e0:	701a      	strb	r2, [r3, #0]
 801d5e2:	e7dd      	b.n	801d5a0 <_vsniprintf_r+0x14>

0801d5e4 <vsniprintf>:
 801d5e4:	b507      	push	{r0, r1, r2, lr}
 801d5e6:	9300      	str	r3, [sp, #0]
 801d5e8:	4613      	mov	r3, r2
 801d5ea:	460a      	mov	r2, r1
 801d5ec:	4601      	mov	r1, r0
 801d5ee:	4803      	ldr	r0, [pc, #12]	; (801d5fc <vsniprintf+0x18>)
 801d5f0:	6800      	ldr	r0, [r0, #0]
 801d5f2:	f7ff ffcb 	bl	801d58c <_vsniprintf_r>
 801d5f6:	b003      	add	sp, #12
 801d5f8:	f85d fb04 	ldr.w	pc, [sp], #4
 801d5fc:	200000f8 	.word	0x200000f8

0801d600 <__swbuf_r>:
 801d600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d602:	460e      	mov	r6, r1
 801d604:	4614      	mov	r4, r2
 801d606:	4605      	mov	r5, r0
 801d608:	b118      	cbz	r0, 801d612 <__swbuf_r+0x12>
 801d60a:	6983      	ldr	r3, [r0, #24]
 801d60c:	b90b      	cbnz	r3, 801d612 <__swbuf_r+0x12>
 801d60e:	f7fd f817 	bl	801a640 <__sinit>
 801d612:	4b21      	ldr	r3, [pc, #132]	; (801d698 <__swbuf_r+0x98>)
 801d614:	429c      	cmp	r4, r3
 801d616:	d12b      	bne.n	801d670 <__swbuf_r+0x70>
 801d618:	686c      	ldr	r4, [r5, #4]
 801d61a:	69a3      	ldr	r3, [r4, #24]
 801d61c:	60a3      	str	r3, [r4, #8]
 801d61e:	89a3      	ldrh	r3, [r4, #12]
 801d620:	071a      	lsls	r2, r3, #28
 801d622:	d52f      	bpl.n	801d684 <__swbuf_r+0x84>
 801d624:	6923      	ldr	r3, [r4, #16]
 801d626:	b36b      	cbz	r3, 801d684 <__swbuf_r+0x84>
 801d628:	6923      	ldr	r3, [r4, #16]
 801d62a:	6820      	ldr	r0, [r4, #0]
 801d62c:	1ac0      	subs	r0, r0, r3
 801d62e:	6963      	ldr	r3, [r4, #20]
 801d630:	b2f6      	uxtb	r6, r6
 801d632:	4283      	cmp	r3, r0
 801d634:	4637      	mov	r7, r6
 801d636:	dc04      	bgt.n	801d642 <__swbuf_r+0x42>
 801d638:	4621      	mov	r1, r4
 801d63a:	4628      	mov	r0, r5
 801d63c:	f000 fff2 	bl	801e624 <_fflush_r>
 801d640:	bb30      	cbnz	r0, 801d690 <__swbuf_r+0x90>
 801d642:	68a3      	ldr	r3, [r4, #8]
 801d644:	3b01      	subs	r3, #1
 801d646:	60a3      	str	r3, [r4, #8]
 801d648:	6823      	ldr	r3, [r4, #0]
 801d64a:	1c5a      	adds	r2, r3, #1
 801d64c:	6022      	str	r2, [r4, #0]
 801d64e:	701e      	strb	r6, [r3, #0]
 801d650:	6963      	ldr	r3, [r4, #20]
 801d652:	3001      	adds	r0, #1
 801d654:	4283      	cmp	r3, r0
 801d656:	d004      	beq.n	801d662 <__swbuf_r+0x62>
 801d658:	89a3      	ldrh	r3, [r4, #12]
 801d65a:	07db      	lsls	r3, r3, #31
 801d65c:	d506      	bpl.n	801d66c <__swbuf_r+0x6c>
 801d65e:	2e0a      	cmp	r6, #10
 801d660:	d104      	bne.n	801d66c <__swbuf_r+0x6c>
 801d662:	4621      	mov	r1, r4
 801d664:	4628      	mov	r0, r5
 801d666:	f000 ffdd 	bl	801e624 <_fflush_r>
 801d66a:	b988      	cbnz	r0, 801d690 <__swbuf_r+0x90>
 801d66c:	4638      	mov	r0, r7
 801d66e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d670:	4b0a      	ldr	r3, [pc, #40]	; (801d69c <__swbuf_r+0x9c>)
 801d672:	429c      	cmp	r4, r3
 801d674:	d101      	bne.n	801d67a <__swbuf_r+0x7a>
 801d676:	68ac      	ldr	r4, [r5, #8]
 801d678:	e7cf      	b.n	801d61a <__swbuf_r+0x1a>
 801d67a:	4b09      	ldr	r3, [pc, #36]	; (801d6a0 <__swbuf_r+0xa0>)
 801d67c:	429c      	cmp	r4, r3
 801d67e:	bf08      	it	eq
 801d680:	68ec      	ldreq	r4, [r5, #12]
 801d682:	e7ca      	b.n	801d61a <__swbuf_r+0x1a>
 801d684:	4621      	mov	r1, r4
 801d686:	4628      	mov	r0, r5
 801d688:	f000 f81e 	bl	801d6c8 <__swsetup_r>
 801d68c:	2800      	cmp	r0, #0
 801d68e:	d0cb      	beq.n	801d628 <__swbuf_r+0x28>
 801d690:	f04f 37ff 	mov.w	r7, #4294967295
 801d694:	e7ea      	b.n	801d66c <__swbuf_r+0x6c>
 801d696:	bf00      	nop
 801d698:	08022c5c 	.word	0x08022c5c
 801d69c:	08022c7c 	.word	0x08022c7c
 801d6a0:	08022c3c 	.word	0x08022c3c

0801d6a4 <_write_r>:
 801d6a4:	b538      	push	{r3, r4, r5, lr}
 801d6a6:	4d07      	ldr	r5, [pc, #28]	; (801d6c4 <_write_r+0x20>)
 801d6a8:	4604      	mov	r4, r0
 801d6aa:	4608      	mov	r0, r1
 801d6ac:	4611      	mov	r1, r2
 801d6ae:	2200      	movs	r2, #0
 801d6b0:	602a      	str	r2, [r5, #0]
 801d6b2:	461a      	mov	r2, r3
 801d6b4:	f003 f8d6 	bl	8020864 <_write>
 801d6b8:	1c43      	adds	r3, r0, #1
 801d6ba:	d102      	bne.n	801d6c2 <_write_r+0x1e>
 801d6bc:	682b      	ldr	r3, [r5, #0]
 801d6be:	b103      	cbz	r3, 801d6c2 <_write_r+0x1e>
 801d6c0:	6023      	str	r3, [r4, #0]
 801d6c2:	bd38      	pop	{r3, r4, r5, pc}
 801d6c4:	20009d08 	.word	0x20009d08

0801d6c8 <__swsetup_r>:
 801d6c8:	4b32      	ldr	r3, [pc, #200]	; (801d794 <__swsetup_r+0xcc>)
 801d6ca:	b570      	push	{r4, r5, r6, lr}
 801d6cc:	681d      	ldr	r5, [r3, #0]
 801d6ce:	4606      	mov	r6, r0
 801d6d0:	460c      	mov	r4, r1
 801d6d2:	b125      	cbz	r5, 801d6de <__swsetup_r+0x16>
 801d6d4:	69ab      	ldr	r3, [r5, #24]
 801d6d6:	b913      	cbnz	r3, 801d6de <__swsetup_r+0x16>
 801d6d8:	4628      	mov	r0, r5
 801d6da:	f7fc ffb1 	bl	801a640 <__sinit>
 801d6de:	4b2e      	ldr	r3, [pc, #184]	; (801d798 <__swsetup_r+0xd0>)
 801d6e0:	429c      	cmp	r4, r3
 801d6e2:	d10f      	bne.n	801d704 <__swsetup_r+0x3c>
 801d6e4:	686c      	ldr	r4, [r5, #4]
 801d6e6:	89a3      	ldrh	r3, [r4, #12]
 801d6e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d6ec:	0719      	lsls	r1, r3, #28
 801d6ee:	d42c      	bmi.n	801d74a <__swsetup_r+0x82>
 801d6f0:	06dd      	lsls	r5, r3, #27
 801d6f2:	d411      	bmi.n	801d718 <__swsetup_r+0x50>
 801d6f4:	2309      	movs	r3, #9
 801d6f6:	6033      	str	r3, [r6, #0]
 801d6f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801d6fc:	81a3      	strh	r3, [r4, #12]
 801d6fe:	f04f 30ff 	mov.w	r0, #4294967295
 801d702:	e03e      	b.n	801d782 <__swsetup_r+0xba>
 801d704:	4b25      	ldr	r3, [pc, #148]	; (801d79c <__swsetup_r+0xd4>)
 801d706:	429c      	cmp	r4, r3
 801d708:	d101      	bne.n	801d70e <__swsetup_r+0x46>
 801d70a:	68ac      	ldr	r4, [r5, #8]
 801d70c:	e7eb      	b.n	801d6e6 <__swsetup_r+0x1e>
 801d70e:	4b24      	ldr	r3, [pc, #144]	; (801d7a0 <__swsetup_r+0xd8>)
 801d710:	429c      	cmp	r4, r3
 801d712:	bf08      	it	eq
 801d714:	68ec      	ldreq	r4, [r5, #12]
 801d716:	e7e6      	b.n	801d6e6 <__swsetup_r+0x1e>
 801d718:	0758      	lsls	r0, r3, #29
 801d71a:	d512      	bpl.n	801d742 <__swsetup_r+0x7a>
 801d71c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d71e:	b141      	cbz	r1, 801d732 <__swsetup_r+0x6a>
 801d720:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d724:	4299      	cmp	r1, r3
 801d726:	d002      	beq.n	801d72e <__swsetup_r+0x66>
 801d728:	4630      	mov	r0, r6
 801d72a:	f7fd fc2b 	bl	801af84 <_free_r>
 801d72e:	2300      	movs	r3, #0
 801d730:	6363      	str	r3, [r4, #52]	; 0x34
 801d732:	89a3      	ldrh	r3, [r4, #12]
 801d734:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801d738:	81a3      	strh	r3, [r4, #12]
 801d73a:	2300      	movs	r3, #0
 801d73c:	6063      	str	r3, [r4, #4]
 801d73e:	6923      	ldr	r3, [r4, #16]
 801d740:	6023      	str	r3, [r4, #0]
 801d742:	89a3      	ldrh	r3, [r4, #12]
 801d744:	f043 0308 	orr.w	r3, r3, #8
 801d748:	81a3      	strh	r3, [r4, #12]
 801d74a:	6923      	ldr	r3, [r4, #16]
 801d74c:	b94b      	cbnz	r3, 801d762 <__swsetup_r+0x9a>
 801d74e:	89a3      	ldrh	r3, [r4, #12]
 801d750:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801d754:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d758:	d003      	beq.n	801d762 <__swsetup_r+0x9a>
 801d75a:	4621      	mov	r1, r4
 801d75c:	4630      	mov	r0, r6
 801d75e:	f001 fc4f 	bl	801f000 <__smakebuf_r>
 801d762:	89a0      	ldrh	r0, [r4, #12]
 801d764:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d768:	f010 0301 	ands.w	r3, r0, #1
 801d76c:	d00a      	beq.n	801d784 <__swsetup_r+0xbc>
 801d76e:	2300      	movs	r3, #0
 801d770:	60a3      	str	r3, [r4, #8]
 801d772:	6963      	ldr	r3, [r4, #20]
 801d774:	425b      	negs	r3, r3
 801d776:	61a3      	str	r3, [r4, #24]
 801d778:	6923      	ldr	r3, [r4, #16]
 801d77a:	b943      	cbnz	r3, 801d78e <__swsetup_r+0xc6>
 801d77c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801d780:	d1ba      	bne.n	801d6f8 <__swsetup_r+0x30>
 801d782:	bd70      	pop	{r4, r5, r6, pc}
 801d784:	0781      	lsls	r1, r0, #30
 801d786:	bf58      	it	pl
 801d788:	6963      	ldrpl	r3, [r4, #20]
 801d78a:	60a3      	str	r3, [r4, #8]
 801d78c:	e7f4      	b.n	801d778 <__swsetup_r+0xb0>
 801d78e:	2000      	movs	r0, #0
 801d790:	e7f7      	b.n	801d782 <__swsetup_r+0xba>
 801d792:	bf00      	nop
 801d794:	200000f8 	.word	0x200000f8
 801d798:	08022c5c 	.word	0x08022c5c
 801d79c:	08022c7c 	.word	0x08022c7c
 801d7a0:	08022c3c 	.word	0x08022c3c

0801d7a4 <__assert_func>:
 801d7a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d7a6:	4614      	mov	r4, r2
 801d7a8:	461a      	mov	r2, r3
 801d7aa:	4b09      	ldr	r3, [pc, #36]	; (801d7d0 <__assert_func+0x2c>)
 801d7ac:	681b      	ldr	r3, [r3, #0]
 801d7ae:	4605      	mov	r5, r0
 801d7b0:	68d8      	ldr	r0, [r3, #12]
 801d7b2:	b14c      	cbz	r4, 801d7c8 <__assert_func+0x24>
 801d7b4:	4b07      	ldr	r3, [pc, #28]	; (801d7d4 <__assert_func+0x30>)
 801d7b6:	9100      	str	r1, [sp, #0]
 801d7b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d7bc:	4906      	ldr	r1, [pc, #24]	; (801d7d8 <__assert_func+0x34>)
 801d7be:	462b      	mov	r3, r5
 801d7c0:	f000 ff6c 	bl	801e69c <fiprintf>
 801d7c4:	f7fc fece 	bl	801a564 <abort>
 801d7c8:	4b04      	ldr	r3, [pc, #16]	; (801d7dc <__assert_func+0x38>)
 801d7ca:	461c      	mov	r4, r3
 801d7cc:	e7f3      	b.n	801d7b6 <__assert_func+0x12>
 801d7ce:	bf00      	nop
 801d7d0:	200000f8 	.word	0x200000f8
 801d7d4:	08022efd 	.word	0x08022efd
 801d7d8:	08022f0a 	.word	0x08022f0a
 801d7dc:	08022f38 	.word	0x08022f38

0801d7e0 <_close_r>:
 801d7e0:	b538      	push	{r3, r4, r5, lr}
 801d7e2:	4d06      	ldr	r5, [pc, #24]	; (801d7fc <_close_r+0x1c>)
 801d7e4:	2300      	movs	r3, #0
 801d7e6:	4604      	mov	r4, r0
 801d7e8:	4608      	mov	r0, r1
 801d7ea:	602b      	str	r3, [r5, #0]
 801d7ec:	f002 fff4 	bl	80207d8 <_close>
 801d7f0:	1c43      	adds	r3, r0, #1
 801d7f2:	d102      	bne.n	801d7fa <_close_r+0x1a>
 801d7f4:	682b      	ldr	r3, [r5, #0]
 801d7f6:	b103      	cbz	r3, 801d7fa <_close_r+0x1a>
 801d7f8:	6023      	str	r3, [r4, #0]
 801d7fa:	bd38      	pop	{r3, r4, r5, pc}
 801d7fc:	20009d08 	.word	0x20009d08

0801d800 <div>:
 801d800:	2900      	cmp	r1, #0
 801d802:	b510      	push	{r4, lr}
 801d804:	fb91 f4f2 	sdiv	r4, r1, r2
 801d808:	fb02 1314 	mls	r3, r2, r4, r1
 801d80c:	db06      	blt.n	801d81c <div+0x1c>
 801d80e:	2b00      	cmp	r3, #0
 801d810:	da01      	bge.n	801d816 <div+0x16>
 801d812:	3401      	adds	r4, #1
 801d814:	1a9b      	subs	r3, r3, r2
 801d816:	e9c0 4300 	strd	r4, r3, [r0]
 801d81a:	bd10      	pop	{r4, pc}
 801d81c:	2b00      	cmp	r3, #0
 801d81e:	bfc4      	itt	gt
 801d820:	f104 34ff 	addgt.w	r4, r4, #4294967295
 801d824:	189b      	addgt	r3, r3, r2
 801d826:	e7f6      	b.n	801d816 <div+0x16>

0801d828 <quorem>:
 801d828:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d82c:	6903      	ldr	r3, [r0, #16]
 801d82e:	690c      	ldr	r4, [r1, #16]
 801d830:	42a3      	cmp	r3, r4
 801d832:	4607      	mov	r7, r0
 801d834:	f2c0 8081 	blt.w	801d93a <quorem+0x112>
 801d838:	3c01      	subs	r4, #1
 801d83a:	f101 0814 	add.w	r8, r1, #20
 801d83e:	f100 0514 	add.w	r5, r0, #20
 801d842:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d846:	9301      	str	r3, [sp, #4]
 801d848:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801d84c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d850:	3301      	adds	r3, #1
 801d852:	429a      	cmp	r2, r3
 801d854:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801d858:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801d85c:	fbb2 f6f3 	udiv	r6, r2, r3
 801d860:	d331      	bcc.n	801d8c6 <quorem+0x9e>
 801d862:	f04f 0e00 	mov.w	lr, #0
 801d866:	4640      	mov	r0, r8
 801d868:	46ac      	mov	ip, r5
 801d86a:	46f2      	mov	sl, lr
 801d86c:	f850 2b04 	ldr.w	r2, [r0], #4
 801d870:	b293      	uxth	r3, r2
 801d872:	fb06 e303 	mla	r3, r6, r3, lr
 801d876:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801d87a:	b29b      	uxth	r3, r3
 801d87c:	ebaa 0303 	sub.w	r3, sl, r3
 801d880:	0c12      	lsrs	r2, r2, #16
 801d882:	f8dc a000 	ldr.w	sl, [ip]
 801d886:	fb06 e202 	mla	r2, r6, r2, lr
 801d88a:	fa13 f38a 	uxtah	r3, r3, sl
 801d88e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801d892:	fa1f fa82 	uxth.w	sl, r2
 801d896:	f8dc 2000 	ldr.w	r2, [ip]
 801d89a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801d89e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801d8a2:	b29b      	uxth	r3, r3
 801d8a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d8a8:	4581      	cmp	r9, r0
 801d8aa:	f84c 3b04 	str.w	r3, [ip], #4
 801d8ae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801d8b2:	d2db      	bcs.n	801d86c <quorem+0x44>
 801d8b4:	f855 300b 	ldr.w	r3, [r5, fp]
 801d8b8:	b92b      	cbnz	r3, 801d8c6 <quorem+0x9e>
 801d8ba:	9b01      	ldr	r3, [sp, #4]
 801d8bc:	3b04      	subs	r3, #4
 801d8be:	429d      	cmp	r5, r3
 801d8c0:	461a      	mov	r2, r3
 801d8c2:	d32e      	bcc.n	801d922 <quorem+0xfa>
 801d8c4:	613c      	str	r4, [r7, #16]
 801d8c6:	4638      	mov	r0, r7
 801d8c8:	f001 fec0 	bl	801f64c <__mcmp>
 801d8cc:	2800      	cmp	r0, #0
 801d8ce:	db24      	blt.n	801d91a <quorem+0xf2>
 801d8d0:	3601      	adds	r6, #1
 801d8d2:	4628      	mov	r0, r5
 801d8d4:	f04f 0c00 	mov.w	ip, #0
 801d8d8:	f858 2b04 	ldr.w	r2, [r8], #4
 801d8dc:	f8d0 e000 	ldr.w	lr, [r0]
 801d8e0:	b293      	uxth	r3, r2
 801d8e2:	ebac 0303 	sub.w	r3, ip, r3
 801d8e6:	0c12      	lsrs	r2, r2, #16
 801d8e8:	fa13 f38e 	uxtah	r3, r3, lr
 801d8ec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801d8f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801d8f4:	b29b      	uxth	r3, r3
 801d8f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d8fa:	45c1      	cmp	r9, r8
 801d8fc:	f840 3b04 	str.w	r3, [r0], #4
 801d900:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801d904:	d2e8      	bcs.n	801d8d8 <quorem+0xb0>
 801d906:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d90a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d90e:	b922      	cbnz	r2, 801d91a <quorem+0xf2>
 801d910:	3b04      	subs	r3, #4
 801d912:	429d      	cmp	r5, r3
 801d914:	461a      	mov	r2, r3
 801d916:	d30a      	bcc.n	801d92e <quorem+0x106>
 801d918:	613c      	str	r4, [r7, #16]
 801d91a:	4630      	mov	r0, r6
 801d91c:	b003      	add	sp, #12
 801d91e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d922:	6812      	ldr	r2, [r2, #0]
 801d924:	3b04      	subs	r3, #4
 801d926:	2a00      	cmp	r2, #0
 801d928:	d1cc      	bne.n	801d8c4 <quorem+0x9c>
 801d92a:	3c01      	subs	r4, #1
 801d92c:	e7c7      	b.n	801d8be <quorem+0x96>
 801d92e:	6812      	ldr	r2, [r2, #0]
 801d930:	3b04      	subs	r3, #4
 801d932:	2a00      	cmp	r2, #0
 801d934:	d1f0      	bne.n	801d918 <quorem+0xf0>
 801d936:	3c01      	subs	r4, #1
 801d938:	e7eb      	b.n	801d912 <quorem+0xea>
 801d93a:	2000      	movs	r0, #0
 801d93c:	e7ee      	b.n	801d91c <quorem+0xf4>
	...

0801d940 <_dtoa_r>:
 801d940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d944:	ed2d 8b02 	vpush	{d8}
 801d948:	ec57 6b10 	vmov	r6, r7, d0
 801d94c:	b095      	sub	sp, #84	; 0x54
 801d94e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801d950:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801d954:	9105      	str	r1, [sp, #20]
 801d956:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801d95a:	4604      	mov	r4, r0
 801d95c:	9209      	str	r2, [sp, #36]	; 0x24
 801d95e:	930f      	str	r3, [sp, #60]	; 0x3c
 801d960:	b975      	cbnz	r5, 801d980 <_dtoa_r+0x40>
 801d962:	2010      	movs	r0, #16
 801d964:	f7fd f850 	bl	801aa08 <malloc>
 801d968:	4602      	mov	r2, r0
 801d96a:	6260      	str	r0, [r4, #36]	; 0x24
 801d96c:	b920      	cbnz	r0, 801d978 <_dtoa_r+0x38>
 801d96e:	4bb2      	ldr	r3, [pc, #712]	; (801dc38 <_dtoa_r+0x2f8>)
 801d970:	21ea      	movs	r1, #234	; 0xea
 801d972:	48b2      	ldr	r0, [pc, #712]	; (801dc3c <_dtoa_r+0x2fc>)
 801d974:	f7ff ff16 	bl	801d7a4 <__assert_func>
 801d978:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801d97c:	6005      	str	r5, [r0, #0]
 801d97e:	60c5      	str	r5, [r0, #12]
 801d980:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d982:	6819      	ldr	r1, [r3, #0]
 801d984:	b151      	cbz	r1, 801d99c <_dtoa_r+0x5c>
 801d986:	685a      	ldr	r2, [r3, #4]
 801d988:	604a      	str	r2, [r1, #4]
 801d98a:	2301      	movs	r3, #1
 801d98c:	4093      	lsls	r3, r2
 801d98e:	608b      	str	r3, [r1, #8]
 801d990:	4620      	mov	r0, r4
 801d992:	f001 fbd3 	bl	801f13c <_Bfree>
 801d996:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d998:	2200      	movs	r2, #0
 801d99a:	601a      	str	r2, [r3, #0]
 801d99c:	1e3b      	subs	r3, r7, #0
 801d99e:	bfb9      	ittee	lt
 801d9a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801d9a4:	9303      	strlt	r3, [sp, #12]
 801d9a6:	2300      	movge	r3, #0
 801d9a8:	f8c8 3000 	strge.w	r3, [r8]
 801d9ac:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801d9b0:	4ba3      	ldr	r3, [pc, #652]	; (801dc40 <_dtoa_r+0x300>)
 801d9b2:	bfbc      	itt	lt
 801d9b4:	2201      	movlt	r2, #1
 801d9b6:	f8c8 2000 	strlt.w	r2, [r8]
 801d9ba:	ea33 0309 	bics.w	r3, r3, r9
 801d9be:	d11b      	bne.n	801d9f8 <_dtoa_r+0xb8>
 801d9c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d9c2:	f242 730f 	movw	r3, #9999	; 0x270f
 801d9c6:	6013      	str	r3, [r2, #0]
 801d9c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d9cc:	4333      	orrs	r3, r6
 801d9ce:	f000 857a 	beq.w	801e4c6 <_dtoa_r+0xb86>
 801d9d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d9d4:	b963      	cbnz	r3, 801d9f0 <_dtoa_r+0xb0>
 801d9d6:	4b9b      	ldr	r3, [pc, #620]	; (801dc44 <_dtoa_r+0x304>)
 801d9d8:	e024      	b.n	801da24 <_dtoa_r+0xe4>
 801d9da:	4b9b      	ldr	r3, [pc, #620]	; (801dc48 <_dtoa_r+0x308>)
 801d9dc:	9300      	str	r3, [sp, #0]
 801d9de:	3308      	adds	r3, #8
 801d9e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801d9e2:	6013      	str	r3, [r2, #0]
 801d9e4:	9800      	ldr	r0, [sp, #0]
 801d9e6:	b015      	add	sp, #84	; 0x54
 801d9e8:	ecbd 8b02 	vpop	{d8}
 801d9ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d9f0:	4b94      	ldr	r3, [pc, #592]	; (801dc44 <_dtoa_r+0x304>)
 801d9f2:	9300      	str	r3, [sp, #0]
 801d9f4:	3303      	adds	r3, #3
 801d9f6:	e7f3      	b.n	801d9e0 <_dtoa_r+0xa0>
 801d9f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 801d9fc:	2200      	movs	r2, #0
 801d9fe:	ec51 0b17 	vmov	r0, r1, d7
 801da02:	2300      	movs	r3, #0
 801da04:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801da08:	f7e3 f87e 	bl	8000b08 <__aeabi_dcmpeq>
 801da0c:	4680      	mov	r8, r0
 801da0e:	b158      	cbz	r0, 801da28 <_dtoa_r+0xe8>
 801da10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801da12:	2301      	movs	r3, #1
 801da14:	6013      	str	r3, [r2, #0]
 801da16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801da18:	2b00      	cmp	r3, #0
 801da1a:	f000 8551 	beq.w	801e4c0 <_dtoa_r+0xb80>
 801da1e:	488b      	ldr	r0, [pc, #556]	; (801dc4c <_dtoa_r+0x30c>)
 801da20:	6018      	str	r0, [r3, #0]
 801da22:	1e43      	subs	r3, r0, #1
 801da24:	9300      	str	r3, [sp, #0]
 801da26:	e7dd      	b.n	801d9e4 <_dtoa_r+0xa4>
 801da28:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801da2c:	aa12      	add	r2, sp, #72	; 0x48
 801da2e:	a913      	add	r1, sp, #76	; 0x4c
 801da30:	4620      	mov	r0, r4
 801da32:	f001 ff2b 	bl	801f88c <__d2b>
 801da36:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801da3a:	4683      	mov	fp, r0
 801da3c:	2d00      	cmp	r5, #0
 801da3e:	d07c      	beq.n	801db3a <_dtoa_r+0x1fa>
 801da40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801da42:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801da46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801da4a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801da4e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801da52:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801da56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801da5a:	4b7d      	ldr	r3, [pc, #500]	; (801dc50 <_dtoa_r+0x310>)
 801da5c:	2200      	movs	r2, #0
 801da5e:	4630      	mov	r0, r6
 801da60:	4639      	mov	r1, r7
 801da62:	f7e2 fc31 	bl	80002c8 <__aeabi_dsub>
 801da66:	a36e      	add	r3, pc, #440	; (adr r3, 801dc20 <_dtoa_r+0x2e0>)
 801da68:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da6c:	f7e2 fde4 	bl	8000638 <__aeabi_dmul>
 801da70:	a36d      	add	r3, pc, #436	; (adr r3, 801dc28 <_dtoa_r+0x2e8>)
 801da72:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da76:	f7e2 fc29 	bl	80002cc <__adddf3>
 801da7a:	4606      	mov	r6, r0
 801da7c:	4628      	mov	r0, r5
 801da7e:	460f      	mov	r7, r1
 801da80:	f7e2 fd70 	bl	8000564 <__aeabi_i2d>
 801da84:	a36a      	add	r3, pc, #424	; (adr r3, 801dc30 <_dtoa_r+0x2f0>)
 801da86:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da8a:	f7e2 fdd5 	bl	8000638 <__aeabi_dmul>
 801da8e:	4602      	mov	r2, r0
 801da90:	460b      	mov	r3, r1
 801da92:	4630      	mov	r0, r6
 801da94:	4639      	mov	r1, r7
 801da96:	f7e2 fc19 	bl	80002cc <__adddf3>
 801da9a:	4606      	mov	r6, r0
 801da9c:	460f      	mov	r7, r1
 801da9e:	f7e3 f87b 	bl	8000b98 <__aeabi_d2iz>
 801daa2:	2200      	movs	r2, #0
 801daa4:	4682      	mov	sl, r0
 801daa6:	2300      	movs	r3, #0
 801daa8:	4630      	mov	r0, r6
 801daaa:	4639      	mov	r1, r7
 801daac:	f7e3 f836 	bl	8000b1c <__aeabi_dcmplt>
 801dab0:	b148      	cbz	r0, 801dac6 <_dtoa_r+0x186>
 801dab2:	4650      	mov	r0, sl
 801dab4:	f7e2 fd56 	bl	8000564 <__aeabi_i2d>
 801dab8:	4632      	mov	r2, r6
 801daba:	463b      	mov	r3, r7
 801dabc:	f7e3 f824 	bl	8000b08 <__aeabi_dcmpeq>
 801dac0:	b908      	cbnz	r0, 801dac6 <_dtoa_r+0x186>
 801dac2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801dac6:	f1ba 0f16 	cmp.w	sl, #22
 801daca:	d854      	bhi.n	801db76 <_dtoa_r+0x236>
 801dacc:	4b61      	ldr	r3, [pc, #388]	; (801dc54 <_dtoa_r+0x314>)
 801dace:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801dad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dad6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801dada:	f7e3 f81f 	bl	8000b1c <__aeabi_dcmplt>
 801dade:	2800      	cmp	r0, #0
 801dae0:	d04b      	beq.n	801db7a <_dtoa_r+0x23a>
 801dae2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801dae6:	2300      	movs	r3, #0
 801dae8:	930e      	str	r3, [sp, #56]	; 0x38
 801daea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801daec:	1b5d      	subs	r5, r3, r5
 801daee:	1e6b      	subs	r3, r5, #1
 801daf0:	9304      	str	r3, [sp, #16]
 801daf2:	bf43      	ittte	mi
 801daf4:	2300      	movmi	r3, #0
 801daf6:	f1c5 0801 	rsbmi	r8, r5, #1
 801dafa:	9304      	strmi	r3, [sp, #16]
 801dafc:	f04f 0800 	movpl.w	r8, #0
 801db00:	f1ba 0f00 	cmp.w	sl, #0
 801db04:	db3b      	blt.n	801db7e <_dtoa_r+0x23e>
 801db06:	9b04      	ldr	r3, [sp, #16]
 801db08:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801db0c:	4453      	add	r3, sl
 801db0e:	9304      	str	r3, [sp, #16]
 801db10:	2300      	movs	r3, #0
 801db12:	9306      	str	r3, [sp, #24]
 801db14:	9b05      	ldr	r3, [sp, #20]
 801db16:	2b09      	cmp	r3, #9
 801db18:	d869      	bhi.n	801dbee <_dtoa_r+0x2ae>
 801db1a:	2b05      	cmp	r3, #5
 801db1c:	bfc4      	itt	gt
 801db1e:	3b04      	subgt	r3, #4
 801db20:	9305      	strgt	r3, [sp, #20]
 801db22:	9b05      	ldr	r3, [sp, #20]
 801db24:	f1a3 0302 	sub.w	r3, r3, #2
 801db28:	bfcc      	ite	gt
 801db2a:	2500      	movgt	r5, #0
 801db2c:	2501      	movle	r5, #1
 801db2e:	2b03      	cmp	r3, #3
 801db30:	d869      	bhi.n	801dc06 <_dtoa_r+0x2c6>
 801db32:	e8df f003 	tbb	[pc, r3]
 801db36:	4e2c      	.short	0x4e2c
 801db38:	5a4c      	.short	0x5a4c
 801db3a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801db3e:	441d      	add	r5, r3
 801db40:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801db44:	2b20      	cmp	r3, #32
 801db46:	bfc1      	itttt	gt
 801db48:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801db4c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801db50:	fa09 f303 	lslgt.w	r3, r9, r3
 801db54:	fa26 f000 	lsrgt.w	r0, r6, r0
 801db58:	bfda      	itte	le
 801db5a:	f1c3 0320 	rsble	r3, r3, #32
 801db5e:	fa06 f003 	lslle.w	r0, r6, r3
 801db62:	4318      	orrgt	r0, r3
 801db64:	f7e2 fcee 	bl	8000544 <__aeabi_ui2d>
 801db68:	2301      	movs	r3, #1
 801db6a:	4606      	mov	r6, r0
 801db6c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801db70:	3d01      	subs	r5, #1
 801db72:	9310      	str	r3, [sp, #64]	; 0x40
 801db74:	e771      	b.n	801da5a <_dtoa_r+0x11a>
 801db76:	2301      	movs	r3, #1
 801db78:	e7b6      	b.n	801dae8 <_dtoa_r+0x1a8>
 801db7a:	900e      	str	r0, [sp, #56]	; 0x38
 801db7c:	e7b5      	b.n	801daea <_dtoa_r+0x1aa>
 801db7e:	f1ca 0300 	rsb	r3, sl, #0
 801db82:	9306      	str	r3, [sp, #24]
 801db84:	2300      	movs	r3, #0
 801db86:	eba8 080a 	sub.w	r8, r8, sl
 801db8a:	930d      	str	r3, [sp, #52]	; 0x34
 801db8c:	e7c2      	b.n	801db14 <_dtoa_r+0x1d4>
 801db8e:	2300      	movs	r3, #0
 801db90:	9308      	str	r3, [sp, #32]
 801db92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801db94:	2b00      	cmp	r3, #0
 801db96:	dc39      	bgt.n	801dc0c <_dtoa_r+0x2cc>
 801db98:	f04f 0901 	mov.w	r9, #1
 801db9c:	f8cd 9004 	str.w	r9, [sp, #4]
 801dba0:	464b      	mov	r3, r9
 801dba2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801dba6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801dba8:	2200      	movs	r2, #0
 801dbaa:	6042      	str	r2, [r0, #4]
 801dbac:	2204      	movs	r2, #4
 801dbae:	f102 0614 	add.w	r6, r2, #20
 801dbb2:	429e      	cmp	r6, r3
 801dbb4:	6841      	ldr	r1, [r0, #4]
 801dbb6:	d92f      	bls.n	801dc18 <_dtoa_r+0x2d8>
 801dbb8:	4620      	mov	r0, r4
 801dbba:	f001 fa7f 	bl	801f0bc <_Balloc>
 801dbbe:	9000      	str	r0, [sp, #0]
 801dbc0:	2800      	cmp	r0, #0
 801dbc2:	d14b      	bne.n	801dc5c <_dtoa_r+0x31c>
 801dbc4:	4b24      	ldr	r3, [pc, #144]	; (801dc58 <_dtoa_r+0x318>)
 801dbc6:	4602      	mov	r2, r0
 801dbc8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801dbcc:	e6d1      	b.n	801d972 <_dtoa_r+0x32>
 801dbce:	2301      	movs	r3, #1
 801dbd0:	e7de      	b.n	801db90 <_dtoa_r+0x250>
 801dbd2:	2300      	movs	r3, #0
 801dbd4:	9308      	str	r3, [sp, #32]
 801dbd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dbd8:	eb0a 0903 	add.w	r9, sl, r3
 801dbdc:	f109 0301 	add.w	r3, r9, #1
 801dbe0:	2b01      	cmp	r3, #1
 801dbe2:	9301      	str	r3, [sp, #4]
 801dbe4:	bfb8      	it	lt
 801dbe6:	2301      	movlt	r3, #1
 801dbe8:	e7dd      	b.n	801dba6 <_dtoa_r+0x266>
 801dbea:	2301      	movs	r3, #1
 801dbec:	e7f2      	b.n	801dbd4 <_dtoa_r+0x294>
 801dbee:	2501      	movs	r5, #1
 801dbf0:	2300      	movs	r3, #0
 801dbf2:	9305      	str	r3, [sp, #20]
 801dbf4:	9508      	str	r5, [sp, #32]
 801dbf6:	f04f 39ff 	mov.w	r9, #4294967295
 801dbfa:	2200      	movs	r2, #0
 801dbfc:	f8cd 9004 	str.w	r9, [sp, #4]
 801dc00:	2312      	movs	r3, #18
 801dc02:	9209      	str	r2, [sp, #36]	; 0x24
 801dc04:	e7cf      	b.n	801dba6 <_dtoa_r+0x266>
 801dc06:	2301      	movs	r3, #1
 801dc08:	9308      	str	r3, [sp, #32]
 801dc0a:	e7f4      	b.n	801dbf6 <_dtoa_r+0x2b6>
 801dc0c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801dc10:	f8cd 9004 	str.w	r9, [sp, #4]
 801dc14:	464b      	mov	r3, r9
 801dc16:	e7c6      	b.n	801dba6 <_dtoa_r+0x266>
 801dc18:	3101      	adds	r1, #1
 801dc1a:	6041      	str	r1, [r0, #4]
 801dc1c:	0052      	lsls	r2, r2, #1
 801dc1e:	e7c6      	b.n	801dbae <_dtoa_r+0x26e>
 801dc20:	636f4361 	.word	0x636f4361
 801dc24:	3fd287a7 	.word	0x3fd287a7
 801dc28:	8b60c8b3 	.word	0x8b60c8b3
 801dc2c:	3fc68a28 	.word	0x3fc68a28
 801dc30:	509f79fb 	.word	0x509f79fb
 801dc34:	3fd34413 	.word	0x3fd34413
 801dc38:	08022ca0 	.word	0x08022ca0
 801dc3c:	08022f46 	.word	0x08022f46
 801dc40:	7ff00000 	.word	0x7ff00000
 801dc44:	08022f42 	.word	0x08022f42
 801dc48:	08022f39 	.word	0x08022f39
 801dc4c:	080231aa 	.word	0x080231aa
 801dc50:	3ff80000 	.word	0x3ff80000
 801dc54:	080230c0 	.word	0x080230c0
 801dc58:	08022fa5 	.word	0x08022fa5
 801dc5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801dc5e:	9a00      	ldr	r2, [sp, #0]
 801dc60:	601a      	str	r2, [r3, #0]
 801dc62:	9b01      	ldr	r3, [sp, #4]
 801dc64:	2b0e      	cmp	r3, #14
 801dc66:	f200 80ad 	bhi.w	801ddc4 <_dtoa_r+0x484>
 801dc6a:	2d00      	cmp	r5, #0
 801dc6c:	f000 80aa 	beq.w	801ddc4 <_dtoa_r+0x484>
 801dc70:	f1ba 0f00 	cmp.w	sl, #0
 801dc74:	dd36      	ble.n	801dce4 <_dtoa_r+0x3a4>
 801dc76:	4ac3      	ldr	r2, [pc, #780]	; (801df84 <_dtoa_r+0x644>)
 801dc78:	f00a 030f 	and.w	r3, sl, #15
 801dc7c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801dc80:	ed93 7b00 	vldr	d7, [r3]
 801dc84:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801dc88:	ea4f 172a 	mov.w	r7, sl, asr #4
 801dc8c:	eeb0 8a47 	vmov.f32	s16, s14
 801dc90:	eef0 8a67 	vmov.f32	s17, s15
 801dc94:	d016      	beq.n	801dcc4 <_dtoa_r+0x384>
 801dc96:	4bbc      	ldr	r3, [pc, #752]	; (801df88 <_dtoa_r+0x648>)
 801dc98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801dc9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801dca0:	f7e2 fdf4 	bl	800088c <__aeabi_ddiv>
 801dca4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801dca8:	f007 070f 	and.w	r7, r7, #15
 801dcac:	2503      	movs	r5, #3
 801dcae:	4eb6      	ldr	r6, [pc, #728]	; (801df88 <_dtoa_r+0x648>)
 801dcb0:	b957      	cbnz	r7, 801dcc8 <_dtoa_r+0x388>
 801dcb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dcb6:	ec53 2b18 	vmov	r2, r3, d8
 801dcba:	f7e2 fde7 	bl	800088c <__aeabi_ddiv>
 801dcbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801dcc2:	e029      	b.n	801dd18 <_dtoa_r+0x3d8>
 801dcc4:	2502      	movs	r5, #2
 801dcc6:	e7f2      	b.n	801dcae <_dtoa_r+0x36e>
 801dcc8:	07f9      	lsls	r1, r7, #31
 801dcca:	d508      	bpl.n	801dcde <_dtoa_r+0x39e>
 801dccc:	ec51 0b18 	vmov	r0, r1, d8
 801dcd0:	e9d6 2300 	ldrd	r2, r3, [r6]
 801dcd4:	f7e2 fcb0 	bl	8000638 <__aeabi_dmul>
 801dcd8:	ec41 0b18 	vmov	d8, r0, r1
 801dcdc:	3501      	adds	r5, #1
 801dcde:	107f      	asrs	r7, r7, #1
 801dce0:	3608      	adds	r6, #8
 801dce2:	e7e5      	b.n	801dcb0 <_dtoa_r+0x370>
 801dce4:	f000 80a6 	beq.w	801de34 <_dtoa_r+0x4f4>
 801dce8:	f1ca 0600 	rsb	r6, sl, #0
 801dcec:	4ba5      	ldr	r3, [pc, #660]	; (801df84 <_dtoa_r+0x644>)
 801dcee:	4fa6      	ldr	r7, [pc, #664]	; (801df88 <_dtoa_r+0x648>)
 801dcf0:	f006 020f 	and.w	r2, r6, #15
 801dcf4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801dcf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dcfc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801dd00:	f7e2 fc9a 	bl	8000638 <__aeabi_dmul>
 801dd04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801dd08:	1136      	asrs	r6, r6, #4
 801dd0a:	2300      	movs	r3, #0
 801dd0c:	2502      	movs	r5, #2
 801dd0e:	2e00      	cmp	r6, #0
 801dd10:	f040 8085 	bne.w	801de1e <_dtoa_r+0x4de>
 801dd14:	2b00      	cmp	r3, #0
 801dd16:	d1d2      	bne.n	801dcbe <_dtoa_r+0x37e>
 801dd18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dd1a:	2b00      	cmp	r3, #0
 801dd1c:	f000 808c 	beq.w	801de38 <_dtoa_r+0x4f8>
 801dd20:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801dd24:	4b99      	ldr	r3, [pc, #612]	; (801df8c <_dtoa_r+0x64c>)
 801dd26:	2200      	movs	r2, #0
 801dd28:	4630      	mov	r0, r6
 801dd2a:	4639      	mov	r1, r7
 801dd2c:	f7e2 fef6 	bl	8000b1c <__aeabi_dcmplt>
 801dd30:	2800      	cmp	r0, #0
 801dd32:	f000 8081 	beq.w	801de38 <_dtoa_r+0x4f8>
 801dd36:	9b01      	ldr	r3, [sp, #4]
 801dd38:	2b00      	cmp	r3, #0
 801dd3a:	d07d      	beq.n	801de38 <_dtoa_r+0x4f8>
 801dd3c:	f1b9 0f00 	cmp.w	r9, #0
 801dd40:	dd3c      	ble.n	801ddbc <_dtoa_r+0x47c>
 801dd42:	f10a 33ff 	add.w	r3, sl, #4294967295
 801dd46:	9307      	str	r3, [sp, #28]
 801dd48:	2200      	movs	r2, #0
 801dd4a:	4b91      	ldr	r3, [pc, #580]	; (801df90 <_dtoa_r+0x650>)
 801dd4c:	4630      	mov	r0, r6
 801dd4e:	4639      	mov	r1, r7
 801dd50:	f7e2 fc72 	bl	8000638 <__aeabi_dmul>
 801dd54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801dd58:	3501      	adds	r5, #1
 801dd5a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801dd5e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801dd62:	4628      	mov	r0, r5
 801dd64:	f7e2 fbfe 	bl	8000564 <__aeabi_i2d>
 801dd68:	4632      	mov	r2, r6
 801dd6a:	463b      	mov	r3, r7
 801dd6c:	f7e2 fc64 	bl	8000638 <__aeabi_dmul>
 801dd70:	4b88      	ldr	r3, [pc, #544]	; (801df94 <_dtoa_r+0x654>)
 801dd72:	2200      	movs	r2, #0
 801dd74:	f7e2 faaa 	bl	80002cc <__adddf3>
 801dd78:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801dd7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801dd80:	9303      	str	r3, [sp, #12]
 801dd82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dd84:	2b00      	cmp	r3, #0
 801dd86:	d15c      	bne.n	801de42 <_dtoa_r+0x502>
 801dd88:	4b83      	ldr	r3, [pc, #524]	; (801df98 <_dtoa_r+0x658>)
 801dd8a:	2200      	movs	r2, #0
 801dd8c:	4630      	mov	r0, r6
 801dd8e:	4639      	mov	r1, r7
 801dd90:	f7e2 fa9a 	bl	80002c8 <__aeabi_dsub>
 801dd94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801dd98:	4606      	mov	r6, r0
 801dd9a:	460f      	mov	r7, r1
 801dd9c:	f7e2 fedc 	bl	8000b58 <__aeabi_dcmpgt>
 801dda0:	2800      	cmp	r0, #0
 801dda2:	f040 8296 	bne.w	801e2d2 <_dtoa_r+0x992>
 801dda6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801ddaa:	4630      	mov	r0, r6
 801ddac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ddb0:	4639      	mov	r1, r7
 801ddb2:	f7e2 feb3 	bl	8000b1c <__aeabi_dcmplt>
 801ddb6:	2800      	cmp	r0, #0
 801ddb8:	f040 8288 	bne.w	801e2cc <_dtoa_r+0x98c>
 801ddbc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801ddc0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801ddc4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ddc6:	2b00      	cmp	r3, #0
 801ddc8:	f2c0 8158 	blt.w	801e07c <_dtoa_r+0x73c>
 801ddcc:	f1ba 0f0e 	cmp.w	sl, #14
 801ddd0:	f300 8154 	bgt.w	801e07c <_dtoa_r+0x73c>
 801ddd4:	4b6b      	ldr	r3, [pc, #428]	; (801df84 <_dtoa_r+0x644>)
 801ddd6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801ddda:	e9d3 8900 	ldrd	r8, r9, [r3]
 801ddde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dde0:	2b00      	cmp	r3, #0
 801dde2:	f280 80e3 	bge.w	801dfac <_dtoa_r+0x66c>
 801dde6:	9b01      	ldr	r3, [sp, #4]
 801dde8:	2b00      	cmp	r3, #0
 801ddea:	f300 80df 	bgt.w	801dfac <_dtoa_r+0x66c>
 801ddee:	f040 826d 	bne.w	801e2cc <_dtoa_r+0x98c>
 801ddf2:	4b69      	ldr	r3, [pc, #420]	; (801df98 <_dtoa_r+0x658>)
 801ddf4:	2200      	movs	r2, #0
 801ddf6:	4640      	mov	r0, r8
 801ddf8:	4649      	mov	r1, r9
 801ddfa:	f7e2 fc1d 	bl	8000638 <__aeabi_dmul>
 801ddfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801de02:	f7e2 fe9f 	bl	8000b44 <__aeabi_dcmpge>
 801de06:	9e01      	ldr	r6, [sp, #4]
 801de08:	4637      	mov	r7, r6
 801de0a:	2800      	cmp	r0, #0
 801de0c:	f040 8243 	bne.w	801e296 <_dtoa_r+0x956>
 801de10:	9d00      	ldr	r5, [sp, #0]
 801de12:	2331      	movs	r3, #49	; 0x31
 801de14:	f805 3b01 	strb.w	r3, [r5], #1
 801de18:	f10a 0a01 	add.w	sl, sl, #1
 801de1c:	e23f      	b.n	801e29e <_dtoa_r+0x95e>
 801de1e:	07f2      	lsls	r2, r6, #31
 801de20:	d505      	bpl.n	801de2e <_dtoa_r+0x4ee>
 801de22:	e9d7 2300 	ldrd	r2, r3, [r7]
 801de26:	f7e2 fc07 	bl	8000638 <__aeabi_dmul>
 801de2a:	3501      	adds	r5, #1
 801de2c:	2301      	movs	r3, #1
 801de2e:	1076      	asrs	r6, r6, #1
 801de30:	3708      	adds	r7, #8
 801de32:	e76c      	b.n	801dd0e <_dtoa_r+0x3ce>
 801de34:	2502      	movs	r5, #2
 801de36:	e76f      	b.n	801dd18 <_dtoa_r+0x3d8>
 801de38:	9b01      	ldr	r3, [sp, #4]
 801de3a:	f8cd a01c 	str.w	sl, [sp, #28]
 801de3e:	930c      	str	r3, [sp, #48]	; 0x30
 801de40:	e78d      	b.n	801dd5e <_dtoa_r+0x41e>
 801de42:	9900      	ldr	r1, [sp, #0]
 801de44:	980c      	ldr	r0, [sp, #48]	; 0x30
 801de46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801de48:	4b4e      	ldr	r3, [pc, #312]	; (801df84 <_dtoa_r+0x644>)
 801de4a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801de4e:	4401      	add	r1, r0
 801de50:	9102      	str	r1, [sp, #8]
 801de52:	9908      	ldr	r1, [sp, #32]
 801de54:	eeb0 8a47 	vmov.f32	s16, s14
 801de58:	eef0 8a67 	vmov.f32	s17, s15
 801de5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801de60:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801de64:	2900      	cmp	r1, #0
 801de66:	d045      	beq.n	801def4 <_dtoa_r+0x5b4>
 801de68:	494c      	ldr	r1, [pc, #304]	; (801df9c <_dtoa_r+0x65c>)
 801de6a:	2000      	movs	r0, #0
 801de6c:	f7e2 fd0e 	bl	800088c <__aeabi_ddiv>
 801de70:	ec53 2b18 	vmov	r2, r3, d8
 801de74:	f7e2 fa28 	bl	80002c8 <__aeabi_dsub>
 801de78:	9d00      	ldr	r5, [sp, #0]
 801de7a:	ec41 0b18 	vmov	d8, r0, r1
 801de7e:	4639      	mov	r1, r7
 801de80:	4630      	mov	r0, r6
 801de82:	f7e2 fe89 	bl	8000b98 <__aeabi_d2iz>
 801de86:	900c      	str	r0, [sp, #48]	; 0x30
 801de88:	f7e2 fb6c 	bl	8000564 <__aeabi_i2d>
 801de8c:	4602      	mov	r2, r0
 801de8e:	460b      	mov	r3, r1
 801de90:	4630      	mov	r0, r6
 801de92:	4639      	mov	r1, r7
 801de94:	f7e2 fa18 	bl	80002c8 <__aeabi_dsub>
 801de98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801de9a:	3330      	adds	r3, #48	; 0x30
 801de9c:	f805 3b01 	strb.w	r3, [r5], #1
 801dea0:	ec53 2b18 	vmov	r2, r3, d8
 801dea4:	4606      	mov	r6, r0
 801dea6:	460f      	mov	r7, r1
 801dea8:	f7e2 fe38 	bl	8000b1c <__aeabi_dcmplt>
 801deac:	2800      	cmp	r0, #0
 801deae:	d165      	bne.n	801df7c <_dtoa_r+0x63c>
 801deb0:	4632      	mov	r2, r6
 801deb2:	463b      	mov	r3, r7
 801deb4:	4935      	ldr	r1, [pc, #212]	; (801df8c <_dtoa_r+0x64c>)
 801deb6:	2000      	movs	r0, #0
 801deb8:	f7e2 fa06 	bl	80002c8 <__aeabi_dsub>
 801debc:	ec53 2b18 	vmov	r2, r3, d8
 801dec0:	f7e2 fe2c 	bl	8000b1c <__aeabi_dcmplt>
 801dec4:	2800      	cmp	r0, #0
 801dec6:	f040 80b9 	bne.w	801e03c <_dtoa_r+0x6fc>
 801deca:	9b02      	ldr	r3, [sp, #8]
 801decc:	429d      	cmp	r5, r3
 801dece:	f43f af75 	beq.w	801ddbc <_dtoa_r+0x47c>
 801ded2:	4b2f      	ldr	r3, [pc, #188]	; (801df90 <_dtoa_r+0x650>)
 801ded4:	ec51 0b18 	vmov	r0, r1, d8
 801ded8:	2200      	movs	r2, #0
 801deda:	f7e2 fbad 	bl	8000638 <__aeabi_dmul>
 801dede:	4b2c      	ldr	r3, [pc, #176]	; (801df90 <_dtoa_r+0x650>)
 801dee0:	ec41 0b18 	vmov	d8, r0, r1
 801dee4:	2200      	movs	r2, #0
 801dee6:	4630      	mov	r0, r6
 801dee8:	4639      	mov	r1, r7
 801deea:	f7e2 fba5 	bl	8000638 <__aeabi_dmul>
 801deee:	4606      	mov	r6, r0
 801def0:	460f      	mov	r7, r1
 801def2:	e7c4      	b.n	801de7e <_dtoa_r+0x53e>
 801def4:	ec51 0b17 	vmov	r0, r1, d7
 801def8:	f7e2 fb9e 	bl	8000638 <__aeabi_dmul>
 801defc:	9b02      	ldr	r3, [sp, #8]
 801defe:	9d00      	ldr	r5, [sp, #0]
 801df00:	930c      	str	r3, [sp, #48]	; 0x30
 801df02:	ec41 0b18 	vmov	d8, r0, r1
 801df06:	4639      	mov	r1, r7
 801df08:	4630      	mov	r0, r6
 801df0a:	f7e2 fe45 	bl	8000b98 <__aeabi_d2iz>
 801df0e:	9011      	str	r0, [sp, #68]	; 0x44
 801df10:	f7e2 fb28 	bl	8000564 <__aeabi_i2d>
 801df14:	4602      	mov	r2, r0
 801df16:	460b      	mov	r3, r1
 801df18:	4630      	mov	r0, r6
 801df1a:	4639      	mov	r1, r7
 801df1c:	f7e2 f9d4 	bl	80002c8 <__aeabi_dsub>
 801df20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801df22:	3330      	adds	r3, #48	; 0x30
 801df24:	f805 3b01 	strb.w	r3, [r5], #1
 801df28:	9b02      	ldr	r3, [sp, #8]
 801df2a:	429d      	cmp	r5, r3
 801df2c:	4606      	mov	r6, r0
 801df2e:	460f      	mov	r7, r1
 801df30:	f04f 0200 	mov.w	r2, #0
 801df34:	d134      	bne.n	801dfa0 <_dtoa_r+0x660>
 801df36:	4b19      	ldr	r3, [pc, #100]	; (801df9c <_dtoa_r+0x65c>)
 801df38:	ec51 0b18 	vmov	r0, r1, d8
 801df3c:	f7e2 f9c6 	bl	80002cc <__adddf3>
 801df40:	4602      	mov	r2, r0
 801df42:	460b      	mov	r3, r1
 801df44:	4630      	mov	r0, r6
 801df46:	4639      	mov	r1, r7
 801df48:	f7e2 fe06 	bl	8000b58 <__aeabi_dcmpgt>
 801df4c:	2800      	cmp	r0, #0
 801df4e:	d175      	bne.n	801e03c <_dtoa_r+0x6fc>
 801df50:	ec53 2b18 	vmov	r2, r3, d8
 801df54:	4911      	ldr	r1, [pc, #68]	; (801df9c <_dtoa_r+0x65c>)
 801df56:	2000      	movs	r0, #0
 801df58:	f7e2 f9b6 	bl	80002c8 <__aeabi_dsub>
 801df5c:	4602      	mov	r2, r0
 801df5e:	460b      	mov	r3, r1
 801df60:	4630      	mov	r0, r6
 801df62:	4639      	mov	r1, r7
 801df64:	f7e2 fdda 	bl	8000b1c <__aeabi_dcmplt>
 801df68:	2800      	cmp	r0, #0
 801df6a:	f43f af27 	beq.w	801ddbc <_dtoa_r+0x47c>
 801df6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801df70:	1e6b      	subs	r3, r5, #1
 801df72:	930c      	str	r3, [sp, #48]	; 0x30
 801df74:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801df78:	2b30      	cmp	r3, #48	; 0x30
 801df7a:	d0f8      	beq.n	801df6e <_dtoa_r+0x62e>
 801df7c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801df80:	e04a      	b.n	801e018 <_dtoa_r+0x6d8>
 801df82:	bf00      	nop
 801df84:	080230c0 	.word	0x080230c0
 801df88:	08023098 	.word	0x08023098
 801df8c:	3ff00000 	.word	0x3ff00000
 801df90:	40240000 	.word	0x40240000
 801df94:	401c0000 	.word	0x401c0000
 801df98:	40140000 	.word	0x40140000
 801df9c:	3fe00000 	.word	0x3fe00000
 801dfa0:	4baf      	ldr	r3, [pc, #700]	; (801e260 <_dtoa_r+0x920>)
 801dfa2:	f7e2 fb49 	bl	8000638 <__aeabi_dmul>
 801dfa6:	4606      	mov	r6, r0
 801dfa8:	460f      	mov	r7, r1
 801dfaa:	e7ac      	b.n	801df06 <_dtoa_r+0x5c6>
 801dfac:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801dfb0:	9d00      	ldr	r5, [sp, #0]
 801dfb2:	4642      	mov	r2, r8
 801dfb4:	464b      	mov	r3, r9
 801dfb6:	4630      	mov	r0, r6
 801dfb8:	4639      	mov	r1, r7
 801dfba:	f7e2 fc67 	bl	800088c <__aeabi_ddiv>
 801dfbe:	f7e2 fdeb 	bl	8000b98 <__aeabi_d2iz>
 801dfc2:	9002      	str	r0, [sp, #8]
 801dfc4:	f7e2 face 	bl	8000564 <__aeabi_i2d>
 801dfc8:	4642      	mov	r2, r8
 801dfca:	464b      	mov	r3, r9
 801dfcc:	f7e2 fb34 	bl	8000638 <__aeabi_dmul>
 801dfd0:	4602      	mov	r2, r0
 801dfd2:	460b      	mov	r3, r1
 801dfd4:	4630      	mov	r0, r6
 801dfd6:	4639      	mov	r1, r7
 801dfd8:	f7e2 f976 	bl	80002c8 <__aeabi_dsub>
 801dfdc:	9e02      	ldr	r6, [sp, #8]
 801dfde:	9f01      	ldr	r7, [sp, #4]
 801dfe0:	3630      	adds	r6, #48	; 0x30
 801dfe2:	f805 6b01 	strb.w	r6, [r5], #1
 801dfe6:	9e00      	ldr	r6, [sp, #0]
 801dfe8:	1bae      	subs	r6, r5, r6
 801dfea:	42b7      	cmp	r7, r6
 801dfec:	4602      	mov	r2, r0
 801dfee:	460b      	mov	r3, r1
 801dff0:	d137      	bne.n	801e062 <_dtoa_r+0x722>
 801dff2:	f7e2 f96b 	bl	80002cc <__adddf3>
 801dff6:	4642      	mov	r2, r8
 801dff8:	464b      	mov	r3, r9
 801dffa:	4606      	mov	r6, r0
 801dffc:	460f      	mov	r7, r1
 801dffe:	f7e2 fdab 	bl	8000b58 <__aeabi_dcmpgt>
 801e002:	b9c8      	cbnz	r0, 801e038 <_dtoa_r+0x6f8>
 801e004:	4642      	mov	r2, r8
 801e006:	464b      	mov	r3, r9
 801e008:	4630      	mov	r0, r6
 801e00a:	4639      	mov	r1, r7
 801e00c:	f7e2 fd7c 	bl	8000b08 <__aeabi_dcmpeq>
 801e010:	b110      	cbz	r0, 801e018 <_dtoa_r+0x6d8>
 801e012:	9b02      	ldr	r3, [sp, #8]
 801e014:	07d9      	lsls	r1, r3, #31
 801e016:	d40f      	bmi.n	801e038 <_dtoa_r+0x6f8>
 801e018:	4620      	mov	r0, r4
 801e01a:	4659      	mov	r1, fp
 801e01c:	f001 f88e 	bl	801f13c <_Bfree>
 801e020:	2300      	movs	r3, #0
 801e022:	702b      	strb	r3, [r5, #0]
 801e024:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e026:	f10a 0001 	add.w	r0, sl, #1
 801e02a:	6018      	str	r0, [r3, #0]
 801e02c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e02e:	2b00      	cmp	r3, #0
 801e030:	f43f acd8 	beq.w	801d9e4 <_dtoa_r+0xa4>
 801e034:	601d      	str	r5, [r3, #0]
 801e036:	e4d5      	b.n	801d9e4 <_dtoa_r+0xa4>
 801e038:	f8cd a01c 	str.w	sl, [sp, #28]
 801e03c:	462b      	mov	r3, r5
 801e03e:	461d      	mov	r5, r3
 801e040:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801e044:	2a39      	cmp	r2, #57	; 0x39
 801e046:	d108      	bne.n	801e05a <_dtoa_r+0x71a>
 801e048:	9a00      	ldr	r2, [sp, #0]
 801e04a:	429a      	cmp	r2, r3
 801e04c:	d1f7      	bne.n	801e03e <_dtoa_r+0x6fe>
 801e04e:	9a07      	ldr	r2, [sp, #28]
 801e050:	9900      	ldr	r1, [sp, #0]
 801e052:	3201      	adds	r2, #1
 801e054:	9207      	str	r2, [sp, #28]
 801e056:	2230      	movs	r2, #48	; 0x30
 801e058:	700a      	strb	r2, [r1, #0]
 801e05a:	781a      	ldrb	r2, [r3, #0]
 801e05c:	3201      	adds	r2, #1
 801e05e:	701a      	strb	r2, [r3, #0]
 801e060:	e78c      	b.n	801df7c <_dtoa_r+0x63c>
 801e062:	4b7f      	ldr	r3, [pc, #508]	; (801e260 <_dtoa_r+0x920>)
 801e064:	2200      	movs	r2, #0
 801e066:	f7e2 fae7 	bl	8000638 <__aeabi_dmul>
 801e06a:	2200      	movs	r2, #0
 801e06c:	2300      	movs	r3, #0
 801e06e:	4606      	mov	r6, r0
 801e070:	460f      	mov	r7, r1
 801e072:	f7e2 fd49 	bl	8000b08 <__aeabi_dcmpeq>
 801e076:	2800      	cmp	r0, #0
 801e078:	d09b      	beq.n	801dfb2 <_dtoa_r+0x672>
 801e07a:	e7cd      	b.n	801e018 <_dtoa_r+0x6d8>
 801e07c:	9a08      	ldr	r2, [sp, #32]
 801e07e:	2a00      	cmp	r2, #0
 801e080:	f000 80c4 	beq.w	801e20c <_dtoa_r+0x8cc>
 801e084:	9a05      	ldr	r2, [sp, #20]
 801e086:	2a01      	cmp	r2, #1
 801e088:	f300 80a8 	bgt.w	801e1dc <_dtoa_r+0x89c>
 801e08c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e08e:	2a00      	cmp	r2, #0
 801e090:	f000 80a0 	beq.w	801e1d4 <_dtoa_r+0x894>
 801e094:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801e098:	9e06      	ldr	r6, [sp, #24]
 801e09a:	4645      	mov	r5, r8
 801e09c:	9a04      	ldr	r2, [sp, #16]
 801e09e:	2101      	movs	r1, #1
 801e0a0:	441a      	add	r2, r3
 801e0a2:	4620      	mov	r0, r4
 801e0a4:	4498      	add	r8, r3
 801e0a6:	9204      	str	r2, [sp, #16]
 801e0a8:	f001 f94e 	bl	801f348 <__i2b>
 801e0ac:	4607      	mov	r7, r0
 801e0ae:	2d00      	cmp	r5, #0
 801e0b0:	dd0b      	ble.n	801e0ca <_dtoa_r+0x78a>
 801e0b2:	9b04      	ldr	r3, [sp, #16]
 801e0b4:	2b00      	cmp	r3, #0
 801e0b6:	dd08      	ble.n	801e0ca <_dtoa_r+0x78a>
 801e0b8:	42ab      	cmp	r3, r5
 801e0ba:	9a04      	ldr	r2, [sp, #16]
 801e0bc:	bfa8      	it	ge
 801e0be:	462b      	movge	r3, r5
 801e0c0:	eba8 0803 	sub.w	r8, r8, r3
 801e0c4:	1aed      	subs	r5, r5, r3
 801e0c6:	1ad3      	subs	r3, r2, r3
 801e0c8:	9304      	str	r3, [sp, #16]
 801e0ca:	9b06      	ldr	r3, [sp, #24]
 801e0cc:	b1fb      	cbz	r3, 801e10e <_dtoa_r+0x7ce>
 801e0ce:	9b08      	ldr	r3, [sp, #32]
 801e0d0:	2b00      	cmp	r3, #0
 801e0d2:	f000 809f 	beq.w	801e214 <_dtoa_r+0x8d4>
 801e0d6:	2e00      	cmp	r6, #0
 801e0d8:	dd11      	ble.n	801e0fe <_dtoa_r+0x7be>
 801e0da:	4639      	mov	r1, r7
 801e0dc:	4632      	mov	r2, r6
 801e0de:	4620      	mov	r0, r4
 801e0e0:	f001 f9ee 	bl	801f4c0 <__pow5mult>
 801e0e4:	465a      	mov	r2, fp
 801e0e6:	4601      	mov	r1, r0
 801e0e8:	4607      	mov	r7, r0
 801e0ea:	4620      	mov	r0, r4
 801e0ec:	f001 f942 	bl	801f374 <__multiply>
 801e0f0:	4659      	mov	r1, fp
 801e0f2:	9007      	str	r0, [sp, #28]
 801e0f4:	4620      	mov	r0, r4
 801e0f6:	f001 f821 	bl	801f13c <_Bfree>
 801e0fa:	9b07      	ldr	r3, [sp, #28]
 801e0fc:	469b      	mov	fp, r3
 801e0fe:	9b06      	ldr	r3, [sp, #24]
 801e100:	1b9a      	subs	r2, r3, r6
 801e102:	d004      	beq.n	801e10e <_dtoa_r+0x7ce>
 801e104:	4659      	mov	r1, fp
 801e106:	4620      	mov	r0, r4
 801e108:	f001 f9da 	bl	801f4c0 <__pow5mult>
 801e10c:	4683      	mov	fp, r0
 801e10e:	2101      	movs	r1, #1
 801e110:	4620      	mov	r0, r4
 801e112:	f001 f919 	bl	801f348 <__i2b>
 801e116:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e118:	2b00      	cmp	r3, #0
 801e11a:	4606      	mov	r6, r0
 801e11c:	dd7c      	ble.n	801e218 <_dtoa_r+0x8d8>
 801e11e:	461a      	mov	r2, r3
 801e120:	4601      	mov	r1, r0
 801e122:	4620      	mov	r0, r4
 801e124:	f001 f9cc 	bl	801f4c0 <__pow5mult>
 801e128:	9b05      	ldr	r3, [sp, #20]
 801e12a:	2b01      	cmp	r3, #1
 801e12c:	4606      	mov	r6, r0
 801e12e:	dd76      	ble.n	801e21e <_dtoa_r+0x8de>
 801e130:	2300      	movs	r3, #0
 801e132:	9306      	str	r3, [sp, #24]
 801e134:	6933      	ldr	r3, [r6, #16]
 801e136:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801e13a:	6918      	ldr	r0, [r3, #16]
 801e13c:	f001 f8b4 	bl	801f2a8 <__hi0bits>
 801e140:	f1c0 0020 	rsb	r0, r0, #32
 801e144:	9b04      	ldr	r3, [sp, #16]
 801e146:	4418      	add	r0, r3
 801e148:	f010 001f 	ands.w	r0, r0, #31
 801e14c:	f000 8086 	beq.w	801e25c <_dtoa_r+0x91c>
 801e150:	f1c0 0320 	rsb	r3, r0, #32
 801e154:	2b04      	cmp	r3, #4
 801e156:	dd7f      	ble.n	801e258 <_dtoa_r+0x918>
 801e158:	f1c0 001c 	rsb	r0, r0, #28
 801e15c:	9b04      	ldr	r3, [sp, #16]
 801e15e:	4403      	add	r3, r0
 801e160:	4480      	add	r8, r0
 801e162:	4405      	add	r5, r0
 801e164:	9304      	str	r3, [sp, #16]
 801e166:	f1b8 0f00 	cmp.w	r8, #0
 801e16a:	dd05      	ble.n	801e178 <_dtoa_r+0x838>
 801e16c:	4659      	mov	r1, fp
 801e16e:	4642      	mov	r2, r8
 801e170:	4620      	mov	r0, r4
 801e172:	f001 f9ff 	bl	801f574 <__lshift>
 801e176:	4683      	mov	fp, r0
 801e178:	9b04      	ldr	r3, [sp, #16]
 801e17a:	2b00      	cmp	r3, #0
 801e17c:	dd05      	ble.n	801e18a <_dtoa_r+0x84a>
 801e17e:	4631      	mov	r1, r6
 801e180:	461a      	mov	r2, r3
 801e182:	4620      	mov	r0, r4
 801e184:	f001 f9f6 	bl	801f574 <__lshift>
 801e188:	4606      	mov	r6, r0
 801e18a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e18c:	2b00      	cmp	r3, #0
 801e18e:	d069      	beq.n	801e264 <_dtoa_r+0x924>
 801e190:	4631      	mov	r1, r6
 801e192:	4658      	mov	r0, fp
 801e194:	f001 fa5a 	bl	801f64c <__mcmp>
 801e198:	2800      	cmp	r0, #0
 801e19a:	da63      	bge.n	801e264 <_dtoa_r+0x924>
 801e19c:	2300      	movs	r3, #0
 801e19e:	4659      	mov	r1, fp
 801e1a0:	220a      	movs	r2, #10
 801e1a2:	4620      	mov	r0, r4
 801e1a4:	f000 ffec 	bl	801f180 <__multadd>
 801e1a8:	9b08      	ldr	r3, [sp, #32]
 801e1aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e1ae:	4683      	mov	fp, r0
 801e1b0:	2b00      	cmp	r3, #0
 801e1b2:	f000 818f 	beq.w	801e4d4 <_dtoa_r+0xb94>
 801e1b6:	4639      	mov	r1, r7
 801e1b8:	2300      	movs	r3, #0
 801e1ba:	220a      	movs	r2, #10
 801e1bc:	4620      	mov	r0, r4
 801e1be:	f000 ffdf 	bl	801f180 <__multadd>
 801e1c2:	f1b9 0f00 	cmp.w	r9, #0
 801e1c6:	4607      	mov	r7, r0
 801e1c8:	f300 808e 	bgt.w	801e2e8 <_dtoa_r+0x9a8>
 801e1cc:	9b05      	ldr	r3, [sp, #20]
 801e1ce:	2b02      	cmp	r3, #2
 801e1d0:	dc50      	bgt.n	801e274 <_dtoa_r+0x934>
 801e1d2:	e089      	b.n	801e2e8 <_dtoa_r+0x9a8>
 801e1d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e1d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801e1da:	e75d      	b.n	801e098 <_dtoa_r+0x758>
 801e1dc:	9b01      	ldr	r3, [sp, #4]
 801e1de:	1e5e      	subs	r6, r3, #1
 801e1e0:	9b06      	ldr	r3, [sp, #24]
 801e1e2:	42b3      	cmp	r3, r6
 801e1e4:	bfbf      	itttt	lt
 801e1e6:	9b06      	ldrlt	r3, [sp, #24]
 801e1e8:	9606      	strlt	r6, [sp, #24]
 801e1ea:	1af2      	sublt	r2, r6, r3
 801e1ec:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801e1ee:	bfb6      	itet	lt
 801e1f0:	189b      	addlt	r3, r3, r2
 801e1f2:	1b9e      	subge	r6, r3, r6
 801e1f4:	930d      	strlt	r3, [sp, #52]	; 0x34
 801e1f6:	9b01      	ldr	r3, [sp, #4]
 801e1f8:	bfb8      	it	lt
 801e1fa:	2600      	movlt	r6, #0
 801e1fc:	2b00      	cmp	r3, #0
 801e1fe:	bfb5      	itete	lt
 801e200:	eba8 0503 	sublt.w	r5, r8, r3
 801e204:	9b01      	ldrge	r3, [sp, #4]
 801e206:	2300      	movlt	r3, #0
 801e208:	4645      	movge	r5, r8
 801e20a:	e747      	b.n	801e09c <_dtoa_r+0x75c>
 801e20c:	9e06      	ldr	r6, [sp, #24]
 801e20e:	9f08      	ldr	r7, [sp, #32]
 801e210:	4645      	mov	r5, r8
 801e212:	e74c      	b.n	801e0ae <_dtoa_r+0x76e>
 801e214:	9a06      	ldr	r2, [sp, #24]
 801e216:	e775      	b.n	801e104 <_dtoa_r+0x7c4>
 801e218:	9b05      	ldr	r3, [sp, #20]
 801e21a:	2b01      	cmp	r3, #1
 801e21c:	dc18      	bgt.n	801e250 <_dtoa_r+0x910>
 801e21e:	9b02      	ldr	r3, [sp, #8]
 801e220:	b9b3      	cbnz	r3, 801e250 <_dtoa_r+0x910>
 801e222:	9b03      	ldr	r3, [sp, #12]
 801e224:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801e228:	b9a3      	cbnz	r3, 801e254 <_dtoa_r+0x914>
 801e22a:	9b03      	ldr	r3, [sp, #12]
 801e22c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e230:	0d1b      	lsrs	r3, r3, #20
 801e232:	051b      	lsls	r3, r3, #20
 801e234:	b12b      	cbz	r3, 801e242 <_dtoa_r+0x902>
 801e236:	9b04      	ldr	r3, [sp, #16]
 801e238:	3301      	adds	r3, #1
 801e23a:	9304      	str	r3, [sp, #16]
 801e23c:	f108 0801 	add.w	r8, r8, #1
 801e240:	2301      	movs	r3, #1
 801e242:	9306      	str	r3, [sp, #24]
 801e244:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e246:	2b00      	cmp	r3, #0
 801e248:	f47f af74 	bne.w	801e134 <_dtoa_r+0x7f4>
 801e24c:	2001      	movs	r0, #1
 801e24e:	e779      	b.n	801e144 <_dtoa_r+0x804>
 801e250:	2300      	movs	r3, #0
 801e252:	e7f6      	b.n	801e242 <_dtoa_r+0x902>
 801e254:	9b02      	ldr	r3, [sp, #8]
 801e256:	e7f4      	b.n	801e242 <_dtoa_r+0x902>
 801e258:	d085      	beq.n	801e166 <_dtoa_r+0x826>
 801e25a:	4618      	mov	r0, r3
 801e25c:	301c      	adds	r0, #28
 801e25e:	e77d      	b.n	801e15c <_dtoa_r+0x81c>
 801e260:	40240000 	.word	0x40240000
 801e264:	9b01      	ldr	r3, [sp, #4]
 801e266:	2b00      	cmp	r3, #0
 801e268:	dc38      	bgt.n	801e2dc <_dtoa_r+0x99c>
 801e26a:	9b05      	ldr	r3, [sp, #20]
 801e26c:	2b02      	cmp	r3, #2
 801e26e:	dd35      	ble.n	801e2dc <_dtoa_r+0x99c>
 801e270:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801e274:	f1b9 0f00 	cmp.w	r9, #0
 801e278:	d10d      	bne.n	801e296 <_dtoa_r+0x956>
 801e27a:	4631      	mov	r1, r6
 801e27c:	464b      	mov	r3, r9
 801e27e:	2205      	movs	r2, #5
 801e280:	4620      	mov	r0, r4
 801e282:	f000 ff7d 	bl	801f180 <__multadd>
 801e286:	4601      	mov	r1, r0
 801e288:	4606      	mov	r6, r0
 801e28a:	4658      	mov	r0, fp
 801e28c:	f001 f9de 	bl	801f64c <__mcmp>
 801e290:	2800      	cmp	r0, #0
 801e292:	f73f adbd 	bgt.w	801de10 <_dtoa_r+0x4d0>
 801e296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e298:	9d00      	ldr	r5, [sp, #0]
 801e29a:	ea6f 0a03 	mvn.w	sl, r3
 801e29e:	f04f 0800 	mov.w	r8, #0
 801e2a2:	4631      	mov	r1, r6
 801e2a4:	4620      	mov	r0, r4
 801e2a6:	f000 ff49 	bl	801f13c <_Bfree>
 801e2aa:	2f00      	cmp	r7, #0
 801e2ac:	f43f aeb4 	beq.w	801e018 <_dtoa_r+0x6d8>
 801e2b0:	f1b8 0f00 	cmp.w	r8, #0
 801e2b4:	d005      	beq.n	801e2c2 <_dtoa_r+0x982>
 801e2b6:	45b8      	cmp	r8, r7
 801e2b8:	d003      	beq.n	801e2c2 <_dtoa_r+0x982>
 801e2ba:	4641      	mov	r1, r8
 801e2bc:	4620      	mov	r0, r4
 801e2be:	f000 ff3d 	bl	801f13c <_Bfree>
 801e2c2:	4639      	mov	r1, r7
 801e2c4:	4620      	mov	r0, r4
 801e2c6:	f000 ff39 	bl	801f13c <_Bfree>
 801e2ca:	e6a5      	b.n	801e018 <_dtoa_r+0x6d8>
 801e2cc:	2600      	movs	r6, #0
 801e2ce:	4637      	mov	r7, r6
 801e2d0:	e7e1      	b.n	801e296 <_dtoa_r+0x956>
 801e2d2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801e2d4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801e2d8:	4637      	mov	r7, r6
 801e2da:	e599      	b.n	801de10 <_dtoa_r+0x4d0>
 801e2dc:	9b08      	ldr	r3, [sp, #32]
 801e2de:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801e2e2:	2b00      	cmp	r3, #0
 801e2e4:	f000 80fd 	beq.w	801e4e2 <_dtoa_r+0xba2>
 801e2e8:	2d00      	cmp	r5, #0
 801e2ea:	dd05      	ble.n	801e2f8 <_dtoa_r+0x9b8>
 801e2ec:	4639      	mov	r1, r7
 801e2ee:	462a      	mov	r2, r5
 801e2f0:	4620      	mov	r0, r4
 801e2f2:	f001 f93f 	bl	801f574 <__lshift>
 801e2f6:	4607      	mov	r7, r0
 801e2f8:	9b06      	ldr	r3, [sp, #24]
 801e2fa:	2b00      	cmp	r3, #0
 801e2fc:	d05c      	beq.n	801e3b8 <_dtoa_r+0xa78>
 801e2fe:	6879      	ldr	r1, [r7, #4]
 801e300:	4620      	mov	r0, r4
 801e302:	f000 fedb 	bl	801f0bc <_Balloc>
 801e306:	4605      	mov	r5, r0
 801e308:	b928      	cbnz	r0, 801e316 <_dtoa_r+0x9d6>
 801e30a:	4b80      	ldr	r3, [pc, #512]	; (801e50c <_dtoa_r+0xbcc>)
 801e30c:	4602      	mov	r2, r0
 801e30e:	f240 21ea 	movw	r1, #746	; 0x2ea
 801e312:	f7ff bb2e 	b.w	801d972 <_dtoa_r+0x32>
 801e316:	693a      	ldr	r2, [r7, #16]
 801e318:	3202      	adds	r2, #2
 801e31a:	0092      	lsls	r2, r2, #2
 801e31c:	f107 010c 	add.w	r1, r7, #12
 801e320:	300c      	adds	r0, #12
 801e322:	f7fc fb81 	bl	801aa28 <memcpy>
 801e326:	2201      	movs	r2, #1
 801e328:	4629      	mov	r1, r5
 801e32a:	4620      	mov	r0, r4
 801e32c:	f001 f922 	bl	801f574 <__lshift>
 801e330:	9b00      	ldr	r3, [sp, #0]
 801e332:	3301      	adds	r3, #1
 801e334:	9301      	str	r3, [sp, #4]
 801e336:	9b00      	ldr	r3, [sp, #0]
 801e338:	444b      	add	r3, r9
 801e33a:	9307      	str	r3, [sp, #28]
 801e33c:	9b02      	ldr	r3, [sp, #8]
 801e33e:	f003 0301 	and.w	r3, r3, #1
 801e342:	46b8      	mov	r8, r7
 801e344:	9306      	str	r3, [sp, #24]
 801e346:	4607      	mov	r7, r0
 801e348:	9b01      	ldr	r3, [sp, #4]
 801e34a:	4631      	mov	r1, r6
 801e34c:	3b01      	subs	r3, #1
 801e34e:	4658      	mov	r0, fp
 801e350:	9302      	str	r3, [sp, #8]
 801e352:	f7ff fa69 	bl	801d828 <quorem>
 801e356:	4603      	mov	r3, r0
 801e358:	3330      	adds	r3, #48	; 0x30
 801e35a:	9004      	str	r0, [sp, #16]
 801e35c:	4641      	mov	r1, r8
 801e35e:	4658      	mov	r0, fp
 801e360:	9308      	str	r3, [sp, #32]
 801e362:	f001 f973 	bl	801f64c <__mcmp>
 801e366:	463a      	mov	r2, r7
 801e368:	4681      	mov	r9, r0
 801e36a:	4631      	mov	r1, r6
 801e36c:	4620      	mov	r0, r4
 801e36e:	f001 f989 	bl	801f684 <__mdiff>
 801e372:	68c2      	ldr	r2, [r0, #12]
 801e374:	9b08      	ldr	r3, [sp, #32]
 801e376:	4605      	mov	r5, r0
 801e378:	bb02      	cbnz	r2, 801e3bc <_dtoa_r+0xa7c>
 801e37a:	4601      	mov	r1, r0
 801e37c:	4658      	mov	r0, fp
 801e37e:	f001 f965 	bl	801f64c <__mcmp>
 801e382:	9b08      	ldr	r3, [sp, #32]
 801e384:	4602      	mov	r2, r0
 801e386:	4629      	mov	r1, r5
 801e388:	4620      	mov	r0, r4
 801e38a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801e38e:	f000 fed5 	bl	801f13c <_Bfree>
 801e392:	9b05      	ldr	r3, [sp, #20]
 801e394:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e396:	9d01      	ldr	r5, [sp, #4]
 801e398:	ea43 0102 	orr.w	r1, r3, r2
 801e39c:	9b06      	ldr	r3, [sp, #24]
 801e39e:	430b      	orrs	r3, r1
 801e3a0:	9b08      	ldr	r3, [sp, #32]
 801e3a2:	d10d      	bne.n	801e3c0 <_dtoa_r+0xa80>
 801e3a4:	2b39      	cmp	r3, #57	; 0x39
 801e3a6:	d029      	beq.n	801e3fc <_dtoa_r+0xabc>
 801e3a8:	f1b9 0f00 	cmp.w	r9, #0
 801e3ac:	dd01      	ble.n	801e3b2 <_dtoa_r+0xa72>
 801e3ae:	9b04      	ldr	r3, [sp, #16]
 801e3b0:	3331      	adds	r3, #49	; 0x31
 801e3b2:	9a02      	ldr	r2, [sp, #8]
 801e3b4:	7013      	strb	r3, [r2, #0]
 801e3b6:	e774      	b.n	801e2a2 <_dtoa_r+0x962>
 801e3b8:	4638      	mov	r0, r7
 801e3ba:	e7b9      	b.n	801e330 <_dtoa_r+0x9f0>
 801e3bc:	2201      	movs	r2, #1
 801e3be:	e7e2      	b.n	801e386 <_dtoa_r+0xa46>
 801e3c0:	f1b9 0f00 	cmp.w	r9, #0
 801e3c4:	db06      	blt.n	801e3d4 <_dtoa_r+0xa94>
 801e3c6:	9905      	ldr	r1, [sp, #20]
 801e3c8:	ea41 0909 	orr.w	r9, r1, r9
 801e3cc:	9906      	ldr	r1, [sp, #24]
 801e3ce:	ea59 0101 	orrs.w	r1, r9, r1
 801e3d2:	d120      	bne.n	801e416 <_dtoa_r+0xad6>
 801e3d4:	2a00      	cmp	r2, #0
 801e3d6:	ddec      	ble.n	801e3b2 <_dtoa_r+0xa72>
 801e3d8:	4659      	mov	r1, fp
 801e3da:	2201      	movs	r2, #1
 801e3dc:	4620      	mov	r0, r4
 801e3de:	9301      	str	r3, [sp, #4]
 801e3e0:	f001 f8c8 	bl	801f574 <__lshift>
 801e3e4:	4631      	mov	r1, r6
 801e3e6:	4683      	mov	fp, r0
 801e3e8:	f001 f930 	bl	801f64c <__mcmp>
 801e3ec:	2800      	cmp	r0, #0
 801e3ee:	9b01      	ldr	r3, [sp, #4]
 801e3f0:	dc02      	bgt.n	801e3f8 <_dtoa_r+0xab8>
 801e3f2:	d1de      	bne.n	801e3b2 <_dtoa_r+0xa72>
 801e3f4:	07da      	lsls	r2, r3, #31
 801e3f6:	d5dc      	bpl.n	801e3b2 <_dtoa_r+0xa72>
 801e3f8:	2b39      	cmp	r3, #57	; 0x39
 801e3fa:	d1d8      	bne.n	801e3ae <_dtoa_r+0xa6e>
 801e3fc:	9a02      	ldr	r2, [sp, #8]
 801e3fe:	2339      	movs	r3, #57	; 0x39
 801e400:	7013      	strb	r3, [r2, #0]
 801e402:	462b      	mov	r3, r5
 801e404:	461d      	mov	r5, r3
 801e406:	3b01      	subs	r3, #1
 801e408:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801e40c:	2a39      	cmp	r2, #57	; 0x39
 801e40e:	d050      	beq.n	801e4b2 <_dtoa_r+0xb72>
 801e410:	3201      	adds	r2, #1
 801e412:	701a      	strb	r2, [r3, #0]
 801e414:	e745      	b.n	801e2a2 <_dtoa_r+0x962>
 801e416:	2a00      	cmp	r2, #0
 801e418:	dd03      	ble.n	801e422 <_dtoa_r+0xae2>
 801e41a:	2b39      	cmp	r3, #57	; 0x39
 801e41c:	d0ee      	beq.n	801e3fc <_dtoa_r+0xabc>
 801e41e:	3301      	adds	r3, #1
 801e420:	e7c7      	b.n	801e3b2 <_dtoa_r+0xa72>
 801e422:	9a01      	ldr	r2, [sp, #4]
 801e424:	9907      	ldr	r1, [sp, #28]
 801e426:	f802 3c01 	strb.w	r3, [r2, #-1]
 801e42a:	428a      	cmp	r2, r1
 801e42c:	d02a      	beq.n	801e484 <_dtoa_r+0xb44>
 801e42e:	4659      	mov	r1, fp
 801e430:	2300      	movs	r3, #0
 801e432:	220a      	movs	r2, #10
 801e434:	4620      	mov	r0, r4
 801e436:	f000 fea3 	bl	801f180 <__multadd>
 801e43a:	45b8      	cmp	r8, r7
 801e43c:	4683      	mov	fp, r0
 801e43e:	f04f 0300 	mov.w	r3, #0
 801e442:	f04f 020a 	mov.w	r2, #10
 801e446:	4641      	mov	r1, r8
 801e448:	4620      	mov	r0, r4
 801e44a:	d107      	bne.n	801e45c <_dtoa_r+0xb1c>
 801e44c:	f000 fe98 	bl	801f180 <__multadd>
 801e450:	4680      	mov	r8, r0
 801e452:	4607      	mov	r7, r0
 801e454:	9b01      	ldr	r3, [sp, #4]
 801e456:	3301      	adds	r3, #1
 801e458:	9301      	str	r3, [sp, #4]
 801e45a:	e775      	b.n	801e348 <_dtoa_r+0xa08>
 801e45c:	f000 fe90 	bl	801f180 <__multadd>
 801e460:	4639      	mov	r1, r7
 801e462:	4680      	mov	r8, r0
 801e464:	2300      	movs	r3, #0
 801e466:	220a      	movs	r2, #10
 801e468:	4620      	mov	r0, r4
 801e46a:	f000 fe89 	bl	801f180 <__multadd>
 801e46e:	4607      	mov	r7, r0
 801e470:	e7f0      	b.n	801e454 <_dtoa_r+0xb14>
 801e472:	f1b9 0f00 	cmp.w	r9, #0
 801e476:	9a00      	ldr	r2, [sp, #0]
 801e478:	bfcc      	ite	gt
 801e47a:	464d      	movgt	r5, r9
 801e47c:	2501      	movle	r5, #1
 801e47e:	4415      	add	r5, r2
 801e480:	f04f 0800 	mov.w	r8, #0
 801e484:	4659      	mov	r1, fp
 801e486:	2201      	movs	r2, #1
 801e488:	4620      	mov	r0, r4
 801e48a:	9301      	str	r3, [sp, #4]
 801e48c:	f001 f872 	bl	801f574 <__lshift>
 801e490:	4631      	mov	r1, r6
 801e492:	4683      	mov	fp, r0
 801e494:	f001 f8da 	bl	801f64c <__mcmp>
 801e498:	2800      	cmp	r0, #0
 801e49a:	dcb2      	bgt.n	801e402 <_dtoa_r+0xac2>
 801e49c:	d102      	bne.n	801e4a4 <_dtoa_r+0xb64>
 801e49e:	9b01      	ldr	r3, [sp, #4]
 801e4a0:	07db      	lsls	r3, r3, #31
 801e4a2:	d4ae      	bmi.n	801e402 <_dtoa_r+0xac2>
 801e4a4:	462b      	mov	r3, r5
 801e4a6:	461d      	mov	r5, r3
 801e4a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801e4ac:	2a30      	cmp	r2, #48	; 0x30
 801e4ae:	d0fa      	beq.n	801e4a6 <_dtoa_r+0xb66>
 801e4b0:	e6f7      	b.n	801e2a2 <_dtoa_r+0x962>
 801e4b2:	9a00      	ldr	r2, [sp, #0]
 801e4b4:	429a      	cmp	r2, r3
 801e4b6:	d1a5      	bne.n	801e404 <_dtoa_r+0xac4>
 801e4b8:	f10a 0a01 	add.w	sl, sl, #1
 801e4bc:	2331      	movs	r3, #49	; 0x31
 801e4be:	e779      	b.n	801e3b4 <_dtoa_r+0xa74>
 801e4c0:	4b13      	ldr	r3, [pc, #76]	; (801e510 <_dtoa_r+0xbd0>)
 801e4c2:	f7ff baaf 	b.w	801da24 <_dtoa_r+0xe4>
 801e4c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e4c8:	2b00      	cmp	r3, #0
 801e4ca:	f47f aa86 	bne.w	801d9da <_dtoa_r+0x9a>
 801e4ce:	4b11      	ldr	r3, [pc, #68]	; (801e514 <_dtoa_r+0xbd4>)
 801e4d0:	f7ff baa8 	b.w	801da24 <_dtoa_r+0xe4>
 801e4d4:	f1b9 0f00 	cmp.w	r9, #0
 801e4d8:	dc03      	bgt.n	801e4e2 <_dtoa_r+0xba2>
 801e4da:	9b05      	ldr	r3, [sp, #20]
 801e4dc:	2b02      	cmp	r3, #2
 801e4de:	f73f aec9 	bgt.w	801e274 <_dtoa_r+0x934>
 801e4e2:	9d00      	ldr	r5, [sp, #0]
 801e4e4:	4631      	mov	r1, r6
 801e4e6:	4658      	mov	r0, fp
 801e4e8:	f7ff f99e 	bl	801d828 <quorem>
 801e4ec:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801e4f0:	f805 3b01 	strb.w	r3, [r5], #1
 801e4f4:	9a00      	ldr	r2, [sp, #0]
 801e4f6:	1aaa      	subs	r2, r5, r2
 801e4f8:	4591      	cmp	r9, r2
 801e4fa:	ddba      	ble.n	801e472 <_dtoa_r+0xb32>
 801e4fc:	4659      	mov	r1, fp
 801e4fe:	2300      	movs	r3, #0
 801e500:	220a      	movs	r2, #10
 801e502:	4620      	mov	r0, r4
 801e504:	f000 fe3c 	bl	801f180 <__multadd>
 801e508:	4683      	mov	fp, r0
 801e50a:	e7eb      	b.n	801e4e4 <_dtoa_r+0xba4>
 801e50c:	08022fa5 	.word	0x08022fa5
 801e510:	080231a9 	.word	0x080231a9
 801e514:	08022f39 	.word	0x08022f39

0801e518 <__sflush_r>:
 801e518:	898a      	ldrh	r2, [r1, #12]
 801e51a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e51e:	4605      	mov	r5, r0
 801e520:	0710      	lsls	r0, r2, #28
 801e522:	460c      	mov	r4, r1
 801e524:	d458      	bmi.n	801e5d8 <__sflush_r+0xc0>
 801e526:	684b      	ldr	r3, [r1, #4]
 801e528:	2b00      	cmp	r3, #0
 801e52a:	dc05      	bgt.n	801e538 <__sflush_r+0x20>
 801e52c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801e52e:	2b00      	cmp	r3, #0
 801e530:	dc02      	bgt.n	801e538 <__sflush_r+0x20>
 801e532:	2000      	movs	r0, #0
 801e534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e538:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e53a:	2e00      	cmp	r6, #0
 801e53c:	d0f9      	beq.n	801e532 <__sflush_r+0x1a>
 801e53e:	2300      	movs	r3, #0
 801e540:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801e544:	682f      	ldr	r7, [r5, #0]
 801e546:	602b      	str	r3, [r5, #0]
 801e548:	d032      	beq.n	801e5b0 <__sflush_r+0x98>
 801e54a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801e54c:	89a3      	ldrh	r3, [r4, #12]
 801e54e:	075a      	lsls	r2, r3, #29
 801e550:	d505      	bpl.n	801e55e <__sflush_r+0x46>
 801e552:	6863      	ldr	r3, [r4, #4]
 801e554:	1ac0      	subs	r0, r0, r3
 801e556:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e558:	b10b      	cbz	r3, 801e55e <__sflush_r+0x46>
 801e55a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e55c:	1ac0      	subs	r0, r0, r3
 801e55e:	2300      	movs	r3, #0
 801e560:	4602      	mov	r2, r0
 801e562:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e564:	6a21      	ldr	r1, [r4, #32]
 801e566:	4628      	mov	r0, r5
 801e568:	47b0      	blx	r6
 801e56a:	1c43      	adds	r3, r0, #1
 801e56c:	89a3      	ldrh	r3, [r4, #12]
 801e56e:	d106      	bne.n	801e57e <__sflush_r+0x66>
 801e570:	6829      	ldr	r1, [r5, #0]
 801e572:	291d      	cmp	r1, #29
 801e574:	d82c      	bhi.n	801e5d0 <__sflush_r+0xb8>
 801e576:	4a2a      	ldr	r2, [pc, #168]	; (801e620 <__sflush_r+0x108>)
 801e578:	40ca      	lsrs	r2, r1
 801e57a:	07d6      	lsls	r6, r2, #31
 801e57c:	d528      	bpl.n	801e5d0 <__sflush_r+0xb8>
 801e57e:	2200      	movs	r2, #0
 801e580:	6062      	str	r2, [r4, #4]
 801e582:	04d9      	lsls	r1, r3, #19
 801e584:	6922      	ldr	r2, [r4, #16]
 801e586:	6022      	str	r2, [r4, #0]
 801e588:	d504      	bpl.n	801e594 <__sflush_r+0x7c>
 801e58a:	1c42      	adds	r2, r0, #1
 801e58c:	d101      	bne.n	801e592 <__sflush_r+0x7a>
 801e58e:	682b      	ldr	r3, [r5, #0]
 801e590:	b903      	cbnz	r3, 801e594 <__sflush_r+0x7c>
 801e592:	6560      	str	r0, [r4, #84]	; 0x54
 801e594:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e596:	602f      	str	r7, [r5, #0]
 801e598:	2900      	cmp	r1, #0
 801e59a:	d0ca      	beq.n	801e532 <__sflush_r+0x1a>
 801e59c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e5a0:	4299      	cmp	r1, r3
 801e5a2:	d002      	beq.n	801e5aa <__sflush_r+0x92>
 801e5a4:	4628      	mov	r0, r5
 801e5a6:	f7fc fced 	bl	801af84 <_free_r>
 801e5aa:	2000      	movs	r0, #0
 801e5ac:	6360      	str	r0, [r4, #52]	; 0x34
 801e5ae:	e7c1      	b.n	801e534 <__sflush_r+0x1c>
 801e5b0:	6a21      	ldr	r1, [r4, #32]
 801e5b2:	2301      	movs	r3, #1
 801e5b4:	4628      	mov	r0, r5
 801e5b6:	47b0      	blx	r6
 801e5b8:	1c41      	adds	r1, r0, #1
 801e5ba:	d1c7      	bne.n	801e54c <__sflush_r+0x34>
 801e5bc:	682b      	ldr	r3, [r5, #0]
 801e5be:	2b00      	cmp	r3, #0
 801e5c0:	d0c4      	beq.n	801e54c <__sflush_r+0x34>
 801e5c2:	2b1d      	cmp	r3, #29
 801e5c4:	d001      	beq.n	801e5ca <__sflush_r+0xb2>
 801e5c6:	2b16      	cmp	r3, #22
 801e5c8:	d101      	bne.n	801e5ce <__sflush_r+0xb6>
 801e5ca:	602f      	str	r7, [r5, #0]
 801e5cc:	e7b1      	b.n	801e532 <__sflush_r+0x1a>
 801e5ce:	89a3      	ldrh	r3, [r4, #12]
 801e5d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e5d4:	81a3      	strh	r3, [r4, #12]
 801e5d6:	e7ad      	b.n	801e534 <__sflush_r+0x1c>
 801e5d8:	690f      	ldr	r7, [r1, #16]
 801e5da:	2f00      	cmp	r7, #0
 801e5dc:	d0a9      	beq.n	801e532 <__sflush_r+0x1a>
 801e5de:	0793      	lsls	r3, r2, #30
 801e5e0:	680e      	ldr	r6, [r1, #0]
 801e5e2:	bf08      	it	eq
 801e5e4:	694b      	ldreq	r3, [r1, #20]
 801e5e6:	600f      	str	r7, [r1, #0]
 801e5e8:	bf18      	it	ne
 801e5ea:	2300      	movne	r3, #0
 801e5ec:	eba6 0807 	sub.w	r8, r6, r7
 801e5f0:	608b      	str	r3, [r1, #8]
 801e5f2:	f1b8 0f00 	cmp.w	r8, #0
 801e5f6:	dd9c      	ble.n	801e532 <__sflush_r+0x1a>
 801e5f8:	6a21      	ldr	r1, [r4, #32]
 801e5fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801e5fc:	4643      	mov	r3, r8
 801e5fe:	463a      	mov	r2, r7
 801e600:	4628      	mov	r0, r5
 801e602:	47b0      	blx	r6
 801e604:	2800      	cmp	r0, #0
 801e606:	dc06      	bgt.n	801e616 <__sflush_r+0xfe>
 801e608:	89a3      	ldrh	r3, [r4, #12]
 801e60a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e60e:	81a3      	strh	r3, [r4, #12]
 801e610:	f04f 30ff 	mov.w	r0, #4294967295
 801e614:	e78e      	b.n	801e534 <__sflush_r+0x1c>
 801e616:	4407      	add	r7, r0
 801e618:	eba8 0800 	sub.w	r8, r8, r0
 801e61c:	e7e9      	b.n	801e5f2 <__sflush_r+0xda>
 801e61e:	bf00      	nop
 801e620:	20400001 	.word	0x20400001

0801e624 <_fflush_r>:
 801e624:	b538      	push	{r3, r4, r5, lr}
 801e626:	690b      	ldr	r3, [r1, #16]
 801e628:	4605      	mov	r5, r0
 801e62a:	460c      	mov	r4, r1
 801e62c:	b913      	cbnz	r3, 801e634 <_fflush_r+0x10>
 801e62e:	2500      	movs	r5, #0
 801e630:	4628      	mov	r0, r5
 801e632:	bd38      	pop	{r3, r4, r5, pc}
 801e634:	b118      	cbz	r0, 801e63e <_fflush_r+0x1a>
 801e636:	6983      	ldr	r3, [r0, #24]
 801e638:	b90b      	cbnz	r3, 801e63e <_fflush_r+0x1a>
 801e63a:	f7fc f801 	bl	801a640 <__sinit>
 801e63e:	4b14      	ldr	r3, [pc, #80]	; (801e690 <_fflush_r+0x6c>)
 801e640:	429c      	cmp	r4, r3
 801e642:	d11b      	bne.n	801e67c <_fflush_r+0x58>
 801e644:	686c      	ldr	r4, [r5, #4]
 801e646:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e64a:	2b00      	cmp	r3, #0
 801e64c:	d0ef      	beq.n	801e62e <_fflush_r+0xa>
 801e64e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801e650:	07d0      	lsls	r0, r2, #31
 801e652:	d404      	bmi.n	801e65e <_fflush_r+0x3a>
 801e654:	0599      	lsls	r1, r3, #22
 801e656:	d402      	bmi.n	801e65e <_fflush_r+0x3a>
 801e658:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e65a:	f7fc f9d1 	bl	801aa00 <__retarget_lock_acquire_recursive>
 801e65e:	4628      	mov	r0, r5
 801e660:	4621      	mov	r1, r4
 801e662:	f7ff ff59 	bl	801e518 <__sflush_r>
 801e666:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e668:	07da      	lsls	r2, r3, #31
 801e66a:	4605      	mov	r5, r0
 801e66c:	d4e0      	bmi.n	801e630 <_fflush_r+0xc>
 801e66e:	89a3      	ldrh	r3, [r4, #12]
 801e670:	059b      	lsls	r3, r3, #22
 801e672:	d4dd      	bmi.n	801e630 <_fflush_r+0xc>
 801e674:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e676:	f7fc f9c5 	bl	801aa04 <__retarget_lock_release_recursive>
 801e67a:	e7d9      	b.n	801e630 <_fflush_r+0xc>
 801e67c:	4b05      	ldr	r3, [pc, #20]	; (801e694 <_fflush_r+0x70>)
 801e67e:	429c      	cmp	r4, r3
 801e680:	d101      	bne.n	801e686 <_fflush_r+0x62>
 801e682:	68ac      	ldr	r4, [r5, #8]
 801e684:	e7df      	b.n	801e646 <_fflush_r+0x22>
 801e686:	4b04      	ldr	r3, [pc, #16]	; (801e698 <_fflush_r+0x74>)
 801e688:	429c      	cmp	r4, r3
 801e68a:	bf08      	it	eq
 801e68c:	68ec      	ldreq	r4, [r5, #12]
 801e68e:	e7da      	b.n	801e646 <_fflush_r+0x22>
 801e690:	08022c5c 	.word	0x08022c5c
 801e694:	08022c7c 	.word	0x08022c7c
 801e698:	08022c3c 	.word	0x08022c3c

0801e69c <fiprintf>:
 801e69c:	b40e      	push	{r1, r2, r3}
 801e69e:	b503      	push	{r0, r1, lr}
 801e6a0:	4601      	mov	r1, r0
 801e6a2:	ab03      	add	r3, sp, #12
 801e6a4:	4805      	ldr	r0, [pc, #20]	; (801e6bc <fiprintf+0x20>)
 801e6a6:	f853 2b04 	ldr.w	r2, [r3], #4
 801e6aa:	6800      	ldr	r0, [r0, #0]
 801e6ac:	9301      	str	r3, [sp, #4]
 801e6ae:	f001 fd4d 	bl	802014c <_vfiprintf_r>
 801e6b2:	b002      	add	sp, #8
 801e6b4:	f85d eb04 	ldr.w	lr, [sp], #4
 801e6b8:	b003      	add	sp, #12
 801e6ba:	4770      	bx	lr
 801e6bc:	200000f8 	.word	0x200000f8

0801e6c0 <rshift>:
 801e6c0:	6903      	ldr	r3, [r0, #16]
 801e6c2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801e6c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e6ca:	ea4f 1261 	mov.w	r2, r1, asr #5
 801e6ce:	f100 0414 	add.w	r4, r0, #20
 801e6d2:	dd45      	ble.n	801e760 <rshift+0xa0>
 801e6d4:	f011 011f 	ands.w	r1, r1, #31
 801e6d8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801e6dc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801e6e0:	d10c      	bne.n	801e6fc <rshift+0x3c>
 801e6e2:	f100 0710 	add.w	r7, r0, #16
 801e6e6:	4629      	mov	r1, r5
 801e6e8:	42b1      	cmp	r1, r6
 801e6ea:	d334      	bcc.n	801e756 <rshift+0x96>
 801e6ec:	1a9b      	subs	r3, r3, r2
 801e6ee:	009b      	lsls	r3, r3, #2
 801e6f0:	1eea      	subs	r2, r5, #3
 801e6f2:	4296      	cmp	r6, r2
 801e6f4:	bf38      	it	cc
 801e6f6:	2300      	movcc	r3, #0
 801e6f8:	4423      	add	r3, r4
 801e6fa:	e015      	b.n	801e728 <rshift+0x68>
 801e6fc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801e700:	f1c1 0820 	rsb	r8, r1, #32
 801e704:	40cf      	lsrs	r7, r1
 801e706:	f105 0e04 	add.w	lr, r5, #4
 801e70a:	46a1      	mov	r9, r4
 801e70c:	4576      	cmp	r6, lr
 801e70e:	46f4      	mov	ip, lr
 801e710:	d815      	bhi.n	801e73e <rshift+0x7e>
 801e712:	1a9b      	subs	r3, r3, r2
 801e714:	009a      	lsls	r2, r3, #2
 801e716:	3a04      	subs	r2, #4
 801e718:	3501      	adds	r5, #1
 801e71a:	42ae      	cmp	r6, r5
 801e71c:	bf38      	it	cc
 801e71e:	2200      	movcc	r2, #0
 801e720:	18a3      	adds	r3, r4, r2
 801e722:	50a7      	str	r7, [r4, r2]
 801e724:	b107      	cbz	r7, 801e728 <rshift+0x68>
 801e726:	3304      	adds	r3, #4
 801e728:	1b1a      	subs	r2, r3, r4
 801e72a:	42a3      	cmp	r3, r4
 801e72c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801e730:	bf08      	it	eq
 801e732:	2300      	moveq	r3, #0
 801e734:	6102      	str	r2, [r0, #16]
 801e736:	bf08      	it	eq
 801e738:	6143      	streq	r3, [r0, #20]
 801e73a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e73e:	f8dc c000 	ldr.w	ip, [ip]
 801e742:	fa0c fc08 	lsl.w	ip, ip, r8
 801e746:	ea4c 0707 	orr.w	r7, ip, r7
 801e74a:	f849 7b04 	str.w	r7, [r9], #4
 801e74e:	f85e 7b04 	ldr.w	r7, [lr], #4
 801e752:	40cf      	lsrs	r7, r1
 801e754:	e7da      	b.n	801e70c <rshift+0x4c>
 801e756:	f851 cb04 	ldr.w	ip, [r1], #4
 801e75a:	f847 cf04 	str.w	ip, [r7, #4]!
 801e75e:	e7c3      	b.n	801e6e8 <rshift+0x28>
 801e760:	4623      	mov	r3, r4
 801e762:	e7e1      	b.n	801e728 <rshift+0x68>

0801e764 <__hexdig_fun>:
 801e764:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801e768:	2b09      	cmp	r3, #9
 801e76a:	d802      	bhi.n	801e772 <__hexdig_fun+0xe>
 801e76c:	3820      	subs	r0, #32
 801e76e:	b2c0      	uxtb	r0, r0
 801e770:	4770      	bx	lr
 801e772:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801e776:	2b05      	cmp	r3, #5
 801e778:	d801      	bhi.n	801e77e <__hexdig_fun+0x1a>
 801e77a:	3847      	subs	r0, #71	; 0x47
 801e77c:	e7f7      	b.n	801e76e <__hexdig_fun+0xa>
 801e77e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801e782:	2b05      	cmp	r3, #5
 801e784:	d801      	bhi.n	801e78a <__hexdig_fun+0x26>
 801e786:	3827      	subs	r0, #39	; 0x27
 801e788:	e7f1      	b.n	801e76e <__hexdig_fun+0xa>
 801e78a:	2000      	movs	r0, #0
 801e78c:	4770      	bx	lr
	...

0801e790 <__gethex>:
 801e790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e794:	ed2d 8b02 	vpush	{d8}
 801e798:	b089      	sub	sp, #36	; 0x24
 801e79a:	ee08 0a10 	vmov	s16, r0
 801e79e:	9304      	str	r3, [sp, #16]
 801e7a0:	4bbc      	ldr	r3, [pc, #752]	; (801ea94 <__gethex+0x304>)
 801e7a2:	681b      	ldr	r3, [r3, #0]
 801e7a4:	9301      	str	r3, [sp, #4]
 801e7a6:	4618      	mov	r0, r3
 801e7a8:	468b      	mov	fp, r1
 801e7aa:	4690      	mov	r8, r2
 801e7ac:	f7e1 fd2a 	bl	8000204 <strlen>
 801e7b0:	9b01      	ldr	r3, [sp, #4]
 801e7b2:	f8db 2000 	ldr.w	r2, [fp]
 801e7b6:	4403      	add	r3, r0
 801e7b8:	4682      	mov	sl, r0
 801e7ba:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801e7be:	9305      	str	r3, [sp, #20]
 801e7c0:	1c93      	adds	r3, r2, #2
 801e7c2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801e7c6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801e7ca:	32fe      	adds	r2, #254	; 0xfe
 801e7cc:	18d1      	adds	r1, r2, r3
 801e7ce:	461f      	mov	r7, r3
 801e7d0:	f813 0b01 	ldrb.w	r0, [r3], #1
 801e7d4:	9100      	str	r1, [sp, #0]
 801e7d6:	2830      	cmp	r0, #48	; 0x30
 801e7d8:	d0f8      	beq.n	801e7cc <__gethex+0x3c>
 801e7da:	f7ff ffc3 	bl	801e764 <__hexdig_fun>
 801e7de:	4604      	mov	r4, r0
 801e7e0:	2800      	cmp	r0, #0
 801e7e2:	d13a      	bne.n	801e85a <__gethex+0xca>
 801e7e4:	9901      	ldr	r1, [sp, #4]
 801e7e6:	4652      	mov	r2, sl
 801e7e8:	4638      	mov	r0, r7
 801e7ea:	f7fd fce7 	bl	801c1bc <strncmp>
 801e7ee:	4605      	mov	r5, r0
 801e7f0:	2800      	cmp	r0, #0
 801e7f2:	d168      	bne.n	801e8c6 <__gethex+0x136>
 801e7f4:	f817 000a 	ldrb.w	r0, [r7, sl]
 801e7f8:	eb07 060a 	add.w	r6, r7, sl
 801e7fc:	f7ff ffb2 	bl	801e764 <__hexdig_fun>
 801e800:	2800      	cmp	r0, #0
 801e802:	d062      	beq.n	801e8ca <__gethex+0x13a>
 801e804:	4633      	mov	r3, r6
 801e806:	7818      	ldrb	r0, [r3, #0]
 801e808:	2830      	cmp	r0, #48	; 0x30
 801e80a:	461f      	mov	r7, r3
 801e80c:	f103 0301 	add.w	r3, r3, #1
 801e810:	d0f9      	beq.n	801e806 <__gethex+0x76>
 801e812:	f7ff ffa7 	bl	801e764 <__hexdig_fun>
 801e816:	2301      	movs	r3, #1
 801e818:	fab0 f480 	clz	r4, r0
 801e81c:	0964      	lsrs	r4, r4, #5
 801e81e:	4635      	mov	r5, r6
 801e820:	9300      	str	r3, [sp, #0]
 801e822:	463a      	mov	r2, r7
 801e824:	4616      	mov	r6, r2
 801e826:	3201      	adds	r2, #1
 801e828:	7830      	ldrb	r0, [r6, #0]
 801e82a:	f7ff ff9b 	bl	801e764 <__hexdig_fun>
 801e82e:	2800      	cmp	r0, #0
 801e830:	d1f8      	bne.n	801e824 <__gethex+0x94>
 801e832:	9901      	ldr	r1, [sp, #4]
 801e834:	4652      	mov	r2, sl
 801e836:	4630      	mov	r0, r6
 801e838:	f7fd fcc0 	bl	801c1bc <strncmp>
 801e83c:	b980      	cbnz	r0, 801e860 <__gethex+0xd0>
 801e83e:	b94d      	cbnz	r5, 801e854 <__gethex+0xc4>
 801e840:	eb06 050a 	add.w	r5, r6, sl
 801e844:	462a      	mov	r2, r5
 801e846:	4616      	mov	r6, r2
 801e848:	3201      	adds	r2, #1
 801e84a:	7830      	ldrb	r0, [r6, #0]
 801e84c:	f7ff ff8a 	bl	801e764 <__hexdig_fun>
 801e850:	2800      	cmp	r0, #0
 801e852:	d1f8      	bne.n	801e846 <__gethex+0xb6>
 801e854:	1bad      	subs	r5, r5, r6
 801e856:	00ad      	lsls	r5, r5, #2
 801e858:	e004      	b.n	801e864 <__gethex+0xd4>
 801e85a:	2400      	movs	r4, #0
 801e85c:	4625      	mov	r5, r4
 801e85e:	e7e0      	b.n	801e822 <__gethex+0x92>
 801e860:	2d00      	cmp	r5, #0
 801e862:	d1f7      	bne.n	801e854 <__gethex+0xc4>
 801e864:	7833      	ldrb	r3, [r6, #0]
 801e866:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801e86a:	2b50      	cmp	r3, #80	; 0x50
 801e86c:	d13b      	bne.n	801e8e6 <__gethex+0x156>
 801e86e:	7873      	ldrb	r3, [r6, #1]
 801e870:	2b2b      	cmp	r3, #43	; 0x2b
 801e872:	d02c      	beq.n	801e8ce <__gethex+0x13e>
 801e874:	2b2d      	cmp	r3, #45	; 0x2d
 801e876:	d02e      	beq.n	801e8d6 <__gethex+0x146>
 801e878:	1c71      	adds	r1, r6, #1
 801e87a:	f04f 0900 	mov.w	r9, #0
 801e87e:	7808      	ldrb	r0, [r1, #0]
 801e880:	f7ff ff70 	bl	801e764 <__hexdig_fun>
 801e884:	1e43      	subs	r3, r0, #1
 801e886:	b2db      	uxtb	r3, r3
 801e888:	2b18      	cmp	r3, #24
 801e88a:	d82c      	bhi.n	801e8e6 <__gethex+0x156>
 801e88c:	f1a0 0210 	sub.w	r2, r0, #16
 801e890:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801e894:	f7ff ff66 	bl	801e764 <__hexdig_fun>
 801e898:	1e43      	subs	r3, r0, #1
 801e89a:	b2db      	uxtb	r3, r3
 801e89c:	2b18      	cmp	r3, #24
 801e89e:	d91d      	bls.n	801e8dc <__gethex+0x14c>
 801e8a0:	f1b9 0f00 	cmp.w	r9, #0
 801e8a4:	d000      	beq.n	801e8a8 <__gethex+0x118>
 801e8a6:	4252      	negs	r2, r2
 801e8a8:	4415      	add	r5, r2
 801e8aa:	f8cb 1000 	str.w	r1, [fp]
 801e8ae:	b1e4      	cbz	r4, 801e8ea <__gethex+0x15a>
 801e8b0:	9b00      	ldr	r3, [sp, #0]
 801e8b2:	2b00      	cmp	r3, #0
 801e8b4:	bf14      	ite	ne
 801e8b6:	2700      	movne	r7, #0
 801e8b8:	2706      	moveq	r7, #6
 801e8ba:	4638      	mov	r0, r7
 801e8bc:	b009      	add	sp, #36	; 0x24
 801e8be:	ecbd 8b02 	vpop	{d8}
 801e8c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e8c6:	463e      	mov	r6, r7
 801e8c8:	4625      	mov	r5, r4
 801e8ca:	2401      	movs	r4, #1
 801e8cc:	e7ca      	b.n	801e864 <__gethex+0xd4>
 801e8ce:	f04f 0900 	mov.w	r9, #0
 801e8d2:	1cb1      	adds	r1, r6, #2
 801e8d4:	e7d3      	b.n	801e87e <__gethex+0xee>
 801e8d6:	f04f 0901 	mov.w	r9, #1
 801e8da:	e7fa      	b.n	801e8d2 <__gethex+0x142>
 801e8dc:	230a      	movs	r3, #10
 801e8de:	fb03 0202 	mla	r2, r3, r2, r0
 801e8e2:	3a10      	subs	r2, #16
 801e8e4:	e7d4      	b.n	801e890 <__gethex+0x100>
 801e8e6:	4631      	mov	r1, r6
 801e8e8:	e7df      	b.n	801e8aa <__gethex+0x11a>
 801e8ea:	1bf3      	subs	r3, r6, r7
 801e8ec:	3b01      	subs	r3, #1
 801e8ee:	4621      	mov	r1, r4
 801e8f0:	2b07      	cmp	r3, #7
 801e8f2:	dc0b      	bgt.n	801e90c <__gethex+0x17c>
 801e8f4:	ee18 0a10 	vmov	r0, s16
 801e8f8:	f000 fbe0 	bl	801f0bc <_Balloc>
 801e8fc:	4604      	mov	r4, r0
 801e8fe:	b940      	cbnz	r0, 801e912 <__gethex+0x182>
 801e900:	4b65      	ldr	r3, [pc, #404]	; (801ea98 <__gethex+0x308>)
 801e902:	4602      	mov	r2, r0
 801e904:	21de      	movs	r1, #222	; 0xde
 801e906:	4865      	ldr	r0, [pc, #404]	; (801ea9c <__gethex+0x30c>)
 801e908:	f7fe ff4c 	bl	801d7a4 <__assert_func>
 801e90c:	3101      	adds	r1, #1
 801e90e:	105b      	asrs	r3, r3, #1
 801e910:	e7ee      	b.n	801e8f0 <__gethex+0x160>
 801e912:	f100 0914 	add.w	r9, r0, #20
 801e916:	f04f 0b00 	mov.w	fp, #0
 801e91a:	f1ca 0301 	rsb	r3, sl, #1
 801e91e:	f8cd 9008 	str.w	r9, [sp, #8]
 801e922:	f8cd b000 	str.w	fp, [sp]
 801e926:	9306      	str	r3, [sp, #24]
 801e928:	42b7      	cmp	r7, r6
 801e92a:	d340      	bcc.n	801e9ae <__gethex+0x21e>
 801e92c:	9802      	ldr	r0, [sp, #8]
 801e92e:	9b00      	ldr	r3, [sp, #0]
 801e930:	f840 3b04 	str.w	r3, [r0], #4
 801e934:	eba0 0009 	sub.w	r0, r0, r9
 801e938:	1080      	asrs	r0, r0, #2
 801e93a:	0146      	lsls	r6, r0, #5
 801e93c:	6120      	str	r0, [r4, #16]
 801e93e:	4618      	mov	r0, r3
 801e940:	f000 fcb2 	bl	801f2a8 <__hi0bits>
 801e944:	1a30      	subs	r0, r6, r0
 801e946:	f8d8 6000 	ldr.w	r6, [r8]
 801e94a:	42b0      	cmp	r0, r6
 801e94c:	dd63      	ble.n	801ea16 <__gethex+0x286>
 801e94e:	1b87      	subs	r7, r0, r6
 801e950:	4639      	mov	r1, r7
 801e952:	4620      	mov	r0, r4
 801e954:	f001 f84c 	bl	801f9f0 <__any_on>
 801e958:	4682      	mov	sl, r0
 801e95a:	b1a8      	cbz	r0, 801e988 <__gethex+0x1f8>
 801e95c:	1e7b      	subs	r3, r7, #1
 801e95e:	1159      	asrs	r1, r3, #5
 801e960:	f003 021f 	and.w	r2, r3, #31
 801e964:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801e968:	f04f 0a01 	mov.w	sl, #1
 801e96c:	fa0a f202 	lsl.w	r2, sl, r2
 801e970:	420a      	tst	r2, r1
 801e972:	d009      	beq.n	801e988 <__gethex+0x1f8>
 801e974:	4553      	cmp	r3, sl
 801e976:	dd05      	ble.n	801e984 <__gethex+0x1f4>
 801e978:	1eb9      	subs	r1, r7, #2
 801e97a:	4620      	mov	r0, r4
 801e97c:	f001 f838 	bl	801f9f0 <__any_on>
 801e980:	2800      	cmp	r0, #0
 801e982:	d145      	bne.n	801ea10 <__gethex+0x280>
 801e984:	f04f 0a02 	mov.w	sl, #2
 801e988:	4639      	mov	r1, r7
 801e98a:	4620      	mov	r0, r4
 801e98c:	f7ff fe98 	bl	801e6c0 <rshift>
 801e990:	443d      	add	r5, r7
 801e992:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801e996:	42ab      	cmp	r3, r5
 801e998:	da4c      	bge.n	801ea34 <__gethex+0x2a4>
 801e99a:	ee18 0a10 	vmov	r0, s16
 801e99e:	4621      	mov	r1, r4
 801e9a0:	f000 fbcc 	bl	801f13c <_Bfree>
 801e9a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e9a6:	2300      	movs	r3, #0
 801e9a8:	6013      	str	r3, [r2, #0]
 801e9aa:	27a3      	movs	r7, #163	; 0xa3
 801e9ac:	e785      	b.n	801e8ba <__gethex+0x12a>
 801e9ae:	1e73      	subs	r3, r6, #1
 801e9b0:	9a05      	ldr	r2, [sp, #20]
 801e9b2:	9303      	str	r3, [sp, #12]
 801e9b4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801e9b8:	4293      	cmp	r3, r2
 801e9ba:	d019      	beq.n	801e9f0 <__gethex+0x260>
 801e9bc:	f1bb 0f20 	cmp.w	fp, #32
 801e9c0:	d107      	bne.n	801e9d2 <__gethex+0x242>
 801e9c2:	9b02      	ldr	r3, [sp, #8]
 801e9c4:	9a00      	ldr	r2, [sp, #0]
 801e9c6:	f843 2b04 	str.w	r2, [r3], #4
 801e9ca:	9302      	str	r3, [sp, #8]
 801e9cc:	2300      	movs	r3, #0
 801e9ce:	9300      	str	r3, [sp, #0]
 801e9d0:	469b      	mov	fp, r3
 801e9d2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801e9d6:	f7ff fec5 	bl	801e764 <__hexdig_fun>
 801e9da:	9b00      	ldr	r3, [sp, #0]
 801e9dc:	f000 000f 	and.w	r0, r0, #15
 801e9e0:	fa00 f00b 	lsl.w	r0, r0, fp
 801e9e4:	4303      	orrs	r3, r0
 801e9e6:	9300      	str	r3, [sp, #0]
 801e9e8:	f10b 0b04 	add.w	fp, fp, #4
 801e9ec:	9b03      	ldr	r3, [sp, #12]
 801e9ee:	e00d      	b.n	801ea0c <__gethex+0x27c>
 801e9f0:	9b03      	ldr	r3, [sp, #12]
 801e9f2:	9a06      	ldr	r2, [sp, #24]
 801e9f4:	4413      	add	r3, r2
 801e9f6:	42bb      	cmp	r3, r7
 801e9f8:	d3e0      	bcc.n	801e9bc <__gethex+0x22c>
 801e9fa:	4618      	mov	r0, r3
 801e9fc:	9901      	ldr	r1, [sp, #4]
 801e9fe:	9307      	str	r3, [sp, #28]
 801ea00:	4652      	mov	r2, sl
 801ea02:	f7fd fbdb 	bl	801c1bc <strncmp>
 801ea06:	9b07      	ldr	r3, [sp, #28]
 801ea08:	2800      	cmp	r0, #0
 801ea0a:	d1d7      	bne.n	801e9bc <__gethex+0x22c>
 801ea0c:	461e      	mov	r6, r3
 801ea0e:	e78b      	b.n	801e928 <__gethex+0x198>
 801ea10:	f04f 0a03 	mov.w	sl, #3
 801ea14:	e7b8      	b.n	801e988 <__gethex+0x1f8>
 801ea16:	da0a      	bge.n	801ea2e <__gethex+0x29e>
 801ea18:	1a37      	subs	r7, r6, r0
 801ea1a:	4621      	mov	r1, r4
 801ea1c:	ee18 0a10 	vmov	r0, s16
 801ea20:	463a      	mov	r2, r7
 801ea22:	f000 fda7 	bl	801f574 <__lshift>
 801ea26:	1bed      	subs	r5, r5, r7
 801ea28:	4604      	mov	r4, r0
 801ea2a:	f100 0914 	add.w	r9, r0, #20
 801ea2e:	f04f 0a00 	mov.w	sl, #0
 801ea32:	e7ae      	b.n	801e992 <__gethex+0x202>
 801ea34:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801ea38:	42a8      	cmp	r0, r5
 801ea3a:	dd72      	ble.n	801eb22 <__gethex+0x392>
 801ea3c:	1b45      	subs	r5, r0, r5
 801ea3e:	42ae      	cmp	r6, r5
 801ea40:	dc36      	bgt.n	801eab0 <__gethex+0x320>
 801ea42:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801ea46:	2b02      	cmp	r3, #2
 801ea48:	d02a      	beq.n	801eaa0 <__gethex+0x310>
 801ea4a:	2b03      	cmp	r3, #3
 801ea4c:	d02c      	beq.n	801eaa8 <__gethex+0x318>
 801ea4e:	2b01      	cmp	r3, #1
 801ea50:	d115      	bne.n	801ea7e <__gethex+0x2ee>
 801ea52:	42ae      	cmp	r6, r5
 801ea54:	d113      	bne.n	801ea7e <__gethex+0x2ee>
 801ea56:	2e01      	cmp	r6, #1
 801ea58:	d10b      	bne.n	801ea72 <__gethex+0x2e2>
 801ea5a:	9a04      	ldr	r2, [sp, #16]
 801ea5c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801ea60:	6013      	str	r3, [r2, #0]
 801ea62:	2301      	movs	r3, #1
 801ea64:	6123      	str	r3, [r4, #16]
 801ea66:	f8c9 3000 	str.w	r3, [r9]
 801ea6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ea6c:	2762      	movs	r7, #98	; 0x62
 801ea6e:	601c      	str	r4, [r3, #0]
 801ea70:	e723      	b.n	801e8ba <__gethex+0x12a>
 801ea72:	1e71      	subs	r1, r6, #1
 801ea74:	4620      	mov	r0, r4
 801ea76:	f000 ffbb 	bl	801f9f0 <__any_on>
 801ea7a:	2800      	cmp	r0, #0
 801ea7c:	d1ed      	bne.n	801ea5a <__gethex+0x2ca>
 801ea7e:	ee18 0a10 	vmov	r0, s16
 801ea82:	4621      	mov	r1, r4
 801ea84:	f000 fb5a 	bl	801f13c <_Bfree>
 801ea88:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ea8a:	2300      	movs	r3, #0
 801ea8c:	6013      	str	r3, [r2, #0]
 801ea8e:	2750      	movs	r7, #80	; 0x50
 801ea90:	e713      	b.n	801e8ba <__gethex+0x12a>
 801ea92:	bf00      	nop
 801ea94:	08023020 	.word	0x08023020
 801ea98:	08022fa5 	.word	0x08022fa5
 801ea9c:	08022fb6 	.word	0x08022fb6
 801eaa0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801eaa2:	2b00      	cmp	r3, #0
 801eaa4:	d1eb      	bne.n	801ea7e <__gethex+0x2ee>
 801eaa6:	e7d8      	b.n	801ea5a <__gethex+0x2ca>
 801eaa8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801eaaa:	2b00      	cmp	r3, #0
 801eaac:	d1d5      	bne.n	801ea5a <__gethex+0x2ca>
 801eaae:	e7e6      	b.n	801ea7e <__gethex+0x2ee>
 801eab0:	1e6f      	subs	r7, r5, #1
 801eab2:	f1ba 0f00 	cmp.w	sl, #0
 801eab6:	d131      	bne.n	801eb1c <__gethex+0x38c>
 801eab8:	b127      	cbz	r7, 801eac4 <__gethex+0x334>
 801eaba:	4639      	mov	r1, r7
 801eabc:	4620      	mov	r0, r4
 801eabe:	f000 ff97 	bl	801f9f0 <__any_on>
 801eac2:	4682      	mov	sl, r0
 801eac4:	117b      	asrs	r3, r7, #5
 801eac6:	2101      	movs	r1, #1
 801eac8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801eacc:	f007 071f 	and.w	r7, r7, #31
 801ead0:	fa01 f707 	lsl.w	r7, r1, r7
 801ead4:	421f      	tst	r7, r3
 801ead6:	4629      	mov	r1, r5
 801ead8:	4620      	mov	r0, r4
 801eada:	bf18      	it	ne
 801eadc:	f04a 0a02 	orrne.w	sl, sl, #2
 801eae0:	1b76      	subs	r6, r6, r5
 801eae2:	f7ff fded 	bl	801e6c0 <rshift>
 801eae6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801eaea:	2702      	movs	r7, #2
 801eaec:	f1ba 0f00 	cmp.w	sl, #0
 801eaf0:	d048      	beq.n	801eb84 <__gethex+0x3f4>
 801eaf2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801eaf6:	2b02      	cmp	r3, #2
 801eaf8:	d015      	beq.n	801eb26 <__gethex+0x396>
 801eafa:	2b03      	cmp	r3, #3
 801eafc:	d017      	beq.n	801eb2e <__gethex+0x39e>
 801eafe:	2b01      	cmp	r3, #1
 801eb00:	d109      	bne.n	801eb16 <__gethex+0x386>
 801eb02:	f01a 0f02 	tst.w	sl, #2
 801eb06:	d006      	beq.n	801eb16 <__gethex+0x386>
 801eb08:	f8d9 0000 	ldr.w	r0, [r9]
 801eb0c:	ea4a 0a00 	orr.w	sl, sl, r0
 801eb10:	f01a 0f01 	tst.w	sl, #1
 801eb14:	d10e      	bne.n	801eb34 <__gethex+0x3a4>
 801eb16:	f047 0710 	orr.w	r7, r7, #16
 801eb1a:	e033      	b.n	801eb84 <__gethex+0x3f4>
 801eb1c:	f04f 0a01 	mov.w	sl, #1
 801eb20:	e7d0      	b.n	801eac4 <__gethex+0x334>
 801eb22:	2701      	movs	r7, #1
 801eb24:	e7e2      	b.n	801eaec <__gethex+0x35c>
 801eb26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801eb28:	f1c3 0301 	rsb	r3, r3, #1
 801eb2c:	9315      	str	r3, [sp, #84]	; 0x54
 801eb2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801eb30:	2b00      	cmp	r3, #0
 801eb32:	d0f0      	beq.n	801eb16 <__gethex+0x386>
 801eb34:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801eb38:	f104 0314 	add.w	r3, r4, #20
 801eb3c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801eb40:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801eb44:	f04f 0c00 	mov.w	ip, #0
 801eb48:	4618      	mov	r0, r3
 801eb4a:	f853 2b04 	ldr.w	r2, [r3], #4
 801eb4e:	f1b2 3fff 	cmp.w	r2, #4294967295
 801eb52:	d01c      	beq.n	801eb8e <__gethex+0x3fe>
 801eb54:	3201      	adds	r2, #1
 801eb56:	6002      	str	r2, [r0, #0]
 801eb58:	2f02      	cmp	r7, #2
 801eb5a:	f104 0314 	add.w	r3, r4, #20
 801eb5e:	d13f      	bne.n	801ebe0 <__gethex+0x450>
 801eb60:	f8d8 2000 	ldr.w	r2, [r8]
 801eb64:	3a01      	subs	r2, #1
 801eb66:	42b2      	cmp	r2, r6
 801eb68:	d10a      	bne.n	801eb80 <__gethex+0x3f0>
 801eb6a:	1171      	asrs	r1, r6, #5
 801eb6c:	2201      	movs	r2, #1
 801eb6e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801eb72:	f006 061f 	and.w	r6, r6, #31
 801eb76:	fa02 f606 	lsl.w	r6, r2, r6
 801eb7a:	421e      	tst	r6, r3
 801eb7c:	bf18      	it	ne
 801eb7e:	4617      	movne	r7, r2
 801eb80:	f047 0720 	orr.w	r7, r7, #32
 801eb84:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801eb86:	601c      	str	r4, [r3, #0]
 801eb88:	9b04      	ldr	r3, [sp, #16]
 801eb8a:	601d      	str	r5, [r3, #0]
 801eb8c:	e695      	b.n	801e8ba <__gethex+0x12a>
 801eb8e:	4299      	cmp	r1, r3
 801eb90:	f843 cc04 	str.w	ip, [r3, #-4]
 801eb94:	d8d8      	bhi.n	801eb48 <__gethex+0x3b8>
 801eb96:	68a3      	ldr	r3, [r4, #8]
 801eb98:	459b      	cmp	fp, r3
 801eb9a:	db19      	blt.n	801ebd0 <__gethex+0x440>
 801eb9c:	6861      	ldr	r1, [r4, #4]
 801eb9e:	ee18 0a10 	vmov	r0, s16
 801eba2:	3101      	adds	r1, #1
 801eba4:	f000 fa8a 	bl	801f0bc <_Balloc>
 801eba8:	4681      	mov	r9, r0
 801ebaa:	b918      	cbnz	r0, 801ebb4 <__gethex+0x424>
 801ebac:	4b1a      	ldr	r3, [pc, #104]	; (801ec18 <__gethex+0x488>)
 801ebae:	4602      	mov	r2, r0
 801ebb0:	2184      	movs	r1, #132	; 0x84
 801ebb2:	e6a8      	b.n	801e906 <__gethex+0x176>
 801ebb4:	6922      	ldr	r2, [r4, #16]
 801ebb6:	3202      	adds	r2, #2
 801ebb8:	f104 010c 	add.w	r1, r4, #12
 801ebbc:	0092      	lsls	r2, r2, #2
 801ebbe:	300c      	adds	r0, #12
 801ebc0:	f7fb ff32 	bl	801aa28 <memcpy>
 801ebc4:	4621      	mov	r1, r4
 801ebc6:	ee18 0a10 	vmov	r0, s16
 801ebca:	f000 fab7 	bl	801f13c <_Bfree>
 801ebce:	464c      	mov	r4, r9
 801ebd0:	6923      	ldr	r3, [r4, #16]
 801ebd2:	1c5a      	adds	r2, r3, #1
 801ebd4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801ebd8:	6122      	str	r2, [r4, #16]
 801ebda:	2201      	movs	r2, #1
 801ebdc:	615a      	str	r2, [r3, #20]
 801ebde:	e7bb      	b.n	801eb58 <__gethex+0x3c8>
 801ebe0:	6922      	ldr	r2, [r4, #16]
 801ebe2:	455a      	cmp	r2, fp
 801ebe4:	dd0b      	ble.n	801ebfe <__gethex+0x46e>
 801ebe6:	2101      	movs	r1, #1
 801ebe8:	4620      	mov	r0, r4
 801ebea:	f7ff fd69 	bl	801e6c0 <rshift>
 801ebee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801ebf2:	3501      	adds	r5, #1
 801ebf4:	42ab      	cmp	r3, r5
 801ebf6:	f6ff aed0 	blt.w	801e99a <__gethex+0x20a>
 801ebfa:	2701      	movs	r7, #1
 801ebfc:	e7c0      	b.n	801eb80 <__gethex+0x3f0>
 801ebfe:	f016 061f 	ands.w	r6, r6, #31
 801ec02:	d0fa      	beq.n	801ebfa <__gethex+0x46a>
 801ec04:	449a      	add	sl, r3
 801ec06:	f1c6 0620 	rsb	r6, r6, #32
 801ec0a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801ec0e:	f000 fb4b 	bl	801f2a8 <__hi0bits>
 801ec12:	42b0      	cmp	r0, r6
 801ec14:	dbe7      	blt.n	801ebe6 <__gethex+0x456>
 801ec16:	e7f0      	b.n	801ebfa <__gethex+0x46a>
 801ec18:	08022fa5 	.word	0x08022fa5

0801ec1c <L_shift>:
 801ec1c:	f1c2 0208 	rsb	r2, r2, #8
 801ec20:	0092      	lsls	r2, r2, #2
 801ec22:	b570      	push	{r4, r5, r6, lr}
 801ec24:	f1c2 0620 	rsb	r6, r2, #32
 801ec28:	6843      	ldr	r3, [r0, #4]
 801ec2a:	6804      	ldr	r4, [r0, #0]
 801ec2c:	fa03 f506 	lsl.w	r5, r3, r6
 801ec30:	432c      	orrs	r4, r5
 801ec32:	40d3      	lsrs	r3, r2
 801ec34:	6004      	str	r4, [r0, #0]
 801ec36:	f840 3f04 	str.w	r3, [r0, #4]!
 801ec3a:	4288      	cmp	r0, r1
 801ec3c:	d3f4      	bcc.n	801ec28 <L_shift+0xc>
 801ec3e:	bd70      	pop	{r4, r5, r6, pc}

0801ec40 <__match>:
 801ec40:	b530      	push	{r4, r5, lr}
 801ec42:	6803      	ldr	r3, [r0, #0]
 801ec44:	3301      	adds	r3, #1
 801ec46:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ec4a:	b914      	cbnz	r4, 801ec52 <__match+0x12>
 801ec4c:	6003      	str	r3, [r0, #0]
 801ec4e:	2001      	movs	r0, #1
 801ec50:	bd30      	pop	{r4, r5, pc}
 801ec52:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ec56:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801ec5a:	2d19      	cmp	r5, #25
 801ec5c:	bf98      	it	ls
 801ec5e:	3220      	addls	r2, #32
 801ec60:	42a2      	cmp	r2, r4
 801ec62:	d0f0      	beq.n	801ec46 <__match+0x6>
 801ec64:	2000      	movs	r0, #0
 801ec66:	e7f3      	b.n	801ec50 <__match+0x10>

0801ec68 <__hexnan>:
 801ec68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec6c:	680b      	ldr	r3, [r1, #0]
 801ec6e:	6801      	ldr	r1, [r0, #0]
 801ec70:	115e      	asrs	r6, r3, #5
 801ec72:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801ec76:	f013 031f 	ands.w	r3, r3, #31
 801ec7a:	b087      	sub	sp, #28
 801ec7c:	bf18      	it	ne
 801ec7e:	3604      	addne	r6, #4
 801ec80:	2500      	movs	r5, #0
 801ec82:	1f37      	subs	r7, r6, #4
 801ec84:	4682      	mov	sl, r0
 801ec86:	4690      	mov	r8, r2
 801ec88:	9301      	str	r3, [sp, #4]
 801ec8a:	f846 5c04 	str.w	r5, [r6, #-4]
 801ec8e:	46b9      	mov	r9, r7
 801ec90:	463c      	mov	r4, r7
 801ec92:	9502      	str	r5, [sp, #8]
 801ec94:	46ab      	mov	fp, r5
 801ec96:	784a      	ldrb	r2, [r1, #1]
 801ec98:	1c4b      	adds	r3, r1, #1
 801ec9a:	9303      	str	r3, [sp, #12]
 801ec9c:	b342      	cbz	r2, 801ecf0 <__hexnan+0x88>
 801ec9e:	4610      	mov	r0, r2
 801eca0:	9105      	str	r1, [sp, #20]
 801eca2:	9204      	str	r2, [sp, #16]
 801eca4:	f7ff fd5e 	bl	801e764 <__hexdig_fun>
 801eca8:	2800      	cmp	r0, #0
 801ecaa:	d14f      	bne.n	801ed4c <__hexnan+0xe4>
 801ecac:	9a04      	ldr	r2, [sp, #16]
 801ecae:	9905      	ldr	r1, [sp, #20]
 801ecb0:	2a20      	cmp	r2, #32
 801ecb2:	d818      	bhi.n	801ece6 <__hexnan+0x7e>
 801ecb4:	9b02      	ldr	r3, [sp, #8]
 801ecb6:	459b      	cmp	fp, r3
 801ecb8:	dd13      	ble.n	801ece2 <__hexnan+0x7a>
 801ecba:	454c      	cmp	r4, r9
 801ecbc:	d206      	bcs.n	801eccc <__hexnan+0x64>
 801ecbe:	2d07      	cmp	r5, #7
 801ecc0:	dc04      	bgt.n	801eccc <__hexnan+0x64>
 801ecc2:	462a      	mov	r2, r5
 801ecc4:	4649      	mov	r1, r9
 801ecc6:	4620      	mov	r0, r4
 801ecc8:	f7ff ffa8 	bl	801ec1c <L_shift>
 801eccc:	4544      	cmp	r4, r8
 801ecce:	d950      	bls.n	801ed72 <__hexnan+0x10a>
 801ecd0:	2300      	movs	r3, #0
 801ecd2:	f1a4 0904 	sub.w	r9, r4, #4
 801ecd6:	f844 3c04 	str.w	r3, [r4, #-4]
 801ecda:	f8cd b008 	str.w	fp, [sp, #8]
 801ecde:	464c      	mov	r4, r9
 801ece0:	461d      	mov	r5, r3
 801ece2:	9903      	ldr	r1, [sp, #12]
 801ece4:	e7d7      	b.n	801ec96 <__hexnan+0x2e>
 801ece6:	2a29      	cmp	r2, #41	; 0x29
 801ece8:	d156      	bne.n	801ed98 <__hexnan+0x130>
 801ecea:	3102      	adds	r1, #2
 801ecec:	f8ca 1000 	str.w	r1, [sl]
 801ecf0:	f1bb 0f00 	cmp.w	fp, #0
 801ecf4:	d050      	beq.n	801ed98 <__hexnan+0x130>
 801ecf6:	454c      	cmp	r4, r9
 801ecf8:	d206      	bcs.n	801ed08 <__hexnan+0xa0>
 801ecfa:	2d07      	cmp	r5, #7
 801ecfc:	dc04      	bgt.n	801ed08 <__hexnan+0xa0>
 801ecfe:	462a      	mov	r2, r5
 801ed00:	4649      	mov	r1, r9
 801ed02:	4620      	mov	r0, r4
 801ed04:	f7ff ff8a 	bl	801ec1c <L_shift>
 801ed08:	4544      	cmp	r4, r8
 801ed0a:	d934      	bls.n	801ed76 <__hexnan+0x10e>
 801ed0c:	f1a8 0204 	sub.w	r2, r8, #4
 801ed10:	4623      	mov	r3, r4
 801ed12:	f853 1b04 	ldr.w	r1, [r3], #4
 801ed16:	f842 1f04 	str.w	r1, [r2, #4]!
 801ed1a:	429f      	cmp	r7, r3
 801ed1c:	d2f9      	bcs.n	801ed12 <__hexnan+0xaa>
 801ed1e:	1b3b      	subs	r3, r7, r4
 801ed20:	f023 0303 	bic.w	r3, r3, #3
 801ed24:	3304      	adds	r3, #4
 801ed26:	3401      	adds	r4, #1
 801ed28:	3e03      	subs	r6, #3
 801ed2a:	42b4      	cmp	r4, r6
 801ed2c:	bf88      	it	hi
 801ed2e:	2304      	movhi	r3, #4
 801ed30:	4443      	add	r3, r8
 801ed32:	2200      	movs	r2, #0
 801ed34:	f843 2b04 	str.w	r2, [r3], #4
 801ed38:	429f      	cmp	r7, r3
 801ed3a:	d2fb      	bcs.n	801ed34 <__hexnan+0xcc>
 801ed3c:	683b      	ldr	r3, [r7, #0]
 801ed3e:	b91b      	cbnz	r3, 801ed48 <__hexnan+0xe0>
 801ed40:	4547      	cmp	r7, r8
 801ed42:	d127      	bne.n	801ed94 <__hexnan+0x12c>
 801ed44:	2301      	movs	r3, #1
 801ed46:	603b      	str	r3, [r7, #0]
 801ed48:	2005      	movs	r0, #5
 801ed4a:	e026      	b.n	801ed9a <__hexnan+0x132>
 801ed4c:	3501      	adds	r5, #1
 801ed4e:	2d08      	cmp	r5, #8
 801ed50:	f10b 0b01 	add.w	fp, fp, #1
 801ed54:	dd06      	ble.n	801ed64 <__hexnan+0xfc>
 801ed56:	4544      	cmp	r4, r8
 801ed58:	d9c3      	bls.n	801ece2 <__hexnan+0x7a>
 801ed5a:	2300      	movs	r3, #0
 801ed5c:	f844 3c04 	str.w	r3, [r4, #-4]
 801ed60:	2501      	movs	r5, #1
 801ed62:	3c04      	subs	r4, #4
 801ed64:	6822      	ldr	r2, [r4, #0]
 801ed66:	f000 000f 	and.w	r0, r0, #15
 801ed6a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801ed6e:	6022      	str	r2, [r4, #0]
 801ed70:	e7b7      	b.n	801ece2 <__hexnan+0x7a>
 801ed72:	2508      	movs	r5, #8
 801ed74:	e7b5      	b.n	801ece2 <__hexnan+0x7a>
 801ed76:	9b01      	ldr	r3, [sp, #4]
 801ed78:	2b00      	cmp	r3, #0
 801ed7a:	d0df      	beq.n	801ed3c <__hexnan+0xd4>
 801ed7c:	f04f 32ff 	mov.w	r2, #4294967295
 801ed80:	f1c3 0320 	rsb	r3, r3, #32
 801ed84:	fa22 f303 	lsr.w	r3, r2, r3
 801ed88:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801ed8c:	401a      	ands	r2, r3
 801ed8e:	f846 2c04 	str.w	r2, [r6, #-4]
 801ed92:	e7d3      	b.n	801ed3c <__hexnan+0xd4>
 801ed94:	3f04      	subs	r7, #4
 801ed96:	e7d1      	b.n	801ed3c <__hexnan+0xd4>
 801ed98:	2004      	movs	r0, #4
 801ed9a:	b007      	add	sp, #28
 801ed9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801eda0 <_findenv_r>:
 801eda0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eda4:	4607      	mov	r7, r0
 801eda6:	4689      	mov	r9, r1
 801eda8:	4616      	mov	r6, r2
 801edaa:	f001 fcdf 	bl	802076c <__env_lock>
 801edae:	4b18      	ldr	r3, [pc, #96]	; (801ee10 <_findenv_r+0x70>)
 801edb0:	681c      	ldr	r4, [r3, #0]
 801edb2:	469a      	mov	sl, r3
 801edb4:	b134      	cbz	r4, 801edc4 <_findenv_r+0x24>
 801edb6:	464b      	mov	r3, r9
 801edb8:	4698      	mov	r8, r3
 801edba:	f813 1b01 	ldrb.w	r1, [r3], #1
 801edbe:	b139      	cbz	r1, 801edd0 <_findenv_r+0x30>
 801edc0:	293d      	cmp	r1, #61	; 0x3d
 801edc2:	d1f9      	bne.n	801edb8 <_findenv_r+0x18>
 801edc4:	4638      	mov	r0, r7
 801edc6:	f001 fcd7 	bl	8020778 <__env_unlock>
 801edca:	2000      	movs	r0, #0
 801edcc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801edd0:	eba8 0809 	sub.w	r8, r8, r9
 801edd4:	46a3      	mov	fp, r4
 801edd6:	f854 0b04 	ldr.w	r0, [r4], #4
 801edda:	2800      	cmp	r0, #0
 801eddc:	d0f2      	beq.n	801edc4 <_findenv_r+0x24>
 801edde:	4642      	mov	r2, r8
 801ede0:	4649      	mov	r1, r9
 801ede2:	f7fd f9eb 	bl	801c1bc <strncmp>
 801ede6:	2800      	cmp	r0, #0
 801ede8:	d1f4      	bne.n	801edd4 <_findenv_r+0x34>
 801edea:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801edee:	eb03 0508 	add.w	r5, r3, r8
 801edf2:	f813 3008 	ldrb.w	r3, [r3, r8]
 801edf6:	2b3d      	cmp	r3, #61	; 0x3d
 801edf8:	d1ec      	bne.n	801edd4 <_findenv_r+0x34>
 801edfa:	f8da 3000 	ldr.w	r3, [sl]
 801edfe:	ebab 0303 	sub.w	r3, fp, r3
 801ee02:	109b      	asrs	r3, r3, #2
 801ee04:	4638      	mov	r0, r7
 801ee06:	6033      	str	r3, [r6, #0]
 801ee08:	f001 fcb6 	bl	8020778 <__env_unlock>
 801ee0c:	1c68      	adds	r0, r5, #1
 801ee0e:	e7dd      	b.n	801edcc <_findenv_r+0x2c>
 801ee10:	20000330 	.word	0x20000330

0801ee14 <_getenv_r>:
 801ee14:	b507      	push	{r0, r1, r2, lr}
 801ee16:	aa01      	add	r2, sp, #4
 801ee18:	f7ff ffc2 	bl	801eda0 <_findenv_r>
 801ee1c:	b003      	add	sp, #12
 801ee1e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801ee24 <__gettzinfo>:
 801ee24:	4800      	ldr	r0, [pc, #0]	; (801ee28 <__gettzinfo+0x4>)
 801ee26:	4770      	bx	lr
 801ee28:	20000168 	.word	0x20000168

0801ee2c <gmtime_r>:
 801ee2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ee30:	e9d0 6700 	ldrd	r6, r7, [r0]
 801ee34:	460c      	mov	r4, r1
 801ee36:	4a51      	ldr	r2, [pc, #324]	; (801ef7c <gmtime_r+0x150>)
 801ee38:	2300      	movs	r3, #0
 801ee3a:	4630      	mov	r0, r6
 801ee3c:	4639      	mov	r1, r7
 801ee3e:	f7e1 ff43 	bl	8000cc8 <__aeabi_ldivmod>
 801ee42:	4639      	mov	r1, r7
 801ee44:	4605      	mov	r5, r0
 801ee46:	4a4d      	ldr	r2, [pc, #308]	; (801ef7c <gmtime_r+0x150>)
 801ee48:	4630      	mov	r0, r6
 801ee4a:	2300      	movs	r3, #0
 801ee4c:	f7e1 ff3c 	bl	8000cc8 <__aeabi_ldivmod>
 801ee50:	2a00      	cmp	r2, #0
 801ee52:	bfbc      	itt	lt
 801ee54:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 801ee58:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 801ee5c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801ee60:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 801ee64:	fbb2 f3f1 	udiv	r3, r2, r1
 801ee68:	fb01 2213 	mls	r2, r1, r3, r2
 801ee6c:	f04f 013c 	mov.w	r1, #60	; 0x3c
 801ee70:	bfac      	ite	ge
 801ee72:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 801ee76:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 801ee7a:	60a3      	str	r3, [r4, #8]
 801ee7c:	fbb2 f3f1 	udiv	r3, r2, r1
 801ee80:	fb01 2213 	mls	r2, r1, r3, r2
 801ee84:	6063      	str	r3, [r4, #4]
 801ee86:	6022      	str	r2, [r4, #0]
 801ee88:	1cc3      	adds	r3, r0, #3
 801ee8a:	2207      	movs	r2, #7
 801ee8c:	fb93 f2f2 	sdiv	r2, r3, r2
 801ee90:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 801ee94:	1a9b      	subs	r3, r3, r2
 801ee96:	bf48      	it	mi
 801ee98:	3307      	addmi	r3, #7
 801ee9a:	2800      	cmp	r0, #0
 801ee9c:	61a3      	str	r3, [r4, #24]
 801ee9e:	bfb8      	it	lt
 801eea0:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 801eea4:	4936      	ldr	r1, [pc, #216]	; (801ef80 <gmtime_r+0x154>)
 801eea6:	bfae      	itee	ge
 801eea8:	fb90 f1f1 	sdivge	r1, r0, r1
 801eeac:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 801eeb0:	fb93 f1f1 	sdivlt	r1, r3, r1
 801eeb4:	4b33      	ldr	r3, [pc, #204]	; (801ef84 <gmtime_r+0x158>)
 801eeb6:	fb03 0001 	mla	r0, r3, r1, r0
 801eeba:	f648 62ac 	movw	r2, #36524	; 0x8eac
 801eebe:	fbb0 f2f2 	udiv	r2, r0, r2
 801eec2:	4402      	add	r2, r0
 801eec4:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 801eec8:	fbb0 f3fc 	udiv	r3, r0, ip
 801eecc:	1ad2      	subs	r2, r2, r3
 801eece:	f240 176d 	movw	r7, #365	; 0x16d
 801eed2:	4b2d      	ldr	r3, [pc, #180]	; (801ef88 <gmtime_r+0x15c>)
 801eed4:	fbb0 f3f3 	udiv	r3, r0, r3
 801eed8:	2664      	movs	r6, #100	; 0x64
 801eeda:	1ad3      	subs	r3, r2, r3
 801eedc:	fbb3 f5f7 	udiv	r5, r3, r7
 801eee0:	fbb3 f3fc 	udiv	r3, r3, ip
 801eee4:	fbb5 f2f6 	udiv	r2, r5, r6
 801eee8:	1ad3      	subs	r3, r2, r3
 801eeea:	4403      	add	r3, r0
 801eeec:	fb07 3315 	mls	r3, r7, r5, r3
 801eef0:	2099      	movs	r0, #153	; 0x99
 801eef2:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 801eef6:	f10c 0c02 	add.w	ip, ip, #2
 801eefa:	f103 0e01 	add.w	lr, r3, #1
 801eefe:	fbbc f7f0 	udiv	r7, ip, r0
 801ef02:	4378      	muls	r0, r7
 801ef04:	3002      	adds	r0, #2
 801ef06:	f04f 0805 	mov.w	r8, #5
 801ef0a:	fbb0 f0f8 	udiv	r0, r0, r8
 801ef0e:	ebae 0000 	sub.w	r0, lr, r0
 801ef12:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 801ef16:	45f4      	cmp	ip, lr
 801ef18:	bf94      	ite	ls
 801ef1a:	f04f 0c02 	movls.w	ip, #2
 801ef1e:	f06f 0c09 	mvnhi.w	ip, #9
 801ef22:	4467      	add	r7, ip
 801ef24:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 801ef28:	fb0c 5101 	mla	r1, ip, r1, r5
 801ef2c:	2f01      	cmp	r7, #1
 801ef2e:	bf98      	it	ls
 801ef30:	3101      	addls	r1, #1
 801ef32:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 801ef36:	d30c      	bcc.n	801ef52 <gmtime_r+0x126>
 801ef38:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 801ef3c:	61e3      	str	r3, [r4, #28]
 801ef3e:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 801ef42:	2300      	movs	r3, #0
 801ef44:	60e0      	str	r0, [r4, #12]
 801ef46:	e9c4 7104 	strd	r7, r1, [r4, #16]
 801ef4a:	6223      	str	r3, [r4, #32]
 801ef4c:	4620      	mov	r0, r4
 801ef4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ef52:	f015 0f03 	tst.w	r5, #3
 801ef56:	d102      	bne.n	801ef5e <gmtime_r+0x132>
 801ef58:	fb06 5212 	mls	r2, r6, r2, r5
 801ef5c:	b95a      	cbnz	r2, 801ef76 <gmtime_r+0x14a>
 801ef5e:	f44f 76c8 	mov.w	r6, #400	; 0x190
 801ef62:	fbb5 f2f6 	udiv	r2, r5, r6
 801ef66:	fb06 5212 	mls	r2, r6, r2, r5
 801ef6a:	fab2 f282 	clz	r2, r2
 801ef6e:	0952      	lsrs	r2, r2, #5
 801ef70:	333b      	adds	r3, #59	; 0x3b
 801ef72:	4413      	add	r3, r2
 801ef74:	e7e2      	b.n	801ef3c <gmtime_r+0x110>
 801ef76:	2201      	movs	r2, #1
 801ef78:	e7fa      	b.n	801ef70 <gmtime_r+0x144>
 801ef7a:	bf00      	nop
 801ef7c:	00015180 	.word	0x00015180
 801ef80:	00023ab1 	.word	0x00023ab1
 801ef84:	fffdc54f 	.word	0xfffdc54f
 801ef88:	00023ab0 	.word	0x00023ab0

0801ef8c <_localeconv_r>:
 801ef8c:	4800      	ldr	r0, [pc, #0]	; (801ef90 <_localeconv_r+0x4>)
 801ef8e:	4770      	bx	lr
 801ef90:	200002b4 	.word	0x200002b4

0801ef94 <_lseek_r>:
 801ef94:	b538      	push	{r3, r4, r5, lr}
 801ef96:	4d07      	ldr	r5, [pc, #28]	; (801efb4 <_lseek_r+0x20>)
 801ef98:	4604      	mov	r4, r0
 801ef9a:	4608      	mov	r0, r1
 801ef9c:	4611      	mov	r1, r2
 801ef9e:	2200      	movs	r2, #0
 801efa0:	602a      	str	r2, [r5, #0]
 801efa2:	461a      	mov	r2, r3
 801efa4:	f001 fc40 	bl	8020828 <_lseek>
 801efa8:	1c43      	adds	r3, r0, #1
 801efaa:	d102      	bne.n	801efb2 <_lseek_r+0x1e>
 801efac:	682b      	ldr	r3, [r5, #0]
 801efae:	b103      	cbz	r3, 801efb2 <_lseek_r+0x1e>
 801efb0:	6023      	str	r3, [r4, #0]
 801efb2:	bd38      	pop	{r3, r4, r5, pc}
 801efb4:	20009d08 	.word	0x20009d08

0801efb8 <__swhatbuf_r>:
 801efb8:	b570      	push	{r4, r5, r6, lr}
 801efba:	460e      	mov	r6, r1
 801efbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801efc0:	2900      	cmp	r1, #0
 801efc2:	b096      	sub	sp, #88	; 0x58
 801efc4:	4614      	mov	r4, r2
 801efc6:	461d      	mov	r5, r3
 801efc8:	da07      	bge.n	801efda <__swhatbuf_r+0x22>
 801efca:	2300      	movs	r3, #0
 801efcc:	602b      	str	r3, [r5, #0]
 801efce:	89b3      	ldrh	r3, [r6, #12]
 801efd0:	061a      	lsls	r2, r3, #24
 801efd2:	d410      	bmi.n	801eff6 <__swhatbuf_r+0x3e>
 801efd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801efd8:	e00e      	b.n	801eff8 <__swhatbuf_r+0x40>
 801efda:	466a      	mov	r2, sp
 801efdc:	f001 fbd2 	bl	8020784 <_fstat_r>
 801efe0:	2800      	cmp	r0, #0
 801efe2:	dbf2      	blt.n	801efca <__swhatbuf_r+0x12>
 801efe4:	9a01      	ldr	r2, [sp, #4]
 801efe6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801efea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801efee:	425a      	negs	r2, r3
 801eff0:	415a      	adcs	r2, r3
 801eff2:	602a      	str	r2, [r5, #0]
 801eff4:	e7ee      	b.n	801efd4 <__swhatbuf_r+0x1c>
 801eff6:	2340      	movs	r3, #64	; 0x40
 801eff8:	2000      	movs	r0, #0
 801effa:	6023      	str	r3, [r4, #0]
 801effc:	b016      	add	sp, #88	; 0x58
 801effe:	bd70      	pop	{r4, r5, r6, pc}

0801f000 <__smakebuf_r>:
 801f000:	898b      	ldrh	r3, [r1, #12]
 801f002:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f004:	079d      	lsls	r5, r3, #30
 801f006:	4606      	mov	r6, r0
 801f008:	460c      	mov	r4, r1
 801f00a:	d507      	bpl.n	801f01c <__smakebuf_r+0x1c>
 801f00c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801f010:	6023      	str	r3, [r4, #0]
 801f012:	6123      	str	r3, [r4, #16]
 801f014:	2301      	movs	r3, #1
 801f016:	6163      	str	r3, [r4, #20]
 801f018:	b002      	add	sp, #8
 801f01a:	bd70      	pop	{r4, r5, r6, pc}
 801f01c:	ab01      	add	r3, sp, #4
 801f01e:	466a      	mov	r2, sp
 801f020:	f7ff ffca 	bl	801efb8 <__swhatbuf_r>
 801f024:	9900      	ldr	r1, [sp, #0]
 801f026:	4605      	mov	r5, r0
 801f028:	4630      	mov	r0, r6
 801f02a:	f7fb fffb 	bl	801b024 <_malloc_r>
 801f02e:	b948      	cbnz	r0, 801f044 <__smakebuf_r+0x44>
 801f030:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f034:	059a      	lsls	r2, r3, #22
 801f036:	d4ef      	bmi.n	801f018 <__smakebuf_r+0x18>
 801f038:	f023 0303 	bic.w	r3, r3, #3
 801f03c:	f043 0302 	orr.w	r3, r3, #2
 801f040:	81a3      	strh	r3, [r4, #12]
 801f042:	e7e3      	b.n	801f00c <__smakebuf_r+0xc>
 801f044:	4b0d      	ldr	r3, [pc, #52]	; (801f07c <__smakebuf_r+0x7c>)
 801f046:	62b3      	str	r3, [r6, #40]	; 0x28
 801f048:	89a3      	ldrh	r3, [r4, #12]
 801f04a:	6020      	str	r0, [r4, #0]
 801f04c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f050:	81a3      	strh	r3, [r4, #12]
 801f052:	9b00      	ldr	r3, [sp, #0]
 801f054:	6163      	str	r3, [r4, #20]
 801f056:	9b01      	ldr	r3, [sp, #4]
 801f058:	6120      	str	r0, [r4, #16]
 801f05a:	b15b      	cbz	r3, 801f074 <__smakebuf_r+0x74>
 801f05c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f060:	4630      	mov	r0, r6
 801f062:	f001 fba1 	bl	80207a8 <_isatty_r>
 801f066:	b128      	cbz	r0, 801f074 <__smakebuf_r+0x74>
 801f068:	89a3      	ldrh	r3, [r4, #12]
 801f06a:	f023 0303 	bic.w	r3, r3, #3
 801f06e:	f043 0301 	orr.w	r3, r3, #1
 801f072:	81a3      	strh	r3, [r4, #12]
 801f074:	89a0      	ldrh	r0, [r4, #12]
 801f076:	4305      	orrs	r5, r0
 801f078:	81a5      	strh	r5, [r4, #12]
 801f07a:	e7cd      	b.n	801f018 <__smakebuf_r+0x18>
 801f07c:	0801a5d9 	.word	0x0801a5d9

0801f080 <__ascii_mbtowc>:
 801f080:	b082      	sub	sp, #8
 801f082:	b901      	cbnz	r1, 801f086 <__ascii_mbtowc+0x6>
 801f084:	a901      	add	r1, sp, #4
 801f086:	b142      	cbz	r2, 801f09a <__ascii_mbtowc+0x1a>
 801f088:	b14b      	cbz	r3, 801f09e <__ascii_mbtowc+0x1e>
 801f08a:	7813      	ldrb	r3, [r2, #0]
 801f08c:	600b      	str	r3, [r1, #0]
 801f08e:	7812      	ldrb	r2, [r2, #0]
 801f090:	1e10      	subs	r0, r2, #0
 801f092:	bf18      	it	ne
 801f094:	2001      	movne	r0, #1
 801f096:	b002      	add	sp, #8
 801f098:	4770      	bx	lr
 801f09a:	4610      	mov	r0, r2
 801f09c:	e7fb      	b.n	801f096 <__ascii_mbtowc+0x16>
 801f09e:	f06f 0001 	mvn.w	r0, #1
 801f0a2:	e7f8      	b.n	801f096 <__ascii_mbtowc+0x16>

0801f0a4 <__malloc_lock>:
 801f0a4:	4801      	ldr	r0, [pc, #4]	; (801f0ac <__malloc_lock+0x8>)
 801f0a6:	f7fb bcab 	b.w	801aa00 <__retarget_lock_acquire_recursive>
 801f0aa:	bf00      	nop
 801f0ac:	20009d00 	.word	0x20009d00

0801f0b0 <__malloc_unlock>:
 801f0b0:	4801      	ldr	r0, [pc, #4]	; (801f0b8 <__malloc_unlock+0x8>)
 801f0b2:	f7fb bca7 	b.w	801aa04 <__retarget_lock_release_recursive>
 801f0b6:	bf00      	nop
 801f0b8:	20009d00 	.word	0x20009d00

0801f0bc <_Balloc>:
 801f0bc:	b570      	push	{r4, r5, r6, lr}
 801f0be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801f0c0:	4604      	mov	r4, r0
 801f0c2:	460d      	mov	r5, r1
 801f0c4:	b976      	cbnz	r6, 801f0e4 <_Balloc+0x28>
 801f0c6:	2010      	movs	r0, #16
 801f0c8:	f7fb fc9e 	bl	801aa08 <malloc>
 801f0cc:	4602      	mov	r2, r0
 801f0ce:	6260      	str	r0, [r4, #36]	; 0x24
 801f0d0:	b920      	cbnz	r0, 801f0dc <_Balloc+0x20>
 801f0d2:	4b18      	ldr	r3, [pc, #96]	; (801f134 <_Balloc+0x78>)
 801f0d4:	4818      	ldr	r0, [pc, #96]	; (801f138 <_Balloc+0x7c>)
 801f0d6:	2166      	movs	r1, #102	; 0x66
 801f0d8:	f7fe fb64 	bl	801d7a4 <__assert_func>
 801f0dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801f0e0:	6006      	str	r6, [r0, #0]
 801f0e2:	60c6      	str	r6, [r0, #12]
 801f0e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801f0e6:	68f3      	ldr	r3, [r6, #12]
 801f0e8:	b183      	cbz	r3, 801f10c <_Balloc+0x50>
 801f0ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f0ec:	68db      	ldr	r3, [r3, #12]
 801f0ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801f0f2:	b9b8      	cbnz	r0, 801f124 <_Balloc+0x68>
 801f0f4:	2101      	movs	r1, #1
 801f0f6:	fa01 f605 	lsl.w	r6, r1, r5
 801f0fa:	1d72      	adds	r2, r6, #5
 801f0fc:	0092      	lsls	r2, r2, #2
 801f0fe:	4620      	mov	r0, r4
 801f100:	f000 fc97 	bl	801fa32 <_calloc_r>
 801f104:	b160      	cbz	r0, 801f120 <_Balloc+0x64>
 801f106:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801f10a:	e00e      	b.n	801f12a <_Balloc+0x6e>
 801f10c:	2221      	movs	r2, #33	; 0x21
 801f10e:	2104      	movs	r1, #4
 801f110:	4620      	mov	r0, r4
 801f112:	f000 fc8e 	bl	801fa32 <_calloc_r>
 801f116:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f118:	60f0      	str	r0, [r6, #12]
 801f11a:	68db      	ldr	r3, [r3, #12]
 801f11c:	2b00      	cmp	r3, #0
 801f11e:	d1e4      	bne.n	801f0ea <_Balloc+0x2e>
 801f120:	2000      	movs	r0, #0
 801f122:	bd70      	pop	{r4, r5, r6, pc}
 801f124:	6802      	ldr	r2, [r0, #0]
 801f126:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801f12a:	2300      	movs	r3, #0
 801f12c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801f130:	e7f7      	b.n	801f122 <_Balloc+0x66>
 801f132:	bf00      	nop
 801f134:	08022ca0 	.word	0x08022ca0
 801f138:	08023034 	.word	0x08023034

0801f13c <_Bfree>:
 801f13c:	b570      	push	{r4, r5, r6, lr}
 801f13e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801f140:	4605      	mov	r5, r0
 801f142:	460c      	mov	r4, r1
 801f144:	b976      	cbnz	r6, 801f164 <_Bfree+0x28>
 801f146:	2010      	movs	r0, #16
 801f148:	f7fb fc5e 	bl	801aa08 <malloc>
 801f14c:	4602      	mov	r2, r0
 801f14e:	6268      	str	r0, [r5, #36]	; 0x24
 801f150:	b920      	cbnz	r0, 801f15c <_Bfree+0x20>
 801f152:	4b09      	ldr	r3, [pc, #36]	; (801f178 <_Bfree+0x3c>)
 801f154:	4809      	ldr	r0, [pc, #36]	; (801f17c <_Bfree+0x40>)
 801f156:	218a      	movs	r1, #138	; 0x8a
 801f158:	f7fe fb24 	bl	801d7a4 <__assert_func>
 801f15c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801f160:	6006      	str	r6, [r0, #0]
 801f162:	60c6      	str	r6, [r0, #12]
 801f164:	b13c      	cbz	r4, 801f176 <_Bfree+0x3a>
 801f166:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801f168:	6862      	ldr	r2, [r4, #4]
 801f16a:	68db      	ldr	r3, [r3, #12]
 801f16c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801f170:	6021      	str	r1, [r4, #0]
 801f172:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801f176:	bd70      	pop	{r4, r5, r6, pc}
 801f178:	08022ca0 	.word	0x08022ca0
 801f17c:	08023034 	.word	0x08023034

0801f180 <__multadd>:
 801f180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f184:	690e      	ldr	r6, [r1, #16]
 801f186:	4607      	mov	r7, r0
 801f188:	4698      	mov	r8, r3
 801f18a:	460c      	mov	r4, r1
 801f18c:	f101 0014 	add.w	r0, r1, #20
 801f190:	2300      	movs	r3, #0
 801f192:	6805      	ldr	r5, [r0, #0]
 801f194:	b2a9      	uxth	r1, r5
 801f196:	fb02 8101 	mla	r1, r2, r1, r8
 801f19a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801f19e:	0c2d      	lsrs	r5, r5, #16
 801f1a0:	fb02 c505 	mla	r5, r2, r5, ip
 801f1a4:	b289      	uxth	r1, r1
 801f1a6:	3301      	adds	r3, #1
 801f1a8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801f1ac:	429e      	cmp	r6, r3
 801f1ae:	f840 1b04 	str.w	r1, [r0], #4
 801f1b2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801f1b6:	dcec      	bgt.n	801f192 <__multadd+0x12>
 801f1b8:	f1b8 0f00 	cmp.w	r8, #0
 801f1bc:	d022      	beq.n	801f204 <__multadd+0x84>
 801f1be:	68a3      	ldr	r3, [r4, #8]
 801f1c0:	42b3      	cmp	r3, r6
 801f1c2:	dc19      	bgt.n	801f1f8 <__multadd+0x78>
 801f1c4:	6861      	ldr	r1, [r4, #4]
 801f1c6:	4638      	mov	r0, r7
 801f1c8:	3101      	adds	r1, #1
 801f1ca:	f7ff ff77 	bl	801f0bc <_Balloc>
 801f1ce:	4605      	mov	r5, r0
 801f1d0:	b928      	cbnz	r0, 801f1de <__multadd+0x5e>
 801f1d2:	4602      	mov	r2, r0
 801f1d4:	4b0d      	ldr	r3, [pc, #52]	; (801f20c <__multadd+0x8c>)
 801f1d6:	480e      	ldr	r0, [pc, #56]	; (801f210 <__multadd+0x90>)
 801f1d8:	21b5      	movs	r1, #181	; 0xb5
 801f1da:	f7fe fae3 	bl	801d7a4 <__assert_func>
 801f1de:	6922      	ldr	r2, [r4, #16]
 801f1e0:	3202      	adds	r2, #2
 801f1e2:	f104 010c 	add.w	r1, r4, #12
 801f1e6:	0092      	lsls	r2, r2, #2
 801f1e8:	300c      	adds	r0, #12
 801f1ea:	f7fb fc1d 	bl	801aa28 <memcpy>
 801f1ee:	4621      	mov	r1, r4
 801f1f0:	4638      	mov	r0, r7
 801f1f2:	f7ff ffa3 	bl	801f13c <_Bfree>
 801f1f6:	462c      	mov	r4, r5
 801f1f8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801f1fc:	3601      	adds	r6, #1
 801f1fe:	f8c3 8014 	str.w	r8, [r3, #20]
 801f202:	6126      	str	r6, [r4, #16]
 801f204:	4620      	mov	r0, r4
 801f206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f20a:	bf00      	nop
 801f20c:	08022fa5 	.word	0x08022fa5
 801f210:	08023034 	.word	0x08023034

0801f214 <__s2b>:
 801f214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f218:	460c      	mov	r4, r1
 801f21a:	4615      	mov	r5, r2
 801f21c:	461f      	mov	r7, r3
 801f21e:	2209      	movs	r2, #9
 801f220:	3308      	adds	r3, #8
 801f222:	4606      	mov	r6, r0
 801f224:	fb93 f3f2 	sdiv	r3, r3, r2
 801f228:	2100      	movs	r1, #0
 801f22a:	2201      	movs	r2, #1
 801f22c:	429a      	cmp	r2, r3
 801f22e:	db09      	blt.n	801f244 <__s2b+0x30>
 801f230:	4630      	mov	r0, r6
 801f232:	f7ff ff43 	bl	801f0bc <_Balloc>
 801f236:	b940      	cbnz	r0, 801f24a <__s2b+0x36>
 801f238:	4602      	mov	r2, r0
 801f23a:	4b19      	ldr	r3, [pc, #100]	; (801f2a0 <__s2b+0x8c>)
 801f23c:	4819      	ldr	r0, [pc, #100]	; (801f2a4 <__s2b+0x90>)
 801f23e:	21ce      	movs	r1, #206	; 0xce
 801f240:	f7fe fab0 	bl	801d7a4 <__assert_func>
 801f244:	0052      	lsls	r2, r2, #1
 801f246:	3101      	adds	r1, #1
 801f248:	e7f0      	b.n	801f22c <__s2b+0x18>
 801f24a:	9b08      	ldr	r3, [sp, #32]
 801f24c:	6143      	str	r3, [r0, #20]
 801f24e:	2d09      	cmp	r5, #9
 801f250:	f04f 0301 	mov.w	r3, #1
 801f254:	6103      	str	r3, [r0, #16]
 801f256:	dd16      	ble.n	801f286 <__s2b+0x72>
 801f258:	f104 0909 	add.w	r9, r4, #9
 801f25c:	46c8      	mov	r8, r9
 801f25e:	442c      	add	r4, r5
 801f260:	f818 3b01 	ldrb.w	r3, [r8], #1
 801f264:	4601      	mov	r1, r0
 801f266:	3b30      	subs	r3, #48	; 0x30
 801f268:	220a      	movs	r2, #10
 801f26a:	4630      	mov	r0, r6
 801f26c:	f7ff ff88 	bl	801f180 <__multadd>
 801f270:	45a0      	cmp	r8, r4
 801f272:	d1f5      	bne.n	801f260 <__s2b+0x4c>
 801f274:	f1a5 0408 	sub.w	r4, r5, #8
 801f278:	444c      	add	r4, r9
 801f27a:	1b2d      	subs	r5, r5, r4
 801f27c:	1963      	adds	r3, r4, r5
 801f27e:	42bb      	cmp	r3, r7
 801f280:	db04      	blt.n	801f28c <__s2b+0x78>
 801f282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f286:	340a      	adds	r4, #10
 801f288:	2509      	movs	r5, #9
 801f28a:	e7f6      	b.n	801f27a <__s2b+0x66>
 801f28c:	f814 3b01 	ldrb.w	r3, [r4], #1
 801f290:	4601      	mov	r1, r0
 801f292:	3b30      	subs	r3, #48	; 0x30
 801f294:	220a      	movs	r2, #10
 801f296:	4630      	mov	r0, r6
 801f298:	f7ff ff72 	bl	801f180 <__multadd>
 801f29c:	e7ee      	b.n	801f27c <__s2b+0x68>
 801f29e:	bf00      	nop
 801f2a0:	08022fa5 	.word	0x08022fa5
 801f2a4:	08023034 	.word	0x08023034

0801f2a8 <__hi0bits>:
 801f2a8:	0c03      	lsrs	r3, r0, #16
 801f2aa:	041b      	lsls	r3, r3, #16
 801f2ac:	b9d3      	cbnz	r3, 801f2e4 <__hi0bits+0x3c>
 801f2ae:	0400      	lsls	r0, r0, #16
 801f2b0:	2310      	movs	r3, #16
 801f2b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801f2b6:	bf04      	itt	eq
 801f2b8:	0200      	lsleq	r0, r0, #8
 801f2ba:	3308      	addeq	r3, #8
 801f2bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801f2c0:	bf04      	itt	eq
 801f2c2:	0100      	lsleq	r0, r0, #4
 801f2c4:	3304      	addeq	r3, #4
 801f2c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801f2ca:	bf04      	itt	eq
 801f2cc:	0080      	lsleq	r0, r0, #2
 801f2ce:	3302      	addeq	r3, #2
 801f2d0:	2800      	cmp	r0, #0
 801f2d2:	db05      	blt.n	801f2e0 <__hi0bits+0x38>
 801f2d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801f2d8:	f103 0301 	add.w	r3, r3, #1
 801f2dc:	bf08      	it	eq
 801f2de:	2320      	moveq	r3, #32
 801f2e0:	4618      	mov	r0, r3
 801f2e2:	4770      	bx	lr
 801f2e4:	2300      	movs	r3, #0
 801f2e6:	e7e4      	b.n	801f2b2 <__hi0bits+0xa>

0801f2e8 <__lo0bits>:
 801f2e8:	6803      	ldr	r3, [r0, #0]
 801f2ea:	f013 0207 	ands.w	r2, r3, #7
 801f2ee:	4601      	mov	r1, r0
 801f2f0:	d00b      	beq.n	801f30a <__lo0bits+0x22>
 801f2f2:	07da      	lsls	r2, r3, #31
 801f2f4:	d424      	bmi.n	801f340 <__lo0bits+0x58>
 801f2f6:	0798      	lsls	r0, r3, #30
 801f2f8:	bf49      	itett	mi
 801f2fa:	085b      	lsrmi	r3, r3, #1
 801f2fc:	089b      	lsrpl	r3, r3, #2
 801f2fe:	2001      	movmi	r0, #1
 801f300:	600b      	strmi	r3, [r1, #0]
 801f302:	bf5c      	itt	pl
 801f304:	600b      	strpl	r3, [r1, #0]
 801f306:	2002      	movpl	r0, #2
 801f308:	4770      	bx	lr
 801f30a:	b298      	uxth	r0, r3
 801f30c:	b9b0      	cbnz	r0, 801f33c <__lo0bits+0x54>
 801f30e:	0c1b      	lsrs	r3, r3, #16
 801f310:	2010      	movs	r0, #16
 801f312:	f013 0fff 	tst.w	r3, #255	; 0xff
 801f316:	bf04      	itt	eq
 801f318:	0a1b      	lsreq	r3, r3, #8
 801f31a:	3008      	addeq	r0, #8
 801f31c:	071a      	lsls	r2, r3, #28
 801f31e:	bf04      	itt	eq
 801f320:	091b      	lsreq	r3, r3, #4
 801f322:	3004      	addeq	r0, #4
 801f324:	079a      	lsls	r2, r3, #30
 801f326:	bf04      	itt	eq
 801f328:	089b      	lsreq	r3, r3, #2
 801f32a:	3002      	addeq	r0, #2
 801f32c:	07da      	lsls	r2, r3, #31
 801f32e:	d403      	bmi.n	801f338 <__lo0bits+0x50>
 801f330:	085b      	lsrs	r3, r3, #1
 801f332:	f100 0001 	add.w	r0, r0, #1
 801f336:	d005      	beq.n	801f344 <__lo0bits+0x5c>
 801f338:	600b      	str	r3, [r1, #0]
 801f33a:	4770      	bx	lr
 801f33c:	4610      	mov	r0, r2
 801f33e:	e7e8      	b.n	801f312 <__lo0bits+0x2a>
 801f340:	2000      	movs	r0, #0
 801f342:	4770      	bx	lr
 801f344:	2020      	movs	r0, #32
 801f346:	4770      	bx	lr

0801f348 <__i2b>:
 801f348:	b510      	push	{r4, lr}
 801f34a:	460c      	mov	r4, r1
 801f34c:	2101      	movs	r1, #1
 801f34e:	f7ff feb5 	bl	801f0bc <_Balloc>
 801f352:	4602      	mov	r2, r0
 801f354:	b928      	cbnz	r0, 801f362 <__i2b+0x1a>
 801f356:	4b05      	ldr	r3, [pc, #20]	; (801f36c <__i2b+0x24>)
 801f358:	4805      	ldr	r0, [pc, #20]	; (801f370 <__i2b+0x28>)
 801f35a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801f35e:	f7fe fa21 	bl	801d7a4 <__assert_func>
 801f362:	2301      	movs	r3, #1
 801f364:	6144      	str	r4, [r0, #20]
 801f366:	6103      	str	r3, [r0, #16]
 801f368:	bd10      	pop	{r4, pc}
 801f36a:	bf00      	nop
 801f36c:	08022fa5 	.word	0x08022fa5
 801f370:	08023034 	.word	0x08023034

0801f374 <__multiply>:
 801f374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f378:	4614      	mov	r4, r2
 801f37a:	690a      	ldr	r2, [r1, #16]
 801f37c:	6923      	ldr	r3, [r4, #16]
 801f37e:	429a      	cmp	r2, r3
 801f380:	bfb8      	it	lt
 801f382:	460b      	movlt	r3, r1
 801f384:	460d      	mov	r5, r1
 801f386:	bfbc      	itt	lt
 801f388:	4625      	movlt	r5, r4
 801f38a:	461c      	movlt	r4, r3
 801f38c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801f390:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801f394:	68ab      	ldr	r3, [r5, #8]
 801f396:	6869      	ldr	r1, [r5, #4]
 801f398:	eb0a 0709 	add.w	r7, sl, r9
 801f39c:	42bb      	cmp	r3, r7
 801f39e:	b085      	sub	sp, #20
 801f3a0:	bfb8      	it	lt
 801f3a2:	3101      	addlt	r1, #1
 801f3a4:	f7ff fe8a 	bl	801f0bc <_Balloc>
 801f3a8:	b930      	cbnz	r0, 801f3b8 <__multiply+0x44>
 801f3aa:	4602      	mov	r2, r0
 801f3ac:	4b42      	ldr	r3, [pc, #264]	; (801f4b8 <__multiply+0x144>)
 801f3ae:	4843      	ldr	r0, [pc, #268]	; (801f4bc <__multiply+0x148>)
 801f3b0:	f240 115d 	movw	r1, #349	; 0x15d
 801f3b4:	f7fe f9f6 	bl	801d7a4 <__assert_func>
 801f3b8:	f100 0614 	add.w	r6, r0, #20
 801f3bc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801f3c0:	4633      	mov	r3, r6
 801f3c2:	2200      	movs	r2, #0
 801f3c4:	4543      	cmp	r3, r8
 801f3c6:	d31e      	bcc.n	801f406 <__multiply+0x92>
 801f3c8:	f105 0c14 	add.w	ip, r5, #20
 801f3cc:	f104 0314 	add.w	r3, r4, #20
 801f3d0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801f3d4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801f3d8:	9202      	str	r2, [sp, #8]
 801f3da:	ebac 0205 	sub.w	r2, ip, r5
 801f3de:	3a15      	subs	r2, #21
 801f3e0:	f022 0203 	bic.w	r2, r2, #3
 801f3e4:	3204      	adds	r2, #4
 801f3e6:	f105 0115 	add.w	r1, r5, #21
 801f3ea:	458c      	cmp	ip, r1
 801f3ec:	bf38      	it	cc
 801f3ee:	2204      	movcc	r2, #4
 801f3f0:	9201      	str	r2, [sp, #4]
 801f3f2:	9a02      	ldr	r2, [sp, #8]
 801f3f4:	9303      	str	r3, [sp, #12]
 801f3f6:	429a      	cmp	r2, r3
 801f3f8:	d808      	bhi.n	801f40c <__multiply+0x98>
 801f3fa:	2f00      	cmp	r7, #0
 801f3fc:	dc55      	bgt.n	801f4aa <__multiply+0x136>
 801f3fe:	6107      	str	r7, [r0, #16]
 801f400:	b005      	add	sp, #20
 801f402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f406:	f843 2b04 	str.w	r2, [r3], #4
 801f40a:	e7db      	b.n	801f3c4 <__multiply+0x50>
 801f40c:	f8b3 a000 	ldrh.w	sl, [r3]
 801f410:	f1ba 0f00 	cmp.w	sl, #0
 801f414:	d020      	beq.n	801f458 <__multiply+0xe4>
 801f416:	f105 0e14 	add.w	lr, r5, #20
 801f41a:	46b1      	mov	r9, r6
 801f41c:	2200      	movs	r2, #0
 801f41e:	f85e 4b04 	ldr.w	r4, [lr], #4
 801f422:	f8d9 b000 	ldr.w	fp, [r9]
 801f426:	b2a1      	uxth	r1, r4
 801f428:	fa1f fb8b 	uxth.w	fp, fp
 801f42c:	fb0a b101 	mla	r1, sl, r1, fp
 801f430:	4411      	add	r1, r2
 801f432:	f8d9 2000 	ldr.w	r2, [r9]
 801f436:	0c24      	lsrs	r4, r4, #16
 801f438:	0c12      	lsrs	r2, r2, #16
 801f43a:	fb0a 2404 	mla	r4, sl, r4, r2
 801f43e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801f442:	b289      	uxth	r1, r1
 801f444:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801f448:	45f4      	cmp	ip, lr
 801f44a:	f849 1b04 	str.w	r1, [r9], #4
 801f44e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801f452:	d8e4      	bhi.n	801f41e <__multiply+0xaa>
 801f454:	9901      	ldr	r1, [sp, #4]
 801f456:	5072      	str	r2, [r6, r1]
 801f458:	9a03      	ldr	r2, [sp, #12]
 801f45a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801f45e:	3304      	adds	r3, #4
 801f460:	f1b9 0f00 	cmp.w	r9, #0
 801f464:	d01f      	beq.n	801f4a6 <__multiply+0x132>
 801f466:	6834      	ldr	r4, [r6, #0]
 801f468:	f105 0114 	add.w	r1, r5, #20
 801f46c:	46b6      	mov	lr, r6
 801f46e:	f04f 0a00 	mov.w	sl, #0
 801f472:	880a      	ldrh	r2, [r1, #0]
 801f474:	f8be b002 	ldrh.w	fp, [lr, #2]
 801f478:	fb09 b202 	mla	r2, r9, r2, fp
 801f47c:	4492      	add	sl, r2
 801f47e:	b2a4      	uxth	r4, r4
 801f480:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801f484:	f84e 4b04 	str.w	r4, [lr], #4
 801f488:	f851 4b04 	ldr.w	r4, [r1], #4
 801f48c:	f8be 2000 	ldrh.w	r2, [lr]
 801f490:	0c24      	lsrs	r4, r4, #16
 801f492:	fb09 2404 	mla	r4, r9, r4, r2
 801f496:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801f49a:	458c      	cmp	ip, r1
 801f49c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801f4a0:	d8e7      	bhi.n	801f472 <__multiply+0xfe>
 801f4a2:	9a01      	ldr	r2, [sp, #4]
 801f4a4:	50b4      	str	r4, [r6, r2]
 801f4a6:	3604      	adds	r6, #4
 801f4a8:	e7a3      	b.n	801f3f2 <__multiply+0x7e>
 801f4aa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801f4ae:	2b00      	cmp	r3, #0
 801f4b0:	d1a5      	bne.n	801f3fe <__multiply+0x8a>
 801f4b2:	3f01      	subs	r7, #1
 801f4b4:	e7a1      	b.n	801f3fa <__multiply+0x86>
 801f4b6:	bf00      	nop
 801f4b8:	08022fa5 	.word	0x08022fa5
 801f4bc:	08023034 	.word	0x08023034

0801f4c0 <__pow5mult>:
 801f4c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f4c4:	4615      	mov	r5, r2
 801f4c6:	f012 0203 	ands.w	r2, r2, #3
 801f4ca:	4606      	mov	r6, r0
 801f4cc:	460f      	mov	r7, r1
 801f4ce:	d007      	beq.n	801f4e0 <__pow5mult+0x20>
 801f4d0:	4c25      	ldr	r4, [pc, #148]	; (801f568 <__pow5mult+0xa8>)
 801f4d2:	3a01      	subs	r2, #1
 801f4d4:	2300      	movs	r3, #0
 801f4d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801f4da:	f7ff fe51 	bl	801f180 <__multadd>
 801f4de:	4607      	mov	r7, r0
 801f4e0:	10ad      	asrs	r5, r5, #2
 801f4e2:	d03d      	beq.n	801f560 <__pow5mult+0xa0>
 801f4e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801f4e6:	b97c      	cbnz	r4, 801f508 <__pow5mult+0x48>
 801f4e8:	2010      	movs	r0, #16
 801f4ea:	f7fb fa8d 	bl	801aa08 <malloc>
 801f4ee:	4602      	mov	r2, r0
 801f4f0:	6270      	str	r0, [r6, #36]	; 0x24
 801f4f2:	b928      	cbnz	r0, 801f500 <__pow5mult+0x40>
 801f4f4:	4b1d      	ldr	r3, [pc, #116]	; (801f56c <__pow5mult+0xac>)
 801f4f6:	481e      	ldr	r0, [pc, #120]	; (801f570 <__pow5mult+0xb0>)
 801f4f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801f4fc:	f7fe f952 	bl	801d7a4 <__assert_func>
 801f500:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801f504:	6004      	str	r4, [r0, #0]
 801f506:	60c4      	str	r4, [r0, #12]
 801f508:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801f50c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801f510:	b94c      	cbnz	r4, 801f526 <__pow5mult+0x66>
 801f512:	f240 2171 	movw	r1, #625	; 0x271
 801f516:	4630      	mov	r0, r6
 801f518:	f7ff ff16 	bl	801f348 <__i2b>
 801f51c:	2300      	movs	r3, #0
 801f51e:	f8c8 0008 	str.w	r0, [r8, #8]
 801f522:	4604      	mov	r4, r0
 801f524:	6003      	str	r3, [r0, #0]
 801f526:	f04f 0900 	mov.w	r9, #0
 801f52a:	07eb      	lsls	r3, r5, #31
 801f52c:	d50a      	bpl.n	801f544 <__pow5mult+0x84>
 801f52e:	4639      	mov	r1, r7
 801f530:	4622      	mov	r2, r4
 801f532:	4630      	mov	r0, r6
 801f534:	f7ff ff1e 	bl	801f374 <__multiply>
 801f538:	4639      	mov	r1, r7
 801f53a:	4680      	mov	r8, r0
 801f53c:	4630      	mov	r0, r6
 801f53e:	f7ff fdfd 	bl	801f13c <_Bfree>
 801f542:	4647      	mov	r7, r8
 801f544:	106d      	asrs	r5, r5, #1
 801f546:	d00b      	beq.n	801f560 <__pow5mult+0xa0>
 801f548:	6820      	ldr	r0, [r4, #0]
 801f54a:	b938      	cbnz	r0, 801f55c <__pow5mult+0x9c>
 801f54c:	4622      	mov	r2, r4
 801f54e:	4621      	mov	r1, r4
 801f550:	4630      	mov	r0, r6
 801f552:	f7ff ff0f 	bl	801f374 <__multiply>
 801f556:	6020      	str	r0, [r4, #0]
 801f558:	f8c0 9000 	str.w	r9, [r0]
 801f55c:	4604      	mov	r4, r0
 801f55e:	e7e4      	b.n	801f52a <__pow5mult+0x6a>
 801f560:	4638      	mov	r0, r7
 801f562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f566:	bf00      	nop
 801f568:	08023188 	.word	0x08023188
 801f56c:	08022ca0 	.word	0x08022ca0
 801f570:	08023034 	.word	0x08023034

0801f574 <__lshift>:
 801f574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f578:	460c      	mov	r4, r1
 801f57a:	6849      	ldr	r1, [r1, #4]
 801f57c:	6923      	ldr	r3, [r4, #16]
 801f57e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801f582:	68a3      	ldr	r3, [r4, #8]
 801f584:	4607      	mov	r7, r0
 801f586:	4691      	mov	r9, r2
 801f588:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801f58c:	f108 0601 	add.w	r6, r8, #1
 801f590:	42b3      	cmp	r3, r6
 801f592:	db0b      	blt.n	801f5ac <__lshift+0x38>
 801f594:	4638      	mov	r0, r7
 801f596:	f7ff fd91 	bl	801f0bc <_Balloc>
 801f59a:	4605      	mov	r5, r0
 801f59c:	b948      	cbnz	r0, 801f5b2 <__lshift+0x3e>
 801f59e:	4602      	mov	r2, r0
 801f5a0:	4b28      	ldr	r3, [pc, #160]	; (801f644 <__lshift+0xd0>)
 801f5a2:	4829      	ldr	r0, [pc, #164]	; (801f648 <__lshift+0xd4>)
 801f5a4:	f240 11d9 	movw	r1, #473	; 0x1d9
 801f5a8:	f7fe f8fc 	bl	801d7a4 <__assert_func>
 801f5ac:	3101      	adds	r1, #1
 801f5ae:	005b      	lsls	r3, r3, #1
 801f5b0:	e7ee      	b.n	801f590 <__lshift+0x1c>
 801f5b2:	2300      	movs	r3, #0
 801f5b4:	f100 0114 	add.w	r1, r0, #20
 801f5b8:	f100 0210 	add.w	r2, r0, #16
 801f5bc:	4618      	mov	r0, r3
 801f5be:	4553      	cmp	r3, sl
 801f5c0:	db33      	blt.n	801f62a <__lshift+0xb6>
 801f5c2:	6920      	ldr	r0, [r4, #16]
 801f5c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801f5c8:	f104 0314 	add.w	r3, r4, #20
 801f5cc:	f019 091f 	ands.w	r9, r9, #31
 801f5d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801f5d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801f5d8:	d02b      	beq.n	801f632 <__lshift+0xbe>
 801f5da:	f1c9 0e20 	rsb	lr, r9, #32
 801f5de:	468a      	mov	sl, r1
 801f5e0:	2200      	movs	r2, #0
 801f5e2:	6818      	ldr	r0, [r3, #0]
 801f5e4:	fa00 f009 	lsl.w	r0, r0, r9
 801f5e8:	4302      	orrs	r2, r0
 801f5ea:	f84a 2b04 	str.w	r2, [sl], #4
 801f5ee:	f853 2b04 	ldr.w	r2, [r3], #4
 801f5f2:	459c      	cmp	ip, r3
 801f5f4:	fa22 f20e 	lsr.w	r2, r2, lr
 801f5f8:	d8f3      	bhi.n	801f5e2 <__lshift+0x6e>
 801f5fa:	ebac 0304 	sub.w	r3, ip, r4
 801f5fe:	3b15      	subs	r3, #21
 801f600:	f023 0303 	bic.w	r3, r3, #3
 801f604:	3304      	adds	r3, #4
 801f606:	f104 0015 	add.w	r0, r4, #21
 801f60a:	4584      	cmp	ip, r0
 801f60c:	bf38      	it	cc
 801f60e:	2304      	movcc	r3, #4
 801f610:	50ca      	str	r2, [r1, r3]
 801f612:	b10a      	cbz	r2, 801f618 <__lshift+0xa4>
 801f614:	f108 0602 	add.w	r6, r8, #2
 801f618:	3e01      	subs	r6, #1
 801f61a:	4638      	mov	r0, r7
 801f61c:	612e      	str	r6, [r5, #16]
 801f61e:	4621      	mov	r1, r4
 801f620:	f7ff fd8c 	bl	801f13c <_Bfree>
 801f624:	4628      	mov	r0, r5
 801f626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f62a:	f842 0f04 	str.w	r0, [r2, #4]!
 801f62e:	3301      	adds	r3, #1
 801f630:	e7c5      	b.n	801f5be <__lshift+0x4a>
 801f632:	3904      	subs	r1, #4
 801f634:	f853 2b04 	ldr.w	r2, [r3], #4
 801f638:	f841 2f04 	str.w	r2, [r1, #4]!
 801f63c:	459c      	cmp	ip, r3
 801f63e:	d8f9      	bhi.n	801f634 <__lshift+0xc0>
 801f640:	e7ea      	b.n	801f618 <__lshift+0xa4>
 801f642:	bf00      	nop
 801f644:	08022fa5 	.word	0x08022fa5
 801f648:	08023034 	.word	0x08023034

0801f64c <__mcmp>:
 801f64c:	b530      	push	{r4, r5, lr}
 801f64e:	6902      	ldr	r2, [r0, #16]
 801f650:	690c      	ldr	r4, [r1, #16]
 801f652:	1b12      	subs	r2, r2, r4
 801f654:	d10e      	bne.n	801f674 <__mcmp+0x28>
 801f656:	f100 0314 	add.w	r3, r0, #20
 801f65a:	3114      	adds	r1, #20
 801f65c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801f660:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801f664:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801f668:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801f66c:	42a5      	cmp	r5, r4
 801f66e:	d003      	beq.n	801f678 <__mcmp+0x2c>
 801f670:	d305      	bcc.n	801f67e <__mcmp+0x32>
 801f672:	2201      	movs	r2, #1
 801f674:	4610      	mov	r0, r2
 801f676:	bd30      	pop	{r4, r5, pc}
 801f678:	4283      	cmp	r3, r0
 801f67a:	d3f3      	bcc.n	801f664 <__mcmp+0x18>
 801f67c:	e7fa      	b.n	801f674 <__mcmp+0x28>
 801f67e:	f04f 32ff 	mov.w	r2, #4294967295
 801f682:	e7f7      	b.n	801f674 <__mcmp+0x28>

0801f684 <__mdiff>:
 801f684:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f688:	460c      	mov	r4, r1
 801f68a:	4606      	mov	r6, r0
 801f68c:	4611      	mov	r1, r2
 801f68e:	4620      	mov	r0, r4
 801f690:	4617      	mov	r7, r2
 801f692:	f7ff ffdb 	bl	801f64c <__mcmp>
 801f696:	1e05      	subs	r5, r0, #0
 801f698:	d110      	bne.n	801f6bc <__mdiff+0x38>
 801f69a:	4629      	mov	r1, r5
 801f69c:	4630      	mov	r0, r6
 801f69e:	f7ff fd0d 	bl	801f0bc <_Balloc>
 801f6a2:	b930      	cbnz	r0, 801f6b2 <__mdiff+0x2e>
 801f6a4:	4b39      	ldr	r3, [pc, #228]	; (801f78c <__mdiff+0x108>)
 801f6a6:	4602      	mov	r2, r0
 801f6a8:	f240 2132 	movw	r1, #562	; 0x232
 801f6ac:	4838      	ldr	r0, [pc, #224]	; (801f790 <__mdiff+0x10c>)
 801f6ae:	f7fe f879 	bl	801d7a4 <__assert_func>
 801f6b2:	2301      	movs	r3, #1
 801f6b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801f6b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f6bc:	bfa4      	itt	ge
 801f6be:	463b      	movge	r3, r7
 801f6c0:	4627      	movge	r7, r4
 801f6c2:	4630      	mov	r0, r6
 801f6c4:	6879      	ldr	r1, [r7, #4]
 801f6c6:	bfa6      	itte	ge
 801f6c8:	461c      	movge	r4, r3
 801f6ca:	2500      	movge	r5, #0
 801f6cc:	2501      	movlt	r5, #1
 801f6ce:	f7ff fcf5 	bl	801f0bc <_Balloc>
 801f6d2:	b920      	cbnz	r0, 801f6de <__mdiff+0x5a>
 801f6d4:	4b2d      	ldr	r3, [pc, #180]	; (801f78c <__mdiff+0x108>)
 801f6d6:	4602      	mov	r2, r0
 801f6d8:	f44f 7110 	mov.w	r1, #576	; 0x240
 801f6dc:	e7e6      	b.n	801f6ac <__mdiff+0x28>
 801f6de:	693e      	ldr	r6, [r7, #16]
 801f6e0:	60c5      	str	r5, [r0, #12]
 801f6e2:	6925      	ldr	r5, [r4, #16]
 801f6e4:	f107 0114 	add.w	r1, r7, #20
 801f6e8:	f104 0914 	add.w	r9, r4, #20
 801f6ec:	f100 0e14 	add.w	lr, r0, #20
 801f6f0:	f107 0210 	add.w	r2, r7, #16
 801f6f4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801f6f8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801f6fc:	46f2      	mov	sl, lr
 801f6fe:	2700      	movs	r7, #0
 801f700:	f859 3b04 	ldr.w	r3, [r9], #4
 801f704:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801f708:	fa1f f883 	uxth.w	r8, r3
 801f70c:	fa17 f78b 	uxtah	r7, r7, fp
 801f710:	0c1b      	lsrs	r3, r3, #16
 801f712:	eba7 0808 	sub.w	r8, r7, r8
 801f716:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801f71a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801f71e:	fa1f f888 	uxth.w	r8, r8
 801f722:	141f      	asrs	r7, r3, #16
 801f724:	454d      	cmp	r5, r9
 801f726:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801f72a:	f84a 3b04 	str.w	r3, [sl], #4
 801f72e:	d8e7      	bhi.n	801f700 <__mdiff+0x7c>
 801f730:	1b2b      	subs	r3, r5, r4
 801f732:	3b15      	subs	r3, #21
 801f734:	f023 0303 	bic.w	r3, r3, #3
 801f738:	3304      	adds	r3, #4
 801f73a:	3415      	adds	r4, #21
 801f73c:	42a5      	cmp	r5, r4
 801f73e:	bf38      	it	cc
 801f740:	2304      	movcc	r3, #4
 801f742:	4419      	add	r1, r3
 801f744:	4473      	add	r3, lr
 801f746:	469e      	mov	lr, r3
 801f748:	460d      	mov	r5, r1
 801f74a:	4565      	cmp	r5, ip
 801f74c:	d30e      	bcc.n	801f76c <__mdiff+0xe8>
 801f74e:	f10c 0203 	add.w	r2, ip, #3
 801f752:	1a52      	subs	r2, r2, r1
 801f754:	f022 0203 	bic.w	r2, r2, #3
 801f758:	3903      	subs	r1, #3
 801f75a:	458c      	cmp	ip, r1
 801f75c:	bf38      	it	cc
 801f75e:	2200      	movcc	r2, #0
 801f760:	441a      	add	r2, r3
 801f762:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801f766:	b17b      	cbz	r3, 801f788 <__mdiff+0x104>
 801f768:	6106      	str	r6, [r0, #16]
 801f76a:	e7a5      	b.n	801f6b8 <__mdiff+0x34>
 801f76c:	f855 8b04 	ldr.w	r8, [r5], #4
 801f770:	fa17 f488 	uxtah	r4, r7, r8
 801f774:	1422      	asrs	r2, r4, #16
 801f776:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801f77a:	b2a4      	uxth	r4, r4
 801f77c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801f780:	f84e 4b04 	str.w	r4, [lr], #4
 801f784:	1417      	asrs	r7, r2, #16
 801f786:	e7e0      	b.n	801f74a <__mdiff+0xc6>
 801f788:	3e01      	subs	r6, #1
 801f78a:	e7ea      	b.n	801f762 <__mdiff+0xde>
 801f78c:	08022fa5 	.word	0x08022fa5
 801f790:	08023034 	.word	0x08023034

0801f794 <__ulp>:
 801f794:	b082      	sub	sp, #8
 801f796:	ed8d 0b00 	vstr	d0, [sp]
 801f79a:	9b01      	ldr	r3, [sp, #4]
 801f79c:	4912      	ldr	r1, [pc, #72]	; (801f7e8 <__ulp+0x54>)
 801f79e:	4019      	ands	r1, r3
 801f7a0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801f7a4:	2900      	cmp	r1, #0
 801f7a6:	dd05      	ble.n	801f7b4 <__ulp+0x20>
 801f7a8:	2200      	movs	r2, #0
 801f7aa:	460b      	mov	r3, r1
 801f7ac:	ec43 2b10 	vmov	d0, r2, r3
 801f7b0:	b002      	add	sp, #8
 801f7b2:	4770      	bx	lr
 801f7b4:	4249      	negs	r1, r1
 801f7b6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801f7ba:	ea4f 5021 	mov.w	r0, r1, asr #20
 801f7be:	f04f 0200 	mov.w	r2, #0
 801f7c2:	f04f 0300 	mov.w	r3, #0
 801f7c6:	da04      	bge.n	801f7d2 <__ulp+0x3e>
 801f7c8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801f7cc:	fa41 f300 	asr.w	r3, r1, r0
 801f7d0:	e7ec      	b.n	801f7ac <__ulp+0x18>
 801f7d2:	f1a0 0114 	sub.w	r1, r0, #20
 801f7d6:	291e      	cmp	r1, #30
 801f7d8:	bfda      	itte	le
 801f7da:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801f7de:	fa20 f101 	lsrle.w	r1, r0, r1
 801f7e2:	2101      	movgt	r1, #1
 801f7e4:	460a      	mov	r2, r1
 801f7e6:	e7e1      	b.n	801f7ac <__ulp+0x18>
 801f7e8:	7ff00000 	.word	0x7ff00000

0801f7ec <__b2d>:
 801f7ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f7ee:	6905      	ldr	r5, [r0, #16]
 801f7f0:	f100 0714 	add.w	r7, r0, #20
 801f7f4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801f7f8:	1f2e      	subs	r6, r5, #4
 801f7fa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801f7fe:	4620      	mov	r0, r4
 801f800:	f7ff fd52 	bl	801f2a8 <__hi0bits>
 801f804:	f1c0 0320 	rsb	r3, r0, #32
 801f808:	280a      	cmp	r0, #10
 801f80a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801f888 <__b2d+0x9c>
 801f80e:	600b      	str	r3, [r1, #0]
 801f810:	dc14      	bgt.n	801f83c <__b2d+0x50>
 801f812:	f1c0 0e0b 	rsb	lr, r0, #11
 801f816:	fa24 f10e 	lsr.w	r1, r4, lr
 801f81a:	42b7      	cmp	r7, r6
 801f81c:	ea41 030c 	orr.w	r3, r1, ip
 801f820:	bf34      	ite	cc
 801f822:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801f826:	2100      	movcs	r1, #0
 801f828:	3015      	adds	r0, #21
 801f82a:	fa04 f000 	lsl.w	r0, r4, r0
 801f82e:	fa21 f10e 	lsr.w	r1, r1, lr
 801f832:	ea40 0201 	orr.w	r2, r0, r1
 801f836:	ec43 2b10 	vmov	d0, r2, r3
 801f83a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f83c:	42b7      	cmp	r7, r6
 801f83e:	bf3a      	itte	cc
 801f840:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801f844:	f1a5 0608 	subcc.w	r6, r5, #8
 801f848:	2100      	movcs	r1, #0
 801f84a:	380b      	subs	r0, #11
 801f84c:	d017      	beq.n	801f87e <__b2d+0x92>
 801f84e:	f1c0 0c20 	rsb	ip, r0, #32
 801f852:	fa04 f500 	lsl.w	r5, r4, r0
 801f856:	42be      	cmp	r6, r7
 801f858:	fa21 f40c 	lsr.w	r4, r1, ip
 801f85c:	ea45 0504 	orr.w	r5, r5, r4
 801f860:	bf8c      	ite	hi
 801f862:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801f866:	2400      	movls	r4, #0
 801f868:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801f86c:	fa01 f000 	lsl.w	r0, r1, r0
 801f870:	fa24 f40c 	lsr.w	r4, r4, ip
 801f874:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801f878:	ea40 0204 	orr.w	r2, r0, r4
 801f87c:	e7db      	b.n	801f836 <__b2d+0x4a>
 801f87e:	ea44 030c 	orr.w	r3, r4, ip
 801f882:	460a      	mov	r2, r1
 801f884:	e7d7      	b.n	801f836 <__b2d+0x4a>
 801f886:	bf00      	nop
 801f888:	3ff00000 	.word	0x3ff00000

0801f88c <__d2b>:
 801f88c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801f890:	4689      	mov	r9, r1
 801f892:	2101      	movs	r1, #1
 801f894:	ec57 6b10 	vmov	r6, r7, d0
 801f898:	4690      	mov	r8, r2
 801f89a:	f7ff fc0f 	bl	801f0bc <_Balloc>
 801f89e:	4604      	mov	r4, r0
 801f8a0:	b930      	cbnz	r0, 801f8b0 <__d2b+0x24>
 801f8a2:	4602      	mov	r2, r0
 801f8a4:	4b25      	ldr	r3, [pc, #148]	; (801f93c <__d2b+0xb0>)
 801f8a6:	4826      	ldr	r0, [pc, #152]	; (801f940 <__d2b+0xb4>)
 801f8a8:	f240 310a 	movw	r1, #778	; 0x30a
 801f8ac:	f7fd ff7a 	bl	801d7a4 <__assert_func>
 801f8b0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801f8b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801f8b8:	bb35      	cbnz	r5, 801f908 <__d2b+0x7c>
 801f8ba:	2e00      	cmp	r6, #0
 801f8bc:	9301      	str	r3, [sp, #4]
 801f8be:	d028      	beq.n	801f912 <__d2b+0x86>
 801f8c0:	4668      	mov	r0, sp
 801f8c2:	9600      	str	r6, [sp, #0]
 801f8c4:	f7ff fd10 	bl	801f2e8 <__lo0bits>
 801f8c8:	9900      	ldr	r1, [sp, #0]
 801f8ca:	b300      	cbz	r0, 801f90e <__d2b+0x82>
 801f8cc:	9a01      	ldr	r2, [sp, #4]
 801f8ce:	f1c0 0320 	rsb	r3, r0, #32
 801f8d2:	fa02 f303 	lsl.w	r3, r2, r3
 801f8d6:	430b      	orrs	r3, r1
 801f8d8:	40c2      	lsrs	r2, r0
 801f8da:	6163      	str	r3, [r4, #20]
 801f8dc:	9201      	str	r2, [sp, #4]
 801f8de:	9b01      	ldr	r3, [sp, #4]
 801f8e0:	61a3      	str	r3, [r4, #24]
 801f8e2:	2b00      	cmp	r3, #0
 801f8e4:	bf14      	ite	ne
 801f8e6:	2202      	movne	r2, #2
 801f8e8:	2201      	moveq	r2, #1
 801f8ea:	6122      	str	r2, [r4, #16]
 801f8ec:	b1d5      	cbz	r5, 801f924 <__d2b+0x98>
 801f8ee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801f8f2:	4405      	add	r5, r0
 801f8f4:	f8c9 5000 	str.w	r5, [r9]
 801f8f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801f8fc:	f8c8 0000 	str.w	r0, [r8]
 801f900:	4620      	mov	r0, r4
 801f902:	b003      	add	sp, #12
 801f904:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f908:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801f90c:	e7d5      	b.n	801f8ba <__d2b+0x2e>
 801f90e:	6161      	str	r1, [r4, #20]
 801f910:	e7e5      	b.n	801f8de <__d2b+0x52>
 801f912:	a801      	add	r0, sp, #4
 801f914:	f7ff fce8 	bl	801f2e8 <__lo0bits>
 801f918:	9b01      	ldr	r3, [sp, #4]
 801f91a:	6163      	str	r3, [r4, #20]
 801f91c:	2201      	movs	r2, #1
 801f91e:	6122      	str	r2, [r4, #16]
 801f920:	3020      	adds	r0, #32
 801f922:	e7e3      	b.n	801f8ec <__d2b+0x60>
 801f924:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801f928:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801f92c:	f8c9 0000 	str.w	r0, [r9]
 801f930:	6918      	ldr	r0, [r3, #16]
 801f932:	f7ff fcb9 	bl	801f2a8 <__hi0bits>
 801f936:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801f93a:	e7df      	b.n	801f8fc <__d2b+0x70>
 801f93c:	08022fa5 	.word	0x08022fa5
 801f940:	08023034 	.word	0x08023034

0801f944 <__ratio>:
 801f944:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f948:	4688      	mov	r8, r1
 801f94a:	4669      	mov	r1, sp
 801f94c:	4681      	mov	r9, r0
 801f94e:	f7ff ff4d 	bl	801f7ec <__b2d>
 801f952:	a901      	add	r1, sp, #4
 801f954:	4640      	mov	r0, r8
 801f956:	ec55 4b10 	vmov	r4, r5, d0
 801f95a:	f7ff ff47 	bl	801f7ec <__b2d>
 801f95e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801f962:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801f966:	eba3 0c02 	sub.w	ip, r3, r2
 801f96a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801f96e:	1a9b      	subs	r3, r3, r2
 801f970:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801f974:	ec51 0b10 	vmov	r0, r1, d0
 801f978:	2b00      	cmp	r3, #0
 801f97a:	bfd6      	itet	le
 801f97c:	460a      	movle	r2, r1
 801f97e:	462a      	movgt	r2, r5
 801f980:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801f984:	468b      	mov	fp, r1
 801f986:	462f      	mov	r7, r5
 801f988:	bfd4      	ite	le
 801f98a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801f98e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801f992:	4620      	mov	r0, r4
 801f994:	ee10 2a10 	vmov	r2, s0
 801f998:	465b      	mov	r3, fp
 801f99a:	4639      	mov	r1, r7
 801f99c:	f7e0 ff76 	bl	800088c <__aeabi_ddiv>
 801f9a0:	ec41 0b10 	vmov	d0, r0, r1
 801f9a4:	b003      	add	sp, #12
 801f9a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f9aa <__copybits>:
 801f9aa:	3901      	subs	r1, #1
 801f9ac:	b570      	push	{r4, r5, r6, lr}
 801f9ae:	1149      	asrs	r1, r1, #5
 801f9b0:	6914      	ldr	r4, [r2, #16]
 801f9b2:	3101      	adds	r1, #1
 801f9b4:	f102 0314 	add.w	r3, r2, #20
 801f9b8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801f9bc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801f9c0:	1f05      	subs	r5, r0, #4
 801f9c2:	42a3      	cmp	r3, r4
 801f9c4:	d30c      	bcc.n	801f9e0 <__copybits+0x36>
 801f9c6:	1aa3      	subs	r3, r4, r2
 801f9c8:	3b11      	subs	r3, #17
 801f9ca:	f023 0303 	bic.w	r3, r3, #3
 801f9ce:	3211      	adds	r2, #17
 801f9d0:	42a2      	cmp	r2, r4
 801f9d2:	bf88      	it	hi
 801f9d4:	2300      	movhi	r3, #0
 801f9d6:	4418      	add	r0, r3
 801f9d8:	2300      	movs	r3, #0
 801f9da:	4288      	cmp	r0, r1
 801f9dc:	d305      	bcc.n	801f9ea <__copybits+0x40>
 801f9de:	bd70      	pop	{r4, r5, r6, pc}
 801f9e0:	f853 6b04 	ldr.w	r6, [r3], #4
 801f9e4:	f845 6f04 	str.w	r6, [r5, #4]!
 801f9e8:	e7eb      	b.n	801f9c2 <__copybits+0x18>
 801f9ea:	f840 3b04 	str.w	r3, [r0], #4
 801f9ee:	e7f4      	b.n	801f9da <__copybits+0x30>

0801f9f0 <__any_on>:
 801f9f0:	f100 0214 	add.w	r2, r0, #20
 801f9f4:	6900      	ldr	r0, [r0, #16]
 801f9f6:	114b      	asrs	r3, r1, #5
 801f9f8:	4298      	cmp	r0, r3
 801f9fa:	b510      	push	{r4, lr}
 801f9fc:	db11      	blt.n	801fa22 <__any_on+0x32>
 801f9fe:	dd0a      	ble.n	801fa16 <__any_on+0x26>
 801fa00:	f011 011f 	ands.w	r1, r1, #31
 801fa04:	d007      	beq.n	801fa16 <__any_on+0x26>
 801fa06:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801fa0a:	fa24 f001 	lsr.w	r0, r4, r1
 801fa0e:	fa00 f101 	lsl.w	r1, r0, r1
 801fa12:	428c      	cmp	r4, r1
 801fa14:	d10b      	bne.n	801fa2e <__any_on+0x3e>
 801fa16:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801fa1a:	4293      	cmp	r3, r2
 801fa1c:	d803      	bhi.n	801fa26 <__any_on+0x36>
 801fa1e:	2000      	movs	r0, #0
 801fa20:	bd10      	pop	{r4, pc}
 801fa22:	4603      	mov	r3, r0
 801fa24:	e7f7      	b.n	801fa16 <__any_on+0x26>
 801fa26:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801fa2a:	2900      	cmp	r1, #0
 801fa2c:	d0f5      	beq.n	801fa1a <__any_on+0x2a>
 801fa2e:	2001      	movs	r0, #1
 801fa30:	e7f6      	b.n	801fa20 <__any_on+0x30>

0801fa32 <_calloc_r>:
 801fa32:	b513      	push	{r0, r1, r4, lr}
 801fa34:	434a      	muls	r2, r1
 801fa36:	4611      	mov	r1, r2
 801fa38:	9201      	str	r2, [sp, #4]
 801fa3a:	f7fb faf3 	bl	801b024 <_malloc_r>
 801fa3e:	4604      	mov	r4, r0
 801fa40:	b118      	cbz	r0, 801fa4a <_calloc_r+0x18>
 801fa42:	9a01      	ldr	r2, [sp, #4]
 801fa44:	2100      	movs	r1, #0
 801fa46:	f7fb f817 	bl	801aa78 <memset>
 801fa4a:	4620      	mov	r0, r4
 801fa4c:	b002      	add	sp, #8
 801fa4e:	bd10      	pop	{r4, pc}

0801fa50 <_realloc_r>:
 801fa50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fa52:	4607      	mov	r7, r0
 801fa54:	4614      	mov	r4, r2
 801fa56:	460e      	mov	r6, r1
 801fa58:	b921      	cbnz	r1, 801fa64 <_realloc_r+0x14>
 801fa5a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801fa5e:	4611      	mov	r1, r2
 801fa60:	f7fb bae0 	b.w	801b024 <_malloc_r>
 801fa64:	b922      	cbnz	r2, 801fa70 <_realloc_r+0x20>
 801fa66:	f7fb fa8d 	bl	801af84 <_free_r>
 801fa6a:	4625      	mov	r5, r4
 801fa6c:	4628      	mov	r0, r5
 801fa6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fa70:	f000 feaa 	bl	80207c8 <_malloc_usable_size_r>
 801fa74:	42a0      	cmp	r0, r4
 801fa76:	d20f      	bcs.n	801fa98 <_realloc_r+0x48>
 801fa78:	4621      	mov	r1, r4
 801fa7a:	4638      	mov	r0, r7
 801fa7c:	f7fb fad2 	bl	801b024 <_malloc_r>
 801fa80:	4605      	mov	r5, r0
 801fa82:	2800      	cmp	r0, #0
 801fa84:	d0f2      	beq.n	801fa6c <_realloc_r+0x1c>
 801fa86:	4631      	mov	r1, r6
 801fa88:	4622      	mov	r2, r4
 801fa8a:	f7fa ffcd 	bl	801aa28 <memcpy>
 801fa8e:	4631      	mov	r1, r6
 801fa90:	4638      	mov	r0, r7
 801fa92:	f7fb fa77 	bl	801af84 <_free_r>
 801fa96:	e7e9      	b.n	801fa6c <_realloc_r+0x1c>
 801fa98:	4635      	mov	r5, r6
 801fa9a:	e7e7      	b.n	801fa6c <_realloc_r+0x1c>

0801fa9c <__ssputs_r>:
 801fa9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801faa0:	688e      	ldr	r6, [r1, #8]
 801faa2:	429e      	cmp	r6, r3
 801faa4:	4682      	mov	sl, r0
 801faa6:	460c      	mov	r4, r1
 801faa8:	4690      	mov	r8, r2
 801faaa:	461f      	mov	r7, r3
 801faac:	d838      	bhi.n	801fb20 <__ssputs_r+0x84>
 801faae:	898a      	ldrh	r2, [r1, #12]
 801fab0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801fab4:	d032      	beq.n	801fb1c <__ssputs_r+0x80>
 801fab6:	6825      	ldr	r5, [r4, #0]
 801fab8:	6909      	ldr	r1, [r1, #16]
 801faba:	eba5 0901 	sub.w	r9, r5, r1
 801fabe:	6965      	ldr	r5, [r4, #20]
 801fac0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fac4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801fac8:	3301      	adds	r3, #1
 801faca:	444b      	add	r3, r9
 801facc:	106d      	asrs	r5, r5, #1
 801face:	429d      	cmp	r5, r3
 801fad0:	bf38      	it	cc
 801fad2:	461d      	movcc	r5, r3
 801fad4:	0553      	lsls	r3, r2, #21
 801fad6:	d531      	bpl.n	801fb3c <__ssputs_r+0xa0>
 801fad8:	4629      	mov	r1, r5
 801fada:	f7fb faa3 	bl	801b024 <_malloc_r>
 801fade:	4606      	mov	r6, r0
 801fae0:	b950      	cbnz	r0, 801faf8 <__ssputs_r+0x5c>
 801fae2:	230c      	movs	r3, #12
 801fae4:	f8ca 3000 	str.w	r3, [sl]
 801fae8:	89a3      	ldrh	r3, [r4, #12]
 801faea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801faee:	81a3      	strh	r3, [r4, #12]
 801faf0:	f04f 30ff 	mov.w	r0, #4294967295
 801faf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801faf8:	6921      	ldr	r1, [r4, #16]
 801fafa:	464a      	mov	r2, r9
 801fafc:	f7fa ff94 	bl	801aa28 <memcpy>
 801fb00:	89a3      	ldrh	r3, [r4, #12]
 801fb02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801fb06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801fb0a:	81a3      	strh	r3, [r4, #12]
 801fb0c:	6126      	str	r6, [r4, #16]
 801fb0e:	6165      	str	r5, [r4, #20]
 801fb10:	444e      	add	r6, r9
 801fb12:	eba5 0509 	sub.w	r5, r5, r9
 801fb16:	6026      	str	r6, [r4, #0]
 801fb18:	60a5      	str	r5, [r4, #8]
 801fb1a:	463e      	mov	r6, r7
 801fb1c:	42be      	cmp	r6, r7
 801fb1e:	d900      	bls.n	801fb22 <__ssputs_r+0x86>
 801fb20:	463e      	mov	r6, r7
 801fb22:	4632      	mov	r2, r6
 801fb24:	6820      	ldr	r0, [r4, #0]
 801fb26:	4641      	mov	r1, r8
 801fb28:	f7fa ff8c 	bl	801aa44 <memmove>
 801fb2c:	68a3      	ldr	r3, [r4, #8]
 801fb2e:	6822      	ldr	r2, [r4, #0]
 801fb30:	1b9b      	subs	r3, r3, r6
 801fb32:	4432      	add	r2, r6
 801fb34:	60a3      	str	r3, [r4, #8]
 801fb36:	6022      	str	r2, [r4, #0]
 801fb38:	2000      	movs	r0, #0
 801fb3a:	e7db      	b.n	801faf4 <__ssputs_r+0x58>
 801fb3c:	462a      	mov	r2, r5
 801fb3e:	f7ff ff87 	bl	801fa50 <_realloc_r>
 801fb42:	4606      	mov	r6, r0
 801fb44:	2800      	cmp	r0, #0
 801fb46:	d1e1      	bne.n	801fb0c <__ssputs_r+0x70>
 801fb48:	6921      	ldr	r1, [r4, #16]
 801fb4a:	4650      	mov	r0, sl
 801fb4c:	f7fb fa1a 	bl	801af84 <_free_r>
 801fb50:	e7c7      	b.n	801fae2 <__ssputs_r+0x46>
	...

0801fb54 <_svfiprintf_r>:
 801fb54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb58:	4698      	mov	r8, r3
 801fb5a:	898b      	ldrh	r3, [r1, #12]
 801fb5c:	061b      	lsls	r3, r3, #24
 801fb5e:	b09d      	sub	sp, #116	; 0x74
 801fb60:	4607      	mov	r7, r0
 801fb62:	460d      	mov	r5, r1
 801fb64:	4614      	mov	r4, r2
 801fb66:	d50e      	bpl.n	801fb86 <_svfiprintf_r+0x32>
 801fb68:	690b      	ldr	r3, [r1, #16]
 801fb6a:	b963      	cbnz	r3, 801fb86 <_svfiprintf_r+0x32>
 801fb6c:	2140      	movs	r1, #64	; 0x40
 801fb6e:	f7fb fa59 	bl	801b024 <_malloc_r>
 801fb72:	6028      	str	r0, [r5, #0]
 801fb74:	6128      	str	r0, [r5, #16]
 801fb76:	b920      	cbnz	r0, 801fb82 <_svfiprintf_r+0x2e>
 801fb78:	230c      	movs	r3, #12
 801fb7a:	603b      	str	r3, [r7, #0]
 801fb7c:	f04f 30ff 	mov.w	r0, #4294967295
 801fb80:	e0d1      	b.n	801fd26 <_svfiprintf_r+0x1d2>
 801fb82:	2340      	movs	r3, #64	; 0x40
 801fb84:	616b      	str	r3, [r5, #20]
 801fb86:	2300      	movs	r3, #0
 801fb88:	9309      	str	r3, [sp, #36]	; 0x24
 801fb8a:	2320      	movs	r3, #32
 801fb8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801fb90:	f8cd 800c 	str.w	r8, [sp, #12]
 801fb94:	2330      	movs	r3, #48	; 0x30
 801fb96:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801fd40 <_svfiprintf_r+0x1ec>
 801fb9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801fb9e:	f04f 0901 	mov.w	r9, #1
 801fba2:	4623      	mov	r3, r4
 801fba4:	469a      	mov	sl, r3
 801fba6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fbaa:	b10a      	cbz	r2, 801fbb0 <_svfiprintf_r+0x5c>
 801fbac:	2a25      	cmp	r2, #37	; 0x25
 801fbae:	d1f9      	bne.n	801fba4 <_svfiprintf_r+0x50>
 801fbb0:	ebba 0b04 	subs.w	fp, sl, r4
 801fbb4:	d00b      	beq.n	801fbce <_svfiprintf_r+0x7a>
 801fbb6:	465b      	mov	r3, fp
 801fbb8:	4622      	mov	r2, r4
 801fbba:	4629      	mov	r1, r5
 801fbbc:	4638      	mov	r0, r7
 801fbbe:	f7ff ff6d 	bl	801fa9c <__ssputs_r>
 801fbc2:	3001      	adds	r0, #1
 801fbc4:	f000 80aa 	beq.w	801fd1c <_svfiprintf_r+0x1c8>
 801fbc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fbca:	445a      	add	r2, fp
 801fbcc:	9209      	str	r2, [sp, #36]	; 0x24
 801fbce:	f89a 3000 	ldrb.w	r3, [sl]
 801fbd2:	2b00      	cmp	r3, #0
 801fbd4:	f000 80a2 	beq.w	801fd1c <_svfiprintf_r+0x1c8>
 801fbd8:	2300      	movs	r3, #0
 801fbda:	f04f 32ff 	mov.w	r2, #4294967295
 801fbde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801fbe2:	f10a 0a01 	add.w	sl, sl, #1
 801fbe6:	9304      	str	r3, [sp, #16]
 801fbe8:	9307      	str	r3, [sp, #28]
 801fbea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801fbee:	931a      	str	r3, [sp, #104]	; 0x68
 801fbf0:	4654      	mov	r4, sl
 801fbf2:	2205      	movs	r2, #5
 801fbf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fbf8:	4851      	ldr	r0, [pc, #324]	; (801fd40 <_svfiprintf_r+0x1ec>)
 801fbfa:	f7e0 fb11 	bl	8000220 <memchr>
 801fbfe:	9a04      	ldr	r2, [sp, #16]
 801fc00:	b9d8      	cbnz	r0, 801fc3a <_svfiprintf_r+0xe6>
 801fc02:	06d0      	lsls	r0, r2, #27
 801fc04:	bf44      	itt	mi
 801fc06:	2320      	movmi	r3, #32
 801fc08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fc0c:	0711      	lsls	r1, r2, #28
 801fc0e:	bf44      	itt	mi
 801fc10:	232b      	movmi	r3, #43	; 0x2b
 801fc12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fc16:	f89a 3000 	ldrb.w	r3, [sl]
 801fc1a:	2b2a      	cmp	r3, #42	; 0x2a
 801fc1c:	d015      	beq.n	801fc4a <_svfiprintf_r+0xf6>
 801fc1e:	9a07      	ldr	r2, [sp, #28]
 801fc20:	4654      	mov	r4, sl
 801fc22:	2000      	movs	r0, #0
 801fc24:	f04f 0c0a 	mov.w	ip, #10
 801fc28:	4621      	mov	r1, r4
 801fc2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801fc2e:	3b30      	subs	r3, #48	; 0x30
 801fc30:	2b09      	cmp	r3, #9
 801fc32:	d94e      	bls.n	801fcd2 <_svfiprintf_r+0x17e>
 801fc34:	b1b0      	cbz	r0, 801fc64 <_svfiprintf_r+0x110>
 801fc36:	9207      	str	r2, [sp, #28]
 801fc38:	e014      	b.n	801fc64 <_svfiprintf_r+0x110>
 801fc3a:	eba0 0308 	sub.w	r3, r0, r8
 801fc3e:	fa09 f303 	lsl.w	r3, r9, r3
 801fc42:	4313      	orrs	r3, r2
 801fc44:	9304      	str	r3, [sp, #16]
 801fc46:	46a2      	mov	sl, r4
 801fc48:	e7d2      	b.n	801fbf0 <_svfiprintf_r+0x9c>
 801fc4a:	9b03      	ldr	r3, [sp, #12]
 801fc4c:	1d19      	adds	r1, r3, #4
 801fc4e:	681b      	ldr	r3, [r3, #0]
 801fc50:	9103      	str	r1, [sp, #12]
 801fc52:	2b00      	cmp	r3, #0
 801fc54:	bfbb      	ittet	lt
 801fc56:	425b      	neglt	r3, r3
 801fc58:	f042 0202 	orrlt.w	r2, r2, #2
 801fc5c:	9307      	strge	r3, [sp, #28]
 801fc5e:	9307      	strlt	r3, [sp, #28]
 801fc60:	bfb8      	it	lt
 801fc62:	9204      	strlt	r2, [sp, #16]
 801fc64:	7823      	ldrb	r3, [r4, #0]
 801fc66:	2b2e      	cmp	r3, #46	; 0x2e
 801fc68:	d10c      	bne.n	801fc84 <_svfiprintf_r+0x130>
 801fc6a:	7863      	ldrb	r3, [r4, #1]
 801fc6c:	2b2a      	cmp	r3, #42	; 0x2a
 801fc6e:	d135      	bne.n	801fcdc <_svfiprintf_r+0x188>
 801fc70:	9b03      	ldr	r3, [sp, #12]
 801fc72:	1d1a      	adds	r2, r3, #4
 801fc74:	681b      	ldr	r3, [r3, #0]
 801fc76:	9203      	str	r2, [sp, #12]
 801fc78:	2b00      	cmp	r3, #0
 801fc7a:	bfb8      	it	lt
 801fc7c:	f04f 33ff 	movlt.w	r3, #4294967295
 801fc80:	3402      	adds	r4, #2
 801fc82:	9305      	str	r3, [sp, #20]
 801fc84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801fd50 <_svfiprintf_r+0x1fc>
 801fc88:	7821      	ldrb	r1, [r4, #0]
 801fc8a:	2203      	movs	r2, #3
 801fc8c:	4650      	mov	r0, sl
 801fc8e:	f7e0 fac7 	bl	8000220 <memchr>
 801fc92:	b140      	cbz	r0, 801fca6 <_svfiprintf_r+0x152>
 801fc94:	2340      	movs	r3, #64	; 0x40
 801fc96:	eba0 000a 	sub.w	r0, r0, sl
 801fc9a:	fa03 f000 	lsl.w	r0, r3, r0
 801fc9e:	9b04      	ldr	r3, [sp, #16]
 801fca0:	4303      	orrs	r3, r0
 801fca2:	3401      	adds	r4, #1
 801fca4:	9304      	str	r3, [sp, #16]
 801fca6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fcaa:	4826      	ldr	r0, [pc, #152]	; (801fd44 <_svfiprintf_r+0x1f0>)
 801fcac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801fcb0:	2206      	movs	r2, #6
 801fcb2:	f7e0 fab5 	bl	8000220 <memchr>
 801fcb6:	2800      	cmp	r0, #0
 801fcb8:	d038      	beq.n	801fd2c <_svfiprintf_r+0x1d8>
 801fcba:	4b23      	ldr	r3, [pc, #140]	; (801fd48 <_svfiprintf_r+0x1f4>)
 801fcbc:	bb1b      	cbnz	r3, 801fd06 <_svfiprintf_r+0x1b2>
 801fcbe:	9b03      	ldr	r3, [sp, #12]
 801fcc0:	3307      	adds	r3, #7
 801fcc2:	f023 0307 	bic.w	r3, r3, #7
 801fcc6:	3308      	adds	r3, #8
 801fcc8:	9303      	str	r3, [sp, #12]
 801fcca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fccc:	4433      	add	r3, r6
 801fcce:	9309      	str	r3, [sp, #36]	; 0x24
 801fcd0:	e767      	b.n	801fba2 <_svfiprintf_r+0x4e>
 801fcd2:	fb0c 3202 	mla	r2, ip, r2, r3
 801fcd6:	460c      	mov	r4, r1
 801fcd8:	2001      	movs	r0, #1
 801fcda:	e7a5      	b.n	801fc28 <_svfiprintf_r+0xd4>
 801fcdc:	2300      	movs	r3, #0
 801fcde:	3401      	adds	r4, #1
 801fce0:	9305      	str	r3, [sp, #20]
 801fce2:	4619      	mov	r1, r3
 801fce4:	f04f 0c0a 	mov.w	ip, #10
 801fce8:	4620      	mov	r0, r4
 801fcea:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fcee:	3a30      	subs	r2, #48	; 0x30
 801fcf0:	2a09      	cmp	r2, #9
 801fcf2:	d903      	bls.n	801fcfc <_svfiprintf_r+0x1a8>
 801fcf4:	2b00      	cmp	r3, #0
 801fcf6:	d0c5      	beq.n	801fc84 <_svfiprintf_r+0x130>
 801fcf8:	9105      	str	r1, [sp, #20]
 801fcfa:	e7c3      	b.n	801fc84 <_svfiprintf_r+0x130>
 801fcfc:	fb0c 2101 	mla	r1, ip, r1, r2
 801fd00:	4604      	mov	r4, r0
 801fd02:	2301      	movs	r3, #1
 801fd04:	e7f0      	b.n	801fce8 <_svfiprintf_r+0x194>
 801fd06:	ab03      	add	r3, sp, #12
 801fd08:	9300      	str	r3, [sp, #0]
 801fd0a:	462a      	mov	r2, r5
 801fd0c:	4b0f      	ldr	r3, [pc, #60]	; (801fd4c <_svfiprintf_r+0x1f8>)
 801fd0e:	a904      	add	r1, sp, #16
 801fd10:	4638      	mov	r0, r7
 801fd12:	f7fb fa81 	bl	801b218 <_printf_float>
 801fd16:	1c42      	adds	r2, r0, #1
 801fd18:	4606      	mov	r6, r0
 801fd1a:	d1d6      	bne.n	801fcca <_svfiprintf_r+0x176>
 801fd1c:	89ab      	ldrh	r3, [r5, #12]
 801fd1e:	065b      	lsls	r3, r3, #25
 801fd20:	f53f af2c 	bmi.w	801fb7c <_svfiprintf_r+0x28>
 801fd24:	9809      	ldr	r0, [sp, #36]	; 0x24
 801fd26:	b01d      	add	sp, #116	; 0x74
 801fd28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fd2c:	ab03      	add	r3, sp, #12
 801fd2e:	9300      	str	r3, [sp, #0]
 801fd30:	462a      	mov	r2, r5
 801fd32:	4b06      	ldr	r3, [pc, #24]	; (801fd4c <_svfiprintf_r+0x1f8>)
 801fd34:	a904      	add	r1, sp, #16
 801fd36:	4638      	mov	r0, r7
 801fd38:	f7fb fd12 	bl	801b760 <_printf_i>
 801fd3c:	e7eb      	b.n	801fd16 <_svfiprintf_r+0x1c2>
 801fd3e:	bf00      	nop
 801fd40:	08023194 	.word	0x08023194
 801fd44:	0802319e 	.word	0x0802319e
 801fd48:	0801b219 	.word	0x0801b219
 801fd4c:	0801fa9d 	.word	0x0801fa9d
 801fd50:	0802319a 	.word	0x0802319a

0801fd54 <_sungetc_r>:
 801fd54:	b538      	push	{r3, r4, r5, lr}
 801fd56:	1c4b      	adds	r3, r1, #1
 801fd58:	4614      	mov	r4, r2
 801fd5a:	d103      	bne.n	801fd64 <_sungetc_r+0x10>
 801fd5c:	f04f 35ff 	mov.w	r5, #4294967295
 801fd60:	4628      	mov	r0, r5
 801fd62:	bd38      	pop	{r3, r4, r5, pc}
 801fd64:	8993      	ldrh	r3, [r2, #12]
 801fd66:	f023 0320 	bic.w	r3, r3, #32
 801fd6a:	8193      	strh	r3, [r2, #12]
 801fd6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801fd6e:	6852      	ldr	r2, [r2, #4]
 801fd70:	b2cd      	uxtb	r5, r1
 801fd72:	b18b      	cbz	r3, 801fd98 <_sungetc_r+0x44>
 801fd74:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801fd76:	4293      	cmp	r3, r2
 801fd78:	dd08      	ble.n	801fd8c <_sungetc_r+0x38>
 801fd7a:	6823      	ldr	r3, [r4, #0]
 801fd7c:	1e5a      	subs	r2, r3, #1
 801fd7e:	6022      	str	r2, [r4, #0]
 801fd80:	f803 5c01 	strb.w	r5, [r3, #-1]
 801fd84:	6863      	ldr	r3, [r4, #4]
 801fd86:	3301      	adds	r3, #1
 801fd88:	6063      	str	r3, [r4, #4]
 801fd8a:	e7e9      	b.n	801fd60 <_sungetc_r+0xc>
 801fd8c:	4621      	mov	r1, r4
 801fd8e:	f000 fca5 	bl	80206dc <__submore>
 801fd92:	2800      	cmp	r0, #0
 801fd94:	d0f1      	beq.n	801fd7a <_sungetc_r+0x26>
 801fd96:	e7e1      	b.n	801fd5c <_sungetc_r+0x8>
 801fd98:	6921      	ldr	r1, [r4, #16]
 801fd9a:	6823      	ldr	r3, [r4, #0]
 801fd9c:	b151      	cbz	r1, 801fdb4 <_sungetc_r+0x60>
 801fd9e:	4299      	cmp	r1, r3
 801fda0:	d208      	bcs.n	801fdb4 <_sungetc_r+0x60>
 801fda2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801fda6:	42a9      	cmp	r1, r5
 801fda8:	d104      	bne.n	801fdb4 <_sungetc_r+0x60>
 801fdaa:	3b01      	subs	r3, #1
 801fdac:	3201      	adds	r2, #1
 801fdae:	6023      	str	r3, [r4, #0]
 801fdb0:	6062      	str	r2, [r4, #4]
 801fdb2:	e7d5      	b.n	801fd60 <_sungetc_r+0xc>
 801fdb4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801fdb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fdbc:	6363      	str	r3, [r4, #52]	; 0x34
 801fdbe:	2303      	movs	r3, #3
 801fdc0:	63a3      	str	r3, [r4, #56]	; 0x38
 801fdc2:	4623      	mov	r3, r4
 801fdc4:	f803 5f46 	strb.w	r5, [r3, #70]!
 801fdc8:	6023      	str	r3, [r4, #0]
 801fdca:	2301      	movs	r3, #1
 801fdcc:	e7dc      	b.n	801fd88 <_sungetc_r+0x34>

0801fdce <__ssrefill_r>:
 801fdce:	b510      	push	{r4, lr}
 801fdd0:	460c      	mov	r4, r1
 801fdd2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801fdd4:	b169      	cbz	r1, 801fdf2 <__ssrefill_r+0x24>
 801fdd6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fdda:	4299      	cmp	r1, r3
 801fddc:	d001      	beq.n	801fde2 <__ssrefill_r+0x14>
 801fdde:	f7fb f8d1 	bl	801af84 <_free_r>
 801fde2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801fde4:	6063      	str	r3, [r4, #4]
 801fde6:	2000      	movs	r0, #0
 801fde8:	6360      	str	r0, [r4, #52]	; 0x34
 801fdea:	b113      	cbz	r3, 801fdf2 <__ssrefill_r+0x24>
 801fdec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801fdee:	6023      	str	r3, [r4, #0]
 801fdf0:	bd10      	pop	{r4, pc}
 801fdf2:	6923      	ldr	r3, [r4, #16]
 801fdf4:	6023      	str	r3, [r4, #0]
 801fdf6:	2300      	movs	r3, #0
 801fdf8:	6063      	str	r3, [r4, #4]
 801fdfa:	89a3      	ldrh	r3, [r4, #12]
 801fdfc:	f043 0320 	orr.w	r3, r3, #32
 801fe00:	81a3      	strh	r3, [r4, #12]
 801fe02:	f04f 30ff 	mov.w	r0, #4294967295
 801fe06:	e7f3      	b.n	801fdf0 <__ssrefill_r+0x22>

0801fe08 <__ssvfiscanf_r>:
 801fe08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe0c:	460c      	mov	r4, r1
 801fe0e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801fe12:	2100      	movs	r1, #0
 801fe14:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801fe18:	49b2      	ldr	r1, [pc, #712]	; (80200e4 <__ssvfiscanf_r+0x2dc>)
 801fe1a:	91a0      	str	r1, [sp, #640]	; 0x280
 801fe1c:	f10d 0804 	add.w	r8, sp, #4
 801fe20:	49b1      	ldr	r1, [pc, #708]	; (80200e8 <__ssvfiscanf_r+0x2e0>)
 801fe22:	4fb2      	ldr	r7, [pc, #712]	; (80200ec <__ssvfiscanf_r+0x2e4>)
 801fe24:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 80200f0 <__ssvfiscanf_r+0x2e8>
 801fe28:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801fe2c:	4606      	mov	r6, r0
 801fe2e:	91a1      	str	r1, [sp, #644]	; 0x284
 801fe30:	9300      	str	r3, [sp, #0]
 801fe32:	f892 a000 	ldrb.w	sl, [r2]
 801fe36:	f1ba 0f00 	cmp.w	sl, #0
 801fe3a:	f000 8151 	beq.w	80200e0 <__ssvfiscanf_r+0x2d8>
 801fe3e:	f81a 3007 	ldrb.w	r3, [sl, r7]
 801fe42:	f013 0308 	ands.w	r3, r3, #8
 801fe46:	f102 0501 	add.w	r5, r2, #1
 801fe4a:	d019      	beq.n	801fe80 <__ssvfiscanf_r+0x78>
 801fe4c:	6863      	ldr	r3, [r4, #4]
 801fe4e:	2b00      	cmp	r3, #0
 801fe50:	dd0f      	ble.n	801fe72 <__ssvfiscanf_r+0x6a>
 801fe52:	6823      	ldr	r3, [r4, #0]
 801fe54:	781a      	ldrb	r2, [r3, #0]
 801fe56:	5cba      	ldrb	r2, [r7, r2]
 801fe58:	0712      	lsls	r2, r2, #28
 801fe5a:	d401      	bmi.n	801fe60 <__ssvfiscanf_r+0x58>
 801fe5c:	462a      	mov	r2, r5
 801fe5e:	e7e8      	b.n	801fe32 <__ssvfiscanf_r+0x2a>
 801fe60:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801fe62:	3201      	adds	r2, #1
 801fe64:	9245      	str	r2, [sp, #276]	; 0x114
 801fe66:	6862      	ldr	r2, [r4, #4]
 801fe68:	3301      	adds	r3, #1
 801fe6a:	3a01      	subs	r2, #1
 801fe6c:	6062      	str	r2, [r4, #4]
 801fe6e:	6023      	str	r3, [r4, #0]
 801fe70:	e7ec      	b.n	801fe4c <__ssvfiscanf_r+0x44>
 801fe72:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801fe74:	4621      	mov	r1, r4
 801fe76:	4630      	mov	r0, r6
 801fe78:	4798      	blx	r3
 801fe7a:	2800      	cmp	r0, #0
 801fe7c:	d0e9      	beq.n	801fe52 <__ssvfiscanf_r+0x4a>
 801fe7e:	e7ed      	b.n	801fe5c <__ssvfiscanf_r+0x54>
 801fe80:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 801fe84:	f040 8083 	bne.w	801ff8e <__ssvfiscanf_r+0x186>
 801fe88:	9341      	str	r3, [sp, #260]	; 0x104
 801fe8a:	9343      	str	r3, [sp, #268]	; 0x10c
 801fe8c:	7853      	ldrb	r3, [r2, #1]
 801fe8e:	2b2a      	cmp	r3, #42	; 0x2a
 801fe90:	bf02      	ittt	eq
 801fe92:	2310      	moveq	r3, #16
 801fe94:	1c95      	addeq	r5, r2, #2
 801fe96:	9341      	streq	r3, [sp, #260]	; 0x104
 801fe98:	220a      	movs	r2, #10
 801fe9a:	46ab      	mov	fp, r5
 801fe9c:	f81b 1b01 	ldrb.w	r1, [fp], #1
 801fea0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801fea4:	2b09      	cmp	r3, #9
 801fea6:	d91d      	bls.n	801fee4 <__ssvfiscanf_r+0xdc>
 801fea8:	4891      	ldr	r0, [pc, #580]	; (80200f0 <__ssvfiscanf_r+0x2e8>)
 801feaa:	2203      	movs	r2, #3
 801feac:	f7e0 f9b8 	bl	8000220 <memchr>
 801feb0:	b140      	cbz	r0, 801fec4 <__ssvfiscanf_r+0xbc>
 801feb2:	2301      	movs	r3, #1
 801feb4:	eba0 0009 	sub.w	r0, r0, r9
 801feb8:	fa03 f000 	lsl.w	r0, r3, r0
 801febc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801febe:	4318      	orrs	r0, r3
 801fec0:	9041      	str	r0, [sp, #260]	; 0x104
 801fec2:	465d      	mov	r5, fp
 801fec4:	f815 3b01 	ldrb.w	r3, [r5], #1
 801fec8:	2b78      	cmp	r3, #120	; 0x78
 801feca:	d806      	bhi.n	801feda <__ssvfiscanf_r+0xd2>
 801fecc:	2b57      	cmp	r3, #87	; 0x57
 801fece:	d810      	bhi.n	801fef2 <__ssvfiscanf_r+0xea>
 801fed0:	2b25      	cmp	r3, #37	; 0x25
 801fed2:	d05c      	beq.n	801ff8e <__ssvfiscanf_r+0x186>
 801fed4:	d856      	bhi.n	801ff84 <__ssvfiscanf_r+0x17c>
 801fed6:	2b00      	cmp	r3, #0
 801fed8:	d074      	beq.n	801ffc4 <__ssvfiscanf_r+0x1bc>
 801feda:	2303      	movs	r3, #3
 801fedc:	9347      	str	r3, [sp, #284]	; 0x11c
 801fede:	230a      	movs	r3, #10
 801fee0:	9342      	str	r3, [sp, #264]	; 0x108
 801fee2:	e081      	b.n	801ffe8 <__ssvfiscanf_r+0x1e0>
 801fee4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801fee6:	fb02 1303 	mla	r3, r2, r3, r1
 801feea:	3b30      	subs	r3, #48	; 0x30
 801feec:	9343      	str	r3, [sp, #268]	; 0x10c
 801feee:	465d      	mov	r5, fp
 801fef0:	e7d3      	b.n	801fe9a <__ssvfiscanf_r+0x92>
 801fef2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801fef6:	2a20      	cmp	r2, #32
 801fef8:	d8ef      	bhi.n	801feda <__ssvfiscanf_r+0xd2>
 801fefa:	a101      	add	r1, pc, #4	; (adr r1, 801ff00 <__ssvfiscanf_r+0xf8>)
 801fefc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801ff00:	0801ffd3 	.word	0x0801ffd3
 801ff04:	0801fedb 	.word	0x0801fedb
 801ff08:	0801fedb 	.word	0x0801fedb
 801ff0c:	08020031 	.word	0x08020031
 801ff10:	0801fedb 	.word	0x0801fedb
 801ff14:	0801fedb 	.word	0x0801fedb
 801ff18:	0801fedb 	.word	0x0801fedb
 801ff1c:	0801fedb 	.word	0x0801fedb
 801ff20:	0801fedb 	.word	0x0801fedb
 801ff24:	0801fedb 	.word	0x0801fedb
 801ff28:	0801fedb 	.word	0x0801fedb
 801ff2c:	08020047 	.word	0x08020047
 801ff30:	0802001d 	.word	0x0802001d
 801ff34:	0801ff8b 	.word	0x0801ff8b
 801ff38:	0801ff8b 	.word	0x0801ff8b
 801ff3c:	0801ff8b 	.word	0x0801ff8b
 801ff40:	0801fedb 	.word	0x0801fedb
 801ff44:	08020021 	.word	0x08020021
 801ff48:	0801fedb 	.word	0x0801fedb
 801ff4c:	0801fedb 	.word	0x0801fedb
 801ff50:	0801fedb 	.word	0x0801fedb
 801ff54:	0801fedb 	.word	0x0801fedb
 801ff58:	08020057 	.word	0x08020057
 801ff5c:	08020029 	.word	0x08020029
 801ff60:	0801ffcb 	.word	0x0801ffcb
 801ff64:	0801fedb 	.word	0x0801fedb
 801ff68:	0801fedb 	.word	0x0801fedb
 801ff6c:	08020053 	.word	0x08020053
 801ff70:	0801fedb 	.word	0x0801fedb
 801ff74:	0802001d 	.word	0x0802001d
 801ff78:	0801fedb 	.word	0x0801fedb
 801ff7c:	0801fedb 	.word	0x0801fedb
 801ff80:	0801ffd3 	.word	0x0801ffd3
 801ff84:	3b45      	subs	r3, #69	; 0x45
 801ff86:	2b02      	cmp	r3, #2
 801ff88:	d8a7      	bhi.n	801feda <__ssvfiscanf_r+0xd2>
 801ff8a:	2305      	movs	r3, #5
 801ff8c:	e02b      	b.n	801ffe6 <__ssvfiscanf_r+0x1de>
 801ff8e:	6863      	ldr	r3, [r4, #4]
 801ff90:	2b00      	cmp	r3, #0
 801ff92:	dd0d      	ble.n	801ffb0 <__ssvfiscanf_r+0x1a8>
 801ff94:	6823      	ldr	r3, [r4, #0]
 801ff96:	781a      	ldrb	r2, [r3, #0]
 801ff98:	4552      	cmp	r2, sl
 801ff9a:	f040 80a1 	bne.w	80200e0 <__ssvfiscanf_r+0x2d8>
 801ff9e:	3301      	adds	r3, #1
 801ffa0:	6862      	ldr	r2, [r4, #4]
 801ffa2:	6023      	str	r3, [r4, #0]
 801ffa4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801ffa6:	3a01      	subs	r2, #1
 801ffa8:	3301      	adds	r3, #1
 801ffaa:	6062      	str	r2, [r4, #4]
 801ffac:	9345      	str	r3, [sp, #276]	; 0x114
 801ffae:	e755      	b.n	801fe5c <__ssvfiscanf_r+0x54>
 801ffb0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801ffb2:	4621      	mov	r1, r4
 801ffb4:	4630      	mov	r0, r6
 801ffb6:	4798      	blx	r3
 801ffb8:	2800      	cmp	r0, #0
 801ffba:	d0eb      	beq.n	801ff94 <__ssvfiscanf_r+0x18c>
 801ffbc:	9844      	ldr	r0, [sp, #272]	; 0x110
 801ffbe:	2800      	cmp	r0, #0
 801ffc0:	f040 8084 	bne.w	80200cc <__ssvfiscanf_r+0x2c4>
 801ffc4:	f04f 30ff 	mov.w	r0, #4294967295
 801ffc8:	e086      	b.n	80200d8 <__ssvfiscanf_r+0x2d0>
 801ffca:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801ffcc:	f042 0220 	orr.w	r2, r2, #32
 801ffd0:	9241      	str	r2, [sp, #260]	; 0x104
 801ffd2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801ffd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801ffd8:	9241      	str	r2, [sp, #260]	; 0x104
 801ffda:	2210      	movs	r2, #16
 801ffdc:	2b6f      	cmp	r3, #111	; 0x6f
 801ffde:	9242      	str	r2, [sp, #264]	; 0x108
 801ffe0:	bf34      	ite	cc
 801ffe2:	2303      	movcc	r3, #3
 801ffe4:	2304      	movcs	r3, #4
 801ffe6:	9347      	str	r3, [sp, #284]	; 0x11c
 801ffe8:	6863      	ldr	r3, [r4, #4]
 801ffea:	2b00      	cmp	r3, #0
 801ffec:	dd41      	ble.n	8020072 <__ssvfiscanf_r+0x26a>
 801ffee:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801fff0:	0659      	lsls	r1, r3, #25
 801fff2:	d404      	bmi.n	801fffe <__ssvfiscanf_r+0x1f6>
 801fff4:	6823      	ldr	r3, [r4, #0]
 801fff6:	781a      	ldrb	r2, [r3, #0]
 801fff8:	5cba      	ldrb	r2, [r7, r2]
 801fffa:	0712      	lsls	r2, r2, #28
 801fffc:	d440      	bmi.n	8020080 <__ssvfiscanf_r+0x278>
 801fffe:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8020000:	2b02      	cmp	r3, #2
 8020002:	dc4f      	bgt.n	80200a4 <__ssvfiscanf_r+0x29c>
 8020004:	466b      	mov	r3, sp
 8020006:	4622      	mov	r2, r4
 8020008:	a941      	add	r1, sp, #260	; 0x104
 802000a:	4630      	mov	r0, r6
 802000c:	f000 f9ce 	bl	80203ac <_scanf_chars>
 8020010:	2801      	cmp	r0, #1
 8020012:	d065      	beq.n	80200e0 <__ssvfiscanf_r+0x2d8>
 8020014:	2802      	cmp	r0, #2
 8020016:	f47f af21 	bne.w	801fe5c <__ssvfiscanf_r+0x54>
 802001a:	e7cf      	b.n	801ffbc <__ssvfiscanf_r+0x1b4>
 802001c:	220a      	movs	r2, #10
 802001e:	e7dd      	b.n	801ffdc <__ssvfiscanf_r+0x1d4>
 8020020:	2300      	movs	r3, #0
 8020022:	9342      	str	r3, [sp, #264]	; 0x108
 8020024:	2303      	movs	r3, #3
 8020026:	e7de      	b.n	801ffe6 <__ssvfiscanf_r+0x1de>
 8020028:	2308      	movs	r3, #8
 802002a:	9342      	str	r3, [sp, #264]	; 0x108
 802002c:	2304      	movs	r3, #4
 802002e:	e7da      	b.n	801ffe6 <__ssvfiscanf_r+0x1de>
 8020030:	4629      	mov	r1, r5
 8020032:	4640      	mov	r0, r8
 8020034:	f000 fb18 	bl	8020668 <__sccl>
 8020038:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802003a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802003e:	9341      	str	r3, [sp, #260]	; 0x104
 8020040:	4605      	mov	r5, r0
 8020042:	2301      	movs	r3, #1
 8020044:	e7cf      	b.n	801ffe6 <__ssvfiscanf_r+0x1de>
 8020046:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8020048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802004c:	9341      	str	r3, [sp, #260]	; 0x104
 802004e:	2300      	movs	r3, #0
 8020050:	e7c9      	b.n	801ffe6 <__ssvfiscanf_r+0x1de>
 8020052:	2302      	movs	r3, #2
 8020054:	e7c7      	b.n	801ffe6 <__ssvfiscanf_r+0x1de>
 8020056:	9841      	ldr	r0, [sp, #260]	; 0x104
 8020058:	06c3      	lsls	r3, r0, #27
 802005a:	f53f aeff 	bmi.w	801fe5c <__ssvfiscanf_r+0x54>
 802005e:	9b00      	ldr	r3, [sp, #0]
 8020060:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8020062:	1d19      	adds	r1, r3, #4
 8020064:	9100      	str	r1, [sp, #0]
 8020066:	681b      	ldr	r3, [r3, #0]
 8020068:	07c0      	lsls	r0, r0, #31
 802006a:	bf4c      	ite	mi
 802006c:	801a      	strhmi	r2, [r3, #0]
 802006e:	601a      	strpl	r2, [r3, #0]
 8020070:	e6f4      	b.n	801fe5c <__ssvfiscanf_r+0x54>
 8020072:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020074:	4621      	mov	r1, r4
 8020076:	4630      	mov	r0, r6
 8020078:	4798      	blx	r3
 802007a:	2800      	cmp	r0, #0
 802007c:	d0b7      	beq.n	801ffee <__ssvfiscanf_r+0x1e6>
 802007e:	e79d      	b.n	801ffbc <__ssvfiscanf_r+0x1b4>
 8020080:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8020082:	3201      	adds	r2, #1
 8020084:	9245      	str	r2, [sp, #276]	; 0x114
 8020086:	6862      	ldr	r2, [r4, #4]
 8020088:	3a01      	subs	r2, #1
 802008a:	2a00      	cmp	r2, #0
 802008c:	6062      	str	r2, [r4, #4]
 802008e:	dd02      	ble.n	8020096 <__ssvfiscanf_r+0x28e>
 8020090:	3301      	adds	r3, #1
 8020092:	6023      	str	r3, [r4, #0]
 8020094:	e7ae      	b.n	801fff4 <__ssvfiscanf_r+0x1ec>
 8020096:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020098:	4621      	mov	r1, r4
 802009a:	4630      	mov	r0, r6
 802009c:	4798      	blx	r3
 802009e:	2800      	cmp	r0, #0
 80200a0:	d0a8      	beq.n	801fff4 <__ssvfiscanf_r+0x1ec>
 80200a2:	e78b      	b.n	801ffbc <__ssvfiscanf_r+0x1b4>
 80200a4:	2b04      	cmp	r3, #4
 80200a6:	dc06      	bgt.n	80200b6 <__ssvfiscanf_r+0x2ae>
 80200a8:	466b      	mov	r3, sp
 80200aa:	4622      	mov	r2, r4
 80200ac:	a941      	add	r1, sp, #260	; 0x104
 80200ae:	4630      	mov	r0, r6
 80200b0:	f000 f9d4 	bl	802045c <_scanf_i>
 80200b4:	e7ac      	b.n	8020010 <__ssvfiscanf_r+0x208>
 80200b6:	4b0f      	ldr	r3, [pc, #60]	; (80200f4 <__ssvfiscanf_r+0x2ec>)
 80200b8:	2b00      	cmp	r3, #0
 80200ba:	f43f aecf 	beq.w	801fe5c <__ssvfiscanf_r+0x54>
 80200be:	466b      	mov	r3, sp
 80200c0:	4622      	mov	r2, r4
 80200c2:	a941      	add	r1, sp, #260	; 0x104
 80200c4:	4630      	mov	r0, r6
 80200c6:	f7fb fc71 	bl	801b9ac <_scanf_float>
 80200ca:	e7a1      	b.n	8020010 <__ssvfiscanf_r+0x208>
 80200cc:	89a3      	ldrh	r3, [r4, #12]
 80200ce:	f013 0f40 	tst.w	r3, #64	; 0x40
 80200d2:	bf18      	it	ne
 80200d4:	f04f 30ff 	movne.w	r0, #4294967295
 80200d8:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80200dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80200e0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80200e2:	e7f9      	b.n	80200d8 <__ssvfiscanf_r+0x2d0>
 80200e4:	0801fd55 	.word	0x0801fd55
 80200e8:	0801fdcf 	.word	0x0801fdcf
 80200ec:	08022b39 	.word	0x08022b39
 80200f0:	0802319a 	.word	0x0802319a
 80200f4:	0801b9ad 	.word	0x0801b9ad

080200f8 <__sfputc_r>:
 80200f8:	6893      	ldr	r3, [r2, #8]
 80200fa:	3b01      	subs	r3, #1
 80200fc:	2b00      	cmp	r3, #0
 80200fe:	b410      	push	{r4}
 8020100:	6093      	str	r3, [r2, #8]
 8020102:	da08      	bge.n	8020116 <__sfputc_r+0x1e>
 8020104:	6994      	ldr	r4, [r2, #24]
 8020106:	42a3      	cmp	r3, r4
 8020108:	db01      	blt.n	802010e <__sfputc_r+0x16>
 802010a:	290a      	cmp	r1, #10
 802010c:	d103      	bne.n	8020116 <__sfputc_r+0x1e>
 802010e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020112:	f7fd ba75 	b.w	801d600 <__swbuf_r>
 8020116:	6813      	ldr	r3, [r2, #0]
 8020118:	1c58      	adds	r0, r3, #1
 802011a:	6010      	str	r0, [r2, #0]
 802011c:	7019      	strb	r1, [r3, #0]
 802011e:	4608      	mov	r0, r1
 8020120:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020124:	4770      	bx	lr

08020126 <__sfputs_r>:
 8020126:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020128:	4606      	mov	r6, r0
 802012a:	460f      	mov	r7, r1
 802012c:	4614      	mov	r4, r2
 802012e:	18d5      	adds	r5, r2, r3
 8020130:	42ac      	cmp	r4, r5
 8020132:	d101      	bne.n	8020138 <__sfputs_r+0x12>
 8020134:	2000      	movs	r0, #0
 8020136:	e007      	b.n	8020148 <__sfputs_r+0x22>
 8020138:	f814 1b01 	ldrb.w	r1, [r4], #1
 802013c:	463a      	mov	r2, r7
 802013e:	4630      	mov	r0, r6
 8020140:	f7ff ffda 	bl	80200f8 <__sfputc_r>
 8020144:	1c43      	adds	r3, r0, #1
 8020146:	d1f3      	bne.n	8020130 <__sfputs_r+0xa>
 8020148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802014c <_vfiprintf_r>:
 802014c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020150:	460d      	mov	r5, r1
 8020152:	b09d      	sub	sp, #116	; 0x74
 8020154:	4614      	mov	r4, r2
 8020156:	4698      	mov	r8, r3
 8020158:	4606      	mov	r6, r0
 802015a:	b118      	cbz	r0, 8020164 <_vfiprintf_r+0x18>
 802015c:	6983      	ldr	r3, [r0, #24]
 802015e:	b90b      	cbnz	r3, 8020164 <_vfiprintf_r+0x18>
 8020160:	f7fa fa6e 	bl	801a640 <__sinit>
 8020164:	4b89      	ldr	r3, [pc, #548]	; (802038c <_vfiprintf_r+0x240>)
 8020166:	429d      	cmp	r5, r3
 8020168:	d11b      	bne.n	80201a2 <_vfiprintf_r+0x56>
 802016a:	6875      	ldr	r5, [r6, #4]
 802016c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802016e:	07d9      	lsls	r1, r3, #31
 8020170:	d405      	bmi.n	802017e <_vfiprintf_r+0x32>
 8020172:	89ab      	ldrh	r3, [r5, #12]
 8020174:	059a      	lsls	r2, r3, #22
 8020176:	d402      	bmi.n	802017e <_vfiprintf_r+0x32>
 8020178:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802017a:	f7fa fc41 	bl	801aa00 <__retarget_lock_acquire_recursive>
 802017e:	89ab      	ldrh	r3, [r5, #12]
 8020180:	071b      	lsls	r3, r3, #28
 8020182:	d501      	bpl.n	8020188 <_vfiprintf_r+0x3c>
 8020184:	692b      	ldr	r3, [r5, #16]
 8020186:	b9eb      	cbnz	r3, 80201c4 <_vfiprintf_r+0x78>
 8020188:	4629      	mov	r1, r5
 802018a:	4630      	mov	r0, r6
 802018c:	f7fd fa9c 	bl	801d6c8 <__swsetup_r>
 8020190:	b1c0      	cbz	r0, 80201c4 <_vfiprintf_r+0x78>
 8020192:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020194:	07dc      	lsls	r4, r3, #31
 8020196:	d50e      	bpl.n	80201b6 <_vfiprintf_r+0x6a>
 8020198:	f04f 30ff 	mov.w	r0, #4294967295
 802019c:	b01d      	add	sp, #116	; 0x74
 802019e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80201a2:	4b7b      	ldr	r3, [pc, #492]	; (8020390 <_vfiprintf_r+0x244>)
 80201a4:	429d      	cmp	r5, r3
 80201a6:	d101      	bne.n	80201ac <_vfiprintf_r+0x60>
 80201a8:	68b5      	ldr	r5, [r6, #8]
 80201aa:	e7df      	b.n	802016c <_vfiprintf_r+0x20>
 80201ac:	4b79      	ldr	r3, [pc, #484]	; (8020394 <_vfiprintf_r+0x248>)
 80201ae:	429d      	cmp	r5, r3
 80201b0:	bf08      	it	eq
 80201b2:	68f5      	ldreq	r5, [r6, #12]
 80201b4:	e7da      	b.n	802016c <_vfiprintf_r+0x20>
 80201b6:	89ab      	ldrh	r3, [r5, #12]
 80201b8:	0598      	lsls	r0, r3, #22
 80201ba:	d4ed      	bmi.n	8020198 <_vfiprintf_r+0x4c>
 80201bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80201be:	f7fa fc21 	bl	801aa04 <__retarget_lock_release_recursive>
 80201c2:	e7e9      	b.n	8020198 <_vfiprintf_r+0x4c>
 80201c4:	2300      	movs	r3, #0
 80201c6:	9309      	str	r3, [sp, #36]	; 0x24
 80201c8:	2320      	movs	r3, #32
 80201ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80201ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80201d2:	2330      	movs	r3, #48	; 0x30
 80201d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8020398 <_vfiprintf_r+0x24c>
 80201d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80201dc:	f04f 0901 	mov.w	r9, #1
 80201e0:	4623      	mov	r3, r4
 80201e2:	469a      	mov	sl, r3
 80201e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80201e8:	b10a      	cbz	r2, 80201ee <_vfiprintf_r+0xa2>
 80201ea:	2a25      	cmp	r2, #37	; 0x25
 80201ec:	d1f9      	bne.n	80201e2 <_vfiprintf_r+0x96>
 80201ee:	ebba 0b04 	subs.w	fp, sl, r4
 80201f2:	d00b      	beq.n	802020c <_vfiprintf_r+0xc0>
 80201f4:	465b      	mov	r3, fp
 80201f6:	4622      	mov	r2, r4
 80201f8:	4629      	mov	r1, r5
 80201fa:	4630      	mov	r0, r6
 80201fc:	f7ff ff93 	bl	8020126 <__sfputs_r>
 8020200:	3001      	adds	r0, #1
 8020202:	f000 80aa 	beq.w	802035a <_vfiprintf_r+0x20e>
 8020206:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020208:	445a      	add	r2, fp
 802020a:	9209      	str	r2, [sp, #36]	; 0x24
 802020c:	f89a 3000 	ldrb.w	r3, [sl]
 8020210:	2b00      	cmp	r3, #0
 8020212:	f000 80a2 	beq.w	802035a <_vfiprintf_r+0x20e>
 8020216:	2300      	movs	r3, #0
 8020218:	f04f 32ff 	mov.w	r2, #4294967295
 802021c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020220:	f10a 0a01 	add.w	sl, sl, #1
 8020224:	9304      	str	r3, [sp, #16]
 8020226:	9307      	str	r3, [sp, #28]
 8020228:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802022c:	931a      	str	r3, [sp, #104]	; 0x68
 802022e:	4654      	mov	r4, sl
 8020230:	2205      	movs	r2, #5
 8020232:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020236:	4858      	ldr	r0, [pc, #352]	; (8020398 <_vfiprintf_r+0x24c>)
 8020238:	f7df fff2 	bl	8000220 <memchr>
 802023c:	9a04      	ldr	r2, [sp, #16]
 802023e:	b9d8      	cbnz	r0, 8020278 <_vfiprintf_r+0x12c>
 8020240:	06d1      	lsls	r1, r2, #27
 8020242:	bf44      	itt	mi
 8020244:	2320      	movmi	r3, #32
 8020246:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802024a:	0713      	lsls	r3, r2, #28
 802024c:	bf44      	itt	mi
 802024e:	232b      	movmi	r3, #43	; 0x2b
 8020250:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020254:	f89a 3000 	ldrb.w	r3, [sl]
 8020258:	2b2a      	cmp	r3, #42	; 0x2a
 802025a:	d015      	beq.n	8020288 <_vfiprintf_r+0x13c>
 802025c:	9a07      	ldr	r2, [sp, #28]
 802025e:	4654      	mov	r4, sl
 8020260:	2000      	movs	r0, #0
 8020262:	f04f 0c0a 	mov.w	ip, #10
 8020266:	4621      	mov	r1, r4
 8020268:	f811 3b01 	ldrb.w	r3, [r1], #1
 802026c:	3b30      	subs	r3, #48	; 0x30
 802026e:	2b09      	cmp	r3, #9
 8020270:	d94e      	bls.n	8020310 <_vfiprintf_r+0x1c4>
 8020272:	b1b0      	cbz	r0, 80202a2 <_vfiprintf_r+0x156>
 8020274:	9207      	str	r2, [sp, #28]
 8020276:	e014      	b.n	80202a2 <_vfiprintf_r+0x156>
 8020278:	eba0 0308 	sub.w	r3, r0, r8
 802027c:	fa09 f303 	lsl.w	r3, r9, r3
 8020280:	4313      	orrs	r3, r2
 8020282:	9304      	str	r3, [sp, #16]
 8020284:	46a2      	mov	sl, r4
 8020286:	e7d2      	b.n	802022e <_vfiprintf_r+0xe2>
 8020288:	9b03      	ldr	r3, [sp, #12]
 802028a:	1d19      	adds	r1, r3, #4
 802028c:	681b      	ldr	r3, [r3, #0]
 802028e:	9103      	str	r1, [sp, #12]
 8020290:	2b00      	cmp	r3, #0
 8020292:	bfbb      	ittet	lt
 8020294:	425b      	neglt	r3, r3
 8020296:	f042 0202 	orrlt.w	r2, r2, #2
 802029a:	9307      	strge	r3, [sp, #28]
 802029c:	9307      	strlt	r3, [sp, #28]
 802029e:	bfb8      	it	lt
 80202a0:	9204      	strlt	r2, [sp, #16]
 80202a2:	7823      	ldrb	r3, [r4, #0]
 80202a4:	2b2e      	cmp	r3, #46	; 0x2e
 80202a6:	d10c      	bne.n	80202c2 <_vfiprintf_r+0x176>
 80202a8:	7863      	ldrb	r3, [r4, #1]
 80202aa:	2b2a      	cmp	r3, #42	; 0x2a
 80202ac:	d135      	bne.n	802031a <_vfiprintf_r+0x1ce>
 80202ae:	9b03      	ldr	r3, [sp, #12]
 80202b0:	1d1a      	adds	r2, r3, #4
 80202b2:	681b      	ldr	r3, [r3, #0]
 80202b4:	9203      	str	r2, [sp, #12]
 80202b6:	2b00      	cmp	r3, #0
 80202b8:	bfb8      	it	lt
 80202ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80202be:	3402      	adds	r4, #2
 80202c0:	9305      	str	r3, [sp, #20]
 80202c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80203a8 <_vfiprintf_r+0x25c>
 80202c6:	7821      	ldrb	r1, [r4, #0]
 80202c8:	2203      	movs	r2, #3
 80202ca:	4650      	mov	r0, sl
 80202cc:	f7df ffa8 	bl	8000220 <memchr>
 80202d0:	b140      	cbz	r0, 80202e4 <_vfiprintf_r+0x198>
 80202d2:	2340      	movs	r3, #64	; 0x40
 80202d4:	eba0 000a 	sub.w	r0, r0, sl
 80202d8:	fa03 f000 	lsl.w	r0, r3, r0
 80202dc:	9b04      	ldr	r3, [sp, #16]
 80202de:	4303      	orrs	r3, r0
 80202e0:	3401      	adds	r4, #1
 80202e2:	9304      	str	r3, [sp, #16]
 80202e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80202e8:	482c      	ldr	r0, [pc, #176]	; (802039c <_vfiprintf_r+0x250>)
 80202ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80202ee:	2206      	movs	r2, #6
 80202f0:	f7df ff96 	bl	8000220 <memchr>
 80202f4:	2800      	cmp	r0, #0
 80202f6:	d03f      	beq.n	8020378 <_vfiprintf_r+0x22c>
 80202f8:	4b29      	ldr	r3, [pc, #164]	; (80203a0 <_vfiprintf_r+0x254>)
 80202fa:	bb1b      	cbnz	r3, 8020344 <_vfiprintf_r+0x1f8>
 80202fc:	9b03      	ldr	r3, [sp, #12]
 80202fe:	3307      	adds	r3, #7
 8020300:	f023 0307 	bic.w	r3, r3, #7
 8020304:	3308      	adds	r3, #8
 8020306:	9303      	str	r3, [sp, #12]
 8020308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802030a:	443b      	add	r3, r7
 802030c:	9309      	str	r3, [sp, #36]	; 0x24
 802030e:	e767      	b.n	80201e0 <_vfiprintf_r+0x94>
 8020310:	fb0c 3202 	mla	r2, ip, r2, r3
 8020314:	460c      	mov	r4, r1
 8020316:	2001      	movs	r0, #1
 8020318:	e7a5      	b.n	8020266 <_vfiprintf_r+0x11a>
 802031a:	2300      	movs	r3, #0
 802031c:	3401      	adds	r4, #1
 802031e:	9305      	str	r3, [sp, #20]
 8020320:	4619      	mov	r1, r3
 8020322:	f04f 0c0a 	mov.w	ip, #10
 8020326:	4620      	mov	r0, r4
 8020328:	f810 2b01 	ldrb.w	r2, [r0], #1
 802032c:	3a30      	subs	r2, #48	; 0x30
 802032e:	2a09      	cmp	r2, #9
 8020330:	d903      	bls.n	802033a <_vfiprintf_r+0x1ee>
 8020332:	2b00      	cmp	r3, #0
 8020334:	d0c5      	beq.n	80202c2 <_vfiprintf_r+0x176>
 8020336:	9105      	str	r1, [sp, #20]
 8020338:	e7c3      	b.n	80202c2 <_vfiprintf_r+0x176>
 802033a:	fb0c 2101 	mla	r1, ip, r1, r2
 802033e:	4604      	mov	r4, r0
 8020340:	2301      	movs	r3, #1
 8020342:	e7f0      	b.n	8020326 <_vfiprintf_r+0x1da>
 8020344:	ab03      	add	r3, sp, #12
 8020346:	9300      	str	r3, [sp, #0]
 8020348:	462a      	mov	r2, r5
 802034a:	4b16      	ldr	r3, [pc, #88]	; (80203a4 <_vfiprintf_r+0x258>)
 802034c:	a904      	add	r1, sp, #16
 802034e:	4630      	mov	r0, r6
 8020350:	f7fa ff62 	bl	801b218 <_printf_float>
 8020354:	4607      	mov	r7, r0
 8020356:	1c78      	adds	r0, r7, #1
 8020358:	d1d6      	bne.n	8020308 <_vfiprintf_r+0x1bc>
 802035a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802035c:	07d9      	lsls	r1, r3, #31
 802035e:	d405      	bmi.n	802036c <_vfiprintf_r+0x220>
 8020360:	89ab      	ldrh	r3, [r5, #12]
 8020362:	059a      	lsls	r2, r3, #22
 8020364:	d402      	bmi.n	802036c <_vfiprintf_r+0x220>
 8020366:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020368:	f7fa fb4c 	bl	801aa04 <__retarget_lock_release_recursive>
 802036c:	89ab      	ldrh	r3, [r5, #12]
 802036e:	065b      	lsls	r3, r3, #25
 8020370:	f53f af12 	bmi.w	8020198 <_vfiprintf_r+0x4c>
 8020374:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020376:	e711      	b.n	802019c <_vfiprintf_r+0x50>
 8020378:	ab03      	add	r3, sp, #12
 802037a:	9300      	str	r3, [sp, #0]
 802037c:	462a      	mov	r2, r5
 802037e:	4b09      	ldr	r3, [pc, #36]	; (80203a4 <_vfiprintf_r+0x258>)
 8020380:	a904      	add	r1, sp, #16
 8020382:	4630      	mov	r0, r6
 8020384:	f7fb f9ec 	bl	801b760 <_printf_i>
 8020388:	e7e4      	b.n	8020354 <_vfiprintf_r+0x208>
 802038a:	bf00      	nop
 802038c:	08022c5c 	.word	0x08022c5c
 8020390:	08022c7c 	.word	0x08022c7c
 8020394:	08022c3c 	.word	0x08022c3c
 8020398:	08023194 	.word	0x08023194
 802039c:	0802319e 	.word	0x0802319e
 80203a0:	0801b219 	.word	0x0801b219
 80203a4:	08020127 	.word	0x08020127
 80203a8:	0802319a 	.word	0x0802319a

080203ac <_scanf_chars>:
 80203ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80203b0:	4615      	mov	r5, r2
 80203b2:	688a      	ldr	r2, [r1, #8]
 80203b4:	4680      	mov	r8, r0
 80203b6:	460c      	mov	r4, r1
 80203b8:	b932      	cbnz	r2, 80203c8 <_scanf_chars+0x1c>
 80203ba:	698a      	ldr	r2, [r1, #24]
 80203bc:	2a00      	cmp	r2, #0
 80203be:	bf0c      	ite	eq
 80203c0:	2201      	moveq	r2, #1
 80203c2:	f04f 32ff 	movne.w	r2, #4294967295
 80203c6:	608a      	str	r2, [r1, #8]
 80203c8:	6822      	ldr	r2, [r4, #0]
 80203ca:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8020458 <_scanf_chars+0xac>
 80203ce:	06d1      	lsls	r1, r2, #27
 80203d0:	bf5f      	itttt	pl
 80203d2:	681a      	ldrpl	r2, [r3, #0]
 80203d4:	1d11      	addpl	r1, r2, #4
 80203d6:	6019      	strpl	r1, [r3, #0]
 80203d8:	6816      	ldrpl	r6, [r2, #0]
 80203da:	2700      	movs	r7, #0
 80203dc:	69a0      	ldr	r0, [r4, #24]
 80203de:	b188      	cbz	r0, 8020404 <_scanf_chars+0x58>
 80203e0:	2801      	cmp	r0, #1
 80203e2:	d107      	bne.n	80203f4 <_scanf_chars+0x48>
 80203e4:	682b      	ldr	r3, [r5, #0]
 80203e6:	781a      	ldrb	r2, [r3, #0]
 80203e8:	6963      	ldr	r3, [r4, #20]
 80203ea:	5c9b      	ldrb	r3, [r3, r2]
 80203ec:	b953      	cbnz	r3, 8020404 <_scanf_chars+0x58>
 80203ee:	bb27      	cbnz	r7, 802043a <_scanf_chars+0x8e>
 80203f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80203f4:	2802      	cmp	r0, #2
 80203f6:	d120      	bne.n	802043a <_scanf_chars+0x8e>
 80203f8:	682b      	ldr	r3, [r5, #0]
 80203fa:	781b      	ldrb	r3, [r3, #0]
 80203fc:	f813 3009 	ldrb.w	r3, [r3, r9]
 8020400:	071b      	lsls	r3, r3, #28
 8020402:	d41a      	bmi.n	802043a <_scanf_chars+0x8e>
 8020404:	6823      	ldr	r3, [r4, #0]
 8020406:	06da      	lsls	r2, r3, #27
 8020408:	bf5e      	ittt	pl
 802040a:	682b      	ldrpl	r3, [r5, #0]
 802040c:	781b      	ldrbpl	r3, [r3, #0]
 802040e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8020412:	682a      	ldr	r2, [r5, #0]
 8020414:	686b      	ldr	r3, [r5, #4]
 8020416:	3201      	adds	r2, #1
 8020418:	602a      	str	r2, [r5, #0]
 802041a:	68a2      	ldr	r2, [r4, #8]
 802041c:	3b01      	subs	r3, #1
 802041e:	3a01      	subs	r2, #1
 8020420:	606b      	str	r3, [r5, #4]
 8020422:	3701      	adds	r7, #1
 8020424:	60a2      	str	r2, [r4, #8]
 8020426:	b142      	cbz	r2, 802043a <_scanf_chars+0x8e>
 8020428:	2b00      	cmp	r3, #0
 802042a:	dcd7      	bgt.n	80203dc <_scanf_chars+0x30>
 802042c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8020430:	4629      	mov	r1, r5
 8020432:	4640      	mov	r0, r8
 8020434:	4798      	blx	r3
 8020436:	2800      	cmp	r0, #0
 8020438:	d0d0      	beq.n	80203dc <_scanf_chars+0x30>
 802043a:	6823      	ldr	r3, [r4, #0]
 802043c:	f013 0310 	ands.w	r3, r3, #16
 8020440:	d105      	bne.n	802044e <_scanf_chars+0xa2>
 8020442:	68e2      	ldr	r2, [r4, #12]
 8020444:	3201      	adds	r2, #1
 8020446:	60e2      	str	r2, [r4, #12]
 8020448:	69a2      	ldr	r2, [r4, #24]
 802044a:	b102      	cbz	r2, 802044e <_scanf_chars+0xa2>
 802044c:	7033      	strb	r3, [r6, #0]
 802044e:	6923      	ldr	r3, [r4, #16]
 8020450:	441f      	add	r7, r3
 8020452:	6127      	str	r7, [r4, #16]
 8020454:	2000      	movs	r0, #0
 8020456:	e7cb      	b.n	80203f0 <_scanf_chars+0x44>
 8020458:	08022b39 	.word	0x08022b39

0802045c <_scanf_i>:
 802045c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020460:	4698      	mov	r8, r3
 8020462:	4b74      	ldr	r3, [pc, #464]	; (8020634 <_scanf_i+0x1d8>)
 8020464:	460c      	mov	r4, r1
 8020466:	4682      	mov	sl, r0
 8020468:	4616      	mov	r6, r2
 802046a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 802046e:	b087      	sub	sp, #28
 8020470:	ab03      	add	r3, sp, #12
 8020472:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8020476:	4b70      	ldr	r3, [pc, #448]	; (8020638 <_scanf_i+0x1dc>)
 8020478:	69a1      	ldr	r1, [r4, #24]
 802047a:	4a70      	ldr	r2, [pc, #448]	; (802063c <_scanf_i+0x1e0>)
 802047c:	2903      	cmp	r1, #3
 802047e:	bf18      	it	ne
 8020480:	461a      	movne	r2, r3
 8020482:	68a3      	ldr	r3, [r4, #8]
 8020484:	9201      	str	r2, [sp, #4]
 8020486:	1e5a      	subs	r2, r3, #1
 8020488:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 802048c:	bf88      	it	hi
 802048e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8020492:	4627      	mov	r7, r4
 8020494:	bf82      	ittt	hi
 8020496:	eb03 0905 	addhi.w	r9, r3, r5
 802049a:	f240 135d 	movwhi	r3, #349	; 0x15d
 802049e:	60a3      	strhi	r3, [r4, #8]
 80204a0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80204a4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80204a8:	bf98      	it	ls
 80204aa:	f04f 0900 	movls.w	r9, #0
 80204ae:	6023      	str	r3, [r4, #0]
 80204b0:	463d      	mov	r5, r7
 80204b2:	f04f 0b00 	mov.w	fp, #0
 80204b6:	6831      	ldr	r1, [r6, #0]
 80204b8:	ab03      	add	r3, sp, #12
 80204ba:	7809      	ldrb	r1, [r1, #0]
 80204bc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80204c0:	2202      	movs	r2, #2
 80204c2:	f7df fead 	bl	8000220 <memchr>
 80204c6:	b328      	cbz	r0, 8020514 <_scanf_i+0xb8>
 80204c8:	f1bb 0f01 	cmp.w	fp, #1
 80204cc:	d159      	bne.n	8020582 <_scanf_i+0x126>
 80204ce:	6862      	ldr	r2, [r4, #4]
 80204d0:	b92a      	cbnz	r2, 80204de <_scanf_i+0x82>
 80204d2:	6822      	ldr	r2, [r4, #0]
 80204d4:	2308      	movs	r3, #8
 80204d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80204da:	6063      	str	r3, [r4, #4]
 80204dc:	6022      	str	r2, [r4, #0]
 80204de:	6822      	ldr	r2, [r4, #0]
 80204e0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80204e4:	6022      	str	r2, [r4, #0]
 80204e6:	68a2      	ldr	r2, [r4, #8]
 80204e8:	1e51      	subs	r1, r2, #1
 80204ea:	60a1      	str	r1, [r4, #8]
 80204ec:	b192      	cbz	r2, 8020514 <_scanf_i+0xb8>
 80204ee:	6832      	ldr	r2, [r6, #0]
 80204f0:	1c51      	adds	r1, r2, #1
 80204f2:	6031      	str	r1, [r6, #0]
 80204f4:	7812      	ldrb	r2, [r2, #0]
 80204f6:	f805 2b01 	strb.w	r2, [r5], #1
 80204fa:	6872      	ldr	r2, [r6, #4]
 80204fc:	3a01      	subs	r2, #1
 80204fe:	2a00      	cmp	r2, #0
 8020500:	6072      	str	r2, [r6, #4]
 8020502:	dc07      	bgt.n	8020514 <_scanf_i+0xb8>
 8020504:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8020508:	4631      	mov	r1, r6
 802050a:	4650      	mov	r0, sl
 802050c:	4790      	blx	r2
 802050e:	2800      	cmp	r0, #0
 8020510:	f040 8085 	bne.w	802061e <_scanf_i+0x1c2>
 8020514:	f10b 0b01 	add.w	fp, fp, #1
 8020518:	f1bb 0f03 	cmp.w	fp, #3
 802051c:	d1cb      	bne.n	80204b6 <_scanf_i+0x5a>
 802051e:	6863      	ldr	r3, [r4, #4]
 8020520:	b90b      	cbnz	r3, 8020526 <_scanf_i+0xca>
 8020522:	230a      	movs	r3, #10
 8020524:	6063      	str	r3, [r4, #4]
 8020526:	6863      	ldr	r3, [r4, #4]
 8020528:	4945      	ldr	r1, [pc, #276]	; (8020640 <_scanf_i+0x1e4>)
 802052a:	6960      	ldr	r0, [r4, #20]
 802052c:	1ac9      	subs	r1, r1, r3
 802052e:	f000 f89b 	bl	8020668 <__sccl>
 8020532:	f04f 0b00 	mov.w	fp, #0
 8020536:	68a3      	ldr	r3, [r4, #8]
 8020538:	6822      	ldr	r2, [r4, #0]
 802053a:	2b00      	cmp	r3, #0
 802053c:	d03d      	beq.n	80205ba <_scanf_i+0x15e>
 802053e:	6831      	ldr	r1, [r6, #0]
 8020540:	6960      	ldr	r0, [r4, #20]
 8020542:	f891 c000 	ldrb.w	ip, [r1]
 8020546:	f810 000c 	ldrb.w	r0, [r0, ip]
 802054a:	2800      	cmp	r0, #0
 802054c:	d035      	beq.n	80205ba <_scanf_i+0x15e>
 802054e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8020552:	d124      	bne.n	802059e <_scanf_i+0x142>
 8020554:	0510      	lsls	r0, r2, #20
 8020556:	d522      	bpl.n	802059e <_scanf_i+0x142>
 8020558:	f10b 0b01 	add.w	fp, fp, #1
 802055c:	f1b9 0f00 	cmp.w	r9, #0
 8020560:	d003      	beq.n	802056a <_scanf_i+0x10e>
 8020562:	3301      	adds	r3, #1
 8020564:	f109 39ff 	add.w	r9, r9, #4294967295
 8020568:	60a3      	str	r3, [r4, #8]
 802056a:	6873      	ldr	r3, [r6, #4]
 802056c:	3b01      	subs	r3, #1
 802056e:	2b00      	cmp	r3, #0
 8020570:	6073      	str	r3, [r6, #4]
 8020572:	dd1b      	ble.n	80205ac <_scanf_i+0x150>
 8020574:	6833      	ldr	r3, [r6, #0]
 8020576:	3301      	adds	r3, #1
 8020578:	6033      	str	r3, [r6, #0]
 802057a:	68a3      	ldr	r3, [r4, #8]
 802057c:	3b01      	subs	r3, #1
 802057e:	60a3      	str	r3, [r4, #8]
 8020580:	e7d9      	b.n	8020536 <_scanf_i+0xda>
 8020582:	f1bb 0f02 	cmp.w	fp, #2
 8020586:	d1ae      	bne.n	80204e6 <_scanf_i+0x8a>
 8020588:	6822      	ldr	r2, [r4, #0]
 802058a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 802058e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8020592:	d1bf      	bne.n	8020514 <_scanf_i+0xb8>
 8020594:	2310      	movs	r3, #16
 8020596:	6063      	str	r3, [r4, #4]
 8020598:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802059c:	e7a2      	b.n	80204e4 <_scanf_i+0x88>
 802059e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80205a2:	6022      	str	r2, [r4, #0]
 80205a4:	780b      	ldrb	r3, [r1, #0]
 80205a6:	f805 3b01 	strb.w	r3, [r5], #1
 80205aa:	e7de      	b.n	802056a <_scanf_i+0x10e>
 80205ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80205b0:	4631      	mov	r1, r6
 80205b2:	4650      	mov	r0, sl
 80205b4:	4798      	blx	r3
 80205b6:	2800      	cmp	r0, #0
 80205b8:	d0df      	beq.n	802057a <_scanf_i+0x11e>
 80205ba:	6823      	ldr	r3, [r4, #0]
 80205bc:	05d9      	lsls	r1, r3, #23
 80205be:	d50d      	bpl.n	80205dc <_scanf_i+0x180>
 80205c0:	42bd      	cmp	r5, r7
 80205c2:	d909      	bls.n	80205d8 <_scanf_i+0x17c>
 80205c4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80205c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80205cc:	4632      	mov	r2, r6
 80205ce:	4650      	mov	r0, sl
 80205d0:	4798      	blx	r3
 80205d2:	f105 39ff 	add.w	r9, r5, #4294967295
 80205d6:	464d      	mov	r5, r9
 80205d8:	42bd      	cmp	r5, r7
 80205da:	d028      	beq.n	802062e <_scanf_i+0x1d2>
 80205dc:	6822      	ldr	r2, [r4, #0]
 80205de:	f012 0210 	ands.w	r2, r2, #16
 80205e2:	d113      	bne.n	802060c <_scanf_i+0x1b0>
 80205e4:	702a      	strb	r2, [r5, #0]
 80205e6:	6863      	ldr	r3, [r4, #4]
 80205e8:	9e01      	ldr	r6, [sp, #4]
 80205ea:	4639      	mov	r1, r7
 80205ec:	4650      	mov	r0, sl
 80205ee:	47b0      	blx	r6
 80205f0:	f8d8 3000 	ldr.w	r3, [r8]
 80205f4:	6821      	ldr	r1, [r4, #0]
 80205f6:	1d1a      	adds	r2, r3, #4
 80205f8:	f8c8 2000 	str.w	r2, [r8]
 80205fc:	f011 0f20 	tst.w	r1, #32
 8020600:	681b      	ldr	r3, [r3, #0]
 8020602:	d00f      	beq.n	8020624 <_scanf_i+0x1c8>
 8020604:	6018      	str	r0, [r3, #0]
 8020606:	68e3      	ldr	r3, [r4, #12]
 8020608:	3301      	adds	r3, #1
 802060a:	60e3      	str	r3, [r4, #12]
 802060c:	1bed      	subs	r5, r5, r7
 802060e:	44ab      	add	fp, r5
 8020610:	6925      	ldr	r5, [r4, #16]
 8020612:	445d      	add	r5, fp
 8020614:	6125      	str	r5, [r4, #16]
 8020616:	2000      	movs	r0, #0
 8020618:	b007      	add	sp, #28
 802061a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802061e:	f04f 0b00 	mov.w	fp, #0
 8020622:	e7ca      	b.n	80205ba <_scanf_i+0x15e>
 8020624:	07ca      	lsls	r2, r1, #31
 8020626:	bf4c      	ite	mi
 8020628:	8018      	strhmi	r0, [r3, #0]
 802062a:	6018      	strpl	r0, [r3, #0]
 802062c:	e7eb      	b.n	8020606 <_scanf_i+0x1aa>
 802062e:	2001      	movs	r0, #1
 8020630:	e7f2      	b.n	8020618 <_scanf_i+0x1bc>
 8020632:	bf00      	nop
 8020634:	080228cc 	.word	0x080228cc
 8020638:	0801d109 	.word	0x0801d109
 802063c:	0801cff9 	.word	0x0801cff9
 8020640:	080231be 	.word	0x080231be

08020644 <_read_r>:
 8020644:	b538      	push	{r3, r4, r5, lr}
 8020646:	4d07      	ldr	r5, [pc, #28]	; (8020664 <_read_r+0x20>)
 8020648:	4604      	mov	r4, r0
 802064a:	4608      	mov	r0, r1
 802064c:	4611      	mov	r1, r2
 802064e:	2200      	movs	r2, #0
 8020650:	602a      	str	r2, [r5, #0]
 8020652:	461a      	mov	r2, r3
 8020654:	f000 f8f0 	bl	8020838 <_read>
 8020658:	1c43      	adds	r3, r0, #1
 802065a:	d102      	bne.n	8020662 <_read_r+0x1e>
 802065c:	682b      	ldr	r3, [r5, #0]
 802065e:	b103      	cbz	r3, 8020662 <_read_r+0x1e>
 8020660:	6023      	str	r3, [r4, #0]
 8020662:	bd38      	pop	{r3, r4, r5, pc}
 8020664:	20009d08 	.word	0x20009d08

08020668 <__sccl>:
 8020668:	b570      	push	{r4, r5, r6, lr}
 802066a:	780b      	ldrb	r3, [r1, #0]
 802066c:	4604      	mov	r4, r0
 802066e:	2b5e      	cmp	r3, #94	; 0x5e
 8020670:	bf0b      	itete	eq
 8020672:	784b      	ldrbeq	r3, [r1, #1]
 8020674:	1c48      	addne	r0, r1, #1
 8020676:	1c88      	addeq	r0, r1, #2
 8020678:	2200      	movne	r2, #0
 802067a:	bf08      	it	eq
 802067c:	2201      	moveq	r2, #1
 802067e:	1e61      	subs	r1, r4, #1
 8020680:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8020684:	f801 2f01 	strb.w	r2, [r1, #1]!
 8020688:	42a9      	cmp	r1, r5
 802068a:	d1fb      	bne.n	8020684 <__sccl+0x1c>
 802068c:	b90b      	cbnz	r3, 8020692 <__sccl+0x2a>
 802068e:	3801      	subs	r0, #1
 8020690:	bd70      	pop	{r4, r5, r6, pc}
 8020692:	f082 0101 	eor.w	r1, r2, #1
 8020696:	54e1      	strb	r1, [r4, r3]
 8020698:	1c42      	adds	r2, r0, #1
 802069a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 802069e:	2d2d      	cmp	r5, #45	; 0x2d
 80206a0:	f102 36ff 	add.w	r6, r2, #4294967295
 80206a4:	4610      	mov	r0, r2
 80206a6:	d006      	beq.n	80206b6 <__sccl+0x4e>
 80206a8:	2d5d      	cmp	r5, #93	; 0x5d
 80206aa:	d0f1      	beq.n	8020690 <__sccl+0x28>
 80206ac:	b90d      	cbnz	r5, 80206b2 <__sccl+0x4a>
 80206ae:	4630      	mov	r0, r6
 80206b0:	e7ee      	b.n	8020690 <__sccl+0x28>
 80206b2:	462b      	mov	r3, r5
 80206b4:	e7ef      	b.n	8020696 <__sccl+0x2e>
 80206b6:	7816      	ldrb	r6, [r2, #0]
 80206b8:	2e5d      	cmp	r6, #93	; 0x5d
 80206ba:	d0fa      	beq.n	80206b2 <__sccl+0x4a>
 80206bc:	42b3      	cmp	r3, r6
 80206be:	dcf8      	bgt.n	80206b2 <__sccl+0x4a>
 80206c0:	4618      	mov	r0, r3
 80206c2:	3001      	adds	r0, #1
 80206c4:	4286      	cmp	r6, r0
 80206c6:	5421      	strb	r1, [r4, r0]
 80206c8:	dcfb      	bgt.n	80206c2 <__sccl+0x5a>
 80206ca:	43d8      	mvns	r0, r3
 80206cc:	4430      	add	r0, r6
 80206ce:	1c5d      	adds	r5, r3, #1
 80206d0:	42b3      	cmp	r3, r6
 80206d2:	bfa8      	it	ge
 80206d4:	2000      	movge	r0, #0
 80206d6:	182b      	adds	r3, r5, r0
 80206d8:	3202      	adds	r2, #2
 80206da:	e7de      	b.n	802069a <__sccl+0x32>

080206dc <__submore>:
 80206dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80206e0:	460c      	mov	r4, r1
 80206e2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80206e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80206e8:	4299      	cmp	r1, r3
 80206ea:	d11d      	bne.n	8020728 <__submore+0x4c>
 80206ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80206f0:	f7fa fc98 	bl	801b024 <_malloc_r>
 80206f4:	b918      	cbnz	r0, 80206fe <__submore+0x22>
 80206f6:	f04f 30ff 	mov.w	r0, #4294967295
 80206fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80206fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020702:	63a3      	str	r3, [r4, #56]	; 0x38
 8020704:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8020708:	6360      	str	r0, [r4, #52]	; 0x34
 802070a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 802070e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8020712:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8020716:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 802071a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 802071e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8020722:	6020      	str	r0, [r4, #0]
 8020724:	2000      	movs	r0, #0
 8020726:	e7e8      	b.n	80206fa <__submore+0x1e>
 8020728:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 802072a:	0077      	lsls	r7, r6, #1
 802072c:	463a      	mov	r2, r7
 802072e:	f7ff f98f 	bl	801fa50 <_realloc_r>
 8020732:	4605      	mov	r5, r0
 8020734:	2800      	cmp	r0, #0
 8020736:	d0de      	beq.n	80206f6 <__submore+0x1a>
 8020738:	eb00 0806 	add.w	r8, r0, r6
 802073c:	4601      	mov	r1, r0
 802073e:	4632      	mov	r2, r6
 8020740:	4640      	mov	r0, r8
 8020742:	f7fa f971 	bl	801aa28 <memcpy>
 8020746:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 802074a:	f8c4 8000 	str.w	r8, [r4]
 802074e:	e7e9      	b.n	8020724 <__submore+0x48>

08020750 <__ascii_wctomb>:
 8020750:	b149      	cbz	r1, 8020766 <__ascii_wctomb+0x16>
 8020752:	2aff      	cmp	r2, #255	; 0xff
 8020754:	bf85      	ittet	hi
 8020756:	238a      	movhi	r3, #138	; 0x8a
 8020758:	6003      	strhi	r3, [r0, #0]
 802075a:	700a      	strbls	r2, [r1, #0]
 802075c:	f04f 30ff 	movhi.w	r0, #4294967295
 8020760:	bf98      	it	ls
 8020762:	2001      	movls	r0, #1
 8020764:	4770      	bx	lr
 8020766:	4608      	mov	r0, r1
 8020768:	4770      	bx	lr
	...

0802076c <__env_lock>:
 802076c:	4801      	ldr	r0, [pc, #4]	; (8020774 <__env_lock+0x8>)
 802076e:	f7fa b947 	b.w	801aa00 <__retarget_lock_acquire_recursive>
 8020772:	bf00      	nop
 8020774:	20009cfe 	.word	0x20009cfe

08020778 <__env_unlock>:
 8020778:	4801      	ldr	r0, [pc, #4]	; (8020780 <__env_unlock+0x8>)
 802077a:	f7fa b943 	b.w	801aa04 <__retarget_lock_release_recursive>
 802077e:	bf00      	nop
 8020780:	20009cfe 	.word	0x20009cfe

08020784 <_fstat_r>:
 8020784:	b538      	push	{r3, r4, r5, lr}
 8020786:	4d07      	ldr	r5, [pc, #28]	; (80207a4 <_fstat_r+0x20>)
 8020788:	2300      	movs	r3, #0
 802078a:	4604      	mov	r4, r0
 802078c:	4608      	mov	r0, r1
 802078e:	4611      	mov	r1, r2
 8020790:	602b      	str	r3, [r5, #0]
 8020792:	f000 f829 	bl	80207e8 <_fstat>
 8020796:	1c43      	adds	r3, r0, #1
 8020798:	d102      	bne.n	80207a0 <_fstat_r+0x1c>
 802079a:	682b      	ldr	r3, [r5, #0]
 802079c:	b103      	cbz	r3, 80207a0 <_fstat_r+0x1c>
 802079e:	6023      	str	r3, [r4, #0]
 80207a0:	bd38      	pop	{r3, r4, r5, pc}
 80207a2:	bf00      	nop
 80207a4:	20009d08 	.word	0x20009d08

080207a8 <_isatty_r>:
 80207a8:	b538      	push	{r3, r4, r5, lr}
 80207aa:	4d06      	ldr	r5, [pc, #24]	; (80207c4 <_isatty_r+0x1c>)
 80207ac:	2300      	movs	r3, #0
 80207ae:	4604      	mov	r4, r0
 80207b0:	4608      	mov	r0, r1
 80207b2:	602b      	str	r3, [r5, #0]
 80207b4:	f000 f828 	bl	8020808 <_isatty>
 80207b8:	1c43      	adds	r3, r0, #1
 80207ba:	d102      	bne.n	80207c2 <_isatty_r+0x1a>
 80207bc:	682b      	ldr	r3, [r5, #0]
 80207be:	b103      	cbz	r3, 80207c2 <_isatty_r+0x1a>
 80207c0:	6023      	str	r3, [r4, #0]
 80207c2:	bd38      	pop	{r3, r4, r5, pc}
 80207c4:	20009d08 	.word	0x20009d08

080207c8 <_malloc_usable_size_r>:
 80207c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80207cc:	1f18      	subs	r0, r3, #4
 80207ce:	2b00      	cmp	r3, #0
 80207d0:	bfbc      	itt	lt
 80207d2:	580b      	ldrlt	r3, [r1, r0]
 80207d4:	18c0      	addlt	r0, r0, r3
 80207d6:	4770      	bx	lr

080207d8 <_close>:
 80207d8:	4b02      	ldr	r3, [pc, #8]	; (80207e4 <_close+0xc>)
 80207da:	2258      	movs	r2, #88	; 0x58
 80207dc:	601a      	str	r2, [r3, #0]
 80207de:	f04f 30ff 	mov.w	r0, #4294967295
 80207e2:	4770      	bx	lr
 80207e4:	20009d08 	.word	0x20009d08

080207e8 <_fstat>:
 80207e8:	4b02      	ldr	r3, [pc, #8]	; (80207f4 <_fstat+0xc>)
 80207ea:	2258      	movs	r2, #88	; 0x58
 80207ec:	601a      	str	r2, [r3, #0]
 80207ee:	f04f 30ff 	mov.w	r0, #4294967295
 80207f2:	4770      	bx	lr
 80207f4:	20009d08 	.word	0x20009d08

080207f8 <_getpid>:
 80207f8:	4b02      	ldr	r3, [pc, #8]	; (8020804 <_getpid+0xc>)
 80207fa:	2258      	movs	r2, #88	; 0x58
 80207fc:	601a      	str	r2, [r3, #0]
 80207fe:	f04f 30ff 	mov.w	r0, #4294967295
 8020802:	4770      	bx	lr
 8020804:	20009d08 	.word	0x20009d08

08020808 <_isatty>:
 8020808:	4b02      	ldr	r3, [pc, #8]	; (8020814 <_isatty+0xc>)
 802080a:	2258      	movs	r2, #88	; 0x58
 802080c:	601a      	str	r2, [r3, #0]
 802080e:	2000      	movs	r0, #0
 8020810:	4770      	bx	lr
 8020812:	bf00      	nop
 8020814:	20009d08 	.word	0x20009d08

08020818 <_kill>:
 8020818:	4b02      	ldr	r3, [pc, #8]	; (8020824 <_kill+0xc>)
 802081a:	2258      	movs	r2, #88	; 0x58
 802081c:	601a      	str	r2, [r3, #0]
 802081e:	f04f 30ff 	mov.w	r0, #4294967295
 8020822:	4770      	bx	lr
 8020824:	20009d08 	.word	0x20009d08

08020828 <_lseek>:
 8020828:	4b02      	ldr	r3, [pc, #8]	; (8020834 <_lseek+0xc>)
 802082a:	2258      	movs	r2, #88	; 0x58
 802082c:	601a      	str	r2, [r3, #0]
 802082e:	f04f 30ff 	mov.w	r0, #4294967295
 8020832:	4770      	bx	lr
 8020834:	20009d08 	.word	0x20009d08

08020838 <_read>:
 8020838:	4b02      	ldr	r3, [pc, #8]	; (8020844 <_read+0xc>)
 802083a:	2258      	movs	r2, #88	; 0x58
 802083c:	601a      	str	r2, [r3, #0]
 802083e:	f04f 30ff 	mov.w	r0, #4294967295
 8020842:	4770      	bx	lr
 8020844:	20009d08 	.word	0x20009d08

08020848 <_sbrk>:
 8020848:	4b04      	ldr	r3, [pc, #16]	; (802085c <_sbrk+0x14>)
 802084a:	6819      	ldr	r1, [r3, #0]
 802084c:	4602      	mov	r2, r0
 802084e:	b909      	cbnz	r1, 8020854 <_sbrk+0xc>
 8020850:	4903      	ldr	r1, [pc, #12]	; (8020860 <_sbrk+0x18>)
 8020852:	6019      	str	r1, [r3, #0]
 8020854:	6818      	ldr	r0, [r3, #0]
 8020856:	4402      	add	r2, r0
 8020858:	601a      	str	r2, [r3, #0]
 802085a:	4770      	bx	lr
 802085c:	20008640 	.word	0x20008640
 8020860:	20009d10 	.word	0x20009d10

08020864 <_write>:
 8020864:	4b02      	ldr	r3, [pc, #8]	; (8020870 <_write+0xc>)
 8020866:	2258      	movs	r2, #88	; 0x58
 8020868:	601a      	str	r2, [r3, #0]
 802086a:	f04f 30ff 	mov.w	r0, #4294967295
 802086e:	4770      	bx	lr
 8020870:	20009d08 	.word	0x20009d08

08020874 <_exit>:
 8020874:	e7fe      	b.n	8020874 <_exit>
	...

08020878 <_init>:
 8020878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802087a:	bf00      	nop
 802087c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802087e:	bc08      	pop	{r3}
 8020880:	469e      	mov	lr, r3
 8020882:	4770      	bx	lr

08020884 <_fini>:
 8020884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020886:	bf00      	nop
 8020888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802088a:	bc08      	pop	{r3}
 802088c:	469e      	mov	lr, r3
 802088e:	4770      	bx	lr
