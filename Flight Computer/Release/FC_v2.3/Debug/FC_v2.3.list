
FC_v2.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017180  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012c4  08017330  08017330  00027330  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080185f4  080185f4  00030254  2**0
                  CONTENTS
  4 .ARM          00000008  080185f4  080185f4  000285f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080185fc  080185fc  00030254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080185fc  080185fc  000285fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018600  08018600  00028600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000254  20000000  08018604  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030254  2**0
                  CONTENTS
 10 .bss          000066b0  20000254  20000254  00030254  2**2
                  ALLOC
 11 ._user_heap_stack 00000a04  20006904  20006904  00030254  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030254  2**0
                  CONTENTS, READONLY
 13 .debug_info   00057efe  00000000  00000000  00030284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000089bd  00000000  00000000  00088182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003638  00000000  00000000  00090b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003340  00000000  00000000  00094178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00035894  00000000  00000000  000974b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000409f3  00000000  00000000  000ccd4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010f455  00000000  00000000  0010d73f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0021cb94  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000fd04  00000000  00000000  0021cbe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000cc  00000000  00000000  0022c8ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  0022c9b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000254 	.word	0x20000254
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08017318 	.word	0x08017318

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000258 	.word	0x20000258
 80001ec:	08017318 	.word	0x08017318

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <println>:

#include <MRT_helpers.h>
#include <MRT_setup.h>
#include <tim.h>

void println(char* s){
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t*) s, strlen(s), HAL_MAX_DELAY);
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff f8eb 	bl	80001f0 <strlen>
 800101a:	4603      	mov	r3, r0
 800101c:	b29a      	uxth	r2, r3
 800101e:	f04f 33ff 	mov.w	r3, #4294967295
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	4806      	ldr	r0, [pc, #24]	; (8001040 <println+0x34>)
 8001026:	f009 ff36 	bl	800ae96 <HAL_UART_Transmit>
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t*) "\r\n", 2, HAL_MAX_DELAY);
 800102a:	f04f 33ff 	mov.w	r3, #4294967295
 800102e:	2202      	movs	r2, #2
 8001030:	4904      	ldr	r1, [pc, #16]	; (8001044 <println+0x38>)
 8001032:	4803      	ldr	r0, [pc, #12]	; (8001040 <println+0x34>)
 8001034:	f009 ff2f 	bl	800ae96 <HAL_UART_Transmit>
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	2000527c 	.word	0x2000527c
 8001044:	08017330 	.word	0x08017330

08001048 <print>:

void print(char* s){
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t*) s, strlen(s), HAL_MAX_DELAY);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff f8cd 	bl	80001f0 <strlen>
 8001056:	4603      	mov	r3, r0
 8001058:	b29a      	uxth	r2, r3
 800105a:	f04f 33ff 	mov.w	r3, #4294967295
 800105e:	6879      	ldr	r1, [r7, #4]
 8001060:	4803      	ldr	r0, [pc, #12]	; (8001070 <print+0x28>)
 8001062:	f009 ff18 	bl	800ae96 <HAL_UART_Transmit>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	2000527c 	.word	0x2000527c

08001074 <MRT_Init>:


//**************************************************//
//PUBLIC FUNCTIONS

void MRT_Init(void){
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
	print("\r\n\r\n/********MRT Init********/\r\n");
 8001078:	4809      	ldr	r0, [pc, #36]	; (80010a0 <MRT_Init+0x2c>)
 800107a:	f7ff ffe5 	bl	8001048 <print>

	MRT_Reinitialize_Peripherals();
 800107e:	f000 f90f 	bl	80012a0 <MRT_Reinitialize_Peripherals>
	MRT_external_flash_Init();
 8001082:	f001 fb59 	bl	8002738 <MRT_external_flash_Init>
	MRT_reset_info();
 8001086:	f000 f813 	bl	80010b0 <MRT_reset_info>
	print("OK\r\n");
	#endif

	//RTC
	HAL_IWDG_Refresh(&hiwdg);
	MRT_rtc_Init();
 800108a:	f002 fc2f 	bl	80038ec <MRT_rtc_Init>
	#if MEMORY_THREAD

		//SD card
		#if SD_CARD_
			HAL_IWDG_Refresh(&hiwdg);
			sd_init_dynamic_filename("FC", "", filename);
 800108e:	4a05      	ldr	r2, [pc, #20]	; (80010a4 <MRT_Init+0x30>)
 8001090:	4905      	ldr	r1, [pc, #20]	; (80010a8 <MRT_Init+0x34>)
 8001092:	4806      	ldr	r0, [pc, #24]	; (80010ac <MRT_Init+0x38>)
 8001094:	f001 fcbe 	bl	8002a14 <sd_init_dynamic_filename>
		  checkForI2CDevices(huart8,hi2c1);
		  checkForI2CDevices(huart8,hi2c2);
		  checkForI2CDevices(huart8,hi2c3);
		#endif

		MRT_i2c_sensors_Init();
 8001098:	f002 fe94 	bl	8003dc4 <MRT_i2c_sensors_Init>
	#endif

}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	08017334 	.word	0x08017334
 80010a4:	20004f80 	.word	0x20004f80
 80010a8:	08017358 	.word	0x08017358
 80010ac:	0801735c 	.word	0x0801735c

080010b0 <MRT_reset_info>:


void MRT_reset_info(void){
 80010b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010b2:	b0a7      	sub	sp, #156	; 0x9c
 80010b4:	af04      	add	r7, sp, #16

	  char buffer[100];
	  sprintf(buffer,"Reset: %i,  WU: %i,  IWDG: %i\r\nPrevious RTC time: %i:%i:%i\r\n",reset_flag, wu_flag, iwdg_flag, prev_hours, prev_min, prev_sec);
 80010b6:	4b62      	ldr	r3, [pc, #392]	; (8001240 <MRT_reset_info+0x190>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	461d      	mov	r5, r3
 80010bc:	4b61      	ldr	r3, [pc, #388]	; (8001244 <MRT_reset_info+0x194>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	461e      	mov	r6, r3
 80010c2:	4b61      	ldr	r3, [pc, #388]	; (8001248 <MRT_reset_info+0x198>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	461a      	mov	r2, r3
 80010c8:	4b60      	ldr	r3, [pc, #384]	; (800124c <MRT_reset_info+0x19c>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	4619      	mov	r1, r3
 80010ce:	4b60      	ldr	r3, [pc, #384]	; (8001250 <MRT_reset_info+0x1a0>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	461c      	mov	r4, r3
 80010d4:	4b5f      	ldr	r3, [pc, #380]	; (8001254 <MRT_reset_info+0x1a4>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	f107 0020 	add.w	r0, r7, #32
 80010dc:	9303      	str	r3, [sp, #12]
 80010de:	9402      	str	r4, [sp, #8]
 80010e0:	9101      	str	r1, [sp, #4]
 80010e2:	9200      	str	r2, [sp, #0]
 80010e4:	4633      	mov	r3, r6
 80010e6:	462a      	mov	r2, r5
 80010e8:	495b      	ldr	r1, [pc, #364]	; (8001258 <MRT_reset_info+0x1a8>)
 80010ea:	f012 fcf3 	bl	8013ad4 <siprintf>
	  print(buffer);
 80010ee:	f107 0320 	add.w	r3, r7, #32
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff ffa8 	bl	8001048 <print>

	  //Check if IWDG is being deactivated
	  if (iwdg_flag==1){
 80010f8:	4b53      	ldr	r3, [pc, #332]	; (8001248 <MRT_reset_info+0x198>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d11a      	bne.n	8001136 <MRT_reset_info+0x86>
		  print("Deactivating IWDG\r\n");
 8001100:	4856      	ldr	r0, [pc, #344]	; (800125c <MRT_reset_info+0x1ac>)
 8001102:	f7ff ffa1 	bl	8001048 <print>

		  iwdg_flag = 0; //Flip flag
 8001106:	4b50      	ldr	r3, [pc, #320]	; (8001248 <MRT_reset_info+0x198>)
 8001108:	2200      	movs	r2, #0
 800110a:	701a      	strb	r2, [r3, #0]

		  //Write new flag to flash memory
		  flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 800110c:	4b4e      	ldr	r3, [pc, #312]	; (8001248 <MRT_reset_info+0x198>)
 800110e:	781a      	ldrb	r2, [r3, #0]
 8001110:	4b53      	ldr	r3, [pc, #332]	; (8001260 <MRT_reset_info+0x1b0>)
 8001112:	709a      	strb	r2, [r3, #2]
		  W25qxx_EraseSector(1);
 8001114:	2001      	movs	r0, #1
 8001116:	f002 f8e5 	bl	80032e4 <W25qxx_EraseSector>
		  W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 800111a:	2305      	movs	r3, #5
 800111c:	2200      	movs	r2, #0
 800111e:	2101      	movs	r1, #1
 8001120:	484f      	ldr	r0, [pc, #316]	; (8001260 <MRT_reset_info+0x1b0>)
 8001122:	f002 fa29 	bl	8003578 <W25qxx_WriteSector>

		  HAL_Delay(1000);
 8001126:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800112a:	f004 f8a9 	bl	8005280 <HAL_Delay>

		  //Go to sleep
		  MRT_StandByMode(SLEEP_TIME);
 800112e:	f648 40a0 	movw	r0, #36000	; 0x8ca0
 8001132:	f002 fc9d 	bl	8003a70 <MRT_StandByMode>
	  }


	  //Check if we are after waking up (and at which wake up we are at)
	  if (wu_flag>0){
 8001136:	4b43      	ldr	r3, [pc, #268]	; (8001244 <MRT_reset_info+0x194>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d02b      	beq.n	8001196 <MRT_reset_info+0xe6>
		  char buf[30];
		  sprintf(buf, "FC wake up %i\r\n", wu_flag);
 800113e:	4b41      	ldr	r3, [pc, #260]	; (8001244 <MRT_reset_info+0x194>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	461a      	mov	r2, r3
 8001144:	463b      	mov	r3, r7
 8001146:	4947      	ldr	r1, [pc, #284]	; (8001264 <MRT_reset_info+0x1b4>)
 8001148:	4618      	mov	r0, r3
 800114a:	f012 fcc3 	bl	8013ad4 <siprintf>
		  print(buf);
 800114e:	463b      	mov	r3, r7
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ff79 	bl	8001048 <print>

		  print("Resetting RTC time\r\n");
 8001156:	4844      	ldr	r0, [pc, #272]	; (8001268 <MRT_reset_info+0x1b8>)
 8001158:	f7ff ff76 	bl	8001048 <print>

		  //Clear RTC time (last recorded)
		  W25qxx_EraseSector(2);
 800115c:	2002      	movs	r0, #2
 800115e:	f002 f8c1 	bl	80032e4 <W25qxx_EraseSector>
		  W25qxx_WriteSector(RTC_TIME_NULL_BUFFER, 2, RTC_TIME_OFFSET, 3);
 8001162:	2303      	movs	r3, #3
 8001164:	2200      	movs	r2, #0
 8001166:	2102      	movs	r1, #2
 8001168:	4840      	ldr	r0, [pc, #256]	; (800126c <MRT_reset_info+0x1bc>)
 800116a:	f002 fa05 	bl	8003578 <W25qxx_WriteSector>

		  //Update variables (to 0)
		  for (int i = 0; i < 3; i++){
 800116e:	2300      	movs	r3, #0
 8001170:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001174:	e00b      	b.n	800118e <MRT_reset_info+0xde>
			  *flash_time[i] = 0x0;
 8001176:	4a3e      	ldr	r2, [pc, #248]	; (8001270 <MRT_reset_info+0x1c0>)
 8001178:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800117c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001180:	2200      	movs	r2, #0
 8001182:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i < 3; i++){
 8001184:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001188:	3301      	adds	r3, #1
 800118a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800118e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001192:	2b02      	cmp	r3, #2
 8001194:	ddef      	ble.n	8001176 <MRT_reset_info+0xc6>

	  }


	  //Check if we start from the beginning
	  if (reset_flag==0){
 8001196:	4b2a      	ldr	r3, [pc, #168]	; (8001240 <MRT_reset_info+0x190>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d112      	bne.n	80011c4 <MRT_reset_info+0x114>
		  print("FC restarted\r\n");
 800119e:	4835      	ldr	r0, [pc, #212]	; (8001274 <MRT_reset_info+0x1c4>)
 80011a0:	f7ff ff52 	bl	8001048 <print>

		  reset_flag = 1; //Flip flag
 80011a4:	4b26      	ldr	r3, [pc, #152]	; (8001240 <MRT_reset_info+0x190>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	701a      	strb	r2, [r3, #0]

		  //Write new flag to flash memory
	      flash_flags_buffer[RESET_FLAG_OFFSET] = reset_flag;
 80011aa:	4b25      	ldr	r3, [pc, #148]	; (8001240 <MRT_reset_info+0x190>)
 80011ac:	781a      	ldrb	r2, [r3, #0]
 80011ae:	4b2c      	ldr	r3, [pc, #176]	; (8001260 <MRT_reset_info+0x1b0>)
 80011b0:	701a      	strb	r2, [r3, #0]
		  W25qxx_EraseSector(1);
 80011b2:	2001      	movs	r0, #1
 80011b4:	f002 f896 	bl	80032e4 <W25qxx_EraseSector>
		  W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 80011b8:	2305      	movs	r3, #5
 80011ba:	2200      	movs	r2, #0
 80011bc:	2101      	movs	r1, #1
 80011be:	4828      	ldr	r0, [pc, #160]	; (8001260 <MRT_reset_info+0x1b0>)
 80011c0:	f002 f9da 	bl	8003578 <W25qxx_WriteSector>
	  }


	  //Check if before or after apogee
	  if (apogee_flag == 0){
 80011c4:	4b2c      	ldr	r3, [pc, #176]	; (8001278 <MRT_reset_info+0x1c8>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d103      	bne.n	80011d4 <MRT_reset_info+0x124>
		  print("Pre-apogee\r\n");
 80011cc:	482b      	ldr	r0, [pc, #172]	; (800127c <MRT_reset_info+0x1cc>)
 80011ce:	f7ff ff3b 	bl	8001048 <print>
 80011d2:	e006      	b.n	80011e2 <MRT_reset_info+0x132>
	  }
	  else if(apogee_flag==1){
 80011d4:	4b28      	ldr	r3, [pc, #160]	; (8001278 <MRT_reset_info+0x1c8>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d102      	bne.n	80011e2 <MRT_reset_info+0x132>
		  print("Post-apogee\r\n");
 80011dc:	4828      	ldr	r0, [pc, #160]	; (8001280 <MRT_reset_info+0x1d0>)
 80011de:	f7ff ff33 	bl	8001048 <print>
	  }


	  //Check ejection stage
	  print("Ejection Stage: ");
 80011e2:	4828      	ldr	r0, [pc, #160]	; (8001284 <MRT_reset_info+0x1d4>)
 80011e4:	f7ff ff30 	bl	8001048 <print>
	  if (ejection_state_flag==0){
 80011e8:	4b27      	ldr	r3, [pc, #156]	; (8001288 <MRT_reset_info+0x1d8>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d103      	bne.n	80011f8 <MRT_reset_info+0x148>
		  print("Pad\r\n");
 80011f0:	4826      	ldr	r0, [pc, #152]	; (800128c <MRT_reset_info+0x1dc>)
 80011f2:	f7ff ff29 	bl	8001048 <print>
		  print("Main descent\r\n");
	  }
	  else if(ejection_state_flag==4){
		  print("Landed\r\n");
	  }
}
 80011f6:	e01e      	b.n	8001236 <MRT_reset_info+0x186>
	  else if(ejection_state_flag==1){
 80011f8:	4b23      	ldr	r3, [pc, #140]	; (8001288 <MRT_reset_info+0x1d8>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d103      	bne.n	8001208 <MRT_reset_info+0x158>
		  print("Boost\r\n");
 8001200:	4823      	ldr	r0, [pc, #140]	; (8001290 <MRT_reset_info+0x1e0>)
 8001202:	f7ff ff21 	bl	8001048 <print>
}
 8001206:	e016      	b.n	8001236 <MRT_reset_info+0x186>
	  else if(ejection_state_flag==2){
 8001208:	4b1f      	ldr	r3, [pc, #124]	; (8001288 <MRT_reset_info+0x1d8>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b02      	cmp	r3, #2
 800120e:	d103      	bne.n	8001218 <MRT_reset_info+0x168>
		  print("Drogue descent\r\n");
 8001210:	4820      	ldr	r0, [pc, #128]	; (8001294 <MRT_reset_info+0x1e4>)
 8001212:	f7ff ff19 	bl	8001048 <print>
}
 8001216:	e00e      	b.n	8001236 <MRT_reset_info+0x186>
	  else if(ejection_state_flag==3){
 8001218:	4b1b      	ldr	r3, [pc, #108]	; (8001288 <MRT_reset_info+0x1d8>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b03      	cmp	r3, #3
 800121e:	d103      	bne.n	8001228 <MRT_reset_info+0x178>
		  print("Main descent\r\n");
 8001220:	481d      	ldr	r0, [pc, #116]	; (8001298 <MRT_reset_info+0x1e8>)
 8001222:	f7ff ff11 	bl	8001048 <print>
}
 8001226:	e006      	b.n	8001236 <MRT_reset_info+0x186>
	  else if(ejection_state_flag==4){
 8001228:	4b17      	ldr	r3, [pc, #92]	; (8001288 <MRT_reset_info+0x1d8>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b04      	cmp	r3, #4
 800122e:	d102      	bne.n	8001236 <MRT_reset_info+0x186>
		  print("Landed\r\n");
 8001230:	481a      	ldr	r0, [pc, #104]	; (800129c <MRT_reset_info+0x1ec>)
 8001232:	f7ff ff09 	bl	8001048 <print>
}
 8001236:	bf00      	nop
 8001238:	378c      	adds	r7, #140	; 0x8c
 800123a:	46bd      	mov	sp, r7
 800123c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800123e:	bf00      	nop
 8001240:	20000270 	.word	0x20000270
 8001244:	20000271 	.word	0x20000271
 8001248:	20000272 	.word	0x20000272
 800124c:	20000275 	.word	0x20000275
 8001250:	20000276 	.word	0x20000276
 8001254:	20000277 	.word	0x20000277
 8001258:	08017360 	.word	0x08017360
 800125c:	080173a0 	.word	0x080173a0
 8001260:	2000530c 	.word	0x2000530c
 8001264:	080173b4 	.word	0x080173b4
 8001268:	080173c4 	.word	0x080173c4
 800126c:	20000278 	.word	0x20000278
 8001270:	20000018 	.word	0x20000018
 8001274:	080173dc 	.word	0x080173dc
 8001278:	20000273 	.word	0x20000273
 800127c:	080173ec 	.word	0x080173ec
 8001280:	080173fc 	.word	0x080173fc
 8001284:	0801740c 	.word	0x0801740c
 8001288:	20000274 	.word	0x20000274
 800128c:	08017420 	.word	0x08017420
 8001290:	08017428 	.word	0x08017428
 8001294:	08017430 	.word	0x08017430
 8001298:	08017444 	.word	0x08017444
 800129c:	08017454 	.word	0x08017454

080012a0 <MRT_Reinitialize_Peripherals>:


//**************************************************//
//PRIVATE FUNCTIONS

void MRT_Reinitialize_Peripherals(void){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
	  /*
	   * Reinitialize all peripherals
	   */

	  print("Reinitializing Peripherals...");
 80012a4:	482f      	ldr	r0, [pc, #188]	; (8001364 <MRT_Reinitialize_Peripherals+0xc4>)
 80012a6:	f7ff fecf 	bl	8001048 <print>

	  // reset LEDs
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2102      	movs	r1, #2
 80012ae:	482e      	ldr	r0, [pc, #184]	; (8001368 <MRT_Reinitialize_Peripherals+0xc8>)
 80012b0:	f004 fd0a 	bl	8005cc8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 80012b4:	2200      	movs	r2, #0
 80012b6:	2104      	movs	r1, #4
 80012b8:	482b      	ldr	r0, [pc, #172]	; (8001368 <MRT_Reinitialize_Peripherals+0xc8>)
 80012ba:	f004 fd05 	bl	8005cc8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 80012be:	2200      	movs	r2, #0
 80012c0:	2108      	movs	r1, #8
 80012c2:	4829      	ldr	r0, [pc, #164]	; (8001368 <MRT_Reinitialize_Peripherals+0xc8>)
 80012c4:	f004 fd00 	bl	8005cc8 <HAL_GPIO_WritePin>

	  // reset recovery pyro pins
	  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 80012c8:	2201      	movs	r2, #1
 80012ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012ce:	4827      	ldr	r0, [pc, #156]	; (800136c <MRT_Reinitialize_Peripherals+0xcc>)
 80012d0:	f004 fcfa 	bl	8005cc8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, RESET); //PG12 DROGUE GATE
 80012d4:	2200      	movs	r2, #0
 80012d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012da:	4824      	ldr	r0, [pc, #144]	; (800136c <MRT_Reinitialize_Peripherals+0xcc>)
 80012dc:	f004 fcf4 	bl	8005cc8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, RESET); //PG11 MAIN GATE
 80012e0:	2200      	movs	r2, #0
 80012e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012e6:	4821      	ldr	r0, [pc, #132]	; (800136c <MRT_Reinitialize_Peripherals+0xcc>)
 80012e8:	f004 fcee 	bl	8005cc8 <HAL_GPIO_WritePin>

	  // reset prop pyro pins
	  HAL_GPIO_WritePin(OUT_PyroValve_Arming_GPIO_Port, OUT_PyroValve_Arming_Pin, SET); //PG1 ARMING_PROP
 80012ec:	2201      	movs	r2, #1
 80012ee:	2102      	movs	r1, #2
 80012f0:	481e      	ldr	r0, [pc, #120]	; (800136c <MRT_Reinitialize_Peripherals+0xcc>)
 80012f2:	f004 fce9 	bl	8005cc8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_PyroValve_Gate_1_GPIO_Port, OUT_PyroValve_Gate_1_Pin, RESET); //PF15 PROP GATE 1
 80012f6:	2200      	movs	r2, #0
 80012f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012fc:	481c      	ldr	r0, [pc, #112]	; (8001370 <MRT_Reinitialize_Peripherals+0xd0>)
 80012fe:	f004 fce3 	bl	8005cc8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_PyroValve_Gate_2_GPIO_Port,OUT_PyroValve_Gate_2_Pin, RESET); //PF14 PROP GATE 2
 8001302:	2200      	movs	r2, #0
 8001304:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001308:	4819      	ldr	r0, [pc, #100]	; (8001370 <MRT_Reinitialize_Peripherals+0xd0>)
 800130a:	f004 fcdd 	bl	8005cc8 <HAL_GPIO_WritePin>

	  // reset 12 V buck converter enable pin (disable converter)
	  HAL_GPIO_WritePin(EN_12V_Buck_GPIO_Port, EN_12V_Buck_Pin, RESET); //PE2 Buck converter enable
 800130e:	2200      	movs	r2, #0
 8001310:	2104      	movs	r1, #4
 8001312:	4818      	ldr	r0, [pc, #96]	; (8001374 <MRT_Reinitialize_Peripherals+0xd4>)
 8001314:	f004 fcd8 	bl	8005cc8 <HAL_GPIO_WritePin>
	  //HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET); //This was in the previous code
	  //HAL_GPIO_WritePin(OUT_Prop_ActuatedVent_Gate_GPIO_Port, OUT_Prop_ActuatedVent_Gate_Pin, RESET); //PE7 (MAY NOT BE THE RIGHT ONE)


	  // reset payload EN signal
	  HAL_GPIO_WritePin(PAYLOAD_I2C_EN_GPIO_Port, PAYLOAD_I2C_EN_Pin, RESET); //PE9 Payload I2C enable
 8001318:	2200      	movs	r2, #0
 800131a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800131e:	4815      	ldr	r0, [pc, #84]	; (8001374 <MRT_Reinitialize_Peripherals+0xd4>)
 8001320:	f004 fcd2 	bl	8005cc8 <HAL_GPIO_WritePin>

	  // set CS pin for thermocouple chip high
	  //	HAL_GPIO_WritePin(TH_CS_1_GPIO_Port, TH_CS_1_Pin, SET);

	  // set power off for VR
	  HAL_GPIO_WritePin(OUT_VR_PWR_GPIO_Port, OUT_VR_PWR_Pin, RESET); //PG9
 8001324:	2200      	movs	r2, #0
 8001326:	f44f 7100 	mov.w	r1, #512	; 0x200
 800132a:	4810      	ldr	r0, [pc, #64]	; (800136c <MRT_Reinitialize_Peripherals+0xcc>)
 800132c:	f004 fccc 	bl	8005cc8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_VR_REC_GPIO_Port, OUT_VR_REC_Pin, RESET); //PD7
 8001330:	2200      	movs	r2, #0
 8001332:	2180      	movs	r1, #128	; 0x80
 8001334:	4810      	ldr	r0, [pc, #64]	; (8001378 <MRT_Reinitialize_Peripherals+0xd8>)
 8001336:	f004 fcc7 	bl	8005cc8 <HAL_GPIO_WritePin>

	  // FLASH set CS, WP and IO3 pins high
	  HAL_GPIO_WritePin(OUT_FLASH_CS_GPIO_Port, OUT_FLASH_CS_Pin, SET);
 800133a:	2201      	movs	r2, #1
 800133c:	2140      	movs	r1, #64	; 0x40
 800133e:	480e      	ldr	r0, [pc, #56]	; (8001378 <MRT_Reinitialize_Peripherals+0xd8>)
 8001340:	f004 fcc2 	bl	8005cc8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_FLASH_WP_GPIO_Port, OUT_FLASH_WP_Pin, SET);
 8001344:	2201      	movs	r2, #1
 8001346:	2120      	movs	r1, #32
 8001348:	480b      	ldr	r0, [pc, #44]	; (8001378 <MRT_Reinitialize_Peripherals+0xd8>)
 800134a:	f004 fcbd 	bl	8005cc8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_FLASH_IO3_GPIO_Port, OUT_FLASH_IO3_Pin, SET);
 800134e:	2201      	movs	r2, #1
 8001350:	2110      	movs	r1, #16
 8001352:	4809      	ldr	r0, [pc, #36]	; (8001378 <MRT_Reinitialize_Peripherals+0xd8>)
 8001354:	f004 fcb8 	bl	8005cc8 <HAL_GPIO_WritePin>

	  print("OK\r\n");
 8001358:	4808      	ldr	r0, [pc, #32]	; (800137c <MRT_Reinitialize_Peripherals+0xdc>)
 800135a:	f7ff fe75 	bl	8001048 <print>
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	08017460 	.word	0x08017460
 8001368:	40020800 	.word	0x40020800
 800136c:	40021800 	.word	0x40021800
 8001370:	40021400 	.word	0x40021400
 8001374:	40021000 	.word	0x40021000
 8001378:	40020c00 	.word	0x40020c00
 800137c:	08017480 	.word	0x08017480

08001380 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001386:	463b      	mov	r3, r7
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001392:	4b21      	ldr	r3, [pc, #132]	; (8001418 <MX_ADC1_Init+0x98>)
 8001394:	4a21      	ldr	r2, [pc, #132]	; (800141c <MX_ADC1_Init+0x9c>)
 8001396:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001398:	4b1f      	ldr	r3, [pc, #124]	; (8001418 <MX_ADC1_Init+0x98>)
 800139a:	2200      	movs	r2, #0
 800139c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800139e:	4b1e      	ldr	r3, [pc, #120]	; (8001418 <MX_ADC1_Init+0x98>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80013a4:	4b1c      	ldr	r3, [pc, #112]	; (8001418 <MX_ADC1_Init+0x98>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013aa:	4b1b      	ldr	r3, [pc, #108]	; (8001418 <MX_ADC1_Init+0x98>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013b0:	4b19      	ldr	r3, [pc, #100]	; (8001418 <MX_ADC1_Init+0x98>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013b8:	4b17      	ldr	r3, [pc, #92]	; (8001418 <MX_ADC1_Init+0x98>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013be:	4b16      	ldr	r3, [pc, #88]	; (8001418 <MX_ADC1_Init+0x98>)
 80013c0:	4a17      	ldr	r2, [pc, #92]	; (8001420 <MX_ADC1_Init+0xa0>)
 80013c2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013c4:	4b14      	ldr	r3, [pc, #80]	; (8001418 <MX_ADC1_Init+0x98>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80013ca:	4b13      	ldr	r3, [pc, #76]	; (8001418 <MX_ADC1_Init+0x98>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013d0:	4b11      	ldr	r3, [pc, #68]	; (8001418 <MX_ADC1_Init+0x98>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013d8:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <MX_ADC1_Init+0x98>)
 80013da:	2201      	movs	r2, #1
 80013dc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013de:	480e      	ldr	r0, [pc, #56]	; (8001418 <MX_ADC1_Init+0x98>)
 80013e0:	f003 ff72 	bl	80052c8 <HAL_ADC_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80013ea:	f000 fc8b 	bl	8001d04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80013ee:	2306      	movs	r3, #6
 80013f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013f2:	2301      	movs	r3, #1
 80013f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013f6:	2300      	movs	r3, #0
 80013f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013fa:	463b      	mov	r3, r7
 80013fc:	4619      	mov	r1, r3
 80013fe:	4806      	ldr	r0, [pc, #24]	; (8001418 <MX_ADC1_Init+0x98>)
 8001400:	f003 ffa6 	bl	8005350 <HAL_ADC_ConfigChannel>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800140a:	f000 fc7b 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800140e:	bf00      	nop
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20004f90 	.word	0x20004f90
 800141c:	40012000 	.word	0x40012000
 8001420:	0f000001 	.word	0x0f000001

08001424 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08a      	sub	sp, #40	; 0x28
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a17      	ldr	r2, [pc, #92]	; (80014a0 <HAL_ADC_MspInit+0x7c>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d127      	bne.n	8001496 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	4b16      	ldr	r3, [pc, #88]	; (80014a4 <HAL_ADC_MspInit+0x80>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144e:	4a15      	ldr	r2, [pc, #84]	; (80014a4 <HAL_ADC_MspInit+0x80>)
 8001450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001454:	6453      	str	r3, [r2, #68]	; 0x44
 8001456:	4b13      	ldr	r3, [pc, #76]	; (80014a4 <HAL_ADC_MspInit+0x80>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800145e:	613b      	str	r3, [r7, #16]
 8001460:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <HAL_ADC_MspInit+0x80>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a0e      	ldr	r2, [pc, #56]	; (80014a4 <HAL_ADC_MspInit+0x80>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <HAL_ADC_MspInit+0x80>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 800147e:	2340      	movs	r3, #64	; 0x40
 8001480:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001482:	2303      	movs	r3, #3
 8001484:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 800148a:	f107 0314 	add.w	r3, r7, #20
 800148e:	4619      	mov	r1, r3
 8001490:	4805      	ldr	r0, [pc, #20]	; (80014a8 <HAL_ADC_MspInit+0x84>)
 8001492:	f004 fa6d 	bl	8005970 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001496:	bf00      	nop
 8001498:	3728      	adds	r7, #40	; 0x28
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40012000 	.word	0x40012000
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40020000 	.word	0x40020000

080014ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08e      	sub	sp, #56	; 0x38
 80014b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	60da      	str	r2, [r3, #12]
 80014c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	623b      	str	r3, [r7, #32]
 80014c6:	4bb5      	ldr	r3, [pc, #724]	; (800179c <MX_GPIO_Init+0x2f0>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	4ab4      	ldr	r2, [pc, #720]	; (800179c <MX_GPIO_Init+0x2f0>)
 80014cc:	f043 0310 	orr.w	r3, r3, #16
 80014d0:	6313      	str	r3, [r2, #48]	; 0x30
 80014d2:	4bb2      	ldr	r3, [pc, #712]	; (800179c <MX_GPIO_Init+0x2f0>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f003 0310 	and.w	r3, r3, #16
 80014da:	623b      	str	r3, [r7, #32]
 80014dc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
 80014e2:	4bae      	ldr	r3, [pc, #696]	; (800179c <MX_GPIO_Init+0x2f0>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	4aad      	ldr	r2, [pc, #692]	; (800179c <MX_GPIO_Init+0x2f0>)
 80014e8:	f043 0304 	orr.w	r3, r3, #4
 80014ec:	6313      	str	r3, [r2, #48]	; 0x30
 80014ee:	4bab      	ldr	r3, [pc, #684]	; (800179c <MX_GPIO_Init+0x2f0>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f003 0304 	and.w	r3, r3, #4
 80014f6:	61fb      	str	r3, [r7, #28]
 80014f8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	61bb      	str	r3, [r7, #24]
 80014fe:	4ba7      	ldr	r3, [pc, #668]	; (800179c <MX_GPIO_Init+0x2f0>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	4aa6      	ldr	r2, [pc, #664]	; (800179c <MX_GPIO_Init+0x2f0>)
 8001504:	f043 0320 	orr.w	r3, r3, #32
 8001508:	6313      	str	r3, [r2, #48]	; 0x30
 800150a:	4ba4      	ldr	r3, [pc, #656]	; (800179c <MX_GPIO_Init+0x2f0>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f003 0320 	and.w	r3, r3, #32
 8001512:	61bb      	str	r3, [r7, #24]
 8001514:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]
 800151a:	4ba0      	ldr	r3, [pc, #640]	; (800179c <MX_GPIO_Init+0x2f0>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a9f      	ldr	r2, [pc, #636]	; (800179c <MX_GPIO_Init+0x2f0>)
 8001520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b9d      	ldr	r3, [pc, #628]	; (800179c <MX_GPIO_Init+0x2f0>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800152e:	617b      	str	r3, [r7, #20]
 8001530:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	613b      	str	r3, [r7, #16]
 8001536:	4b99      	ldr	r3, [pc, #612]	; (800179c <MX_GPIO_Init+0x2f0>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	4a98      	ldr	r2, [pc, #608]	; (800179c <MX_GPIO_Init+0x2f0>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6313      	str	r3, [r2, #48]	; 0x30
 8001542:	4b96      	ldr	r3, [pc, #600]	; (800179c <MX_GPIO_Init+0x2f0>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	613b      	str	r3, [r7, #16]
 800154c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	4b92      	ldr	r3, [pc, #584]	; (800179c <MX_GPIO_Init+0x2f0>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	4a91      	ldr	r2, [pc, #580]	; (800179c <MX_GPIO_Init+0x2f0>)
 8001558:	f043 0302 	orr.w	r3, r3, #2
 800155c:	6313      	str	r3, [r2, #48]	; 0x30
 800155e:	4b8f      	ldr	r3, [pc, #572]	; (800179c <MX_GPIO_Init+0x2f0>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	60bb      	str	r3, [r7, #8]
 800156e:	4b8b      	ldr	r3, [pc, #556]	; (800179c <MX_GPIO_Init+0x2f0>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4a8a      	ldr	r2, [pc, #552]	; (800179c <MX_GPIO_Init+0x2f0>)
 8001574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
 800157a:	4b88      	ldr	r3, [pc, #544]	; (800179c <MX_GPIO_Init+0x2f0>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	607b      	str	r3, [r7, #4]
 800158a:	4b84      	ldr	r3, [pc, #528]	; (800179c <MX_GPIO_Init+0x2f0>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a83      	ldr	r2, [pc, #524]	; (800179c <MX_GPIO_Init+0x2f0>)
 8001590:	f043 0308 	orr.w	r3, r3, #8
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b81      	ldr	r3, [pc, #516]	; (800179c <MX_GPIO_Init+0x2f0>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0308 	and.w	r3, r3, #8
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 80015a2:	2200      	movs	r2, #0
 80015a4:	f248 4184 	movw	r1, #33924	; 0x8484
 80015a8:	487d      	ldr	r0, [pc, #500]	; (80017a0 <MX_GPIO_Init+0x2f4>)
 80015aa:	f004 fb8d 	bl	8005cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin, GPIO_PIN_RESET);
 80015ae:	2200      	movs	r2, #0
 80015b0:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 80015b4:	487b      	ldr	r0, [pc, #492]	; (80017a4 <MX_GPIO_Init+0x2f8>)
 80015b6:	f004 fb87 	bl	8005cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 80015ba:	2200      	movs	r2, #0
 80015bc:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80015c0:	4879      	ldr	r0, [pc, #484]	; (80017a8 <MX_GPIO_Init+0x2fc>)
 80015c2:	f004 fb81 	bl	8005cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_LEDF_GPIO_Port, OUT_LEDF_Pin, GPIO_PIN_RESET);
 80015c6:	2200      	movs	r2, #0
 80015c8:	2108      	movs	r1, #8
 80015ca:	4878      	ldr	r0, [pc, #480]	; (80017ac <MX_GPIO_Init+0x300>)
 80015cc:	f004 fb7c 	bl	8005cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 80015d0:	2200      	movs	r2, #0
 80015d2:	f645 2126 	movw	r1, #23078	; 0x5a26
 80015d6:	4876      	ldr	r0, [pc, #472]	; (80017b0 <MX_GPIO_Init+0x304>)
 80015d8:	f004 fb76 	bl	8005cc8 <HAL_GPIO_WritePin>
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_SX_CS_Pin|GPIO_PIN_8|POWER_ON_EXT_LED_Pin, GPIO_PIN_RESET);
 80015dc:	2200      	movs	r2, #0
 80015de:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 80015e2:	4874      	ldr	r0, [pc, #464]	; (80017b4 <MX_GPIO_Init+0x308>)
 80015e4:	f004 fb70 	bl	8005cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 80015e8:	2200      	movs	r2, #0
 80015ea:	f647 41f0 	movw	r1, #31984	; 0x7cf0
 80015ee:	4872      	ldr	r0, [pc, #456]	; (80017b8 <MX_GPIO_Init+0x30c>)
 80015f0:	f004 fb6a 	bl	8005cc8 <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin;
 80015f4:	f248 4384 	movw	r3, #33924	; 0x8484
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fa:	2301      	movs	r3, #1
 80015fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001602:	2300      	movs	r3, #0
 8001604:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001606:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800160a:	4619      	mov	r1, r3
 800160c:	4864      	ldr	r0, [pc, #400]	; (80017a0 <MX_GPIO_Init+0x2f4>)
 800160e:	f004 f9af 	bl	8005970 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin;
 8001612:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001618:	2301      	movs	r3, #1
 800161a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001620:	2300      	movs	r3, #0
 8001622:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001624:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001628:	4619      	mov	r1, r3
 800162a:	485e      	ldr	r0, [pc, #376]	; (80017a4 <MX_GPIO_Init+0x2f8>)
 800162c:	f004 f9a0 	bl	8005970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 8001630:	2301      	movs	r3, #1
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001634:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001638:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 800163e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001642:	4619      	mov	r1, r3
 8001644:	4858      	ldr	r0, [pc, #352]	; (80017a8 <MX_GPIO_Init+0x2fc>)
 8001646:	f004 f993 	bl	8005970 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin;
 800164a:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800164e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001650:	2301      	movs	r3, #1
 8001652:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001658:	2300      	movs	r3, #0
 800165a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800165c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001660:	4619      	mov	r1, r3
 8001662:	4851      	ldr	r0, [pc, #324]	; (80017a8 <MX_GPIO_Init+0x2fc>)
 8001664:	f004 f984 	bl	8005970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUT_LEDF_Pin;
 8001668:	2308      	movs	r3, #8
 800166a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166c:	2301      	movs	r3, #1
 800166e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001674:	2300      	movs	r3, #0
 8001676:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OUT_LEDF_GPIO_Port, &GPIO_InitStruct);
 8001678:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167c:	4619      	mov	r1, r3
 800167e:	484b      	ldr	r0, [pc, #300]	; (80017ac <MX_GPIO_Init+0x300>)
 8001680:	f004 f976 	bl	8005970 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 8001684:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800168a:	2300      	movs	r3, #0
 800168c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001696:	4619      	mov	r1, r3
 8001698:	4843      	ldr	r0, [pc, #268]	; (80017a8 <MX_GPIO_Init+0x2fc>)
 800169a:	f004 f969 	bl	8005970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 800169e:	2302      	movs	r3, #2
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a2:	2300      	movs	r3, #0
 80016a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 80016aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ae:	4619      	mov	r1, r3
 80016b0:	4840      	ldr	r0, [pc, #256]	; (80017b4 <MX_GPIO_Init+0x308>)
 80016b2:	f004 f95d 	bl	8005970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_2_Pin;
 80016b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016bc:	2300      	movs	r3, #0
 80016be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_PyroValve_Cont_2_GPIO_Port, &GPIO_InitStruct);
 80016c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c8:	4619      	mov	r1, r3
 80016ca:	4836      	ldr	r0, [pc, #216]	; (80017a4 <MX_GPIO_Init+0x2f8>)
 80016cc:	f004 f950 	bl	8005970 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_1_Pin|SX_BUSY_Pin|SX_DIO_Pin|IN_EJ_Main_Cont_Pin
 80016d0:	f242 4319 	movw	r3, #9241	; 0x2419
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
                          |IN_EJ_Drogue_Cont_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d6:	2300      	movs	r3, #0
 80016d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e2:	4619      	mov	r1, r3
 80016e4:	4832      	ldr	r0, [pc, #200]	; (80017b0 <MX_GPIO_Init+0x304>)
 80016e6:	f004 f943 	bl	8005970 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 80016ea:	f645 2326 	movw	r3, #23078	; 0x5a26
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f0:	2301      	movs	r3, #1
 80016f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f8:	2300      	movs	r3, #0
 80016fa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001700:	4619      	mov	r1, r3
 8001702:	482b      	ldr	r0, [pc, #172]	; (80017b0 <MX_GPIO_Init+0x304>)
 8001704:	f004 f934 	bl	8005970 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = PAYLOAD_I2C_EN_Pin|IN_XTend_Continuity_Pin;
 8001708:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800170c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800170e:	2300      	movs	r3, #0
 8001710:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800171a:	4619      	mov	r1, r3
 800171c:	4820      	ldr	r0, [pc, #128]	; (80017a0 <MX_GPIO_Init+0x2f4>)
 800171e:	f004 f927 	bl	8005970 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB8 PBPin */
  GPIO_InitStruct.Pin = SPI2_SX_CS_Pin|GPIO_PIN_8|POWER_ON_EXT_LED_Pin;
 8001722:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001728:	2301      	movs	r3, #1
 800172a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001730:	2300      	movs	r3, #0
 8001732:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001734:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001738:	4619      	mov	r1, r3
 800173a:	481e      	ldr	r0, [pc, #120]	; (80017b4 <MX_GPIO_Init+0x308>)
 800173c:	f004 f918 	bl	8005970 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8001740:	f647 43f0 	movw	r3, #31984	; 0x7cf0
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001746:	2301      	movs	r3, #1
 8001748:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174e:	2300      	movs	r3, #0
 8001750:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001756:	4619      	mov	r1, r3
 8001758:	4817      	ldr	r0, [pc, #92]	; (80017b8 <MX_GPIO_Init+0x30c>)
 800175a:	f004 f909 	bl	8005970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 800175e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001762:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001764:	2300      	movs	r3, #0
 8001766:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 800176c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001770:	4619      	mov	r1, r3
 8001772:	4811      	ldr	r0, [pc, #68]	; (80017b8 <MX_GPIO_Init+0x30c>)
 8001774:	f004 f8fc 	bl	8005970 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_LSM6DSR_INT1_Pin;
 8001778:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800177c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800177e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001782:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800178c:	4619      	mov	r1, r3
 800178e:	4808      	ldr	r0, [pc, #32]	; (80017b0 <MX_GPIO_Init+0x304>)
 8001790:	f004 f8ee 	bl	8005970 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001794:	2200      	movs	r2, #0
 8001796:	2105      	movs	r1, #5
 8001798:	2006      	movs	r0, #6
 800179a:	e00f      	b.n	80017bc <MX_GPIO_Init+0x310>
 800179c:	40023800 	.word	0x40023800
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40021400 	.word	0x40021400
 80017a8:	40020800 	.word	0x40020800
 80017ac:	40020000 	.word	0x40020000
 80017b0:	40021800 	.word	0x40021800
 80017b4:	40020400 	.word	0x40020400
 80017b8:	40020c00 	.word	0x40020c00
 80017bc:	f004 f8ae 	bl	800591c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80017c0:	2006      	movs	r0, #6
 80017c2:	f004 f8c7 	bl	8005954 <HAL_NVIC_EnableIRQ>

}
 80017c6:	bf00      	nop
 80017c8:	3738      	adds	r7, #56	; 0x38
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop

080017d0 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80017d4:	4b1b      	ldr	r3, [pc, #108]	; (8001844 <MX_I2C2_Init+0x74>)
 80017d6:	4a1c      	ldr	r2, [pc, #112]	; (8001848 <MX_I2C2_Init+0x78>)
 80017d8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80017da:	4b1a      	ldr	r3, [pc, #104]	; (8001844 <MX_I2C2_Init+0x74>)
 80017dc:	4a1b      	ldr	r2, [pc, #108]	; (800184c <MX_I2C2_Init+0x7c>)
 80017de:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017e0:	4b18      	ldr	r3, [pc, #96]	; (8001844 <MX_I2C2_Init+0x74>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80017e6:	4b17      	ldr	r3, [pc, #92]	; (8001844 <MX_I2C2_Init+0x74>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017ec:	4b15      	ldr	r3, [pc, #84]	; (8001844 <MX_I2C2_Init+0x74>)
 80017ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017f2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017f4:	4b13      	ldr	r3, [pc, #76]	; (8001844 <MX_I2C2_Init+0x74>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80017fa:	4b12      	ldr	r3, [pc, #72]	; (8001844 <MX_I2C2_Init+0x74>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001800:	4b10      	ldr	r3, [pc, #64]	; (8001844 <MX_I2C2_Init+0x74>)
 8001802:	2200      	movs	r2, #0
 8001804:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001806:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <MX_I2C2_Init+0x74>)
 8001808:	2200      	movs	r2, #0
 800180a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800180c:	480d      	ldr	r0, [pc, #52]	; (8001844 <MX_I2C2_Init+0x74>)
 800180e:	f004 fa99 	bl	8005d44 <HAL_I2C_Init>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001818:	f000 fa74 	bl	8001d04 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800181c:	2100      	movs	r1, #0
 800181e:	4809      	ldr	r0, [pc, #36]	; (8001844 <MX_I2C2_Init+0x74>)
 8001820:	f005 fa4f 	bl	8006cc2 <HAL_I2CEx_ConfigAnalogFilter>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800182a:	f000 fa6b 	bl	8001d04 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800182e:	2100      	movs	r1, #0
 8001830:	4804      	ldr	r0, [pc, #16]	; (8001844 <MX_I2C2_Init+0x74>)
 8001832:	f005 fa82 	bl	8006d3a <HAL_I2CEx_ConfigDigitalFilter>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 800183c:	f000 fa62 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001840:	bf00      	nop
 8001842:	bd80      	pop	{r7, pc}
 8001844:	2000502c 	.word	0x2000502c
 8001848:	40005800 	.word	0x40005800
 800184c:	000186a0 	.word	0x000186a0

08001850 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001854:	4b1b      	ldr	r3, [pc, #108]	; (80018c4 <MX_I2C3_Init+0x74>)
 8001856:	4a1c      	ldr	r2, [pc, #112]	; (80018c8 <MX_I2C3_Init+0x78>)
 8001858:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800185a:	4b1a      	ldr	r3, [pc, #104]	; (80018c4 <MX_I2C3_Init+0x74>)
 800185c:	4a1b      	ldr	r2, [pc, #108]	; (80018cc <MX_I2C3_Init+0x7c>)
 800185e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001860:	4b18      	ldr	r3, [pc, #96]	; (80018c4 <MX_I2C3_Init+0x74>)
 8001862:	2200      	movs	r2, #0
 8001864:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001866:	4b17      	ldr	r3, [pc, #92]	; (80018c4 <MX_I2C3_Init+0x74>)
 8001868:	2200      	movs	r2, #0
 800186a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800186c:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <MX_I2C3_Init+0x74>)
 800186e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001872:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001874:	4b13      	ldr	r3, [pc, #76]	; (80018c4 <MX_I2C3_Init+0x74>)
 8001876:	2200      	movs	r2, #0
 8001878:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800187a:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <MX_I2C3_Init+0x74>)
 800187c:	2200      	movs	r2, #0
 800187e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001880:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <MX_I2C3_Init+0x74>)
 8001882:	2200      	movs	r2, #0
 8001884:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001886:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <MX_I2C3_Init+0x74>)
 8001888:	2200      	movs	r2, #0
 800188a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800188c:	480d      	ldr	r0, [pc, #52]	; (80018c4 <MX_I2C3_Init+0x74>)
 800188e:	f004 fa59 	bl	8005d44 <HAL_I2C_Init>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001898:	f000 fa34 	bl	8001d04 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800189c:	2100      	movs	r1, #0
 800189e:	4809      	ldr	r0, [pc, #36]	; (80018c4 <MX_I2C3_Init+0x74>)
 80018a0:	f005 fa0f 	bl	8006cc2 <HAL_I2CEx_ConfigAnalogFilter>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80018aa:	f000 fa2b 	bl	8001d04 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80018ae:	2100      	movs	r1, #0
 80018b0:	4804      	ldr	r0, [pc, #16]	; (80018c4 <MX_I2C3_Init+0x74>)
 80018b2:	f005 fa42 	bl	8006d3a <HAL_I2CEx_ConfigDigitalFilter>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80018bc:	f000 fa22 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80018c0:	bf00      	nop
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20004fd8 	.word	0x20004fd8
 80018c8:	40005c00 	.word	0x40005c00
 80018cc:	000186a0 	.word	0x000186a0

080018d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08c      	sub	sp, #48	; 0x30
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d8:	f107 031c 	add.w	r3, r7, #28
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a42      	ldr	r2, [pc, #264]	; (80019f8 <HAL_I2C_MspInit+0x128>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d12d      	bne.n	800194e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	61bb      	str	r3, [r7, #24]
 80018f6:	4b41      	ldr	r3, [pc, #260]	; (80019fc <HAL_I2C_MspInit+0x12c>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	4a40      	ldr	r2, [pc, #256]	; (80019fc <HAL_I2C_MspInit+0x12c>)
 80018fc:	f043 0302 	orr.w	r3, r3, #2
 8001900:	6313      	str	r3, [r2, #48]	; 0x30
 8001902:	4b3e      	ldr	r3, [pc, #248]	; (80019fc <HAL_I2C_MspInit+0x12c>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	61bb      	str	r3, [r7, #24]
 800190c:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800190e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001914:	2312      	movs	r3, #18
 8001916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001918:	2301      	movs	r3, #1
 800191a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191c:	2303      	movs	r3, #3
 800191e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001920:	2304      	movs	r3, #4
 8001922:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001924:	f107 031c 	add.w	r3, r7, #28
 8001928:	4619      	mov	r1, r3
 800192a:	4835      	ldr	r0, [pc, #212]	; (8001a00 <HAL_I2C_MspInit+0x130>)
 800192c:	f004 f820 	bl	8005970 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	4b31      	ldr	r3, [pc, #196]	; (80019fc <HAL_I2C_MspInit+0x12c>)
 8001936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001938:	4a30      	ldr	r2, [pc, #192]	; (80019fc <HAL_I2C_MspInit+0x12c>)
 800193a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800193e:	6413      	str	r3, [r2, #64]	; 0x40
 8001940:	4b2e      	ldr	r3, [pc, #184]	; (80019fc <HAL_I2C_MspInit+0x12c>)
 8001942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001944:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001948:	617b      	str	r3, [r7, #20]
 800194a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800194c:	e050      	b.n	80019f0 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a2c      	ldr	r2, [pc, #176]	; (8001a04 <HAL_I2C_MspInit+0x134>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d14b      	bne.n	80019f0 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001958:	2300      	movs	r3, #0
 800195a:	613b      	str	r3, [r7, #16]
 800195c:	4b27      	ldr	r3, [pc, #156]	; (80019fc <HAL_I2C_MspInit+0x12c>)
 800195e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001960:	4a26      	ldr	r2, [pc, #152]	; (80019fc <HAL_I2C_MspInit+0x12c>)
 8001962:	f043 0304 	orr.w	r3, r3, #4
 8001966:	6313      	str	r3, [r2, #48]	; 0x30
 8001968:	4b24      	ldr	r3, [pc, #144]	; (80019fc <HAL_I2C_MspInit+0x12c>)
 800196a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	613b      	str	r3, [r7, #16]
 8001972:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001974:	2300      	movs	r3, #0
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	4b20      	ldr	r3, [pc, #128]	; (80019fc <HAL_I2C_MspInit+0x12c>)
 800197a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197c:	4a1f      	ldr	r2, [pc, #124]	; (80019fc <HAL_I2C_MspInit+0x12c>)
 800197e:	f043 0301 	orr.w	r3, r3, #1
 8001982:	6313      	str	r3, [r2, #48]	; 0x30
 8001984:	4b1d      	ldr	r3, [pc, #116]	; (80019fc <HAL_I2C_MspInit+0x12c>)
 8001986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001990:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001996:	2312      	movs	r3, #18
 8001998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800199a:	2301      	movs	r3, #1
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199e:	2303      	movs	r3, #3
 80019a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80019a2:	2304      	movs	r3, #4
 80019a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019a6:	f107 031c 	add.w	r3, r7, #28
 80019aa:	4619      	mov	r1, r3
 80019ac:	4816      	ldr	r0, [pc, #88]	; (8001a08 <HAL_I2C_MspInit+0x138>)
 80019ae:	f003 ffdf 	bl	8005970 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80019b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019b8:	2312      	movs	r3, #18
 80019ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019bc:	2301      	movs	r3, #1
 80019be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c0:	2303      	movs	r3, #3
 80019c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80019c4:	2304      	movs	r3, #4
 80019c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c8:	f107 031c 	add.w	r3, r7, #28
 80019cc:	4619      	mov	r1, r3
 80019ce:	480f      	ldr	r0, [pc, #60]	; (8001a0c <HAL_I2C_MspInit+0x13c>)
 80019d0:	f003 ffce 	bl	8005970 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80019d4:	2300      	movs	r3, #0
 80019d6:	60bb      	str	r3, [r7, #8]
 80019d8:	4b08      	ldr	r3, [pc, #32]	; (80019fc <HAL_I2C_MspInit+0x12c>)
 80019da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019dc:	4a07      	ldr	r2, [pc, #28]	; (80019fc <HAL_I2C_MspInit+0x12c>)
 80019de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019e2:	6413      	str	r3, [r2, #64]	; 0x40
 80019e4:	4b05      	ldr	r3, [pc, #20]	; (80019fc <HAL_I2C_MspInit+0x12c>)
 80019e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	68bb      	ldr	r3, [r7, #8]
}
 80019f0:	bf00      	nop
 80019f2:	3730      	adds	r7, #48	; 0x30
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40005800 	.word	0x40005800
 80019fc:	40023800 	.word	0x40023800
 8001a00:	40020400 	.word	0x40020400
 8001a04:	40005c00 	.word	0x40005c00
 8001a08:	40020800 	.word	0x40020800
 8001a0c:	40020000 	.word	0x40020000

08001a10 <main>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int main(void){
 8001a10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a14:	b0c4      	sub	sp, #272	; 0x110
 8001a16:	af04      	add	r7, sp, #16
	MRT_STM_Init();
 8001a18:	f000 f940 	bl	8001c9c <MRT_STM_Init>
	println("\r\n\r\nSTM Init...OK");
 8001a1c:	4860      	ldr	r0, [pc, #384]	; (8001ba0 <main+0x190>)
 8001a1e:	f7ff faf5 	bl	800100c <println>

	MRT_Init();
 8001a22:	f7ff fb27 	bl	8001074 <MRT_Init>

	println("\r\n/****Starting FC****/\r\n");
 8001a26:	485f      	ldr	r0, [pc, #380]	; (8001ba4 <main+0x194>)
 8001a28:	f7ff faf0 	bl	800100c <println>
	#define TX_BUF_DIM 256
	char buffer[TX_BUF_DIM];


		while(1){
			HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	2104      	movs	r1, #4
 8001a30:	485d      	ldr	r0, [pc, #372]	; (8001ba8 <main+0x198>)
 8001a32:	f004 f949 	bl	8005cc8 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8001a36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a3a:	f003 fc21 	bl	8005280 <HAL_Delay>

			  //GPS
			  //GPS_Poll();

		  	  //LSM6DSR
		  	  hlsm6dsr.pollAll();
 8001a3e:	4b5b      	ldr	r3, [pc, #364]	; (8001bac <main+0x19c>)
 8001a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a42:	4798      	blx	r3

			  //LPS22HH
			  hlps22hh.pollAll();
 8001a44:	4b5a      	ldr	r3, [pc, #360]	; (8001bb0 <main+0x1a0>)
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	4798      	blx	r3




			  //GPS
			  memset(buffer, 0, TX_BUF_DIM);
 8001a4a:	463b      	mov	r3, r7
 8001a4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a50:	2100      	movs	r1, #0
 8001a52:	4618      	mov	r0, r3
 8001a54:	f011 f82a 	bl	8012aac <memset>
			  //sprintf(buffer,"Alt: %.2f   Long: %.2f   Time: %.0f\r\n",GPS.dec_latitude, GPS.dec_longitude, GPS.utc_time);
			  print(buffer);
 8001a58:	463b      	mov	r3, r7
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff faf4 	bl	8001048 <print>

			  //LSM6DSR
			  memset(buffer, 0, TX_BUF_DIM);
 8001a60:	463b      	mov	r3, r7
 8001a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a66:	2100      	movs	r1, #0
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f011 f81f 	bl	8012aac <memset>
			  sprintf(buffer, "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
					  hlsm6dsr.acceleration_mg[0], hlsm6dsr.acceleration_mg[1], hlsm6dsr.acceleration_mg[2]);
 8001a6e:	4b4f      	ldr	r3, [pc, #316]	; (8001bac <main+0x19c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
			  sprintf(buffer, "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7fe fd78 	bl	8000568 <__aeabi_f2d>
 8001a78:	4680      	mov	r8, r0
 8001a7a:	4689      	mov	r9, r1
					  hlsm6dsr.acceleration_mg[0], hlsm6dsr.acceleration_mg[1], hlsm6dsr.acceleration_mg[2]);
 8001a7c:	4b4b      	ldr	r3, [pc, #300]	; (8001bac <main+0x19c>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
			  sprintf(buffer, "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7fe fd71 	bl	8000568 <__aeabi_f2d>
 8001a86:	4604      	mov	r4, r0
 8001a88:	460d      	mov	r5, r1
					  hlsm6dsr.acceleration_mg[0], hlsm6dsr.acceleration_mg[1], hlsm6dsr.acceleration_mg[2]);
 8001a8a:	4b48      	ldr	r3, [pc, #288]	; (8001bac <main+0x19c>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
			  sprintf(buffer, "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7fe fd6a 	bl	8000568 <__aeabi_f2d>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	4638      	mov	r0, r7
 8001a9a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001a9e:	e9cd 4500 	strd	r4, r5, [sp]
 8001aa2:	4642      	mov	r2, r8
 8001aa4:	464b      	mov	r3, r9
 8001aa6:	4943      	ldr	r1, [pc, #268]	; (8001bb4 <main+0x1a4>)
 8001aa8:	f012 f814 	bl	8013ad4 <siprintf>
			  print(buffer);
 8001aac:	463b      	mov	r3, r7
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff faca 	bl	8001048 <print>

			  memset(buffer, 0, TX_BUF_DIM);
 8001ab4:	463b      	mov	r3, r7
 8001ab6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f010 fff5 	bl	8012aac <memset>
			  sprintf(buffer,"Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\r\n",
					  hlsm6dsr.angular_rate_mdps[0], hlsm6dsr.angular_rate_mdps[1], hlsm6dsr.angular_rate_mdps[2]);
 8001ac2:	4b3a      	ldr	r3, [pc, #232]	; (8001bac <main+0x19c>)
 8001ac4:	68db      	ldr	r3, [r3, #12]
			  sprintf(buffer,"Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\r\n",
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7fe fd4e 	bl	8000568 <__aeabi_f2d>
 8001acc:	4680      	mov	r8, r0
 8001ace:	4689      	mov	r9, r1
					  hlsm6dsr.angular_rate_mdps[0], hlsm6dsr.angular_rate_mdps[1], hlsm6dsr.angular_rate_mdps[2]);
 8001ad0:	4b36      	ldr	r3, [pc, #216]	; (8001bac <main+0x19c>)
 8001ad2:	691b      	ldr	r3, [r3, #16]
			  sprintf(buffer,"Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\r\n",
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7fe fd47 	bl	8000568 <__aeabi_f2d>
 8001ada:	4604      	mov	r4, r0
 8001adc:	460d      	mov	r5, r1
					  hlsm6dsr.angular_rate_mdps[0], hlsm6dsr.angular_rate_mdps[1], hlsm6dsr.angular_rate_mdps[2]);
 8001ade:	4b33      	ldr	r3, [pc, #204]	; (8001bac <main+0x19c>)
 8001ae0:	695b      	ldr	r3, [r3, #20]
			  sprintf(buffer,"Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\r\n",
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7fe fd40 	bl	8000568 <__aeabi_f2d>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4638      	mov	r0, r7
 8001aee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001af2:	e9cd 4500 	strd	r4, r5, [sp]
 8001af6:	4642      	mov	r2, r8
 8001af8:	464b      	mov	r3, r9
 8001afa:	492f      	ldr	r1, [pc, #188]	; (8001bb8 <main+0x1a8>)
 8001afc:	f011 ffea 	bl	8013ad4 <siprintf>
			  print(buffer);
 8001b00:	463b      	mov	r3, r7
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff faa0 	bl	8001048 <print>

			  memset(buffer, 0, TX_BUF_DIM);
 8001b08:	463b      	mov	r3, r7
 8001b0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b0e:	2100      	movs	r1, #0
 8001b10:	4618      	mov	r0, r3
 8001b12:	f010 ffcb 	bl	8012aac <memset>
			  sprintf(buffer, "Temperature [degC]:%6.2f\r\n", hlsm6dsr.temperature_degC);
 8001b16:	4b25      	ldr	r3, [pc, #148]	; (8001bac <main+0x19c>)
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7fe fd24 	bl	8000568 <__aeabi_f2d>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	4638      	mov	r0, r7
 8001b26:	4925      	ldr	r1, [pc, #148]	; (8001bbc <main+0x1ac>)
 8001b28:	f011 ffd4 	bl	8013ad4 <siprintf>
			  print(buffer);
 8001b2c:	463b      	mov	r3, r7
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff fa8a 	bl	8001048 <print>


			  //LPS22HH
			  memset(buffer, 0, TX_BUF_DIM);
 8001b34:	463b      	mov	r3, r7
 8001b36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f010 ffb5 	bl	8012aac <memset>
			  sprintf(buffer,"Pressure [hPa]:%6.2f\r\n",hlps22hh.pressure_hPa);
 8001b42:	4b1b      	ldr	r3, [pc, #108]	; (8001bb0 <main+0x1a0>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7fe fd0e 	bl	8000568 <__aeabi_f2d>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	4638      	mov	r0, r7
 8001b52:	491b      	ldr	r1, [pc, #108]	; (8001bc0 <main+0x1b0>)
 8001b54:	f011 ffbe 	bl	8013ad4 <siprintf>
			  print(buffer);
 8001b58:	463b      	mov	r3, r7
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff fa74 	bl	8001048 <print>

			  memset(buffer, 0, TX_BUF_DIM);
 8001b60:	463b      	mov	r3, r7
 8001b62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b66:	2100      	movs	r1, #0
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f010 ff9f 	bl	8012aac <memset>
			  sprintf(buffer, "Temperature [degC]:%6.2f\r\n", hlps22hh.temperature_degC);
 8001b6e:	4b10      	ldr	r3, [pc, #64]	; (8001bb0 <main+0x1a0>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7fe fcf8 	bl	8000568 <__aeabi_f2d>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	4638      	mov	r0, r7
 8001b7e:	490f      	ldr	r1, [pc, #60]	; (8001bbc <main+0x1ac>)
 8001b80:	f011 ffa8 	bl	8013ad4 <siprintf>
			  print(buffer);
 8001b84:	463b      	mov	r3, r7
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff fa5e 	bl	8001048 <print>

			HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2104      	movs	r1, #4
 8001b90:	4805      	ldr	r0, [pc, #20]	; (8001ba8 <main+0x198>)
 8001b92:	f004 f899 	bl	8005cc8 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8001b96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b9a:	f003 fb71 	bl	8005280 <HAL_Delay>
			HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 8001b9e:	e745      	b.n	8001a2c <main+0x1c>
 8001ba0:	08017488 	.word	0x08017488
 8001ba4:	0801749c 	.word	0x0801749c
 8001ba8:	40020800 	.word	0x40020800
 8001bac:	200003c8 	.word	0x200003c8
 8001bb0:	200003f4 	.word	0x200003f4
 8001bb4:	080174b8 	.word	0x080174b8
 8001bb8:	080174e0 	.word	0x080174e0
 8001bbc:	08017508 	.word	0x08017508
 8001bc0:	08017524 	.word	0x08017524

08001bc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b094      	sub	sp, #80	; 0x50
 8001bc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bca:	f107 0320 	add.w	r3, r7, #32
 8001bce:	2230      	movs	r2, #48	; 0x30
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f010 ff6a 	bl	8012aac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bd8:	f107 030c 	add.w	r3, r7, #12
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001be8:	2300      	movs	r3, #0
 8001bea:	60bb      	str	r3, [r7, #8]
 8001bec:	4b29      	ldr	r3, [pc, #164]	; (8001c94 <SystemClock_Config+0xd0>)
 8001bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf0:	4a28      	ldr	r2, [pc, #160]	; (8001c94 <SystemClock_Config+0xd0>)
 8001bf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf6:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf8:	4b26      	ldr	r3, [pc, #152]	; (8001c94 <SystemClock_Config+0xd0>)
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c00:	60bb      	str	r3, [r7, #8]
 8001c02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001c04:	2300      	movs	r3, #0
 8001c06:	607b      	str	r3, [r7, #4]
 8001c08:	4b23      	ldr	r3, [pc, #140]	; (8001c98 <SystemClock_Config+0xd4>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c10:	4a21      	ldr	r2, [pc, #132]	; (8001c98 <SystemClock_Config+0xd4>)
 8001c12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c16:	6013      	str	r3, [r2, #0]
 8001c18:	4b1f      	ldr	r3, [pc, #124]	; (8001c98 <SystemClock_Config+0xd4>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c20:	607b      	str	r3, [r7, #4]
 8001c22:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001c24:	2309      	movs	r3, #9
 8001c26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c32:	2302      	movs	r3, #2
 8001c34:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c3c:	2308      	movs	r3, #8
 8001c3e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001c40:	2348      	movs	r3, #72	; 0x48
 8001c42:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c44:	2302      	movs	r3, #2
 8001c46:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c4c:	f107 0320 	add.w	r3, r7, #32
 8001c50:	4618      	mov	r0, r3
 8001c52:	f006 f869 	bl	8007d28 <HAL_RCC_OscConfig>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001c5c:	f000 f852 	bl	8001d04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c60:	230f      	movs	r3, #15
 8001c62:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001c64:	2301      	movs	r3, #1
 8001c66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c70:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c72:	2300      	movs	r3, #0
 8001c74:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001c76:	f107 030c 	add.w	r3, r7, #12
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f006 facb 	bl	8008218 <HAL_RCC_ClockConfig>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001c88:	f000 f83c 	bl	8001d04 <Error_Handler>
  }
}
 8001c8c:	bf00      	nop
 8001c8e:	3750      	adds	r7, #80	; 0x50
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40023800 	.word	0x40023800
 8001c98:	40007000 	.word	0x40007000

08001c9c <MRT_STM_Init>:

/* USER CODE BEGIN 4 */

void MRT_STM_Init(void){
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
	HAL_Init();
 8001ca0:	f003 faac 	bl	80051fc <HAL_Init>
	SystemClock_Config();
 8001ca4:	f7ff ff8e 	bl	8001bc4 <SystemClock_Config>

	MX_GPIO_Init();
 8001ca8:	f7ff fc00 	bl	80014ac <MX_GPIO_Init>
	MX_ADC1_Init();
 8001cac:	f7ff fb68 	bl	8001380 <MX_ADC1_Init>
	MX_I2C2_Init();
 8001cb0:	f7ff fd8e 	bl	80017d0 <MX_I2C2_Init>
	MX_I2C3_Init();
 8001cb4:	f7ff fdcc 	bl	8001850 <MX_I2C3_Init>
	MX_SPI2_Init();
 8001cb8:	f000 f8e8 	bl	8001e8c <MX_SPI2_Init>
	MX_SPI4_Init();
 8001cbc:	f000 f91c 	bl	8001ef8 <MX_SPI4_Init>
	MX_SPI5_Init();
 8001cc0:	f000 f950 	bl	8001f64 <MX_SPI5_Init>
	MX_TIM2_Init();
 8001cc4:	f000 fb0e 	bl	80022e4 <MX_TIM2_Init>
	MX_UART8_Init();
 8001cc8:	f000 fbda 	bl	8002480 <MX_UART8_Init>
	MX_USART3_UART_Init();
 8001ccc:	f000 fc02 	bl	80024d4 <MX_USART3_UART_Init>
	MX_USART6_UART_Init();
 8001cd0:	f000 fc2a 	bl	8002528 <MX_USART6_UART_Init>
	MX_RTC_Init();
 8001cd4:	f000 f81c 	bl	8001d10 <MX_RTC_Init>
	//MX_IWDG_Init(); TODO ADDED IN MRT_Init()
	MX_FATFS_Init();
 8001cd8:	f00a fb62 	bl	800c3a0 <MX_FATFS_Init>
}
 8001cdc:	bf00      	nop
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a04      	ldr	r2, [pc, #16]	; (8001d00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d101      	bne.n	8001cf6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001cf2:	f003 faa5 	bl	8005240 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40001000 	.word	0x40001000

08001d04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d08:	b672      	cpsid	i
}
 8001d0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d0c:	e7fe      	b.n	8001d0c <Error_Handler+0x8>
	...

08001d10 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b090      	sub	sp, #64	; 0x40
 8001d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001d16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	605a      	str	r2, [r3, #4]
 8001d20:	609a      	str	r2, [r3, #8]
 8001d22:	60da      	str	r2, [r3, #12]
 8001d24:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001d26:	2300      	movs	r3, #0
 8001d28:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001d2a:	463b      	mov	r3, r7
 8001d2c:	2228      	movs	r2, #40	; 0x28
 8001d2e:	2100      	movs	r1, #0
 8001d30:	4618      	mov	r0, r3
 8001d32:	f010 febb 	bl	8012aac <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001d36:	4b3a      	ldr	r3, [pc, #232]	; (8001e20 <MX_RTC_Init+0x110>)
 8001d38:	4a3a      	ldr	r2, [pc, #232]	; (8001e24 <MX_RTC_Init+0x114>)
 8001d3a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001d3c:	4b38      	ldr	r3, [pc, #224]	; (8001e20 <MX_RTC_Init+0x110>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001d42:	4b37      	ldr	r3, [pc, #220]	; (8001e20 <MX_RTC_Init+0x110>)
 8001d44:	227f      	movs	r2, #127	; 0x7f
 8001d46:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001d48:	4b35      	ldr	r3, [pc, #212]	; (8001e20 <MX_RTC_Init+0x110>)
 8001d4a:	22ff      	movs	r2, #255	; 0xff
 8001d4c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001d4e:	4b34      	ldr	r3, [pc, #208]	; (8001e20 <MX_RTC_Init+0x110>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001d54:	4b32      	ldr	r3, [pc, #200]	; (8001e20 <MX_RTC_Init+0x110>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001d5a:	4b31      	ldr	r3, [pc, #196]	; (8001e20 <MX_RTC_Init+0x110>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001d60:	482f      	ldr	r0, [pc, #188]	; (8001e20 <MX_RTC_Init+0x110>)
 8001d62:	f006 fe43 	bl	80089ec <HAL_RTC_Init>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001d6c:	f7ff ffca 	bl	8001d04 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001d70:	2300      	movs	r3, #0
 8001d72:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d82:	2300      	movs	r3, #0
 8001d84:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d86:	2300      	movs	r3, #0
 8001d88:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001d8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d8e:	2201      	movs	r2, #1
 8001d90:	4619      	mov	r1, r3
 8001d92:	4823      	ldr	r0, [pc, #140]	; (8001e20 <MX_RTC_Init+0x110>)
 8001d94:	f006 febb 	bl	8008b0e <HAL_RTC_SetTime>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001d9e:	f7ff ffb1 	bl	8001d04 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001da2:	2301      	movs	r3, #1
 8001da4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001da8:	2301      	movs	r3, #1
 8001daa:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8001dae:	2301      	movs	r3, #1
 8001db0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8001db4:	2300      	movs	r3, #0
 8001db6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001dba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4817      	ldr	r0, [pc, #92]	; (8001e20 <MX_RTC_Init+0x110>)
 8001dc4:	f006 ff60 	bl	8008c88 <HAL_RTC_SetDate>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001dce:	f7ff ff99 	bl	8001d04 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001dde:	2300      	movs	r3, #0
 8001de0:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001de2:	2300      	movs	r3, #0
 8001de4:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001de6:	2300      	movs	r3, #0
 8001de8:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001df2:	2300      	movs	r3, #0
 8001df4:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001df6:	2301      	movs	r3, #1
 8001df8:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001dfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e00:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001e02:	463b      	mov	r3, r7
 8001e04:	2201      	movs	r2, #1
 8001e06:	4619      	mov	r1, r3
 8001e08:	4805      	ldr	r0, [pc, #20]	; (8001e20 <MX_RTC_Init+0x110>)
 8001e0a:	f006 ffe5 	bl	8008dd8 <HAL_RTC_SetAlarm_IT>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001e14:	f7ff ff76 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001e18:	bf00      	nop
 8001e1a:	3740      	adds	r7, #64	; 0x40
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	20005080 	.word	0x20005080
 8001e24:	40002800 	.word	0x40002800

08001e28 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08e      	sub	sp, #56	; 0x38
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e30:	f107 0308 	add.w	r3, r7, #8
 8001e34:	2230      	movs	r2, #48	; 0x30
 8001e36:	2100      	movs	r1, #0
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f010 fe37 	bl	8012aac <memset>
  if(rtcHandle->Instance==RTC)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a10      	ldr	r2, [pc, #64]	; (8001e84 <HAL_RTC_MspInit+0x5c>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d119      	bne.n	8001e7c <HAL_RTC_MspInit+0x54>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001e48:	2320      	movs	r3, #32
 8001e4a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001e4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e50:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e52:	f107 0308 	add.w	r3, r7, #8
 8001e56:	4618      	mov	r0, r3
 8001e58:	f006 fc0a 	bl	8008670 <HAL_RCCEx_PeriphCLKConfig>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001e62:	f7ff ff4f 	bl	8001d04 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001e66:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <HAL_RTC_MspInit+0x60>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2105      	movs	r1, #5
 8001e70:	2029      	movs	r0, #41	; 0x29
 8001e72:	f003 fd53 	bl	800591c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001e76:	2029      	movs	r0, #41	; 0x29
 8001e78:	f003 fd6c 	bl	8005954 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001e7c:	bf00      	nop
 8001e7e:	3738      	adds	r7, #56	; 0x38
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40002800 	.word	0x40002800
 8001e88:	42470e3c 	.word	0x42470e3c

08001e8c <MX_SPI2_Init>:
SPI_HandleTypeDef hspi4;
SPI_HandleTypeDef hspi5;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001e90:	4b17      	ldr	r3, [pc, #92]	; (8001ef0 <MX_SPI2_Init+0x64>)
 8001e92:	4a18      	ldr	r2, [pc, #96]	; (8001ef4 <MX_SPI2_Init+0x68>)
 8001e94:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e96:	4b16      	ldr	r3, [pc, #88]	; (8001ef0 <MX_SPI2_Init+0x64>)
 8001e98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e9c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001e9e:	4b14      	ldr	r3, [pc, #80]	; (8001ef0 <MX_SPI2_Init+0x64>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ea4:	4b12      	ldr	r3, [pc, #72]	; (8001ef0 <MX_SPI2_Init+0x64>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001eaa:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <MX_SPI2_Init+0x64>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001eb0:	4b0f      	ldr	r3, [pc, #60]	; (8001ef0 <MX_SPI2_Init+0x64>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001eb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ef0 <MX_SPI2_Init+0x64>)
 8001eb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ebc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ebe:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <MX_SPI2_Init+0x64>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ec4:	4b0a      	ldr	r3, [pc, #40]	; (8001ef0 <MX_SPI2_Init+0x64>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001eca:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <MX_SPI2_Init+0x64>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ed0:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <MX_SPI2_Init+0x64>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001ed6:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <MX_SPI2_Init+0x64>)
 8001ed8:	220a      	movs	r2, #10
 8001eda:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001edc:	4804      	ldr	r0, [pc, #16]	; (8001ef0 <MX_SPI2_Init+0x64>)
 8001ede:	f007 fa97 	bl	8009410 <HAL_SPI_Init>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001ee8:	f7ff ff0c 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001eec:	bf00      	nop
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	200050a0 	.word	0x200050a0
 8001ef4:	40003800 	.word	0x40003800

08001ef8 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001efc:	4b17      	ldr	r3, [pc, #92]	; (8001f5c <MX_SPI4_Init+0x64>)
 8001efe:	4a18      	ldr	r2, [pc, #96]	; (8001f60 <MX_SPI4_Init+0x68>)
 8001f00:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001f02:	4b16      	ldr	r3, [pc, #88]	; (8001f5c <MX_SPI4_Init+0x64>)
 8001f04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f08:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001f0a:	4b14      	ldr	r3, [pc, #80]	; (8001f5c <MX_SPI4_Init+0x64>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f10:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <MX_SPI4_Init+0x64>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f16:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <MX_SPI4_Init+0x64>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f1c:	4b0f      	ldr	r3, [pc, #60]	; (8001f5c <MX_SPI4_Init+0x64>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001f22:	4b0e      	ldr	r3, [pc, #56]	; (8001f5c <MX_SPI4_Init+0x64>)
 8001f24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f28:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f2a:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <MX_SPI4_Init+0x64>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f30:	4b0a      	ldr	r3, [pc, #40]	; (8001f5c <MX_SPI4_Init+0x64>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f36:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <MX_SPI4_Init+0x64>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f3c:	4b07      	ldr	r3, [pc, #28]	; (8001f5c <MX_SPI4_Init+0x64>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001f42:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <MX_SPI4_Init+0x64>)
 8001f44:	220a      	movs	r2, #10
 8001f46:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001f48:	4804      	ldr	r0, [pc, #16]	; (8001f5c <MX_SPI4_Init+0x64>)
 8001f4a:	f007 fa61 	bl	8009410 <HAL_SPI_Init>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001f54:	f7ff fed6 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001f58:	bf00      	nop
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	20005150 	.word	0x20005150
 8001f60:	40013400 	.word	0x40013400

08001f64 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8001f68:	4b17      	ldr	r3, [pc, #92]	; (8001fc8 <MX_SPI5_Init+0x64>)
 8001f6a:	4a18      	ldr	r2, [pc, #96]	; (8001fcc <MX_SPI5_Init+0x68>)
 8001f6c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001f6e:	4b16      	ldr	r3, [pc, #88]	; (8001fc8 <MX_SPI5_Init+0x64>)
 8001f70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f74:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001f76:	4b14      	ldr	r3, [pc, #80]	; (8001fc8 <MX_SPI5_Init+0x64>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f7c:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <MX_SPI5_Init+0x64>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f82:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <MX_SPI5_Init+0x64>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f88:	4b0f      	ldr	r3, [pc, #60]	; (8001fc8 <MX_SPI5_Init+0x64>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001f8e:	4b0e      	ldr	r3, [pc, #56]	; (8001fc8 <MX_SPI5_Init+0x64>)
 8001f90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f94:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f96:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <MX_SPI5_Init+0x64>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f9c:	4b0a      	ldr	r3, [pc, #40]	; (8001fc8 <MX_SPI5_Init+0x64>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fa2:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <MX_SPI5_Init+0x64>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fa8:	4b07      	ldr	r3, [pc, #28]	; (8001fc8 <MX_SPI5_Init+0x64>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001fae:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <MX_SPI5_Init+0x64>)
 8001fb0:	220a      	movs	r2, #10
 8001fb2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001fb4:	4804      	ldr	r0, [pc, #16]	; (8001fc8 <MX_SPI5_Init+0x64>)
 8001fb6:	f007 fa2b 	bl	8009410 <HAL_SPI_Init>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001fc0:	f7ff fea0 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001fc4:	bf00      	nop
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	200050f8 	.word	0x200050f8
 8001fcc:	40015000 	.word	0x40015000

08001fd0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b08e      	sub	sp, #56	; 0x38
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
 8001fe4:	60da      	str	r2, [r3, #12]
 8001fe6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a4c      	ldr	r2, [pc, #304]	; (8002120 <HAL_SPI_MspInit+0x150>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d12d      	bne.n	800204e <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	623b      	str	r3, [r7, #32]
 8001ff6:	4b4b      	ldr	r3, [pc, #300]	; (8002124 <HAL_SPI_MspInit+0x154>)
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	4a4a      	ldr	r2, [pc, #296]	; (8002124 <HAL_SPI_MspInit+0x154>)
 8001ffc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002000:	6413      	str	r3, [r2, #64]	; 0x40
 8002002:	4b48      	ldr	r3, [pc, #288]	; (8002124 <HAL_SPI_MspInit+0x154>)
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800200a:	623b      	str	r3, [r7, #32]
 800200c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	61fb      	str	r3, [r7, #28]
 8002012:	4b44      	ldr	r3, [pc, #272]	; (8002124 <HAL_SPI_MspInit+0x154>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	4a43      	ldr	r2, [pc, #268]	; (8002124 <HAL_SPI_MspInit+0x154>)
 8002018:	f043 0302 	orr.w	r3, r3, #2
 800201c:	6313      	str	r3, [r2, #48]	; 0x30
 800201e:	4b41      	ldr	r3, [pc, #260]	; (8002124 <HAL_SPI_MspInit+0x154>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	61fb      	str	r3, [r7, #28]
 8002028:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800202a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800202e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002030:	2302      	movs	r3, #2
 8002032:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002034:	2300      	movs	r3, #0
 8002036:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002038:	2303      	movs	r3, #3
 800203a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800203c:	2305      	movs	r3, #5
 800203e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002040:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002044:	4619      	mov	r1, r3
 8002046:	4838      	ldr	r0, [pc, #224]	; (8002128 <HAL_SPI_MspInit+0x158>)
 8002048:	f003 fc92 	bl	8005970 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 800204c:	e064      	b.n	8002118 <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI4)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a36      	ldr	r2, [pc, #216]	; (800212c <HAL_SPI_MspInit+0x15c>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d12d      	bne.n	80020b4 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002058:	2300      	movs	r3, #0
 800205a:	61bb      	str	r3, [r7, #24]
 800205c:	4b31      	ldr	r3, [pc, #196]	; (8002124 <HAL_SPI_MspInit+0x154>)
 800205e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002060:	4a30      	ldr	r2, [pc, #192]	; (8002124 <HAL_SPI_MspInit+0x154>)
 8002062:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002066:	6453      	str	r3, [r2, #68]	; 0x44
 8002068:	4b2e      	ldr	r3, [pc, #184]	; (8002124 <HAL_SPI_MspInit+0x154>)
 800206a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002070:	61bb      	str	r3, [r7, #24]
 8002072:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]
 8002078:	4b2a      	ldr	r3, [pc, #168]	; (8002124 <HAL_SPI_MspInit+0x154>)
 800207a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207c:	4a29      	ldr	r2, [pc, #164]	; (8002124 <HAL_SPI_MspInit+0x154>)
 800207e:	f043 0310 	orr.w	r3, r3, #16
 8002082:	6313      	str	r3, [r2, #48]	; 0x30
 8002084:	4b27      	ldr	r3, [pc, #156]	; (8002124 <HAL_SPI_MspInit+0x154>)
 8002086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002088:	f003 0310 	and.w	r3, r3, #16
 800208c:	617b      	str	r3, [r7, #20]
 800208e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002090:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002094:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002096:	2302      	movs	r3, #2
 8002098:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	2300      	movs	r3, #0
 800209c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800209e:	2303      	movs	r3, #3
 80020a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80020a2:	2305      	movs	r3, #5
 80020a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020aa:	4619      	mov	r1, r3
 80020ac:	4820      	ldr	r0, [pc, #128]	; (8002130 <HAL_SPI_MspInit+0x160>)
 80020ae:	f003 fc5f 	bl	8005970 <HAL_GPIO_Init>
}
 80020b2:	e031      	b.n	8002118 <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI5)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a1e      	ldr	r2, [pc, #120]	; (8002134 <HAL_SPI_MspInit+0x164>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d12c      	bne.n	8002118 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	613b      	str	r3, [r7, #16]
 80020c2:	4b18      	ldr	r3, [pc, #96]	; (8002124 <HAL_SPI_MspInit+0x154>)
 80020c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c6:	4a17      	ldr	r2, [pc, #92]	; (8002124 <HAL_SPI_MspInit+0x154>)
 80020c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020cc:	6453      	str	r3, [r2, #68]	; 0x44
 80020ce:	4b15      	ldr	r3, [pc, #84]	; (8002124 <HAL_SPI_MspInit+0x154>)
 80020d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020d6:	613b      	str	r3, [r7, #16]
 80020d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	4b11      	ldr	r3, [pc, #68]	; (8002124 <HAL_SPI_MspInit+0x154>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	4a10      	ldr	r2, [pc, #64]	; (8002124 <HAL_SPI_MspInit+0x154>)
 80020e4:	f043 0320 	orr.w	r3, r3, #32
 80020e8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ea:	4b0e      	ldr	r3, [pc, #56]	; (8002124 <HAL_SPI_MspInit+0x154>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	f003 0320 	and.w	r3, r3, #32
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80020f6:	f44f 7360 	mov.w	r3, #896	; 0x380
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fc:	2302      	movs	r3, #2
 80020fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002100:	2300      	movs	r3, #0
 8002102:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002104:	2303      	movs	r3, #3
 8002106:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002108:	2305      	movs	r3, #5
 800210a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800210c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002110:	4619      	mov	r1, r3
 8002112:	4809      	ldr	r0, [pc, #36]	; (8002138 <HAL_SPI_MspInit+0x168>)
 8002114:	f003 fc2c 	bl	8005970 <HAL_GPIO_Init>
}
 8002118:	bf00      	nop
 800211a:	3738      	adds	r7, #56	; 0x38
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40003800 	.word	0x40003800
 8002124:	40023800 	.word	0x40023800
 8002128:	40020400 	.word	0x40020400
 800212c:	40013400 	.word	0x40013400
 8002130:	40021000 	.word	0x40021000
 8002134:	40015000 	.word	0x40015000
 8002138:	40021400 	.word	0x40021400

0800213c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	607b      	str	r3, [r7, #4]
 8002146:	4b12      	ldr	r3, [pc, #72]	; (8002190 <HAL_MspInit+0x54>)
 8002148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214a:	4a11      	ldr	r2, [pc, #68]	; (8002190 <HAL_MspInit+0x54>)
 800214c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002150:	6453      	str	r3, [r2, #68]	; 0x44
 8002152:	4b0f      	ldr	r3, [pc, #60]	; (8002190 <HAL_MspInit+0x54>)
 8002154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800215a:	607b      	str	r3, [r7, #4]
 800215c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	603b      	str	r3, [r7, #0]
 8002162:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <HAL_MspInit+0x54>)
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	4a0a      	ldr	r2, [pc, #40]	; (8002190 <HAL_MspInit+0x54>)
 8002168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800216c:	6413      	str	r3, [r2, #64]	; 0x40
 800216e:	4b08      	ldr	r3, [pc, #32]	; (8002190 <HAL_MspInit+0x54>)
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002176:	603b      	str	r3, [r7, #0]
 8002178:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800217a:	2200      	movs	r2, #0
 800217c:	210f      	movs	r1, #15
 800217e:	f06f 0001 	mvn.w	r0, #1
 8002182:	f003 fbcb 	bl	800591c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002186:	bf00      	nop
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40023800 	.word	0x40023800

08002194 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b08c      	sub	sp, #48	; 0x30
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800219c:	2300      	movs	r3, #0
 800219e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80021a0:	2300      	movs	r3, #0
 80021a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80021a4:	2200      	movs	r2, #0
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	2036      	movs	r0, #54	; 0x36
 80021aa:	f003 fbb7 	bl	800591c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80021ae:	2036      	movs	r0, #54	; 0x36
 80021b0:	f003 fbd0 	bl	8005954 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80021b4:	2300      	movs	r3, #0
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	4b1f      	ldr	r3, [pc, #124]	; (8002238 <HAL_InitTick+0xa4>)
 80021ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021bc:	4a1e      	ldr	r2, [pc, #120]	; (8002238 <HAL_InitTick+0xa4>)
 80021be:	f043 0310 	orr.w	r3, r3, #16
 80021c2:	6413      	str	r3, [r2, #64]	; 0x40
 80021c4:	4b1c      	ldr	r3, [pc, #112]	; (8002238 <HAL_InitTick+0xa4>)
 80021c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c8:	f003 0310 	and.w	r3, r3, #16
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021d0:	f107 0210 	add.w	r2, r7, #16
 80021d4:	f107 0314 	add.w	r3, r7, #20
 80021d8:	4611      	mov	r1, r2
 80021da:	4618      	mov	r0, r3
 80021dc:	f006 fa16 	bl	800860c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80021e0:	f006 f9ec 	bl	80085bc <HAL_RCC_GetPCLK1Freq>
 80021e4:	4603      	mov	r3, r0
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ec:	4a13      	ldr	r2, [pc, #76]	; (800223c <HAL_InitTick+0xa8>)
 80021ee:	fba2 2303 	umull	r2, r3, r2, r3
 80021f2:	0c9b      	lsrs	r3, r3, #18
 80021f4:	3b01      	subs	r3, #1
 80021f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80021f8:	4b11      	ldr	r3, [pc, #68]	; (8002240 <HAL_InitTick+0xac>)
 80021fa:	4a12      	ldr	r2, [pc, #72]	; (8002244 <HAL_InitTick+0xb0>)
 80021fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80021fe:	4b10      	ldr	r3, [pc, #64]	; (8002240 <HAL_InitTick+0xac>)
 8002200:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002204:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002206:	4a0e      	ldr	r2, [pc, #56]	; (8002240 <HAL_InitTick+0xac>)
 8002208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800220a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800220c:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <HAL_InitTick+0xac>)
 800220e:	2200      	movs	r2, #0
 8002210:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002212:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <HAL_InitTick+0xac>)
 8002214:	2200      	movs	r2, #0
 8002216:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002218:	4809      	ldr	r0, [pc, #36]	; (8002240 <HAL_InitTick+0xac>)
 800221a:	f007 fea1 	bl	8009f60 <HAL_TIM_Base_Init>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d104      	bne.n	800222e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002224:	4806      	ldr	r0, [pc, #24]	; (8002240 <HAL_InitTick+0xac>)
 8002226:	f007 feeb 	bl	800a000 <HAL_TIM_Base_Start_IT>
 800222a:	4603      	mov	r3, r0
 800222c:	e000      	b.n	8002230 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
}
 8002230:	4618      	mov	r0, r3
 8002232:	3730      	adds	r7, #48	; 0x30
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40023800 	.word	0x40023800
 800223c:	431bde83 	.word	0x431bde83
 8002240:	200051a8 	.word	0x200051a8
 8002244:	40001000 	.word	0x40001000

08002248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800224c:	e7fe      	b.n	800224c <NMI_Handler+0x4>

0800224e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800224e:	b480      	push	{r7}
 8002250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002252:	e7fe      	b.n	8002252 <HardFault_Handler+0x4>

08002254 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002258:	e7fe      	b.n	8002258 <MemManage_Handler+0x4>

0800225a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800225a:	b480      	push	{r7}
 800225c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800225e:	e7fe      	b.n	800225e <BusFault_Handler+0x4>

08002260 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002264:	e7fe      	b.n	8002264 <UsageFault_Handler+0x4>

08002266 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002266:	b480      	push	{r7}
 8002268:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800226a:	bf00      	nop
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002278:	2001      	movs	r0, #1
 800227a:	f003 fd3f 	bl	8005cfc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800227e:	bf00      	nop
 8002280:	bd80      	pop	{r7, pc}
	...

08002284 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002288:	4802      	ldr	r0, [pc, #8]	; (8002294 <RTC_Alarm_IRQHandler+0x10>)
 800228a:	f006 fedd 	bl	8009048 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20005080 	.word	0x20005080

08002298 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800229c:	4802      	ldr	r0, [pc, #8]	; (80022a8 <TIM6_DAC_IRQHandler+0x10>)
 800229e:	f007 ff78 	bl	800a192 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	200051a8 	.word	0x200051a8

080022ac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80022b0:	4802      	ldr	r0, [pc, #8]	; (80022bc <OTG_FS_IRQHandler+0x10>)
 80022b2:	f004 fd81 	bl	8006db8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	200064ec 	.word	0x200064ec

080022c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022c4:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <SystemInit+0x20>)
 80022c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ca:	4a05      	ldr	r2, [pc, #20]	; (80022e0 <SystemInit+0x20>)
 80022cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022d4:	bf00      	nop
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b08e      	sub	sp, #56	; 0x38
 80022e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	605a      	str	r2, [r3, #4]
 80022f4:	609a      	str	r2, [r3, #8]
 80022f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022f8:	f107 0320 	add.w	r3, r7, #32
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002302:	1d3b      	adds	r3, r7, #4
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	605a      	str	r2, [r3, #4]
 800230a:	609a      	str	r2, [r3, #8]
 800230c:	60da      	str	r2, [r3, #12]
 800230e:	611a      	str	r2, [r3, #16]
 8002310:	615a      	str	r2, [r3, #20]
 8002312:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002314:	4b2d      	ldr	r3, [pc, #180]	; (80023cc <MX_TIM2_Init+0xe8>)
 8002316:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800231a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 800231c:	4b2b      	ldr	r3, [pc, #172]	; (80023cc <MX_TIM2_Init+0xe8>)
 800231e:	2259      	movs	r2, #89	; 0x59
 8002320:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002322:	4b2a      	ldr	r3, [pc, #168]	; (80023cc <MX_TIM2_Init+0xe8>)
 8002324:	2200      	movs	r2, #0
 8002326:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400-1;
 8002328:	4b28      	ldr	r3, [pc, #160]	; (80023cc <MX_TIM2_Init+0xe8>)
 800232a:	f240 128f 	movw	r2, #399	; 0x18f
 800232e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002330:	4b26      	ldr	r3, [pc, #152]	; (80023cc <MX_TIM2_Init+0xe8>)
 8002332:	2200      	movs	r2, #0
 8002334:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002336:	4b25      	ldr	r3, [pc, #148]	; (80023cc <MX_TIM2_Init+0xe8>)
 8002338:	2200      	movs	r2, #0
 800233a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800233c:	4823      	ldr	r0, [pc, #140]	; (80023cc <MX_TIM2_Init+0xe8>)
 800233e:	f007 fe0f 	bl	8009f60 <HAL_TIM_Base_Init>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002348:	f7ff fcdc 	bl	8001d04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800234c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002350:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002352:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002356:	4619      	mov	r1, r3
 8002358:	481c      	ldr	r0, [pc, #112]	; (80023cc <MX_TIM2_Init+0xe8>)
 800235a:	f008 f8e5 	bl	800a528 <HAL_TIM_ConfigClockSource>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002364:	f7ff fcce 	bl	8001d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002368:	4818      	ldr	r0, [pc, #96]	; (80023cc <MX_TIM2_Init+0xe8>)
 800236a:	f007 feb9 	bl	800a0e0 <HAL_TIM_PWM_Init>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002374:	f7ff fcc6 	bl	8001d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002378:	2320      	movs	r3, #32
 800237a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800237c:	2300      	movs	r3, #0
 800237e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002380:	f107 0320 	add.w	r3, r7, #32
 8002384:	4619      	mov	r1, r3
 8002386:	4811      	ldr	r0, [pc, #68]	; (80023cc <MX_TIM2_Init+0xe8>)
 8002388:	f008 fca8 	bl	800acdc <HAL_TIMEx_MasterConfigSynchronization>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002392:	f7ff fcb7 	bl	8001d04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002396:	2360      	movs	r3, #96	; 0x60
 8002398:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 800239a:	2364      	movs	r3, #100	; 0x64
 800239c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800239e:	2300      	movs	r3, #0
 80023a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023a2:	2300      	movs	r3, #0
 80023a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80023a6:	1d3b      	adds	r3, r7, #4
 80023a8:	2208      	movs	r2, #8
 80023aa:	4619      	mov	r1, r3
 80023ac:	4807      	ldr	r0, [pc, #28]	; (80023cc <MX_TIM2_Init+0xe8>)
 80023ae:	f007 fff9 	bl	800a3a4 <HAL_TIM_PWM_ConfigChannel>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80023b8:	f7ff fca4 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80023bc:	4803      	ldr	r0, [pc, #12]	; (80023cc <MX_TIM2_Init+0xe8>)
 80023be:	f000 f827 	bl	8002410 <HAL_TIM_MspPostInit>

}
 80023c2:	bf00      	nop
 80023c4:	3738      	adds	r7, #56	; 0x38
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	200051f0 	.word	0x200051f0

080023d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023e0:	d10d      	bne.n	80023fe <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	4b09      	ldr	r3, [pc, #36]	; (800240c <HAL_TIM_Base_MspInit+0x3c>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	4a08      	ldr	r2, [pc, #32]	; (800240c <HAL_TIM_Base_MspInit+0x3c>)
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	6413      	str	r3, [r2, #64]	; 0x40
 80023f2:	4b06      	ldr	r3, [pc, #24]	; (800240c <HAL_TIM_Base_MspInit+0x3c>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80023fe:	bf00      	nop
 8002400:	3714      	adds	r7, #20
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	40023800 	.word	0x40023800

08002410 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b088      	sub	sp, #32
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002418:	f107 030c 	add.w	r3, r7, #12
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	605a      	str	r2, [r3, #4]
 8002422:	609a      	str	r2, [r3, #8]
 8002424:	60da      	str	r2, [r3, #12]
 8002426:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002430:	d11d      	bne.n	800246e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	60bb      	str	r3, [r7, #8]
 8002436:	4b10      	ldr	r3, [pc, #64]	; (8002478 <HAL_TIM_MspPostInit+0x68>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	4a0f      	ldr	r2, [pc, #60]	; (8002478 <HAL_TIM_MspPostInit+0x68>)
 800243c:	f043 0301 	orr.w	r3, r3, #1
 8002440:	6313      	str	r3, [r2, #48]	; 0x30
 8002442:	4b0d      	ldr	r3, [pc, #52]	; (8002478 <HAL_TIM_MspPostInit+0x68>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	60bb      	str	r3, [r7, #8]
 800244c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 800244e:	2304      	movs	r3, #4
 8002450:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002452:	2302      	movs	r3, #2
 8002454:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002456:	2300      	movs	r3, #0
 8002458:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245a:	2300      	movs	r3, #0
 800245c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800245e:	2301      	movs	r3, #1
 8002460:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8002462:	f107 030c 	add.w	r3, r7, #12
 8002466:	4619      	mov	r1, r3
 8002468:	4804      	ldr	r0, [pc, #16]	; (800247c <HAL_TIM_MspPostInit+0x6c>)
 800246a:	f003 fa81 	bl	8005970 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800246e:	bf00      	nop
 8002470:	3720      	adds	r7, #32
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40023800 	.word	0x40023800
 800247c:	40020000 	.word	0x40020000

08002480 <MX_UART8_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART8 init function */
void MX_UART8_Init(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8002484:	4b11      	ldr	r3, [pc, #68]	; (80024cc <MX_UART8_Init+0x4c>)
 8002486:	4a12      	ldr	r2, [pc, #72]	; (80024d0 <MX_UART8_Init+0x50>)
 8002488:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 800248a:	4b10      	ldr	r3, [pc, #64]	; (80024cc <MX_UART8_Init+0x4c>)
 800248c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002490:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8002492:	4b0e      	ldr	r3, [pc, #56]	; (80024cc <MX_UART8_Init+0x4c>)
 8002494:	2200      	movs	r2, #0
 8002496:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8002498:	4b0c      	ldr	r3, [pc, #48]	; (80024cc <MX_UART8_Init+0x4c>)
 800249a:	2200      	movs	r2, #0
 800249c:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800249e:	4b0b      	ldr	r3, [pc, #44]	; (80024cc <MX_UART8_Init+0x4c>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80024a4:	4b09      	ldr	r3, [pc, #36]	; (80024cc <MX_UART8_Init+0x4c>)
 80024a6:	220c      	movs	r2, #12
 80024a8:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024aa:	4b08      	ldr	r3, [pc, #32]	; (80024cc <MX_UART8_Init+0x4c>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80024b0:	4b06      	ldr	r3, [pc, #24]	; (80024cc <MX_UART8_Init+0x4c>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80024b6:	4805      	ldr	r0, [pc, #20]	; (80024cc <MX_UART8_Init+0x4c>)
 80024b8:	f008 fca0 	bl	800adfc <HAL_UART_Init>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 80024c2:	f7ff fc1f 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	2000527c 	.word	0x2000527c
 80024d0:	40007c00 	.word	0x40007c00

080024d4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80024d8:	4b11      	ldr	r3, [pc, #68]	; (8002520 <MX_USART3_UART_Init+0x4c>)
 80024da:	4a12      	ldr	r2, [pc, #72]	; (8002524 <MX_USART3_UART_Init+0x50>)
 80024dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80024de:	4b10      	ldr	r3, [pc, #64]	; (8002520 <MX_USART3_UART_Init+0x4c>)
 80024e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80024e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80024e6:	4b0e      	ldr	r3, [pc, #56]	; (8002520 <MX_USART3_UART_Init+0x4c>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80024ec:	4b0c      	ldr	r3, [pc, #48]	; (8002520 <MX_USART3_UART_Init+0x4c>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80024f2:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <MX_USART3_UART_Init+0x4c>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80024f8:	4b09      	ldr	r3, [pc, #36]	; (8002520 <MX_USART3_UART_Init+0x4c>)
 80024fa:	220c      	movs	r2, #12
 80024fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024fe:	4b08      	ldr	r3, [pc, #32]	; (8002520 <MX_USART3_UART_Init+0x4c>)
 8002500:	2200      	movs	r2, #0
 8002502:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002504:	4b06      	ldr	r3, [pc, #24]	; (8002520 <MX_USART3_UART_Init+0x4c>)
 8002506:	2200      	movs	r2, #0
 8002508:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800250a:	4805      	ldr	r0, [pc, #20]	; (8002520 <MX_USART3_UART_Init+0x4c>)
 800250c:	f008 fc76 	bl	800adfc <HAL_UART_Init>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002516:	f7ff fbf5 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800251a:	bf00      	nop
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	20005238 	.word	0x20005238
 8002524:	40004800 	.word	0x40004800

08002528 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800252c:	4b11      	ldr	r3, [pc, #68]	; (8002574 <MX_USART6_UART_Init+0x4c>)
 800252e:	4a12      	ldr	r2, [pc, #72]	; (8002578 <MX_USART6_UART_Init+0x50>)
 8002530:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002532:	4b10      	ldr	r3, [pc, #64]	; (8002574 <MX_USART6_UART_Init+0x4c>)
 8002534:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002538:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800253a:	4b0e      	ldr	r3, [pc, #56]	; (8002574 <MX_USART6_UART_Init+0x4c>)
 800253c:	2200      	movs	r2, #0
 800253e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002540:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <MX_USART6_UART_Init+0x4c>)
 8002542:	2200      	movs	r2, #0
 8002544:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002546:	4b0b      	ldr	r3, [pc, #44]	; (8002574 <MX_USART6_UART_Init+0x4c>)
 8002548:	2200      	movs	r2, #0
 800254a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800254c:	4b09      	ldr	r3, [pc, #36]	; (8002574 <MX_USART6_UART_Init+0x4c>)
 800254e:	220c      	movs	r2, #12
 8002550:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002552:	4b08      	ldr	r3, [pc, #32]	; (8002574 <MX_USART6_UART_Init+0x4c>)
 8002554:	2200      	movs	r2, #0
 8002556:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002558:	4b06      	ldr	r3, [pc, #24]	; (8002574 <MX_USART6_UART_Init+0x4c>)
 800255a:	2200      	movs	r2, #0
 800255c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800255e:	4805      	ldr	r0, [pc, #20]	; (8002574 <MX_USART6_UART_Init+0x4c>)
 8002560:	f008 fc4c 	bl	800adfc <HAL_UART_Init>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800256a:	f7ff fbcb 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	200052c0 	.word	0x200052c0
 8002578:	40011400 	.word	0x40011400

0800257c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b08e      	sub	sp, #56	; 0x38
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002584:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	605a      	str	r2, [r3, #4]
 800258e:	609a      	str	r2, [r3, #8]
 8002590:	60da      	str	r2, [r3, #12]
 8002592:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART8)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a4b      	ldr	r2, [pc, #300]	; (80026c8 <HAL_UART_MspInit+0x14c>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d12c      	bne.n	80025f8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* UART8 clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	623b      	str	r3, [r7, #32]
 80025a2:	4b4a      	ldr	r3, [pc, #296]	; (80026cc <HAL_UART_MspInit+0x150>)
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	4a49      	ldr	r2, [pc, #292]	; (80026cc <HAL_UART_MspInit+0x150>)
 80025a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025ac:	6413      	str	r3, [r2, #64]	; 0x40
 80025ae:	4b47      	ldr	r3, [pc, #284]	; (80026cc <HAL_UART_MspInit+0x150>)
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80025b6:	623b      	str	r3, [r7, #32]
 80025b8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025ba:	2300      	movs	r3, #0
 80025bc:	61fb      	str	r3, [r7, #28]
 80025be:	4b43      	ldr	r3, [pc, #268]	; (80026cc <HAL_UART_MspInit+0x150>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	4a42      	ldr	r2, [pc, #264]	; (80026cc <HAL_UART_MspInit+0x150>)
 80025c4:	f043 0310 	orr.w	r3, r3, #16
 80025c8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ca:	4b40      	ldr	r3, [pc, #256]	; (80026cc <HAL_UART_MspInit+0x150>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	f003 0310 	and.w	r3, r3, #16
 80025d2:	61fb      	str	r3, [r7, #28]
 80025d4:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 80025d6:	2303      	movs	r3, #3
 80025d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025da:	2302      	movs	r3, #2
 80025dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025de:	2300      	movs	r3, #0
 80025e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e2:	2303      	movs	r3, #3
 80025e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80025e6:	2308      	movs	r3, #8
 80025e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025ee:	4619      	mov	r1, r3
 80025f0:	4837      	ldr	r0, [pc, #220]	; (80026d0 <HAL_UART_MspInit+0x154>)
 80025f2:	f003 f9bd 	bl	8005970 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80025f6:	e063      	b.n	80026c0 <HAL_UART_MspInit+0x144>
  else if(uartHandle->Instance==USART3)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a35      	ldr	r2, [pc, #212]	; (80026d4 <HAL_UART_MspInit+0x158>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d12d      	bne.n	800265e <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	61bb      	str	r3, [r7, #24]
 8002606:	4b31      	ldr	r3, [pc, #196]	; (80026cc <HAL_UART_MspInit+0x150>)
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	4a30      	ldr	r2, [pc, #192]	; (80026cc <HAL_UART_MspInit+0x150>)
 800260c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002610:	6413      	str	r3, [r2, #64]	; 0x40
 8002612:	4b2e      	ldr	r3, [pc, #184]	; (80026cc <HAL_UART_MspInit+0x150>)
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800261a:	61bb      	str	r3, [r7, #24]
 800261c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800261e:	2300      	movs	r3, #0
 8002620:	617b      	str	r3, [r7, #20]
 8002622:	4b2a      	ldr	r3, [pc, #168]	; (80026cc <HAL_UART_MspInit+0x150>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	4a29      	ldr	r2, [pc, #164]	; (80026cc <HAL_UART_MspInit+0x150>)
 8002628:	f043 0308 	orr.w	r3, r3, #8
 800262c:	6313      	str	r3, [r2, #48]	; 0x30
 800262e:	4b27      	ldr	r3, [pc, #156]	; (80026cc <HAL_UART_MspInit+0x150>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	f003 0308 	and.w	r3, r3, #8
 8002636:	617b      	str	r3, [r7, #20]
 8002638:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 800263a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800263e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002640:	2302      	movs	r3, #2
 8002642:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002644:	2300      	movs	r3, #0
 8002646:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002648:	2303      	movs	r3, #3
 800264a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800264c:	2307      	movs	r3, #7
 800264e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002650:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002654:	4619      	mov	r1, r3
 8002656:	4820      	ldr	r0, [pc, #128]	; (80026d8 <HAL_UART_MspInit+0x15c>)
 8002658:	f003 f98a 	bl	8005970 <HAL_GPIO_Init>
}
 800265c:	e030      	b.n	80026c0 <HAL_UART_MspInit+0x144>
  else if(uartHandle->Instance==USART6)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a1e      	ldr	r2, [pc, #120]	; (80026dc <HAL_UART_MspInit+0x160>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d12b      	bne.n	80026c0 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002668:	2300      	movs	r3, #0
 800266a:	613b      	str	r3, [r7, #16]
 800266c:	4b17      	ldr	r3, [pc, #92]	; (80026cc <HAL_UART_MspInit+0x150>)
 800266e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002670:	4a16      	ldr	r2, [pc, #88]	; (80026cc <HAL_UART_MspInit+0x150>)
 8002672:	f043 0320 	orr.w	r3, r3, #32
 8002676:	6453      	str	r3, [r2, #68]	; 0x44
 8002678:	4b14      	ldr	r3, [pc, #80]	; (80026cc <HAL_UART_MspInit+0x150>)
 800267a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267c:	f003 0320 	and.w	r3, r3, #32
 8002680:	613b      	str	r3, [r7, #16]
 8002682:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002684:	2300      	movs	r3, #0
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	4b10      	ldr	r3, [pc, #64]	; (80026cc <HAL_UART_MspInit+0x150>)
 800268a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268c:	4a0f      	ldr	r2, [pc, #60]	; (80026cc <HAL_UART_MspInit+0x150>)
 800268e:	f043 0304 	orr.w	r3, r3, #4
 8002692:	6313      	str	r3, [r2, #48]	; 0x30
 8002694:	4b0d      	ldr	r3, [pc, #52]	; (80026cc <HAL_UART_MspInit+0x150>)
 8002696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 80026a0:	23c0      	movs	r3, #192	; 0xc0
 80026a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a4:	2302      	movs	r3, #2
 80026a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ac:	2303      	movs	r3, #3
 80026ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80026b0:	2308      	movs	r3, #8
 80026b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026b8:	4619      	mov	r1, r3
 80026ba:	4809      	ldr	r0, [pc, #36]	; (80026e0 <HAL_UART_MspInit+0x164>)
 80026bc:	f003 f958 	bl	8005970 <HAL_GPIO_Init>
}
 80026c0:	bf00      	nop
 80026c2:	3738      	adds	r7, #56	; 0x38
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40007c00 	.word	0x40007c00
 80026cc:	40023800 	.word	0x40023800
 80026d0:	40021000 	.word	0x40021000
 80026d4:	40004800 	.word	0x40004800
 80026d8:	40020c00 	.word	0x40020c00
 80026dc:	40011400 	.word	0x40011400
 80026e0:	40020800 	.word	0x40020800

080026e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80026e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800271c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80026e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80026ea:	e003      	b.n	80026f4 <LoopCopyDataInit>

080026ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80026ec:	4b0c      	ldr	r3, [pc, #48]	; (8002720 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80026ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80026f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80026f2:	3104      	adds	r1, #4

080026f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80026f4:	480b      	ldr	r0, [pc, #44]	; (8002724 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80026f6:	4b0c      	ldr	r3, [pc, #48]	; (8002728 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80026f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80026fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80026fc:	d3f6      	bcc.n	80026ec <CopyDataInit>
  ldr  r2, =_sbss
 80026fe:	4a0b      	ldr	r2, [pc, #44]	; (800272c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002700:	e002      	b.n	8002708 <LoopFillZerobss>

08002702 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002702:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002704:	f842 3b04 	str.w	r3, [r2], #4

08002708 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002708:	4b09      	ldr	r3, [pc, #36]	; (8002730 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800270a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800270c:	d3f9      	bcc.n	8002702 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800270e:	f7ff fdd7 	bl	80022c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002712:	f010 f98d 	bl	8012a30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002716:	f7ff f97b 	bl	8001a10 <main>
  bx  lr    
 800271a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800271c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002720:	08018604 	.word	0x08018604
  ldr  r0, =_sdata
 8002724:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002728:	20000254 	.word	0x20000254
  ldr  r2, =_sbss
 800272c:	20000254 	.word	0x20000254
  ldr  r3, = _ebss
 8002730:	20006904 	.word	0x20006904

08002734 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002734:	e7fe      	b.n	8002734 <ADC_IRQHandler>
	...

08002738 <MRT_external_flash_Init>:


//**************************************************//
//FUNCTIONS

void MRT_external_flash_Init(void){
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0

	for (int i = 0; i < NB_OF_FLAGS; i++){
 800273e:	2300      	movs	r3, #0
 8002740:	607b      	str	r3, [r7, #4]
 8002742:	e007      	b.n	8002754 <MRT_external_flash_Init+0x1c>
		FLAGS_NULL_BUFFER[i] = 0; //Setup the flags null buffer for the correct number of values
 8002744:	4a0e      	ldr	r2, [pc, #56]	; (8002780 <MRT_external_flash_Init+0x48>)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4413      	add	r3, r2
 800274a:	2200      	movs	r2, #0
 800274c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	3301      	adds	r3, #1
 8002752:	607b      	str	r3, [r7, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b04      	cmp	r3, #4
 8002758:	ddf4      	ble.n	8002744 <MRT_external_flash_Init+0xc>
	}

	if (!W25qxx_Init()) {
 800275a:	f000 fc71 	bl	8003040 <W25qxx_Init>
 800275e:	4603      	mov	r3, r0
 8002760:	f083 0301 	eor.w	r3, r3, #1
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <MRT_external_flash_Init+0x36>
		Error_Handler(); // hangs and blinks LEDF
 800276a:	f7ff facb 	bl	8001d04 <Error_Handler>
	}
	MRT_check_for_wake_up(); //Needs to be called before getFlags() and after the W25xx_Init()
 800276e:	f001 f8f7 	bl	8003960 <MRT_check_for_wake_up>
	MRT_get_flags();
 8002772:	f000 f807 	bl	8002784 <MRT_get_flags>
}
 8002776:	bf00      	nop
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	20005304 	.word	0x20005304

08002784 <MRT_get_flags>:




void MRT_get_flags(void){
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0

	//Retrieve flags
	W25qxx_ReadSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8002788:	2305      	movs	r3, #5
 800278a:	2200      	movs	r2, #0
 800278c:	2101      	movs	r1, #1
 800278e:	486a      	ldr	r0, [pc, #424]	; (8002938 <MRT_get_flags+0x1b4>)
 8002790:	f001 f830 	bl	80037f4 <W25qxx_ReadSector>

	//Retrieve RTC time (last recorded)
	W25qxx_ReadSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8002794:	2303      	movs	r3, #3
 8002796:	2200      	movs	r2, #0
 8002798:	2102      	movs	r1, #2
 800279a:	4868      	ldr	r0, [pc, #416]	; (800293c <MRT_get_flags+0x1b8>)
 800279c:	f001 f82a 	bl	80037f4 <W25qxx_ReadSector>

	//If RTC detected a wake up, update the flash memory
	if (wu_flag == 1){
 80027a0:	4b67      	ldr	r3, [pc, #412]	; (8002940 <MRT_get_flags+0x1bc>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d10e      	bne.n	80027c6 <MRT_get_flags+0x42>
		//Write the new number of wake up to external flash
		flash_flags_buffer[WU_FLAG_OFFSET] = flash_flags_buffer[WU_FLAG_OFFSET] + 1; //Update number of wake up
 80027a8:	4b63      	ldr	r3, [pc, #396]	; (8002938 <MRT_get_flags+0x1b4>)
 80027aa:	785b      	ldrb	r3, [r3, #1]
 80027ac:	3301      	adds	r3, #1
 80027ae:	b2da      	uxtb	r2, r3
 80027b0:	4b61      	ldr	r3, [pc, #388]	; (8002938 <MRT_get_flags+0x1b4>)
 80027b2:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(1);
 80027b4:	2001      	movs	r0, #1
 80027b6:	f000 fd95 	bl	80032e4 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 80027ba:	2305      	movs	r3, #5
 80027bc:	2200      	movs	r2, #0
 80027be:	2101      	movs	r1, #1
 80027c0:	485d      	ldr	r0, [pc, #372]	; (8002938 <MRT_get_flags+0x1b4>)
 80027c2:	f000 fed9 	bl	8003578 <W25qxx_WriteSector>
	}

	//Assign each value read to their variable
	 MRT_update_flags_values();
 80027c6:	f000 f8cb 	bl	8002960 <MRT_update_flags_values>


	//Check flags values
	//Reset flag
	if (reset_flag != 0 && reset_flag !=1){ //If random value (none was written)
 80027ca:	4b5e      	ldr	r3, [pc, #376]	; (8002944 <MRT_get_flags+0x1c0>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d013      	beq.n	80027fa <MRT_get_flags+0x76>
 80027d2:	4b5c      	ldr	r3, [pc, #368]	; (8002944 <MRT_get_flags+0x1c0>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d00f      	beq.n	80027fa <MRT_get_flags+0x76>
		reset_flag = 0;
 80027da:	4b5a      	ldr	r3, [pc, #360]	; (8002944 <MRT_get_flags+0x1c0>)
 80027dc:	2200      	movs	r2, #0
 80027de:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[RESET_FLAG_OFFSET] = reset_flag;
 80027e0:	4b58      	ldr	r3, [pc, #352]	; (8002944 <MRT_get_flags+0x1c0>)
 80027e2:	781a      	ldrb	r2, [r3, #0]
 80027e4:	4b54      	ldr	r3, [pc, #336]	; (8002938 <MRT_get_flags+0x1b4>)
 80027e6:	701a      	strb	r2, [r3, #0]
		W25qxx_EraseSector(1);
 80027e8:	2001      	movs	r0, #1
 80027ea:	f000 fd7b 	bl	80032e4 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 80027ee:	2305      	movs	r3, #5
 80027f0:	2200      	movs	r2, #0
 80027f2:	2101      	movs	r1, #1
 80027f4:	4850      	ldr	r0, [pc, #320]	; (8002938 <MRT_get_flags+0x1b4>)
 80027f6:	f000 febf 	bl	8003578 <W25qxx_WriteSector>
	}

	//Wake up flag
	if (wu_flag != 0 && wu_flag !=1 && wu_flag !=2){ //If random value (none was written)
 80027fa:	4b51      	ldr	r3, [pc, #324]	; (8002940 <MRT_get_flags+0x1bc>)
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d017      	beq.n	8002832 <MRT_get_flags+0xae>
 8002802:	4b4f      	ldr	r3, [pc, #316]	; (8002940 <MRT_get_flags+0x1bc>)
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d013      	beq.n	8002832 <MRT_get_flags+0xae>
 800280a:	4b4d      	ldr	r3, [pc, #308]	; (8002940 <MRT_get_flags+0x1bc>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b02      	cmp	r3, #2
 8002810:	d00f      	beq.n	8002832 <MRT_get_flags+0xae>
		wu_flag = 0;
 8002812:	4b4b      	ldr	r3, [pc, #300]	; (8002940 <MRT_get_flags+0x1bc>)
 8002814:	2200      	movs	r2, #0
 8002816:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[WU_FLAG_OFFSET] = wu_flag;
 8002818:	4b49      	ldr	r3, [pc, #292]	; (8002940 <MRT_get_flags+0x1bc>)
 800281a:	781a      	ldrb	r2, [r3, #0]
 800281c:	4b46      	ldr	r3, [pc, #280]	; (8002938 <MRT_get_flags+0x1b4>)
 800281e:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(1);
 8002820:	2001      	movs	r0, #1
 8002822:	f000 fd5f 	bl	80032e4 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8002826:	2305      	movs	r3, #5
 8002828:	2200      	movs	r2, #0
 800282a:	2101      	movs	r1, #1
 800282c:	4842      	ldr	r0, [pc, #264]	; (8002938 <MRT_get_flags+0x1b4>)
 800282e:	f000 fea3 	bl	8003578 <W25qxx_WriteSector>
	}

	//IWDG flag
	if (iwdg_flag != 0 && iwdg_flag !=1){ //If random value (none was written)
 8002832:	4b45      	ldr	r3, [pc, #276]	; (8002948 <MRT_get_flags+0x1c4>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d013      	beq.n	8002862 <MRT_get_flags+0xde>
 800283a:	4b43      	ldr	r3, [pc, #268]	; (8002948 <MRT_get_flags+0x1c4>)
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d00f      	beq.n	8002862 <MRT_get_flags+0xde>
		iwdg_flag = 0;
 8002842:	4b41      	ldr	r3, [pc, #260]	; (8002948 <MRT_get_flags+0x1c4>)
 8002844:	2200      	movs	r2, #0
 8002846:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 8002848:	4b3f      	ldr	r3, [pc, #252]	; (8002948 <MRT_get_flags+0x1c4>)
 800284a:	781a      	ldrb	r2, [r3, #0]
 800284c:	4b3a      	ldr	r3, [pc, #232]	; (8002938 <MRT_get_flags+0x1b4>)
 800284e:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(1);
 8002850:	2001      	movs	r0, #1
 8002852:	f000 fd47 	bl	80032e4 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8002856:	2305      	movs	r3, #5
 8002858:	2200      	movs	r2, #0
 800285a:	2101      	movs	r1, #1
 800285c:	4836      	ldr	r0, [pc, #216]	; (8002938 <MRT_get_flags+0x1b4>)
 800285e:	f000 fe8b 	bl	8003578 <W25qxx_WriteSector>
	}

	//Apogee flag
	if (apogee_flag != 0 && apogee_flag !=1){ //If random value (none was written)
 8002862:	4b3a      	ldr	r3, [pc, #232]	; (800294c <MRT_get_flags+0x1c8>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d013      	beq.n	8002892 <MRT_get_flags+0x10e>
 800286a:	4b38      	ldr	r3, [pc, #224]	; (800294c <MRT_get_flags+0x1c8>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d00f      	beq.n	8002892 <MRT_get_flags+0x10e>
		apogee_flag = 0;
 8002872:	4b36      	ldr	r3, [pc, #216]	; (800294c <MRT_get_flags+0x1c8>)
 8002874:	2200      	movs	r2, #0
 8002876:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[APOGEE_FLAG_OFFSET] = apogee_flag;
 8002878:	4b34      	ldr	r3, [pc, #208]	; (800294c <MRT_get_flags+0x1c8>)
 800287a:	781a      	ldrb	r2, [r3, #0]
 800287c:	4b2e      	ldr	r3, [pc, #184]	; (8002938 <MRT_get_flags+0x1b4>)
 800287e:	70da      	strb	r2, [r3, #3]
		W25qxx_EraseSector(1);
 8002880:	2001      	movs	r0, #1
 8002882:	f000 fd2f 	bl	80032e4 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8002886:	2305      	movs	r3, #5
 8002888:	2200      	movs	r2, #0
 800288a:	2101      	movs	r1, #1
 800288c:	482a      	ldr	r0, [pc, #168]	; (8002938 <MRT_get_flags+0x1b4>)
 800288e:	f000 fe73 	bl	8003578 <W25qxx_WriteSector>
	}

	//Ejection state flag
	if (!(ejection_state_flag >= 0 && ejection_state_flag <=4)){ //If random value (none was written)
 8002892:	4b2f      	ldr	r3, [pc, #188]	; (8002950 <MRT_get_flags+0x1cc>)
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2b04      	cmp	r3, #4
 8002898:	d90f      	bls.n	80028ba <MRT_get_flags+0x136>
		ejection_state_flag = 0;
 800289a:	4b2d      	ldr	r3, [pc, #180]	; (8002950 <MRT_get_flags+0x1cc>)
 800289c:	2200      	movs	r2, #0
 800289e:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[EJECTION_STATE_FLAG_OFFSET] = ejection_state_flag;
 80028a0:	4b2b      	ldr	r3, [pc, #172]	; (8002950 <MRT_get_flags+0x1cc>)
 80028a2:	781a      	ldrb	r2, [r3, #0]
 80028a4:	4b24      	ldr	r3, [pc, #144]	; (8002938 <MRT_get_flags+0x1b4>)
 80028a6:	711a      	strb	r2, [r3, #4]
		W25qxx_EraseSector(1);
 80028a8:	2001      	movs	r0, #1
 80028aa:	f000 fd1b 	bl	80032e4 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 80028ae:	2305      	movs	r3, #5
 80028b0:	2200      	movs	r2, #0
 80028b2:	2101      	movs	r1, #1
 80028b4:	4820      	ldr	r0, [pc, #128]	; (8002938 <MRT_get_flags+0x1b4>)
 80028b6:	f000 fe5f 	bl	8003578 <W25qxx_WriteSector>
	}


	//Check RTC time values
	//Hours
	if (!(prev_hours >= 0 && prev_hours < 24)){ //If random value (none was written)
 80028ba:	4b26      	ldr	r3, [pc, #152]	; (8002954 <MRT_get_flags+0x1d0>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b17      	cmp	r3, #23
 80028c0:	d90f      	bls.n	80028e2 <MRT_get_flags+0x15e>
		prev_hours = 0;
 80028c2:	4b24      	ldr	r3, [pc, #144]	; (8002954 <MRT_get_flags+0x1d0>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_HOURS_OFFSET] = prev_hours;
 80028c8:	4b22      	ldr	r3, [pc, #136]	; (8002954 <MRT_get_flags+0x1d0>)
 80028ca:	781a      	ldrb	r2, [r3, #0]
 80028cc:	4b1b      	ldr	r3, [pc, #108]	; (800293c <MRT_get_flags+0x1b8>)
 80028ce:	701a      	strb	r2, [r3, #0]
		W25qxx_EraseSector(2);
 80028d0:	2002      	movs	r0, #2
 80028d2:	f000 fd07 	bl	80032e4 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 80028d6:	2303      	movs	r3, #3
 80028d8:	2200      	movs	r2, #0
 80028da:	2102      	movs	r1, #2
 80028dc:	4817      	ldr	r0, [pc, #92]	; (800293c <MRT_get_flags+0x1b8>)
 80028de:	f000 fe4b 	bl	8003578 <W25qxx_WriteSector>
	}

	//Minutes
	if (!(prev_min >= 0 && prev_min < 60)){ //If random value (none was written)
 80028e2:	4b1d      	ldr	r3, [pc, #116]	; (8002958 <MRT_get_flags+0x1d4>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	2b3b      	cmp	r3, #59	; 0x3b
 80028e8:	d90f      	bls.n	800290a <MRT_get_flags+0x186>
		prev_min = 0;
 80028ea:	4b1b      	ldr	r3, [pc, #108]	; (8002958 <MRT_get_flags+0x1d4>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_MIN_OFFSET] = prev_min;
 80028f0:	4b19      	ldr	r3, [pc, #100]	; (8002958 <MRT_get_flags+0x1d4>)
 80028f2:	781a      	ldrb	r2, [r3, #0]
 80028f4:	4b11      	ldr	r3, [pc, #68]	; (800293c <MRT_get_flags+0x1b8>)
 80028f6:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(2);
 80028f8:	2002      	movs	r0, #2
 80028fa:	f000 fcf3 	bl	80032e4 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 80028fe:	2303      	movs	r3, #3
 8002900:	2200      	movs	r2, #0
 8002902:	2102      	movs	r1, #2
 8002904:	480d      	ldr	r0, [pc, #52]	; (800293c <MRT_get_flags+0x1b8>)
 8002906:	f000 fe37 	bl	8003578 <W25qxx_WriteSector>
	}

	//Seconds
	if (!(prev_sec >= 0 && prev_sec < 60)){ //If random value (none was written)
 800290a:	4b14      	ldr	r3, [pc, #80]	; (800295c <MRT_get_flags+0x1d8>)
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	2b3b      	cmp	r3, #59	; 0x3b
 8002910:	d90f      	bls.n	8002932 <MRT_get_flags+0x1ae>
		prev_sec = 0;
 8002912:	4b12      	ldr	r3, [pc, #72]	; (800295c <MRT_get_flags+0x1d8>)
 8002914:	2200      	movs	r2, #0
 8002916:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_SEC_OFFSET] = prev_sec;
 8002918:	4b10      	ldr	r3, [pc, #64]	; (800295c <MRT_get_flags+0x1d8>)
 800291a:	781a      	ldrb	r2, [r3, #0]
 800291c:	4b07      	ldr	r3, [pc, #28]	; (800293c <MRT_get_flags+0x1b8>)
 800291e:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(2);
 8002920:	2002      	movs	r0, #2
 8002922:	f000 fcdf 	bl	80032e4 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8002926:	2303      	movs	r3, #3
 8002928:	2200      	movs	r2, #0
 800292a:	2102      	movs	r1, #2
 800292c:	4803      	ldr	r0, [pc, #12]	; (800293c <MRT_get_flags+0x1b8>)
 800292e:	f000 fe23 	bl	8003578 <W25qxx_WriteSector>
	}
}
 8002932:	bf00      	nop
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	2000530c 	.word	0x2000530c
 800293c:	20005314 	.word	0x20005314
 8002940:	20000271 	.word	0x20000271
 8002944:	20000270 	.word	0x20000270
 8002948:	20000272 	.word	0x20000272
 800294c:	20000273 	.word	0x20000273
 8002950:	20000274 	.word	0x20000274
 8002954:	20000275 	.word	0x20000275
 8002958:	20000276 	.word	0x20000276
 800295c:	20000277 	.word	0x20000277

08002960 <MRT_update_flags_values>:
		flash_time_buffer[i] = *flash_time[i];
	}
}


void MRT_update_flags_values(void){
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8002966:	2300      	movs	r3, #0
 8002968:	607b      	str	r3, [r7, #4]
 800296a:	e00b      	b.n	8002984 <MRT_update_flags_values+0x24>
		*flash_flags[i] = flash_flags_buffer[i];
 800296c:	4a13      	ldr	r2, [pc, #76]	; (80029bc <MRT_update_flags_values+0x5c>)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002974:	4912      	ldr	r1, [pc, #72]	; (80029c0 <MRT_update_flags_values+0x60>)
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	440a      	add	r2, r1
 800297a:	7812      	ldrb	r2, [r2, #0]
 800297c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	3301      	adds	r3, #1
 8002982:	607b      	str	r3, [r7, #4]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b04      	cmp	r3, #4
 8002988:	ddf0      	ble.n	800296c <MRT_update_flags_values+0xc>
	}
	for (int i = 0; i < 3; i++){
 800298a:	2300      	movs	r3, #0
 800298c:	603b      	str	r3, [r7, #0]
 800298e:	e00b      	b.n	80029a8 <MRT_update_flags_values+0x48>
		*flash_time[i] = flash_time_buffer[i];
 8002990:	4a0c      	ldr	r2, [pc, #48]	; (80029c4 <MRT_update_flags_values+0x64>)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002998:	490b      	ldr	r1, [pc, #44]	; (80029c8 <MRT_update_flags_values+0x68>)
 800299a:	683a      	ldr	r2, [r7, #0]
 800299c:	440a      	add	r2, r1
 800299e:	7812      	ldrb	r2, [r2, #0]
 80029a0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 3; i++){
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	3301      	adds	r3, #1
 80029a6:	603b      	str	r3, [r7, #0]
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	ddf0      	ble.n	8002990 <MRT_update_flags_values+0x30>
	}
}
 80029ae:	bf00      	nop
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	20000004 	.word	0x20000004
 80029c0:	2000530c 	.word	0x2000530c
 80029c4:	20000018 	.word	0x20000018
 80029c8:	20005314 	.word	0x20005314

080029cc <myprintf>:


uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value);
void str2upper(char* string, char* upper);

void myprintf(const char *fmt, ...) { // currently does nothing, was copied from a tutorial to make the code work
 80029cc:	b40f      	push	{r0, r1, r2, r3}
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b082      	sub	sp, #8
 80029d2:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 80029d4:	f107 0314 	add.w	r3, r7, #20
 80029d8:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029e2:	480a      	ldr	r0, [pc, #40]	; (8002a0c <myprintf+0x40>)
 80029e4:	f011 ffdc 	bl	80149a0 <vsniprintf>
  va_end(args);

  //CDC_Transmit_FS((uint8_t *)buffer, strlen(buffer));
  HAL_UART_Transmit(&DEBUG_UART, (uint8_t*)buffer, strlen(buffer), -1);
 80029e8:	4808      	ldr	r0, [pc, #32]	; (8002a0c <myprintf+0x40>)
 80029ea:	f7fd fc01 	bl	80001f0 <strlen>
 80029ee:	4603      	mov	r3, r0
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	f04f 33ff 	mov.w	r3, #4294967295
 80029f6:	4905      	ldr	r1, [pc, #20]	; (8002a0c <myprintf+0x40>)
 80029f8:	4805      	ldr	r0, [pc, #20]	; (8002a10 <myprintf+0x44>)
 80029fa:	f008 fa4c 	bl	800ae96 <HAL_UART_Transmit>

}
 80029fe:	bf00      	nop
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002a08:	b004      	add	sp, #16
 8002a0a:	4770      	bx	lr
 8002a0c:	2000027c 	.word	0x2000027c
 8002a10:	2000527c 	.word	0x2000527c

08002a14 <sd_init_dynamic_filename>:
 * creates new file of form "[prefix][number].txt"
 * where the string composed of "[prefix][number]" is 8 characters long.
 *
 */
FRESULT sd_init_dynamic_filename(char *prefix, char *header_text, char* return_filename)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b08a      	sub	sp, #40	; 0x28
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
	FRESULT fres = f_mount(&FatFs, "", 1);
 8002a20:	2201      	movs	r2, #1
 8002a22:	4932      	ldr	r1, [pc, #200]	; (8002aec <sd_init_dynamic_filename+0xd8>)
 8002a24:	4832      	ldr	r0, [pc, #200]	; (8002af0 <sd_init_dynamic_filename+0xdc>)
 8002a26:	f00c fbfb 	bl	800f220 <f_mount>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (fres != FR_OK) {
 8002a30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d008      	beq.n	8002a4a <sd_init_dynamic_filename+0x36>
		myprintf("f_mount error (%i)\r\n", fres);
 8002a38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	482d      	ldr	r0, [pc, #180]	; (8002af4 <sd_init_dynamic_filename+0xe0>)
 8002a40:	f7ff ffc4 	bl	80029cc <myprintf>
		return fres;
 8002a44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a48:	e04b      	b.n	8002ae2 <sd_init_dynamic_filename+0xce>
	}

	// scan files on drive to figure out what suffix number is appropriate
	uint32_t max_used_value = 0;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	623b      	str	r3, [r7, #32]
	fres = scan_files("", prefix, &max_used_value);
 8002a4e:	f107 0320 	add.w	r3, r7, #32
 8002a52:	461a      	mov	r2, r3
 8002a54:	68f9      	ldr	r1, [r7, #12]
 8002a56:	4825      	ldr	r0, [pc, #148]	; (8002aec <sd_init_dynamic_filename+0xd8>)
 8002a58:	f000 f884 	bl	8002b64 <scan_files>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// create filename (max filename length in char array is 13 without LFN)
	char filename[13];
	sprintf(filename, "fc%06lu.txt", max_used_value + 1);
 8002a62:	6a3b      	ldr	r3, [r7, #32]
 8002a64:	1c5a      	adds	r2, r3, #1
 8002a66:	f107 0310 	add.w	r3, r7, #16
 8002a6a:	4923      	ldr	r1, [pc, #140]	; (8002af8 <sd_init_dynamic_filename+0xe4>)
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f011 f831 	bl	8013ad4 <siprintf>
	return_filename = strcpy(return_filename, filename); // needed so that other functions can open the file!
 8002a72:	f107 0310 	add.w	r3, r7, #16
 8002a76:	4619      	mov	r1, r3
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f011 f88e 	bl	8013b9a <strcpy>
 8002a7e:	6078      	str	r0, [r7, #4]

	// open file (create file) on SD card
	fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8002a80:	f107 0310 	add.w	r3, r7, #16
 8002a84:	221a      	movs	r2, #26
 8002a86:	4619      	mov	r1, r3
 8002a88:	481c      	ldr	r0, [pc, #112]	; (8002afc <sd_init_dynamic_filename+0xe8>)
 8002a8a:	f00c fc2d 	bl	800f2e8 <f_open>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (fres == FR_OK) {
 8002a94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d11a      	bne.n	8002ad2 <sd_init_dynamic_filename+0xbe>
		myprintf("I was able to open filename.txt for writing\r\n");
 8002a9c:	4818      	ldr	r0, [pc, #96]	; (8002b00 <sd_init_dynamic_filename+0xec>)
 8002a9e:	f7ff ff95 	bl	80029cc <myprintf>
	} else {
		myprintf("f_open error (%i)\r\n", fres);
		return fres;
	}
	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 8002aa2:	4b16      	ldr	r3, [pc, #88]	; (8002afc <sd_init_dynamic_filename+0xe8>)
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4814      	ldr	r0, [pc, #80]	; (8002afc <sd_init_dynamic_filename+0xe8>)
 8002aaa:	f00d f83e 	bl	800fb2a <f_lseek>

	// save indicate start of new log session
	sprintf((char *)msg_buffer, "--- new logging session! ---\r\n");
 8002aae:	4915      	ldr	r1, [pc, #84]	; (8002b04 <sd_init_dynamic_filename+0xf0>)
 8002ab0:	4815      	ldr	r0, [pc, #84]	; (8002b08 <sd_init_dynamic_filename+0xf4>)
 8002ab2:	f011 f80f 	bl	8013ad4 <siprintf>
	sd_write(&fil, msg_buffer);
 8002ab6:	4914      	ldr	r1, [pc, #80]	; (8002b08 <sd_init_dynamic_filename+0xf4>)
 8002ab8:	4810      	ldr	r0, [pc, #64]	; (8002afc <sd_init_dynamic_filename+0xe8>)
 8002aba:	f000 f829 	bl	8002b10 <sd_write>

	// save header row to indicate what the data is
	sd_write(&fil, (uint8_t *)header_text);
 8002abe:	68b9      	ldr	r1, [r7, #8]
 8002ac0:	480e      	ldr	r0, [pc, #56]	; (8002afc <sd_init_dynamic_filename+0xe8>)
 8002ac2:	f000 f825 	bl	8002b10 <sd_write>
	f_close(&fil);
 8002ac6:	480d      	ldr	r0, [pc, #52]	; (8002afc <sd_init_dynamic_filename+0xe8>)
 8002ac8:	f00d f800 	bl	800facc <f_close>

	return fres;
 8002acc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ad0:	e007      	b.n	8002ae2 <sd_init_dynamic_filename+0xce>
		myprintf("f_open error (%i)\r\n", fres);
 8002ad2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	480c      	ldr	r0, [pc, #48]	; (8002b0c <sd_init_dynamic_filename+0xf8>)
 8002ada:	f7ff ff77 	bl	80029cc <myprintf>
		return fres;
 8002ade:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3728      	adds	r7, #40	; 0x28
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	0801753c 	.word	0x0801753c
 8002af0:	20005318 	.word	0x20005318
 8002af4:	08017540 	.word	0x08017540
 8002af8:	080175bc 	.word	0x080175bc
 8002afc:	20005d20 	.word	0x20005d20
 8002b00:	08017558 	.word	0x08017558
 8002b04:	0801759c 	.word	0x0801759c
 8002b08:	2000554c 	.word	0x2000554c
 8002b0c:	08017588 	.word	0x08017588

08002b10 <sd_write>:
 * @brief  write buffer to file on sd card.
 * @param  fp 		file to save to
 * @param  buffer	data to write to file
 */
int8_t sd_write(FIL* fp, uint8_t* buffer)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
	UINT bytesWrote;
	FRESULT fres = f_write(fp, buffer, strlen((char const *)buffer), &bytesWrote);
 8002b1a:	6838      	ldr	r0, [r7, #0]
 8002b1c:	f7fd fb68 	bl	80001f0 <strlen>
 8002b20:	4602      	mov	r2, r0
 8002b22:	f107 0308 	add.w	r3, r7, #8
 8002b26:	6839      	ldr	r1, [r7, #0]
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f00c fda2 	bl	800f672 <f_write>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	73fb      	strb	r3, [r7, #15]
	if (fres == FR_OK) {
 8002b32:	7bfb      	ldrb	r3, [r7, #15]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d107      	bne.n	8002b48 <sd_write+0x38>
		myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	4807      	ldr	r0, [pc, #28]	; (8002b5c <sd_write+0x4c>)
 8002b3e:	f7ff ff45 	bl	80029cc <myprintf>
		return bytesWrote;
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	b25b      	sxtb	r3, r3
 8002b46:	e004      	b.n	8002b52 <sd_write+0x42>
	} else {
		myprintf("f_write error (%i)\r\n");
 8002b48:	4805      	ldr	r0, [pc, #20]	; (8002b60 <sd_write+0x50>)
 8002b4a:	f7ff ff3f 	bl	80029cc <myprintf>
		return -1;
 8002b4e:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	080175c8 	.word	0x080175c8
 8002b60:	080175ec 	.word	0x080175ec

08002b64 <scan_files>:
FRESULT scan_files (
    char* path,        /* Start node to be scanned (***also used as work area***) */
	char* prefix,	   /* prefix in the filename for our datafiles */
	uint32_t* max_used_value
)
{
 8002b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b66:	b099      	sub	sp, #100	; 0x64
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
 8002b70:	466b      	mov	r3, sp
 8002b72:	461d      	mov	r5, r3
    DIR dir;
//    UINT i;
    static FILINFO fno;

    // does not change so make it static
    uint8_t len_prefix = strlen(prefix);
 8002b74:	68b8      	ldr	r0, [r7, #8]
 8002b76:	f7fd fb3b 	bl	80001f0 <strlen>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    char prefix_upper[len_prefix];
 8002b80:	f897 405e 	ldrb.w	r4, [r7, #94]	; 0x5e
 8002b84:	4623      	mov	r3, r4
 8002b86:	3b01      	subs	r3, #1
 8002b88:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b8a:	b2e0      	uxtb	r0, r4
 8002b8c:	f04f 0100 	mov.w	r1, #0
 8002b90:	f04f 0200 	mov.w	r2, #0
 8002b94:	f04f 0300 	mov.w	r3, #0
 8002b98:	00cb      	lsls	r3, r1, #3
 8002b9a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002b9e:	00c2      	lsls	r2, r0, #3
 8002ba0:	b2e0      	uxtb	r0, r4
 8002ba2:	f04f 0100 	mov.w	r1, #0
 8002ba6:	f04f 0200 	mov.w	r2, #0
 8002baa:	f04f 0300 	mov.w	r3, #0
 8002bae:	00cb      	lsls	r3, r1, #3
 8002bb0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002bb4:	00c2      	lsls	r2, r0, #3
 8002bb6:	4623      	mov	r3, r4
 8002bb8:	3307      	adds	r3, #7
 8002bba:	08db      	lsrs	r3, r3, #3
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	ebad 0d03 	sub.w	sp, sp, r3
 8002bc2:	466b      	mov	r3, sp
 8002bc4:	3300      	adds	r3, #0
 8002bc6:	657b      	str	r3, [r7, #84]	; 0x54
	str2upper(prefix, prefix_upper);
 8002bc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bca:	4619      	mov	r1, r3
 8002bcc:	68b8      	ldr	r0, [r7, #8]
 8002bce:	f000 f8ff 	bl	8002dd0 <str2upper>

	*max_used_value = 0; // initialize to known minimum value
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
	uint32_t num_files_fc = 0; // suffix on the files containing fc data already on sd card
 8002bd8:	2300      	movs	r3, #0
 8002bda:	617b      	str	r3, [r7, #20]

    res = f_opendir(&dir, path);                       /* Open the directory */
 8002bdc:	f107 0318 	add.w	r3, r7, #24
 8002be0:	68f9      	ldr	r1, [r7, #12]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f00d f9f4 	bl	800ffd0 <f_opendir>
 8002be8:	4603      	mov	r3, r0
 8002bea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (res == FR_OK) {
 8002bee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d16c      	bne.n	8002cd0 <scan_files+0x16c>
        for (;;) {
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8002bf6:	f107 0318 	add.w	r3, r7, #24
 8002bfa:	4939      	ldr	r1, [pc, #228]	; (8002ce0 <scan_files+0x17c>)
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f00d fa8b 	bl	8010118 <f_readdir>
 8002c02:	4603      	mov	r3, r0
 8002c04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8002c08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d15a      	bne.n	8002cc6 <scan_files+0x162>
 8002c10:	4b33      	ldr	r3, [pc, #204]	; (8002ce0 <scan_files+0x17c>)
 8002c12:	7a5b      	ldrb	r3, [r3, #9]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d056      	beq.n	8002cc6 <scan_files+0x162>
            if (fno.fattrib & AM_DIR) {                    /* It is a directory */
 8002c18:	4b31      	ldr	r3, [pc, #196]	; (8002ce0 <scan_files+0x17c>)
 8002c1a:	7a1b      	ldrb	r3, [r3, #8]
 8002c1c:	f003 0310 	and.w	r3, r3, #16
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d14e      	bne.n	8002cc2 <scan_files+0x15e>
//                i = strlen(path);
//                sprintf(&path[i], "/%s", fno.fname);
//                res = scan_files(path, prefix, max_used_value);    /* Enter the directory */
//                if (res != FR_OK) break;
//                path[i] = 0;
            } else {                                       /* It is a file. */
 8002c24:	466b      	mov	r3, sp
 8002c26:	461e      	mov	r6, r3
//                printf("%s/%s\n", path, fno.fname);

            	// check if filename contains parts of our standard prefix "FC000000.txt"
            	// but first convert to uppercase to make case insensitive

            	char fname_upper[strlen((char *)fno.fname)];
 8002c28:	482e      	ldr	r0, [pc, #184]	; (8002ce4 <scan_files+0x180>)
 8002c2a:	f7fd fae1 	bl	80001f0 <strlen>
 8002c2e:	4604      	mov	r4, r0
 8002c30:	4623      	mov	r3, r4
 8002c32:	3b01      	subs	r3, #1
 8002c34:	653b      	str	r3, [r7, #80]	; 0x50
 8002c36:	4620      	mov	r0, r4
 8002c38:	f04f 0100 	mov.w	r1, #0
 8002c3c:	f04f 0200 	mov.w	r2, #0
 8002c40:	f04f 0300 	mov.w	r3, #0
 8002c44:	00cb      	lsls	r3, r1, #3
 8002c46:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002c4a:	00c2      	lsls	r2, r0, #3
 8002c4c:	4620      	mov	r0, r4
 8002c4e:	f04f 0100 	mov.w	r1, #0
 8002c52:	f04f 0200 	mov.w	r2, #0
 8002c56:	f04f 0300 	mov.w	r3, #0
 8002c5a:	00cb      	lsls	r3, r1, #3
 8002c5c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002c60:	00c2      	lsls	r2, r0, #3
 8002c62:	1de3      	adds	r3, r4, #7
 8002c64:	08db      	lsrs	r3, r3, #3
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	ebad 0d03 	sub.w	sp, sp, r3
 8002c6c:	466b      	mov	r3, sp
 8002c6e:	3300      	adds	r3, #0
 8002c70:	64fb      	str	r3, [r7, #76]	; 0x4c
            	str2upper((char *)fno.fname, fname_upper);
 8002c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c74:	4619      	mov	r1, r3
 8002c76:	481b      	ldr	r0, [pc, #108]	; (8002ce4 <scan_files+0x180>)
 8002c78:	f000 f8aa 	bl	8002dd0 <str2upper>

            	int8_t contains_prefix = strncmp(fno.fname, prefix_upper, len_prefix);
 8002c7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c7e:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8002c82:	4619      	mov	r1, r3
 8002c84:	4817      	ldr	r0, [pc, #92]	; (8002ce4 <scan_files+0x180>)
 8002c86:	f010 ff90 	bl	8013baa <strncmp>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

            	if (contains_prefix == 0)
 8002c90:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d112      	bne.n	8002cbe <scan_files+0x15a>
            	{
            		// can do error checking with status if desired
            		uint8_t status = extract_filename_suffix(fname_upper, len_prefix, &num_files_fc);
 8002c98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c9a:	f107 0214 	add.w	r2, r7, #20
 8002c9e:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 f820 	bl	8002ce8 <extract_filename_suffix>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

            		if (num_files_fc > *max_used_value)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d202      	bcs.n	8002cbe <scan_files+0x15a>
            		{
            			*max_used_value = num_files_fc;
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	601a      	str	r2, [r3, #0]
 8002cbe:	46b5      	mov	sp, r6
 8002cc0:	e799      	b.n	8002bf6 <scan_files+0x92>
            	continue; // don't enter directory
 8002cc2:	bf00      	nop
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8002cc4:	e797      	b.n	8002bf6 <scan_files+0x92>
            		}
            	}
            }
        }

        f_closedir(&dir);
 8002cc6:	f107 0318 	add.w	r3, r7, #24
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f00d f9f9 	bl	80100c2 <f_closedir>
    }

    return res;
 8002cd0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002cd4:	46ad      	mov	sp, r5
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3764      	adds	r7, #100	; 0x64
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	2000037c 	.word	0x2000037c
 8002ce4:	20000385 	.word	0x20000385

08002ce8 <extract_filename_suffix>:
 * which is assumed to be .txt. assumes that filename contains prefix.
 *
 * returns integer indicating success/fail: 0 = success, 1 = fail
 */
uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value)
{
 8002ce8:	b5b0      	push	{r4, r5, r7, lr}
 8002cea:	b088      	sub	sp, #32
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	607a      	str	r2, [r7, #4]
 8002cf4:	72fb      	strb	r3, [r7, #11]
 8002cf6:	466b      	mov	r3, sp
 8002cf8:	461d      	mov	r5, r3
	uint8_t len_filename = strlen(filename);
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f7fd fa78 	bl	80001f0 <strlen>
 8002d00:	4603      	mov	r3, r0
 8002d02:	77bb      	strb	r3, [r7, #30]

	// add characters between prefix and filename extension to buffer
	uint8_t len_buf = 8;
 8002d04:	2308      	movs	r3, #8
 8002d06:	777b      	strb	r3, [r7, #29]
	char buf[len_buf]; // filenames can't be longer than 8 characters total
 8002d08:	7f7c      	ldrb	r4, [r7, #29]
 8002d0a:	4623      	mov	r3, r4
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	61bb      	str	r3, [r7, #24]
 8002d10:	b2e0      	uxtb	r0, r4
 8002d12:	f04f 0100 	mov.w	r1, #0
 8002d16:	f04f 0200 	mov.w	r2, #0
 8002d1a:	f04f 0300 	mov.w	r3, #0
 8002d1e:	00cb      	lsls	r3, r1, #3
 8002d20:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002d24:	00c2      	lsls	r2, r0, #3
 8002d26:	b2e0      	uxtb	r0, r4
 8002d28:	f04f 0100 	mov.w	r1, #0
 8002d2c:	f04f 0200 	mov.w	r2, #0
 8002d30:	f04f 0300 	mov.w	r3, #0
 8002d34:	00cb      	lsls	r3, r1, #3
 8002d36:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002d3a:	00c2      	lsls	r2, r0, #3
 8002d3c:	4623      	mov	r3, r4
 8002d3e:	3307      	adds	r3, #7
 8002d40:	08db      	lsrs	r3, r3, #3
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	ebad 0d03 	sub.w	sp, sp, r3
 8002d48:	466b      	mov	r3, sp
 8002d4a:	3300      	adds	r3, #0
 8002d4c:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < len_buf; i++)
 8002d4e:	2300      	movs	r3, #0
 8002d50:	77fb      	strb	r3, [r7, #31]
 8002d52:	e014      	b.n	8002d7e <extract_filename_suffix+0x96>
	{
		if (len_prefix - 1 + i < len_filename - 1) // go to end of filename
 8002d54:	7afb      	ldrb	r3, [r7, #11]
 8002d56:	1e5a      	subs	r2, r3, #1
 8002d58:	7ffb      	ldrb	r3, [r7, #31]
 8002d5a:	441a      	add	r2, r3
 8002d5c:	7fbb      	ldrb	r3, [r7, #30]
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	429a      	cmp	r2, r3
 8002d62:	da11      	bge.n	8002d88 <extract_filename_suffix+0xa0>
		{
			buf[i] = filename[len_prefix + i];
 8002d64:	7afa      	ldrb	r2, [r7, #11]
 8002d66:	7ffb      	ldrb	r3, [r7, #31]
 8002d68:	4413      	add	r3, r2
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	441a      	add	r2, r3
 8002d70:	7ffb      	ldrb	r3, [r7, #31]
 8002d72:	7811      	ldrb	r1, [r2, #0]
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < len_buf; i++)
 8002d78:	7ffb      	ldrb	r3, [r7, #31]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	77fb      	strb	r3, [r7, #31]
 8002d7e:	7ffa      	ldrb	r2, [r7, #31]
 8002d80:	7f7b      	ldrb	r3, [r7, #29]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d3e6      	bcc.n	8002d54 <extract_filename_suffix+0x6c>
 8002d86:	e000      	b.n	8002d8a <extract_filename_suffix+0xa2>
		}
		else break;
 8002d88:	bf00      	nop
	}

	// change chars to integer, strtol will strip out the .txt
	char *ptr;
	*num_value = strtol(buf, &ptr, 10);
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	f107 0110 	add.w	r1, r7, #16
 8002d90:	220a      	movs	r2, #10
 8002d92:	4618      	mov	r0, r3
 8002d94:	f011 fdce 	bl	8014934 <strtol>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	601a      	str	r2, [r3, #0]

	if (ptr == buf || *num_value == LONG_MIN || *num_value == LONG_MAX)
 8002da0:	697a      	ldr	r2, [r7, #20]
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d00a      	beq.n	8002dbe <extract_filename_suffix+0xd6>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002db0:	d005      	beq.n	8002dbe <extract_filename_suffix+0xd6>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d101      	bne.n	8002dc2 <extract_filename_suffix+0xda>
	{
		return 1;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e000      	b.n	8002dc4 <extract_filename_suffix+0xdc>
	}

	return 0;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	46ad      	mov	sp, r5
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3720      	adds	r7, #32
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002dd0 <str2upper>:
/**
 * assumes that upper has enough characters in the array
 * to store the uppercase version.
 */
void str2upper(char* string, char* upper)
{
 8002dd0:	b590      	push	{r4, r7, lr}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 8002dda:	2300      	movs	r3, #0
 8002ddc:	73fb      	strb	r3, [r7, #15]
 8002dde:	e019      	b.n	8002e14 <str2upper+0x44>
	{
		upper[i] = toupper(string[i]);
 8002de0:	7bfb      	ldrb	r3, [r7, #15]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	4413      	add	r3, r2
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	73bb      	strb	r3, [r7, #14]
 8002dea:	7bbb      	ldrb	r3, [r7, #14]
 8002dec:	3301      	adds	r3, #1
 8002dee:	4a0f      	ldr	r2, [pc, #60]	; (8002e2c <str2upper+0x5c>)
 8002df0:	4413      	add	r3, r2
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	f003 0303 	and.w	r3, r3, #3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d102      	bne.n	8002e02 <str2upper+0x32>
 8002dfc:	7bbb      	ldrb	r3, [r7, #14]
 8002dfe:	3b20      	subs	r3, #32
 8002e00:	e000      	b.n	8002e04 <str2upper+0x34>
 8002e02:	7bbb      	ldrb	r3, [r7, #14]
 8002e04:	7bfa      	ldrb	r2, [r7, #15]
 8002e06:	6839      	ldr	r1, [r7, #0]
 8002e08:	440a      	add	r2, r1
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	7013      	strb	r3, [r2, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 8002e0e:	7bfb      	ldrb	r3, [r7, #15]
 8002e10:	3301      	adds	r3, #1
 8002e12:	73fb      	strb	r3, [r7, #15]
 8002e14:	7bfc      	ldrb	r4, [r7, #15]
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f7fd f9ea 	bl	80001f0 <strlen>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	429c      	cmp	r4, r3
 8002e20:	d3de      	bcc.n	8002de0 <str2upper+0x10>
	}
}
 8002e22:	bf00      	nop
 8002e24:	bf00      	nop
 8002e26:	3714      	adds	r7, #20
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd90      	pop	{r4, r7, pc}
 8002e2c:	08018138 	.word	0x08018138

08002e30 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af02      	add	r7, sp, #8
 8002e36:	4603      	mov	r3, r0
 8002e38:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8002e3a:	f107 020f 	add.w	r2, r7, #15
 8002e3e:	1df9      	adds	r1, r7, #7
 8002e40:	2364      	movs	r3, #100	; 0x64
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	2301      	movs	r3, #1
 8002e46:	4804      	ldr	r0, [pc, #16]	; (8002e58 <W25qxx_Spi+0x28>)
 8002e48:	f006 fdb8 	bl	80099bc <HAL_SPI_TransmitReceive>
	return ret;
 8002e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	200050f8 	.word	0x200050f8

08002e5c <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8002e62:	2300      	movs	r3, #0
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	2300      	movs	r3, #0
 8002e68:	60bb      	str	r3, [r7, #8]
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	607b      	str	r3, [r7, #4]
 8002e6e:	2300      	movs	r3, #0
 8002e70:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002e72:	2200      	movs	r2, #0
 8002e74:	2140      	movs	r1, #64	; 0x40
 8002e76:	4813      	ldr	r0, [pc, #76]	; (8002ec4 <W25qxx_ReadID+0x68>)
 8002e78:	f002 ff26 	bl	8005cc8 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8002e7c:	209f      	movs	r0, #159	; 0x9f
 8002e7e:	f7ff ffd7 	bl	8002e30 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002e82:	20a5      	movs	r0, #165	; 0xa5
 8002e84:	f7ff ffd4 	bl	8002e30 <W25qxx_Spi>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002e8c:	20a5      	movs	r0, #165	; 0xa5
 8002e8e:	f7ff ffcf 	bl	8002e30 <W25qxx_Spi>
 8002e92:	4603      	mov	r3, r0
 8002e94:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002e96:	20a5      	movs	r0, #165	; 0xa5
 8002e98:	f7ff ffca 	bl	8002e30 <W25qxx_Spi>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	2140      	movs	r1, #64	; 0x40
 8002ea4:	4807      	ldr	r0, [pc, #28]	; (8002ec4 <W25qxx_ReadID+0x68>)
 8002ea6:	f002 ff0f 	bl	8005cc8 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	041a      	lsls	r2, r3, #16
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	021b      	lsls	r3, r3, #8
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	60fb      	str	r3, [r7, #12]
	return Temp;
 8002eba:	68fb      	ldr	r3, [r7, #12]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	40020c00 	.word	0x40020c00

08002ec8 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8002ec8:	b590      	push	{r4, r7, lr}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002ece:	2200      	movs	r2, #0
 8002ed0:	2140      	movs	r1, #64	; 0x40
 8002ed2:	4816      	ldr	r0, [pc, #88]	; (8002f2c <W25qxx_ReadUniqID+0x64>)
 8002ed4:	f002 fef8 	bl	8005cc8 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8002ed8:	204b      	movs	r0, #75	; 0x4b
 8002eda:	f7ff ffa9 	bl	8002e30 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8002ede:	2300      	movs	r3, #0
 8002ee0:	71fb      	strb	r3, [r7, #7]
 8002ee2:	e005      	b.n	8002ef0 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002ee4:	20a5      	movs	r0, #165	; 0xa5
 8002ee6:	f7ff ffa3 	bl	8002e30 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8002eea:	79fb      	ldrb	r3, [r7, #7]
 8002eec:	3301      	adds	r3, #1
 8002eee:	71fb      	strb	r3, [r7, #7]
 8002ef0:	79fb      	ldrb	r3, [r7, #7]
 8002ef2:	2b03      	cmp	r3, #3
 8002ef4:	d9f6      	bls.n	8002ee4 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	71bb      	strb	r3, [r7, #6]
 8002efa:	e00b      	b.n	8002f14 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002efc:	79bc      	ldrb	r4, [r7, #6]
 8002efe:	20a5      	movs	r0, #165	; 0xa5
 8002f00:	f7ff ff96 	bl	8002e30 <W25qxx_Spi>
 8002f04:	4603      	mov	r3, r0
 8002f06:	461a      	mov	r2, r3
 8002f08:	4b09      	ldr	r3, [pc, #36]	; (8002f30 <W25qxx_ReadUniqID+0x68>)
 8002f0a:	4423      	add	r3, r4
 8002f0c:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8002f0e:	79bb      	ldrb	r3, [r7, #6]
 8002f10:	3301      	adds	r3, #1
 8002f12:	71bb      	strb	r3, [r7, #6]
 8002f14:	79bb      	ldrb	r3, [r7, #6]
 8002f16:	2b07      	cmp	r3, #7
 8002f18:	d9f0      	bls.n	8002efc <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	2140      	movs	r1, #64	; 0x40
 8002f1e:	4803      	ldr	r0, [pc, #12]	; (8002f2c <W25qxx_ReadUniqID+0x64>)
 8002f20:	f002 fed2 	bl	8005cc8 <HAL_GPIO_WritePin>
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd90      	pop	{r4, r7, pc}
 8002f2c:	40020c00 	.word	0x40020c00
 8002f30:	20005f50 	.word	0x20005f50

08002f34 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002f38:	2200      	movs	r2, #0
 8002f3a:	2140      	movs	r1, #64	; 0x40
 8002f3c:	4807      	ldr	r0, [pc, #28]	; (8002f5c <W25qxx_WriteEnable+0x28>)
 8002f3e:	f002 fec3 	bl	8005cc8 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8002f42:	2006      	movs	r0, #6
 8002f44:	f7ff ff74 	bl	8002e30 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002f48:	2201      	movs	r2, #1
 8002f4a:	2140      	movs	r1, #64	; 0x40
 8002f4c:	4803      	ldr	r0, [pc, #12]	; (8002f5c <W25qxx_WriteEnable+0x28>)
 8002f4e:	f002 febb 	bl	8005cc8 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8002f52:	2001      	movs	r0, #1
 8002f54:	f00d f9d6 	bl	8010304 <osDelay>
}
 8002f58:	bf00      	nop
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40020c00 	.word	0x40020c00

08002f60 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002f6e:	2200      	movs	r2, #0
 8002f70:	2140      	movs	r1, #64	; 0x40
 8002f72:	481c      	ldr	r0, [pc, #112]	; (8002fe4 <W25qxx_ReadStatusRegister+0x84>)
 8002f74:	f002 fea8 	bl	8005cc8 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8002f78:	79fb      	ldrb	r3, [r7, #7]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d10c      	bne.n	8002f98 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8002f7e:	2005      	movs	r0, #5
 8002f80:	f7ff ff56 	bl	8002e30 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002f84:	20a5      	movs	r0, #165	; 0xa5
 8002f86:	f7ff ff53 	bl	8002e30 <W25qxx_Spi>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8002f8e:	4a16      	ldr	r2, [pc, #88]	; (8002fe8 <W25qxx_ReadStatusRegister+0x88>)
 8002f90:	7bfb      	ldrb	r3, [r7, #15]
 8002f92:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8002f96:	e01b      	b.n	8002fd0 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8002f98:	79fb      	ldrb	r3, [r7, #7]
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d10c      	bne.n	8002fb8 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8002f9e:	2035      	movs	r0, #53	; 0x35
 8002fa0:	f7ff ff46 	bl	8002e30 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002fa4:	20a5      	movs	r0, #165	; 0xa5
 8002fa6:	f7ff ff43 	bl	8002e30 <W25qxx_Spi>
 8002faa:	4603      	mov	r3, r0
 8002fac:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8002fae:	4a0e      	ldr	r2, [pc, #56]	; (8002fe8 <W25qxx_ReadStatusRegister+0x88>)
 8002fb0:	7bfb      	ldrb	r3, [r7, #15]
 8002fb2:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8002fb6:	e00b      	b.n	8002fd0 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8002fb8:	2015      	movs	r0, #21
 8002fba:	f7ff ff39 	bl	8002e30 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002fbe:	20a5      	movs	r0, #165	; 0xa5
 8002fc0:	f7ff ff36 	bl	8002e30 <W25qxx_Spi>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8002fc8:	4a07      	ldr	r2, [pc, #28]	; (8002fe8 <W25qxx_ReadStatusRegister+0x88>)
 8002fca:	7bfb      	ldrb	r3, [r7, #15]
 8002fcc:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	2140      	movs	r1, #64	; 0x40
 8002fd4:	4803      	ldr	r0, [pc, #12]	; (8002fe4 <W25qxx_ReadStatusRegister+0x84>)
 8002fd6:	f002 fe77 	bl	8005cc8 <HAL_GPIO_WritePin>
	return status;
 8002fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40020c00 	.word	0x40020c00
 8002fe8:	20005f50 	.word	0x20005f50

08002fec <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8002ff0:	2001      	movs	r0, #1
 8002ff2:	f00d f987 	bl	8010304 <osDelay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	2140      	movs	r1, #64	; 0x40
 8002ffa:	480f      	ldr	r0, [pc, #60]	; (8003038 <W25qxx_WaitForWriteEnd+0x4c>)
 8002ffc:	f002 fe64 	bl	8005cc8 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8003000:	2005      	movs	r0, #5
 8003002:	f7ff ff15 	bl	8002e30 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003006:	20a5      	movs	r0, #165	; 0xa5
 8003008:	f7ff ff12 	bl	8002e30 <W25qxx_Spi>
 800300c:	4603      	mov	r3, r0
 800300e:	461a      	mov	r2, r3
 8003010:	4b0a      	ldr	r3, [pc, #40]	; (800303c <W25qxx_WaitForWriteEnd+0x50>)
 8003012:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8003016:	2001      	movs	r0, #1
 8003018:	f00d f974 	bl	8010304 <osDelay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 800301c:	4b07      	ldr	r3, [pc, #28]	; (800303c <W25qxx_WaitForWriteEnd+0x50>)
 800301e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1ed      	bne.n	8003006 <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800302a:	2201      	movs	r2, #1
 800302c:	2140      	movs	r1, #64	; 0x40
 800302e:	4802      	ldr	r0, [pc, #8]	; (8003038 <W25qxx_WaitForWriteEnd+0x4c>)
 8003030:	f002 fe4a 	bl	8005cc8 <HAL_GPIO_WritePin>
}
 8003034:	bf00      	nop
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40020c00 	.word	0x40020c00
 800303c:	20005f50 	.word	0x20005f50

08003040 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8003046:	4b90      	ldr	r3, [pc, #576]	; (8003288 <W25qxx_Init+0x248>)
 8003048:	2201      	movs	r2, #1
 800304a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 800304e:	e002      	b.n	8003056 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8003050:	2001      	movs	r0, #1
 8003052:	f00d f957 	bl	8010304 <osDelay>
	while (HAL_GetTick() < 100)
 8003056:	f002 f907 	bl	8005268 <HAL_GetTick>
 800305a:	4603      	mov	r3, r0
 800305c:	2b63      	cmp	r3, #99	; 0x63
 800305e:	d9f7      	bls.n	8003050 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003060:	2201      	movs	r2, #1
 8003062:	2140      	movs	r1, #64	; 0x40
 8003064:	4889      	ldr	r0, [pc, #548]	; (800328c <W25qxx_Init+0x24c>)
 8003066:	f002 fe2f 	bl	8005cc8 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 800306a:	2064      	movs	r0, #100	; 0x64
 800306c:	f00d f94a 	bl	8010304 <osDelay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
 8003070:	4887      	ldr	r0, [pc, #540]	; (8003290 <W25qxx_Init+0x250>)
 8003072:	f010 fccd 	bl	8013a10 <puts>
#endif
	id = W25qxx_ReadID();
 8003076:	f7ff fef1 	bl	8002e5c <W25qxx_ReadID>
 800307a:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	4885      	ldr	r0, [pc, #532]	; (8003294 <W25qxx_Init+0x254>)
 8003080:	f010 fc40 	bl	8013904 <iprintf>
#endif
	switch (id & 0x000000FF)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	b2db      	uxtb	r3, r3
 8003088:	3b11      	subs	r3, #17
 800308a:	2b0f      	cmp	r3, #15
 800308c:	f200 808b 	bhi.w	80031a6 <W25qxx_Init+0x166>
 8003090:	a201      	add	r2, pc, #4	; (adr r2, 8003098 <W25qxx_Init+0x58>)
 8003092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003096:	bf00      	nop
 8003098:	08003193 	.word	0x08003193
 800309c:	0800317f 	.word	0x0800317f
 80030a0:	0800316b 	.word	0x0800316b
 80030a4:	08003157 	.word	0x08003157
 80030a8:	08003143 	.word	0x08003143
 80030ac:	0800312f 	.word	0x0800312f
 80030b0:	0800311b 	.word	0x0800311b
 80030b4:	08003105 	.word	0x08003105
 80030b8:	080030ef 	.word	0x080030ef
 80030bc:	080031a7 	.word	0x080031a7
 80030c0:	080031a7 	.word	0x080031a7
 80030c4:	080031a7 	.word	0x080031a7
 80030c8:	080031a7 	.word	0x080031a7
 80030cc:	080031a7 	.word	0x080031a7
 80030d0:	080031a7 	.word	0x080031a7
 80030d4:	080030d9 	.word	0x080030d9
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 80030d8:	4b6b      	ldr	r3, [pc, #428]	; (8003288 <W25qxx_Init+0x248>)
 80030da:	220a      	movs	r2, #10
 80030dc:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 80030de:	4b6a      	ldr	r3, [pc, #424]	; (8003288 <W25qxx_Init+0x248>)
 80030e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030e4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
 80030e6:	486c      	ldr	r0, [pc, #432]	; (8003298 <W25qxx_Init+0x258>)
 80030e8:	f010 fc92 	bl	8013a10 <puts>
#endif
		break;
 80030ec:	e064      	b.n	80031b8 <W25qxx_Init+0x178>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 80030ee:	4b66      	ldr	r3, [pc, #408]	; (8003288 <W25qxx_Init+0x248>)
 80030f0:	2209      	movs	r2, #9
 80030f2:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 80030f4:	4b64      	ldr	r3, [pc, #400]	; (8003288 <W25qxx_Init+0x248>)
 80030f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030fa:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
 80030fc:	4867      	ldr	r0, [pc, #412]	; (800329c <W25qxx_Init+0x25c>)
 80030fe:	f010 fc87 	bl	8013a10 <puts>
#endif
		break;
 8003102:	e059      	b.n	80031b8 <W25qxx_Init+0x178>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8003104:	4b60      	ldr	r3, [pc, #384]	; (8003288 <W25qxx_Init+0x248>)
 8003106:	2208      	movs	r2, #8
 8003108:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 800310a:	4b5f      	ldr	r3, [pc, #380]	; (8003288 <W25qxx_Init+0x248>)
 800310c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003110:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
 8003112:	4863      	ldr	r0, [pc, #396]	; (80032a0 <W25qxx_Init+0x260>)
 8003114:	f010 fc7c 	bl	8013a10 <puts>
#endif
		break;
 8003118:	e04e      	b.n	80031b8 <W25qxx_Init+0x178>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 800311a:	4b5b      	ldr	r3, [pc, #364]	; (8003288 <W25qxx_Init+0x248>)
 800311c:	2207      	movs	r2, #7
 800311e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8003120:	4b59      	ldr	r3, [pc, #356]	; (8003288 <W25qxx_Init+0x248>)
 8003122:	2280      	movs	r2, #128	; 0x80
 8003124:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
 8003126:	485f      	ldr	r0, [pc, #380]	; (80032a4 <W25qxx_Init+0x264>)
 8003128:	f010 fc72 	bl	8013a10 <puts>
#endif
		break;
 800312c:	e044      	b.n	80031b8 <W25qxx_Init+0x178>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 800312e:	4b56      	ldr	r3, [pc, #344]	; (8003288 <W25qxx_Init+0x248>)
 8003130:	2206      	movs	r2, #6
 8003132:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8003134:	4b54      	ldr	r3, [pc, #336]	; (8003288 <W25qxx_Init+0x248>)
 8003136:	2240      	movs	r2, #64	; 0x40
 8003138:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
 800313a:	485b      	ldr	r0, [pc, #364]	; (80032a8 <W25qxx_Init+0x268>)
 800313c:	f010 fc68 	bl	8013a10 <puts>
#endif
		break;
 8003140:	e03a      	b.n	80031b8 <W25qxx_Init+0x178>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8003142:	4b51      	ldr	r3, [pc, #324]	; (8003288 <W25qxx_Init+0x248>)
 8003144:	2205      	movs	r2, #5
 8003146:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8003148:	4b4f      	ldr	r3, [pc, #316]	; (8003288 <W25qxx_Init+0x248>)
 800314a:	2220      	movs	r2, #32
 800314c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
 800314e:	4857      	ldr	r0, [pc, #348]	; (80032ac <W25qxx_Init+0x26c>)
 8003150:	f010 fc5e 	bl	8013a10 <puts>
#endif
		break;
 8003154:	e030      	b.n	80031b8 <W25qxx_Init+0x178>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8003156:	4b4c      	ldr	r3, [pc, #304]	; (8003288 <W25qxx_Init+0x248>)
 8003158:	2204      	movs	r2, #4
 800315a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 800315c:	4b4a      	ldr	r3, [pc, #296]	; (8003288 <W25qxx_Init+0x248>)
 800315e:	2210      	movs	r2, #16
 8003160:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
 8003162:	4853      	ldr	r0, [pc, #332]	; (80032b0 <W25qxx_Init+0x270>)
 8003164:	f010 fc54 	bl	8013a10 <puts>
#endif
		break;
 8003168:	e026      	b.n	80031b8 <W25qxx_Init+0x178>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 800316a:	4b47      	ldr	r3, [pc, #284]	; (8003288 <W25qxx_Init+0x248>)
 800316c:	2203      	movs	r2, #3
 800316e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8003170:	4b45      	ldr	r3, [pc, #276]	; (8003288 <W25qxx_Init+0x248>)
 8003172:	2208      	movs	r2, #8
 8003174:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
 8003176:	484f      	ldr	r0, [pc, #316]	; (80032b4 <W25qxx_Init+0x274>)
 8003178:	f010 fc4a 	bl	8013a10 <puts>
#endif
		break;
 800317c:	e01c      	b.n	80031b8 <W25qxx_Init+0x178>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 800317e:	4b42      	ldr	r3, [pc, #264]	; (8003288 <W25qxx_Init+0x248>)
 8003180:	2202      	movs	r2, #2
 8003182:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8003184:	4b40      	ldr	r3, [pc, #256]	; (8003288 <W25qxx_Init+0x248>)
 8003186:	2204      	movs	r2, #4
 8003188:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
 800318a:	484b      	ldr	r0, [pc, #300]	; (80032b8 <W25qxx_Init+0x278>)
 800318c:	f010 fc40 	bl	8013a10 <puts>
#endif
		break;
 8003190:	e012      	b.n	80031b8 <W25qxx_Init+0x178>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8003192:	4b3d      	ldr	r3, [pc, #244]	; (8003288 <W25qxx_Init+0x248>)
 8003194:	2201      	movs	r2, #1
 8003196:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8003198:	4b3b      	ldr	r3, [pc, #236]	; (8003288 <W25qxx_Init+0x248>)
 800319a:	2202      	movs	r2, #2
 800319c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
 800319e:	4847      	ldr	r0, [pc, #284]	; (80032bc <W25qxx_Init+0x27c>)
 80031a0:	f010 fc36 	bl	8013a10 <puts>
#endif
		break;
 80031a4:	e008      	b.n	80031b8 <W25qxx_Init+0x178>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
 80031a6:	4846      	ldr	r0, [pc, #280]	; (80032c0 <W25qxx_Init+0x280>)
 80031a8:	f010 fc32 	bl	8013a10 <puts>
#endif
		w25qxx.Lock = 0;
 80031ac:	4b36      	ldr	r3, [pc, #216]	; (8003288 <W25qxx_Init+0x248>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 80031b4:	2300      	movs	r3, #0
 80031b6:	e063      	b.n	8003280 <W25qxx_Init+0x240>
	}
	w25qxx.PageSize = 256;
 80031b8:	4b33      	ldr	r3, [pc, #204]	; (8003288 <W25qxx_Init+0x248>)
 80031ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031be:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 80031c0:	4b31      	ldr	r3, [pc, #196]	; (8003288 <W25qxx_Init+0x248>)
 80031c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80031c6:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 80031c8:	4b2f      	ldr	r3, [pc, #188]	; (8003288 <W25qxx_Init+0x248>)
 80031ca:	69db      	ldr	r3, [r3, #28]
 80031cc:	011b      	lsls	r3, r3, #4
 80031ce:	4a2e      	ldr	r2, [pc, #184]	; (8003288 <W25qxx_Init+0x248>)
 80031d0:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 80031d2:	4b2d      	ldr	r3, [pc, #180]	; (8003288 <W25qxx_Init+0x248>)
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	4a2c      	ldr	r2, [pc, #176]	; (8003288 <W25qxx_Init+0x248>)
 80031d8:	6912      	ldr	r2, [r2, #16]
 80031da:	fb02 f303 	mul.w	r3, r2, r3
 80031de:	4a2a      	ldr	r2, [pc, #168]	; (8003288 <W25qxx_Init+0x248>)
 80031e0:	8952      	ldrh	r2, [r2, #10]
 80031e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80031e6:	4a28      	ldr	r2, [pc, #160]	; (8003288 <W25qxx_Init+0x248>)
 80031e8:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 80031ea:	4b27      	ldr	r3, [pc, #156]	; (8003288 <W25qxx_Init+0x248>)
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	011b      	lsls	r3, r3, #4
 80031f0:	4a25      	ldr	r2, [pc, #148]	; (8003288 <W25qxx_Init+0x248>)
 80031f2:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 80031f4:	4b24      	ldr	r3, [pc, #144]	; (8003288 <W25qxx_Init+0x248>)
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	4a23      	ldr	r2, [pc, #140]	; (8003288 <W25qxx_Init+0x248>)
 80031fa:	6912      	ldr	r2, [r2, #16]
 80031fc:	fb02 f303 	mul.w	r3, r2, r3
 8003200:	0a9b      	lsrs	r3, r3, #10
 8003202:	4a21      	ldr	r2, [pc, #132]	; (8003288 <W25qxx_Init+0x248>)
 8003204:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8003206:	f7ff fe5f 	bl	8002ec8 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 800320a:	2001      	movs	r0, #1
 800320c:	f7ff fea8 	bl	8002f60 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8003210:	2002      	movs	r0, #2
 8003212:	f7ff fea5 	bl	8002f60 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8003216:	2003      	movs	r0, #3
 8003218:	f7ff fea2 	bl	8002f60 <W25qxx_ReadStatusRegister>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Page Size: %d Bytes\r\n", w25qxx.PageSize);
 800321c:	4b1a      	ldr	r3, [pc, #104]	; (8003288 <W25qxx_Init+0x248>)
 800321e:	895b      	ldrh	r3, [r3, #10]
 8003220:	4619      	mov	r1, r3
 8003222:	4828      	ldr	r0, [pc, #160]	; (80032c4 <W25qxx_Init+0x284>)
 8003224:	f010 fb6e 	bl	8013904 <iprintf>
	printf("w25qxx Page Count: %d\r\n", w25qxx.PageCount);
 8003228:	4b17      	ldr	r3, [pc, #92]	; (8003288 <W25qxx_Init+0x248>)
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	4619      	mov	r1, r3
 800322e:	4826      	ldr	r0, [pc, #152]	; (80032c8 <W25qxx_Init+0x288>)
 8003230:	f010 fb68 	bl	8013904 <iprintf>
	printf("w25qxx Sector Size: %d Bytes\r\n", w25qxx.SectorSize);
 8003234:	4b14      	ldr	r3, [pc, #80]	; (8003288 <W25qxx_Init+0x248>)
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	4619      	mov	r1, r3
 800323a:	4824      	ldr	r0, [pc, #144]	; (80032cc <W25qxx_Init+0x28c>)
 800323c:	f010 fb62 	bl	8013904 <iprintf>
	printf("w25qxx Sector Count: %d\r\n", w25qxx.SectorCount);
 8003240:	4b11      	ldr	r3, [pc, #68]	; (8003288 <W25qxx_Init+0x248>)
 8003242:	695b      	ldr	r3, [r3, #20]
 8003244:	4619      	mov	r1, r3
 8003246:	4822      	ldr	r0, [pc, #136]	; (80032d0 <W25qxx_Init+0x290>)
 8003248:	f010 fb5c 	bl	8013904 <iprintf>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
 800324c:	4b0e      	ldr	r3, [pc, #56]	; (8003288 <W25qxx_Init+0x248>)
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	4619      	mov	r1, r3
 8003252:	4820      	ldr	r0, [pc, #128]	; (80032d4 <W25qxx_Init+0x294>)
 8003254:	f010 fb56 	bl	8013904 <iprintf>
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
 8003258:	4b0b      	ldr	r3, [pc, #44]	; (8003288 <W25qxx_Init+0x248>)
 800325a:	69db      	ldr	r3, [r3, #28]
 800325c:	4619      	mov	r1, r3
 800325e:	481e      	ldr	r0, [pc, #120]	; (80032d8 <W25qxx_Init+0x298>)
 8003260:	f010 fb50 	bl	8013904 <iprintf>
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
 8003264:	4b08      	ldr	r3, [pc, #32]	; (8003288 <W25qxx_Init+0x248>)
 8003266:	6a1b      	ldr	r3, [r3, #32]
 8003268:	4619      	mov	r1, r3
 800326a:	481c      	ldr	r0, [pc, #112]	; (80032dc <W25qxx_Init+0x29c>)
 800326c:	f010 fb4a 	bl	8013904 <iprintf>
	printf("w25qxx Init Done\r\n");
 8003270:	481b      	ldr	r0, [pc, #108]	; (80032e0 <W25qxx_Init+0x2a0>)
 8003272:	f010 fbcd 	bl	8013a10 <puts>
#endif
	w25qxx.Lock = 0;
 8003276:	4b04      	ldr	r3, [pc, #16]	; (8003288 <W25qxx_Init+0x248>)
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 800327e:	2301      	movs	r3, #1
}
 8003280:	4618      	mov	r0, r3
 8003282:	3708      	adds	r7, #8
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	20005f50 	.word	0x20005f50
 800328c:	40020c00 	.word	0x40020c00
 8003290:	08017604 	.word	0x08017604
 8003294:	0801761c 	.word	0x0801761c
 8003298:	08017630 	.word	0x08017630
 800329c:	08017648 	.word	0x08017648
 80032a0:	08017660 	.word	0x08017660
 80032a4:	08017678 	.word	0x08017678
 80032a8:	08017690 	.word	0x08017690
 80032ac:	080176a8 	.word	0x080176a8
 80032b0:	080176c0 	.word	0x080176c0
 80032b4:	080176d8 	.word	0x080176d8
 80032b8:	080176f0 	.word	0x080176f0
 80032bc:	08017708 	.word	0x08017708
 80032c0:	08017720 	.word	0x08017720
 80032c4:	08017734 	.word	0x08017734
 80032c8:	08017754 	.word	0x08017754
 80032cc:	0801776c 	.word	0x0801776c
 80032d0:	0801778c 	.word	0x0801778c
 80032d4:	080177a8 	.word	0x080177a8
 80032d8:	080177c8 	.word	0x080177c8
 80032dc:	080177e4 	.word	0x080177e4
 80032e0:	08017804 	.word	0x08017804

080032e4 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 80032ec:	e002      	b.n	80032f4 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 80032ee:	2001      	movs	r0, #1
 80032f0:	f00d f808 	bl	8010304 <osDelay>
	while (w25qxx.Lock == 1)
 80032f4:	4b2d      	ldr	r3, [pc, #180]	; (80033ac <W25qxx_EraseSector+0xc8>)
 80032f6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d0f7      	beq.n	80032ee <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 80032fe:	4b2b      	ldr	r3, [pc, #172]	; (80033ac <W25qxx_EraseSector+0xc8>)
 8003300:	2201      	movs	r2, #1
 8003302:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
 8003306:	f001 ffaf 	bl	8005268 <HAL_GetTick>
 800330a:	60f8      	str	r0, [r7, #12]
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
 800330c:	6879      	ldr	r1, [r7, #4]
 800330e:	4828      	ldr	r0, [pc, #160]	; (80033b0 <W25qxx_EraseSector+0xcc>)
 8003310:	f010 faf8 	bl	8013904 <iprintf>
#endif
	W25qxx_WaitForWriteEnd();
 8003314:	f7ff fe6a 	bl	8002fec <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8003318:	4b24      	ldr	r3, [pc, #144]	; (80033ac <W25qxx_EraseSector+0xc8>)
 800331a:	691a      	ldr	r2, [r3, #16]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	fb02 f303 	mul.w	r3, r2, r3
 8003322:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8003324:	f7ff fe06 	bl	8002f34 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003328:	2200      	movs	r2, #0
 800332a:	2140      	movs	r1, #64	; 0x40
 800332c:	4821      	ldr	r0, [pc, #132]	; (80033b4 <W25qxx_EraseSector+0xd0>)
 800332e:	f002 fccb 	bl	8005cc8 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8003332:	4b1e      	ldr	r3, [pc, #120]	; (80033ac <W25qxx_EraseSector+0xc8>)
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	2b08      	cmp	r3, #8
 8003338:	d909      	bls.n	800334e <W25qxx_EraseSector+0x6a>
	{
		W25qxx_Spi(0x21);
 800333a:	2021      	movs	r0, #33	; 0x21
 800333c:	f7ff fd78 	bl	8002e30 <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	0e1b      	lsrs	r3, r3, #24
 8003344:	b2db      	uxtb	r3, r3
 8003346:	4618      	mov	r0, r3
 8003348:	f7ff fd72 	bl	8002e30 <W25qxx_Spi>
 800334c:	e002      	b.n	8003354 <W25qxx_EraseSector+0x70>
	}
	else
	{
		W25qxx_Spi(0x20);
 800334e:	2020      	movs	r0, #32
 8003350:	f7ff fd6e 	bl	8002e30 <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	0c1b      	lsrs	r3, r3, #16
 8003358:	b2db      	uxtb	r3, r3
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff fd68 	bl	8002e30 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	0a1b      	lsrs	r3, r3, #8
 8003364:	b2db      	uxtb	r3, r3
 8003366:	4618      	mov	r0, r3
 8003368:	f7ff fd62 	bl	8002e30 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	b2db      	uxtb	r3, r3
 8003370:	4618      	mov	r0, r3
 8003372:	f7ff fd5d 	bl	8002e30 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003376:	2201      	movs	r2, #1
 8003378:	2140      	movs	r1, #64	; 0x40
 800337a:	480e      	ldr	r0, [pc, #56]	; (80033b4 <W25qxx_EraseSector+0xd0>)
 800337c:	f002 fca4 	bl	8005cc8 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8003380:	f7ff fe34 	bl	8002fec <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
 8003384:	f001 ff70 	bl	8005268 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	4619      	mov	r1, r3
 8003390:	4809      	ldr	r0, [pc, #36]	; (80033b8 <W25qxx_EraseSector+0xd4>)
 8003392:	f010 fab7 	bl	8013904 <iprintf>
#endif
	W25qxx_Delay(1);
 8003396:	2001      	movs	r0, #1
 8003398:	f00c ffb4 	bl	8010304 <osDelay>
	w25qxx.Lock = 0;
 800339c:	4b03      	ldr	r3, [pc, #12]	; (80033ac <W25qxx_EraseSector+0xc8>)
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80033a4:	bf00      	nop
 80033a6:	3710      	adds	r7, #16
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	20005f50 	.word	0x20005f50
 80033b0:	0801785c 	.word	0x0801785c
 80033b4:	40020c00 	.word	0x40020c00
 80033b8:	08017880 	.word	0x08017880

080033bc <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 80033c4:	4b07      	ldr	r3, [pc, #28]	; (80033e4 <W25qxx_SectorToPage+0x28>)
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	fb02 f303 	mul.w	r3, r2, r3
 80033ce:	4a05      	ldr	r2, [pc, #20]	; (80033e4 <W25qxx_SectorToPage+0x28>)
 80033d0:	8952      	ldrh	r2, [r2, #10]
 80033d2:	fbb3 f3f2 	udiv	r3, r3, r2
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	20005f50 	.word	0x20005f50

080033e8 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
 80033f4:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 80033f6:	e002      	b.n	80033fe <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 80033f8:	2001      	movs	r0, #1
 80033fa:	f00c ff83 	bl	8010304 <osDelay>
	while (w25qxx.Lock == 1)
 80033fe:	4b57      	ldr	r3, [pc, #348]	; (800355c <W25qxx_WritePage+0x174>)
 8003400:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003404:	2b01      	cmp	r3, #1
 8003406:	d0f7      	beq.n	80033f8 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8003408:	4b54      	ldr	r3, [pc, #336]	; (800355c <W25qxx_WritePage+0x174>)
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4413      	add	r3, r2
 8003416:	4a51      	ldr	r2, [pc, #324]	; (800355c <W25qxx_WritePage+0x174>)
 8003418:	8952      	ldrh	r2, [r2, #10]
 800341a:	4293      	cmp	r3, r2
 800341c:	d802      	bhi.n	8003424 <W25qxx_WritePage+0x3c>
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d105      	bne.n	8003430 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8003424:	4b4d      	ldr	r3, [pc, #308]	; (800355c <W25qxx_WritePage+0x174>)
 8003426:	895b      	ldrh	r3, [r3, #10]
 8003428:	461a      	mov	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	4413      	add	r3, r2
 8003436:	4a49      	ldr	r2, [pc, #292]	; (800355c <W25qxx_WritePage+0x174>)
 8003438:	8952      	ldrh	r2, [r2, #10]
 800343a:	4293      	cmp	r3, r2
 800343c:	d905      	bls.n	800344a <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800343e:	4b47      	ldr	r3, [pc, #284]	; (800355c <W25qxx_WritePage+0x174>)
 8003440:	895b      	ldrh	r3, [r3, #10]
 8003442:	461a      	mov	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	68b9      	ldr	r1, [r7, #8]
 8003450:	4843      	ldr	r0, [pc, #268]	; (8003560 <W25qxx_WritePage+0x178>)
 8003452:	f010 fa57 	bl	8013904 <iprintf>
	W25qxx_Delay(100);
 8003456:	2064      	movs	r0, #100	; 0x64
 8003458:	f00c ff54 	bl	8010304 <osDelay>
	uint32_t StartTime = HAL_GetTick();
 800345c:	f001 ff04 	bl	8005268 <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]
#endif
	W25qxx_WaitForWriteEnd();
 8003462:	f7ff fdc3 	bl	8002fec <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 8003466:	f7ff fd65 	bl	8002f34 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800346a:	2200      	movs	r2, #0
 800346c:	2140      	movs	r1, #64	; 0x40
 800346e:	483d      	ldr	r0, [pc, #244]	; (8003564 <W25qxx_WritePage+0x17c>)
 8003470:	f002 fc2a 	bl	8005cc8 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8003474:	4b39      	ldr	r3, [pc, #228]	; (800355c <W25qxx_WritePage+0x174>)
 8003476:	895b      	ldrh	r3, [r3, #10]
 8003478:	461a      	mov	r2, r3
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	fb03 f302 	mul.w	r3, r3, r2
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	4413      	add	r3, r2
 8003484:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 8003486:	4b35      	ldr	r3, [pc, #212]	; (800355c <W25qxx_WritePage+0x174>)
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	2b08      	cmp	r3, #8
 800348c:	d909      	bls.n	80034a2 <W25qxx_WritePage+0xba>
	{
		W25qxx_Spi(0x12);
 800348e:	2012      	movs	r0, #18
 8003490:	f7ff fcce 	bl	8002e30 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	0e1b      	lsrs	r3, r3, #24
 8003498:	b2db      	uxtb	r3, r3
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff fcc8 	bl	8002e30 <W25qxx_Spi>
 80034a0:	e002      	b.n	80034a8 <W25qxx_WritePage+0xc0>
	}
	else
	{
		W25qxx_Spi(0x02);
 80034a2:	2002      	movs	r0, #2
 80034a4:	f7ff fcc4 	bl	8002e30 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	0c1b      	lsrs	r3, r3, #16
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7ff fcbe 	bl	8002e30 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	0a1b      	lsrs	r3, r3, #8
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7ff fcb8 	bl	8002e30 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7ff fcb3 	bl	8002e30 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	2364      	movs	r3, #100	; 0x64
 80034d0:	68f9      	ldr	r1, [r7, #12]
 80034d2:	4825      	ldr	r0, [pc, #148]	; (8003568 <W25qxx_WritePage+0x180>)
 80034d4:	f006 f825 	bl	8009522 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80034d8:	2201      	movs	r2, #1
 80034da:	2140      	movs	r1, #64	; 0x40
 80034dc:	4821      	ldr	r0, [pc, #132]	; (8003564 <W25qxx_WritePage+0x17c>)
 80034de:	f002 fbf3 	bl	8005cc8 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 80034e2:	f7ff fd83 	bl	8002fec <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 80034e6:	f001 febf 	bl	8005268 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 80034f2:	2300      	movs	r3, #0
 80034f4:	617b      	str	r3, [r7, #20]
 80034f6:	e018      	b.n	800352a <W25qxx_WritePage+0x142>
	{
		if ((i % 8 == 0) && (i > 2))
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	f003 0307 	and.w	r3, r3, #7
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d108      	bne.n	8003514 <W25qxx_WritePage+0x12c>
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	2b02      	cmp	r3, #2
 8003506:	d905      	bls.n	8003514 <W25qxx_WritePage+0x12c>
		{
			printf("\r\n");
 8003508:	4818      	ldr	r0, [pc, #96]	; (800356c <W25qxx_WritePage+0x184>)
 800350a:	f010 fa81 	bl	8013a10 <puts>
			W25qxx_Delay(10);
 800350e:	200a      	movs	r0, #10
 8003510:	f00c fef8 	bl	8010304 <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	4413      	add	r3, r2
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	4619      	mov	r1, r3
 800351e:	4814      	ldr	r0, [pc, #80]	; (8003570 <W25qxx_WritePage+0x188>)
 8003520:	f010 f9f0 	bl	8013904 <iprintf>
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	3301      	adds	r3, #1
 8003528:	617b      	str	r3, [r7, #20]
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	429a      	cmp	r2, r3
 8003530:	d3e2      	bcc.n	80034f8 <W25qxx_WritePage+0x110>
	}
	printf("\r\n");
 8003532:	480e      	ldr	r0, [pc, #56]	; (800356c <W25qxx_WritePage+0x184>)
 8003534:	f010 fa6c 	bl	8013a10 <puts>
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
 8003538:	6939      	ldr	r1, [r7, #16]
 800353a:	480e      	ldr	r0, [pc, #56]	; (8003574 <W25qxx_WritePage+0x18c>)
 800353c:	f010 f9e2 	bl	8013904 <iprintf>
	W25qxx_Delay(100);
 8003540:	2064      	movs	r0, #100	; 0x64
 8003542:	f00c fedf 	bl	8010304 <osDelay>
#endif
	W25qxx_Delay(1);
 8003546:	2001      	movs	r0, #1
 8003548:	f00c fedc 	bl	8010304 <osDelay>
	w25qxx.Lock = 0;
 800354c:	4b03      	ldr	r3, [pc, #12]	; (800355c <W25qxx_WritePage+0x174>)
 800354e:	2200      	movs	r2, #0
 8003550:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8003554:	bf00      	nop
 8003556:	3718      	adds	r7, #24
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	20005f50 	.word	0x20005f50
 8003560:	08017ae4 	.word	0x08017ae4
 8003564:	40020c00 	.word	0x40020c00
 8003568:	200050f8 	.word	0x200050f8
 800356c:	08017b20 	.word	0x08017b20
 8003570:	08017b24 	.word	0x08017b24
 8003574:	08017b2c 	.word	0x08017b2c

08003578 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b088      	sub	sp, #32
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
 8003584:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 8003586:	4b36      	ldr	r3, [pc, #216]	; (8003660 <W25qxx_WriteSector+0xe8>)
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	429a      	cmp	r2, r3
 800358e:	d802      	bhi.n	8003596 <W25qxx_WriteSector+0x1e>
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d102      	bne.n	800359c <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8003596:	4b32      	ldr	r3, [pc, #200]	; (8003660 <W25qxx_WriteSector+0xe8>)
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	68b9      	ldr	r1, [r7, #8]
 80035a2:	4830      	ldr	r0, [pc, #192]	; (8003664 <W25qxx_WriteSector+0xec>)
 80035a4:	f010 f9ae 	bl	8013904 <iprintf>
	W25qxx_Delay(100);
 80035a8:	2064      	movs	r0, #100	; 0x64
 80035aa:	f00c feab 	bl	8010304 <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 80035ae:	4b2c      	ldr	r3, [pc, #176]	; (8003660 <W25qxx_WriteSector+0xe8>)
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d306      	bcc.n	80035c6 <W25qxx_WriteSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx WriteSector Faild!\r\n");
 80035b8:	482b      	ldr	r0, [pc, #172]	; (8003668 <W25qxx_WriteSector+0xf0>)
 80035ba:	f010 fa29 	bl	8013a10 <puts>
		W25qxx_Delay(100);
 80035be:	2064      	movs	r0, #100	; 0x64
 80035c0:	f00c fea0 	bl	8010304 <osDelay>
#endif
		return;
 80035c4:	e048      	b.n	8003658 <W25qxx_WriteSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	441a      	add	r2, r3
 80035cc:	4b24      	ldr	r3, [pc, #144]	; (8003660 <W25qxx_WriteSector+0xe8>)
 80035ce:	691b      	ldr	r3, [r3, #16]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d905      	bls.n	80035e0 <W25qxx_WriteSector+0x68>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 80035d4:	4b22      	ldr	r3, [pc, #136]	; (8003660 <W25qxx_WriteSector+0xe8>)
 80035d6:	691a      	ldr	r2, [r3, #16]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	61bb      	str	r3, [r7, #24]
 80035de:	e001      	b.n	80035e4 <W25qxx_WriteSector+0x6c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 80035e4:	68b8      	ldr	r0, [r7, #8]
 80035e6:	f7ff fee9 	bl	80033bc <W25qxx_SectorToPage>
 80035ea:	4602      	mov	r2, r0
 80035ec:	4b1c      	ldr	r3, [pc, #112]	; (8003660 <W25qxx_WriteSector+0xe8>)
 80035ee:	895b      	ldrh	r3, [r3, #10]
 80035f0:	4619      	mov	r1, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	fbb3 f3f1 	udiv	r3, r3, r1
 80035f8:	4413      	add	r3, r2
 80035fa:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 80035fc:	4b18      	ldr	r3, [pc, #96]	; (8003660 <W25qxx_WriteSector+0xe8>)
 80035fe:	895b      	ldrh	r3, [r3, #10]
 8003600:	461a      	mov	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	fbb3 f1f2 	udiv	r1, r3, r2
 8003608:	fb02 f201 	mul.w	r2, r2, r1
 800360c:	1a9b      	subs	r3, r3, r2
 800360e:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	69f9      	ldr	r1, [r7, #28]
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f7ff fee6 	bl	80033e8 <W25qxx_WritePage>
		StartPage++;
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	3301      	adds	r3, #1
 8003620:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 8003622:	4b0f      	ldr	r3, [pc, #60]	; (8003660 <W25qxx_WriteSector+0xe8>)
 8003624:	895b      	ldrh	r3, [r3, #10]
 8003626:	461a      	mov	r2, r3
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	1a9a      	subs	r2, r3, r2
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	4413      	add	r3, r2
 8003630:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8003632:	4b0b      	ldr	r3, [pc, #44]	; (8003660 <W25qxx_WriteSector+0xe8>)
 8003634:	895b      	ldrh	r3, [r3, #10]
 8003636:	461a      	mov	r2, r3
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	4413      	add	r3, r2
 8003640:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8003642:	2300      	movs	r3, #0
 8003644:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	2b00      	cmp	r3, #0
 800364a:	dce1      	bgt.n	8003610 <W25qxx_WriteSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
 800364c:	4807      	ldr	r0, [pc, #28]	; (800366c <W25qxx_WriteSector+0xf4>)
 800364e:	f010 f9df 	bl	8013a10 <puts>
	W25qxx_Delay(100);
 8003652:	2064      	movs	r0, #100	; 0x64
 8003654:	f00c fe56 	bl	8010304 <osDelay>
#endif
}
 8003658:	3720      	adds	r7, #32
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	20005f50 	.word	0x20005f50
 8003664:	08017b50 	.word	0x08017b50
 8003668:	08017b90 	.word	0x08017b90
 800366c:	08017bb0 	.word	0x08017bb0

08003670 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
 800367c:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 800367e:	e002      	b.n	8003686 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8003680:	2001      	movs	r0, #1
 8003682:	f00c fe3f 	bl	8010304 <osDelay>
	while (w25qxx.Lock == 1)
 8003686:	4b54      	ldr	r3, [pc, #336]	; (80037d8 <W25qxx_ReadPage+0x168>)
 8003688:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800368c:	2b01      	cmp	r3, #1
 800368e:	d0f7      	beq.n	8003680 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8003690:	4b51      	ldr	r3, [pc, #324]	; (80037d8 <W25qxx_ReadPage+0x168>)
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8003698:	4b4f      	ldr	r3, [pc, #316]	; (80037d8 <W25qxx_ReadPage+0x168>)
 800369a:	895b      	ldrh	r3, [r3, #10]
 800369c:	461a      	mov	r2, r3
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d802      	bhi.n	80036aa <W25qxx_ReadPage+0x3a>
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d102      	bne.n	80036b0 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 80036aa:	4b4b      	ldr	r3, [pc, #300]	; (80037d8 <W25qxx_ReadPage+0x168>)
 80036ac:	895b      	ldrh	r3, [r3, #10]
 80036ae:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	4413      	add	r3, r2
 80036b6:	4a48      	ldr	r2, [pc, #288]	; (80037d8 <W25qxx_ReadPage+0x168>)
 80036b8:	8952      	ldrh	r2, [r2, #10]
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d905      	bls.n	80036ca <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80036be:	4b46      	ldr	r3, [pc, #280]	; (80037d8 <W25qxx_ReadPage+0x168>)
 80036c0:	895b      	ldrh	r3, [r3, #10]
 80036c2:	461a      	mov	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	68b9      	ldr	r1, [r7, #8]
 80036d0:	4842      	ldr	r0, [pc, #264]	; (80037dc <W25qxx_ReadPage+0x16c>)
 80036d2:	f010 f917 	bl	8013904 <iprintf>
	W25qxx_Delay(100);
 80036d6:	2064      	movs	r0, #100	; 0x64
 80036d8:	f00c fe14 	bl	8010304 <osDelay>
	uint32_t StartTime = HAL_GetTick();
 80036dc:	f001 fdc4 	bl	8005268 <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 80036e2:	4b3d      	ldr	r3, [pc, #244]	; (80037d8 <W25qxx_ReadPage+0x168>)
 80036e4:	895b      	ldrh	r3, [r3, #10]
 80036e6:	461a      	mov	r2, r3
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	fb03 f302 	mul.w	r3, r3, r2
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	4413      	add	r3, r2
 80036f2:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80036f4:	2200      	movs	r2, #0
 80036f6:	2140      	movs	r1, #64	; 0x40
 80036f8:	4839      	ldr	r0, [pc, #228]	; (80037e0 <W25qxx_ReadPage+0x170>)
 80036fa:	f002 fae5 	bl	8005cc8 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 80036fe:	4b36      	ldr	r3, [pc, #216]	; (80037d8 <W25qxx_ReadPage+0x168>)
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	2b08      	cmp	r3, #8
 8003704:	d909      	bls.n	800371a <W25qxx_ReadPage+0xaa>
	{
		W25qxx_Spi(0x0C);
 8003706:	200c      	movs	r0, #12
 8003708:	f7ff fb92 	bl	8002e30 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	0e1b      	lsrs	r3, r3, #24
 8003710:	b2db      	uxtb	r3, r3
 8003712:	4618      	mov	r0, r3
 8003714:	f7ff fb8c 	bl	8002e30 <W25qxx_Spi>
 8003718:	e002      	b.n	8003720 <W25qxx_ReadPage+0xb0>
	}
	else
	{
		W25qxx_Spi(0x0B);
 800371a:	200b      	movs	r0, #11
 800371c:	f7ff fb88 	bl	8002e30 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	0c1b      	lsrs	r3, r3, #16
 8003724:	b2db      	uxtb	r3, r3
 8003726:	4618      	mov	r0, r3
 8003728:	f7ff fb82 	bl	8002e30 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	0a1b      	lsrs	r3, r3, #8
 8003730:	b2db      	uxtb	r3, r3
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff fb7c 	bl	8002e30 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	b2db      	uxtb	r3, r3
 800373c:	4618      	mov	r0, r3
 800373e:	f7ff fb77 	bl	8002e30 <W25qxx_Spi>
	W25qxx_Spi(0);
 8003742:	2000      	movs	r0, #0
 8003744:	f7ff fb74 	bl	8002e30 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	b29a      	uxth	r2, r3
 800374c:	2364      	movs	r3, #100	; 0x64
 800374e:	68f9      	ldr	r1, [r7, #12]
 8003750:	4824      	ldr	r0, [pc, #144]	; (80037e4 <W25qxx_ReadPage+0x174>)
 8003752:	f006 f822 	bl	800979a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003756:	2201      	movs	r2, #1
 8003758:	2140      	movs	r1, #64	; 0x40
 800375a:	4821      	ldr	r0, [pc, #132]	; (80037e0 <W25qxx_ReadPage+0x170>)
 800375c:	f002 fab4 	bl	8005cc8 <HAL_GPIO_WritePin>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 8003760:	f001 fd82 	bl	8005268 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 800376c:	2300      	movs	r3, #0
 800376e:	617b      	str	r3, [r7, #20]
 8003770:	e018      	b.n	80037a4 <W25qxx_ReadPage+0x134>
	{
		if ((i % 8 == 0) && (i > 2))
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	2b00      	cmp	r3, #0
 800377a:	d108      	bne.n	800378e <W25qxx_ReadPage+0x11e>
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	2b02      	cmp	r3, #2
 8003780:	d905      	bls.n	800378e <W25qxx_ReadPage+0x11e>
		{
			printf("\r\n");
 8003782:	4819      	ldr	r0, [pc, #100]	; (80037e8 <W25qxx_ReadPage+0x178>)
 8003784:	f010 f944 	bl	8013a10 <puts>
			W25qxx_Delay(10);
 8003788:	200a      	movs	r0, #10
 800378a:	f00c fdbb 	bl	8010304 <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	4413      	add	r3, r2
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	4619      	mov	r1, r3
 8003798:	4814      	ldr	r0, [pc, #80]	; (80037ec <W25qxx_ReadPage+0x17c>)
 800379a:	f010 f8b3 	bl	8013904 <iprintf>
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	3301      	adds	r3, #1
 80037a2:	617b      	str	r3, [r7, #20]
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d3e2      	bcc.n	8003772 <W25qxx_ReadPage+0x102>
	}
	printf("\r\n");
 80037ac:	480e      	ldr	r0, [pc, #56]	; (80037e8 <W25qxx_ReadPage+0x178>)
 80037ae:	f010 f92f 	bl	8013a10 <puts>
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
 80037b2:	6939      	ldr	r1, [r7, #16]
 80037b4:	480e      	ldr	r0, [pc, #56]	; (80037f0 <W25qxx_ReadPage+0x180>)
 80037b6:	f010 f8a5 	bl	8013904 <iprintf>
	W25qxx_Delay(100);
 80037ba:	2064      	movs	r0, #100	; 0x64
 80037bc:	f00c fda2 	bl	8010304 <osDelay>
#endif
	W25qxx_Delay(1);
 80037c0:	2001      	movs	r0, #1
 80037c2:	f00c fd9f 	bl	8010304 <osDelay>
	w25qxx.Lock = 0;
 80037c6:	4b04      	ldr	r3, [pc, #16]	; (80037d8 <W25qxx_ReadPage+0x168>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80037ce:	bf00      	nop
 80037d0:	3718      	adds	r7, #24
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	20005f50 	.word	0x20005f50
 80037dc:	08017cfc 	.word	0x08017cfc
 80037e0:	40020c00 	.word	0x40020c00
 80037e4:	200050f8 	.word	0x200050f8
 80037e8:	08017b20 	.word	0x08017b20
 80037ec:	08017b24 	.word	0x08017b24
 80037f0:	08017d38 	.word	0x08017d38

080037f4 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b088      	sub	sp, #32
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
 8003800:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 8003802:	4b36      	ldr	r3, [pc, #216]	; (80038dc <W25qxx_ReadSector+0xe8>)
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	429a      	cmp	r2, r3
 800380a:	d802      	bhi.n	8003812 <W25qxx_ReadSector+0x1e>
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d102      	bne.n	8003818 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 8003812:	4b32      	ldr	r3, [pc, #200]	; (80038dc <W25qxx_ReadSector+0xe8>)
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	68b9      	ldr	r1, [r7, #8]
 800381e:	4830      	ldr	r0, [pc, #192]	; (80038e0 <W25qxx_ReadSector+0xec>)
 8003820:	f010 f870 	bl	8013904 <iprintf>
	W25qxx_Delay(100);
 8003824:	2064      	movs	r0, #100	; 0x64
 8003826:	f00c fd6d 	bl	8010304 <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 800382a:	4b2c      	ldr	r3, [pc, #176]	; (80038dc <W25qxx_ReadSector+0xe8>)
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	429a      	cmp	r2, r3
 8003832:	d306      	bcc.n	8003842 <W25qxx_ReadSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx ReadSector Faild!\r\n");
 8003834:	482b      	ldr	r0, [pc, #172]	; (80038e4 <W25qxx_ReadSector+0xf0>)
 8003836:	f010 f8eb 	bl	8013a10 <puts>
		W25qxx_Delay(100);
 800383a:	2064      	movs	r0, #100	; 0x64
 800383c:	f00c fd62 	bl	8010304 <osDelay>
#endif
		return;
 8003840:	e048      	b.n	80038d4 <W25qxx_ReadSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	441a      	add	r2, r3
 8003848:	4b24      	ldr	r3, [pc, #144]	; (80038dc <W25qxx_ReadSector+0xe8>)
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	429a      	cmp	r2, r3
 800384e:	d905      	bls.n	800385c <W25qxx_ReadSector+0x68>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8003850:	4b22      	ldr	r3, [pc, #136]	; (80038dc <W25qxx_ReadSector+0xe8>)
 8003852:	691a      	ldr	r2, [r3, #16]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	61bb      	str	r3, [r7, #24]
 800385a:	e001      	b.n	8003860 <W25qxx_ReadSector+0x6c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8003860:	68b8      	ldr	r0, [r7, #8]
 8003862:	f7ff fdab 	bl	80033bc <W25qxx_SectorToPage>
 8003866:	4602      	mov	r2, r0
 8003868:	4b1c      	ldr	r3, [pc, #112]	; (80038dc <W25qxx_ReadSector+0xe8>)
 800386a:	895b      	ldrh	r3, [r3, #10]
 800386c:	4619      	mov	r1, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	fbb3 f3f1 	udiv	r3, r3, r1
 8003874:	4413      	add	r3, r2
 8003876:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8003878:	4b18      	ldr	r3, [pc, #96]	; (80038dc <W25qxx_ReadSector+0xe8>)
 800387a:	895b      	ldrh	r3, [r3, #10]
 800387c:	461a      	mov	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	fbb3 f1f2 	udiv	r1, r3, r2
 8003884:	fb02 f201 	mul.w	r2, r2, r1
 8003888:	1a9b      	subs	r3, r3, r2
 800388a:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	69f9      	ldr	r1, [r7, #28]
 8003892:	68f8      	ldr	r0, [r7, #12]
 8003894:	f7ff feec 	bl	8003670 <W25qxx_ReadPage>
		StartPage++;
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	3301      	adds	r3, #1
 800389c:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 800389e:	4b0f      	ldr	r3, [pc, #60]	; (80038dc <W25qxx_ReadSector+0xe8>)
 80038a0:	895b      	ldrh	r3, [r3, #10]
 80038a2:	461a      	mov	r2, r3
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	1a9a      	subs	r2, r3, r2
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	4413      	add	r3, r2
 80038ac:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 80038ae:	4b0b      	ldr	r3, [pc, #44]	; (80038dc <W25qxx_ReadSector+0xe8>)
 80038b0:	895b      	ldrh	r3, [r3, #10]
 80038b2:	461a      	mov	r2, r3
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	4413      	add	r3, r2
 80038bc:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 80038be:	2300      	movs	r3, #0
 80038c0:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	dce1      	bgt.n	800388c <W25qxx_ReadSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
 80038c8:	4807      	ldr	r0, [pc, #28]	; (80038e8 <W25qxx_ReadSector+0xf4>)
 80038ca:	f010 f8a1 	bl	8013a10 <puts>
	W25qxx_Delay(100);
 80038ce:	2064      	movs	r0, #100	; 0x64
 80038d0:	f00c fd18 	bl	8010304 <osDelay>
#endif
}
 80038d4:	3720      	adds	r7, #32
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	20005f50 	.word	0x20005f50
 80038e0:	08017d5c 	.word	0x08017d5c
 80038e4:	08017d9c 	.word	0x08017d9c
 80038e8:	08017dbc 	.word	0x08017dbc

080038ec <MRT_rtc_Init>:


//**************************************************//
//FUNCTIONS

void MRT_rtc_Init(void){
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0

	print("Setting RTC to previous time...");
 80038f0:	4814      	ldr	r0, [pc, #80]	; (8003944 <MRT_rtc_Init+0x58>)
 80038f2:	f7fd fba9 	bl	8001048 <print>
	MRT_set_rtc(prev_hours,prev_min,prev_sec);
 80038f6:	4b14      	ldr	r3, [pc, #80]	; (8003948 <MRT_rtc_Init+0x5c>)
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	4a14      	ldr	r2, [pc, #80]	; (800394c <MRT_rtc_Init+0x60>)
 80038fc:	7811      	ldrb	r1, [r2, #0]
 80038fe:	4a14      	ldr	r2, [pc, #80]	; (8003950 <MRT_rtc_Init+0x64>)
 8003900:	7812      	ldrb	r2, [r2, #0]
 8003902:	4618      	mov	r0, r3
 8003904:	f000 f8e8 	bl	8003ad8 <MRT_set_rtc>
	print("OK\r\n");
 8003908:	4812      	ldr	r0, [pc, #72]	; (8003954 <MRT_rtc_Init+0x68>)
 800390a:	f7fd fb9d 	bl	8001048 <print>

	#if ALARM_A_ACTIVE
		print("Setting alarmA...");
 800390e:	4812      	ldr	r0, [pc, #72]	; (8003958 <MRT_rtc_Init+0x6c>)
 8003910:	f7fd fb9a 	bl	8001048 <print>
		HAL_Delay(2000); //To make sure that when you set the Alarm it doesn't go off automatically
 8003914:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003918:	f001 fcb2 	bl	8005280 <HAL_Delay>
		if (wu_flag == 0){
 800391c:	4b0f      	ldr	r3, [pc, #60]	; (800395c <MRT_rtc_Init+0x70>)
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d105      	bne.n	8003930 <MRT_rtc_Init+0x44>
			MRT_set_alarmA(PRE_WHEN_SLEEP_TIME_HOURS, PRE_WHEN_SLEEP_TIME_MIN, PRE_WHEN_SLEEP_TIME_SEC);
 8003924:	2200      	movs	r2, #0
 8003926:	211e      	movs	r1, #30
 8003928:	2004      	movs	r0, #4
 800392a:	f000 f91b 	bl	8003b64 <MRT_set_alarmA>
 800392e:	e004      	b.n	800393a <MRT_rtc_Init+0x4e>
		}
		else{
			MRT_set_alarmA(POST_WHEN_SLEEP_TIME_HOURS, POST_WHEN_SLEEP_TIME_MIN, POST_WHEN_SLEEP_TIME_SEC);
 8003930:	2200      	movs	r2, #0
 8003932:	2100      	movs	r1, #0
 8003934:	200e      	movs	r0, #14
 8003936:	f000 f915 	bl	8003b64 <MRT_set_alarmA>
		}
		print("OK\r\n");
 800393a:	4806      	ldr	r0, [pc, #24]	; (8003954 <MRT_rtc_Init+0x68>)
 800393c:	f7fd fb84 	bl	8001048 <print>
	#endif
}
 8003940:	bf00      	nop
 8003942:	bd80      	pop	{r7, pc}
 8003944:	08017e50 	.word	0x08017e50
 8003948:	20000275 	.word	0x20000275
 800394c:	20000276 	.word	0x20000276
 8003950:	20000277 	.word	0x20000277
 8003954:	08017e70 	.word	0x08017e70
 8003958:	08017e78 	.word	0x08017e78
 800395c:	20000271 	.word	0x20000271

08003960 <MRT_check_for_wake_up>:


void MRT_check_for_wake_up(void){
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0

	//If WU flag set, wake up procedure
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8003964:	4b0e      	ldr	r3, [pc, #56]	; (80039a0 <MRT_check_for_wake_up+0x40>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b02      	cmp	r3, #2
 800396e:	d112      	bne.n	8003996 <MRT_check_for_wake_up+0x36>
	{

		wu_flag = 1;
 8003970:	4b0c      	ldr	r3, [pc, #48]	; (80039a4 <MRT_check_for_wake_up+0x44>)
 8003972:	2201      	movs	r2, #1
 8003974:	701a      	strb	r2, [r3, #0]

		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 8003976:	4b0a      	ldr	r3, [pc, #40]	; (80039a0 <MRT_check_for_wake_up+0x40>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a09      	ldr	r2, [pc, #36]	; (80039a0 <MRT_check_for_wake_up+0x40>)
 800397c:	f043 0308 	orr.w	r3, r3, #8
 8003980:	6013      	str	r3, [r2, #0]

		print("Wakeup from the STANDBY MODE\r\n");
 8003982:	4809      	ldr	r0, [pc, #36]	; (80039a8 <MRT_check_for_wake_up+0x48>)
 8003984:	f7fd fb60 	bl	8001048 <print>

		/** Disable the WWAKEUP PIN **/
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 8003988:	f44f 7080 	mov.w	r0, #256	; 0x100
 800398c:	f004 f9a0 	bl	8007cd0 <HAL_PWR_DisableWakeUpPin>

		/** Deactivate the RTC wakeup  **/
		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc); //TODO hrtc from rtc.h (should we pass it as an argument instead?)
 8003990:	4806      	ldr	r0, [pc, #24]	; (80039ac <MRT_check_for_wake_up+0x4c>)
 8003992:	f005 fcdb 	bl	800934c <HAL_RTCEx_DeactivateWakeUpTimer>
	}

	MRT_clear_alarms_flags();
 8003996:	f000 f80b 	bl	80039b0 <MRT_clear_alarms_flags>
}
 800399a:	bf00      	nop
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	40007000 	.word	0x40007000
 80039a4:	20000271 	.word	0x20000271
 80039a8:	08017e8c 	.word	0x08017e8c
 80039ac:	20005080 	.word	0x20005080

080039b0 <MRT_clear_alarms_flags>:



void MRT_clear_alarms_flags(void){
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
	//Must be after alarm A was activated and before going to sleep

	print("Clearing the flags\r\n");
 80039b4:	482a      	ldr	r0, [pc, #168]	; (8003a60 <MRT_clear_alarms_flags+0xb0>)
 80039b6:	f7fd fb47 	bl	8001048 <print>

	//Clear alarmA flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 80039ba:	4b2a      	ldr	r3, [pc, #168]	; (8003a64 <MRT_clear_alarms_flags+0xb4>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	22ca      	movs	r2, #202	; 0xca
 80039c0:	625a      	str	r2, [r3, #36]	; 0x24
 80039c2:	4b28      	ldr	r3, [pc, #160]	; (8003a64 <MRT_clear_alarms_flags+0xb4>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2253      	movs	r2, #83	; 0x53
 80039c8:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 80039ca:	e008      	b.n	80039de <MRT_clear_alarms_flags+0x2e>
		//print("Clearing alarm A flag\r\n");
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80039cc:	4b25      	ldr	r3, [pc, #148]	; (8003a64 <MRT_clear_alarms_flags+0xb4>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	b2da      	uxtb	r2, r3
 80039d4:	4b23      	ldr	r3, [pc, #140]	; (8003a64 <MRT_clear_alarms_flags+0xb4>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80039dc:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 80039de:	4b21      	ldr	r3, [pc, #132]	; (8003a64 <MRT_clear_alarms_flags+0xb4>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1ef      	bne.n	80039cc <MRT_clear_alarms_flags+0x1c>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 80039ec:	4b1d      	ldr	r3, [pc, #116]	; (8003a64 <MRT_clear_alarms_flags+0xb4>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	22ff      	movs	r2, #255	; 0xff
 80039f2:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80039f4:	4b1c      	ldr	r3, [pc, #112]	; (8003a68 <MRT_clear_alarms_flags+0xb8>)
 80039f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80039fa:	615a      	str	r2, [r3, #20]


  	//Clear alarmB flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 80039fc:	4b19      	ldr	r3, [pc, #100]	; (8003a64 <MRT_clear_alarms_flags+0xb4>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	22ca      	movs	r2, #202	; 0xca
 8003a02:	625a      	str	r2, [r3, #36]	; 0x24
 8003a04:	4b17      	ldr	r3, [pc, #92]	; (8003a64 <MRT_clear_alarms_flags+0xb4>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2253      	movs	r2, #83	; 0x53
 8003a0a:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 8003a0c:	e008      	b.n	8003a20 <MRT_clear_alarms_flags+0x70>
		//print("Clearing alarm B flag\r\n");
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRBF);
 8003a0e:	4b15      	ldr	r3, [pc, #84]	; (8003a64 <MRT_clear_alarms_flags+0xb4>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	b2da      	uxtb	r2, r3
 8003a16:	4b13      	ldr	r3, [pc, #76]	; (8003a64 <MRT_clear_alarms_flags+0xb4>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003a1e:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 8003a20:	4b10      	ldr	r3, [pc, #64]	; (8003a64 <MRT_clear_alarms_flags+0xb4>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1ef      	bne.n	8003a0e <MRT_clear_alarms_flags+0x5e>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8003a2e:	4b0d      	ldr	r3, [pc, #52]	; (8003a64 <MRT_clear_alarms_flags+0xb4>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	22ff      	movs	r2, #255	; 0xff
 8003a34:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003a36:	4b0c      	ldr	r3, [pc, #48]	; (8003a68 <MRT_clear_alarms_flags+0xb8>)
 8003a38:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a3c:	615a      	str	r2, [r3, #20]

	/* Clear the WU FLAG */
	//print("Clearing wake up flag\r\n");
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8003a3e:	4b0b      	ldr	r3, [pc, #44]	; (8003a6c <MRT_clear_alarms_flags+0xbc>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a0a      	ldr	r2, [pc, #40]	; (8003a6c <MRT_clear_alarms_flags+0xbc>)
 8003a44:	f043 0304 	orr.w	r3, r3, #4
 8003a48:	6013      	str	r3, [r2, #0]

	/* clear the RTC Wake UP (WU) flag */
	//print("Clearing RTC wake up flag\r\n");
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8003a4a:	4b06      	ldr	r3, [pc, #24]	; (8003a64 <MRT_clear_alarms_flags+0xb4>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	b2da      	uxtb	r2, r3
 8003a52:	4b04      	ldr	r3, [pc, #16]	; (8003a64 <MRT_clear_alarms_flags+0xb4>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003a5a:	60da      	str	r2, [r3, #12]
}
 8003a5c:	bf00      	nop
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	08017eac 	.word	0x08017eac
 8003a64:	20005080 	.word	0x20005080
 8003a68:	40013c00 	.word	0x40013c00
 8003a6c:	40007000 	.word	0x40007000

08003a70 <MRT_StandByMode>:

/*
 * This function is called to enter standby mode
 * @param seconds: time before it wakes up (max of 36 hours)
 */
void MRT_StandByMode(uint32_t seconds){
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b0a4      	sub	sp, #144	; 0x90
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
	print("\r\n/*****StandByMode*****/\r\n");
 8003a78:	4813      	ldr	r0, [pc, #76]	; (8003ac8 <MRT_StandByMode+0x58>)
 8003a7a:	f7fd fae5 	bl	8001048 <print>

	/* Enable the WAKEUP PIN
	 * (Needs to be placed BEFORE clearing up the flags or else it wakes up as soon as we enter standby mode)*/
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8003a7e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003a82:	f004 f913 	bl	8007cac <HAL_PWR_EnableWakeUpPin>

	/*Clear the flags so it doesn't wake up as soon as it goes to sleep*/
	MRT_clear_alarms_flags();
 8003a86:	f7ff ff93 	bl	80039b0 <MRT_clear_alarms_flags>

	//Setup RTC wake up timer
	println("Setting up RTCW");
 8003a8a:	4810      	ldr	r0, [pc, #64]	; (8003acc <MRT_StandByMode+0x5c>)
 8003a8c:	f7fd fabe 	bl	800100c <println>
	  Error_Handler();
	}
	*/

	char* msg[30+sizeof(uint32_t)];
	sprintf(msg,"Going to sleep for %i seconds",seconds);
 8003a90:	f107 0308 	add.w	r3, r7, #8
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	490e      	ldr	r1, [pc, #56]	; (8003ad0 <MRT_StandByMode+0x60>)
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f010 f81b 	bl	8013ad4 <siprintf>
	println(msg);
 8003a9e:	f107 0308 	add.w	r3, r7, #8
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7fd fab2 	bl	800100c <println>

	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc,seconds, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8003aa8:	2204      	movs	r2, #4
 8003aaa:	6879      	ldr	r1, [r7, #4]
 8003aac:	4809      	ldr	r0, [pc, #36]	; (8003ad4 <MRT_StandByMode+0x64>)
 8003aae:	f005 fb8d 	bl	80091cc <HAL_RTCEx_SetWakeUpTimer_IT>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <MRT_StandByMode+0x4c>
	{
	  Error_Handler();
 8003ab8:	f7fe f924 	bl	8001d04 <Error_Handler>
	}

	HAL_PWR_EnterSTANDBYMode();
 8003abc:	f004 f91c 	bl	8007cf8 <HAL_PWR_EnterSTANDBYMode>
}
 8003ac0:	bf00      	nop
 8003ac2:	3790      	adds	r7, #144	; 0x90
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	08017ec4 	.word	0x08017ec4
 8003acc:	08017ee0 	.word	0x08017ee0
 8003ad0:	08017ef0 	.word	0x08017ef0
 8003ad4:	20005080 	.word	0x20005080

08003ad8 <MRT_set_rtc>:




void MRT_set_rtc(uint8_t h, uint8_t m, uint8_t s){
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b088      	sub	sp, #32
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	4603      	mov	r3, r0
 8003ae0:	71fb      	strb	r3, [r7, #7]
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	71bb      	strb	r3, [r7, #6]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	717b      	strb	r3, [r7, #5]
	  /** Initialize RTC and set the Time and Date
	  */
	  RTC_TimeTypeDef sTime;

	  sTime.Hours = int_to_hex_table[h];
 8003aea:	79fb      	ldrb	r3, [r7, #7]
 8003aec:	4a1a      	ldr	r2, [pc, #104]	; (8003b58 <MRT_set_rtc+0x80>)
 8003aee:	5cd3      	ldrb	r3, [r2, r3]
 8003af0:	733b      	strb	r3, [r7, #12]
	  sTime.Minutes = int_to_hex_table[m];
 8003af2:	79bb      	ldrb	r3, [r7, #6]
 8003af4:	4a18      	ldr	r2, [pc, #96]	; (8003b58 <MRT_set_rtc+0x80>)
 8003af6:	5cd3      	ldrb	r3, [r2, r3]
 8003af8:	737b      	strb	r3, [r7, #13]
	  sTime.Seconds = int_to_hex_table[s];
 8003afa:	797b      	ldrb	r3, [r7, #5]
 8003afc:	4a16      	ldr	r2, [pc, #88]	; (8003b58 <MRT_set_rtc+0x80>)
 8003afe:	5cd3      	ldrb	r3, [r2, r3]
 8003b00:	73bb      	strb	r3, [r7, #14]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003b02:	2300      	movs	r3, #0
 8003b04:	61bb      	str	r3, [r7, #24]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003b06:	2300      	movs	r3, #0
 8003b08:	61fb      	str	r3, [r7, #28]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003b0a:	f107 030c 	add.w	r3, r7, #12
 8003b0e:	2201      	movs	r2, #1
 8003b10:	4619      	mov	r1, r3
 8003b12:	4812      	ldr	r0, [pc, #72]	; (8003b5c <MRT_set_rtc+0x84>)
 8003b14:	f004 fffb 	bl	8008b0e <HAL_RTC_SetTime>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <MRT_set_rtc+0x4a>
	  {
	    Error_Handler();
 8003b1e:	f7fe f8f1 	bl	8001d04 <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003b22:	4b0f      	ldr	r3, [pc, #60]	; (8003b60 <MRT_set_rtc+0x88>)
 8003b24:	2201      	movs	r2, #1
 8003b26:	701a      	strb	r2, [r3, #0]
	  sDate.Month = RTC_MONTH_JANUARY;
 8003b28:	4b0d      	ldr	r3, [pc, #52]	; (8003b60 <MRT_set_rtc+0x88>)
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	705a      	strb	r2, [r3, #1]
	  sDate.Date = 0x1;
 8003b2e:	4b0c      	ldr	r3, [pc, #48]	; (8003b60 <MRT_set_rtc+0x88>)
 8003b30:	2201      	movs	r2, #1
 8003b32:	709a      	strb	r2, [r3, #2]
	  sDate.Year = 0x0;
 8003b34:	4b0a      	ldr	r3, [pc, #40]	; (8003b60 <MRT_set_rtc+0x88>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	70da      	strb	r2, [r3, #3]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	4908      	ldr	r1, [pc, #32]	; (8003b60 <MRT_set_rtc+0x88>)
 8003b3e:	4807      	ldr	r0, [pc, #28]	; (8003b5c <MRT_set_rtc+0x84>)
 8003b40:	f005 f8a2 	bl	8008c88 <HAL_RTC_SetDate>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <MRT_set_rtc+0x76>
	  {
	    Error_Handler();
 8003b4a:	f7fe f8db 	bl	8001d04 <Error_Handler>
	  }
}
 8003b4e:	bf00      	nop
 8003b50:	3720      	adds	r7, #32
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	20000024 	.word	0x20000024
 8003b5c:	20005080 	.word	0x20005080
 8003b60:	20000394 	.word	0x20000394

08003b64 <MRT_set_alarmA>:



void MRT_set_alarmA(uint8_t h, uint8_t m, uint8_t s){
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	71fb      	strb	r3, [r7, #7]
 8003b6e:	460b      	mov	r3, r1
 8003b70:	71bb      	strb	r3, [r7, #6]
 8003b72:	4613      	mov	r3, r2
 8003b74:	717b      	strb	r3, [r7, #5]
	  /** Enable the Alarm A
	  */
	  sAlarm.AlarmTime.Hours = int_to_hex_table[h];
 8003b76:	79fb      	ldrb	r3, [r7, #7]
 8003b78:	4a1a      	ldr	r2, [pc, #104]	; (8003be4 <MRT_set_alarmA+0x80>)
 8003b7a:	5cd2      	ldrb	r2, [r2, r3]
 8003b7c:	4b1a      	ldr	r3, [pc, #104]	; (8003be8 <MRT_set_alarmA+0x84>)
 8003b7e:	701a      	strb	r2, [r3, #0]
	  sAlarm.AlarmTime.Minutes = int_to_hex_table[m];
 8003b80:	79bb      	ldrb	r3, [r7, #6]
 8003b82:	4a18      	ldr	r2, [pc, #96]	; (8003be4 <MRT_set_alarmA+0x80>)
 8003b84:	5cd2      	ldrb	r2, [r2, r3]
 8003b86:	4b18      	ldr	r3, [pc, #96]	; (8003be8 <MRT_set_alarmA+0x84>)
 8003b88:	705a      	strb	r2, [r3, #1]
	  sAlarm.AlarmTime.Seconds = int_to_hex_table[s];
 8003b8a:	797b      	ldrb	r3, [r7, #5]
 8003b8c:	4a15      	ldr	r2, [pc, #84]	; (8003be4 <MRT_set_alarmA+0x80>)
 8003b8e:	5cd2      	ldrb	r2, [r2, r3]
 8003b90:	4b15      	ldr	r3, [pc, #84]	; (8003be8 <MRT_set_alarmA+0x84>)
 8003b92:	709a      	strb	r2, [r3, #2]
	  sAlarm.AlarmTime.SubSeconds = 0x0;
 8003b94:	4b14      	ldr	r3, [pc, #80]	; (8003be8 <MRT_set_alarmA+0x84>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	605a      	str	r2, [r3, #4]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003b9a:	4b13      	ldr	r3, [pc, #76]	; (8003be8 <MRT_set_alarmA+0x84>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	60da      	str	r2, [r3, #12]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003ba0:	4b11      	ldr	r3, [pc, #68]	; (8003be8 <MRT_set_alarmA+0x84>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	611a      	str	r2, [r3, #16]
	  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8003ba6:	4b10      	ldr	r3, [pc, #64]	; (8003be8 <MRT_set_alarmA+0x84>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	615a      	str	r2, [r3, #20]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003bac:	4b0e      	ldr	r3, [pc, #56]	; (8003be8 <MRT_set_alarmA+0x84>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	619a      	str	r2, [r3, #24]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003bb2:	4b0d      	ldr	r3, [pc, #52]	; (8003be8 <MRT_set_alarmA+0x84>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	61da      	str	r2, [r3, #28]
	  sAlarm.AlarmDateWeekDay = 0x1;
 8003bb8:	4b0b      	ldr	r3, [pc, #44]	; (8003be8 <MRT_set_alarmA+0x84>)
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2020 	strb.w	r2, [r3, #32]
	  sAlarm.Alarm = RTC_ALARM_A;
 8003bc0:	4b09      	ldr	r3, [pc, #36]	; (8003be8 <MRT_set_alarmA+0x84>)
 8003bc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bc6:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8003bc8:	2201      	movs	r2, #1
 8003bca:	4907      	ldr	r1, [pc, #28]	; (8003be8 <MRT_set_alarmA+0x84>)
 8003bcc:	4807      	ldr	r0, [pc, #28]	; (8003bec <MRT_set_alarmA+0x88>)
 8003bce:	f005 f903 	bl	8008dd8 <HAL_RTC_SetAlarm_IT>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d001      	beq.n	8003bdc <MRT_set_alarmA+0x78>
	  {
	    Error_Handler();
 8003bd8:	f7fe f894 	bl	8001d04 <Error_Handler>
	  }
}
 8003bdc:	bf00      	nop
 8003bde:	3708      	adds	r7, #8
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	20000024 	.word	0x20000024
 8003be8:	20000398 	.word	0x20000398
 8003bec:	20005080 	.word	0x20005080

08003bf0 <MRT_LSM6DSR_Constructor>:


//**************************************************//
/*****LSM6DSR STATIC FUNCTIONS*****/

void MRT_LSM6DSR_Constructor(){
 8003bf0:	b598      	push	{r3, r4, r7, lr}
 8003bf2:	af00      	add	r7, sp, #0
	if (lsm6dsr==NULL){
 8003bf4:	4b08      	ldr	r3, [pc, #32]	; (8003c18 <MRT_LSM6DSR_Constructor+0x28>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d10b      	bne.n	8003c14 <MRT_LSM6DSR_Constructor+0x24>
		lsm6dsr = new LSM6DSR(&LSM6DSR_I2C, (uint8_t) MRT_LSM6DSR_ADDRESS);
 8003bfc:	203c      	movs	r0, #60	; 0x3c
 8003bfe:	f00e fdef 	bl	80127e0 <_Znwj>
 8003c02:	4603      	mov	r3, r0
 8003c04:	461c      	mov	r4, r3
 8003c06:	226a      	movs	r2, #106	; 0x6a
 8003c08:	4904      	ldr	r1, [pc, #16]	; (8003c1c <MRT_LSM6DSR_Constructor+0x2c>)
 8003c0a:	4620      	mov	r0, r4
 8003c0c:	f000 f904 	bl	8003e18 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh>
 8003c10:	4b01      	ldr	r3, [pc, #4]	; (8003c18 <MRT_LSM6DSR_Constructor+0x28>)
 8003c12:	601c      	str	r4, [r3, #0]
	}
}
 8003c14:	bf00      	nop
 8003c16:	bd98      	pop	{r3, r4, r7, pc}
 8003c18:	200003c0 	.word	0x200003c0
 8003c1c:	20004fd8 	.word	0x20004fd8

08003c20 <MRT_LSM6DSR_getAcceleration>:
	if (lsm6dsr!=NULL){
		lsm6dsr = NULL;
	}
}

void MRT_LSM6DSR_getAcceleration(void){
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
	lsm6dsr->getAcceleration();
 8003c24:	4b0a      	ldr	r3, [pc, #40]	; (8003c50 <MRT_LSM6DSR_getAcceleration+0x30>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f000 f99f 	bl	8003f6c <_ZN7LSM6DSR15getAccelerationEv>
	hlsm6dsr.acceleration_mg[0] = lsm6dsr->acceleration_mg[0];
 8003c2e:	4b08      	ldr	r3, [pc, #32]	; (8003c50 <MRT_LSM6DSR_getAcceleration+0x30>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a07      	ldr	r2, [pc, #28]	; (8003c54 <MRT_LSM6DSR_getAcceleration+0x34>)
 8003c36:	6013      	str	r3, [r2, #0]
	hlsm6dsr.acceleration_mg[1] = lsm6dsr->acceleration_mg[1];
 8003c38:	4b05      	ldr	r3, [pc, #20]	; (8003c50 <MRT_LSM6DSR_getAcceleration+0x30>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	4a05      	ldr	r2, [pc, #20]	; (8003c54 <MRT_LSM6DSR_getAcceleration+0x34>)
 8003c40:	6053      	str	r3, [r2, #4]
	hlsm6dsr.acceleration_mg[2] = lsm6dsr->acceleration_mg[2];
 8003c42:	4b03      	ldr	r3, [pc, #12]	; (8003c50 <MRT_LSM6DSR_getAcceleration+0x30>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	4a02      	ldr	r2, [pc, #8]	; (8003c54 <MRT_LSM6DSR_getAcceleration+0x34>)
 8003c4a:	6093      	str	r3, [r2, #8]
}
 8003c4c:	bf00      	nop
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	200003c0 	.word	0x200003c0
 8003c54:	200003c8 	.word	0x200003c8

08003c58 <MRT_LSM6DSR_getAngularRate>:
void MRT_LSM6DSR_getAngularRate(void){
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
	lsm6dsr->getAngularRate();
 8003c5c:	4b0a      	ldr	r3, [pc, #40]	; (8003c88 <MRT_LSM6DSR_getAngularRate+0x30>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f000 f9fb 	bl	800405c <_ZN7LSM6DSR14getAngularRateEv>
	hlsm6dsr.angular_rate_mdps[0] = lsm6dsr->angular_rate_mdps[0];
 8003c66:	4b08      	ldr	r3, [pc, #32]	; (8003c88 <MRT_LSM6DSR_getAngularRate+0x30>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	4a07      	ldr	r2, [pc, #28]	; (8003c8c <MRT_LSM6DSR_getAngularRate+0x34>)
 8003c6e:	60d3      	str	r3, [r2, #12]
	hlsm6dsr.angular_rate_mdps[1] = lsm6dsr->angular_rate_mdps[1];
 8003c70:	4b05      	ldr	r3, [pc, #20]	; (8003c88 <MRT_LSM6DSR_getAngularRate+0x30>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	4a05      	ldr	r2, [pc, #20]	; (8003c8c <MRT_LSM6DSR_getAngularRate+0x34>)
 8003c78:	6113      	str	r3, [r2, #16]
	hlsm6dsr.angular_rate_mdps[2] = lsm6dsr->angular_rate_mdps[2];
 8003c7a:	4b03      	ldr	r3, [pc, #12]	; (8003c88 <MRT_LSM6DSR_getAngularRate+0x30>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	4a02      	ldr	r2, [pc, #8]	; (8003c8c <MRT_LSM6DSR_getAngularRate+0x34>)
 8003c82:	6153      	str	r3, [r2, #20]
}
 8003c84:	bf00      	nop
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	200003c0 	.word	0x200003c0
 8003c8c:	200003c8 	.word	0x200003c8

08003c90 <MRT_LSM6DSR_getTemperature>:
void MRT_LSM6DSR_getTemperature(void){
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0
	lsm6dsr->getTemperature();
 8003c94:	4b05      	ldr	r3, [pc, #20]	; (8003cac <MRT_LSM6DSR_getTemperature+0x1c>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f000 f9ae 	bl	8003ffa <_ZN7LSM6DSR14getTemperatureEv>
	hlsm6dsr.temperature_degC = lsm6dsr->temperature_degC;
 8003c9e:	4b03      	ldr	r3, [pc, #12]	; (8003cac <MRT_LSM6DSR_getTemperature+0x1c>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	4a02      	ldr	r2, [pc, #8]	; (8003cb0 <MRT_LSM6DSR_getTemperature+0x20>)
 8003ca6:	6193      	str	r3, [r2, #24]
}
 8003ca8:	bf00      	nop
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	200003c0 	.word	0x200003c0
 8003cb0:	200003c8 	.word	0x200003c8

08003cb4 <MRT_LSM6DSR_pollAll>:

void MRT_LSM6DSR_pollAll(void){
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	af00      	add	r7, sp, #0
	MRT_LSM6DSR_getAcceleration();
 8003cb8:	f7ff ffb2 	bl	8003c20 <MRT_LSM6DSR_getAcceleration>
	MRT_LSM6DSR_getAngularRate();
 8003cbc:	f7ff ffcc 	bl	8003c58 <MRT_LSM6DSR_getAngularRate>
	MRT_LSM6DSR_getTemperature();
 8003cc0:	f7ff ffe6 	bl	8003c90 <MRT_LSM6DSR_getTemperature>
}
 8003cc4:	bf00      	nop
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <MRT_LPS22HH_Constructor>:


//**************************************************//
/*****LPS22HH STATIC FUNCTIONS*****/

void MRT_LPS22HH_Constructor(){
 8003cc8:	b598      	push	{r3, r4, r7, lr}
 8003cca:	af00      	add	r7, sp, #0
	if (lps22hh==NULL){
 8003ccc:	4b08      	ldr	r3, [pc, #32]	; (8003cf0 <MRT_LPS22HH_Constructor+0x28>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d10b      	bne.n	8003cec <MRT_LPS22HH_Constructor+0x24>
		lps22hh = new LPS22HH(&LPS22HH_I2C, (uint8_t) MRT_LPS22HH_ADDRESS);
 8003cd4:	2020      	movs	r0, #32
 8003cd6:	f00e fd83 	bl	80127e0 <_Znwj>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	461c      	mov	r4, r3
 8003cde:	22b3      	movs	r2, #179	; 0xb3
 8003ce0:	4904      	ldr	r1, [pc, #16]	; (8003cf4 <MRT_LPS22HH_Constructor+0x2c>)
 8003ce2:	4620      	mov	r0, r4
 8003ce4:	f000 fa3c 	bl	8004160 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh>
 8003ce8:	4b01      	ldr	r3, [pc, #4]	; (8003cf0 <MRT_LPS22HH_Constructor+0x28>)
 8003cea:	601c      	str	r4, [r3, #0]
	}
}
 8003cec:	bf00      	nop
 8003cee:	bd98      	pop	{r3, r4, r7, pc}
 8003cf0:	200003c4 	.word	0x200003c4
 8003cf4:	20004fd8 	.word	0x20004fd8

08003cf8 <MRT_LPS22HH_getPressure>:
	if (lps22hh!=NULL){
		lps22hh = NULL;
	}
}

void MRT_LPS22HH_getPressure(void){
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
	lps22hh->getPressure();
 8003cfc:	4b05      	ldr	r3, [pc, #20]	; (8003d14 <MRT_LPS22HH_getPressure+0x1c>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 fab3 	bl	800426c <_ZN7LPS22HH11getPressureEv>
	hlps22hh.pressure_hPa = lps22hh->pressure_hPa;
 8003d06:	4b03      	ldr	r3, [pc, #12]	; (8003d14 <MRT_LPS22HH_getPressure+0x1c>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a02      	ldr	r2, [pc, #8]	; (8003d18 <MRT_LPS22HH_getPressure+0x20>)
 8003d0e:	6013      	str	r3, [r2, #0]
}
 8003d10:	bf00      	nop
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	200003c4 	.word	0x200003c4
 8003d18:	200003f4 	.word	0x200003f4

08003d1c <MRT_LPS22HH_getTemperature>:

void MRT_LPS22HH_getTemperature(void){
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
	lps22hh->getTemperature();
 8003d20:	4b05      	ldr	r3, [pc, #20]	; (8003d38 <MRT_LPS22HH_getTemperature+0x1c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f000 fad0 	bl	80042ca <_ZN7LPS22HH14getTemperatureEv>
	hlps22hh.temperature_degC = lps22hh->temperature_degC;
 8003d2a:	4b03      	ldr	r3, [pc, #12]	; (8003d38 <MRT_LPS22HH_getTemperature+0x1c>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	4a02      	ldr	r2, [pc, #8]	; (8003d3c <MRT_LPS22HH_getTemperature+0x20>)
 8003d32:	6053      	str	r3, [r2, #4]
}
 8003d34:	bf00      	nop
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	200003c4 	.word	0x200003c4
 8003d3c:	200003f4 	.word	0x200003f4

08003d40 <MRT_LPS22HH_pollAll>:

void MRT_LPS22HH_pollAll(void){
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0
	MRT_LPS22HH_getPressure();
 8003d44:	f7ff ffd8 	bl	8003cf8 <MRT_LPS22HH_getPressure>
	MRT_LPS22HH_getTemperature();
 8003d48:	f7ff ffe8 	bl	8003d1c <MRT_LPS22HH_getTemperature>
}
 8003d4c:	bf00      	nop
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <MRT_LSM6DSR_Init>:


//**************************************************//
/*****PUBLIC STATIC FUNCTIONS*****/

HLSM6DSR MRT_LSM6DSR_Init(void){
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
	MRT_LSM6DSR_Constructor();
 8003d58:	f7ff ff4a 	bl	8003bf0 <MRT_LSM6DSR_Constructor>
	HLSM6DSR lsm6dsr_handler;
	lsm6dsr_handler.getAcceleration = &MRT_LSM6DSR_getAcceleration;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a08      	ldr	r2, [pc, #32]	; (8003d80 <MRT_LSM6DSR_Init+0x30>)
 8003d60:	61da      	str	r2, [r3, #28]
	lsm6dsr_handler.getAngularRate = &MRT_LSM6DSR_getAngularRate;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a07      	ldr	r2, [pc, #28]	; (8003d84 <MRT_LSM6DSR_Init+0x34>)
 8003d66:	621a      	str	r2, [r3, #32]
	lsm6dsr_handler.getTemperature = &MRT_LSM6DSR_getTemperature;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a07      	ldr	r2, [pc, #28]	; (8003d88 <MRT_LSM6DSR_Init+0x38>)
 8003d6c:	625a      	str	r2, [r3, #36]	; 0x24
	lsm6dsr_handler.pollAll = &MRT_LSM6DSR_pollAll;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a06      	ldr	r2, [pc, #24]	; (8003d8c <MRT_LSM6DSR_Init+0x3c>)
 8003d72:	629a      	str	r2, [r3, #40]	; 0x28
	return lsm6dsr_handler;
 8003d74:	bf00      	nop
}
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	08003c21 	.word	0x08003c21
 8003d84:	08003c59 	.word	0x08003c59
 8003d88:	08003c91 	.word	0x08003c91
 8003d8c:	08003cb5 	.word	0x08003cb5

08003d90 <MRT_LPS22HH_Init>:

struct HLPS22HH MRT_LPS22HH_Init(void){
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
	MRT_LPS22HH_Constructor();
 8003d98:	f7ff ff96 	bl	8003cc8 <MRT_LPS22HH_Constructor>
	struct HLPS22HH lps22hh_handler;
	lps22hh_handler.getPressure = &MRT_LPS22HH_getPressure;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a06      	ldr	r2, [pc, #24]	; (8003db8 <MRT_LPS22HH_Init+0x28>)
 8003da0:	609a      	str	r2, [r3, #8]
	lps22hh_handler.getTemperature = &MRT_LPS22HH_getTemperature;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a05      	ldr	r2, [pc, #20]	; (8003dbc <MRT_LPS22HH_Init+0x2c>)
 8003da6:	60da      	str	r2, [r3, #12]
	lps22hh_handler.pollAll = &MRT_LPS22HH_pollAll;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a05      	ldr	r2, [pc, #20]	; (8003dc0 <MRT_LPS22HH_Init+0x30>)
 8003dac:	611a      	str	r2, [r3, #16]
	return lps22hh_handler;
 8003dae:	bf00      	nop
}
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	08003cf9 	.word	0x08003cf9
 8003dbc:	08003d1d 	.word	0x08003d1d
 8003dc0:	08003d41 	.word	0x08003d41

08003dc4 <MRT_i2c_sensors_Init>:

void MRT_i2c_sensors_Init(void){
 8003dc4:	b5b0      	push	{r4, r5, r7, lr}
 8003dc6:	b08c      	sub	sp, #48	; 0x30
 8003dc8:	af00      	add	r7, sp, #0

	//LSM6DSR
	#if LSM6DSR_
	HAL_IWDG_Refresh(&hiwdg);
	hlsm6dsr = MRT_LSM6DSR_Init();
 8003dca:	4c10      	ldr	r4, [pc, #64]	; (8003e0c <MRT_i2c_sensors_Init+0x48>)
 8003dcc:	463b      	mov	r3, r7
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7ff ffbe 	bl	8003d50 <MRT_LSM6DSR_Init>
 8003dd4:	4625      	mov	r5, r4
 8003dd6:	463c      	mov	r4, r7
 8003dd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ddc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003de0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003de4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	#endif

	//LPS22HH
	#if LPS22HH_
	HAL_IWDG_Refresh(&hiwdg);
	hlps22hh = MRT_LPS22HH_Init();
 8003de8:	4c09      	ldr	r4, [pc, #36]	; (8003e10 <MRT_i2c_sensors_Init+0x4c>)
 8003dea:	463b      	mov	r3, r7
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7ff ffcf 	bl	8003d90 <MRT_LPS22HH_Init>
 8003df2:	4625      	mov	r5, r4
 8003df4:	463c      	mov	r4, r7
 8003df6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003df8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dfa:	6823      	ldr	r3, [r4, #0]
 8003dfc:	602b      	str	r3, [r5, #0]

	//GPS
	#if GPS_
	HAL_IWDG_Refresh(&hiwdg);
	//GPS_Init(&GPS_UART, &DEBUG_UART);TODO change to that?
	GPS_Init(&GPS_UART);
 8003dfe:	4805      	ldr	r0, [pc, #20]	; (8003e14 <MRT_i2c_sensors_Init+0x50>)
 8003e00:	f000 face 	bl	80043a0 <GPS_Init>
	#endif

}
 8003e04:	bf00      	nop
 8003e06:	3730      	adds	r7, #48	; 0x30
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bdb0      	pop	{r4, r5, r7, pc}
 8003e0c:	200003c8 	.word	0x200003c8
 8003e10:	200003f4 	.word	0x200003f4
 8003e14:	200052c0 	.word	0x200052c0

08003e18 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh>:


//**************************************************//
/*****LSM6DSR*****/

LSM6DSR::LSM6DSR(I2C_HandleTypeDef* i2c_bus, uint8_t address){
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b088      	sub	sp, #32
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	4613      	mov	r3, r2
 8003e24:	71fb      	strb	r3, [r7, #7]
	println((char*) "LSM6DSR Setup Starts");
 8003e26:	4847      	ldr	r0, [pc, #284]	; (8003f44 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x12c>)
 8003e28:	f7fd f8f0 	bl	800100c <println>

	/* Initialize mems driver interface */
	ctx.write_reg = write;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4a46      	ldr	r2, [pc, #280]	; (8003f48 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x130>)
 8003e30:	61da      	str	r2, [r3, #28]
	ctx.read_reg = read;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	4a45      	ldr	r2, [pc, #276]	; (8003f4c <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x134>)
 8003e36:	621a      	str	r2, [r3, #32]
	ctx.handle = i2c_bus;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait sensor boot time */
	HAL_Delay(LSM6DSR_BOOT_TIME);
 8003e3e:	2064      	movs	r0, #100	; 0x64
 8003e40:	f001 fa1e 	bl	8005280 <HAL_Delay>
	/* Check device ID */
	lsm6dsr_device_id_get(&ctx, &whoamI);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f103 021c 	add.w	r2, r3, #28
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	3338      	adds	r3, #56	; 0x38
 8003e4e:	4619      	mov	r1, r3
 8003e50:	4610      	mov	r0, r2
 8003e52:	f001 f86b 	bl	8004f2c <lsm6dsr_device_id_get>

	print((char*) "\tChecking Sensor ID...");
 8003e56:	483e      	ldr	r0, [pc, #248]	; (8003f50 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x138>)
 8003e58:	f7fd f8f6 	bl	8001048 <print>
	if (whoamI != address){
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e62:	79fa      	ldrb	r2, [r7, #7]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d018      	beq.n	8003e9a <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x82>
	  println((char*) "NOT OK");
 8003e68:	483a      	ldr	r0, [pc, #232]	; (8003f54 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x13c>)
 8003e6a:	f7fd f8cf 	bl	800100c <println>
	  print((char*) "\tThis Device is: ");
 8003e6e:	483a      	ldr	r0, [pc, #232]	; (8003f58 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x140>)
 8003e70:	f7fd f8ea 	bl	8001048 <print>

	  char buffer[10];
	  sprintf(buffer, "%X\r\n", whoamI);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	f107 0314 	add.w	r3, r7, #20
 8003e80:	4936      	ldr	r1, [pc, #216]	; (8003f5c <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x144>)
 8003e82:	4618      	mov	r0, r3
 8003e84:	f00f fe26 	bl	8013ad4 <siprintf>
	  print(buffer);
 8003e88:	f107 0314 	add.w	r3, r7, #20
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7fd f8db 	bl	8001048 <print>

	  println((char*) "\n\rProgram Terminated\n\r");
 8003e92:	4833      	ldr	r0, [pc, #204]	; (8003f60 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x148>)
 8003e94:	f7fd f8ba 	bl	800100c <println>
	  while(1);
 8003e98:	e7fe      	b.n	8003e98 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x80>
	}
	println((char*) "OK");
 8003e9a:	4832      	ldr	r0, [pc, #200]	; (8003f64 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x14c>)
 8003e9c:	f7fd f8b6 	bl	800100c <println>

	/* Restore default configuration */
	lsm6dsr_reset_set(&ctx, PROPERTY_ENABLE);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	331c      	adds	r3, #28
 8003ea4:	2101      	movs	r1, #1
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f001 f851 	bl	8004f4e <lsm6dsr_reset_set>
	HAL_Delay(500);
 8003eac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003eb0:	f001 f9e6 	bl	8005280 <HAL_Delay>
	do {
	lsm6dsr_reset_get(&ctx, &rst);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f103 021c 	add.w	r2, r3, #28
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	3339      	adds	r3, #57	; 0x39
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	4610      	mov	r0, r2
 8003ec2:	f001 f86a 	bl	8004f9a <lsm6dsr_reset_get>
	} while (rst);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d000      	beq.n	8003ed2 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0xba>
	do {
 8003ed0:	e7f0      	b.n	8003eb4 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x9c>

	/* Disable I3C interface */
    lsm6dsr_i3c_disable_set(&ctx, LSM6DSR_I3C_DISABLE); //TODO Jasper
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	331c      	adds	r3, #28
 8003ed6:	2180      	movs	r1, #128	; 0x80
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f001 f8d5 	bl	8005088 <lsm6dsr_i3c_disable_set>

	/* Enable Block Data Update */
	lsm6dsr_block_data_update_set(&ctx, PROPERTY_ENABLE);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	331c      	adds	r3, #28
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f000 fed1 	bl	8004c8c <lsm6dsr_block_data_update_set>
	/* Set Output Data Rate */
	lsm6dsr_xl_data_rate_set(&ctx, LSM6DSR_XL_ODR_12Hz5);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	331c      	adds	r3, #28
 8003eee:	2101      	movs	r1, #1
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f000 fcad 	bl	8004850 <lsm6dsr_xl_data_rate_set>
	lsm6dsr_gy_data_rate_set(&ctx, LSM6DSR_GY_ODR_12Hz5);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	331c      	adds	r3, #28
 8003efa:	2101      	movs	r1, #1
 8003efc:	4618      	mov	r0, r3
 8003efe:	f000 fdc9 	bl	8004a94 <lsm6dsr_gy_data_rate_set>
	/* Set full scale */
	lsm6dsr_xl_full_scale_set(&ctx, LSM6DSR_2g);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	331c      	adds	r3, #28
 8003f06:	2100      	movs	r1, #0
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f000 fc7b 	bl	8004804 <lsm6dsr_xl_full_scale_set>
	lsm6dsr_gy_full_scale_set(&ctx, LSM6DSR_2000dps);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	331c      	adds	r3, #28
 8003f12:	210c      	movs	r1, #12
 8003f14:	4618      	mov	r0, r3
 8003f16:	f000 fd97 	bl	8004a48 <lsm6dsr_gy_full_scale_set>
	/* Configure filtering chain(No aux interface)
	* Accelerometer - LPF1 + LPF2 path
	*/
	lsm6dsr_xl_hp_path_on_out_set(&ctx, LSM6DSR_LP_ODR_DIV_100); //TODO JASPER
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	331c      	adds	r3, #28
 8003f1e:	2104      	movs	r1, #4
 8003f20:	4618      	mov	r0, r3
 8003f22:	f001 f879 	bl	8005018 <lsm6dsr_xl_hp_path_on_out_set>
	lsm6dsr_xl_filter_lp2_set(&ctx, PROPERTY_ENABLE); //TODO JASPER
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	331c      	adds	r3, #28
 8003f2a:	2101      	movs	r1, #1
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f001 f84d 	bl	8004fcc <lsm6dsr_xl_filter_lp2_set>
	println((char*) "\tSetup Ends");
 8003f32:	480d      	ldr	r0, [pc, #52]	; (8003f68 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x150>)
 8003f34:	f7fd f86a 	bl	800100c <println>

}
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3720      	adds	r7, #32
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	08017f10 	.word	0x08017f10
 8003f48:	080040eb 	.word	0x080040eb
 8003f4c:	08004125 	.word	0x08004125
 8003f50:	08017f28 	.word	0x08017f28
 8003f54:	08017f40 	.word	0x08017f40
 8003f58:	08017f48 	.word	0x08017f48
 8003f5c:	08017f5c 	.word	0x08017f5c
 8003f60:	08017f64 	.word	0x08017f64
 8003f64:	08017f7c 	.word	0x08017f7c
 8003f68:	08017f80 	.word	0x08017f80

08003f6c <_ZN7LSM6DSR15getAccelerationEv>:


void LSM6DSR::getAcceleration(void){
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
	lsm6dsr_xl_flag_data_ready_get(&ctx, &reg);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f103 021c 	add.w	r2, r3, #28
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	3328      	adds	r3, #40	; 0x28
 8003f7e:	4619      	mov	r1, r3
 8003f80:	4610      	mov	r0, r2
 8003f82:	f000 fea9 	bl	8004cd8 <lsm6dsr_xl_flag_data_ready_get>

	if (reg){
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d030      	beq.n	8003ff2 <_ZN7LSM6DSR15getAccelerationEv+0x86>
		// Read magnetic field data
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	332a      	adds	r3, #42	; 0x2a
 8003f94:	2206      	movs	r2, #6
 8003f96:	2100      	movs	r1, #0
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f00e fd87 	bl	8012aac <memset>
		lsm6dsr_acceleration_raw_get(&ctx, data_raw_acceleration);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f103 021c 	add.w	r2, r3, #28
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	332a      	adds	r3, #42	; 0x2a
 8003fa8:	4619      	mov	r1, r3
 8003faa:	4610      	mov	r0, r2
 8003fac:	f000 ff4d 	bl	8004e4a <lsm6dsr_acceleration_raw_get>
		acceleration_mg[0] = lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[0]);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 fbd8 	bl	800476c <lsm6dsr_from_fs2g_to_mg>
 8003fbc:	eef0 7a40 	vmov.f32	s15, s0
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	edc3 7a00 	vstr	s15, [r3]
		acceleration_mg[1] = lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[1]);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f000 fbcd 	bl	800476c <lsm6dsr_from_fs2g_to_mg>
 8003fd2:	eef0 7a40 	vmov.f32	s15, s0
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	edc3 7a01 	vstr	s15, [r3, #4]
		acceleration_mg[2] = lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[2]);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 fbc2 	bl	800476c <lsm6dsr_from_fs2g_to_mg>
 8003fe8:	eef0 7a40 	vmov.f32	s15, s0
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	edc3 7a02 	vstr	s15, [r3, #8]
	}
}
 8003ff2:	bf00      	nop
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <_ZN7LSM6DSR14getTemperatureEv>:


void LSM6DSR::getTemperature(void){
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b082      	sub	sp, #8
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
    lsm6dsr_temp_flag_data_ready_get(&ctx, &reg);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f103 021c 	add.w	r2, r3, #28
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	3328      	adds	r3, #40	; 0x28
 800400c:	4619      	mov	r1, r3
 800400e:	4610      	mov	r0, r2
 8004010:	f000 fe94 	bl	8004d3c <lsm6dsr_temp_flag_data_ready_get>

    if (reg){
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800401a:	2b00      	cmp	r3, #0
 800401c:	d01a      	beq.n	8004054 <_ZN7LSM6DSR14getTemperatureEv+0x5a>
		// Read temperature data
		memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	3336      	adds	r3, #54	; 0x36
 8004022:	2202      	movs	r2, #2
 8004024:	2100      	movs	r1, #0
 8004026:	4618      	mov	r0, r3
 8004028:	f00e fd40 	bl	8012aac <memset>
		lsm6dsr_temperature_raw_get(&ctx, &data_raw_temperature);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f103 021c 	add.w	r2, r3, #28
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	3336      	adds	r3, #54	; 0x36
 8004036:	4619      	mov	r1, r3
 8004038:	4610      	mov	r0, r2
 800403a:	f000 fe98 	bl	8004d6e <lsm6dsr_temperature_raw_get>
		temperature_degC = lsm6dsr_from_lsb_to_celsius(data_raw_temperature);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8004044:	4618      	mov	r0, r3
 8004046:	f000 fbc1 	bl	80047cc <lsm6dsr_from_lsb_to_celsius>
 800404a:	eef0 7a40 	vmov.f32	s15, s0
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	edc3 7a06 	vstr	s15, [r3, #24]
	}
}
 8004054:	bf00      	nop
 8004056:	3708      	adds	r7, #8
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <_ZN7LSM6DSR14getAngularRateEv>:


void LSM6DSR::getAngularRate(void){
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
    lsm6dsr_gy_flag_data_ready_get(&ctx, &reg);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f103 021c 	add.w	r2, r3, #28
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	3328      	adds	r3, #40	; 0x28
 800406e:	4619      	mov	r1, r3
 8004070:	4610      	mov	r0, r2
 8004072:	f000 fe4a 	bl	8004d0a <lsm6dsr_gy_flag_data_ready_get>

    if (reg){
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800407c:	2b00      	cmp	r3, #0
 800407e:	d030      	beq.n	80040e2 <_ZN7LSM6DSR14getAngularRateEv+0x86>
		// Read magnetic field data
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	3330      	adds	r3, #48	; 0x30
 8004084:	2206      	movs	r2, #6
 8004086:	2100      	movs	r1, #0
 8004088:	4618      	mov	r0, r3
 800408a:	f00e fd0f 	bl	8012aac <memset>
		lsm6dsr_angular_rate_raw_get(&ctx, data_raw_angular_rate);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f103 021c 	add.w	r2, r3, #28
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	3330      	adds	r3, #48	; 0x30
 8004098:	4619      	mov	r1, r3
 800409a:	4610      	mov	r0, r2
 800409c:	f000 fe8a 	bl	8004db4 <lsm6dsr_angular_rate_raw_get>
		angular_rate_mdps[0] = lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 fb78 	bl	800479c <lsm6dsr_from_fs2000dps_to_mdps>
 80040ac:	eef0 7a40 	vmov.f32	s15, s0
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	edc3 7a03 	vstr	s15, [r3, #12]
		angular_rate_mdps[1] = lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80040bc:	4618      	mov	r0, r3
 80040be:	f000 fb6d 	bl	800479c <lsm6dsr_from_fs2000dps_to_mdps>
 80040c2:	eef0 7a40 	vmov.f32	s15, s0
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	edc3 7a04 	vstr	s15, [r3, #16]
		angular_rate_mdps[2] = lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 80040d2:	4618      	mov	r0, r3
 80040d4:	f000 fb62 	bl	800479c <lsm6dsr_from_fs2000dps_to_mdps>
 80040d8:	eef0 7a40 	vmov.f32	s15, s0
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	edc3 7a05 	vstr	s15, [r3, #20]
		fs500dps_to_mdps
		fs1000dps_to_mdps
		fs2000dps_to_mdps
		*/
	}
}
 80040e2:	bf00      	nop
 80040e4:	3708      	adds	r7, #8
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <_ZN7LSM6DSR5writeEPvhPKht>:


int32_t LSM6DSR::write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b088      	sub	sp, #32
 80040ee:	af04      	add	r7, sp, #16
 80040f0:	60f8      	str	r0, [r7, #12]
 80040f2:	607a      	str	r2, [r7, #4]
 80040f4:	461a      	mov	r2, r3
 80040f6:	460b      	mov	r3, r1
 80040f8:	72fb      	strb	r3, [r7, #11]
 80040fa:	4613      	mov	r3, r2
 80040fc:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write((I2C_HandleTypeDef*) handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 80040fe:	7afb      	ldrb	r3, [r7, #11]
 8004100:	b29a      	uxth	r2, r3
 8004102:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004106:	9302      	str	r3, [sp, #8]
 8004108:	893b      	ldrh	r3, [r7, #8]
 800410a:	9301      	str	r3, [sp, #4]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	2301      	movs	r3, #1
 8004112:	21d5      	movs	r1, #213	; 0xd5
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f001 ff59 	bl	8005fcc <HAL_I2C_Mem_Write>
  return 0;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <_ZN7LSM6DSR4readEPvhPht>:

int32_t LSM6DSR::read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 8004124:	b580      	push	{r7, lr}
 8004126:	b088      	sub	sp, #32
 8004128:	af04      	add	r7, sp, #16
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	607a      	str	r2, [r7, #4]
 800412e:	461a      	mov	r2, r3
 8004130:	460b      	mov	r3, r1
 8004132:	72fb      	strb	r3, [r7, #11]
 8004134:	4613      	mov	r3, r2
 8004136:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read((I2C_HandleTypeDef*) handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8004138:	7afb      	ldrb	r3, [r7, #11]
 800413a:	b29a      	uxth	r2, r3
 800413c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004140:	9302      	str	r3, [sp, #8]
 8004142:	893b      	ldrh	r3, [r7, #8]
 8004144:	9301      	str	r3, [sp, #4]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	2301      	movs	r3, #1
 800414c:	21d5      	movs	r1, #213	; 0xd5
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	f002 f836 	bl	80061c0 <HAL_I2C_Mem_Read>
  return 0;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
	...

08004160 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh>:

//**************************************************//
/*****LPS22HH*****/


LPS22HH::LPS22HH(I2C_HandleTypeDef* i2c_bus, uint8_t address){
 8004160:	b580      	push	{r7, lr}
 8004162:	b088      	sub	sp, #32
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	4613      	mov	r3, r2
 800416c:	71fb      	strb	r3, [r7, #7]
	println((char*) "LPS22HH Setup Starts");
 800416e:	4835      	ldr	r0, [pc, #212]	; (8004244 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xe4>)
 8004170:	f7fc ff4c 	bl	800100c <println>

	/* Initialize mems driver interface */
	ctx.write_reg = write;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	4a34      	ldr	r2, [pc, #208]	; (8004248 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xe8>)
 8004178:	609a      	str	r2, [r3, #8]
	ctx.read_reg = read;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	4a33      	ldr	r2, [pc, #204]	; (800424c <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xec>)
 800417e:	60da      	str	r2, [r3, #12]
	ctx.handle = i2c_bus;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	611a      	str	r2, [r3, #16]
	/* Wait sensor boot time */
	HAL_Delay(LPS22HH_BOOT_TIME);
 8004186:	2064      	movs	r0, #100	; 0x64
 8004188:	f001 f87a 	bl	8005280 <HAL_Delay>
	/* Check device ID */
	whoamI = 0;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	779a      	strb	r2, [r3, #30]
	lps22hh_device_id_get(&ctx, &whoamI);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f103 0208 	add.w	r2, r3, #8
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	331e      	adds	r3, #30
 800419c:	4619      	mov	r1, r3
 800419e:	4610      	mov	r0, r2
 80041a0:	f000 fa64 	bl	800466c <lps22hh_device_id_get>


	print((char*) "\tChecking Sensor ID...");
 80041a4:	482a      	ldr	r0, [pc, #168]	; (8004250 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xf0>)
 80041a6:	f7fc ff4f 	bl	8001048 <print>
	if ( whoamI != address ){
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	7f9b      	ldrb	r3, [r3, #30]
 80041ae:	79fa      	ldrb	r2, [r7, #7]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d017      	beq.n	80041e4 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x84>
	  println((char*) "NOT OK");
 80041b4:	4827      	ldr	r0, [pc, #156]	; (8004254 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xf4>)
 80041b6:	f7fc ff29 	bl	800100c <println>
	  print((char*) "\tThis Device is: ");
 80041ba:	4827      	ldr	r0, [pc, #156]	; (8004258 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xf8>)
 80041bc:	f7fc ff44 	bl	8001048 <print>

	  char buffer[10];
	  sprintf(buffer, "%X\r\n", whoamI);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	7f9b      	ldrb	r3, [r3, #30]
 80041c4:	461a      	mov	r2, r3
 80041c6:	f107 0314 	add.w	r3, r7, #20
 80041ca:	4924      	ldr	r1, [pc, #144]	; (800425c <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xfc>)
 80041cc:	4618      	mov	r0, r3
 80041ce:	f00f fc81 	bl	8013ad4 <siprintf>
	  print(buffer);
 80041d2:	f107 0314 	add.w	r3, r7, #20
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7fc ff36 	bl	8001048 <print>

	  println((char*) "\n\rProgram Terminated\n\r");
 80041dc:	4820      	ldr	r0, [pc, #128]	; (8004260 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x100>)
 80041de:	f7fc ff15 	bl	800100c <println>
	  while(1);
 80041e2:	e7fe      	b.n	80041e2 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x82>
	}
	println((char*) "OK");
 80041e4:	481f      	ldr	r0, [pc, #124]	; (8004264 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x104>)
 80041e6:	f7fc ff11 	bl	800100c <println>

	/* Restore default configuration */
	lps22hh_reset_set(&ctx, PROPERTY_ENABLE);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	3308      	adds	r3, #8
 80041ee:	2101      	movs	r1, #1
 80041f0:	4618      	mov	r0, r3
 80041f2:	f000 fa4c 	bl	800468e <lps22hh_reset_set>
	HAL_Delay(500);
 80041f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80041fa:	f001 f841 	bl	8005280 <HAL_Delay>
	do {
	lps22hh_reset_get(&ctx, &rst);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f103 0208 	add.w	r2, r3, #8
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	331f      	adds	r3, #31
 8004208:	4619      	mov	r1, r3
 800420a:	4610      	mov	r0, r2
 800420c:	f000 fa65 	bl	80046da <lps22hh_reset_get>
	} while (rst);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	7fdb      	ldrb	r3, [r3, #31]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d000      	beq.n	800421a <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xba>
	do {
 8004218:	e7f1      	b.n	80041fe <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x9e>


	/* Enable Block Data Update */
	lps22hh_block_data_update_set(&ctx, PROPERTY_ENABLE);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	3308      	adds	r3, #8
 800421e:	2101      	movs	r1, #1
 8004220:	4618      	mov	r0, r3
 8004222:	f000 f931 	bl	8004488 <lps22hh_block_data_update_set>

	/* Set Output Data Rate */
	lps22hh_data_rate_set(&ctx, LPS22HH_75_Hz_LOW_NOISE);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	3308      	adds	r3, #8
 800422a:	2115      	movs	r1, #21
 800422c:	4618      	mov	r0, r3
 800422e:	f000 f951 	bl	80044d4 <lps22hh_data_rate_set>
	println((char*) "\tSetup Ends");
 8004232:	480d      	ldr	r0, [pc, #52]	; (8004268 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x108>)
 8004234:	f7fc feea 	bl	800100c <println>

}
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	4618      	mov	r0, r3
 800423c:	3720      	adds	r7, #32
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	08017f8c 	.word	0x08017f8c
 8004248:	0800432b 	.word	0x0800432b
 800424c:	08004365 	.word	0x08004365
 8004250:	08017f28 	.word	0x08017f28
 8004254:	08017f40 	.word	0x08017f40
 8004258:	08017f48 	.word	0x08017f48
 800425c:	08017f5c 	.word	0x08017f5c
 8004260:	08017f64 	.word	0x08017f64
 8004264:	08017f7c 	.word	0x08017f7c
 8004268:	08017f80 	.word	0x08017f80

0800426c <_ZN7LPS22HH11getPressureEv>:



void LPS22HH::getPressure(void){
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
	/* Read output only if new value is available */
	lps22hh_press_flag_data_ready_get(&ctx, &reg);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f103 0208 	add.w	r2, r3, #8
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	3314      	adds	r3, #20
 800427e:	4619      	mov	r1, r3
 8004280:	4610      	mov	r0, r2
 8004282:	f000 f975 	bl	8004570 <lps22hh_press_flag_data_ready_get>

	if (reg) {
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	7d1b      	ldrb	r3, [r3, #20]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d019      	beq.n	80042c2 <_ZN7LPS22HH11getPressureEv+0x56>
	  memset(&data_raw_pressure, 0x00, sizeof(uint32_t));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	3318      	adds	r3, #24
 8004292:	2204      	movs	r2, #4
 8004294:	2100      	movs	r1, #0
 8004296:	4618      	mov	r0, r3
 8004298:	f00e fc08 	bl	8012aac <memset>
	  lps22hh_pressure_raw_get(&ctx, &data_raw_pressure);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f103 0208 	add.w	r2, r3, #8
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	3318      	adds	r3, #24
 80042a6:	4619      	mov	r1, r3
 80042a8:	4610      	mov	r0, r2
 80042aa:	f000 f993 	bl	80045d4 <lps22hh_pressure_raw_get>
	  pressure_hPa = lps22hh_from_lsb_to_hpa(data_raw_pressure);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f000 f8b6 	bl	8004424 <lps22hh_from_lsb_to_hpa>
 80042b8:	eef0 7a40 	vmov.f32	s15, s0
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80042c2:	bf00      	nop
 80042c4:	3708      	adds	r7, #8
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <_ZN7LPS22HH14getTemperatureEv>:


void LPS22HH::getTemperature(void){
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b082      	sub	sp, #8
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
	/* Read output only if new value is available */
	lps22hh_temp_flag_data_ready_get(&ctx, &reg);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f103 0208 	add.w	r2, r3, #8
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	3314      	adds	r3, #20
 80042dc:	4619      	mov	r1, r3
 80042de:	4610      	mov	r0, r2
 80042e0:	f000 f95f 	bl	80045a2 <lps22hh_temp_flag_data_ready_get>

	if (reg) {
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	7d1b      	ldrb	r3, [r3, #20]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d01a      	beq.n	8004322 <_ZN7LPS22HH14getTemperatureEv+0x58>
	  memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	331c      	adds	r3, #28
 80042f0:	2202      	movs	r2, #2
 80042f2:	2100      	movs	r1, #0
 80042f4:	4618      	mov	r0, r3
 80042f6:	f00e fbd9 	bl	8012aac <memset>
	  lps22hh_temperature_raw_get(&ctx, &data_raw_temperature);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f103 0208 	add.w	r2, r3, #8
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	331c      	adds	r3, #28
 8004304:	4619      	mov	r1, r3
 8004306:	4610      	mov	r0, r2
 8004308:	f000 f98d 	bl	8004626 <lps22hh_temperature_raw_get>
	  temperature_degC = lps22hh_from_lsb_to_celsius(data_raw_temperature);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8004312:	4618      	mov	r0, r3
 8004314:	f000 f89e 	bl	8004454 <lps22hh_from_lsb_to_celsius>
 8004318:	eef0 7a40 	vmov.f32	s15, s0
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	edc3 7a01 	vstr	s15, [r3, #4]
	}
}
 8004322:	bf00      	nop
 8004324:	3708      	adds	r7, #8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <_ZN7LPS22HH5writeEPvhPKht>:



int32_t LPS22HH::write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 800432a:	b580      	push	{r7, lr}
 800432c:	b088      	sub	sp, #32
 800432e:	af04      	add	r7, sp, #16
 8004330:	60f8      	str	r0, [r7, #12]
 8004332:	607a      	str	r2, [r7, #4]
 8004334:	461a      	mov	r2, r3
 8004336:	460b      	mov	r3, r1
 8004338:	72fb      	strb	r3, [r7, #11]
 800433a:	4613      	mov	r3, r2
 800433c:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write((I2C_HandleTypeDef*) handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 800433e:	7afb      	ldrb	r3, [r7, #11]
 8004340:	b29a      	uxth	r2, r3
 8004342:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004346:	9302      	str	r3, [sp, #8]
 8004348:	893b      	ldrh	r3, [r7, #8]
 800434a:	9301      	str	r3, [sp, #4]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	9300      	str	r3, [sp, #0]
 8004350:	2301      	movs	r3, #1
 8004352:	21b9      	movs	r1, #185	; 0xb9
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f001 fe39 	bl	8005fcc <HAL_I2C_Mem_Write>
  return 0;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <_ZN7LPS22HH4readEPvhPht>:

int32_t LPS22HH::read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 8004364:	b580      	push	{r7, lr}
 8004366:	b088      	sub	sp, #32
 8004368:	af04      	add	r7, sp, #16
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	607a      	str	r2, [r7, #4]
 800436e:	461a      	mov	r2, r3
 8004370:	460b      	mov	r3, r1
 8004372:	72fb      	strb	r3, [r7, #11]
 8004374:	4613      	mov	r3, r2
 8004376:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read((I2C_HandleTypeDef*) handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8004378:	7afb      	ldrb	r3, [r7, #11]
 800437a:	b29a      	uxth	r2, r3
 800437c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004380:	9302      	str	r3, [sp, #8]
 8004382:	893b      	ldrh	r3, [r7, #8]
 8004384:	9301      	str	r3, [sp, #4]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	9300      	str	r3, [sp, #0]
 800438a:	2301      	movs	r3, #1
 800438c:	21b9      	movs	r1, #185	; 0xb9
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f001 ff16 	bl	80061c0 <HAL_I2C_Mem_Read>
  return 0;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
	...

080043a0 <GPS_Init>:
		}
	}
}


void GPS_Init(UART_HandleTypeDef* data_uart){
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
	GPS_USART = data_uart;
 80043a8:	4a04      	ldr	r2, [pc, #16]	; (80043bc <GPS_Init+0x1c>)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6013      	str	r3, [r2, #0]
	print("GPS Init\r\n");
 80043ae:	4804      	ldr	r0, [pc, #16]	; (80043c0 <GPS_Init+0x20>)
 80043b0:	f7fc fe4a 	bl	8001048 <print>
}
 80043b4:	bf00      	nop
 80043b6:	3708      	adds	r7, #8
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	20005f78 	.word	0x20005f78
 80043c0:	08018050 	.word	0x08018050

080043c4 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80043c4:	b590      	push	{r4, r7, lr}
 80043c6:	b087      	sub	sp, #28
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	607a      	str	r2, [r7, #4]
 80043ce:	461a      	mov	r2, r3
 80043d0:	460b      	mov	r3, r1
 80043d2:	72fb      	strb	r3, [r7, #11]
 80043d4:	4613      	mov	r3, r2
 80043d6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	685c      	ldr	r4, [r3, #4]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6898      	ldr	r0, [r3, #8]
 80043e0:	893b      	ldrh	r3, [r7, #8]
 80043e2:	7af9      	ldrb	r1, [r7, #11]
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	47a0      	blx	r4
 80043e8:	6178      	str	r0, [r7, #20]

  return ret;
 80043ea:	697b      	ldr	r3, [r7, #20]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	371c      	adds	r7, #28
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd90      	pop	{r4, r7, pc}

080043f4 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80043f4:	b590      	push	{r4, r7, lr}
 80043f6:	b087      	sub	sp, #28
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	607a      	str	r2, [r7, #4]
 80043fe:	461a      	mov	r2, r3
 8004400:	460b      	mov	r3, r1
 8004402:	72fb      	strb	r3, [r7, #11]
 8004404:	4613      	mov	r3, r2
 8004406:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681c      	ldr	r4, [r3, #0]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6898      	ldr	r0, [r3, #8]
 8004410:	893b      	ldrh	r3, [r7, #8]
 8004412:	7af9      	ldrb	r1, [r7, #11]
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	47a0      	blx	r4
 8004418:	6178      	str	r0, [r7, #20]

  return ret;
 800441a:	697b      	ldr	r3, [r7, #20]
}
 800441c:	4618      	mov	r0, r3
 800441e:	371c      	adds	r7, #28
 8004420:	46bd      	mov	sp, r7
 8004422:	bd90      	pop	{r4, r7, pc}

08004424 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	ee07 3a90 	vmov	s15, r3
 8004432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004436:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004450 <lps22hh_from_lsb_to_hpa+0x2c>
 800443a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800443e:	eef0 7a66 	vmov.f32	s15, s13
}
 8004442:	eeb0 0a67 	vmov.f32	s0, s15
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr
 8004450:	49800000 	.word	0x49800000

08004454 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	4603      	mov	r3, r0
 800445c:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 800445e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004462:	ee07 3a90 	vmov	s15, r3
 8004466:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800446a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004484 <lps22hh_from_lsb_to_celsius+0x30>
 800446e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004472:	eef0 7a66 	vmov.f32	s15, s13
}
 8004476:	eeb0 0a67 	vmov.f32	s0, s15
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr
 8004484:	42c80000 	.word	0x42c80000

08004488 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	460b      	mov	r3, r1
 8004492:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8004494:	f107 0208 	add.w	r2, r7, #8
 8004498:	2301      	movs	r3, #1
 800449a:	2110      	movs	r1, #16
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f7ff ff91 	bl	80043c4 <lps22hh_read_reg>
 80044a2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10f      	bne.n	80044ca <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80044aa:	78fb      	ldrb	r3, [r7, #3]
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	b2da      	uxtb	r2, r3
 80044b2:	7a3b      	ldrb	r3, [r7, #8]
 80044b4:	f362 0341 	bfi	r3, r2, #1, #1
 80044b8:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80044ba:	f107 0208 	add.w	r2, r7, #8
 80044be:	2301      	movs	r3, #1
 80044c0:	2110      	movs	r1, #16
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7ff ff96 	bl	80043f4 <lps22hh_write_reg>
 80044c8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80044ca:	68fb      	ldr	r3, [r7, #12]
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	460b      	mov	r3, r1
 80044de:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80044e0:	f107 0210 	add.w	r2, r7, #16
 80044e4:	2301      	movs	r3, #1
 80044e6:	2110      	movs	r1, #16
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f7ff ff6b 	bl	80043c4 <lps22hh_read_reg>
 80044ee:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d107      	bne.n	8004506 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80044f6:	f107 020c 	add.w	r2, r7, #12
 80044fa:	2301      	movs	r3, #1
 80044fc:	2111      	movs	r1, #17
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f7ff ff60 	bl	80043c4 <lps22hh_read_reg>
 8004504:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d10f      	bne.n	800452c <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 800450c:	78fb      	ldrb	r3, [r7, #3]
 800450e:	f003 0307 	and.w	r3, r3, #7
 8004512:	b2da      	uxtb	r2, r3
 8004514:	7c3b      	ldrb	r3, [r7, #16]
 8004516:	f362 1306 	bfi	r3, r2, #4, #3
 800451a:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800451c:	f107 0210 	add.w	r2, r7, #16
 8004520:	2301      	movs	r3, #1
 8004522:	2110      	movs	r1, #16
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f7ff ff65 	bl	80043f4 <lps22hh_write_reg>
 800452a:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d119      	bne.n	8004566 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8004532:	78fb      	ldrb	r3, [r7, #3]
 8004534:	091b      	lsrs	r3, r3, #4
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	b2da      	uxtb	r2, r3
 800453c:	7b3b      	ldrb	r3, [r7, #12]
 800453e:	f362 0341 	bfi	r3, r2, #1, #1
 8004542:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8004544:	78fb      	ldrb	r3, [r7, #3]
 8004546:	08db      	lsrs	r3, r3, #3
 8004548:	f003 0301 	and.w	r3, r3, #1
 800454c:	b2da      	uxtb	r2, r3
 800454e:	7b3b      	ldrb	r3, [r7, #12]
 8004550:	f362 0300 	bfi	r3, r2, #0, #1
 8004554:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8004556:	f107 020c 	add.w	r2, r7, #12
 800455a:	2301      	movs	r3, #1
 800455c:	2111      	movs	r1, #17
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f7ff ff48 	bl	80043f4 <lps22hh_write_reg>
 8004564:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8004566:	697b      	ldr	r3, [r7, #20]
}
 8004568:	4618      	mov	r0, r3
 800456a:	3718      	adds	r7, #24
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <lps22hh_press_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_press_flag_data_ready_get(stmdev_ctx_t *ctx,
                                          uint8_t *val)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 800457a:	f107 0208 	add.w	r2, r7, #8
 800457e:	2301      	movs	r3, #1
 8004580:	2127      	movs	r1, #39	; 0x27
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f7ff ff1e 	bl	80043c4 <lps22hh_read_reg>
 8004588:	60f8      	str	r0, [r7, #12]
  *val = reg.p_da;
 800458a:	7a3b      	ldrb	r3, [r7, #8]
 800458c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004590:	b2db      	uxtb	r3, r3
 8004592:	461a      	mov	r2, r3
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	701a      	strb	r2, [r3, #0]

  return ret;
 8004598:	68fb      	ldr	r3, [r7, #12]
}
 800459a:	4618      	mov	r0, r3
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <lps22hh_temp_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b084      	sub	sp, #16
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
 80045aa:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 80045ac:	f107 0208 	add.w	r2, r7, #8
 80045b0:	2301      	movs	r3, #1
 80045b2:	2127      	movs	r1, #39	; 0x27
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f7ff ff05 	bl	80043c4 <lps22hh_read_reg>
 80045ba:	60f8      	str	r0, [r7, #12]
  *val = reg.t_da;
 80045bc:	7a3b      	ldrb	r3, [r7, #8]
 80045be:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	461a      	mov	r2, r3
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	701a      	strb	r2, [r3, #0]

  return ret;
 80045ca:	68fb      	ldr	r3, [r7, #12]
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 80045de:	f107 0208 	add.w	r2, r7, #8
 80045e2:	2303      	movs	r3, #3
 80045e4:	2128      	movs	r1, #40	; 0x28
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f7ff feec 	bl	80043c4 <lps22hh_read_reg>
 80045ec:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 80045ee:	7abb      	ldrb	r3, [r7, #10]
 80045f0:	461a      	mov	r2, r3
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	021b      	lsls	r3, r3, #8
 80045fc:	7a7a      	ldrb	r2, [r7, #9]
 80045fe:	441a      	add	r2, r3
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	021b      	lsls	r3, r3, #8
 800460a:	7a3a      	ldrb	r2, [r7, #8]
 800460c:	441a      	add	r2, r3
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	021a      	lsls	r2, r3, #8
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	601a      	str	r2, [r3, #0]

  return ret;
 800461c:	68fb      	ldr	r3, [r7, #12]
}
 800461e:	4618      	mov	r0, r3
 8004620:	3710      	adds	r7, #16
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8004626:	b580      	push	{r7, lr}
 8004628:	b084      	sub	sp, #16
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
 800462e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8004630:	f107 0208 	add.w	r2, r7, #8
 8004634:	2302      	movs	r3, #2
 8004636:	212b      	movs	r1, #43	; 0x2b
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f7ff fec3 	bl	80043c4 <lps22hh_read_reg>
 800463e:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8004640:	7a7b      	ldrb	r3, [r7, #9]
 8004642:	b21a      	sxth	r2, r3
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800464e:	b29b      	uxth	r3, r3
 8004650:	021b      	lsls	r3, r3, #8
 8004652:	b29a      	uxth	r2, r3
 8004654:	7a3b      	ldrb	r3, [r7, #8]
 8004656:	b29b      	uxth	r3, r3
 8004658:	4413      	add	r3, r2
 800465a:	b29b      	uxth	r3, r3
 800465c:	b21a      	sxth	r2, r3
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	801a      	strh	r2, [r3, #0]

  return ret;
 8004662:	68fb      	ldr	r3, [r7, #12]
}
 8004664:	4618      	mov	r0, r3
 8004666:	3710      	adds	r7, #16
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8004676:	2301      	movs	r3, #1
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	210f      	movs	r1, #15
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f7ff fea1 	bl	80043c4 <lps22hh_read_reg>
 8004682:	60f8      	str	r0, [r7, #12]

  return ret;
 8004684:	68fb      	ldr	r3, [r7, #12]
}
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b084      	sub	sp, #16
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
 8004696:	460b      	mov	r3, r1
 8004698:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 800469a:	f107 0208 	add.w	r2, r7, #8
 800469e:	2301      	movs	r3, #1
 80046a0:	2111      	movs	r1, #17
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f7ff fe8e 	bl	80043c4 <lps22hh_read_reg>
 80046a8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d10f      	bne.n	80046d0 <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 80046b0:	78fb      	ldrb	r3, [r7, #3]
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	b2da      	uxtb	r2, r3
 80046b8:	7a3b      	ldrb	r3, [r7, #8]
 80046ba:	f362 0382 	bfi	r3, r2, #2, #1
 80046be:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80046c0:	f107 0208 	add.w	r2, r7, #8
 80046c4:	2301      	movs	r3, #1
 80046c6:	2111      	movs	r1, #17
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f7ff fe93 	bl	80043f4 <lps22hh_write_reg>
 80046ce:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80046d0:	68fb      	ldr	r3, [r7, #12]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b084      	sub	sp, #16
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
 80046e2:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80046e4:	f107 0208 	add.w	r2, r7, #8
 80046e8:	2301      	movs	r3, #1
 80046ea:	2111      	movs	r1, #17
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f7ff fe69 	bl	80043c4 <lps22hh_read_reg>
 80046f2:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 80046f4:	7a3b      	ldrb	r3, [r7, #8]
 80046f6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	461a      	mov	r2, r3
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	701a      	strb	r2, [r3, #0]

  return ret;
 8004702:	68fb      	ldr	r3, [r7, #12]
}
 8004704:	4618      	mov	r0, r3
 8004706:	3710      	adds	r7, #16
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <lsm6dsr_read_reg>:
  *
  */
int32_t lsm6dsr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800470c:	b590      	push	{r4, r7, lr}
 800470e:	b087      	sub	sp, #28
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	607a      	str	r2, [r7, #4]
 8004716:	461a      	mov	r2, r3
 8004718:	460b      	mov	r3, r1
 800471a:	72fb      	strb	r3, [r7, #11]
 800471c:	4613      	mov	r3, r2
 800471e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	685c      	ldr	r4, [r3, #4]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6898      	ldr	r0, [r3, #8]
 8004728:	893b      	ldrh	r3, [r7, #8]
 800472a:	7af9      	ldrb	r1, [r7, #11]
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	47a0      	blx	r4
 8004730:	6178      	str	r0, [r7, #20]

  return ret;
 8004732:	697b      	ldr	r3, [r7, #20]
}
 8004734:	4618      	mov	r0, r3
 8004736:	371c      	adds	r7, #28
 8004738:	46bd      	mov	sp, r7
 800473a:	bd90      	pop	{r4, r7, pc}

0800473c <lsm6dsr_write_reg>:
  *
  */
int32_t lsm6dsr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800473c:	b590      	push	{r4, r7, lr}
 800473e:	b087      	sub	sp, #28
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	607a      	str	r2, [r7, #4]
 8004746:	461a      	mov	r2, r3
 8004748:	460b      	mov	r3, r1
 800474a:	72fb      	strb	r3, [r7, #11]
 800474c:	4613      	mov	r3, r2
 800474e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681c      	ldr	r4, [r3, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6898      	ldr	r0, [r3, #8]
 8004758:	893b      	ldrh	r3, [r7, #8]
 800475a:	7af9      	ldrb	r1, [r7, #11]
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	47a0      	blx	r4
 8004760:	6178      	str	r0, [r7, #20]

  return ret;
 8004762:	697b      	ldr	r3, [r7, #20]
}
 8004764:	4618      	mov	r0, r3
 8004766:	371c      	adds	r7, #28
 8004768:	46bd      	mov	sp, r7
 800476a:	bd90      	pop	{r4, r7, pc}

0800476c <lsm6dsr_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsr_from_fs2g_to_mg(int16_t lsb)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	4603      	mov	r3, r0
 8004774:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 8004776:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800477a:	ee07 3a90 	vmov	s15, r3
 800477e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004782:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004798 <lsm6dsr_from_fs2g_to_mg+0x2c>
 8004786:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800478a:	eeb0 0a67 	vmov.f32	s0, s15
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr
 8004798:	3d79db23 	.word	0x3d79db23

0800479c <lsm6dsr_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsr_from_fs2000dps_to_mdps(int16_t lsb)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	4603      	mov	r3, r0
 80047a4:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 80047a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047aa:	ee07 3a90 	vmov	s15, r3
 80047ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047b2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80047c8 <lsm6dsr_from_fs2000dps_to_mdps+0x2c>
 80047b6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80047ba:	eeb0 0a67 	vmov.f32	s0, s15
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr
 80047c8:	428c0000 	.word	0x428c0000

080047cc <lsm6dsr_from_lsb_to_celsius>:
{
  return ((float_t)lsb * 140.0f);
}

float_t lsm6dsr_from_lsb_to_celsius(int16_t lsb)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	4603      	mov	r3, r0
 80047d4:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 80047d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047da:	ee07 3a90 	vmov	s15, r3
 80047de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80047e2:	eddf 6a07 	vldr	s13, [pc, #28]	; 8004800 <lsm6dsr_from_lsb_to_celsius+0x34>
 80047e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80047ea:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80047ee:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 80047f2:	eeb0 0a67 	vmov.f32	s0, s15
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr
 8004800:	43800000 	.word	0x43800000

08004804 <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	460b      	mov	r3, r1
 800480e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8004810:	f107 0208 	add.w	r2, r7, #8
 8004814:	2301      	movs	r3, #1
 8004816:	2110      	movs	r1, #16
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f7ff ff77 	bl	800470c <lsm6dsr_read_reg>
 800481e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10f      	bne.n	8004846 <lsm6dsr_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 8004826:	78fb      	ldrb	r3, [r7, #3]
 8004828:	f003 0303 	and.w	r3, r3, #3
 800482c:	b2da      	uxtb	r2, r3
 800482e:	7a3b      	ldrb	r3, [r7, #8]
 8004830:	f362 0383 	bfi	r3, r2, #2, #2
 8004834:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8004836:	f107 0208 	add.w	r2, r7, #8
 800483a:	2301      	movs	r3, #1
 800483c:	2110      	movs	r1, #16
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f7ff ff7c 	bl	800473c <lsm6dsr_write_reg>
 8004844:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8004846:	68fb      	ldr	r3, [r7, #12]
}
 8004848:	4618      	mov	r0, r3
 800484a:	3710      	adds	r7, #16
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b086      	sub	sp, #24
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	460b      	mov	r3, r1
 800485a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_xl_t odr_xl =  val;
 800485c:	78fb      	ldrb	r3, [r7, #3]
 800485e:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8004860:	f107 030c 	add.w	r3, r7, #12
 8004864:	4619      	mov	r1, r3
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 fc54 	bl	8005114 <lsm6dsr_fsm_enable_get>
 800486c:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	2b00      	cmp	r3, #0
 8004872:	f040 80c4 	bne.w	80049fe <lsm6dsr_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004876:	7b3b      	ldrb	r3, [r7, #12]
 8004878:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800487c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800487e:	7b3b      	ldrb	r3, [r7, #12]
 8004880:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004884:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004886:	4313      	orrs	r3, r2
 8004888:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800488a:	7b3b      	ldrb	r3, [r7, #12]
 800488c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004890:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8004892:	4313      	orrs	r3, r2
 8004894:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8004896:	7b3b      	ldrb	r3, [r7, #12]
 8004898:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800489c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800489e:	4313      	orrs	r3, r2
 80048a0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80048a2:	7b3b      	ldrb	r3, [r7, #12]
 80048a4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80048a8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80048aa:	4313      	orrs	r3, r2
 80048ac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80048ae:	7b3b      	ldrb	r3, [r7, #12]
 80048b0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80048b4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80048b6:	4313      	orrs	r3, r2
 80048b8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80048ba:	7b3b      	ldrb	r3, [r7, #12]
 80048bc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80048c0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80048c2:	4313      	orrs	r3, r2
 80048c4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80048c6:	7b3b      	ldrb	r3, [r7, #12]
 80048c8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80048cc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80048ce:	4313      	orrs	r3, r2
 80048d0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80048d2:	7b7b      	ldrb	r3, [r7, #13]
 80048d4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80048d8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80048da:	4313      	orrs	r3, r2
 80048dc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80048de:	7b7b      	ldrb	r3, [r7, #13]
 80048e0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80048e4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80048e6:	4313      	orrs	r3, r2
 80048e8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80048ea:	7b7b      	ldrb	r3, [r7, #13]
 80048ec:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80048f0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80048f2:	4313      	orrs	r3, r2
 80048f4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80048f6:	7b7b      	ldrb	r3, [r7, #13]
 80048f8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80048fc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80048fe:	4313      	orrs	r3, r2
 8004900:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8004902:	7b7b      	ldrb	r3, [r7, #13]
 8004904:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004908:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800490a:	4313      	orrs	r3, r2
 800490c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800490e:	7b7b      	ldrb	r3, [r7, #13]
 8004910:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004914:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8004916:	4313      	orrs	r3, r2
 8004918:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800491a:	7b7b      	ldrb	r3, [r7, #13]
 800491c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004920:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8004922:	4313      	orrs	r3, r2
 8004924:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8004926:	7b7b      	ldrb	r3, [r7, #13]
 8004928:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800492c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800492e:	4313      	orrs	r3, r2
 8004930:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004932:	2b01      	cmp	r3, #1
 8004934:	d163      	bne.n	80049fe <lsm6dsr_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8004936:	f107 030b 	add.w	r3, r7, #11
 800493a:	4619      	mov	r1, r3
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 fc15 	bl	800516c <lsm6dsr_fsm_data_rate_get>
 8004942:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d159      	bne.n	80049fe <lsm6dsr_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 800494a:	7afb      	ldrb	r3, [r7, #11]
 800494c:	2b03      	cmp	r3, #3
 800494e:	d853      	bhi.n	80049f8 <lsm6dsr_xl_data_rate_set+0x1a8>
 8004950:	a201      	add	r2, pc, #4	; (adr r2, 8004958 <lsm6dsr_xl_data_rate_set+0x108>)
 8004952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004956:	bf00      	nop
 8004958:	08004969 	.word	0x08004969
 800495c:	0800497b 	.word	0x0800497b
 8004960:	08004999 	.word	0x08004999
 8004964:	080049c3 	.word	0x080049c3
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF)
 8004968:	78fb      	ldrb	r3, [r7, #3]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d102      	bne.n	8004974 <lsm6dsr_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 800496e:	2301      	movs	r3, #1
 8004970:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004972:	e045      	b.n	8004a00 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8004974:	78fb      	ldrb	r3, [r7, #3]
 8004976:	75fb      	strb	r3, [r7, #23]
            break;
 8004978:	e042      	b.n	8004a00 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 800497a:	78fb      	ldrb	r3, [r7, #3]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d102      	bne.n	8004986 <lsm6dsr_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8004980:	2302      	movs	r3, #2
 8004982:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004984:	e03c      	b.n	8004a00 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8004986:	78fb      	ldrb	r3, [r7, #3]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d102      	bne.n	8004992 <lsm6dsr_xl_data_rate_set+0x142>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 800498c:	2302      	movs	r3, #2
 800498e:	75fb      	strb	r3, [r7, #23]
            break;
 8004990:	e036      	b.n	8004a00 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8004992:	78fb      	ldrb	r3, [r7, #3]
 8004994:	75fb      	strb	r3, [r7, #23]
            break;
 8004996:	e033      	b.n	8004a00 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8004998:	78fb      	ldrb	r3, [r7, #3]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d102      	bne.n	80049a4 <lsm6dsr_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 800499e:	2303      	movs	r3, #3
 80049a0:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80049a2:	e02d      	b.n	8004a00 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 80049a4:	78fb      	ldrb	r3, [r7, #3]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d102      	bne.n	80049b0 <lsm6dsr_xl_data_rate_set+0x160>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 80049aa:	2303      	movs	r3, #3
 80049ac:	75fb      	strb	r3, [r7, #23]
            break;
 80049ae:	e027      	b.n	8004a00 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 80049b0:	78fb      	ldrb	r3, [r7, #3]
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d102      	bne.n	80049bc <lsm6dsr_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 80049b6:	2303      	movs	r3, #3
 80049b8:	75fb      	strb	r3, [r7, #23]
            break;
 80049ba:	e021      	b.n	8004a00 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80049bc:	78fb      	ldrb	r3, [r7, #3]
 80049be:	75fb      	strb	r3, [r7, #23]
            break;
 80049c0:	e01e      	b.n	8004a00 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 80049c2:	78fb      	ldrb	r3, [r7, #3]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d102      	bne.n	80049ce <lsm6dsr_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80049c8:	2304      	movs	r3, #4
 80049ca:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80049cc:	e018      	b.n	8004a00 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 80049ce:	78fb      	ldrb	r3, [r7, #3]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d102      	bne.n	80049da <lsm6dsr_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80049d4:	2304      	movs	r3, #4
 80049d6:	75fb      	strb	r3, [r7, #23]
            break;
 80049d8:	e012      	b.n	8004a00 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 80049da:	78fb      	ldrb	r3, [r7, #3]
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d102      	bne.n	80049e6 <lsm6dsr_xl_data_rate_set+0x196>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80049e0:	2304      	movs	r3, #4
 80049e2:	75fb      	strb	r3, [r7, #23]
            break;
 80049e4:	e00c      	b.n	8004a00 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_52Hz)
 80049e6:	78fb      	ldrb	r3, [r7, #3]
 80049e8:	2b03      	cmp	r3, #3
 80049ea:	d102      	bne.n	80049f2 <lsm6dsr_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80049ec:	2304      	movs	r3, #4
 80049ee:	75fb      	strb	r3, [r7, #23]
            break;
 80049f0:	e006      	b.n	8004a00 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80049f2:	78fb      	ldrb	r3, [r7, #3]
 80049f4:	75fb      	strb	r3, [r7, #23]
            break;
 80049f6:	e003      	b.n	8004a00 <lsm6dsr_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 80049f8:	78fb      	ldrb	r3, [r7, #3]
 80049fa:	75fb      	strb	r3, [r7, #23]
            break;
 80049fc:	e000      	b.n	8004a00 <lsm6dsr_xl_data_rate_set+0x1b0>
        }
      }
 80049fe:	bf00      	nop
    }
  }

  if (ret == 0)
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d107      	bne.n	8004a16 <lsm6dsr_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8004a06:	f107 0208 	add.w	r2, r7, #8
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	2110      	movs	r1, #16
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7ff fe7c 	bl	800470c <lsm6dsr_read_reg>
 8004a14:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d10f      	bne.n	8004a3c <lsm6dsr_xl_data_rate_set+0x1ec>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8004a1c:	7dfb      	ldrb	r3, [r7, #23]
 8004a1e:	f003 030f 	and.w	r3, r3, #15
 8004a22:	b2da      	uxtb	r2, r3
 8004a24:	7a3b      	ldrb	r3, [r7, #8]
 8004a26:	f362 1307 	bfi	r3, r2, #4, #4
 8004a2a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8004a2c:	f107 0208 	add.w	r2, r7, #8
 8004a30:	2301      	movs	r3, #1
 8004a32:	2110      	movs	r1, #16
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f7ff fe81 	bl	800473c <lsm6dsr_write_reg>
 8004a3a:	6138      	str	r0, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8004a3c:	693b      	ldr	r3, [r7, #16]
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3718      	adds	r7, #24
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop

08004a48 <lsm6dsr_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t val)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	460b      	mov	r3, r1
 8004a52:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004a54:	f107 0208 	add.w	r2, r7, #8
 8004a58:	2301      	movs	r3, #1
 8004a5a:	2111      	movs	r1, #17
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f7ff fe55 	bl	800470c <lsm6dsr_read_reg>
 8004a62:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10f      	bne.n	8004a8a <lsm6dsr_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 8004a6a:	78fb      	ldrb	r3, [r7, #3]
 8004a6c:	f003 030f 	and.w	r3, r3, #15
 8004a70:	b2da      	uxtb	r2, r3
 8004a72:	7a3b      	ldrb	r3, [r7, #8]
 8004a74:	f362 0303 	bfi	r3, r2, #0, #4
 8004a78:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004a7a:	f107 0208 	add.w	r2, r7, #8
 8004a7e:	2301      	movs	r3, #1
 8004a80:	2111      	movs	r1, #17
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7ff fe5a 	bl	800473c <lsm6dsr_write_reg>
 8004a88:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3710      	adds	r7, #16
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b086      	sub	sp, #24
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_g_t odr_gy =  val;
 8004aa0:	78fb      	ldrb	r3, [r7, #3]
 8004aa2:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8004aa4:	f107 030c 	add.w	r3, r7, #12
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 fb32 	bl	8005114 <lsm6dsr_fsm_enable_get>
 8004ab0:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f040 80c4 	bne.w	8004c42 <lsm6dsr_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004aba:	7b3b      	ldrb	r3, [r7, #12]
 8004abc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004ac0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8004ac2:	7b3b      	ldrb	r3, [r7, #12]
 8004ac4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004ac8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004aca:	4313      	orrs	r3, r2
 8004acc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8004ace:	7b3b      	ldrb	r3, [r7, #12]
 8004ad0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004ad4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8004ada:	7b3b      	ldrb	r3, [r7, #12]
 8004adc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004ae0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8004ae6:	7b3b      	ldrb	r3, [r7, #12]
 8004ae8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004aec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8004aee:	4313      	orrs	r3, r2
 8004af0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8004af2:	7b3b      	ldrb	r3, [r7, #12]
 8004af4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004af8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8004afa:	4313      	orrs	r3, r2
 8004afc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8004afe:	7b3b      	ldrb	r3, [r7, #12]
 8004b00:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004b04:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8004b06:	4313      	orrs	r3, r2
 8004b08:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8004b0a:	7b3b      	ldrb	r3, [r7, #12]
 8004b0c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004b10:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8004b12:	4313      	orrs	r3, r2
 8004b14:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8004b16:	7b7b      	ldrb	r3, [r7, #13]
 8004b18:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004b1c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8004b22:	7b7b      	ldrb	r3, [r7, #13]
 8004b24:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004b28:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8004b2e:	7b7b      	ldrb	r3, [r7, #13]
 8004b30:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004b34:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8004b36:	4313      	orrs	r3, r2
 8004b38:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8004b3a:	7b7b      	ldrb	r3, [r7, #13]
 8004b3c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004b40:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8004b42:	4313      	orrs	r3, r2
 8004b44:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8004b46:	7b7b      	ldrb	r3, [r7, #13]
 8004b48:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004b4c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8004b52:	7b7b      	ldrb	r3, [r7, #13]
 8004b54:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004b58:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8004b5e:	7b7b      	ldrb	r3, [r7, #13]
 8004b60:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004b64:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8004b66:	4313      	orrs	r3, r2
 8004b68:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8004b6a:	7b7b      	ldrb	r3, [r7, #13]
 8004b6c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004b70:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8004b72:	4313      	orrs	r3, r2
 8004b74:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d163      	bne.n	8004c42 <lsm6dsr_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8004b7a:	f107 030b 	add.w	r3, r7, #11
 8004b7e:	4619      	mov	r1, r3
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 faf3 	bl	800516c <lsm6dsr_fsm_data_rate_get>
 8004b86:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d159      	bne.n	8004c42 <lsm6dsr_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8004b8e:	7afb      	ldrb	r3, [r7, #11]
 8004b90:	2b03      	cmp	r3, #3
 8004b92:	d853      	bhi.n	8004c3c <lsm6dsr_gy_data_rate_set+0x1a8>
 8004b94:	a201      	add	r2, pc, #4	; (adr r2, 8004b9c <lsm6dsr_gy_data_rate_set+0x108>)
 8004b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9a:	bf00      	nop
 8004b9c:	08004bad 	.word	0x08004bad
 8004ba0:	08004bbf 	.word	0x08004bbf
 8004ba4:	08004bdd 	.word	0x08004bdd
 8004ba8:	08004c07 	.word	0x08004c07
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF)
 8004bac:	78fb      	ldrb	r3, [r7, #3]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d102      	bne.n	8004bb8 <lsm6dsr_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8004bb6:	e045      	b.n	8004c44 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8004bb8:	78fb      	ldrb	r3, [r7, #3]
 8004bba:	75fb      	strb	r3, [r7, #23]
            break;
 8004bbc:	e042      	b.n	8004c44 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8004bbe:	78fb      	ldrb	r3, [r7, #3]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d102      	bne.n	8004bca <lsm6dsr_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8004bc4:	2302      	movs	r3, #2
 8004bc6:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8004bc8:	e03c      	b.n	8004c44 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8004bca:	78fb      	ldrb	r3, [r7, #3]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d102      	bne.n	8004bd6 <lsm6dsr_gy_data_rate_set+0x142>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	75fb      	strb	r3, [r7, #23]
            break;
 8004bd4:	e036      	b.n	8004c44 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8004bd6:	78fb      	ldrb	r3, [r7, #3]
 8004bd8:	75fb      	strb	r3, [r7, #23]
            break;
 8004bda:	e033      	b.n	8004c44 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8004bdc:	78fb      	ldrb	r3, [r7, #3]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d102      	bne.n	8004be8 <lsm6dsr_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8004be2:	2303      	movs	r3, #3
 8004be4:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8004be6:	e02d      	b.n	8004c44 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8004be8:	78fb      	ldrb	r3, [r7, #3]
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d102      	bne.n	8004bf4 <lsm6dsr_gy_data_rate_set+0x160>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	75fb      	strb	r3, [r7, #23]
            break;
 8004bf2:	e027      	b.n	8004c44 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 8004bf4:	78fb      	ldrb	r3, [r7, #3]
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d102      	bne.n	8004c00 <lsm6dsr_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	75fb      	strb	r3, [r7, #23]
            break;
 8004bfe:	e021      	b.n	8004c44 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8004c00:	78fb      	ldrb	r3, [r7, #3]
 8004c02:	75fb      	strb	r3, [r7, #23]
            break;
 8004c04:	e01e      	b.n	8004c44 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8004c06:	78fb      	ldrb	r3, [r7, #3]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d102      	bne.n	8004c12 <lsm6dsr_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8004c0c:	2304      	movs	r3, #4
 8004c0e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8004c10:	e018      	b.n	8004c44 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8004c12:	78fb      	ldrb	r3, [r7, #3]
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d102      	bne.n	8004c1e <lsm6dsr_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8004c18:	2304      	movs	r3, #4
 8004c1a:	75fb      	strb	r3, [r7, #23]
            break;
 8004c1c:	e012      	b.n	8004c44 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 8004c1e:	78fb      	ldrb	r3, [r7, #3]
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d102      	bne.n	8004c2a <lsm6dsr_gy_data_rate_set+0x196>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8004c24:	2304      	movs	r3, #4
 8004c26:	75fb      	strb	r3, [r7, #23]
            break;
 8004c28:	e00c      	b.n	8004c44 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_52Hz)
 8004c2a:	78fb      	ldrb	r3, [r7, #3]
 8004c2c:	2b03      	cmp	r3, #3
 8004c2e:	d102      	bne.n	8004c36 <lsm6dsr_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8004c30:	2304      	movs	r3, #4
 8004c32:	75fb      	strb	r3, [r7, #23]
            break;
 8004c34:	e006      	b.n	8004c44 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8004c36:	78fb      	ldrb	r3, [r7, #3]
 8004c38:	75fb      	strb	r3, [r7, #23]
            break;
 8004c3a:	e003      	b.n	8004c44 <lsm6dsr_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8004c3c:	78fb      	ldrb	r3, [r7, #3]
 8004c3e:	75fb      	strb	r3, [r7, #23]
            break;
 8004c40:	e000      	b.n	8004c44 <lsm6dsr_gy_data_rate_set+0x1b0>
        }
      }
 8004c42:	bf00      	nop
    }
  }

  if (ret == 0)
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d107      	bne.n	8004c5a <lsm6dsr_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004c4a:	f107 0208 	add.w	r2, r7, #8
 8004c4e:	2301      	movs	r3, #1
 8004c50:	2111      	movs	r1, #17
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f7ff fd5a 	bl	800470c <lsm6dsr_read_reg>
 8004c58:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d10f      	bne.n	8004c80 <lsm6dsr_gy_data_rate_set+0x1ec>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8004c60:	7dfb      	ldrb	r3, [r7, #23]
 8004c62:	f003 030f 	and.w	r3, r3, #15
 8004c66:	b2da      	uxtb	r2, r3
 8004c68:	7a3b      	ldrb	r3, [r7, #8]
 8004c6a:	f362 1307 	bfi	r3, r2, #4, #4
 8004c6e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004c70:	f107 0208 	add.w	r2, r7, #8
 8004c74:	2301      	movs	r3, #1
 8004c76:	2111      	movs	r1, #17
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f7ff fd5f 	bl	800473c <lsm6dsr_write_reg>
 8004c7e:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8004c80:	693b      	ldr	r3, [r7, #16]
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3718      	adds	r7, #24
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop

08004c8c <lsm6dsr_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	460b      	mov	r3, r1
 8004c96:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8004c98:	f107 0208 	add.w	r2, r7, #8
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	2112      	movs	r1, #18
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f7ff fd33 	bl	800470c <lsm6dsr_read_reg>
 8004ca6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d10f      	bne.n	8004cce <lsm6dsr_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 8004cae:	78fb      	ldrb	r3, [r7, #3]
 8004cb0:	f003 0301 	and.w	r3, r3, #1
 8004cb4:	b2da      	uxtb	r2, r3
 8004cb6:	7a3b      	ldrb	r3, [r7, #8]
 8004cb8:	f362 1386 	bfi	r3, r2, #6, #1
 8004cbc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8004cbe:	f107 0208 	add.w	r2, r7, #8
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	2112      	movs	r1, #18
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f7ff fd38 	bl	800473c <lsm6dsr_write_reg>
 8004ccc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004cce:	68fb      	ldr	r3, [r7, #12]
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3710      	adds	r7, #16
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <lsm6dsr_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8004ce2:	f107 0208 	add.w	r2, r7, #8
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	211e      	movs	r1, #30
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f7ff fd0e 	bl	800470c <lsm6dsr_read_reg>
 8004cf0:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 8004cf2:	7a3b      	ldrb	r3, [r7, #8]
 8004cf4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	701a      	strb	r2, [r3, #0]

  return ret;
 8004d00:	68fb      	ldr	r3, [r7, #12]
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <lsm6dsr_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b084      	sub	sp, #16
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
 8004d12:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8004d14:	f107 0208 	add.w	r2, r7, #8
 8004d18:	2301      	movs	r3, #1
 8004d1a:	211e      	movs	r1, #30
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f7ff fcf5 	bl	800470c <lsm6dsr_read_reg>
 8004d22:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 8004d24:	7a3b      	ldrb	r3, [r7, #8]
 8004d26:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	701a      	strb	r2, [r3, #0]

  return ret;
 8004d32:	68fb      	ldr	r3, [r7, #12]
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3710      	adds	r7, #16
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <lsm6dsr_temp_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8004d46:	f107 0208 	add.w	r2, r7, #8
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	211e      	movs	r1, #30
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f7ff fcdc 	bl	800470c <lsm6dsr_read_reg>
 8004d54:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.tda;
 8004d56:	7a3b      	ldrb	r3, [r7, #8]
 8004d58:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	461a      	mov	r2, r3
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	701a      	strb	r2, [r3, #0]

  return ret;
 8004d64:	68fb      	ldr	r3, [r7, #12]
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3710      	adds	r7, #16
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <lsm6dsr_temperature_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b084      	sub	sp, #16
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
 8004d76:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUT_TEMP_L, buff, 2);
 8004d78:	f107 0208 	add.w	r2, r7, #8
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	2120      	movs	r1, #32
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f7ff fcc3 	bl	800470c <lsm6dsr_read_reg>
 8004d86:	60f8      	str	r0, [r7, #12]
  val[0] = (int16_t)buff[1];
 8004d88:	7a7b      	ldrb	r3, [r7, #9]
 8004d8a:	b21a      	sxth	r2, r3
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	021b      	lsls	r3, r3, #8
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	7a3b      	ldrb	r3, [r7, #8]
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	4413      	add	r3, r2
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	b21a      	sxth	r2, r3
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	801a      	strh	r2, [r3, #0]

  return ret;
 8004daa:	68fb      	ldr	r3, [r7, #12]
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3710      	adds	r7, #16
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <lsm6dsr_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b086      	sub	sp, #24
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_G, buff, 6);
 8004dbe:	f107 020c 	add.w	r2, r7, #12
 8004dc2:	2306      	movs	r3, #6
 8004dc4:	2122      	movs	r1, #34	; 0x22
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f7ff fca0 	bl	800470c <lsm6dsr_read_reg>
 8004dcc:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004dce:	7b7b      	ldrb	r3, [r7, #13]
 8004dd0:	b21a      	sxth	r2, r3
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	021b      	lsls	r3, r3, #8
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	7b3b      	ldrb	r3, [r7, #12]
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	4413      	add	r3, r2
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	b21a      	sxth	r2, r3
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004df0:	7bfa      	ldrb	r2, [r7, #15]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	3302      	adds	r3, #2
 8004df6:	b212      	sxth	r2, r2
 8004df8:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	3302      	adds	r3, #2
 8004dfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	021b      	lsls	r3, r3, #8
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	7bbb      	ldrb	r3, [r7, #14]
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	4413      	add	r3, r2
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	3302      	adds	r3, #2
 8004e14:	b212      	sxth	r2, r2
 8004e16:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004e18:	7c7a      	ldrb	r2, [r7, #17]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	3304      	adds	r3, #4
 8004e1e:	b212      	sxth	r2, r2
 8004e20:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	3304      	adds	r3, #4
 8004e26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	021b      	lsls	r3, r3, #8
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	7c3b      	ldrb	r3, [r7, #16]
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	4413      	add	r3, r2
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	b212      	sxth	r2, r2
 8004e3e:	801a      	strh	r2, [r3, #0]

  return ret;
 8004e40:	697b      	ldr	r3, [r7, #20]
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3718      	adds	r7, #24
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <lsm6dsr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b086      	sub	sp, #24
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
 8004e52:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_A, buff, 6);
 8004e54:	f107 020c 	add.w	r2, r7, #12
 8004e58:	2306      	movs	r3, #6
 8004e5a:	2128      	movs	r1, #40	; 0x28
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f7ff fc55 	bl	800470c <lsm6dsr_read_reg>
 8004e62:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004e64:	7b7b      	ldrb	r3, [r7, #13]
 8004e66:	b21a      	sxth	r2, r3
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	021b      	lsls	r3, r3, #8
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	7b3b      	ldrb	r3, [r7, #12]
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	4413      	add	r3, r2
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	b21a      	sxth	r2, r3
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004e86:	7bfa      	ldrb	r2, [r7, #15]
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	3302      	adds	r3, #2
 8004e8c:	b212      	sxth	r2, r2
 8004e8e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	3302      	adds	r3, #2
 8004e94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	021b      	lsls	r3, r3, #8
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	7bbb      	ldrb	r3, [r7, #14]
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	4413      	add	r3, r2
 8004ea4:	b29a      	uxth	r2, r3
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	3302      	adds	r3, #2
 8004eaa:	b212      	sxth	r2, r2
 8004eac:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004eae:	7c7a      	ldrb	r2, [r7, #17]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	3304      	adds	r3, #4
 8004eb4:	b212      	sxth	r2, r2
 8004eb6:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	3304      	adds	r3, #4
 8004ebc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	021b      	lsls	r3, r3, #8
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	7c3b      	ldrb	r3, [r7, #16]
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	4413      	add	r3, r2
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	3304      	adds	r3, #4
 8004ed2:	b212      	sxth	r2, r2
 8004ed4:	801a      	strh	r2, [r3, #0]

  return ret;
 8004ed6:	697b      	ldr	r3, [r7, #20]
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3718      	adds	r7, #24
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	460b      	mov	r3, r1
 8004eea:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8004eec:	f107 0208 	add.w	r2, r7, #8
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	2101      	movs	r1, #1
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f7ff fc09 	bl	800470c <lsm6dsr_read_reg>
 8004efa:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10f      	bne.n	8004f22 <lsm6dsr_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 8004f02:	78fb      	ldrb	r3, [r7, #3]
 8004f04:	f003 0303 	and.w	r3, r3, #3
 8004f08:	b2da      	uxtb	r2, r3
 8004f0a:	7a3b      	ldrb	r3, [r7, #8]
 8004f0c:	f362 1387 	bfi	r3, r2, #6, #2
 8004f10:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8004f12:	f107 0208 	add.w	r2, r7, #8
 8004f16:	2301      	movs	r3, #1
 8004f18:	2101      	movs	r1, #1
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7ff fc0e 	bl	800473c <lsm6dsr_write_reg>
 8004f20:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 8004f22:	68fb      	ldr	r3, [r7, #12]
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 8004f36:	2301      	movs	r3, #1
 8004f38:	683a      	ldr	r2, [r7, #0]
 8004f3a:	210f      	movs	r1, #15
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f7ff fbe5 	bl	800470c <lsm6dsr_read_reg>
 8004f42:	60f8      	str	r0, [r7, #12]

  return ret;
 8004f44:	68fb      	ldr	r3, [r7, #12]
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3710      	adds	r7, #16
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <lsm6dsr_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b084      	sub	sp, #16
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
 8004f56:	460b      	mov	r3, r1
 8004f58:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8004f5a:	f107 0208 	add.w	r2, r7, #8
 8004f5e:	2301      	movs	r3, #1
 8004f60:	2112      	movs	r1, #18
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f7ff fbd2 	bl	800470c <lsm6dsr_read_reg>
 8004f68:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d10f      	bne.n	8004f90 <lsm6dsr_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 8004f70:	78fb      	ldrb	r3, [r7, #3]
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	b2da      	uxtb	r2, r3
 8004f78:	7a3b      	ldrb	r3, [r7, #8]
 8004f7a:	f362 0300 	bfi	r3, r2, #0, #1
 8004f7e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8004f80:	f107 0208 	add.w	r2, r7, #8
 8004f84:	2301      	movs	r3, #1
 8004f86:	2112      	movs	r1, #18
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f7ff fbd7 	bl	800473c <lsm6dsr_write_reg>
 8004f8e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004f90:	68fb      	ldr	r3, [r7, #12]
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3710      	adds	r7, #16
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <lsm6dsr_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b084      	sub	sp, #16
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
 8004fa2:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8004fa4:	f107 0208 	add.w	r2, r7, #8
 8004fa8:	2301      	movs	r3, #1
 8004faa:	2112      	movs	r1, #18
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f7ff fbad 	bl	800470c <lsm6dsr_read_reg>
 8004fb2:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 8004fb4:	7a3b      	ldrb	r3, [r7, #8]
 8004fb6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	701a      	strb	r2, [r3, #0]

  return ret;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <lsm6dsr_xl_filter_lp2_set>:
  * @param  val    Change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_filter_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8004fd8:	f107 0208 	add.w	r2, r7, #8
 8004fdc:	2301      	movs	r3, #1
 8004fde:	2110      	movs	r1, #16
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f7ff fb93 	bl	800470c <lsm6dsr_read_reg>
 8004fe6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d10f      	bne.n	800500e <lsm6dsr_xl_filter_lp2_set+0x42>
  {
    ctrl1_xl.lpf2_xl_en = (uint8_t)val;
 8004fee:	78fb      	ldrb	r3, [r7, #3]
 8004ff0:	f003 0301 	and.w	r3, r3, #1
 8004ff4:	b2da      	uxtb	r2, r3
 8004ff6:	7a3b      	ldrb	r3, [r7, #8]
 8004ff8:	f362 0341 	bfi	r3, r2, #1, #1
 8004ffc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8004ffe:	f107 0208 	add.w	r2, r7, #8
 8005002:	2301      	movs	r3, #1
 8005004:	2110      	movs	r1, #16
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f7ff fb98 	bl	800473c <lsm6dsr_write_reg>
 800500c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 800500e:	68fb      	ldr	r3, [r7, #12]
}
 8005010:	4618      	mov	r0, r3
 8005012:	3710      	adds	r7, #16
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <lsm6dsr_xl_hp_path_on_out_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                      lsm6dsr_hp_slope_xl_en_t val)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	460b      	mov	r3, r1
 8005022:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 8005024:	f107 0208 	add.w	r2, r7, #8
 8005028:	2301      	movs	r3, #1
 800502a:	2117      	movs	r1, #23
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f7ff fb6d 	bl	800470c <lsm6dsr_read_reg>
 8005032:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d121      	bne.n	800507e <lsm6dsr_xl_hp_path_on_out_set+0x66>
  {
    ctrl8_xl.hp_slope_xl_en = (((uint8_t)val & 0x10U) >> 4);
 800503a:	78fb      	ldrb	r3, [r7, #3]
 800503c:	091b      	lsrs	r3, r3, #4
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	b2da      	uxtb	r2, r3
 8005044:	7a3b      	ldrb	r3, [r7, #8]
 8005046:	f362 0382 	bfi	r3, r2, #2, #1
 800504a:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_ref_mode_xl = (((uint8_t)val & 0x20U) >> 5);
 800504c:	78fb      	ldrb	r3, [r7, #3]
 800504e:	095b      	lsrs	r3, r3, #5
 8005050:	f003 0301 	and.w	r3, r3, #1
 8005054:	b2da      	uxtb	r2, r3
 8005056:	7a3b      	ldrb	r3, [r7, #8]
 8005058:	f362 1304 	bfi	r3, r2, #4, #1
 800505c:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t)val & 0x07U;
 800505e:	78fb      	ldrb	r3, [r7, #3]
 8005060:	f003 0307 	and.w	r3, r3, #7
 8005064:	b2da      	uxtb	r2, r3
 8005066:	7a3b      	ldrb	r3, [r7, #8]
 8005068:	f362 1347 	bfi	r3, r2, #5, #3
 800506c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL8_XL,
 800506e:	f107 0208 	add.w	r2, r7, #8
 8005072:	2301      	movs	r3, #1
 8005074:	2117      	movs	r1, #23
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f7ff fb60 	bl	800473c <lsm6dsr_write_reg>
 800507c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl8_xl, 1);
  }

  return ret;
 800507e:	68fb      	ldr	r3, [r7, #12]
}
 8005080:	4618      	mov	r0, r3
 8005082:	3710      	adds	r7, #16
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <lsm6dsr_i3c_disable_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dsr_i3c_disable_t val)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b086      	sub	sp, #24
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	460b      	mov	r3, r1
 8005092:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl9_xl_t ctrl9_xl;
  lsm6dsr_i3c_bus_avb_t i3c_bus_avb;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8005094:	f107 0210 	add.w	r2, r7, #16
 8005098:	2301      	movs	r3, #1
 800509a:	2118      	movs	r1, #24
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f7ff fb35 	bl	800470c <lsm6dsr_read_reg>
 80050a2:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d111      	bne.n	80050ce <lsm6dsr_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 80050aa:	78fb      	ldrb	r3, [r7, #3]
 80050ac:	09db      	lsrs	r3, r3, #7
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	f003 0301 	and.w	r3, r3, #1
 80050b4:	b2da      	uxtb	r2, r3
 80050b6:	7c3b      	ldrb	r3, [r7, #16]
 80050b8:	f362 0341 	bfi	r3, r2, #1, #1
 80050bc:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL9_XL,
 80050be:	f107 0210 	add.w	r2, r7, #16
 80050c2:	2301      	movs	r3, #1
 80050c4:	2118      	movs	r1, #24
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f7ff fb38 	bl	800473c <lsm6dsr_write_reg>
 80050cc:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl9_xl, 1);
  }

  if (ret == 0)
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d107      	bne.n	80050e4 <lsm6dsr_i3c_disable_set+0x5c>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 80050d4:	f107 020c 	add.w	r2, r7, #12
 80050d8:	2301      	movs	r3, #1
 80050da:	2162      	movs	r1, #98	; 0x62
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f7ff fb15 	bl	800470c <lsm6dsr_read_reg>
 80050e2:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d10f      	bne.n	800510a <lsm6dsr_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 80050ea:	78fb      	ldrb	r3, [r7, #3]
 80050ec:	f003 0303 	and.w	r3, r3, #3
 80050f0:	b2da      	uxtb	r2, r3
 80050f2:	7b3b      	ldrb	r3, [r7, #12]
 80050f4:	f362 03c4 	bfi	r3, r2, #3, #2
 80050f8:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 80050fa:	f107 020c 	add.w	r2, r7, #12
 80050fe:	2301      	movs	r3, #1
 8005100:	2162      	movs	r1, #98	; 0x62
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f7ff fb1a 	bl	800473c <lsm6dsr_write_reg>
 8005108:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 800510a:	697b      	ldr	r3, [r7, #20]
}
 800510c:	4618      	mov	r0, r3
 800510e:	3718      	adds	r7, #24
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 800511e:	2102      	movs	r1, #2
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f7ff fedd 	bl	8004ee0 <lsm6dsr_mem_bank_set>
 8005126:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d106      	bne.n	800513c <lsm6dsr_fsm_enable_get+0x28>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 800512e:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 8005130:	2301      	movs	r3, #1
 8005132:	2146      	movs	r1, #70	; 0x46
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f7ff fae9 	bl	800470c <lsm6dsr_read_reg>
 800513a:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d107      	bne.n	8005152 <lsm6dsr_fsm_enable_get+0x3e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 8005146:	2301      	movs	r3, #1
 8005148:	2147      	movs	r1, #71	; 0x47
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f7ff fade 	bl	800470c <lsm6dsr_read_reg>
 8005150:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d104      	bne.n	8005162 <lsm6dsr_fsm_enable_get+0x4e>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8005158:	2100      	movs	r1, #0
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f7ff fec0 	bl	8004ee0 <lsm6dsr_mem_bank_set>
 8005160:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005162:	68fb      	ldr	r3, [r7, #12]
}
 8005164:	4618      	mov	r0, r3
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8005176:	2102      	movs	r1, #2
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f7ff feb1 	bl	8004ee0 <lsm6dsr_mem_bank_set>
 800517e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d107      	bne.n	8005196 <lsm6dsr_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 8005186:	f107 0208 	add.w	r2, r7, #8
 800518a:	2301      	movs	r3, #1
 800518c:	215f      	movs	r1, #95	; 0x5f
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f7ff fabc 	bl	800470c <lsm6dsr_read_reg>
 8005194:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d104      	bne.n	80051a6 <lsm6dsr_fsm_data_rate_get+0x3a>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 800519c:	2100      	movs	r1, #0
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f7ff fe9e 	bl	8004ee0 <lsm6dsr_mem_bank_set>
 80051a4:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 80051a6:	7a3b      	ldrb	r3, [r7, #8]
 80051a8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b03      	cmp	r3, #3
 80051b0:	d81a      	bhi.n	80051e8 <lsm6dsr_fsm_data_rate_get+0x7c>
 80051b2:	a201      	add	r2, pc, #4	; (adr r2, 80051b8 <lsm6dsr_fsm_data_rate_get+0x4c>)
 80051b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b8:	080051c9 	.word	0x080051c9
 80051bc:	080051d1 	.word	0x080051d1
 80051c0:	080051d9 	.word	0x080051d9
 80051c4:	080051e1 	.word	0x080051e1
  {
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	2200      	movs	r2, #0
 80051cc:	701a      	strb	r2, [r3, #0]
      break;
 80051ce:	e00f      	b.n	80051f0 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	2201      	movs	r2, #1
 80051d4:	701a      	strb	r2, [r3, #0]
      break;
 80051d6:	e00b      	b.n	80051f0 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	2202      	movs	r2, #2
 80051dc:	701a      	strb	r2, [r3, #0]
      break;
 80051de:	e007      	b.n	80051f0 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	2203      	movs	r2, #3
 80051e4:	701a      	strb	r2, [r3, #0]
      break;
 80051e6:	e003      	b.n	80051f0 <lsm6dsr_fsm_data_rate_get+0x84>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	2200      	movs	r2, #0
 80051ec:	701a      	strb	r2, [r3, #0]
      break;
 80051ee:	bf00      	nop
  }

  return ret;
 80051f0:	68fb      	ldr	r3, [r7, #12]
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3710      	adds	r7, #16
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop

080051fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005200:	4b0e      	ldr	r3, [pc, #56]	; (800523c <HAL_Init+0x40>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a0d      	ldr	r2, [pc, #52]	; (800523c <HAL_Init+0x40>)
 8005206:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800520a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800520c:	4b0b      	ldr	r3, [pc, #44]	; (800523c <HAL_Init+0x40>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a0a      	ldr	r2, [pc, #40]	; (800523c <HAL_Init+0x40>)
 8005212:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005216:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005218:	4b08      	ldr	r3, [pc, #32]	; (800523c <HAL_Init+0x40>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a07      	ldr	r2, [pc, #28]	; (800523c <HAL_Init+0x40>)
 800521e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005222:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005224:	2003      	movs	r0, #3
 8005226:	f000 fb6e 	bl	8005906 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800522a:	2000      	movs	r0, #0
 800522c:	f7fc ffb2 	bl	8002194 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005230:	f7fc ff84 	bl	800213c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	40023c00 	.word	0x40023c00

08005240 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005240:	b480      	push	{r7}
 8005242:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005244:	4b06      	ldr	r3, [pc, #24]	; (8005260 <HAL_IncTick+0x20>)
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	461a      	mov	r2, r3
 800524a:	4b06      	ldr	r3, [pc, #24]	; (8005264 <HAL_IncTick+0x24>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4413      	add	r3, r2
 8005250:	4a04      	ldr	r2, [pc, #16]	; (8005264 <HAL_IncTick+0x24>)
 8005252:	6013      	str	r3, [r2, #0]
}
 8005254:	bf00      	nop
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	20000064 	.word	0x20000064
 8005264:	2000603c 	.word	0x2000603c

08005268 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005268:	b480      	push	{r7}
 800526a:	af00      	add	r7, sp, #0
  return uwTick;
 800526c:	4b03      	ldr	r3, [pc, #12]	; (800527c <HAL_GetTick+0x14>)
 800526e:	681b      	ldr	r3, [r3, #0]
}
 8005270:	4618      	mov	r0, r3
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	2000603c 	.word	0x2000603c

08005280 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005288:	f7ff ffee 	bl	8005268 <HAL_GetTick>
 800528c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005298:	d005      	beq.n	80052a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800529a:	4b0a      	ldr	r3, [pc, #40]	; (80052c4 <HAL_Delay+0x44>)
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	461a      	mov	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	4413      	add	r3, r2
 80052a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80052a6:	bf00      	nop
 80052a8:	f7ff ffde 	bl	8005268 <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d8f7      	bhi.n	80052a8 <HAL_Delay+0x28>
  {
  }
}
 80052b8:	bf00      	nop
 80052ba:	bf00      	nop
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	20000064 	.word	0x20000064

080052c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80052d0:	2300      	movs	r3, #0
 80052d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d101      	bne.n	80052de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e033      	b.n	8005346 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d109      	bne.n	80052fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f7fc f89c 	bl	8001424 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fe:	f003 0310 	and.w	r3, r3, #16
 8005302:	2b00      	cmp	r3, #0
 8005304:	d118      	bne.n	8005338 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800530e:	f023 0302 	bic.w	r3, r3, #2
 8005312:	f043 0202 	orr.w	r2, r3, #2
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 f94a 	bl	80055b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532a:	f023 0303 	bic.w	r3, r3, #3
 800532e:	f043 0201 	orr.w	r2, r3, #1
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	641a      	str	r2, [r3, #64]	; 0x40
 8005336:	e001      	b.n	800533c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005344:	7bfb      	ldrb	r3, [r7, #15]
}
 8005346:	4618      	mov	r0, r3
 8005348:	3710      	adds	r7, #16
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
	...

08005350 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800535a:	2300      	movs	r3, #0
 800535c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005364:	2b01      	cmp	r3, #1
 8005366:	d101      	bne.n	800536c <HAL_ADC_ConfigChannel+0x1c>
 8005368:	2302      	movs	r3, #2
 800536a:	e113      	b.n	8005594 <HAL_ADC_ConfigChannel+0x244>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2b09      	cmp	r3, #9
 800537a:	d925      	bls.n	80053c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68d9      	ldr	r1, [r3, #12]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	b29b      	uxth	r3, r3
 8005388:	461a      	mov	r2, r3
 800538a:	4613      	mov	r3, r2
 800538c:	005b      	lsls	r3, r3, #1
 800538e:	4413      	add	r3, r2
 8005390:	3b1e      	subs	r3, #30
 8005392:	2207      	movs	r2, #7
 8005394:	fa02 f303 	lsl.w	r3, r2, r3
 8005398:	43da      	mvns	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	400a      	ands	r2, r1
 80053a0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68d9      	ldr	r1, [r3, #12]
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	689a      	ldr	r2, [r3, #8]
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	4618      	mov	r0, r3
 80053b4:	4603      	mov	r3, r0
 80053b6:	005b      	lsls	r3, r3, #1
 80053b8:	4403      	add	r3, r0
 80053ba:	3b1e      	subs	r3, #30
 80053bc:	409a      	lsls	r2, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	430a      	orrs	r2, r1
 80053c4:	60da      	str	r2, [r3, #12]
 80053c6:	e022      	b.n	800540e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6919      	ldr	r1, [r3, #16]
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	461a      	mov	r2, r3
 80053d6:	4613      	mov	r3, r2
 80053d8:	005b      	lsls	r3, r3, #1
 80053da:	4413      	add	r3, r2
 80053dc:	2207      	movs	r2, #7
 80053de:	fa02 f303 	lsl.w	r3, r2, r3
 80053e2:	43da      	mvns	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	400a      	ands	r2, r1
 80053ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	6919      	ldr	r1, [r3, #16]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	689a      	ldr	r2, [r3, #8]
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	4618      	mov	r0, r3
 80053fe:	4603      	mov	r3, r0
 8005400:	005b      	lsls	r3, r3, #1
 8005402:	4403      	add	r3, r0
 8005404:	409a      	lsls	r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	430a      	orrs	r2, r1
 800540c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	2b06      	cmp	r3, #6
 8005414:	d824      	bhi.n	8005460 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	685a      	ldr	r2, [r3, #4]
 8005420:	4613      	mov	r3, r2
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	4413      	add	r3, r2
 8005426:	3b05      	subs	r3, #5
 8005428:	221f      	movs	r2, #31
 800542a:	fa02 f303 	lsl.w	r3, r2, r3
 800542e:	43da      	mvns	r2, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	400a      	ands	r2, r1
 8005436:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	b29b      	uxth	r3, r3
 8005444:	4618      	mov	r0, r3
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	685a      	ldr	r2, [r3, #4]
 800544a:	4613      	mov	r3, r2
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	4413      	add	r3, r2
 8005450:	3b05      	subs	r3, #5
 8005452:	fa00 f203 	lsl.w	r2, r0, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	430a      	orrs	r2, r1
 800545c:	635a      	str	r2, [r3, #52]	; 0x34
 800545e:	e04c      	b.n	80054fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	2b0c      	cmp	r3, #12
 8005466:	d824      	bhi.n	80054b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	685a      	ldr	r2, [r3, #4]
 8005472:	4613      	mov	r3, r2
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	4413      	add	r3, r2
 8005478:	3b23      	subs	r3, #35	; 0x23
 800547a:	221f      	movs	r2, #31
 800547c:	fa02 f303 	lsl.w	r3, r2, r3
 8005480:	43da      	mvns	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	400a      	ands	r2, r1
 8005488:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	b29b      	uxth	r3, r3
 8005496:	4618      	mov	r0, r3
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	685a      	ldr	r2, [r3, #4]
 800549c:	4613      	mov	r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	4413      	add	r3, r2
 80054a2:	3b23      	subs	r3, #35	; 0x23
 80054a4:	fa00 f203 	lsl.w	r2, r0, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	430a      	orrs	r2, r1
 80054ae:	631a      	str	r2, [r3, #48]	; 0x30
 80054b0:	e023      	b.n	80054fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	685a      	ldr	r2, [r3, #4]
 80054bc:	4613      	mov	r3, r2
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	4413      	add	r3, r2
 80054c2:	3b41      	subs	r3, #65	; 0x41
 80054c4:	221f      	movs	r2, #31
 80054c6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ca:	43da      	mvns	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	400a      	ands	r2, r1
 80054d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	b29b      	uxth	r3, r3
 80054e0:	4618      	mov	r0, r3
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	685a      	ldr	r2, [r3, #4]
 80054e6:	4613      	mov	r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4413      	add	r3, r2
 80054ec:	3b41      	subs	r3, #65	; 0x41
 80054ee:	fa00 f203 	lsl.w	r2, r0, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	430a      	orrs	r2, r1
 80054f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80054fa:	4b29      	ldr	r3, [pc, #164]	; (80055a0 <HAL_ADC_ConfigChannel+0x250>)
 80054fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a28      	ldr	r2, [pc, #160]	; (80055a4 <HAL_ADC_ConfigChannel+0x254>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d10f      	bne.n	8005528 <HAL_ADC_ConfigChannel+0x1d8>
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2b12      	cmp	r3, #18
 800550e:	d10b      	bne.n	8005528 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a1d      	ldr	r2, [pc, #116]	; (80055a4 <HAL_ADC_ConfigChannel+0x254>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d12b      	bne.n	800558a <HAL_ADC_ConfigChannel+0x23a>
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a1c      	ldr	r2, [pc, #112]	; (80055a8 <HAL_ADC_ConfigChannel+0x258>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d003      	beq.n	8005544 <HAL_ADC_ConfigChannel+0x1f4>
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2b11      	cmp	r3, #17
 8005542:	d122      	bne.n	800558a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a11      	ldr	r2, [pc, #68]	; (80055a8 <HAL_ADC_ConfigChannel+0x258>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d111      	bne.n	800558a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005566:	4b11      	ldr	r3, [pc, #68]	; (80055ac <HAL_ADC_ConfigChannel+0x25c>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a11      	ldr	r2, [pc, #68]	; (80055b0 <HAL_ADC_ConfigChannel+0x260>)
 800556c:	fba2 2303 	umull	r2, r3, r2, r3
 8005570:	0c9a      	lsrs	r2, r3, #18
 8005572:	4613      	mov	r3, r2
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	4413      	add	r3, r2
 8005578:	005b      	lsls	r3, r3, #1
 800557a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800557c:	e002      	b.n	8005584 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	3b01      	subs	r3, #1
 8005582:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d1f9      	bne.n	800557e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3714      	adds	r7, #20
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr
 80055a0:	40012300 	.word	0x40012300
 80055a4:	40012000 	.word	0x40012000
 80055a8:	10000012 	.word	0x10000012
 80055ac:	20000000 	.word	0x20000000
 80055b0:	431bde83 	.word	0x431bde83

080055b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80055bc:	4b79      	ldr	r3, [pc, #484]	; (80057a4 <ADC_Init+0x1f0>)
 80055be:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	685a      	ldr	r2, [r3, #4]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	431a      	orrs	r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	685a      	ldr	r2, [r3, #4]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	6859      	ldr	r1, [r3, #4]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	021a      	lsls	r2, r3, #8
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	430a      	orrs	r2, r1
 80055fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	685a      	ldr	r2, [r3, #4]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800560c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	6859      	ldr	r1, [r3, #4]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	689a      	ldr	r2, [r3, #8]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	430a      	orrs	r2, r1
 800561e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	689a      	ldr	r2, [r3, #8]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800562e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6899      	ldr	r1, [r3, #8]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	68da      	ldr	r2, [r3, #12]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	430a      	orrs	r2, r1
 8005640:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005646:	4a58      	ldr	r2, [pc, #352]	; (80057a8 <ADC_Init+0x1f4>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d022      	beq.n	8005692 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	689a      	ldr	r2, [r3, #8]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800565a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6899      	ldr	r1, [r3, #8]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	430a      	orrs	r2, r1
 800566c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	689a      	ldr	r2, [r3, #8]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800567c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	6899      	ldr	r1, [r3, #8]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	430a      	orrs	r2, r1
 800568e:	609a      	str	r2, [r3, #8]
 8005690:	e00f      	b.n	80056b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	689a      	ldr	r2, [r3, #8]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80056a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	689a      	ldr	r2, [r3, #8]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80056b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	689a      	ldr	r2, [r3, #8]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f022 0202 	bic.w	r2, r2, #2
 80056c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	6899      	ldr	r1, [r3, #8]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	7e1b      	ldrb	r3, [r3, #24]
 80056cc:	005a      	lsls	r2, r3, #1
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	430a      	orrs	r2, r1
 80056d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d01b      	beq.n	8005718 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	685a      	ldr	r2, [r3, #4]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	685a      	ldr	r2, [r3, #4]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80056fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	6859      	ldr	r1, [r3, #4]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570a:	3b01      	subs	r3, #1
 800570c:	035a      	lsls	r2, r3, #13
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	430a      	orrs	r2, r1
 8005714:	605a      	str	r2, [r3, #4]
 8005716:	e007      	b.n	8005728 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	685a      	ldr	r2, [r3, #4]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005726:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005736:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	69db      	ldr	r3, [r3, #28]
 8005742:	3b01      	subs	r3, #1
 8005744:	051a      	lsls	r2, r3, #20
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	430a      	orrs	r2, r1
 800574c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	689a      	ldr	r2, [r3, #8]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800575c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	6899      	ldr	r1, [r3, #8]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800576a:	025a      	lsls	r2, r3, #9
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	430a      	orrs	r2, r1
 8005772:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	689a      	ldr	r2, [r3, #8]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005782:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	6899      	ldr	r1, [r3, #8]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	029a      	lsls	r2, r3, #10
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	430a      	orrs	r2, r1
 8005796:	609a      	str	r2, [r3, #8]
}
 8005798:	bf00      	nop
 800579a:	3714      	adds	r7, #20
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr
 80057a4:	40012300 	.word	0x40012300
 80057a8:	0f000001 	.word	0x0f000001

080057ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b085      	sub	sp, #20
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f003 0307 	and.w	r3, r3, #7
 80057ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80057bc:	4b0c      	ldr	r3, [pc, #48]	; (80057f0 <__NVIC_SetPriorityGrouping+0x44>)
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80057c8:	4013      	ands	r3, r2
 80057ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80057d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80057d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80057de:	4a04      	ldr	r2, [pc, #16]	; (80057f0 <__NVIC_SetPriorityGrouping+0x44>)
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	60d3      	str	r3, [r2, #12]
}
 80057e4:	bf00      	nop
 80057e6:	3714      	adds	r7, #20
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr
 80057f0:	e000ed00 	.word	0xe000ed00

080057f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80057f4:	b480      	push	{r7}
 80057f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80057f8:	4b04      	ldr	r3, [pc, #16]	; (800580c <__NVIC_GetPriorityGrouping+0x18>)
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	0a1b      	lsrs	r3, r3, #8
 80057fe:	f003 0307 	and.w	r3, r3, #7
}
 8005802:	4618      	mov	r0, r3
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr
 800580c:	e000ed00 	.word	0xe000ed00

08005810 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	4603      	mov	r3, r0
 8005818:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800581a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800581e:	2b00      	cmp	r3, #0
 8005820:	db0b      	blt.n	800583a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005822:	79fb      	ldrb	r3, [r7, #7]
 8005824:	f003 021f 	and.w	r2, r3, #31
 8005828:	4907      	ldr	r1, [pc, #28]	; (8005848 <__NVIC_EnableIRQ+0x38>)
 800582a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800582e:	095b      	lsrs	r3, r3, #5
 8005830:	2001      	movs	r0, #1
 8005832:	fa00 f202 	lsl.w	r2, r0, r2
 8005836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800583a:	bf00      	nop
 800583c:	370c      	adds	r7, #12
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	e000e100 	.word	0xe000e100

0800584c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	4603      	mov	r3, r0
 8005854:	6039      	str	r1, [r7, #0]
 8005856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800585c:	2b00      	cmp	r3, #0
 800585e:	db0a      	blt.n	8005876 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	b2da      	uxtb	r2, r3
 8005864:	490c      	ldr	r1, [pc, #48]	; (8005898 <__NVIC_SetPriority+0x4c>)
 8005866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800586a:	0112      	lsls	r2, r2, #4
 800586c:	b2d2      	uxtb	r2, r2
 800586e:	440b      	add	r3, r1
 8005870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005874:	e00a      	b.n	800588c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	b2da      	uxtb	r2, r3
 800587a:	4908      	ldr	r1, [pc, #32]	; (800589c <__NVIC_SetPriority+0x50>)
 800587c:	79fb      	ldrb	r3, [r7, #7]
 800587e:	f003 030f 	and.w	r3, r3, #15
 8005882:	3b04      	subs	r3, #4
 8005884:	0112      	lsls	r2, r2, #4
 8005886:	b2d2      	uxtb	r2, r2
 8005888:	440b      	add	r3, r1
 800588a:	761a      	strb	r2, [r3, #24]
}
 800588c:	bf00      	nop
 800588e:	370c      	adds	r7, #12
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr
 8005898:	e000e100 	.word	0xe000e100
 800589c:	e000ed00 	.word	0xe000ed00

080058a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b089      	sub	sp, #36	; 0x24
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f003 0307 	and.w	r3, r3, #7
 80058b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	f1c3 0307 	rsb	r3, r3, #7
 80058ba:	2b04      	cmp	r3, #4
 80058bc:	bf28      	it	cs
 80058be:	2304      	movcs	r3, #4
 80058c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	3304      	adds	r3, #4
 80058c6:	2b06      	cmp	r3, #6
 80058c8:	d902      	bls.n	80058d0 <NVIC_EncodePriority+0x30>
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	3b03      	subs	r3, #3
 80058ce:	e000      	b.n	80058d2 <NVIC_EncodePriority+0x32>
 80058d0:	2300      	movs	r3, #0
 80058d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058d4:	f04f 32ff 	mov.w	r2, #4294967295
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	fa02 f303 	lsl.w	r3, r2, r3
 80058de:	43da      	mvns	r2, r3
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	401a      	ands	r2, r3
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80058e8:	f04f 31ff 	mov.w	r1, #4294967295
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	fa01 f303 	lsl.w	r3, r1, r3
 80058f2:	43d9      	mvns	r1, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058f8:	4313      	orrs	r3, r2
         );
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3724      	adds	r7, #36	; 0x24
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr

08005906 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005906:	b580      	push	{r7, lr}
 8005908:	b082      	sub	sp, #8
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7ff ff4c 	bl	80057ac <__NVIC_SetPriorityGrouping>
}
 8005914:	bf00      	nop
 8005916:	3708      	adds	r7, #8
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800591c:	b580      	push	{r7, lr}
 800591e:	b086      	sub	sp, #24
 8005920:	af00      	add	r7, sp, #0
 8005922:	4603      	mov	r3, r0
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	607a      	str	r2, [r7, #4]
 8005928:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800592a:	2300      	movs	r3, #0
 800592c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800592e:	f7ff ff61 	bl	80057f4 <__NVIC_GetPriorityGrouping>
 8005932:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	68b9      	ldr	r1, [r7, #8]
 8005938:	6978      	ldr	r0, [r7, #20]
 800593a:	f7ff ffb1 	bl	80058a0 <NVIC_EncodePriority>
 800593e:	4602      	mov	r2, r0
 8005940:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005944:	4611      	mov	r1, r2
 8005946:	4618      	mov	r0, r3
 8005948:	f7ff ff80 	bl	800584c <__NVIC_SetPriority>
}
 800594c:	bf00      	nop
 800594e:	3718      	adds	r7, #24
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	4603      	mov	r3, r0
 800595c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800595e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005962:	4618      	mov	r0, r3
 8005964:	f7ff ff54 	bl	8005810 <__NVIC_EnableIRQ>
}
 8005968:	bf00      	nop
 800596a:	3708      	adds	r7, #8
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005970:	b480      	push	{r7}
 8005972:	b089      	sub	sp, #36	; 0x24
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800597a:	2300      	movs	r3, #0
 800597c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800597e:	2300      	movs	r3, #0
 8005980:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005982:	2300      	movs	r3, #0
 8005984:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005986:	2300      	movs	r3, #0
 8005988:	61fb      	str	r3, [r7, #28]
 800598a:	e177      	b.n	8005c7c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800598c:	2201      	movs	r2, #1
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	fa02 f303 	lsl.w	r3, r2, r3
 8005994:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	4013      	ands	r3, r2
 800599e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80059a0:	693a      	ldr	r2, [r7, #16]
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	f040 8166 	bne.w	8005c76 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	f003 0303 	and.w	r3, r3, #3
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d005      	beq.n	80059c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d130      	bne.n	8005a24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	005b      	lsls	r3, r3, #1
 80059cc:	2203      	movs	r2, #3
 80059ce:	fa02 f303 	lsl.w	r3, r2, r3
 80059d2:	43db      	mvns	r3, r3
 80059d4:	69ba      	ldr	r2, [r7, #24]
 80059d6:	4013      	ands	r3, r2
 80059d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	68da      	ldr	r2, [r3, #12]
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	005b      	lsls	r3, r3, #1
 80059e2:	fa02 f303 	lsl.w	r3, r2, r3
 80059e6:	69ba      	ldr	r2, [r7, #24]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	69ba      	ldr	r2, [r7, #24]
 80059f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80059f8:	2201      	movs	r2, #1
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005a00:	43db      	mvns	r3, r3
 8005a02:	69ba      	ldr	r2, [r7, #24]
 8005a04:	4013      	ands	r3, r2
 8005a06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	091b      	lsrs	r3, r3, #4
 8005a0e:	f003 0201 	and.w	r2, r3, #1
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	fa02 f303 	lsl.w	r3, r2, r3
 8005a18:	69ba      	ldr	r2, [r7, #24]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	69ba      	ldr	r2, [r7, #24]
 8005a22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f003 0303 	and.w	r3, r3, #3
 8005a2c:	2b03      	cmp	r3, #3
 8005a2e:	d017      	beq.n	8005a60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	005b      	lsls	r3, r3, #1
 8005a3a:	2203      	movs	r2, #3
 8005a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a40:	43db      	mvns	r3, r3
 8005a42:	69ba      	ldr	r2, [r7, #24]
 8005a44:	4013      	ands	r3, r2
 8005a46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	689a      	ldr	r2, [r3, #8]
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	005b      	lsls	r3, r3, #1
 8005a50:	fa02 f303 	lsl.w	r3, r2, r3
 8005a54:	69ba      	ldr	r2, [r7, #24]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	69ba      	ldr	r2, [r7, #24]
 8005a5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	f003 0303 	and.w	r3, r3, #3
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d123      	bne.n	8005ab4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	08da      	lsrs	r2, r3, #3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	3208      	adds	r2, #8
 8005a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	f003 0307 	and.w	r3, r3, #7
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	220f      	movs	r2, #15
 8005a84:	fa02 f303 	lsl.w	r3, r2, r3
 8005a88:	43db      	mvns	r3, r3
 8005a8a:	69ba      	ldr	r2, [r7, #24]
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	691a      	ldr	r2, [r3, #16]
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	f003 0307 	and.w	r3, r3, #7
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa0:	69ba      	ldr	r2, [r7, #24]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	08da      	lsrs	r2, r3, #3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	3208      	adds	r2, #8
 8005aae:	69b9      	ldr	r1, [r7, #24]
 8005ab0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	005b      	lsls	r3, r3, #1
 8005abe:	2203      	movs	r2, #3
 8005ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac4:	43db      	mvns	r3, r3
 8005ac6:	69ba      	ldr	r2, [r7, #24]
 8005ac8:	4013      	ands	r3, r2
 8005aca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	f003 0203 	and.w	r2, r3, #3
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	005b      	lsls	r3, r3, #1
 8005ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8005adc:	69ba      	ldr	r2, [r7, #24]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	69ba      	ldr	r2, [r7, #24]
 8005ae6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f000 80c0 	beq.w	8005c76 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005af6:	2300      	movs	r3, #0
 8005af8:	60fb      	str	r3, [r7, #12]
 8005afa:	4b66      	ldr	r3, [pc, #408]	; (8005c94 <HAL_GPIO_Init+0x324>)
 8005afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005afe:	4a65      	ldr	r2, [pc, #404]	; (8005c94 <HAL_GPIO_Init+0x324>)
 8005b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b04:	6453      	str	r3, [r2, #68]	; 0x44
 8005b06:	4b63      	ldr	r3, [pc, #396]	; (8005c94 <HAL_GPIO_Init+0x324>)
 8005b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b0e:	60fb      	str	r3, [r7, #12]
 8005b10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b12:	4a61      	ldr	r2, [pc, #388]	; (8005c98 <HAL_GPIO_Init+0x328>)
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	089b      	lsrs	r3, r3, #2
 8005b18:	3302      	adds	r3, #2
 8005b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	f003 0303 	and.w	r3, r3, #3
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	220f      	movs	r2, #15
 8005b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b2e:	43db      	mvns	r3, r3
 8005b30:	69ba      	ldr	r2, [r7, #24]
 8005b32:	4013      	ands	r3, r2
 8005b34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a58      	ldr	r2, [pc, #352]	; (8005c9c <HAL_GPIO_Init+0x32c>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d037      	beq.n	8005bae <HAL_GPIO_Init+0x23e>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a57      	ldr	r2, [pc, #348]	; (8005ca0 <HAL_GPIO_Init+0x330>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d031      	beq.n	8005baa <HAL_GPIO_Init+0x23a>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a56      	ldr	r2, [pc, #344]	; (8005ca4 <HAL_GPIO_Init+0x334>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d02b      	beq.n	8005ba6 <HAL_GPIO_Init+0x236>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a55      	ldr	r2, [pc, #340]	; (8005ca8 <HAL_GPIO_Init+0x338>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d025      	beq.n	8005ba2 <HAL_GPIO_Init+0x232>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a54      	ldr	r2, [pc, #336]	; (8005cac <HAL_GPIO_Init+0x33c>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d01f      	beq.n	8005b9e <HAL_GPIO_Init+0x22e>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a53      	ldr	r2, [pc, #332]	; (8005cb0 <HAL_GPIO_Init+0x340>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d019      	beq.n	8005b9a <HAL_GPIO_Init+0x22a>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a52      	ldr	r2, [pc, #328]	; (8005cb4 <HAL_GPIO_Init+0x344>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d013      	beq.n	8005b96 <HAL_GPIO_Init+0x226>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a51      	ldr	r2, [pc, #324]	; (8005cb8 <HAL_GPIO_Init+0x348>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d00d      	beq.n	8005b92 <HAL_GPIO_Init+0x222>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a50      	ldr	r2, [pc, #320]	; (8005cbc <HAL_GPIO_Init+0x34c>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d007      	beq.n	8005b8e <HAL_GPIO_Init+0x21e>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a4f      	ldr	r2, [pc, #316]	; (8005cc0 <HAL_GPIO_Init+0x350>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d101      	bne.n	8005b8a <HAL_GPIO_Init+0x21a>
 8005b86:	2309      	movs	r3, #9
 8005b88:	e012      	b.n	8005bb0 <HAL_GPIO_Init+0x240>
 8005b8a:	230a      	movs	r3, #10
 8005b8c:	e010      	b.n	8005bb0 <HAL_GPIO_Init+0x240>
 8005b8e:	2308      	movs	r3, #8
 8005b90:	e00e      	b.n	8005bb0 <HAL_GPIO_Init+0x240>
 8005b92:	2307      	movs	r3, #7
 8005b94:	e00c      	b.n	8005bb0 <HAL_GPIO_Init+0x240>
 8005b96:	2306      	movs	r3, #6
 8005b98:	e00a      	b.n	8005bb0 <HAL_GPIO_Init+0x240>
 8005b9a:	2305      	movs	r3, #5
 8005b9c:	e008      	b.n	8005bb0 <HAL_GPIO_Init+0x240>
 8005b9e:	2304      	movs	r3, #4
 8005ba0:	e006      	b.n	8005bb0 <HAL_GPIO_Init+0x240>
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e004      	b.n	8005bb0 <HAL_GPIO_Init+0x240>
 8005ba6:	2302      	movs	r3, #2
 8005ba8:	e002      	b.n	8005bb0 <HAL_GPIO_Init+0x240>
 8005baa:	2301      	movs	r3, #1
 8005bac:	e000      	b.n	8005bb0 <HAL_GPIO_Init+0x240>
 8005bae:	2300      	movs	r3, #0
 8005bb0:	69fa      	ldr	r2, [r7, #28]
 8005bb2:	f002 0203 	and.w	r2, r2, #3
 8005bb6:	0092      	lsls	r2, r2, #2
 8005bb8:	4093      	lsls	r3, r2
 8005bba:	69ba      	ldr	r2, [r7, #24]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005bc0:	4935      	ldr	r1, [pc, #212]	; (8005c98 <HAL_GPIO_Init+0x328>)
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	089b      	lsrs	r3, r3, #2
 8005bc6:	3302      	adds	r3, #2
 8005bc8:	69ba      	ldr	r2, [r7, #24]
 8005bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005bce:	4b3d      	ldr	r3, [pc, #244]	; (8005cc4 <HAL_GPIO_Init+0x354>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	43db      	mvns	r3, r3
 8005bd8:	69ba      	ldr	r2, [r7, #24]
 8005bda:	4013      	ands	r3, r2
 8005bdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d003      	beq.n	8005bf2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005bea:	69ba      	ldr	r2, [r7, #24]
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005bf2:	4a34      	ldr	r2, [pc, #208]	; (8005cc4 <HAL_GPIO_Init+0x354>)
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005bf8:	4b32      	ldr	r3, [pc, #200]	; (8005cc4 <HAL_GPIO_Init+0x354>)
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	43db      	mvns	r3, r3
 8005c02:	69ba      	ldr	r2, [r7, #24]
 8005c04:	4013      	ands	r3, r2
 8005c06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d003      	beq.n	8005c1c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005c14:	69ba      	ldr	r2, [r7, #24]
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005c1c:	4a29      	ldr	r2, [pc, #164]	; (8005cc4 <HAL_GPIO_Init+0x354>)
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005c22:	4b28      	ldr	r3, [pc, #160]	; (8005cc4 <HAL_GPIO_Init+0x354>)
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	43db      	mvns	r3, r3
 8005c2c:	69ba      	ldr	r2, [r7, #24]
 8005c2e:	4013      	ands	r3, r2
 8005c30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d003      	beq.n	8005c46 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005c3e:	69ba      	ldr	r2, [r7, #24]
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005c46:	4a1f      	ldr	r2, [pc, #124]	; (8005cc4 <HAL_GPIO_Init+0x354>)
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005c4c:	4b1d      	ldr	r3, [pc, #116]	; (8005cc4 <HAL_GPIO_Init+0x354>)
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	43db      	mvns	r3, r3
 8005c56:	69ba      	ldr	r2, [r7, #24]
 8005c58:	4013      	ands	r3, r2
 8005c5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d003      	beq.n	8005c70 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005c68:	69ba      	ldr	r2, [r7, #24]
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005c70:	4a14      	ldr	r2, [pc, #80]	; (8005cc4 <HAL_GPIO_Init+0x354>)
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	3301      	adds	r3, #1
 8005c7a:	61fb      	str	r3, [r7, #28]
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	2b0f      	cmp	r3, #15
 8005c80:	f67f ae84 	bls.w	800598c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005c84:	bf00      	nop
 8005c86:	bf00      	nop
 8005c88:	3724      	adds	r7, #36	; 0x24
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr
 8005c92:	bf00      	nop
 8005c94:	40023800 	.word	0x40023800
 8005c98:	40013800 	.word	0x40013800
 8005c9c:	40020000 	.word	0x40020000
 8005ca0:	40020400 	.word	0x40020400
 8005ca4:	40020800 	.word	0x40020800
 8005ca8:	40020c00 	.word	0x40020c00
 8005cac:	40021000 	.word	0x40021000
 8005cb0:	40021400 	.word	0x40021400
 8005cb4:	40021800 	.word	0x40021800
 8005cb8:	40021c00 	.word	0x40021c00
 8005cbc:	40022000 	.word	0x40022000
 8005cc0:	40022400 	.word	0x40022400
 8005cc4:	40013c00 	.word	0x40013c00

08005cc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	807b      	strh	r3, [r7, #2]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005cd8:	787b      	ldrb	r3, [r7, #1]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d003      	beq.n	8005ce6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005cde:	887a      	ldrh	r2, [r7, #2]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005ce4:	e003      	b.n	8005cee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005ce6:	887b      	ldrh	r3, [r7, #2]
 8005ce8:	041a      	lsls	r2, r3, #16
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	619a      	str	r2, [r3, #24]
}
 8005cee:	bf00      	nop
 8005cf0:	370c      	adds	r7, #12
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
	...

08005cfc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	4603      	mov	r3, r0
 8005d04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005d06:	4b08      	ldr	r3, [pc, #32]	; (8005d28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d08:	695a      	ldr	r2, [r3, #20]
 8005d0a:	88fb      	ldrh	r3, [r7, #6]
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d006      	beq.n	8005d20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005d12:	4a05      	ldr	r2, [pc, #20]	; (8005d28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d14:	88fb      	ldrh	r3, [r7, #6]
 8005d16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005d18:	88fb      	ldrh	r3, [r7, #6]
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f000 f806 	bl	8005d2c <HAL_GPIO_EXTI_Callback>
  }
}
 8005d20:	bf00      	nop
 8005d22:	3708      	adds	r7, #8
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	40013c00 	.word	0x40013c00

08005d2c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	4603      	mov	r3, r0
 8005d34:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005d36:	bf00      	nop
 8005d38:	370c      	adds	r7, #12
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
	...

08005d44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d101      	bne.n	8005d56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e12b      	b.n	8005fae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d106      	bne.n	8005d70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f7fb fdb0 	bl	80018d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2224      	movs	r2, #36	; 0x24
 8005d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f022 0201 	bic.w	r2, r2, #1
 8005d86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005da6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005da8:	f002 fc08 	bl	80085bc <HAL_RCC_GetPCLK1Freq>
 8005dac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	4a81      	ldr	r2, [pc, #516]	; (8005fb8 <HAL_I2C_Init+0x274>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d807      	bhi.n	8005dc8 <HAL_I2C_Init+0x84>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	4a80      	ldr	r2, [pc, #512]	; (8005fbc <HAL_I2C_Init+0x278>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	bf94      	ite	ls
 8005dc0:	2301      	movls	r3, #1
 8005dc2:	2300      	movhi	r3, #0
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	e006      	b.n	8005dd6 <HAL_I2C_Init+0x92>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	4a7d      	ldr	r2, [pc, #500]	; (8005fc0 <HAL_I2C_Init+0x27c>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	bf94      	ite	ls
 8005dd0:	2301      	movls	r3, #1
 8005dd2:	2300      	movhi	r3, #0
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d001      	beq.n	8005dde <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e0e7      	b.n	8005fae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	4a78      	ldr	r2, [pc, #480]	; (8005fc4 <HAL_I2C_Init+0x280>)
 8005de2:	fba2 2303 	umull	r2, r3, r2, r3
 8005de6:	0c9b      	lsrs	r3, r3, #18
 8005de8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68ba      	ldr	r2, [r7, #8]
 8005dfa:	430a      	orrs	r2, r1
 8005dfc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	6a1b      	ldr	r3, [r3, #32]
 8005e04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	4a6a      	ldr	r2, [pc, #424]	; (8005fb8 <HAL_I2C_Init+0x274>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d802      	bhi.n	8005e18 <HAL_I2C_Init+0xd4>
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	3301      	adds	r3, #1
 8005e16:	e009      	b.n	8005e2c <HAL_I2C_Init+0xe8>
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005e1e:	fb02 f303 	mul.w	r3, r2, r3
 8005e22:	4a69      	ldr	r2, [pc, #420]	; (8005fc8 <HAL_I2C_Init+0x284>)
 8005e24:	fba2 2303 	umull	r2, r3, r2, r3
 8005e28:	099b      	lsrs	r3, r3, #6
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	6812      	ldr	r2, [r2, #0]
 8005e30:	430b      	orrs	r3, r1
 8005e32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	69db      	ldr	r3, [r3, #28]
 8005e3a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005e3e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	495c      	ldr	r1, [pc, #368]	; (8005fb8 <HAL_I2C_Init+0x274>)
 8005e48:	428b      	cmp	r3, r1
 8005e4a:	d819      	bhi.n	8005e80 <HAL_I2C_Init+0x13c>
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	1e59      	subs	r1, r3, #1
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	005b      	lsls	r3, r3, #1
 8005e56:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e5a:	1c59      	adds	r1, r3, #1
 8005e5c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005e60:	400b      	ands	r3, r1
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00a      	beq.n	8005e7c <HAL_I2C_Init+0x138>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	1e59      	subs	r1, r3, #1
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	005b      	lsls	r3, r3, #1
 8005e70:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e74:	3301      	adds	r3, #1
 8005e76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e7a:	e051      	b.n	8005f20 <HAL_I2C_Init+0x1dc>
 8005e7c:	2304      	movs	r3, #4
 8005e7e:	e04f      	b.n	8005f20 <HAL_I2C_Init+0x1dc>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d111      	bne.n	8005eac <HAL_I2C_Init+0x168>
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	1e58      	subs	r0, r3, #1
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6859      	ldr	r1, [r3, #4]
 8005e90:	460b      	mov	r3, r1
 8005e92:	005b      	lsls	r3, r3, #1
 8005e94:	440b      	add	r3, r1
 8005e96:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	bf0c      	ite	eq
 8005ea4:	2301      	moveq	r3, #1
 8005ea6:	2300      	movne	r3, #0
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	e012      	b.n	8005ed2 <HAL_I2C_Init+0x18e>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	1e58      	subs	r0, r3, #1
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6859      	ldr	r1, [r3, #4]
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	440b      	add	r3, r1
 8005eba:	0099      	lsls	r1, r3, #2
 8005ebc:	440b      	add	r3, r1
 8005ebe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	bf0c      	ite	eq
 8005ecc:	2301      	moveq	r3, #1
 8005ece:	2300      	movne	r3, #0
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d001      	beq.n	8005eda <HAL_I2C_Init+0x196>
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e022      	b.n	8005f20 <HAL_I2C_Init+0x1dc>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d10e      	bne.n	8005f00 <HAL_I2C_Init+0x1bc>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	1e58      	subs	r0, r3, #1
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6859      	ldr	r1, [r3, #4]
 8005eea:	460b      	mov	r3, r1
 8005eec:	005b      	lsls	r3, r3, #1
 8005eee:	440b      	add	r3, r1
 8005ef0:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005efa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005efe:	e00f      	b.n	8005f20 <HAL_I2C_Init+0x1dc>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	1e58      	subs	r0, r3, #1
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6859      	ldr	r1, [r3, #4]
 8005f08:	460b      	mov	r3, r1
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	440b      	add	r3, r1
 8005f0e:	0099      	lsls	r1, r3, #2
 8005f10:	440b      	add	r3, r1
 8005f12:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f16:	3301      	adds	r3, #1
 8005f18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f20:	6879      	ldr	r1, [r7, #4]
 8005f22:	6809      	ldr	r1, [r1, #0]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	69da      	ldr	r2, [r3, #28]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a1b      	ldr	r3, [r3, #32]
 8005f3a:	431a      	orrs	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	430a      	orrs	r2, r1
 8005f42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005f4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	6911      	ldr	r1, [r2, #16]
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	68d2      	ldr	r2, [r2, #12]
 8005f5a:	4311      	orrs	r1, r2
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	6812      	ldr	r2, [r2, #0]
 8005f60:	430b      	orrs	r3, r1
 8005f62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	695a      	ldr	r2, [r3, #20]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	431a      	orrs	r2, r3
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	430a      	orrs	r2, r1
 8005f7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f042 0201 	orr.w	r2, r2, #1
 8005f8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2220      	movs	r2, #32
 8005f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3710      	adds	r7, #16
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	000186a0 	.word	0x000186a0
 8005fbc:	001e847f 	.word	0x001e847f
 8005fc0:	003d08ff 	.word	0x003d08ff
 8005fc4:	431bde83 	.word	0x431bde83
 8005fc8:	10624dd3 	.word	0x10624dd3

08005fcc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b088      	sub	sp, #32
 8005fd0:	af02      	add	r7, sp, #8
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	4608      	mov	r0, r1
 8005fd6:	4611      	mov	r1, r2
 8005fd8:	461a      	mov	r2, r3
 8005fda:	4603      	mov	r3, r0
 8005fdc:	817b      	strh	r3, [r7, #10]
 8005fde:	460b      	mov	r3, r1
 8005fe0:	813b      	strh	r3, [r7, #8]
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005fe6:	f7ff f93f 	bl	8005268 <HAL_GetTick>
 8005fea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	2b20      	cmp	r3, #32
 8005ff6:	f040 80d9 	bne.w	80061ac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	9300      	str	r3, [sp, #0]
 8005ffe:	2319      	movs	r3, #25
 8006000:	2201      	movs	r2, #1
 8006002:	496d      	ldr	r1, [pc, #436]	; (80061b8 <HAL_I2C_Mem_Write+0x1ec>)
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	f000 fc7f 	bl	8006908 <I2C_WaitOnFlagUntilTimeout>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d001      	beq.n	8006014 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006010:	2302      	movs	r3, #2
 8006012:	e0cc      	b.n	80061ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800601a:	2b01      	cmp	r3, #1
 800601c:	d101      	bne.n	8006022 <HAL_I2C_Mem_Write+0x56>
 800601e:	2302      	movs	r3, #2
 8006020:	e0c5      	b.n	80061ae <HAL_I2C_Mem_Write+0x1e2>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0301 	and.w	r3, r3, #1
 8006034:	2b01      	cmp	r3, #1
 8006036:	d007      	beq.n	8006048 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f042 0201 	orr.w	r2, r2, #1
 8006046:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006056:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2221      	movs	r2, #33	; 0x21
 800605c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2240      	movs	r2, #64	; 0x40
 8006064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2200      	movs	r2, #0
 800606c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6a3a      	ldr	r2, [r7, #32]
 8006072:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006078:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800607e:	b29a      	uxth	r2, r3
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	4a4d      	ldr	r2, [pc, #308]	; (80061bc <HAL_I2C_Mem_Write+0x1f0>)
 8006088:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800608a:	88f8      	ldrh	r0, [r7, #6]
 800608c:	893a      	ldrh	r2, [r7, #8]
 800608e:	8979      	ldrh	r1, [r7, #10]
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	9301      	str	r3, [sp, #4]
 8006094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006096:	9300      	str	r3, [sp, #0]
 8006098:	4603      	mov	r3, r0
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	f000 fab6 	bl	800660c <I2C_RequestMemoryWrite>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d052      	beq.n	800614c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e081      	b.n	80061ae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060aa:	697a      	ldr	r2, [r7, #20]
 80060ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	f000 fd00 	bl	8006ab4 <I2C_WaitOnTXEFlagUntilTimeout>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00d      	beq.n	80060d6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060be:	2b04      	cmp	r3, #4
 80060c0:	d107      	bne.n	80060d2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e06b      	b.n	80061ae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060da:	781a      	ldrb	r2, [r3, #0]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e6:	1c5a      	adds	r2, r3, #1
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060f0:	3b01      	subs	r3, #1
 80060f2:	b29a      	uxth	r2, r3
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	3b01      	subs	r3, #1
 8006100:	b29a      	uxth	r2, r3
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	695b      	ldr	r3, [r3, #20]
 800610c:	f003 0304 	and.w	r3, r3, #4
 8006110:	2b04      	cmp	r3, #4
 8006112:	d11b      	bne.n	800614c <HAL_I2C_Mem_Write+0x180>
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006118:	2b00      	cmp	r3, #0
 800611a:	d017      	beq.n	800614c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006120:	781a      	ldrb	r2, [r3, #0]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612c:	1c5a      	adds	r2, r3, #1
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006136:	3b01      	subs	r3, #1
 8006138:	b29a      	uxth	r2, r3
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006142:	b29b      	uxth	r3, r3
 8006144:	3b01      	subs	r3, #1
 8006146:	b29a      	uxth	r2, r3
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006150:	2b00      	cmp	r3, #0
 8006152:	d1aa      	bne.n	80060aa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006154:	697a      	ldr	r2, [r7, #20]
 8006156:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006158:	68f8      	ldr	r0, [r7, #12]
 800615a:	f000 fcec 	bl	8006b36 <I2C_WaitOnBTFFlagUntilTimeout>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d00d      	beq.n	8006180 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006168:	2b04      	cmp	r3, #4
 800616a:	d107      	bne.n	800617c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800617a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e016      	b.n	80061ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800618e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2220      	movs	r2, #32
 8006194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80061a8:	2300      	movs	r3, #0
 80061aa:	e000      	b.n	80061ae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80061ac:	2302      	movs	r3, #2
  }
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3718      	adds	r7, #24
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	00100002 	.word	0x00100002
 80061bc:	ffff0000 	.word	0xffff0000

080061c0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b08c      	sub	sp, #48	; 0x30
 80061c4:	af02      	add	r7, sp, #8
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	4608      	mov	r0, r1
 80061ca:	4611      	mov	r1, r2
 80061cc:	461a      	mov	r2, r3
 80061ce:	4603      	mov	r3, r0
 80061d0:	817b      	strh	r3, [r7, #10]
 80061d2:	460b      	mov	r3, r1
 80061d4:	813b      	strh	r3, [r7, #8]
 80061d6:	4613      	mov	r3, r2
 80061d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80061da:	f7ff f845 	bl	8005268 <HAL_GetTick>
 80061de:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	2b20      	cmp	r3, #32
 80061ea:	f040 8208 	bne.w	80065fe <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80061ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f0:	9300      	str	r3, [sp, #0]
 80061f2:	2319      	movs	r3, #25
 80061f4:	2201      	movs	r2, #1
 80061f6:	497b      	ldr	r1, [pc, #492]	; (80063e4 <HAL_I2C_Mem_Read+0x224>)
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	f000 fb85 	bl	8006908 <I2C_WaitOnFlagUntilTimeout>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d001      	beq.n	8006208 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006204:	2302      	movs	r3, #2
 8006206:	e1fb      	b.n	8006600 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800620e:	2b01      	cmp	r3, #1
 8006210:	d101      	bne.n	8006216 <HAL_I2C_Mem_Read+0x56>
 8006212:	2302      	movs	r3, #2
 8006214:	e1f4      	b.n	8006600 <HAL_I2C_Mem_Read+0x440>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2201      	movs	r2, #1
 800621a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 0301 	and.w	r3, r3, #1
 8006228:	2b01      	cmp	r3, #1
 800622a:	d007      	beq.n	800623c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f042 0201 	orr.w	r2, r2, #1
 800623a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800624a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2222      	movs	r2, #34	; 0x22
 8006250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2240      	movs	r2, #64	; 0x40
 8006258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2200      	movs	r2, #0
 8006260:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006266:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800626c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006272:	b29a      	uxth	r2, r3
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	4a5b      	ldr	r2, [pc, #364]	; (80063e8 <HAL_I2C_Mem_Read+0x228>)
 800627c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800627e:	88f8      	ldrh	r0, [r7, #6]
 8006280:	893a      	ldrh	r2, [r7, #8]
 8006282:	8979      	ldrh	r1, [r7, #10]
 8006284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006286:	9301      	str	r3, [sp, #4]
 8006288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800628a:	9300      	str	r3, [sp, #0]
 800628c:	4603      	mov	r3, r0
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f000 fa52 	bl	8006738 <I2C_RequestMemoryRead>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d001      	beq.n	800629e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e1b0      	b.n	8006600 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d113      	bne.n	80062ce <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062a6:	2300      	movs	r3, #0
 80062a8:	623b      	str	r3, [r7, #32]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	695b      	ldr	r3, [r3, #20]
 80062b0:	623b      	str	r3, [r7, #32]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	699b      	ldr	r3, [r3, #24]
 80062b8:	623b      	str	r3, [r7, #32]
 80062ba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062ca:	601a      	str	r2, [r3, #0]
 80062cc:	e184      	b.n	80065d8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d11b      	bne.n	800630e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062e6:	2300      	movs	r3, #0
 80062e8:	61fb      	str	r3, [r7, #28]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	695b      	ldr	r3, [r3, #20]
 80062f0:	61fb      	str	r3, [r7, #28]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	699b      	ldr	r3, [r3, #24]
 80062f8:	61fb      	str	r3, [r7, #28]
 80062fa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800630a:	601a      	str	r2, [r3, #0]
 800630c:	e164      	b.n	80065d8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006312:	2b02      	cmp	r3, #2
 8006314:	d11b      	bne.n	800634e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006324:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006334:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006336:	2300      	movs	r3, #0
 8006338:	61bb      	str	r3, [r7, #24]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	695b      	ldr	r3, [r3, #20]
 8006340:	61bb      	str	r3, [r7, #24]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	699b      	ldr	r3, [r3, #24]
 8006348:	61bb      	str	r3, [r7, #24]
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	e144      	b.n	80065d8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800634e:	2300      	movs	r3, #0
 8006350:	617b      	str	r3, [r7, #20]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	695b      	ldr	r3, [r3, #20]
 8006358:	617b      	str	r3, [r7, #20]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	699b      	ldr	r3, [r3, #24]
 8006360:	617b      	str	r3, [r7, #20]
 8006362:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006364:	e138      	b.n	80065d8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800636a:	2b03      	cmp	r3, #3
 800636c:	f200 80f1 	bhi.w	8006552 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006374:	2b01      	cmp	r3, #1
 8006376:	d123      	bne.n	80063c0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800637a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800637c:	68f8      	ldr	r0, [r7, #12]
 800637e:	f000 fc1b 	bl	8006bb8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d001      	beq.n	800638c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	e139      	b.n	8006600 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	691a      	ldr	r2, [r3, #16]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006396:	b2d2      	uxtb	r2, r2
 8006398:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639e:	1c5a      	adds	r2, r3, #1
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063a8:	3b01      	subs	r3, #1
 80063aa:	b29a      	uxth	r2, r3
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	3b01      	subs	r3, #1
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80063be:	e10b      	b.n	80065d8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d14e      	bne.n	8006466 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80063c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ca:	9300      	str	r3, [sp, #0]
 80063cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ce:	2200      	movs	r2, #0
 80063d0:	4906      	ldr	r1, [pc, #24]	; (80063ec <HAL_I2C_Mem_Read+0x22c>)
 80063d2:	68f8      	ldr	r0, [r7, #12]
 80063d4:	f000 fa98 	bl	8006908 <I2C_WaitOnFlagUntilTimeout>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d008      	beq.n	80063f0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e10e      	b.n	8006600 <HAL_I2C_Mem_Read+0x440>
 80063e2:	bf00      	nop
 80063e4:	00100002 	.word	0x00100002
 80063e8:	ffff0000 	.word	0xffff0000
 80063ec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	691a      	ldr	r2, [r3, #16]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640a:	b2d2      	uxtb	r2, r2
 800640c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006412:	1c5a      	adds	r2, r3, #1
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800641c:	3b01      	subs	r3, #1
 800641e:	b29a      	uxth	r2, r3
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006428:	b29b      	uxth	r3, r3
 800642a:	3b01      	subs	r3, #1
 800642c:	b29a      	uxth	r2, r3
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	691a      	ldr	r2, [r3, #16]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643c:	b2d2      	uxtb	r2, r2
 800643e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006444:	1c5a      	adds	r2, r3, #1
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800644e:	3b01      	subs	r3, #1
 8006450:	b29a      	uxth	r2, r3
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800645a:	b29b      	uxth	r3, r3
 800645c:	3b01      	subs	r3, #1
 800645e:	b29a      	uxth	r2, r3
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006464:	e0b8      	b.n	80065d8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006468:	9300      	str	r3, [sp, #0]
 800646a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800646c:	2200      	movs	r2, #0
 800646e:	4966      	ldr	r1, [pc, #408]	; (8006608 <HAL_I2C_Mem_Read+0x448>)
 8006470:	68f8      	ldr	r0, [r7, #12]
 8006472:	f000 fa49 	bl	8006908 <I2C_WaitOnFlagUntilTimeout>
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d001      	beq.n	8006480 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e0bf      	b.n	8006600 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800648e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	691a      	ldr	r2, [r3, #16]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649a:	b2d2      	uxtb	r2, r2
 800649c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a2:	1c5a      	adds	r2, r3, #1
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064ac:	3b01      	subs	r3, #1
 80064ae:	b29a      	uxth	r2, r3
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	3b01      	subs	r3, #1
 80064bc:	b29a      	uxth	r2, r3
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80064c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c4:	9300      	str	r3, [sp, #0]
 80064c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c8:	2200      	movs	r2, #0
 80064ca:	494f      	ldr	r1, [pc, #316]	; (8006608 <HAL_I2C_Mem_Read+0x448>)
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f000 fa1b 	bl	8006908 <I2C_WaitOnFlagUntilTimeout>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d001      	beq.n	80064dc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e091      	b.n	8006600 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	691a      	ldr	r2, [r3, #16]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f6:	b2d2      	uxtb	r2, r2
 80064f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fe:	1c5a      	adds	r2, r3, #1
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006508:	3b01      	subs	r3, #1
 800650a:	b29a      	uxth	r2, r3
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006514:	b29b      	uxth	r3, r3
 8006516:	3b01      	subs	r3, #1
 8006518:	b29a      	uxth	r2, r3
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	691a      	ldr	r2, [r3, #16]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006528:	b2d2      	uxtb	r2, r2
 800652a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006530:	1c5a      	adds	r2, r3, #1
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800653a:	3b01      	subs	r3, #1
 800653c:	b29a      	uxth	r2, r3
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006546:	b29b      	uxth	r3, r3
 8006548:	3b01      	subs	r3, #1
 800654a:	b29a      	uxth	r2, r3
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006550:	e042      	b.n	80065d8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006554:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006556:	68f8      	ldr	r0, [r7, #12]
 8006558:	f000 fb2e 	bl	8006bb8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d001      	beq.n	8006566 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e04c      	b.n	8006600 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	691a      	ldr	r2, [r3, #16]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006570:	b2d2      	uxtb	r2, r2
 8006572:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006578:	1c5a      	adds	r2, r3, #1
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006582:	3b01      	subs	r3, #1
 8006584:	b29a      	uxth	r2, r3
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800658e:	b29b      	uxth	r3, r3
 8006590:	3b01      	subs	r3, #1
 8006592:	b29a      	uxth	r2, r3
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	695b      	ldr	r3, [r3, #20]
 800659e:	f003 0304 	and.w	r3, r3, #4
 80065a2:	2b04      	cmp	r3, #4
 80065a4:	d118      	bne.n	80065d8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	691a      	ldr	r2, [r3, #16]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b0:	b2d2      	uxtb	r2, r2
 80065b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b8:	1c5a      	adds	r2, r3, #1
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065c2:	3b01      	subs	r3, #1
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	3b01      	subs	r3, #1
 80065d2:	b29a      	uxth	r2, r3
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065dc:	2b00      	cmp	r3, #0
 80065de:	f47f aec2 	bne.w	8006366 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2220      	movs	r2, #32
 80065e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80065fa:	2300      	movs	r3, #0
 80065fc:	e000      	b.n	8006600 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80065fe:	2302      	movs	r3, #2
  }
}
 8006600:	4618      	mov	r0, r3
 8006602:	3728      	adds	r7, #40	; 0x28
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}
 8006608:	00010004 	.word	0x00010004

0800660c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b088      	sub	sp, #32
 8006610:	af02      	add	r7, sp, #8
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	4608      	mov	r0, r1
 8006616:	4611      	mov	r1, r2
 8006618:	461a      	mov	r2, r3
 800661a:	4603      	mov	r3, r0
 800661c:	817b      	strh	r3, [r7, #10]
 800661e:	460b      	mov	r3, r1
 8006620:	813b      	strh	r3, [r7, #8]
 8006622:	4613      	mov	r3, r2
 8006624:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006634:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006638:	9300      	str	r3, [sp, #0]
 800663a:	6a3b      	ldr	r3, [r7, #32]
 800663c:	2200      	movs	r2, #0
 800663e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006642:	68f8      	ldr	r0, [r7, #12]
 8006644:	f000 f960 	bl	8006908 <I2C_WaitOnFlagUntilTimeout>
 8006648:	4603      	mov	r3, r0
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00d      	beq.n	800666a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006658:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800665c:	d103      	bne.n	8006666 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006664:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e05f      	b.n	800672a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800666a:	897b      	ldrh	r3, [r7, #10]
 800666c:	b2db      	uxtb	r3, r3
 800666e:	461a      	mov	r2, r3
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006678:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800667a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667c:	6a3a      	ldr	r2, [r7, #32]
 800667e:	492d      	ldr	r1, [pc, #180]	; (8006734 <I2C_RequestMemoryWrite+0x128>)
 8006680:	68f8      	ldr	r0, [r7, #12]
 8006682:	f000 f998 	bl	80069b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006686:	4603      	mov	r3, r0
 8006688:	2b00      	cmp	r3, #0
 800668a:	d001      	beq.n	8006690 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e04c      	b.n	800672a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006690:	2300      	movs	r3, #0
 8006692:	617b      	str	r3, [r7, #20]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	695b      	ldr	r3, [r3, #20]
 800669a:	617b      	str	r3, [r7, #20]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	617b      	str	r3, [r7, #20]
 80066a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066a8:	6a39      	ldr	r1, [r7, #32]
 80066aa:	68f8      	ldr	r0, [r7, #12]
 80066ac:	f000 fa02 	bl	8006ab4 <I2C_WaitOnTXEFlagUntilTimeout>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00d      	beq.n	80066d2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ba:	2b04      	cmp	r3, #4
 80066bc:	d107      	bne.n	80066ce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e02b      	b.n	800672a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80066d2:	88fb      	ldrh	r3, [r7, #6]
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d105      	bne.n	80066e4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80066d8:	893b      	ldrh	r3, [r7, #8]
 80066da:	b2da      	uxtb	r2, r3
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	611a      	str	r2, [r3, #16]
 80066e2:	e021      	b.n	8006728 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80066e4:	893b      	ldrh	r3, [r7, #8]
 80066e6:	0a1b      	lsrs	r3, r3, #8
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	b2da      	uxtb	r2, r3
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066f4:	6a39      	ldr	r1, [r7, #32]
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	f000 f9dc 	bl	8006ab4 <I2C_WaitOnTXEFlagUntilTimeout>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00d      	beq.n	800671e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006706:	2b04      	cmp	r3, #4
 8006708:	d107      	bne.n	800671a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006718:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e005      	b.n	800672a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800671e:	893b      	ldrh	r3, [r7, #8]
 8006720:	b2da      	uxtb	r2, r3
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	3718      	adds	r7, #24
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	00010002 	.word	0x00010002

08006738 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b088      	sub	sp, #32
 800673c:	af02      	add	r7, sp, #8
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	4608      	mov	r0, r1
 8006742:	4611      	mov	r1, r2
 8006744:	461a      	mov	r2, r3
 8006746:	4603      	mov	r3, r0
 8006748:	817b      	strh	r3, [r7, #10]
 800674a:	460b      	mov	r3, r1
 800674c:	813b      	strh	r3, [r7, #8]
 800674e:	4613      	mov	r3, r2
 8006750:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006760:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006770:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006774:	9300      	str	r3, [sp, #0]
 8006776:	6a3b      	ldr	r3, [r7, #32]
 8006778:	2200      	movs	r2, #0
 800677a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800677e:	68f8      	ldr	r0, [r7, #12]
 8006780:	f000 f8c2 	bl	8006908 <I2C_WaitOnFlagUntilTimeout>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00d      	beq.n	80067a6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006794:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006798:	d103      	bne.n	80067a2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80067a2:	2303      	movs	r3, #3
 80067a4:	e0aa      	b.n	80068fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80067a6:	897b      	ldrh	r3, [r7, #10]
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	461a      	mov	r2, r3
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80067b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80067b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b8:	6a3a      	ldr	r2, [r7, #32]
 80067ba:	4952      	ldr	r1, [pc, #328]	; (8006904 <I2C_RequestMemoryRead+0x1cc>)
 80067bc:	68f8      	ldr	r0, [r7, #12]
 80067be:	f000 f8fa 	bl	80069b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d001      	beq.n	80067cc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	e097      	b.n	80068fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067cc:	2300      	movs	r3, #0
 80067ce:	617b      	str	r3, [r7, #20]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	695b      	ldr	r3, [r3, #20]
 80067d6:	617b      	str	r3, [r7, #20]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	699b      	ldr	r3, [r3, #24]
 80067de:	617b      	str	r3, [r7, #20]
 80067e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067e4:	6a39      	ldr	r1, [r7, #32]
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f000 f964 	bl	8006ab4 <I2C_WaitOnTXEFlagUntilTimeout>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00d      	beq.n	800680e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f6:	2b04      	cmp	r3, #4
 80067f8:	d107      	bne.n	800680a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006808:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e076      	b.n	80068fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800680e:	88fb      	ldrh	r3, [r7, #6]
 8006810:	2b01      	cmp	r3, #1
 8006812:	d105      	bne.n	8006820 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006814:	893b      	ldrh	r3, [r7, #8]
 8006816:	b2da      	uxtb	r2, r3
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	611a      	str	r2, [r3, #16]
 800681e:	e021      	b.n	8006864 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006820:	893b      	ldrh	r3, [r7, #8]
 8006822:	0a1b      	lsrs	r3, r3, #8
 8006824:	b29b      	uxth	r3, r3
 8006826:	b2da      	uxtb	r2, r3
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800682e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006830:	6a39      	ldr	r1, [r7, #32]
 8006832:	68f8      	ldr	r0, [r7, #12]
 8006834:	f000 f93e 	bl	8006ab4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d00d      	beq.n	800685a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006842:	2b04      	cmp	r3, #4
 8006844:	d107      	bne.n	8006856 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006854:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e050      	b.n	80068fc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800685a:	893b      	ldrh	r3, [r7, #8]
 800685c:	b2da      	uxtb	r2, r3
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006866:	6a39      	ldr	r1, [r7, #32]
 8006868:	68f8      	ldr	r0, [r7, #12]
 800686a:	f000 f923 	bl	8006ab4 <I2C_WaitOnTXEFlagUntilTimeout>
 800686e:	4603      	mov	r3, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00d      	beq.n	8006890 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006878:	2b04      	cmp	r3, #4
 800687a:	d107      	bne.n	800688c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800688a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	e035      	b.n	80068fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800689e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80068a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a2:	9300      	str	r3, [sp, #0]
 80068a4:	6a3b      	ldr	r3, [r7, #32]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80068ac:	68f8      	ldr	r0, [r7, #12]
 80068ae:	f000 f82b 	bl	8006908 <I2C_WaitOnFlagUntilTimeout>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d00d      	beq.n	80068d4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068c6:	d103      	bne.n	80068d0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80068d0:	2303      	movs	r3, #3
 80068d2:	e013      	b.n	80068fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80068d4:	897b      	ldrh	r3, [r7, #10]
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	f043 0301 	orr.w	r3, r3, #1
 80068dc:	b2da      	uxtb	r2, r3
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80068e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e6:	6a3a      	ldr	r2, [r7, #32]
 80068e8:	4906      	ldr	r1, [pc, #24]	; (8006904 <I2C_RequestMemoryRead+0x1cc>)
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	f000 f863 	bl	80069b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d001      	beq.n	80068fa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	e000      	b.n	80068fc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80068fa:	2300      	movs	r3, #0
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3718      	adds	r7, #24
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}
 8006904:	00010002 	.word	0x00010002

08006908 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	603b      	str	r3, [r7, #0]
 8006914:	4613      	mov	r3, r2
 8006916:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006918:	e025      	b.n	8006966 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006920:	d021      	beq.n	8006966 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006922:	f7fe fca1 	bl	8005268 <HAL_GetTick>
 8006926:	4602      	mov	r2, r0
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	683a      	ldr	r2, [r7, #0]
 800692e:	429a      	cmp	r2, r3
 8006930:	d302      	bcc.n	8006938 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d116      	bne.n	8006966 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2200      	movs	r2, #0
 800693c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2220      	movs	r2, #32
 8006942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2200      	movs	r2, #0
 800694a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006952:	f043 0220 	orr.w	r2, r3, #32
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e023      	b.n	80069ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	0c1b      	lsrs	r3, r3, #16
 800696a:	b2db      	uxtb	r3, r3
 800696c:	2b01      	cmp	r3, #1
 800696e:	d10d      	bne.n	800698c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	695b      	ldr	r3, [r3, #20]
 8006976:	43da      	mvns	r2, r3
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	4013      	ands	r3, r2
 800697c:	b29b      	uxth	r3, r3
 800697e:	2b00      	cmp	r3, #0
 8006980:	bf0c      	ite	eq
 8006982:	2301      	moveq	r3, #1
 8006984:	2300      	movne	r3, #0
 8006986:	b2db      	uxtb	r3, r3
 8006988:	461a      	mov	r2, r3
 800698a:	e00c      	b.n	80069a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	699b      	ldr	r3, [r3, #24]
 8006992:	43da      	mvns	r2, r3
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	4013      	ands	r3, r2
 8006998:	b29b      	uxth	r3, r3
 800699a:	2b00      	cmp	r3, #0
 800699c:	bf0c      	ite	eq
 800699e:	2301      	moveq	r3, #1
 80069a0:	2300      	movne	r3, #0
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	461a      	mov	r2, r3
 80069a6:	79fb      	ldrb	r3, [r7, #7]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d0b6      	beq.n	800691a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3710      	adds	r7, #16
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}

080069b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80069b6:	b580      	push	{r7, lr}
 80069b8:	b084      	sub	sp, #16
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	60f8      	str	r0, [r7, #12]
 80069be:	60b9      	str	r1, [r7, #8]
 80069c0:	607a      	str	r2, [r7, #4]
 80069c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80069c4:	e051      	b.n	8006a6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	695b      	ldr	r3, [r3, #20]
 80069cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069d4:	d123      	bne.n	8006a1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80069ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2200      	movs	r2, #0
 80069f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2220      	movs	r2, #32
 80069fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0a:	f043 0204 	orr.w	r2, r3, #4
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e046      	b.n	8006aac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a24:	d021      	beq.n	8006a6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a26:	f7fe fc1f 	bl	8005268 <HAL_GetTick>
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	1ad3      	subs	r3, r2, r3
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d302      	bcc.n	8006a3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d116      	bne.n	8006a6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2220      	movs	r2, #32
 8006a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a56:	f043 0220 	orr.w	r2, r3, #32
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e020      	b.n	8006aac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	0c1b      	lsrs	r3, r3, #16
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d10c      	bne.n	8006a8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	695b      	ldr	r3, [r3, #20]
 8006a7a:	43da      	mvns	r2, r3
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	4013      	ands	r3, r2
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	bf14      	ite	ne
 8006a86:	2301      	movne	r3, #1
 8006a88:	2300      	moveq	r3, #0
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	e00b      	b.n	8006aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	699b      	ldr	r3, [r3, #24]
 8006a94:	43da      	mvns	r2, r3
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	4013      	ands	r3, r2
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	bf14      	ite	ne
 8006aa0:	2301      	movne	r3, #1
 8006aa2:	2300      	moveq	r3, #0
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d18d      	bne.n	80069c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3710      	adds	r7, #16
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ac0:	e02d      	b.n	8006b1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f000 f8ce 	bl	8006c64 <I2C_IsAcknowledgeFailed>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d001      	beq.n	8006ad2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e02d      	b.n	8006b2e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad8:	d021      	beq.n	8006b1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ada:	f7fe fbc5 	bl	8005268 <HAL_GetTick>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	1ad3      	subs	r3, r2, r3
 8006ae4:	68ba      	ldr	r2, [r7, #8]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d302      	bcc.n	8006af0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d116      	bne.n	8006b1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2200      	movs	r2, #0
 8006af4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2220      	movs	r2, #32
 8006afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0a:	f043 0220 	orr.w	r2, r3, #32
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e007      	b.n	8006b2e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	695b      	ldr	r3, [r3, #20]
 8006b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b28:	2b80      	cmp	r3, #128	; 0x80
 8006b2a:	d1ca      	bne.n	8006ac2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}

08006b36 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b36:	b580      	push	{r7, lr}
 8006b38:	b084      	sub	sp, #16
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	60f8      	str	r0, [r7, #12]
 8006b3e:	60b9      	str	r1, [r7, #8]
 8006b40:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b42:	e02d      	b.n	8006ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006b44:	68f8      	ldr	r0, [r7, #12]
 8006b46:	f000 f88d 	bl	8006c64 <I2C_IsAcknowledgeFailed>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d001      	beq.n	8006b54 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	e02d      	b.n	8006bb0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b5a:	d021      	beq.n	8006ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b5c:	f7fe fb84 	bl	8005268 <HAL_GetTick>
 8006b60:	4602      	mov	r2, r0
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	68ba      	ldr	r2, [r7, #8]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d302      	bcc.n	8006b72 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d116      	bne.n	8006ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2200      	movs	r2, #0
 8006b76:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8c:	f043 0220 	orr.w	r2, r3, #32
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e007      	b.n	8006bb0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	695b      	ldr	r3, [r3, #20]
 8006ba6:	f003 0304 	and.w	r3, r3, #4
 8006baa:	2b04      	cmp	r3, #4
 8006bac:	d1ca      	bne.n	8006b44 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3710      	adds	r7, #16
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006bc4:	e042      	b.n	8006c4c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	695b      	ldr	r3, [r3, #20]
 8006bcc:	f003 0310 	and.w	r3, r3, #16
 8006bd0:	2b10      	cmp	r3, #16
 8006bd2:	d119      	bne.n	8006c08 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f06f 0210 	mvn.w	r2, #16
 8006bdc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2200      	movs	r2, #0
 8006be2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2220      	movs	r2, #32
 8006be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	e029      	b.n	8006c5c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c08:	f7fe fb2e 	bl	8005268 <HAL_GetTick>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	68ba      	ldr	r2, [r7, #8]
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d302      	bcc.n	8006c1e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d116      	bne.n	8006c4c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2200      	movs	r2, #0
 8006c22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2220      	movs	r2, #32
 8006c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c38:	f043 0220 	orr.w	r2, r3, #32
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e007      	b.n	8006c5c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	695b      	ldr	r3, [r3, #20]
 8006c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c56:	2b40      	cmp	r3, #64	; 0x40
 8006c58:	d1b5      	bne.n	8006bc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006c5a:	2300      	movs	r3, #0
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3710      	adds	r7, #16
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	695b      	ldr	r3, [r3, #20]
 8006c72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c7a:	d11b      	bne.n	8006cb4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c84:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2220      	movs	r2, #32
 8006c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca0:	f043 0204 	orr.w	r2, r3, #4
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e000      	b.n	8006cb6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	370c      	adds	r7, #12
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr

08006cc2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006cc2:	b480      	push	{r7}
 8006cc4:	b083      	sub	sp, #12
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
 8006cca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	2b20      	cmp	r3, #32
 8006cd6:	d129      	bne.n	8006d2c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2224      	movs	r2, #36	; 0x24
 8006cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f022 0201 	bic.w	r2, r2, #1
 8006cee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f022 0210 	bic.w	r2, r2, #16
 8006cfe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	683a      	ldr	r2, [r7, #0]
 8006d0c:	430a      	orrs	r2, r1
 8006d0e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f042 0201 	orr.w	r2, r2, #1
 8006d1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2220      	movs	r2, #32
 8006d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	e000      	b.n	8006d2e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8006d2c:	2302      	movs	r3, #2
  }
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	370c      	adds	r7, #12
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006d3a:	b480      	push	{r7}
 8006d3c:	b085      	sub	sp, #20
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
 8006d42:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006d44:	2300      	movs	r3, #0
 8006d46:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	2b20      	cmp	r3, #32
 8006d52:	d12a      	bne.n	8006daa <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2224      	movs	r2, #36	; 0x24
 8006d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f022 0201 	bic.w	r2, r2, #1
 8006d6a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d72:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006d74:	89fb      	ldrh	r3, [r7, #14]
 8006d76:	f023 030f 	bic.w	r3, r3, #15
 8006d7a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	b29a      	uxth	r2, r3
 8006d80:	89fb      	ldrh	r3, [r7, #14]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	89fa      	ldrh	r2, [r7, #14]
 8006d8c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f042 0201 	orr.w	r2, r2, #1
 8006d9c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2220      	movs	r2, #32
 8006da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006da6:	2300      	movs	r3, #0
 8006da8:	e000      	b.n	8006dac <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006daa:	2302      	movs	r3, #2
  }
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3714      	adds	r7, #20
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006db8:	b590      	push	{r4, r7, lr}
 8006dba:	b08d      	sub	sp, #52	; 0x34
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dc6:	6a3b      	ldr	r3, [r7, #32]
 8006dc8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f005 fa56 	bl	800c280 <USB_GetMode>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	f040 839d 	bne.w	8007516 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4618      	mov	r0, r3
 8006de2:	f005 f9ba 	bl	800c15a <USB_ReadInterrupts>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f000 8393 	beq.w	8007514 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4618      	mov	r0, r3
 8006df4:	f005 f9b1 	bl	800c15a <USB_ReadInterrupts>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	f003 0302 	and.w	r3, r3, #2
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	d107      	bne.n	8006e12 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	695a      	ldr	r2, [r3, #20]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f002 0202 	and.w	r2, r2, #2
 8006e10:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4618      	mov	r0, r3
 8006e18:	f005 f99f 	bl	800c15a <USB_ReadInterrupts>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	f003 0310 	and.w	r3, r3, #16
 8006e22:	2b10      	cmp	r3, #16
 8006e24:	d161      	bne.n	8006eea <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	699a      	ldr	r2, [r3, #24]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f022 0210 	bic.w	r2, r2, #16
 8006e34:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8006e36:	6a3b      	ldr	r3, [r7, #32]
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	f003 020f 	and.w	r2, r3, #15
 8006e42:	4613      	mov	r3, r2
 8006e44:	00db      	lsls	r3, r3, #3
 8006e46:	1a9b      	subs	r3, r3, r2
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	4413      	add	r3, r2
 8006e52:	3304      	adds	r3, #4
 8006e54:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	0c5b      	lsrs	r3, r3, #17
 8006e5a:	f003 030f 	and.w	r3, r3, #15
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d124      	bne.n	8006eac <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006e62:	69ba      	ldr	r2, [r7, #24]
 8006e64:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006e68:	4013      	ands	r3, r2
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d035      	beq.n	8006eda <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	091b      	lsrs	r3, r3, #4
 8006e76:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006e78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	461a      	mov	r2, r3
 8006e80:	6a38      	ldr	r0, [r7, #32]
 8006e82:	f005 f818 	bl	800beb6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	68da      	ldr	r2, [r3, #12]
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	091b      	lsrs	r3, r3, #4
 8006e8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e92:	441a      	add	r2, r3
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	699a      	ldr	r2, [r3, #24]
 8006e9c:	69bb      	ldr	r3, [r7, #24]
 8006e9e:	091b      	lsrs	r3, r3, #4
 8006ea0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ea4:	441a      	add	r2, r3
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	619a      	str	r2, [r3, #24]
 8006eaa:	e016      	b.n	8006eda <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	0c5b      	lsrs	r3, r3, #17
 8006eb0:	f003 030f 	and.w	r3, r3, #15
 8006eb4:	2b06      	cmp	r3, #6
 8006eb6:	d110      	bne.n	8006eda <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006ebe:	2208      	movs	r2, #8
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	6a38      	ldr	r0, [r7, #32]
 8006ec4:	f004 fff7 	bl	800beb6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	699a      	ldr	r2, [r3, #24]
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	091b      	lsrs	r3, r3, #4
 8006ed0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ed4:	441a      	add	r2, r3
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	699a      	ldr	r2, [r3, #24]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f042 0210 	orr.w	r2, r2, #16
 8006ee8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f005 f933 	bl	800c15a <USB_ReadInterrupts>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006efa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006efe:	d16e      	bne.n	8006fde <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8006f00:	2300      	movs	r3, #0
 8006f02:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f005 f939 	bl	800c180 <USB_ReadDevAllOutEpInterrupt>
 8006f0e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006f10:	e062      	b.n	8006fd8 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f14:	f003 0301 	and.w	r3, r3, #1
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d057      	beq.n	8006fcc <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f22:	b2d2      	uxtb	r2, r2
 8006f24:	4611      	mov	r1, r2
 8006f26:	4618      	mov	r0, r3
 8006f28:	f005 f95e 	bl	800c1e8 <USB_ReadDevOutEPInterrupt>
 8006f2c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	f003 0301 	and.w	r3, r3, #1
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d00c      	beq.n	8006f52 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3a:	015a      	lsls	r2, r3, #5
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	4413      	add	r3, r2
 8006f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f44:	461a      	mov	r2, r3
 8006f46:	2301      	movs	r3, #1
 8006f48:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006f4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 fd4f 	bl	80079f0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	f003 0308 	and.w	r3, r3, #8
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d00c      	beq.n	8006f76 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5e:	015a      	lsls	r2, r3, #5
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	4413      	add	r3, r2
 8006f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f68:	461a      	mov	r2, r3
 8006f6a:	2308      	movs	r3, #8
 8006f6c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006f6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 fe49 	bl	8007c08 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	f003 0310 	and.w	r3, r3, #16
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d008      	beq.n	8006f92 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f82:	015a      	lsls	r2, r3, #5
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	4413      	add	r3, r2
 8006f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	2310      	movs	r3, #16
 8006f90:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	f003 0320 	and.w	r3, r3, #32
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d008      	beq.n	8006fae <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9e:	015a      	lsls	r2, r3, #5
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	4413      	add	r3, r2
 8006fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fa8:	461a      	mov	r2, r3
 8006faa:	2320      	movs	r3, #32
 8006fac:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d009      	beq.n	8006fcc <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fba:	015a      	lsls	r2, r3, #5
 8006fbc:	69fb      	ldr	r3, [r7, #28]
 8006fbe:	4413      	add	r3, r2
 8006fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006fca:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fce:	3301      	adds	r3, #1
 8006fd0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd4:	085b      	lsrs	r3, r3, #1
 8006fd6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d199      	bne.n	8006f12 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f005 f8b9 	bl	800c15a <USB_ReadInterrupts>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006fee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ff2:	f040 80c0 	bne.w	8007176 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f005 f8da 	bl	800c1b4 <USB_ReadDevAllInEpInterrupt>
 8007000:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8007002:	2300      	movs	r3, #0
 8007004:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8007006:	e0b2      	b.n	800716e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800700a:	f003 0301 	and.w	r3, r3, #1
 800700e:	2b00      	cmp	r3, #0
 8007010:	f000 80a7 	beq.w	8007162 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800701a:	b2d2      	uxtb	r2, r2
 800701c:	4611      	mov	r1, r2
 800701e:	4618      	mov	r0, r3
 8007020:	f005 f900 	bl	800c224 <USB_ReadDevInEPInterrupt>
 8007024:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	f003 0301 	and.w	r3, r3, #1
 800702c:	2b00      	cmp	r3, #0
 800702e:	d057      	beq.n	80070e0 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007032:	f003 030f 	and.w	r3, r3, #15
 8007036:	2201      	movs	r2, #1
 8007038:	fa02 f303 	lsl.w	r3, r2, r3
 800703c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007044:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	43db      	mvns	r3, r3
 800704a:	69f9      	ldr	r1, [r7, #28]
 800704c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007050:	4013      	ands	r3, r2
 8007052:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007056:	015a      	lsls	r2, r3, #5
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	4413      	add	r3, r2
 800705c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007060:	461a      	mov	r2, r3
 8007062:	2301      	movs	r3, #1
 8007064:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	2b01      	cmp	r3, #1
 800706c:	d132      	bne.n	80070d4 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800706e:	6879      	ldr	r1, [r7, #4]
 8007070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007072:	4613      	mov	r3, r2
 8007074:	00db      	lsls	r3, r3, #3
 8007076:	1a9b      	subs	r3, r3, r2
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	440b      	add	r3, r1
 800707c:	3348      	adds	r3, #72	; 0x48
 800707e:	6819      	ldr	r1, [r3, #0]
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007084:	4613      	mov	r3, r2
 8007086:	00db      	lsls	r3, r3, #3
 8007088:	1a9b      	subs	r3, r3, r2
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	4403      	add	r3, r0
 800708e:	3344      	adds	r3, #68	; 0x44
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4419      	add	r1, r3
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007098:	4613      	mov	r3, r2
 800709a:	00db      	lsls	r3, r3, #3
 800709c:	1a9b      	subs	r3, r3, r2
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	4403      	add	r3, r0
 80070a2:	3348      	adds	r3, #72	; 0x48
 80070a4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80070a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d113      	bne.n	80070d4 <HAL_PCD_IRQHandler+0x31c>
 80070ac:	6879      	ldr	r1, [r7, #4]
 80070ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070b0:	4613      	mov	r3, r2
 80070b2:	00db      	lsls	r3, r3, #3
 80070b4:	1a9b      	subs	r3, r3, r2
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	440b      	add	r3, r1
 80070ba:	3350      	adds	r3, #80	; 0x50
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d108      	bne.n	80070d4 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6818      	ldr	r0, [r3, #0]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80070cc:	461a      	mov	r2, r3
 80070ce:	2101      	movs	r1, #1
 80070d0:	f005 f908 	bl	800c2e4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80070d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	4619      	mov	r1, r3
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f00b f99d 	bl	801241a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	f003 0308 	and.w	r3, r3, #8
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d008      	beq.n	80070fc <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80070ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ec:	015a      	lsls	r2, r3, #5
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	4413      	add	r3, r2
 80070f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070f6:	461a      	mov	r2, r3
 80070f8:	2308      	movs	r3, #8
 80070fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	f003 0310 	and.w	r3, r3, #16
 8007102:	2b00      	cmp	r3, #0
 8007104:	d008      	beq.n	8007118 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007108:	015a      	lsls	r2, r3, #5
 800710a:	69fb      	ldr	r3, [r7, #28]
 800710c:	4413      	add	r3, r2
 800710e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007112:	461a      	mov	r2, r3
 8007114:	2310      	movs	r3, #16
 8007116:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800711e:	2b00      	cmp	r3, #0
 8007120:	d008      	beq.n	8007134 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007124:	015a      	lsls	r2, r3, #5
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	4413      	add	r3, r2
 800712a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800712e:	461a      	mov	r2, r3
 8007130:	2340      	movs	r3, #64	; 0x40
 8007132:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	f003 0302 	and.w	r3, r3, #2
 800713a:	2b00      	cmp	r3, #0
 800713c:	d008      	beq.n	8007150 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800713e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007140:	015a      	lsls	r2, r3, #5
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	4413      	add	r3, r2
 8007146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800714a:	461a      	mov	r2, r3
 800714c:	2302      	movs	r3, #2
 800714e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007156:	2b00      	cmp	r3, #0
 8007158:	d003      	beq.n	8007162 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800715a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 fbb9 	bl	80078d4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007164:	3301      	adds	r3, #1
 8007166:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716a:	085b      	lsrs	r3, r3, #1
 800716c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800716e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007170:	2b00      	cmp	r3, #0
 8007172:	f47f af49 	bne.w	8007008 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4618      	mov	r0, r3
 800717c:	f004 ffed 	bl	800c15a <USB_ReadInterrupts>
 8007180:	4603      	mov	r3, r0
 8007182:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007186:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800718a:	d122      	bne.n	80071d2 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	69fa      	ldr	r2, [r7, #28]
 8007196:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800719a:	f023 0301 	bic.w	r3, r3, #1
 800719e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d108      	bne.n	80071bc <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80071b2:	2100      	movs	r1, #0
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 fd6d 	bl	8007c94 <HAL_PCDEx_LPM_Callback>
 80071ba:	e002      	b.n	80071c2 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f00b f9a3 	bl	8012508 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	695a      	ldr	r2, [r3, #20]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80071d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4618      	mov	r0, r3
 80071d8:	f004 ffbf 	bl	800c15a <USB_ReadInterrupts>
 80071dc:	4603      	mov	r3, r0
 80071de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071e6:	d112      	bne.n	800720e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80071e8:	69fb      	ldr	r3, [r7, #28]
 80071ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	f003 0301 	and.w	r3, r3, #1
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d102      	bne.n	80071fe <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f00b f95f 	bl	80124bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	695a      	ldr	r2, [r3, #20]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800720c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4618      	mov	r0, r3
 8007214:	f004 ffa1 	bl	800c15a <USB_ReadInterrupts>
 8007218:	4603      	mov	r3, r0
 800721a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800721e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007222:	f040 80c7 	bne.w	80073b4 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007226:	69fb      	ldr	r3, [r7, #28]
 8007228:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	69fa      	ldr	r2, [r7, #28]
 8007230:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007234:	f023 0301 	bic.w	r3, r3, #1
 8007238:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2110      	movs	r1, #16
 8007240:	4618      	mov	r0, r3
 8007242:	f004 f993 	bl	800b56c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007246:	2300      	movs	r3, #0
 8007248:	62fb      	str	r3, [r7, #44]	; 0x2c
 800724a:	e056      	b.n	80072fa <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800724c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800724e:	015a      	lsls	r2, r3, #5
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	4413      	add	r3, r2
 8007254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007258:	461a      	mov	r2, r3
 800725a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800725e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007262:	015a      	lsls	r2, r3, #5
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	4413      	add	r3, r2
 8007268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007270:	0151      	lsls	r1, r2, #5
 8007272:	69fa      	ldr	r2, [r7, #28]
 8007274:	440a      	add	r2, r1
 8007276:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800727a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800727e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007282:	015a      	lsls	r2, r3, #5
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	4413      	add	r3, r2
 8007288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007290:	0151      	lsls	r1, r2, #5
 8007292:	69fa      	ldr	r2, [r7, #28]
 8007294:	440a      	add	r2, r1
 8007296:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800729a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800729e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80072a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a2:	015a      	lsls	r2, r3, #5
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	4413      	add	r3, r2
 80072a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ac:	461a      	mov	r2, r3
 80072ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80072b2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80072b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b6:	015a      	lsls	r2, r3, #5
 80072b8:	69fb      	ldr	r3, [r7, #28]
 80072ba:	4413      	add	r3, r2
 80072bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072c4:	0151      	lsls	r1, r2, #5
 80072c6:	69fa      	ldr	r2, [r7, #28]
 80072c8:	440a      	add	r2, r1
 80072ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80072d2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80072d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d6:	015a      	lsls	r2, r3, #5
 80072d8:	69fb      	ldr	r3, [r7, #28]
 80072da:	4413      	add	r3, r2
 80072dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072e4:	0151      	lsls	r1, r2, #5
 80072e6:	69fa      	ldr	r2, [r7, #28]
 80072e8:	440a      	add	r2, r1
 80072ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80072f2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f6:	3301      	adds	r3, #1
 80072f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007300:	429a      	cmp	r2, r3
 8007302:	d3a3      	bcc.n	800724c <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800730a:	69db      	ldr	r3, [r3, #28]
 800730c:	69fa      	ldr	r2, [r7, #28]
 800730e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007312:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007316:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800731c:	2b00      	cmp	r3, #0
 800731e:	d016      	beq.n	800734e <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007326:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800732a:	69fa      	ldr	r2, [r7, #28]
 800732c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007330:	f043 030b 	orr.w	r3, r3, #11
 8007334:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007338:	69fb      	ldr	r3, [r7, #28]
 800733a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800733e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007340:	69fa      	ldr	r2, [r7, #28]
 8007342:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007346:	f043 030b 	orr.w	r3, r3, #11
 800734a:	6453      	str	r3, [r2, #68]	; 0x44
 800734c:	e015      	b.n	800737a <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007354:	695b      	ldr	r3, [r3, #20]
 8007356:	69fa      	ldr	r2, [r7, #28]
 8007358:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800735c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007360:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8007364:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	69fa      	ldr	r2, [r7, #28]
 8007370:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007374:	f043 030b 	orr.w	r3, r3, #11
 8007378:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	69fa      	ldr	r2, [r7, #28]
 8007384:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007388:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800738c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6818      	ldr	r0, [r3, #0]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800739e:	461a      	mov	r2, r3
 80073a0:	f004 ffa0 	bl	800c2e4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	695a      	ldr	r2, [r3, #20]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80073b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4618      	mov	r0, r3
 80073ba:	f004 fece 	bl	800c15a <USB_ReadInterrupts>
 80073be:	4603      	mov	r3, r0
 80073c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80073c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073c8:	d124      	bne.n	8007414 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4618      	mov	r0, r3
 80073d0:	f004 ff64 	bl	800c29c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4618      	mov	r0, r3
 80073da:	f004 f8eb 	bl	800b5b4 <USB_GetDevSpeed>
 80073de:	4603      	mov	r3, r0
 80073e0:	461a      	mov	r2, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681c      	ldr	r4, [r3, #0]
 80073ea:	f001 f8db 	bl	80085a4 <HAL_RCC_GetHCLKFreq>
 80073ee:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	461a      	mov	r2, r3
 80073f8:	4620      	mov	r0, r4
 80073fa:	f004 f815 	bl	800b428 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f00b f833 	bl	801246a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	695a      	ldr	r2, [r3, #20]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007412:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4618      	mov	r0, r3
 800741a:	f004 fe9e 	bl	800c15a <USB_ReadInterrupts>
 800741e:	4603      	mov	r3, r0
 8007420:	f003 0308 	and.w	r3, r3, #8
 8007424:	2b08      	cmp	r3, #8
 8007426:	d10a      	bne.n	800743e <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f00b f810 	bl	801244e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	695a      	ldr	r2, [r3, #20]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f002 0208 	and.w	r2, r2, #8
 800743c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4618      	mov	r0, r3
 8007444:	f004 fe89 	bl	800c15a <USB_ReadInterrupts>
 8007448:	4603      	mov	r3, r0
 800744a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800744e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007452:	d10f      	bne.n	8007474 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007454:	2300      	movs	r3, #0
 8007456:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745a:	b2db      	uxtb	r3, r3
 800745c:	4619      	mov	r1, r3
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f00b f872 	bl	8012548 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	695a      	ldr	r2, [r3, #20]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007472:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4618      	mov	r0, r3
 800747a:	f004 fe6e 	bl	800c15a <USB_ReadInterrupts>
 800747e:	4603      	mov	r3, r0
 8007480:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007484:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007488:	d10f      	bne.n	80074aa <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800748a:	2300      	movs	r3, #0
 800748c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800748e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007490:	b2db      	uxtb	r3, r3
 8007492:	4619      	mov	r1, r3
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f00b f845 	bl	8012524 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	695a      	ldr	r2, [r3, #20]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80074a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4618      	mov	r0, r3
 80074b0:	f004 fe53 	bl	800c15a <USB_ReadInterrupts>
 80074b4:	4603      	mov	r3, r0
 80074b6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80074ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074be:	d10a      	bne.n	80074d6 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f00b f853 	bl	801256c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	695a      	ldr	r2, [r3, #20]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80074d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4618      	mov	r0, r3
 80074dc:	f004 fe3d 	bl	800c15a <USB_ReadInterrupts>
 80074e0:	4603      	mov	r3, r0
 80074e2:	f003 0304 	and.w	r3, r3, #4
 80074e6:	2b04      	cmp	r3, #4
 80074e8:	d115      	bne.n	8007516 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80074f2:	69bb      	ldr	r3, [r7, #24]
 80074f4:	f003 0304 	and.w	r3, r3, #4
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d002      	beq.n	8007502 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f00b f843 	bl	8012588 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	6859      	ldr	r1, [r3, #4]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	69ba      	ldr	r2, [r7, #24]
 800750e:	430a      	orrs	r2, r1
 8007510:	605a      	str	r2, [r3, #4]
 8007512:	e000      	b.n	8007516 <HAL_PCD_IRQHandler+0x75e>
      return;
 8007514:	bf00      	nop
    }
  }
}
 8007516:	3734      	adds	r7, #52	; 0x34
 8007518:	46bd      	mov	sp, r7
 800751a:	bd90      	pop	{r4, r7, pc}

0800751c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	460b      	mov	r3, r1
 8007526:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800752e:	2b01      	cmp	r3, #1
 8007530:	d101      	bne.n	8007536 <HAL_PCD_SetAddress+0x1a>
 8007532:	2302      	movs	r3, #2
 8007534:	e013      	b.n	800755e <HAL_PCD_SetAddress+0x42>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2201      	movs	r2, #1
 800753a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	78fa      	ldrb	r2, [r7, #3]
 8007542:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	78fa      	ldrb	r2, [r7, #3]
 800754c:	4611      	mov	r1, r2
 800754e:	4618      	mov	r0, r3
 8007550:	f004 fddd 	bl	800c10e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800755c:	2300      	movs	r3, #0
}
 800755e:	4618      	mov	r0, r3
 8007560:	3708      	adds	r7, #8
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}

08007566 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007566:	b580      	push	{r7, lr}
 8007568:	b084      	sub	sp, #16
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
 800756e:	4608      	mov	r0, r1
 8007570:	4611      	mov	r1, r2
 8007572:	461a      	mov	r2, r3
 8007574:	4603      	mov	r3, r0
 8007576:	70fb      	strb	r3, [r7, #3]
 8007578:	460b      	mov	r3, r1
 800757a:	803b      	strh	r3, [r7, #0]
 800757c:	4613      	mov	r3, r2
 800757e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007580:	2300      	movs	r3, #0
 8007582:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007584:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007588:	2b00      	cmp	r3, #0
 800758a:	da0f      	bge.n	80075ac <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800758c:	78fb      	ldrb	r3, [r7, #3]
 800758e:	f003 020f 	and.w	r2, r3, #15
 8007592:	4613      	mov	r3, r2
 8007594:	00db      	lsls	r3, r3, #3
 8007596:	1a9b      	subs	r3, r3, r2
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	3338      	adds	r3, #56	; 0x38
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	4413      	add	r3, r2
 80075a0:	3304      	adds	r3, #4
 80075a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2201      	movs	r2, #1
 80075a8:	705a      	strb	r2, [r3, #1]
 80075aa:	e00f      	b.n	80075cc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80075ac:	78fb      	ldrb	r3, [r7, #3]
 80075ae:	f003 020f 	and.w	r2, r3, #15
 80075b2:	4613      	mov	r3, r2
 80075b4:	00db      	lsls	r3, r3, #3
 80075b6:	1a9b      	subs	r3, r3, r2
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	4413      	add	r3, r2
 80075c2:	3304      	adds	r3, #4
 80075c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2200      	movs	r2, #0
 80075ca:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80075cc:	78fb      	ldrb	r3, [r7, #3]
 80075ce:	f003 030f 	and.w	r3, r3, #15
 80075d2:	b2da      	uxtb	r2, r3
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80075d8:	883a      	ldrh	r2, [r7, #0]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	78ba      	ldrb	r2, [r7, #2]
 80075e2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	785b      	ldrb	r3, [r3, #1]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d004      	beq.n	80075f6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	b29a      	uxth	r2, r3
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80075f6:	78bb      	ldrb	r3, [r7, #2]
 80075f8:	2b02      	cmp	r3, #2
 80075fa:	d102      	bne.n	8007602 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2200      	movs	r2, #0
 8007600:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007608:	2b01      	cmp	r3, #1
 800760a:	d101      	bne.n	8007610 <HAL_PCD_EP_Open+0xaa>
 800760c:	2302      	movs	r3, #2
 800760e:	e00e      	b.n	800762e <HAL_PCD_EP_Open+0xc8>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2201      	movs	r2, #1
 8007614:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	68f9      	ldr	r1, [r7, #12]
 800761e:	4618      	mov	r0, r3
 8007620:	f003 ffed 	bl	800b5fe <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800762c:	7afb      	ldrb	r3, [r7, #11]
}
 800762e:	4618      	mov	r0, r3
 8007630:	3710      	adds	r7, #16
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007636:	b580      	push	{r7, lr}
 8007638:	b086      	sub	sp, #24
 800763a:	af00      	add	r7, sp, #0
 800763c:	60f8      	str	r0, [r7, #12]
 800763e:	607a      	str	r2, [r7, #4]
 8007640:	603b      	str	r3, [r7, #0]
 8007642:	460b      	mov	r3, r1
 8007644:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007646:	7afb      	ldrb	r3, [r7, #11]
 8007648:	f003 020f 	and.w	r2, r3, #15
 800764c:	4613      	mov	r3, r2
 800764e:	00db      	lsls	r3, r3, #3
 8007650:	1a9b      	subs	r3, r3, r2
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007658:	68fa      	ldr	r2, [r7, #12]
 800765a:	4413      	add	r3, r2
 800765c:	3304      	adds	r3, #4
 800765e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	683a      	ldr	r2, [r7, #0]
 800766a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	2200      	movs	r2, #0
 8007670:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	2200      	movs	r2, #0
 8007676:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007678:	7afb      	ldrb	r3, [r7, #11]
 800767a:	f003 030f 	and.w	r3, r3, #15
 800767e:	b2da      	uxtb	r2, r3
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	691b      	ldr	r3, [r3, #16]
 8007688:	2b01      	cmp	r3, #1
 800768a:	d102      	bne.n	8007692 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007692:	7afb      	ldrb	r3, [r7, #11]
 8007694:	f003 030f 	and.w	r3, r3, #15
 8007698:	2b00      	cmp	r3, #0
 800769a:	d109      	bne.n	80076b0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6818      	ldr	r0, [r3, #0]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	691b      	ldr	r3, [r3, #16]
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	461a      	mov	r2, r3
 80076a8:	6979      	ldr	r1, [r7, #20]
 80076aa:	f004 fa73 	bl	800bb94 <USB_EP0StartXfer>
 80076ae:	e008      	b.n	80076c2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6818      	ldr	r0, [r3, #0]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	691b      	ldr	r3, [r3, #16]
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	461a      	mov	r2, r3
 80076bc:	6979      	ldr	r1, [r7, #20]
 80076be:	f004 f825 	bl	800b70c <USB_EPStartXfer>
  }

  return HAL_OK;
 80076c2:	2300      	movs	r3, #0
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3718      	adds	r7, #24
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b086      	sub	sp, #24
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	607a      	str	r2, [r7, #4]
 80076d6:	603b      	str	r3, [r7, #0]
 80076d8:	460b      	mov	r3, r1
 80076da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80076dc:	7afb      	ldrb	r3, [r7, #11]
 80076de:	f003 020f 	and.w	r2, r3, #15
 80076e2:	4613      	mov	r3, r2
 80076e4:	00db      	lsls	r3, r3, #3
 80076e6:	1a9b      	subs	r3, r3, r2
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	3338      	adds	r3, #56	; 0x38
 80076ec:	68fa      	ldr	r2, [r7, #12]
 80076ee:	4413      	add	r3, r2
 80076f0:	3304      	adds	r3, #4
 80076f2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	683a      	ldr	r2, [r7, #0]
 80076fe:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	2200      	movs	r2, #0
 8007704:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	2201      	movs	r2, #1
 800770a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800770c:	7afb      	ldrb	r3, [r7, #11]
 800770e:	f003 030f 	and.w	r3, r3, #15
 8007712:	b2da      	uxtb	r2, r3
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	691b      	ldr	r3, [r3, #16]
 800771c:	2b01      	cmp	r3, #1
 800771e:	d102      	bne.n	8007726 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007726:	7afb      	ldrb	r3, [r7, #11]
 8007728:	f003 030f 	and.w	r3, r3, #15
 800772c:	2b00      	cmp	r3, #0
 800772e:	d109      	bne.n	8007744 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	6818      	ldr	r0, [r3, #0]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	691b      	ldr	r3, [r3, #16]
 8007738:	b2db      	uxtb	r3, r3
 800773a:	461a      	mov	r2, r3
 800773c:	6979      	ldr	r1, [r7, #20]
 800773e:	f004 fa29 	bl	800bb94 <USB_EP0StartXfer>
 8007742:	e008      	b.n	8007756 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6818      	ldr	r0, [r3, #0]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	691b      	ldr	r3, [r3, #16]
 800774c:	b2db      	uxtb	r3, r3
 800774e:	461a      	mov	r2, r3
 8007750:	6979      	ldr	r1, [r7, #20]
 8007752:	f003 ffdb 	bl	800b70c <USB_EPStartXfer>
  }

  return HAL_OK;
 8007756:	2300      	movs	r3, #0
}
 8007758:	4618      	mov	r0, r3
 800775a:	3718      	adds	r7, #24
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	460b      	mov	r3, r1
 800776a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800776c:	78fb      	ldrb	r3, [r7, #3]
 800776e:	f003 020f 	and.w	r2, r3, #15
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	429a      	cmp	r2, r3
 8007778:	d901      	bls.n	800777e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	e050      	b.n	8007820 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800777e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007782:	2b00      	cmp	r3, #0
 8007784:	da0f      	bge.n	80077a6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007786:	78fb      	ldrb	r3, [r7, #3]
 8007788:	f003 020f 	and.w	r2, r3, #15
 800778c:	4613      	mov	r3, r2
 800778e:	00db      	lsls	r3, r3, #3
 8007790:	1a9b      	subs	r3, r3, r2
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	3338      	adds	r3, #56	; 0x38
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	4413      	add	r3, r2
 800779a:	3304      	adds	r3, #4
 800779c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2201      	movs	r2, #1
 80077a2:	705a      	strb	r2, [r3, #1]
 80077a4:	e00d      	b.n	80077c2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80077a6:	78fa      	ldrb	r2, [r7, #3]
 80077a8:	4613      	mov	r3, r2
 80077aa:	00db      	lsls	r3, r3, #3
 80077ac:	1a9b      	subs	r3, r3, r2
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	4413      	add	r3, r2
 80077b8:	3304      	adds	r3, #4
 80077ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2200      	movs	r2, #0
 80077c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2201      	movs	r2, #1
 80077c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80077c8:	78fb      	ldrb	r3, [r7, #3]
 80077ca:	f003 030f 	and.w	r3, r3, #15
 80077ce:	b2da      	uxtb	r2, r3
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d101      	bne.n	80077e2 <HAL_PCD_EP_SetStall+0x82>
 80077de:	2302      	movs	r3, #2
 80077e0:	e01e      	b.n	8007820 <HAL_PCD_EP_SetStall+0xc0>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2201      	movs	r2, #1
 80077e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	68f9      	ldr	r1, [r7, #12]
 80077f0:	4618      	mov	r0, r3
 80077f2:	f004 fbb8 	bl	800bf66 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80077f6:	78fb      	ldrb	r3, [r7, #3]
 80077f8:	f003 030f 	and.w	r3, r3, #15
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d10a      	bne.n	8007816 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6818      	ldr	r0, [r3, #0]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	691b      	ldr	r3, [r3, #16]
 8007808:	b2d9      	uxtb	r1, r3
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007810:	461a      	mov	r2, r3
 8007812:	f004 fd67 	bl	800c2e4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2200      	movs	r2, #0
 800781a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800781e:	2300      	movs	r3, #0
}
 8007820:	4618      	mov	r0, r3
 8007822:	3710      	adds	r7, #16
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	460b      	mov	r3, r1
 8007832:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007834:	78fb      	ldrb	r3, [r7, #3]
 8007836:	f003 020f 	and.w	r2, r3, #15
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	429a      	cmp	r2, r3
 8007840:	d901      	bls.n	8007846 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	e042      	b.n	80078cc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007846:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800784a:	2b00      	cmp	r3, #0
 800784c:	da0f      	bge.n	800786e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800784e:	78fb      	ldrb	r3, [r7, #3]
 8007850:	f003 020f 	and.w	r2, r3, #15
 8007854:	4613      	mov	r3, r2
 8007856:	00db      	lsls	r3, r3, #3
 8007858:	1a9b      	subs	r3, r3, r2
 800785a:	009b      	lsls	r3, r3, #2
 800785c:	3338      	adds	r3, #56	; 0x38
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	4413      	add	r3, r2
 8007862:	3304      	adds	r3, #4
 8007864:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2201      	movs	r2, #1
 800786a:	705a      	strb	r2, [r3, #1]
 800786c:	e00f      	b.n	800788e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800786e:	78fb      	ldrb	r3, [r7, #3]
 8007870:	f003 020f 	and.w	r2, r3, #15
 8007874:	4613      	mov	r3, r2
 8007876:	00db      	lsls	r3, r3, #3
 8007878:	1a9b      	subs	r3, r3, r2
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	4413      	add	r3, r2
 8007884:	3304      	adds	r3, #4
 8007886:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2200      	movs	r2, #0
 800788c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2200      	movs	r2, #0
 8007892:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007894:	78fb      	ldrb	r3, [r7, #3]
 8007896:	f003 030f 	and.w	r3, r3, #15
 800789a:	b2da      	uxtb	r2, r3
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	d101      	bne.n	80078ae <HAL_PCD_EP_ClrStall+0x86>
 80078aa:	2302      	movs	r3, #2
 80078ac:	e00e      	b.n	80078cc <HAL_PCD_EP_ClrStall+0xa4>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2201      	movs	r2, #1
 80078b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	68f9      	ldr	r1, [r7, #12]
 80078bc:	4618      	mov	r0, r3
 80078be:	f004 fbc0 	bl	800c042 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80078ca:	2300      	movs	r3, #0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3710      	adds	r7, #16
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b08a      	sub	sp, #40	; 0x28
 80078d8:	af02      	add	r7, sp, #8
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80078e8:	683a      	ldr	r2, [r7, #0]
 80078ea:	4613      	mov	r3, r2
 80078ec:	00db      	lsls	r3, r3, #3
 80078ee:	1a9b      	subs	r3, r3, r2
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	3338      	adds	r3, #56	; 0x38
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	4413      	add	r3, r2
 80078f8:	3304      	adds	r3, #4
 80078fa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	699a      	ldr	r2, [r3, #24]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	695b      	ldr	r3, [r3, #20]
 8007904:	429a      	cmp	r2, r3
 8007906:	d901      	bls.n	800790c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	e06c      	b.n	80079e6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	695a      	ldr	r2, [r3, #20]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	699b      	ldr	r3, [r3, #24]
 8007914:	1ad3      	subs	r3, r2, r3
 8007916:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	69fa      	ldr	r2, [r7, #28]
 800791e:	429a      	cmp	r2, r3
 8007920:	d902      	bls.n	8007928 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	3303      	adds	r3, #3
 800792c:	089b      	lsrs	r3, r3, #2
 800792e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007930:	e02b      	b.n	800798a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	695a      	ldr	r2, [r3, #20]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	699b      	ldr	r3, [r3, #24]
 800793a:	1ad3      	subs	r3, r2, r3
 800793c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	69fa      	ldr	r2, [r7, #28]
 8007944:	429a      	cmp	r2, r3
 8007946:	d902      	bls.n	800794e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	3303      	adds	r3, #3
 8007952:	089b      	lsrs	r3, r3, #2
 8007954:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	68d9      	ldr	r1, [r3, #12]
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	b2da      	uxtb	r2, r3
 800795e:	69fb      	ldr	r3, [r7, #28]
 8007960:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007966:	b2db      	uxtb	r3, r3
 8007968:	9300      	str	r3, [sp, #0]
 800796a:	4603      	mov	r3, r0
 800796c:	6978      	ldr	r0, [r7, #20]
 800796e:	f004 fa64 	bl	800be3a <USB_WritePacket>

    ep->xfer_buff  += len;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	68da      	ldr	r2, [r3, #12]
 8007976:	69fb      	ldr	r3, [r7, #28]
 8007978:	441a      	add	r2, r3
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	699a      	ldr	r2, [r3, #24]
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	441a      	add	r2, r3
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	015a      	lsls	r2, r3, #5
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	4413      	add	r3, r2
 8007992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007996:	699b      	ldr	r3, [r3, #24]
 8007998:	b29b      	uxth	r3, r3
 800799a:	69ba      	ldr	r2, [r7, #24]
 800799c:	429a      	cmp	r2, r3
 800799e:	d809      	bhi.n	80079b4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	699a      	ldr	r2, [r3, #24]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d203      	bcs.n	80079b4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	695b      	ldr	r3, [r3, #20]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d1be      	bne.n	8007932 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	695a      	ldr	r2, [r3, #20]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	699b      	ldr	r3, [r3, #24]
 80079bc:	429a      	cmp	r2, r3
 80079be:	d811      	bhi.n	80079e4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	f003 030f 	and.w	r3, r3, #15
 80079c6:	2201      	movs	r2, #1
 80079c8:	fa02 f303 	lsl.w	r3, r2, r3
 80079cc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	43db      	mvns	r3, r3
 80079da:	6939      	ldr	r1, [r7, #16]
 80079dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80079e0:	4013      	ands	r3, r2
 80079e2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80079e4:	2300      	movs	r3, #0
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3720      	adds	r7, #32
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
	...

080079f0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b086      	sub	sp, #24
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	333c      	adds	r3, #60	; 0x3c
 8007a08:	3304      	adds	r3, #4
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	015a      	lsls	r2, r3, #5
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	4413      	add	r3, r2
 8007a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	f040 80a0 	bne.w	8007b68 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	f003 0308 	and.w	r3, r3, #8
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d015      	beq.n	8007a5e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	4a72      	ldr	r2, [pc, #456]	; (8007c00 <PCD_EP_OutXfrComplete_int+0x210>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	f240 80dd 	bls.w	8007bf6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	f000 80d7 	beq.w	8007bf6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	015a      	lsls	r2, r3, #5
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	4413      	add	r3, r2
 8007a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a54:	461a      	mov	r2, r3
 8007a56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a5a:	6093      	str	r3, [r2, #8]
 8007a5c:	e0cb      	b.n	8007bf6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	f003 0320 	and.w	r3, r3, #32
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d009      	beq.n	8007a7c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	015a      	lsls	r2, r3, #5
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	4413      	add	r3, r2
 8007a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a74:	461a      	mov	r2, r3
 8007a76:	2320      	movs	r3, #32
 8007a78:	6093      	str	r3, [r2, #8]
 8007a7a:	e0bc      	b.n	8007bf6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	f040 80b7 	bne.w	8007bf6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	4a5d      	ldr	r2, [pc, #372]	; (8007c00 <PCD_EP_OutXfrComplete_int+0x210>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d90f      	bls.n	8007ab0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00a      	beq.n	8007ab0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	015a      	lsls	r2, r3, #5
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007aac:	6093      	str	r3, [r2, #8]
 8007aae:	e0a2      	b.n	8007bf6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8007ab0:	6879      	ldr	r1, [r7, #4]
 8007ab2:	683a      	ldr	r2, [r7, #0]
 8007ab4:	4613      	mov	r3, r2
 8007ab6:	00db      	lsls	r3, r3, #3
 8007ab8:	1a9b      	subs	r3, r3, r2
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	440b      	add	r3, r1
 8007abe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007ac2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	0159      	lsls	r1, r3, #5
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	440b      	add	r3, r1
 8007acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ad0:	691b      	ldr	r3, [r3, #16]
 8007ad2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8007ad6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	683a      	ldr	r2, [r7, #0]
 8007adc:	4613      	mov	r3, r2
 8007ade:	00db      	lsls	r3, r3, #3
 8007ae0:	1a9b      	subs	r3, r3, r2
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	4403      	add	r3, r0
 8007ae6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007aea:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8007aec:	6879      	ldr	r1, [r7, #4]
 8007aee:	683a      	ldr	r2, [r7, #0]
 8007af0:	4613      	mov	r3, r2
 8007af2:	00db      	lsls	r3, r3, #3
 8007af4:	1a9b      	subs	r3, r3, r2
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	440b      	add	r3, r1
 8007afa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007afe:	6819      	ldr	r1, [r3, #0]
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	683a      	ldr	r2, [r7, #0]
 8007b04:	4613      	mov	r3, r2
 8007b06:	00db      	lsls	r3, r3, #3
 8007b08:	1a9b      	subs	r3, r3, r2
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	4403      	add	r3, r0
 8007b0e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4419      	add	r1, r3
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	683a      	ldr	r2, [r7, #0]
 8007b1a:	4613      	mov	r3, r2
 8007b1c:	00db      	lsls	r3, r3, #3
 8007b1e:	1a9b      	subs	r3, r3, r2
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	4403      	add	r3, r0
 8007b24:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007b28:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d114      	bne.n	8007b5a <PCD_EP_OutXfrComplete_int+0x16a>
 8007b30:	6879      	ldr	r1, [r7, #4]
 8007b32:	683a      	ldr	r2, [r7, #0]
 8007b34:	4613      	mov	r3, r2
 8007b36:	00db      	lsls	r3, r3, #3
 8007b38:	1a9b      	subs	r3, r3, r2
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	440b      	add	r3, r1
 8007b3e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d108      	bne.n	8007b5a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6818      	ldr	r0, [r3, #0]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007b52:	461a      	mov	r2, r3
 8007b54:	2101      	movs	r1, #1
 8007b56:	f004 fbc5 	bl	800c2e4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	4619      	mov	r1, r3
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f00a fc3f 	bl	80123e4 <HAL_PCD_DataOutStageCallback>
 8007b66:	e046      	b.n	8007bf6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	4a26      	ldr	r2, [pc, #152]	; (8007c04 <PCD_EP_OutXfrComplete_int+0x214>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d124      	bne.n	8007bba <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d00a      	beq.n	8007b90 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	015a      	lsls	r2, r3, #5
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	4413      	add	r3, r2
 8007b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b86:	461a      	mov	r2, r3
 8007b88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b8c:	6093      	str	r3, [r2, #8]
 8007b8e:	e032      	b.n	8007bf6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	f003 0320 	and.w	r3, r3, #32
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d008      	beq.n	8007bac <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	015a      	lsls	r2, r3, #5
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ba6:	461a      	mov	r2, r3
 8007ba8:	2320      	movs	r3, #32
 8007baa:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f00a fc16 	bl	80123e4 <HAL_PCD_DataOutStageCallback>
 8007bb8:	e01d      	b.n	8007bf6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d114      	bne.n	8007bea <PCD_EP_OutXfrComplete_int+0x1fa>
 8007bc0:	6879      	ldr	r1, [r7, #4]
 8007bc2:	683a      	ldr	r2, [r7, #0]
 8007bc4:	4613      	mov	r3, r2
 8007bc6:	00db      	lsls	r3, r3, #3
 8007bc8:	1a9b      	subs	r3, r3, r2
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	440b      	add	r3, r1
 8007bce:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d108      	bne.n	8007bea <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6818      	ldr	r0, [r3, #0]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007be2:	461a      	mov	r2, r3
 8007be4:	2100      	movs	r1, #0
 8007be6:	f004 fb7d 	bl	800c2e4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	4619      	mov	r1, r3
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f00a fbf7 	bl	80123e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007bf6:	2300      	movs	r3, #0
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3718      	adds	r7, #24
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	4f54300a 	.word	0x4f54300a
 8007c04:	4f54310a 	.word	0x4f54310a

08007c08 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b086      	sub	sp, #24
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	333c      	adds	r3, #60	; 0x3c
 8007c20:	3304      	adds	r3, #4
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	015a      	lsls	r2, r3, #5
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	4413      	add	r3, r2
 8007c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	4a15      	ldr	r2, [pc, #84]	; (8007c90 <PCD_EP_OutSetupPacket_int+0x88>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d90e      	bls.n	8007c5c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d009      	beq.n	8007c5c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	015a      	lsls	r2, r3, #5
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	4413      	add	r3, r2
 8007c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c54:	461a      	mov	r2, r3
 8007c56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c5a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f00a fbaf 	bl	80123c0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	4a0a      	ldr	r2, [pc, #40]	; (8007c90 <PCD_EP_OutSetupPacket_int+0x88>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d90c      	bls.n	8007c84 <PCD_EP_OutSetupPacket_int+0x7c>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d108      	bne.n	8007c84 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6818      	ldr	r0, [r3, #0]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	2101      	movs	r1, #1
 8007c80:	f004 fb30 	bl	800c2e4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3718      	adds	r7, #24
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	4f54300a 	.word	0x4f54300a

08007c94 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007ca0:	bf00      	nop
 8007ca2:	370c      	adds	r7, #12
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr

08007cac <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b083      	sub	sp, #12
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8007cb4:	4b05      	ldr	r3, [pc, #20]	; (8007ccc <HAL_PWR_EnableWakeUpPin+0x20>)
 8007cb6:	685a      	ldr	r2, [r3, #4]
 8007cb8:	4904      	ldr	r1, [pc, #16]	; (8007ccc <HAL_PWR_EnableWakeUpPin+0x20>)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	604b      	str	r3, [r1, #4]
}
 8007cc0:	bf00      	nop
 8007cc2:	370c      	adds	r7, #12
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr
 8007ccc:	40007000 	.word	0x40007000

08007cd0 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 8007cd8:	4b06      	ldr	r3, [pc, #24]	; (8007cf4 <HAL_PWR_DisableWakeUpPin+0x24>)
 8007cda:	685a      	ldr	r2, [r3, #4]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	43db      	mvns	r3, r3
 8007ce0:	4904      	ldr	r1, [pc, #16]	; (8007cf4 <HAL_PWR_DisableWakeUpPin+0x24>)
 8007ce2:	4013      	ands	r3, r2
 8007ce4:	604b      	str	r3, [r1, #4]
}
 8007ce6:	bf00      	nop
 8007ce8:	370c      	adds	r7, #12
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr
 8007cf2:	bf00      	nop
 8007cf4:	40007000 	.word	0x40007000

08007cf8 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8007cfc:	4b08      	ldr	r3, [pc, #32]	; (8007d20 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a07      	ldr	r2, [pc, #28]	; (8007d20 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8007d02:	f043 0302 	orr.w	r3, r3, #2
 8007d06:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8007d08:	4b06      	ldr	r3, [pc, #24]	; (8007d24 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8007d0a:	691b      	ldr	r3, [r3, #16]
 8007d0c:	4a05      	ldr	r2, [pc, #20]	; (8007d24 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8007d0e:	f043 0304 	orr.w	r3, r3, #4
 8007d12:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8007d14:	bf30      	wfi
}
 8007d16:	bf00      	nop
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr
 8007d20:	40007000 	.word	0x40007000
 8007d24:	e000ed00 	.word	0xe000ed00

08007d28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b086      	sub	sp, #24
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d101      	bne.n	8007d3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e264      	b.n	8008204 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f003 0301 	and.w	r3, r3, #1
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d075      	beq.n	8007e32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007d46:	4ba3      	ldr	r3, [pc, #652]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	f003 030c 	and.w	r3, r3, #12
 8007d4e:	2b04      	cmp	r3, #4
 8007d50:	d00c      	beq.n	8007d6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007d52:	4ba0      	ldr	r3, [pc, #640]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007d5a:	2b08      	cmp	r3, #8
 8007d5c:	d112      	bne.n	8007d84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007d5e:	4b9d      	ldr	r3, [pc, #628]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d6a:	d10b      	bne.n	8007d84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d6c:	4b99      	ldr	r3, [pc, #612]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d05b      	beq.n	8007e30 <HAL_RCC_OscConfig+0x108>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d157      	bne.n	8007e30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	e23f      	b.n	8008204 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d8c:	d106      	bne.n	8007d9c <HAL_RCC_OscConfig+0x74>
 8007d8e:	4b91      	ldr	r3, [pc, #580]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a90      	ldr	r2, [pc, #576]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d98:	6013      	str	r3, [r2, #0]
 8007d9a:	e01d      	b.n	8007dd8 <HAL_RCC_OscConfig+0xb0>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007da4:	d10c      	bne.n	8007dc0 <HAL_RCC_OscConfig+0x98>
 8007da6:	4b8b      	ldr	r3, [pc, #556]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a8a      	ldr	r2, [pc, #552]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007dac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007db0:	6013      	str	r3, [r2, #0]
 8007db2:	4b88      	ldr	r3, [pc, #544]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a87      	ldr	r2, [pc, #540]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007dbc:	6013      	str	r3, [r2, #0]
 8007dbe:	e00b      	b.n	8007dd8 <HAL_RCC_OscConfig+0xb0>
 8007dc0:	4b84      	ldr	r3, [pc, #528]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a83      	ldr	r2, [pc, #524]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007dc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007dca:	6013      	str	r3, [r2, #0]
 8007dcc:	4b81      	ldr	r3, [pc, #516]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a80      	ldr	r2, [pc, #512]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007dd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007dd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d013      	beq.n	8007e08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007de0:	f7fd fa42 	bl	8005268 <HAL_GetTick>
 8007de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007de6:	e008      	b.n	8007dfa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007de8:	f7fd fa3e 	bl	8005268 <HAL_GetTick>
 8007dec:	4602      	mov	r2, r0
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	1ad3      	subs	r3, r2, r3
 8007df2:	2b64      	cmp	r3, #100	; 0x64
 8007df4:	d901      	bls.n	8007dfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007df6:	2303      	movs	r3, #3
 8007df8:	e204      	b.n	8008204 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007dfa:	4b76      	ldr	r3, [pc, #472]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d0f0      	beq.n	8007de8 <HAL_RCC_OscConfig+0xc0>
 8007e06:	e014      	b.n	8007e32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e08:	f7fd fa2e 	bl	8005268 <HAL_GetTick>
 8007e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e0e:	e008      	b.n	8007e22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007e10:	f7fd fa2a 	bl	8005268 <HAL_GetTick>
 8007e14:	4602      	mov	r2, r0
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	1ad3      	subs	r3, r2, r3
 8007e1a:	2b64      	cmp	r3, #100	; 0x64
 8007e1c:	d901      	bls.n	8007e22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007e1e:	2303      	movs	r3, #3
 8007e20:	e1f0      	b.n	8008204 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e22:	4b6c      	ldr	r3, [pc, #432]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d1f0      	bne.n	8007e10 <HAL_RCC_OscConfig+0xe8>
 8007e2e:	e000      	b.n	8007e32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f003 0302 	and.w	r3, r3, #2
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d063      	beq.n	8007f06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007e3e:	4b65      	ldr	r3, [pc, #404]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	f003 030c 	and.w	r3, r3, #12
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d00b      	beq.n	8007e62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e4a:	4b62      	ldr	r3, [pc, #392]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007e52:	2b08      	cmp	r3, #8
 8007e54:	d11c      	bne.n	8007e90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e56:	4b5f      	ldr	r3, [pc, #380]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d116      	bne.n	8007e90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e62:	4b5c      	ldr	r3, [pc, #368]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f003 0302 	and.w	r3, r3, #2
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d005      	beq.n	8007e7a <HAL_RCC_OscConfig+0x152>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d001      	beq.n	8007e7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	e1c4      	b.n	8008204 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e7a:	4b56      	ldr	r3, [pc, #344]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	691b      	ldr	r3, [r3, #16]
 8007e86:	00db      	lsls	r3, r3, #3
 8007e88:	4952      	ldr	r1, [pc, #328]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e8e:	e03a      	b.n	8007f06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d020      	beq.n	8007eda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e98:	4b4f      	ldr	r3, [pc, #316]	; (8007fd8 <HAL_RCC_OscConfig+0x2b0>)
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e9e:	f7fd f9e3 	bl	8005268 <HAL_GetTick>
 8007ea2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ea4:	e008      	b.n	8007eb8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007ea6:	f7fd f9df 	bl	8005268 <HAL_GetTick>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	1ad3      	subs	r3, r2, r3
 8007eb0:	2b02      	cmp	r3, #2
 8007eb2:	d901      	bls.n	8007eb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007eb4:	2303      	movs	r3, #3
 8007eb6:	e1a5      	b.n	8008204 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007eb8:	4b46      	ldr	r3, [pc, #280]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f003 0302 	and.w	r3, r3, #2
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d0f0      	beq.n	8007ea6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ec4:	4b43      	ldr	r3, [pc, #268]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	691b      	ldr	r3, [r3, #16]
 8007ed0:	00db      	lsls	r3, r3, #3
 8007ed2:	4940      	ldr	r1, [pc, #256]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	600b      	str	r3, [r1, #0]
 8007ed8:	e015      	b.n	8007f06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007eda:	4b3f      	ldr	r3, [pc, #252]	; (8007fd8 <HAL_RCC_OscConfig+0x2b0>)
 8007edc:	2200      	movs	r2, #0
 8007ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ee0:	f7fd f9c2 	bl	8005268 <HAL_GetTick>
 8007ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ee6:	e008      	b.n	8007efa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007ee8:	f7fd f9be 	bl	8005268 <HAL_GetTick>
 8007eec:	4602      	mov	r2, r0
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	1ad3      	subs	r3, r2, r3
 8007ef2:	2b02      	cmp	r3, #2
 8007ef4:	d901      	bls.n	8007efa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	e184      	b.n	8008204 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007efa:	4b36      	ldr	r3, [pc, #216]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f003 0302 	and.w	r3, r3, #2
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d1f0      	bne.n	8007ee8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f003 0308 	and.w	r3, r3, #8
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d030      	beq.n	8007f74 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	695b      	ldr	r3, [r3, #20]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d016      	beq.n	8007f48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f1a:	4b30      	ldr	r3, [pc, #192]	; (8007fdc <HAL_RCC_OscConfig+0x2b4>)
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f20:	f7fd f9a2 	bl	8005268 <HAL_GetTick>
 8007f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f26:	e008      	b.n	8007f3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f28:	f7fd f99e 	bl	8005268 <HAL_GetTick>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	1ad3      	subs	r3, r2, r3
 8007f32:	2b02      	cmp	r3, #2
 8007f34:	d901      	bls.n	8007f3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007f36:	2303      	movs	r3, #3
 8007f38:	e164      	b.n	8008204 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f3a:	4b26      	ldr	r3, [pc, #152]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007f3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f3e:	f003 0302 	and.w	r3, r3, #2
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d0f0      	beq.n	8007f28 <HAL_RCC_OscConfig+0x200>
 8007f46:	e015      	b.n	8007f74 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f48:	4b24      	ldr	r3, [pc, #144]	; (8007fdc <HAL_RCC_OscConfig+0x2b4>)
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f4e:	f7fd f98b 	bl	8005268 <HAL_GetTick>
 8007f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f54:	e008      	b.n	8007f68 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f56:	f7fd f987 	bl	8005268 <HAL_GetTick>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	1ad3      	subs	r3, r2, r3
 8007f60:	2b02      	cmp	r3, #2
 8007f62:	d901      	bls.n	8007f68 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007f64:	2303      	movs	r3, #3
 8007f66:	e14d      	b.n	8008204 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f68:	4b1a      	ldr	r3, [pc, #104]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007f6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f6c:	f003 0302 	and.w	r3, r3, #2
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d1f0      	bne.n	8007f56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f003 0304 	and.w	r3, r3, #4
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	f000 80a0 	beq.w	80080c2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f82:	2300      	movs	r3, #0
 8007f84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f86:	4b13      	ldr	r3, [pc, #76]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d10f      	bne.n	8007fb2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f92:	2300      	movs	r3, #0
 8007f94:	60bb      	str	r3, [r7, #8]
 8007f96:	4b0f      	ldr	r3, [pc, #60]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9a:	4a0e      	ldr	r2, [pc, #56]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8007fa2:	4b0c      	ldr	r3, [pc, #48]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007faa:	60bb      	str	r3, [r7, #8]
 8007fac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007fb2:	4b0b      	ldr	r3, [pc, #44]	; (8007fe0 <HAL_RCC_OscConfig+0x2b8>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d121      	bne.n	8008002 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007fbe:	4b08      	ldr	r3, [pc, #32]	; (8007fe0 <HAL_RCC_OscConfig+0x2b8>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a07      	ldr	r2, [pc, #28]	; (8007fe0 <HAL_RCC_OscConfig+0x2b8>)
 8007fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007fca:	f7fd f94d 	bl	8005268 <HAL_GetTick>
 8007fce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007fd0:	e011      	b.n	8007ff6 <HAL_RCC_OscConfig+0x2ce>
 8007fd2:	bf00      	nop
 8007fd4:	40023800 	.word	0x40023800
 8007fd8:	42470000 	.word	0x42470000
 8007fdc:	42470e80 	.word	0x42470e80
 8007fe0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fe4:	f7fd f940 	bl	8005268 <HAL_GetTick>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	1ad3      	subs	r3, r2, r3
 8007fee:	2b02      	cmp	r3, #2
 8007ff0:	d901      	bls.n	8007ff6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007ff2:	2303      	movs	r3, #3
 8007ff4:	e106      	b.n	8008204 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ff6:	4b85      	ldr	r3, [pc, #532]	; (800820c <HAL_RCC_OscConfig+0x4e4>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d0f0      	beq.n	8007fe4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	2b01      	cmp	r3, #1
 8008008:	d106      	bne.n	8008018 <HAL_RCC_OscConfig+0x2f0>
 800800a:	4b81      	ldr	r3, [pc, #516]	; (8008210 <HAL_RCC_OscConfig+0x4e8>)
 800800c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800800e:	4a80      	ldr	r2, [pc, #512]	; (8008210 <HAL_RCC_OscConfig+0x4e8>)
 8008010:	f043 0301 	orr.w	r3, r3, #1
 8008014:	6713      	str	r3, [r2, #112]	; 0x70
 8008016:	e01c      	b.n	8008052 <HAL_RCC_OscConfig+0x32a>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	2b05      	cmp	r3, #5
 800801e:	d10c      	bne.n	800803a <HAL_RCC_OscConfig+0x312>
 8008020:	4b7b      	ldr	r3, [pc, #492]	; (8008210 <HAL_RCC_OscConfig+0x4e8>)
 8008022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008024:	4a7a      	ldr	r2, [pc, #488]	; (8008210 <HAL_RCC_OscConfig+0x4e8>)
 8008026:	f043 0304 	orr.w	r3, r3, #4
 800802a:	6713      	str	r3, [r2, #112]	; 0x70
 800802c:	4b78      	ldr	r3, [pc, #480]	; (8008210 <HAL_RCC_OscConfig+0x4e8>)
 800802e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008030:	4a77      	ldr	r2, [pc, #476]	; (8008210 <HAL_RCC_OscConfig+0x4e8>)
 8008032:	f043 0301 	orr.w	r3, r3, #1
 8008036:	6713      	str	r3, [r2, #112]	; 0x70
 8008038:	e00b      	b.n	8008052 <HAL_RCC_OscConfig+0x32a>
 800803a:	4b75      	ldr	r3, [pc, #468]	; (8008210 <HAL_RCC_OscConfig+0x4e8>)
 800803c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800803e:	4a74      	ldr	r2, [pc, #464]	; (8008210 <HAL_RCC_OscConfig+0x4e8>)
 8008040:	f023 0301 	bic.w	r3, r3, #1
 8008044:	6713      	str	r3, [r2, #112]	; 0x70
 8008046:	4b72      	ldr	r3, [pc, #456]	; (8008210 <HAL_RCC_OscConfig+0x4e8>)
 8008048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800804a:	4a71      	ldr	r2, [pc, #452]	; (8008210 <HAL_RCC_OscConfig+0x4e8>)
 800804c:	f023 0304 	bic.w	r3, r3, #4
 8008050:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d015      	beq.n	8008086 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800805a:	f7fd f905 	bl	8005268 <HAL_GetTick>
 800805e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008060:	e00a      	b.n	8008078 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008062:	f7fd f901 	bl	8005268 <HAL_GetTick>
 8008066:	4602      	mov	r2, r0
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	1ad3      	subs	r3, r2, r3
 800806c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008070:	4293      	cmp	r3, r2
 8008072:	d901      	bls.n	8008078 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008074:	2303      	movs	r3, #3
 8008076:	e0c5      	b.n	8008204 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008078:	4b65      	ldr	r3, [pc, #404]	; (8008210 <HAL_RCC_OscConfig+0x4e8>)
 800807a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800807c:	f003 0302 	and.w	r3, r3, #2
 8008080:	2b00      	cmp	r3, #0
 8008082:	d0ee      	beq.n	8008062 <HAL_RCC_OscConfig+0x33a>
 8008084:	e014      	b.n	80080b0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008086:	f7fd f8ef 	bl	8005268 <HAL_GetTick>
 800808a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800808c:	e00a      	b.n	80080a4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800808e:	f7fd f8eb 	bl	8005268 <HAL_GetTick>
 8008092:	4602      	mov	r2, r0
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	1ad3      	subs	r3, r2, r3
 8008098:	f241 3288 	movw	r2, #5000	; 0x1388
 800809c:	4293      	cmp	r3, r2
 800809e:	d901      	bls.n	80080a4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80080a0:	2303      	movs	r3, #3
 80080a2:	e0af      	b.n	8008204 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80080a4:	4b5a      	ldr	r3, [pc, #360]	; (8008210 <HAL_RCC_OscConfig+0x4e8>)
 80080a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080a8:	f003 0302 	and.w	r3, r3, #2
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d1ee      	bne.n	800808e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80080b0:	7dfb      	ldrb	r3, [r7, #23]
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d105      	bne.n	80080c2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80080b6:	4b56      	ldr	r3, [pc, #344]	; (8008210 <HAL_RCC_OscConfig+0x4e8>)
 80080b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ba:	4a55      	ldr	r2, [pc, #340]	; (8008210 <HAL_RCC_OscConfig+0x4e8>)
 80080bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	699b      	ldr	r3, [r3, #24]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	f000 809b 	beq.w	8008202 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80080cc:	4b50      	ldr	r3, [pc, #320]	; (8008210 <HAL_RCC_OscConfig+0x4e8>)
 80080ce:	689b      	ldr	r3, [r3, #8]
 80080d0:	f003 030c 	and.w	r3, r3, #12
 80080d4:	2b08      	cmp	r3, #8
 80080d6:	d05c      	beq.n	8008192 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	699b      	ldr	r3, [r3, #24]
 80080dc:	2b02      	cmp	r3, #2
 80080de:	d141      	bne.n	8008164 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080e0:	4b4c      	ldr	r3, [pc, #304]	; (8008214 <HAL_RCC_OscConfig+0x4ec>)
 80080e2:	2200      	movs	r2, #0
 80080e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080e6:	f7fd f8bf 	bl	8005268 <HAL_GetTick>
 80080ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080ec:	e008      	b.n	8008100 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080ee:	f7fd f8bb 	bl	8005268 <HAL_GetTick>
 80080f2:	4602      	mov	r2, r0
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	1ad3      	subs	r3, r2, r3
 80080f8:	2b02      	cmp	r3, #2
 80080fa:	d901      	bls.n	8008100 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80080fc:	2303      	movs	r3, #3
 80080fe:	e081      	b.n	8008204 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008100:	4b43      	ldr	r3, [pc, #268]	; (8008210 <HAL_RCC_OscConfig+0x4e8>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008108:	2b00      	cmp	r3, #0
 800810a:	d1f0      	bne.n	80080ee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	69da      	ldr	r2, [r3, #28]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6a1b      	ldr	r3, [r3, #32]
 8008114:	431a      	orrs	r2, r3
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811a:	019b      	lsls	r3, r3, #6
 800811c:	431a      	orrs	r2, r3
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008122:	085b      	lsrs	r3, r3, #1
 8008124:	3b01      	subs	r3, #1
 8008126:	041b      	lsls	r3, r3, #16
 8008128:	431a      	orrs	r2, r3
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800812e:	061b      	lsls	r3, r3, #24
 8008130:	4937      	ldr	r1, [pc, #220]	; (8008210 <HAL_RCC_OscConfig+0x4e8>)
 8008132:	4313      	orrs	r3, r2
 8008134:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008136:	4b37      	ldr	r3, [pc, #220]	; (8008214 <HAL_RCC_OscConfig+0x4ec>)
 8008138:	2201      	movs	r2, #1
 800813a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800813c:	f7fd f894 	bl	8005268 <HAL_GetTick>
 8008140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008142:	e008      	b.n	8008156 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008144:	f7fd f890 	bl	8005268 <HAL_GetTick>
 8008148:	4602      	mov	r2, r0
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	1ad3      	subs	r3, r2, r3
 800814e:	2b02      	cmp	r3, #2
 8008150:	d901      	bls.n	8008156 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8008152:	2303      	movs	r3, #3
 8008154:	e056      	b.n	8008204 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008156:	4b2e      	ldr	r3, [pc, #184]	; (8008210 <HAL_RCC_OscConfig+0x4e8>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800815e:	2b00      	cmp	r3, #0
 8008160:	d0f0      	beq.n	8008144 <HAL_RCC_OscConfig+0x41c>
 8008162:	e04e      	b.n	8008202 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008164:	4b2b      	ldr	r3, [pc, #172]	; (8008214 <HAL_RCC_OscConfig+0x4ec>)
 8008166:	2200      	movs	r2, #0
 8008168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800816a:	f7fd f87d 	bl	8005268 <HAL_GetTick>
 800816e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008170:	e008      	b.n	8008184 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008172:	f7fd f879 	bl	8005268 <HAL_GetTick>
 8008176:	4602      	mov	r2, r0
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	1ad3      	subs	r3, r2, r3
 800817c:	2b02      	cmp	r3, #2
 800817e:	d901      	bls.n	8008184 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008180:	2303      	movs	r3, #3
 8008182:	e03f      	b.n	8008204 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008184:	4b22      	ldr	r3, [pc, #136]	; (8008210 <HAL_RCC_OscConfig+0x4e8>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800818c:	2b00      	cmp	r3, #0
 800818e:	d1f0      	bne.n	8008172 <HAL_RCC_OscConfig+0x44a>
 8008190:	e037      	b.n	8008202 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	699b      	ldr	r3, [r3, #24]
 8008196:	2b01      	cmp	r3, #1
 8008198:	d101      	bne.n	800819e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	e032      	b.n	8008204 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800819e:	4b1c      	ldr	r3, [pc, #112]	; (8008210 <HAL_RCC_OscConfig+0x4e8>)
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	699b      	ldr	r3, [r3, #24]
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d028      	beq.n	80081fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d121      	bne.n	80081fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d11a      	bne.n	80081fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80081c8:	68fa      	ldr	r2, [r7, #12]
 80081ca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80081ce:	4013      	ands	r3, r2
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80081d4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d111      	bne.n	80081fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e4:	085b      	lsrs	r3, r3, #1
 80081e6:	3b01      	subs	r3, #1
 80081e8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d107      	bne.n	80081fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d001      	beq.n	8008202 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	e000      	b.n	8008204 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8008202:	2300      	movs	r3, #0
}
 8008204:	4618      	mov	r0, r3
 8008206:	3718      	adds	r7, #24
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}
 800820c:	40007000 	.word	0x40007000
 8008210:	40023800 	.word	0x40023800
 8008214:	42470060 	.word	0x42470060

08008218 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d101      	bne.n	800822c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008228:	2301      	movs	r3, #1
 800822a:	e0cc      	b.n	80083c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800822c:	4b68      	ldr	r3, [pc, #416]	; (80083d0 <HAL_RCC_ClockConfig+0x1b8>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f003 030f 	and.w	r3, r3, #15
 8008234:	683a      	ldr	r2, [r7, #0]
 8008236:	429a      	cmp	r2, r3
 8008238:	d90c      	bls.n	8008254 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800823a:	4b65      	ldr	r3, [pc, #404]	; (80083d0 <HAL_RCC_ClockConfig+0x1b8>)
 800823c:	683a      	ldr	r2, [r7, #0]
 800823e:	b2d2      	uxtb	r2, r2
 8008240:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008242:	4b63      	ldr	r3, [pc, #396]	; (80083d0 <HAL_RCC_ClockConfig+0x1b8>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f003 030f 	and.w	r3, r3, #15
 800824a:	683a      	ldr	r2, [r7, #0]
 800824c:	429a      	cmp	r2, r3
 800824e:	d001      	beq.n	8008254 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008250:	2301      	movs	r3, #1
 8008252:	e0b8      	b.n	80083c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f003 0302 	and.w	r3, r3, #2
 800825c:	2b00      	cmp	r3, #0
 800825e:	d020      	beq.n	80082a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f003 0304 	and.w	r3, r3, #4
 8008268:	2b00      	cmp	r3, #0
 800826a:	d005      	beq.n	8008278 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800826c:	4b59      	ldr	r3, [pc, #356]	; (80083d4 <HAL_RCC_ClockConfig+0x1bc>)
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	4a58      	ldr	r2, [pc, #352]	; (80083d4 <HAL_RCC_ClockConfig+0x1bc>)
 8008272:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008276:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f003 0308 	and.w	r3, r3, #8
 8008280:	2b00      	cmp	r3, #0
 8008282:	d005      	beq.n	8008290 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008284:	4b53      	ldr	r3, [pc, #332]	; (80083d4 <HAL_RCC_ClockConfig+0x1bc>)
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	4a52      	ldr	r2, [pc, #328]	; (80083d4 <HAL_RCC_ClockConfig+0x1bc>)
 800828a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800828e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008290:	4b50      	ldr	r3, [pc, #320]	; (80083d4 <HAL_RCC_ClockConfig+0x1bc>)
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	494d      	ldr	r1, [pc, #308]	; (80083d4 <HAL_RCC_ClockConfig+0x1bc>)
 800829e:	4313      	orrs	r3, r2
 80082a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f003 0301 	and.w	r3, r3, #1
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d044      	beq.n	8008338 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d107      	bne.n	80082c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082b6:	4b47      	ldr	r3, [pc, #284]	; (80083d4 <HAL_RCC_ClockConfig+0x1bc>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d119      	bne.n	80082f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80082c2:	2301      	movs	r3, #1
 80082c4:	e07f      	b.n	80083c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	2b02      	cmp	r3, #2
 80082cc:	d003      	beq.n	80082d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80082d2:	2b03      	cmp	r3, #3
 80082d4:	d107      	bne.n	80082e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80082d6:	4b3f      	ldr	r3, [pc, #252]	; (80083d4 <HAL_RCC_ClockConfig+0x1bc>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d109      	bne.n	80082f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	e06f      	b.n	80083c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082e6:	4b3b      	ldr	r3, [pc, #236]	; (80083d4 <HAL_RCC_ClockConfig+0x1bc>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f003 0302 	and.w	r3, r3, #2
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d101      	bne.n	80082f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80082f2:	2301      	movs	r3, #1
 80082f4:	e067      	b.n	80083c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80082f6:	4b37      	ldr	r3, [pc, #220]	; (80083d4 <HAL_RCC_ClockConfig+0x1bc>)
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	f023 0203 	bic.w	r2, r3, #3
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	4934      	ldr	r1, [pc, #208]	; (80083d4 <HAL_RCC_ClockConfig+0x1bc>)
 8008304:	4313      	orrs	r3, r2
 8008306:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008308:	f7fc ffae 	bl	8005268 <HAL_GetTick>
 800830c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800830e:	e00a      	b.n	8008326 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008310:	f7fc ffaa 	bl	8005268 <HAL_GetTick>
 8008314:	4602      	mov	r2, r0
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	1ad3      	subs	r3, r2, r3
 800831a:	f241 3288 	movw	r2, #5000	; 0x1388
 800831e:	4293      	cmp	r3, r2
 8008320:	d901      	bls.n	8008326 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008322:	2303      	movs	r3, #3
 8008324:	e04f      	b.n	80083c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008326:	4b2b      	ldr	r3, [pc, #172]	; (80083d4 <HAL_RCC_ClockConfig+0x1bc>)
 8008328:	689b      	ldr	r3, [r3, #8]
 800832a:	f003 020c 	and.w	r2, r3, #12
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	429a      	cmp	r2, r3
 8008336:	d1eb      	bne.n	8008310 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008338:	4b25      	ldr	r3, [pc, #148]	; (80083d0 <HAL_RCC_ClockConfig+0x1b8>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f003 030f 	and.w	r3, r3, #15
 8008340:	683a      	ldr	r2, [r7, #0]
 8008342:	429a      	cmp	r2, r3
 8008344:	d20c      	bcs.n	8008360 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008346:	4b22      	ldr	r3, [pc, #136]	; (80083d0 <HAL_RCC_ClockConfig+0x1b8>)
 8008348:	683a      	ldr	r2, [r7, #0]
 800834a:	b2d2      	uxtb	r2, r2
 800834c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800834e:	4b20      	ldr	r3, [pc, #128]	; (80083d0 <HAL_RCC_ClockConfig+0x1b8>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f003 030f 	and.w	r3, r3, #15
 8008356:	683a      	ldr	r2, [r7, #0]
 8008358:	429a      	cmp	r2, r3
 800835a:	d001      	beq.n	8008360 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	e032      	b.n	80083c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f003 0304 	and.w	r3, r3, #4
 8008368:	2b00      	cmp	r3, #0
 800836a:	d008      	beq.n	800837e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800836c:	4b19      	ldr	r3, [pc, #100]	; (80083d4 <HAL_RCC_ClockConfig+0x1bc>)
 800836e:	689b      	ldr	r3, [r3, #8]
 8008370:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	68db      	ldr	r3, [r3, #12]
 8008378:	4916      	ldr	r1, [pc, #88]	; (80083d4 <HAL_RCC_ClockConfig+0x1bc>)
 800837a:	4313      	orrs	r3, r2
 800837c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f003 0308 	and.w	r3, r3, #8
 8008386:	2b00      	cmp	r3, #0
 8008388:	d009      	beq.n	800839e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800838a:	4b12      	ldr	r3, [pc, #72]	; (80083d4 <HAL_RCC_ClockConfig+0x1bc>)
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	691b      	ldr	r3, [r3, #16]
 8008396:	00db      	lsls	r3, r3, #3
 8008398:	490e      	ldr	r1, [pc, #56]	; (80083d4 <HAL_RCC_ClockConfig+0x1bc>)
 800839a:	4313      	orrs	r3, r2
 800839c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800839e:	f000 f821 	bl	80083e4 <HAL_RCC_GetSysClockFreq>
 80083a2:	4602      	mov	r2, r0
 80083a4:	4b0b      	ldr	r3, [pc, #44]	; (80083d4 <HAL_RCC_ClockConfig+0x1bc>)
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	091b      	lsrs	r3, r3, #4
 80083aa:	f003 030f 	and.w	r3, r3, #15
 80083ae:	490a      	ldr	r1, [pc, #40]	; (80083d8 <HAL_RCC_ClockConfig+0x1c0>)
 80083b0:	5ccb      	ldrb	r3, [r1, r3]
 80083b2:	fa22 f303 	lsr.w	r3, r2, r3
 80083b6:	4a09      	ldr	r2, [pc, #36]	; (80083dc <HAL_RCC_ClockConfig+0x1c4>)
 80083b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80083ba:	4b09      	ldr	r3, [pc, #36]	; (80083e0 <HAL_RCC_ClockConfig+0x1c8>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4618      	mov	r0, r3
 80083c0:	f7f9 fee8 	bl	8002194 <HAL_InitTick>

  return HAL_OK;
 80083c4:	2300      	movs	r3, #0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3710      	adds	r7, #16
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}
 80083ce:	bf00      	nop
 80083d0:	40023c00 	.word	0x40023c00
 80083d4:	40023800 	.word	0x40023800
 80083d8:	080180a0 	.word	0x080180a0
 80083dc:	20000000 	.word	0x20000000
 80083e0:	20000060 	.word	0x20000060

080083e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80083e4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80083e8:	b084      	sub	sp, #16
 80083ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80083ec:	2300      	movs	r3, #0
 80083ee:	607b      	str	r3, [r7, #4]
 80083f0:	2300      	movs	r3, #0
 80083f2:	60fb      	str	r3, [r7, #12]
 80083f4:	2300      	movs	r3, #0
 80083f6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80083f8:	2300      	movs	r3, #0
 80083fa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80083fc:	4b67      	ldr	r3, [pc, #412]	; (800859c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	f003 030c 	and.w	r3, r3, #12
 8008404:	2b08      	cmp	r3, #8
 8008406:	d00d      	beq.n	8008424 <HAL_RCC_GetSysClockFreq+0x40>
 8008408:	2b08      	cmp	r3, #8
 800840a:	f200 80bd 	bhi.w	8008588 <HAL_RCC_GetSysClockFreq+0x1a4>
 800840e:	2b00      	cmp	r3, #0
 8008410:	d002      	beq.n	8008418 <HAL_RCC_GetSysClockFreq+0x34>
 8008412:	2b04      	cmp	r3, #4
 8008414:	d003      	beq.n	800841e <HAL_RCC_GetSysClockFreq+0x3a>
 8008416:	e0b7      	b.n	8008588 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008418:	4b61      	ldr	r3, [pc, #388]	; (80085a0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800841a:	60bb      	str	r3, [r7, #8]
       break;
 800841c:	e0b7      	b.n	800858e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800841e:	4b60      	ldr	r3, [pc, #384]	; (80085a0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008420:	60bb      	str	r3, [r7, #8]
      break;
 8008422:	e0b4      	b.n	800858e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008424:	4b5d      	ldr	r3, [pc, #372]	; (800859c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800842c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800842e:	4b5b      	ldr	r3, [pc, #364]	; (800859c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008436:	2b00      	cmp	r3, #0
 8008438:	d04d      	beq.n	80084d6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800843a:	4b58      	ldr	r3, [pc, #352]	; (800859c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	099b      	lsrs	r3, r3, #6
 8008440:	461a      	mov	r2, r3
 8008442:	f04f 0300 	mov.w	r3, #0
 8008446:	f240 10ff 	movw	r0, #511	; 0x1ff
 800844a:	f04f 0100 	mov.w	r1, #0
 800844e:	ea02 0800 	and.w	r8, r2, r0
 8008452:	ea03 0901 	and.w	r9, r3, r1
 8008456:	4640      	mov	r0, r8
 8008458:	4649      	mov	r1, r9
 800845a:	f04f 0200 	mov.w	r2, #0
 800845e:	f04f 0300 	mov.w	r3, #0
 8008462:	014b      	lsls	r3, r1, #5
 8008464:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008468:	0142      	lsls	r2, r0, #5
 800846a:	4610      	mov	r0, r2
 800846c:	4619      	mov	r1, r3
 800846e:	ebb0 0008 	subs.w	r0, r0, r8
 8008472:	eb61 0109 	sbc.w	r1, r1, r9
 8008476:	f04f 0200 	mov.w	r2, #0
 800847a:	f04f 0300 	mov.w	r3, #0
 800847e:	018b      	lsls	r3, r1, #6
 8008480:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008484:	0182      	lsls	r2, r0, #6
 8008486:	1a12      	subs	r2, r2, r0
 8008488:	eb63 0301 	sbc.w	r3, r3, r1
 800848c:	f04f 0000 	mov.w	r0, #0
 8008490:	f04f 0100 	mov.w	r1, #0
 8008494:	00d9      	lsls	r1, r3, #3
 8008496:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800849a:	00d0      	lsls	r0, r2, #3
 800849c:	4602      	mov	r2, r0
 800849e:	460b      	mov	r3, r1
 80084a0:	eb12 0208 	adds.w	r2, r2, r8
 80084a4:	eb43 0309 	adc.w	r3, r3, r9
 80084a8:	f04f 0000 	mov.w	r0, #0
 80084ac:	f04f 0100 	mov.w	r1, #0
 80084b0:	0299      	lsls	r1, r3, #10
 80084b2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80084b6:	0290      	lsls	r0, r2, #10
 80084b8:	4602      	mov	r2, r0
 80084ba:	460b      	mov	r3, r1
 80084bc:	4610      	mov	r0, r2
 80084be:	4619      	mov	r1, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	461a      	mov	r2, r3
 80084c4:	f04f 0300 	mov.w	r3, #0
 80084c8:	f7f8 fbee 	bl	8000ca8 <__aeabi_uldivmod>
 80084cc:	4602      	mov	r2, r0
 80084ce:	460b      	mov	r3, r1
 80084d0:	4613      	mov	r3, r2
 80084d2:	60fb      	str	r3, [r7, #12]
 80084d4:	e04a      	b.n	800856c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80084d6:	4b31      	ldr	r3, [pc, #196]	; (800859c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	099b      	lsrs	r3, r3, #6
 80084dc:	461a      	mov	r2, r3
 80084de:	f04f 0300 	mov.w	r3, #0
 80084e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80084e6:	f04f 0100 	mov.w	r1, #0
 80084ea:	ea02 0400 	and.w	r4, r2, r0
 80084ee:	ea03 0501 	and.w	r5, r3, r1
 80084f2:	4620      	mov	r0, r4
 80084f4:	4629      	mov	r1, r5
 80084f6:	f04f 0200 	mov.w	r2, #0
 80084fa:	f04f 0300 	mov.w	r3, #0
 80084fe:	014b      	lsls	r3, r1, #5
 8008500:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008504:	0142      	lsls	r2, r0, #5
 8008506:	4610      	mov	r0, r2
 8008508:	4619      	mov	r1, r3
 800850a:	1b00      	subs	r0, r0, r4
 800850c:	eb61 0105 	sbc.w	r1, r1, r5
 8008510:	f04f 0200 	mov.w	r2, #0
 8008514:	f04f 0300 	mov.w	r3, #0
 8008518:	018b      	lsls	r3, r1, #6
 800851a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800851e:	0182      	lsls	r2, r0, #6
 8008520:	1a12      	subs	r2, r2, r0
 8008522:	eb63 0301 	sbc.w	r3, r3, r1
 8008526:	f04f 0000 	mov.w	r0, #0
 800852a:	f04f 0100 	mov.w	r1, #0
 800852e:	00d9      	lsls	r1, r3, #3
 8008530:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008534:	00d0      	lsls	r0, r2, #3
 8008536:	4602      	mov	r2, r0
 8008538:	460b      	mov	r3, r1
 800853a:	1912      	adds	r2, r2, r4
 800853c:	eb45 0303 	adc.w	r3, r5, r3
 8008540:	f04f 0000 	mov.w	r0, #0
 8008544:	f04f 0100 	mov.w	r1, #0
 8008548:	0299      	lsls	r1, r3, #10
 800854a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800854e:	0290      	lsls	r0, r2, #10
 8008550:	4602      	mov	r2, r0
 8008552:	460b      	mov	r3, r1
 8008554:	4610      	mov	r0, r2
 8008556:	4619      	mov	r1, r3
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	461a      	mov	r2, r3
 800855c:	f04f 0300 	mov.w	r3, #0
 8008560:	f7f8 fba2 	bl	8000ca8 <__aeabi_uldivmod>
 8008564:	4602      	mov	r2, r0
 8008566:	460b      	mov	r3, r1
 8008568:	4613      	mov	r3, r2
 800856a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800856c:	4b0b      	ldr	r3, [pc, #44]	; (800859c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	0c1b      	lsrs	r3, r3, #16
 8008572:	f003 0303 	and.w	r3, r3, #3
 8008576:	3301      	adds	r3, #1
 8008578:	005b      	lsls	r3, r3, #1
 800857a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800857c:	68fa      	ldr	r2, [r7, #12]
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	fbb2 f3f3 	udiv	r3, r2, r3
 8008584:	60bb      	str	r3, [r7, #8]
      break;
 8008586:	e002      	b.n	800858e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008588:	4b05      	ldr	r3, [pc, #20]	; (80085a0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800858a:	60bb      	str	r3, [r7, #8]
      break;
 800858c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800858e:	68bb      	ldr	r3, [r7, #8]
}
 8008590:	4618      	mov	r0, r3
 8008592:	3710      	adds	r7, #16
 8008594:	46bd      	mov	sp, r7
 8008596:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800859a:	bf00      	nop
 800859c:	40023800 	.word	0x40023800
 80085a0:	00f42400 	.word	0x00f42400

080085a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80085a4:	b480      	push	{r7}
 80085a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80085a8:	4b03      	ldr	r3, [pc, #12]	; (80085b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80085aa:	681b      	ldr	r3, [r3, #0]
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr
 80085b6:	bf00      	nop
 80085b8:	20000000 	.word	0x20000000

080085bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80085c0:	f7ff fff0 	bl	80085a4 <HAL_RCC_GetHCLKFreq>
 80085c4:	4602      	mov	r2, r0
 80085c6:	4b05      	ldr	r3, [pc, #20]	; (80085dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80085c8:	689b      	ldr	r3, [r3, #8]
 80085ca:	0a9b      	lsrs	r3, r3, #10
 80085cc:	f003 0307 	and.w	r3, r3, #7
 80085d0:	4903      	ldr	r1, [pc, #12]	; (80085e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80085d2:	5ccb      	ldrb	r3, [r1, r3]
 80085d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085d8:	4618      	mov	r0, r3
 80085da:	bd80      	pop	{r7, pc}
 80085dc:	40023800 	.word	0x40023800
 80085e0:	080180b0 	.word	0x080180b0

080085e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80085e8:	f7ff ffdc 	bl	80085a4 <HAL_RCC_GetHCLKFreq>
 80085ec:	4602      	mov	r2, r0
 80085ee:	4b05      	ldr	r3, [pc, #20]	; (8008604 <HAL_RCC_GetPCLK2Freq+0x20>)
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	0b5b      	lsrs	r3, r3, #13
 80085f4:	f003 0307 	and.w	r3, r3, #7
 80085f8:	4903      	ldr	r1, [pc, #12]	; (8008608 <HAL_RCC_GetPCLK2Freq+0x24>)
 80085fa:	5ccb      	ldrb	r3, [r1, r3]
 80085fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008600:	4618      	mov	r0, r3
 8008602:	bd80      	pop	{r7, pc}
 8008604:	40023800 	.word	0x40023800
 8008608:	080180b0 	.word	0x080180b0

0800860c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800860c:	b480      	push	{r7}
 800860e:	b083      	sub	sp, #12
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	220f      	movs	r2, #15
 800861a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800861c:	4b12      	ldr	r3, [pc, #72]	; (8008668 <HAL_RCC_GetClockConfig+0x5c>)
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	f003 0203 	and.w	r2, r3, #3
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008628:	4b0f      	ldr	r3, [pc, #60]	; (8008668 <HAL_RCC_GetClockConfig+0x5c>)
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008634:	4b0c      	ldr	r3, [pc, #48]	; (8008668 <HAL_RCC_GetClockConfig+0x5c>)
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008640:	4b09      	ldr	r3, [pc, #36]	; (8008668 <HAL_RCC_GetClockConfig+0x5c>)
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	08db      	lsrs	r3, r3, #3
 8008646:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800864e:	4b07      	ldr	r3, [pc, #28]	; (800866c <HAL_RCC_GetClockConfig+0x60>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f003 020f 	and.w	r2, r3, #15
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	601a      	str	r2, [r3, #0]
}
 800865a:	bf00      	nop
 800865c:	370c      	adds	r7, #12
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr
 8008666:	bf00      	nop
 8008668:	40023800 	.word	0x40023800
 800866c:	40023c00 	.word	0x40023c00

08008670 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b086      	sub	sp, #24
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008678:	2300      	movs	r3, #0
 800867a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800867c:	2300      	movs	r3, #0
 800867e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f003 0301 	and.w	r3, r3, #1
 8008688:	2b00      	cmp	r3, #0
 800868a:	d10b      	bne.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008694:	2b00      	cmp	r3, #0
 8008696:	d105      	bne.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d075      	beq.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80086a4:	4bad      	ldr	r3, [pc, #692]	; (800895c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80086a6:	2200      	movs	r2, #0
 80086a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80086aa:	f7fc fddd 	bl	8005268 <HAL_GetTick>
 80086ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80086b0:	e008      	b.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80086b2:	f7fc fdd9 	bl	8005268 <HAL_GetTick>
 80086b6:	4602      	mov	r2, r0
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	1ad3      	subs	r3, r2, r3
 80086bc:	2b02      	cmp	r3, #2
 80086be:	d901      	bls.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80086c0:	2303      	movs	r3, #3
 80086c2:	e18b      	b.n	80089dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80086c4:	4ba6      	ldr	r3, [pc, #664]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d1f0      	bne.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f003 0301 	and.w	r3, r3, #1
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d009      	beq.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	019a      	lsls	r2, r3, #6
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	689b      	ldr	r3, [r3, #8]
 80086e6:	071b      	lsls	r3, r3, #28
 80086e8:	499d      	ldr	r1, [pc, #628]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80086ea:	4313      	orrs	r3, r2
 80086ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f003 0302 	and.w	r3, r3, #2
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d01f      	beq.n	800873c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80086fc:	4b98      	ldr	r3, [pc, #608]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80086fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008702:	0f1b      	lsrs	r3, r3, #28
 8008704:	f003 0307 	and.w	r3, r3, #7
 8008708:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	019a      	lsls	r2, r3, #6
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	68db      	ldr	r3, [r3, #12]
 8008714:	061b      	lsls	r3, r3, #24
 8008716:	431a      	orrs	r2, r3
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	071b      	lsls	r3, r3, #28
 800871c:	4990      	ldr	r1, [pc, #576]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800871e:	4313      	orrs	r3, r2
 8008720:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008724:	4b8e      	ldr	r3, [pc, #568]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008726:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800872a:	f023 021f 	bic.w	r2, r3, #31
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	69db      	ldr	r3, [r3, #28]
 8008732:	3b01      	subs	r3, #1
 8008734:	498a      	ldr	r1, [pc, #552]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008736:	4313      	orrs	r3, r2
 8008738:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008744:	2b00      	cmp	r3, #0
 8008746:	d00d      	beq.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	019a      	lsls	r2, r3, #6
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	68db      	ldr	r3, [r3, #12]
 8008752:	061b      	lsls	r3, r3, #24
 8008754:	431a      	orrs	r2, r3
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	689b      	ldr	r3, [r3, #8]
 800875a:	071b      	lsls	r3, r3, #28
 800875c:	4980      	ldr	r1, [pc, #512]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800875e:	4313      	orrs	r3, r2
 8008760:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008764:	4b7d      	ldr	r3, [pc, #500]	; (800895c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8008766:	2201      	movs	r2, #1
 8008768:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800876a:	f7fc fd7d 	bl	8005268 <HAL_GetTick>
 800876e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008770:	e008      	b.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008772:	f7fc fd79 	bl	8005268 <HAL_GetTick>
 8008776:	4602      	mov	r2, r0
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	1ad3      	subs	r3, r2, r3
 800877c:	2b02      	cmp	r3, #2
 800877e:	d901      	bls.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008780:	2303      	movs	r3, #3
 8008782:	e12b      	b.n	80089dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008784:	4b76      	ldr	r3, [pc, #472]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800878c:	2b00      	cmp	r3, #0
 800878e:	d0f0      	beq.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f003 0304 	and.w	r3, r3, #4
 8008798:	2b00      	cmp	r3, #0
 800879a:	d105      	bne.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d079      	beq.n	800889c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80087a8:	4b6e      	ldr	r3, [pc, #440]	; (8008964 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80087aa:	2200      	movs	r2, #0
 80087ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80087ae:	f7fc fd5b 	bl	8005268 <HAL_GetTick>
 80087b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80087b4:	e008      	b.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80087b6:	f7fc fd57 	bl	8005268 <HAL_GetTick>
 80087ba:	4602      	mov	r2, r0
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	1ad3      	subs	r3, r2, r3
 80087c0:	2b02      	cmp	r3, #2
 80087c2:	d901      	bls.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80087c4:	2303      	movs	r3, #3
 80087c6:	e109      	b.n	80089dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80087c8:	4b65      	ldr	r3, [pc, #404]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087d4:	d0ef      	beq.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f003 0304 	and.w	r3, r3, #4
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d020      	beq.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80087e2:	4b5f      	ldr	r3, [pc, #380]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80087e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087e8:	0f1b      	lsrs	r3, r3, #28
 80087ea:	f003 0307 	and.w	r3, r3, #7
 80087ee:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	691b      	ldr	r3, [r3, #16]
 80087f4:	019a      	lsls	r2, r3, #6
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	695b      	ldr	r3, [r3, #20]
 80087fa:	061b      	lsls	r3, r3, #24
 80087fc:	431a      	orrs	r2, r3
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	071b      	lsls	r3, r3, #28
 8008802:	4957      	ldr	r1, [pc, #348]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008804:	4313      	orrs	r3, r2
 8008806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800880a:	4b55      	ldr	r3, [pc, #340]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800880c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008810:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6a1b      	ldr	r3, [r3, #32]
 8008818:	3b01      	subs	r3, #1
 800881a:	021b      	lsls	r3, r3, #8
 800881c:	4950      	ldr	r1, [pc, #320]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800881e:	4313      	orrs	r3, r2
 8008820:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f003 0308 	and.w	r3, r3, #8
 800882c:	2b00      	cmp	r3, #0
 800882e:	d01e      	beq.n	800886e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008830:	4b4b      	ldr	r3, [pc, #300]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008836:	0e1b      	lsrs	r3, r3, #24
 8008838:	f003 030f 	and.w	r3, r3, #15
 800883c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	691b      	ldr	r3, [r3, #16]
 8008842:	019a      	lsls	r2, r3, #6
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	061b      	lsls	r3, r3, #24
 8008848:	431a      	orrs	r2, r3
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	699b      	ldr	r3, [r3, #24]
 800884e:	071b      	lsls	r3, r3, #28
 8008850:	4943      	ldr	r1, [pc, #268]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008852:	4313      	orrs	r3, r2
 8008854:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008858:	4b41      	ldr	r3, [pc, #260]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800885a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800885e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008866:	493e      	ldr	r1, [pc, #248]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008868:	4313      	orrs	r3, r2
 800886a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800886e:	4b3d      	ldr	r3, [pc, #244]	; (8008964 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008870:	2201      	movs	r2, #1
 8008872:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008874:	f7fc fcf8 	bl	8005268 <HAL_GetTick>
 8008878:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800887a:	e008      	b.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800887c:	f7fc fcf4 	bl	8005268 <HAL_GetTick>
 8008880:	4602      	mov	r2, r0
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	1ad3      	subs	r3, r2, r3
 8008886:	2b02      	cmp	r3, #2
 8008888:	d901      	bls.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800888a:	2303      	movs	r3, #3
 800888c:	e0a6      	b.n	80089dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800888e:	4b34      	ldr	r3, [pc, #208]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008896:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800889a:	d1ef      	bne.n	800887c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f003 0320 	and.w	r3, r3, #32
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	f000 808d 	beq.w	80089c4 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80088aa:	2300      	movs	r3, #0
 80088ac:	60fb      	str	r3, [r7, #12]
 80088ae:	4b2c      	ldr	r3, [pc, #176]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80088b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088b2:	4a2b      	ldr	r2, [pc, #172]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80088b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088b8:	6413      	str	r3, [r2, #64]	; 0x40
 80088ba:	4b29      	ldr	r3, [pc, #164]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80088bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088c2:	60fb      	str	r3, [r7, #12]
 80088c4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80088c6:	4b28      	ldr	r3, [pc, #160]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a27      	ldr	r2, [pc, #156]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80088cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088d0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80088d2:	f7fc fcc9 	bl	8005268 <HAL_GetTick>
 80088d6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80088d8:	e008      	b.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80088da:	f7fc fcc5 	bl	8005268 <HAL_GetTick>
 80088de:	4602      	mov	r2, r0
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	1ad3      	subs	r3, r2, r3
 80088e4:	2b02      	cmp	r3, #2
 80088e6:	d901      	bls.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 80088e8:	2303      	movs	r3, #3
 80088ea:	e077      	b.n	80089dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80088ec:	4b1e      	ldr	r3, [pc, #120]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d0f0      	beq.n	80088da <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80088f8:	4b19      	ldr	r3, [pc, #100]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80088fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008900:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d039      	beq.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800890c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008910:	693a      	ldr	r2, [r7, #16]
 8008912:	429a      	cmp	r2, r3
 8008914:	d032      	beq.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008916:	4b12      	ldr	r3, [pc, #72]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800891a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800891e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008920:	4b12      	ldr	r3, [pc, #72]	; (800896c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008922:	2201      	movs	r2, #1
 8008924:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008926:	4b11      	ldr	r3, [pc, #68]	; (800896c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008928:	2200      	movs	r2, #0
 800892a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800892c:	4a0c      	ldr	r2, [pc, #48]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008932:	4b0b      	ldr	r3, [pc, #44]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008936:	f003 0301 	and.w	r3, r3, #1
 800893a:	2b01      	cmp	r3, #1
 800893c:	d11e      	bne.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800893e:	f7fc fc93 	bl	8005268 <HAL_GetTick>
 8008942:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008944:	e014      	b.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008946:	f7fc fc8f 	bl	8005268 <HAL_GetTick>
 800894a:	4602      	mov	r2, r0
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	1ad3      	subs	r3, r2, r3
 8008950:	f241 3288 	movw	r2, #5000	; 0x1388
 8008954:	4293      	cmp	r3, r2
 8008956:	d90b      	bls.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8008958:	2303      	movs	r3, #3
 800895a:	e03f      	b.n	80089dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800895c:	42470068 	.word	0x42470068
 8008960:	40023800 	.word	0x40023800
 8008964:	42470070 	.word	0x42470070
 8008968:	40007000 	.word	0x40007000
 800896c:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008970:	4b1c      	ldr	r3, [pc, #112]	; (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008974:	f003 0302 	and.w	r3, r3, #2
 8008978:	2b00      	cmp	r3, #0
 800897a:	d0e4      	beq.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008980:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008984:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008988:	d10d      	bne.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800898a:	4b16      	ldr	r3, [pc, #88]	; (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008996:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800899a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800899e:	4911      	ldr	r1, [pc, #68]	; (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80089a0:	4313      	orrs	r3, r2
 80089a2:	608b      	str	r3, [r1, #8]
 80089a4:	e005      	b.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80089a6:	4b0f      	ldr	r3, [pc, #60]	; (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80089a8:	689b      	ldr	r3, [r3, #8]
 80089aa:	4a0e      	ldr	r2, [pc, #56]	; (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80089ac:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80089b0:	6093      	str	r3, [r2, #8]
 80089b2:	4b0c      	ldr	r3, [pc, #48]	; (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80089b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089be:	4909      	ldr	r1, [pc, #36]	; (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80089c0:	4313      	orrs	r3, r2
 80089c2:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f003 0310 	and.w	r3, r3, #16
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d004      	beq.n	80089da <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80089d6:	4b04      	ldr	r3, [pc, #16]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80089d8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80089da:	2300      	movs	r3, #0
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3718      	adds	r7, #24
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}
 80089e4:	40023800 	.word	0x40023800
 80089e8:	424711e0 	.word	0x424711e0

080089ec <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d101      	bne.n	80089fe <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80089fa:	2301      	movs	r3, #1
 80089fc:	e083      	b.n	8008b06 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	7f5b      	ldrb	r3, [r3, #29]
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d105      	bne.n	8008a14 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f7f9 fa0a 	bl	8001e28 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2202      	movs	r2, #2
 8008a18:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	22ca      	movs	r2, #202	; 0xca
 8008a20:	625a      	str	r2, [r3, #36]	; 0x24
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	2253      	movs	r2, #83	; 0x53
 8008a28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 fb84 	bl	8009138 <RTC_EnterInitMode>
 8008a30:	4603      	mov	r3, r0
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d008      	beq.n	8008a48 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	22ff      	movs	r2, #255	; 0xff
 8008a3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2204      	movs	r2, #4
 8008a42:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008a44:	2301      	movs	r3, #1
 8008a46:	e05e      	b.n	8008b06 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	6812      	ldr	r2, [r2, #0]
 8008a52:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008a56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a5a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	6899      	ldr	r1, [r3, #8]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	685a      	ldr	r2, [r3, #4]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	691b      	ldr	r3, [r3, #16]
 8008a6a:	431a      	orrs	r2, r3
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	695b      	ldr	r3, [r3, #20]
 8008a70:	431a      	orrs	r2, r3
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	430a      	orrs	r2, r1
 8008a78:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	68d2      	ldr	r2, [r2, #12]
 8008a82:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	6919      	ldr	r1, [r3, #16]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	041a      	lsls	r2, r3, #16
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	430a      	orrs	r2, r1
 8008a96:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	68da      	ldr	r2, [r3, #12]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008aa6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	f003 0320 	and.w	r3, r3, #32
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d10e      	bne.n	8008ad4 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 fb16 	bl	80090e8 <HAL_RTC_WaitForSynchro>
 8008abc:	4603      	mov	r3, r0
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d008      	beq.n	8008ad4 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	22ff      	movs	r2, #255	; 0xff
 8008ac8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2204      	movs	r2, #4
 8008ace:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	e018      	b.n	8008b06 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008ae2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	699a      	ldr	r2, [r3, #24]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	430a      	orrs	r2, r1
 8008af4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	22ff      	movs	r2, #255	; 0xff
 8008afc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2201      	movs	r2, #1
 8008b02:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008b04:	2300      	movs	r3, #0
  }
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3708      	adds	r7, #8
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}

08008b0e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008b0e:	b590      	push	{r4, r7, lr}
 8008b10:	b087      	sub	sp, #28
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	60f8      	str	r0, [r7, #12]
 8008b16:	60b9      	str	r1, [r7, #8]
 8008b18:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	7f1b      	ldrb	r3, [r3, #28]
 8008b22:	2b01      	cmp	r3, #1
 8008b24:	d101      	bne.n	8008b2a <HAL_RTC_SetTime+0x1c>
 8008b26:	2302      	movs	r3, #2
 8008b28:	e0aa      	b.n	8008c80 <HAL_RTC_SetTime+0x172>
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2202      	movs	r2, #2
 8008b34:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d126      	bne.n	8008b8a <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	689b      	ldr	r3, [r3, #8]
 8008b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d102      	bne.n	8008b50 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	4618      	mov	r0, r3
 8008b56:	f000 fb1b 	bl	8009190 <RTC_ByteToBcd2>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	785b      	ldrb	r3, [r3, #1]
 8008b62:	4618      	mov	r0, r3
 8008b64:	f000 fb14 	bl	8009190 <RTC_ByteToBcd2>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008b6c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	789b      	ldrb	r3, [r3, #2]
 8008b72:	4618      	mov	r0, r3
 8008b74:	f000 fb0c 	bl	8009190 <RTC_ByteToBcd2>
 8008b78:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8008b7a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	78db      	ldrb	r3, [r3, #3]
 8008b82:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008b84:	4313      	orrs	r3, r2
 8008b86:	617b      	str	r3, [r7, #20]
 8008b88:	e018      	b.n	8008bbc <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	689b      	ldr	r3, [r3, #8]
 8008b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d102      	bne.n	8008b9e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	785b      	ldrb	r3, [r3, #1]
 8008ba8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008baa:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8008bac:	68ba      	ldr	r2, [r7, #8]
 8008bae:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8008bb0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	78db      	ldrb	r3, [r3, #3]
 8008bb6:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	22ca      	movs	r2, #202	; 0xca
 8008bc2:	625a      	str	r2, [r3, #36]	; 0x24
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	2253      	movs	r2, #83	; 0x53
 8008bca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008bcc:	68f8      	ldr	r0, [r7, #12]
 8008bce:	f000 fab3 	bl	8009138 <RTC_EnterInitMode>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d00b      	beq.n	8008bf0 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	22ff      	movs	r2, #255	; 0xff
 8008bde:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2204      	movs	r2, #4
 8008be4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2200      	movs	r2, #0
 8008bea:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008bec:	2301      	movs	r3, #1
 8008bee:	e047      	b.n	8008c80 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681a      	ldr	r2, [r3, #0]
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008bfa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008bfe:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	689a      	ldr	r2, [r3, #8]
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008c0e:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	6899      	ldr	r1, [r3, #8]
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	68da      	ldr	r2, [r3, #12]
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	691b      	ldr	r3, [r3, #16]
 8008c1e:	431a      	orrs	r2, r3
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	430a      	orrs	r2, r1
 8008c26:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	68da      	ldr	r2, [r3, #12]
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008c36:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	689b      	ldr	r3, [r3, #8]
 8008c3e:	f003 0320 	and.w	r3, r3, #32
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d111      	bne.n	8008c6a <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008c46:	68f8      	ldr	r0, [r7, #12]
 8008c48:	f000 fa4e 	bl	80090e8 <HAL_RTC_WaitForSynchro>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d00b      	beq.n	8008c6a <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	22ff      	movs	r2, #255	; 0xff
 8008c58:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2204      	movs	r2, #4
 8008c5e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2200      	movs	r2, #0
 8008c64:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008c66:	2301      	movs	r3, #1
 8008c68:	e00a      	b.n	8008c80 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	22ff      	movs	r2, #255	; 0xff
 8008c70:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	2201      	movs	r2, #1
 8008c76:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8008c7e:	2300      	movs	r3, #0
  }
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	371c      	adds	r7, #28
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd90      	pop	{r4, r7, pc}

08008c88 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008c88:	b590      	push	{r4, r7, lr}
 8008c8a:	b087      	sub	sp, #28
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	60b9      	str	r1, [r7, #8]
 8008c92:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008c94:	2300      	movs	r3, #0
 8008c96:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	7f1b      	ldrb	r3, [r3, #28]
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d101      	bne.n	8008ca4 <HAL_RTC_SetDate+0x1c>
 8008ca0:	2302      	movs	r3, #2
 8008ca2:	e094      	b.n	8008dce <HAL_RTC_SetDate+0x146>
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2202      	movs	r2, #2
 8008cae:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d10e      	bne.n	8008cd4 <HAL_RTC_SetDate+0x4c>
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	785b      	ldrb	r3, [r3, #1]
 8008cba:	f003 0310 	and.w	r3, r3, #16
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d008      	beq.n	8008cd4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	785b      	ldrb	r3, [r3, #1]
 8008cc6:	f023 0310 	bic.w	r3, r3, #16
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	330a      	adds	r3, #10
 8008cce:	b2da      	uxtb	r2, r3
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d11c      	bne.n	8008d14 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	78db      	ldrb	r3, [r3, #3]
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f000 fa56 	bl	8009190 <RTC_ByteToBcd2>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	785b      	ldrb	r3, [r3, #1]
 8008cec:	4618      	mov	r0, r3
 8008cee:	f000 fa4f 	bl	8009190 <RTC_ByteToBcd2>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008cf6:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	789b      	ldrb	r3, [r3, #2]
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f000 fa47 	bl	8009190 <RTC_ByteToBcd2>
 8008d02:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008d04:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	617b      	str	r3, [r7, #20]
 8008d12:	e00e      	b.n	8008d32 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	78db      	ldrb	r3, [r3, #3]
 8008d18:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	785b      	ldrb	r3, [r3, #1]
 8008d1e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008d20:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008d22:	68ba      	ldr	r2, [r7, #8]
 8008d24:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8008d26:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	781b      	ldrb	r3, [r3, #0]
 8008d2c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	22ca      	movs	r2, #202	; 0xca
 8008d38:	625a      	str	r2, [r3, #36]	; 0x24
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	2253      	movs	r2, #83	; 0x53
 8008d40:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008d42:	68f8      	ldr	r0, [r7, #12]
 8008d44:	f000 f9f8 	bl	8009138 <RTC_EnterInitMode>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d00b      	beq.n	8008d66 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	22ff      	movs	r2, #255	; 0xff
 8008d54:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2204      	movs	r2, #4
 8008d5a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008d62:	2301      	movs	r3, #1
 8008d64:	e033      	b.n	8008dce <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008d70:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008d74:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	68da      	ldr	r2, [r3, #12]
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d84:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	689b      	ldr	r3, [r3, #8]
 8008d8c:	f003 0320 	and.w	r3, r3, #32
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d111      	bne.n	8008db8 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008d94:	68f8      	ldr	r0, [r7, #12]
 8008d96:	f000 f9a7 	bl	80090e8 <HAL_RTC_WaitForSynchro>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d00b      	beq.n	8008db8 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	22ff      	movs	r2, #255	; 0xff
 8008da6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2204      	movs	r2, #4
 8008dac:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2200      	movs	r2, #0
 8008db2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008db4:	2301      	movs	r3, #1
 8008db6:	e00a      	b.n	8008dce <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	22ff      	movs	r2, #255	; 0xff
 8008dbe:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008dcc:	2300      	movs	r3, #0
  }
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	371c      	adds	r7, #28
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd90      	pop	{r4, r7, pc}
	...

08008dd8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008dd8:	b590      	push	{r4, r7, lr}
 8008dda:	b089      	sub	sp, #36	; 0x24
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	60f8      	str	r0, [r7, #12]
 8008de0:	60b9      	str	r1, [r7, #8]
 8008de2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8008de4:	2300      	movs	r3, #0
 8008de6:	61fb      	str	r3, [r7, #28]
 8008de8:	2300      	movs	r3, #0
 8008dea:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8008dec:	4b93      	ldr	r3, [pc, #588]	; (800903c <HAL_RTC_SetAlarm_IT+0x264>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a93      	ldr	r2, [pc, #588]	; (8009040 <HAL_RTC_SetAlarm_IT+0x268>)
 8008df2:	fba2 2303 	umull	r2, r3, r2, r3
 8008df6:	0adb      	lsrs	r3, r3, #11
 8008df8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008dfc:	fb02 f303 	mul.w	r3, r2, r3
 8008e00:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	7f1b      	ldrb	r3, [r3, #28]
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d101      	bne.n	8008e0e <HAL_RTC_SetAlarm_IT+0x36>
 8008e0a:	2302      	movs	r3, #2
 8008e0c:	e111      	b.n	8009032 <HAL_RTC_SetAlarm_IT+0x25a>
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2201      	movs	r2, #1
 8008e12:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2202      	movs	r2, #2
 8008e18:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d137      	bne.n	8008e90 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	689b      	ldr	r3, [r3, #8]
 8008e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d102      	bne.n	8008e34 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	2200      	movs	r2, #0
 8008e32:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	781b      	ldrb	r3, [r3, #0]
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f000 f9a9 	bl	8009190 <RTC_ByteToBcd2>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	785b      	ldrb	r3, [r3, #1]
 8008e46:	4618      	mov	r0, r3
 8008e48:	f000 f9a2 	bl	8009190 <RTC_ByteToBcd2>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8008e50:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	789b      	ldrb	r3, [r3, #2]
 8008e56:	4618      	mov	r0, r3
 8008e58:	f000 f99a 	bl	8009190 <RTC_ByteToBcd2>
 8008e5c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008e5e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	78db      	ldrb	r3, [r3, #3]
 8008e66:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008e68:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008e72:	4618      	mov	r0, r3
 8008e74:	f000 f98c 	bl	8009190 <RTC_ByteToBcd2>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008e7c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008e84:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	61fb      	str	r3, [r7, #28]
 8008e8e:	e023      	b.n	8008ed8 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	689b      	ldr	r3, [r3, #8]
 8008e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d102      	bne.n	8008ea4 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	781b      	ldrb	r3, [r3, #0]
 8008ea8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	785b      	ldrb	r3, [r3, #1]
 8008eae:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8008eb0:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008eb2:	68ba      	ldr	r2, [r7, #8]
 8008eb4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008eb6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	78db      	ldrb	r3, [r3, #3]
 8008ebc:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008ebe:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008ec6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008ec8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008ece:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	685a      	ldr	r2, [r3, #4]
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	699b      	ldr	r3, [r3, #24]
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	22ca      	movs	r2, #202	; 0xca
 8008eea:	625a      	str	r2, [r3, #36]	; 0x24
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	2253      	movs	r2, #83	; 0x53
 8008ef2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008efc:	d141      	bne.n	8008f82 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	689a      	ldr	r2, [r3, #8]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008f0c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	68db      	ldr	r3, [r3, #12]
 8008f14:	b2da      	uxtb	r2, r3
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8008f1e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	1e5a      	subs	r2, r3, #1
 8008f24:	617a      	str	r2, [r7, #20]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d10b      	bne.n	8008f42 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	22ff      	movs	r2, #255	; 0xff
 8008f30:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2203      	movs	r2, #3
 8008f36:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008f3e:	2303      	movs	r3, #3
 8008f40:	e077      	b.n	8009032 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	68db      	ldr	r3, [r3, #12]
 8008f48:	f003 0301 	and.w	r3, r3, #1
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d0e7      	beq.n	8008f20 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	69fa      	ldr	r2, [r7, #28]
 8008f56:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	69ba      	ldr	r2, [r7, #24]
 8008f5e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	689a      	ldr	r2, [r3, #8]
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f6e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	689a      	ldr	r2, [r3, #8]
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008f7e:	609a      	str	r2, [r3, #8]
 8008f80:	e040      	b.n	8009004 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	689a      	ldr	r2, [r3, #8]
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008f90:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	68db      	ldr	r3, [r3, #12]
 8008f98:	b2da      	uxtb	r2, r3
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8008fa2:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	1e5a      	subs	r2, r3, #1
 8008fa8:	617a      	str	r2, [r7, #20]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d10b      	bne.n	8008fc6 <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	22ff      	movs	r2, #255	; 0xff
 8008fb4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2203      	movs	r2, #3
 8008fba:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008fc2:	2303      	movs	r3, #3
 8008fc4:	e035      	b.n	8009032 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	68db      	ldr	r3, [r3, #12]
 8008fcc:	f003 0302 	and.w	r3, r3, #2
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d0e7      	beq.n	8008fa4 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	69fa      	ldr	r2, [r7, #28]
 8008fda:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	69ba      	ldr	r2, [r7, #24]
 8008fe2:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	689a      	ldr	r2, [r3, #8]
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ff2:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	689a      	ldr	r2, [r3, #8]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009002:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8009004:	4b0f      	ldr	r3, [pc, #60]	; (8009044 <HAL_RTC_SetAlarm_IT+0x26c>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4a0e      	ldr	r2, [pc, #56]	; (8009044 <HAL_RTC_SetAlarm_IT+0x26c>)
 800900a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800900e:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8009010:	4b0c      	ldr	r3, [pc, #48]	; (8009044 <HAL_RTC_SetAlarm_IT+0x26c>)
 8009012:	689b      	ldr	r3, [r3, #8]
 8009014:	4a0b      	ldr	r2, [pc, #44]	; (8009044 <HAL_RTC_SetAlarm_IT+0x26c>)
 8009016:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800901a:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	22ff      	movs	r2, #255	; 0xff
 8009022:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2201      	movs	r2, #1
 8009028:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2200      	movs	r2, #0
 800902e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009030:	2300      	movs	r3, #0
}
 8009032:	4618      	mov	r0, r3
 8009034:	3724      	adds	r7, #36	; 0x24
 8009036:	46bd      	mov	sp, r7
 8009038:	bd90      	pop	{r4, r7, pc}
 800903a:	bf00      	nop
 800903c:	20000000 	.word	0x20000000
 8009040:	10624dd3 	.word	0x10624dd3
 8009044:	40013c00 	.word	0x40013c00

08009048 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800905a:	2b00      	cmp	r3, #0
 800905c:	d012      	beq.n	8009084 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	68db      	ldr	r3, [r3, #12]
 8009064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009068:	2b00      	cmp	r3, #0
 800906a:	d00b      	beq.n	8009084 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 f831 	bl	80090d4 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	68db      	ldr	r3, [r3, #12]
 8009078:	b2da      	uxtb	r2, r3
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8009082:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	689b      	ldr	r3, [r3, #8]
 800908a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800908e:	2b00      	cmp	r3, #0
 8009090:	d012      	beq.n	80090b8 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800909c:	2b00      	cmp	r3, #0
 800909e:	d00b      	beq.n	80090b8 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 f9ab 	bl	80093fc <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	68db      	ldr	r3, [r3, #12]
 80090ac:	b2da      	uxtb	r2, r3
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f462 7220 	orn	r2, r2, #640	; 0x280
 80090b6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80090b8:	4b05      	ldr	r3, [pc, #20]	; (80090d0 <HAL_RTC_AlarmIRQHandler+0x88>)
 80090ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80090be:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2201      	movs	r2, #1
 80090c4:	775a      	strb	r2, [r3, #29]
}
 80090c6:	bf00      	nop
 80090c8:	3708      	adds	r7, #8
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
 80090ce:	bf00      	nop
 80090d0:	40013c00 	.word	0x40013c00

080090d4 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b083      	sub	sp, #12
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80090dc:	bf00      	nop
 80090de:	370c      	adds	r7, #12
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr

080090e8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b084      	sub	sp, #16
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80090f0:	2300      	movs	r3, #0
 80090f2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	68da      	ldr	r2, [r3, #12]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009102:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009104:	f7fc f8b0 	bl	8005268 <HAL_GetTick>
 8009108:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800910a:	e009      	b.n	8009120 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800910c:	f7fc f8ac 	bl	8005268 <HAL_GetTick>
 8009110:	4602      	mov	r2, r0
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	1ad3      	subs	r3, r2, r3
 8009116:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800911a:	d901      	bls.n	8009120 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800911c:	2303      	movs	r3, #3
 800911e:	e007      	b.n	8009130 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	68db      	ldr	r3, [r3, #12]
 8009126:	f003 0320 	and.w	r3, r3, #32
 800912a:	2b00      	cmp	r3, #0
 800912c:	d0ee      	beq.n	800910c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800912e:	2300      	movs	r3, #0
}
 8009130:	4618      	mov	r0, r3
 8009132:	3710      	adds	r7, #16
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b084      	sub	sp, #16
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009140:	2300      	movs	r3, #0
 8009142:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	68db      	ldr	r3, [r3, #12]
 800914a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800914e:	2b00      	cmp	r3, #0
 8009150:	d119      	bne.n	8009186 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f04f 32ff 	mov.w	r2, #4294967295
 800915a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800915c:	f7fc f884 	bl	8005268 <HAL_GetTick>
 8009160:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009162:	e009      	b.n	8009178 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009164:	f7fc f880 	bl	8005268 <HAL_GetTick>
 8009168:	4602      	mov	r2, r0
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	1ad3      	subs	r3, r2, r3
 800916e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009172:	d901      	bls.n	8009178 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8009174:	2303      	movs	r3, #3
 8009176:	e007      	b.n	8009188 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	68db      	ldr	r3, [r3, #12]
 800917e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009182:	2b00      	cmp	r3, #0
 8009184:	d0ee      	beq.n	8009164 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8009186:	2300      	movs	r3, #0
}
 8009188:	4618      	mov	r0, r3
 800918a:	3710      	adds	r7, #16
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}

08009190 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009190:	b480      	push	{r7}
 8009192:	b085      	sub	sp, #20
 8009194:	af00      	add	r7, sp, #0
 8009196:	4603      	mov	r3, r0
 8009198:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800919a:	2300      	movs	r3, #0
 800919c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800919e:	e005      	b.n	80091ac <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	3301      	adds	r3, #1
 80091a4:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80091a6:	79fb      	ldrb	r3, [r7, #7]
 80091a8:	3b0a      	subs	r3, #10
 80091aa:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80091ac:	79fb      	ldrb	r3, [r7, #7]
 80091ae:	2b09      	cmp	r3, #9
 80091b0:	d8f6      	bhi.n	80091a0 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	b2db      	uxtb	r3, r3
 80091b6:	011b      	lsls	r3, r3, #4
 80091b8:	b2da      	uxtb	r2, r3
 80091ba:	79fb      	ldrb	r3, [r7, #7]
 80091bc:	4313      	orrs	r3, r2
 80091be:	b2db      	uxtb	r3, r3
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3714      	adds	r7, #20
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr

080091cc <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b087      	sub	sp, #28
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	60f8      	str	r0, [r7, #12]
 80091d4:	60b9      	str	r1, [r7, #8]
 80091d6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	7f1b      	ldrb	r3, [r3, #28]
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d101      	bne.n	80091e4 <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 80091e0:	2302      	movs	r3, #2
 80091e2:	e0a6      	b.n	8009332 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2201      	movs	r2, #1
 80091e8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2202      	movs	r2, #2
 80091ee:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	22ca      	movs	r2, #202	; 0xca
 80091f6:	625a      	str	r2, [r3, #36]	; 0x24
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2253      	movs	r2, #83	; 0x53
 80091fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	689b      	ldr	r3, [r3, #8]
 8009206:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800920a:	2b00      	cmp	r3, #0
 800920c:	d022      	beq.n	8009254 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800920e:	4b4c      	ldr	r3, [pc, #304]	; (8009340 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a4c      	ldr	r2, [pc, #304]	; (8009344 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8009214:	fba2 2303 	umull	r2, r3, r2, r3
 8009218:	0adb      	lsrs	r3, r3, #11
 800921a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800921e:	fb02 f303 	mul.w	r3, r2, r3
 8009222:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	1e5a      	subs	r2, r3, #1
 8009228:	617a      	str	r2, [r7, #20]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d10b      	bne.n	8009246 <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	22ff      	movs	r2, #255	; 0xff
 8009234:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2203      	movs	r2, #3
 800923a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2200      	movs	r2, #0
 8009240:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009242:	2303      	movs	r3, #3
 8009244:	e075      	b.n	8009332 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	68db      	ldr	r3, [r3, #12]
 800924c:	f003 0304 	and.w	r3, r3, #4
 8009250:	2b00      	cmp	r3, #0
 8009252:	d1e7      	bne.n	8009224 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	689a      	ldr	r2, [r3, #8]
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009262:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 8009264:	4b36      	ldr	r3, [pc, #216]	; (8009340 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4a36      	ldr	r2, [pc, #216]	; (8009344 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800926a:	fba2 2303 	umull	r2, r3, r2, r3
 800926e:	0adb      	lsrs	r3, r3, #11
 8009270:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009274:	fb02 f303 	mul.w	r3, r2, r3
 8009278:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	1e5a      	subs	r2, r3, #1
 800927e:	617a      	str	r2, [r7, #20]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d10b      	bne.n	800929c <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	22ff      	movs	r2, #255	; 0xff
 800928a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2203      	movs	r2, #3
 8009290:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2200      	movs	r2, #0
 8009296:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8009298:	2303      	movs	r3, #3
 800929a:	e04a      	b.n	8009332 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	68db      	ldr	r3, [r3, #12]
 80092a2:	f003 0304 	and.w	r3, r3, #4
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d0e7      	beq.n	800927a <HAL_RTCEx_SetWakeUpTimer_IT+0xae>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	68ba      	ldr	r2, [r7, #8]
 80092b0:	615a      	str	r2, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	689a      	ldr	r2, [r3, #8]
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f022 0207 	bic.w	r2, r2, #7
 80092c0:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	6899      	ldr	r1, [r3, #8]
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	687a      	ldr	r2, [r7, #4]
 80092ce:	430a      	orrs	r2, r1
 80092d0:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80092d2:	4b1d      	ldr	r3, [pc, #116]	; (8009348 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	4a1c      	ldr	r2, [pc, #112]	; (8009348 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 80092d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80092dc:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 80092de:	4b1a      	ldr	r3, [pc, #104]	; (8009348 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 80092e0:	689b      	ldr	r3, [r3, #8]
 80092e2:	4a19      	ldr	r2, [pc, #100]	; (8009348 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 80092e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80092e8:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	68db      	ldr	r3, [r3, #12]
 80092f0:	b2da      	uxtb	r2, r3
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80092fa:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	689a      	ldr	r2, [r3, #8]
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800930a:	609a      	str	r2, [r3, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	689a      	ldr	r2, [r3, #8]
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800931a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	22ff      	movs	r2, #255	; 0xff
 8009322:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2201      	movs	r2, #1
 8009328:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2200      	movs	r2, #0
 800932e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009330:	2300      	movs	r3, #0
}
 8009332:	4618      	mov	r0, r3
 8009334:	371c      	adds	r7, #28
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr
 800933e:	bf00      	nop
 8009340:	20000000 	.word	0x20000000
 8009344:	10624dd3 	.word	0x10624dd3
 8009348:	40013c00 	.word	0x40013c00

0800934c <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009354:	2300      	movs	r3, #0
 8009356:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	7f1b      	ldrb	r3, [r3, #28]
 800935c:	2b01      	cmp	r3, #1
 800935e:	d101      	bne.n	8009364 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 8009360:	2302      	movs	r3, #2
 8009362:	e047      	b.n	80093f4 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2201      	movs	r2, #1
 8009368:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2202      	movs	r2, #2
 800936e:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	22ca      	movs	r2, #202	; 0xca
 8009376:	625a      	str	r2, [r3, #36]	; 0x24
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	2253      	movs	r2, #83	; 0x53
 800937e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	689a      	ldr	r2, [r3, #8]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800938e:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	689a      	ldr	r2, [r3, #8]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800939e:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 80093a0:	f7fb ff62 	bl	8005268 <HAL_GetTick>
 80093a4:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 80093a6:	e013      	b.n	80093d0 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80093a8:	f7fb ff5e 	bl	8005268 <HAL_GetTick>
 80093ac:	4602      	mov	r2, r0
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	1ad3      	subs	r3, r2, r3
 80093b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80093b6:	d90b      	bls.n	80093d0 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	22ff      	movs	r2, #255	; 0xff
 80093be:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2203      	movs	r2, #3
 80093c4:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2200      	movs	r2, #0
 80093ca:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 80093cc:	2303      	movs	r3, #3
 80093ce:	e011      	b.n	80093f4 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	68db      	ldr	r3, [r3, #12]
 80093d6:	f003 0304 	and.w	r3, r3, #4
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d0e4      	beq.n	80093a8 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	22ff      	movs	r2, #255	; 0xff
 80093e4:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2201      	movs	r2, #1
 80093ea:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2200      	movs	r2, #0
 80093f0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80093f2:	2300      	movs	r3, #0
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3710      	adds	r7, #16
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b083      	sub	sp, #12
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8009404:	bf00      	nop
 8009406:	370c      	adds	r7, #12
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b082      	sub	sp, #8
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d101      	bne.n	8009422 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800941e:	2301      	movs	r3, #1
 8009420:	e07b      	b.n	800951a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009426:	2b00      	cmp	r3, #0
 8009428:	d108      	bne.n	800943c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009432:	d009      	beq.n	8009448 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2200      	movs	r2, #0
 8009438:	61da      	str	r2, [r3, #28]
 800943a:	e005      	b.n	8009448 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2200      	movs	r2, #0
 8009440:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2200      	movs	r2, #0
 8009446:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2200      	movs	r2, #0
 800944c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009454:	b2db      	uxtb	r3, r3
 8009456:	2b00      	cmp	r3, #0
 8009458:	d106      	bne.n	8009468 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2200      	movs	r2, #0
 800945e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f7f8 fdb4 	bl	8001fd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2202      	movs	r2, #2
 800946c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	681a      	ldr	r2, [r3, #0]
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800947e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	689b      	ldr	r3, [r3, #8]
 800948c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009490:	431a      	orrs	r2, r3
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	68db      	ldr	r3, [r3, #12]
 8009496:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800949a:	431a      	orrs	r2, r3
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	691b      	ldr	r3, [r3, #16]
 80094a0:	f003 0302 	and.w	r3, r3, #2
 80094a4:	431a      	orrs	r2, r3
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	695b      	ldr	r3, [r3, #20]
 80094aa:	f003 0301 	and.w	r3, r3, #1
 80094ae:	431a      	orrs	r2, r3
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	699b      	ldr	r3, [r3, #24]
 80094b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80094b8:	431a      	orrs	r2, r3
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	69db      	ldr	r3, [r3, #28]
 80094be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80094c2:	431a      	orrs	r2, r3
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6a1b      	ldr	r3, [r3, #32]
 80094c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094cc:	ea42 0103 	orr.w	r1, r2, r3
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	430a      	orrs	r2, r1
 80094de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	699b      	ldr	r3, [r3, #24]
 80094e4:	0c1b      	lsrs	r3, r3, #16
 80094e6:	f003 0104 	and.w	r1, r3, #4
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ee:	f003 0210 	and.w	r2, r3, #16
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	430a      	orrs	r2, r1
 80094f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	69da      	ldr	r2, [r3, #28]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009508:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2200      	movs	r2, #0
 800950e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2201      	movs	r2, #1
 8009514:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009518:	2300      	movs	r3, #0
}
 800951a:	4618      	mov	r0, r3
 800951c:	3708      	adds	r7, #8
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}

08009522 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009522:	b580      	push	{r7, lr}
 8009524:	b088      	sub	sp, #32
 8009526:	af00      	add	r7, sp, #0
 8009528:	60f8      	str	r0, [r7, #12]
 800952a:	60b9      	str	r1, [r7, #8]
 800952c:	603b      	str	r3, [r7, #0]
 800952e:	4613      	mov	r3, r2
 8009530:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009532:	2300      	movs	r3, #0
 8009534:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800953c:	2b01      	cmp	r3, #1
 800953e:	d101      	bne.n	8009544 <HAL_SPI_Transmit+0x22>
 8009540:	2302      	movs	r3, #2
 8009542:	e126      	b.n	8009792 <HAL_SPI_Transmit+0x270>
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2201      	movs	r2, #1
 8009548:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800954c:	f7fb fe8c 	bl	8005268 <HAL_GetTick>
 8009550:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009552:	88fb      	ldrh	r3, [r7, #6]
 8009554:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800955c:	b2db      	uxtb	r3, r3
 800955e:	2b01      	cmp	r3, #1
 8009560:	d002      	beq.n	8009568 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009562:	2302      	movs	r3, #2
 8009564:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009566:	e10b      	b.n	8009780 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d002      	beq.n	8009574 <HAL_SPI_Transmit+0x52>
 800956e:	88fb      	ldrh	r3, [r7, #6]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d102      	bne.n	800957a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009574:	2301      	movs	r3, #1
 8009576:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009578:	e102      	b.n	8009780 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2203      	movs	r2, #3
 800957e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2200      	movs	r2, #0
 8009586:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	68ba      	ldr	r2, [r7, #8]
 800958c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	88fa      	ldrh	r2, [r7, #6]
 8009592:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	88fa      	ldrh	r2, [r7, #6]
 8009598:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2200      	movs	r2, #0
 800959e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2200      	movs	r2, #0
 80095a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2200      	movs	r2, #0
 80095aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	2200      	movs	r2, #0
 80095b0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2200      	movs	r2, #0
 80095b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	689b      	ldr	r3, [r3, #8]
 80095bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095c0:	d10f      	bne.n	80095e2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	681a      	ldr	r2, [r3, #0]
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	681a      	ldr	r2, [r3, #0]
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80095e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095ec:	2b40      	cmp	r3, #64	; 0x40
 80095ee:	d007      	beq.n	8009600 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	681a      	ldr	r2, [r3, #0]
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80095fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009608:	d14b      	bne.n	80096a2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	685b      	ldr	r3, [r3, #4]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d002      	beq.n	8009618 <HAL_SPI_Transmit+0xf6>
 8009612:	8afb      	ldrh	r3, [r7, #22]
 8009614:	2b01      	cmp	r3, #1
 8009616:	d13e      	bne.n	8009696 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800961c:	881a      	ldrh	r2, [r3, #0]
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009628:	1c9a      	adds	r2, r3, #2
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009632:	b29b      	uxth	r3, r3
 8009634:	3b01      	subs	r3, #1
 8009636:	b29a      	uxth	r2, r3
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800963c:	e02b      	b.n	8009696 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	f003 0302 	and.w	r3, r3, #2
 8009648:	2b02      	cmp	r3, #2
 800964a:	d112      	bne.n	8009672 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009650:	881a      	ldrh	r2, [r3, #0]
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800965c:	1c9a      	adds	r2, r3, #2
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009666:	b29b      	uxth	r3, r3
 8009668:	3b01      	subs	r3, #1
 800966a:	b29a      	uxth	r2, r3
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	86da      	strh	r2, [r3, #54]	; 0x36
 8009670:	e011      	b.n	8009696 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009672:	f7fb fdf9 	bl	8005268 <HAL_GetTick>
 8009676:	4602      	mov	r2, r0
 8009678:	69bb      	ldr	r3, [r7, #24]
 800967a:	1ad3      	subs	r3, r2, r3
 800967c:	683a      	ldr	r2, [r7, #0]
 800967e:	429a      	cmp	r2, r3
 8009680:	d803      	bhi.n	800968a <HAL_SPI_Transmit+0x168>
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009688:	d102      	bne.n	8009690 <HAL_SPI_Transmit+0x16e>
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d102      	bne.n	8009696 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8009690:	2303      	movs	r3, #3
 8009692:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009694:	e074      	b.n	8009780 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800969a:	b29b      	uxth	r3, r3
 800969c:	2b00      	cmp	r3, #0
 800969e:	d1ce      	bne.n	800963e <HAL_SPI_Transmit+0x11c>
 80096a0:	e04c      	b.n	800973c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d002      	beq.n	80096b0 <HAL_SPI_Transmit+0x18e>
 80096aa:	8afb      	ldrh	r3, [r7, #22]
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d140      	bne.n	8009732 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	330c      	adds	r3, #12
 80096ba:	7812      	ldrb	r2, [r2, #0]
 80096bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096c2:	1c5a      	adds	r2, r3, #1
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	3b01      	subs	r3, #1
 80096d0:	b29a      	uxth	r2, r3
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80096d6:	e02c      	b.n	8009732 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	689b      	ldr	r3, [r3, #8]
 80096de:	f003 0302 	and.w	r3, r3, #2
 80096e2:	2b02      	cmp	r3, #2
 80096e4:	d113      	bne.n	800970e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	330c      	adds	r3, #12
 80096f0:	7812      	ldrb	r2, [r2, #0]
 80096f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096f8:	1c5a      	adds	r2, r3, #1
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009702:	b29b      	uxth	r3, r3
 8009704:	3b01      	subs	r3, #1
 8009706:	b29a      	uxth	r2, r3
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	86da      	strh	r2, [r3, #54]	; 0x36
 800970c:	e011      	b.n	8009732 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800970e:	f7fb fdab 	bl	8005268 <HAL_GetTick>
 8009712:	4602      	mov	r2, r0
 8009714:	69bb      	ldr	r3, [r7, #24]
 8009716:	1ad3      	subs	r3, r2, r3
 8009718:	683a      	ldr	r2, [r7, #0]
 800971a:	429a      	cmp	r2, r3
 800971c:	d803      	bhi.n	8009726 <HAL_SPI_Transmit+0x204>
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009724:	d102      	bne.n	800972c <HAL_SPI_Transmit+0x20a>
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d102      	bne.n	8009732 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800972c:	2303      	movs	r3, #3
 800972e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009730:	e026      	b.n	8009780 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009736:	b29b      	uxth	r3, r3
 8009738:	2b00      	cmp	r3, #0
 800973a:	d1cd      	bne.n	80096d8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800973c:	69ba      	ldr	r2, [r7, #24]
 800973e:	6839      	ldr	r1, [r7, #0]
 8009740:	68f8      	ldr	r0, [r7, #12]
 8009742:	f000 fbcb 	bl	8009edc <SPI_EndRxTxTransaction>
 8009746:	4603      	mov	r3, r0
 8009748:	2b00      	cmp	r3, #0
 800974a:	d002      	beq.n	8009752 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2220      	movs	r2, #32
 8009750:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	689b      	ldr	r3, [r3, #8]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d10a      	bne.n	8009770 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800975a:	2300      	movs	r3, #0
 800975c:	613b      	str	r3, [r7, #16]
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	68db      	ldr	r3, [r3, #12]
 8009764:	613b      	str	r3, [r7, #16]
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	689b      	ldr	r3, [r3, #8]
 800976c:	613b      	str	r3, [r7, #16]
 800976e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009774:	2b00      	cmp	r3, #0
 8009776:	d002      	beq.n	800977e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8009778:	2301      	movs	r3, #1
 800977a:	77fb      	strb	r3, [r7, #31]
 800977c:	e000      	b.n	8009780 <HAL_SPI_Transmit+0x25e>
  }

error:
 800977e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	2201      	movs	r2, #1
 8009784:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2200      	movs	r2, #0
 800978c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009790:	7ffb      	ldrb	r3, [r7, #31]
}
 8009792:	4618      	mov	r0, r3
 8009794:	3720      	adds	r7, #32
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}

0800979a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800979a:	b580      	push	{r7, lr}
 800979c:	b088      	sub	sp, #32
 800979e:	af02      	add	r7, sp, #8
 80097a0:	60f8      	str	r0, [r7, #12]
 80097a2:	60b9      	str	r1, [r7, #8]
 80097a4:	603b      	str	r3, [r7, #0]
 80097a6:	4613      	mov	r3, r2
 80097a8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80097aa:	2300      	movs	r3, #0
 80097ac:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80097b6:	d112      	bne.n	80097de <HAL_SPI_Receive+0x44>
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	689b      	ldr	r3, [r3, #8]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d10e      	bne.n	80097de <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2204      	movs	r2, #4
 80097c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80097c8:	88fa      	ldrh	r2, [r7, #6]
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	9300      	str	r3, [sp, #0]
 80097ce:	4613      	mov	r3, r2
 80097d0:	68ba      	ldr	r2, [r7, #8]
 80097d2:	68b9      	ldr	r1, [r7, #8]
 80097d4:	68f8      	ldr	r0, [r7, #12]
 80097d6:	f000 f8f1 	bl	80099bc <HAL_SPI_TransmitReceive>
 80097da:	4603      	mov	r3, r0
 80097dc:	e0ea      	b.n	80099b4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80097e4:	2b01      	cmp	r3, #1
 80097e6:	d101      	bne.n	80097ec <HAL_SPI_Receive+0x52>
 80097e8:	2302      	movs	r3, #2
 80097ea:	e0e3      	b.n	80099b4 <HAL_SPI_Receive+0x21a>
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	2201      	movs	r2, #1
 80097f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80097f4:	f7fb fd38 	bl	8005268 <HAL_GetTick>
 80097f8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009800:	b2db      	uxtb	r3, r3
 8009802:	2b01      	cmp	r3, #1
 8009804:	d002      	beq.n	800980c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8009806:	2302      	movs	r3, #2
 8009808:	75fb      	strb	r3, [r7, #23]
    goto error;
 800980a:	e0ca      	b.n	80099a2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d002      	beq.n	8009818 <HAL_SPI_Receive+0x7e>
 8009812:	88fb      	ldrh	r3, [r7, #6]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d102      	bne.n	800981e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009818:	2301      	movs	r3, #1
 800981a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800981c:	e0c1      	b.n	80099a2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2204      	movs	r2, #4
 8009822:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2200      	movs	r2, #0
 800982a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	68ba      	ldr	r2, [r7, #8]
 8009830:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	88fa      	ldrh	r2, [r7, #6]
 8009836:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	88fa      	ldrh	r2, [r7, #6]
 800983c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2200      	movs	r2, #0
 8009842:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2200      	movs	r2, #0
 8009848:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	2200      	movs	r2, #0
 800984e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2200      	movs	r2, #0
 8009854:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2200      	movs	r2, #0
 800985a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	689b      	ldr	r3, [r3, #8]
 8009860:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009864:	d10f      	bne.n	8009886 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	681a      	ldr	r2, [r3, #0]
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009874:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009884:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009890:	2b40      	cmp	r3, #64	; 0x40
 8009892:	d007      	beq.n	80098a4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	681a      	ldr	r2, [r3, #0]
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80098a2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	68db      	ldr	r3, [r3, #12]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d162      	bne.n	8009972 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80098ac:	e02e      	b.n	800990c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	689b      	ldr	r3, [r3, #8]
 80098b4:	f003 0301 	and.w	r3, r3, #1
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	d115      	bne.n	80098e8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f103 020c 	add.w	r2, r3, #12
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098c8:	7812      	ldrb	r2, [r2, #0]
 80098ca:	b2d2      	uxtb	r2, r2
 80098cc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098d2:	1c5a      	adds	r2, r3, #1
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098dc:	b29b      	uxth	r3, r3
 80098de:	3b01      	subs	r3, #1
 80098e0:	b29a      	uxth	r2, r3
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80098e6:	e011      	b.n	800990c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80098e8:	f7fb fcbe 	bl	8005268 <HAL_GetTick>
 80098ec:	4602      	mov	r2, r0
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	1ad3      	subs	r3, r2, r3
 80098f2:	683a      	ldr	r2, [r7, #0]
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d803      	bhi.n	8009900 <HAL_SPI_Receive+0x166>
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098fe:	d102      	bne.n	8009906 <HAL_SPI_Receive+0x16c>
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d102      	bne.n	800990c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8009906:	2303      	movs	r3, #3
 8009908:	75fb      	strb	r3, [r7, #23]
          goto error;
 800990a:	e04a      	b.n	80099a2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009910:	b29b      	uxth	r3, r3
 8009912:	2b00      	cmp	r3, #0
 8009914:	d1cb      	bne.n	80098ae <HAL_SPI_Receive+0x114>
 8009916:	e031      	b.n	800997c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	689b      	ldr	r3, [r3, #8]
 800991e:	f003 0301 	and.w	r3, r3, #1
 8009922:	2b01      	cmp	r3, #1
 8009924:	d113      	bne.n	800994e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	68da      	ldr	r2, [r3, #12]
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009930:	b292      	uxth	r2, r2
 8009932:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009938:	1c9a      	adds	r2, r3, #2
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009942:	b29b      	uxth	r3, r3
 8009944:	3b01      	subs	r3, #1
 8009946:	b29a      	uxth	r2, r3
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800994c:	e011      	b.n	8009972 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800994e:	f7fb fc8b 	bl	8005268 <HAL_GetTick>
 8009952:	4602      	mov	r2, r0
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	1ad3      	subs	r3, r2, r3
 8009958:	683a      	ldr	r2, [r7, #0]
 800995a:	429a      	cmp	r2, r3
 800995c:	d803      	bhi.n	8009966 <HAL_SPI_Receive+0x1cc>
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009964:	d102      	bne.n	800996c <HAL_SPI_Receive+0x1d2>
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d102      	bne.n	8009972 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800996c:	2303      	movs	r3, #3
 800996e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009970:	e017      	b.n	80099a2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009976:	b29b      	uxth	r3, r3
 8009978:	2b00      	cmp	r3, #0
 800997a:	d1cd      	bne.n	8009918 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800997c:	693a      	ldr	r2, [r7, #16]
 800997e:	6839      	ldr	r1, [r7, #0]
 8009980:	68f8      	ldr	r0, [r7, #12]
 8009982:	f000 fa45 	bl	8009e10 <SPI_EndRxTransaction>
 8009986:	4603      	mov	r3, r0
 8009988:	2b00      	cmp	r3, #0
 800998a:	d002      	beq.n	8009992 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	2220      	movs	r2, #32
 8009990:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009996:	2b00      	cmp	r3, #0
 8009998:	d002      	beq.n	80099a0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800999a:	2301      	movs	r3, #1
 800999c:	75fb      	strb	r3, [r7, #23]
 800999e:	e000      	b.n	80099a2 <HAL_SPI_Receive+0x208>
  }

error :
 80099a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	2201      	movs	r2, #1
 80099a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2200      	movs	r2, #0
 80099ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80099b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3718      	adds	r7, #24
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}

080099bc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b08c      	sub	sp, #48	; 0x30
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	60f8      	str	r0, [r7, #12]
 80099c4:	60b9      	str	r1, [r7, #8]
 80099c6:	607a      	str	r2, [r7, #4]
 80099c8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80099ca:	2301      	movs	r3, #1
 80099cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80099ce:	2300      	movs	r3, #0
 80099d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80099da:	2b01      	cmp	r3, #1
 80099dc:	d101      	bne.n	80099e2 <HAL_SPI_TransmitReceive+0x26>
 80099de:	2302      	movs	r3, #2
 80099e0:	e18a      	b.n	8009cf8 <HAL_SPI_TransmitReceive+0x33c>
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	2201      	movs	r2, #1
 80099e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80099ea:	f7fb fc3d 	bl	8005268 <HAL_GetTick>
 80099ee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80099f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	685b      	ldr	r3, [r3, #4]
 80099fe:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009a00:	887b      	ldrh	r3, [r7, #2]
 8009a02:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009a04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009a08:	2b01      	cmp	r3, #1
 8009a0a:	d00f      	beq.n	8009a2c <HAL_SPI_TransmitReceive+0x70>
 8009a0c:	69fb      	ldr	r3, [r7, #28]
 8009a0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a12:	d107      	bne.n	8009a24 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	689b      	ldr	r3, [r3, #8]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d103      	bne.n	8009a24 <HAL_SPI_TransmitReceive+0x68>
 8009a1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009a20:	2b04      	cmp	r3, #4
 8009a22:	d003      	beq.n	8009a2c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009a24:	2302      	movs	r3, #2
 8009a26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009a2a:	e15b      	b.n	8009ce4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d005      	beq.n	8009a3e <HAL_SPI_TransmitReceive+0x82>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d002      	beq.n	8009a3e <HAL_SPI_TransmitReceive+0x82>
 8009a38:	887b      	ldrh	r3, [r7, #2]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d103      	bne.n	8009a46 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009a3e:	2301      	movs	r3, #1
 8009a40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009a44:	e14e      	b.n	8009ce4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009a4c:	b2db      	uxtb	r3, r3
 8009a4e:	2b04      	cmp	r3, #4
 8009a50:	d003      	beq.n	8009a5a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	2205      	movs	r2, #5
 8009a56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	887a      	ldrh	r2, [r7, #2]
 8009a6a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	887a      	ldrh	r2, [r7, #2]
 8009a70:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	68ba      	ldr	r2, [r7, #8]
 8009a76:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	887a      	ldrh	r2, [r7, #2]
 8009a7c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	887a      	ldrh	r2, [r7, #2]
 8009a82:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2200      	movs	r2, #0
 8009a88:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a9a:	2b40      	cmp	r3, #64	; 0x40
 8009a9c:	d007      	beq.n	8009aae <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	681a      	ldr	r2, [r3, #0]
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009aac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	68db      	ldr	r3, [r3, #12]
 8009ab2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ab6:	d178      	bne.n	8009baa <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d002      	beq.n	8009ac6 <HAL_SPI_TransmitReceive+0x10a>
 8009ac0:	8b7b      	ldrh	r3, [r7, #26]
 8009ac2:	2b01      	cmp	r3, #1
 8009ac4:	d166      	bne.n	8009b94 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aca:	881a      	ldrh	r2, [r3, #0]
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ad6:	1c9a      	adds	r2, r3, #2
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ae0:	b29b      	uxth	r3, r3
 8009ae2:	3b01      	subs	r3, #1
 8009ae4:	b29a      	uxth	r2, r3
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009aea:	e053      	b.n	8009b94 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	689b      	ldr	r3, [r3, #8]
 8009af2:	f003 0302 	and.w	r3, r3, #2
 8009af6:	2b02      	cmp	r3, #2
 8009af8:	d11b      	bne.n	8009b32 <HAL_SPI_TransmitReceive+0x176>
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009afe:	b29b      	uxth	r3, r3
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d016      	beq.n	8009b32 <HAL_SPI_TransmitReceive+0x176>
 8009b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b06:	2b01      	cmp	r3, #1
 8009b08:	d113      	bne.n	8009b32 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b0e:	881a      	ldrh	r2, [r3, #0]
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b1a:	1c9a      	adds	r2, r3, #2
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	3b01      	subs	r3, #1
 8009b28:	b29a      	uxth	r2, r3
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	689b      	ldr	r3, [r3, #8]
 8009b38:	f003 0301 	and.w	r3, r3, #1
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d119      	bne.n	8009b74 <HAL_SPI_TransmitReceive+0x1b8>
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b44:	b29b      	uxth	r3, r3
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d014      	beq.n	8009b74 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	68da      	ldr	r2, [r3, #12]
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b54:	b292      	uxth	r2, r2
 8009b56:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b5c:	1c9a      	adds	r2, r3, #2
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	3b01      	subs	r3, #1
 8009b6a:	b29a      	uxth	r2, r3
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009b70:	2301      	movs	r3, #1
 8009b72:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009b74:	f7fb fb78 	bl	8005268 <HAL_GetTick>
 8009b78:	4602      	mov	r2, r0
 8009b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7c:	1ad3      	subs	r3, r2, r3
 8009b7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b80:	429a      	cmp	r2, r3
 8009b82:	d807      	bhi.n	8009b94 <HAL_SPI_TransmitReceive+0x1d8>
 8009b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b8a:	d003      	beq.n	8009b94 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009b8c:	2303      	movs	r3, #3
 8009b8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009b92:	e0a7      	b.n	8009ce4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b98:	b29b      	uxth	r3, r3
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d1a6      	bne.n	8009aec <HAL_SPI_TransmitReceive+0x130>
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d1a1      	bne.n	8009aec <HAL_SPI_TransmitReceive+0x130>
 8009ba8:	e07c      	b.n	8009ca4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d002      	beq.n	8009bb8 <HAL_SPI_TransmitReceive+0x1fc>
 8009bb2:	8b7b      	ldrh	r3, [r7, #26]
 8009bb4:	2b01      	cmp	r3, #1
 8009bb6:	d16b      	bne.n	8009c90 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	330c      	adds	r3, #12
 8009bc2:	7812      	ldrb	r2, [r2, #0]
 8009bc4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bca:	1c5a      	adds	r2, r3, #1
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009bd4:	b29b      	uxth	r3, r3
 8009bd6:	3b01      	subs	r3, #1
 8009bd8:	b29a      	uxth	r2, r3
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009bde:	e057      	b.n	8009c90 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	689b      	ldr	r3, [r3, #8]
 8009be6:	f003 0302 	and.w	r3, r3, #2
 8009bea:	2b02      	cmp	r3, #2
 8009bec:	d11c      	bne.n	8009c28 <HAL_SPI_TransmitReceive+0x26c>
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009bf2:	b29b      	uxth	r3, r3
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d017      	beq.n	8009c28 <HAL_SPI_TransmitReceive+0x26c>
 8009bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bfa:	2b01      	cmp	r3, #1
 8009bfc:	d114      	bne.n	8009c28 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	330c      	adds	r3, #12
 8009c08:	7812      	ldrb	r2, [r2, #0]
 8009c0a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c10:	1c5a      	adds	r2, r3, #1
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c1a:	b29b      	uxth	r3, r3
 8009c1c:	3b01      	subs	r3, #1
 8009c1e:	b29a      	uxth	r2, r3
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009c24:	2300      	movs	r3, #0
 8009c26:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	689b      	ldr	r3, [r3, #8]
 8009c2e:	f003 0301 	and.w	r3, r3, #1
 8009c32:	2b01      	cmp	r3, #1
 8009c34:	d119      	bne.n	8009c6a <HAL_SPI_TransmitReceive+0x2ae>
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c3a:	b29b      	uxth	r3, r3
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d014      	beq.n	8009c6a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	68da      	ldr	r2, [r3, #12]
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c4a:	b2d2      	uxtb	r2, r2
 8009c4c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c52:	1c5a      	adds	r2, r3, #1
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	3b01      	subs	r3, #1
 8009c60:	b29a      	uxth	r2, r3
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009c66:	2301      	movs	r3, #1
 8009c68:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009c6a:	f7fb fafd 	bl	8005268 <HAL_GetTick>
 8009c6e:	4602      	mov	r2, r0
 8009c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c72:	1ad3      	subs	r3, r2, r3
 8009c74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c76:	429a      	cmp	r2, r3
 8009c78:	d803      	bhi.n	8009c82 <HAL_SPI_TransmitReceive+0x2c6>
 8009c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c80:	d102      	bne.n	8009c88 <HAL_SPI_TransmitReceive+0x2cc>
 8009c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d103      	bne.n	8009c90 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009c88:	2303      	movs	r3, #3
 8009c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009c8e:	e029      	b.n	8009ce4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c94:	b29b      	uxth	r3, r3
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d1a2      	bne.n	8009be0 <HAL_SPI_TransmitReceive+0x224>
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c9e:	b29b      	uxth	r3, r3
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d19d      	bne.n	8009be0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ca6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009ca8:	68f8      	ldr	r0, [r7, #12]
 8009caa:	f000 f917 	bl	8009edc <SPI_EndRxTxTransaction>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d006      	beq.n	8009cc2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2220      	movs	r2, #32
 8009cbe:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009cc0:	e010      	b.n	8009ce4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	689b      	ldr	r3, [r3, #8]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d10b      	bne.n	8009ce2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009cca:	2300      	movs	r3, #0
 8009ccc:	617b      	str	r3, [r7, #20]
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	68db      	ldr	r3, [r3, #12]
 8009cd4:	617b      	str	r3, [r7, #20]
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	689b      	ldr	r3, [r3, #8]
 8009cdc:	617b      	str	r3, [r7, #20]
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	e000      	b.n	8009ce4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009ce2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009cf4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3730      	adds	r7, #48	; 0x30
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}

08009d00 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b088      	sub	sp, #32
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	60f8      	str	r0, [r7, #12]
 8009d08:	60b9      	str	r1, [r7, #8]
 8009d0a:	603b      	str	r3, [r7, #0]
 8009d0c:	4613      	mov	r3, r2
 8009d0e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009d10:	f7fb faaa 	bl	8005268 <HAL_GetTick>
 8009d14:	4602      	mov	r2, r0
 8009d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d18:	1a9b      	subs	r3, r3, r2
 8009d1a:	683a      	ldr	r2, [r7, #0]
 8009d1c:	4413      	add	r3, r2
 8009d1e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009d20:	f7fb faa2 	bl	8005268 <HAL_GetTick>
 8009d24:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009d26:	4b39      	ldr	r3, [pc, #228]	; (8009e0c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	015b      	lsls	r3, r3, #5
 8009d2c:	0d1b      	lsrs	r3, r3, #20
 8009d2e:	69fa      	ldr	r2, [r7, #28]
 8009d30:	fb02 f303 	mul.w	r3, r2, r3
 8009d34:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009d36:	e054      	b.n	8009de2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d3e:	d050      	beq.n	8009de2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009d40:	f7fb fa92 	bl	8005268 <HAL_GetTick>
 8009d44:	4602      	mov	r2, r0
 8009d46:	69bb      	ldr	r3, [r7, #24]
 8009d48:	1ad3      	subs	r3, r2, r3
 8009d4a:	69fa      	ldr	r2, [r7, #28]
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d902      	bls.n	8009d56 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009d50:	69fb      	ldr	r3, [r7, #28]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d13d      	bne.n	8009dd2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	685a      	ldr	r2, [r3, #4]
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009d64:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	685b      	ldr	r3, [r3, #4]
 8009d6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009d6e:	d111      	bne.n	8009d94 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	689b      	ldr	r3, [r3, #8]
 8009d74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d78:	d004      	beq.n	8009d84 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	689b      	ldr	r3, [r3, #8]
 8009d7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d82:	d107      	bne.n	8009d94 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	681a      	ldr	r2, [r3, #0]
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d92:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d9c:	d10f      	bne.n	8009dbe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	681a      	ldr	r2, [r3, #0]
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009dac:	601a      	str	r2, [r3, #0]
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	681a      	ldr	r2, [r3, #0]
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009dbc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	2201      	movs	r2, #1
 8009dc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009dce:	2303      	movs	r3, #3
 8009dd0:	e017      	b.n	8009e02 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d101      	bne.n	8009ddc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	3b01      	subs	r3, #1
 8009de0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	689a      	ldr	r2, [r3, #8]
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	4013      	ands	r3, r2
 8009dec:	68ba      	ldr	r2, [r7, #8]
 8009dee:	429a      	cmp	r2, r3
 8009df0:	bf0c      	ite	eq
 8009df2:	2301      	moveq	r3, #1
 8009df4:	2300      	movne	r3, #0
 8009df6:	b2db      	uxtb	r3, r3
 8009df8:	461a      	mov	r2, r3
 8009dfa:	79fb      	ldrb	r3, [r7, #7]
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d19b      	bne.n	8009d38 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009e00:	2300      	movs	r3, #0
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	3720      	adds	r7, #32
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}
 8009e0a:	bf00      	nop
 8009e0c:	20000000 	.word	0x20000000

08009e10 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b086      	sub	sp, #24
 8009e14:	af02      	add	r7, sp, #8
 8009e16:	60f8      	str	r0, [r7, #12]
 8009e18:	60b9      	str	r1, [r7, #8]
 8009e1a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009e24:	d111      	bne.n	8009e4a <SPI_EndRxTransaction+0x3a>
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	689b      	ldr	r3, [r3, #8]
 8009e2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e2e:	d004      	beq.n	8009e3a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	689b      	ldr	r3, [r3, #8]
 8009e34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e38:	d107      	bne.n	8009e4a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	681a      	ldr	r2, [r3, #0]
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e48:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	685b      	ldr	r3, [r3, #4]
 8009e4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009e52:	d12a      	bne.n	8009eaa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	689b      	ldr	r3, [r3, #8]
 8009e58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e5c:	d012      	beq.n	8009e84 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	9300      	str	r3, [sp, #0]
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	2200      	movs	r2, #0
 8009e66:	2180      	movs	r1, #128	; 0x80
 8009e68:	68f8      	ldr	r0, [r7, #12]
 8009e6a:	f7ff ff49 	bl	8009d00 <SPI_WaitFlagStateUntilTimeout>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d02d      	beq.n	8009ed0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e78:	f043 0220 	orr.w	r2, r3, #32
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009e80:	2303      	movs	r3, #3
 8009e82:	e026      	b.n	8009ed2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	9300      	str	r3, [sp, #0]
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	2101      	movs	r1, #1
 8009e8e:	68f8      	ldr	r0, [r7, #12]
 8009e90:	f7ff ff36 	bl	8009d00 <SPI_WaitFlagStateUntilTimeout>
 8009e94:	4603      	mov	r3, r0
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d01a      	beq.n	8009ed0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e9e:	f043 0220 	orr.w	r2, r3, #32
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009ea6:	2303      	movs	r3, #3
 8009ea8:	e013      	b.n	8009ed2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	9300      	str	r3, [sp, #0]
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	2101      	movs	r1, #1
 8009eb4:	68f8      	ldr	r0, [r7, #12]
 8009eb6:	f7ff ff23 	bl	8009d00 <SPI_WaitFlagStateUntilTimeout>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d007      	beq.n	8009ed0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ec4:	f043 0220 	orr.w	r2, r3, #32
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009ecc:	2303      	movs	r3, #3
 8009ece:	e000      	b.n	8009ed2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009ed0:	2300      	movs	r3, #0
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3710      	adds	r7, #16
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}
	...

08009edc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b088      	sub	sp, #32
 8009ee0:	af02      	add	r7, sp, #8
 8009ee2:	60f8      	str	r0, [r7, #12]
 8009ee4:	60b9      	str	r1, [r7, #8]
 8009ee6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009ee8:	4b1b      	ldr	r3, [pc, #108]	; (8009f58 <SPI_EndRxTxTransaction+0x7c>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4a1b      	ldr	r2, [pc, #108]	; (8009f5c <SPI_EndRxTxTransaction+0x80>)
 8009eee:	fba2 2303 	umull	r2, r3, r2, r3
 8009ef2:	0d5b      	lsrs	r3, r3, #21
 8009ef4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009ef8:	fb02 f303 	mul.w	r3, r2, r3
 8009efc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	685b      	ldr	r3, [r3, #4]
 8009f02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f06:	d112      	bne.n	8009f2e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	9300      	str	r3, [sp, #0]
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	2180      	movs	r1, #128	; 0x80
 8009f12:	68f8      	ldr	r0, [r7, #12]
 8009f14:	f7ff fef4 	bl	8009d00 <SPI_WaitFlagStateUntilTimeout>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d016      	beq.n	8009f4c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f22:	f043 0220 	orr.w	r2, r3, #32
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009f2a:	2303      	movs	r3, #3
 8009f2c:	e00f      	b.n	8009f4e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d00a      	beq.n	8009f4a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009f34:	697b      	ldr	r3, [r7, #20]
 8009f36:	3b01      	subs	r3, #1
 8009f38:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	689b      	ldr	r3, [r3, #8]
 8009f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f44:	2b80      	cmp	r3, #128	; 0x80
 8009f46:	d0f2      	beq.n	8009f2e <SPI_EndRxTxTransaction+0x52>
 8009f48:	e000      	b.n	8009f4c <SPI_EndRxTxTransaction+0x70>
        break;
 8009f4a:	bf00      	nop
  }

  return HAL_OK;
 8009f4c:	2300      	movs	r3, #0
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3718      	adds	r7, #24
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}
 8009f56:	bf00      	nop
 8009f58:	20000000 	.word	0x20000000
 8009f5c:	165e9f81 	.word	0x165e9f81

08009f60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b082      	sub	sp, #8
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d101      	bne.n	8009f72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009f6e:	2301      	movs	r3, #1
 8009f70:	e041      	b.n	8009ff6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f78:	b2db      	uxtb	r3, r3
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d106      	bne.n	8009f8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2200      	movs	r2, #0
 8009f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f7f8 fa22 	bl	80023d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2202      	movs	r2, #2
 8009f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681a      	ldr	r2, [r3, #0]
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	3304      	adds	r3, #4
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	4610      	mov	r0, r2
 8009fa0:	f000 fbb2 	bl	800a708 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2201      	movs	r2, #1
 8009fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2201      	movs	r2, #1
 8009fd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2201      	movs	r2, #1
 8009fe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2201      	movs	r2, #1
 8009ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009ff4:	2300      	movs	r3, #0
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3708      	adds	r7, #8
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}
	...

0800a000 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a000:	b480      	push	{r7}
 800a002:	b085      	sub	sp, #20
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a00e:	b2db      	uxtb	r3, r3
 800a010:	2b01      	cmp	r3, #1
 800a012:	d001      	beq.n	800a018 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a014:	2301      	movs	r3, #1
 800a016:	e04e      	b.n	800a0b6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2202      	movs	r2, #2
 800a01c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	68da      	ldr	r2, [r3, #12]
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f042 0201 	orr.w	r2, r2, #1
 800a02e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	4a23      	ldr	r2, [pc, #140]	; (800a0c4 <HAL_TIM_Base_Start_IT+0xc4>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d022      	beq.n	800a080 <HAL_TIM_Base_Start_IT+0x80>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a042:	d01d      	beq.n	800a080 <HAL_TIM_Base_Start_IT+0x80>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	4a1f      	ldr	r2, [pc, #124]	; (800a0c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d018      	beq.n	800a080 <HAL_TIM_Base_Start_IT+0x80>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	4a1e      	ldr	r2, [pc, #120]	; (800a0cc <HAL_TIM_Base_Start_IT+0xcc>)
 800a054:	4293      	cmp	r3, r2
 800a056:	d013      	beq.n	800a080 <HAL_TIM_Base_Start_IT+0x80>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4a1c      	ldr	r2, [pc, #112]	; (800a0d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d00e      	beq.n	800a080 <HAL_TIM_Base_Start_IT+0x80>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	4a1b      	ldr	r2, [pc, #108]	; (800a0d4 <HAL_TIM_Base_Start_IT+0xd4>)
 800a068:	4293      	cmp	r3, r2
 800a06a:	d009      	beq.n	800a080 <HAL_TIM_Base_Start_IT+0x80>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4a19      	ldr	r2, [pc, #100]	; (800a0d8 <HAL_TIM_Base_Start_IT+0xd8>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d004      	beq.n	800a080 <HAL_TIM_Base_Start_IT+0x80>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4a18      	ldr	r2, [pc, #96]	; (800a0dc <HAL_TIM_Base_Start_IT+0xdc>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d111      	bne.n	800a0a4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	689b      	ldr	r3, [r3, #8]
 800a086:	f003 0307 	and.w	r3, r3, #7
 800a08a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2b06      	cmp	r3, #6
 800a090:	d010      	beq.n	800a0b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	681a      	ldr	r2, [r3, #0]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f042 0201 	orr.w	r2, r2, #1
 800a0a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0a2:	e007      	b.n	800a0b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	681a      	ldr	r2, [r3, #0]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f042 0201 	orr.w	r2, r2, #1
 800a0b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a0b4:	2300      	movs	r3, #0
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3714      	adds	r7, #20
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c0:	4770      	bx	lr
 800a0c2:	bf00      	nop
 800a0c4:	40010000 	.word	0x40010000
 800a0c8:	40000400 	.word	0x40000400
 800a0cc:	40000800 	.word	0x40000800
 800a0d0:	40000c00 	.word	0x40000c00
 800a0d4:	40010400 	.word	0x40010400
 800a0d8:	40014000 	.word	0x40014000
 800a0dc:	40001800 	.word	0x40001800

0800a0e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b082      	sub	sp, #8
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d101      	bne.n	800a0f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	e041      	b.n	800a176 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0f8:	b2db      	uxtb	r3, r3
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d106      	bne.n	800a10c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2200      	movs	r2, #0
 800a102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f000 f839 	bl	800a17e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2202      	movs	r2, #2
 800a110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681a      	ldr	r2, [r3, #0]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	3304      	adds	r3, #4
 800a11c:	4619      	mov	r1, r3
 800a11e:	4610      	mov	r0, r2
 800a120:	f000 faf2 	bl	800a708 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2201      	movs	r2, #1
 800a128:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2201      	movs	r2, #1
 800a130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2201      	movs	r2, #1
 800a138:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2201      	movs	r2, #1
 800a140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2201      	movs	r2, #1
 800a148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2201      	movs	r2, #1
 800a150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2201      	movs	r2, #1
 800a158:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2201      	movs	r2, #1
 800a160:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2201      	movs	r2, #1
 800a168:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2201      	movs	r2, #1
 800a170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a174:	2300      	movs	r3, #0
}
 800a176:	4618      	mov	r0, r3
 800a178:	3708      	adds	r7, #8
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}

0800a17e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a17e:	b480      	push	{r7}
 800a180:	b083      	sub	sp, #12
 800a182:	af00      	add	r7, sp, #0
 800a184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a186:	bf00      	nop
 800a188:	370c      	adds	r7, #12
 800a18a:	46bd      	mov	sp, r7
 800a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a190:	4770      	bx	lr

0800a192 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a192:	b580      	push	{r7, lr}
 800a194:	b082      	sub	sp, #8
 800a196:	af00      	add	r7, sp, #0
 800a198:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	691b      	ldr	r3, [r3, #16]
 800a1a0:	f003 0302 	and.w	r3, r3, #2
 800a1a4:	2b02      	cmp	r3, #2
 800a1a6:	d122      	bne.n	800a1ee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	68db      	ldr	r3, [r3, #12]
 800a1ae:	f003 0302 	and.w	r3, r3, #2
 800a1b2:	2b02      	cmp	r3, #2
 800a1b4:	d11b      	bne.n	800a1ee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f06f 0202 	mvn.w	r2, #2
 800a1be:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	699b      	ldr	r3, [r3, #24]
 800a1cc:	f003 0303 	and.w	r3, r3, #3
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d003      	beq.n	800a1dc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f000 fa78 	bl	800a6ca <HAL_TIM_IC_CaptureCallback>
 800a1da:	e005      	b.n	800a1e8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f000 fa6a 	bl	800a6b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f000 fa7b 	bl	800a6de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	691b      	ldr	r3, [r3, #16]
 800a1f4:	f003 0304 	and.w	r3, r3, #4
 800a1f8:	2b04      	cmp	r3, #4
 800a1fa:	d122      	bne.n	800a242 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	68db      	ldr	r3, [r3, #12]
 800a202:	f003 0304 	and.w	r3, r3, #4
 800a206:	2b04      	cmp	r3, #4
 800a208:	d11b      	bne.n	800a242 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f06f 0204 	mvn.w	r2, #4
 800a212:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2202      	movs	r2, #2
 800a218:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	699b      	ldr	r3, [r3, #24]
 800a220:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a224:	2b00      	cmp	r3, #0
 800a226:	d003      	beq.n	800a230 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f000 fa4e 	bl	800a6ca <HAL_TIM_IC_CaptureCallback>
 800a22e:	e005      	b.n	800a23c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f000 fa40 	bl	800a6b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f000 fa51 	bl	800a6de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2200      	movs	r2, #0
 800a240:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	691b      	ldr	r3, [r3, #16]
 800a248:	f003 0308 	and.w	r3, r3, #8
 800a24c:	2b08      	cmp	r3, #8
 800a24e:	d122      	bne.n	800a296 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	68db      	ldr	r3, [r3, #12]
 800a256:	f003 0308 	and.w	r3, r3, #8
 800a25a:	2b08      	cmp	r3, #8
 800a25c:	d11b      	bne.n	800a296 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f06f 0208 	mvn.w	r2, #8
 800a266:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2204      	movs	r2, #4
 800a26c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	69db      	ldr	r3, [r3, #28]
 800a274:	f003 0303 	and.w	r3, r3, #3
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d003      	beq.n	800a284 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f000 fa24 	bl	800a6ca <HAL_TIM_IC_CaptureCallback>
 800a282:	e005      	b.n	800a290 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f000 fa16 	bl	800a6b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 fa27 	bl	800a6de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2200      	movs	r2, #0
 800a294:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	691b      	ldr	r3, [r3, #16]
 800a29c:	f003 0310 	and.w	r3, r3, #16
 800a2a0:	2b10      	cmp	r3, #16
 800a2a2:	d122      	bne.n	800a2ea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	68db      	ldr	r3, [r3, #12]
 800a2aa:	f003 0310 	and.w	r3, r3, #16
 800a2ae:	2b10      	cmp	r3, #16
 800a2b0:	d11b      	bne.n	800a2ea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f06f 0210 	mvn.w	r2, #16
 800a2ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2208      	movs	r2, #8
 800a2c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	69db      	ldr	r3, [r3, #28]
 800a2c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d003      	beq.n	800a2d8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f000 f9fa 	bl	800a6ca <HAL_TIM_IC_CaptureCallback>
 800a2d6:	e005      	b.n	800a2e4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f000 f9ec 	bl	800a6b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f000 f9fd 	bl	800a6de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	691b      	ldr	r3, [r3, #16]
 800a2f0:	f003 0301 	and.w	r3, r3, #1
 800a2f4:	2b01      	cmp	r3, #1
 800a2f6:	d10e      	bne.n	800a316 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	68db      	ldr	r3, [r3, #12]
 800a2fe:	f003 0301 	and.w	r3, r3, #1
 800a302:	2b01      	cmp	r3, #1
 800a304:	d107      	bne.n	800a316 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f06f 0201 	mvn.w	r2, #1
 800a30e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f7f7 fce5 	bl	8001ce0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	691b      	ldr	r3, [r3, #16]
 800a31c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a320:	2b80      	cmp	r3, #128	; 0x80
 800a322:	d10e      	bne.n	800a342 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	68db      	ldr	r3, [r3, #12]
 800a32a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a32e:	2b80      	cmp	r3, #128	; 0x80
 800a330:	d107      	bne.n	800a342 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a33a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f000 fd53 	bl	800ade8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	691b      	ldr	r3, [r3, #16]
 800a348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a34c:	2b40      	cmp	r3, #64	; 0x40
 800a34e:	d10e      	bne.n	800a36e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	68db      	ldr	r3, [r3, #12]
 800a356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a35a:	2b40      	cmp	r3, #64	; 0x40
 800a35c:	d107      	bne.n	800a36e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a366:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f000 f9c2 	bl	800a6f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	691b      	ldr	r3, [r3, #16]
 800a374:	f003 0320 	and.w	r3, r3, #32
 800a378:	2b20      	cmp	r3, #32
 800a37a:	d10e      	bne.n	800a39a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	68db      	ldr	r3, [r3, #12]
 800a382:	f003 0320 	and.w	r3, r3, #32
 800a386:	2b20      	cmp	r3, #32
 800a388:	d107      	bne.n	800a39a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f06f 0220 	mvn.w	r2, #32
 800a392:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f000 fd1d 	bl	800add4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a39a:	bf00      	nop
 800a39c:	3708      	adds	r7, #8
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}
	...

0800a3a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b086      	sub	sp, #24
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	60f8      	str	r0, [r7, #12]
 800a3ac:	60b9      	str	r1, [r7, #8]
 800a3ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3ba:	2b01      	cmp	r3, #1
 800a3bc:	d101      	bne.n	800a3c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a3be:	2302      	movs	r3, #2
 800a3c0:	e0ae      	b.n	800a520 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2201      	movs	r2, #1
 800a3c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2b0c      	cmp	r3, #12
 800a3ce:	f200 809f 	bhi.w	800a510 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a3d2:	a201      	add	r2, pc, #4	; (adr r2, 800a3d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a3d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3d8:	0800a40d 	.word	0x0800a40d
 800a3dc:	0800a511 	.word	0x0800a511
 800a3e0:	0800a511 	.word	0x0800a511
 800a3e4:	0800a511 	.word	0x0800a511
 800a3e8:	0800a44d 	.word	0x0800a44d
 800a3ec:	0800a511 	.word	0x0800a511
 800a3f0:	0800a511 	.word	0x0800a511
 800a3f4:	0800a511 	.word	0x0800a511
 800a3f8:	0800a48f 	.word	0x0800a48f
 800a3fc:	0800a511 	.word	0x0800a511
 800a400:	0800a511 	.word	0x0800a511
 800a404:	0800a511 	.word	0x0800a511
 800a408:	0800a4cf 	.word	0x0800a4cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	68b9      	ldr	r1, [r7, #8]
 800a412:	4618      	mov	r0, r3
 800a414:	f000 fa18 	bl	800a848 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	699a      	ldr	r2, [r3, #24]
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f042 0208 	orr.w	r2, r2, #8
 800a426:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	699a      	ldr	r2, [r3, #24]
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f022 0204 	bic.w	r2, r2, #4
 800a436:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	6999      	ldr	r1, [r3, #24]
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	691a      	ldr	r2, [r3, #16]
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	430a      	orrs	r2, r1
 800a448:	619a      	str	r2, [r3, #24]
      break;
 800a44a:	e064      	b.n	800a516 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	68b9      	ldr	r1, [r7, #8]
 800a452:	4618      	mov	r0, r3
 800a454:	f000 fa68 	bl	800a928 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	699a      	ldr	r2, [r3, #24]
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a466:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	699a      	ldr	r2, [r3, #24]
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a476:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	6999      	ldr	r1, [r3, #24]
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	691b      	ldr	r3, [r3, #16]
 800a482:	021a      	lsls	r2, r3, #8
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	430a      	orrs	r2, r1
 800a48a:	619a      	str	r2, [r3, #24]
      break;
 800a48c:	e043      	b.n	800a516 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	68b9      	ldr	r1, [r7, #8]
 800a494:	4618      	mov	r0, r3
 800a496:	f000 fabd 	bl	800aa14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	69da      	ldr	r2, [r3, #28]
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f042 0208 	orr.w	r2, r2, #8
 800a4a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	69da      	ldr	r2, [r3, #28]
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f022 0204 	bic.w	r2, r2, #4
 800a4b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	69d9      	ldr	r1, [r3, #28]
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	691a      	ldr	r2, [r3, #16]
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	430a      	orrs	r2, r1
 800a4ca:	61da      	str	r2, [r3, #28]
      break;
 800a4cc:	e023      	b.n	800a516 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	68b9      	ldr	r1, [r7, #8]
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f000 fb11 	bl	800aafc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	69da      	ldr	r2, [r3, #28]
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a4e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	69da      	ldr	r2, [r3, #28]
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a4f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	69d9      	ldr	r1, [r3, #28]
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	691b      	ldr	r3, [r3, #16]
 800a504:	021a      	lsls	r2, r3, #8
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	430a      	orrs	r2, r1
 800a50c:	61da      	str	r2, [r3, #28]
      break;
 800a50e:	e002      	b.n	800a516 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a510:	2301      	movs	r3, #1
 800a512:	75fb      	strb	r3, [r7, #23]
      break;
 800a514:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2200      	movs	r2, #0
 800a51a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a51e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a520:	4618      	mov	r0, r3
 800a522:	3718      	adds	r7, #24
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}

0800a528 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b084      	sub	sp, #16
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a532:	2300      	movs	r3, #0
 800a534:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a53c:	2b01      	cmp	r3, #1
 800a53e:	d101      	bne.n	800a544 <HAL_TIM_ConfigClockSource+0x1c>
 800a540:	2302      	movs	r3, #2
 800a542:	e0b4      	b.n	800a6ae <HAL_TIM_ConfigClockSource+0x186>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2201      	movs	r2, #1
 800a548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2202      	movs	r2, #2
 800a550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	689b      	ldr	r3, [r3, #8]
 800a55a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a562:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a56a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	68ba      	ldr	r2, [r7, #8]
 800a572:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a57c:	d03e      	beq.n	800a5fc <HAL_TIM_ConfigClockSource+0xd4>
 800a57e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a582:	f200 8087 	bhi.w	800a694 <HAL_TIM_ConfigClockSource+0x16c>
 800a586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a58a:	f000 8086 	beq.w	800a69a <HAL_TIM_ConfigClockSource+0x172>
 800a58e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a592:	d87f      	bhi.n	800a694 <HAL_TIM_ConfigClockSource+0x16c>
 800a594:	2b70      	cmp	r3, #112	; 0x70
 800a596:	d01a      	beq.n	800a5ce <HAL_TIM_ConfigClockSource+0xa6>
 800a598:	2b70      	cmp	r3, #112	; 0x70
 800a59a:	d87b      	bhi.n	800a694 <HAL_TIM_ConfigClockSource+0x16c>
 800a59c:	2b60      	cmp	r3, #96	; 0x60
 800a59e:	d050      	beq.n	800a642 <HAL_TIM_ConfigClockSource+0x11a>
 800a5a0:	2b60      	cmp	r3, #96	; 0x60
 800a5a2:	d877      	bhi.n	800a694 <HAL_TIM_ConfigClockSource+0x16c>
 800a5a4:	2b50      	cmp	r3, #80	; 0x50
 800a5a6:	d03c      	beq.n	800a622 <HAL_TIM_ConfigClockSource+0xfa>
 800a5a8:	2b50      	cmp	r3, #80	; 0x50
 800a5aa:	d873      	bhi.n	800a694 <HAL_TIM_ConfigClockSource+0x16c>
 800a5ac:	2b40      	cmp	r3, #64	; 0x40
 800a5ae:	d058      	beq.n	800a662 <HAL_TIM_ConfigClockSource+0x13a>
 800a5b0:	2b40      	cmp	r3, #64	; 0x40
 800a5b2:	d86f      	bhi.n	800a694 <HAL_TIM_ConfigClockSource+0x16c>
 800a5b4:	2b30      	cmp	r3, #48	; 0x30
 800a5b6:	d064      	beq.n	800a682 <HAL_TIM_ConfigClockSource+0x15a>
 800a5b8:	2b30      	cmp	r3, #48	; 0x30
 800a5ba:	d86b      	bhi.n	800a694 <HAL_TIM_ConfigClockSource+0x16c>
 800a5bc:	2b20      	cmp	r3, #32
 800a5be:	d060      	beq.n	800a682 <HAL_TIM_ConfigClockSource+0x15a>
 800a5c0:	2b20      	cmp	r3, #32
 800a5c2:	d867      	bhi.n	800a694 <HAL_TIM_ConfigClockSource+0x16c>
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d05c      	beq.n	800a682 <HAL_TIM_ConfigClockSource+0x15a>
 800a5c8:	2b10      	cmp	r3, #16
 800a5ca:	d05a      	beq.n	800a682 <HAL_TIM_ConfigClockSource+0x15a>
 800a5cc:	e062      	b.n	800a694 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6818      	ldr	r0, [r3, #0]
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	6899      	ldr	r1, [r3, #8]
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	685a      	ldr	r2, [r3, #4]
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	68db      	ldr	r3, [r3, #12]
 800a5de:	f000 fb5d 	bl	800ac9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	689b      	ldr	r3, [r3, #8]
 800a5e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a5f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	68ba      	ldr	r2, [r7, #8]
 800a5f8:	609a      	str	r2, [r3, #8]
      break;
 800a5fa:	e04f      	b.n	800a69c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6818      	ldr	r0, [r3, #0]
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	6899      	ldr	r1, [r3, #8]
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	685a      	ldr	r2, [r3, #4]
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	68db      	ldr	r3, [r3, #12]
 800a60c:	f000 fb46 	bl	800ac9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	689a      	ldr	r2, [r3, #8]
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a61e:	609a      	str	r2, [r3, #8]
      break;
 800a620:	e03c      	b.n	800a69c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6818      	ldr	r0, [r3, #0]
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	6859      	ldr	r1, [r3, #4]
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	68db      	ldr	r3, [r3, #12]
 800a62e:	461a      	mov	r2, r3
 800a630:	f000 faba 	bl	800aba8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	2150      	movs	r1, #80	; 0x50
 800a63a:	4618      	mov	r0, r3
 800a63c:	f000 fb13 	bl	800ac66 <TIM_ITRx_SetConfig>
      break;
 800a640:	e02c      	b.n	800a69c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6818      	ldr	r0, [r3, #0]
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	6859      	ldr	r1, [r3, #4]
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	68db      	ldr	r3, [r3, #12]
 800a64e:	461a      	mov	r2, r3
 800a650:	f000 fad9 	bl	800ac06 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	2160      	movs	r1, #96	; 0x60
 800a65a:	4618      	mov	r0, r3
 800a65c:	f000 fb03 	bl	800ac66 <TIM_ITRx_SetConfig>
      break;
 800a660:	e01c      	b.n	800a69c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6818      	ldr	r0, [r3, #0]
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	6859      	ldr	r1, [r3, #4]
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	68db      	ldr	r3, [r3, #12]
 800a66e:	461a      	mov	r2, r3
 800a670:	f000 fa9a 	bl	800aba8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	2140      	movs	r1, #64	; 0x40
 800a67a:	4618      	mov	r0, r3
 800a67c:	f000 faf3 	bl	800ac66 <TIM_ITRx_SetConfig>
      break;
 800a680:	e00c      	b.n	800a69c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681a      	ldr	r2, [r3, #0]
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	4619      	mov	r1, r3
 800a68c:	4610      	mov	r0, r2
 800a68e:	f000 faea 	bl	800ac66 <TIM_ITRx_SetConfig>
      break;
 800a692:	e003      	b.n	800a69c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a694:	2301      	movs	r3, #1
 800a696:	73fb      	strb	r3, [r7, #15]
      break;
 800a698:	e000      	b.n	800a69c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a69a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2201      	movs	r2, #1
 800a6a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a6ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3710      	adds	r7, #16
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}

0800a6b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a6b6:	b480      	push	{r7}
 800a6b8:	b083      	sub	sp, #12
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a6be:	bf00      	nop
 800a6c0:	370c      	adds	r7, #12
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c8:	4770      	bx	lr

0800a6ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a6ca:	b480      	push	{r7}
 800a6cc:	b083      	sub	sp, #12
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a6d2:	bf00      	nop
 800a6d4:	370c      	adds	r7, #12
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6dc:	4770      	bx	lr

0800a6de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a6de:	b480      	push	{r7}
 800a6e0:	b083      	sub	sp, #12
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a6e6:	bf00      	nop
 800a6e8:	370c      	adds	r7, #12
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f0:	4770      	bx	lr

0800a6f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a6f2:	b480      	push	{r7}
 800a6f4:	b083      	sub	sp, #12
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a6fa:	bf00      	nop
 800a6fc:	370c      	adds	r7, #12
 800a6fe:	46bd      	mov	sp, r7
 800a700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a704:	4770      	bx	lr
	...

0800a708 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a708:	b480      	push	{r7}
 800a70a:	b085      	sub	sp, #20
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
 800a710:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	4a40      	ldr	r2, [pc, #256]	; (800a81c <TIM_Base_SetConfig+0x114>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d013      	beq.n	800a748 <TIM_Base_SetConfig+0x40>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a726:	d00f      	beq.n	800a748 <TIM_Base_SetConfig+0x40>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	4a3d      	ldr	r2, [pc, #244]	; (800a820 <TIM_Base_SetConfig+0x118>)
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d00b      	beq.n	800a748 <TIM_Base_SetConfig+0x40>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	4a3c      	ldr	r2, [pc, #240]	; (800a824 <TIM_Base_SetConfig+0x11c>)
 800a734:	4293      	cmp	r3, r2
 800a736:	d007      	beq.n	800a748 <TIM_Base_SetConfig+0x40>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	4a3b      	ldr	r2, [pc, #236]	; (800a828 <TIM_Base_SetConfig+0x120>)
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d003      	beq.n	800a748 <TIM_Base_SetConfig+0x40>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	4a3a      	ldr	r2, [pc, #232]	; (800a82c <TIM_Base_SetConfig+0x124>)
 800a744:	4293      	cmp	r3, r2
 800a746:	d108      	bne.n	800a75a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a74e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	685b      	ldr	r3, [r3, #4]
 800a754:	68fa      	ldr	r2, [r7, #12]
 800a756:	4313      	orrs	r3, r2
 800a758:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	4a2f      	ldr	r2, [pc, #188]	; (800a81c <TIM_Base_SetConfig+0x114>)
 800a75e:	4293      	cmp	r3, r2
 800a760:	d02b      	beq.n	800a7ba <TIM_Base_SetConfig+0xb2>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a768:	d027      	beq.n	800a7ba <TIM_Base_SetConfig+0xb2>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	4a2c      	ldr	r2, [pc, #176]	; (800a820 <TIM_Base_SetConfig+0x118>)
 800a76e:	4293      	cmp	r3, r2
 800a770:	d023      	beq.n	800a7ba <TIM_Base_SetConfig+0xb2>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	4a2b      	ldr	r2, [pc, #172]	; (800a824 <TIM_Base_SetConfig+0x11c>)
 800a776:	4293      	cmp	r3, r2
 800a778:	d01f      	beq.n	800a7ba <TIM_Base_SetConfig+0xb2>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	4a2a      	ldr	r2, [pc, #168]	; (800a828 <TIM_Base_SetConfig+0x120>)
 800a77e:	4293      	cmp	r3, r2
 800a780:	d01b      	beq.n	800a7ba <TIM_Base_SetConfig+0xb2>
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	4a29      	ldr	r2, [pc, #164]	; (800a82c <TIM_Base_SetConfig+0x124>)
 800a786:	4293      	cmp	r3, r2
 800a788:	d017      	beq.n	800a7ba <TIM_Base_SetConfig+0xb2>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	4a28      	ldr	r2, [pc, #160]	; (800a830 <TIM_Base_SetConfig+0x128>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d013      	beq.n	800a7ba <TIM_Base_SetConfig+0xb2>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	4a27      	ldr	r2, [pc, #156]	; (800a834 <TIM_Base_SetConfig+0x12c>)
 800a796:	4293      	cmp	r3, r2
 800a798:	d00f      	beq.n	800a7ba <TIM_Base_SetConfig+0xb2>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	4a26      	ldr	r2, [pc, #152]	; (800a838 <TIM_Base_SetConfig+0x130>)
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d00b      	beq.n	800a7ba <TIM_Base_SetConfig+0xb2>
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	4a25      	ldr	r2, [pc, #148]	; (800a83c <TIM_Base_SetConfig+0x134>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d007      	beq.n	800a7ba <TIM_Base_SetConfig+0xb2>
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	4a24      	ldr	r2, [pc, #144]	; (800a840 <TIM_Base_SetConfig+0x138>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d003      	beq.n	800a7ba <TIM_Base_SetConfig+0xb2>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	4a23      	ldr	r2, [pc, #140]	; (800a844 <TIM_Base_SetConfig+0x13c>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d108      	bne.n	800a7cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	68db      	ldr	r3, [r3, #12]
 800a7c6:	68fa      	ldr	r2, [r7, #12]
 800a7c8:	4313      	orrs	r3, r2
 800a7ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	695b      	ldr	r3, [r3, #20]
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	68fa      	ldr	r2, [r7, #12]
 800a7de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	689a      	ldr	r2, [r3, #8]
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	681a      	ldr	r2, [r3, #0]
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	4a0a      	ldr	r2, [pc, #40]	; (800a81c <TIM_Base_SetConfig+0x114>)
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	d003      	beq.n	800a800 <TIM_Base_SetConfig+0xf8>
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	4a0c      	ldr	r2, [pc, #48]	; (800a82c <TIM_Base_SetConfig+0x124>)
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	d103      	bne.n	800a808 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	691a      	ldr	r2, [r3, #16]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2201      	movs	r2, #1
 800a80c:	615a      	str	r2, [r3, #20]
}
 800a80e:	bf00      	nop
 800a810:	3714      	adds	r7, #20
 800a812:	46bd      	mov	sp, r7
 800a814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a818:	4770      	bx	lr
 800a81a:	bf00      	nop
 800a81c:	40010000 	.word	0x40010000
 800a820:	40000400 	.word	0x40000400
 800a824:	40000800 	.word	0x40000800
 800a828:	40000c00 	.word	0x40000c00
 800a82c:	40010400 	.word	0x40010400
 800a830:	40014000 	.word	0x40014000
 800a834:	40014400 	.word	0x40014400
 800a838:	40014800 	.word	0x40014800
 800a83c:	40001800 	.word	0x40001800
 800a840:	40001c00 	.word	0x40001c00
 800a844:	40002000 	.word	0x40002000

0800a848 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a848:	b480      	push	{r7}
 800a84a:	b087      	sub	sp, #28
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
 800a850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6a1b      	ldr	r3, [r3, #32]
 800a856:	f023 0201 	bic.w	r2, r3, #1
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6a1b      	ldr	r3, [r3, #32]
 800a862:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	685b      	ldr	r3, [r3, #4]
 800a868:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	699b      	ldr	r3, [r3, #24]
 800a86e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	f023 0303 	bic.w	r3, r3, #3
 800a87e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	68fa      	ldr	r2, [r7, #12]
 800a886:	4313      	orrs	r3, r2
 800a888:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a88a:	697b      	ldr	r3, [r7, #20]
 800a88c:	f023 0302 	bic.w	r3, r3, #2
 800a890:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	689b      	ldr	r3, [r3, #8]
 800a896:	697a      	ldr	r2, [r7, #20]
 800a898:	4313      	orrs	r3, r2
 800a89a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	4a20      	ldr	r2, [pc, #128]	; (800a920 <TIM_OC1_SetConfig+0xd8>)
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d003      	beq.n	800a8ac <TIM_OC1_SetConfig+0x64>
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	4a1f      	ldr	r2, [pc, #124]	; (800a924 <TIM_OC1_SetConfig+0xdc>)
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d10c      	bne.n	800a8c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	f023 0308 	bic.w	r3, r3, #8
 800a8b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	68db      	ldr	r3, [r3, #12]
 800a8b8:	697a      	ldr	r2, [r7, #20]
 800a8ba:	4313      	orrs	r3, r2
 800a8bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	f023 0304 	bic.w	r3, r3, #4
 800a8c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	4a15      	ldr	r2, [pc, #84]	; (800a920 <TIM_OC1_SetConfig+0xd8>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d003      	beq.n	800a8d6 <TIM_OC1_SetConfig+0x8e>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	4a14      	ldr	r2, [pc, #80]	; (800a924 <TIM_OC1_SetConfig+0xdc>)
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d111      	bne.n	800a8fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a8dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a8e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	695b      	ldr	r3, [r3, #20]
 800a8ea:	693a      	ldr	r2, [r7, #16]
 800a8ec:	4313      	orrs	r3, r2
 800a8ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	699b      	ldr	r3, [r3, #24]
 800a8f4:	693a      	ldr	r2, [r7, #16]
 800a8f6:	4313      	orrs	r3, r2
 800a8f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	693a      	ldr	r2, [r7, #16]
 800a8fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	68fa      	ldr	r2, [r7, #12]
 800a904:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	685a      	ldr	r2, [r3, #4]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	697a      	ldr	r2, [r7, #20]
 800a912:	621a      	str	r2, [r3, #32]
}
 800a914:	bf00      	nop
 800a916:	371c      	adds	r7, #28
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr
 800a920:	40010000 	.word	0x40010000
 800a924:	40010400 	.word	0x40010400

0800a928 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a928:	b480      	push	{r7}
 800a92a:	b087      	sub	sp, #28
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
 800a930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6a1b      	ldr	r3, [r3, #32]
 800a936:	f023 0210 	bic.w	r2, r3, #16
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6a1b      	ldr	r3, [r3, #32]
 800a942:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	685b      	ldr	r3, [r3, #4]
 800a948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	699b      	ldr	r3, [r3, #24]
 800a94e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a95e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	021b      	lsls	r3, r3, #8
 800a966:	68fa      	ldr	r2, [r7, #12]
 800a968:	4313      	orrs	r3, r2
 800a96a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	f023 0320 	bic.w	r3, r3, #32
 800a972:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	689b      	ldr	r3, [r3, #8]
 800a978:	011b      	lsls	r3, r3, #4
 800a97a:	697a      	ldr	r2, [r7, #20]
 800a97c:	4313      	orrs	r3, r2
 800a97e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	4a22      	ldr	r2, [pc, #136]	; (800aa0c <TIM_OC2_SetConfig+0xe4>)
 800a984:	4293      	cmp	r3, r2
 800a986:	d003      	beq.n	800a990 <TIM_OC2_SetConfig+0x68>
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	4a21      	ldr	r2, [pc, #132]	; (800aa10 <TIM_OC2_SetConfig+0xe8>)
 800a98c:	4293      	cmp	r3, r2
 800a98e:	d10d      	bne.n	800a9ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a990:	697b      	ldr	r3, [r7, #20]
 800a992:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a996:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	68db      	ldr	r3, [r3, #12]
 800a99c:	011b      	lsls	r3, r3, #4
 800a99e:	697a      	ldr	r2, [r7, #20]
 800a9a0:	4313      	orrs	r3, r2
 800a9a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a9a4:	697b      	ldr	r3, [r7, #20]
 800a9a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	4a17      	ldr	r2, [pc, #92]	; (800aa0c <TIM_OC2_SetConfig+0xe4>)
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d003      	beq.n	800a9bc <TIM_OC2_SetConfig+0x94>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	4a16      	ldr	r2, [pc, #88]	; (800aa10 <TIM_OC2_SetConfig+0xe8>)
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	d113      	bne.n	800a9e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a9bc:	693b      	ldr	r3, [r7, #16]
 800a9be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a9c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a9ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	695b      	ldr	r3, [r3, #20]
 800a9d0:	009b      	lsls	r3, r3, #2
 800a9d2:	693a      	ldr	r2, [r7, #16]
 800a9d4:	4313      	orrs	r3, r2
 800a9d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	699b      	ldr	r3, [r3, #24]
 800a9dc:	009b      	lsls	r3, r3, #2
 800a9de:	693a      	ldr	r2, [r7, #16]
 800a9e0:	4313      	orrs	r3, r2
 800a9e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	693a      	ldr	r2, [r7, #16]
 800a9e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	68fa      	ldr	r2, [r7, #12]
 800a9ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	685a      	ldr	r2, [r3, #4]
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	697a      	ldr	r2, [r7, #20]
 800a9fc:	621a      	str	r2, [r3, #32]
}
 800a9fe:	bf00      	nop
 800aa00:	371c      	adds	r7, #28
 800aa02:	46bd      	mov	sp, r7
 800aa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa08:	4770      	bx	lr
 800aa0a:	bf00      	nop
 800aa0c:	40010000 	.word	0x40010000
 800aa10:	40010400 	.word	0x40010400

0800aa14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aa14:	b480      	push	{r7}
 800aa16:	b087      	sub	sp, #28
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6a1b      	ldr	r3, [r3, #32]
 800aa22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6a1b      	ldr	r3, [r3, #32]
 800aa2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	685b      	ldr	r3, [r3, #4]
 800aa34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	69db      	ldr	r3, [r3, #28]
 800aa3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	f023 0303 	bic.w	r3, r3, #3
 800aa4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	68fa      	ldr	r2, [r7, #12]
 800aa52:	4313      	orrs	r3, r2
 800aa54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aa5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	689b      	ldr	r3, [r3, #8]
 800aa62:	021b      	lsls	r3, r3, #8
 800aa64:	697a      	ldr	r2, [r7, #20]
 800aa66:	4313      	orrs	r3, r2
 800aa68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	4a21      	ldr	r2, [pc, #132]	; (800aaf4 <TIM_OC3_SetConfig+0xe0>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d003      	beq.n	800aa7a <TIM_OC3_SetConfig+0x66>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	4a20      	ldr	r2, [pc, #128]	; (800aaf8 <TIM_OC3_SetConfig+0xe4>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d10d      	bne.n	800aa96 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aa80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	68db      	ldr	r3, [r3, #12]
 800aa86:	021b      	lsls	r3, r3, #8
 800aa88:	697a      	ldr	r2, [r7, #20]
 800aa8a:	4313      	orrs	r3, r2
 800aa8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aa94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	4a16      	ldr	r2, [pc, #88]	; (800aaf4 <TIM_OC3_SetConfig+0xe0>)
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d003      	beq.n	800aaa6 <TIM_OC3_SetConfig+0x92>
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	4a15      	ldr	r2, [pc, #84]	; (800aaf8 <TIM_OC3_SetConfig+0xe4>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d113      	bne.n	800aace <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aaac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aab4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	695b      	ldr	r3, [r3, #20]
 800aaba:	011b      	lsls	r3, r3, #4
 800aabc:	693a      	ldr	r2, [r7, #16]
 800aabe:	4313      	orrs	r3, r2
 800aac0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	699b      	ldr	r3, [r3, #24]
 800aac6:	011b      	lsls	r3, r3, #4
 800aac8:	693a      	ldr	r2, [r7, #16]
 800aaca:	4313      	orrs	r3, r2
 800aacc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	693a      	ldr	r2, [r7, #16]
 800aad2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	68fa      	ldr	r2, [r7, #12]
 800aad8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	685a      	ldr	r2, [r3, #4]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	697a      	ldr	r2, [r7, #20]
 800aae6:	621a      	str	r2, [r3, #32]
}
 800aae8:	bf00      	nop
 800aaea:	371c      	adds	r7, #28
 800aaec:	46bd      	mov	sp, r7
 800aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf2:	4770      	bx	lr
 800aaf4:	40010000 	.word	0x40010000
 800aaf8:	40010400 	.word	0x40010400

0800aafc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b087      	sub	sp, #28
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
 800ab04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6a1b      	ldr	r3, [r3, #32]
 800ab0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6a1b      	ldr	r3, [r3, #32]
 800ab16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	685b      	ldr	r3, [r3, #4]
 800ab1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	69db      	ldr	r3, [r3, #28]
 800ab22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	021b      	lsls	r3, r3, #8
 800ab3a:	68fa      	ldr	r2, [r7, #12]
 800ab3c:	4313      	orrs	r3, r2
 800ab3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ab46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	689b      	ldr	r3, [r3, #8]
 800ab4c:	031b      	lsls	r3, r3, #12
 800ab4e:	693a      	ldr	r2, [r7, #16]
 800ab50:	4313      	orrs	r3, r2
 800ab52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	4a12      	ldr	r2, [pc, #72]	; (800aba0 <TIM_OC4_SetConfig+0xa4>)
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d003      	beq.n	800ab64 <TIM_OC4_SetConfig+0x68>
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	4a11      	ldr	r2, [pc, #68]	; (800aba4 <TIM_OC4_SetConfig+0xa8>)
 800ab60:	4293      	cmp	r3, r2
 800ab62:	d109      	bne.n	800ab78 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ab64:	697b      	ldr	r3, [r7, #20]
 800ab66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ab6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	695b      	ldr	r3, [r3, #20]
 800ab70:	019b      	lsls	r3, r3, #6
 800ab72:	697a      	ldr	r2, [r7, #20]
 800ab74:	4313      	orrs	r3, r2
 800ab76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	697a      	ldr	r2, [r7, #20]
 800ab7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	68fa      	ldr	r2, [r7, #12]
 800ab82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	685a      	ldr	r2, [r3, #4]
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	693a      	ldr	r2, [r7, #16]
 800ab90:	621a      	str	r2, [r3, #32]
}
 800ab92:	bf00      	nop
 800ab94:	371c      	adds	r7, #28
 800ab96:	46bd      	mov	sp, r7
 800ab98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9c:	4770      	bx	lr
 800ab9e:	bf00      	nop
 800aba0:	40010000 	.word	0x40010000
 800aba4:	40010400 	.word	0x40010400

0800aba8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b087      	sub	sp, #28
 800abac:	af00      	add	r7, sp, #0
 800abae:	60f8      	str	r0, [r7, #12]
 800abb0:	60b9      	str	r1, [r7, #8]
 800abb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	6a1b      	ldr	r3, [r3, #32]
 800abb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	6a1b      	ldr	r3, [r3, #32]
 800abbe:	f023 0201 	bic.w	r2, r3, #1
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	699b      	ldr	r3, [r3, #24]
 800abca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800abd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	011b      	lsls	r3, r3, #4
 800abd8:	693a      	ldr	r2, [r7, #16]
 800abda:	4313      	orrs	r3, r2
 800abdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	f023 030a 	bic.w	r3, r3, #10
 800abe4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800abe6:	697a      	ldr	r2, [r7, #20]
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	4313      	orrs	r3, r2
 800abec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	693a      	ldr	r2, [r7, #16]
 800abf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	697a      	ldr	r2, [r7, #20]
 800abf8:	621a      	str	r2, [r3, #32]
}
 800abfa:	bf00      	nop
 800abfc:	371c      	adds	r7, #28
 800abfe:	46bd      	mov	sp, r7
 800ac00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac04:	4770      	bx	lr

0800ac06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac06:	b480      	push	{r7}
 800ac08:	b087      	sub	sp, #28
 800ac0a:	af00      	add	r7, sp, #0
 800ac0c:	60f8      	str	r0, [r7, #12]
 800ac0e:	60b9      	str	r1, [r7, #8]
 800ac10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	6a1b      	ldr	r3, [r3, #32]
 800ac16:	f023 0210 	bic.w	r2, r3, #16
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	699b      	ldr	r3, [r3, #24]
 800ac22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	6a1b      	ldr	r3, [r3, #32]
 800ac28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ac30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	031b      	lsls	r3, r3, #12
 800ac36:	697a      	ldr	r2, [r7, #20]
 800ac38:	4313      	orrs	r3, r2
 800ac3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ac42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	011b      	lsls	r3, r3, #4
 800ac48:	693a      	ldr	r2, [r7, #16]
 800ac4a:	4313      	orrs	r3, r2
 800ac4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	697a      	ldr	r2, [r7, #20]
 800ac52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	693a      	ldr	r2, [r7, #16]
 800ac58:	621a      	str	r2, [r3, #32]
}
 800ac5a:	bf00      	nop
 800ac5c:	371c      	adds	r7, #28
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac64:	4770      	bx	lr

0800ac66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ac66:	b480      	push	{r7}
 800ac68:	b085      	sub	sp, #20
 800ac6a:	af00      	add	r7, sp, #0
 800ac6c:	6078      	str	r0, [r7, #4]
 800ac6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	689b      	ldr	r3, [r3, #8]
 800ac74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ac7e:	683a      	ldr	r2, [r7, #0]
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	4313      	orrs	r3, r2
 800ac84:	f043 0307 	orr.w	r3, r3, #7
 800ac88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	68fa      	ldr	r2, [r7, #12]
 800ac8e:	609a      	str	r2, [r3, #8]
}
 800ac90:	bf00      	nop
 800ac92:	3714      	adds	r7, #20
 800ac94:	46bd      	mov	sp, r7
 800ac96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9a:	4770      	bx	lr

0800ac9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b087      	sub	sp, #28
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	60f8      	str	r0, [r7, #12]
 800aca4:	60b9      	str	r1, [r7, #8]
 800aca6:	607a      	str	r2, [r7, #4]
 800aca8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	689b      	ldr	r3, [r3, #8]
 800acae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800acb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	021a      	lsls	r2, r3, #8
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	431a      	orrs	r2, r3
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	4313      	orrs	r3, r2
 800acc4:	697a      	ldr	r2, [r7, #20]
 800acc6:	4313      	orrs	r3, r2
 800acc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	697a      	ldr	r2, [r7, #20]
 800acce:	609a      	str	r2, [r3, #8]
}
 800acd0:	bf00      	nop
 800acd2:	371c      	adds	r7, #28
 800acd4:	46bd      	mov	sp, r7
 800acd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acda:	4770      	bx	lr

0800acdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800acdc:	b480      	push	{r7}
 800acde:	b085      	sub	sp, #20
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
 800ace4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800acec:	2b01      	cmp	r3, #1
 800acee:	d101      	bne.n	800acf4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800acf0:	2302      	movs	r3, #2
 800acf2:	e05a      	b.n	800adaa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2201      	movs	r2, #1
 800acf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2202      	movs	r2, #2
 800ad00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	685b      	ldr	r3, [r3, #4]
 800ad0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	689b      	ldr	r3, [r3, #8]
 800ad12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	68fa      	ldr	r2, [r7, #12]
 800ad22:	4313      	orrs	r3, r2
 800ad24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	68fa      	ldr	r2, [r7, #12]
 800ad2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	4a21      	ldr	r2, [pc, #132]	; (800adb8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d022      	beq.n	800ad7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad40:	d01d      	beq.n	800ad7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	4a1d      	ldr	r2, [pc, #116]	; (800adbc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ad48:	4293      	cmp	r3, r2
 800ad4a:	d018      	beq.n	800ad7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	4a1b      	ldr	r2, [pc, #108]	; (800adc0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d013      	beq.n	800ad7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4a1a      	ldr	r2, [pc, #104]	; (800adc4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d00e      	beq.n	800ad7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	4a18      	ldr	r2, [pc, #96]	; (800adc8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ad66:	4293      	cmp	r3, r2
 800ad68:	d009      	beq.n	800ad7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	4a17      	ldr	r2, [pc, #92]	; (800adcc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d004      	beq.n	800ad7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4a15      	ldr	r2, [pc, #84]	; (800add0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d10c      	bne.n	800ad98 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	685b      	ldr	r3, [r3, #4]
 800ad8a:	68ba      	ldr	r2, [r7, #8]
 800ad8c:	4313      	orrs	r3, r2
 800ad8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	68ba      	ldr	r2, [r7, #8]
 800ad96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2200      	movs	r2, #0
 800ada4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ada8:	2300      	movs	r3, #0
}
 800adaa:	4618      	mov	r0, r3
 800adac:	3714      	adds	r7, #20
 800adae:	46bd      	mov	sp, r7
 800adb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb4:	4770      	bx	lr
 800adb6:	bf00      	nop
 800adb8:	40010000 	.word	0x40010000
 800adbc:	40000400 	.word	0x40000400
 800adc0:	40000800 	.word	0x40000800
 800adc4:	40000c00 	.word	0x40000c00
 800adc8:	40010400 	.word	0x40010400
 800adcc:	40014000 	.word	0x40014000
 800add0:	40001800 	.word	0x40001800

0800add4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800add4:	b480      	push	{r7}
 800add6:	b083      	sub	sp, #12
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800addc:	bf00      	nop
 800adde:	370c      	adds	r7, #12
 800ade0:	46bd      	mov	sp, r7
 800ade2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade6:	4770      	bx	lr

0800ade8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ade8:	b480      	push	{r7}
 800adea:	b083      	sub	sp, #12
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800adf0:	bf00      	nop
 800adf2:	370c      	adds	r7, #12
 800adf4:	46bd      	mov	sp, r7
 800adf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfa:	4770      	bx	lr

0800adfc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b082      	sub	sp, #8
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d101      	bne.n	800ae0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	e03f      	b.n	800ae8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae14:	b2db      	uxtb	r3, r3
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d106      	bne.n	800ae28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f7f7 fbaa 	bl	800257c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2224      	movs	r2, #36	; 0x24
 800ae2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	68da      	ldr	r2, [r3, #12]
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ae3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f000 f929 	bl	800b098 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	691a      	ldr	r2, [r3, #16]
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ae54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	695a      	ldr	r2, [r3, #20]
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ae64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	68da      	ldr	r2, [r3, #12]
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ae74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2220      	movs	r2, #32
 800ae80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2220      	movs	r2, #32
 800ae88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ae8c:	2300      	movs	r3, #0
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3708      	adds	r7, #8
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}

0800ae96 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ae96:	b580      	push	{r7, lr}
 800ae98:	b08a      	sub	sp, #40	; 0x28
 800ae9a:	af02      	add	r7, sp, #8
 800ae9c:	60f8      	str	r0, [r7, #12]
 800ae9e:	60b9      	str	r1, [r7, #8]
 800aea0:	603b      	str	r3, [r7, #0]
 800aea2:	4613      	mov	r3, r2
 800aea4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800aea6:	2300      	movs	r3, #0
 800aea8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aeb0:	b2db      	uxtb	r3, r3
 800aeb2:	2b20      	cmp	r3, #32
 800aeb4:	d17c      	bne.n	800afb0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d002      	beq.n	800aec2 <HAL_UART_Transmit+0x2c>
 800aebc:	88fb      	ldrh	r3, [r7, #6]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d101      	bne.n	800aec6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800aec2:	2301      	movs	r3, #1
 800aec4:	e075      	b.n	800afb2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aecc:	2b01      	cmp	r3, #1
 800aece:	d101      	bne.n	800aed4 <HAL_UART_Transmit+0x3e>
 800aed0:	2302      	movs	r3, #2
 800aed2:	e06e      	b.n	800afb2 <HAL_UART_Transmit+0x11c>
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	2201      	movs	r2, #1
 800aed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	2200      	movs	r2, #0
 800aee0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	2221      	movs	r2, #33	; 0x21
 800aee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800aeea:	f7fa f9bd 	bl	8005268 <HAL_GetTick>
 800aeee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	88fa      	ldrh	r2, [r7, #6]
 800aef4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	88fa      	ldrh	r2, [r7, #6]
 800aefa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	689b      	ldr	r3, [r3, #8]
 800af00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af04:	d108      	bne.n	800af18 <HAL_UART_Transmit+0x82>
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	691b      	ldr	r3, [r3, #16]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d104      	bne.n	800af18 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800af0e:	2300      	movs	r3, #0
 800af10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	61bb      	str	r3, [r7, #24]
 800af16:	e003      	b.n	800af20 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800af1c:	2300      	movs	r3, #0
 800af1e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	2200      	movs	r2, #0
 800af24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800af28:	e02a      	b.n	800af80 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	9300      	str	r3, [sp, #0]
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	2200      	movs	r2, #0
 800af32:	2180      	movs	r1, #128	; 0x80
 800af34:	68f8      	ldr	r0, [r7, #12]
 800af36:	f000 f840 	bl	800afba <UART_WaitOnFlagUntilTimeout>
 800af3a:	4603      	mov	r3, r0
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d001      	beq.n	800af44 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800af40:	2303      	movs	r3, #3
 800af42:	e036      	b.n	800afb2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800af44:	69fb      	ldr	r3, [r7, #28]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d10b      	bne.n	800af62 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800af4a:	69bb      	ldr	r3, [r7, #24]
 800af4c:	881b      	ldrh	r3, [r3, #0]
 800af4e:	461a      	mov	r2, r3
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800af58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800af5a:	69bb      	ldr	r3, [r7, #24]
 800af5c:	3302      	adds	r3, #2
 800af5e:	61bb      	str	r3, [r7, #24]
 800af60:	e007      	b.n	800af72 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800af62:	69fb      	ldr	r3, [r7, #28]
 800af64:	781a      	ldrb	r2, [r3, #0]
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800af6c:	69fb      	ldr	r3, [r7, #28]
 800af6e:	3301      	adds	r3, #1
 800af70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800af76:	b29b      	uxth	r3, r3
 800af78:	3b01      	subs	r3, #1
 800af7a:	b29a      	uxth	r2, r3
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800af84:	b29b      	uxth	r3, r3
 800af86:	2b00      	cmp	r3, #0
 800af88:	d1cf      	bne.n	800af2a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	9300      	str	r3, [sp, #0]
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	2200      	movs	r2, #0
 800af92:	2140      	movs	r1, #64	; 0x40
 800af94:	68f8      	ldr	r0, [r7, #12]
 800af96:	f000 f810 	bl	800afba <UART_WaitOnFlagUntilTimeout>
 800af9a:	4603      	mov	r3, r0
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d001      	beq.n	800afa4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800afa0:	2303      	movs	r3, #3
 800afa2:	e006      	b.n	800afb2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2220      	movs	r2, #32
 800afa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800afac:	2300      	movs	r3, #0
 800afae:	e000      	b.n	800afb2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800afb0:	2302      	movs	r3, #2
  }
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	3720      	adds	r7, #32
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}

0800afba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800afba:	b580      	push	{r7, lr}
 800afbc:	b090      	sub	sp, #64	; 0x40
 800afbe:	af00      	add	r7, sp, #0
 800afc0:	60f8      	str	r0, [r7, #12]
 800afc2:	60b9      	str	r1, [r7, #8]
 800afc4:	603b      	str	r3, [r7, #0]
 800afc6:	4613      	mov	r3, r2
 800afc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800afca:	e050      	b.n	800b06e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800afcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800afce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afd2:	d04c      	beq.n	800b06e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800afd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d007      	beq.n	800afea <UART_WaitOnFlagUntilTimeout+0x30>
 800afda:	f7fa f945 	bl	8005268 <HAL_GetTick>
 800afde:	4602      	mov	r2, r0
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	1ad3      	subs	r3, r2, r3
 800afe4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800afe6:	429a      	cmp	r2, r3
 800afe8:	d241      	bcs.n	800b06e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	330c      	adds	r3, #12
 800aff0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff4:	e853 3f00 	ldrex	r3, [r3]
 800aff8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800affa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800affc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b000:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	330c      	adds	r3, #12
 800b008:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b00a:	637a      	str	r2, [r7, #52]	; 0x34
 800b00c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b00e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b010:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b012:	e841 2300 	strex	r3, r2, [r1]
 800b016:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d1e5      	bne.n	800afea <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	3314      	adds	r3, #20
 800b024:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b026:	697b      	ldr	r3, [r7, #20]
 800b028:	e853 3f00 	ldrex	r3, [r3]
 800b02c:	613b      	str	r3, [r7, #16]
   return(result);
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	f023 0301 	bic.w	r3, r3, #1
 800b034:	63bb      	str	r3, [r7, #56]	; 0x38
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	3314      	adds	r3, #20
 800b03c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b03e:	623a      	str	r2, [r7, #32]
 800b040:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b042:	69f9      	ldr	r1, [r7, #28]
 800b044:	6a3a      	ldr	r2, [r7, #32]
 800b046:	e841 2300 	strex	r3, r2, [r1]
 800b04a:	61bb      	str	r3, [r7, #24]
   return(result);
 800b04c:	69bb      	ldr	r3, [r7, #24]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d1e5      	bne.n	800b01e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	2220      	movs	r2, #32
 800b056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	2220      	movs	r2, #32
 800b05e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	2200      	movs	r2, #0
 800b066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b06a:	2303      	movs	r3, #3
 800b06c:	e00f      	b.n	800b08e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	681a      	ldr	r2, [r3, #0]
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	4013      	ands	r3, r2
 800b078:	68ba      	ldr	r2, [r7, #8]
 800b07a:	429a      	cmp	r2, r3
 800b07c:	bf0c      	ite	eq
 800b07e:	2301      	moveq	r3, #1
 800b080:	2300      	movne	r3, #0
 800b082:	b2db      	uxtb	r3, r3
 800b084:	461a      	mov	r2, r3
 800b086:	79fb      	ldrb	r3, [r7, #7]
 800b088:	429a      	cmp	r2, r3
 800b08a:	d09f      	beq.n	800afcc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b08c:	2300      	movs	r3, #0
}
 800b08e:	4618      	mov	r0, r3
 800b090:	3740      	adds	r7, #64	; 0x40
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}
	...

0800b098 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b09c:	b09f      	sub	sp, #124	; 0x7c
 800b09e:	af00      	add	r7, sp, #0
 800b0a0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b0a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	691b      	ldr	r3, [r3, #16]
 800b0a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b0ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0ae:	68d9      	ldr	r1, [r3, #12]
 800b0b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0b2:	681a      	ldr	r2, [r3, #0]
 800b0b4:	ea40 0301 	orr.w	r3, r0, r1
 800b0b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b0ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0bc:	689a      	ldr	r2, [r3, #8]
 800b0be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0c0:	691b      	ldr	r3, [r3, #16]
 800b0c2:	431a      	orrs	r2, r3
 800b0c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0c6:	695b      	ldr	r3, [r3, #20]
 800b0c8:	431a      	orrs	r2, r3
 800b0ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0cc:	69db      	ldr	r3, [r3, #28]
 800b0ce:	4313      	orrs	r3, r2
 800b0d0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800b0d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	68db      	ldr	r3, [r3, #12]
 800b0d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b0dc:	f021 010c 	bic.w	r1, r1, #12
 800b0e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0e2:	681a      	ldr	r2, [r3, #0]
 800b0e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b0e6:	430b      	orrs	r3, r1
 800b0e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b0ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	695b      	ldr	r3, [r3, #20]
 800b0f0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b0f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0f6:	6999      	ldr	r1, [r3, #24]
 800b0f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0fa:	681a      	ldr	r2, [r3, #0]
 800b0fc:	ea40 0301 	orr.w	r3, r0, r1
 800b100:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b102:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b104:	681a      	ldr	r2, [r3, #0]
 800b106:	4bc5      	ldr	r3, [pc, #788]	; (800b41c <UART_SetConfig+0x384>)
 800b108:	429a      	cmp	r2, r3
 800b10a:	d004      	beq.n	800b116 <UART_SetConfig+0x7e>
 800b10c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b10e:	681a      	ldr	r2, [r3, #0]
 800b110:	4bc3      	ldr	r3, [pc, #780]	; (800b420 <UART_SetConfig+0x388>)
 800b112:	429a      	cmp	r2, r3
 800b114:	d103      	bne.n	800b11e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b116:	f7fd fa65 	bl	80085e4 <HAL_RCC_GetPCLK2Freq>
 800b11a:	6778      	str	r0, [r7, #116]	; 0x74
 800b11c:	e002      	b.n	800b124 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b11e:	f7fd fa4d 	bl	80085bc <HAL_RCC_GetPCLK1Freq>
 800b122:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b124:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b126:	69db      	ldr	r3, [r3, #28]
 800b128:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b12c:	f040 80b6 	bne.w	800b29c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b130:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b132:	461c      	mov	r4, r3
 800b134:	f04f 0500 	mov.w	r5, #0
 800b138:	4622      	mov	r2, r4
 800b13a:	462b      	mov	r3, r5
 800b13c:	1891      	adds	r1, r2, r2
 800b13e:	6439      	str	r1, [r7, #64]	; 0x40
 800b140:	415b      	adcs	r3, r3
 800b142:	647b      	str	r3, [r7, #68]	; 0x44
 800b144:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b148:	1912      	adds	r2, r2, r4
 800b14a:	eb45 0303 	adc.w	r3, r5, r3
 800b14e:	f04f 0000 	mov.w	r0, #0
 800b152:	f04f 0100 	mov.w	r1, #0
 800b156:	00d9      	lsls	r1, r3, #3
 800b158:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b15c:	00d0      	lsls	r0, r2, #3
 800b15e:	4602      	mov	r2, r0
 800b160:	460b      	mov	r3, r1
 800b162:	1911      	adds	r1, r2, r4
 800b164:	6639      	str	r1, [r7, #96]	; 0x60
 800b166:	416b      	adcs	r3, r5
 800b168:	667b      	str	r3, [r7, #100]	; 0x64
 800b16a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b16c:	685b      	ldr	r3, [r3, #4]
 800b16e:	461a      	mov	r2, r3
 800b170:	f04f 0300 	mov.w	r3, #0
 800b174:	1891      	adds	r1, r2, r2
 800b176:	63b9      	str	r1, [r7, #56]	; 0x38
 800b178:	415b      	adcs	r3, r3
 800b17a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b17c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b180:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800b184:	f7f5 fd90 	bl	8000ca8 <__aeabi_uldivmod>
 800b188:	4602      	mov	r2, r0
 800b18a:	460b      	mov	r3, r1
 800b18c:	4ba5      	ldr	r3, [pc, #660]	; (800b424 <UART_SetConfig+0x38c>)
 800b18e:	fba3 2302 	umull	r2, r3, r3, r2
 800b192:	095b      	lsrs	r3, r3, #5
 800b194:	011e      	lsls	r6, r3, #4
 800b196:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b198:	461c      	mov	r4, r3
 800b19a:	f04f 0500 	mov.w	r5, #0
 800b19e:	4622      	mov	r2, r4
 800b1a0:	462b      	mov	r3, r5
 800b1a2:	1891      	adds	r1, r2, r2
 800b1a4:	6339      	str	r1, [r7, #48]	; 0x30
 800b1a6:	415b      	adcs	r3, r3
 800b1a8:	637b      	str	r3, [r7, #52]	; 0x34
 800b1aa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800b1ae:	1912      	adds	r2, r2, r4
 800b1b0:	eb45 0303 	adc.w	r3, r5, r3
 800b1b4:	f04f 0000 	mov.w	r0, #0
 800b1b8:	f04f 0100 	mov.w	r1, #0
 800b1bc:	00d9      	lsls	r1, r3, #3
 800b1be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b1c2:	00d0      	lsls	r0, r2, #3
 800b1c4:	4602      	mov	r2, r0
 800b1c6:	460b      	mov	r3, r1
 800b1c8:	1911      	adds	r1, r2, r4
 800b1ca:	65b9      	str	r1, [r7, #88]	; 0x58
 800b1cc:	416b      	adcs	r3, r5
 800b1ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b1d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1d2:	685b      	ldr	r3, [r3, #4]
 800b1d4:	461a      	mov	r2, r3
 800b1d6:	f04f 0300 	mov.w	r3, #0
 800b1da:	1891      	adds	r1, r2, r2
 800b1dc:	62b9      	str	r1, [r7, #40]	; 0x28
 800b1de:	415b      	adcs	r3, r3
 800b1e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b1e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b1e6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800b1ea:	f7f5 fd5d 	bl	8000ca8 <__aeabi_uldivmod>
 800b1ee:	4602      	mov	r2, r0
 800b1f0:	460b      	mov	r3, r1
 800b1f2:	4b8c      	ldr	r3, [pc, #560]	; (800b424 <UART_SetConfig+0x38c>)
 800b1f4:	fba3 1302 	umull	r1, r3, r3, r2
 800b1f8:	095b      	lsrs	r3, r3, #5
 800b1fa:	2164      	movs	r1, #100	; 0x64
 800b1fc:	fb01 f303 	mul.w	r3, r1, r3
 800b200:	1ad3      	subs	r3, r2, r3
 800b202:	00db      	lsls	r3, r3, #3
 800b204:	3332      	adds	r3, #50	; 0x32
 800b206:	4a87      	ldr	r2, [pc, #540]	; (800b424 <UART_SetConfig+0x38c>)
 800b208:	fba2 2303 	umull	r2, r3, r2, r3
 800b20c:	095b      	lsrs	r3, r3, #5
 800b20e:	005b      	lsls	r3, r3, #1
 800b210:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b214:	441e      	add	r6, r3
 800b216:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b218:	4618      	mov	r0, r3
 800b21a:	f04f 0100 	mov.w	r1, #0
 800b21e:	4602      	mov	r2, r0
 800b220:	460b      	mov	r3, r1
 800b222:	1894      	adds	r4, r2, r2
 800b224:	623c      	str	r4, [r7, #32]
 800b226:	415b      	adcs	r3, r3
 800b228:	627b      	str	r3, [r7, #36]	; 0x24
 800b22a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b22e:	1812      	adds	r2, r2, r0
 800b230:	eb41 0303 	adc.w	r3, r1, r3
 800b234:	f04f 0400 	mov.w	r4, #0
 800b238:	f04f 0500 	mov.w	r5, #0
 800b23c:	00dd      	lsls	r5, r3, #3
 800b23e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b242:	00d4      	lsls	r4, r2, #3
 800b244:	4622      	mov	r2, r4
 800b246:	462b      	mov	r3, r5
 800b248:	1814      	adds	r4, r2, r0
 800b24a:	653c      	str	r4, [r7, #80]	; 0x50
 800b24c:	414b      	adcs	r3, r1
 800b24e:	657b      	str	r3, [r7, #84]	; 0x54
 800b250:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b252:	685b      	ldr	r3, [r3, #4]
 800b254:	461a      	mov	r2, r3
 800b256:	f04f 0300 	mov.w	r3, #0
 800b25a:	1891      	adds	r1, r2, r2
 800b25c:	61b9      	str	r1, [r7, #24]
 800b25e:	415b      	adcs	r3, r3
 800b260:	61fb      	str	r3, [r7, #28]
 800b262:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b266:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800b26a:	f7f5 fd1d 	bl	8000ca8 <__aeabi_uldivmod>
 800b26e:	4602      	mov	r2, r0
 800b270:	460b      	mov	r3, r1
 800b272:	4b6c      	ldr	r3, [pc, #432]	; (800b424 <UART_SetConfig+0x38c>)
 800b274:	fba3 1302 	umull	r1, r3, r3, r2
 800b278:	095b      	lsrs	r3, r3, #5
 800b27a:	2164      	movs	r1, #100	; 0x64
 800b27c:	fb01 f303 	mul.w	r3, r1, r3
 800b280:	1ad3      	subs	r3, r2, r3
 800b282:	00db      	lsls	r3, r3, #3
 800b284:	3332      	adds	r3, #50	; 0x32
 800b286:	4a67      	ldr	r2, [pc, #412]	; (800b424 <UART_SetConfig+0x38c>)
 800b288:	fba2 2303 	umull	r2, r3, r2, r3
 800b28c:	095b      	lsrs	r3, r3, #5
 800b28e:	f003 0207 	and.w	r2, r3, #7
 800b292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	4432      	add	r2, r6
 800b298:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b29a:	e0b9      	b.n	800b410 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b29c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b29e:	461c      	mov	r4, r3
 800b2a0:	f04f 0500 	mov.w	r5, #0
 800b2a4:	4622      	mov	r2, r4
 800b2a6:	462b      	mov	r3, r5
 800b2a8:	1891      	adds	r1, r2, r2
 800b2aa:	6139      	str	r1, [r7, #16]
 800b2ac:	415b      	adcs	r3, r3
 800b2ae:	617b      	str	r3, [r7, #20]
 800b2b0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b2b4:	1912      	adds	r2, r2, r4
 800b2b6:	eb45 0303 	adc.w	r3, r5, r3
 800b2ba:	f04f 0000 	mov.w	r0, #0
 800b2be:	f04f 0100 	mov.w	r1, #0
 800b2c2:	00d9      	lsls	r1, r3, #3
 800b2c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b2c8:	00d0      	lsls	r0, r2, #3
 800b2ca:	4602      	mov	r2, r0
 800b2cc:	460b      	mov	r3, r1
 800b2ce:	eb12 0804 	adds.w	r8, r2, r4
 800b2d2:	eb43 0905 	adc.w	r9, r3, r5
 800b2d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2d8:	685b      	ldr	r3, [r3, #4]
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f04f 0100 	mov.w	r1, #0
 800b2e0:	f04f 0200 	mov.w	r2, #0
 800b2e4:	f04f 0300 	mov.w	r3, #0
 800b2e8:	008b      	lsls	r3, r1, #2
 800b2ea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b2ee:	0082      	lsls	r2, r0, #2
 800b2f0:	4640      	mov	r0, r8
 800b2f2:	4649      	mov	r1, r9
 800b2f4:	f7f5 fcd8 	bl	8000ca8 <__aeabi_uldivmod>
 800b2f8:	4602      	mov	r2, r0
 800b2fa:	460b      	mov	r3, r1
 800b2fc:	4b49      	ldr	r3, [pc, #292]	; (800b424 <UART_SetConfig+0x38c>)
 800b2fe:	fba3 2302 	umull	r2, r3, r3, r2
 800b302:	095b      	lsrs	r3, r3, #5
 800b304:	011e      	lsls	r6, r3, #4
 800b306:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b308:	4618      	mov	r0, r3
 800b30a:	f04f 0100 	mov.w	r1, #0
 800b30e:	4602      	mov	r2, r0
 800b310:	460b      	mov	r3, r1
 800b312:	1894      	adds	r4, r2, r2
 800b314:	60bc      	str	r4, [r7, #8]
 800b316:	415b      	adcs	r3, r3
 800b318:	60fb      	str	r3, [r7, #12]
 800b31a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b31e:	1812      	adds	r2, r2, r0
 800b320:	eb41 0303 	adc.w	r3, r1, r3
 800b324:	f04f 0400 	mov.w	r4, #0
 800b328:	f04f 0500 	mov.w	r5, #0
 800b32c:	00dd      	lsls	r5, r3, #3
 800b32e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b332:	00d4      	lsls	r4, r2, #3
 800b334:	4622      	mov	r2, r4
 800b336:	462b      	mov	r3, r5
 800b338:	1814      	adds	r4, r2, r0
 800b33a:	64bc      	str	r4, [r7, #72]	; 0x48
 800b33c:	414b      	adcs	r3, r1
 800b33e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b340:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b342:	685b      	ldr	r3, [r3, #4]
 800b344:	4618      	mov	r0, r3
 800b346:	f04f 0100 	mov.w	r1, #0
 800b34a:	f04f 0200 	mov.w	r2, #0
 800b34e:	f04f 0300 	mov.w	r3, #0
 800b352:	008b      	lsls	r3, r1, #2
 800b354:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b358:	0082      	lsls	r2, r0, #2
 800b35a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800b35e:	f7f5 fca3 	bl	8000ca8 <__aeabi_uldivmod>
 800b362:	4602      	mov	r2, r0
 800b364:	460b      	mov	r3, r1
 800b366:	4b2f      	ldr	r3, [pc, #188]	; (800b424 <UART_SetConfig+0x38c>)
 800b368:	fba3 1302 	umull	r1, r3, r3, r2
 800b36c:	095b      	lsrs	r3, r3, #5
 800b36e:	2164      	movs	r1, #100	; 0x64
 800b370:	fb01 f303 	mul.w	r3, r1, r3
 800b374:	1ad3      	subs	r3, r2, r3
 800b376:	011b      	lsls	r3, r3, #4
 800b378:	3332      	adds	r3, #50	; 0x32
 800b37a:	4a2a      	ldr	r2, [pc, #168]	; (800b424 <UART_SetConfig+0x38c>)
 800b37c:	fba2 2303 	umull	r2, r3, r2, r3
 800b380:	095b      	lsrs	r3, r3, #5
 800b382:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b386:	441e      	add	r6, r3
 800b388:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b38a:	4618      	mov	r0, r3
 800b38c:	f04f 0100 	mov.w	r1, #0
 800b390:	4602      	mov	r2, r0
 800b392:	460b      	mov	r3, r1
 800b394:	1894      	adds	r4, r2, r2
 800b396:	603c      	str	r4, [r7, #0]
 800b398:	415b      	adcs	r3, r3
 800b39a:	607b      	str	r3, [r7, #4]
 800b39c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3a0:	1812      	adds	r2, r2, r0
 800b3a2:	eb41 0303 	adc.w	r3, r1, r3
 800b3a6:	f04f 0400 	mov.w	r4, #0
 800b3aa:	f04f 0500 	mov.w	r5, #0
 800b3ae:	00dd      	lsls	r5, r3, #3
 800b3b0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b3b4:	00d4      	lsls	r4, r2, #3
 800b3b6:	4622      	mov	r2, r4
 800b3b8:	462b      	mov	r3, r5
 800b3ba:	eb12 0a00 	adds.w	sl, r2, r0
 800b3be:	eb43 0b01 	adc.w	fp, r3, r1
 800b3c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3c4:	685b      	ldr	r3, [r3, #4]
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	f04f 0100 	mov.w	r1, #0
 800b3cc:	f04f 0200 	mov.w	r2, #0
 800b3d0:	f04f 0300 	mov.w	r3, #0
 800b3d4:	008b      	lsls	r3, r1, #2
 800b3d6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b3da:	0082      	lsls	r2, r0, #2
 800b3dc:	4650      	mov	r0, sl
 800b3de:	4659      	mov	r1, fp
 800b3e0:	f7f5 fc62 	bl	8000ca8 <__aeabi_uldivmod>
 800b3e4:	4602      	mov	r2, r0
 800b3e6:	460b      	mov	r3, r1
 800b3e8:	4b0e      	ldr	r3, [pc, #56]	; (800b424 <UART_SetConfig+0x38c>)
 800b3ea:	fba3 1302 	umull	r1, r3, r3, r2
 800b3ee:	095b      	lsrs	r3, r3, #5
 800b3f0:	2164      	movs	r1, #100	; 0x64
 800b3f2:	fb01 f303 	mul.w	r3, r1, r3
 800b3f6:	1ad3      	subs	r3, r2, r3
 800b3f8:	011b      	lsls	r3, r3, #4
 800b3fa:	3332      	adds	r3, #50	; 0x32
 800b3fc:	4a09      	ldr	r2, [pc, #36]	; (800b424 <UART_SetConfig+0x38c>)
 800b3fe:	fba2 2303 	umull	r2, r3, r2, r3
 800b402:	095b      	lsrs	r3, r3, #5
 800b404:	f003 020f 	and.w	r2, r3, #15
 800b408:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	4432      	add	r2, r6
 800b40e:	609a      	str	r2, [r3, #8]
}
 800b410:	bf00      	nop
 800b412:	377c      	adds	r7, #124	; 0x7c
 800b414:	46bd      	mov	sp, r7
 800b416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b41a:	bf00      	nop
 800b41c:	40011000 	.word	0x40011000
 800b420:	40011400 	.word	0x40011400
 800b424:	51eb851f 	.word	0x51eb851f

0800b428 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b428:	b480      	push	{r7}
 800b42a:	b087      	sub	sp, #28
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	60f8      	str	r0, [r7, #12]
 800b430:	60b9      	str	r1, [r7, #8]
 800b432:	4613      	mov	r3, r2
 800b434:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b436:	79fb      	ldrb	r3, [r7, #7]
 800b438:	2b02      	cmp	r3, #2
 800b43a:	d165      	bne.n	800b508 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	4a41      	ldr	r2, [pc, #260]	; (800b544 <USB_SetTurnaroundTime+0x11c>)
 800b440:	4293      	cmp	r3, r2
 800b442:	d906      	bls.n	800b452 <USB_SetTurnaroundTime+0x2a>
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	4a40      	ldr	r2, [pc, #256]	; (800b548 <USB_SetTurnaroundTime+0x120>)
 800b448:	4293      	cmp	r3, r2
 800b44a:	d202      	bcs.n	800b452 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b44c:	230f      	movs	r3, #15
 800b44e:	617b      	str	r3, [r7, #20]
 800b450:	e062      	b.n	800b518 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	4a3c      	ldr	r2, [pc, #240]	; (800b548 <USB_SetTurnaroundTime+0x120>)
 800b456:	4293      	cmp	r3, r2
 800b458:	d306      	bcc.n	800b468 <USB_SetTurnaroundTime+0x40>
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	4a3b      	ldr	r2, [pc, #236]	; (800b54c <USB_SetTurnaroundTime+0x124>)
 800b45e:	4293      	cmp	r3, r2
 800b460:	d202      	bcs.n	800b468 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b462:	230e      	movs	r3, #14
 800b464:	617b      	str	r3, [r7, #20]
 800b466:	e057      	b.n	800b518 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	4a38      	ldr	r2, [pc, #224]	; (800b54c <USB_SetTurnaroundTime+0x124>)
 800b46c:	4293      	cmp	r3, r2
 800b46e:	d306      	bcc.n	800b47e <USB_SetTurnaroundTime+0x56>
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	4a37      	ldr	r2, [pc, #220]	; (800b550 <USB_SetTurnaroundTime+0x128>)
 800b474:	4293      	cmp	r3, r2
 800b476:	d202      	bcs.n	800b47e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b478:	230d      	movs	r3, #13
 800b47a:	617b      	str	r3, [r7, #20]
 800b47c:	e04c      	b.n	800b518 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b47e:	68bb      	ldr	r3, [r7, #8]
 800b480:	4a33      	ldr	r2, [pc, #204]	; (800b550 <USB_SetTurnaroundTime+0x128>)
 800b482:	4293      	cmp	r3, r2
 800b484:	d306      	bcc.n	800b494 <USB_SetTurnaroundTime+0x6c>
 800b486:	68bb      	ldr	r3, [r7, #8]
 800b488:	4a32      	ldr	r2, [pc, #200]	; (800b554 <USB_SetTurnaroundTime+0x12c>)
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d802      	bhi.n	800b494 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b48e:	230c      	movs	r3, #12
 800b490:	617b      	str	r3, [r7, #20]
 800b492:	e041      	b.n	800b518 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	4a2f      	ldr	r2, [pc, #188]	; (800b554 <USB_SetTurnaroundTime+0x12c>)
 800b498:	4293      	cmp	r3, r2
 800b49a:	d906      	bls.n	800b4aa <USB_SetTurnaroundTime+0x82>
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	4a2e      	ldr	r2, [pc, #184]	; (800b558 <USB_SetTurnaroundTime+0x130>)
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	d802      	bhi.n	800b4aa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b4a4:	230b      	movs	r3, #11
 800b4a6:	617b      	str	r3, [r7, #20]
 800b4a8:	e036      	b.n	800b518 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	4a2a      	ldr	r2, [pc, #168]	; (800b558 <USB_SetTurnaroundTime+0x130>)
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	d906      	bls.n	800b4c0 <USB_SetTurnaroundTime+0x98>
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	4a29      	ldr	r2, [pc, #164]	; (800b55c <USB_SetTurnaroundTime+0x134>)
 800b4b6:	4293      	cmp	r3, r2
 800b4b8:	d802      	bhi.n	800b4c0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b4ba:	230a      	movs	r3, #10
 800b4bc:	617b      	str	r3, [r7, #20]
 800b4be:	e02b      	b.n	800b518 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	4a26      	ldr	r2, [pc, #152]	; (800b55c <USB_SetTurnaroundTime+0x134>)
 800b4c4:	4293      	cmp	r3, r2
 800b4c6:	d906      	bls.n	800b4d6 <USB_SetTurnaroundTime+0xae>
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	4a25      	ldr	r2, [pc, #148]	; (800b560 <USB_SetTurnaroundTime+0x138>)
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d202      	bcs.n	800b4d6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b4d0:	2309      	movs	r3, #9
 800b4d2:	617b      	str	r3, [r7, #20]
 800b4d4:	e020      	b.n	800b518 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	4a21      	ldr	r2, [pc, #132]	; (800b560 <USB_SetTurnaroundTime+0x138>)
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	d306      	bcc.n	800b4ec <USB_SetTurnaroundTime+0xc4>
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	4a20      	ldr	r2, [pc, #128]	; (800b564 <USB_SetTurnaroundTime+0x13c>)
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d802      	bhi.n	800b4ec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b4e6:	2308      	movs	r3, #8
 800b4e8:	617b      	str	r3, [r7, #20]
 800b4ea:	e015      	b.n	800b518 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	4a1d      	ldr	r2, [pc, #116]	; (800b564 <USB_SetTurnaroundTime+0x13c>)
 800b4f0:	4293      	cmp	r3, r2
 800b4f2:	d906      	bls.n	800b502 <USB_SetTurnaroundTime+0xda>
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	4a1c      	ldr	r2, [pc, #112]	; (800b568 <USB_SetTurnaroundTime+0x140>)
 800b4f8:	4293      	cmp	r3, r2
 800b4fa:	d202      	bcs.n	800b502 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b4fc:	2307      	movs	r3, #7
 800b4fe:	617b      	str	r3, [r7, #20]
 800b500:	e00a      	b.n	800b518 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b502:	2306      	movs	r3, #6
 800b504:	617b      	str	r3, [r7, #20]
 800b506:	e007      	b.n	800b518 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b508:	79fb      	ldrb	r3, [r7, #7]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d102      	bne.n	800b514 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b50e:	2309      	movs	r3, #9
 800b510:	617b      	str	r3, [r7, #20]
 800b512:	e001      	b.n	800b518 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b514:	2309      	movs	r3, #9
 800b516:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	68db      	ldr	r3, [r3, #12]
 800b51c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	68da      	ldr	r2, [r3, #12]
 800b528:	697b      	ldr	r3, [r7, #20]
 800b52a:	029b      	lsls	r3, r3, #10
 800b52c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b530:	431a      	orrs	r2, r3
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b536:	2300      	movs	r3, #0
}
 800b538:	4618      	mov	r0, r3
 800b53a:	371c      	adds	r7, #28
 800b53c:	46bd      	mov	sp, r7
 800b53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b542:	4770      	bx	lr
 800b544:	00d8acbf 	.word	0x00d8acbf
 800b548:	00e4e1c0 	.word	0x00e4e1c0
 800b54c:	00f42400 	.word	0x00f42400
 800b550:	01067380 	.word	0x01067380
 800b554:	011a499f 	.word	0x011a499f
 800b558:	01312cff 	.word	0x01312cff
 800b55c:	014ca43f 	.word	0x014ca43f
 800b560:	016e3600 	.word	0x016e3600
 800b564:	01a6ab1f 	.word	0x01a6ab1f
 800b568:	01e84800 	.word	0x01e84800

0800b56c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b56c:	b480      	push	{r7}
 800b56e:	b085      	sub	sp, #20
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
 800b574:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b576:	2300      	movs	r3, #0
 800b578:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	019b      	lsls	r3, r3, #6
 800b57e:	f043 0220 	orr.w	r2, r3, #32
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	3301      	adds	r3, #1
 800b58a:	60fb      	str	r3, [r7, #12]
 800b58c:	4a08      	ldr	r2, [pc, #32]	; (800b5b0 <USB_FlushTxFifo+0x44>)
 800b58e:	4293      	cmp	r3, r2
 800b590:	d901      	bls.n	800b596 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800b592:	2303      	movs	r3, #3
 800b594:	e006      	b.n	800b5a4 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	691b      	ldr	r3, [r3, #16]
 800b59a:	f003 0320 	and.w	r3, r3, #32
 800b59e:	2b20      	cmp	r3, #32
 800b5a0:	d0f1      	beq.n	800b586 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b5a2:	2300      	movs	r3, #0
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	3714      	adds	r7, #20
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ae:	4770      	bx	lr
 800b5b0:	00030d40 	.word	0x00030d40

0800b5b4 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b087      	sub	sp, #28
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5c6:	689b      	ldr	r3, [r3, #8]
 800b5c8:	f003 0306 	and.w	r3, r3, #6
 800b5cc:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d102      	bne.n	800b5da <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	75fb      	strb	r3, [r7, #23]
 800b5d8:	e00a      	b.n	800b5f0 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	2b02      	cmp	r3, #2
 800b5de:	d002      	beq.n	800b5e6 <USB_GetDevSpeed+0x32>
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2b06      	cmp	r3, #6
 800b5e4:	d102      	bne.n	800b5ec <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b5e6:	2302      	movs	r3, #2
 800b5e8:	75fb      	strb	r3, [r7, #23]
 800b5ea:	e001      	b.n	800b5f0 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b5ec:	230f      	movs	r3, #15
 800b5ee:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b5f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	371c      	adds	r7, #28
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fc:	4770      	bx	lr

0800b5fe <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b5fe:	b480      	push	{r7}
 800b600:	b085      	sub	sp, #20
 800b602:	af00      	add	r7, sp, #0
 800b604:	6078      	str	r0, [r7, #4]
 800b606:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	781b      	ldrb	r3, [r3, #0]
 800b610:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	785b      	ldrb	r3, [r3, #1]
 800b616:	2b01      	cmp	r3, #1
 800b618:	d13a      	bne.n	800b690 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b620:	69da      	ldr	r2, [r3, #28]
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	781b      	ldrb	r3, [r3, #0]
 800b626:	f003 030f 	and.w	r3, r3, #15
 800b62a:	2101      	movs	r1, #1
 800b62c:	fa01 f303 	lsl.w	r3, r1, r3
 800b630:	b29b      	uxth	r3, r3
 800b632:	68f9      	ldr	r1, [r7, #12]
 800b634:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b638:	4313      	orrs	r3, r2
 800b63a:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	015a      	lsls	r2, r3, #5
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	4413      	add	r3, r2
 800b644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d155      	bne.n	800b6fe <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	015a      	lsls	r2, r3, #5
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	4413      	add	r3, r2
 800b65a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b65e:	681a      	ldr	r2, [r3, #0]
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	689b      	ldr	r3, [r3, #8]
 800b664:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	78db      	ldrb	r3, [r3, #3]
 800b66c:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b66e:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	059b      	lsls	r3, r3, #22
 800b674:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b676:	4313      	orrs	r3, r2
 800b678:	68ba      	ldr	r2, [r7, #8]
 800b67a:	0151      	lsls	r1, r2, #5
 800b67c:	68fa      	ldr	r2, [r7, #12]
 800b67e:	440a      	add	r2, r1
 800b680:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b688:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b68c:	6013      	str	r3, [r2, #0]
 800b68e:	e036      	b.n	800b6fe <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b696:	69da      	ldr	r2, [r3, #28]
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	781b      	ldrb	r3, [r3, #0]
 800b69c:	f003 030f 	and.w	r3, r3, #15
 800b6a0:	2101      	movs	r1, #1
 800b6a2:	fa01 f303 	lsl.w	r3, r1, r3
 800b6a6:	041b      	lsls	r3, r3, #16
 800b6a8:	68f9      	ldr	r1, [r7, #12]
 800b6aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b6ae:	4313      	orrs	r3, r2
 800b6b0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	015a      	lsls	r2, r3, #5
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	4413      	add	r3, r2
 800b6ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d11a      	bne.n	800b6fe <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	015a      	lsls	r2, r3, #5
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	4413      	add	r3, r2
 800b6d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6d4:	681a      	ldr	r2, [r3, #0]
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	689b      	ldr	r3, [r3, #8]
 800b6da:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	78db      	ldrb	r3, [r3, #3]
 800b6e2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b6e4:	430b      	orrs	r3, r1
 800b6e6:	4313      	orrs	r3, r2
 800b6e8:	68ba      	ldr	r2, [r7, #8]
 800b6ea:	0151      	lsls	r1, r2, #5
 800b6ec:	68fa      	ldr	r2, [r7, #12]
 800b6ee:	440a      	add	r2, r1
 800b6f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b6f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b6fc:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b6fe:	2300      	movs	r3, #0
}
 800b700:	4618      	mov	r0, r3
 800b702:	3714      	adds	r7, #20
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr

0800b70c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b08a      	sub	sp, #40	; 0x28
 800b710:	af02      	add	r7, sp, #8
 800b712:	60f8      	str	r0, [r7, #12]
 800b714:	60b9      	str	r1, [r7, #8]
 800b716:	4613      	mov	r3, r2
 800b718:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	781b      	ldrb	r3, [r3, #0]
 800b722:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	785b      	ldrb	r3, [r3, #1]
 800b728:	2b01      	cmp	r3, #1
 800b72a:	f040 815c 	bne.w	800b9e6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	695b      	ldr	r3, [r3, #20]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d132      	bne.n	800b79c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b736:	69bb      	ldr	r3, [r7, #24]
 800b738:	015a      	lsls	r2, r3, #5
 800b73a:	69fb      	ldr	r3, [r7, #28]
 800b73c:	4413      	add	r3, r2
 800b73e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b742:	691b      	ldr	r3, [r3, #16]
 800b744:	69ba      	ldr	r2, [r7, #24]
 800b746:	0151      	lsls	r1, r2, #5
 800b748:	69fa      	ldr	r2, [r7, #28]
 800b74a:	440a      	add	r2, r1
 800b74c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b750:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b754:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b758:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b75a:	69bb      	ldr	r3, [r7, #24]
 800b75c:	015a      	lsls	r2, r3, #5
 800b75e:	69fb      	ldr	r3, [r7, #28]
 800b760:	4413      	add	r3, r2
 800b762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b766:	691b      	ldr	r3, [r3, #16]
 800b768:	69ba      	ldr	r2, [r7, #24]
 800b76a:	0151      	lsls	r1, r2, #5
 800b76c:	69fa      	ldr	r2, [r7, #28]
 800b76e:	440a      	add	r2, r1
 800b770:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b774:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b778:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b77a:	69bb      	ldr	r3, [r7, #24]
 800b77c:	015a      	lsls	r2, r3, #5
 800b77e:	69fb      	ldr	r3, [r7, #28]
 800b780:	4413      	add	r3, r2
 800b782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b786:	691b      	ldr	r3, [r3, #16]
 800b788:	69ba      	ldr	r2, [r7, #24]
 800b78a:	0151      	lsls	r1, r2, #5
 800b78c:	69fa      	ldr	r2, [r7, #28]
 800b78e:	440a      	add	r2, r1
 800b790:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b794:	0cdb      	lsrs	r3, r3, #19
 800b796:	04db      	lsls	r3, r3, #19
 800b798:	6113      	str	r3, [r2, #16]
 800b79a:	e074      	b.n	800b886 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b79c:	69bb      	ldr	r3, [r7, #24]
 800b79e:	015a      	lsls	r2, r3, #5
 800b7a0:	69fb      	ldr	r3, [r7, #28]
 800b7a2:	4413      	add	r3, r2
 800b7a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7a8:	691b      	ldr	r3, [r3, #16]
 800b7aa:	69ba      	ldr	r2, [r7, #24]
 800b7ac:	0151      	lsls	r1, r2, #5
 800b7ae:	69fa      	ldr	r2, [r7, #28]
 800b7b0:	440a      	add	r2, r1
 800b7b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b7b6:	0cdb      	lsrs	r3, r3, #19
 800b7b8:	04db      	lsls	r3, r3, #19
 800b7ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b7bc:	69bb      	ldr	r3, [r7, #24]
 800b7be:	015a      	lsls	r2, r3, #5
 800b7c0:	69fb      	ldr	r3, [r7, #28]
 800b7c2:	4413      	add	r3, r2
 800b7c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7c8:	691b      	ldr	r3, [r3, #16]
 800b7ca:	69ba      	ldr	r2, [r7, #24]
 800b7cc:	0151      	lsls	r1, r2, #5
 800b7ce:	69fa      	ldr	r2, [r7, #28]
 800b7d0:	440a      	add	r2, r1
 800b7d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b7d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b7da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b7de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b7e0:	69bb      	ldr	r3, [r7, #24]
 800b7e2:	015a      	lsls	r2, r3, #5
 800b7e4:	69fb      	ldr	r3, [r7, #28]
 800b7e6:	4413      	add	r3, r2
 800b7e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7ec:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	6959      	ldr	r1, [r3, #20]
 800b7f2:	68bb      	ldr	r3, [r7, #8]
 800b7f4:	689b      	ldr	r3, [r3, #8]
 800b7f6:	440b      	add	r3, r1
 800b7f8:	1e59      	subs	r1, r3, #1
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	689b      	ldr	r3, [r3, #8]
 800b7fe:	fbb1 f3f3 	udiv	r3, r1, r3
 800b802:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b804:	4b9d      	ldr	r3, [pc, #628]	; (800ba7c <USB_EPStartXfer+0x370>)
 800b806:	400b      	ands	r3, r1
 800b808:	69b9      	ldr	r1, [r7, #24]
 800b80a:	0148      	lsls	r0, r1, #5
 800b80c:	69f9      	ldr	r1, [r7, #28]
 800b80e:	4401      	add	r1, r0
 800b810:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b814:	4313      	orrs	r3, r2
 800b816:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b818:	69bb      	ldr	r3, [r7, #24]
 800b81a:	015a      	lsls	r2, r3, #5
 800b81c:	69fb      	ldr	r3, [r7, #28]
 800b81e:	4413      	add	r3, r2
 800b820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b824:	691a      	ldr	r2, [r3, #16]
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	695b      	ldr	r3, [r3, #20]
 800b82a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b82e:	69b9      	ldr	r1, [r7, #24]
 800b830:	0148      	lsls	r0, r1, #5
 800b832:	69f9      	ldr	r1, [r7, #28]
 800b834:	4401      	add	r1, r0
 800b836:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b83a:	4313      	orrs	r3, r2
 800b83c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b83e:	68bb      	ldr	r3, [r7, #8]
 800b840:	78db      	ldrb	r3, [r3, #3]
 800b842:	2b01      	cmp	r3, #1
 800b844:	d11f      	bne.n	800b886 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b846:	69bb      	ldr	r3, [r7, #24]
 800b848:	015a      	lsls	r2, r3, #5
 800b84a:	69fb      	ldr	r3, [r7, #28]
 800b84c:	4413      	add	r3, r2
 800b84e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b852:	691b      	ldr	r3, [r3, #16]
 800b854:	69ba      	ldr	r2, [r7, #24]
 800b856:	0151      	lsls	r1, r2, #5
 800b858:	69fa      	ldr	r2, [r7, #28]
 800b85a:	440a      	add	r2, r1
 800b85c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b860:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b864:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b866:	69bb      	ldr	r3, [r7, #24]
 800b868:	015a      	lsls	r2, r3, #5
 800b86a:	69fb      	ldr	r3, [r7, #28]
 800b86c:	4413      	add	r3, r2
 800b86e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b872:	691b      	ldr	r3, [r3, #16]
 800b874:	69ba      	ldr	r2, [r7, #24]
 800b876:	0151      	lsls	r1, r2, #5
 800b878:	69fa      	ldr	r2, [r7, #28]
 800b87a:	440a      	add	r2, r1
 800b87c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b880:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b884:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b886:	79fb      	ldrb	r3, [r7, #7]
 800b888:	2b01      	cmp	r3, #1
 800b88a:	d14b      	bne.n	800b924 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	691b      	ldr	r3, [r3, #16]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d009      	beq.n	800b8a8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b894:	69bb      	ldr	r3, [r7, #24]
 800b896:	015a      	lsls	r2, r3, #5
 800b898:	69fb      	ldr	r3, [r7, #28]
 800b89a:	4413      	add	r3, r2
 800b89c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8a0:	461a      	mov	r2, r3
 800b8a2:	68bb      	ldr	r3, [r7, #8]
 800b8a4:	691b      	ldr	r3, [r3, #16]
 800b8a6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	78db      	ldrb	r3, [r3, #3]
 800b8ac:	2b01      	cmp	r3, #1
 800b8ae:	d128      	bne.n	800b902 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b8b0:	69fb      	ldr	r3, [r7, #28]
 800b8b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8b6:	689b      	ldr	r3, [r3, #8]
 800b8b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d110      	bne.n	800b8e2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b8c0:	69bb      	ldr	r3, [r7, #24]
 800b8c2:	015a      	lsls	r2, r3, #5
 800b8c4:	69fb      	ldr	r3, [r7, #28]
 800b8c6:	4413      	add	r3, r2
 800b8c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	69ba      	ldr	r2, [r7, #24]
 800b8d0:	0151      	lsls	r1, r2, #5
 800b8d2:	69fa      	ldr	r2, [r7, #28]
 800b8d4:	440a      	add	r2, r1
 800b8d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b8de:	6013      	str	r3, [r2, #0]
 800b8e0:	e00f      	b.n	800b902 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b8e2:	69bb      	ldr	r3, [r7, #24]
 800b8e4:	015a      	lsls	r2, r3, #5
 800b8e6:	69fb      	ldr	r3, [r7, #28]
 800b8e8:	4413      	add	r3, r2
 800b8ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	69ba      	ldr	r2, [r7, #24]
 800b8f2:	0151      	lsls	r1, r2, #5
 800b8f4:	69fa      	ldr	r2, [r7, #28]
 800b8f6:	440a      	add	r2, r1
 800b8f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b900:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b902:	69bb      	ldr	r3, [r7, #24]
 800b904:	015a      	lsls	r2, r3, #5
 800b906:	69fb      	ldr	r3, [r7, #28]
 800b908:	4413      	add	r3, r2
 800b90a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	69ba      	ldr	r2, [r7, #24]
 800b912:	0151      	lsls	r1, r2, #5
 800b914:	69fa      	ldr	r2, [r7, #28]
 800b916:	440a      	add	r2, r1
 800b918:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b91c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b920:	6013      	str	r3, [r2, #0]
 800b922:	e12f      	b.n	800bb84 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b924:	69bb      	ldr	r3, [r7, #24]
 800b926:	015a      	lsls	r2, r3, #5
 800b928:	69fb      	ldr	r3, [r7, #28]
 800b92a:	4413      	add	r3, r2
 800b92c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	69ba      	ldr	r2, [r7, #24]
 800b934:	0151      	lsls	r1, r2, #5
 800b936:	69fa      	ldr	r2, [r7, #28]
 800b938:	440a      	add	r2, r1
 800b93a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b93e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b942:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	78db      	ldrb	r3, [r3, #3]
 800b948:	2b01      	cmp	r3, #1
 800b94a:	d015      	beq.n	800b978 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	695b      	ldr	r3, [r3, #20]
 800b950:	2b00      	cmp	r3, #0
 800b952:	f000 8117 	beq.w	800bb84 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b956:	69fb      	ldr	r3, [r7, #28]
 800b958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b95c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	781b      	ldrb	r3, [r3, #0]
 800b962:	f003 030f 	and.w	r3, r3, #15
 800b966:	2101      	movs	r1, #1
 800b968:	fa01 f303 	lsl.w	r3, r1, r3
 800b96c:	69f9      	ldr	r1, [r7, #28]
 800b96e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b972:	4313      	orrs	r3, r2
 800b974:	634b      	str	r3, [r1, #52]	; 0x34
 800b976:	e105      	b.n	800bb84 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b978:	69fb      	ldr	r3, [r7, #28]
 800b97a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b97e:	689b      	ldr	r3, [r3, #8]
 800b980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b984:	2b00      	cmp	r3, #0
 800b986:	d110      	bne.n	800b9aa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b988:	69bb      	ldr	r3, [r7, #24]
 800b98a:	015a      	lsls	r2, r3, #5
 800b98c:	69fb      	ldr	r3, [r7, #28]
 800b98e:	4413      	add	r3, r2
 800b990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	69ba      	ldr	r2, [r7, #24]
 800b998:	0151      	lsls	r1, r2, #5
 800b99a:	69fa      	ldr	r2, [r7, #28]
 800b99c:	440a      	add	r2, r1
 800b99e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b9a6:	6013      	str	r3, [r2, #0]
 800b9a8:	e00f      	b.n	800b9ca <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b9aa:	69bb      	ldr	r3, [r7, #24]
 800b9ac:	015a      	lsls	r2, r3, #5
 800b9ae:	69fb      	ldr	r3, [r7, #28]
 800b9b0:	4413      	add	r3, r2
 800b9b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	69ba      	ldr	r2, [r7, #24]
 800b9ba:	0151      	lsls	r1, r2, #5
 800b9bc:	69fa      	ldr	r2, [r7, #28]
 800b9be:	440a      	add	r2, r1
 800b9c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b9c8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	68d9      	ldr	r1, [r3, #12]
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	781a      	ldrb	r2, [r3, #0]
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	695b      	ldr	r3, [r3, #20]
 800b9d6:	b298      	uxth	r0, r3
 800b9d8:	79fb      	ldrb	r3, [r7, #7]
 800b9da:	9300      	str	r3, [sp, #0]
 800b9dc:	4603      	mov	r3, r0
 800b9de:	68f8      	ldr	r0, [r7, #12]
 800b9e0:	f000 fa2b 	bl	800be3a <USB_WritePacket>
 800b9e4:	e0ce      	b.n	800bb84 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b9e6:	69bb      	ldr	r3, [r7, #24]
 800b9e8:	015a      	lsls	r2, r3, #5
 800b9ea:	69fb      	ldr	r3, [r7, #28]
 800b9ec:	4413      	add	r3, r2
 800b9ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9f2:	691b      	ldr	r3, [r3, #16]
 800b9f4:	69ba      	ldr	r2, [r7, #24]
 800b9f6:	0151      	lsls	r1, r2, #5
 800b9f8:	69fa      	ldr	r2, [r7, #28]
 800b9fa:	440a      	add	r2, r1
 800b9fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba00:	0cdb      	lsrs	r3, r3, #19
 800ba02:	04db      	lsls	r3, r3, #19
 800ba04:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ba06:	69bb      	ldr	r3, [r7, #24]
 800ba08:	015a      	lsls	r2, r3, #5
 800ba0a:	69fb      	ldr	r3, [r7, #28]
 800ba0c:	4413      	add	r3, r2
 800ba0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba12:	691b      	ldr	r3, [r3, #16]
 800ba14:	69ba      	ldr	r2, [r7, #24]
 800ba16:	0151      	lsls	r1, r2, #5
 800ba18:	69fa      	ldr	r2, [r7, #28]
 800ba1a:	440a      	add	r2, r1
 800ba1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba20:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ba24:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ba28:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800ba2a:	68bb      	ldr	r3, [r7, #8]
 800ba2c:	695b      	ldr	r3, [r3, #20]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d126      	bne.n	800ba80 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ba32:	69bb      	ldr	r3, [r7, #24]
 800ba34:	015a      	lsls	r2, r3, #5
 800ba36:	69fb      	ldr	r3, [r7, #28]
 800ba38:	4413      	add	r3, r2
 800ba3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba3e:	691a      	ldr	r2, [r3, #16]
 800ba40:	68bb      	ldr	r3, [r7, #8]
 800ba42:	689b      	ldr	r3, [r3, #8]
 800ba44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ba48:	69b9      	ldr	r1, [r7, #24]
 800ba4a:	0148      	lsls	r0, r1, #5
 800ba4c:	69f9      	ldr	r1, [r7, #28]
 800ba4e:	4401      	add	r1, r0
 800ba50:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ba54:	4313      	orrs	r3, r2
 800ba56:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ba58:	69bb      	ldr	r3, [r7, #24]
 800ba5a:	015a      	lsls	r2, r3, #5
 800ba5c:	69fb      	ldr	r3, [r7, #28]
 800ba5e:	4413      	add	r3, r2
 800ba60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba64:	691b      	ldr	r3, [r3, #16]
 800ba66:	69ba      	ldr	r2, [r7, #24]
 800ba68:	0151      	lsls	r1, r2, #5
 800ba6a:	69fa      	ldr	r2, [r7, #28]
 800ba6c:	440a      	add	r2, r1
 800ba6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ba76:	6113      	str	r3, [r2, #16]
 800ba78:	e036      	b.n	800bae8 <USB_EPStartXfer+0x3dc>
 800ba7a:	bf00      	nop
 800ba7c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	695a      	ldr	r2, [r3, #20]
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	689b      	ldr	r3, [r3, #8]
 800ba88:	4413      	add	r3, r2
 800ba8a:	1e5a      	subs	r2, r3, #1
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	689b      	ldr	r3, [r3, #8]
 800ba90:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba94:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ba96:	69bb      	ldr	r3, [r7, #24]
 800ba98:	015a      	lsls	r2, r3, #5
 800ba9a:	69fb      	ldr	r3, [r7, #28]
 800ba9c:	4413      	add	r3, r2
 800ba9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baa2:	691a      	ldr	r2, [r3, #16]
 800baa4:	8afb      	ldrh	r3, [r7, #22]
 800baa6:	04d9      	lsls	r1, r3, #19
 800baa8:	4b39      	ldr	r3, [pc, #228]	; (800bb90 <USB_EPStartXfer+0x484>)
 800baaa:	400b      	ands	r3, r1
 800baac:	69b9      	ldr	r1, [r7, #24]
 800baae:	0148      	lsls	r0, r1, #5
 800bab0:	69f9      	ldr	r1, [r7, #28]
 800bab2:	4401      	add	r1, r0
 800bab4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bab8:	4313      	orrs	r3, r2
 800baba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800babc:	69bb      	ldr	r3, [r7, #24]
 800babe:	015a      	lsls	r2, r3, #5
 800bac0:	69fb      	ldr	r3, [r7, #28]
 800bac2:	4413      	add	r3, r2
 800bac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bac8:	691a      	ldr	r2, [r3, #16]
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	689b      	ldr	r3, [r3, #8]
 800bace:	8af9      	ldrh	r1, [r7, #22]
 800bad0:	fb01 f303 	mul.w	r3, r1, r3
 800bad4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bad8:	69b9      	ldr	r1, [r7, #24]
 800bada:	0148      	lsls	r0, r1, #5
 800badc:	69f9      	ldr	r1, [r7, #28]
 800bade:	4401      	add	r1, r0
 800bae0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bae4:	4313      	orrs	r3, r2
 800bae6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800bae8:	79fb      	ldrb	r3, [r7, #7]
 800baea:	2b01      	cmp	r3, #1
 800baec:	d10d      	bne.n	800bb0a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	68db      	ldr	r3, [r3, #12]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d009      	beq.n	800bb0a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	68d9      	ldr	r1, [r3, #12]
 800bafa:	69bb      	ldr	r3, [r7, #24]
 800bafc:	015a      	lsls	r2, r3, #5
 800bafe:	69fb      	ldr	r3, [r7, #28]
 800bb00:	4413      	add	r3, r2
 800bb02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb06:	460a      	mov	r2, r1
 800bb08:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	78db      	ldrb	r3, [r3, #3]
 800bb0e:	2b01      	cmp	r3, #1
 800bb10:	d128      	bne.n	800bb64 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bb12:	69fb      	ldr	r3, [r7, #28]
 800bb14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb18:	689b      	ldr	r3, [r3, #8]
 800bb1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d110      	bne.n	800bb44 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800bb22:	69bb      	ldr	r3, [r7, #24]
 800bb24:	015a      	lsls	r2, r3, #5
 800bb26:	69fb      	ldr	r3, [r7, #28]
 800bb28:	4413      	add	r3, r2
 800bb2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	69ba      	ldr	r2, [r7, #24]
 800bb32:	0151      	lsls	r1, r2, #5
 800bb34:	69fa      	ldr	r2, [r7, #28]
 800bb36:	440a      	add	r2, r1
 800bb38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bb40:	6013      	str	r3, [r2, #0]
 800bb42:	e00f      	b.n	800bb64 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800bb44:	69bb      	ldr	r3, [r7, #24]
 800bb46:	015a      	lsls	r2, r3, #5
 800bb48:	69fb      	ldr	r3, [r7, #28]
 800bb4a:	4413      	add	r3, r2
 800bb4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	69ba      	ldr	r2, [r7, #24]
 800bb54:	0151      	lsls	r1, r2, #5
 800bb56:	69fa      	ldr	r2, [r7, #28]
 800bb58:	440a      	add	r2, r1
 800bb5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb62:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800bb64:	69bb      	ldr	r3, [r7, #24]
 800bb66:	015a      	lsls	r2, r3, #5
 800bb68:	69fb      	ldr	r3, [r7, #28]
 800bb6a:	4413      	add	r3, r2
 800bb6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	69ba      	ldr	r2, [r7, #24]
 800bb74:	0151      	lsls	r1, r2, #5
 800bb76:	69fa      	ldr	r2, [r7, #28]
 800bb78:	440a      	add	r2, r1
 800bb7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb7e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bb82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bb84:	2300      	movs	r3, #0
}
 800bb86:	4618      	mov	r0, r3
 800bb88:	3720      	adds	r7, #32
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bd80      	pop	{r7, pc}
 800bb8e:	bf00      	nop
 800bb90:	1ff80000 	.word	0x1ff80000

0800bb94 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bb94:	b480      	push	{r7}
 800bb96:	b087      	sub	sp, #28
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	60f8      	str	r0, [r7, #12]
 800bb9c:	60b9      	str	r1, [r7, #8]
 800bb9e:	4613      	mov	r3, r2
 800bba0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800bba6:	68bb      	ldr	r3, [r7, #8]
 800bba8:	781b      	ldrb	r3, [r3, #0]
 800bbaa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	785b      	ldrb	r3, [r3, #1]
 800bbb0:	2b01      	cmp	r3, #1
 800bbb2:	f040 80cd 	bne.w	800bd50 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	695b      	ldr	r3, [r3, #20]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d132      	bne.n	800bc24 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bbbe:	693b      	ldr	r3, [r7, #16]
 800bbc0:	015a      	lsls	r2, r3, #5
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	4413      	add	r3, r2
 800bbc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbca:	691b      	ldr	r3, [r3, #16]
 800bbcc:	693a      	ldr	r2, [r7, #16]
 800bbce:	0151      	lsls	r1, r2, #5
 800bbd0:	697a      	ldr	r2, [r7, #20]
 800bbd2:	440a      	add	r2, r1
 800bbd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bbd8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bbdc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bbe0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	015a      	lsls	r2, r3, #5
 800bbe6:	697b      	ldr	r3, [r7, #20]
 800bbe8:	4413      	add	r3, r2
 800bbea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbee:	691b      	ldr	r3, [r3, #16]
 800bbf0:	693a      	ldr	r2, [r7, #16]
 800bbf2:	0151      	lsls	r1, r2, #5
 800bbf4:	697a      	ldr	r2, [r7, #20]
 800bbf6:	440a      	add	r2, r1
 800bbf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bbfc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bc00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	015a      	lsls	r2, r3, #5
 800bc06:	697b      	ldr	r3, [r7, #20]
 800bc08:	4413      	add	r3, r2
 800bc0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc0e:	691b      	ldr	r3, [r3, #16]
 800bc10:	693a      	ldr	r2, [r7, #16]
 800bc12:	0151      	lsls	r1, r2, #5
 800bc14:	697a      	ldr	r2, [r7, #20]
 800bc16:	440a      	add	r2, r1
 800bc18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc1c:	0cdb      	lsrs	r3, r3, #19
 800bc1e:	04db      	lsls	r3, r3, #19
 800bc20:	6113      	str	r3, [r2, #16]
 800bc22:	e04e      	b.n	800bcc2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	015a      	lsls	r2, r3, #5
 800bc28:	697b      	ldr	r3, [r7, #20]
 800bc2a:	4413      	add	r3, r2
 800bc2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc30:	691b      	ldr	r3, [r3, #16]
 800bc32:	693a      	ldr	r2, [r7, #16]
 800bc34:	0151      	lsls	r1, r2, #5
 800bc36:	697a      	ldr	r2, [r7, #20]
 800bc38:	440a      	add	r2, r1
 800bc3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc3e:	0cdb      	lsrs	r3, r3, #19
 800bc40:	04db      	lsls	r3, r3, #19
 800bc42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bc44:	693b      	ldr	r3, [r7, #16]
 800bc46:	015a      	lsls	r2, r3, #5
 800bc48:	697b      	ldr	r3, [r7, #20]
 800bc4a:	4413      	add	r3, r2
 800bc4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc50:	691b      	ldr	r3, [r3, #16]
 800bc52:	693a      	ldr	r2, [r7, #16]
 800bc54:	0151      	lsls	r1, r2, #5
 800bc56:	697a      	ldr	r2, [r7, #20]
 800bc58:	440a      	add	r2, r1
 800bc5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc5e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bc62:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bc66:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	695a      	ldr	r2, [r3, #20]
 800bc6c:	68bb      	ldr	r3, [r7, #8]
 800bc6e:	689b      	ldr	r3, [r3, #8]
 800bc70:	429a      	cmp	r2, r3
 800bc72:	d903      	bls.n	800bc7c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	689a      	ldr	r2, [r3, #8]
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bc7c:	693b      	ldr	r3, [r7, #16]
 800bc7e:	015a      	lsls	r2, r3, #5
 800bc80:	697b      	ldr	r3, [r7, #20]
 800bc82:	4413      	add	r3, r2
 800bc84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc88:	691b      	ldr	r3, [r3, #16]
 800bc8a:	693a      	ldr	r2, [r7, #16]
 800bc8c:	0151      	lsls	r1, r2, #5
 800bc8e:	697a      	ldr	r2, [r7, #20]
 800bc90:	440a      	add	r2, r1
 800bc92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bc9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bc9c:	693b      	ldr	r3, [r7, #16]
 800bc9e:	015a      	lsls	r2, r3, #5
 800bca0:	697b      	ldr	r3, [r7, #20]
 800bca2:	4413      	add	r3, r2
 800bca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bca8:	691a      	ldr	r2, [r3, #16]
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	695b      	ldr	r3, [r3, #20]
 800bcae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bcb2:	6939      	ldr	r1, [r7, #16]
 800bcb4:	0148      	lsls	r0, r1, #5
 800bcb6:	6979      	ldr	r1, [r7, #20]
 800bcb8:	4401      	add	r1, r0
 800bcba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bcbe:	4313      	orrs	r3, r2
 800bcc0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800bcc2:	79fb      	ldrb	r3, [r7, #7]
 800bcc4:	2b01      	cmp	r3, #1
 800bcc6:	d11e      	bne.n	800bd06 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	691b      	ldr	r3, [r3, #16]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d009      	beq.n	800bce4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bcd0:	693b      	ldr	r3, [r7, #16]
 800bcd2:	015a      	lsls	r2, r3, #5
 800bcd4:	697b      	ldr	r3, [r7, #20]
 800bcd6:	4413      	add	r3, r2
 800bcd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcdc:	461a      	mov	r2, r3
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	691b      	ldr	r3, [r3, #16]
 800bce2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bce4:	693b      	ldr	r3, [r7, #16]
 800bce6:	015a      	lsls	r2, r3, #5
 800bce8:	697b      	ldr	r3, [r7, #20]
 800bcea:	4413      	add	r3, r2
 800bcec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	693a      	ldr	r2, [r7, #16]
 800bcf4:	0151      	lsls	r1, r2, #5
 800bcf6:	697a      	ldr	r2, [r7, #20]
 800bcf8:	440a      	add	r2, r1
 800bcfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bcfe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bd02:	6013      	str	r3, [r2, #0]
 800bd04:	e092      	b.n	800be2c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bd06:	693b      	ldr	r3, [r7, #16]
 800bd08:	015a      	lsls	r2, r3, #5
 800bd0a:	697b      	ldr	r3, [r7, #20]
 800bd0c:	4413      	add	r3, r2
 800bd0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	693a      	ldr	r2, [r7, #16]
 800bd16:	0151      	lsls	r1, r2, #5
 800bd18:	697a      	ldr	r2, [r7, #20]
 800bd1a:	440a      	add	r2, r1
 800bd1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd20:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bd24:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	695b      	ldr	r3, [r3, #20]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d07e      	beq.n	800be2c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bd2e:	697b      	ldr	r3, [r7, #20]
 800bd30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	781b      	ldrb	r3, [r3, #0]
 800bd3a:	f003 030f 	and.w	r3, r3, #15
 800bd3e:	2101      	movs	r1, #1
 800bd40:	fa01 f303 	lsl.w	r3, r1, r3
 800bd44:	6979      	ldr	r1, [r7, #20]
 800bd46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd4a:	4313      	orrs	r3, r2
 800bd4c:	634b      	str	r3, [r1, #52]	; 0x34
 800bd4e:	e06d      	b.n	800be2c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bd50:	693b      	ldr	r3, [r7, #16]
 800bd52:	015a      	lsls	r2, r3, #5
 800bd54:	697b      	ldr	r3, [r7, #20]
 800bd56:	4413      	add	r3, r2
 800bd58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd5c:	691b      	ldr	r3, [r3, #16]
 800bd5e:	693a      	ldr	r2, [r7, #16]
 800bd60:	0151      	lsls	r1, r2, #5
 800bd62:	697a      	ldr	r2, [r7, #20]
 800bd64:	440a      	add	r2, r1
 800bd66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd6a:	0cdb      	lsrs	r3, r3, #19
 800bd6c:	04db      	lsls	r3, r3, #19
 800bd6e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800bd70:	693b      	ldr	r3, [r7, #16]
 800bd72:	015a      	lsls	r2, r3, #5
 800bd74:	697b      	ldr	r3, [r7, #20]
 800bd76:	4413      	add	r3, r2
 800bd78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd7c:	691b      	ldr	r3, [r3, #16]
 800bd7e:	693a      	ldr	r2, [r7, #16]
 800bd80:	0151      	lsls	r1, r2, #5
 800bd82:	697a      	ldr	r2, [r7, #20]
 800bd84:	440a      	add	r2, r1
 800bd86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd8a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bd8e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bd92:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	695b      	ldr	r3, [r3, #20]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d003      	beq.n	800bda4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800bd9c:	68bb      	ldr	r3, [r7, #8]
 800bd9e:	689a      	ldr	r2, [r3, #8]
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bda4:	693b      	ldr	r3, [r7, #16]
 800bda6:	015a      	lsls	r2, r3, #5
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	4413      	add	r3, r2
 800bdac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdb0:	691b      	ldr	r3, [r3, #16]
 800bdb2:	693a      	ldr	r2, [r7, #16]
 800bdb4:	0151      	lsls	r1, r2, #5
 800bdb6:	697a      	ldr	r2, [r7, #20]
 800bdb8:	440a      	add	r2, r1
 800bdba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bdbe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bdc2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800bdc4:	693b      	ldr	r3, [r7, #16]
 800bdc6:	015a      	lsls	r2, r3, #5
 800bdc8:	697b      	ldr	r3, [r7, #20]
 800bdca:	4413      	add	r3, r2
 800bdcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdd0:	691a      	ldr	r2, [r3, #16]
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	689b      	ldr	r3, [r3, #8]
 800bdd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bdda:	6939      	ldr	r1, [r7, #16]
 800bddc:	0148      	lsls	r0, r1, #5
 800bdde:	6979      	ldr	r1, [r7, #20]
 800bde0:	4401      	add	r1, r0
 800bde2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bde6:	4313      	orrs	r3, r2
 800bde8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800bdea:	79fb      	ldrb	r3, [r7, #7]
 800bdec:	2b01      	cmp	r3, #1
 800bdee:	d10d      	bne.n	800be0c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	68db      	ldr	r3, [r3, #12]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d009      	beq.n	800be0c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	68d9      	ldr	r1, [r3, #12]
 800bdfc:	693b      	ldr	r3, [r7, #16]
 800bdfe:	015a      	lsls	r2, r3, #5
 800be00:	697b      	ldr	r3, [r7, #20]
 800be02:	4413      	add	r3, r2
 800be04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be08:	460a      	mov	r2, r1
 800be0a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800be0c:	693b      	ldr	r3, [r7, #16]
 800be0e:	015a      	lsls	r2, r3, #5
 800be10:	697b      	ldr	r3, [r7, #20]
 800be12:	4413      	add	r3, r2
 800be14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	693a      	ldr	r2, [r7, #16]
 800be1c:	0151      	lsls	r1, r2, #5
 800be1e:	697a      	ldr	r2, [r7, #20]
 800be20:	440a      	add	r2, r1
 800be22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be26:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800be2a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800be2c:	2300      	movs	r3, #0
}
 800be2e:	4618      	mov	r0, r3
 800be30:	371c      	adds	r7, #28
 800be32:	46bd      	mov	sp, r7
 800be34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be38:	4770      	bx	lr

0800be3a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800be3a:	b480      	push	{r7}
 800be3c:	b089      	sub	sp, #36	; 0x24
 800be3e:	af00      	add	r7, sp, #0
 800be40:	60f8      	str	r0, [r7, #12]
 800be42:	60b9      	str	r1, [r7, #8]
 800be44:	4611      	mov	r1, r2
 800be46:	461a      	mov	r2, r3
 800be48:	460b      	mov	r3, r1
 800be4a:	71fb      	strb	r3, [r7, #7]
 800be4c:	4613      	mov	r3, r2
 800be4e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800be54:	68bb      	ldr	r3, [r7, #8]
 800be56:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800be58:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d123      	bne.n	800bea8 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800be60:	88bb      	ldrh	r3, [r7, #4]
 800be62:	3303      	adds	r3, #3
 800be64:	089b      	lsrs	r3, r3, #2
 800be66:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800be68:	2300      	movs	r3, #0
 800be6a:	61bb      	str	r3, [r7, #24]
 800be6c:	e018      	b.n	800bea0 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800be6e:	79fb      	ldrb	r3, [r7, #7]
 800be70:	031a      	lsls	r2, r3, #12
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	4413      	add	r3, r2
 800be76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be7a:	461a      	mov	r2, r3
 800be7c:	69fb      	ldr	r3, [r7, #28]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	6013      	str	r3, [r2, #0]
      pSrc++;
 800be82:	69fb      	ldr	r3, [r7, #28]
 800be84:	3301      	adds	r3, #1
 800be86:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800be88:	69fb      	ldr	r3, [r7, #28]
 800be8a:	3301      	adds	r3, #1
 800be8c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800be8e:	69fb      	ldr	r3, [r7, #28]
 800be90:	3301      	adds	r3, #1
 800be92:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800be94:	69fb      	ldr	r3, [r7, #28]
 800be96:	3301      	adds	r3, #1
 800be98:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800be9a:	69bb      	ldr	r3, [r7, #24]
 800be9c:	3301      	adds	r3, #1
 800be9e:	61bb      	str	r3, [r7, #24]
 800bea0:	69ba      	ldr	r2, [r7, #24]
 800bea2:	693b      	ldr	r3, [r7, #16]
 800bea4:	429a      	cmp	r2, r3
 800bea6:	d3e2      	bcc.n	800be6e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800bea8:	2300      	movs	r3, #0
}
 800beaa:	4618      	mov	r0, r3
 800beac:	3724      	adds	r7, #36	; 0x24
 800beae:	46bd      	mov	sp, r7
 800beb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb4:	4770      	bx	lr

0800beb6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800beb6:	b480      	push	{r7}
 800beb8:	b08b      	sub	sp, #44	; 0x2c
 800beba:	af00      	add	r7, sp, #0
 800bebc:	60f8      	str	r0, [r7, #12]
 800bebe:	60b9      	str	r1, [r7, #8]
 800bec0:	4613      	mov	r3, r2
 800bec2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800becc:	88fb      	ldrh	r3, [r7, #6]
 800bece:	089b      	lsrs	r3, r3, #2
 800bed0:	b29b      	uxth	r3, r3
 800bed2:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800bed4:	88fb      	ldrh	r3, [r7, #6]
 800bed6:	f003 0303 	and.w	r3, r3, #3
 800beda:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800bedc:	2300      	movs	r3, #0
 800bede:	623b      	str	r3, [r7, #32]
 800bee0:	e014      	b.n	800bf0c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bee2:	69bb      	ldr	r3, [r7, #24]
 800bee4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bee8:	681a      	ldr	r2, [r3, #0]
 800beea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beec:	601a      	str	r2, [r3, #0]
    pDest++;
 800beee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef0:	3301      	adds	r3, #1
 800bef2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef6:	3301      	adds	r3, #1
 800bef8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800befa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800befc:	3301      	adds	r3, #1
 800befe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bf00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf02:	3301      	adds	r3, #1
 800bf04:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800bf06:	6a3b      	ldr	r3, [r7, #32]
 800bf08:	3301      	adds	r3, #1
 800bf0a:	623b      	str	r3, [r7, #32]
 800bf0c:	6a3a      	ldr	r2, [r7, #32]
 800bf0e:	697b      	ldr	r3, [r7, #20]
 800bf10:	429a      	cmp	r2, r3
 800bf12:	d3e6      	bcc.n	800bee2 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800bf14:	8bfb      	ldrh	r3, [r7, #30]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d01e      	beq.n	800bf58 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800bf1e:	69bb      	ldr	r3, [r7, #24]
 800bf20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf24:	461a      	mov	r2, r3
 800bf26:	f107 0310 	add.w	r3, r7, #16
 800bf2a:	6812      	ldr	r2, [r2, #0]
 800bf2c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800bf2e:	693a      	ldr	r2, [r7, #16]
 800bf30:	6a3b      	ldr	r3, [r7, #32]
 800bf32:	b2db      	uxtb	r3, r3
 800bf34:	00db      	lsls	r3, r3, #3
 800bf36:	fa22 f303 	lsr.w	r3, r2, r3
 800bf3a:	b2da      	uxtb	r2, r3
 800bf3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf3e:	701a      	strb	r2, [r3, #0]
      i++;
 800bf40:	6a3b      	ldr	r3, [r7, #32]
 800bf42:	3301      	adds	r3, #1
 800bf44:	623b      	str	r3, [r7, #32]
      pDest++;
 800bf46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf48:	3301      	adds	r3, #1
 800bf4a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800bf4c:	8bfb      	ldrh	r3, [r7, #30]
 800bf4e:	3b01      	subs	r3, #1
 800bf50:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800bf52:	8bfb      	ldrh	r3, [r7, #30]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d1ea      	bne.n	800bf2e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800bf58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	372c      	adds	r7, #44	; 0x2c
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf64:	4770      	bx	lr

0800bf66 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bf66:	b480      	push	{r7}
 800bf68:	b085      	sub	sp, #20
 800bf6a:	af00      	add	r7, sp, #0
 800bf6c:	6078      	str	r0, [r7, #4]
 800bf6e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	781b      	ldrb	r3, [r3, #0]
 800bf78:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	785b      	ldrb	r3, [r3, #1]
 800bf7e:	2b01      	cmp	r3, #1
 800bf80:	d12c      	bne.n	800bfdc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	015a      	lsls	r2, r3, #5
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	4413      	add	r3, r2
 800bf8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	db12      	blt.n	800bfba <USB_EPSetStall+0x54>
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d00f      	beq.n	800bfba <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	015a      	lsls	r2, r3, #5
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	4413      	add	r3, r2
 800bfa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	68ba      	ldr	r2, [r7, #8]
 800bfaa:	0151      	lsls	r1, r2, #5
 800bfac:	68fa      	ldr	r2, [r7, #12]
 800bfae:	440a      	add	r2, r1
 800bfb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfb4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bfb8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800bfba:	68bb      	ldr	r3, [r7, #8]
 800bfbc:	015a      	lsls	r2, r3, #5
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	4413      	add	r3, r2
 800bfc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	68ba      	ldr	r2, [r7, #8]
 800bfca:	0151      	lsls	r1, r2, #5
 800bfcc:	68fa      	ldr	r2, [r7, #12]
 800bfce:	440a      	add	r2, r1
 800bfd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bfd8:	6013      	str	r3, [r2, #0]
 800bfda:	e02b      	b.n	800c034 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	015a      	lsls	r2, r3, #5
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	4413      	add	r3, r2
 800bfe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	db12      	blt.n	800c014 <USB_EPSetStall+0xae>
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d00f      	beq.n	800c014 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800bff4:	68bb      	ldr	r3, [r7, #8]
 800bff6:	015a      	lsls	r2, r3, #5
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	4413      	add	r3, r2
 800bffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	68ba      	ldr	r2, [r7, #8]
 800c004:	0151      	lsls	r1, r2, #5
 800c006:	68fa      	ldr	r2, [r7, #12]
 800c008:	440a      	add	r2, r1
 800c00a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c00e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c012:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	015a      	lsls	r2, r3, #5
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	4413      	add	r3, r2
 800c01c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	68ba      	ldr	r2, [r7, #8]
 800c024:	0151      	lsls	r1, r2, #5
 800c026:	68fa      	ldr	r2, [r7, #12]
 800c028:	440a      	add	r2, r1
 800c02a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c02e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c032:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c034:	2300      	movs	r3, #0
}
 800c036:	4618      	mov	r0, r3
 800c038:	3714      	adds	r7, #20
 800c03a:	46bd      	mov	sp, r7
 800c03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c040:	4770      	bx	lr

0800c042 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c042:	b480      	push	{r7}
 800c044:	b085      	sub	sp, #20
 800c046:	af00      	add	r7, sp, #0
 800c048:	6078      	str	r0, [r7, #4]
 800c04a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	781b      	ldrb	r3, [r3, #0]
 800c054:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	785b      	ldrb	r3, [r3, #1]
 800c05a:	2b01      	cmp	r3, #1
 800c05c:	d128      	bne.n	800c0b0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c05e:	68bb      	ldr	r3, [r7, #8]
 800c060:	015a      	lsls	r2, r3, #5
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	4413      	add	r3, r2
 800c066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	68ba      	ldr	r2, [r7, #8]
 800c06e:	0151      	lsls	r1, r2, #5
 800c070:	68fa      	ldr	r2, [r7, #12]
 800c072:	440a      	add	r2, r1
 800c074:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c078:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c07c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	78db      	ldrb	r3, [r3, #3]
 800c082:	2b03      	cmp	r3, #3
 800c084:	d003      	beq.n	800c08e <USB_EPClearStall+0x4c>
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	78db      	ldrb	r3, [r3, #3]
 800c08a:	2b02      	cmp	r3, #2
 800c08c:	d138      	bne.n	800c100 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	015a      	lsls	r2, r3, #5
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	4413      	add	r3, r2
 800c096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	68ba      	ldr	r2, [r7, #8]
 800c09e:	0151      	lsls	r1, r2, #5
 800c0a0:	68fa      	ldr	r2, [r7, #12]
 800c0a2:	440a      	add	r2, r1
 800c0a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c0ac:	6013      	str	r3, [r2, #0]
 800c0ae:	e027      	b.n	800c100 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c0b0:	68bb      	ldr	r3, [r7, #8]
 800c0b2:	015a      	lsls	r2, r3, #5
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	4413      	add	r3, r2
 800c0b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	68ba      	ldr	r2, [r7, #8]
 800c0c0:	0151      	lsls	r1, r2, #5
 800c0c2:	68fa      	ldr	r2, [r7, #12]
 800c0c4:	440a      	add	r2, r1
 800c0c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c0ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c0ce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	78db      	ldrb	r3, [r3, #3]
 800c0d4:	2b03      	cmp	r3, #3
 800c0d6:	d003      	beq.n	800c0e0 <USB_EPClearStall+0x9e>
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	78db      	ldrb	r3, [r3, #3]
 800c0dc:	2b02      	cmp	r3, #2
 800c0de:	d10f      	bne.n	800c100 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	015a      	lsls	r2, r3, #5
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	4413      	add	r3, r2
 800c0e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	68ba      	ldr	r2, [r7, #8]
 800c0f0:	0151      	lsls	r1, r2, #5
 800c0f2:	68fa      	ldr	r2, [r7, #12]
 800c0f4:	440a      	add	r2, r1
 800c0f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c0fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c0fe:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c100:	2300      	movs	r3, #0
}
 800c102:	4618      	mov	r0, r3
 800c104:	3714      	adds	r7, #20
 800c106:	46bd      	mov	sp, r7
 800c108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10c:	4770      	bx	lr

0800c10e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c10e:	b480      	push	{r7}
 800c110:	b085      	sub	sp, #20
 800c112:	af00      	add	r7, sp, #0
 800c114:	6078      	str	r0, [r7, #4]
 800c116:	460b      	mov	r3, r1
 800c118:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	68fa      	ldr	r2, [r7, #12]
 800c128:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c12c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c130:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c138:	681a      	ldr	r2, [r3, #0]
 800c13a:	78fb      	ldrb	r3, [r7, #3]
 800c13c:	011b      	lsls	r3, r3, #4
 800c13e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c142:	68f9      	ldr	r1, [r7, #12]
 800c144:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c148:	4313      	orrs	r3, r2
 800c14a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c14c:	2300      	movs	r3, #0
}
 800c14e:	4618      	mov	r0, r3
 800c150:	3714      	adds	r7, #20
 800c152:	46bd      	mov	sp, r7
 800c154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c158:	4770      	bx	lr

0800c15a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c15a:	b480      	push	{r7}
 800c15c:	b085      	sub	sp, #20
 800c15e:	af00      	add	r7, sp, #0
 800c160:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	695b      	ldr	r3, [r3, #20]
 800c166:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	699b      	ldr	r3, [r3, #24]
 800c16c:	68fa      	ldr	r2, [r7, #12]
 800c16e:	4013      	ands	r3, r2
 800c170:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c172:	68fb      	ldr	r3, [r7, #12]
}
 800c174:	4618      	mov	r0, r3
 800c176:	3714      	adds	r7, #20
 800c178:	46bd      	mov	sp, r7
 800c17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17e:	4770      	bx	lr

0800c180 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c180:	b480      	push	{r7}
 800c182:	b085      	sub	sp, #20
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c192:	699b      	ldr	r3, [r3, #24]
 800c194:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c19c:	69db      	ldr	r3, [r3, #28]
 800c19e:	68ba      	ldr	r2, [r7, #8]
 800c1a0:	4013      	ands	r3, r2
 800c1a2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	0c1b      	lsrs	r3, r3, #16
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	3714      	adds	r7, #20
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b2:	4770      	bx	lr

0800c1b4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c1b4:	b480      	push	{r7}
 800c1b6:	b085      	sub	sp, #20
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1c6:	699b      	ldr	r3, [r3, #24]
 800c1c8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1d0:	69db      	ldr	r3, [r3, #28]
 800c1d2:	68ba      	ldr	r2, [r7, #8]
 800c1d4:	4013      	ands	r3, r2
 800c1d6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	b29b      	uxth	r3, r3
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3714      	adds	r7, #20
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e6:	4770      	bx	lr

0800c1e8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b085      	sub	sp, #20
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
 800c1f0:	460b      	mov	r3, r1
 800c1f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c1f8:	78fb      	ldrb	r3, [r7, #3]
 800c1fa:	015a      	lsls	r2, r3, #5
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	4413      	add	r3, r2
 800c200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c204:	689b      	ldr	r3, [r3, #8]
 800c206:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c20e:	695b      	ldr	r3, [r3, #20]
 800c210:	68ba      	ldr	r2, [r7, #8]
 800c212:	4013      	ands	r3, r2
 800c214:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c216:	68bb      	ldr	r3, [r7, #8]
}
 800c218:	4618      	mov	r0, r3
 800c21a:	3714      	adds	r7, #20
 800c21c:	46bd      	mov	sp, r7
 800c21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c222:	4770      	bx	lr

0800c224 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c224:	b480      	push	{r7}
 800c226:	b087      	sub	sp, #28
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
 800c22c:	460b      	mov	r3, r1
 800c22e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c234:	697b      	ldr	r3, [r7, #20]
 800c236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c23a:	691b      	ldr	r3, [r3, #16]
 800c23c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c23e:	697b      	ldr	r3, [r7, #20]
 800c240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c246:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c248:	78fb      	ldrb	r3, [r7, #3]
 800c24a:	f003 030f 	and.w	r3, r3, #15
 800c24e:	68fa      	ldr	r2, [r7, #12]
 800c250:	fa22 f303 	lsr.w	r3, r2, r3
 800c254:	01db      	lsls	r3, r3, #7
 800c256:	b2db      	uxtb	r3, r3
 800c258:	693a      	ldr	r2, [r7, #16]
 800c25a:	4313      	orrs	r3, r2
 800c25c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c25e:	78fb      	ldrb	r3, [r7, #3]
 800c260:	015a      	lsls	r2, r3, #5
 800c262:	697b      	ldr	r3, [r7, #20]
 800c264:	4413      	add	r3, r2
 800c266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c26a:	689b      	ldr	r3, [r3, #8]
 800c26c:	693a      	ldr	r2, [r7, #16]
 800c26e:	4013      	ands	r3, r2
 800c270:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c272:	68bb      	ldr	r3, [r7, #8]
}
 800c274:	4618      	mov	r0, r3
 800c276:	371c      	adds	r7, #28
 800c278:	46bd      	mov	sp, r7
 800c27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27e:	4770      	bx	lr

0800c280 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c280:	b480      	push	{r7}
 800c282:	b083      	sub	sp, #12
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	695b      	ldr	r3, [r3, #20]
 800c28c:	f003 0301 	and.w	r3, r3, #1
}
 800c290:	4618      	mov	r0, r3
 800c292:	370c      	adds	r7, #12
 800c294:	46bd      	mov	sp, r7
 800c296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29a:	4770      	bx	lr

0800c29c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c29c:	b480      	push	{r7}
 800c29e:	b085      	sub	sp, #20
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	68fa      	ldr	r2, [r7, #12]
 800c2b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2b6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c2ba:	f023 0307 	bic.w	r3, r3, #7
 800c2be:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2c6:	685b      	ldr	r3, [r3, #4]
 800c2c8:	68fa      	ldr	r2, [r7, #12]
 800c2ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c2ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c2d2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c2d4:	2300      	movs	r3, #0
}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	3714      	adds	r7, #20
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e0:	4770      	bx	lr
	...

0800c2e4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800c2e4:	b480      	push	{r7}
 800c2e6:	b087      	sub	sp, #28
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	60f8      	str	r0, [r7, #12]
 800c2ec:	460b      	mov	r3, r1
 800c2ee:	607a      	str	r2, [r7, #4]
 800c2f0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	333c      	adds	r3, #60	; 0x3c
 800c2fa:	3304      	adds	r3, #4
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c300:	693b      	ldr	r3, [r7, #16]
 800c302:	4a26      	ldr	r2, [pc, #152]	; (800c39c <USB_EP0_OutStart+0xb8>)
 800c304:	4293      	cmp	r3, r2
 800c306:	d90a      	bls.n	800c31e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c308:	697b      	ldr	r3, [r7, #20]
 800c30a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c314:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c318:	d101      	bne.n	800c31e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c31a:	2300      	movs	r3, #0
 800c31c:	e037      	b.n	800c38e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c31e:	697b      	ldr	r3, [r7, #20]
 800c320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c324:	461a      	mov	r2, r3
 800c326:	2300      	movs	r3, #0
 800c328:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c32a:	697b      	ldr	r3, [r7, #20]
 800c32c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c330:	691b      	ldr	r3, [r3, #16]
 800c332:	697a      	ldr	r2, [r7, #20]
 800c334:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c338:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c33c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c33e:	697b      	ldr	r3, [r7, #20]
 800c340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c344:	691b      	ldr	r3, [r3, #16]
 800c346:	697a      	ldr	r2, [r7, #20]
 800c348:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c34c:	f043 0318 	orr.w	r3, r3, #24
 800c350:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c352:	697b      	ldr	r3, [r7, #20]
 800c354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c358:	691b      	ldr	r3, [r3, #16]
 800c35a:	697a      	ldr	r2, [r7, #20]
 800c35c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c360:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c364:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c366:	7afb      	ldrb	r3, [r7, #11]
 800c368:	2b01      	cmp	r3, #1
 800c36a:	d10f      	bne.n	800c38c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c36c:	697b      	ldr	r3, [r7, #20]
 800c36e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c372:	461a      	mov	r2, r3
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c378:	697b      	ldr	r3, [r7, #20]
 800c37a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	697a      	ldr	r2, [r7, #20]
 800c382:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c386:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c38a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c38c:	2300      	movs	r3, #0
}
 800c38e:	4618      	mov	r0, r3
 800c390:	371c      	adds	r7, #28
 800c392:	46bd      	mov	sp, r7
 800c394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c398:	4770      	bx	lr
 800c39a:	bf00      	nop
 800c39c:	4f54300a 	.word	0x4f54300a

0800c3a0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800c3a4:	4904      	ldr	r1, [pc, #16]	; (800c3b8 <MX_FATFS_Init+0x18>)
 800c3a6:	4805      	ldr	r0, [pc, #20]	; (800c3bc <MX_FATFS_Init+0x1c>)
 800c3a8:	f003 ff46 	bl	8010238 <FATFS_LinkDriver>
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	461a      	mov	r2, r3
 800c3b0:	4b03      	ldr	r3, [pc, #12]	; (800c3c0 <MX_FATFS_Init+0x20>)
 800c3b2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c3b4:	bf00      	nop
 800c3b6:	bd80      	pop	{r7, pc}
 800c3b8:	20006040 	.word	0x20006040
 800c3bc:	20000068 	.word	0x20000068
 800c3c0:	20006044 	.word	0x20006044

0800c3c4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c3c4:	b480      	push	{r7}
 800c3c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c3c8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d2:	4770      	bx	lr

0800c3d4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800c3d4:	b480      	push	{r7}
 800c3d6:	b083      	sub	sp, #12
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	4603      	mov	r3, r0
 800c3dc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800c3de:	4b06      	ldr	r3, [pc, #24]	; (800c3f8 <USER_initialize+0x24>)
 800c3e0:	2201      	movs	r2, #1
 800c3e2:	701a      	strb	r2, [r3, #0]
    return Stat;
 800c3e4:	4b04      	ldr	r3, [pc, #16]	; (800c3f8 <USER_initialize+0x24>)
 800c3e6:	781b      	ldrb	r3, [r3, #0]
 800c3e8:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	370c      	adds	r7, #12
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f4:	4770      	bx	lr
 800c3f6:	bf00      	nop
 800c3f8:	20000065 	.word	0x20000065

0800c3fc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800c3fc:	b480      	push	{r7}
 800c3fe:	b083      	sub	sp, #12
 800c400:	af00      	add	r7, sp, #0
 800c402:	4603      	mov	r3, r0
 800c404:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800c406:	4b06      	ldr	r3, [pc, #24]	; (800c420 <USER_status+0x24>)
 800c408:	2201      	movs	r2, #1
 800c40a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800c40c:	4b04      	ldr	r3, [pc, #16]	; (800c420 <USER_status+0x24>)
 800c40e:	781b      	ldrb	r3, [r3, #0]
 800c410:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800c412:	4618      	mov	r0, r3
 800c414:	370c      	adds	r7, #12
 800c416:	46bd      	mov	sp, r7
 800c418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41c:	4770      	bx	lr
 800c41e:	bf00      	nop
 800c420:	20000065 	.word	0x20000065

0800c424 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800c424:	b480      	push	{r7}
 800c426:	b085      	sub	sp, #20
 800c428:	af00      	add	r7, sp, #0
 800c42a:	60b9      	str	r1, [r7, #8]
 800c42c:	607a      	str	r2, [r7, #4]
 800c42e:	603b      	str	r3, [r7, #0]
 800c430:	4603      	mov	r3, r0
 800c432:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800c434:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800c436:	4618      	mov	r0, r3
 800c438:	3714      	adds	r7, #20
 800c43a:	46bd      	mov	sp, r7
 800c43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c440:	4770      	bx	lr

0800c442 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800c442:	b480      	push	{r7}
 800c444:	b085      	sub	sp, #20
 800c446:	af00      	add	r7, sp, #0
 800c448:	60b9      	str	r1, [r7, #8]
 800c44a:	607a      	str	r2, [r7, #4]
 800c44c:	603b      	str	r3, [r7, #0]
 800c44e:	4603      	mov	r3, r0
 800c450:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800c452:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800c454:	4618      	mov	r0, r3
 800c456:	3714      	adds	r7, #20
 800c458:	46bd      	mov	sp, r7
 800c45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45e:	4770      	bx	lr

0800c460 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800c460:	b480      	push	{r7}
 800c462:	b085      	sub	sp, #20
 800c464:	af00      	add	r7, sp, #0
 800c466:	4603      	mov	r3, r0
 800c468:	603a      	str	r2, [r7, #0]
 800c46a:	71fb      	strb	r3, [r7, #7]
 800c46c:	460b      	mov	r3, r1
 800c46e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800c470:	2301      	movs	r3, #1
 800c472:	73fb      	strb	r3, [r7, #15]
    return res;
 800c474:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800c476:	4618      	mov	r0, r3
 800c478:	3714      	adds	r7, #20
 800c47a:	46bd      	mov	sp, r7
 800c47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c480:	4770      	bx	lr

0800c482 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c482:	b480      	push	{r7}
 800c484:	b083      	sub	sp, #12
 800c486:	af00      	add	r7, sp, #0
 800c488:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c48a:	2300      	movs	r3, #0
}
 800c48c:	4618      	mov	r0, r3
 800c48e:	370c      	adds	r7, #12
 800c490:	46bd      	mov	sp, r7
 800c492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c496:	4770      	bx	lr

0800c498 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b084      	sub	sp, #16
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
 800c4a0:	460b      	mov	r3, r1
 800c4a2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c4a4:	2303      	movs	r3, #3
 800c4a6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d009      	beq.n	800c4c6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	78fa      	ldrb	r2, [r7, #3]
 800c4bc:	4611      	mov	r1, r2
 800c4be:	6878      	ldr	r0, [r7, #4]
 800c4c0:	4798      	blx	r3
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c4c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	3710      	adds	r7, #16
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd80      	pop	{r7, pc}

0800c4d0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b082      	sub	sp, #8
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
 800c4d8:	460b      	mov	r3, r1
 800c4da:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d007      	beq.n	800c4f6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4ec:	685b      	ldr	r3, [r3, #4]
 800c4ee:	78fa      	ldrb	r2, [r7, #3]
 800c4f0:	4611      	mov	r1, r2
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	4798      	blx	r3
  }

  return USBD_OK;
 800c4f6:	2300      	movs	r3, #0
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	3708      	adds	r7, #8
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bd80      	pop	{r7, pc}

0800c500 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b084      	sub	sp, #16
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
 800c508:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c510:	6839      	ldr	r1, [r7, #0]
 800c512:	4618      	mov	r0, r3
 800c514:	f000 ff90 	bl	800d438 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2201      	movs	r2, #1
 800c51c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c526:	461a      	mov	r2, r3
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c534:	f003 031f 	and.w	r3, r3, #31
 800c538:	2b02      	cmp	r3, #2
 800c53a:	d01a      	beq.n	800c572 <USBD_LL_SetupStage+0x72>
 800c53c:	2b02      	cmp	r3, #2
 800c53e:	d822      	bhi.n	800c586 <USBD_LL_SetupStage+0x86>
 800c540:	2b00      	cmp	r3, #0
 800c542:	d002      	beq.n	800c54a <USBD_LL_SetupStage+0x4a>
 800c544:	2b01      	cmp	r3, #1
 800c546:	d00a      	beq.n	800c55e <USBD_LL_SetupStage+0x5e>
 800c548:	e01d      	b.n	800c586 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c550:	4619      	mov	r1, r3
 800c552:	6878      	ldr	r0, [r7, #4]
 800c554:	f000 fa62 	bl	800ca1c <USBD_StdDevReq>
 800c558:	4603      	mov	r3, r0
 800c55a:	73fb      	strb	r3, [r7, #15]
      break;
 800c55c:	e020      	b.n	800c5a0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c564:	4619      	mov	r1, r3
 800c566:	6878      	ldr	r0, [r7, #4]
 800c568:	f000 fac6 	bl	800caf8 <USBD_StdItfReq>
 800c56c:	4603      	mov	r3, r0
 800c56e:	73fb      	strb	r3, [r7, #15]
      break;
 800c570:	e016      	b.n	800c5a0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c578:	4619      	mov	r1, r3
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f000 fb05 	bl	800cb8a <USBD_StdEPReq>
 800c580:	4603      	mov	r3, r0
 800c582:	73fb      	strb	r3, [r7, #15]
      break;
 800c584:	e00c      	b.n	800c5a0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c58c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c590:	b2db      	uxtb	r3, r3
 800c592:	4619      	mov	r1, r3
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f006 f82b 	bl	80125f0 <USBD_LL_StallEP>
 800c59a:	4603      	mov	r3, r0
 800c59c:	73fb      	strb	r3, [r7, #15]
      break;
 800c59e:	bf00      	nop
  }

  return ret;
 800c5a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	3710      	adds	r7, #16
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bd80      	pop	{r7, pc}

0800c5aa <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c5aa:	b580      	push	{r7, lr}
 800c5ac:	b086      	sub	sp, #24
 800c5ae:	af00      	add	r7, sp, #0
 800c5b0:	60f8      	str	r0, [r7, #12]
 800c5b2:	460b      	mov	r3, r1
 800c5b4:	607a      	str	r2, [r7, #4]
 800c5b6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c5b8:	7afb      	ldrb	r3, [r7, #11]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d138      	bne.n	800c630 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c5c4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c5cc:	2b03      	cmp	r3, #3
 800c5ce:	d14a      	bne.n	800c666 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c5d0:	693b      	ldr	r3, [r7, #16]
 800c5d2:	689a      	ldr	r2, [r3, #8]
 800c5d4:	693b      	ldr	r3, [r7, #16]
 800c5d6:	68db      	ldr	r3, [r3, #12]
 800c5d8:	429a      	cmp	r2, r3
 800c5da:	d913      	bls.n	800c604 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c5dc:	693b      	ldr	r3, [r7, #16]
 800c5de:	689a      	ldr	r2, [r3, #8]
 800c5e0:	693b      	ldr	r3, [r7, #16]
 800c5e2:	68db      	ldr	r3, [r3, #12]
 800c5e4:	1ad2      	subs	r2, r2, r3
 800c5e6:	693b      	ldr	r3, [r7, #16]
 800c5e8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c5ea:	693b      	ldr	r3, [r7, #16]
 800c5ec:	68da      	ldr	r2, [r3, #12]
 800c5ee:	693b      	ldr	r3, [r7, #16]
 800c5f0:	689b      	ldr	r3, [r3, #8]
 800c5f2:	4293      	cmp	r3, r2
 800c5f4:	bf28      	it	cs
 800c5f6:	4613      	movcs	r3, r2
 800c5f8:	461a      	mov	r2, r3
 800c5fa:	6879      	ldr	r1, [r7, #4]
 800c5fc:	68f8      	ldr	r0, [r7, #12]
 800c5fe:	f000 ff92 	bl	800d526 <USBD_CtlContinueRx>
 800c602:	e030      	b.n	800c666 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c60a:	b2db      	uxtb	r3, r3
 800c60c:	2b03      	cmp	r3, #3
 800c60e:	d10b      	bne.n	800c628 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c616:	691b      	ldr	r3, [r3, #16]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d005      	beq.n	800c628 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c622:	691b      	ldr	r3, [r3, #16]
 800c624:	68f8      	ldr	r0, [r7, #12]
 800c626:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c628:	68f8      	ldr	r0, [r7, #12]
 800c62a:	f000 ff8d 	bl	800d548 <USBD_CtlSendStatus>
 800c62e:	e01a      	b.n	800c666 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c636:	b2db      	uxtb	r3, r3
 800c638:	2b03      	cmp	r3, #3
 800c63a:	d114      	bne.n	800c666 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c642:	699b      	ldr	r3, [r3, #24]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d00e      	beq.n	800c666 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c64e:	699b      	ldr	r3, [r3, #24]
 800c650:	7afa      	ldrb	r2, [r7, #11]
 800c652:	4611      	mov	r1, r2
 800c654:	68f8      	ldr	r0, [r7, #12]
 800c656:	4798      	blx	r3
 800c658:	4603      	mov	r3, r0
 800c65a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c65c:	7dfb      	ldrb	r3, [r7, #23]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d001      	beq.n	800c666 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800c662:	7dfb      	ldrb	r3, [r7, #23]
 800c664:	e000      	b.n	800c668 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800c666:	2300      	movs	r3, #0
}
 800c668:	4618      	mov	r0, r3
 800c66a:	3718      	adds	r7, #24
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bd80      	pop	{r7, pc}

0800c670 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b086      	sub	sp, #24
 800c674:	af00      	add	r7, sp, #0
 800c676:	60f8      	str	r0, [r7, #12]
 800c678:	460b      	mov	r3, r1
 800c67a:	607a      	str	r2, [r7, #4]
 800c67c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c67e:	7afb      	ldrb	r3, [r7, #11]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d16b      	bne.n	800c75c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	3314      	adds	r3, #20
 800c688:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c690:	2b02      	cmp	r3, #2
 800c692:	d156      	bne.n	800c742 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c694:	693b      	ldr	r3, [r7, #16]
 800c696:	689a      	ldr	r2, [r3, #8]
 800c698:	693b      	ldr	r3, [r7, #16]
 800c69a:	68db      	ldr	r3, [r3, #12]
 800c69c:	429a      	cmp	r2, r3
 800c69e:	d914      	bls.n	800c6ca <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c6a0:	693b      	ldr	r3, [r7, #16]
 800c6a2:	689a      	ldr	r2, [r3, #8]
 800c6a4:	693b      	ldr	r3, [r7, #16]
 800c6a6:	68db      	ldr	r3, [r3, #12]
 800c6a8:	1ad2      	subs	r2, r2, r3
 800c6aa:	693b      	ldr	r3, [r7, #16]
 800c6ac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c6ae:	693b      	ldr	r3, [r7, #16]
 800c6b0:	689b      	ldr	r3, [r3, #8]
 800c6b2:	461a      	mov	r2, r3
 800c6b4:	6879      	ldr	r1, [r7, #4]
 800c6b6:	68f8      	ldr	r0, [r7, #12]
 800c6b8:	f000 ff24 	bl	800d504 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c6bc:	2300      	movs	r3, #0
 800c6be:	2200      	movs	r2, #0
 800c6c0:	2100      	movs	r1, #0
 800c6c2:	68f8      	ldr	r0, [r7, #12]
 800c6c4:	f006 f83e 	bl	8012744 <USBD_LL_PrepareReceive>
 800c6c8:	e03b      	b.n	800c742 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c6ca:	693b      	ldr	r3, [r7, #16]
 800c6cc:	68da      	ldr	r2, [r3, #12]
 800c6ce:	693b      	ldr	r3, [r7, #16]
 800c6d0:	689b      	ldr	r3, [r3, #8]
 800c6d2:	429a      	cmp	r2, r3
 800c6d4:	d11c      	bne.n	800c710 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c6d6:	693b      	ldr	r3, [r7, #16]
 800c6d8:	685a      	ldr	r2, [r3, #4]
 800c6da:	693b      	ldr	r3, [r7, #16]
 800c6dc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c6de:	429a      	cmp	r2, r3
 800c6e0:	d316      	bcc.n	800c710 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	685a      	ldr	r2, [r3, #4]
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c6ec:	429a      	cmp	r2, r3
 800c6ee:	d20f      	bcs.n	800c710 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	2100      	movs	r1, #0
 800c6f4:	68f8      	ldr	r0, [r7, #12]
 800c6f6:	f000 ff05 	bl	800d504 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c702:	2300      	movs	r3, #0
 800c704:	2200      	movs	r2, #0
 800c706:	2100      	movs	r1, #0
 800c708:	68f8      	ldr	r0, [r7, #12]
 800c70a:	f006 f81b 	bl	8012744 <USBD_LL_PrepareReceive>
 800c70e:	e018      	b.n	800c742 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c716:	b2db      	uxtb	r3, r3
 800c718:	2b03      	cmp	r3, #3
 800c71a:	d10b      	bne.n	800c734 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c722:	68db      	ldr	r3, [r3, #12]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d005      	beq.n	800c734 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c72e:	68db      	ldr	r3, [r3, #12]
 800c730:	68f8      	ldr	r0, [r7, #12]
 800c732:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c734:	2180      	movs	r1, #128	; 0x80
 800c736:	68f8      	ldr	r0, [r7, #12]
 800c738:	f005 ff5a 	bl	80125f0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c73c:	68f8      	ldr	r0, [r7, #12]
 800c73e:	f000 ff16 	bl	800d56e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c748:	2b01      	cmp	r3, #1
 800c74a:	d122      	bne.n	800c792 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c74c:	68f8      	ldr	r0, [r7, #12]
 800c74e:	f7ff fe98 	bl	800c482 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	2200      	movs	r2, #0
 800c756:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c75a:	e01a      	b.n	800c792 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c762:	b2db      	uxtb	r3, r3
 800c764:	2b03      	cmp	r3, #3
 800c766:	d114      	bne.n	800c792 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c76e:	695b      	ldr	r3, [r3, #20]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d00e      	beq.n	800c792 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c77a:	695b      	ldr	r3, [r3, #20]
 800c77c:	7afa      	ldrb	r2, [r7, #11]
 800c77e:	4611      	mov	r1, r2
 800c780:	68f8      	ldr	r0, [r7, #12]
 800c782:	4798      	blx	r3
 800c784:	4603      	mov	r3, r0
 800c786:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c788:	7dfb      	ldrb	r3, [r7, #23]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d001      	beq.n	800c792 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800c78e:	7dfb      	ldrb	r3, [r7, #23]
 800c790:	e000      	b.n	800c794 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800c792:	2300      	movs	r3, #0
}
 800c794:	4618      	mov	r0, r3
 800c796:	3718      	adds	r7, #24
 800c798:	46bd      	mov	sp, r7
 800c79a:	bd80      	pop	{r7, pc}

0800c79c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b082      	sub	sp, #8
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2201      	movs	r2, #1
 800c7a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	2200      	movs	r2, #0
 800c7be:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d101      	bne.n	800c7d0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800c7cc:	2303      	movs	r3, #3
 800c7ce:	e02f      	b.n	800c830 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d00f      	beq.n	800c7fa <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7e0:	685b      	ldr	r3, [r3, #4]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d009      	beq.n	800c7fa <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7ec:	685b      	ldr	r3, [r3, #4]
 800c7ee:	687a      	ldr	r2, [r7, #4]
 800c7f0:	6852      	ldr	r2, [r2, #4]
 800c7f2:	b2d2      	uxtb	r2, r2
 800c7f4:	4611      	mov	r1, r2
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c7fa:	2340      	movs	r3, #64	; 0x40
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	2100      	movs	r1, #0
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f005 fecf 	bl	80125a4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2201      	movs	r2, #1
 800c80a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	2240      	movs	r2, #64	; 0x40
 800c812:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c816:	2340      	movs	r3, #64	; 0x40
 800c818:	2200      	movs	r2, #0
 800c81a:	2180      	movs	r1, #128	; 0x80
 800c81c:	6878      	ldr	r0, [r7, #4]
 800c81e:	f005 fec1 	bl	80125a4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2201      	movs	r2, #1
 800c826:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2240      	movs	r2, #64	; 0x40
 800c82c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c82e:	2300      	movs	r3, #0
}
 800c830:	4618      	mov	r0, r3
 800c832:	3708      	adds	r7, #8
 800c834:	46bd      	mov	sp, r7
 800c836:	bd80      	pop	{r7, pc}

0800c838 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c838:	b480      	push	{r7}
 800c83a:	b083      	sub	sp, #12
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
 800c840:	460b      	mov	r3, r1
 800c842:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	78fa      	ldrb	r2, [r7, #3]
 800c848:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c84a:	2300      	movs	r3, #0
}
 800c84c:	4618      	mov	r0, r3
 800c84e:	370c      	adds	r7, #12
 800c850:	46bd      	mov	sp, r7
 800c852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c856:	4770      	bx	lr

0800c858 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c858:	b480      	push	{r7}
 800c85a:	b083      	sub	sp, #12
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c866:	b2da      	uxtb	r2, r3
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2204      	movs	r2, #4
 800c872:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c876:	2300      	movs	r3, #0
}
 800c878:	4618      	mov	r0, r3
 800c87a:	370c      	adds	r7, #12
 800c87c:	46bd      	mov	sp, r7
 800c87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c882:	4770      	bx	lr

0800c884 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c884:	b480      	push	{r7}
 800c886:	b083      	sub	sp, #12
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c892:	b2db      	uxtb	r3, r3
 800c894:	2b04      	cmp	r3, #4
 800c896:	d106      	bne.n	800c8a6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c89e:	b2da      	uxtb	r2, r3
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c8a6:	2300      	movs	r3, #0
}
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	370c      	adds	r7, #12
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b2:	4770      	bx	lr

0800c8b4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b082      	sub	sp, #8
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d101      	bne.n	800c8ca <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800c8c6:	2303      	movs	r3, #3
 800c8c8:	e012      	b.n	800c8f0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8d0:	b2db      	uxtb	r3, r3
 800c8d2:	2b03      	cmp	r3, #3
 800c8d4:	d10b      	bne.n	800c8ee <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8dc:	69db      	ldr	r3, [r3, #28]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d005      	beq.n	800c8ee <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8e8:	69db      	ldr	r3, [r3, #28]
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c8ee:	2300      	movs	r3, #0
}
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	3708      	adds	r7, #8
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}

0800c8f8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b082      	sub	sp, #8
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	460b      	mov	r3, r1
 800c902:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d101      	bne.n	800c912 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800c90e:	2303      	movs	r3, #3
 800c910:	e014      	b.n	800c93c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c918:	b2db      	uxtb	r3, r3
 800c91a:	2b03      	cmp	r3, #3
 800c91c:	d10d      	bne.n	800c93a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c924:	6a1b      	ldr	r3, [r3, #32]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d007      	beq.n	800c93a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c930:	6a1b      	ldr	r3, [r3, #32]
 800c932:	78fa      	ldrb	r2, [r7, #3]
 800c934:	4611      	mov	r1, r2
 800c936:	6878      	ldr	r0, [r7, #4]
 800c938:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c93a:	2300      	movs	r3, #0
}
 800c93c:	4618      	mov	r0, r3
 800c93e:	3708      	adds	r7, #8
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}

0800c944 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b082      	sub	sp, #8
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
 800c94c:	460b      	mov	r3, r1
 800c94e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c956:	2b00      	cmp	r3, #0
 800c958:	d101      	bne.n	800c95e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800c95a:	2303      	movs	r3, #3
 800c95c:	e014      	b.n	800c988 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c964:	b2db      	uxtb	r3, r3
 800c966:	2b03      	cmp	r3, #3
 800c968:	d10d      	bne.n	800c986 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c972:	2b00      	cmp	r3, #0
 800c974:	d007      	beq.n	800c986 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c97c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c97e:	78fa      	ldrb	r2, [r7, #3]
 800c980:	4611      	mov	r1, r2
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c986:	2300      	movs	r3, #0
}
 800c988:	4618      	mov	r0, r3
 800c98a:	3708      	adds	r7, #8
 800c98c:	46bd      	mov	sp, r7
 800c98e:	bd80      	pop	{r7, pc}

0800c990 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c990:	b480      	push	{r7}
 800c992:	b083      	sub	sp, #12
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c998:	2300      	movs	r3, #0
}
 800c99a:	4618      	mov	r0, r3
 800c99c:	370c      	adds	r7, #12
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a4:	4770      	bx	lr

0800c9a6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c9a6:	b580      	push	{r7, lr}
 800c9a8:	b082      	sub	sp, #8
 800c9aa:	af00      	add	r7, sp, #0
 800c9ac:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2201      	movs	r2, #1
 800c9b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d009      	beq.n	800c9d4 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9c6:	685b      	ldr	r3, [r3, #4]
 800c9c8:	687a      	ldr	r2, [r7, #4]
 800c9ca:	6852      	ldr	r2, [r2, #4]
 800c9cc:	b2d2      	uxtb	r2, r2
 800c9ce:	4611      	mov	r1, r2
 800c9d0:	6878      	ldr	r0, [r7, #4]
 800c9d2:	4798      	blx	r3
  }

  return USBD_OK;
 800c9d4:	2300      	movs	r3, #0
}
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	3708      	adds	r7, #8
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	bd80      	pop	{r7, pc}

0800c9de <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c9de:	b480      	push	{r7}
 800c9e0:	b087      	sub	sp, #28
 800c9e2:	af00      	add	r7, sp, #0
 800c9e4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c9ea:	697b      	ldr	r3, [r7, #20]
 800c9ec:	781b      	ldrb	r3, [r3, #0]
 800c9ee:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c9f0:	697b      	ldr	r3, [r7, #20]
 800c9f2:	3301      	adds	r3, #1
 800c9f4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c9f6:	697b      	ldr	r3, [r7, #20]
 800c9f8:	781b      	ldrb	r3, [r3, #0]
 800c9fa:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c9fc:	8a3b      	ldrh	r3, [r7, #16]
 800c9fe:	021b      	lsls	r3, r3, #8
 800ca00:	b21a      	sxth	r2, r3
 800ca02:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ca06:	4313      	orrs	r3, r2
 800ca08:	b21b      	sxth	r3, r3
 800ca0a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ca0c:	89fb      	ldrh	r3, [r7, #14]
}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	371c      	adds	r7, #28
 800ca12:	46bd      	mov	sp, r7
 800ca14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca18:	4770      	bx	lr
	...

0800ca1c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b084      	sub	sp, #16
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
 800ca24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca26:	2300      	movs	r3, #0
 800ca28:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	781b      	ldrb	r3, [r3, #0]
 800ca2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ca32:	2b40      	cmp	r3, #64	; 0x40
 800ca34:	d005      	beq.n	800ca42 <USBD_StdDevReq+0x26>
 800ca36:	2b40      	cmp	r3, #64	; 0x40
 800ca38:	d853      	bhi.n	800cae2 <USBD_StdDevReq+0xc6>
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d00b      	beq.n	800ca56 <USBD_StdDevReq+0x3a>
 800ca3e:	2b20      	cmp	r3, #32
 800ca40:	d14f      	bne.n	800cae2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca48:	689b      	ldr	r3, [r3, #8]
 800ca4a:	6839      	ldr	r1, [r7, #0]
 800ca4c:	6878      	ldr	r0, [r7, #4]
 800ca4e:	4798      	blx	r3
 800ca50:	4603      	mov	r3, r0
 800ca52:	73fb      	strb	r3, [r7, #15]
      break;
 800ca54:	e04a      	b.n	800caec <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	785b      	ldrb	r3, [r3, #1]
 800ca5a:	2b09      	cmp	r3, #9
 800ca5c:	d83b      	bhi.n	800cad6 <USBD_StdDevReq+0xba>
 800ca5e:	a201      	add	r2, pc, #4	; (adr r2, 800ca64 <USBD_StdDevReq+0x48>)
 800ca60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca64:	0800cab9 	.word	0x0800cab9
 800ca68:	0800cacd 	.word	0x0800cacd
 800ca6c:	0800cad7 	.word	0x0800cad7
 800ca70:	0800cac3 	.word	0x0800cac3
 800ca74:	0800cad7 	.word	0x0800cad7
 800ca78:	0800ca97 	.word	0x0800ca97
 800ca7c:	0800ca8d 	.word	0x0800ca8d
 800ca80:	0800cad7 	.word	0x0800cad7
 800ca84:	0800caaf 	.word	0x0800caaf
 800ca88:	0800caa1 	.word	0x0800caa1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ca8c:	6839      	ldr	r1, [r7, #0]
 800ca8e:	6878      	ldr	r0, [r7, #4]
 800ca90:	f000 f9de 	bl	800ce50 <USBD_GetDescriptor>
          break;
 800ca94:	e024      	b.n	800cae0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ca96:	6839      	ldr	r1, [r7, #0]
 800ca98:	6878      	ldr	r0, [r7, #4]
 800ca9a:	f000 fb43 	bl	800d124 <USBD_SetAddress>
          break;
 800ca9e:	e01f      	b.n	800cae0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800caa0:	6839      	ldr	r1, [r7, #0]
 800caa2:	6878      	ldr	r0, [r7, #4]
 800caa4:	f000 fb82 	bl	800d1ac <USBD_SetConfig>
 800caa8:	4603      	mov	r3, r0
 800caaa:	73fb      	strb	r3, [r7, #15]
          break;
 800caac:	e018      	b.n	800cae0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800caae:	6839      	ldr	r1, [r7, #0]
 800cab0:	6878      	ldr	r0, [r7, #4]
 800cab2:	f000 fc21 	bl	800d2f8 <USBD_GetConfig>
          break;
 800cab6:	e013      	b.n	800cae0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cab8:	6839      	ldr	r1, [r7, #0]
 800caba:	6878      	ldr	r0, [r7, #4]
 800cabc:	f000 fc52 	bl	800d364 <USBD_GetStatus>
          break;
 800cac0:	e00e      	b.n	800cae0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cac2:	6839      	ldr	r1, [r7, #0]
 800cac4:	6878      	ldr	r0, [r7, #4]
 800cac6:	f000 fc81 	bl	800d3cc <USBD_SetFeature>
          break;
 800caca:	e009      	b.n	800cae0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cacc:	6839      	ldr	r1, [r7, #0]
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	f000 fc90 	bl	800d3f4 <USBD_ClrFeature>
          break;
 800cad4:	e004      	b.n	800cae0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800cad6:	6839      	ldr	r1, [r7, #0]
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f000 fce7 	bl	800d4ac <USBD_CtlError>
          break;
 800cade:	bf00      	nop
      }
      break;
 800cae0:	e004      	b.n	800caec <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800cae2:	6839      	ldr	r1, [r7, #0]
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	f000 fce1 	bl	800d4ac <USBD_CtlError>
      break;
 800caea:	bf00      	nop
  }

  return ret;
 800caec:	7bfb      	ldrb	r3, [r7, #15]
}
 800caee:	4618      	mov	r0, r3
 800caf0:	3710      	adds	r7, #16
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}
 800caf6:	bf00      	nop

0800caf8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b084      	sub	sp, #16
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
 800cb00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cb02:	2300      	movs	r3, #0
 800cb04:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	781b      	ldrb	r3, [r3, #0]
 800cb0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cb0e:	2b40      	cmp	r3, #64	; 0x40
 800cb10:	d005      	beq.n	800cb1e <USBD_StdItfReq+0x26>
 800cb12:	2b40      	cmp	r3, #64	; 0x40
 800cb14:	d82f      	bhi.n	800cb76 <USBD_StdItfReq+0x7e>
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d001      	beq.n	800cb1e <USBD_StdItfReq+0x26>
 800cb1a:	2b20      	cmp	r3, #32
 800cb1c:	d12b      	bne.n	800cb76 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb24:	b2db      	uxtb	r3, r3
 800cb26:	3b01      	subs	r3, #1
 800cb28:	2b02      	cmp	r3, #2
 800cb2a:	d81d      	bhi.n	800cb68 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	889b      	ldrh	r3, [r3, #4]
 800cb30:	b2db      	uxtb	r3, r3
 800cb32:	2b01      	cmp	r3, #1
 800cb34:	d813      	bhi.n	800cb5e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb3c:	689b      	ldr	r3, [r3, #8]
 800cb3e:	6839      	ldr	r1, [r7, #0]
 800cb40:	6878      	ldr	r0, [r7, #4]
 800cb42:	4798      	blx	r3
 800cb44:	4603      	mov	r3, r0
 800cb46:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	88db      	ldrh	r3, [r3, #6]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d110      	bne.n	800cb72 <USBD_StdItfReq+0x7a>
 800cb50:	7bfb      	ldrb	r3, [r7, #15]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d10d      	bne.n	800cb72 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800cb56:	6878      	ldr	r0, [r7, #4]
 800cb58:	f000 fcf6 	bl	800d548 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cb5c:	e009      	b.n	800cb72 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800cb5e:	6839      	ldr	r1, [r7, #0]
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	f000 fca3 	bl	800d4ac <USBD_CtlError>
          break;
 800cb66:	e004      	b.n	800cb72 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800cb68:	6839      	ldr	r1, [r7, #0]
 800cb6a:	6878      	ldr	r0, [r7, #4]
 800cb6c:	f000 fc9e 	bl	800d4ac <USBD_CtlError>
          break;
 800cb70:	e000      	b.n	800cb74 <USBD_StdItfReq+0x7c>
          break;
 800cb72:	bf00      	nop
      }
      break;
 800cb74:	e004      	b.n	800cb80 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800cb76:	6839      	ldr	r1, [r7, #0]
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f000 fc97 	bl	800d4ac <USBD_CtlError>
      break;
 800cb7e:	bf00      	nop
  }

  return ret;
 800cb80:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb82:	4618      	mov	r0, r3
 800cb84:	3710      	adds	r7, #16
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}

0800cb8a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb8a:	b580      	push	{r7, lr}
 800cb8c:	b084      	sub	sp, #16
 800cb8e:	af00      	add	r7, sp, #0
 800cb90:	6078      	str	r0, [r7, #4]
 800cb92:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800cb94:	2300      	movs	r3, #0
 800cb96:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	889b      	ldrh	r3, [r3, #4]
 800cb9c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	781b      	ldrb	r3, [r3, #0]
 800cba2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cba6:	2b40      	cmp	r3, #64	; 0x40
 800cba8:	d007      	beq.n	800cbba <USBD_StdEPReq+0x30>
 800cbaa:	2b40      	cmp	r3, #64	; 0x40
 800cbac:	f200 8145 	bhi.w	800ce3a <USBD_StdEPReq+0x2b0>
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d00c      	beq.n	800cbce <USBD_StdEPReq+0x44>
 800cbb4:	2b20      	cmp	r3, #32
 800cbb6:	f040 8140 	bne.w	800ce3a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbc0:	689b      	ldr	r3, [r3, #8]
 800cbc2:	6839      	ldr	r1, [r7, #0]
 800cbc4:	6878      	ldr	r0, [r7, #4]
 800cbc6:	4798      	blx	r3
 800cbc8:	4603      	mov	r3, r0
 800cbca:	73fb      	strb	r3, [r7, #15]
      break;
 800cbcc:	e13a      	b.n	800ce44 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	785b      	ldrb	r3, [r3, #1]
 800cbd2:	2b03      	cmp	r3, #3
 800cbd4:	d007      	beq.n	800cbe6 <USBD_StdEPReq+0x5c>
 800cbd6:	2b03      	cmp	r3, #3
 800cbd8:	f300 8129 	bgt.w	800ce2e <USBD_StdEPReq+0x2a4>
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d07f      	beq.n	800cce0 <USBD_StdEPReq+0x156>
 800cbe0:	2b01      	cmp	r3, #1
 800cbe2:	d03c      	beq.n	800cc5e <USBD_StdEPReq+0xd4>
 800cbe4:	e123      	b.n	800ce2e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbec:	b2db      	uxtb	r3, r3
 800cbee:	2b02      	cmp	r3, #2
 800cbf0:	d002      	beq.n	800cbf8 <USBD_StdEPReq+0x6e>
 800cbf2:	2b03      	cmp	r3, #3
 800cbf4:	d016      	beq.n	800cc24 <USBD_StdEPReq+0x9a>
 800cbf6:	e02c      	b.n	800cc52 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cbf8:	7bbb      	ldrb	r3, [r7, #14]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d00d      	beq.n	800cc1a <USBD_StdEPReq+0x90>
 800cbfe:	7bbb      	ldrb	r3, [r7, #14]
 800cc00:	2b80      	cmp	r3, #128	; 0x80
 800cc02:	d00a      	beq.n	800cc1a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cc04:	7bbb      	ldrb	r3, [r7, #14]
 800cc06:	4619      	mov	r1, r3
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f005 fcf1 	bl	80125f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cc0e:	2180      	movs	r1, #128	; 0x80
 800cc10:	6878      	ldr	r0, [r7, #4]
 800cc12:	f005 fced 	bl	80125f0 <USBD_LL_StallEP>
 800cc16:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cc18:	e020      	b.n	800cc5c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800cc1a:	6839      	ldr	r1, [r7, #0]
 800cc1c:	6878      	ldr	r0, [r7, #4]
 800cc1e:	f000 fc45 	bl	800d4ac <USBD_CtlError>
              break;
 800cc22:	e01b      	b.n	800cc5c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	885b      	ldrh	r3, [r3, #2]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d10e      	bne.n	800cc4a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cc2c:	7bbb      	ldrb	r3, [r7, #14]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d00b      	beq.n	800cc4a <USBD_StdEPReq+0xc0>
 800cc32:	7bbb      	ldrb	r3, [r7, #14]
 800cc34:	2b80      	cmp	r3, #128	; 0x80
 800cc36:	d008      	beq.n	800cc4a <USBD_StdEPReq+0xc0>
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	88db      	ldrh	r3, [r3, #6]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d104      	bne.n	800cc4a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cc40:	7bbb      	ldrb	r3, [r7, #14]
 800cc42:	4619      	mov	r1, r3
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f005 fcd3 	bl	80125f0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cc4a:	6878      	ldr	r0, [r7, #4]
 800cc4c:	f000 fc7c 	bl	800d548 <USBD_CtlSendStatus>

              break;
 800cc50:	e004      	b.n	800cc5c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800cc52:	6839      	ldr	r1, [r7, #0]
 800cc54:	6878      	ldr	r0, [r7, #4]
 800cc56:	f000 fc29 	bl	800d4ac <USBD_CtlError>
              break;
 800cc5a:	bf00      	nop
          }
          break;
 800cc5c:	e0ec      	b.n	800ce38 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc64:	b2db      	uxtb	r3, r3
 800cc66:	2b02      	cmp	r3, #2
 800cc68:	d002      	beq.n	800cc70 <USBD_StdEPReq+0xe6>
 800cc6a:	2b03      	cmp	r3, #3
 800cc6c:	d016      	beq.n	800cc9c <USBD_StdEPReq+0x112>
 800cc6e:	e030      	b.n	800ccd2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cc70:	7bbb      	ldrb	r3, [r7, #14]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d00d      	beq.n	800cc92 <USBD_StdEPReq+0x108>
 800cc76:	7bbb      	ldrb	r3, [r7, #14]
 800cc78:	2b80      	cmp	r3, #128	; 0x80
 800cc7a:	d00a      	beq.n	800cc92 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cc7c:	7bbb      	ldrb	r3, [r7, #14]
 800cc7e:	4619      	mov	r1, r3
 800cc80:	6878      	ldr	r0, [r7, #4]
 800cc82:	f005 fcb5 	bl	80125f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cc86:	2180      	movs	r1, #128	; 0x80
 800cc88:	6878      	ldr	r0, [r7, #4]
 800cc8a:	f005 fcb1 	bl	80125f0 <USBD_LL_StallEP>
 800cc8e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cc90:	e025      	b.n	800ccde <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800cc92:	6839      	ldr	r1, [r7, #0]
 800cc94:	6878      	ldr	r0, [r7, #4]
 800cc96:	f000 fc09 	bl	800d4ac <USBD_CtlError>
              break;
 800cc9a:	e020      	b.n	800ccde <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	885b      	ldrh	r3, [r3, #2]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d11b      	bne.n	800ccdc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cca4:	7bbb      	ldrb	r3, [r7, #14]
 800cca6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d004      	beq.n	800ccb8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ccae:	7bbb      	ldrb	r3, [r7, #14]
 800ccb0:	4619      	mov	r1, r3
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	f005 fcbb 	bl	801262e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	f000 fc45 	bl	800d548 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ccc4:	689b      	ldr	r3, [r3, #8]
 800ccc6:	6839      	ldr	r1, [r7, #0]
 800ccc8:	6878      	ldr	r0, [r7, #4]
 800ccca:	4798      	blx	r3
 800cccc:	4603      	mov	r3, r0
 800ccce:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800ccd0:	e004      	b.n	800ccdc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800ccd2:	6839      	ldr	r1, [r7, #0]
 800ccd4:	6878      	ldr	r0, [r7, #4]
 800ccd6:	f000 fbe9 	bl	800d4ac <USBD_CtlError>
              break;
 800ccda:	e000      	b.n	800ccde <USBD_StdEPReq+0x154>
              break;
 800ccdc:	bf00      	nop
          }
          break;
 800ccde:	e0ab      	b.n	800ce38 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cce6:	b2db      	uxtb	r3, r3
 800cce8:	2b02      	cmp	r3, #2
 800ccea:	d002      	beq.n	800ccf2 <USBD_StdEPReq+0x168>
 800ccec:	2b03      	cmp	r3, #3
 800ccee:	d032      	beq.n	800cd56 <USBD_StdEPReq+0x1cc>
 800ccf0:	e097      	b.n	800ce22 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ccf2:	7bbb      	ldrb	r3, [r7, #14]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d007      	beq.n	800cd08 <USBD_StdEPReq+0x17e>
 800ccf8:	7bbb      	ldrb	r3, [r7, #14]
 800ccfa:	2b80      	cmp	r3, #128	; 0x80
 800ccfc:	d004      	beq.n	800cd08 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800ccfe:	6839      	ldr	r1, [r7, #0]
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	f000 fbd3 	bl	800d4ac <USBD_CtlError>
                break;
 800cd06:	e091      	b.n	800ce2c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cd08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	da0b      	bge.n	800cd28 <USBD_StdEPReq+0x19e>
 800cd10:	7bbb      	ldrb	r3, [r7, #14]
 800cd12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cd16:	4613      	mov	r3, r2
 800cd18:	009b      	lsls	r3, r3, #2
 800cd1a:	4413      	add	r3, r2
 800cd1c:	009b      	lsls	r3, r3, #2
 800cd1e:	3310      	adds	r3, #16
 800cd20:	687a      	ldr	r2, [r7, #4]
 800cd22:	4413      	add	r3, r2
 800cd24:	3304      	adds	r3, #4
 800cd26:	e00b      	b.n	800cd40 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cd28:	7bbb      	ldrb	r3, [r7, #14]
 800cd2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cd2e:	4613      	mov	r3, r2
 800cd30:	009b      	lsls	r3, r3, #2
 800cd32:	4413      	add	r3, r2
 800cd34:	009b      	lsls	r3, r3, #2
 800cd36:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cd3a:	687a      	ldr	r2, [r7, #4]
 800cd3c:	4413      	add	r3, r2
 800cd3e:	3304      	adds	r3, #4
 800cd40:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cd42:	68bb      	ldr	r3, [r7, #8]
 800cd44:	2200      	movs	r2, #0
 800cd46:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	2202      	movs	r2, #2
 800cd4c:	4619      	mov	r1, r3
 800cd4e:	6878      	ldr	r0, [r7, #4]
 800cd50:	f000 fbbd 	bl	800d4ce <USBD_CtlSendData>
              break;
 800cd54:	e06a      	b.n	800ce2c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cd56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	da11      	bge.n	800cd82 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cd5e:	7bbb      	ldrb	r3, [r7, #14]
 800cd60:	f003 020f 	and.w	r2, r3, #15
 800cd64:	6879      	ldr	r1, [r7, #4]
 800cd66:	4613      	mov	r3, r2
 800cd68:	009b      	lsls	r3, r3, #2
 800cd6a:	4413      	add	r3, r2
 800cd6c:	009b      	lsls	r3, r3, #2
 800cd6e:	440b      	add	r3, r1
 800cd70:	3324      	adds	r3, #36	; 0x24
 800cd72:	881b      	ldrh	r3, [r3, #0]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d117      	bne.n	800cda8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800cd78:	6839      	ldr	r1, [r7, #0]
 800cd7a:	6878      	ldr	r0, [r7, #4]
 800cd7c:	f000 fb96 	bl	800d4ac <USBD_CtlError>
                  break;
 800cd80:	e054      	b.n	800ce2c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cd82:	7bbb      	ldrb	r3, [r7, #14]
 800cd84:	f003 020f 	and.w	r2, r3, #15
 800cd88:	6879      	ldr	r1, [r7, #4]
 800cd8a:	4613      	mov	r3, r2
 800cd8c:	009b      	lsls	r3, r3, #2
 800cd8e:	4413      	add	r3, r2
 800cd90:	009b      	lsls	r3, r3, #2
 800cd92:	440b      	add	r3, r1
 800cd94:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cd98:	881b      	ldrh	r3, [r3, #0]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d104      	bne.n	800cda8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800cd9e:	6839      	ldr	r1, [r7, #0]
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	f000 fb83 	bl	800d4ac <USBD_CtlError>
                  break;
 800cda6:	e041      	b.n	800ce2c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cda8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	da0b      	bge.n	800cdc8 <USBD_StdEPReq+0x23e>
 800cdb0:	7bbb      	ldrb	r3, [r7, #14]
 800cdb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cdb6:	4613      	mov	r3, r2
 800cdb8:	009b      	lsls	r3, r3, #2
 800cdba:	4413      	add	r3, r2
 800cdbc:	009b      	lsls	r3, r3, #2
 800cdbe:	3310      	adds	r3, #16
 800cdc0:	687a      	ldr	r2, [r7, #4]
 800cdc2:	4413      	add	r3, r2
 800cdc4:	3304      	adds	r3, #4
 800cdc6:	e00b      	b.n	800cde0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cdc8:	7bbb      	ldrb	r3, [r7, #14]
 800cdca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cdce:	4613      	mov	r3, r2
 800cdd0:	009b      	lsls	r3, r3, #2
 800cdd2:	4413      	add	r3, r2
 800cdd4:	009b      	lsls	r3, r3, #2
 800cdd6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cdda:	687a      	ldr	r2, [r7, #4]
 800cddc:	4413      	add	r3, r2
 800cdde:	3304      	adds	r3, #4
 800cde0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cde2:	7bbb      	ldrb	r3, [r7, #14]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d002      	beq.n	800cdee <USBD_StdEPReq+0x264>
 800cde8:	7bbb      	ldrb	r3, [r7, #14]
 800cdea:	2b80      	cmp	r3, #128	; 0x80
 800cdec:	d103      	bne.n	800cdf6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800cdee:	68bb      	ldr	r3, [r7, #8]
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	601a      	str	r2, [r3, #0]
 800cdf4:	e00e      	b.n	800ce14 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cdf6:	7bbb      	ldrb	r3, [r7, #14]
 800cdf8:	4619      	mov	r1, r3
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f005 fc36 	bl	801266c <USBD_LL_IsStallEP>
 800ce00:	4603      	mov	r3, r0
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d003      	beq.n	800ce0e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800ce06:	68bb      	ldr	r3, [r7, #8]
 800ce08:	2201      	movs	r2, #1
 800ce0a:	601a      	str	r2, [r3, #0]
 800ce0c:	e002      	b.n	800ce14 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800ce0e:	68bb      	ldr	r3, [r7, #8]
 800ce10:	2200      	movs	r2, #0
 800ce12:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ce14:	68bb      	ldr	r3, [r7, #8]
 800ce16:	2202      	movs	r2, #2
 800ce18:	4619      	mov	r1, r3
 800ce1a:	6878      	ldr	r0, [r7, #4]
 800ce1c:	f000 fb57 	bl	800d4ce <USBD_CtlSendData>
              break;
 800ce20:	e004      	b.n	800ce2c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800ce22:	6839      	ldr	r1, [r7, #0]
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	f000 fb41 	bl	800d4ac <USBD_CtlError>
              break;
 800ce2a:	bf00      	nop
          }
          break;
 800ce2c:	e004      	b.n	800ce38 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800ce2e:	6839      	ldr	r1, [r7, #0]
 800ce30:	6878      	ldr	r0, [r7, #4]
 800ce32:	f000 fb3b 	bl	800d4ac <USBD_CtlError>
          break;
 800ce36:	bf00      	nop
      }
      break;
 800ce38:	e004      	b.n	800ce44 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800ce3a:	6839      	ldr	r1, [r7, #0]
 800ce3c:	6878      	ldr	r0, [r7, #4]
 800ce3e:	f000 fb35 	bl	800d4ac <USBD_CtlError>
      break;
 800ce42:	bf00      	nop
  }

  return ret;
 800ce44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce46:	4618      	mov	r0, r3
 800ce48:	3710      	adds	r7, #16
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}
	...

0800ce50 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b084      	sub	sp, #16
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
 800ce58:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ce5e:	2300      	movs	r3, #0
 800ce60:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ce62:	2300      	movs	r3, #0
 800ce64:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	885b      	ldrh	r3, [r3, #2]
 800ce6a:	0a1b      	lsrs	r3, r3, #8
 800ce6c:	b29b      	uxth	r3, r3
 800ce6e:	3b01      	subs	r3, #1
 800ce70:	2b06      	cmp	r3, #6
 800ce72:	f200 8128 	bhi.w	800d0c6 <USBD_GetDescriptor+0x276>
 800ce76:	a201      	add	r2, pc, #4	; (adr r2, 800ce7c <USBD_GetDescriptor+0x2c>)
 800ce78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce7c:	0800ce99 	.word	0x0800ce99
 800ce80:	0800ceb1 	.word	0x0800ceb1
 800ce84:	0800cef1 	.word	0x0800cef1
 800ce88:	0800d0c7 	.word	0x0800d0c7
 800ce8c:	0800d0c7 	.word	0x0800d0c7
 800ce90:	0800d067 	.word	0x0800d067
 800ce94:	0800d093 	.word	0x0800d093
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	687a      	ldr	r2, [r7, #4]
 800cea2:	7c12      	ldrb	r2, [r2, #16]
 800cea4:	f107 0108 	add.w	r1, r7, #8
 800cea8:	4610      	mov	r0, r2
 800ceaa:	4798      	blx	r3
 800ceac:	60f8      	str	r0, [r7, #12]
      break;
 800ceae:	e112      	b.n	800d0d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	7c1b      	ldrb	r3, [r3, #16]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d10d      	bne.n	800ced4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cec0:	f107 0208 	add.w	r2, r7, #8
 800cec4:	4610      	mov	r0, r2
 800cec6:	4798      	blx	r3
 800cec8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	3301      	adds	r3, #1
 800cece:	2202      	movs	r2, #2
 800ced0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ced2:	e100      	b.n	800d0d6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ceda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cedc:	f107 0208 	add.w	r2, r7, #8
 800cee0:	4610      	mov	r0, r2
 800cee2:	4798      	blx	r3
 800cee4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	3301      	adds	r3, #1
 800ceea:	2202      	movs	r2, #2
 800ceec:	701a      	strb	r2, [r3, #0]
      break;
 800ceee:	e0f2      	b.n	800d0d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	885b      	ldrh	r3, [r3, #2]
 800cef4:	b2db      	uxtb	r3, r3
 800cef6:	2b05      	cmp	r3, #5
 800cef8:	f200 80ac 	bhi.w	800d054 <USBD_GetDescriptor+0x204>
 800cefc:	a201      	add	r2, pc, #4	; (adr r2, 800cf04 <USBD_GetDescriptor+0xb4>)
 800cefe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf02:	bf00      	nop
 800cf04:	0800cf1d 	.word	0x0800cf1d
 800cf08:	0800cf51 	.word	0x0800cf51
 800cf0c:	0800cf85 	.word	0x0800cf85
 800cf10:	0800cfb9 	.word	0x0800cfb9
 800cf14:	0800cfed 	.word	0x0800cfed
 800cf18:	0800d021 	.word	0x0800d021
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf22:	685b      	ldr	r3, [r3, #4]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d00b      	beq.n	800cf40 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf2e:	685b      	ldr	r3, [r3, #4]
 800cf30:	687a      	ldr	r2, [r7, #4]
 800cf32:	7c12      	ldrb	r2, [r2, #16]
 800cf34:	f107 0108 	add.w	r1, r7, #8
 800cf38:	4610      	mov	r0, r2
 800cf3a:	4798      	blx	r3
 800cf3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf3e:	e091      	b.n	800d064 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cf40:	6839      	ldr	r1, [r7, #0]
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	f000 fab2 	bl	800d4ac <USBD_CtlError>
            err++;
 800cf48:	7afb      	ldrb	r3, [r7, #11]
 800cf4a:	3301      	adds	r3, #1
 800cf4c:	72fb      	strb	r3, [r7, #11]
          break;
 800cf4e:	e089      	b.n	800d064 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf56:	689b      	ldr	r3, [r3, #8]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d00b      	beq.n	800cf74 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf62:	689b      	ldr	r3, [r3, #8]
 800cf64:	687a      	ldr	r2, [r7, #4]
 800cf66:	7c12      	ldrb	r2, [r2, #16]
 800cf68:	f107 0108 	add.w	r1, r7, #8
 800cf6c:	4610      	mov	r0, r2
 800cf6e:	4798      	blx	r3
 800cf70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf72:	e077      	b.n	800d064 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cf74:	6839      	ldr	r1, [r7, #0]
 800cf76:	6878      	ldr	r0, [r7, #4]
 800cf78:	f000 fa98 	bl	800d4ac <USBD_CtlError>
            err++;
 800cf7c:	7afb      	ldrb	r3, [r7, #11]
 800cf7e:	3301      	adds	r3, #1
 800cf80:	72fb      	strb	r3, [r7, #11]
          break;
 800cf82:	e06f      	b.n	800d064 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf8a:	68db      	ldr	r3, [r3, #12]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d00b      	beq.n	800cfa8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf96:	68db      	ldr	r3, [r3, #12]
 800cf98:	687a      	ldr	r2, [r7, #4]
 800cf9a:	7c12      	ldrb	r2, [r2, #16]
 800cf9c:	f107 0108 	add.w	r1, r7, #8
 800cfa0:	4610      	mov	r0, r2
 800cfa2:	4798      	blx	r3
 800cfa4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cfa6:	e05d      	b.n	800d064 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cfa8:	6839      	ldr	r1, [r7, #0]
 800cfaa:	6878      	ldr	r0, [r7, #4]
 800cfac:	f000 fa7e 	bl	800d4ac <USBD_CtlError>
            err++;
 800cfb0:	7afb      	ldrb	r3, [r7, #11]
 800cfb2:	3301      	adds	r3, #1
 800cfb4:	72fb      	strb	r3, [r7, #11]
          break;
 800cfb6:	e055      	b.n	800d064 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cfbe:	691b      	ldr	r3, [r3, #16]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d00b      	beq.n	800cfdc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cfca:	691b      	ldr	r3, [r3, #16]
 800cfcc:	687a      	ldr	r2, [r7, #4]
 800cfce:	7c12      	ldrb	r2, [r2, #16]
 800cfd0:	f107 0108 	add.w	r1, r7, #8
 800cfd4:	4610      	mov	r0, r2
 800cfd6:	4798      	blx	r3
 800cfd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cfda:	e043      	b.n	800d064 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cfdc:	6839      	ldr	r1, [r7, #0]
 800cfde:	6878      	ldr	r0, [r7, #4]
 800cfe0:	f000 fa64 	bl	800d4ac <USBD_CtlError>
            err++;
 800cfe4:	7afb      	ldrb	r3, [r7, #11]
 800cfe6:	3301      	adds	r3, #1
 800cfe8:	72fb      	strb	r3, [r7, #11]
          break;
 800cfea:	e03b      	b.n	800d064 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cff2:	695b      	ldr	r3, [r3, #20]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d00b      	beq.n	800d010 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cffe:	695b      	ldr	r3, [r3, #20]
 800d000:	687a      	ldr	r2, [r7, #4]
 800d002:	7c12      	ldrb	r2, [r2, #16]
 800d004:	f107 0108 	add.w	r1, r7, #8
 800d008:	4610      	mov	r0, r2
 800d00a:	4798      	blx	r3
 800d00c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d00e:	e029      	b.n	800d064 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d010:	6839      	ldr	r1, [r7, #0]
 800d012:	6878      	ldr	r0, [r7, #4]
 800d014:	f000 fa4a 	bl	800d4ac <USBD_CtlError>
            err++;
 800d018:	7afb      	ldrb	r3, [r7, #11]
 800d01a:	3301      	adds	r3, #1
 800d01c:	72fb      	strb	r3, [r7, #11]
          break;
 800d01e:	e021      	b.n	800d064 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d026:	699b      	ldr	r3, [r3, #24]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d00b      	beq.n	800d044 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d032:	699b      	ldr	r3, [r3, #24]
 800d034:	687a      	ldr	r2, [r7, #4]
 800d036:	7c12      	ldrb	r2, [r2, #16]
 800d038:	f107 0108 	add.w	r1, r7, #8
 800d03c:	4610      	mov	r0, r2
 800d03e:	4798      	blx	r3
 800d040:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d042:	e00f      	b.n	800d064 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d044:	6839      	ldr	r1, [r7, #0]
 800d046:	6878      	ldr	r0, [r7, #4]
 800d048:	f000 fa30 	bl	800d4ac <USBD_CtlError>
            err++;
 800d04c:	7afb      	ldrb	r3, [r7, #11]
 800d04e:	3301      	adds	r3, #1
 800d050:	72fb      	strb	r3, [r7, #11]
          break;
 800d052:	e007      	b.n	800d064 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d054:	6839      	ldr	r1, [r7, #0]
 800d056:	6878      	ldr	r0, [r7, #4]
 800d058:	f000 fa28 	bl	800d4ac <USBD_CtlError>
          err++;
 800d05c:	7afb      	ldrb	r3, [r7, #11]
 800d05e:	3301      	adds	r3, #1
 800d060:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800d062:	bf00      	nop
      }
      break;
 800d064:	e037      	b.n	800d0d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	7c1b      	ldrb	r3, [r3, #16]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d109      	bne.n	800d082 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d076:	f107 0208 	add.w	r2, r7, #8
 800d07a:	4610      	mov	r0, r2
 800d07c:	4798      	blx	r3
 800d07e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d080:	e029      	b.n	800d0d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d082:	6839      	ldr	r1, [r7, #0]
 800d084:	6878      	ldr	r0, [r7, #4]
 800d086:	f000 fa11 	bl	800d4ac <USBD_CtlError>
        err++;
 800d08a:	7afb      	ldrb	r3, [r7, #11]
 800d08c:	3301      	adds	r3, #1
 800d08e:	72fb      	strb	r3, [r7, #11]
      break;
 800d090:	e021      	b.n	800d0d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	7c1b      	ldrb	r3, [r3, #16]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d10d      	bne.n	800d0b6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0a2:	f107 0208 	add.w	r2, r7, #8
 800d0a6:	4610      	mov	r0, r2
 800d0a8:	4798      	blx	r3
 800d0aa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	3301      	adds	r3, #1
 800d0b0:	2207      	movs	r2, #7
 800d0b2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d0b4:	e00f      	b.n	800d0d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d0b6:	6839      	ldr	r1, [r7, #0]
 800d0b8:	6878      	ldr	r0, [r7, #4]
 800d0ba:	f000 f9f7 	bl	800d4ac <USBD_CtlError>
        err++;
 800d0be:	7afb      	ldrb	r3, [r7, #11]
 800d0c0:	3301      	adds	r3, #1
 800d0c2:	72fb      	strb	r3, [r7, #11]
      break;
 800d0c4:	e007      	b.n	800d0d6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d0c6:	6839      	ldr	r1, [r7, #0]
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f000 f9ef 	bl	800d4ac <USBD_CtlError>
      err++;
 800d0ce:	7afb      	ldrb	r3, [r7, #11]
 800d0d0:	3301      	adds	r3, #1
 800d0d2:	72fb      	strb	r3, [r7, #11]
      break;
 800d0d4:	bf00      	nop
  }

  if (err != 0U)
 800d0d6:	7afb      	ldrb	r3, [r7, #11]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d11e      	bne.n	800d11a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	88db      	ldrh	r3, [r3, #6]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d016      	beq.n	800d112 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d0e4:	893b      	ldrh	r3, [r7, #8]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d00e      	beq.n	800d108 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	88da      	ldrh	r2, [r3, #6]
 800d0ee:	893b      	ldrh	r3, [r7, #8]
 800d0f0:	4293      	cmp	r3, r2
 800d0f2:	bf28      	it	cs
 800d0f4:	4613      	movcs	r3, r2
 800d0f6:	b29b      	uxth	r3, r3
 800d0f8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d0fa:	893b      	ldrh	r3, [r7, #8]
 800d0fc:	461a      	mov	r2, r3
 800d0fe:	68f9      	ldr	r1, [r7, #12]
 800d100:	6878      	ldr	r0, [r7, #4]
 800d102:	f000 f9e4 	bl	800d4ce <USBD_CtlSendData>
 800d106:	e009      	b.n	800d11c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d108:	6839      	ldr	r1, [r7, #0]
 800d10a:	6878      	ldr	r0, [r7, #4]
 800d10c:	f000 f9ce 	bl	800d4ac <USBD_CtlError>
 800d110:	e004      	b.n	800d11c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d112:	6878      	ldr	r0, [r7, #4]
 800d114:	f000 fa18 	bl	800d548 <USBD_CtlSendStatus>
 800d118:	e000      	b.n	800d11c <USBD_GetDescriptor+0x2cc>
    return;
 800d11a:	bf00      	nop
  }
}
 800d11c:	3710      	adds	r7, #16
 800d11e:	46bd      	mov	sp, r7
 800d120:	bd80      	pop	{r7, pc}
 800d122:	bf00      	nop

0800d124 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b084      	sub	sp, #16
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
 800d12c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	889b      	ldrh	r3, [r3, #4]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d131      	bne.n	800d19a <USBD_SetAddress+0x76>
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	88db      	ldrh	r3, [r3, #6]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d12d      	bne.n	800d19a <USBD_SetAddress+0x76>
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	885b      	ldrh	r3, [r3, #2]
 800d142:	2b7f      	cmp	r3, #127	; 0x7f
 800d144:	d829      	bhi.n	800d19a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	885b      	ldrh	r3, [r3, #2]
 800d14a:	b2db      	uxtb	r3, r3
 800d14c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d150:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d158:	b2db      	uxtb	r3, r3
 800d15a:	2b03      	cmp	r3, #3
 800d15c:	d104      	bne.n	800d168 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d15e:	6839      	ldr	r1, [r7, #0]
 800d160:	6878      	ldr	r0, [r7, #4]
 800d162:	f000 f9a3 	bl	800d4ac <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d166:	e01d      	b.n	800d1a4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	7bfa      	ldrb	r2, [r7, #15]
 800d16c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d170:	7bfb      	ldrb	r3, [r7, #15]
 800d172:	4619      	mov	r1, r3
 800d174:	6878      	ldr	r0, [r7, #4]
 800d176:	f005 faa5 	bl	80126c4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d17a:	6878      	ldr	r0, [r7, #4]
 800d17c:	f000 f9e4 	bl	800d548 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d180:	7bfb      	ldrb	r3, [r7, #15]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d004      	beq.n	800d190 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	2202      	movs	r2, #2
 800d18a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d18e:	e009      	b.n	800d1a4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2201      	movs	r2, #1
 800d194:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d198:	e004      	b.n	800d1a4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d19a:	6839      	ldr	r1, [r7, #0]
 800d19c:	6878      	ldr	r0, [r7, #4]
 800d19e:	f000 f985 	bl	800d4ac <USBD_CtlError>
  }
}
 800d1a2:	bf00      	nop
 800d1a4:	bf00      	nop
 800d1a6:	3710      	adds	r7, #16
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}

0800d1ac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b084      	sub	sp, #16
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
 800d1b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	885b      	ldrh	r3, [r3, #2]
 800d1be:	b2da      	uxtb	r2, r3
 800d1c0:	4b4c      	ldr	r3, [pc, #304]	; (800d2f4 <USBD_SetConfig+0x148>)
 800d1c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d1c4:	4b4b      	ldr	r3, [pc, #300]	; (800d2f4 <USBD_SetConfig+0x148>)
 800d1c6:	781b      	ldrb	r3, [r3, #0]
 800d1c8:	2b01      	cmp	r3, #1
 800d1ca:	d905      	bls.n	800d1d8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d1cc:	6839      	ldr	r1, [r7, #0]
 800d1ce:	6878      	ldr	r0, [r7, #4]
 800d1d0:	f000 f96c 	bl	800d4ac <USBD_CtlError>
    return USBD_FAIL;
 800d1d4:	2303      	movs	r3, #3
 800d1d6:	e088      	b.n	800d2ea <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1de:	b2db      	uxtb	r3, r3
 800d1e0:	2b02      	cmp	r3, #2
 800d1e2:	d002      	beq.n	800d1ea <USBD_SetConfig+0x3e>
 800d1e4:	2b03      	cmp	r3, #3
 800d1e6:	d025      	beq.n	800d234 <USBD_SetConfig+0x88>
 800d1e8:	e071      	b.n	800d2ce <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d1ea:	4b42      	ldr	r3, [pc, #264]	; (800d2f4 <USBD_SetConfig+0x148>)
 800d1ec:	781b      	ldrb	r3, [r3, #0]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d01c      	beq.n	800d22c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800d1f2:	4b40      	ldr	r3, [pc, #256]	; (800d2f4 <USBD_SetConfig+0x148>)
 800d1f4:	781b      	ldrb	r3, [r3, #0]
 800d1f6:	461a      	mov	r2, r3
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d1fc:	4b3d      	ldr	r3, [pc, #244]	; (800d2f4 <USBD_SetConfig+0x148>)
 800d1fe:	781b      	ldrb	r3, [r3, #0]
 800d200:	4619      	mov	r1, r3
 800d202:	6878      	ldr	r0, [r7, #4]
 800d204:	f7ff f948 	bl	800c498 <USBD_SetClassConfig>
 800d208:	4603      	mov	r3, r0
 800d20a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d20c:	7bfb      	ldrb	r3, [r7, #15]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d004      	beq.n	800d21c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800d212:	6839      	ldr	r1, [r7, #0]
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f000 f949 	bl	800d4ac <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d21a:	e065      	b.n	800d2e8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d21c:	6878      	ldr	r0, [r7, #4]
 800d21e:	f000 f993 	bl	800d548 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	2203      	movs	r2, #3
 800d226:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d22a:	e05d      	b.n	800d2e8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d22c:	6878      	ldr	r0, [r7, #4]
 800d22e:	f000 f98b 	bl	800d548 <USBD_CtlSendStatus>
      break;
 800d232:	e059      	b.n	800d2e8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d234:	4b2f      	ldr	r3, [pc, #188]	; (800d2f4 <USBD_SetConfig+0x148>)
 800d236:	781b      	ldrb	r3, [r3, #0]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d112      	bne.n	800d262 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2202      	movs	r2, #2
 800d240:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d244:	4b2b      	ldr	r3, [pc, #172]	; (800d2f4 <USBD_SetConfig+0x148>)
 800d246:	781b      	ldrb	r3, [r3, #0]
 800d248:	461a      	mov	r2, r3
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d24e:	4b29      	ldr	r3, [pc, #164]	; (800d2f4 <USBD_SetConfig+0x148>)
 800d250:	781b      	ldrb	r3, [r3, #0]
 800d252:	4619      	mov	r1, r3
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f7ff f93b 	bl	800c4d0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d25a:	6878      	ldr	r0, [r7, #4]
 800d25c:	f000 f974 	bl	800d548 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d260:	e042      	b.n	800d2e8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800d262:	4b24      	ldr	r3, [pc, #144]	; (800d2f4 <USBD_SetConfig+0x148>)
 800d264:	781b      	ldrb	r3, [r3, #0]
 800d266:	461a      	mov	r2, r3
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	685b      	ldr	r3, [r3, #4]
 800d26c:	429a      	cmp	r2, r3
 800d26e:	d02a      	beq.n	800d2c6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	685b      	ldr	r3, [r3, #4]
 800d274:	b2db      	uxtb	r3, r3
 800d276:	4619      	mov	r1, r3
 800d278:	6878      	ldr	r0, [r7, #4]
 800d27a:	f7ff f929 	bl	800c4d0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d27e:	4b1d      	ldr	r3, [pc, #116]	; (800d2f4 <USBD_SetConfig+0x148>)
 800d280:	781b      	ldrb	r3, [r3, #0]
 800d282:	461a      	mov	r2, r3
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d288:	4b1a      	ldr	r3, [pc, #104]	; (800d2f4 <USBD_SetConfig+0x148>)
 800d28a:	781b      	ldrb	r3, [r3, #0]
 800d28c:	4619      	mov	r1, r3
 800d28e:	6878      	ldr	r0, [r7, #4]
 800d290:	f7ff f902 	bl	800c498 <USBD_SetClassConfig>
 800d294:	4603      	mov	r3, r0
 800d296:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d298:	7bfb      	ldrb	r3, [r7, #15]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d00f      	beq.n	800d2be <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800d29e:	6839      	ldr	r1, [r7, #0]
 800d2a0:	6878      	ldr	r0, [r7, #4]
 800d2a2:	f000 f903 	bl	800d4ac <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	685b      	ldr	r3, [r3, #4]
 800d2aa:	b2db      	uxtb	r3, r3
 800d2ac:	4619      	mov	r1, r3
 800d2ae:	6878      	ldr	r0, [r7, #4]
 800d2b0:	f7ff f90e 	bl	800c4d0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	2202      	movs	r2, #2
 800d2b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d2bc:	e014      	b.n	800d2e8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d2be:	6878      	ldr	r0, [r7, #4]
 800d2c0:	f000 f942 	bl	800d548 <USBD_CtlSendStatus>
      break;
 800d2c4:	e010      	b.n	800d2e8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d2c6:	6878      	ldr	r0, [r7, #4]
 800d2c8:	f000 f93e 	bl	800d548 <USBD_CtlSendStatus>
      break;
 800d2cc:	e00c      	b.n	800d2e8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800d2ce:	6839      	ldr	r1, [r7, #0]
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	f000 f8eb 	bl	800d4ac <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d2d6:	4b07      	ldr	r3, [pc, #28]	; (800d2f4 <USBD_SetConfig+0x148>)
 800d2d8:	781b      	ldrb	r3, [r3, #0]
 800d2da:	4619      	mov	r1, r3
 800d2dc:	6878      	ldr	r0, [r7, #4]
 800d2de:	f7ff f8f7 	bl	800c4d0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d2e2:	2303      	movs	r3, #3
 800d2e4:	73fb      	strb	r3, [r7, #15]
      break;
 800d2e6:	bf00      	nop
  }

  return ret;
 800d2e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	3710      	adds	r7, #16
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}
 800d2f2:	bf00      	nop
 800d2f4:	20000408 	.word	0x20000408

0800d2f8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b082      	sub	sp, #8
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
 800d300:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	88db      	ldrh	r3, [r3, #6]
 800d306:	2b01      	cmp	r3, #1
 800d308:	d004      	beq.n	800d314 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d30a:	6839      	ldr	r1, [r7, #0]
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f000 f8cd 	bl	800d4ac <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d312:	e023      	b.n	800d35c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d31a:	b2db      	uxtb	r3, r3
 800d31c:	2b02      	cmp	r3, #2
 800d31e:	dc02      	bgt.n	800d326 <USBD_GetConfig+0x2e>
 800d320:	2b00      	cmp	r3, #0
 800d322:	dc03      	bgt.n	800d32c <USBD_GetConfig+0x34>
 800d324:	e015      	b.n	800d352 <USBD_GetConfig+0x5a>
 800d326:	2b03      	cmp	r3, #3
 800d328:	d00b      	beq.n	800d342 <USBD_GetConfig+0x4a>
 800d32a:	e012      	b.n	800d352 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2200      	movs	r2, #0
 800d330:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	3308      	adds	r3, #8
 800d336:	2201      	movs	r2, #1
 800d338:	4619      	mov	r1, r3
 800d33a:	6878      	ldr	r0, [r7, #4]
 800d33c:	f000 f8c7 	bl	800d4ce <USBD_CtlSendData>
        break;
 800d340:	e00c      	b.n	800d35c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	3304      	adds	r3, #4
 800d346:	2201      	movs	r2, #1
 800d348:	4619      	mov	r1, r3
 800d34a:	6878      	ldr	r0, [r7, #4]
 800d34c:	f000 f8bf 	bl	800d4ce <USBD_CtlSendData>
        break;
 800d350:	e004      	b.n	800d35c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d352:	6839      	ldr	r1, [r7, #0]
 800d354:	6878      	ldr	r0, [r7, #4]
 800d356:	f000 f8a9 	bl	800d4ac <USBD_CtlError>
        break;
 800d35a:	bf00      	nop
}
 800d35c:	bf00      	nop
 800d35e:	3708      	adds	r7, #8
 800d360:	46bd      	mov	sp, r7
 800d362:	bd80      	pop	{r7, pc}

0800d364 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b082      	sub	sp, #8
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
 800d36c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d374:	b2db      	uxtb	r3, r3
 800d376:	3b01      	subs	r3, #1
 800d378:	2b02      	cmp	r3, #2
 800d37a:	d81e      	bhi.n	800d3ba <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	88db      	ldrh	r3, [r3, #6]
 800d380:	2b02      	cmp	r3, #2
 800d382:	d004      	beq.n	800d38e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d384:	6839      	ldr	r1, [r7, #0]
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	f000 f890 	bl	800d4ac <USBD_CtlError>
        break;
 800d38c:	e01a      	b.n	800d3c4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	2201      	movs	r2, #1
 800d392:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d005      	beq.n	800d3aa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	68db      	ldr	r3, [r3, #12]
 800d3a2:	f043 0202 	orr.w	r2, r3, #2
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	330c      	adds	r3, #12
 800d3ae:	2202      	movs	r2, #2
 800d3b0:	4619      	mov	r1, r3
 800d3b2:	6878      	ldr	r0, [r7, #4]
 800d3b4:	f000 f88b 	bl	800d4ce <USBD_CtlSendData>
      break;
 800d3b8:	e004      	b.n	800d3c4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d3ba:	6839      	ldr	r1, [r7, #0]
 800d3bc:	6878      	ldr	r0, [r7, #4]
 800d3be:	f000 f875 	bl	800d4ac <USBD_CtlError>
      break;
 800d3c2:	bf00      	nop
  }
}
 800d3c4:	bf00      	nop
 800d3c6:	3708      	adds	r7, #8
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	bd80      	pop	{r7, pc}

0800d3cc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b082      	sub	sp, #8
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
 800d3d4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	885b      	ldrh	r3, [r3, #2]
 800d3da:	2b01      	cmp	r3, #1
 800d3dc:	d106      	bne.n	800d3ec <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	2201      	movs	r2, #1
 800d3e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d3e6:	6878      	ldr	r0, [r7, #4]
 800d3e8:	f000 f8ae 	bl	800d548 <USBD_CtlSendStatus>
  }
}
 800d3ec:	bf00      	nop
 800d3ee:	3708      	adds	r7, #8
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	bd80      	pop	{r7, pc}

0800d3f4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b082      	sub	sp, #8
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
 800d3fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d404:	b2db      	uxtb	r3, r3
 800d406:	3b01      	subs	r3, #1
 800d408:	2b02      	cmp	r3, #2
 800d40a:	d80b      	bhi.n	800d424 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	885b      	ldrh	r3, [r3, #2]
 800d410:	2b01      	cmp	r3, #1
 800d412:	d10c      	bne.n	800d42e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	2200      	movs	r2, #0
 800d418:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d41c:	6878      	ldr	r0, [r7, #4]
 800d41e:	f000 f893 	bl	800d548 <USBD_CtlSendStatus>
      }
      break;
 800d422:	e004      	b.n	800d42e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d424:	6839      	ldr	r1, [r7, #0]
 800d426:	6878      	ldr	r0, [r7, #4]
 800d428:	f000 f840 	bl	800d4ac <USBD_CtlError>
      break;
 800d42c:	e000      	b.n	800d430 <USBD_ClrFeature+0x3c>
      break;
 800d42e:	bf00      	nop
  }
}
 800d430:	bf00      	nop
 800d432:	3708      	adds	r7, #8
 800d434:	46bd      	mov	sp, r7
 800d436:	bd80      	pop	{r7, pc}

0800d438 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b084      	sub	sp, #16
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
 800d440:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	781a      	ldrb	r2, [r3, #0]
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	3301      	adds	r3, #1
 800d452:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	781a      	ldrb	r2, [r3, #0]
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	3301      	adds	r3, #1
 800d460:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d462:	68f8      	ldr	r0, [r7, #12]
 800d464:	f7ff fabb 	bl	800c9de <SWAPBYTE>
 800d468:	4603      	mov	r3, r0
 800d46a:	461a      	mov	r2, r3
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	3301      	adds	r3, #1
 800d474:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	3301      	adds	r3, #1
 800d47a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d47c:	68f8      	ldr	r0, [r7, #12]
 800d47e:	f7ff faae 	bl	800c9de <SWAPBYTE>
 800d482:	4603      	mov	r3, r0
 800d484:	461a      	mov	r2, r3
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	3301      	adds	r3, #1
 800d48e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	3301      	adds	r3, #1
 800d494:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d496:	68f8      	ldr	r0, [r7, #12]
 800d498:	f7ff faa1 	bl	800c9de <SWAPBYTE>
 800d49c:	4603      	mov	r3, r0
 800d49e:	461a      	mov	r2, r3
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	80da      	strh	r2, [r3, #6]
}
 800d4a4:	bf00      	nop
 800d4a6:	3710      	adds	r7, #16
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	bd80      	pop	{r7, pc}

0800d4ac <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b082      	sub	sp, #8
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
 800d4b4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d4b6:	2180      	movs	r1, #128	; 0x80
 800d4b8:	6878      	ldr	r0, [r7, #4]
 800d4ba:	f005 f899 	bl	80125f0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d4be:	2100      	movs	r1, #0
 800d4c0:	6878      	ldr	r0, [r7, #4]
 800d4c2:	f005 f895 	bl	80125f0 <USBD_LL_StallEP>
}
 800d4c6:	bf00      	nop
 800d4c8:	3708      	adds	r7, #8
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}

0800d4ce <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d4ce:	b580      	push	{r7, lr}
 800d4d0:	b084      	sub	sp, #16
 800d4d2:	af00      	add	r7, sp, #0
 800d4d4:	60f8      	str	r0, [r7, #12]
 800d4d6:	60b9      	str	r1, [r7, #8]
 800d4d8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	2202      	movs	r2, #2
 800d4de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	687a      	ldr	r2, [r7, #4]
 800d4e6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	687a      	ldr	r2, [r7, #4]
 800d4ec:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	68ba      	ldr	r2, [r7, #8]
 800d4f2:	2100      	movs	r1, #0
 800d4f4:	68f8      	ldr	r0, [r7, #12]
 800d4f6:	f005 f904 	bl	8012702 <USBD_LL_Transmit>

  return USBD_OK;
 800d4fa:	2300      	movs	r3, #0
}
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	3710      	adds	r7, #16
 800d500:	46bd      	mov	sp, r7
 800d502:	bd80      	pop	{r7, pc}

0800d504 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b084      	sub	sp, #16
 800d508:	af00      	add	r7, sp, #0
 800d50a:	60f8      	str	r0, [r7, #12]
 800d50c:	60b9      	str	r1, [r7, #8]
 800d50e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	68ba      	ldr	r2, [r7, #8]
 800d514:	2100      	movs	r1, #0
 800d516:	68f8      	ldr	r0, [r7, #12]
 800d518:	f005 f8f3 	bl	8012702 <USBD_LL_Transmit>

  return USBD_OK;
 800d51c:	2300      	movs	r3, #0
}
 800d51e:	4618      	mov	r0, r3
 800d520:	3710      	adds	r7, #16
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}

0800d526 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d526:	b580      	push	{r7, lr}
 800d528:	b084      	sub	sp, #16
 800d52a:	af00      	add	r7, sp, #0
 800d52c:	60f8      	str	r0, [r7, #12]
 800d52e:	60b9      	str	r1, [r7, #8]
 800d530:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	68ba      	ldr	r2, [r7, #8]
 800d536:	2100      	movs	r1, #0
 800d538:	68f8      	ldr	r0, [r7, #12]
 800d53a:	f005 f903 	bl	8012744 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d53e:	2300      	movs	r3, #0
}
 800d540:	4618      	mov	r0, r3
 800d542:	3710      	adds	r7, #16
 800d544:	46bd      	mov	sp, r7
 800d546:	bd80      	pop	{r7, pc}

0800d548 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b082      	sub	sp, #8
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2204      	movs	r2, #4
 800d554:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d558:	2300      	movs	r3, #0
 800d55a:	2200      	movs	r2, #0
 800d55c:	2100      	movs	r1, #0
 800d55e:	6878      	ldr	r0, [r7, #4]
 800d560:	f005 f8cf 	bl	8012702 <USBD_LL_Transmit>

  return USBD_OK;
 800d564:	2300      	movs	r3, #0
}
 800d566:	4618      	mov	r0, r3
 800d568:	3708      	adds	r7, #8
 800d56a:	46bd      	mov	sp, r7
 800d56c:	bd80      	pop	{r7, pc}

0800d56e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d56e:	b580      	push	{r7, lr}
 800d570:	b082      	sub	sp, #8
 800d572:	af00      	add	r7, sp, #0
 800d574:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	2205      	movs	r2, #5
 800d57a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d57e:	2300      	movs	r3, #0
 800d580:	2200      	movs	r2, #0
 800d582:	2100      	movs	r1, #0
 800d584:	6878      	ldr	r0, [r7, #4]
 800d586:	f005 f8dd 	bl	8012744 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d58a:	2300      	movs	r3, #0
}
 800d58c:	4618      	mov	r0, r3
 800d58e:	3708      	adds	r7, #8
 800d590:	46bd      	mov	sp, r7
 800d592:	bd80      	pop	{r7, pc}

0800d594 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b084      	sub	sp, #16
 800d598:	af00      	add	r7, sp, #0
 800d59a:	4603      	mov	r3, r0
 800d59c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d59e:	79fb      	ldrb	r3, [r7, #7]
 800d5a0:	4a08      	ldr	r2, [pc, #32]	; (800d5c4 <disk_status+0x30>)
 800d5a2:	009b      	lsls	r3, r3, #2
 800d5a4:	4413      	add	r3, r2
 800d5a6:	685b      	ldr	r3, [r3, #4]
 800d5a8:	685b      	ldr	r3, [r3, #4]
 800d5aa:	79fa      	ldrb	r2, [r7, #7]
 800d5ac:	4905      	ldr	r1, [pc, #20]	; (800d5c4 <disk_status+0x30>)
 800d5ae:	440a      	add	r2, r1
 800d5b0:	7a12      	ldrb	r2, [r2, #8]
 800d5b2:	4610      	mov	r0, r2
 800d5b4:	4798      	blx	r3
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d5ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5bc:	4618      	mov	r0, r3
 800d5be:	3710      	adds	r7, #16
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bd80      	pop	{r7, pc}
 800d5c4:	20000434 	.word	0x20000434

0800d5c8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b084      	sub	sp, #16
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d5d6:	79fb      	ldrb	r3, [r7, #7]
 800d5d8:	4a0d      	ldr	r2, [pc, #52]	; (800d610 <disk_initialize+0x48>)
 800d5da:	5cd3      	ldrb	r3, [r2, r3]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d111      	bne.n	800d604 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d5e0:	79fb      	ldrb	r3, [r7, #7]
 800d5e2:	4a0b      	ldr	r2, [pc, #44]	; (800d610 <disk_initialize+0x48>)
 800d5e4:	2101      	movs	r1, #1
 800d5e6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d5e8:	79fb      	ldrb	r3, [r7, #7]
 800d5ea:	4a09      	ldr	r2, [pc, #36]	; (800d610 <disk_initialize+0x48>)
 800d5ec:	009b      	lsls	r3, r3, #2
 800d5ee:	4413      	add	r3, r2
 800d5f0:	685b      	ldr	r3, [r3, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	79fa      	ldrb	r2, [r7, #7]
 800d5f6:	4906      	ldr	r1, [pc, #24]	; (800d610 <disk_initialize+0x48>)
 800d5f8:	440a      	add	r2, r1
 800d5fa:	7a12      	ldrb	r2, [r2, #8]
 800d5fc:	4610      	mov	r0, r2
 800d5fe:	4798      	blx	r3
 800d600:	4603      	mov	r3, r0
 800d602:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d604:	7bfb      	ldrb	r3, [r7, #15]
}
 800d606:	4618      	mov	r0, r3
 800d608:	3710      	adds	r7, #16
 800d60a:	46bd      	mov	sp, r7
 800d60c:	bd80      	pop	{r7, pc}
 800d60e:	bf00      	nop
 800d610:	20000434 	.word	0x20000434

0800d614 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d614:	b590      	push	{r4, r7, lr}
 800d616:	b087      	sub	sp, #28
 800d618:	af00      	add	r7, sp, #0
 800d61a:	60b9      	str	r1, [r7, #8]
 800d61c:	607a      	str	r2, [r7, #4]
 800d61e:	603b      	str	r3, [r7, #0]
 800d620:	4603      	mov	r3, r0
 800d622:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d624:	7bfb      	ldrb	r3, [r7, #15]
 800d626:	4a0a      	ldr	r2, [pc, #40]	; (800d650 <disk_read+0x3c>)
 800d628:	009b      	lsls	r3, r3, #2
 800d62a:	4413      	add	r3, r2
 800d62c:	685b      	ldr	r3, [r3, #4]
 800d62e:	689c      	ldr	r4, [r3, #8]
 800d630:	7bfb      	ldrb	r3, [r7, #15]
 800d632:	4a07      	ldr	r2, [pc, #28]	; (800d650 <disk_read+0x3c>)
 800d634:	4413      	add	r3, r2
 800d636:	7a18      	ldrb	r0, [r3, #8]
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	687a      	ldr	r2, [r7, #4]
 800d63c:	68b9      	ldr	r1, [r7, #8]
 800d63e:	47a0      	blx	r4
 800d640:	4603      	mov	r3, r0
 800d642:	75fb      	strb	r3, [r7, #23]
  return res;
 800d644:	7dfb      	ldrb	r3, [r7, #23]
}
 800d646:	4618      	mov	r0, r3
 800d648:	371c      	adds	r7, #28
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd90      	pop	{r4, r7, pc}
 800d64e:	bf00      	nop
 800d650:	20000434 	.word	0x20000434

0800d654 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d654:	b590      	push	{r4, r7, lr}
 800d656:	b087      	sub	sp, #28
 800d658:	af00      	add	r7, sp, #0
 800d65a:	60b9      	str	r1, [r7, #8]
 800d65c:	607a      	str	r2, [r7, #4]
 800d65e:	603b      	str	r3, [r7, #0]
 800d660:	4603      	mov	r3, r0
 800d662:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d664:	7bfb      	ldrb	r3, [r7, #15]
 800d666:	4a0a      	ldr	r2, [pc, #40]	; (800d690 <disk_write+0x3c>)
 800d668:	009b      	lsls	r3, r3, #2
 800d66a:	4413      	add	r3, r2
 800d66c:	685b      	ldr	r3, [r3, #4]
 800d66e:	68dc      	ldr	r4, [r3, #12]
 800d670:	7bfb      	ldrb	r3, [r7, #15]
 800d672:	4a07      	ldr	r2, [pc, #28]	; (800d690 <disk_write+0x3c>)
 800d674:	4413      	add	r3, r2
 800d676:	7a18      	ldrb	r0, [r3, #8]
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	687a      	ldr	r2, [r7, #4]
 800d67c:	68b9      	ldr	r1, [r7, #8]
 800d67e:	47a0      	blx	r4
 800d680:	4603      	mov	r3, r0
 800d682:	75fb      	strb	r3, [r7, #23]
  return res;
 800d684:	7dfb      	ldrb	r3, [r7, #23]
}
 800d686:	4618      	mov	r0, r3
 800d688:	371c      	adds	r7, #28
 800d68a:	46bd      	mov	sp, r7
 800d68c:	bd90      	pop	{r4, r7, pc}
 800d68e:	bf00      	nop
 800d690:	20000434 	.word	0x20000434

0800d694 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b084      	sub	sp, #16
 800d698:	af00      	add	r7, sp, #0
 800d69a:	4603      	mov	r3, r0
 800d69c:	603a      	str	r2, [r7, #0]
 800d69e:	71fb      	strb	r3, [r7, #7]
 800d6a0:	460b      	mov	r3, r1
 800d6a2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d6a4:	79fb      	ldrb	r3, [r7, #7]
 800d6a6:	4a09      	ldr	r2, [pc, #36]	; (800d6cc <disk_ioctl+0x38>)
 800d6a8:	009b      	lsls	r3, r3, #2
 800d6aa:	4413      	add	r3, r2
 800d6ac:	685b      	ldr	r3, [r3, #4]
 800d6ae:	691b      	ldr	r3, [r3, #16]
 800d6b0:	79fa      	ldrb	r2, [r7, #7]
 800d6b2:	4906      	ldr	r1, [pc, #24]	; (800d6cc <disk_ioctl+0x38>)
 800d6b4:	440a      	add	r2, r1
 800d6b6:	7a10      	ldrb	r0, [r2, #8]
 800d6b8:	79b9      	ldrb	r1, [r7, #6]
 800d6ba:	683a      	ldr	r2, [r7, #0]
 800d6bc:	4798      	blx	r3
 800d6be:	4603      	mov	r3, r0
 800d6c0:	73fb      	strb	r3, [r7, #15]
  return res;
 800d6c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	3710      	adds	r7, #16
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	bd80      	pop	{r7, pc}
 800d6cc:	20000434 	.word	0x20000434

0800d6d0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d6d0:	b480      	push	{r7}
 800d6d2:	b085      	sub	sp, #20
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	3301      	adds	r3, #1
 800d6dc:	781b      	ldrb	r3, [r3, #0]
 800d6de:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d6e0:	89fb      	ldrh	r3, [r7, #14]
 800d6e2:	021b      	lsls	r3, r3, #8
 800d6e4:	b21a      	sxth	r2, r3
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	781b      	ldrb	r3, [r3, #0]
 800d6ea:	b21b      	sxth	r3, r3
 800d6ec:	4313      	orrs	r3, r2
 800d6ee:	b21b      	sxth	r3, r3
 800d6f0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d6f2:	89fb      	ldrh	r3, [r7, #14]
}
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	3714      	adds	r7, #20
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fe:	4770      	bx	lr

0800d700 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d700:	b480      	push	{r7}
 800d702:	b085      	sub	sp, #20
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	3303      	adds	r3, #3
 800d70c:	781b      	ldrb	r3, [r3, #0]
 800d70e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	021b      	lsls	r3, r3, #8
 800d714:	687a      	ldr	r2, [r7, #4]
 800d716:	3202      	adds	r2, #2
 800d718:	7812      	ldrb	r2, [r2, #0]
 800d71a:	4313      	orrs	r3, r2
 800d71c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	021b      	lsls	r3, r3, #8
 800d722:	687a      	ldr	r2, [r7, #4]
 800d724:	3201      	adds	r2, #1
 800d726:	7812      	ldrb	r2, [r2, #0]
 800d728:	4313      	orrs	r3, r2
 800d72a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	021b      	lsls	r3, r3, #8
 800d730:	687a      	ldr	r2, [r7, #4]
 800d732:	7812      	ldrb	r2, [r2, #0]
 800d734:	4313      	orrs	r3, r2
 800d736:	60fb      	str	r3, [r7, #12]
	return rv;
 800d738:	68fb      	ldr	r3, [r7, #12]
}
 800d73a:	4618      	mov	r0, r3
 800d73c:	3714      	adds	r7, #20
 800d73e:	46bd      	mov	sp, r7
 800d740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d744:	4770      	bx	lr

0800d746 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d746:	b480      	push	{r7}
 800d748:	b083      	sub	sp, #12
 800d74a:	af00      	add	r7, sp, #0
 800d74c:	6078      	str	r0, [r7, #4]
 800d74e:	460b      	mov	r3, r1
 800d750:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	1c5a      	adds	r2, r3, #1
 800d756:	607a      	str	r2, [r7, #4]
 800d758:	887a      	ldrh	r2, [r7, #2]
 800d75a:	b2d2      	uxtb	r2, r2
 800d75c:	701a      	strb	r2, [r3, #0]
 800d75e:	887b      	ldrh	r3, [r7, #2]
 800d760:	0a1b      	lsrs	r3, r3, #8
 800d762:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	1c5a      	adds	r2, r3, #1
 800d768:	607a      	str	r2, [r7, #4]
 800d76a:	887a      	ldrh	r2, [r7, #2]
 800d76c:	b2d2      	uxtb	r2, r2
 800d76e:	701a      	strb	r2, [r3, #0]
}
 800d770:	bf00      	nop
 800d772:	370c      	adds	r7, #12
 800d774:	46bd      	mov	sp, r7
 800d776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77a:	4770      	bx	lr

0800d77c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d77c:	b480      	push	{r7}
 800d77e:	b083      	sub	sp, #12
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
 800d784:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	1c5a      	adds	r2, r3, #1
 800d78a:	607a      	str	r2, [r7, #4]
 800d78c:	683a      	ldr	r2, [r7, #0]
 800d78e:	b2d2      	uxtb	r2, r2
 800d790:	701a      	strb	r2, [r3, #0]
 800d792:	683b      	ldr	r3, [r7, #0]
 800d794:	0a1b      	lsrs	r3, r3, #8
 800d796:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	1c5a      	adds	r2, r3, #1
 800d79c:	607a      	str	r2, [r7, #4]
 800d79e:	683a      	ldr	r2, [r7, #0]
 800d7a0:	b2d2      	uxtb	r2, r2
 800d7a2:	701a      	strb	r2, [r3, #0]
 800d7a4:	683b      	ldr	r3, [r7, #0]
 800d7a6:	0a1b      	lsrs	r3, r3, #8
 800d7a8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	1c5a      	adds	r2, r3, #1
 800d7ae:	607a      	str	r2, [r7, #4]
 800d7b0:	683a      	ldr	r2, [r7, #0]
 800d7b2:	b2d2      	uxtb	r2, r2
 800d7b4:	701a      	strb	r2, [r3, #0]
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	0a1b      	lsrs	r3, r3, #8
 800d7ba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	1c5a      	adds	r2, r3, #1
 800d7c0:	607a      	str	r2, [r7, #4]
 800d7c2:	683a      	ldr	r2, [r7, #0]
 800d7c4:	b2d2      	uxtb	r2, r2
 800d7c6:	701a      	strb	r2, [r3, #0]
}
 800d7c8:	bf00      	nop
 800d7ca:	370c      	adds	r7, #12
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d2:	4770      	bx	lr

0800d7d4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d7d4:	b480      	push	{r7}
 800d7d6:	b087      	sub	sp, #28
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	60f8      	str	r0, [r7, #12]
 800d7dc:	60b9      	str	r1, [r7, #8]
 800d7de:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d7e4:	68bb      	ldr	r3, [r7, #8]
 800d7e6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d00d      	beq.n	800d80a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d7ee:	693a      	ldr	r2, [r7, #16]
 800d7f0:	1c53      	adds	r3, r2, #1
 800d7f2:	613b      	str	r3, [r7, #16]
 800d7f4:	697b      	ldr	r3, [r7, #20]
 800d7f6:	1c59      	adds	r1, r3, #1
 800d7f8:	6179      	str	r1, [r7, #20]
 800d7fa:	7812      	ldrb	r2, [r2, #0]
 800d7fc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	3b01      	subs	r3, #1
 800d802:	607b      	str	r3, [r7, #4]
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d1f1      	bne.n	800d7ee <mem_cpy+0x1a>
	}
}
 800d80a:	bf00      	nop
 800d80c:	371c      	adds	r7, #28
 800d80e:	46bd      	mov	sp, r7
 800d810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d814:	4770      	bx	lr

0800d816 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d816:	b480      	push	{r7}
 800d818:	b087      	sub	sp, #28
 800d81a:	af00      	add	r7, sp, #0
 800d81c:	60f8      	str	r0, [r7, #12]
 800d81e:	60b9      	str	r1, [r7, #8]
 800d820:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d826:	697b      	ldr	r3, [r7, #20]
 800d828:	1c5a      	adds	r2, r3, #1
 800d82a:	617a      	str	r2, [r7, #20]
 800d82c:	68ba      	ldr	r2, [r7, #8]
 800d82e:	b2d2      	uxtb	r2, r2
 800d830:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	3b01      	subs	r3, #1
 800d836:	607b      	str	r3, [r7, #4]
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d1f3      	bne.n	800d826 <mem_set+0x10>
}
 800d83e:	bf00      	nop
 800d840:	bf00      	nop
 800d842:	371c      	adds	r7, #28
 800d844:	46bd      	mov	sp, r7
 800d846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84a:	4770      	bx	lr

0800d84c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d84c:	b480      	push	{r7}
 800d84e:	b089      	sub	sp, #36	; 0x24
 800d850:	af00      	add	r7, sp, #0
 800d852:	60f8      	str	r0, [r7, #12]
 800d854:	60b9      	str	r1, [r7, #8]
 800d856:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	61fb      	str	r3, [r7, #28]
 800d85c:	68bb      	ldr	r3, [r7, #8]
 800d85e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d860:	2300      	movs	r3, #0
 800d862:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d864:	69fb      	ldr	r3, [r7, #28]
 800d866:	1c5a      	adds	r2, r3, #1
 800d868:	61fa      	str	r2, [r7, #28]
 800d86a:	781b      	ldrb	r3, [r3, #0]
 800d86c:	4619      	mov	r1, r3
 800d86e:	69bb      	ldr	r3, [r7, #24]
 800d870:	1c5a      	adds	r2, r3, #1
 800d872:	61ba      	str	r2, [r7, #24]
 800d874:	781b      	ldrb	r3, [r3, #0]
 800d876:	1acb      	subs	r3, r1, r3
 800d878:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	3b01      	subs	r3, #1
 800d87e:	607b      	str	r3, [r7, #4]
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d002      	beq.n	800d88c <mem_cmp+0x40>
 800d886:	697b      	ldr	r3, [r7, #20]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d0eb      	beq.n	800d864 <mem_cmp+0x18>

	return r;
 800d88c:	697b      	ldr	r3, [r7, #20]
}
 800d88e:	4618      	mov	r0, r3
 800d890:	3724      	adds	r7, #36	; 0x24
 800d892:	46bd      	mov	sp, r7
 800d894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d898:	4770      	bx	lr

0800d89a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d89a:	b480      	push	{r7}
 800d89c:	b083      	sub	sp, #12
 800d89e:	af00      	add	r7, sp, #0
 800d8a0:	6078      	str	r0, [r7, #4]
 800d8a2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d8a4:	e002      	b.n	800d8ac <chk_chr+0x12>
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	3301      	adds	r3, #1
 800d8aa:	607b      	str	r3, [r7, #4]
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	781b      	ldrb	r3, [r3, #0]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d005      	beq.n	800d8c0 <chk_chr+0x26>
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	781b      	ldrb	r3, [r3, #0]
 800d8b8:	461a      	mov	r2, r3
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	4293      	cmp	r3, r2
 800d8be:	d1f2      	bne.n	800d8a6 <chk_chr+0xc>
	return *str;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	781b      	ldrb	r3, [r3, #0]
}
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	370c      	adds	r7, #12
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ce:	4770      	bx	lr

0800d8d0 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b082      	sub	sp, #8
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d009      	beq.n	800d8f2 <lock_fs+0x22>
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	68db      	ldr	r3, [r3, #12]
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f002 fcde 	bl	80102a4 <ff_req_grant>
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d001      	beq.n	800d8f2 <lock_fs+0x22>
 800d8ee:	2301      	movs	r3, #1
 800d8f0:	e000      	b.n	800d8f4 <lock_fs+0x24>
 800d8f2:	2300      	movs	r3, #0
}
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	3708      	adds	r7, #8
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	bd80      	pop	{r7, pc}

0800d8fc <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b082      	sub	sp, #8
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
 800d904:	460b      	mov	r3, r1
 800d906:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d00d      	beq.n	800d92a <unlock_fs+0x2e>
 800d90e:	78fb      	ldrb	r3, [r7, #3]
 800d910:	2b0c      	cmp	r3, #12
 800d912:	d00a      	beq.n	800d92a <unlock_fs+0x2e>
 800d914:	78fb      	ldrb	r3, [r7, #3]
 800d916:	2b0b      	cmp	r3, #11
 800d918:	d007      	beq.n	800d92a <unlock_fs+0x2e>
 800d91a:	78fb      	ldrb	r3, [r7, #3]
 800d91c:	2b0f      	cmp	r3, #15
 800d91e:	d004      	beq.n	800d92a <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	68db      	ldr	r3, [r3, #12]
 800d924:	4618      	mov	r0, r3
 800d926:	f002 fcd2 	bl	80102ce <ff_rel_grant>
	}
}
 800d92a:	bf00      	nop
 800d92c:	3708      	adds	r7, #8
 800d92e:	46bd      	mov	sp, r7
 800d930:	bd80      	pop	{r7, pc}
	...

0800d934 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d934:	b480      	push	{r7}
 800d936:	b085      	sub	sp, #20
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
 800d93c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d93e:	2300      	movs	r3, #0
 800d940:	60bb      	str	r3, [r7, #8]
 800d942:	68bb      	ldr	r3, [r7, #8]
 800d944:	60fb      	str	r3, [r7, #12]
 800d946:	e029      	b.n	800d99c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d948:	4a27      	ldr	r2, [pc, #156]	; (800d9e8 <chk_lock+0xb4>)
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	011b      	lsls	r3, r3, #4
 800d94e:	4413      	add	r3, r2
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d01d      	beq.n	800d992 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d956:	4a24      	ldr	r2, [pc, #144]	; (800d9e8 <chk_lock+0xb4>)
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	011b      	lsls	r3, r3, #4
 800d95c:	4413      	add	r3, r2
 800d95e:	681a      	ldr	r2, [r3, #0]
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	429a      	cmp	r2, r3
 800d966:	d116      	bne.n	800d996 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d968:	4a1f      	ldr	r2, [pc, #124]	; (800d9e8 <chk_lock+0xb4>)
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	011b      	lsls	r3, r3, #4
 800d96e:	4413      	add	r3, r2
 800d970:	3304      	adds	r3, #4
 800d972:	681a      	ldr	r2, [r3, #0]
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d978:	429a      	cmp	r2, r3
 800d97a:	d10c      	bne.n	800d996 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d97c:	4a1a      	ldr	r2, [pc, #104]	; (800d9e8 <chk_lock+0xb4>)
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	011b      	lsls	r3, r3, #4
 800d982:	4413      	add	r3, r2
 800d984:	3308      	adds	r3, #8
 800d986:	681a      	ldr	r2, [r3, #0]
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d98c:	429a      	cmp	r2, r3
 800d98e:	d102      	bne.n	800d996 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d990:	e007      	b.n	800d9a2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d992:	2301      	movs	r3, #1
 800d994:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	3301      	adds	r3, #1
 800d99a:	60fb      	str	r3, [r7, #12]
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	2b01      	cmp	r3, #1
 800d9a0:	d9d2      	bls.n	800d948 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	2b02      	cmp	r3, #2
 800d9a6:	d109      	bne.n	800d9bc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d9a8:	68bb      	ldr	r3, [r7, #8]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d102      	bne.n	800d9b4 <chk_lock+0x80>
 800d9ae:	683b      	ldr	r3, [r7, #0]
 800d9b0:	2b02      	cmp	r3, #2
 800d9b2:	d101      	bne.n	800d9b8 <chk_lock+0x84>
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	e010      	b.n	800d9da <chk_lock+0xa6>
 800d9b8:	2312      	movs	r3, #18
 800d9ba:	e00e      	b.n	800d9da <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d9bc:	683b      	ldr	r3, [r7, #0]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d108      	bne.n	800d9d4 <chk_lock+0xa0>
 800d9c2:	4a09      	ldr	r2, [pc, #36]	; (800d9e8 <chk_lock+0xb4>)
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	011b      	lsls	r3, r3, #4
 800d9c8:	4413      	add	r3, r2
 800d9ca:	330c      	adds	r3, #12
 800d9cc:	881b      	ldrh	r3, [r3, #0]
 800d9ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d9d2:	d101      	bne.n	800d9d8 <chk_lock+0xa4>
 800d9d4:	2310      	movs	r3, #16
 800d9d6:	e000      	b.n	800d9da <chk_lock+0xa6>
 800d9d8:	2300      	movs	r3, #0
}
 800d9da:	4618      	mov	r0, r3
 800d9dc:	3714      	adds	r7, #20
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e4:	4770      	bx	lr
 800d9e6:	bf00      	nop
 800d9e8:	20000414 	.word	0x20000414

0800d9ec <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d9ec:	b480      	push	{r7}
 800d9ee:	b083      	sub	sp, #12
 800d9f0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	607b      	str	r3, [r7, #4]
 800d9f6:	e002      	b.n	800d9fe <enq_lock+0x12>
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	3301      	adds	r3, #1
 800d9fc:	607b      	str	r3, [r7, #4]
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	2b01      	cmp	r3, #1
 800da02:	d806      	bhi.n	800da12 <enq_lock+0x26>
 800da04:	4a09      	ldr	r2, [pc, #36]	; (800da2c <enq_lock+0x40>)
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	011b      	lsls	r3, r3, #4
 800da0a:	4413      	add	r3, r2
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d1f2      	bne.n	800d9f8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	2b02      	cmp	r3, #2
 800da16:	bf14      	ite	ne
 800da18:	2301      	movne	r3, #1
 800da1a:	2300      	moveq	r3, #0
 800da1c:	b2db      	uxtb	r3, r3
}
 800da1e:	4618      	mov	r0, r3
 800da20:	370c      	adds	r7, #12
 800da22:	46bd      	mov	sp, r7
 800da24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da28:	4770      	bx	lr
 800da2a:	bf00      	nop
 800da2c:	20000414 	.word	0x20000414

0800da30 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800da30:	b480      	push	{r7}
 800da32:	b085      	sub	sp, #20
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
 800da38:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800da3a:	2300      	movs	r3, #0
 800da3c:	60fb      	str	r3, [r7, #12]
 800da3e:	e01f      	b.n	800da80 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800da40:	4a41      	ldr	r2, [pc, #260]	; (800db48 <inc_lock+0x118>)
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	011b      	lsls	r3, r3, #4
 800da46:	4413      	add	r3, r2
 800da48:	681a      	ldr	r2, [r3, #0]
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	429a      	cmp	r2, r3
 800da50:	d113      	bne.n	800da7a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800da52:	4a3d      	ldr	r2, [pc, #244]	; (800db48 <inc_lock+0x118>)
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	011b      	lsls	r3, r3, #4
 800da58:	4413      	add	r3, r2
 800da5a:	3304      	adds	r3, #4
 800da5c:	681a      	ldr	r2, [r3, #0]
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800da62:	429a      	cmp	r2, r3
 800da64:	d109      	bne.n	800da7a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800da66:	4a38      	ldr	r2, [pc, #224]	; (800db48 <inc_lock+0x118>)
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	011b      	lsls	r3, r3, #4
 800da6c:	4413      	add	r3, r2
 800da6e:	3308      	adds	r3, #8
 800da70:	681a      	ldr	r2, [r3, #0]
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800da76:	429a      	cmp	r2, r3
 800da78:	d006      	beq.n	800da88 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	3301      	adds	r3, #1
 800da7e:	60fb      	str	r3, [r7, #12]
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	2b01      	cmp	r3, #1
 800da84:	d9dc      	bls.n	800da40 <inc_lock+0x10>
 800da86:	e000      	b.n	800da8a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800da88:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	2b02      	cmp	r3, #2
 800da8e:	d132      	bne.n	800daf6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800da90:	2300      	movs	r3, #0
 800da92:	60fb      	str	r3, [r7, #12]
 800da94:	e002      	b.n	800da9c <inc_lock+0x6c>
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	3301      	adds	r3, #1
 800da9a:	60fb      	str	r3, [r7, #12]
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	2b01      	cmp	r3, #1
 800daa0:	d806      	bhi.n	800dab0 <inc_lock+0x80>
 800daa2:	4a29      	ldr	r2, [pc, #164]	; (800db48 <inc_lock+0x118>)
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	011b      	lsls	r3, r3, #4
 800daa8:	4413      	add	r3, r2
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d1f2      	bne.n	800da96 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	2b02      	cmp	r3, #2
 800dab4:	d101      	bne.n	800daba <inc_lock+0x8a>
 800dab6:	2300      	movs	r3, #0
 800dab8:	e040      	b.n	800db3c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681a      	ldr	r2, [r3, #0]
 800dabe:	4922      	ldr	r1, [pc, #136]	; (800db48 <inc_lock+0x118>)
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	011b      	lsls	r3, r3, #4
 800dac4:	440b      	add	r3, r1
 800dac6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	689a      	ldr	r2, [r3, #8]
 800dacc:	491e      	ldr	r1, [pc, #120]	; (800db48 <inc_lock+0x118>)
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	011b      	lsls	r3, r3, #4
 800dad2:	440b      	add	r3, r1
 800dad4:	3304      	adds	r3, #4
 800dad6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	695a      	ldr	r2, [r3, #20]
 800dadc:	491a      	ldr	r1, [pc, #104]	; (800db48 <inc_lock+0x118>)
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	011b      	lsls	r3, r3, #4
 800dae2:	440b      	add	r3, r1
 800dae4:	3308      	adds	r3, #8
 800dae6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800dae8:	4a17      	ldr	r2, [pc, #92]	; (800db48 <inc_lock+0x118>)
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	011b      	lsls	r3, r3, #4
 800daee:	4413      	add	r3, r2
 800daf0:	330c      	adds	r3, #12
 800daf2:	2200      	movs	r2, #0
 800daf4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800daf6:	683b      	ldr	r3, [r7, #0]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d009      	beq.n	800db10 <inc_lock+0xe0>
 800dafc:	4a12      	ldr	r2, [pc, #72]	; (800db48 <inc_lock+0x118>)
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	011b      	lsls	r3, r3, #4
 800db02:	4413      	add	r3, r2
 800db04:	330c      	adds	r3, #12
 800db06:	881b      	ldrh	r3, [r3, #0]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d001      	beq.n	800db10 <inc_lock+0xe0>
 800db0c:	2300      	movs	r3, #0
 800db0e:	e015      	b.n	800db3c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800db10:	683b      	ldr	r3, [r7, #0]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d108      	bne.n	800db28 <inc_lock+0xf8>
 800db16:	4a0c      	ldr	r2, [pc, #48]	; (800db48 <inc_lock+0x118>)
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	011b      	lsls	r3, r3, #4
 800db1c:	4413      	add	r3, r2
 800db1e:	330c      	adds	r3, #12
 800db20:	881b      	ldrh	r3, [r3, #0]
 800db22:	3301      	adds	r3, #1
 800db24:	b29a      	uxth	r2, r3
 800db26:	e001      	b.n	800db2c <inc_lock+0xfc>
 800db28:	f44f 7280 	mov.w	r2, #256	; 0x100
 800db2c:	4906      	ldr	r1, [pc, #24]	; (800db48 <inc_lock+0x118>)
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	011b      	lsls	r3, r3, #4
 800db32:	440b      	add	r3, r1
 800db34:	330c      	adds	r3, #12
 800db36:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	3301      	adds	r3, #1
}
 800db3c:	4618      	mov	r0, r3
 800db3e:	3714      	adds	r7, #20
 800db40:	46bd      	mov	sp, r7
 800db42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db46:	4770      	bx	lr
 800db48:	20000414 	.word	0x20000414

0800db4c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800db4c:	b480      	push	{r7}
 800db4e:	b085      	sub	sp, #20
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	3b01      	subs	r3, #1
 800db58:	607b      	str	r3, [r7, #4]
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	2b01      	cmp	r3, #1
 800db5e:	d825      	bhi.n	800dbac <dec_lock+0x60>
		n = Files[i].ctr;
 800db60:	4a17      	ldr	r2, [pc, #92]	; (800dbc0 <dec_lock+0x74>)
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	011b      	lsls	r3, r3, #4
 800db66:	4413      	add	r3, r2
 800db68:	330c      	adds	r3, #12
 800db6a:	881b      	ldrh	r3, [r3, #0]
 800db6c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800db6e:	89fb      	ldrh	r3, [r7, #14]
 800db70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db74:	d101      	bne.n	800db7a <dec_lock+0x2e>
 800db76:	2300      	movs	r3, #0
 800db78:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800db7a:	89fb      	ldrh	r3, [r7, #14]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d002      	beq.n	800db86 <dec_lock+0x3a>
 800db80:	89fb      	ldrh	r3, [r7, #14]
 800db82:	3b01      	subs	r3, #1
 800db84:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800db86:	4a0e      	ldr	r2, [pc, #56]	; (800dbc0 <dec_lock+0x74>)
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	011b      	lsls	r3, r3, #4
 800db8c:	4413      	add	r3, r2
 800db8e:	330c      	adds	r3, #12
 800db90:	89fa      	ldrh	r2, [r7, #14]
 800db92:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800db94:	89fb      	ldrh	r3, [r7, #14]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d105      	bne.n	800dba6 <dec_lock+0x5a>
 800db9a:	4a09      	ldr	r2, [pc, #36]	; (800dbc0 <dec_lock+0x74>)
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	011b      	lsls	r3, r3, #4
 800dba0:	4413      	add	r3, r2
 800dba2:	2200      	movs	r2, #0
 800dba4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800dba6:	2300      	movs	r3, #0
 800dba8:	737b      	strb	r3, [r7, #13]
 800dbaa:	e001      	b.n	800dbb0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800dbac:	2302      	movs	r3, #2
 800dbae:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800dbb0:	7b7b      	ldrb	r3, [r7, #13]
}
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	3714      	adds	r7, #20
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbbc:	4770      	bx	lr
 800dbbe:	bf00      	nop
 800dbc0:	20000414 	.word	0x20000414

0800dbc4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800dbc4:	b480      	push	{r7}
 800dbc6:	b085      	sub	sp, #20
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800dbcc:	2300      	movs	r3, #0
 800dbce:	60fb      	str	r3, [r7, #12]
 800dbd0:	e010      	b.n	800dbf4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800dbd2:	4a0d      	ldr	r2, [pc, #52]	; (800dc08 <clear_lock+0x44>)
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	011b      	lsls	r3, r3, #4
 800dbd8:	4413      	add	r3, r2
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	687a      	ldr	r2, [r7, #4]
 800dbde:	429a      	cmp	r2, r3
 800dbe0:	d105      	bne.n	800dbee <clear_lock+0x2a>
 800dbe2:	4a09      	ldr	r2, [pc, #36]	; (800dc08 <clear_lock+0x44>)
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	011b      	lsls	r3, r3, #4
 800dbe8:	4413      	add	r3, r2
 800dbea:	2200      	movs	r2, #0
 800dbec:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	3301      	adds	r3, #1
 800dbf2:	60fb      	str	r3, [r7, #12]
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	2b01      	cmp	r3, #1
 800dbf8:	d9eb      	bls.n	800dbd2 <clear_lock+0xe>
	}
}
 800dbfa:	bf00      	nop
 800dbfc:	bf00      	nop
 800dbfe:	3714      	adds	r7, #20
 800dc00:	46bd      	mov	sp, r7
 800dc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc06:	4770      	bx	lr
 800dc08:	20000414 	.word	0x20000414

0800dc0c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b086      	sub	sp, #24
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800dc14:	2300      	movs	r3, #0
 800dc16:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	78db      	ldrb	r3, [r3, #3]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d034      	beq.n	800dc8a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc24:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	7858      	ldrb	r0, [r3, #1]
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800dc30:	2301      	movs	r3, #1
 800dc32:	697a      	ldr	r2, [r7, #20]
 800dc34:	f7ff fd0e 	bl	800d654 <disk_write>
 800dc38:	4603      	mov	r3, r0
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d002      	beq.n	800dc44 <sync_window+0x38>
			res = FR_DISK_ERR;
 800dc3e:	2301      	movs	r3, #1
 800dc40:	73fb      	strb	r3, [r7, #15]
 800dc42:	e022      	b.n	800dc8a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2200      	movs	r2, #0
 800dc48:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc4e:	697a      	ldr	r2, [r7, #20]
 800dc50:	1ad2      	subs	r2, r2, r3
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	69db      	ldr	r3, [r3, #28]
 800dc56:	429a      	cmp	r2, r3
 800dc58:	d217      	bcs.n	800dc8a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	789b      	ldrb	r3, [r3, #2]
 800dc5e:	613b      	str	r3, [r7, #16]
 800dc60:	e010      	b.n	800dc84 <sync_window+0x78>
					wsect += fs->fsize;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	69db      	ldr	r3, [r3, #28]
 800dc66:	697a      	ldr	r2, [r7, #20]
 800dc68:	4413      	add	r3, r2
 800dc6a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	7858      	ldrb	r0, [r3, #1]
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800dc76:	2301      	movs	r3, #1
 800dc78:	697a      	ldr	r2, [r7, #20]
 800dc7a:	f7ff fceb 	bl	800d654 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800dc7e:	693b      	ldr	r3, [r7, #16]
 800dc80:	3b01      	subs	r3, #1
 800dc82:	613b      	str	r3, [r7, #16]
 800dc84:	693b      	ldr	r3, [r7, #16]
 800dc86:	2b01      	cmp	r3, #1
 800dc88:	d8eb      	bhi.n	800dc62 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800dc8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	3718      	adds	r7, #24
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}

0800dc94 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b084      	sub	sp, #16
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
 800dc9c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800dc9e:	2300      	movs	r3, #0
 800dca0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dca6:	683a      	ldr	r2, [r7, #0]
 800dca8:	429a      	cmp	r2, r3
 800dcaa:	d01b      	beq.n	800dce4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800dcac:	6878      	ldr	r0, [r7, #4]
 800dcae:	f7ff ffad 	bl	800dc0c <sync_window>
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800dcb6:	7bfb      	ldrb	r3, [r7, #15]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d113      	bne.n	800dce4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	7858      	ldrb	r0, [r3, #1]
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800dcc6:	2301      	movs	r3, #1
 800dcc8:	683a      	ldr	r2, [r7, #0]
 800dcca:	f7ff fca3 	bl	800d614 <disk_read>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d004      	beq.n	800dcde <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800dcd4:	f04f 33ff 	mov.w	r3, #4294967295
 800dcd8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800dcda:	2301      	movs	r3, #1
 800dcdc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	683a      	ldr	r2, [r7, #0]
 800dce2:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800dce4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dce6:	4618      	mov	r0, r3
 800dce8:	3710      	adds	r7, #16
 800dcea:	46bd      	mov	sp, r7
 800dcec:	bd80      	pop	{r7, pc}
	...

0800dcf0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b084      	sub	sp, #16
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800dcf8:	6878      	ldr	r0, [r7, #4]
 800dcfa:	f7ff ff87 	bl	800dc0c <sync_window>
 800dcfe:	4603      	mov	r3, r0
 800dd00:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800dd02:	7bfb      	ldrb	r3, [r7, #15]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d158      	bne.n	800ddba <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	781b      	ldrb	r3, [r3, #0]
 800dd0c:	2b03      	cmp	r3, #3
 800dd0e:	d148      	bne.n	800dda2 <sync_fs+0xb2>
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	791b      	ldrb	r3, [r3, #4]
 800dd14:	2b01      	cmp	r3, #1
 800dd16:	d144      	bne.n	800dda2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	3334      	adds	r3, #52	; 0x34
 800dd1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dd20:	2100      	movs	r1, #0
 800dd22:	4618      	mov	r0, r3
 800dd24:	f7ff fd77 	bl	800d816 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	3334      	adds	r3, #52	; 0x34
 800dd2c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dd30:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800dd34:	4618      	mov	r0, r3
 800dd36:	f7ff fd06 	bl	800d746 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	3334      	adds	r3, #52	; 0x34
 800dd3e:	4921      	ldr	r1, [pc, #132]	; (800ddc4 <sync_fs+0xd4>)
 800dd40:	4618      	mov	r0, r3
 800dd42:	f7ff fd1b 	bl	800d77c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	3334      	adds	r3, #52	; 0x34
 800dd4a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800dd4e:	491e      	ldr	r1, [pc, #120]	; (800ddc8 <sync_fs+0xd8>)
 800dd50:	4618      	mov	r0, r3
 800dd52:	f7ff fd13 	bl	800d77c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	3334      	adds	r3, #52	; 0x34
 800dd5a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	695b      	ldr	r3, [r3, #20]
 800dd62:	4619      	mov	r1, r3
 800dd64:	4610      	mov	r0, r2
 800dd66:	f7ff fd09 	bl	800d77c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	3334      	adds	r3, #52	; 0x34
 800dd6e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	691b      	ldr	r3, [r3, #16]
 800dd76:	4619      	mov	r1, r3
 800dd78:	4610      	mov	r0, r2
 800dd7a:	f7ff fcff 	bl	800d77c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	6a1b      	ldr	r3, [r3, #32]
 800dd82:	1c5a      	adds	r2, r3, #1
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	7858      	ldrb	r0, [r3, #1]
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dd96:	2301      	movs	r3, #1
 800dd98:	f7ff fc5c 	bl	800d654 <disk_write>
			fs->fsi_flag = 0;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2200      	movs	r2, #0
 800dda0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	785b      	ldrb	r3, [r3, #1]
 800dda6:	2200      	movs	r2, #0
 800dda8:	2100      	movs	r1, #0
 800ddaa:	4618      	mov	r0, r3
 800ddac:	f7ff fc72 	bl	800d694 <disk_ioctl>
 800ddb0:	4603      	mov	r3, r0
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d001      	beq.n	800ddba <sync_fs+0xca>
 800ddb6:	2301      	movs	r3, #1
 800ddb8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ddba:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	3710      	adds	r7, #16
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	bd80      	pop	{r7, pc}
 800ddc4:	41615252 	.word	0x41615252
 800ddc8:	61417272 	.word	0x61417272

0800ddcc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ddcc:	b480      	push	{r7}
 800ddce:	b083      	sub	sp, #12
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
 800ddd4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	3b02      	subs	r3, #2
 800ddda:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	699b      	ldr	r3, [r3, #24]
 800dde0:	3b02      	subs	r3, #2
 800dde2:	683a      	ldr	r2, [r7, #0]
 800dde4:	429a      	cmp	r2, r3
 800dde6:	d301      	bcc.n	800ddec <clust2sect+0x20>
 800dde8:	2300      	movs	r3, #0
 800ddea:	e008      	b.n	800ddfe <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	895b      	ldrh	r3, [r3, #10]
 800ddf0:	461a      	mov	r2, r3
 800ddf2:	683b      	ldr	r3, [r7, #0]
 800ddf4:	fb03 f202 	mul.w	r2, r3, r2
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddfc:	4413      	add	r3, r2
}
 800ddfe:	4618      	mov	r0, r3
 800de00:	370c      	adds	r7, #12
 800de02:	46bd      	mov	sp, r7
 800de04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de08:	4770      	bx	lr

0800de0a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800de0a:	b580      	push	{r7, lr}
 800de0c:	b086      	sub	sp, #24
 800de0e:	af00      	add	r7, sp, #0
 800de10:	6078      	str	r0, [r7, #4]
 800de12:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800de1a:	683b      	ldr	r3, [r7, #0]
 800de1c:	2b01      	cmp	r3, #1
 800de1e:	d904      	bls.n	800de2a <get_fat+0x20>
 800de20:	693b      	ldr	r3, [r7, #16]
 800de22:	699b      	ldr	r3, [r3, #24]
 800de24:	683a      	ldr	r2, [r7, #0]
 800de26:	429a      	cmp	r2, r3
 800de28:	d302      	bcc.n	800de30 <get_fat+0x26>
		val = 1;	/* Internal error */
 800de2a:	2301      	movs	r3, #1
 800de2c:	617b      	str	r3, [r7, #20]
 800de2e:	e08f      	b.n	800df50 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800de30:	f04f 33ff 	mov.w	r3, #4294967295
 800de34:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800de36:	693b      	ldr	r3, [r7, #16]
 800de38:	781b      	ldrb	r3, [r3, #0]
 800de3a:	2b03      	cmp	r3, #3
 800de3c:	d062      	beq.n	800df04 <get_fat+0xfa>
 800de3e:	2b03      	cmp	r3, #3
 800de40:	dc7c      	bgt.n	800df3c <get_fat+0x132>
 800de42:	2b01      	cmp	r3, #1
 800de44:	d002      	beq.n	800de4c <get_fat+0x42>
 800de46:	2b02      	cmp	r3, #2
 800de48:	d042      	beq.n	800ded0 <get_fat+0xc6>
 800de4a:	e077      	b.n	800df3c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	60fb      	str	r3, [r7, #12]
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	085b      	lsrs	r3, r3, #1
 800de54:	68fa      	ldr	r2, [r7, #12]
 800de56:	4413      	add	r3, r2
 800de58:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800de5a:	693b      	ldr	r3, [r7, #16]
 800de5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	0a5b      	lsrs	r3, r3, #9
 800de62:	4413      	add	r3, r2
 800de64:	4619      	mov	r1, r3
 800de66:	6938      	ldr	r0, [r7, #16]
 800de68:	f7ff ff14 	bl	800dc94 <move_window>
 800de6c:	4603      	mov	r3, r0
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d167      	bne.n	800df42 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	1c5a      	adds	r2, r3, #1
 800de76:	60fa      	str	r2, [r7, #12]
 800de78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de7c:	693a      	ldr	r2, [r7, #16]
 800de7e:	4413      	add	r3, r2
 800de80:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800de84:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800de86:	693b      	ldr	r3, [r7, #16]
 800de88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	0a5b      	lsrs	r3, r3, #9
 800de8e:	4413      	add	r3, r2
 800de90:	4619      	mov	r1, r3
 800de92:	6938      	ldr	r0, [r7, #16]
 800de94:	f7ff fefe 	bl	800dc94 <move_window>
 800de98:	4603      	mov	r3, r0
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d153      	bne.n	800df46 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dea4:	693a      	ldr	r2, [r7, #16]
 800dea6:	4413      	add	r3, r2
 800dea8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800deac:	021b      	lsls	r3, r3, #8
 800deae:	461a      	mov	r2, r3
 800deb0:	68bb      	ldr	r3, [r7, #8]
 800deb2:	4313      	orrs	r3, r2
 800deb4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800deb6:	683b      	ldr	r3, [r7, #0]
 800deb8:	f003 0301 	and.w	r3, r3, #1
 800debc:	2b00      	cmp	r3, #0
 800debe:	d002      	beq.n	800dec6 <get_fat+0xbc>
 800dec0:	68bb      	ldr	r3, [r7, #8]
 800dec2:	091b      	lsrs	r3, r3, #4
 800dec4:	e002      	b.n	800decc <get_fat+0xc2>
 800dec6:	68bb      	ldr	r3, [r7, #8]
 800dec8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800decc:	617b      	str	r3, [r7, #20]
			break;
 800dece:	e03f      	b.n	800df50 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ded0:	693b      	ldr	r3, [r7, #16]
 800ded2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ded4:	683b      	ldr	r3, [r7, #0]
 800ded6:	0a1b      	lsrs	r3, r3, #8
 800ded8:	4413      	add	r3, r2
 800deda:	4619      	mov	r1, r3
 800dedc:	6938      	ldr	r0, [r7, #16]
 800dede:	f7ff fed9 	bl	800dc94 <move_window>
 800dee2:	4603      	mov	r3, r0
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d130      	bne.n	800df4a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800dee8:	693b      	ldr	r3, [r7, #16]
 800deea:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800deee:	683b      	ldr	r3, [r7, #0]
 800def0:	005b      	lsls	r3, r3, #1
 800def2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800def6:	4413      	add	r3, r2
 800def8:	4618      	mov	r0, r3
 800defa:	f7ff fbe9 	bl	800d6d0 <ld_word>
 800defe:	4603      	mov	r3, r0
 800df00:	617b      	str	r3, [r7, #20]
			break;
 800df02:	e025      	b.n	800df50 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800df04:	693b      	ldr	r3, [r7, #16]
 800df06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800df08:	683b      	ldr	r3, [r7, #0]
 800df0a:	09db      	lsrs	r3, r3, #7
 800df0c:	4413      	add	r3, r2
 800df0e:	4619      	mov	r1, r3
 800df10:	6938      	ldr	r0, [r7, #16]
 800df12:	f7ff febf 	bl	800dc94 <move_window>
 800df16:	4603      	mov	r3, r0
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d118      	bne.n	800df4e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800df1c:	693b      	ldr	r3, [r7, #16]
 800df1e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800df22:	683b      	ldr	r3, [r7, #0]
 800df24:	009b      	lsls	r3, r3, #2
 800df26:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800df2a:	4413      	add	r3, r2
 800df2c:	4618      	mov	r0, r3
 800df2e:	f7ff fbe7 	bl	800d700 <ld_dword>
 800df32:	4603      	mov	r3, r0
 800df34:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800df38:	617b      	str	r3, [r7, #20]
			break;
 800df3a:	e009      	b.n	800df50 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800df3c:	2301      	movs	r3, #1
 800df3e:	617b      	str	r3, [r7, #20]
 800df40:	e006      	b.n	800df50 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800df42:	bf00      	nop
 800df44:	e004      	b.n	800df50 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800df46:	bf00      	nop
 800df48:	e002      	b.n	800df50 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800df4a:	bf00      	nop
 800df4c:	e000      	b.n	800df50 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800df4e:	bf00      	nop
		}
	}

	return val;
 800df50:	697b      	ldr	r3, [r7, #20]
}
 800df52:	4618      	mov	r0, r3
 800df54:	3718      	adds	r7, #24
 800df56:	46bd      	mov	sp, r7
 800df58:	bd80      	pop	{r7, pc}

0800df5a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800df5a:	b590      	push	{r4, r7, lr}
 800df5c:	b089      	sub	sp, #36	; 0x24
 800df5e:	af00      	add	r7, sp, #0
 800df60:	60f8      	str	r0, [r7, #12]
 800df62:	60b9      	str	r1, [r7, #8]
 800df64:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800df66:	2302      	movs	r3, #2
 800df68:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800df6a:	68bb      	ldr	r3, [r7, #8]
 800df6c:	2b01      	cmp	r3, #1
 800df6e:	f240 80d2 	bls.w	800e116 <put_fat+0x1bc>
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	699b      	ldr	r3, [r3, #24]
 800df76:	68ba      	ldr	r2, [r7, #8]
 800df78:	429a      	cmp	r2, r3
 800df7a:	f080 80cc 	bcs.w	800e116 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	781b      	ldrb	r3, [r3, #0]
 800df82:	2b03      	cmp	r3, #3
 800df84:	f000 8096 	beq.w	800e0b4 <put_fat+0x15a>
 800df88:	2b03      	cmp	r3, #3
 800df8a:	f300 80cd 	bgt.w	800e128 <put_fat+0x1ce>
 800df8e:	2b01      	cmp	r3, #1
 800df90:	d002      	beq.n	800df98 <put_fat+0x3e>
 800df92:	2b02      	cmp	r3, #2
 800df94:	d06e      	beq.n	800e074 <put_fat+0x11a>
 800df96:	e0c7      	b.n	800e128 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800df98:	68bb      	ldr	r3, [r7, #8]
 800df9a:	61bb      	str	r3, [r7, #24]
 800df9c:	69bb      	ldr	r3, [r7, #24]
 800df9e:	085b      	lsrs	r3, r3, #1
 800dfa0:	69ba      	ldr	r2, [r7, #24]
 800dfa2:	4413      	add	r3, r2
 800dfa4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dfaa:	69bb      	ldr	r3, [r7, #24]
 800dfac:	0a5b      	lsrs	r3, r3, #9
 800dfae:	4413      	add	r3, r2
 800dfb0:	4619      	mov	r1, r3
 800dfb2:	68f8      	ldr	r0, [r7, #12]
 800dfb4:	f7ff fe6e 	bl	800dc94 <move_window>
 800dfb8:	4603      	mov	r3, r0
 800dfba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dfbc:	7ffb      	ldrb	r3, [r7, #31]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	f040 80ab 	bne.w	800e11a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dfca:	69bb      	ldr	r3, [r7, #24]
 800dfcc:	1c59      	adds	r1, r3, #1
 800dfce:	61b9      	str	r1, [r7, #24]
 800dfd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dfd4:	4413      	add	r3, r2
 800dfd6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800dfd8:	68bb      	ldr	r3, [r7, #8]
 800dfda:	f003 0301 	and.w	r3, r3, #1
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d00d      	beq.n	800dffe <put_fat+0xa4>
 800dfe2:	697b      	ldr	r3, [r7, #20]
 800dfe4:	781b      	ldrb	r3, [r3, #0]
 800dfe6:	b25b      	sxtb	r3, r3
 800dfe8:	f003 030f 	and.w	r3, r3, #15
 800dfec:	b25a      	sxtb	r2, r3
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	b2db      	uxtb	r3, r3
 800dff2:	011b      	lsls	r3, r3, #4
 800dff4:	b25b      	sxtb	r3, r3
 800dff6:	4313      	orrs	r3, r2
 800dff8:	b25b      	sxtb	r3, r3
 800dffa:	b2db      	uxtb	r3, r3
 800dffc:	e001      	b.n	800e002 <put_fat+0xa8>
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	b2db      	uxtb	r3, r3
 800e002:	697a      	ldr	r2, [r7, #20]
 800e004:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	2201      	movs	r2, #1
 800e00a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e010:	69bb      	ldr	r3, [r7, #24]
 800e012:	0a5b      	lsrs	r3, r3, #9
 800e014:	4413      	add	r3, r2
 800e016:	4619      	mov	r1, r3
 800e018:	68f8      	ldr	r0, [r7, #12]
 800e01a:	f7ff fe3b 	bl	800dc94 <move_window>
 800e01e:	4603      	mov	r3, r0
 800e020:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e022:	7ffb      	ldrb	r3, [r7, #31]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d17a      	bne.n	800e11e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e02e:	69bb      	ldr	r3, [r7, #24]
 800e030:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e034:	4413      	add	r3, r2
 800e036:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e038:	68bb      	ldr	r3, [r7, #8]
 800e03a:	f003 0301 	and.w	r3, r3, #1
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d003      	beq.n	800e04a <put_fat+0xf0>
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	091b      	lsrs	r3, r3, #4
 800e046:	b2db      	uxtb	r3, r3
 800e048:	e00e      	b.n	800e068 <put_fat+0x10e>
 800e04a:	697b      	ldr	r3, [r7, #20]
 800e04c:	781b      	ldrb	r3, [r3, #0]
 800e04e:	b25b      	sxtb	r3, r3
 800e050:	f023 030f 	bic.w	r3, r3, #15
 800e054:	b25a      	sxtb	r2, r3
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	0a1b      	lsrs	r3, r3, #8
 800e05a:	b25b      	sxtb	r3, r3
 800e05c:	f003 030f 	and.w	r3, r3, #15
 800e060:	b25b      	sxtb	r3, r3
 800e062:	4313      	orrs	r3, r2
 800e064:	b25b      	sxtb	r3, r3
 800e066:	b2db      	uxtb	r3, r3
 800e068:	697a      	ldr	r2, [r7, #20]
 800e06a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	2201      	movs	r2, #1
 800e070:	70da      	strb	r2, [r3, #3]
			break;
 800e072:	e059      	b.n	800e128 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e078:	68bb      	ldr	r3, [r7, #8]
 800e07a:	0a1b      	lsrs	r3, r3, #8
 800e07c:	4413      	add	r3, r2
 800e07e:	4619      	mov	r1, r3
 800e080:	68f8      	ldr	r0, [r7, #12]
 800e082:	f7ff fe07 	bl	800dc94 <move_window>
 800e086:	4603      	mov	r3, r0
 800e088:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e08a:	7ffb      	ldrb	r3, [r7, #31]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d148      	bne.n	800e122 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e096:	68bb      	ldr	r3, [r7, #8]
 800e098:	005b      	lsls	r3, r3, #1
 800e09a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800e09e:	4413      	add	r3, r2
 800e0a0:	687a      	ldr	r2, [r7, #4]
 800e0a2:	b292      	uxth	r2, r2
 800e0a4:	4611      	mov	r1, r2
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	f7ff fb4d 	bl	800d746 <st_word>
			fs->wflag = 1;
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	2201      	movs	r2, #1
 800e0b0:	70da      	strb	r2, [r3, #3]
			break;
 800e0b2:	e039      	b.n	800e128 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e0b8:	68bb      	ldr	r3, [r7, #8]
 800e0ba:	09db      	lsrs	r3, r3, #7
 800e0bc:	4413      	add	r3, r2
 800e0be:	4619      	mov	r1, r3
 800e0c0:	68f8      	ldr	r0, [r7, #12]
 800e0c2:	f7ff fde7 	bl	800dc94 <move_window>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e0ca:	7ffb      	ldrb	r3, [r7, #31]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d12a      	bne.n	800e126 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e0dc:	68bb      	ldr	r3, [r7, #8]
 800e0de:	009b      	lsls	r3, r3, #2
 800e0e0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800e0e4:	4413      	add	r3, r2
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	f7ff fb0a 	bl	800d700 <ld_dword>
 800e0ec:	4603      	mov	r3, r0
 800e0ee:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e0f2:	4323      	orrs	r3, r4
 800e0f4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e0fc:	68bb      	ldr	r3, [r7, #8]
 800e0fe:	009b      	lsls	r3, r3, #2
 800e100:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800e104:	4413      	add	r3, r2
 800e106:	6879      	ldr	r1, [r7, #4]
 800e108:	4618      	mov	r0, r3
 800e10a:	f7ff fb37 	bl	800d77c <st_dword>
			fs->wflag = 1;
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	2201      	movs	r2, #1
 800e112:	70da      	strb	r2, [r3, #3]
			break;
 800e114:	e008      	b.n	800e128 <put_fat+0x1ce>
		}
	}
 800e116:	bf00      	nop
 800e118:	e006      	b.n	800e128 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800e11a:	bf00      	nop
 800e11c:	e004      	b.n	800e128 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800e11e:	bf00      	nop
 800e120:	e002      	b.n	800e128 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800e122:	bf00      	nop
 800e124:	e000      	b.n	800e128 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800e126:	bf00      	nop
	return res;
 800e128:	7ffb      	ldrb	r3, [r7, #31]
}
 800e12a:	4618      	mov	r0, r3
 800e12c:	3724      	adds	r7, #36	; 0x24
 800e12e:	46bd      	mov	sp, r7
 800e130:	bd90      	pop	{r4, r7, pc}

0800e132 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800e132:	b580      	push	{r7, lr}
 800e134:	b088      	sub	sp, #32
 800e136:	af00      	add	r7, sp, #0
 800e138:	60f8      	str	r0, [r7, #12]
 800e13a:	60b9      	str	r1, [r7, #8]
 800e13c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800e13e:	2300      	movs	r3, #0
 800e140:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e148:	68bb      	ldr	r3, [r7, #8]
 800e14a:	2b01      	cmp	r3, #1
 800e14c:	d904      	bls.n	800e158 <remove_chain+0x26>
 800e14e:	69bb      	ldr	r3, [r7, #24]
 800e150:	699b      	ldr	r3, [r3, #24]
 800e152:	68ba      	ldr	r2, [r7, #8]
 800e154:	429a      	cmp	r2, r3
 800e156:	d301      	bcc.n	800e15c <remove_chain+0x2a>
 800e158:	2302      	movs	r3, #2
 800e15a:	e04b      	b.n	800e1f4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d00c      	beq.n	800e17c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800e162:	f04f 32ff 	mov.w	r2, #4294967295
 800e166:	6879      	ldr	r1, [r7, #4]
 800e168:	69b8      	ldr	r0, [r7, #24]
 800e16a:	f7ff fef6 	bl	800df5a <put_fat>
 800e16e:	4603      	mov	r3, r0
 800e170:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800e172:	7ffb      	ldrb	r3, [r7, #31]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d001      	beq.n	800e17c <remove_chain+0x4a>
 800e178:	7ffb      	ldrb	r3, [r7, #31]
 800e17a:	e03b      	b.n	800e1f4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e17c:	68b9      	ldr	r1, [r7, #8]
 800e17e:	68f8      	ldr	r0, [r7, #12]
 800e180:	f7ff fe43 	bl	800de0a <get_fat>
 800e184:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800e186:	697b      	ldr	r3, [r7, #20]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d031      	beq.n	800e1f0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e18c:	697b      	ldr	r3, [r7, #20]
 800e18e:	2b01      	cmp	r3, #1
 800e190:	d101      	bne.n	800e196 <remove_chain+0x64>
 800e192:	2302      	movs	r3, #2
 800e194:	e02e      	b.n	800e1f4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e196:	697b      	ldr	r3, [r7, #20]
 800e198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e19c:	d101      	bne.n	800e1a2 <remove_chain+0x70>
 800e19e:	2301      	movs	r3, #1
 800e1a0:	e028      	b.n	800e1f4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	68b9      	ldr	r1, [r7, #8]
 800e1a6:	69b8      	ldr	r0, [r7, #24]
 800e1a8:	f7ff fed7 	bl	800df5a <put_fat>
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800e1b0:	7ffb      	ldrb	r3, [r7, #31]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d001      	beq.n	800e1ba <remove_chain+0x88>
 800e1b6:	7ffb      	ldrb	r3, [r7, #31]
 800e1b8:	e01c      	b.n	800e1f4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e1ba:	69bb      	ldr	r3, [r7, #24]
 800e1bc:	695a      	ldr	r2, [r3, #20]
 800e1be:	69bb      	ldr	r3, [r7, #24]
 800e1c0:	699b      	ldr	r3, [r3, #24]
 800e1c2:	3b02      	subs	r3, #2
 800e1c4:	429a      	cmp	r2, r3
 800e1c6:	d20b      	bcs.n	800e1e0 <remove_chain+0xae>
			fs->free_clst++;
 800e1c8:	69bb      	ldr	r3, [r7, #24]
 800e1ca:	695b      	ldr	r3, [r3, #20]
 800e1cc:	1c5a      	adds	r2, r3, #1
 800e1ce:	69bb      	ldr	r3, [r7, #24]
 800e1d0:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800e1d2:	69bb      	ldr	r3, [r7, #24]
 800e1d4:	791b      	ldrb	r3, [r3, #4]
 800e1d6:	f043 0301 	orr.w	r3, r3, #1
 800e1da:	b2da      	uxtb	r2, r3
 800e1dc:	69bb      	ldr	r3, [r7, #24]
 800e1de:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800e1e0:	697b      	ldr	r3, [r7, #20]
 800e1e2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e1e4:	69bb      	ldr	r3, [r7, #24]
 800e1e6:	699b      	ldr	r3, [r3, #24]
 800e1e8:	68ba      	ldr	r2, [r7, #8]
 800e1ea:	429a      	cmp	r2, r3
 800e1ec:	d3c6      	bcc.n	800e17c <remove_chain+0x4a>
 800e1ee:	e000      	b.n	800e1f2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800e1f0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800e1f2:	2300      	movs	r3, #0
}
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	3720      	adds	r7, #32
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	bd80      	pop	{r7, pc}

0800e1fc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b088      	sub	sp, #32
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
 800e204:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e20c:	683b      	ldr	r3, [r7, #0]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d10d      	bne.n	800e22e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e212:	693b      	ldr	r3, [r7, #16]
 800e214:	691b      	ldr	r3, [r3, #16]
 800e216:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e218:	69bb      	ldr	r3, [r7, #24]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d004      	beq.n	800e228 <create_chain+0x2c>
 800e21e:	693b      	ldr	r3, [r7, #16]
 800e220:	699b      	ldr	r3, [r3, #24]
 800e222:	69ba      	ldr	r2, [r7, #24]
 800e224:	429a      	cmp	r2, r3
 800e226:	d31b      	bcc.n	800e260 <create_chain+0x64>
 800e228:	2301      	movs	r3, #1
 800e22a:	61bb      	str	r3, [r7, #24]
 800e22c:	e018      	b.n	800e260 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e22e:	6839      	ldr	r1, [r7, #0]
 800e230:	6878      	ldr	r0, [r7, #4]
 800e232:	f7ff fdea 	bl	800de0a <get_fat>
 800e236:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	2b01      	cmp	r3, #1
 800e23c:	d801      	bhi.n	800e242 <create_chain+0x46>
 800e23e:	2301      	movs	r3, #1
 800e240:	e070      	b.n	800e324 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e248:	d101      	bne.n	800e24e <create_chain+0x52>
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	e06a      	b.n	800e324 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e24e:	693b      	ldr	r3, [r7, #16]
 800e250:	699b      	ldr	r3, [r3, #24]
 800e252:	68fa      	ldr	r2, [r7, #12]
 800e254:	429a      	cmp	r2, r3
 800e256:	d201      	bcs.n	800e25c <create_chain+0x60>
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	e063      	b.n	800e324 <create_chain+0x128>
		scl = clst;
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800e260:	69bb      	ldr	r3, [r7, #24]
 800e262:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800e264:	69fb      	ldr	r3, [r7, #28]
 800e266:	3301      	adds	r3, #1
 800e268:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e26a:	693b      	ldr	r3, [r7, #16]
 800e26c:	699b      	ldr	r3, [r3, #24]
 800e26e:	69fa      	ldr	r2, [r7, #28]
 800e270:	429a      	cmp	r2, r3
 800e272:	d307      	bcc.n	800e284 <create_chain+0x88>
				ncl = 2;
 800e274:	2302      	movs	r3, #2
 800e276:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800e278:	69fa      	ldr	r2, [r7, #28]
 800e27a:	69bb      	ldr	r3, [r7, #24]
 800e27c:	429a      	cmp	r2, r3
 800e27e:	d901      	bls.n	800e284 <create_chain+0x88>
 800e280:	2300      	movs	r3, #0
 800e282:	e04f      	b.n	800e324 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e284:	69f9      	ldr	r1, [r7, #28]
 800e286:	6878      	ldr	r0, [r7, #4]
 800e288:	f7ff fdbf 	bl	800de0a <get_fat>
 800e28c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	2b00      	cmp	r3, #0
 800e292:	d00e      	beq.n	800e2b2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	2b01      	cmp	r3, #1
 800e298:	d003      	beq.n	800e2a2 <create_chain+0xa6>
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2a0:	d101      	bne.n	800e2a6 <create_chain+0xaa>
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	e03e      	b.n	800e324 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800e2a6:	69fa      	ldr	r2, [r7, #28]
 800e2a8:	69bb      	ldr	r3, [r7, #24]
 800e2aa:	429a      	cmp	r2, r3
 800e2ac:	d1da      	bne.n	800e264 <create_chain+0x68>
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	e038      	b.n	800e324 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800e2b2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800e2b4:	f04f 32ff 	mov.w	r2, #4294967295
 800e2b8:	69f9      	ldr	r1, [r7, #28]
 800e2ba:	6938      	ldr	r0, [r7, #16]
 800e2bc:	f7ff fe4d 	bl	800df5a <put_fat>
 800e2c0:	4603      	mov	r3, r0
 800e2c2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e2c4:	7dfb      	ldrb	r3, [r7, #23]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d109      	bne.n	800e2de <create_chain+0xe2>
 800e2ca:	683b      	ldr	r3, [r7, #0]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d006      	beq.n	800e2de <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e2d0:	69fa      	ldr	r2, [r7, #28]
 800e2d2:	6839      	ldr	r1, [r7, #0]
 800e2d4:	6938      	ldr	r0, [r7, #16]
 800e2d6:	f7ff fe40 	bl	800df5a <put_fat>
 800e2da:	4603      	mov	r3, r0
 800e2dc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e2de:	7dfb      	ldrb	r3, [r7, #23]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d116      	bne.n	800e312 <create_chain+0x116>
		fs->last_clst = ncl;
 800e2e4:	693b      	ldr	r3, [r7, #16]
 800e2e6:	69fa      	ldr	r2, [r7, #28]
 800e2e8:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e2ea:	693b      	ldr	r3, [r7, #16]
 800e2ec:	695a      	ldr	r2, [r3, #20]
 800e2ee:	693b      	ldr	r3, [r7, #16]
 800e2f0:	699b      	ldr	r3, [r3, #24]
 800e2f2:	3b02      	subs	r3, #2
 800e2f4:	429a      	cmp	r2, r3
 800e2f6:	d804      	bhi.n	800e302 <create_chain+0x106>
 800e2f8:	693b      	ldr	r3, [r7, #16]
 800e2fa:	695b      	ldr	r3, [r3, #20]
 800e2fc:	1e5a      	subs	r2, r3, #1
 800e2fe:	693b      	ldr	r3, [r7, #16]
 800e300:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800e302:	693b      	ldr	r3, [r7, #16]
 800e304:	791b      	ldrb	r3, [r3, #4]
 800e306:	f043 0301 	orr.w	r3, r3, #1
 800e30a:	b2da      	uxtb	r2, r3
 800e30c:	693b      	ldr	r3, [r7, #16]
 800e30e:	711a      	strb	r2, [r3, #4]
 800e310:	e007      	b.n	800e322 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e312:	7dfb      	ldrb	r3, [r7, #23]
 800e314:	2b01      	cmp	r3, #1
 800e316:	d102      	bne.n	800e31e <create_chain+0x122>
 800e318:	f04f 33ff 	mov.w	r3, #4294967295
 800e31c:	e000      	b.n	800e320 <create_chain+0x124>
 800e31e:	2301      	movs	r3, #1
 800e320:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e322:	69fb      	ldr	r3, [r7, #28]
}
 800e324:	4618      	mov	r0, r3
 800e326:	3720      	adds	r7, #32
 800e328:	46bd      	mov	sp, r7
 800e32a:	bd80      	pop	{r7, pc}

0800e32c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e32c:	b480      	push	{r7}
 800e32e:	b087      	sub	sp, #28
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
 800e334:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e340:	3304      	adds	r3, #4
 800e342:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	0a5b      	lsrs	r3, r3, #9
 800e348:	68fa      	ldr	r2, [r7, #12]
 800e34a:	8952      	ldrh	r2, [r2, #10]
 800e34c:	fbb3 f3f2 	udiv	r3, r3, r2
 800e350:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e352:	693b      	ldr	r3, [r7, #16]
 800e354:	1d1a      	adds	r2, r3, #4
 800e356:	613a      	str	r2, [r7, #16]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e35c:	68bb      	ldr	r3, [r7, #8]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d101      	bne.n	800e366 <clmt_clust+0x3a>
 800e362:	2300      	movs	r3, #0
 800e364:	e010      	b.n	800e388 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800e366:	697a      	ldr	r2, [r7, #20]
 800e368:	68bb      	ldr	r3, [r7, #8]
 800e36a:	429a      	cmp	r2, r3
 800e36c:	d307      	bcc.n	800e37e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800e36e:	697a      	ldr	r2, [r7, #20]
 800e370:	68bb      	ldr	r3, [r7, #8]
 800e372:	1ad3      	subs	r3, r2, r3
 800e374:	617b      	str	r3, [r7, #20]
 800e376:	693b      	ldr	r3, [r7, #16]
 800e378:	3304      	adds	r3, #4
 800e37a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e37c:	e7e9      	b.n	800e352 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800e37e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e380:	693b      	ldr	r3, [r7, #16]
 800e382:	681a      	ldr	r2, [r3, #0]
 800e384:	697b      	ldr	r3, [r7, #20]
 800e386:	4413      	add	r3, r2
}
 800e388:	4618      	mov	r0, r3
 800e38a:	371c      	adds	r7, #28
 800e38c:	46bd      	mov	sp, r7
 800e38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e392:	4770      	bx	lr

0800e394 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b086      	sub	sp, #24
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
 800e39c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e3aa:	d204      	bcs.n	800e3b6 <dir_sdi+0x22>
 800e3ac:	683b      	ldr	r3, [r7, #0]
 800e3ae:	f003 031f 	and.w	r3, r3, #31
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d001      	beq.n	800e3ba <dir_sdi+0x26>
		return FR_INT_ERR;
 800e3b6:	2302      	movs	r3, #2
 800e3b8:	e063      	b.n	800e482 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	683a      	ldr	r2, [r7, #0]
 800e3be:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	689b      	ldr	r3, [r3, #8]
 800e3c4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e3c6:	697b      	ldr	r3, [r7, #20]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d106      	bne.n	800e3da <dir_sdi+0x46>
 800e3cc:	693b      	ldr	r3, [r7, #16]
 800e3ce:	781b      	ldrb	r3, [r3, #0]
 800e3d0:	2b02      	cmp	r3, #2
 800e3d2:	d902      	bls.n	800e3da <dir_sdi+0x46>
		clst = fs->dirbase;
 800e3d4:	693b      	ldr	r3, [r7, #16]
 800e3d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3d8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e3da:	697b      	ldr	r3, [r7, #20]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d10c      	bne.n	800e3fa <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e3e0:	683b      	ldr	r3, [r7, #0]
 800e3e2:	095b      	lsrs	r3, r3, #5
 800e3e4:	693a      	ldr	r2, [r7, #16]
 800e3e6:	8912      	ldrh	r2, [r2, #8]
 800e3e8:	4293      	cmp	r3, r2
 800e3ea:	d301      	bcc.n	800e3f0 <dir_sdi+0x5c>
 800e3ec:	2302      	movs	r3, #2
 800e3ee:	e048      	b.n	800e482 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800e3f0:	693b      	ldr	r3, [r7, #16]
 800e3f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	61da      	str	r2, [r3, #28]
 800e3f8:	e029      	b.n	800e44e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e3fa:	693b      	ldr	r3, [r7, #16]
 800e3fc:	895b      	ldrh	r3, [r3, #10]
 800e3fe:	025b      	lsls	r3, r3, #9
 800e400:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e402:	e019      	b.n	800e438 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	6979      	ldr	r1, [r7, #20]
 800e408:	4618      	mov	r0, r3
 800e40a:	f7ff fcfe 	bl	800de0a <get_fat>
 800e40e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e410:	697b      	ldr	r3, [r7, #20]
 800e412:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e416:	d101      	bne.n	800e41c <dir_sdi+0x88>
 800e418:	2301      	movs	r3, #1
 800e41a:	e032      	b.n	800e482 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e41c:	697b      	ldr	r3, [r7, #20]
 800e41e:	2b01      	cmp	r3, #1
 800e420:	d904      	bls.n	800e42c <dir_sdi+0x98>
 800e422:	693b      	ldr	r3, [r7, #16]
 800e424:	699b      	ldr	r3, [r3, #24]
 800e426:	697a      	ldr	r2, [r7, #20]
 800e428:	429a      	cmp	r2, r3
 800e42a:	d301      	bcc.n	800e430 <dir_sdi+0x9c>
 800e42c:	2302      	movs	r3, #2
 800e42e:	e028      	b.n	800e482 <dir_sdi+0xee>
			ofs -= csz;
 800e430:	683a      	ldr	r2, [r7, #0]
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	1ad3      	subs	r3, r2, r3
 800e436:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e438:	683a      	ldr	r2, [r7, #0]
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	429a      	cmp	r2, r3
 800e43e:	d2e1      	bcs.n	800e404 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800e440:	6979      	ldr	r1, [r7, #20]
 800e442:	6938      	ldr	r0, [r7, #16]
 800e444:	f7ff fcc2 	bl	800ddcc <clust2sect>
 800e448:	4602      	mov	r2, r0
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	697a      	ldr	r2, [r7, #20]
 800e452:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	69db      	ldr	r3, [r3, #28]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d101      	bne.n	800e460 <dir_sdi+0xcc>
 800e45c:	2302      	movs	r3, #2
 800e45e:	e010      	b.n	800e482 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	69da      	ldr	r2, [r3, #28]
 800e464:	683b      	ldr	r3, [r7, #0]
 800e466:	0a5b      	lsrs	r3, r3, #9
 800e468:	441a      	add	r2, r3
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e46e:	693b      	ldr	r3, [r7, #16]
 800e470:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e474:	683b      	ldr	r3, [r7, #0]
 800e476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e47a:	441a      	add	r2, r3
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e480:	2300      	movs	r3, #0
}
 800e482:	4618      	mov	r0, r3
 800e484:	3718      	adds	r7, #24
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}

0800e48a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e48a:	b580      	push	{r7, lr}
 800e48c:	b086      	sub	sp, #24
 800e48e:	af00      	add	r7, sp, #0
 800e490:	6078      	str	r0, [r7, #4]
 800e492:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	695b      	ldr	r3, [r3, #20]
 800e49e:	3320      	adds	r3, #32
 800e4a0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	69db      	ldr	r3, [r3, #28]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d003      	beq.n	800e4b2 <dir_next+0x28>
 800e4aa:	68bb      	ldr	r3, [r7, #8]
 800e4ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e4b0:	d301      	bcc.n	800e4b6 <dir_next+0x2c>
 800e4b2:	2304      	movs	r3, #4
 800e4b4:	e0aa      	b.n	800e60c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e4b6:	68bb      	ldr	r3, [r7, #8]
 800e4b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	f040 8098 	bne.w	800e5f2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	69db      	ldr	r3, [r3, #28]
 800e4c6:	1c5a      	adds	r2, r3, #1
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	699b      	ldr	r3, [r3, #24]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d10b      	bne.n	800e4ec <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e4d4:	68bb      	ldr	r3, [r7, #8]
 800e4d6:	095b      	lsrs	r3, r3, #5
 800e4d8:	68fa      	ldr	r2, [r7, #12]
 800e4da:	8912      	ldrh	r2, [r2, #8]
 800e4dc:	4293      	cmp	r3, r2
 800e4de:	f0c0 8088 	bcc.w	800e5f2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	61da      	str	r2, [r3, #28]
 800e4e8:	2304      	movs	r3, #4
 800e4ea:	e08f      	b.n	800e60c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e4ec:	68bb      	ldr	r3, [r7, #8]
 800e4ee:	0a5b      	lsrs	r3, r3, #9
 800e4f0:	68fa      	ldr	r2, [r7, #12]
 800e4f2:	8952      	ldrh	r2, [r2, #10]
 800e4f4:	3a01      	subs	r2, #1
 800e4f6:	4013      	ands	r3, r2
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d17a      	bne.n	800e5f2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e4fc:	687a      	ldr	r2, [r7, #4]
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	699b      	ldr	r3, [r3, #24]
 800e502:	4619      	mov	r1, r3
 800e504:	4610      	mov	r0, r2
 800e506:	f7ff fc80 	bl	800de0a <get_fat>
 800e50a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e50c:	697b      	ldr	r3, [r7, #20]
 800e50e:	2b01      	cmp	r3, #1
 800e510:	d801      	bhi.n	800e516 <dir_next+0x8c>
 800e512:	2302      	movs	r3, #2
 800e514:	e07a      	b.n	800e60c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e516:	697b      	ldr	r3, [r7, #20]
 800e518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e51c:	d101      	bne.n	800e522 <dir_next+0x98>
 800e51e:	2301      	movs	r3, #1
 800e520:	e074      	b.n	800e60c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	699b      	ldr	r3, [r3, #24]
 800e526:	697a      	ldr	r2, [r7, #20]
 800e528:	429a      	cmp	r2, r3
 800e52a:	d358      	bcc.n	800e5de <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e52c:	683b      	ldr	r3, [r7, #0]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d104      	bne.n	800e53c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	2200      	movs	r2, #0
 800e536:	61da      	str	r2, [r3, #28]
 800e538:	2304      	movs	r3, #4
 800e53a:	e067      	b.n	800e60c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e53c:	687a      	ldr	r2, [r7, #4]
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	699b      	ldr	r3, [r3, #24]
 800e542:	4619      	mov	r1, r3
 800e544:	4610      	mov	r0, r2
 800e546:	f7ff fe59 	bl	800e1fc <create_chain>
 800e54a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e54c:	697b      	ldr	r3, [r7, #20]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d101      	bne.n	800e556 <dir_next+0xcc>
 800e552:	2307      	movs	r3, #7
 800e554:	e05a      	b.n	800e60c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e556:	697b      	ldr	r3, [r7, #20]
 800e558:	2b01      	cmp	r3, #1
 800e55a:	d101      	bne.n	800e560 <dir_next+0xd6>
 800e55c:	2302      	movs	r3, #2
 800e55e:	e055      	b.n	800e60c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e560:	697b      	ldr	r3, [r7, #20]
 800e562:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e566:	d101      	bne.n	800e56c <dir_next+0xe2>
 800e568:	2301      	movs	r3, #1
 800e56a:	e04f      	b.n	800e60c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e56c:	68f8      	ldr	r0, [r7, #12]
 800e56e:	f7ff fb4d 	bl	800dc0c <sync_window>
 800e572:	4603      	mov	r3, r0
 800e574:	2b00      	cmp	r3, #0
 800e576:	d001      	beq.n	800e57c <dir_next+0xf2>
 800e578:	2301      	movs	r3, #1
 800e57a:	e047      	b.n	800e60c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	3334      	adds	r3, #52	; 0x34
 800e580:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e584:	2100      	movs	r1, #0
 800e586:	4618      	mov	r0, r3
 800e588:	f7ff f945 	bl	800d816 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e58c:	2300      	movs	r3, #0
 800e58e:	613b      	str	r3, [r7, #16]
 800e590:	6979      	ldr	r1, [r7, #20]
 800e592:	68f8      	ldr	r0, [r7, #12]
 800e594:	f7ff fc1a 	bl	800ddcc <clust2sect>
 800e598:	4602      	mov	r2, r0
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	631a      	str	r2, [r3, #48]	; 0x30
 800e59e:	e012      	b.n	800e5c6 <dir_next+0x13c>
						fs->wflag = 1;
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	2201      	movs	r2, #1
 800e5a4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e5a6:	68f8      	ldr	r0, [r7, #12]
 800e5a8:	f7ff fb30 	bl	800dc0c <sync_window>
 800e5ac:	4603      	mov	r3, r0
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d001      	beq.n	800e5b6 <dir_next+0x12c>
 800e5b2:	2301      	movs	r3, #1
 800e5b4:	e02a      	b.n	800e60c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e5b6:	693b      	ldr	r3, [r7, #16]
 800e5b8:	3301      	adds	r3, #1
 800e5ba:	613b      	str	r3, [r7, #16]
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5c0:	1c5a      	adds	r2, r3, #1
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	631a      	str	r2, [r3, #48]	; 0x30
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	895b      	ldrh	r3, [r3, #10]
 800e5ca:	461a      	mov	r2, r3
 800e5cc:	693b      	ldr	r3, [r7, #16]
 800e5ce:	4293      	cmp	r3, r2
 800e5d0:	d3e6      	bcc.n	800e5a0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e5d6:	693b      	ldr	r3, [r7, #16]
 800e5d8:	1ad2      	subs	r2, r2, r3
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	697a      	ldr	r2, [r7, #20]
 800e5e2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e5e4:	6979      	ldr	r1, [r7, #20]
 800e5e6:	68f8      	ldr	r0, [r7, #12]
 800e5e8:	f7ff fbf0 	bl	800ddcc <clust2sect>
 800e5ec:	4602      	mov	r2, r0
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	68ba      	ldr	r2, [r7, #8]
 800e5f6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e5fe:	68bb      	ldr	r3, [r7, #8]
 800e600:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e604:	441a      	add	r2, r3
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e60a:	2300      	movs	r3, #0
}
 800e60c:	4618      	mov	r0, r3
 800e60e:	3718      	adds	r7, #24
 800e610:	46bd      	mov	sp, r7
 800e612:	bd80      	pop	{r7, pc}

0800e614 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b086      	sub	sp, #24
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
 800e61c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e624:	2100      	movs	r1, #0
 800e626:	6878      	ldr	r0, [r7, #4]
 800e628:	f7ff feb4 	bl	800e394 <dir_sdi>
 800e62c:	4603      	mov	r3, r0
 800e62e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e630:	7dfb      	ldrb	r3, [r7, #23]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d12b      	bne.n	800e68e <dir_alloc+0x7a>
		n = 0;
 800e636:	2300      	movs	r3, #0
 800e638:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	69db      	ldr	r3, [r3, #28]
 800e63e:	4619      	mov	r1, r3
 800e640:	68f8      	ldr	r0, [r7, #12]
 800e642:	f7ff fb27 	bl	800dc94 <move_window>
 800e646:	4603      	mov	r3, r0
 800e648:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e64a:	7dfb      	ldrb	r3, [r7, #23]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d11d      	bne.n	800e68c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	6a1b      	ldr	r3, [r3, #32]
 800e654:	781b      	ldrb	r3, [r3, #0]
 800e656:	2be5      	cmp	r3, #229	; 0xe5
 800e658:	d004      	beq.n	800e664 <dir_alloc+0x50>
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	6a1b      	ldr	r3, [r3, #32]
 800e65e:	781b      	ldrb	r3, [r3, #0]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d107      	bne.n	800e674 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e664:	693b      	ldr	r3, [r7, #16]
 800e666:	3301      	adds	r3, #1
 800e668:	613b      	str	r3, [r7, #16]
 800e66a:	693a      	ldr	r2, [r7, #16]
 800e66c:	683b      	ldr	r3, [r7, #0]
 800e66e:	429a      	cmp	r2, r3
 800e670:	d102      	bne.n	800e678 <dir_alloc+0x64>
 800e672:	e00c      	b.n	800e68e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e674:	2300      	movs	r3, #0
 800e676:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e678:	2101      	movs	r1, #1
 800e67a:	6878      	ldr	r0, [r7, #4]
 800e67c:	f7ff ff05 	bl	800e48a <dir_next>
 800e680:	4603      	mov	r3, r0
 800e682:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e684:	7dfb      	ldrb	r3, [r7, #23]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d0d7      	beq.n	800e63a <dir_alloc+0x26>
 800e68a:	e000      	b.n	800e68e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e68c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e68e:	7dfb      	ldrb	r3, [r7, #23]
 800e690:	2b04      	cmp	r3, #4
 800e692:	d101      	bne.n	800e698 <dir_alloc+0x84>
 800e694:	2307      	movs	r3, #7
 800e696:	75fb      	strb	r3, [r7, #23]
	return res;
 800e698:	7dfb      	ldrb	r3, [r7, #23]
}
 800e69a:	4618      	mov	r0, r3
 800e69c:	3718      	adds	r7, #24
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	bd80      	pop	{r7, pc}

0800e6a2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e6a2:	b580      	push	{r7, lr}
 800e6a4:	b084      	sub	sp, #16
 800e6a6:	af00      	add	r7, sp, #0
 800e6a8:	6078      	str	r0, [r7, #4]
 800e6aa:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e6ac:	683b      	ldr	r3, [r7, #0]
 800e6ae:	331a      	adds	r3, #26
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	f7ff f80d 	bl	800d6d0 <ld_word>
 800e6b6:	4603      	mov	r3, r0
 800e6b8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	781b      	ldrb	r3, [r3, #0]
 800e6be:	2b03      	cmp	r3, #3
 800e6c0:	d109      	bne.n	800e6d6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e6c2:	683b      	ldr	r3, [r7, #0]
 800e6c4:	3314      	adds	r3, #20
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	f7ff f802 	bl	800d6d0 <ld_word>
 800e6cc:	4603      	mov	r3, r0
 800e6ce:	041b      	lsls	r3, r3, #16
 800e6d0:	68fa      	ldr	r2, [r7, #12]
 800e6d2:	4313      	orrs	r3, r2
 800e6d4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e6d6:	68fb      	ldr	r3, [r7, #12]
}
 800e6d8:	4618      	mov	r0, r3
 800e6da:	3710      	adds	r7, #16
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	bd80      	pop	{r7, pc}

0800e6e0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b084      	sub	sp, #16
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	60f8      	str	r0, [r7, #12]
 800e6e8:	60b9      	str	r1, [r7, #8]
 800e6ea:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e6ec:	68bb      	ldr	r3, [r7, #8]
 800e6ee:	331a      	adds	r3, #26
 800e6f0:	687a      	ldr	r2, [r7, #4]
 800e6f2:	b292      	uxth	r2, r2
 800e6f4:	4611      	mov	r1, r2
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	f7ff f825 	bl	800d746 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	781b      	ldrb	r3, [r3, #0]
 800e700:	2b03      	cmp	r3, #3
 800e702:	d109      	bne.n	800e718 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e704:	68bb      	ldr	r3, [r7, #8]
 800e706:	f103 0214 	add.w	r2, r3, #20
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	0c1b      	lsrs	r3, r3, #16
 800e70e:	b29b      	uxth	r3, r3
 800e710:	4619      	mov	r1, r3
 800e712:	4610      	mov	r0, r2
 800e714:	f7ff f817 	bl	800d746 <st_word>
	}
}
 800e718:	bf00      	nop
 800e71a:	3710      	adds	r7, #16
 800e71c:	46bd      	mov	sp, r7
 800e71e:	bd80      	pop	{r7, pc}

0800e720 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b086      	sub	sp, #24
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
 800e728:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800e72a:	2304      	movs	r3, #4
 800e72c:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800e734:	e03c      	b.n	800e7b0 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	69db      	ldr	r3, [r3, #28]
 800e73a:	4619      	mov	r1, r3
 800e73c:	6938      	ldr	r0, [r7, #16]
 800e73e:	f7ff faa9 	bl	800dc94 <move_window>
 800e742:	4603      	mov	r3, r0
 800e744:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e746:	7dfb      	ldrb	r3, [r7, #23]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d136      	bne.n	800e7ba <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	6a1b      	ldr	r3, [r3, #32]
 800e750:	781b      	ldrb	r3, [r3, #0]
 800e752:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800e754:	7bfb      	ldrb	r3, [r7, #15]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d102      	bne.n	800e760 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800e75a:	2304      	movs	r3, #4
 800e75c:	75fb      	strb	r3, [r7, #23]
 800e75e:	e031      	b.n	800e7c4 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	6a1b      	ldr	r3, [r3, #32]
 800e764:	330b      	adds	r3, #11
 800e766:	781b      	ldrb	r3, [r3, #0]
 800e768:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e76c:	73bb      	strb	r3, [r7, #14]
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	7bba      	ldrb	r2, [r7, #14]
 800e772:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800e774:	7bfb      	ldrb	r3, [r7, #15]
 800e776:	2be5      	cmp	r3, #229	; 0xe5
 800e778:	d011      	beq.n	800e79e <dir_read+0x7e>
 800e77a:	7bfb      	ldrb	r3, [r7, #15]
 800e77c:	2b2e      	cmp	r3, #46	; 0x2e
 800e77e:	d00e      	beq.n	800e79e <dir_read+0x7e>
 800e780:	7bbb      	ldrb	r3, [r7, #14]
 800e782:	2b0f      	cmp	r3, #15
 800e784:	d00b      	beq.n	800e79e <dir_read+0x7e>
 800e786:	7bbb      	ldrb	r3, [r7, #14]
 800e788:	f023 0320 	bic.w	r3, r3, #32
 800e78c:	2b08      	cmp	r3, #8
 800e78e:	bf0c      	ite	eq
 800e790:	2301      	moveq	r3, #1
 800e792:	2300      	movne	r3, #0
 800e794:	b2db      	uxtb	r3, r3
 800e796:	461a      	mov	r2, r3
 800e798:	683b      	ldr	r3, [r7, #0]
 800e79a:	4293      	cmp	r3, r2
 800e79c:	d00f      	beq.n	800e7be <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800e79e:	2100      	movs	r1, #0
 800e7a0:	6878      	ldr	r0, [r7, #4]
 800e7a2:	f7ff fe72 	bl	800e48a <dir_next>
 800e7a6:	4603      	mov	r3, r0
 800e7a8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e7aa:	7dfb      	ldrb	r3, [r7, #23]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d108      	bne.n	800e7c2 <dir_read+0xa2>
	while (dp->sect) {
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	69db      	ldr	r3, [r3, #28]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d1be      	bne.n	800e736 <dir_read+0x16>
 800e7b8:	e004      	b.n	800e7c4 <dir_read+0xa4>
		if (res != FR_OK) break;
 800e7ba:	bf00      	nop
 800e7bc:	e002      	b.n	800e7c4 <dir_read+0xa4>
				break;
 800e7be:	bf00      	nop
 800e7c0:	e000      	b.n	800e7c4 <dir_read+0xa4>
		if (res != FR_OK) break;
 800e7c2:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800e7c4:	7dfb      	ldrb	r3, [r7, #23]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d002      	beq.n	800e7d0 <dir_read+0xb0>
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	61da      	str	r2, [r3, #28]
	return res;
 800e7d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	3718      	adds	r7, #24
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	bd80      	pop	{r7, pc}

0800e7da <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e7da:	b580      	push	{r7, lr}
 800e7dc:	b086      	sub	sp, #24
 800e7de:	af00      	add	r7, sp, #0
 800e7e0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e7e8:	2100      	movs	r1, #0
 800e7ea:	6878      	ldr	r0, [r7, #4]
 800e7ec:	f7ff fdd2 	bl	800e394 <dir_sdi>
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e7f4:	7dfb      	ldrb	r3, [r7, #23]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d001      	beq.n	800e7fe <dir_find+0x24>
 800e7fa:	7dfb      	ldrb	r3, [r7, #23]
 800e7fc:	e03e      	b.n	800e87c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	69db      	ldr	r3, [r3, #28]
 800e802:	4619      	mov	r1, r3
 800e804:	6938      	ldr	r0, [r7, #16]
 800e806:	f7ff fa45 	bl	800dc94 <move_window>
 800e80a:	4603      	mov	r3, r0
 800e80c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e80e:	7dfb      	ldrb	r3, [r7, #23]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d12f      	bne.n	800e874 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	6a1b      	ldr	r3, [r3, #32]
 800e818:	781b      	ldrb	r3, [r3, #0]
 800e81a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e81c:	7bfb      	ldrb	r3, [r7, #15]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d102      	bne.n	800e828 <dir_find+0x4e>
 800e822:	2304      	movs	r3, #4
 800e824:	75fb      	strb	r3, [r7, #23]
 800e826:	e028      	b.n	800e87a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	6a1b      	ldr	r3, [r3, #32]
 800e82c:	330b      	adds	r3, #11
 800e82e:	781b      	ldrb	r3, [r3, #0]
 800e830:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e834:	b2da      	uxtb	r2, r3
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	6a1b      	ldr	r3, [r3, #32]
 800e83e:	330b      	adds	r3, #11
 800e840:	781b      	ldrb	r3, [r3, #0]
 800e842:	f003 0308 	and.w	r3, r3, #8
 800e846:	2b00      	cmp	r3, #0
 800e848:	d10a      	bne.n	800e860 <dir_find+0x86>
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	6a18      	ldr	r0, [r3, #32]
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	3324      	adds	r3, #36	; 0x24
 800e852:	220b      	movs	r2, #11
 800e854:	4619      	mov	r1, r3
 800e856:	f7fe fff9 	bl	800d84c <mem_cmp>
 800e85a:	4603      	mov	r3, r0
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d00b      	beq.n	800e878 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e860:	2100      	movs	r1, #0
 800e862:	6878      	ldr	r0, [r7, #4]
 800e864:	f7ff fe11 	bl	800e48a <dir_next>
 800e868:	4603      	mov	r3, r0
 800e86a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e86c:	7dfb      	ldrb	r3, [r7, #23]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d0c5      	beq.n	800e7fe <dir_find+0x24>
 800e872:	e002      	b.n	800e87a <dir_find+0xa0>
		if (res != FR_OK) break;
 800e874:	bf00      	nop
 800e876:	e000      	b.n	800e87a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e878:	bf00      	nop

	return res;
 800e87a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e87c:	4618      	mov	r0, r3
 800e87e:	3718      	adds	r7, #24
 800e880:	46bd      	mov	sp, r7
 800e882:	bd80      	pop	{r7, pc}

0800e884 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b084      	sub	sp, #16
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800e892:	2101      	movs	r1, #1
 800e894:	6878      	ldr	r0, [r7, #4]
 800e896:	f7ff febd 	bl	800e614 <dir_alloc>
 800e89a:	4603      	mov	r3, r0
 800e89c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e89e:	7bfb      	ldrb	r3, [r7, #15]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d11c      	bne.n	800e8de <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	69db      	ldr	r3, [r3, #28]
 800e8a8:	4619      	mov	r1, r3
 800e8aa:	68b8      	ldr	r0, [r7, #8]
 800e8ac:	f7ff f9f2 	bl	800dc94 <move_window>
 800e8b0:	4603      	mov	r3, r0
 800e8b2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e8b4:	7bfb      	ldrb	r3, [r7, #15]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d111      	bne.n	800e8de <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	6a1b      	ldr	r3, [r3, #32]
 800e8be:	2220      	movs	r2, #32
 800e8c0:	2100      	movs	r1, #0
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	f7fe ffa7 	bl	800d816 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	6a18      	ldr	r0, [r3, #32]
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	3324      	adds	r3, #36	; 0x24
 800e8d0:	220b      	movs	r2, #11
 800e8d2:	4619      	mov	r1, r3
 800e8d4:	f7fe ff7e 	bl	800d7d4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800e8d8:	68bb      	ldr	r3, [r7, #8]
 800e8da:	2201      	movs	r2, #1
 800e8dc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e8de:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	3710      	adds	r7, #16
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	bd80      	pop	{r7, pc}

0800e8e8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b086      	sub	sp, #24
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
 800e8f0:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800e8f2:	683b      	ldr	r3, [r7, #0]
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	69db      	ldr	r3, [r3, #28]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d04e      	beq.n	800e99e <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800e900:	2300      	movs	r3, #0
 800e902:	613b      	str	r3, [r7, #16]
 800e904:	693b      	ldr	r3, [r7, #16]
 800e906:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800e908:	e021      	b.n	800e94e <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	6a1a      	ldr	r2, [r3, #32]
 800e90e:	697b      	ldr	r3, [r7, #20]
 800e910:	1c59      	adds	r1, r3, #1
 800e912:	6179      	str	r1, [r7, #20]
 800e914:	4413      	add	r3, r2
 800e916:	781b      	ldrb	r3, [r3, #0]
 800e918:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800e91a:	7bfb      	ldrb	r3, [r7, #15]
 800e91c:	2b20      	cmp	r3, #32
 800e91e:	d100      	bne.n	800e922 <get_fileinfo+0x3a>
 800e920:	e015      	b.n	800e94e <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800e922:	7bfb      	ldrb	r3, [r7, #15]
 800e924:	2b05      	cmp	r3, #5
 800e926:	d101      	bne.n	800e92c <get_fileinfo+0x44>
 800e928:	23e5      	movs	r3, #229	; 0xe5
 800e92a:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800e92c:	697b      	ldr	r3, [r7, #20]
 800e92e:	2b09      	cmp	r3, #9
 800e930:	d106      	bne.n	800e940 <get_fileinfo+0x58>
 800e932:	693b      	ldr	r3, [r7, #16]
 800e934:	1c5a      	adds	r2, r3, #1
 800e936:	613a      	str	r2, [r7, #16]
 800e938:	683a      	ldr	r2, [r7, #0]
 800e93a:	4413      	add	r3, r2
 800e93c:	222e      	movs	r2, #46	; 0x2e
 800e93e:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800e940:	693b      	ldr	r3, [r7, #16]
 800e942:	1c5a      	adds	r2, r3, #1
 800e944:	613a      	str	r2, [r7, #16]
 800e946:	683a      	ldr	r2, [r7, #0]
 800e948:	4413      	add	r3, r2
 800e94a:	7bfa      	ldrb	r2, [r7, #15]
 800e94c:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800e94e:	697b      	ldr	r3, [r7, #20]
 800e950:	2b0a      	cmp	r3, #10
 800e952:	d9da      	bls.n	800e90a <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800e954:	683a      	ldr	r2, [r7, #0]
 800e956:	693b      	ldr	r3, [r7, #16]
 800e958:	4413      	add	r3, r2
 800e95a:	3309      	adds	r3, #9
 800e95c:	2200      	movs	r2, #0
 800e95e:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	6a1b      	ldr	r3, [r3, #32]
 800e964:	7ada      	ldrb	r2, [r3, #11]
 800e966:	683b      	ldr	r3, [r7, #0]
 800e968:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	6a1b      	ldr	r3, [r3, #32]
 800e96e:	331c      	adds	r3, #28
 800e970:	4618      	mov	r0, r3
 800e972:	f7fe fec5 	bl	800d700 <ld_dword>
 800e976:	4602      	mov	r2, r0
 800e978:	683b      	ldr	r3, [r7, #0]
 800e97a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	6a1b      	ldr	r3, [r3, #32]
 800e980:	3316      	adds	r3, #22
 800e982:	4618      	mov	r0, r3
 800e984:	f7fe febc 	bl	800d700 <ld_dword>
 800e988:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800e98a:	68bb      	ldr	r3, [r7, #8]
 800e98c:	b29a      	uxth	r2, r3
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	80da      	strh	r2, [r3, #6]
 800e992:	68bb      	ldr	r3, [r7, #8]
 800e994:	0c1b      	lsrs	r3, r3, #16
 800e996:	b29a      	uxth	r2, r3
 800e998:	683b      	ldr	r3, [r7, #0]
 800e99a:	809a      	strh	r2, [r3, #4]
 800e99c:	e000      	b.n	800e9a0 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e99e:	bf00      	nop
}
 800e9a0:	3718      	adds	r7, #24
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	bd80      	pop	{r7, pc}
	...

0800e9a8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b088      	sub	sp, #32
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
 800e9b0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800e9b2:	683b      	ldr	r3, [r7, #0]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	60fb      	str	r3, [r7, #12]
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	3324      	adds	r3, #36	; 0x24
 800e9bc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800e9be:	220b      	movs	r2, #11
 800e9c0:	2120      	movs	r1, #32
 800e9c2:	68b8      	ldr	r0, [r7, #8]
 800e9c4:	f7fe ff27 	bl	800d816 <mem_set>
	si = i = 0; ni = 8;
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	613b      	str	r3, [r7, #16]
 800e9cc:	693b      	ldr	r3, [r7, #16]
 800e9ce:	61fb      	str	r3, [r7, #28]
 800e9d0:	2308      	movs	r3, #8
 800e9d2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800e9d4:	69fb      	ldr	r3, [r7, #28]
 800e9d6:	1c5a      	adds	r2, r3, #1
 800e9d8:	61fa      	str	r2, [r7, #28]
 800e9da:	68fa      	ldr	r2, [r7, #12]
 800e9dc:	4413      	add	r3, r2
 800e9de:	781b      	ldrb	r3, [r3, #0]
 800e9e0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e9e2:	7efb      	ldrb	r3, [r7, #27]
 800e9e4:	2b20      	cmp	r3, #32
 800e9e6:	d94e      	bls.n	800ea86 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800e9e8:	7efb      	ldrb	r3, [r7, #27]
 800e9ea:	2b2f      	cmp	r3, #47	; 0x2f
 800e9ec:	d006      	beq.n	800e9fc <create_name+0x54>
 800e9ee:	7efb      	ldrb	r3, [r7, #27]
 800e9f0:	2b5c      	cmp	r3, #92	; 0x5c
 800e9f2:	d110      	bne.n	800ea16 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e9f4:	e002      	b.n	800e9fc <create_name+0x54>
 800e9f6:	69fb      	ldr	r3, [r7, #28]
 800e9f8:	3301      	adds	r3, #1
 800e9fa:	61fb      	str	r3, [r7, #28]
 800e9fc:	68fa      	ldr	r2, [r7, #12]
 800e9fe:	69fb      	ldr	r3, [r7, #28]
 800ea00:	4413      	add	r3, r2
 800ea02:	781b      	ldrb	r3, [r3, #0]
 800ea04:	2b2f      	cmp	r3, #47	; 0x2f
 800ea06:	d0f6      	beq.n	800e9f6 <create_name+0x4e>
 800ea08:	68fa      	ldr	r2, [r7, #12]
 800ea0a:	69fb      	ldr	r3, [r7, #28]
 800ea0c:	4413      	add	r3, r2
 800ea0e:	781b      	ldrb	r3, [r3, #0]
 800ea10:	2b5c      	cmp	r3, #92	; 0x5c
 800ea12:	d0f0      	beq.n	800e9f6 <create_name+0x4e>
			break;
 800ea14:	e038      	b.n	800ea88 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800ea16:	7efb      	ldrb	r3, [r7, #27]
 800ea18:	2b2e      	cmp	r3, #46	; 0x2e
 800ea1a:	d003      	beq.n	800ea24 <create_name+0x7c>
 800ea1c:	693a      	ldr	r2, [r7, #16]
 800ea1e:	697b      	ldr	r3, [r7, #20]
 800ea20:	429a      	cmp	r2, r3
 800ea22:	d30c      	bcc.n	800ea3e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800ea24:	697b      	ldr	r3, [r7, #20]
 800ea26:	2b0b      	cmp	r3, #11
 800ea28:	d002      	beq.n	800ea30 <create_name+0x88>
 800ea2a:	7efb      	ldrb	r3, [r7, #27]
 800ea2c:	2b2e      	cmp	r3, #46	; 0x2e
 800ea2e:	d001      	beq.n	800ea34 <create_name+0x8c>
 800ea30:	2306      	movs	r3, #6
 800ea32:	e044      	b.n	800eabe <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800ea34:	2308      	movs	r3, #8
 800ea36:	613b      	str	r3, [r7, #16]
 800ea38:	230b      	movs	r3, #11
 800ea3a:	617b      	str	r3, [r7, #20]
			continue;
 800ea3c:	e022      	b.n	800ea84 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800ea3e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	da04      	bge.n	800ea50 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800ea46:	7efb      	ldrb	r3, [r7, #27]
 800ea48:	3b80      	subs	r3, #128	; 0x80
 800ea4a:	4a1f      	ldr	r2, [pc, #124]	; (800eac8 <create_name+0x120>)
 800ea4c:	5cd3      	ldrb	r3, [r2, r3]
 800ea4e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800ea50:	7efb      	ldrb	r3, [r7, #27]
 800ea52:	4619      	mov	r1, r3
 800ea54:	481d      	ldr	r0, [pc, #116]	; (800eacc <create_name+0x124>)
 800ea56:	f7fe ff20 	bl	800d89a <chk_chr>
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d001      	beq.n	800ea64 <create_name+0xbc>
 800ea60:	2306      	movs	r3, #6
 800ea62:	e02c      	b.n	800eabe <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800ea64:	7efb      	ldrb	r3, [r7, #27]
 800ea66:	2b60      	cmp	r3, #96	; 0x60
 800ea68:	d905      	bls.n	800ea76 <create_name+0xce>
 800ea6a:	7efb      	ldrb	r3, [r7, #27]
 800ea6c:	2b7a      	cmp	r3, #122	; 0x7a
 800ea6e:	d802      	bhi.n	800ea76 <create_name+0xce>
 800ea70:	7efb      	ldrb	r3, [r7, #27]
 800ea72:	3b20      	subs	r3, #32
 800ea74:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800ea76:	693b      	ldr	r3, [r7, #16]
 800ea78:	1c5a      	adds	r2, r3, #1
 800ea7a:	613a      	str	r2, [r7, #16]
 800ea7c:	68ba      	ldr	r2, [r7, #8]
 800ea7e:	4413      	add	r3, r2
 800ea80:	7efa      	ldrb	r2, [r7, #27]
 800ea82:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800ea84:	e7a6      	b.n	800e9d4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ea86:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800ea88:	68fa      	ldr	r2, [r7, #12]
 800ea8a:	69fb      	ldr	r3, [r7, #28]
 800ea8c:	441a      	add	r2, r3
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800ea92:	693b      	ldr	r3, [r7, #16]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d101      	bne.n	800ea9c <create_name+0xf4>
 800ea98:	2306      	movs	r3, #6
 800ea9a:	e010      	b.n	800eabe <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ea9c:	68bb      	ldr	r3, [r7, #8]
 800ea9e:	781b      	ldrb	r3, [r3, #0]
 800eaa0:	2be5      	cmp	r3, #229	; 0xe5
 800eaa2:	d102      	bne.n	800eaaa <create_name+0x102>
 800eaa4:	68bb      	ldr	r3, [r7, #8]
 800eaa6:	2205      	movs	r2, #5
 800eaa8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800eaaa:	7efb      	ldrb	r3, [r7, #27]
 800eaac:	2b20      	cmp	r3, #32
 800eaae:	d801      	bhi.n	800eab4 <create_name+0x10c>
 800eab0:	2204      	movs	r2, #4
 800eab2:	e000      	b.n	800eab6 <create_name+0x10e>
 800eab4:	2200      	movs	r2, #0
 800eab6:	68bb      	ldr	r3, [r7, #8]
 800eab8:	330b      	adds	r3, #11
 800eaba:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800eabc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800eabe:	4618      	mov	r0, r3
 800eac0:	3720      	adds	r7, #32
 800eac2:	46bd      	mov	sp, r7
 800eac4:	bd80      	pop	{r7, pc}
 800eac6:	bf00      	nop
 800eac8:	080180b8 	.word	0x080180b8
 800eacc:	0801805c 	.word	0x0801805c

0800ead0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b086      	sub	sp, #24
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
 800ead8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800eade:	693b      	ldr	r3, [r7, #16]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800eae4:	e002      	b.n	800eaec <follow_path+0x1c>
 800eae6:	683b      	ldr	r3, [r7, #0]
 800eae8:	3301      	adds	r3, #1
 800eaea:	603b      	str	r3, [r7, #0]
 800eaec:	683b      	ldr	r3, [r7, #0]
 800eaee:	781b      	ldrb	r3, [r3, #0]
 800eaf0:	2b2f      	cmp	r3, #47	; 0x2f
 800eaf2:	d0f8      	beq.n	800eae6 <follow_path+0x16>
 800eaf4:	683b      	ldr	r3, [r7, #0]
 800eaf6:	781b      	ldrb	r3, [r3, #0]
 800eaf8:	2b5c      	cmp	r3, #92	; 0x5c
 800eafa:	d0f4      	beq.n	800eae6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800eafc:	693b      	ldr	r3, [r7, #16]
 800eafe:	2200      	movs	r2, #0
 800eb00:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800eb02:	683b      	ldr	r3, [r7, #0]
 800eb04:	781b      	ldrb	r3, [r3, #0]
 800eb06:	2b1f      	cmp	r3, #31
 800eb08:	d80a      	bhi.n	800eb20 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	2280      	movs	r2, #128	; 0x80
 800eb0e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800eb12:	2100      	movs	r1, #0
 800eb14:	6878      	ldr	r0, [r7, #4]
 800eb16:	f7ff fc3d 	bl	800e394 <dir_sdi>
 800eb1a:	4603      	mov	r3, r0
 800eb1c:	75fb      	strb	r3, [r7, #23]
 800eb1e:	e043      	b.n	800eba8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800eb20:	463b      	mov	r3, r7
 800eb22:	4619      	mov	r1, r3
 800eb24:	6878      	ldr	r0, [r7, #4]
 800eb26:	f7ff ff3f 	bl	800e9a8 <create_name>
 800eb2a:	4603      	mov	r3, r0
 800eb2c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800eb2e:	7dfb      	ldrb	r3, [r7, #23]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d134      	bne.n	800eb9e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800eb34:	6878      	ldr	r0, [r7, #4]
 800eb36:	f7ff fe50 	bl	800e7da <dir_find>
 800eb3a:	4603      	mov	r3, r0
 800eb3c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800eb44:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800eb46:	7dfb      	ldrb	r3, [r7, #23]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d00a      	beq.n	800eb62 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800eb4c:	7dfb      	ldrb	r3, [r7, #23]
 800eb4e:	2b04      	cmp	r3, #4
 800eb50:	d127      	bne.n	800eba2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800eb52:	7afb      	ldrb	r3, [r7, #11]
 800eb54:	f003 0304 	and.w	r3, r3, #4
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d122      	bne.n	800eba2 <follow_path+0xd2>
 800eb5c:	2305      	movs	r3, #5
 800eb5e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800eb60:	e01f      	b.n	800eba2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800eb62:	7afb      	ldrb	r3, [r7, #11]
 800eb64:	f003 0304 	and.w	r3, r3, #4
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d11c      	bne.n	800eba6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800eb6c:	693b      	ldr	r3, [r7, #16]
 800eb6e:	799b      	ldrb	r3, [r3, #6]
 800eb70:	f003 0310 	and.w	r3, r3, #16
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d102      	bne.n	800eb7e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800eb78:	2305      	movs	r3, #5
 800eb7a:	75fb      	strb	r3, [r7, #23]
 800eb7c:	e014      	b.n	800eba8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	695b      	ldr	r3, [r3, #20]
 800eb88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb8c:	4413      	add	r3, r2
 800eb8e:	4619      	mov	r1, r3
 800eb90:	68f8      	ldr	r0, [r7, #12]
 800eb92:	f7ff fd86 	bl	800e6a2 <ld_clust>
 800eb96:	4602      	mov	r2, r0
 800eb98:	693b      	ldr	r3, [r7, #16]
 800eb9a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800eb9c:	e7c0      	b.n	800eb20 <follow_path+0x50>
			if (res != FR_OK) break;
 800eb9e:	bf00      	nop
 800eba0:	e002      	b.n	800eba8 <follow_path+0xd8>
				break;
 800eba2:	bf00      	nop
 800eba4:	e000      	b.n	800eba8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800eba6:	bf00      	nop
			}
		}
	}

	return res;
 800eba8:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebaa:	4618      	mov	r0, r3
 800ebac:	3718      	adds	r7, #24
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	bd80      	pop	{r7, pc}

0800ebb2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ebb2:	b480      	push	{r7}
 800ebb4:	b087      	sub	sp, #28
 800ebb6:	af00      	add	r7, sp, #0
 800ebb8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ebba:	f04f 33ff 	mov.w	r3, #4294967295
 800ebbe:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d031      	beq.n	800ec2c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	617b      	str	r3, [r7, #20]
 800ebce:	e002      	b.n	800ebd6 <get_ldnumber+0x24>
 800ebd0:	697b      	ldr	r3, [r7, #20]
 800ebd2:	3301      	adds	r3, #1
 800ebd4:	617b      	str	r3, [r7, #20]
 800ebd6:	697b      	ldr	r3, [r7, #20]
 800ebd8:	781b      	ldrb	r3, [r3, #0]
 800ebda:	2b20      	cmp	r3, #32
 800ebdc:	d903      	bls.n	800ebe6 <get_ldnumber+0x34>
 800ebde:	697b      	ldr	r3, [r7, #20]
 800ebe0:	781b      	ldrb	r3, [r3, #0]
 800ebe2:	2b3a      	cmp	r3, #58	; 0x3a
 800ebe4:	d1f4      	bne.n	800ebd0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ebe6:	697b      	ldr	r3, [r7, #20]
 800ebe8:	781b      	ldrb	r3, [r3, #0]
 800ebea:	2b3a      	cmp	r3, #58	; 0x3a
 800ebec:	d11c      	bne.n	800ec28 <get_ldnumber+0x76>
			tp = *path;
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	1c5a      	adds	r2, r3, #1
 800ebf8:	60fa      	str	r2, [r7, #12]
 800ebfa:	781b      	ldrb	r3, [r3, #0]
 800ebfc:	3b30      	subs	r3, #48	; 0x30
 800ebfe:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ec00:	68bb      	ldr	r3, [r7, #8]
 800ec02:	2b09      	cmp	r3, #9
 800ec04:	d80e      	bhi.n	800ec24 <get_ldnumber+0x72>
 800ec06:	68fa      	ldr	r2, [r7, #12]
 800ec08:	697b      	ldr	r3, [r7, #20]
 800ec0a:	429a      	cmp	r2, r3
 800ec0c:	d10a      	bne.n	800ec24 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ec0e:	68bb      	ldr	r3, [r7, #8]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d107      	bne.n	800ec24 <get_ldnumber+0x72>
					vol = (int)i;
 800ec14:	68bb      	ldr	r3, [r7, #8]
 800ec16:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ec18:	697b      	ldr	r3, [r7, #20]
 800ec1a:	3301      	adds	r3, #1
 800ec1c:	617b      	str	r3, [r7, #20]
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	697a      	ldr	r2, [r7, #20]
 800ec22:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ec24:	693b      	ldr	r3, [r7, #16]
 800ec26:	e002      	b.n	800ec2e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ec28:	2300      	movs	r3, #0
 800ec2a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ec2c:	693b      	ldr	r3, [r7, #16]
}
 800ec2e:	4618      	mov	r0, r3
 800ec30:	371c      	adds	r7, #28
 800ec32:	46bd      	mov	sp, r7
 800ec34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec38:	4770      	bx	lr
	...

0800ec3c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b082      	sub	sp, #8
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
 800ec44:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	2200      	movs	r2, #0
 800ec4a:	70da      	strb	r2, [r3, #3]
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	f04f 32ff 	mov.w	r2, #4294967295
 800ec52:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ec54:	6839      	ldr	r1, [r7, #0]
 800ec56:	6878      	ldr	r0, [r7, #4]
 800ec58:	f7ff f81c 	bl	800dc94 <move_window>
 800ec5c:	4603      	mov	r3, r0
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d001      	beq.n	800ec66 <check_fs+0x2a>
 800ec62:	2304      	movs	r3, #4
 800ec64:	e038      	b.n	800ecd8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	3334      	adds	r3, #52	; 0x34
 800ec6a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ec6e:	4618      	mov	r0, r3
 800ec70:	f7fe fd2e 	bl	800d6d0 <ld_word>
 800ec74:	4603      	mov	r3, r0
 800ec76:	461a      	mov	r2, r3
 800ec78:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ec7c:	429a      	cmp	r2, r3
 800ec7e:	d001      	beq.n	800ec84 <check_fs+0x48>
 800ec80:	2303      	movs	r3, #3
 800ec82:	e029      	b.n	800ecd8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ec8a:	2be9      	cmp	r3, #233	; 0xe9
 800ec8c:	d009      	beq.n	800eca2 <check_fs+0x66>
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ec94:	2beb      	cmp	r3, #235	; 0xeb
 800ec96:	d11e      	bne.n	800ecd6 <check_fs+0x9a>
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800ec9e:	2b90      	cmp	r3, #144	; 0x90
 800eca0:	d119      	bne.n	800ecd6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	3334      	adds	r3, #52	; 0x34
 800eca6:	3336      	adds	r3, #54	; 0x36
 800eca8:	4618      	mov	r0, r3
 800ecaa:	f7fe fd29 	bl	800d700 <ld_dword>
 800ecae:	4603      	mov	r3, r0
 800ecb0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ecb4:	4a0a      	ldr	r2, [pc, #40]	; (800ece0 <check_fs+0xa4>)
 800ecb6:	4293      	cmp	r3, r2
 800ecb8:	d101      	bne.n	800ecbe <check_fs+0x82>
 800ecba:	2300      	movs	r3, #0
 800ecbc:	e00c      	b.n	800ecd8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	3334      	adds	r3, #52	; 0x34
 800ecc2:	3352      	adds	r3, #82	; 0x52
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	f7fe fd1b 	bl	800d700 <ld_dword>
 800ecca:	4603      	mov	r3, r0
 800eccc:	4a05      	ldr	r2, [pc, #20]	; (800ece4 <check_fs+0xa8>)
 800ecce:	4293      	cmp	r3, r2
 800ecd0:	d101      	bne.n	800ecd6 <check_fs+0x9a>
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	e000      	b.n	800ecd8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ecd6:	2302      	movs	r3, #2
}
 800ecd8:	4618      	mov	r0, r3
 800ecda:	3708      	adds	r7, #8
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	bd80      	pop	{r7, pc}
 800ece0:	00544146 	.word	0x00544146
 800ece4:	33544146 	.word	0x33544146

0800ece8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b096      	sub	sp, #88	; 0x58
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	60f8      	str	r0, [r7, #12]
 800ecf0:	60b9      	str	r1, [r7, #8]
 800ecf2:	4613      	mov	r3, r2
 800ecf4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ecf6:	68bb      	ldr	r3, [r7, #8]
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ecfc:	68f8      	ldr	r0, [r7, #12]
 800ecfe:	f7ff ff58 	bl	800ebb2 <get_ldnumber>
 800ed02:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ed04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	da01      	bge.n	800ed0e <find_volume+0x26>
 800ed0a:	230b      	movs	r3, #11
 800ed0c:	e236      	b.n	800f17c <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ed0e:	4aac      	ldr	r2, [pc, #688]	; (800efc0 <find_volume+0x2d8>)
 800ed10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed16:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ed18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d101      	bne.n	800ed22 <find_volume+0x3a>
 800ed1e:	230c      	movs	r3, #12
 800ed20:	e22c      	b.n	800f17c <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 800ed22:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ed24:	f7fe fdd4 	bl	800d8d0 <lock_fs>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d101      	bne.n	800ed32 <find_volume+0x4a>
 800ed2e:	230f      	movs	r3, #15
 800ed30:	e224      	b.n	800f17c <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 800ed32:	68bb      	ldr	r3, [r7, #8]
 800ed34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ed36:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ed38:	79fb      	ldrb	r3, [r7, #7]
 800ed3a:	f023 0301 	bic.w	r3, r3, #1
 800ed3e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ed40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed42:	781b      	ldrb	r3, [r3, #0]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d01a      	beq.n	800ed7e <find_volume+0x96>
		stat = disk_status(fs->drv);
 800ed48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed4a:	785b      	ldrb	r3, [r3, #1]
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	f7fe fc21 	bl	800d594 <disk_status>
 800ed52:	4603      	mov	r3, r0
 800ed54:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ed58:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ed5c:	f003 0301 	and.w	r3, r3, #1
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d10c      	bne.n	800ed7e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ed64:	79fb      	ldrb	r3, [r7, #7]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d007      	beq.n	800ed7a <find_volume+0x92>
 800ed6a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ed6e:	f003 0304 	and.w	r3, r3, #4
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d001      	beq.n	800ed7a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800ed76:	230a      	movs	r3, #10
 800ed78:	e200      	b.n	800f17c <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	e1fe      	b.n	800f17c <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ed7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed80:	2200      	movs	r2, #0
 800ed82:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ed84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed86:	b2da      	uxtb	r2, r3
 800ed88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed8a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ed8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed8e:	785b      	ldrb	r3, [r3, #1]
 800ed90:	4618      	mov	r0, r3
 800ed92:	f7fe fc19 	bl	800d5c8 <disk_initialize>
 800ed96:	4603      	mov	r3, r0
 800ed98:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ed9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eda0:	f003 0301 	and.w	r3, r3, #1
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d001      	beq.n	800edac <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800eda8:	2303      	movs	r3, #3
 800edaa:	e1e7      	b.n	800f17c <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800edac:	79fb      	ldrb	r3, [r7, #7]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d007      	beq.n	800edc2 <find_volume+0xda>
 800edb2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800edb6:	f003 0304 	and.w	r3, r3, #4
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d001      	beq.n	800edc2 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800edbe:	230a      	movs	r3, #10
 800edc0:	e1dc      	b.n	800f17c <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800edc2:	2300      	movs	r3, #0
 800edc4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800edc6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800edc8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800edca:	f7ff ff37 	bl	800ec3c <check_fs>
 800edce:	4603      	mov	r3, r0
 800edd0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800edd4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800edd8:	2b02      	cmp	r3, #2
 800edda:	d14b      	bne.n	800ee74 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800eddc:	2300      	movs	r3, #0
 800edde:	643b      	str	r3, [r7, #64]	; 0x40
 800ede0:	e01f      	b.n	800ee22 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ede2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ede4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ede8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edea:	011b      	lsls	r3, r3, #4
 800edec:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800edf0:	4413      	add	r3, r2
 800edf2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800edf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edf6:	3304      	adds	r3, #4
 800edf8:	781b      	ldrb	r3, [r3, #0]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d006      	beq.n	800ee0c <find_volume+0x124>
 800edfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee00:	3308      	adds	r3, #8
 800ee02:	4618      	mov	r0, r3
 800ee04:	f7fe fc7c 	bl	800d700 <ld_dword>
 800ee08:	4602      	mov	r2, r0
 800ee0a:	e000      	b.n	800ee0e <find_volume+0x126>
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee10:	009b      	lsls	r3, r3, #2
 800ee12:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800ee16:	440b      	add	r3, r1
 800ee18:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ee1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee1e:	3301      	adds	r3, #1
 800ee20:	643b      	str	r3, [r7, #64]	; 0x40
 800ee22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee24:	2b03      	cmp	r3, #3
 800ee26:	d9dc      	bls.n	800ede2 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ee28:	2300      	movs	r3, #0
 800ee2a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800ee2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d002      	beq.n	800ee38 <find_volume+0x150>
 800ee32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee34:	3b01      	subs	r3, #1
 800ee36:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ee38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee3a:	009b      	lsls	r3, r3, #2
 800ee3c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ee40:	4413      	add	r3, r2
 800ee42:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ee46:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ee48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d005      	beq.n	800ee5a <find_volume+0x172>
 800ee4e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ee50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ee52:	f7ff fef3 	bl	800ec3c <check_fs>
 800ee56:	4603      	mov	r3, r0
 800ee58:	e000      	b.n	800ee5c <find_volume+0x174>
 800ee5a:	2303      	movs	r3, #3
 800ee5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ee60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ee64:	2b01      	cmp	r3, #1
 800ee66:	d905      	bls.n	800ee74 <find_volume+0x18c>
 800ee68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee6a:	3301      	adds	r3, #1
 800ee6c:	643b      	str	r3, [r7, #64]	; 0x40
 800ee6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee70:	2b03      	cmp	r3, #3
 800ee72:	d9e1      	bls.n	800ee38 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ee74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ee78:	2b04      	cmp	r3, #4
 800ee7a:	d101      	bne.n	800ee80 <find_volume+0x198>
 800ee7c:	2301      	movs	r3, #1
 800ee7e:	e17d      	b.n	800f17c <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ee80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ee84:	2b01      	cmp	r3, #1
 800ee86:	d901      	bls.n	800ee8c <find_volume+0x1a4>
 800ee88:	230d      	movs	r3, #13
 800ee8a:	e177      	b.n	800f17c <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ee8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee8e:	3334      	adds	r3, #52	; 0x34
 800ee90:	330b      	adds	r3, #11
 800ee92:	4618      	mov	r0, r3
 800ee94:	f7fe fc1c 	bl	800d6d0 <ld_word>
 800ee98:	4603      	mov	r3, r0
 800ee9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee9e:	d001      	beq.n	800eea4 <find_volume+0x1bc>
 800eea0:	230d      	movs	r3, #13
 800eea2:	e16b      	b.n	800f17c <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800eea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eea6:	3334      	adds	r3, #52	; 0x34
 800eea8:	3316      	adds	r3, #22
 800eeaa:	4618      	mov	r0, r3
 800eeac:	f7fe fc10 	bl	800d6d0 <ld_word>
 800eeb0:	4603      	mov	r3, r0
 800eeb2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800eeb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d106      	bne.n	800eec8 <find_volume+0x1e0>
 800eeba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eebc:	3334      	adds	r3, #52	; 0x34
 800eebe:	3324      	adds	r3, #36	; 0x24
 800eec0:	4618      	mov	r0, r3
 800eec2:	f7fe fc1d 	bl	800d700 <ld_dword>
 800eec6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800eec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800eecc:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800eece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eed0:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800eed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eed6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800eed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeda:	789b      	ldrb	r3, [r3, #2]
 800eedc:	2b01      	cmp	r3, #1
 800eede:	d005      	beq.n	800eeec <find_volume+0x204>
 800eee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eee2:	789b      	ldrb	r3, [r3, #2]
 800eee4:	2b02      	cmp	r3, #2
 800eee6:	d001      	beq.n	800eeec <find_volume+0x204>
 800eee8:	230d      	movs	r3, #13
 800eeea:	e147      	b.n	800f17c <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800eeec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeee:	789b      	ldrb	r3, [r3, #2]
 800eef0:	461a      	mov	r2, r3
 800eef2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eef4:	fb02 f303 	mul.w	r3, r2, r3
 800eef8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800eefa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eefc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ef00:	b29a      	uxth	r2, r3
 800ef02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef04:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ef06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef08:	895b      	ldrh	r3, [r3, #10]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d008      	beq.n	800ef20 <find_volume+0x238>
 800ef0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef10:	895b      	ldrh	r3, [r3, #10]
 800ef12:	461a      	mov	r2, r3
 800ef14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef16:	895b      	ldrh	r3, [r3, #10]
 800ef18:	3b01      	subs	r3, #1
 800ef1a:	4013      	ands	r3, r2
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d001      	beq.n	800ef24 <find_volume+0x23c>
 800ef20:	230d      	movs	r3, #13
 800ef22:	e12b      	b.n	800f17c <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ef24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef26:	3334      	adds	r3, #52	; 0x34
 800ef28:	3311      	adds	r3, #17
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	f7fe fbd0 	bl	800d6d0 <ld_word>
 800ef30:	4603      	mov	r3, r0
 800ef32:	461a      	mov	r2, r3
 800ef34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef36:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ef38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef3a:	891b      	ldrh	r3, [r3, #8]
 800ef3c:	f003 030f 	and.w	r3, r3, #15
 800ef40:	b29b      	uxth	r3, r3
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d001      	beq.n	800ef4a <find_volume+0x262>
 800ef46:	230d      	movs	r3, #13
 800ef48:	e118      	b.n	800f17c <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ef4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef4c:	3334      	adds	r3, #52	; 0x34
 800ef4e:	3313      	adds	r3, #19
 800ef50:	4618      	mov	r0, r3
 800ef52:	f7fe fbbd 	bl	800d6d0 <ld_word>
 800ef56:	4603      	mov	r3, r0
 800ef58:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ef5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d106      	bne.n	800ef6e <find_volume+0x286>
 800ef60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef62:	3334      	adds	r3, #52	; 0x34
 800ef64:	3320      	adds	r3, #32
 800ef66:	4618      	mov	r0, r3
 800ef68:	f7fe fbca 	bl	800d700 <ld_dword>
 800ef6c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ef6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef70:	3334      	adds	r3, #52	; 0x34
 800ef72:	330e      	adds	r3, #14
 800ef74:	4618      	mov	r0, r3
 800ef76:	f7fe fbab 	bl	800d6d0 <ld_word>
 800ef7a:	4603      	mov	r3, r0
 800ef7c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ef7e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d101      	bne.n	800ef88 <find_volume+0x2a0>
 800ef84:	230d      	movs	r3, #13
 800ef86:	e0f9      	b.n	800f17c <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ef88:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ef8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef8c:	4413      	add	r3, r2
 800ef8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef90:	8912      	ldrh	r2, [r2, #8]
 800ef92:	0912      	lsrs	r2, r2, #4
 800ef94:	b292      	uxth	r2, r2
 800ef96:	4413      	add	r3, r2
 800ef98:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ef9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ef9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef9e:	429a      	cmp	r2, r3
 800efa0:	d201      	bcs.n	800efa6 <find_volume+0x2be>
 800efa2:	230d      	movs	r3, #13
 800efa4:	e0ea      	b.n	800f17c <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800efa6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800efa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efaa:	1ad3      	subs	r3, r2, r3
 800efac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800efae:	8952      	ldrh	r2, [r2, #10]
 800efb0:	fbb3 f3f2 	udiv	r3, r3, r2
 800efb4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800efb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d103      	bne.n	800efc4 <find_volume+0x2dc>
 800efbc:	230d      	movs	r3, #13
 800efbe:	e0dd      	b.n	800f17c <find_volume+0x494>
 800efc0:	2000040c 	.word	0x2000040c
		fmt = FS_FAT32;
 800efc4:	2303      	movs	r3, #3
 800efc6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800efca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efcc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800efd0:	4293      	cmp	r3, r2
 800efd2:	d802      	bhi.n	800efda <find_volume+0x2f2>
 800efd4:	2302      	movs	r3, #2
 800efd6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800efda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efdc:	f640 72f5 	movw	r2, #4085	; 0xff5
 800efe0:	4293      	cmp	r3, r2
 800efe2:	d802      	bhi.n	800efea <find_volume+0x302>
 800efe4:	2301      	movs	r3, #1
 800efe6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800efea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efec:	1c9a      	adds	r2, r3, #2
 800efee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eff0:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800eff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eff4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eff6:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800eff8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800effa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800effc:	441a      	add	r2, r3
 800effe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f000:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800f002:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f006:	441a      	add	r2, r3
 800f008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f00a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800f00c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f010:	2b03      	cmp	r3, #3
 800f012:	d11e      	bne.n	800f052 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f016:	3334      	adds	r3, #52	; 0x34
 800f018:	332a      	adds	r3, #42	; 0x2a
 800f01a:	4618      	mov	r0, r3
 800f01c:	f7fe fb58 	bl	800d6d0 <ld_word>
 800f020:	4603      	mov	r3, r0
 800f022:	2b00      	cmp	r3, #0
 800f024:	d001      	beq.n	800f02a <find_volume+0x342>
 800f026:	230d      	movs	r3, #13
 800f028:	e0a8      	b.n	800f17c <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f02c:	891b      	ldrh	r3, [r3, #8]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d001      	beq.n	800f036 <find_volume+0x34e>
 800f032:	230d      	movs	r3, #13
 800f034:	e0a2      	b.n	800f17c <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f038:	3334      	adds	r3, #52	; 0x34
 800f03a:	332c      	adds	r3, #44	; 0x2c
 800f03c:	4618      	mov	r0, r3
 800f03e:	f7fe fb5f 	bl	800d700 <ld_dword>
 800f042:	4602      	mov	r2, r0
 800f044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f046:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f04a:	699b      	ldr	r3, [r3, #24]
 800f04c:	009b      	lsls	r3, r3, #2
 800f04e:	647b      	str	r3, [r7, #68]	; 0x44
 800f050:	e01f      	b.n	800f092 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f054:	891b      	ldrh	r3, [r3, #8]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d101      	bne.n	800f05e <find_volume+0x376>
 800f05a:	230d      	movs	r3, #13
 800f05c:	e08e      	b.n	800f17c <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f060:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f062:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f064:	441a      	add	r2, r3
 800f066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f068:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f06a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f06e:	2b02      	cmp	r3, #2
 800f070:	d103      	bne.n	800f07a <find_volume+0x392>
 800f072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f074:	699b      	ldr	r3, [r3, #24]
 800f076:	005b      	lsls	r3, r3, #1
 800f078:	e00a      	b.n	800f090 <find_volume+0x3a8>
 800f07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f07c:	699a      	ldr	r2, [r3, #24]
 800f07e:	4613      	mov	r3, r2
 800f080:	005b      	lsls	r3, r3, #1
 800f082:	4413      	add	r3, r2
 800f084:	085a      	lsrs	r2, r3, #1
 800f086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f088:	699b      	ldr	r3, [r3, #24]
 800f08a:	f003 0301 	and.w	r3, r3, #1
 800f08e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f090:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f094:	69da      	ldr	r2, [r3, #28]
 800f096:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f098:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800f09c:	0a5b      	lsrs	r3, r3, #9
 800f09e:	429a      	cmp	r2, r3
 800f0a0:	d201      	bcs.n	800f0a6 <find_volume+0x3be>
 800f0a2:	230d      	movs	r3, #13
 800f0a4:	e06a      	b.n	800f17c <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f0a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0a8:	f04f 32ff 	mov.w	r2, #4294967295
 800f0ac:	615a      	str	r2, [r3, #20]
 800f0ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0b0:	695a      	ldr	r2, [r3, #20]
 800f0b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0b4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800f0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0b8:	2280      	movs	r2, #128	; 0x80
 800f0ba:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f0bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f0c0:	2b03      	cmp	r3, #3
 800f0c2:	d149      	bne.n	800f158 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0c6:	3334      	adds	r3, #52	; 0x34
 800f0c8:	3330      	adds	r3, #48	; 0x30
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	f7fe fb00 	bl	800d6d0 <ld_word>
 800f0d0:	4603      	mov	r3, r0
 800f0d2:	2b01      	cmp	r3, #1
 800f0d4:	d140      	bne.n	800f158 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f0d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0d8:	3301      	adds	r3, #1
 800f0da:	4619      	mov	r1, r3
 800f0dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f0de:	f7fe fdd9 	bl	800dc94 <move_window>
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d137      	bne.n	800f158 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 800f0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f0ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0f0:	3334      	adds	r3, #52	; 0x34
 800f0f2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	f7fe faea 	bl	800d6d0 <ld_word>
 800f0fc:	4603      	mov	r3, r0
 800f0fe:	461a      	mov	r2, r3
 800f100:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f104:	429a      	cmp	r2, r3
 800f106:	d127      	bne.n	800f158 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f10a:	3334      	adds	r3, #52	; 0x34
 800f10c:	4618      	mov	r0, r3
 800f10e:	f7fe faf7 	bl	800d700 <ld_dword>
 800f112:	4603      	mov	r3, r0
 800f114:	4a1b      	ldr	r2, [pc, #108]	; (800f184 <find_volume+0x49c>)
 800f116:	4293      	cmp	r3, r2
 800f118:	d11e      	bne.n	800f158 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f11a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f11c:	3334      	adds	r3, #52	; 0x34
 800f11e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f122:	4618      	mov	r0, r3
 800f124:	f7fe faec 	bl	800d700 <ld_dword>
 800f128:	4603      	mov	r3, r0
 800f12a:	4a17      	ldr	r2, [pc, #92]	; (800f188 <find_volume+0x4a0>)
 800f12c:	4293      	cmp	r3, r2
 800f12e:	d113      	bne.n	800f158 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f132:	3334      	adds	r3, #52	; 0x34
 800f134:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f138:	4618      	mov	r0, r3
 800f13a:	f7fe fae1 	bl	800d700 <ld_dword>
 800f13e:	4602      	mov	r2, r0
 800f140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f142:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f146:	3334      	adds	r3, #52	; 0x34
 800f148:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f14c:	4618      	mov	r0, r3
 800f14e:	f7fe fad7 	bl	800d700 <ld_dword>
 800f152:	4602      	mov	r2, r0
 800f154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f156:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f15a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800f15e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f160:	4b0a      	ldr	r3, [pc, #40]	; (800f18c <find_volume+0x4a4>)
 800f162:	881b      	ldrh	r3, [r3, #0]
 800f164:	3301      	adds	r3, #1
 800f166:	b29a      	uxth	r2, r3
 800f168:	4b08      	ldr	r3, [pc, #32]	; (800f18c <find_volume+0x4a4>)
 800f16a:	801a      	strh	r2, [r3, #0]
 800f16c:	4b07      	ldr	r3, [pc, #28]	; (800f18c <find_volume+0x4a4>)
 800f16e:	881a      	ldrh	r2, [r3, #0]
 800f170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f172:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f174:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f176:	f7fe fd25 	bl	800dbc4 <clear_lock>
#endif
	return FR_OK;
 800f17a:	2300      	movs	r3, #0
}
 800f17c:	4618      	mov	r0, r3
 800f17e:	3758      	adds	r7, #88	; 0x58
 800f180:	46bd      	mov	sp, r7
 800f182:	bd80      	pop	{r7, pc}
 800f184:	41615252 	.word	0x41615252
 800f188:	61417272 	.word	0x61417272
 800f18c:	20000410 	.word	0x20000410

0800f190 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b084      	sub	sp, #16
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
 800f198:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f19a:	2309      	movs	r3, #9
 800f19c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d02e      	beq.n	800f202 <validate+0x72>
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d02a      	beq.n	800f202 <validate+0x72>
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	781b      	ldrb	r3, [r3, #0]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d025      	beq.n	800f202 <validate+0x72>
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	889a      	ldrh	r2, [r3, #4]
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	88db      	ldrh	r3, [r3, #6]
 800f1c0:	429a      	cmp	r2, r3
 800f1c2:	d11e      	bne.n	800f202 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	f7fe fb81 	bl	800d8d0 <lock_fs>
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d014      	beq.n	800f1fe <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	785b      	ldrb	r3, [r3, #1]
 800f1da:	4618      	mov	r0, r3
 800f1dc:	f7fe f9da 	bl	800d594 <disk_status>
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	f003 0301 	and.w	r3, r3, #1
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d102      	bne.n	800f1f0 <validate+0x60>
				res = FR_OK;
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	73fb      	strb	r3, [r7, #15]
 800f1ee:	e008      	b.n	800f202 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	2100      	movs	r1, #0
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	f7fe fb80 	bl	800d8fc <unlock_fs>
 800f1fc:	e001      	b.n	800f202 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800f1fe:	230f      	movs	r3, #15
 800f200:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f202:	7bfb      	ldrb	r3, [r7, #15]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d102      	bne.n	800f20e <validate+0x7e>
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	e000      	b.n	800f210 <validate+0x80>
 800f20e:	2300      	movs	r3, #0
 800f210:	683a      	ldr	r2, [r7, #0]
 800f212:	6013      	str	r3, [r2, #0]
	return res;
 800f214:	7bfb      	ldrb	r3, [r7, #15]
}
 800f216:	4618      	mov	r0, r3
 800f218:	3710      	adds	r7, #16
 800f21a:	46bd      	mov	sp, r7
 800f21c:	bd80      	pop	{r7, pc}
	...

0800f220 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f220:	b580      	push	{r7, lr}
 800f222:	b088      	sub	sp, #32
 800f224:	af00      	add	r7, sp, #0
 800f226:	60f8      	str	r0, [r7, #12]
 800f228:	60b9      	str	r1, [r7, #8]
 800f22a:	4613      	mov	r3, r2
 800f22c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f22e:	68bb      	ldr	r3, [r7, #8]
 800f230:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f232:	f107 0310 	add.w	r3, r7, #16
 800f236:	4618      	mov	r0, r3
 800f238:	f7ff fcbb 	bl	800ebb2 <get_ldnumber>
 800f23c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f23e:	69fb      	ldr	r3, [r7, #28]
 800f240:	2b00      	cmp	r3, #0
 800f242:	da01      	bge.n	800f248 <f_mount+0x28>
 800f244:	230b      	movs	r3, #11
 800f246:	e048      	b.n	800f2da <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f248:	4a26      	ldr	r2, [pc, #152]	; (800f2e4 <f_mount+0xc4>)
 800f24a:	69fb      	ldr	r3, [r7, #28]
 800f24c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f250:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f252:	69bb      	ldr	r3, [r7, #24]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d00f      	beq.n	800f278 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f258:	69b8      	ldr	r0, [r7, #24]
 800f25a:	f7fe fcb3 	bl	800dbc4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800f25e:	69bb      	ldr	r3, [r7, #24]
 800f260:	68db      	ldr	r3, [r3, #12]
 800f262:	4618      	mov	r0, r3
 800f264:	f001 f812 	bl	801028c <ff_del_syncobj>
 800f268:	4603      	mov	r3, r0
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d101      	bne.n	800f272 <f_mount+0x52>
 800f26e:	2302      	movs	r3, #2
 800f270:	e033      	b.n	800f2da <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f272:	69bb      	ldr	r3, [r7, #24]
 800f274:	2200      	movs	r2, #0
 800f276:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d00f      	beq.n	800f29e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	2200      	movs	r2, #0
 800f282:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800f284:	69fb      	ldr	r3, [r7, #28]
 800f286:	b2da      	uxtb	r2, r3
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	330c      	adds	r3, #12
 800f28c:	4619      	mov	r1, r3
 800f28e:	4610      	mov	r0, r2
 800f290:	f000 ffe1 	bl	8010256 <ff_cre_syncobj>
 800f294:	4603      	mov	r3, r0
 800f296:	2b00      	cmp	r3, #0
 800f298:	d101      	bne.n	800f29e <f_mount+0x7e>
 800f29a:	2302      	movs	r3, #2
 800f29c:	e01d      	b.n	800f2da <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f29e:	68fa      	ldr	r2, [r7, #12]
 800f2a0:	4910      	ldr	r1, [pc, #64]	; (800f2e4 <f_mount+0xc4>)
 800f2a2:	69fb      	ldr	r3, [r7, #28]
 800f2a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d002      	beq.n	800f2b4 <f_mount+0x94>
 800f2ae:	79fb      	ldrb	r3, [r7, #7]
 800f2b0:	2b01      	cmp	r3, #1
 800f2b2:	d001      	beq.n	800f2b8 <f_mount+0x98>
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	e010      	b.n	800f2da <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f2b8:	f107 010c 	add.w	r1, r7, #12
 800f2bc:	f107 0308 	add.w	r3, r7, #8
 800f2c0:	2200      	movs	r2, #0
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	f7ff fd10 	bl	800ece8 <find_volume>
 800f2c8:	4603      	mov	r3, r0
 800f2ca:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	7dfa      	ldrb	r2, [r7, #23]
 800f2d0:	4611      	mov	r1, r2
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	f7fe fb12 	bl	800d8fc <unlock_fs>
 800f2d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2da:	4618      	mov	r0, r3
 800f2dc:	3720      	adds	r7, #32
 800f2de:	46bd      	mov	sp, r7
 800f2e0:	bd80      	pop	{r7, pc}
 800f2e2:	bf00      	nop
 800f2e4:	2000040c 	.word	0x2000040c

0800f2e8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f2e8:	b580      	push	{r7, lr}
 800f2ea:	b098      	sub	sp, #96	; 0x60
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	60f8      	str	r0, [r7, #12]
 800f2f0:	60b9      	str	r1, [r7, #8]
 800f2f2:	4613      	mov	r3, r2
 800f2f4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d101      	bne.n	800f300 <f_open+0x18>
 800f2fc:	2309      	movs	r3, #9
 800f2fe:	e1b4      	b.n	800f66a <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f300:	79fb      	ldrb	r3, [r7, #7]
 800f302:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f306:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800f308:	79fa      	ldrb	r2, [r7, #7]
 800f30a:	f107 0110 	add.w	r1, r7, #16
 800f30e:	f107 0308 	add.w	r3, r7, #8
 800f312:	4618      	mov	r0, r3
 800f314:	f7ff fce8 	bl	800ece8 <find_volume>
 800f318:	4603      	mov	r3, r0
 800f31a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800f31e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f322:	2b00      	cmp	r3, #0
 800f324:	f040 8191 	bne.w	800f64a <f_open+0x362>
		dj.obj.fs = fs;
 800f328:	693b      	ldr	r3, [r7, #16]
 800f32a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f32c:	68ba      	ldr	r2, [r7, #8]
 800f32e:	f107 0314 	add.w	r3, r7, #20
 800f332:	4611      	mov	r1, r2
 800f334:	4618      	mov	r0, r3
 800f336:	f7ff fbcb 	bl	800ead0 <follow_path>
 800f33a:	4603      	mov	r3, r0
 800f33c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f340:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f344:	2b00      	cmp	r3, #0
 800f346:	d11a      	bne.n	800f37e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f348:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f34c:	b25b      	sxtb	r3, r3
 800f34e:	2b00      	cmp	r3, #0
 800f350:	da03      	bge.n	800f35a <f_open+0x72>
				res = FR_INVALID_NAME;
 800f352:	2306      	movs	r3, #6
 800f354:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f358:	e011      	b.n	800f37e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f35a:	79fb      	ldrb	r3, [r7, #7]
 800f35c:	f023 0301 	bic.w	r3, r3, #1
 800f360:	2b00      	cmp	r3, #0
 800f362:	bf14      	ite	ne
 800f364:	2301      	movne	r3, #1
 800f366:	2300      	moveq	r3, #0
 800f368:	b2db      	uxtb	r3, r3
 800f36a:	461a      	mov	r2, r3
 800f36c:	f107 0314 	add.w	r3, r7, #20
 800f370:	4611      	mov	r1, r2
 800f372:	4618      	mov	r0, r3
 800f374:	f7fe fade 	bl	800d934 <chk_lock>
 800f378:	4603      	mov	r3, r0
 800f37a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f37e:	79fb      	ldrb	r3, [r7, #7]
 800f380:	f003 031c 	and.w	r3, r3, #28
 800f384:	2b00      	cmp	r3, #0
 800f386:	d07f      	beq.n	800f488 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800f388:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d017      	beq.n	800f3c0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f390:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f394:	2b04      	cmp	r3, #4
 800f396:	d10e      	bne.n	800f3b6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f398:	f7fe fb28 	bl	800d9ec <enq_lock>
 800f39c:	4603      	mov	r3, r0
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d006      	beq.n	800f3b0 <f_open+0xc8>
 800f3a2:	f107 0314 	add.w	r3, r7, #20
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	f7ff fa6c 	bl	800e884 <dir_register>
 800f3ac:	4603      	mov	r3, r0
 800f3ae:	e000      	b.n	800f3b2 <f_open+0xca>
 800f3b0:	2312      	movs	r3, #18
 800f3b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f3b6:	79fb      	ldrb	r3, [r7, #7]
 800f3b8:	f043 0308 	orr.w	r3, r3, #8
 800f3bc:	71fb      	strb	r3, [r7, #7]
 800f3be:	e010      	b.n	800f3e2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f3c0:	7ebb      	ldrb	r3, [r7, #26]
 800f3c2:	f003 0311 	and.w	r3, r3, #17
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d003      	beq.n	800f3d2 <f_open+0xea>
					res = FR_DENIED;
 800f3ca:	2307      	movs	r3, #7
 800f3cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f3d0:	e007      	b.n	800f3e2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f3d2:	79fb      	ldrb	r3, [r7, #7]
 800f3d4:	f003 0304 	and.w	r3, r3, #4
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d002      	beq.n	800f3e2 <f_open+0xfa>
 800f3dc:	2308      	movs	r3, #8
 800f3de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f3e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d168      	bne.n	800f4bc <f_open+0x1d4>
 800f3ea:	79fb      	ldrb	r3, [r7, #7]
 800f3ec:	f003 0308 	and.w	r3, r3, #8
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d063      	beq.n	800f4bc <f_open+0x1d4>
				dw = GET_FATTIME();
 800f3f4:	f7fc ffe6 	bl	800c3c4 <get_fattime>
 800f3f8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f3fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3fc:	330e      	adds	r3, #14
 800f3fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f400:	4618      	mov	r0, r3
 800f402:	f7fe f9bb 	bl	800d77c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f408:	3316      	adds	r3, #22
 800f40a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f40c:	4618      	mov	r0, r3
 800f40e:	f7fe f9b5 	bl	800d77c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f414:	330b      	adds	r3, #11
 800f416:	2220      	movs	r2, #32
 800f418:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f41a:	693b      	ldr	r3, [r7, #16]
 800f41c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f41e:	4611      	mov	r1, r2
 800f420:	4618      	mov	r0, r3
 800f422:	f7ff f93e 	bl	800e6a2 <ld_clust>
 800f426:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f428:	693b      	ldr	r3, [r7, #16]
 800f42a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f42c:	2200      	movs	r2, #0
 800f42e:	4618      	mov	r0, r3
 800f430:	f7ff f956 	bl	800e6e0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f436:	331c      	adds	r3, #28
 800f438:	2100      	movs	r1, #0
 800f43a:	4618      	mov	r0, r3
 800f43c:	f7fe f99e 	bl	800d77c <st_dword>
					fs->wflag = 1;
 800f440:	693b      	ldr	r3, [r7, #16]
 800f442:	2201      	movs	r2, #1
 800f444:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d037      	beq.n	800f4bc <f_open+0x1d4>
						dw = fs->winsect;
 800f44c:	693b      	ldr	r3, [r7, #16]
 800f44e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f450:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800f452:	f107 0314 	add.w	r3, r7, #20
 800f456:	2200      	movs	r2, #0
 800f458:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f45a:	4618      	mov	r0, r3
 800f45c:	f7fe fe69 	bl	800e132 <remove_chain>
 800f460:	4603      	mov	r3, r0
 800f462:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800f466:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d126      	bne.n	800f4bc <f_open+0x1d4>
							res = move_window(fs, dw);
 800f46e:	693b      	ldr	r3, [r7, #16]
 800f470:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f472:	4618      	mov	r0, r3
 800f474:	f7fe fc0e 	bl	800dc94 <move_window>
 800f478:	4603      	mov	r3, r0
 800f47a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f47e:	693b      	ldr	r3, [r7, #16]
 800f480:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f482:	3a01      	subs	r2, #1
 800f484:	611a      	str	r2, [r3, #16]
 800f486:	e019      	b.n	800f4bc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f488:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d115      	bne.n	800f4bc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f490:	7ebb      	ldrb	r3, [r7, #26]
 800f492:	f003 0310 	and.w	r3, r3, #16
 800f496:	2b00      	cmp	r3, #0
 800f498:	d003      	beq.n	800f4a2 <f_open+0x1ba>
					res = FR_NO_FILE;
 800f49a:	2304      	movs	r3, #4
 800f49c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f4a0:	e00c      	b.n	800f4bc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f4a2:	79fb      	ldrb	r3, [r7, #7]
 800f4a4:	f003 0302 	and.w	r3, r3, #2
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d007      	beq.n	800f4bc <f_open+0x1d4>
 800f4ac:	7ebb      	ldrb	r3, [r7, #26]
 800f4ae:	f003 0301 	and.w	r3, r3, #1
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d002      	beq.n	800f4bc <f_open+0x1d4>
						res = FR_DENIED;
 800f4b6:	2307      	movs	r3, #7
 800f4b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800f4bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d128      	bne.n	800f516 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f4c4:	79fb      	ldrb	r3, [r7, #7]
 800f4c6:	f003 0308 	and.w	r3, r3, #8
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d003      	beq.n	800f4d6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800f4ce:	79fb      	ldrb	r3, [r7, #7]
 800f4d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4d4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f4d6:	693b      	ldr	r3, [r7, #16]
 800f4d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800f4de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f4e4:	79fb      	ldrb	r3, [r7, #7]
 800f4e6:	f023 0301 	bic.w	r3, r3, #1
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	bf14      	ite	ne
 800f4ee:	2301      	movne	r3, #1
 800f4f0:	2300      	moveq	r3, #0
 800f4f2:	b2db      	uxtb	r3, r3
 800f4f4:	461a      	mov	r2, r3
 800f4f6:	f107 0314 	add.w	r3, r7, #20
 800f4fa:	4611      	mov	r1, r2
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	f7fe fa97 	bl	800da30 <inc_lock>
 800f502:	4602      	mov	r2, r0
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	691b      	ldr	r3, [r3, #16]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d102      	bne.n	800f516 <f_open+0x22e>
 800f510:	2302      	movs	r3, #2
 800f512:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f516:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	f040 8095 	bne.w	800f64a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f520:	693b      	ldr	r3, [r7, #16]
 800f522:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f524:	4611      	mov	r1, r2
 800f526:	4618      	mov	r0, r3
 800f528:	f7ff f8bb 	bl	800e6a2 <ld_clust>
 800f52c:	4602      	mov	r2, r0
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f534:	331c      	adds	r3, #28
 800f536:	4618      	mov	r0, r3
 800f538:	f7fe f8e2 	bl	800d700 <ld_dword>
 800f53c:	4602      	mov	r2, r0
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	2200      	movs	r2, #0
 800f546:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f548:	693a      	ldr	r2, [r7, #16]
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f54e:	693b      	ldr	r3, [r7, #16]
 800f550:	88da      	ldrh	r2, [r3, #6]
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	79fa      	ldrb	r2, [r7, #7]
 800f55a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	2200      	movs	r2, #0
 800f560:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	2200      	movs	r2, #0
 800f566:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	2200      	movs	r2, #0
 800f56c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	3330      	adds	r3, #48	; 0x30
 800f572:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f576:	2100      	movs	r1, #0
 800f578:	4618      	mov	r0, r3
 800f57a:	f7fe f94c 	bl	800d816 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f57e:	79fb      	ldrb	r3, [r7, #7]
 800f580:	f003 0320 	and.w	r3, r3, #32
 800f584:	2b00      	cmp	r3, #0
 800f586:	d060      	beq.n	800f64a <f_open+0x362>
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	68db      	ldr	r3, [r3, #12]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d05c      	beq.n	800f64a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	68da      	ldr	r2, [r3, #12]
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f598:	693b      	ldr	r3, [r7, #16]
 800f59a:	895b      	ldrh	r3, [r3, #10]
 800f59c:	025b      	lsls	r3, r3, #9
 800f59e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	689b      	ldr	r3, [r3, #8]
 800f5a4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	68db      	ldr	r3, [r3, #12]
 800f5aa:	657b      	str	r3, [r7, #84]	; 0x54
 800f5ac:	e016      	b.n	800f5dc <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	f7fe fc29 	bl	800de0a <get_fat>
 800f5b8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800f5ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f5bc:	2b01      	cmp	r3, #1
 800f5be:	d802      	bhi.n	800f5c6 <f_open+0x2de>
 800f5c0:	2302      	movs	r3, #2
 800f5c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f5c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f5c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5cc:	d102      	bne.n	800f5d4 <f_open+0x2ec>
 800f5ce:	2301      	movs	r3, #1
 800f5d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f5d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f5d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f5d8:	1ad3      	subs	r3, r2, r3
 800f5da:	657b      	str	r3, [r7, #84]	; 0x54
 800f5dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d103      	bne.n	800f5ec <f_open+0x304>
 800f5e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f5e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f5e8:	429a      	cmp	r2, r3
 800f5ea:	d8e0      	bhi.n	800f5ae <f_open+0x2c6>
				}
				fp->clust = clst;
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f5f0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f5f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d127      	bne.n	800f64a <f_open+0x362>
 800f5fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f5fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f600:	2b00      	cmp	r3, #0
 800f602:	d022      	beq.n	800f64a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f604:	693b      	ldr	r3, [r7, #16]
 800f606:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f608:	4618      	mov	r0, r3
 800f60a:	f7fe fbdf 	bl	800ddcc <clust2sect>
 800f60e:	6478      	str	r0, [r7, #68]	; 0x44
 800f610:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f612:	2b00      	cmp	r3, #0
 800f614:	d103      	bne.n	800f61e <f_open+0x336>
						res = FR_INT_ERR;
 800f616:	2302      	movs	r3, #2
 800f618:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f61c:	e015      	b.n	800f64a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f61e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f620:	0a5a      	lsrs	r2, r3, #9
 800f622:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f624:	441a      	add	r2, r3
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f62a:	693b      	ldr	r3, [r7, #16]
 800f62c:	7858      	ldrb	r0, [r3, #1]
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	6a1a      	ldr	r2, [r3, #32]
 800f638:	2301      	movs	r3, #1
 800f63a:	f7fd ffeb 	bl	800d614 <disk_read>
 800f63e:	4603      	mov	r3, r0
 800f640:	2b00      	cmp	r3, #0
 800f642:	d002      	beq.n	800f64a <f_open+0x362>
 800f644:	2301      	movs	r3, #1
 800f646:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f64a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d002      	beq.n	800f658 <f_open+0x370>
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	2200      	movs	r2, #0
 800f656:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f658:	693b      	ldr	r3, [r7, #16]
 800f65a:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800f65e:	4611      	mov	r1, r2
 800f660:	4618      	mov	r0, r3
 800f662:	f7fe f94b 	bl	800d8fc <unlock_fs>
 800f666:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800f66a:	4618      	mov	r0, r3
 800f66c:	3760      	adds	r7, #96	; 0x60
 800f66e:	46bd      	mov	sp, r7
 800f670:	bd80      	pop	{r7, pc}

0800f672 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f672:	b580      	push	{r7, lr}
 800f674:	b08c      	sub	sp, #48	; 0x30
 800f676:	af00      	add	r7, sp, #0
 800f678:	60f8      	str	r0, [r7, #12]
 800f67a:	60b9      	str	r1, [r7, #8]
 800f67c:	607a      	str	r2, [r7, #4]
 800f67e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800f680:	68bb      	ldr	r3, [r7, #8]
 800f682:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800f684:	683b      	ldr	r3, [r7, #0]
 800f686:	2200      	movs	r2, #0
 800f688:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	f107 0210 	add.w	r2, r7, #16
 800f690:	4611      	mov	r1, r2
 800f692:	4618      	mov	r0, r3
 800f694:	f7ff fd7c 	bl	800f190 <validate>
 800f698:	4603      	mov	r3, r0
 800f69a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f69e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d107      	bne.n	800f6b6 <f_write+0x44>
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	7d5b      	ldrb	r3, [r3, #21]
 800f6aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800f6ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d009      	beq.n	800f6ca <f_write+0x58>
 800f6b6:	693b      	ldr	r3, [r7, #16]
 800f6b8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800f6bc:	4611      	mov	r1, r2
 800f6be:	4618      	mov	r0, r3
 800f6c0:	f7fe f91c 	bl	800d8fc <unlock_fs>
 800f6c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f6c8:	e173      	b.n	800f9b2 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	7d1b      	ldrb	r3, [r3, #20]
 800f6ce:	f003 0302 	and.w	r3, r3, #2
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d106      	bne.n	800f6e4 <f_write+0x72>
 800f6d6:	693b      	ldr	r3, [r7, #16]
 800f6d8:	2107      	movs	r1, #7
 800f6da:	4618      	mov	r0, r3
 800f6dc:	f7fe f90e 	bl	800d8fc <unlock_fs>
 800f6e0:	2307      	movs	r3, #7
 800f6e2:	e166      	b.n	800f9b2 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	699a      	ldr	r2, [r3, #24]
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	441a      	add	r2, r3
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	699b      	ldr	r3, [r3, #24]
 800f6f0:	429a      	cmp	r2, r3
 800f6f2:	f080 814b 	bcs.w	800f98c <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	699b      	ldr	r3, [r3, #24]
 800f6fa:	43db      	mvns	r3, r3
 800f6fc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800f6fe:	e145      	b.n	800f98c <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	699b      	ldr	r3, [r3, #24]
 800f704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f708:	2b00      	cmp	r3, #0
 800f70a:	f040 8101 	bne.w	800f910 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	699b      	ldr	r3, [r3, #24]
 800f712:	0a5b      	lsrs	r3, r3, #9
 800f714:	693a      	ldr	r2, [r7, #16]
 800f716:	8952      	ldrh	r2, [r2, #10]
 800f718:	3a01      	subs	r2, #1
 800f71a:	4013      	ands	r3, r2
 800f71c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800f71e:	69bb      	ldr	r3, [r7, #24]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d14d      	bne.n	800f7c0 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	699b      	ldr	r3, [r3, #24]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d10c      	bne.n	800f746 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	689b      	ldr	r3, [r3, #8]
 800f730:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800f732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f734:	2b00      	cmp	r3, #0
 800f736:	d11a      	bne.n	800f76e <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	2100      	movs	r1, #0
 800f73c:	4618      	mov	r0, r3
 800f73e:	f7fe fd5d 	bl	800e1fc <create_chain>
 800f742:	62b8      	str	r0, [r7, #40]	; 0x28
 800f744:	e013      	b.n	800f76e <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d007      	beq.n	800f75e <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	699b      	ldr	r3, [r3, #24]
 800f752:	4619      	mov	r1, r3
 800f754:	68f8      	ldr	r0, [r7, #12]
 800f756:	f7fe fde9 	bl	800e32c <clmt_clust>
 800f75a:	62b8      	str	r0, [r7, #40]	; 0x28
 800f75c:	e007      	b.n	800f76e <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f75e:	68fa      	ldr	r2, [r7, #12]
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	69db      	ldr	r3, [r3, #28]
 800f764:	4619      	mov	r1, r3
 800f766:	4610      	mov	r0, r2
 800f768:	f7fe fd48 	bl	800e1fc <create_chain>
 800f76c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f770:	2b00      	cmp	r3, #0
 800f772:	f000 8110 	beq.w	800f996 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f778:	2b01      	cmp	r3, #1
 800f77a:	d109      	bne.n	800f790 <f_write+0x11e>
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	2202      	movs	r2, #2
 800f780:	755a      	strb	r2, [r3, #21]
 800f782:	693b      	ldr	r3, [r7, #16]
 800f784:	2102      	movs	r1, #2
 800f786:	4618      	mov	r0, r3
 800f788:	f7fe f8b8 	bl	800d8fc <unlock_fs>
 800f78c:	2302      	movs	r3, #2
 800f78e:	e110      	b.n	800f9b2 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f792:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f796:	d109      	bne.n	800f7ac <f_write+0x13a>
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	2201      	movs	r2, #1
 800f79c:	755a      	strb	r2, [r3, #21]
 800f79e:	693b      	ldr	r3, [r7, #16]
 800f7a0:	2101      	movs	r1, #1
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	f7fe f8aa 	bl	800d8fc <unlock_fs>
 800f7a8:	2301      	movs	r3, #1
 800f7aa:	e102      	b.n	800f9b2 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f7b0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	689b      	ldr	r3, [r3, #8]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d102      	bne.n	800f7c0 <f_write+0x14e>
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f7be:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	7d1b      	ldrb	r3, [r3, #20]
 800f7c4:	b25b      	sxtb	r3, r3
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	da1d      	bge.n	800f806 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f7ca:	693b      	ldr	r3, [r7, #16]
 800f7cc:	7858      	ldrb	r0, [r3, #1]
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	6a1a      	ldr	r2, [r3, #32]
 800f7d8:	2301      	movs	r3, #1
 800f7da:	f7fd ff3b 	bl	800d654 <disk_write>
 800f7de:	4603      	mov	r3, r0
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d009      	beq.n	800f7f8 <f_write+0x186>
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	2201      	movs	r2, #1
 800f7e8:	755a      	strb	r2, [r3, #21]
 800f7ea:	693b      	ldr	r3, [r7, #16]
 800f7ec:	2101      	movs	r1, #1
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	f7fe f884 	bl	800d8fc <unlock_fs>
 800f7f4:	2301      	movs	r3, #1
 800f7f6:	e0dc      	b.n	800f9b2 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	7d1b      	ldrb	r3, [r3, #20]
 800f7fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f800:	b2da      	uxtb	r2, r3
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f806:	693a      	ldr	r2, [r7, #16]
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	69db      	ldr	r3, [r3, #28]
 800f80c:	4619      	mov	r1, r3
 800f80e:	4610      	mov	r0, r2
 800f810:	f7fe fadc 	bl	800ddcc <clust2sect>
 800f814:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f816:	697b      	ldr	r3, [r7, #20]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d109      	bne.n	800f830 <f_write+0x1be>
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	2202      	movs	r2, #2
 800f820:	755a      	strb	r2, [r3, #21]
 800f822:	693b      	ldr	r3, [r7, #16]
 800f824:	2102      	movs	r1, #2
 800f826:	4618      	mov	r0, r3
 800f828:	f7fe f868 	bl	800d8fc <unlock_fs>
 800f82c:	2302      	movs	r3, #2
 800f82e:	e0c0      	b.n	800f9b2 <f_write+0x340>
			sect += csect;
 800f830:	697a      	ldr	r2, [r7, #20]
 800f832:	69bb      	ldr	r3, [r7, #24]
 800f834:	4413      	add	r3, r2
 800f836:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	0a5b      	lsrs	r3, r3, #9
 800f83c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f83e:	6a3b      	ldr	r3, [r7, #32]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d041      	beq.n	800f8c8 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f844:	69ba      	ldr	r2, [r7, #24]
 800f846:	6a3b      	ldr	r3, [r7, #32]
 800f848:	4413      	add	r3, r2
 800f84a:	693a      	ldr	r2, [r7, #16]
 800f84c:	8952      	ldrh	r2, [r2, #10]
 800f84e:	4293      	cmp	r3, r2
 800f850:	d905      	bls.n	800f85e <f_write+0x1ec>
					cc = fs->csize - csect;
 800f852:	693b      	ldr	r3, [r7, #16]
 800f854:	895b      	ldrh	r3, [r3, #10]
 800f856:	461a      	mov	r2, r3
 800f858:	69bb      	ldr	r3, [r7, #24]
 800f85a:	1ad3      	subs	r3, r2, r3
 800f85c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f85e:	693b      	ldr	r3, [r7, #16]
 800f860:	7858      	ldrb	r0, [r3, #1]
 800f862:	6a3b      	ldr	r3, [r7, #32]
 800f864:	697a      	ldr	r2, [r7, #20]
 800f866:	69f9      	ldr	r1, [r7, #28]
 800f868:	f7fd fef4 	bl	800d654 <disk_write>
 800f86c:	4603      	mov	r3, r0
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d009      	beq.n	800f886 <f_write+0x214>
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	2201      	movs	r2, #1
 800f876:	755a      	strb	r2, [r3, #21]
 800f878:	693b      	ldr	r3, [r7, #16]
 800f87a:	2101      	movs	r1, #1
 800f87c:	4618      	mov	r0, r3
 800f87e:	f7fe f83d 	bl	800d8fc <unlock_fs>
 800f882:	2301      	movs	r3, #1
 800f884:	e095      	b.n	800f9b2 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	6a1a      	ldr	r2, [r3, #32]
 800f88a:	697b      	ldr	r3, [r7, #20]
 800f88c:	1ad3      	subs	r3, r2, r3
 800f88e:	6a3a      	ldr	r2, [r7, #32]
 800f890:	429a      	cmp	r2, r3
 800f892:	d915      	bls.n	800f8c0 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	6a1a      	ldr	r2, [r3, #32]
 800f89e:	697b      	ldr	r3, [r7, #20]
 800f8a0:	1ad3      	subs	r3, r2, r3
 800f8a2:	025b      	lsls	r3, r3, #9
 800f8a4:	69fa      	ldr	r2, [r7, #28]
 800f8a6:	4413      	add	r3, r2
 800f8a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f8ac:	4619      	mov	r1, r3
 800f8ae:	f7fd ff91 	bl	800d7d4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	7d1b      	ldrb	r3, [r3, #20]
 800f8b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f8ba:	b2da      	uxtb	r2, r3
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f8c0:	6a3b      	ldr	r3, [r7, #32]
 800f8c2:	025b      	lsls	r3, r3, #9
 800f8c4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800f8c6:	e044      	b.n	800f952 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	6a1b      	ldr	r3, [r3, #32]
 800f8cc:	697a      	ldr	r2, [r7, #20]
 800f8ce:	429a      	cmp	r2, r3
 800f8d0:	d01b      	beq.n	800f90a <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	699a      	ldr	r2, [r3, #24]
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f8da:	429a      	cmp	r2, r3
 800f8dc:	d215      	bcs.n	800f90a <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800f8de:	693b      	ldr	r3, [r7, #16]
 800f8e0:	7858      	ldrb	r0, [r3, #1]
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f8e8:	2301      	movs	r3, #1
 800f8ea:	697a      	ldr	r2, [r7, #20]
 800f8ec:	f7fd fe92 	bl	800d614 <disk_read>
 800f8f0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d009      	beq.n	800f90a <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	2201      	movs	r2, #1
 800f8fa:	755a      	strb	r2, [r3, #21]
 800f8fc:	693b      	ldr	r3, [r7, #16]
 800f8fe:	2101      	movs	r1, #1
 800f900:	4618      	mov	r0, r3
 800f902:	f7fd fffb 	bl	800d8fc <unlock_fs>
 800f906:	2301      	movs	r3, #1
 800f908:	e053      	b.n	800f9b2 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	697a      	ldr	r2, [r7, #20]
 800f90e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	699b      	ldr	r3, [r3, #24]
 800f914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f918:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800f91c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800f91e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	429a      	cmp	r2, r3
 800f924:	d901      	bls.n	800f92a <f_write+0x2b8>
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	699b      	ldr	r3, [r3, #24]
 800f934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f938:	4413      	add	r3, r2
 800f93a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f93c:	69f9      	ldr	r1, [r7, #28]
 800f93e:	4618      	mov	r0, r3
 800f940:	f7fd ff48 	bl	800d7d4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	7d1b      	ldrb	r3, [r3, #20]
 800f948:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f94c:	b2da      	uxtb	r2, r3
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f952:	69fa      	ldr	r2, [r7, #28]
 800f954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f956:	4413      	add	r3, r2
 800f958:	61fb      	str	r3, [r7, #28]
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	699a      	ldr	r2, [r3, #24]
 800f95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f960:	441a      	add	r2, r3
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	619a      	str	r2, [r3, #24]
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	68da      	ldr	r2, [r3, #12]
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	699b      	ldr	r3, [r3, #24]
 800f96e:	429a      	cmp	r2, r3
 800f970:	bf38      	it	cc
 800f972:	461a      	movcc	r2, r3
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	60da      	str	r2, [r3, #12]
 800f978:	683b      	ldr	r3, [r7, #0]
 800f97a:	681a      	ldr	r2, [r3, #0]
 800f97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f97e:	441a      	add	r2, r3
 800f980:	683b      	ldr	r3, [r7, #0]
 800f982:	601a      	str	r2, [r3, #0]
 800f984:	687a      	ldr	r2, [r7, #4]
 800f986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f988:	1ad3      	subs	r3, r2, r3
 800f98a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	f47f aeb6 	bne.w	800f700 <f_write+0x8e>
 800f994:	e000      	b.n	800f998 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f996:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	7d1b      	ldrb	r3, [r3, #20]
 800f99c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f9a0:	b2da      	uxtb	r2, r3
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800f9a6:	693b      	ldr	r3, [r7, #16]
 800f9a8:	2100      	movs	r1, #0
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	f7fd ffa6 	bl	800d8fc <unlock_fs>
 800f9b0:	2300      	movs	r3, #0
}
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	3730      	adds	r7, #48	; 0x30
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	bd80      	pop	{r7, pc}

0800f9ba <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f9ba:	b580      	push	{r7, lr}
 800f9bc:	b086      	sub	sp, #24
 800f9be:	af00      	add	r7, sp, #0
 800f9c0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	f107 0208 	add.w	r2, r7, #8
 800f9c8:	4611      	mov	r1, r2
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	f7ff fbe0 	bl	800f190 <validate>
 800f9d0:	4603      	mov	r3, r0
 800f9d2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f9d4:	7dfb      	ldrb	r3, [r7, #23]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d16d      	bne.n	800fab6 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	7d1b      	ldrb	r3, [r3, #20]
 800f9de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d067      	beq.n	800fab6 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	7d1b      	ldrb	r3, [r3, #20]
 800f9ea:	b25b      	sxtb	r3, r3
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	da1a      	bge.n	800fa26 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f9f0:	68bb      	ldr	r3, [r7, #8]
 800f9f2:	7858      	ldrb	r0, [r3, #1]
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	6a1a      	ldr	r2, [r3, #32]
 800f9fe:	2301      	movs	r3, #1
 800fa00:	f7fd fe28 	bl	800d654 <disk_write>
 800fa04:	4603      	mov	r3, r0
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d006      	beq.n	800fa18 <f_sync+0x5e>
 800fa0a:	68bb      	ldr	r3, [r7, #8]
 800fa0c:	2101      	movs	r1, #1
 800fa0e:	4618      	mov	r0, r3
 800fa10:	f7fd ff74 	bl	800d8fc <unlock_fs>
 800fa14:	2301      	movs	r3, #1
 800fa16:	e055      	b.n	800fac4 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	7d1b      	ldrb	r3, [r3, #20]
 800fa1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fa20:	b2da      	uxtb	r2, r3
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800fa26:	f7fc fccd 	bl	800c3c4 <get_fattime>
 800fa2a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800fa2c:	68ba      	ldr	r2, [r7, #8]
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa32:	4619      	mov	r1, r3
 800fa34:	4610      	mov	r0, r2
 800fa36:	f7fe f92d 	bl	800dc94 <move_window>
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800fa3e:	7dfb      	ldrb	r3, [r7, #23]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d138      	bne.n	800fab6 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa48:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	330b      	adds	r3, #11
 800fa4e:	781a      	ldrb	r2, [r3, #0]
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	330b      	adds	r3, #11
 800fa54:	f042 0220 	orr.w	r2, r2, #32
 800fa58:	b2d2      	uxtb	r2, r2
 800fa5a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	6818      	ldr	r0, [r3, #0]
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	689b      	ldr	r3, [r3, #8]
 800fa64:	461a      	mov	r2, r3
 800fa66:	68f9      	ldr	r1, [r7, #12]
 800fa68:	f7fe fe3a 	bl	800e6e0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	f103 021c 	add.w	r2, r3, #28
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	68db      	ldr	r3, [r3, #12]
 800fa76:	4619      	mov	r1, r3
 800fa78:	4610      	mov	r0, r2
 800fa7a:	f7fd fe7f 	bl	800d77c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	3316      	adds	r3, #22
 800fa82:	6939      	ldr	r1, [r7, #16]
 800fa84:	4618      	mov	r0, r3
 800fa86:	f7fd fe79 	bl	800d77c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	3312      	adds	r3, #18
 800fa8e:	2100      	movs	r1, #0
 800fa90:	4618      	mov	r0, r3
 800fa92:	f7fd fe58 	bl	800d746 <st_word>
					fs->wflag = 1;
 800fa96:	68bb      	ldr	r3, [r7, #8]
 800fa98:	2201      	movs	r2, #1
 800fa9a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800fa9c:	68bb      	ldr	r3, [r7, #8]
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f7fe f926 	bl	800dcf0 <sync_fs>
 800faa4:	4603      	mov	r3, r0
 800faa6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	7d1b      	ldrb	r3, [r3, #20]
 800faac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fab0:	b2da      	uxtb	r2, r3
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800fab6:	68bb      	ldr	r3, [r7, #8]
 800fab8:	7dfa      	ldrb	r2, [r7, #23]
 800faba:	4611      	mov	r1, r2
 800fabc:	4618      	mov	r0, r3
 800fabe:	f7fd ff1d 	bl	800d8fc <unlock_fs>
 800fac2:	7dfb      	ldrb	r3, [r7, #23]
}
 800fac4:	4618      	mov	r0, r3
 800fac6:	3718      	adds	r7, #24
 800fac8:	46bd      	mov	sp, r7
 800faca:	bd80      	pop	{r7, pc}

0800facc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800facc:	b580      	push	{r7, lr}
 800face:	b084      	sub	sp, #16
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800fad4:	6878      	ldr	r0, [r7, #4]
 800fad6:	f7ff ff70 	bl	800f9ba <f_sync>
 800fada:	4603      	mov	r3, r0
 800fadc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800fade:	7bfb      	ldrb	r3, [r7, #15]
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d11d      	bne.n	800fb20 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	f107 0208 	add.w	r2, r7, #8
 800faea:	4611      	mov	r1, r2
 800faec:	4618      	mov	r0, r3
 800faee:	f7ff fb4f 	bl	800f190 <validate>
 800faf2:	4603      	mov	r3, r0
 800faf4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800faf6:	7bfb      	ldrb	r3, [r7, #15]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d111      	bne.n	800fb20 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	691b      	ldr	r3, [r3, #16]
 800fb00:	4618      	mov	r0, r3
 800fb02:	f7fe f823 	bl	800db4c <dec_lock>
 800fb06:	4603      	mov	r3, r0
 800fb08:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800fb0a:	7bfb      	ldrb	r3, [r7, #15]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d102      	bne.n	800fb16 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	2200      	movs	r2, #0
 800fb14:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800fb16:	68bb      	ldr	r3, [r7, #8]
 800fb18:	2100      	movs	r1, #0
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	f7fd feee 	bl	800d8fc <unlock_fs>
#endif
		}
	}
	return res;
 800fb20:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb22:	4618      	mov	r0, r3
 800fb24:	3710      	adds	r7, #16
 800fb26:	46bd      	mov	sp, r7
 800fb28:	bd80      	pop	{r7, pc}

0800fb2a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800fb2a:	b580      	push	{r7, lr}
 800fb2c:	b090      	sub	sp, #64	; 0x40
 800fb2e:	af00      	add	r7, sp, #0
 800fb30:	6078      	str	r0, [r7, #4]
 800fb32:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	f107 0208 	add.w	r2, r7, #8
 800fb3a:	4611      	mov	r1, r2
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	f7ff fb27 	bl	800f190 <validate>
 800fb42:	4603      	mov	r3, r0
 800fb44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800fb48:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d103      	bne.n	800fb58 <f_lseek+0x2e>
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	7d5b      	ldrb	r3, [r3, #21]
 800fb54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800fb58:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d009      	beq.n	800fb74 <f_lseek+0x4a>
 800fb60:	68bb      	ldr	r3, [r7, #8]
 800fb62:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800fb66:	4611      	mov	r1, r2
 800fb68:	4618      	mov	r0, r3
 800fb6a:	f7fd fec7 	bl	800d8fc <unlock_fs>
 800fb6e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fb72:	e229      	b.n	800ffc8 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	f000 80ea 	beq.w	800fd52 <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800fb7e:	683b      	ldr	r3, [r7, #0]
 800fb80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb84:	d164      	bne.n	800fc50 <f_lseek+0x126>
			tbl = fp->cltbl;
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb8a:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800fb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb8e:	1d1a      	adds	r2, r3, #4
 800fb90:	627a      	str	r2, [r7, #36]	; 0x24
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	617b      	str	r3, [r7, #20]
 800fb96:	2302      	movs	r3, #2
 800fb98:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	689b      	ldr	r3, [r3, #8]
 800fb9e:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800fba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d044      	beq.n	800fc30 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800fba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fba8:	613b      	str	r3, [r7, #16]
 800fbaa:	2300      	movs	r3, #0
 800fbac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fbae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbb0:	3302      	adds	r3, #2
 800fbb2:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800fbb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbb6:	60fb      	str	r3, [r7, #12]
 800fbb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbba:	3301      	adds	r3, #1
 800fbbc:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fbc2:	4618      	mov	r0, r3
 800fbc4:	f7fe f921 	bl	800de0a <get_fat>
 800fbc8:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800fbca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbcc:	2b01      	cmp	r3, #1
 800fbce:	d809      	bhi.n	800fbe4 <f_lseek+0xba>
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	2202      	movs	r2, #2
 800fbd4:	755a      	strb	r2, [r3, #21]
 800fbd6:	68bb      	ldr	r3, [r7, #8]
 800fbd8:	2102      	movs	r1, #2
 800fbda:	4618      	mov	r0, r3
 800fbdc:	f7fd fe8e 	bl	800d8fc <unlock_fs>
 800fbe0:	2302      	movs	r3, #2
 800fbe2:	e1f1      	b.n	800ffc8 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fbe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbea:	d109      	bne.n	800fc00 <f_lseek+0xd6>
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	2201      	movs	r2, #1
 800fbf0:	755a      	strb	r2, [r3, #21]
 800fbf2:	68bb      	ldr	r3, [r7, #8]
 800fbf4:	2101      	movs	r1, #1
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	f7fd fe80 	bl	800d8fc <unlock_fs>
 800fbfc:	2301      	movs	r3, #1
 800fbfe:	e1e3      	b.n	800ffc8 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	3301      	adds	r3, #1
 800fc04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc06:	429a      	cmp	r2, r3
 800fc08:	d0d4      	beq.n	800fbb4 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800fc0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fc0c:	697b      	ldr	r3, [r7, #20]
 800fc0e:	429a      	cmp	r2, r3
 800fc10:	d809      	bhi.n	800fc26 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 800fc12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc14:	1d1a      	adds	r2, r3, #4
 800fc16:	627a      	str	r2, [r7, #36]	; 0x24
 800fc18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc1a:	601a      	str	r2, [r3, #0]
 800fc1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc1e:	1d1a      	adds	r2, r3, #4
 800fc20:	627a      	str	r2, [r7, #36]	; 0x24
 800fc22:	693a      	ldr	r2, [r7, #16]
 800fc24:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800fc26:	68bb      	ldr	r3, [r7, #8]
 800fc28:	699b      	ldr	r3, [r3, #24]
 800fc2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc2c:	429a      	cmp	r2, r3
 800fc2e:	d3ba      	bcc.n	800fba6 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fc36:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800fc38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fc3a:	697b      	ldr	r3, [r7, #20]
 800fc3c:	429a      	cmp	r2, r3
 800fc3e:	d803      	bhi.n	800fc48 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 800fc40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc42:	2200      	movs	r2, #0
 800fc44:	601a      	str	r2, [r3, #0]
 800fc46:	e1b6      	b.n	800ffb6 <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800fc48:	2311      	movs	r3, #17
 800fc4a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800fc4e:	e1b2      	b.n	800ffb6 <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	68db      	ldr	r3, [r3, #12]
 800fc54:	683a      	ldr	r2, [r7, #0]
 800fc56:	429a      	cmp	r2, r3
 800fc58:	d902      	bls.n	800fc60 <f_lseek+0x136>
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	68db      	ldr	r3, [r3, #12]
 800fc5e:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	683a      	ldr	r2, [r7, #0]
 800fc64:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800fc66:	683b      	ldr	r3, [r7, #0]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	f000 81a4 	beq.w	800ffb6 <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800fc6e:	683b      	ldr	r3, [r7, #0]
 800fc70:	3b01      	subs	r3, #1
 800fc72:	4619      	mov	r1, r3
 800fc74:	6878      	ldr	r0, [r7, #4]
 800fc76:	f7fe fb59 	bl	800e32c <clmt_clust>
 800fc7a:	4602      	mov	r2, r0
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800fc80:	68ba      	ldr	r2, [r7, #8]
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	69db      	ldr	r3, [r3, #28]
 800fc86:	4619      	mov	r1, r3
 800fc88:	4610      	mov	r0, r2
 800fc8a:	f7fe f89f 	bl	800ddcc <clust2sect>
 800fc8e:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800fc90:	69bb      	ldr	r3, [r7, #24]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d109      	bne.n	800fcaa <f_lseek+0x180>
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	2202      	movs	r2, #2
 800fc9a:	755a      	strb	r2, [r3, #21]
 800fc9c:	68bb      	ldr	r3, [r7, #8]
 800fc9e:	2102      	movs	r1, #2
 800fca0:	4618      	mov	r0, r3
 800fca2:	f7fd fe2b 	bl	800d8fc <unlock_fs>
 800fca6:	2302      	movs	r3, #2
 800fca8:	e18e      	b.n	800ffc8 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800fcaa:	683b      	ldr	r3, [r7, #0]
 800fcac:	3b01      	subs	r3, #1
 800fcae:	0a5b      	lsrs	r3, r3, #9
 800fcb0:	68ba      	ldr	r2, [r7, #8]
 800fcb2:	8952      	ldrh	r2, [r2, #10]
 800fcb4:	3a01      	subs	r2, #1
 800fcb6:	4013      	ands	r3, r2
 800fcb8:	69ba      	ldr	r2, [r7, #24]
 800fcba:	4413      	add	r3, r2
 800fcbc:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	699b      	ldr	r3, [r3, #24]
 800fcc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	f000 8175 	beq.w	800ffb6 <f_lseek+0x48c>
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	6a1b      	ldr	r3, [r3, #32]
 800fcd0:	69ba      	ldr	r2, [r7, #24]
 800fcd2:	429a      	cmp	r2, r3
 800fcd4:	f000 816f 	beq.w	800ffb6 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	7d1b      	ldrb	r3, [r3, #20]
 800fcdc:	b25b      	sxtb	r3, r3
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	da1d      	bge.n	800fd1e <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fce2:	68bb      	ldr	r3, [r7, #8]
 800fce4:	7858      	ldrb	r0, [r3, #1]
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	6a1a      	ldr	r2, [r3, #32]
 800fcf0:	2301      	movs	r3, #1
 800fcf2:	f7fd fcaf 	bl	800d654 <disk_write>
 800fcf6:	4603      	mov	r3, r0
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d009      	beq.n	800fd10 <f_lseek+0x1e6>
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	2201      	movs	r2, #1
 800fd00:	755a      	strb	r2, [r3, #21]
 800fd02:	68bb      	ldr	r3, [r7, #8]
 800fd04:	2101      	movs	r1, #1
 800fd06:	4618      	mov	r0, r3
 800fd08:	f7fd fdf8 	bl	800d8fc <unlock_fs>
 800fd0c:	2301      	movs	r3, #1
 800fd0e:	e15b      	b.n	800ffc8 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	7d1b      	ldrb	r3, [r3, #20]
 800fd14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fd18:	b2da      	uxtb	r2, r3
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800fd1e:	68bb      	ldr	r3, [r7, #8]
 800fd20:	7858      	ldrb	r0, [r3, #1]
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fd28:	2301      	movs	r3, #1
 800fd2a:	69ba      	ldr	r2, [r7, #24]
 800fd2c:	f7fd fc72 	bl	800d614 <disk_read>
 800fd30:	4603      	mov	r3, r0
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d009      	beq.n	800fd4a <f_lseek+0x220>
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	2201      	movs	r2, #1
 800fd3a:	755a      	strb	r2, [r3, #21]
 800fd3c:	68bb      	ldr	r3, [r7, #8]
 800fd3e:	2101      	movs	r1, #1
 800fd40:	4618      	mov	r0, r3
 800fd42:	f7fd fddb 	bl	800d8fc <unlock_fs>
 800fd46:	2301      	movs	r3, #1
 800fd48:	e13e      	b.n	800ffc8 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	69ba      	ldr	r2, [r7, #24]
 800fd4e:	621a      	str	r2, [r3, #32]
 800fd50:	e131      	b.n	800ffb6 <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	68db      	ldr	r3, [r3, #12]
 800fd56:	683a      	ldr	r2, [r7, #0]
 800fd58:	429a      	cmp	r2, r3
 800fd5a:	d908      	bls.n	800fd6e <f_lseek+0x244>
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	7d1b      	ldrb	r3, [r3, #20]
 800fd60:	f003 0302 	and.w	r3, r3, #2
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d102      	bne.n	800fd6e <f_lseek+0x244>
			ofs = fp->obj.objsize;
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	68db      	ldr	r3, [r3, #12]
 800fd6c:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	699b      	ldr	r3, [r3, #24]
 800fd72:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800fd74:	2300      	movs	r3, #0
 800fd76:	637b      	str	r3, [r7, #52]	; 0x34
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fd7c:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800fd7e:	683b      	ldr	r3, [r7, #0]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	f000 80c0 	beq.w	800ff06 <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800fd86:	68bb      	ldr	r3, [r7, #8]
 800fd88:	895b      	ldrh	r3, [r3, #10]
 800fd8a:	025b      	lsls	r3, r3, #9
 800fd8c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800fd8e:	6a3b      	ldr	r3, [r7, #32]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d01b      	beq.n	800fdcc <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800fd94:	683b      	ldr	r3, [r7, #0]
 800fd96:	1e5a      	subs	r2, r3, #1
 800fd98:	69fb      	ldr	r3, [r7, #28]
 800fd9a:	fbb2 f2f3 	udiv	r2, r2, r3
 800fd9e:	6a3b      	ldr	r3, [r7, #32]
 800fda0:	1e59      	subs	r1, r3, #1
 800fda2:	69fb      	ldr	r3, [r7, #28]
 800fda4:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800fda8:	429a      	cmp	r2, r3
 800fdaa:	d30f      	bcc.n	800fdcc <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800fdac:	6a3b      	ldr	r3, [r7, #32]
 800fdae:	1e5a      	subs	r2, r3, #1
 800fdb0:	69fb      	ldr	r3, [r7, #28]
 800fdb2:	425b      	negs	r3, r3
 800fdb4:	401a      	ands	r2, r3
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	699b      	ldr	r3, [r3, #24]
 800fdbe:	683a      	ldr	r2, [r7, #0]
 800fdc0:	1ad3      	subs	r3, r2, r3
 800fdc2:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	69db      	ldr	r3, [r3, #28]
 800fdc8:	63bb      	str	r3, [r7, #56]	; 0x38
 800fdca:	e02c      	b.n	800fe26 <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	689b      	ldr	r3, [r3, #8]
 800fdd0:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800fdd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d123      	bne.n	800fe20 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	2100      	movs	r1, #0
 800fddc:	4618      	mov	r0, r3
 800fdde:	f7fe fa0d 	bl	800e1fc <create_chain>
 800fde2:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800fde4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fde6:	2b01      	cmp	r3, #1
 800fde8:	d109      	bne.n	800fdfe <f_lseek+0x2d4>
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	2202      	movs	r2, #2
 800fdee:	755a      	strb	r2, [r3, #21]
 800fdf0:	68bb      	ldr	r3, [r7, #8]
 800fdf2:	2102      	movs	r1, #2
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	f7fd fd81 	bl	800d8fc <unlock_fs>
 800fdfa:	2302      	movs	r3, #2
 800fdfc:	e0e4      	b.n	800ffc8 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fdfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe04:	d109      	bne.n	800fe1a <f_lseek+0x2f0>
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	2201      	movs	r2, #1
 800fe0a:	755a      	strb	r2, [r3, #21]
 800fe0c:	68bb      	ldr	r3, [r7, #8]
 800fe0e:	2101      	movs	r1, #1
 800fe10:	4618      	mov	r0, r3
 800fe12:	f7fd fd73 	bl	800d8fc <unlock_fs>
 800fe16:	2301      	movs	r3, #1
 800fe18:	e0d6      	b.n	800ffc8 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fe1e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fe24:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800fe26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d06c      	beq.n	800ff06 <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 800fe2c:	e044      	b.n	800feb8 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 800fe2e:	683a      	ldr	r2, [r7, #0]
 800fe30:	69fb      	ldr	r3, [r7, #28]
 800fe32:	1ad3      	subs	r3, r2, r3
 800fe34:	603b      	str	r3, [r7, #0]
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	699a      	ldr	r2, [r3, #24]
 800fe3a:	69fb      	ldr	r3, [r7, #28]
 800fe3c:	441a      	add	r2, r3
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	7d1b      	ldrb	r3, [r3, #20]
 800fe46:	f003 0302 	and.w	r3, r3, #2
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d00b      	beq.n	800fe66 <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fe52:	4618      	mov	r0, r3
 800fe54:	f7fe f9d2 	bl	800e1fc <create_chain>
 800fe58:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800fe5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d108      	bne.n	800fe72 <f_lseek+0x348>
							ofs = 0; break;
 800fe60:	2300      	movs	r3, #0
 800fe62:	603b      	str	r3, [r7, #0]
 800fe64:	e02c      	b.n	800fec0 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	f7fd ffcd 	bl	800de0a <get_fat>
 800fe70:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fe72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe78:	d109      	bne.n	800fe8e <f_lseek+0x364>
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	2201      	movs	r2, #1
 800fe7e:	755a      	strb	r2, [r3, #21]
 800fe80:	68bb      	ldr	r3, [r7, #8]
 800fe82:	2101      	movs	r1, #1
 800fe84:	4618      	mov	r0, r3
 800fe86:	f7fd fd39 	bl	800d8fc <unlock_fs>
 800fe8a:	2301      	movs	r3, #1
 800fe8c:	e09c      	b.n	800ffc8 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800fe8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe90:	2b01      	cmp	r3, #1
 800fe92:	d904      	bls.n	800fe9e <f_lseek+0x374>
 800fe94:	68bb      	ldr	r3, [r7, #8]
 800fe96:	699b      	ldr	r3, [r3, #24]
 800fe98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fe9a:	429a      	cmp	r2, r3
 800fe9c:	d309      	bcc.n	800feb2 <f_lseek+0x388>
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	2202      	movs	r2, #2
 800fea2:	755a      	strb	r2, [r3, #21]
 800fea4:	68bb      	ldr	r3, [r7, #8]
 800fea6:	2102      	movs	r1, #2
 800fea8:	4618      	mov	r0, r3
 800feaa:	f7fd fd27 	bl	800d8fc <unlock_fs>
 800feae:	2302      	movs	r3, #2
 800feb0:	e08a      	b.n	800ffc8 <f_lseek+0x49e>
					fp->clust = clst;
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800feb6:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800feb8:	683a      	ldr	r2, [r7, #0]
 800feba:	69fb      	ldr	r3, [r7, #28]
 800febc:	429a      	cmp	r2, r3
 800febe:	d8b6      	bhi.n	800fe2e <f_lseek+0x304>
				}
				fp->fptr += ofs;
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	699a      	ldr	r2, [r3, #24]
 800fec4:	683b      	ldr	r3, [r7, #0]
 800fec6:	441a      	add	r2, r3
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800fecc:	683b      	ldr	r3, [r7, #0]
 800fece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d017      	beq.n	800ff06 <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800fed6:	68bb      	ldr	r3, [r7, #8]
 800fed8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800feda:	4618      	mov	r0, r3
 800fedc:	f7fd ff76 	bl	800ddcc <clust2sect>
 800fee0:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800fee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d109      	bne.n	800fefc <f_lseek+0x3d2>
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	2202      	movs	r2, #2
 800feec:	755a      	strb	r2, [r3, #21]
 800feee:	68bb      	ldr	r3, [r7, #8]
 800fef0:	2102      	movs	r1, #2
 800fef2:	4618      	mov	r0, r3
 800fef4:	f7fd fd02 	bl	800d8fc <unlock_fs>
 800fef8:	2302      	movs	r3, #2
 800fefa:	e065      	b.n	800ffc8 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 800fefc:	683b      	ldr	r3, [r7, #0]
 800fefe:	0a5b      	lsrs	r3, r3, #9
 800ff00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff02:	4413      	add	r3, r2
 800ff04:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	699a      	ldr	r2, [r3, #24]
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	68db      	ldr	r3, [r3, #12]
 800ff0e:	429a      	cmp	r2, r3
 800ff10:	d90a      	bls.n	800ff28 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	699a      	ldr	r2, [r3, #24]
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	7d1b      	ldrb	r3, [r3, #20]
 800ff1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff22:	b2da      	uxtb	r2, r3
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	699b      	ldr	r3, [r3, #24]
 800ff2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d040      	beq.n	800ffb6 <f_lseek+0x48c>
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	6a1b      	ldr	r3, [r3, #32]
 800ff38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff3a:	429a      	cmp	r2, r3
 800ff3c:	d03b      	beq.n	800ffb6 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	7d1b      	ldrb	r3, [r3, #20]
 800ff42:	b25b      	sxtb	r3, r3
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	da1d      	bge.n	800ff84 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ff48:	68bb      	ldr	r3, [r7, #8]
 800ff4a:	7858      	ldrb	r0, [r3, #1]
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	6a1a      	ldr	r2, [r3, #32]
 800ff56:	2301      	movs	r3, #1
 800ff58:	f7fd fb7c 	bl	800d654 <disk_write>
 800ff5c:	4603      	mov	r3, r0
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d009      	beq.n	800ff76 <f_lseek+0x44c>
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	2201      	movs	r2, #1
 800ff66:	755a      	strb	r2, [r3, #21]
 800ff68:	68bb      	ldr	r3, [r7, #8]
 800ff6a:	2101      	movs	r1, #1
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	f7fd fcc5 	bl	800d8fc <unlock_fs>
 800ff72:	2301      	movs	r3, #1
 800ff74:	e028      	b.n	800ffc8 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	7d1b      	ldrb	r3, [r3, #20]
 800ff7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ff7e:	b2da      	uxtb	r2, r3
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ff84:	68bb      	ldr	r3, [r7, #8]
 800ff86:	7858      	ldrb	r0, [r3, #1]
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ff8e:	2301      	movs	r3, #1
 800ff90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff92:	f7fd fb3f 	bl	800d614 <disk_read>
 800ff96:	4603      	mov	r3, r0
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d009      	beq.n	800ffb0 <f_lseek+0x486>
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	2201      	movs	r2, #1
 800ffa0:	755a      	strb	r2, [r3, #21]
 800ffa2:	68bb      	ldr	r3, [r7, #8]
 800ffa4:	2101      	movs	r1, #1
 800ffa6:	4618      	mov	r0, r3
 800ffa8:	f7fd fca8 	bl	800d8fc <unlock_fs>
 800ffac:	2301      	movs	r3, #1
 800ffae:	e00b      	b.n	800ffc8 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ffb4:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800ffb6:	68bb      	ldr	r3, [r7, #8]
 800ffb8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800ffbc:	4611      	mov	r1, r2
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	f7fd fc9c 	bl	800d8fc <unlock_fs>
 800ffc4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800ffc8:	4618      	mov	r0, r3
 800ffca:	3740      	adds	r7, #64	; 0x40
 800ffcc:	46bd      	mov	sp, r7
 800ffce:	bd80      	pop	{r7, pc}

0800ffd0 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800ffd0:	b580      	push	{r7, lr}
 800ffd2:	b086      	sub	sp, #24
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	6078      	str	r0, [r7, #4]
 800ffd8:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d101      	bne.n	800ffe4 <f_opendir+0x14>
 800ffe0:	2309      	movs	r3, #9
 800ffe2:	e06a      	b.n	80100ba <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800ffe8:	f107 010c 	add.w	r1, r7, #12
 800ffec:	463b      	mov	r3, r7
 800ffee:	2200      	movs	r2, #0
 800fff0:	4618      	mov	r0, r3
 800fff2:	f7fe fe79 	bl	800ece8 <find_volume>
 800fff6:	4603      	mov	r3, r0
 800fff8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fffa:	7dfb      	ldrb	r3, [r7, #23]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d14f      	bne.n	80100a0 <f_opendir+0xd0>
		obj->fs = fs;
 8010000:	68fa      	ldr	r2, [r7, #12]
 8010002:	693b      	ldr	r3, [r7, #16]
 8010004:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8010006:	683b      	ldr	r3, [r7, #0]
 8010008:	4619      	mov	r1, r3
 801000a:	6878      	ldr	r0, [r7, #4]
 801000c:	f7fe fd60 	bl	800ead0 <follow_path>
 8010010:	4603      	mov	r3, r0
 8010012:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8010014:	7dfb      	ldrb	r3, [r7, #23]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d13d      	bne.n	8010096 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010020:	b25b      	sxtb	r3, r3
 8010022:	2b00      	cmp	r3, #0
 8010024:	db12      	blt.n	801004c <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8010026:	693b      	ldr	r3, [r7, #16]
 8010028:	799b      	ldrb	r3, [r3, #6]
 801002a:	f003 0310 	and.w	r3, r3, #16
 801002e:	2b00      	cmp	r3, #0
 8010030:	d00a      	beq.n	8010048 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8010032:	68fa      	ldr	r2, [r7, #12]
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	6a1b      	ldr	r3, [r3, #32]
 8010038:	4619      	mov	r1, r3
 801003a:	4610      	mov	r0, r2
 801003c:	f7fe fb31 	bl	800e6a2 <ld_clust>
 8010040:	4602      	mov	r2, r0
 8010042:	693b      	ldr	r3, [r7, #16]
 8010044:	609a      	str	r2, [r3, #8]
 8010046:	e001      	b.n	801004c <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8010048:	2305      	movs	r3, #5
 801004a:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 801004c:	7dfb      	ldrb	r3, [r7, #23]
 801004e:	2b00      	cmp	r3, #0
 8010050:	d121      	bne.n	8010096 <f_opendir+0xc6>
				obj->id = fs->id;
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	88da      	ldrh	r2, [r3, #6]
 8010056:	693b      	ldr	r3, [r7, #16]
 8010058:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 801005a:	2100      	movs	r1, #0
 801005c:	6878      	ldr	r0, [r7, #4]
 801005e:	f7fe f999 	bl	800e394 <dir_sdi>
 8010062:	4603      	mov	r3, r0
 8010064:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8010066:	7dfb      	ldrb	r3, [r7, #23]
 8010068:	2b00      	cmp	r3, #0
 801006a:	d114      	bne.n	8010096 <f_opendir+0xc6>
					if (obj->sclust) {
 801006c:	693b      	ldr	r3, [r7, #16]
 801006e:	689b      	ldr	r3, [r3, #8]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d00d      	beq.n	8010090 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8010074:	2100      	movs	r1, #0
 8010076:	6878      	ldr	r0, [r7, #4]
 8010078:	f7fd fcda 	bl	800da30 <inc_lock>
 801007c:	4602      	mov	r2, r0
 801007e:	693b      	ldr	r3, [r7, #16]
 8010080:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8010082:	693b      	ldr	r3, [r7, #16]
 8010084:	691b      	ldr	r3, [r3, #16]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d105      	bne.n	8010096 <f_opendir+0xc6>
 801008a:	2312      	movs	r3, #18
 801008c:	75fb      	strb	r3, [r7, #23]
 801008e:	e002      	b.n	8010096 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8010090:	693b      	ldr	r3, [r7, #16]
 8010092:	2200      	movs	r2, #0
 8010094:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8010096:	7dfb      	ldrb	r3, [r7, #23]
 8010098:	2b04      	cmp	r3, #4
 801009a:	d101      	bne.n	80100a0 <f_opendir+0xd0>
 801009c:	2305      	movs	r3, #5
 801009e:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80100a0:	7dfb      	ldrb	r3, [r7, #23]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d002      	beq.n	80100ac <f_opendir+0xdc>
 80100a6:	693b      	ldr	r3, [r7, #16]
 80100a8:	2200      	movs	r2, #0
 80100aa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	7dfa      	ldrb	r2, [r7, #23]
 80100b0:	4611      	mov	r1, r2
 80100b2:	4618      	mov	r0, r3
 80100b4:	f7fd fc22 	bl	800d8fc <unlock_fs>
 80100b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80100ba:	4618      	mov	r0, r3
 80100bc:	3718      	adds	r7, #24
 80100be:	46bd      	mov	sp, r7
 80100c0:	bd80      	pop	{r7, pc}

080100c2 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80100c2:	b580      	push	{r7, lr}
 80100c4:	b084      	sub	sp, #16
 80100c6:	af00      	add	r7, sp, #0
 80100c8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	f107 0208 	add.w	r2, r7, #8
 80100d0:	4611      	mov	r1, r2
 80100d2:	4618      	mov	r0, r3
 80100d4:	f7ff f85c 	bl	800f190 <validate>
 80100d8:	4603      	mov	r3, r0
 80100da:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80100dc:	7bfb      	ldrb	r3, [r7, #15]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d115      	bne.n	801010e <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	691b      	ldr	r3, [r3, #16]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d006      	beq.n	80100f8 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	691b      	ldr	r3, [r3, #16]
 80100ee:	4618      	mov	r0, r3
 80100f0:	f7fd fd2c 	bl	800db4c <dec_lock>
 80100f4:	4603      	mov	r3, r0
 80100f6:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 80100f8:	7bfb      	ldrb	r3, [r7, #15]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d102      	bne.n	8010104 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	2200      	movs	r2, #0
 8010102:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 8010104:	68bb      	ldr	r3, [r7, #8]
 8010106:	2100      	movs	r1, #0
 8010108:	4618      	mov	r0, r3
 801010a:	f7fd fbf7 	bl	800d8fc <unlock_fs>
#endif
	}
	return res;
 801010e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010110:	4618      	mov	r0, r3
 8010112:	3710      	adds	r7, #16
 8010114:	46bd      	mov	sp, r7
 8010116:	bd80      	pop	{r7, pc}

08010118 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8010118:	b580      	push	{r7, lr}
 801011a:	b084      	sub	sp, #16
 801011c:	af00      	add	r7, sp, #0
 801011e:	6078      	str	r0, [r7, #4]
 8010120:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	f107 0208 	add.w	r2, r7, #8
 8010128:	4611      	mov	r1, r2
 801012a:	4618      	mov	r0, r3
 801012c:	f7ff f830 	bl	800f190 <validate>
 8010130:	4603      	mov	r3, r0
 8010132:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010134:	7bfb      	ldrb	r3, [r7, #15]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d126      	bne.n	8010188 <f_readdir+0x70>
		if (!fno) {
 801013a:	683b      	ldr	r3, [r7, #0]
 801013c:	2b00      	cmp	r3, #0
 801013e:	d106      	bne.n	801014e <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8010140:	2100      	movs	r1, #0
 8010142:	6878      	ldr	r0, [r7, #4]
 8010144:	f7fe f926 	bl	800e394 <dir_sdi>
 8010148:	4603      	mov	r3, r0
 801014a:	73fb      	strb	r3, [r7, #15]
 801014c:	e01c      	b.n	8010188 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 801014e:	2100      	movs	r1, #0
 8010150:	6878      	ldr	r0, [r7, #4]
 8010152:	f7fe fae5 	bl	800e720 <dir_read>
 8010156:	4603      	mov	r3, r0
 8010158:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 801015a:	7bfb      	ldrb	r3, [r7, #15]
 801015c:	2b04      	cmp	r3, #4
 801015e:	d101      	bne.n	8010164 <f_readdir+0x4c>
 8010160:	2300      	movs	r3, #0
 8010162:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8010164:	7bfb      	ldrb	r3, [r7, #15]
 8010166:	2b00      	cmp	r3, #0
 8010168:	d10e      	bne.n	8010188 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 801016a:	6839      	ldr	r1, [r7, #0]
 801016c:	6878      	ldr	r0, [r7, #4]
 801016e:	f7fe fbbb 	bl	800e8e8 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8010172:	2100      	movs	r1, #0
 8010174:	6878      	ldr	r0, [r7, #4]
 8010176:	f7fe f988 	bl	800e48a <dir_next>
 801017a:	4603      	mov	r3, r0
 801017c:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 801017e:	7bfb      	ldrb	r3, [r7, #15]
 8010180:	2b04      	cmp	r3, #4
 8010182:	d101      	bne.n	8010188 <f_readdir+0x70>
 8010184:	2300      	movs	r3, #0
 8010186:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8010188:	68bb      	ldr	r3, [r7, #8]
 801018a:	7bfa      	ldrb	r2, [r7, #15]
 801018c:	4611      	mov	r1, r2
 801018e:	4618      	mov	r0, r3
 8010190:	f7fd fbb4 	bl	800d8fc <unlock_fs>
 8010194:	7bfb      	ldrb	r3, [r7, #15]
}
 8010196:	4618      	mov	r0, r3
 8010198:	3710      	adds	r7, #16
 801019a:	46bd      	mov	sp, r7
 801019c:	bd80      	pop	{r7, pc}
	...

080101a0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80101a0:	b480      	push	{r7}
 80101a2:	b087      	sub	sp, #28
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	60f8      	str	r0, [r7, #12]
 80101a8:	60b9      	str	r1, [r7, #8]
 80101aa:	4613      	mov	r3, r2
 80101ac:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80101ae:	2301      	movs	r3, #1
 80101b0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80101b2:	2300      	movs	r3, #0
 80101b4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80101b6:	4b1f      	ldr	r3, [pc, #124]	; (8010234 <FATFS_LinkDriverEx+0x94>)
 80101b8:	7a5b      	ldrb	r3, [r3, #9]
 80101ba:	b2db      	uxtb	r3, r3
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d131      	bne.n	8010224 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80101c0:	4b1c      	ldr	r3, [pc, #112]	; (8010234 <FATFS_LinkDriverEx+0x94>)
 80101c2:	7a5b      	ldrb	r3, [r3, #9]
 80101c4:	b2db      	uxtb	r3, r3
 80101c6:	461a      	mov	r2, r3
 80101c8:	4b1a      	ldr	r3, [pc, #104]	; (8010234 <FATFS_LinkDriverEx+0x94>)
 80101ca:	2100      	movs	r1, #0
 80101cc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80101ce:	4b19      	ldr	r3, [pc, #100]	; (8010234 <FATFS_LinkDriverEx+0x94>)
 80101d0:	7a5b      	ldrb	r3, [r3, #9]
 80101d2:	b2db      	uxtb	r3, r3
 80101d4:	4a17      	ldr	r2, [pc, #92]	; (8010234 <FATFS_LinkDriverEx+0x94>)
 80101d6:	009b      	lsls	r3, r3, #2
 80101d8:	4413      	add	r3, r2
 80101da:	68fa      	ldr	r2, [r7, #12]
 80101dc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80101de:	4b15      	ldr	r3, [pc, #84]	; (8010234 <FATFS_LinkDriverEx+0x94>)
 80101e0:	7a5b      	ldrb	r3, [r3, #9]
 80101e2:	b2db      	uxtb	r3, r3
 80101e4:	461a      	mov	r2, r3
 80101e6:	4b13      	ldr	r3, [pc, #76]	; (8010234 <FATFS_LinkDriverEx+0x94>)
 80101e8:	4413      	add	r3, r2
 80101ea:	79fa      	ldrb	r2, [r7, #7]
 80101ec:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80101ee:	4b11      	ldr	r3, [pc, #68]	; (8010234 <FATFS_LinkDriverEx+0x94>)
 80101f0:	7a5b      	ldrb	r3, [r3, #9]
 80101f2:	b2db      	uxtb	r3, r3
 80101f4:	1c5a      	adds	r2, r3, #1
 80101f6:	b2d1      	uxtb	r1, r2
 80101f8:	4a0e      	ldr	r2, [pc, #56]	; (8010234 <FATFS_LinkDriverEx+0x94>)
 80101fa:	7251      	strb	r1, [r2, #9]
 80101fc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80101fe:	7dbb      	ldrb	r3, [r7, #22]
 8010200:	3330      	adds	r3, #48	; 0x30
 8010202:	b2da      	uxtb	r2, r3
 8010204:	68bb      	ldr	r3, [r7, #8]
 8010206:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010208:	68bb      	ldr	r3, [r7, #8]
 801020a:	3301      	adds	r3, #1
 801020c:	223a      	movs	r2, #58	; 0x3a
 801020e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010210:	68bb      	ldr	r3, [r7, #8]
 8010212:	3302      	adds	r3, #2
 8010214:	222f      	movs	r2, #47	; 0x2f
 8010216:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010218:	68bb      	ldr	r3, [r7, #8]
 801021a:	3303      	adds	r3, #3
 801021c:	2200      	movs	r2, #0
 801021e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010220:	2300      	movs	r3, #0
 8010222:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010224:	7dfb      	ldrb	r3, [r7, #23]
}
 8010226:	4618      	mov	r0, r3
 8010228:	371c      	adds	r7, #28
 801022a:	46bd      	mov	sp, r7
 801022c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010230:	4770      	bx	lr
 8010232:	bf00      	nop
 8010234:	20000434 	.word	0x20000434

08010238 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010238:	b580      	push	{r7, lr}
 801023a:	b082      	sub	sp, #8
 801023c:	af00      	add	r7, sp, #0
 801023e:	6078      	str	r0, [r7, #4]
 8010240:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010242:	2200      	movs	r2, #0
 8010244:	6839      	ldr	r1, [r7, #0]
 8010246:	6878      	ldr	r0, [r7, #4]
 8010248:	f7ff ffaa 	bl	80101a0 <FATFS_LinkDriverEx>
 801024c:	4603      	mov	r3, r0
}
 801024e:	4618      	mov	r0, r3
 8010250:	3708      	adds	r7, #8
 8010252:	46bd      	mov	sp, r7
 8010254:	bd80      	pop	{r7, pc}

08010256 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8010256:	b580      	push	{r7, lr}
 8010258:	b084      	sub	sp, #16
 801025a:	af00      	add	r7, sp, #0
 801025c:	4603      	mov	r3, r0
 801025e:	6039      	str	r1, [r7, #0]
 8010260:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8010262:	2200      	movs	r2, #0
 8010264:	2101      	movs	r1, #1
 8010266:	2001      	movs	r0, #1
 8010268:	f000 f867 	bl	801033a <osSemaphoreNew>
 801026c:	4602      	mov	r2, r0
 801026e:	683b      	ldr	r3, [r7, #0]
 8010270:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8010272:	683b      	ldr	r3, [r7, #0]
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	2b00      	cmp	r3, #0
 8010278:	bf14      	ite	ne
 801027a:	2301      	movne	r3, #1
 801027c:	2300      	moveq	r3, #0
 801027e:	b2db      	uxtb	r3, r3
 8010280:	60fb      	str	r3, [r7, #12]

    return ret;
 8010282:	68fb      	ldr	r3, [r7, #12]
}
 8010284:	4618      	mov	r0, r3
 8010286:	3710      	adds	r7, #16
 8010288:	46bd      	mov	sp, r7
 801028a:	bd80      	pop	{r7, pc}

0801028c <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 801028c:	b580      	push	{r7, lr}
 801028e:	b082      	sub	sp, #8
 8010290:	af00      	add	r7, sp, #0
 8010292:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8010294:	6878      	ldr	r0, [r7, #4]
 8010296:	f000 f96f 	bl	8010578 <osSemaphoreDelete>
#endif
    return 1;
 801029a:	2301      	movs	r3, #1
}
 801029c:	4618      	mov	r0, r3
 801029e:	3708      	adds	r7, #8
 80102a0:	46bd      	mov	sp, r7
 80102a2:	bd80      	pop	{r7, pc}

080102a4 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b084      	sub	sp, #16
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80102ac:	2300      	movs	r3, #0
 80102ae:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 80102b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80102b4:	6878      	ldr	r0, [r7, #4]
 80102b6:	f000 f8c9 	bl	801044c <osSemaphoreAcquire>
 80102ba:	4603      	mov	r3, r0
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d101      	bne.n	80102c4 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 80102c0:	2301      	movs	r3, #1
 80102c2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80102c4:	68fb      	ldr	r3, [r7, #12]
}
 80102c6:	4618      	mov	r0, r3
 80102c8:	3710      	adds	r7, #16
 80102ca:	46bd      	mov	sp, r7
 80102cc:	bd80      	pop	{r7, pc}

080102ce <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80102ce:	b580      	push	{r7, lr}
 80102d0:	b082      	sub	sp, #8
 80102d2:	af00      	add	r7, sp, #0
 80102d4:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80102d6:	6878      	ldr	r0, [r7, #4]
 80102d8:	f000 f90a 	bl	80104f0 <osSemaphoreRelease>
#endif
}
 80102dc:	bf00      	nop
 80102de:	3708      	adds	r7, #8
 80102e0:	46bd      	mov	sp, r7
 80102e2:	bd80      	pop	{r7, pc}

080102e4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80102e4:	b580      	push	{r7, lr}
 80102e6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80102e8:	4b05      	ldr	r3, [pc, #20]	; (8010300 <SysTick_Handler+0x1c>)
 80102ea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80102ec:	f001 fb9a 	bl	8011a24 <xTaskGetSchedulerState>
 80102f0:	4603      	mov	r3, r0
 80102f2:	2b01      	cmp	r3, #1
 80102f4:	d001      	beq.n	80102fa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80102f6:	f001 fe17 	bl	8011f28 <xPortSysTickHandler>
  }
}
 80102fa:	bf00      	nop
 80102fc:	bd80      	pop	{r7, pc}
 80102fe:	bf00      	nop
 8010300:	e000e010 	.word	0xe000e010

08010304 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8010304:	b580      	push	{r7, lr}
 8010306:	b084      	sub	sp, #16
 8010308:	af00      	add	r7, sp, #0
 801030a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801030c:	f3ef 8305 	mrs	r3, IPSR
 8010310:	60bb      	str	r3, [r7, #8]
  return(result);
 8010312:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010314:	2b00      	cmp	r3, #0
 8010316:	d003      	beq.n	8010320 <osDelay+0x1c>
    stat = osErrorISR;
 8010318:	f06f 0305 	mvn.w	r3, #5
 801031c:	60fb      	str	r3, [r7, #12]
 801031e:	e007      	b.n	8010330 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8010320:	2300      	movs	r3, #0
 8010322:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d002      	beq.n	8010330 <osDelay+0x2c>
      vTaskDelay(ticks);
 801032a:	6878      	ldr	r0, [r7, #4]
 801032c:	f001 f850 	bl	80113d0 <vTaskDelay>
    }
  }

  return (stat);
 8010330:	68fb      	ldr	r3, [r7, #12]
}
 8010332:	4618      	mov	r0, r3
 8010334:	3710      	adds	r7, #16
 8010336:	46bd      	mov	sp, r7
 8010338:	bd80      	pop	{r7, pc}

0801033a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 801033a:	b580      	push	{r7, lr}
 801033c:	b08a      	sub	sp, #40	; 0x28
 801033e:	af02      	add	r7, sp, #8
 8010340:	60f8      	str	r0, [r7, #12]
 8010342:	60b9      	str	r1, [r7, #8]
 8010344:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8010346:	2300      	movs	r3, #0
 8010348:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801034a:	f3ef 8305 	mrs	r3, IPSR
 801034e:	613b      	str	r3, [r7, #16]
  return(result);
 8010350:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8010352:	2b00      	cmp	r3, #0
 8010354:	d175      	bne.n	8010442 <osSemaphoreNew+0x108>
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d072      	beq.n	8010442 <osSemaphoreNew+0x108>
 801035c:	68ba      	ldr	r2, [r7, #8]
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	429a      	cmp	r2, r3
 8010362:	d86e      	bhi.n	8010442 <osSemaphoreNew+0x108>
    mem = -1;
 8010364:	f04f 33ff 	mov.w	r3, #4294967295
 8010368:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	2b00      	cmp	r3, #0
 801036e:	d015      	beq.n	801039c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	689b      	ldr	r3, [r3, #8]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d006      	beq.n	8010386 <osSemaphoreNew+0x4c>
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	68db      	ldr	r3, [r3, #12]
 801037c:	2b4f      	cmp	r3, #79	; 0x4f
 801037e:	d902      	bls.n	8010386 <osSemaphoreNew+0x4c>
        mem = 1;
 8010380:	2301      	movs	r3, #1
 8010382:	61bb      	str	r3, [r7, #24]
 8010384:	e00c      	b.n	80103a0 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	689b      	ldr	r3, [r3, #8]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d108      	bne.n	80103a0 <osSemaphoreNew+0x66>
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	68db      	ldr	r3, [r3, #12]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d104      	bne.n	80103a0 <osSemaphoreNew+0x66>
          mem = 0;
 8010396:	2300      	movs	r3, #0
 8010398:	61bb      	str	r3, [r7, #24]
 801039a:	e001      	b.n	80103a0 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 801039c:	2300      	movs	r3, #0
 801039e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80103a0:	69bb      	ldr	r3, [r7, #24]
 80103a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103a6:	d04c      	beq.n	8010442 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	2b01      	cmp	r3, #1
 80103ac:	d128      	bne.n	8010400 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80103ae:	69bb      	ldr	r3, [r7, #24]
 80103b0:	2b01      	cmp	r3, #1
 80103b2:	d10a      	bne.n	80103ca <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	689b      	ldr	r3, [r3, #8]
 80103b8:	2203      	movs	r2, #3
 80103ba:	9200      	str	r2, [sp, #0]
 80103bc:	2200      	movs	r2, #0
 80103be:	2100      	movs	r1, #0
 80103c0:	2001      	movs	r0, #1
 80103c2:	f000 fa0d 	bl	80107e0 <xQueueGenericCreateStatic>
 80103c6:	61f8      	str	r0, [r7, #28]
 80103c8:	e005      	b.n	80103d6 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80103ca:	2203      	movs	r2, #3
 80103cc:	2100      	movs	r1, #0
 80103ce:	2001      	movs	r0, #1
 80103d0:	f000 fa7e 	bl	80108d0 <xQueueGenericCreate>
 80103d4:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80103d6:	69fb      	ldr	r3, [r7, #28]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d022      	beq.n	8010422 <osSemaphoreNew+0xe8>
 80103dc:	68bb      	ldr	r3, [r7, #8]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d01f      	beq.n	8010422 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80103e2:	2300      	movs	r3, #0
 80103e4:	2200      	movs	r2, #0
 80103e6:	2100      	movs	r1, #0
 80103e8:	69f8      	ldr	r0, [r7, #28]
 80103ea:	f000 fb39 	bl	8010a60 <xQueueGenericSend>
 80103ee:	4603      	mov	r3, r0
 80103f0:	2b01      	cmp	r3, #1
 80103f2:	d016      	beq.n	8010422 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80103f4:	69f8      	ldr	r0, [r7, #28]
 80103f6:	f000 fe4b 	bl	8011090 <vQueueDelete>
            hSemaphore = NULL;
 80103fa:	2300      	movs	r3, #0
 80103fc:	61fb      	str	r3, [r7, #28]
 80103fe:	e010      	b.n	8010422 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8010400:	69bb      	ldr	r3, [r7, #24]
 8010402:	2b01      	cmp	r3, #1
 8010404:	d108      	bne.n	8010418 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	689b      	ldr	r3, [r3, #8]
 801040a:	461a      	mov	r2, r3
 801040c:	68b9      	ldr	r1, [r7, #8]
 801040e:	68f8      	ldr	r0, [r7, #12]
 8010410:	f000 fabb 	bl	801098a <xQueueCreateCountingSemaphoreStatic>
 8010414:	61f8      	str	r0, [r7, #28]
 8010416:	e004      	b.n	8010422 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8010418:	68b9      	ldr	r1, [r7, #8]
 801041a:	68f8      	ldr	r0, [r7, #12]
 801041c:	f000 faec 	bl	80109f8 <xQueueCreateCountingSemaphore>
 8010420:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8010422:	69fb      	ldr	r3, [r7, #28]
 8010424:	2b00      	cmp	r3, #0
 8010426:	d00c      	beq.n	8010442 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	2b00      	cmp	r3, #0
 801042c:	d003      	beq.n	8010436 <osSemaphoreNew+0xfc>
          name = attr->name;
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	617b      	str	r3, [r7, #20]
 8010434:	e001      	b.n	801043a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8010436:	2300      	movs	r3, #0
 8010438:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 801043a:	6979      	ldr	r1, [r7, #20]
 801043c:	69f8      	ldr	r0, [r7, #28]
 801043e:	f000 ff73 	bl	8011328 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8010442:	69fb      	ldr	r3, [r7, #28]
}
 8010444:	4618      	mov	r0, r3
 8010446:	3720      	adds	r7, #32
 8010448:	46bd      	mov	sp, r7
 801044a:	bd80      	pop	{r7, pc}

0801044c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 801044c:	b580      	push	{r7, lr}
 801044e:	b086      	sub	sp, #24
 8010450:	af00      	add	r7, sp, #0
 8010452:	6078      	str	r0, [r7, #4]
 8010454:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801045a:	2300      	movs	r3, #0
 801045c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 801045e:	693b      	ldr	r3, [r7, #16]
 8010460:	2b00      	cmp	r3, #0
 8010462:	d103      	bne.n	801046c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8010464:	f06f 0303 	mvn.w	r3, #3
 8010468:	617b      	str	r3, [r7, #20]
 801046a:	e039      	b.n	80104e0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801046c:	f3ef 8305 	mrs	r3, IPSR
 8010470:	60fb      	str	r3, [r7, #12]
  return(result);
 8010472:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8010474:	2b00      	cmp	r3, #0
 8010476:	d022      	beq.n	80104be <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8010478:	683b      	ldr	r3, [r7, #0]
 801047a:	2b00      	cmp	r3, #0
 801047c:	d003      	beq.n	8010486 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 801047e:	f06f 0303 	mvn.w	r3, #3
 8010482:	617b      	str	r3, [r7, #20]
 8010484:	e02c      	b.n	80104e0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8010486:	2300      	movs	r3, #0
 8010488:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 801048a:	f107 0308 	add.w	r3, r7, #8
 801048e:	461a      	mov	r2, r3
 8010490:	2100      	movs	r1, #0
 8010492:	6938      	ldr	r0, [r7, #16]
 8010494:	f000 fd7c 	bl	8010f90 <xQueueReceiveFromISR>
 8010498:	4603      	mov	r3, r0
 801049a:	2b01      	cmp	r3, #1
 801049c:	d003      	beq.n	80104a6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 801049e:	f06f 0302 	mvn.w	r3, #2
 80104a2:	617b      	str	r3, [r7, #20]
 80104a4:	e01c      	b.n	80104e0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80104a6:	68bb      	ldr	r3, [r7, #8]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d019      	beq.n	80104e0 <osSemaphoreAcquire+0x94>
 80104ac:	4b0f      	ldr	r3, [pc, #60]	; (80104ec <osSemaphoreAcquire+0xa0>)
 80104ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80104b2:	601a      	str	r2, [r3, #0]
 80104b4:	f3bf 8f4f 	dsb	sy
 80104b8:	f3bf 8f6f 	isb	sy
 80104bc:	e010      	b.n	80104e0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80104be:	6839      	ldr	r1, [r7, #0]
 80104c0:	6938      	ldr	r0, [r7, #16]
 80104c2:	f000 fc59 	bl	8010d78 <xQueueSemaphoreTake>
 80104c6:	4603      	mov	r3, r0
 80104c8:	2b01      	cmp	r3, #1
 80104ca:	d009      	beq.n	80104e0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80104cc:	683b      	ldr	r3, [r7, #0]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d003      	beq.n	80104da <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80104d2:	f06f 0301 	mvn.w	r3, #1
 80104d6:	617b      	str	r3, [r7, #20]
 80104d8:	e002      	b.n	80104e0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80104da:	f06f 0302 	mvn.w	r3, #2
 80104de:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80104e0:	697b      	ldr	r3, [r7, #20]
}
 80104e2:	4618      	mov	r0, r3
 80104e4:	3718      	adds	r7, #24
 80104e6:	46bd      	mov	sp, r7
 80104e8:	bd80      	pop	{r7, pc}
 80104ea:	bf00      	nop
 80104ec:	e000ed04 	.word	0xe000ed04

080104f0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80104f0:	b580      	push	{r7, lr}
 80104f2:	b086      	sub	sp, #24
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80104fc:	2300      	movs	r3, #0
 80104fe:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8010500:	693b      	ldr	r3, [r7, #16]
 8010502:	2b00      	cmp	r3, #0
 8010504:	d103      	bne.n	801050e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8010506:	f06f 0303 	mvn.w	r3, #3
 801050a:	617b      	str	r3, [r7, #20]
 801050c:	e02c      	b.n	8010568 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801050e:	f3ef 8305 	mrs	r3, IPSR
 8010512:	60fb      	str	r3, [r7, #12]
  return(result);
 8010514:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8010516:	2b00      	cmp	r3, #0
 8010518:	d01a      	beq.n	8010550 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 801051a:	2300      	movs	r3, #0
 801051c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801051e:	f107 0308 	add.w	r3, r7, #8
 8010522:	4619      	mov	r1, r3
 8010524:	6938      	ldr	r0, [r7, #16]
 8010526:	f000 fb99 	bl	8010c5c <xQueueGiveFromISR>
 801052a:	4603      	mov	r3, r0
 801052c:	2b01      	cmp	r3, #1
 801052e:	d003      	beq.n	8010538 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8010530:	f06f 0302 	mvn.w	r3, #2
 8010534:	617b      	str	r3, [r7, #20]
 8010536:	e017      	b.n	8010568 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8010538:	68bb      	ldr	r3, [r7, #8]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d014      	beq.n	8010568 <osSemaphoreRelease+0x78>
 801053e:	4b0d      	ldr	r3, [pc, #52]	; (8010574 <osSemaphoreRelease+0x84>)
 8010540:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010544:	601a      	str	r2, [r3, #0]
 8010546:	f3bf 8f4f 	dsb	sy
 801054a:	f3bf 8f6f 	isb	sy
 801054e:	e00b      	b.n	8010568 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8010550:	2300      	movs	r3, #0
 8010552:	2200      	movs	r2, #0
 8010554:	2100      	movs	r1, #0
 8010556:	6938      	ldr	r0, [r7, #16]
 8010558:	f000 fa82 	bl	8010a60 <xQueueGenericSend>
 801055c:	4603      	mov	r3, r0
 801055e:	2b01      	cmp	r3, #1
 8010560:	d002      	beq.n	8010568 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8010562:	f06f 0302 	mvn.w	r3, #2
 8010566:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8010568:	697b      	ldr	r3, [r7, #20]
}
 801056a:	4618      	mov	r0, r3
 801056c:	3718      	adds	r7, #24
 801056e:	46bd      	mov	sp, r7
 8010570:	bd80      	pop	{r7, pc}
 8010572:	bf00      	nop
 8010574:	e000ed04 	.word	0xe000ed04

08010578 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8010578:	b580      	push	{r7, lr}
 801057a:	b086      	sub	sp, #24
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010584:	f3ef 8305 	mrs	r3, IPSR
 8010588:	60fb      	str	r3, [r7, #12]
  return(result);
 801058a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 801058c:	2b00      	cmp	r3, #0
 801058e:	d003      	beq.n	8010598 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8010590:	f06f 0305 	mvn.w	r3, #5
 8010594:	617b      	str	r3, [r7, #20]
 8010596:	e00e      	b.n	80105b6 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8010598:	693b      	ldr	r3, [r7, #16]
 801059a:	2b00      	cmp	r3, #0
 801059c:	d103      	bne.n	80105a6 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 801059e:	f06f 0303 	mvn.w	r3, #3
 80105a2:	617b      	str	r3, [r7, #20]
 80105a4:	e007      	b.n	80105b6 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 80105a6:	6938      	ldr	r0, [r7, #16]
 80105a8:	f000 fee8 	bl	801137c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80105ac:	2300      	movs	r3, #0
 80105ae:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 80105b0:	6938      	ldr	r0, [r7, #16]
 80105b2:	f000 fd6d 	bl	8011090 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80105b6:	697b      	ldr	r3, [r7, #20]
}
 80105b8:	4618      	mov	r0, r3
 80105ba:	3718      	adds	r7, #24
 80105bc:	46bd      	mov	sp, r7
 80105be:	bd80      	pop	{r7, pc}

080105c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80105c0:	b480      	push	{r7}
 80105c2:	b083      	sub	sp, #12
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	f103 0208 	add.w	r2, r3, #8
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	f04f 32ff 	mov.w	r2, #4294967295
 80105d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	f103 0208 	add.w	r2, r3, #8
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	f103 0208 	add.w	r2, r3, #8
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	2200      	movs	r2, #0
 80105f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80105f4:	bf00      	nop
 80105f6:	370c      	adds	r7, #12
 80105f8:	46bd      	mov	sp, r7
 80105fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105fe:	4770      	bx	lr

08010600 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010600:	b480      	push	{r7}
 8010602:	b085      	sub	sp, #20
 8010604:	af00      	add	r7, sp, #0
 8010606:	6078      	str	r0, [r7, #4]
 8010608:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	685b      	ldr	r3, [r3, #4]
 801060e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010610:	683b      	ldr	r3, [r7, #0]
 8010612:	68fa      	ldr	r2, [r7, #12]
 8010614:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	689a      	ldr	r2, [r3, #8]
 801061a:	683b      	ldr	r3, [r7, #0]
 801061c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	689b      	ldr	r3, [r3, #8]
 8010622:	683a      	ldr	r2, [r7, #0]
 8010624:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	683a      	ldr	r2, [r7, #0]
 801062a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801062c:	683b      	ldr	r3, [r7, #0]
 801062e:	687a      	ldr	r2, [r7, #4]
 8010630:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	1c5a      	adds	r2, r3, #1
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	601a      	str	r2, [r3, #0]
}
 801063c:	bf00      	nop
 801063e:	3714      	adds	r7, #20
 8010640:	46bd      	mov	sp, r7
 8010642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010646:	4770      	bx	lr

08010648 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010648:	b480      	push	{r7}
 801064a:	b085      	sub	sp, #20
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
 8010650:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010652:	683b      	ldr	r3, [r7, #0]
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010658:	68bb      	ldr	r3, [r7, #8]
 801065a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801065e:	d103      	bne.n	8010668 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	691b      	ldr	r3, [r3, #16]
 8010664:	60fb      	str	r3, [r7, #12]
 8010666:	e00c      	b.n	8010682 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	3308      	adds	r3, #8
 801066c:	60fb      	str	r3, [r7, #12]
 801066e:	e002      	b.n	8010676 <vListInsert+0x2e>
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	685b      	ldr	r3, [r3, #4]
 8010674:	60fb      	str	r3, [r7, #12]
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	685b      	ldr	r3, [r3, #4]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	68ba      	ldr	r2, [r7, #8]
 801067e:	429a      	cmp	r2, r3
 8010680:	d2f6      	bcs.n	8010670 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	685a      	ldr	r2, [r3, #4]
 8010686:	683b      	ldr	r3, [r7, #0]
 8010688:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801068a:	683b      	ldr	r3, [r7, #0]
 801068c:	685b      	ldr	r3, [r3, #4]
 801068e:	683a      	ldr	r2, [r7, #0]
 8010690:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010692:	683b      	ldr	r3, [r7, #0]
 8010694:	68fa      	ldr	r2, [r7, #12]
 8010696:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	683a      	ldr	r2, [r7, #0]
 801069c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801069e:	683b      	ldr	r3, [r7, #0]
 80106a0:	687a      	ldr	r2, [r7, #4]
 80106a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	1c5a      	adds	r2, r3, #1
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	601a      	str	r2, [r3, #0]
}
 80106ae:	bf00      	nop
 80106b0:	3714      	adds	r7, #20
 80106b2:	46bd      	mov	sp, r7
 80106b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b8:	4770      	bx	lr

080106ba <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80106ba:	b480      	push	{r7}
 80106bc:	b085      	sub	sp, #20
 80106be:	af00      	add	r7, sp, #0
 80106c0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	691b      	ldr	r3, [r3, #16]
 80106c6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	685b      	ldr	r3, [r3, #4]
 80106cc:	687a      	ldr	r2, [r7, #4]
 80106ce:	6892      	ldr	r2, [r2, #8]
 80106d0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	689b      	ldr	r3, [r3, #8]
 80106d6:	687a      	ldr	r2, [r7, #4]
 80106d8:	6852      	ldr	r2, [r2, #4]
 80106da:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	685b      	ldr	r3, [r3, #4]
 80106e0:	687a      	ldr	r2, [r7, #4]
 80106e2:	429a      	cmp	r2, r3
 80106e4:	d103      	bne.n	80106ee <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	689a      	ldr	r2, [r3, #8]
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	2200      	movs	r2, #0
 80106f2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	1e5a      	subs	r2, r3, #1
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	681b      	ldr	r3, [r3, #0]
}
 8010702:	4618      	mov	r0, r3
 8010704:	3714      	adds	r7, #20
 8010706:	46bd      	mov	sp, r7
 8010708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801070c:	4770      	bx	lr
	...

08010710 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010710:	b580      	push	{r7, lr}
 8010712:	b084      	sub	sp, #16
 8010714:	af00      	add	r7, sp, #0
 8010716:	6078      	str	r0, [r7, #4]
 8010718:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d10a      	bne.n	801073a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010728:	f383 8811 	msr	BASEPRI, r3
 801072c:	f3bf 8f6f 	isb	sy
 8010730:	f3bf 8f4f 	dsb	sy
 8010734:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8010736:	bf00      	nop
 8010738:	e7fe      	b.n	8010738 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801073a:	f001 fb65 	bl	8011e08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	681a      	ldr	r2, [r3, #0]
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010746:	68f9      	ldr	r1, [r7, #12]
 8010748:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801074a:	fb01 f303 	mul.w	r3, r1, r3
 801074e:	441a      	add	r2, r3
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	2200      	movs	r2, #0
 8010758:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	681a      	ldr	r2, [r3, #0]
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	681a      	ldr	r2, [r3, #0]
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801076a:	3b01      	subs	r3, #1
 801076c:	68f9      	ldr	r1, [r7, #12]
 801076e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010770:	fb01 f303 	mul.w	r3, r1, r3
 8010774:	441a      	add	r2, r3
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	22ff      	movs	r2, #255	; 0xff
 801077e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	22ff      	movs	r2, #255	; 0xff
 8010786:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801078a:	683b      	ldr	r3, [r7, #0]
 801078c:	2b00      	cmp	r3, #0
 801078e:	d114      	bne.n	80107ba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	691b      	ldr	r3, [r3, #16]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d01a      	beq.n	80107ce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	3310      	adds	r3, #16
 801079c:	4618      	mov	r0, r3
 801079e:	f001 f839 	bl	8011814 <xTaskRemoveFromEventList>
 80107a2:	4603      	mov	r3, r0
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d012      	beq.n	80107ce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80107a8:	4b0c      	ldr	r3, [pc, #48]	; (80107dc <xQueueGenericReset+0xcc>)
 80107aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80107ae:	601a      	str	r2, [r3, #0]
 80107b0:	f3bf 8f4f 	dsb	sy
 80107b4:	f3bf 8f6f 	isb	sy
 80107b8:	e009      	b.n	80107ce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	3310      	adds	r3, #16
 80107be:	4618      	mov	r0, r3
 80107c0:	f7ff fefe 	bl	80105c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	3324      	adds	r3, #36	; 0x24
 80107c8:	4618      	mov	r0, r3
 80107ca:	f7ff fef9 	bl	80105c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80107ce:	f001 fb4b 	bl	8011e68 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80107d2:	2301      	movs	r3, #1
}
 80107d4:	4618      	mov	r0, r3
 80107d6:	3710      	adds	r7, #16
 80107d8:	46bd      	mov	sp, r7
 80107da:	bd80      	pop	{r7, pc}
 80107dc:	e000ed04 	.word	0xe000ed04

080107e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b08e      	sub	sp, #56	; 0x38
 80107e4:	af02      	add	r7, sp, #8
 80107e6:	60f8      	str	r0, [r7, #12]
 80107e8:	60b9      	str	r1, [r7, #8]
 80107ea:	607a      	str	r2, [r7, #4]
 80107ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d10a      	bne.n	801080a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80107f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107f8:	f383 8811 	msr	BASEPRI, r3
 80107fc:	f3bf 8f6f 	isb	sy
 8010800:	f3bf 8f4f 	dsb	sy
 8010804:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010806:	bf00      	nop
 8010808:	e7fe      	b.n	8010808 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801080a:	683b      	ldr	r3, [r7, #0]
 801080c:	2b00      	cmp	r3, #0
 801080e:	d10a      	bne.n	8010826 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8010810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010814:	f383 8811 	msr	BASEPRI, r3
 8010818:	f3bf 8f6f 	isb	sy
 801081c:	f3bf 8f4f 	dsb	sy
 8010820:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010822:	bf00      	nop
 8010824:	e7fe      	b.n	8010824 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	2b00      	cmp	r3, #0
 801082a:	d002      	beq.n	8010832 <xQueueGenericCreateStatic+0x52>
 801082c:	68bb      	ldr	r3, [r7, #8]
 801082e:	2b00      	cmp	r3, #0
 8010830:	d001      	beq.n	8010836 <xQueueGenericCreateStatic+0x56>
 8010832:	2301      	movs	r3, #1
 8010834:	e000      	b.n	8010838 <xQueueGenericCreateStatic+0x58>
 8010836:	2300      	movs	r3, #0
 8010838:	2b00      	cmp	r3, #0
 801083a:	d10a      	bne.n	8010852 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 801083c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010840:	f383 8811 	msr	BASEPRI, r3
 8010844:	f3bf 8f6f 	isb	sy
 8010848:	f3bf 8f4f 	dsb	sy
 801084c:	623b      	str	r3, [r7, #32]
}
 801084e:	bf00      	nop
 8010850:	e7fe      	b.n	8010850 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	2b00      	cmp	r3, #0
 8010856:	d102      	bne.n	801085e <xQueueGenericCreateStatic+0x7e>
 8010858:	68bb      	ldr	r3, [r7, #8]
 801085a:	2b00      	cmp	r3, #0
 801085c:	d101      	bne.n	8010862 <xQueueGenericCreateStatic+0x82>
 801085e:	2301      	movs	r3, #1
 8010860:	e000      	b.n	8010864 <xQueueGenericCreateStatic+0x84>
 8010862:	2300      	movs	r3, #0
 8010864:	2b00      	cmp	r3, #0
 8010866:	d10a      	bne.n	801087e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8010868:	f04f 0350 	mov.w	r3, #80	; 0x50
 801086c:	f383 8811 	msr	BASEPRI, r3
 8010870:	f3bf 8f6f 	isb	sy
 8010874:	f3bf 8f4f 	dsb	sy
 8010878:	61fb      	str	r3, [r7, #28]
}
 801087a:	bf00      	nop
 801087c:	e7fe      	b.n	801087c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801087e:	2350      	movs	r3, #80	; 0x50
 8010880:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010882:	697b      	ldr	r3, [r7, #20]
 8010884:	2b50      	cmp	r3, #80	; 0x50
 8010886:	d00a      	beq.n	801089e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8010888:	f04f 0350 	mov.w	r3, #80	; 0x50
 801088c:	f383 8811 	msr	BASEPRI, r3
 8010890:	f3bf 8f6f 	isb	sy
 8010894:	f3bf 8f4f 	dsb	sy
 8010898:	61bb      	str	r3, [r7, #24]
}
 801089a:	bf00      	nop
 801089c:	e7fe      	b.n	801089c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801089e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80108a0:	683b      	ldr	r3, [r7, #0]
 80108a2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80108a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d00d      	beq.n	80108c6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80108aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108ac:	2201      	movs	r2, #1
 80108ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80108b2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80108b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108b8:	9300      	str	r3, [sp, #0]
 80108ba:	4613      	mov	r3, r2
 80108bc:	687a      	ldr	r2, [r7, #4]
 80108be:	68b9      	ldr	r1, [r7, #8]
 80108c0:	68f8      	ldr	r0, [r7, #12]
 80108c2:	f000 f83f 	bl	8010944 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80108c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80108c8:	4618      	mov	r0, r3
 80108ca:	3730      	adds	r7, #48	; 0x30
 80108cc:	46bd      	mov	sp, r7
 80108ce:	bd80      	pop	{r7, pc}

080108d0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80108d0:	b580      	push	{r7, lr}
 80108d2:	b08a      	sub	sp, #40	; 0x28
 80108d4:	af02      	add	r7, sp, #8
 80108d6:	60f8      	str	r0, [r7, #12]
 80108d8:	60b9      	str	r1, [r7, #8]
 80108da:	4613      	mov	r3, r2
 80108dc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d10a      	bne.n	80108fa <xQueueGenericCreate+0x2a>
	__asm volatile
 80108e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108e8:	f383 8811 	msr	BASEPRI, r3
 80108ec:	f3bf 8f6f 	isb	sy
 80108f0:	f3bf 8f4f 	dsb	sy
 80108f4:	613b      	str	r3, [r7, #16]
}
 80108f6:	bf00      	nop
 80108f8:	e7fe      	b.n	80108f8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	68ba      	ldr	r2, [r7, #8]
 80108fe:	fb02 f303 	mul.w	r3, r2, r3
 8010902:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010904:	69fb      	ldr	r3, [r7, #28]
 8010906:	3350      	adds	r3, #80	; 0x50
 8010908:	4618      	mov	r0, r3
 801090a:	f001 fb6f 	bl	8011fec <pvPortMalloc>
 801090e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010910:	69bb      	ldr	r3, [r7, #24]
 8010912:	2b00      	cmp	r3, #0
 8010914:	d011      	beq.n	801093a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8010916:	69bb      	ldr	r3, [r7, #24]
 8010918:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801091a:	697b      	ldr	r3, [r7, #20]
 801091c:	3350      	adds	r3, #80	; 0x50
 801091e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010920:	69bb      	ldr	r3, [r7, #24]
 8010922:	2200      	movs	r2, #0
 8010924:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010928:	79fa      	ldrb	r2, [r7, #7]
 801092a:	69bb      	ldr	r3, [r7, #24]
 801092c:	9300      	str	r3, [sp, #0]
 801092e:	4613      	mov	r3, r2
 8010930:	697a      	ldr	r2, [r7, #20]
 8010932:	68b9      	ldr	r1, [r7, #8]
 8010934:	68f8      	ldr	r0, [r7, #12]
 8010936:	f000 f805 	bl	8010944 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801093a:	69bb      	ldr	r3, [r7, #24]
	}
 801093c:	4618      	mov	r0, r3
 801093e:	3720      	adds	r7, #32
 8010940:	46bd      	mov	sp, r7
 8010942:	bd80      	pop	{r7, pc}

08010944 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010944:	b580      	push	{r7, lr}
 8010946:	b084      	sub	sp, #16
 8010948:	af00      	add	r7, sp, #0
 801094a:	60f8      	str	r0, [r7, #12]
 801094c:	60b9      	str	r1, [r7, #8]
 801094e:	607a      	str	r2, [r7, #4]
 8010950:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010952:	68bb      	ldr	r3, [r7, #8]
 8010954:	2b00      	cmp	r3, #0
 8010956:	d103      	bne.n	8010960 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010958:	69bb      	ldr	r3, [r7, #24]
 801095a:	69ba      	ldr	r2, [r7, #24]
 801095c:	601a      	str	r2, [r3, #0]
 801095e:	e002      	b.n	8010966 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010960:	69bb      	ldr	r3, [r7, #24]
 8010962:	687a      	ldr	r2, [r7, #4]
 8010964:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010966:	69bb      	ldr	r3, [r7, #24]
 8010968:	68fa      	ldr	r2, [r7, #12]
 801096a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801096c:	69bb      	ldr	r3, [r7, #24]
 801096e:	68ba      	ldr	r2, [r7, #8]
 8010970:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010972:	2101      	movs	r1, #1
 8010974:	69b8      	ldr	r0, [r7, #24]
 8010976:	f7ff fecb 	bl	8010710 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801097a:	69bb      	ldr	r3, [r7, #24]
 801097c:	78fa      	ldrb	r2, [r7, #3]
 801097e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010982:	bf00      	nop
 8010984:	3710      	adds	r7, #16
 8010986:	46bd      	mov	sp, r7
 8010988:	bd80      	pop	{r7, pc}

0801098a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 801098a:	b580      	push	{r7, lr}
 801098c:	b08a      	sub	sp, #40	; 0x28
 801098e:	af02      	add	r7, sp, #8
 8010990:	60f8      	str	r0, [r7, #12]
 8010992:	60b9      	str	r1, [r7, #8]
 8010994:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	2b00      	cmp	r3, #0
 801099a:	d10a      	bne.n	80109b2 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 801099c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109a0:	f383 8811 	msr	BASEPRI, r3
 80109a4:	f3bf 8f6f 	isb	sy
 80109a8:	f3bf 8f4f 	dsb	sy
 80109ac:	61bb      	str	r3, [r7, #24]
}
 80109ae:	bf00      	nop
 80109b0:	e7fe      	b.n	80109b0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80109b2:	68ba      	ldr	r2, [r7, #8]
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	429a      	cmp	r2, r3
 80109b8:	d90a      	bls.n	80109d0 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80109ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109be:	f383 8811 	msr	BASEPRI, r3
 80109c2:	f3bf 8f6f 	isb	sy
 80109c6:	f3bf 8f4f 	dsb	sy
 80109ca:	617b      	str	r3, [r7, #20]
}
 80109cc:	bf00      	nop
 80109ce:	e7fe      	b.n	80109ce <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80109d0:	2302      	movs	r3, #2
 80109d2:	9300      	str	r3, [sp, #0]
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	2200      	movs	r2, #0
 80109d8:	2100      	movs	r1, #0
 80109da:	68f8      	ldr	r0, [r7, #12]
 80109dc:	f7ff ff00 	bl	80107e0 <xQueueGenericCreateStatic>
 80109e0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80109e2:	69fb      	ldr	r3, [r7, #28]
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d002      	beq.n	80109ee <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80109e8:	69fb      	ldr	r3, [r7, #28]
 80109ea:	68ba      	ldr	r2, [r7, #8]
 80109ec:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80109ee:	69fb      	ldr	r3, [r7, #28]
	}
 80109f0:	4618      	mov	r0, r3
 80109f2:	3720      	adds	r7, #32
 80109f4:	46bd      	mov	sp, r7
 80109f6:	bd80      	pop	{r7, pc}

080109f8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80109f8:	b580      	push	{r7, lr}
 80109fa:	b086      	sub	sp, #24
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
 8010a00:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d10a      	bne.n	8010a1e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8010a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a0c:	f383 8811 	msr	BASEPRI, r3
 8010a10:	f3bf 8f6f 	isb	sy
 8010a14:	f3bf 8f4f 	dsb	sy
 8010a18:	613b      	str	r3, [r7, #16]
}
 8010a1a:	bf00      	nop
 8010a1c:	e7fe      	b.n	8010a1c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8010a1e:	683a      	ldr	r2, [r7, #0]
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	429a      	cmp	r2, r3
 8010a24:	d90a      	bls.n	8010a3c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8010a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a2a:	f383 8811 	msr	BASEPRI, r3
 8010a2e:	f3bf 8f6f 	isb	sy
 8010a32:	f3bf 8f4f 	dsb	sy
 8010a36:	60fb      	str	r3, [r7, #12]
}
 8010a38:	bf00      	nop
 8010a3a:	e7fe      	b.n	8010a3a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010a3c:	2202      	movs	r2, #2
 8010a3e:	2100      	movs	r1, #0
 8010a40:	6878      	ldr	r0, [r7, #4]
 8010a42:	f7ff ff45 	bl	80108d0 <xQueueGenericCreate>
 8010a46:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8010a48:	697b      	ldr	r3, [r7, #20]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d002      	beq.n	8010a54 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010a4e:	697b      	ldr	r3, [r7, #20]
 8010a50:	683a      	ldr	r2, [r7, #0]
 8010a52:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8010a54:	697b      	ldr	r3, [r7, #20]
	}
 8010a56:	4618      	mov	r0, r3
 8010a58:	3718      	adds	r7, #24
 8010a5a:	46bd      	mov	sp, r7
 8010a5c:	bd80      	pop	{r7, pc}
	...

08010a60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010a60:	b580      	push	{r7, lr}
 8010a62:	b08e      	sub	sp, #56	; 0x38
 8010a64:	af00      	add	r7, sp, #0
 8010a66:	60f8      	str	r0, [r7, #12]
 8010a68:	60b9      	str	r1, [r7, #8]
 8010a6a:	607a      	str	r2, [r7, #4]
 8010a6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010a6e:	2300      	movs	r3, #0
 8010a70:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d10a      	bne.n	8010a92 <xQueueGenericSend+0x32>
	__asm volatile
 8010a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a80:	f383 8811 	msr	BASEPRI, r3
 8010a84:	f3bf 8f6f 	isb	sy
 8010a88:	f3bf 8f4f 	dsb	sy
 8010a8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010a8e:	bf00      	nop
 8010a90:	e7fe      	b.n	8010a90 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010a92:	68bb      	ldr	r3, [r7, #8]
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d103      	bne.n	8010aa0 <xQueueGenericSend+0x40>
 8010a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d101      	bne.n	8010aa4 <xQueueGenericSend+0x44>
 8010aa0:	2301      	movs	r3, #1
 8010aa2:	e000      	b.n	8010aa6 <xQueueGenericSend+0x46>
 8010aa4:	2300      	movs	r3, #0
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d10a      	bne.n	8010ac0 <xQueueGenericSend+0x60>
	__asm volatile
 8010aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010aae:	f383 8811 	msr	BASEPRI, r3
 8010ab2:	f3bf 8f6f 	isb	sy
 8010ab6:	f3bf 8f4f 	dsb	sy
 8010aba:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010abc:	bf00      	nop
 8010abe:	e7fe      	b.n	8010abe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010ac0:	683b      	ldr	r3, [r7, #0]
 8010ac2:	2b02      	cmp	r3, #2
 8010ac4:	d103      	bne.n	8010ace <xQueueGenericSend+0x6e>
 8010ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010aca:	2b01      	cmp	r3, #1
 8010acc:	d101      	bne.n	8010ad2 <xQueueGenericSend+0x72>
 8010ace:	2301      	movs	r3, #1
 8010ad0:	e000      	b.n	8010ad4 <xQueueGenericSend+0x74>
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d10a      	bne.n	8010aee <xQueueGenericSend+0x8e>
	__asm volatile
 8010ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010adc:	f383 8811 	msr	BASEPRI, r3
 8010ae0:	f3bf 8f6f 	isb	sy
 8010ae4:	f3bf 8f4f 	dsb	sy
 8010ae8:	623b      	str	r3, [r7, #32]
}
 8010aea:	bf00      	nop
 8010aec:	e7fe      	b.n	8010aec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010aee:	f000 ff99 	bl	8011a24 <xTaskGetSchedulerState>
 8010af2:	4603      	mov	r3, r0
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d102      	bne.n	8010afe <xQueueGenericSend+0x9e>
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d101      	bne.n	8010b02 <xQueueGenericSend+0xa2>
 8010afe:	2301      	movs	r3, #1
 8010b00:	e000      	b.n	8010b04 <xQueueGenericSend+0xa4>
 8010b02:	2300      	movs	r3, #0
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d10a      	bne.n	8010b1e <xQueueGenericSend+0xbe>
	__asm volatile
 8010b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b0c:	f383 8811 	msr	BASEPRI, r3
 8010b10:	f3bf 8f6f 	isb	sy
 8010b14:	f3bf 8f4f 	dsb	sy
 8010b18:	61fb      	str	r3, [r7, #28]
}
 8010b1a:	bf00      	nop
 8010b1c:	e7fe      	b.n	8010b1c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010b1e:	f001 f973 	bl	8011e08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b2a:	429a      	cmp	r2, r3
 8010b2c:	d302      	bcc.n	8010b34 <xQueueGenericSend+0xd4>
 8010b2e:	683b      	ldr	r3, [r7, #0]
 8010b30:	2b02      	cmp	r3, #2
 8010b32:	d129      	bne.n	8010b88 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010b34:	683a      	ldr	r2, [r7, #0]
 8010b36:	68b9      	ldr	r1, [r7, #8]
 8010b38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b3a:	f000 fae4 	bl	8011106 <prvCopyDataToQueue>
 8010b3e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d010      	beq.n	8010b6a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b4a:	3324      	adds	r3, #36	; 0x24
 8010b4c:	4618      	mov	r0, r3
 8010b4e:	f000 fe61 	bl	8011814 <xTaskRemoveFromEventList>
 8010b52:	4603      	mov	r3, r0
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d013      	beq.n	8010b80 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010b58:	4b3f      	ldr	r3, [pc, #252]	; (8010c58 <xQueueGenericSend+0x1f8>)
 8010b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b5e:	601a      	str	r2, [r3, #0]
 8010b60:	f3bf 8f4f 	dsb	sy
 8010b64:	f3bf 8f6f 	isb	sy
 8010b68:	e00a      	b.n	8010b80 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d007      	beq.n	8010b80 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010b70:	4b39      	ldr	r3, [pc, #228]	; (8010c58 <xQueueGenericSend+0x1f8>)
 8010b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b76:	601a      	str	r2, [r3, #0]
 8010b78:	f3bf 8f4f 	dsb	sy
 8010b7c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010b80:	f001 f972 	bl	8011e68 <vPortExitCritical>
				return pdPASS;
 8010b84:	2301      	movs	r3, #1
 8010b86:	e063      	b.n	8010c50 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d103      	bne.n	8010b96 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010b8e:	f001 f96b 	bl	8011e68 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010b92:	2300      	movs	r3, #0
 8010b94:	e05c      	b.n	8010c50 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d106      	bne.n	8010baa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010b9c:	f107 0314 	add.w	r3, r7, #20
 8010ba0:	4618      	mov	r0, r3
 8010ba2:	f000 fe9b 	bl	80118dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010ba6:	2301      	movs	r3, #1
 8010ba8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010baa:	f001 f95d 	bl	8011e68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010bae:	f000 fc43 	bl	8011438 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010bb2:	f001 f929 	bl	8011e08 <vPortEnterCritical>
 8010bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010bbc:	b25b      	sxtb	r3, r3
 8010bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bc2:	d103      	bne.n	8010bcc <xQueueGenericSend+0x16c>
 8010bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bc6:	2200      	movs	r2, #0
 8010bc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010bd2:	b25b      	sxtb	r3, r3
 8010bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bd8:	d103      	bne.n	8010be2 <xQueueGenericSend+0x182>
 8010bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bdc:	2200      	movs	r2, #0
 8010bde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010be2:	f001 f941 	bl	8011e68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010be6:	1d3a      	adds	r2, r7, #4
 8010be8:	f107 0314 	add.w	r3, r7, #20
 8010bec:	4611      	mov	r1, r2
 8010bee:	4618      	mov	r0, r3
 8010bf0:	f000 fe8a 	bl	8011908 <xTaskCheckForTimeOut>
 8010bf4:	4603      	mov	r3, r0
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d124      	bne.n	8010c44 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010bfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010bfc:	f000 fb7b 	bl	80112f6 <prvIsQueueFull>
 8010c00:	4603      	mov	r3, r0
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d018      	beq.n	8010c38 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c08:	3310      	adds	r3, #16
 8010c0a:	687a      	ldr	r2, [r7, #4]
 8010c0c:	4611      	mov	r1, r2
 8010c0e:	4618      	mov	r0, r3
 8010c10:	f000 fddc 	bl	80117cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010c14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010c16:	f000 fb06 	bl	8011226 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010c1a:	f000 fc1b 	bl	8011454 <xTaskResumeAll>
 8010c1e:	4603      	mov	r3, r0
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	f47f af7c 	bne.w	8010b1e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8010c26:	4b0c      	ldr	r3, [pc, #48]	; (8010c58 <xQueueGenericSend+0x1f8>)
 8010c28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c2c:	601a      	str	r2, [r3, #0]
 8010c2e:	f3bf 8f4f 	dsb	sy
 8010c32:	f3bf 8f6f 	isb	sy
 8010c36:	e772      	b.n	8010b1e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010c38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010c3a:	f000 faf4 	bl	8011226 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010c3e:	f000 fc09 	bl	8011454 <xTaskResumeAll>
 8010c42:	e76c      	b.n	8010b1e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010c44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010c46:	f000 faee 	bl	8011226 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010c4a:	f000 fc03 	bl	8011454 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010c4e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010c50:	4618      	mov	r0, r3
 8010c52:	3738      	adds	r7, #56	; 0x38
 8010c54:	46bd      	mov	sp, r7
 8010c56:	bd80      	pop	{r7, pc}
 8010c58:	e000ed04 	.word	0xe000ed04

08010c5c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010c5c:	b580      	push	{r7, lr}
 8010c5e:	b08e      	sub	sp, #56	; 0x38
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	6078      	str	r0, [r7, #4]
 8010c64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d10a      	bne.n	8010c86 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8010c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c74:	f383 8811 	msr	BASEPRI, r3
 8010c78:	f3bf 8f6f 	isb	sy
 8010c7c:	f3bf 8f4f 	dsb	sy
 8010c80:	623b      	str	r3, [r7, #32]
}
 8010c82:	bf00      	nop
 8010c84:	e7fe      	b.n	8010c84 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d00a      	beq.n	8010ca4 <xQueueGiveFromISR+0x48>
	__asm volatile
 8010c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c92:	f383 8811 	msr	BASEPRI, r3
 8010c96:	f3bf 8f6f 	isb	sy
 8010c9a:	f3bf 8f4f 	dsb	sy
 8010c9e:	61fb      	str	r3, [r7, #28]
}
 8010ca0:	bf00      	nop
 8010ca2:	e7fe      	b.n	8010ca2 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d103      	bne.n	8010cb4 <xQueueGiveFromISR+0x58>
 8010cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cae:	689b      	ldr	r3, [r3, #8]
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d101      	bne.n	8010cb8 <xQueueGiveFromISR+0x5c>
 8010cb4:	2301      	movs	r3, #1
 8010cb6:	e000      	b.n	8010cba <xQueueGiveFromISR+0x5e>
 8010cb8:	2300      	movs	r3, #0
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d10a      	bne.n	8010cd4 <xQueueGiveFromISR+0x78>
	__asm volatile
 8010cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cc2:	f383 8811 	msr	BASEPRI, r3
 8010cc6:	f3bf 8f6f 	isb	sy
 8010cca:	f3bf 8f4f 	dsb	sy
 8010cce:	61bb      	str	r3, [r7, #24]
}
 8010cd0:	bf00      	nop
 8010cd2:	e7fe      	b.n	8010cd2 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010cd4:	f001 f94a 	bl	8011f6c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010cd8:	f3ef 8211 	mrs	r2, BASEPRI
 8010cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ce0:	f383 8811 	msr	BASEPRI, r3
 8010ce4:	f3bf 8f6f 	isb	sy
 8010ce8:	f3bf 8f4f 	dsb	sy
 8010cec:	617a      	str	r2, [r7, #20]
 8010cee:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010cf0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cf8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010cfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d00:	429a      	cmp	r2, r3
 8010d02:	d22b      	bcs.n	8010d5c <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010d0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d10:	1c5a      	adds	r2, r3, #1
 8010d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d14:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010d16:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d1e:	d112      	bne.n	8010d46 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d016      	beq.n	8010d56 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d2a:	3324      	adds	r3, #36	; 0x24
 8010d2c:	4618      	mov	r0, r3
 8010d2e:	f000 fd71 	bl	8011814 <xTaskRemoveFromEventList>
 8010d32:	4603      	mov	r3, r0
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d00e      	beq.n	8010d56 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010d38:	683b      	ldr	r3, [r7, #0]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d00b      	beq.n	8010d56 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010d3e:	683b      	ldr	r3, [r7, #0]
 8010d40:	2201      	movs	r2, #1
 8010d42:	601a      	str	r2, [r3, #0]
 8010d44:	e007      	b.n	8010d56 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010d46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d4a:	3301      	adds	r3, #1
 8010d4c:	b2db      	uxtb	r3, r3
 8010d4e:	b25a      	sxtb	r2, r3
 8010d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010d56:	2301      	movs	r3, #1
 8010d58:	637b      	str	r3, [r7, #52]	; 0x34
 8010d5a:	e001      	b.n	8010d60 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010d5c:	2300      	movs	r3, #0
 8010d5e:	637b      	str	r3, [r7, #52]	; 0x34
 8010d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d62:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010d6a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010d6e:	4618      	mov	r0, r3
 8010d70:	3738      	adds	r7, #56	; 0x38
 8010d72:	46bd      	mov	sp, r7
 8010d74:	bd80      	pop	{r7, pc}
	...

08010d78 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010d78:	b580      	push	{r7, lr}
 8010d7a:	b08e      	sub	sp, #56	; 0x38
 8010d7c:	af00      	add	r7, sp, #0
 8010d7e:	6078      	str	r0, [r7, #4]
 8010d80:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8010d82:	2300      	movs	r3, #0
 8010d84:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010d8a:	2300      	movs	r3, #0
 8010d8c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d10a      	bne.n	8010daa <xQueueSemaphoreTake+0x32>
	__asm volatile
 8010d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d98:	f383 8811 	msr	BASEPRI, r3
 8010d9c:	f3bf 8f6f 	isb	sy
 8010da0:	f3bf 8f4f 	dsb	sy
 8010da4:	623b      	str	r3, [r7, #32]
}
 8010da6:	bf00      	nop
 8010da8:	e7fe      	b.n	8010da8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d00a      	beq.n	8010dc8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8010db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010db6:	f383 8811 	msr	BASEPRI, r3
 8010dba:	f3bf 8f6f 	isb	sy
 8010dbe:	f3bf 8f4f 	dsb	sy
 8010dc2:	61fb      	str	r3, [r7, #28]
}
 8010dc4:	bf00      	nop
 8010dc6:	e7fe      	b.n	8010dc6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010dc8:	f000 fe2c 	bl	8011a24 <xTaskGetSchedulerState>
 8010dcc:	4603      	mov	r3, r0
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d102      	bne.n	8010dd8 <xQueueSemaphoreTake+0x60>
 8010dd2:	683b      	ldr	r3, [r7, #0]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d101      	bne.n	8010ddc <xQueueSemaphoreTake+0x64>
 8010dd8:	2301      	movs	r3, #1
 8010dda:	e000      	b.n	8010dde <xQueueSemaphoreTake+0x66>
 8010ddc:	2300      	movs	r3, #0
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d10a      	bne.n	8010df8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8010de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010de6:	f383 8811 	msr	BASEPRI, r3
 8010dea:	f3bf 8f6f 	isb	sy
 8010dee:	f3bf 8f4f 	dsb	sy
 8010df2:	61bb      	str	r3, [r7, #24]
}
 8010df4:	bf00      	nop
 8010df6:	e7fe      	b.n	8010df6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010df8:	f001 f806 	bl	8011e08 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e00:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d024      	beq.n	8010e52 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e0a:	1e5a      	subs	r2, r3, #1
 8010e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e0e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d104      	bne.n	8010e22 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010e18:	f000 ff7a 	bl	8011d10 <pvTaskIncrementMutexHeldCount>
 8010e1c:	4602      	mov	r2, r0
 8010e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e20:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e24:	691b      	ldr	r3, [r3, #16]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d00f      	beq.n	8010e4a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e2c:	3310      	adds	r3, #16
 8010e2e:	4618      	mov	r0, r3
 8010e30:	f000 fcf0 	bl	8011814 <xTaskRemoveFromEventList>
 8010e34:	4603      	mov	r3, r0
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d007      	beq.n	8010e4a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010e3a:	4b54      	ldr	r3, [pc, #336]	; (8010f8c <xQueueSemaphoreTake+0x214>)
 8010e3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e40:	601a      	str	r2, [r3, #0]
 8010e42:	f3bf 8f4f 	dsb	sy
 8010e46:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010e4a:	f001 f80d 	bl	8011e68 <vPortExitCritical>
				return pdPASS;
 8010e4e:	2301      	movs	r3, #1
 8010e50:	e097      	b.n	8010f82 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010e52:	683b      	ldr	r3, [r7, #0]
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d111      	bne.n	8010e7c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d00a      	beq.n	8010e74 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8010e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e62:	f383 8811 	msr	BASEPRI, r3
 8010e66:	f3bf 8f6f 	isb	sy
 8010e6a:	f3bf 8f4f 	dsb	sy
 8010e6e:	617b      	str	r3, [r7, #20]
}
 8010e70:	bf00      	nop
 8010e72:	e7fe      	b.n	8010e72 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010e74:	f000 fff8 	bl	8011e68 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010e78:	2300      	movs	r3, #0
 8010e7a:	e082      	b.n	8010f82 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d106      	bne.n	8010e90 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010e82:	f107 030c 	add.w	r3, r7, #12
 8010e86:	4618      	mov	r0, r3
 8010e88:	f000 fd28 	bl	80118dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010e8c:	2301      	movs	r3, #1
 8010e8e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010e90:	f000 ffea 	bl	8011e68 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010e94:	f000 fad0 	bl	8011438 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010e98:	f000 ffb6 	bl	8011e08 <vPortEnterCritical>
 8010e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010ea2:	b25b      	sxtb	r3, r3
 8010ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ea8:	d103      	bne.n	8010eb2 <xQueueSemaphoreTake+0x13a>
 8010eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eac:	2200      	movs	r2, #0
 8010eae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010eb8:	b25b      	sxtb	r3, r3
 8010eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ebe:	d103      	bne.n	8010ec8 <xQueueSemaphoreTake+0x150>
 8010ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ec2:	2200      	movs	r2, #0
 8010ec4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010ec8:	f000 ffce 	bl	8011e68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010ecc:	463a      	mov	r2, r7
 8010ece:	f107 030c 	add.w	r3, r7, #12
 8010ed2:	4611      	mov	r1, r2
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	f000 fd17 	bl	8011908 <xTaskCheckForTimeOut>
 8010eda:	4603      	mov	r3, r0
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d132      	bne.n	8010f46 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010ee0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010ee2:	f000 f9f2 	bl	80112ca <prvIsQueueEmpty>
 8010ee6:	4603      	mov	r3, r0
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d026      	beq.n	8010f3a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d109      	bne.n	8010f08 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8010ef4:	f000 ff88 	bl	8011e08 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010efa:	689b      	ldr	r3, [r3, #8]
 8010efc:	4618      	mov	r0, r3
 8010efe:	f000 fdaf 	bl	8011a60 <xTaskPriorityInherit>
 8010f02:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8010f04:	f000 ffb0 	bl	8011e68 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f0a:	3324      	adds	r3, #36	; 0x24
 8010f0c:	683a      	ldr	r2, [r7, #0]
 8010f0e:	4611      	mov	r1, r2
 8010f10:	4618      	mov	r0, r3
 8010f12:	f000 fc5b 	bl	80117cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010f16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010f18:	f000 f985 	bl	8011226 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010f1c:	f000 fa9a 	bl	8011454 <xTaskResumeAll>
 8010f20:	4603      	mov	r3, r0
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	f47f af68 	bne.w	8010df8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8010f28:	4b18      	ldr	r3, [pc, #96]	; (8010f8c <xQueueSemaphoreTake+0x214>)
 8010f2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f2e:	601a      	str	r2, [r3, #0]
 8010f30:	f3bf 8f4f 	dsb	sy
 8010f34:	f3bf 8f6f 	isb	sy
 8010f38:	e75e      	b.n	8010df8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010f3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010f3c:	f000 f973 	bl	8011226 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010f40:	f000 fa88 	bl	8011454 <xTaskResumeAll>
 8010f44:	e758      	b.n	8010df8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8010f46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010f48:	f000 f96d 	bl	8011226 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010f4c:	f000 fa82 	bl	8011454 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010f50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010f52:	f000 f9ba 	bl	80112ca <prvIsQueueEmpty>
 8010f56:	4603      	mov	r3, r0
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	f43f af4d 	beq.w	8010df8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d00d      	beq.n	8010f80 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8010f64:	f000 ff50 	bl	8011e08 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010f68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010f6a:	f000 f8b4 	bl	80110d6 <prvGetDisinheritPriorityAfterTimeout>
 8010f6e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f72:	689b      	ldr	r3, [r3, #8]
 8010f74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010f76:	4618      	mov	r0, r3
 8010f78:	f000 fe48 	bl	8011c0c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010f7c:	f000 ff74 	bl	8011e68 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010f80:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010f82:	4618      	mov	r0, r3
 8010f84:	3738      	adds	r7, #56	; 0x38
 8010f86:	46bd      	mov	sp, r7
 8010f88:	bd80      	pop	{r7, pc}
 8010f8a:	bf00      	nop
 8010f8c:	e000ed04 	.word	0xe000ed04

08010f90 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010f90:	b580      	push	{r7, lr}
 8010f92:	b08e      	sub	sp, #56	; 0x38
 8010f94:	af00      	add	r7, sp, #0
 8010f96:	60f8      	str	r0, [r7, #12]
 8010f98:	60b9      	str	r1, [r7, #8]
 8010f9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d10a      	bne.n	8010fbc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8010fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010faa:	f383 8811 	msr	BASEPRI, r3
 8010fae:	f3bf 8f6f 	isb	sy
 8010fb2:	f3bf 8f4f 	dsb	sy
 8010fb6:	623b      	str	r3, [r7, #32]
}
 8010fb8:	bf00      	nop
 8010fba:	e7fe      	b.n	8010fba <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010fbc:	68bb      	ldr	r3, [r7, #8]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d103      	bne.n	8010fca <xQueueReceiveFromISR+0x3a>
 8010fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d101      	bne.n	8010fce <xQueueReceiveFromISR+0x3e>
 8010fca:	2301      	movs	r3, #1
 8010fcc:	e000      	b.n	8010fd0 <xQueueReceiveFromISR+0x40>
 8010fce:	2300      	movs	r3, #0
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d10a      	bne.n	8010fea <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8010fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fd8:	f383 8811 	msr	BASEPRI, r3
 8010fdc:	f3bf 8f6f 	isb	sy
 8010fe0:	f3bf 8f4f 	dsb	sy
 8010fe4:	61fb      	str	r3, [r7, #28]
}
 8010fe6:	bf00      	nop
 8010fe8:	e7fe      	b.n	8010fe8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010fea:	f000 ffbf 	bl	8011f6c <vPortValidateInterruptPriority>
	__asm volatile
 8010fee:	f3ef 8211 	mrs	r2, BASEPRI
 8010ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ff6:	f383 8811 	msr	BASEPRI, r3
 8010ffa:	f3bf 8f6f 	isb	sy
 8010ffe:	f3bf 8f4f 	dsb	sy
 8011002:	61ba      	str	r2, [r7, #24]
 8011004:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8011006:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011008:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801100a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801100c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801100e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011012:	2b00      	cmp	r3, #0
 8011014:	d02f      	beq.n	8011076 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8011016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011018:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801101c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011020:	68b9      	ldr	r1, [r7, #8]
 8011022:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011024:	f000 f8d9 	bl	80111da <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801102a:	1e5a      	subs	r2, r3, #1
 801102c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801102e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8011030:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011038:	d112      	bne.n	8011060 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801103a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801103c:	691b      	ldr	r3, [r3, #16]
 801103e:	2b00      	cmp	r3, #0
 8011040:	d016      	beq.n	8011070 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011044:	3310      	adds	r3, #16
 8011046:	4618      	mov	r0, r3
 8011048:	f000 fbe4 	bl	8011814 <xTaskRemoveFromEventList>
 801104c:	4603      	mov	r3, r0
 801104e:	2b00      	cmp	r3, #0
 8011050:	d00e      	beq.n	8011070 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	2b00      	cmp	r3, #0
 8011056:	d00b      	beq.n	8011070 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	2201      	movs	r2, #1
 801105c:	601a      	str	r2, [r3, #0]
 801105e:	e007      	b.n	8011070 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011060:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011064:	3301      	adds	r3, #1
 8011066:	b2db      	uxtb	r3, r3
 8011068:	b25a      	sxtb	r2, r3
 801106a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801106c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8011070:	2301      	movs	r3, #1
 8011072:	637b      	str	r3, [r7, #52]	; 0x34
 8011074:	e001      	b.n	801107a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8011076:	2300      	movs	r3, #0
 8011078:	637b      	str	r3, [r7, #52]	; 0x34
 801107a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801107c:	613b      	str	r3, [r7, #16]
	__asm volatile
 801107e:	693b      	ldr	r3, [r7, #16]
 8011080:	f383 8811 	msr	BASEPRI, r3
}
 8011084:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011088:	4618      	mov	r0, r3
 801108a:	3738      	adds	r7, #56	; 0x38
 801108c:	46bd      	mov	sp, r7
 801108e:	bd80      	pop	{r7, pc}

08011090 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8011090:	b580      	push	{r7, lr}
 8011092:	b084      	sub	sp, #16
 8011094:	af00      	add	r7, sp, #0
 8011096:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d10a      	bne.n	80110b8 <vQueueDelete+0x28>
	__asm volatile
 80110a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110a6:	f383 8811 	msr	BASEPRI, r3
 80110aa:	f3bf 8f6f 	isb	sy
 80110ae:	f3bf 8f4f 	dsb	sy
 80110b2:	60bb      	str	r3, [r7, #8]
}
 80110b4:	bf00      	nop
 80110b6:	e7fe      	b.n	80110b6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80110b8:	68f8      	ldr	r0, [r7, #12]
 80110ba:	f000 f95f 	bl	801137c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d102      	bne.n	80110ce <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80110c8:	68f8      	ldr	r0, [r7, #12]
 80110ca:	f001 f85b 	bl	8012184 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80110ce:	bf00      	nop
 80110d0:	3710      	adds	r7, #16
 80110d2:	46bd      	mov	sp, r7
 80110d4:	bd80      	pop	{r7, pc}

080110d6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80110d6:	b480      	push	{r7}
 80110d8:	b085      	sub	sp, #20
 80110da:	af00      	add	r7, sp, #0
 80110dc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d006      	beq.n	80110f4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80110f0:	60fb      	str	r3, [r7, #12]
 80110f2:	e001      	b.n	80110f8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80110f4:	2300      	movs	r3, #0
 80110f6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80110f8:	68fb      	ldr	r3, [r7, #12]
	}
 80110fa:	4618      	mov	r0, r3
 80110fc:	3714      	adds	r7, #20
 80110fe:	46bd      	mov	sp, r7
 8011100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011104:	4770      	bx	lr

08011106 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011106:	b580      	push	{r7, lr}
 8011108:	b086      	sub	sp, #24
 801110a:	af00      	add	r7, sp, #0
 801110c:	60f8      	str	r0, [r7, #12]
 801110e:	60b9      	str	r1, [r7, #8]
 8011110:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011112:	2300      	movs	r3, #0
 8011114:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801111a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011120:	2b00      	cmp	r3, #0
 8011122:	d10d      	bne.n	8011140 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	2b00      	cmp	r3, #0
 801112a:	d14d      	bne.n	80111c8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	689b      	ldr	r3, [r3, #8]
 8011130:	4618      	mov	r0, r3
 8011132:	f000 fcfd 	bl	8011b30 <xTaskPriorityDisinherit>
 8011136:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	2200      	movs	r2, #0
 801113c:	609a      	str	r2, [r3, #8]
 801113e:	e043      	b.n	80111c8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	2b00      	cmp	r3, #0
 8011144:	d119      	bne.n	801117a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	6858      	ldr	r0, [r3, #4]
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801114e:	461a      	mov	r2, r3
 8011150:	68b9      	ldr	r1, [r7, #8]
 8011152:	f001 fc9d 	bl	8012a90 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	685a      	ldr	r2, [r3, #4]
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801115e:	441a      	add	r2, r3
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	685a      	ldr	r2, [r3, #4]
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	689b      	ldr	r3, [r3, #8]
 801116c:	429a      	cmp	r2, r3
 801116e:	d32b      	bcc.n	80111c8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	681a      	ldr	r2, [r3, #0]
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	605a      	str	r2, [r3, #4]
 8011178:	e026      	b.n	80111c8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	68d8      	ldr	r0, [r3, #12]
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011182:	461a      	mov	r2, r3
 8011184:	68b9      	ldr	r1, [r7, #8]
 8011186:	f001 fc83 	bl	8012a90 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	68da      	ldr	r2, [r3, #12]
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011192:	425b      	negs	r3, r3
 8011194:	441a      	add	r2, r3
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	68da      	ldr	r2, [r3, #12]
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	429a      	cmp	r2, r3
 80111a4:	d207      	bcs.n	80111b6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	689a      	ldr	r2, [r3, #8]
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80111ae:	425b      	negs	r3, r3
 80111b0:	441a      	add	r2, r3
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	2b02      	cmp	r3, #2
 80111ba:	d105      	bne.n	80111c8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80111bc:	693b      	ldr	r3, [r7, #16]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d002      	beq.n	80111c8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80111c2:	693b      	ldr	r3, [r7, #16]
 80111c4:	3b01      	subs	r3, #1
 80111c6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80111c8:	693b      	ldr	r3, [r7, #16]
 80111ca:	1c5a      	adds	r2, r3, #1
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80111d0:	697b      	ldr	r3, [r7, #20]
}
 80111d2:	4618      	mov	r0, r3
 80111d4:	3718      	adds	r7, #24
 80111d6:	46bd      	mov	sp, r7
 80111d8:	bd80      	pop	{r7, pc}

080111da <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80111da:	b580      	push	{r7, lr}
 80111dc:	b082      	sub	sp, #8
 80111de:	af00      	add	r7, sp, #0
 80111e0:	6078      	str	r0, [r7, #4]
 80111e2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d018      	beq.n	801121e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	68da      	ldr	r2, [r3, #12]
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80111f4:	441a      	add	r2, r3
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	68da      	ldr	r2, [r3, #12]
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	689b      	ldr	r3, [r3, #8]
 8011202:	429a      	cmp	r2, r3
 8011204:	d303      	bcc.n	801120e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	681a      	ldr	r2, [r3, #0]
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	68d9      	ldr	r1, [r3, #12]
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011216:	461a      	mov	r2, r3
 8011218:	6838      	ldr	r0, [r7, #0]
 801121a:	f001 fc39 	bl	8012a90 <memcpy>
	}
}
 801121e:	bf00      	nop
 8011220:	3708      	adds	r7, #8
 8011222:	46bd      	mov	sp, r7
 8011224:	bd80      	pop	{r7, pc}

08011226 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011226:	b580      	push	{r7, lr}
 8011228:	b084      	sub	sp, #16
 801122a:	af00      	add	r7, sp, #0
 801122c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801122e:	f000 fdeb 	bl	8011e08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011238:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801123a:	e011      	b.n	8011260 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011240:	2b00      	cmp	r3, #0
 8011242:	d012      	beq.n	801126a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	3324      	adds	r3, #36	; 0x24
 8011248:	4618      	mov	r0, r3
 801124a:	f000 fae3 	bl	8011814 <xTaskRemoveFromEventList>
 801124e:	4603      	mov	r3, r0
 8011250:	2b00      	cmp	r3, #0
 8011252:	d001      	beq.n	8011258 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011254:	f000 fbba 	bl	80119cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011258:	7bfb      	ldrb	r3, [r7, #15]
 801125a:	3b01      	subs	r3, #1
 801125c:	b2db      	uxtb	r3, r3
 801125e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011260:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011264:	2b00      	cmp	r3, #0
 8011266:	dce9      	bgt.n	801123c <prvUnlockQueue+0x16>
 8011268:	e000      	b.n	801126c <prvUnlockQueue+0x46>
					break;
 801126a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	22ff      	movs	r2, #255	; 0xff
 8011270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011274:	f000 fdf8 	bl	8011e68 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011278:	f000 fdc6 	bl	8011e08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011282:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011284:	e011      	b.n	80112aa <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	691b      	ldr	r3, [r3, #16]
 801128a:	2b00      	cmp	r3, #0
 801128c:	d012      	beq.n	80112b4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	3310      	adds	r3, #16
 8011292:	4618      	mov	r0, r3
 8011294:	f000 fabe 	bl	8011814 <xTaskRemoveFromEventList>
 8011298:	4603      	mov	r3, r0
 801129a:	2b00      	cmp	r3, #0
 801129c:	d001      	beq.n	80112a2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801129e:	f000 fb95 	bl	80119cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80112a2:	7bbb      	ldrb	r3, [r7, #14]
 80112a4:	3b01      	subs	r3, #1
 80112a6:	b2db      	uxtb	r3, r3
 80112a8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80112aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	dce9      	bgt.n	8011286 <prvUnlockQueue+0x60>
 80112b2:	e000      	b.n	80112b6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80112b4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	22ff      	movs	r2, #255	; 0xff
 80112ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80112be:	f000 fdd3 	bl	8011e68 <vPortExitCritical>
}
 80112c2:	bf00      	nop
 80112c4:	3710      	adds	r7, #16
 80112c6:	46bd      	mov	sp, r7
 80112c8:	bd80      	pop	{r7, pc}

080112ca <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80112ca:	b580      	push	{r7, lr}
 80112cc:	b084      	sub	sp, #16
 80112ce:	af00      	add	r7, sp, #0
 80112d0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80112d2:	f000 fd99 	bl	8011e08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d102      	bne.n	80112e4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80112de:	2301      	movs	r3, #1
 80112e0:	60fb      	str	r3, [r7, #12]
 80112e2:	e001      	b.n	80112e8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80112e4:	2300      	movs	r3, #0
 80112e6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80112e8:	f000 fdbe 	bl	8011e68 <vPortExitCritical>

	return xReturn;
 80112ec:	68fb      	ldr	r3, [r7, #12]
}
 80112ee:	4618      	mov	r0, r3
 80112f0:	3710      	adds	r7, #16
 80112f2:	46bd      	mov	sp, r7
 80112f4:	bd80      	pop	{r7, pc}

080112f6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80112f6:	b580      	push	{r7, lr}
 80112f8:	b084      	sub	sp, #16
 80112fa:	af00      	add	r7, sp, #0
 80112fc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80112fe:	f000 fd83 	bl	8011e08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801130a:	429a      	cmp	r2, r3
 801130c:	d102      	bne.n	8011314 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801130e:	2301      	movs	r3, #1
 8011310:	60fb      	str	r3, [r7, #12]
 8011312:	e001      	b.n	8011318 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011314:	2300      	movs	r3, #0
 8011316:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011318:	f000 fda6 	bl	8011e68 <vPortExitCritical>

	return xReturn;
 801131c:	68fb      	ldr	r3, [r7, #12]
}
 801131e:	4618      	mov	r0, r3
 8011320:	3710      	adds	r7, #16
 8011322:	46bd      	mov	sp, r7
 8011324:	bd80      	pop	{r7, pc}
	...

08011328 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8011328:	b480      	push	{r7}
 801132a:	b085      	sub	sp, #20
 801132c:	af00      	add	r7, sp, #0
 801132e:	6078      	str	r0, [r7, #4]
 8011330:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011332:	2300      	movs	r3, #0
 8011334:	60fb      	str	r3, [r7, #12]
 8011336:	e014      	b.n	8011362 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8011338:	4a0f      	ldr	r2, [pc, #60]	; (8011378 <vQueueAddToRegistry+0x50>)
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d10b      	bne.n	801135c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8011344:	490c      	ldr	r1, [pc, #48]	; (8011378 <vQueueAddToRegistry+0x50>)
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	683a      	ldr	r2, [r7, #0]
 801134a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801134e:	4a0a      	ldr	r2, [pc, #40]	; (8011378 <vQueueAddToRegistry+0x50>)
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	00db      	lsls	r3, r3, #3
 8011354:	4413      	add	r3, r2
 8011356:	687a      	ldr	r2, [r7, #4]
 8011358:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801135a:	e006      	b.n	801136a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	3301      	adds	r3, #1
 8011360:	60fb      	str	r3, [r7, #12]
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	2b07      	cmp	r3, #7
 8011366:	d9e7      	bls.n	8011338 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011368:	bf00      	nop
 801136a:	bf00      	nop
 801136c:	3714      	adds	r7, #20
 801136e:	46bd      	mov	sp, r7
 8011370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011374:	4770      	bx	lr
 8011376:	bf00      	nop
 8011378:	200064ac 	.word	0x200064ac

0801137c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 801137c:	b480      	push	{r7}
 801137e:	b085      	sub	sp, #20
 8011380:	af00      	add	r7, sp, #0
 8011382:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011384:	2300      	movs	r3, #0
 8011386:	60fb      	str	r3, [r7, #12]
 8011388:	e016      	b.n	80113b8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801138a:	4a10      	ldr	r2, [pc, #64]	; (80113cc <vQueueUnregisterQueue+0x50>)
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	00db      	lsls	r3, r3, #3
 8011390:	4413      	add	r3, r2
 8011392:	685b      	ldr	r3, [r3, #4]
 8011394:	687a      	ldr	r2, [r7, #4]
 8011396:	429a      	cmp	r2, r3
 8011398:	d10b      	bne.n	80113b2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801139a:	4a0c      	ldr	r2, [pc, #48]	; (80113cc <vQueueUnregisterQueue+0x50>)
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	2100      	movs	r1, #0
 80113a0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80113a4:	4a09      	ldr	r2, [pc, #36]	; (80113cc <vQueueUnregisterQueue+0x50>)
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	00db      	lsls	r3, r3, #3
 80113aa:	4413      	add	r3, r2
 80113ac:	2200      	movs	r2, #0
 80113ae:	605a      	str	r2, [r3, #4]
				break;
 80113b0:	e006      	b.n	80113c0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	3301      	adds	r3, #1
 80113b6:	60fb      	str	r3, [r7, #12]
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	2b07      	cmp	r3, #7
 80113bc:	d9e5      	bls.n	801138a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80113be:	bf00      	nop
 80113c0:	bf00      	nop
 80113c2:	3714      	adds	r7, #20
 80113c4:	46bd      	mov	sp, r7
 80113c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ca:	4770      	bx	lr
 80113cc:	200064ac 	.word	0x200064ac

080113d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80113d0:	b580      	push	{r7, lr}
 80113d2:	b084      	sub	sp, #16
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80113d8:	2300      	movs	r3, #0
 80113da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d017      	beq.n	8011412 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80113e2:	4b13      	ldr	r3, [pc, #76]	; (8011430 <vTaskDelay+0x60>)
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d00a      	beq.n	8011400 <vTaskDelay+0x30>
	__asm volatile
 80113ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113ee:	f383 8811 	msr	BASEPRI, r3
 80113f2:	f3bf 8f6f 	isb	sy
 80113f6:	f3bf 8f4f 	dsb	sy
 80113fa:	60bb      	str	r3, [r7, #8]
}
 80113fc:	bf00      	nop
 80113fe:	e7fe      	b.n	80113fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8011400:	f000 f81a 	bl	8011438 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011404:	2100      	movs	r1, #0
 8011406:	6878      	ldr	r0, [r7, #4]
 8011408:	f000 fc96 	bl	8011d38 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801140c:	f000 f822 	bl	8011454 <xTaskResumeAll>
 8011410:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d107      	bne.n	8011428 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8011418:	4b06      	ldr	r3, [pc, #24]	; (8011434 <vTaskDelay+0x64>)
 801141a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801141e:	601a      	str	r2, [r3, #0]
 8011420:	f3bf 8f4f 	dsb	sy
 8011424:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011428:	bf00      	nop
 801142a:	3710      	adds	r7, #16
 801142c:	46bd      	mov	sp, r7
 801142e:	bd80      	pop	{r7, pc}
 8011430:	200008f4 	.word	0x200008f4
 8011434:	e000ed04 	.word	0xe000ed04

08011438 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011438:	b480      	push	{r7}
 801143a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801143c:	4b04      	ldr	r3, [pc, #16]	; (8011450 <vTaskSuspendAll+0x18>)
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	3301      	adds	r3, #1
 8011442:	4a03      	ldr	r2, [pc, #12]	; (8011450 <vTaskSuspendAll+0x18>)
 8011444:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8011446:	bf00      	nop
 8011448:	46bd      	mov	sp, r7
 801144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801144e:	4770      	bx	lr
 8011450:	200008f4 	.word	0x200008f4

08011454 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011454:	b580      	push	{r7, lr}
 8011456:	b084      	sub	sp, #16
 8011458:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801145a:	2300      	movs	r3, #0
 801145c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801145e:	2300      	movs	r3, #0
 8011460:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011462:	4b42      	ldr	r3, [pc, #264]	; (801156c <xTaskResumeAll+0x118>)
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	2b00      	cmp	r3, #0
 8011468:	d10a      	bne.n	8011480 <xTaskResumeAll+0x2c>
	__asm volatile
 801146a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801146e:	f383 8811 	msr	BASEPRI, r3
 8011472:	f3bf 8f6f 	isb	sy
 8011476:	f3bf 8f4f 	dsb	sy
 801147a:	603b      	str	r3, [r7, #0]
}
 801147c:	bf00      	nop
 801147e:	e7fe      	b.n	801147e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011480:	f000 fcc2 	bl	8011e08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011484:	4b39      	ldr	r3, [pc, #228]	; (801156c <xTaskResumeAll+0x118>)
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	3b01      	subs	r3, #1
 801148a:	4a38      	ldr	r2, [pc, #224]	; (801156c <xTaskResumeAll+0x118>)
 801148c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801148e:	4b37      	ldr	r3, [pc, #220]	; (801156c <xTaskResumeAll+0x118>)
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d162      	bne.n	801155c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011496:	4b36      	ldr	r3, [pc, #216]	; (8011570 <xTaskResumeAll+0x11c>)
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	2b00      	cmp	r3, #0
 801149c:	d05e      	beq.n	801155c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801149e:	e02f      	b.n	8011500 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80114a0:	4b34      	ldr	r3, [pc, #208]	; (8011574 <xTaskResumeAll+0x120>)
 80114a2:	68db      	ldr	r3, [r3, #12]
 80114a4:	68db      	ldr	r3, [r3, #12]
 80114a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	3318      	adds	r3, #24
 80114ac:	4618      	mov	r0, r3
 80114ae:	f7ff f904 	bl	80106ba <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	3304      	adds	r3, #4
 80114b6:	4618      	mov	r0, r3
 80114b8:	f7ff f8ff 	bl	80106ba <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114c0:	4b2d      	ldr	r3, [pc, #180]	; (8011578 <xTaskResumeAll+0x124>)
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	429a      	cmp	r2, r3
 80114c6:	d903      	bls.n	80114d0 <xTaskResumeAll+0x7c>
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114cc:	4a2a      	ldr	r2, [pc, #168]	; (8011578 <xTaskResumeAll+0x124>)
 80114ce:	6013      	str	r3, [r2, #0]
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114d4:	4613      	mov	r3, r2
 80114d6:	009b      	lsls	r3, r3, #2
 80114d8:	4413      	add	r3, r2
 80114da:	009b      	lsls	r3, r3, #2
 80114dc:	4a27      	ldr	r2, [pc, #156]	; (801157c <xTaskResumeAll+0x128>)
 80114de:	441a      	add	r2, r3
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	3304      	adds	r3, #4
 80114e4:	4619      	mov	r1, r3
 80114e6:	4610      	mov	r0, r2
 80114e8:	f7ff f88a 	bl	8010600 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114f0:	4b23      	ldr	r3, [pc, #140]	; (8011580 <xTaskResumeAll+0x12c>)
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114f6:	429a      	cmp	r2, r3
 80114f8:	d302      	bcc.n	8011500 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80114fa:	4b22      	ldr	r3, [pc, #136]	; (8011584 <xTaskResumeAll+0x130>)
 80114fc:	2201      	movs	r2, #1
 80114fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011500:	4b1c      	ldr	r3, [pc, #112]	; (8011574 <xTaskResumeAll+0x120>)
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	2b00      	cmp	r3, #0
 8011506:	d1cb      	bne.n	80114a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	2b00      	cmp	r3, #0
 801150c:	d001      	beq.n	8011512 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801150e:	f000 fa69 	bl	80119e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8011512:	4b1d      	ldr	r3, [pc, #116]	; (8011588 <xTaskResumeAll+0x134>)
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	2b00      	cmp	r3, #0
 801151c:	d010      	beq.n	8011540 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801151e:	f000 f837 	bl	8011590 <xTaskIncrementTick>
 8011522:	4603      	mov	r3, r0
 8011524:	2b00      	cmp	r3, #0
 8011526:	d002      	beq.n	801152e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8011528:	4b16      	ldr	r3, [pc, #88]	; (8011584 <xTaskResumeAll+0x130>)
 801152a:	2201      	movs	r2, #1
 801152c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	3b01      	subs	r3, #1
 8011532:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	2b00      	cmp	r3, #0
 8011538:	d1f1      	bne.n	801151e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801153a:	4b13      	ldr	r3, [pc, #76]	; (8011588 <xTaskResumeAll+0x134>)
 801153c:	2200      	movs	r2, #0
 801153e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011540:	4b10      	ldr	r3, [pc, #64]	; (8011584 <xTaskResumeAll+0x130>)
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	2b00      	cmp	r3, #0
 8011546:	d009      	beq.n	801155c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011548:	2301      	movs	r3, #1
 801154a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801154c:	4b0f      	ldr	r3, [pc, #60]	; (801158c <xTaskResumeAll+0x138>)
 801154e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011552:	601a      	str	r2, [r3, #0]
 8011554:	f3bf 8f4f 	dsb	sy
 8011558:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801155c:	f000 fc84 	bl	8011e68 <vPortExitCritical>

	return xAlreadyYielded;
 8011560:	68bb      	ldr	r3, [r7, #8]
}
 8011562:	4618      	mov	r0, r3
 8011564:	3710      	adds	r7, #16
 8011566:	46bd      	mov	sp, r7
 8011568:	bd80      	pop	{r7, pc}
 801156a:	bf00      	nop
 801156c:	200008f4 	.word	0x200008f4
 8011570:	200008d4 	.word	0x200008d4
 8011574:	200008ac 	.word	0x200008ac
 8011578:	200008dc 	.word	0x200008dc
 801157c:	20000444 	.word	0x20000444
 8011580:	20000440 	.word	0x20000440
 8011584:	200008e8 	.word	0x200008e8
 8011588:	200008e4 	.word	0x200008e4
 801158c:	e000ed04 	.word	0xe000ed04

08011590 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011590:	b580      	push	{r7, lr}
 8011592:	b086      	sub	sp, #24
 8011594:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011596:	2300      	movs	r3, #0
 8011598:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801159a:	4b4f      	ldr	r3, [pc, #316]	; (80116d8 <xTaskIncrementTick+0x148>)
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	2b00      	cmp	r3, #0
 80115a0:	f040 808f 	bne.w	80116c2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80115a4:	4b4d      	ldr	r3, [pc, #308]	; (80116dc <xTaskIncrementTick+0x14c>)
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	3301      	adds	r3, #1
 80115aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80115ac:	4a4b      	ldr	r2, [pc, #300]	; (80116dc <xTaskIncrementTick+0x14c>)
 80115ae:	693b      	ldr	r3, [r7, #16]
 80115b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80115b2:	693b      	ldr	r3, [r7, #16]
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d120      	bne.n	80115fa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80115b8:	4b49      	ldr	r3, [pc, #292]	; (80116e0 <xTaskIncrementTick+0x150>)
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d00a      	beq.n	80115d8 <xTaskIncrementTick+0x48>
	__asm volatile
 80115c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115c6:	f383 8811 	msr	BASEPRI, r3
 80115ca:	f3bf 8f6f 	isb	sy
 80115ce:	f3bf 8f4f 	dsb	sy
 80115d2:	603b      	str	r3, [r7, #0]
}
 80115d4:	bf00      	nop
 80115d6:	e7fe      	b.n	80115d6 <xTaskIncrementTick+0x46>
 80115d8:	4b41      	ldr	r3, [pc, #260]	; (80116e0 <xTaskIncrementTick+0x150>)
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	60fb      	str	r3, [r7, #12]
 80115de:	4b41      	ldr	r3, [pc, #260]	; (80116e4 <xTaskIncrementTick+0x154>)
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	4a3f      	ldr	r2, [pc, #252]	; (80116e0 <xTaskIncrementTick+0x150>)
 80115e4:	6013      	str	r3, [r2, #0]
 80115e6:	4a3f      	ldr	r2, [pc, #252]	; (80116e4 <xTaskIncrementTick+0x154>)
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	6013      	str	r3, [r2, #0]
 80115ec:	4b3e      	ldr	r3, [pc, #248]	; (80116e8 <xTaskIncrementTick+0x158>)
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	3301      	adds	r3, #1
 80115f2:	4a3d      	ldr	r2, [pc, #244]	; (80116e8 <xTaskIncrementTick+0x158>)
 80115f4:	6013      	str	r3, [r2, #0]
 80115f6:	f000 f9f5 	bl	80119e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80115fa:	4b3c      	ldr	r3, [pc, #240]	; (80116ec <xTaskIncrementTick+0x15c>)
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	693a      	ldr	r2, [r7, #16]
 8011600:	429a      	cmp	r2, r3
 8011602:	d349      	bcc.n	8011698 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011604:	4b36      	ldr	r3, [pc, #216]	; (80116e0 <xTaskIncrementTick+0x150>)
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	2b00      	cmp	r3, #0
 801160c:	d104      	bne.n	8011618 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801160e:	4b37      	ldr	r3, [pc, #220]	; (80116ec <xTaskIncrementTick+0x15c>)
 8011610:	f04f 32ff 	mov.w	r2, #4294967295
 8011614:	601a      	str	r2, [r3, #0]
					break;
 8011616:	e03f      	b.n	8011698 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011618:	4b31      	ldr	r3, [pc, #196]	; (80116e0 <xTaskIncrementTick+0x150>)
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	68db      	ldr	r3, [r3, #12]
 801161e:	68db      	ldr	r3, [r3, #12]
 8011620:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011622:	68bb      	ldr	r3, [r7, #8]
 8011624:	685b      	ldr	r3, [r3, #4]
 8011626:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011628:	693a      	ldr	r2, [r7, #16]
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	429a      	cmp	r2, r3
 801162e:	d203      	bcs.n	8011638 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011630:	4a2e      	ldr	r2, [pc, #184]	; (80116ec <xTaskIncrementTick+0x15c>)
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011636:	e02f      	b.n	8011698 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011638:	68bb      	ldr	r3, [r7, #8]
 801163a:	3304      	adds	r3, #4
 801163c:	4618      	mov	r0, r3
 801163e:	f7ff f83c 	bl	80106ba <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011642:	68bb      	ldr	r3, [r7, #8]
 8011644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011646:	2b00      	cmp	r3, #0
 8011648:	d004      	beq.n	8011654 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801164a:	68bb      	ldr	r3, [r7, #8]
 801164c:	3318      	adds	r3, #24
 801164e:	4618      	mov	r0, r3
 8011650:	f7ff f833 	bl	80106ba <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011654:	68bb      	ldr	r3, [r7, #8]
 8011656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011658:	4b25      	ldr	r3, [pc, #148]	; (80116f0 <xTaskIncrementTick+0x160>)
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	429a      	cmp	r2, r3
 801165e:	d903      	bls.n	8011668 <xTaskIncrementTick+0xd8>
 8011660:	68bb      	ldr	r3, [r7, #8]
 8011662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011664:	4a22      	ldr	r2, [pc, #136]	; (80116f0 <xTaskIncrementTick+0x160>)
 8011666:	6013      	str	r3, [r2, #0]
 8011668:	68bb      	ldr	r3, [r7, #8]
 801166a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801166c:	4613      	mov	r3, r2
 801166e:	009b      	lsls	r3, r3, #2
 8011670:	4413      	add	r3, r2
 8011672:	009b      	lsls	r3, r3, #2
 8011674:	4a1f      	ldr	r2, [pc, #124]	; (80116f4 <xTaskIncrementTick+0x164>)
 8011676:	441a      	add	r2, r3
 8011678:	68bb      	ldr	r3, [r7, #8]
 801167a:	3304      	adds	r3, #4
 801167c:	4619      	mov	r1, r3
 801167e:	4610      	mov	r0, r2
 8011680:	f7fe ffbe 	bl	8010600 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011684:	68bb      	ldr	r3, [r7, #8]
 8011686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011688:	4b1b      	ldr	r3, [pc, #108]	; (80116f8 <xTaskIncrementTick+0x168>)
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801168e:	429a      	cmp	r2, r3
 8011690:	d3b8      	bcc.n	8011604 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8011692:	2301      	movs	r3, #1
 8011694:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011696:	e7b5      	b.n	8011604 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011698:	4b17      	ldr	r3, [pc, #92]	; (80116f8 <xTaskIncrementTick+0x168>)
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801169e:	4915      	ldr	r1, [pc, #84]	; (80116f4 <xTaskIncrementTick+0x164>)
 80116a0:	4613      	mov	r3, r2
 80116a2:	009b      	lsls	r3, r3, #2
 80116a4:	4413      	add	r3, r2
 80116a6:	009b      	lsls	r3, r3, #2
 80116a8:	440b      	add	r3, r1
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	2b01      	cmp	r3, #1
 80116ae:	d901      	bls.n	80116b4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80116b0:	2301      	movs	r3, #1
 80116b2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80116b4:	4b11      	ldr	r3, [pc, #68]	; (80116fc <xTaskIncrementTick+0x16c>)
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d007      	beq.n	80116cc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80116bc:	2301      	movs	r3, #1
 80116be:	617b      	str	r3, [r7, #20]
 80116c0:	e004      	b.n	80116cc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80116c2:	4b0f      	ldr	r3, [pc, #60]	; (8011700 <xTaskIncrementTick+0x170>)
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	3301      	adds	r3, #1
 80116c8:	4a0d      	ldr	r2, [pc, #52]	; (8011700 <xTaskIncrementTick+0x170>)
 80116ca:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80116cc:	697b      	ldr	r3, [r7, #20]
}
 80116ce:	4618      	mov	r0, r3
 80116d0:	3718      	adds	r7, #24
 80116d2:	46bd      	mov	sp, r7
 80116d4:	bd80      	pop	{r7, pc}
 80116d6:	bf00      	nop
 80116d8:	200008f4 	.word	0x200008f4
 80116dc:	200008d8 	.word	0x200008d8
 80116e0:	200008a4 	.word	0x200008a4
 80116e4:	200008a8 	.word	0x200008a8
 80116e8:	200008ec 	.word	0x200008ec
 80116ec:	200008f0 	.word	0x200008f0
 80116f0:	200008dc 	.word	0x200008dc
 80116f4:	20000444 	.word	0x20000444
 80116f8:	20000440 	.word	0x20000440
 80116fc:	200008e8 	.word	0x200008e8
 8011700:	200008e4 	.word	0x200008e4

08011704 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011704:	b480      	push	{r7}
 8011706:	b085      	sub	sp, #20
 8011708:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801170a:	4b2a      	ldr	r3, [pc, #168]	; (80117b4 <vTaskSwitchContext+0xb0>)
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	2b00      	cmp	r3, #0
 8011710:	d003      	beq.n	801171a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011712:	4b29      	ldr	r3, [pc, #164]	; (80117b8 <vTaskSwitchContext+0xb4>)
 8011714:	2201      	movs	r2, #1
 8011716:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011718:	e046      	b.n	80117a8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 801171a:	4b27      	ldr	r3, [pc, #156]	; (80117b8 <vTaskSwitchContext+0xb4>)
 801171c:	2200      	movs	r2, #0
 801171e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011720:	4b26      	ldr	r3, [pc, #152]	; (80117bc <vTaskSwitchContext+0xb8>)
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	60fb      	str	r3, [r7, #12]
 8011726:	e010      	b.n	801174a <vTaskSwitchContext+0x46>
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	2b00      	cmp	r3, #0
 801172c:	d10a      	bne.n	8011744 <vTaskSwitchContext+0x40>
	__asm volatile
 801172e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011732:	f383 8811 	msr	BASEPRI, r3
 8011736:	f3bf 8f6f 	isb	sy
 801173a:	f3bf 8f4f 	dsb	sy
 801173e:	607b      	str	r3, [r7, #4]
}
 8011740:	bf00      	nop
 8011742:	e7fe      	b.n	8011742 <vTaskSwitchContext+0x3e>
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	3b01      	subs	r3, #1
 8011748:	60fb      	str	r3, [r7, #12]
 801174a:	491d      	ldr	r1, [pc, #116]	; (80117c0 <vTaskSwitchContext+0xbc>)
 801174c:	68fa      	ldr	r2, [r7, #12]
 801174e:	4613      	mov	r3, r2
 8011750:	009b      	lsls	r3, r3, #2
 8011752:	4413      	add	r3, r2
 8011754:	009b      	lsls	r3, r3, #2
 8011756:	440b      	add	r3, r1
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	2b00      	cmp	r3, #0
 801175c:	d0e4      	beq.n	8011728 <vTaskSwitchContext+0x24>
 801175e:	68fa      	ldr	r2, [r7, #12]
 8011760:	4613      	mov	r3, r2
 8011762:	009b      	lsls	r3, r3, #2
 8011764:	4413      	add	r3, r2
 8011766:	009b      	lsls	r3, r3, #2
 8011768:	4a15      	ldr	r2, [pc, #84]	; (80117c0 <vTaskSwitchContext+0xbc>)
 801176a:	4413      	add	r3, r2
 801176c:	60bb      	str	r3, [r7, #8]
 801176e:	68bb      	ldr	r3, [r7, #8]
 8011770:	685b      	ldr	r3, [r3, #4]
 8011772:	685a      	ldr	r2, [r3, #4]
 8011774:	68bb      	ldr	r3, [r7, #8]
 8011776:	605a      	str	r2, [r3, #4]
 8011778:	68bb      	ldr	r3, [r7, #8]
 801177a:	685a      	ldr	r2, [r3, #4]
 801177c:	68bb      	ldr	r3, [r7, #8]
 801177e:	3308      	adds	r3, #8
 8011780:	429a      	cmp	r2, r3
 8011782:	d104      	bne.n	801178e <vTaskSwitchContext+0x8a>
 8011784:	68bb      	ldr	r3, [r7, #8]
 8011786:	685b      	ldr	r3, [r3, #4]
 8011788:	685a      	ldr	r2, [r3, #4]
 801178a:	68bb      	ldr	r3, [r7, #8]
 801178c:	605a      	str	r2, [r3, #4]
 801178e:	68bb      	ldr	r3, [r7, #8]
 8011790:	685b      	ldr	r3, [r3, #4]
 8011792:	68db      	ldr	r3, [r3, #12]
 8011794:	4a0b      	ldr	r2, [pc, #44]	; (80117c4 <vTaskSwitchContext+0xc0>)
 8011796:	6013      	str	r3, [r2, #0]
 8011798:	4a08      	ldr	r2, [pc, #32]	; (80117bc <vTaskSwitchContext+0xb8>)
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801179e:	4b09      	ldr	r3, [pc, #36]	; (80117c4 <vTaskSwitchContext+0xc0>)
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	3354      	adds	r3, #84	; 0x54
 80117a4:	4a08      	ldr	r2, [pc, #32]	; (80117c8 <vTaskSwitchContext+0xc4>)
 80117a6:	6013      	str	r3, [r2, #0]
}
 80117a8:	bf00      	nop
 80117aa:	3714      	adds	r7, #20
 80117ac:	46bd      	mov	sp, r7
 80117ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b2:	4770      	bx	lr
 80117b4:	200008f4 	.word	0x200008f4
 80117b8:	200008e8 	.word	0x200008e8
 80117bc:	200008dc 	.word	0x200008dc
 80117c0:	20000444 	.word	0x20000444
 80117c4:	20000440 	.word	0x20000440
 80117c8:	20000080 	.word	0x20000080

080117cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80117cc:	b580      	push	{r7, lr}
 80117ce:	b084      	sub	sp, #16
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	6078      	str	r0, [r7, #4]
 80117d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d10a      	bne.n	80117f2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80117dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117e0:	f383 8811 	msr	BASEPRI, r3
 80117e4:	f3bf 8f6f 	isb	sy
 80117e8:	f3bf 8f4f 	dsb	sy
 80117ec:	60fb      	str	r3, [r7, #12]
}
 80117ee:	bf00      	nop
 80117f0:	e7fe      	b.n	80117f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80117f2:	4b07      	ldr	r3, [pc, #28]	; (8011810 <vTaskPlaceOnEventList+0x44>)
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	3318      	adds	r3, #24
 80117f8:	4619      	mov	r1, r3
 80117fa:	6878      	ldr	r0, [r7, #4]
 80117fc:	f7fe ff24 	bl	8010648 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011800:	2101      	movs	r1, #1
 8011802:	6838      	ldr	r0, [r7, #0]
 8011804:	f000 fa98 	bl	8011d38 <prvAddCurrentTaskToDelayedList>
}
 8011808:	bf00      	nop
 801180a:	3710      	adds	r7, #16
 801180c:	46bd      	mov	sp, r7
 801180e:	bd80      	pop	{r7, pc}
 8011810:	20000440 	.word	0x20000440

08011814 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011814:	b580      	push	{r7, lr}
 8011816:	b086      	sub	sp, #24
 8011818:	af00      	add	r7, sp, #0
 801181a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	68db      	ldr	r3, [r3, #12]
 8011820:	68db      	ldr	r3, [r3, #12]
 8011822:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011824:	693b      	ldr	r3, [r7, #16]
 8011826:	2b00      	cmp	r3, #0
 8011828:	d10a      	bne.n	8011840 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801182a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801182e:	f383 8811 	msr	BASEPRI, r3
 8011832:	f3bf 8f6f 	isb	sy
 8011836:	f3bf 8f4f 	dsb	sy
 801183a:	60fb      	str	r3, [r7, #12]
}
 801183c:	bf00      	nop
 801183e:	e7fe      	b.n	801183e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011840:	693b      	ldr	r3, [r7, #16]
 8011842:	3318      	adds	r3, #24
 8011844:	4618      	mov	r0, r3
 8011846:	f7fe ff38 	bl	80106ba <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801184a:	4b1e      	ldr	r3, [pc, #120]	; (80118c4 <xTaskRemoveFromEventList+0xb0>)
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	2b00      	cmp	r3, #0
 8011850:	d11d      	bne.n	801188e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011852:	693b      	ldr	r3, [r7, #16]
 8011854:	3304      	adds	r3, #4
 8011856:	4618      	mov	r0, r3
 8011858:	f7fe ff2f 	bl	80106ba <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801185c:	693b      	ldr	r3, [r7, #16]
 801185e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011860:	4b19      	ldr	r3, [pc, #100]	; (80118c8 <xTaskRemoveFromEventList+0xb4>)
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	429a      	cmp	r2, r3
 8011866:	d903      	bls.n	8011870 <xTaskRemoveFromEventList+0x5c>
 8011868:	693b      	ldr	r3, [r7, #16]
 801186a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801186c:	4a16      	ldr	r2, [pc, #88]	; (80118c8 <xTaskRemoveFromEventList+0xb4>)
 801186e:	6013      	str	r3, [r2, #0]
 8011870:	693b      	ldr	r3, [r7, #16]
 8011872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011874:	4613      	mov	r3, r2
 8011876:	009b      	lsls	r3, r3, #2
 8011878:	4413      	add	r3, r2
 801187a:	009b      	lsls	r3, r3, #2
 801187c:	4a13      	ldr	r2, [pc, #76]	; (80118cc <xTaskRemoveFromEventList+0xb8>)
 801187e:	441a      	add	r2, r3
 8011880:	693b      	ldr	r3, [r7, #16]
 8011882:	3304      	adds	r3, #4
 8011884:	4619      	mov	r1, r3
 8011886:	4610      	mov	r0, r2
 8011888:	f7fe feba 	bl	8010600 <vListInsertEnd>
 801188c:	e005      	b.n	801189a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801188e:	693b      	ldr	r3, [r7, #16]
 8011890:	3318      	adds	r3, #24
 8011892:	4619      	mov	r1, r3
 8011894:	480e      	ldr	r0, [pc, #56]	; (80118d0 <xTaskRemoveFromEventList+0xbc>)
 8011896:	f7fe feb3 	bl	8010600 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801189a:	693b      	ldr	r3, [r7, #16]
 801189c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801189e:	4b0d      	ldr	r3, [pc, #52]	; (80118d4 <xTaskRemoveFromEventList+0xc0>)
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118a4:	429a      	cmp	r2, r3
 80118a6:	d905      	bls.n	80118b4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80118a8:	2301      	movs	r3, #1
 80118aa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80118ac:	4b0a      	ldr	r3, [pc, #40]	; (80118d8 <xTaskRemoveFromEventList+0xc4>)
 80118ae:	2201      	movs	r2, #1
 80118b0:	601a      	str	r2, [r3, #0]
 80118b2:	e001      	b.n	80118b8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80118b4:	2300      	movs	r3, #0
 80118b6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80118b8:	697b      	ldr	r3, [r7, #20]
}
 80118ba:	4618      	mov	r0, r3
 80118bc:	3718      	adds	r7, #24
 80118be:	46bd      	mov	sp, r7
 80118c0:	bd80      	pop	{r7, pc}
 80118c2:	bf00      	nop
 80118c4:	200008f4 	.word	0x200008f4
 80118c8:	200008dc 	.word	0x200008dc
 80118cc:	20000444 	.word	0x20000444
 80118d0:	200008ac 	.word	0x200008ac
 80118d4:	20000440 	.word	0x20000440
 80118d8:	200008e8 	.word	0x200008e8

080118dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80118dc:	b480      	push	{r7}
 80118de:	b083      	sub	sp, #12
 80118e0:	af00      	add	r7, sp, #0
 80118e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80118e4:	4b06      	ldr	r3, [pc, #24]	; (8011900 <vTaskInternalSetTimeOutState+0x24>)
 80118e6:	681a      	ldr	r2, [r3, #0]
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80118ec:	4b05      	ldr	r3, [pc, #20]	; (8011904 <vTaskInternalSetTimeOutState+0x28>)
 80118ee:	681a      	ldr	r2, [r3, #0]
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	605a      	str	r2, [r3, #4]
}
 80118f4:	bf00      	nop
 80118f6:	370c      	adds	r7, #12
 80118f8:	46bd      	mov	sp, r7
 80118fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118fe:	4770      	bx	lr
 8011900:	200008ec 	.word	0x200008ec
 8011904:	200008d8 	.word	0x200008d8

08011908 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011908:	b580      	push	{r7, lr}
 801190a:	b088      	sub	sp, #32
 801190c:	af00      	add	r7, sp, #0
 801190e:	6078      	str	r0, [r7, #4]
 8011910:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d10a      	bne.n	801192e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8011918:	f04f 0350 	mov.w	r3, #80	; 0x50
 801191c:	f383 8811 	msr	BASEPRI, r3
 8011920:	f3bf 8f6f 	isb	sy
 8011924:	f3bf 8f4f 	dsb	sy
 8011928:	613b      	str	r3, [r7, #16]
}
 801192a:	bf00      	nop
 801192c:	e7fe      	b.n	801192c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801192e:	683b      	ldr	r3, [r7, #0]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d10a      	bne.n	801194a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8011934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011938:	f383 8811 	msr	BASEPRI, r3
 801193c:	f3bf 8f6f 	isb	sy
 8011940:	f3bf 8f4f 	dsb	sy
 8011944:	60fb      	str	r3, [r7, #12]
}
 8011946:	bf00      	nop
 8011948:	e7fe      	b.n	8011948 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801194a:	f000 fa5d 	bl	8011e08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801194e:	4b1d      	ldr	r3, [pc, #116]	; (80119c4 <xTaskCheckForTimeOut+0xbc>)
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	685b      	ldr	r3, [r3, #4]
 8011958:	69ba      	ldr	r2, [r7, #24]
 801195a:	1ad3      	subs	r3, r2, r3
 801195c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801195e:	683b      	ldr	r3, [r7, #0]
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011966:	d102      	bne.n	801196e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011968:	2300      	movs	r3, #0
 801196a:	61fb      	str	r3, [r7, #28]
 801196c:	e023      	b.n	80119b6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	681a      	ldr	r2, [r3, #0]
 8011972:	4b15      	ldr	r3, [pc, #84]	; (80119c8 <xTaskCheckForTimeOut+0xc0>)
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	429a      	cmp	r2, r3
 8011978:	d007      	beq.n	801198a <xTaskCheckForTimeOut+0x82>
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	685b      	ldr	r3, [r3, #4]
 801197e:	69ba      	ldr	r2, [r7, #24]
 8011980:	429a      	cmp	r2, r3
 8011982:	d302      	bcc.n	801198a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011984:	2301      	movs	r3, #1
 8011986:	61fb      	str	r3, [r7, #28]
 8011988:	e015      	b.n	80119b6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801198a:	683b      	ldr	r3, [r7, #0]
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	697a      	ldr	r2, [r7, #20]
 8011990:	429a      	cmp	r2, r3
 8011992:	d20b      	bcs.n	80119ac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011994:	683b      	ldr	r3, [r7, #0]
 8011996:	681a      	ldr	r2, [r3, #0]
 8011998:	697b      	ldr	r3, [r7, #20]
 801199a:	1ad2      	subs	r2, r2, r3
 801199c:	683b      	ldr	r3, [r7, #0]
 801199e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80119a0:	6878      	ldr	r0, [r7, #4]
 80119a2:	f7ff ff9b 	bl	80118dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80119a6:	2300      	movs	r3, #0
 80119a8:	61fb      	str	r3, [r7, #28]
 80119aa:	e004      	b.n	80119b6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80119ac:	683b      	ldr	r3, [r7, #0]
 80119ae:	2200      	movs	r2, #0
 80119b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80119b2:	2301      	movs	r3, #1
 80119b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80119b6:	f000 fa57 	bl	8011e68 <vPortExitCritical>

	return xReturn;
 80119ba:	69fb      	ldr	r3, [r7, #28]
}
 80119bc:	4618      	mov	r0, r3
 80119be:	3720      	adds	r7, #32
 80119c0:	46bd      	mov	sp, r7
 80119c2:	bd80      	pop	{r7, pc}
 80119c4:	200008d8 	.word	0x200008d8
 80119c8:	200008ec 	.word	0x200008ec

080119cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80119cc:	b480      	push	{r7}
 80119ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80119d0:	4b03      	ldr	r3, [pc, #12]	; (80119e0 <vTaskMissedYield+0x14>)
 80119d2:	2201      	movs	r2, #1
 80119d4:	601a      	str	r2, [r3, #0]
}
 80119d6:	bf00      	nop
 80119d8:	46bd      	mov	sp, r7
 80119da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119de:	4770      	bx	lr
 80119e0:	200008e8 	.word	0x200008e8

080119e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80119e4:	b480      	push	{r7}
 80119e6:	b083      	sub	sp, #12
 80119e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80119ea:	4b0c      	ldr	r3, [pc, #48]	; (8011a1c <prvResetNextTaskUnblockTime+0x38>)
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d104      	bne.n	80119fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80119f4:	4b0a      	ldr	r3, [pc, #40]	; (8011a20 <prvResetNextTaskUnblockTime+0x3c>)
 80119f6:	f04f 32ff 	mov.w	r2, #4294967295
 80119fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80119fc:	e008      	b.n	8011a10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80119fe:	4b07      	ldr	r3, [pc, #28]	; (8011a1c <prvResetNextTaskUnblockTime+0x38>)
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	68db      	ldr	r3, [r3, #12]
 8011a04:	68db      	ldr	r3, [r3, #12]
 8011a06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	685b      	ldr	r3, [r3, #4]
 8011a0c:	4a04      	ldr	r2, [pc, #16]	; (8011a20 <prvResetNextTaskUnblockTime+0x3c>)
 8011a0e:	6013      	str	r3, [r2, #0]
}
 8011a10:	bf00      	nop
 8011a12:	370c      	adds	r7, #12
 8011a14:	46bd      	mov	sp, r7
 8011a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a1a:	4770      	bx	lr
 8011a1c:	200008a4 	.word	0x200008a4
 8011a20:	200008f0 	.word	0x200008f0

08011a24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011a24:	b480      	push	{r7}
 8011a26:	b083      	sub	sp, #12
 8011a28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011a2a:	4b0b      	ldr	r3, [pc, #44]	; (8011a58 <xTaskGetSchedulerState+0x34>)
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d102      	bne.n	8011a38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011a32:	2301      	movs	r3, #1
 8011a34:	607b      	str	r3, [r7, #4]
 8011a36:	e008      	b.n	8011a4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011a38:	4b08      	ldr	r3, [pc, #32]	; (8011a5c <xTaskGetSchedulerState+0x38>)
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d102      	bne.n	8011a46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011a40:	2302      	movs	r3, #2
 8011a42:	607b      	str	r3, [r7, #4]
 8011a44:	e001      	b.n	8011a4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011a46:	2300      	movs	r3, #0
 8011a48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011a4a:	687b      	ldr	r3, [r7, #4]
	}
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	370c      	adds	r7, #12
 8011a50:	46bd      	mov	sp, r7
 8011a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a56:	4770      	bx	lr
 8011a58:	200008e0 	.word	0x200008e0
 8011a5c:	200008f4 	.word	0x200008f4

08011a60 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011a60:	b580      	push	{r7, lr}
 8011a62:	b084      	sub	sp, #16
 8011a64:	af00      	add	r7, sp, #0
 8011a66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011a6c:	2300      	movs	r3, #0
 8011a6e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d051      	beq.n	8011b1a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011a76:	68bb      	ldr	r3, [r7, #8]
 8011a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a7a:	4b2a      	ldr	r3, [pc, #168]	; (8011b24 <xTaskPriorityInherit+0xc4>)
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a80:	429a      	cmp	r2, r3
 8011a82:	d241      	bcs.n	8011b08 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011a84:	68bb      	ldr	r3, [r7, #8]
 8011a86:	699b      	ldr	r3, [r3, #24]
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	db06      	blt.n	8011a9a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011a8c:	4b25      	ldr	r3, [pc, #148]	; (8011b24 <xTaskPriorityInherit+0xc4>)
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a92:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011a96:	68bb      	ldr	r3, [r7, #8]
 8011a98:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011a9a:	68bb      	ldr	r3, [r7, #8]
 8011a9c:	6959      	ldr	r1, [r3, #20]
 8011a9e:	68bb      	ldr	r3, [r7, #8]
 8011aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011aa2:	4613      	mov	r3, r2
 8011aa4:	009b      	lsls	r3, r3, #2
 8011aa6:	4413      	add	r3, r2
 8011aa8:	009b      	lsls	r3, r3, #2
 8011aaa:	4a1f      	ldr	r2, [pc, #124]	; (8011b28 <xTaskPriorityInherit+0xc8>)
 8011aac:	4413      	add	r3, r2
 8011aae:	4299      	cmp	r1, r3
 8011ab0:	d122      	bne.n	8011af8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011ab2:	68bb      	ldr	r3, [r7, #8]
 8011ab4:	3304      	adds	r3, #4
 8011ab6:	4618      	mov	r0, r3
 8011ab8:	f7fe fdff 	bl	80106ba <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011abc:	4b19      	ldr	r3, [pc, #100]	; (8011b24 <xTaskPriorityInherit+0xc4>)
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ac2:	68bb      	ldr	r3, [r7, #8]
 8011ac4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011ac6:	68bb      	ldr	r3, [r7, #8]
 8011ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011aca:	4b18      	ldr	r3, [pc, #96]	; (8011b2c <xTaskPriorityInherit+0xcc>)
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	429a      	cmp	r2, r3
 8011ad0:	d903      	bls.n	8011ada <xTaskPriorityInherit+0x7a>
 8011ad2:	68bb      	ldr	r3, [r7, #8]
 8011ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ad6:	4a15      	ldr	r2, [pc, #84]	; (8011b2c <xTaskPriorityInherit+0xcc>)
 8011ad8:	6013      	str	r3, [r2, #0]
 8011ada:	68bb      	ldr	r3, [r7, #8]
 8011adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ade:	4613      	mov	r3, r2
 8011ae0:	009b      	lsls	r3, r3, #2
 8011ae2:	4413      	add	r3, r2
 8011ae4:	009b      	lsls	r3, r3, #2
 8011ae6:	4a10      	ldr	r2, [pc, #64]	; (8011b28 <xTaskPriorityInherit+0xc8>)
 8011ae8:	441a      	add	r2, r3
 8011aea:	68bb      	ldr	r3, [r7, #8]
 8011aec:	3304      	adds	r3, #4
 8011aee:	4619      	mov	r1, r3
 8011af0:	4610      	mov	r0, r2
 8011af2:	f7fe fd85 	bl	8010600 <vListInsertEnd>
 8011af6:	e004      	b.n	8011b02 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011af8:	4b0a      	ldr	r3, [pc, #40]	; (8011b24 <xTaskPriorityInherit+0xc4>)
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011afe:	68bb      	ldr	r3, [r7, #8]
 8011b00:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011b02:	2301      	movs	r3, #1
 8011b04:	60fb      	str	r3, [r7, #12]
 8011b06:	e008      	b.n	8011b1a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011b08:	68bb      	ldr	r3, [r7, #8]
 8011b0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011b0c:	4b05      	ldr	r3, [pc, #20]	; (8011b24 <xTaskPriorityInherit+0xc4>)
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b12:	429a      	cmp	r2, r3
 8011b14:	d201      	bcs.n	8011b1a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011b16:	2301      	movs	r3, #1
 8011b18:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011b1a:	68fb      	ldr	r3, [r7, #12]
	}
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	3710      	adds	r7, #16
 8011b20:	46bd      	mov	sp, r7
 8011b22:	bd80      	pop	{r7, pc}
 8011b24:	20000440 	.word	0x20000440
 8011b28:	20000444 	.word	0x20000444
 8011b2c:	200008dc 	.word	0x200008dc

08011b30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011b30:	b580      	push	{r7, lr}
 8011b32:	b086      	sub	sp, #24
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011b3c:	2300      	movs	r3, #0
 8011b3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d056      	beq.n	8011bf4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011b46:	4b2e      	ldr	r3, [pc, #184]	; (8011c00 <xTaskPriorityDisinherit+0xd0>)
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	693a      	ldr	r2, [r7, #16]
 8011b4c:	429a      	cmp	r2, r3
 8011b4e:	d00a      	beq.n	8011b66 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8011b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b54:	f383 8811 	msr	BASEPRI, r3
 8011b58:	f3bf 8f6f 	isb	sy
 8011b5c:	f3bf 8f4f 	dsb	sy
 8011b60:	60fb      	str	r3, [r7, #12]
}
 8011b62:	bf00      	nop
 8011b64:	e7fe      	b.n	8011b64 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8011b66:	693b      	ldr	r3, [r7, #16]
 8011b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d10a      	bne.n	8011b84 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8011b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b72:	f383 8811 	msr	BASEPRI, r3
 8011b76:	f3bf 8f6f 	isb	sy
 8011b7a:	f3bf 8f4f 	dsb	sy
 8011b7e:	60bb      	str	r3, [r7, #8]
}
 8011b80:	bf00      	nop
 8011b82:	e7fe      	b.n	8011b82 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8011b84:	693b      	ldr	r3, [r7, #16]
 8011b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011b88:	1e5a      	subs	r2, r3, #1
 8011b8a:	693b      	ldr	r3, [r7, #16]
 8011b8c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011b8e:	693b      	ldr	r3, [r7, #16]
 8011b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b92:	693b      	ldr	r3, [r7, #16]
 8011b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b96:	429a      	cmp	r2, r3
 8011b98:	d02c      	beq.n	8011bf4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011b9a:	693b      	ldr	r3, [r7, #16]
 8011b9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d128      	bne.n	8011bf4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011ba2:	693b      	ldr	r3, [r7, #16]
 8011ba4:	3304      	adds	r3, #4
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	f7fe fd87 	bl	80106ba <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011bac:	693b      	ldr	r3, [r7, #16]
 8011bae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011bb0:	693b      	ldr	r3, [r7, #16]
 8011bb2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011bb4:	693b      	ldr	r3, [r7, #16]
 8011bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bb8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011bbc:	693b      	ldr	r3, [r7, #16]
 8011bbe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011bc0:	693b      	ldr	r3, [r7, #16]
 8011bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011bc4:	4b0f      	ldr	r3, [pc, #60]	; (8011c04 <xTaskPriorityDisinherit+0xd4>)
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	429a      	cmp	r2, r3
 8011bca:	d903      	bls.n	8011bd4 <xTaskPriorityDisinherit+0xa4>
 8011bcc:	693b      	ldr	r3, [r7, #16]
 8011bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bd0:	4a0c      	ldr	r2, [pc, #48]	; (8011c04 <xTaskPriorityDisinherit+0xd4>)
 8011bd2:	6013      	str	r3, [r2, #0]
 8011bd4:	693b      	ldr	r3, [r7, #16]
 8011bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011bd8:	4613      	mov	r3, r2
 8011bda:	009b      	lsls	r3, r3, #2
 8011bdc:	4413      	add	r3, r2
 8011bde:	009b      	lsls	r3, r3, #2
 8011be0:	4a09      	ldr	r2, [pc, #36]	; (8011c08 <xTaskPriorityDisinherit+0xd8>)
 8011be2:	441a      	add	r2, r3
 8011be4:	693b      	ldr	r3, [r7, #16]
 8011be6:	3304      	adds	r3, #4
 8011be8:	4619      	mov	r1, r3
 8011bea:	4610      	mov	r0, r2
 8011bec:	f7fe fd08 	bl	8010600 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011bf0:	2301      	movs	r3, #1
 8011bf2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011bf4:	697b      	ldr	r3, [r7, #20]
	}
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	3718      	adds	r7, #24
 8011bfa:	46bd      	mov	sp, r7
 8011bfc:	bd80      	pop	{r7, pc}
 8011bfe:	bf00      	nop
 8011c00:	20000440 	.word	0x20000440
 8011c04:	200008dc 	.word	0x200008dc
 8011c08:	20000444 	.word	0x20000444

08011c0c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011c0c:	b580      	push	{r7, lr}
 8011c0e:	b088      	sub	sp, #32
 8011c10:	af00      	add	r7, sp, #0
 8011c12:	6078      	str	r0, [r7, #4]
 8011c14:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011c1a:	2301      	movs	r3, #1
 8011c1c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d06a      	beq.n	8011cfa <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011c24:	69bb      	ldr	r3, [r7, #24]
 8011c26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d10a      	bne.n	8011c42 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8011c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c30:	f383 8811 	msr	BASEPRI, r3
 8011c34:	f3bf 8f6f 	isb	sy
 8011c38:	f3bf 8f4f 	dsb	sy
 8011c3c:	60fb      	str	r3, [r7, #12]
}
 8011c3e:	bf00      	nop
 8011c40:	e7fe      	b.n	8011c40 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011c42:	69bb      	ldr	r3, [r7, #24]
 8011c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011c46:	683a      	ldr	r2, [r7, #0]
 8011c48:	429a      	cmp	r2, r3
 8011c4a:	d902      	bls.n	8011c52 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011c4c:	683b      	ldr	r3, [r7, #0]
 8011c4e:	61fb      	str	r3, [r7, #28]
 8011c50:	e002      	b.n	8011c58 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011c52:	69bb      	ldr	r3, [r7, #24]
 8011c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011c56:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011c58:	69bb      	ldr	r3, [r7, #24]
 8011c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c5c:	69fa      	ldr	r2, [r7, #28]
 8011c5e:	429a      	cmp	r2, r3
 8011c60:	d04b      	beq.n	8011cfa <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011c62:	69bb      	ldr	r3, [r7, #24]
 8011c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011c66:	697a      	ldr	r2, [r7, #20]
 8011c68:	429a      	cmp	r2, r3
 8011c6a:	d146      	bne.n	8011cfa <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011c6c:	4b25      	ldr	r3, [pc, #148]	; (8011d04 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	69ba      	ldr	r2, [r7, #24]
 8011c72:	429a      	cmp	r2, r3
 8011c74:	d10a      	bne.n	8011c8c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8011c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c7a:	f383 8811 	msr	BASEPRI, r3
 8011c7e:	f3bf 8f6f 	isb	sy
 8011c82:	f3bf 8f4f 	dsb	sy
 8011c86:	60bb      	str	r3, [r7, #8]
}
 8011c88:	bf00      	nop
 8011c8a:	e7fe      	b.n	8011c8a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011c8c:	69bb      	ldr	r3, [r7, #24]
 8011c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c90:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011c92:	69bb      	ldr	r3, [r7, #24]
 8011c94:	69fa      	ldr	r2, [r7, #28]
 8011c96:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011c98:	69bb      	ldr	r3, [r7, #24]
 8011c9a:	699b      	ldr	r3, [r3, #24]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	db04      	blt.n	8011caa <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011ca0:	69fb      	ldr	r3, [r7, #28]
 8011ca2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011ca6:	69bb      	ldr	r3, [r7, #24]
 8011ca8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011caa:	69bb      	ldr	r3, [r7, #24]
 8011cac:	6959      	ldr	r1, [r3, #20]
 8011cae:	693a      	ldr	r2, [r7, #16]
 8011cb0:	4613      	mov	r3, r2
 8011cb2:	009b      	lsls	r3, r3, #2
 8011cb4:	4413      	add	r3, r2
 8011cb6:	009b      	lsls	r3, r3, #2
 8011cb8:	4a13      	ldr	r2, [pc, #76]	; (8011d08 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8011cba:	4413      	add	r3, r2
 8011cbc:	4299      	cmp	r1, r3
 8011cbe:	d11c      	bne.n	8011cfa <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011cc0:	69bb      	ldr	r3, [r7, #24]
 8011cc2:	3304      	adds	r3, #4
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	f7fe fcf8 	bl	80106ba <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011cca:	69bb      	ldr	r3, [r7, #24]
 8011ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011cce:	4b0f      	ldr	r3, [pc, #60]	; (8011d0c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	429a      	cmp	r2, r3
 8011cd4:	d903      	bls.n	8011cde <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8011cd6:	69bb      	ldr	r3, [r7, #24]
 8011cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cda:	4a0c      	ldr	r2, [pc, #48]	; (8011d0c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011cdc:	6013      	str	r3, [r2, #0]
 8011cde:	69bb      	ldr	r3, [r7, #24]
 8011ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ce2:	4613      	mov	r3, r2
 8011ce4:	009b      	lsls	r3, r3, #2
 8011ce6:	4413      	add	r3, r2
 8011ce8:	009b      	lsls	r3, r3, #2
 8011cea:	4a07      	ldr	r2, [pc, #28]	; (8011d08 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8011cec:	441a      	add	r2, r3
 8011cee:	69bb      	ldr	r3, [r7, #24]
 8011cf0:	3304      	adds	r3, #4
 8011cf2:	4619      	mov	r1, r3
 8011cf4:	4610      	mov	r0, r2
 8011cf6:	f7fe fc83 	bl	8010600 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011cfa:	bf00      	nop
 8011cfc:	3720      	adds	r7, #32
 8011cfe:	46bd      	mov	sp, r7
 8011d00:	bd80      	pop	{r7, pc}
 8011d02:	bf00      	nop
 8011d04:	20000440 	.word	0x20000440
 8011d08:	20000444 	.word	0x20000444
 8011d0c:	200008dc 	.word	0x200008dc

08011d10 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011d10:	b480      	push	{r7}
 8011d12:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011d14:	4b07      	ldr	r3, [pc, #28]	; (8011d34 <pvTaskIncrementMutexHeldCount+0x24>)
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d004      	beq.n	8011d26 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011d1c:	4b05      	ldr	r3, [pc, #20]	; (8011d34 <pvTaskIncrementMutexHeldCount+0x24>)
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011d22:	3201      	adds	r2, #1
 8011d24:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8011d26:	4b03      	ldr	r3, [pc, #12]	; (8011d34 <pvTaskIncrementMutexHeldCount+0x24>)
 8011d28:	681b      	ldr	r3, [r3, #0]
	}
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	46bd      	mov	sp, r7
 8011d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d32:	4770      	bx	lr
 8011d34:	20000440 	.word	0x20000440

08011d38 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011d38:	b580      	push	{r7, lr}
 8011d3a:	b084      	sub	sp, #16
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	6078      	str	r0, [r7, #4]
 8011d40:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011d42:	4b21      	ldr	r3, [pc, #132]	; (8011dc8 <prvAddCurrentTaskToDelayedList+0x90>)
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011d48:	4b20      	ldr	r3, [pc, #128]	; (8011dcc <prvAddCurrentTaskToDelayedList+0x94>)
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	3304      	adds	r3, #4
 8011d4e:	4618      	mov	r0, r3
 8011d50:	f7fe fcb3 	bl	80106ba <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d5a:	d10a      	bne.n	8011d72 <prvAddCurrentTaskToDelayedList+0x3a>
 8011d5c:	683b      	ldr	r3, [r7, #0]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d007      	beq.n	8011d72 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011d62:	4b1a      	ldr	r3, [pc, #104]	; (8011dcc <prvAddCurrentTaskToDelayedList+0x94>)
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	3304      	adds	r3, #4
 8011d68:	4619      	mov	r1, r3
 8011d6a:	4819      	ldr	r0, [pc, #100]	; (8011dd0 <prvAddCurrentTaskToDelayedList+0x98>)
 8011d6c:	f7fe fc48 	bl	8010600 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011d70:	e026      	b.n	8011dc0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011d72:	68fa      	ldr	r2, [r7, #12]
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	4413      	add	r3, r2
 8011d78:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011d7a:	4b14      	ldr	r3, [pc, #80]	; (8011dcc <prvAddCurrentTaskToDelayedList+0x94>)
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	68ba      	ldr	r2, [r7, #8]
 8011d80:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011d82:	68ba      	ldr	r2, [r7, #8]
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	429a      	cmp	r2, r3
 8011d88:	d209      	bcs.n	8011d9e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011d8a:	4b12      	ldr	r3, [pc, #72]	; (8011dd4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8011d8c:	681a      	ldr	r2, [r3, #0]
 8011d8e:	4b0f      	ldr	r3, [pc, #60]	; (8011dcc <prvAddCurrentTaskToDelayedList+0x94>)
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	3304      	adds	r3, #4
 8011d94:	4619      	mov	r1, r3
 8011d96:	4610      	mov	r0, r2
 8011d98:	f7fe fc56 	bl	8010648 <vListInsert>
}
 8011d9c:	e010      	b.n	8011dc0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011d9e:	4b0e      	ldr	r3, [pc, #56]	; (8011dd8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8011da0:	681a      	ldr	r2, [r3, #0]
 8011da2:	4b0a      	ldr	r3, [pc, #40]	; (8011dcc <prvAddCurrentTaskToDelayedList+0x94>)
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	3304      	adds	r3, #4
 8011da8:	4619      	mov	r1, r3
 8011daa:	4610      	mov	r0, r2
 8011dac:	f7fe fc4c 	bl	8010648 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011db0:	4b0a      	ldr	r3, [pc, #40]	; (8011ddc <prvAddCurrentTaskToDelayedList+0xa4>)
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	68ba      	ldr	r2, [r7, #8]
 8011db6:	429a      	cmp	r2, r3
 8011db8:	d202      	bcs.n	8011dc0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011dba:	4a08      	ldr	r2, [pc, #32]	; (8011ddc <prvAddCurrentTaskToDelayedList+0xa4>)
 8011dbc:	68bb      	ldr	r3, [r7, #8]
 8011dbe:	6013      	str	r3, [r2, #0]
}
 8011dc0:	bf00      	nop
 8011dc2:	3710      	adds	r7, #16
 8011dc4:	46bd      	mov	sp, r7
 8011dc6:	bd80      	pop	{r7, pc}
 8011dc8:	200008d8 	.word	0x200008d8
 8011dcc:	20000440 	.word	0x20000440
 8011dd0:	200008c0 	.word	0x200008c0
 8011dd4:	200008a8 	.word	0x200008a8
 8011dd8:	200008a4 	.word	0x200008a4
 8011ddc:	200008f0 	.word	0x200008f0

08011de0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011de0:	4b07      	ldr	r3, [pc, #28]	; (8011e00 <pxCurrentTCBConst2>)
 8011de2:	6819      	ldr	r1, [r3, #0]
 8011de4:	6808      	ldr	r0, [r1, #0]
 8011de6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dea:	f380 8809 	msr	PSP, r0
 8011dee:	f3bf 8f6f 	isb	sy
 8011df2:	f04f 0000 	mov.w	r0, #0
 8011df6:	f380 8811 	msr	BASEPRI, r0
 8011dfa:	4770      	bx	lr
 8011dfc:	f3af 8000 	nop.w

08011e00 <pxCurrentTCBConst2>:
 8011e00:	20000440 	.word	0x20000440
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011e04:	bf00      	nop
 8011e06:	bf00      	nop

08011e08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011e08:	b480      	push	{r7}
 8011e0a:	b083      	sub	sp, #12
 8011e0c:	af00      	add	r7, sp, #0
	__asm volatile
 8011e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e12:	f383 8811 	msr	BASEPRI, r3
 8011e16:	f3bf 8f6f 	isb	sy
 8011e1a:	f3bf 8f4f 	dsb	sy
 8011e1e:	607b      	str	r3, [r7, #4]
}
 8011e20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011e22:	4b0f      	ldr	r3, [pc, #60]	; (8011e60 <vPortEnterCritical+0x58>)
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	3301      	adds	r3, #1
 8011e28:	4a0d      	ldr	r2, [pc, #52]	; (8011e60 <vPortEnterCritical+0x58>)
 8011e2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011e2c:	4b0c      	ldr	r3, [pc, #48]	; (8011e60 <vPortEnterCritical+0x58>)
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	2b01      	cmp	r3, #1
 8011e32:	d10f      	bne.n	8011e54 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011e34:	4b0b      	ldr	r3, [pc, #44]	; (8011e64 <vPortEnterCritical+0x5c>)
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	b2db      	uxtb	r3, r3
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d00a      	beq.n	8011e54 <vPortEnterCritical+0x4c>
	__asm volatile
 8011e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e42:	f383 8811 	msr	BASEPRI, r3
 8011e46:	f3bf 8f6f 	isb	sy
 8011e4a:	f3bf 8f4f 	dsb	sy
 8011e4e:	603b      	str	r3, [r7, #0]
}
 8011e50:	bf00      	nop
 8011e52:	e7fe      	b.n	8011e52 <vPortEnterCritical+0x4a>
	}
}
 8011e54:	bf00      	nop
 8011e56:	370c      	adds	r7, #12
 8011e58:	46bd      	mov	sp, r7
 8011e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e5e:	4770      	bx	lr
 8011e60:	2000007c 	.word	0x2000007c
 8011e64:	e000ed04 	.word	0xe000ed04

08011e68 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011e68:	b480      	push	{r7}
 8011e6a:	b083      	sub	sp, #12
 8011e6c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011e6e:	4b12      	ldr	r3, [pc, #72]	; (8011eb8 <vPortExitCritical+0x50>)
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d10a      	bne.n	8011e8c <vPortExitCritical+0x24>
	__asm volatile
 8011e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e7a:	f383 8811 	msr	BASEPRI, r3
 8011e7e:	f3bf 8f6f 	isb	sy
 8011e82:	f3bf 8f4f 	dsb	sy
 8011e86:	607b      	str	r3, [r7, #4]
}
 8011e88:	bf00      	nop
 8011e8a:	e7fe      	b.n	8011e8a <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011e8c:	4b0a      	ldr	r3, [pc, #40]	; (8011eb8 <vPortExitCritical+0x50>)
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	3b01      	subs	r3, #1
 8011e92:	4a09      	ldr	r2, [pc, #36]	; (8011eb8 <vPortExitCritical+0x50>)
 8011e94:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011e96:	4b08      	ldr	r3, [pc, #32]	; (8011eb8 <vPortExitCritical+0x50>)
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d105      	bne.n	8011eaa <vPortExitCritical+0x42>
 8011e9e:	2300      	movs	r3, #0
 8011ea0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011ea2:	683b      	ldr	r3, [r7, #0]
 8011ea4:	f383 8811 	msr	BASEPRI, r3
}
 8011ea8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011eaa:	bf00      	nop
 8011eac:	370c      	adds	r7, #12
 8011eae:	46bd      	mov	sp, r7
 8011eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb4:	4770      	bx	lr
 8011eb6:	bf00      	nop
 8011eb8:	2000007c 	.word	0x2000007c
 8011ebc:	00000000 	.word	0x00000000

08011ec0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011ec0:	f3ef 8009 	mrs	r0, PSP
 8011ec4:	f3bf 8f6f 	isb	sy
 8011ec8:	4b15      	ldr	r3, [pc, #84]	; (8011f20 <pxCurrentTCBConst>)
 8011eca:	681a      	ldr	r2, [r3, #0]
 8011ecc:	f01e 0f10 	tst.w	lr, #16
 8011ed0:	bf08      	it	eq
 8011ed2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011ed6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011eda:	6010      	str	r0, [r2, #0]
 8011edc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011ee0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011ee4:	f380 8811 	msr	BASEPRI, r0
 8011ee8:	f3bf 8f4f 	dsb	sy
 8011eec:	f3bf 8f6f 	isb	sy
 8011ef0:	f7ff fc08 	bl	8011704 <vTaskSwitchContext>
 8011ef4:	f04f 0000 	mov.w	r0, #0
 8011ef8:	f380 8811 	msr	BASEPRI, r0
 8011efc:	bc09      	pop	{r0, r3}
 8011efe:	6819      	ldr	r1, [r3, #0]
 8011f00:	6808      	ldr	r0, [r1, #0]
 8011f02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f06:	f01e 0f10 	tst.w	lr, #16
 8011f0a:	bf08      	it	eq
 8011f0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011f10:	f380 8809 	msr	PSP, r0
 8011f14:	f3bf 8f6f 	isb	sy
 8011f18:	4770      	bx	lr
 8011f1a:	bf00      	nop
 8011f1c:	f3af 8000 	nop.w

08011f20 <pxCurrentTCBConst>:
 8011f20:	20000440 	.word	0x20000440
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011f24:	bf00      	nop
 8011f26:	bf00      	nop

08011f28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011f28:	b580      	push	{r7, lr}
 8011f2a:	b082      	sub	sp, #8
 8011f2c:	af00      	add	r7, sp, #0
	__asm volatile
 8011f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f32:	f383 8811 	msr	BASEPRI, r3
 8011f36:	f3bf 8f6f 	isb	sy
 8011f3a:	f3bf 8f4f 	dsb	sy
 8011f3e:	607b      	str	r3, [r7, #4]
}
 8011f40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011f42:	f7ff fb25 	bl	8011590 <xTaskIncrementTick>
 8011f46:	4603      	mov	r3, r0
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d003      	beq.n	8011f54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011f4c:	4b06      	ldr	r3, [pc, #24]	; (8011f68 <xPortSysTickHandler+0x40>)
 8011f4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f52:	601a      	str	r2, [r3, #0]
 8011f54:	2300      	movs	r3, #0
 8011f56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011f58:	683b      	ldr	r3, [r7, #0]
 8011f5a:	f383 8811 	msr	BASEPRI, r3
}
 8011f5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011f60:	bf00      	nop
 8011f62:	3708      	adds	r7, #8
 8011f64:	46bd      	mov	sp, r7
 8011f66:	bd80      	pop	{r7, pc}
 8011f68:	e000ed04 	.word	0xe000ed04

08011f6c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011f6c:	b480      	push	{r7}
 8011f6e:	b085      	sub	sp, #20
 8011f70:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011f72:	f3ef 8305 	mrs	r3, IPSR
 8011f76:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	2b0f      	cmp	r3, #15
 8011f7c:	d914      	bls.n	8011fa8 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011f7e:	4a17      	ldr	r2, [pc, #92]	; (8011fdc <vPortValidateInterruptPriority+0x70>)
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	4413      	add	r3, r2
 8011f84:	781b      	ldrb	r3, [r3, #0]
 8011f86:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011f88:	4b15      	ldr	r3, [pc, #84]	; (8011fe0 <vPortValidateInterruptPriority+0x74>)
 8011f8a:	781b      	ldrb	r3, [r3, #0]
 8011f8c:	7afa      	ldrb	r2, [r7, #11]
 8011f8e:	429a      	cmp	r2, r3
 8011f90:	d20a      	bcs.n	8011fa8 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8011f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f96:	f383 8811 	msr	BASEPRI, r3
 8011f9a:	f3bf 8f6f 	isb	sy
 8011f9e:	f3bf 8f4f 	dsb	sy
 8011fa2:	607b      	str	r3, [r7, #4]
}
 8011fa4:	bf00      	nop
 8011fa6:	e7fe      	b.n	8011fa6 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011fa8:	4b0e      	ldr	r3, [pc, #56]	; (8011fe4 <vPortValidateInterruptPriority+0x78>)
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011fb0:	4b0d      	ldr	r3, [pc, #52]	; (8011fe8 <vPortValidateInterruptPriority+0x7c>)
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	429a      	cmp	r2, r3
 8011fb6:	d90a      	bls.n	8011fce <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8011fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fbc:	f383 8811 	msr	BASEPRI, r3
 8011fc0:	f3bf 8f6f 	isb	sy
 8011fc4:	f3bf 8f4f 	dsb	sy
 8011fc8:	603b      	str	r3, [r7, #0]
}
 8011fca:	bf00      	nop
 8011fcc:	e7fe      	b.n	8011fcc <vPortValidateInterruptPriority+0x60>
	}
 8011fce:	bf00      	nop
 8011fd0:	3714      	adds	r7, #20
 8011fd2:	46bd      	mov	sp, r7
 8011fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd8:	4770      	bx	lr
 8011fda:	bf00      	nop
 8011fdc:	e000e3f0 	.word	0xe000e3f0
 8011fe0:	200008f8 	.word	0x200008f8
 8011fe4:	e000ed0c 	.word	0xe000ed0c
 8011fe8:	200008fc 	.word	0x200008fc

08011fec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011fec:	b580      	push	{r7, lr}
 8011fee:	b08a      	sub	sp, #40	; 0x28
 8011ff0:	af00      	add	r7, sp, #0
 8011ff2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011ff4:	2300      	movs	r3, #0
 8011ff6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011ff8:	f7ff fa1e 	bl	8011438 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011ffc:	4b5b      	ldr	r3, [pc, #364]	; (801216c <pvPortMalloc+0x180>)
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	2b00      	cmp	r3, #0
 8012002:	d101      	bne.n	8012008 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012004:	f000 f920 	bl	8012248 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012008:	4b59      	ldr	r3, [pc, #356]	; (8012170 <pvPortMalloc+0x184>)
 801200a:	681a      	ldr	r2, [r3, #0]
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	4013      	ands	r3, r2
 8012010:	2b00      	cmp	r3, #0
 8012012:	f040 8093 	bne.w	801213c <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	2b00      	cmp	r3, #0
 801201a:	d01d      	beq.n	8012058 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 801201c:	2208      	movs	r2, #8
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	4413      	add	r3, r2
 8012022:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	f003 0307 	and.w	r3, r3, #7
 801202a:	2b00      	cmp	r3, #0
 801202c:	d014      	beq.n	8012058 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	f023 0307 	bic.w	r3, r3, #7
 8012034:	3308      	adds	r3, #8
 8012036:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	f003 0307 	and.w	r3, r3, #7
 801203e:	2b00      	cmp	r3, #0
 8012040:	d00a      	beq.n	8012058 <pvPortMalloc+0x6c>
	__asm volatile
 8012042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012046:	f383 8811 	msr	BASEPRI, r3
 801204a:	f3bf 8f6f 	isb	sy
 801204e:	f3bf 8f4f 	dsb	sy
 8012052:	617b      	str	r3, [r7, #20]
}
 8012054:	bf00      	nop
 8012056:	e7fe      	b.n	8012056 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	2b00      	cmp	r3, #0
 801205c:	d06e      	beq.n	801213c <pvPortMalloc+0x150>
 801205e:	4b45      	ldr	r3, [pc, #276]	; (8012174 <pvPortMalloc+0x188>)
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	687a      	ldr	r2, [r7, #4]
 8012064:	429a      	cmp	r2, r3
 8012066:	d869      	bhi.n	801213c <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012068:	4b43      	ldr	r3, [pc, #268]	; (8012178 <pvPortMalloc+0x18c>)
 801206a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801206c:	4b42      	ldr	r3, [pc, #264]	; (8012178 <pvPortMalloc+0x18c>)
 801206e:	681b      	ldr	r3, [r3, #0]
 8012070:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012072:	e004      	b.n	801207e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8012074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012076:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012080:	685b      	ldr	r3, [r3, #4]
 8012082:	687a      	ldr	r2, [r7, #4]
 8012084:	429a      	cmp	r2, r3
 8012086:	d903      	bls.n	8012090 <pvPortMalloc+0xa4>
 8012088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	2b00      	cmp	r3, #0
 801208e:	d1f1      	bne.n	8012074 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012090:	4b36      	ldr	r3, [pc, #216]	; (801216c <pvPortMalloc+0x180>)
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012096:	429a      	cmp	r2, r3
 8012098:	d050      	beq.n	801213c <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801209a:	6a3b      	ldr	r3, [r7, #32]
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	2208      	movs	r2, #8
 80120a0:	4413      	add	r3, r2
 80120a2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80120a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120a6:	681a      	ldr	r2, [r3, #0]
 80120a8:	6a3b      	ldr	r3, [r7, #32]
 80120aa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80120ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120ae:	685a      	ldr	r2, [r3, #4]
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	1ad2      	subs	r2, r2, r3
 80120b4:	2308      	movs	r3, #8
 80120b6:	005b      	lsls	r3, r3, #1
 80120b8:	429a      	cmp	r2, r3
 80120ba:	d91f      	bls.n	80120fc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80120bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	4413      	add	r3, r2
 80120c2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80120c4:	69bb      	ldr	r3, [r7, #24]
 80120c6:	f003 0307 	and.w	r3, r3, #7
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d00a      	beq.n	80120e4 <pvPortMalloc+0xf8>
	__asm volatile
 80120ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120d2:	f383 8811 	msr	BASEPRI, r3
 80120d6:	f3bf 8f6f 	isb	sy
 80120da:	f3bf 8f4f 	dsb	sy
 80120de:	613b      	str	r3, [r7, #16]
}
 80120e0:	bf00      	nop
 80120e2:	e7fe      	b.n	80120e2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80120e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120e6:	685a      	ldr	r2, [r3, #4]
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	1ad2      	subs	r2, r2, r3
 80120ec:	69bb      	ldr	r3, [r7, #24]
 80120ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80120f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120f2:	687a      	ldr	r2, [r7, #4]
 80120f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80120f6:	69b8      	ldr	r0, [r7, #24]
 80120f8:	f000 f908 	bl	801230c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80120fc:	4b1d      	ldr	r3, [pc, #116]	; (8012174 <pvPortMalloc+0x188>)
 80120fe:	681a      	ldr	r2, [r3, #0]
 8012100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012102:	685b      	ldr	r3, [r3, #4]
 8012104:	1ad3      	subs	r3, r2, r3
 8012106:	4a1b      	ldr	r2, [pc, #108]	; (8012174 <pvPortMalloc+0x188>)
 8012108:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801210a:	4b1a      	ldr	r3, [pc, #104]	; (8012174 <pvPortMalloc+0x188>)
 801210c:	681a      	ldr	r2, [r3, #0]
 801210e:	4b1b      	ldr	r3, [pc, #108]	; (801217c <pvPortMalloc+0x190>)
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	429a      	cmp	r2, r3
 8012114:	d203      	bcs.n	801211e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012116:	4b17      	ldr	r3, [pc, #92]	; (8012174 <pvPortMalloc+0x188>)
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	4a18      	ldr	r2, [pc, #96]	; (801217c <pvPortMalloc+0x190>)
 801211c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801211e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012120:	685a      	ldr	r2, [r3, #4]
 8012122:	4b13      	ldr	r3, [pc, #76]	; (8012170 <pvPortMalloc+0x184>)
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	431a      	orrs	r2, r3
 8012128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801212a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801212c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801212e:	2200      	movs	r2, #0
 8012130:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8012132:	4b13      	ldr	r3, [pc, #76]	; (8012180 <pvPortMalloc+0x194>)
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	3301      	adds	r3, #1
 8012138:	4a11      	ldr	r2, [pc, #68]	; (8012180 <pvPortMalloc+0x194>)
 801213a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801213c:	f7ff f98a 	bl	8011454 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012140:	69fb      	ldr	r3, [r7, #28]
 8012142:	f003 0307 	and.w	r3, r3, #7
 8012146:	2b00      	cmp	r3, #0
 8012148:	d00a      	beq.n	8012160 <pvPortMalloc+0x174>
	__asm volatile
 801214a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801214e:	f383 8811 	msr	BASEPRI, r3
 8012152:	f3bf 8f6f 	isb	sy
 8012156:	f3bf 8f4f 	dsb	sy
 801215a:	60fb      	str	r3, [r7, #12]
}
 801215c:	bf00      	nop
 801215e:	e7fe      	b.n	801215e <pvPortMalloc+0x172>
	return pvReturn;
 8012160:	69fb      	ldr	r3, [r7, #28]
}
 8012162:	4618      	mov	r0, r3
 8012164:	3728      	adds	r7, #40	; 0x28
 8012166:	46bd      	mov	sp, r7
 8012168:	bd80      	pop	{r7, pc}
 801216a:	bf00      	nop
 801216c:	20004f58 	.word	0x20004f58
 8012170:	20004f6c 	.word	0x20004f6c
 8012174:	20004f5c 	.word	0x20004f5c
 8012178:	20004f50 	.word	0x20004f50
 801217c:	20004f60 	.word	0x20004f60
 8012180:	20004f64 	.word	0x20004f64

08012184 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012184:	b580      	push	{r7, lr}
 8012186:	b086      	sub	sp, #24
 8012188:	af00      	add	r7, sp, #0
 801218a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	2b00      	cmp	r3, #0
 8012194:	d04d      	beq.n	8012232 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012196:	2308      	movs	r3, #8
 8012198:	425b      	negs	r3, r3
 801219a:	697a      	ldr	r2, [r7, #20]
 801219c:	4413      	add	r3, r2
 801219e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80121a0:	697b      	ldr	r3, [r7, #20]
 80121a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80121a4:	693b      	ldr	r3, [r7, #16]
 80121a6:	685a      	ldr	r2, [r3, #4]
 80121a8:	4b24      	ldr	r3, [pc, #144]	; (801223c <vPortFree+0xb8>)
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	4013      	ands	r3, r2
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d10a      	bne.n	80121c8 <vPortFree+0x44>
	__asm volatile
 80121b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121b6:	f383 8811 	msr	BASEPRI, r3
 80121ba:	f3bf 8f6f 	isb	sy
 80121be:	f3bf 8f4f 	dsb	sy
 80121c2:	60fb      	str	r3, [r7, #12]
}
 80121c4:	bf00      	nop
 80121c6:	e7fe      	b.n	80121c6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80121c8:	693b      	ldr	r3, [r7, #16]
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d00a      	beq.n	80121e6 <vPortFree+0x62>
	__asm volatile
 80121d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121d4:	f383 8811 	msr	BASEPRI, r3
 80121d8:	f3bf 8f6f 	isb	sy
 80121dc:	f3bf 8f4f 	dsb	sy
 80121e0:	60bb      	str	r3, [r7, #8]
}
 80121e2:	bf00      	nop
 80121e4:	e7fe      	b.n	80121e4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80121e6:	693b      	ldr	r3, [r7, #16]
 80121e8:	685a      	ldr	r2, [r3, #4]
 80121ea:	4b14      	ldr	r3, [pc, #80]	; (801223c <vPortFree+0xb8>)
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	4013      	ands	r3, r2
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d01e      	beq.n	8012232 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80121f4:	693b      	ldr	r3, [r7, #16]
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d11a      	bne.n	8012232 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80121fc:	693b      	ldr	r3, [r7, #16]
 80121fe:	685a      	ldr	r2, [r3, #4]
 8012200:	4b0e      	ldr	r3, [pc, #56]	; (801223c <vPortFree+0xb8>)
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	43db      	mvns	r3, r3
 8012206:	401a      	ands	r2, r3
 8012208:	693b      	ldr	r3, [r7, #16]
 801220a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801220c:	f7ff f914 	bl	8011438 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012210:	693b      	ldr	r3, [r7, #16]
 8012212:	685a      	ldr	r2, [r3, #4]
 8012214:	4b0a      	ldr	r3, [pc, #40]	; (8012240 <vPortFree+0xbc>)
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	4413      	add	r3, r2
 801221a:	4a09      	ldr	r2, [pc, #36]	; (8012240 <vPortFree+0xbc>)
 801221c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801221e:	6938      	ldr	r0, [r7, #16]
 8012220:	f000 f874 	bl	801230c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012224:	4b07      	ldr	r3, [pc, #28]	; (8012244 <vPortFree+0xc0>)
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	3301      	adds	r3, #1
 801222a:	4a06      	ldr	r2, [pc, #24]	; (8012244 <vPortFree+0xc0>)
 801222c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801222e:	f7ff f911 	bl	8011454 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012232:	bf00      	nop
 8012234:	3718      	adds	r7, #24
 8012236:	46bd      	mov	sp, r7
 8012238:	bd80      	pop	{r7, pc}
 801223a:	bf00      	nop
 801223c:	20004f6c 	.word	0x20004f6c
 8012240:	20004f5c 	.word	0x20004f5c
 8012244:	20004f68 	.word	0x20004f68

08012248 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012248:	b480      	push	{r7}
 801224a:	b085      	sub	sp, #20
 801224c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801224e:	f244 6350 	movw	r3, #18000	; 0x4650
 8012252:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012254:	4b27      	ldr	r3, [pc, #156]	; (80122f4 <prvHeapInit+0xac>)
 8012256:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	f003 0307 	and.w	r3, r3, #7
 801225e:	2b00      	cmp	r3, #0
 8012260:	d00c      	beq.n	801227c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	3307      	adds	r3, #7
 8012266:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	f023 0307 	bic.w	r3, r3, #7
 801226e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012270:	68ba      	ldr	r2, [r7, #8]
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	1ad3      	subs	r3, r2, r3
 8012276:	4a1f      	ldr	r2, [pc, #124]	; (80122f4 <prvHeapInit+0xac>)
 8012278:	4413      	add	r3, r2
 801227a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012280:	4a1d      	ldr	r2, [pc, #116]	; (80122f8 <prvHeapInit+0xb0>)
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012286:	4b1c      	ldr	r3, [pc, #112]	; (80122f8 <prvHeapInit+0xb0>)
 8012288:	2200      	movs	r2, #0
 801228a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	68ba      	ldr	r2, [r7, #8]
 8012290:	4413      	add	r3, r2
 8012292:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012294:	2208      	movs	r2, #8
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	1a9b      	subs	r3, r3, r2
 801229a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	f023 0307 	bic.w	r3, r3, #7
 80122a2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	4a15      	ldr	r2, [pc, #84]	; (80122fc <prvHeapInit+0xb4>)
 80122a8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80122aa:	4b14      	ldr	r3, [pc, #80]	; (80122fc <prvHeapInit+0xb4>)
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	2200      	movs	r2, #0
 80122b0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80122b2:	4b12      	ldr	r3, [pc, #72]	; (80122fc <prvHeapInit+0xb4>)
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	2200      	movs	r2, #0
 80122b8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80122be:	683b      	ldr	r3, [r7, #0]
 80122c0:	68fa      	ldr	r2, [r7, #12]
 80122c2:	1ad2      	subs	r2, r2, r3
 80122c4:	683b      	ldr	r3, [r7, #0]
 80122c6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80122c8:	4b0c      	ldr	r3, [pc, #48]	; (80122fc <prvHeapInit+0xb4>)
 80122ca:	681a      	ldr	r2, [r3, #0]
 80122cc:	683b      	ldr	r3, [r7, #0]
 80122ce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80122d0:	683b      	ldr	r3, [r7, #0]
 80122d2:	685b      	ldr	r3, [r3, #4]
 80122d4:	4a0a      	ldr	r2, [pc, #40]	; (8012300 <prvHeapInit+0xb8>)
 80122d6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80122d8:	683b      	ldr	r3, [r7, #0]
 80122da:	685b      	ldr	r3, [r3, #4]
 80122dc:	4a09      	ldr	r2, [pc, #36]	; (8012304 <prvHeapInit+0xbc>)
 80122de:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80122e0:	4b09      	ldr	r3, [pc, #36]	; (8012308 <prvHeapInit+0xc0>)
 80122e2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80122e6:	601a      	str	r2, [r3, #0]
}
 80122e8:	bf00      	nop
 80122ea:	3714      	adds	r7, #20
 80122ec:	46bd      	mov	sp, r7
 80122ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f2:	4770      	bx	lr
 80122f4:	20000900 	.word	0x20000900
 80122f8:	20004f50 	.word	0x20004f50
 80122fc:	20004f58 	.word	0x20004f58
 8012300:	20004f60 	.word	0x20004f60
 8012304:	20004f5c 	.word	0x20004f5c
 8012308:	20004f6c 	.word	0x20004f6c

0801230c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801230c:	b480      	push	{r7}
 801230e:	b085      	sub	sp, #20
 8012310:	af00      	add	r7, sp, #0
 8012312:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012314:	4b28      	ldr	r3, [pc, #160]	; (80123b8 <prvInsertBlockIntoFreeList+0xac>)
 8012316:	60fb      	str	r3, [r7, #12]
 8012318:	e002      	b.n	8012320 <prvInsertBlockIntoFreeList+0x14>
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	60fb      	str	r3, [r7, #12]
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	687a      	ldr	r2, [r7, #4]
 8012326:	429a      	cmp	r2, r3
 8012328:	d8f7      	bhi.n	801231a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	685b      	ldr	r3, [r3, #4]
 8012332:	68ba      	ldr	r2, [r7, #8]
 8012334:	4413      	add	r3, r2
 8012336:	687a      	ldr	r2, [r7, #4]
 8012338:	429a      	cmp	r2, r3
 801233a:	d108      	bne.n	801234e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	685a      	ldr	r2, [r3, #4]
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	685b      	ldr	r3, [r3, #4]
 8012344:	441a      	add	r2, r3
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	685b      	ldr	r3, [r3, #4]
 8012356:	68ba      	ldr	r2, [r7, #8]
 8012358:	441a      	add	r2, r3
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	429a      	cmp	r2, r3
 8012360:	d118      	bne.n	8012394 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	681a      	ldr	r2, [r3, #0]
 8012366:	4b15      	ldr	r3, [pc, #84]	; (80123bc <prvInsertBlockIntoFreeList+0xb0>)
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	429a      	cmp	r2, r3
 801236c:	d00d      	beq.n	801238a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	685a      	ldr	r2, [r3, #4]
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	685b      	ldr	r3, [r3, #4]
 8012378:	441a      	add	r2, r3
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	681a      	ldr	r2, [r3, #0]
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	601a      	str	r2, [r3, #0]
 8012388:	e008      	b.n	801239c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801238a:	4b0c      	ldr	r3, [pc, #48]	; (80123bc <prvInsertBlockIntoFreeList+0xb0>)
 801238c:	681a      	ldr	r2, [r3, #0]
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	601a      	str	r2, [r3, #0]
 8012392:	e003      	b.n	801239c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012394:	68fb      	ldr	r3, [r7, #12]
 8012396:	681a      	ldr	r2, [r3, #0]
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801239c:	68fa      	ldr	r2, [r7, #12]
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	429a      	cmp	r2, r3
 80123a2:	d002      	beq.n	80123aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80123a4:	68fb      	ldr	r3, [r7, #12]
 80123a6:	687a      	ldr	r2, [r7, #4]
 80123a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80123aa:	bf00      	nop
 80123ac:	3714      	adds	r7, #20
 80123ae:	46bd      	mov	sp, r7
 80123b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123b4:	4770      	bx	lr
 80123b6:	bf00      	nop
 80123b8:	20004f50 	.word	0x20004f50
 80123bc:	20004f58 	.word	0x20004f58

080123c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80123c0:	b580      	push	{r7, lr}
 80123c2:	b082      	sub	sp, #8
 80123c4:	af00      	add	r7, sp, #0
 80123c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80123d4:	4619      	mov	r1, r3
 80123d6:	4610      	mov	r0, r2
 80123d8:	f7fa f892 	bl	800c500 <USBD_LL_SetupStage>
}
 80123dc:	bf00      	nop
 80123de:	3708      	adds	r7, #8
 80123e0:	46bd      	mov	sp, r7
 80123e2:	bd80      	pop	{r7, pc}

080123e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80123e4:	b580      	push	{r7, lr}
 80123e6:	b082      	sub	sp, #8
 80123e8:	af00      	add	r7, sp, #0
 80123ea:	6078      	str	r0, [r7, #4]
 80123ec:	460b      	mov	r3, r1
 80123ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80123f6:	78fa      	ldrb	r2, [r7, #3]
 80123f8:	6879      	ldr	r1, [r7, #4]
 80123fa:	4613      	mov	r3, r2
 80123fc:	00db      	lsls	r3, r3, #3
 80123fe:	1a9b      	subs	r3, r3, r2
 8012400:	009b      	lsls	r3, r3, #2
 8012402:	440b      	add	r3, r1
 8012404:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8012408:	681a      	ldr	r2, [r3, #0]
 801240a:	78fb      	ldrb	r3, [r7, #3]
 801240c:	4619      	mov	r1, r3
 801240e:	f7fa f8cc 	bl	800c5aa <USBD_LL_DataOutStage>
}
 8012412:	bf00      	nop
 8012414:	3708      	adds	r7, #8
 8012416:	46bd      	mov	sp, r7
 8012418:	bd80      	pop	{r7, pc}

0801241a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801241a:	b580      	push	{r7, lr}
 801241c:	b082      	sub	sp, #8
 801241e:	af00      	add	r7, sp, #0
 8012420:	6078      	str	r0, [r7, #4]
 8012422:	460b      	mov	r3, r1
 8012424:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801242c:	78fa      	ldrb	r2, [r7, #3]
 801242e:	6879      	ldr	r1, [r7, #4]
 8012430:	4613      	mov	r3, r2
 8012432:	00db      	lsls	r3, r3, #3
 8012434:	1a9b      	subs	r3, r3, r2
 8012436:	009b      	lsls	r3, r3, #2
 8012438:	440b      	add	r3, r1
 801243a:	3348      	adds	r3, #72	; 0x48
 801243c:	681a      	ldr	r2, [r3, #0]
 801243e:	78fb      	ldrb	r3, [r7, #3]
 8012440:	4619      	mov	r1, r3
 8012442:	f7fa f915 	bl	800c670 <USBD_LL_DataInStage>
}
 8012446:	bf00      	nop
 8012448:	3708      	adds	r7, #8
 801244a:	46bd      	mov	sp, r7
 801244c:	bd80      	pop	{r7, pc}

0801244e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801244e:	b580      	push	{r7, lr}
 8012450:	b082      	sub	sp, #8
 8012452:	af00      	add	r7, sp, #0
 8012454:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801245c:	4618      	mov	r0, r3
 801245e:	f7fa fa29 	bl	800c8b4 <USBD_LL_SOF>
}
 8012462:	bf00      	nop
 8012464:	3708      	adds	r7, #8
 8012466:	46bd      	mov	sp, r7
 8012468:	bd80      	pop	{r7, pc}

0801246a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801246a:	b580      	push	{r7, lr}
 801246c:	b084      	sub	sp, #16
 801246e:	af00      	add	r7, sp, #0
 8012470:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012472:	2301      	movs	r3, #1
 8012474:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	68db      	ldr	r3, [r3, #12]
 801247a:	2b00      	cmp	r3, #0
 801247c:	d102      	bne.n	8012484 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801247e:	2300      	movs	r3, #0
 8012480:	73fb      	strb	r3, [r7, #15]
 8012482:	e008      	b.n	8012496 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	68db      	ldr	r3, [r3, #12]
 8012488:	2b02      	cmp	r3, #2
 801248a:	d102      	bne.n	8012492 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801248c:	2301      	movs	r3, #1
 801248e:	73fb      	strb	r3, [r7, #15]
 8012490:	e001      	b.n	8012496 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8012492:	f7ef fc37 	bl	8001d04 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801249c:	7bfa      	ldrb	r2, [r7, #15]
 801249e:	4611      	mov	r1, r2
 80124a0:	4618      	mov	r0, r3
 80124a2:	f7fa f9c9 	bl	800c838 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80124ac:	4618      	mov	r0, r3
 80124ae:	f7fa f975 	bl	800c79c <USBD_LL_Reset>
}
 80124b2:	bf00      	nop
 80124b4:	3710      	adds	r7, #16
 80124b6:	46bd      	mov	sp, r7
 80124b8:	bd80      	pop	{r7, pc}
	...

080124bc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80124bc:	b580      	push	{r7, lr}
 80124be:	b082      	sub	sp, #8
 80124c0:	af00      	add	r7, sp, #0
 80124c2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80124ca:	4618      	mov	r0, r3
 80124cc:	f7fa f9c4 	bl	800c858 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	687a      	ldr	r2, [r7, #4]
 80124dc:	6812      	ldr	r2, [r2, #0]
 80124de:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80124e2:	f043 0301 	orr.w	r3, r3, #1
 80124e6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	6a1b      	ldr	r3, [r3, #32]
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d005      	beq.n	80124fc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80124f0:	4b04      	ldr	r3, [pc, #16]	; (8012504 <HAL_PCD_SuspendCallback+0x48>)
 80124f2:	691b      	ldr	r3, [r3, #16]
 80124f4:	4a03      	ldr	r2, [pc, #12]	; (8012504 <HAL_PCD_SuspendCallback+0x48>)
 80124f6:	f043 0306 	orr.w	r3, r3, #6
 80124fa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80124fc:	bf00      	nop
 80124fe:	3708      	adds	r7, #8
 8012500:	46bd      	mov	sp, r7
 8012502:	bd80      	pop	{r7, pc}
 8012504:	e000ed00 	.word	0xe000ed00

08012508 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012508:	b580      	push	{r7, lr}
 801250a:	b082      	sub	sp, #8
 801250c:	af00      	add	r7, sp, #0
 801250e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012516:	4618      	mov	r0, r3
 8012518:	f7fa f9b4 	bl	800c884 <USBD_LL_Resume>
}
 801251c:	bf00      	nop
 801251e:	3708      	adds	r7, #8
 8012520:	46bd      	mov	sp, r7
 8012522:	bd80      	pop	{r7, pc}

08012524 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012524:	b580      	push	{r7, lr}
 8012526:	b082      	sub	sp, #8
 8012528:	af00      	add	r7, sp, #0
 801252a:	6078      	str	r0, [r7, #4]
 801252c:	460b      	mov	r3, r1
 801252e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012536:	78fa      	ldrb	r2, [r7, #3]
 8012538:	4611      	mov	r1, r2
 801253a:	4618      	mov	r0, r3
 801253c:	f7fa fa02 	bl	800c944 <USBD_LL_IsoOUTIncomplete>
}
 8012540:	bf00      	nop
 8012542:	3708      	adds	r7, #8
 8012544:	46bd      	mov	sp, r7
 8012546:	bd80      	pop	{r7, pc}

08012548 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012548:	b580      	push	{r7, lr}
 801254a:	b082      	sub	sp, #8
 801254c:	af00      	add	r7, sp, #0
 801254e:	6078      	str	r0, [r7, #4]
 8012550:	460b      	mov	r3, r1
 8012552:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801255a:	78fa      	ldrb	r2, [r7, #3]
 801255c:	4611      	mov	r1, r2
 801255e:	4618      	mov	r0, r3
 8012560:	f7fa f9ca 	bl	800c8f8 <USBD_LL_IsoINIncomplete>
}
 8012564:	bf00      	nop
 8012566:	3708      	adds	r7, #8
 8012568:	46bd      	mov	sp, r7
 801256a:	bd80      	pop	{r7, pc}

0801256c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801256c:	b580      	push	{r7, lr}
 801256e:	b082      	sub	sp, #8
 8012570:	af00      	add	r7, sp, #0
 8012572:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801257a:	4618      	mov	r0, r3
 801257c:	f7fa fa08 	bl	800c990 <USBD_LL_DevConnected>
}
 8012580:	bf00      	nop
 8012582:	3708      	adds	r7, #8
 8012584:	46bd      	mov	sp, r7
 8012586:	bd80      	pop	{r7, pc}

08012588 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012588:	b580      	push	{r7, lr}
 801258a:	b082      	sub	sp, #8
 801258c:	af00      	add	r7, sp, #0
 801258e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012596:	4618      	mov	r0, r3
 8012598:	f7fa fa05 	bl	800c9a6 <USBD_LL_DevDisconnected>
}
 801259c:	bf00      	nop
 801259e:	3708      	adds	r7, #8
 80125a0:	46bd      	mov	sp, r7
 80125a2:	bd80      	pop	{r7, pc}

080125a4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80125a4:	b580      	push	{r7, lr}
 80125a6:	b084      	sub	sp, #16
 80125a8:	af00      	add	r7, sp, #0
 80125aa:	6078      	str	r0, [r7, #4]
 80125ac:	4608      	mov	r0, r1
 80125ae:	4611      	mov	r1, r2
 80125b0:	461a      	mov	r2, r3
 80125b2:	4603      	mov	r3, r0
 80125b4:	70fb      	strb	r3, [r7, #3]
 80125b6:	460b      	mov	r3, r1
 80125b8:	70bb      	strb	r3, [r7, #2]
 80125ba:	4613      	mov	r3, r2
 80125bc:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80125be:	2300      	movs	r3, #0
 80125c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80125c2:	2300      	movs	r3, #0
 80125c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80125cc:	78bb      	ldrb	r3, [r7, #2]
 80125ce:	883a      	ldrh	r2, [r7, #0]
 80125d0:	78f9      	ldrb	r1, [r7, #3]
 80125d2:	f7f4 ffc8 	bl	8007566 <HAL_PCD_EP_Open>
 80125d6:	4603      	mov	r3, r0
 80125d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80125da:	7bfb      	ldrb	r3, [r7, #15]
 80125dc:	4618      	mov	r0, r3
 80125de:	f000 f8d3 	bl	8012788 <USBD_Get_USB_Status>
 80125e2:	4603      	mov	r3, r0
 80125e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80125e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80125e8:	4618      	mov	r0, r3
 80125ea:	3710      	adds	r7, #16
 80125ec:	46bd      	mov	sp, r7
 80125ee:	bd80      	pop	{r7, pc}

080125f0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80125f0:	b580      	push	{r7, lr}
 80125f2:	b084      	sub	sp, #16
 80125f4:	af00      	add	r7, sp, #0
 80125f6:	6078      	str	r0, [r7, #4]
 80125f8:	460b      	mov	r3, r1
 80125fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80125fc:	2300      	movs	r3, #0
 80125fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012600:	2300      	movs	r3, #0
 8012602:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801260a:	78fa      	ldrb	r2, [r7, #3]
 801260c:	4611      	mov	r1, r2
 801260e:	4618      	mov	r0, r3
 8012610:	f7f5 f8a6 	bl	8007760 <HAL_PCD_EP_SetStall>
 8012614:	4603      	mov	r3, r0
 8012616:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012618:	7bfb      	ldrb	r3, [r7, #15]
 801261a:	4618      	mov	r0, r3
 801261c:	f000 f8b4 	bl	8012788 <USBD_Get_USB_Status>
 8012620:	4603      	mov	r3, r0
 8012622:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012624:	7bbb      	ldrb	r3, [r7, #14]
}
 8012626:	4618      	mov	r0, r3
 8012628:	3710      	adds	r7, #16
 801262a:	46bd      	mov	sp, r7
 801262c:	bd80      	pop	{r7, pc}

0801262e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801262e:	b580      	push	{r7, lr}
 8012630:	b084      	sub	sp, #16
 8012632:	af00      	add	r7, sp, #0
 8012634:	6078      	str	r0, [r7, #4]
 8012636:	460b      	mov	r3, r1
 8012638:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801263a:	2300      	movs	r3, #0
 801263c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801263e:	2300      	movs	r3, #0
 8012640:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012648:	78fa      	ldrb	r2, [r7, #3]
 801264a:	4611      	mov	r1, r2
 801264c:	4618      	mov	r0, r3
 801264e:	f7f5 f8eb 	bl	8007828 <HAL_PCD_EP_ClrStall>
 8012652:	4603      	mov	r3, r0
 8012654:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012656:	7bfb      	ldrb	r3, [r7, #15]
 8012658:	4618      	mov	r0, r3
 801265a:	f000 f895 	bl	8012788 <USBD_Get_USB_Status>
 801265e:	4603      	mov	r3, r0
 8012660:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012662:	7bbb      	ldrb	r3, [r7, #14]
}
 8012664:	4618      	mov	r0, r3
 8012666:	3710      	adds	r7, #16
 8012668:	46bd      	mov	sp, r7
 801266a:	bd80      	pop	{r7, pc}

0801266c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801266c:	b480      	push	{r7}
 801266e:	b085      	sub	sp, #20
 8012670:	af00      	add	r7, sp, #0
 8012672:	6078      	str	r0, [r7, #4]
 8012674:	460b      	mov	r3, r1
 8012676:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801267e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012680:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012684:	2b00      	cmp	r3, #0
 8012686:	da0b      	bge.n	80126a0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012688:	78fb      	ldrb	r3, [r7, #3]
 801268a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801268e:	68f9      	ldr	r1, [r7, #12]
 8012690:	4613      	mov	r3, r2
 8012692:	00db      	lsls	r3, r3, #3
 8012694:	1a9b      	subs	r3, r3, r2
 8012696:	009b      	lsls	r3, r3, #2
 8012698:	440b      	add	r3, r1
 801269a:	333e      	adds	r3, #62	; 0x3e
 801269c:	781b      	ldrb	r3, [r3, #0]
 801269e:	e00b      	b.n	80126b8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80126a0:	78fb      	ldrb	r3, [r7, #3]
 80126a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80126a6:	68f9      	ldr	r1, [r7, #12]
 80126a8:	4613      	mov	r3, r2
 80126aa:	00db      	lsls	r3, r3, #3
 80126ac:	1a9b      	subs	r3, r3, r2
 80126ae:	009b      	lsls	r3, r3, #2
 80126b0:	440b      	add	r3, r1
 80126b2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80126b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80126b8:	4618      	mov	r0, r3
 80126ba:	3714      	adds	r7, #20
 80126bc:	46bd      	mov	sp, r7
 80126be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c2:	4770      	bx	lr

080126c4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80126c4:	b580      	push	{r7, lr}
 80126c6:	b084      	sub	sp, #16
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	6078      	str	r0, [r7, #4]
 80126cc:	460b      	mov	r3, r1
 80126ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80126d0:	2300      	movs	r3, #0
 80126d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80126d4:	2300      	movs	r3, #0
 80126d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80126de:	78fa      	ldrb	r2, [r7, #3]
 80126e0:	4611      	mov	r1, r2
 80126e2:	4618      	mov	r0, r3
 80126e4:	f7f4 ff1a 	bl	800751c <HAL_PCD_SetAddress>
 80126e8:	4603      	mov	r3, r0
 80126ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80126ec:	7bfb      	ldrb	r3, [r7, #15]
 80126ee:	4618      	mov	r0, r3
 80126f0:	f000 f84a 	bl	8012788 <USBD_Get_USB_Status>
 80126f4:	4603      	mov	r3, r0
 80126f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80126f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80126fa:	4618      	mov	r0, r3
 80126fc:	3710      	adds	r7, #16
 80126fe:	46bd      	mov	sp, r7
 8012700:	bd80      	pop	{r7, pc}

08012702 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012702:	b580      	push	{r7, lr}
 8012704:	b086      	sub	sp, #24
 8012706:	af00      	add	r7, sp, #0
 8012708:	60f8      	str	r0, [r7, #12]
 801270a:	607a      	str	r2, [r7, #4]
 801270c:	603b      	str	r3, [r7, #0]
 801270e:	460b      	mov	r3, r1
 8012710:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012712:	2300      	movs	r3, #0
 8012714:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012716:	2300      	movs	r3, #0
 8012718:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012720:	7af9      	ldrb	r1, [r7, #11]
 8012722:	683b      	ldr	r3, [r7, #0]
 8012724:	687a      	ldr	r2, [r7, #4]
 8012726:	f7f4 ffd1 	bl	80076cc <HAL_PCD_EP_Transmit>
 801272a:	4603      	mov	r3, r0
 801272c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801272e:	7dfb      	ldrb	r3, [r7, #23]
 8012730:	4618      	mov	r0, r3
 8012732:	f000 f829 	bl	8012788 <USBD_Get_USB_Status>
 8012736:	4603      	mov	r3, r0
 8012738:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801273a:	7dbb      	ldrb	r3, [r7, #22]
}
 801273c:	4618      	mov	r0, r3
 801273e:	3718      	adds	r7, #24
 8012740:	46bd      	mov	sp, r7
 8012742:	bd80      	pop	{r7, pc}

08012744 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012744:	b580      	push	{r7, lr}
 8012746:	b086      	sub	sp, #24
 8012748:	af00      	add	r7, sp, #0
 801274a:	60f8      	str	r0, [r7, #12]
 801274c:	607a      	str	r2, [r7, #4]
 801274e:	603b      	str	r3, [r7, #0]
 8012750:	460b      	mov	r3, r1
 8012752:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012754:	2300      	movs	r3, #0
 8012756:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012758:	2300      	movs	r3, #0
 801275a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012762:	7af9      	ldrb	r1, [r7, #11]
 8012764:	683b      	ldr	r3, [r7, #0]
 8012766:	687a      	ldr	r2, [r7, #4]
 8012768:	f7f4 ff65 	bl	8007636 <HAL_PCD_EP_Receive>
 801276c:	4603      	mov	r3, r0
 801276e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012770:	7dfb      	ldrb	r3, [r7, #23]
 8012772:	4618      	mov	r0, r3
 8012774:	f000 f808 	bl	8012788 <USBD_Get_USB_Status>
 8012778:	4603      	mov	r3, r0
 801277a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801277c:	7dbb      	ldrb	r3, [r7, #22]
}
 801277e:	4618      	mov	r0, r3
 8012780:	3718      	adds	r7, #24
 8012782:	46bd      	mov	sp, r7
 8012784:	bd80      	pop	{r7, pc}
	...

08012788 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012788:	b480      	push	{r7}
 801278a:	b085      	sub	sp, #20
 801278c:	af00      	add	r7, sp, #0
 801278e:	4603      	mov	r3, r0
 8012790:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012792:	2300      	movs	r3, #0
 8012794:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012796:	79fb      	ldrb	r3, [r7, #7]
 8012798:	2b03      	cmp	r3, #3
 801279a:	d817      	bhi.n	80127cc <USBD_Get_USB_Status+0x44>
 801279c:	a201      	add	r2, pc, #4	; (adr r2, 80127a4 <USBD_Get_USB_Status+0x1c>)
 801279e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80127a2:	bf00      	nop
 80127a4:	080127b5 	.word	0x080127b5
 80127a8:	080127bb 	.word	0x080127bb
 80127ac:	080127c1 	.word	0x080127c1
 80127b0:	080127c7 	.word	0x080127c7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80127b4:	2300      	movs	r3, #0
 80127b6:	73fb      	strb	r3, [r7, #15]
    break;
 80127b8:	e00b      	b.n	80127d2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80127ba:	2303      	movs	r3, #3
 80127bc:	73fb      	strb	r3, [r7, #15]
    break;
 80127be:	e008      	b.n	80127d2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80127c0:	2301      	movs	r3, #1
 80127c2:	73fb      	strb	r3, [r7, #15]
    break;
 80127c4:	e005      	b.n	80127d2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80127c6:	2303      	movs	r3, #3
 80127c8:	73fb      	strb	r3, [r7, #15]
    break;
 80127ca:	e002      	b.n	80127d2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80127cc:	2303      	movs	r3, #3
 80127ce:	73fb      	strb	r3, [r7, #15]
    break;
 80127d0:	bf00      	nop
  }
  return usb_status;
 80127d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80127d4:	4618      	mov	r0, r3
 80127d6:	3714      	adds	r7, #20
 80127d8:	46bd      	mov	sp, r7
 80127da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127de:	4770      	bx	lr

080127e0 <_Znwj>:
 80127e0:	2801      	cmp	r0, #1
 80127e2:	bf38      	it	cc
 80127e4:	2001      	movcc	r0, #1
 80127e6:	b510      	push	{r4, lr}
 80127e8:	4604      	mov	r4, r0
 80127ea:	4620      	mov	r0, r4
 80127ec:	f000 f948 	bl	8012a80 <malloc>
 80127f0:	b930      	cbnz	r0, 8012800 <_Znwj+0x20>
 80127f2:	f000 f807 	bl	8012804 <_ZSt15get_new_handlerv>
 80127f6:	b908      	cbnz	r0, 80127fc <_Znwj+0x1c>
 80127f8:	f000 f816 	bl	8012828 <abort>
 80127fc:	4780      	blx	r0
 80127fe:	e7f4      	b.n	80127ea <_Znwj+0xa>
 8012800:	bd10      	pop	{r4, pc}
	...

08012804 <_ZSt15get_new_handlerv>:
 8012804:	4b02      	ldr	r3, [pc, #8]	; (8012810 <_ZSt15get_new_handlerv+0xc>)
 8012806:	6818      	ldr	r0, [r3, #0]
 8012808:	f3bf 8f5b 	dmb	ish
 801280c:	4770      	bx	lr
 801280e:	bf00      	nop
 8012810:	20004f70 	.word	0x20004f70
 8012814:	00000000 	.word	0x00000000

08012818 <nan>:
 8012818:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012820 <nan+0x8>
 801281c:	4770      	bx	lr
 801281e:	bf00      	nop
 8012820:	00000000 	.word	0x00000000
 8012824:	7ff80000 	.word	0x7ff80000

08012828 <abort>:
 8012828:	b508      	push	{r3, lr}
 801282a:	2006      	movs	r0, #6
 801282c:	f001 f936 	bl	8013a9c <raise>
 8012830:	2001      	movs	r0, #1
 8012832:	f004 fd6f 	bl	8017314 <_exit>
	...

08012838 <__errno>:
 8012838:	4b01      	ldr	r3, [pc, #4]	; (8012840 <__errno+0x8>)
 801283a:	6818      	ldr	r0, [r3, #0]
 801283c:	4770      	bx	lr
 801283e:	bf00      	nop
 8012840:	20000080 	.word	0x20000080

08012844 <std>:
 8012844:	2300      	movs	r3, #0
 8012846:	b510      	push	{r4, lr}
 8012848:	4604      	mov	r4, r0
 801284a:	e9c0 3300 	strd	r3, r3, [r0]
 801284e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012852:	6083      	str	r3, [r0, #8]
 8012854:	8181      	strh	r1, [r0, #12]
 8012856:	6643      	str	r3, [r0, #100]	; 0x64
 8012858:	81c2      	strh	r2, [r0, #14]
 801285a:	6183      	str	r3, [r0, #24]
 801285c:	4619      	mov	r1, r3
 801285e:	2208      	movs	r2, #8
 8012860:	305c      	adds	r0, #92	; 0x5c
 8012862:	f000 f923 	bl	8012aac <memset>
 8012866:	4b05      	ldr	r3, [pc, #20]	; (801287c <std+0x38>)
 8012868:	6263      	str	r3, [r4, #36]	; 0x24
 801286a:	4b05      	ldr	r3, [pc, #20]	; (8012880 <std+0x3c>)
 801286c:	62a3      	str	r3, [r4, #40]	; 0x28
 801286e:	4b05      	ldr	r3, [pc, #20]	; (8012884 <std+0x40>)
 8012870:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012872:	4b05      	ldr	r3, [pc, #20]	; (8012888 <std+0x44>)
 8012874:	6224      	str	r4, [r4, #32]
 8012876:	6323      	str	r3, [r4, #48]	; 0x30
 8012878:	bd10      	pop	{r4, pc}
 801287a:	bf00      	nop
 801287c:	08013b15 	.word	0x08013b15
 8012880:	08013b37 	.word	0x08013b37
 8012884:	08013b6f 	.word	0x08013b6f
 8012888:	08013b93 	.word	0x08013b93

0801288c <_cleanup_r>:
 801288c:	4901      	ldr	r1, [pc, #4]	; (8012894 <_cleanup_r+0x8>)
 801288e:	f000 b8af 	b.w	80129f0 <_fwalk_reent>
 8012892:	bf00      	nop
 8012894:	0801597d 	.word	0x0801597d

08012898 <__sfmoreglue>:
 8012898:	b570      	push	{r4, r5, r6, lr}
 801289a:	1e4a      	subs	r2, r1, #1
 801289c:	2568      	movs	r5, #104	; 0x68
 801289e:	4355      	muls	r5, r2
 80128a0:	460e      	mov	r6, r1
 80128a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80128a6:	f000 f959 	bl	8012b5c <_malloc_r>
 80128aa:	4604      	mov	r4, r0
 80128ac:	b140      	cbz	r0, 80128c0 <__sfmoreglue+0x28>
 80128ae:	2100      	movs	r1, #0
 80128b0:	e9c0 1600 	strd	r1, r6, [r0]
 80128b4:	300c      	adds	r0, #12
 80128b6:	60a0      	str	r0, [r4, #8]
 80128b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80128bc:	f000 f8f6 	bl	8012aac <memset>
 80128c0:	4620      	mov	r0, r4
 80128c2:	bd70      	pop	{r4, r5, r6, pc}

080128c4 <__sfp_lock_acquire>:
 80128c4:	4801      	ldr	r0, [pc, #4]	; (80128cc <__sfp_lock_acquire+0x8>)
 80128c6:	f000 b8d8 	b.w	8012a7a <__retarget_lock_acquire_recursive>
 80128ca:	bf00      	nop
 80128cc:	200068fc 	.word	0x200068fc

080128d0 <__sfp_lock_release>:
 80128d0:	4801      	ldr	r0, [pc, #4]	; (80128d8 <__sfp_lock_release+0x8>)
 80128d2:	f000 b8d3 	b.w	8012a7c <__retarget_lock_release_recursive>
 80128d6:	bf00      	nop
 80128d8:	200068fc 	.word	0x200068fc

080128dc <__sinit_lock_acquire>:
 80128dc:	4801      	ldr	r0, [pc, #4]	; (80128e4 <__sinit_lock_acquire+0x8>)
 80128de:	f000 b8cc 	b.w	8012a7a <__retarget_lock_acquire_recursive>
 80128e2:	bf00      	nop
 80128e4:	200068f7 	.word	0x200068f7

080128e8 <__sinit_lock_release>:
 80128e8:	4801      	ldr	r0, [pc, #4]	; (80128f0 <__sinit_lock_release+0x8>)
 80128ea:	f000 b8c7 	b.w	8012a7c <__retarget_lock_release_recursive>
 80128ee:	bf00      	nop
 80128f0:	200068f7 	.word	0x200068f7

080128f4 <__sinit>:
 80128f4:	b510      	push	{r4, lr}
 80128f6:	4604      	mov	r4, r0
 80128f8:	f7ff fff0 	bl	80128dc <__sinit_lock_acquire>
 80128fc:	69a3      	ldr	r3, [r4, #24]
 80128fe:	b11b      	cbz	r3, 8012908 <__sinit+0x14>
 8012900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012904:	f7ff bff0 	b.w	80128e8 <__sinit_lock_release>
 8012908:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801290c:	6523      	str	r3, [r4, #80]	; 0x50
 801290e:	4b13      	ldr	r3, [pc, #76]	; (801295c <__sinit+0x68>)
 8012910:	4a13      	ldr	r2, [pc, #76]	; (8012960 <__sinit+0x6c>)
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	62a2      	str	r2, [r4, #40]	; 0x28
 8012916:	42a3      	cmp	r3, r4
 8012918:	bf04      	itt	eq
 801291a:	2301      	moveq	r3, #1
 801291c:	61a3      	streq	r3, [r4, #24]
 801291e:	4620      	mov	r0, r4
 8012920:	f000 f820 	bl	8012964 <__sfp>
 8012924:	6060      	str	r0, [r4, #4]
 8012926:	4620      	mov	r0, r4
 8012928:	f000 f81c 	bl	8012964 <__sfp>
 801292c:	60a0      	str	r0, [r4, #8]
 801292e:	4620      	mov	r0, r4
 8012930:	f000 f818 	bl	8012964 <__sfp>
 8012934:	2200      	movs	r2, #0
 8012936:	60e0      	str	r0, [r4, #12]
 8012938:	2104      	movs	r1, #4
 801293a:	6860      	ldr	r0, [r4, #4]
 801293c:	f7ff ff82 	bl	8012844 <std>
 8012940:	68a0      	ldr	r0, [r4, #8]
 8012942:	2201      	movs	r2, #1
 8012944:	2109      	movs	r1, #9
 8012946:	f7ff ff7d 	bl	8012844 <std>
 801294a:	68e0      	ldr	r0, [r4, #12]
 801294c:	2202      	movs	r2, #2
 801294e:	2112      	movs	r1, #18
 8012950:	f7ff ff78 	bl	8012844 <std>
 8012954:	2301      	movs	r3, #1
 8012956:	61a3      	str	r3, [r4, #24]
 8012958:	e7d2      	b.n	8012900 <__sinit+0xc>
 801295a:	bf00      	nop
 801295c:	0801829c 	.word	0x0801829c
 8012960:	0801288d 	.word	0x0801288d

08012964 <__sfp>:
 8012964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012966:	4607      	mov	r7, r0
 8012968:	f7ff ffac 	bl	80128c4 <__sfp_lock_acquire>
 801296c:	4b1e      	ldr	r3, [pc, #120]	; (80129e8 <__sfp+0x84>)
 801296e:	681e      	ldr	r6, [r3, #0]
 8012970:	69b3      	ldr	r3, [r6, #24]
 8012972:	b913      	cbnz	r3, 801297a <__sfp+0x16>
 8012974:	4630      	mov	r0, r6
 8012976:	f7ff ffbd 	bl	80128f4 <__sinit>
 801297a:	3648      	adds	r6, #72	; 0x48
 801297c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012980:	3b01      	subs	r3, #1
 8012982:	d503      	bpl.n	801298c <__sfp+0x28>
 8012984:	6833      	ldr	r3, [r6, #0]
 8012986:	b30b      	cbz	r3, 80129cc <__sfp+0x68>
 8012988:	6836      	ldr	r6, [r6, #0]
 801298a:	e7f7      	b.n	801297c <__sfp+0x18>
 801298c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012990:	b9d5      	cbnz	r5, 80129c8 <__sfp+0x64>
 8012992:	4b16      	ldr	r3, [pc, #88]	; (80129ec <__sfp+0x88>)
 8012994:	60e3      	str	r3, [r4, #12]
 8012996:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801299a:	6665      	str	r5, [r4, #100]	; 0x64
 801299c:	f000 f86c 	bl	8012a78 <__retarget_lock_init_recursive>
 80129a0:	f7ff ff96 	bl	80128d0 <__sfp_lock_release>
 80129a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80129a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80129ac:	6025      	str	r5, [r4, #0]
 80129ae:	61a5      	str	r5, [r4, #24]
 80129b0:	2208      	movs	r2, #8
 80129b2:	4629      	mov	r1, r5
 80129b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80129b8:	f000 f878 	bl	8012aac <memset>
 80129bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80129c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80129c4:	4620      	mov	r0, r4
 80129c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80129c8:	3468      	adds	r4, #104	; 0x68
 80129ca:	e7d9      	b.n	8012980 <__sfp+0x1c>
 80129cc:	2104      	movs	r1, #4
 80129ce:	4638      	mov	r0, r7
 80129d0:	f7ff ff62 	bl	8012898 <__sfmoreglue>
 80129d4:	4604      	mov	r4, r0
 80129d6:	6030      	str	r0, [r6, #0]
 80129d8:	2800      	cmp	r0, #0
 80129da:	d1d5      	bne.n	8012988 <__sfp+0x24>
 80129dc:	f7ff ff78 	bl	80128d0 <__sfp_lock_release>
 80129e0:	230c      	movs	r3, #12
 80129e2:	603b      	str	r3, [r7, #0]
 80129e4:	e7ee      	b.n	80129c4 <__sfp+0x60>
 80129e6:	bf00      	nop
 80129e8:	0801829c 	.word	0x0801829c
 80129ec:	ffff0001 	.word	0xffff0001

080129f0 <_fwalk_reent>:
 80129f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80129f4:	4606      	mov	r6, r0
 80129f6:	4688      	mov	r8, r1
 80129f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80129fc:	2700      	movs	r7, #0
 80129fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012a02:	f1b9 0901 	subs.w	r9, r9, #1
 8012a06:	d505      	bpl.n	8012a14 <_fwalk_reent+0x24>
 8012a08:	6824      	ldr	r4, [r4, #0]
 8012a0a:	2c00      	cmp	r4, #0
 8012a0c:	d1f7      	bne.n	80129fe <_fwalk_reent+0xe>
 8012a0e:	4638      	mov	r0, r7
 8012a10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a14:	89ab      	ldrh	r3, [r5, #12]
 8012a16:	2b01      	cmp	r3, #1
 8012a18:	d907      	bls.n	8012a2a <_fwalk_reent+0x3a>
 8012a1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012a1e:	3301      	adds	r3, #1
 8012a20:	d003      	beq.n	8012a2a <_fwalk_reent+0x3a>
 8012a22:	4629      	mov	r1, r5
 8012a24:	4630      	mov	r0, r6
 8012a26:	47c0      	blx	r8
 8012a28:	4307      	orrs	r7, r0
 8012a2a:	3568      	adds	r5, #104	; 0x68
 8012a2c:	e7e9      	b.n	8012a02 <_fwalk_reent+0x12>
	...

08012a30 <__libc_init_array>:
 8012a30:	b570      	push	{r4, r5, r6, lr}
 8012a32:	4d0d      	ldr	r5, [pc, #52]	; (8012a68 <__libc_init_array+0x38>)
 8012a34:	4c0d      	ldr	r4, [pc, #52]	; (8012a6c <__libc_init_array+0x3c>)
 8012a36:	1b64      	subs	r4, r4, r5
 8012a38:	10a4      	asrs	r4, r4, #2
 8012a3a:	2600      	movs	r6, #0
 8012a3c:	42a6      	cmp	r6, r4
 8012a3e:	d109      	bne.n	8012a54 <__libc_init_array+0x24>
 8012a40:	4d0b      	ldr	r5, [pc, #44]	; (8012a70 <__libc_init_array+0x40>)
 8012a42:	4c0c      	ldr	r4, [pc, #48]	; (8012a74 <__libc_init_array+0x44>)
 8012a44:	f004 fc68 	bl	8017318 <_init>
 8012a48:	1b64      	subs	r4, r4, r5
 8012a4a:	10a4      	asrs	r4, r4, #2
 8012a4c:	2600      	movs	r6, #0
 8012a4e:	42a6      	cmp	r6, r4
 8012a50:	d105      	bne.n	8012a5e <__libc_init_array+0x2e>
 8012a52:	bd70      	pop	{r4, r5, r6, pc}
 8012a54:	f855 3b04 	ldr.w	r3, [r5], #4
 8012a58:	4798      	blx	r3
 8012a5a:	3601      	adds	r6, #1
 8012a5c:	e7ee      	b.n	8012a3c <__libc_init_array+0xc>
 8012a5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012a62:	4798      	blx	r3
 8012a64:	3601      	adds	r6, #1
 8012a66:	e7f2      	b.n	8012a4e <__libc_init_array+0x1e>
 8012a68:	080185fc 	.word	0x080185fc
 8012a6c:	080185fc 	.word	0x080185fc
 8012a70:	080185fc 	.word	0x080185fc
 8012a74:	08018600 	.word	0x08018600

08012a78 <__retarget_lock_init_recursive>:
 8012a78:	4770      	bx	lr

08012a7a <__retarget_lock_acquire_recursive>:
 8012a7a:	4770      	bx	lr

08012a7c <__retarget_lock_release_recursive>:
 8012a7c:	4770      	bx	lr
	...

08012a80 <malloc>:
 8012a80:	4b02      	ldr	r3, [pc, #8]	; (8012a8c <malloc+0xc>)
 8012a82:	4601      	mov	r1, r0
 8012a84:	6818      	ldr	r0, [r3, #0]
 8012a86:	f000 b869 	b.w	8012b5c <_malloc_r>
 8012a8a:	bf00      	nop
 8012a8c:	20000080 	.word	0x20000080

08012a90 <memcpy>:
 8012a90:	440a      	add	r2, r1
 8012a92:	4291      	cmp	r1, r2
 8012a94:	f100 33ff 	add.w	r3, r0, #4294967295
 8012a98:	d100      	bne.n	8012a9c <memcpy+0xc>
 8012a9a:	4770      	bx	lr
 8012a9c:	b510      	push	{r4, lr}
 8012a9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012aa2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012aa6:	4291      	cmp	r1, r2
 8012aa8:	d1f9      	bne.n	8012a9e <memcpy+0xe>
 8012aaa:	bd10      	pop	{r4, pc}

08012aac <memset>:
 8012aac:	4402      	add	r2, r0
 8012aae:	4603      	mov	r3, r0
 8012ab0:	4293      	cmp	r3, r2
 8012ab2:	d100      	bne.n	8012ab6 <memset+0xa>
 8012ab4:	4770      	bx	lr
 8012ab6:	f803 1b01 	strb.w	r1, [r3], #1
 8012aba:	e7f9      	b.n	8012ab0 <memset+0x4>

08012abc <_free_r>:
 8012abc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012abe:	2900      	cmp	r1, #0
 8012ac0:	d048      	beq.n	8012b54 <_free_r+0x98>
 8012ac2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012ac6:	9001      	str	r0, [sp, #4]
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	f1a1 0404 	sub.w	r4, r1, #4
 8012ace:	bfb8      	it	lt
 8012ad0:	18e4      	addlt	r4, r4, r3
 8012ad2:	f003 fb8b 	bl	80161ec <__malloc_lock>
 8012ad6:	4a20      	ldr	r2, [pc, #128]	; (8012b58 <_free_r+0x9c>)
 8012ad8:	9801      	ldr	r0, [sp, #4]
 8012ada:	6813      	ldr	r3, [r2, #0]
 8012adc:	4615      	mov	r5, r2
 8012ade:	b933      	cbnz	r3, 8012aee <_free_r+0x32>
 8012ae0:	6063      	str	r3, [r4, #4]
 8012ae2:	6014      	str	r4, [r2, #0]
 8012ae4:	b003      	add	sp, #12
 8012ae6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012aea:	f003 bb85 	b.w	80161f8 <__malloc_unlock>
 8012aee:	42a3      	cmp	r3, r4
 8012af0:	d90b      	bls.n	8012b0a <_free_r+0x4e>
 8012af2:	6821      	ldr	r1, [r4, #0]
 8012af4:	1862      	adds	r2, r4, r1
 8012af6:	4293      	cmp	r3, r2
 8012af8:	bf04      	itt	eq
 8012afa:	681a      	ldreq	r2, [r3, #0]
 8012afc:	685b      	ldreq	r3, [r3, #4]
 8012afe:	6063      	str	r3, [r4, #4]
 8012b00:	bf04      	itt	eq
 8012b02:	1852      	addeq	r2, r2, r1
 8012b04:	6022      	streq	r2, [r4, #0]
 8012b06:	602c      	str	r4, [r5, #0]
 8012b08:	e7ec      	b.n	8012ae4 <_free_r+0x28>
 8012b0a:	461a      	mov	r2, r3
 8012b0c:	685b      	ldr	r3, [r3, #4]
 8012b0e:	b10b      	cbz	r3, 8012b14 <_free_r+0x58>
 8012b10:	42a3      	cmp	r3, r4
 8012b12:	d9fa      	bls.n	8012b0a <_free_r+0x4e>
 8012b14:	6811      	ldr	r1, [r2, #0]
 8012b16:	1855      	adds	r5, r2, r1
 8012b18:	42a5      	cmp	r5, r4
 8012b1a:	d10b      	bne.n	8012b34 <_free_r+0x78>
 8012b1c:	6824      	ldr	r4, [r4, #0]
 8012b1e:	4421      	add	r1, r4
 8012b20:	1854      	adds	r4, r2, r1
 8012b22:	42a3      	cmp	r3, r4
 8012b24:	6011      	str	r1, [r2, #0]
 8012b26:	d1dd      	bne.n	8012ae4 <_free_r+0x28>
 8012b28:	681c      	ldr	r4, [r3, #0]
 8012b2a:	685b      	ldr	r3, [r3, #4]
 8012b2c:	6053      	str	r3, [r2, #4]
 8012b2e:	4421      	add	r1, r4
 8012b30:	6011      	str	r1, [r2, #0]
 8012b32:	e7d7      	b.n	8012ae4 <_free_r+0x28>
 8012b34:	d902      	bls.n	8012b3c <_free_r+0x80>
 8012b36:	230c      	movs	r3, #12
 8012b38:	6003      	str	r3, [r0, #0]
 8012b3a:	e7d3      	b.n	8012ae4 <_free_r+0x28>
 8012b3c:	6825      	ldr	r5, [r4, #0]
 8012b3e:	1961      	adds	r1, r4, r5
 8012b40:	428b      	cmp	r3, r1
 8012b42:	bf04      	itt	eq
 8012b44:	6819      	ldreq	r1, [r3, #0]
 8012b46:	685b      	ldreq	r3, [r3, #4]
 8012b48:	6063      	str	r3, [r4, #4]
 8012b4a:	bf04      	itt	eq
 8012b4c:	1949      	addeq	r1, r1, r5
 8012b4e:	6021      	streq	r1, [r4, #0]
 8012b50:	6054      	str	r4, [r2, #4]
 8012b52:	e7c7      	b.n	8012ae4 <_free_r+0x28>
 8012b54:	b003      	add	sp, #12
 8012b56:	bd30      	pop	{r4, r5, pc}
 8012b58:	20004f74 	.word	0x20004f74

08012b5c <_malloc_r>:
 8012b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b5e:	1ccd      	adds	r5, r1, #3
 8012b60:	f025 0503 	bic.w	r5, r5, #3
 8012b64:	3508      	adds	r5, #8
 8012b66:	2d0c      	cmp	r5, #12
 8012b68:	bf38      	it	cc
 8012b6a:	250c      	movcc	r5, #12
 8012b6c:	2d00      	cmp	r5, #0
 8012b6e:	4606      	mov	r6, r0
 8012b70:	db01      	blt.n	8012b76 <_malloc_r+0x1a>
 8012b72:	42a9      	cmp	r1, r5
 8012b74:	d903      	bls.n	8012b7e <_malloc_r+0x22>
 8012b76:	230c      	movs	r3, #12
 8012b78:	6033      	str	r3, [r6, #0]
 8012b7a:	2000      	movs	r0, #0
 8012b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b7e:	f003 fb35 	bl	80161ec <__malloc_lock>
 8012b82:	4921      	ldr	r1, [pc, #132]	; (8012c08 <_malloc_r+0xac>)
 8012b84:	680a      	ldr	r2, [r1, #0]
 8012b86:	4614      	mov	r4, r2
 8012b88:	b99c      	cbnz	r4, 8012bb2 <_malloc_r+0x56>
 8012b8a:	4f20      	ldr	r7, [pc, #128]	; (8012c0c <_malloc_r+0xb0>)
 8012b8c:	683b      	ldr	r3, [r7, #0]
 8012b8e:	b923      	cbnz	r3, 8012b9a <_malloc_r+0x3e>
 8012b90:	4621      	mov	r1, r4
 8012b92:	4630      	mov	r0, r6
 8012b94:	f000 ff44 	bl	8013a20 <_sbrk_r>
 8012b98:	6038      	str	r0, [r7, #0]
 8012b9a:	4629      	mov	r1, r5
 8012b9c:	4630      	mov	r0, r6
 8012b9e:	f000 ff3f 	bl	8013a20 <_sbrk_r>
 8012ba2:	1c43      	adds	r3, r0, #1
 8012ba4:	d123      	bne.n	8012bee <_malloc_r+0x92>
 8012ba6:	230c      	movs	r3, #12
 8012ba8:	6033      	str	r3, [r6, #0]
 8012baa:	4630      	mov	r0, r6
 8012bac:	f003 fb24 	bl	80161f8 <__malloc_unlock>
 8012bb0:	e7e3      	b.n	8012b7a <_malloc_r+0x1e>
 8012bb2:	6823      	ldr	r3, [r4, #0]
 8012bb4:	1b5b      	subs	r3, r3, r5
 8012bb6:	d417      	bmi.n	8012be8 <_malloc_r+0x8c>
 8012bb8:	2b0b      	cmp	r3, #11
 8012bba:	d903      	bls.n	8012bc4 <_malloc_r+0x68>
 8012bbc:	6023      	str	r3, [r4, #0]
 8012bbe:	441c      	add	r4, r3
 8012bc0:	6025      	str	r5, [r4, #0]
 8012bc2:	e004      	b.n	8012bce <_malloc_r+0x72>
 8012bc4:	6863      	ldr	r3, [r4, #4]
 8012bc6:	42a2      	cmp	r2, r4
 8012bc8:	bf0c      	ite	eq
 8012bca:	600b      	streq	r3, [r1, #0]
 8012bcc:	6053      	strne	r3, [r2, #4]
 8012bce:	4630      	mov	r0, r6
 8012bd0:	f003 fb12 	bl	80161f8 <__malloc_unlock>
 8012bd4:	f104 000b 	add.w	r0, r4, #11
 8012bd8:	1d23      	adds	r3, r4, #4
 8012bda:	f020 0007 	bic.w	r0, r0, #7
 8012bde:	1ac2      	subs	r2, r0, r3
 8012be0:	d0cc      	beq.n	8012b7c <_malloc_r+0x20>
 8012be2:	1a1b      	subs	r3, r3, r0
 8012be4:	50a3      	str	r3, [r4, r2]
 8012be6:	e7c9      	b.n	8012b7c <_malloc_r+0x20>
 8012be8:	4622      	mov	r2, r4
 8012bea:	6864      	ldr	r4, [r4, #4]
 8012bec:	e7cc      	b.n	8012b88 <_malloc_r+0x2c>
 8012bee:	1cc4      	adds	r4, r0, #3
 8012bf0:	f024 0403 	bic.w	r4, r4, #3
 8012bf4:	42a0      	cmp	r0, r4
 8012bf6:	d0e3      	beq.n	8012bc0 <_malloc_r+0x64>
 8012bf8:	1a21      	subs	r1, r4, r0
 8012bfa:	4630      	mov	r0, r6
 8012bfc:	f000 ff10 	bl	8013a20 <_sbrk_r>
 8012c00:	3001      	adds	r0, #1
 8012c02:	d1dd      	bne.n	8012bc0 <_malloc_r+0x64>
 8012c04:	e7cf      	b.n	8012ba6 <_malloc_r+0x4a>
 8012c06:	bf00      	nop
 8012c08:	20004f74 	.word	0x20004f74
 8012c0c:	20004f78 	.word	0x20004f78

08012c10 <__cvt>:
 8012c10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012c14:	ec55 4b10 	vmov	r4, r5, d0
 8012c18:	2d00      	cmp	r5, #0
 8012c1a:	460e      	mov	r6, r1
 8012c1c:	4619      	mov	r1, r3
 8012c1e:	462b      	mov	r3, r5
 8012c20:	bfbb      	ittet	lt
 8012c22:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012c26:	461d      	movlt	r5, r3
 8012c28:	2300      	movge	r3, #0
 8012c2a:	232d      	movlt	r3, #45	; 0x2d
 8012c2c:	700b      	strb	r3, [r1, #0]
 8012c2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012c30:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012c34:	4691      	mov	r9, r2
 8012c36:	f023 0820 	bic.w	r8, r3, #32
 8012c3a:	bfbc      	itt	lt
 8012c3c:	4622      	movlt	r2, r4
 8012c3e:	4614      	movlt	r4, r2
 8012c40:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012c44:	d005      	beq.n	8012c52 <__cvt+0x42>
 8012c46:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8012c4a:	d100      	bne.n	8012c4e <__cvt+0x3e>
 8012c4c:	3601      	adds	r6, #1
 8012c4e:	2102      	movs	r1, #2
 8012c50:	e000      	b.n	8012c54 <__cvt+0x44>
 8012c52:	2103      	movs	r1, #3
 8012c54:	ab03      	add	r3, sp, #12
 8012c56:	9301      	str	r3, [sp, #4]
 8012c58:	ab02      	add	r3, sp, #8
 8012c5a:	9300      	str	r3, [sp, #0]
 8012c5c:	ec45 4b10 	vmov	d0, r4, r5
 8012c60:	4653      	mov	r3, sl
 8012c62:	4632      	mov	r2, r6
 8012c64:	f002 f818 	bl	8014c98 <_dtoa_r>
 8012c68:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8012c6c:	4607      	mov	r7, r0
 8012c6e:	d102      	bne.n	8012c76 <__cvt+0x66>
 8012c70:	f019 0f01 	tst.w	r9, #1
 8012c74:	d022      	beq.n	8012cbc <__cvt+0xac>
 8012c76:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012c7a:	eb07 0906 	add.w	r9, r7, r6
 8012c7e:	d110      	bne.n	8012ca2 <__cvt+0x92>
 8012c80:	783b      	ldrb	r3, [r7, #0]
 8012c82:	2b30      	cmp	r3, #48	; 0x30
 8012c84:	d10a      	bne.n	8012c9c <__cvt+0x8c>
 8012c86:	2200      	movs	r2, #0
 8012c88:	2300      	movs	r3, #0
 8012c8a:	4620      	mov	r0, r4
 8012c8c:	4629      	mov	r1, r5
 8012c8e:	f7ed ff2b 	bl	8000ae8 <__aeabi_dcmpeq>
 8012c92:	b918      	cbnz	r0, 8012c9c <__cvt+0x8c>
 8012c94:	f1c6 0601 	rsb	r6, r6, #1
 8012c98:	f8ca 6000 	str.w	r6, [sl]
 8012c9c:	f8da 3000 	ldr.w	r3, [sl]
 8012ca0:	4499      	add	r9, r3
 8012ca2:	2200      	movs	r2, #0
 8012ca4:	2300      	movs	r3, #0
 8012ca6:	4620      	mov	r0, r4
 8012ca8:	4629      	mov	r1, r5
 8012caa:	f7ed ff1d 	bl	8000ae8 <__aeabi_dcmpeq>
 8012cae:	b108      	cbz	r0, 8012cb4 <__cvt+0xa4>
 8012cb0:	f8cd 900c 	str.w	r9, [sp, #12]
 8012cb4:	2230      	movs	r2, #48	; 0x30
 8012cb6:	9b03      	ldr	r3, [sp, #12]
 8012cb8:	454b      	cmp	r3, r9
 8012cba:	d307      	bcc.n	8012ccc <__cvt+0xbc>
 8012cbc:	9b03      	ldr	r3, [sp, #12]
 8012cbe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012cc0:	1bdb      	subs	r3, r3, r7
 8012cc2:	4638      	mov	r0, r7
 8012cc4:	6013      	str	r3, [r2, #0]
 8012cc6:	b004      	add	sp, #16
 8012cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ccc:	1c59      	adds	r1, r3, #1
 8012cce:	9103      	str	r1, [sp, #12]
 8012cd0:	701a      	strb	r2, [r3, #0]
 8012cd2:	e7f0      	b.n	8012cb6 <__cvt+0xa6>

08012cd4 <__exponent>:
 8012cd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012cd6:	4603      	mov	r3, r0
 8012cd8:	2900      	cmp	r1, #0
 8012cda:	bfb8      	it	lt
 8012cdc:	4249      	neglt	r1, r1
 8012cde:	f803 2b02 	strb.w	r2, [r3], #2
 8012ce2:	bfb4      	ite	lt
 8012ce4:	222d      	movlt	r2, #45	; 0x2d
 8012ce6:	222b      	movge	r2, #43	; 0x2b
 8012ce8:	2909      	cmp	r1, #9
 8012cea:	7042      	strb	r2, [r0, #1]
 8012cec:	dd2a      	ble.n	8012d44 <__exponent+0x70>
 8012cee:	f10d 0407 	add.w	r4, sp, #7
 8012cf2:	46a4      	mov	ip, r4
 8012cf4:	270a      	movs	r7, #10
 8012cf6:	46a6      	mov	lr, r4
 8012cf8:	460a      	mov	r2, r1
 8012cfa:	fb91 f6f7 	sdiv	r6, r1, r7
 8012cfe:	fb07 1516 	mls	r5, r7, r6, r1
 8012d02:	3530      	adds	r5, #48	; 0x30
 8012d04:	2a63      	cmp	r2, #99	; 0x63
 8012d06:	f104 34ff 	add.w	r4, r4, #4294967295
 8012d0a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8012d0e:	4631      	mov	r1, r6
 8012d10:	dcf1      	bgt.n	8012cf6 <__exponent+0x22>
 8012d12:	3130      	adds	r1, #48	; 0x30
 8012d14:	f1ae 0502 	sub.w	r5, lr, #2
 8012d18:	f804 1c01 	strb.w	r1, [r4, #-1]
 8012d1c:	1c44      	adds	r4, r0, #1
 8012d1e:	4629      	mov	r1, r5
 8012d20:	4561      	cmp	r1, ip
 8012d22:	d30a      	bcc.n	8012d3a <__exponent+0x66>
 8012d24:	f10d 0209 	add.w	r2, sp, #9
 8012d28:	eba2 020e 	sub.w	r2, r2, lr
 8012d2c:	4565      	cmp	r5, ip
 8012d2e:	bf88      	it	hi
 8012d30:	2200      	movhi	r2, #0
 8012d32:	4413      	add	r3, r2
 8012d34:	1a18      	subs	r0, r3, r0
 8012d36:	b003      	add	sp, #12
 8012d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012d3e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8012d42:	e7ed      	b.n	8012d20 <__exponent+0x4c>
 8012d44:	2330      	movs	r3, #48	; 0x30
 8012d46:	3130      	adds	r1, #48	; 0x30
 8012d48:	7083      	strb	r3, [r0, #2]
 8012d4a:	70c1      	strb	r1, [r0, #3]
 8012d4c:	1d03      	adds	r3, r0, #4
 8012d4e:	e7f1      	b.n	8012d34 <__exponent+0x60>

08012d50 <_printf_float>:
 8012d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d54:	ed2d 8b02 	vpush	{d8}
 8012d58:	b08d      	sub	sp, #52	; 0x34
 8012d5a:	460c      	mov	r4, r1
 8012d5c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8012d60:	4616      	mov	r6, r2
 8012d62:	461f      	mov	r7, r3
 8012d64:	4605      	mov	r5, r0
 8012d66:	f003 f9b5 	bl	80160d4 <_localeconv_r>
 8012d6a:	f8d0 a000 	ldr.w	sl, [r0]
 8012d6e:	4650      	mov	r0, sl
 8012d70:	f7ed fa3e 	bl	80001f0 <strlen>
 8012d74:	2300      	movs	r3, #0
 8012d76:	930a      	str	r3, [sp, #40]	; 0x28
 8012d78:	6823      	ldr	r3, [r4, #0]
 8012d7a:	9305      	str	r3, [sp, #20]
 8012d7c:	f8d8 3000 	ldr.w	r3, [r8]
 8012d80:	f894 b018 	ldrb.w	fp, [r4, #24]
 8012d84:	3307      	adds	r3, #7
 8012d86:	f023 0307 	bic.w	r3, r3, #7
 8012d8a:	f103 0208 	add.w	r2, r3, #8
 8012d8e:	f8c8 2000 	str.w	r2, [r8]
 8012d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d96:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012d9a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8012d9e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012da2:	9307      	str	r3, [sp, #28]
 8012da4:	f8cd 8018 	str.w	r8, [sp, #24]
 8012da8:	ee08 0a10 	vmov	s16, r0
 8012dac:	4b9f      	ldr	r3, [pc, #636]	; (801302c <_printf_float+0x2dc>)
 8012dae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012db2:	f04f 32ff 	mov.w	r2, #4294967295
 8012db6:	f7ed fec9 	bl	8000b4c <__aeabi_dcmpun>
 8012dba:	bb88      	cbnz	r0, 8012e20 <_printf_float+0xd0>
 8012dbc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012dc0:	4b9a      	ldr	r3, [pc, #616]	; (801302c <_printf_float+0x2dc>)
 8012dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8012dc6:	f7ed fea3 	bl	8000b10 <__aeabi_dcmple>
 8012dca:	bb48      	cbnz	r0, 8012e20 <_printf_float+0xd0>
 8012dcc:	2200      	movs	r2, #0
 8012dce:	2300      	movs	r3, #0
 8012dd0:	4640      	mov	r0, r8
 8012dd2:	4649      	mov	r1, r9
 8012dd4:	f7ed fe92 	bl	8000afc <__aeabi_dcmplt>
 8012dd8:	b110      	cbz	r0, 8012de0 <_printf_float+0x90>
 8012dda:	232d      	movs	r3, #45	; 0x2d
 8012ddc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012de0:	4b93      	ldr	r3, [pc, #588]	; (8013030 <_printf_float+0x2e0>)
 8012de2:	4894      	ldr	r0, [pc, #592]	; (8013034 <_printf_float+0x2e4>)
 8012de4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8012de8:	bf94      	ite	ls
 8012dea:	4698      	movls	r8, r3
 8012dec:	4680      	movhi	r8, r0
 8012dee:	2303      	movs	r3, #3
 8012df0:	6123      	str	r3, [r4, #16]
 8012df2:	9b05      	ldr	r3, [sp, #20]
 8012df4:	f023 0204 	bic.w	r2, r3, #4
 8012df8:	6022      	str	r2, [r4, #0]
 8012dfa:	f04f 0900 	mov.w	r9, #0
 8012dfe:	9700      	str	r7, [sp, #0]
 8012e00:	4633      	mov	r3, r6
 8012e02:	aa0b      	add	r2, sp, #44	; 0x2c
 8012e04:	4621      	mov	r1, r4
 8012e06:	4628      	mov	r0, r5
 8012e08:	f000 f9d8 	bl	80131bc <_printf_common>
 8012e0c:	3001      	adds	r0, #1
 8012e0e:	f040 8090 	bne.w	8012f32 <_printf_float+0x1e2>
 8012e12:	f04f 30ff 	mov.w	r0, #4294967295
 8012e16:	b00d      	add	sp, #52	; 0x34
 8012e18:	ecbd 8b02 	vpop	{d8}
 8012e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e20:	4642      	mov	r2, r8
 8012e22:	464b      	mov	r3, r9
 8012e24:	4640      	mov	r0, r8
 8012e26:	4649      	mov	r1, r9
 8012e28:	f7ed fe90 	bl	8000b4c <__aeabi_dcmpun>
 8012e2c:	b140      	cbz	r0, 8012e40 <_printf_float+0xf0>
 8012e2e:	464b      	mov	r3, r9
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	bfbc      	itt	lt
 8012e34:	232d      	movlt	r3, #45	; 0x2d
 8012e36:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8012e3a:	487f      	ldr	r0, [pc, #508]	; (8013038 <_printf_float+0x2e8>)
 8012e3c:	4b7f      	ldr	r3, [pc, #508]	; (801303c <_printf_float+0x2ec>)
 8012e3e:	e7d1      	b.n	8012de4 <_printf_float+0x94>
 8012e40:	6863      	ldr	r3, [r4, #4]
 8012e42:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8012e46:	9206      	str	r2, [sp, #24]
 8012e48:	1c5a      	adds	r2, r3, #1
 8012e4a:	d13f      	bne.n	8012ecc <_printf_float+0x17c>
 8012e4c:	2306      	movs	r3, #6
 8012e4e:	6063      	str	r3, [r4, #4]
 8012e50:	9b05      	ldr	r3, [sp, #20]
 8012e52:	6861      	ldr	r1, [r4, #4]
 8012e54:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8012e58:	2300      	movs	r3, #0
 8012e5a:	9303      	str	r3, [sp, #12]
 8012e5c:	ab0a      	add	r3, sp, #40	; 0x28
 8012e5e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8012e62:	ab09      	add	r3, sp, #36	; 0x24
 8012e64:	ec49 8b10 	vmov	d0, r8, r9
 8012e68:	9300      	str	r3, [sp, #0]
 8012e6a:	6022      	str	r2, [r4, #0]
 8012e6c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012e70:	4628      	mov	r0, r5
 8012e72:	f7ff fecd 	bl	8012c10 <__cvt>
 8012e76:	9b06      	ldr	r3, [sp, #24]
 8012e78:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012e7a:	2b47      	cmp	r3, #71	; 0x47
 8012e7c:	4680      	mov	r8, r0
 8012e7e:	d108      	bne.n	8012e92 <_printf_float+0x142>
 8012e80:	1cc8      	adds	r0, r1, #3
 8012e82:	db02      	blt.n	8012e8a <_printf_float+0x13a>
 8012e84:	6863      	ldr	r3, [r4, #4]
 8012e86:	4299      	cmp	r1, r3
 8012e88:	dd41      	ble.n	8012f0e <_printf_float+0x1be>
 8012e8a:	f1ab 0b02 	sub.w	fp, fp, #2
 8012e8e:	fa5f fb8b 	uxtb.w	fp, fp
 8012e92:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012e96:	d820      	bhi.n	8012eda <_printf_float+0x18a>
 8012e98:	3901      	subs	r1, #1
 8012e9a:	465a      	mov	r2, fp
 8012e9c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012ea0:	9109      	str	r1, [sp, #36]	; 0x24
 8012ea2:	f7ff ff17 	bl	8012cd4 <__exponent>
 8012ea6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012ea8:	1813      	adds	r3, r2, r0
 8012eaa:	2a01      	cmp	r2, #1
 8012eac:	4681      	mov	r9, r0
 8012eae:	6123      	str	r3, [r4, #16]
 8012eb0:	dc02      	bgt.n	8012eb8 <_printf_float+0x168>
 8012eb2:	6822      	ldr	r2, [r4, #0]
 8012eb4:	07d2      	lsls	r2, r2, #31
 8012eb6:	d501      	bpl.n	8012ebc <_printf_float+0x16c>
 8012eb8:	3301      	adds	r3, #1
 8012eba:	6123      	str	r3, [r4, #16]
 8012ebc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d09c      	beq.n	8012dfe <_printf_float+0xae>
 8012ec4:	232d      	movs	r3, #45	; 0x2d
 8012ec6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012eca:	e798      	b.n	8012dfe <_printf_float+0xae>
 8012ecc:	9a06      	ldr	r2, [sp, #24]
 8012ece:	2a47      	cmp	r2, #71	; 0x47
 8012ed0:	d1be      	bne.n	8012e50 <_printf_float+0x100>
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d1bc      	bne.n	8012e50 <_printf_float+0x100>
 8012ed6:	2301      	movs	r3, #1
 8012ed8:	e7b9      	b.n	8012e4e <_printf_float+0xfe>
 8012eda:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8012ede:	d118      	bne.n	8012f12 <_printf_float+0x1c2>
 8012ee0:	2900      	cmp	r1, #0
 8012ee2:	6863      	ldr	r3, [r4, #4]
 8012ee4:	dd0b      	ble.n	8012efe <_printf_float+0x1ae>
 8012ee6:	6121      	str	r1, [r4, #16]
 8012ee8:	b913      	cbnz	r3, 8012ef0 <_printf_float+0x1a0>
 8012eea:	6822      	ldr	r2, [r4, #0]
 8012eec:	07d0      	lsls	r0, r2, #31
 8012eee:	d502      	bpl.n	8012ef6 <_printf_float+0x1a6>
 8012ef0:	3301      	adds	r3, #1
 8012ef2:	440b      	add	r3, r1
 8012ef4:	6123      	str	r3, [r4, #16]
 8012ef6:	65a1      	str	r1, [r4, #88]	; 0x58
 8012ef8:	f04f 0900 	mov.w	r9, #0
 8012efc:	e7de      	b.n	8012ebc <_printf_float+0x16c>
 8012efe:	b913      	cbnz	r3, 8012f06 <_printf_float+0x1b6>
 8012f00:	6822      	ldr	r2, [r4, #0]
 8012f02:	07d2      	lsls	r2, r2, #31
 8012f04:	d501      	bpl.n	8012f0a <_printf_float+0x1ba>
 8012f06:	3302      	adds	r3, #2
 8012f08:	e7f4      	b.n	8012ef4 <_printf_float+0x1a4>
 8012f0a:	2301      	movs	r3, #1
 8012f0c:	e7f2      	b.n	8012ef4 <_printf_float+0x1a4>
 8012f0e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8012f12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012f14:	4299      	cmp	r1, r3
 8012f16:	db05      	blt.n	8012f24 <_printf_float+0x1d4>
 8012f18:	6823      	ldr	r3, [r4, #0]
 8012f1a:	6121      	str	r1, [r4, #16]
 8012f1c:	07d8      	lsls	r0, r3, #31
 8012f1e:	d5ea      	bpl.n	8012ef6 <_printf_float+0x1a6>
 8012f20:	1c4b      	adds	r3, r1, #1
 8012f22:	e7e7      	b.n	8012ef4 <_printf_float+0x1a4>
 8012f24:	2900      	cmp	r1, #0
 8012f26:	bfd4      	ite	le
 8012f28:	f1c1 0202 	rsble	r2, r1, #2
 8012f2c:	2201      	movgt	r2, #1
 8012f2e:	4413      	add	r3, r2
 8012f30:	e7e0      	b.n	8012ef4 <_printf_float+0x1a4>
 8012f32:	6823      	ldr	r3, [r4, #0]
 8012f34:	055a      	lsls	r2, r3, #21
 8012f36:	d407      	bmi.n	8012f48 <_printf_float+0x1f8>
 8012f38:	6923      	ldr	r3, [r4, #16]
 8012f3a:	4642      	mov	r2, r8
 8012f3c:	4631      	mov	r1, r6
 8012f3e:	4628      	mov	r0, r5
 8012f40:	47b8      	blx	r7
 8012f42:	3001      	adds	r0, #1
 8012f44:	d12c      	bne.n	8012fa0 <_printf_float+0x250>
 8012f46:	e764      	b.n	8012e12 <_printf_float+0xc2>
 8012f48:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012f4c:	f240 80e0 	bls.w	8013110 <_printf_float+0x3c0>
 8012f50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012f54:	2200      	movs	r2, #0
 8012f56:	2300      	movs	r3, #0
 8012f58:	f7ed fdc6 	bl	8000ae8 <__aeabi_dcmpeq>
 8012f5c:	2800      	cmp	r0, #0
 8012f5e:	d034      	beq.n	8012fca <_printf_float+0x27a>
 8012f60:	4a37      	ldr	r2, [pc, #220]	; (8013040 <_printf_float+0x2f0>)
 8012f62:	2301      	movs	r3, #1
 8012f64:	4631      	mov	r1, r6
 8012f66:	4628      	mov	r0, r5
 8012f68:	47b8      	blx	r7
 8012f6a:	3001      	adds	r0, #1
 8012f6c:	f43f af51 	beq.w	8012e12 <_printf_float+0xc2>
 8012f70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012f74:	429a      	cmp	r2, r3
 8012f76:	db02      	blt.n	8012f7e <_printf_float+0x22e>
 8012f78:	6823      	ldr	r3, [r4, #0]
 8012f7a:	07d8      	lsls	r0, r3, #31
 8012f7c:	d510      	bpl.n	8012fa0 <_printf_float+0x250>
 8012f7e:	ee18 3a10 	vmov	r3, s16
 8012f82:	4652      	mov	r2, sl
 8012f84:	4631      	mov	r1, r6
 8012f86:	4628      	mov	r0, r5
 8012f88:	47b8      	blx	r7
 8012f8a:	3001      	adds	r0, #1
 8012f8c:	f43f af41 	beq.w	8012e12 <_printf_float+0xc2>
 8012f90:	f04f 0800 	mov.w	r8, #0
 8012f94:	f104 091a 	add.w	r9, r4, #26
 8012f98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012f9a:	3b01      	subs	r3, #1
 8012f9c:	4543      	cmp	r3, r8
 8012f9e:	dc09      	bgt.n	8012fb4 <_printf_float+0x264>
 8012fa0:	6823      	ldr	r3, [r4, #0]
 8012fa2:	079b      	lsls	r3, r3, #30
 8012fa4:	f100 8105 	bmi.w	80131b2 <_printf_float+0x462>
 8012fa8:	68e0      	ldr	r0, [r4, #12]
 8012faa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012fac:	4298      	cmp	r0, r3
 8012fae:	bfb8      	it	lt
 8012fb0:	4618      	movlt	r0, r3
 8012fb2:	e730      	b.n	8012e16 <_printf_float+0xc6>
 8012fb4:	2301      	movs	r3, #1
 8012fb6:	464a      	mov	r2, r9
 8012fb8:	4631      	mov	r1, r6
 8012fba:	4628      	mov	r0, r5
 8012fbc:	47b8      	blx	r7
 8012fbe:	3001      	adds	r0, #1
 8012fc0:	f43f af27 	beq.w	8012e12 <_printf_float+0xc2>
 8012fc4:	f108 0801 	add.w	r8, r8, #1
 8012fc8:	e7e6      	b.n	8012f98 <_printf_float+0x248>
 8012fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	dc39      	bgt.n	8013044 <_printf_float+0x2f4>
 8012fd0:	4a1b      	ldr	r2, [pc, #108]	; (8013040 <_printf_float+0x2f0>)
 8012fd2:	2301      	movs	r3, #1
 8012fd4:	4631      	mov	r1, r6
 8012fd6:	4628      	mov	r0, r5
 8012fd8:	47b8      	blx	r7
 8012fda:	3001      	adds	r0, #1
 8012fdc:	f43f af19 	beq.w	8012e12 <_printf_float+0xc2>
 8012fe0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012fe4:	4313      	orrs	r3, r2
 8012fe6:	d102      	bne.n	8012fee <_printf_float+0x29e>
 8012fe8:	6823      	ldr	r3, [r4, #0]
 8012fea:	07d9      	lsls	r1, r3, #31
 8012fec:	d5d8      	bpl.n	8012fa0 <_printf_float+0x250>
 8012fee:	ee18 3a10 	vmov	r3, s16
 8012ff2:	4652      	mov	r2, sl
 8012ff4:	4631      	mov	r1, r6
 8012ff6:	4628      	mov	r0, r5
 8012ff8:	47b8      	blx	r7
 8012ffa:	3001      	adds	r0, #1
 8012ffc:	f43f af09 	beq.w	8012e12 <_printf_float+0xc2>
 8013000:	f04f 0900 	mov.w	r9, #0
 8013004:	f104 0a1a 	add.w	sl, r4, #26
 8013008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801300a:	425b      	negs	r3, r3
 801300c:	454b      	cmp	r3, r9
 801300e:	dc01      	bgt.n	8013014 <_printf_float+0x2c4>
 8013010:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013012:	e792      	b.n	8012f3a <_printf_float+0x1ea>
 8013014:	2301      	movs	r3, #1
 8013016:	4652      	mov	r2, sl
 8013018:	4631      	mov	r1, r6
 801301a:	4628      	mov	r0, r5
 801301c:	47b8      	blx	r7
 801301e:	3001      	adds	r0, #1
 8013020:	f43f aef7 	beq.w	8012e12 <_printf_float+0xc2>
 8013024:	f109 0901 	add.w	r9, r9, #1
 8013028:	e7ee      	b.n	8013008 <_printf_float+0x2b8>
 801302a:	bf00      	nop
 801302c:	7fefffff 	.word	0x7fefffff
 8013030:	080182a0 	.word	0x080182a0
 8013034:	080182a4 	.word	0x080182a4
 8013038:	080182ac 	.word	0x080182ac
 801303c:	080182a8 	.word	0x080182a8
 8013040:	080182b0 	.word	0x080182b0
 8013044:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013046:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013048:	429a      	cmp	r2, r3
 801304a:	bfa8      	it	ge
 801304c:	461a      	movge	r2, r3
 801304e:	2a00      	cmp	r2, #0
 8013050:	4691      	mov	r9, r2
 8013052:	dc37      	bgt.n	80130c4 <_printf_float+0x374>
 8013054:	f04f 0b00 	mov.w	fp, #0
 8013058:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801305c:	f104 021a 	add.w	r2, r4, #26
 8013060:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013062:	9305      	str	r3, [sp, #20]
 8013064:	eba3 0309 	sub.w	r3, r3, r9
 8013068:	455b      	cmp	r3, fp
 801306a:	dc33      	bgt.n	80130d4 <_printf_float+0x384>
 801306c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013070:	429a      	cmp	r2, r3
 8013072:	db3b      	blt.n	80130ec <_printf_float+0x39c>
 8013074:	6823      	ldr	r3, [r4, #0]
 8013076:	07da      	lsls	r2, r3, #31
 8013078:	d438      	bmi.n	80130ec <_printf_float+0x39c>
 801307a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801307c:	9b05      	ldr	r3, [sp, #20]
 801307e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013080:	1ad3      	subs	r3, r2, r3
 8013082:	eba2 0901 	sub.w	r9, r2, r1
 8013086:	4599      	cmp	r9, r3
 8013088:	bfa8      	it	ge
 801308a:	4699      	movge	r9, r3
 801308c:	f1b9 0f00 	cmp.w	r9, #0
 8013090:	dc35      	bgt.n	80130fe <_printf_float+0x3ae>
 8013092:	f04f 0800 	mov.w	r8, #0
 8013096:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801309a:	f104 0a1a 	add.w	sl, r4, #26
 801309e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80130a2:	1a9b      	subs	r3, r3, r2
 80130a4:	eba3 0309 	sub.w	r3, r3, r9
 80130a8:	4543      	cmp	r3, r8
 80130aa:	f77f af79 	ble.w	8012fa0 <_printf_float+0x250>
 80130ae:	2301      	movs	r3, #1
 80130b0:	4652      	mov	r2, sl
 80130b2:	4631      	mov	r1, r6
 80130b4:	4628      	mov	r0, r5
 80130b6:	47b8      	blx	r7
 80130b8:	3001      	adds	r0, #1
 80130ba:	f43f aeaa 	beq.w	8012e12 <_printf_float+0xc2>
 80130be:	f108 0801 	add.w	r8, r8, #1
 80130c2:	e7ec      	b.n	801309e <_printf_float+0x34e>
 80130c4:	4613      	mov	r3, r2
 80130c6:	4631      	mov	r1, r6
 80130c8:	4642      	mov	r2, r8
 80130ca:	4628      	mov	r0, r5
 80130cc:	47b8      	blx	r7
 80130ce:	3001      	adds	r0, #1
 80130d0:	d1c0      	bne.n	8013054 <_printf_float+0x304>
 80130d2:	e69e      	b.n	8012e12 <_printf_float+0xc2>
 80130d4:	2301      	movs	r3, #1
 80130d6:	4631      	mov	r1, r6
 80130d8:	4628      	mov	r0, r5
 80130da:	9205      	str	r2, [sp, #20]
 80130dc:	47b8      	blx	r7
 80130de:	3001      	adds	r0, #1
 80130e0:	f43f ae97 	beq.w	8012e12 <_printf_float+0xc2>
 80130e4:	9a05      	ldr	r2, [sp, #20]
 80130e6:	f10b 0b01 	add.w	fp, fp, #1
 80130ea:	e7b9      	b.n	8013060 <_printf_float+0x310>
 80130ec:	ee18 3a10 	vmov	r3, s16
 80130f0:	4652      	mov	r2, sl
 80130f2:	4631      	mov	r1, r6
 80130f4:	4628      	mov	r0, r5
 80130f6:	47b8      	blx	r7
 80130f8:	3001      	adds	r0, #1
 80130fa:	d1be      	bne.n	801307a <_printf_float+0x32a>
 80130fc:	e689      	b.n	8012e12 <_printf_float+0xc2>
 80130fe:	9a05      	ldr	r2, [sp, #20]
 8013100:	464b      	mov	r3, r9
 8013102:	4442      	add	r2, r8
 8013104:	4631      	mov	r1, r6
 8013106:	4628      	mov	r0, r5
 8013108:	47b8      	blx	r7
 801310a:	3001      	adds	r0, #1
 801310c:	d1c1      	bne.n	8013092 <_printf_float+0x342>
 801310e:	e680      	b.n	8012e12 <_printf_float+0xc2>
 8013110:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013112:	2a01      	cmp	r2, #1
 8013114:	dc01      	bgt.n	801311a <_printf_float+0x3ca>
 8013116:	07db      	lsls	r3, r3, #31
 8013118:	d538      	bpl.n	801318c <_printf_float+0x43c>
 801311a:	2301      	movs	r3, #1
 801311c:	4642      	mov	r2, r8
 801311e:	4631      	mov	r1, r6
 8013120:	4628      	mov	r0, r5
 8013122:	47b8      	blx	r7
 8013124:	3001      	adds	r0, #1
 8013126:	f43f ae74 	beq.w	8012e12 <_printf_float+0xc2>
 801312a:	ee18 3a10 	vmov	r3, s16
 801312e:	4652      	mov	r2, sl
 8013130:	4631      	mov	r1, r6
 8013132:	4628      	mov	r0, r5
 8013134:	47b8      	blx	r7
 8013136:	3001      	adds	r0, #1
 8013138:	f43f ae6b 	beq.w	8012e12 <_printf_float+0xc2>
 801313c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013140:	2200      	movs	r2, #0
 8013142:	2300      	movs	r3, #0
 8013144:	f7ed fcd0 	bl	8000ae8 <__aeabi_dcmpeq>
 8013148:	b9d8      	cbnz	r0, 8013182 <_printf_float+0x432>
 801314a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801314c:	f108 0201 	add.w	r2, r8, #1
 8013150:	3b01      	subs	r3, #1
 8013152:	4631      	mov	r1, r6
 8013154:	4628      	mov	r0, r5
 8013156:	47b8      	blx	r7
 8013158:	3001      	adds	r0, #1
 801315a:	d10e      	bne.n	801317a <_printf_float+0x42a>
 801315c:	e659      	b.n	8012e12 <_printf_float+0xc2>
 801315e:	2301      	movs	r3, #1
 8013160:	4652      	mov	r2, sl
 8013162:	4631      	mov	r1, r6
 8013164:	4628      	mov	r0, r5
 8013166:	47b8      	blx	r7
 8013168:	3001      	adds	r0, #1
 801316a:	f43f ae52 	beq.w	8012e12 <_printf_float+0xc2>
 801316e:	f108 0801 	add.w	r8, r8, #1
 8013172:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013174:	3b01      	subs	r3, #1
 8013176:	4543      	cmp	r3, r8
 8013178:	dcf1      	bgt.n	801315e <_printf_float+0x40e>
 801317a:	464b      	mov	r3, r9
 801317c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013180:	e6dc      	b.n	8012f3c <_printf_float+0x1ec>
 8013182:	f04f 0800 	mov.w	r8, #0
 8013186:	f104 0a1a 	add.w	sl, r4, #26
 801318a:	e7f2      	b.n	8013172 <_printf_float+0x422>
 801318c:	2301      	movs	r3, #1
 801318e:	4642      	mov	r2, r8
 8013190:	e7df      	b.n	8013152 <_printf_float+0x402>
 8013192:	2301      	movs	r3, #1
 8013194:	464a      	mov	r2, r9
 8013196:	4631      	mov	r1, r6
 8013198:	4628      	mov	r0, r5
 801319a:	47b8      	blx	r7
 801319c:	3001      	adds	r0, #1
 801319e:	f43f ae38 	beq.w	8012e12 <_printf_float+0xc2>
 80131a2:	f108 0801 	add.w	r8, r8, #1
 80131a6:	68e3      	ldr	r3, [r4, #12]
 80131a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80131aa:	1a5b      	subs	r3, r3, r1
 80131ac:	4543      	cmp	r3, r8
 80131ae:	dcf0      	bgt.n	8013192 <_printf_float+0x442>
 80131b0:	e6fa      	b.n	8012fa8 <_printf_float+0x258>
 80131b2:	f04f 0800 	mov.w	r8, #0
 80131b6:	f104 0919 	add.w	r9, r4, #25
 80131ba:	e7f4      	b.n	80131a6 <_printf_float+0x456>

080131bc <_printf_common>:
 80131bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80131c0:	4616      	mov	r6, r2
 80131c2:	4699      	mov	r9, r3
 80131c4:	688a      	ldr	r2, [r1, #8]
 80131c6:	690b      	ldr	r3, [r1, #16]
 80131c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80131cc:	4293      	cmp	r3, r2
 80131ce:	bfb8      	it	lt
 80131d0:	4613      	movlt	r3, r2
 80131d2:	6033      	str	r3, [r6, #0]
 80131d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80131d8:	4607      	mov	r7, r0
 80131da:	460c      	mov	r4, r1
 80131dc:	b10a      	cbz	r2, 80131e2 <_printf_common+0x26>
 80131de:	3301      	adds	r3, #1
 80131e0:	6033      	str	r3, [r6, #0]
 80131e2:	6823      	ldr	r3, [r4, #0]
 80131e4:	0699      	lsls	r1, r3, #26
 80131e6:	bf42      	ittt	mi
 80131e8:	6833      	ldrmi	r3, [r6, #0]
 80131ea:	3302      	addmi	r3, #2
 80131ec:	6033      	strmi	r3, [r6, #0]
 80131ee:	6825      	ldr	r5, [r4, #0]
 80131f0:	f015 0506 	ands.w	r5, r5, #6
 80131f4:	d106      	bne.n	8013204 <_printf_common+0x48>
 80131f6:	f104 0a19 	add.w	sl, r4, #25
 80131fa:	68e3      	ldr	r3, [r4, #12]
 80131fc:	6832      	ldr	r2, [r6, #0]
 80131fe:	1a9b      	subs	r3, r3, r2
 8013200:	42ab      	cmp	r3, r5
 8013202:	dc26      	bgt.n	8013252 <_printf_common+0x96>
 8013204:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013208:	1e13      	subs	r3, r2, #0
 801320a:	6822      	ldr	r2, [r4, #0]
 801320c:	bf18      	it	ne
 801320e:	2301      	movne	r3, #1
 8013210:	0692      	lsls	r2, r2, #26
 8013212:	d42b      	bmi.n	801326c <_printf_common+0xb0>
 8013214:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013218:	4649      	mov	r1, r9
 801321a:	4638      	mov	r0, r7
 801321c:	47c0      	blx	r8
 801321e:	3001      	adds	r0, #1
 8013220:	d01e      	beq.n	8013260 <_printf_common+0xa4>
 8013222:	6823      	ldr	r3, [r4, #0]
 8013224:	68e5      	ldr	r5, [r4, #12]
 8013226:	6832      	ldr	r2, [r6, #0]
 8013228:	f003 0306 	and.w	r3, r3, #6
 801322c:	2b04      	cmp	r3, #4
 801322e:	bf08      	it	eq
 8013230:	1aad      	subeq	r5, r5, r2
 8013232:	68a3      	ldr	r3, [r4, #8]
 8013234:	6922      	ldr	r2, [r4, #16]
 8013236:	bf0c      	ite	eq
 8013238:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801323c:	2500      	movne	r5, #0
 801323e:	4293      	cmp	r3, r2
 8013240:	bfc4      	itt	gt
 8013242:	1a9b      	subgt	r3, r3, r2
 8013244:	18ed      	addgt	r5, r5, r3
 8013246:	2600      	movs	r6, #0
 8013248:	341a      	adds	r4, #26
 801324a:	42b5      	cmp	r5, r6
 801324c:	d11a      	bne.n	8013284 <_printf_common+0xc8>
 801324e:	2000      	movs	r0, #0
 8013250:	e008      	b.n	8013264 <_printf_common+0xa8>
 8013252:	2301      	movs	r3, #1
 8013254:	4652      	mov	r2, sl
 8013256:	4649      	mov	r1, r9
 8013258:	4638      	mov	r0, r7
 801325a:	47c0      	blx	r8
 801325c:	3001      	adds	r0, #1
 801325e:	d103      	bne.n	8013268 <_printf_common+0xac>
 8013260:	f04f 30ff 	mov.w	r0, #4294967295
 8013264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013268:	3501      	adds	r5, #1
 801326a:	e7c6      	b.n	80131fa <_printf_common+0x3e>
 801326c:	18e1      	adds	r1, r4, r3
 801326e:	1c5a      	adds	r2, r3, #1
 8013270:	2030      	movs	r0, #48	; 0x30
 8013272:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013276:	4422      	add	r2, r4
 8013278:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801327c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013280:	3302      	adds	r3, #2
 8013282:	e7c7      	b.n	8013214 <_printf_common+0x58>
 8013284:	2301      	movs	r3, #1
 8013286:	4622      	mov	r2, r4
 8013288:	4649      	mov	r1, r9
 801328a:	4638      	mov	r0, r7
 801328c:	47c0      	blx	r8
 801328e:	3001      	adds	r0, #1
 8013290:	d0e6      	beq.n	8013260 <_printf_common+0xa4>
 8013292:	3601      	adds	r6, #1
 8013294:	e7d9      	b.n	801324a <_printf_common+0x8e>
	...

08013298 <_printf_i>:
 8013298:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801329c:	460c      	mov	r4, r1
 801329e:	4691      	mov	r9, r2
 80132a0:	7e27      	ldrb	r7, [r4, #24]
 80132a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80132a4:	2f78      	cmp	r7, #120	; 0x78
 80132a6:	4680      	mov	r8, r0
 80132a8:	469a      	mov	sl, r3
 80132aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80132ae:	d807      	bhi.n	80132c0 <_printf_i+0x28>
 80132b0:	2f62      	cmp	r7, #98	; 0x62
 80132b2:	d80a      	bhi.n	80132ca <_printf_i+0x32>
 80132b4:	2f00      	cmp	r7, #0
 80132b6:	f000 80d8 	beq.w	801346a <_printf_i+0x1d2>
 80132ba:	2f58      	cmp	r7, #88	; 0x58
 80132bc:	f000 80a3 	beq.w	8013406 <_printf_i+0x16e>
 80132c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80132c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80132c8:	e03a      	b.n	8013340 <_printf_i+0xa8>
 80132ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80132ce:	2b15      	cmp	r3, #21
 80132d0:	d8f6      	bhi.n	80132c0 <_printf_i+0x28>
 80132d2:	a001      	add	r0, pc, #4	; (adr r0, 80132d8 <_printf_i+0x40>)
 80132d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80132d8:	08013331 	.word	0x08013331
 80132dc:	08013345 	.word	0x08013345
 80132e0:	080132c1 	.word	0x080132c1
 80132e4:	080132c1 	.word	0x080132c1
 80132e8:	080132c1 	.word	0x080132c1
 80132ec:	080132c1 	.word	0x080132c1
 80132f0:	08013345 	.word	0x08013345
 80132f4:	080132c1 	.word	0x080132c1
 80132f8:	080132c1 	.word	0x080132c1
 80132fc:	080132c1 	.word	0x080132c1
 8013300:	080132c1 	.word	0x080132c1
 8013304:	08013451 	.word	0x08013451
 8013308:	08013375 	.word	0x08013375
 801330c:	08013433 	.word	0x08013433
 8013310:	080132c1 	.word	0x080132c1
 8013314:	080132c1 	.word	0x080132c1
 8013318:	08013473 	.word	0x08013473
 801331c:	080132c1 	.word	0x080132c1
 8013320:	08013375 	.word	0x08013375
 8013324:	080132c1 	.word	0x080132c1
 8013328:	080132c1 	.word	0x080132c1
 801332c:	0801343b 	.word	0x0801343b
 8013330:	680b      	ldr	r3, [r1, #0]
 8013332:	1d1a      	adds	r2, r3, #4
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	600a      	str	r2, [r1, #0]
 8013338:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801333c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013340:	2301      	movs	r3, #1
 8013342:	e0a3      	b.n	801348c <_printf_i+0x1f4>
 8013344:	6825      	ldr	r5, [r4, #0]
 8013346:	6808      	ldr	r0, [r1, #0]
 8013348:	062e      	lsls	r6, r5, #24
 801334a:	f100 0304 	add.w	r3, r0, #4
 801334e:	d50a      	bpl.n	8013366 <_printf_i+0xce>
 8013350:	6805      	ldr	r5, [r0, #0]
 8013352:	600b      	str	r3, [r1, #0]
 8013354:	2d00      	cmp	r5, #0
 8013356:	da03      	bge.n	8013360 <_printf_i+0xc8>
 8013358:	232d      	movs	r3, #45	; 0x2d
 801335a:	426d      	negs	r5, r5
 801335c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013360:	485e      	ldr	r0, [pc, #376]	; (80134dc <_printf_i+0x244>)
 8013362:	230a      	movs	r3, #10
 8013364:	e019      	b.n	801339a <_printf_i+0x102>
 8013366:	f015 0f40 	tst.w	r5, #64	; 0x40
 801336a:	6805      	ldr	r5, [r0, #0]
 801336c:	600b      	str	r3, [r1, #0]
 801336e:	bf18      	it	ne
 8013370:	b22d      	sxthne	r5, r5
 8013372:	e7ef      	b.n	8013354 <_printf_i+0xbc>
 8013374:	680b      	ldr	r3, [r1, #0]
 8013376:	6825      	ldr	r5, [r4, #0]
 8013378:	1d18      	adds	r0, r3, #4
 801337a:	6008      	str	r0, [r1, #0]
 801337c:	0628      	lsls	r0, r5, #24
 801337e:	d501      	bpl.n	8013384 <_printf_i+0xec>
 8013380:	681d      	ldr	r5, [r3, #0]
 8013382:	e002      	b.n	801338a <_printf_i+0xf2>
 8013384:	0669      	lsls	r1, r5, #25
 8013386:	d5fb      	bpl.n	8013380 <_printf_i+0xe8>
 8013388:	881d      	ldrh	r5, [r3, #0]
 801338a:	4854      	ldr	r0, [pc, #336]	; (80134dc <_printf_i+0x244>)
 801338c:	2f6f      	cmp	r7, #111	; 0x6f
 801338e:	bf0c      	ite	eq
 8013390:	2308      	moveq	r3, #8
 8013392:	230a      	movne	r3, #10
 8013394:	2100      	movs	r1, #0
 8013396:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801339a:	6866      	ldr	r6, [r4, #4]
 801339c:	60a6      	str	r6, [r4, #8]
 801339e:	2e00      	cmp	r6, #0
 80133a0:	bfa2      	ittt	ge
 80133a2:	6821      	ldrge	r1, [r4, #0]
 80133a4:	f021 0104 	bicge.w	r1, r1, #4
 80133a8:	6021      	strge	r1, [r4, #0]
 80133aa:	b90d      	cbnz	r5, 80133b0 <_printf_i+0x118>
 80133ac:	2e00      	cmp	r6, #0
 80133ae:	d04d      	beq.n	801344c <_printf_i+0x1b4>
 80133b0:	4616      	mov	r6, r2
 80133b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80133b6:	fb03 5711 	mls	r7, r3, r1, r5
 80133ba:	5dc7      	ldrb	r7, [r0, r7]
 80133bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80133c0:	462f      	mov	r7, r5
 80133c2:	42bb      	cmp	r3, r7
 80133c4:	460d      	mov	r5, r1
 80133c6:	d9f4      	bls.n	80133b2 <_printf_i+0x11a>
 80133c8:	2b08      	cmp	r3, #8
 80133ca:	d10b      	bne.n	80133e4 <_printf_i+0x14c>
 80133cc:	6823      	ldr	r3, [r4, #0]
 80133ce:	07df      	lsls	r7, r3, #31
 80133d0:	d508      	bpl.n	80133e4 <_printf_i+0x14c>
 80133d2:	6923      	ldr	r3, [r4, #16]
 80133d4:	6861      	ldr	r1, [r4, #4]
 80133d6:	4299      	cmp	r1, r3
 80133d8:	bfde      	ittt	le
 80133da:	2330      	movle	r3, #48	; 0x30
 80133dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80133e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80133e4:	1b92      	subs	r2, r2, r6
 80133e6:	6122      	str	r2, [r4, #16]
 80133e8:	f8cd a000 	str.w	sl, [sp]
 80133ec:	464b      	mov	r3, r9
 80133ee:	aa03      	add	r2, sp, #12
 80133f0:	4621      	mov	r1, r4
 80133f2:	4640      	mov	r0, r8
 80133f4:	f7ff fee2 	bl	80131bc <_printf_common>
 80133f8:	3001      	adds	r0, #1
 80133fa:	d14c      	bne.n	8013496 <_printf_i+0x1fe>
 80133fc:	f04f 30ff 	mov.w	r0, #4294967295
 8013400:	b004      	add	sp, #16
 8013402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013406:	4835      	ldr	r0, [pc, #212]	; (80134dc <_printf_i+0x244>)
 8013408:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801340c:	6823      	ldr	r3, [r4, #0]
 801340e:	680e      	ldr	r6, [r1, #0]
 8013410:	061f      	lsls	r7, r3, #24
 8013412:	f856 5b04 	ldr.w	r5, [r6], #4
 8013416:	600e      	str	r6, [r1, #0]
 8013418:	d514      	bpl.n	8013444 <_printf_i+0x1ac>
 801341a:	07d9      	lsls	r1, r3, #31
 801341c:	bf44      	itt	mi
 801341e:	f043 0320 	orrmi.w	r3, r3, #32
 8013422:	6023      	strmi	r3, [r4, #0]
 8013424:	b91d      	cbnz	r5, 801342e <_printf_i+0x196>
 8013426:	6823      	ldr	r3, [r4, #0]
 8013428:	f023 0320 	bic.w	r3, r3, #32
 801342c:	6023      	str	r3, [r4, #0]
 801342e:	2310      	movs	r3, #16
 8013430:	e7b0      	b.n	8013394 <_printf_i+0xfc>
 8013432:	6823      	ldr	r3, [r4, #0]
 8013434:	f043 0320 	orr.w	r3, r3, #32
 8013438:	6023      	str	r3, [r4, #0]
 801343a:	2378      	movs	r3, #120	; 0x78
 801343c:	4828      	ldr	r0, [pc, #160]	; (80134e0 <_printf_i+0x248>)
 801343e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013442:	e7e3      	b.n	801340c <_printf_i+0x174>
 8013444:	065e      	lsls	r6, r3, #25
 8013446:	bf48      	it	mi
 8013448:	b2ad      	uxthmi	r5, r5
 801344a:	e7e6      	b.n	801341a <_printf_i+0x182>
 801344c:	4616      	mov	r6, r2
 801344e:	e7bb      	b.n	80133c8 <_printf_i+0x130>
 8013450:	680b      	ldr	r3, [r1, #0]
 8013452:	6826      	ldr	r6, [r4, #0]
 8013454:	6960      	ldr	r0, [r4, #20]
 8013456:	1d1d      	adds	r5, r3, #4
 8013458:	600d      	str	r5, [r1, #0]
 801345a:	0635      	lsls	r5, r6, #24
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	d501      	bpl.n	8013464 <_printf_i+0x1cc>
 8013460:	6018      	str	r0, [r3, #0]
 8013462:	e002      	b.n	801346a <_printf_i+0x1d2>
 8013464:	0671      	lsls	r1, r6, #25
 8013466:	d5fb      	bpl.n	8013460 <_printf_i+0x1c8>
 8013468:	8018      	strh	r0, [r3, #0]
 801346a:	2300      	movs	r3, #0
 801346c:	6123      	str	r3, [r4, #16]
 801346e:	4616      	mov	r6, r2
 8013470:	e7ba      	b.n	80133e8 <_printf_i+0x150>
 8013472:	680b      	ldr	r3, [r1, #0]
 8013474:	1d1a      	adds	r2, r3, #4
 8013476:	600a      	str	r2, [r1, #0]
 8013478:	681e      	ldr	r6, [r3, #0]
 801347a:	6862      	ldr	r2, [r4, #4]
 801347c:	2100      	movs	r1, #0
 801347e:	4630      	mov	r0, r6
 8013480:	f7ec febe 	bl	8000200 <memchr>
 8013484:	b108      	cbz	r0, 801348a <_printf_i+0x1f2>
 8013486:	1b80      	subs	r0, r0, r6
 8013488:	6060      	str	r0, [r4, #4]
 801348a:	6863      	ldr	r3, [r4, #4]
 801348c:	6123      	str	r3, [r4, #16]
 801348e:	2300      	movs	r3, #0
 8013490:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013494:	e7a8      	b.n	80133e8 <_printf_i+0x150>
 8013496:	6923      	ldr	r3, [r4, #16]
 8013498:	4632      	mov	r2, r6
 801349a:	4649      	mov	r1, r9
 801349c:	4640      	mov	r0, r8
 801349e:	47d0      	blx	sl
 80134a0:	3001      	adds	r0, #1
 80134a2:	d0ab      	beq.n	80133fc <_printf_i+0x164>
 80134a4:	6823      	ldr	r3, [r4, #0]
 80134a6:	079b      	lsls	r3, r3, #30
 80134a8:	d413      	bmi.n	80134d2 <_printf_i+0x23a>
 80134aa:	68e0      	ldr	r0, [r4, #12]
 80134ac:	9b03      	ldr	r3, [sp, #12]
 80134ae:	4298      	cmp	r0, r3
 80134b0:	bfb8      	it	lt
 80134b2:	4618      	movlt	r0, r3
 80134b4:	e7a4      	b.n	8013400 <_printf_i+0x168>
 80134b6:	2301      	movs	r3, #1
 80134b8:	4632      	mov	r2, r6
 80134ba:	4649      	mov	r1, r9
 80134bc:	4640      	mov	r0, r8
 80134be:	47d0      	blx	sl
 80134c0:	3001      	adds	r0, #1
 80134c2:	d09b      	beq.n	80133fc <_printf_i+0x164>
 80134c4:	3501      	adds	r5, #1
 80134c6:	68e3      	ldr	r3, [r4, #12]
 80134c8:	9903      	ldr	r1, [sp, #12]
 80134ca:	1a5b      	subs	r3, r3, r1
 80134cc:	42ab      	cmp	r3, r5
 80134ce:	dcf2      	bgt.n	80134b6 <_printf_i+0x21e>
 80134d0:	e7eb      	b.n	80134aa <_printf_i+0x212>
 80134d2:	2500      	movs	r5, #0
 80134d4:	f104 0619 	add.w	r6, r4, #25
 80134d8:	e7f5      	b.n	80134c6 <_printf_i+0x22e>
 80134da:	bf00      	nop
 80134dc:	080182b2 	.word	0x080182b2
 80134e0:	080182c3 	.word	0x080182c3

080134e4 <_scanf_float>:
 80134e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134e8:	b087      	sub	sp, #28
 80134ea:	4617      	mov	r7, r2
 80134ec:	9303      	str	r3, [sp, #12]
 80134ee:	688b      	ldr	r3, [r1, #8]
 80134f0:	1e5a      	subs	r2, r3, #1
 80134f2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80134f6:	bf83      	ittte	hi
 80134f8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80134fc:	195b      	addhi	r3, r3, r5
 80134fe:	9302      	strhi	r3, [sp, #8]
 8013500:	2300      	movls	r3, #0
 8013502:	bf86      	itte	hi
 8013504:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013508:	608b      	strhi	r3, [r1, #8]
 801350a:	9302      	strls	r3, [sp, #8]
 801350c:	680b      	ldr	r3, [r1, #0]
 801350e:	468b      	mov	fp, r1
 8013510:	2500      	movs	r5, #0
 8013512:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8013516:	f84b 3b1c 	str.w	r3, [fp], #28
 801351a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801351e:	4680      	mov	r8, r0
 8013520:	460c      	mov	r4, r1
 8013522:	465e      	mov	r6, fp
 8013524:	46aa      	mov	sl, r5
 8013526:	46a9      	mov	r9, r5
 8013528:	9501      	str	r5, [sp, #4]
 801352a:	68a2      	ldr	r2, [r4, #8]
 801352c:	b152      	cbz	r2, 8013544 <_scanf_float+0x60>
 801352e:	683b      	ldr	r3, [r7, #0]
 8013530:	781b      	ldrb	r3, [r3, #0]
 8013532:	2b4e      	cmp	r3, #78	; 0x4e
 8013534:	d864      	bhi.n	8013600 <_scanf_float+0x11c>
 8013536:	2b40      	cmp	r3, #64	; 0x40
 8013538:	d83c      	bhi.n	80135b4 <_scanf_float+0xd0>
 801353a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801353e:	b2c8      	uxtb	r0, r1
 8013540:	280e      	cmp	r0, #14
 8013542:	d93a      	bls.n	80135ba <_scanf_float+0xd6>
 8013544:	f1b9 0f00 	cmp.w	r9, #0
 8013548:	d003      	beq.n	8013552 <_scanf_float+0x6e>
 801354a:	6823      	ldr	r3, [r4, #0]
 801354c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013550:	6023      	str	r3, [r4, #0]
 8013552:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013556:	f1ba 0f01 	cmp.w	sl, #1
 801355a:	f200 8113 	bhi.w	8013784 <_scanf_float+0x2a0>
 801355e:	455e      	cmp	r6, fp
 8013560:	f200 8105 	bhi.w	801376e <_scanf_float+0x28a>
 8013564:	2501      	movs	r5, #1
 8013566:	4628      	mov	r0, r5
 8013568:	b007      	add	sp, #28
 801356a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801356e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8013572:	2a0d      	cmp	r2, #13
 8013574:	d8e6      	bhi.n	8013544 <_scanf_float+0x60>
 8013576:	a101      	add	r1, pc, #4	; (adr r1, 801357c <_scanf_float+0x98>)
 8013578:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801357c:	080136bb 	.word	0x080136bb
 8013580:	08013545 	.word	0x08013545
 8013584:	08013545 	.word	0x08013545
 8013588:	08013545 	.word	0x08013545
 801358c:	0801371b 	.word	0x0801371b
 8013590:	080136f3 	.word	0x080136f3
 8013594:	08013545 	.word	0x08013545
 8013598:	08013545 	.word	0x08013545
 801359c:	080136c9 	.word	0x080136c9
 80135a0:	08013545 	.word	0x08013545
 80135a4:	08013545 	.word	0x08013545
 80135a8:	08013545 	.word	0x08013545
 80135ac:	08013545 	.word	0x08013545
 80135b0:	08013681 	.word	0x08013681
 80135b4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80135b8:	e7db      	b.n	8013572 <_scanf_float+0x8e>
 80135ba:	290e      	cmp	r1, #14
 80135bc:	d8c2      	bhi.n	8013544 <_scanf_float+0x60>
 80135be:	a001      	add	r0, pc, #4	; (adr r0, 80135c4 <_scanf_float+0xe0>)
 80135c0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80135c4:	08013673 	.word	0x08013673
 80135c8:	08013545 	.word	0x08013545
 80135cc:	08013673 	.word	0x08013673
 80135d0:	08013707 	.word	0x08013707
 80135d4:	08013545 	.word	0x08013545
 80135d8:	08013621 	.word	0x08013621
 80135dc:	0801365d 	.word	0x0801365d
 80135e0:	0801365d 	.word	0x0801365d
 80135e4:	0801365d 	.word	0x0801365d
 80135e8:	0801365d 	.word	0x0801365d
 80135ec:	0801365d 	.word	0x0801365d
 80135f0:	0801365d 	.word	0x0801365d
 80135f4:	0801365d 	.word	0x0801365d
 80135f8:	0801365d 	.word	0x0801365d
 80135fc:	0801365d 	.word	0x0801365d
 8013600:	2b6e      	cmp	r3, #110	; 0x6e
 8013602:	d809      	bhi.n	8013618 <_scanf_float+0x134>
 8013604:	2b60      	cmp	r3, #96	; 0x60
 8013606:	d8b2      	bhi.n	801356e <_scanf_float+0x8a>
 8013608:	2b54      	cmp	r3, #84	; 0x54
 801360a:	d077      	beq.n	80136fc <_scanf_float+0x218>
 801360c:	2b59      	cmp	r3, #89	; 0x59
 801360e:	d199      	bne.n	8013544 <_scanf_float+0x60>
 8013610:	2d07      	cmp	r5, #7
 8013612:	d197      	bne.n	8013544 <_scanf_float+0x60>
 8013614:	2508      	movs	r5, #8
 8013616:	e029      	b.n	801366c <_scanf_float+0x188>
 8013618:	2b74      	cmp	r3, #116	; 0x74
 801361a:	d06f      	beq.n	80136fc <_scanf_float+0x218>
 801361c:	2b79      	cmp	r3, #121	; 0x79
 801361e:	e7f6      	b.n	801360e <_scanf_float+0x12a>
 8013620:	6821      	ldr	r1, [r4, #0]
 8013622:	05c8      	lsls	r0, r1, #23
 8013624:	d51a      	bpl.n	801365c <_scanf_float+0x178>
 8013626:	9b02      	ldr	r3, [sp, #8]
 8013628:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801362c:	6021      	str	r1, [r4, #0]
 801362e:	f109 0901 	add.w	r9, r9, #1
 8013632:	b11b      	cbz	r3, 801363c <_scanf_float+0x158>
 8013634:	3b01      	subs	r3, #1
 8013636:	3201      	adds	r2, #1
 8013638:	9302      	str	r3, [sp, #8]
 801363a:	60a2      	str	r2, [r4, #8]
 801363c:	68a3      	ldr	r3, [r4, #8]
 801363e:	3b01      	subs	r3, #1
 8013640:	60a3      	str	r3, [r4, #8]
 8013642:	6923      	ldr	r3, [r4, #16]
 8013644:	3301      	adds	r3, #1
 8013646:	6123      	str	r3, [r4, #16]
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	3b01      	subs	r3, #1
 801364c:	2b00      	cmp	r3, #0
 801364e:	607b      	str	r3, [r7, #4]
 8013650:	f340 8084 	ble.w	801375c <_scanf_float+0x278>
 8013654:	683b      	ldr	r3, [r7, #0]
 8013656:	3301      	adds	r3, #1
 8013658:	603b      	str	r3, [r7, #0]
 801365a:	e766      	b.n	801352a <_scanf_float+0x46>
 801365c:	eb1a 0f05 	cmn.w	sl, r5
 8013660:	f47f af70 	bne.w	8013544 <_scanf_float+0x60>
 8013664:	6822      	ldr	r2, [r4, #0]
 8013666:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801366a:	6022      	str	r2, [r4, #0]
 801366c:	f806 3b01 	strb.w	r3, [r6], #1
 8013670:	e7e4      	b.n	801363c <_scanf_float+0x158>
 8013672:	6822      	ldr	r2, [r4, #0]
 8013674:	0610      	lsls	r0, r2, #24
 8013676:	f57f af65 	bpl.w	8013544 <_scanf_float+0x60>
 801367a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801367e:	e7f4      	b.n	801366a <_scanf_float+0x186>
 8013680:	f1ba 0f00 	cmp.w	sl, #0
 8013684:	d10e      	bne.n	80136a4 <_scanf_float+0x1c0>
 8013686:	f1b9 0f00 	cmp.w	r9, #0
 801368a:	d10e      	bne.n	80136aa <_scanf_float+0x1c6>
 801368c:	6822      	ldr	r2, [r4, #0]
 801368e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8013692:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8013696:	d108      	bne.n	80136aa <_scanf_float+0x1c6>
 8013698:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801369c:	6022      	str	r2, [r4, #0]
 801369e:	f04f 0a01 	mov.w	sl, #1
 80136a2:	e7e3      	b.n	801366c <_scanf_float+0x188>
 80136a4:	f1ba 0f02 	cmp.w	sl, #2
 80136a8:	d055      	beq.n	8013756 <_scanf_float+0x272>
 80136aa:	2d01      	cmp	r5, #1
 80136ac:	d002      	beq.n	80136b4 <_scanf_float+0x1d0>
 80136ae:	2d04      	cmp	r5, #4
 80136b0:	f47f af48 	bne.w	8013544 <_scanf_float+0x60>
 80136b4:	3501      	adds	r5, #1
 80136b6:	b2ed      	uxtb	r5, r5
 80136b8:	e7d8      	b.n	801366c <_scanf_float+0x188>
 80136ba:	f1ba 0f01 	cmp.w	sl, #1
 80136be:	f47f af41 	bne.w	8013544 <_scanf_float+0x60>
 80136c2:	f04f 0a02 	mov.w	sl, #2
 80136c6:	e7d1      	b.n	801366c <_scanf_float+0x188>
 80136c8:	b97d      	cbnz	r5, 80136ea <_scanf_float+0x206>
 80136ca:	f1b9 0f00 	cmp.w	r9, #0
 80136ce:	f47f af3c 	bne.w	801354a <_scanf_float+0x66>
 80136d2:	6822      	ldr	r2, [r4, #0]
 80136d4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80136d8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80136dc:	f47f af39 	bne.w	8013552 <_scanf_float+0x6e>
 80136e0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80136e4:	6022      	str	r2, [r4, #0]
 80136e6:	2501      	movs	r5, #1
 80136e8:	e7c0      	b.n	801366c <_scanf_float+0x188>
 80136ea:	2d03      	cmp	r5, #3
 80136ec:	d0e2      	beq.n	80136b4 <_scanf_float+0x1d0>
 80136ee:	2d05      	cmp	r5, #5
 80136f0:	e7de      	b.n	80136b0 <_scanf_float+0x1cc>
 80136f2:	2d02      	cmp	r5, #2
 80136f4:	f47f af26 	bne.w	8013544 <_scanf_float+0x60>
 80136f8:	2503      	movs	r5, #3
 80136fa:	e7b7      	b.n	801366c <_scanf_float+0x188>
 80136fc:	2d06      	cmp	r5, #6
 80136fe:	f47f af21 	bne.w	8013544 <_scanf_float+0x60>
 8013702:	2507      	movs	r5, #7
 8013704:	e7b2      	b.n	801366c <_scanf_float+0x188>
 8013706:	6822      	ldr	r2, [r4, #0]
 8013708:	0591      	lsls	r1, r2, #22
 801370a:	f57f af1b 	bpl.w	8013544 <_scanf_float+0x60>
 801370e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8013712:	6022      	str	r2, [r4, #0]
 8013714:	f8cd 9004 	str.w	r9, [sp, #4]
 8013718:	e7a8      	b.n	801366c <_scanf_float+0x188>
 801371a:	6822      	ldr	r2, [r4, #0]
 801371c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8013720:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8013724:	d006      	beq.n	8013734 <_scanf_float+0x250>
 8013726:	0550      	lsls	r0, r2, #21
 8013728:	f57f af0c 	bpl.w	8013544 <_scanf_float+0x60>
 801372c:	f1b9 0f00 	cmp.w	r9, #0
 8013730:	f43f af0f 	beq.w	8013552 <_scanf_float+0x6e>
 8013734:	0591      	lsls	r1, r2, #22
 8013736:	bf58      	it	pl
 8013738:	9901      	ldrpl	r1, [sp, #4]
 801373a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801373e:	bf58      	it	pl
 8013740:	eba9 0101 	subpl.w	r1, r9, r1
 8013744:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8013748:	bf58      	it	pl
 801374a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801374e:	6022      	str	r2, [r4, #0]
 8013750:	f04f 0900 	mov.w	r9, #0
 8013754:	e78a      	b.n	801366c <_scanf_float+0x188>
 8013756:	f04f 0a03 	mov.w	sl, #3
 801375a:	e787      	b.n	801366c <_scanf_float+0x188>
 801375c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013760:	4639      	mov	r1, r7
 8013762:	4640      	mov	r0, r8
 8013764:	4798      	blx	r3
 8013766:	2800      	cmp	r0, #0
 8013768:	f43f aedf 	beq.w	801352a <_scanf_float+0x46>
 801376c:	e6ea      	b.n	8013544 <_scanf_float+0x60>
 801376e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013772:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013776:	463a      	mov	r2, r7
 8013778:	4640      	mov	r0, r8
 801377a:	4798      	blx	r3
 801377c:	6923      	ldr	r3, [r4, #16]
 801377e:	3b01      	subs	r3, #1
 8013780:	6123      	str	r3, [r4, #16]
 8013782:	e6ec      	b.n	801355e <_scanf_float+0x7a>
 8013784:	1e6b      	subs	r3, r5, #1
 8013786:	2b06      	cmp	r3, #6
 8013788:	d825      	bhi.n	80137d6 <_scanf_float+0x2f2>
 801378a:	2d02      	cmp	r5, #2
 801378c:	d836      	bhi.n	80137fc <_scanf_float+0x318>
 801378e:	455e      	cmp	r6, fp
 8013790:	f67f aee8 	bls.w	8013564 <_scanf_float+0x80>
 8013794:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013798:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801379c:	463a      	mov	r2, r7
 801379e:	4640      	mov	r0, r8
 80137a0:	4798      	blx	r3
 80137a2:	6923      	ldr	r3, [r4, #16]
 80137a4:	3b01      	subs	r3, #1
 80137a6:	6123      	str	r3, [r4, #16]
 80137a8:	e7f1      	b.n	801378e <_scanf_float+0x2aa>
 80137aa:	9802      	ldr	r0, [sp, #8]
 80137ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80137b0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80137b4:	9002      	str	r0, [sp, #8]
 80137b6:	463a      	mov	r2, r7
 80137b8:	4640      	mov	r0, r8
 80137ba:	4798      	blx	r3
 80137bc:	6923      	ldr	r3, [r4, #16]
 80137be:	3b01      	subs	r3, #1
 80137c0:	6123      	str	r3, [r4, #16]
 80137c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80137c6:	fa5f fa8a 	uxtb.w	sl, sl
 80137ca:	f1ba 0f02 	cmp.w	sl, #2
 80137ce:	d1ec      	bne.n	80137aa <_scanf_float+0x2c6>
 80137d0:	3d03      	subs	r5, #3
 80137d2:	b2ed      	uxtb	r5, r5
 80137d4:	1b76      	subs	r6, r6, r5
 80137d6:	6823      	ldr	r3, [r4, #0]
 80137d8:	05da      	lsls	r2, r3, #23
 80137da:	d52f      	bpl.n	801383c <_scanf_float+0x358>
 80137dc:	055b      	lsls	r3, r3, #21
 80137de:	d510      	bpl.n	8013802 <_scanf_float+0x31e>
 80137e0:	455e      	cmp	r6, fp
 80137e2:	f67f aebf 	bls.w	8013564 <_scanf_float+0x80>
 80137e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80137ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80137ee:	463a      	mov	r2, r7
 80137f0:	4640      	mov	r0, r8
 80137f2:	4798      	blx	r3
 80137f4:	6923      	ldr	r3, [r4, #16]
 80137f6:	3b01      	subs	r3, #1
 80137f8:	6123      	str	r3, [r4, #16]
 80137fa:	e7f1      	b.n	80137e0 <_scanf_float+0x2fc>
 80137fc:	46aa      	mov	sl, r5
 80137fe:	9602      	str	r6, [sp, #8]
 8013800:	e7df      	b.n	80137c2 <_scanf_float+0x2de>
 8013802:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8013806:	6923      	ldr	r3, [r4, #16]
 8013808:	2965      	cmp	r1, #101	; 0x65
 801380a:	f103 33ff 	add.w	r3, r3, #4294967295
 801380e:	f106 35ff 	add.w	r5, r6, #4294967295
 8013812:	6123      	str	r3, [r4, #16]
 8013814:	d00c      	beq.n	8013830 <_scanf_float+0x34c>
 8013816:	2945      	cmp	r1, #69	; 0x45
 8013818:	d00a      	beq.n	8013830 <_scanf_float+0x34c>
 801381a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801381e:	463a      	mov	r2, r7
 8013820:	4640      	mov	r0, r8
 8013822:	4798      	blx	r3
 8013824:	6923      	ldr	r3, [r4, #16]
 8013826:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801382a:	3b01      	subs	r3, #1
 801382c:	1eb5      	subs	r5, r6, #2
 801382e:	6123      	str	r3, [r4, #16]
 8013830:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013834:	463a      	mov	r2, r7
 8013836:	4640      	mov	r0, r8
 8013838:	4798      	blx	r3
 801383a:	462e      	mov	r6, r5
 801383c:	6825      	ldr	r5, [r4, #0]
 801383e:	f015 0510 	ands.w	r5, r5, #16
 8013842:	d158      	bne.n	80138f6 <_scanf_float+0x412>
 8013844:	7035      	strb	r5, [r6, #0]
 8013846:	6823      	ldr	r3, [r4, #0]
 8013848:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801384c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013850:	d11c      	bne.n	801388c <_scanf_float+0x3a8>
 8013852:	9b01      	ldr	r3, [sp, #4]
 8013854:	454b      	cmp	r3, r9
 8013856:	eba3 0209 	sub.w	r2, r3, r9
 801385a:	d124      	bne.n	80138a6 <_scanf_float+0x3c2>
 801385c:	2200      	movs	r2, #0
 801385e:	4659      	mov	r1, fp
 8013860:	4640      	mov	r0, r8
 8013862:	f000 ffdb 	bl	801481c <_strtod_r>
 8013866:	9b03      	ldr	r3, [sp, #12]
 8013868:	6821      	ldr	r1, [r4, #0]
 801386a:	681b      	ldr	r3, [r3, #0]
 801386c:	f011 0f02 	tst.w	r1, #2
 8013870:	ec57 6b10 	vmov	r6, r7, d0
 8013874:	f103 0204 	add.w	r2, r3, #4
 8013878:	d020      	beq.n	80138bc <_scanf_float+0x3d8>
 801387a:	9903      	ldr	r1, [sp, #12]
 801387c:	600a      	str	r2, [r1, #0]
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	e9c3 6700 	strd	r6, r7, [r3]
 8013884:	68e3      	ldr	r3, [r4, #12]
 8013886:	3301      	adds	r3, #1
 8013888:	60e3      	str	r3, [r4, #12]
 801388a:	e66c      	b.n	8013566 <_scanf_float+0x82>
 801388c:	9b04      	ldr	r3, [sp, #16]
 801388e:	2b00      	cmp	r3, #0
 8013890:	d0e4      	beq.n	801385c <_scanf_float+0x378>
 8013892:	9905      	ldr	r1, [sp, #20]
 8013894:	230a      	movs	r3, #10
 8013896:	462a      	mov	r2, r5
 8013898:	3101      	adds	r1, #1
 801389a:	4640      	mov	r0, r8
 801389c:	f001 f848 	bl	8014930 <_strtol_r>
 80138a0:	9b04      	ldr	r3, [sp, #16]
 80138a2:	9e05      	ldr	r6, [sp, #20]
 80138a4:	1ac2      	subs	r2, r0, r3
 80138a6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80138aa:	429e      	cmp	r6, r3
 80138ac:	bf28      	it	cs
 80138ae:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80138b2:	4912      	ldr	r1, [pc, #72]	; (80138fc <_scanf_float+0x418>)
 80138b4:	4630      	mov	r0, r6
 80138b6:	f000 f90d 	bl	8013ad4 <siprintf>
 80138ba:	e7cf      	b.n	801385c <_scanf_float+0x378>
 80138bc:	f011 0f04 	tst.w	r1, #4
 80138c0:	9903      	ldr	r1, [sp, #12]
 80138c2:	600a      	str	r2, [r1, #0]
 80138c4:	d1db      	bne.n	801387e <_scanf_float+0x39a>
 80138c6:	f8d3 8000 	ldr.w	r8, [r3]
 80138ca:	ee10 2a10 	vmov	r2, s0
 80138ce:	ee10 0a10 	vmov	r0, s0
 80138d2:	463b      	mov	r3, r7
 80138d4:	4639      	mov	r1, r7
 80138d6:	f7ed f939 	bl	8000b4c <__aeabi_dcmpun>
 80138da:	b128      	cbz	r0, 80138e8 <_scanf_float+0x404>
 80138dc:	4808      	ldr	r0, [pc, #32]	; (8013900 <_scanf_float+0x41c>)
 80138de:	f000 f8af 	bl	8013a40 <nanf>
 80138e2:	ed88 0a00 	vstr	s0, [r8]
 80138e6:	e7cd      	b.n	8013884 <_scanf_float+0x3a0>
 80138e8:	4630      	mov	r0, r6
 80138ea:	4639      	mov	r1, r7
 80138ec:	f7ed f98c 	bl	8000c08 <__aeabi_d2f>
 80138f0:	f8c8 0000 	str.w	r0, [r8]
 80138f4:	e7c6      	b.n	8013884 <_scanf_float+0x3a0>
 80138f6:	2500      	movs	r5, #0
 80138f8:	e635      	b.n	8013566 <_scanf_float+0x82>
 80138fa:	bf00      	nop
 80138fc:	080182d4 	.word	0x080182d4
 8013900:	080185f0 	.word	0x080185f0

08013904 <iprintf>:
 8013904:	b40f      	push	{r0, r1, r2, r3}
 8013906:	4b0a      	ldr	r3, [pc, #40]	; (8013930 <iprintf+0x2c>)
 8013908:	b513      	push	{r0, r1, r4, lr}
 801390a:	681c      	ldr	r4, [r3, #0]
 801390c:	b124      	cbz	r4, 8013918 <iprintf+0x14>
 801390e:	69a3      	ldr	r3, [r4, #24]
 8013910:	b913      	cbnz	r3, 8013918 <iprintf+0x14>
 8013912:	4620      	mov	r0, r4
 8013914:	f7fe ffee 	bl	80128f4 <__sinit>
 8013918:	ab05      	add	r3, sp, #20
 801391a:	9a04      	ldr	r2, [sp, #16]
 801391c:	68a1      	ldr	r1, [r4, #8]
 801391e:	9301      	str	r3, [sp, #4]
 8013920:	4620      	mov	r0, r4
 8013922:	f003 fabf 	bl	8016ea4 <_vfiprintf_r>
 8013926:	b002      	add	sp, #8
 8013928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801392c:	b004      	add	sp, #16
 801392e:	4770      	bx	lr
 8013930:	20000080 	.word	0x20000080

08013934 <_puts_r>:
 8013934:	b570      	push	{r4, r5, r6, lr}
 8013936:	460e      	mov	r6, r1
 8013938:	4605      	mov	r5, r0
 801393a:	b118      	cbz	r0, 8013944 <_puts_r+0x10>
 801393c:	6983      	ldr	r3, [r0, #24]
 801393e:	b90b      	cbnz	r3, 8013944 <_puts_r+0x10>
 8013940:	f7fe ffd8 	bl	80128f4 <__sinit>
 8013944:	69ab      	ldr	r3, [r5, #24]
 8013946:	68ac      	ldr	r4, [r5, #8]
 8013948:	b913      	cbnz	r3, 8013950 <_puts_r+0x1c>
 801394a:	4628      	mov	r0, r5
 801394c:	f7fe ffd2 	bl	80128f4 <__sinit>
 8013950:	4b2c      	ldr	r3, [pc, #176]	; (8013a04 <_puts_r+0xd0>)
 8013952:	429c      	cmp	r4, r3
 8013954:	d120      	bne.n	8013998 <_puts_r+0x64>
 8013956:	686c      	ldr	r4, [r5, #4]
 8013958:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801395a:	07db      	lsls	r3, r3, #31
 801395c:	d405      	bmi.n	801396a <_puts_r+0x36>
 801395e:	89a3      	ldrh	r3, [r4, #12]
 8013960:	0598      	lsls	r0, r3, #22
 8013962:	d402      	bmi.n	801396a <_puts_r+0x36>
 8013964:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013966:	f7ff f888 	bl	8012a7a <__retarget_lock_acquire_recursive>
 801396a:	89a3      	ldrh	r3, [r4, #12]
 801396c:	0719      	lsls	r1, r3, #28
 801396e:	d51d      	bpl.n	80139ac <_puts_r+0x78>
 8013970:	6923      	ldr	r3, [r4, #16]
 8013972:	b1db      	cbz	r3, 80139ac <_puts_r+0x78>
 8013974:	3e01      	subs	r6, #1
 8013976:	68a3      	ldr	r3, [r4, #8]
 8013978:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801397c:	3b01      	subs	r3, #1
 801397e:	60a3      	str	r3, [r4, #8]
 8013980:	bb39      	cbnz	r1, 80139d2 <_puts_r+0x9e>
 8013982:	2b00      	cmp	r3, #0
 8013984:	da38      	bge.n	80139f8 <_puts_r+0xc4>
 8013986:	4622      	mov	r2, r4
 8013988:	210a      	movs	r1, #10
 801398a:	4628      	mov	r0, r5
 801398c:	f001 f816 	bl	80149bc <__swbuf_r>
 8013990:	3001      	adds	r0, #1
 8013992:	d011      	beq.n	80139b8 <_puts_r+0x84>
 8013994:	250a      	movs	r5, #10
 8013996:	e011      	b.n	80139bc <_puts_r+0x88>
 8013998:	4b1b      	ldr	r3, [pc, #108]	; (8013a08 <_puts_r+0xd4>)
 801399a:	429c      	cmp	r4, r3
 801399c:	d101      	bne.n	80139a2 <_puts_r+0x6e>
 801399e:	68ac      	ldr	r4, [r5, #8]
 80139a0:	e7da      	b.n	8013958 <_puts_r+0x24>
 80139a2:	4b1a      	ldr	r3, [pc, #104]	; (8013a0c <_puts_r+0xd8>)
 80139a4:	429c      	cmp	r4, r3
 80139a6:	bf08      	it	eq
 80139a8:	68ec      	ldreq	r4, [r5, #12]
 80139aa:	e7d5      	b.n	8013958 <_puts_r+0x24>
 80139ac:	4621      	mov	r1, r4
 80139ae:	4628      	mov	r0, r5
 80139b0:	f001 f868 	bl	8014a84 <__swsetup_r>
 80139b4:	2800      	cmp	r0, #0
 80139b6:	d0dd      	beq.n	8013974 <_puts_r+0x40>
 80139b8:	f04f 35ff 	mov.w	r5, #4294967295
 80139bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80139be:	07da      	lsls	r2, r3, #31
 80139c0:	d405      	bmi.n	80139ce <_puts_r+0x9a>
 80139c2:	89a3      	ldrh	r3, [r4, #12]
 80139c4:	059b      	lsls	r3, r3, #22
 80139c6:	d402      	bmi.n	80139ce <_puts_r+0x9a>
 80139c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80139ca:	f7ff f857 	bl	8012a7c <__retarget_lock_release_recursive>
 80139ce:	4628      	mov	r0, r5
 80139d0:	bd70      	pop	{r4, r5, r6, pc}
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	da04      	bge.n	80139e0 <_puts_r+0xac>
 80139d6:	69a2      	ldr	r2, [r4, #24]
 80139d8:	429a      	cmp	r2, r3
 80139da:	dc06      	bgt.n	80139ea <_puts_r+0xb6>
 80139dc:	290a      	cmp	r1, #10
 80139de:	d004      	beq.n	80139ea <_puts_r+0xb6>
 80139e0:	6823      	ldr	r3, [r4, #0]
 80139e2:	1c5a      	adds	r2, r3, #1
 80139e4:	6022      	str	r2, [r4, #0]
 80139e6:	7019      	strb	r1, [r3, #0]
 80139e8:	e7c5      	b.n	8013976 <_puts_r+0x42>
 80139ea:	4622      	mov	r2, r4
 80139ec:	4628      	mov	r0, r5
 80139ee:	f000 ffe5 	bl	80149bc <__swbuf_r>
 80139f2:	3001      	adds	r0, #1
 80139f4:	d1bf      	bne.n	8013976 <_puts_r+0x42>
 80139f6:	e7df      	b.n	80139b8 <_puts_r+0x84>
 80139f8:	6823      	ldr	r3, [r4, #0]
 80139fa:	250a      	movs	r5, #10
 80139fc:	1c5a      	adds	r2, r3, #1
 80139fe:	6022      	str	r2, [r4, #0]
 8013a00:	701d      	strb	r5, [r3, #0]
 8013a02:	e7db      	b.n	80139bc <_puts_r+0x88>
 8013a04:	0801825c 	.word	0x0801825c
 8013a08:	0801827c 	.word	0x0801827c
 8013a0c:	0801823c 	.word	0x0801823c

08013a10 <puts>:
 8013a10:	4b02      	ldr	r3, [pc, #8]	; (8013a1c <puts+0xc>)
 8013a12:	4601      	mov	r1, r0
 8013a14:	6818      	ldr	r0, [r3, #0]
 8013a16:	f7ff bf8d 	b.w	8013934 <_puts_r>
 8013a1a:	bf00      	nop
 8013a1c:	20000080 	.word	0x20000080

08013a20 <_sbrk_r>:
 8013a20:	b538      	push	{r3, r4, r5, lr}
 8013a22:	4d06      	ldr	r5, [pc, #24]	; (8013a3c <_sbrk_r+0x1c>)
 8013a24:	2300      	movs	r3, #0
 8013a26:	4604      	mov	r4, r0
 8013a28:	4608      	mov	r0, r1
 8013a2a:	602b      	str	r3, [r5, #0]
 8013a2c:	f003 fc5c 	bl	80172e8 <_sbrk>
 8013a30:	1c43      	adds	r3, r0, #1
 8013a32:	d102      	bne.n	8013a3a <_sbrk_r+0x1a>
 8013a34:	682b      	ldr	r3, [r5, #0]
 8013a36:	b103      	cbz	r3, 8013a3a <_sbrk_r+0x1a>
 8013a38:	6023      	str	r3, [r4, #0]
 8013a3a:	bd38      	pop	{r3, r4, r5, pc}
 8013a3c:	20006900 	.word	0x20006900

08013a40 <nanf>:
 8013a40:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013a48 <nanf+0x8>
 8013a44:	4770      	bx	lr
 8013a46:	bf00      	nop
 8013a48:	7fc00000 	.word	0x7fc00000

08013a4c <_raise_r>:
 8013a4c:	291f      	cmp	r1, #31
 8013a4e:	b538      	push	{r3, r4, r5, lr}
 8013a50:	4604      	mov	r4, r0
 8013a52:	460d      	mov	r5, r1
 8013a54:	d904      	bls.n	8013a60 <_raise_r+0x14>
 8013a56:	2316      	movs	r3, #22
 8013a58:	6003      	str	r3, [r0, #0]
 8013a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8013a5e:	bd38      	pop	{r3, r4, r5, pc}
 8013a60:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013a62:	b112      	cbz	r2, 8013a6a <_raise_r+0x1e>
 8013a64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013a68:	b94b      	cbnz	r3, 8013a7e <_raise_r+0x32>
 8013a6a:	4620      	mov	r0, r4
 8013a6c:	f000 f830 	bl	8013ad0 <_getpid_r>
 8013a70:	462a      	mov	r2, r5
 8013a72:	4601      	mov	r1, r0
 8013a74:	4620      	mov	r0, r4
 8013a76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013a7a:	f000 b817 	b.w	8013aac <_kill_r>
 8013a7e:	2b01      	cmp	r3, #1
 8013a80:	d00a      	beq.n	8013a98 <_raise_r+0x4c>
 8013a82:	1c59      	adds	r1, r3, #1
 8013a84:	d103      	bne.n	8013a8e <_raise_r+0x42>
 8013a86:	2316      	movs	r3, #22
 8013a88:	6003      	str	r3, [r0, #0]
 8013a8a:	2001      	movs	r0, #1
 8013a8c:	e7e7      	b.n	8013a5e <_raise_r+0x12>
 8013a8e:	2400      	movs	r4, #0
 8013a90:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013a94:	4628      	mov	r0, r5
 8013a96:	4798      	blx	r3
 8013a98:	2000      	movs	r0, #0
 8013a9a:	e7e0      	b.n	8013a5e <_raise_r+0x12>

08013a9c <raise>:
 8013a9c:	4b02      	ldr	r3, [pc, #8]	; (8013aa8 <raise+0xc>)
 8013a9e:	4601      	mov	r1, r0
 8013aa0:	6818      	ldr	r0, [r3, #0]
 8013aa2:	f7ff bfd3 	b.w	8013a4c <_raise_r>
 8013aa6:	bf00      	nop
 8013aa8:	20000080 	.word	0x20000080

08013aac <_kill_r>:
 8013aac:	b538      	push	{r3, r4, r5, lr}
 8013aae:	4d07      	ldr	r5, [pc, #28]	; (8013acc <_kill_r+0x20>)
 8013ab0:	2300      	movs	r3, #0
 8013ab2:	4604      	mov	r4, r0
 8013ab4:	4608      	mov	r0, r1
 8013ab6:	4611      	mov	r1, r2
 8013ab8:	602b      	str	r3, [r5, #0]
 8013aba:	f003 fbfd 	bl	80172b8 <_kill>
 8013abe:	1c43      	adds	r3, r0, #1
 8013ac0:	d102      	bne.n	8013ac8 <_kill_r+0x1c>
 8013ac2:	682b      	ldr	r3, [r5, #0]
 8013ac4:	b103      	cbz	r3, 8013ac8 <_kill_r+0x1c>
 8013ac6:	6023      	str	r3, [r4, #0]
 8013ac8:	bd38      	pop	{r3, r4, r5, pc}
 8013aca:	bf00      	nop
 8013acc:	20006900 	.word	0x20006900

08013ad0 <_getpid_r>:
 8013ad0:	f003 bbe2 	b.w	8017298 <_getpid>

08013ad4 <siprintf>:
 8013ad4:	b40e      	push	{r1, r2, r3}
 8013ad6:	b500      	push	{lr}
 8013ad8:	b09c      	sub	sp, #112	; 0x70
 8013ada:	ab1d      	add	r3, sp, #116	; 0x74
 8013adc:	9002      	str	r0, [sp, #8]
 8013ade:	9006      	str	r0, [sp, #24]
 8013ae0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013ae4:	4809      	ldr	r0, [pc, #36]	; (8013b0c <siprintf+0x38>)
 8013ae6:	9107      	str	r1, [sp, #28]
 8013ae8:	9104      	str	r1, [sp, #16]
 8013aea:	4909      	ldr	r1, [pc, #36]	; (8013b10 <siprintf+0x3c>)
 8013aec:	f853 2b04 	ldr.w	r2, [r3], #4
 8013af0:	9105      	str	r1, [sp, #20]
 8013af2:	6800      	ldr	r0, [r0, #0]
 8013af4:	9301      	str	r3, [sp, #4]
 8013af6:	a902      	add	r1, sp, #8
 8013af8:	f003 f8aa 	bl	8016c50 <_svfiprintf_r>
 8013afc:	9b02      	ldr	r3, [sp, #8]
 8013afe:	2200      	movs	r2, #0
 8013b00:	701a      	strb	r2, [r3, #0]
 8013b02:	b01c      	add	sp, #112	; 0x70
 8013b04:	f85d eb04 	ldr.w	lr, [sp], #4
 8013b08:	b003      	add	sp, #12
 8013b0a:	4770      	bx	lr
 8013b0c:	20000080 	.word	0x20000080
 8013b10:	ffff0208 	.word	0xffff0208

08013b14 <__sread>:
 8013b14:	b510      	push	{r4, lr}
 8013b16:	460c      	mov	r4, r1
 8013b18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b1c:	f003 faf2 	bl	8017104 <_read_r>
 8013b20:	2800      	cmp	r0, #0
 8013b22:	bfab      	itete	ge
 8013b24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013b26:	89a3      	ldrhlt	r3, [r4, #12]
 8013b28:	181b      	addge	r3, r3, r0
 8013b2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013b2e:	bfac      	ite	ge
 8013b30:	6563      	strge	r3, [r4, #84]	; 0x54
 8013b32:	81a3      	strhlt	r3, [r4, #12]
 8013b34:	bd10      	pop	{r4, pc}

08013b36 <__swrite>:
 8013b36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b3a:	461f      	mov	r7, r3
 8013b3c:	898b      	ldrh	r3, [r1, #12]
 8013b3e:	05db      	lsls	r3, r3, #23
 8013b40:	4605      	mov	r5, r0
 8013b42:	460c      	mov	r4, r1
 8013b44:	4616      	mov	r6, r2
 8013b46:	d505      	bpl.n	8013b54 <__swrite+0x1e>
 8013b48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b4c:	2302      	movs	r3, #2
 8013b4e:	2200      	movs	r2, #0
 8013b50:	f002 fac4 	bl	80160dc <_lseek_r>
 8013b54:	89a3      	ldrh	r3, [r4, #12]
 8013b56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013b5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013b5e:	81a3      	strh	r3, [r4, #12]
 8013b60:	4632      	mov	r2, r6
 8013b62:	463b      	mov	r3, r7
 8013b64:	4628      	mov	r0, r5
 8013b66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013b6a:	f000 bf79 	b.w	8014a60 <_write_r>

08013b6e <__sseek>:
 8013b6e:	b510      	push	{r4, lr}
 8013b70:	460c      	mov	r4, r1
 8013b72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b76:	f002 fab1 	bl	80160dc <_lseek_r>
 8013b7a:	1c43      	adds	r3, r0, #1
 8013b7c:	89a3      	ldrh	r3, [r4, #12]
 8013b7e:	bf15      	itete	ne
 8013b80:	6560      	strne	r0, [r4, #84]	; 0x54
 8013b82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013b86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013b8a:	81a3      	strheq	r3, [r4, #12]
 8013b8c:	bf18      	it	ne
 8013b8e:	81a3      	strhne	r3, [r4, #12]
 8013b90:	bd10      	pop	{r4, pc}

08013b92 <__sclose>:
 8013b92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b96:	f000 bfe3 	b.w	8014b60 <_close_r>

08013b9a <strcpy>:
 8013b9a:	4603      	mov	r3, r0
 8013b9c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013ba0:	f803 2b01 	strb.w	r2, [r3], #1
 8013ba4:	2a00      	cmp	r2, #0
 8013ba6:	d1f9      	bne.n	8013b9c <strcpy+0x2>
 8013ba8:	4770      	bx	lr

08013baa <strncmp>:
 8013baa:	b510      	push	{r4, lr}
 8013bac:	b16a      	cbz	r2, 8013bca <strncmp+0x20>
 8013bae:	3901      	subs	r1, #1
 8013bb0:	1884      	adds	r4, r0, r2
 8013bb2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8013bb6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8013bba:	4293      	cmp	r3, r2
 8013bbc:	d103      	bne.n	8013bc6 <strncmp+0x1c>
 8013bbe:	42a0      	cmp	r0, r4
 8013bc0:	d001      	beq.n	8013bc6 <strncmp+0x1c>
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d1f5      	bne.n	8013bb2 <strncmp+0x8>
 8013bc6:	1a98      	subs	r0, r3, r2
 8013bc8:	bd10      	pop	{r4, pc}
 8013bca:	4610      	mov	r0, r2
 8013bcc:	e7fc      	b.n	8013bc8 <strncmp+0x1e>

08013bce <sulp>:
 8013bce:	b570      	push	{r4, r5, r6, lr}
 8013bd0:	4604      	mov	r4, r0
 8013bd2:	460d      	mov	r5, r1
 8013bd4:	ec45 4b10 	vmov	d0, r4, r5
 8013bd8:	4616      	mov	r6, r2
 8013bda:	f002 fe7f 	bl	80168dc <__ulp>
 8013bde:	ec51 0b10 	vmov	r0, r1, d0
 8013be2:	b17e      	cbz	r6, 8013c04 <sulp+0x36>
 8013be4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013be8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	dd09      	ble.n	8013c04 <sulp+0x36>
 8013bf0:	051b      	lsls	r3, r3, #20
 8013bf2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8013bf6:	2400      	movs	r4, #0
 8013bf8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8013bfc:	4622      	mov	r2, r4
 8013bfe:	462b      	mov	r3, r5
 8013c00:	f7ec fd0a 	bl	8000618 <__aeabi_dmul>
 8013c04:	bd70      	pop	{r4, r5, r6, pc}
	...

08013c08 <_strtod_l>:
 8013c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c0c:	b0a3      	sub	sp, #140	; 0x8c
 8013c0e:	461f      	mov	r7, r3
 8013c10:	2300      	movs	r3, #0
 8013c12:	931e      	str	r3, [sp, #120]	; 0x78
 8013c14:	4ba4      	ldr	r3, [pc, #656]	; (8013ea8 <_strtod_l+0x2a0>)
 8013c16:	9219      	str	r2, [sp, #100]	; 0x64
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	9307      	str	r3, [sp, #28]
 8013c1c:	4604      	mov	r4, r0
 8013c1e:	4618      	mov	r0, r3
 8013c20:	4688      	mov	r8, r1
 8013c22:	f7ec fae5 	bl	80001f0 <strlen>
 8013c26:	f04f 0a00 	mov.w	sl, #0
 8013c2a:	4605      	mov	r5, r0
 8013c2c:	f04f 0b00 	mov.w	fp, #0
 8013c30:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8013c34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013c36:	781a      	ldrb	r2, [r3, #0]
 8013c38:	2a2b      	cmp	r2, #43	; 0x2b
 8013c3a:	d04c      	beq.n	8013cd6 <_strtod_l+0xce>
 8013c3c:	d839      	bhi.n	8013cb2 <_strtod_l+0xaa>
 8013c3e:	2a0d      	cmp	r2, #13
 8013c40:	d832      	bhi.n	8013ca8 <_strtod_l+0xa0>
 8013c42:	2a08      	cmp	r2, #8
 8013c44:	d832      	bhi.n	8013cac <_strtod_l+0xa4>
 8013c46:	2a00      	cmp	r2, #0
 8013c48:	d03c      	beq.n	8013cc4 <_strtod_l+0xbc>
 8013c4a:	2300      	movs	r3, #0
 8013c4c:	930e      	str	r3, [sp, #56]	; 0x38
 8013c4e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8013c50:	7833      	ldrb	r3, [r6, #0]
 8013c52:	2b30      	cmp	r3, #48	; 0x30
 8013c54:	f040 80b4 	bne.w	8013dc0 <_strtod_l+0x1b8>
 8013c58:	7873      	ldrb	r3, [r6, #1]
 8013c5a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013c5e:	2b58      	cmp	r3, #88	; 0x58
 8013c60:	d16c      	bne.n	8013d3c <_strtod_l+0x134>
 8013c62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013c64:	9301      	str	r3, [sp, #4]
 8013c66:	ab1e      	add	r3, sp, #120	; 0x78
 8013c68:	9702      	str	r7, [sp, #8]
 8013c6a:	9300      	str	r3, [sp, #0]
 8013c6c:	4a8f      	ldr	r2, [pc, #572]	; (8013eac <_strtod_l+0x2a4>)
 8013c6e:	ab1f      	add	r3, sp, #124	; 0x7c
 8013c70:	a91d      	add	r1, sp, #116	; 0x74
 8013c72:	4620      	mov	r0, r4
 8013c74:	f001 ff26 	bl	8015ac4 <__gethex>
 8013c78:	f010 0707 	ands.w	r7, r0, #7
 8013c7c:	4605      	mov	r5, r0
 8013c7e:	d005      	beq.n	8013c8c <_strtod_l+0x84>
 8013c80:	2f06      	cmp	r7, #6
 8013c82:	d12a      	bne.n	8013cda <_strtod_l+0xd2>
 8013c84:	3601      	adds	r6, #1
 8013c86:	2300      	movs	r3, #0
 8013c88:	961d      	str	r6, [sp, #116]	; 0x74
 8013c8a:	930e      	str	r3, [sp, #56]	; 0x38
 8013c8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	f040 8596 	bne.w	80147c0 <_strtod_l+0xbb8>
 8013c94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013c96:	b1db      	cbz	r3, 8013cd0 <_strtod_l+0xc8>
 8013c98:	4652      	mov	r2, sl
 8013c9a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8013c9e:	ec43 2b10 	vmov	d0, r2, r3
 8013ca2:	b023      	add	sp, #140	; 0x8c
 8013ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ca8:	2a20      	cmp	r2, #32
 8013caa:	d1ce      	bne.n	8013c4a <_strtod_l+0x42>
 8013cac:	3301      	adds	r3, #1
 8013cae:	931d      	str	r3, [sp, #116]	; 0x74
 8013cb0:	e7c0      	b.n	8013c34 <_strtod_l+0x2c>
 8013cb2:	2a2d      	cmp	r2, #45	; 0x2d
 8013cb4:	d1c9      	bne.n	8013c4a <_strtod_l+0x42>
 8013cb6:	2201      	movs	r2, #1
 8013cb8:	920e      	str	r2, [sp, #56]	; 0x38
 8013cba:	1c5a      	adds	r2, r3, #1
 8013cbc:	921d      	str	r2, [sp, #116]	; 0x74
 8013cbe:	785b      	ldrb	r3, [r3, #1]
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d1c4      	bne.n	8013c4e <_strtod_l+0x46>
 8013cc4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013cc6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	f040 8576 	bne.w	80147bc <_strtod_l+0xbb4>
 8013cd0:	4652      	mov	r2, sl
 8013cd2:	465b      	mov	r3, fp
 8013cd4:	e7e3      	b.n	8013c9e <_strtod_l+0x96>
 8013cd6:	2200      	movs	r2, #0
 8013cd8:	e7ee      	b.n	8013cb8 <_strtod_l+0xb0>
 8013cda:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013cdc:	b13a      	cbz	r2, 8013cee <_strtod_l+0xe6>
 8013cde:	2135      	movs	r1, #53	; 0x35
 8013ce0:	a820      	add	r0, sp, #128	; 0x80
 8013ce2:	f002 ff06 	bl	8016af2 <__copybits>
 8013ce6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8013ce8:	4620      	mov	r0, r4
 8013cea:	f002 facb 	bl	8016284 <_Bfree>
 8013cee:	3f01      	subs	r7, #1
 8013cf0:	2f05      	cmp	r7, #5
 8013cf2:	d807      	bhi.n	8013d04 <_strtod_l+0xfc>
 8013cf4:	e8df f007 	tbb	[pc, r7]
 8013cf8:	1d180b0e 	.word	0x1d180b0e
 8013cfc:	030e      	.short	0x030e
 8013cfe:	f04f 0b00 	mov.w	fp, #0
 8013d02:	46da      	mov	sl, fp
 8013d04:	0728      	lsls	r0, r5, #28
 8013d06:	d5c1      	bpl.n	8013c8c <_strtod_l+0x84>
 8013d08:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8013d0c:	e7be      	b.n	8013c8c <_strtod_l+0x84>
 8013d0e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8013d12:	e7f7      	b.n	8013d04 <_strtod_l+0xfc>
 8013d14:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8013d18:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8013d1a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013d1e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013d22:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8013d26:	e7ed      	b.n	8013d04 <_strtod_l+0xfc>
 8013d28:	f8df b184 	ldr.w	fp, [pc, #388]	; 8013eb0 <_strtod_l+0x2a8>
 8013d2c:	f04f 0a00 	mov.w	sl, #0
 8013d30:	e7e8      	b.n	8013d04 <_strtod_l+0xfc>
 8013d32:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8013d36:	f04f 3aff 	mov.w	sl, #4294967295
 8013d3a:	e7e3      	b.n	8013d04 <_strtod_l+0xfc>
 8013d3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013d3e:	1c5a      	adds	r2, r3, #1
 8013d40:	921d      	str	r2, [sp, #116]	; 0x74
 8013d42:	785b      	ldrb	r3, [r3, #1]
 8013d44:	2b30      	cmp	r3, #48	; 0x30
 8013d46:	d0f9      	beq.n	8013d3c <_strtod_l+0x134>
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d09f      	beq.n	8013c8c <_strtod_l+0x84>
 8013d4c:	2301      	movs	r3, #1
 8013d4e:	f04f 0900 	mov.w	r9, #0
 8013d52:	9304      	str	r3, [sp, #16]
 8013d54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013d56:	930a      	str	r3, [sp, #40]	; 0x28
 8013d58:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8013d5c:	464f      	mov	r7, r9
 8013d5e:	220a      	movs	r2, #10
 8013d60:	981d      	ldr	r0, [sp, #116]	; 0x74
 8013d62:	7806      	ldrb	r6, [r0, #0]
 8013d64:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8013d68:	b2d9      	uxtb	r1, r3
 8013d6a:	2909      	cmp	r1, #9
 8013d6c:	d92a      	bls.n	8013dc4 <_strtod_l+0x1bc>
 8013d6e:	9907      	ldr	r1, [sp, #28]
 8013d70:	462a      	mov	r2, r5
 8013d72:	f7ff ff1a 	bl	8013baa <strncmp>
 8013d76:	b398      	cbz	r0, 8013de0 <_strtod_l+0x1d8>
 8013d78:	2000      	movs	r0, #0
 8013d7a:	4633      	mov	r3, r6
 8013d7c:	463d      	mov	r5, r7
 8013d7e:	9007      	str	r0, [sp, #28]
 8013d80:	4602      	mov	r2, r0
 8013d82:	2b65      	cmp	r3, #101	; 0x65
 8013d84:	d001      	beq.n	8013d8a <_strtod_l+0x182>
 8013d86:	2b45      	cmp	r3, #69	; 0x45
 8013d88:	d118      	bne.n	8013dbc <_strtod_l+0x1b4>
 8013d8a:	b91d      	cbnz	r5, 8013d94 <_strtod_l+0x18c>
 8013d8c:	9b04      	ldr	r3, [sp, #16]
 8013d8e:	4303      	orrs	r3, r0
 8013d90:	d098      	beq.n	8013cc4 <_strtod_l+0xbc>
 8013d92:	2500      	movs	r5, #0
 8013d94:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8013d98:	f108 0301 	add.w	r3, r8, #1
 8013d9c:	931d      	str	r3, [sp, #116]	; 0x74
 8013d9e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8013da2:	2b2b      	cmp	r3, #43	; 0x2b
 8013da4:	d075      	beq.n	8013e92 <_strtod_l+0x28a>
 8013da6:	2b2d      	cmp	r3, #45	; 0x2d
 8013da8:	d07b      	beq.n	8013ea2 <_strtod_l+0x29a>
 8013daa:	f04f 0c00 	mov.w	ip, #0
 8013dae:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8013db2:	2909      	cmp	r1, #9
 8013db4:	f240 8082 	bls.w	8013ebc <_strtod_l+0x2b4>
 8013db8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8013dbc:	2600      	movs	r6, #0
 8013dbe:	e09d      	b.n	8013efc <_strtod_l+0x2f4>
 8013dc0:	2300      	movs	r3, #0
 8013dc2:	e7c4      	b.n	8013d4e <_strtod_l+0x146>
 8013dc4:	2f08      	cmp	r7, #8
 8013dc6:	bfd8      	it	le
 8013dc8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8013dca:	f100 0001 	add.w	r0, r0, #1
 8013dce:	bfda      	itte	le
 8013dd0:	fb02 3301 	mlale	r3, r2, r1, r3
 8013dd4:	9309      	strle	r3, [sp, #36]	; 0x24
 8013dd6:	fb02 3909 	mlagt	r9, r2, r9, r3
 8013dda:	3701      	adds	r7, #1
 8013ddc:	901d      	str	r0, [sp, #116]	; 0x74
 8013dde:	e7bf      	b.n	8013d60 <_strtod_l+0x158>
 8013de0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013de2:	195a      	adds	r2, r3, r5
 8013de4:	921d      	str	r2, [sp, #116]	; 0x74
 8013de6:	5d5b      	ldrb	r3, [r3, r5]
 8013de8:	2f00      	cmp	r7, #0
 8013dea:	d037      	beq.n	8013e5c <_strtod_l+0x254>
 8013dec:	9007      	str	r0, [sp, #28]
 8013dee:	463d      	mov	r5, r7
 8013df0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8013df4:	2a09      	cmp	r2, #9
 8013df6:	d912      	bls.n	8013e1e <_strtod_l+0x216>
 8013df8:	2201      	movs	r2, #1
 8013dfa:	e7c2      	b.n	8013d82 <_strtod_l+0x17a>
 8013dfc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013dfe:	1c5a      	adds	r2, r3, #1
 8013e00:	921d      	str	r2, [sp, #116]	; 0x74
 8013e02:	785b      	ldrb	r3, [r3, #1]
 8013e04:	3001      	adds	r0, #1
 8013e06:	2b30      	cmp	r3, #48	; 0x30
 8013e08:	d0f8      	beq.n	8013dfc <_strtod_l+0x1f4>
 8013e0a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8013e0e:	2a08      	cmp	r2, #8
 8013e10:	f200 84db 	bhi.w	80147ca <_strtod_l+0xbc2>
 8013e14:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8013e16:	9007      	str	r0, [sp, #28]
 8013e18:	2000      	movs	r0, #0
 8013e1a:	920a      	str	r2, [sp, #40]	; 0x28
 8013e1c:	4605      	mov	r5, r0
 8013e1e:	3b30      	subs	r3, #48	; 0x30
 8013e20:	f100 0201 	add.w	r2, r0, #1
 8013e24:	d014      	beq.n	8013e50 <_strtod_l+0x248>
 8013e26:	9907      	ldr	r1, [sp, #28]
 8013e28:	4411      	add	r1, r2
 8013e2a:	9107      	str	r1, [sp, #28]
 8013e2c:	462a      	mov	r2, r5
 8013e2e:	eb00 0e05 	add.w	lr, r0, r5
 8013e32:	210a      	movs	r1, #10
 8013e34:	4572      	cmp	r2, lr
 8013e36:	d113      	bne.n	8013e60 <_strtod_l+0x258>
 8013e38:	182a      	adds	r2, r5, r0
 8013e3a:	2a08      	cmp	r2, #8
 8013e3c:	f105 0501 	add.w	r5, r5, #1
 8013e40:	4405      	add	r5, r0
 8013e42:	dc1c      	bgt.n	8013e7e <_strtod_l+0x276>
 8013e44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013e46:	220a      	movs	r2, #10
 8013e48:	fb02 3301 	mla	r3, r2, r1, r3
 8013e4c:	9309      	str	r3, [sp, #36]	; 0x24
 8013e4e:	2200      	movs	r2, #0
 8013e50:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013e52:	1c59      	adds	r1, r3, #1
 8013e54:	911d      	str	r1, [sp, #116]	; 0x74
 8013e56:	785b      	ldrb	r3, [r3, #1]
 8013e58:	4610      	mov	r0, r2
 8013e5a:	e7c9      	b.n	8013df0 <_strtod_l+0x1e8>
 8013e5c:	4638      	mov	r0, r7
 8013e5e:	e7d2      	b.n	8013e06 <_strtod_l+0x1fe>
 8013e60:	2a08      	cmp	r2, #8
 8013e62:	dc04      	bgt.n	8013e6e <_strtod_l+0x266>
 8013e64:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8013e66:	434e      	muls	r6, r1
 8013e68:	9609      	str	r6, [sp, #36]	; 0x24
 8013e6a:	3201      	adds	r2, #1
 8013e6c:	e7e2      	b.n	8013e34 <_strtod_l+0x22c>
 8013e6e:	f102 0c01 	add.w	ip, r2, #1
 8013e72:	f1bc 0f10 	cmp.w	ip, #16
 8013e76:	bfd8      	it	le
 8013e78:	fb01 f909 	mulle.w	r9, r1, r9
 8013e7c:	e7f5      	b.n	8013e6a <_strtod_l+0x262>
 8013e7e:	2d10      	cmp	r5, #16
 8013e80:	bfdc      	itt	le
 8013e82:	220a      	movle	r2, #10
 8013e84:	fb02 3909 	mlale	r9, r2, r9, r3
 8013e88:	e7e1      	b.n	8013e4e <_strtod_l+0x246>
 8013e8a:	2300      	movs	r3, #0
 8013e8c:	9307      	str	r3, [sp, #28]
 8013e8e:	2201      	movs	r2, #1
 8013e90:	e77c      	b.n	8013d8c <_strtod_l+0x184>
 8013e92:	f04f 0c00 	mov.w	ip, #0
 8013e96:	f108 0302 	add.w	r3, r8, #2
 8013e9a:	931d      	str	r3, [sp, #116]	; 0x74
 8013e9c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8013ea0:	e785      	b.n	8013dae <_strtod_l+0x1a6>
 8013ea2:	f04f 0c01 	mov.w	ip, #1
 8013ea6:	e7f6      	b.n	8013e96 <_strtod_l+0x28e>
 8013ea8:	08018430 	.word	0x08018430
 8013eac:	080182dc 	.word	0x080182dc
 8013eb0:	7ff00000 	.word	0x7ff00000
 8013eb4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013eb6:	1c59      	adds	r1, r3, #1
 8013eb8:	911d      	str	r1, [sp, #116]	; 0x74
 8013eba:	785b      	ldrb	r3, [r3, #1]
 8013ebc:	2b30      	cmp	r3, #48	; 0x30
 8013ebe:	d0f9      	beq.n	8013eb4 <_strtod_l+0x2ac>
 8013ec0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8013ec4:	2908      	cmp	r1, #8
 8013ec6:	f63f af79 	bhi.w	8013dbc <_strtod_l+0x1b4>
 8013eca:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8013ece:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013ed0:	9308      	str	r3, [sp, #32]
 8013ed2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013ed4:	1c59      	adds	r1, r3, #1
 8013ed6:	911d      	str	r1, [sp, #116]	; 0x74
 8013ed8:	785b      	ldrb	r3, [r3, #1]
 8013eda:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8013ede:	2e09      	cmp	r6, #9
 8013ee0:	d937      	bls.n	8013f52 <_strtod_l+0x34a>
 8013ee2:	9e08      	ldr	r6, [sp, #32]
 8013ee4:	1b89      	subs	r1, r1, r6
 8013ee6:	2908      	cmp	r1, #8
 8013ee8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8013eec:	dc02      	bgt.n	8013ef4 <_strtod_l+0x2ec>
 8013eee:	4576      	cmp	r6, lr
 8013ef0:	bfa8      	it	ge
 8013ef2:	4676      	movge	r6, lr
 8013ef4:	f1bc 0f00 	cmp.w	ip, #0
 8013ef8:	d000      	beq.n	8013efc <_strtod_l+0x2f4>
 8013efa:	4276      	negs	r6, r6
 8013efc:	2d00      	cmp	r5, #0
 8013efe:	d14f      	bne.n	8013fa0 <_strtod_l+0x398>
 8013f00:	9904      	ldr	r1, [sp, #16]
 8013f02:	4301      	orrs	r1, r0
 8013f04:	f47f aec2 	bne.w	8013c8c <_strtod_l+0x84>
 8013f08:	2a00      	cmp	r2, #0
 8013f0a:	f47f aedb 	bne.w	8013cc4 <_strtod_l+0xbc>
 8013f0e:	2b69      	cmp	r3, #105	; 0x69
 8013f10:	d027      	beq.n	8013f62 <_strtod_l+0x35a>
 8013f12:	dc24      	bgt.n	8013f5e <_strtod_l+0x356>
 8013f14:	2b49      	cmp	r3, #73	; 0x49
 8013f16:	d024      	beq.n	8013f62 <_strtod_l+0x35a>
 8013f18:	2b4e      	cmp	r3, #78	; 0x4e
 8013f1a:	f47f aed3 	bne.w	8013cc4 <_strtod_l+0xbc>
 8013f1e:	499e      	ldr	r1, [pc, #632]	; (8014198 <_strtod_l+0x590>)
 8013f20:	a81d      	add	r0, sp, #116	; 0x74
 8013f22:	f002 f827 	bl	8015f74 <__match>
 8013f26:	2800      	cmp	r0, #0
 8013f28:	f43f aecc 	beq.w	8013cc4 <_strtod_l+0xbc>
 8013f2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013f2e:	781b      	ldrb	r3, [r3, #0]
 8013f30:	2b28      	cmp	r3, #40	; 0x28
 8013f32:	d12d      	bne.n	8013f90 <_strtod_l+0x388>
 8013f34:	4999      	ldr	r1, [pc, #612]	; (801419c <_strtod_l+0x594>)
 8013f36:	aa20      	add	r2, sp, #128	; 0x80
 8013f38:	a81d      	add	r0, sp, #116	; 0x74
 8013f3a:	f002 f82f 	bl	8015f9c <__hexnan>
 8013f3e:	2805      	cmp	r0, #5
 8013f40:	d126      	bne.n	8013f90 <_strtod_l+0x388>
 8013f42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013f44:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8013f48:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8013f4c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8013f50:	e69c      	b.n	8013c8c <_strtod_l+0x84>
 8013f52:	210a      	movs	r1, #10
 8013f54:	fb01 3e0e 	mla	lr, r1, lr, r3
 8013f58:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8013f5c:	e7b9      	b.n	8013ed2 <_strtod_l+0x2ca>
 8013f5e:	2b6e      	cmp	r3, #110	; 0x6e
 8013f60:	e7db      	b.n	8013f1a <_strtod_l+0x312>
 8013f62:	498f      	ldr	r1, [pc, #572]	; (80141a0 <_strtod_l+0x598>)
 8013f64:	a81d      	add	r0, sp, #116	; 0x74
 8013f66:	f002 f805 	bl	8015f74 <__match>
 8013f6a:	2800      	cmp	r0, #0
 8013f6c:	f43f aeaa 	beq.w	8013cc4 <_strtod_l+0xbc>
 8013f70:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013f72:	498c      	ldr	r1, [pc, #560]	; (80141a4 <_strtod_l+0x59c>)
 8013f74:	3b01      	subs	r3, #1
 8013f76:	a81d      	add	r0, sp, #116	; 0x74
 8013f78:	931d      	str	r3, [sp, #116]	; 0x74
 8013f7a:	f001 fffb 	bl	8015f74 <__match>
 8013f7e:	b910      	cbnz	r0, 8013f86 <_strtod_l+0x37e>
 8013f80:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013f82:	3301      	adds	r3, #1
 8013f84:	931d      	str	r3, [sp, #116]	; 0x74
 8013f86:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80141b4 <_strtod_l+0x5ac>
 8013f8a:	f04f 0a00 	mov.w	sl, #0
 8013f8e:	e67d      	b.n	8013c8c <_strtod_l+0x84>
 8013f90:	4885      	ldr	r0, [pc, #532]	; (80141a8 <_strtod_l+0x5a0>)
 8013f92:	f7fe fc41 	bl	8012818 <nan>
 8013f96:	ed8d 0b04 	vstr	d0, [sp, #16]
 8013f9a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8013f9e:	e675      	b.n	8013c8c <_strtod_l+0x84>
 8013fa0:	9b07      	ldr	r3, [sp, #28]
 8013fa2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013fa4:	1af3      	subs	r3, r6, r3
 8013fa6:	2f00      	cmp	r7, #0
 8013fa8:	bf08      	it	eq
 8013faa:	462f      	moveq	r7, r5
 8013fac:	2d10      	cmp	r5, #16
 8013fae:	9308      	str	r3, [sp, #32]
 8013fb0:	46a8      	mov	r8, r5
 8013fb2:	bfa8      	it	ge
 8013fb4:	f04f 0810 	movge.w	r8, #16
 8013fb8:	f7ec fab4 	bl	8000524 <__aeabi_ui2d>
 8013fbc:	2d09      	cmp	r5, #9
 8013fbe:	4682      	mov	sl, r0
 8013fc0:	468b      	mov	fp, r1
 8013fc2:	dd13      	ble.n	8013fec <_strtod_l+0x3e4>
 8013fc4:	4b79      	ldr	r3, [pc, #484]	; (80141ac <_strtod_l+0x5a4>)
 8013fc6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8013fca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8013fce:	f7ec fb23 	bl	8000618 <__aeabi_dmul>
 8013fd2:	4682      	mov	sl, r0
 8013fd4:	4648      	mov	r0, r9
 8013fd6:	468b      	mov	fp, r1
 8013fd8:	f7ec faa4 	bl	8000524 <__aeabi_ui2d>
 8013fdc:	4602      	mov	r2, r0
 8013fde:	460b      	mov	r3, r1
 8013fe0:	4650      	mov	r0, sl
 8013fe2:	4659      	mov	r1, fp
 8013fe4:	f7ec f962 	bl	80002ac <__adddf3>
 8013fe8:	4682      	mov	sl, r0
 8013fea:	468b      	mov	fp, r1
 8013fec:	2d0f      	cmp	r5, #15
 8013fee:	dc38      	bgt.n	8014062 <_strtod_l+0x45a>
 8013ff0:	9b08      	ldr	r3, [sp, #32]
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	f43f ae4a 	beq.w	8013c8c <_strtod_l+0x84>
 8013ff8:	dd24      	ble.n	8014044 <_strtod_l+0x43c>
 8013ffa:	2b16      	cmp	r3, #22
 8013ffc:	dc0b      	bgt.n	8014016 <_strtod_l+0x40e>
 8013ffe:	4d6b      	ldr	r5, [pc, #428]	; (80141ac <_strtod_l+0x5a4>)
 8014000:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8014004:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014008:	4652      	mov	r2, sl
 801400a:	465b      	mov	r3, fp
 801400c:	f7ec fb04 	bl	8000618 <__aeabi_dmul>
 8014010:	4682      	mov	sl, r0
 8014012:	468b      	mov	fp, r1
 8014014:	e63a      	b.n	8013c8c <_strtod_l+0x84>
 8014016:	9a08      	ldr	r2, [sp, #32]
 8014018:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801401c:	4293      	cmp	r3, r2
 801401e:	db20      	blt.n	8014062 <_strtod_l+0x45a>
 8014020:	4c62      	ldr	r4, [pc, #392]	; (80141ac <_strtod_l+0x5a4>)
 8014022:	f1c5 050f 	rsb	r5, r5, #15
 8014026:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801402a:	4652      	mov	r2, sl
 801402c:	465b      	mov	r3, fp
 801402e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014032:	f7ec faf1 	bl	8000618 <__aeabi_dmul>
 8014036:	9b08      	ldr	r3, [sp, #32]
 8014038:	1b5d      	subs	r5, r3, r5
 801403a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801403e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014042:	e7e3      	b.n	801400c <_strtod_l+0x404>
 8014044:	9b08      	ldr	r3, [sp, #32]
 8014046:	3316      	adds	r3, #22
 8014048:	db0b      	blt.n	8014062 <_strtod_l+0x45a>
 801404a:	9b07      	ldr	r3, [sp, #28]
 801404c:	4a57      	ldr	r2, [pc, #348]	; (80141ac <_strtod_l+0x5a4>)
 801404e:	1b9e      	subs	r6, r3, r6
 8014050:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8014054:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014058:	4650      	mov	r0, sl
 801405a:	4659      	mov	r1, fp
 801405c:	f7ec fc06 	bl	800086c <__aeabi_ddiv>
 8014060:	e7d6      	b.n	8014010 <_strtod_l+0x408>
 8014062:	9b08      	ldr	r3, [sp, #32]
 8014064:	eba5 0808 	sub.w	r8, r5, r8
 8014068:	4498      	add	r8, r3
 801406a:	f1b8 0f00 	cmp.w	r8, #0
 801406e:	dd71      	ble.n	8014154 <_strtod_l+0x54c>
 8014070:	f018 030f 	ands.w	r3, r8, #15
 8014074:	d00a      	beq.n	801408c <_strtod_l+0x484>
 8014076:	494d      	ldr	r1, [pc, #308]	; (80141ac <_strtod_l+0x5a4>)
 8014078:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801407c:	4652      	mov	r2, sl
 801407e:	465b      	mov	r3, fp
 8014080:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014084:	f7ec fac8 	bl	8000618 <__aeabi_dmul>
 8014088:	4682      	mov	sl, r0
 801408a:	468b      	mov	fp, r1
 801408c:	f038 080f 	bics.w	r8, r8, #15
 8014090:	d04d      	beq.n	801412e <_strtod_l+0x526>
 8014092:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8014096:	dd22      	ble.n	80140de <_strtod_l+0x4d6>
 8014098:	2500      	movs	r5, #0
 801409a:	462e      	mov	r6, r5
 801409c:	9509      	str	r5, [sp, #36]	; 0x24
 801409e:	9507      	str	r5, [sp, #28]
 80140a0:	2322      	movs	r3, #34	; 0x22
 80140a2:	f8df b110 	ldr.w	fp, [pc, #272]	; 80141b4 <_strtod_l+0x5ac>
 80140a6:	6023      	str	r3, [r4, #0]
 80140a8:	f04f 0a00 	mov.w	sl, #0
 80140ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	f43f adec 	beq.w	8013c8c <_strtod_l+0x84>
 80140b4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80140b6:	4620      	mov	r0, r4
 80140b8:	f002 f8e4 	bl	8016284 <_Bfree>
 80140bc:	9907      	ldr	r1, [sp, #28]
 80140be:	4620      	mov	r0, r4
 80140c0:	f002 f8e0 	bl	8016284 <_Bfree>
 80140c4:	4631      	mov	r1, r6
 80140c6:	4620      	mov	r0, r4
 80140c8:	f002 f8dc 	bl	8016284 <_Bfree>
 80140cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80140ce:	4620      	mov	r0, r4
 80140d0:	f002 f8d8 	bl	8016284 <_Bfree>
 80140d4:	4629      	mov	r1, r5
 80140d6:	4620      	mov	r0, r4
 80140d8:	f002 f8d4 	bl	8016284 <_Bfree>
 80140dc:	e5d6      	b.n	8013c8c <_strtod_l+0x84>
 80140de:	2300      	movs	r3, #0
 80140e0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80140e4:	4650      	mov	r0, sl
 80140e6:	4659      	mov	r1, fp
 80140e8:	4699      	mov	r9, r3
 80140ea:	f1b8 0f01 	cmp.w	r8, #1
 80140ee:	dc21      	bgt.n	8014134 <_strtod_l+0x52c>
 80140f0:	b10b      	cbz	r3, 80140f6 <_strtod_l+0x4ee>
 80140f2:	4682      	mov	sl, r0
 80140f4:	468b      	mov	fp, r1
 80140f6:	4b2e      	ldr	r3, [pc, #184]	; (80141b0 <_strtod_l+0x5a8>)
 80140f8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80140fc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8014100:	4652      	mov	r2, sl
 8014102:	465b      	mov	r3, fp
 8014104:	e9d9 0100 	ldrd	r0, r1, [r9]
 8014108:	f7ec fa86 	bl	8000618 <__aeabi_dmul>
 801410c:	4b29      	ldr	r3, [pc, #164]	; (80141b4 <_strtod_l+0x5ac>)
 801410e:	460a      	mov	r2, r1
 8014110:	400b      	ands	r3, r1
 8014112:	4929      	ldr	r1, [pc, #164]	; (80141b8 <_strtod_l+0x5b0>)
 8014114:	428b      	cmp	r3, r1
 8014116:	4682      	mov	sl, r0
 8014118:	d8be      	bhi.n	8014098 <_strtod_l+0x490>
 801411a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801411e:	428b      	cmp	r3, r1
 8014120:	bf86      	itte	hi
 8014122:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80141bc <_strtod_l+0x5b4>
 8014126:	f04f 3aff 	movhi.w	sl, #4294967295
 801412a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801412e:	2300      	movs	r3, #0
 8014130:	9304      	str	r3, [sp, #16]
 8014132:	e081      	b.n	8014238 <_strtod_l+0x630>
 8014134:	f018 0f01 	tst.w	r8, #1
 8014138:	d007      	beq.n	801414a <_strtod_l+0x542>
 801413a:	4b1d      	ldr	r3, [pc, #116]	; (80141b0 <_strtod_l+0x5a8>)
 801413c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8014140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014144:	f7ec fa68 	bl	8000618 <__aeabi_dmul>
 8014148:	2301      	movs	r3, #1
 801414a:	f109 0901 	add.w	r9, r9, #1
 801414e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8014152:	e7ca      	b.n	80140ea <_strtod_l+0x4e2>
 8014154:	d0eb      	beq.n	801412e <_strtod_l+0x526>
 8014156:	f1c8 0800 	rsb	r8, r8, #0
 801415a:	f018 020f 	ands.w	r2, r8, #15
 801415e:	d00a      	beq.n	8014176 <_strtod_l+0x56e>
 8014160:	4b12      	ldr	r3, [pc, #72]	; (80141ac <_strtod_l+0x5a4>)
 8014162:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014166:	4650      	mov	r0, sl
 8014168:	4659      	mov	r1, fp
 801416a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801416e:	f7ec fb7d 	bl	800086c <__aeabi_ddiv>
 8014172:	4682      	mov	sl, r0
 8014174:	468b      	mov	fp, r1
 8014176:	ea5f 1828 	movs.w	r8, r8, asr #4
 801417a:	d0d8      	beq.n	801412e <_strtod_l+0x526>
 801417c:	f1b8 0f1f 	cmp.w	r8, #31
 8014180:	dd1e      	ble.n	80141c0 <_strtod_l+0x5b8>
 8014182:	2500      	movs	r5, #0
 8014184:	462e      	mov	r6, r5
 8014186:	9509      	str	r5, [sp, #36]	; 0x24
 8014188:	9507      	str	r5, [sp, #28]
 801418a:	2322      	movs	r3, #34	; 0x22
 801418c:	f04f 0a00 	mov.w	sl, #0
 8014190:	f04f 0b00 	mov.w	fp, #0
 8014194:	6023      	str	r3, [r4, #0]
 8014196:	e789      	b.n	80140ac <_strtod_l+0x4a4>
 8014198:	080182ad 	.word	0x080182ad
 801419c:	080182f0 	.word	0x080182f0
 80141a0:	080182a5 	.word	0x080182a5
 80141a4:	08018333 	.word	0x08018333
 80141a8:	080185f0 	.word	0x080185f0
 80141ac:	080184d0 	.word	0x080184d0
 80141b0:	080184a8 	.word	0x080184a8
 80141b4:	7ff00000 	.word	0x7ff00000
 80141b8:	7ca00000 	.word	0x7ca00000
 80141bc:	7fefffff 	.word	0x7fefffff
 80141c0:	f018 0310 	ands.w	r3, r8, #16
 80141c4:	bf18      	it	ne
 80141c6:	236a      	movne	r3, #106	; 0x6a
 80141c8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8014580 <_strtod_l+0x978>
 80141cc:	9304      	str	r3, [sp, #16]
 80141ce:	4650      	mov	r0, sl
 80141d0:	4659      	mov	r1, fp
 80141d2:	2300      	movs	r3, #0
 80141d4:	f018 0f01 	tst.w	r8, #1
 80141d8:	d004      	beq.n	80141e4 <_strtod_l+0x5dc>
 80141da:	e9d9 2300 	ldrd	r2, r3, [r9]
 80141de:	f7ec fa1b 	bl	8000618 <__aeabi_dmul>
 80141e2:	2301      	movs	r3, #1
 80141e4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80141e8:	f109 0908 	add.w	r9, r9, #8
 80141ec:	d1f2      	bne.n	80141d4 <_strtod_l+0x5cc>
 80141ee:	b10b      	cbz	r3, 80141f4 <_strtod_l+0x5ec>
 80141f0:	4682      	mov	sl, r0
 80141f2:	468b      	mov	fp, r1
 80141f4:	9b04      	ldr	r3, [sp, #16]
 80141f6:	b1bb      	cbz	r3, 8014228 <_strtod_l+0x620>
 80141f8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80141fc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014200:	2b00      	cmp	r3, #0
 8014202:	4659      	mov	r1, fp
 8014204:	dd10      	ble.n	8014228 <_strtod_l+0x620>
 8014206:	2b1f      	cmp	r3, #31
 8014208:	f340 8128 	ble.w	801445c <_strtod_l+0x854>
 801420c:	2b34      	cmp	r3, #52	; 0x34
 801420e:	bfde      	ittt	le
 8014210:	3b20      	suble	r3, #32
 8014212:	f04f 32ff 	movle.w	r2, #4294967295
 8014216:	fa02 f303 	lslle.w	r3, r2, r3
 801421a:	f04f 0a00 	mov.w	sl, #0
 801421e:	bfcc      	ite	gt
 8014220:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8014224:	ea03 0b01 	andle.w	fp, r3, r1
 8014228:	2200      	movs	r2, #0
 801422a:	2300      	movs	r3, #0
 801422c:	4650      	mov	r0, sl
 801422e:	4659      	mov	r1, fp
 8014230:	f7ec fc5a 	bl	8000ae8 <__aeabi_dcmpeq>
 8014234:	2800      	cmp	r0, #0
 8014236:	d1a4      	bne.n	8014182 <_strtod_l+0x57a>
 8014238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801423a:	9300      	str	r3, [sp, #0]
 801423c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801423e:	462b      	mov	r3, r5
 8014240:	463a      	mov	r2, r7
 8014242:	4620      	mov	r0, r4
 8014244:	f002 f88a 	bl	801635c <__s2b>
 8014248:	9009      	str	r0, [sp, #36]	; 0x24
 801424a:	2800      	cmp	r0, #0
 801424c:	f43f af24 	beq.w	8014098 <_strtod_l+0x490>
 8014250:	9b07      	ldr	r3, [sp, #28]
 8014252:	1b9e      	subs	r6, r3, r6
 8014254:	9b08      	ldr	r3, [sp, #32]
 8014256:	2b00      	cmp	r3, #0
 8014258:	bfb4      	ite	lt
 801425a:	4633      	movlt	r3, r6
 801425c:	2300      	movge	r3, #0
 801425e:	9310      	str	r3, [sp, #64]	; 0x40
 8014260:	9b08      	ldr	r3, [sp, #32]
 8014262:	2500      	movs	r5, #0
 8014264:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014268:	9318      	str	r3, [sp, #96]	; 0x60
 801426a:	462e      	mov	r6, r5
 801426c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801426e:	4620      	mov	r0, r4
 8014270:	6859      	ldr	r1, [r3, #4]
 8014272:	f001 ffc7 	bl	8016204 <_Balloc>
 8014276:	9007      	str	r0, [sp, #28]
 8014278:	2800      	cmp	r0, #0
 801427a:	f43f af11 	beq.w	80140a0 <_strtod_l+0x498>
 801427e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014280:	691a      	ldr	r2, [r3, #16]
 8014282:	3202      	adds	r2, #2
 8014284:	f103 010c 	add.w	r1, r3, #12
 8014288:	0092      	lsls	r2, r2, #2
 801428a:	300c      	adds	r0, #12
 801428c:	f7fe fc00 	bl	8012a90 <memcpy>
 8014290:	ec4b ab10 	vmov	d0, sl, fp
 8014294:	aa20      	add	r2, sp, #128	; 0x80
 8014296:	a91f      	add	r1, sp, #124	; 0x7c
 8014298:	4620      	mov	r0, r4
 801429a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801429e:	f002 fb99 	bl	80169d4 <__d2b>
 80142a2:	901e      	str	r0, [sp, #120]	; 0x78
 80142a4:	2800      	cmp	r0, #0
 80142a6:	f43f aefb 	beq.w	80140a0 <_strtod_l+0x498>
 80142aa:	2101      	movs	r1, #1
 80142ac:	4620      	mov	r0, r4
 80142ae:	f002 f8ef 	bl	8016490 <__i2b>
 80142b2:	4606      	mov	r6, r0
 80142b4:	2800      	cmp	r0, #0
 80142b6:	f43f aef3 	beq.w	80140a0 <_strtod_l+0x498>
 80142ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80142bc:	9904      	ldr	r1, [sp, #16]
 80142be:	2b00      	cmp	r3, #0
 80142c0:	bfab      	itete	ge
 80142c2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80142c4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80142c6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80142c8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80142cc:	bfac      	ite	ge
 80142ce:	eb03 0902 	addge.w	r9, r3, r2
 80142d2:	1ad7      	sublt	r7, r2, r3
 80142d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80142d6:	eba3 0801 	sub.w	r8, r3, r1
 80142da:	4490      	add	r8, r2
 80142dc:	4ba3      	ldr	r3, [pc, #652]	; (801456c <_strtod_l+0x964>)
 80142de:	f108 38ff 	add.w	r8, r8, #4294967295
 80142e2:	4598      	cmp	r8, r3
 80142e4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80142e8:	f280 80cc 	bge.w	8014484 <_strtod_l+0x87c>
 80142ec:	eba3 0308 	sub.w	r3, r3, r8
 80142f0:	2b1f      	cmp	r3, #31
 80142f2:	eba2 0203 	sub.w	r2, r2, r3
 80142f6:	f04f 0101 	mov.w	r1, #1
 80142fa:	f300 80b6 	bgt.w	801446a <_strtod_l+0x862>
 80142fe:	fa01 f303 	lsl.w	r3, r1, r3
 8014302:	9311      	str	r3, [sp, #68]	; 0x44
 8014304:	2300      	movs	r3, #0
 8014306:	930c      	str	r3, [sp, #48]	; 0x30
 8014308:	eb09 0802 	add.w	r8, r9, r2
 801430c:	9b04      	ldr	r3, [sp, #16]
 801430e:	45c1      	cmp	r9, r8
 8014310:	4417      	add	r7, r2
 8014312:	441f      	add	r7, r3
 8014314:	464b      	mov	r3, r9
 8014316:	bfa8      	it	ge
 8014318:	4643      	movge	r3, r8
 801431a:	42bb      	cmp	r3, r7
 801431c:	bfa8      	it	ge
 801431e:	463b      	movge	r3, r7
 8014320:	2b00      	cmp	r3, #0
 8014322:	bfc2      	ittt	gt
 8014324:	eba8 0803 	subgt.w	r8, r8, r3
 8014328:	1aff      	subgt	r7, r7, r3
 801432a:	eba9 0903 	subgt.w	r9, r9, r3
 801432e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014330:	2b00      	cmp	r3, #0
 8014332:	dd17      	ble.n	8014364 <_strtod_l+0x75c>
 8014334:	4631      	mov	r1, r6
 8014336:	461a      	mov	r2, r3
 8014338:	4620      	mov	r0, r4
 801433a:	f002 f965 	bl	8016608 <__pow5mult>
 801433e:	4606      	mov	r6, r0
 8014340:	2800      	cmp	r0, #0
 8014342:	f43f aead 	beq.w	80140a0 <_strtod_l+0x498>
 8014346:	4601      	mov	r1, r0
 8014348:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801434a:	4620      	mov	r0, r4
 801434c:	f002 f8b6 	bl	80164bc <__multiply>
 8014350:	900f      	str	r0, [sp, #60]	; 0x3c
 8014352:	2800      	cmp	r0, #0
 8014354:	f43f aea4 	beq.w	80140a0 <_strtod_l+0x498>
 8014358:	991e      	ldr	r1, [sp, #120]	; 0x78
 801435a:	4620      	mov	r0, r4
 801435c:	f001 ff92 	bl	8016284 <_Bfree>
 8014360:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014362:	931e      	str	r3, [sp, #120]	; 0x78
 8014364:	f1b8 0f00 	cmp.w	r8, #0
 8014368:	f300 8091 	bgt.w	801448e <_strtod_l+0x886>
 801436c:	9b08      	ldr	r3, [sp, #32]
 801436e:	2b00      	cmp	r3, #0
 8014370:	dd08      	ble.n	8014384 <_strtod_l+0x77c>
 8014372:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014374:	9907      	ldr	r1, [sp, #28]
 8014376:	4620      	mov	r0, r4
 8014378:	f002 f946 	bl	8016608 <__pow5mult>
 801437c:	9007      	str	r0, [sp, #28]
 801437e:	2800      	cmp	r0, #0
 8014380:	f43f ae8e 	beq.w	80140a0 <_strtod_l+0x498>
 8014384:	2f00      	cmp	r7, #0
 8014386:	dd08      	ble.n	801439a <_strtod_l+0x792>
 8014388:	9907      	ldr	r1, [sp, #28]
 801438a:	463a      	mov	r2, r7
 801438c:	4620      	mov	r0, r4
 801438e:	f002 f995 	bl	80166bc <__lshift>
 8014392:	9007      	str	r0, [sp, #28]
 8014394:	2800      	cmp	r0, #0
 8014396:	f43f ae83 	beq.w	80140a0 <_strtod_l+0x498>
 801439a:	f1b9 0f00 	cmp.w	r9, #0
 801439e:	dd08      	ble.n	80143b2 <_strtod_l+0x7aa>
 80143a0:	4631      	mov	r1, r6
 80143a2:	464a      	mov	r2, r9
 80143a4:	4620      	mov	r0, r4
 80143a6:	f002 f989 	bl	80166bc <__lshift>
 80143aa:	4606      	mov	r6, r0
 80143ac:	2800      	cmp	r0, #0
 80143ae:	f43f ae77 	beq.w	80140a0 <_strtod_l+0x498>
 80143b2:	9a07      	ldr	r2, [sp, #28]
 80143b4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80143b6:	4620      	mov	r0, r4
 80143b8:	f002 fa08 	bl	80167cc <__mdiff>
 80143bc:	4605      	mov	r5, r0
 80143be:	2800      	cmp	r0, #0
 80143c0:	f43f ae6e 	beq.w	80140a0 <_strtod_l+0x498>
 80143c4:	68c3      	ldr	r3, [r0, #12]
 80143c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80143c8:	2300      	movs	r3, #0
 80143ca:	60c3      	str	r3, [r0, #12]
 80143cc:	4631      	mov	r1, r6
 80143ce:	f002 f9e1 	bl	8016794 <__mcmp>
 80143d2:	2800      	cmp	r0, #0
 80143d4:	da65      	bge.n	80144a2 <_strtod_l+0x89a>
 80143d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80143d8:	ea53 030a 	orrs.w	r3, r3, sl
 80143dc:	f040 8087 	bne.w	80144ee <_strtod_l+0x8e6>
 80143e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	f040 8082 	bne.w	80144ee <_strtod_l+0x8e6>
 80143ea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80143ee:	0d1b      	lsrs	r3, r3, #20
 80143f0:	051b      	lsls	r3, r3, #20
 80143f2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80143f6:	d97a      	bls.n	80144ee <_strtod_l+0x8e6>
 80143f8:	696b      	ldr	r3, [r5, #20]
 80143fa:	b913      	cbnz	r3, 8014402 <_strtod_l+0x7fa>
 80143fc:	692b      	ldr	r3, [r5, #16]
 80143fe:	2b01      	cmp	r3, #1
 8014400:	dd75      	ble.n	80144ee <_strtod_l+0x8e6>
 8014402:	4629      	mov	r1, r5
 8014404:	2201      	movs	r2, #1
 8014406:	4620      	mov	r0, r4
 8014408:	f002 f958 	bl	80166bc <__lshift>
 801440c:	4631      	mov	r1, r6
 801440e:	4605      	mov	r5, r0
 8014410:	f002 f9c0 	bl	8016794 <__mcmp>
 8014414:	2800      	cmp	r0, #0
 8014416:	dd6a      	ble.n	80144ee <_strtod_l+0x8e6>
 8014418:	9904      	ldr	r1, [sp, #16]
 801441a:	4a55      	ldr	r2, [pc, #340]	; (8014570 <_strtod_l+0x968>)
 801441c:	465b      	mov	r3, fp
 801441e:	2900      	cmp	r1, #0
 8014420:	f000 8085 	beq.w	801452e <_strtod_l+0x926>
 8014424:	ea02 010b 	and.w	r1, r2, fp
 8014428:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801442c:	dc7f      	bgt.n	801452e <_strtod_l+0x926>
 801442e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8014432:	f77f aeaa 	ble.w	801418a <_strtod_l+0x582>
 8014436:	4a4f      	ldr	r2, [pc, #316]	; (8014574 <_strtod_l+0x96c>)
 8014438:	2300      	movs	r3, #0
 801443a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801443e:	4650      	mov	r0, sl
 8014440:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8014444:	4659      	mov	r1, fp
 8014446:	f7ec f8e7 	bl	8000618 <__aeabi_dmul>
 801444a:	460b      	mov	r3, r1
 801444c:	4303      	orrs	r3, r0
 801444e:	bf08      	it	eq
 8014450:	2322      	moveq	r3, #34	; 0x22
 8014452:	4682      	mov	sl, r0
 8014454:	468b      	mov	fp, r1
 8014456:	bf08      	it	eq
 8014458:	6023      	streq	r3, [r4, #0]
 801445a:	e62b      	b.n	80140b4 <_strtod_l+0x4ac>
 801445c:	f04f 32ff 	mov.w	r2, #4294967295
 8014460:	fa02 f303 	lsl.w	r3, r2, r3
 8014464:	ea03 0a0a 	and.w	sl, r3, sl
 8014468:	e6de      	b.n	8014228 <_strtod_l+0x620>
 801446a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801446e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8014472:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8014476:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801447a:	fa01 f308 	lsl.w	r3, r1, r8
 801447e:	930c      	str	r3, [sp, #48]	; 0x30
 8014480:	9111      	str	r1, [sp, #68]	; 0x44
 8014482:	e741      	b.n	8014308 <_strtod_l+0x700>
 8014484:	2300      	movs	r3, #0
 8014486:	930c      	str	r3, [sp, #48]	; 0x30
 8014488:	2301      	movs	r3, #1
 801448a:	9311      	str	r3, [sp, #68]	; 0x44
 801448c:	e73c      	b.n	8014308 <_strtod_l+0x700>
 801448e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8014490:	4642      	mov	r2, r8
 8014492:	4620      	mov	r0, r4
 8014494:	f002 f912 	bl	80166bc <__lshift>
 8014498:	901e      	str	r0, [sp, #120]	; 0x78
 801449a:	2800      	cmp	r0, #0
 801449c:	f47f af66 	bne.w	801436c <_strtod_l+0x764>
 80144a0:	e5fe      	b.n	80140a0 <_strtod_l+0x498>
 80144a2:	465f      	mov	r7, fp
 80144a4:	d16e      	bne.n	8014584 <_strtod_l+0x97c>
 80144a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80144a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80144ac:	b342      	cbz	r2, 8014500 <_strtod_l+0x8f8>
 80144ae:	4a32      	ldr	r2, [pc, #200]	; (8014578 <_strtod_l+0x970>)
 80144b0:	4293      	cmp	r3, r2
 80144b2:	d128      	bne.n	8014506 <_strtod_l+0x8fe>
 80144b4:	9b04      	ldr	r3, [sp, #16]
 80144b6:	4650      	mov	r0, sl
 80144b8:	b1eb      	cbz	r3, 80144f6 <_strtod_l+0x8ee>
 80144ba:	4a2d      	ldr	r2, [pc, #180]	; (8014570 <_strtod_l+0x968>)
 80144bc:	403a      	ands	r2, r7
 80144be:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80144c2:	f04f 31ff 	mov.w	r1, #4294967295
 80144c6:	d819      	bhi.n	80144fc <_strtod_l+0x8f4>
 80144c8:	0d12      	lsrs	r2, r2, #20
 80144ca:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80144ce:	fa01 f303 	lsl.w	r3, r1, r3
 80144d2:	4298      	cmp	r0, r3
 80144d4:	d117      	bne.n	8014506 <_strtod_l+0x8fe>
 80144d6:	4b29      	ldr	r3, [pc, #164]	; (801457c <_strtod_l+0x974>)
 80144d8:	429f      	cmp	r7, r3
 80144da:	d102      	bne.n	80144e2 <_strtod_l+0x8da>
 80144dc:	3001      	adds	r0, #1
 80144de:	f43f addf 	beq.w	80140a0 <_strtod_l+0x498>
 80144e2:	4b23      	ldr	r3, [pc, #140]	; (8014570 <_strtod_l+0x968>)
 80144e4:	403b      	ands	r3, r7
 80144e6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80144ea:	f04f 0a00 	mov.w	sl, #0
 80144ee:	9b04      	ldr	r3, [sp, #16]
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d1a0      	bne.n	8014436 <_strtod_l+0x82e>
 80144f4:	e5de      	b.n	80140b4 <_strtod_l+0x4ac>
 80144f6:	f04f 33ff 	mov.w	r3, #4294967295
 80144fa:	e7ea      	b.n	80144d2 <_strtod_l+0x8ca>
 80144fc:	460b      	mov	r3, r1
 80144fe:	e7e8      	b.n	80144d2 <_strtod_l+0x8ca>
 8014500:	ea53 030a 	orrs.w	r3, r3, sl
 8014504:	d088      	beq.n	8014418 <_strtod_l+0x810>
 8014506:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014508:	b1db      	cbz	r3, 8014542 <_strtod_l+0x93a>
 801450a:	423b      	tst	r3, r7
 801450c:	d0ef      	beq.n	80144ee <_strtod_l+0x8e6>
 801450e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014510:	9a04      	ldr	r2, [sp, #16]
 8014512:	4650      	mov	r0, sl
 8014514:	4659      	mov	r1, fp
 8014516:	b1c3      	cbz	r3, 801454a <_strtod_l+0x942>
 8014518:	f7ff fb59 	bl	8013bce <sulp>
 801451c:	4602      	mov	r2, r0
 801451e:	460b      	mov	r3, r1
 8014520:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014524:	f7eb fec2 	bl	80002ac <__adddf3>
 8014528:	4682      	mov	sl, r0
 801452a:	468b      	mov	fp, r1
 801452c:	e7df      	b.n	80144ee <_strtod_l+0x8e6>
 801452e:	4013      	ands	r3, r2
 8014530:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8014534:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8014538:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801453c:	f04f 3aff 	mov.w	sl, #4294967295
 8014540:	e7d5      	b.n	80144ee <_strtod_l+0x8e6>
 8014542:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014544:	ea13 0f0a 	tst.w	r3, sl
 8014548:	e7e0      	b.n	801450c <_strtod_l+0x904>
 801454a:	f7ff fb40 	bl	8013bce <sulp>
 801454e:	4602      	mov	r2, r0
 8014550:	460b      	mov	r3, r1
 8014552:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014556:	f7eb fea7 	bl	80002a8 <__aeabi_dsub>
 801455a:	2200      	movs	r2, #0
 801455c:	2300      	movs	r3, #0
 801455e:	4682      	mov	sl, r0
 8014560:	468b      	mov	fp, r1
 8014562:	f7ec fac1 	bl	8000ae8 <__aeabi_dcmpeq>
 8014566:	2800      	cmp	r0, #0
 8014568:	d0c1      	beq.n	80144ee <_strtod_l+0x8e6>
 801456a:	e60e      	b.n	801418a <_strtod_l+0x582>
 801456c:	fffffc02 	.word	0xfffffc02
 8014570:	7ff00000 	.word	0x7ff00000
 8014574:	39500000 	.word	0x39500000
 8014578:	000fffff 	.word	0x000fffff
 801457c:	7fefffff 	.word	0x7fefffff
 8014580:	08018308 	.word	0x08018308
 8014584:	4631      	mov	r1, r6
 8014586:	4628      	mov	r0, r5
 8014588:	f002 fa80 	bl	8016a8c <__ratio>
 801458c:	ec59 8b10 	vmov	r8, r9, d0
 8014590:	ee10 0a10 	vmov	r0, s0
 8014594:	2200      	movs	r2, #0
 8014596:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801459a:	4649      	mov	r1, r9
 801459c:	f7ec fab8 	bl	8000b10 <__aeabi_dcmple>
 80145a0:	2800      	cmp	r0, #0
 80145a2:	d07c      	beq.n	801469e <_strtod_l+0xa96>
 80145a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d04c      	beq.n	8014644 <_strtod_l+0xa3c>
 80145aa:	4b95      	ldr	r3, [pc, #596]	; (8014800 <_strtod_l+0xbf8>)
 80145ac:	2200      	movs	r2, #0
 80145ae:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80145b2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8014800 <_strtod_l+0xbf8>
 80145b6:	f04f 0800 	mov.w	r8, #0
 80145ba:	4b92      	ldr	r3, [pc, #584]	; (8014804 <_strtod_l+0xbfc>)
 80145bc:	403b      	ands	r3, r7
 80145be:	9311      	str	r3, [sp, #68]	; 0x44
 80145c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80145c2:	4b91      	ldr	r3, [pc, #580]	; (8014808 <_strtod_l+0xc00>)
 80145c4:	429a      	cmp	r2, r3
 80145c6:	f040 80b2 	bne.w	801472e <_strtod_l+0xb26>
 80145ca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80145ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80145d2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80145d6:	ec4b ab10 	vmov	d0, sl, fp
 80145da:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80145de:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80145e2:	f002 f97b 	bl	80168dc <__ulp>
 80145e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80145ea:	ec53 2b10 	vmov	r2, r3, d0
 80145ee:	f7ec f813 	bl	8000618 <__aeabi_dmul>
 80145f2:	4652      	mov	r2, sl
 80145f4:	465b      	mov	r3, fp
 80145f6:	f7eb fe59 	bl	80002ac <__adddf3>
 80145fa:	460b      	mov	r3, r1
 80145fc:	4981      	ldr	r1, [pc, #516]	; (8014804 <_strtod_l+0xbfc>)
 80145fe:	4a83      	ldr	r2, [pc, #524]	; (801480c <_strtod_l+0xc04>)
 8014600:	4019      	ands	r1, r3
 8014602:	4291      	cmp	r1, r2
 8014604:	4682      	mov	sl, r0
 8014606:	d95e      	bls.n	80146c6 <_strtod_l+0xabe>
 8014608:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801460a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801460e:	4293      	cmp	r3, r2
 8014610:	d103      	bne.n	801461a <_strtod_l+0xa12>
 8014612:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014614:	3301      	adds	r3, #1
 8014616:	f43f ad43 	beq.w	80140a0 <_strtod_l+0x498>
 801461a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8014818 <_strtod_l+0xc10>
 801461e:	f04f 3aff 	mov.w	sl, #4294967295
 8014622:	991e      	ldr	r1, [sp, #120]	; 0x78
 8014624:	4620      	mov	r0, r4
 8014626:	f001 fe2d 	bl	8016284 <_Bfree>
 801462a:	9907      	ldr	r1, [sp, #28]
 801462c:	4620      	mov	r0, r4
 801462e:	f001 fe29 	bl	8016284 <_Bfree>
 8014632:	4631      	mov	r1, r6
 8014634:	4620      	mov	r0, r4
 8014636:	f001 fe25 	bl	8016284 <_Bfree>
 801463a:	4629      	mov	r1, r5
 801463c:	4620      	mov	r0, r4
 801463e:	f001 fe21 	bl	8016284 <_Bfree>
 8014642:	e613      	b.n	801426c <_strtod_l+0x664>
 8014644:	f1ba 0f00 	cmp.w	sl, #0
 8014648:	d11b      	bne.n	8014682 <_strtod_l+0xa7a>
 801464a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801464e:	b9f3      	cbnz	r3, 801468e <_strtod_l+0xa86>
 8014650:	4b6b      	ldr	r3, [pc, #428]	; (8014800 <_strtod_l+0xbf8>)
 8014652:	2200      	movs	r2, #0
 8014654:	4640      	mov	r0, r8
 8014656:	4649      	mov	r1, r9
 8014658:	f7ec fa50 	bl	8000afc <__aeabi_dcmplt>
 801465c:	b9d0      	cbnz	r0, 8014694 <_strtod_l+0xa8c>
 801465e:	4640      	mov	r0, r8
 8014660:	4649      	mov	r1, r9
 8014662:	4b6b      	ldr	r3, [pc, #428]	; (8014810 <_strtod_l+0xc08>)
 8014664:	2200      	movs	r2, #0
 8014666:	f7eb ffd7 	bl	8000618 <__aeabi_dmul>
 801466a:	4680      	mov	r8, r0
 801466c:	4689      	mov	r9, r1
 801466e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014672:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8014676:	931b      	str	r3, [sp, #108]	; 0x6c
 8014678:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801467c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8014680:	e79b      	b.n	80145ba <_strtod_l+0x9b2>
 8014682:	f1ba 0f01 	cmp.w	sl, #1
 8014686:	d102      	bne.n	801468e <_strtod_l+0xa86>
 8014688:	2f00      	cmp	r7, #0
 801468a:	f43f ad7e 	beq.w	801418a <_strtod_l+0x582>
 801468e:	4b61      	ldr	r3, [pc, #388]	; (8014814 <_strtod_l+0xc0c>)
 8014690:	2200      	movs	r2, #0
 8014692:	e78c      	b.n	80145ae <_strtod_l+0x9a6>
 8014694:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8014810 <_strtod_l+0xc08>
 8014698:	f04f 0800 	mov.w	r8, #0
 801469c:	e7e7      	b.n	801466e <_strtod_l+0xa66>
 801469e:	4b5c      	ldr	r3, [pc, #368]	; (8014810 <_strtod_l+0xc08>)
 80146a0:	4640      	mov	r0, r8
 80146a2:	4649      	mov	r1, r9
 80146a4:	2200      	movs	r2, #0
 80146a6:	f7eb ffb7 	bl	8000618 <__aeabi_dmul>
 80146aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80146ac:	4680      	mov	r8, r0
 80146ae:	4689      	mov	r9, r1
 80146b0:	b933      	cbnz	r3, 80146c0 <_strtod_l+0xab8>
 80146b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80146b6:	9012      	str	r0, [sp, #72]	; 0x48
 80146b8:	9313      	str	r3, [sp, #76]	; 0x4c
 80146ba:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80146be:	e7dd      	b.n	801467c <_strtod_l+0xa74>
 80146c0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80146c4:	e7f9      	b.n	80146ba <_strtod_l+0xab2>
 80146c6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80146ca:	9b04      	ldr	r3, [sp, #16]
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d1a8      	bne.n	8014622 <_strtod_l+0xa1a>
 80146d0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80146d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80146d6:	0d1b      	lsrs	r3, r3, #20
 80146d8:	051b      	lsls	r3, r3, #20
 80146da:	429a      	cmp	r2, r3
 80146dc:	d1a1      	bne.n	8014622 <_strtod_l+0xa1a>
 80146de:	4640      	mov	r0, r8
 80146e0:	4649      	mov	r1, r9
 80146e2:	f7ec faf9 	bl	8000cd8 <__aeabi_d2lz>
 80146e6:	f7eb ff69 	bl	80005bc <__aeabi_l2d>
 80146ea:	4602      	mov	r2, r0
 80146ec:	460b      	mov	r3, r1
 80146ee:	4640      	mov	r0, r8
 80146f0:	4649      	mov	r1, r9
 80146f2:	f7eb fdd9 	bl	80002a8 <__aeabi_dsub>
 80146f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80146f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80146fc:	ea43 030a 	orr.w	r3, r3, sl
 8014700:	4313      	orrs	r3, r2
 8014702:	4680      	mov	r8, r0
 8014704:	4689      	mov	r9, r1
 8014706:	d053      	beq.n	80147b0 <_strtod_l+0xba8>
 8014708:	a335      	add	r3, pc, #212	; (adr r3, 80147e0 <_strtod_l+0xbd8>)
 801470a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801470e:	f7ec f9f5 	bl	8000afc <__aeabi_dcmplt>
 8014712:	2800      	cmp	r0, #0
 8014714:	f47f acce 	bne.w	80140b4 <_strtod_l+0x4ac>
 8014718:	a333      	add	r3, pc, #204	; (adr r3, 80147e8 <_strtod_l+0xbe0>)
 801471a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801471e:	4640      	mov	r0, r8
 8014720:	4649      	mov	r1, r9
 8014722:	f7ec fa09 	bl	8000b38 <__aeabi_dcmpgt>
 8014726:	2800      	cmp	r0, #0
 8014728:	f43f af7b 	beq.w	8014622 <_strtod_l+0xa1a>
 801472c:	e4c2      	b.n	80140b4 <_strtod_l+0x4ac>
 801472e:	9b04      	ldr	r3, [sp, #16]
 8014730:	b333      	cbz	r3, 8014780 <_strtod_l+0xb78>
 8014732:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014734:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014738:	d822      	bhi.n	8014780 <_strtod_l+0xb78>
 801473a:	a32d      	add	r3, pc, #180	; (adr r3, 80147f0 <_strtod_l+0xbe8>)
 801473c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014740:	4640      	mov	r0, r8
 8014742:	4649      	mov	r1, r9
 8014744:	f7ec f9e4 	bl	8000b10 <__aeabi_dcmple>
 8014748:	b1a0      	cbz	r0, 8014774 <_strtod_l+0xb6c>
 801474a:	4649      	mov	r1, r9
 801474c:	4640      	mov	r0, r8
 801474e:	f7ec fa3b 	bl	8000bc8 <__aeabi_d2uiz>
 8014752:	2801      	cmp	r0, #1
 8014754:	bf38      	it	cc
 8014756:	2001      	movcc	r0, #1
 8014758:	f7eb fee4 	bl	8000524 <__aeabi_ui2d>
 801475c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801475e:	4680      	mov	r8, r0
 8014760:	4689      	mov	r9, r1
 8014762:	bb13      	cbnz	r3, 80147aa <_strtod_l+0xba2>
 8014764:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014768:	9014      	str	r0, [sp, #80]	; 0x50
 801476a:	9315      	str	r3, [sp, #84]	; 0x54
 801476c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8014770:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8014774:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014776:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014778:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801477c:	1a9b      	subs	r3, r3, r2
 801477e:	930d      	str	r3, [sp, #52]	; 0x34
 8014780:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014784:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8014788:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801478c:	f002 f8a6 	bl	80168dc <__ulp>
 8014790:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014794:	ec53 2b10 	vmov	r2, r3, d0
 8014798:	f7eb ff3e 	bl	8000618 <__aeabi_dmul>
 801479c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80147a0:	f7eb fd84 	bl	80002ac <__adddf3>
 80147a4:	4682      	mov	sl, r0
 80147a6:	468b      	mov	fp, r1
 80147a8:	e78f      	b.n	80146ca <_strtod_l+0xac2>
 80147aa:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80147ae:	e7dd      	b.n	801476c <_strtod_l+0xb64>
 80147b0:	a311      	add	r3, pc, #68	; (adr r3, 80147f8 <_strtod_l+0xbf0>)
 80147b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147b6:	f7ec f9a1 	bl	8000afc <__aeabi_dcmplt>
 80147ba:	e7b4      	b.n	8014726 <_strtod_l+0xb1e>
 80147bc:	2300      	movs	r3, #0
 80147be:	930e      	str	r3, [sp, #56]	; 0x38
 80147c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80147c2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80147c4:	6013      	str	r3, [r2, #0]
 80147c6:	f7ff ba65 	b.w	8013c94 <_strtod_l+0x8c>
 80147ca:	2b65      	cmp	r3, #101	; 0x65
 80147cc:	f43f ab5d 	beq.w	8013e8a <_strtod_l+0x282>
 80147d0:	2b45      	cmp	r3, #69	; 0x45
 80147d2:	f43f ab5a 	beq.w	8013e8a <_strtod_l+0x282>
 80147d6:	2201      	movs	r2, #1
 80147d8:	f7ff bb92 	b.w	8013f00 <_strtod_l+0x2f8>
 80147dc:	f3af 8000 	nop.w
 80147e0:	94a03595 	.word	0x94a03595
 80147e4:	3fdfffff 	.word	0x3fdfffff
 80147e8:	35afe535 	.word	0x35afe535
 80147ec:	3fe00000 	.word	0x3fe00000
 80147f0:	ffc00000 	.word	0xffc00000
 80147f4:	41dfffff 	.word	0x41dfffff
 80147f8:	94a03595 	.word	0x94a03595
 80147fc:	3fcfffff 	.word	0x3fcfffff
 8014800:	3ff00000 	.word	0x3ff00000
 8014804:	7ff00000 	.word	0x7ff00000
 8014808:	7fe00000 	.word	0x7fe00000
 801480c:	7c9fffff 	.word	0x7c9fffff
 8014810:	3fe00000 	.word	0x3fe00000
 8014814:	bff00000 	.word	0xbff00000
 8014818:	7fefffff 	.word	0x7fefffff

0801481c <_strtod_r>:
 801481c:	4b01      	ldr	r3, [pc, #4]	; (8014824 <_strtod_r+0x8>)
 801481e:	f7ff b9f3 	b.w	8013c08 <_strtod_l>
 8014822:	bf00      	nop
 8014824:	200000e8 	.word	0x200000e8

08014828 <_strtol_l.isra.0>:
 8014828:	2b01      	cmp	r3, #1
 801482a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801482e:	d001      	beq.n	8014834 <_strtol_l.isra.0+0xc>
 8014830:	2b24      	cmp	r3, #36	; 0x24
 8014832:	d906      	bls.n	8014842 <_strtol_l.isra.0+0x1a>
 8014834:	f7fe f800 	bl	8012838 <__errno>
 8014838:	2316      	movs	r3, #22
 801483a:	6003      	str	r3, [r0, #0]
 801483c:	2000      	movs	r0, #0
 801483e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014842:	4f3a      	ldr	r7, [pc, #232]	; (801492c <_strtol_l.isra.0+0x104>)
 8014844:	468e      	mov	lr, r1
 8014846:	4676      	mov	r6, lr
 8014848:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801484c:	5de5      	ldrb	r5, [r4, r7]
 801484e:	f015 0508 	ands.w	r5, r5, #8
 8014852:	d1f8      	bne.n	8014846 <_strtol_l.isra.0+0x1e>
 8014854:	2c2d      	cmp	r4, #45	; 0x2d
 8014856:	d134      	bne.n	80148c2 <_strtol_l.isra.0+0x9a>
 8014858:	f89e 4000 	ldrb.w	r4, [lr]
 801485c:	f04f 0801 	mov.w	r8, #1
 8014860:	f106 0e02 	add.w	lr, r6, #2
 8014864:	2b00      	cmp	r3, #0
 8014866:	d05c      	beq.n	8014922 <_strtol_l.isra.0+0xfa>
 8014868:	2b10      	cmp	r3, #16
 801486a:	d10c      	bne.n	8014886 <_strtol_l.isra.0+0x5e>
 801486c:	2c30      	cmp	r4, #48	; 0x30
 801486e:	d10a      	bne.n	8014886 <_strtol_l.isra.0+0x5e>
 8014870:	f89e 4000 	ldrb.w	r4, [lr]
 8014874:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8014878:	2c58      	cmp	r4, #88	; 0x58
 801487a:	d14d      	bne.n	8014918 <_strtol_l.isra.0+0xf0>
 801487c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8014880:	2310      	movs	r3, #16
 8014882:	f10e 0e02 	add.w	lr, lr, #2
 8014886:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801488a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801488e:	2600      	movs	r6, #0
 8014890:	fbbc f9f3 	udiv	r9, ip, r3
 8014894:	4635      	mov	r5, r6
 8014896:	fb03 ca19 	mls	sl, r3, r9, ip
 801489a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801489e:	2f09      	cmp	r7, #9
 80148a0:	d818      	bhi.n	80148d4 <_strtol_l.isra.0+0xac>
 80148a2:	463c      	mov	r4, r7
 80148a4:	42a3      	cmp	r3, r4
 80148a6:	dd24      	ble.n	80148f2 <_strtol_l.isra.0+0xca>
 80148a8:	2e00      	cmp	r6, #0
 80148aa:	db1f      	blt.n	80148ec <_strtol_l.isra.0+0xc4>
 80148ac:	45a9      	cmp	r9, r5
 80148ae:	d31d      	bcc.n	80148ec <_strtol_l.isra.0+0xc4>
 80148b0:	d101      	bne.n	80148b6 <_strtol_l.isra.0+0x8e>
 80148b2:	45a2      	cmp	sl, r4
 80148b4:	db1a      	blt.n	80148ec <_strtol_l.isra.0+0xc4>
 80148b6:	fb05 4503 	mla	r5, r5, r3, r4
 80148ba:	2601      	movs	r6, #1
 80148bc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80148c0:	e7eb      	b.n	801489a <_strtol_l.isra.0+0x72>
 80148c2:	2c2b      	cmp	r4, #43	; 0x2b
 80148c4:	bf08      	it	eq
 80148c6:	f89e 4000 	ldrbeq.w	r4, [lr]
 80148ca:	46a8      	mov	r8, r5
 80148cc:	bf08      	it	eq
 80148ce:	f106 0e02 	addeq.w	lr, r6, #2
 80148d2:	e7c7      	b.n	8014864 <_strtol_l.isra.0+0x3c>
 80148d4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80148d8:	2f19      	cmp	r7, #25
 80148da:	d801      	bhi.n	80148e0 <_strtol_l.isra.0+0xb8>
 80148dc:	3c37      	subs	r4, #55	; 0x37
 80148de:	e7e1      	b.n	80148a4 <_strtol_l.isra.0+0x7c>
 80148e0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80148e4:	2f19      	cmp	r7, #25
 80148e6:	d804      	bhi.n	80148f2 <_strtol_l.isra.0+0xca>
 80148e8:	3c57      	subs	r4, #87	; 0x57
 80148ea:	e7db      	b.n	80148a4 <_strtol_l.isra.0+0x7c>
 80148ec:	f04f 36ff 	mov.w	r6, #4294967295
 80148f0:	e7e4      	b.n	80148bc <_strtol_l.isra.0+0x94>
 80148f2:	2e00      	cmp	r6, #0
 80148f4:	da05      	bge.n	8014902 <_strtol_l.isra.0+0xda>
 80148f6:	2322      	movs	r3, #34	; 0x22
 80148f8:	6003      	str	r3, [r0, #0]
 80148fa:	4665      	mov	r5, ip
 80148fc:	b942      	cbnz	r2, 8014910 <_strtol_l.isra.0+0xe8>
 80148fe:	4628      	mov	r0, r5
 8014900:	e79d      	b.n	801483e <_strtol_l.isra.0+0x16>
 8014902:	f1b8 0f00 	cmp.w	r8, #0
 8014906:	d000      	beq.n	801490a <_strtol_l.isra.0+0xe2>
 8014908:	426d      	negs	r5, r5
 801490a:	2a00      	cmp	r2, #0
 801490c:	d0f7      	beq.n	80148fe <_strtol_l.isra.0+0xd6>
 801490e:	b10e      	cbz	r6, 8014914 <_strtol_l.isra.0+0xec>
 8014910:	f10e 31ff 	add.w	r1, lr, #4294967295
 8014914:	6011      	str	r1, [r2, #0]
 8014916:	e7f2      	b.n	80148fe <_strtol_l.isra.0+0xd6>
 8014918:	2430      	movs	r4, #48	; 0x30
 801491a:	2b00      	cmp	r3, #0
 801491c:	d1b3      	bne.n	8014886 <_strtol_l.isra.0+0x5e>
 801491e:	2308      	movs	r3, #8
 8014920:	e7b1      	b.n	8014886 <_strtol_l.isra.0+0x5e>
 8014922:	2c30      	cmp	r4, #48	; 0x30
 8014924:	d0a4      	beq.n	8014870 <_strtol_l.isra.0+0x48>
 8014926:	230a      	movs	r3, #10
 8014928:	e7ad      	b.n	8014886 <_strtol_l.isra.0+0x5e>
 801492a:	bf00      	nop
 801492c:	08018139 	.word	0x08018139

08014930 <_strtol_r>:
 8014930:	f7ff bf7a 	b.w	8014828 <_strtol_l.isra.0>

08014934 <strtol>:
 8014934:	4613      	mov	r3, r2
 8014936:	460a      	mov	r2, r1
 8014938:	4601      	mov	r1, r0
 801493a:	4802      	ldr	r0, [pc, #8]	; (8014944 <strtol+0x10>)
 801493c:	6800      	ldr	r0, [r0, #0]
 801493e:	f7ff bf73 	b.w	8014828 <_strtol_l.isra.0>
 8014942:	bf00      	nop
 8014944:	20000080 	.word	0x20000080

08014948 <_vsniprintf_r>:
 8014948:	b530      	push	{r4, r5, lr}
 801494a:	1e14      	subs	r4, r2, #0
 801494c:	4605      	mov	r5, r0
 801494e:	b09b      	sub	sp, #108	; 0x6c
 8014950:	4618      	mov	r0, r3
 8014952:	da05      	bge.n	8014960 <_vsniprintf_r+0x18>
 8014954:	238b      	movs	r3, #139	; 0x8b
 8014956:	602b      	str	r3, [r5, #0]
 8014958:	f04f 30ff 	mov.w	r0, #4294967295
 801495c:	b01b      	add	sp, #108	; 0x6c
 801495e:	bd30      	pop	{r4, r5, pc}
 8014960:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014964:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014968:	bf14      	ite	ne
 801496a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801496e:	4623      	moveq	r3, r4
 8014970:	9302      	str	r3, [sp, #8]
 8014972:	9305      	str	r3, [sp, #20]
 8014974:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014978:	9100      	str	r1, [sp, #0]
 801497a:	9104      	str	r1, [sp, #16]
 801497c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8014980:	4602      	mov	r2, r0
 8014982:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8014984:	4669      	mov	r1, sp
 8014986:	4628      	mov	r0, r5
 8014988:	f002 f962 	bl	8016c50 <_svfiprintf_r>
 801498c:	1c43      	adds	r3, r0, #1
 801498e:	bfbc      	itt	lt
 8014990:	238b      	movlt	r3, #139	; 0x8b
 8014992:	602b      	strlt	r3, [r5, #0]
 8014994:	2c00      	cmp	r4, #0
 8014996:	d0e1      	beq.n	801495c <_vsniprintf_r+0x14>
 8014998:	9b00      	ldr	r3, [sp, #0]
 801499a:	2200      	movs	r2, #0
 801499c:	701a      	strb	r2, [r3, #0]
 801499e:	e7dd      	b.n	801495c <_vsniprintf_r+0x14>

080149a0 <vsniprintf>:
 80149a0:	b507      	push	{r0, r1, r2, lr}
 80149a2:	9300      	str	r3, [sp, #0]
 80149a4:	4613      	mov	r3, r2
 80149a6:	460a      	mov	r2, r1
 80149a8:	4601      	mov	r1, r0
 80149aa:	4803      	ldr	r0, [pc, #12]	; (80149b8 <vsniprintf+0x18>)
 80149ac:	6800      	ldr	r0, [r0, #0]
 80149ae:	f7ff ffcb 	bl	8014948 <_vsniprintf_r>
 80149b2:	b003      	add	sp, #12
 80149b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80149b8:	20000080 	.word	0x20000080

080149bc <__swbuf_r>:
 80149bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149be:	460e      	mov	r6, r1
 80149c0:	4614      	mov	r4, r2
 80149c2:	4605      	mov	r5, r0
 80149c4:	b118      	cbz	r0, 80149ce <__swbuf_r+0x12>
 80149c6:	6983      	ldr	r3, [r0, #24]
 80149c8:	b90b      	cbnz	r3, 80149ce <__swbuf_r+0x12>
 80149ca:	f7fd ff93 	bl	80128f4 <__sinit>
 80149ce:	4b21      	ldr	r3, [pc, #132]	; (8014a54 <__swbuf_r+0x98>)
 80149d0:	429c      	cmp	r4, r3
 80149d2:	d12b      	bne.n	8014a2c <__swbuf_r+0x70>
 80149d4:	686c      	ldr	r4, [r5, #4]
 80149d6:	69a3      	ldr	r3, [r4, #24]
 80149d8:	60a3      	str	r3, [r4, #8]
 80149da:	89a3      	ldrh	r3, [r4, #12]
 80149dc:	071a      	lsls	r2, r3, #28
 80149de:	d52f      	bpl.n	8014a40 <__swbuf_r+0x84>
 80149e0:	6923      	ldr	r3, [r4, #16]
 80149e2:	b36b      	cbz	r3, 8014a40 <__swbuf_r+0x84>
 80149e4:	6923      	ldr	r3, [r4, #16]
 80149e6:	6820      	ldr	r0, [r4, #0]
 80149e8:	1ac0      	subs	r0, r0, r3
 80149ea:	6963      	ldr	r3, [r4, #20]
 80149ec:	b2f6      	uxtb	r6, r6
 80149ee:	4283      	cmp	r3, r0
 80149f0:	4637      	mov	r7, r6
 80149f2:	dc04      	bgt.n	80149fe <__swbuf_r+0x42>
 80149f4:	4621      	mov	r1, r4
 80149f6:	4628      	mov	r0, r5
 80149f8:	f000 ffc0 	bl	801597c <_fflush_r>
 80149fc:	bb30      	cbnz	r0, 8014a4c <__swbuf_r+0x90>
 80149fe:	68a3      	ldr	r3, [r4, #8]
 8014a00:	3b01      	subs	r3, #1
 8014a02:	60a3      	str	r3, [r4, #8]
 8014a04:	6823      	ldr	r3, [r4, #0]
 8014a06:	1c5a      	adds	r2, r3, #1
 8014a08:	6022      	str	r2, [r4, #0]
 8014a0a:	701e      	strb	r6, [r3, #0]
 8014a0c:	6963      	ldr	r3, [r4, #20]
 8014a0e:	3001      	adds	r0, #1
 8014a10:	4283      	cmp	r3, r0
 8014a12:	d004      	beq.n	8014a1e <__swbuf_r+0x62>
 8014a14:	89a3      	ldrh	r3, [r4, #12]
 8014a16:	07db      	lsls	r3, r3, #31
 8014a18:	d506      	bpl.n	8014a28 <__swbuf_r+0x6c>
 8014a1a:	2e0a      	cmp	r6, #10
 8014a1c:	d104      	bne.n	8014a28 <__swbuf_r+0x6c>
 8014a1e:	4621      	mov	r1, r4
 8014a20:	4628      	mov	r0, r5
 8014a22:	f000 ffab 	bl	801597c <_fflush_r>
 8014a26:	b988      	cbnz	r0, 8014a4c <__swbuf_r+0x90>
 8014a28:	4638      	mov	r0, r7
 8014a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a2c:	4b0a      	ldr	r3, [pc, #40]	; (8014a58 <__swbuf_r+0x9c>)
 8014a2e:	429c      	cmp	r4, r3
 8014a30:	d101      	bne.n	8014a36 <__swbuf_r+0x7a>
 8014a32:	68ac      	ldr	r4, [r5, #8]
 8014a34:	e7cf      	b.n	80149d6 <__swbuf_r+0x1a>
 8014a36:	4b09      	ldr	r3, [pc, #36]	; (8014a5c <__swbuf_r+0xa0>)
 8014a38:	429c      	cmp	r4, r3
 8014a3a:	bf08      	it	eq
 8014a3c:	68ec      	ldreq	r4, [r5, #12]
 8014a3e:	e7ca      	b.n	80149d6 <__swbuf_r+0x1a>
 8014a40:	4621      	mov	r1, r4
 8014a42:	4628      	mov	r0, r5
 8014a44:	f000 f81e 	bl	8014a84 <__swsetup_r>
 8014a48:	2800      	cmp	r0, #0
 8014a4a:	d0cb      	beq.n	80149e4 <__swbuf_r+0x28>
 8014a4c:	f04f 37ff 	mov.w	r7, #4294967295
 8014a50:	e7ea      	b.n	8014a28 <__swbuf_r+0x6c>
 8014a52:	bf00      	nop
 8014a54:	0801825c 	.word	0x0801825c
 8014a58:	0801827c 	.word	0x0801827c
 8014a5c:	0801823c 	.word	0x0801823c

08014a60 <_write_r>:
 8014a60:	b538      	push	{r3, r4, r5, lr}
 8014a62:	4d07      	ldr	r5, [pc, #28]	; (8014a80 <_write_r+0x20>)
 8014a64:	4604      	mov	r4, r0
 8014a66:	4608      	mov	r0, r1
 8014a68:	4611      	mov	r1, r2
 8014a6a:	2200      	movs	r2, #0
 8014a6c:	602a      	str	r2, [r5, #0]
 8014a6e:	461a      	mov	r2, r3
 8014a70:	f002 fc48 	bl	8017304 <_write>
 8014a74:	1c43      	adds	r3, r0, #1
 8014a76:	d102      	bne.n	8014a7e <_write_r+0x1e>
 8014a78:	682b      	ldr	r3, [r5, #0]
 8014a7a:	b103      	cbz	r3, 8014a7e <_write_r+0x1e>
 8014a7c:	6023      	str	r3, [r4, #0]
 8014a7e:	bd38      	pop	{r3, r4, r5, pc}
 8014a80:	20006900 	.word	0x20006900

08014a84 <__swsetup_r>:
 8014a84:	4b32      	ldr	r3, [pc, #200]	; (8014b50 <__swsetup_r+0xcc>)
 8014a86:	b570      	push	{r4, r5, r6, lr}
 8014a88:	681d      	ldr	r5, [r3, #0]
 8014a8a:	4606      	mov	r6, r0
 8014a8c:	460c      	mov	r4, r1
 8014a8e:	b125      	cbz	r5, 8014a9a <__swsetup_r+0x16>
 8014a90:	69ab      	ldr	r3, [r5, #24]
 8014a92:	b913      	cbnz	r3, 8014a9a <__swsetup_r+0x16>
 8014a94:	4628      	mov	r0, r5
 8014a96:	f7fd ff2d 	bl	80128f4 <__sinit>
 8014a9a:	4b2e      	ldr	r3, [pc, #184]	; (8014b54 <__swsetup_r+0xd0>)
 8014a9c:	429c      	cmp	r4, r3
 8014a9e:	d10f      	bne.n	8014ac0 <__swsetup_r+0x3c>
 8014aa0:	686c      	ldr	r4, [r5, #4]
 8014aa2:	89a3      	ldrh	r3, [r4, #12]
 8014aa4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014aa8:	0719      	lsls	r1, r3, #28
 8014aaa:	d42c      	bmi.n	8014b06 <__swsetup_r+0x82>
 8014aac:	06dd      	lsls	r5, r3, #27
 8014aae:	d411      	bmi.n	8014ad4 <__swsetup_r+0x50>
 8014ab0:	2309      	movs	r3, #9
 8014ab2:	6033      	str	r3, [r6, #0]
 8014ab4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014ab8:	81a3      	strh	r3, [r4, #12]
 8014aba:	f04f 30ff 	mov.w	r0, #4294967295
 8014abe:	e03e      	b.n	8014b3e <__swsetup_r+0xba>
 8014ac0:	4b25      	ldr	r3, [pc, #148]	; (8014b58 <__swsetup_r+0xd4>)
 8014ac2:	429c      	cmp	r4, r3
 8014ac4:	d101      	bne.n	8014aca <__swsetup_r+0x46>
 8014ac6:	68ac      	ldr	r4, [r5, #8]
 8014ac8:	e7eb      	b.n	8014aa2 <__swsetup_r+0x1e>
 8014aca:	4b24      	ldr	r3, [pc, #144]	; (8014b5c <__swsetup_r+0xd8>)
 8014acc:	429c      	cmp	r4, r3
 8014ace:	bf08      	it	eq
 8014ad0:	68ec      	ldreq	r4, [r5, #12]
 8014ad2:	e7e6      	b.n	8014aa2 <__swsetup_r+0x1e>
 8014ad4:	0758      	lsls	r0, r3, #29
 8014ad6:	d512      	bpl.n	8014afe <__swsetup_r+0x7a>
 8014ad8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014ada:	b141      	cbz	r1, 8014aee <__swsetup_r+0x6a>
 8014adc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014ae0:	4299      	cmp	r1, r3
 8014ae2:	d002      	beq.n	8014aea <__swsetup_r+0x66>
 8014ae4:	4630      	mov	r0, r6
 8014ae6:	f7fd ffe9 	bl	8012abc <_free_r>
 8014aea:	2300      	movs	r3, #0
 8014aec:	6363      	str	r3, [r4, #52]	; 0x34
 8014aee:	89a3      	ldrh	r3, [r4, #12]
 8014af0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014af4:	81a3      	strh	r3, [r4, #12]
 8014af6:	2300      	movs	r3, #0
 8014af8:	6063      	str	r3, [r4, #4]
 8014afa:	6923      	ldr	r3, [r4, #16]
 8014afc:	6023      	str	r3, [r4, #0]
 8014afe:	89a3      	ldrh	r3, [r4, #12]
 8014b00:	f043 0308 	orr.w	r3, r3, #8
 8014b04:	81a3      	strh	r3, [r4, #12]
 8014b06:	6923      	ldr	r3, [r4, #16]
 8014b08:	b94b      	cbnz	r3, 8014b1e <__swsetup_r+0x9a>
 8014b0a:	89a3      	ldrh	r3, [r4, #12]
 8014b0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014b10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014b14:	d003      	beq.n	8014b1e <__swsetup_r+0x9a>
 8014b16:	4621      	mov	r1, r4
 8014b18:	4630      	mov	r0, r6
 8014b1a:	f001 fb15 	bl	8016148 <__smakebuf_r>
 8014b1e:	89a0      	ldrh	r0, [r4, #12]
 8014b20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014b24:	f010 0301 	ands.w	r3, r0, #1
 8014b28:	d00a      	beq.n	8014b40 <__swsetup_r+0xbc>
 8014b2a:	2300      	movs	r3, #0
 8014b2c:	60a3      	str	r3, [r4, #8]
 8014b2e:	6963      	ldr	r3, [r4, #20]
 8014b30:	425b      	negs	r3, r3
 8014b32:	61a3      	str	r3, [r4, #24]
 8014b34:	6923      	ldr	r3, [r4, #16]
 8014b36:	b943      	cbnz	r3, 8014b4a <__swsetup_r+0xc6>
 8014b38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014b3c:	d1ba      	bne.n	8014ab4 <__swsetup_r+0x30>
 8014b3e:	bd70      	pop	{r4, r5, r6, pc}
 8014b40:	0781      	lsls	r1, r0, #30
 8014b42:	bf58      	it	pl
 8014b44:	6963      	ldrpl	r3, [r4, #20]
 8014b46:	60a3      	str	r3, [r4, #8]
 8014b48:	e7f4      	b.n	8014b34 <__swsetup_r+0xb0>
 8014b4a:	2000      	movs	r0, #0
 8014b4c:	e7f7      	b.n	8014b3e <__swsetup_r+0xba>
 8014b4e:	bf00      	nop
 8014b50:	20000080 	.word	0x20000080
 8014b54:	0801825c 	.word	0x0801825c
 8014b58:	0801827c 	.word	0x0801827c
 8014b5c:	0801823c 	.word	0x0801823c

08014b60 <_close_r>:
 8014b60:	b538      	push	{r3, r4, r5, lr}
 8014b62:	4d06      	ldr	r5, [pc, #24]	; (8014b7c <_close_r+0x1c>)
 8014b64:	2300      	movs	r3, #0
 8014b66:	4604      	mov	r4, r0
 8014b68:	4608      	mov	r0, r1
 8014b6a:	602b      	str	r3, [r5, #0]
 8014b6c:	f002 fb84 	bl	8017278 <_close>
 8014b70:	1c43      	adds	r3, r0, #1
 8014b72:	d102      	bne.n	8014b7a <_close_r+0x1a>
 8014b74:	682b      	ldr	r3, [r5, #0]
 8014b76:	b103      	cbz	r3, 8014b7a <_close_r+0x1a>
 8014b78:	6023      	str	r3, [r4, #0]
 8014b7a:	bd38      	pop	{r3, r4, r5, pc}
 8014b7c:	20006900 	.word	0x20006900

08014b80 <quorem>:
 8014b80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b84:	6903      	ldr	r3, [r0, #16]
 8014b86:	690c      	ldr	r4, [r1, #16]
 8014b88:	42a3      	cmp	r3, r4
 8014b8a:	4607      	mov	r7, r0
 8014b8c:	f2c0 8081 	blt.w	8014c92 <quorem+0x112>
 8014b90:	3c01      	subs	r4, #1
 8014b92:	f101 0814 	add.w	r8, r1, #20
 8014b96:	f100 0514 	add.w	r5, r0, #20
 8014b9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014b9e:	9301      	str	r3, [sp, #4]
 8014ba0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014ba4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014ba8:	3301      	adds	r3, #1
 8014baa:	429a      	cmp	r2, r3
 8014bac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014bb0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014bb4:	fbb2 f6f3 	udiv	r6, r2, r3
 8014bb8:	d331      	bcc.n	8014c1e <quorem+0x9e>
 8014bba:	f04f 0e00 	mov.w	lr, #0
 8014bbe:	4640      	mov	r0, r8
 8014bc0:	46ac      	mov	ip, r5
 8014bc2:	46f2      	mov	sl, lr
 8014bc4:	f850 2b04 	ldr.w	r2, [r0], #4
 8014bc8:	b293      	uxth	r3, r2
 8014bca:	fb06 e303 	mla	r3, r6, r3, lr
 8014bce:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8014bd2:	b29b      	uxth	r3, r3
 8014bd4:	ebaa 0303 	sub.w	r3, sl, r3
 8014bd8:	0c12      	lsrs	r2, r2, #16
 8014bda:	f8dc a000 	ldr.w	sl, [ip]
 8014bde:	fb06 e202 	mla	r2, r6, r2, lr
 8014be2:	fa13 f38a 	uxtah	r3, r3, sl
 8014be6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014bea:	fa1f fa82 	uxth.w	sl, r2
 8014bee:	f8dc 2000 	ldr.w	r2, [ip]
 8014bf2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8014bf6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014bfa:	b29b      	uxth	r3, r3
 8014bfc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014c00:	4581      	cmp	r9, r0
 8014c02:	f84c 3b04 	str.w	r3, [ip], #4
 8014c06:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8014c0a:	d2db      	bcs.n	8014bc4 <quorem+0x44>
 8014c0c:	f855 300b 	ldr.w	r3, [r5, fp]
 8014c10:	b92b      	cbnz	r3, 8014c1e <quorem+0x9e>
 8014c12:	9b01      	ldr	r3, [sp, #4]
 8014c14:	3b04      	subs	r3, #4
 8014c16:	429d      	cmp	r5, r3
 8014c18:	461a      	mov	r2, r3
 8014c1a:	d32e      	bcc.n	8014c7a <quorem+0xfa>
 8014c1c:	613c      	str	r4, [r7, #16]
 8014c1e:	4638      	mov	r0, r7
 8014c20:	f001 fdb8 	bl	8016794 <__mcmp>
 8014c24:	2800      	cmp	r0, #0
 8014c26:	db24      	blt.n	8014c72 <quorem+0xf2>
 8014c28:	3601      	adds	r6, #1
 8014c2a:	4628      	mov	r0, r5
 8014c2c:	f04f 0c00 	mov.w	ip, #0
 8014c30:	f858 2b04 	ldr.w	r2, [r8], #4
 8014c34:	f8d0 e000 	ldr.w	lr, [r0]
 8014c38:	b293      	uxth	r3, r2
 8014c3a:	ebac 0303 	sub.w	r3, ip, r3
 8014c3e:	0c12      	lsrs	r2, r2, #16
 8014c40:	fa13 f38e 	uxtah	r3, r3, lr
 8014c44:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014c48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014c4c:	b29b      	uxth	r3, r3
 8014c4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014c52:	45c1      	cmp	r9, r8
 8014c54:	f840 3b04 	str.w	r3, [r0], #4
 8014c58:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014c5c:	d2e8      	bcs.n	8014c30 <quorem+0xb0>
 8014c5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014c62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014c66:	b922      	cbnz	r2, 8014c72 <quorem+0xf2>
 8014c68:	3b04      	subs	r3, #4
 8014c6a:	429d      	cmp	r5, r3
 8014c6c:	461a      	mov	r2, r3
 8014c6e:	d30a      	bcc.n	8014c86 <quorem+0x106>
 8014c70:	613c      	str	r4, [r7, #16]
 8014c72:	4630      	mov	r0, r6
 8014c74:	b003      	add	sp, #12
 8014c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c7a:	6812      	ldr	r2, [r2, #0]
 8014c7c:	3b04      	subs	r3, #4
 8014c7e:	2a00      	cmp	r2, #0
 8014c80:	d1cc      	bne.n	8014c1c <quorem+0x9c>
 8014c82:	3c01      	subs	r4, #1
 8014c84:	e7c7      	b.n	8014c16 <quorem+0x96>
 8014c86:	6812      	ldr	r2, [r2, #0]
 8014c88:	3b04      	subs	r3, #4
 8014c8a:	2a00      	cmp	r2, #0
 8014c8c:	d1f0      	bne.n	8014c70 <quorem+0xf0>
 8014c8e:	3c01      	subs	r4, #1
 8014c90:	e7eb      	b.n	8014c6a <quorem+0xea>
 8014c92:	2000      	movs	r0, #0
 8014c94:	e7ee      	b.n	8014c74 <quorem+0xf4>
	...

08014c98 <_dtoa_r>:
 8014c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c9c:	ed2d 8b02 	vpush	{d8}
 8014ca0:	ec57 6b10 	vmov	r6, r7, d0
 8014ca4:	b095      	sub	sp, #84	; 0x54
 8014ca6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014ca8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014cac:	9105      	str	r1, [sp, #20]
 8014cae:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8014cb2:	4604      	mov	r4, r0
 8014cb4:	9209      	str	r2, [sp, #36]	; 0x24
 8014cb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8014cb8:	b975      	cbnz	r5, 8014cd8 <_dtoa_r+0x40>
 8014cba:	2010      	movs	r0, #16
 8014cbc:	f7fd fee0 	bl	8012a80 <malloc>
 8014cc0:	4602      	mov	r2, r0
 8014cc2:	6260      	str	r0, [r4, #36]	; 0x24
 8014cc4:	b920      	cbnz	r0, 8014cd0 <_dtoa_r+0x38>
 8014cc6:	4bb2      	ldr	r3, [pc, #712]	; (8014f90 <_dtoa_r+0x2f8>)
 8014cc8:	21ea      	movs	r1, #234	; 0xea
 8014cca:	48b2      	ldr	r0, [pc, #712]	; (8014f94 <_dtoa_r+0x2fc>)
 8014ccc:	f002 fa3a 	bl	8017144 <__assert_func>
 8014cd0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014cd4:	6005      	str	r5, [r0, #0]
 8014cd6:	60c5      	str	r5, [r0, #12]
 8014cd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014cda:	6819      	ldr	r1, [r3, #0]
 8014cdc:	b151      	cbz	r1, 8014cf4 <_dtoa_r+0x5c>
 8014cde:	685a      	ldr	r2, [r3, #4]
 8014ce0:	604a      	str	r2, [r1, #4]
 8014ce2:	2301      	movs	r3, #1
 8014ce4:	4093      	lsls	r3, r2
 8014ce6:	608b      	str	r3, [r1, #8]
 8014ce8:	4620      	mov	r0, r4
 8014cea:	f001 facb 	bl	8016284 <_Bfree>
 8014cee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014cf0:	2200      	movs	r2, #0
 8014cf2:	601a      	str	r2, [r3, #0]
 8014cf4:	1e3b      	subs	r3, r7, #0
 8014cf6:	bfb9      	ittee	lt
 8014cf8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014cfc:	9303      	strlt	r3, [sp, #12]
 8014cfe:	2300      	movge	r3, #0
 8014d00:	f8c8 3000 	strge.w	r3, [r8]
 8014d04:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8014d08:	4ba3      	ldr	r3, [pc, #652]	; (8014f98 <_dtoa_r+0x300>)
 8014d0a:	bfbc      	itt	lt
 8014d0c:	2201      	movlt	r2, #1
 8014d0e:	f8c8 2000 	strlt.w	r2, [r8]
 8014d12:	ea33 0309 	bics.w	r3, r3, r9
 8014d16:	d11b      	bne.n	8014d50 <_dtoa_r+0xb8>
 8014d18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014d1a:	f242 730f 	movw	r3, #9999	; 0x270f
 8014d1e:	6013      	str	r3, [r2, #0]
 8014d20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014d24:	4333      	orrs	r3, r6
 8014d26:	f000 857a 	beq.w	801581e <_dtoa_r+0xb86>
 8014d2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014d2c:	b963      	cbnz	r3, 8014d48 <_dtoa_r+0xb0>
 8014d2e:	4b9b      	ldr	r3, [pc, #620]	; (8014f9c <_dtoa_r+0x304>)
 8014d30:	e024      	b.n	8014d7c <_dtoa_r+0xe4>
 8014d32:	4b9b      	ldr	r3, [pc, #620]	; (8014fa0 <_dtoa_r+0x308>)
 8014d34:	9300      	str	r3, [sp, #0]
 8014d36:	3308      	adds	r3, #8
 8014d38:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014d3a:	6013      	str	r3, [r2, #0]
 8014d3c:	9800      	ldr	r0, [sp, #0]
 8014d3e:	b015      	add	sp, #84	; 0x54
 8014d40:	ecbd 8b02 	vpop	{d8}
 8014d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d48:	4b94      	ldr	r3, [pc, #592]	; (8014f9c <_dtoa_r+0x304>)
 8014d4a:	9300      	str	r3, [sp, #0]
 8014d4c:	3303      	adds	r3, #3
 8014d4e:	e7f3      	b.n	8014d38 <_dtoa_r+0xa0>
 8014d50:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014d54:	2200      	movs	r2, #0
 8014d56:	ec51 0b17 	vmov	r0, r1, d7
 8014d5a:	2300      	movs	r3, #0
 8014d5c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8014d60:	f7eb fec2 	bl	8000ae8 <__aeabi_dcmpeq>
 8014d64:	4680      	mov	r8, r0
 8014d66:	b158      	cbz	r0, 8014d80 <_dtoa_r+0xe8>
 8014d68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014d6a:	2301      	movs	r3, #1
 8014d6c:	6013      	str	r3, [r2, #0]
 8014d6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	f000 8551 	beq.w	8015818 <_dtoa_r+0xb80>
 8014d76:	488b      	ldr	r0, [pc, #556]	; (8014fa4 <_dtoa_r+0x30c>)
 8014d78:	6018      	str	r0, [r3, #0]
 8014d7a:	1e43      	subs	r3, r0, #1
 8014d7c:	9300      	str	r3, [sp, #0]
 8014d7e:	e7dd      	b.n	8014d3c <_dtoa_r+0xa4>
 8014d80:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8014d84:	aa12      	add	r2, sp, #72	; 0x48
 8014d86:	a913      	add	r1, sp, #76	; 0x4c
 8014d88:	4620      	mov	r0, r4
 8014d8a:	f001 fe23 	bl	80169d4 <__d2b>
 8014d8e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014d92:	4683      	mov	fp, r0
 8014d94:	2d00      	cmp	r5, #0
 8014d96:	d07c      	beq.n	8014e92 <_dtoa_r+0x1fa>
 8014d98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014d9a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8014d9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014da2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8014da6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8014daa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8014dae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014db2:	4b7d      	ldr	r3, [pc, #500]	; (8014fa8 <_dtoa_r+0x310>)
 8014db4:	2200      	movs	r2, #0
 8014db6:	4630      	mov	r0, r6
 8014db8:	4639      	mov	r1, r7
 8014dba:	f7eb fa75 	bl	80002a8 <__aeabi_dsub>
 8014dbe:	a36e      	add	r3, pc, #440	; (adr r3, 8014f78 <_dtoa_r+0x2e0>)
 8014dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dc4:	f7eb fc28 	bl	8000618 <__aeabi_dmul>
 8014dc8:	a36d      	add	r3, pc, #436	; (adr r3, 8014f80 <_dtoa_r+0x2e8>)
 8014dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dce:	f7eb fa6d 	bl	80002ac <__adddf3>
 8014dd2:	4606      	mov	r6, r0
 8014dd4:	4628      	mov	r0, r5
 8014dd6:	460f      	mov	r7, r1
 8014dd8:	f7eb fbb4 	bl	8000544 <__aeabi_i2d>
 8014ddc:	a36a      	add	r3, pc, #424	; (adr r3, 8014f88 <_dtoa_r+0x2f0>)
 8014dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014de2:	f7eb fc19 	bl	8000618 <__aeabi_dmul>
 8014de6:	4602      	mov	r2, r0
 8014de8:	460b      	mov	r3, r1
 8014dea:	4630      	mov	r0, r6
 8014dec:	4639      	mov	r1, r7
 8014dee:	f7eb fa5d 	bl	80002ac <__adddf3>
 8014df2:	4606      	mov	r6, r0
 8014df4:	460f      	mov	r7, r1
 8014df6:	f7eb febf 	bl	8000b78 <__aeabi_d2iz>
 8014dfa:	2200      	movs	r2, #0
 8014dfc:	4682      	mov	sl, r0
 8014dfe:	2300      	movs	r3, #0
 8014e00:	4630      	mov	r0, r6
 8014e02:	4639      	mov	r1, r7
 8014e04:	f7eb fe7a 	bl	8000afc <__aeabi_dcmplt>
 8014e08:	b148      	cbz	r0, 8014e1e <_dtoa_r+0x186>
 8014e0a:	4650      	mov	r0, sl
 8014e0c:	f7eb fb9a 	bl	8000544 <__aeabi_i2d>
 8014e10:	4632      	mov	r2, r6
 8014e12:	463b      	mov	r3, r7
 8014e14:	f7eb fe68 	bl	8000ae8 <__aeabi_dcmpeq>
 8014e18:	b908      	cbnz	r0, 8014e1e <_dtoa_r+0x186>
 8014e1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014e1e:	f1ba 0f16 	cmp.w	sl, #22
 8014e22:	d854      	bhi.n	8014ece <_dtoa_r+0x236>
 8014e24:	4b61      	ldr	r3, [pc, #388]	; (8014fac <_dtoa_r+0x314>)
 8014e26:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014e32:	f7eb fe63 	bl	8000afc <__aeabi_dcmplt>
 8014e36:	2800      	cmp	r0, #0
 8014e38:	d04b      	beq.n	8014ed2 <_dtoa_r+0x23a>
 8014e3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014e3e:	2300      	movs	r3, #0
 8014e40:	930e      	str	r3, [sp, #56]	; 0x38
 8014e42:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014e44:	1b5d      	subs	r5, r3, r5
 8014e46:	1e6b      	subs	r3, r5, #1
 8014e48:	9304      	str	r3, [sp, #16]
 8014e4a:	bf43      	ittte	mi
 8014e4c:	2300      	movmi	r3, #0
 8014e4e:	f1c5 0801 	rsbmi	r8, r5, #1
 8014e52:	9304      	strmi	r3, [sp, #16]
 8014e54:	f04f 0800 	movpl.w	r8, #0
 8014e58:	f1ba 0f00 	cmp.w	sl, #0
 8014e5c:	db3b      	blt.n	8014ed6 <_dtoa_r+0x23e>
 8014e5e:	9b04      	ldr	r3, [sp, #16]
 8014e60:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8014e64:	4453      	add	r3, sl
 8014e66:	9304      	str	r3, [sp, #16]
 8014e68:	2300      	movs	r3, #0
 8014e6a:	9306      	str	r3, [sp, #24]
 8014e6c:	9b05      	ldr	r3, [sp, #20]
 8014e6e:	2b09      	cmp	r3, #9
 8014e70:	d869      	bhi.n	8014f46 <_dtoa_r+0x2ae>
 8014e72:	2b05      	cmp	r3, #5
 8014e74:	bfc4      	itt	gt
 8014e76:	3b04      	subgt	r3, #4
 8014e78:	9305      	strgt	r3, [sp, #20]
 8014e7a:	9b05      	ldr	r3, [sp, #20]
 8014e7c:	f1a3 0302 	sub.w	r3, r3, #2
 8014e80:	bfcc      	ite	gt
 8014e82:	2500      	movgt	r5, #0
 8014e84:	2501      	movle	r5, #1
 8014e86:	2b03      	cmp	r3, #3
 8014e88:	d869      	bhi.n	8014f5e <_dtoa_r+0x2c6>
 8014e8a:	e8df f003 	tbb	[pc, r3]
 8014e8e:	4e2c      	.short	0x4e2c
 8014e90:	5a4c      	.short	0x5a4c
 8014e92:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8014e96:	441d      	add	r5, r3
 8014e98:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8014e9c:	2b20      	cmp	r3, #32
 8014e9e:	bfc1      	itttt	gt
 8014ea0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014ea4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8014ea8:	fa09 f303 	lslgt.w	r3, r9, r3
 8014eac:	fa26 f000 	lsrgt.w	r0, r6, r0
 8014eb0:	bfda      	itte	le
 8014eb2:	f1c3 0320 	rsble	r3, r3, #32
 8014eb6:	fa06 f003 	lslle.w	r0, r6, r3
 8014eba:	4318      	orrgt	r0, r3
 8014ebc:	f7eb fb32 	bl	8000524 <__aeabi_ui2d>
 8014ec0:	2301      	movs	r3, #1
 8014ec2:	4606      	mov	r6, r0
 8014ec4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8014ec8:	3d01      	subs	r5, #1
 8014eca:	9310      	str	r3, [sp, #64]	; 0x40
 8014ecc:	e771      	b.n	8014db2 <_dtoa_r+0x11a>
 8014ece:	2301      	movs	r3, #1
 8014ed0:	e7b6      	b.n	8014e40 <_dtoa_r+0x1a8>
 8014ed2:	900e      	str	r0, [sp, #56]	; 0x38
 8014ed4:	e7b5      	b.n	8014e42 <_dtoa_r+0x1aa>
 8014ed6:	f1ca 0300 	rsb	r3, sl, #0
 8014eda:	9306      	str	r3, [sp, #24]
 8014edc:	2300      	movs	r3, #0
 8014ede:	eba8 080a 	sub.w	r8, r8, sl
 8014ee2:	930d      	str	r3, [sp, #52]	; 0x34
 8014ee4:	e7c2      	b.n	8014e6c <_dtoa_r+0x1d4>
 8014ee6:	2300      	movs	r3, #0
 8014ee8:	9308      	str	r3, [sp, #32]
 8014eea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	dc39      	bgt.n	8014f64 <_dtoa_r+0x2cc>
 8014ef0:	f04f 0901 	mov.w	r9, #1
 8014ef4:	f8cd 9004 	str.w	r9, [sp, #4]
 8014ef8:	464b      	mov	r3, r9
 8014efa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8014efe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8014f00:	2200      	movs	r2, #0
 8014f02:	6042      	str	r2, [r0, #4]
 8014f04:	2204      	movs	r2, #4
 8014f06:	f102 0614 	add.w	r6, r2, #20
 8014f0a:	429e      	cmp	r6, r3
 8014f0c:	6841      	ldr	r1, [r0, #4]
 8014f0e:	d92f      	bls.n	8014f70 <_dtoa_r+0x2d8>
 8014f10:	4620      	mov	r0, r4
 8014f12:	f001 f977 	bl	8016204 <_Balloc>
 8014f16:	9000      	str	r0, [sp, #0]
 8014f18:	2800      	cmp	r0, #0
 8014f1a:	d14b      	bne.n	8014fb4 <_dtoa_r+0x31c>
 8014f1c:	4b24      	ldr	r3, [pc, #144]	; (8014fb0 <_dtoa_r+0x318>)
 8014f1e:	4602      	mov	r2, r0
 8014f20:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8014f24:	e6d1      	b.n	8014cca <_dtoa_r+0x32>
 8014f26:	2301      	movs	r3, #1
 8014f28:	e7de      	b.n	8014ee8 <_dtoa_r+0x250>
 8014f2a:	2300      	movs	r3, #0
 8014f2c:	9308      	str	r3, [sp, #32]
 8014f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f30:	eb0a 0903 	add.w	r9, sl, r3
 8014f34:	f109 0301 	add.w	r3, r9, #1
 8014f38:	2b01      	cmp	r3, #1
 8014f3a:	9301      	str	r3, [sp, #4]
 8014f3c:	bfb8      	it	lt
 8014f3e:	2301      	movlt	r3, #1
 8014f40:	e7dd      	b.n	8014efe <_dtoa_r+0x266>
 8014f42:	2301      	movs	r3, #1
 8014f44:	e7f2      	b.n	8014f2c <_dtoa_r+0x294>
 8014f46:	2501      	movs	r5, #1
 8014f48:	2300      	movs	r3, #0
 8014f4a:	9305      	str	r3, [sp, #20]
 8014f4c:	9508      	str	r5, [sp, #32]
 8014f4e:	f04f 39ff 	mov.w	r9, #4294967295
 8014f52:	2200      	movs	r2, #0
 8014f54:	f8cd 9004 	str.w	r9, [sp, #4]
 8014f58:	2312      	movs	r3, #18
 8014f5a:	9209      	str	r2, [sp, #36]	; 0x24
 8014f5c:	e7cf      	b.n	8014efe <_dtoa_r+0x266>
 8014f5e:	2301      	movs	r3, #1
 8014f60:	9308      	str	r3, [sp, #32]
 8014f62:	e7f4      	b.n	8014f4e <_dtoa_r+0x2b6>
 8014f64:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8014f68:	f8cd 9004 	str.w	r9, [sp, #4]
 8014f6c:	464b      	mov	r3, r9
 8014f6e:	e7c6      	b.n	8014efe <_dtoa_r+0x266>
 8014f70:	3101      	adds	r1, #1
 8014f72:	6041      	str	r1, [r0, #4]
 8014f74:	0052      	lsls	r2, r2, #1
 8014f76:	e7c6      	b.n	8014f06 <_dtoa_r+0x26e>
 8014f78:	636f4361 	.word	0x636f4361
 8014f7c:	3fd287a7 	.word	0x3fd287a7
 8014f80:	8b60c8b3 	.word	0x8b60c8b3
 8014f84:	3fc68a28 	.word	0x3fc68a28
 8014f88:	509f79fb 	.word	0x509f79fb
 8014f8c:	3fd34413 	.word	0x3fd34413
 8014f90:	0801833d 	.word	0x0801833d
 8014f94:	08018354 	.word	0x08018354
 8014f98:	7ff00000 	.word	0x7ff00000
 8014f9c:	08018339 	.word	0x08018339
 8014fa0:	08018330 	.word	0x08018330
 8014fa4:	080182b1 	.word	0x080182b1
 8014fa8:	3ff80000 	.word	0x3ff80000
 8014fac:	080184d0 	.word	0x080184d0
 8014fb0:	080183b3 	.word	0x080183b3
 8014fb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014fb6:	9a00      	ldr	r2, [sp, #0]
 8014fb8:	601a      	str	r2, [r3, #0]
 8014fba:	9b01      	ldr	r3, [sp, #4]
 8014fbc:	2b0e      	cmp	r3, #14
 8014fbe:	f200 80ad 	bhi.w	801511c <_dtoa_r+0x484>
 8014fc2:	2d00      	cmp	r5, #0
 8014fc4:	f000 80aa 	beq.w	801511c <_dtoa_r+0x484>
 8014fc8:	f1ba 0f00 	cmp.w	sl, #0
 8014fcc:	dd36      	ble.n	801503c <_dtoa_r+0x3a4>
 8014fce:	4ac3      	ldr	r2, [pc, #780]	; (80152dc <_dtoa_r+0x644>)
 8014fd0:	f00a 030f 	and.w	r3, sl, #15
 8014fd4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014fd8:	ed93 7b00 	vldr	d7, [r3]
 8014fdc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8014fe0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8014fe4:	eeb0 8a47 	vmov.f32	s16, s14
 8014fe8:	eef0 8a67 	vmov.f32	s17, s15
 8014fec:	d016      	beq.n	801501c <_dtoa_r+0x384>
 8014fee:	4bbc      	ldr	r3, [pc, #752]	; (80152e0 <_dtoa_r+0x648>)
 8014ff0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014ff4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014ff8:	f7eb fc38 	bl	800086c <__aeabi_ddiv>
 8014ffc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015000:	f007 070f 	and.w	r7, r7, #15
 8015004:	2503      	movs	r5, #3
 8015006:	4eb6      	ldr	r6, [pc, #728]	; (80152e0 <_dtoa_r+0x648>)
 8015008:	b957      	cbnz	r7, 8015020 <_dtoa_r+0x388>
 801500a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801500e:	ec53 2b18 	vmov	r2, r3, d8
 8015012:	f7eb fc2b 	bl	800086c <__aeabi_ddiv>
 8015016:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801501a:	e029      	b.n	8015070 <_dtoa_r+0x3d8>
 801501c:	2502      	movs	r5, #2
 801501e:	e7f2      	b.n	8015006 <_dtoa_r+0x36e>
 8015020:	07f9      	lsls	r1, r7, #31
 8015022:	d508      	bpl.n	8015036 <_dtoa_r+0x39e>
 8015024:	ec51 0b18 	vmov	r0, r1, d8
 8015028:	e9d6 2300 	ldrd	r2, r3, [r6]
 801502c:	f7eb faf4 	bl	8000618 <__aeabi_dmul>
 8015030:	ec41 0b18 	vmov	d8, r0, r1
 8015034:	3501      	adds	r5, #1
 8015036:	107f      	asrs	r7, r7, #1
 8015038:	3608      	adds	r6, #8
 801503a:	e7e5      	b.n	8015008 <_dtoa_r+0x370>
 801503c:	f000 80a6 	beq.w	801518c <_dtoa_r+0x4f4>
 8015040:	f1ca 0600 	rsb	r6, sl, #0
 8015044:	4ba5      	ldr	r3, [pc, #660]	; (80152dc <_dtoa_r+0x644>)
 8015046:	4fa6      	ldr	r7, [pc, #664]	; (80152e0 <_dtoa_r+0x648>)
 8015048:	f006 020f 	and.w	r2, r6, #15
 801504c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015054:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015058:	f7eb fade 	bl	8000618 <__aeabi_dmul>
 801505c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015060:	1136      	asrs	r6, r6, #4
 8015062:	2300      	movs	r3, #0
 8015064:	2502      	movs	r5, #2
 8015066:	2e00      	cmp	r6, #0
 8015068:	f040 8085 	bne.w	8015176 <_dtoa_r+0x4de>
 801506c:	2b00      	cmp	r3, #0
 801506e:	d1d2      	bne.n	8015016 <_dtoa_r+0x37e>
 8015070:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015072:	2b00      	cmp	r3, #0
 8015074:	f000 808c 	beq.w	8015190 <_dtoa_r+0x4f8>
 8015078:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801507c:	4b99      	ldr	r3, [pc, #612]	; (80152e4 <_dtoa_r+0x64c>)
 801507e:	2200      	movs	r2, #0
 8015080:	4630      	mov	r0, r6
 8015082:	4639      	mov	r1, r7
 8015084:	f7eb fd3a 	bl	8000afc <__aeabi_dcmplt>
 8015088:	2800      	cmp	r0, #0
 801508a:	f000 8081 	beq.w	8015190 <_dtoa_r+0x4f8>
 801508e:	9b01      	ldr	r3, [sp, #4]
 8015090:	2b00      	cmp	r3, #0
 8015092:	d07d      	beq.n	8015190 <_dtoa_r+0x4f8>
 8015094:	f1b9 0f00 	cmp.w	r9, #0
 8015098:	dd3c      	ble.n	8015114 <_dtoa_r+0x47c>
 801509a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801509e:	9307      	str	r3, [sp, #28]
 80150a0:	2200      	movs	r2, #0
 80150a2:	4b91      	ldr	r3, [pc, #580]	; (80152e8 <_dtoa_r+0x650>)
 80150a4:	4630      	mov	r0, r6
 80150a6:	4639      	mov	r1, r7
 80150a8:	f7eb fab6 	bl	8000618 <__aeabi_dmul>
 80150ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80150b0:	3501      	adds	r5, #1
 80150b2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80150b6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80150ba:	4628      	mov	r0, r5
 80150bc:	f7eb fa42 	bl	8000544 <__aeabi_i2d>
 80150c0:	4632      	mov	r2, r6
 80150c2:	463b      	mov	r3, r7
 80150c4:	f7eb faa8 	bl	8000618 <__aeabi_dmul>
 80150c8:	4b88      	ldr	r3, [pc, #544]	; (80152ec <_dtoa_r+0x654>)
 80150ca:	2200      	movs	r2, #0
 80150cc:	f7eb f8ee 	bl	80002ac <__adddf3>
 80150d0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80150d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80150d8:	9303      	str	r3, [sp, #12]
 80150da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80150dc:	2b00      	cmp	r3, #0
 80150de:	d15c      	bne.n	801519a <_dtoa_r+0x502>
 80150e0:	4b83      	ldr	r3, [pc, #524]	; (80152f0 <_dtoa_r+0x658>)
 80150e2:	2200      	movs	r2, #0
 80150e4:	4630      	mov	r0, r6
 80150e6:	4639      	mov	r1, r7
 80150e8:	f7eb f8de 	bl	80002a8 <__aeabi_dsub>
 80150ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80150f0:	4606      	mov	r6, r0
 80150f2:	460f      	mov	r7, r1
 80150f4:	f7eb fd20 	bl	8000b38 <__aeabi_dcmpgt>
 80150f8:	2800      	cmp	r0, #0
 80150fa:	f040 8296 	bne.w	801562a <_dtoa_r+0x992>
 80150fe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8015102:	4630      	mov	r0, r6
 8015104:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015108:	4639      	mov	r1, r7
 801510a:	f7eb fcf7 	bl	8000afc <__aeabi_dcmplt>
 801510e:	2800      	cmp	r0, #0
 8015110:	f040 8288 	bne.w	8015624 <_dtoa_r+0x98c>
 8015114:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8015118:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801511c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801511e:	2b00      	cmp	r3, #0
 8015120:	f2c0 8158 	blt.w	80153d4 <_dtoa_r+0x73c>
 8015124:	f1ba 0f0e 	cmp.w	sl, #14
 8015128:	f300 8154 	bgt.w	80153d4 <_dtoa_r+0x73c>
 801512c:	4b6b      	ldr	r3, [pc, #428]	; (80152dc <_dtoa_r+0x644>)
 801512e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8015132:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015138:	2b00      	cmp	r3, #0
 801513a:	f280 80e3 	bge.w	8015304 <_dtoa_r+0x66c>
 801513e:	9b01      	ldr	r3, [sp, #4]
 8015140:	2b00      	cmp	r3, #0
 8015142:	f300 80df 	bgt.w	8015304 <_dtoa_r+0x66c>
 8015146:	f040 826d 	bne.w	8015624 <_dtoa_r+0x98c>
 801514a:	4b69      	ldr	r3, [pc, #420]	; (80152f0 <_dtoa_r+0x658>)
 801514c:	2200      	movs	r2, #0
 801514e:	4640      	mov	r0, r8
 8015150:	4649      	mov	r1, r9
 8015152:	f7eb fa61 	bl	8000618 <__aeabi_dmul>
 8015156:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801515a:	f7eb fce3 	bl	8000b24 <__aeabi_dcmpge>
 801515e:	9e01      	ldr	r6, [sp, #4]
 8015160:	4637      	mov	r7, r6
 8015162:	2800      	cmp	r0, #0
 8015164:	f040 8243 	bne.w	80155ee <_dtoa_r+0x956>
 8015168:	9d00      	ldr	r5, [sp, #0]
 801516a:	2331      	movs	r3, #49	; 0x31
 801516c:	f805 3b01 	strb.w	r3, [r5], #1
 8015170:	f10a 0a01 	add.w	sl, sl, #1
 8015174:	e23f      	b.n	80155f6 <_dtoa_r+0x95e>
 8015176:	07f2      	lsls	r2, r6, #31
 8015178:	d505      	bpl.n	8015186 <_dtoa_r+0x4ee>
 801517a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801517e:	f7eb fa4b 	bl	8000618 <__aeabi_dmul>
 8015182:	3501      	adds	r5, #1
 8015184:	2301      	movs	r3, #1
 8015186:	1076      	asrs	r6, r6, #1
 8015188:	3708      	adds	r7, #8
 801518a:	e76c      	b.n	8015066 <_dtoa_r+0x3ce>
 801518c:	2502      	movs	r5, #2
 801518e:	e76f      	b.n	8015070 <_dtoa_r+0x3d8>
 8015190:	9b01      	ldr	r3, [sp, #4]
 8015192:	f8cd a01c 	str.w	sl, [sp, #28]
 8015196:	930c      	str	r3, [sp, #48]	; 0x30
 8015198:	e78d      	b.n	80150b6 <_dtoa_r+0x41e>
 801519a:	9900      	ldr	r1, [sp, #0]
 801519c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801519e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80151a0:	4b4e      	ldr	r3, [pc, #312]	; (80152dc <_dtoa_r+0x644>)
 80151a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80151a6:	4401      	add	r1, r0
 80151a8:	9102      	str	r1, [sp, #8]
 80151aa:	9908      	ldr	r1, [sp, #32]
 80151ac:	eeb0 8a47 	vmov.f32	s16, s14
 80151b0:	eef0 8a67 	vmov.f32	s17, s15
 80151b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80151b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80151bc:	2900      	cmp	r1, #0
 80151be:	d045      	beq.n	801524c <_dtoa_r+0x5b4>
 80151c0:	494c      	ldr	r1, [pc, #304]	; (80152f4 <_dtoa_r+0x65c>)
 80151c2:	2000      	movs	r0, #0
 80151c4:	f7eb fb52 	bl	800086c <__aeabi_ddiv>
 80151c8:	ec53 2b18 	vmov	r2, r3, d8
 80151cc:	f7eb f86c 	bl	80002a8 <__aeabi_dsub>
 80151d0:	9d00      	ldr	r5, [sp, #0]
 80151d2:	ec41 0b18 	vmov	d8, r0, r1
 80151d6:	4639      	mov	r1, r7
 80151d8:	4630      	mov	r0, r6
 80151da:	f7eb fccd 	bl	8000b78 <__aeabi_d2iz>
 80151de:	900c      	str	r0, [sp, #48]	; 0x30
 80151e0:	f7eb f9b0 	bl	8000544 <__aeabi_i2d>
 80151e4:	4602      	mov	r2, r0
 80151e6:	460b      	mov	r3, r1
 80151e8:	4630      	mov	r0, r6
 80151ea:	4639      	mov	r1, r7
 80151ec:	f7eb f85c 	bl	80002a8 <__aeabi_dsub>
 80151f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80151f2:	3330      	adds	r3, #48	; 0x30
 80151f4:	f805 3b01 	strb.w	r3, [r5], #1
 80151f8:	ec53 2b18 	vmov	r2, r3, d8
 80151fc:	4606      	mov	r6, r0
 80151fe:	460f      	mov	r7, r1
 8015200:	f7eb fc7c 	bl	8000afc <__aeabi_dcmplt>
 8015204:	2800      	cmp	r0, #0
 8015206:	d165      	bne.n	80152d4 <_dtoa_r+0x63c>
 8015208:	4632      	mov	r2, r6
 801520a:	463b      	mov	r3, r7
 801520c:	4935      	ldr	r1, [pc, #212]	; (80152e4 <_dtoa_r+0x64c>)
 801520e:	2000      	movs	r0, #0
 8015210:	f7eb f84a 	bl	80002a8 <__aeabi_dsub>
 8015214:	ec53 2b18 	vmov	r2, r3, d8
 8015218:	f7eb fc70 	bl	8000afc <__aeabi_dcmplt>
 801521c:	2800      	cmp	r0, #0
 801521e:	f040 80b9 	bne.w	8015394 <_dtoa_r+0x6fc>
 8015222:	9b02      	ldr	r3, [sp, #8]
 8015224:	429d      	cmp	r5, r3
 8015226:	f43f af75 	beq.w	8015114 <_dtoa_r+0x47c>
 801522a:	4b2f      	ldr	r3, [pc, #188]	; (80152e8 <_dtoa_r+0x650>)
 801522c:	ec51 0b18 	vmov	r0, r1, d8
 8015230:	2200      	movs	r2, #0
 8015232:	f7eb f9f1 	bl	8000618 <__aeabi_dmul>
 8015236:	4b2c      	ldr	r3, [pc, #176]	; (80152e8 <_dtoa_r+0x650>)
 8015238:	ec41 0b18 	vmov	d8, r0, r1
 801523c:	2200      	movs	r2, #0
 801523e:	4630      	mov	r0, r6
 8015240:	4639      	mov	r1, r7
 8015242:	f7eb f9e9 	bl	8000618 <__aeabi_dmul>
 8015246:	4606      	mov	r6, r0
 8015248:	460f      	mov	r7, r1
 801524a:	e7c4      	b.n	80151d6 <_dtoa_r+0x53e>
 801524c:	ec51 0b17 	vmov	r0, r1, d7
 8015250:	f7eb f9e2 	bl	8000618 <__aeabi_dmul>
 8015254:	9b02      	ldr	r3, [sp, #8]
 8015256:	9d00      	ldr	r5, [sp, #0]
 8015258:	930c      	str	r3, [sp, #48]	; 0x30
 801525a:	ec41 0b18 	vmov	d8, r0, r1
 801525e:	4639      	mov	r1, r7
 8015260:	4630      	mov	r0, r6
 8015262:	f7eb fc89 	bl	8000b78 <__aeabi_d2iz>
 8015266:	9011      	str	r0, [sp, #68]	; 0x44
 8015268:	f7eb f96c 	bl	8000544 <__aeabi_i2d>
 801526c:	4602      	mov	r2, r0
 801526e:	460b      	mov	r3, r1
 8015270:	4630      	mov	r0, r6
 8015272:	4639      	mov	r1, r7
 8015274:	f7eb f818 	bl	80002a8 <__aeabi_dsub>
 8015278:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801527a:	3330      	adds	r3, #48	; 0x30
 801527c:	f805 3b01 	strb.w	r3, [r5], #1
 8015280:	9b02      	ldr	r3, [sp, #8]
 8015282:	429d      	cmp	r5, r3
 8015284:	4606      	mov	r6, r0
 8015286:	460f      	mov	r7, r1
 8015288:	f04f 0200 	mov.w	r2, #0
 801528c:	d134      	bne.n	80152f8 <_dtoa_r+0x660>
 801528e:	4b19      	ldr	r3, [pc, #100]	; (80152f4 <_dtoa_r+0x65c>)
 8015290:	ec51 0b18 	vmov	r0, r1, d8
 8015294:	f7eb f80a 	bl	80002ac <__adddf3>
 8015298:	4602      	mov	r2, r0
 801529a:	460b      	mov	r3, r1
 801529c:	4630      	mov	r0, r6
 801529e:	4639      	mov	r1, r7
 80152a0:	f7eb fc4a 	bl	8000b38 <__aeabi_dcmpgt>
 80152a4:	2800      	cmp	r0, #0
 80152a6:	d175      	bne.n	8015394 <_dtoa_r+0x6fc>
 80152a8:	ec53 2b18 	vmov	r2, r3, d8
 80152ac:	4911      	ldr	r1, [pc, #68]	; (80152f4 <_dtoa_r+0x65c>)
 80152ae:	2000      	movs	r0, #0
 80152b0:	f7ea fffa 	bl	80002a8 <__aeabi_dsub>
 80152b4:	4602      	mov	r2, r0
 80152b6:	460b      	mov	r3, r1
 80152b8:	4630      	mov	r0, r6
 80152ba:	4639      	mov	r1, r7
 80152bc:	f7eb fc1e 	bl	8000afc <__aeabi_dcmplt>
 80152c0:	2800      	cmp	r0, #0
 80152c2:	f43f af27 	beq.w	8015114 <_dtoa_r+0x47c>
 80152c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80152c8:	1e6b      	subs	r3, r5, #1
 80152ca:	930c      	str	r3, [sp, #48]	; 0x30
 80152cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80152d0:	2b30      	cmp	r3, #48	; 0x30
 80152d2:	d0f8      	beq.n	80152c6 <_dtoa_r+0x62e>
 80152d4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80152d8:	e04a      	b.n	8015370 <_dtoa_r+0x6d8>
 80152da:	bf00      	nop
 80152dc:	080184d0 	.word	0x080184d0
 80152e0:	080184a8 	.word	0x080184a8
 80152e4:	3ff00000 	.word	0x3ff00000
 80152e8:	40240000 	.word	0x40240000
 80152ec:	401c0000 	.word	0x401c0000
 80152f0:	40140000 	.word	0x40140000
 80152f4:	3fe00000 	.word	0x3fe00000
 80152f8:	4baf      	ldr	r3, [pc, #700]	; (80155b8 <_dtoa_r+0x920>)
 80152fa:	f7eb f98d 	bl	8000618 <__aeabi_dmul>
 80152fe:	4606      	mov	r6, r0
 8015300:	460f      	mov	r7, r1
 8015302:	e7ac      	b.n	801525e <_dtoa_r+0x5c6>
 8015304:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8015308:	9d00      	ldr	r5, [sp, #0]
 801530a:	4642      	mov	r2, r8
 801530c:	464b      	mov	r3, r9
 801530e:	4630      	mov	r0, r6
 8015310:	4639      	mov	r1, r7
 8015312:	f7eb faab 	bl	800086c <__aeabi_ddiv>
 8015316:	f7eb fc2f 	bl	8000b78 <__aeabi_d2iz>
 801531a:	9002      	str	r0, [sp, #8]
 801531c:	f7eb f912 	bl	8000544 <__aeabi_i2d>
 8015320:	4642      	mov	r2, r8
 8015322:	464b      	mov	r3, r9
 8015324:	f7eb f978 	bl	8000618 <__aeabi_dmul>
 8015328:	4602      	mov	r2, r0
 801532a:	460b      	mov	r3, r1
 801532c:	4630      	mov	r0, r6
 801532e:	4639      	mov	r1, r7
 8015330:	f7ea ffba 	bl	80002a8 <__aeabi_dsub>
 8015334:	9e02      	ldr	r6, [sp, #8]
 8015336:	9f01      	ldr	r7, [sp, #4]
 8015338:	3630      	adds	r6, #48	; 0x30
 801533a:	f805 6b01 	strb.w	r6, [r5], #1
 801533e:	9e00      	ldr	r6, [sp, #0]
 8015340:	1bae      	subs	r6, r5, r6
 8015342:	42b7      	cmp	r7, r6
 8015344:	4602      	mov	r2, r0
 8015346:	460b      	mov	r3, r1
 8015348:	d137      	bne.n	80153ba <_dtoa_r+0x722>
 801534a:	f7ea ffaf 	bl	80002ac <__adddf3>
 801534e:	4642      	mov	r2, r8
 8015350:	464b      	mov	r3, r9
 8015352:	4606      	mov	r6, r0
 8015354:	460f      	mov	r7, r1
 8015356:	f7eb fbef 	bl	8000b38 <__aeabi_dcmpgt>
 801535a:	b9c8      	cbnz	r0, 8015390 <_dtoa_r+0x6f8>
 801535c:	4642      	mov	r2, r8
 801535e:	464b      	mov	r3, r9
 8015360:	4630      	mov	r0, r6
 8015362:	4639      	mov	r1, r7
 8015364:	f7eb fbc0 	bl	8000ae8 <__aeabi_dcmpeq>
 8015368:	b110      	cbz	r0, 8015370 <_dtoa_r+0x6d8>
 801536a:	9b02      	ldr	r3, [sp, #8]
 801536c:	07d9      	lsls	r1, r3, #31
 801536e:	d40f      	bmi.n	8015390 <_dtoa_r+0x6f8>
 8015370:	4620      	mov	r0, r4
 8015372:	4659      	mov	r1, fp
 8015374:	f000 ff86 	bl	8016284 <_Bfree>
 8015378:	2300      	movs	r3, #0
 801537a:	702b      	strb	r3, [r5, #0]
 801537c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801537e:	f10a 0001 	add.w	r0, sl, #1
 8015382:	6018      	str	r0, [r3, #0]
 8015384:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015386:	2b00      	cmp	r3, #0
 8015388:	f43f acd8 	beq.w	8014d3c <_dtoa_r+0xa4>
 801538c:	601d      	str	r5, [r3, #0]
 801538e:	e4d5      	b.n	8014d3c <_dtoa_r+0xa4>
 8015390:	f8cd a01c 	str.w	sl, [sp, #28]
 8015394:	462b      	mov	r3, r5
 8015396:	461d      	mov	r5, r3
 8015398:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801539c:	2a39      	cmp	r2, #57	; 0x39
 801539e:	d108      	bne.n	80153b2 <_dtoa_r+0x71a>
 80153a0:	9a00      	ldr	r2, [sp, #0]
 80153a2:	429a      	cmp	r2, r3
 80153a4:	d1f7      	bne.n	8015396 <_dtoa_r+0x6fe>
 80153a6:	9a07      	ldr	r2, [sp, #28]
 80153a8:	9900      	ldr	r1, [sp, #0]
 80153aa:	3201      	adds	r2, #1
 80153ac:	9207      	str	r2, [sp, #28]
 80153ae:	2230      	movs	r2, #48	; 0x30
 80153b0:	700a      	strb	r2, [r1, #0]
 80153b2:	781a      	ldrb	r2, [r3, #0]
 80153b4:	3201      	adds	r2, #1
 80153b6:	701a      	strb	r2, [r3, #0]
 80153b8:	e78c      	b.n	80152d4 <_dtoa_r+0x63c>
 80153ba:	4b7f      	ldr	r3, [pc, #508]	; (80155b8 <_dtoa_r+0x920>)
 80153bc:	2200      	movs	r2, #0
 80153be:	f7eb f92b 	bl	8000618 <__aeabi_dmul>
 80153c2:	2200      	movs	r2, #0
 80153c4:	2300      	movs	r3, #0
 80153c6:	4606      	mov	r6, r0
 80153c8:	460f      	mov	r7, r1
 80153ca:	f7eb fb8d 	bl	8000ae8 <__aeabi_dcmpeq>
 80153ce:	2800      	cmp	r0, #0
 80153d0:	d09b      	beq.n	801530a <_dtoa_r+0x672>
 80153d2:	e7cd      	b.n	8015370 <_dtoa_r+0x6d8>
 80153d4:	9a08      	ldr	r2, [sp, #32]
 80153d6:	2a00      	cmp	r2, #0
 80153d8:	f000 80c4 	beq.w	8015564 <_dtoa_r+0x8cc>
 80153dc:	9a05      	ldr	r2, [sp, #20]
 80153de:	2a01      	cmp	r2, #1
 80153e0:	f300 80a8 	bgt.w	8015534 <_dtoa_r+0x89c>
 80153e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80153e6:	2a00      	cmp	r2, #0
 80153e8:	f000 80a0 	beq.w	801552c <_dtoa_r+0x894>
 80153ec:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80153f0:	9e06      	ldr	r6, [sp, #24]
 80153f2:	4645      	mov	r5, r8
 80153f4:	9a04      	ldr	r2, [sp, #16]
 80153f6:	2101      	movs	r1, #1
 80153f8:	441a      	add	r2, r3
 80153fa:	4620      	mov	r0, r4
 80153fc:	4498      	add	r8, r3
 80153fe:	9204      	str	r2, [sp, #16]
 8015400:	f001 f846 	bl	8016490 <__i2b>
 8015404:	4607      	mov	r7, r0
 8015406:	2d00      	cmp	r5, #0
 8015408:	dd0b      	ble.n	8015422 <_dtoa_r+0x78a>
 801540a:	9b04      	ldr	r3, [sp, #16]
 801540c:	2b00      	cmp	r3, #0
 801540e:	dd08      	ble.n	8015422 <_dtoa_r+0x78a>
 8015410:	42ab      	cmp	r3, r5
 8015412:	9a04      	ldr	r2, [sp, #16]
 8015414:	bfa8      	it	ge
 8015416:	462b      	movge	r3, r5
 8015418:	eba8 0803 	sub.w	r8, r8, r3
 801541c:	1aed      	subs	r5, r5, r3
 801541e:	1ad3      	subs	r3, r2, r3
 8015420:	9304      	str	r3, [sp, #16]
 8015422:	9b06      	ldr	r3, [sp, #24]
 8015424:	b1fb      	cbz	r3, 8015466 <_dtoa_r+0x7ce>
 8015426:	9b08      	ldr	r3, [sp, #32]
 8015428:	2b00      	cmp	r3, #0
 801542a:	f000 809f 	beq.w	801556c <_dtoa_r+0x8d4>
 801542e:	2e00      	cmp	r6, #0
 8015430:	dd11      	ble.n	8015456 <_dtoa_r+0x7be>
 8015432:	4639      	mov	r1, r7
 8015434:	4632      	mov	r2, r6
 8015436:	4620      	mov	r0, r4
 8015438:	f001 f8e6 	bl	8016608 <__pow5mult>
 801543c:	465a      	mov	r2, fp
 801543e:	4601      	mov	r1, r0
 8015440:	4607      	mov	r7, r0
 8015442:	4620      	mov	r0, r4
 8015444:	f001 f83a 	bl	80164bc <__multiply>
 8015448:	4659      	mov	r1, fp
 801544a:	9007      	str	r0, [sp, #28]
 801544c:	4620      	mov	r0, r4
 801544e:	f000 ff19 	bl	8016284 <_Bfree>
 8015452:	9b07      	ldr	r3, [sp, #28]
 8015454:	469b      	mov	fp, r3
 8015456:	9b06      	ldr	r3, [sp, #24]
 8015458:	1b9a      	subs	r2, r3, r6
 801545a:	d004      	beq.n	8015466 <_dtoa_r+0x7ce>
 801545c:	4659      	mov	r1, fp
 801545e:	4620      	mov	r0, r4
 8015460:	f001 f8d2 	bl	8016608 <__pow5mult>
 8015464:	4683      	mov	fp, r0
 8015466:	2101      	movs	r1, #1
 8015468:	4620      	mov	r0, r4
 801546a:	f001 f811 	bl	8016490 <__i2b>
 801546e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015470:	2b00      	cmp	r3, #0
 8015472:	4606      	mov	r6, r0
 8015474:	dd7c      	ble.n	8015570 <_dtoa_r+0x8d8>
 8015476:	461a      	mov	r2, r3
 8015478:	4601      	mov	r1, r0
 801547a:	4620      	mov	r0, r4
 801547c:	f001 f8c4 	bl	8016608 <__pow5mult>
 8015480:	9b05      	ldr	r3, [sp, #20]
 8015482:	2b01      	cmp	r3, #1
 8015484:	4606      	mov	r6, r0
 8015486:	dd76      	ble.n	8015576 <_dtoa_r+0x8de>
 8015488:	2300      	movs	r3, #0
 801548a:	9306      	str	r3, [sp, #24]
 801548c:	6933      	ldr	r3, [r6, #16]
 801548e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015492:	6918      	ldr	r0, [r3, #16]
 8015494:	f000 ffac 	bl	80163f0 <__hi0bits>
 8015498:	f1c0 0020 	rsb	r0, r0, #32
 801549c:	9b04      	ldr	r3, [sp, #16]
 801549e:	4418      	add	r0, r3
 80154a0:	f010 001f 	ands.w	r0, r0, #31
 80154a4:	f000 8086 	beq.w	80155b4 <_dtoa_r+0x91c>
 80154a8:	f1c0 0320 	rsb	r3, r0, #32
 80154ac:	2b04      	cmp	r3, #4
 80154ae:	dd7f      	ble.n	80155b0 <_dtoa_r+0x918>
 80154b0:	f1c0 001c 	rsb	r0, r0, #28
 80154b4:	9b04      	ldr	r3, [sp, #16]
 80154b6:	4403      	add	r3, r0
 80154b8:	4480      	add	r8, r0
 80154ba:	4405      	add	r5, r0
 80154bc:	9304      	str	r3, [sp, #16]
 80154be:	f1b8 0f00 	cmp.w	r8, #0
 80154c2:	dd05      	ble.n	80154d0 <_dtoa_r+0x838>
 80154c4:	4659      	mov	r1, fp
 80154c6:	4642      	mov	r2, r8
 80154c8:	4620      	mov	r0, r4
 80154ca:	f001 f8f7 	bl	80166bc <__lshift>
 80154ce:	4683      	mov	fp, r0
 80154d0:	9b04      	ldr	r3, [sp, #16]
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	dd05      	ble.n	80154e2 <_dtoa_r+0x84a>
 80154d6:	4631      	mov	r1, r6
 80154d8:	461a      	mov	r2, r3
 80154da:	4620      	mov	r0, r4
 80154dc:	f001 f8ee 	bl	80166bc <__lshift>
 80154e0:	4606      	mov	r6, r0
 80154e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	d069      	beq.n	80155bc <_dtoa_r+0x924>
 80154e8:	4631      	mov	r1, r6
 80154ea:	4658      	mov	r0, fp
 80154ec:	f001 f952 	bl	8016794 <__mcmp>
 80154f0:	2800      	cmp	r0, #0
 80154f2:	da63      	bge.n	80155bc <_dtoa_r+0x924>
 80154f4:	2300      	movs	r3, #0
 80154f6:	4659      	mov	r1, fp
 80154f8:	220a      	movs	r2, #10
 80154fa:	4620      	mov	r0, r4
 80154fc:	f000 fee4 	bl	80162c8 <__multadd>
 8015500:	9b08      	ldr	r3, [sp, #32]
 8015502:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015506:	4683      	mov	fp, r0
 8015508:	2b00      	cmp	r3, #0
 801550a:	f000 818f 	beq.w	801582c <_dtoa_r+0xb94>
 801550e:	4639      	mov	r1, r7
 8015510:	2300      	movs	r3, #0
 8015512:	220a      	movs	r2, #10
 8015514:	4620      	mov	r0, r4
 8015516:	f000 fed7 	bl	80162c8 <__multadd>
 801551a:	f1b9 0f00 	cmp.w	r9, #0
 801551e:	4607      	mov	r7, r0
 8015520:	f300 808e 	bgt.w	8015640 <_dtoa_r+0x9a8>
 8015524:	9b05      	ldr	r3, [sp, #20]
 8015526:	2b02      	cmp	r3, #2
 8015528:	dc50      	bgt.n	80155cc <_dtoa_r+0x934>
 801552a:	e089      	b.n	8015640 <_dtoa_r+0x9a8>
 801552c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801552e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8015532:	e75d      	b.n	80153f0 <_dtoa_r+0x758>
 8015534:	9b01      	ldr	r3, [sp, #4]
 8015536:	1e5e      	subs	r6, r3, #1
 8015538:	9b06      	ldr	r3, [sp, #24]
 801553a:	42b3      	cmp	r3, r6
 801553c:	bfbf      	itttt	lt
 801553e:	9b06      	ldrlt	r3, [sp, #24]
 8015540:	9606      	strlt	r6, [sp, #24]
 8015542:	1af2      	sublt	r2, r6, r3
 8015544:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8015546:	bfb6      	itet	lt
 8015548:	189b      	addlt	r3, r3, r2
 801554a:	1b9e      	subge	r6, r3, r6
 801554c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801554e:	9b01      	ldr	r3, [sp, #4]
 8015550:	bfb8      	it	lt
 8015552:	2600      	movlt	r6, #0
 8015554:	2b00      	cmp	r3, #0
 8015556:	bfb5      	itete	lt
 8015558:	eba8 0503 	sublt.w	r5, r8, r3
 801555c:	9b01      	ldrge	r3, [sp, #4]
 801555e:	2300      	movlt	r3, #0
 8015560:	4645      	movge	r5, r8
 8015562:	e747      	b.n	80153f4 <_dtoa_r+0x75c>
 8015564:	9e06      	ldr	r6, [sp, #24]
 8015566:	9f08      	ldr	r7, [sp, #32]
 8015568:	4645      	mov	r5, r8
 801556a:	e74c      	b.n	8015406 <_dtoa_r+0x76e>
 801556c:	9a06      	ldr	r2, [sp, #24]
 801556e:	e775      	b.n	801545c <_dtoa_r+0x7c4>
 8015570:	9b05      	ldr	r3, [sp, #20]
 8015572:	2b01      	cmp	r3, #1
 8015574:	dc18      	bgt.n	80155a8 <_dtoa_r+0x910>
 8015576:	9b02      	ldr	r3, [sp, #8]
 8015578:	b9b3      	cbnz	r3, 80155a8 <_dtoa_r+0x910>
 801557a:	9b03      	ldr	r3, [sp, #12]
 801557c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015580:	b9a3      	cbnz	r3, 80155ac <_dtoa_r+0x914>
 8015582:	9b03      	ldr	r3, [sp, #12]
 8015584:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015588:	0d1b      	lsrs	r3, r3, #20
 801558a:	051b      	lsls	r3, r3, #20
 801558c:	b12b      	cbz	r3, 801559a <_dtoa_r+0x902>
 801558e:	9b04      	ldr	r3, [sp, #16]
 8015590:	3301      	adds	r3, #1
 8015592:	9304      	str	r3, [sp, #16]
 8015594:	f108 0801 	add.w	r8, r8, #1
 8015598:	2301      	movs	r3, #1
 801559a:	9306      	str	r3, [sp, #24]
 801559c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801559e:	2b00      	cmp	r3, #0
 80155a0:	f47f af74 	bne.w	801548c <_dtoa_r+0x7f4>
 80155a4:	2001      	movs	r0, #1
 80155a6:	e779      	b.n	801549c <_dtoa_r+0x804>
 80155a8:	2300      	movs	r3, #0
 80155aa:	e7f6      	b.n	801559a <_dtoa_r+0x902>
 80155ac:	9b02      	ldr	r3, [sp, #8]
 80155ae:	e7f4      	b.n	801559a <_dtoa_r+0x902>
 80155b0:	d085      	beq.n	80154be <_dtoa_r+0x826>
 80155b2:	4618      	mov	r0, r3
 80155b4:	301c      	adds	r0, #28
 80155b6:	e77d      	b.n	80154b4 <_dtoa_r+0x81c>
 80155b8:	40240000 	.word	0x40240000
 80155bc:	9b01      	ldr	r3, [sp, #4]
 80155be:	2b00      	cmp	r3, #0
 80155c0:	dc38      	bgt.n	8015634 <_dtoa_r+0x99c>
 80155c2:	9b05      	ldr	r3, [sp, #20]
 80155c4:	2b02      	cmp	r3, #2
 80155c6:	dd35      	ble.n	8015634 <_dtoa_r+0x99c>
 80155c8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80155cc:	f1b9 0f00 	cmp.w	r9, #0
 80155d0:	d10d      	bne.n	80155ee <_dtoa_r+0x956>
 80155d2:	4631      	mov	r1, r6
 80155d4:	464b      	mov	r3, r9
 80155d6:	2205      	movs	r2, #5
 80155d8:	4620      	mov	r0, r4
 80155da:	f000 fe75 	bl	80162c8 <__multadd>
 80155de:	4601      	mov	r1, r0
 80155e0:	4606      	mov	r6, r0
 80155e2:	4658      	mov	r0, fp
 80155e4:	f001 f8d6 	bl	8016794 <__mcmp>
 80155e8:	2800      	cmp	r0, #0
 80155ea:	f73f adbd 	bgt.w	8015168 <_dtoa_r+0x4d0>
 80155ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80155f0:	9d00      	ldr	r5, [sp, #0]
 80155f2:	ea6f 0a03 	mvn.w	sl, r3
 80155f6:	f04f 0800 	mov.w	r8, #0
 80155fa:	4631      	mov	r1, r6
 80155fc:	4620      	mov	r0, r4
 80155fe:	f000 fe41 	bl	8016284 <_Bfree>
 8015602:	2f00      	cmp	r7, #0
 8015604:	f43f aeb4 	beq.w	8015370 <_dtoa_r+0x6d8>
 8015608:	f1b8 0f00 	cmp.w	r8, #0
 801560c:	d005      	beq.n	801561a <_dtoa_r+0x982>
 801560e:	45b8      	cmp	r8, r7
 8015610:	d003      	beq.n	801561a <_dtoa_r+0x982>
 8015612:	4641      	mov	r1, r8
 8015614:	4620      	mov	r0, r4
 8015616:	f000 fe35 	bl	8016284 <_Bfree>
 801561a:	4639      	mov	r1, r7
 801561c:	4620      	mov	r0, r4
 801561e:	f000 fe31 	bl	8016284 <_Bfree>
 8015622:	e6a5      	b.n	8015370 <_dtoa_r+0x6d8>
 8015624:	2600      	movs	r6, #0
 8015626:	4637      	mov	r7, r6
 8015628:	e7e1      	b.n	80155ee <_dtoa_r+0x956>
 801562a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801562c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8015630:	4637      	mov	r7, r6
 8015632:	e599      	b.n	8015168 <_dtoa_r+0x4d0>
 8015634:	9b08      	ldr	r3, [sp, #32]
 8015636:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801563a:	2b00      	cmp	r3, #0
 801563c:	f000 80fd 	beq.w	801583a <_dtoa_r+0xba2>
 8015640:	2d00      	cmp	r5, #0
 8015642:	dd05      	ble.n	8015650 <_dtoa_r+0x9b8>
 8015644:	4639      	mov	r1, r7
 8015646:	462a      	mov	r2, r5
 8015648:	4620      	mov	r0, r4
 801564a:	f001 f837 	bl	80166bc <__lshift>
 801564e:	4607      	mov	r7, r0
 8015650:	9b06      	ldr	r3, [sp, #24]
 8015652:	2b00      	cmp	r3, #0
 8015654:	d05c      	beq.n	8015710 <_dtoa_r+0xa78>
 8015656:	6879      	ldr	r1, [r7, #4]
 8015658:	4620      	mov	r0, r4
 801565a:	f000 fdd3 	bl	8016204 <_Balloc>
 801565e:	4605      	mov	r5, r0
 8015660:	b928      	cbnz	r0, 801566e <_dtoa_r+0x9d6>
 8015662:	4b80      	ldr	r3, [pc, #512]	; (8015864 <_dtoa_r+0xbcc>)
 8015664:	4602      	mov	r2, r0
 8015666:	f240 21ea 	movw	r1, #746	; 0x2ea
 801566a:	f7ff bb2e 	b.w	8014cca <_dtoa_r+0x32>
 801566e:	693a      	ldr	r2, [r7, #16]
 8015670:	3202      	adds	r2, #2
 8015672:	0092      	lsls	r2, r2, #2
 8015674:	f107 010c 	add.w	r1, r7, #12
 8015678:	300c      	adds	r0, #12
 801567a:	f7fd fa09 	bl	8012a90 <memcpy>
 801567e:	2201      	movs	r2, #1
 8015680:	4629      	mov	r1, r5
 8015682:	4620      	mov	r0, r4
 8015684:	f001 f81a 	bl	80166bc <__lshift>
 8015688:	9b00      	ldr	r3, [sp, #0]
 801568a:	3301      	adds	r3, #1
 801568c:	9301      	str	r3, [sp, #4]
 801568e:	9b00      	ldr	r3, [sp, #0]
 8015690:	444b      	add	r3, r9
 8015692:	9307      	str	r3, [sp, #28]
 8015694:	9b02      	ldr	r3, [sp, #8]
 8015696:	f003 0301 	and.w	r3, r3, #1
 801569a:	46b8      	mov	r8, r7
 801569c:	9306      	str	r3, [sp, #24]
 801569e:	4607      	mov	r7, r0
 80156a0:	9b01      	ldr	r3, [sp, #4]
 80156a2:	4631      	mov	r1, r6
 80156a4:	3b01      	subs	r3, #1
 80156a6:	4658      	mov	r0, fp
 80156a8:	9302      	str	r3, [sp, #8]
 80156aa:	f7ff fa69 	bl	8014b80 <quorem>
 80156ae:	4603      	mov	r3, r0
 80156b0:	3330      	adds	r3, #48	; 0x30
 80156b2:	9004      	str	r0, [sp, #16]
 80156b4:	4641      	mov	r1, r8
 80156b6:	4658      	mov	r0, fp
 80156b8:	9308      	str	r3, [sp, #32]
 80156ba:	f001 f86b 	bl	8016794 <__mcmp>
 80156be:	463a      	mov	r2, r7
 80156c0:	4681      	mov	r9, r0
 80156c2:	4631      	mov	r1, r6
 80156c4:	4620      	mov	r0, r4
 80156c6:	f001 f881 	bl	80167cc <__mdiff>
 80156ca:	68c2      	ldr	r2, [r0, #12]
 80156cc:	9b08      	ldr	r3, [sp, #32]
 80156ce:	4605      	mov	r5, r0
 80156d0:	bb02      	cbnz	r2, 8015714 <_dtoa_r+0xa7c>
 80156d2:	4601      	mov	r1, r0
 80156d4:	4658      	mov	r0, fp
 80156d6:	f001 f85d 	bl	8016794 <__mcmp>
 80156da:	9b08      	ldr	r3, [sp, #32]
 80156dc:	4602      	mov	r2, r0
 80156de:	4629      	mov	r1, r5
 80156e0:	4620      	mov	r0, r4
 80156e2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80156e6:	f000 fdcd 	bl	8016284 <_Bfree>
 80156ea:	9b05      	ldr	r3, [sp, #20]
 80156ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80156ee:	9d01      	ldr	r5, [sp, #4]
 80156f0:	ea43 0102 	orr.w	r1, r3, r2
 80156f4:	9b06      	ldr	r3, [sp, #24]
 80156f6:	430b      	orrs	r3, r1
 80156f8:	9b08      	ldr	r3, [sp, #32]
 80156fa:	d10d      	bne.n	8015718 <_dtoa_r+0xa80>
 80156fc:	2b39      	cmp	r3, #57	; 0x39
 80156fe:	d029      	beq.n	8015754 <_dtoa_r+0xabc>
 8015700:	f1b9 0f00 	cmp.w	r9, #0
 8015704:	dd01      	ble.n	801570a <_dtoa_r+0xa72>
 8015706:	9b04      	ldr	r3, [sp, #16]
 8015708:	3331      	adds	r3, #49	; 0x31
 801570a:	9a02      	ldr	r2, [sp, #8]
 801570c:	7013      	strb	r3, [r2, #0]
 801570e:	e774      	b.n	80155fa <_dtoa_r+0x962>
 8015710:	4638      	mov	r0, r7
 8015712:	e7b9      	b.n	8015688 <_dtoa_r+0x9f0>
 8015714:	2201      	movs	r2, #1
 8015716:	e7e2      	b.n	80156de <_dtoa_r+0xa46>
 8015718:	f1b9 0f00 	cmp.w	r9, #0
 801571c:	db06      	blt.n	801572c <_dtoa_r+0xa94>
 801571e:	9905      	ldr	r1, [sp, #20]
 8015720:	ea41 0909 	orr.w	r9, r1, r9
 8015724:	9906      	ldr	r1, [sp, #24]
 8015726:	ea59 0101 	orrs.w	r1, r9, r1
 801572a:	d120      	bne.n	801576e <_dtoa_r+0xad6>
 801572c:	2a00      	cmp	r2, #0
 801572e:	ddec      	ble.n	801570a <_dtoa_r+0xa72>
 8015730:	4659      	mov	r1, fp
 8015732:	2201      	movs	r2, #1
 8015734:	4620      	mov	r0, r4
 8015736:	9301      	str	r3, [sp, #4]
 8015738:	f000 ffc0 	bl	80166bc <__lshift>
 801573c:	4631      	mov	r1, r6
 801573e:	4683      	mov	fp, r0
 8015740:	f001 f828 	bl	8016794 <__mcmp>
 8015744:	2800      	cmp	r0, #0
 8015746:	9b01      	ldr	r3, [sp, #4]
 8015748:	dc02      	bgt.n	8015750 <_dtoa_r+0xab8>
 801574a:	d1de      	bne.n	801570a <_dtoa_r+0xa72>
 801574c:	07da      	lsls	r2, r3, #31
 801574e:	d5dc      	bpl.n	801570a <_dtoa_r+0xa72>
 8015750:	2b39      	cmp	r3, #57	; 0x39
 8015752:	d1d8      	bne.n	8015706 <_dtoa_r+0xa6e>
 8015754:	9a02      	ldr	r2, [sp, #8]
 8015756:	2339      	movs	r3, #57	; 0x39
 8015758:	7013      	strb	r3, [r2, #0]
 801575a:	462b      	mov	r3, r5
 801575c:	461d      	mov	r5, r3
 801575e:	3b01      	subs	r3, #1
 8015760:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8015764:	2a39      	cmp	r2, #57	; 0x39
 8015766:	d050      	beq.n	801580a <_dtoa_r+0xb72>
 8015768:	3201      	adds	r2, #1
 801576a:	701a      	strb	r2, [r3, #0]
 801576c:	e745      	b.n	80155fa <_dtoa_r+0x962>
 801576e:	2a00      	cmp	r2, #0
 8015770:	dd03      	ble.n	801577a <_dtoa_r+0xae2>
 8015772:	2b39      	cmp	r3, #57	; 0x39
 8015774:	d0ee      	beq.n	8015754 <_dtoa_r+0xabc>
 8015776:	3301      	adds	r3, #1
 8015778:	e7c7      	b.n	801570a <_dtoa_r+0xa72>
 801577a:	9a01      	ldr	r2, [sp, #4]
 801577c:	9907      	ldr	r1, [sp, #28]
 801577e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8015782:	428a      	cmp	r2, r1
 8015784:	d02a      	beq.n	80157dc <_dtoa_r+0xb44>
 8015786:	4659      	mov	r1, fp
 8015788:	2300      	movs	r3, #0
 801578a:	220a      	movs	r2, #10
 801578c:	4620      	mov	r0, r4
 801578e:	f000 fd9b 	bl	80162c8 <__multadd>
 8015792:	45b8      	cmp	r8, r7
 8015794:	4683      	mov	fp, r0
 8015796:	f04f 0300 	mov.w	r3, #0
 801579a:	f04f 020a 	mov.w	r2, #10
 801579e:	4641      	mov	r1, r8
 80157a0:	4620      	mov	r0, r4
 80157a2:	d107      	bne.n	80157b4 <_dtoa_r+0xb1c>
 80157a4:	f000 fd90 	bl	80162c8 <__multadd>
 80157a8:	4680      	mov	r8, r0
 80157aa:	4607      	mov	r7, r0
 80157ac:	9b01      	ldr	r3, [sp, #4]
 80157ae:	3301      	adds	r3, #1
 80157b0:	9301      	str	r3, [sp, #4]
 80157b2:	e775      	b.n	80156a0 <_dtoa_r+0xa08>
 80157b4:	f000 fd88 	bl	80162c8 <__multadd>
 80157b8:	4639      	mov	r1, r7
 80157ba:	4680      	mov	r8, r0
 80157bc:	2300      	movs	r3, #0
 80157be:	220a      	movs	r2, #10
 80157c0:	4620      	mov	r0, r4
 80157c2:	f000 fd81 	bl	80162c8 <__multadd>
 80157c6:	4607      	mov	r7, r0
 80157c8:	e7f0      	b.n	80157ac <_dtoa_r+0xb14>
 80157ca:	f1b9 0f00 	cmp.w	r9, #0
 80157ce:	9a00      	ldr	r2, [sp, #0]
 80157d0:	bfcc      	ite	gt
 80157d2:	464d      	movgt	r5, r9
 80157d4:	2501      	movle	r5, #1
 80157d6:	4415      	add	r5, r2
 80157d8:	f04f 0800 	mov.w	r8, #0
 80157dc:	4659      	mov	r1, fp
 80157de:	2201      	movs	r2, #1
 80157e0:	4620      	mov	r0, r4
 80157e2:	9301      	str	r3, [sp, #4]
 80157e4:	f000 ff6a 	bl	80166bc <__lshift>
 80157e8:	4631      	mov	r1, r6
 80157ea:	4683      	mov	fp, r0
 80157ec:	f000 ffd2 	bl	8016794 <__mcmp>
 80157f0:	2800      	cmp	r0, #0
 80157f2:	dcb2      	bgt.n	801575a <_dtoa_r+0xac2>
 80157f4:	d102      	bne.n	80157fc <_dtoa_r+0xb64>
 80157f6:	9b01      	ldr	r3, [sp, #4]
 80157f8:	07db      	lsls	r3, r3, #31
 80157fa:	d4ae      	bmi.n	801575a <_dtoa_r+0xac2>
 80157fc:	462b      	mov	r3, r5
 80157fe:	461d      	mov	r5, r3
 8015800:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015804:	2a30      	cmp	r2, #48	; 0x30
 8015806:	d0fa      	beq.n	80157fe <_dtoa_r+0xb66>
 8015808:	e6f7      	b.n	80155fa <_dtoa_r+0x962>
 801580a:	9a00      	ldr	r2, [sp, #0]
 801580c:	429a      	cmp	r2, r3
 801580e:	d1a5      	bne.n	801575c <_dtoa_r+0xac4>
 8015810:	f10a 0a01 	add.w	sl, sl, #1
 8015814:	2331      	movs	r3, #49	; 0x31
 8015816:	e779      	b.n	801570c <_dtoa_r+0xa74>
 8015818:	4b13      	ldr	r3, [pc, #76]	; (8015868 <_dtoa_r+0xbd0>)
 801581a:	f7ff baaf 	b.w	8014d7c <_dtoa_r+0xe4>
 801581e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015820:	2b00      	cmp	r3, #0
 8015822:	f47f aa86 	bne.w	8014d32 <_dtoa_r+0x9a>
 8015826:	4b11      	ldr	r3, [pc, #68]	; (801586c <_dtoa_r+0xbd4>)
 8015828:	f7ff baa8 	b.w	8014d7c <_dtoa_r+0xe4>
 801582c:	f1b9 0f00 	cmp.w	r9, #0
 8015830:	dc03      	bgt.n	801583a <_dtoa_r+0xba2>
 8015832:	9b05      	ldr	r3, [sp, #20]
 8015834:	2b02      	cmp	r3, #2
 8015836:	f73f aec9 	bgt.w	80155cc <_dtoa_r+0x934>
 801583a:	9d00      	ldr	r5, [sp, #0]
 801583c:	4631      	mov	r1, r6
 801583e:	4658      	mov	r0, fp
 8015840:	f7ff f99e 	bl	8014b80 <quorem>
 8015844:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8015848:	f805 3b01 	strb.w	r3, [r5], #1
 801584c:	9a00      	ldr	r2, [sp, #0]
 801584e:	1aaa      	subs	r2, r5, r2
 8015850:	4591      	cmp	r9, r2
 8015852:	ddba      	ble.n	80157ca <_dtoa_r+0xb32>
 8015854:	4659      	mov	r1, fp
 8015856:	2300      	movs	r3, #0
 8015858:	220a      	movs	r2, #10
 801585a:	4620      	mov	r0, r4
 801585c:	f000 fd34 	bl	80162c8 <__multadd>
 8015860:	4683      	mov	fp, r0
 8015862:	e7eb      	b.n	801583c <_dtoa_r+0xba4>
 8015864:	080183b3 	.word	0x080183b3
 8015868:	080182b0 	.word	0x080182b0
 801586c:	08018330 	.word	0x08018330

08015870 <__sflush_r>:
 8015870:	898a      	ldrh	r2, [r1, #12]
 8015872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015876:	4605      	mov	r5, r0
 8015878:	0710      	lsls	r0, r2, #28
 801587a:	460c      	mov	r4, r1
 801587c:	d458      	bmi.n	8015930 <__sflush_r+0xc0>
 801587e:	684b      	ldr	r3, [r1, #4]
 8015880:	2b00      	cmp	r3, #0
 8015882:	dc05      	bgt.n	8015890 <__sflush_r+0x20>
 8015884:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015886:	2b00      	cmp	r3, #0
 8015888:	dc02      	bgt.n	8015890 <__sflush_r+0x20>
 801588a:	2000      	movs	r0, #0
 801588c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015890:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015892:	2e00      	cmp	r6, #0
 8015894:	d0f9      	beq.n	801588a <__sflush_r+0x1a>
 8015896:	2300      	movs	r3, #0
 8015898:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801589c:	682f      	ldr	r7, [r5, #0]
 801589e:	602b      	str	r3, [r5, #0]
 80158a0:	d032      	beq.n	8015908 <__sflush_r+0x98>
 80158a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80158a4:	89a3      	ldrh	r3, [r4, #12]
 80158a6:	075a      	lsls	r2, r3, #29
 80158a8:	d505      	bpl.n	80158b6 <__sflush_r+0x46>
 80158aa:	6863      	ldr	r3, [r4, #4]
 80158ac:	1ac0      	subs	r0, r0, r3
 80158ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80158b0:	b10b      	cbz	r3, 80158b6 <__sflush_r+0x46>
 80158b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80158b4:	1ac0      	subs	r0, r0, r3
 80158b6:	2300      	movs	r3, #0
 80158b8:	4602      	mov	r2, r0
 80158ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80158bc:	6a21      	ldr	r1, [r4, #32]
 80158be:	4628      	mov	r0, r5
 80158c0:	47b0      	blx	r6
 80158c2:	1c43      	adds	r3, r0, #1
 80158c4:	89a3      	ldrh	r3, [r4, #12]
 80158c6:	d106      	bne.n	80158d6 <__sflush_r+0x66>
 80158c8:	6829      	ldr	r1, [r5, #0]
 80158ca:	291d      	cmp	r1, #29
 80158cc:	d82c      	bhi.n	8015928 <__sflush_r+0xb8>
 80158ce:	4a2a      	ldr	r2, [pc, #168]	; (8015978 <__sflush_r+0x108>)
 80158d0:	40ca      	lsrs	r2, r1
 80158d2:	07d6      	lsls	r6, r2, #31
 80158d4:	d528      	bpl.n	8015928 <__sflush_r+0xb8>
 80158d6:	2200      	movs	r2, #0
 80158d8:	6062      	str	r2, [r4, #4]
 80158da:	04d9      	lsls	r1, r3, #19
 80158dc:	6922      	ldr	r2, [r4, #16]
 80158de:	6022      	str	r2, [r4, #0]
 80158e0:	d504      	bpl.n	80158ec <__sflush_r+0x7c>
 80158e2:	1c42      	adds	r2, r0, #1
 80158e4:	d101      	bne.n	80158ea <__sflush_r+0x7a>
 80158e6:	682b      	ldr	r3, [r5, #0]
 80158e8:	b903      	cbnz	r3, 80158ec <__sflush_r+0x7c>
 80158ea:	6560      	str	r0, [r4, #84]	; 0x54
 80158ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80158ee:	602f      	str	r7, [r5, #0]
 80158f0:	2900      	cmp	r1, #0
 80158f2:	d0ca      	beq.n	801588a <__sflush_r+0x1a>
 80158f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80158f8:	4299      	cmp	r1, r3
 80158fa:	d002      	beq.n	8015902 <__sflush_r+0x92>
 80158fc:	4628      	mov	r0, r5
 80158fe:	f7fd f8dd 	bl	8012abc <_free_r>
 8015902:	2000      	movs	r0, #0
 8015904:	6360      	str	r0, [r4, #52]	; 0x34
 8015906:	e7c1      	b.n	801588c <__sflush_r+0x1c>
 8015908:	6a21      	ldr	r1, [r4, #32]
 801590a:	2301      	movs	r3, #1
 801590c:	4628      	mov	r0, r5
 801590e:	47b0      	blx	r6
 8015910:	1c41      	adds	r1, r0, #1
 8015912:	d1c7      	bne.n	80158a4 <__sflush_r+0x34>
 8015914:	682b      	ldr	r3, [r5, #0]
 8015916:	2b00      	cmp	r3, #0
 8015918:	d0c4      	beq.n	80158a4 <__sflush_r+0x34>
 801591a:	2b1d      	cmp	r3, #29
 801591c:	d001      	beq.n	8015922 <__sflush_r+0xb2>
 801591e:	2b16      	cmp	r3, #22
 8015920:	d101      	bne.n	8015926 <__sflush_r+0xb6>
 8015922:	602f      	str	r7, [r5, #0]
 8015924:	e7b1      	b.n	801588a <__sflush_r+0x1a>
 8015926:	89a3      	ldrh	r3, [r4, #12]
 8015928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801592c:	81a3      	strh	r3, [r4, #12]
 801592e:	e7ad      	b.n	801588c <__sflush_r+0x1c>
 8015930:	690f      	ldr	r7, [r1, #16]
 8015932:	2f00      	cmp	r7, #0
 8015934:	d0a9      	beq.n	801588a <__sflush_r+0x1a>
 8015936:	0793      	lsls	r3, r2, #30
 8015938:	680e      	ldr	r6, [r1, #0]
 801593a:	bf08      	it	eq
 801593c:	694b      	ldreq	r3, [r1, #20]
 801593e:	600f      	str	r7, [r1, #0]
 8015940:	bf18      	it	ne
 8015942:	2300      	movne	r3, #0
 8015944:	eba6 0807 	sub.w	r8, r6, r7
 8015948:	608b      	str	r3, [r1, #8]
 801594a:	f1b8 0f00 	cmp.w	r8, #0
 801594e:	dd9c      	ble.n	801588a <__sflush_r+0x1a>
 8015950:	6a21      	ldr	r1, [r4, #32]
 8015952:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015954:	4643      	mov	r3, r8
 8015956:	463a      	mov	r2, r7
 8015958:	4628      	mov	r0, r5
 801595a:	47b0      	blx	r6
 801595c:	2800      	cmp	r0, #0
 801595e:	dc06      	bgt.n	801596e <__sflush_r+0xfe>
 8015960:	89a3      	ldrh	r3, [r4, #12]
 8015962:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015966:	81a3      	strh	r3, [r4, #12]
 8015968:	f04f 30ff 	mov.w	r0, #4294967295
 801596c:	e78e      	b.n	801588c <__sflush_r+0x1c>
 801596e:	4407      	add	r7, r0
 8015970:	eba8 0800 	sub.w	r8, r8, r0
 8015974:	e7e9      	b.n	801594a <__sflush_r+0xda>
 8015976:	bf00      	nop
 8015978:	20400001 	.word	0x20400001

0801597c <_fflush_r>:
 801597c:	b538      	push	{r3, r4, r5, lr}
 801597e:	690b      	ldr	r3, [r1, #16]
 8015980:	4605      	mov	r5, r0
 8015982:	460c      	mov	r4, r1
 8015984:	b913      	cbnz	r3, 801598c <_fflush_r+0x10>
 8015986:	2500      	movs	r5, #0
 8015988:	4628      	mov	r0, r5
 801598a:	bd38      	pop	{r3, r4, r5, pc}
 801598c:	b118      	cbz	r0, 8015996 <_fflush_r+0x1a>
 801598e:	6983      	ldr	r3, [r0, #24]
 8015990:	b90b      	cbnz	r3, 8015996 <_fflush_r+0x1a>
 8015992:	f7fc ffaf 	bl	80128f4 <__sinit>
 8015996:	4b14      	ldr	r3, [pc, #80]	; (80159e8 <_fflush_r+0x6c>)
 8015998:	429c      	cmp	r4, r3
 801599a:	d11b      	bne.n	80159d4 <_fflush_r+0x58>
 801599c:	686c      	ldr	r4, [r5, #4]
 801599e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d0ef      	beq.n	8015986 <_fflush_r+0xa>
 80159a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80159a8:	07d0      	lsls	r0, r2, #31
 80159aa:	d404      	bmi.n	80159b6 <_fflush_r+0x3a>
 80159ac:	0599      	lsls	r1, r3, #22
 80159ae:	d402      	bmi.n	80159b6 <_fflush_r+0x3a>
 80159b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80159b2:	f7fd f862 	bl	8012a7a <__retarget_lock_acquire_recursive>
 80159b6:	4628      	mov	r0, r5
 80159b8:	4621      	mov	r1, r4
 80159ba:	f7ff ff59 	bl	8015870 <__sflush_r>
 80159be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80159c0:	07da      	lsls	r2, r3, #31
 80159c2:	4605      	mov	r5, r0
 80159c4:	d4e0      	bmi.n	8015988 <_fflush_r+0xc>
 80159c6:	89a3      	ldrh	r3, [r4, #12]
 80159c8:	059b      	lsls	r3, r3, #22
 80159ca:	d4dd      	bmi.n	8015988 <_fflush_r+0xc>
 80159cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80159ce:	f7fd f855 	bl	8012a7c <__retarget_lock_release_recursive>
 80159d2:	e7d9      	b.n	8015988 <_fflush_r+0xc>
 80159d4:	4b05      	ldr	r3, [pc, #20]	; (80159ec <_fflush_r+0x70>)
 80159d6:	429c      	cmp	r4, r3
 80159d8:	d101      	bne.n	80159de <_fflush_r+0x62>
 80159da:	68ac      	ldr	r4, [r5, #8]
 80159dc:	e7df      	b.n	801599e <_fflush_r+0x22>
 80159de:	4b04      	ldr	r3, [pc, #16]	; (80159f0 <_fflush_r+0x74>)
 80159e0:	429c      	cmp	r4, r3
 80159e2:	bf08      	it	eq
 80159e4:	68ec      	ldreq	r4, [r5, #12]
 80159e6:	e7da      	b.n	801599e <_fflush_r+0x22>
 80159e8:	0801825c 	.word	0x0801825c
 80159ec:	0801827c 	.word	0x0801827c
 80159f0:	0801823c 	.word	0x0801823c

080159f4 <rshift>:
 80159f4:	6903      	ldr	r3, [r0, #16]
 80159f6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80159fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80159fe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8015a02:	f100 0414 	add.w	r4, r0, #20
 8015a06:	dd45      	ble.n	8015a94 <rshift+0xa0>
 8015a08:	f011 011f 	ands.w	r1, r1, #31
 8015a0c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8015a10:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8015a14:	d10c      	bne.n	8015a30 <rshift+0x3c>
 8015a16:	f100 0710 	add.w	r7, r0, #16
 8015a1a:	4629      	mov	r1, r5
 8015a1c:	42b1      	cmp	r1, r6
 8015a1e:	d334      	bcc.n	8015a8a <rshift+0x96>
 8015a20:	1a9b      	subs	r3, r3, r2
 8015a22:	009b      	lsls	r3, r3, #2
 8015a24:	1eea      	subs	r2, r5, #3
 8015a26:	4296      	cmp	r6, r2
 8015a28:	bf38      	it	cc
 8015a2a:	2300      	movcc	r3, #0
 8015a2c:	4423      	add	r3, r4
 8015a2e:	e015      	b.n	8015a5c <rshift+0x68>
 8015a30:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8015a34:	f1c1 0820 	rsb	r8, r1, #32
 8015a38:	40cf      	lsrs	r7, r1
 8015a3a:	f105 0e04 	add.w	lr, r5, #4
 8015a3e:	46a1      	mov	r9, r4
 8015a40:	4576      	cmp	r6, lr
 8015a42:	46f4      	mov	ip, lr
 8015a44:	d815      	bhi.n	8015a72 <rshift+0x7e>
 8015a46:	1a9b      	subs	r3, r3, r2
 8015a48:	009a      	lsls	r2, r3, #2
 8015a4a:	3a04      	subs	r2, #4
 8015a4c:	3501      	adds	r5, #1
 8015a4e:	42ae      	cmp	r6, r5
 8015a50:	bf38      	it	cc
 8015a52:	2200      	movcc	r2, #0
 8015a54:	18a3      	adds	r3, r4, r2
 8015a56:	50a7      	str	r7, [r4, r2]
 8015a58:	b107      	cbz	r7, 8015a5c <rshift+0x68>
 8015a5a:	3304      	adds	r3, #4
 8015a5c:	1b1a      	subs	r2, r3, r4
 8015a5e:	42a3      	cmp	r3, r4
 8015a60:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015a64:	bf08      	it	eq
 8015a66:	2300      	moveq	r3, #0
 8015a68:	6102      	str	r2, [r0, #16]
 8015a6a:	bf08      	it	eq
 8015a6c:	6143      	streq	r3, [r0, #20]
 8015a6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a72:	f8dc c000 	ldr.w	ip, [ip]
 8015a76:	fa0c fc08 	lsl.w	ip, ip, r8
 8015a7a:	ea4c 0707 	orr.w	r7, ip, r7
 8015a7e:	f849 7b04 	str.w	r7, [r9], #4
 8015a82:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015a86:	40cf      	lsrs	r7, r1
 8015a88:	e7da      	b.n	8015a40 <rshift+0x4c>
 8015a8a:	f851 cb04 	ldr.w	ip, [r1], #4
 8015a8e:	f847 cf04 	str.w	ip, [r7, #4]!
 8015a92:	e7c3      	b.n	8015a1c <rshift+0x28>
 8015a94:	4623      	mov	r3, r4
 8015a96:	e7e1      	b.n	8015a5c <rshift+0x68>

08015a98 <__hexdig_fun>:
 8015a98:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015a9c:	2b09      	cmp	r3, #9
 8015a9e:	d802      	bhi.n	8015aa6 <__hexdig_fun+0xe>
 8015aa0:	3820      	subs	r0, #32
 8015aa2:	b2c0      	uxtb	r0, r0
 8015aa4:	4770      	bx	lr
 8015aa6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8015aaa:	2b05      	cmp	r3, #5
 8015aac:	d801      	bhi.n	8015ab2 <__hexdig_fun+0x1a>
 8015aae:	3847      	subs	r0, #71	; 0x47
 8015ab0:	e7f7      	b.n	8015aa2 <__hexdig_fun+0xa>
 8015ab2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8015ab6:	2b05      	cmp	r3, #5
 8015ab8:	d801      	bhi.n	8015abe <__hexdig_fun+0x26>
 8015aba:	3827      	subs	r0, #39	; 0x27
 8015abc:	e7f1      	b.n	8015aa2 <__hexdig_fun+0xa>
 8015abe:	2000      	movs	r0, #0
 8015ac0:	4770      	bx	lr
	...

08015ac4 <__gethex>:
 8015ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ac8:	ed2d 8b02 	vpush	{d8}
 8015acc:	b089      	sub	sp, #36	; 0x24
 8015ace:	ee08 0a10 	vmov	s16, r0
 8015ad2:	9304      	str	r3, [sp, #16]
 8015ad4:	4bbc      	ldr	r3, [pc, #752]	; (8015dc8 <__gethex+0x304>)
 8015ad6:	681b      	ldr	r3, [r3, #0]
 8015ad8:	9301      	str	r3, [sp, #4]
 8015ada:	4618      	mov	r0, r3
 8015adc:	468b      	mov	fp, r1
 8015ade:	4690      	mov	r8, r2
 8015ae0:	f7ea fb86 	bl	80001f0 <strlen>
 8015ae4:	9b01      	ldr	r3, [sp, #4]
 8015ae6:	f8db 2000 	ldr.w	r2, [fp]
 8015aea:	4403      	add	r3, r0
 8015aec:	4682      	mov	sl, r0
 8015aee:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8015af2:	9305      	str	r3, [sp, #20]
 8015af4:	1c93      	adds	r3, r2, #2
 8015af6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8015afa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8015afe:	32fe      	adds	r2, #254	; 0xfe
 8015b00:	18d1      	adds	r1, r2, r3
 8015b02:	461f      	mov	r7, r3
 8015b04:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015b08:	9100      	str	r1, [sp, #0]
 8015b0a:	2830      	cmp	r0, #48	; 0x30
 8015b0c:	d0f8      	beq.n	8015b00 <__gethex+0x3c>
 8015b0e:	f7ff ffc3 	bl	8015a98 <__hexdig_fun>
 8015b12:	4604      	mov	r4, r0
 8015b14:	2800      	cmp	r0, #0
 8015b16:	d13a      	bne.n	8015b8e <__gethex+0xca>
 8015b18:	9901      	ldr	r1, [sp, #4]
 8015b1a:	4652      	mov	r2, sl
 8015b1c:	4638      	mov	r0, r7
 8015b1e:	f7fe f844 	bl	8013baa <strncmp>
 8015b22:	4605      	mov	r5, r0
 8015b24:	2800      	cmp	r0, #0
 8015b26:	d168      	bne.n	8015bfa <__gethex+0x136>
 8015b28:	f817 000a 	ldrb.w	r0, [r7, sl]
 8015b2c:	eb07 060a 	add.w	r6, r7, sl
 8015b30:	f7ff ffb2 	bl	8015a98 <__hexdig_fun>
 8015b34:	2800      	cmp	r0, #0
 8015b36:	d062      	beq.n	8015bfe <__gethex+0x13a>
 8015b38:	4633      	mov	r3, r6
 8015b3a:	7818      	ldrb	r0, [r3, #0]
 8015b3c:	2830      	cmp	r0, #48	; 0x30
 8015b3e:	461f      	mov	r7, r3
 8015b40:	f103 0301 	add.w	r3, r3, #1
 8015b44:	d0f9      	beq.n	8015b3a <__gethex+0x76>
 8015b46:	f7ff ffa7 	bl	8015a98 <__hexdig_fun>
 8015b4a:	2301      	movs	r3, #1
 8015b4c:	fab0 f480 	clz	r4, r0
 8015b50:	0964      	lsrs	r4, r4, #5
 8015b52:	4635      	mov	r5, r6
 8015b54:	9300      	str	r3, [sp, #0]
 8015b56:	463a      	mov	r2, r7
 8015b58:	4616      	mov	r6, r2
 8015b5a:	3201      	adds	r2, #1
 8015b5c:	7830      	ldrb	r0, [r6, #0]
 8015b5e:	f7ff ff9b 	bl	8015a98 <__hexdig_fun>
 8015b62:	2800      	cmp	r0, #0
 8015b64:	d1f8      	bne.n	8015b58 <__gethex+0x94>
 8015b66:	9901      	ldr	r1, [sp, #4]
 8015b68:	4652      	mov	r2, sl
 8015b6a:	4630      	mov	r0, r6
 8015b6c:	f7fe f81d 	bl	8013baa <strncmp>
 8015b70:	b980      	cbnz	r0, 8015b94 <__gethex+0xd0>
 8015b72:	b94d      	cbnz	r5, 8015b88 <__gethex+0xc4>
 8015b74:	eb06 050a 	add.w	r5, r6, sl
 8015b78:	462a      	mov	r2, r5
 8015b7a:	4616      	mov	r6, r2
 8015b7c:	3201      	adds	r2, #1
 8015b7e:	7830      	ldrb	r0, [r6, #0]
 8015b80:	f7ff ff8a 	bl	8015a98 <__hexdig_fun>
 8015b84:	2800      	cmp	r0, #0
 8015b86:	d1f8      	bne.n	8015b7a <__gethex+0xb6>
 8015b88:	1bad      	subs	r5, r5, r6
 8015b8a:	00ad      	lsls	r5, r5, #2
 8015b8c:	e004      	b.n	8015b98 <__gethex+0xd4>
 8015b8e:	2400      	movs	r4, #0
 8015b90:	4625      	mov	r5, r4
 8015b92:	e7e0      	b.n	8015b56 <__gethex+0x92>
 8015b94:	2d00      	cmp	r5, #0
 8015b96:	d1f7      	bne.n	8015b88 <__gethex+0xc4>
 8015b98:	7833      	ldrb	r3, [r6, #0]
 8015b9a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015b9e:	2b50      	cmp	r3, #80	; 0x50
 8015ba0:	d13b      	bne.n	8015c1a <__gethex+0x156>
 8015ba2:	7873      	ldrb	r3, [r6, #1]
 8015ba4:	2b2b      	cmp	r3, #43	; 0x2b
 8015ba6:	d02c      	beq.n	8015c02 <__gethex+0x13e>
 8015ba8:	2b2d      	cmp	r3, #45	; 0x2d
 8015baa:	d02e      	beq.n	8015c0a <__gethex+0x146>
 8015bac:	1c71      	adds	r1, r6, #1
 8015bae:	f04f 0900 	mov.w	r9, #0
 8015bb2:	7808      	ldrb	r0, [r1, #0]
 8015bb4:	f7ff ff70 	bl	8015a98 <__hexdig_fun>
 8015bb8:	1e43      	subs	r3, r0, #1
 8015bba:	b2db      	uxtb	r3, r3
 8015bbc:	2b18      	cmp	r3, #24
 8015bbe:	d82c      	bhi.n	8015c1a <__gethex+0x156>
 8015bc0:	f1a0 0210 	sub.w	r2, r0, #16
 8015bc4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015bc8:	f7ff ff66 	bl	8015a98 <__hexdig_fun>
 8015bcc:	1e43      	subs	r3, r0, #1
 8015bce:	b2db      	uxtb	r3, r3
 8015bd0:	2b18      	cmp	r3, #24
 8015bd2:	d91d      	bls.n	8015c10 <__gethex+0x14c>
 8015bd4:	f1b9 0f00 	cmp.w	r9, #0
 8015bd8:	d000      	beq.n	8015bdc <__gethex+0x118>
 8015bda:	4252      	negs	r2, r2
 8015bdc:	4415      	add	r5, r2
 8015bde:	f8cb 1000 	str.w	r1, [fp]
 8015be2:	b1e4      	cbz	r4, 8015c1e <__gethex+0x15a>
 8015be4:	9b00      	ldr	r3, [sp, #0]
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	bf14      	ite	ne
 8015bea:	2700      	movne	r7, #0
 8015bec:	2706      	moveq	r7, #6
 8015bee:	4638      	mov	r0, r7
 8015bf0:	b009      	add	sp, #36	; 0x24
 8015bf2:	ecbd 8b02 	vpop	{d8}
 8015bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bfa:	463e      	mov	r6, r7
 8015bfc:	4625      	mov	r5, r4
 8015bfe:	2401      	movs	r4, #1
 8015c00:	e7ca      	b.n	8015b98 <__gethex+0xd4>
 8015c02:	f04f 0900 	mov.w	r9, #0
 8015c06:	1cb1      	adds	r1, r6, #2
 8015c08:	e7d3      	b.n	8015bb2 <__gethex+0xee>
 8015c0a:	f04f 0901 	mov.w	r9, #1
 8015c0e:	e7fa      	b.n	8015c06 <__gethex+0x142>
 8015c10:	230a      	movs	r3, #10
 8015c12:	fb03 0202 	mla	r2, r3, r2, r0
 8015c16:	3a10      	subs	r2, #16
 8015c18:	e7d4      	b.n	8015bc4 <__gethex+0x100>
 8015c1a:	4631      	mov	r1, r6
 8015c1c:	e7df      	b.n	8015bde <__gethex+0x11a>
 8015c1e:	1bf3      	subs	r3, r6, r7
 8015c20:	3b01      	subs	r3, #1
 8015c22:	4621      	mov	r1, r4
 8015c24:	2b07      	cmp	r3, #7
 8015c26:	dc0b      	bgt.n	8015c40 <__gethex+0x17c>
 8015c28:	ee18 0a10 	vmov	r0, s16
 8015c2c:	f000 faea 	bl	8016204 <_Balloc>
 8015c30:	4604      	mov	r4, r0
 8015c32:	b940      	cbnz	r0, 8015c46 <__gethex+0x182>
 8015c34:	4b65      	ldr	r3, [pc, #404]	; (8015dcc <__gethex+0x308>)
 8015c36:	4602      	mov	r2, r0
 8015c38:	21de      	movs	r1, #222	; 0xde
 8015c3a:	4865      	ldr	r0, [pc, #404]	; (8015dd0 <__gethex+0x30c>)
 8015c3c:	f001 fa82 	bl	8017144 <__assert_func>
 8015c40:	3101      	adds	r1, #1
 8015c42:	105b      	asrs	r3, r3, #1
 8015c44:	e7ee      	b.n	8015c24 <__gethex+0x160>
 8015c46:	f100 0914 	add.w	r9, r0, #20
 8015c4a:	f04f 0b00 	mov.w	fp, #0
 8015c4e:	f1ca 0301 	rsb	r3, sl, #1
 8015c52:	f8cd 9008 	str.w	r9, [sp, #8]
 8015c56:	f8cd b000 	str.w	fp, [sp]
 8015c5a:	9306      	str	r3, [sp, #24]
 8015c5c:	42b7      	cmp	r7, r6
 8015c5e:	d340      	bcc.n	8015ce2 <__gethex+0x21e>
 8015c60:	9802      	ldr	r0, [sp, #8]
 8015c62:	9b00      	ldr	r3, [sp, #0]
 8015c64:	f840 3b04 	str.w	r3, [r0], #4
 8015c68:	eba0 0009 	sub.w	r0, r0, r9
 8015c6c:	1080      	asrs	r0, r0, #2
 8015c6e:	0146      	lsls	r6, r0, #5
 8015c70:	6120      	str	r0, [r4, #16]
 8015c72:	4618      	mov	r0, r3
 8015c74:	f000 fbbc 	bl	80163f0 <__hi0bits>
 8015c78:	1a30      	subs	r0, r6, r0
 8015c7a:	f8d8 6000 	ldr.w	r6, [r8]
 8015c7e:	42b0      	cmp	r0, r6
 8015c80:	dd63      	ble.n	8015d4a <__gethex+0x286>
 8015c82:	1b87      	subs	r7, r0, r6
 8015c84:	4639      	mov	r1, r7
 8015c86:	4620      	mov	r0, r4
 8015c88:	f000 ff56 	bl	8016b38 <__any_on>
 8015c8c:	4682      	mov	sl, r0
 8015c8e:	b1a8      	cbz	r0, 8015cbc <__gethex+0x1f8>
 8015c90:	1e7b      	subs	r3, r7, #1
 8015c92:	1159      	asrs	r1, r3, #5
 8015c94:	f003 021f 	and.w	r2, r3, #31
 8015c98:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8015c9c:	f04f 0a01 	mov.w	sl, #1
 8015ca0:	fa0a f202 	lsl.w	r2, sl, r2
 8015ca4:	420a      	tst	r2, r1
 8015ca6:	d009      	beq.n	8015cbc <__gethex+0x1f8>
 8015ca8:	4553      	cmp	r3, sl
 8015caa:	dd05      	ble.n	8015cb8 <__gethex+0x1f4>
 8015cac:	1eb9      	subs	r1, r7, #2
 8015cae:	4620      	mov	r0, r4
 8015cb0:	f000 ff42 	bl	8016b38 <__any_on>
 8015cb4:	2800      	cmp	r0, #0
 8015cb6:	d145      	bne.n	8015d44 <__gethex+0x280>
 8015cb8:	f04f 0a02 	mov.w	sl, #2
 8015cbc:	4639      	mov	r1, r7
 8015cbe:	4620      	mov	r0, r4
 8015cc0:	f7ff fe98 	bl	80159f4 <rshift>
 8015cc4:	443d      	add	r5, r7
 8015cc6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015cca:	42ab      	cmp	r3, r5
 8015ccc:	da4c      	bge.n	8015d68 <__gethex+0x2a4>
 8015cce:	ee18 0a10 	vmov	r0, s16
 8015cd2:	4621      	mov	r1, r4
 8015cd4:	f000 fad6 	bl	8016284 <_Bfree>
 8015cd8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015cda:	2300      	movs	r3, #0
 8015cdc:	6013      	str	r3, [r2, #0]
 8015cde:	27a3      	movs	r7, #163	; 0xa3
 8015ce0:	e785      	b.n	8015bee <__gethex+0x12a>
 8015ce2:	1e73      	subs	r3, r6, #1
 8015ce4:	9a05      	ldr	r2, [sp, #20]
 8015ce6:	9303      	str	r3, [sp, #12]
 8015ce8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015cec:	4293      	cmp	r3, r2
 8015cee:	d019      	beq.n	8015d24 <__gethex+0x260>
 8015cf0:	f1bb 0f20 	cmp.w	fp, #32
 8015cf4:	d107      	bne.n	8015d06 <__gethex+0x242>
 8015cf6:	9b02      	ldr	r3, [sp, #8]
 8015cf8:	9a00      	ldr	r2, [sp, #0]
 8015cfa:	f843 2b04 	str.w	r2, [r3], #4
 8015cfe:	9302      	str	r3, [sp, #8]
 8015d00:	2300      	movs	r3, #0
 8015d02:	9300      	str	r3, [sp, #0]
 8015d04:	469b      	mov	fp, r3
 8015d06:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8015d0a:	f7ff fec5 	bl	8015a98 <__hexdig_fun>
 8015d0e:	9b00      	ldr	r3, [sp, #0]
 8015d10:	f000 000f 	and.w	r0, r0, #15
 8015d14:	fa00 f00b 	lsl.w	r0, r0, fp
 8015d18:	4303      	orrs	r3, r0
 8015d1a:	9300      	str	r3, [sp, #0]
 8015d1c:	f10b 0b04 	add.w	fp, fp, #4
 8015d20:	9b03      	ldr	r3, [sp, #12]
 8015d22:	e00d      	b.n	8015d40 <__gethex+0x27c>
 8015d24:	9b03      	ldr	r3, [sp, #12]
 8015d26:	9a06      	ldr	r2, [sp, #24]
 8015d28:	4413      	add	r3, r2
 8015d2a:	42bb      	cmp	r3, r7
 8015d2c:	d3e0      	bcc.n	8015cf0 <__gethex+0x22c>
 8015d2e:	4618      	mov	r0, r3
 8015d30:	9901      	ldr	r1, [sp, #4]
 8015d32:	9307      	str	r3, [sp, #28]
 8015d34:	4652      	mov	r2, sl
 8015d36:	f7fd ff38 	bl	8013baa <strncmp>
 8015d3a:	9b07      	ldr	r3, [sp, #28]
 8015d3c:	2800      	cmp	r0, #0
 8015d3e:	d1d7      	bne.n	8015cf0 <__gethex+0x22c>
 8015d40:	461e      	mov	r6, r3
 8015d42:	e78b      	b.n	8015c5c <__gethex+0x198>
 8015d44:	f04f 0a03 	mov.w	sl, #3
 8015d48:	e7b8      	b.n	8015cbc <__gethex+0x1f8>
 8015d4a:	da0a      	bge.n	8015d62 <__gethex+0x29e>
 8015d4c:	1a37      	subs	r7, r6, r0
 8015d4e:	4621      	mov	r1, r4
 8015d50:	ee18 0a10 	vmov	r0, s16
 8015d54:	463a      	mov	r2, r7
 8015d56:	f000 fcb1 	bl	80166bc <__lshift>
 8015d5a:	1bed      	subs	r5, r5, r7
 8015d5c:	4604      	mov	r4, r0
 8015d5e:	f100 0914 	add.w	r9, r0, #20
 8015d62:	f04f 0a00 	mov.w	sl, #0
 8015d66:	e7ae      	b.n	8015cc6 <__gethex+0x202>
 8015d68:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015d6c:	42a8      	cmp	r0, r5
 8015d6e:	dd72      	ble.n	8015e56 <__gethex+0x392>
 8015d70:	1b45      	subs	r5, r0, r5
 8015d72:	42ae      	cmp	r6, r5
 8015d74:	dc36      	bgt.n	8015de4 <__gethex+0x320>
 8015d76:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015d7a:	2b02      	cmp	r3, #2
 8015d7c:	d02a      	beq.n	8015dd4 <__gethex+0x310>
 8015d7e:	2b03      	cmp	r3, #3
 8015d80:	d02c      	beq.n	8015ddc <__gethex+0x318>
 8015d82:	2b01      	cmp	r3, #1
 8015d84:	d115      	bne.n	8015db2 <__gethex+0x2ee>
 8015d86:	42ae      	cmp	r6, r5
 8015d88:	d113      	bne.n	8015db2 <__gethex+0x2ee>
 8015d8a:	2e01      	cmp	r6, #1
 8015d8c:	d10b      	bne.n	8015da6 <__gethex+0x2e2>
 8015d8e:	9a04      	ldr	r2, [sp, #16]
 8015d90:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015d94:	6013      	str	r3, [r2, #0]
 8015d96:	2301      	movs	r3, #1
 8015d98:	6123      	str	r3, [r4, #16]
 8015d9a:	f8c9 3000 	str.w	r3, [r9]
 8015d9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015da0:	2762      	movs	r7, #98	; 0x62
 8015da2:	601c      	str	r4, [r3, #0]
 8015da4:	e723      	b.n	8015bee <__gethex+0x12a>
 8015da6:	1e71      	subs	r1, r6, #1
 8015da8:	4620      	mov	r0, r4
 8015daa:	f000 fec5 	bl	8016b38 <__any_on>
 8015dae:	2800      	cmp	r0, #0
 8015db0:	d1ed      	bne.n	8015d8e <__gethex+0x2ca>
 8015db2:	ee18 0a10 	vmov	r0, s16
 8015db6:	4621      	mov	r1, r4
 8015db8:	f000 fa64 	bl	8016284 <_Bfree>
 8015dbc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015dbe:	2300      	movs	r3, #0
 8015dc0:	6013      	str	r3, [r2, #0]
 8015dc2:	2750      	movs	r7, #80	; 0x50
 8015dc4:	e713      	b.n	8015bee <__gethex+0x12a>
 8015dc6:	bf00      	nop
 8015dc8:	08018430 	.word	0x08018430
 8015dcc:	080183b3 	.word	0x080183b3
 8015dd0:	080183c4 	.word	0x080183c4
 8015dd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d1eb      	bne.n	8015db2 <__gethex+0x2ee>
 8015dda:	e7d8      	b.n	8015d8e <__gethex+0x2ca>
 8015ddc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	d1d5      	bne.n	8015d8e <__gethex+0x2ca>
 8015de2:	e7e6      	b.n	8015db2 <__gethex+0x2ee>
 8015de4:	1e6f      	subs	r7, r5, #1
 8015de6:	f1ba 0f00 	cmp.w	sl, #0
 8015dea:	d131      	bne.n	8015e50 <__gethex+0x38c>
 8015dec:	b127      	cbz	r7, 8015df8 <__gethex+0x334>
 8015dee:	4639      	mov	r1, r7
 8015df0:	4620      	mov	r0, r4
 8015df2:	f000 fea1 	bl	8016b38 <__any_on>
 8015df6:	4682      	mov	sl, r0
 8015df8:	117b      	asrs	r3, r7, #5
 8015dfa:	2101      	movs	r1, #1
 8015dfc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8015e00:	f007 071f 	and.w	r7, r7, #31
 8015e04:	fa01 f707 	lsl.w	r7, r1, r7
 8015e08:	421f      	tst	r7, r3
 8015e0a:	4629      	mov	r1, r5
 8015e0c:	4620      	mov	r0, r4
 8015e0e:	bf18      	it	ne
 8015e10:	f04a 0a02 	orrne.w	sl, sl, #2
 8015e14:	1b76      	subs	r6, r6, r5
 8015e16:	f7ff fded 	bl	80159f4 <rshift>
 8015e1a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8015e1e:	2702      	movs	r7, #2
 8015e20:	f1ba 0f00 	cmp.w	sl, #0
 8015e24:	d048      	beq.n	8015eb8 <__gethex+0x3f4>
 8015e26:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015e2a:	2b02      	cmp	r3, #2
 8015e2c:	d015      	beq.n	8015e5a <__gethex+0x396>
 8015e2e:	2b03      	cmp	r3, #3
 8015e30:	d017      	beq.n	8015e62 <__gethex+0x39e>
 8015e32:	2b01      	cmp	r3, #1
 8015e34:	d109      	bne.n	8015e4a <__gethex+0x386>
 8015e36:	f01a 0f02 	tst.w	sl, #2
 8015e3a:	d006      	beq.n	8015e4a <__gethex+0x386>
 8015e3c:	f8d9 0000 	ldr.w	r0, [r9]
 8015e40:	ea4a 0a00 	orr.w	sl, sl, r0
 8015e44:	f01a 0f01 	tst.w	sl, #1
 8015e48:	d10e      	bne.n	8015e68 <__gethex+0x3a4>
 8015e4a:	f047 0710 	orr.w	r7, r7, #16
 8015e4e:	e033      	b.n	8015eb8 <__gethex+0x3f4>
 8015e50:	f04f 0a01 	mov.w	sl, #1
 8015e54:	e7d0      	b.n	8015df8 <__gethex+0x334>
 8015e56:	2701      	movs	r7, #1
 8015e58:	e7e2      	b.n	8015e20 <__gethex+0x35c>
 8015e5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015e5c:	f1c3 0301 	rsb	r3, r3, #1
 8015e60:	9315      	str	r3, [sp, #84]	; 0x54
 8015e62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	d0f0      	beq.n	8015e4a <__gethex+0x386>
 8015e68:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8015e6c:	f104 0314 	add.w	r3, r4, #20
 8015e70:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8015e74:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8015e78:	f04f 0c00 	mov.w	ip, #0
 8015e7c:	4618      	mov	r0, r3
 8015e7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015e82:	f1b2 3fff 	cmp.w	r2, #4294967295
 8015e86:	d01c      	beq.n	8015ec2 <__gethex+0x3fe>
 8015e88:	3201      	adds	r2, #1
 8015e8a:	6002      	str	r2, [r0, #0]
 8015e8c:	2f02      	cmp	r7, #2
 8015e8e:	f104 0314 	add.w	r3, r4, #20
 8015e92:	d13f      	bne.n	8015f14 <__gethex+0x450>
 8015e94:	f8d8 2000 	ldr.w	r2, [r8]
 8015e98:	3a01      	subs	r2, #1
 8015e9a:	42b2      	cmp	r2, r6
 8015e9c:	d10a      	bne.n	8015eb4 <__gethex+0x3f0>
 8015e9e:	1171      	asrs	r1, r6, #5
 8015ea0:	2201      	movs	r2, #1
 8015ea2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015ea6:	f006 061f 	and.w	r6, r6, #31
 8015eaa:	fa02 f606 	lsl.w	r6, r2, r6
 8015eae:	421e      	tst	r6, r3
 8015eb0:	bf18      	it	ne
 8015eb2:	4617      	movne	r7, r2
 8015eb4:	f047 0720 	orr.w	r7, r7, #32
 8015eb8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015eba:	601c      	str	r4, [r3, #0]
 8015ebc:	9b04      	ldr	r3, [sp, #16]
 8015ebe:	601d      	str	r5, [r3, #0]
 8015ec0:	e695      	b.n	8015bee <__gethex+0x12a>
 8015ec2:	4299      	cmp	r1, r3
 8015ec4:	f843 cc04 	str.w	ip, [r3, #-4]
 8015ec8:	d8d8      	bhi.n	8015e7c <__gethex+0x3b8>
 8015eca:	68a3      	ldr	r3, [r4, #8]
 8015ecc:	459b      	cmp	fp, r3
 8015ece:	db19      	blt.n	8015f04 <__gethex+0x440>
 8015ed0:	6861      	ldr	r1, [r4, #4]
 8015ed2:	ee18 0a10 	vmov	r0, s16
 8015ed6:	3101      	adds	r1, #1
 8015ed8:	f000 f994 	bl	8016204 <_Balloc>
 8015edc:	4681      	mov	r9, r0
 8015ede:	b918      	cbnz	r0, 8015ee8 <__gethex+0x424>
 8015ee0:	4b1a      	ldr	r3, [pc, #104]	; (8015f4c <__gethex+0x488>)
 8015ee2:	4602      	mov	r2, r0
 8015ee4:	2184      	movs	r1, #132	; 0x84
 8015ee6:	e6a8      	b.n	8015c3a <__gethex+0x176>
 8015ee8:	6922      	ldr	r2, [r4, #16]
 8015eea:	3202      	adds	r2, #2
 8015eec:	f104 010c 	add.w	r1, r4, #12
 8015ef0:	0092      	lsls	r2, r2, #2
 8015ef2:	300c      	adds	r0, #12
 8015ef4:	f7fc fdcc 	bl	8012a90 <memcpy>
 8015ef8:	4621      	mov	r1, r4
 8015efa:	ee18 0a10 	vmov	r0, s16
 8015efe:	f000 f9c1 	bl	8016284 <_Bfree>
 8015f02:	464c      	mov	r4, r9
 8015f04:	6923      	ldr	r3, [r4, #16]
 8015f06:	1c5a      	adds	r2, r3, #1
 8015f08:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015f0c:	6122      	str	r2, [r4, #16]
 8015f0e:	2201      	movs	r2, #1
 8015f10:	615a      	str	r2, [r3, #20]
 8015f12:	e7bb      	b.n	8015e8c <__gethex+0x3c8>
 8015f14:	6922      	ldr	r2, [r4, #16]
 8015f16:	455a      	cmp	r2, fp
 8015f18:	dd0b      	ble.n	8015f32 <__gethex+0x46e>
 8015f1a:	2101      	movs	r1, #1
 8015f1c:	4620      	mov	r0, r4
 8015f1e:	f7ff fd69 	bl	80159f4 <rshift>
 8015f22:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015f26:	3501      	adds	r5, #1
 8015f28:	42ab      	cmp	r3, r5
 8015f2a:	f6ff aed0 	blt.w	8015cce <__gethex+0x20a>
 8015f2e:	2701      	movs	r7, #1
 8015f30:	e7c0      	b.n	8015eb4 <__gethex+0x3f0>
 8015f32:	f016 061f 	ands.w	r6, r6, #31
 8015f36:	d0fa      	beq.n	8015f2e <__gethex+0x46a>
 8015f38:	449a      	add	sl, r3
 8015f3a:	f1c6 0620 	rsb	r6, r6, #32
 8015f3e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8015f42:	f000 fa55 	bl	80163f0 <__hi0bits>
 8015f46:	42b0      	cmp	r0, r6
 8015f48:	dbe7      	blt.n	8015f1a <__gethex+0x456>
 8015f4a:	e7f0      	b.n	8015f2e <__gethex+0x46a>
 8015f4c:	080183b3 	.word	0x080183b3

08015f50 <L_shift>:
 8015f50:	f1c2 0208 	rsb	r2, r2, #8
 8015f54:	0092      	lsls	r2, r2, #2
 8015f56:	b570      	push	{r4, r5, r6, lr}
 8015f58:	f1c2 0620 	rsb	r6, r2, #32
 8015f5c:	6843      	ldr	r3, [r0, #4]
 8015f5e:	6804      	ldr	r4, [r0, #0]
 8015f60:	fa03 f506 	lsl.w	r5, r3, r6
 8015f64:	432c      	orrs	r4, r5
 8015f66:	40d3      	lsrs	r3, r2
 8015f68:	6004      	str	r4, [r0, #0]
 8015f6a:	f840 3f04 	str.w	r3, [r0, #4]!
 8015f6e:	4288      	cmp	r0, r1
 8015f70:	d3f4      	bcc.n	8015f5c <L_shift+0xc>
 8015f72:	bd70      	pop	{r4, r5, r6, pc}

08015f74 <__match>:
 8015f74:	b530      	push	{r4, r5, lr}
 8015f76:	6803      	ldr	r3, [r0, #0]
 8015f78:	3301      	adds	r3, #1
 8015f7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015f7e:	b914      	cbnz	r4, 8015f86 <__match+0x12>
 8015f80:	6003      	str	r3, [r0, #0]
 8015f82:	2001      	movs	r0, #1
 8015f84:	bd30      	pop	{r4, r5, pc}
 8015f86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015f8a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8015f8e:	2d19      	cmp	r5, #25
 8015f90:	bf98      	it	ls
 8015f92:	3220      	addls	r2, #32
 8015f94:	42a2      	cmp	r2, r4
 8015f96:	d0f0      	beq.n	8015f7a <__match+0x6>
 8015f98:	2000      	movs	r0, #0
 8015f9a:	e7f3      	b.n	8015f84 <__match+0x10>

08015f9c <__hexnan>:
 8015f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fa0:	680b      	ldr	r3, [r1, #0]
 8015fa2:	6801      	ldr	r1, [r0, #0]
 8015fa4:	115e      	asrs	r6, r3, #5
 8015fa6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8015faa:	f013 031f 	ands.w	r3, r3, #31
 8015fae:	b087      	sub	sp, #28
 8015fb0:	bf18      	it	ne
 8015fb2:	3604      	addne	r6, #4
 8015fb4:	2500      	movs	r5, #0
 8015fb6:	1f37      	subs	r7, r6, #4
 8015fb8:	4682      	mov	sl, r0
 8015fba:	4690      	mov	r8, r2
 8015fbc:	9301      	str	r3, [sp, #4]
 8015fbe:	f846 5c04 	str.w	r5, [r6, #-4]
 8015fc2:	46b9      	mov	r9, r7
 8015fc4:	463c      	mov	r4, r7
 8015fc6:	9502      	str	r5, [sp, #8]
 8015fc8:	46ab      	mov	fp, r5
 8015fca:	784a      	ldrb	r2, [r1, #1]
 8015fcc:	1c4b      	adds	r3, r1, #1
 8015fce:	9303      	str	r3, [sp, #12]
 8015fd0:	b342      	cbz	r2, 8016024 <__hexnan+0x88>
 8015fd2:	4610      	mov	r0, r2
 8015fd4:	9105      	str	r1, [sp, #20]
 8015fd6:	9204      	str	r2, [sp, #16]
 8015fd8:	f7ff fd5e 	bl	8015a98 <__hexdig_fun>
 8015fdc:	2800      	cmp	r0, #0
 8015fde:	d14f      	bne.n	8016080 <__hexnan+0xe4>
 8015fe0:	9a04      	ldr	r2, [sp, #16]
 8015fe2:	9905      	ldr	r1, [sp, #20]
 8015fe4:	2a20      	cmp	r2, #32
 8015fe6:	d818      	bhi.n	801601a <__hexnan+0x7e>
 8015fe8:	9b02      	ldr	r3, [sp, #8]
 8015fea:	459b      	cmp	fp, r3
 8015fec:	dd13      	ble.n	8016016 <__hexnan+0x7a>
 8015fee:	454c      	cmp	r4, r9
 8015ff0:	d206      	bcs.n	8016000 <__hexnan+0x64>
 8015ff2:	2d07      	cmp	r5, #7
 8015ff4:	dc04      	bgt.n	8016000 <__hexnan+0x64>
 8015ff6:	462a      	mov	r2, r5
 8015ff8:	4649      	mov	r1, r9
 8015ffa:	4620      	mov	r0, r4
 8015ffc:	f7ff ffa8 	bl	8015f50 <L_shift>
 8016000:	4544      	cmp	r4, r8
 8016002:	d950      	bls.n	80160a6 <__hexnan+0x10a>
 8016004:	2300      	movs	r3, #0
 8016006:	f1a4 0904 	sub.w	r9, r4, #4
 801600a:	f844 3c04 	str.w	r3, [r4, #-4]
 801600e:	f8cd b008 	str.w	fp, [sp, #8]
 8016012:	464c      	mov	r4, r9
 8016014:	461d      	mov	r5, r3
 8016016:	9903      	ldr	r1, [sp, #12]
 8016018:	e7d7      	b.n	8015fca <__hexnan+0x2e>
 801601a:	2a29      	cmp	r2, #41	; 0x29
 801601c:	d156      	bne.n	80160cc <__hexnan+0x130>
 801601e:	3102      	adds	r1, #2
 8016020:	f8ca 1000 	str.w	r1, [sl]
 8016024:	f1bb 0f00 	cmp.w	fp, #0
 8016028:	d050      	beq.n	80160cc <__hexnan+0x130>
 801602a:	454c      	cmp	r4, r9
 801602c:	d206      	bcs.n	801603c <__hexnan+0xa0>
 801602e:	2d07      	cmp	r5, #7
 8016030:	dc04      	bgt.n	801603c <__hexnan+0xa0>
 8016032:	462a      	mov	r2, r5
 8016034:	4649      	mov	r1, r9
 8016036:	4620      	mov	r0, r4
 8016038:	f7ff ff8a 	bl	8015f50 <L_shift>
 801603c:	4544      	cmp	r4, r8
 801603e:	d934      	bls.n	80160aa <__hexnan+0x10e>
 8016040:	f1a8 0204 	sub.w	r2, r8, #4
 8016044:	4623      	mov	r3, r4
 8016046:	f853 1b04 	ldr.w	r1, [r3], #4
 801604a:	f842 1f04 	str.w	r1, [r2, #4]!
 801604e:	429f      	cmp	r7, r3
 8016050:	d2f9      	bcs.n	8016046 <__hexnan+0xaa>
 8016052:	1b3b      	subs	r3, r7, r4
 8016054:	f023 0303 	bic.w	r3, r3, #3
 8016058:	3304      	adds	r3, #4
 801605a:	3401      	adds	r4, #1
 801605c:	3e03      	subs	r6, #3
 801605e:	42b4      	cmp	r4, r6
 8016060:	bf88      	it	hi
 8016062:	2304      	movhi	r3, #4
 8016064:	4443      	add	r3, r8
 8016066:	2200      	movs	r2, #0
 8016068:	f843 2b04 	str.w	r2, [r3], #4
 801606c:	429f      	cmp	r7, r3
 801606e:	d2fb      	bcs.n	8016068 <__hexnan+0xcc>
 8016070:	683b      	ldr	r3, [r7, #0]
 8016072:	b91b      	cbnz	r3, 801607c <__hexnan+0xe0>
 8016074:	4547      	cmp	r7, r8
 8016076:	d127      	bne.n	80160c8 <__hexnan+0x12c>
 8016078:	2301      	movs	r3, #1
 801607a:	603b      	str	r3, [r7, #0]
 801607c:	2005      	movs	r0, #5
 801607e:	e026      	b.n	80160ce <__hexnan+0x132>
 8016080:	3501      	adds	r5, #1
 8016082:	2d08      	cmp	r5, #8
 8016084:	f10b 0b01 	add.w	fp, fp, #1
 8016088:	dd06      	ble.n	8016098 <__hexnan+0xfc>
 801608a:	4544      	cmp	r4, r8
 801608c:	d9c3      	bls.n	8016016 <__hexnan+0x7a>
 801608e:	2300      	movs	r3, #0
 8016090:	f844 3c04 	str.w	r3, [r4, #-4]
 8016094:	2501      	movs	r5, #1
 8016096:	3c04      	subs	r4, #4
 8016098:	6822      	ldr	r2, [r4, #0]
 801609a:	f000 000f 	and.w	r0, r0, #15
 801609e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80160a2:	6022      	str	r2, [r4, #0]
 80160a4:	e7b7      	b.n	8016016 <__hexnan+0x7a>
 80160a6:	2508      	movs	r5, #8
 80160a8:	e7b5      	b.n	8016016 <__hexnan+0x7a>
 80160aa:	9b01      	ldr	r3, [sp, #4]
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	d0df      	beq.n	8016070 <__hexnan+0xd4>
 80160b0:	f04f 32ff 	mov.w	r2, #4294967295
 80160b4:	f1c3 0320 	rsb	r3, r3, #32
 80160b8:	fa22 f303 	lsr.w	r3, r2, r3
 80160bc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80160c0:	401a      	ands	r2, r3
 80160c2:	f846 2c04 	str.w	r2, [r6, #-4]
 80160c6:	e7d3      	b.n	8016070 <__hexnan+0xd4>
 80160c8:	3f04      	subs	r7, #4
 80160ca:	e7d1      	b.n	8016070 <__hexnan+0xd4>
 80160cc:	2004      	movs	r0, #4
 80160ce:	b007      	add	sp, #28
 80160d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080160d4 <_localeconv_r>:
 80160d4:	4800      	ldr	r0, [pc, #0]	; (80160d8 <_localeconv_r+0x4>)
 80160d6:	4770      	bx	lr
 80160d8:	200001d8 	.word	0x200001d8

080160dc <_lseek_r>:
 80160dc:	b538      	push	{r3, r4, r5, lr}
 80160de:	4d07      	ldr	r5, [pc, #28]	; (80160fc <_lseek_r+0x20>)
 80160e0:	4604      	mov	r4, r0
 80160e2:	4608      	mov	r0, r1
 80160e4:	4611      	mov	r1, r2
 80160e6:	2200      	movs	r2, #0
 80160e8:	602a      	str	r2, [r5, #0]
 80160ea:	461a      	mov	r2, r3
 80160ec:	f001 f8ec 	bl	80172c8 <_lseek>
 80160f0:	1c43      	adds	r3, r0, #1
 80160f2:	d102      	bne.n	80160fa <_lseek_r+0x1e>
 80160f4:	682b      	ldr	r3, [r5, #0]
 80160f6:	b103      	cbz	r3, 80160fa <_lseek_r+0x1e>
 80160f8:	6023      	str	r3, [r4, #0]
 80160fa:	bd38      	pop	{r3, r4, r5, pc}
 80160fc:	20006900 	.word	0x20006900

08016100 <__swhatbuf_r>:
 8016100:	b570      	push	{r4, r5, r6, lr}
 8016102:	460e      	mov	r6, r1
 8016104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016108:	2900      	cmp	r1, #0
 801610a:	b096      	sub	sp, #88	; 0x58
 801610c:	4614      	mov	r4, r2
 801610e:	461d      	mov	r5, r3
 8016110:	da07      	bge.n	8016122 <__swhatbuf_r+0x22>
 8016112:	2300      	movs	r3, #0
 8016114:	602b      	str	r3, [r5, #0]
 8016116:	89b3      	ldrh	r3, [r6, #12]
 8016118:	061a      	lsls	r2, r3, #24
 801611a:	d410      	bmi.n	801613e <__swhatbuf_r+0x3e>
 801611c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016120:	e00e      	b.n	8016140 <__swhatbuf_r+0x40>
 8016122:	466a      	mov	r2, sp
 8016124:	f001 f83e 	bl	80171a4 <_fstat_r>
 8016128:	2800      	cmp	r0, #0
 801612a:	dbf2      	blt.n	8016112 <__swhatbuf_r+0x12>
 801612c:	9a01      	ldr	r2, [sp, #4]
 801612e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016132:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016136:	425a      	negs	r2, r3
 8016138:	415a      	adcs	r2, r3
 801613a:	602a      	str	r2, [r5, #0]
 801613c:	e7ee      	b.n	801611c <__swhatbuf_r+0x1c>
 801613e:	2340      	movs	r3, #64	; 0x40
 8016140:	2000      	movs	r0, #0
 8016142:	6023      	str	r3, [r4, #0]
 8016144:	b016      	add	sp, #88	; 0x58
 8016146:	bd70      	pop	{r4, r5, r6, pc}

08016148 <__smakebuf_r>:
 8016148:	898b      	ldrh	r3, [r1, #12]
 801614a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801614c:	079d      	lsls	r5, r3, #30
 801614e:	4606      	mov	r6, r0
 8016150:	460c      	mov	r4, r1
 8016152:	d507      	bpl.n	8016164 <__smakebuf_r+0x1c>
 8016154:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016158:	6023      	str	r3, [r4, #0]
 801615a:	6123      	str	r3, [r4, #16]
 801615c:	2301      	movs	r3, #1
 801615e:	6163      	str	r3, [r4, #20]
 8016160:	b002      	add	sp, #8
 8016162:	bd70      	pop	{r4, r5, r6, pc}
 8016164:	ab01      	add	r3, sp, #4
 8016166:	466a      	mov	r2, sp
 8016168:	f7ff ffca 	bl	8016100 <__swhatbuf_r>
 801616c:	9900      	ldr	r1, [sp, #0]
 801616e:	4605      	mov	r5, r0
 8016170:	4630      	mov	r0, r6
 8016172:	f7fc fcf3 	bl	8012b5c <_malloc_r>
 8016176:	b948      	cbnz	r0, 801618c <__smakebuf_r+0x44>
 8016178:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801617c:	059a      	lsls	r2, r3, #22
 801617e:	d4ef      	bmi.n	8016160 <__smakebuf_r+0x18>
 8016180:	f023 0303 	bic.w	r3, r3, #3
 8016184:	f043 0302 	orr.w	r3, r3, #2
 8016188:	81a3      	strh	r3, [r4, #12]
 801618a:	e7e3      	b.n	8016154 <__smakebuf_r+0xc>
 801618c:	4b0d      	ldr	r3, [pc, #52]	; (80161c4 <__smakebuf_r+0x7c>)
 801618e:	62b3      	str	r3, [r6, #40]	; 0x28
 8016190:	89a3      	ldrh	r3, [r4, #12]
 8016192:	6020      	str	r0, [r4, #0]
 8016194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016198:	81a3      	strh	r3, [r4, #12]
 801619a:	9b00      	ldr	r3, [sp, #0]
 801619c:	6163      	str	r3, [r4, #20]
 801619e:	9b01      	ldr	r3, [sp, #4]
 80161a0:	6120      	str	r0, [r4, #16]
 80161a2:	b15b      	cbz	r3, 80161bc <__smakebuf_r+0x74>
 80161a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80161a8:	4630      	mov	r0, r6
 80161aa:	f001 f80d 	bl	80171c8 <_isatty_r>
 80161ae:	b128      	cbz	r0, 80161bc <__smakebuf_r+0x74>
 80161b0:	89a3      	ldrh	r3, [r4, #12]
 80161b2:	f023 0303 	bic.w	r3, r3, #3
 80161b6:	f043 0301 	orr.w	r3, r3, #1
 80161ba:	81a3      	strh	r3, [r4, #12]
 80161bc:	89a0      	ldrh	r0, [r4, #12]
 80161be:	4305      	orrs	r5, r0
 80161c0:	81a5      	strh	r5, [r4, #12]
 80161c2:	e7cd      	b.n	8016160 <__smakebuf_r+0x18>
 80161c4:	0801288d 	.word	0x0801288d

080161c8 <__ascii_mbtowc>:
 80161c8:	b082      	sub	sp, #8
 80161ca:	b901      	cbnz	r1, 80161ce <__ascii_mbtowc+0x6>
 80161cc:	a901      	add	r1, sp, #4
 80161ce:	b142      	cbz	r2, 80161e2 <__ascii_mbtowc+0x1a>
 80161d0:	b14b      	cbz	r3, 80161e6 <__ascii_mbtowc+0x1e>
 80161d2:	7813      	ldrb	r3, [r2, #0]
 80161d4:	600b      	str	r3, [r1, #0]
 80161d6:	7812      	ldrb	r2, [r2, #0]
 80161d8:	1e10      	subs	r0, r2, #0
 80161da:	bf18      	it	ne
 80161dc:	2001      	movne	r0, #1
 80161de:	b002      	add	sp, #8
 80161e0:	4770      	bx	lr
 80161e2:	4610      	mov	r0, r2
 80161e4:	e7fb      	b.n	80161de <__ascii_mbtowc+0x16>
 80161e6:	f06f 0001 	mvn.w	r0, #1
 80161ea:	e7f8      	b.n	80161de <__ascii_mbtowc+0x16>

080161ec <__malloc_lock>:
 80161ec:	4801      	ldr	r0, [pc, #4]	; (80161f4 <__malloc_lock+0x8>)
 80161ee:	f7fc bc44 	b.w	8012a7a <__retarget_lock_acquire_recursive>
 80161f2:	bf00      	nop
 80161f4:	200068f8 	.word	0x200068f8

080161f8 <__malloc_unlock>:
 80161f8:	4801      	ldr	r0, [pc, #4]	; (8016200 <__malloc_unlock+0x8>)
 80161fa:	f7fc bc3f 	b.w	8012a7c <__retarget_lock_release_recursive>
 80161fe:	bf00      	nop
 8016200:	200068f8 	.word	0x200068f8

08016204 <_Balloc>:
 8016204:	b570      	push	{r4, r5, r6, lr}
 8016206:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016208:	4604      	mov	r4, r0
 801620a:	460d      	mov	r5, r1
 801620c:	b976      	cbnz	r6, 801622c <_Balloc+0x28>
 801620e:	2010      	movs	r0, #16
 8016210:	f7fc fc36 	bl	8012a80 <malloc>
 8016214:	4602      	mov	r2, r0
 8016216:	6260      	str	r0, [r4, #36]	; 0x24
 8016218:	b920      	cbnz	r0, 8016224 <_Balloc+0x20>
 801621a:	4b18      	ldr	r3, [pc, #96]	; (801627c <_Balloc+0x78>)
 801621c:	4818      	ldr	r0, [pc, #96]	; (8016280 <_Balloc+0x7c>)
 801621e:	2166      	movs	r1, #102	; 0x66
 8016220:	f000 ff90 	bl	8017144 <__assert_func>
 8016224:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016228:	6006      	str	r6, [r0, #0]
 801622a:	60c6      	str	r6, [r0, #12]
 801622c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801622e:	68f3      	ldr	r3, [r6, #12]
 8016230:	b183      	cbz	r3, 8016254 <_Balloc+0x50>
 8016232:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016234:	68db      	ldr	r3, [r3, #12]
 8016236:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801623a:	b9b8      	cbnz	r0, 801626c <_Balloc+0x68>
 801623c:	2101      	movs	r1, #1
 801623e:	fa01 f605 	lsl.w	r6, r1, r5
 8016242:	1d72      	adds	r2, r6, #5
 8016244:	0092      	lsls	r2, r2, #2
 8016246:	4620      	mov	r0, r4
 8016248:	f000 fc97 	bl	8016b7a <_calloc_r>
 801624c:	b160      	cbz	r0, 8016268 <_Balloc+0x64>
 801624e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8016252:	e00e      	b.n	8016272 <_Balloc+0x6e>
 8016254:	2221      	movs	r2, #33	; 0x21
 8016256:	2104      	movs	r1, #4
 8016258:	4620      	mov	r0, r4
 801625a:	f000 fc8e 	bl	8016b7a <_calloc_r>
 801625e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016260:	60f0      	str	r0, [r6, #12]
 8016262:	68db      	ldr	r3, [r3, #12]
 8016264:	2b00      	cmp	r3, #0
 8016266:	d1e4      	bne.n	8016232 <_Balloc+0x2e>
 8016268:	2000      	movs	r0, #0
 801626a:	bd70      	pop	{r4, r5, r6, pc}
 801626c:	6802      	ldr	r2, [r0, #0]
 801626e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016272:	2300      	movs	r3, #0
 8016274:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016278:	e7f7      	b.n	801626a <_Balloc+0x66>
 801627a:	bf00      	nop
 801627c:	0801833d 	.word	0x0801833d
 8016280:	08018444 	.word	0x08018444

08016284 <_Bfree>:
 8016284:	b570      	push	{r4, r5, r6, lr}
 8016286:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016288:	4605      	mov	r5, r0
 801628a:	460c      	mov	r4, r1
 801628c:	b976      	cbnz	r6, 80162ac <_Bfree+0x28>
 801628e:	2010      	movs	r0, #16
 8016290:	f7fc fbf6 	bl	8012a80 <malloc>
 8016294:	4602      	mov	r2, r0
 8016296:	6268      	str	r0, [r5, #36]	; 0x24
 8016298:	b920      	cbnz	r0, 80162a4 <_Bfree+0x20>
 801629a:	4b09      	ldr	r3, [pc, #36]	; (80162c0 <_Bfree+0x3c>)
 801629c:	4809      	ldr	r0, [pc, #36]	; (80162c4 <_Bfree+0x40>)
 801629e:	218a      	movs	r1, #138	; 0x8a
 80162a0:	f000 ff50 	bl	8017144 <__assert_func>
 80162a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80162a8:	6006      	str	r6, [r0, #0]
 80162aa:	60c6      	str	r6, [r0, #12]
 80162ac:	b13c      	cbz	r4, 80162be <_Bfree+0x3a>
 80162ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80162b0:	6862      	ldr	r2, [r4, #4]
 80162b2:	68db      	ldr	r3, [r3, #12]
 80162b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80162b8:	6021      	str	r1, [r4, #0]
 80162ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80162be:	bd70      	pop	{r4, r5, r6, pc}
 80162c0:	0801833d 	.word	0x0801833d
 80162c4:	08018444 	.word	0x08018444

080162c8 <__multadd>:
 80162c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162cc:	690e      	ldr	r6, [r1, #16]
 80162ce:	4607      	mov	r7, r0
 80162d0:	4698      	mov	r8, r3
 80162d2:	460c      	mov	r4, r1
 80162d4:	f101 0014 	add.w	r0, r1, #20
 80162d8:	2300      	movs	r3, #0
 80162da:	6805      	ldr	r5, [r0, #0]
 80162dc:	b2a9      	uxth	r1, r5
 80162de:	fb02 8101 	mla	r1, r2, r1, r8
 80162e2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80162e6:	0c2d      	lsrs	r5, r5, #16
 80162e8:	fb02 c505 	mla	r5, r2, r5, ip
 80162ec:	b289      	uxth	r1, r1
 80162ee:	3301      	adds	r3, #1
 80162f0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80162f4:	429e      	cmp	r6, r3
 80162f6:	f840 1b04 	str.w	r1, [r0], #4
 80162fa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80162fe:	dcec      	bgt.n	80162da <__multadd+0x12>
 8016300:	f1b8 0f00 	cmp.w	r8, #0
 8016304:	d022      	beq.n	801634c <__multadd+0x84>
 8016306:	68a3      	ldr	r3, [r4, #8]
 8016308:	42b3      	cmp	r3, r6
 801630a:	dc19      	bgt.n	8016340 <__multadd+0x78>
 801630c:	6861      	ldr	r1, [r4, #4]
 801630e:	4638      	mov	r0, r7
 8016310:	3101      	adds	r1, #1
 8016312:	f7ff ff77 	bl	8016204 <_Balloc>
 8016316:	4605      	mov	r5, r0
 8016318:	b928      	cbnz	r0, 8016326 <__multadd+0x5e>
 801631a:	4602      	mov	r2, r0
 801631c:	4b0d      	ldr	r3, [pc, #52]	; (8016354 <__multadd+0x8c>)
 801631e:	480e      	ldr	r0, [pc, #56]	; (8016358 <__multadd+0x90>)
 8016320:	21b5      	movs	r1, #181	; 0xb5
 8016322:	f000 ff0f 	bl	8017144 <__assert_func>
 8016326:	6922      	ldr	r2, [r4, #16]
 8016328:	3202      	adds	r2, #2
 801632a:	f104 010c 	add.w	r1, r4, #12
 801632e:	0092      	lsls	r2, r2, #2
 8016330:	300c      	adds	r0, #12
 8016332:	f7fc fbad 	bl	8012a90 <memcpy>
 8016336:	4621      	mov	r1, r4
 8016338:	4638      	mov	r0, r7
 801633a:	f7ff ffa3 	bl	8016284 <_Bfree>
 801633e:	462c      	mov	r4, r5
 8016340:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8016344:	3601      	adds	r6, #1
 8016346:	f8c3 8014 	str.w	r8, [r3, #20]
 801634a:	6126      	str	r6, [r4, #16]
 801634c:	4620      	mov	r0, r4
 801634e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016352:	bf00      	nop
 8016354:	080183b3 	.word	0x080183b3
 8016358:	08018444 	.word	0x08018444

0801635c <__s2b>:
 801635c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016360:	460c      	mov	r4, r1
 8016362:	4615      	mov	r5, r2
 8016364:	461f      	mov	r7, r3
 8016366:	2209      	movs	r2, #9
 8016368:	3308      	adds	r3, #8
 801636a:	4606      	mov	r6, r0
 801636c:	fb93 f3f2 	sdiv	r3, r3, r2
 8016370:	2100      	movs	r1, #0
 8016372:	2201      	movs	r2, #1
 8016374:	429a      	cmp	r2, r3
 8016376:	db09      	blt.n	801638c <__s2b+0x30>
 8016378:	4630      	mov	r0, r6
 801637a:	f7ff ff43 	bl	8016204 <_Balloc>
 801637e:	b940      	cbnz	r0, 8016392 <__s2b+0x36>
 8016380:	4602      	mov	r2, r0
 8016382:	4b19      	ldr	r3, [pc, #100]	; (80163e8 <__s2b+0x8c>)
 8016384:	4819      	ldr	r0, [pc, #100]	; (80163ec <__s2b+0x90>)
 8016386:	21ce      	movs	r1, #206	; 0xce
 8016388:	f000 fedc 	bl	8017144 <__assert_func>
 801638c:	0052      	lsls	r2, r2, #1
 801638e:	3101      	adds	r1, #1
 8016390:	e7f0      	b.n	8016374 <__s2b+0x18>
 8016392:	9b08      	ldr	r3, [sp, #32]
 8016394:	6143      	str	r3, [r0, #20]
 8016396:	2d09      	cmp	r5, #9
 8016398:	f04f 0301 	mov.w	r3, #1
 801639c:	6103      	str	r3, [r0, #16]
 801639e:	dd16      	ble.n	80163ce <__s2b+0x72>
 80163a0:	f104 0909 	add.w	r9, r4, #9
 80163a4:	46c8      	mov	r8, r9
 80163a6:	442c      	add	r4, r5
 80163a8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80163ac:	4601      	mov	r1, r0
 80163ae:	3b30      	subs	r3, #48	; 0x30
 80163b0:	220a      	movs	r2, #10
 80163b2:	4630      	mov	r0, r6
 80163b4:	f7ff ff88 	bl	80162c8 <__multadd>
 80163b8:	45a0      	cmp	r8, r4
 80163ba:	d1f5      	bne.n	80163a8 <__s2b+0x4c>
 80163bc:	f1a5 0408 	sub.w	r4, r5, #8
 80163c0:	444c      	add	r4, r9
 80163c2:	1b2d      	subs	r5, r5, r4
 80163c4:	1963      	adds	r3, r4, r5
 80163c6:	42bb      	cmp	r3, r7
 80163c8:	db04      	blt.n	80163d4 <__s2b+0x78>
 80163ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80163ce:	340a      	adds	r4, #10
 80163d0:	2509      	movs	r5, #9
 80163d2:	e7f6      	b.n	80163c2 <__s2b+0x66>
 80163d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80163d8:	4601      	mov	r1, r0
 80163da:	3b30      	subs	r3, #48	; 0x30
 80163dc:	220a      	movs	r2, #10
 80163de:	4630      	mov	r0, r6
 80163e0:	f7ff ff72 	bl	80162c8 <__multadd>
 80163e4:	e7ee      	b.n	80163c4 <__s2b+0x68>
 80163e6:	bf00      	nop
 80163e8:	080183b3 	.word	0x080183b3
 80163ec:	08018444 	.word	0x08018444

080163f0 <__hi0bits>:
 80163f0:	0c03      	lsrs	r3, r0, #16
 80163f2:	041b      	lsls	r3, r3, #16
 80163f4:	b9d3      	cbnz	r3, 801642c <__hi0bits+0x3c>
 80163f6:	0400      	lsls	r0, r0, #16
 80163f8:	2310      	movs	r3, #16
 80163fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80163fe:	bf04      	itt	eq
 8016400:	0200      	lsleq	r0, r0, #8
 8016402:	3308      	addeq	r3, #8
 8016404:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8016408:	bf04      	itt	eq
 801640a:	0100      	lsleq	r0, r0, #4
 801640c:	3304      	addeq	r3, #4
 801640e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8016412:	bf04      	itt	eq
 8016414:	0080      	lsleq	r0, r0, #2
 8016416:	3302      	addeq	r3, #2
 8016418:	2800      	cmp	r0, #0
 801641a:	db05      	blt.n	8016428 <__hi0bits+0x38>
 801641c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8016420:	f103 0301 	add.w	r3, r3, #1
 8016424:	bf08      	it	eq
 8016426:	2320      	moveq	r3, #32
 8016428:	4618      	mov	r0, r3
 801642a:	4770      	bx	lr
 801642c:	2300      	movs	r3, #0
 801642e:	e7e4      	b.n	80163fa <__hi0bits+0xa>

08016430 <__lo0bits>:
 8016430:	6803      	ldr	r3, [r0, #0]
 8016432:	f013 0207 	ands.w	r2, r3, #7
 8016436:	4601      	mov	r1, r0
 8016438:	d00b      	beq.n	8016452 <__lo0bits+0x22>
 801643a:	07da      	lsls	r2, r3, #31
 801643c:	d424      	bmi.n	8016488 <__lo0bits+0x58>
 801643e:	0798      	lsls	r0, r3, #30
 8016440:	bf49      	itett	mi
 8016442:	085b      	lsrmi	r3, r3, #1
 8016444:	089b      	lsrpl	r3, r3, #2
 8016446:	2001      	movmi	r0, #1
 8016448:	600b      	strmi	r3, [r1, #0]
 801644a:	bf5c      	itt	pl
 801644c:	600b      	strpl	r3, [r1, #0]
 801644e:	2002      	movpl	r0, #2
 8016450:	4770      	bx	lr
 8016452:	b298      	uxth	r0, r3
 8016454:	b9b0      	cbnz	r0, 8016484 <__lo0bits+0x54>
 8016456:	0c1b      	lsrs	r3, r3, #16
 8016458:	2010      	movs	r0, #16
 801645a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801645e:	bf04      	itt	eq
 8016460:	0a1b      	lsreq	r3, r3, #8
 8016462:	3008      	addeq	r0, #8
 8016464:	071a      	lsls	r2, r3, #28
 8016466:	bf04      	itt	eq
 8016468:	091b      	lsreq	r3, r3, #4
 801646a:	3004      	addeq	r0, #4
 801646c:	079a      	lsls	r2, r3, #30
 801646e:	bf04      	itt	eq
 8016470:	089b      	lsreq	r3, r3, #2
 8016472:	3002      	addeq	r0, #2
 8016474:	07da      	lsls	r2, r3, #31
 8016476:	d403      	bmi.n	8016480 <__lo0bits+0x50>
 8016478:	085b      	lsrs	r3, r3, #1
 801647a:	f100 0001 	add.w	r0, r0, #1
 801647e:	d005      	beq.n	801648c <__lo0bits+0x5c>
 8016480:	600b      	str	r3, [r1, #0]
 8016482:	4770      	bx	lr
 8016484:	4610      	mov	r0, r2
 8016486:	e7e8      	b.n	801645a <__lo0bits+0x2a>
 8016488:	2000      	movs	r0, #0
 801648a:	4770      	bx	lr
 801648c:	2020      	movs	r0, #32
 801648e:	4770      	bx	lr

08016490 <__i2b>:
 8016490:	b510      	push	{r4, lr}
 8016492:	460c      	mov	r4, r1
 8016494:	2101      	movs	r1, #1
 8016496:	f7ff feb5 	bl	8016204 <_Balloc>
 801649a:	4602      	mov	r2, r0
 801649c:	b928      	cbnz	r0, 80164aa <__i2b+0x1a>
 801649e:	4b05      	ldr	r3, [pc, #20]	; (80164b4 <__i2b+0x24>)
 80164a0:	4805      	ldr	r0, [pc, #20]	; (80164b8 <__i2b+0x28>)
 80164a2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80164a6:	f000 fe4d 	bl	8017144 <__assert_func>
 80164aa:	2301      	movs	r3, #1
 80164ac:	6144      	str	r4, [r0, #20]
 80164ae:	6103      	str	r3, [r0, #16]
 80164b0:	bd10      	pop	{r4, pc}
 80164b2:	bf00      	nop
 80164b4:	080183b3 	.word	0x080183b3
 80164b8:	08018444 	.word	0x08018444

080164bc <__multiply>:
 80164bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164c0:	4614      	mov	r4, r2
 80164c2:	690a      	ldr	r2, [r1, #16]
 80164c4:	6923      	ldr	r3, [r4, #16]
 80164c6:	429a      	cmp	r2, r3
 80164c8:	bfb8      	it	lt
 80164ca:	460b      	movlt	r3, r1
 80164cc:	460d      	mov	r5, r1
 80164ce:	bfbc      	itt	lt
 80164d0:	4625      	movlt	r5, r4
 80164d2:	461c      	movlt	r4, r3
 80164d4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80164d8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80164dc:	68ab      	ldr	r3, [r5, #8]
 80164de:	6869      	ldr	r1, [r5, #4]
 80164e0:	eb0a 0709 	add.w	r7, sl, r9
 80164e4:	42bb      	cmp	r3, r7
 80164e6:	b085      	sub	sp, #20
 80164e8:	bfb8      	it	lt
 80164ea:	3101      	addlt	r1, #1
 80164ec:	f7ff fe8a 	bl	8016204 <_Balloc>
 80164f0:	b930      	cbnz	r0, 8016500 <__multiply+0x44>
 80164f2:	4602      	mov	r2, r0
 80164f4:	4b42      	ldr	r3, [pc, #264]	; (8016600 <__multiply+0x144>)
 80164f6:	4843      	ldr	r0, [pc, #268]	; (8016604 <__multiply+0x148>)
 80164f8:	f240 115d 	movw	r1, #349	; 0x15d
 80164fc:	f000 fe22 	bl	8017144 <__assert_func>
 8016500:	f100 0614 	add.w	r6, r0, #20
 8016504:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8016508:	4633      	mov	r3, r6
 801650a:	2200      	movs	r2, #0
 801650c:	4543      	cmp	r3, r8
 801650e:	d31e      	bcc.n	801654e <__multiply+0x92>
 8016510:	f105 0c14 	add.w	ip, r5, #20
 8016514:	f104 0314 	add.w	r3, r4, #20
 8016518:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801651c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8016520:	9202      	str	r2, [sp, #8]
 8016522:	ebac 0205 	sub.w	r2, ip, r5
 8016526:	3a15      	subs	r2, #21
 8016528:	f022 0203 	bic.w	r2, r2, #3
 801652c:	3204      	adds	r2, #4
 801652e:	f105 0115 	add.w	r1, r5, #21
 8016532:	458c      	cmp	ip, r1
 8016534:	bf38      	it	cc
 8016536:	2204      	movcc	r2, #4
 8016538:	9201      	str	r2, [sp, #4]
 801653a:	9a02      	ldr	r2, [sp, #8]
 801653c:	9303      	str	r3, [sp, #12]
 801653e:	429a      	cmp	r2, r3
 8016540:	d808      	bhi.n	8016554 <__multiply+0x98>
 8016542:	2f00      	cmp	r7, #0
 8016544:	dc55      	bgt.n	80165f2 <__multiply+0x136>
 8016546:	6107      	str	r7, [r0, #16]
 8016548:	b005      	add	sp, #20
 801654a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801654e:	f843 2b04 	str.w	r2, [r3], #4
 8016552:	e7db      	b.n	801650c <__multiply+0x50>
 8016554:	f8b3 a000 	ldrh.w	sl, [r3]
 8016558:	f1ba 0f00 	cmp.w	sl, #0
 801655c:	d020      	beq.n	80165a0 <__multiply+0xe4>
 801655e:	f105 0e14 	add.w	lr, r5, #20
 8016562:	46b1      	mov	r9, r6
 8016564:	2200      	movs	r2, #0
 8016566:	f85e 4b04 	ldr.w	r4, [lr], #4
 801656a:	f8d9 b000 	ldr.w	fp, [r9]
 801656e:	b2a1      	uxth	r1, r4
 8016570:	fa1f fb8b 	uxth.w	fp, fp
 8016574:	fb0a b101 	mla	r1, sl, r1, fp
 8016578:	4411      	add	r1, r2
 801657a:	f8d9 2000 	ldr.w	r2, [r9]
 801657e:	0c24      	lsrs	r4, r4, #16
 8016580:	0c12      	lsrs	r2, r2, #16
 8016582:	fb0a 2404 	mla	r4, sl, r4, r2
 8016586:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801658a:	b289      	uxth	r1, r1
 801658c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8016590:	45f4      	cmp	ip, lr
 8016592:	f849 1b04 	str.w	r1, [r9], #4
 8016596:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801659a:	d8e4      	bhi.n	8016566 <__multiply+0xaa>
 801659c:	9901      	ldr	r1, [sp, #4]
 801659e:	5072      	str	r2, [r6, r1]
 80165a0:	9a03      	ldr	r2, [sp, #12]
 80165a2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80165a6:	3304      	adds	r3, #4
 80165a8:	f1b9 0f00 	cmp.w	r9, #0
 80165ac:	d01f      	beq.n	80165ee <__multiply+0x132>
 80165ae:	6834      	ldr	r4, [r6, #0]
 80165b0:	f105 0114 	add.w	r1, r5, #20
 80165b4:	46b6      	mov	lr, r6
 80165b6:	f04f 0a00 	mov.w	sl, #0
 80165ba:	880a      	ldrh	r2, [r1, #0]
 80165bc:	f8be b002 	ldrh.w	fp, [lr, #2]
 80165c0:	fb09 b202 	mla	r2, r9, r2, fp
 80165c4:	4492      	add	sl, r2
 80165c6:	b2a4      	uxth	r4, r4
 80165c8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80165cc:	f84e 4b04 	str.w	r4, [lr], #4
 80165d0:	f851 4b04 	ldr.w	r4, [r1], #4
 80165d4:	f8be 2000 	ldrh.w	r2, [lr]
 80165d8:	0c24      	lsrs	r4, r4, #16
 80165da:	fb09 2404 	mla	r4, r9, r4, r2
 80165de:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80165e2:	458c      	cmp	ip, r1
 80165e4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80165e8:	d8e7      	bhi.n	80165ba <__multiply+0xfe>
 80165ea:	9a01      	ldr	r2, [sp, #4]
 80165ec:	50b4      	str	r4, [r6, r2]
 80165ee:	3604      	adds	r6, #4
 80165f0:	e7a3      	b.n	801653a <__multiply+0x7e>
 80165f2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d1a5      	bne.n	8016546 <__multiply+0x8a>
 80165fa:	3f01      	subs	r7, #1
 80165fc:	e7a1      	b.n	8016542 <__multiply+0x86>
 80165fe:	bf00      	nop
 8016600:	080183b3 	.word	0x080183b3
 8016604:	08018444 	.word	0x08018444

08016608 <__pow5mult>:
 8016608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801660c:	4615      	mov	r5, r2
 801660e:	f012 0203 	ands.w	r2, r2, #3
 8016612:	4606      	mov	r6, r0
 8016614:	460f      	mov	r7, r1
 8016616:	d007      	beq.n	8016628 <__pow5mult+0x20>
 8016618:	4c25      	ldr	r4, [pc, #148]	; (80166b0 <__pow5mult+0xa8>)
 801661a:	3a01      	subs	r2, #1
 801661c:	2300      	movs	r3, #0
 801661e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016622:	f7ff fe51 	bl	80162c8 <__multadd>
 8016626:	4607      	mov	r7, r0
 8016628:	10ad      	asrs	r5, r5, #2
 801662a:	d03d      	beq.n	80166a8 <__pow5mult+0xa0>
 801662c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801662e:	b97c      	cbnz	r4, 8016650 <__pow5mult+0x48>
 8016630:	2010      	movs	r0, #16
 8016632:	f7fc fa25 	bl	8012a80 <malloc>
 8016636:	4602      	mov	r2, r0
 8016638:	6270      	str	r0, [r6, #36]	; 0x24
 801663a:	b928      	cbnz	r0, 8016648 <__pow5mult+0x40>
 801663c:	4b1d      	ldr	r3, [pc, #116]	; (80166b4 <__pow5mult+0xac>)
 801663e:	481e      	ldr	r0, [pc, #120]	; (80166b8 <__pow5mult+0xb0>)
 8016640:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8016644:	f000 fd7e 	bl	8017144 <__assert_func>
 8016648:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801664c:	6004      	str	r4, [r0, #0]
 801664e:	60c4      	str	r4, [r0, #12]
 8016650:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8016654:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016658:	b94c      	cbnz	r4, 801666e <__pow5mult+0x66>
 801665a:	f240 2171 	movw	r1, #625	; 0x271
 801665e:	4630      	mov	r0, r6
 8016660:	f7ff ff16 	bl	8016490 <__i2b>
 8016664:	2300      	movs	r3, #0
 8016666:	f8c8 0008 	str.w	r0, [r8, #8]
 801666a:	4604      	mov	r4, r0
 801666c:	6003      	str	r3, [r0, #0]
 801666e:	f04f 0900 	mov.w	r9, #0
 8016672:	07eb      	lsls	r3, r5, #31
 8016674:	d50a      	bpl.n	801668c <__pow5mult+0x84>
 8016676:	4639      	mov	r1, r7
 8016678:	4622      	mov	r2, r4
 801667a:	4630      	mov	r0, r6
 801667c:	f7ff ff1e 	bl	80164bc <__multiply>
 8016680:	4639      	mov	r1, r7
 8016682:	4680      	mov	r8, r0
 8016684:	4630      	mov	r0, r6
 8016686:	f7ff fdfd 	bl	8016284 <_Bfree>
 801668a:	4647      	mov	r7, r8
 801668c:	106d      	asrs	r5, r5, #1
 801668e:	d00b      	beq.n	80166a8 <__pow5mult+0xa0>
 8016690:	6820      	ldr	r0, [r4, #0]
 8016692:	b938      	cbnz	r0, 80166a4 <__pow5mult+0x9c>
 8016694:	4622      	mov	r2, r4
 8016696:	4621      	mov	r1, r4
 8016698:	4630      	mov	r0, r6
 801669a:	f7ff ff0f 	bl	80164bc <__multiply>
 801669e:	6020      	str	r0, [r4, #0]
 80166a0:	f8c0 9000 	str.w	r9, [r0]
 80166a4:	4604      	mov	r4, r0
 80166a6:	e7e4      	b.n	8016672 <__pow5mult+0x6a>
 80166a8:	4638      	mov	r0, r7
 80166aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80166ae:	bf00      	nop
 80166b0:	08018598 	.word	0x08018598
 80166b4:	0801833d 	.word	0x0801833d
 80166b8:	08018444 	.word	0x08018444

080166bc <__lshift>:
 80166bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80166c0:	460c      	mov	r4, r1
 80166c2:	6849      	ldr	r1, [r1, #4]
 80166c4:	6923      	ldr	r3, [r4, #16]
 80166c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80166ca:	68a3      	ldr	r3, [r4, #8]
 80166cc:	4607      	mov	r7, r0
 80166ce:	4691      	mov	r9, r2
 80166d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80166d4:	f108 0601 	add.w	r6, r8, #1
 80166d8:	42b3      	cmp	r3, r6
 80166da:	db0b      	blt.n	80166f4 <__lshift+0x38>
 80166dc:	4638      	mov	r0, r7
 80166de:	f7ff fd91 	bl	8016204 <_Balloc>
 80166e2:	4605      	mov	r5, r0
 80166e4:	b948      	cbnz	r0, 80166fa <__lshift+0x3e>
 80166e6:	4602      	mov	r2, r0
 80166e8:	4b28      	ldr	r3, [pc, #160]	; (801678c <__lshift+0xd0>)
 80166ea:	4829      	ldr	r0, [pc, #164]	; (8016790 <__lshift+0xd4>)
 80166ec:	f240 11d9 	movw	r1, #473	; 0x1d9
 80166f0:	f000 fd28 	bl	8017144 <__assert_func>
 80166f4:	3101      	adds	r1, #1
 80166f6:	005b      	lsls	r3, r3, #1
 80166f8:	e7ee      	b.n	80166d8 <__lshift+0x1c>
 80166fa:	2300      	movs	r3, #0
 80166fc:	f100 0114 	add.w	r1, r0, #20
 8016700:	f100 0210 	add.w	r2, r0, #16
 8016704:	4618      	mov	r0, r3
 8016706:	4553      	cmp	r3, sl
 8016708:	db33      	blt.n	8016772 <__lshift+0xb6>
 801670a:	6920      	ldr	r0, [r4, #16]
 801670c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016710:	f104 0314 	add.w	r3, r4, #20
 8016714:	f019 091f 	ands.w	r9, r9, #31
 8016718:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801671c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016720:	d02b      	beq.n	801677a <__lshift+0xbe>
 8016722:	f1c9 0e20 	rsb	lr, r9, #32
 8016726:	468a      	mov	sl, r1
 8016728:	2200      	movs	r2, #0
 801672a:	6818      	ldr	r0, [r3, #0]
 801672c:	fa00 f009 	lsl.w	r0, r0, r9
 8016730:	4302      	orrs	r2, r0
 8016732:	f84a 2b04 	str.w	r2, [sl], #4
 8016736:	f853 2b04 	ldr.w	r2, [r3], #4
 801673a:	459c      	cmp	ip, r3
 801673c:	fa22 f20e 	lsr.w	r2, r2, lr
 8016740:	d8f3      	bhi.n	801672a <__lshift+0x6e>
 8016742:	ebac 0304 	sub.w	r3, ip, r4
 8016746:	3b15      	subs	r3, #21
 8016748:	f023 0303 	bic.w	r3, r3, #3
 801674c:	3304      	adds	r3, #4
 801674e:	f104 0015 	add.w	r0, r4, #21
 8016752:	4584      	cmp	ip, r0
 8016754:	bf38      	it	cc
 8016756:	2304      	movcc	r3, #4
 8016758:	50ca      	str	r2, [r1, r3]
 801675a:	b10a      	cbz	r2, 8016760 <__lshift+0xa4>
 801675c:	f108 0602 	add.w	r6, r8, #2
 8016760:	3e01      	subs	r6, #1
 8016762:	4638      	mov	r0, r7
 8016764:	612e      	str	r6, [r5, #16]
 8016766:	4621      	mov	r1, r4
 8016768:	f7ff fd8c 	bl	8016284 <_Bfree>
 801676c:	4628      	mov	r0, r5
 801676e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016772:	f842 0f04 	str.w	r0, [r2, #4]!
 8016776:	3301      	adds	r3, #1
 8016778:	e7c5      	b.n	8016706 <__lshift+0x4a>
 801677a:	3904      	subs	r1, #4
 801677c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016780:	f841 2f04 	str.w	r2, [r1, #4]!
 8016784:	459c      	cmp	ip, r3
 8016786:	d8f9      	bhi.n	801677c <__lshift+0xc0>
 8016788:	e7ea      	b.n	8016760 <__lshift+0xa4>
 801678a:	bf00      	nop
 801678c:	080183b3 	.word	0x080183b3
 8016790:	08018444 	.word	0x08018444

08016794 <__mcmp>:
 8016794:	b530      	push	{r4, r5, lr}
 8016796:	6902      	ldr	r2, [r0, #16]
 8016798:	690c      	ldr	r4, [r1, #16]
 801679a:	1b12      	subs	r2, r2, r4
 801679c:	d10e      	bne.n	80167bc <__mcmp+0x28>
 801679e:	f100 0314 	add.w	r3, r0, #20
 80167a2:	3114      	adds	r1, #20
 80167a4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80167a8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80167ac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80167b0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80167b4:	42a5      	cmp	r5, r4
 80167b6:	d003      	beq.n	80167c0 <__mcmp+0x2c>
 80167b8:	d305      	bcc.n	80167c6 <__mcmp+0x32>
 80167ba:	2201      	movs	r2, #1
 80167bc:	4610      	mov	r0, r2
 80167be:	bd30      	pop	{r4, r5, pc}
 80167c0:	4283      	cmp	r3, r0
 80167c2:	d3f3      	bcc.n	80167ac <__mcmp+0x18>
 80167c4:	e7fa      	b.n	80167bc <__mcmp+0x28>
 80167c6:	f04f 32ff 	mov.w	r2, #4294967295
 80167ca:	e7f7      	b.n	80167bc <__mcmp+0x28>

080167cc <__mdiff>:
 80167cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167d0:	460c      	mov	r4, r1
 80167d2:	4606      	mov	r6, r0
 80167d4:	4611      	mov	r1, r2
 80167d6:	4620      	mov	r0, r4
 80167d8:	4617      	mov	r7, r2
 80167da:	f7ff ffdb 	bl	8016794 <__mcmp>
 80167de:	1e05      	subs	r5, r0, #0
 80167e0:	d110      	bne.n	8016804 <__mdiff+0x38>
 80167e2:	4629      	mov	r1, r5
 80167e4:	4630      	mov	r0, r6
 80167e6:	f7ff fd0d 	bl	8016204 <_Balloc>
 80167ea:	b930      	cbnz	r0, 80167fa <__mdiff+0x2e>
 80167ec:	4b39      	ldr	r3, [pc, #228]	; (80168d4 <__mdiff+0x108>)
 80167ee:	4602      	mov	r2, r0
 80167f0:	f240 2132 	movw	r1, #562	; 0x232
 80167f4:	4838      	ldr	r0, [pc, #224]	; (80168d8 <__mdiff+0x10c>)
 80167f6:	f000 fca5 	bl	8017144 <__assert_func>
 80167fa:	2301      	movs	r3, #1
 80167fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016800:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016804:	bfa4      	itt	ge
 8016806:	463b      	movge	r3, r7
 8016808:	4627      	movge	r7, r4
 801680a:	4630      	mov	r0, r6
 801680c:	6879      	ldr	r1, [r7, #4]
 801680e:	bfa6      	itte	ge
 8016810:	461c      	movge	r4, r3
 8016812:	2500      	movge	r5, #0
 8016814:	2501      	movlt	r5, #1
 8016816:	f7ff fcf5 	bl	8016204 <_Balloc>
 801681a:	b920      	cbnz	r0, 8016826 <__mdiff+0x5a>
 801681c:	4b2d      	ldr	r3, [pc, #180]	; (80168d4 <__mdiff+0x108>)
 801681e:	4602      	mov	r2, r0
 8016820:	f44f 7110 	mov.w	r1, #576	; 0x240
 8016824:	e7e6      	b.n	80167f4 <__mdiff+0x28>
 8016826:	693e      	ldr	r6, [r7, #16]
 8016828:	60c5      	str	r5, [r0, #12]
 801682a:	6925      	ldr	r5, [r4, #16]
 801682c:	f107 0114 	add.w	r1, r7, #20
 8016830:	f104 0914 	add.w	r9, r4, #20
 8016834:	f100 0e14 	add.w	lr, r0, #20
 8016838:	f107 0210 	add.w	r2, r7, #16
 801683c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8016840:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8016844:	46f2      	mov	sl, lr
 8016846:	2700      	movs	r7, #0
 8016848:	f859 3b04 	ldr.w	r3, [r9], #4
 801684c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8016850:	fa1f f883 	uxth.w	r8, r3
 8016854:	fa17 f78b 	uxtah	r7, r7, fp
 8016858:	0c1b      	lsrs	r3, r3, #16
 801685a:	eba7 0808 	sub.w	r8, r7, r8
 801685e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8016862:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8016866:	fa1f f888 	uxth.w	r8, r8
 801686a:	141f      	asrs	r7, r3, #16
 801686c:	454d      	cmp	r5, r9
 801686e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8016872:	f84a 3b04 	str.w	r3, [sl], #4
 8016876:	d8e7      	bhi.n	8016848 <__mdiff+0x7c>
 8016878:	1b2b      	subs	r3, r5, r4
 801687a:	3b15      	subs	r3, #21
 801687c:	f023 0303 	bic.w	r3, r3, #3
 8016880:	3304      	adds	r3, #4
 8016882:	3415      	adds	r4, #21
 8016884:	42a5      	cmp	r5, r4
 8016886:	bf38      	it	cc
 8016888:	2304      	movcc	r3, #4
 801688a:	4419      	add	r1, r3
 801688c:	4473      	add	r3, lr
 801688e:	469e      	mov	lr, r3
 8016890:	460d      	mov	r5, r1
 8016892:	4565      	cmp	r5, ip
 8016894:	d30e      	bcc.n	80168b4 <__mdiff+0xe8>
 8016896:	f10c 0203 	add.w	r2, ip, #3
 801689a:	1a52      	subs	r2, r2, r1
 801689c:	f022 0203 	bic.w	r2, r2, #3
 80168a0:	3903      	subs	r1, #3
 80168a2:	458c      	cmp	ip, r1
 80168a4:	bf38      	it	cc
 80168a6:	2200      	movcc	r2, #0
 80168a8:	441a      	add	r2, r3
 80168aa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80168ae:	b17b      	cbz	r3, 80168d0 <__mdiff+0x104>
 80168b0:	6106      	str	r6, [r0, #16]
 80168b2:	e7a5      	b.n	8016800 <__mdiff+0x34>
 80168b4:	f855 8b04 	ldr.w	r8, [r5], #4
 80168b8:	fa17 f488 	uxtah	r4, r7, r8
 80168bc:	1422      	asrs	r2, r4, #16
 80168be:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80168c2:	b2a4      	uxth	r4, r4
 80168c4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80168c8:	f84e 4b04 	str.w	r4, [lr], #4
 80168cc:	1417      	asrs	r7, r2, #16
 80168ce:	e7e0      	b.n	8016892 <__mdiff+0xc6>
 80168d0:	3e01      	subs	r6, #1
 80168d2:	e7ea      	b.n	80168aa <__mdiff+0xde>
 80168d4:	080183b3 	.word	0x080183b3
 80168d8:	08018444 	.word	0x08018444

080168dc <__ulp>:
 80168dc:	b082      	sub	sp, #8
 80168de:	ed8d 0b00 	vstr	d0, [sp]
 80168e2:	9b01      	ldr	r3, [sp, #4]
 80168e4:	4912      	ldr	r1, [pc, #72]	; (8016930 <__ulp+0x54>)
 80168e6:	4019      	ands	r1, r3
 80168e8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80168ec:	2900      	cmp	r1, #0
 80168ee:	dd05      	ble.n	80168fc <__ulp+0x20>
 80168f0:	2200      	movs	r2, #0
 80168f2:	460b      	mov	r3, r1
 80168f4:	ec43 2b10 	vmov	d0, r2, r3
 80168f8:	b002      	add	sp, #8
 80168fa:	4770      	bx	lr
 80168fc:	4249      	negs	r1, r1
 80168fe:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8016902:	ea4f 5021 	mov.w	r0, r1, asr #20
 8016906:	f04f 0200 	mov.w	r2, #0
 801690a:	f04f 0300 	mov.w	r3, #0
 801690e:	da04      	bge.n	801691a <__ulp+0x3e>
 8016910:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8016914:	fa41 f300 	asr.w	r3, r1, r0
 8016918:	e7ec      	b.n	80168f4 <__ulp+0x18>
 801691a:	f1a0 0114 	sub.w	r1, r0, #20
 801691e:	291e      	cmp	r1, #30
 8016920:	bfda      	itte	le
 8016922:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8016926:	fa20 f101 	lsrle.w	r1, r0, r1
 801692a:	2101      	movgt	r1, #1
 801692c:	460a      	mov	r2, r1
 801692e:	e7e1      	b.n	80168f4 <__ulp+0x18>
 8016930:	7ff00000 	.word	0x7ff00000

08016934 <__b2d>:
 8016934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016936:	6905      	ldr	r5, [r0, #16]
 8016938:	f100 0714 	add.w	r7, r0, #20
 801693c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8016940:	1f2e      	subs	r6, r5, #4
 8016942:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8016946:	4620      	mov	r0, r4
 8016948:	f7ff fd52 	bl	80163f0 <__hi0bits>
 801694c:	f1c0 0320 	rsb	r3, r0, #32
 8016950:	280a      	cmp	r0, #10
 8016952:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80169d0 <__b2d+0x9c>
 8016956:	600b      	str	r3, [r1, #0]
 8016958:	dc14      	bgt.n	8016984 <__b2d+0x50>
 801695a:	f1c0 0e0b 	rsb	lr, r0, #11
 801695e:	fa24 f10e 	lsr.w	r1, r4, lr
 8016962:	42b7      	cmp	r7, r6
 8016964:	ea41 030c 	orr.w	r3, r1, ip
 8016968:	bf34      	ite	cc
 801696a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801696e:	2100      	movcs	r1, #0
 8016970:	3015      	adds	r0, #21
 8016972:	fa04 f000 	lsl.w	r0, r4, r0
 8016976:	fa21 f10e 	lsr.w	r1, r1, lr
 801697a:	ea40 0201 	orr.w	r2, r0, r1
 801697e:	ec43 2b10 	vmov	d0, r2, r3
 8016982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016984:	42b7      	cmp	r7, r6
 8016986:	bf3a      	itte	cc
 8016988:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801698c:	f1a5 0608 	subcc.w	r6, r5, #8
 8016990:	2100      	movcs	r1, #0
 8016992:	380b      	subs	r0, #11
 8016994:	d017      	beq.n	80169c6 <__b2d+0x92>
 8016996:	f1c0 0c20 	rsb	ip, r0, #32
 801699a:	fa04 f500 	lsl.w	r5, r4, r0
 801699e:	42be      	cmp	r6, r7
 80169a0:	fa21 f40c 	lsr.w	r4, r1, ip
 80169a4:	ea45 0504 	orr.w	r5, r5, r4
 80169a8:	bf8c      	ite	hi
 80169aa:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80169ae:	2400      	movls	r4, #0
 80169b0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80169b4:	fa01 f000 	lsl.w	r0, r1, r0
 80169b8:	fa24 f40c 	lsr.w	r4, r4, ip
 80169bc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80169c0:	ea40 0204 	orr.w	r2, r0, r4
 80169c4:	e7db      	b.n	801697e <__b2d+0x4a>
 80169c6:	ea44 030c 	orr.w	r3, r4, ip
 80169ca:	460a      	mov	r2, r1
 80169cc:	e7d7      	b.n	801697e <__b2d+0x4a>
 80169ce:	bf00      	nop
 80169d0:	3ff00000 	.word	0x3ff00000

080169d4 <__d2b>:
 80169d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80169d8:	4689      	mov	r9, r1
 80169da:	2101      	movs	r1, #1
 80169dc:	ec57 6b10 	vmov	r6, r7, d0
 80169e0:	4690      	mov	r8, r2
 80169e2:	f7ff fc0f 	bl	8016204 <_Balloc>
 80169e6:	4604      	mov	r4, r0
 80169e8:	b930      	cbnz	r0, 80169f8 <__d2b+0x24>
 80169ea:	4602      	mov	r2, r0
 80169ec:	4b25      	ldr	r3, [pc, #148]	; (8016a84 <__d2b+0xb0>)
 80169ee:	4826      	ldr	r0, [pc, #152]	; (8016a88 <__d2b+0xb4>)
 80169f0:	f240 310a 	movw	r1, #778	; 0x30a
 80169f4:	f000 fba6 	bl	8017144 <__assert_func>
 80169f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80169fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016a00:	bb35      	cbnz	r5, 8016a50 <__d2b+0x7c>
 8016a02:	2e00      	cmp	r6, #0
 8016a04:	9301      	str	r3, [sp, #4]
 8016a06:	d028      	beq.n	8016a5a <__d2b+0x86>
 8016a08:	4668      	mov	r0, sp
 8016a0a:	9600      	str	r6, [sp, #0]
 8016a0c:	f7ff fd10 	bl	8016430 <__lo0bits>
 8016a10:	9900      	ldr	r1, [sp, #0]
 8016a12:	b300      	cbz	r0, 8016a56 <__d2b+0x82>
 8016a14:	9a01      	ldr	r2, [sp, #4]
 8016a16:	f1c0 0320 	rsb	r3, r0, #32
 8016a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8016a1e:	430b      	orrs	r3, r1
 8016a20:	40c2      	lsrs	r2, r0
 8016a22:	6163      	str	r3, [r4, #20]
 8016a24:	9201      	str	r2, [sp, #4]
 8016a26:	9b01      	ldr	r3, [sp, #4]
 8016a28:	61a3      	str	r3, [r4, #24]
 8016a2a:	2b00      	cmp	r3, #0
 8016a2c:	bf14      	ite	ne
 8016a2e:	2202      	movne	r2, #2
 8016a30:	2201      	moveq	r2, #1
 8016a32:	6122      	str	r2, [r4, #16]
 8016a34:	b1d5      	cbz	r5, 8016a6c <__d2b+0x98>
 8016a36:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8016a3a:	4405      	add	r5, r0
 8016a3c:	f8c9 5000 	str.w	r5, [r9]
 8016a40:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016a44:	f8c8 0000 	str.w	r0, [r8]
 8016a48:	4620      	mov	r0, r4
 8016a4a:	b003      	add	sp, #12
 8016a4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016a50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016a54:	e7d5      	b.n	8016a02 <__d2b+0x2e>
 8016a56:	6161      	str	r1, [r4, #20]
 8016a58:	e7e5      	b.n	8016a26 <__d2b+0x52>
 8016a5a:	a801      	add	r0, sp, #4
 8016a5c:	f7ff fce8 	bl	8016430 <__lo0bits>
 8016a60:	9b01      	ldr	r3, [sp, #4]
 8016a62:	6163      	str	r3, [r4, #20]
 8016a64:	2201      	movs	r2, #1
 8016a66:	6122      	str	r2, [r4, #16]
 8016a68:	3020      	adds	r0, #32
 8016a6a:	e7e3      	b.n	8016a34 <__d2b+0x60>
 8016a6c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016a70:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016a74:	f8c9 0000 	str.w	r0, [r9]
 8016a78:	6918      	ldr	r0, [r3, #16]
 8016a7a:	f7ff fcb9 	bl	80163f0 <__hi0bits>
 8016a7e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016a82:	e7df      	b.n	8016a44 <__d2b+0x70>
 8016a84:	080183b3 	.word	0x080183b3
 8016a88:	08018444 	.word	0x08018444

08016a8c <__ratio>:
 8016a8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a90:	4688      	mov	r8, r1
 8016a92:	4669      	mov	r1, sp
 8016a94:	4681      	mov	r9, r0
 8016a96:	f7ff ff4d 	bl	8016934 <__b2d>
 8016a9a:	a901      	add	r1, sp, #4
 8016a9c:	4640      	mov	r0, r8
 8016a9e:	ec55 4b10 	vmov	r4, r5, d0
 8016aa2:	f7ff ff47 	bl	8016934 <__b2d>
 8016aa6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016aaa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016aae:	eba3 0c02 	sub.w	ip, r3, r2
 8016ab2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016ab6:	1a9b      	subs	r3, r3, r2
 8016ab8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8016abc:	ec51 0b10 	vmov	r0, r1, d0
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	bfd6      	itet	le
 8016ac4:	460a      	movle	r2, r1
 8016ac6:	462a      	movgt	r2, r5
 8016ac8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016acc:	468b      	mov	fp, r1
 8016ace:	462f      	mov	r7, r5
 8016ad0:	bfd4      	ite	le
 8016ad2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8016ad6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8016ada:	4620      	mov	r0, r4
 8016adc:	ee10 2a10 	vmov	r2, s0
 8016ae0:	465b      	mov	r3, fp
 8016ae2:	4639      	mov	r1, r7
 8016ae4:	f7e9 fec2 	bl	800086c <__aeabi_ddiv>
 8016ae8:	ec41 0b10 	vmov	d0, r0, r1
 8016aec:	b003      	add	sp, #12
 8016aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016af2 <__copybits>:
 8016af2:	3901      	subs	r1, #1
 8016af4:	b570      	push	{r4, r5, r6, lr}
 8016af6:	1149      	asrs	r1, r1, #5
 8016af8:	6914      	ldr	r4, [r2, #16]
 8016afa:	3101      	adds	r1, #1
 8016afc:	f102 0314 	add.w	r3, r2, #20
 8016b00:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016b04:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016b08:	1f05      	subs	r5, r0, #4
 8016b0a:	42a3      	cmp	r3, r4
 8016b0c:	d30c      	bcc.n	8016b28 <__copybits+0x36>
 8016b0e:	1aa3      	subs	r3, r4, r2
 8016b10:	3b11      	subs	r3, #17
 8016b12:	f023 0303 	bic.w	r3, r3, #3
 8016b16:	3211      	adds	r2, #17
 8016b18:	42a2      	cmp	r2, r4
 8016b1a:	bf88      	it	hi
 8016b1c:	2300      	movhi	r3, #0
 8016b1e:	4418      	add	r0, r3
 8016b20:	2300      	movs	r3, #0
 8016b22:	4288      	cmp	r0, r1
 8016b24:	d305      	bcc.n	8016b32 <__copybits+0x40>
 8016b26:	bd70      	pop	{r4, r5, r6, pc}
 8016b28:	f853 6b04 	ldr.w	r6, [r3], #4
 8016b2c:	f845 6f04 	str.w	r6, [r5, #4]!
 8016b30:	e7eb      	b.n	8016b0a <__copybits+0x18>
 8016b32:	f840 3b04 	str.w	r3, [r0], #4
 8016b36:	e7f4      	b.n	8016b22 <__copybits+0x30>

08016b38 <__any_on>:
 8016b38:	f100 0214 	add.w	r2, r0, #20
 8016b3c:	6900      	ldr	r0, [r0, #16]
 8016b3e:	114b      	asrs	r3, r1, #5
 8016b40:	4298      	cmp	r0, r3
 8016b42:	b510      	push	{r4, lr}
 8016b44:	db11      	blt.n	8016b6a <__any_on+0x32>
 8016b46:	dd0a      	ble.n	8016b5e <__any_on+0x26>
 8016b48:	f011 011f 	ands.w	r1, r1, #31
 8016b4c:	d007      	beq.n	8016b5e <__any_on+0x26>
 8016b4e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016b52:	fa24 f001 	lsr.w	r0, r4, r1
 8016b56:	fa00 f101 	lsl.w	r1, r0, r1
 8016b5a:	428c      	cmp	r4, r1
 8016b5c:	d10b      	bne.n	8016b76 <__any_on+0x3e>
 8016b5e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016b62:	4293      	cmp	r3, r2
 8016b64:	d803      	bhi.n	8016b6e <__any_on+0x36>
 8016b66:	2000      	movs	r0, #0
 8016b68:	bd10      	pop	{r4, pc}
 8016b6a:	4603      	mov	r3, r0
 8016b6c:	e7f7      	b.n	8016b5e <__any_on+0x26>
 8016b6e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016b72:	2900      	cmp	r1, #0
 8016b74:	d0f5      	beq.n	8016b62 <__any_on+0x2a>
 8016b76:	2001      	movs	r0, #1
 8016b78:	e7f6      	b.n	8016b68 <__any_on+0x30>

08016b7a <_calloc_r>:
 8016b7a:	b513      	push	{r0, r1, r4, lr}
 8016b7c:	434a      	muls	r2, r1
 8016b7e:	4611      	mov	r1, r2
 8016b80:	9201      	str	r2, [sp, #4]
 8016b82:	f7fb ffeb 	bl	8012b5c <_malloc_r>
 8016b86:	4604      	mov	r4, r0
 8016b88:	b118      	cbz	r0, 8016b92 <_calloc_r+0x18>
 8016b8a:	9a01      	ldr	r2, [sp, #4]
 8016b8c:	2100      	movs	r1, #0
 8016b8e:	f7fb ff8d 	bl	8012aac <memset>
 8016b92:	4620      	mov	r0, r4
 8016b94:	b002      	add	sp, #8
 8016b96:	bd10      	pop	{r4, pc}

08016b98 <__ssputs_r>:
 8016b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016b9c:	688e      	ldr	r6, [r1, #8]
 8016b9e:	429e      	cmp	r6, r3
 8016ba0:	4682      	mov	sl, r0
 8016ba2:	460c      	mov	r4, r1
 8016ba4:	4690      	mov	r8, r2
 8016ba6:	461f      	mov	r7, r3
 8016ba8:	d838      	bhi.n	8016c1c <__ssputs_r+0x84>
 8016baa:	898a      	ldrh	r2, [r1, #12]
 8016bac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016bb0:	d032      	beq.n	8016c18 <__ssputs_r+0x80>
 8016bb2:	6825      	ldr	r5, [r4, #0]
 8016bb4:	6909      	ldr	r1, [r1, #16]
 8016bb6:	eba5 0901 	sub.w	r9, r5, r1
 8016bba:	6965      	ldr	r5, [r4, #20]
 8016bbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016bc0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016bc4:	3301      	adds	r3, #1
 8016bc6:	444b      	add	r3, r9
 8016bc8:	106d      	asrs	r5, r5, #1
 8016bca:	429d      	cmp	r5, r3
 8016bcc:	bf38      	it	cc
 8016bce:	461d      	movcc	r5, r3
 8016bd0:	0553      	lsls	r3, r2, #21
 8016bd2:	d531      	bpl.n	8016c38 <__ssputs_r+0xa0>
 8016bd4:	4629      	mov	r1, r5
 8016bd6:	f7fb ffc1 	bl	8012b5c <_malloc_r>
 8016bda:	4606      	mov	r6, r0
 8016bdc:	b950      	cbnz	r0, 8016bf4 <__ssputs_r+0x5c>
 8016bde:	230c      	movs	r3, #12
 8016be0:	f8ca 3000 	str.w	r3, [sl]
 8016be4:	89a3      	ldrh	r3, [r4, #12]
 8016be6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016bea:	81a3      	strh	r3, [r4, #12]
 8016bec:	f04f 30ff 	mov.w	r0, #4294967295
 8016bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016bf4:	6921      	ldr	r1, [r4, #16]
 8016bf6:	464a      	mov	r2, r9
 8016bf8:	f7fb ff4a 	bl	8012a90 <memcpy>
 8016bfc:	89a3      	ldrh	r3, [r4, #12]
 8016bfe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016c02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016c06:	81a3      	strh	r3, [r4, #12]
 8016c08:	6126      	str	r6, [r4, #16]
 8016c0a:	6165      	str	r5, [r4, #20]
 8016c0c:	444e      	add	r6, r9
 8016c0e:	eba5 0509 	sub.w	r5, r5, r9
 8016c12:	6026      	str	r6, [r4, #0]
 8016c14:	60a5      	str	r5, [r4, #8]
 8016c16:	463e      	mov	r6, r7
 8016c18:	42be      	cmp	r6, r7
 8016c1a:	d900      	bls.n	8016c1e <__ssputs_r+0x86>
 8016c1c:	463e      	mov	r6, r7
 8016c1e:	4632      	mov	r2, r6
 8016c20:	6820      	ldr	r0, [r4, #0]
 8016c22:	4641      	mov	r1, r8
 8016c24:	f000 fae0 	bl	80171e8 <memmove>
 8016c28:	68a3      	ldr	r3, [r4, #8]
 8016c2a:	6822      	ldr	r2, [r4, #0]
 8016c2c:	1b9b      	subs	r3, r3, r6
 8016c2e:	4432      	add	r2, r6
 8016c30:	60a3      	str	r3, [r4, #8]
 8016c32:	6022      	str	r2, [r4, #0]
 8016c34:	2000      	movs	r0, #0
 8016c36:	e7db      	b.n	8016bf0 <__ssputs_r+0x58>
 8016c38:	462a      	mov	r2, r5
 8016c3a:	f000 faef 	bl	801721c <_realloc_r>
 8016c3e:	4606      	mov	r6, r0
 8016c40:	2800      	cmp	r0, #0
 8016c42:	d1e1      	bne.n	8016c08 <__ssputs_r+0x70>
 8016c44:	6921      	ldr	r1, [r4, #16]
 8016c46:	4650      	mov	r0, sl
 8016c48:	f7fb ff38 	bl	8012abc <_free_r>
 8016c4c:	e7c7      	b.n	8016bde <__ssputs_r+0x46>
	...

08016c50 <_svfiprintf_r>:
 8016c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c54:	4698      	mov	r8, r3
 8016c56:	898b      	ldrh	r3, [r1, #12]
 8016c58:	061b      	lsls	r3, r3, #24
 8016c5a:	b09d      	sub	sp, #116	; 0x74
 8016c5c:	4607      	mov	r7, r0
 8016c5e:	460d      	mov	r5, r1
 8016c60:	4614      	mov	r4, r2
 8016c62:	d50e      	bpl.n	8016c82 <_svfiprintf_r+0x32>
 8016c64:	690b      	ldr	r3, [r1, #16]
 8016c66:	b963      	cbnz	r3, 8016c82 <_svfiprintf_r+0x32>
 8016c68:	2140      	movs	r1, #64	; 0x40
 8016c6a:	f7fb ff77 	bl	8012b5c <_malloc_r>
 8016c6e:	6028      	str	r0, [r5, #0]
 8016c70:	6128      	str	r0, [r5, #16]
 8016c72:	b920      	cbnz	r0, 8016c7e <_svfiprintf_r+0x2e>
 8016c74:	230c      	movs	r3, #12
 8016c76:	603b      	str	r3, [r7, #0]
 8016c78:	f04f 30ff 	mov.w	r0, #4294967295
 8016c7c:	e0d1      	b.n	8016e22 <_svfiprintf_r+0x1d2>
 8016c7e:	2340      	movs	r3, #64	; 0x40
 8016c80:	616b      	str	r3, [r5, #20]
 8016c82:	2300      	movs	r3, #0
 8016c84:	9309      	str	r3, [sp, #36]	; 0x24
 8016c86:	2320      	movs	r3, #32
 8016c88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016c8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8016c90:	2330      	movs	r3, #48	; 0x30
 8016c92:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8016e3c <_svfiprintf_r+0x1ec>
 8016c96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016c9a:	f04f 0901 	mov.w	r9, #1
 8016c9e:	4623      	mov	r3, r4
 8016ca0:	469a      	mov	sl, r3
 8016ca2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016ca6:	b10a      	cbz	r2, 8016cac <_svfiprintf_r+0x5c>
 8016ca8:	2a25      	cmp	r2, #37	; 0x25
 8016caa:	d1f9      	bne.n	8016ca0 <_svfiprintf_r+0x50>
 8016cac:	ebba 0b04 	subs.w	fp, sl, r4
 8016cb0:	d00b      	beq.n	8016cca <_svfiprintf_r+0x7a>
 8016cb2:	465b      	mov	r3, fp
 8016cb4:	4622      	mov	r2, r4
 8016cb6:	4629      	mov	r1, r5
 8016cb8:	4638      	mov	r0, r7
 8016cba:	f7ff ff6d 	bl	8016b98 <__ssputs_r>
 8016cbe:	3001      	adds	r0, #1
 8016cc0:	f000 80aa 	beq.w	8016e18 <_svfiprintf_r+0x1c8>
 8016cc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016cc6:	445a      	add	r2, fp
 8016cc8:	9209      	str	r2, [sp, #36]	; 0x24
 8016cca:	f89a 3000 	ldrb.w	r3, [sl]
 8016cce:	2b00      	cmp	r3, #0
 8016cd0:	f000 80a2 	beq.w	8016e18 <_svfiprintf_r+0x1c8>
 8016cd4:	2300      	movs	r3, #0
 8016cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8016cda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016cde:	f10a 0a01 	add.w	sl, sl, #1
 8016ce2:	9304      	str	r3, [sp, #16]
 8016ce4:	9307      	str	r3, [sp, #28]
 8016ce6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016cea:	931a      	str	r3, [sp, #104]	; 0x68
 8016cec:	4654      	mov	r4, sl
 8016cee:	2205      	movs	r2, #5
 8016cf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016cf4:	4851      	ldr	r0, [pc, #324]	; (8016e3c <_svfiprintf_r+0x1ec>)
 8016cf6:	f7e9 fa83 	bl	8000200 <memchr>
 8016cfa:	9a04      	ldr	r2, [sp, #16]
 8016cfc:	b9d8      	cbnz	r0, 8016d36 <_svfiprintf_r+0xe6>
 8016cfe:	06d0      	lsls	r0, r2, #27
 8016d00:	bf44      	itt	mi
 8016d02:	2320      	movmi	r3, #32
 8016d04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016d08:	0711      	lsls	r1, r2, #28
 8016d0a:	bf44      	itt	mi
 8016d0c:	232b      	movmi	r3, #43	; 0x2b
 8016d0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016d12:	f89a 3000 	ldrb.w	r3, [sl]
 8016d16:	2b2a      	cmp	r3, #42	; 0x2a
 8016d18:	d015      	beq.n	8016d46 <_svfiprintf_r+0xf6>
 8016d1a:	9a07      	ldr	r2, [sp, #28]
 8016d1c:	4654      	mov	r4, sl
 8016d1e:	2000      	movs	r0, #0
 8016d20:	f04f 0c0a 	mov.w	ip, #10
 8016d24:	4621      	mov	r1, r4
 8016d26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016d2a:	3b30      	subs	r3, #48	; 0x30
 8016d2c:	2b09      	cmp	r3, #9
 8016d2e:	d94e      	bls.n	8016dce <_svfiprintf_r+0x17e>
 8016d30:	b1b0      	cbz	r0, 8016d60 <_svfiprintf_r+0x110>
 8016d32:	9207      	str	r2, [sp, #28]
 8016d34:	e014      	b.n	8016d60 <_svfiprintf_r+0x110>
 8016d36:	eba0 0308 	sub.w	r3, r0, r8
 8016d3a:	fa09 f303 	lsl.w	r3, r9, r3
 8016d3e:	4313      	orrs	r3, r2
 8016d40:	9304      	str	r3, [sp, #16]
 8016d42:	46a2      	mov	sl, r4
 8016d44:	e7d2      	b.n	8016cec <_svfiprintf_r+0x9c>
 8016d46:	9b03      	ldr	r3, [sp, #12]
 8016d48:	1d19      	adds	r1, r3, #4
 8016d4a:	681b      	ldr	r3, [r3, #0]
 8016d4c:	9103      	str	r1, [sp, #12]
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	bfbb      	ittet	lt
 8016d52:	425b      	neglt	r3, r3
 8016d54:	f042 0202 	orrlt.w	r2, r2, #2
 8016d58:	9307      	strge	r3, [sp, #28]
 8016d5a:	9307      	strlt	r3, [sp, #28]
 8016d5c:	bfb8      	it	lt
 8016d5e:	9204      	strlt	r2, [sp, #16]
 8016d60:	7823      	ldrb	r3, [r4, #0]
 8016d62:	2b2e      	cmp	r3, #46	; 0x2e
 8016d64:	d10c      	bne.n	8016d80 <_svfiprintf_r+0x130>
 8016d66:	7863      	ldrb	r3, [r4, #1]
 8016d68:	2b2a      	cmp	r3, #42	; 0x2a
 8016d6a:	d135      	bne.n	8016dd8 <_svfiprintf_r+0x188>
 8016d6c:	9b03      	ldr	r3, [sp, #12]
 8016d6e:	1d1a      	adds	r2, r3, #4
 8016d70:	681b      	ldr	r3, [r3, #0]
 8016d72:	9203      	str	r2, [sp, #12]
 8016d74:	2b00      	cmp	r3, #0
 8016d76:	bfb8      	it	lt
 8016d78:	f04f 33ff 	movlt.w	r3, #4294967295
 8016d7c:	3402      	adds	r4, #2
 8016d7e:	9305      	str	r3, [sp, #20]
 8016d80:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8016e4c <_svfiprintf_r+0x1fc>
 8016d84:	7821      	ldrb	r1, [r4, #0]
 8016d86:	2203      	movs	r2, #3
 8016d88:	4650      	mov	r0, sl
 8016d8a:	f7e9 fa39 	bl	8000200 <memchr>
 8016d8e:	b140      	cbz	r0, 8016da2 <_svfiprintf_r+0x152>
 8016d90:	2340      	movs	r3, #64	; 0x40
 8016d92:	eba0 000a 	sub.w	r0, r0, sl
 8016d96:	fa03 f000 	lsl.w	r0, r3, r0
 8016d9a:	9b04      	ldr	r3, [sp, #16]
 8016d9c:	4303      	orrs	r3, r0
 8016d9e:	3401      	adds	r4, #1
 8016da0:	9304      	str	r3, [sp, #16]
 8016da2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016da6:	4826      	ldr	r0, [pc, #152]	; (8016e40 <_svfiprintf_r+0x1f0>)
 8016da8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016dac:	2206      	movs	r2, #6
 8016dae:	f7e9 fa27 	bl	8000200 <memchr>
 8016db2:	2800      	cmp	r0, #0
 8016db4:	d038      	beq.n	8016e28 <_svfiprintf_r+0x1d8>
 8016db6:	4b23      	ldr	r3, [pc, #140]	; (8016e44 <_svfiprintf_r+0x1f4>)
 8016db8:	bb1b      	cbnz	r3, 8016e02 <_svfiprintf_r+0x1b2>
 8016dba:	9b03      	ldr	r3, [sp, #12]
 8016dbc:	3307      	adds	r3, #7
 8016dbe:	f023 0307 	bic.w	r3, r3, #7
 8016dc2:	3308      	adds	r3, #8
 8016dc4:	9303      	str	r3, [sp, #12]
 8016dc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016dc8:	4433      	add	r3, r6
 8016dca:	9309      	str	r3, [sp, #36]	; 0x24
 8016dcc:	e767      	b.n	8016c9e <_svfiprintf_r+0x4e>
 8016dce:	fb0c 3202 	mla	r2, ip, r2, r3
 8016dd2:	460c      	mov	r4, r1
 8016dd4:	2001      	movs	r0, #1
 8016dd6:	e7a5      	b.n	8016d24 <_svfiprintf_r+0xd4>
 8016dd8:	2300      	movs	r3, #0
 8016dda:	3401      	adds	r4, #1
 8016ddc:	9305      	str	r3, [sp, #20]
 8016dde:	4619      	mov	r1, r3
 8016de0:	f04f 0c0a 	mov.w	ip, #10
 8016de4:	4620      	mov	r0, r4
 8016de6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016dea:	3a30      	subs	r2, #48	; 0x30
 8016dec:	2a09      	cmp	r2, #9
 8016dee:	d903      	bls.n	8016df8 <_svfiprintf_r+0x1a8>
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	d0c5      	beq.n	8016d80 <_svfiprintf_r+0x130>
 8016df4:	9105      	str	r1, [sp, #20]
 8016df6:	e7c3      	b.n	8016d80 <_svfiprintf_r+0x130>
 8016df8:	fb0c 2101 	mla	r1, ip, r1, r2
 8016dfc:	4604      	mov	r4, r0
 8016dfe:	2301      	movs	r3, #1
 8016e00:	e7f0      	b.n	8016de4 <_svfiprintf_r+0x194>
 8016e02:	ab03      	add	r3, sp, #12
 8016e04:	9300      	str	r3, [sp, #0]
 8016e06:	462a      	mov	r2, r5
 8016e08:	4b0f      	ldr	r3, [pc, #60]	; (8016e48 <_svfiprintf_r+0x1f8>)
 8016e0a:	a904      	add	r1, sp, #16
 8016e0c:	4638      	mov	r0, r7
 8016e0e:	f7fb ff9f 	bl	8012d50 <_printf_float>
 8016e12:	1c42      	adds	r2, r0, #1
 8016e14:	4606      	mov	r6, r0
 8016e16:	d1d6      	bne.n	8016dc6 <_svfiprintf_r+0x176>
 8016e18:	89ab      	ldrh	r3, [r5, #12]
 8016e1a:	065b      	lsls	r3, r3, #25
 8016e1c:	f53f af2c 	bmi.w	8016c78 <_svfiprintf_r+0x28>
 8016e20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016e22:	b01d      	add	sp, #116	; 0x74
 8016e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e28:	ab03      	add	r3, sp, #12
 8016e2a:	9300      	str	r3, [sp, #0]
 8016e2c:	462a      	mov	r2, r5
 8016e2e:	4b06      	ldr	r3, [pc, #24]	; (8016e48 <_svfiprintf_r+0x1f8>)
 8016e30:	a904      	add	r1, sp, #16
 8016e32:	4638      	mov	r0, r7
 8016e34:	f7fc fa30 	bl	8013298 <_printf_i>
 8016e38:	e7eb      	b.n	8016e12 <_svfiprintf_r+0x1c2>
 8016e3a:	bf00      	nop
 8016e3c:	080185a4 	.word	0x080185a4
 8016e40:	080185ae 	.word	0x080185ae
 8016e44:	08012d51 	.word	0x08012d51
 8016e48:	08016b99 	.word	0x08016b99
 8016e4c:	080185aa 	.word	0x080185aa

08016e50 <__sfputc_r>:
 8016e50:	6893      	ldr	r3, [r2, #8]
 8016e52:	3b01      	subs	r3, #1
 8016e54:	2b00      	cmp	r3, #0
 8016e56:	b410      	push	{r4}
 8016e58:	6093      	str	r3, [r2, #8]
 8016e5a:	da08      	bge.n	8016e6e <__sfputc_r+0x1e>
 8016e5c:	6994      	ldr	r4, [r2, #24]
 8016e5e:	42a3      	cmp	r3, r4
 8016e60:	db01      	blt.n	8016e66 <__sfputc_r+0x16>
 8016e62:	290a      	cmp	r1, #10
 8016e64:	d103      	bne.n	8016e6e <__sfputc_r+0x1e>
 8016e66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016e6a:	f7fd bda7 	b.w	80149bc <__swbuf_r>
 8016e6e:	6813      	ldr	r3, [r2, #0]
 8016e70:	1c58      	adds	r0, r3, #1
 8016e72:	6010      	str	r0, [r2, #0]
 8016e74:	7019      	strb	r1, [r3, #0]
 8016e76:	4608      	mov	r0, r1
 8016e78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016e7c:	4770      	bx	lr

08016e7e <__sfputs_r>:
 8016e7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e80:	4606      	mov	r6, r0
 8016e82:	460f      	mov	r7, r1
 8016e84:	4614      	mov	r4, r2
 8016e86:	18d5      	adds	r5, r2, r3
 8016e88:	42ac      	cmp	r4, r5
 8016e8a:	d101      	bne.n	8016e90 <__sfputs_r+0x12>
 8016e8c:	2000      	movs	r0, #0
 8016e8e:	e007      	b.n	8016ea0 <__sfputs_r+0x22>
 8016e90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016e94:	463a      	mov	r2, r7
 8016e96:	4630      	mov	r0, r6
 8016e98:	f7ff ffda 	bl	8016e50 <__sfputc_r>
 8016e9c:	1c43      	adds	r3, r0, #1
 8016e9e:	d1f3      	bne.n	8016e88 <__sfputs_r+0xa>
 8016ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016ea4 <_vfiprintf_r>:
 8016ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ea8:	460d      	mov	r5, r1
 8016eaa:	b09d      	sub	sp, #116	; 0x74
 8016eac:	4614      	mov	r4, r2
 8016eae:	4698      	mov	r8, r3
 8016eb0:	4606      	mov	r6, r0
 8016eb2:	b118      	cbz	r0, 8016ebc <_vfiprintf_r+0x18>
 8016eb4:	6983      	ldr	r3, [r0, #24]
 8016eb6:	b90b      	cbnz	r3, 8016ebc <_vfiprintf_r+0x18>
 8016eb8:	f7fb fd1c 	bl	80128f4 <__sinit>
 8016ebc:	4b89      	ldr	r3, [pc, #548]	; (80170e4 <_vfiprintf_r+0x240>)
 8016ebe:	429d      	cmp	r5, r3
 8016ec0:	d11b      	bne.n	8016efa <_vfiprintf_r+0x56>
 8016ec2:	6875      	ldr	r5, [r6, #4]
 8016ec4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016ec6:	07d9      	lsls	r1, r3, #31
 8016ec8:	d405      	bmi.n	8016ed6 <_vfiprintf_r+0x32>
 8016eca:	89ab      	ldrh	r3, [r5, #12]
 8016ecc:	059a      	lsls	r2, r3, #22
 8016ece:	d402      	bmi.n	8016ed6 <_vfiprintf_r+0x32>
 8016ed0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016ed2:	f7fb fdd2 	bl	8012a7a <__retarget_lock_acquire_recursive>
 8016ed6:	89ab      	ldrh	r3, [r5, #12]
 8016ed8:	071b      	lsls	r3, r3, #28
 8016eda:	d501      	bpl.n	8016ee0 <_vfiprintf_r+0x3c>
 8016edc:	692b      	ldr	r3, [r5, #16]
 8016ede:	b9eb      	cbnz	r3, 8016f1c <_vfiprintf_r+0x78>
 8016ee0:	4629      	mov	r1, r5
 8016ee2:	4630      	mov	r0, r6
 8016ee4:	f7fd fdce 	bl	8014a84 <__swsetup_r>
 8016ee8:	b1c0      	cbz	r0, 8016f1c <_vfiprintf_r+0x78>
 8016eea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016eec:	07dc      	lsls	r4, r3, #31
 8016eee:	d50e      	bpl.n	8016f0e <_vfiprintf_r+0x6a>
 8016ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8016ef4:	b01d      	add	sp, #116	; 0x74
 8016ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016efa:	4b7b      	ldr	r3, [pc, #492]	; (80170e8 <_vfiprintf_r+0x244>)
 8016efc:	429d      	cmp	r5, r3
 8016efe:	d101      	bne.n	8016f04 <_vfiprintf_r+0x60>
 8016f00:	68b5      	ldr	r5, [r6, #8]
 8016f02:	e7df      	b.n	8016ec4 <_vfiprintf_r+0x20>
 8016f04:	4b79      	ldr	r3, [pc, #484]	; (80170ec <_vfiprintf_r+0x248>)
 8016f06:	429d      	cmp	r5, r3
 8016f08:	bf08      	it	eq
 8016f0a:	68f5      	ldreq	r5, [r6, #12]
 8016f0c:	e7da      	b.n	8016ec4 <_vfiprintf_r+0x20>
 8016f0e:	89ab      	ldrh	r3, [r5, #12]
 8016f10:	0598      	lsls	r0, r3, #22
 8016f12:	d4ed      	bmi.n	8016ef0 <_vfiprintf_r+0x4c>
 8016f14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016f16:	f7fb fdb1 	bl	8012a7c <__retarget_lock_release_recursive>
 8016f1a:	e7e9      	b.n	8016ef0 <_vfiprintf_r+0x4c>
 8016f1c:	2300      	movs	r3, #0
 8016f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8016f20:	2320      	movs	r3, #32
 8016f22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016f26:	f8cd 800c 	str.w	r8, [sp, #12]
 8016f2a:	2330      	movs	r3, #48	; 0x30
 8016f2c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80170f0 <_vfiprintf_r+0x24c>
 8016f30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016f34:	f04f 0901 	mov.w	r9, #1
 8016f38:	4623      	mov	r3, r4
 8016f3a:	469a      	mov	sl, r3
 8016f3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016f40:	b10a      	cbz	r2, 8016f46 <_vfiprintf_r+0xa2>
 8016f42:	2a25      	cmp	r2, #37	; 0x25
 8016f44:	d1f9      	bne.n	8016f3a <_vfiprintf_r+0x96>
 8016f46:	ebba 0b04 	subs.w	fp, sl, r4
 8016f4a:	d00b      	beq.n	8016f64 <_vfiprintf_r+0xc0>
 8016f4c:	465b      	mov	r3, fp
 8016f4e:	4622      	mov	r2, r4
 8016f50:	4629      	mov	r1, r5
 8016f52:	4630      	mov	r0, r6
 8016f54:	f7ff ff93 	bl	8016e7e <__sfputs_r>
 8016f58:	3001      	adds	r0, #1
 8016f5a:	f000 80aa 	beq.w	80170b2 <_vfiprintf_r+0x20e>
 8016f5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016f60:	445a      	add	r2, fp
 8016f62:	9209      	str	r2, [sp, #36]	; 0x24
 8016f64:	f89a 3000 	ldrb.w	r3, [sl]
 8016f68:	2b00      	cmp	r3, #0
 8016f6a:	f000 80a2 	beq.w	80170b2 <_vfiprintf_r+0x20e>
 8016f6e:	2300      	movs	r3, #0
 8016f70:	f04f 32ff 	mov.w	r2, #4294967295
 8016f74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016f78:	f10a 0a01 	add.w	sl, sl, #1
 8016f7c:	9304      	str	r3, [sp, #16]
 8016f7e:	9307      	str	r3, [sp, #28]
 8016f80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016f84:	931a      	str	r3, [sp, #104]	; 0x68
 8016f86:	4654      	mov	r4, sl
 8016f88:	2205      	movs	r2, #5
 8016f8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016f8e:	4858      	ldr	r0, [pc, #352]	; (80170f0 <_vfiprintf_r+0x24c>)
 8016f90:	f7e9 f936 	bl	8000200 <memchr>
 8016f94:	9a04      	ldr	r2, [sp, #16]
 8016f96:	b9d8      	cbnz	r0, 8016fd0 <_vfiprintf_r+0x12c>
 8016f98:	06d1      	lsls	r1, r2, #27
 8016f9a:	bf44      	itt	mi
 8016f9c:	2320      	movmi	r3, #32
 8016f9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016fa2:	0713      	lsls	r3, r2, #28
 8016fa4:	bf44      	itt	mi
 8016fa6:	232b      	movmi	r3, #43	; 0x2b
 8016fa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016fac:	f89a 3000 	ldrb.w	r3, [sl]
 8016fb0:	2b2a      	cmp	r3, #42	; 0x2a
 8016fb2:	d015      	beq.n	8016fe0 <_vfiprintf_r+0x13c>
 8016fb4:	9a07      	ldr	r2, [sp, #28]
 8016fb6:	4654      	mov	r4, sl
 8016fb8:	2000      	movs	r0, #0
 8016fba:	f04f 0c0a 	mov.w	ip, #10
 8016fbe:	4621      	mov	r1, r4
 8016fc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016fc4:	3b30      	subs	r3, #48	; 0x30
 8016fc6:	2b09      	cmp	r3, #9
 8016fc8:	d94e      	bls.n	8017068 <_vfiprintf_r+0x1c4>
 8016fca:	b1b0      	cbz	r0, 8016ffa <_vfiprintf_r+0x156>
 8016fcc:	9207      	str	r2, [sp, #28]
 8016fce:	e014      	b.n	8016ffa <_vfiprintf_r+0x156>
 8016fd0:	eba0 0308 	sub.w	r3, r0, r8
 8016fd4:	fa09 f303 	lsl.w	r3, r9, r3
 8016fd8:	4313      	orrs	r3, r2
 8016fda:	9304      	str	r3, [sp, #16]
 8016fdc:	46a2      	mov	sl, r4
 8016fde:	e7d2      	b.n	8016f86 <_vfiprintf_r+0xe2>
 8016fe0:	9b03      	ldr	r3, [sp, #12]
 8016fe2:	1d19      	adds	r1, r3, #4
 8016fe4:	681b      	ldr	r3, [r3, #0]
 8016fe6:	9103      	str	r1, [sp, #12]
 8016fe8:	2b00      	cmp	r3, #0
 8016fea:	bfbb      	ittet	lt
 8016fec:	425b      	neglt	r3, r3
 8016fee:	f042 0202 	orrlt.w	r2, r2, #2
 8016ff2:	9307      	strge	r3, [sp, #28]
 8016ff4:	9307      	strlt	r3, [sp, #28]
 8016ff6:	bfb8      	it	lt
 8016ff8:	9204      	strlt	r2, [sp, #16]
 8016ffa:	7823      	ldrb	r3, [r4, #0]
 8016ffc:	2b2e      	cmp	r3, #46	; 0x2e
 8016ffe:	d10c      	bne.n	801701a <_vfiprintf_r+0x176>
 8017000:	7863      	ldrb	r3, [r4, #1]
 8017002:	2b2a      	cmp	r3, #42	; 0x2a
 8017004:	d135      	bne.n	8017072 <_vfiprintf_r+0x1ce>
 8017006:	9b03      	ldr	r3, [sp, #12]
 8017008:	1d1a      	adds	r2, r3, #4
 801700a:	681b      	ldr	r3, [r3, #0]
 801700c:	9203      	str	r2, [sp, #12]
 801700e:	2b00      	cmp	r3, #0
 8017010:	bfb8      	it	lt
 8017012:	f04f 33ff 	movlt.w	r3, #4294967295
 8017016:	3402      	adds	r4, #2
 8017018:	9305      	str	r3, [sp, #20]
 801701a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017100 <_vfiprintf_r+0x25c>
 801701e:	7821      	ldrb	r1, [r4, #0]
 8017020:	2203      	movs	r2, #3
 8017022:	4650      	mov	r0, sl
 8017024:	f7e9 f8ec 	bl	8000200 <memchr>
 8017028:	b140      	cbz	r0, 801703c <_vfiprintf_r+0x198>
 801702a:	2340      	movs	r3, #64	; 0x40
 801702c:	eba0 000a 	sub.w	r0, r0, sl
 8017030:	fa03 f000 	lsl.w	r0, r3, r0
 8017034:	9b04      	ldr	r3, [sp, #16]
 8017036:	4303      	orrs	r3, r0
 8017038:	3401      	adds	r4, #1
 801703a:	9304      	str	r3, [sp, #16]
 801703c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017040:	482c      	ldr	r0, [pc, #176]	; (80170f4 <_vfiprintf_r+0x250>)
 8017042:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017046:	2206      	movs	r2, #6
 8017048:	f7e9 f8da 	bl	8000200 <memchr>
 801704c:	2800      	cmp	r0, #0
 801704e:	d03f      	beq.n	80170d0 <_vfiprintf_r+0x22c>
 8017050:	4b29      	ldr	r3, [pc, #164]	; (80170f8 <_vfiprintf_r+0x254>)
 8017052:	bb1b      	cbnz	r3, 801709c <_vfiprintf_r+0x1f8>
 8017054:	9b03      	ldr	r3, [sp, #12]
 8017056:	3307      	adds	r3, #7
 8017058:	f023 0307 	bic.w	r3, r3, #7
 801705c:	3308      	adds	r3, #8
 801705e:	9303      	str	r3, [sp, #12]
 8017060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017062:	443b      	add	r3, r7
 8017064:	9309      	str	r3, [sp, #36]	; 0x24
 8017066:	e767      	b.n	8016f38 <_vfiprintf_r+0x94>
 8017068:	fb0c 3202 	mla	r2, ip, r2, r3
 801706c:	460c      	mov	r4, r1
 801706e:	2001      	movs	r0, #1
 8017070:	e7a5      	b.n	8016fbe <_vfiprintf_r+0x11a>
 8017072:	2300      	movs	r3, #0
 8017074:	3401      	adds	r4, #1
 8017076:	9305      	str	r3, [sp, #20]
 8017078:	4619      	mov	r1, r3
 801707a:	f04f 0c0a 	mov.w	ip, #10
 801707e:	4620      	mov	r0, r4
 8017080:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017084:	3a30      	subs	r2, #48	; 0x30
 8017086:	2a09      	cmp	r2, #9
 8017088:	d903      	bls.n	8017092 <_vfiprintf_r+0x1ee>
 801708a:	2b00      	cmp	r3, #0
 801708c:	d0c5      	beq.n	801701a <_vfiprintf_r+0x176>
 801708e:	9105      	str	r1, [sp, #20]
 8017090:	e7c3      	b.n	801701a <_vfiprintf_r+0x176>
 8017092:	fb0c 2101 	mla	r1, ip, r1, r2
 8017096:	4604      	mov	r4, r0
 8017098:	2301      	movs	r3, #1
 801709a:	e7f0      	b.n	801707e <_vfiprintf_r+0x1da>
 801709c:	ab03      	add	r3, sp, #12
 801709e:	9300      	str	r3, [sp, #0]
 80170a0:	462a      	mov	r2, r5
 80170a2:	4b16      	ldr	r3, [pc, #88]	; (80170fc <_vfiprintf_r+0x258>)
 80170a4:	a904      	add	r1, sp, #16
 80170a6:	4630      	mov	r0, r6
 80170a8:	f7fb fe52 	bl	8012d50 <_printf_float>
 80170ac:	4607      	mov	r7, r0
 80170ae:	1c78      	adds	r0, r7, #1
 80170b0:	d1d6      	bne.n	8017060 <_vfiprintf_r+0x1bc>
 80170b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80170b4:	07d9      	lsls	r1, r3, #31
 80170b6:	d405      	bmi.n	80170c4 <_vfiprintf_r+0x220>
 80170b8:	89ab      	ldrh	r3, [r5, #12]
 80170ba:	059a      	lsls	r2, r3, #22
 80170bc:	d402      	bmi.n	80170c4 <_vfiprintf_r+0x220>
 80170be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80170c0:	f7fb fcdc 	bl	8012a7c <__retarget_lock_release_recursive>
 80170c4:	89ab      	ldrh	r3, [r5, #12]
 80170c6:	065b      	lsls	r3, r3, #25
 80170c8:	f53f af12 	bmi.w	8016ef0 <_vfiprintf_r+0x4c>
 80170cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80170ce:	e711      	b.n	8016ef4 <_vfiprintf_r+0x50>
 80170d0:	ab03      	add	r3, sp, #12
 80170d2:	9300      	str	r3, [sp, #0]
 80170d4:	462a      	mov	r2, r5
 80170d6:	4b09      	ldr	r3, [pc, #36]	; (80170fc <_vfiprintf_r+0x258>)
 80170d8:	a904      	add	r1, sp, #16
 80170da:	4630      	mov	r0, r6
 80170dc:	f7fc f8dc 	bl	8013298 <_printf_i>
 80170e0:	e7e4      	b.n	80170ac <_vfiprintf_r+0x208>
 80170e2:	bf00      	nop
 80170e4:	0801825c 	.word	0x0801825c
 80170e8:	0801827c 	.word	0x0801827c
 80170ec:	0801823c 	.word	0x0801823c
 80170f0:	080185a4 	.word	0x080185a4
 80170f4:	080185ae 	.word	0x080185ae
 80170f8:	08012d51 	.word	0x08012d51
 80170fc:	08016e7f 	.word	0x08016e7f
 8017100:	080185aa 	.word	0x080185aa

08017104 <_read_r>:
 8017104:	b538      	push	{r3, r4, r5, lr}
 8017106:	4d07      	ldr	r5, [pc, #28]	; (8017124 <_read_r+0x20>)
 8017108:	4604      	mov	r4, r0
 801710a:	4608      	mov	r0, r1
 801710c:	4611      	mov	r1, r2
 801710e:	2200      	movs	r2, #0
 8017110:	602a      	str	r2, [r5, #0]
 8017112:	461a      	mov	r2, r3
 8017114:	f000 f8e0 	bl	80172d8 <_read>
 8017118:	1c43      	adds	r3, r0, #1
 801711a:	d102      	bne.n	8017122 <_read_r+0x1e>
 801711c:	682b      	ldr	r3, [r5, #0]
 801711e:	b103      	cbz	r3, 8017122 <_read_r+0x1e>
 8017120:	6023      	str	r3, [r4, #0]
 8017122:	bd38      	pop	{r3, r4, r5, pc}
 8017124:	20006900 	.word	0x20006900

08017128 <__ascii_wctomb>:
 8017128:	b149      	cbz	r1, 801713e <__ascii_wctomb+0x16>
 801712a:	2aff      	cmp	r2, #255	; 0xff
 801712c:	bf85      	ittet	hi
 801712e:	238a      	movhi	r3, #138	; 0x8a
 8017130:	6003      	strhi	r3, [r0, #0]
 8017132:	700a      	strbls	r2, [r1, #0]
 8017134:	f04f 30ff 	movhi.w	r0, #4294967295
 8017138:	bf98      	it	ls
 801713a:	2001      	movls	r0, #1
 801713c:	4770      	bx	lr
 801713e:	4608      	mov	r0, r1
 8017140:	4770      	bx	lr
	...

08017144 <__assert_func>:
 8017144:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017146:	4614      	mov	r4, r2
 8017148:	461a      	mov	r2, r3
 801714a:	4b09      	ldr	r3, [pc, #36]	; (8017170 <__assert_func+0x2c>)
 801714c:	681b      	ldr	r3, [r3, #0]
 801714e:	4605      	mov	r5, r0
 8017150:	68d8      	ldr	r0, [r3, #12]
 8017152:	b14c      	cbz	r4, 8017168 <__assert_func+0x24>
 8017154:	4b07      	ldr	r3, [pc, #28]	; (8017174 <__assert_func+0x30>)
 8017156:	9100      	str	r1, [sp, #0]
 8017158:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801715c:	4906      	ldr	r1, [pc, #24]	; (8017178 <__assert_func+0x34>)
 801715e:	462b      	mov	r3, r5
 8017160:	f000 f80e 	bl	8017180 <fiprintf>
 8017164:	f7fb fb60 	bl	8012828 <abort>
 8017168:	4b04      	ldr	r3, [pc, #16]	; (801717c <__assert_func+0x38>)
 801716a:	461c      	mov	r4, r3
 801716c:	e7f3      	b.n	8017156 <__assert_func+0x12>
 801716e:	bf00      	nop
 8017170:	20000080 	.word	0x20000080
 8017174:	080185b5 	.word	0x080185b5
 8017178:	080185c2 	.word	0x080185c2
 801717c:	080185f0 	.word	0x080185f0

08017180 <fiprintf>:
 8017180:	b40e      	push	{r1, r2, r3}
 8017182:	b503      	push	{r0, r1, lr}
 8017184:	4601      	mov	r1, r0
 8017186:	ab03      	add	r3, sp, #12
 8017188:	4805      	ldr	r0, [pc, #20]	; (80171a0 <fiprintf+0x20>)
 801718a:	f853 2b04 	ldr.w	r2, [r3], #4
 801718e:	6800      	ldr	r0, [r0, #0]
 8017190:	9301      	str	r3, [sp, #4]
 8017192:	f7ff fe87 	bl	8016ea4 <_vfiprintf_r>
 8017196:	b002      	add	sp, #8
 8017198:	f85d eb04 	ldr.w	lr, [sp], #4
 801719c:	b003      	add	sp, #12
 801719e:	4770      	bx	lr
 80171a0:	20000080 	.word	0x20000080

080171a4 <_fstat_r>:
 80171a4:	b538      	push	{r3, r4, r5, lr}
 80171a6:	4d07      	ldr	r5, [pc, #28]	; (80171c4 <_fstat_r+0x20>)
 80171a8:	2300      	movs	r3, #0
 80171aa:	4604      	mov	r4, r0
 80171ac:	4608      	mov	r0, r1
 80171ae:	4611      	mov	r1, r2
 80171b0:	602b      	str	r3, [r5, #0]
 80171b2:	f000 f869 	bl	8017288 <_fstat>
 80171b6:	1c43      	adds	r3, r0, #1
 80171b8:	d102      	bne.n	80171c0 <_fstat_r+0x1c>
 80171ba:	682b      	ldr	r3, [r5, #0]
 80171bc:	b103      	cbz	r3, 80171c0 <_fstat_r+0x1c>
 80171be:	6023      	str	r3, [r4, #0]
 80171c0:	bd38      	pop	{r3, r4, r5, pc}
 80171c2:	bf00      	nop
 80171c4:	20006900 	.word	0x20006900

080171c8 <_isatty_r>:
 80171c8:	b538      	push	{r3, r4, r5, lr}
 80171ca:	4d06      	ldr	r5, [pc, #24]	; (80171e4 <_isatty_r+0x1c>)
 80171cc:	2300      	movs	r3, #0
 80171ce:	4604      	mov	r4, r0
 80171d0:	4608      	mov	r0, r1
 80171d2:	602b      	str	r3, [r5, #0]
 80171d4:	f000 f868 	bl	80172a8 <_isatty>
 80171d8:	1c43      	adds	r3, r0, #1
 80171da:	d102      	bne.n	80171e2 <_isatty_r+0x1a>
 80171dc:	682b      	ldr	r3, [r5, #0]
 80171de:	b103      	cbz	r3, 80171e2 <_isatty_r+0x1a>
 80171e0:	6023      	str	r3, [r4, #0]
 80171e2:	bd38      	pop	{r3, r4, r5, pc}
 80171e4:	20006900 	.word	0x20006900

080171e8 <memmove>:
 80171e8:	4288      	cmp	r0, r1
 80171ea:	b510      	push	{r4, lr}
 80171ec:	eb01 0402 	add.w	r4, r1, r2
 80171f0:	d902      	bls.n	80171f8 <memmove+0x10>
 80171f2:	4284      	cmp	r4, r0
 80171f4:	4623      	mov	r3, r4
 80171f6:	d807      	bhi.n	8017208 <memmove+0x20>
 80171f8:	1e43      	subs	r3, r0, #1
 80171fa:	42a1      	cmp	r1, r4
 80171fc:	d008      	beq.n	8017210 <memmove+0x28>
 80171fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017202:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017206:	e7f8      	b.n	80171fa <memmove+0x12>
 8017208:	4402      	add	r2, r0
 801720a:	4601      	mov	r1, r0
 801720c:	428a      	cmp	r2, r1
 801720e:	d100      	bne.n	8017212 <memmove+0x2a>
 8017210:	bd10      	pop	{r4, pc}
 8017212:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017216:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801721a:	e7f7      	b.n	801720c <memmove+0x24>

0801721c <_realloc_r>:
 801721c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801721e:	4607      	mov	r7, r0
 8017220:	4614      	mov	r4, r2
 8017222:	460e      	mov	r6, r1
 8017224:	b921      	cbnz	r1, 8017230 <_realloc_r+0x14>
 8017226:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801722a:	4611      	mov	r1, r2
 801722c:	f7fb bc96 	b.w	8012b5c <_malloc_r>
 8017230:	b922      	cbnz	r2, 801723c <_realloc_r+0x20>
 8017232:	f7fb fc43 	bl	8012abc <_free_r>
 8017236:	4625      	mov	r5, r4
 8017238:	4628      	mov	r0, r5
 801723a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801723c:	f000 f814 	bl	8017268 <_malloc_usable_size_r>
 8017240:	42a0      	cmp	r0, r4
 8017242:	d20f      	bcs.n	8017264 <_realloc_r+0x48>
 8017244:	4621      	mov	r1, r4
 8017246:	4638      	mov	r0, r7
 8017248:	f7fb fc88 	bl	8012b5c <_malloc_r>
 801724c:	4605      	mov	r5, r0
 801724e:	2800      	cmp	r0, #0
 8017250:	d0f2      	beq.n	8017238 <_realloc_r+0x1c>
 8017252:	4631      	mov	r1, r6
 8017254:	4622      	mov	r2, r4
 8017256:	f7fb fc1b 	bl	8012a90 <memcpy>
 801725a:	4631      	mov	r1, r6
 801725c:	4638      	mov	r0, r7
 801725e:	f7fb fc2d 	bl	8012abc <_free_r>
 8017262:	e7e9      	b.n	8017238 <_realloc_r+0x1c>
 8017264:	4635      	mov	r5, r6
 8017266:	e7e7      	b.n	8017238 <_realloc_r+0x1c>

08017268 <_malloc_usable_size_r>:
 8017268:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801726c:	1f18      	subs	r0, r3, #4
 801726e:	2b00      	cmp	r3, #0
 8017270:	bfbc      	itt	lt
 8017272:	580b      	ldrlt	r3, [r1, r0]
 8017274:	18c0      	addlt	r0, r0, r3
 8017276:	4770      	bx	lr

08017278 <_close>:
 8017278:	4b02      	ldr	r3, [pc, #8]	; (8017284 <_close+0xc>)
 801727a:	2258      	movs	r2, #88	; 0x58
 801727c:	601a      	str	r2, [r3, #0]
 801727e:	f04f 30ff 	mov.w	r0, #4294967295
 8017282:	4770      	bx	lr
 8017284:	20006900 	.word	0x20006900

08017288 <_fstat>:
 8017288:	4b02      	ldr	r3, [pc, #8]	; (8017294 <_fstat+0xc>)
 801728a:	2258      	movs	r2, #88	; 0x58
 801728c:	601a      	str	r2, [r3, #0]
 801728e:	f04f 30ff 	mov.w	r0, #4294967295
 8017292:	4770      	bx	lr
 8017294:	20006900 	.word	0x20006900

08017298 <_getpid>:
 8017298:	4b02      	ldr	r3, [pc, #8]	; (80172a4 <_getpid+0xc>)
 801729a:	2258      	movs	r2, #88	; 0x58
 801729c:	601a      	str	r2, [r3, #0]
 801729e:	f04f 30ff 	mov.w	r0, #4294967295
 80172a2:	4770      	bx	lr
 80172a4:	20006900 	.word	0x20006900

080172a8 <_isatty>:
 80172a8:	4b02      	ldr	r3, [pc, #8]	; (80172b4 <_isatty+0xc>)
 80172aa:	2258      	movs	r2, #88	; 0x58
 80172ac:	601a      	str	r2, [r3, #0]
 80172ae:	2000      	movs	r0, #0
 80172b0:	4770      	bx	lr
 80172b2:	bf00      	nop
 80172b4:	20006900 	.word	0x20006900

080172b8 <_kill>:
 80172b8:	4b02      	ldr	r3, [pc, #8]	; (80172c4 <_kill+0xc>)
 80172ba:	2258      	movs	r2, #88	; 0x58
 80172bc:	601a      	str	r2, [r3, #0]
 80172be:	f04f 30ff 	mov.w	r0, #4294967295
 80172c2:	4770      	bx	lr
 80172c4:	20006900 	.word	0x20006900

080172c8 <_lseek>:
 80172c8:	4b02      	ldr	r3, [pc, #8]	; (80172d4 <_lseek+0xc>)
 80172ca:	2258      	movs	r2, #88	; 0x58
 80172cc:	601a      	str	r2, [r3, #0]
 80172ce:	f04f 30ff 	mov.w	r0, #4294967295
 80172d2:	4770      	bx	lr
 80172d4:	20006900 	.word	0x20006900

080172d8 <_read>:
 80172d8:	4b02      	ldr	r3, [pc, #8]	; (80172e4 <_read+0xc>)
 80172da:	2258      	movs	r2, #88	; 0x58
 80172dc:	601a      	str	r2, [r3, #0]
 80172de:	f04f 30ff 	mov.w	r0, #4294967295
 80172e2:	4770      	bx	lr
 80172e4:	20006900 	.word	0x20006900

080172e8 <_sbrk>:
 80172e8:	4b04      	ldr	r3, [pc, #16]	; (80172fc <_sbrk+0x14>)
 80172ea:	6819      	ldr	r1, [r3, #0]
 80172ec:	4602      	mov	r2, r0
 80172ee:	b909      	cbnz	r1, 80172f4 <_sbrk+0xc>
 80172f0:	4903      	ldr	r1, [pc, #12]	; (8017300 <_sbrk+0x18>)
 80172f2:	6019      	str	r1, [r3, #0]
 80172f4:	6818      	ldr	r0, [r3, #0]
 80172f6:	4402      	add	r2, r0
 80172f8:	601a      	str	r2, [r3, #0]
 80172fa:	4770      	bx	lr
 80172fc:	20004f7c 	.word	0x20004f7c
 8017300:	20006908 	.word	0x20006908

08017304 <_write>:
 8017304:	4b02      	ldr	r3, [pc, #8]	; (8017310 <_write+0xc>)
 8017306:	2258      	movs	r2, #88	; 0x58
 8017308:	601a      	str	r2, [r3, #0]
 801730a:	f04f 30ff 	mov.w	r0, #4294967295
 801730e:	4770      	bx	lr
 8017310:	20006900 	.word	0x20006900

08017314 <_exit>:
 8017314:	e7fe      	b.n	8017314 <_exit>
	...

08017318 <_init>:
 8017318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801731a:	bf00      	nop
 801731c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801731e:	bc08      	pop	{r3}
 8017320:	469e      	mov	lr, r3
 8017322:	4770      	bx	lr

08017324 <_fini>:
 8017324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017326:	bf00      	nop
 8017328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801732a:	bc08      	pop	{r3}
 801732c:	469e      	mov	lr, r3
 801732e:	4770      	bx	lr
