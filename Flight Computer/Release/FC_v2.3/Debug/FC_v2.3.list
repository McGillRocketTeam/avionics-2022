
FC_v2.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016dd8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000125c  08016f88  08016f88  00026f88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080181e4  080181e4  00030254  2**0
                  CONTENTS
  4 .ARM          00000008  080181e4  080181e4  000281e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080181ec  080181ec  00030254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080181ec  080181ec  000281ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080181f4  080181f4  000281f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000254  20000000  080181f8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030254  2**0
                  CONTENTS
 10 .bss          00006634  20000254  20000254  00030254  2**2
                  ALLOC
 11 ._user_heap_stack 00000a00  20006888  20006888  00030254  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030254  2**0
                  CONTENTS, READONLY
 13 .debug_info   000549c3  00000000  00000000  00030284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000086cd  00000000  00000000  00084c47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003600  00000000  00000000  0008d318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003318  00000000  00000000  00090918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00035277  00000000  00000000  00093c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003fa6e  00000000  00000000  000c8ea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010f4f4  00000000  00000000  00108915  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00217e09  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000fc24  00000000  00000000  00217e5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000cc  00000000  00000000  00227a80  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  00227b4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000254 	.word	0x20000254
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08016f70 	.word	0x08016f70

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000258 	.word	0x20000258
 80001ec:	08016f70 	.word	0x08016f70

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <println>:

#include <MRT_helpers.h>
#include <MRT_setup.h>
#include <tim.h>

void println(char* s){
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t*) s, strlen(s), HAL_MAX_DELAY);
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff f8eb 	bl	80001f0 <strlen>
 800101a:	4603      	mov	r3, r0
 800101c:	b29a      	uxth	r2, r3
 800101e:	f04f 33ff 	mov.w	r3, #4294967295
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	4806      	ldr	r0, [pc, #24]	; (8001040 <println+0x34>)
 8001026:	f009 fd78 	bl	800ab1a <HAL_UART_Transmit>
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t*) "\r\n", 2, HAL_MAX_DELAY);
 800102a:	f04f 33ff 	mov.w	r3, #4294967295
 800102e:	2202      	movs	r2, #2
 8001030:	4904      	ldr	r1, [pc, #16]	; (8001044 <println+0x38>)
 8001032:	4803      	ldr	r0, [pc, #12]	; (8001040 <println+0x34>)
 8001034:	f009 fd71 	bl	800ab1a <HAL_UART_Transmit>
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	200052c4 	.word	0x200052c4
 8001044:	08016f88 	.word	0x08016f88

08001048 <print>:

void print(char* s){
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t*) s, strlen(s), HAL_MAX_DELAY);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff f8cd 	bl	80001f0 <strlen>
 8001056:	4603      	mov	r3, r0
 8001058:	b29a      	uxth	r2, r3
 800105a:	f04f 33ff 	mov.w	r3, #4294967295
 800105e:	6879      	ldr	r1, [r7, #4]
 8001060:	4803      	ldr	r0, [pc, #12]	; (8001070 <print+0x28>)
 8001062:	f009 fd5a 	bl	800ab1a <HAL_UART_Transmit>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200052c4 	.word	0x200052c4

08001074 <MRT_Init>:


//**************************************************//
//PUBLIC FUNCTIONS

void MRT_Init(void){
 8001074:	b580      	push	{r7, lr}
 8001076:	b0c0      	sub	sp, #256	; 0x100
 8001078:	af00      	add	r7, sp, #0
	print("\r\n\r\n/********MRT Init********/\r\n");
 800107a:	4812      	ldr	r0, [pc, #72]	; (80010c4 <MRT_Init+0x50>)
 800107c:	f7ff ffe4 	bl	8001048 <print>

	MRT_Reinitialize_Peripherals();
 8001080:	f000 f922 	bl	80012c8 <MRT_Reinitialize_Peripherals>
	MRT_external_flash_Init();
 8001084:	f001 faa6 	bl	80025d4 <MRT_external_flash_Init>
	MRT_reset_info();
 8001088:	f000 f826 	bl	80010d8 <MRT_reset_info>
	print("OK\r\n");
	#endif

	//RTC
	HAL_IWDG_Refresh(&hiwdg);
	MRT_rtc_Init();
 800108c:	f002 fb7c 	bl	8003788 <MRT_rtc_Init>
	#if MEMORY_THREAD

		//SD card
		#if SD_CARD_
			HAL_IWDG_Refresh(&hiwdg);
			sd_init_dynamic_filename("FC", "", filename);
 8001090:	4a0d      	ldr	r2, [pc, #52]	; (80010c8 <MRT_Init+0x54>)
 8001092:	490e      	ldr	r1, [pc, #56]	; (80010cc <MRT_Init+0x58>)
 8001094:	480e      	ldr	r0, [pc, #56]	; (80010d0 <MRT_Init+0x5c>)
 8001096:	f001 fc0b 	bl	80028b0 <sd_init_dynamic_filename>
		  checkForI2CDevices(huart8,hi2c1);
		  checkForI2CDevices(huart8,hi2c2);
		  checkForI2CDevices(huart8,hi2c3);
		#endif

		MRT_i2c_sensors_Init();
 800109a:	f003 f82d 	bl	80040f8 <MRT_i2c_sensors_Init>

#define TX_BUF_DIM 256
char buffer[TX_BUF_DIM];

	while(1){
		HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 800109e:	2201      	movs	r2, #1
 80010a0:	2104      	movs	r1, #4
 80010a2:	480c      	ldr	r0, [pc, #48]	; (80010d4 <MRT_Init+0x60>)
 80010a4:	f004 fc52 	bl	800594c <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80010a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010ac:	f003 ff2a 	bl	8004f04 <HAL_Delay>
		  memset(buffer, 0, TX_BUF_DIM);
		  sprintf(buffer, "Temperature [degC]:%6.2f\r\n", lps22hh_temperature_degC);
		  HAL_UART_Transmit(&DEBUG_UART, buffer, strlen(buffer), HAL_MAX_DELAY);
		  */

		HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 80010b0:	2200      	movs	r2, #0
 80010b2:	2104      	movs	r1, #4
 80010b4:	4807      	ldr	r0, [pc, #28]	; (80010d4 <MRT_Init+0x60>)
 80010b6:	f004 fc49 	bl	800594c <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80010ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010be:	f003 ff21 	bl	8004f04 <HAL_Delay>
		HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 80010c2:	e7ec      	b.n	800109e <MRT_Init+0x2a>
 80010c4:	08016f8c 	.word	0x08016f8c
 80010c8:	20004fc8 	.word	0x20004fc8
 80010cc:	08016fb0 	.word	0x08016fb0
 80010d0:	08016fb4 	.word	0x08016fb4
 80010d4:	40020800 	.word	0x40020800

080010d8 <MRT_reset_info>:
	}

}


void MRT_reset_info(void){
 80010d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010da:	b0a7      	sub	sp, #156	; 0x9c
 80010dc:	af04      	add	r7, sp, #16

	  char buffer[100];
	  sprintf(buffer,"Reset: %i,  WU: %i,  IWDG: %i\r\nPrevious RTC time: %i:%i:%i\r\n",reset_flag, wu_flag, iwdg_flag, prev_hours, prev_min, prev_sec);
 80010de:	4b62      	ldr	r3, [pc, #392]	; (8001268 <MRT_reset_info+0x190>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	461d      	mov	r5, r3
 80010e4:	4b61      	ldr	r3, [pc, #388]	; (800126c <MRT_reset_info+0x194>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	461e      	mov	r6, r3
 80010ea:	4b61      	ldr	r3, [pc, #388]	; (8001270 <MRT_reset_info+0x198>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	461a      	mov	r2, r3
 80010f0:	4b60      	ldr	r3, [pc, #384]	; (8001274 <MRT_reset_info+0x19c>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	4619      	mov	r1, r3
 80010f6:	4b60      	ldr	r3, [pc, #384]	; (8001278 <MRT_reset_info+0x1a0>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	461c      	mov	r4, r3
 80010fc:	4b5f      	ldr	r3, [pc, #380]	; (800127c <MRT_reset_info+0x1a4>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	f107 0020 	add.w	r0, r7, #32
 8001104:	9303      	str	r3, [sp, #12]
 8001106:	9402      	str	r4, [sp, #8]
 8001108:	9101      	str	r1, [sp, #4]
 800110a:	9200      	str	r2, [sp, #0]
 800110c:	4633      	mov	r3, r6
 800110e:	462a      	mov	r2, r5
 8001110:	495b      	ldr	r1, [pc, #364]	; (8001280 <MRT_reset_info+0x1a8>)
 8001112:	f012 fa67 	bl	80135e4 <siprintf>
	  print(buffer);
 8001116:	f107 0320 	add.w	r3, r7, #32
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff ff94 	bl	8001048 <print>

	  //Check if IWDG is being deactivated
	  if (iwdg_flag==1){
 8001120:	4b53      	ldr	r3, [pc, #332]	; (8001270 <MRT_reset_info+0x198>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d11a      	bne.n	800115e <MRT_reset_info+0x86>
		  print("Deactivating IWDG\r\n");
 8001128:	4856      	ldr	r0, [pc, #344]	; (8001284 <MRT_reset_info+0x1ac>)
 800112a:	f7ff ff8d 	bl	8001048 <print>

		  iwdg_flag = 0; //Flip flag
 800112e:	4b50      	ldr	r3, [pc, #320]	; (8001270 <MRT_reset_info+0x198>)
 8001130:	2200      	movs	r2, #0
 8001132:	701a      	strb	r2, [r3, #0]

		  //Write new flag to flash memory
		  flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 8001134:	4b4e      	ldr	r3, [pc, #312]	; (8001270 <MRT_reset_info+0x198>)
 8001136:	781a      	ldrb	r2, [r3, #0]
 8001138:	4b53      	ldr	r3, [pc, #332]	; (8001288 <MRT_reset_info+0x1b0>)
 800113a:	709a      	strb	r2, [r3, #2]
		  W25qxx_EraseSector(1);
 800113c:	2001      	movs	r0, #1
 800113e:	f002 f81f 	bl	8003180 <W25qxx_EraseSector>
		  W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8001142:	2305      	movs	r3, #5
 8001144:	2200      	movs	r2, #0
 8001146:	2101      	movs	r1, #1
 8001148:	484f      	ldr	r0, [pc, #316]	; (8001288 <MRT_reset_info+0x1b0>)
 800114a:	f002 f963 	bl	8003414 <W25qxx_WriteSector>

		  HAL_Delay(1000);
 800114e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001152:	f003 fed7 	bl	8004f04 <HAL_Delay>

		  //Go to sleep
		  MRT_StandByMode(SLEEP_TIME);
 8001156:	f648 40a0 	movw	r0, #36000	; 0x8ca0
 800115a:	f002 fbd7 	bl	800390c <MRT_StandByMode>
	  }


	  //Check if we are after waking up (and at which wake up we are at)
	  if (wu_flag>0){
 800115e:	4b43      	ldr	r3, [pc, #268]	; (800126c <MRT_reset_info+0x194>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d02b      	beq.n	80011be <MRT_reset_info+0xe6>
		  char buf[30];
		  sprintf(buf, "FC wake up %i\r\n", wu_flag);
 8001166:	4b41      	ldr	r3, [pc, #260]	; (800126c <MRT_reset_info+0x194>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	461a      	mov	r2, r3
 800116c:	463b      	mov	r3, r7
 800116e:	4947      	ldr	r1, [pc, #284]	; (800128c <MRT_reset_info+0x1b4>)
 8001170:	4618      	mov	r0, r3
 8001172:	f012 fa37 	bl	80135e4 <siprintf>
		  print(buf);
 8001176:	463b      	mov	r3, r7
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff65 	bl	8001048 <print>

		  print("Resetting RTC time\r\n");
 800117e:	4844      	ldr	r0, [pc, #272]	; (8001290 <MRT_reset_info+0x1b8>)
 8001180:	f7ff ff62 	bl	8001048 <print>

		  //Clear RTC time (last recorded)
		  W25qxx_EraseSector(2);
 8001184:	2002      	movs	r0, #2
 8001186:	f001 fffb 	bl	8003180 <W25qxx_EraseSector>
		  W25qxx_WriteSector(RTC_TIME_NULL_BUFFER, 2, RTC_TIME_OFFSET, 3);
 800118a:	2303      	movs	r3, #3
 800118c:	2200      	movs	r2, #0
 800118e:	2102      	movs	r1, #2
 8001190:	4840      	ldr	r0, [pc, #256]	; (8001294 <MRT_reset_info+0x1bc>)
 8001192:	f002 f93f 	bl	8003414 <W25qxx_WriteSector>

		  //Update variables (to 0)
		  for (int i = 0; i < 3; i++){
 8001196:	2300      	movs	r3, #0
 8001198:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800119c:	e00b      	b.n	80011b6 <MRT_reset_info+0xde>
			  *flash_time[i] = 0x0;
 800119e:	4a3e      	ldr	r2, [pc, #248]	; (8001298 <MRT_reset_info+0x1c0>)
 80011a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80011a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i < 3; i++){
 80011ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80011b0:	3301      	adds	r3, #1
 80011b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80011b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	ddef      	ble.n	800119e <MRT_reset_info+0xc6>

	  }


	  //Check if we start from the beginning
	  if (reset_flag==0){
 80011be:	4b2a      	ldr	r3, [pc, #168]	; (8001268 <MRT_reset_info+0x190>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d112      	bne.n	80011ec <MRT_reset_info+0x114>
		  print("FC restarted\r\n");
 80011c6:	4835      	ldr	r0, [pc, #212]	; (800129c <MRT_reset_info+0x1c4>)
 80011c8:	f7ff ff3e 	bl	8001048 <print>

		  reset_flag = 1; //Flip flag
 80011cc:	4b26      	ldr	r3, [pc, #152]	; (8001268 <MRT_reset_info+0x190>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	701a      	strb	r2, [r3, #0]

		  //Write new flag to flash memory
	      flash_flags_buffer[RESET_FLAG_OFFSET] = reset_flag;
 80011d2:	4b25      	ldr	r3, [pc, #148]	; (8001268 <MRT_reset_info+0x190>)
 80011d4:	781a      	ldrb	r2, [r3, #0]
 80011d6:	4b2c      	ldr	r3, [pc, #176]	; (8001288 <MRT_reset_info+0x1b0>)
 80011d8:	701a      	strb	r2, [r3, #0]
		  W25qxx_EraseSector(1);
 80011da:	2001      	movs	r0, #1
 80011dc:	f001 ffd0 	bl	8003180 <W25qxx_EraseSector>
		  W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 80011e0:	2305      	movs	r3, #5
 80011e2:	2200      	movs	r2, #0
 80011e4:	2101      	movs	r1, #1
 80011e6:	4828      	ldr	r0, [pc, #160]	; (8001288 <MRT_reset_info+0x1b0>)
 80011e8:	f002 f914 	bl	8003414 <W25qxx_WriteSector>
	  }


	  //Check if before or after apogee
	  if (apogee_flag == 0){
 80011ec:	4b2c      	ldr	r3, [pc, #176]	; (80012a0 <MRT_reset_info+0x1c8>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d103      	bne.n	80011fc <MRT_reset_info+0x124>
		  print("Pre-apogee\r\n");
 80011f4:	482b      	ldr	r0, [pc, #172]	; (80012a4 <MRT_reset_info+0x1cc>)
 80011f6:	f7ff ff27 	bl	8001048 <print>
 80011fa:	e006      	b.n	800120a <MRT_reset_info+0x132>
	  }
	  else if(apogee_flag==1){
 80011fc:	4b28      	ldr	r3, [pc, #160]	; (80012a0 <MRT_reset_info+0x1c8>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d102      	bne.n	800120a <MRT_reset_info+0x132>
		  print("Post-apogee\r\n");
 8001204:	4828      	ldr	r0, [pc, #160]	; (80012a8 <MRT_reset_info+0x1d0>)
 8001206:	f7ff ff1f 	bl	8001048 <print>
	  }


	  //Check ejection stage
	  print("Ejection Stage: ");
 800120a:	4828      	ldr	r0, [pc, #160]	; (80012ac <MRT_reset_info+0x1d4>)
 800120c:	f7ff ff1c 	bl	8001048 <print>
	  if (ejection_state_flag==0){
 8001210:	4b27      	ldr	r3, [pc, #156]	; (80012b0 <MRT_reset_info+0x1d8>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d103      	bne.n	8001220 <MRT_reset_info+0x148>
		  print("Pad\r\n");
 8001218:	4826      	ldr	r0, [pc, #152]	; (80012b4 <MRT_reset_info+0x1dc>)
 800121a:	f7ff ff15 	bl	8001048 <print>
		  print("Main descent\r\n");
	  }
	  else if(ejection_state_flag==4){
		  print("Landed\r\n");
	  }
}
 800121e:	e01e      	b.n	800125e <MRT_reset_info+0x186>
	  else if(ejection_state_flag==1){
 8001220:	4b23      	ldr	r3, [pc, #140]	; (80012b0 <MRT_reset_info+0x1d8>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d103      	bne.n	8001230 <MRT_reset_info+0x158>
		  print("Boost\r\n");
 8001228:	4823      	ldr	r0, [pc, #140]	; (80012b8 <MRT_reset_info+0x1e0>)
 800122a:	f7ff ff0d 	bl	8001048 <print>
}
 800122e:	e016      	b.n	800125e <MRT_reset_info+0x186>
	  else if(ejection_state_flag==2){
 8001230:	4b1f      	ldr	r3, [pc, #124]	; (80012b0 <MRT_reset_info+0x1d8>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b02      	cmp	r3, #2
 8001236:	d103      	bne.n	8001240 <MRT_reset_info+0x168>
		  print("Drogue descent\r\n");
 8001238:	4820      	ldr	r0, [pc, #128]	; (80012bc <MRT_reset_info+0x1e4>)
 800123a:	f7ff ff05 	bl	8001048 <print>
}
 800123e:	e00e      	b.n	800125e <MRT_reset_info+0x186>
	  else if(ejection_state_flag==3){
 8001240:	4b1b      	ldr	r3, [pc, #108]	; (80012b0 <MRT_reset_info+0x1d8>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b03      	cmp	r3, #3
 8001246:	d103      	bne.n	8001250 <MRT_reset_info+0x178>
		  print("Main descent\r\n");
 8001248:	481d      	ldr	r0, [pc, #116]	; (80012c0 <MRT_reset_info+0x1e8>)
 800124a:	f7ff fefd 	bl	8001048 <print>
}
 800124e:	e006      	b.n	800125e <MRT_reset_info+0x186>
	  else if(ejection_state_flag==4){
 8001250:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <MRT_reset_info+0x1d8>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b04      	cmp	r3, #4
 8001256:	d102      	bne.n	800125e <MRT_reset_info+0x186>
		  print("Landed\r\n");
 8001258:	481a      	ldr	r0, [pc, #104]	; (80012c4 <MRT_reset_info+0x1ec>)
 800125a:	f7ff fef5 	bl	8001048 <print>
}
 800125e:	bf00      	nop
 8001260:	378c      	adds	r7, #140	; 0x8c
 8001262:	46bd      	mov	sp, r7
 8001264:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001266:	bf00      	nop
 8001268:	20000270 	.word	0x20000270
 800126c:	20000271 	.word	0x20000271
 8001270:	20000272 	.word	0x20000272
 8001274:	20000275 	.word	0x20000275
 8001278:	20000276 	.word	0x20000276
 800127c:	20000277 	.word	0x20000277
 8001280:	08016fb8 	.word	0x08016fb8
 8001284:	08016ff8 	.word	0x08016ff8
 8001288:	20005354 	.word	0x20005354
 800128c:	0801700c 	.word	0x0801700c
 8001290:	0801701c 	.word	0x0801701c
 8001294:	20000278 	.word	0x20000278
 8001298:	20000018 	.word	0x20000018
 800129c:	08017034 	.word	0x08017034
 80012a0:	20000273 	.word	0x20000273
 80012a4:	08017044 	.word	0x08017044
 80012a8:	08017054 	.word	0x08017054
 80012ac:	08017064 	.word	0x08017064
 80012b0:	20000274 	.word	0x20000274
 80012b4:	08017078 	.word	0x08017078
 80012b8:	08017080 	.word	0x08017080
 80012bc:	08017088 	.word	0x08017088
 80012c0:	0801709c 	.word	0x0801709c
 80012c4:	080170ac 	.word	0x080170ac

080012c8 <MRT_Reinitialize_Peripherals>:


//**************************************************//
//PRIVATE FUNCTIONS

void MRT_Reinitialize_Peripherals(void){
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
	  /*
	   * Reinitialize all peripherals
	   */

	  print("Reinitializing Peripherals...");
 80012cc:	482f      	ldr	r0, [pc, #188]	; (800138c <MRT_Reinitialize_Peripherals+0xc4>)
 80012ce:	f7ff febb 	bl	8001048 <print>

	  // reset LEDs
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2102      	movs	r1, #2
 80012d6:	482e      	ldr	r0, [pc, #184]	; (8001390 <MRT_Reinitialize_Peripherals+0xc8>)
 80012d8:	f004 fb38 	bl	800594c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 80012dc:	2200      	movs	r2, #0
 80012de:	2104      	movs	r1, #4
 80012e0:	482b      	ldr	r0, [pc, #172]	; (8001390 <MRT_Reinitialize_Peripherals+0xc8>)
 80012e2:	f004 fb33 	bl	800594c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2108      	movs	r1, #8
 80012ea:	4829      	ldr	r0, [pc, #164]	; (8001390 <MRT_Reinitialize_Peripherals+0xc8>)
 80012ec:	f004 fb2e 	bl	800594c <HAL_GPIO_WritePin>

	  // reset recovery pyro pins
	  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 80012f0:	2201      	movs	r2, #1
 80012f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012f6:	4827      	ldr	r0, [pc, #156]	; (8001394 <MRT_Reinitialize_Peripherals+0xcc>)
 80012f8:	f004 fb28 	bl	800594c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, RESET); //PG12 DROGUE GATE
 80012fc:	2200      	movs	r2, #0
 80012fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001302:	4824      	ldr	r0, [pc, #144]	; (8001394 <MRT_Reinitialize_Peripherals+0xcc>)
 8001304:	f004 fb22 	bl	800594c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, RESET); //PG11 MAIN GATE
 8001308:	2200      	movs	r2, #0
 800130a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800130e:	4821      	ldr	r0, [pc, #132]	; (8001394 <MRT_Reinitialize_Peripherals+0xcc>)
 8001310:	f004 fb1c 	bl	800594c <HAL_GPIO_WritePin>

	  // reset prop pyro pins
	  HAL_GPIO_WritePin(OUT_PyroValve_Arming_GPIO_Port, OUT_PyroValve_Arming_Pin, SET); //PG1 ARMING_PROP
 8001314:	2201      	movs	r2, #1
 8001316:	2102      	movs	r1, #2
 8001318:	481e      	ldr	r0, [pc, #120]	; (8001394 <MRT_Reinitialize_Peripherals+0xcc>)
 800131a:	f004 fb17 	bl	800594c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_PyroValve_Gate_1_GPIO_Port, OUT_PyroValve_Gate_1_Pin, RESET); //PF15 PROP GATE 1
 800131e:	2200      	movs	r2, #0
 8001320:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001324:	481c      	ldr	r0, [pc, #112]	; (8001398 <MRT_Reinitialize_Peripherals+0xd0>)
 8001326:	f004 fb11 	bl	800594c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_PyroValve_Gate_2_GPIO_Port,OUT_PyroValve_Gate_2_Pin, RESET); //PF14 PROP GATE 2
 800132a:	2200      	movs	r2, #0
 800132c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001330:	4819      	ldr	r0, [pc, #100]	; (8001398 <MRT_Reinitialize_Peripherals+0xd0>)
 8001332:	f004 fb0b 	bl	800594c <HAL_GPIO_WritePin>

	  // reset 12 V buck converter enable pin (disable converter)
	  HAL_GPIO_WritePin(EN_12V_Buck_GPIO_Port, EN_12V_Buck_Pin, RESET); //PE2 Buck converter enable
 8001336:	2200      	movs	r2, #0
 8001338:	2104      	movs	r1, #4
 800133a:	4818      	ldr	r0, [pc, #96]	; (800139c <MRT_Reinitialize_Peripherals+0xd4>)
 800133c:	f004 fb06 	bl	800594c <HAL_GPIO_WritePin>
	  //HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET); //This was in the previous code
	  //HAL_GPIO_WritePin(OUT_Prop_ActuatedVent_Gate_GPIO_Port, OUT_Prop_ActuatedVent_Gate_Pin, RESET); //PE7 (MAY NOT BE THE RIGHT ONE)


	  // reset payload EN signal
	  HAL_GPIO_WritePin(PAYLOAD_I2C_EN_GPIO_Port, PAYLOAD_I2C_EN_Pin, RESET); //PE9 Payload I2C enable
 8001340:	2200      	movs	r2, #0
 8001342:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001346:	4815      	ldr	r0, [pc, #84]	; (800139c <MRT_Reinitialize_Peripherals+0xd4>)
 8001348:	f004 fb00 	bl	800594c <HAL_GPIO_WritePin>

	  // set CS pin for thermocouple chip high
	  //	HAL_GPIO_WritePin(TH_CS_1_GPIO_Port, TH_CS_1_Pin, SET);

	  // set power off for VR
	  HAL_GPIO_WritePin(OUT_VR_PWR_GPIO_Port, OUT_VR_PWR_Pin, RESET); //PG9
 800134c:	2200      	movs	r2, #0
 800134e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001352:	4810      	ldr	r0, [pc, #64]	; (8001394 <MRT_Reinitialize_Peripherals+0xcc>)
 8001354:	f004 fafa 	bl	800594c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_VR_REC_GPIO_Port, OUT_VR_REC_Pin, RESET); //PD7
 8001358:	2200      	movs	r2, #0
 800135a:	2180      	movs	r1, #128	; 0x80
 800135c:	4810      	ldr	r0, [pc, #64]	; (80013a0 <MRT_Reinitialize_Peripherals+0xd8>)
 800135e:	f004 faf5 	bl	800594c <HAL_GPIO_WritePin>

	  // FLASH set CS, WP and IO3 pins high
	  HAL_GPIO_WritePin(OUT_FLASH_CS_GPIO_Port, OUT_FLASH_CS_Pin, SET);
 8001362:	2201      	movs	r2, #1
 8001364:	2140      	movs	r1, #64	; 0x40
 8001366:	480e      	ldr	r0, [pc, #56]	; (80013a0 <MRT_Reinitialize_Peripherals+0xd8>)
 8001368:	f004 faf0 	bl	800594c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_FLASH_WP_GPIO_Port, OUT_FLASH_WP_Pin, SET);
 800136c:	2201      	movs	r2, #1
 800136e:	2120      	movs	r1, #32
 8001370:	480b      	ldr	r0, [pc, #44]	; (80013a0 <MRT_Reinitialize_Peripherals+0xd8>)
 8001372:	f004 faeb 	bl	800594c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_FLASH_IO3_GPIO_Port, OUT_FLASH_IO3_Pin, SET);
 8001376:	2201      	movs	r2, #1
 8001378:	2110      	movs	r1, #16
 800137a:	4809      	ldr	r0, [pc, #36]	; (80013a0 <MRT_Reinitialize_Peripherals+0xd8>)
 800137c:	f004 fae6 	bl	800594c <HAL_GPIO_WritePin>

	  print("OK\r\n");
 8001380:	4808      	ldr	r0, [pc, #32]	; (80013a4 <MRT_Reinitialize_Peripherals+0xdc>)
 8001382:	f7ff fe61 	bl	8001048 <print>
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	080170b8 	.word	0x080170b8
 8001390:	40020800 	.word	0x40020800
 8001394:	40021800 	.word	0x40021800
 8001398:	40021400 	.word	0x40021400
 800139c:	40021000 	.word	0x40021000
 80013a0:	40020c00 	.word	0x40020c00
 80013a4:	080170d8 	.word	0x080170d8

080013a8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013ae:	463b      	mov	r3, r7
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013ba:	4b21      	ldr	r3, [pc, #132]	; (8001440 <MX_ADC1_Init+0x98>)
 80013bc:	4a21      	ldr	r2, [pc, #132]	; (8001444 <MX_ADC1_Init+0x9c>)
 80013be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80013c0:	4b1f      	ldr	r3, [pc, #124]	; (8001440 <MX_ADC1_Init+0x98>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013c6:	4b1e      	ldr	r3, [pc, #120]	; (8001440 <MX_ADC1_Init+0x98>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80013cc:	4b1c      	ldr	r3, [pc, #112]	; (8001440 <MX_ADC1_Init+0x98>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013d2:	4b1b      	ldr	r3, [pc, #108]	; (8001440 <MX_ADC1_Init+0x98>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013d8:	4b19      	ldr	r3, [pc, #100]	; (8001440 <MX_ADC1_Init+0x98>)
 80013da:	2200      	movs	r2, #0
 80013dc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013e0:	4b17      	ldr	r3, [pc, #92]	; (8001440 <MX_ADC1_Init+0x98>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013e6:	4b16      	ldr	r3, [pc, #88]	; (8001440 <MX_ADC1_Init+0x98>)
 80013e8:	4a17      	ldr	r2, [pc, #92]	; (8001448 <MX_ADC1_Init+0xa0>)
 80013ea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013ec:	4b14      	ldr	r3, [pc, #80]	; (8001440 <MX_ADC1_Init+0x98>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80013f2:	4b13      	ldr	r3, [pc, #76]	; (8001440 <MX_ADC1_Init+0x98>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013f8:	4b11      	ldr	r3, [pc, #68]	; (8001440 <MX_ADC1_Init+0x98>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001400:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <MX_ADC1_Init+0x98>)
 8001402:	2201      	movs	r2, #1
 8001404:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001406:	480e      	ldr	r0, [pc, #56]	; (8001440 <MX_ADC1_Init+0x98>)
 8001408:	f003 fda0 	bl	8004f4c <HAL_ADC_Init>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001412:	f000 fbc5 	bl	8001ba0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001416:	2306      	movs	r3, #6
 8001418:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800141a:	2301      	movs	r3, #1
 800141c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800141e:	2300      	movs	r3, #0
 8001420:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001422:	463b      	mov	r3, r7
 8001424:	4619      	mov	r1, r3
 8001426:	4806      	ldr	r0, [pc, #24]	; (8001440 <MX_ADC1_Init+0x98>)
 8001428:	f003 fdd4 	bl	8004fd4 <HAL_ADC_ConfigChannel>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001432:	f000 fbb5 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001436:	bf00      	nop
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20004fd8 	.word	0x20004fd8
 8001444:	40012000 	.word	0x40012000
 8001448:	0f000001 	.word	0x0f000001

0800144c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	; 0x28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a17      	ldr	r2, [pc, #92]	; (80014c8 <HAL_ADC_MspInit+0x7c>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d127      	bne.n	80014be <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	4b16      	ldr	r3, [pc, #88]	; (80014cc <HAL_ADC_MspInit+0x80>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	4a15      	ldr	r2, [pc, #84]	; (80014cc <HAL_ADC_MspInit+0x80>)
 8001478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800147c:	6453      	str	r3, [r2, #68]	; 0x44
 800147e:	4b13      	ldr	r3, [pc, #76]	; (80014cc <HAL_ADC_MspInit+0x80>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <HAL_ADC_MspInit+0x80>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a0e      	ldr	r2, [pc, #56]	; (80014cc <HAL_ADC_MspInit+0x80>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <HAL_ADC_MspInit+0x80>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 80014a6:	2340      	movs	r3, #64	; 0x40
 80014a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014aa:	2303      	movs	r3, #3
 80014ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 80014b2:	f107 0314 	add.w	r3, r7, #20
 80014b6:	4619      	mov	r1, r3
 80014b8:	4805      	ldr	r0, [pc, #20]	; (80014d0 <HAL_ADC_MspInit+0x84>)
 80014ba:	f004 f89b 	bl	80055f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80014be:	bf00      	nop
 80014c0:	3728      	adds	r7, #40	; 0x28
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40012000 	.word	0x40012000
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40020000 	.word	0x40020000

080014d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08e      	sub	sp, #56	; 0x38
 80014d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
 80014e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	623b      	str	r3, [r7, #32]
 80014ee:	4bb5      	ldr	r3, [pc, #724]	; (80017c4 <MX_GPIO_Init+0x2f0>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4ab4      	ldr	r2, [pc, #720]	; (80017c4 <MX_GPIO_Init+0x2f0>)
 80014f4:	f043 0310 	orr.w	r3, r3, #16
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4bb2      	ldr	r3, [pc, #712]	; (80017c4 <MX_GPIO_Init+0x2f0>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0310 	and.w	r3, r3, #16
 8001502:	623b      	str	r3, [r7, #32]
 8001504:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	61fb      	str	r3, [r7, #28]
 800150a:	4bae      	ldr	r3, [pc, #696]	; (80017c4 <MX_GPIO_Init+0x2f0>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4aad      	ldr	r2, [pc, #692]	; (80017c4 <MX_GPIO_Init+0x2f0>)
 8001510:	f043 0304 	orr.w	r3, r3, #4
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4bab      	ldr	r3, [pc, #684]	; (80017c4 <MX_GPIO_Init+0x2f0>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0304 	and.w	r3, r3, #4
 800151e:	61fb      	str	r3, [r7, #28]
 8001520:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	61bb      	str	r3, [r7, #24]
 8001526:	4ba7      	ldr	r3, [pc, #668]	; (80017c4 <MX_GPIO_Init+0x2f0>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4aa6      	ldr	r2, [pc, #664]	; (80017c4 <MX_GPIO_Init+0x2f0>)
 800152c:	f043 0320 	orr.w	r3, r3, #32
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4ba4      	ldr	r3, [pc, #656]	; (80017c4 <MX_GPIO_Init+0x2f0>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0320 	and.w	r3, r3, #32
 800153a:	61bb      	str	r3, [r7, #24]
 800153c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	617b      	str	r3, [r7, #20]
 8001542:	4ba0      	ldr	r3, [pc, #640]	; (80017c4 <MX_GPIO_Init+0x2f0>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a9f      	ldr	r2, [pc, #636]	; (80017c4 <MX_GPIO_Init+0x2f0>)
 8001548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b9d      	ldr	r3, [pc, #628]	; (80017c4 <MX_GPIO_Init+0x2f0>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001556:	617b      	str	r3, [r7, #20]
 8001558:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
 800155e:	4b99      	ldr	r3, [pc, #612]	; (80017c4 <MX_GPIO_Init+0x2f0>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4a98      	ldr	r2, [pc, #608]	; (80017c4 <MX_GPIO_Init+0x2f0>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4b96      	ldr	r3, [pc, #600]	; (80017c4 <MX_GPIO_Init+0x2f0>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	613b      	str	r3, [r7, #16]
 8001574:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	4b92      	ldr	r3, [pc, #584]	; (80017c4 <MX_GPIO_Init+0x2f0>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	4a91      	ldr	r2, [pc, #580]	; (80017c4 <MX_GPIO_Init+0x2f0>)
 8001580:	f043 0302 	orr.w	r3, r3, #2
 8001584:	6313      	str	r3, [r2, #48]	; 0x30
 8001586:	4b8f      	ldr	r3, [pc, #572]	; (80017c4 <MX_GPIO_Init+0x2f0>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	60bb      	str	r3, [r7, #8]
 8001596:	4b8b      	ldr	r3, [pc, #556]	; (80017c4 <MX_GPIO_Init+0x2f0>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a8a      	ldr	r2, [pc, #552]	; (80017c4 <MX_GPIO_Init+0x2f0>)
 800159c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b88      	ldr	r3, [pc, #544]	; (80017c4 <MX_GPIO_Init+0x2f0>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015aa:	60bb      	str	r3, [r7, #8]
 80015ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	607b      	str	r3, [r7, #4]
 80015b2:	4b84      	ldr	r3, [pc, #528]	; (80017c4 <MX_GPIO_Init+0x2f0>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a83      	ldr	r2, [pc, #524]	; (80017c4 <MX_GPIO_Init+0x2f0>)
 80015b8:	f043 0308 	orr.w	r3, r3, #8
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b81      	ldr	r3, [pc, #516]	; (80017c4 <MX_GPIO_Init+0x2f0>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0308 	and.w	r3, r3, #8
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 80015ca:	2200      	movs	r2, #0
 80015cc:	f248 4184 	movw	r1, #33924	; 0x8484
 80015d0:	487d      	ldr	r0, [pc, #500]	; (80017c8 <MX_GPIO_Init+0x2f4>)
 80015d2:	f004 f9bb 	bl	800594c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin, GPIO_PIN_RESET);
 80015d6:	2200      	movs	r2, #0
 80015d8:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 80015dc:	487b      	ldr	r0, [pc, #492]	; (80017cc <MX_GPIO_Init+0x2f8>)
 80015de:	f004 f9b5 	bl	800594c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 80015e2:	2200      	movs	r2, #0
 80015e4:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80015e8:	4879      	ldr	r0, [pc, #484]	; (80017d0 <MX_GPIO_Init+0x2fc>)
 80015ea:	f004 f9af 	bl	800594c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_LEDF_GPIO_Port, OUT_LEDF_Pin, GPIO_PIN_RESET);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2108      	movs	r1, #8
 80015f2:	4878      	ldr	r0, [pc, #480]	; (80017d4 <MX_GPIO_Init+0x300>)
 80015f4:	f004 f9aa 	bl	800594c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 80015f8:	2200      	movs	r2, #0
 80015fa:	f645 2126 	movw	r1, #23078	; 0x5a26
 80015fe:	4876      	ldr	r0, [pc, #472]	; (80017d8 <MX_GPIO_Init+0x304>)
 8001600:	f004 f9a4 	bl	800594c <HAL_GPIO_WritePin>
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_SX_CS_Pin|GPIO_PIN_8|POWER_ON_EXT_LED_Pin, GPIO_PIN_RESET);
 8001604:	2200      	movs	r2, #0
 8001606:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 800160a:	4874      	ldr	r0, [pc, #464]	; (80017dc <MX_GPIO_Init+0x308>)
 800160c:	f004 f99e 	bl	800594c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8001610:	2200      	movs	r2, #0
 8001612:	f647 41f0 	movw	r1, #31984	; 0x7cf0
 8001616:	4872      	ldr	r0, [pc, #456]	; (80017e0 <MX_GPIO_Init+0x30c>)
 8001618:	f004 f998 	bl	800594c <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin;
 800161c:	f248 4384 	movw	r3, #33924	; 0x8484
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001622:	2301      	movs	r3, #1
 8001624:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162a:	2300      	movs	r3, #0
 800162c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800162e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001632:	4619      	mov	r1, r3
 8001634:	4864      	ldr	r0, [pc, #400]	; (80017c8 <MX_GPIO_Init+0x2f4>)
 8001636:	f003 ffdd 	bl	80055f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin;
 800163a:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001640:	2301      	movs	r3, #1
 8001642:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001648:	2300      	movs	r3, #0
 800164a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800164c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001650:	4619      	mov	r1, r3
 8001652:	485e      	ldr	r0, [pc, #376]	; (80017cc <MX_GPIO_Init+0x2f8>)
 8001654:	f003 ffce 	bl	80055f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 8001658:	2301      	movs	r3, #1
 800165a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800165c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001660:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 8001666:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800166a:	4619      	mov	r1, r3
 800166c:	4858      	ldr	r0, [pc, #352]	; (80017d0 <MX_GPIO_Init+0x2fc>)
 800166e:	f003 ffc1 	bl	80055f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin;
 8001672:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001676:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001678:	2301      	movs	r3, #1
 800167a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001680:	2300      	movs	r3, #0
 8001682:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001688:	4619      	mov	r1, r3
 800168a:	4851      	ldr	r0, [pc, #324]	; (80017d0 <MX_GPIO_Init+0x2fc>)
 800168c:	f003 ffb2 	bl	80055f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUT_LEDF_Pin;
 8001690:	2308      	movs	r3, #8
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001694:	2301      	movs	r3, #1
 8001696:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169c:	2300      	movs	r3, #0
 800169e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OUT_LEDF_GPIO_Port, &GPIO_InitStruct);
 80016a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a4:	4619      	mov	r1, r3
 80016a6:	484b      	ldr	r0, [pc, #300]	; (80017d4 <MX_GPIO_Init+0x300>)
 80016a8:	f003 ffa4 	bl	80055f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 80016ac:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b2:	2300      	movs	r3, #0
 80016b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016be:	4619      	mov	r1, r3
 80016c0:	4843      	ldr	r0, [pc, #268]	; (80017d0 <MX_GPIO_Init+0x2fc>)
 80016c2:	f003 ff97 	bl	80055f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 80016c6:	2302      	movs	r3, #2
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ca:	2300      	movs	r3, #0
 80016cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 80016d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016d6:	4619      	mov	r1, r3
 80016d8:	4840      	ldr	r0, [pc, #256]	; (80017dc <MX_GPIO_Init+0x308>)
 80016da:	f003 ff8b 	bl	80055f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_2_Pin;
 80016de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e4:	2300      	movs	r3, #0
 80016e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_PyroValve_Cont_2_GPIO_Port, &GPIO_InitStruct);
 80016ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f0:	4619      	mov	r1, r3
 80016f2:	4836      	ldr	r0, [pc, #216]	; (80017cc <MX_GPIO_Init+0x2f8>)
 80016f4:	f003 ff7e 	bl	80055f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_1_Pin|SX_BUSY_Pin|SX_DIO_Pin|IN_EJ_Main_Cont_Pin
 80016f8:	f242 4319 	movw	r3, #9241	; 0x2419
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24
                          |IN_EJ_Drogue_Cont_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016fe:	2300      	movs	r3, #0
 8001700:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001706:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800170a:	4619      	mov	r1, r3
 800170c:	4832      	ldr	r0, [pc, #200]	; (80017d8 <MX_GPIO_Init+0x304>)
 800170e:	f003 ff71 	bl	80055f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 8001712:	f645 2326 	movw	r3, #23078	; 0x5a26
 8001716:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001718:	2301      	movs	r3, #1
 800171a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001720:	2300      	movs	r3, #0
 8001722:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001724:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001728:	4619      	mov	r1, r3
 800172a:	482b      	ldr	r0, [pc, #172]	; (80017d8 <MX_GPIO_Init+0x304>)
 800172c:	f003 ff62 	bl	80055f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = PAYLOAD_I2C_EN_Pin|IN_XTend_Continuity_Pin;
 8001730:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001736:	2300      	movs	r3, #0
 8001738:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800173e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001742:	4619      	mov	r1, r3
 8001744:	4820      	ldr	r0, [pc, #128]	; (80017c8 <MX_GPIO_Init+0x2f4>)
 8001746:	f003 ff55 	bl	80055f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB8 PBPin */
  GPIO_InitStruct.Pin = SPI2_SX_CS_Pin|GPIO_PIN_8|POWER_ON_EXT_LED_Pin;
 800174a:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001750:	2301      	movs	r3, #1
 8001752:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001758:	2300      	movs	r3, #0
 800175a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800175c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001760:	4619      	mov	r1, r3
 8001762:	481e      	ldr	r0, [pc, #120]	; (80017dc <MX_GPIO_Init+0x308>)
 8001764:	f003 ff46 	bl	80055f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8001768:	f647 43f0 	movw	r3, #31984	; 0x7cf0
 800176c:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176e:	2301      	movs	r3, #1
 8001770:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001776:	2300      	movs	r3, #0
 8001778:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800177a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800177e:	4619      	mov	r1, r3
 8001780:	4817      	ldr	r0, [pc, #92]	; (80017e0 <MX_GPIO_Init+0x30c>)
 8001782:	f003 ff37 	bl	80055f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 8001786:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800178a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800178c:	2300      	movs	r3, #0
 800178e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 8001794:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001798:	4619      	mov	r1, r3
 800179a:	4811      	ldr	r0, [pc, #68]	; (80017e0 <MX_GPIO_Init+0x30c>)
 800179c:	f003 ff2a 	bl	80055f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_LSM6DSR_INT1_Pin;
 80017a0:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b4:	4619      	mov	r1, r3
 80017b6:	4808      	ldr	r0, [pc, #32]	; (80017d8 <MX_GPIO_Init+0x304>)
 80017b8:	f003 ff1c 	bl	80055f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80017bc:	2200      	movs	r2, #0
 80017be:	2105      	movs	r1, #5
 80017c0:	2006      	movs	r0, #6
 80017c2:	e00f      	b.n	80017e4 <MX_GPIO_Init+0x310>
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40021000 	.word	0x40021000
 80017cc:	40021400 	.word	0x40021400
 80017d0:	40020800 	.word	0x40020800
 80017d4:	40020000 	.word	0x40020000
 80017d8:	40021800 	.word	0x40021800
 80017dc:	40020400 	.word	0x40020400
 80017e0:	40020c00 	.word	0x40020c00
 80017e4:	f003 fedc 	bl	80055a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80017e8:	2006      	movs	r0, #6
 80017ea:	f003 fef5 	bl	80055d8 <HAL_NVIC_EnableIRQ>

}
 80017ee:	bf00      	nop
 80017f0:	3738      	adds	r7, #56	; 0x38
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop

080017f8 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80017fc:	4b1b      	ldr	r3, [pc, #108]	; (800186c <MX_I2C2_Init+0x74>)
 80017fe:	4a1c      	ldr	r2, [pc, #112]	; (8001870 <MX_I2C2_Init+0x78>)
 8001800:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001802:	4b1a      	ldr	r3, [pc, #104]	; (800186c <MX_I2C2_Init+0x74>)
 8001804:	4a1b      	ldr	r2, [pc, #108]	; (8001874 <MX_I2C2_Init+0x7c>)
 8001806:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001808:	4b18      	ldr	r3, [pc, #96]	; (800186c <MX_I2C2_Init+0x74>)
 800180a:	2200      	movs	r2, #0
 800180c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800180e:	4b17      	ldr	r3, [pc, #92]	; (800186c <MX_I2C2_Init+0x74>)
 8001810:	2200      	movs	r2, #0
 8001812:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001814:	4b15      	ldr	r3, [pc, #84]	; (800186c <MX_I2C2_Init+0x74>)
 8001816:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800181a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800181c:	4b13      	ldr	r3, [pc, #76]	; (800186c <MX_I2C2_Init+0x74>)
 800181e:	2200      	movs	r2, #0
 8001820:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001822:	4b12      	ldr	r3, [pc, #72]	; (800186c <MX_I2C2_Init+0x74>)
 8001824:	2200      	movs	r2, #0
 8001826:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001828:	4b10      	ldr	r3, [pc, #64]	; (800186c <MX_I2C2_Init+0x74>)
 800182a:	2200      	movs	r2, #0
 800182c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800182e:	4b0f      	ldr	r3, [pc, #60]	; (800186c <MX_I2C2_Init+0x74>)
 8001830:	2200      	movs	r2, #0
 8001832:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001834:	480d      	ldr	r0, [pc, #52]	; (800186c <MX_I2C2_Init+0x74>)
 8001836:	f004 f8c7 	bl	80059c8 <HAL_I2C_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001840:	f000 f9ae 	bl	8001ba0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001844:	2100      	movs	r1, #0
 8001846:	4809      	ldr	r0, [pc, #36]	; (800186c <MX_I2C2_Init+0x74>)
 8001848:	f005 f87d 	bl	8006946 <HAL_I2CEx_ConfigAnalogFilter>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001852:	f000 f9a5 	bl	8001ba0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001856:	2100      	movs	r1, #0
 8001858:	4804      	ldr	r0, [pc, #16]	; (800186c <MX_I2C2_Init+0x74>)
 800185a:	f005 f8b0 	bl	80069be <HAL_I2CEx_ConfigDigitalFilter>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001864:	f000 f99c 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001868:	bf00      	nop
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20005074 	.word	0x20005074
 8001870:	40005800 	.word	0x40005800
 8001874:	000186a0 	.word	0x000186a0

08001878 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800187c:	4b1b      	ldr	r3, [pc, #108]	; (80018ec <MX_I2C3_Init+0x74>)
 800187e:	4a1c      	ldr	r2, [pc, #112]	; (80018f0 <MX_I2C3_Init+0x78>)
 8001880:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001882:	4b1a      	ldr	r3, [pc, #104]	; (80018ec <MX_I2C3_Init+0x74>)
 8001884:	4a1b      	ldr	r2, [pc, #108]	; (80018f4 <MX_I2C3_Init+0x7c>)
 8001886:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001888:	4b18      	ldr	r3, [pc, #96]	; (80018ec <MX_I2C3_Init+0x74>)
 800188a:	2200      	movs	r2, #0
 800188c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800188e:	4b17      	ldr	r3, [pc, #92]	; (80018ec <MX_I2C3_Init+0x74>)
 8001890:	2200      	movs	r2, #0
 8001892:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001894:	4b15      	ldr	r3, [pc, #84]	; (80018ec <MX_I2C3_Init+0x74>)
 8001896:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800189a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800189c:	4b13      	ldr	r3, [pc, #76]	; (80018ec <MX_I2C3_Init+0x74>)
 800189e:	2200      	movs	r2, #0
 80018a0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80018a2:	4b12      	ldr	r3, [pc, #72]	; (80018ec <MX_I2C3_Init+0x74>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018a8:	4b10      	ldr	r3, [pc, #64]	; (80018ec <MX_I2C3_Init+0x74>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018ae:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <MX_I2C3_Init+0x74>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80018b4:	480d      	ldr	r0, [pc, #52]	; (80018ec <MX_I2C3_Init+0x74>)
 80018b6:	f004 f887 	bl	80059c8 <HAL_I2C_Init>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80018c0:	f000 f96e 	bl	8001ba0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018c4:	2100      	movs	r1, #0
 80018c6:	4809      	ldr	r0, [pc, #36]	; (80018ec <MX_I2C3_Init+0x74>)
 80018c8:	f005 f83d 	bl	8006946 <HAL_I2CEx_ConfigAnalogFilter>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80018d2:	f000 f965 	bl	8001ba0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80018d6:	2100      	movs	r1, #0
 80018d8:	4804      	ldr	r0, [pc, #16]	; (80018ec <MX_I2C3_Init+0x74>)
 80018da:	f005 f870 	bl	80069be <HAL_I2CEx_ConfigDigitalFilter>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80018e4:	f000 f95c 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80018e8:	bf00      	nop
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20005020 	.word	0x20005020
 80018f0:	40005c00 	.word	0x40005c00
 80018f4:	000186a0 	.word	0x000186a0

080018f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08c      	sub	sp, #48	; 0x30
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001900:	f107 031c 	add.w	r3, r7, #28
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a42      	ldr	r2, [pc, #264]	; (8001a20 <HAL_I2C_MspInit+0x128>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d12d      	bne.n	8001976 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	61bb      	str	r3, [r7, #24]
 800191e:	4b41      	ldr	r3, [pc, #260]	; (8001a24 <HAL_I2C_MspInit+0x12c>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	4a40      	ldr	r2, [pc, #256]	; (8001a24 <HAL_I2C_MspInit+0x12c>)
 8001924:	f043 0302 	orr.w	r3, r3, #2
 8001928:	6313      	str	r3, [r2, #48]	; 0x30
 800192a:	4b3e      	ldr	r3, [pc, #248]	; (8001a24 <HAL_I2C_MspInit+0x12c>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	61bb      	str	r3, [r7, #24]
 8001934:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001936:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800193a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800193c:	2312      	movs	r3, #18
 800193e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001940:	2301      	movs	r3, #1
 8001942:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001944:	2303      	movs	r3, #3
 8001946:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001948:	2304      	movs	r3, #4
 800194a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800194c:	f107 031c 	add.w	r3, r7, #28
 8001950:	4619      	mov	r1, r3
 8001952:	4835      	ldr	r0, [pc, #212]	; (8001a28 <HAL_I2C_MspInit+0x130>)
 8001954:	f003 fe4e 	bl	80055f4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	4b31      	ldr	r3, [pc, #196]	; (8001a24 <HAL_I2C_MspInit+0x12c>)
 800195e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001960:	4a30      	ldr	r2, [pc, #192]	; (8001a24 <HAL_I2C_MspInit+0x12c>)
 8001962:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001966:	6413      	str	r3, [r2, #64]	; 0x40
 8001968:	4b2e      	ldr	r3, [pc, #184]	; (8001a24 <HAL_I2C_MspInit+0x12c>)
 800196a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001970:	617b      	str	r3, [r7, #20]
 8001972:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001974:	e050      	b.n	8001a18 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a2c      	ldr	r2, [pc, #176]	; (8001a2c <HAL_I2C_MspInit+0x134>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d14b      	bne.n	8001a18 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001980:	2300      	movs	r3, #0
 8001982:	613b      	str	r3, [r7, #16]
 8001984:	4b27      	ldr	r3, [pc, #156]	; (8001a24 <HAL_I2C_MspInit+0x12c>)
 8001986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001988:	4a26      	ldr	r2, [pc, #152]	; (8001a24 <HAL_I2C_MspInit+0x12c>)
 800198a:	f043 0304 	orr.w	r3, r3, #4
 800198e:	6313      	str	r3, [r2, #48]	; 0x30
 8001990:	4b24      	ldr	r3, [pc, #144]	; (8001a24 <HAL_I2C_MspInit+0x12c>)
 8001992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001994:	f003 0304 	and.w	r3, r3, #4
 8001998:	613b      	str	r3, [r7, #16]
 800199a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199c:	2300      	movs	r3, #0
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	4b20      	ldr	r3, [pc, #128]	; (8001a24 <HAL_I2C_MspInit+0x12c>)
 80019a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a4:	4a1f      	ldr	r2, [pc, #124]	; (8001a24 <HAL_I2C_MspInit+0x12c>)
 80019a6:	f043 0301 	orr.w	r3, r3, #1
 80019aa:	6313      	str	r3, [r2, #48]	; 0x30
 80019ac:	4b1d      	ldr	r3, [pc, #116]	; (8001a24 <HAL_I2C_MspInit+0x12c>)
 80019ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019be:	2312      	movs	r3, #18
 80019c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019c2:	2301      	movs	r3, #1
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c6:	2303      	movs	r3, #3
 80019c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80019ca:	2304      	movs	r3, #4
 80019cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ce:	f107 031c 	add.w	r3, r7, #28
 80019d2:	4619      	mov	r1, r3
 80019d4:	4816      	ldr	r0, [pc, #88]	; (8001a30 <HAL_I2C_MspInit+0x138>)
 80019d6:	f003 fe0d 	bl	80055f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80019da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019e0:	2312      	movs	r3, #18
 80019e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019e4:	2301      	movs	r3, #1
 80019e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e8:	2303      	movs	r3, #3
 80019ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80019ec:	2304      	movs	r3, #4
 80019ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f0:	f107 031c 	add.w	r3, r7, #28
 80019f4:	4619      	mov	r1, r3
 80019f6:	480f      	ldr	r0, [pc, #60]	; (8001a34 <HAL_I2C_MspInit+0x13c>)
 80019f8:	f003 fdfc 	bl	80055f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80019fc:	2300      	movs	r3, #0
 80019fe:	60bb      	str	r3, [r7, #8]
 8001a00:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <HAL_I2C_MspInit+0x12c>)
 8001a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a04:	4a07      	ldr	r2, [pc, #28]	; (8001a24 <HAL_I2C_MspInit+0x12c>)
 8001a06:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a0a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a0c:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <HAL_I2C_MspInit+0x12c>)
 8001a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	68bb      	ldr	r3, [r7, #8]
}
 8001a18:	bf00      	nop
 8001a1a:	3730      	adds	r7, #48	; 0x30
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40005800 	.word	0x40005800
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40020400 	.word	0x40020400
 8001a2c:	40005c00 	.word	0x40005c00
 8001a30:	40020800 	.word	0x40020800
 8001a34:	40020000 	.word	0x40020000

08001a38 <main>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int main(void){
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
	MRT_STM_Init();
 8001a3c:	f000 f87c 	bl	8001b38 <MRT_STM_Init>
	println("\r\n\r\nSTM Init...OK");
 8001a40:	4805      	ldr	r0, [pc, #20]	; (8001a58 <main+0x20>)
 8001a42:	f7ff fae3 	bl	800100c <println>

	MRT_Init();
 8001a46:	f7ff fb15 	bl	8001074 <MRT_Init>

	println("\r\n/****Starting FC****/\r\n");
 8001a4a:	4804      	ldr	r0, [pc, #16]	; (8001a5c <main+0x24>)
 8001a4c:	f7ff fade 	bl	800100c <println>

	return 1;
 8001a50:	2301      	movs	r3, #1
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	080170e0 	.word	0x080170e0
 8001a5c:	080170f4 	.word	0x080170f4

08001a60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b094      	sub	sp, #80	; 0x50
 8001a64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a66:	f107 0320 	add.w	r3, r7, #32
 8001a6a:	2230      	movs	r2, #48	; 0x30
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f010 fe37 	bl	80126e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a74:	f107 030c 	add.w	r3, r7, #12
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]
 8001a82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a84:	2300      	movs	r3, #0
 8001a86:	60bb      	str	r3, [r7, #8]
 8001a88:	4b29      	ldr	r3, [pc, #164]	; (8001b30 <SystemClock_Config+0xd0>)
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8c:	4a28      	ldr	r2, [pc, #160]	; (8001b30 <SystemClock_Config+0xd0>)
 8001a8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a92:	6413      	str	r3, [r2, #64]	; 0x40
 8001a94:	4b26      	ldr	r3, [pc, #152]	; (8001b30 <SystemClock_Config+0xd0>)
 8001a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9c:	60bb      	str	r3, [r7, #8]
 8001a9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	607b      	str	r3, [r7, #4]
 8001aa4:	4b23      	ldr	r3, [pc, #140]	; (8001b34 <SystemClock_Config+0xd4>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001aac:	4a21      	ldr	r2, [pc, #132]	; (8001b34 <SystemClock_Config+0xd4>)
 8001aae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ab2:	6013      	str	r3, [r2, #0]
 8001ab4:	4b1f      	ldr	r3, [pc, #124]	; (8001b34 <SystemClock_Config+0xd4>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001abc:	607b      	str	r3, [r7, #4]
 8001abe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001ac0:	2309      	movs	r3, #9
 8001ac2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ac4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001aca:	2301      	movs	r3, #1
 8001acc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ad2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ad8:	2308      	movs	r3, #8
 8001ada:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001adc:	2348      	movs	r3, #72	; 0x48
 8001ade:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ae8:	f107 0320 	add.w	r3, r7, #32
 8001aec:	4618      	mov	r0, r3
 8001aee:	f005 ff5d 	bl	80079ac <HAL_RCC_OscConfig>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001af8:	f000 f852 	bl	8001ba0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001afc:	230f      	movs	r3, #15
 8001afe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001b00:	2301      	movs	r3, #1
 8001b02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b12:	f107 030c 	add.w	r3, r7, #12
 8001b16:	2100      	movs	r1, #0
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f006 f9bf 	bl	8007e9c <HAL_RCC_ClockConfig>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001b24:	f000 f83c 	bl	8001ba0 <Error_Handler>
  }
}
 8001b28:	bf00      	nop
 8001b2a:	3750      	adds	r7, #80	; 0x50
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40023800 	.word	0x40023800
 8001b34:	40007000 	.word	0x40007000

08001b38 <MRT_STM_Init>:

/* USER CODE BEGIN 4 */

void MRT_STM_Init(void){
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
	HAL_Init();
 8001b3c:	f003 f9a0 	bl	8004e80 <HAL_Init>
	SystemClock_Config();
 8001b40:	f7ff ff8e 	bl	8001a60 <SystemClock_Config>

	MX_GPIO_Init();
 8001b44:	f7ff fcc6 	bl	80014d4 <MX_GPIO_Init>
	MX_ADC1_Init();
 8001b48:	f7ff fc2e 	bl	80013a8 <MX_ADC1_Init>
	MX_I2C2_Init();
 8001b4c:	f7ff fe54 	bl	80017f8 <MX_I2C2_Init>
	MX_I2C3_Init();
 8001b50:	f7ff fe92 	bl	8001878 <MX_I2C3_Init>
	MX_SPI2_Init();
 8001b54:	f000 f8e8 	bl	8001d28 <MX_SPI2_Init>
	MX_SPI4_Init();
 8001b58:	f000 f91c 	bl	8001d94 <MX_SPI4_Init>
	MX_SPI5_Init();
 8001b5c:	f000 f950 	bl	8001e00 <MX_SPI5_Init>
	MX_TIM2_Init();
 8001b60:	f000 fb0e 	bl	8002180 <MX_TIM2_Init>
	MX_UART8_Init();
 8001b64:	f000 fbda 	bl	800231c <MX_UART8_Init>
	MX_USART3_UART_Init();
 8001b68:	f000 fc02 	bl	8002370 <MX_USART3_UART_Init>
	MX_USART6_UART_Init();
 8001b6c:	f000 fc2a 	bl	80023c4 <MX_USART6_UART_Init>
	MX_RTC_Init();
 8001b70:	f000 f81c 	bl	8001bac <MX_RTC_Init>
	//MX_IWDG_Init(); TODO ADDED IN MRT_Init()
	MX_FATFS_Init();
 8001b74:	f00a fa56 	bl	800c024 <MX_FATFS_Init>
}
 8001b78:	bf00      	nop
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a04      	ldr	r2, [pc, #16]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d101      	bne.n	8001b92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b8e:	f003 f999 	bl	8004ec4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40001000 	.word	0x40001000

08001ba0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ba4:	b672      	cpsid	i
}
 8001ba6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ba8:	e7fe      	b.n	8001ba8 <Error_Handler+0x8>
	...

08001bac <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b090      	sub	sp, #64	; 0x40
 8001bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001bb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]
 8001bbc:	609a      	str	r2, [r3, #8]
 8001bbe:	60da      	str	r2, [r3, #12]
 8001bc0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001bc6:	463b      	mov	r3, r7
 8001bc8:	2228      	movs	r2, #40	; 0x28
 8001bca:	2100      	movs	r1, #0
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f010 fd88 	bl	80126e2 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001bd2:	4b3a      	ldr	r3, [pc, #232]	; (8001cbc <MX_RTC_Init+0x110>)
 8001bd4:	4a3a      	ldr	r2, [pc, #232]	; (8001cc0 <MX_RTC_Init+0x114>)
 8001bd6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001bd8:	4b38      	ldr	r3, [pc, #224]	; (8001cbc <MX_RTC_Init+0x110>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001bde:	4b37      	ldr	r3, [pc, #220]	; (8001cbc <MX_RTC_Init+0x110>)
 8001be0:	227f      	movs	r2, #127	; 0x7f
 8001be2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001be4:	4b35      	ldr	r3, [pc, #212]	; (8001cbc <MX_RTC_Init+0x110>)
 8001be6:	22ff      	movs	r2, #255	; 0xff
 8001be8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001bea:	4b34      	ldr	r3, [pc, #208]	; (8001cbc <MX_RTC_Init+0x110>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001bf0:	4b32      	ldr	r3, [pc, #200]	; (8001cbc <MX_RTC_Init+0x110>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001bf6:	4b31      	ldr	r3, [pc, #196]	; (8001cbc <MX_RTC_Init+0x110>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001bfc:	482f      	ldr	r0, [pc, #188]	; (8001cbc <MX_RTC_Init+0x110>)
 8001bfe:	f006 fd37 	bl	8008670 <HAL_RTC_Init>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001c08:	f7ff ffca 	bl	8001ba0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8001c12:	2300      	movs	r3, #0
 8001c14:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c22:	2300      	movs	r3, #0
 8001c24:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001c26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4823      	ldr	r0, [pc, #140]	; (8001cbc <MX_RTC_Init+0x110>)
 8001c30:	f006 fdaf 	bl	8008792 <HAL_RTC_SetTime>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001c3a:	f7ff ffb1 	bl	8001ba0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001c44:	2301      	movs	r3, #1
 8001c46:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001c56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4817      	ldr	r0, [pc, #92]	; (8001cbc <MX_RTC_Init+0x110>)
 8001c60:	f006 fe54 	bl	800890c <HAL_RTC_SetDate>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001c6a:	f7ff ff99 	bl	8001ba0 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8001c72:	2301      	movs	r3, #1
 8001c74:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c82:	2300      	movs	r3, #0
 8001c84:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001c92:	2301      	movs	r3, #1
 8001c94:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001c98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001c9e:	463b      	mov	r3, r7
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4805      	ldr	r0, [pc, #20]	; (8001cbc <MX_RTC_Init+0x110>)
 8001ca6:	f006 fed9 	bl	8008a5c <HAL_RTC_SetAlarm_IT>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001cb0:	f7ff ff76 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001cb4:	bf00      	nop
 8001cb6:	3740      	adds	r7, #64	; 0x40
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	200050c8 	.word	0x200050c8
 8001cc0:	40002800 	.word	0x40002800

08001cc4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b08e      	sub	sp, #56	; 0x38
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ccc:	f107 0308 	add.w	r3, r7, #8
 8001cd0:	2230      	movs	r2, #48	; 0x30
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f010 fd04 	bl	80126e2 <memset>
  if(rtcHandle->Instance==RTC)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a10      	ldr	r2, [pc, #64]	; (8001d20 <HAL_RTC_MspInit+0x5c>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d119      	bne.n	8001d18 <HAL_RTC_MspInit+0x54>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001ce4:	2320      	movs	r3, #32
 8001ce6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001ce8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cec:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cee:	f107 0308 	add.w	r3, r7, #8
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f006 fafe 	bl	80082f4 <HAL_RCCEx_PeriphCLKConfig>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001cfe:	f7ff ff4f 	bl	8001ba0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001d02:	4b08      	ldr	r3, [pc, #32]	; (8001d24 <HAL_RTC_MspInit+0x60>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8001d08:	2200      	movs	r2, #0
 8001d0a:	2105      	movs	r1, #5
 8001d0c:	2029      	movs	r0, #41	; 0x29
 8001d0e:	f003 fc47 	bl	80055a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001d12:	2029      	movs	r0, #41	; 0x29
 8001d14:	f003 fc60 	bl	80055d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001d18:	bf00      	nop
 8001d1a:	3738      	adds	r7, #56	; 0x38
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40002800 	.word	0x40002800
 8001d24:	42470e3c 	.word	0x42470e3c

08001d28 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi4;
SPI_HandleTypeDef hspi5;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001d2c:	4b17      	ldr	r3, [pc, #92]	; (8001d8c <MX_SPI2_Init+0x64>)
 8001d2e:	4a18      	ldr	r2, [pc, #96]	; (8001d90 <MX_SPI2_Init+0x68>)
 8001d30:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d32:	4b16      	ldr	r3, [pc, #88]	; (8001d8c <MX_SPI2_Init+0x64>)
 8001d34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d38:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d3a:	4b14      	ldr	r3, [pc, #80]	; (8001d8c <MX_SPI2_Init+0x64>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d40:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <MX_SPI2_Init+0x64>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d46:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <MX_SPI2_Init+0x64>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d4c:	4b0f      	ldr	r3, [pc, #60]	; (8001d8c <MX_SPI2_Init+0x64>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d52:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <MX_SPI2_Init+0x64>)
 8001d54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d58:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d5a:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <MX_SPI2_Init+0x64>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d60:	4b0a      	ldr	r3, [pc, #40]	; (8001d8c <MX_SPI2_Init+0x64>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d66:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <MX_SPI2_Init+0x64>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d6c:	4b07      	ldr	r3, [pc, #28]	; (8001d8c <MX_SPI2_Init+0x64>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001d72:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <MX_SPI2_Init+0x64>)
 8001d74:	220a      	movs	r2, #10
 8001d76:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d78:	4804      	ldr	r0, [pc, #16]	; (8001d8c <MX_SPI2_Init+0x64>)
 8001d7a:	f007 f98b 	bl	8009094 <HAL_SPI_Init>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001d84:	f7ff ff0c 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001d88:	bf00      	nop
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	200050e8 	.word	0x200050e8
 8001d90:	40003800 	.word	0x40003800

08001d94 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001d98:	4b17      	ldr	r3, [pc, #92]	; (8001df8 <MX_SPI4_Init+0x64>)
 8001d9a:	4a18      	ldr	r2, [pc, #96]	; (8001dfc <MX_SPI4_Init+0x68>)
 8001d9c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001d9e:	4b16      	ldr	r3, [pc, #88]	; (8001df8 <MX_SPI4_Init+0x64>)
 8001da0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001da4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001da6:	4b14      	ldr	r3, [pc, #80]	; (8001df8 <MX_SPI4_Init+0x64>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dac:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <MX_SPI4_Init+0x64>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001db2:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <MX_SPI4_Init+0x64>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001db8:	4b0f      	ldr	r3, [pc, #60]	; (8001df8 <MX_SPI4_Init+0x64>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001dbe:	4b0e      	ldr	r3, [pc, #56]	; (8001df8 <MX_SPI4_Init+0x64>)
 8001dc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dc4:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001dc6:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <MX_SPI4_Init+0x64>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dcc:	4b0a      	ldr	r3, [pc, #40]	; (8001df8 <MX_SPI4_Init+0x64>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dd2:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <MX_SPI4_Init+0x64>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dd8:	4b07      	ldr	r3, [pc, #28]	; (8001df8 <MX_SPI4_Init+0x64>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001dde:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <MX_SPI4_Init+0x64>)
 8001de0:	220a      	movs	r2, #10
 8001de2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001de4:	4804      	ldr	r0, [pc, #16]	; (8001df8 <MX_SPI4_Init+0x64>)
 8001de6:	f007 f955 	bl	8009094 <HAL_SPI_Init>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001df0:	f7ff fed6 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001df4:	bf00      	nop
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20005198 	.word	0x20005198
 8001dfc:	40013400 	.word	0x40013400

08001e00 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8001e04:	4b17      	ldr	r3, [pc, #92]	; (8001e64 <MX_SPI5_Init+0x64>)
 8001e06:	4a18      	ldr	r2, [pc, #96]	; (8001e68 <MX_SPI5_Init+0x68>)
 8001e08:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001e0a:	4b16      	ldr	r3, [pc, #88]	; (8001e64 <MX_SPI5_Init+0x64>)
 8001e0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e10:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001e12:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <MX_SPI5_Init+0x64>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e18:	4b12      	ldr	r3, [pc, #72]	; (8001e64 <MX_SPI5_Init+0x64>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e1e:	4b11      	ldr	r3, [pc, #68]	; (8001e64 <MX_SPI5_Init+0x64>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e24:	4b0f      	ldr	r3, [pc, #60]	; (8001e64 <MX_SPI5_Init+0x64>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001e2a:	4b0e      	ldr	r3, [pc, #56]	; (8001e64 <MX_SPI5_Init+0x64>)
 8001e2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e30:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e32:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <MX_SPI5_Init+0x64>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e38:	4b0a      	ldr	r3, [pc, #40]	; (8001e64 <MX_SPI5_Init+0x64>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e3e:	4b09      	ldr	r3, [pc, #36]	; (8001e64 <MX_SPI5_Init+0x64>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e44:	4b07      	ldr	r3, [pc, #28]	; (8001e64 <MX_SPI5_Init+0x64>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001e4a:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <MX_SPI5_Init+0x64>)
 8001e4c:	220a      	movs	r2, #10
 8001e4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001e50:	4804      	ldr	r0, [pc, #16]	; (8001e64 <MX_SPI5_Init+0x64>)
 8001e52:	f007 f91f 	bl	8009094 <HAL_SPI_Init>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001e5c:	f7ff fea0 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001e60:	bf00      	nop
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20005140 	.word	0x20005140
 8001e68:	40015000 	.word	0x40015000

08001e6c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08e      	sub	sp, #56	; 0x38
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a4c      	ldr	r2, [pc, #304]	; (8001fbc <HAL_SPI_MspInit+0x150>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d12d      	bne.n	8001eea <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	623b      	str	r3, [r7, #32]
 8001e92:	4b4b      	ldr	r3, [pc, #300]	; (8001fc0 <HAL_SPI_MspInit+0x154>)
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	4a4a      	ldr	r2, [pc, #296]	; (8001fc0 <HAL_SPI_MspInit+0x154>)
 8001e98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e9e:	4b48      	ldr	r3, [pc, #288]	; (8001fc0 <HAL_SPI_MspInit+0x154>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ea6:	623b      	str	r3, [r7, #32]
 8001ea8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61fb      	str	r3, [r7, #28]
 8001eae:	4b44      	ldr	r3, [pc, #272]	; (8001fc0 <HAL_SPI_MspInit+0x154>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	4a43      	ldr	r2, [pc, #268]	; (8001fc0 <HAL_SPI_MspInit+0x154>)
 8001eb4:	f043 0302 	orr.w	r3, r3, #2
 8001eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eba:	4b41      	ldr	r3, [pc, #260]	; (8001fc0 <HAL_SPI_MspInit+0x154>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	61fb      	str	r3, [r7, #28]
 8001ec4:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001ec6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ed8:	2305      	movs	r3, #5
 8001eda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001edc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4838      	ldr	r0, [pc, #224]	; (8001fc4 <HAL_SPI_MspInit+0x158>)
 8001ee4:	f003 fb86 	bl	80055f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001ee8:	e064      	b.n	8001fb4 <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI4)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a36      	ldr	r2, [pc, #216]	; (8001fc8 <HAL_SPI_MspInit+0x15c>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d12d      	bne.n	8001f50 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	61bb      	str	r3, [r7, #24]
 8001ef8:	4b31      	ldr	r3, [pc, #196]	; (8001fc0 <HAL_SPI_MspInit+0x154>)
 8001efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efc:	4a30      	ldr	r2, [pc, #192]	; (8001fc0 <HAL_SPI_MspInit+0x154>)
 8001efe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f02:	6453      	str	r3, [r2, #68]	; 0x44
 8001f04:	4b2e      	ldr	r3, [pc, #184]	; (8001fc0 <HAL_SPI_MspInit+0x154>)
 8001f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f0c:	61bb      	str	r3, [r7, #24]
 8001f0e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]
 8001f14:	4b2a      	ldr	r3, [pc, #168]	; (8001fc0 <HAL_SPI_MspInit+0x154>)
 8001f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f18:	4a29      	ldr	r2, [pc, #164]	; (8001fc0 <HAL_SPI_MspInit+0x154>)
 8001f1a:	f043 0310 	orr.w	r3, r3, #16
 8001f1e:	6313      	str	r3, [r2, #48]	; 0x30
 8001f20:	4b27      	ldr	r3, [pc, #156]	; (8001fc0 <HAL_SPI_MspInit+0x154>)
 8001f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f24:	f003 0310 	and.w	r3, r3, #16
 8001f28:	617b      	str	r3, [r7, #20]
 8001f2a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001f2c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001f30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f32:	2302      	movs	r3, #2
 8001f34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001f3e:	2305      	movs	r3, #5
 8001f40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f46:	4619      	mov	r1, r3
 8001f48:	4820      	ldr	r0, [pc, #128]	; (8001fcc <HAL_SPI_MspInit+0x160>)
 8001f4a:	f003 fb53 	bl	80055f4 <HAL_GPIO_Init>
}
 8001f4e:	e031      	b.n	8001fb4 <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI5)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a1e      	ldr	r2, [pc, #120]	; (8001fd0 <HAL_SPI_MspInit+0x164>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d12c      	bne.n	8001fb4 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	613b      	str	r3, [r7, #16]
 8001f5e:	4b18      	ldr	r3, [pc, #96]	; (8001fc0 <HAL_SPI_MspInit+0x154>)
 8001f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f62:	4a17      	ldr	r2, [pc, #92]	; (8001fc0 <HAL_SPI_MspInit+0x154>)
 8001f64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f68:	6453      	str	r3, [r2, #68]	; 0x44
 8001f6a:	4b15      	ldr	r3, [pc, #84]	; (8001fc0 <HAL_SPI_MspInit+0x154>)
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f72:	613b      	str	r3, [r7, #16]
 8001f74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <HAL_SPI_MspInit+0x154>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	4a10      	ldr	r2, [pc, #64]	; (8001fc0 <HAL_SPI_MspInit+0x154>)
 8001f80:	f043 0320 	orr.w	r3, r3, #32
 8001f84:	6313      	str	r3, [r2, #48]	; 0x30
 8001f86:	4b0e      	ldr	r3, [pc, #56]	; (8001fc0 <HAL_SPI_MspInit+0x154>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	f003 0320 	and.w	r3, r3, #32
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001f92:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001f96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001fa4:	2305      	movs	r3, #5
 8001fa6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fac:	4619      	mov	r1, r3
 8001fae:	4809      	ldr	r0, [pc, #36]	; (8001fd4 <HAL_SPI_MspInit+0x168>)
 8001fb0:	f003 fb20 	bl	80055f4 <HAL_GPIO_Init>
}
 8001fb4:	bf00      	nop
 8001fb6:	3738      	adds	r7, #56	; 0x38
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40003800 	.word	0x40003800
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	40020400 	.word	0x40020400
 8001fc8:	40013400 	.word	0x40013400
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	40015000 	.word	0x40015000
 8001fd4:	40021400 	.word	0x40021400

08001fd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	607b      	str	r3, [r7, #4]
 8001fe2:	4b12      	ldr	r3, [pc, #72]	; (800202c <HAL_MspInit+0x54>)
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe6:	4a11      	ldr	r2, [pc, #68]	; (800202c <HAL_MspInit+0x54>)
 8001fe8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fec:	6453      	str	r3, [r2, #68]	; 0x44
 8001fee:	4b0f      	ldr	r3, [pc, #60]	; (800202c <HAL_MspInit+0x54>)
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ff6:	607b      	str	r3, [r7, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	603b      	str	r3, [r7, #0]
 8001ffe:	4b0b      	ldr	r3, [pc, #44]	; (800202c <HAL_MspInit+0x54>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	4a0a      	ldr	r2, [pc, #40]	; (800202c <HAL_MspInit+0x54>)
 8002004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002008:	6413      	str	r3, [r2, #64]	; 0x40
 800200a:	4b08      	ldr	r3, [pc, #32]	; (800202c <HAL_MspInit+0x54>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002012:	603b      	str	r3, [r7, #0]
 8002014:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002016:	2200      	movs	r2, #0
 8002018:	210f      	movs	r1, #15
 800201a:	f06f 0001 	mvn.w	r0, #1
 800201e:	f003 fabf 	bl	80055a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40023800 	.word	0x40023800

08002030 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b08c      	sub	sp, #48	; 0x30
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002038:	2300      	movs	r3, #0
 800203a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800203c:	2300      	movs	r3, #0
 800203e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002040:	2200      	movs	r2, #0
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	2036      	movs	r0, #54	; 0x36
 8002046:	f003 faab 	bl	80055a0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800204a:	2036      	movs	r0, #54	; 0x36
 800204c:	f003 fac4 	bl	80055d8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002050:	2300      	movs	r3, #0
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	4b1f      	ldr	r3, [pc, #124]	; (80020d4 <HAL_InitTick+0xa4>)
 8002056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002058:	4a1e      	ldr	r2, [pc, #120]	; (80020d4 <HAL_InitTick+0xa4>)
 800205a:	f043 0310 	orr.w	r3, r3, #16
 800205e:	6413      	str	r3, [r2, #64]	; 0x40
 8002060:	4b1c      	ldr	r3, [pc, #112]	; (80020d4 <HAL_InitTick+0xa4>)
 8002062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002064:	f003 0310 	and.w	r3, r3, #16
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800206c:	f107 0210 	add.w	r2, r7, #16
 8002070:	f107 0314 	add.w	r3, r7, #20
 8002074:	4611      	mov	r1, r2
 8002076:	4618      	mov	r0, r3
 8002078:	f006 f90a 	bl	8008290 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800207c:	f006 f8e0 	bl	8008240 <HAL_RCC_GetPCLK1Freq>
 8002080:	4603      	mov	r3, r0
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002088:	4a13      	ldr	r2, [pc, #76]	; (80020d8 <HAL_InitTick+0xa8>)
 800208a:	fba2 2303 	umull	r2, r3, r2, r3
 800208e:	0c9b      	lsrs	r3, r3, #18
 8002090:	3b01      	subs	r3, #1
 8002092:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002094:	4b11      	ldr	r3, [pc, #68]	; (80020dc <HAL_InitTick+0xac>)
 8002096:	4a12      	ldr	r2, [pc, #72]	; (80020e0 <HAL_InitTick+0xb0>)
 8002098:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800209a:	4b10      	ldr	r3, [pc, #64]	; (80020dc <HAL_InitTick+0xac>)
 800209c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020a0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80020a2:	4a0e      	ldr	r2, [pc, #56]	; (80020dc <HAL_InitTick+0xac>)
 80020a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80020a8:	4b0c      	ldr	r3, [pc, #48]	; (80020dc <HAL_InitTick+0xac>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ae:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <HAL_InitTick+0xac>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80020b4:	4809      	ldr	r0, [pc, #36]	; (80020dc <HAL_InitTick+0xac>)
 80020b6:	f007 fd95 	bl	8009be4 <HAL_TIM_Base_Init>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d104      	bne.n	80020ca <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80020c0:	4806      	ldr	r0, [pc, #24]	; (80020dc <HAL_InitTick+0xac>)
 80020c2:	f007 fddf 	bl	8009c84 <HAL_TIM_Base_Start_IT>
 80020c6:	4603      	mov	r3, r0
 80020c8:	e000      	b.n	80020cc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3730      	adds	r7, #48	; 0x30
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40023800 	.word	0x40023800
 80020d8:	431bde83 	.word	0x431bde83
 80020dc:	200051f0 	.word	0x200051f0
 80020e0:	40001000 	.word	0x40001000

080020e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020e8:	e7fe      	b.n	80020e8 <NMI_Handler+0x4>

080020ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020ea:	b480      	push	{r7}
 80020ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020ee:	e7fe      	b.n	80020ee <HardFault_Handler+0x4>

080020f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020f4:	e7fe      	b.n	80020f4 <MemManage_Handler+0x4>

080020f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020f6:	b480      	push	{r7}
 80020f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020fa:	e7fe      	b.n	80020fa <BusFault_Handler+0x4>

080020fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002100:	e7fe      	b.n	8002100 <UsageFault_Handler+0x4>

08002102 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002102:	b480      	push	{r7}
 8002104:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002106:	bf00      	nop
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002114:	2001      	movs	r0, #1
 8002116:	f003 fc33 	bl	8005980 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
	...

08002120 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002124:	4802      	ldr	r0, [pc, #8]	; (8002130 <RTC_Alarm_IRQHandler+0x10>)
 8002126:	f006 fdd1 	bl	8008ccc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	200050c8 	.word	0x200050c8

08002134 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002138:	4802      	ldr	r0, [pc, #8]	; (8002144 <TIM6_DAC_IRQHandler+0x10>)
 800213a:	f007 fe6c 	bl	8009e16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800213e:	bf00      	nop
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	200051f0 	.word	0x200051f0

08002148 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800214c:	4802      	ldr	r0, [pc, #8]	; (8002158 <OTG_FS_IRQHandler+0x10>)
 800214e:	f004 fc75 	bl	8006a3c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	20006470 	.word	0x20006470

0800215c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002160:	4b06      	ldr	r3, [pc, #24]	; (800217c <SystemInit+0x20>)
 8002162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002166:	4a05      	ldr	r2, [pc, #20]	; (800217c <SystemInit+0x20>)
 8002168:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800216c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002170:	bf00      	nop
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	e000ed00 	.word	0xe000ed00

08002180 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b08e      	sub	sp, #56	; 0x38
 8002184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002186:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	605a      	str	r2, [r3, #4]
 8002190:	609a      	str	r2, [r3, #8]
 8002192:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002194:	f107 0320 	add.w	r3, r7, #32
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800219e:	1d3b      	adds	r3, r7, #4
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	60da      	str	r2, [r3, #12]
 80021aa:	611a      	str	r2, [r3, #16]
 80021ac:	615a      	str	r2, [r3, #20]
 80021ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021b0:	4b2d      	ldr	r3, [pc, #180]	; (8002268 <MX_TIM2_Init+0xe8>)
 80021b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 80021b8:	4b2b      	ldr	r3, [pc, #172]	; (8002268 <MX_TIM2_Init+0xe8>)
 80021ba:	2259      	movs	r2, #89	; 0x59
 80021bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021be:	4b2a      	ldr	r3, [pc, #168]	; (8002268 <MX_TIM2_Init+0xe8>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400-1;
 80021c4:	4b28      	ldr	r3, [pc, #160]	; (8002268 <MX_TIM2_Init+0xe8>)
 80021c6:	f240 128f 	movw	r2, #399	; 0x18f
 80021ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021cc:	4b26      	ldr	r3, [pc, #152]	; (8002268 <MX_TIM2_Init+0xe8>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021d2:	4b25      	ldr	r3, [pc, #148]	; (8002268 <MX_TIM2_Init+0xe8>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021d8:	4823      	ldr	r0, [pc, #140]	; (8002268 <MX_TIM2_Init+0xe8>)
 80021da:	f007 fd03 	bl	8009be4 <HAL_TIM_Base_Init>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80021e4:	f7ff fcdc 	bl	8001ba0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021ec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021f2:	4619      	mov	r1, r3
 80021f4:	481c      	ldr	r0, [pc, #112]	; (8002268 <MX_TIM2_Init+0xe8>)
 80021f6:	f007 ffd9 	bl	800a1ac <HAL_TIM_ConfigClockSource>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002200:	f7ff fcce 	bl	8001ba0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002204:	4818      	ldr	r0, [pc, #96]	; (8002268 <MX_TIM2_Init+0xe8>)
 8002206:	f007 fdad 	bl	8009d64 <HAL_TIM_PWM_Init>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002210:	f7ff fcc6 	bl	8001ba0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002214:	2320      	movs	r3, #32
 8002216:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002218:	2300      	movs	r3, #0
 800221a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800221c:	f107 0320 	add.w	r3, r7, #32
 8002220:	4619      	mov	r1, r3
 8002222:	4811      	ldr	r0, [pc, #68]	; (8002268 <MX_TIM2_Init+0xe8>)
 8002224:	f008 fb9c 	bl	800a960 <HAL_TIMEx_MasterConfigSynchronization>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800222e:	f7ff fcb7 	bl	8001ba0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002232:	2360      	movs	r3, #96	; 0x60
 8002234:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8002236:	2364      	movs	r3, #100	; 0x64
 8002238:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800223a:	2300      	movs	r3, #0
 800223c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800223e:	2300      	movs	r3, #0
 8002240:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002242:	1d3b      	adds	r3, r7, #4
 8002244:	2208      	movs	r2, #8
 8002246:	4619      	mov	r1, r3
 8002248:	4807      	ldr	r0, [pc, #28]	; (8002268 <MX_TIM2_Init+0xe8>)
 800224a:	f007 feed 	bl	800a028 <HAL_TIM_PWM_ConfigChannel>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002254:	f7ff fca4 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002258:	4803      	ldr	r0, [pc, #12]	; (8002268 <MX_TIM2_Init+0xe8>)
 800225a:	f000 f827 	bl	80022ac <HAL_TIM_MspPostInit>

}
 800225e:	bf00      	nop
 8002260:	3738      	adds	r7, #56	; 0x38
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	20005238 	.word	0x20005238

0800226c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800227c:	d10d      	bne.n	800229a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800227e:	2300      	movs	r3, #0
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <HAL_TIM_Base_MspInit+0x3c>)
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	4a08      	ldr	r2, [pc, #32]	; (80022a8 <HAL_TIM_Base_MspInit+0x3c>)
 8002288:	f043 0301 	orr.w	r3, r3, #1
 800228c:	6413      	str	r3, [r2, #64]	; 0x40
 800228e:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <HAL_TIM_Base_MspInit+0x3c>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800229a:	bf00      	nop
 800229c:	3714      	adds	r7, #20
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	40023800 	.word	0x40023800

080022ac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b088      	sub	sp, #32
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b4:	f107 030c 	add.w	r3, r7, #12
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	609a      	str	r2, [r3, #8]
 80022c0:	60da      	str	r2, [r3, #12]
 80022c2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022cc:	d11d      	bne.n	800230a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	60bb      	str	r3, [r7, #8]
 80022d2:	4b10      	ldr	r3, [pc, #64]	; (8002314 <HAL_TIM_MspPostInit+0x68>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	4a0f      	ldr	r2, [pc, #60]	; (8002314 <HAL_TIM_MspPostInit+0x68>)
 80022d8:	f043 0301 	orr.w	r3, r3, #1
 80022dc:	6313      	str	r3, [r2, #48]	; 0x30
 80022de:	4b0d      	ldr	r3, [pc, #52]	; (8002314 <HAL_TIM_MspPostInit+0x68>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	60bb      	str	r3, [r7, #8]
 80022e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 80022ea:	2304      	movs	r3, #4
 80022ec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ee:	2302      	movs	r3, #2
 80022f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022fa:	2301      	movs	r3, #1
 80022fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 80022fe:	f107 030c 	add.w	r3, r7, #12
 8002302:	4619      	mov	r1, r3
 8002304:	4804      	ldr	r0, [pc, #16]	; (8002318 <HAL_TIM_MspPostInit+0x6c>)
 8002306:	f003 f975 	bl	80055f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800230a:	bf00      	nop
 800230c:	3720      	adds	r7, #32
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40023800 	.word	0x40023800
 8002318:	40020000 	.word	0x40020000

0800231c <MX_UART8_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART8 init function */
void MX_UART8_Init(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8002320:	4b11      	ldr	r3, [pc, #68]	; (8002368 <MX_UART8_Init+0x4c>)
 8002322:	4a12      	ldr	r2, [pc, #72]	; (800236c <MX_UART8_Init+0x50>)
 8002324:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8002326:	4b10      	ldr	r3, [pc, #64]	; (8002368 <MX_UART8_Init+0x4c>)
 8002328:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800232c:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800232e:	4b0e      	ldr	r3, [pc, #56]	; (8002368 <MX_UART8_Init+0x4c>)
 8002330:	2200      	movs	r2, #0
 8002332:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8002334:	4b0c      	ldr	r3, [pc, #48]	; (8002368 <MX_UART8_Init+0x4c>)
 8002336:	2200      	movs	r2, #0
 8002338:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800233a:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <MX_UART8_Init+0x4c>)
 800233c:	2200      	movs	r2, #0
 800233e:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8002340:	4b09      	ldr	r3, [pc, #36]	; (8002368 <MX_UART8_Init+0x4c>)
 8002342:	220c      	movs	r2, #12
 8002344:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002346:	4b08      	ldr	r3, [pc, #32]	; (8002368 <MX_UART8_Init+0x4c>)
 8002348:	2200      	movs	r2, #0
 800234a:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 800234c:	4b06      	ldr	r3, [pc, #24]	; (8002368 <MX_UART8_Init+0x4c>)
 800234e:	2200      	movs	r2, #0
 8002350:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8002352:	4805      	ldr	r0, [pc, #20]	; (8002368 <MX_UART8_Init+0x4c>)
 8002354:	f008 fb94 	bl	800aa80 <HAL_UART_Init>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 800235e:	f7ff fc1f 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	200052c4 	.word	0x200052c4
 800236c:	40007c00 	.word	0x40007c00

08002370 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002374:	4b11      	ldr	r3, [pc, #68]	; (80023bc <MX_USART3_UART_Init+0x4c>)
 8002376:	4a12      	ldr	r2, [pc, #72]	; (80023c0 <MX_USART3_UART_Init+0x50>)
 8002378:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800237a:	4b10      	ldr	r3, [pc, #64]	; (80023bc <MX_USART3_UART_Init+0x4c>)
 800237c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002380:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002382:	4b0e      	ldr	r3, [pc, #56]	; (80023bc <MX_USART3_UART_Init+0x4c>)
 8002384:	2200      	movs	r2, #0
 8002386:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002388:	4b0c      	ldr	r3, [pc, #48]	; (80023bc <MX_USART3_UART_Init+0x4c>)
 800238a:	2200      	movs	r2, #0
 800238c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800238e:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <MX_USART3_UART_Init+0x4c>)
 8002390:	2200      	movs	r2, #0
 8002392:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002394:	4b09      	ldr	r3, [pc, #36]	; (80023bc <MX_USART3_UART_Init+0x4c>)
 8002396:	220c      	movs	r2, #12
 8002398:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800239a:	4b08      	ldr	r3, [pc, #32]	; (80023bc <MX_USART3_UART_Init+0x4c>)
 800239c:	2200      	movs	r2, #0
 800239e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80023a0:	4b06      	ldr	r3, [pc, #24]	; (80023bc <MX_USART3_UART_Init+0x4c>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80023a6:	4805      	ldr	r0, [pc, #20]	; (80023bc <MX_USART3_UART_Init+0x4c>)
 80023a8:	f008 fb6a 	bl	800aa80 <HAL_UART_Init>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80023b2:	f7ff fbf5 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80023b6:	bf00      	nop
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	20005280 	.word	0x20005280
 80023c0:	40004800 	.word	0x40004800

080023c4 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80023c8:	4b11      	ldr	r3, [pc, #68]	; (8002410 <MX_USART6_UART_Init+0x4c>)
 80023ca:	4a12      	ldr	r2, [pc, #72]	; (8002414 <MX_USART6_UART_Init+0x50>)
 80023cc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80023ce:	4b10      	ldr	r3, [pc, #64]	; (8002410 <MX_USART6_UART_Init+0x4c>)
 80023d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80023d4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80023d6:	4b0e      	ldr	r3, [pc, #56]	; (8002410 <MX_USART6_UART_Init+0x4c>)
 80023d8:	2200      	movs	r2, #0
 80023da:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80023dc:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <MX_USART6_UART_Init+0x4c>)
 80023de:	2200      	movs	r2, #0
 80023e0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80023e2:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <MX_USART6_UART_Init+0x4c>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80023e8:	4b09      	ldr	r3, [pc, #36]	; (8002410 <MX_USART6_UART_Init+0x4c>)
 80023ea:	220c      	movs	r2, #12
 80023ec:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ee:	4b08      	ldr	r3, [pc, #32]	; (8002410 <MX_USART6_UART_Init+0x4c>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80023f4:	4b06      	ldr	r3, [pc, #24]	; (8002410 <MX_USART6_UART_Init+0x4c>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80023fa:	4805      	ldr	r0, [pc, #20]	; (8002410 <MX_USART6_UART_Init+0x4c>)
 80023fc:	f008 fb40 	bl	800aa80 <HAL_UART_Init>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002406:	f7ff fbcb 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	20005308 	.word	0x20005308
 8002414:	40011400 	.word	0x40011400

08002418 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b08e      	sub	sp, #56	; 0x38
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002420:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	609a      	str	r2, [r3, #8]
 800242c:	60da      	str	r2, [r3, #12]
 800242e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART8)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a4b      	ldr	r2, [pc, #300]	; (8002564 <HAL_UART_MspInit+0x14c>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d12c      	bne.n	8002494 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* UART8 clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	623b      	str	r3, [r7, #32]
 800243e:	4b4a      	ldr	r3, [pc, #296]	; (8002568 <HAL_UART_MspInit+0x150>)
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	4a49      	ldr	r2, [pc, #292]	; (8002568 <HAL_UART_MspInit+0x150>)
 8002444:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002448:	6413      	str	r3, [r2, #64]	; 0x40
 800244a:	4b47      	ldr	r3, [pc, #284]	; (8002568 <HAL_UART_MspInit+0x150>)
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002452:	623b      	str	r3, [r7, #32]
 8002454:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002456:	2300      	movs	r3, #0
 8002458:	61fb      	str	r3, [r7, #28]
 800245a:	4b43      	ldr	r3, [pc, #268]	; (8002568 <HAL_UART_MspInit+0x150>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	4a42      	ldr	r2, [pc, #264]	; (8002568 <HAL_UART_MspInit+0x150>)
 8002460:	f043 0310 	orr.w	r3, r3, #16
 8002464:	6313      	str	r3, [r2, #48]	; 0x30
 8002466:	4b40      	ldr	r3, [pc, #256]	; (8002568 <HAL_UART_MspInit+0x150>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	f003 0310 	and.w	r3, r3, #16
 800246e:	61fb      	str	r3, [r7, #28]
 8002470:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 8002472:	2303      	movs	r3, #3
 8002474:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002476:	2302      	movs	r3, #2
 8002478:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247a:	2300      	movs	r3, #0
 800247c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800247e:	2303      	movs	r3, #3
 8002480:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002482:	2308      	movs	r3, #8
 8002484:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002486:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800248a:	4619      	mov	r1, r3
 800248c:	4837      	ldr	r0, [pc, #220]	; (800256c <HAL_UART_MspInit+0x154>)
 800248e:	f003 f8b1 	bl	80055f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002492:	e063      	b.n	800255c <HAL_UART_MspInit+0x144>
  else if(uartHandle->Instance==USART3)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a35      	ldr	r2, [pc, #212]	; (8002570 <HAL_UART_MspInit+0x158>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d12d      	bne.n	80024fa <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	61bb      	str	r3, [r7, #24]
 80024a2:	4b31      	ldr	r3, [pc, #196]	; (8002568 <HAL_UART_MspInit+0x150>)
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	4a30      	ldr	r2, [pc, #192]	; (8002568 <HAL_UART_MspInit+0x150>)
 80024a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024ac:	6413      	str	r3, [r2, #64]	; 0x40
 80024ae:	4b2e      	ldr	r3, [pc, #184]	; (8002568 <HAL_UART_MspInit+0x150>)
 80024b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024b6:	61bb      	str	r3, [r7, #24]
 80024b8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	617b      	str	r3, [r7, #20]
 80024be:	4b2a      	ldr	r3, [pc, #168]	; (8002568 <HAL_UART_MspInit+0x150>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	4a29      	ldr	r2, [pc, #164]	; (8002568 <HAL_UART_MspInit+0x150>)
 80024c4:	f043 0308 	orr.w	r3, r3, #8
 80024c8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ca:	4b27      	ldr	r3, [pc, #156]	; (8002568 <HAL_UART_MspInit+0x150>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	617b      	str	r3, [r7, #20]
 80024d4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 80024d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80024da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024dc:	2302      	movs	r3, #2
 80024de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e4:	2303      	movs	r3, #3
 80024e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024e8:	2307      	movs	r3, #7
 80024ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024f0:	4619      	mov	r1, r3
 80024f2:	4820      	ldr	r0, [pc, #128]	; (8002574 <HAL_UART_MspInit+0x15c>)
 80024f4:	f003 f87e 	bl	80055f4 <HAL_GPIO_Init>
}
 80024f8:	e030      	b.n	800255c <HAL_UART_MspInit+0x144>
  else if(uartHandle->Instance==USART6)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a1e      	ldr	r2, [pc, #120]	; (8002578 <HAL_UART_MspInit+0x160>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d12b      	bne.n	800255c <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002504:	2300      	movs	r3, #0
 8002506:	613b      	str	r3, [r7, #16]
 8002508:	4b17      	ldr	r3, [pc, #92]	; (8002568 <HAL_UART_MspInit+0x150>)
 800250a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250c:	4a16      	ldr	r2, [pc, #88]	; (8002568 <HAL_UART_MspInit+0x150>)
 800250e:	f043 0320 	orr.w	r3, r3, #32
 8002512:	6453      	str	r3, [r2, #68]	; 0x44
 8002514:	4b14      	ldr	r3, [pc, #80]	; (8002568 <HAL_UART_MspInit+0x150>)
 8002516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002518:	f003 0320 	and.w	r3, r3, #32
 800251c:	613b      	str	r3, [r7, #16]
 800251e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002520:	2300      	movs	r3, #0
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	4b10      	ldr	r3, [pc, #64]	; (8002568 <HAL_UART_MspInit+0x150>)
 8002526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002528:	4a0f      	ldr	r2, [pc, #60]	; (8002568 <HAL_UART_MspInit+0x150>)
 800252a:	f043 0304 	orr.w	r3, r3, #4
 800252e:	6313      	str	r3, [r2, #48]	; 0x30
 8002530:	4b0d      	ldr	r3, [pc, #52]	; (8002568 <HAL_UART_MspInit+0x150>)
 8002532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002534:	f003 0304 	and.w	r3, r3, #4
 8002538:	60fb      	str	r3, [r7, #12]
 800253a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 800253c:	23c0      	movs	r3, #192	; 0xc0
 800253e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002540:	2302      	movs	r3, #2
 8002542:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002544:	2300      	movs	r3, #0
 8002546:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002548:	2303      	movs	r3, #3
 800254a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800254c:	2308      	movs	r3, #8
 800254e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002554:	4619      	mov	r1, r3
 8002556:	4809      	ldr	r0, [pc, #36]	; (800257c <HAL_UART_MspInit+0x164>)
 8002558:	f003 f84c 	bl	80055f4 <HAL_GPIO_Init>
}
 800255c:	bf00      	nop
 800255e:	3738      	adds	r7, #56	; 0x38
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40007c00 	.word	0x40007c00
 8002568:	40023800 	.word	0x40023800
 800256c:	40021000 	.word	0x40021000
 8002570:	40004800 	.word	0x40004800
 8002574:	40020c00 	.word	0x40020c00
 8002578:	40011400 	.word	0x40011400
 800257c:	40020800 	.word	0x40020800

08002580 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002580:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002584:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002586:	e003      	b.n	8002590 <LoopCopyDataInit>

08002588 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002588:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800258a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800258c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800258e:	3104      	adds	r1, #4

08002590 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002590:	480b      	ldr	r0, [pc, #44]	; (80025c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002592:	4b0c      	ldr	r3, [pc, #48]	; (80025c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002594:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002596:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002598:	d3f6      	bcc.n	8002588 <CopyDataInit>
  ldr  r2, =_sbss
 800259a:	4a0b      	ldr	r2, [pc, #44]	; (80025c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800259c:	e002      	b.n	80025a4 <LoopFillZerobss>

0800259e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800259e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80025a0:	f842 3b04 	str.w	r3, [r2], #4

080025a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80025a4:	4b09      	ldr	r3, [pc, #36]	; (80025cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80025a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80025a8:	d3f9      	bcc.n	800259e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80025aa:	f7ff fdd7 	bl	800215c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025ae:	f010 f863 	bl	8012678 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025b2:	f7ff fa41 	bl	8001a38 <main>
  bx  lr    
 80025b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80025b8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80025bc:	080181f8 	.word	0x080181f8
  ldr  r0, =_sdata
 80025c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80025c4:	20000254 	.word	0x20000254
  ldr  r2, =_sbss
 80025c8:	20000254 	.word	0x20000254
  ldr  r3, = _ebss
 80025cc:	20006888 	.word	0x20006888

080025d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025d0:	e7fe      	b.n	80025d0 <ADC_IRQHandler>
	...

080025d4 <MRT_external_flash_Init>:


//**************************************************//
//FUNCTIONS

void MRT_external_flash_Init(void){
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0

	for (int i = 0; i < NB_OF_FLAGS; i++){
 80025da:	2300      	movs	r3, #0
 80025dc:	607b      	str	r3, [r7, #4]
 80025de:	e007      	b.n	80025f0 <MRT_external_flash_Init+0x1c>
		FLAGS_NULL_BUFFER[i] = 0; //Setup the flags null buffer for the correct number of values
 80025e0:	4a0e      	ldr	r2, [pc, #56]	; (800261c <MRT_external_flash_Init+0x48>)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4413      	add	r3, r2
 80025e6:	2200      	movs	r2, #0
 80025e8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	3301      	adds	r3, #1
 80025ee:	607b      	str	r3, [r7, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	ddf4      	ble.n	80025e0 <MRT_external_flash_Init+0xc>
	}

	if (!W25qxx_Init()) {
 80025f6:	f000 fc71 	bl	8002edc <W25qxx_Init>
 80025fa:	4603      	mov	r3, r0
 80025fc:	f083 0301 	eor.w	r3, r3, #1
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <MRT_external_flash_Init+0x36>
		Error_Handler(); // hangs and blinks LEDF
 8002606:	f7ff facb 	bl	8001ba0 <Error_Handler>
	}
	MRT_check_for_wake_up(); //Needs to be called before getFlags() and after the W25xx_Init()
 800260a:	f001 f8f7 	bl	80037fc <MRT_check_for_wake_up>
	MRT_get_flags();
 800260e:	f000 f807 	bl	8002620 <MRT_get_flags>
}
 8002612:	bf00      	nop
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	2000534c 	.word	0x2000534c

08002620 <MRT_get_flags>:




void MRT_get_flags(void){
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0

	//Retrieve flags
	W25qxx_ReadSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8002624:	2305      	movs	r3, #5
 8002626:	2200      	movs	r2, #0
 8002628:	2101      	movs	r1, #1
 800262a:	486a      	ldr	r0, [pc, #424]	; (80027d4 <MRT_get_flags+0x1b4>)
 800262c:	f001 f830 	bl	8003690 <W25qxx_ReadSector>

	//Retrieve RTC time (last recorded)
	W25qxx_ReadSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8002630:	2303      	movs	r3, #3
 8002632:	2200      	movs	r2, #0
 8002634:	2102      	movs	r1, #2
 8002636:	4868      	ldr	r0, [pc, #416]	; (80027d8 <MRT_get_flags+0x1b8>)
 8002638:	f001 f82a 	bl	8003690 <W25qxx_ReadSector>

	//If RTC detected a wake up, update the flash memory
	if (wu_flag == 1){
 800263c:	4b67      	ldr	r3, [pc, #412]	; (80027dc <MRT_get_flags+0x1bc>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d10e      	bne.n	8002662 <MRT_get_flags+0x42>
		//Write the new number of wake up to external flash
		flash_flags_buffer[WU_FLAG_OFFSET] = flash_flags_buffer[WU_FLAG_OFFSET] + 1; //Update number of wake up
 8002644:	4b63      	ldr	r3, [pc, #396]	; (80027d4 <MRT_get_flags+0x1b4>)
 8002646:	785b      	ldrb	r3, [r3, #1]
 8002648:	3301      	adds	r3, #1
 800264a:	b2da      	uxtb	r2, r3
 800264c:	4b61      	ldr	r3, [pc, #388]	; (80027d4 <MRT_get_flags+0x1b4>)
 800264e:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(1);
 8002650:	2001      	movs	r0, #1
 8002652:	f000 fd95 	bl	8003180 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8002656:	2305      	movs	r3, #5
 8002658:	2200      	movs	r2, #0
 800265a:	2101      	movs	r1, #1
 800265c:	485d      	ldr	r0, [pc, #372]	; (80027d4 <MRT_get_flags+0x1b4>)
 800265e:	f000 fed9 	bl	8003414 <W25qxx_WriteSector>
	}

	//Assign each value read to their variable
	 MRT_update_flags_values();
 8002662:	f000 f8cb 	bl	80027fc <MRT_update_flags_values>


	//Check flags values
	//Reset flag
	if (reset_flag != 0 && reset_flag !=1){ //If random value (none was written)
 8002666:	4b5e      	ldr	r3, [pc, #376]	; (80027e0 <MRT_get_flags+0x1c0>)
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d013      	beq.n	8002696 <MRT_get_flags+0x76>
 800266e:	4b5c      	ldr	r3, [pc, #368]	; (80027e0 <MRT_get_flags+0x1c0>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d00f      	beq.n	8002696 <MRT_get_flags+0x76>
		reset_flag = 0;
 8002676:	4b5a      	ldr	r3, [pc, #360]	; (80027e0 <MRT_get_flags+0x1c0>)
 8002678:	2200      	movs	r2, #0
 800267a:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[RESET_FLAG_OFFSET] = reset_flag;
 800267c:	4b58      	ldr	r3, [pc, #352]	; (80027e0 <MRT_get_flags+0x1c0>)
 800267e:	781a      	ldrb	r2, [r3, #0]
 8002680:	4b54      	ldr	r3, [pc, #336]	; (80027d4 <MRT_get_flags+0x1b4>)
 8002682:	701a      	strb	r2, [r3, #0]
		W25qxx_EraseSector(1);
 8002684:	2001      	movs	r0, #1
 8002686:	f000 fd7b 	bl	8003180 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 800268a:	2305      	movs	r3, #5
 800268c:	2200      	movs	r2, #0
 800268e:	2101      	movs	r1, #1
 8002690:	4850      	ldr	r0, [pc, #320]	; (80027d4 <MRT_get_flags+0x1b4>)
 8002692:	f000 febf 	bl	8003414 <W25qxx_WriteSector>
	}

	//Wake up flag
	if (wu_flag != 0 && wu_flag !=1 && wu_flag !=2){ //If random value (none was written)
 8002696:	4b51      	ldr	r3, [pc, #324]	; (80027dc <MRT_get_flags+0x1bc>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d017      	beq.n	80026ce <MRT_get_flags+0xae>
 800269e:	4b4f      	ldr	r3, [pc, #316]	; (80027dc <MRT_get_flags+0x1bc>)
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d013      	beq.n	80026ce <MRT_get_flags+0xae>
 80026a6:	4b4d      	ldr	r3, [pc, #308]	; (80027dc <MRT_get_flags+0x1bc>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d00f      	beq.n	80026ce <MRT_get_flags+0xae>
		wu_flag = 0;
 80026ae:	4b4b      	ldr	r3, [pc, #300]	; (80027dc <MRT_get_flags+0x1bc>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[WU_FLAG_OFFSET] = wu_flag;
 80026b4:	4b49      	ldr	r3, [pc, #292]	; (80027dc <MRT_get_flags+0x1bc>)
 80026b6:	781a      	ldrb	r2, [r3, #0]
 80026b8:	4b46      	ldr	r3, [pc, #280]	; (80027d4 <MRT_get_flags+0x1b4>)
 80026ba:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(1);
 80026bc:	2001      	movs	r0, #1
 80026be:	f000 fd5f 	bl	8003180 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 80026c2:	2305      	movs	r3, #5
 80026c4:	2200      	movs	r2, #0
 80026c6:	2101      	movs	r1, #1
 80026c8:	4842      	ldr	r0, [pc, #264]	; (80027d4 <MRT_get_flags+0x1b4>)
 80026ca:	f000 fea3 	bl	8003414 <W25qxx_WriteSector>
	}

	//IWDG flag
	if (iwdg_flag != 0 && iwdg_flag !=1){ //If random value (none was written)
 80026ce:	4b45      	ldr	r3, [pc, #276]	; (80027e4 <MRT_get_flags+0x1c4>)
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d013      	beq.n	80026fe <MRT_get_flags+0xde>
 80026d6:	4b43      	ldr	r3, [pc, #268]	; (80027e4 <MRT_get_flags+0x1c4>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d00f      	beq.n	80026fe <MRT_get_flags+0xde>
		iwdg_flag = 0;
 80026de:	4b41      	ldr	r3, [pc, #260]	; (80027e4 <MRT_get_flags+0x1c4>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 80026e4:	4b3f      	ldr	r3, [pc, #252]	; (80027e4 <MRT_get_flags+0x1c4>)
 80026e6:	781a      	ldrb	r2, [r3, #0]
 80026e8:	4b3a      	ldr	r3, [pc, #232]	; (80027d4 <MRT_get_flags+0x1b4>)
 80026ea:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(1);
 80026ec:	2001      	movs	r0, #1
 80026ee:	f000 fd47 	bl	8003180 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 80026f2:	2305      	movs	r3, #5
 80026f4:	2200      	movs	r2, #0
 80026f6:	2101      	movs	r1, #1
 80026f8:	4836      	ldr	r0, [pc, #216]	; (80027d4 <MRT_get_flags+0x1b4>)
 80026fa:	f000 fe8b 	bl	8003414 <W25qxx_WriteSector>
	}

	//Apogee flag
	if (apogee_flag != 0 && apogee_flag !=1){ //If random value (none was written)
 80026fe:	4b3a      	ldr	r3, [pc, #232]	; (80027e8 <MRT_get_flags+0x1c8>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d013      	beq.n	800272e <MRT_get_flags+0x10e>
 8002706:	4b38      	ldr	r3, [pc, #224]	; (80027e8 <MRT_get_flags+0x1c8>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d00f      	beq.n	800272e <MRT_get_flags+0x10e>
		apogee_flag = 0;
 800270e:	4b36      	ldr	r3, [pc, #216]	; (80027e8 <MRT_get_flags+0x1c8>)
 8002710:	2200      	movs	r2, #0
 8002712:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[APOGEE_FLAG_OFFSET] = apogee_flag;
 8002714:	4b34      	ldr	r3, [pc, #208]	; (80027e8 <MRT_get_flags+0x1c8>)
 8002716:	781a      	ldrb	r2, [r3, #0]
 8002718:	4b2e      	ldr	r3, [pc, #184]	; (80027d4 <MRT_get_flags+0x1b4>)
 800271a:	70da      	strb	r2, [r3, #3]
		W25qxx_EraseSector(1);
 800271c:	2001      	movs	r0, #1
 800271e:	f000 fd2f 	bl	8003180 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8002722:	2305      	movs	r3, #5
 8002724:	2200      	movs	r2, #0
 8002726:	2101      	movs	r1, #1
 8002728:	482a      	ldr	r0, [pc, #168]	; (80027d4 <MRT_get_flags+0x1b4>)
 800272a:	f000 fe73 	bl	8003414 <W25qxx_WriteSector>
	}

	//Ejection state flag
	if (!(ejection_state_flag >= 0 && ejection_state_flag <=4)){ //If random value (none was written)
 800272e:	4b2f      	ldr	r3, [pc, #188]	; (80027ec <MRT_get_flags+0x1cc>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	2b04      	cmp	r3, #4
 8002734:	d90f      	bls.n	8002756 <MRT_get_flags+0x136>
		ejection_state_flag = 0;
 8002736:	4b2d      	ldr	r3, [pc, #180]	; (80027ec <MRT_get_flags+0x1cc>)
 8002738:	2200      	movs	r2, #0
 800273a:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[EJECTION_STATE_FLAG_OFFSET] = ejection_state_flag;
 800273c:	4b2b      	ldr	r3, [pc, #172]	; (80027ec <MRT_get_flags+0x1cc>)
 800273e:	781a      	ldrb	r2, [r3, #0]
 8002740:	4b24      	ldr	r3, [pc, #144]	; (80027d4 <MRT_get_flags+0x1b4>)
 8002742:	711a      	strb	r2, [r3, #4]
		W25qxx_EraseSector(1);
 8002744:	2001      	movs	r0, #1
 8002746:	f000 fd1b 	bl	8003180 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 800274a:	2305      	movs	r3, #5
 800274c:	2200      	movs	r2, #0
 800274e:	2101      	movs	r1, #1
 8002750:	4820      	ldr	r0, [pc, #128]	; (80027d4 <MRT_get_flags+0x1b4>)
 8002752:	f000 fe5f 	bl	8003414 <W25qxx_WriteSector>
	}


	//Check RTC time values
	//Hours
	if (!(prev_hours >= 0 && prev_hours < 24)){ //If random value (none was written)
 8002756:	4b26      	ldr	r3, [pc, #152]	; (80027f0 <MRT_get_flags+0x1d0>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	2b17      	cmp	r3, #23
 800275c:	d90f      	bls.n	800277e <MRT_get_flags+0x15e>
		prev_hours = 0;
 800275e:	4b24      	ldr	r3, [pc, #144]	; (80027f0 <MRT_get_flags+0x1d0>)
 8002760:	2200      	movs	r2, #0
 8002762:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_HOURS_OFFSET] = prev_hours;
 8002764:	4b22      	ldr	r3, [pc, #136]	; (80027f0 <MRT_get_flags+0x1d0>)
 8002766:	781a      	ldrb	r2, [r3, #0]
 8002768:	4b1b      	ldr	r3, [pc, #108]	; (80027d8 <MRT_get_flags+0x1b8>)
 800276a:	701a      	strb	r2, [r3, #0]
		W25qxx_EraseSector(2);
 800276c:	2002      	movs	r0, #2
 800276e:	f000 fd07 	bl	8003180 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8002772:	2303      	movs	r3, #3
 8002774:	2200      	movs	r2, #0
 8002776:	2102      	movs	r1, #2
 8002778:	4817      	ldr	r0, [pc, #92]	; (80027d8 <MRT_get_flags+0x1b8>)
 800277a:	f000 fe4b 	bl	8003414 <W25qxx_WriteSector>
	}

	//Minutes
	if (!(prev_min >= 0 && prev_min < 60)){ //If random value (none was written)
 800277e:	4b1d      	ldr	r3, [pc, #116]	; (80027f4 <MRT_get_flags+0x1d4>)
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	2b3b      	cmp	r3, #59	; 0x3b
 8002784:	d90f      	bls.n	80027a6 <MRT_get_flags+0x186>
		prev_min = 0;
 8002786:	4b1b      	ldr	r3, [pc, #108]	; (80027f4 <MRT_get_flags+0x1d4>)
 8002788:	2200      	movs	r2, #0
 800278a:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_MIN_OFFSET] = prev_min;
 800278c:	4b19      	ldr	r3, [pc, #100]	; (80027f4 <MRT_get_flags+0x1d4>)
 800278e:	781a      	ldrb	r2, [r3, #0]
 8002790:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <MRT_get_flags+0x1b8>)
 8002792:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(2);
 8002794:	2002      	movs	r0, #2
 8002796:	f000 fcf3 	bl	8003180 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 800279a:	2303      	movs	r3, #3
 800279c:	2200      	movs	r2, #0
 800279e:	2102      	movs	r1, #2
 80027a0:	480d      	ldr	r0, [pc, #52]	; (80027d8 <MRT_get_flags+0x1b8>)
 80027a2:	f000 fe37 	bl	8003414 <W25qxx_WriteSector>
	}

	//Seconds
	if (!(prev_sec >= 0 && prev_sec < 60)){ //If random value (none was written)
 80027a6:	4b14      	ldr	r3, [pc, #80]	; (80027f8 <MRT_get_flags+0x1d8>)
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	2b3b      	cmp	r3, #59	; 0x3b
 80027ac:	d90f      	bls.n	80027ce <MRT_get_flags+0x1ae>
		prev_sec = 0;
 80027ae:	4b12      	ldr	r3, [pc, #72]	; (80027f8 <MRT_get_flags+0x1d8>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_SEC_OFFSET] = prev_sec;
 80027b4:	4b10      	ldr	r3, [pc, #64]	; (80027f8 <MRT_get_flags+0x1d8>)
 80027b6:	781a      	ldrb	r2, [r3, #0]
 80027b8:	4b07      	ldr	r3, [pc, #28]	; (80027d8 <MRT_get_flags+0x1b8>)
 80027ba:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(2);
 80027bc:	2002      	movs	r0, #2
 80027be:	f000 fcdf 	bl	8003180 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 80027c2:	2303      	movs	r3, #3
 80027c4:	2200      	movs	r2, #0
 80027c6:	2102      	movs	r1, #2
 80027c8:	4803      	ldr	r0, [pc, #12]	; (80027d8 <MRT_get_flags+0x1b8>)
 80027ca:	f000 fe23 	bl	8003414 <W25qxx_WriteSector>
	}
}
 80027ce:	bf00      	nop
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	20005354 	.word	0x20005354
 80027d8:	2000535c 	.word	0x2000535c
 80027dc:	20000271 	.word	0x20000271
 80027e0:	20000270 	.word	0x20000270
 80027e4:	20000272 	.word	0x20000272
 80027e8:	20000273 	.word	0x20000273
 80027ec:	20000274 	.word	0x20000274
 80027f0:	20000275 	.word	0x20000275
 80027f4:	20000276 	.word	0x20000276
 80027f8:	20000277 	.word	0x20000277

080027fc <MRT_update_flags_values>:
		flash_time_buffer[i] = *flash_time[i];
	}
}


void MRT_update_flags_values(void){
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8002802:	2300      	movs	r3, #0
 8002804:	607b      	str	r3, [r7, #4]
 8002806:	e00b      	b.n	8002820 <MRT_update_flags_values+0x24>
		*flash_flags[i] = flash_flags_buffer[i];
 8002808:	4a13      	ldr	r2, [pc, #76]	; (8002858 <MRT_update_flags_values+0x5c>)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002810:	4912      	ldr	r1, [pc, #72]	; (800285c <MRT_update_flags_values+0x60>)
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	440a      	add	r2, r1
 8002816:	7812      	ldrb	r2, [r2, #0]
 8002818:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	3301      	adds	r3, #1
 800281e:	607b      	str	r3, [r7, #4]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b04      	cmp	r3, #4
 8002824:	ddf0      	ble.n	8002808 <MRT_update_flags_values+0xc>
	}
	for (int i = 0; i < 3; i++){
 8002826:	2300      	movs	r3, #0
 8002828:	603b      	str	r3, [r7, #0]
 800282a:	e00b      	b.n	8002844 <MRT_update_flags_values+0x48>
		*flash_time[i] = flash_time_buffer[i];
 800282c:	4a0c      	ldr	r2, [pc, #48]	; (8002860 <MRT_update_flags_values+0x64>)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002834:	490b      	ldr	r1, [pc, #44]	; (8002864 <MRT_update_flags_values+0x68>)
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	440a      	add	r2, r1
 800283a:	7812      	ldrb	r2, [r2, #0]
 800283c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 3; i++){
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	3301      	adds	r3, #1
 8002842:	603b      	str	r3, [r7, #0]
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	2b02      	cmp	r3, #2
 8002848:	ddf0      	ble.n	800282c <MRT_update_flags_values+0x30>
	}
}
 800284a:	bf00      	nop
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	20000004 	.word	0x20000004
 800285c:	20005354 	.word	0x20005354
 8002860:	20000018 	.word	0x20000018
 8002864:	2000535c 	.word	0x2000535c

08002868 <myprintf>:


uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value);
void str2upper(char* string, char* upper);

void myprintf(const char *fmt, ...) { // currently does nothing, was copied from a tutorial to make the code work
 8002868:	b40f      	push	{r0, r1, r2, r3}
 800286a:	b580      	push	{r7, lr}
 800286c:	b082      	sub	sp, #8
 800286e:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8002870:	f107 0314 	add.w	r3, r7, #20
 8002874:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800287e:	480a      	ldr	r0, [pc, #40]	; (80028a8 <myprintf+0x40>)
 8002880:	f011 fe16 	bl	80144b0 <vsniprintf>
  va_end(args);

  //CDC_Transmit_FS((uint8_t *)buffer, strlen(buffer));
  HAL_UART_Transmit(&DEBUG_UART, (uint8_t*)buffer, strlen(buffer), -1);
 8002884:	4808      	ldr	r0, [pc, #32]	; (80028a8 <myprintf+0x40>)
 8002886:	f7fd fcb3 	bl	80001f0 <strlen>
 800288a:	4603      	mov	r3, r0
 800288c:	b29a      	uxth	r2, r3
 800288e:	f04f 33ff 	mov.w	r3, #4294967295
 8002892:	4905      	ldr	r1, [pc, #20]	; (80028a8 <myprintf+0x40>)
 8002894:	4805      	ldr	r0, [pc, #20]	; (80028ac <myprintf+0x44>)
 8002896:	f008 f940 	bl	800ab1a <HAL_UART_Transmit>

}
 800289a:	bf00      	nop
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80028a4:	b004      	add	sp, #16
 80028a6:	4770      	bx	lr
 80028a8:	2000027c 	.word	0x2000027c
 80028ac:	200052c4 	.word	0x200052c4

080028b0 <sd_init_dynamic_filename>:
 * creates new file of form "[prefix][number].txt"
 * where the string composed of "[prefix][number]" is 8 characters long.
 *
 */
FRESULT sd_init_dynamic_filename(char *prefix, char *header_text, char* return_filename)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08a      	sub	sp, #40	; 0x28
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
	FRESULT fres = f_mount(&FatFs, "", 1);
 80028bc:	2201      	movs	r2, #1
 80028be:	4932      	ldr	r1, [pc, #200]	; (8002988 <sd_init_dynamic_filename+0xd8>)
 80028c0:	4832      	ldr	r0, [pc, #200]	; (800298c <sd_init_dynamic_filename+0xdc>)
 80028c2:	f00c faef 	bl	800eea4 <f_mount>
 80028c6:	4603      	mov	r3, r0
 80028c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (fres != FR_OK) {
 80028cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d008      	beq.n	80028e6 <sd_init_dynamic_filename+0x36>
		myprintf("f_mount error (%i)\r\n", fres);
 80028d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028d8:	4619      	mov	r1, r3
 80028da:	482d      	ldr	r0, [pc, #180]	; (8002990 <sd_init_dynamic_filename+0xe0>)
 80028dc:	f7ff ffc4 	bl	8002868 <myprintf>
		return fres;
 80028e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028e4:	e04b      	b.n	800297e <sd_init_dynamic_filename+0xce>
	}

	// scan files on drive to figure out what suffix number is appropriate
	uint32_t max_used_value = 0;
 80028e6:	2300      	movs	r3, #0
 80028e8:	623b      	str	r3, [r7, #32]
	fres = scan_files("", prefix, &max_used_value);
 80028ea:	f107 0320 	add.w	r3, r7, #32
 80028ee:	461a      	mov	r2, r3
 80028f0:	68f9      	ldr	r1, [r7, #12]
 80028f2:	4825      	ldr	r0, [pc, #148]	; (8002988 <sd_init_dynamic_filename+0xd8>)
 80028f4:	f000 f884 	bl	8002a00 <scan_files>
 80028f8:	4603      	mov	r3, r0
 80028fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// create filename (max filename length in char array is 13 without LFN)
	char filename[13];
	sprintf(filename, "fc%06lu.txt", max_used_value + 1);
 80028fe:	6a3b      	ldr	r3, [r7, #32]
 8002900:	1c5a      	adds	r2, r3, #1
 8002902:	f107 0310 	add.w	r3, r7, #16
 8002906:	4923      	ldr	r1, [pc, #140]	; (8002994 <sd_init_dynamic_filename+0xe4>)
 8002908:	4618      	mov	r0, r3
 800290a:	f010 fe6b 	bl	80135e4 <siprintf>
	return_filename = strcpy(return_filename, filename); // needed so that other functions can open the file!
 800290e:	f107 0310 	add.w	r3, r7, #16
 8002912:	4619      	mov	r1, r3
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f010 fec8 	bl	80136aa <strcpy>
 800291a:	6078      	str	r0, [r7, #4]

	// open file (create file) on SD card
	fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 800291c:	f107 0310 	add.w	r3, r7, #16
 8002920:	221a      	movs	r2, #26
 8002922:	4619      	mov	r1, r3
 8002924:	481c      	ldr	r0, [pc, #112]	; (8002998 <sd_init_dynamic_filename+0xe8>)
 8002926:	f00c fb21 	bl	800ef6c <f_open>
 800292a:	4603      	mov	r3, r0
 800292c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (fres == FR_OK) {
 8002930:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002934:	2b00      	cmp	r3, #0
 8002936:	d11a      	bne.n	800296e <sd_init_dynamic_filename+0xbe>
		myprintf("I was able to open filename.txt for writing\r\n");
 8002938:	4818      	ldr	r0, [pc, #96]	; (800299c <sd_init_dynamic_filename+0xec>)
 800293a:	f7ff ff95 	bl	8002868 <myprintf>
	} else {
		myprintf("f_open error (%i)\r\n", fres);
		return fres;
	}
	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 800293e:	4b16      	ldr	r3, [pc, #88]	; (8002998 <sd_init_dynamic_filename+0xe8>)
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	4619      	mov	r1, r3
 8002944:	4814      	ldr	r0, [pc, #80]	; (8002998 <sd_init_dynamic_filename+0xe8>)
 8002946:	f00c ff32 	bl	800f7ae <f_lseek>

	// save indicate start of new log session
	sprintf((char *)msg_buffer, "--- new logging session! ---\r\n");
 800294a:	4915      	ldr	r1, [pc, #84]	; (80029a0 <sd_init_dynamic_filename+0xf0>)
 800294c:	4815      	ldr	r0, [pc, #84]	; (80029a4 <sd_init_dynamic_filename+0xf4>)
 800294e:	f010 fe49 	bl	80135e4 <siprintf>
	sd_write(&fil, msg_buffer);
 8002952:	4914      	ldr	r1, [pc, #80]	; (80029a4 <sd_init_dynamic_filename+0xf4>)
 8002954:	4810      	ldr	r0, [pc, #64]	; (8002998 <sd_init_dynamic_filename+0xe8>)
 8002956:	f000 f829 	bl	80029ac <sd_write>

	// save header row to indicate what the data is
	sd_write(&fil, (uint8_t *)header_text);
 800295a:	68b9      	ldr	r1, [r7, #8]
 800295c:	480e      	ldr	r0, [pc, #56]	; (8002998 <sd_init_dynamic_filename+0xe8>)
 800295e:	f000 f825 	bl	80029ac <sd_write>
	f_close(&fil);
 8002962:	480d      	ldr	r0, [pc, #52]	; (8002998 <sd_init_dynamic_filename+0xe8>)
 8002964:	f00c fef4 	bl	800f750 <f_close>

	return fres;
 8002968:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800296c:	e007      	b.n	800297e <sd_init_dynamic_filename+0xce>
		myprintf("f_open error (%i)\r\n", fres);
 800296e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002972:	4619      	mov	r1, r3
 8002974:	480c      	ldr	r0, [pc, #48]	; (80029a8 <sd_init_dynamic_filename+0xf8>)
 8002976:	f7ff ff77 	bl	8002868 <myprintf>
		return fres;
 800297a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800297e:	4618      	mov	r0, r3
 8002980:	3728      	adds	r7, #40	; 0x28
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	08017110 	.word	0x08017110
 800298c:	20005360 	.word	0x20005360
 8002990:	08017114 	.word	0x08017114
 8002994:	08017190 	.word	0x08017190
 8002998:	20005d68 	.word	0x20005d68
 800299c:	0801712c 	.word	0x0801712c
 80029a0:	08017170 	.word	0x08017170
 80029a4:	20005594 	.word	0x20005594
 80029a8:	0801715c 	.word	0x0801715c

080029ac <sd_write>:
 * @brief  write buffer to file on sd card.
 * @param  fp 		file to save to
 * @param  buffer	data to write to file
 */
int8_t sd_write(FIL* fp, uint8_t* buffer)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
	UINT bytesWrote;
	FRESULT fres = f_write(fp, buffer, strlen((char const *)buffer), &bytesWrote);
 80029b6:	6838      	ldr	r0, [r7, #0]
 80029b8:	f7fd fc1a 	bl	80001f0 <strlen>
 80029bc:	4602      	mov	r2, r0
 80029be:	f107 0308 	add.w	r3, r7, #8
 80029c2:	6839      	ldr	r1, [r7, #0]
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f00c fc96 	bl	800f2f6 <f_write>
 80029ca:	4603      	mov	r3, r0
 80029cc:	73fb      	strb	r3, [r7, #15]
	if (fres == FR_OK) {
 80029ce:	7bfb      	ldrb	r3, [r7, #15]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d107      	bne.n	80029e4 <sd_write+0x38>
		myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	4619      	mov	r1, r3
 80029d8:	4807      	ldr	r0, [pc, #28]	; (80029f8 <sd_write+0x4c>)
 80029da:	f7ff ff45 	bl	8002868 <myprintf>
		return bytesWrote;
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	b25b      	sxtb	r3, r3
 80029e2:	e004      	b.n	80029ee <sd_write+0x42>
	} else {
		myprintf("f_write error (%i)\r\n");
 80029e4:	4805      	ldr	r0, [pc, #20]	; (80029fc <sd_write+0x50>)
 80029e6:	f7ff ff3f 	bl	8002868 <myprintf>
		return -1;
 80029ea:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	0801719c 	.word	0x0801719c
 80029fc:	080171c0 	.word	0x080171c0

08002a00 <scan_files>:
FRESULT scan_files (
    char* path,        /* Start node to be scanned (***also used as work area***) */
	char* prefix,	   /* prefix in the filename for our datafiles */
	uint32_t* max_used_value
)
{
 8002a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a02:	b099      	sub	sp, #100	; 0x64
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
 8002a0c:	466b      	mov	r3, sp
 8002a0e:	461d      	mov	r5, r3
    DIR dir;
//    UINT i;
    static FILINFO fno;

    // does not change so make it static
    uint8_t len_prefix = strlen(prefix);
 8002a10:	68b8      	ldr	r0, [r7, #8]
 8002a12:	f7fd fbed 	bl	80001f0 <strlen>
 8002a16:	4603      	mov	r3, r0
 8002a18:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    char prefix_upper[len_prefix];
 8002a1c:	f897 405e 	ldrb.w	r4, [r7, #94]	; 0x5e
 8002a20:	4623      	mov	r3, r4
 8002a22:	3b01      	subs	r3, #1
 8002a24:	65bb      	str	r3, [r7, #88]	; 0x58
 8002a26:	b2e0      	uxtb	r0, r4
 8002a28:	f04f 0100 	mov.w	r1, #0
 8002a2c:	f04f 0200 	mov.w	r2, #0
 8002a30:	f04f 0300 	mov.w	r3, #0
 8002a34:	00cb      	lsls	r3, r1, #3
 8002a36:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002a3a:	00c2      	lsls	r2, r0, #3
 8002a3c:	b2e0      	uxtb	r0, r4
 8002a3e:	f04f 0100 	mov.w	r1, #0
 8002a42:	f04f 0200 	mov.w	r2, #0
 8002a46:	f04f 0300 	mov.w	r3, #0
 8002a4a:	00cb      	lsls	r3, r1, #3
 8002a4c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002a50:	00c2      	lsls	r2, r0, #3
 8002a52:	4623      	mov	r3, r4
 8002a54:	3307      	adds	r3, #7
 8002a56:	08db      	lsrs	r3, r3, #3
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	ebad 0d03 	sub.w	sp, sp, r3
 8002a5e:	466b      	mov	r3, sp
 8002a60:	3300      	adds	r3, #0
 8002a62:	657b      	str	r3, [r7, #84]	; 0x54
	str2upper(prefix, prefix_upper);
 8002a64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a66:	4619      	mov	r1, r3
 8002a68:	68b8      	ldr	r0, [r7, #8]
 8002a6a:	f000 f8ff 	bl	8002c6c <str2upper>

	*max_used_value = 0; // initialize to known minimum value
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]
	uint32_t num_files_fc = 0; // suffix on the files containing fc data already on sd card
 8002a74:	2300      	movs	r3, #0
 8002a76:	617b      	str	r3, [r7, #20]

    res = f_opendir(&dir, path);                       /* Open the directory */
 8002a78:	f107 0318 	add.w	r3, r7, #24
 8002a7c:	68f9      	ldr	r1, [r7, #12]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f00d f8e8 	bl	800fc54 <f_opendir>
 8002a84:	4603      	mov	r3, r0
 8002a86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (res == FR_OK) {
 8002a8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d16c      	bne.n	8002b6c <scan_files+0x16c>
        for (;;) {
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8002a92:	f107 0318 	add.w	r3, r7, #24
 8002a96:	4939      	ldr	r1, [pc, #228]	; (8002b7c <scan_files+0x17c>)
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f00d f97f 	bl	800fd9c <f_readdir>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8002aa4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d15a      	bne.n	8002b62 <scan_files+0x162>
 8002aac:	4b33      	ldr	r3, [pc, #204]	; (8002b7c <scan_files+0x17c>)
 8002aae:	7a5b      	ldrb	r3, [r3, #9]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d056      	beq.n	8002b62 <scan_files+0x162>
            if (fno.fattrib & AM_DIR) {                    /* It is a directory */
 8002ab4:	4b31      	ldr	r3, [pc, #196]	; (8002b7c <scan_files+0x17c>)
 8002ab6:	7a1b      	ldrb	r3, [r3, #8]
 8002ab8:	f003 0310 	and.w	r3, r3, #16
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d14e      	bne.n	8002b5e <scan_files+0x15e>
//                i = strlen(path);
//                sprintf(&path[i], "/%s", fno.fname);
//                res = scan_files(path, prefix, max_used_value);    /* Enter the directory */
//                if (res != FR_OK) break;
//                path[i] = 0;
            } else {                                       /* It is a file. */
 8002ac0:	466b      	mov	r3, sp
 8002ac2:	461e      	mov	r6, r3
//                printf("%s/%s\n", path, fno.fname);

            	// check if filename contains parts of our standard prefix "FC000000.txt"
            	// but first convert to uppercase to make case insensitive

            	char fname_upper[strlen((char *)fno.fname)];
 8002ac4:	482e      	ldr	r0, [pc, #184]	; (8002b80 <scan_files+0x180>)
 8002ac6:	f7fd fb93 	bl	80001f0 <strlen>
 8002aca:	4604      	mov	r4, r0
 8002acc:	4623      	mov	r3, r4
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	653b      	str	r3, [r7, #80]	; 0x50
 8002ad2:	4620      	mov	r0, r4
 8002ad4:	f04f 0100 	mov.w	r1, #0
 8002ad8:	f04f 0200 	mov.w	r2, #0
 8002adc:	f04f 0300 	mov.w	r3, #0
 8002ae0:	00cb      	lsls	r3, r1, #3
 8002ae2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002ae6:	00c2      	lsls	r2, r0, #3
 8002ae8:	4620      	mov	r0, r4
 8002aea:	f04f 0100 	mov.w	r1, #0
 8002aee:	f04f 0200 	mov.w	r2, #0
 8002af2:	f04f 0300 	mov.w	r3, #0
 8002af6:	00cb      	lsls	r3, r1, #3
 8002af8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002afc:	00c2      	lsls	r2, r0, #3
 8002afe:	1de3      	adds	r3, r4, #7
 8002b00:	08db      	lsrs	r3, r3, #3
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	ebad 0d03 	sub.w	sp, sp, r3
 8002b08:	466b      	mov	r3, sp
 8002b0a:	3300      	adds	r3, #0
 8002b0c:	64fb      	str	r3, [r7, #76]	; 0x4c
            	str2upper((char *)fno.fname, fname_upper);
 8002b0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b10:	4619      	mov	r1, r3
 8002b12:	481b      	ldr	r0, [pc, #108]	; (8002b80 <scan_files+0x180>)
 8002b14:	f000 f8aa 	bl	8002c6c <str2upper>

            	int8_t contains_prefix = strncmp(fno.fname, prefix_upper, len_prefix);
 8002b18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b1a:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8002b1e:	4619      	mov	r1, r3
 8002b20:	4817      	ldr	r0, [pc, #92]	; (8002b80 <scan_files+0x180>)
 8002b22:	f010 fdca 	bl	80136ba <strncmp>
 8002b26:	4603      	mov	r3, r0
 8002b28:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

            	if (contains_prefix == 0)
 8002b2c:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d112      	bne.n	8002b5a <scan_files+0x15a>
            	{
            		// can do error checking with status if desired
            		uint8_t status = extract_filename_suffix(fname_upper, len_prefix, &num_files_fc);
 8002b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b36:	f107 0214 	add.w	r2, r7, #20
 8002b3a:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f000 f820 	bl	8002b84 <extract_filename_suffix>
 8002b44:	4603      	mov	r3, r0
 8002b46:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

            		if (num_files_fc > *max_used_value)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d202      	bcs.n	8002b5a <scan_files+0x15a>
            		{
            			*max_used_value = num_files_fc;
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	46b5      	mov	sp, r6
 8002b5c:	e799      	b.n	8002a92 <scan_files+0x92>
            	continue; // don't enter directory
 8002b5e:	bf00      	nop
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8002b60:	e797      	b.n	8002a92 <scan_files+0x92>
            		}
            	}
            }
        }

        f_closedir(&dir);
 8002b62:	f107 0318 	add.w	r3, r7, #24
 8002b66:	4618      	mov	r0, r3
 8002b68:	f00d f8ed 	bl	800fd46 <f_closedir>
    }

    return res;
 8002b6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002b70:	46ad      	mov	sp, r5
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3764      	adds	r7, #100	; 0x64
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	2000037c 	.word	0x2000037c
 8002b80:	20000385 	.word	0x20000385

08002b84 <extract_filename_suffix>:
 * which is assumed to be .txt. assumes that filename contains prefix.
 *
 * returns integer indicating success/fail: 0 = success, 1 = fail
 */
uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value)
{
 8002b84:	b5b0      	push	{r4, r5, r7, lr}
 8002b86:	b088      	sub	sp, #32
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	607a      	str	r2, [r7, #4]
 8002b90:	72fb      	strb	r3, [r7, #11]
 8002b92:	466b      	mov	r3, sp
 8002b94:	461d      	mov	r5, r3
	uint8_t len_filename = strlen(filename);
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f7fd fb2a 	bl	80001f0 <strlen>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	77bb      	strb	r3, [r7, #30]

	// add characters between prefix and filename extension to buffer
	uint8_t len_buf = 8;
 8002ba0:	2308      	movs	r3, #8
 8002ba2:	777b      	strb	r3, [r7, #29]
	char buf[len_buf]; // filenames can't be longer than 8 characters total
 8002ba4:	7f7c      	ldrb	r4, [r7, #29]
 8002ba6:	4623      	mov	r3, r4
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	61bb      	str	r3, [r7, #24]
 8002bac:	b2e0      	uxtb	r0, r4
 8002bae:	f04f 0100 	mov.w	r1, #0
 8002bb2:	f04f 0200 	mov.w	r2, #0
 8002bb6:	f04f 0300 	mov.w	r3, #0
 8002bba:	00cb      	lsls	r3, r1, #3
 8002bbc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002bc0:	00c2      	lsls	r2, r0, #3
 8002bc2:	b2e0      	uxtb	r0, r4
 8002bc4:	f04f 0100 	mov.w	r1, #0
 8002bc8:	f04f 0200 	mov.w	r2, #0
 8002bcc:	f04f 0300 	mov.w	r3, #0
 8002bd0:	00cb      	lsls	r3, r1, #3
 8002bd2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002bd6:	00c2      	lsls	r2, r0, #3
 8002bd8:	4623      	mov	r3, r4
 8002bda:	3307      	adds	r3, #7
 8002bdc:	08db      	lsrs	r3, r3, #3
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	ebad 0d03 	sub.w	sp, sp, r3
 8002be4:	466b      	mov	r3, sp
 8002be6:	3300      	adds	r3, #0
 8002be8:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < len_buf; i++)
 8002bea:	2300      	movs	r3, #0
 8002bec:	77fb      	strb	r3, [r7, #31]
 8002bee:	e014      	b.n	8002c1a <extract_filename_suffix+0x96>
	{
		if (len_prefix - 1 + i < len_filename - 1) // go to end of filename
 8002bf0:	7afb      	ldrb	r3, [r7, #11]
 8002bf2:	1e5a      	subs	r2, r3, #1
 8002bf4:	7ffb      	ldrb	r3, [r7, #31]
 8002bf6:	441a      	add	r2, r3
 8002bf8:	7fbb      	ldrb	r3, [r7, #30]
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	da11      	bge.n	8002c24 <extract_filename_suffix+0xa0>
		{
			buf[i] = filename[len_prefix + i];
 8002c00:	7afa      	ldrb	r2, [r7, #11]
 8002c02:	7ffb      	ldrb	r3, [r7, #31]
 8002c04:	4413      	add	r3, r2
 8002c06:	461a      	mov	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	441a      	add	r2, r3
 8002c0c:	7ffb      	ldrb	r3, [r7, #31]
 8002c0e:	7811      	ldrb	r1, [r2, #0]
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < len_buf; i++)
 8002c14:	7ffb      	ldrb	r3, [r7, #31]
 8002c16:	3301      	adds	r3, #1
 8002c18:	77fb      	strb	r3, [r7, #31]
 8002c1a:	7ffa      	ldrb	r2, [r7, #31]
 8002c1c:	7f7b      	ldrb	r3, [r7, #29]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d3e6      	bcc.n	8002bf0 <extract_filename_suffix+0x6c>
 8002c22:	e000      	b.n	8002c26 <extract_filename_suffix+0xa2>
		}
		else break;
 8002c24:	bf00      	nop
	}

	// change chars to integer, strtol will strip out the .txt
	char *ptr;
	*num_value = strtol(buf, &ptr, 10);
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	f107 0110 	add.w	r1, r7, #16
 8002c2c:	220a      	movs	r2, #10
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f011 fc08 	bl	8014444 <strtol>
 8002c34:	4603      	mov	r3, r0
 8002c36:	461a      	mov	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	601a      	str	r2, [r3, #0]

	if (ptr == buf || *num_value == LONG_MIN || *num_value == LONG_MAX)
 8002c3c:	697a      	ldr	r2, [r7, #20]
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d00a      	beq.n	8002c5a <extract_filename_suffix+0xd6>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c4c:	d005      	beq.n	8002c5a <extract_filename_suffix+0xd6>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d101      	bne.n	8002c5e <extract_filename_suffix+0xda>
	{
		return 1;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e000      	b.n	8002c60 <extract_filename_suffix+0xdc>
	}

	return 0;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	46ad      	mov	sp, r5
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3720      	adds	r7, #32
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002c6c <str2upper>:
/**
 * assumes that upper has enough characters in the array
 * to store the uppercase version.
 */
void str2upper(char* string, char* upper)
{
 8002c6c:	b590      	push	{r4, r7, lr}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 8002c76:	2300      	movs	r3, #0
 8002c78:	73fb      	strb	r3, [r7, #15]
 8002c7a:	e019      	b.n	8002cb0 <str2upper+0x44>
	{
		upper[i] = toupper(string[i]);
 8002c7c:	7bfb      	ldrb	r3, [r7, #15]
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	4413      	add	r3, r2
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	73bb      	strb	r3, [r7, #14]
 8002c86:	7bbb      	ldrb	r3, [r7, #14]
 8002c88:	3301      	adds	r3, #1
 8002c8a:	4a0f      	ldr	r2, [pc, #60]	; (8002cc8 <str2upper+0x5c>)
 8002c8c:	4413      	add	r3, r2
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	f003 0303 	and.w	r3, r3, #3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d102      	bne.n	8002c9e <str2upper+0x32>
 8002c98:	7bbb      	ldrb	r3, [r7, #14]
 8002c9a:	3b20      	subs	r3, #32
 8002c9c:	e000      	b.n	8002ca0 <str2upper+0x34>
 8002c9e:	7bbb      	ldrb	r3, [r7, #14]
 8002ca0:	7bfa      	ldrb	r2, [r7, #15]
 8002ca2:	6839      	ldr	r1, [r7, #0]
 8002ca4:	440a      	add	r2, r1
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	7013      	strb	r3, [r2, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 8002caa:	7bfb      	ldrb	r3, [r7, #15]
 8002cac:	3301      	adds	r3, #1
 8002cae:	73fb      	strb	r3, [r7, #15]
 8002cb0:	7bfc      	ldrb	r4, [r7, #15]
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7fd fa9c 	bl	80001f0 <strlen>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	429c      	cmp	r4, r3
 8002cbc:	d3de      	bcc.n	8002c7c <str2upper+0x10>
	}
}
 8002cbe:	bf00      	nop
 8002cc0:	bf00      	nop
 8002cc2:	3714      	adds	r7, #20
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd90      	pop	{r4, r7, pc}
 8002cc8:	08017d28 	.word	0x08017d28

08002ccc <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af02      	add	r7, sp, #8
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8002cd6:	f107 020f 	add.w	r2, r7, #15
 8002cda:	1df9      	adds	r1, r7, #7
 8002cdc:	2364      	movs	r3, #100	; 0x64
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	4804      	ldr	r0, [pc, #16]	; (8002cf4 <W25qxx_Spi+0x28>)
 8002ce4:	f006 fcac 	bl	8009640 <HAL_SPI_TransmitReceive>
	return ret;
 8002ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	20005140 	.word	0x20005140

08002cf8 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60fb      	str	r3, [r7, #12]
 8002d02:	2300      	movs	r3, #0
 8002d04:	60bb      	str	r3, [r7, #8]
 8002d06:	2300      	movs	r3, #0
 8002d08:	607b      	str	r3, [r7, #4]
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002d0e:	2200      	movs	r2, #0
 8002d10:	2140      	movs	r1, #64	; 0x40
 8002d12:	4813      	ldr	r0, [pc, #76]	; (8002d60 <W25qxx_ReadID+0x68>)
 8002d14:	f002 fe1a 	bl	800594c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8002d18:	209f      	movs	r0, #159	; 0x9f
 8002d1a:	f7ff ffd7 	bl	8002ccc <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002d1e:	20a5      	movs	r0, #165	; 0xa5
 8002d20:	f7ff ffd4 	bl	8002ccc <W25qxx_Spi>
 8002d24:	4603      	mov	r3, r0
 8002d26:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002d28:	20a5      	movs	r0, #165	; 0xa5
 8002d2a:	f7ff ffcf 	bl	8002ccc <W25qxx_Spi>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002d32:	20a5      	movs	r0, #165	; 0xa5
 8002d34:	f7ff ffca 	bl	8002ccc <W25qxx_Spi>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	2140      	movs	r1, #64	; 0x40
 8002d40:	4807      	ldr	r0, [pc, #28]	; (8002d60 <W25qxx_ReadID+0x68>)
 8002d42:	f002 fe03 	bl	800594c <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	041a      	lsls	r2, r3, #16
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	021b      	lsls	r3, r3, #8
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	60fb      	str	r3, [r7, #12]
	return Temp;
 8002d56:	68fb      	ldr	r3, [r7, #12]
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	40020c00 	.word	0x40020c00

08002d64 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8002d64:	b590      	push	{r4, r7, lr}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	2140      	movs	r1, #64	; 0x40
 8002d6e:	4816      	ldr	r0, [pc, #88]	; (8002dc8 <W25qxx_ReadUniqID+0x64>)
 8002d70:	f002 fdec 	bl	800594c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8002d74:	204b      	movs	r0, #75	; 0x4b
 8002d76:	f7ff ffa9 	bl	8002ccc <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	71fb      	strb	r3, [r7, #7]
 8002d7e:	e005      	b.n	8002d8c <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002d80:	20a5      	movs	r0, #165	; 0xa5
 8002d82:	f7ff ffa3 	bl	8002ccc <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8002d86:	79fb      	ldrb	r3, [r7, #7]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	71fb      	strb	r3, [r7, #7]
 8002d8c:	79fb      	ldrb	r3, [r7, #7]
 8002d8e:	2b03      	cmp	r3, #3
 8002d90:	d9f6      	bls.n	8002d80 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 8002d92:	2300      	movs	r3, #0
 8002d94:	71bb      	strb	r3, [r7, #6]
 8002d96:	e00b      	b.n	8002db0 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002d98:	79bc      	ldrb	r4, [r7, #6]
 8002d9a:	20a5      	movs	r0, #165	; 0xa5
 8002d9c:	f7ff ff96 	bl	8002ccc <W25qxx_Spi>
 8002da0:	4603      	mov	r3, r0
 8002da2:	461a      	mov	r2, r3
 8002da4:	4b09      	ldr	r3, [pc, #36]	; (8002dcc <W25qxx_ReadUniqID+0x68>)
 8002da6:	4423      	add	r3, r4
 8002da8:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8002daa:	79bb      	ldrb	r3, [r7, #6]
 8002dac:	3301      	adds	r3, #1
 8002dae:	71bb      	strb	r3, [r7, #6]
 8002db0:	79bb      	ldrb	r3, [r7, #6]
 8002db2:	2b07      	cmp	r3, #7
 8002db4:	d9f0      	bls.n	8002d98 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002db6:	2201      	movs	r2, #1
 8002db8:	2140      	movs	r1, #64	; 0x40
 8002dba:	4803      	ldr	r0, [pc, #12]	; (8002dc8 <W25qxx_ReadUniqID+0x64>)
 8002dbc:	f002 fdc6 	bl	800594c <HAL_GPIO_WritePin>
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd90      	pop	{r4, r7, pc}
 8002dc8:	40020c00 	.word	0x40020c00
 8002dcc:	20005f98 	.word	0x20005f98

08002dd0 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	2140      	movs	r1, #64	; 0x40
 8002dd8:	4807      	ldr	r0, [pc, #28]	; (8002df8 <W25qxx_WriteEnable+0x28>)
 8002dda:	f002 fdb7 	bl	800594c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8002dde:	2006      	movs	r0, #6
 8002de0:	f7ff ff74 	bl	8002ccc <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002de4:	2201      	movs	r2, #1
 8002de6:	2140      	movs	r1, #64	; 0x40
 8002de8:	4803      	ldr	r0, [pc, #12]	; (8002df8 <W25qxx_WriteEnable+0x28>)
 8002dea:	f002 fdaf 	bl	800594c <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8002dee:	2001      	movs	r0, #1
 8002df0:	f00d f8ca 	bl	800ff88 <osDelay>
}
 8002df4:	bf00      	nop
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40020c00 	.word	0x40020c00

08002dfc <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	4603      	mov	r3, r0
 8002e04:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8002e06:	2300      	movs	r3, #0
 8002e08:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	2140      	movs	r1, #64	; 0x40
 8002e0e:	481c      	ldr	r0, [pc, #112]	; (8002e80 <W25qxx_ReadStatusRegister+0x84>)
 8002e10:	f002 fd9c 	bl	800594c <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8002e14:	79fb      	ldrb	r3, [r7, #7]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d10c      	bne.n	8002e34 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8002e1a:	2005      	movs	r0, #5
 8002e1c:	f7ff ff56 	bl	8002ccc <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002e20:	20a5      	movs	r0, #165	; 0xa5
 8002e22:	f7ff ff53 	bl	8002ccc <W25qxx_Spi>
 8002e26:	4603      	mov	r3, r0
 8002e28:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8002e2a:	4a16      	ldr	r2, [pc, #88]	; (8002e84 <W25qxx_ReadStatusRegister+0x88>)
 8002e2c:	7bfb      	ldrb	r3, [r7, #15]
 8002e2e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8002e32:	e01b      	b.n	8002e6c <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8002e34:	79fb      	ldrb	r3, [r7, #7]
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d10c      	bne.n	8002e54 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8002e3a:	2035      	movs	r0, #53	; 0x35
 8002e3c:	f7ff ff46 	bl	8002ccc <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002e40:	20a5      	movs	r0, #165	; 0xa5
 8002e42:	f7ff ff43 	bl	8002ccc <W25qxx_Spi>
 8002e46:	4603      	mov	r3, r0
 8002e48:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8002e4a:	4a0e      	ldr	r2, [pc, #56]	; (8002e84 <W25qxx_ReadStatusRegister+0x88>)
 8002e4c:	7bfb      	ldrb	r3, [r7, #15]
 8002e4e:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8002e52:	e00b      	b.n	8002e6c <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8002e54:	2015      	movs	r0, #21
 8002e56:	f7ff ff39 	bl	8002ccc <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002e5a:	20a5      	movs	r0, #165	; 0xa5
 8002e5c:	f7ff ff36 	bl	8002ccc <W25qxx_Spi>
 8002e60:	4603      	mov	r3, r0
 8002e62:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8002e64:	4a07      	ldr	r2, [pc, #28]	; (8002e84 <W25qxx_ReadStatusRegister+0x88>)
 8002e66:	7bfb      	ldrb	r3, [r7, #15]
 8002e68:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	2140      	movs	r1, #64	; 0x40
 8002e70:	4803      	ldr	r0, [pc, #12]	; (8002e80 <W25qxx_ReadStatusRegister+0x84>)
 8002e72:	f002 fd6b 	bl	800594c <HAL_GPIO_WritePin>
	return status;
 8002e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40020c00 	.word	0x40020c00
 8002e84:	20005f98 	.word	0x20005f98

08002e88 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8002e8c:	2001      	movs	r0, #1
 8002e8e:	f00d f87b 	bl	800ff88 <osDelay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002e92:	2200      	movs	r2, #0
 8002e94:	2140      	movs	r1, #64	; 0x40
 8002e96:	480f      	ldr	r0, [pc, #60]	; (8002ed4 <W25qxx_WaitForWriteEnd+0x4c>)
 8002e98:	f002 fd58 	bl	800594c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8002e9c:	2005      	movs	r0, #5
 8002e9e:	f7ff ff15 	bl	8002ccc <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002ea2:	20a5      	movs	r0, #165	; 0xa5
 8002ea4:	f7ff ff12 	bl	8002ccc <W25qxx_Spi>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	461a      	mov	r2, r3
 8002eac:	4b0a      	ldr	r3, [pc, #40]	; (8002ed8 <W25qxx_WaitForWriteEnd+0x50>)
 8002eae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8002eb2:	2001      	movs	r0, #1
 8002eb4:	f00d f868 	bl	800ff88 <osDelay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8002eb8:	4b07      	ldr	r3, [pc, #28]	; (8002ed8 <W25qxx_WaitForWriteEnd+0x50>)
 8002eba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1ed      	bne.n	8002ea2 <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	2140      	movs	r1, #64	; 0x40
 8002eca:	4802      	ldr	r0, [pc, #8]	; (8002ed4 <W25qxx_WaitForWriteEnd+0x4c>)
 8002ecc:	f002 fd3e 	bl	800594c <HAL_GPIO_WritePin>
}
 8002ed0:	bf00      	nop
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	40020c00 	.word	0x40020c00
 8002ed8:	20005f98 	.word	0x20005f98

08002edc <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8002ee2:	4b90      	ldr	r3, [pc, #576]	; (8003124 <W25qxx_Init+0x248>)
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 8002eea:	e002      	b.n	8002ef2 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8002eec:	2001      	movs	r0, #1
 8002eee:	f00d f84b 	bl	800ff88 <osDelay>
	while (HAL_GetTick() < 100)
 8002ef2:	f001 fffb 	bl	8004eec <HAL_GetTick>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b63      	cmp	r3, #99	; 0x63
 8002efa:	d9f7      	bls.n	8002eec <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002efc:	2201      	movs	r2, #1
 8002efe:	2140      	movs	r1, #64	; 0x40
 8002f00:	4889      	ldr	r0, [pc, #548]	; (8003128 <W25qxx_Init+0x24c>)
 8002f02:	f002 fd23 	bl	800594c <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8002f06:	2064      	movs	r0, #100	; 0x64
 8002f08:	f00d f83e 	bl	800ff88 <osDelay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
 8002f0c:	4887      	ldr	r0, [pc, #540]	; (800312c <W25qxx_Init+0x250>)
 8002f0e:	f010 fb4b 	bl	80135a8 <puts>
#endif
	id = W25qxx_ReadID();
 8002f12:	f7ff fef1 	bl	8002cf8 <W25qxx_ReadID>
 8002f16:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
 8002f18:	6879      	ldr	r1, [r7, #4]
 8002f1a:	4885      	ldr	r0, [pc, #532]	; (8003130 <W25qxx_Init+0x254>)
 8002f1c:	f010 fabe 	bl	801349c <iprintf>
#endif
	switch (id & 0x000000FF)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	3b11      	subs	r3, #17
 8002f26:	2b0f      	cmp	r3, #15
 8002f28:	f200 808b 	bhi.w	8003042 <W25qxx_Init+0x166>
 8002f2c:	a201      	add	r2, pc, #4	; (adr r2, 8002f34 <W25qxx_Init+0x58>)
 8002f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f32:	bf00      	nop
 8002f34:	0800302f 	.word	0x0800302f
 8002f38:	0800301b 	.word	0x0800301b
 8002f3c:	08003007 	.word	0x08003007
 8002f40:	08002ff3 	.word	0x08002ff3
 8002f44:	08002fdf 	.word	0x08002fdf
 8002f48:	08002fcb 	.word	0x08002fcb
 8002f4c:	08002fb7 	.word	0x08002fb7
 8002f50:	08002fa1 	.word	0x08002fa1
 8002f54:	08002f8b 	.word	0x08002f8b
 8002f58:	08003043 	.word	0x08003043
 8002f5c:	08003043 	.word	0x08003043
 8002f60:	08003043 	.word	0x08003043
 8002f64:	08003043 	.word	0x08003043
 8002f68:	08003043 	.word	0x08003043
 8002f6c:	08003043 	.word	0x08003043
 8002f70:	08002f75 	.word	0x08002f75
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8002f74:	4b6b      	ldr	r3, [pc, #428]	; (8003124 <W25qxx_Init+0x248>)
 8002f76:	220a      	movs	r2, #10
 8002f78:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8002f7a:	4b6a      	ldr	r3, [pc, #424]	; (8003124 <W25qxx_Init+0x248>)
 8002f7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f80:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
 8002f82:	486c      	ldr	r0, [pc, #432]	; (8003134 <W25qxx_Init+0x258>)
 8002f84:	f010 fb10 	bl	80135a8 <puts>
#endif
		break;
 8002f88:	e064      	b.n	8003054 <W25qxx_Init+0x178>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8002f8a:	4b66      	ldr	r3, [pc, #408]	; (8003124 <W25qxx_Init+0x248>)
 8002f8c:	2209      	movs	r2, #9
 8002f8e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8002f90:	4b64      	ldr	r3, [pc, #400]	; (8003124 <W25qxx_Init+0x248>)
 8002f92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f96:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
 8002f98:	4867      	ldr	r0, [pc, #412]	; (8003138 <W25qxx_Init+0x25c>)
 8002f9a:	f010 fb05 	bl	80135a8 <puts>
#endif
		break;
 8002f9e:	e059      	b.n	8003054 <W25qxx_Init+0x178>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8002fa0:	4b60      	ldr	r3, [pc, #384]	; (8003124 <W25qxx_Init+0x248>)
 8002fa2:	2208      	movs	r2, #8
 8002fa4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8002fa6:	4b5f      	ldr	r3, [pc, #380]	; (8003124 <W25qxx_Init+0x248>)
 8002fa8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fac:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
 8002fae:	4863      	ldr	r0, [pc, #396]	; (800313c <W25qxx_Init+0x260>)
 8002fb0:	f010 fafa 	bl	80135a8 <puts>
#endif
		break;
 8002fb4:	e04e      	b.n	8003054 <W25qxx_Init+0x178>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8002fb6:	4b5b      	ldr	r3, [pc, #364]	; (8003124 <W25qxx_Init+0x248>)
 8002fb8:	2207      	movs	r2, #7
 8002fba:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8002fbc:	4b59      	ldr	r3, [pc, #356]	; (8003124 <W25qxx_Init+0x248>)
 8002fbe:	2280      	movs	r2, #128	; 0x80
 8002fc0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
 8002fc2:	485f      	ldr	r0, [pc, #380]	; (8003140 <W25qxx_Init+0x264>)
 8002fc4:	f010 faf0 	bl	80135a8 <puts>
#endif
		break;
 8002fc8:	e044      	b.n	8003054 <W25qxx_Init+0x178>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8002fca:	4b56      	ldr	r3, [pc, #344]	; (8003124 <W25qxx_Init+0x248>)
 8002fcc:	2206      	movs	r2, #6
 8002fce:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8002fd0:	4b54      	ldr	r3, [pc, #336]	; (8003124 <W25qxx_Init+0x248>)
 8002fd2:	2240      	movs	r2, #64	; 0x40
 8002fd4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
 8002fd6:	485b      	ldr	r0, [pc, #364]	; (8003144 <W25qxx_Init+0x268>)
 8002fd8:	f010 fae6 	bl	80135a8 <puts>
#endif
		break;
 8002fdc:	e03a      	b.n	8003054 <W25qxx_Init+0x178>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8002fde:	4b51      	ldr	r3, [pc, #324]	; (8003124 <W25qxx_Init+0x248>)
 8002fe0:	2205      	movs	r2, #5
 8002fe2:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8002fe4:	4b4f      	ldr	r3, [pc, #316]	; (8003124 <W25qxx_Init+0x248>)
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
 8002fea:	4857      	ldr	r0, [pc, #348]	; (8003148 <W25qxx_Init+0x26c>)
 8002fec:	f010 fadc 	bl	80135a8 <puts>
#endif
		break;
 8002ff0:	e030      	b.n	8003054 <W25qxx_Init+0x178>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8002ff2:	4b4c      	ldr	r3, [pc, #304]	; (8003124 <W25qxx_Init+0x248>)
 8002ff4:	2204      	movs	r2, #4
 8002ff6:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8002ff8:	4b4a      	ldr	r3, [pc, #296]	; (8003124 <W25qxx_Init+0x248>)
 8002ffa:	2210      	movs	r2, #16
 8002ffc:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
 8002ffe:	4853      	ldr	r0, [pc, #332]	; (800314c <W25qxx_Init+0x270>)
 8003000:	f010 fad2 	bl	80135a8 <puts>
#endif
		break;
 8003004:	e026      	b.n	8003054 <W25qxx_Init+0x178>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8003006:	4b47      	ldr	r3, [pc, #284]	; (8003124 <W25qxx_Init+0x248>)
 8003008:	2203      	movs	r2, #3
 800300a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 800300c:	4b45      	ldr	r3, [pc, #276]	; (8003124 <W25qxx_Init+0x248>)
 800300e:	2208      	movs	r2, #8
 8003010:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
 8003012:	484f      	ldr	r0, [pc, #316]	; (8003150 <W25qxx_Init+0x274>)
 8003014:	f010 fac8 	bl	80135a8 <puts>
#endif
		break;
 8003018:	e01c      	b.n	8003054 <W25qxx_Init+0x178>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 800301a:	4b42      	ldr	r3, [pc, #264]	; (8003124 <W25qxx_Init+0x248>)
 800301c:	2202      	movs	r2, #2
 800301e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8003020:	4b40      	ldr	r3, [pc, #256]	; (8003124 <W25qxx_Init+0x248>)
 8003022:	2204      	movs	r2, #4
 8003024:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
 8003026:	484b      	ldr	r0, [pc, #300]	; (8003154 <W25qxx_Init+0x278>)
 8003028:	f010 fabe 	bl	80135a8 <puts>
#endif
		break;
 800302c:	e012      	b.n	8003054 <W25qxx_Init+0x178>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 800302e:	4b3d      	ldr	r3, [pc, #244]	; (8003124 <W25qxx_Init+0x248>)
 8003030:	2201      	movs	r2, #1
 8003032:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8003034:	4b3b      	ldr	r3, [pc, #236]	; (8003124 <W25qxx_Init+0x248>)
 8003036:	2202      	movs	r2, #2
 8003038:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
 800303a:	4847      	ldr	r0, [pc, #284]	; (8003158 <W25qxx_Init+0x27c>)
 800303c:	f010 fab4 	bl	80135a8 <puts>
#endif
		break;
 8003040:	e008      	b.n	8003054 <W25qxx_Init+0x178>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
 8003042:	4846      	ldr	r0, [pc, #280]	; (800315c <W25qxx_Init+0x280>)
 8003044:	f010 fab0 	bl	80135a8 <puts>
#endif
		w25qxx.Lock = 0;
 8003048:	4b36      	ldr	r3, [pc, #216]	; (8003124 <W25qxx_Init+0x248>)
 800304a:	2200      	movs	r2, #0
 800304c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8003050:	2300      	movs	r3, #0
 8003052:	e063      	b.n	800311c <W25qxx_Init+0x240>
	}
	w25qxx.PageSize = 256;
 8003054:	4b33      	ldr	r3, [pc, #204]	; (8003124 <W25qxx_Init+0x248>)
 8003056:	f44f 7280 	mov.w	r2, #256	; 0x100
 800305a:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 800305c:	4b31      	ldr	r3, [pc, #196]	; (8003124 <W25qxx_Init+0x248>)
 800305e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003062:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8003064:	4b2f      	ldr	r3, [pc, #188]	; (8003124 <W25qxx_Init+0x248>)
 8003066:	69db      	ldr	r3, [r3, #28]
 8003068:	011b      	lsls	r3, r3, #4
 800306a:	4a2e      	ldr	r2, [pc, #184]	; (8003124 <W25qxx_Init+0x248>)
 800306c:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 800306e:	4b2d      	ldr	r3, [pc, #180]	; (8003124 <W25qxx_Init+0x248>)
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	4a2c      	ldr	r2, [pc, #176]	; (8003124 <W25qxx_Init+0x248>)
 8003074:	6912      	ldr	r2, [r2, #16]
 8003076:	fb02 f303 	mul.w	r3, r2, r3
 800307a:	4a2a      	ldr	r2, [pc, #168]	; (8003124 <W25qxx_Init+0x248>)
 800307c:	8952      	ldrh	r2, [r2, #10]
 800307e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003082:	4a28      	ldr	r2, [pc, #160]	; (8003124 <W25qxx_Init+0x248>)
 8003084:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8003086:	4b27      	ldr	r3, [pc, #156]	; (8003124 <W25qxx_Init+0x248>)
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	011b      	lsls	r3, r3, #4
 800308c:	4a25      	ldr	r2, [pc, #148]	; (8003124 <W25qxx_Init+0x248>)
 800308e:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8003090:	4b24      	ldr	r3, [pc, #144]	; (8003124 <W25qxx_Init+0x248>)
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	4a23      	ldr	r2, [pc, #140]	; (8003124 <W25qxx_Init+0x248>)
 8003096:	6912      	ldr	r2, [r2, #16]
 8003098:	fb02 f303 	mul.w	r3, r2, r3
 800309c:	0a9b      	lsrs	r3, r3, #10
 800309e:	4a21      	ldr	r2, [pc, #132]	; (8003124 <W25qxx_Init+0x248>)
 80030a0:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 80030a2:	f7ff fe5f 	bl	8002d64 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 80030a6:	2001      	movs	r0, #1
 80030a8:	f7ff fea8 	bl	8002dfc <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 80030ac:	2002      	movs	r0, #2
 80030ae:	f7ff fea5 	bl	8002dfc <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 80030b2:	2003      	movs	r0, #3
 80030b4:	f7ff fea2 	bl	8002dfc <W25qxx_ReadStatusRegister>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Page Size: %d Bytes\r\n", w25qxx.PageSize);
 80030b8:	4b1a      	ldr	r3, [pc, #104]	; (8003124 <W25qxx_Init+0x248>)
 80030ba:	895b      	ldrh	r3, [r3, #10]
 80030bc:	4619      	mov	r1, r3
 80030be:	4828      	ldr	r0, [pc, #160]	; (8003160 <W25qxx_Init+0x284>)
 80030c0:	f010 f9ec 	bl	801349c <iprintf>
	printf("w25qxx Page Count: %d\r\n", w25qxx.PageCount);
 80030c4:	4b17      	ldr	r3, [pc, #92]	; (8003124 <W25qxx_Init+0x248>)
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	4619      	mov	r1, r3
 80030ca:	4826      	ldr	r0, [pc, #152]	; (8003164 <W25qxx_Init+0x288>)
 80030cc:	f010 f9e6 	bl	801349c <iprintf>
	printf("w25qxx Sector Size: %d Bytes\r\n", w25qxx.SectorSize);
 80030d0:	4b14      	ldr	r3, [pc, #80]	; (8003124 <W25qxx_Init+0x248>)
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	4619      	mov	r1, r3
 80030d6:	4824      	ldr	r0, [pc, #144]	; (8003168 <W25qxx_Init+0x28c>)
 80030d8:	f010 f9e0 	bl	801349c <iprintf>
	printf("w25qxx Sector Count: %d\r\n", w25qxx.SectorCount);
 80030dc:	4b11      	ldr	r3, [pc, #68]	; (8003124 <W25qxx_Init+0x248>)
 80030de:	695b      	ldr	r3, [r3, #20]
 80030e0:	4619      	mov	r1, r3
 80030e2:	4822      	ldr	r0, [pc, #136]	; (800316c <W25qxx_Init+0x290>)
 80030e4:	f010 f9da 	bl	801349c <iprintf>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
 80030e8:	4b0e      	ldr	r3, [pc, #56]	; (8003124 <W25qxx_Init+0x248>)
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	4619      	mov	r1, r3
 80030ee:	4820      	ldr	r0, [pc, #128]	; (8003170 <W25qxx_Init+0x294>)
 80030f0:	f010 f9d4 	bl	801349c <iprintf>
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
 80030f4:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <W25qxx_Init+0x248>)
 80030f6:	69db      	ldr	r3, [r3, #28]
 80030f8:	4619      	mov	r1, r3
 80030fa:	481e      	ldr	r0, [pc, #120]	; (8003174 <W25qxx_Init+0x298>)
 80030fc:	f010 f9ce 	bl	801349c <iprintf>
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
 8003100:	4b08      	ldr	r3, [pc, #32]	; (8003124 <W25qxx_Init+0x248>)
 8003102:	6a1b      	ldr	r3, [r3, #32]
 8003104:	4619      	mov	r1, r3
 8003106:	481c      	ldr	r0, [pc, #112]	; (8003178 <W25qxx_Init+0x29c>)
 8003108:	f010 f9c8 	bl	801349c <iprintf>
	printf("w25qxx Init Done\r\n");
 800310c:	481b      	ldr	r0, [pc, #108]	; (800317c <W25qxx_Init+0x2a0>)
 800310e:	f010 fa4b 	bl	80135a8 <puts>
#endif
	w25qxx.Lock = 0;
 8003112:	4b04      	ldr	r3, [pc, #16]	; (8003124 <W25qxx_Init+0x248>)
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 800311a:	2301      	movs	r3, #1
}
 800311c:	4618      	mov	r0, r3
 800311e:	3708      	adds	r7, #8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	20005f98 	.word	0x20005f98
 8003128:	40020c00 	.word	0x40020c00
 800312c:	080171d8 	.word	0x080171d8
 8003130:	080171f0 	.word	0x080171f0
 8003134:	08017204 	.word	0x08017204
 8003138:	0801721c 	.word	0x0801721c
 800313c:	08017234 	.word	0x08017234
 8003140:	0801724c 	.word	0x0801724c
 8003144:	08017264 	.word	0x08017264
 8003148:	0801727c 	.word	0x0801727c
 800314c:	08017294 	.word	0x08017294
 8003150:	080172ac 	.word	0x080172ac
 8003154:	080172c4 	.word	0x080172c4
 8003158:	080172dc 	.word	0x080172dc
 800315c:	080172f4 	.word	0x080172f4
 8003160:	08017308 	.word	0x08017308
 8003164:	08017328 	.word	0x08017328
 8003168:	08017340 	.word	0x08017340
 800316c:	08017360 	.word	0x08017360
 8003170:	0801737c 	.word	0x0801737c
 8003174:	0801739c 	.word	0x0801739c
 8003178:	080173b8 	.word	0x080173b8
 800317c:	080173d8 	.word	0x080173d8

08003180 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8003188:	e002      	b.n	8003190 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 800318a:	2001      	movs	r0, #1
 800318c:	f00c fefc 	bl	800ff88 <osDelay>
	while (w25qxx.Lock == 1)
 8003190:	4b2d      	ldr	r3, [pc, #180]	; (8003248 <W25qxx_EraseSector+0xc8>)
 8003192:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003196:	2b01      	cmp	r3, #1
 8003198:	d0f7      	beq.n	800318a <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 800319a:	4b2b      	ldr	r3, [pc, #172]	; (8003248 <W25qxx_EraseSector+0xc8>)
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
 80031a2:	f001 fea3 	bl	8004eec <HAL_GetTick>
 80031a6:	60f8      	str	r0, [r7, #12]
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	4828      	ldr	r0, [pc, #160]	; (800324c <W25qxx_EraseSector+0xcc>)
 80031ac:	f010 f976 	bl	801349c <iprintf>
#endif
	W25qxx_WaitForWriteEnd();
 80031b0:	f7ff fe6a 	bl	8002e88 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 80031b4:	4b24      	ldr	r3, [pc, #144]	; (8003248 <W25qxx_EraseSector+0xc8>)
 80031b6:	691a      	ldr	r2, [r3, #16]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	fb02 f303 	mul.w	r3, r2, r3
 80031be:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 80031c0:	f7ff fe06 	bl	8002dd0 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80031c4:	2200      	movs	r2, #0
 80031c6:	2140      	movs	r1, #64	; 0x40
 80031c8:	4821      	ldr	r0, [pc, #132]	; (8003250 <W25qxx_EraseSector+0xd0>)
 80031ca:	f002 fbbf 	bl	800594c <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 80031ce:	4b1e      	ldr	r3, [pc, #120]	; (8003248 <W25qxx_EraseSector+0xc8>)
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	2b08      	cmp	r3, #8
 80031d4:	d909      	bls.n	80031ea <W25qxx_EraseSector+0x6a>
	{
		W25qxx_Spi(0x21);
 80031d6:	2021      	movs	r0, #33	; 0x21
 80031d8:	f7ff fd78 	bl	8002ccc <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	0e1b      	lsrs	r3, r3, #24
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7ff fd72 	bl	8002ccc <W25qxx_Spi>
 80031e8:	e002      	b.n	80031f0 <W25qxx_EraseSector+0x70>
	}
	else
	{
		W25qxx_Spi(0x20);
 80031ea:	2020      	movs	r0, #32
 80031ec:	f7ff fd6e 	bl	8002ccc <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	0c1b      	lsrs	r3, r3, #16
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7ff fd68 	bl	8002ccc <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	0a1b      	lsrs	r3, r3, #8
 8003200:	b2db      	uxtb	r3, r3
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff fd62 	bl	8002ccc <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	b2db      	uxtb	r3, r3
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff fd5d 	bl	8002ccc <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003212:	2201      	movs	r2, #1
 8003214:	2140      	movs	r1, #64	; 0x40
 8003216:	480e      	ldr	r0, [pc, #56]	; (8003250 <W25qxx_EraseSector+0xd0>)
 8003218:	f002 fb98 	bl	800594c <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 800321c:	f7ff fe34 	bl	8002e88 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
 8003220:	f001 fe64 	bl	8004eec <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	4619      	mov	r1, r3
 800322c:	4809      	ldr	r0, [pc, #36]	; (8003254 <W25qxx_EraseSector+0xd4>)
 800322e:	f010 f935 	bl	801349c <iprintf>
#endif
	W25qxx_Delay(1);
 8003232:	2001      	movs	r0, #1
 8003234:	f00c fea8 	bl	800ff88 <osDelay>
	w25qxx.Lock = 0;
 8003238:	4b03      	ldr	r3, [pc, #12]	; (8003248 <W25qxx_EraseSector+0xc8>)
 800323a:	2200      	movs	r2, #0
 800323c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8003240:	bf00      	nop
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	20005f98 	.word	0x20005f98
 800324c:	08017430 	.word	0x08017430
 8003250:	40020c00 	.word	0x40020c00
 8003254:	08017454 	.word	0x08017454

08003258 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8003260:	4b07      	ldr	r3, [pc, #28]	; (8003280 <W25qxx_SectorToPage+0x28>)
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	fb02 f303 	mul.w	r3, r2, r3
 800326a:	4a05      	ldr	r2, [pc, #20]	; (8003280 <W25qxx_SectorToPage+0x28>)
 800326c:	8952      	ldrh	r2, [r2, #10]
 800326e:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8003272:	4618      	mov	r0, r3
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	20005f98 	.word	0x20005f98

08003284 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
 8003290:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8003292:	e002      	b.n	800329a <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8003294:	2001      	movs	r0, #1
 8003296:	f00c fe77 	bl	800ff88 <osDelay>
	while (w25qxx.Lock == 1)
 800329a:	4b57      	ldr	r3, [pc, #348]	; (80033f8 <W25qxx_WritePage+0x174>)
 800329c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d0f7      	beq.n	8003294 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 80032a4:	4b54      	ldr	r3, [pc, #336]	; (80033f8 <W25qxx_WritePage+0x174>)
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4413      	add	r3, r2
 80032b2:	4a51      	ldr	r2, [pc, #324]	; (80033f8 <W25qxx_WritePage+0x174>)
 80032b4:	8952      	ldrh	r2, [r2, #10]
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d802      	bhi.n	80032c0 <W25qxx_WritePage+0x3c>
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d105      	bne.n	80032cc <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80032c0:	4b4d      	ldr	r3, [pc, #308]	; (80033f8 <W25qxx_WritePage+0x174>)
 80032c2:	895b      	ldrh	r3, [r3, #10]
 80032c4:	461a      	mov	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	4413      	add	r3, r2
 80032d2:	4a49      	ldr	r2, [pc, #292]	; (80033f8 <W25qxx_WritePage+0x174>)
 80032d4:	8952      	ldrh	r2, [r2, #10]
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d905      	bls.n	80032e6 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80032da:	4b47      	ldr	r3, [pc, #284]	; (80033f8 <W25qxx_WritePage+0x174>)
 80032dc:	895b      	ldrh	r3, [r3, #10]
 80032de:	461a      	mov	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	68b9      	ldr	r1, [r7, #8]
 80032ec:	4843      	ldr	r0, [pc, #268]	; (80033fc <W25qxx_WritePage+0x178>)
 80032ee:	f010 f8d5 	bl	801349c <iprintf>
	W25qxx_Delay(100);
 80032f2:	2064      	movs	r0, #100	; 0x64
 80032f4:	f00c fe48 	bl	800ff88 <osDelay>
	uint32_t StartTime = HAL_GetTick();
 80032f8:	f001 fdf8 	bl	8004eec <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]
#endif
	W25qxx_WaitForWriteEnd();
 80032fe:	f7ff fdc3 	bl	8002e88 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 8003302:	f7ff fd65 	bl	8002dd0 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003306:	2200      	movs	r2, #0
 8003308:	2140      	movs	r1, #64	; 0x40
 800330a:	483d      	ldr	r0, [pc, #244]	; (8003400 <W25qxx_WritePage+0x17c>)
 800330c:	f002 fb1e 	bl	800594c <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8003310:	4b39      	ldr	r3, [pc, #228]	; (80033f8 <W25qxx_WritePage+0x174>)
 8003312:	895b      	ldrh	r3, [r3, #10]
 8003314:	461a      	mov	r2, r3
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	fb03 f302 	mul.w	r3, r3, r2
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	4413      	add	r3, r2
 8003320:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 8003322:	4b35      	ldr	r3, [pc, #212]	; (80033f8 <W25qxx_WritePage+0x174>)
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	2b08      	cmp	r3, #8
 8003328:	d909      	bls.n	800333e <W25qxx_WritePage+0xba>
	{
		W25qxx_Spi(0x12);
 800332a:	2012      	movs	r0, #18
 800332c:	f7ff fcce 	bl	8002ccc <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	0e1b      	lsrs	r3, r3, #24
 8003334:	b2db      	uxtb	r3, r3
 8003336:	4618      	mov	r0, r3
 8003338:	f7ff fcc8 	bl	8002ccc <W25qxx_Spi>
 800333c:	e002      	b.n	8003344 <W25qxx_WritePage+0xc0>
	}
	else
	{
		W25qxx_Spi(0x02);
 800333e:	2002      	movs	r0, #2
 8003340:	f7ff fcc4 	bl	8002ccc <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	0c1b      	lsrs	r3, r3, #16
 8003348:	b2db      	uxtb	r3, r3
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff fcbe 	bl	8002ccc <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	0a1b      	lsrs	r3, r3, #8
 8003354:	b2db      	uxtb	r3, r3
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff fcb8 	bl	8002ccc <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	b2db      	uxtb	r3, r3
 8003360:	4618      	mov	r0, r3
 8003362:	f7ff fcb3 	bl	8002ccc <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	b29a      	uxth	r2, r3
 800336a:	2364      	movs	r3, #100	; 0x64
 800336c:	68f9      	ldr	r1, [r7, #12]
 800336e:	4825      	ldr	r0, [pc, #148]	; (8003404 <W25qxx_WritePage+0x180>)
 8003370:	f005 ff19 	bl	80091a6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003374:	2201      	movs	r2, #1
 8003376:	2140      	movs	r1, #64	; 0x40
 8003378:	4821      	ldr	r0, [pc, #132]	; (8003400 <W25qxx_WritePage+0x17c>)
 800337a:	f002 fae7 	bl	800594c <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 800337e:	f7ff fd83 	bl	8002e88 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 8003382:	f001 fdb3 	bl	8004eec <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 800338e:	2300      	movs	r3, #0
 8003390:	617b      	str	r3, [r7, #20]
 8003392:	e018      	b.n	80033c6 <W25qxx_WritePage+0x142>
	{
		if ((i % 8 == 0) && (i > 2))
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	2b00      	cmp	r3, #0
 800339c:	d108      	bne.n	80033b0 <W25qxx_WritePage+0x12c>
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d905      	bls.n	80033b0 <W25qxx_WritePage+0x12c>
		{
			printf("\r\n");
 80033a4:	4818      	ldr	r0, [pc, #96]	; (8003408 <W25qxx_WritePage+0x184>)
 80033a6:	f010 f8ff 	bl	80135a8 <puts>
			W25qxx_Delay(10);
 80033aa:	200a      	movs	r0, #10
 80033ac:	f00c fdec 	bl	800ff88 <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	4413      	add	r3, r2
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	4619      	mov	r1, r3
 80033ba:	4814      	ldr	r0, [pc, #80]	; (800340c <W25qxx_WritePage+0x188>)
 80033bc:	f010 f86e 	bl	801349c <iprintf>
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	3301      	adds	r3, #1
 80033c4:	617b      	str	r3, [r7, #20]
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d3e2      	bcc.n	8003394 <W25qxx_WritePage+0x110>
	}
	printf("\r\n");
 80033ce:	480e      	ldr	r0, [pc, #56]	; (8003408 <W25qxx_WritePage+0x184>)
 80033d0:	f010 f8ea 	bl	80135a8 <puts>
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
 80033d4:	6939      	ldr	r1, [r7, #16]
 80033d6:	480e      	ldr	r0, [pc, #56]	; (8003410 <W25qxx_WritePage+0x18c>)
 80033d8:	f010 f860 	bl	801349c <iprintf>
	W25qxx_Delay(100);
 80033dc:	2064      	movs	r0, #100	; 0x64
 80033de:	f00c fdd3 	bl	800ff88 <osDelay>
#endif
	W25qxx_Delay(1);
 80033e2:	2001      	movs	r0, #1
 80033e4:	f00c fdd0 	bl	800ff88 <osDelay>
	w25qxx.Lock = 0;
 80033e8:	4b03      	ldr	r3, [pc, #12]	; (80033f8 <W25qxx_WritePage+0x174>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80033f0:	bf00      	nop
 80033f2:	3718      	adds	r7, #24
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	20005f98 	.word	0x20005f98
 80033fc:	080176b8 	.word	0x080176b8
 8003400:	40020c00 	.word	0x40020c00
 8003404:	20005140 	.word	0x20005140
 8003408:	080176f4 	.word	0x080176f4
 800340c:	080176f8 	.word	0x080176f8
 8003410:	08017700 	.word	0x08017700

08003414 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b088      	sub	sp, #32
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
 8003420:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 8003422:	4b36      	ldr	r3, [pc, #216]	; (80034fc <W25qxx_WriteSector+0xe8>)
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	429a      	cmp	r2, r3
 800342a:	d802      	bhi.n	8003432 <W25qxx_WriteSector+0x1e>
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d102      	bne.n	8003438 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8003432:	4b32      	ldr	r3, [pc, #200]	; (80034fc <W25qxx_WriteSector+0xe8>)
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	68b9      	ldr	r1, [r7, #8]
 800343e:	4830      	ldr	r0, [pc, #192]	; (8003500 <W25qxx_WriteSector+0xec>)
 8003440:	f010 f82c 	bl	801349c <iprintf>
	W25qxx_Delay(100);
 8003444:	2064      	movs	r0, #100	; 0x64
 8003446:	f00c fd9f 	bl	800ff88 <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 800344a:	4b2c      	ldr	r3, [pc, #176]	; (80034fc <W25qxx_WriteSector+0xe8>)
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	429a      	cmp	r2, r3
 8003452:	d306      	bcc.n	8003462 <W25qxx_WriteSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx WriteSector Faild!\r\n");
 8003454:	482b      	ldr	r0, [pc, #172]	; (8003504 <W25qxx_WriteSector+0xf0>)
 8003456:	f010 f8a7 	bl	80135a8 <puts>
		W25qxx_Delay(100);
 800345a:	2064      	movs	r0, #100	; 0x64
 800345c:	f00c fd94 	bl	800ff88 <osDelay>
#endif
		return;
 8003460:	e048      	b.n	80034f4 <W25qxx_WriteSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	441a      	add	r2, r3
 8003468:	4b24      	ldr	r3, [pc, #144]	; (80034fc <W25qxx_WriteSector+0xe8>)
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	429a      	cmp	r2, r3
 800346e:	d905      	bls.n	800347c <W25qxx_WriteSector+0x68>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8003470:	4b22      	ldr	r3, [pc, #136]	; (80034fc <W25qxx_WriteSector+0xe8>)
 8003472:	691a      	ldr	r2, [r3, #16]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	61bb      	str	r3, [r7, #24]
 800347a:	e001      	b.n	8003480 <W25qxx_WriteSector+0x6c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8003480:	68b8      	ldr	r0, [r7, #8]
 8003482:	f7ff fee9 	bl	8003258 <W25qxx_SectorToPage>
 8003486:	4602      	mov	r2, r0
 8003488:	4b1c      	ldr	r3, [pc, #112]	; (80034fc <W25qxx_WriteSector+0xe8>)
 800348a:	895b      	ldrh	r3, [r3, #10]
 800348c:	4619      	mov	r1, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	fbb3 f3f1 	udiv	r3, r3, r1
 8003494:	4413      	add	r3, r2
 8003496:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8003498:	4b18      	ldr	r3, [pc, #96]	; (80034fc <W25qxx_WriteSector+0xe8>)
 800349a:	895b      	ldrh	r3, [r3, #10]
 800349c:	461a      	mov	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80034a4:	fb02 f201 	mul.w	r2, r2, r1
 80034a8:	1a9b      	subs	r3, r3, r2
 80034aa:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	69f9      	ldr	r1, [r7, #28]
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f7ff fee6 	bl	8003284 <W25qxx_WritePage>
		StartPage++;
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	3301      	adds	r3, #1
 80034bc:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 80034be:	4b0f      	ldr	r3, [pc, #60]	; (80034fc <W25qxx_WriteSector+0xe8>)
 80034c0:	895b      	ldrh	r3, [r3, #10]
 80034c2:	461a      	mov	r2, r3
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	1a9a      	subs	r2, r3, r2
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	4413      	add	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 80034ce:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <W25qxx_WriteSector+0xe8>)
 80034d0:	895b      	ldrh	r3, [r3, #10]
 80034d2:	461a      	mov	r2, r3
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	4413      	add	r3, r2
 80034dc:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 80034de:	2300      	movs	r3, #0
 80034e0:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	dce1      	bgt.n	80034ac <W25qxx_WriteSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
 80034e8:	4807      	ldr	r0, [pc, #28]	; (8003508 <W25qxx_WriteSector+0xf4>)
 80034ea:	f010 f85d 	bl	80135a8 <puts>
	W25qxx_Delay(100);
 80034ee:	2064      	movs	r0, #100	; 0x64
 80034f0:	f00c fd4a 	bl	800ff88 <osDelay>
#endif
}
 80034f4:	3720      	adds	r7, #32
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	20005f98 	.word	0x20005f98
 8003500:	08017724 	.word	0x08017724
 8003504:	08017764 	.word	0x08017764
 8003508:	08017784 	.word	0x08017784

0800350c <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
 8003518:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 800351a:	e002      	b.n	8003522 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 800351c:	2001      	movs	r0, #1
 800351e:	f00c fd33 	bl	800ff88 <osDelay>
	while (w25qxx.Lock == 1)
 8003522:	4b54      	ldr	r3, [pc, #336]	; (8003674 <W25qxx_ReadPage+0x168>)
 8003524:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003528:	2b01      	cmp	r3, #1
 800352a:	d0f7      	beq.n	800351c <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 800352c:	4b51      	ldr	r3, [pc, #324]	; (8003674 <W25qxx_ReadPage+0x168>)
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8003534:	4b4f      	ldr	r3, [pc, #316]	; (8003674 <W25qxx_ReadPage+0x168>)
 8003536:	895b      	ldrh	r3, [r3, #10]
 8003538:	461a      	mov	r2, r3
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	4293      	cmp	r3, r2
 800353e:	d802      	bhi.n	8003546 <W25qxx_ReadPage+0x3a>
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d102      	bne.n	800354c <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 8003546:	4b4b      	ldr	r3, [pc, #300]	; (8003674 <W25qxx_ReadPage+0x168>)
 8003548:	895b      	ldrh	r3, [r3, #10]
 800354a:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	4413      	add	r3, r2
 8003552:	4a48      	ldr	r2, [pc, #288]	; (8003674 <W25qxx_ReadPage+0x168>)
 8003554:	8952      	ldrh	r2, [r2, #10]
 8003556:	4293      	cmp	r3, r2
 8003558:	d905      	bls.n	8003566 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800355a:	4b46      	ldr	r3, [pc, #280]	; (8003674 <W25qxx_ReadPage+0x168>)
 800355c:	895b      	ldrh	r3, [r3, #10]
 800355e:	461a      	mov	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	68b9      	ldr	r1, [r7, #8]
 800356c:	4842      	ldr	r0, [pc, #264]	; (8003678 <W25qxx_ReadPage+0x16c>)
 800356e:	f00f ff95 	bl	801349c <iprintf>
	W25qxx_Delay(100);
 8003572:	2064      	movs	r0, #100	; 0x64
 8003574:	f00c fd08 	bl	800ff88 <osDelay>
	uint32_t StartTime = HAL_GetTick();
 8003578:	f001 fcb8 	bl	8004eec <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 800357e:	4b3d      	ldr	r3, [pc, #244]	; (8003674 <W25qxx_ReadPage+0x168>)
 8003580:	895b      	ldrh	r3, [r3, #10]
 8003582:	461a      	mov	r2, r3
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	fb03 f302 	mul.w	r3, r3, r2
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	4413      	add	r3, r2
 800358e:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003590:	2200      	movs	r2, #0
 8003592:	2140      	movs	r1, #64	; 0x40
 8003594:	4839      	ldr	r0, [pc, #228]	; (800367c <W25qxx_ReadPage+0x170>)
 8003596:	f002 f9d9 	bl	800594c <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 800359a:	4b36      	ldr	r3, [pc, #216]	; (8003674 <W25qxx_ReadPage+0x168>)
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	2b08      	cmp	r3, #8
 80035a0:	d909      	bls.n	80035b6 <W25qxx_ReadPage+0xaa>
	{
		W25qxx_Spi(0x0C);
 80035a2:	200c      	movs	r0, #12
 80035a4:	f7ff fb92 	bl	8002ccc <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	0e1b      	lsrs	r3, r3, #24
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7ff fb8c 	bl	8002ccc <W25qxx_Spi>
 80035b4:	e002      	b.n	80035bc <W25qxx_ReadPage+0xb0>
	}
	else
	{
		W25qxx_Spi(0x0B);
 80035b6:	200b      	movs	r0, #11
 80035b8:	f7ff fb88 	bl	8002ccc <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	0c1b      	lsrs	r3, r3, #16
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7ff fb82 	bl	8002ccc <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	0a1b      	lsrs	r3, r3, #8
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7ff fb7c 	bl	8002ccc <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	4618      	mov	r0, r3
 80035da:	f7ff fb77 	bl	8002ccc <W25qxx_Spi>
	W25qxx_Spi(0);
 80035de:	2000      	movs	r0, #0
 80035e0:	f7ff fb74 	bl	8002ccc <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	2364      	movs	r3, #100	; 0x64
 80035ea:	68f9      	ldr	r1, [r7, #12]
 80035ec:	4824      	ldr	r0, [pc, #144]	; (8003680 <W25qxx_ReadPage+0x174>)
 80035ee:	f005 ff16 	bl	800941e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80035f2:	2201      	movs	r2, #1
 80035f4:	2140      	movs	r1, #64	; 0x40
 80035f6:	4821      	ldr	r0, [pc, #132]	; (800367c <W25qxx_ReadPage+0x170>)
 80035f8:	f002 f9a8 	bl	800594c <HAL_GPIO_WritePin>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 80035fc:	f001 fc76 	bl	8004eec <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 8003608:	2300      	movs	r3, #0
 800360a:	617b      	str	r3, [r7, #20]
 800360c:	e018      	b.n	8003640 <W25qxx_ReadPage+0x134>
	{
		if ((i % 8 == 0) && (i > 2))
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	f003 0307 	and.w	r3, r3, #7
 8003614:	2b00      	cmp	r3, #0
 8003616:	d108      	bne.n	800362a <W25qxx_ReadPage+0x11e>
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	2b02      	cmp	r3, #2
 800361c:	d905      	bls.n	800362a <W25qxx_ReadPage+0x11e>
		{
			printf("\r\n");
 800361e:	4819      	ldr	r0, [pc, #100]	; (8003684 <W25qxx_ReadPage+0x178>)
 8003620:	f00f ffc2 	bl	80135a8 <puts>
			W25qxx_Delay(10);
 8003624:	200a      	movs	r0, #10
 8003626:	f00c fcaf 	bl	800ff88 <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	4413      	add	r3, r2
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	4619      	mov	r1, r3
 8003634:	4814      	ldr	r0, [pc, #80]	; (8003688 <W25qxx_ReadPage+0x17c>)
 8003636:	f00f ff31 	bl	801349c <iprintf>
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	3301      	adds	r3, #1
 800363e:	617b      	str	r3, [r7, #20]
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	429a      	cmp	r2, r3
 8003646:	d3e2      	bcc.n	800360e <W25qxx_ReadPage+0x102>
	}
	printf("\r\n");
 8003648:	480e      	ldr	r0, [pc, #56]	; (8003684 <W25qxx_ReadPage+0x178>)
 800364a:	f00f ffad 	bl	80135a8 <puts>
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
 800364e:	6939      	ldr	r1, [r7, #16]
 8003650:	480e      	ldr	r0, [pc, #56]	; (800368c <W25qxx_ReadPage+0x180>)
 8003652:	f00f ff23 	bl	801349c <iprintf>
	W25qxx_Delay(100);
 8003656:	2064      	movs	r0, #100	; 0x64
 8003658:	f00c fc96 	bl	800ff88 <osDelay>
#endif
	W25qxx_Delay(1);
 800365c:	2001      	movs	r0, #1
 800365e:	f00c fc93 	bl	800ff88 <osDelay>
	w25qxx.Lock = 0;
 8003662:	4b04      	ldr	r3, [pc, #16]	; (8003674 <W25qxx_ReadPage+0x168>)
 8003664:	2200      	movs	r2, #0
 8003666:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800366a:	bf00      	nop
 800366c:	3718      	adds	r7, #24
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	20005f98 	.word	0x20005f98
 8003678:	080178d0 	.word	0x080178d0
 800367c:	40020c00 	.word	0x40020c00
 8003680:	20005140 	.word	0x20005140
 8003684:	080176f4 	.word	0x080176f4
 8003688:	080176f8 	.word	0x080176f8
 800368c:	0801790c 	.word	0x0801790c

08003690 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b088      	sub	sp, #32
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]
 800369c:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 800369e:	4b36      	ldr	r3, [pc, #216]	; (8003778 <W25qxx_ReadSector+0xe8>)
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d802      	bhi.n	80036ae <W25qxx_ReadSector+0x1e>
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d102      	bne.n	80036b4 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 80036ae:	4b32      	ldr	r3, [pc, #200]	; (8003778 <W25qxx_ReadSector+0xe8>)
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	68b9      	ldr	r1, [r7, #8]
 80036ba:	4830      	ldr	r0, [pc, #192]	; (800377c <W25qxx_ReadSector+0xec>)
 80036bc:	f00f feee 	bl	801349c <iprintf>
	W25qxx_Delay(100);
 80036c0:	2064      	movs	r0, #100	; 0x64
 80036c2:	f00c fc61 	bl	800ff88 <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 80036c6:	4b2c      	ldr	r3, [pc, #176]	; (8003778 <W25qxx_ReadSector+0xe8>)
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d306      	bcc.n	80036de <W25qxx_ReadSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx ReadSector Faild!\r\n");
 80036d0:	482b      	ldr	r0, [pc, #172]	; (8003780 <W25qxx_ReadSector+0xf0>)
 80036d2:	f00f ff69 	bl	80135a8 <puts>
		W25qxx_Delay(100);
 80036d6:	2064      	movs	r0, #100	; 0x64
 80036d8:	f00c fc56 	bl	800ff88 <osDelay>
#endif
		return;
 80036dc:	e048      	b.n	8003770 <W25qxx_ReadSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	441a      	add	r2, r3
 80036e4:	4b24      	ldr	r3, [pc, #144]	; (8003778 <W25qxx_ReadSector+0xe8>)
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d905      	bls.n	80036f8 <W25qxx_ReadSector+0x68>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 80036ec:	4b22      	ldr	r3, [pc, #136]	; (8003778 <W25qxx_ReadSector+0xe8>)
 80036ee:	691a      	ldr	r2, [r3, #16]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	61bb      	str	r3, [r7, #24]
 80036f6:	e001      	b.n	80036fc <W25qxx_ReadSector+0x6c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 80036fc:	68b8      	ldr	r0, [r7, #8]
 80036fe:	f7ff fdab 	bl	8003258 <W25qxx_SectorToPage>
 8003702:	4602      	mov	r2, r0
 8003704:	4b1c      	ldr	r3, [pc, #112]	; (8003778 <W25qxx_ReadSector+0xe8>)
 8003706:	895b      	ldrh	r3, [r3, #10]
 8003708:	4619      	mov	r1, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	fbb3 f3f1 	udiv	r3, r3, r1
 8003710:	4413      	add	r3, r2
 8003712:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8003714:	4b18      	ldr	r3, [pc, #96]	; (8003778 <W25qxx_ReadSector+0xe8>)
 8003716:	895b      	ldrh	r3, [r3, #10]
 8003718:	461a      	mov	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003720:	fb02 f201 	mul.w	r2, r2, r1
 8003724:	1a9b      	subs	r3, r3, r2
 8003726:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	69f9      	ldr	r1, [r7, #28]
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f7ff feec 	bl	800350c <W25qxx_ReadPage>
		StartPage++;
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	3301      	adds	r3, #1
 8003738:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 800373a:	4b0f      	ldr	r3, [pc, #60]	; (8003778 <W25qxx_ReadSector+0xe8>)
 800373c:	895b      	ldrh	r3, [r3, #10]
 800373e:	461a      	mov	r2, r3
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	1a9a      	subs	r2, r3, r2
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	4413      	add	r3, r2
 8003748:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 800374a:	4b0b      	ldr	r3, [pc, #44]	; (8003778 <W25qxx_ReadSector+0xe8>)
 800374c:	895b      	ldrh	r3, [r3, #10]
 800374e:	461a      	mov	r2, r3
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	4413      	add	r3, r2
 8003758:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 800375a:	2300      	movs	r3, #0
 800375c:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	2b00      	cmp	r3, #0
 8003762:	dce1      	bgt.n	8003728 <W25qxx_ReadSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
 8003764:	4807      	ldr	r0, [pc, #28]	; (8003784 <W25qxx_ReadSector+0xf4>)
 8003766:	f00f ff1f 	bl	80135a8 <puts>
	W25qxx_Delay(100);
 800376a:	2064      	movs	r0, #100	; 0x64
 800376c:	f00c fc0c 	bl	800ff88 <osDelay>
#endif
}
 8003770:	3720      	adds	r7, #32
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	20005f98 	.word	0x20005f98
 800377c:	08017930 	.word	0x08017930
 8003780:	08017970 	.word	0x08017970
 8003784:	08017990 	.word	0x08017990

08003788 <MRT_rtc_Init>:


//**************************************************//
//FUNCTIONS

void MRT_rtc_Init(void){
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0

	print("Setting RTC to previous time...");
 800378c:	4814      	ldr	r0, [pc, #80]	; (80037e0 <MRT_rtc_Init+0x58>)
 800378e:	f7fd fc5b 	bl	8001048 <print>
	MRT_set_rtc(prev_hours,prev_min,prev_sec);
 8003792:	4b14      	ldr	r3, [pc, #80]	; (80037e4 <MRT_rtc_Init+0x5c>)
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	4a14      	ldr	r2, [pc, #80]	; (80037e8 <MRT_rtc_Init+0x60>)
 8003798:	7811      	ldrb	r1, [r2, #0]
 800379a:	4a14      	ldr	r2, [pc, #80]	; (80037ec <MRT_rtc_Init+0x64>)
 800379c:	7812      	ldrb	r2, [r2, #0]
 800379e:	4618      	mov	r0, r3
 80037a0:	f000 f8e8 	bl	8003974 <MRT_set_rtc>
	print("OK\r\n");
 80037a4:	4812      	ldr	r0, [pc, #72]	; (80037f0 <MRT_rtc_Init+0x68>)
 80037a6:	f7fd fc4f 	bl	8001048 <print>

	#if ALARM_A_ACTIVE
		print("Setting alarmA...");
 80037aa:	4812      	ldr	r0, [pc, #72]	; (80037f4 <MRT_rtc_Init+0x6c>)
 80037ac:	f7fd fc4c 	bl	8001048 <print>
		HAL_Delay(2000); //To make sure that when you set the Alarm it doesn't go off automatically
 80037b0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80037b4:	f001 fba6 	bl	8004f04 <HAL_Delay>
		if (wu_flag == 0){
 80037b8:	4b0f      	ldr	r3, [pc, #60]	; (80037f8 <MRT_rtc_Init+0x70>)
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d105      	bne.n	80037cc <MRT_rtc_Init+0x44>
			MRT_set_alarmA(PRE_WHEN_SLEEP_TIME_HOURS, PRE_WHEN_SLEEP_TIME_MIN, PRE_WHEN_SLEEP_TIME_SEC);
 80037c0:	2200      	movs	r2, #0
 80037c2:	211e      	movs	r1, #30
 80037c4:	2004      	movs	r0, #4
 80037c6:	f000 f91b 	bl	8003a00 <MRT_set_alarmA>
 80037ca:	e004      	b.n	80037d6 <MRT_rtc_Init+0x4e>
		}
		else{
			MRT_set_alarmA(POST_WHEN_SLEEP_TIME_HOURS, POST_WHEN_SLEEP_TIME_MIN, POST_WHEN_SLEEP_TIME_SEC);
 80037cc:	2200      	movs	r2, #0
 80037ce:	2100      	movs	r1, #0
 80037d0:	200e      	movs	r0, #14
 80037d2:	f000 f915 	bl	8003a00 <MRT_set_alarmA>
		}
		print("OK\r\n");
 80037d6:	4806      	ldr	r0, [pc, #24]	; (80037f0 <MRT_rtc_Init+0x68>)
 80037d8:	f7fd fc36 	bl	8001048 <print>
	#endif
}
 80037dc:	bf00      	nop
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	08017a24 	.word	0x08017a24
 80037e4:	20000275 	.word	0x20000275
 80037e8:	20000276 	.word	0x20000276
 80037ec:	20000277 	.word	0x20000277
 80037f0:	08017a44 	.word	0x08017a44
 80037f4:	08017a4c 	.word	0x08017a4c
 80037f8:	20000271 	.word	0x20000271

080037fc <MRT_check_for_wake_up>:


void MRT_check_for_wake_up(void){
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0

	//If WU flag set, wake up procedure
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8003800:	4b0e      	ldr	r3, [pc, #56]	; (800383c <MRT_check_for_wake_up+0x40>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b02      	cmp	r3, #2
 800380a:	d112      	bne.n	8003832 <MRT_check_for_wake_up+0x36>
	{

		wu_flag = 1;
 800380c:	4b0c      	ldr	r3, [pc, #48]	; (8003840 <MRT_check_for_wake_up+0x44>)
 800380e:	2201      	movs	r2, #1
 8003810:	701a      	strb	r2, [r3, #0]

		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 8003812:	4b0a      	ldr	r3, [pc, #40]	; (800383c <MRT_check_for_wake_up+0x40>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a09      	ldr	r2, [pc, #36]	; (800383c <MRT_check_for_wake_up+0x40>)
 8003818:	f043 0308 	orr.w	r3, r3, #8
 800381c:	6013      	str	r3, [r2, #0]

		print("Wakeup from the STANDBY MODE\r\n");
 800381e:	4809      	ldr	r0, [pc, #36]	; (8003844 <MRT_check_for_wake_up+0x48>)
 8003820:	f7fd fc12 	bl	8001048 <print>

		/** Disable the WWAKEUP PIN **/
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 8003824:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003828:	f004 f894 	bl	8007954 <HAL_PWR_DisableWakeUpPin>

		/** Deactivate the RTC wakeup  **/
		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc); //TODO hrtc from rtc.h (should we pass it as an argument instead?)
 800382c:	4806      	ldr	r0, [pc, #24]	; (8003848 <MRT_check_for_wake_up+0x4c>)
 800382e:	f005 fbcf 	bl	8008fd0 <HAL_RTCEx_DeactivateWakeUpTimer>
	}

	MRT_clear_alarms_flags();
 8003832:	f000 f80b 	bl	800384c <MRT_clear_alarms_flags>
}
 8003836:	bf00      	nop
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40007000 	.word	0x40007000
 8003840:	20000271 	.word	0x20000271
 8003844:	08017a60 	.word	0x08017a60
 8003848:	200050c8 	.word	0x200050c8

0800384c <MRT_clear_alarms_flags>:



void MRT_clear_alarms_flags(void){
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
	//Must be after alarm A was activated and before going to sleep

	print("Clearing the flags\r\n");
 8003850:	482a      	ldr	r0, [pc, #168]	; (80038fc <MRT_clear_alarms_flags+0xb0>)
 8003852:	f7fd fbf9 	bl	8001048 <print>

	//Clear alarmA flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8003856:	4b2a      	ldr	r3, [pc, #168]	; (8003900 <MRT_clear_alarms_flags+0xb4>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	22ca      	movs	r2, #202	; 0xca
 800385c:	625a      	str	r2, [r3, #36]	; 0x24
 800385e:	4b28      	ldr	r3, [pc, #160]	; (8003900 <MRT_clear_alarms_flags+0xb4>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2253      	movs	r2, #83	; 0x53
 8003864:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 8003866:	e008      	b.n	800387a <MRT_clear_alarms_flags+0x2e>
		//print("Clearing alarm A flag\r\n");
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8003868:	4b25      	ldr	r3, [pc, #148]	; (8003900 <MRT_clear_alarms_flags+0xb4>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	b2da      	uxtb	r2, r3
 8003870:	4b23      	ldr	r3, [pc, #140]	; (8003900 <MRT_clear_alarms_flags+0xb4>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003878:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 800387a:	4b21      	ldr	r3, [pc, #132]	; (8003900 <MRT_clear_alarms_flags+0xb4>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1ef      	bne.n	8003868 <MRT_clear_alarms_flags+0x1c>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8003888:	4b1d      	ldr	r3, [pc, #116]	; (8003900 <MRT_clear_alarms_flags+0xb4>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	22ff      	movs	r2, #255	; 0xff
 800388e:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003890:	4b1c      	ldr	r3, [pc, #112]	; (8003904 <MRT_clear_alarms_flags+0xb8>)
 8003892:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003896:	615a      	str	r2, [r3, #20]


  	//Clear alarmB flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8003898:	4b19      	ldr	r3, [pc, #100]	; (8003900 <MRT_clear_alarms_flags+0xb4>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	22ca      	movs	r2, #202	; 0xca
 800389e:	625a      	str	r2, [r3, #36]	; 0x24
 80038a0:	4b17      	ldr	r3, [pc, #92]	; (8003900 <MRT_clear_alarms_flags+0xb4>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2253      	movs	r2, #83	; 0x53
 80038a6:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 80038a8:	e008      	b.n	80038bc <MRT_clear_alarms_flags+0x70>
		//print("Clearing alarm B flag\r\n");
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRBF);
 80038aa:	4b15      	ldr	r3, [pc, #84]	; (8003900 <MRT_clear_alarms_flags+0xb4>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	4b13      	ldr	r3, [pc, #76]	; (8003900 <MRT_clear_alarms_flags+0xb4>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f462 7220 	orn	r2, r2, #640	; 0x280
 80038ba:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 80038bc:	4b10      	ldr	r3, [pc, #64]	; (8003900 <MRT_clear_alarms_flags+0xb4>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1ef      	bne.n	80038aa <MRT_clear_alarms_flags+0x5e>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 80038ca:	4b0d      	ldr	r3, [pc, #52]	; (8003900 <MRT_clear_alarms_flags+0xb4>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	22ff      	movs	r2, #255	; 0xff
 80038d0:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80038d2:	4b0c      	ldr	r3, [pc, #48]	; (8003904 <MRT_clear_alarms_flags+0xb8>)
 80038d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80038d8:	615a      	str	r2, [r3, #20]

	/* Clear the WU FLAG */
	//print("Clearing wake up flag\r\n");
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80038da:	4b0b      	ldr	r3, [pc, #44]	; (8003908 <MRT_clear_alarms_flags+0xbc>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a0a      	ldr	r2, [pc, #40]	; (8003908 <MRT_clear_alarms_flags+0xbc>)
 80038e0:	f043 0304 	orr.w	r3, r3, #4
 80038e4:	6013      	str	r3, [r2, #0]

	/* clear the RTC Wake UP (WU) flag */
	//print("Clearing RTC wake up flag\r\n");
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 80038e6:	4b06      	ldr	r3, [pc, #24]	; (8003900 <MRT_clear_alarms_flags+0xb4>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	b2da      	uxtb	r2, r3
 80038ee:	4b04      	ldr	r3, [pc, #16]	; (8003900 <MRT_clear_alarms_flags+0xb4>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80038f6:	60da      	str	r2, [r3, #12]
}
 80038f8:	bf00      	nop
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	08017a80 	.word	0x08017a80
 8003900:	200050c8 	.word	0x200050c8
 8003904:	40013c00 	.word	0x40013c00
 8003908:	40007000 	.word	0x40007000

0800390c <MRT_StandByMode>:

/*
 * This function is called to enter standby mode
 * @param seconds: time before it wakes up (max of 36 hours)
 */
void MRT_StandByMode(uint32_t seconds){
 800390c:	b580      	push	{r7, lr}
 800390e:	b0a4      	sub	sp, #144	; 0x90
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
	print("\r\n/*****StandByMode*****/\r\n");
 8003914:	4813      	ldr	r0, [pc, #76]	; (8003964 <MRT_StandByMode+0x58>)
 8003916:	f7fd fb97 	bl	8001048 <print>

	/* Enable the WAKEUP PIN
	 * (Needs to be placed BEFORE clearing up the flags or else it wakes up as soon as we enter standby mode)*/
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 800391a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800391e:	f004 f807 	bl	8007930 <HAL_PWR_EnableWakeUpPin>

	/*Clear the flags so it doesn't wake up as soon as it goes to sleep*/
	MRT_clear_alarms_flags();
 8003922:	f7ff ff93 	bl	800384c <MRT_clear_alarms_flags>

	//Setup RTC wake up timer
	println("Setting up RTCW");
 8003926:	4810      	ldr	r0, [pc, #64]	; (8003968 <MRT_StandByMode+0x5c>)
 8003928:	f7fd fb70 	bl	800100c <println>
	  Error_Handler();
	}
	*/

	char* msg[30+sizeof(uint32_t)];
	sprintf(msg,"Going to sleep for %i seconds",seconds);
 800392c:	f107 0308 	add.w	r3, r7, #8
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	490e      	ldr	r1, [pc, #56]	; (800396c <MRT_StandByMode+0x60>)
 8003934:	4618      	mov	r0, r3
 8003936:	f00f fe55 	bl	80135e4 <siprintf>
	println(msg);
 800393a:	f107 0308 	add.w	r3, r7, #8
 800393e:	4618      	mov	r0, r3
 8003940:	f7fd fb64 	bl	800100c <println>

	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc,seconds, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8003944:	2204      	movs	r2, #4
 8003946:	6879      	ldr	r1, [r7, #4]
 8003948:	4809      	ldr	r0, [pc, #36]	; (8003970 <MRT_StandByMode+0x64>)
 800394a:	f005 fa81 	bl	8008e50 <HAL_RTCEx_SetWakeUpTimer_IT>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <MRT_StandByMode+0x4c>
	{
	  Error_Handler();
 8003954:	f7fe f924 	bl	8001ba0 <Error_Handler>
	}

	HAL_PWR_EnterSTANDBYMode();
 8003958:	f004 f810 	bl	800797c <HAL_PWR_EnterSTANDBYMode>
}
 800395c:	bf00      	nop
 800395e:	3790      	adds	r7, #144	; 0x90
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	08017a98 	.word	0x08017a98
 8003968:	08017ab4 	.word	0x08017ab4
 800396c:	08017ac4 	.word	0x08017ac4
 8003970:	200050c8 	.word	0x200050c8

08003974 <MRT_set_rtc>:




void MRT_set_rtc(uint8_t h, uint8_t m, uint8_t s){
 8003974:	b580      	push	{r7, lr}
 8003976:	b088      	sub	sp, #32
 8003978:	af00      	add	r7, sp, #0
 800397a:	4603      	mov	r3, r0
 800397c:	71fb      	strb	r3, [r7, #7]
 800397e:	460b      	mov	r3, r1
 8003980:	71bb      	strb	r3, [r7, #6]
 8003982:	4613      	mov	r3, r2
 8003984:	717b      	strb	r3, [r7, #5]
	  /** Initialize RTC and set the Time and Date
	  */
	  RTC_TimeTypeDef sTime;

	  sTime.Hours = int_to_hex_table[h];
 8003986:	79fb      	ldrb	r3, [r7, #7]
 8003988:	4a1a      	ldr	r2, [pc, #104]	; (80039f4 <MRT_set_rtc+0x80>)
 800398a:	5cd3      	ldrb	r3, [r2, r3]
 800398c:	733b      	strb	r3, [r7, #12]
	  sTime.Minutes = int_to_hex_table[m];
 800398e:	79bb      	ldrb	r3, [r7, #6]
 8003990:	4a18      	ldr	r2, [pc, #96]	; (80039f4 <MRT_set_rtc+0x80>)
 8003992:	5cd3      	ldrb	r3, [r2, r3]
 8003994:	737b      	strb	r3, [r7, #13]
	  sTime.Seconds = int_to_hex_table[s];
 8003996:	797b      	ldrb	r3, [r7, #5]
 8003998:	4a16      	ldr	r2, [pc, #88]	; (80039f4 <MRT_set_rtc+0x80>)
 800399a:	5cd3      	ldrb	r3, [r2, r3]
 800399c:	73bb      	strb	r3, [r7, #14]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800399e:	2300      	movs	r3, #0
 80039a0:	61bb      	str	r3, [r7, #24]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80039a2:	2300      	movs	r3, #0
 80039a4:	61fb      	str	r3, [r7, #28]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80039a6:	f107 030c 	add.w	r3, r7, #12
 80039aa:	2201      	movs	r2, #1
 80039ac:	4619      	mov	r1, r3
 80039ae:	4812      	ldr	r0, [pc, #72]	; (80039f8 <MRT_set_rtc+0x84>)
 80039b0:	f004 feef 	bl	8008792 <HAL_RTC_SetTime>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <MRT_set_rtc+0x4a>
	  {
	    Error_Handler();
 80039ba:	f7fe f8f1 	bl	8001ba0 <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80039be:	4b0f      	ldr	r3, [pc, #60]	; (80039fc <MRT_set_rtc+0x88>)
 80039c0:	2201      	movs	r2, #1
 80039c2:	701a      	strb	r2, [r3, #0]
	  sDate.Month = RTC_MONTH_JANUARY;
 80039c4:	4b0d      	ldr	r3, [pc, #52]	; (80039fc <MRT_set_rtc+0x88>)
 80039c6:	2201      	movs	r2, #1
 80039c8:	705a      	strb	r2, [r3, #1]
	  sDate.Date = 0x1;
 80039ca:	4b0c      	ldr	r3, [pc, #48]	; (80039fc <MRT_set_rtc+0x88>)
 80039cc:	2201      	movs	r2, #1
 80039ce:	709a      	strb	r2, [r3, #2]
	  sDate.Year = 0x0;
 80039d0:	4b0a      	ldr	r3, [pc, #40]	; (80039fc <MRT_set_rtc+0x88>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	70da      	strb	r2, [r3, #3]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80039d6:	2201      	movs	r2, #1
 80039d8:	4908      	ldr	r1, [pc, #32]	; (80039fc <MRT_set_rtc+0x88>)
 80039da:	4807      	ldr	r0, [pc, #28]	; (80039f8 <MRT_set_rtc+0x84>)
 80039dc:	f004 ff96 	bl	800890c <HAL_RTC_SetDate>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <MRT_set_rtc+0x76>
	  {
	    Error_Handler();
 80039e6:	f7fe f8db 	bl	8001ba0 <Error_Handler>
	  }
}
 80039ea:	bf00      	nop
 80039ec:	3720      	adds	r7, #32
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	20000024 	.word	0x20000024
 80039f8:	200050c8 	.word	0x200050c8
 80039fc:	20000394 	.word	0x20000394

08003a00 <MRT_set_alarmA>:



void MRT_set_alarmA(uint8_t h, uint8_t m, uint8_t s){
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	4603      	mov	r3, r0
 8003a08:	71fb      	strb	r3, [r7, #7]
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	71bb      	strb	r3, [r7, #6]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	717b      	strb	r3, [r7, #5]
	  /** Enable the Alarm A
	  */
	  sAlarm.AlarmTime.Hours = int_to_hex_table[h];
 8003a12:	79fb      	ldrb	r3, [r7, #7]
 8003a14:	4a1a      	ldr	r2, [pc, #104]	; (8003a80 <MRT_set_alarmA+0x80>)
 8003a16:	5cd2      	ldrb	r2, [r2, r3]
 8003a18:	4b1a      	ldr	r3, [pc, #104]	; (8003a84 <MRT_set_alarmA+0x84>)
 8003a1a:	701a      	strb	r2, [r3, #0]
	  sAlarm.AlarmTime.Minutes = int_to_hex_table[m];
 8003a1c:	79bb      	ldrb	r3, [r7, #6]
 8003a1e:	4a18      	ldr	r2, [pc, #96]	; (8003a80 <MRT_set_alarmA+0x80>)
 8003a20:	5cd2      	ldrb	r2, [r2, r3]
 8003a22:	4b18      	ldr	r3, [pc, #96]	; (8003a84 <MRT_set_alarmA+0x84>)
 8003a24:	705a      	strb	r2, [r3, #1]
	  sAlarm.AlarmTime.Seconds = int_to_hex_table[s];
 8003a26:	797b      	ldrb	r3, [r7, #5]
 8003a28:	4a15      	ldr	r2, [pc, #84]	; (8003a80 <MRT_set_alarmA+0x80>)
 8003a2a:	5cd2      	ldrb	r2, [r2, r3]
 8003a2c:	4b15      	ldr	r3, [pc, #84]	; (8003a84 <MRT_set_alarmA+0x84>)
 8003a2e:	709a      	strb	r2, [r3, #2]
	  sAlarm.AlarmTime.SubSeconds = 0x0;
 8003a30:	4b14      	ldr	r3, [pc, #80]	; (8003a84 <MRT_set_alarmA+0x84>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	605a      	str	r2, [r3, #4]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003a36:	4b13      	ldr	r3, [pc, #76]	; (8003a84 <MRT_set_alarmA+0x84>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	60da      	str	r2, [r3, #12]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003a3c:	4b11      	ldr	r3, [pc, #68]	; (8003a84 <MRT_set_alarmA+0x84>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	611a      	str	r2, [r3, #16]
	  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8003a42:	4b10      	ldr	r3, [pc, #64]	; (8003a84 <MRT_set_alarmA+0x84>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	615a      	str	r2, [r3, #20]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003a48:	4b0e      	ldr	r3, [pc, #56]	; (8003a84 <MRT_set_alarmA+0x84>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	619a      	str	r2, [r3, #24]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003a4e:	4b0d      	ldr	r3, [pc, #52]	; (8003a84 <MRT_set_alarmA+0x84>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	61da      	str	r2, [r3, #28]
	  sAlarm.AlarmDateWeekDay = 0x1;
 8003a54:	4b0b      	ldr	r3, [pc, #44]	; (8003a84 <MRT_set_alarmA+0x84>)
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2020 	strb.w	r2, [r3, #32]
	  sAlarm.Alarm = RTC_ALARM_A;
 8003a5c:	4b09      	ldr	r3, [pc, #36]	; (8003a84 <MRT_set_alarmA+0x84>)
 8003a5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a62:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8003a64:	2201      	movs	r2, #1
 8003a66:	4907      	ldr	r1, [pc, #28]	; (8003a84 <MRT_set_alarmA+0x84>)
 8003a68:	4807      	ldr	r0, [pc, #28]	; (8003a88 <MRT_set_alarmA+0x88>)
 8003a6a:	f004 fff7 	bl	8008a5c <HAL_RTC_SetAlarm_IT>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <MRT_set_alarmA+0x78>
	  {
	    Error_Handler();
 8003a74:	f7fe f894 	bl	8001ba0 <Error_Handler>
	  }
}
 8003a78:	bf00      	nop
 8003a7a:	3708      	adds	r7, #8
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	20000024 	.word	0x20000024
 8003a84:	20000398 	.word	0x20000398
 8003a88:	200050c8 	.word	0x200050c8

08003a8c <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh>:


//**************************************************//
/*****LSM6DSR*****/

LSM6DSR::LSM6DSR(I2C_HandleTypeDef* i2c_bus, uint8_t address){
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b088      	sub	sp, #32
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	4613      	mov	r3, r2
 8003a98:	71fb      	strb	r3, [r7, #7]
	println((char*) "LSM6DSR Setup Starts");
 8003a9a:	483e      	ldr	r0, [pc, #248]	; (8003b94 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x108>)
 8003a9c:	f7fd fab6 	bl	800100c <println>

	/* Initialize mems driver interface */
	ctx.write_reg = write;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4a3d      	ldr	r2, [pc, #244]	; (8003b98 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x10c>)
 8003aa4:	61da      	str	r2, [r3, #28]
	ctx.read_reg = read;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	4a3c      	ldr	r2, [pc, #240]	; (8003b9c <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x110>)
 8003aaa:	621a      	str	r2, [r3, #32]
	ctx.handle = i2c_bus;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	68ba      	ldr	r2, [r7, #8]
 8003ab0:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait sensor boot time */
	HAL_Delay(LSM6DSR_BOOT_TIME);
 8003ab2:	2064      	movs	r0, #100	; 0x64
 8003ab4:	f001 fa26 	bl	8004f04 <HAL_Delay>
	/* Check device ID */
	lsm6dsr_device_id_get(&ctx, &whoamI);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f103 021c 	add.w	r2, r3, #28
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	3336      	adds	r3, #54	; 0x36
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	4610      	mov	r0, r2
 8003ac6:	f001 f917 	bl	8004cf8 <lsm6dsr_device_id_get>

	print((char*) "Checking Sensor ID...");
 8003aca:	4835      	ldr	r0, [pc, #212]	; (8003ba0 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x114>)
 8003acc:	f7fd fabc 	bl	8001048 <print>
	//if (whoamI != LSM6DSR_ID){ ORIGINAL
	if (whoamI != address){
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003ad6:	79fa      	ldrb	r2, [r7, #7]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d018      	beq.n	8003b0e <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x82>
	  println((char*) "NOT OK");
 8003adc:	4831      	ldr	r0, [pc, #196]	; (8003ba4 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x118>)
 8003ade:	f7fd fa95 	bl	800100c <println>
	  print((char*) "This Device is: ");
 8003ae2:	4831      	ldr	r0, [pc, #196]	; (8003ba8 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x11c>)
 8003ae4:	f7fd fab0 	bl	8001048 <print>

	  char buffer[10];
	  sprintf(buffer, "%X\r\n", whoamI);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003aee:	461a      	mov	r2, r3
 8003af0:	f107 0314 	add.w	r3, r7, #20
 8003af4:	492d      	ldr	r1, [pc, #180]	; (8003bac <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x120>)
 8003af6:	4618      	mov	r0, r3
 8003af8:	f00f fd74 	bl	80135e4 <siprintf>
	  print(buffer);
 8003afc:	f107 0314 	add.w	r3, r7, #20
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7fd faa1 	bl	8001048 <print>

	  println((char*) "\n\rProgram Terminated\n\r");
 8003b06:	482a      	ldr	r0, [pc, #168]	; (8003bb0 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x124>)
 8003b08:	f7fd fa80 	bl	800100c <println>
	  while(1);
 8003b0c:	e7fe      	b.n	8003b0c <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x80>
	}
	println((char*) "OK");
 8003b0e:	4829      	ldr	r0, [pc, #164]	; (8003bb4 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x128>)
 8003b10:	f7fd fa7c 	bl	800100c <println>

	/* Restore default configuration */
	lsm6dsr_reset_set(&ctx, PROPERTY_ENABLE);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	331c      	adds	r3, #28
 8003b18:	2101      	movs	r1, #1
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f001 f8fd 	bl	8004d1a <lsm6dsr_reset_set>
	HAL_Delay(500);
 8003b20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003b24:	f001 f9ee 	bl	8004f04 <HAL_Delay>
	do {
	lsm6dsr_reset_get(&ctx, &rst);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f103 021c 	add.w	r2, r3, #28
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	3337      	adds	r3, #55	; 0x37
 8003b32:	4619      	mov	r1, r3
 8003b34:	4610      	mov	r0, r2
 8003b36:	f001 f916 	bl	8004d66 <lsm6dsr_reset_get>
	} while (rst);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d000      	beq.n	8003b46 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0xba>
	do {
 8003b44:	e7f0      	b.n	8003b28 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x9c>

	/* Disable I3C interface */
	//TODO JASPER lsm6dsr_i3c_disable_set(&ctx, LSM6DSR_I3C_DISABLE);

	/* Enable Block Data Update */
	lsm6dsr_block_data_update_set(&ctx, PROPERTY_ENABLE);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	331c      	adds	r3, #28
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f000 ff83 	bl	8004a58 <lsm6dsr_block_data_update_set>
	/* Set Output Data Rate */
	lsm6dsr_xl_data_rate_set(&ctx, LSM6DSR_XL_ODR_12Hz5);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	331c      	adds	r3, #28
 8003b56:	2101      	movs	r1, #1
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f000 fd5f 	bl	800461c <lsm6dsr_xl_data_rate_set>
	lsm6dsr_gy_data_rate_set(&ctx, LSM6DSR_GY_ODR_12Hz5);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	331c      	adds	r3, #28
 8003b62:	2101      	movs	r1, #1
 8003b64:	4618      	mov	r0, r3
 8003b66:	f000 fe7b 	bl	8004860 <lsm6dsr_gy_data_rate_set>
	/* Set full scale */
	lsm6dsr_xl_full_scale_set(&ctx, LSM6DSR_2g);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	331c      	adds	r3, #28
 8003b6e:	2100      	movs	r1, #0
 8003b70:	4618      	mov	r0, r3
 8003b72:	f000 fd2d 	bl	80045d0 <lsm6dsr_xl_full_scale_set>
	lsm6dsr_gy_full_scale_set(&ctx, LSM6DSR_2000dps);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	331c      	adds	r3, #28
 8003b7a:	210c      	movs	r1, #12
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f000 fe49 	bl	8004814 <lsm6dsr_gy_full_scale_set>
	/* Configure filtering chain(No aux interface)
	* Accelerometer - LPF1 + LPF2 path
	*/
	//TODO JASPER lsm6dsr_xl_hp_path_on_out_set(&ctx, LSM6DSR_LP_ODR_DIV_100);
	//TODO JASPER lsm6dsr_xl_filter_lp2_set(&ctx, PROPERTY_ENABLE);
	println((char*) "LSM6DSR Setup Ends");
 8003b82:	480d      	ldr	r0, [pc, #52]	; (8003bb8 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x12c>)
 8003b84:	f7fd fa42 	bl	800100c <println>

	//return ctx;
}
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3720      	adds	r7, #32
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	08017ae4 	.word	0x08017ae4
 8003b98:	08003d29 	.word	0x08003d29
 8003b9c:	08003d63 	.word	0x08003d63
 8003ba0:	08017afc 	.word	0x08017afc
 8003ba4:	08017b14 	.word	0x08017b14
 8003ba8:	08017b1c 	.word	0x08017b1c
 8003bac:	08017b30 	.word	0x08017b30
 8003bb0:	08017b38 	.word	0x08017b38
 8003bb4:	08017b50 	.word	0x08017b50
 8003bb8:	08017b54 	.word	0x08017b54

08003bbc <_ZN7LSM6DSR15getAccelerationEv>:


void LSM6DSR::getAcceleration(void){
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
	//lsm6dsr_reg_t reg;
	//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

	uint8_t reg;
	lsm6dsr_xl_flag_data_ready_get(&ctx, &reg);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	331c      	adds	r3, #28
 8003bc8:	f107 020f 	add.w	r2, r7, #15
 8003bcc:	4611      	mov	r1, r2
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f000 ff68 	bl	8004aa4 <lsm6dsr_xl_flag_data_ready_get>

	//if (reg.status_reg.gda) {
	if(reg){
 8003bd4:	7bfb      	ldrb	r3, [r7, #15]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d030      	beq.n	8003c3c <_ZN7LSM6DSR15getAccelerationEv+0x80>
	/* Read magnetic field data */
	memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	3328      	adds	r3, #40	; 0x28
 8003bde:	2206      	movs	r2, #6
 8003be0:	2100      	movs	r1, #0
 8003be2:	4618      	mov	r0, r3
 8003be4:	f00e fd7d 	bl	80126e2 <memset>
	lsm6dsr_acceleration_raw_get(&ctx, data_raw_acceleration);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f103 021c 	add.w	r2, r3, #28
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	3328      	adds	r3, #40	; 0x28
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	4610      	mov	r0, r2
 8003bf6:	f001 f80e 	bl	8004c16 <lsm6dsr_acceleration_raw_get>
	acceleration_mg[0] = lsm6dsr_from_fs2g_to_mg(
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8003c00:	4618      	mov	r0, r3
 8003c02:	f000 fc99 	bl	8004538 <lsm6dsr_from_fs2g_to_mg>
 8003c06:	eef0 7a40 	vmov.f32	s15, s0
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	edc3 7a00 	vstr	s15, [r3]
						   data_raw_acceleration[0]);
	acceleration_mg[1] = lsm6dsr_from_fs2g_to_mg(
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8003c16:	4618      	mov	r0, r3
 8003c18:	f000 fc8e 	bl	8004538 <lsm6dsr_from_fs2g_to_mg>
 8003c1c:	eef0 7a40 	vmov.f32	s15, s0
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	edc3 7a01 	vstr	s15, [r3, #4]
						   data_raw_acceleration[1]);
	acceleration_mg[2] = lsm6dsr_from_fs2g_to_mg(
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f000 fc83 	bl	8004538 <lsm6dsr_from_fs2g_to_mg>
 8003c32:	eef0 7a40 	vmov.f32	s15, s0
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	edc3 7a02 	vstr	s15, [r3, #8]
						   data_raw_acceleration[2]);
	}
}
 8003c3c:	bf00      	nop
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <_ZN7LSM6DSR14getTemperatureEv>:


void LSM6DSR::getTemperature(void){
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
	//lsm6dsr_reg_t reg;
	//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    uint8_t reg;
    lsm6dsr_temp_flag_data_ready_get(&ctx, &reg);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	331c      	adds	r3, #28
 8003c50:	f107 020f 	add.w	r2, r7, #15
 8003c54:	4611      	mov	r1, r2
 8003c56:	4618      	mov	r0, r3
 8003c58:	f000 ff56 	bl	8004b08 <lsm6dsr_temp_flag_data_ready_get>

	//if (reg.status_reg.tda) {
    if(reg){
 8003c5c:	7bfb      	ldrb	r3, [r7, #15]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d01a      	beq.n	8003c98 <_ZN7LSM6DSR14getTemperatureEv+0x54>
		//Read temperature data
		memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	3334      	adds	r3, #52	; 0x34
 8003c66:	2202      	movs	r2, #2
 8003c68:	2100      	movs	r1, #0
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f00e fd39 	bl	80126e2 <memset>
		lsm6dsr_temperature_raw_get(&ctx, &data_raw_temperature);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f103 021c 	add.w	r2, r3, #28
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	3334      	adds	r3, #52	; 0x34
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	4610      	mov	r0, r2
 8003c7e:	f000 ff5c 	bl	8004b3a <lsm6dsr_temperature_raw_get>
		temperature_degC = lsm6dsr_from_lsb_to_celsius(data_raw_temperature);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f000 fc85 	bl	8004598 <lsm6dsr_from_lsb_to_celsius>
 8003c8e:	eef0 7a40 	vmov.f32	s15, s0
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	edc3 7a06 	vstr	s15, [r3, #24]

	}
}
 8003c98:	bf00      	nop
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <_ZN7LSM6DSR14getAngularRateEv>:
void LSM6DSR::getAngularRate(void){
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
	//lsm6dsr_reg_t reg;
	//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

	uint8_t reg;
    lsm6dsr_gy_flag_data_ready_get(&ctx, &reg);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	331c      	adds	r3, #28
 8003cac:	f107 020f 	add.w	r2, r7, #15
 8003cb0:	4611      	mov	r1, r2
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f000 ff0f 	bl	8004ad6 <lsm6dsr_gy_flag_data_ready_get>

	//if (reg.status_reg.xlda) {
    if(reg){
 8003cb8:	7bfb      	ldrb	r3, [r7, #15]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d030      	beq.n	8003d20 <_ZN7LSM6DSR14getAngularRateEv+0x80>
	/* Read magnetic field data */
	memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	332e      	adds	r3, #46	; 0x2e
 8003cc2:	2206      	movs	r2, #6
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f00e fd0b 	bl	80126e2 <memset>
	lsm6dsr_angular_rate_raw_get(&ctx, data_raw_angular_rate);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f103 021c 	add.w	r2, r3, #28
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	332e      	adds	r3, #46	; 0x2e
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	4610      	mov	r0, r2
 8003cda:	f000 ff51 	bl	8004b80 <lsm6dsr_angular_rate_raw_get>
	angular_rate_mdps[0] =
			lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f000 fc3f 	bl	8004568 <lsm6dsr_from_fs2000dps_to_mdps>
 8003cea:	eef0 7a40 	vmov.f32	s15, s0
	angular_rate_mdps[0] =
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	edc3 7a03 	vstr	s15, [r3, #12]
	angular_rate_mdps[1] =
			lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 fc34 	bl	8004568 <lsm6dsr_from_fs2000dps_to_mdps>
 8003d00:	eef0 7a40 	vmov.f32	s15, s0
	angular_rate_mdps[1] =
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	edc3 7a04 	vstr	s15, [r3, #16]
	angular_rate_mdps[2] =
			lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8003d10:	4618      	mov	r0, r3
 8003d12:	f000 fc29 	bl	8004568 <lsm6dsr_from_fs2000dps_to_mdps>
 8003d16:	eef0 7a40 	vmov.f32	s15, s0
	angular_rate_mdps[2] =
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	edc3 7a05 	vstr	s15, [r3, #20]
	fs1000dps_to_mdps
	fs2000dps_to_mdps
	*/

	}
}
 8003d20:	bf00      	nop
 8003d22:	3710      	adds	r7, #16
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <_ZN7LSM6DSR5writeEPvhPKht>:


//int32_t LSM6DSR::write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
int32_t LSM6DSR::write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b088      	sub	sp, #32
 8003d2c:	af04      	add	r7, sp, #16
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	607a      	str	r2, [r7, #4]
 8003d32:	461a      	mov	r2, r3
 8003d34:	460b      	mov	r3, r1
 8003d36:	72fb      	strb	r3, [r7, #11]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write((I2C_HandleTypeDef*) handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8003d3c:	7afb      	ldrb	r3, [r7, #11]
 8003d3e:	b29a      	uxth	r2, r3
 8003d40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d44:	9302      	str	r3, [sp, #8]
 8003d46:	893b      	ldrh	r3, [r7, #8]
 8003d48:	9301      	str	r3, [sp, #4]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	9300      	str	r3, [sp, #0]
 8003d4e:	2301      	movs	r3, #1
 8003d50:	21d5      	movs	r1, #213	; 0xd5
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f001 ff7c 	bl	8005c50 <HAL_I2C_Mem_Write>
  return 0;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <_ZN7LSM6DSR4readEPvhPht>:

//int32_t LSM6DSR::read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
int32_t LSM6DSR::read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b088      	sub	sp, #32
 8003d66:	af04      	add	r7, sp, #16
 8003d68:	60f8      	str	r0, [r7, #12]
 8003d6a:	607a      	str	r2, [r7, #4]
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	460b      	mov	r3, r1
 8003d70:	72fb      	strb	r3, [r7, #11]
 8003d72:	4613      	mov	r3, r2
 8003d74:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read((I2C_HandleTypeDef*) handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8003d76:	7afb      	ldrb	r3, [r7, #11]
 8003d78:	b29a      	uxth	r2, r3
 8003d7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d7e:	9302      	str	r3, [sp, #8]
 8003d80:	893b      	ldrh	r3, [r7, #8]
 8003d82:	9301      	str	r3, [sp, #4]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	2301      	movs	r3, #1
 8003d8a:	21d5      	movs	r1, #213	; 0xd5
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f002 f859 	bl	8005e44 <HAL_I2C_Mem_Read>
  return 0;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3710      	adds	r7, #16
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh>:

//**************************************************//
/*****LPS22HH*****/


LPS22HH::LPS22HH(I2C_HandleTypeDef* i2c_bus, uint8_t address){
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b088      	sub	sp, #32
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	4613      	mov	r3, r2
 8003da8:	71fb      	strb	r3, [r7, #7]
	println((char*) "LPS22HH Setup Starts");
 8003daa:	4835      	ldr	r0, [pc, #212]	; (8003e80 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xe4>)
 8003dac:	f7fd f92e 	bl	800100c <println>

	/* Initialize mems driver interface */
	ctx.write_reg = write;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	4a34      	ldr	r2, [pc, #208]	; (8003e84 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xe8>)
 8003db4:	609a      	str	r2, [r3, #8]
	ctx.read_reg = read;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	4a33      	ldr	r2, [pc, #204]	; (8003e88 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xec>)
 8003dba:	60da      	str	r2, [r3, #12]
	ctx.handle = i2c_bus;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	68ba      	ldr	r2, [r7, #8]
 8003dc0:	611a      	str	r2, [r3, #16]
	/* Wait sensor boot time */
	HAL_Delay(LPS22HH_BOOT_TIME);
 8003dc2:	2064      	movs	r0, #100	; 0x64
 8003dc4:	f001 f89e 	bl	8004f04 <HAL_Delay>
	/* Check device ID */
	whoamI = 0;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	779a      	strb	r2, [r3, #30]
	lps22hh_device_id_get(&ctx, &whoamI);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f103 0208 	add.w	r2, r3, #8
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	331e      	adds	r3, #30
 8003dd8:	4619      	mov	r1, r3
 8003dda:	4610      	mov	r0, r2
 8003ddc:	f000 fb2b 	bl	8004436 <lps22hh_device_id_get>


	print((char*) "Checking Sensor ID...");
 8003de0:	482a      	ldr	r0, [pc, #168]	; (8003e8c <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xf0>)
 8003de2:	f7fd f931 	bl	8001048 <print>
	//if ( whoamI != LPS22HH_ID ){ ORIGINAL
	if ( whoamI != address ){
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	7f9b      	ldrb	r3, [r3, #30]
 8003dea:	79fa      	ldrb	r2, [r7, #7]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d017      	beq.n	8003e20 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x84>
	  println((char*) "NOT OK");
 8003df0:	4827      	ldr	r0, [pc, #156]	; (8003e90 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xf4>)
 8003df2:	f7fd f90b 	bl	800100c <println>
	  print((char*) "This Device is: ");
 8003df6:	4827      	ldr	r0, [pc, #156]	; (8003e94 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xf8>)
 8003df8:	f7fd f926 	bl	8001048 <print>

	  char buffer[10];
	  sprintf(buffer, "%X\r\n", whoamI);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	7f9b      	ldrb	r3, [r3, #30]
 8003e00:	461a      	mov	r2, r3
 8003e02:	f107 0314 	add.w	r3, r7, #20
 8003e06:	4924      	ldr	r1, [pc, #144]	; (8003e98 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xfc>)
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f00f fbeb 	bl	80135e4 <siprintf>
	  print(buffer);
 8003e0e:	f107 0314 	add.w	r3, r7, #20
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7fd f918 	bl	8001048 <print>

	  println((char*) "\n\rProgram Terminated\n\r");
 8003e18:	4820      	ldr	r0, [pc, #128]	; (8003e9c <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x100>)
 8003e1a:	f7fd f8f7 	bl	800100c <println>
	  while(1);
 8003e1e:	e7fe      	b.n	8003e1e <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x82>
	}
	println((char*) "OK");
 8003e20:	481f      	ldr	r0, [pc, #124]	; (8003ea0 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x104>)
 8003e22:	f7fd f8f3 	bl	800100c <println>

	/* Restore default configuration */
	lps22hh_reset_set(&ctx, PROPERTY_ENABLE);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	3308      	adds	r3, #8
 8003e2a:	2101      	movs	r1, #1
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f000 fb13 	bl	8004458 <lps22hh_reset_set>
	HAL_Delay(500);
 8003e32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003e36:	f001 f865 	bl	8004f04 <HAL_Delay>
	do {
	lps22hh_reset_get(&ctx, &rst);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f103 0208 	add.w	r2, r3, #8
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	331f      	adds	r3, #31
 8003e44:	4619      	mov	r1, r3
 8003e46:	4610      	mov	r0, r2
 8003e48:	f000 fb2c 	bl	80044a4 <lps22hh_reset_get>
	} while (rst);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	7fdb      	ldrb	r3, [r3, #31]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d000      	beq.n	8003e56 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xba>
	do {
 8003e54:	e7f1      	b.n	8003e3a <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x9e>


	/* Enable Block Data Update */
	lps22hh_block_data_update_set(&ctx, PROPERTY_ENABLE);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	3308      	adds	r3, #8
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 fa11 	bl	8004284 <lps22hh_block_data_update_set>

	/* Set Output Data Rate */
	lps22hh_data_rate_set(&ctx, LPS22HH_75_Hz_LOW_NOISE);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	3308      	adds	r3, #8
 8003e66:	2115      	movs	r1, #21
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f000 fa31 	bl	80042d0 <lps22hh_data_rate_set>
	println((char*) "LPS22HH Setup Ends");
 8003e6e:	480d      	ldr	r0, [pc, #52]	; (8003ea4 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x108>)
 8003e70:	f7fd f8cc 	bl	800100c <println>

	//return ctx;
}
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	4618      	mov	r0, r3
 8003e78:	3720      	adds	r7, #32
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	08017b68 	.word	0x08017b68
 8003e84:	08003f67 	.word	0x08003f67
 8003e88:	08003fa1 	.word	0x08003fa1
 8003e8c:	08017afc 	.word	0x08017afc
 8003e90:	08017b14 	.word	0x08017b14
 8003e94:	08017b1c 	.word	0x08017b1c
 8003e98:	08017b30 	.word	0x08017b30
 8003e9c:	08017b38 	.word	0x08017b38
 8003ea0:	08017b50 	.word	0x08017b50
 8003ea4:	08017b80 	.word	0x08017b80

08003ea8 <_ZN7LPS22HH11getPressureEv>:



void LPS22HH::getPressure(void){
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
	/* Read output only if new value is available */
	lps22hh_reg_t reg;
	lps22hh_read_reg(&ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f103 0008 	add.w	r0, r3, #8
 8003eb6:	f107 020c 	add.w	r2, r7, #12
 8003eba:	2301      	movs	r3, #1
 8003ebc:	2127      	movs	r1, #39	; 0x27
 8003ebe:	f000 f97f 	bl	80041c0 <lps22hh_read_reg>

	//uint8_t reg;
	//lps22hh_press_flag_data_ready_get(&ctx, &reg);

	if (reg.status.p_da) {
 8003ec2:	7b3b      	ldrb	r3, [r7, #12]
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d019      	beq.n	8003f02 <_ZN7LPS22HH11getPressureEv+0x5a>
	//if (reg) {
	  memset(&data_raw_pressure, 0x00, sizeof(uint32_t)); //TODO CAN CAUSE AN HARDFAULT
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	3318      	adds	r3, #24
 8003ed2:	2204      	movs	r2, #4
 8003ed4:	2100      	movs	r1, #0
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f00e fc03 	bl	80126e2 <memset>
	  lps22hh_pressure_raw_get(&ctx, &data_raw_pressure);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f103 0208 	add.w	r2, r3, #8
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	3318      	adds	r3, #24
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	4610      	mov	r0, r2
 8003eea:	f000 fa58 	bl	800439e <lps22hh_pressure_raw_get>
	  pressure_hPa = lps22hh_from_lsb_to_hpa(data_raw_pressure);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f000 f994 	bl	8004220 <lps22hh_from_lsb_to_hpa>
 8003ef8:	eef0 7a40 	vmov.f32	s15, s0
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8003f02:	bf00      	nop
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <_ZN7LPS22HH14getTemperatureEv>:


void LPS22HH::getTemperature(void){
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b084      	sub	sp, #16
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
	/* Read output only if new value is available */
	//lps22hh_reg_t reg;
	//lps22hh_read_reg(&ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);

	uint8_t reg;
	lps22hh_temp_flag_data_ready_get(&ctx, &reg);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	3308      	adds	r3, #8
 8003f16:	f107 020f 	add.w	r2, r7, #15
 8003f1a:	4611      	mov	r1, r2
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f000 fa25 	bl	800436c <lps22hh_temp_flag_data_ready_get>

	//if (reg.status.t_da) {
	if (reg) {
 8003f22:	7bfb      	ldrb	r3, [r7, #15]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d01a      	beq.n	8003f5e <_ZN7LPS22HH14getTemperatureEv+0x54>
	  memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	331c      	adds	r3, #28
 8003f2c:	2202      	movs	r2, #2
 8003f2e:	2100      	movs	r1, #0
 8003f30:	4618      	mov	r0, r3
 8003f32:	f00e fbd6 	bl	80126e2 <memset>
	  lps22hh_temperature_raw_get(&ctx, &data_raw_temperature);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f103 0208 	add.w	r2, r3, #8
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	331c      	adds	r3, #28
 8003f40:	4619      	mov	r1, r3
 8003f42:	4610      	mov	r0, r2
 8003f44:	f000 fa54 	bl	80043f0 <lps22hh_temperature_raw_get>
	  temperature_degC = lps22hh_from_lsb_to_celsius(data_raw_temperature);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f000 f97e 	bl	8004250 <lps22hh_from_lsb_to_celsius>
 8003f54:	eef0 7a40 	vmov.f32	s15, s0
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	edc3 7a01 	vstr	s15, [r3, #4]
	}
}
 8003f5e:	bf00      	nop
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <_ZN7LPS22HH5writeEPvhPKht>:



int32_t LPS22HH::write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b088      	sub	sp, #32
 8003f6a:	af04      	add	r7, sp, #16
 8003f6c:	60f8      	str	r0, [r7, #12]
 8003f6e:	607a      	str	r2, [r7, #4]
 8003f70:	461a      	mov	r2, r3
 8003f72:	460b      	mov	r3, r1
 8003f74:	72fb      	strb	r3, [r7, #11]
 8003f76:	4613      	mov	r3, r2
 8003f78:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write((I2C_HandleTypeDef*) handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8003f7a:	7afb      	ldrb	r3, [r7, #11]
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f82:	9302      	str	r3, [sp, #8]
 8003f84:	893b      	ldrh	r3, [r7, #8]
 8003f86:	9301      	str	r3, [sp, #4]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	9300      	str	r3, [sp, #0]
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	21d5      	movs	r1, #213	; 0xd5
 8003f90:	68f8      	ldr	r0, [r7, #12]
 8003f92:	f001 fe5d 	bl	8005c50 <HAL_I2C_Mem_Write>
  return 0;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3710      	adds	r7, #16
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <_ZN7LPS22HH4readEPvhPht>:

int32_t LPS22HH::read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b088      	sub	sp, #32
 8003fa4:	af04      	add	r7, sp, #16
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	607a      	str	r2, [r7, #4]
 8003faa:	461a      	mov	r2, r3
 8003fac:	460b      	mov	r3, r1
 8003fae:	72fb      	strb	r3, [r7, #11]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read((I2C_HandleTypeDef*) handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8003fb4:	7afb      	ldrb	r3, [r7, #11]
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fbc:	9302      	str	r3, [sp, #8]
 8003fbe:	893b      	ldrh	r3, [r7, #8]
 8003fc0:	9301      	str	r3, [sp, #4]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	9300      	str	r3, [sp, #0]
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	21d5      	movs	r1, #213	; 0xd5
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f001 ff3a 	bl	8005e44 <HAL_I2C_Mem_Read>
  return 0;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
	...

08003fdc <_Z27MRT_LSM6DSR_getAccelerationv>:
//Create c structs
struct HLSM6DSR hlsm6dsr;
struct HLPS22HH hlps22hh;


void MRT_LSM6DSR_getAcceleration(void){
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	af00      	add	r7, sp, #0
	lsm6dsr.getAcceleration();
 8003fe0:	4802      	ldr	r0, [pc, #8]	; (8003fec <_Z27MRT_LSM6DSR_getAccelerationv+0x10>)
 8003fe2:	f7ff fdeb 	bl	8003bbc <_ZN7LSM6DSR15getAccelerationEv>
}
 8003fe6:	bf00      	nop
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	200003c4 	.word	0x200003c4

08003ff0 <_Z26MRT_LSM6DSR_getAngularRatev>:
void MRT_LSM6DSR_getAngularRate(void){
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
	lsm6dsr.getAngularRate();
 8003ff4:	4802      	ldr	r0, [pc, #8]	; (8004000 <_Z26MRT_LSM6DSR_getAngularRatev+0x10>)
 8003ff6:	f7ff fe53 	bl	8003ca0 <_ZN7LSM6DSR14getAngularRateEv>
}
 8003ffa:	bf00      	nop
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	200003c4 	.word	0x200003c4

08004004 <_Z26MRT_LSM6DSR_getTemperaturev>:
void MRT_LSM6DSR_getTemperature(void){
 8004004:	b580      	push	{r7, lr}
 8004006:	af00      	add	r7, sp, #0
	lsm6dsr.getTemperature();
 8004008:	4802      	ldr	r0, [pc, #8]	; (8004014 <_Z26MRT_LSM6DSR_getTemperaturev+0x10>)
 800400a:	f7ff fe1b 	bl	8003c44 <_ZN7LSM6DSR14getTemperatureEv>
}
 800400e:	bf00      	nop
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	200003c4 	.word	0x200003c4

08004018 <MRT_LSM6DSR_Init>:

extern "C" HLSM6DSR MRT_LSM6DSR_Init(void){
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
	HLSM6DSR lsm6dsr_handler;
	lsm6dsr_handler.getAcceleration = &MRT_LSM6DSR_getAcceleration;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a12      	ldr	r2, [pc, #72]	; (800406c <MRT_LSM6DSR_Init+0x54>)
 8004024:	61da      	str	r2, [r3, #28]
	lsm6dsr_handler.getAngularRate = &MRT_LSM6DSR_getAngularRate;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a11      	ldr	r2, [pc, #68]	; (8004070 <MRT_LSM6DSR_Init+0x58>)
 800402a:	621a      	str	r2, [r3, #32]
	lsm6dsr_handler.getTemperature = &MRT_LSM6DSR_getTemperature;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a11      	ldr	r2, [pc, #68]	; (8004074 <MRT_LSM6DSR_Init+0x5c>)
 8004030:	625a      	str	r2, [r3, #36]	; 0x24

	lsm6dsr_handler.acceleration_mg[0] = &lsm6dsr.acceleration_mg[0];
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a10      	ldr	r2, [pc, #64]	; (8004078 <MRT_LSM6DSR_Init+0x60>)
 8004036:	601a      	str	r2, [r3, #0]
	lsm6dsr_handler.acceleration_mg[1] = &lsm6dsr.acceleration_mg[1];
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a10      	ldr	r2, [pc, #64]	; (800407c <MRT_LSM6DSR_Init+0x64>)
 800403c:	605a      	str	r2, [r3, #4]
	lsm6dsr_handler.acceleration_mg[2] = &lsm6dsr.acceleration_mg[2];
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a0f      	ldr	r2, [pc, #60]	; (8004080 <MRT_LSM6DSR_Init+0x68>)
 8004042:	609a      	str	r2, [r3, #8]

	lsm6dsr_handler.angular_rate_mdps[0] = &lsm6dsr.angular_rate_mdps[0];
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a0f      	ldr	r2, [pc, #60]	; (8004084 <MRT_LSM6DSR_Init+0x6c>)
 8004048:	60da      	str	r2, [r3, #12]
	lsm6dsr_handler.angular_rate_mdps[1] = &lsm6dsr.angular_rate_mdps[2];
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a0e      	ldr	r2, [pc, #56]	; (8004088 <MRT_LSM6DSR_Init+0x70>)
 800404e:	611a      	str	r2, [r3, #16]
	lsm6dsr_handler.angular_rate_mdps[2] = &lsm6dsr.angular_rate_mdps[3];
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a0e      	ldr	r2, [pc, #56]	; (800408c <MRT_LSM6DSR_Init+0x74>)
 8004054:	615a      	str	r2, [r3, #20]

	lsm6dsr_handler.temperature_degC = &lsm6dsr.temperature_degC;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a0c      	ldr	r2, [pc, #48]	; (800408c <MRT_LSM6DSR_Init+0x74>)
 800405a:	619a      	str	r2, [r3, #24]
	return lsm6dsr_handler;
 800405c:	bf00      	nop
}
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	08003fdd 	.word	0x08003fdd
 8004070:	08003ff1 	.word	0x08003ff1
 8004074:	08004005 	.word	0x08004005
 8004078:	200003c4 	.word	0x200003c4
 800407c:	200003c8 	.word	0x200003c8
 8004080:	200003cc 	.word	0x200003cc
 8004084:	200003d0 	.word	0x200003d0
 8004088:	200003d8 	.word	0x200003d8
 800408c:	200003dc 	.word	0x200003dc

08004090 <_Z23MRT_LPS22HH_getPressurev>:



void MRT_LPS22HH_getPressure(void){
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
	lps22hh.getPressure();
 8004094:	4802      	ldr	r0, [pc, #8]	; (80040a0 <_Z23MRT_LPS22HH_getPressurev+0x10>)
 8004096:	f7ff ff07 	bl	8003ea8 <_ZN7LPS22HH11getPressureEv>
}
 800409a:	bf00      	nop
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	200003fc 	.word	0x200003fc

080040a4 <_Z26MRT_LPS22HH_getTemperaturev>:
void MRT_LPS22HH_getTemperature(void){
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
	lps22hh.getTemperature();
 80040a8:	4802      	ldr	r0, [pc, #8]	; (80040b4 <_Z26MRT_LPS22HH_getTemperaturev+0x10>)
 80040aa:	f7ff ff2e 	bl	8003f0a <_ZN7LPS22HH14getTemperatureEv>
}
 80040ae:	bf00      	nop
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	200003fc 	.word	0x200003fc

080040b8 <MRT_LPS22HH_Init>:

extern "C" HLPS22HH MRT_LPS22HH_Init(void){
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
	HLPS22HH lps22hh_handler;
	lps22hh_handler.getPressure = &MRT_LPS22HH_getPressure;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a09      	ldr	r2, [pc, #36]	; (80040e8 <MRT_LPS22HH_Init+0x30>)
 80040c4:	609a      	str	r2, [r3, #8]
	lps22hh_handler.getTemperature = &MRT_LPS22HH_getTemperature;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a08      	ldr	r2, [pc, #32]	; (80040ec <MRT_LPS22HH_Init+0x34>)
 80040ca:	60da      	str	r2, [r3, #12]

	lps22hh_handler.pressure_hPa = &lps22hh.pressure_hPa;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a08      	ldr	r2, [pc, #32]	; (80040f0 <MRT_LPS22HH_Init+0x38>)
 80040d0:	601a      	str	r2, [r3, #0]
	lps22hh_handler.temperature_degC = &lps22hh.temperature_degC;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a07      	ldr	r2, [pc, #28]	; (80040f4 <MRT_LPS22HH_Init+0x3c>)
 80040d6:	605a      	str	r2, [r3, #4]
	return lps22hh_handler;
 80040d8:	bf00      	nop
}
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	08004091 	.word	0x08004091
 80040ec:	080040a5 	.word	0x080040a5
 80040f0:	200003fc 	.word	0x200003fc
 80040f4:	20000400 	.word	0x20000400

080040f8 <MRT_i2c_sensors_Init>:



extern "C" void MRT_i2c_sensors_Init(void){
 80040f8:	b5b0      	push	{r4, r5, r7, lr}
 80040fa:	b08a      	sub	sp, #40	; 0x28
 80040fc:	af00      	add	r7, sp, #0

	//LSM6DSR
	#if LSM6DSR_
	HAL_IWDG_Refresh(&hiwdg);
	hlsm6dsr = MRT_LSM6DSR_Init();
 80040fe:	4c0f      	ldr	r4, [pc, #60]	; (800413c <MRT_i2c_sensors_Init+0x44>)
 8004100:	463b      	mov	r3, r7
 8004102:	4618      	mov	r0, r3
 8004104:	f7ff ff88 	bl	8004018 <MRT_LSM6DSR_Init>
 8004108:	4625      	mov	r5, r4
 800410a:	463c      	mov	r4, r7
 800410c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800410e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004110:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004112:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004114:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004118:	e885 0003 	stmia.w	r5, {r0, r1}
	#endif

	//LPS22HH
	#if LPS22HH_
	HAL_IWDG_Refresh(&hiwdg);
	hlps22hh = MRT_LPS22HH_Init();
 800411c:	4c08      	ldr	r4, [pc, #32]	; (8004140 <MRT_i2c_sensors_Init+0x48>)
 800411e:	463b      	mov	r3, r7
 8004120:	4618      	mov	r0, r3
 8004122:	f7ff ffc9 	bl	80040b8 <MRT_LPS22HH_Init>
 8004126:	463b      	mov	r3, r7
 8004128:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800412a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	//GPS
	#if GPS_
	HAL_IWDG_Refresh(&hiwdg);
	//GPS_Init(&GPS_UART, &DEBUG_UART);TODO change to that?
	GPS_Init(&GPS_UART);
 800412e:	4805      	ldr	r0, [pc, #20]	; (8004144 <MRT_i2c_sensors_Init+0x4c>)
 8004130:	f000 f834 	bl	800419c <GPS_Init>
	#endif

}
 8004134:	bf00      	nop
 8004136:	3728      	adds	r7, #40	; 0x28
 8004138:	46bd      	mov	sp, r7
 800413a:	bdb0      	pop	{r4, r5, r7, pc}
 800413c:	2000041c 	.word	0x2000041c
 8004140:	20000444 	.word	0x20000444
 8004144:	20005308 	.word	0x20005308

08004148 <_Z41__static_initialization_and_destruction_0ii>:
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d10e      	bne.n	8004176 <_Z41__static_initialization_and_destruction_0ii+0x2e>
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800415e:	4293      	cmp	r3, r2
 8004160:	d109      	bne.n	8004176 <_Z41__static_initialization_and_destruction_0ii+0x2e>
LSM6DSR lsm6dsr = LSM6DSR(&LSM6DSR_I2C, (uint8_t) MRT_LSM6DSR_ADDRESS);
 8004162:	226a      	movs	r2, #106	; 0x6a
 8004164:	4906      	ldr	r1, [pc, #24]	; (8004180 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8004166:	4807      	ldr	r0, [pc, #28]	; (8004184 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8004168:	f7ff fc90 	bl	8003a8c <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh>
LPS22HH lps22hh = LPS22HH(&LPS22HH_I2C, (uint8_t) MRT_LPS22HH_ADDRESS);
 800416c:	22b3      	movs	r2, #179	; 0xb3
 800416e:	4904      	ldr	r1, [pc, #16]	; (8004180 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8004170:	4805      	ldr	r0, [pc, #20]	; (8004188 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004172:	f7ff fe13 	bl	8003d9c <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh>
}
 8004176:	bf00      	nop
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	20005020 	.word	0x20005020
 8004184:	200003c4 	.word	0x200003c4
 8004188:	200003fc 	.word	0x200003fc

0800418c <_GLOBAL__sub_I_GPS_USART>:
 800418c:	b580      	push	{r7, lr}
 800418e:	af00      	add	r7, sp, #0
 8004190:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004194:	2001      	movs	r0, #1
 8004196:	f7ff ffd7 	bl	8004148 <_Z41__static_initialization_and_destruction_0ii>
 800419a:	bd80      	pop	{r7, pc}

0800419c <GPS_Init>:
		}
	}
}


void GPS_Init(UART_HandleTypeDef* data_uart){
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
	GPS_USART = data_uart;
 80041a4:	4a04      	ldr	r2, [pc, #16]	; (80041b8 <GPS_Init+0x1c>)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6013      	str	r3, [r2, #0]
	print("GPS Init\r\n");
 80041aa:	4804      	ldr	r0, [pc, #16]	; (80041bc <GPS_Init+0x20>)
 80041ac:	f7fc ff4c 	bl	8001048 <print>
}
 80041b0:	bf00      	nop
 80041b2:	3708      	adds	r7, #8
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	200003c0 	.word	0x200003c0
 80041bc:	08017c40 	.word	0x08017c40

080041c0 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80041c0:	b590      	push	{r4, r7, lr}
 80041c2:	b087      	sub	sp, #28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	607a      	str	r2, [r7, #4]
 80041ca:	461a      	mov	r2, r3
 80041cc:	460b      	mov	r3, r1
 80041ce:	72fb      	strb	r3, [r7, #11]
 80041d0:	4613      	mov	r3, r2
 80041d2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	685c      	ldr	r4, [r3, #4]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6898      	ldr	r0, [r3, #8]
 80041dc:	893b      	ldrh	r3, [r7, #8]
 80041de:	7af9      	ldrb	r1, [r7, #11]
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	47a0      	blx	r4
 80041e4:	6178      	str	r0, [r7, #20]

  return ret;
 80041e6:	697b      	ldr	r3, [r7, #20]
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	371c      	adds	r7, #28
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd90      	pop	{r4, r7, pc}

080041f0 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80041f0:	b590      	push	{r4, r7, lr}
 80041f2:	b087      	sub	sp, #28
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	607a      	str	r2, [r7, #4]
 80041fa:	461a      	mov	r2, r3
 80041fc:	460b      	mov	r3, r1
 80041fe:	72fb      	strb	r3, [r7, #11]
 8004200:	4613      	mov	r3, r2
 8004202:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681c      	ldr	r4, [r3, #0]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6898      	ldr	r0, [r3, #8]
 800420c:	893b      	ldrh	r3, [r7, #8]
 800420e:	7af9      	ldrb	r1, [r7, #11]
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	47a0      	blx	r4
 8004214:	6178      	str	r0, [r7, #20]

  return ret;
 8004216:	697b      	ldr	r3, [r7, #20]
}
 8004218:	4618      	mov	r0, r3
 800421a:	371c      	adds	r7, #28
 800421c:	46bd      	mov	sp, r7
 800421e:	bd90      	pop	{r4, r7, pc}

08004220 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	ee07 3a90 	vmov	s15, r3
 800422e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004232:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800424c <lps22hh_from_lsb_to_hpa+0x2c>
 8004236:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800423a:	eef0 7a66 	vmov.f32	s15, s13
}
 800423e:	eeb0 0a67 	vmov.f32	s0, s15
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	49800000 	.word	0x49800000

08004250 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	4603      	mov	r3, r0
 8004258:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 800425a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800425e:	ee07 3a90 	vmov	s15, r3
 8004262:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004266:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004280 <lps22hh_from_lsb_to_celsius+0x30>
 800426a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800426e:	eef0 7a66 	vmov.f32	s15, s13
}
 8004272:	eeb0 0a67 	vmov.f32	s0, s15
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr
 8004280:	42c80000 	.word	0x42c80000

08004284 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	460b      	mov	r3, r1
 800428e:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8004290:	f107 0208 	add.w	r2, r7, #8
 8004294:	2301      	movs	r3, #1
 8004296:	2110      	movs	r1, #16
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f7ff ff91 	bl	80041c0 <lps22hh_read_reg>
 800429e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10f      	bne.n	80042c6 <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80042a6:	78fb      	ldrb	r3, [r7, #3]
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	b2da      	uxtb	r2, r3
 80042ae:	7a3b      	ldrb	r3, [r7, #8]
 80042b0:	f362 0341 	bfi	r3, r2, #1, #1
 80042b4:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80042b6:	f107 0208 	add.w	r2, r7, #8
 80042ba:	2301      	movs	r3, #1
 80042bc:	2110      	movs	r1, #16
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7ff ff96 	bl	80041f0 <lps22hh_write_reg>
 80042c4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80042c6:	68fb      	ldr	r3, [r7, #12]
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	460b      	mov	r3, r1
 80042da:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80042dc:	f107 0210 	add.w	r2, r7, #16
 80042e0:	2301      	movs	r3, #1
 80042e2:	2110      	movs	r1, #16
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f7ff ff6b 	bl	80041c0 <lps22hh_read_reg>
 80042ea:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d107      	bne.n	8004302 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80042f2:	f107 020c 	add.w	r2, r7, #12
 80042f6:	2301      	movs	r3, #1
 80042f8:	2111      	movs	r1, #17
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f7ff ff60 	bl	80041c0 <lps22hh_read_reg>
 8004300:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10f      	bne.n	8004328 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8004308:	78fb      	ldrb	r3, [r7, #3]
 800430a:	f003 0307 	and.w	r3, r3, #7
 800430e:	b2da      	uxtb	r2, r3
 8004310:	7c3b      	ldrb	r3, [r7, #16]
 8004312:	f362 1306 	bfi	r3, r2, #4, #3
 8004316:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8004318:	f107 0210 	add.w	r2, r7, #16
 800431c:	2301      	movs	r3, #1
 800431e:	2110      	movs	r1, #16
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f7ff ff65 	bl	80041f0 <lps22hh_write_reg>
 8004326:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d119      	bne.n	8004362 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 800432e:	78fb      	ldrb	r3, [r7, #3]
 8004330:	091b      	lsrs	r3, r3, #4
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	b2da      	uxtb	r2, r3
 8004338:	7b3b      	ldrb	r3, [r7, #12]
 800433a:	f362 0341 	bfi	r3, r2, #1, #1
 800433e:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8004340:	78fb      	ldrb	r3, [r7, #3]
 8004342:	08db      	lsrs	r3, r3, #3
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	b2da      	uxtb	r2, r3
 800434a:	7b3b      	ldrb	r3, [r7, #12]
 800434c:	f362 0300 	bfi	r3, r2, #0, #1
 8004350:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8004352:	f107 020c 	add.w	r2, r7, #12
 8004356:	2301      	movs	r3, #1
 8004358:	2111      	movs	r1, #17
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f7ff ff48 	bl	80041f0 <lps22hh_write_reg>
 8004360:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8004362:	697b      	ldr	r3, [r7, #20]
}
 8004364:	4618      	mov	r0, r3
 8004366:	3718      	adds	r7, #24
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <lps22hh_temp_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 8004376:	f107 0208 	add.w	r2, r7, #8
 800437a:	2301      	movs	r3, #1
 800437c:	2127      	movs	r1, #39	; 0x27
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f7ff ff1e 	bl	80041c0 <lps22hh_read_reg>
 8004384:	60f8      	str	r0, [r7, #12]
  *val = reg.t_da;
 8004386:	7a3b      	ldrb	r3, [r7, #8]
 8004388:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800438c:	b2db      	uxtb	r3, r3
 800438e:	461a      	mov	r2, r3
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	701a      	strb	r2, [r3, #0]

  return ret;
 8004394:	68fb      	ldr	r3, [r7, #12]
}
 8004396:	4618      	mov	r0, r3
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 800439e:	b580      	push	{r7, lr}
 80043a0:	b084      	sub	sp, #16
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
 80043a6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 80043a8:	f107 0208 	add.w	r2, r7, #8
 80043ac:	2303      	movs	r3, #3
 80043ae:	2128      	movs	r1, #40	; 0x28
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f7ff ff05 	bl	80041c0 <lps22hh_read_reg>
 80043b6:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 80043b8:	7abb      	ldrb	r3, [r7, #10]
 80043ba:	461a      	mov	r2, r3
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	021b      	lsls	r3, r3, #8
 80043c6:	7a7a      	ldrb	r2, [r7, #9]
 80043c8:	441a      	add	r2, r3
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	021b      	lsls	r3, r3, #8
 80043d4:	7a3a      	ldrb	r2, [r7, #8]
 80043d6:	441a      	add	r2, r3
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	021a      	lsls	r2, r3, #8
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	601a      	str	r2, [r3, #0]

  return ret;
 80043e6:	68fb      	ldr	r3, [r7, #12]
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 80043fa:	f107 0208 	add.w	r2, r7, #8
 80043fe:	2302      	movs	r3, #2
 8004400:	212b      	movs	r1, #43	; 0x2b
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f7ff fedc 	bl	80041c0 <lps22hh_read_reg>
 8004408:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 800440a:	7a7b      	ldrb	r3, [r7, #9]
 800440c:	b21a      	sxth	r2, r3
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004418:	b29b      	uxth	r3, r3
 800441a:	021b      	lsls	r3, r3, #8
 800441c:	b29a      	uxth	r2, r3
 800441e:	7a3b      	ldrb	r3, [r7, #8]
 8004420:	b29b      	uxth	r3, r3
 8004422:	4413      	add	r3, r2
 8004424:	b29b      	uxth	r3, r3
 8004426:	b21a      	sxth	r2, r3
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	801a      	strh	r2, [r3, #0]

  return ret;
 800442c:	68fb      	ldr	r3, [r7, #12]
}
 800442e:	4618      	mov	r0, r3
 8004430:	3710      	adds	r7, #16
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b084      	sub	sp, #16
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
 800443e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8004440:	2301      	movs	r3, #1
 8004442:	683a      	ldr	r2, [r7, #0]
 8004444:	210f      	movs	r1, #15
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7ff feba 	bl	80041c0 <lps22hh_read_reg>
 800444c:	60f8      	str	r0, [r7, #12]

  return ret;
 800444e:	68fb      	ldr	r3, [r7, #12]
}
 8004450:	4618      	mov	r0, r3
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	460b      	mov	r3, r1
 8004462:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8004464:	f107 0208 	add.w	r2, r7, #8
 8004468:	2301      	movs	r3, #1
 800446a:	2111      	movs	r1, #17
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f7ff fea7 	bl	80041c0 <lps22hh_read_reg>
 8004472:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10f      	bne.n	800449a <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 800447a:	78fb      	ldrb	r3, [r7, #3]
 800447c:	f003 0301 	and.w	r3, r3, #1
 8004480:	b2da      	uxtb	r2, r3
 8004482:	7a3b      	ldrb	r3, [r7, #8]
 8004484:	f362 0382 	bfi	r3, r2, #2, #1
 8004488:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 800448a:	f107 0208 	add.w	r2, r7, #8
 800448e:	2301      	movs	r3, #1
 8004490:	2111      	movs	r1, #17
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7ff feac 	bl	80041f0 <lps22hh_write_reg>
 8004498:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800449a:	68fb      	ldr	r3, [r7, #12]
}
 800449c:	4618      	mov	r0, r3
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80044ae:	f107 0208 	add.w	r2, r7, #8
 80044b2:	2301      	movs	r3, #1
 80044b4:	2111      	movs	r1, #17
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7ff fe82 	bl	80041c0 <lps22hh_read_reg>
 80044bc:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 80044be:	7a3b      	ldrb	r3, [r7, #8]
 80044c0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	461a      	mov	r2, r3
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	701a      	strb	r2, [r3, #0]

  return ret;
 80044cc:	68fb      	ldr	r3, [r7, #12]
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3710      	adds	r7, #16
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <lsm6dsr_read_reg>:
  *
  */
int32_t lsm6dsr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80044d6:	b590      	push	{r4, r7, lr}
 80044d8:	b087      	sub	sp, #28
 80044da:	af00      	add	r7, sp, #0
 80044dc:	60f8      	str	r0, [r7, #12]
 80044de:	607a      	str	r2, [r7, #4]
 80044e0:	461a      	mov	r2, r3
 80044e2:	460b      	mov	r3, r1
 80044e4:	72fb      	strb	r3, [r7, #11]
 80044e6:	4613      	mov	r3, r2
 80044e8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	685c      	ldr	r4, [r3, #4]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6898      	ldr	r0, [r3, #8]
 80044f2:	893b      	ldrh	r3, [r7, #8]
 80044f4:	7af9      	ldrb	r1, [r7, #11]
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	47a0      	blx	r4
 80044fa:	6178      	str	r0, [r7, #20]

  return ret;
 80044fc:	697b      	ldr	r3, [r7, #20]
}
 80044fe:	4618      	mov	r0, r3
 8004500:	371c      	adds	r7, #28
 8004502:	46bd      	mov	sp, r7
 8004504:	bd90      	pop	{r4, r7, pc}

08004506 <lsm6dsr_write_reg>:
  *
  */
int32_t lsm6dsr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004506:	b590      	push	{r4, r7, lr}
 8004508:	b087      	sub	sp, #28
 800450a:	af00      	add	r7, sp, #0
 800450c:	60f8      	str	r0, [r7, #12]
 800450e:	607a      	str	r2, [r7, #4]
 8004510:	461a      	mov	r2, r3
 8004512:	460b      	mov	r3, r1
 8004514:	72fb      	strb	r3, [r7, #11]
 8004516:	4613      	mov	r3, r2
 8004518:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681c      	ldr	r4, [r3, #0]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6898      	ldr	r0, [r3, #8]
 8004522:	893b      	ldrh	r3, [r7, #8]
 8004524:	7af9      	ldrb	r1, [r7, #11]
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	47a0      	blx	r4
 800452a:	6178      	str	r0, [r7, #20]

  return ret;
 800452c:	697b      	ldr	r3, [r7, #20]
}
 800452e:	4618      	mov	r0, r3
 8004530:	371c      	adds	r7, #28
 8004532:	46bd      	mov	sp, r7
 8004534:	bd90      	pop	{r4, r7, pc}
	...

08004538 <lsm6dsr_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsr_from_fs2g_to_mg(int16_t lsb)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	4603      	mov	r3, r0
 8004540:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 8004542:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004546:	ee07 3a90 	vmov	s15, r3
 800454a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800454e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004564 <lsm6dsr_from_fs2g_to_mg+0x2c>
 8004552:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8004556:	eeb0 0a67 	vmov.f32	s0, s15
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr
 8004564:	3d79db23 	.word	0x3d79db23

08004568 <lsm6dsr_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsr_from_fs2000dps_to_mdps(int16_t lsb)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	4603      	mov	r3, r0
 8004570:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 8004572:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004576:	ee07 3a90 	vmov	s15, r3
 800457a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800457e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004594 <lsm6dsr_from_fs2000dps_to_mdps+0x2c>
 8004582:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8004586:	eeb0 0a67 	vmov.f32	s0, s15
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr
 8004594:	428c0000 	.word	0x428c0000

08004598 <lsm6dsr_from_lsb_to_celsius>:
{
  return ((float_t)lsb * 140.0f);
}

float_t lsm6dsr_from_lsb_to_celsius(int16_t lsb)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	4603      	mov	r3, r0
 80045a0:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 80045a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045a6:	ee07 3a90 	vmov	s15, r3
 80045aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045ae:	eddf 6a07 	vldr	s13, [pc, #28]	; 80045cc <lsm6dsr_from_lsb_to_celsius+0x34>
 80045b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80045b6:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80045ba:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 80045be:	eeb0 0a67 	vmov.f32	s0, s15
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr
 80045cc:	43800000 	.word	0x43800000

080045d0 <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	460b      	mov	r3, r1
 80045da:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80045dc:	f107 0208 	add.w	r2, r7, #8
 80045e0:	2301      	movs	r3, #1
 80045e2:	2110      	movs	r1, #16
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f7ff ff76 	bl	80044d6 <lsm6dsr_read_reg>
 80045ea:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10f      	bne.n	8004612 <lsm6dsr_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 80045f2:	78fb      	ldrb	r3, [r7, #3]
 80045f4:	f003 0303 	and.w	r3, r3, #3
 80045f8:	b2da      	uxtb	r2, r3
 80045fa:	7a3b      	ldrb	r3, [r7, #8]
 80045fc:	f362 0383 	bfi	r3, r2, #2, #2
 8004600:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8004602:	f107 0208 	add.w	r2, r7, #8
 8004606:	2301      	movs	r3, #1
 8004608:	2110      	movs	r1, #16
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7ff ff7b 	bl	8004506 <lsm6dsr_write_reg>
 8004610:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8004612:	68fb      	ldr	r3, [r7, #12]
}
 8004614:	4618      	mov	r0, r3
 8004616:	3710      	adds	r7, #16
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	460b      	mov	r3, r1
 8004626:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_xl_t odr_xl =  val;
 8004628:	78fb      	ldrb	r3, [r7, #3]
 800462a:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 800462c:	f107 030c 	add.w	r3, r7, #12
 8004630:	4619      	mov	r1, r3
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 fbb0 	bl	8004d98 <lsm6dsr_fsm_enable_get>
 8004638:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	2b00      	cmp	r3, #0
 800463e:	f040 80c4 	bne.w	80047ca <lsm6dsr_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004642:	7b3b      	ldrb	r3, [r7, #12]
 8004644:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004648:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800464a:	7b3b      	ldrb	r3, [r7, #12]
 800464c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004650:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004652:	4313      	orrs	r3, r2
 8004654:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8004656:	7b3b      	ldrb	r3, [r7, #12]
 8004658:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800465c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800465e:	4313      	orrs	r3, r2
 8004660:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8004662:	7b3b      	ldrb	r3, [r7, #12]
 8004664:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004668:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800466a:	4313      	orrs	r3, r2
 800466c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800466e:	7b3b      	ldrb	r3, [r7, #12]
 8004670:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004674:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8004676:	4313      	orrs	r3, r2
 8004678:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800467a:	7b3b      	ldrb	r3, [r7, #12]
 800467c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004680:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8004682:	4313      	orrs	r3, r2
 8004684:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8004686:	7b3b      	ldrb	r3, [r7, #12]
 8004688:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800468c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800468e:	4313      	orrs	r3, r2
 8004690:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8004692:	7b3b      	ldrb	r3, [r7, #12]
 8004694:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004698:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800469a:	4313      	orrs	r3, r2
 800469c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800469e:	7b7b      	ldrb	r3, [r7, #13]
 80046a0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80046a4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80046a6:	4313      	orrs	r3, r2
 80046a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80046aa:	7b7b      	ldrb	r3, [r7, #13]
 80046ac:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80046b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80046b2:	4313      	orrs	r3, r2
 80046b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80046b6:	7b7b      	ldrb	r3, [r7, #13]
 80046b8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80046bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80046be:	4313      	orrs	r3, r2
 80046c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80046c2:	7b7b      	ldrb	r3, [r7, #13]
 80046c4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80046c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80046ca:	4313      	orrs	r3, r2
 80046cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80046ce:	7b7b      	ldrb	r3, [r7, #13]
 80046d0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80046d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80046d6:	4313      	orrs	r3, r2
 80046d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80046da:	7b7b      	ldrb	r3, [r7, #13]
 80046dc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80046e0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80046e2:	4313      	orrs	r3, r2
 80046e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80046e6:	7b7b      	ldrb	r3, [r7, #13]
 80046e8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80046ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80046ee:	4313      	orrs	r3, r2
 80046f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80046f2:	7b7b      	ldrb	r3, [r7, #13]
 80046f4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80046f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80046fa:	4313      	orrs	r3, r2
 80046fc:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d163      	bne.n	80047ca <lsm6dsr_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8004702:	f107 030b 	add.w	r3, r7, #11
 8004706:	4619      	mov	r1, r3
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 fb71 	bl	8004df0 <lsm6dsr_fsm_data_rate_get>
 800470e:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d159      	bne.n	80047ca <lsm6dsr_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8004716:	7afb      	ldrb	r3, [r7, #11]
 8004718:	2b03      	cmp	r3, #3
 800471a:	d853      	bhi.n	80047c4 <lsm6dsr_xl_data_rate_set+0x1a8>
 800471c:	a201      	add	r2, pc, #4	; (adr r2, 8004724 <lsm6dsr_xl_data_rate_set+0x108>)
 800471e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004722:	bf00      	nop
 8004724:	08004735 	.word	0x08004735
 8004728:	08004747 	.word	0x08004747
 800472c:	08004765 	.word	0x08004765
 8004730:	0800478f 	.word	0x0800478f
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF)
 8004734:	78fb      	ldrb	r3, [r7, #3]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d102      	bne.n	8004740 <lsm6dsr_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 800473a:	2301      	movs	r3, #1
 800473c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800473e:	e045      	b.n	80047cc <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8004740:	78fb      	ldrb	r3, [r7, #3]
 8004742:	75fb      	strb	r3, [r7, #23]
            break;
 8004744:	e042      	b.n	80047cc <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8004746:	78fb      	ldrb	r3, [r7, #3]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d102      	bne.n	8004752 <lsm6dsr_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 800474c:	2302      	movs	r3, #2
 800474e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004750:	e03c      	b.n	80047cc <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8004752:	78fb      	ldrb	r3, [r7, #3]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d102      	bne.n	800475e <lsm6dsr_xl_data_rate_set+0x142>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8004758:	2302      	movs	r3, #2
 800475a:	75fb      	strb	r3, [r7, #23]
            break;
 800475c:	e036      	b.n	80047cc <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800475e:	78fb      	ldrb	r3, [r7, #3]
 8004760:	75fb      	strb	r3, [r7, #23]
            break;
 8004762:	e033      	b.n	80047cc <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8004764:	78fb      	ldrb	r3, [r7, #3]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d102      	bne.n	8004770 <lsm6dsr_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 800476a:	2303      	movs	r3, #3
 800476c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800476e:	e02d      	b.n	80047cc <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8004770:	78fb      	ldrb	r3, [r7, #3]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d102      	bne.n	800477c <lsm6dsr_xl_data_rate_set+0x160>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8004776:	2303      	movs	r3, #3
 8004778:	75fb      	strb	r3, [r7, #23]
            break;
 800477a:	e027      	b.n	80047cc <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 800477c:	78fb      	ldrb	r3, [r7, #3]
 800477e:	2b02      	cmp	r3, #2
 8004780:	d102      	bne.n	8004788 <lsm6dsr_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8004782:	2303      	movs	r3, #3
 8004784:	75fb      	strb	r3, [r7, #23]
            break;
 8004786:	e021      	b.n	80047cc <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8004788:	78fb      	ldrb	r3, [r7, #3]
 800478a:	75fb      	strb	r3, [r7, #23]
            break;
 800478c:	e01e      	b.n	80047cc <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 800478e:	78fb      	ldrb	r3, [r7, #3]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d102      	bne.n	800479a <lsm6dsr_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8004794:	2304      	movs	r3, #4
 8004796:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004798:	e018      	b.n	80047cc <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 800479a:	78fb      	ldrb	r3, [r7, #3]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d102      	bne.n	80047a6 <lsm6dsr_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80047a0:	2304      	movs	r3, #4
 80047a2:	75fb      	strb	r3, [r7, #23]
            break;
 80047a4:	e012      	b.n	80047cc <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 80047a6:	78fb      	ldrb	r3, [r7, #3]
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d102      	bne.n	80047b2 <lsm6dsr_xl_data_rate_set+0x196>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80047ac:	2304      	movs	r3, #4
 80047ae:	75fb      	strb	r3, [r7, #23]
            break;
 80047b0:	e00c      	b.n	80047cc <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_52Hz)
 80047b2:	78fb      	ldrb	r3, [r7, #3]
 80047b4:	2b03      	cmp	r3, #3
 80047b6:	d102      	bne.n	80047be <lsm6dsr_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80047b8:	2304      	movs	r3, #4
 80047ba:	75fb      	strb	r3, [r7, #23]
            break;
 80047bc:	e006      	b.n	80047cc <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80047be:	78fb      	ldrb	r3, [r7, #3]
 80047c0:	75fb      	strb	r3, [r7, #23]
            break;
 80047c2:	e003      	b.n	80047cc <lsm6dsr_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 80047c4:	78fb      	ldrb	r3, [r7, #3]
 80047c6:	75fb      	strb	r3, [r7, #23]
            break;
 80047c8:	e000      	b.n	80047cc <lsm6dsr_xl_data_rate_set+0x1b0>
        }
      }
 80047ca:	bf00      	nop
    }
  }

  if (ret == 0)
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d107      	bne.n	80047e2 <lsm6dsr_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80047d2:	f107 0208 	add.w	r2, r7, #8
 80047d6:	2301      	movs	r3, #1
 80047d8:	2110      	movs	r1, #16
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f7ff fe7b 	bl	80044d6 <lsm6dsr_read_reg>
 80047e0:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d10f      	bne.n	8004808 <lsm6dsr_xl_data_rate_set+0x1ec>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 80047e8:	7dfb      	ldrb	r3, [r7, #23]
 80047ea:	f003 030f 	and.w	r3, r3, #15
 80047ee:	b2da      	uxtb	r2, r3
 80047f0:	7a3b      	ldrb	r3, [r7, #8]
 80047f2:	f362 1307 	bfi	r3, r2, #4, #4
 80047f6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 80047f8:	f107 0208 	add.w	r2, r7, #8
 80047fc:	2301      	movs	r3, #1
 80047fe:	2110      	movs	r1, #16
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f7ff fe80 	bl	8004506 <lsm6dsr_write_reg>
 8004806:	6138      	str	r0, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8004808:	693b      	ldr	r3, [r7, #16]
}
 800480a:	4618      	mov	r0, r3
 800480c:	3718      	adds	r7, #24
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop

08004814 <lsm6dsr_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t val)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	460b      	mov	r3, r1
 800481e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004820:	f107 0208 	add.w	r2, r7, #8
 8004824:	2301      	movs	r3, #1
 8004826:	2111      	movs	r1, #17
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f7ff fe54 	bl	80044d6 <lsm6dsr_read_reg>
 800482e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10f      	bne.n	8004856 <lsm6dsr_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 8004836:	78fb      	ldrb	r3, [r7, #3]
 8004838:	f003 030f 	and.w	r3, r3, #15
 800483c:	b2da      	uxtb	r2, r3
 800483e:	7a3b      	ldrb	r3, [r7, #8]
 8004840:	f362 0303 	bfi	r3, r2, #0, #4
 8004844:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004846:	f107 0208 	add.w	r2, r7, #8
 800484a:	2301      	movs	r3, #1
 800484c:	2111      	movs	r1, #17
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f7ff fe59 	bl	8004506 <lsm6dsr_write_reg>
 8004854:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004856:	68fb      	ldr	r3, [r7, #12]
}
 8004858:	4618      	mov	r0, r3
 800485a:	3710      	adds	r7, #16
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b086      	sub	sp, #24
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	460b      	mov	r3, r1
 800486a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_g_t odr_gy =  val;
 800486c:	78fb      	ldrb	r3, [r7, #3]
 800486e:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8004870:	f107 030c 	add.w	r3, r7, #12
 8004874:	4619      	mov	r1, r3
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 fa8e 	bl	8004d98 <lsm6dsr_fsm_enable_get>
 800487c:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	2b00      	cmp	r3, #0
 8004882:	f040 80c4 	bne.w	8004a0e <lsm6dsr_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004886:	7b3b      	ldrb	r3, [r7, #12]
 8004888:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800488c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800488e:	7b3b      	ldrb	r3, [r7, #12]
 8004890:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004894:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004896:	4313      	orrs	r3, r2
 8004898:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800489a:	7b3b      	ldrb	r3, [r7, #12]
 800489c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80048a0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80048a2:	4313      	orrs	r3, r2
 80048a4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80048a6:	7b3b      	ldrb	r3, [r7, #12]
 80048a8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80048ac:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80048ae:	4313      	orrs	r3, r2
 80048b0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80048b2:	7b3b      	ldrb	r3, [r7, #12]
 80048b4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80048b8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80048ba:	4313      	orrs	r3, r2
 80048bc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80048be:	7b3b      	ldrb	r3, [r7, #12]
 80048c0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80048c4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80048c6:	4313      	orrs	r3, r2
 80048c8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80048ca:	7b3b      	ldrb	r3, [r7, #12]
 80048cc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80048d0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80048d2:	4313      	orrs	r3, r2
 80048d4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80048d6:	7b3b      	ldrb	r3, [r7, #12]
 80048d8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80048dc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80048de:	4313      	orrs	r3, r2
 80048e0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80048e2:	7b7b      	ldrb	r3, [r7, #13]
 80048e4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80048e8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80048ea:	4313      	orrs	r3, r2
 80048ec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80048ee:	7b7b      	ldrb	r3, [r7, #13]
 80048f0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80048f4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80048f6:	4313      	orrs	r3, r2
 80048f8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80048fa:	7b7b      	ldrb	r3, [r7, #13]
 80048fc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004900:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8004902:	4313      	orrs	r3, r2
 8004904:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8004906:	7b7b      	ldrb	r3, [r7, #13]
 8004908:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800490c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800490e:	4313      	orrs	r3, r2
 8004910:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8004912:	7b7b      	ldrb	r3, [r7, #13]
 8004914:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004918:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800491a:	4313      	orrs	r3, r2
 800491c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800491e:	7b7b      	ldrb	r3, [r7, #13]
 8004920:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004924:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8004926:	4313      	orrs	r3, r2
 8004928:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800492a:	7b7b      	ldrb	r3, [r7, #13]
 800492c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004930:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8004932:	4313      	orrs	r3, r2
 8004934:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8004936:	7b7b      	ldrb	r3, [r7, #13]
 8004938:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800493c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800493e:	4313      	orrs	r3, r2
 8004940:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004942:	2b01      	cmp	r3, #1
 8004944:	d163      	bne.n	8004a0e <lsm6dsr_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8004946:	f107 030b 	add.w	r3, r7, #11
 800494a:	4619      	mov	r1, r3
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 fa4f 	bl	8004df0 <lsm6dsr_fsm_data_rate_get>
 8004952:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d159      	bne.n	8004a0e <lsm6dsr_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 800495a:	7afb      	ldrb	r3, [r7, #11]
 800495c:	2b03      	cmp	r3, #3
 800495e:	d853      	bhi.n	8004a08 <lsm6dsr_gy_data_rate_set+0x1a8>
 8004960:	a201      	add	r2, pc, #4	; (adr r2, 8004968 <lsm6dsr_gy_data_rate_set+0x108>)
 8004962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004966:	bf00      	nop
 8004968:	08004979 	.word	0x08004979
 800496c:	0800498b 	.word	0x0800498b
 8004970:	080049a9 	.word	0x080049a9
 8004974:	080049d3 	.word	0x080049d3
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF)
 8004978:	78fb      	ldrb	r3, [r7, #3]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d102      	bne.n	8004984 <lsm6dsr_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 800497e:	2301      	movs	r3, #1
 8004980:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8004982:	e045      	b.n	8004a10 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8004984:	78fb      	ldrb	r3, [r7, #3]
 8004986:	75fb      	strb	r3, [r7, #23]
            break;
 8004988:	e042      	b.n	8004a10 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 800498a:	78fb      	ldrb	r3, [r7, #3]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d102      	bne.n	8004996 <lsm6dsr_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8004990:	2302      	movs	r3, #2
 8004992:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8004994:	e03c      	b.n	8004a10 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8004996:	78fb      	ldrb	r3, [r7, #3]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d102      	bne.n	80049a2 <lsm6dsr_gy_data_rate_set+0x142>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 800499c:	2302      	movs	r3, #2
 800499e:	75fb      	strb	r3, [r7, #23]
            break;
 80049a0:	e036      	b.n	8004a10 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80049a2:	78fb      	ldrb	r3, [r7, #3]
 80049a4:	75fb      	strb	r3, [r7, #23]
            break;
 80049a6:	e033      	b.n	8004a10 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 80049a8:	78fb      	ldrb	r3, [r7, #3]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d102      	bne.n	80049b4 <lsm6dsr_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 80049ae:	2303      	movs	r3, #3
 80049b0:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80049b2:	e02d      	b.n	8004a10 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 80049b4:	78fb      	ldrb	r3, [r7, #3]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d102      	bne.n	80049c0 <lsm6dsr_gy_data_rate_set+0x160>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 80049ba:	2303      	movs	r3, #3
 80049bc:	75fb      	strb	r3, [r7, #23]
            break;
 80049be:	e027      	b.n	8004a10 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 80049c0:	78fb      	ldrb	r3, [r7, #3]
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d102      	bne.n	80049cc <lsm6dsr_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 80049c6:	2303      	movs	r3, #3
 80049c8:	75fb      	strb	r3, [r7, #23]
            break;
 80049ca:	e021      	b.n	8004a10 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80049cc:	78fb      	ldrb	r3, [r7, #3]
 80049ce:	75fb      	strb	r3, [r7, #23]
            break;
 80049d0:	e01e      	b.n	8004a10 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 80049d2:	78fb      	ldrb	r3, [r7, #3]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d102      	bne.n	80049de <lsm6dsr_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80049d8:	2304      	movs	r3, #4
 80049da:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80049dc:	e018      	b.n	8004a10 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 80049de:	78fb      	ldrb	r3, [r7, #3]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d102      	bne.n	80049ea <lsm6dsr_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80049e4:	2304      	movs	r3, #4
 80049e6:	75fb      	strb	r3, [r7, #23]
            break;
 80049e8:	e012      	b.n	8004a10 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 80049ea:	78fb      	ldrb	r3, [r7, #3]
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d102      	bne.n	80049f6 <lsm6dsr_gy_data_rate_set+0x196>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80049f0:	2304      	movs	r3, #4
 80049f2:	75fb      	strb	r3, [r7, #23]
            break;
 80049f4:	e00c      	b.n	8004a10 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_52Hz)
 80049f6:	78fb      	ldrb	r3, [r7, #3]
 80049f8:	2b03      	cmp	r3, #3
 80049fa:	d102      	bne.n	8004a02 <lsm6dsr_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80049fc:	2304      	movs	r3, #4
 80049fe:	75fb      	strb	r3, [r7, #23]
            break;
 8004a00:	e006      	b.n	8004a10 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8004a02:	78fb      	ldrb	r3, [r7, #3]
 8004a04:	75fb      	strb	r3, [r7, #23]
            break;
 8004a06:	e003      	b.n	8004a10 <lsm6dsr_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8004a08:	78fb      	ldrb	r3, [r7, #3]
 8004a0a:	75fb      	strb	r3, [r7, #23]
            break;
 8004a0c:	e000      	b.n	8004a10 <lsm6dsr_gy_data_rate_set+0x1b0>
        }
      }
 8004a0e:	bf00      	nop
    }
  }

  if (ret == 0)
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d107      	bne.n	8004a26 <lsm6dsr_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004a16:	f107 0208 	add.w	r2, r7, #8
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	2111      	movs	r1, #17
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f7ff fd59 	bl	80044d6 <lsm6dsr_read_reg>
 8004a24:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10f      	bne.n	8004a4c <lsm6dsr_gy_data_rate_set+0x1ec>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8004a2c:	7dfb      	ldrb	r3, [r7, #23]
 8004a2e:	f003 030f 	and.w	r3, r3, #15
 8004a32:	b2da      	uxtb	r2, r3
 8004a34:	7a3b      	ldrb	r3, [r7, #8]
 8004a36:	f362 1307 	bfi	r3, r2, #4, #4
 8004a3a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004a3c:	f107 0208 	add.w	r2, r7, #8
 8004a40:	2301      	movs	r3, #1
 8004a42:	2111      	movs	r1, #17
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f7ff fd5e 	bl	8004506 <lsm6dsr_write_reg>
 8004a4a:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8004a4c:	693b      	ldr	r3, [r7, #16]
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3718      	adds	r7, #24
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop

08004a58 <lsm6dsr_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	460b      	mov	r3, r1
 8004a62:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8004a64:	f107 0208 	add.w	r2, r7, #8
 8004a68:	2301      	movs	r3, #1
 8004a6a:	2112      	movs	r1, #18
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f7ff fd32 	bl	80044d6 <lsm6dsr_read_reg>
 8004a72:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10f      	bne.n	8004a9a <lsm6dsr_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 8004a7a:	78fb      	ldrb	r3, [r7, #3]
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	b2da      	uxtb	r2, r3
 8004a82:	7a3b      	ldrb	r3, [r7, #8]
 8004a84:	f362 1386 	bfi	r3, r2, #6, #1
 8004a88:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8004a8a:	f107 0208 	add.w	r2, r7, #8
 8004a8e:	2301      	movs	r3, #1
 8004a90:	2112      	movs	r1, #18
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7ff fd37 	bl	8004506 <lsm6dsr_write_reg>
 8004a98:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3710      	adds	r7, #16
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <lsm6dsr_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8004aae:	f107 0208 	add.w	r2, r7, #8
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	211e      	movs	r1, #30
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f7ff fd0d 	bl	80044d6 <lsm6dsr_read_reg>
 8004abc:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 8004abe:	7a3b      	ldrb	r3, [r7, #8]
 8004ac0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	701a      	strb	r2, [r3, #0]

  return ret;
 8004acc:	68fb      	ldr	r3, [r7, #12]
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <lsm6dsr_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b084      	sub	sp, #16
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
 8004ade:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8004ae0:	f107 0208 	add.w	r2, r7, #8
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	211e      	movs	r1, #30
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f7ff fcf4 	bl	80044d6 <lsm6dsr_read_reg>
 8004aee:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 8004af0:	7a3b      	ldrb	r3, [r7, #8]
 8004af2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	461a      	mov	r2, r3
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	701a      	strb	r2, [r3, #0]

  return ret;
 8004afe:	68fb      	ldr	r3, [r7, #12]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3710      	adds	r7, #16
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <lsm6dsr_temp_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8004b12:	f107 0208 	add.w	r2, r7, #8
 8004b16:	2301      	movs	r3, #1
 8004b18:	211e      	movs	r1, #30
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f7ff fcdb 	bl	80044d6 <lsm6dsr_read_reg>
 8004b20:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.tda;
 8004b22:	7a3b      	ldrb	r3, [r7, #8]
 8004b24:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	701a      	strb	r2, [r3, #0]

  return ret;
 8004b30:	68fb      	ldr	r3, [r7, #12]
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <lsm6dsr_temperature_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b084      	sub	sp, #16
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
 8004b42:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUT_TEMP_L, buff, 2);
 8004b44:	f107 0208 	add.w	r2, r7, #8
 8004b48:	2302      	movs	r3, #2
 8004b4a:	2120      	movs	r1, #32
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f7ff fcc2 	bl	80044d6 <lsm6dsr_read_reg>
 8004b52:	60f8      	str	r0, [r7, #12]
  val[0] = (int16_t)buff[1];
 8004b54:	7a7b      	ldrb	r3, [r7, #9]
 8004b56:	b21a      	sxth	r2, r3
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	021b      	lsls	r3, r3, #8
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	7a3b      	ldrb	r3, [r7, #8]
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	4413      	add	r3, r2
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	b21a      	sxth	r2, r3
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	801a      	strh	r2, [r3, #0]

  return ret;
 8004b76:	68fb      	ldr	r3, [r7, #12]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <lsm6dsr_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b086      	sub	sp, #24
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_G, buff, 6);
 8004b8a:	f107 020c 	add.w	r2, r7, #12
 8004b8e:	2306      	movs	r3, #6
 8004b90:	2122      	movs	r1, #34	; 0x22
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7ff fc9f 	bl	80044d6 <lsm6dsr_read_reg>
 8004b98:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004b9a:	7b7b      	ldrb	r3, [r7, #13]
 8004b9c:	b21a      	sxth	r2, r3
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	021b      	lsls	r3, r3, #8
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	7b3b      	ldrb	r3, [r7, #12]
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	4413      	add	r3, r2
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	b21a      	sxth	r2, r3
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004bbc:	7bfa      	ldrb	r2, [r7, #15]
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	3302      	adds	r3, #2
 8004bc2:	b212      	sxth	r2, r2
 8004bc4:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	3302      	adds	r3, #2
 8004bca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	021b      	lsls	r3, r3, #8
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	7bbb      	ldrb	r3, [r7, #14]
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	4413      	add	r3, r2
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	3302      	adds	r3, #2
 8004be0:	b212      	sxth	r2, r2
 8004be2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004be4:	7c7a      	ldrb	r2, [r7, #17]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	3304      	adds	r3, #4
 8004bea:	b212      	sxth	r2, r2
 8004bec:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	3304      	adds	r3, #4
 8004bf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	021b      	lsls	r3, r3, #8
 8004bfa:	b29a      	uxth	r2, r3
 8004bfc:	7c3b      	ldrb	r3, [r7, #16]
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	4413      	add	r3, r2
 8004c02:	b29a      	uxth	r2, r3
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	3304      	adds	r3, #4
 8004c08:	b212      	sxth	r2, r2
 8004c0a:	801a      	strh	r2, [r3, #0]

  return ret;
 8004c0c:	697b      	ldr	r3, [r7, #20]
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3718      	adds	r7, #24
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <lsm6dsr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b086      	sub	sp, #24
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
 8004c1e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_A, buff, 6);
 8004c20:	f107 020c 	add.w	r2, r7, #12
 8004c24:	2306      	movs	r3, #6
 8004c26:	2128      	movs	r1, #40	; 0x28
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f7ff fc54 	bl	80044d6 <lsm6dsr_read_reg>
 8004c2e:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004c30:	7b7b      	ldrb	r3, [r7, #13]
 8004c32:	b21a      	sxth	r2, r3
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	021b      	lsls	r3, r3, #8
 8004c42:	b29a      	uxth	r2, r3
 8004c44:	7b3b      	ldrb	r3, [r7, #12]
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	4413      	add	r3, r2
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	b21a      	sxth	r2, r3
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004c52:	7bfa      	ldrb	r2, [r7, #15]
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	3302      	adds	r3, #2
 8004c58:	b212      	sxth	r2, r2
 8004c5a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	3302      	adds	r3, #2
 8004c60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	021b      	lsls	r3, r3, #8
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	7bbb      	ldrb	r3, [r7, #14]
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	4413      	add	r3, r2
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	3302      	adds	r3, #2
 8004c76:	b212      	sxth	r2, r2
 8004c78:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004c7a:	7c7a      	ldrb	r2, [r7, #17]
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	3304      	adds	r3, #4
 8004c80:	b212      	sxth	r2, r2
 8004c82:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	3304      	adds	r3, #4
 8004c88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	021b      	lsls	r3, r3, #8
 8004c90:	b29a      	uxth	r2, r3
 8004c92:	7c3b      	ldrb	r3, [r7, #16]
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	4413      	add	r3, r2
 8004c98:	b29a      	uxth	r2, r3
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	3304      	adds	r3, #4
 8004c9e:	b212      	sxth	r2, r2
 8004ca0:	801a      	strh	r2, [r3, #0]

  return ret;
 8004ca2:	697b      	ldr	r3, [r7, #20]
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3718      	adds	r7, #24
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8004cb8:	f107 0208 	add.w	r2, r7, #8
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	2101      	movs	r1, #1
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f7ff fc08 	bl	80044d6 <lsm6dsr_read_reg>
 8004cc6:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10f      	bne.n	8004cee <lsm6dsr_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 8004cce:	78fb      	ldrb	r3, [r7, #3]
 8004cd0:	f003 0303 	and.w	r3, r3, #3
 8004cd4:	b2da      	uxtb	r2, r3
 8004cd6:	7a3b      	ldrb	r3, [r7, #8]
 8004cd8:	f362 1387 	bfi	r3, r2, #6, #2
 8004cdc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8004cde:	f107 0208 	add.w	r2, r7, #8
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	2101      	movs	r1, #1
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f7ff fc0d 	bl	8004506 <lsm6dsr_write_reg>
 8004cec:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 8004cee:	68fb      	ldr	r3, [r7, #12]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 8004d02:	2301      	movs	r3, #1
 8004d04:	683a      	ldr	r2, [r7, #0]
 8004d06:	210f      	movs	r1, #15
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f7ff fbe4 	bl	80044d6 <lsm6dsr_read_reg>
 8004d0e:	60f8      	str	r0, [r7, #12]

  return ret;
 8004d10:	68fb      	ldr	r3, [r7, #12]
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <lsm6dsr_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b084      	sub	sp, #16
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
 8004d22:	460b      	mov	r3, r1
 8004d24:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8004d26:	f107 0208 	add.w	r2, r7, #8
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	2112      	movs	r1, #18
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f7ff fbd1 	bl	80044d6 <lsm6dsr_read_reg>
 8004d34:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d10f      	bne.n	8004d5c <lsm6dsr_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 8004d3c:	78fb      	ldrb	r3, [r7, #3]
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	b2da      	uxtb	r2, r3
 8004d44:	7a3b      	ldrb	r3, [r7, #8]
 8004d46:	f362 0300 	bfi	r3, r2, #0, #1
 8004d4a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8004d4c:	f107 0208 	add.w	r2, r7, #8
 8004d50:	2301      	movs	r3, #1
 8004d52:	2112      	movs	r1, #18
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f7ff fbd6 	bl	8004506 <lsm6dsr_write_reg>
 8004d5a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <lsm6dsr_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b084      	sub	sp, #16
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
 8004d6e:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8004d70:	f107 0208 	add.w	r2, r7, #8
 8004d74:	2301      	movs	r3, #1
 8004d76:	2112      	movs	r1, #18
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f7ff fbac 	bl	80044d6 <lsm6dsr_read_reg>
 8004d7e:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 8004d80:	7a3b      	ldrb	r3, [r7, #8]
 8004d82:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	461a      	mov	r2, r3
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	701a      	strb	r2, [r3, #0]

  return ret;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3710      	adds	r7, #16
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8004da2:	2102      	movs	r1, #2
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f7ff ff81 	bl	8004cac <lsm6dsr_mem_bank_set>
 8004daa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d106      	bne.n	8004dc0 <lsm6dsr_fsm_enable_get+0x28>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 8004db2:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 8004db4:	2301      	movs	r3, #1
 8004db6:	2146      	movs	r1, #70	; 0x46
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f7ff fb8c 	bl	80044d6 <lsm6dsr_read_reg>
 8004dbe:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d107      	bne.n	8004dd6 <lsm6dsr_fsm_enable_get+0x3e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 8004dca:	2301      	movs	r3, #1
 8004dcc:	2147      	movs	r1, #71	; 0x47
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7ff fb81 	bl	80044d6 <lsm6dsr_read_reg>
 8004dd4:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d104      	bne.n	8004de6 <lsm6dsr_fsm_enable_get+0x4e>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8004ddc:	2100      	movs	r1, #0
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f7ff ff64 	bl	8004cac <lsm6dsr_mem_bank_set>
 8004de4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004de6:	68fb      	ldr	r3, [r7, #12]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3710      	adds	r7, #16
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8004dfa:	2102      	movs	r1, #2
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f7ff ff55 	bl	8004cac <lsm6dsr_mem_bank_set>
 8004e02:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d107      	bne.n	8004e1a <lsm6dsr_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 8004e0a:	f107 0208 	add.w	r2, r7, #8
 8004e0e:	2301      	movs	r3, #1
 8004e10:	215f      	movs	r1, #95	; 0x5f
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f7ff fb5f 	bl	80044d6 <lsm6dsr_read_reg>
 8004e18:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d104      	bne.n	8004e2a <lsm6dsr_fsm_data_rate_get+0x3a>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8004e20:	2100      	movs	r1, #0
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f7ff ff42 	bl	8004cac <lsm6dsr_mem_bank_set>
 8004e28:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 8004e2a:	7a3b      	ldrb	r3, [r7, #8]
 8004e2c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b03      	cmp	r3, #3
 8004e34:	d81a      	bhi.n	8004e6c <lsm6dsr_fsm_data_rate_get+0x7c>
 8004e36:	a201      	add	r2, pc, #4	; (adr r2, 8004e3c <lsm6dsr_fsm_data_rate_get+0x4c>)
 8004e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e3c:	08004e4d 	.word	0x08004e4d
 8004e40:	08004e55 	.word	0x08004e55
 8004e44:	08004e5d 	.word	0x08004e5d
 8004e48:	08004e65 	.word	0x08004e65
  {
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	701a      	strb	r2, [r3, #0]
      break;
 8004e52:	e00f      	b.n	8004e74 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	2201      	movs	r2, #1
 8004e58:	701a      	strb	r2, [r3, #0]
      break;
 8004e5a:	e00b      	b.n	8004e74 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	2202      	movs	r2, #2
 8004e60:	701a      	strb	r2, [r3, #0]
      break;
 8004e62:	e007      	b.n	8004e74 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	2203      	movs	r2, #3
 8004e68:	701a      	strb	r2, [r3, #0]
      break;
 8004e6a:	e003      	b.n	8004e74 <lsm6dsr_fsm_data_rate_get+0x84>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	701a      	strb	r2, [r3, #0]
      break;
 8004e72:	bf00      	nop
  }

  return ret;
 8004e74:	68fb      	ldr	r3, [r7, #12]
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3710      	adds	r7, #16
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop

08004e80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004e84:	4b0e      	ldr	r3, [pc, #56]	; (8004ec0 <HAL_Init+0x40>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a0d      	ldr	r2, [pc, #52]	; (8004ec0 <HAL_Init+0x40>)
 8004e8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004e90:	4b0b      	ldr	r3, [pc, #44]	; (8004ec0 <HAL_Init+0x40>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a0a      	ldr	r2, [pc, #40]	; (8004ec0 <HAL_Init+0x40>)
 8004e96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e9c:	4b08      	ldr	r3, [pc, #32]	; (8004ec0 <HAL_Init+0x40>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a07      	ldr	r2, [pc, #28]	; (8004ec0 <HAL_Init+0x40>)
 8004ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ea6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ea8:	2003      	movs	r0, #3
 8004eaa:	f000 fb6e 	bl	800558a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004eae:	2000      	movs	r0, #0
 8004eb0:	f7fd f8be 	bl	8002030 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004eb4:	f7fd f890 	bl	8001fd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	40023c00 	.word	0x40023c00

08004ec4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ec8:	4b06      	ldr	r3, [pc, #24]	; (8004ee4 <HAL_IncTick+0x20>)
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	461a      	mov	r2, r3
 8004ece:	4b06      	ldr	r3, [pc, #24]	; (8004ee8 <HAL_IncTick+0x24>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	4a04      	ldr	r2, [pc, #16]	; (8004ee8 <HAL_IncTick+0x24>)
 8004ed6:	6013      	str	r3, [r2, #0]
}
 8004ed8:	bf00      	nop
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	20000064 	.word	0x20000064
 8004ee8:	20005fc0 	.word	0x20005fc0

08004eec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004eec:	b480      	push	{r7}
 8004eee:	af00      	add	r7, sp, #0
  return uwTick;
 8004ef0:	4b03      	ldr	r3, [pc, #12]	; (8004f00 <HAL_GetTick+0x14>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	20005fc0 	.word	0x20005fc0

08004f04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004f0c:	f7ff ffee 	bl	8004eec <HAL_GetTick>
 8004f10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f1c:	d005      	beq.n	8004f2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004f1e:	4b0a      	ldr	r3, [pc, #40]	; (8004f48 <HAL_Delay+0x44>)
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	461a      	mov	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	4413      	add	r3, r2
 8004f28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004f2a:	bf00      	nop
 8004f2c:	f7ff ffde 	bl	8004eec <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d8f7      	bhi.n	8004f2c <HAL_Delay+0x28>
  {
  }
}
 8004f3c:	bf00      	nop
 8004f3e:	bf00      	nop
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	20000064 	.word	0x20000064

08004f4c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f54:	2300      	movs	r3, #0
 8004f56:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d101      	bne.n	8004f62 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e033      	b.n	8004fca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d109      	bne.n	8004f7e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f7fc fa6e 	bl	800144c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f82:	f003 0310 	and.w	r3, r3, #16
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d118      	bne.n	8004fbc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004f92:	f023 0302 	bic.w	r3, r3, #2
 8004f96:	f043 0202 	orr.w	r2, r3, #2
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 f94a 	bl	8005238 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fae:	f023 0303 	bic.w	r3, r3, #3
 8004fb2:	f043 0201 	orr.w	r2, r3, #1
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	641a      	str	r2, [r3, #64]	; 0x40
 8004fba:	e001      	b.n	8004fc0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
	...

08004fd4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d101      	bne.n	8004ff0 <HAL_ADC_ConfigChannel+0x1c>
 8004fec:	2302      	movs	r3, #2
 8004fee:	e113      	b.n	8005218 <HAL_ADC_ConfigChannel+0x244>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2b09      	cmp	r3, #9
 8004ffe:	d925      	bls.n	800504c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68d9      	ldr	r1, [r3, #12]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	b29b      	uxth	r3, r3
 800500c:	461a      	mov	r2, r3
 800500e:	4613      	mov	r3, r2
 8005010:	005b      	lsls	r3, r3, #1
 8005012:	4413      	add	r3, r2
 8005014:	3b1e      	subs	r3, #30
 8005016:	2207      	movs	r2, #7
 8005018:	fa02 f303 	lsl.w	r3, r2, r3
 800501c:	43da      	mvns	r2, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	400a      	ands	r2, r1
 8005024:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68d9      	ldr	r1, [r3, #12]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	689a      	ldr	r2, [r3, #8]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	b29b      	uxth	r3, r3
 8005036:	4618      	mov	r0, r3
 8005038:	4603      	mov	r3, r0
 800503a:	005b      	lsls	r3, r3, #1
 800503c:	4403      	add	r3, r0
 800503e:	3b1e      	subs	r3, #30
 8005040:	409a      	lsls	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	430a      	orrs	r2, r1
 8005048:	60da      	str	r2, [r3, #12]
 800504a:	e022      	b.n	8005092 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6919      	ldr	r1, [r3, #16]
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	b29b      	uxth	r3, r3
 8005058:	461a      	mov	r2, r3
 800505a:	4613      	mov	r3, r2
 800505c:	005b      	lsls	r3, r3, #1
 800505e:	4413      	add	r3, r2
 8005060:	2207      	movs	r2, #7
 8005062:	fa02 f303 	lsl.w	r3, r2, r3
 8005066:	43da      	mvns	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	400a      	ands	r2, r1
 800506e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6919      	ldr	r1, [r3, #16]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	689a      	ldr	r2, [r3, #8]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	b29b      	uxth	r3, r3
 8005080:	4618      	mov	r0, r3
 8005082:	4603      	mov	r3, r0
 8005084:	005b      	lsls	r3, r3, #1
 8005086:	4403      	add	r3, r0
 8005088:	409a      	lsls	r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	430a      	orrs	r2, r1
 8005090:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	2b06      	cmp	r3, #6
 8005098:	d824      	bhi.n	80050e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	4613      	mov	r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	4413      	add	r3, r2
 80050aa:	3b05      	subs	r3, #5
 80050ac:	221f      	movs	r2, #31
 80050ae:	fa02 f303 	lsl.w	r3, r2, r3
 80050b2:	43da      	mvns	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	400a      	ands	r2, r1
 80050ba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	4618      	mov	r0, r3
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	685a      	ldr	r2, [r3, #4]
 80050ce:	4613      	mov	r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	4413      	add	r3, r2
 80050d4:	3b05      	subs	r3, #5
 80050d6:	fa00 f203 	lsl.w	r2, r0, r3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	430a      	orrs	r2, r1
 80050e0:	635a      	str	r2, [r3, #52]	; 0x34
 80050e2:	e04c      	b.n	800517e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	2b0c      	cmp	r3, #12
 80050ea:	d824      	bhi.n	8005136 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	685a      	ldr	r2, [r3, #4]
 80050f6:	4613      	mov	r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	4413      	add	r3, r2
 80050fc:	3b23      	subs	r3, #35	; 0x23
 80050fe:	221f      	movs	r2, #31
 8005100:	fa02 f303 	lsl.w	r3, r2, r3
 8005104:	43da      	mvns	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	400a      	ands	r2, r1
 800510c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	b29b      	uxth	r3, r3
 800511a:	4618      	mov	r0, r3
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	4613      	mov	r3, r2
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	4413      	add	r3, r2
 8005126:	3b23      	subs	r3, #35	; 0x23
 8005128:	fa00 f203 	lsl.w	r2, r0, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	430a      	orrs	r2, r1
 8005132:	631a      	str	r2, [r3, #48]	; 0x30
 8005134:	e023      	b.n	800517e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	685a      	ldr	r2, [r3, #4]
 8005140:	4613      	mov	r3, r2
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	4413      	add	r3, r2
 8005146:	3b41      	subs	r3, #65	; 0x41
 8005148:	221f      	movs	r2, #31
 800514a:	fa02 f303 	lsl.w	r3, r2, r3
 800514e:	43da      	mvns	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	400a      	ands	r2, r1
 8005156:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	b29b      	uxth	r3, r3
 8005164:	4618      	mov	r0, r3
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	4613      	mov	r3, r2
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	4413      	add	r3, r2
 8005170:	3b41      	subs	r3, #65	; 0x41
 8005172:	fa00 f203 	lsl.w	r2, r0, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	430a      	orrs	r2, r1
 800517c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800517e:	4b29      	ldr	r3, [pc, #164]	; (8005224 <HAL_ADC_ConfigChannel+0x250>)
 8005180:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a28      	ldr	r2, [pc, #160]	; (8005228 <HAL_ADC_ConfigChannel+0x254>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d10f      	bne.n	80051ac <HAL_ADC_ConfigChannel+0x1d8>
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2b12      	cmp	r3, #18
 8005192:	d10b      	bne.n	80051ac <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a1d      	ldr	r2, [pc, #116]	; (8005228 <HAL_ADC_ConfigChannel+0x254>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d12b      	bne.n	800520e <HAL_ADC_ConfigChannel+0x23a>
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a1c      	ldr	r2, [pc, #112]	; (800522c <HAL_ADC_ConfigChannel+0x258>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d003      	beq.n	80051c8 <HAL_ADC_ConfigChannel+0x1f4>
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2b11      	cmp	r3, #17
 80051c6:	d122      	bne.n	800520e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a11      	ldr	r2, [pc, #68]	; (800522c <HAL_ADC_ConfigChannel+0x258>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d111      	bne.n	800520e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80051ea:	4b11      	ldr	r3, [pc, #68]	; (8005230 <HAL_ADC_ConfigChannel+0x25c>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a11      	ldr	r2, [pc, #68]	; (8005234 <HAL_ADC_ConfigChannel+0x260>)
 80051f0:	fba2 2303 	umull	r2, r3, r2, r3
 80051f4:	0c9a      	lsrs	r2, r3, #18
 80051f6:	4613      	mov	r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	4413      	add	r3, r2
 80051fc:	005b      	lsls	r3, r3, #1
 80051fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005200:	e002      	b.n	8005208 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	3b01      	subs	r3, #1
 8005206:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1f9      	bne.n	8005202 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3714      	adds	r7, #20
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr
 8005224:	40012300 	.word	0x40012300
 8005228:	40012000 	.word	0x40012000
 800522c:	10000012 	.word	0x10000012
 8005230:	20000000 	.word	0x20000000
 8005234:	431bde83 	.word	0x431bde83

08005238 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005240:	4b79      	ldr	r3, [pc, #484]	; (8005428 <ADC_Init+0x1f0>)
 8005242:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	685a      	ldr	r2, [r3, #4]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	431a      	orrs	r2, r3
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	685a      	ldr	r2, [r3, #4]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800526c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	6859      	ldr	r1, [r3, #4]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	021a      	lsls	r2, r3, #8
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	430a      	orrs	r2, r1
 8005280:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	685a      	ldr	r2, [r3, #4]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005290:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	6859      	ldr	r1, [r3, #4]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	689a      	ldr	r2, [r3, #8]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	430a      	orrs	r2, r1
 80052a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	689a      	ldr	r2, [r3, #8]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	6899      	ldr	r1, [r3, #8]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	68da      	ldr	r2, [r3, #12]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	430a      	orrs	r2, r1
 80052c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ca:	4a58      	ldr	r2, [pc, #352]	; (800542c <ADC_Init+0x1f4>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d022      	beq.n	8005316 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689a      	ldr	r2, [r3, #8]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80052de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	6899      	ldr	r1, [r3, #8]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	430a      	orrs	r2, r1
 80052f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	689a      	ldr	r2, [r3, #8]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005300:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	6899      	ldr	r1, [r3, #8]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	430a      	orrs	r2, r1
 8005312:	609a      	str	r2, [r3, #8]
 8005314:	e00f      	b.n	8005336 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	689a      	ldr	r2, [r3, #8]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005324:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	689a      	ldr	r2, [r3, #8]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005334:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	689a      	ldr	r2, [r3, #8]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f022 0202 	bic.w	r2, r2, #2
 8005344:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	6899      	ldr	r1, [r3, #8]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	7e1b      	ldrb	r3, [r3, #24]
 8005350:	005a      	lsls	r2, r3, #1
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	430a      	orrs	r2, r1
 8005358:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d01b      	beq.n	800539c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	685a      	ldr	r2, [r3, #4]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005372:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	685a      	ldr	r2, [r3, #4]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005382:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	6859      	ldr	r1, [r3, #4]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538e:	3b01      	subs	r3, #1
 8005390:	035a      	lsls	r2, r3, #13
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	430a      	orrs	r2, r1
 8005398:	605a      	str	r2, [r3, #4]
 800539a:	e007      	b.n	80053ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	685a      	ldr	r2, [r3, #4]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80053ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	69db      	ldr	r3, [r3, #28]
 80053c6:	3b01      	subs	r3, #1
 80053c8:	051a      	lsls	r2, r3, #20
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	430a      	orrs	r2, r1
 80053d0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	689a      	ldr	r2, [r3, #8]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80053e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	6899      	ldr	r1, [r3, #8]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80053ee:	025a      	lsls	r2, r3, #9
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	430a      	orrs	r2, r1
 80053f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	689a      	ldr	r2, [r3, #8]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005406:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6899      	ldr	r1, [r3, #8]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	029a      	lsls	r2, r3, #10
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	430a      	orrs	r2, r1
 800541a:	609a      	str	r2, [r3, #8]
}
 800541c:	bf00      	nop
 800541e:	3714      	adds	r7, #20
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr
 8005428:	40012300 	.word	0x40012300
 800542c:	0f000001 	.word	0x0f000001

08005430 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f003 0307 	and.w	r3, r3, #7
 800543e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005440:	4b0c      	ldr	r3, [pc, #48]	; (8005474 <__NVIC_SetPriorityGrouping+0x44>)
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800544c:	4013      	ands	r3, r2
 800544e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005458:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800545c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005460:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005462:	4a04      	ldr	r2, [pc, #16]	; (8005474 <__NVIC_SetPriorityGrouping+0x44>)
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	60d3      	str	r3, [r2, #12]
}
 8005468:	bf00      	nop
 800546a:	3714      	adds	r7, #20
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr
 8005474:	e000ed00 	.word	0xe000ed00

08005478 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005478:	b480      	push	{r7}
 800547a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800547c:	4b04      	ldr	r3, [pc, #16]	; (8005490 <__NVIC_GetPriorityGrouping+0x18>)
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	0a1b      	lsrs	r3, r3, #8
 8005482:	f003 0307 	and.w	r3, r3, #7
}
 8005486:	4618      	mov	r0, r3
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr
 8005490:	e000ed00 	.word	0xe000ed00

08005494 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	4603      	mov	r3, r0
 800549c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800549e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	db0b      	blt.n	80054be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054a6:	79fb      	ldrb	r3, [r7, #7]
 80054a8:	f003 021f 	and.w	r2, r3, #31
 80054ac:	4907      	ldr	r1, [pc, #28]	; (80054cc <__NVIC_EnableIRQ+0x38>)
 80054ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054b2:	095b      	lsrs	r3, r3, #5
 80054b4:	2001      	movs	r0, #1
 80054b6:	fa00 f202 	lsl.w	r2, r0, r2
 80054ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80054be:	bf00      	nop
 80054c0:	370c      	adds	r7, #12
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	e000e100 	.word	0xe000e100

080054d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	4603      	mov	r3, r0
 80054d8:	6039      	str	r1, [r7, #0]
 80054da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	db0a      	blt.n	80054fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	b2da      	uxtb	r2, r3
 80054e8:	490c      	ldr	r1, [pc, #48]	; (800551c <__NVIC_SetPriority+0x4c>)
 80054ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054ee:	0112      	lsls	r2, r2, #4
 80054f0:	b2d2      	uxtb	r2, r2
 80054f2:	440b      	add	r3, r1
 80054f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80054f8:	e00a      	b.n	8005510 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	b2da      	uxtb	r2, r3
 80054fe:	4908      	ldr	r1, [pc, #32]	; (8005520 <__NVIC_SetPriority+0x50>)
 8005500:	79fb      	ldrb	r3, [r7, #7]
 8005502:	f003 030f 	and.w	r3, r3, #15
 8005506:	3b04      	subs	r3, #4
 8005508:	0112      	lsls	r2, r2, #4
 800550a:	b2d2      	uxtb	r2, r2
 800550c:	440b      	add	r3, r1
 800550e:	761a      	strb	r2, [r3, #24]
}
 8005510:	bf00      	nop
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr
 800551c:	e000e100 	.word	0xe000e100
 8005520:	e000ed00 	.word	0xe000ed00

08005524 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005524:	b480      	push	{r7}
 8005526:	b089      	sub	sp, #36	; 0x24
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f003 0307 	and.w	r3, r3, #7
 8005536:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	f1c3 0307 	rsb	r3, r3, #7
 800553e:	2b04      	cmp	r3, #4
 8005540:	bf28      	it	cs
 8005542:	2304      	movcs	r3, #4
 8005544:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	3304      	adds	r3, #4
 800554a:	2b06      	cmp	r3, #6
 800554c:	d902      	bls.n	8005554 <NVIC_EncodePriority+0x30>
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	3b03      	subs	r3, #3
 8005552:	e000      	b.n	8005556 <NVIC_EncodePriority+0x32>
 8005554:	2300      	movs	r3, #0
 8005556:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005558:	f04f 32ff 	mov.w	r2, #4294967295
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	fa02 f303 	lsl.w	r3, r2, r3
 8005562:	43da      	mvns	r2, r3
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	401a      	ands	r2, r3
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800556c:	f04f 31ff 	mov.w	r1, #4294967295
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	fa01 f303 	lsl.w	r3, r1, r3
 8005576:	43d9      	mvns	r1, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800557c:	4313      	orrs	r3, r2
         );
}
 800557e:	4618      	mov	r0, r3
 8005580:	3724      	adds	r7, #36	; 0x24
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr

0800558a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b082      	sub	sp, #8
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f7ff ff4c 	bl	8005430 <__NVIC_SetPriorityGrouping>
}
 8005598:	bf00      	nop
 800559a:	3708      	adds	r7, #8
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b086      	sub	sp, #24
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	4603      	mov	r3, r0
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]
 80055ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80055ae:	2300      	movs	r3, #0
 80055b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80055b2:	f7ff ff61 	bl	8005478 <__NVIC_GetPriorityGrouping>
 80055b6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	68b9      	ldr	r1, [r7, #8]
 80055bc:	6978      	ldr	r0, [r7, #20]
 80055be:	f7ff ffb1 	bl	8005524 <NVIC_EncodePriority>
 80055c2:	4602      	mov	r2, r0
 80055c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055c8:	4611      	mov	r1, r2
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7ff ff80 	bl	80054d0 <__NVIC_SetPriority>
}
 80055d0:	bf00      	nop
 80055d2:	3718      	adds	r7, #24
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	4603      	mov	r3, r0
 80055e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055e6:	4618      	mov	r0, r3
 80055e8:	f7ff ff54 	bl	8005494 <__NVIC_EnableIRQ>
}
 80055ec:	bf00      	nop
 80055ee:	3708      	adds	r7, #8
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b089      	sub	sp, #36	; 0x24
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80055fe:	2300      	movs	r3, #0
 8005600:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005602:	2300      	movs	r3, #0
 8005604:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005606:	2300      	movs	r3, #0
 8005608:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800560a:	2300      	movs	r3, #0
 800560c:	61fb      	str	r3, [r7, #28]
 800560e:	e177      	b.n	8005900 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005610:	2201      	movs	r2, #1
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	fa02 f303 	lsl.w	r3, r2, r3
 8005618:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	4013      	ands	r3, r2
 8005622:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	429a      	cmp	r2, r3
 800562a:	f040 8166 	bne.w	80058fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	f003 0303 	and.w	r3, r3, #3
 8005636:	2b01      	cmp	r3, #1
 8005638:	d005      	beq.n	8005646 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005642:	2b02      	cmp	r3, #2
 8005644:	d130      	bne.n	80056a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	005b      	lsls	r3, r3, #1
 8005650:	2203      	movs	r2, #3
 8005652:	fa02 f303 	lsl.w	r3, r2, r3
 8005656:	43db      	mvns	r3, r3
 8005658:	69ba      	ldr	r2, [r7, #24]
 800565a:	4013      	ands	r3, r2
 800565c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	68da      	ldr	r2, [r3, #12]
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	005b      	lsls	r3, r3, #1
 8005666:	fa02 f303 	lsl.w	r3, r2, r3
 800566a:	69ba      	ldr	r2, [r7, #24]
 800566c:	4313      	orrs	r3, r2
 800566e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	69ba      	ldr	r2, [r7, #24]
 8005674:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800567c:	2201      	movs	r2, #1
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	fa02 f303 	lsl.w	r3, r2, r3
 8005684:	43db      	mvns	r3, r3
 8005686:	69ba      	ldr	r2, [r7, #24]
 8005688:	4013      	ands	r3, r2
 800568a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	091b      	lsrs	r3, r3, #4
 8005692:	f003 0201 	and.w	r2, r3, #1
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	fa02 f303 	lsl.w	r3, r2, r3
 800569c:	69ba      	ldr	r2, [r7, #24]
 800569e:	4313      	orrs	r3, r2
 80056a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	69ba      	ldr	r2, [r7, #24]
 80056a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	f003 0303 	and.w	r3, r3, #3
 80056b0:	2b03      	cmp	r3, #3
 80056b2:	d017      	beq.n	80056e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	005b      	lsls	r3, r3, #1
 80056be:	2203      	movs	r2, #3
 80056c0:	fa02 f303 	lsl.w	r3, r2, r3
 80056c4:	43db      	mvns	r3, r3
 80056c6:	69ba      	ldr	r2, [r7, #24]
 80056c8:	4013      	ands	r3, r2
 80056ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	689a      	ldr	r2, [r3, #8]
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	005b      	lsls	r3, r3, #1
 80056d4:	fa02 f303 	lsl.w	r3, r2, r3
 80056d8:	69ba      	ldr	r2, [r7, #24]
 80056da:	4313      	orrs	r3, r2
 80056dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	69ba      	ldr	r2, [r7, #24]
 80056e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	f003 0303 	and.w	r3, r3, #3
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d123      	bne.n	8005738 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	08da      	lsrs	r2, r3, #3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	3208      	adds	r2, #8
 80056f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	f003 0307 	and.w	r3, r3, #7
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	220f      	movs	r2, #15
 8005708:	fa02 f303 	lsl.w	r3, r2, r3
 800570c:	43db      	mvns	r3, r3
 800570e:	69ba      	ldr	r2, [r7, #24]
 8005710:	4013      	ands	r3, r2
 8005712:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	691a      	ldr	r2, [r3, #16]
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	f003 0307 	and.w	r3, r3, #7
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	fa02 f303 	lsl.w	r3, r2, r3
 8005724:	69ba      	ldr	r2, [r7, #24]
 8005726:	4313      	orrs	r3, r2
 8005728:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	08da      	lsrs	r2, r3, #3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	3208      	adds	r2, #8
 8005732:	69b9      	ldr	r1, [r7, #24]
 8005734:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	005b      	lsls	r3, r3, #1
 8005742:	2203      	movs	r2, #3
 8005744:	fa02 f303 	lsl.w	r3, r2, r3
 8005748:	43db      	mvns	r3, r3
 800574a:	69ba      	ldr	r2, [r7, #24]
 800574c:	4013      	ands	r3, r2
 800574e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f003 0203 	and.w	r2, r3, #3
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	005b      	lsls	r3, r3, #1
 800575c:	fa02 f303 	lsl.w	r3, r2, r3
 8005760:	69ba      	ldr	r2, [r7, #24]
 8005762:	4313      	orrs	r3, r2
 8005764:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	69ba      	ldr	r2, [r7, #24]
 800576a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005774:	2b00      	cmp	r3, #0
 8005776:	f000 80c0 	beq.w	80058fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800577a:	2300      	movs	r3, #0
 800577c:	60fb      	str	r3, [r7, #12]
 800577e:	4b66      	ldr	r3, [pc, #408]	; (8005918 <HAL_GPIO_Init+0x324>)
 8005780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005782:	4a65      	ldr	r2, [pc, #404]	; (8005918 <HAL_GPIO_Init+0x324>)
 8005784:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005788:	6453      	str	r3, [r2, #68]	; 0x44
 800578a:	4b63      	ldr	r3, [pc, #396]	; (8005918 <HAL_GPIO_Init+0x324>)
 800578c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800578e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005792:	60fb      	str	r3, [r7, #12]
 8005794:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005796:	4a61      	ldr	r2, [pc, #388]	; (800591c <HAL_GPIO_Init+0x328>)
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	089b      	lsrs	r3, r3, #2
 800579c:	3302      	adds	r3, #2
 800579e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	f003 0303 	and.w	r3, r3, #3
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	220f      	movs	r2, #15
 80057ae:	fa02 f303 	lsl.w	r3, r2, r3
 80057b2:	43db      	mvns	r3, r3
 80057b4:	69ba      	ldr	r2, [r7, #24]
 80057b6:	4013      	ands	r3, r2
 80057b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a58      	ldr	r2, [pc, #352]	; (8005920 <HAL_GPIO_Init+0x32c>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d037      	beq.n	8005832 <HAL_GPIO_Init+0x23e>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a57      	ldr	r2, [pc, #348]	; (8005924 <HAL_GPIO_Init+0x330>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d031      	beq.n	800582e <HAL_GPIO_Init+0x23a>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a56      	ldr	r2, [pc, #344]	; (8005928 <HAL_GPIO_Init+0x334>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d02b      	beq.n	800582a <HAL_GPIO_Init+0x236>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a55      	ldr	r2, [pc, #340]	; (800592c <HAL_GPIO_Init+0x338>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d025      	beq.n	8005826 <HAL_GPIO_Init+0x232>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a54      	ldr	r2, [pc, #336]	; (8005930 <HAL_GPIO_Init+0x33c>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d01f      	beq.n	8005822 <HAL_GPIO_Init+0x22e>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a53      	ldr	r2, [pc, #332]	; (8005934 <HAL_GPIO_Init+0x340>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d019      	beq.n	800581e <HAL_GPIO_Init+0x22a>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a52      	ldr	r2, [pc, #328]	; (8005938 <HAL_GPIO_Init+0x344>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d013      	beq.n	800581a <HAL_GPIO_Init+0x226>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a51      	ldr	r2, [pc, #324]	; (800593c <HAL_GPIO_Init+0x348>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d00d      	beq.n	8005816 <HAL_GPIO_Init+0x222>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a50      	ldr	r2, [pc, #320]	; (8005940 <HAL_GPIO_Init+0x34c>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d007      	beq.n	8005812 <HAL_GPIO_Init+0x21e>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a4f      	ldr	r2, [pc, #316]	; (8005944 <HAL_GPIO_Init+0x350>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d101      	bne.n	800580e <HAL_GPIO_Init+0x21a>
 800580a:	2309      	movs	r3, #9
 800580c:	e012      	b.n	8005834 <HAL_GPIO_Init+0x240>
 800580e:	230a      	movs	r3, #10
 8005810:	e010      	b.n	8005834 <HAL_GPIO_Init+0x240>
 8005812:	2308      	movs	r3, #8
 8005814:	e00e      	b.n	8005834 <HAL_GPIO_Init+0x240>
 8005816:	2307      	movs	r3, #7
 8005818:	e00c      	b.n	8005834 <HAL_GPIO_Init+0x240>
 800581a:	2306      	movs	r3, #6
 800581c:	e00a      	b.n	8005834 <HAL_GPIO_Init+0x240>
 800581e:	2305      	movs	r3, #5
 8005820:	e008      	b.n	8005834 <HAL_GPIO_Init+0x240>
 8005822:	2304      	movs	r3, #4
 8005824:	e006      	b.n	8005834 <HAL_GPIO_Init+0x240>
 8005826:	2303      	movs	r3, #3
 8005828:	e004      	b.n	8005834 <HAL_GPIO_Init+0x240>
 800582a:	2302      	movs	r3, #2
 800582c:	e002      	b.n	8005834 <HAL_GPIO_Init+0x240>
 800582e:	2301      	movs	r3, #1
 8005830:	e000      	b.n	8005834 <HAL_GPIO_Init+0x240>
 8005832:	2300      	movs	r3, #0
 8005834:	69fa      	ldr	r2, [r7, #28]
 8005836:	f002 0203 	and.w	r2, r2, #3
 800583a:	0092      	lsls	r2, r2, #2
 800583c:	4093      	lsls	r3, r2
 800583e:	69ba      	ldr	r2, [r7, #24]
 8005840:	4313      	orrs	r3, r2
 8005842:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005844:	4935      	ldr	r1, [pc, #212]	; (800591c <HAL_GPIO_Init+0x328>)
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	089b      	lsrs	r3, r3, #2
 800584a:	3302      	adds	r3, #2
 800584c:	69ba      	ldr	r2, [r7, #24]
 800584e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005852:	4b3d      	ldr	r3, [pc, #244]	; (8005948 <HAL_GPIO_Init+0x354>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	43db      	mvns	r3, r3
 800585c:	69ba      	ldr	r2, [r7, #24]
 800585e:	4013      	ands	r3, r2
 8005860:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d003      	beq.n	8005876 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800586e:	69ba      	ldr	r2, [r7, #24]
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	4313      	orrs	r3, r2
 8005874:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005876:	4a34      	ldr	r2, [pc, #208]	; (8005948 <HAL_GPIO_Init+0x354>)
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800587c:	4b32      	ldr	r3, [pc, #200]	; (8005948 <HAL_GPIO_Init+0x354>)
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	43db      	mvns	r3, r3
 8005886:	69ba      	ldr	r2, [r7, #24]
 8005888:	4013      	ands	r3, r2
 800588a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d003      	beq.n	80058a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005898:	69ba      	ldr	r2, [r7, #24]
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	4313      	orrs	r3, r2
 800589e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80058a0:	4a29      	ldr	r2, [pc, #164]	; (8005948 <HAL_GPIO_Init+0x354>)
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80058a6:	4b28      	ldr	r3, [pc, #160]	; (8005948 <HAL_GPIO_Init+0x354>)
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	43db      	mvns	r3, r3
 80058b0:	69ba      	ldr	r2, [r7, #24]
 80058b2:	4013      	ands	r3, r2
 80058b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d003      	beq.n	80058ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80058c2:	69ba      	ldr	r2, [r7, #24]
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80058ca:	4a1f      	ldr	r2, [pc, #124]	; (8005948 <HAL_GPIO_Init+0x354>)
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80058d0:	4b1d      	ldr	r3, [pc, #116]	; (8005948 <HAL_GPIO_Init+0x354>)
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	43db      	mvns	r3, r3
 80058da:	69ba      	ldr	r2, [r7, #24]
 80058dc:	4013      	ands	r3, r2
 80058de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d003      	beq.n	80058f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80058ec:	69ba      	ldr	r2, [r7, #24]
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80058f4:	4a14      	ldr	r2, [pc, #80]	; (8005948 <HAL_GPIO_Init+0x354>)
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	3301      	adds	r3, #1
 80058fe:	61fb      	str	r3, [r7, #28]
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	2b0f      	cmp	r3, #15
 8005904:	f67f ae84 	bls.w	8005610 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005908:	bf00      	nop
 800590a:	bf00      	nop
 800590c:	3724      	adds	r7, #36	; 0x24
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	40023800 	.word	0x40023800
 800591c:	40013800 	.word	0x40013800
 8005920:	40020000 	.word	0x40020000
 8005924:	40020400 	.word	0x40020400
 8005928:	40020800 	.word	0x40020800
 800592c:	40020c00 	.word	0x40020c00
 8005930:	40021000 	.word	0x40021000
 8005934:	40021400 	.word	0x40021400
 8005938:	40021800 	.word	0x40021800
 800593c:	40021c00 	.word	0x40021c00
 8005940:	40022000 	.word	0x40022000
 8005944:	40022400 	.word	0x40022400
 8005948:	40013c00 	.word	0x40013c00

0800594c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	460b      	mov	r3, r1
 8005956:	807b      	strh	r3, [r7, #2]
 8005958:	4613      	mov	r3, r2
 800595a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800595c:	787b      	ldrb	r3, [r7, #1]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d003      	beq.n	800596a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005962:	887a      	ldrh	r2, [r7, #2]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005968:	e003      	b.n	8005972 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800596a:	887b      	ldrh	r3, [r7, #2]
 800596c:	041a      	lsls	r2, r3, #16
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	619a      	str	r2, [r3, #24]
}
 8005972:	bf00      	nop
 8005974:	370c      	adds	r7, #12
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
	...

08005980 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b082      	sub	sp, #8
 8005984:	af00      	add	r7, sp, #0
 8005986:	4603      	mov	r3, r0
 8005988:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800598a:	4b08      	ldr	r3, [pc, #32]	; (80059ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800598c:	695a      	ldr	r2, [r3, #20]
 800598e:	88fb      	ldrh	r3, [r7, #6]
 8005990:	4013      	ands	r3, r2
 8005992:	2b00      	cmp	r3, #0
 8005994:	d006      	beq.n	80059a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005996:	4a05      	ldr	r2, [pc, #20]	; (80059ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005998:	88fb      	ldrh	r3, [r7, #6]
 800599a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800599c:	88fb      	ldrh	r3, [r7, #6]
 800599e:	4618      	mov	r0, r3
 80059a0:	f000 f806 	bl	80059b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80059a4:	bf00      	nop
 80059a6:	3708      	adds	r7, #8
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	40013c00 	.word	0x40013c00

080059b0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	4603      	mov	r3, r0
 80059b8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80059ba:	bf00      	nop
 80059bc:	370c      	adds	r7, #12
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
	...

080059c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d101      	bne.n	80059da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e12b      	b.n	8005c32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d106      	bne.n	80059f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f7fb ff82 	bl	80018f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2224      	movs	r2, #36	; 0x24
 80059f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f022 0201 	bic.w	r2, r2, #1
 8005a0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005a2c:	f002 fc08 	bl	8008240 <HAL_RCC_GetPCLK1Freq>
 8005a30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	4a81      	ldr	r2, [pc, #516]	; (8005c3c <HAL_I2C_Init+0x274>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d807      	bhi.n	8005a4c <HAL_I2C_Init+0x84>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	4a80      	ldr	r2, [pc, #512]	; (8005c40 <HAL_I2C_Init+0x278>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	bf94      	ite	ls
 8005a44:	2301      	movls	r3, #1
 8005a46:	2300      	movhi	r3, #0
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	e006      	b.n	8005a5a <HAL_I2C_Init+0x92>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	4a7d      	ldr	r2, [pc, #500]	; (8005c44 <HAL_I2C_Init+0x27c>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	bf94      	ite	ls
 8005a54:	2301      	movls	r3, #1
 8005a56:	2300      	movhi	r3, #0
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d001      	beq.n	8005a62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e0e7      	b.n	8005c32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	4a78      	ldr	r2, [pc, #480]	; (8005c48 <HAL_I2C_Init+0x280>)
 8005a66:	fba2 2303 	umull	r2, r3, r2, r3
 8005a6a:	0c9b      	lsrs	r3, r3, #18
 8005a6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68ba      	ldr	r2, [r7, #8]
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	6a1b      	ldr	r3, [r3, #32]
 8005a88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	4a6a      	ldr	r2, [pc, #424]	; (8005c3c <HAL_I2C_Init+0x274>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d802      	bhi.n	8005a9c <HAL_I2C_Init+0xd4>
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	e009      	b.n	8005ab0 <HAL_I2C_Init+0xe8>
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005aa2:	fb02 f303 	mul.w	r3, r2, r3
 8005aa6:	4a69      	ldr	r2, [pc, #420]	; (8005c4c <HAL_I2C_Init+0x284>)
 8005aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8005aac:	099b      	lsrs	r3, r3, #6
 8005aae:	3301      	adds	r3, #1
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	6812      	ldr	r2, [r2, #0]
 8005ab4:	430b      	orrs	r3, r1
 8005ab6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	69db      	ldr	r3, [r3, #28]
 8005abe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005ac2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	495c      	ldr	r1, [pc, #368]	; (8005c3c <HAL_I2C_Init+0x274>)
 8005acc:	428b      	cmp	r3, r1
 8005ace:	d819      	bhi.n	8005b04 <HAL_I2C_Init+0x13c>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	1e59      	subs	r1, r3, #1
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	005b      	lsls	r3, r3, #1
 8005ada:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ade:	1c59      	adds	r1, r3, #1
 8005ae0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005ae4:	400b      	ands	r3, r1
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00a      	beq.n	8005b00 <HAL_I2C_Init+0x138>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	1e59      	subs	r1, r3, #1
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	005b      	lsls	r3, r3, #1
 8005af4:	fbb1 f3f3 	udiv	r3, r1, r3
 8005af8:	3301      	adds	r3, #1
 8005afa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005afe:	e051      	b.n	8005ba4 <HAL_I2C_Init+0x1dc>
 8005b00:	2304      	movs	r3, #4
 8005b02:	e04f      	b.n	8005ba4 <HAL_I2C_Init+0x1dc>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d111      	bne.n	8005b30 <HAL_I2C_Init+0x168>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	1e58      	subs	r0, r3, #1
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6859      	ldr	r1, [r3, #4]
 8005b14:	460b      	mov	r3, r1
 8005b16:	005b      	lsls	r3, r3, #1
 8005b18:	440b      	add	r3, r1
 8005b1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b1e:	3301      	adds	r3, #1
 8005b20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	bf0c      	ite	eq
 8005b28:	2301      	moveq	r3, #1
 8005b2a:	2300      	movne	r3, #0
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	e012      	b.n	8005b56 <HAL_I2C_Init+0x18e>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	1e58      	subs	r0, r3, #1
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6859      	ldr	r1, [r3, #4]
 8005b38:	460b      	mov	r3, r1
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	440b      	add	r3, r1
 8005b3e:	0099      	lsls	r1, r3, #2
 8005b40:	440b      	add	r3, r1
 8005b42:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b46:	3301      	adds	r3, #1
 8005b48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	bf0c      	ite	eq
 8005b50:	2301      	moveq	r3, #1
 8005b52:	2300      	movne	r3, #0
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d001      	beq.n	8005b5e <HAL_I2C_Init+0x196>
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e022      	b.n	8005ba4 <HAL_I2C_Init+0x1dc>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d10e      	bne.n	8005b84 <HAL_I2C_Init+0x1bc>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	1e58      	subs	r0, r3, #1
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6859      	ldr	r1, [r3, #4]
 8005b6e:	460b      	mov	r3, r1
 8005b70:	005b      	lsls	r3, r3, #1
 8005b72:	440b      	add	r3, r1
 8005b74:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b78:	3301      	adds	r3, #1
 8005b7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b82:	e00f      	b.n	8005ba4 <HAL_I2C_Init+0x1dc>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	1e58      	subs	r0, r3, #1
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6859      	ldr	r1, [r3, #4]
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	440b      	add	r3, r1
 8005b92:	0099      	lsls	r1, r3, #2
 8005b94:	440b      	add	r3, r1
 8005b96:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ba0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ba4:	6879      	ldr	r1, [r7, #4]
 8005ba6:	6809      	ldr	r1, [r1, #0]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	69da      	ldr	r2, [r3, #28]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
 8005bbe:	431a      	orrs	r2, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	430a      	orrs	r2, r1
 8005bc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005bd2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	6911      	ldr	r1, [r2, #16]
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	68d2      	ldr	r2, [r2, #12]
 8005bde:	4311      	orrs	r1, r2
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	6812      	ldr	r2, [r2, #0]
 8005be4:	430b      	orrs	r3, r1
 8005be6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	695a      	ldr	r2, [r3, #20]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	431a      	orrs	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	430a      	orrs	r2, r1
 8005c02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f042 0201 	orr.w	r2, r2, #1
 8005c12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2220      	movs	r2, #32
 8005c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	000186a0 	.word	0x000186a0
 8005c40:	001e847f 	.word	0x001e847f
 8005c44:	003d08ff 	.word	0x003d08ff
 8005c48:	431bde83 	.word	0x431bde83
 8005c4c:	10624dd3 	.word	0x10624dd3

08005c50 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b088      	sub	sp, #32
 8005c54:	af02      	add	r7, sp, #8
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	4608      	mov	r0, r1
 8005c5a:	4611      	mov	r1, r2
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	4603      	mov	r3, r0
 8005c60:	817b      	strh	r3, [r7, #10]
 8005c62:	460b      	mov	r3, r1
 8005c64:	813b      	strh	r3, [r7, #8]
 8005c66:	4613      	mov	r3, r2
 8005c68:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005c6a:	f7ff f93f 	bl	8004eec <HAL_GetTick>
 8005c6e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	2b20      	cmp	r3, #32
 8005c7a:	f040 80d9 	bne.w	8005e30 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	9300      	str	r3, [sp, #0]
 8005c82:	2319      	movs	r3, #25
 8005c84:	2201      	movs	r2, #1
 8005c86:	496d      	ldr	r1, [pc, #436]	; (8005e3c <HAL_I2C_Mem_Write+0x1ec>)
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f000 fc7f 	bl	800658c <I2C_WaitOnFlagUntilTimeout>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d001      	beq.n	8005c98 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005c94:	2302      	movs	r3, #2
 8005c96:	e0cc      	b.n	8005e32 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d101      	bne.n	8005ca6 <HAL_I2C_Mem_Write+0x56>
 8005ca2:	2302      	movs	r3, #2
 8005ca4:	e0c5      	b.n	8005e32 <HAL_I2C_Mem_Write+0x1e2>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0301 	and.w	r3, r3, #1
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d007      	beq.n	8005ccc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f042 0201 	orr.w	r2, r2, #1
 8005cca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cda:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2221      	movs	r2, #33	; 0x21
 8005ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2240      	movs	r2, #64	; 0x40
 8005ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6a3a      	ldr	r2, [r7, #32]
 8005cf6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005cfc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	4a4d      	ldr	r2, [pc, #308]	; (8005e40 <HAL_I2C_Mem_Write+0x1f0>)
 8005d0c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d0e:	88f8      	ldrh	r0, [r7, #6]
 8005d10:	893a      	ldrh	r2, [r7, #8]
 8005d12:	8979      	ldrh	r1, [r7, #10]
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	9301      	str	r3, [sp, #4]
 8005d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1a:	9300      	str	r3, [sp, #0]
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	68f8      	ldr	r0, [r7, #12]
 8005d20:	f000 fab6 	bl	8006290 <I2C_RequestMemoryWrite>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d052      	beq.n	8005dd0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e081      	b.n	8005e32 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d32:	68f8      	ldr	r0, [r7, #12]
 8005d34:	f000 fd00 	bl	8006738 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00d      	beq.n	8005d5a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d42:	2b04      	cmp	r3, #4
 8005d44:	d107      	bne.n	8005d56 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e06b      	b.n	8005e32 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5e:	781a      	ldrb	r2, [r3, #0]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6a:	1c5a      	adds	r2, r3, #1
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d74:	3b01      	subs	r3, #1
 8005d76:	b29a      	uxth	r2, r3
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	3b01      	subs	r3, #1
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	695b      	ldr	r3, [r3, #20]
 8005d90:	f003 0304 	and.w	r3, r3, #4
 8005d94:	2b04      	cmp	r3, #4
 8005d96:	d11b      	bne.n	8005dd0 <HAL_I2C_Mem_Write+0x180>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d017      	beq.n	8005dd0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da4:	781a      	ldrb	r2, [r3, #0]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db0:	1c5a      	adds	r2, r3, #1
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	3b01      	subs	r3, #1
 8005dca:	b29a      	uxth	r2, r3
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d1aa      	bne.n	8005d2e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dd8:	697a      	ldr	r2, [r7, #20]
 8005dda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f000 fcec 	bl	80067ba <I2C_WaitOnBTFFlagUntilTimeout>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00d      	beq.n	8005e04 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dec:	2b04      	cmp	r3, #4
 8005dee:	d107      	bne.n	8005e00 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dfe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e016      	b.n	8005e32 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2220      	movs	r2, #32
 8005e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	e000      	b.n	8005e32 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005e30:	2302      	movs	r3, #2
  }
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3718      	adds	r7, #24
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	00100002 	.word	0x00100002
 8005e40:	ffff0000 	.word	0xffff0000

08005e44 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b08c      	sub	sp, #48	; 0x30
 8005e48:	af02      	add	r7, sp, #8
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	4608      	mov	r0, r1
 8005e4e:	4611      	mov	r1, r2
 8005e50:	461a      	mov	r2, r3
 8005e52:	4603      	mov	r3, r0
 8005e54:	817b      	strh	r3, [r7, #10]
 8005e56:	460b      	mov	r3, r1
 8005e58:	813b      	strh	r3, [r7, #8]
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005e5e:	f7ff f845 	bl	8004eec <HAL_GetTick>
 8005e62:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	2b20      	cmp	r3, #32
 8005e6e:	f040 8208 	bne.w	8006282 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e74:	9300      	str	r3, [sp, #0]
 8005e76:	2319      	movs	r3, #25
 8005e78:	2201      	movs	r2, #1
 8005e7a:	497b      	ldr	r1, [pc, #492]	; (8006068 <HAL_I2C_Mem_Read+0x224>)
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	f000 fb85 	bl	800658c <I2C_WaitOnFlagUntilTimeout>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d001      	beq.n	8005e8c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005e88:	2302      	movs	r3, #2
 8005e8a:	e1fb      	b.n	8006284 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d101      	bne.n	8005e9a <HAL_I2C_Mem_Read+0x56>
 8005e96:	2302      	movs	r3, #2
 8005e98:	e1f4      	b.n	8006284 <HAL_I2C_Mem_Read+0x440>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0301 	and.w	r3, r3, #1
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d007      	beq.n	8005ec0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f042 0201 	orr.w	r2, r2, #1
 8005ebe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ece:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2222      	movs	r2, #34	; 0x22
 8005ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2240      	movs	r2, #64	; 0x40
 8005edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005eea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005ef0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ef6:	b29a      	uxth	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	4a5b      	ldr	r2, [pc, #364]	; (800606c <HAL_I2C_Mem_Read+0x228>)
 8005f00:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f02:	88f8      	ldrh	r0, [r7, #6]
 8005f04:	893a      	ldrh	r2, [r7, #8]
 8005f06:	8979      	ldrh	r1, [r7, #10]
 8005f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0a:	9301      	str	r3, [sp, #4]
 8005f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f0e:	9300      	str	r3, [sp, #0]
 8005f10:	4603      	mov	r3, r0
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	f000 fa52 	bl	80063bc <I2C_RequestMemoryRead>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d001      	beq.n	8005f22 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e1b0      	b.n	8006284 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d113      	bne.n	8005f52 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	623b      	str	r3, [r7, #32]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	695b      	ldr	r3, [r3, #20]
 8005f34:	623b      	str	r3, [r7, #32]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	699b      	ldr	r3, [r3, #24]
 8005f3c:	623b      	str	r3, [r7, #32]
 8005f3e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f4e:	601a      	str	r2, [r3, #0]
 8005f50:	e184      	b.n	800625c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d11b      	bne.n	8005f92 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f68:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	61fb      	str	r3, [r7, #28]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	695b      	ldr	r3, [r3, #20]
 8005f74:	61fb      	str	r3, [r7, #28]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	699b      	ldr	r3, [r3, #24]
 8005f7c:	61fb      	str	r3, [r7, #28]
 8005f7e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f8e:	601a      	str	r2, [r3, #0]
 8005f90:	e164      	b.n	800625c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d11b      	bne.n	8005fd2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fa8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fb8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fba:	2300      	movs	r3, #0
 8005fbc:	61bb      	str	r3, [r7, #24]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	695b      	ldr	r3, [r3, #20]
 8005fc4:	61bb      	str	r3, [r7, #24]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	61bb      	str	r3, [r7, #24]
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	e144      	b.n	800625c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	617b      	str	r3, [r7, #20]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	695b      	ldr	r3, [r3, #20]
 8005fdc:	617b      	str	r3, [r7, #20]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	617b      	str	r3, [r7, #20]
 8005fe6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005fe8:	e138      	b.n	800625c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fee:	2b03      	cmp	r3, #3
 8005ff0:	f200 80f1 	bhi.w	80061d6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d123      	bne.n	8006044 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ffe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f000 fc1b 	bl	800683c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d001      	beq.n	8006010 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e139      	b.n	8006284 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	691a      	ldr	r2, [r3, #16]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601a:	b2d2      	uxtb	r2, r2
 800601c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006022:	1c5a      	adds	r2, r3, #1
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800602c:	3b01      	subs	r3, #1
 800602e:	b29a      	uxth	r2, r3
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006038:	b29b      	uxth	r3, r3
 800603a:	3b01      	subs	r3, #1
 800603c:	b29a      	uxth	r2, r3
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006042:	e10b      	b.n	800625c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006048:	2b02      	cmp	r3, #2
 800604a:	d14e      	bne.n	80060ea <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800604c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604e:	9300      	str	r3, [sp, #0]
 8006050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006052:	2200      	movs	r2, #0
 8006054:	4906      	ldr	r1, [pc, #24]	; (8006070 <HAL_I2C_Mem_Read+0x22c>)
 8006056:	68f8      	ldr	r0, [r7, #12]
 8006058:	f000 fa98 	bl	800658c <I2C_WaitOnFlagUntilTimeout>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d008      	beq.n	8006074 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e10e      	b.n	8006284 <HAL_I2C_Mem_Read+0x440>
 8006066:	bf00      	nop
 8006068:	00100002 	.word	0x00100002
 800606c:	ffff0000 	.word	0xffff0000
 8006070:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006082:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	691a      	ldr	r2, [r3, #16]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608e:	b2d2      	uxtb	r2, r2
 8006090:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006096:	1c5a      	adds	r2, r3, #1
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060a0:	3b01      	subs	r3, #1
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	3b01      	subs	r3, #1
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	691a      	ldr	r2, [r3, #16]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c0:	b2d2      	uxtb	r2, r2
 80060c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c8:	1c5a      	adds	r2, r3, #1
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060d2:	3b01      	subs	r3, #1
 80060d4:	b29a      	uxth	r2, r3
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060de:	b29b      	uxth	r3, r3
 80060e0:	3b01      	subs	r3, #1
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80060e8:	e0b8      	b.n	800625c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80060ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ec:	9300      	str	r3, [sp, #0]
 80060ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f0:	2200      	movs	r2, #0
 80060f2:	4966      	ldr	r1, [pc, #408]	; (800628c <HAL_I2C_Mem_Read+0x448>)
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f000 fa49 	bl	800658c <I2C_WaitOnFlagUntilTimeout>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d001      	beq.n	8006104 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e0bf      	b.n	8006284 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006112:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	691a      	ldr	r2, [r3, #16]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611e:	b2d2      	uxtb	r2, r2
 8006120:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006126:	1c5a      	adds	r2, r3, #1
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006130:	3b01      	subs	r3, #1
 8006132:	b29a      	uxth	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800613c:	b29b      	uxth	r3, r3
 800613e:	3b01      	subs	r3, #1
 8006140:	b29a      	uxth	r2, r3
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006148:	9300      	str	r3, [sp, #0]
 800614a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614c:	2200      	movs	r2, #0
 800614e:	494f      	ldr	r1, [pc, #316]	; (800628c <HAL_I2C_Mem_Read+0x448>)
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f000 fa1b 	bl	800658c <I2C_WaitOnFlagUntilTimeout>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d001      	beq.n	8006160 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e091      	b.n	8006284 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800616e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	691a      	ldr	r2, [r3, #16]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617a:	b2d2      	uxtb	r2, r2
 800617c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006182:	1c5a      	adds	r2, r3, #1
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800618c:	3b01      	subs	r3, #1
 800618e:	b29a      	uxth	r2, r3
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006198:	b29b      	uxth	r3, r3
 800619a:	3b01      	subs	r3, #1
 800619c:	b29a      	uxth	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	691a      	ldr	r2, [r3, #16]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ac:	b2d2      	uxtb	r2, r2
 80061ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b4:	1c5a      	adds	r2, r3, #1
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061be:	3b01      	subs	r3, #1
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	3b01      	subs	r3, #1
 80061ce:	b29a      	uxth	r2, r3
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80061d4:	e042      	b.n	800625c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	f000 fb2e 	bl	800683c <I2C_WaitOnRXNEFlagUntilTimeout>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d001      	beq.n	80061ea <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e04c      	b.n	8006284 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	691a      	ldr	r2, [r3, #16]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f4:	b2d2      	uxtb	r2, r2
 80061f6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fc:	1c5a      	adds	r2, r3, #1
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006206:	3b01      	subs	r3, #1
 8006208:	b29a      	uxth	r2, r3
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006212:	b29b      	uxth	r3, r3
 8006214:	3b01      	subs	r3, #1
 8006216:	b29a      	uxth	r2, r3
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	695b      	ldr	r3, [r3, #20]
 8006222:	f003 0304 	and.w	r3, r3, #4
 8006226:	2b04      	cmp	r3, #4
 8006228:	d118      	bne.n	800625c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	691a      	ldr	r2, [r3, #16]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006234:	b2d2      	uxtb	r2, r2
 8006236:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623c:	1c5a      	adds	r2, r3, #1
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006246:	3b01      	subs	r3, #1
 8006248:	b29a      	uxth	r2, r3
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006252:	b29b      	uxth	r3, r3
 8006254:	3b01      	subs	r3, #1
 8006256:	b29a      	uxth	r2, r3
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006260:	2b00      	cmp	r3, #0
 8006262:	f47f aec2 	bne.w	8005fea <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2220      	movs	r2, #32
 800626a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2200      	movs	r2, #0
 800627a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800627e:	2300      	movs	r3, #0
 8006280:	e000      	b.n	8006284 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006282:	2302      	movs	r3, #2
  }
}
 8006284:	4618      	mov	r0, r3
 8006286:	3728      	adds	r7, #40	; 0x28
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}
 800628c:	00010004 	.word	0x00010004

08006290 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b088      	sub	sp, #32
 8006294:	af02      	add	r7, sp, #8
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	4608      	mov	r0, r1
 800629a:	4611      	mov	r1, r2
 800629c:	461a      	mov	r2, r3
 800629e:	4603      	mov	r3, r0
 80062a0:	817b      	strh	r3, [r7, #10]
 80062a2:	460b      	mov	r3, r1
 80062a4:	813b      	strh	r3, [r7, #8]
 80062a6:	4613      	mov	r3, r2
 80062a8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062bc:	9300      	str	r3, [sp, #0]
 80062be:	6a3b      	ldr	r3, [r7, #32]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80062c6:	68f8      	ldr	r0, [r7, #12]
 80062c8:	f000 f960 	bl	800658c <I2C_WaitOnFlagUntilTimeout>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00d      	beq.n	80062ee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062e0:	d103      	bne.n	80062ea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e05f      	b.n	80063ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80062ee:	897b      	ldrh	r3, [r7, #10]
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	461a      	mov	r2, r3
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80062fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80062fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006300:	6a3a      	ldr	r2, [r7, #32]
 8006302:	492d      	ldr	r1, [pc, #180]	; (80063b8 <I2C_RequestMemoryWrite+0x128>)
 8006304:	68f8      	ldr	r0, [r7, #12]
 8006306:	f000 f998 	bl	800663a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d001      	beq.n	8006314 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e04c      	b.n	80063ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006314:	2300      	movs	r3, #0
 8006316:	617b      	str	r3, [r7, #20]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	695b      	ldr	r3, [r3, #20]
 800631e:	617b      	str	r3, [r7, #20]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	617b      	str	r3, [r7, #20]
 8006328:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800632a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800632c:	6a39      	ldr	r1, [r7, #32]
 800632e:	68f8      	ldr	r0, [r7, #12]
 8006330:	f000 fa02 	bl	8006738 <I2C_WaitOnTXEFlagUntilTimeout>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00d      	beq.n	8006356 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633e:	2b04      	cmp	r3, #4
 8006340:	d107      	bne.n	8006352 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006350:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e02b      	b.n	80063ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006356:	88fb      	ldrh	r3, [r7, #6]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d105      	bne.n	8006368 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800635c:	893b      	ldrh	r3, [r7, #8]
 800635e:	b2da      	uxtb	r2, r3
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	611a      	str	r2, [r3, #16]
 8006366:	e021      	b.n	80063ac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006368:	893b      	ldrh	r3, [r7, #8]
 800636a:	0a1b      	lsrs	r3, r3, #8
 800636c:	b29b      	uxth	r3, r3
 800636e:	b2da      	uxtb	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006378:	6a39      	ldr	r1, [r7, #32]
 800637a:	68f8      	ldr	r0, [r7, #12]
 800637c:	f000 f9dc 	bl	8006738 <I2C_WaitOnTXEFlagUntilTimeout>
 8006380:	4603      	mov	r3, r0
 8006382:	2b00      	cmp	r3, #0
 8006384:	d00d      	beq.n	80063a2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638a:	2b04      	cmp	r3, #4
 800638c:	d107      	bne.n	800639e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800639c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e005      	b.n	80063ae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80063a2:	893b      	ldrh	r3, [r7, #8]
 80063a4:	b2da      	uxtb	r2, r3
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3718      	adds	r7, #24
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	00010002 	.word	0x00010002

080063bc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b088      	sub	sp, #32
 80063c0:	af02      	add	r7, sp, #8
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	4608      	mov	r0, r1
 80063c6:	4611      	mov	r1, r2
 80063c8:	461a      	mov	r2, r3
 80063ca:	4603      	mov	r3, r0
 80063cc:	817b      	strh	r3, [r7, #10]
 80063ce:	460b      	mov	r3, r1
 80063d0:	813b      	strh	r3, [r7, #8]
 80063d2:	4613      	mov	r3, r2
 80063d4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80063e4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f8:	9300      	str	r3, [sp, #0]
 80063fa:	6a3b      	ldr	r3, [r7, #32]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	f000 f8c2 	bl	800658c <I2C_WaitOnFlagUntilTimeout>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00d      	beq.n	800642a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006418:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800641c:	d103      	bne.n	8006426 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006424:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006426:	2303      	movs	r3, #3
 8006428:	e0aa      	b.n	8006580 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800642a:	897b      	ldrh	r3, [r7, #10]
 800642c:	b2db      	uxtb	r3, r3
 800642e:	461a      	mov	r2, r3
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006438:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800643a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643c:	6a3a      	ldr	r2, [r7, #32]
 800643e:	4952      	ldr	r1, [pc, #328]	; (8006588 <I2C_RequestMemoryRead+0x1cc>)
 8006440:	68f8      	ldr	r0, [r7, #12]
 8006442:	f000 f8fa 	bl	800663a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d001      	beq.n	8006450 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	e097      	b.n	8006580 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006450:	2300      	movs	r3, #0
 8006452:	617b      	str	r3, [r7, #20]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	617b      	str	r3, [r7, #20]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	617b      	str	r3, [r7, #20]
 8006464:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006468:	6a39      	ldr	r1, [r7, #32]
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f000 f964 	bl	8006738 <I2C_WaitOnTXEFlagUntilTimeout>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00d      	beq.n	8006492 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647a:	2b04      	cmp	r3, #4
 800647c:	d107      	bne.n	800648e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800648c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e076      	b.n	8006580 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006492:	88fb      	ldrh	r3, [r7, #6]
 8006494:	2b01      	cmp	r3, #1
 8006496:	d105      	bne.n	80064a4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006498:	893b      	ldrh	r3, [r7, #8]
 800649a:	b2da      	uxtb	r2, r3
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	611a      	str	r2, [r3, #16]
 80064a2:	e021      	b.n	80064e8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80064a4:	893b      	ldrh	r3, [r7, #8]
 80064a6:	0a1b      	lsrs	r3, r3, #8
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	b2da      	uxtb	r2, r3
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064b4:	6a39      	ldr	r1, [r7, #32]
 80064b6:	68f8      	ldr	r0, [r7, #12]
 80064b8:	f000 f93e 	bl	8006738 <I2C_WaitOnTXEFlagUntilTimeout>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00d      	beq.n	80064de <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c6:	2b04      	cmp	r3, #4
 80064c8:	d107      	bne.n	80064da <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e050      	b.n	8006580 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80064de:	893b      	ldrh	r3, [r7, #8]
 80064e0:	b2da      	uxtb	r2, r3
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ea:	6a39      	ldr	r1, [r7, #32]
 80064ec:	68f8      	ldr	r0, [r7, #12]
 80064ee:	f000 f923 	bl	8006738 <I2C_WaitOnTXEFlagUntilTimeout>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00d      	beq.n	8006514 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fc:	2b04      	cmp	r3, #4
 80064fe:	d107      	bne.n	8006510 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800650e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e035      	b.n	8006580 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006522:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006526:	9300      	str	r3, [sp, #0]
 8006528:	6a3b      	ldr	r3, [r7, #32]
 800652a:	2200      	movs	r2, #0
 800652c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006530:	68f8      	ldr	r0, [r7, #12]
 8006532:	f000 f82b 	bl	800658c <I2C_WaitOnFlagUntilTimeout>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00d      	beq.n	8006558 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800654a:	d103      	bne.n	8006554 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006552:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006554:	2303      	movs	r3, #3
 8006556:	e013      	b.n	8006580 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006558:	897b      	ldrh	r3, [r7, #10]
 800655a:	b2db      	uxtb	r3, r3
 800655c:	f043 0301 	orr.w	r3, r3, #1
 8006560:	b2da      	uxtb	r2, r3
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656a:	6a3a      	ldr	r2, [r7, #32]
 800656c:	4906      	ldr	r1, [pc, #24]	; (8006588 <I2C_RequestMemoryRead+0x1cc>)
 800656e:	68f8      	ldr	r0, [r7, #12]
 8006570:	f000 f863 	bl	800663a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d001      	beq.n	800657e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	e000      	b.n	8006580 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800657e:	2300      	movs	r3, #0
}
 8006580:	4618      	mov	r0, r3
 8006582:	3718      	adds	r7, #24
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}
 8006588:	00010002 	.word	0x00010002

0800658c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	603b      	str	r3, [r7, #0]
 8006598:	4613      	mov	r3, r2
 800659a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800659c:	e025      	b.n	80065ea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a4:	d021      	beq.n	80065ea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065a6:	f7fe fca1 	bl	8004eec <HAL_GetTick>
 80065aa:	4602      	mov	r2, r0
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	1ad3      	subs	r3, r2, r3
 80065b0:	683a      	ldr	r2, [r7, #0]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d302      	bcc.n	80065bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d116      	bne.n	80065ea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2220      	movs	r2, #32
 80065c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d6:	f043 0220 	orr.w	r2, r3, #32
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e023      	b.n	8006632 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	0c1b      	lsrs	r3, r3, #16
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d10d      	bne.n	8006610 <I2C_WaitOnFlagUntilTimeout+0x84>
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	695b      	ldr	r3, [r3, #20]
 80065fa:	43da      	mvns	r2, r3
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	4013      	ands	r3, r2
 8006600:	b29b      	uxth	r3, r3
 8006602:	2b00      	cmp	r3, #0
 8006604:	bf0c      	ite	eq
 8006606:	2301      	moveq	r3, #1
 8006608:	2300      	movne	r3, #0
 800660a:	b2db      	uxtb	r3, r3
 800660c:	461a      	mov	r2, r3
 800660e:	e00c      	b.n	800662a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	43da      	mvns	r2, r3
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	4013      	ands	r3, r2
 800661c:	b29b      	uxth	r3, r3
 800661e:	2b00      	cmp	r3, #0
 8006620:	bf0c      	ite	eq
 8006622:	2301      	moveq	r3, #1
 8006624:	2300      	movne	r3, #0
 8006626:	b2db      	uxtb	r3, r3
 8006628:	461a      	mov	r2, r3
 800662a:	79fb      	ldrb	r3, [r7, #7]
 800662c:	429a      	cmp	r2, r3
 800662e:	d0b6      	beq.n	800659e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3710      	adds	r7, #16
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800663a:	b580      	push	{r7, lr}
 800663c:	b084      	sub	sp, #16
 800663e:	af00      	add	r7, sp, #0
 8006640:	60f8      	str	r0, [r7, #12]
 8006642:	60b9      	str	r1, [r7, #8]
 8006644:	607a      	str	r2, [r7, #4]
 8006646:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006648:	e051      	b.n	80066ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	695b      	ldr	r3, [r3, #20]
 8006650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006654:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006658:	d123      	bne.n	80066a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006668:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006672:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2200      	movs	r2, #0
 8006678:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2220      	movs	r2, #32
 800667e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668e:	f043 0204 	orr.w	r2, r3, #4
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e046      	b.n	8006730 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a8:	d021      	beq.n	80066ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066aa:	f7fe fc1f 	bl	8004eec <HAL_GetTick>
 80066ae:	4602      	mov	r2, r0
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	1ad3      	subs	r3, r2, r3
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d302      	bcc.n	80066c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d116      	bne.n	80066ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2200      	movs	r2, #0
 80066c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2220      	movs	r2, #32
 80066ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066da:	f043 0220 	orr.w	r2, r3, #32
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	e020      	b.n	8006730 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	0c1b      	lsrs	r3, r3, #16
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d10c      	bne.n	8006712 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	695b      	ldr	r3, [r3, #20]
 80066fe:	43da      	mvns	r2, r3
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	4013      	ands	r3, r2
 8006704:	b29b      	uxth	r3, r3
 8006706:	2b00      	cmp	r3, #0
 8006708:	bf14      	ite	ne
 800670a:	2301      	movne	r3, #1
 800670c:	2300      	moveq	r3, #0
 800670e:	b2db      	uxtb	r3, r3
 8006710:	e00b      	b.n	800672a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	699b      	ldr	r3, [r3, #24]
 8006718:	43da      	mvns	r2, r3
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	4013      	ands	r3, r2
 800671e:	b29b      	uxth	r3, r3
 8006720:	2b00      	cmp	r3, #0
 8006722:	bf14      	ite	ne
 8006724:	2301      	movne	r3, #1
 8006726:	2300      	moveq	r3, #0
 8006728:	b2db      	uxtb	r3, r3
 800672a:	2b00      	cmp	r3, #0
 800672c:	d18d      	bne.n	800664a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	3710      	adds	r7, #16
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006744:	e02d      	b.n	80067a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006746:	68f8      	ldr	r0, [r7, #12]
 8006748:	f000 f8ce 	bl	80068e8 <I2C_IsAcknowledgeFailed>
 800674c:	4603      	mov	r3, r0
 800674e:	2b00      	cmp	r3, #0
 8006750:	d001      	beq.n	8006756 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e02d      	b.n	80067b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800675c:	d021      	beq.n	80067a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800675e:	f7fe fbc5 	bl	8004eec <HAL_GetTick>
 8006762:	4602      	mov	r2, r0
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	1ad3      	subs	r3, r2, r3
 8006768:	68ba      	ldr	r2, [r7, #8]
 800676a:	429a      	cmp	r2, r3
 800676c:	d302      	bcc.n	8006774 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d116      	bne.n	80067a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2200      	movs	r2, #0
 8006778:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2220      	movs	r2, #32
 800677e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2200      	movs	r2, #0
 8006786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678e:	f043 0220 	orr.w	r2, r3, #32
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e007      	b.n	80067b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	695b      	ldr	r3, [r3, #20]
 80067a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ac:	2b80      	cmp	r3, #128	; 0x80
 80067ae:	d1ca      	bne.n	8006746 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3710      	adds	r7, #16
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}

080067ba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067ba:	b580      	push	{r7, lr}
 80067bc:	b084      	sub	sp, #16
 80067be:	af00      	add	r7, sp, #0
 80067c0:	60f8      	str	r0, [r7, #12]
 80067c2:	60b9      	str	r1, [r7, #8]
 80067c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80067c6:	e02d      	b.n	8006824 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80067c8:	68f8      	ldr	r0, [r7, #12]
 80067ca:	f000 f88d 	bl	80068e8 <I2C_IsAcknowledgeFailed>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d001      	beq.n	80067d8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	e02d      	b.n	8006834 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067de:	d021      	beq.n	8006824 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067e0:	f7fe fb84 	bl	8004eec <HAL_GetTick>
 80067e4:	4602      	mov	r2, r0
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	68ba      	ldr	r2, [r7, #8]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d302      	bcc.n	80067f6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d116      	bne.n	8006824 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2200      	movs	r2, #0
 80067fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2220      	movs	r2, #32
 8006800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2200      	movs	r2, #0
 8006808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006810:	f043 0220 	orr.w	r2, r3, #32
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2200      	movs	r2, #0
 800681c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	e007      	b.n	8006834 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	695b      	ldr	r3, [r3, #20]
 800682a:	f003 0304 	and.w	r3, r3, #4
 800682e:	2b04      	cmp	r3, #4
 8006830:	d1ca      	bne.n	80067c8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	3710      	adds	r7, #16
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006848:	e042      	b.n	80068d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	695b      	ldr	r3, [r3, #20]
 8006850:	f003 0310 	and.w	r3, r3, #16
 8006854:	2b10      	cmp	r3, #16
 8006856:	d119      	bne.n	800688c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f06f 0210 	mvn.w	r2, #16
 8006860:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2200      	movs	r2, #0
 8006866:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2220      	movs	r2, #32
 800686c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2200      	movs	r2, #0
 8006874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2200      	movs	r2, #0
 8006884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	e029      	b.n	80068e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800688c:	f7fe fb2e 	bl	8004eec <HAL_GetTick>
 8006890:	4602      	mov	r2, r0
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	1ad3      	subs	r3, r2, r3
 8006896:	68ba      	ldr	r2, [r7, #8]
 8006898:	429a      	cmp	r2, r3
 800689a:	d302      	bcc.n	80068a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d116      	bne.n	80068d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2200      	movs	r2, #0
 80068a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2220      	movs	r2, #32
 80068ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068bc:	f043 0220 	orr.w	r2, r3, #32
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	e007      	b.n	80068e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	695b      	ldr	r3, [r3, #20]
 80068d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068da:	2b40      	cmp	r3, #64	; 0x40
 80068dc:	d1b5      	bne.n	800684a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80068de:	2300      	movs	r3, #0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3710      	adds	r7, #16
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	695b      	ldr	r3, [r3, #20]
 80068f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068fe:	d11b      	bne.n	8006938 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006908:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2220      	movs	r2, #32
 8006914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006924:	f043 0204 	orr.w	r2, r3, #4
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	e000      	b.n	800693a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	370c      	adds	r7, #12
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr

08006946 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006946:	b480      	push	{r7}
 8006948:	b083      	sub	sp, #12
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
 800694e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006956:	b2db      	uxtb	r3, r3
 8006958:	2b20      	cmp	r3, #32
 800695a:	d129      	bne.n	80069b0 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2224      	movs	r2, #36	; 0x24
 8006960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f022 0201 	bic.w	r2, r2, #1
 8006972:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f022 0210 	bic.w	r2, r2, #16
 8006982:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	683a      	ldr	r2, [r7, #0]
 8006990:	430a      	orrs	r2, r1
 8006992:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f042 0201 	orr.w	r2, r2, #1
 80069a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2220      	movs	r2, #32
 80069a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80069ac:	2300      	movs	r3, #0
 80069ae:	e000      	b.n	80069b2 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80069b0:	2302      	movs	r3, #2
  }
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	370c      	adds	r7, #12
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr

080069be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80069be:	b480      	push	{r7}
 80069c0:	b085      	sub	sp, #20
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
 80069c6:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80069c8:	2300      	movs	r3, #0
 80069ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	2b20      	cmp	r3, #32
 80069d6:	d12a      	bne.n	8006a2e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2224      	movs	r2, #36	; 0x24
 80069dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f022 0201 	bic.w	r2, r2, #1
 80069ee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f6:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80069f8:	89fb      	ldrh	r3, [r7, #14]
 80069fa:	f023 030f 	bic.w	r3, r3, #15
 80069fe:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	b29a      	uxth	r2, r3
 8006a04:	89fb      	ldrh	r3, [r7, #14]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	89fa      	ldrh	r2, [r7, #14]
 8006a10:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f042 0201 	orr.w	r2, r2, #1
 8006a20:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2220      	movs	r2, #32
 8006a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	e000      	b.n	8006a30 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006a2e:	2302      	movs	r3, #2
  }
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3714      	adds	r7, #20
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006a3c:	b590      	push	{r4, r7, lr}
 8006a3e:	b08d      	sub	sp, #52	; 0x34
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a4a:	6a3b      	ldr	r3, [r7, #32]
 8006a4c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4618      	mov	r0, r3
 8006a54:	f005 fa56 	bl	800bf04 <USB_GetMode>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	f040 839d 	bne.w	800719a <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4618      	mov	r0, r3
 8006a66:	f005 f9ba 	bl	800bdde <USB_ReadInterrupts>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	f000 8393 	beq.w	8007198 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4618      	mov	r0, r3
 8006a78:	f005 f9b1 	bl	800bdde <USB_ReadInterrupts>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	f003 0302 	and.w	r3, r3, #2
 8006a82:	2b02      	cmp	r3, #2
 8006a84:	d107      	bne.n	8006a96 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	695a      	ldr	r2, [r3, #20]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f002 0202 	and.w	r2, r2, #2
 8006a94:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f005 f99f 	bl	800bdde <USB_ReadInterrupts>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	f003 0310 	and.w	r3, r3, #16
 8006aa6:	2b10      	cmp	r3, #16
 8006aa8:	d161      	bne.n	8006b6e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	699a      	ldr	r2, [r3, #24]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f022 0210 	bic.w	r2, r2, #16
 8006ab8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8006aba:	6a3b      	ldr	r3, [r7, #32]
 8006abc:	6a1b      	ldr	r3, [r3, #32]
 8006abe:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8006ac0:	69bb      	ldr	r3, [r7, #24]
 8006ac2:	f003 020f 	and.w	r2, r3, #15
 8006ac6:	4613      	mov	r3, r2
 8006ac8:	00db      	lsls	r3, r3, #3
 8006aca:	1a9b      	subs	r3, r3, r2
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	3304      	adds	r3, #4
 8006ad8:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	0c5b      	lsrs	r3, r3, #17
 8006ade:	f003 030f 	and.w	r3, r3, #15
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d124      	bne.n	8006b30 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006ae6:	69ba      	ldr	r2, [r7, #24]
 8006ae8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006aec:	4013      	ands	r3, r2
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d035      	beq.n	8006b5e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	091b      	lsrs	r3, r3, #4
 8006afa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006afc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	461a      	mov	r2, r3
 8006b04:	6a38      	ldr	r0, [r7, #32]
 8006b06:	f005 f818 	bl	800bb3a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	68da      	ldr	r2, [r3, #12]
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	091b      	lsrs	r3, r3, #4
 8006b12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b16:	441a      	add	r2, r3
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	699a      	ldr	r2, [r3, #24]
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	091b      	lsrs	r3, r3, #4
 8006b24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b28:	441a      	add	r2, r3
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	619a      	str	r2, [r3, #24]
 8006b2e:	e016      	b.n	8006b5e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	0c5b      	lsrs	r3, r3, #17
 8006b34:	f003 030f 	and.w	r3, r3, #15
 8006b38:	2b06      	cmp	r3, #6
 8006b3a:	d110      	bne.n	8006b5e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006b42:	2208      	movs	r2, #8
 8006b44:	4619      	mov	r1, r3
 8006b46:	6a38      	ldr	r0, [r7, #32]
 8006b48:	f004 fff7 	bl	800bb3a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	699a      	ldr	r2, [r3, #24]
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	091b      	lsrs	r3, r3, #4
 8006b54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b58:	441a      	add	r2, r3
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	699a      	ldr	r2, [r3, #24]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f042 0210 	orr.w	r2, r2, #16
 8006b6c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4618      	mov	r0, r3
 8006b74:	f005 f933 	bl	800bdde <USB_ReadInterrupts>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b7e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006b82:	d16e      	bne.n	8006c62 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8006b84:	2300      	movs	r3, #0
 8006b86:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f005 f939 	bl	800be04 <USB_ReadDevAllOutEpInterrupt>
 8006b92:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006b94:	e062      	b.n	8006c5c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b98:	f003 0301 	and.w	r3, r3, #1
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d057      	beq.n	8006c50 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ba6:	b2d2      	uxtb	r2, r2
 8006ba8:	4611      	mov	r1, r2
 8006baa:	4618      	mov	r0, r3
 8006bac:	f005 f95e 	bl	800be6c <USB_ReadDevOutEPInterrupt>
 8006bb0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	f003 0301 	and.w	r3, r3, #1
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d00c      	beq.n	8006bd6 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbe:	015a      	lsls	r2, r3, #5
 8006bc0:	69fb      	ldr	r3, [r7, #28]
 8006bc2:	4413      	add	r3, r2
 8006bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bc8:	461a      	mov	r2, r3
 8006bca:	2301      	movs	r3, #1
 8006bcc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006bce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 fd4f 	bl	8007674 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	f003 0308 	and.w	r3, r3, #8
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00c      	beq.n	8006bfa <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be2:	015a      	lsls	r2, r3, #5
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	4413      	add	r3, r2
 8006be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bec:	461a      	mov	r2, r3
 8006bee:	2308      	movs	r3, #8
 8006bf0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006bf2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 fe49 	bl	800788c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	f003 0310 	and.w	r3, r3, #16
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d008      	beq.n	8006c16 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c06:	015a      	lsls	r2, r3, #5
 8006c08:	69fb      	ldr	r3, [r7, #28]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c10:	461a      	mov	r2, r3
 8006c12:	2310      	movs	r3, #16
 8006c14:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	f003 0320 	and.w	r3, r3, #32
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d008      	beq.n	8006c32 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c22:	015a      	lsls	r2, r3, #5
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	4413      	add	r3, r2
 8006c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	2320      	movs	r3, #32
 8006c30:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d009      	beq.n	8006c50 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3e:	015a      	lsls	r2, r3, #5
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	4413      	add	r3, r2
 8006c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c48:	461a      	mov	r2, r3
 8006c4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006c4e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c52:	3301      	adds	r3, #1
 8006c54:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c58:	085b      	lsrs	r3, r3, #1
 8006c5a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d199      	bne.n	8006b96 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4618      	mov	r0, r3
 8006c68:	f005 f8b9 	bl	800bdde <USB_ReadInterrupts>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c76:	f040 80c0 	bne.w	8006dfa <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f005 f8da 	bl	800be38 <USB_ReadDevAllInEpInterrupt>
 8006c84:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006c86:	2300      	movs	r3, #0
 8006c88:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006c8a:	e0b2      	b.n	8006df2 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c8e:	f003 0301 	and.w	r3, r3, #1
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	f000 80a7 	beq.w	8006de6 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c9e:	b2d2      	uxtb	r2, r2
 8006ca0:	4611      	mov	r1, r2
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f005 f900 	bl	800bea8 <USB_ReadDevInEPInterrupt>
 8006ca8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	f003 0301 	and.w	r3, r3, #1
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d057      	beq.n	8006d64 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb6:	f003 030f 	and.w	r3, r3, #15
 8006cba:	2201      	movs	r2, #1
 8006cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8006cc0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	43db      	mvns	r3, r3
 8006cce:	69f9      	ldr	r1, [r7, #28]
 8006cd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cda:	015a      	lsls	r2, r3, #5
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	4413      	add	r3, r2
 8006ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d132      	bne.n	8006d58 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006cf2:	6879      	ldr	r1, [r7, #4]
 8006cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	00db      	lsls	r3, r3, #3
 8006cfa:	1a9b      	subs	r3, r3, r2
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	440b      	add	r3, r1
 8006d00:	3348      	adds	r3, #72	; 0x48
 8006d02:	6819      	ldr	r1, [r3, #0]
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d08:	4613      	mov	r3, r2
 8006d0a:	00db      	lsls	r3, r3, #3
 8006d0c:	1a9b      	subs	r3, r3, r2
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	4403      	add	r3, r0
 8006d12:	3344      	adds	r3, #68	; 0x44
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4419      	add	r1, r3
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	00db      	lsls	r3, r3, #3
 8006d20:	1a9b      	subs	r3, r3, r2
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	4403      	add	r3, r0
 8006d26:	3348      	adds	r3, #72	; 0x48
 8006d28:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d113      	bne.n	8006d58 <HAL_PCD_IRQHandler+0x31c>
 8006d30:	6879      	ldr	r1, [r7, #4]
 8006d32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d34:	4613      	mov	r3, r2
 8006d36:	00db      	lsls	r3, r3, #3
 8006d38:	1a9b      	subs	r3, r3, r2
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	440b      	add	r3, r1
 8006d3e:	3350      	adds	r3, #80	; 0x50
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d108      	bne.n	8006d58 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6818      	ldr	r0, [r3, #0]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006d50:	461a      	mov	r2, r3
 8006d52:	2101      	movs	r1, #1
 8006d54:	f005 f908 	bl	800bf68 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f00b f9a3 	bl	80120aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	f003 0308 	and.w	r3, r3, #8
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d008      	beq.n	8006d80 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d70:	015a      	lsls	r2, r3, #5
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	4413      	add	r3, r2
 8006d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	2308      	movs	r3, #8
 8006d7e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	f003 0310 	and.w	r3, r3, #16
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d008      	beq.n	8006d9c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8c:	015a      	lsls	r2, r3, #5
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	4413      	add	r3, r2
 8006d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d96:	461a      	mov	r2, r3
 8006d98:	2310      	movs	r3, #16
 8006d9a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d008      	beq.n	8006db8 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da8:	015a      	lsls	r2, r3, #5
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	4413      	add	r3, r2
 8006dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006db2:	461a      	mov	r2, r3
 8006db4:	2340      	movs	r3, #64	; 0x40
 8006db6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	f003 0302 	and.w	r3, r3, #2
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d008      	beq.n	8006dd4 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc4:	015a      	lsls	r2, r3, #5
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	4413      	add	r3, r2
 8006dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dce:	461a      	mov	r2, r3
 8006dd0:	2302      	movs	r3, #2
 8006dd2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d003      	beq.n	8006de6 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006dde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 fbb9 	bl	8007558 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de8:	3301      	adds	r3, #1
 8006dea:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dee:	085b      	lsrs	r3, r3, #1
 8006df0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f47f af49 	bne.w	8006c8c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f004 ffed 	bl	800bdde <USB_ReadInterrupts>
 8006e04:	4603      	mov	r3, r0
 8006e06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e0e:	d122      	bne.n	8006e56 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006e10:	69fb      	ldr	r3, [r7, #28]
 8006e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	69fa      	ldr	r2, [r7, #28]
 8006e1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e1e:	f023 0301 	bic.w	r3, r3, #1
 8006e22:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d108      	bne.n	8006e40 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006e36:	2100      	movs	r1, #0
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 fd6d 	bl	8007918 <HAL_PCDEx_LPM_Callback>
 8006e3e:	e002      	b.n	8006e46 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f00b f9a9 	bl	8012198 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	695a      	ldr	r2, [r3, #20]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006e54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f004 ffbf 	bl	800bdde <USB_ReadInterrupts>
 8006e60:	4603      	mov	r3, r0
 8006e62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e6a:	d112      	bne.n	8006e92 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	f003 0301 	and.w	r3, r3, #1
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d102      	bne.n	8006e82 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f00b f965 	bl	801214c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	695a      	ldr	r2, [r3, #20]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006e90:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4618      	mov	r0, r3
 8006e98:	f004 ffa1 	bl	800bdde <USB_ReadInterrupts>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ea6:	f040 80c7 	bne.w	8007038 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	69fa      	ldr	r2, [r7, #28]
 8006eb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006eb8:	f023 0301 	bic.w	r3, r3, #1
 8006ebc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2110      	movs	r1, #16
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f004 f993 	bl	800b1f0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006eca:	2300      	movs	r3, #0
 8006ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ece:	e056      	b.n	8006f7e <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ed2:	015a      	lsls	r2, r3, #5
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	4413      	add	r3, r2
 8006ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006edc:	461a      	mov	r2, r3
 8006ede:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006ee2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee6:	015a      	lsls	r2, r3, #5
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	4413      	add	r3, r2
 8006eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ef4:	0151      	lsls	r1, r2, #5
 8006ef6:	69fa      	ldr	r2, [r7, #28]
 8006ef8:	440a      	add	r2, r1
 8006efa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006efe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f02:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f06:	015a      	lsls	r2, r3, #5
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f14:	0151      	lsls	r1, r2, #5
 8006f16:	69fa      	ldr	r2, [r7, #28]
 8006f18:	440a      	add	r2, r1
 8006f1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006f22:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f26:	015a      	lsls	r2, r3, #5
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f30:	461a      	mov	r2, r3
 8006f32:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006f36:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f3a:	015a      	lsls	r2, r3, #5
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	4413      	add	r3, r2
 8006f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f48:	0151      	lsls	r1, r2, #5
 8006f4a:	69fa      	ldr	r2, [r7, #28]
 8006f4c:	440a      	add	r2, r1
 8006f4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f56:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f5a:	015a      	lsls	r2, r3, #5
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	4413      	add	r3, r2
 8006f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f68:	0151      	lsls	r1, r2, #5
 8006f6a:	69fa      	ldr	r2, [r7, #28]
 8006f6c:	440a      	add	r2, r1
 8006f6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f72:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006f76:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d3a3      	bcc.n	8006ed0 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f8e:	69db      	ldr	r3, [r3, #28]
 8006f90:	69fa      	ldr	r2, [r7, #28]
 8006f92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f96:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006f9a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d016      	beq.n	8006fd2 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006faa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fae:	69fa      	ldr	r2, [r7, #28]
 8006fb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fb4:	f043 030b 	orr.w	r3, r3, #11
 8006fb8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006fbc:	69fb      	ldr	r3, [r7, #28]
 8006fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fc4:	69fa      	ldr	r2, [r7, #28]
 8006fc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fca:	f043 030b 	orr.w	r3, r3, #11
 8006fce:	6453      	str	r3, [r2, #68]	; 0x44
 8006fd0:	e015      	b.n	8006ffe <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fd8:	695b      	ldr	r3, [r3, #20]
 8006fda:	69fa      	ldr	r2, [r7, #28]
 8006fdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fe0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006fe4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006fe8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	69fa      	ldr	r2, [r7, #28]
 8006ff4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ff8:	f043 030b 	orr.w	r3, r3, #11
 8006ffc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	69fa      	ldr	r2, [r7, #28]
 8007008:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800700c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007010:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6818      	ldr	r0, [r3, #0]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007022:	461a      	mov	r2, r3
 8007024:	f004 ffa0 	bl	800bf68 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	695a      	ldr	r2, [r3, #20]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007036:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4618      	mov	r0, r3
 800703e:	f004 fece 	bl	800bdde <USB_ReadInterrupts>
 8007042:	4603      	mov	r3, r0
 8007044:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007048:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800704c:	d124      	bne.n	8007098 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4618      	mov	r0, r3
 8007054:	f004 ff64 	bl	800bf20 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4618      	mov	r0, r3
 800705e:	f004 f8eb 	bl	800b238 <USB_GetDevSpeed>
 8007062:	4603      	mov	r3, r0
 8007064:	461a      	mov	r2, r3
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681c      	ldr	r4, [r3, #0]
 800706e:	f001 f8db 	bl	8008228 <HAL_RCC_GetHCLKFreq>
 8007072:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007078:	b2db      	uxtb	r3, r3
 800707a:	461a      	mov	r2, r3
 800707c:	4620      	mov	r0, r4
 800707e:	f004 f815 	bl	800b0ac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f00b f839 	bl	80120fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	695a      	ldr	r2, [r3, #20]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007096:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4618      	mov	r0, r3
 800709e:	f004 fe9e 	bl	800bdde <USB_ReadInterrupts>
 80070a2:	4603      	mov	r3, r0
 80070a4:	f003 0308 	and.w	r3, r3, #8
 80070a8:	2b08      	cmp	r3, #8
 80070aa:	d10a      	bne.n	80070c2 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f00b f816 	bl	80120de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	695a      	ldr	r2, [r3, #20]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f002 0208 	and.w	r2, r2, #8
 80070c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4618      	mov	r0, r3
 80070c8:	f004 fe89 	bl	800bdde <USB_ReadInterrupts>
 80070cc:	4603      	mov	r3, r0
 80070ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070d6:	d10f      	bne.n	80070f8 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80070d8:	2300      	movs	r3, #0
 80070da:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80070dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	4619      	mov	r1, r3
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f00b f878 	bl	80121d8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	695a      	ldr	r2, [r3, #20]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80070f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4618      	mov	r0, r3
 80070fe:	f004 fe6e 	bl	800bdde <USB_ReadInterrupts>
 8007102:	4603      	mov	r3, r0
 8007104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007108:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800710c:	d10f      	bne.n	800712e <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800710e:	2300      	movs	r3, #0
 8007110:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007114:	b2db      	uxtb	r3, r3
 8007116:	4619      	mov	r1, r3
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f00b f84b 	bl	80121b4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	695a      	ldr	r2, [r3, #20]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800712c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4618      	mov	r0, r3
 8007134:	f004 fe53 	bl	800bdde <USB_ReadInterrupts>
 8007138:	4603      	mov	r3, r0
 800713a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800713e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007142:	d10a      	bne.n	800715a <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f00b f859 	bl	80121fc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	695a      	ldr	r2, [r3, #20]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007158:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4618      	mov	r0, r3
 8007160:	f004 fe3d 	bl	800bdde <USB_ReadInterrupts>
 8007164:	4603      	mov	r3, r0
 8007166:	f003 0304 	and.w	r3, r3, #4
 800716a:	2b04      	cmp	r3, #4
 800716c:	d115      	bne.n	800719a <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	f003 0304 	and.w	r3, r3, #4
 800717c:	2b00      	cmp	r3, #0
 800717e:	d002      	beq.n	8007186 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f00b f849 	bl	8012218 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	6859      	ldr	r1, [r3, #4]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	69ba      	ldr	r2, [r7, #24]
 8007192:	430a      	orrs	r2, r1
 8007194:	605a      	str	r2, [r3, #4]
 8007196:	e000      	b.n	800719a <HAL_PCD_IRQHandler+0x75e>
      return;
 8007198:	bf00      	nop
    }
  }
}
 800719a:	3734      	adds	r7, #52	; 0x34
 800719c:	46bd      	mov	sp, r7
 800719e:	bd90      	pop	{r4, r7, pc}

080071a0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	460b      	mov	r3, r1
 80071aa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d101      	bne.n	80071ba <HAL_PCD_SetAddress+0x1a>
 80071b6:	2302      	movs	r3, #2
 80071b8:	e013      	b.n	80071e2 <HAL_PCD_SetAddress+0x42>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2201      	movs	r2, #1
 80071be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	78fa      	ldrb	r2, [r7, #3]
 80071c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	78fa      	ldrb	r2, [r7, #3]
 80071d0:	4611      	mov	r1, r2
 80071d2:	4618      	mov	r0, r3
 80071d4:	f004 fddd 	bl	800bd92 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3708      	adds	r7, #8
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}

080071ea <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80071ea:	b580      	push	{r7, lr}
 80071ec:	b084      	sub	sp, #16
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
 80071f2:	4608      	mov	r0, r1
 80071f4:	4611      	mov	r1, r2
 80071f6:	461a      	mov	r2, r3
 80071f8:	4603      	mov	r3, r0
 80071fa:	70fb      	strb	r3, [r7, #3]
 80071fc:	460b      	mov	r3, r1
 80071fe:	803b      	strh	r3, [r7, #0]
 8007200:	4613      	mov	r3, r2
 8007202:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007204:	2300      	movs	r3, #0
 8007206:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007208:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800720c:	2b00      	cmp	r3, #0
 800720e:	da0f      	bge.n	8007230 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007210:	78fb      	ldrb	r3, [r7, #3]
 8007212:	f003 020f 	and.w	r2, r3, #15
 8007216:	4613      	mov	r3, r2
 8007218:	00db      	lsls	r3, r3, #3
 800721a:	1a9b      	subs	r3, r3, r2
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	3338      	adds	r3, #56	; 0x38
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	4413      	add	r3, r2
 8007224:	3304      	adds	r3, #4
 8007226:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2201      	movs	r2, #1
 800722c:	705a      	strb	r2, [r3, #1]
 800722e:	e00f      	b.n	8007250 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007230:	78fb      	ldrb	r3, [r7, #3]
 8007232:	f003 020f 	and.w	r2, r3, #15
 8007236:	4613      	mov	r3, r2
 8007238:	00db      	lsls	r3, r3, #3
 800723a:	1a9b      	subs	r3, r3, r2
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	4413      	add	r3, r2
 8007246:	3304      	adds	r3, #4
 8007248:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2200      	movs	r2, #0
 800724e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007250:	78fb      	ldrb	r3, [r7, #3]
 8007252:	f003 030f 	and.w	r3, r3, #15
 8007256:	b2da      	uxtb	r2, r3
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800725c:	883a      	ldrh	r2, [r7, #0]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	78ba      	ldrb	r2, [r7, #2]
 8007266:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	785b      	ldrb	r3, [r3, #1]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d004      	beq.n	800727a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	b29a      	uxth	r2, r3
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800727a:	78bb      	ldrb	r3, [r7, #2]
 800727c:	2b02      	cmp	r3, #2
 800727e:	d102      	bne.n	8007286 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2200      	movs	r2, #0
 8007284:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800728c:	2b01      	cmp	r3, #1
 800728e:	d101      	bne.n	8007294 <HAL_PCD_EP_Open+0xaa>
 8007290:	2302      	movs	r3, #2
 8007292:	e00e      	b.n	80072b2 <HAL_PCD_EP_Open+0xc8>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2201      	movs	r2, #1
 8007298:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	68f9      	ldr	r1, [r7, #12]
 80072a2:	4618      	mov	r0, r3
 80072a4:	f003 ffed 	bl	800b282 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80072b0:	7afb      	ldrb	r3, [r7, #11]
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3710      	adds	r7, #16
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}

080072ba <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80072ba:	b580      	push	{r7, lr}
 80072bc:	b086      	sub	sp, #24
 80072be:	af00      	add	r7, sp, #0
 80072c0:	60f8      	str	r0, [r7, #12]
 80072c2:	607a      	str	r2, [r7, #4]
 80072c4:	603b      	str	r3, [r7, #0]
 80072c6:	460b      	mov	r3, r1
 80072c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80072ca:	7afb      	ldrb	r3, [r7, #11]
 80072cc:	f003 020f 	and.w	r2, r3, #15
 80072d0:	4613      	mov	r3, r2
 80072d2:	00db      	lsls	r3, r3, #3
 80072d4:	1a9b      	subs	r3, r3, r2
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80072dc:	68fa      	ldr	r2, [r7, #12]
 80072de:	4413      	add	r3, r2
 80072e0:	3304      	adds	r3, #4
 80072e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	683a      	ldr	r2, [r7, #0]
 80072ee:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	2200      	movs	r2, #0
 80072f4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	2200      	movs	r2, #0
 80072fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80072fc:	7afb      	ldrb	r3, [r7, #11]
 80072fe:	f003 030f 	and.w	r3, r3, #15
 8007302:	b2da      	uxtb	r2, r3
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	691b      	ldr	r3, [r3, #16]
 800730c:	2b01      	cmp	r3, #1
 800730e:	d102      	bne.n	8007316 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007316:	7afb      	ldrb	r3, [r7, #11]
 8007318:	f003 030f 	and.w	r3, r3, #15
 800731c:	2b00      	cmp	r3, #0
 800731e:	d109      	bne.n	8007334 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	6818      	ldr	r0, [r3, #0]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	b2db      	uxtb	r3, r3
 800732a:	461a      	mov	r2, r3
 800732c:	6979      	ldr	r1, [r7, #20]
 800732e:	f004 fa73 	bl	800b818 <USB_EP0StartXfer>
 8007332:	e008      	b.n	8007346 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	6818      	ldr	r0, [r3, #0]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	691b      	ldr	r3, [r3, #16]
 800733c:	b2db      	uxtb	r3, r3
 800733e:	461a      	mov	r2, r3
 8007340:	6979      	ldr	r1, [r7, #20]
 8007342:	f004 f825 	bl	800b390 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007346:	2300      	movs	r3, #0
}
 8007348:	4618      	mov	r0, r3
 800734a:	3718      	adds	r7, #24
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b086      	sub	sp, #24
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	607a      	str	r2, [r7, #4]
 800735a:	603b      	str	r3, [r7, #0]
 800735c:	460b      	mov	r3, r1
 800735e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007360:	7afb      	ldrb	r3, [r7, #11]
 8007362:	f003 020f 	and.w	r2, r3, #15
 8007366:	4613      	mov	r3, r2
 8007368:	00db      	lsls	r3, r3, #3
 800736a:	1a9b      	subs	r3, r3, r2
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	3338      	adds	r3, #56	; 0x38
 8007370:	68fa      	ldr	r2, [r7, #12]
 8007372:	4413      	add	r3, r2
 8007374:	3304      	adds	r3, #4
 8007376:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	683a      	ldr	r2, [r7, #0]
 8007382:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	2200      	movs	r2, #0
 8007388:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	2201      	movs	r2, #1
 800738e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007390:	7afb      	ldrb	r3, [r7, #11]
 8007392:	f003 030f 	and.w	r3, r3, #15
 8007396:	b2da      	uxtb	r2, r3
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	691b      	ldr	r3, [r3, #16]
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d102      	bne.n	80073aa <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80073aa:	7afb      	ldrb	r3, [r7, #11]
 80073ac:	f003 030f 	and.w	r3, r3, #15
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d109      	bne.n	80073c8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6818      	ldr	r0, [r3, #0]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	461a      	mov	r2, r3
 80073c0:	6979      	ldr	r1, [r7, #20]
 80073c2:	f004 fa29 	bl	800b818 <USB_EP0StartXfer>
 80073c6:	e008      	b.n	80073da <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6818      	ldr	r0, [r3, #0]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	691b      	ldr	r3, [r3, #16]
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	461a      	mov	r2, r3
 80073d4:	6979      	ldr	r1, [r7, #20]
 80073d6:	f003 ffdb 	bl	800b390 <USB_EPStartXfer>
  }

  return HAL_OK;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3718      	adds	r7, #24
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	460b      	mov	r3, r1
 80073ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80073f0:	78fb      	ldrb	r3, [r7, #3]
 80073f2:	f003 020f 	and.w	r2, r3, #15
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d901      	bls.n	8007402 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	e050      	b.n	80074a4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007402:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007406:	2b00      	cmp	r3, #0
 8007408:	da0f      	bge.n	800742a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800740a:	78fb      	ldrb	r3, [r7, #3]
 800740c:	f003 020f 	and.w	r2, r3, #15
 8007410:	4613      	mov	r3, r2
 8007412:	00db      	lsls	r3, r3, #3
 8007414:	1a9b      	subs	r3, r3, r2
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	3338      	adds	r3, #56	; 0x38
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	4413      	add	r3, r2
 800741e:	3304      	adds	r3, #4
 8007420:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2201      	movs	r2, #1
 8007426:	705a      	strb	r2, [r3, #1]
 8007428:	e00d      	b.n	8007446 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800742a:	78fa      	ldrb	r2, [r7, #3]
 800742c:	4613      	mov	r3, r2
 800742e:	00db      	lsls	r3, r3, #3
 8007430:	1a9b      	subs	r3, r3, r2
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	4413      	add	r3, r2
 800743c:	3304      	adds	r3, #4
 800743e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2200      	movs	r2, #0
 8007444:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2201      	movs	r2, #1
 800744a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800744c:	78fb      	ldrb	r3, [r7, #3]
 800744e:	f003 030f 	and.w	r3, r3, #15
 8007452:	b2da      	uxtb	r2, r3
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800745e:	2b01      	cmp	r3, #1
 8007460:	d101      	bne.n	8007466 <HAL_PCD_EP_SetStall+0x82>
 8007462:	2302      	movs	r3, #2
 8007464:	e01e      	b.n	80074a4 <HAL_PCD_EP_SetStall+0xc0>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2201      	movs	r2, #1
 800746a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	68f9      	ldr	r1, [r7, #12]
 8007474:	4618      	mov	r0, r3
 8007476:	f004 fbb8 	bl	800bbea <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800747a:	78fb      	ldrb	r3, [r7, #3]
 800747c:	f003 030f 	and.w	r3, r3, #15
 8007480:	2b00      	cmp	r3, #0
 8007482:	d10a      	bne.n	800749a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6818      	ldr	r0, [r3, #0]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	691b      	ldr	r3, [r3, #16]
 800748c:	b2d9      	uxtb	r1, r3
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007494:	461a      	mov	r2, r3
 8007496:	f004 fd67 	bl	800bf68 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80074a2:	2300      	movs	r3, #0
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3710      	adds	r7, #16
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	460b      	mov	r3, r1
 80074b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80074b8:	78fb      	ldrb	r3, [r7, #3]
 80074ba:	f003 020f 	and.w	r2, r3, #15
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d901      	bls.n	80074ca <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	e042      	b.n	8007550 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80074ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	da0f      	bge.n	80074f2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80074d2:	78fb      	ldrb	r3, [r7, #3]
 80074d4:	f003 020f 	and.w	r2, r3, #15
 80074d8:	4613      	mov	r3, r2
 80074da:	00db      	lsls	r3, r3, #3
 80074dc:	1a9b      	subs	r3, r3, r2
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	3338      	adds	r3, #56	; 0x38
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	4413      	add	r3, r2
 80074e6:	3304      	adds	r3, #4
 80074e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2201      	movs	r2, #1
 80074ee:	705a      	strb	r2, [r3, #1]
 80074f0:	e00f      	b.n	8007512 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80074f2:	78fb      	ldrb	r3, [r7, #3]
 80074f4:	f003 020f 	and.w	r2, r3, #15
 80074f8:	4613      	mov	r3, r2
 80074fa:	00db      	lsls	r3, r3, #3
 80074fc:	1a9b      	subs	r3, r3, r2
 80074fe:	009b      	lsls	r3, r3, #2
 8007500:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	4413      	add	r3, r2
 8007508:	3304      	adds	r3, #4
 800750a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2200      	movs	r2, #0
 8007510:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2200      	movs	r2, #0
 8007516:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007518:	78fb      	ldrb	r3, [r7, #3]
 800751a:	f003 030f 	and.w	r3, r3, #15
 800751e:	b2da      	uxtb	r2, r3
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800752a:	2b01      	cmp	r3, #1
 800752c:	d101      	bne.n	8007532 <HAL_PCD_EP_ClrStall+0x86>
 800752e:	2302      	movs	r3, #2
 8007530:	e00e      	b.n	8007550 <HAL_PCD_EP_ClrStall+0xa4>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2201      	movs	r2, #1
 8007536:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	68f9      	ldr	r1, [r7, #12]
 8007540:	4618      	mov	r0, r3
 8007542:	f004 fbc0 	bl	800bcc6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	3710      	adds	r7, #16
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b08a      	sub	sp, #40	; 0x28
 800755c:	af02      	add	r7, sp, #8
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800756c:	683a      	ldr	r2, [r7, #0]
 800756e:	4613      	mov	r3, r2
 8007570:	00db      	lsls	r3, r3, #3
 8007572:	1a9b      	subs	r3, r3, r2
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	3338      	adds	r3, #56	; 0x38
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	4413      	add	r3, r2
 800757c:	3304      	adds	r3, #4
 800757e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	699a      	ldr	r2, [r3, #24]
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	695b      	ldr	r3, [r3, #20]
 8007588:	429a      	cmp	r2, r3
 800758a:	d901      	bls.n	8007590 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	e06c      	b.n	800766a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	695a      	ldr	r2, [r3, #20]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	699b      	ldr	r3, [r3, #24]
 8007598:	1ad3      	subs	r3, r2, r3
 800759a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	69fa      	ldr	r2, [r7, #28]
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d902      	bls.n	80075ac <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	3303      	adds	r3, #3
 80075b0:	089b      	lsrs	r3, r3, #2
 80075b2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80075b4:	e02b      	b.n	800760e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	695a      	ldr	r2, [r3, #20]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	699b      	ldr	r3, [r3, #24]
 80075be:	1ad3      	subs	r3, r2, r3
 80075c0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	69fa      	ldr	r2, [r7, #28]
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d902      	bls.n	80075d2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80075d2:	69fb      	ldr	r3, [r7, #28]
 80075d4:	3303      	adds	r3, #3
 80075d6:	089b      	lsrs	r3, r3, #2
 80075d8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	68d9      	ldr	r1, [r3, #12]
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	b2da      	uxtb	r2, r3
 80075e2:	69fb      	ldr	r3, [r7, #28]
 80075e4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	9300      	str	r3, [sp, #0]
 80075ee:	4603      	mov	r3, r0
 80075f0:	6978      	ldr	r0, [r7, #20]
 80075f2:	f004 fa64 	bl	800babe <USB_WritePacket>

    ep->xfer_buff  += len;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	68da      	ldr	r2, [r3, #12]
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	441a      	add	r2, r3
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	699a      	ldr	r2, [r3, #24]
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	441a      	add	r2, r3
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	015a      	lsls	r2, r3, #5
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	4413      	add	r3, r2
 8007616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800761a:	699b      	ldr	r3, [r3, #24]
 800761c:	b29b      	uxth	r3, r3
 800761e:	69ba      	ldr	r2, [r7, #24]
 8007620:	429a      	cmp	r2, r3
 8007622:	d809      	bhi.n	8007638 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	699a      	ldr	r2, [r3, #24]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800762c:	429a      	cmp	r2, r3
 800762e:	d203      	bcs.n	8007638 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	695b      	ldr	r3, [r3, #20]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d1be      	bne.n	80075b6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	695a      	ldr	r2, [r3, #20]
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	699b      	ldr	r3, [r3, #24]
 8007640:	429a      	cmp	r2, r3
 8007642:	d811      	bhi.n	8007668 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	f003 030f 	and.w	r3, r3, #15
 800764a:	2201      	movs	r2, #1
 800764c:	fa02 f303 	lsl.w	r3, r2, r3
 8007650:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007658:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	43db      	mvns	r3, r3
 800765e:	6939      	ldr	r1, [r7, #16]
 8007660:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007664:	4013      	ands	r3, r2
 8007666:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007668:	2300      	movs	r3, #0
}
 800766a:	4618      	mov	r0, r3
 800766c:	3720      	adds	r7, #32
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
	...

08007674 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b086      	sub	sp, #24
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	333c      	adds	r3, #60	; 0x3c
 800768c:	3304      	adds	r3, #4
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	015a      	lsls	r2, r3, #5
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	4413      	add	r3, r2
 800769a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	691b      	ldr	r3, [r3, #16]
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	f040 80a0 	bne.w	80077ec <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	f003 0308 	and.w	r3, r3, #8
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d015      	beq.n	80076e2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	4a72      	ldr	r2, [pc, #456]	; (8007884 <PCD_EP_OutXfrComplete_int+0x210>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	f240 80dd 	bls.w	800787a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	f000 80d7 	beq.w	800787a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	015a      	lsls	r2, r3, #5
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	4413      	add	r3, r2
 80076d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076d8:	461a      	mov	r2, r3
 80076da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076de:	6093      	str	r3, [r2, #8]
 80076e0:	e0cb      	b.n	800787a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	f003 0320 	and.w	r3, r3, #32
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d009      	beq.n	8007700 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	015a      	lsls	r2, r3, #5
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	4413      	add	r3, r2
 80076f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076f8:	461a      	mov	r2, r3
 80076fa:	2320      	movs	r3, #32
 80076fc:	6093      	str	r3, [r2, #8]
 80076fe:	e0bc      	b.n	800787a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007706:	2b00      	cmp	r3, #0
 8007708:	f040 80b7 	bne.w	800787a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	4a5d      	ldr	r2, [pc, #372]	; (8007884 <PCD_EP_OutXfrComplete_int+0x210>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d90f      	bls.n	8007734 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800771a:	2b00      	cmp	r3, #0
 800771c:	d00a      	beq.n	8007734 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	015a      	lsls	r2, r3, #5
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	4413      	add	r3, r2
 8007726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800772a:	461a      	mov	r2, r3
 800772c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007730:	6093      	str	r3, [r2, #8]
 8007732:	e0a2      	b.n	800787a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8007734:	6879      	ldr	r1, [r7, #4]
 8007736:	683a      	ldr	r2, [r7, #0]
 8007738:	4613      	mov	r3, r2
 800773a:	00db      	lsls	r3, r3, #3
 800773c:	1a9b      	subs	r3, r3, r2
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	440b      	add	r3, r1
 8007742:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007746:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	0159      	lsls	r1, r3, #5
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	440b      	add	r3, r1
 8007750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007754:	691b      	ldr	r3, [r3, #16]
 8007756:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800775a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	683a      	ldr	r2, [r7, #0]
 8007760:	4613      	mov	r3, r2
 8007762:	00db      	lsls	r3, r3, #3
 8007764:	1a9b      	subs	r3, r3, r2
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	4403      	add	r3, r0
 800776a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800776e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8007770:	6879      	ldr	r1, [r7, #4]
 8007772:	683a      	ldr	r2, [r7, #0]
 8007774:	4613      	mov	r3, r2
 8007776:	00db      	lsls	r3, r3, #3
 8007778:	1a9b      	subs	r3, r3, r2
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	440b      	add	r3, r1
 800777e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007782:	6819      	ldr	r1, [r3, #0]
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	683a      	ldr	r2, [r7, #0]
 8007788:	4613      	mov	r3, r2
 800778a:	00db      	lsls	r3, r3, #3
 800778c:	1a9b      	subs	r3, r3, r2
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	4403      	add	r3, r0
 8007792:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4419      	add	r1, r3
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	683a      	ldr	r2, [r7, #0]
 800779e:	4613      	mov	r3, r2
 80077a0:	00db      	lsls	r3, r3, #3
 80077a2:	1a9b      	subs	r3, r3, r2
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	4403      	add	r3, r0
 80077a8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80077ac:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d114      	bne.n	80077de <PCD_EP_OutXfrComplete_int+0x16a>
 80077b4:	6879      	ldr	r1, [r7, #4]
 80077b6:	683a      	ldr	r2, [r7, #0]
 80077b8:	4613      	mov	r3, r2
 80077ba:	00db      	lsls	r3, r3, #3
 80077bc:	1a9b      	subs	r3, r3, r2
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	440b      	add	r3, r1
 80077c2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d108      	bne.n	80077de <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6818      	ldr	r0, [r3, #0]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80077d6:	461a      	mov	r2, r3
 80077d8:	2101      	movs	r1, #1
 80077da:	f004 fbc5 	bl	800bf68 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	4619      	mov	r1, r3
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f00a fc45 	bl	8012074 <HAL_PCD_DataOutStageCallback>
 80077ea:	e046      	b.n	800787a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	4a26      	ldr	r2, [pc, #152]	; (8007888 <PCD_EP_OutXfrComplete_int+0x214>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d124      	bne.n	800783e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d00a      	beq.n	8007814 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	015a      	lsls	r2, r3, #5
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	4413      	add	r3, r2
 8007806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800780a:	461a      	mov	r2, r3
 800780c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007810:	6093      	str	r3, [r2, #8]
 8007812:	e032      	b.n	800787a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	f003 0320 	and.w	r3, r3, #32
 800781a:	2b00      	cmp	r3, #0
 800781c:	d008      	beq.n	8007830 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	015a      	lsls	r2, r3, #5
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	4413      	add	r3, r2
 8007826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800782a:	461a      	mov	r2, r3
 800782c:	2320      	movs	r3, #32
 800782e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	b2db      	uxtb	r3, r3
 8007834:	4619      	mov	r1, r3
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f00a fc1c 	bl	8012074 <HAL_PCD_DataOutStageCallback>
 800783c:	e01d      	b.n	800787a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d114      	bne.n	800786e <PCD_EP_OutXfrComplete_int+0x1fa>
 8007844:	6879      	ldr	r1, [r7, #4]
 8007846:	683a      	ldr	r2, [r7, #0]
 8007848:	4613      	mov	r3, r2
 800784a:	00db      	lsls	r3, r3, #3
 800784c:	1a9b      	subs	r3, r3, r2
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	440b      	add	r3, r1
 8007852:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d108      	bne.n	800786e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6818      	ldr	r0, [r3, #0]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007866:	461a      	mov	r2, r3
 8007868:	2100      	movs	r1, #0
 800786a:	f004 fb7d 	bl	800bf68 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	b2db      	uxtb	r3, r3
 8007872:	4619      	mov	r1, r3
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f00a fbfd 	bl	8012074 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800787a:	2300      	movs	r3, #0
}
 800787c:	4618      	mov	r0, r3
 800787e:	3718      	adds	r7, #24
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}
 8007884:	4f54300a 	.word	0x4f54300a
 8007888:	4f54310a 	.word	0x4f54310a

0800788c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b086      	sub	sp, #24
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	333c      	adds	r3, #60	; 0x3c
 80078a4:	3304      	adds	r3, #4
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	015a      	lsls	r2, r3, #5
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	4413      	add	r3, r2
 80078b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	4a15      	ldr	r2, [pc, #84]	; (8007914 <PCD_EP_OutSetupPacket_int+0x88>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d90e      	bls.n	80078e0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d009      	beq.n	80078e0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	015a      	lsls	r2, r3, #5
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	4413      	add	r3, r2
 80078d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078d8:	461a      	mov	r2, r3
 80078da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078de:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f00a fbb5 	bl	8012050 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	4a0a      	ldr	r2, [pc, #40]	; (8007914 <PCD_EP_OutSetupPacket_int+0x88>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d90c      	bls.n	8007908 <PCD_EP_OutSetupPacket_int+0x7c>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	691b      	ldr	r3, [r3, #16]
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d108      	bne.n	8007908 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6818      	ldr	r0, [r3, #0]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007900:	461a      	mov	r2, r3
 8007902:	2101      	movs	r1, #1
 8007904:	f004 fb30 	bl	800bf68 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007908:	2300      	movs	r3, #0
}
 800790a:	4618      	mov	r0, r3
 800790c:	3718      	adds	r7, #24
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop
 8007914:	4f54300a 	.word	0x4f54300a

08007918 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	460b      	mov	r3, r1
 8007922:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007924:	bf00      	nop
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8007938:	4b05      	ldr	r3, [pc, #20]	; (8007950 <HAL_PWR_EnableWakeUpPin+0x20>)
 800793a:	685a      	ldr	r2, [r3, #4]
 800793c:	4904      	ldr	r1, [pc, #16]	; (8007950 <HAL_PWR_EnableWakeUpPin+0x20>)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	4313      	orrs	r3, r2
 8007942:	604b      	str	r3, [r1, #4]
}
 8007944:	bf00      	nop
 8007946:	370c      	adds	r7, #12
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr
 8007950:	40007000 	.word	0x40007000

08007954 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 800795c:	4b06      	ldr	r3, [pc, #24]	; (8007978 <HAL_PWR_DisableWakeUpPin+0x24>)
 800795e:	685a      	ldr	r2, [r3, #4]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	43db      	mvns	r3, r3
 8007964:	4904      	ldr	r1, [pc, #16]	; (8007978 <HAL_PWR_DisableWakeUpPin+0x24>)
 8007966:	4013      	ands	r3, r2
 8007968:	604b      	str	r3, [r1, #4]
}
 800796a:	bf00      	nop
 800796c:	370c      	adds	r7, #12
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop
 8007978:	40007000 	.word	0x40007000

0800797c <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 800797c:	b480      	push	{r7}
 800797e:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8007980:	4b08      	ldr	r3, [pc, #32]	; (80079a4 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a07      	ldr	r2, [pc, #28]	; (80079a4 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8007986:	f043 0302 	orr.w	r3, r3, #2
 800798a:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800798c:	4b06      	ldr	r3, [pc, #24]	; (80079a8 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800798e:	691b      	ldr	r3, [r3, #16]
 8007990:	4a05      	ldr	r2, [pc, #20]	; (80079a8 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8007992:	f043 0304 	orr.w	r3, r3, #4
 8007996:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8007998:	bf30      	wfi
}
 800799a:	bf00      	nop
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr
 80079a4:	40007000 	.word	0x40007000
 80079a8:	e000ed00 	.word	0xe000ed00

080079ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b086      	sub	sp, #24
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d101      	bne.n	80079be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	e264      	b.n	8007e88 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f003 0301 	and.w	r3, r3, #1
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d075      	beq.n	8007ab6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80079ca:	4ba3      	ldr	r3, [pc, #652]	; (8007c58 <HAL_RCC_OscConfig+0x2ac>)
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	f003 030c 	and.w	r3, r3, #12
 80079d2:	2b04      	cmp	r3, #4
 80079d4:	d00c      	beq.n	80079f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80079d6:	4ba0      	ldr	r3, [pc, #640]	; (8007c58 <HAL_RCC_OscConfig+0x2ac>)
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80079de:	2b08      	cmp	r3, #8
 80079e0:	d112      	bne.n	8007a08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80079e2:	4b9d      	ldr	r3, [pc, #628]	; (8007c58 <HAL_RCC_OscConfig+0x2ac>)
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079ee:	d10b      	bne.n	8007a08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079f0:	4b99      	ldr	r3, [pc, #612]	; (8007c58 <HAL_RCC_OscConfig+0x2ac>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d05b      	beq.n	8007ab4 <HAL_RCC_OscConfig+0x108>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d157      	bne.n	8007ab4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	e23f      	b.n	8007e88 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a10:	d106      	bne.n	8007a20 <HAL_RCC_OscConfig+0x74>
 8007a12:	4b91      	ldr	r3, [pc, #580]	; (8007c58 <HAL_RCC_OscConfig+0x2ac>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a90      	ldr	r2, [pc, #576]	; (8007c58 <HAL_RCC_OscConfig+0x2ac>)
 8007a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a1c:	6013      	str	r3, [r2, #0]
 8007a1e:	e01d      	b.n	8007a5c <HAL_RCC_OscConfig+0xb0>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007a28:	d10c      	bne.n	8007a44 <HAL_RCC_OscConfig+0x98>
 8007a2a:	4b8b      	ldr	r3, [pc, #556]	; (8007c58 <HAL_RCC_OscConfig+0x2ac>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a8a      	ldr	r2, [pc, #552]	; (8007c58 <HAL_RCC_OscConfig+0x2ac>)
 8007a30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007a34:	6013      	str	r3, [r2, #0]
 8007a36:	4b88      	ldr	r3, [pc, #544]	; (8007c58 <HAL_RCC_OscConfig+0x2ac>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a87      	ldr	r2, [pc, #540]	; (8007c58 <HAL_RCC_OscConfig+0x2ac>)
 8007a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a40:	6013      	str	r3, [r2, #0]
 8007a42:	e00b      	b.n	8007a5c <HAL_RCC_OscConfig+0xb0>
 8007a44:	4b84      	ldr	r3, [pc, #528]	; (8007c58 <HAL_RCC_OscConfig+0x2ac>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a83      	ldr	r2, [pc, #524]	; (8007c58 <HAL_RCC_OscConfig+0x2ac>)
 8007a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a4e:	6013      	str	r3, [r2, #0]
 8007a50:	4b81      	ldr	r3, [pc, #516]	; (8007c58 <HAL_RCC_OscConfig+0x2ac>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a80      	ldr	r2, [pc, #512]	; (8007c58 <HAL_RCC_OscConfig+0x2ac>)
 8007a56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d013      	beq.n	8007a8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a64:	f7fd fa42 	bl	8004eec <HAL_GetTick>
 8007a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a6a:	e008      	b.n	8007a7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a6c:	f7fd fa3e 	bl	8004eec <HAL_GetTick>
 8007a70:	4602      	mov	r2, r0
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	1ad3      	subs	r3, r2, r3
 8007a76:	2b64      	cmp	r3, #100	; 0x64
 8007a78:	d901      	bls.n	8007a7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007a7a:	2303      	movs	r3, #3
 8007a7c:	e204      	b.n	8007e88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a7e:	4b76      	ldr	r3, [pc, #472]	; (8007c58 <HAL_RCC_OscConfig+0x2ac>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d0f0      	beq.n	8007a6c <HAL_RCC_OscConfig+0xc0>
 8007a8a:	e014      	b.n	8007ab6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a8c:	f7fd fa2e 	bl	8004eec <HAL_GetTick>
 8007a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a92:	e008      	b.n	8007aa6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a94:	f7fd fa2a 	bl	8004eec <HAL_GetTick>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	1ad3      	subs	r3, r2, r3
 8007a9e:	2b64      	cmp	r3, #100	; 0x64
 8007aa0:	d901      	bls.n	8007aa6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007aa2:	2303      	movs	r3, #3
 8007aa4:	e1f0      	b.n	8007e88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007aa6:	4b6c      	ldr	r3, [pc, #432]	; (8007c58 <HAL_RCC_OscConfig+0x2ac>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d1f0      	bne.n	8007a94 <HAL_RCC_OscConfig+0xe8>
 8007ab2:	e000      	b.n	8007ab6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ab4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f003 0302 	and.w	r3, r3, #2
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d063      	beq.n	8007b8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007ac2:	4b65      	ldr	r3, [pc, #404]	; (8007c58 <HAL_RCC_OscConfig+0x2ac>)
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	f003 030c 	and.w	r3, r3, #12
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00b      	beq.n	8007ae6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007ace:	4b62      	ldr	r3, [pc, #392]	; (8007c58 <HAL_RCC_OscConfig+0x2ac>)
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007ad6:	2b08      	cmp	r3, #8
 8007ad8:	d11c      	bne.n	8007b14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007ada:	4b5f      	ldr	r3, [pc, #380]	; (8007c58 <HAL_RCC_OscConfig+0x2ac>)
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d116      	bne.n	8007b14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007ae6:	4b5c      	ldr	r3, [pc, #368]	; (8007c58 <HAL_RCC_OscConfig+0x2ac>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f003 0302 	and.w	r3, r3, #2
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d005      	beq.n	8007afe <HAL_RCC_OscConfig+0x152>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d001      	beq.n	8007afe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	e1c4      	b.n	8007e88 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007afe:	4b56      	ldr	r3, [pc, #344]	; (8007c58 <HAL_RCC_OscConfig+0x2ac>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	691b      	ldr	r3, [r3, #16]
 8007b0a:	00db      	lsls	r3, r3, #3
 8007b0c:	4952      	ldr	r1, [pc, #328]	; (8007c58 <HAL_RCC_OscConfig+0x2ac>)
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b12:	e03a      	b.n	8007b8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d020      	beq.n	8007b5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b1c:	4b4f      	ldr	r3, [pc, #316]	; (8007c5c <HAL_RCC_OscConfig+0x2b0>)
 8007b1e:	2201      	movs	r2, #1
 8007b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b22:	f7fd f9e3 	bl	8004eec <HAL_GetTick>
 8007b26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b28:	e008      	b.n	8007b3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b2a:	f7fd f9df 	bl	8004eec <HAL_GetTick>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	1ad3      	subs	r3, r2, r3
 8007b34:	2b02      	cmp	r3, #2
 8007b36:	d901      	bls.n	8007b3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007b38:	2303      	movs	r3, #3
 8007b3a:	e1a5      	b.n	8007e88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b3c:	4b46      	ldr	r3, [pc, #280]	; (8007c58 <HAL_RCC_OscConfig+0x2ac>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f003 0302 	and.w	r3, r3, #2
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d0f0      	beq.n	8007b2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b48:	4b43      	ldr	r3, [pc, #268]	; (8007c58 <HAL_RCC_OscConfig+0x2ac>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	691b      	ldr	r3, [r3, #16]
 8007b54:	00db      	lsls	r3, r3, #3
 8007b56:	4940      	ldr	r1, [pc, #256]	; (8007c58 <HAL_RCC_OscConfig+0x2ac>)
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	600b      	str	r3, [r1, #0]
 8007b5c:	e015      	b.n	8007b8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b5e:	4b3f      	ldr	r3, [pc, #252]	; (8007c5c <HAL_RCC_OscConfig+0x2b0>)
 8007b60:	2200      	movs	r2, #0
 8007b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b64:	f7fd f9c2 	bl	8004eec <HAL_GetTick>
 8007b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b6a:	e008      	b.n	8007b7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b6c:	f7fd f9be 	bl	8004eec <HAL_GetTick>
 8007b70:	4602      	mov	r2, r0
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	1ad3      	subs	r3, r2, r3
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	d901      	bls.n	8007b7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	e184      	b.n	8007e88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b7e:	4b36      	ldr	r3, [pc, #216]	; (8007c58 <HAL_RCC_OscConfig+0x2ac>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f003 0302 	and.w	r3, r3, #2
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d1f0      	bne.n	8007b6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f003 0308 	and.w	r3, r3, #8
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d030      	beq.n	8007bf8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	695b      	ldr	r3, [r3, #20]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d016      	beq.n	8007bcc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b9e:	4b30      	ldr	r3, [pc, #192]	; (8007c60 <HAL_RCC_OscConfig+0x2b4>)
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ba4:	f7fd f9a2 	bl	8004eec <HAL_GetTick>
 8007ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007baa:	e008      	b.n	8007bbe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007bac:	f7fd f99e 	bl	8004eec <HAL_GetTick>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	1ad3      	subs	r3, r2, r3
 8007bb6:	2b02      	cmp	r3, #2
 8007bb8:	d901      	bls.n	8007bbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007bba:	2303      	movs	r3, #3
 8007bbc:	e164      	b.n	8007e88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007bbe:	4b26      	ldr	r3, [pc, #152]	; (8007c58 <HAL_RCC_OscConfig+0x2ac>)
 8007bc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bc2:	f003 0302 	and.w	r3, r3, #2
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d0f0      	beq.n	8007bac <HAL_RCC_OscConfig+0x200>
 8007bca:	e015      	b.n	8007bf8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007bcc:	4b24      	ldr	r3, [pc, #144]	; (8007c60 <HAL_RCC_OscConfig+0x2b4>)
 8007bce:	2200      	movs	r2, #0
 8007bd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007bd2:	f7fd f98b 	bl	8004eec <HAL_GetTick>
 8007bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007bd8:	e008      	b.n	8007bec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007bda:	f7fd f987 	bl	8004eec <HAL_GetTick>
 8007bde:	4602      	mov	r2, r0
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	1ad3      	subs	r3, r2, r3
 8007be4:	2b02      	cmp	r3, #2
 8007be6:	d901      	bls.n	8007bec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007be8:	2303      	movs	r3, #3
 8007bea:	e14d      	b.n	8007e88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007bec:	4b1a      	ldr	r3, [pc, #104]	; (8007c58 <HAL_RCC_OscConfig+0x2ac>)
 8007bee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bf0:	f003 0302 	and.w	r3, r3, #2
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d1f0      	bne.n	8007bda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f003 0304 	and.w	r3, r3, #4
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	f000 80a0 	beq.w	8007d46 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c06:	2300      	movs	r3, #0
 8007c08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c0a:	4b13      	ldr	r3, [pc, #76]	; (8007c58 <HAL_RCC_OscConfig+0x2ac>)
 8007c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d10f      	bne.n	8007c36 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c16:	2300      	movs	r3, #0
 8007c18:	60bb      	str	r3, [r7, #8]
 8007c1a:	4b0f      	ldr	r3, [pc, #60]	; (8007c58 <HAL_RCC_OscConfig+0x2ac>)
 8007c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c1e:	4a0e      	ldr	r2, [pc, #56]	; (8007c58 <HAL_RCC_OscConfig+0x2ac>)
 8007c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c24:	6413      	str	r3, [r2, #64]	; 0x40
 8007c26:	4b0c      	ldr	r3, [pc, #48]	; (8007c58 <HAL_RCC_OscConfig+0x2ac>)
 8007c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c2e:	60bb      	str	r3, [r7, #8]
 8007c30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c32:	2301      	movs	r3, #1
 8007c34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c36:	4b0b      	ldr	r3, [pc, #44]	; (8007c64 <HAL_RCC_OscConfig+0x2b8>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d121      	bne.n	8007c86 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007c42:	4b08      	ldr	r3, [pc, #32]	; (8007c64 <HAL_RCC_OscConfig+0x2b8>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a07      	ldr	r2, [pc, #28]	; (8007c64 <HAL_RCC_OscConfig+0x2b8>)
 8007c48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c4e:	f7fd f94d 	bl	8004eec <HAL_GetTick>
 8007c52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c54:	e011      	b.n	8007c7a <HAL_RCC_OscConfig+0x2ce>
 8007c56:	bf00      	nop
 8007c58:	40023800 	.word	0x40023800
 8007c5c:	42470000 	.word	0x42470000
 8007c60:	42470e80 	.word	0x42470e80
 8007c64:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c68:	f7fd f940 	bl	8004eec <HAL_GetTick>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	1ad3      	subs	r3, r2, r3
 8007c72:	2b02      	cmp	r3, #2
 8007c74:	d901      	bls.n	8007c7a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007c76:	2303      	movs	r3, #3
 8007c78:	e106      	b.n	8007e88 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c7a:	4b85      	ldr	r3, [pc, #532]	; (8007e90 <HAL_RCC_OscConfig+0x4e4>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d0f0      	beq.n	8007c68 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d106      	bne.n	8007c9c <HAL_RCC_OscConfig+0x2f0>
 8007c8e:	4b81      	ldr	r3, [pc, #516]	; (8007e94 <HAL_RCC_OscConfig+0x4e8>)
 8007c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c92:	4a80      	ldr	r2, [pc, #512]	; (8007e94 <HAL_RCC_OscConfig+0x4e8>)
 8007c94:	f043 0301 	orr.w	r3, r3, #1
 8007c98:	6713      	str	r3, [r2, #112]	; 0x70
 8007c9a:	e01c      	b.n	8007cd6 <HAL_RCC_OscConfig+0x32a>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	2b05      	cmp	r3, #5
 8007ca2:	d10c      	bne.n	8007cbe <HAL_RCC_OscConfig+0x312>
 8007ca4:	4b7b      	ldr	r3, [pc, #492]	; (8007e94 <HAL_RCC_OscConfig+0x4e8>)
 8007ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ca8:	4a7a      	ldr	r2, [pc, #488]	; (8007e94 <HAL_RCC_OscConfig+0x4e8>)
 8007caa:	f043 0304 	orr.w	r3, r3, #4
 8007cae:	6713      	str	r3, [r2, #112]	; 0x70
 8007cb0:	4b78      	ldr	r3, [pc, #480]	; (8007e94 <HAL_RCC_OscConfig+0x4e8>)
 8007cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cb4:	4a77      	ldr	r2, [pc, #476]	; (8007e94 <HAL_RCC_OscConfig+0x4e8>)
 8007cb6:	f043 0301 	orr.w	r3, r3, #1
 8007cba:	6713      	str	r3, [r2, #112]	; 0x70
 8007cbc:	e00b      	b.n	8007cd6 <HAL_RCC_OscConfig+0x32a>
 8007cbe:	4b75      	ldr	r3, [pc, #468]	; (8007e94 <HAL_RCC_OscConfig+0x4e8>)
 8007cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cc2:	4a74      	ldr	r2, [pc, #464]	; (8007e94 <HAL_RCC_OscConfig+0x4e8>)
 8007cc4:	f023 0301 	bic.w	r3, r3, #1
 8007cc8:	6713      	str	r3, [r2, #112]	; 0x70
 8007cca:	4b72      	ldr	r3, [pc, #456]	; (8007e94 <HAL_RCC_OscConfig+0x4e8>)
 8007ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cce:	4a71      	ldr	r2, [pc, #452]	; (8007e94 <HAL_RCC_OscConfig+0x4e8>)
 8007cd0:	f023 0304 	bic.w	r3, r3, #4
 8007cd4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d015      	beq.n	8007d0a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cde:	f7fd f905 	bl	8004eec <HAL_GetTick>
 8007ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ce4:	e00a      	b.n	8007cfc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ce6:	f7fd f901 	bl	8004eec <HAL_GetTick>
 8007cea:	4602      	mov	r2, r0
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	1ad3      	subs	r3, r2, r3
 8007cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d901      	bls.n	8007cfc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007cf8:	2303      	movs	r3, #3
 8007cfa:	e0c5      	b.n	8007e88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cfc:	4b65      	ldr	r3, [pc, #404]	; (8007e94 <HAL_RCC_OscConfig+0x4e8>)
 8007cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d00:	f003 0302 	and.w	r3, r3, #2
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d0ee      	beq.n	8007ce6 <HAL_RCC_OscConfig+0x33a>
 8007d08:	e014      	b.n	8007d34 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d0a:	f7fd f8ef 	bl	8004eec <HAL_GetTick>
 8007d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d10:	e00a      	b.n	8007d28 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d12:	f7fd f8eb 	bl	8004eec <HAL_GetTick>
 8007d16:	4602      	mov	r2, r0
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	1ad3      	subs	r3, r2, r3
 8007d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d901      	bls.n	8007d28 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007d24:	2303      	movs	r3, #3
 8007d26:	e0af      	b.n	8007e88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d28:	4b5a      	ldr	r3, [pc, #360]	; (8007e94 <HAL_RCC_OscConfig+0x4e8>)
 8007d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d2c:	f003 0302 	and.w	r3, r3, #2
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d1ee      	bne.n	8007d12 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007d34:	7dfb      	ldrb	r3, [r7, #23]
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d105      	bne.n	8007d46 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d3a:	4b56      	ldr	r3, [pc, #344]	; (8007e94 <HAL_RCC_OscConfig+0x4e8>)
 8007d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d3e:	4a55      	ldr	r2, [pc, #340]	; (8007e94 <HAL_RCC_OscConfig+0x4e8>)
 8007d40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d44:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	699b      	ldr	r3, [r3, #24]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	f000 809b 	beq.w	8007e86 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007d50:	4b50      	ldr	r3, [pc, #320]	; (8007e94 <HAL_RCC_OscConfig+0x4e8>)
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	f003 030c 	and.w	r3, r3, #12
 8007d58:	2b08      	cmp	r3, #8
 8007d5a:	d05c      	beq.n	8007e16 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	699b      	ldr	r3, [r3, #24]
 8007d60:	2b02      	cmp	r3, #2
 8007d62:	d141      	bne.n	8007de8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d64:	4b4c      	ldr	r3, [pc, #304]	; (8007e98 <HAL_RCC_OscConfig+0x4ec>)
 8007d66:	2200      	movs	r2, #0
 8007d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d6a:	f7fd f8bf 	bl	8004eec <HAL_GetTick>
 8007d6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d70:	e008      	b.n	8007d84 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d72:	f7fd f8bb 	bl	8004eec <HAL_GetTick>
 8007d76:	4602      	mov	r2, r0
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	1ad3      	subs	r3, r2, r3
 8007d7c:	2b02      	cmp	r3, #2
 8007d7e:	d901      	bls.n	8007d84 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007d80:	2303      	movs	r3, #3
 8007d82:	e081      	b.n	8007e88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d84:	4b43      	ldr	r3, [pc, #268]	; (8007e94 <HAL_RCC_OscConfig+0x4e8>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d1f0      	bne.n	8007d72 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	69da      	ldr	r2, [r3, #28]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6a1b      	ldr	r3, [r3, #32]
 8007d98:	431a      	orrs	r2, r3
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d9e:	019b      	lsls	r3, r3, #6
 8007da0:	431a      	orrs	r2, r3
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da6:	085b      	lsrs	r3, r3, #1
 8007da8:	3b01      	subs	r3, #1
 8007daa:	041b      	lsls	r3, r3, #16
 8007dac:	431a      	orrs	r2, r3
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db2:	061b      	lsls	r3, r3, #24
 8007db4:	4937      	ldr	r1, [pc, #220]	; (8007e94 <HAL_RCC_OscConfig+0x4e8>)
 8007db6:	4313      	orrs	r3, r2
 8007db8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007dba:	4b37      	ldr	r3, [pc, #220]	; (8007e98 <HAL_RCC_OscConfig+0x4ec>)
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007dc0:	f7fd f894 	bl	8004eec <HAL_GetTick>
 8007dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007dc6:	e008      	b.n	8007dda <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007dc8:	f7fd f890 	bl	8004eec <HAL_GetTick>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	1ad3      	subs	r3, r2, r3
 8007dd2:	2b02      	cmp	r3, #2
 8007dd4:	d901      	bls.n	8007dda <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007dd6:	2303      	movs	r3, #3
 8007dd8:	e056      	b.n	8007e88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007dda:	4b2e      	ldr	r3, [pc, #184]	; (8007e94 <HAL_RCC_OscConfig+0x4e8>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d0f0      	beq.n	8007dc8 <HAL_RCC_OscConfig+0x41c>
 8007de6:	e04e      	b.n	8007e86 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007de8:	4b2b      	ldr	r3, [pc, #172]	; (8007e98 <HAL_RCC_OscConfig+0x4ec>)
 8007dea:	2200      	movs	r2, #0
 8007dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007dee:	f7fd f87d 	bl	8004eec <HAL_GetTick>
 8007df2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007df4:	e008      	b.n	8007e08 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007df6:	f7fd f879 	bl	8004eec <HAL_GetTick>
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	1ad3      	subs	r3, r2, r3
 8007e00:	2b02      	cmp	r3, #2
 8007e02:	d901      	bls.n	8007e08 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007e04:	2303      	movs	r3, #3
 8007e06:	e03f      	b.n	8007e88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e08:	4b22      	ldr	r3, [pc, #136]	; (8007e94 <HAL_RCC_OscConfig+0x4e8>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d1f0      	bne.n	8007df6 <HAL_RCC_OscConfig+0x44a>
 8007e14:	e037      	b.n	8007e86 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	699b      	ldr	r3, [r3, #24]
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d101      	bne.n	8007e22 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e032      	b.n	8007e88 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007e22:	4b1c      	ldr	r3, [pc, #112]	; (8007e94 <HAL_RCC_OscConfig+0x4e8>)
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	699b      	ldr	r3, [r3, #24]
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d028      	beq.n	8007e82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d121      	bne.n	8007e82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d11a      	bne.n	8007e82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007e4c:	68fa      	ldr	r2, [r7, #12]
 8007e4e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007e52:	4013      	ands	r3, r2
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007e58:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d111      	bne.n	8007e82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e68:	085b      	lsrs	r3, r3, #1
 8007e6a:	3b01      	subs	r3, #1
 8007e6c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d107      	bne.n	8007e82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e7c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d001      	beq.n	8007e86 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007e82:	2301      	movs	r3, #1
 8007e84:	e000      	b.n	8007e88 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007e86:	2300      	movs	r3, #0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3718      	adds	r7, #24
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	40007000 	.word	0x40007000
 8007e94:	40023800 	.word	0x40023800
 8007e98:	42470060 	.word	0x42470060

08007e9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d101      	bne.n	8007eb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007eac:	2301      	movs	r3, #1
 8007eae:	e0cc      	b.n	800804a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007eb0:	4b68      	ldr	r3, [pc, #416]	; (8008054 <HAL_RCC_ClockConfig+0x1b8>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f003 030f 	and.w	r3, r3, #15
 8007eb8:	683a      	ldr	r2, [r7, #0]
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d90c      	bls.n	8007ed8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ebe:	4b65      	ldr	r3, [pc, #404]	; (8008054 <HAL_RCC_ClockConfig+0x1b8>)
 8007ec0:	683a      	ldr	r2, [r7, #0]
 8007ec2:	b2d2      	uxtb	r2, r2
 8007ec4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ec6:	4b63      	ldr	r3, [pc, #396]	; (8008054 <HAL_RCC_ClockConfig+0x1b8>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f003 030f 	and.w	r3, r3, #15
 8007ece:	683a      	ldr	r2, [r7, #0]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d001      	beq.n	8007ed8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	e0b8      	b.n	800804a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f003 0302 	and.w	r3, r3, #2
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d020      	beq.n	8007f26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f003 0304 	and.w	r3, r3, #4
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d005      	beq.n	8007efc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007ef0:	4b59      	ldr	r3, [pc, #356]	; (8008058 <HAL_RCC_ClockConfig+0x1bc>)
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	4a58      	ldr	r2, [pc, #352]	; (8008058 <HAL_RCC_ClockConfig+0x1bc>)
 8007ef6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007efa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f003 0308 	and.w	r3, r3, #8
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d005      	beq.n	8007f14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007f08:	4b53      	ldr	r3, [pc, #332]	; (8008058 <HAL_RCC_ClockConfig+0x1bc>)
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	4a52      	ldr	r2, [pc, #328]	; (8008058 <HAL_RCC_ClockConfig+0x1bc>)
 8007f0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007f12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f14:	4b50      	ldr	r3, [pc, #320]	; (8008058 <HAL_RCC_ClockConfig+0x1bc>)
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	689b      	ldr	r3, [r3, #8]
 8007f20:	494d      	ldr	r1, [pc, #308]	; (8008058 <HAL_RCC_ClockConfig+0x1bc>)
 8007f22:	4313      	orrs	r3, r2
 8007f24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f003 0301 	and.w	r3, r3, #1
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d044      	beq.n	8007fbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d107      	bne.n	8007f4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f3a:	4b47      	ldr	r3, [pc, #284]	; (8008058 <HAL_RCC_ClockConfig+0x1bc>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d119      	bne.n	8007f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	e07f      	b.n	800804a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	2b02      	cmp	r3, #2
 8007f50:	d003      	beq.n	8007f5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007f56:	2b03      	cmp	r3, #3
 8007f58:	d107      	bne.n	8007f6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f5a:	4b3f      	ldr	r3, [pc, #252]	; (8008058 <HAL_RCC_ClockConfig+0x1bc>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d109      	bne.n	8007f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	e06f      	b.n	800804a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f6a:	4b3b      	ldr	r3, [pc, #236]	; (8008058 <HAL_RCC_ClockConfig+0x1bc>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f003 0302 	and.w	r3, r3, #2
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d101      	bne.n	8007f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f76:	2301      	movs	r3, #1
 8007f78:	e067      	b.n	800804a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007f7a:	4b37      	ldr	r3, [pc, #220]	; (8008058 <HAL_RCC_ClockConfig+0x1bc>)
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	f023 0203 	bic.w	r2, r3, #3
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	4934      	ldr	r1, [pc, #208]	; (8008058 <HAL_RCC_ClockConfig+0x1bc>)
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007f8c:	f7fc ffae 	bl	8004eec <HAL_GetTick>
 8007f90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f92:	e00a      	b.n	8007faa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f94:	f7fc ffaa 	bl	8004eec <HAL_GetTick>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	1ad3      	subs	r3, r2, r3
 8007f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d901      	bls.n	8007faa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007fa6:	2303      	movs	r3, #3
 8007fa8:	e04f      	b.n	800804a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007faa:	4b2b      	ldr	r3, [pc, #172]	; (8008058 <HAL_RCC_ClockConfig+0x1bc>)
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	f003 020c 	and.w	r2, r3, #12
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d1eb      	bne.n	8007f94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007fbc:	4b25      	ldr	r3, [pc, #148]	; (8008054 <HAL_RCC_ClockConfig+0x1b8>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f003 030f 	and.w	r3, r3, #15
 8007fc4:	683a      	ldr	r2, [r7, #0]
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d20c      	bcs.n	8007fe4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fca:	4b22      	ldr	r3, [pc, #136]	; (8008054 <HAL_RCC_ClockConfig+0x1b8>)
 8007fcc:	683a      	ldr	r2, [r7, #0]
 8007fce:	b2d2      	uxtb	r2, r2
 8007fd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fd2:	4b20      	ldr	r3, [pc, #128]	; (8008054 <HAL_RCC_ClockConfig+0x1b8>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f003 030f 	and.w	r3, r3, #15
 8007fda:	683a      	ldr	r2, [r7, #0]
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d001      	beq.n	8007fe4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	e032      	b.n	800804a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f003 0304 	and.w	r3, r3, #4
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d008      	beq.n	8008002 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ff0:	4b19      	ldr	r3, [pc, #100]	; (8008058 <HAL_RCC_ClockConfig+0x1bc>)
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	4916      	ldr	r1, [pc, #88]	; (8008058 <HAL_RCC_ClockConfig+0x1bc>)
 8007ffe:	4313      	orrs	r3, r2
 8008000:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f003 0308 	and.w	r3, r3, #8
 800800a:	2b00      	cmp	r3, #0
 800800c:	d009      	beq.n	8008022 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800800e:	4b12      	ldr	r3, [pc, #72]	; (8008058 <HAL_RCC_ClockConfig+0x1bc>)
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	691b      	ldr	r3, [r3, #16]
 800801a:	00db      	lsls	r3, r3, #3
 800801c:	490e      	ldr	r1, [pc, #56]	; (8008058 <HAL_RCC_ClockConfig+0x1bc>)
 800801e:	4313      	orrs	r3, r2
 8008020:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008022:	f000 f821 	bl	8008068 <HAL_RCC_GetSysClockFreq>
 8008026:	4602      	mov	r2, r0
 8008028:	4b0b      	ldr	r3, [pc, #44]	; (8008058 <HAL_RCC_ClockConfig+0x1bc>)
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	091b      	lsrs	r3, r3, #4
 800802e:	f003 030f 	and.w	r3, r3, #15
 8008032:	490a      	ldr	r1, [pc, #40]	; (800805c <HAL_RCC_ClockConfig+0x1c0>)
 8008034:	5ccb      	ldrb	r3, [r1, r3]
 8008036:	fa22 f303 	lsr.w	r3, r2, r3
 800803a:	4a09      	ldr	r2, [pc, #36]	; (8008060 <HAL_RCC_ClockConfig+0x1c4>)
 800803c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800803e:	4b09      	ldr	r3, [pc, #36]	; (8008064 <HAL_RCC_ClockConfig+0x1c8>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4618      	mov	r0, r3
 8008044:	f7f9 fff4 	bl	8002030 <HAL_InitTick>

  return HAL_OK;
 8008048:	2300      	movs	r3, #0
}
 800804a:	4618      	mov	r0, r3
 800804c:	3710      	adds	r7, #16
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	40023c00 	.word	0x40023c00
 8008058:	40023800 	.word	0x40023800
 800805c:	08017c90 	.word	0x08017c90
 8008060:	20000000 	.word	0x20000000
 8008064:	20000060 	.word	0x20000060

08008068 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008068:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800806c:	b084      	sub	sp, #16
 800806e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008070:	2300      	movs	r3, #0
 8008072:	607b      	str	r3, [r7, #4]
 8008074:	2300      	movs	r3, #0
 8008076:	60fb      	str	r3, [r7, #12]
 8008078:	2300      	movs	r3, #0
 800807a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800807c:	2300      	movs	r3, #0
 800807e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008080:	4b67      	ldr	r3, [pc, #412]	; (8008220 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	f003 030c 	and.w	r3, r3, #12
 8008088:	2b08      	cmp	r3, #8
 800808a:	d00d      	beq.n	80080a8 <HAL_RCC_GetSysClockFreq+0x40>
 800808c:	2b08      	cmp	r3, #8
 800808e:	f200 80bd 	bhi.w	800820c <HAL_RCC_GetSysClockFreq+0x1a4>
 8008092:	2b00      	cmp	r3, #0
 8008094:	d002      	beq.n	800809c <HAL_RCC_GetSysClockFreq+0x34>
 8008096:	2b04      	cmp	r3, #4
 8008098:	d003      	beq.n	80080a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800809a:	e0b7      	b.n	800820c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800809c:	4b61      	ldr	r3, [pc, #388]	; (8008224 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800809e:	60bb      	str	r3, [r7, #8]
       break;
 80080a0:	e0b7      	b.n	8008212 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80080a2:	4b60      	ldr	r3, [pc, #384]	; (8008224 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80080a4:	60bb      	str	r3, [r7, #8]
      break;
 80080a6:	e0b4      	b.n	8008212 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80080a8:	4b5d      	ldr	r3, [pc, #372]	; (8008220 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080b0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80080b2:	4b5b      	ldr	r3, [pc, #364]	; (8008220 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d04d      	beq.n	800815a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080be:	4b58      	ldr	r3, [pc, #352]	; (8008220 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	099b      	lsrs	r3, r3, #6
 80080c4:	461a      	mov	r2, r3
 80080c6:	f04f 0300 	mov.w	r3, #0
 80080ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80080ce:	f04f 0100 	mov.w	r1, #0
 80080d2:	ea02 0800 	and.w	r8, r2, r0
 80080d6:	ea03 0901 	and.w	r9, r3, r1
 80080da:	4640      	mov	r0, r8
 80080dc:	4649      	mov	r1, r9
 80080de:	f04f 0200 	mov.w	r2, #0
 80080e2:	f04f 0300 	mov.w	r3, #0
 80080e6:	014b      	lsls	r3, r1, #5
 80080e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80080ec:	0142      	lsls	r2, r0, #5
 80080ee:	4610      	mov	r0, r2
 80080f0:	4619      	mov	r1, r3
 80080f2:	ebb0 0008 	subs.w	r0, r0, r8
 80080f6:	eb61 0109 	sbc.w	r1, r1, r9
 80080fa:	f04f 0200 	mov.w	r2, #0
 80080fe:	f04f 0300 	mov.w	r3, #0
 8008102:	018b      	lsls	r3, r1, #6
 8008104:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008108:	0182      	lsls	r2, r0, #6
 800810a:	1a12      	subs	r2, r2, r0
 800810c:	eb63 0301 	sbc.w	r3, r3, r1
 8008110:	f04f 0000 	mov.w	r0, #0
 8008114:	f04f 0100 	mov.w	r1, #0
 8008118:	00d9      	lsls	r1, r3, #3
 800811a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800811e:	00d0      	lsls	r0, r2, #3
 8008120:	4602      	mov	r2, r0
 8008122:	460b      	mov	r3, r1
 8008124:	eb12 0208 	adds.w	r2, r2, r8
 8008128:	eb43 0309 	adc.w	r3, r3, r9
 800812c:	f04f 0000 	mov.w	r0, #0
 8008130:	f04f 0100 	mov.w	r1, #0
 8008134:	0299      	lsls	r1, r3, #10
 8008136:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800813a:	0290      	lsls	r0, r2, #10
 800813c:	4602      	mov	r2, r0
 800813e:	460b      	mov	r3, r1
 8008140:	4610      	mov	r0, r2
 8008142:	4619      	mov	r1, r3
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	461a      	mov	r2, r3
 8008148:	f04f 0300 	mov.w	r3, #0
 800814c:	f7f8 fdac 	bl	8000ca8 <__aeabi_uldivmod>
 8008150:	4602      	mov	r2, r0
 8008152:	460b      	mov	r3, r1
 8008154:	4613      	mov	r3, r2
 8008156:	60fb      	str	r3, [r7, #12]
 8008158:	e04a      	b.n	80081f0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800815a:	4b31      	ldr	r3, [pc, #196]	; (8008220 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	099b      	lsrs	r3, r3, #6
 8008160:	461a      	mov	r2, r3
 8008162:	f04f 0300 	mov.w	r3, #0
 8008166:	f240 10ff 	movw	r0, #511	; 0x1ff
 800816a:	f04f 0100 	mov.w	r1, #0
 800816e:	ea02 0400 	and.w	r4, r2, r0
 8008172:	ea03 0501 	and.w	r5, r3, r1
 8008176:	4620      	mov	r0, r4
 8008178:	4629      	mov	r1, r5
 800817a:	f04f 0200 	mov.w	r2, #0
 800817e:	f04f 0300 	mov.w	r3, #0
 8008182:	014b      	lsls	r3, r1, #5
 8008184:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008188:	0142      	lsls	r2, r0, #5
 800818a:	4610      	mov	r0, r2
 800818c:	4619      	mov	r1, r3
 800818e:	1b00      	subs	r0, r0, r4
 8008190:	eb61 0105 	sbc.w	r1, r1, r5
 8008194:	f04f 0200 	mov.w	r2, #0
 8008198:	f04f 0300 	mov.w	r3, #0
 800819c:	018b      	lsls	r3, r1, #6
 800819e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80081a2:	0182      	lsls	r2, r0, #6
 80081a4:	1a12      	subs	r2, r2, r0
 80081a6:	eb63 0301 	sbc.w	r3, r3, r1
 80081aa:	f04f 0000 	mov.w	r0, #0
 80081ae:	f04f 0100 	mov.w	r1, #0
 80081b2:	00d9      	lsls	r1, r3, #3
 80081b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80081b8:	00d0      	lsls	r0, r2, #3
 80081ba:	4602      	mov	r2, r0
 80081bc:	460b      	mov	r3, r1
 80081be:	1912      	adds	r2, r2, r4
 80081c0:	eb45 0303 	adc.w	r3, r5, r3
 80081c4:	f04f 0000 	mov.w	r0, #0
 80081c8:	f04f 0100 	mov.w	r1, #0
 80081cc:	0299      	lsls	r1, r3, #10
 80081ce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80081d2:	0290      	lsls	r0, r2, #10
 80081d4:	4602      	mov	r2, r0
 80081d6:	460b      	mov	r3, r1
 80081d8:	4610      	mov	r0, r2
 80081da:	4619      	mov	r1, r3
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	461a      	mov	r2, r3
 80081e0:	f04f 0300 	mov.w	r3, #0
 80081e4:	f7f8 fd60 	bl	8000ca8 <__aeabi_uldivmod>
 80081e8:	4602      	mov	r2, r0
 80081ea:	460b      	mov	r3, r1
 80081ec:	4613      	mov	r3, r2
 80081ee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80081f0:	4b0b      	ldr	r3, [pc, #44]	; (8008220 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	0c1b      	lsrs	r3, r3, #16
 80081f6:	f003 0303 	and.w	r3, r3, #3
 80081fa:	3301      	adds	r3, #1
 80081fc:	005b      	lsls	r3, r3, #1
 80081fe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008200:	68fa      	ldr	r2, [r7, #12]
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	fbb2 f3f3 	udiv	r3, r2, r3
 8008208:	60bb      	str	r3, [r7, #8]
      break;
 800820a:	e002      	b.n	8008212 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800820c:	4b05      	ldr	r3, [pc, #20]	; (8008224 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800820e:	60bb      	str	r3, [r7, #8]
      break;
 8008210:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008212:	68bb      	ldr	r3, [r7, #8]
}
 8008214:	4618      	mov	r0, r3
 8008216:	3710      	adds	r7, #16
 8008218:	46bd      	mov	sp, r7
 800821a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800821e:	bf00      	nop
 8008220:	40023800 	.word	0x40023800
 8008224:	00f42400 	.word	0x00f42400

08008228 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008228:	b480      	push	{r7}
 800822a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800822c:	4b03      	ldr	r3, [pc, #12]	; (800823c <HAL_RCC_GetHCLKFreq+0x14>)
 800822e:	681b      	ldr	r3, [r3, #0]
}
 8008230:	4618      	mov	r0, r3
 8008232:	46bd      	mov	sp, r7
 8008234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008238:	4770      	bx	lr
 800823a:	bf00      	nop
 800823c:	20000000 	.word	0x20000000

08008240 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008244:	f7ff fff0 	bl	8008228 <HAL_RCC_GetHCLKFreq>
 8008248:	4602      	mov	r2, r0
 800824a:	4b05      	ldr	r3, [pc, #20]	; (8008260 <HAL_RCC_GetPCLK1Freq+0x20>)
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	0a9b      	lsrs	r3, r3, #10
 8008250:	f003 0307 	and.w	r3, r3, #7
 8008254:	4903      	ldr	r1, [pc, #12]	; (8008264 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008256:	5ccb      	ldrb	r3, [r1, r3]
 8008258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800825c:	4618      	mov	r0, r3
 800825e:	bd80      	pop	{r7, pc}
 8008260:	40023800 	.word	0x40023800
 8008264:	08017ca0 	.word	0x08017ca0

08008268 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800826c:	f7ff ffdc 	bl	8008228 <HAL_RCC_GetHCLKFreq>
 8008270:	4602      	mov	r2, r0
 8008272:	4b05      	ldr	r3, [pc, #20]	; (8008288 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008274:	689b      	ldr	r3, [r3, #8]
 8008276:	0b5b      	lsrs	r3, r3, #13
 8008278:	f003 0307 	and.w	r3, r3, #7
 800827c:	4903      	ldr	r1, [pc, #12]	; (800828c <HAL_RCC_GetPCLK2Freq+0x24>)
 800827e:	5ccb      	ldrb	r3, [r1, r3]
 8008280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008284:	4618      	mov	r0, r3
 8008286:	bd80      	pop	{r7, pc}
 8008288:	40023800 	.word	0x40023800
 800828c:	08017ca0 	.word	0x08017ca0

08008290 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008290:	b480      	push	{r7}
 8008292:	b083      	sub	sp, #12
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	220f      	movs	r2, #15
 800829e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80082a0:	4b12      	ldr	r3, [pc, #72]	; (80082ec <HAL_RCC_GetClockConfig+0x5c>)
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	f003 0203 	and.w	r2, r3, #3
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80082ac:	4b0f      	ldr	r3, [pc, #60]	; (80082ec <HAL_RCC_GetClockConfig+0x5c>)
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80082b8:	4b0c      	ldr	r3, [pc, #48]	; (80082ec <HAL_RCC_GetClockConfig+0x5c>)
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80082c4:	4b09      	ldr	r3, [pc, #36]	; (80082ec <HAL_RCC_GetClockConfig+0x5c>)
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	08db      	lsrs	r3, r3, #3
 80082ca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80082d2:	4b07      	ldr	r3, [pc, #28]	; (80082f0 <HAL_RCC_GetClockConfig+0x60>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f003 020f 	and.w	r2, r3, #15
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	601a      	str	r2, [r3, #0]
}
 80082de:	bf00      	nop
 80082e0:	370c      	adds	r7, #12
 80082e2:	46bd      	mov	sp, r7
 80082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e8:	4770      	bx	lr
 80082ea:	bf00      	nop
 80082ec:	40023800 	.word	0x40023800
 80082f0:	40023c00 	.word	0x40023c00

080082f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b086      	sub	sp, #24
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80082fc:	2300      	movs	r3, #0
 80082fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008300:	2300      	movs	r3, #0
 8008302:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f003 0301 	and.w	r3, r3, #1
 800830c:	2b00      	cmp	r3, #0
 800830e:	d10b      	bne.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008318:	2b00      	cmp	r3, #0
 800831a:	d105      	bne.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008324:	2b00      	cmp	r3, #0
 8008326:	d075      	beq.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008328:	4bad      	ldr	r3, [pc, #692]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800832a:	2200      	movs	r2, #0
 800832c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800832e:	f7fc fddd 	bl	8004eec <HAL_GetTick>
 8008332:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008334:	e008      	b.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008336:	f7fc fdd9 	bl	8004eec <HAL_GetTick>
 800833a:	4602      	mov	r2, r0
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	1ad3      	subs	r3, r2, r3
 8008340:	2b02      	cmp	r3, #2
 8008342:	d901      	bls.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008344:	2303      	movs	r3, #3
 8008346:	e18b      	b.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008348:	4ba6      	ldr	r3, [pc, #664]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008350:	2b00      	cmp	r3, #0
 8008352:	d1f0      	bne.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f003 0301 	and.w	r3, r3, #1
 800835c:	2b00      	cmp	r3, #0
 800835e:	d009      	beq.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	019a      	lsls	r2, r3, #6
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	689b      	ldr	r3, [r3, #8]
 800836a:	071b      	lsls	r3, r3, #28
 800836c:	499d      	ldr	r1, [pc, #628]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800836e:	4313      	orrs	r3, r2
 8008370:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f003 0302 	and.w	r3, r3, #2
 800837c:	2b00      	cmp	r3, #0
 800837e:	d01f      	beq.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008380:	4b98      	ldr	r3, [pc, #608]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008382:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008386:	0f1b      	lsrs	r3, r3, #28
 8008388:	f003 0307 	and.w	r3, r3, #7
 800838c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	019a      	lsls	r2, r3, #6
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	061b      	lsls	r3, r3, #24
 800839a:	431a      	orrs	r2, r3
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	071b      	lsls	r3, r3, #28
 80083a0:	4990      	ldr	r1, [pc, #576]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80083a2:	4313      	orrs	r3, r2
 80083a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80083a8:	4b8e      	ldr	r3, [pc, #568]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80083aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083ae:	f023 021f 	bic.w	r2, r3, #31
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	69db      	ldr	r3, [r3, #28]
 80083b6:	3b01      	subs	r3, #1
 80083b8:	498a      	ldr	r1, [pc, #552]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80083ba:	4313      	orrs	r3, r2
 80083bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d00d      	beq.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	019a      	lsls	r2, r3, #6
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	68db      	ldr	r3, [r3, #12]
 80083d6:	061b      	lsls	r3, r3, #24
 80083d8:	431a      	orrs	r2, r3
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	689b      	ldr	r3, [r3, #8]
 80083de:	071b      	lsls	r3, r3, #28
 80083e0:	4980      	ldr	r1, [pc, #512]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80083e2:	4313      	orrs	r3, r2
 80083e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80083e8:	4b7d      	ldr	r3, [pc, #500]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80083ea:	2201      	movs	r2, #1
 80083ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80083ee:	f7fc fd7d 	bl	8004eec <HAL_GetTick>
 80083f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80083f4:	e008      	b.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80083f6:	f7fc fd79 	bl	8004eec <HAL_GetTick>
 80083fa:	4602      	mov	r2, r0
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	1ad3      	subs	r3, r2, r3
 8008400:	2b02      	cmp	r3, #2
 8008402:	d901      	bls.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008404:	2303      	movs	r3, #3
 8008406:	e12b      	b.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008408:	4b76      	ldr	r3, [pc, #472]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008410:	2b00      	cmp	r3, #0
 8008412:	d0f0      	beq.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f003 0304 	and.w	r3, r3, #4
 800841c:	2b00      	cmp	r3, #0
 800841e:	d105      	bne.n	800842c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008428:	2b00      	cmp	r3, #0
 800842a:	d079      	beq.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800842c:	4b6e      	ldr	r3, [pc, #440]	; (80085e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800842e:	2200      	movs	r2, #0
 8008430:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008432:	f7fc fd5b 	bl	8004eec <HAL_GetTick>
 8008436:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008438:	e008      	b.n	800844c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800843a:	f7fc fd57 	bl	8004eec <HAL_GetTick>
 800843e:	4602      	mov	r2, r0
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	1ad3      	subs	r3, r2, r3
 8008444:	2b02      	cmp	r3, #2
 8008446:	d901      	bls.n	800844c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008448:	2303      	movs	r3, #3
 800844a:	e109      	b.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800844c:	4b65      	ldr	r3, [pc, #404]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008454:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008458:	d0ef      	beq.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f003 0304 	and.w	r3, r3, #4
 8008462:	2b00      	cmp	r3, #0
 8008464:	d020      	beq.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008466:	4b5f      	ldr	r3, [pc, #380]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800846c:	0f1b      	lsrs	r3, r3, #28
 800846e:	f003 0307 	and.w	r3, r3, #7
 8008472:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	691b      	ldr	r3, [r3, #16]
 8008478:	019a      	lsls	r2, r3, #6
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	695b      	ldr	r3, [r3, #20]
 800847e:	061b      	lsls	r3, r3, #24
 8008480:	431a      	orrs	r2, r3
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	071b      	lsls	r3, r3, #28
 8008486:	4957      	ldr	r1, [pc, #348]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008488:	4313      	orrs	r3, r2
 800848a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800848e:	4b55      	ldr	r3, [pc, #340]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008490:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008494:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6a1b      	ldr	r3, [r3, #32]
 800849c:	3b01      	subs	r3, #1
 800849e:	021b      	lsls	r3, r3, #8
 80084a0:	4950      	ldr	r1, [pc, #320]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80084a2:	4313      	orrs	r3, r2
 80084a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f003 0308 	and.w	r3, r3, #8
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d01e      	beq.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80084b4:	4b4b      	ldr	r3, [pc, #300]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80084b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084ba:	0e1b      	lsrs	r3, r3, #24
 80084bc:	f003 030f 	and.w	r3, r3, #15
 80084c0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	691b      	ldr	r3, [r3, #16]
 80084c6:	019a      	lsls	r2, r3, #6
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	061b      	lsls	r3, r3, #24
 80084cc:	431a      	orrs	r2, r3
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	699b      	ldr	r3, [r3, #24]
 80084d2:	071b      	lsls	r3, r3, #28
 80084d4:	4943      	ldr	r1, [pc, #268]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80084d6:	4313      	orrs	r3, r2
 80084d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80084dc:	4b41      	ldr	r3, [pc, #260]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80084de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ea:	493e      	ldr	r1, [pc, #248]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80084ec:	4313      	orrs	r3, r2
 80084ee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80084f2:	4b3d      	ldr	r3, [pc, #244]	; (80085e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80084f4:	2201      	movs	r2, #1
 80084f6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80084f8:	f7fc fcf8 	bl	8004eec <HAL_GetTick>
 80084fc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80084fe:	e008      	b.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008500:	f7fc fcf4 	bl	8004eec <HAL_GetTick>
 8008504:	4602      	mov	r2, r0
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	1ad3      	subs	r3, r2, r3
 800850a:	2b02      	cmp	r3, #2
 800850c:	d901      	bls.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800850e:	2303      	movs	r3, #3
 8008510:	e0a6      	b.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008512:	4b34      	ldr	r3, [pc, #208]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800851a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800851e:	d1ef      	bne.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f003 0320 	and.w	r3, r3, #32
 8008528:	2b00      	cmp	r3, #0
 800852a:	f000 808d 	beq.w	8008648 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800852e:	2300      	movs	r3, #0
 8008530:	60fb      	str	r3, [r7, #12]
 8008532:	4b2c      	ldr	r3, [pc, #176]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008536:	4a2b      	ldr	r2, [pc, #172]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800853c:	6413      	str	r3, [r2, #64]	; 0x40
 800853e:	4b29      	ldr	r3, [pc, #164]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008546:	60fb      	str	r3, [r7, #12]
 8008548:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800854a:	4b28      	ldr	r3, [pc, #160]	; (80085ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a27      	ldr	r2, [pc, #156]	; (80085ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8008550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008554:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008556:	f7fc fcc9 	bl	8004eec <HAL_GetTick>
 800855a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800855c:	e008      	b.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800855e:	f7fc fcc5 	bl	8004eec <HAL_GetTick>
 8008562:	4602      	mov	r2, r0
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	1ad3      	subs	r3, r2, r3
 8008568:	2b02      	cmp	r3, #2
 800856a:	d901      	bls.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 800856c:	2303      	movs	r3, #3
 800856e:	e077      	b.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008570:	4b1e      	ldr	r3, [pc, #120]	; (80085ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008578:	2b00      	cmp	r3, #0
 800857a:	d0f0      	beq.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800857c:	4b19      	ldr	r3, [pc, #100]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800857e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008580:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008584:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d039      	beq.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008590:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008594:	693a      	ldr	r2, [r7, #16]
 8008596:	429a      	cmp	r2, r3
 8008598:	d032      	beq.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800859a:	4b12      	ldr	r3, [pc, #72]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800859c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800859e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085a2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80085a4:	4b12      	ldr	r3, [pc, #72]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80085a6:	2201      	movs	r2, #1
 80085a8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80085aa:	4b11      	ldr	r3, [pc, #68]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80085ac:	2200      	movs	r2, #0
 80085ae:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80085b0:	4a0c      	ldr	r2, [pc, #48]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80085b6:	4b0b      	ldr	r3, [pc, #44]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80085b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085ba:	f003 0301 	and.w	r3, r3, #1
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d11e      	bne.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80085c2:	f7fc fc93 	bl	8004eec <HAL_GetTick>
 80085c6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80085c8:	e014      	b.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80085ca:	f7fc fc8f 	bl	8004eec <HAL_GetTick>
 80085ce:	4602      	mov	r2, r0
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	1ad3      	subs	r3, r2, r3
 80085d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80085d8:	4293      	cmp	r3, r2
 80085da:	d90b      	bls.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 80085dc:	2303      	movs	r3, #3
 80085de:	e03f      	b.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 80085e0:	42470068 	.word	0x42470068
 80085e4:	40023800 	.word	0x40023800
 80085e8:	42470070 	.word	0x42470070
 80085ec:	40007000 	.word	0x40007000
 80085f0:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80085f4:	4b1c      	ldr	r3, [pc, #112]	; (8008668 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80085f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085f8:	f003 0302 	and.w	r3, r3, #2
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d0e4      	beq.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008604:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008608:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800860c:	d10d      	bne.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x336>
 800860e:	4b16      	ldr	r3, [pc, #88]	; (8008668 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008610:	689b      	ldr	r3, [r3, #8]
 8008612:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800861a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800861e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008622:	4911      	ldr	r1, [pc, #68]	; (8008668 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008624:	4313      	orrs	r3, r2
 8008626:	608b      	str	r3, [r1, #8]
 8008628:	e005      	b.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800862a:	4b0f      	ldr	r3, [pc, #60]	; (8008668 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800862c:	689b      	ldr	r3, [r3, #8]
 800862e:	4a0e      	ldr	r2, [pc, #56]	; (8008668 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008630:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008634:	6093      	str	r3, [r2, #8]
 8008636:	4b0c      	ldr	r3, [pc, #48]	; (8008668 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008638:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800863e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008642:	4909      	ldr	r1, [pc, #36]	; (8008668 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008644:	4313      	orrs	r3, r2
 8008646:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f003 0310 	and.w	r3, r3, #16
 8008650:	2b00      	cmp	r3, #0
 8008652:	d004      	beq.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800865a:	4b04      	ldr	r3, [pc, #16]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800865c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800865e:	2300      	movs	r3, #0
}
 8008660:	4618      	mov	r0, r3
 8008662:	3718      	adds	r7, #24
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}
 8008668:	40023800 	.word	0x40023800
 800866c:	424711e0 	.word	0x424711e0

08008670 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b082      	sub	sp, #8
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d101      	bne.n	8008682 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800867e:	2301      	movs	r3, #1
 8008680:	e083      	b.n	800878a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	7f5b      	ldrb	r3, [r3, #29]
 8008686:	b2db      	uxtb	r3, r3
 8008688:	2b00      	cmp	r3, #0
 800868a:	d105      	bne.n	8008698 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2200      	movs	r2, #0
 8008690:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f7f9 fb16 	bl	8001cc4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2202      	movs	r2, #2
 800869c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	22ca      	movs	r2, #202	; 0xca
 80086a4:	625a      	str	r2, [r3, #36]	; 0x24
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	2253      	movs	r2, #83	; 0x53
 80086ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 fb84 	bl	8008dbc <RTC_EnterInitMode>
 80086b4:	4603      	mov	r3, r0
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d008      	beq.n	80086cc <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	22ff      	movs	r2, #255	; 0xff
 80086c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2204      	movs	r2, #4
 80086c6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80086c8:	2301      	movs	r3, #1
 80086ca:	e05e      	b.n	800878a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	6812      	ldr	r2, [r2, #0]
 80086d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80086da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086de:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	6899      	ldr	r1, [r3, #8]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	685a      	ldr	r2, [r3, #4]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	691b      	ldr	r3, [r3, #16]
 80086ee:	431a      	orrs	r2, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	695b      	ldr	r3, [r3, #20]
 80086f4:	431a      	orrs	r2, r3
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	430a      	orrs	r2, r1
 80086fc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	68d2      	ldr	r2, [r2, #12]
 8008706:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	6919      	ldr	r1, [r3, #16]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	041a      	lsls	r2, r3, #16
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	430a      	orrs	r2, r1
 800871a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	68da      	ldr	r2, [r3, #12]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800872a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	689b      	ldr	r3, [r3, #8]
 8008732:	f003 0320 	and.w	r3, r3, #32
 8008736:	2b00      	cmp	r3, #0
 8008738:	d10e      	bne.n	8008758 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f000 fb16 	bl	8008d6c <HAL_RTC_WaitForSynchro>
 8008740:	4603      	mov	r3, r0
 8008742:	2b00      	cmp	r3, #0
 8008744:	d008      	beq.n	8008758 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	22ff      	movs	r2, #255	; 0xff
 800874c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2204      	movs	r2, #4
 8008752:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8008754:	2301      	movs	r3, #1
 8008756:	e018      	b.n	800878a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008766:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	699a      	ldr	r2, [r3, #24]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	430a      	orrs	r2, r1
 8008778:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	22ff      	movs	r2, #255	; 0xff
 8008780:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2201      	movs	r2, #1
 8008786:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008788:	2300      	movs	r3, #0
  }
}
 800878a:	4618      	mov	r0, r3
 800878c:	3708      	adds	r7, #8
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}

08008792 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008792:	b590      	push	{r4, r7, lr}
 8008794:	b087      	sub	sp, #28
 8008796:	af00      	add	r7, sp, #0
 8008798:	60f8      	str	r0, [r7, #12]
 800879a:	60b9      	str	r1, [r7, #8]
 800879c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800879e:	2300      	movs	r3, #0
 80087a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	7f1b      	ldrb	r3, [r3, #28]
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d101      	bne.n	80087ae <HAL_RTC_SetTime+0x1c>
 80087aa:	2302      	movs	r3, #2
 80087ac:	e0aa      	b.n	8008904 <HAL_RTC_SetTime+0x172>
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2201      	movs	r2, #1
 80087b2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2202      	movs	r2, #2
 80087b8:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d126      	bne.n	800880e <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	689b      	ldr	r3, [r3, #8]
 80087c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d102      	bne.n	80087d4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	2200      	movs	r2, #0
 80087d2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	781b      	ldrb	r3, [r3, #0]
 80087d8:	4618      	mov	r0, r3
 80087da:	f000 fb1b 	bl	8008e14 <RTC_ByteToBcd2>
 80087de:	4603      	mov	r3, r0
 80087e0:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	785b      	ldrb	r3, [r3, #1]
 80087e6:	4618      	mov	r0, r3
 80087e8:	f000 fb14 	bl	8008e14 <RTC_ByteToBcd2>
 80087ec:	4603      	mov	r3, r0
 80087ee:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80087f0:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	789b      	ldrb	r3, [r3, #2]
 80087f6:	4618      	mov	r0, r3
 80087f8:	f000 fb0c 	bl	8008e14 <RTC_ByteToBcd2>
 80087fc:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80087fe:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	78db      	ldrb	r3, [r3, #3]
 8008806:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008808:	4313      	orrs	r3, r2
 800880a:	617b      	str	r3, [r7, #20]
 800880c:	e018      	b.n	8008840 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008818:	2b00      	cmp	r3, #0
 800881a:	d102      	bne.n	8008822 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	2200      	movs	r2, #0
 8008820:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	785b      	ldrb	r3, [r3, #1]
 800882c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800882e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8008830:	68ba      	ldr	r2, [r7, #8]
 8008832:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8008834:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	78db      	ldrb	r3, [r3, #3]
 800883a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800883c:	4313      	orrs	r3, r2
 800883e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	22ca      	movs	r2, #202	; 0xca
 8008846:	625a      	str	r2, [r3, #36]	; 0x24
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	2253      	movs	r2, #83	; 0x53
 800884e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008850:	68f8      	ldr	r0, [r7, #12]
 8008852:	f000 fab3 	bl	8008dbc <RTC_EnterInitMode>
 8008856:	4603      	mov	r3, r0
 8008858:	2b00      	cmp	r3, #0
 800885a:	d00b      	beq.n	8008874 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	22ff      	movs	r2, #255	; 0xff
 8008862:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2204      	movs	r2, #4
 8008868:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2200      	movs	r2, #0
 800886e:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008870:	2301      	movs	r3, #1
 8008872:	e047      	b.n	8008904 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800887e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008882:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	689a      	ldr	r2, [r3, #8]
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008892:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	6899      	ldr	r1, [r3, #8]
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	68da      	ldr	r2, [r3, #12]
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	691b      	ldr	r3, [r3, #16]
 80088a2:	431a      	orrs	r2, r3
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	430a      	orrs	r2, r1
 80088aa:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	68da      	ldr	r2, [r3, #12]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80088ba:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	f003 0320 	and.w	r3, r3, #32
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d111      	bne.n	80088ee <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80088ca:	68f8      	ldr	r0, [r7, #12]
 80088cc:	f000 fa4e 	bl	8008d6c <HAL_RTC_WaitForSynchro>
 80088d0:	4603      	mov	r3, r0
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d00b      	beq.n	80088ee <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	22ff      	movs	r2, #255	; 0xff
 80088dc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2204      	movs	r2, #4
 80088e2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2200      	movs	r2, #0
 80088e8:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80088ea:	2301      	movs	r3, #1
 80088ec:	e00a      	b.n	8008904 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	22ff      	movs	r2, #255	; 0xff
 80088f4:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2201      	movs	r2, #1
 80088fa:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2200      	movs	r2, #0
 8008900:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8008902:	2300      	movs	r3, #0
  }
}
 8008904:	4618      	mov	r0, r3
 8008906:	371c      	adds	r7, #28
 8008908:	46bd      	mov	sp, r7
 800890a:	bd90      	pop	{r4, r7, pc}

0800890c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800890c:	b590      	push	{r4, r7, lr}
 800890e:	b087      	sub	sp, #28
 8008910:	af00      	add	r7, sp, #0
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	60b9      	str	r1, [r7, #8]
 8008916:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008918:	2300      	movs	r3, #0
 800891a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	7f1b      	ldrb	r3, [r3, #28]
 8008920:	2b01      	cmp	r3, #1
 8008922:	d101      	bne.n	8008928 <HAL_RTC_SetDate+0x1c>
 8008924:	2302      	movs	r3, #2
 8008926:	e094      	b.n	8008a52 <HAL_RTC_SetDate+0x146>
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2201      	movs	r2, #1
 800892c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2202      	movs	r2, #2
 8008932:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d10e      	bne.n	8008958 <HAL_RTC_SetDate+0x4c>
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	785b      	ldrb	r3, [r3, #1]
 800893e:	f003 0310 	and.w	r3, r3, #16
 8008942:	2b00      	cmp	r3, #0
 8008944:	d008      	beq.n	8008958 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	785b      	ldrb	r3, [r3, #1]
 800894a:	f023 0310 	bic.w	r3, r3, #16
 800894e:	b2db      	uxtb	r3, r3
 8008950:	330a      	adds	r3, #10
 8008952:	b2da      	uxtb	r2, r3
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d11c      	bne.n	8008998 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	78db      	ldrb	r3, [r3, #3]
 8008962:	4618      	mov	r0, r3
 8008964:	f000 fa56 	bl	8008e14 <RTC_ByteToBcd2>
 8008968:	4603      	mov	r3, r0
 800896a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	785b      	ldrb	r3, [r3, #1]
 8008970:	4618      	mov	r0, r3
 8008972:	f000 fa4f 	bl	8008e14 <RTC_ByteToBcd2>
 8008976:	4603      	mov	r3, r0
 8008978:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800897a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	789b      	ldrb	r3, [r3, #2]
 8008980:	4618      	mov	r0, r3
 8008982:	f000 fa47 	bl	8008e14 <RTC_ByteToBcd2>
 8008986:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008988:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008992:	4313      	orrs	r3, r2
 8008994:	617b      	str	r3, [r7, #20]
 8008996:	e00e      	b.n	80089b6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	78db      	ldrb	r3, [r3, #3]
 800899c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	785b      	ldrb	r3, [r3, #1]
 80089a2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80089a4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80089a6:	68ba      	ldr	r2, [r7, #8]
 80089a8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80089aa:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80089b2:	4313      	orrs	r3, r2
 80089b4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	22ca      	movs	r2, #202	; 0xca
 80089bc:	625a      	str	r2, [r3, #36]	; 0x24
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	2253      	movs	r2, #83	; 0x53
 80089c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80089c6:	68f8      	ldr	r0, [r7, #12]
 80089c8:	f000 f9f8 	bl	8008dbc <RTC_EnterInitMode>
 80089cc:	4603      	mov	r3, r0
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d00b      	beq.n	80089ea <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	22ff      	movs	r2, #255	; 0xff
 80089d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2204      	movs	r2, #4
 80089de:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2200      	movs	r2, #0
 80089e4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	e033      	b.n	8008a52 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80089f4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80089f8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	68da      	ldr	r2, [r3, #12]
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a08:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	f003 0320 	and.w	r3, r3, #32
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d111      	bne.n	8008a3c <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008a18:	68f8      	ldr	r0, [r7, #12]
 8008a1a:	f000 f9a7 	bl	8008d6c <HAL_RTC_WaitForSynchro>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d00b      	beq.n	8008a3c <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	22ff      	movs	r2, #255	; 0xff
 8008a2a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2204      	movs	r2, #4
 8008a30:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2200      	movs	r2, #0
 8008a36:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	e00a      	b.n	8008a52 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	22ff      	movs	r2, #255	; 0xff
 8008a42:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2201      	movs	r2, #1
 8008a48:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008a50:	2300      	movs	r3, #0
  }
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	371c      	adds	r7, #28
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd90      	pop	{r4, r7, pc}
	...

08008a5c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008a5c:	b590      	push	{r4, r7, lr}
 8008a5e:	b089      	sub	sp, #36	; 0x24
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	60b9      	str	r1, [r7, #8]
 8008a66:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	61fb      	str	r3, [r7, #28]
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8008a70:	4b93      	ldr	r3, [pc, #588]	; (8008cc0 <HAL_RTC_SetAlarm_IT+0x264>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a93      	ldr	r2, [pc, #588]	; (8008cc4 <HAL_RTC_SetAlarm_IT+0x268>)
 8008a76:	fba2 2303 	umull	r2, r3, r2, r3
 8008a7a:	0adb      	lsrs	r3, r3, #11
 8008a7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008a80:	fb02 f303 	mul.w	r3, r2, r3
 8008a84:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	7f1b      	ldrb	r3, [r3, #28]
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	d101      	bne.n	8008a92 <HAL_RTC_SetAlarm_IT+0x36>
 8008a8e:	2302      	movs	r3, #2
 8008a90:	e111      	b.n	8008cb6 <HAL_RTC_SetAlarm_IT+0x25a>
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2201      	movs	r2, #1
 8008a96:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2202      	movs	r2, #2
 8008a9c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d137      	bne.n	8008b14 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d102      	bne.n	8008ab8 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	781b      	ldrb	r3, [r3, #0]
 8008abc:	4618      	mov	r0, r3
 8008abe:	f000 f9a9 	bl	8008e14 <RTC_ByteToBcd2>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	785b      	ldrb	r3, [r3, #1]
 8008aca:	4618      	mov	r0, r3
 8008acc:	f000 f9a2 	bl	8008e14 <RTC_ByteToBcd2>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8008ad4:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	789b      	ldrb	r3, [r3, #2]
 8008ada:	4618      	mov	r0, r3
 8008adc:	f000 f99a 	bl	8008e14 <RTC_ByteToBcd2>
 8008ae0:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008ae2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	78db      	ldrb	r3, [r3, #3]
 8008aea:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008aec:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008af6:	4618      	mov	r0, r3
 8008af8:	f000 f98c 	bl	8008e14 <RTC_ByteToBcd2>
 8008afc:	4603      	mov	r3, r0
 8008afe:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008b00:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008b08:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	61fb      	str	r3, [r7, #28]
 8008b12:	e023      	b.n	8008b5c <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d102      	bne.n	8008b28 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	2200      	movs	r2, #0
 8008b26:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	785b      	ldrb	r3, [r3, #1]
 8008b32:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8008b34:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008b36:	68ba      	ldr	r2, [r7, #8]
 8008b38:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008b3a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	78db      	ldrb	r3, [r3, #3]
 8008b40:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008b42:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008b4a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008b4c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008b52:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	685a      	ldr	r2, [r3, #4]
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	699b      	ldr	r3, [r3, #24]
 8008b64:	4313      	orrs	r3, r2
 8008b66:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	22ca      	movs	r2, #202	; 0xca
 8008b6e:	625a      	str	r2, [r3, #36]	; 0x24
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	2253      	movs	r2, #83	; 0x53
 8008b76:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b80:	d141      	bne.n	8008c06 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	689a      	ldr	r2, [r3, #8]
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b90:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	68db      	ldr	r3, [r3, #12]
 8008b98:	b2da      	uxtb	r2, r3
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8008ba2:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	1e5a      	subs	r2, r3, #1
 8008ba8:	617a      	str	r2, [r7, #20]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d10b      	bne.n	8008bc6 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	22ff      	movs	r2, #255	; 0xff
 8008bb4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2203      	movs	r2, #3
 8008bba:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008bc2:	2303      	movs	r3, #3
 8008bc4:	e077      	b.n	8008cb6 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	68db      	ldr	r3, [r3, #12]
 8008bcc:	f003 0301 	and.w	r3, r3, #1
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d0e7      	beq.n	8008ba4 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	69fa      	ldr	r2, [r7, #28]
 8008bda:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	69ba      	ldr	r2, [r7, #24]
 8008be2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	689a      	ldr	r2, [r3, #8]
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008bf2:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	689a      	ldr	r2, [r3, #8]
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008c02:	609a      	str	r2, [r3, #8]
 8008c04:	e040      	b.n	8008c88 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	689a      	ldr	r2, [r3, #8]
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008c14:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	68db      	ldr	r3, [r3, #12]
 8008c1c:	b2da      	uxtb	r2, r3
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f462 7220 	orn	r2, r2, #640	; 0x280
 8008c26:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	1e5a      	subs	r2, r3, #1
 8008c2c:	617a      	str	r2, [r7, #20]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d10b      	bne.n	8008c4a <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	22ff      	movs	r2, #255	; 0xff
 8008c38:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2203      	movs	r2, #3
 8008c3e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2200      	movs	r2, #0
 8008c44:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008c46:	2303      	movs	r3, #3
 8008c48:	e035      	b.n	8008cb6 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	68db      	ldr	r3, [r3, #12]
 8008c50:	f003 0302 	and.w	r3, r3, #2
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d0e7      	beq.n	8008c28 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	69fa      	ldr	r2, [r7, #28]
 8008c5e:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	69ba      	ldr	r2, [r7, #24]
 8008c66:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	689a      	ldr	r2, [r3, #8]
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c76:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	689a      	ldr	r2, [r3, #8]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008c86:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8008c88:	4b0f      	ldr	r3, [pc, #60]	; (8008cc8 <HAL_RTC_SetAlarm_IT+0x26c>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a0e      	ldr	r2, [pc, #56]	; (8008cc8 <HAL_RTC_SetAlarm_IT+0x26c>)
 8008c8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c92:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8008c94:	4b0c      	ldr	r3, [pc, #48]	; (8008cc8 <HAL_RTC_SetAlarm_IT+0x26c>)
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	4a0b      	ldr	r2, [pc, #44]	; (8008cc8 <HAL_RTC_SetAlarm_IT+0x26c>)
 8008c9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c9e:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	22ff      	movs	r2, #255	; 0xff
 8008ca6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2201      	movs	r2, #1
 8008cac:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008cb4:	2300      	movs	r3, #0
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3724      	adds	r7, #36	; 0x24
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd90      	pop	{r4, r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	20000000 	.word	0x20000000
 8008cc4:	10624dd3 	.word	0x10624dd3
 8008cc8:	40013c00 	.word	0x40013c00

08008ccc <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	689b      	ldr	r3, [r3, #8]
 8008cda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d012      	beq.n	8008d08 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d00b      	beq.n	8008d08 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 f831 	bl	8008d58 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	68db      	ldr	r3, [r3, #12]
 8008cfc:	b2da      	uxtb	r2, r3
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8008d06:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d012      	beq.n	8008d3c <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	68db      	ldr	r3, [r3, #12]
 8008d1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d00b      	beq.n	8008d3c <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f000 f9ab 	bl	8009080 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	b2da      	uxtb	r2, r3
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f462 7220 	orn	r2, r2, #640	; 0x280
 8008d3a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8008d3c:	4b05      	ldr	r3, [pc, #20]	; (8008d54 <HAL_RTC_AlarmIRQHandler+0x88>)
 8008d3e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008d42:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2201      	movs	r2, #1
 8008d48:	775a      	strb	r2, [r3, #29]
}
 8008d4a:	bf00      	nop
 8008d4c:	3708      	adds	r7, #8
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	bf00      	nop
 8008d54:	40013c00 	.word	0x40013c00

08008d58 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b083      	sub	sp, #12
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8008d60:	bf00      	nop
 8008d62:	370c      	adds	r7, #12
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008d74:	2300      	movs	r3, #0
 8008d76:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	68da      	ldr	r2, [r3, #12]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008d86:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008d88:	f7fc f8b0 	bl	8004eec <HAL_GetTick>
 8008d8c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008d8e:	e009      	b.n	8008da4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008d90:	f7fc f8ac 	bl	8004eec <HAL_GetTick>
 8008d94:	4602      	mov	r2, r0
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	1ad3      	subs	r3, r2, r3
 8008d9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d9e:	d901      	bls.n	8008da4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008da0:	2303      	movs	r3, #3
 8008da2:	e007      	b.n	8008db4 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	68db      	ldr	r3, [r3, #12]
 8008daa:	f003 0320 	and.w	r3, r3, #32
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d0ee      	beq.n	8008d90 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008db2:	2300      	movs	r3, #0
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3710      	adds	r7, #16
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b084      	sub	sp, #16
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	68db      	ldr	r3, [r3, #12]
 8008dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d119      	bne.n	8008e0a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f04f 32ff 	mov.w	r2, #4294967295
 8008dde:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008de0:	f7fc f884 	bl	8004eec <HAL_GetTick>
 8008de4:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008de6:	e009      	b.n	8008dfc <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008de8:	f7fc f880 	bl	8004eec <HAL_GetTick>
 8008dec:	4602      	mov	r2, r0
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	1ad3      	subs	r3, r2, r3
 8008df2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008df6:	d901      	bls.n	8008dfc <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008df8:	2303      	movs	r3, #3
 8008dfa:	e007      	b.n	8008e0c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	68db      	ldr	r3, [r3, #12]
 8008e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d0ee      	beq.n	8008de8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008e0a:	2300      	movs	r3, #0
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3710      	adds	r7, #16
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b085      	sub	sp, #20
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8008e22:	e005      	b.n	8008e30 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	3301      	adds	r3, #1
 8008e28:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8008e2a:	79fb      	ldrb	r3, [r7, #7]
 8008e2c:	3b0a      	subs	r3, #10
 8008e2e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8008e30:	79fb      	ldrb	r3, [r7, #7]
 8008e32:	2b09      	cmp	r3, #9
 8008e34:	d8f6      	bhi.n	8008e24 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	011b      	lsls	r3, r3, #4
 8008e3c:	b2da      	uxtb	r2, r3
 8008e3e:	79fb      	ldrb	r3, [r7, #7]
 8008e40:	4313      	orrs	r3, r2
 8008e42:	b2db      	uxtb	r3, r3
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3714      	adds	r7, #20
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr

08008e50 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b087      	sub	sp, #28
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	60b9      	str	r1, [r7, #8]
 8008e5a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	7f1b      	ldrb	r3, [r3, #28]
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d101      	bne.n	8008e68 <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 8008e64:	2302      	movs	r3, #2
 8008e66:	e0a6      	b.n	8008fb6 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2202      	movs	r2, #2
 8008e72:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	22ca      	movs	r2, #202	; 0xca
 8008e7a:	625a      	str	r2, [r3, #36]	; 0x24
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	2253      	movs	r2, #83	; 0x53
 8008e82:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	689b      	ldr	r3, [r3, #8]
 8008e8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d022      	beq.n	8008ed8 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 8008e92:	4b4c      	ldr	r3, [pc, #304]	; (8008fc4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a4c      	ldr	r2, [pc, #304]	; (8008fc8 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8008e98:	fba2 2303 	umull	r2, r3, r2, r3
 8008e9c:	0adb      	lsrs	r3, r3, #11
 8008e9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008ea2:	fb02 f303 	mul.w	r3, r2, r3
 8008ea6:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	1e5a      	subs	r2, r3, #1
 8008eac:	617a      	str	r2, [r7, #20]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d10b      	bne.n	8008eca <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	22ff      	movs	r2, #255	; 0xff
 8008eb8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2203      	movs	r2, #3
 8008ebe:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008ec6:	2303      	movs	r3, #3
 8008ec8:	e075      	b.n	8008fb6 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	68db      	ldr	r3, [r3, #12]
 8008ed0:	f003 0304 	and.w	r3, r3, #4
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d1e7      	bne.n	8008ea8 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	689a      	ldr	r2, [r3, #8]
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ee6:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 8008ee8:	4b36      	ldr	r3, [pc, #216]	; (8008fc4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4a36      	ldr	r2, [pc, #216]	; (8008fc8 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8008eee:	fba2 2303 	umull	r2, r3, r2, r3
 8008ef2:	0adb      	lsrs	r3, r3, #11
 8008ef4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008ef8:	fb02 f303 	mul.w	r3, r2, r3
 8008efc:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	1e5a      	subs	r2, r3, #1
 8008f02:	617a      	str	r2, [r7, #20]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d10b      	bne.n	8008f20 <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	22ff      	movs	r2, #255	; 0xff
 8008f0e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	2203      	movs	r2, #3
 8008f14:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8008f1c:	2303      	movs	r3, #3
 8008f1e:	e04a      	b.n	8008fb6 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	68db      	ldr	r3, [r3, #12]
 8008f26:	f003 0304 	and.w	r3, r3, #4
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d0e7      	beq.n	8008efe <HAL_RTCEx_SetWakeUpTimer_IT+0xae>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	68ba      	ldr	r2, [r7, #8]
 8008f34:	615a      	str	r2, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	689a      	ldr	r2, [r3, #8]
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f022 0207 	bic.w	r2, r2, #7
 8008f44:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	6899      	ldr	r1, [r3, #8]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	430a      	orrs	r2, r1
 8008f54:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8008f56:	4b1d      	ldr	r3, [pc, #116]	; (8008fcc <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4a1c      	ldr	r2, [pc, #112]	; (8008fcc <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8008f5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008f60:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 8008f62:	4b1a      	ldr	r3, [pc, #104]	; (8008fcc <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	4a19      	ldr	r2, [pc, #100]	; (8008fcc <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8008f68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008f6c:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	68db      	ldr	r3, [r3, #12]
 8008f74:	b2da      	uxtb	r2, r3
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8008f7e:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	689a      	ldr	r2, [r3, #8]
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008f8e:	609a      	str	r2, [r3, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	689a      	ldr	r2, [r3, #8]
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008f9e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	22ff      	movs	r2, #255	; 0xff
 8008fa6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2201      	movs	r2, #1
 8008fac:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008fb4:	2300      	movs	r3, #0
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	371c      	adds	r7, #28
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc0:	4770      	bx	lr
 8008fc2:	bf00      	nop
 8008fc4:	20000000 	.word	0x20000000
 8008fc8:	10624dd3 	.word	0x10624dd3
 8008fcc:	40013c00 	.word	0x40013c00

08008fd0 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b084      	sub	sp, #16
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	7f1b      	ldrb	r3, [r3, #28]
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d101      	bne.n	8008fe8 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 8008fe4:	2302      	movs	r3, #2
 8008fe6:	e047      	b.n	8009078 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2201      	movs	r2, #1
 8008fec:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2202      	movs	r2, #2
 8008ff2:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	22ca      	movs	r2, #202	; 0xca
 8008ffa:	625a      	str	r2, [r3, #36]	; 0x24
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	2253      	movs	r2, #83	; 0x53
 8009002:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	689a      	ldr	r2, [r3, #8]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009012:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	689a      	ldr	r2, [r3, #8]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009022:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009024:	f7fb ff62 	bl	8004eec <HAL_GetTick>
 8009028:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800902a:	e013      	b.n	8009054 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800902c:	f7fb ff5e 	bl	8004eec <HAL_GetTick>
 8009030:	4602      	mov	r2, r0
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	1ad3      	subs	r3, r2, r3
 8009036:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800903a:	d90b      	bls.n	8009054 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	22ff      	movs	r2, #255	; 0xff
 8009042:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2203      	movs	r2, #3
 8009048:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2200      	movs	r2, #0
 800904e:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8009050:	2303      	movs	r3, #3
 8009052:	e011      	b.n	8009078 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	68db      	ldr	r3, [r3, #12]
 800905a:	f003 0304 	and.w	r3, r3, #4
 800905e:	2b00      	cmp	r3, #0
 8009060:	d0e4      	beq.n	800902c <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	22ff      	movs	r2, #255	; 0xff
 8009068:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2201      	movs	r2, #1
 800906e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2200      	movs	r2, #0
 8009074:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009076:	2300      	movs	r3, #0
}
 8009078:	4618      	mov	r0, r3
 800907a:	3710      	adds	r7, #16
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8009080:	b480      	push	{r7}
 8009082:	b083      	sub	sp, #12
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8009088:	bf00      	nop
 800908a:	370c      	adds	r7, #12
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr

08009094 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b082      	sub	sp, #8
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d101      	bne.n	80090a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80090a2:	2301      	movs	r3, #1
 80090a4:	e07b      	b.n	800919e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d108      	bne.n	80090c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80090b6:	d009      	beq.n	80090cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2200      	movs	r2, #0
 80090bc:	61da      	str	r2, [r3, #28]
 80090be:	e005      	b.n	80090cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2200      	movs	r2, #0
 80090c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2200      	movs	r2, #0
 80090ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80090d8:	b2db      	uxtb	r3, r3
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d106      	bne.n	80090ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2200      	movs	r2, #0
 80090e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f7f8 fec0 	bl	8001e6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2202      	movs	r2, #2
 80090f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009102:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	689b      	ldr	r3, [r3, #8]
 8009110:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009114:	431a      	orrs	r2, r3
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	68db      	ldr	r3, [r3, #12]
 800911a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800911e:	431a      	orrs	r2, r3
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	691b      	ldr	r3, [r3, #16]
 8009124:	f003 0302 	and.w	r3, r3, #2
 8009128:	431a      	orrs	r2, r3
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	695b      	ldr	r3, [r3, #20]
 800912e:	f003 0301 	and.w	r3, r3, #1
 8009132:	431a      	orrs	r2, r3
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	699b      	ldr	r3, [r3, #24]
 8009138:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800913c:	431a      	orrs	r2, r3
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	69db      	ldr	r3, [r3, #28]
 8009142:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009146:	431a      	orrs	r2, r3
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6a1b      	ldr	r3, [r3, #32]
 800914c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009150:	ea42 0103 	orr.w	r1, r2, r3
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009158:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	430a      	orrs	r2, r1
 8009162:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	699b      	ldr	r3, [r3, #24]
 8009168:	0c1b      	lsrs	r3, r3, #16
 800916a:	f003 0104 	and.w	r1, r3, #4
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009172:	f003 0210 	and.w	r2, r3, #16
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	430a      	orrs	r2, r1
 800917c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	69da      	ldr	r2, [r3, #28]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800918c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2200      	movs	r2, #0
 8009192:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2201      	movs	r2, #1
 8009198:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800919c:	2300      	movs	r3, #0
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3708      	adds	r7, #8
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}

080091a6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091a6:	b580      	push	{r7, lr}
 80091a8:	b088      	sub	sp, #32
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	60f8      	str	r0, [r7, #12]
 80091ae:	60b9      	str	r1, [r7, #8]
 80091b0:	603b      	str	r3, [r7, #0]
 80091b2:	4613      	mov	r3, r2
 80091b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80091b6:	2300      	movs	r3, #0
 80091b8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d101      	bne.n	80091c8 <HAL_SPI_Transmit+0x22>
 80091c4:	2302      	movs	r3, #2
 80091c6:	e126      	b.n	8009416 <HAL_SPI_Transmit+0x270>
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2201      	movs	r2, #1
 80091cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80091d0:	f7fb fe8c 	bl	8004eec <HAL_GetTick>
 80091d4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80091d6:	88fb      	ldrh	r3, [r7, #6]
 80091d8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80091e0:	b2db      	uxtb	r3, r3
 80091e2:	2b01      	cmp	r3, #1
 80091e4:	d002      	beq.n	80091ec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80091e6:	2302      	movs	r3, #2
 80091e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80091ea:	e10b      	b.n	8009404 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d002      	beq.n	80091f8 <HAL_SPI_Transmit+0x52>
 80091f2:	88fb      	ldrh	r3, [r7, #6]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d102      	bne.n	80091fe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80091f8:	2301      	movs	r3, #1
 80091fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80091fc:	e102      	b.n	8009404 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2203      	movs	r2, #3
 8009202:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2200      	movs	r2, #0
 800920a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	68ba      	ldr	r2, [r7, #8]
 8009210:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	88fa      	ldrh	r2, [r7, #6]
 8009216:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	88fa      	ldrh	r2, [r7, #6]
 800921c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2200      	movs	r2, #0
 8009222:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2200      	movs	r2, #0
 8009228:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2200      	movs	r2, #0
 800922e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2200      	movs	r2, #0
 8009234:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2200      	movs	r2, #0
 800923a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	689b      	ldr	r3, [r3, #8]
 8009240:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009244:	d10f      	bne.n	8009266 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009254:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009264:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009270:	2b40      	cmp	r3, #64	; 0x40
 8009272:	d007      	beq.n	8009284 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	681a      	ldr	r2, [r3, #0]
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009282:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	68db      	ldr	r3, [r3, #12]
 8009288:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800928c:	d14b      	bne.n	8009326 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d002      	beq.n	800929c <HAL_SPI_Transmit+0xf6>
 8009296:	8afb      	ldrh	r3, [r7, #22]
 8009298:	2b01      	cmp	r3, #1
 800929a:	d13e      	bne.n	800931a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092a0:	881a      	ldrh	r2, [r3, #0]
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ac:	1c9a      	adds	r2, r3, #2
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	3b01      	subs	r3, #1
 80092ba:	b29a      	uxth	r2, r3
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80092c0:	e02b      	b.n	800931a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	689b      	ldr	r3, [r3, #8]
 80092c8:	f003 0302 	and.w	r3, r3, #2
 80092cc:	2b02      	cmp	r3, #2
 80092ce:	d112      	bne.n	80092f6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092d4:	881a      	ldrh	r2, [r3, #0]
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092e0:	1c9a      	adds	r2, r3, #2
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	3b01      	subs	r3, #1
 80092ee:	b29a      	uxth	r2, r3
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	86da      	strh	r2, [r3, #54]	; 0x36
 80092f4:	e011      	b.n	800931a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80092f6:	f7fb fdf9 	bl	8004eec <HAL_GetTick>
 80092fa:	4602      	mov	r2, r0
 80092fc:	69bb      	ldr	r3, [r7, #24]
 80092fe:	1ad3      	subs	r3, r2, r3
 8009300:	683a      	ldr	r2, [r7, #0]
 8009302:	429a      	cmp	r2, r3
 8009304:	d803      	bhi.n	800930e <HAL_SPI_Transmit+0x168>
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800930c:	d102      	bne.n	8009314 <HAL_SPI_Transmit+0x16e>
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d102      	bne.n	800931a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8009314:	2303      	movs	r3, #3
 8009316:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009318:	e074      	b.n	8009404 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800931e:	b29b      	uxth	r3, r3
 8009320:	2b00      	cmp	r3, #0
 8009322:	d1ce      	bne.n	80092c2 <HAL_SPI_Transmit+0x11c>
 8009324:	e04c      	b.n	80093c0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d002      	beq.n	8009334 <HAL_SPI_Transmit+0x18e>
 800932e:	8afb      	ldrh	r3, [r7, #22]
 8009330:	2b01      	cmp	r3, #1
 8009332:	d140      	bne.n	80093b6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	330c      	adds	r3, #12
 800933e:	7812      	ldrb	r2, [r2, #0]
 8009340:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009346:	1c5a      	adds	r2, r3, #1
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009350:	b29b      	uxth	r3, r3
 8009352:	3b01      	subs	r3, #1
 8009354:	b29a      	uxth	r2, r3
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800935a:	e02c      	b.n	80093b6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	689b      	ldr	r3, [r3, #8]
 8009362:	f003 0302 	and.w	r3, r3, #2
 8009366:	2b02      	cmp	r3, #2
 8009368:	d113      	bne.n	8009392 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	330c      	adds	r3, #12
 8009374:	7812      	ldrb	r2, [r2, #0]
 8009376:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800937c:	1c5a      	adds	r2, r3, #1
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009386:	b29b      	uxth	r3, r3
 8009388:	3b01      	subs	r3, #1
 800938a:	b29a      	uxth	r2, r3
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	86da      	strh	r2, [r3, #54]	; 0x36
 8009390:	e011      	b.n	80093b6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009392:	f7fb fdab 	bl	8004eec <HAL_GetTick>
 8009396:	4602      	mov	r2, r0
 8009398:	69bb      	ldr	r3, [r7, #24]
 800939a:	1ad3      	subs	r3, r2, r3
 800939c:	683a      	ldr	r2, [r7, #0]
 800939e:	429a      	cmp	r2, r3
 80093a0:	d803      	bhi.n	80093aa <HAL_SPI_Transmit+0x204>
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093a8:	d102      	bne.n	80093b0 <HAL_SPI_Transmit+0x20a>
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d102      	bne.n	80093b6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80093b0:	2303      	movs	r3, #3
 80093b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80093b4:	e026      	b.n	8009404 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d1cd      	bne.n	800935c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80093c0:	69ba      	ldr	r2, [r7, #24]
 80093c2:	6839      	ldr	r1, [r7, #0]
 80093c4:	68f8      	ldr	r0, [r7, #12]
 80093c6:	f000 fbcb 	bl	8009b60 <SPI_EndRxTxTransaction>
 80093ca:	4603      	mov	r3, r0
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d002      	beq.n	80093d6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2220      	movs	r2, #32
 80093d4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	689b      	ldr	r3, [r3, #8]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d10a      	bne.n	80093f4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80093de:	2300      	movs	r3, #0
 80093e0:	613b      	str	r3, [r7, #16]
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	68db      	ldr	r3, [r3, #12]
 80093e8:	613b      	str	r3, [r7, #16]
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	689b      	ldr	r3, [r3, #8]
 80093f0:	613b      	str	r3, [r7, #16]
 80093f2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d002      	beq.n	8009402 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80093fc:	2301      	movs	r3, #1
 80093fe:	77fb      	strb	r3, [r7, #31]
 8009400:	e000      	b.n	8009404 <HAL_SPI_Transmit+0x25e>
  }

error:
 8009402:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	2201      	movs	r2, #1
 8009408:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2200      	movs	r2, #0
 8009410:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009414:	7ffb      	ldrb	r3, [r7, #31]
}
 8009416:	4618      	mov	r0, r3
 8009418:	3720      	adds	r7, #32
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}

0800941e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800941e:	b580      	push	{r7, lr}
 8009420:	b088      	sub	sp, #32
 8009422:	af02      	add	r7, sp, #8
 8009424:	60f8      	str	r0, [r7, #12]
 8009426:	60b9      	str	r1, [r7, #8]
 8009428:	603b      	str	r3, [r7, #0]
 800942a:	4613      	mov	r3, r2
 800942c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800942e:	2300      	movs	r3, #0
 8009430:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800943a:	d112      	bne.n	8009462 <HAL_SPI_Receive+0x44>
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d10e      	bne.n	8009462 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2204      	movs	r2, #4
 8009448:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800944c:	88fa      	ldrh	r2, [r7, #6]
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	9300      	str	r3, [sp, #0]
 8009452:	4613      	mov	r3, r2
 8009454:	68ba      	ldr	r2, [r7, #8]
 8009456:	68b9      	ldr	r1, [r7, #8]
 8009458:	68f8      	ldr	r0, [r7, #12]
 800945a:	f000 f8f1 	bl	8009640 <HAL_SPI_TransmitReceive>
 800945e:	4603      	mov	r3, r0
 8009460:	e0ea      	b.n	8009638 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009468:	2b01      	cmp	r3, #1
 800946a:	d101      	bne.n	8009470 <HAL_SPI_Receive+0x52>
 800946c:	2302      	movs	r3, #2
 800946e:	e0e3      	b.n	8009638 <HAL_SPI_Receive+0x21a>
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2201      	movs	r2, #1
 8009474:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009478:	f7fb fd38 	bl	8004eec <HAL_GetTick>
 800947c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009484:	b2db      	uxtb	r3, r3
 8009486:	2b01      	cmp	r3, #1
 8009488:	d002      	beq.n	8009490 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800948a:	2302      	movs	r3, #2
 800948c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800948e:	e0ca      	b.n	8009626 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d002      	beq.n	800949c <HAL_SPI_Receive+0x7e>
 8009496:	88fb      	ldrh	r3, [r7, #6]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d102      	bne.n	80094a2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800949c:	2301      	movs	r3, #1
 800949e:	75fb      	strb	r3, [r7, #23]
    goto error;
 80094a0:	e0c1      	b.n	8009626 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2204      	movs	r2, #4
 80094a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2200      	movs	r2, #0
 80094ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	68ba      	ldr	r2, [r7, #8]
 80094b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	88fa      	ldrh	r2, [r7, #6]
 80094ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	88fa      	ldrh	r2, [r7, #6]
 80094c0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2200      	movs	r2, #0
 80094c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2200      	movs	r2, #0
 80094cc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2200      	movs	r2, #0
 80094d2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2200      	movs	r2, #0
 80094d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2200      	movs	r2, #0
 80094de:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	689b      	ldr	r3, [r3, #8]
 80094e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094e8:	d10f      	bne.n	800950a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	681a      	ldr	r2, [r3, #0]
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	681a      	ldr	r2, [r3, #0]
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009508:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009514:	2b40      	cmp	r3, #64	; 0x40
 8009516:	d007      	beq.n	8009528 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009526:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	68db      	ldr	r3, [r3, #12]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d162      	bne.n	80095f6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009530:	e02e      	b.n	8009590 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	689b      	ldr	r3, [r3, #8]
 8009538:	f003 0301 	and.w	r3, r3, #1
 800953c:	2b01      	cmp	r3, #1
 800953e:	d115      	bne.n	800956c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f103 020c 	add.w	r2, r3, #12
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800954c:	7812      	ldrb	r2, [r2, #0]
 800954e:	b2d2      	uxtb	r2, r2
 8009550:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009556:	1c5a      	adds	r2, r3, #1
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009560:	b29b      	uxth	r3, r3
 8009562:	3b01      	subs	r3, #1
 8009564:	b29a      	uxth	r2, r3
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	87da      	strh	r2, [r3, #62]	; 0x3e
 800956a:	e011      	b.n	8009590 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800956c:	f7fb fcbe 	bl	8004eec <HAL_GetTick>
 8009570:	4602      	mov	r2, r0
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	1ad3      	subs	r3, r2, r3
 8009576:	683a      	ldr	r2, [r7, #0]
 8009578:	429a      	cmp	r2, r3
 800957a:	d803      	bhi.n	8009584 <HAL_SPI_Receive+0x166>
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009582:	d102      	bne.n	800958a <HAL_SPI_Receive+0x16c>
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d102      	bne.n	8009590 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800958a:	2303      	movs	r3, #3
 800958c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800958e:	e04a      	b.n	8009626 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009594:	b29b      	uxth	r3, r3
 8009596:	2b00      	cmp	r3, #0
 8009598:	d1cb      	bne.n	8009532 <HAL_SPI_Receive+0x114>
 800959a:	e031      	b.n	8009600 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	689b      	ldr	r3, [r3, #8]
 80095a2:	f003 0301 	and.w	r3, r3, #1
 80095a6:	2b01      	cmp	r3, #1
 80095a8:	d113      	bne.n	80095d2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	68da      	ldr	r2, [r3, #12]
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095b4:	b292      	uxth	r2, r2
 80095b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095bc:	1c9a      	adds	r2, r3, #2
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095c6:	b29b      	uxth	r3, r3
 80095c8:	3b01      	subs	r3, #1
 80095ca:	b29a      	uxth	r2, r3
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80095d0:	e011      	b.n	80095f6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80095d2:	f7fb fc8b 	bl	8004eec <HAL_GetTick>
 80095d6:	4602      	mov	r2, r0
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	1ad3      	subs	r3, r2, r3
 80095dc:	683a      	ldr	r2, [r7, #0]
 80095de:	429a      	cmp	r2, r3
 80095e0:	d803      	bhi.n	80095ea <HAL_SPI_Receive+0x1cc>
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095e8:	d102      	bne.n	80095f0 <HAL_SPI_Receive+0x1d2>
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d102      	bne.n	80095f6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80095f0:	2303      	movs	r3, #3
 80095f2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80095f4:	e017      	b.n	8009626 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095fa:	b29b      	uxth	r3, r3
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d1cd      	bne.n	800959c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009600:	693a      	ldr	r2, [r7, #16]
 8009602:	6839      	ldr	r1, [r7, #0]
 8009604:	68f8      	ldr	r0, [r7, #12]
 8009606:	f000 fa45 	bl	8009a94 <SPI_EndRxTransaction>
 800960a:	4603      	mov	r3, r0
 800960c:	2b00      	cmp	r3, #0
 800960e:	d002      	beq.n	8009616 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2220      	movs	r2, #32
 8009614:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800961a:	2b00      	cmp	r3, #0
 800961c:	d002      	beq.n	8009624 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800961e:	2301      	movs	r3, #1
 8009620:	75fb      	strb	r3, [r7, #23]
 8009622:	e000      	b.n	8009626 <HAL_SPI_Receive+0x208>
  }

error :
 8009624:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2201      	movs	r2, #1
 800962a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2200      	movs	r2, #0
 8009632:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009636:	7dfb      	ldrb	r3, [r7, #23]
}
 8009638:	4618      	mov	r0, r3
 800963a:	3718      	adds	r7, #24
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}

08009640 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b08c      	sub	sp, #48	; 0x30
 8009644:	af00      	add	r7, sp, #0
 8009646:	60f8      	str	r0, [r7, #12]
 8009648:	60b9      	str	r1, [r7, #8]
 800964a:	607a      	str	r2, [r7, #4]
 800964c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800964e:	2301      	movs	r3, #1
 8009650:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009652:	2300      	movs	r3, #0
 8009654:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800965e:	2b01      	cmp	r3, #1
 8009660:	d101      	bne.n	8009666 <HAL_SPI_TransmitReceive+0x26>
 8009662:	2302      	movs	r3, #2
 8009664:	e18a      	b.n	800997c <HAL_SPI_TransmitReceive+0x33c>
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2201      	movs	r2, #1
 800966a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800966e:	f7fb fc3d 	bl	8004eec <HAL_GetTick>
 8009672:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800967a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009684:	887b      	ldrh	r3, [r7, #2]
 8009686:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009688:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800968c:	2b01      	cmp	r3, #1
 800968e:	d00f      	beq.n	80096b0 <HAL_SPI_TransmitReceive+0x70>
 8009690:	69fb      	ldr	r3, [r7, #28]
 8009692:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009696:	d107      	bne.n	80096a8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	689b      	ldr	r3, [r3, #8]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d103      	bne.n	80096a8 <HAL_SPI_TransmitReceive+0x68>
 80096a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80096a4:	2b04      	cmp	r3, #4
 80096a6:	d003      	beq.n	80096b0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80096a8:	2302      	movs	r3, #2
 80096aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80096ae:	e15b      	b.n	8009968 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d005      	beq.n	80096c2 <HAL_SPI_TransmitReceive+0x82>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d002      	beq.n	80096c2 <HAL_SPI_TransmitReceive+0x82>
 80096bc:	887b      	ldrh	r3, [r7, #2]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d103      	bne.n	80096ca <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80096c2:	2301      	movs	r3, #1
 80096c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80096c8:	e14e      	b.n	8009968 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80096d0:	b2db      	uxtb	r3, r3
 80096d2:	2b04      	cmp	r3, #4
 80096d4:	d003      	beq.n	80096de <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	2205      	movs	r2, #5
 80096da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2200      	movs	r2, #0
 80096e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	687a      	ldr	r2, [r7, #4]
 80096e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	887a      	ldrh	r2, [r7, #2]
 80096ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	887a      	ldrh	r2, [r7, #2]
 80096f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	68ba      	ldr	r2, [r7, #8]
 80096fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	887a      	ldrh	r2, [r7, #2]
 8009700:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	887a      	ldrh	r2, [r7, #2]
 8009706:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2200      	movs	r2, #0
 800970c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	2200      	movs	r2, #0
 8009712:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800971e:	2b40      	cmp	r3, #64	; 0x40
 8009720:	d007      	beq.n	8009732 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	681a      	ldr	r2, [r3, #0]
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009730:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	68db      	ldr	r3, [r3, #12]
 8009736:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800973a:	d178      	bne.n	800982e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d002      	beq.n	800974a <HAL_SPI_TransmitReceive+0x10a>
 8009744:	8b7b      	ldrh	r3, [r7, #26]
 8009746:	2b01      	cmp	r3, #1
 8009748:	d166      	bne.n	8009818 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800974e:	881a      	ldrh	r2, [r3, #0]
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800975a:	1c9a      	adds	r2, r3, #2
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009764:	b29b      	uxth	r3, r3
 8009766:	3b01      	subs	r3, #1
 8009768:	b29a      	uxth	r2, r3
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800976e:	e053      	b.n	8009818 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	689b      	ldr	r3, [r3, #8]
 8009776:	f003 0302 	and.w	r3, r3, #2
 800977a:	2b02      	cmp	r3, #2
 800977c:	d11b      	bne.n	80097b6 <HAL_SPI_TransmitReceive+0x176>
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009782:	b29b      	uxth	r3, r3
 8009784:	2b00      	cmp	r3, #0
 8009786:	d016      	beq.n	80097b6 <HAL_SPI_TransmitReceive+0x176>
 8009788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800978a:	2b01      	cmp	r3, #1
 800978c:	d113      	bne.n	80097b6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009792:	881a      	ldrh	r2, [r3, #0]
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800979e:	1c9a      	adds	r2, r3, #2
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	3b01      	subs	r3, #1
 80097ac:	b29a      	uxth	r2, r3
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80097b2:	2300      	movs	r3, #0
 80097b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	689b      	ldr	r3, [r3, #8]
 80097bc:	f003 0301 	and.w	r3, r3, #1
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d119      	bne.n	80097f8 <HAL_SPI_TransmitReceive+0x1b8>
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097c8:	b29b      	uxth	r3, r3
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d014      	beq.n	80097f8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	68da      	ldr	r2, [r3, #12]
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097d8:	b292      	uxth	r2, r2
 80097da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097e0:	1c9a      	adds	r2, r3, #2
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097ea:	b29b      	uxth	r3, r3
 80097ec:	3b01      	subs	r3, #1
 80097ee:	b29a      	uxth	r2, r3
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80097f4:	2301      	movs	r3, #1
 80097f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80097f8:	f7fb fb78 	bl	8004eec <HAL_GetTick>
 80097fc:	4602      	mov	r2, r0
 80097fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009800:	1ad3      	subs	r3, r2, r3
 8009802:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009804:	429a      	cmp	r2, r3
 8009806:	d807      	bhi.n	8009818 <HAL_SPI_TransmitReceive+0x1d8>
 8009808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800980a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800980e:	d003      	beq.n	8009818 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009810:	2303      	movs	r3, #3
 8009812:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009816:	e0a7      	b.n	8009968 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800981c:	b29b      	uxth	r3, r3
 800981e:	2b00      	cmp	r3, #0
 8009820:	d1a6      	bne.n	8009770 <HAL_SPI_TransmitReceive+0x130>
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009826:	b29b      	uxth	r3, r3
 8009828:	2b00      	cmp	r3, #0
 800982a:	d1a1      	bne.n	8009770 <HAL_SPI_TransmitReceive+0x130>
 800982c:	e07c      	b.n	8009928 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d002      	beq.n	800983c <HAL_SPI_TransmitReceive+0x1fc>
 8009836:	8b7b      	ldrh	r3, [r7, #26]
 8009838:	2b01      	cmp	r3, #1
 800983a:	d16b      	bne.n	8009914 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	330c      	adds	r3, #12
 8009846:	7812      	ldrb	r2, [r2, #0]
 8009848:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800984e:	1c5a      	adds	r2, r3, #1
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009858:	b29b      	uxth	r3, r3
 800985a:	3b01      	subs	r3, #1
 800985c:	b29a      	uxth	r2, r3
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009862:	e057      	b.n	8009914 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	689b      	ldr	r3, [r3, #8]
 800986a:	f003 0302 	and.w	r3, r3, #2
 800986e:	2b02      	cmp	r3, #2
 8009870:	d11c      	bne.n	80098ac <HAL_SPI_TransmitReceive+0x26c>
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009876:	b29b      	uxth	r3, r3
 8009878:	2b00      	cmp	r3, #0
 800987a:	d017      	beq.n	80098ac <HAL_SPI_TransmitReceive+0x26c>
 800987c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800987e:	2b01      	cmp	r3, #1
 8009880:	d114      	bne.n	80098ac <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	330c      	adds	r3, #12
 800988c:	7812      	ldrb	r2, [r2, #0]
 800988e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009894:	1c5a      	adds	r2, r3, #1
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800989e:	b29b      	uxth	r3, r3
 80098a0:	3b01      	subs	r3, #1
 80098a2:	b29a      	uxth	r2, r3
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80098a8:	2300      	movs	r3, #0
 80098aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	689b      	ldr	r3, [r3, #8]
 80098b2:	f003 0301 	and.w	r3, r3, #1
 80098b6:	2b01      	cmp	r3, #1
 80098b8:	d119      	bne.n	80098ee <HAL_SPI_TransmitReceive+0x2ae>
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098be:	b29b      	uxth	r3, r3
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d014      	beq.n	80098ee <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	68da      	ldr	r2, [r3, #12]
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ce:	b2d2      	uxtb	r2, r2
 80098d0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098d6:	1c5a      	adds	r2, r3, #1
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098e0:	b29b      	uxth	r3, r3
 80098e2:	3b01      	subs	r3, #1
 80098e4:	b29a      	uxth	r2, r3
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80098ea:	2301      	movs	r3, #1
 80098ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80098ee:	f7fb fafd 	bl	8004eec <HAL_GetTick>
 80098f2:	4602      	mov	r2, r0
 80098f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f6:	1ad3      	subs	r3, r2, r3
 80098f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80098fa:	429a      	cmp	r2, r3
 80098fc:	d803      	bhi.n	8009906 <HAL_SPI_TransmitReceive+0x2c6>
 80098fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009904:	d102      	bne.n	800990c <HAL_SPI_TransmitReceive+0x2cc>
 8009906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009908:	2b00      	cmp	r3, #0
 800990a:	d103      	bne.n	8009914 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800990c:	2303      	movs	r3, #3
 800990e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009912:	e029      	b.n	8009968 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009918:	b29b      	uxth	r3, r3
 800991a:	2b00      	cmp	r3, #0
 800991c:	d1a2      	bne.n	8009864 <HAL_SPI_TransmitReceive+0x224>
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009922:	b29b      	uxth	r3, r3
 8009924:	2b00      	cmp	r3, #0
 8009926:	d19d      	bne.n	8009864 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800992a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800992c:	68f8      	ldr	r0, [r7, #12]
 800992e:	f000 f917 	bl	8009b60 <SPI_EndRxTxTransaction>
 8009932:	4603      	mov	r3, r0
 8009934:	2b00      	cmp	r3, #0
 8009936:	d006      	beq.n	8009946 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009938:	2301      	movs	r3, #1
 800993a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	2220      	movs	r2, #32
 8009942:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009944:	e010      	b.n	8009968 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	689b      	ldr	r3, [r3, #8]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d10b      	bne.n	8009966 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800994e:	2300      	movs	r3, #0
 8009950:	617b      	str	r3, [r7, #20]
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	68db      	ldr	r3, [r3, #12]
 8009958:	617b      	str	r3, [r7, #20]
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	689b      	ldr	r3, [r3, #8]
 8009960:	617b      	str	r3, [r7, #20]
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	e000      	b.n	8009968 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009966:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2201      	movs	r2, #1
 800996c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2200      	movs	r2, #0
 8009974:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009978:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800997c:	4618      	mov	r0, r3
 800997e:	3730      	adds	r7, #48	; 0x30
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b088      	sub	sp, #32
 8009988:	af00      	add	r7, sp, #0
 800998a:	60f8      	str	r0, [r7, #12]
 800998c:	60b9      	str	r1, [r7, #8]
 800998e:	603b      	str	r3, [r7, #0]
 8009990:	4613      	mov	r3, r2
 8009992:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009994:	f7fb faaa 	bl	8004eec <HAL_GetTick>
 8009998:	4602      	mov	r2, r0
 800999a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800999c:	1a9b      	subs	r3, r3, r2
 800999e:	683a      	ldr	r2, [r7, #0]
 80099a0:	4413      	add	r3, r2
 80099a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80099a4:	f7fb faa2 	bl	8004eec <HAL_GetTick>
 80099a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80099aa:	4b39      	ldr	r3, [pc, #228]	; (8009a90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	015b      	lsls	r3, r3, #5
 80099b0:	0d1b      	lsrs	r3, r3, #20
 80099b2:	69fa      	ldr	r2, [r7, #28]
 80099b4:	fb02 f303 	mul.w	r3, r2, r3
 80099b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80099ba:	e054      	b.n	8009a66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099c2:	d050      	beq.n	8009a66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80099c4:	f7fb fa92 	bl	8004eec <HAL_GetTick>
 80099c8:	4602      	mov	r2, r0
 80099ca:	69bb      	ldr	r3, [r7, #24]
 80099cc:	1ad3      	subs	r3, r2, r3
 80099ce:	69fa      	ldr	r2, [r7, #28]
 80099d0:	429a      	cmp	r2, r3
 80099d2:	d902      	bls.n	80099da <SPI_WaitFlagStateUntilTimeout+0x56>
 80099d4:	69fb      	ldr	r3, [r7, #28]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d13d      	bne.n	8009a56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	685a      	ldr	r2, [r3, #4]
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80099e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80099f2:	d111      	bne.n	8009a18 <SPI_WaitFlagStateUntilTimeout+0x94>
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	689b      	ldr	r3, [r3, #8]
 80099f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099fc:	d004      	beq.n	8009a08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	689b      	ldr	r3, [r3, #8]
 8009a02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a06:	d107      	bne.n	8009a18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	681a      	ldr	r2, [r3, #0]
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a20:	d10f      	bne.n	8009a42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	681a      	ldr	r2, [r3, #0]
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009a30:	601a      	str	r2, [r3, #0]
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	681a      	ldr	r2, [r3, #0]
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009a40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	2201      	movs	r2, #1
 8009a46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009a52:	2303      	movs	r3, #3
 8009a54:	e017      	b.n	8009a86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d101      	bne.n	8009a60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	3b01      	subs	r3, #1
 8009a64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	689a      	ldr	r2, [r3, #8]
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	4013      	ands	r3, r2
 8009a70:	68ba      	ldr	r2, [r7, #8]
 8009a72:	429a      	cmp	r2, r3
 8009a74:	bf0c      	ite	eq
 8009a76:	2301      	moveq	r3, #1
 8009a78:	2300      	movne	r3, #0
 8009a7a:	b2db      	uxtb	r3, r3
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	79fb      	ldrb	r3, [r7, #7]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d19b      	bne.n	80099bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009a84:	2300      	movs	r3, #0
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3720      	adds	r7, #32
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	20000000 	.word	0x20000000

08009a94 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b086      	sub	sp, #24
 8009a98:	af02      	add	r7, sp, #8
 8009a9a:	60f8      	str	r0, [r7, #12]
 8009a9c:	60b9      	str	r1, [r7, #8]
 8009a9e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009aa8:	d111      	bne.n	8009ace <SPI_EndRxTransaction+0x3a>
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	689b      	ldr	r3, [r3, #8]
 8009aae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ab2:	d004      	beq.n	8009abe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	689b      	ldr	r3, [r3, #8]
 8009ab8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009abc:	d107      	bne.n	8009ace <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	681a      	ldr	r2, [r3, #0]
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009acc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009ad6:	d12a      	bne.n	8009b2e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	689b      	ldr	r3, [r3, #8]
 8009adc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ae0:	d012      	beq.n	8009b08 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	9300      	str	r3, [sp, #0]
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	2180      	movs	r1, #128	; 0x80
 8009aec:	68f8      	ldr	r0, [r7, #12]
 8009aee:	f7ff ff49 	bl	8009984 <SPI_WaitFlagStateUntilTimeout>
 8009af2:	4603      	mov	r3, r0
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d02d      	beq.n	8009b54 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009afc:	f043 0220 	orr.w	r2, r3, #32
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009b04:	2303      	movs	r3, #3
 8009b06:	e026      	b.n	8009b56 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	9300      	str	r3, [sp, #0]
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	2101      	movs	r1, #1
 8009b12:	68f8      	ldr	r0, [r7, #12]
 8009b14:	f7ff ff36 	bl	8009984 <SPI_WaitFlagStateUntilTimeout>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d01a      	beq.n	8009b54 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b22:	f043 0220 	orr.w	r2, r3, #32
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009b2a:	2303      	movs	r3, #3
 8009b2c:	e013      	b.n	8009b56 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	9300      	str	r3, [sp, #0]
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	2200      	movs	r2, #0
 8009b36:	2101      	movs	r1, #1
 8009b38:	68f8      	ldr	r0, [r7, #12]
 8009b3a:	f7ff ff23 	bl	8009984 <SPI_WaitFlagStateUntilTimeout>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d007      	beq.n	8009b54 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b48:	f043 0220 	orr.w	r2, r3, #32
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009b50:	2303      	movs	r3, #3
 8009b52:	e000      	b.n	8009b56 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009b54:	2300      	movs	r3, #0
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3710      	adds	r7, #16
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
	...

08009b60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b088      	sub	sp, #32
 8009b64:	af02      	add	r7, sp, #8
 8009b66:	60f8      	str	r0, [r7, #12]
 8009b68:	60b9      	str	r1, [r7, #8]
 8009b6a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009b6c:	4b1b      	ldr	r3, [pc, #108]	; (8009bdc <SPI_EndRxTxTransaction+0x7c>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a1b      	ldr	r2, [pc, #108]	; (8009be0 <SPI_EndRxTxTransaction+0x80>)
 8009b72:	fba2 2303 	umull	r2, r3, r2, r3
 8009b76:	0d5b      	lsrs	r3, r3, #21
 8009b78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009b7c:	fb02 f303 	mul.w	r3, r2, r3
 8009b80:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b8a:	d112      	bne.n	8009bb2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	9300      	str	r3, [sp, #0]
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	2200      	movs	r2, #0
 8009b94:	2180      	movs	r1, #128	; 0x80
 8009b96:	68f8      	ldr	r0, [r7, #12]
 8009b98:	f7ff fef4 	bl	8009984 <SPI_WaitFlagStateUntilTimeout>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d016      	beq.n	8009bd0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ba6:	f043 0220 	orr.w	r2, r3, #32
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009bae:	2303      	movs	r3, #3
 8009bb0:	e00f      	b.n	8009bd2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d00a      	beq.n	8009bce <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	3b01      	subs	r3, #1
 8009bbc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	689b      	ldr	r3, [r3, #8]
 8009bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bc8:	2b80      	cmp	r3, #128	; 0x80
 8009bca:	d0f2      	beq.n	8009bb2 <SPI_EndRxTxTransaction+0x52>
 8009bcc:	e000      	b.n	8009bd0 <SPI_EndRxTxTransaction+0x70>
        break;
 8009bce:	bf00      	nop
  }

  return HAL_OK;
 8009bd0:	2300      	movs	r3, #0
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3718      	adds	r7, #24
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}
 8009bda:	bf00      	nop
 8009bdc:	20000000 	.word	0x20000000
 8009be0:	165e9f81 	.word	0x165e9f81

08009be4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b082      	sub	sp, #8
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d101      	bne.n	8009bf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	e041      	b.n	8009c7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bfc:	b2db      	uxtb	r3, r3
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d106      	bne.n	8009c10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2200      	movs	r2, #0
 8009c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f7f8 fb2e 	bl	800226c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2202      	movs	r2, #2
 8009c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681a      	ldr	r2, [r3, #0]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	3304      	adds	r3, #4
 8009c20:	4619      	mov	r1, r3
 8009c22:	4610      	mov	r0, r2
 8009c24:	f000 fbb2 	bl	800a38c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2201      	movs	r2, #1
 8009c2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2201      	movs	r2, #1
 8009c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2201      	movs	r2, #1
 8009c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2201      	movs	r2, #1
 8009c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2201      	movs	r2, #1
 8009c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2201      	movs	r2, #1
 8009c5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2201      	movs	r2, #1
 8009c64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2201      	movs	r2, #1
 8009c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009c78:	2300      	movs	r3, #0
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3708      	adds	r7, #8
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}
	...

08009c84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b085      	sub	sp, #20
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c92:	b2db      	uxtb	r3, r3
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d001      	beq.n	8009c9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009c98:	2301      	movs	r3, #1
 8009c9a:	e04e      	b.n	8009d3a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2202      	movs	r2, #2
 8009ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	68da      	ldr	r2, [r3, #12]
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f042 0201 	orr.w	r2, r2, #1
 8009cb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	4a23      	ldr	r2, [pc, #140]	; (8009d48 <HAL_TIM_Base_Start_IT+0xc4>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d022      	beq.n	8009d04 <HAL_TIM_Base_Start_IT+0x80>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cc6:	d01d      	beq.n	8009d04 <HAL_TIM_Base_Start_IT+0x80>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4a1f      	ldr	r2, [pc, #124]	; (8009d4c <HAL_TIM_Base_Start_IT+0xc8>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d018      	beq.n	8009d04 <HAL_TIM_Base_Start_IT+0x80>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	4a1e      	ldr	r2, [pc, #120]	; (8009d50 <HAL_TIM_Base_Start_IT+0xcc>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d013      	beq.n	8009d04 <HAL_TIM_Base_Start_IT+0x80>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4a1c      	ldr	r2, [pc, #112]	; (8009d54 <HAL_TIM_Base_Start_IT+0xd0>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d00e      	beq.n	8009d04 <HAL_TIM_Base_Start_IT+0x80>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4a1b      	ldr	r2, [pc, #108]	; (8009d58 <HAL_TIM_Base_Start_IT+0xd4>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d009      	beq.n	8009d04 <HAL_TIM_Base_Start_IT+0x80>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4a19      	ldr	r2, [pc, #100]	; (8009d5c <HAL_TIM_Base_Start_IT+0xd8>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d004      	beq.n	8009d04 <HAL_TIM_Base_Start_IT+0x80>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	4a18      	ldr	r2, [pc, #96]	; (8009d60 <HAL_TIM_Base_Start_IT+0xdc>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d111      	bne.n	8009d28 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	689b      	ldr	r3, [r3, #8]
 8009d0a:	f003 0307 	and.w	r3, r3, #7
 8009d0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	2b06      	cmp	r3, #6
 8009d14:	d010      	beq.n	8009d38 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	681a      	ldr	r2, [r3, #0]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f042 0201 	orr.w	r2, r2, #1
 8009d24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d26:	e007      	b.n	8009d38 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	681a      	ldr	r2, [r3, #0]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f042 0201 	orr.w	r2, r2, #1
 8009d36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009d38:	2300      	movs	r3, #0
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3714      	adds	r7, #20
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d44:	4770      	bx	lr
 8009d46:	bf00      	nop
 8009d48:	40010000 	.word	0x40010000
 8009d4c:	40000400 	.word	0x40000400
 8009d50:	40000800 	.word	0x40000800
 8009d54:	40000c00 	.word	0x40000c00
 8009d58:	40010400 	.word	0x40010400
 8009d5c:	40014000 	.word	0x40014000
 8009d60:	40001800 	.word	0x40001800

08009d64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b082      	sub	sp, #8
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d101      	bne.n	8009d76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009d72:	2301      	movs	r3, #1
 8009d74:	e041      	b.n	8009dfa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d7c:	b2db      	uxtb	r3, r3
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d106      	bne.n	8009d90 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2200      	movs	r2, #0
 8009d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f000 f839 	bl	8009e02 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2202      	movs	r2, #2
 8009d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681a      	ldr	r2, [r3, #0]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	3304      	adds	r3, #4
 8009da0:	4619      	mov	r1, r3
 8009da2:	4610      	mov	r0, r2
 8009da4:	f000 faf2 	bl	800a38c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2201      	movs	r2, #1
 8009dac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2201      	movs	r2, #1
 8009db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2201      	movs	r2, #1
 8009dbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2201      	movs	r2, #1
 8009dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2201      	movs	r2, #1
 8009ddc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2201      	movs	r2, #1
 8009de4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2201      	movs	r2, #1
 8009dec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2201      	movs	r2, #1
 8009df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009df8:	2300      	movs	r3, #0
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3708      	adds	r7, #8
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}

08009e02 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009e02:	b480      	push	{r7}
 8009e04:	b083      	sub	sp, #12
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009e0a:	bf00      	nop
 8009e0c:	370c      	adds	r7, #12
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr

08009e16 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009e16:	b580      	push	{r7, lr}
 8009e18:	b082      	sub	sp, #8
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	691b      	ldr	r3, [r3, #16]
 8009e24:	f003 0302 	and.w	r3, r3, #2
 8009e28:	2b02      	cmp	r3, #2
 8009e2a:	d122      	bne.n	8009e72 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	68db      	ldr	r3, [r3, #12]
 8009e32:	f003 0302 	and.w	r3, r3, #2
 8009e36:	2b02      	cmp	r3, #2
 8009e38:	d11b      	bne.n	8009e72 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f06f 0202 	mvn.w	r2, #2
 8009e42:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2201      	movs	r2, #1
 8009e48:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	699b      	ldr	r3, [r3, #24]
 8009e50:	f003 0303 	and.w	r3, r3, #3
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d003      	beq.n	8009e60 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f000 fa78 	bl	800a34e <HAL_TIM_IC_CaptureCallback>
 8009e5e:	e005      	b.n	8009e6c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f000 fa6a 	bl	800a33a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f000 fa7b 	bl	800a362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	691b      	ldr	r3, [r3, #16]
 8009e78:	f003 0304 	and.w	r3, r3, #4
 8009e7c:	2b04      	cmp	r3, #4
 8009e7e:	d122      	bne.n	8009ec6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	68db      	ldr	r3, [r3, #12]
 8009e86:	f003 0304 	and.w	r3, r3, #4
 8009e8a:	2b04      	cmp	r3, #4
 8009e8c:	d11b      	bne.n	8009ec6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f06f 0204 	mvn.w	r2, #4
 8009e96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2202      	movs	r2, #2
 8009e9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	699b      	ldr	r3, [r3, #24]
 8009ea4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d003      	beq.n	8009eb4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f000 fa4e 	bl	800a34e <HAL_TIM_IC_CaptureCallback>
 8009eb2:	e005      	b.n	8009ec0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f000 fa40 	bl	800a33a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f000 fa51 	bl	800a362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	691b      	ldr	r3, [r3, #16]
 8009ecc:	f003 0308 	and.w	r3, r3, #8
 8009ed0:	2b08      	cmp	r3, #8
 8009ed2:	d122      	bne.n	8009f1a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	68db      	ldr	r3, [r3, #12]
 8009eda:	f003 0308 	and.w	r3, r3, #8
 8009ede:	2b08      	cmp	r3, #8
 8009ee0:	d11b      	bne.n	8009f1a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f06f 0208 	mvn.w	r2, #8
 8009eea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2204      	movs	r2, #4
 8009ef0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	69db      	ldr	r3, [r3, #28]
 8009ef8:	f003 0303 	and.w	r3, r3, #3
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d003      	beq.n	8009f08 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f000 fa24 	bl	800a34e <HAL_TIM_IC_CaptureCallback>
 8009f06:	e005      	b.n	8009f14 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f000 fa16 	bl	800a33a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f000 fa27 	bl	800a362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2200      	movs	r2, #0
 8009f18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	691b      	ldr	r3, [r3, #16]
 8009f20:	f003 0310 	and.w	r3, r3, #16
 8009f24:	2b10      	cmp	r3, #16
 8009f26:	d122      	bne.n	8009f6e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	68db      	ldr	r3, [r3, #12]
 8009f2e:	f003 0310 	and.w	r3, r3, #16
 8009f32:	2b10      	cmp	r3, #16
 8009f34:	d11b      	bne.n	8009f6e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f06f 0210 	mvn.w	r2, #16
 8009f3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2208      	movs	r2, #8
 8009f44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	69db      	ldr	r3, [r3, #28]
 8009f4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d003      	beq.n	8009f5c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f000 f9fa 	bl	800a34e <HAL_TIM_IC_CaptureCallback>
 8009f5a:	e005      	b.n	8009f68 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f000 f9ec 	bl	800a33a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f000 f9fd 	bl	800a362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	691b      	ldr	r3, [r3, #16]
 8009f74:	f003 0301 	and.w	r3, r3, #1
 8009f78:	2b01      	cmp	r3, #1
 8009f7a:	d10e      	bne.n	8009f9a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	68db      	ldr	r3, [r3, #12]
 8009f82:	f003 0301 	and.w	r3, r3, #1
 8009f86:	2b01      	cmp	r3, #1
 8009f88:	d107      	bne.n	8009f9a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f06f 0201 	mvn.w	r2, #1
 8009f92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f7f7 fdf1 	bl	8001b7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	691b      	ldr	r3, [r3, #16]
 8009fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fa4:	2b80      	cmp	r3, #128	; 0x80
 8009fa6:	d10e      	bne.n	8009fc6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	68db      	ldr	r3, [r3, #12]
 8009fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fb2:	2b80      	cmp	r3, #128	; 0x80
 8009fb4:	d107      	bne.n	8009fc6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009fbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f000 fd53 	bl	800aa6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	691b      	ldr	r3, [r3, #16]
 8009fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fd0:	2b40      	cmp	r3, #64	; 0x40
 8009fd2:	d10e      	bne.n	8009ff2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	68db      	ldr	r3, [r3, #12]
 8009fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fde:	2b40      	cmp	r3, #64	; 0x40
 8009fe0:	d107      	bne.n	8009ff2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009fea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f000 f9c2 	bl	800a376 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	691b      	ldr	r3, [r3, #16]
 8009ff8:	f003 0320 	and.w	r3, r3, #32
 8009ffc:	2b20      	cmp	r3, #32
 8009ffe:	d10e      	bne.n	800a01e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	68db      	ldr	r3, [r3, #12]
 800a006:	f003 0320 	and.w	r3, r3, #32
 800a00a:	2b20      	cmp	r3, #32
 800a00c:	d107      	bne.n	800a01e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f06f 0220 	mvn.w	r2, #32
 800a016:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f000 fd1d 	bl	800aa58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a01e:	bf00      	nop
 800a020:	3708      	adds	r7, #8
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}
	...

0800a028 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b086      	sub	sp, #24
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	60f8      	str	r0, [r7, #12]
 800a030:	60b9      	str	r1, [r7, #8]
 800a032:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a034:	2300      	movs	r3, #0
 800a036:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a03e:	2b01      	cmp	r3, #1
 800a040:	d101      	bne.n	800a046 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a042:	2302      	movs	r3, #2
 800a044:	e0ae      	b.n	800a1a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	2201      	movs	r2, #1
 800a04a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2b0c      	cmp	r3, #12
 800a052:	f200 809f 	bhi.w	800a194 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a056:	a201      	add	r2, pc, #4	; (adr r2, 800a05c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a05c:	0800a091 	.word	0x0800a091
 800a060:	0800a195 	.word	0x0800a195
 800a064:	0800a195 	.word	0x0800a195
 800a068:	0800a195 	.word	0x0800a195
 800a06c:	0800a0d1 	.word	0x0800a0d1
 800a070:	0800a195 	.word	0x0800a195
 800a074:	0800a195 	.word	0x0800a195
 800a078:	0800a195 	.word	0x0800a195
 800a07c:	0800a113 	.word	0x0800a113
 800a080:	0800a195 	.word	0x0800a195
 800a084:	0800a195 	.word	0x0800a195
 800a088:	0800a195 	.word	0x0800a195
 800a08c:	0800a153 	.word	0x0800a153
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	68b9      	ldr	r1, [r7, #8]
 800a096:	4618      	mov	r0, r3
 800a098:	f000 fa18 	bl	800a4cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	699a      	ldr	r2, [r3, #24]
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f042 0208 	orr.w	r2, r2, #8
 800a0aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	699a      	ldr	r2, [r3, #24]
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f022 0204 	bic.w	r2, r2, #4
 800a0ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	6999      	ldr	r1, [r3, #24]
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	691a      	ldr	r2, [r3, #16]
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	430a      	orrs	r2, r1
 800a0cc:	619a      	str	r2, [r3, #24]
      break;
 800a0ce:	e064      	b.n	800a19a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	68b9      	ldr	r1, [r7, #8]
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f000 fa68 	bl	800a5ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	699a      	ldr	r2, [r3, #24]
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a0ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	699a      	ldr	r2, [r3, #24]
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a0fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	6999      	ldr	r1, [r3, #24]
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	691b      	ldr	r3, [r3, #16]
 800a106:	021a      	lsls	r2, r3, #8
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	430a      	orrs	r2, r1
 800a10e:	619a      	str	r2, [r3, #24]
      break;
 800a110:	e043      	b.n	800a19a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	68b9      	ldr	r1, [r7, #8]
 800a118:	4618      	mov	r0, r3
 800a11a:	f000 fabd 	bl	800a698 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	69da      	ldr	r2, [r3, #28]
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f042 0208 	orr.w	r2, r2, #8
 800a12c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	69da      	ldr	r2, [r3, #28]
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f022 0204 	bic.w	r2, r2, #4
 800a13c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	69d9      	ldr	r1, [r3, #28]
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	691a      	ldr	r2, [r3, #16]
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	430a      	orrs	r2, r1
 800a14e:	61da      	str	r2, [r3, #28]
      break;
 800a150:	e023      	b.n	800a19a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	68b9      	ldr	r1, [r7, #8]
 800a158:	4618      	mov	r0, r3
 800a15a:	f000 fb11 	bl	800a780 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	69da      	ldr	r2, [r3, #28]
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a16c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	69da      	ldr	r2, [r3, #28]
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a17c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	69d9      	ldr	r1, [r3, #28]
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	691b      	ldr	r3, [r3, #16]
 800a188:	021a      	lsls	r2, r3, #8
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	430a      	orrs	r2, r1
 800a190:	61da      	str	r2, [r3, #28]
      break;
 800a192:	e002      	b.n	800a19a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a194:	2301      	movs	r3, #1
 800a196:	75fb      	strb	r3, [r7, #23]
      break;
 800a198:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	2200      	movs	r2, #0
 800a19e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a1a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3718      	adds	r7, #24
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}

0800a1ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b084      	sub	sp, #16
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	d101      	bne.n	800a1c8 <HAL_TIM_ConfigClockSource+0x1c>
 800a1c4:	2302      	movs	r3, #2
 800a1c6:	e0b4      	b.n	800a332 <HAL_TIM_ConfigClockSource+0x186>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2202      	movs	r2, #2
 800a1d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	689b      	ldr	r3, [r3, #8]
 800a1de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a1e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a1ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	68ba      	ldr	r2, [r7, #8]
 800a1f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a200:	d03e      	beq.n	800a280 <HAL_TIM_ConfigClockSource+0xd4>
 800a202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a206:	f200 8087 	bhi.w	800a318 <HAL_TIM_ConfigClockSource+0x16c>
 800a20a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a20e:	f000 8086 	beq.w	800a31e <HAL_TIM_ConfigClockSource+0x172>
 800a212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a216:	d87f      	bhi.n	800a318 <HAL_TIM_ConfigClockSource+0x16c>
 800a218:	2b70      	cmp	r3, #112	; 0x70
 800a21a:	d01a      	beq.n	800a252 <HAL_TIM_ConfigClockSource+0xa6>
 800a21c:	2b70      	cmp	r3, #112	; 0x70
 800a21e:	d87b      	bhi.n	800a318 <HAL_TIM_ConfigClockSource+0x16c>
 800a220:	2b60      	cmp	r3, #96	; 0x60
 800a222:	d050      	beq.n	800a2c6 <HAL_TIM_ConfigClockSource+0x11a>
 800a224:	2b60      	cmp	r3, #96	; 0x60
 800a226:	d877      	bhi.n	800a318 <HAL_TIM_ConfigClockSource+0x16c>
 800a228:	2b50      	cmp	r3, #80	; 0x50
 800a22a:	d03c      	beq.n	800a2a6 <HAL_TIM_ConfigClockSource+0xfa>
 800a22c:	2b50      	cmp	r3, #80	; 0x50
 800a22e:	d873      	bhi.n	800a318 <HAL_TIM_ConfigClockSource+0x16c>
 800a230:	2b40      	cmp	r3, #64	; 0x40
 800a232:	d058      	beq.n	800a2e6 <HAL_TIM_ConfigClockSource+0x13a>
 800a234:	2b40      	cmp	r3, #64	; 0x40
 800a236:	d86f      	bhi.n	800a318 <HAL_TIM_ConfigClockSource+0x16c>
 800a238:	2b30      	cmp	r3, #48	; 0x30
 800a23a:	d064      	beq.n	800a306 <HAL_TIM_ConfigClockSource+0x15a>
 800a23c:	2b30      	cmp	r3, #48	; 0x30
 800a23e:	d86b      	bhi.n	800a318 <HAL_TIM_ConfigClockSource+0x16c>
 800a240:	2b20      	cmp	r3, #32
 800a242:	d060      	beq.n	800a306 <HAL_TIM_ConfigClockSource+0x15a>
 800a244:	2b20      	cmp	r3, #32
 800a246:	d867      	bhi.n	800a318 <HAL_TIM_ConfigClockSource+0x16c>
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d05c      	beq.n	800a306 <HAL_TIM_ConfigClockSource+0x15a>
 800a24c:	2b10      	cmp	r3, #16
 800a24e:	d05a      	beq.n	800a306 <HAL_TIM_ConfigClockSource+0x15a>
 800a250:	e062      	b.n	800a318 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6818      	ldr	r0, [r3, #0]
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	6899      	ldr	r1, [r3, #8]
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	685a      	ldr	r2, [r3, #4]
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	68db      	ldr	r3, [r3, #12]
 800a262:	f000 fb5d 	bl	800a920 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	689b      	ldr	r3, [r3, #8]
 800a26c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a274:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	68ba      	ldr	r2, [r7, #8]
 800a27c:	609a      	str	r2, [r3, #8]
      break;
 800a27e:	e04f      	b.n	800a320 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6818      	ldr	r0, [r3, #0]
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	6899      	ldr	r1, [r3, #8]
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	685a      	ldr	r2, [r3, #4]
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	68db      	ldr	r3, [r3, #12]
 800a290:	f000 fb46 	bl	800a920 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	689a      	ldr	r2, [r3, #8]
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a2a2:	609a      	str	r2, [r3, #8]
      break;
 800a2a4:	e03c      	b.n	800a320 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6818      	ldr	r0, [r3, #0]
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	6859      	ldr	r1, [r3, #4]
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	68db      	ldr	r3, [r3, #12]
 800a2b2:	461a      	mov	r2, r3
 800a2b4:	f000 faba 	bl	800a82c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	2150      	movs	r1, #80	; 0x50
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f000 fb13 	bl	800a8ea <TIM_ITRx_SetConfig>
      break;
 800a2c4:	e02c      	b.n	800a320 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6818      	ldr	r0, [r3, #0]
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	6859      	ldr	r1, [r3, #4]
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	68db      	ldr	r3, [r3, #12]
 800a2d2:	461a      	mov	r2, r3
 800a2d4:	f000 fad9 	bl	800a88a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	2160      	movs	r1, #96	; 0x60
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f000 fb03 	bl	800a8ea <TIM_ITRx_SetConfig>
      break;
 800a2e4:	e01c      	b.n	800a320 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6818      	ldr	r0, [r3, #0]
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	6859      	ldr	r1, [r3, #4]
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	68db      	ldr	r3, [r3, #12]
 800a2f2:	461a      	mov	r2, r3
 800a2f4:	f000 fa9a 	bl	800a82c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	2140      	movs	r1, #64	; 0x40
 800a2fe:	4618      	mov	r0, r3
 800a300:	f000 faf3 	bl	800a8ea <TIM_ITRx_SetConfig>
      break;
 800a304:	e00c      	b.n	800a320 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681a      	ldr	r2, [r3, #0]
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	4619      	mov	r1, r3
 800a310:	4610      	mov	r0, r2
 800a312:	f000 faea 	bl	800a8ea <TIM_ITRx_SetConfig>
      break;
 800a316:	e003      	b.n	800a320 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a318:	2301      	movs	r3, #1
 800a31a:	73fb      	strb	r3, [r7, #15]
      break;
 800a31c:	e000      	b.n	800a320 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a31e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2201      	movs	r2, #1
 800a324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2200      	movs	r2, #0
 800a32c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a330:	7bfb      	ldrb	r3, [r7, #15]
}
 800a332:	4618      	mov	r0, r3
 800a334:	3710      	adds	r7, #16
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}

0800a33a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a33a:	b480      	push	{r7}
 800a33c:	b083      	sub	sp, #12
 800a33e:	af00      	add	r7, sp, #0
 800a340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a342:	bf00      	nop
 800a344:	370c      	adds	r7, #12
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr

0800a34e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a34e:	b480      	push	{r7}
 800a350:	b083      	sub	sp, #12
 800a352:	af00      	add	r7, sp, #0
 800a354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a356:	bf00      	nop
 800a358:	370c      	adds	r7, #12
 800a35a:	46bd      	mov	sp, r7
 800a35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a360:	4770      	bx	lr

0800a362 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a362:	b480      	push	{r7}
 800a364:	b083      	sub	sp, #12
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a36a:	bf00      	nop
 800a36c:	370c      	adds	r7, #12
 800a36e:	46bd      	mov	sp, r7
 800a370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a374:	4770      	bx	lr

0800a376 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a376:	b480      	push	{r7}
 800a378:	b083      	sub	sp, #12
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a37e:	bf00      	nop
 800a380:	370c      	adds	r7, #12
 800a382:	46bd      	mov	sp, r7
 800a384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a388:	4770      	bx	lr
	...

0800a38c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b085      	sub	sp, #20
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
 800a394:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	4a40      	ldr	r2, [pc, #256]	; (800a4a0 <TIM_Base_SetConfig+0x114>)
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d013      	beq.n	800a3cc <TIM_Base_SetConfig+0x40>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3aa:	d00f      	beq.n	800a3cc <TIM_Base_SetConfig+0x40>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	4a3d      	ldr	r2, [pc, #244]	; (800a4a4 <TIM_Base_SetConfig+0x118>)
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d00b      	beq.n	800a3cc <TIM_Base_SetConfig+0x40>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	4a3c      	ldr	r2, [pc, #240]	; (800a4a8 <TIM_Base_SetConfig+0x11c>)
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	d007      	beq.n	800a3cc <TIM_Base_SetConfig+0x40>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	4a3b      	ldr	r2, [pc, #236]	; (800a4ac <TIM_Base_SetConfig+0x120>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d003      	beq.n	800a3cc <TIM_Base_SetConfig+0x40>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	4a3a      	ldr	r2, [pc, #232]	; (800a4b0 <TIM_Base_SetConfig+0x124>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d108      	bne.n	800a3de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	68fa      	ldr	r2, [r7, #12]
 800a3da:	4313      	orrs	r3, r2
 800a3dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	4a2f      	ldr	r2, [pc, #188]	; (800a4a0 <TIM_Base_SetConfig+0x114>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d02b      	beq.n	800a43e <TIM_Base_SetConfig+0xb2>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3ec:	d027      	beq.n	800a43e <TIM_Base_SetConfig+0xb2>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	4a2c      	ldr	r2, [pc, #176]	; (800a4a4 <TIM_Base_SetConfig+0x118>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d023      	beq.n	800a43e <TIM_Base_SetConfig+0xb2>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	4a2b      	ldr	r2, [pc, #172]	; (800a4a8 <TIM_Base_SetConfig+0x11c>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d01f      	beq.n	800a43e <TIM_Base_SetConfig+0xb2>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	4a2a      	ldr	r2, [pc, #168]	; (800a4ac <TIM_Base_SetConfig+0x120>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d01b      	beq.n	800a43e <TIM_Base_SetConfig+0xb2>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	4a29      	ldr	r2, [pc, #164]	; (800a4b0 <TIM_Base_SetConfig+0x124>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d017      	beq.n	800a43e <TIM_Base_SetConfig+0xb2>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	4a28      	ldr	r2, [pc, #160]	; (800a4b4 <TIM_Base_SetConfig+0x128>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d013      	beq.n	800a43e <TIM_Base_SetConfig+0xb2>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	4a27      	ldr	r2, [pc, #156]	; (800a4b8 <TIM_Base_SetConfig+0x12c>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d00f      	beq.n	800a43e <TIM_Base_SetConfig+0xb2>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	4a26      	ldr	r2, [pc, #152]	; (800a4bc <TIM_Base_SetConfig+0x130>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d00b      	beq.n	800a43e <TIM_Base_SetConfig+0xb2>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	4a25      	ldr	r2, [pc, #148]	; (800a4c0 <TIM_Base_SetConfig+0x134>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d007      	beq.n	800a43e <TIM_Base_SetConfig+0xb2>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	4a24      	ldr	r2, [pc, #144]	; (800a4c4 <TIM_Base_SetConfig+0x138>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d003      	beq.n	800a43e <TIM_Base_SetConfig+0xb2>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	4a23      	ldr	r2, [pc, #140]	; (800a4c8 <TIM_Base_SetConfig+0x13c>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d108      	bne.n	800a450 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a444:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	68db      	ldr	r3, [r3, #12]
 800a44a:	68fa      	ldr	r2, [r7, #12]
 800a44c:	4313      	orrs	r3, r2
 800a44e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	695b      	ldr	r3, [r3, #20]
 800a45a:	4313      	orrs	r3, r2
 800a45c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	68fa      	ldr	r2, [r7, #12]
 800a462:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	689a      	ldr	r2, [r3, #8]
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	681a      	ldr	r2, [r3, #0]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	4a0a      	ldr	r2, [pc, #40]	; (800a4a0 <TIM_Base_SetConfig+0x114>)
 800a478:	4293      	cmp	r3, r2
 800a47a:	d003      	beq.n	800a484 <TIM_Base_SetConfig+0xf8>
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	4a0c      	ldr	r2, [pc, #48]	; (800a4b0 <TIM_Base_SetConfig+0x124>)
 800a480:	4293      	cmp	r3, r2
 800a482:	d103      	bne.n	800a48c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	691a      	ldr	r2, [r3, #16]
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2201      	movs	r2, #1
 800a490:	615a      	str	r2, [r3, #20]
}
 800a492:	bf00      	nop
 800a494:	3714      	adds	r7, #20
 800a496:	46bd      	mov	sp, r7
 800a498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49c:	4770      	bx	lr
 800a49e:	bf00      	nop
 800a4a0:	40010000 	.word	0x40010000
 800a4a4:	40000400 	.word	0x40000400
 800a4a8:	40000800 	.word	0x40000800
 800a4ac:	40000c00 	.word	0x40000c00
 800a4b0:	40010400 	.word	0x40010400
 800a4b4:	40014000 	.word	0x40014000
 800a4b8:	40014400 	.word	0x40014400
 800a4bc:	40014800 	.word	0x40014800
 800a4c0:	40001800 	.word	0x40001800
 800a4c4:	40001c00 	.word	0x40001c00
 800a4c8:	40002000 	.word	0x40002000

0800a4cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b087      	sub	sp, #28
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6a1b      	ldr	r3, [r3, #32]
 800a4da:	f023 0201 	bic.w	r2, r3, #1
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6a1b      	ldr	r3, [r3, #32]
 800a4e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	685b      	ldr	r3, [r3, #4]
 800a4ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	699b      	ldr	r3, [r3, #24]
 800a4f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f023 0303 	bic.w	r3, r3, #3
 800a502:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	68fa      	ldr	r2, [r7, #12]
 800a50a:	4313      	orrs	r3, r2
 800a50c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	f023 0302 	bic.w	r3, r3, #2
 800a514:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	689b      	ldr	r3, [r3, #8]
 800a51a:	697a      	ldr	r2, [r7, #20]
 800a51c:	4313      	orrs	r3, r2
 800a51e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	4a20      	ldr	r2, [pc, #128]	; (800a5a4 <TIM_OC1_SetConfig+0xd8>)
 800a524:	4293      	cmp	r3, r2
 800a526:	d003      	beq.n	800a530 <TIM_OC1_SetConfig+0x64>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	4a1f      	ldr	r2, [pc, #124]	; (800a5a8 <TIM_OC1_SetConfig+0xdc>)
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d10c      	bne.n	800a54a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	f023 0308 	bic.w	r3, r3, #8
 800a536:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	68db      	ldr	r3, [r3, #12]
 800a53c:	697a      	ldr	r2, [r7, #20]
 800a53e:	4313      	orrs	r3, r2
 800a540:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	f023 0304 	bic.w	r3, r3, #4
 800a548:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	4a15      	ldr	r2, [pc, #84]	; (800a5a4 <TIM_OC1_SetConfig+0xd8>)
 800a54e:	4293      	cmp	r3, r2
 800a550:	d003      	beq.n	800a55a <TIM_OC1_SetConfig+0x8e>
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	4a14      	ldr	r2, [pc, #80]	; (800a5a8 <TIM_OC1_SetConfig+0xdc>)
 800a556:	4293      	cmp	r3, r2
 800a558:	d111      	bne.n	800a57e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a560:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a568:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	695b      	ldr	r3, [r3, #20]
 800a56e:	693a      	ldr	r2, [r7, #16]
 800a570:	4313      	orrs	r3, r2
 800a572:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	699b      	ldr	r3, [r3, #24]
 800a578:	693a      	ldr	r2, [r7, #16]
 800a57a:	4313      	orrs	r3, r2
 800a57c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	693a      	ldr	r2, [r7, #16]
 800a582:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	68fa      	ldr	r2, [r7, #12]
 800a588:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	685a      	ldr	r2, [r3, #4]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	697a      	ldr	r2, [r7, #20]
 800a596:	621a      	str	r2, [r3, #32]
}
 800a598:	bf00      	nop
 800a59a:	371c      	adds	r7, #28
 800a59c:	46bd      	mov	sp, r7
 800a59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a2:	4770      	bx	lr
 800a5a4:	40010000 	.word	0x40010000
 800a5a8:	40010400 	.word	0x40010400

0800a5ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b087      	sub	sp, #28
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
 800a5b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6a1b      	ldr	r3, [r3, #32]
 800a5ba:	f023 0210 	bic.w	r2, r3, #16
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6a1b      	ldr	r3, [r3, #32]
 800a5c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	685b      	ldr	r3, [r3, #4]
 800a5cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	699b      	ldr	r3, [r3, #24]
 800a5d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a5e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	021b      	lsls	r3, r3, #8
 800a5ea:	68fa      	ldr	r2, [r7, #12]
 800a5ec:	4313      	orrs	r3, r2
 800a5ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	f023 0320 	bic.w	r3, r3, #32
 800a5f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	689b      	ldr	r3, [r3, #8]
 800a5fc:	011b      	lsls	r3, r3, #4
 800a5fe:	697a      	ldr	r2, [r7, #20]
 800a600:	4313      	orrs	r3, r2
 800a602:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	4a22      	ldr	r2, [pc, #136]	; (800a690 <TIM_OC2_SetConfig+0xe4>)
 800a608:	4293      	cmp	r3, r2
 800a60a:	d003      	beq.n	800a614 <TIM_OC2_SetConfig+0x68>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	4a21      	ldr	r2, [pc, #132]	; (800a694 <TIM_OC2_SetConfig+0xe8>)
 800a610:	4293      	cmp	r3, r2
 800a612:	d10d      	bne.n	800a630 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a61a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	68db      	ldr	r3, [r3, #12]
 800a620:	011b      	lsls	r3, r3, #4
 800a622:	697a      	ldr	r2, [r7, #20]
 800a624:	4313      	orrs	r3, r2
 800a626:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a62e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	4a17      	ldr	r2, [pc, #92]	; (800a690 <TIM_OC2_SetConfig+0xe4>)
 800a634:	4293      	cmp	r3, r2
 800a636:	d003      	beq.n	800a640 <TIM_OC2_SetConfig+0x94>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	4a16      	ldr	r2, [pc, #88]	; (800a694 <TIM_OC2_SetConfig+0xe8>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d113      	bne.n	800a668 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a646:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a64e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	695b      	ldr	r3, [r3, #20]
 800a654:	009b      	lsls	r3, r3, #2
 800a656:	693a      	ldr	r2, [r7, #16]
 800a658:	4313      	orrs	r3, r2
 800a65a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	699b      	ldr	r3, [r3, #24]
 800a660:	009b      	lsls	r3, r3, #2
 800a662:	693a      	ldr	r2, [r7, #16]
 800a664:	4313      	orrs	r3, r2
 800a666:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	693a      	ldr	r2, [r7, #16]
 800a66c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	68fa      	ldr	r2, [r7, #12]
 800a672:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	685a      	ldr	r2, [r3, #4]
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	697a      	ldr	r2, [r7, #20]
 800a680:	621a      	str	r2, [r3, #32]
}
 800a682:	bf00      	nop
 800a684:	371c      	adds	r7, #28
 800a686:	46bd      	mov	sp, r7
 800a688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68c:	4770      	bx	lr
 800a68e:	bf00      	nop
 800a690:	40010000 	.word	0x40010000
 800a694:	40010400 	.word	0x40010400

0800a698 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a698:	b480      	push	{r7}
 800a69a:	b087      	sub	sp, #28
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
 800a6a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6a1b      	ldr	r3, [r3, #32]
 800a6a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6a1b      	ldr	r3, [r3, #32]
 800a6b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	685b      	ldr	r3, [r3, #4]
 800a6b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	69db      	ldr	r3, [r3, #28]
 800a6be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	f023 0303 	bic.w	r3, r3, #3
 800a6ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	68fa      	ldr	r2, [r7, #12]
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a6da:	697b      	ldr	r3, [r7, #20]
 800a6dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a6e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	689b      	ldr	r3, [r3, #8]
 800a6e6:	021b      	lsls	r3, r3, #8
 800a6e8:	697a      	ldr	r2, [r7, #20]
 800a6ea:	4313      	orrs	r3, r2
 800a6ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	4a21      	ldr	r2, [pc, #132]	; (800a778 <TIM_OC3_SetConfig+0xe0>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d003      	beq.n	800a6fe <TIM_OC3_SetConfig+0x66>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	4a20      	ldr	r2, [pc, #128]	; (800a77c <TIM_OC3_SetConfig+0xe4>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d10d      	bne.n	800a71a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a704:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	68db      	ldr	r3, [r3, #12]
 800a70a:	021b      	lsls	r3, r3, #8
 800a70c:	697a      	ldr	r2, [r7, #20]
 800a70e:	4313      	orrs	r3, r2
 800a710:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a718:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	4a16      	ldr	r2, [pc, #88]	; (800a778 <TIM_OC3_SetConfig+0xe0>)
 800a71e:	4293      	cmp	r3, r2
 800a720:	d003      	beq.n	800a72a <TIM_OC3_SetConfig+0x92>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	4a15      	ldr	r2, [pc, #84]	; (800a77c <TIM_OC3_SetConfig+0xe4>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d113      	bne.n	800a752 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a730:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a738:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	695b      	ldr	r3, [r3, #20]
 800a73e:	011b      	lsls	r3, r3, #4
 800a740:	693a      	ldr	r2, [r7, #16]
 800a742:	4313      	orrs	r3, r2
 800a744:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	699b      	ldr	r3, [r3, #24]
 800a74a:	011b      	lsls	r3, r3, #4
 800a74c:	693a      	ldr	r2, [r7, #16]
 800a74e:	4313      	orrs	r3, r2
 800a750:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	693a      	ldr	r2, [r7, #16]
 800a756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	68fa      	ldr	r2, [r7, #12]
 800a75c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	685a      	ldr	r2, [r3, #4]
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	697a      	ldr	r2, [r7, #20]
 800a76a:	621a      	str	r2, [r3, #32]
}
 800a76c:	bf00      	nop
 800a76e:	371c      	adds	r7, #28
 800a770:	46bd      	mov	sp, r7
 800a772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a776:	4770      	bx	lr
 800a778:	40010000 	.word	0x40010000
 800a77c:	40010400 	.word	0x40010400

0800a780 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a780:	b480      	push	{r7}
 800a782:	b087      	sub	sp, #28
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
 800a788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6a1b      	ldr	r3, [r3, #32]
 800a78e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6a1b      	ldr	r3, [r3, #32]
 800a79a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	685b      	ldr	r3, [r3, #4]
 800a7a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	69db      	ldr	r3, [r3, #28]
 800a7a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a7ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	021b      	lsls	r3, r3, #8
 800a7be:	68fa      	ldr	r2, [r7, #12]
 800a7c0:	4313      	orrs	r3, r2
 800a7c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a7ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	689b      	ldr	r3, [r3, #8]
 800a7d0:	031b      	lsls	r3, r3, #12
 800a7d2:	693a      	ldr	r2, [r7, #16]
 800a7d4:	4313      	orrs	r3, r2
 800a7d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	4a12      	ldr	r2, [pc, #72]	; (800a824 <TIM_OC4_SetConfig+0xa4>)
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d003      	beq.n	800a7e8 <TIM_OC4_SetConfig+0x68>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	4a11      	ldr	r2, [pc, #68]	; (800a828 <TIM_OC4_SetConfig+0xa8>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d109      	bne.n	800a7fc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a7e8:	697b      	ldr	r3, [r7, #20]
 800a7ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a7ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	695b      	ldr	r3, [r3, #20]
 800a7f4:	019b      	lsls	r3, r3, #6
 800a7f6:	697a      	ldr	r2, [r7, #20]
 800a7f8:	4313      	orrs	r3, r2
 800a7fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	697a      	ldr	r2, [r7, #20]
 800a800:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	68fa      	ldr	r2, [r7, #12]
 800a806:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	685a      	ldr	r2, [r3, #4]
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	693a      	ldr	r2, [r7, #16]
 800a814:	621a      	str	r2, [r3, #32]
}
 800a816:	bf00      	nop
 800a818:	371c      	adds	r7, #28
 800a81a:	46bd      	mov	sp, r7
 800a81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a820:	4770      	bx	lr
 800a822:	bf00      	nop
 800a824:	40010000 	.word	0x40010000
 800a828:	40010400 	.word	0x40010400

0800a82c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b087      	sub	sp, #28
 800a830:	af00      	add	r7, sp, #0
 800a832:	60f8      	str	r0, [r7, #12]
 800a834:	60b9      	str	r1, [r7, #8]
 800a836:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	6a1b      	ldr	r3, [r3, #32]
 800a83c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	6a1b      	ldr	r3, [r3, #32]
 800a842:	f023 0201 	bic.w	r2, r3, #1
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	699b      	ldr	r3, [r3, #24]
 800a84e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a856:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	011b      	lsls	r3, r3, #4
 800a85c:	693a      	ldr	r2, [r7, #16]
 800a85e:	4313      	orrs	r3, r2
 800a860:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	f023 030a 	bic.w	r3, r3, #10
 800a868:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a86a:	697a      	ldr	r2, [r7, #20]
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	4313      	orrs	r3, r2
 800a870:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	693a      	ldr	r2, [r7, #16]
 800a876:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	697a      	ldr	r2, [r7, #20]
 800a87c:	621a      	str	r2, [r3, #32]
}
 800a87e:	bf00      	nop
 800a880:	371c      	adds	r7, #28
 800a882:	46bd      	mov	sp, r7
 800a884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a888:	4770      	bx	lr

0800a88a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a88a:	b480      	push	{r7}
 800a88c:	b087      	sub	sp, #28
 800a88e:	af00      	add	r7, sp, #0
 800a890:	60f8      	str	r0, [r7, #12]
 800a892:	60b9      	str	r1, [r7, #8]
 800a894:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	6a1b      	ldr	r3, [r3, #32]
 800a89a:	f023 0210 	bic.w	r2, r3, #16
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	699b      	ldr	r3, [r3, #24]
 800a8a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	6a1b      	ldr	r3, [r3, #32]
 800a8ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a8b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	031b      	lsls	r3, r3, #12
 800a8ba:	697a      	ldr	r2, [r7, #20]
 800a8bc:	4313      	orrs	r3, r2
 800a8be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a8c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	011b      	lsls	r3, r3, #4
 800a8cc:	693a      	ldr	r2, [r7, #16]
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	697a      	ldr	r2, [r7, #20]
 800a8d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	693a      	ldr	r2, [r7, #16]
 800a8dc:	621a      	str	r2, [r3, #32]
}
 800a8de:	bf00      	nop
 800a8e0:	371c      	adds	r7, #28
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e8:	4770      	bx	lr

0800a8ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a8ea:	b480      	push	{r7}
 800a8ec:	b085      	sub	sp, #20
 800a8ee:	af00      	add	r7, sp, #0
 800a8f0:	6078      	str	r0, [r7, #4]
 800a8f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	689b      	ldr	r3, [r3, #8]
 800a8f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a900:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a902:	683a      	ldr	r2, [r7, #0]
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	4313      	orrs	r3, r2
 800a908:	f043 0307 	orr.w	r3, r3, #7
 800a90c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	68fa      	ldr	r2, [r7, #12]
 800a912:	609a      	str	r2, [r3, #8]
}
 800a914:	bf00      	nop
 800a916:	3714      	adds	r7, #20
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr

0800a920 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a920:	b480      	push	{r7}
 800a922:	b087      	sub	sp, #28
 800a924:	af00      	add	r7, sp, #0
 800a926:	60f8      	str	r0, [r7, #12]
 800a928:	60b9      	str	r1, [r7, #8]
 800a92a:	607a      	str	r2, [r7, #4]
 800a92c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	689b      	ldr	r3, [r3, #8]
 800a932:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a93a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	021a      	lsls	r2, r3, #8
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	431a      	orrs	r2, r3
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	4313      	orrs	r3, r2
 800a948:	697a      	ldr	r2, [r7, #20]
 800a94a:	4313      	orrs	r3, r2
 800a94c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	697a      	ldr	r2, [r7, #20]
 800a952:	609a      	str	r2, [r3, #8]
}
 800a954:	bf00      	nop
 800a956:	371c      	adds	r7, #28
 800a958:	46bd      	mov	sp, r7
 800a95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95e:	4770      	bx	lr

0800a960 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a960:	b480      	push	{r7}
 800a962:	b085      	sub	sp, #20
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
 800a968:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a970:	2b01      	cmp	r3, #1
 800a972:	d101      	bne.n	800a978 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a974:	2302      	movs	r3, #2
 800a976:	e05a      	b.n	800aa2e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2201      	movs	r2, #1
 800a97c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2202      	movs	r2, #2
 800a984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	685b      	ldr	r3, [r3, #4]
 800a98e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	689b      	ldr	r3, [r3, #8]
 800a996:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a99e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	68fa      	ldr	r2, [r7, #12]
 800a9a6:	4313      	orrs	r3, r2
 800a9a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	68fa      	ldr	r2, [r7, #12]
 800a9b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	4a21      	ldr	r2, [pc, #132]	; (800aa3c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	d022      	beq.n	800aa02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9c4:	d01d      	beq.n	800aa02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	4a1d      	ldr	r2, [pc, #116]	; (800aa40 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	d018      	beq.n	800aa02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	4a1b      	ldr	r2, [pc, #108]	; (800aa44 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d013      	beq.n	800aa02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	4a1a      	ldr	r2, [pc, #104]	; (800aa48 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	d00e      	beq.n	800aa02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	4a18      	ldr	r2, [pc, #96]	; (800aa4c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d009      	beq.n	800aa02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	4a17      	ldr	r2, [pc, #92]	; (800aa50 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d004      	beq.n	800aa02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	4a15      	ldr	r2, [pc, #84]	; (800aa54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d10c      	bne.n	800aa1c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	685b      	ldr	r3, [r3, #4]
 800aa0e:	68ba      	ldr	r2, [r7, #8]
 800aa10:	4313      	orrs	r3, r2
 800aa12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	68ba      	ldr	r2, [r7, #8]
 800aa1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2201      	movs	r2, #1
 800aa20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2200      	movs	r2, #0
 800aa28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aa2c:	2300      	movs	r3, #0
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3714      	adds	r7, #20
 800aa32:	46bd      	mov	sp, r7
 800aa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa38:	4770      	bx	lr
 800aa3a:	bf00      	nop
 800aa3c:	40010000 	.word	0x40010000
 800aa40:	40000400 	.word	0x40000400
 800aa44:	40000800 	.word	0x40000800
 800aa48:	40000c00 	.word	0x40000c00
 800aa4c:	40010400 	.word	0x40010400
 800aa50:	40014000 	.word	0x40014000
 800aa54:	40001800 	.word	0x40001800

0800aa58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b083      	sub	sp, #12
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aa60:	bf00      	nop
 800aa62:	370c      	adds	r7, #12
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr

0800aa6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b083      	sub	sp, #12
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aa74:	bf00      	nop
 800aa76:	370c      	adds	r7, #12
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7e:	4770      	bx	lr

0800aa80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b082      	sub	sp, #8
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d101      	bne.n	800aa92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aa8e:	2301      	movs	r3, #1
 800aa90:	e03f      	b.n	800ab12 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa98:	b2db      	uxtb	r3, r3
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d106      	bne.n	800aaac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f7f7 fcb6 	bl	8002418 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2224      	movs	r2, #36	; 0x24
 800aab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	68da      	ldr	r2, [r3, #12]
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aac2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f000 f929 	bl	800ad1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	691a      	ldr	r2, [r3, #16]
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800aad8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	695a      	ldr	r2, [r3, #20]
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800aae8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	68da      	ldr	r2, [r3, #12]
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aaf8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2200      	movs	r2, #0
 800aafe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2220      	movs	r2, #32
 800ab04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2220      	movs	r2, #32
 800ab0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ab10:	2300      	movs	r3, #0
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3708      	adds	r7, #8
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}

0800ab1a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ab1a:	b580      	push	{r7, lr}
 800ab1c:	b08a      	sub	sp, #40	; 0x28
 800ab1e:	af02      	add	r7, sp, #8
 800ab20:	60f8      	str	r0, [r7, #12]
 800ab22:	60b9      	str	r1, [r7, #8]
 800ab24:	603b      	str	r3, [r7, #0]
 800ab26:	4613      	mov	r3, r2
 800ab28:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab34:	b2db      	uxtb	r3, r3
 800ab36:	2b20      	cmp	r3, #32
 800ab38:	d17c      	bne.n	800ac34 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d002      	beq.n	800ab46 <HAL_UART_Transmit+0x2c>
 800ab40:	88fb      	ldrh	r3, [r7, #6]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d101      	bne.n	800ab4a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800ab46:	2301      	movs	r3, #1
 800ab48:	e075      	b.n	800ac36 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab50:	2b01      	cmp	r3, #1
 800ab52:	d101      	bne.n	800ab58 <HAL_UART_Transmit+0x3e>
 800ab54:	2302      	movs	r3, #2
 800ab56:	e06e      	b.n	800ac36 <HAL_UART_Transmit+0x11c>
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	2200      	movs	r2, #0
 800ab64:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	2221      	movs	r2, #33	; 0x21
 800ab6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ab6e:	f7fa f9bd 	bl	8004eec <HAL_GetTick>
 800ab72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	88fa      	ldrh	r2, [r7, #6]
 800ab78:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	88fa      	ldrh	r2, [r7, #6]
 800ab7e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	689b      	ldr	r3, [r3, #8]
 800ab84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab88:	d108      	bne.n	800ab9c <HAL_UART_Transmit+0x82>
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	691b      	ldr	r3, [r3, #16]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d104      	bne.n	800ab9c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800ab92:	2300      	movs	r3, #0
 800ab94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	61bb      	str	r3, [r7, #24]
 800ab9a:	e003      	b.n	800aba4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800aba0:	2300      	movs	r3, #0
 800aba2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2200      	movs	r2, #0
 800aba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800abac:	e02a      	b.n	800ac04 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	9300      	str	r3, [sp, #0]
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	2200      	movs	r2, #0
 800abb6:	2180      	movs	r1, #128	; 0x80
 800abb8:	68f8      	ldr	r0, [r7, #12]
 800abba:	f000 f840 	bl	800ac3e <UART_WaitOnFlagUntilTimeout>
 800abbe:	4603      	mov	r3, r0
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d001      	beq.n	800abc8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800abc4:	2303      	movs	r3, #3
 800abc6:	e036      	b.n	800ac36 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800abc8:	69fb      	ldr	r3, [r7, #28]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d10b      	bne.n	800abe6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800abce:	69bb      	ldr	r3, [r7, #24]
 800abd0:	881b      	ldrh	r3, [r3, #0]
 800abd2:	461a      	mov	r2, r3
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800abdc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800abde:	69bb      	ldr	r3, [r7, #24]
 800abe0:	3302      	adds	r3, #2
 800abe2:	61bb      	str	r3, [r7, #24]
 800abe4:	e007      	b.n	800abf6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800abe6:	69fb      	ldr	r3, [r7, #28]
 800abe8:	781a      	ldrb	r2, [r3, #0]
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800abf0:	69fb      	ldr	r3, [r7, #28]
 800abf2:	3301      	adds	r3, #1
 800abf4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800abfa:	b29b      	uxth	r3, r3
 800abfc:	3b01      	subs	r3, #1
 800abfe:	b29a      	uxth	r2, r3
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ac08:	b29b      	uxth	r3, r3
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d1cf      	bne.n	800abae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	9300      	str	r3, [sp, #0]
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	2200      	movs	r2, #0
 800ac16:	2140      	movs	r1, #64	; 0x40
 800ac18:	68f8      	ldr	r0, [r7, #12]
 800ac1a:	f000 f810 	bl	800ac3e <UART_WaitOnFlagUntilTimeout>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d001      	beq.n	800ac28 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800ac24:	2303      	movs	r3, #3
 800ac26:	e006      	b.n	800ac36 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	2220      	movs	r2, #32
 800ac2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800ac30:	2300      	movs	r3, #0
 800ac32:	e000      	b.n	800ac36 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800ac34:	2302      	movs	r3, #2
  }
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	3720      	adds	r7, #32
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}

0800ac3e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800ac3e:	b580      	push	{r7, lr}
 800ac40:	b090      	sub	sp, #64	; 0x40
 800ac42:	af00      	add	r7, sp, #0
 800ac44:	60f8      	str	r0, [r7, #12]
 800ac46:	60b9      	str	r1, [r7, #8]
 800ac48:	603b      	str	r3, [r7, #0]
 800ac4a:	4613      	mov	r3, r2
 800ac4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac4e:	e050      	b.n	800acf2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac56:	d04c      	beq.n	800acf2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800ac58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d007      	beq.n	800ac6e <UART_WaitOnFlagUntilTimeout+0x30>
 800ac5e:	f7fa f945 	bl	8004eec <HAL_GetTick>
 800ac62:	4602      	mov	r2, r0
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	1ad3      	subs	r3, r2, r3
 800ac68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac6a:	429a      	cmp	r2, r3
 800ac6c:	d241      	bcs.n	800acf2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	330c      	adds	r3, #12
 800ac74:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac78:	e853 3f00 	ldrex	r3, [r3]
 800ac7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ac7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ac84:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	330c      	adds	r3, #12
 800ac8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ac8e:	637a      	str	r2, [r7, #52]	; 0x34
 800ac90:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ac94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac96:	e841 2300 	strex	r3, r2, [r1]
 800ac9a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ac9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d1e5      	bne.n	800ac6e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	3314      	adds	r3, #20
 800aca8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	e853 3f00 	ldrex	r3, [r3]
 800acb0:	613b      	str	r3, [r7, #16]
   return(result);
 800acb2:	693b      	ldr	r3, [r7, #16]
 800acb4:	f023 0301 	bic.w	r3, r3, #1
 800acb8:	63bb      	str	r3, [r7, #56]	; 0x38
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	3314      	adds	r3, #20
 800acc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800acc2:	623a      	str	r2, [r7, #32]
 800acc4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acc6:	69f9      	ldr	r1, [r7, #28]
 800acc8:	6a3a      	ldr	r2, [r7, #32]
 800acca:	e841 2300 	strex	r3, r2, [r1]
 800acce:	61bb      	str	r3, [r7, #24]
   return(result);
 800acd0:	69bb      	ldr	r3, [r7, #24]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d1e5      	bne.n	800aca2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	2220      	movs	r2, #32
 800acda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	2220      	movs	r2, #32
 800ace2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	2200      	movs	r2, #0
 800acea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800acee:	2303      	movs	r3, #3
 800acf0:	e00f      	b.n	800ad12 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	681a      	ldr	r2, [r3, #0]
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	4013      	ands	r3, r2
 800acfc:	68ba      	ldr	r2, [r7, #8]
 800acfe:	429a      	cmp	r2, r3
 800ad00:	bf0c      	ite	eq
 800ad02:	2301      	moveq	r3, #1
 800ad04:	2300      	movne	r3, #0
 800ad06:	b2db      	uxtb	r3, r3
 800ad08:	461a      	mov	r2, r3
 800ad0a:	79fb      	ldrb	r3, [r7, #7]
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	d09f      	beq.n	800ac50 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ad10:	2300      	movs	r3, #0
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3740      	adds	r7, #64	; 0x40
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}
	...

0800ad1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ad1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad20:	b09f      	sub	sp, #124	; 0x7c
 800ad22:	af00      	add	r7, sp, #0
 800ad24:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ad26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	691b      	ldr	r3, [r3, #16]
 800ad2c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ad30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad32:	68d9      	ldr	r1, [r3, #12]
 800ad34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad36:	681a      	ldr	r2, [r3, #0]
 800ad38:	ea40 0301 	orr.w	r3, r0, r1
 800ad3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ad3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad40:	689a      	ldr	r2, [r3, #8]
 800ad42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad44:	691b      	ldr	r3, [r3, #16]
 800ad46:	431a      	orrs	r2, r3
 800ad48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad4a:	695b      	ldr	r3, [r3, #20]
 800ad4c:	431a      	orrs	r2, r3
 800ad4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad50:	69db      	ldr	r3, [r3, #28]
 800ad52:	4313      	orrs	r3, r2
 800ad54:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800ad56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	68db      	ldr	r3, [r3, #12]
 800ad5c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ad60:	f021 010c 	bic.w	r1, r1, #12
 800ad64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad66:	681a      	ldr	r2, [r3, #0]
 800ad68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ad6a:	430b      	orrs	r3, r1
 800ad6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ad6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	695b      	ldr	r3, [r3, #20]
 800ad74:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ad78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad7a:	6999      	ldr	r1, [r3, #24]
 800ad7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad7e:	681a      	ldr	r2, [r3, #0]
 800ad80:	ea40 0301 	orr.w	r3, r0, r1
 800ad84:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ad86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad88:	681a      	ldr	r2, [r3, #0]
 800ad8a:	4bc5      	ldr	r3, [pc, #788]	; (800b0a0 <UART_SetConfig+0x384>)
 800ad8c:	429a      	cmp	r2, r3
 800ad8e:	d004      	beq.n	800ad9a <UART_SetConfig+0x7e>
 800ad90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad92:	681a      	ldr	r2, [r3, #0]
 800ad94:	4bc3      	ldr	r3, [pc, #780]	; (800b0a4 <UART_SetConfig+0x388>)
 800ad96:	429a      	cmp	r2, r3
 800ad98:	d103      	bne.n	800ada2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ad9a:	f7fd fa65 	bl	8008268 <HAL_RCC_GetPCLK2Freq>
 800ad9e:	6778      	str	r0, [r7, #116]	; 0x74
 800ada0:	e002      	b.n	800ada8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ada2:	f7fd fa4d 	bl	8008240 <HAL_RCC_GetPCLK1Freq>
 800ada6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ada8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adaa:	69db      	ldr	r3, [r3, #28]
 800adac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800adb0:	f040 80b6 	bne.w	800af20 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800adb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800adb6:	461c      	mov	r4, r3
 800adb8:	f04f 0500 	mov.w	r5, #0
 800adbc:	4622      	mov	r2, r4
 800adbe:	462b      	mov	r3, r5
 800adc0:	1891      	adds	r1, r2, r2
 800adc2:	6439      	str	r1, [r7, #64]	; 0x40
 800adc4:	415b      	adcs	r3, r3
 800adc6:	647b      	str	r3, [r7, #68]	; 0x44
 800adc8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800adcc:	1912      	adds	r2, r2, r4
 800adce:	eb45 0303 	adc.w	r3, r5, r3
 800add2:	f04f 0000 	mov.w	r0, #0
 800add6:	f04f 0100 	mov.w	r1, #0
 800adda:	00d9      	lsls	r1, r3, #3
 800addc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ade0:	00d0      	lsls	r0, r2, #3
 800ade2:	4602      	mov	r2, r0
 800ade4:	460b      	mov	r3, r1
 800ade6:	1911      	adds	r1, r2, r4
 800ade8:	6639      	str	r1, [r7, #96]	; 0x60
 800adea:	416b      	adcs	r3, r5
 800adec:	667b      	str	r3, [r7, #100]	; 0x64
 800adee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adf0:	685b      	ldr	r3, [r3, #4]
 800adf2:	461a      	mov	r2, r3
 800adf4:	f04f 0300 	mov.w	r3, #0
 800adf8:	1891      	adds	r1, r2, r2
 800adfa:	63b9      	str	r1, [r7, #56]	; 0x38
 800adfc:	415b      	adcs	r3, r3
 800adfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ae04:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800ae08:	f7f5 ff4e 	bl	8000ca8 <__aeabi_uldivmod>
 800ae0c:	4602      	mov	r2, r0
 800ae0e:	460b      	mov	r3, r1
 800ae10:	4ba5      	ldr	r3, [pc, #660]	; (800b0a8 <UART_SetConfig+0x38c>)
 800ae12:	fba3 2302 	umull	r2, r3, r3, r2
 800ae16:	095b      	lsrs	r3, r3, #5
 800ae18:	011e      	lsls	r6, r3, #4
 800ae1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ae1c:	461c      	mov	r4, r3
 800ae1e:	f04f 0500 	mov.w	r5, #0
 800ae22:	4622      	mov	r2, r4
 800ae24:	462b      	mov	r3, r5
 800ae26:	1891      	adds	r1, r2, r2
 800ae28:	6339      	str	r1, [r7, #48]	; 0x30
 800ae2a:	415b      	adcs	r3, r3
 800ae2c:	637b      	str	r3, [r7, #52]	; 0x34
 800ae2e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ae32:	1912      	adds	r2, r2, r4
 800ae34:	eb45 0303 	adc.w	r3, r5, r3
 800ae38:	f04f 0000 	mov.w	r0, #0
 800ae3c:	f04f 0100 	mov.w	r1, #0
 800ae40:	00d9      	lsls	r1, r3, #3
 800ae42:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ae46:	00d0      	lsls	r0, r2, #3
 800ae48:	4602      	mov	r2, r0
 800ae4a:	460b      	mov	r3, r1
 800ae4c:	1911      	adds	r1, r2, r4
 800ae4e:	65b9      	str	r1, [r7, #88]	; 0x58
 800ae50:	416b      	adcs	r3, r5
 800ae52:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ae54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae56:	685b      	ldr	r3, [r3, #4]
 800ae58:	461a      	mov	r2, r3
 800ae5a:	f04f 0300 	mov.w	r3, #0
 800ae5e:	1891      	adds	r1, r2, r2
 800ae60:	62b9      	str	r1, [r7, #40]	; 0x28
 800ae62:	415b      	adcs	r3, r3
 800ae64:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ae6a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800ae6e:	f7f5 ff1b 	bl	8000ca8 <__aeabi_uldivmod>
 800ae72:	4602      	mov	r2, r0
 800ae74:	460b      	mov	r3, r1
 800ae76:	4b8c      	ldr	r3, [pc, #560]	; (800b0a8 <UART_SetConfig+0x38c>)
 800ae78:	fba3 1302 	umull	r1, r3, r3, r2
 800ae7c:	095b      	lsrs	r3, r3, #5
 800ae7e:	2164      	movs	r1, #100	; 0x64
 800ae80:	fb01 f303 	mul.w	r3, r1, r3
 800ae84:	1ad3      	subs	r3, r2, r3
 800ae86:	00db      	lsls	r3, r3, #3
 800ae88:	3332      	adds	r3, #50	; 0x32
 800ae8a:	4a87      	ldr	r2, [pc, #540]	; (800b0a8 <UART_SetConfig+0x38c>)
 800ae8c:	fba2 2303 	umull	r2, r3, r2, r3
 800ae90:	095b      	lsrs	r3, r3, #5
 800ae92:	005b      	lsls	r3, r3, #1
 800ae94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ae98:	441e      	add	r6, r3
 800ae9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f04f 0100 	mov.w	r1, #0
 800aea2:	4602      	mov	r2, r0
 800aea4:	460b      	mov	r3, r1
 800aea6:	1894      	adds	r4, r2, r2
 800aea8:	623c      	str	r4, [r7, #32]
 800aeaa:	415b      	adcs	r3, r3
 800aeac:	627b      	str	r3, [r7, #36]	; 0x24
 800aeae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800aeb2:	1812      	adds	r2, r2, r0
 800aeb4:	eb41 0303 	adc.w	r3, r1, r3
 800aeb8:	f04f 0400 	mov.w	r4, #0
 800aebc:	f04f 0500 	mov.w	r5, #0
 800aec0:	00dd      	lsls	r5, r3, #3
 800aec2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800aec6:	00d4      	lsls	r4, r2, #3
 800aec8:	4622      	mov	r2, r4
 800aeca:	462b      	mov	r3, r5
 800aecc:	1814      	adds	r4, r2, r0
 800aece:	653c      	str	r4, [r7, #80]	; 0x50
 800aed0:	414b      	adcs	r3, r1
 800aed2:	657b      	str	r3, [r7, #84]	; 0x54
 800aed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aed6:	685b      	ldr	r3, [r3, #4]
 800aed8:	461a      	mov	r2, r3
 800aeda:	f04f 0300 	mov.w	r3, #0
 800aede:	1891      	adds	r1, r2, r2
 800aee0:	61b9      	str	r1, [r7, #24]
 800aee2:	415b      	adcs	r3, r3
 800aee4:	61fb      	str	r3, [r7, #28]
 800aee6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800aeea:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800aeee:	f7f5 fedb 	bl	8000ca8 <__aeabi_uldivmod>
 800aef2:	4602      	mov	r2, r0
 800aef4:	460b      	mov	r3, r1
 800aef6:	4b6c      	ldr	r3, [pc, #432]	; (800b0a8 <UART_SetConfig+0x38c>)
 800aef8:	fba3 1302 	umull	r1, r3, r3, r2
 800aefc:	095b      	lsrs	r3, r3, #5
 800aefe:	2164      	movs	r1, #100	; 0x64
 800af00:	fb01 f303 	mul.w	r3, r1, r3
 800af04:	1ad3      	subs	r3, r2, r3
 800af06:	00db      	lsls	r3, r3, #3
 800af08:	3332      	adds	r3, #50	; 0x32
 800af0a:	4a67      	ldr	r2, [pc, #412]	; (800b0a8 <UART_SetConfig+0x38c>)
 800af0c:	fba2 2303 	umull	r2, r3, r2, r3
 800af10:	095b      	lsrs	r3, r3, #5
 800af12:	f003 0207 	and.w	r2, r3, #7
 800af16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	4432      	add	r2, r6
 800af1c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800af1e:	e0b9      	b.n	800b094 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800af20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800af22:	461c      	mov	r4, r3
 800af24:	f04f 0500 	mov.w	r5, #0
 800af28:	4622      	mov	r2, r4
 800af2a:	462b      	mov	r3, r5
 800af2c:	1891      	adds	r1, r2, r2
 800af2e:	6139      	str	r1, [r7, #16]
 800af30:	415b      	adcs	r3, r3
 800af32:	617b      	str	r3, [r7, #20]
 800af34:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800af38:	1912      	adds	r2, r2, r4
 800af3a:	eb45 0303 	adc.w	r3, r5, r3
 800af3e:	f04f 0000 	mov.w	r0, #0
 800af42:	f04f 0100 	mov.w	r1, #0
 800af46:	00d9      	lsls	r1, r3, #3
 800af48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800af4c:	00d0      	lsls	r0, r2, #3
 800af4e:	4602      	mov	r2, r0
 800af50:	460b      	mov	r3, r1
 800af52:	eb12 0804 	adds.w	r8, r2, r4
 800af56:	eb43 0905 	adc.w	r9, r3, r5
 800af5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af5c:	685b      	ldr	r3, [r3, #4]
 800af5e:	4618      	mov	r0, r3
 800af60:	f04f 0100 	mov.w	r1, #0
 800af64:	f04f 0200 	mov.w	r2, #0
 800af68:	f04f 0300 	mov.w	r3, #0
 800af6c:	008b      	lsls	r3, r1, #2
 800af6e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800af72:	0082      	lsls	r2, r0, #2
 800af74:	4640      	mov	r0, r8
 800af76:	4649      	mov	r1, r9
 800af78:	f7f5 fe96 	bl	8000ca8 <__aeabi_uldivmod>
 800af7c:	4602      	mov	r2, r0
 800af7e:	460b      	mov	r3, r1
 800af80:	4b49      	ldr	r3, [pc, #292]	; (800b0a8 <UART_SetConfig+0x38c>)
 800af82:	fba3 2302 	umull	r2, r3, r3, r2
 800af86:	095b      	lsrs	r3, r3, #5
 800af88:	011e      	lsls	r6, r3, #4
 800af8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800af8c:	4618      	mov	r0, r3
 800af8e:	f04f 0100 	mov.w	r1, #0
 800af92:	4602      	mov	r2, r0
 800af94:	460b      	mov	r3, r1
 800af96:	1894      	adds	r4, r2, r2
 800af98:	60bc      	str	r4, [r7, #8]
 800af9a:	415b      	adcs	r3, r3
 800af9c:	60fb      	str	r3, [r7, #12]
 800af9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800afa2:	1812      	adds	r2, r2, r0
 800afa4:	eb41 0303 	adc.w	r3, r1, r3
 800afa8:	f04f 0400 	mov.w	r4, #0
 800afac:	f04f 0500 	mov.w	r5, #0
 800afb0:	00dd      	lsls	r5, r3, #3
 800afb2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800afb6:	00d4      	lsls	r4, r2, #3
 800afb8:	4622      	mov	r2, r4
 800afba:	462b      	mov	r3, r5
 800afbc:	1814      	adds	r4, r2, r0
 800afbe:	64bc      	str	r4, [r7, #72]	; 0x48
 800afc0:	414b      	adcs	r3, r1
 800afc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800afc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afc6:	685b      	ldr	r3, [r3, #4]
 800afc8:	4618      	mov	r0, r3
 800afca:	f04f 0100 	mov.w	r1, #0
 800afce:	f04f 0200 	mov.w	r2, #0
 800afd2:	f04f 0300 	mov.w	r3, #0
 800afd6:	008b      	lsls	r3, r1, #2
 800afd8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800afdc:	0082      	lsls	r2, r0, #2
 800afde:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800afe2:	f7f5 fe61 	bl	8000ca8 <__aeabi_uldivmod>
 800afe6:	4602      	mov	r2, r0
 800afe8:	460b      	mov	r3, r1
 800afea:	4b2f      	ldr	r3, [pc, #188]	; (800b0a8 <UART_SetConfig+0x38c>)
 800afec:	fba3 1302 	umull	r1, r3, r3, r2
 800aff0:	095b      	lsrs	r3, r3, #5
 800aff2:	2164      	movs	r1, #100	; 0x64
 800aff4:	fb01 f303 	mul.w	r3, r1, r3
 800aff8:	1ad3      	subs	r3, r2, r3
 800affa:	011b      	lsls	r3, r3, #4
 800affc:	3332      	adds	r3, #50	; 0x32
 800affe:	4a2a      	ldr	r2, [pc, #168]	; (800b0a8 <UART_SetConfig+0x38c>)
 800b000:	fba2 2303 	umull	r2, r3, r2, r3
 800b004:	095b      	lsrs	r3, r3, #5
 800b006:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b00a:	441e      	add	r6, r3
 800b00c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b00e:	4618      	mov	r0, r3
 800b010:	f04f 0100 	mov.w	r1, #0
 800b014:	4602      	mov	r2, r0
 800b016:	460b      	mov	r3, r1
 800b018:	1894      	adds	r4, r2, r2
 800b01a:	603c      	str	r4, [r7, #0]
 800b01c:	415b      	adcs	r3, r3
 800b01e:	607b      	str	r3, [r7, #4]
 800b020:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b024:	1812      	adds	r2, r2, r0
 800b026:	eb41 0303 	adc.w	r3, r1, r3
 800b02a:	f04f 0400 	mov.w	r4, #0
 800b02e:	f04f 0500 	mov.w	r5, #0
 800b032:	00dd      	lsls	r5, r3, #3
 800b034:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b038:	00d4      	lsls	r4, r2, #3
 800b03a:	4622      	mov	r2, r4
 800b03c:	462b      	mov	r3, r5
 800b03e:	eb12 0a00 	adds.w	sl, r2, r0
 800b042:	eb43 0b01 	adc.w	fp, r3, r1
 800b046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b048:	685b      	ldr	r3, [r3, #4]
 800b04a:	4618      	mov	r0, r3
 800b04c:	f04f 0100 	mov.w	r1, #0
 800b050:	f04f 0200 	mov.w	r2, #0
 800b054:	f04f 0300 	mov.w	r3, #0
 800b058:	008b      	lsls	r3, r1, #2
 800b05a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b05e:	0082      	lsls	r2, r0, #2
 800b060:	4650      	mov	r0, sl
 800b062:	4659      	mov	r1, fp
 800b064:	f7f5 fe20 	bl	8000ca8 <__aeabi_uldivmod>
 800b068:	4602      	mov	r2, r0
 800b06a:	460b      	mov	r3, r1
 800b06c:	4b0e      	ldr	r3, [pc, #56]	; (800b0a8 <UART_SetConfig+0x38c>)
 800b06e:	fba3 1302 	umull	r1, r3, r3, r2
 800b072:	095b      	lsrs	r3, r3, #5
 800b074:	2164      	movs	r1, #100	; 0x64
 800b076:	fb01 f303 	mul.w	r3, r1, r3
 800b07a:	1ad3      	subs	r3, r2, r3
 800b07c:	011b      	lsls	r3, r3, #4
 800b07e:	3332      	adds	r3, #50	; 0x32
 800b080:	4a09      	ldr	r2, [pc, #36]	; (800b0a8 <UART_SetConfig+0x38c>)
 800b082:	fba2 2303 	umull	r2, r3, r2, r3
 800b086:	095b      	lsrs	r3, r3, #5
 800b088:	f003 020f 	and.w	r2, r3, #15
 800b08c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	4432      	add	r2, r6
 800b092:	609a      	str	r2, [r3, #8]
}
 800b094:	bf00      	nop
 800b096:	377c      	adds	r7, #124	; 0x7c
 800b098:	46bd      	mov	sp, r7
 800b09a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b09e:	bf00      	nop
 800b0a0:	40011000 	.word	0x40011000
 800b0a4:	40011400 	.word	0x40011400
 800b0a8:	51eb851f 	.word	0x51eb851f

0800b0ac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b087      	sub	sp, #28
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	60f8      	str	r0, [r7, #12]
 800b0b4:	60b9      	str	r1, [r7, #8]
 800b0b6:	4613      	mov	r3, r2
 800b0b8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b0ba:	79fb      	ldrb	r3, [r7, #7]
 800b0bc:	2b02      	cmp	r3, #2
 800b0be:	d165      	bne.n	800b18c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	4a41      	ldr	r2, [pc, #260]	; (800b1c8 <USB_SetTurnaroundTime+0x11c>)
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	d906      	bls.n	800b0d6 <USB_SetTurnaroundTime+0x2a>
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	4a40      	ldr	r2, [pc, #256]	; (800b1cc <USB_SetTurnaroundTime+0x120>)
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	d202      	bcs.n	800b0d6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b0d0:	230f      	movs	r3, #15
 800b0d2:	617b      	str	r3, [r7, #20]
 800b0d4:	e062      	b.n	800b19c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	4a3c      	ldr	r2, [pc, #240]	; (800b1cc <USB_SetTurnaroundTime+0x120>)
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d306      	bcc.n	800b0ec <USB_SetTurnaroundTime+0x40>
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	4a3b      	ldr	r2, [pc, #236]	; (800b1d0 <USB_SetTurnaroundTime+0x124>)
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	d202      	bcs.n	800b0ec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b0e6:	230e      	movs	r3, #14
 800b0e8:	617b      	str	r3, [r7, #20]
 800b0ea:	e057      	b.n	800b19c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	4a38      	ldr	r2, [pc, #224]	; (800b1d0 <USB_SetTurnaroundTime+0x124>)
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d306      	bcc.n	800b102 <USB_SetTurnaroundTime+0x56>
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	4a37      	ldr	r2, [pc, #220]	; (800b1d4 <USB_SetTurnaroundTime+0x128>)
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	d202      	bcs.n	800b102 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b0fc:	230d      	movs	r3, #13
 800b0fe:	617b      	str	r3, [r7, #20]
 800b100:	e04c      	b.n	800b19c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	4a33      	ldr	r2, [pc, #204]	; (800b1d4 <USB_SetTurnaroundTime+0x128>)
 800b106:	4293      	cmp	r3, r2
 800b108:	d306      	bcc.n	800b118 <USB_SetTurnaroundTime+0x6c>
 800b10a:	68bb      	ldr	r3, [r7, #8]
 800b10c:	4a32      	ldr	r2, [pc, #200]	; (800b1d8 <USB_SetTurnaroundTime+0x12c>)
 800b10e:	4293      	cmp	r3, r2
 800b110:	d802      	bhi.n	800b118 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b112:	230c      	movs	r3, #12
 800b114:	617b      	str	r3, [r7, #20]
 800b116:	e041      	b.n	800b19c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	4a2f      	ldr	r2, [pc, #188]	; (800b1d8 <USB_SetTurnaroundTime+0x12c>)
 800b11c:	4293      	cmp	r3, r2
 800b11e:	d906      	bls.n	800b12e <USB_SetTurnaroundTime+0x82>
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	4a2e      	ldr	r2, [pc, #184]	; (800b1dc <USB_SetTurnaroundTime+0x130>)
 800b124:	4293      	cmp	r3, r2
 800b126:	d802      	bhi.n	800b12e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b128:	230b      	movs	r3, #11
 800b12a:	617b      	str	r3, [r7, #20]
 800b12c:	e036      	b.n	800b19c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	4a2a      	ldr	r2, [pc, #168]	; (800b1dc <USB_SetTurnaroundTime+0x130>)
 800b132:	4293      	cmp	r3, r2
 800b134:	d906      	bls.n	800b144 <USB_SetTurnaroundTime+0x98>
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	4a29      	ldr	r2, [pc, #164]	; (800b1e0 <USB_SetTurnaroundTime+0x134>)
 800b13a:	4293      	cmp	r3, r2
 800b13c:	d802      	bhi.n	800b144 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b13e:	230a      	movs	r3, #10
 800b140:	617b      	str	r3, [r7, #20]
 800b142:	e02b      	b.n	800b19c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	4a26      	ldr	r2, [pc, #152]	; (800b1e0 <USB_SetTurnaroundTime+0x134>)
 800b148:	4293      	cmp	r3, r2
 800b14a:	d906      	bls.n	800b15a <USB_SetTurnaroundTime+0xae>
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	4a25      	ldr	r2, [pc, #148]	; (800b1e4 <USB_SetTurnaroundTime+0x138>)
 800b150:	4293      	cmp	r3, r2
 800b152:	d202      	bcs.n	800b15a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b154:	2309      	movs	r3, #9
 800b156:	617b      	str	r3, [r7, #20]
 800b158:	e020      	b.n	800b19c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	4a21      	ldr	r2, [pc, #132]	; (800b1e4 <USB_SetTurnaroundTime+0x138>)
 800b15e:	4293      	cmp	r3, r2
 800b160:	d306      	bcc.n	800b170 <USB_SetTurnaroundTime+0xc4>
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	4a20      	ldr	r2, [pc, #128]	; (800b1e8 <USB_SetTurnaroundTime+0x13c>)
 800b166:	4293      	cmp	r3, r2
 800b168:	d802      	bhi.n	800b170 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b16a:	2308      	movs	r3, #8
 800b16c:	617b      	str	r3, [r7, #20]
 800b16e:	e015      	b.n	800b19c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	4a1d      	ldr	r2, [pc, #116]	; (800b1e8 <USB_SetTurnaroundTime+0x13c>)
 800b174:	4293      	cmp	r3, r2
 800b176:	d906      	bls.n	800b186 <USB_SetTurnaroundTime+0xda>
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	4a1c      	ldr	r2, [pc, #112]	; (800b1ec <USB_SetTurnaroundTime+0x140>)
 800b17c:	4293      	cmp	r3, r2
 800b17e:	d202      	bcs.n	800b186 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b180:	2307      	movs	r3, #7
 800b182:	617b      	str	r3, [r7, #20]
 800b184:	e00a      	b.n	800b19c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b186:	2306      	movs	r3, #6
 800b188:	617b      	str	r3, [r7, #20]
 800b18a:	e007      	b.n	800b19c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b18c:	79fb      	ldrb	r3, [r7, #7]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d102      	bne.n	800b198 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b192:	2309      	movs	r3, #9
 800b194:	617b      	str	r3, [r7, #20]
 800b196:	e001      	b.n	800b19c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b198:	2309      	movs	r3, #9
 800b19a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	68db      	ldr	r3, [r3, #12]
 800b1a0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	68da      	ldr	r2, [r3, #12]
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	029b      	lsls	r3, r3, #10
 800b1b0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b1b4:	431a      	orrs	r2, r3
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b1ba:	2300      	movs	r3, #0
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	371c      	adds	r7, #28
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c6:	4770      	bx	lr
 800b1c8:	00d8acbf 	.word	0x00d8acbf
 800b1cc:	00e4e1c0 	.word	0x00e4e1c0
 800b1d0:	00f42400 	.word	0x00f42400
 800b1d4:	01067380 	.word	0x01067380
 800b1d8:	011a499f 	.word	0x011a499f
 800b1dc:	01312cff 	.word	0x01312cff
 800b1e0:	014ca43f 	.word	0x014ca43f
 800b1e4:	016e3600 	.word	0x016e3600
 800b1e8:	01a6ab1f 	.word	0x01a6ab1f
 800b1ec:	01e84800 	.word	0x01e84800

0800b1f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b085      	sub	sp, #20
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
 800b1f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	019b      	lsls	r3, r3, #6
 800b202:	f043 0220 	orr.w	r2, r3, #32
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	3301      	adds	r3, #1
 800b20e:	60fb      	str	r3, [r7, #12]
 800b210:	4a08      	ldr	r2, [pc, #32]	; (800b234 <USB_FlushTxFifo+0x44>)
 800b212:	4293      	cmp	r3, r2
 800b214:	d901      	bls.n	800b21a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800b216:	2303      	movs	r3, #3
 800b218:	e006      	b.n	800b228 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	691b      	ldr	r3, [r3, #16]
 800b21e:	f003 0320 	and.w	r3, r3, #32
 800b222:	2b20      	cmp	r3, #32
 800b224:	d0f1      	beq.n	800b20a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b226:	2300      	movs	r3, #0
}
 800b228:	4618      	mov	r0, r3
 800b22a:	3714      	adds	r7, #20
 800b22c:	46bd      	mov	sp, r7
 800b22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b232:	4770      	bx	lr
 800b234:	00030d40 	.word	0x00030d40

0800b238 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b238:	b480      	push	{r7}
 800b23a:	b087      	sub	sp, #28
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b24a:	689b      	ldr	r3, [r3, #8]
 800b24c:	f003 0306 	and.w	r3, r3, #6
 800b250:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d102      	bne.n	800b25e <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b258:	2300      	movs	r3, #0
 800b25a:	75fb      	strb	r3, [r7, #23]
 800b25c:	e00a      	b.n	800b274 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	2b02      	cmp	r3, #2
 800b262:	d002      	beq.n	800b26a <USB_GetDevSpeed+0x32>
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	2b06      	cmp	r3, #6
 800b268:	d102      	bne.n	800b270 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b26a:	2302      	movs	r3, #2
 800b26c:	75fb      	strb	r3, [r7, #23]
 800b26e:	e001      	b.n	800b274 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b270:	230f      	movs	r3, #15
 800b272:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b274:	7dfb      	ldrb	r3, [r7, #23]
}
 800b276:	4618      	mov	r0, r3
 800b278:	371c      	adds	r7, #28
 800b27a:	46bd      	mov	sp, r7
 800b27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b280:	4770      	bx	lr

0800b282 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b282:	b480      	push	{r7}
 800b284:	b085      	sub	sp, #20
 800b286:	af00      	add	r7, sp, #0
 800b288:	6078      	str	r0, [r7, #4]
 800b28a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	781b      	ldrb	r3, [r3, #0]
 800b294:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	785b      	ldrb	r3, [r3, #1]
 800b29a:	2b01      	cmp	r3, #1
 800b29c:	d13a      	bne.n	800b314 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2a4:	69da      	ldr	r2, [r3, #28]
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	781b      	ldrb	r3, [r3, #0]
 800b2aa:	f003 030f 	and.w	r3, r3, #15
 800b2ae:	2101      	movs	r1, #1
 800b2b0:	fa01 f303 	lsl.w	r3, r1, r3
 800b2b4:	b29b      	uxth	r3, r3
 800b2b6:	68f9      	ldr	r1, [r7, #12]
 800b2b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b2bc:	4313      	orrs	r3, r2
 800b2be:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	015a      	lsls	r2, r3, #5
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	4413      	add	r3, r2
 800b2c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d155      	bne.n	800b382 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	015a      	lsls	r2, r3, #5
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	4413      	add	r3, r2
 800b2de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2e2:	681a      	ldr	r2, [r3, #0]
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	689b      	ldr	r3, [r3, #8]
 800b2e8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	78db      	ldrb	r3, [r3, #3]
 800b2f0:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b2f2:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	059b      	lsls	r3, r3, #22
 800b2f8:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b2fa:	4313      	orrs	r3, r2
 800b2fc:	68ba      	ldr	r2, [r7, #8]
 800b2fe:	0151      	lsls	r1, r2, #5
 800b300:	68fa      	ldr	r2, [r7, #12]
 800b302:	440a      	add	r2, r1
 800b304:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b30c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b310:	6013      	str	r3, [r2, #0]
 800b312:	e036      	b.n	800b382 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b31a:	69da      	ldr	r2, [r3, #28]
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	781b      	ldrb	r3, [r3, #0]
 800b320:	f003 030f 	and.w	r3, r3, #15
 800b324:	2101      	movs	r1, #1
 800b326:	fa01 f303 	lsl.w	r3, r1, r3
 800b32a:	041b      	lsls	r3, r3, #16
 800b32c:	68f9      	ldr	r1, [r7, #12]
 800b32e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b332:	4313      	orrs	r3, r2
 800b334:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	015a      	lsls	r2, r3, #5
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	4413      	add	r3, r2
 800b33e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d11a      	bne.n	800b382 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	015a      	lsls	r2, r3, #5
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	4413      	add	r3, r2
 800b354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b358:	681a      	ldr	r2, [r3, #0]
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	689b      	ldr	r3, [r3, #8]
 800b35e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	78db      	ldrb	r3, [r3, #3]
 800b366:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b368:	430b      	orrs	r3, r1
 800b36a:	4313      	orrs	r3, r2
 800b36c:	68ba      	ldr	r2, [r7, #8]
 800b36e:	0151      	lsls	r1, r2, #5
 800b370:	68fa      	ldr	r2, [r7, #12]
 800b372:	440a      	add	r2, r1
 800b374:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b37c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b380:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b382:	2300      	movs	r3, #0
}
 800b384:	4618      	mov	r0, r3
 800b386:	3714      	adds	r7, #20
 800b388:	46bd      	mov	sp, r7
 800b38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38e:	4770      	bx	lr

0800b390 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b08a      	sub	sp, #40	; 0x28
 800b394:	af02      	add	r7, sp, #8
 800b396:	60f8      	str	r0, [r7, #12]
 800b398:	60b9      	str	r1, [r7, #8]
 800b39a:	4613      	mov	r3, r2
 800b39c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	781b      	ldrb	r3, [r3, #0]
 800b3a6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	785b      	ldrb	r3, [r3, #1]
 800b3ac:	2b01      	cmp	r3, #1
 800b3ae:	f040 815c 	bne.w	800b66a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	695b      	ldr	r3, [r3, #20]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d132      	bne.n	800b420 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b3ba:	69bb      	ldr	r3, [r7, #24]
 800b3bc:	015a      	lsls	r2, r3, #5
 800b3be:	69fb      	ldr	r3, [r7, #28]
 800b3c0:	4413      	add	r3, r2
 800b3c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3c6:	691b      	ldr	r3, [r3, #16]
 800b3c8:	69ba      	ldr	r2, [r7, #24]
 800b3ca:	0151      	lsls	r1, r2, #5
 800b3cc:	69fa      	ldr	r2, [r7, #28]
 800b3ce:	440a      	add	r2, r1
 800b3d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b3d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b3dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b3de:	69bb      	ldr	r3, [r7, #24]
 800b3e0:	015a      	lsls	r2, r3, #5
 800b3e2:	69fb      	ldr	r3, [r7, #28]
 800b3e4:	4413      	add	r3, r2
 800b3e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3ea:	691b      	ldr	r3, [r3, #16]
 800b3ec:	69ba      	ldr	r2, [r7, #24]
 800b3ee:	0151      	lsls	r1, r2, #5
 800b3f0:	69fa      	ldr	r2, [r7, #28]
 800b3f2:	440a      	add	r2, r1
 800b3f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b3fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b3fe:	69bb      	ldr	r3, [r7, #24]
 800b400:	015a      	lsls	r2, r3, #5
 800b402:	69fb      	ldr	r3, [r7, #28]
 800b404:	4413      	add	r3, r2
 800b406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b40a:	691b      	ldr	r3, [r3, #16]
 800b40c:	69ba      	ldr	r2, [r7, #24]
 800b40e:	0151      	lsls	r1, r2, #5
 800b410:	69fa      	ldr	r2, [r7, #28]
 800b412:	440a      	add	r2, r1
 800b414:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b418:	0cdb      	lsrs	r3, r3, #19
 800b41a:	04db      	lsls	r3, r3, #19
 800b41c:	6113      	str	r3, [r2, #16]
 800b41e:	e074      	b.n	800b50a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b420:	69bb      	ldr	r3, [r7, #24]
 800b422:	015a      	lsls	r2, r3, #5
 800b424:	69fb      	ldr	r3, [r7, #28]
 800b426:	4413      	add	r3, r2
 800b428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b42c:	691b      	ldr	r3, [r3, #16]
 800b42e:	69ba      	ldr	r2, [r7, #24]
 800b430:	0151      	lsls	r1, r2, #5
 800b432:	69fa      	ldr	r2, [r7, #28]
 800b434:	440a      	add	r2, r1
 800b436:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b43a:	0cdb      	lsrs	r3, r3, #19
 800b43c:	04db      	lsls	r3, r3, #19
 800b43e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b440:	69bb      	ldr	r3, [r7, #24]
 800b442:	015a      	lsls	r2, r3, #5
 800b444:	69fb      	ldr	r3, [r7, #28]
 800b446:	4413      	add	r3, r2
 800b448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b44c:	691b      	ldr	r3, [r3, #16]
 800b44e:	69ba      	ldr	r2, [r7, #24]
 800b450:	0151      	lsls	r1, r2, #5
 800b452:	69fa      	ldr	r2, [r7, #28]
 800b454:	440a      	add	r2, r1
 800b456:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b45a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b45e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b462:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b464:	69bb      	ldr	r3, [r7, #24]
 800b466:	015a      	lsls	r2, r3, #5
 800b468:	69fb      	ldr	r3, [r7, #28]
 800b46a:	4413      	add	r3, r2
 800b46c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b470:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	6959      	ldr	r1, [r3, #20]
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	689b      	ldr	r3, [r3, #8]
 800b47a:	440b      	add	r3, r1
 800b47c:	1e59      	subs	r1, r3, #1
 800b47e:	68bb      	ldr	r3, [r7, #8]
 800b480:	689b      	ldr	r3, [r3, #8]
 800b482:	fbb1 f3f3 	udiv	r3, r1, r3
 800b486:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b488:	4b9d      	ldr	r3, [pc, #628]	; (800b700 <USB_EPStartXfer+0x370>)
 800b48a:	400b      	ands	r3, r1
 800b48c:	69b9      	ldr	r1, [r7, #24]
 800b48e:	0148      	lsls	r0, r1, #5
 800b490:	69f9      	ldr	r1, [r7, #28]
 800b492:	4401      	add	r1, r0
 800b494:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b498:	4313      	orrs	r3, r2
 800b49a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b49c:	69bb      	ldr	r3, [r7, #24]
 800b49e:	015a      	lsls	r2, r3, #5
 800b4a0:	69fb      	ldr	r3, [r7, #28]
 800b4a2:	4413      	add	r3, r2
 800b4a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4a8:	691a      	ldr	r2, [r3, #16]
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	695b      	ldr	r3, [r3, #20]
 800b4ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b4b2:	69b9      	ldr	r1, [r7, #24]
 800b4b4:	0148      	lsls	r0, r1, #5
 800b4b6:	69f9      	ldr	r1, [r7, #28]
 800b4b8:	4401      	add	r1, r0
 800b4ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b4be:	4313      	orrs	r3, r2
 800b4c0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	78db      	ldrb	r3, [r3, #3]
 800b4c6:	2b01      	cmp	r3, #1
 800b4c8:	d11f      	bne.n	800b50a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b4ca:	69bb      	ldr	r3, [r7, #24]
 800b4cc:	015a      	lsls	r2, r3, #5
 800b4ce:	69fb      	ldr	r3, [r7, #28]
 800b4d0:	4413      	add	r3, r2
 800b4d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4d6:	691b      	ldr	r3, [r3, #16]
 800b4d8:	69ba      	ldr	r2, [r7, #24]
 800b4da:	0151      	lsls	r1, r2, #5
 800b4dc:	69fa      	ldr	r2, [r7, #28]
 800b4de:	440a      	add	r2, r1
 800b4e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4e4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b4e8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b4ea:	69bb      	ldr	r3, [r7, #24]
 800b4ec:	015a      	lsls	r2, r3, #5
 800b4ee:	69fb      	ldr	r3, [r7, #28]
 800b4f0:	4413      	add	r3, r2
 800b4f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4f6:	691b      	ldr	r3, [r3, #16]
 800b4f8:	69ba      	ldr	r2, [r7, #24]
 800b4fa:	0151      	lsls	r1, r2, #5
 800b4fc:	69fa      	ldr	r2, [r7, #28]
 800b4fe:	440a      	add	r2, r1
 800b500:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b504:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b508:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b50a:	79fb      	ldrb	r3, [r7, #7]
 800b50c:	2b01      	cmp	r3, #1
 800b50e:	d14b      	bne.n	800b5a8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	691b      	ldr	r3, [r3, #16]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d009      	beq.n	800b52c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b518:	69bb      	ldr	r3, [r7, #24]
 800b51a:	015a      	lsls	r2, r3, #5
 800b51c:	69fb      	ldr	r3, [r7, #28]
 800b51e:	4413      	add	r3, r2
 800b520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b524:	461a      	mov	r2, r3
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	691b      	ldr	r3, [r3, #16]
 800b52a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	78db      	ldrb	r3, [r3, #3]
 800b530:	2b01      	cmp	r3, #1
 800b532:	d128      	bne.n	800b586 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b534:	69fb      	ldr	r3, [r7, #28]
 800b536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b53a:	689b      	ldr	r3, [r3, #8]
 800b53c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b540:	2b00      	cmp	r3, #0
 800b542:	d110      	bne.n	800b566 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b544:	69bb      	ldr	r3, [r7, #24]
 800b546:	015a      	lsls	r2, r3, #5
 800b548:	69fb      	ldr	r3, [r7, #28]
 800b54a:	4413      	add	r3, r2
 800b54c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	69ba      	ldr	r2, [r7, #24]
 800b554:	0151      	lsls	r1, r2, #5
 800b556:	69fa      	ldr	r2, [r7, #28]
 800b558:	440a      	add	r2, r1
 800b55a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b55e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b562:	6013      	str	r3, [r2, #0]
 800b564:	e00f      	b.n	800b586 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b566:	69bb      	ldr	r3, [r7, #24]
 800b568:	015a      	lsls	r2, r3, #5
 800b56a:	69fb      	ldr	r3, [r7, #28]
 800b56c:	4413      	add	r3, r2
 800b56e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	69ba      	ldr	r2, [r7, #24]
 800b576:	0151      	lsls	r1, r2, #5
 800b578:	69fa      	ldr	r2, [r7, #28]
 800b57a:	440a      	add	r2, r1
 800b57c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b584:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b586:	69bb      	ldr	r3, [r7, #24]
 800b588:	015a      	lsls	r2, r3, #5
 800b58a:	69fb      	ldr	r3, [r7, #28]
 800b58c:	4413      	add	r3, r2
 800b58e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	69ba      	ldr	r2, [r7, #24]
 800b596:	0151      	lsls	r1, r2, #5
 800b598:	69fa      	ldr	r2, [r7, #28]
 800b59a:	440a      	add	r2, r1
 800b59c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b5a4:	6013      	str	r3, [r2, #0]
 800b5a6:	e12f      	b.n	800b808 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b5a8:	69bb      	ldr	r3, [r7, #24]
 800b5aa:	015a      	lsls	r2, r3, #5
 800b5ac:	69fb      	ldr	r3, [r7, #28]
 800b5ae:	4413      	add	r3, r2
 800b5b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	69ba      	ldr	r2, [r7, #24]
 800b5b8:	0151      	lsls	r1, r2, #5
 800b5ba:	69fa      	ldr	r2, [r7, #28]
 800b5bc:	440a      	add	r2, r1
 800b5be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b5c6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	78db      	ldrb	r3, [r3, #3]
 800b5cc:	2b01      	cmp	r3, #1
 800b5ce:	d015      	beq.n	800b5fc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	695b      	ldr	r3, [r3, #20]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	f000 8117 	beq.w	800b808 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b5da:	69fb      	ldr	r3, [r7, #28]
 800b5dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	781b      	ldrb	r3, [r3, #0]
 800b5e6:	f003 030f 	and.w	r3, r3, #15
 800b5ea:	2101      	movs	r1, #1
 800b5ec:	fa01 f303 	lsl.w	r3, r1, r3
 800b5f0:	69f9      	ldr	r1, [r7, #28]
 800b5f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b5f6:	4313      	orrs	r3, r2
 800b5f8:	634b      	str	r3, [r1, #52]	; 0x34
 800b5fa:	e105      	b.n	800b808 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b5fc:	69fb      	ldr	r3, [r7, #28]
 800b5fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b602:	689b      	ldr	r3, [r3, #8]
 800b604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d110      	bne.n	800b62e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b60c:	69bb      	ldr	r3, [r7, #24]
 800b60e:	015a      	lsls	r2, r3, #5
 800b610:	69fb      	ldr	r3, [r7, #28]
 800b612:	4413      	add	r3, r2
 800b614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	69ba      	ldr	r2, [r7, #24]
 800b61c:	0151      	lsls	r1, r2, #5
 800b61e:	69fa      	ldr	r2, [r7, #28]
 800b620:	440a      	add	r2, r1
 800b622:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b626:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b62a:	6013      	str	r3, [r2, #0]
 800b62c:	e00f      	b.n	800b64e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b62e:	69bb      	ldr	r3, [r7, #24]
 800b630:	015a      	lsls	r2, r3, #5
 800b632:	69fb      	ldr	r3, [r7, #28]
 800b634:	4413      	add	r3, r2
 800b636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	69ba      	ldr	r2, [r7, #24]
 800b63e:	0151      	lsls	r1, r2, #5
 800b640:	69fa      	ldr	r2, [r7, #28]
 800b642:	440a      	add	r2, r1
 800b644:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b64c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	68d9      	ldr	r1, [r3, #12]
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	781a      	ldrb	r2, [r3, #0]
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	695b      	ldr	r3, [r3, #20]
 800b65a:	b298      	uxth	r0, r3
 800b65c:	79fb      	ldrb	r3, [r7, #7]
 800b65e:	9300      	str	r3, [sp, #0]
 800b660:	4603      	mov	r3, r0
 800b662:	68f8      	ldr	r0, [r7, #12]
 800b664:	f000 fa2b 	bl	800babe <USB_WritePacket>
 800b668:	e0ce      	b.n	800b808 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b66a:	69bb      	ldr	r3, [r7, #24]
 800b66c:	015a      	lsls	r2, r3, #5
 800b66e:	69fb      	ldr	r3, [r7, #28]
 800b670:	4413      	add	r3, r2
 800b672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b676:	691b      	ldr	r3, [r3, #16]
 800b678:	69ba      	ldr	r2, [r7, #24]
 800b67a:	0151      	lsls	r1, r2, #5
 800b67c:	69fa      	ldr	r2, [r7, #28]
 800b67e:	440a      	add	r2, r1
 800b680:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b684:	0cdb      	lsrs	r3, r3, #19
 800b686:	04db      	lsls	r3, r3, #19
 800b688:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b68a:	69bb      	ldr	r3, [r7, #24]
 800b68c:	015a      	lsls	r2, r3, #5
 800b68e:	69fb      	ldr	r3, [r7, #28]
 800b690:	4413      	add	r3, r2
 800b692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b696:	691b      	ldr	r3, [r3, #16]
 800b698:	69ba      	ldr	r2, [r7, #24]
 800b69a:	0151      	lsls	r1, r2, #5
 800b69c:	69fa      	ldr	r2, [r7, #28]
 800b69e:	440a      	add	r2, r1
 800b6a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b6a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b6ac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	695b      	ldr	r3, [r3, #20]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d126      	bne.n	800b704 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b6b6:	69bb      	ldr	r3, [r7, #24]
 800b6b8:	015a      	lsls	r2, r3, #5
 800b6ba:	69fb      	ldr	r3, [r7, #28]
 800b6bc:	4413      	add	r3, r2
 800b6be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6c2:	691a      	ldr	r2, [r3, #16]
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	689b      	ldr	r3, [r3, #8]
 800b6c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b6cc:	69b9      	ldr	r1, [r7, #24]
 800b6ce:	0148      	lsls	r0, r1, #5
 800b6d0:	69f9      	ldr	r1, [r7, #28]
 800b6d2:	4401      	add	r1, r0
 800b6d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b6d8:	4313      	orrs	r3, r2
 800b6da:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b6dc:	69bb      	ldr	r3, [r7, #24]
 800b6de:	015a      	lsls	r2, r3, #5
 800b6e0:	69fb      	ldr	r3, [r7, #28]
 800b6e2:	4413      	add	r3, r2
 800b6e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6e8:	691b      	ldr	r3, [r3, #16]
 800b6ea:	69ba      	ldr	r2, [r7, #24]
 800b6ec:	0151      	lsls	r1, r2, #5
 800b6ee:	69fa      	ldr	r2, [r7, #28]
 800b6f0:	440a      	add	r2, r1
 800b6f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b6fa:	6113      	str	r3, [r2, #16]
 800b6fc:	e036      	b.n	800b76c <USB_EPStartXfer+0x3dc>
 800b6fe:	bf00      	nop
 800b700:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	695a      	ldr	r2, [r3, #20]
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	689b      	ldr	r3, [r3, #8]
 800b70c:	4413      	add	r3, r2
 800b70e:	1e5a      	subs	r2, r3, #1
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	689b      	ldr	r3, [r3, #8]
 800b714:	fbb2 f3f3 	udiv	r3, r2, r3
 800b718:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b71a:	69bb      	ldr	r3, [r7, #24]
 800b71c:	015a      	lsls	r2, r3, #5
 800b71e:	69fb      	ldr	r3, [r7, #28]
 800b720:	4413      	add	r3, r2
 800b722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b726:	691a      	ldr	r2, [r3, #16]
 800b728:	8afb      	ldrh	r3, [r7, #22]
 800b72a:	04d9      	lsls	r1, r3, #19
 800b72c:	4b39      	ldr	r3, [pc, #228]	; (800b814 <USB_EPStartXfer+0x484>)
 800b72e:	400b      	ands	r3, r1
 800b730:	69b9      	ldr	r1, [r7, #24]
 800b732:	0148      	lsls	r0, r1, #5
 800b734:	69f9      	ldr	r1, [r7, #28]
 800b736:	4401      	add	r1, r0
 800b738:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b73c:	4313      	orrs	r3, r2
 800b73e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800b740:	69bb      	ldr	r3, [r7, #24]
 800b742:	015a      	lsls	r2, r3, #5
 800b744:	69fb      	ldr	r3, [r7, #28]
 800b746:	4413      	add	r3, r2
 800b748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b74c:	691a      	ldr	r2, [r3, #16]
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	689b      	ldr	r3, [r3, #8]
 800b752:	8af9      	ldrh	r1, [r7, #22]
 800b754:	fb01 f303 	mul.w	r3, r1, r3
 800b758:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b75c:	69b9      	ldr	r1, [r7, #24]
 800b75e:	0148      	lsls	r0, r1, #5
 800b760:	69f9      	ldr	r1, [r7, #28]
 800b762:	4401      	add	r1, r0
 800b764:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b768:	4313      	orrs	r3, r2
 800b76a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b76c:	79fb      	ldrb	r3, [r7, #7]
 800b76e:	2b01      	cmp	r3, #1
 800b770:	d10d      	bne.n	800b78e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	68db      	ldr	r3, [r3, #12]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d009      	beq.n	800b78e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	68d9      	ldr	r1, [r3, #12]
 800b77e:	69bb      	ldr	r3, [r7, #24]
 800b780:	015a      	lsls	r2, r3, #5
 800b782:	69fb      	ldr	r3, [r7, #28]
 800b784:	4413      	add	r3, r2
 800b786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b78a:	460a      	mov	r2, r1
 800b78c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	78db      	ldrb	r3, [r3, #3]
 800b792:	2b01      	cmp	r3, #1
 800b794:	d128      	bne.n	800b7e8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b796:	69fb      	ldr	r3, [r7, #28]
 800b798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b79c:	689b      	ldr	r3, [r3, #8]
 800b79e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d110      	bne.n	800b7c8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b7a6:	69bb      	ldr	r3, [r7, #24]
 800b7a8:	015a      	lsls	r2, r3, #5
 800b7aa:	69fb      	ldr	r3, [r7, #28]
 800b7ac:	4413      	add	r3, r2
 800b7ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	69ba      	ldr	r2, [r7, #24]
 800b7b6:	0151      	lsls	r1, r2, #5
 800b7b8:	69fa      	ldr	r2, [r7, #28]
 800b7ba:	440a      	add	r2, r1
 800b7bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b7c4:	6013      	str	r3, [r2, #0]
 800b7c6:	e00f      	b.n	800b7e8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b7c8:	69bb      	ldr	r3, [r7, #24]
 800b7ca:	015a      	lsls	r2, r3, #5
 800b7cc:	69fb      	ldr	r3, [r7, #28]
 800b7ce:	4413      	add	r3, r2
 800b7d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	69ba      	ldr	r2, [r7, #24]
 800b7d8:	0151      	lsls	r1, r2, #5
 800b7da:	69fa      	ldr	r2, [r7, #28]
 800b7dc:	440a      	add	r2, r1
 800b7de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b7e6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b7e8:	69bb      	ldr	r3, [r7, #24]
 800b7ea:	015a      	lsls	r2, r3, #5
 800b7ec:	69fb      	ldr	r3, [r7, #28]
 800b7ee:	4413      	add	r3, r2
 800b7f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	69ba      	ldr	r2, [r7, #24]
 800b7f8:	0151      	lsls	r1, r2, #5
 800b7fa:	69fa      	ldr	r2, [r7, #28]
 800b7fc:	440a      	add	r2, r1
 800b7fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b802:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b806:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b808:	2300      	movs	r3, #0
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	3720      	adds	r7, #32
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}
 800b812:	bf00      	nop
 800b814:	1ff80000 	.word	0x1ff80000

0800b818 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b818:	b480      	push	{r7}
 800b81a:	b087      	sub	sp, #28
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	60f8      	str	r0, [r7, #12]
 800b820:	60b9      	str	r1, [r7, #8]
 800b822:	4613      	mov	r3, r2
 800b824:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b82a:	68bb      	ldr	r3, [r7, #8]
 800b82c:	781b      	ldrb	r3, [r3, #0]
 800b82e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	785b      	ldrb	r3, [r3, #1]
 800b834:	2b01      	cmp	r3, #1
 800b836:	f040 80cd 	bne.w	800b9d4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	695b      	ldr	r3, [r3, #20]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d132      	bne.n	800b8a8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	015a      	lsls	r2, r3, #5
 800b846:	697b      	ldr	r3, [r7, #20]
 800b848:	4413      	add	r3, r2
 800b84a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b84e:	691b      	ldr	r3, [r3, #16]
 800b850:	693a      	ldr	r2, [r7, #16]
 800b852:	0151      	lsls	r1, r2, #5
 800b854:	697a      	ldr	r2, [r7, #20]
 800b856:	440a      	add	r2, r1
 800b858:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b85c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b860:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b864:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b866:	693b      	ldr	r3, [r7, #16]
 800b868:	015a      	lsls	r2, r3, #5
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	4413      	add	r3, r2
 800b86e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b872:	691b      	ldr	r3, [r3, #16]
 800b874:	693a      	ldr	r2, [r7, #16]
 800b876:	0151      	lsls	r1, r2, #5
 800b878:	697a      	ldr	r2, [r7, #20]
 800b87a:	440a      	add	r2, r1
 800b87c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b880:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b884:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b886:	693b      	ldr	r3, [r7, #16]
 800b888:	015a      	lsls	r2, r3, #5
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	4413      	add	r3, r2
 800b88e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b892:	691b      	ldr	r3, [r3, #16]
 800b894:	693a      	ldr	r2, [r7, #16]
 800b896:	0151      	lsls	r1, r2, #5
 800b898:	697a      	ldr	r2, [r7, #20]
 800b89a:	440a      	add	r2, r1
 800b89c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8a0:	0cdb      	lsrs	r3, r3, #19
 800b8a2:	04db      	lsls	r3, r3, #19
 800b8a4:	6113      	str	r3, [r2, #16]
 800b8a6:	e04e      	b.n	800b946 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b8a8:	693b      	ldr	r3, [r7, #16]
 800b8aa:	015a      	lsls	r2, r3, #5
 800b8ac:	697b      	ldr	r3, [r7, #20]
 800b8ae:	4413      	add	r3, r2
 800b8b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8b4:	691b      	ldr	r3, [r3, #16]
 800b8b6:	693a      	ldr	r2, [r7, #16]
 800b8b8:	0151      	lsls	r1, r2, #5
 800b8ba:	697a      	ldr	r2, [r7, #20]
 800b8bc:	440a      	add	r2, r1
 800b8be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8c2:	0cdb      	lsrs	r3, r3, #19
 800b8c4:	04db      	lsls	r3, r3, #19
 800b8c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b8c8:	693b      	ldr	r3, [r7, #16]
 800b8ca:	015a      	lsls	r2, r3, #5
 800b8cc:	697b      	ldr	r3, [r7, #20]
 800b8ce:	4413      	add	r3, r2
 800b8d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8d4:	691b      	ldr	r3, [r3, #16]
 800b8d6:	693a      	ldr	r2, [r7, #16]
 800b8d8:	0151      	lsls	r1, r2, #5
 800b8da:	697a      	ldr	r2, [r7, #20]
 800b8dc:	440a      	add	r2, r1
 800b8de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b8e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b8ea:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	695a      	ldr	r2, [r3, #20]
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	689b      	ldr	r3, [r3, #8]
 800b8f4:	429a      	cmp	r2, r3
 800b8f6:	d903      	bls.n	800b900 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	689a      	ldr	r2, [r3, #8]
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b900:	693b      	ldr	r3, [r7, #16]
 800b902:	015a      	lsls	r2, r3, #5
 800b904:	697b      	ldr	r3, [r7, #20]
 800b906:	4413      	add	r3, r2
 800b908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b90c:	691b      	ldr	r3, [r3, #16]
 800b90e:	693a      	ldr	r2, [r7, #16]
 800b910:	0151      	lsls	r1, r2, #5
 800b912:	697a      	ldr	r2, [r7, #20]
 800b914:	440a      	add	r2, r1
 800b916:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b91a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b91e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	015a      	lsls	r2, r3, #5
 800b924:	697b      	ldr	r3, [r7, #20]
 800b926:	4413      	add	r3, r2
 800b928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b92c:	691a      	ldr	r2, [r3, #16]
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	695b      	ldr	r3, [r3, #20]
 800b932:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b936:	6939      	ldr	r1, [r7, #16]
 800b938:	0148      	lsls	r0, r1, #5
 800b93a:	6979      	ldr	r1, [r7, #20]
 800b93c:	4401      	add	r1, r0
 800b93e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b942:	4313      	orrs	r3, r2
 800b944:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b946:	79fb      	ldrb	r3, [r7, #7]
 800b948:	2b01      	cmp	r3, #1
 800b94a:	d11e      	bne.n	800b98a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	691b      	ldr	r3, [r3, #16]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d009      	beq.n	800b968 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	015a      	lsls	r2, r3, #5
 800b958:	697b      	ldr	r3, [r7, #20]
 800b95a:	4413      	add	r3, r2
 800b95c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b960:	461a      	mov	r2, r3
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	691b      	ldr	r3, [r3, #16]
 800b966:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	015a      	lsls	r2, r3, #5
 800b96c:	697b      	ldr	r3, [r7, #20]
 800b96e:	4413      	add	r3, r2
 800b970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	693a      	ldr	r2, [r7, #16]
 800b978:	0151      	lsls	r1, r2, #5
 800b97a:	697a      	ldr	r2, [r7, #20]
 800b97c:	440a      	add	r2, r1
 800b97e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b982:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b986:	6013      	str	r3, [r2, #0]
 800b988:	e092      	b.n	800bab0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b98a:	693b      	ldr	r3, [r7, #16]
 800b98c:	015a      	lsls	r2, r3, #5
 800b98e:	697b      	ldr	r3, [r7, #20]
 800b990:	4413      	add	r3, r2
 800b992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	693a      	ldr	r2, [r7, #16]
 800b99a:	0151      	lsls	r1, r2, #5
 800b99c:	697a      	ldr	r2, [r7, #20]
 800b99e:	440a      	add	r2, r1
 800b9a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b9a8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	695b      	ldr	r3, [r3, #20]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d07e      	beq.n	800bab0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	781b      	ldrb	r3, [r3, #0]
 800b9be:	f003 030f 	and.w	r3, r3, #15
 800b9c2:	2101      	movs	r1, #1
 800b9c4:	fa01 f303 	lsl.w	r3, r1, r3
 800b9c8:	6979      	ldr	r1, [r7, #20]
 800b9ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b9ce:	4313      	orrs	r3, r2
 800b9d0:	634b      	str	r3, [r1, #52]	; 0x34
 800b9d2:	e06d      	b.n	800bab0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	015a      	lsls	r2, r3, #5
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	4413      	add	r3, r2
 800b9dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9e0:	691b      	ldr	r3, [r3, #16]
 800b9e2:	693a      	ldr	r2, [r7, #16]
 800b9e4:	0151      	lsls	r1, r2, #5
 800b9e6:	697a      	ldr	r2, [r7, #20]
 800b9e8:	440a      	add	r2, r1
 800b9ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b9ee:	0cdb      	lsrs	r3, r3, #19
 800b9f0:	04db      	lsls	r3, r3, #19
 800b9f2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b9f4:	693b      	ldr	r3, [r7, #16]
 800b9f6:	015a      	lsls	r2, r3, #5
 800b9f8:	697b      	ldr	r3, [r7, #20]
 800b9fa:	4413      	add	r3, r2
 800b9fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba00:	691b      	ldr	r3, [r3, #16]
 800ba02:	693a      	ldr	r2, [r7, #16]
 800ba04:	0151      	lsls	r1, r2, #5
 800ba06:	697a      	ldr	r2, [r7, #20]
 800ba08:	440a      	add	r2, r1
 800ba0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba0e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ba12:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ba16:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	695b      	ldr	r3, [r3, #20]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d003      	beq.n	800ba28 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	689a      	ldr	r2, [r3, #8]
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	015a      	lsls	r2, r3, #5
 800ba2c:	697b      	ldr	r3, [r7, #20]
 800ba2e:	4413      	add	r3, r2
 800ba30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba34:	691b      	ldr	r3, [r3, #16]
 800ba36:	693a      	ldr	r2, [r7, #16]
 800ba38:	0151      	lsls	r1, r2, #5
 800ba3a:	697a      	ldr	r2, [r7, #20]
 800ba3c:	440a      	add	r2, r1
 800ba3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ba46:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800ba48:	693b      	ldr	r3, [r7, #16]
 800ba4a:	015a      	lsls	r2, r3, #5
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	4413      	add	r3, r2
 800ba50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba54:	691a      	ldr	r2, [r3, #16]
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	689b      	ldr	r3, [r3, #8]
 800ba5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ba5e:	6939      	ldr	r1, [r7, #16]
 800ba60:	0148      	lsls	r0, r1, #5
 800ba62:	6979      	ldr	r1, [r7, #20]
 800ba64:	4401      	add	r1, r0
 800ba66:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ba6a:	4313      	orrs	r3, r2
 800ba6c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800ba6e:	79fb      	ldrb	r3, [r7, #7]
 800ba70:	2b01      	cmp	r3, #1
 800ba72:	d10d      	bne.n	800ba90 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	68db      	ldr	r3, [r3, #12]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d009      	beq.n	800ba90 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	68d9      	ldr	r1, [r3, #12]
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	015a      	lsls	r2, r3, #5
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	4413      	add	r3, r2
 800ba88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba8c:	460a      	mov	r2, r1
 800ba8e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ba90:	693b      	ldr	r3, [r7, #16]
 800ba92:	015a      	lsls	r2, r3, #5
 800ba94:	697b      	ldr	r3, [r7, #20]
 800ba96:	4413      	add	r3, r2
 800ba98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	693a      	ldr	r2, [r7, #16]
 800baa0:	0151      	lsls	r1, r2, #5
 800baa2:	697a      	ldr	r2, [r7, #20]
 800baa4:	440a      	add	r2, r1
 800baa6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800baaa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800baae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bab0:	2300      	movs	r3, #0
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	371c      	adds	r7, #28
 800bab6:	46bd      	mov	sp, r7
 800bab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babc:	4770      	bx	lr

0800babe <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800babe:	b480      	push	{r7}
 800bac0:	b089      	sub	sp, #36	; 0x24
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	60f8      	str	r0, [r7, #12]
 800bac6:	60b9      	str	r1, [r7, #8]
 800bac8:	4611      	mov	r1, r2
 800baca:	461a      	mov	r2, r3
 800bacc:	460b      	mov	r3, r1
 800bace:	71fb      	strb	r3, [r7, #7]
 800bad0:	4613      	mov	r3, r2
 800bad2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800badc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d123      	bne.n	800bb2c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800bae4:	88bb      	ldrh	r3, [r7, #4]
 800bae6:	3303      	adds	r3, #3
 800bae8:	089b      	lsrs	r3, r3, #2
 800baea:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800baec:	2300      	movs	r3, #0
 800baee:	61bb      	str	r3, [r7, #24]
 800baf0:	e018      	b.n	800bb24 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800baf2:	79fb      	ldrb	r3, [r7, #7]
 800baf4:	031a      	lsls	r2, r3, #12
 800baf6:	697b      	ldr	r3, [r7, #20]
 800baf8:	4413      	add	r3, r2
 800bafa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bafe:	461a      	mov	r2, r3
 800bb00:	69fb      	ldr	r3, [r7, #28]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	6013      	str	r3, [r2, #0]
      pSrc++;
 800bb06:	69fb      	ldr	r3, [r7, #28]
 800bb08:	3301      	adds	r3, #1
 800bb0a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bb0c:	69fb      	ldr	r3, [r7, #28]
 800bb0e:	3301      	adds	r3, #1
 800bb10:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bb12:	69fb      	ldr	r3, [r7, #28]
 800bb14:	3301      	adds	r3, #1
 800bb16:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bb18:	69fb      	ldr	r3, [r7, #28]
 800bb1a:	3301      	adds	r3, #1
 800bb1c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800bb1e:	69bb      	ldr	r3, [r7, #24]
 800bb20:	3301      	adds	r3, #1
 800bb22:	61bb      	str	r3, [r7, #24]
 800bb24:	69ba      	ldr	r2, [r7, #24]
 800bb26:	693b      	ldr	r3, [r7, #16]
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	d3e2      	bcc.n	800baf2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800bb2c:	2300      	movs	r3, #0
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	3724      	adds	r7, #36	; 0x24
 800bb32:	46bd      	mov	sp, r7
 800bb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb38:	4770      	bx	lr

0800bb3a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bb3a:	b480      	push	{r7}
 800bb3c:	b08b      	sub	sp, #44	; 0x2c
 800bb3e:	af00      	add	r7, sp, #0
 800bb40:	60f8      	str	r0, [r7, #12]
 800bb42:	60b9      	str	r1, [r7, #8]
 800bb44:	4613      	mov	r3, r2
 800bb46:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800bb50:	88fb      	ldrh	r3, [r7, #6]
 800bb52:	089b      	lsrs	r3, r3, #2
 800bb54:	b29b      	uxth	r3, r3
 800bb56:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800bb58:	88fb      	ldrh	r3, [r7, #6]
 800bb5a:	f003 0303 	and.w	r3, r3, #3
 800bb5e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800bb60:	2300      	movs	r3, #0
 800bb62:	623b      	str	r3, [r7, #32]
 800bb64:	e014      	b.n	800bb90 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bb66:	69bb      	ldr	r3, [r7, #24]
 800bb68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb6c:	681a      	ldr	r2, [r3, #0]
 800bb6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb70:	601a      	str	r2, [r3, #0]
    pDest++;
 800bb72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb74:	3301      	adds	r3, #1
 800bb76:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bb78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb7a:	3301      	adds	r3, #1
 800bb7c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bb7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb80:	3301      	adds	r3, #1
 800bb82:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bb84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb86:	3301      	adds	r3, #1
 800bb88:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800bb8a:	6a3b      	ldr	r3, [r7, #32]
 800bb8c:	3301      	adds	r3, #1
 800bb8e:	623b      	str	r3, [r7, #32]
 800bb90:	6a3a      	ldr	r2, [r7, #32]
 800bb92:	697b      	ldr	r3, [r7, #20]
 800bb94:	429a      	cmp	r2, r3
 800bb96:	d3e6      	bcc.n	800bb66 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800bb98:	8bfb      	ldrh	r3, [r7, #30]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d01e      	beq.n	800bbdc <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800bba2:	69bb      	ldr	r3, [r7, #24]
 800bba4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bba8:	461a      	mov	r2, r3
 800bbaa:	f107 0310 	add.w	r3, r7, #16
 800bbae:	6812      	ldr	r2, [r2, #0]
 800bbb0:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800bbb2:	693a      	ldr	r2, [r7, #16]
 800bbb4:	6a3b      	ldr	r3, [r7, #32]
 800bbb6:	b2db      	uxtb	r3, r3
 800bbb8:	00db      	lsls	r3, r3, #3
 800bbba:	fa22 f303 	lsr.w	r3, r2, r3
 800bbbe:	b2da      	uxtb	r2, r3
 800bbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbc2:	701a      	strb	r2, [r3, #0]
      i++;
 800bbc4:	6a3b      	ldr	r3, [r7, #32]
 800bbc6:	3301      	adds	r3, #1
 800bbc8:	623b      	str	r3, [r7, #32]
      pDest++;
 800bbca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbcc:	3301      	adds	r3, #1
 800bbce:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800bbd0:	8bfb      	ldrh	r3, [r7, #30]
 800bbd2:	3b01      	subs	r3, #1
 800bbd4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800bbd6:	8bfb      	ldrh	r3, [r7, #30]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d1ea      	bne.n	800bbb2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800bbdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	372c      	adds	r7, #44	; 0x2c
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe8:	4770      	bx	lr

0800bbea <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bbea:	b480      	push	{r7}
 800bbec:	b085      	sub	sp, #20
 800bbee:	af00      	add	r7, sp, #0
 800bbf0:	6078      	str	r0, [r7, #4]
 800bbf2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	781b      	ldrb	r3, [r3, #0]
 800bbfc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	785b      	ldrb	r3, [r3, #1]
 800bc02:	2b01      	cmp	r3, #1
 800bc04:	d12c      	bne.n	800bc60 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bc06:	68bb      	ldr	r3, [r7, #8]
 800bc08:	015a      	lsls	r2, r3, #5
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	4413      	add	r3, r2
 800bc0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	db12      	blt.n	800bc3e <USB_EPSetStall+0x54>
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d00f      	beq.n	800bc3e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800bc1e:	68bb      	ldr	r3, [r7, #8]
 800bc20:	015a      	lsls	r2, r3, #5
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	4413      	add	r3, r2
 800bc26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	68ba      	ldr	r2, [r7, #8]
 800bc2e:	0151      	lsls	r1, r2, #5
 800bc30:	68fa      	ldr	r2, [r7, #12]
 800bc32:	440a      	add	r2, r1
 800bc34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc38:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bc3c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	015a      	lsls	r2, r3, #5
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	4413      	add	r3, r2
 800bc46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	68ba      	ldr	r2, [r7, #8]
 800bc4e:	0151      	lsls	r1, r2, #5
 800bc50:	68fa      	ldr	r2, [r7, #12]
 800bc52:	440a      	add	r2, r1
 800bc54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bc5c:	6013      	str	r3, [r2, #0]
 800bc5e:	e02b      	b.n	800bcb8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bc60:	68bb      	ldr	r3, [r7, #8]
 800bc62:	015a      	lsls	r2, r3, #5
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	4413      	add	r3, r2
 800bc68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	db12      	blt.n	800bc98 <USB_EPSetStall+0xae>
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d00f      	beq.n	800bc98 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	015a      	lsls	r2, r3, #5
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	4413      	add	r3, r2
 800bc80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	68ba      	ldr	r2, [r7, #8]
 800bc88:	0151      	lsls	r1, r2, #5
 800bc8a:	68fa      	ldr	r2, [r7, #12]
 800bc8c:	440a      	add	r2, r1
 800bc8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc92:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bc96:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	015a      	lsls	r2, r3, #5
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	4413      	add	r3, r2
 800bca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	68ba      	ldr	r2, [r7, #8]
 800bca8:	0151      	lsls	r1, r2, #5
 800bcaa:	68fa      	ldr	r2, [r7, #12]
 800bcac:	440a      	add	r2, r1
 800bcae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bcb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bcb6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bcb8:	2300      	movs	r3, #0
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3714      	adds	r7, #20
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc4:	4770      	bx	lr

0800bcc6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bcc6:	b480      	push	{r7}
 800bcc8:	b085      	sub	sp, #20
 800bcca:	af00      	add	r7, sp, #0
 800bccc:	6078      	str	r0, [r7, #4]
 800bcce:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	781b      	ldrb	r3, [r3, #0]
 800bcd8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	785b      	ldrb	r3, [r3, #1]
 800bcde:	2b01      	cmp	r3, #1
 800bce0:	d128      	bne.n	800bd34 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bce2:	68bb      	ldr	r3, [r7, #8]
 800bce4:	015a      	lsls	r2, r3, #5
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	4413      	add	r3, r2
 800bcea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	68ba      	ldr	r2, [r7, #8]
 800bcf2:	0151      	lsls	r1, r2, #5
 800bcf4:	68fa      	ldr	r2, [r7, #12]
 800bcf6:	440a      	add	r2, r1
 800bcf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bcfc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bd00:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	78db      	ldrb	r3, [r3, #3]
 800bd06:	2b03      	cmp	r3, #3
 800bd08:	d003      	beq.n	800bd12 <USB_EPClearStall+0x4c>
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	78db      	ldrb	r3, [r3, #3]
 800bd0e:	2b02      	cmp	r3, #2
 800bd10:	d138      	bne.n	800bd84 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bd12:	68bb      	ldr	r3, [r7, #8]
 800bd14:	015a      	lsls	r2, r3, #5
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	4413      	add	r3, r2
 800bd1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	68ba      	ldr	r2, [r7, #8]
 800bd22:	0151      	lsls	r1, r2, #5
 800bd24:	68fa      	ldr	r2, [r7, #12]
 800bd26:	440a      	add	r2, r1
 800bd28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bd30:	6013      	str	r3, [r2, #0]
 800bd32:	e027      	b.n	800bd84 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	015a      	lsls	r2, r3, #5
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	4413      	add	r3, r2
 800bd3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	68ba      	ldr	r2, [r7, #8]
 800bd44:	0151      	lsls	r1, r2, #5
 800bd46:	68fa      	ldr	r2, [r7, #12]
 800bd48:	440a      	add	r2, r1
 800bd4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bd52:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	78db      	ldrb	r3, [r3, #3]
 800bd58:	2b03      	cmp	r3, #3
 800bd5a:	d003      	beq.n	800bd64 <USB_EPClearStall+0x9e>
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	78db      	ldrb	r3, [r3, #3]
 800bd60:	2b02      	cmp	r3, #2
 800bd62:	d10f      	bne.n	800bd84 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	015a      	lsls	r2, r3, #5
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	4413      	add	r3, r2
 800bd6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	68ba      	ldr	r2, [r7, #8]
 800bd74:	0151      	lsls	r1, r2, #5
 800bd76:	68fa      	ldr	r2, [r7, #12]
 800bd78:	440a      	add	r2, r1
 800bd7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bd82:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800bd84:	2300      	movs	r3, #0
}
 800bd86:	4618      	mov	r0, r3
 800bd88:	3714      	adds	r7, #20
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd90:	4770      	bx	lr

0800bd92 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800bd92:	b480      	push	{r7}
 800bd94:	b085      	sub	sp, #20
 800bd96:	af00      	add	r7, sp, #0
 800bd98:	6078      	str	r0, [r7, #4]
 800bd9a:	460b      	mov	r3, r1
 800bd9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	68fa      	ldr	r2, [r7, #12]
 800bdac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bdb0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800bdb4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdbc:	681a      	ldr	r2, [r3, #0]
 800bdbe:	78fb      	ldrb	r3, [r7, #3]
 800bdc0:	011b      	lsls	r3, r3, #4
 800bdc2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800bdc6:	68f9      	ldr	r1, [r7, #12]
 800bdc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bdcc:	4313      	orrs	r3, r2
 800bdce:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800bdd0:	2300      	movs	r3, #0
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3714      	adds	r7, #20
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bddc:	4770      	bx	lr

0800bdde <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800bdde:	b480      	push	{r7}
 800bde0:	b085      	sub	sp, #20
 800bde2:	af00      	add	r7, sp, #0
 800bde4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	695b      	ldr	r3, [r3, #20]
 800bdea:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	699b      	ldr	r3, [r3, #24]
 800bdf0:	68fa      	ldr	r2, [r7, #12]
 800bdf2:	4013      	ands	r3, r2
 800bdf4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
}
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	3714      	adds	r7, #20
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be02:	4770      	bx	lr

0800be04 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800be04:	b480      	push	{r7}
 800be06:	b085      	sub	sp, #20
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be16:	699b      	ldr	r3, [r3, #24]
 800be18:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be20:	69db      	ldr	r3, [r3, #28]
 800be22:	68ba      	ldr	r2, [r7, #8]
 800be24:	4013      	ands	r3, r2
 800be26:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800be28:	68bb      	ldr	r3, [r7, #8]
 800be2a:	0c1b      	lsrs	r3, r3, #16
}
 800be2c:	4618      	mov	r0, r3
 800be2e:	3714      	adds	r7, #20
 800be30:	46bd      	mov	sp, r7
 800be32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be36:	4770      	bx	lr

0800be38 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800be38:	b480      	push	{r7}
 800be3a:	b085      	sub	sp, #20
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be4a:	699b      	ldr	r3, [r3, #24]
 800be4c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be54:	69db      	ldr	r3, [r3, #28]
 800be56:	68ba      	ldr	r2, [r7, #8]
 800be58:	4013      	ands	r3, r2
 800be5a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	b29b      	uxth	r3, r3
}
 800be60:	4618      	mov	r0, r3
 800be62:	3714      	adds	r7, #20
 800be64:	46bd      	mov	sp, r7
 800be66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6a:	4770      	bx	lr

0800be6c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800be6c:	b480      	push	{r7}
 800be6e:	b085      	sub	sp, #20
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
 800be74:	460b      	mov	r3, r1
 800be76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800be7c:	78fb      	ldrb	r3, [r7, #3]
 800be7e:	015a      	lsls	r2, r3, #5
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	4413      	add	r3, r2
 800be84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be88:	689b      	ldr	r3, [r3, #8]
 800be8a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be92:	695b      	ldr	r3, [r3, #20]
 800be94:	68ba      	ldr	r2, [r7, #8]
 800be96:	4013      	ands	r3, r2
 800be98:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800be9a:	68bb      	ldr	r3, [r7, #8]
}
 800be9c:	4618      	mov	r0, r3
 800be9e:	3714      	adds	r7, #20
 800bea0:	46bd      	mov	sp, r7
 800bea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea6:	4770      	bx	lr

0800bea8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bea8:	b480      	push	{r7}
 800beaa:	b087      	sub	sp, #28
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	460b      	mov	r3, r1
 800beb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800beb8:	697b      	ldr	r3, [r7, #20]
 800beba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bebe:	691b      	ldr	r3, [r3, #16]
 800bec0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800bec2:	697b      	ldr	r3, [r7, #20]
 800bec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800beca:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800becc:	78fb      	ldrb	r3, [r7, #3]
 800bece:	f003 030f 	and.w	r3, r3, #15
 800bed2:	68fa      	ldr	r2, [r7, #12]
 800bed4:	fa22 f303 	lsr.w	r3, r2, r3
 800bed8:	01db      	lsls	r3, r3, #7
 800beda:	b2db      	uxtb	r3, r3
 800bedc:	693a      	ldr	r2, [r7, #16]
 800bede:	4313      	orrs	r3, r2
 800bee0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bee2:	78fb      	ldrb	r3, [r7, #3]
 800bee4:	015a      	lsls	r2, r3, #5
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	4413      	add	r3, r2
 800beea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800beee:	689b      	ldr	r3, [r3, #8]
 800bef0:	693a      	ldr	r2, [r7, #16]
 800bef2:	4013      	ands	r3, r2
 800bef4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bef6:	68bb      	ldr	r3, [r7, #8]
}
 800bef8:	4618      	mov	r0, r3
 800befa:	371c      	adds	r7, #28
 800befc:	46bd      	mov	sp, r7
 800befe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf02:	4770      	bx	lr

0800bf04 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800bf04:	b480      	push	{r7}
 800bf06:	b083      	sub	sp, #12
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	695b      	ldr	r3, [r3, #20]
 800bf10:	f003 0301 	and.w	r3, r3, #1
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	370c      	adds	r7, #12
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1e:	4770      	bx	lr

0800bf20 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800bf20:	b480      	push	{r7}
 800bf22:	b085      	sub	sp, #20
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	68fa      	ldr	r2, [r7, #12]
 800bf36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf3a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800bf3e:	f023 0307 	bic.w	r3, r3, #7
 800bf42:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf4a:	685b      	ldr	r3, [r3, #4]
 800bf4c:	68fa      	ldr	r2, [r7, #12]
 800bf4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bf52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bf56:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bf58:	2300      	movs	r3, #0
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	3714      	adds	r7, #20
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf64:	4770      	bx	lr
	...

0800bf68 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b087      	sub	sp, #28
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	60f8      	str	r0, [r7, #12]
 800bf70:	460b      	mov	r3, r1
 800bf72:	607a      	str	r2, [r7, #4]
 800bf74:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	333c      	adds	r3, #60	; 0x3c
 800bf7e:	3304      	adds	r3, #4
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800bf84:	693b      	ldr	r3, [r7, #16]
 800bf86:	4a26      	ldr	r2, [pc, #152]	; (800c020 <USB_EP0_OutStart+0xb8>)
 800bf88:	4293      	cmp	r3, r2
 800bf8a:	d90a      	bls.n	800bfa2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bf8c:	697b      	ldr	r3, [r7, #20]
 800bf8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bf98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bf9c:	d101      	bne.n	800bfa2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	e037      	b.n	800c012 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800bfa2:	697b      	ldr	r3, [r7, #20]
 800bfa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfa8:	461a      	mov	r2, r3
 800bfaa:	2300      	movs	r3, #0
 800bfac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bfae:	697b      	ldr	r3, [r7, #20]
 800bfb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfb4:	691b      	ldr	r3, [r3, #16]
 800bfb6:	697a      	ldr	r2, [r7, #20]
 800bfb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bfbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bfc0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bfc2:	697b      	ldr	r3, [r7, #20]
 800bfc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfc8:	691b      	ldr	r3, [r3, #16]
 800bfca:	697a      	ldr	r2, [r7, #20]
 800bfcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bfd0:	f043 0318 	orr.w	r3, r3, #24
 800bfd4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bfd6:	697b      	ldr	r3, [r7, #20]
 800bfd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfdc:	691b      	ldr	r3, [r3, #16]
 800bfde:	697a      	ldr	r2, [r7, #20]
 800bfe0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bfe4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800bfe8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800bfea:	7afb      	ldrb	r3, [r7, #11]
 800bfec:	2b01      	cmp	r3, #1
 800bfee:	d10f      	bne.n	800c010 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bff0:	697b      	ldr	r3, [r7, #20]
 800bff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bff6:	461a      	mov	r2, r3
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800bffc:	697b      	ldr	r3, [r7, #20]
 800bffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	697a      	ldr	r2, [r7, #20]
 800c006:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c00a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c00e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c010:	2300      	movs	r3, #0
}
 800c012:	4618      	mov	r0, r3
 800c014:	371c      	adds	r7, #28
 800c016:	46bd      	mov	sp, r7
 800c018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01c:	4770      	bx	lr
 800c01e:	bf00      	nop
 800c020:	4f54300a 	.word	0x4f54300a

0800c024 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800c028:	4904      	ldr	r1, [pc, #16]	; (800c03c <MX_FATFS_Init+0x18>)
 800c02a:	4805      	ldr	r0, [pc, #20]	; (800c040 <MX_FATFS_Init+0x1c>)
 800c02c:	f003 ff46 	bl	800febc <FATFS_LinkDriver>
 800c030:	4603      	mov	r3, r0
 800c032:	461a      	mov	r2, r3
 800c034:	4b03      	ldr	r3, [pc, #12]	; (800c044 <MX_FATFS_Init+0x20>)
 800c036:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c038:	bf00      	nop
 800c03a:	bd80      	pop	{r7, pc}
 800c03c:	20005fc4 	.word	0x20005fc4
 800c040:	20000068 	.word	0x20000068
 800c044:	20005fc8 	.word	0x20005fc8

0800c048 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c048:	b480      	push	{r7}
 800c04a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c04c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800c04e:	4618      	mov	r0, r3
 800c050:	46bd      	mov	sp, r7
 800c052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c056:	4770      	bx	lr

0800c058 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800c058:	b480      	push	{r7}
 800c05a:	b083      	sub	sp, #12
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	4603      	mov	r3, r0
 800c060:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800c062:	4b06      	ldr	r3, [pc, #24]	; (800c07c <USER_initialize+0x24>)
 800c064:	2201      	movs	r2, #1
 800c066:	701a      	strb	r2, [r3, #0]
    return Stat;
 800c068:	4b04      	ldr	r3, [pc, #16]	; (800c07c <USER_initialize+0x24>)
 800c06a:	781b      	ldrb	r3, [r3, #0]
 800c06c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800c06e:	4618      	mov	r0, r3
 800c070:	370c      	adds	r7, #12
 800c072:	46bd      	mov	sp, r7
 800c074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c078:	4770      	bx	lr
 800c07a:	bf00      	nop
 800c07c:	20000065 	.word	0x20000065

0800c080 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800c080:	b480      	push	{r7}
 800c082:	b083      	sub	sp, #12
 800c084:	af00      	add	r7, sp, #0
 800c086:	4603      	mov	r3, r0
 800c088:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800c08a:	4b06      	ldr	r3, [pc, #24]	; (800c0a4 <USER_status+0x24>)
 800c08c:	2201      	movs	r2, #1
 800c08e:	701a      	strb	r2, [r3, #0]
    return Stat;
 800c090:	4b04      	ldr	r3, [pc, #16]	; (800c0a4 <USER_status+0x24>)
 800c092:	781b      	ldrb	r3, [r3, #0]
 800c094:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800c096:	4618      	mov	r0, r3
 800c098:	370c      	adds	r7, #12
 800c09a:	46bd      	mov	sp, r7
 800c09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a0:	4770      	bx	lr
 800c0a2:	bf00      	nop
 800c0a4:	20000065 	.word	0x20000065

0800c0a8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	b085      	sub	sp, #20
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	60b9      	str	r1, [r7, #8]
 800c0b0:	607a      	str	r2, [r7, #4]
 800c0b2:	603b      	str	r3, [r7, #0]
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800c0b8:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	3714      	adds	r7, #20
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c4:	4770      	bx	lr

0800c0c6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800c0c6:	b480      	push	{r7}
 800c0c8:	b085      	sub	sp, #20
 800c0ca:	af00      	add	r7, sp, #0
 800c0cc:	60b9      	str	r1, [r7, #8]
 800c0ce:	607a      	str	r2, [r7, #4]
 800c0d0:	603b      	str	r3, [r7, #0]
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800c0d6:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800c0d8:	4618      	mov	r0, r3
 800c0da:	3714      	adds	r7, #20
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e2:	4770      	bx	lr

0800c0e4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	b085      	sub	sp, #20
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	603a      	str	r2, [r7, #0]
 800c0ee:	71fb      	strb	r3, [r7, #7]
 800c0f0:	460b      	mov	r3, r1
 800c0f2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800c0f4:	2301      	movs	r3, #1
 800c0f6:	73fb      	strb	r3, [r7, #15]
    return res;
 800c0f8:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	3714      	adds	r7, #20
 800c0fe:	46bd      	mov	sp, r7
 800c100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c104:	4770      	bx	lr

0800c106 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c106:	b480      	push	{r7}
 800c108:	b083      	sub	sp, #12
 800c10a:	af00      	add	r7, sp, #0
 800c10c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c10e:	2300      	movs	r3, #0
}
 800c110:	4618      	mov	r0, r3
 800c112:	370c      	adds	r7, #12
 800c114:	46bd      	mov	sp, r7
 800c116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11a:	4770      	bx	lr

0800c11c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b084      	sub	sp, #16
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	460b      	mov	r3, r1
 800c126:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c128:	2303      	movs	r3, #3
 800c12a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c132:	2b00      	cmp	r3, #0
 800c134:	d009      	beq.n	800c14a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	78fa      	ldrb	r2, [r7, #3]
 800c140:	4611      	mov	r1, r2
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	4798      	blx	r3
 800c146:	4603      	mov	r3, r0
 800c148:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c14a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c14c:	4618      	mov	r0, r3
 800c14e:	3710      	adds	r7, #16
 800c150:	46bd      	mov	sp, r7
 800c152:	bd80      	pop	{r7, pc}

0800c154 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b082      	sub	sp, #8
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
 800c15c:	460b      	mov	r3, r1
 800c15e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c166:	2b00      	cmp	r3, #0
 800c168:	d007      	beq.n	800c17a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c170:	685b      	ldr	r3, [r3, #4]
 800c172:	78fa      	ldrb	r2, [r7, #3]
 800c174:	4611      	mov	r1, r2
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	4798      	blx	r3
  }

  return USBD_OK;
 800c17a:	2300      	movs	r3, #0
}
 800c17c:	4618      	mov	r0, r3
 800c17e:	3708      	adds	r7, #8
 800c180:	46bd      	mov	sp, r7
 800c182:	bd80      	pop	{r7, pc}

0800c184 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b084      	sub	sp, #16
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
 800c18c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c194:	6839      	ldr	r1, [r7, #0]
 800c196:	4618      	mov	r0, r3
 800c198:	f000 ff90 	bl	800d0bc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2201      	movs	r2, #1
 800c1a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c1aa:	461a      	mov	r2, r3
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c1b8:	f003 031f 	and.w	r3, r3, #31
 800c1bc:	2b02      	cmp	r3, #2
 800c1be:	d01a      	beq.n	800c1f6 <USBD_LL_SetupStage+0x72>
 800c1c0:	2b02      	cmp	r3, #2
 800c1c2:	d822      	bhi.n	800c20a <USBD_LL_SetupStage+0x86>
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d002      	beq.n	800c1ce <USBD_LL_SetupStage+0x4a>
 800c1c8:	2b01      	cmp	r3, #1
 800c1ca:	d00a      	beq.n	800c1e2 <USBD_LL_SetupStage+0x5e>
 800c1cc:	e01d      	b.n	800c20a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c1d4:	4619      	mov	r1, r3
 800c1d6:	6878      	ldr	r0, [r7, #4]
 800c1d8:	f000 fa62 	bl	800c6a0 <USBD_StdDevReq>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	73fb      	strb	r3, [r7, #15]
      break;
 800c1e0:	e020      	b.n	800c224 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c1e8:	4619      	mov	r1, r3
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f000 fac6 	bl	800c77c <USBD_StdItfReq>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	73fb      	strb	r3, [r7, #15]
      break;
 800c1f4:	e016      	b.n	800c224 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c1fc:	4619      	mov	r1, r3
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	f000 fb05 	bl	800c80e <USBD_StdEPReq>
 800c204:	4603      	mov	r3, r0
 800c206:	73fb      	strb	r3, [r7, #15]
      break;
 800c208:	e00c      	b.n	800c224 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c210:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c214:	b2db      	uxtb	r3, r3
 800c216:	4619      	mov	r1, r3
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	f006 f831 	bl	8012280 <USBD_LL_StallEP>
 800c21e:	4603      	mov	r3, r0
 800c220:	73fb      	strb	r3, [r7, #15]
      break;
 800c222:	bf00      	nop
  }

  return ret;
 800c224:	7bfb      	ldrb	r3, [r7, #15]
}
 800c226:	4618      	mov	r0, r3
 800c228:	3710      	adds	r7, #16
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd80      	pop	{r7, pc}

0800c22e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c22e:	b580      	push	{r7, lr}
 800c230:	b086      	sub	sp, #24
 800c232:	af00      	add	r7, sp, #0
 800c234:	60f8      	str	r0, [r7, #12]
 800c236:	460b      	mov	r3, r1
 800c238:	607a      	str	r2, [r7, #4]
 800c23a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c23c:	7afb      	ldrb	r3, [r7, #11]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d138      	bne.n	800c2b4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c248:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c250:	2b03      	cmp	r3, #3
 800c252:	d14a      	bne.n	800c2ea <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c254:	693b      	ldr	r3, [r7, #16]
 800c256:	689a      	ldr	r2, [r3, #8]
 800c258:	693b      	ldr	r3, [r7, #16]
 800c25a:	68db      	ldr	r3, [r3, #12]
 800c25c:	429a      	cmp	r2, r3
 800c25e:	d913      	bls.n	800c288 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c260:	693b      	ldr	r3, [r7, #16]
 800c262:	689a      	ldr	r2, [r3, #8]
 800c264:	693b      	ldr	r3, [r7, #16]
 800c266:	68db      	ldr	r3, [r3, #12]
 800c268:	1ad2      	subs	r2, r2, r3
 800c26a:	693b      	ldr	r3, [r7, #16]
 800c26c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c26e:	693b      	ldr	r3, [r7, #16]
 800c270:	68da      	ldr	r2, [r3, #12]
 800c272:	693b      	ldr	r3, [r7, #16]
 800c274:	689b      	ldr	r3, [r3, #8]
 800c276:	4293      	cmp	r3, r2
 800c278:	bf28      	it	cs
 800c27a:	4613      	movcs	r3, r2
 800c27c:	461a      	mov	r2, r3
 800c27e:	6879      	ldr	r1, [r7, #4]
 800c280:	68f8      	ldr	r0, [r7, #12]
 800c282:	f000 ff92 	bl	800d1aa <USBD_CtlContinueRx>
 800c286:	e030      	b.n	800c2ea <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c28e:	b2db      	uxtb	r3, r3
 800c290:	2b03      	cmp	r3, #3
 800c292:	d10b      	bne.n	800c2ac <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c29a:	691b      	ldr	r3, [r3, #16]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d005      	beq.n	800c2ac <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2a6:	691b      	ldr	r3, [r3, #16]
 800c2a8:	68f8      	ldr	r0, [r7, #12]
 800c2aa:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c2ac:	68f8      	ldr	r0, [r7, #12]
 800c2ae:	f000 ff8d 	bl	800d1cc <USBD_CtlSendStatus>
 800c2b2:	e01a      	b.n	800c2ea <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2ba:	b2db      	uxtb	r3, r3
 800c2bc:	2b03      	cmp	r3, #3
 800c2be:	d114      	bne.n	800c2ea <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2c6:	699b      	ldr	r3, [r3, #24]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d00e      	beq.n	800c2ea <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2d2:	699b      	ldr	r3, [r3, #24]
 800c2d4:	7afa      	ldrb	r2, [r7, #11]
 800c2d6:	4611      	mov	r1, r2
 800c2d8:	68f8      	ldr	r0, [r7, #12]
 800c2da:	4798      	blx	r3
 800c2dc:	4603      	mov	r3, r0
 800c2de:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c2e0:	7dfb      	ldrb	r3, [r7, #23]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d001      	beq.n	800c2ea <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800c2e6:	7dfb      	ldrb	r3, [r7, #23]
 800c2e8:	e000      	b.n	800c2ec <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800c2ea:	2300      	movs	r3, #0
}
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	3718      	adds	r7, #24
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	bd80      	pop	{r7, pc}

0800c2f4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b086      	sub	sp, #24
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	60f8      	str	r0, [r7, #12]
 800c2fc:	460b      	mov	r3, r1
 800c2fe:	607a      	str	r2, [r7, #4]
 800c300:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c302:	7afb      	ldrb	r3, [r7, #11]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d16b      	bne.n	800c3e0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	3314      	adds	r3, #20
 800c30c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c314:	2b02      	cmp	r3, #2
 800c316:	d156      	bne.n	800c3c6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c318:	693b      	ldr	r3, [r7, #16]
 800c31a:	689a      	ldr	r2, [r3, #8]
 800c31c:	693b      	ldr	r3, [r7, #16]
 800c31e:	68db      	ldr	r3, [r3, #12]
 800c320:	429a      	cmp	r2, r3
 800c322:	d914      	bls.n	800c34e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c324:	693b      	ldr	r3, [r7, #16]
 800c326:	689a      	ldr	r2, [r3, #8]
 800c328:	693b      	ldr	r3, [r7, #16]
 800c32a:	68db      	ldr	r3, [r3, #12]
 800c32c:	1ad2      	subs	r2, r2, r3
 800c32e:	693b      	ldr	r3, [r7, #16]
 800c330:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c332:	693b      	ldr	r3, [r7, #16]
 800c334:	689b      	ldr	r3, [r3, #8]
 800c336:	461a      	mov	r2, r3
 800c338:	6879      	ldr	r1, [r7, #4]
 800c33a:	68f8      	ldr	r0, [r7, #12]
 800c33c:	f000 ff24 	bl	800d188 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c340:	2300      	movs	r3, #0
 800c342:	2200      	movs	r2, #0
 800c344:	2100      	movs	r1, #0
 800c346:	68f8      	ldr	r0, [r7, #12]
 800c348:	f006 f844 	bl	80123d4 <USBD_LL_PrepareReceive>
 800c34c:	e03b      	b.n	800c3c6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c34e:	693b      	ldr	r3, [r7, #16]
 800c350:	68da      	ldr	r2, [r3, #12]
 800c352:	693b      	ldr	r3, [r7, #16]
 800c354:	689b      	ldr	r3, [r3, #8]
 800c356:	429a      	cmp	r2, r3
 800c358:	d11c      	bne.n	800c394 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c35a:	693b      	ldr	r3, [r7, #16]
 800c35c:	685a      	ldr	r2, [r3, #4]
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c362:	429a      	cmp	r2, r3
 800c364:	d316      	bcc.n	800c394 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c366:	693b      	ldr	r3, [r7, #16]
 800c368:	685a      	ldr	r2, [r3, #4]
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c370:	429a      	cmp	r2, r3
 800c372:	d20f      	bcs.n	800c394 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c374:	2200      	movs	r2, #0
 800c376:	2100      	movs	r1, #0
 800c378:	68f8      	ldr	r0, [r7, #12]
 800c37a:	f000 ff05 	bl	800d188 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	2200      	movs	r2, #0
 800c382:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c386:	2300      	movs	r3, #0
 800c388:	2200      	movs	r2, #0
 800c38a:	2100      	movs	r1, #0
 800c38c:	68f8      	ldr	r0, [r7, #12]
 800c38e:	f006 f821 	bl	80123d4 <USBD_LL_PrepareReceive>
 800c392:	e018      	b.n	800c3c6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c39a:	b2db      	uxtb	r3, r3
 800c39c:	2b03      	cmp	r3, #3
 800c39e:	d10b      	bne.n	800c3b8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3a6:	68db      	ldr	r3, [r3, #12]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d005      	beq.n	800c3b8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3b2:	68db      	ldr	r3, [r3, #12]
 800c3b4:	68f8      	ldr	r0, [r7, #12]
 800c3b6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c3b8:	2180      	movs	r1, #128	; 0x80
 800c3ba:	68f8      	ldr	r0, [r7, #12]
 800c3bc:	f005 ff60 	bl	8012280 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c3c0:	68f8      	ldr	r0, [r7, #12]
 800c3c2:	f000 ff16 	bl	800d1f2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c3cc:	2b01      	cmp	r3, #1
 800c3ce:	d122      	bne.n	800c416 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c3d0:	68f8      	ldr	r0, [r7, #12]
 800c3d2:	f7ff fe98 	bl	800c106 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	2200      	movs	r2, #0
 800c3da:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c3de:	e01a      	b.n	800c416 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3e6:	b2db      	uxtb	r3, r3
 800c3e8:	2b03      	cmp	r3, #3
 800c3ea:	d114      	bne.n	800c416 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3f2:	695b      	ldr	r3, [r3, #20]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d00e      	beq.n	800c416 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3fe:	695b      	ldr	r3, [r3, #20]
 800c400:	7afa      	ldrb	r2, [r7, #11]
 800c402:	4611      	mov	r1, r2
 800c404:	68f8      	ldr	r0, [r7, #12]
 800c406:	4798      	blx	r3
 800c408:	4603      	mov	r3, r0
 800c40a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c40c:	7dfb      	ldrb	r3, [r7, #23]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d001      	beq.n	800c416 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800c412:	7dfb      	ldrb	r3, [r7, #23]
 800c414:	e000      	b.n	800c418 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800c416:	2300      	movs	r3, #0
}
 800c418:	4618      	mov	r0, r3
 800c41a:	3718      	adds	r7, #24
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}

0800c420 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b082      	sub	sp, #8
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2201      	movs	r2, #1
 800c42c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2200      	movs	r2, #0
 800c434:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2200      	movs	r2, #0
 800c43c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2200      	movs	r2, #0
 800c442:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d101      	bne.n	800c454 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800c450:	2303      	movs	r3, #3
 800c452:	e02f      	b.n	800c4b4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d00f      	beq.n	800c47e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c464:	685b      	ldr	r3, [r3, #4]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d009      	beq.n	800c47e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c470:	685b      	ldr	r3, [r3, #4]
 800c472:	687a      	ldr	r2, [r7, #4]
 800c474:	6852      	ldr	r2, [r2, #4]
 800c476:	b2d2      	uxtb	r2, r2
 800c478:	4611      	mov	r1, r2
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c47e:	2340      	movs	r3, #64	; 0x40
 800c480:	2200      	movs	r2, #0
 800c482:	2100      	movs	r1, #0
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	f005 fed5 	bl	8012234 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2201      	movs	r2, #1
 800c48e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	2240      	movs	r2, #64	; 0x40
 800c496:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c49a:	2340      	movs	r3, #64	; 0x40
 800c49c:	2200      	movs	r2, #0
 800c49e:	2180      	movs	r1, #128	; 0x80
 800c4a0:	6878      	ldr	r0, [r7, #4]
 800c4a2:	f005 fec7 	bl	8012234 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	2201      	movs	r2, #1
 800c4aa:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2240      	movs	r2, #64	; 0x40
 800c4b0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c4b2:	2300      	movs	r3, #0
}
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	3708      	adds	r7, #8
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd80      	pop	{r7, pc}

0800c4bc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c4bc:	b480      	push	{r7}
 800c4be:	b083      	sub	sp, #12
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
 800c4c4:	460b      	mov	r3, r1
 800c4c6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	78fa      	ldrb	r2, [r7, #3]
 800c4cc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c4ce:	2300      	movs	r3, #0
}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	370c      	adds	r7, #12
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4da:	4770      	bx	lr

0800c4dc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b083      	sub	sp, #12
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4ea:	b2da      	uxtb	r2, r3
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2204      	movs	r2, #4
 800c4f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c4fa:	2300      	movs	r3, #0
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	370c      	adds	r7, #12
 800c500:	46bd      	mov	sp, r7
 800c502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c506:	4770      	bx	lr

0800c508 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c508:	b480      	push	{r7}
 800c50a:	b083      	sub	sp, #12
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c516:	b2db      	uxtb	r3, r3
 800c518:	2b04      	cmp	r3, #4
 800c51a:	d106      	bne.n	800c52a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c522:	b2da      	uxtb	r2, r3
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c52a:	2300      	movs	r3, #0
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	370c      	adds	r7, #12
 800c530:	46bd      	mov	sp, r7
 800c532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c536:	4770      	bx	lr

0800c538 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b082      	sub	sp, #8
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c546:	2b00      	cmp	r3, #0
 800c548:	d101      	bne.n	800c54e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800c54a:	2303      	movs	r3, #3
 800c54c:	e012      	b.n	800c574 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c554:	b2db      	uxtb	r3, r3
 800c556:	2b03      	cmp	r3, #3
 800c558:	d10b      	bne.n	800c572 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c560:	69db      	ldr	r3, [r3, #28]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d005      	beq.n	800c572 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c56c:	69db      	ldr	r3, [r3, #28]
 800c56e:	6878      	ldr	r0, [r7, #4]
 800c570:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c572:	2300      	movs	r3, #0
}
 800c574:	4618      	mov	r0, r3
 800c576:	3708      	adds	r7, #8
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}

0800c57c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b082      	sub	sp, #8
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
 800c584:	460b      	mov	r3, r1
 800c586:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d101      	bne.n	800c596 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800c592:	2303      	movs	r3, #3
 800c594:	e014      	b.n	800c5c0 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c59c:	b2db      	uxtb	r3, r3
 800c59e:	2b03      	cmp	r3, #3
 800c5a0:	d10d      	bne.n	800c5be <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5a8:	6a1b      	ldr	r3, [r3, #32]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d007      	beq.n	800c5be <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5b4:	6a1b      	ldr	r3, [r3, #32]
 800c5b6:	78fa      	ldrb	r2, [r7, #3]
 800c5b8:	4611      	mov	r1, r2
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c5be:	2300      	movs	r3, #0
}
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	3708      	adds	r7, #8
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}

0800c5c8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b082      	sub	sp, #8
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
 800c5d0:	460b      	mov	r3, r1
 800c5d2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d101      	bne.n	800c5e2 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800c5de:	2303      	movs	r3, #3
 800c5e0:	e014      	b.n	800c60c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5e8:	b2db      	uxtb	r3, r3
 800c5ea:	2b03      	cmp	r3, #3
 800c5ec:	d10d      	bne.n	800c60a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d007      	beq.n	800c60a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c602:	78fa      	ldrb	r2, [r7, #3]
 800c604:	4611      	mov	r1, r2
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c60a:	2300      	movs	r3, #0
}
 800c60c:	4618      	mov	r0, r3
 800c60e:	3708      	adds	r7, #8
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}

0800c614 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c614:	b480      	push	{r7}
 800c616:	b083      	sub	sp, #12
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c61c:	2300      	movs	r3, #0
}
 800c61e:	4618      	mov	r0, r3
 800c620:	370c      	adds	r7, #12
 800c622:	46bd      	mov	sp, r7
 800c624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c628:	4770      	bx	lr

0800c62a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c62a:	b580      	push	{r7, lr}
 800c62c:	b082      	sub	sp, #8
 800c62e:	af00      	add	r7, sp, #0
 800c630:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2201      	movs	r2, #1
 800c636:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c640:	2b00      	cmp	r3, #0
 800c642:	d009      	beq.n	800c658 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c64a:	685b      	ldr	r3, [r3, #4]
 800c64c:	687a      	ldr	r2, [r7, #4]
 800c64e:	6852      	ldr	r2, [r2, #4]
 800c650:	b2d2      	uxtb	r2, r2
 800c652:	4611      	mov	r1, r2
 800c654:	6878      	ldr	r0, [r7, #4]
 800c656:	4798      	blx	r3
  }

  return USBD_OK;
 800c658:	2300      	movs	r3, #0
}
 800c65a:	4618      	mov	r0, r3
 800c65c:	3708      	adds	r7, #8
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd80      	pop	{r7, pc}

0800c662 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c662:	b480      	push	{r7}
 800c664:	b087      	sub	sp, #28
 800c666:	af00      	add	r7, sp, #0
 800c668:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c66e:	697b      	ldr	r3, [r7, #20]
 800c670:	781b      	ldrb	r3, [r3, #0]
 800c672:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c674:	697b      	ldr	r3, [r7, #20]
 800c676:	3301      	adds	r3, #1
 800c678:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c67a:	697b      	ldr	r3, [r7, #20]
 800c67c:	781b      	ldrb	r3, [r3, #0]
 800c67e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c680:	8a3b      	ldrh	r3, [r7, #16]
 800c682:	021b      	lsls	r3, r3, #8
 800c684:	b21a      	sxth	r2, r3
 800c686:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c68a:	4313      	orrs	r3, r2
 800c68c:	b21b      	sxth	r3, r3
 800c68e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c690:	89fb      	ldrh	r3, [r7, #14]
}
 800c692:	4618      	mov	r0, r3
 800c694:	371c      	adds	r7, #28
 800c696:	46bd      	mov	sp, r7
 800c698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69c:	4770      	bx	lr
	...

0800c6a0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b084      	sub	sp, #16
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
 800c6a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	781b      	ldrb	r3, [r3, #0]
 800c6b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c6b6:	2b40      	cmp	r3, #64	; 0x40
 800c6b8:	d005      	beq.n	800c6c6 <USBD_StdDevReq+0x26>
 800c6ba:	2b40      	cmp	r3, #64	; 0x40
 800c6bc:	d853      	bhi.n	800c766 <USBD_StdDevReq+0xc6>
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d00b      	beq.n	800c6da <USBD_StdDevReq+0x3a>
 800c6c2:	2b20      	cmp	r3, #32
 800c6c4:	d14f      	bne.n	800c766 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6cc:	689b      	ldr	r3, [r3, #8]
 800c6ce:	6839      	ldr	r1, [r7, #0]
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	4798      	blx	r3
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	73fb      	strb	r3, [r7, #15]
      break;
 800c6d8:	e04a      	b.n	800c770 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	785b      	ldrb	r3, [r3, #1]
 800c6de:	2b09      	cmp	r3, #9
 800c6e0:	d83b      	bhi.n	800c75a <USBD_StdDevReq+0xba>
 800c6e2:	a201      	add	r2, pc, #4	; (adr r2, 800c6e8 <USBD_StdDevReq+0x48>)
 800c6e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6e8:	0800c73d 	.word	0x0800c73d
 800c6ec:	0800c751 	.word	0x0800c751
 800c6f0:	0800c75b 	.word	0x0800c75b
 800c6f4:	0800c747 	.word	0x0800c747
 800c6f8:	0800c75b 	.word	0x0800c75b
 800c6fc:	0800c71b 	.word	0x0800c71b
 800c700:	0800c711 	.word	0x0800c711
 800c704:	0800c75b 	.word	0x0800c75b
 800c708:	0800c733 	.word	0x0800c733
 800c70c:	0800c725 	.word	0x0800c725
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c710:	6839      	ldr	r1, [r7, #0]
 800c712:	6878      	ldr	r0, [r7, #4]
 800c714:	f000 f9de 	bl	800cad4 <USBD_GetDescriptor>
          break;
 800c718:	e024      	b.n	800c764 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c71a:	6839      	ldr	r1, [r7, #0]
 800c71c:	6878      	ldr	r0, [r7, #4]
 800c71e:	f000 fb43 	bl	800cda8 <USBD_SetAddress>
          break;
 800c722:	e01f      	b.n	800c764 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c724:	6839      	ldr	r1, [r7, #0]
 800c726:	6878      	ldr	r0, [r7, #4]
 800c728:	f000 fb82 	bl	800ce30 <USBD_SetConfig>
 800c72c:	4603      	mov	r3, r0
 800c72e:	73fb      	strb	r3, [r7, #15]
          break;
 800c730:	e018      	b.n	800c764 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c732:	6839      	ldr	r1, [r7, #0]
 800c734:	6878      	ldr	r0, [r7, #4]
 800c736:	f000 fc21 	bl	800cf7c <USBD_GetConfig>
          break;
 800c73a:	e013      	b.n	800c764 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c73c:	6839      	ldr	r1, [r7, #0]
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f000 fc52 	bl	800cfe8 <USBD_GetStatus>
          break;
 800c744:	e00e      	b.n	800c764 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c746:	6839      	ldr	r1, [r7, #0]
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	f000 fc81 	bl	800d050 <USBD_SetFeature>
          break;
 800c74e:	e009      	b.n	800c764 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c750:	6839      	ldr	r1, [r7, #0]
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f000 fc90 	bl	800d078 <USBD_ClrFeature>
          break;
 800c758:	e004      	b.n	800c764 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800c75a:	6839      	ldr	r1, [r7, #0]
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	f000 fce7 	bl	800d130 <USBD_CtlError>
          break;
 800c762:	bf00      	nop
      }
      break;
 800c764:	e004      	b.n	800c770 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800c766:	6839      	ldr	r1, [r7, #0]
 800c768:	6878      	ldr	r0, [r7, #4]
 800c76a:	f000 fce1 	bl	800d130 <USBD_CtlError>
      break;
 800c76e:	bf00      	nop
  }

  return ret;
 800c770:	7bfb      	ldrb	r3, [r7, #15]
}
 800c772:	4618      	mov	r0, r3
 800c774:	3710      	adds	r7, #16
 800c776:	46bd      	mov	sp, r7
 800c778:	bd80      	pop	{r7, pc}
 800c77a:	bf00      	nop

0800c77c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b084      	sub	sp, #16
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
 800c784:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c786:	2300      	movs	r3, #0
 800c788:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	781b      	ldrb	r3, [r3, #0]
 800c78e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c792:	2b40      	cmp	r3, #64	; 0x40
 800c794:	d005      	beq.n	800c7a2 <USBD_StdItfReq+0x26>
 800c796:	2b40      	cmp	r3, #64	; 0x40
 800c798:	d82f      	bhi.n	800c7fa <USBD_StdItfReq+0x7e>
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d001      	beq.n	800c7a2 <USBD_StdItfReq+0x26>
 800c79e:	2b20      	cmp	r3, #32
 800c7a0:	d12b      	bne.n	800c7fa <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7a8:	b2db      	uxtb	r3, r3
 800c7aa:	3b01      	subs	r3, #1
 800c7ac:	2b02      	cmp	r3, #2
 800c7ae:	d81d      	bhi.n	800c7ec <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	889b      	ldrh	r3, [r3, #4]
 800c7b4:	b2db      	uxtb	r3, r3
 800c7b6:	2b01      	cmp	r3, #1
 800c7b8:	d813      	bhi.n	800c7e2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7c0:	689b      	ldr	r3, [r3, #8]
 800c7c2:	6839      	ldr	r1, [r7, #0]
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	4798      	blx	r3
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	88db      	ldrh	r3, [r3, #6]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d110      	bne.n	800c7f6 <USBD_StdItfReq+0x7a>
 800c7d4:	7bfb      	ldrb	r3, [r7, #15]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d10d      	bne.n	800c7f6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f000 fcf6 	bl	800d1cc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c7e0:	e009      	b.n	800c7f6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800c7e2:	6839      	ldr	r1, [r7, #0]
 800c7e4:	6878      	ldr	r0, [r7, #4]
 800c7e6:	f000 fca3 	bl	800d130 <USBD_CtlError>
          break;
 800c7ea:	e004      	b.n	800c7f6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800c7ec:	6839      	ldr	r1, [r7, #0]
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f000 fc9e 	bl	800d130 <USBD_CtlError>
          break;
 800c7f4:	e000      	b.n	800c7f8 <USBD_StdItfReq+0x7c>
          break;
 800c7f6:	bf00      	nop
      }
      break;
 800c7f8:	e004      	b.n	800c804 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800c7fa:	6839      	ldr	r1, [r7, #0]
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f000 fc97 	bl	800d130 <USBD_CtlError>
      break;
 800c802:	bf00      	nop
  }

  return ret;
 800c804:	7bfb      	ldrb	r3, [r7, #15]
}
 800c806:	4618      	mov	r0, r3
 800c808:	3710      	adds	r7, #16
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}

0800c80e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c80e:	b580      	push	{r7, lr}
 800c810:	b084      	sub	sp, #16
 800c812:	af00      	add	r7, sp, #0
 800c814:	6078      	str	r0, [r7, #4]
 800c816:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c818:	2300      	movs	r3, #0
 800c81a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	889b      	ldrh	r3, [r3, #4]
 800c820:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	781b      	ldrb	r3, [r3, #0]
 800c826:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c82a:	2b40      	cmp	r3, #64	; 0x40
 800c82c:	d007      	beq.n	800c83e <USBD_StdEPReq+0x30>
 800c82e:	2b40      	cmp	r3, #64	; 0x40
 800c830:	f200 8145 	bhi.w	800cabe <USBD_StdEPReq+0x2b0>
 800c834:	2b00      	cmp	r3, #0
 800c836:	d00c      	beq.n	800c852 <USBD_StdEPReq+0x44>
 800c838:	2b20      	cmp	r3, #32
 800c83a:	f040 8140 	bne.w	800cabe <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c844:	689b      	ldr	r3, [r3, #8]
 800c846:	6839      	ldr	r1, [r7, #0]
 800c848:	6878      	ldr	r0, [r7, #4]
 800c84a:	4798      	blx	r3
 800c84c:	4603      	mov	r3, r0
 800c84e:	73fb      	strb	r3, [r7, #15]
      break;
 800c850:	e13a      	b.n	800cac8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	785b      	ldrb	r3, [r3, #1]
 800c856:	2b03      	cmp	r3, #3
 800c858:	d007      	beq.n	800c86a <USBD_StdEPReq+0x5c>
 800c85a:	2b03      	cmp	r3, #3
 800c85c:	f300 8129 	bgt.w	800cab2 <USBD_StdEPReq+0x2a4>
 800c860:	2b00      	cmp	r3, #0
 800c862:	d07f      	beq.n	800c964 <USBD_StdEPReq+0x156>
 800c864:	2b01      	cmp	r3, #1
 800c866:	d03c      	beq.n	800c8e2 <USBD_StdEPReq+0xd4>
 800c868:	e123      	b.n	800cab2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c870:	b2db      	uxtb	r3, r3
 800c872:	2b02      	cmp	r3, #2
 800c874:	d002      	beq.n	800c87c <USBD_StdEPReq+0x6e>
 800c876:	2b03      	cmp	r3, #3
 800c878:	d016      	beq.n	800c8a8 <USBD_StdEPReq+0x9a>
 800c87a:	e02c      	b.n	800c8d6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c87c:	7bbb      	ldrb	r3, [r7, #14]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d00d      	beq.n	800c89e <USBD_StdEPReq+0x90>
 800c882:	7bbb      	ldrb	r3, [r7, #14]
 800c884:	2b80      	cmp	r3, #128	; 0x80
 800c886:	d00a      	beq.n	800c89e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c888:	7bbb      	ldrb	r3, [r7, #14]
 800c88a:	4619      	mov	r1, r3
 800c88c:	6878      	ldr	r0, [r7, #4]
 800c88e:	f005 fcf7 	bl	8012280 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c892:	2180      	movs	r1, #128	; 0x80
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f005 fcf3 	bl	8012280 <USBD_LL_StallEP>
 800c89a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c89c:	e020      	b.n	800c8e0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800c89e:	6839      	ldr	r1, [r7, #0]
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f000 fc45 	bl	800d130 <USBD_CtlError>
              break;
 800c8a6:	e01b      	b.n	800c8e0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	885b      	ldrh	r3, [r3, #2]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d10e      	bne.n	800c8ce <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c8b0:	7bbb      	ldrb	r3, [r7, #14]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d00b      	beq.n	800c8ce <USBD_StdEPReq+0xc0>
 800c8b6:	7bbb      	ldrb	r3, [r7, #14]
 800c8b8:	2b80      	cmp	r3, #128	; 0x80
 800c8ba:	d008      	beq.n	800c8ce <USBD_StdEPReq+0xc0>
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	88db      	ldrh	r3, [r3, #6]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d104      	bne.n	800c8ce <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c8c4:	7bbb      	ldrb	r3, [r7, #14]
 800c8c6:	4619      	mov	r1, r3
 800c8c8:	6878      	ldr	r0, [r7, #4]
 800c8ca:	f005 fcd9 	bl	8012280 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c8ce:	6878      	ldr	r0, [r7, #4]
 800c8d0:	f000 fc7c 	bl	800d1cc <USBD_CtlSendStatus>

              break;
 800c8d4:	e004      	b.n	800c8e0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800c8d6:	6839      	ldr	r1, [r7, #0]
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f000 fc29 	bl	800d130 <USBD_CtlError>
              break;
 800c8de:	bf00      	nop
          }
          break;
 800c8e0:	e0ec      	b.n	800cabc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8e8:	b2db      	uxtb	r3, r3
 800c8ea:	2b02      	cmp	r3, #2
 800c8ec:	d002      	beq.n	800c8f4 <USBD_StdEPReq+0xe6>
 800c8ee:	2b03      	cmp	r3, #3
 800c8f0:	d016      	beq.n	800c920 <USBD_StdEPReq+0x112>
 800c8f2:	e030      	b.n	800c956 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c8f4:	7bbb      	ldrb	r3, [r7, #14]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d00d      	beq.n	800c916 <USBD_StdEPReq+0x108>
 800c8fa:	7bbb      	ldrb	r3, [r7, #14]
 800c8fc:	2b80      	cmp	r3, #128	; 0x80
 800c8fe:	d00a      	beq.n	800c916 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c900:	7bbb      	ldrb	r3, [r7, #14]
 800c902:	4619      	mov	r1, r3
 800c904:	6878      	ldr	r0, [r7, #4]
 800c906:	f005 fcbb 	bl	8012280 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c90a:	2180      	movs	r1, #128	; 0x80
 800c90c:	6878      	ldr	r0, [r7, #4]
 800c90e:	f005 fcb7 	bl	8012280 <USBD_LL_StallEP>
 800c912:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c914:	e025      	b.n	800c962 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800c916:	6839      	ldr	r1, [r7, #0]
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	f000 fc09 	bl	800d130 <USBD_CtlError>
              break;
 800c91e:	e020      	b.n	800c962 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	885b      	ldrh	r3, [r3, #2]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d11b      	bne.n	800c960 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c928:	7bbb      	ldrb	r3, [r7, #14]
 800c92a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d004      	beq.n	800c93c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c932:	7bbb      	ldrb	r3, [r7, #14]
 800c934:	4619      	mov	r1, r3
 800c936:	6878      	ldr	r0, [r7, #4]
 800c938:	f005 fcc1 	bl	80122be <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f000 fc45 	bl	800d1cc <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c948:	689b      	ldr	r3, [r3, #8]
 800c94a:	6839      	ldr	r1, [r7, #0]
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	4798      	blx	r3
 800c950:	4603      	mov	r3, r0
 800c952:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800c954:	e004      	b.n	800c960 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800c956:	6839      	ldr	r1, [r7, #0]
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	f000 fbe9 	bl	800d130 <USBD_CtlError>
              break;
 800c95e:	e000      	b.n	800c962 <USBD_StdEPReq+0x154>
              break;
 800c960:	bf00      	nop
          }
          break;
 800c962:	e0ab      	b.n	800cabc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c96a:	b2db      	uxtb	r3, r3
 800c96c:	2b02      	cmp	r3, #2
 800c96e:	d002      	beq.n	800c976 <USBD_StdEPReq+0x168>
 800c970:	2b03      	cmp	r3, #3
 800c972:	d032      	beq.n	800c9da <USBD_StdEPReq+0x1cc>
 800c974:	e097      	b.n	800caa6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c976:	7bbb      	ldrb	r3, [r7, #14]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d007      	beq.n	800c98c <USBD_StdEPReq+0x17e>
 800c97c:	7bbb      	ldrb	r3, [r7, #14]
 800c97e:	2b80      	cmp	r3, #128	; 0x80
 800c980:	d004      	beq.n	800c98c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800c982:	6839      	ldr	r1, [r7, #0]
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f000 fbd3 	bl	800d130 <USBD_CtlError>
                break;
 800c98a:	e091      	b.n	800cab0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c98c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c990:	2b00      	cmp	r3, #0
 800c992:	da0b      	bge.n	800c9ac <USBD_StdEPReq+0x19e>
 800c994:	7bbb      	ldrb	r3, [r7, #14]
 800c996:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c99a:	4613      	mov	r3, r2
 800c99c:	009b      	lsls	r3, r3, #2
 800c99e:	4413      	add	r3, r2
 800c9a0:	009b      	lsls	r3, r3, #2
 800c9a2:	3310      	adds	r3, #16
 800c9a4:	687a      	ldr	r2, [r7, #4]
 800c9a6:	4413      	add	r3, r2
 800c9a8:	3304      	adds	r3, #4
 800c9aa:	e00b      	b.n	800c9c4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c9ac:	7bbb      	ldrb	r3, [r7, #14]
 800c9ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c9b2:	4613      	mov	r3, r2
 800c9b4:	009b      	lsls	r3, r3, #2
 800c9b6:	4413      	add	r3, r2
 800c9b8:	009b      	lsls	r3, r3, #2
 800c9ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c9be:	687a      	ldr	r2, [r7, #4]
 800c9c0:	4413      	add	r3, r2
 800c9c2:	3304      	adds	r3, #4
 800c9c4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c9c6:	68bb      	ldr	r3, [r7, #8]
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c9cc:	68bb      	ldr	r3, [r7, #8]
 800c9ce:	2202      	movs	r2, #2
 800c9d0:	4619      	mov	r1, r3
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f000 fbbd 	bl	800d152 <USBD_CtlSendData>
              break;
 800c9d8:	e06a      	b.n	800cab0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c9da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	da11      	bge.n	800ca06 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c9e2:	7bbb      	ldrb	r3, [r7, #14]
 800c9e4:	f003 020f 	and.w	r2, r3, #15
 800c9e8:	6879      	ldr	r1, [r7, #4]
 800c9ea:	4613      	mov	r3, r2
 800c9ec:	009b      	lsls	r3, r3, #2
 800c9ee:	4413      	add	r3, r2
 800c9f0:	009b      	lsls	r3, r3, #2
 800c9f2:	440b      	add	r3, r1
 800c9f4:	3324      	adds	r3, #36	; 0x24
 800c9f6:	881b      	ldrh	r3, [r3, #0]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d117      	bne.n	800ca2c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c9fc:	6839      	ldr	r1, [r7, #0]
 800c9fe:	6878      	ldr	r0, [r7, #4]
 800ca00:	f000 fb96 	bl	800d130 <USBD_CtlError>
                  break;
 800ca04:	e054      	b.n	800cab0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ca06:	7bbb      	ldrb	r3, [r7, #14]
 800ca08:	f003 020f 	and.w	r2, r3, #15
 800ca0c:	6879      	ldr	r1, [r7, #4]
 800ca0e:	4613      	mov	r3, r2
 800ca10:	009b      	lsls	r3, r3, #2
 800ca12:	4413      	add	r3, r2
 800ca14:	009b      	lsls	r3, r3, #2
 800ca16:	440b      	add	r3, r1
 800ca18:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ca1c:	881b      	ldrh	r3, [r3, #0]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d104      	bne.n	800ca2c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ca22:	6839      	ldr	r1, [r7, #0]
 800ca24:	6878      	ldr	r0, [r7, #4]
 800ca26:	f000 fb83 	bl	800d130 <USBD_CtlError>
                  break;
 800ca2a:	e041      	b.n	800cab0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ca2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	da0b      	bge.n	800ca4c <USBD_StdEPReq+0x23e>
 800ca34:	7bbb      	ldrb	r3, [r7, #14]
 800ca36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ca3a:	4613      	mov	r3, r2
 800ca3c:	009b      	lsls	r3, r3, #2
 800ca3e:	4413      	add	r3, r2
 800ca40:	009b      	lsls	r3, r3, #2
 800ca42:	3310      	adds	r3, #16
 800ca44:	687a      	ldr	r2, [r7, #4]
 800ca46:	4413      	add	r3, r2
 800ca48:	3304      	adds	r3, #4
 800ca4a:	e00b      	b.n	800ca64 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ca4c:	7bbb      	ldrb	r3, [r7, #14]
 800ca4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ca52:	4613      	mov	r3, r2
 800ca54:	009b      	lsls	r3, r3, #2
 800ca56:	4413      	add	r3, r2
 800ca58:	009b      	lsls	r3, r3, #2
 800ca5a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ca5e:	687a      	ldr	r2, [r7, #4]
 800ca60:	4413      	add	r3, r2
 800ca62:	3304      	adds	r3, #4
 800ca64:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ca66:	7bbb      	ldrb	r3, [r7, #14]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d002      	beq.n	800ca72 <USBD_StdEPReq+0x264>
 800ca6c:	7bbb      	ldrb	r3, [r7, #14]
 800ca6e:	2b80      	cmp	r3, #128	; 0x80
 800ca70:	d103      	bne.n	800ca7a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800ca72:	68bb      	ldr	r3, [r7, #8]
 800ca74:	2200      	movs	r2, #0
 800ca76:	601a      	str	r2, [r3, #0]
 800ca78:	e00e      	b.n	800ca98 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ca7a:	7bbb      	ldrb	r3, [r7, #14]
 800ca7c:	4619      	mov	r1, r3
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f005 fc3c 	bl	80122fc <USBD_LL_IsStallEP>
 800ca84:	4603      	mov	r3, r0
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d003      	beq.n	800ca92 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800ca8a:	68bb      	ldr	r3, [r7, #8]
 800ca8c:	2201      	movs	r2, #1
 800ca8e:	601a      	str	r2, [r3, #0]
 800ca90:	e002      	b.n	800ca98 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800ca92:	68bb      	ldr	r3, [r7, #8]
 800ca94:	2200      	movs	r2, #0
 800ca96:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ca98:	68bb      	ldr	r3, [r7, #8]
 800ca9a:	2202      	movs	r2, #2
 800ca9c:	4619      	mov	r1, r3
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	f000 fb57 	bl	800d152 <USBD_CtlSendData>
              break;
 800caa4:	e004      	b.n	800cab0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800caa6:	6839      	ldr	r1, [r7, #0]
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	f000 fb41 	bl	800d130 <USBD_CtlError>
              break;
 800caae:	bf00      	nop
          }
          break;
 800cab0:	e004      	b.n	800cabc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800cab2:	6839      	ldr	r1, [r7, #0]
 800cab4:	6878      	ldr	r0, [r7, #4]
 800cab6:	f000 fb3b 	bl	800d130 <USBD_CtlError>
          break;
 800caba:	bf00      	nop
      }
      break;
 800cabc:	e004      	b.n	800cac8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800cabe:	6839      	ldr	r1, [r7, #0]
 800cac0:	6878      	ldr	r0, [r7, #4]
 800cac2:	f000 fb35 	bl	800d130 <USBD_CtlError>
      break;
 800cac6:	bf00      	nop
  }

  return ret;
 800cac8:	7bfb      	ldrb	r3, [r7, #15]
}
 800caca:	4618      	mov	r0, r3
 800cacc:	3710      	adds	r7, #16
 800cace:	46bd      	mov	sp, r7
 800cad0:	bd80      	pop	{r7, pc}
	...

0800cad4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b084      	sub	sp, #16
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
 800cadc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cade:	2300      	movs	r3, #0
 800cae0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cae2:	2300      	movs	r3, #0
 800cae4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cae6:	2300      	movs	r3, #0
 800cae8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	885b      	ldrh	r3, [r3, #2]
 800caee:	0a1b      	lsrs	r3, r3, #8
 800caf0:	b29b      	uxth	r3, r3
 800caf2:	3b01      	subs	r3, #1
 800caf4:	2b06      	cmp	r3, #6
 800caf6:	f200 8128 	bhi.w	800cd4a <USBD_GetDescriptor+0x276>
 800cafa:	a201      	add	r2, pc, #4	; (adr r2, 800cb00 <USBD_GetDescriptor+0x2c>)
 800cafc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb00:	0800cb1d 	.word	0x0800cb1d
 800cb04:	0800cb35 	.word	0x0800cb35
 800cb08:	0800cb75 	.word	0x0800cb75
 800cb0c:	0800cd4b 	.word	0x0800cd4b
 800cb10:	0800cd4b 	.word	0x0800cd4b
 800cb14:	0800cceb 	.word	0x0800cceb
 800cb18:	0800cd17 	.word	0x0800cd17
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	687a      	ldr	r2, [r7, #4]
 800cb26:	7c12      	ldrb	r2, [r2, #16]
 800cb28:	f107 0108 	add.w	r1, r7, #8
 800cb2c:	4610      	mov	r0, r2
 800cb2e:	4798      	blx	r3
 800cb30:	60f8      	str	r0, [r7, #12]
      break;
 800cb32:	e112      	b.n	800cd5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	7c1b      	ldrb	r3, [r3, #16]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d10d      	bne.n	800cb58 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb44:	f107 0208 	add.w	r2, r7, #8
 800cb48:	4610      	mov	r0, r2
 800cb4a:	4798      	blx	r3
 800cb4c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	3301      	adds	r3, #1
 800cb52:	2202      	movs	r2, #2
 800cb54:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cb56:	e100      	b.n	800cd5a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb60:	f107 0208 	add.w	r2, r7, #8
 800cb64:	4610      	mov	r0, r2
 800cb66:	4798      	blx	r3
 800cb68:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	3301      	adds	r3, #1
 800cb6e:	2202      	movs	r2, #2
 800cb70:	701a      	strb	r2, [r3, #0]
      break;
 800cb72:	e0f2      	b.n	800cd5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	885b      	ldrh	r3, [r3, #2]
 800cb78:	b2db      	uxtb	r3, r3
 800cb7a:	2b05      	cmp	r3, #5
 800cb7c:	f200 80ac 	bhi.w	800ccd8 <USBD_GetDescriptor+0x204>
 800cb80:	a201      	add	r2, pc, #4	; (adr r2, 800cb88 <USBD_GetDescriptor+0xb4>)
 800cb82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb86:	bf00      	nop
 800cb88:	0800cba1 	.word	0x0800cba1
 800cb8c:	0800cbd5 	.word	0x0800cbd5
 800cb90:	0800cc09 	.word	0x0800cc09
 800cb94:	0800cc3d 	.word	0x0800cc3d
 800cb98:	0800cc71 	.word	0x0800cc71
 800cb9c:	0800cca5 	.word	0x0800cca5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cba6:	685b      	ldr	r3, [r3, #4]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d00b      	beq.n	800cbc4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cbb2:	685b      	ldr	r3, [r3, #4]
 800cbb4:	687a      	ldr	r2, [r7, #4]
 800cbb6:	7c12      	ldrb	r2, [r2, #16]
 800cbb8:	f107 0108 	add.w	r1, r7, #8
 800cbbc:	4610      	mov	r0, r2
 800cbbe:	4798      	blx	r3
 800cbc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cbc2:	e091      	b.n	800cce8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cbc4:	6839      	ldr	r1, [r7, #0]
 800cbc6:	6878      	ldr	r0, [r7, #4]
 800cbc8:	f000 fab2 	bl	800d130 <USBD_CtlError>
            err++;
 800cbcc:	7afb      	ldrb	r3, [r7, #11]
 800cbce:	3301      	adds	r3, #1
 800cbd0:	72fb      	strb	r3, [r7, #11]
          break;
 800cbd2:	e089      	b.n	800cce8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cbda:	689b      	ldr	r3, [r3, #8]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d00b      	beq.n	800cbf8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cbe6:	689b      	ldr	r3, [r3, #8]
 800cbe8:	687a      	ldr	r2, [r7, #4]
 800cbea:	7c12      	ldrb	r2, [r2, #16]
 800cbec:	f107 0108 	add.w	r1, r7, #8
 800cbf0:	4610      	mov	r0, r2
 800cbf2:	4798      	blx	r3
 800cbf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cbf6:	e077      	b.n	800cce8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cbf8:	6839      	ldr	r1, [r7, #0]
 800cbfa:	6878      	ldr	r0, [r7, #4]
 800cbfc:	f000 fa98 	bl	800d130 <USBD_CtlError>
            err++;
 800cc00:	7afb      	ldrb	r3, [r7, #11]
 800cc02:	3301      	adds	r3, #1
 800cc04:	72fb      	strb	r3, [r7, #11]
          break;
 800cc06:	e06f      	b.n	800cce8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc0e:	68db      	ldr	r3, [r3, #12]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d00b      	beq.n	800cc2c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc1a:	68db      	ldr	r3, [r3, #12]
 800cc1c:	687a      	ldr	r2, [r7, #4]
 800cc1e:	7c12      	ldrb	r2, [r2, #16]
 800cc20:	f107 0108 	add.w	r1, r7, #8
 800cc24:	4610      	mov	r0, r2
 800cc26:	4798      	blx	r3
 800cc28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cc2a:	e05d      	b.n	800cce8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cc2c:	6839      	ldr	r1, [r7, #0]
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	f000 fa7e 	bl	800d130 <USBD_CtlError>
            err++;
 800cc34:	7afb      	ldrb	r3, [r7, #11]
 800cc36:	3301      	adds	r3, #1
 800cc38:	72fb      	strb	r3, [r7, #11]
          break;
 800cc3a:	e055      	b.n	800cce8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc42:	691b      	ldr	r3, [r3, #16]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d00b      	beq.n	800cc60 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc4e:	691b      	ldr	r3, [r3, #16]
 800cc50:	687a      	ldr	r2, [r7, #4]
 800cc52:	7c12      	ldrb	r2, [r2, #16]
 800cc54:	f107 0108 	add.w	r1, r7, #8
 800cc58:	4610      	mov	r0, r2
 800cc5a:	4798      	blx	r3
 800cc5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cc5e:	e043      	b.n	800cce8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cc60:	6839      	ldr	r1, [r7, #0]
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	f000 fa64 	bl	800d130 <USBD_CtlError>
            err++;
 800cc68:	7afb      	ldrb	r3, [r7, #11]
 800cc6a:	3301      	adds	r3, #1
 800cc6c:	72fb      	strb	r3, [r7, #11]
          break;
 800cc6e:	e03b      	b.n	800cce8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc76:	695b      	ldr	r3, [r3, #20]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d00b      	beq.n	800cc94 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc82:	695b      	ldr	r3, [r3, #20]
 800cc84:	687a      	ldr	r2, [r7, #4]
 800cc86:	7c12      	ldrb	r2, [r2, #16]
 800cc88:	f107 0108 	add.w	r1, r7, #8
 800cc8c:	4610      	mov	r0, r2
 800cc8e:	4798      	blx	r3
 800cc90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cc92:	e029      	b.n	800cce8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cc94:	6839      	ldr	r1, [r7, #0]
 800cc96:	6878      	ldr	r0, [r7, #4]
 800cc98:	f000 fa4a 	bl	800d130 <USBD_CtlError>
            err++;
 800cc9c:	7afb      	ldrb	r3, [r7, #11]
 800cc9e:	3301      	adds	r3, #1
 800cca0:	72fb      	strb	r3, [r7, #11]
          break;
 800cca2:	e021      	b.n	800cce8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccaa:	699b      	ldr	r3, [r3, #24]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d00b      	beq.n	800ccc8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccb6:	699b      	ldr	r3, [r3, #24]
 800ccb8:	687a      	ldr	r2, [r7, #4]
 800ccba:	7c12      	ldrb	r2, [r2, #16]
 800ccbc:	f107 0108 	add.w	r1, r7, #8
 800ccc0:	4610      	mov	r0, r2
 800ccc2:	4798      	blx	r3
 800ccc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ccc6:	e00f      	b.n	800cce8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ccc8:	6839      	ldr	r1, [r7, #0]
 800ccca:	6878      	ldr	r0, [r7, #4]
 800cccc:	f000 fa30 	bl	800d130 <USBD_CtlError>
            err++;
 800ccd0:	7afb      	ldrb	r3, [r7, #11]
 800ccd2:	3301      	adds	r3, #1
 800ccd4:	72fb      	strb	r3, [r7, #11]
          break;
 800ccd6:	e007      	b.n	800cce8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ccd8:	6839      	ldr	r1, [r7, #0]
 800ccda:	6878      	ldr	r0, [r7, #4]
 800ccdc:	f000 fa28 	bl	800d130 <USBD_CtlError>
          err++;
 800cce0:	7afb      	ldrb	r3, [r7, #11]
 800cce2:	3301      	adds	r3, #1
 800cce4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800cce6:	bf00      	nop
      }
      break;
 800cce8:	e037      	b.n	800cd5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	7c1b      	ldrb	r3, [r3, #16]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d109      	bne.n	800cd06 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ccf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccfa:	f107 0208 	add.w	r2, r7, #8
 800ccfe:	4610      	mov	r0, r2
 800cd00:	4798      	blx	r3
 800cd02:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cd04:	e029      	b.n	800cd5a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cd06:	6839      	ldr	r1, [r7, #0]
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	f000 fa11 	bl	800d130 <USBD_CtlError>
        err++;
 800cd0e:	7afb      	ldrb	r3, [r7, #11]
 800cd10:	3301      	adds	r3, #1
 800cd12:	72fb      	strb	r3, [r7, #11]
      break;
 800cd14:	e021      	b.n	800cd5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	7c1b      	ldrb	r3, [r3, #16]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d10d      	bne.n	800cd3a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd26:	f107 0208 	add.w	r2, r7, #8
 800cd2a:	4610      	mov	r0, r2
 800cd2c:	4798      	blx	r3
 800cd2e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	3301      	adds	r3, #1
 800cd34:	2207      	movs	r2, #7
 800cd36:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cd38:	e00f      	b.n	800cd5a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cd3a:	6839      	ldr	r1, [r7, #0]
 800cd3c:	6878      	ldr	r0, [r7, #4]
 800cd3e:	f000 f9f7 	bl	800d130 <USBD_CtlError>
        err++;
 800cd42:	7afb      	ldrb	r3, [r7, #11]
 800cd44:	3301      	adds	r3, #1
 800cd46:	72fb      	strb	r3, [r7, #11]
      break;
 800cd48:	e007      	b.n	800cd5a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800cd4a:	6839      	ldr	r1, [r7, #0]
 800cd4c:	6878      	ldr	r0, [r7, #4]
 800cd4e:	f000 f9ef 	bl	800d130 <USBD_CtlError>
      err++;
 800cd52:	7afb      	ldrb	r3, [r7, #11]
 800cd54:	3301      	adds	r3, #1
 800cd56:	72fb      	strb	r3, [r7, #11]
      break;
 800cd58:	bf00      	nop
  }

  if (err != 0U)
 800cd5a:	7afb      	ldrb	r3, [r7, #11]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d11e      	bne.n	800cd9e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	88db      	ldrh	r3, [r3, #6]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d016      	beq.n	800cd96 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800cd68:	893b      	ldrh	r3, [r7, #8]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d00e      	beq.n	800cd8c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	88da      	ldrh	r2, [r3, #6]
 800cd72:	893b      	ldrh	r3, [r7, #8]
 800cd74:	4293      	cmp	r3, r2
 800cd76:	bf28      	it	cs
 800cd78:	4613      	movcs	r3, r2
 800cd7a:	b29b      	uxth	r3, r3
 800cd7c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cd7e:	893b      	ldrh	r3, [r7, #8]
 800cd80:	461a      	mov	r2, r3
 800cd82:	68f9      	ldr	r1, [r7, #12]
 800cd84:	6878      	ldr	r0, [r7, #4]
 800cd86:	f000 f9e4 	bl	800d152 <USBD_CtlSendData>
 800cd8a:	e009      	b.n	800cda0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800cd8c:	6839      	ldr	r1, [r7, #0]
 800cd8e:	6878      	ldr	r0, [r7, #4]
 800cd90:	f000 f9ce 	bl	800d130 <USBD_CtlError>
 800cd94:	e004      	b.n	800cda0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	f000 fa18 	bl	800d1cc <USBD_CtlSendStatus>
 800cd9c:	e000      	b.n	800cda0 <USBD_GetDescriptor+0x2cc>
    return;
 800cd9e:	bf00      	nop
  }
}
 800cda0:	3710      	adds	r7, #16
 800cda2:	46bd      	mov	sp, r7
 800cda4:	bd80      	pop	{r7, pc}
 800cda6:	bf00      	nop

0800cda8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b084      	sub	sp, #16
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
 800cdb0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	889b      	ldrh	r3, [r3, #4]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d131      	bne.n	800ce1e <USBD_SetAddress+0x76>
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	88db      	ldrh	r3, [r3, #6]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d12d      	bne.n	800ce1e <USBD_SetAddress+0x76>
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	885b      	ldrh	r3, [r3, #2]
 800cdc6:	2b7f      	cmp	r3, #127	; 0x7f
 800cdc8:	d829      	bhi.n	800ce1e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	885b      	ldrh	r3, [r3, #2]
 800cdce:	b2db      	uxtb	r3, r3
 800cdd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cdd4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cddc:	b2db      	uxtb	r3, r3
 800cdde:	2b03      	cmp	r3, #3
 800cde0:	d104      	bne.n	800cdec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800cde2:	6839      	ldr	r1, [r7, #0]
 800cde4:	6878      	ldr	r0, [r7, #4]
 800cde6:	f000 f9a3 	bl	800d130 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cdea:	e01d      	b.n	800ce28 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	7bfa      	ldrb	r2, [r7, #15]
 800cdf0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cdf4:	7bfb      	ldrb	r3, [r7, #15]
 800cdf6:	4619      	mov	r1, r3
 800cdf8:	6878      	ldr	r0, [r7, #4]
 800cdfa:	f005 faab 	bl	8012354 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cdfe:	6878      	ldr	r0, [r7, #4]
 800ce00:	f000 f9e4 	bl	800d1cc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ce04:	7bfb      	ldrb	r3, [r7, #15]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d004      	beq.n	800ce14 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	2202      	movs	r2, #2
 800ce0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce12:	e009      	b.n	800ce28 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2201      	movs	r2, #1
 800ce18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce1c:	e004      	b.n	800ce28 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ce1e:	6839      	ldr	r1, [r7, #0]
 800ce20:	6878      	ldr	r0, [r7, #4]
 800ce22:	f000 f985 	bl	800d130 <USBD_CtlError>
  }
}
 800ce26:	bf00      	nop
 800ce28:	bf00      	nop
 800ce2a:	3710      	adds	r7, #16
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}

0800ce30 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b084      	sub	sp, #16
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
 800ce38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ce3e:	683b      	ldr	r3, [r7, #0]
 800ce40:	885b      	ldrh	r3, [r3, #2]
 800ce42:	b2da      	uxtb	r2, r3
 800ce44:	4b4c      	ldr	r3, [pc, #304]	; (800cf78 <USBD_SetConfig+0x148>)
 800ce46:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ce48:	4b4b      	ldr	r3, [pc, #300]	; (800cf78 <USBD_SetConfig+0x148>)
 800ce4a:	781b      	ldrb	r3, [r3, #0]
 800ce4c:	2b01      	cmp	r3, #1
 800ce4e:	d905      	bls.n	800ce5c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ce50:	6839      	ldr	r1, [r7, #0]
 800ce52:	6878      	ldr	r0, [r7, #4]
 800ce54:	f000 f96c 	bl	800d130 <USBD_CtlError>
    return USBD_FAIL;
 800ce58:	2303      	movs	r3, #3
 800ce5a:	e088      	b.n	800cf6e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce62:	b2db      	uxtb	r3, r3
 800ce64:	2b02      	cmp	r3, #2
 800ce66:	d002      	beq.n	800ce6e <USBD_SetConfig+0x3e>
 800ce68:	2b03      	cmp	r3, #3
 800ce6a:	d025      	beq.n	800ceb8 <USBD_SetConfig+0x88>
 800ce6c:	e071      	b.n	800cf52 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ce6e:	4b42      	ldr	r3, [pc, #264]	; (800cf78 <USBD_SetConfig+0x148>)
 800ce70:	781b      	ldrb	r3, [r3, #0]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d01c      	beq.n	800ceb0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800ce76:	4b40      	ldr	r3, [pc, #256]	; (800cf78 <USBD_SetConfig+0x148>)
 800ce78:	781b      	ldrb	r3, [r3, #0]
 800ce7a:	461a      	mov	r2, r3
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ce80:	4b3d      	ldr	r3, [pc, #244]	; (800cf78 <USBD_SetConfig+0x148>)
 800ce82:	781b      	ldrb	r3, [r3, #0]
 800ce84:	4619      	mov	r1, r3
 800ce86:	6878      	ldr	r0, [r7, #4]
 800ce88:	f7ff f948 	bl	800c11c <USBD_SetClassConfig>
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ce90:	7bfb      	ldrb	r3, [r7, #15]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d004      	beq.n	800cea0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800ce96:	6839      	ldr	r1, [r7, #0]
 800ce98:	6878      	ldr	r0, [r7, #4]
 800ce9a:	f000 f949 	bl	800d130 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ce9e:	e065      	b.n	800cf6c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800cea0:	6878      	ldr	r0, [r7, #4]
 800cea2:	f000 f993 	bl	800d1cc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	2203      	movs	r2, #3
 800ceaa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ceae:	e05d      	b.n	800cf6c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ceb0:	6878      	ldr	r0, [r7, #4]
 800ceb2:	f000 f98b 	bl	800d1cc <USBD_CtlSendStatus>
      break;
 800ceb6:	e059      	b.n	800cf6c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ceb8:	4b2f      	ldr	r3, [pc, #188]	; (800cf78 <USBD_SetConfig+0x148>)
 800ceba:	781b      	ldrb	r3, [r3, #0]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d112      	bne.n	800cee6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2202      	movs	r2, #2
 800cec4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800cec8:	4b2b      	ldr	r3, [pc, #172]	; (800cf78 <USBD_SetConfig+0x148>)
 800ceca:	781b      	ldrb	r3, [r3, #0]
 800cecc:	461a      	mov	r2, r3
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ced2:	4b29      	ldr	r3, [pc, #164]	; (800cf78 <USBD_SetConfig+0x148>)
 800ced4:	781b      	ldrb	r3, [r3, #0]
 800ced6:	4619      	mov	r1, r3
 800ced8:	6878      	ldr	r0, [r7, #4]
 800ceda:	f7ff f93b 	bl	800c154 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cede:	6878      	ldr	r0, [r7, #4]
 800cee0:	f000 f974 	bl	800d1cc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cee4:	e042      	b.n	800cf6c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800cee6:	4b24      	ldr	r3, [pc, #144]	; (800cf78 <USBD_SetConfig+0x148>)
 800cee8:	781b      	ldrb	r3, [r3, #0]
 800ceea:	461a      	mov	r2, r3
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	685b      	ldr	r3, [r3, #4]
 800cef0:	429a      	cmp	r2, r3
 800cef2:	d02a      	beq.n	800cf4a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	685b      	ldr	r3, [r3, #4]
 800cef8:	b2db      	uxtb	r3, r3
 800cefa:	4619      	mov	r1, r3
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f7ff f929 	bl	800c154 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cf02:	4b1d      	ldr	r3, [pc, #116]	; (800cf78 <USBD_SetConfig+0x148>)
 800cf04:	781b      	ldrb	r3, [r3, #0]
 800cf06:	461a      	mov	r2, r3
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cf0c:	4b1a      	ldr	r3, [pc, #104]	; (800cf78 <USBD_SetConfig+0x148>)
 800cf0e:	781b      	ldrb	r3, [r3, #0]
 800cf10:	4619      	mov	r1, r3
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	f7ff f902 	bl	800c11c <USBD_SetClassConfig>
 800cf18:	4603      	mov	r3, r0
 800cf1a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cf1c:	7bfb      	ldrb	r3, [r7, #15]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d00f      	beq.n	800cf42 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800cf22:	6839      	ldr	r1, [r7, #0]
 800cf24:	6878      	ldr	r0, [r7, #4]
 800cf26:	f000 f903 	bl	800d130 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	685b      	ldr	r3, [r3, #4]
 800cf2e:	b2db      	uxtb	r3, r3
 800cf30:	4619      	mov	r1, r3
 800cf32:	6878      	ldr	r0, [r7, #4]
 800cf34:	f7ff f90e 	bl	800c154 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2202      	movs	r2, #2
 800cf3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cf40:	e014      	b.n	800cf6c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	f000 f942 	bl	800d1cc <USBD_CtlSendStatus>
      break;
 800cf48:	e010      	b.n	800cf6c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800cf4a:	6878      	ldr	r0, [r7, #4]
 800cf4c:	f000 f93e 	bl	800d1cc <USBD_CtlSendStatus>
      break;
 800cf50:	e00c      	b.n	800cf6c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800cf52:	6839      	ldr	r1, [r7, #0]
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	f000 f8eb 	bl	800d130 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cf5a:	4b07      	ldr	r3, [pc, #28]	; (800cf78 <USBD_SetConfig+0x148>)
 800cf5c:	781b      	ldrb	r3, [r3, #0]
 800cf5e:	4619      	mov	r1, r3
 800cf60:	6878      	ldr	r0, [r7, #4]
 800cf62:	f7ff f8f7 	bl	800c154 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800cf66:	2303      	movs	r3, #3
 800cf68:	73fb      	strb	r3, [r7, #15]
      break;
 800cf6a:	bf00      	nop
  }

  return ret;
 800cf6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf6e:	4618      	mov	r0, r3
 800cf70:	3710      	adds	r7, #16
 800cf72:	46bd      	mov	sp, r7
 800cf74:	bd80      	pop	{r7, pc}
 800cf76:	bf00      	nop
 800cf78:	20000454 	.word	0x20000454

0800cf7c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b082      	sub	sp, #8
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
 800cf84:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	88db      	ldrh	r3, [r3, #6]
 800cf8a:	2b01      	cmp	r3, #1
 800cf8c:	d004      	beq.n	800cf98 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cf8e:	6839      	ldr	r1, [r7, #0]
 800cf90:	6878      	ldr	r0, [r7, #4]
 800cf92:	f000 f8cd 	bl	800d130 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cf96:	e023      	b.n	800cfe0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf9e:	b2db      	uxtb	r3, r3
 800cfa0:	2b02      	cmp	r3, #2
 800cfa2:	dc02      	bgt.n	800cfaa <USBD_GetConfig+0x2e>
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	dc03      	bgt.n	800cfb0 <USBD_GetConfig+0x34>
 800cfa8:	e015      	b.n	800cfd6 <USBD_GetConfig+0x5a>
 800cfaa:	2b03      	cmp	r3, #3
 800cfac:	d00b      	beq.n	800cfc6 <USBD_GetConfig+0x4a>
 800cfae:	e012      	b.n	800cfd6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	3308      	adds	r3, #8
 800cfba:	2201      	movs	r2, #1
 800cfbc:	4619      	mov	r1, r3
 800cfbe:	6878      	ldr	r0, [r7, #4]
 800cfc0:	f000 f8c7 	bl	800d152 <USBD_CtlSendData>
        break;
 800cfc4:	e00c      	b.n	800cfe0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	3304      	adds	r3, #4
 800cfca:	2201      	movs	r2, #1
 800cfcc:	4619      	mov	r1, r3
 800cfce:	6878      	ldr	r0, [r7, #4]
 800cfd0:	f000 f8bf 	bl	800d152 <USBD_CtlSendData>
        break;
 800cfd4:	e004      	b.n	800cfe0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800cfd6:	6839      	ldr	r1, [r7, #0]
 800cfd8:	6878      	ldr	r0, [r7, #4]
 800cfda:	f000 f8a9 	bl	800d130 <USBD_CtlError>
        break;
 800cfde:	bf00      	nop
}
 800cfe0:	bf00      	nop
 800cfe2:	3708      	adds	r7, #8
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	bd80      	pop	{r7, pc}

0800cfe8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b082      	sub	sp, #8
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
 800cff0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cff8:	b2db      	uxtb	r3, r3
 800cffa:	3b01      	subs	r3, #1
 800cffc:	2b02      	cmp	r3, #2
 800cffe:	d81e      	bhi.n	800d03e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	88db      	ldrh	r3, [r3, #6]
 800d004:	2b02      	cmp	r3, #2
 800d006:	d004      	beq.n	800d012 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d008:	6839      	ldr	r1, [r7, #0]
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	f000 f890 	bl	800d130 <USBD_CtlError>
        break;
 800d010:	e01a      	b.n	800d048 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	2201      	movs	r2, #1
 800d016:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d005      	beq.n	800d02e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	68db      	ldr	r3, [r3, #12]
 800d026:	f043 0202 	orr.w	r2, r3, #2
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	330c      	adds	r3, #12
 800d032:	2202      	movs	r2, #2
 800d034:	4619      	mov	r1, r3
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	f000 f88b 	bl	800d152 <USBD_CtlSendData>
      break;
 800d03c:	e004      	b.n	800d048 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d03e:	6839      	ldr	r1, [r7, #0]
 800d040:	6878      	ldr	r0, [r7, #4]
 800d042:	f000 f875 	bl	800d130 <USBD_CtlError>
      break;
 800d046:	bf00      	nop
  }
}
 800d048:	bf00      	nop
 800d04a:	3708      	adds	r7, #8
 800d04c:	46bd      	mov	sp, r7
 800d04e:	bd80      	pop	{r7, pc}

0800d050 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b082      	sub	sp, #8
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
 800d058:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d05a:	683b      	ldr	r3, [r7, #0]
 800d05c:	885b      	ldrh	r3, [r3, #2]
 800d05e:	2b01      	cmp	r3, #1
 800d060:	d106      	bne.n	800d070 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	2201      	movs	r2, #1
 800d066:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d06a:	6878      	ldr	r0, [r7, #4]
 800d06c:	f000 f8ae 	bl	800d1cc <USBD_CtlSendStatus>
  }
}
 800d070:	bf00      	nop
 800d072:	3708      	adds	r7, #8
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}

0800d078 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b082      	sub	sp, #8
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
 800d080:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d088:	b2db      	uxtb	r3, r3
 800d08a:	3b01      	subs	r3, #1
 800d08c:	2b02      	cmp	r3, #2
 800d08e:	d80b      	bhi.n	800d0a8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d090:	683b      	ldr	r3, [r7, #0]
 800d092:	885b      	ldrh	r3, [r3, #2]
 800d094:	2b01      	cmp	r3, #1
 800d096:	d10c      	bne.n	800d0b2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2200      	movs	r2, #0
 800d09c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d0a0:	6878      	ldr	r0, [r7, #4]
 800d0a2:	f000 f893 	bl	800d1cc <USBD_CtlSendStatus>
      }
      break;
 800d0a6:	e004      	b.n	800d0b2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d0a8:	6839      	ldr	r1, [r7, #0]
 800d0aa:	6878      	ldr	r0, [r7, #4]
 800d0ac:	f000 f840 	bl	800d130 <USBD_CtlError>
      break;
 800d0b0:	e000      	b.n	800d0b4 <USBD_ClrFeature+0x3c>
      break;
 800d0b2:	bf00      	nop
  }
}
 800d0b4:	bf00      	nop
 800d0b6:	3708      	adds	r7, #8
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	bd80      	pop	{r7, pc}

0800d0bc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b084      	sub	sp, #16
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
 800d0c4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d0c6:	683b      	ldr	r3, [r7, #0]
 800d0c8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	781a      	ldrb	r2, [r3, #0]
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	3301      	adds	r3, #1
 800d0d6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	781a      	ldrb	r2, [r3, #0]
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	3301      	adds	r3, #1
 800d0e4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d0e6:	68f8      	ldr	r0, [r7, #12]
 800d0e8:	f7ff fabb 	bl	800c662 <SWAPBYTE>
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	461a      	mov	r2, r3
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	3301      	adds	r3, #1
 800d0f8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	3301      	adds	r3, #1
 800d0fe:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d100:	68f8      	ldr	r0, [r7, #12]
 800d102:	f7ff faae 	bl	800c662 <SWAPBYTE>
 800d106:	4603      	mov	r3, r0
 800d108:	461a      	mov	r2, r3
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	3301      	adds	r3, #1
 800d112:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	3301      	adds	r3, #1
 800d118:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d11a:	68f8      	ldr	r0, [r7, #12]
 800d11c:	f7ff faa1 	bl	800c662 <SWAPBYTE>
 800d120:	4603      	mov	r3, r0
 800d122:	461a      	mov	r2, r3
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	80da      	strh	r2, [r3, #6]
}
 800d128:	bf00      	nop
 800d12a:	3710      	adds	r7, #16
 800d12c:	46bd      	mov	sp, r7
 800d12e:	bd80      	pop	{r7, pc}

0800d130 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b082      	sub	sp, #8
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
 800d138:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d13a:	2180      	movs	r1, #128	; 0x80
 800d13c:	6878      	ldr	r0, [r7, #4]
 800d13e:	f005 f89f 	bl	8012280 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d142:	2100      	movs	r1, #0
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f005 f89b 	bl	8012280 <USBD_LL_StallEP>
}
 800d14a:	bf00      	nop
 800d14c:	3708      	adds	r7, #8
 800d14e:	46bd      	mov	sp, r7
 800d150:	bd80      	pop	{r7, pc}

0800d152 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d152:	b580      	push	{r7, lr}
 800d154:	b084      	sub	sp, #16
 800d156:	af00      	add	r7, sp, #0
 800d158:	60f8      	str	r0, [r7, #12]
 800d15a:	60b9      	str	r1, [r7, #8]
 800d15c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	2202      	movs	r2, #2
 800d162:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	687a      	ldr	r2, [r7, #4]
 800d16a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	687a      	ldr	r2, [r7, #4]
 800d170:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	68ba      	ldr	r2, [r7, #8]
 800d176:	2100      	movs	r1, #0
 800d178:	68f8      	ldr	r0, [r7, #12]
 800d17a:	f005 f90a 	bl	8012392 <USBD_LL_Transmit>

  return USBD_OK;
 800d17e:	2300      	movs	r3, #0
}
 800d180:	4618      	mov	r0, r3
 800d182:	3710      	adds	r7, #16
 800d184:	46bd      	mov	sp, r7
 800d186:	bd80      	pop	{r7, pc}

0800d188 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b084      	sub	sp, #16
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	60f8      	str	r0, [r7, #12]
 800d190:	60b9      	str	r1, [r7, #8]
 800d192:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	68ba      	ldr	r2, [r7, #8]
 800d198:	2100      	movs	r1, #0
 800d19a:	68f8      	ldr	r0, [r7, #12]
 800d19c:	f005 f8f9 	bl	8012392 <USBD_LL_Transmit>

  return USBD_OK;
 800d1a0:	2300      	movs	r3, #0
}
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	3710      	adds	r7, #16
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bd80      	pop	{r7, pc}

0800d1aa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d1aa:	b580      	push	{r7, lr}
 800d1ac:	b084      	sub	sp, #16
 800d1ae:	af00      	add	r7, sp, #0
 800d1b0:	60f8      	str	r0, [r7, #12]
 800d1b2:	60b9      	str	r1, [r7, #8]
 800d1b4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	68ba      	ldr	r2, [r7, #8]
 800d1ba:	2100      	movs	r1, #0
 800d1bc:	68f8      	ldr	r0, [r7, #12]
 800d1be:	f005 f909 	bl	80123d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d1c2:	2300      	movs	r3, #0
}
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	3710      	adds	r7, #16
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	bd80      	pop	{r7, pc}

0800d1cc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b082      	sub	sp, #8
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2204      	movs	r2, #4
 800d1d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d1dc:	2300      	movs	r3, #0
 800d1de:	2200      	movs	r2, #0
 800d1e0:	2100      	movs	r1, #0
 800d1e2:	6878      	ldr	r0, [r7, #4]
 800d1e4:	f005 f8d5 	bl	8012392 <USBD_LL_Transmit>

  return USBD_OK;
 800d1e8:	2300      	movs	r3, #0
}
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	3708      	adds	r7, #8
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd80      	pop	{r7, pc}

0800d1f2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d1f2:	b580      	push	{r7, lr}
 800d1f4:	b082      	sub	sp, #8
 800d1f6:	af00      	add	r7, sp, #0
 800d1f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	2205      	movs	r2, #5
 800d1fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d202:	2300      	movs	r3, #0
 800d204:	2200      	movs	r2, #0
 800d206:	2100      	movs	r1, #0
 800d208:	6878      	ldr	r0, [r7, #4]
 800d20a:	f005 f8e3 	bl	80123d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d20e:	2300      	movs	r3, #0
}
 800d210:	4618      	mov	r0, r3
 800d212:	3708      	adds	r7, #8
 800d214:	46bd      	mov	sp, r7
 800d216:	bd80      	pop	{r7, pc}

0800d218 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b084      	sub	sp, #16
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	4603      	mov	r3, r0
 800d220:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d222:	79fb      	ldrb	r3, [r7, #7]
 800d224:	4a08      	ldr	r2, [pc, #32]	; (800d248 <disk_status+0x30>)
 800d226:	009b      	lsls	r3, r3, #2
 800d228:	4413      	add	r3, r2
 800d22a:	685b      	ldr	r3, [r3, #4]
 800d22c:	685b      	ldr	r3, [r3, #4]
 800d22e:	79fa      	ldrb	r2, [r7, #7]
 800d230:	4905      	ldr	r1, [pc, #20]	; (800d248 <disk_status+0x30>)
 800d232:	440a      	add	r2, r1
 800d234:	7a12      	ldrb	r2, [r2, #8]
 800d236:	4610      	mov	r0, r2
 800d238:	4798      	blx	r3
 800d23a:	4603      	mov	r3, r0
 800d23c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d23e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d240:	4618      	mov	r0, r3
 800d242:	3710      	adds	r7, #16
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}
 800d248:	20000480 	.word	0x20000480

0800d24c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b084      	sub	sp, #16
 800d250:	af00      	add	r7, sp, #0
 800d252:	4603      	mov	r3, r0
 800d254:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d256:	2300      	movs	r3, #0
 800d258:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d25a:	79fb      	ldrb	r3, [r7, #7]
 800d25c:	4a0d      	ldr	r2, [pc, #52]	; (800d294 <disk_initialize+0x48>)
 800d25e:	5cd3      	ldrb	r3, [r2, r3]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d111      	bne.n	800d288 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d264:	79fb      	ldrb	r3, [r7, #7]
 800d266:	4a0b      	ldr	r2, [pc, #44]	; (800d294 <disk_initialize+0x48>)
 800d268:	2101      	movs	r1, #1
 800d26a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d26c:	79fb      	ldrb	r3, [r7, #7]
 800d26e:	4a09      	ldr	r2, [pc, #36]	; (800d294 <disk_initialize+0x48>)
 800d270:	009b      	lsls	r3, r3, #2
 800d272:	4413      	add	r3, r2
 800d274:	685b      	ldr	r3, [r3, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	79fa      	ldrb	r2, [r7, #7]
 800d27a:	4906      	ldr	r1, [pc, #24]	; (800d294 <disk_initialize+0x48>)
 800d27c:	440a      	add	r2, r1
 800d27e:	7a12      	ldrb	r2, [r2, #8]
 800d280:	4610      	mov	r0, r2
 800d282:	4798      	blx	r3
 800d284:	4603      	mov	r3, r0
 800d286:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d288:	7bfb      	ldrb	r3, [r7, #15]
}
 800d28a:	4618      	mov	r0, r3
 800d28c:	3710      	adds	r7, #16
 800d28e:	46bd      	mov	sp, r7
 800d290:	bd80      	pop	{r7, pc}
 800d292:	bf00      	nop
 800d294:	20000480 	.word	0x20000480

0800d298 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d298:	b590      	push	{r4, r7, lr}
 800d29a:	b087      	sub	sp, #28
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	60b9      	str	r1, [r7, #8]
 800d2a0:	607a      	str	r2, [r7, #4]
 800d2a2:	603b      	str	r3, [r7, #0]
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d2a8:	7bfb      	ldrb	r3, [r7, #15]
 800d2aa:	4a0a      	ldr	r2, [pc, #40]	; (800d2d4 <disk_read+0x3c>)
 800d2ac:	009b      	lsls	r3, r3, #2
 800d2ae:	4413      	add	r3, r2
 800d2b0:	685b      	ldr	r3, [r3, #4]
 800d2b2:	689c      	ldr	r4, [r3, #8]
 800d2b4:	7bfb      	ldrb	r3, [r7, #15]
 800d2b6:	4a07      	ldr	r2, [pc, #28]	; (800d2d4 <disk_read+0x3c>)
 800d2b8:	4413      	add	r3, r2
 800d2ba:	7a18      	ldrb	r0, [r3, #8]
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	687a      	ldr	r2, [r7, #4]
 800d2c0:	68b9      	ldr	r1, [r7, #8]
 800d2c2:	47a0      	blx	r4
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	75fb      	strb	r3, [r7, #23]
  return res;
 800d2c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	371c      	adds	r7, #28
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bd90      	pop	{r4, r7, pc}
 800d2d2:	bf00      	nop
 800d2d4:	20000480 	.word	0x20000480

0800d2d8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d2d8:	b590      	push	{r4, r7, lr}
 800d2da:	b087      	sub	sp, #28
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	60b9      	str	r1, [r7, #8]
 800d2e0:	607a      	str	r2, [r7, #4]
 800d2e2:	603b      	str	r3, [r7, #0]
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d2e8:	7bfb      	ldrb	r3, [r7, #15]
 800d2ea:	4a0a      	ldr	r2, [pc, #40]	; (800d314 <disk_write+0x3c>)
 800d2ec:	009b      	lsls	r3, r3, #2
 800d2ee:	4413      	add	r3, r2
 800d2f0:	685b      	ldr	r3, [r3, #4]
 800d2f2:	68dc      	ldr	r4, [r3, #12]
 800d2f4:	7bfb      	ldrb	r3, [r7, #15]
 800d2f6:	4a07      	ldr	r2, [pc, #28]	; (800d314 <disk_write+0x3c>)
 800d2f8:	4413      	add	r3, r2
 800d2fa:	7a18      	ldrb	r0, [r3, #8]
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	687a      	ldr	r2, [r7, #4]
 800d300:	68b9      	ldr	r1, [r7, #8]
 800d302:	47a0      	blx	r4
 800d304:	4603      	mov	r3, r0
 800d306:	75fb      	strb	r3, [r7, #23]
  return res;
 800d308:	7dfb      	ldrb	r3, [r7, #23]
}
 800d30a:	4618      	mov	r0, r3
 800d30c:	371c      	adds	r7, #28
 800d30e:	46bd      	mov	sp, r7
 800d310:	bd90      	pop	{r4, r7, pc}
 800d312:	bf00      	nop
 800d314:	20000480 	.word	0x20000480

0800d318 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b084      	sub	sp, #16
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	4603      	mov	r3, r0
 800d320:	603a      	str	r2, [r7, #0]
 800d322:	71fb      	strb	r3, [r7, #7]
 800d324:	460b      	mov	r3, r1
 800d326:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d328:	79fb      	ldrb	r3, [r7, #7]
 800d32a:	4a09      	ldr	r2, [pc, #36]	; (800d350 <disk_ioctl+0x38>)
 800d32c:	009b      	lsls	r3, r3, #2
 800d32e:	4413      	add	r3, r2
 800d330:	685b      	ldr	r3, [r3, #4]
 800d332:	691b      	ldr	r3, [r3, #16]
 800d334:	79fa      	ldrb	r2, [r7, #7]
 800d336:	4906      	ldr	r1, [pc, #24]	; (800d350 <disk_ioctl+0x38>)
 800d338:	440a      	add	r2, r1
 800d33a:	7a10      	ldrb	r0, [r2, #8]
 800d33c:	79b9      	ldrb	r1, [r7, #6]
 800d33e:	683a      	ldr	r2, [r7, #0]
 800d340:	4798      	blx	r3
 800d342:	4603      	mov	r3, r0
 800d344:	73fb      	strb	r3, [r7, #15]
  return res;
 800d346:	7bfb      	ldrb	r3, [r7, #15]
}
 800d348:	4618      	mov	r0, r3
 800d34a:	3710      	adds	r7, #16
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bd80      	pop	{r7, pc}
 800d350:	20000480 	.word	0x20000480

0800d354 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d354:	b480      	push	{r7}
 800d356:	b085      	sub	sp, #20
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	3301      	adds	r3, #1
 800d360:	781b      	ldrb	r3, [r3, #0]
 800d362:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d364:	89fb      	ldrh	r3, [r7, #14]
 800d366:	021b      	lsls	r3, r3, #8
 800d368:	b21a      	sxth	r2, r3
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	781b      	ldrb	r3, [r3, #0]
 800d36e:	b21b      	sxth	r3, r3
 800d370:	4313      	orrs	r3, r2
 800d372:	b21b      	sxth	r3, r3
 800d374:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d376:	89fb      	ldrh	r3, [r7, #14]
}
 800d378:	4618      	mov	r0, r3
 800d37a:	3714      	adds	r7, #20
 800d37c:	46bd      	mov	sp, r7
 800d37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d382:	4770      	bx	lr

0800d384 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d384:	b480      	push	{r7}
 800d386:	b085      	sub	sp, #20
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	3303      	adds	r3, #3
 800d390:	781b      	ldrb	r3, [r3, #0]
 800d392:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	021b      	lsls	r3, r3, #8
 800d398:	687a      	ldr	r2, [r7, #4]
 800d39a:	3202      	adds	r2, #2
 800d39c:	7812      	ldrb	r2, [r2, #0]
 800d39e:	4313      	orrs	r3, r2
 800d3a0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	021b      	lsls	r3, r3, #8
 800d3a6:	687a      	ldr	r2, [r7, #4]
 800d3a8:	3201      	adds	r2, #1
 800d3aa:	7812      	ldrb	r2, [r2, #0]
 800d3ac:	4313      	orrs	r3, r2
 800d3ae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	021b      	lsls	r3, r3, #8
 800d3b4:	687a      	ldr	r2, [r7, #4]
 800d3b6:	7812      	ldrb	r2, [r2, #0]
 800d3b8:	4313      	orrs	r3, r2
 800d3ba:	60fb      	str	r3, [r7, #12]
	return rv;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
}
 800d3be:	4618      	mov	r0, r3
 800d3c0:	3714      	adds	r7, #20
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c8:	4770      	bx	lr

0800d3ca <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d3ca:	b480      	push	{r7}
 800d3cc:	b083      	sub	sp, #12
 800d3ce:	af00      	add	r7, sp, #0
 800d3d0:	6078      	str	r0, [r7, #4]
 800d3d2:	460b      	mov	r3, r1
 800d3d4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	1c5a      	adds	r2, r3, #1
 800d3da:	607a      	str	r2, [r7, #4]
 800d3dc:	887a      	ldrh	r2, [r7, #2]
 800d3de:	b2d2      	uxtb	r2, r2
 800d3e0:	701a      	strb	r2, [r3, #0]
 800d3e2:	887b      	ldrh	r3, [r7, #2]
 800d3e4:	0a1b      	lsrs	r3, r3, #8
 800d3e6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	1c5a      	adds	r2, r3, #1
 800d3ec:	607a      	str	r2, [r7, #4]
 800d3ee:	887a      	ldrh	r2, [r7, #2]
 800d3f0:	b2d2      	uxtb	r2, r2
 800d3f2:	701a      	strb	r2, [r3, #0]
}
 800d3f4:	bf00      	nop
 800d3f6:	370c      	adds	r7, #12
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fe:	4770      	bx	lr

0800d400 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d400:	b480      	push	{r7}
 800d402:	b083      	sub	sp, #12
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
 800d408:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	1c5a      	adds	r2, r3, #1
 800d40e:	607a      	str	r2, [r7, #4]
 800d410:	683a      	ldr	r2, [r7, #0]
 800d412:	b2d2      	uxtb	r2, r2
 800d414:	701a      	strb	r2, [r3, #0]
 800d416:	683b      	ldr	r3, [r7, #0]
 800d418:	0a1b      	lsrs	r3, r3, #8
 800d41a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	1c5a      	adds	r2, r3, #1
 800d420:	607a      	str	r2, [r7, #4]
 800d422:	683a      	ldr	r2, [r7, #0]
 800d424:	b2d2      	uxtb	r2, r2
 800d426:	701a      	strb	r2, [r3, #0]
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	0a1b      	lsrs	r3, r3, #8
 800d42c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	1c5a      	adds	r2, r3, #1
 800d432:	607a      	str	r2, [r7, #4]
 800d434:	683a      	ldr	r2, [r7, #0]
 800d436:	b2d2      	uxtb	r2, r2
 800d438:	701a      	strb	r2, [r3, #0]
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	0a1b      	lsrs	r3, r3, #8
 800d43e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	1c5a      	adds	r2, r3, #1
 800d444:	607a      	str	r2, [r7, #4]
 800d446:	683a      	ldr	r2, [r7, #0]
 800d448:	b2d2      	uxtb	r2, r2
 800d44a:	701a      	strb	r2, [r3, #0]
}
 800d44c:	bf00      	nop
 800d44e:	370c      	adds	r7, #12
 800d450:	46bd      	mov	sp, r7
 800d452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d456:	4770      	bx	lr

0800d458 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d458:	b480      	push	{r7}
 800d45a:	b087      	sub	sp, #28
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	60f8      	str	r0, [r7, #12]
 800d460:	60b9      	str	r1, [r7, #8]
 800d462:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d468:	68bb      	ldr	r3, [r7, #8]
 800d46a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d00d      	beq.n	800d48e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d472:	693a      	ldr	r2, [r7, #16]
 800d474:	1c53      	adds	r3, r2, #1
 800d476:	613b      	str	r3, [r7, #16]
 800d478:	697b      	ldr	r3, [r7, #20]
 800d47a:	1c59      	adds	r1, r3, #1
 800d47c:	6179      	str	r1, [r7, #20]
 800d47e:	7812      	ldrb	r2, [r2, #0]
 800d480:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	3b01      	subs	r3, #1
 800d486:	607b      	str	r3, [r7, #4]
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d1f1      	bne.n	800d472 <mem_cpy+0x1a>
	}
}
 800d48e:	bf00      	nop
 800d490:	371c      	adds	r7, #28
 800d492:	46bd      	mov	sp, r7
 800d494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d498:	4770      	bx	lr

0800d49a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d49a:	b480      	push	{r7}
 800d49c:	b087      	sub	sp, #28
 800d49e:	af00      	add	r7, sp, #0
 800d4a0:	60f8      	str	r0, [r7, #12]
 800d4a2:	60b9      	str	r1, [r7, #8]
 800d4a4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d4aa:	697b      	ldr	r3, [r7, #20]
 800d4ac:	1c5a      	adds	r2, r3, #1
 800d4ae:	617a      	str	r2, [r7, #20]
 800d4b0:	68ba      	ldr	r2, [r7, #8]
 800d4b2:	b2d2      	uxtb	r2, r2
 800d4b4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	3b01      	subs	r3, #1
 800d4ba:	607b      	str	r3, [r7, #4]
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d1f3      	bne.n	800d4aa <mem_set+0x10>
}
 800d4c2:	bf00      	nop
 800d4c4:	bf00      	nop
 800d4c6:	371c      	adds	r7, #28
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ce:	4770      	bx	lr

0800d4d0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d4d0:	b480      	push	{r7}
 800d4d2:	b089      	sub	sp, #36	; 0x24
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	60f8      	str	r0, [r7, #12]
 800d4d8:	60b9      	str	r1, [r7, #8]
 800d4da:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	61fb      	str	r3, [r7, #28]
 800d4e0:	68bb      	ldr	r3, [r7, #8]
 800d4e2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d4e8:	69fb      	ldr	r3, [r7, #28]
 800d4ea:	1c5a      	adds	r2, r3, #1
 800d4ec:	61fa      	str	r2, [r7, #28]
 800d4ee:	781b      	ldrb	r3, [r3, #0]
 800d4f0:	4619      	mov	r1, r3
 800d4f2:	69bb      	ldr	r3, [r7, #24]
 800d4f4:	1c5a      	adds	r2, r3, #1
 800d4f6:	61ba      	str	r2, [r7, #24]
 800d4f8:	781b      	ldrb	r3, [r3, #0]
 800d4fa:	1acb      	subs	r3, r1, r3
 800d4fc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	3b01      	subs	r3, #1
 800d502:	607b      	str	r3, [r7, #4]
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d002      	beq.n	800d510 <mem_cmp+0x40>
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d0eb      	beq.n	800d4e8 <mem_cmp+0x18>

	return r;
 800d510:	697b      	ldr	r3, [r7, #20]
}
 800d512:	4618      	mov	r0, r3
 800d514:	3724      	adds	r7, #36	; 0x24
 800d516:	46bd      	mov	sp, r7
 800d518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51c:	4770      	bx	lr

0800d51e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d51e:	b480      	push	{r7}
 800d520:	b083      	sub	sp, #12
 800d522:	af00      	add	r7, sp, #0
 800d524:	6078      	str	r0, [r7, #4]
 800d526:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d528:	e002      	b.n	800d530 <chk_chr+0x12>
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	3301      	adds	r3, #1
 800d52e:	607b      	str	r3, [r7, #4]
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	781b      	ldrb	r3, [r3, #0]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d005      	beq.n	800d544 <chk_chr+0x26>
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	781b      	ldrb	r3, [r3, #0]
 800d53c:	461a      	mov	r2, r3
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	4293      	cmp	r3, r2
 800d542:	d1f2      	bne.n	800d52a <chk_chr+0xc>
	return *str;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	781b      	ldrb	r3, [r3, #0]
}
 800d548:	4618      	mov	r0, r3
 800d54a:	370c      	adds	r7, #12
 800d54c:	46bd      	mov	sp, r7
 800d54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d552:	4770      	bx	lr

0800d554 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b082      	sub	sp, #8
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d009      	beq.n	800d576 <lock_fs+0x22>
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	68db      	ldr	r3, [r3, #12]
 800d566:	4618      	mov	r0, r3
 800d568:	f002 fcde 	bl	800ff28 <ff_req_grant>
 800d56c:	4603      	mov	r3, r0
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d001      	beq.n	800d576 <lock_fs+0x22>
 800d572:	2301      	movs	r3, #1
 800d574:	e000      	b.n	800d578 <lock_fs+0x24>
 800d576:	2300      	movs	r3, #0
}
 800d578:	4618      	mov	r0, r3
 800d57a:	3708      	adds	r7, #8
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bd80      	pop	{r7, pc}

0800d580 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b082      	sub	sp, #8
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
 800d588:	460b      	mov	r3, r1
 800d58a:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d00d      	beq.n	800d5ae <unlock_fs+0x2e>
 800d592:	78fb      	ldrb	r3, [r7, #3]
 800d594:	2b0c      	cmp	r3, #12
 800d596:	d00a      	beq.n	800d5ae <unlock_fs+0x2e>
 800d598:	78fb      	ldrb	r3, [r7, #3]
 800d59a:	2b0b      	cmp	r3, #11
 800d59c:	d007      	beq.n	800d5ae <unlock_fs+0x2e>
 800d59e:	78fb      	ldrb	r3, [r7, #3]
 800d5a0:	2b0f      	cmp	r3, #15
 800d5a2:	d004      	beq.n	800d5ae <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	68db      	ldr	r3, [r3, #12]
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	f002 fcd2 	bl	800ff52 <ff_rel_grant>
	}
}
 800d5ae:	bf00      	nop
 800d5b0:	3708      	adds	r7, #8
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	bd80      	pop	{r7, pc}
	...

0800d5b8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d5b8:	b480      	push	{r7}
 800d5ba:	b085      	sub	sp, #20
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
 800d5c0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	60bb      	str	r3, [r7, #8]
 800d5c6:	68bb      	ldr	r3, [r7, #8]
 800d5c8:	60fb      	str	r3, [r7, #12]
 800d5ca:	e029      	b.n	800d620 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d5cc:	4a27      	ldr	r2, [pc, #156]	; (800d66c <chk_lock+0xb4>)
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	011b      	lsls	r3, r3, #4
 800d5d2:	4413      	add	r3, r2
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d01d      	beq.n	800d616 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d5da:	4a24      	ldr	r2, [pc, #144]	; (800d66c <chk_lock+0xb4>)
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	011b      	lsls	r3, r3, #4
 800d5e0:	4413      	add	r3, r2
 800d5e2:	681a      	ldr	r2, [r3, #0]
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	429a      	cmp	r2, r3
 800d5ea:	d116      	bne.n	800d61a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d5ec:	4a1f      	ldr	r2, [pc, #124]	; (800d66c <chk_lock+0xb4>)
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	011b      	lsls	r3, r3, #4
 800d5f2:	4413      	add	r3, r2
 800d5f4:	3304      	adds	r3, #4
 800d5f6:	681a      	ldr	r2, [r3, #0]
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d5fc:	429a      	cmp	r2, r3
 800d5fe:	d10c      	bne.n	800d61a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d600:	4a1a      	ldr	r2, [pc, #104]	; (800d66c <chk_lock+0xb4>)
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	011b      	lsls	r3, r3, #4
 800d606:	4413      	add	r3, r2
 800d608:	3308      	adds	r3, #8
 800d60a:	681a      	ldr	r2, [r3, #0]
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d610:	429a      	cmp	r2, r3
 800d612:	d102      	bne.n	800d61a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d614:	e007      	b.n	800d626 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d616:	2301      	movs	r3, #1
 800d618:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	3301      	adds	r3, #1
 800d61e:	60fb      	str	r3, [r7, #12]
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	2b01      	cmp	r3, #1
 800d624:	d9d2      	bls.n	800d5cc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	2b02      	cmp	r3, #2
 800d62a:	d109      	bne.n	800d640 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d62c:	68bb      	ldr	r3, [r7, #8]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d102      	bne.n	800d638 <chk_lock+0x80>
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	2b02      	cmp	r3, #2
 800d636:	d101      	bne.n	800d63c <chk_lock+0x84>
 800d638:	2300      	movs	r3, #0
 800d63a:	e010      	b.n	800d65e <chk_lock+0xa6>
 800d63c:	2312      	movs	r3, #18
 800d63e:	e00e      	b.n	800d65e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d108      	bne.n	800d658 <chk_lock+0xa0>
 800d646:	4a09      	ldr	r2, [pc, #36]	; (800d66c <chk_lock+0xb4>)
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	011b      	lsls	r3, r3, #4
 800d64c:	4413      	add	r3, r2
 800d64e:	330c      	adds	r3, #12
 800d650:	881b      	ldrh	r3, [r3, #0]
 800d652:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d656:	d101      	bne.n	800d65c <chk_lock+0xa4>
 800d658:	2310      	movs	r3, #16
 800d65a:	e000      	b.n	800d65e <chk_lock+0xa6>
 800d65c:	2300      	movs	r3, #0
}
 800d65e:	4618      	mov	r0, r3
 800d660:	3714      	adds	r7, #20
 800d662:	46bd      	mov	sp, r7
 800d664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d668:	4770      	bx	lr
 800d66a:	bf00      	nop
 800d66c:	20000460 	.word	0x20000460

0800d670 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d670:	b480      	push	{r7}
 800d672:	b083      	sub	sp, #12
 800d674:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d676:	2300      	movs	r3, #0
 800d678:	607b      	str	r3, [r7, #4]
 800d67a:	e002      	b.n	800d682 <enq_lock+0x12>
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	3301      	adds	r3, #1
 800d680:	607b      	str	r3, [r7, #4]
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2b01      	cmp	r3, #1
 800d686:	d806      	bhi.n	800d696 <enq_lock+0x26>
 800d688:	4a09      	ldr	r2, [pc, #36]	; (800d6b0 <enq_lock+0x40>)
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	011b      	lsls	r3, r3, #4
 800d68e:	4413      	add	r3, r2
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d1f2      	bne.n	800d67c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2b02      	cmp	r3, #2
 800d69a:	bf14      	ite	ne
 800d69c:	2301      	movne	r3, #1
 800d69e:	2300      	moveq	r3, #0
 800d6a0:	b2db      	uxtb	r3, r3
}
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	370c      	adds	r7, #12
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ac:	4770      	bx	lr
 800d6ae:	bf00      	nop
 800d6b0:	20000460 	.word	0x20000460

0800d6b4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d6b4:	b480      	push	{r7}
 800d6b6:	b085      	sub	sp, #20
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
 800d6bc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d6be:	2300      	movs	r3, #0
 800d6c0:	60fb      	str	r3, [r7, #12]
 800d6c2:	e01f      	b.n	800d704 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d6c4:	4a41      	ldr	r2, [pc, #260]	; (800d7cc <inc_lock+0x118>)
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	011b      	lsls	r3, r3, #4
 800d6ca:	4413      	add	r3, r2
 800d6cc:	681a      	ldr	r2, [r3, #0]
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	429a      	cmp	r2, r3
 800d6d4:	d113      	bne.n	800d6fe <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d6d6:	4a3d      	ldr	r2, [pc, #244]	; (800d7cc <inc_lock+0x118>)
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	011b      	lsls	r3, r3, #4
 800d6dc:	4413      	add	r3, r2
 800d6de:	3304      	adds	r3, #4
 800d6e0:	681a      	ldr	r2, [r3, #0]
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d6e6:	429a      	cmp	r2, r3
 800d6e8:	d109      	bne.n	800d6fe <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d6ea:	4a38      	ldr	r2, [pc, #224]	; (800d7cc <inc_lock+0x118>)
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	011b      	lsls	r3, r3, #4
 800d6f0:	4413      	add	r3, r2
 800d6f2:	3308      	adds	r3, #8
 800d6f4:	681a      	ldr	r2, [r3, #0]
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d6fa:	429a      	cmp	r2, r3
 800d6fc:	d006      	beq.n	800d70c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	3301      	adds	r3, #1
 800d702:	60fb      	str	r3, [r7, #12]
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	2b01      	cmp	r3, #1
 800d708:	d9dc      	bls.n	800d6c4 <inc_lock+0x10>
 800d70a:	e000      	b.n	800d70e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d70c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	2b02      	cmp	r3, #2
 800d712:	d132      	bne.n	800d77a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d714:	2300      	movs	r3, #0
 800d716:	60fb      	str	r3, [r7, #12]
 800d718:	e002      	b.n	800d720 <inc_lock+0x6c>
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	3301      	adds	r3, #1
 800d71e:	60fb      	str	r3, [r7, #12]
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	2b01      	cmp	r3, #1
 800d724:	d806      	bhi.n	800d734 <inc_lock+0x80>
 800d726:	4a29      	ldr	r2, [pc, #164]	; (800d7cc <inc_lock+0x118>)
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	011b      	lsls	r3, r3, #4
 800d72c:	4413      	add	r3, r2
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d1f2      	bne.n	800d71a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	2b02      	cmp	r3, #2
 800d738:	d101      	bne.n	800d73e <inc_lock+0x8a>
 800d73a:	2300      	movs	r3, #0
 800d73c:	e040      	b.n	800d7c0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681a      	ldr	r2, [r3, #0]
 800d742:	4922      	ldr	r1, [pc, #136]	; (800d7cc <inc_lock+0x118>)
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	011b      	lsls	r3, r3, #4
 800d748:	440b      	add	r3, r1
 800d74a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	689a      	ldr	r2, [r3, #8]
 800d750:	491e      	ldr	r1, [pc, #120]	; (800d7cc <inc_lock+0x118>)
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	011b      	lsls	r3, r3, #4
 800d756:	440b      	add	r3, r1
 800d758:	3304      	adds	r3, #4
 800d75a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	695a      	ldr	r2, [r3, #20]
 800d760:	491a      	ldr	r1, [pc, #104]	; (800d7cc <inc_lock+0x118>)
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	011b      	lsls	r3, r3, #4
 800d766:	440b      	add	r3, r1
 800d768:	3308      	adds	r3, #8
 800d76a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d76c:	4a17      	ldr	r2, [pc, #92]	; (800d7cc <inc_lock+0x118>)
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	011b      	lsls	r3, r3, #4
 800d772:	4413      	add	r3, r2
 800d774:	330c      	adds	r3, #12
 800d776:	2200      	movs	r2, #0
 800d778:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d77a:	683b      	ldr	r3, [r7, #0]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d009      	beq.n	800d794 <inc_lock+0xe0>
 800d780:	4a12      	ldr	r2, [pc, #72]	; (800d7cc <inc_lock+0x118>)
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	011b      	lsls	r3, r3, #4
 800d786:	4413      	add	r3, r2
 800d788:	330c      	adds	r3, #12
 800d78a:	881b      	ldrh	r3, [r3, #0]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d001      	beq.n	800d794 <inc_lock+0xe0>
 800d790:	2300      	movs	r3, #0
 800d792:	e015      	b.n	800d7c0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d108      	bne.n	800d7ac <inc_lock+0xf8>
 800d79a:	4a0c      	ldr	r2, [pc, #48]	; (800d7cc <inc_lock+0x118>)
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	011b      	lsls	r3, r3, #4
 800d7a0:	4413      	add	r3, r2
 800d7a2:	330c      	adds	r3, #12
 800d7a4:	881b      	ldrh	r3, [r3, #0]
 800d7a6:	3301      	adds	r3, #1
 800d7a8:	b29a      	uxth	r2, r3
 800d7aa:	e001      	b.n	800d7b0 <inc_lock+0xfc>
 800d7ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d7b0:	4906      	ldr	r1, [pc, #24]	; (800d7cc <inc_lock+0x118>)
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	011b      	lsls	r3, r3, #4
 800d7b6:	440b      	add	r3, r1
 800d7b8:	330c      	adds	r3, #12
 800d7ba:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	3301      	adds	r3, #1
}
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	3714      	adds	r7, #20
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ca:	4770      	bx	lr
 800d7cc:	20000460 	.word	0x20000460

0800d7d0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d7d0:	b480      	push	{r7}
 800d7d2:	b085      	sub	sp, #20
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	3b01      	subs	r3, #1
 800d7dc:	607b      	str	r3, [r7, #4]
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	2b01      	cmp	r3, #1
 800d7e2:	d825      	bhi.n	800d830 <dec_lock+0x60>
		n = Files[i].ctr;
 800d7e4:	4a17      	ldr	r2, [pc, #92]	; (800d844 <dec_lock+0x74>)
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	011b      	lsls	r3, r3, #4
 800d7ea:	4413      	add	r3, r2
 800d7ec:	330c      	adds	r3, #12
 800d7ee:	881b      	ldrh	r3, [r3, #0]
 800d7f0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d7f2:	89fb      	ldrh	r3, [r7, #14]
 800d7f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d7f8:	d101      	bne.n	800d7fe <dec_lock+0x2e>
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d7fe:	89fb      	ldrh	r3, [r7, #14]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d002      	beq.n	800d80a <dec_lock+0x3a>
 800d804:	89fb      	ldrh	r3, [r7, #14]
 800d806:	3b01      	subs	r3, #1
 800d808:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d80a:	4a0e      	ldr	r2, [pc, #56]	; (800d844 <dec_lock+0x74>)
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	011b      	lsls	r3, r3, #4
 800d810:	4413      	add	r3, r2
 800d812:	330c      	adds	r3, #12
 800d814:	89fa      	ldrh	r2, [r7, #14]
 800d816:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d818:	89fb      	ldrh	r3, [r7, #14]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d105      	bne.n	800d82a <dec_lock+0x5a>
 800d81e:	4a09      	ldr	r2, [pc, #36]	; (800d844 <dec_lock+0x74>)
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	011b      	lsls	r3, r3, #4
 800d824:	4413      	add	r3, r2
 800d826:	2200      	movs	r2, #0
 800d828:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d82a:	2300      	movs	r3, #0
 800d82c:	737b      	strb	r3, [r7, #13]
 800d82e:	e001      	b.n	800d834 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d830:	2302      	movs	r3, #2
 800d832:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d834:	7b7b      	ldrb	r3, [r7, #13]
}
 800d836:	4618      	mov	r0, r3
 800d838:	3714      	adds	r7, #20
 800d83a:	46bd      	mov	sp, r7
 800d83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d840:	4770      	bx	lr
 800d842:	bf00      	nop
 800d844:	20000460 	.word	0x20000460

0800d848 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d848:	b480      	push	{r7}
 800d84a:	b085      	sub	sp, #20
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d850:	2300      	movs	r3, #0
 800d852:	60fb      	str	r3, [r7, #12]
 800d854:	e010      	b.n	800d878 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d856:	4a0d      	ldr	r2, [pc, #52]	; (800d88c <clear_lock+0x44>)
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	011b      	lsls	r3, r3, #4
 800d85c:	4413      	add	r3, r2
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	687a      	ldr	r2, [r7, #4]
 800d862:	429a      	cmp	r2, r3
 800d864:	d105      	bne.n	800d872 <clear_lock+0x2a>
 800d866:	4a09      	ldr	r2, [pc, #36]	; (800d88c <clear_lock+0x44>)
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	011b      	lsls	r3, r3, #4
 800d86c:	4413      	add	r3, r2
 800d86e:	2200      	movs	r2, #0
 800d870:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	3301      	adds	r3, #1
 800d876:	60fb      	str	r3, [r7, #12]
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	2b01      	cmp	r3, #1
 800d87c:	d9eb      	bls.n	800d856 <clear_lock+0xe>
	}
}
 800d87e:	bf00      	nop
 800d880:	bf00      	nop
 800d882:	3714      	adds	r7, #20
 800d884:	46bd      	mov	sp, r7
 800d886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88a:	4770      	bx	lr
 800d88c:	20000460 	.word	0x20000460

0800d890 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d890:	b580      	push	{r7, lr}
 800d892:	b086      	sub	sp, #24
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d898:	2300      	movs	r3, #0
 800d89a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	78db      	ldrb	r3, [r3, #3]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d034      	beq.n	800d90e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8a8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	7858      	ldrb	r0, [r3, #1]
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d8b4:	2301      	movs	r3, #1
 800d8b6:	697a      	ldr	r2, [r7, #20]
 800d8b8:	f7ff fd0e 	bl	800d2d8 <disk_write>
 800d8bc:	4603      	mov	r3, r0
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d002      	beq.n	800d8c8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d8c2:	2301      	movs	r3, #1
 800d8c4:	73fb      	strb	r3, [r7, #15]
 800d8c6:	e022      	b.n	800d90e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8d2:	697a      	ldr	r2, [r7, #20]
 800d8d4:	1ad2      	subs	r2, r2, r3
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	69db      	ldr	r3, [r3, #28]
 800d8da:	429a      	cmp	r2, r3
 800d8dc:	d217      	bcs.n	800d90e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	789b      	ldrb	r3, [r3, #2]
 800d8e2:	613b      	str	r3, [r7, #16]
 800d8e4:	e010      	b.n	800d908 <sync_window+0x78>
					wsect += fs->fsize;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	69db      	ldr	r3, [r3, #28]
 800d8ea:	697a      	ldr	r2, [r7, #20]
 800d8ec:	4413      	add	r3, r2
 800d8ee:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	7858      	ldrb	r0, [r3, #1]
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d8fa:	2301      	movs	r3, #1
 800d8fc:	697a      	ldr	r2, [r7, #20]
 800d8fe:	f7ff fceb 	bl	800d2d8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d902:	693b      	ldr	r3, [r7, #16]
 800d904:	3b01      	subs	r3, #1
 800d906:	613b      	str	r3, [r7, #16]
 800d908:	693b      	ldr	r3, [r7, #16]
 800d90a:	2b01      	cmp	r3, #1
 800d90c:	d8eb      	bhi.n	800d8e6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d90e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d910:	4618      	mov	r0, r3
 800d912:	3718      	adds	r7, #24
 800d914:	46bd      	mov	sp, r7
 800d916:	bd80      	pop	{r7, pc}

0800d918 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b084      	sub	sp, #16
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
 800d920:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d922:	2300      	movs	r3, #0
 800d924:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d92a:	683a      	ldr	r2, [r7, #0]
 800d92c:	429a      	cmp	r2, r3
 800d92e:	d01b      	beq.n	800d968 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d930:	6878      	ldr	r0, [r7, #4]
 800d932:	f7ff ffad 	bl	800d890 <sync_window>
 800d936:	4603      	mov	r3, r0
 800d938:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d93a:	7bfb      	ldrb	r3, [r7, #15]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d113      	bne.n	800d968 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	7858      	ldrb	r0, [r3, #1]
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d94a:	2301      	movs	r3, #1
 800d94c:	683a      	ldr	r2, [r7, #0]
 800d94e:	f7ff fca3 	bl	800d298 <disk_read>
 800d952:	4603      	mov	r3, r0
 800d954:	2b00      	cmp	r3, #0
 800d956:	d004      	beq.n	800d962 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d958:	f04f 33ff 	mov.w	r3, #4294967295
 800d95c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d95e:	2301      	movs	r3, #1
 800d960:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	683a      	ldr	r2, [r7, #0]
 800d966:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800d968:	7bfb      	ldrb	r3, [r7, #15]
}
 800d96a:	4618      	mov	r0, r3
 800d96c:	3710      	adds	r7, #16
 800d96e:	46bd      	mov	sp, r7
 800d970:	bd80      	pop	{r7, pc}
	...

0800d974 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d974:	b580      	push	{r7, lr}
 800d976:	b084      	sub	sp, #16
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d97c:	6878      	ldr	r0, [r7, #4]
 800d97e:	f7ff ff87 	bl	800d890 <sync_window>
 800d982:	4603      	mov	r3, r0
 800d984:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d986:	7bfb      	ldrb	r3, [r7, #15]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d158      	bne.n	800da3e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	781b      	ldrb	r3, [r3, #0]
 800d990:	2b03      	cmp	r3, #3
 800d992:	d148      	bne.n	800da26 <sync_fs+0xb2>
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	791b      	ldrb	r3, [r3, #4]
 800d998:	2b01      	cmp	r3, #1
 800d99a:	d144      	bne.n	800da26 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	3334      	adds	r3, #52	; 0x34
 800d9a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d9a4:	2100      	movs	r1, #0
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	f7ff fd77 	bl	800d49a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	3334      	adds	r3, #52	; 0x34
 800d9b0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d9b4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	f7ff fd06 	bl	800d3ca <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	3334      	adds	r3, #52	; 0x34
 800d9c2:	4921      	ldr	r1, [pc, #132]	; (800da48 <sync_fs+0xd4>)
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	f7ff fd1b 	bl	800d400 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	3334      	adds	r3, #52	; 0x34
 800d9ce:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d9d2:	491e      	ldr	r1, [pc, #120]	; (800da4c <sync_fs+0xd8>)
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	f7ff fd13 	bl	800d400 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	3334      	adds	r3, #52	; 0x34
 800d9de:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	695b      	ldr	r3, [r3, #20]
 800d9e6:	4619      	mov	r1, r3
 800d9e8:	4610      	mov	r0, r2
 800d9ea:	f7ff fd09 	bl	800d400 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	3334      	adds	r3, #52	; 0x34
 800d9f2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	691b      	ldr	r3, [r3, #16]
 800d9fa:	4619      	mov	r1, r3
 800d9fc:	4610      	mov	r0, r2
 800d9fe:	f7ff fcff 	bl	800d400 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6a1b      	ldr	r3, [r3, #32]
 800da06:	1c5a      	adds	r2, r3, #1
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	7858      	ldrb	r0, [r3, #1]
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800da1a:	2301      	movs	r3, #1
 800da1c:	f7ff fc5c 	bl	800d2d8 <disk_write>
			fs->fsi_flag = 0;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2200      	movs	r2, #0
 800da24:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	785b      	ldrb	r3, [r3, #1]
 800da2a:	2200      	movs	r2, #0
 800da2c:	2100      	movs	r1, #0
 800da2e:	4618      	mov	r0, r3
 800da30:	f7ff fc72 	bl	800d318 <disk_ioctl>
 800da34:	4603      	mov	r3, r0
 800da36:	2b00      	cmp	r3, #0
 800da38:	d001      	beq.n	800da3e <sync_fs+0xca>
 800da3a:	2301      	movs	r3, #1
 800da3c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800da3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800da40:	4618      	mov	r0, r3
 800da42:	3710      	adds	r7, #16
 800da44:	46bd      	mov	sp, r7
 800da46:	bd80      	pop	{r7, pc}
 800da48:	41615252 	.word	0x41615252
 800da4c:	61417272 	.word	0x61417272

0800da50 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800da50:	b480      	push	{r7}
 800da52:	b083      	sub	sp, #12
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
 800da58:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800da5a:	683b      	ldr	r3, [r7, #0]
 800da5c:	3b02      	subs	r3, #2
 800da5e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	699b      	ldr	r3, [r3, #24]
 800da64:	3b02      	subs	r3, #2
 800da66:	683a      	ldr	r2, [r7, #0]
 800da68:	429a      	cmp	r2, r3
 800da6a:	d301      	bcc.n	800da70 <clust2sect+0x20>
 800da6c:	2300      	movs	r3, #0
 800da6e:	e008      	b.n	800da82 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	895b      	ldrh	r3, [r3, #10]
 800da74:	461a      	mov	r2, r3
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	fb03 f202 	mul.w	r2, r3, r2
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da80:	4413      	add	r3, r2
}
 800da82:	4618      	mov	r0, r3
 800da84:	370c      	adds	r7, #12
 800da86:	46bd      	mov	sp, r7
 800da88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8c:	4770      	bx	lr

0800da8e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800da8e:	b580      	push	{r7, lr}
 800da90:	b086      	sub	sp, #24
 800da92:	af00      	add	r7, sp, #0
 800da94:	6078      	str	r0, [r7, #4]
 800da96:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	2b01      	cmp	r3, #1
 800daa2:	d904      	bls.n	800daae <get_fat+0x20>
 800daa4:	693b      	ldr	r3, [r7, #16]
 800daa6:	699b      	ldr	r3, [r3, #24]
 800daa8:	683a      	ldr	r2, [r7, #0]
 800daaa:	429a      	cmp	r2, r3
 800daac:	d302      	bcc.n	800dab4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800daae:	2301      	movs	r3, #1
 800dab0:	617b      	str	r3, [r7, #20]
 800dab2:	e08f      	b.n	800dbd4 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800dab4:	f04f 33ff 	mov.w	r3, #4294967295
 800dab8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800daba:	693b      	ldr	r3, [r7, #16]
 800dabc:	781b      	ldrb	r3, [r3, #0]
 800dabe:	2b03      	cmp	r3, #3
 800dac0:	d062      	beq.n	800db88 <get_fat+0xfa>
 800dac2:	2b03      	cmp	r3, #3
 800dac4:	dc7c      	bgt.n	800dbc0 <get_fat+0x132>
 800dac6:	2b01      	cmp	r3, #1
 800dac8:	d002      	beq.n	800dad0 <get_fat+0x42>
 800daca:	2b02      	cmp	r3, #2
 800dacc:	d042      	beq.n	800db54 <get_fat+0xc6>
 800dace:	e077      	b.n	800dbc0 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800dad0:	683b      	ldr	r3, [r7, #0]
 800dad2:	60fb      	str	r3, [r7, #12]
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	085b      	lsrs	r3, r3, #1
 800dad8:	68fa      	ldr	r2, [r7, #12]
 800dada:	4413      	add	r3, r2
 800dadc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dade:	693b      	ldr	r3, [r7, #16]
 800dae0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	0a5b      	lsrs	r3, r3, #9
 800dae6:	4413      	add	r3, r2
 800dae8:	4619      	mov	r1, r3
 800daea:	6938      	ldr	r0, [r7, #16]
 800daec:	f7ff ff14 	bl	800d918 <move_window>
 800daf0:	4603      	mov	r3, r0
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d167      	bne.n	800dbc6 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	1c5a      	adds	r2, r3, #1
 800dafa:	60fa      	str	r2, [r7, #12]
 800dafc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db00:	693a      	ldr	r2, [r7, #16]
 800db02:	4413      	add	r3, r2
 800db04:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800db08:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800db0a:	693b      	ldr	r3, [r7, #16]
 800db0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	0a5b      	lsrs	r3, r3, #9
 800db12:	4413      	add	r3, r2
 800db14:	4619      	mov	r1, r3
 800db16:	6938      	ldr	r0, [r7, #16]
 800db18:	f7ff fefe 	bl	800d918 <move_window>
 800db1c:	4603      	mov	r3, r0
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d153      	bne.n	800dbca <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db28:	693a      	ldr	r2, [r7, #16]
 800db2a:	4413      	add	r3, r2
 800db2c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800db30:	021b      	lsls	r3, r3, #8
 800db32:	461a      	mov	r2, r3
 800db34:	68bb      	ldr	r3, [r7, #8]
 800db36:	4313      	orrs	r3, r2
 800db38:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800db3a:	683b      	ldr	r3, [r7, #0]
 800db3c:	f003 0301 	and.w	r3, r3, #1
 800db40:	2b00      	cmp	r3, #0
 800db42:	d002      	beq.n	800db4a <get_fat+0xbc>
 800db44:	68bb      	ldr	r3, [r7, #8]
 800db46:	091b      	lsrs	r3, r3, #4
 800db48:	e002      	b.n	800db50 <get_fat+0xc2>
 800db4a:	68bb      	ldr	r3, [r7, #8]
 800db4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800db50:	617b      	str	r3, [r7, #20]
			break;
 800db52:	e03f      	b.n	800dbd4 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800db54:	693b      	ldr	r3, [r7, #16]
 800db56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800db58:	683b      	ldr	r3, [r7, #0]
 800db5a:	0a1b      	lsrs	r3, r3, #8
 800db5c:	4413      	add	r3, r2
 800db5e:	4619      	mov	r1, r3
 800db60:	6938      	ldr	r0, [r7, #16]
 800db62:	f7ff fed9 	bl	800d918 <move_window>
 800db66:	4603      	mov	r3, r0
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d130      	bne.n	800dbce <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800db6c:	693b      	ldr	r3, [r7, #16]
 800db6e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	005b      	lsls	r3, r3, #1
 800db76:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800db7a:	4413      	add	r3, r2
 800db7c:	4618      	mov	r0, r3
 800db7e:	f7ff fbe9 	bl	800d354 <ld_word>
 800db82:	4603      	mov	r3, r0
 800db84:	617b      	str	r3, [r7, #20]
			break;
 800db86:	e025      	b.n	800dbd4 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800db88:	693b      	ldr	r3, [r7, #16]
 800db8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	09db      	lsrs	r3, r3, #7
 800db90:	4413      	add	r3, r2
 800db92:	4619      	mov	r1, r3
 800db94:	6938      	ldr	r0, [r7, #16]
 800db96:	f7ff febf 	bl	800d918 <move_window>
 800db9a:	4603      	mov	r3, r0
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d118      	bne.n	800dbd2 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800dba0:	693b      	ldr	r3, [r7, #16]
 800dba2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dba6:	683b      	ldr	r3, [r7, #0]
 800dba8:	009b      	lsls	r3, r3, #2
 800dbaa:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800dbae:	4413      	add	r3, r2
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	f7ff fbe7 	bl	800d384 <ld_dword>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800dbbc:	617b      	str	r3, [r7, #20]
			break;
 800dbbe:	e009      	b.n	800dbd4 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800dbc0:	2301      	movs	r3, #1
 800dbc2:	617b      	str	r3, [r7, #20]
 800dbc4:	e006      	b.n	800dbd4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dbc6:	bf00      	nop
 800dbc8:	e004      	b.n	800dbd4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dbca:	bf00      	nop
 800dbcc:	e002      	b.n	800dbd4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800dbce:	bf00      	nop
 800dbd0:	e000      	b.n	800dbd4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dbd2:	bf00      	nop
		}
	}

	return val;
 800dbd4:	697b      	ldr	r3, [r7, #20]
}
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	3718      	adds	r7, #24
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	bd80      	pop	{r7, pc}

0800dbde <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800dbde:	b590      	push	{r4, r7, lr}
 800dbe0:	b089      	sub	sp, #36	; 0x24
 800dbe2:	af00      	add	r7, sp, #0
 800dbe4:	60f8      	str	r0, [r7, #12]
 800dbe6:	60b9      	str	r1, [r7, #8]
 800dbe8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800dbea:	2302      	movs	r3, #2
 800dbec:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800dbee:	68bb      	ldr	r3, [r7, #8]
 800dbf0:	2b01      	cmp	r3, #1
 800dbf2:	f240 80d2 	bls.w	800dd9a <put_fat+0x1bc>
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	699b      	ldr	r3, [r3, #24]
 800dbfa:	68ba      	ldr	r2, [r7, #8]
 800dbfc:	429a      	cmp	r2, r3
 800dbfe:	f080 80cc 	bcs.w	800dd9a <put_fat+0x1bc>
		switch (fs->fs_type) {
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	781b      	ldrb	r3, [r3, #0]
 800dc06:	2b03      	cmp	r3, #3
 800dc08:	f000 8096 	beq.w	800dd38 <put_fat+0x15a>
 800dc0c:	2b03      	cmp	r3, #3
 800dc0e:	f300 80cd 	bgt.w	800ddac <put_fat+0x1ce>
 800dc12:	2b01      	cmp	r3, #1
 800dc14:	d002      	beq.n	800dc1c <put_fat+0x3e>
 800dc16:	2b02      	cmp	r3, #2
 800dc18:	d06e      	beq.n	800dcf8 <put_fat+0x11a>
 800dc1a:	e0c7      	b.n	800ddac <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800dc1c:	68bb      	ldr	r3, [r7, #8]
 800dc1e:	61bb      	str	r3, [r7, #24]
 800dc20:	69bb      	ldr	r3, [r7, #24]
 800dc22:	085b      	lsrs	r3, r3, #1
 800dc24:	69ba      	ldr	r2, [r7, #24]
 800dc26:	4413      	add	r3, r2
 800dc28:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dc2e:	69bb      	ldr	r3, [r7, #24]
 800dc30:	0a5b      	lsrs	r3, r3, #9
 800dc32:	4413      	add	r3, r2
 800dc34:	4619      	mov	r1, r3
 800dc36:	68f8      	ldr	r0, [r7, #12]
 800dc38:	f7ff fe6e 	bl	800d918 <move_window>
 800dc3c:	4603      	mov	r3, r0
 800dc3e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dc40:	7ffb      	ldrb	r3, [r7, #31]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	f040 80ab 	bne.w	800dd9e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dc4e:	69bb      	ldr	r3, [r7, #24]
 800dc50:	1c59      	adds	r1, r3, #1
 800dc52:	61b9      	str	r1, [r7, #24]
 800dc54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc58:	4413      	add	r3, r2
 800dc5a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800dc5c:	68bb      	ldr	r3, [r7, #8]
 800dc5e:	f003 0301 	and.w	r3, r3, #1
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d00d      	beq.n	800dc82 <put_fat+0xa4>
 800dc66:	697b      	ldr	r3, [r7, #20]
 800dc68:	781b      	ldrb	r3, [r3, #0]
 800dc6a:	b25b      	sxtb	r3, r3
 800dc6c:	f003 030f 	and.w	r3, r3, #15
 800dc70:	b25a      	sxtb	r2, r3
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	b2db      	uxtb	r3, r3
 800dc76:	011b      	lsls	r3, r3, #4
 800dc78:	b25b      	sxtb	r3, r3
 800dc7a:	4313      	orrs	r3, r2
 800dc7c:	b25b      	sxtb	r3, r3
 800dc7e:	b2db      	uxtb	r3, r3
 800dc80:	e001      	b.n	800dc86 <put_fat+0xa8>
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	b2db      	uxtb	r3, r3
 800dc86:	697a      	ldr	r2, [r7, #20]
 800dc88:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	2201      	movs	r2, #1
 800dc8e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dc94:	69bb      	ldr	r3, [r7, #24]
 800dc96:	0a5b      	lsrs	r3, r3, #9
 800dc98:	4413      	add	r3, r2
 800dc9a:	4619      	mov	r1, r3
 800dc9c:	68f8      	ldr	r0, [r7, #12]
 800dc9e:	f7ff fe3b 	bl	800d918 <move_window>
 800dca2:	4603      	mov	r3, r0
 800dca4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dca6:	7ffb      	ldrb	r3, [r7, #31]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d17a      	bne.n	800dda2 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dcb2:	69bb      	ldr	r3, [r7, #24]
 800dcb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcb8:	4413      	add	r3, r2
 800dcba:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800dcbc:	68bb      	ldr	r3, [r7, #8]
 800dcbe:	f003 0301 	and.w	r3, r3, #1
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d003      	beq.n	800dcce <put_fat+0xf0>
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	091b      	lsrs	r3, r3, #4
 800dcca:	b2db      	uxtb	r3, r3
 800dccc:	e00e      	b.n	800dcec <put_fat+0x10e>
 800dcce:	697b      	ldr	r3, [r7, #20]
 800dcd0:	781b      	ldrb	r3, [r3, #0]
 800dcd2:	b25b      	sxtb	r3, r3
 800dcd4:	f023 030f 	bic.w	r3, r3, #15
 800dcd8:	b25a      	sxtb	r2, r3
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	0a1b      	lsrs	r3, r3, #8
 800dcde:	b25b      	sxtb	r3, r3
 800dce0:	f003 030f 	and.w	r3, r3, #15
 800dce4:	b25b      	sxtb	r3, r3
 800dce6:	4313      	orrs	r3, r2
 800dce8:	b25b      	sxtb	r3, r3
 800dcea:	b2db      	uxtb	r3, r3
 800dcec:	697a      	ldr	r2, [r7, #20]
 800dcee:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	2201      	movs	r2, #1
 800dcf4:	70da      	strb	r2, [r3, #3]
			break;
 800dcf6:	e059      	b.n	800ddac <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	0a1b      	lsrs	r3, r3, #8
 800dd00:	4413      	add	r3, r2
 800dd02:	4619      	mov	r1, r3
 800dd04:	68f8      	ldr	r0, [r7, #12]
 800dd06:	f7ff fe07 	bl	800d918 <move_window>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dd0e:	7ffb      	ldrb	r3, [r7, #31]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d148      	bne.n	800dda6 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dd1a:	68bb      	ldr	r3, [r7, #8]
 800dd1c:	005b      	lsls	r3, r3, #1
 800dd1e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800dd22:	4413      	add	r3, r2
 800dd24:	687a      	ldr	r2, [r7, #4]
 800dd26:	b292      	uxth	r2, r2
 800dd28:	4611      	mov	r1, r2
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	f7ff fb4d 	bl	800d3ca <st_word>
			fs->wflag = 1;
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	2201      	movs	r2, #1
 800dd34:	70da      	strb	r2, [r3, #3]
			break;
 800dd36:	e039      	b.n	800ddac <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dd3c:	68bb      	ldr	r3, [r7, #8]
 800dd3e:	09db      	lsrs	r3, r3, #7
 800dd40:	4413      	add	r3, r2
 800dd42:	4619      	mov	r1, r3
 800dd44:	68f8      	ldr	r0, [r7, #12]
 800dd46:	f7ff fde7 	bl	800d918 <move_window>
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dd4e:	7ffb      	ldrb	r3, [r7, #31]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d12a      	bne.n	800ddaa <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dd60:	68bb      	ldr	r3, [r7, #8]
 800dd62:	009b      	lsls	r3, r3, #2
 800dd64:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800dd68:	4413      	add	r3, r2
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	f7ff fb0a 	bl	800d384 <ld_dword>
 800dd70:	4603      	mov	r3, r0
 800dd72:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800dd76:	4323      	orrs	r3, r4
 800dd78:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dd80:	68bb      	ldr	r3, [r7, #8]
 800dd82:	009b      	lsls	r3, r3, #2
 800dd84:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800dd88:	4413      	add	r3, r2
 800dd8a:	6879      	ldr	r1, [r7, #4]
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	f7ff fb37 	bl	800d400 <st_dword>
			fs->wflag = 1;
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	2201      	movs	r2, #1
 800dd96:	70da      	strb	r2, [r3, #3]
			break;
 800dd98:	e008      	b.n	800ddac <put_fat+0x1ce>
		}
	}
 800dd9a:	bf00      	nop
 800dd9c:	e006      	b.n	800ddac <put_fat+0x1ce>
			if (res != FR_OK) break;
 800dd9e:	bf00      	nop
 800dda0:	e004      	b.n	800ddac <put_fat+0x1ce>
			if (res != FR_OK) break;
 800dda2:	bf00      	nop
 800dda4:	e002      	b.n	800ddac <put_fat+0x1ce>
			if (res != FR_OK) break;
 800dda6:	bf00      	nop
 800dda8:	e000      	b.n	800ddac <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ddaa:	bf00      	nop
	return res;
 800ddac:	7ffb      	ldrb	r3, [r7, #31]
}
 800ddae:	4618      	mov	r0, r3
 800ddb0:	3724      	adds	r7, #36	; 0x24
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bd90      	pop	{r4, r7, pc}

0800ddb6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ddb6:	b580      	push	{r7, lr}
 800ddb8:	b088      	sub	sp, #32
 800ddba:	af00      	add	r7, sp, #0
 800ddbc:	60f8      	str	r0, [r7, #12]
 800ddbe:	60b9      	str	r1, [r7, #8]
 800ddc0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ddcc:	68bb      	ldr	r3, [r7, #8]
 800ddce:	2b01      	cmp	r3, #1
 800ddd0:	d904      	bls.n	800dddc <remove_chain+0x26>
 800ddd2:	69bb      	ldr	r3, [r7, #24]
 800ddd4:	699b      	ldr	r3, [r3, #24]
 800ddd6:	68ba      	ldr	r2, [r7, #8]
 800ddd8:	429a      	cmp	r2, r3
 800ddda:	d301      	bcc.n	800dde0 <remove_chain+0x2a>
 800dddc:	2302      	movs	r3, #2
 800ddde:	e04b      	b.n	800de78 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d00c      	beq.n	800de00 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800dde6:	f04f 32ff 	mov.w	r2, #4294967295
 800ddea:	6879      	ldr	r1, [r7, #4]
 800ddec:	69b8      	ldr	r0, [r7, #24]
 800ddee:	f7ff fef6 	bl	800dbde <put_fat>
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ddf6:	7ffb      	ldrb	r3, [r7, #31]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d001      	beq.n	800de00 <remove_chain+0x4a>
 800ddfc:	7ffb      	ldrb	r3, [r7, #31]
 800ddfe:	e03b      	b.n	800de78 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800de00:	68b9      	ldr	r1, [r7, #8]
 800de02:	68f8      	ldr	r0, [r7, #12]
 800de04:	f7ff fe43 	bl	800da8e <get_fat>
 800de08:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800de0a:	697b      	ldr	r3, [r7, #20]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d031      	beq.n	800de74 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800de10:	697b      	ldr	r3, [r7, #20]
 800de12:	2b01      	cmp	r3, #1
 800de14:	d101      	bne.n	800de1a <remove_chain+0x64>
 800de16:	2302      	movs	r3, #2
 800de18:	e02e      	b.n	800de78 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800de1a:	697b      	ldr	r3, [r7, #20]
 800de1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de20:	d101      	bne.n	800de26 <remove_chain+0x70>
 800de22:	2301      	movs	r3, #1
 800de24:	e028      	b.n	800de78 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800de26:	2200      	movs	r2, #0
 800de28:	68b9      	ldr	r1, [r7, #8]
 800de2a:	69b8      	ldr	r0, [r7, #24]
 800de2c:	f7ff fed7 	bl	800dbde <put_fat>
 800de30:	4603      	mov	r3, r0
 800de32:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800de34:	7ffb      	ldrb	r3, [r7, #31]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d001      	beq.n	800de3e <remove_chain+0x88>
 800de3a:	7ffb      	ldrb	r3, [r7, #31]
 800de3c:	e01c      	b.n	800de78 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800de3e:	69bb      	ldr	r3, [r7, #24]
 800de40:	695a      	ldr	r2, [r3, #20]
 800de42:	69bb      	ldr	r3, [r7, #24]
 800de44:	699b      	ldr	r3, [r3, #24]
 800de46:	3b02      	subs	r3, #2
 800de48:	429a      	cmp	r2, r3
 800de4a:	d20b      	bcs.n	800de64 <remove_chain+0xae>
			fs->free_clst++;
 800de4c:	69bb      	ldr	r3, [r7, #24]
 800de4e:	695b      	ldr	r3, [r3, #20]
 800de50:	1c5a      	adds	r2, r3, #1
 800de52:	69bb      	ldr	r3, [r7, #24]
 800de54:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800de56:	69bb      	ldr	r3, [r7, #24]
 800de58:	791b      	ldrb	r3, [r3, #4]
 800de5a:	f043 0301 	orr.w	r3, r3, #1
 800de5e:	b2da      	uxtb	r2, r3
 800de60:	69bb      	ldr	r3, [r7, #24]
 800de62:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800de64:	697b      	ldr	r3, [r7, #20]
 800de66:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800de68:	69bb      	ldr	r3, [r7, #24]
 800de6a:	699b      	ldr	r3, [r3, #24]
 800de6c:	68ba      	ldr	r2, [r7, #8]
 800de6e:	429a      	cmp	r2, r3
 800de70:	d3c6      	bcc.n	800de00 <remove_chain+0x4a>
 800de72:	e000      	b.n	800de76 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800de74:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800de76:	2300      	movs	r3, #0
}
 800de78:	4618      	mov	r0, r3
 800de7a:	3720      	adds	r7, #32
 800de7c:	46bd      	mov	sp, r7
 800de7e:	bd80      	pop	{r7, pc}

0800de80 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b088      	sub	sp, #32
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
 800de88:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800de90:	683b      	ldr	r3, [r7, #0]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d10d      	bne.n	800deb2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800de96:	693b      	ldr	r3, [r7, #16]
 800de98:	691b      	ldr	r3, [r3, #16]
 800de9a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800de9c:	69bb      	ldr	r3, [r7, #24]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d004      	beq.n	800deac <create_chain+0x2c>
 800dea2:	693b      	ldr	r3, [r7, #16]
 800dea4:	699b      	ldr	r3, [r3, #24]
 800dea6:	69ba      	ldr	r2, [r7, #24]
 800dea8:	429a      	cmp	r2, r3
 800deaa:	d31b      	bcc.n	800dee4 <create_chain+0x64>
 800deac:	2301      	movs	r3, #1
 800deae:	61bb      	str	r3, [r7, #24]
 800deb0:	e018      	b.n	800dee4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800deb2:	6839      	ldr	r1, [r7, #0]
 800deb4:	6878      	ldr	r0, [r7, #4]
 800deb6:	f7ff fdea 	bl	800da8e <get_fat>
 800deba:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	2b01      	cmp	r3, #1
 800dec0:	d801      	bhi.n	800dec6 <create_chain+0x46>
 800dec2:	2301      	movs	r3, #1
 800dec4:	e070      	b.n	800dfa8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800decc:	d101      	bne.n	800ded2 <create_chain+0x52>
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	e06a      	b.n	800dfa8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ded2:	693b      	ldr	r3, [r7, #16]
 800ded4:	699b      	ldr	r3, [r3, #24]
 800ded6:	68fa      	ldr	r2, [r7, #12]
 800ded8:	429a      	cmp	r2, r3
 800deda:	d201      	bcs.n	800dee0 <create_chain+0x60>
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	e063      	b.n	800dfa8 <create_chain+0x128>
		scl = clst;
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800dee4:	69bb      	ldr	r3, [r7, #24]
 800dee6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800dee8:	69fb      	ldr	r3, [r7, #28]
 800deea:	3301      	adds	r3, #1
 800deec:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800deee:	693b      	ldr	r3, [r7, #16]
 800def0:	699b      	ldr	r3, [r3, #24]
 800def2:	69fa      	ldr	r2, [r7, #28]
 800def4:	429a      	cmp	r2, r3
 800def6:	d307      	bcc.n	800df08 <create_chain+0x88>
				ncl = 2;
 800def8:	2302      	movs	r3, #2
 800defa:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800defc:	69fa      	ldr	r2, [r7, #28]
 800defe:	69bb      	ldr	r3, [r7, #24]
 800df00:	429a      	cmp	r2, r3
 800df02:	d901      	bls.n	800df08 <create_chain+0x88>
 800df04:	2300      	movs	r3, #0
 800df06:	e04f      	b.n	800dfa8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800df08:	69f9      	ldr	r1, [r7, #28]
 800df0a:	6878      	ldr	r0, [r7, #4]
 800df0c:	f7ff fdbf 	bl	800da8e <get_fat>
 800df10:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d00e      	beq.n	800df36 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	2b01      	cmp	r3, #1
 800df1c:	d003      	beq.n	800df26 <create_chain+0xa6>
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df24:	d101      	bne.n	800df2a <create_chain+0xaa>
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	e03e      	b.n	800dfa8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800df2a:	69fa      	ldr	r2, [r7, #28]
 800df2c:	69bb      	ldr	r3, [r7, #24]
 800df2e:	429a      	cmp	r2, r3
 800df30:	d1da      	bne.n	800dee8 <create_chain+0x68>
 800df32:	2300      	movs	r3, #0
 800df34:	e038      	b.n	800dfa8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800df36:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800df38:	f04f 32ff 	mov.w	r2, #4294967295
 800df3c:	69f9      	ldr	r1, [r7, #28]
 800df3e:	6938      	ldr	r0, [r7, #16]
 800df40:	f7ff fe4d 	bl	800dbde <put_fat>
 800df44:	4603      	mov	r3, r0
 800df46:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800df48:	7dfb      	ldrb	r3, [r7, #23]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d109      	bne.n	800df62 <create_chain+0xe2>
 800df4e:	683b      	ldr	r3, [r7, #0]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d006      	beq.n	800df62 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800df54:	69fa      	ldr	r2, [r7, #28]
 800df56:	6839      	ldr	r1, [r7, #0]
 800df58:	6938      	ldr	r0, [r7, #16]
 800df5a:	f7ff fe40 	bl	800dbde <put_fat>
 800df5e:	4603      	mov	r3, r0
 800df60:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800df62:	7dfb      	ldrb	r3, [r7, #23]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d116      	bne.n	800df96 <create_chain+0x116>
		fs->last_clst = ncl;
 800df68:	693b      	ldr	r3, [r7, #16]
 800df6a:	69fa      	ldr	r2, [r7, #28]
 800df6c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800df6e:	693b      	ldr	r3, [r7, #16]
 800df70:	695a      	ldr	r2, [r3, #20]
 800df72:	693b      	ldr	r3, [r7, #16]
 800df74:	699b      	ldr	r3, [r3, #24]
 800df76:	3b02      	subs	r3, #2
 800df78:	429a      	cmp	r2, r3
 800df7a:	d804      	bhi.n	800df86 <create_chain+0x106>
 800df7c:	693b      	ldr	r3, [r7, #16]
 800df7e:	695b      	ldr	r3, [r3, #20]
 800df80:	1e5a      	subs	r2, r3, #1
 800df82:	693b      	ldr	r3, [r7, #16]
 800df84:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800df86:	693b      	ldr	r3, [r7, #16]
 800df88:	791b      	ldrb	r3, [r3, #4]
 800df8a:	f043 0301 	orr.w	r3, r3, #1
 800df8e:	b2da      	uxtb	r2, r3
 800df90:	693b      	ldr	r3, [r7, #16]
 800df92:	711a      	strb	r2, [r3, #4]
 800df94:	e007      	b.n	800dfa6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800df96:	7dfb      	ldrb	r3, [r7, #23]
 800df98:	2b01      	cmp	r3, #1
 800df9a:	d102      	bne.n	800dfa2 <create_chain+0x122>
 800df9c:	f04f 33ff 	mov.w	r3, #4294967295
 800dfa0:	e000      	b.n	800dfa4 <create_chain+0x124>
 800dfa2:	2301      	movs	r3, #1
 800dfa4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800dfa6:	69fb      	ldr	r3, [r7, #28]
}
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	3720      	adds	r7, #32
 800dfac:	46bd      	mov	sp, r7
 800dfae:	bd80      	pop	{r7, pc}

0800dfb0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800dfb0:	b480      	push	{r7}
 800dfb2:	b087      	sub	sp, #28
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
 800dfb8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfc4:	3304      	adds	r3, #4
 800dfc6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800dfc8:	683b      	ldr	r3, [r7, #0]
 800dfca:	0a5b      	lsrs	r3, r3, #9
 800dfcc:	68fa      	ldr	r2, [r7, #12]
 800dfce:	8952      	ldrh	r2, [r2, #10]
 800dfd0:	fbb3 f3f2 	udiv	r3, r3, r2
 800dfd4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dfd6:	693b      	ldr	r3, [r7, #16]
 800dfd8:	1d1a      	adds	r2, r3, #4
 800dfda:	613a      	str	r2, [r7, #16]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800dfe0:	68bb      	ldr	r3, [r7, #8]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d101      	bne.n	800dfea <clmt_clust+0x3a>
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	e010      	b.n	800e00c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800dfea:	697a      	ldr	r2, [r7, #20]
 800dfec:	68bb      	ldr	r3, [r7, #8]
 800dfee:	429a      	cmp	r2, r3
 800dff0:	d307      	bcc.n	800e002 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800dff2:	697a      	ldr	r2, [r7, #20]
 800dff4:	68bb      	ldr	r3, [r7, #8]
 800dff6:	1ad3      	subs	r3, r2, r3
 800dff8:	617b      	str	r3, [r7, #20]
 800dffa:	693b      	ldr	r3, [r7, #16]
 800dffc:	3304      	adds	r3, #4
 800dffe:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e000:	e7e9      	b.n	800dfd6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800e002:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e004:	693b      	ldr	r3, [r7, #16]
 800e006:	681a      	ldr	r2, [r3, #0]
 800e008:	697b      	ldr	r3, [r7, #20]
 800e00a:	4413      	add	r3, r2
}
 800e00c:	4618      	mov	r0, r3
 800e00e:	371c      	adds	r7, #28
 800e010:	46bd      	mov	sp, r7
 800e012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e016:	4770      	bx	lr

0800e018 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	b086      	sub	sp, #24
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
 800e020:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e02e:	d204      	bcs.n	800e03a <dir_sdi+0x22>
 800e030:	683b      	ldr	r3, [r7, #0]
 800e032:	f003 031f 	and.w	r3, r3, #31
 800e036:	2b00      	cmp	r3, #0
 800e038:	d001      	beq.n	800e03e <dir_sdi+0x26>
		return FR_INT_ERR;
 800e03a:	2302      	movs	r3, #2
 800e03c:	e063      	b.n	800e106 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	683a      	ldr	r2, [r7, #0]
 800e042:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	689b      	ldr	r3, [r3, #8]
 800e048:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e04a:	697b      	ldr	r3, [r7, #20]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d106      	bne.n	800e05e <dir_sdi+0x46>
 800e050:	693b      	ldr	r3, [r7, #16]
 800e052:	781b      	ldrb	r3, [r3, #0]
 800e054:	2b02      	cmp	r3, #2
 800e056:	d902      	bls.n	800e05e <dir_sdi+0x46>
		clst = fs->dirbase;
 800e058:	693b      	ldr	r3, [r7, #16]
 800e05a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e05c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e05e:	697b      	ldr	r3, [r7, #20]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d10c      	bne.n	800e07e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e064:	683b      	ldr	r3, [r7, #0]
 800e066:	095b      	lsrs	r3, r3, #5
 800e068:	693a      	ldr	r2, [r7, #16]
 800e06a:	8912      	ldrh	r2, [r2, #8]
 800e06c:	4293      	cmp	r3, r2
 800e06e:	d301      	bcc.n	800e074 <dir_sdi+0x5c>
 800e070:	2302      	movs	r3, #2
 800e072:	e048      	b.n	800e106 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800e074:	693b      	ldr	r3, [r7, #16]
 800e076:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	61da      	str	r2, [r3, #28]
 800e07c:	e029      	b.n	800e0d2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e07e:	693b      	ldr	r3, [r7, #16]
 800e080:	895b      	ldrh	r3, [r3, #10]
 800e082:	025b      	lsls	r3, r3, #9
 800e084:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e086:	e019      	b.n	800e0bc <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	6979      	ldr	r1, [r7, #20]
 800e08c:	4618      	mov	r0, r3
 800e08e:	f7ff fcfe 	bl	800da8e <get_fat>
 800e092:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e094:	697b      	ldr	r3, [r7, #20]
 800e096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e09a:	d101      	bne.n	800e0a0 <dir_sdi+0x88>
 800e09c:	2301      	movs	r3, #1
 800e09e:	e032      	b.n	800e106 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e0a0:	697b      	ldr	r3, [r7, #20]
 800e0a2:	2b01      	cmp	r3, #1
 800e0a4:	d904      	bls.n	800e0b0 <dir_sdi+0x98>
 800e0a6:	693b      	ldr	r3, [r7, #16]
 800e0a8:	699b      	ldr	r3, [r3, #24]
 800e0aa:	697a      	ldr	r2, [r7, #20]
 800e0ac:	429a      	cmp	r2, r3
 800e0ae:	d301      	bcc.n	800e0b4 <dir_sdi+0x9c>
 800e0b0:	2302      	movs	r3, #2
 800e0b2:	e028      	b.n	800e106 <dir_sdi+0xee>
			ofs -= csz;
 800e0b4:	683a      	ldr	r2, [r7, #0]
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	1ad3      	subs	r3, r2, r3
 800e0ba:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e0bc:	683a      	ldr	r2, [r7, #0]
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	429a      	cmp	r2, r3
 800e0c2:	d2e1      	bcs.n	800e088 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800e0c4:	6979      	ldr	r1, [r7, #20]
 800e0c6:	6938      	ldr	r0, [r7, #16]
 800e0c8:	f7ff fcc2 	bl	800da50 <clust2sect>
 800e0cc:	4602      	mov	r2, r0
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	697a      	ldr	r2, [r7, #20]
 800e0d6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	69db      	ldr	r3, [r3, #28]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d101      	bne.n	800e0e4 <dir_sdi+0xcc>
 800e0e0:	2302      	movs	r3, #2
 800e0e2:	e010      	b.n	800e106 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	69da      	ldr	r2, [r3, #28]
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	0a5b      	lsrs	r3, r3, #9
 800e0ec:	441a      	add	r2, r3
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e0f2:	693b      	ldr	r3, [r7, #16]
 800e0f4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e0fe:	441a      	add	r2, r3
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e104:	2300      	movs	r3, #0
}
 800e106:	4618      	mov	r0, r3
 800e108:	3718      	adds	r7, #24
 800e10a:	46bd      	mov	sp, r7
 800e10c:	bd80      	pop	{r7, pc}

0800e10e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e10e:	b580      	push	{r7, lr}
 800e110:	b086      	sub	sp, #24
 800e112:	af00      	add	r7, sp, #0
 800e114:	6078      	str	r0, [r7, #4]
 800e116:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	695b      	ldr	r3, [r3, #20]
 800e122:	3320      	adds	r3, #32
 800e124:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	69db      	ldr	r3, [r3, #28]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d003      	beq.n	800e136 <dir_next+0x28>
 800e12e:	68bb      	ldr	r3, [r7, #8]
 800e130:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e134:	d301      	bcc.n	800e13a <dir_next+0x2c>
 800e136:	2304      	movs	r3, #4
 800e138:	e0aa      	b.n	800e290 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e13a:	68bb      	ldr	r3, [r7, #8]
 800e13c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e140:	2b00      	cmp	r3, #0
 800e142:	f040 8098 	bne.w	800e276 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	69db      	ldr	r3, [r3, #28]
 800e14a:	1c5a      	adds	r2, r3, #1
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	699b      	ldr	r3, [r3, #24]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d10b      	bne.n	800e170 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e158:	68bb      	ldr	r3, [r7, #8]
 800e15a:	095b      	lsrs	r3, r3, #5
 800e15c:	68fa      	ldr	r2, [r7, #12]
 800e15e:	8912      	ldrh	r2, [r2, #8]
 800e160:	4293      	cmp	r3, r2
 800e162:	f0c0 8088 	bcc.w	800e276 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	2200      	movs	r2, #0
 800e16a:	61da      	str	r2, [r3, #28]
 800e16c:	2304      	movs	r3, #4
 800e16e:	e08f      	b.n	800e290 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e170:	68bb      	ldr	r3, [r7, #8]
 800e172:	0a5b      	lsrs	r3, r3, #9
 800e174:	68fa      	ldr	r2, [r7, #12]
 800e176:	8952      	ldrh	r2, [r2, #10]
 800e178:	3a01      	subs	r2, #1
 800e17a:	4013      	ands	r3, r2
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d17a      	bne.n	800e276 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e180:	687a      	ldr	r2, [r7, #4]
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	699b      	ldr	r3, [r3, #24]
 800e186:	4619      	mov	r1, r3
 800e188:	4610      	mov	r0, r2
 800e18a:	f7ff fc80 	bl	800da8e <get_fat>
 800e18e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e190:	697b      	ldr	r3, [r7, #20]
 800e192:	2b01      	cmp	r3, #1
 800e194:	d801      	bhi.n	800e19a <dir_next+0x8c>
 800e196:	2302      	movs	r3, #2
 800e198:	e07a      	b.n	800e290 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e19a:	697b      	ldr	r3, [r7, #20]
 800e19c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1a0:	d101      	bne.n	800e1a6 <dir_next+0x98>
 800e1a2:	2301      	movs	r3, #1
 800e1a4:	e074      	b.n	800e290 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	699b      	ldr	r3, [r3, #24]
 800e1aa:	697a      	ldr	r2, [r7, #20]
 800e1ac:	429a      	cmp	r2, r3
 800e1ae:	d358      	bcc.n	800e262 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e1b0:	683b      	ldr	r3, [r7, #0]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d104      	bne.n	800e1c0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	61da      	str	r2, [r3, #28]
 800e1bc:	2304      	movs	r3, #4
 800e1be:	e067      	b.n	800e290 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e1c0:	687a      	ldr	r2, [r7, #4]
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	699b      	ldr	r3, [r3, #24]
 800e1c6:	4619      	mov	r1, r3
 800e1c8:	4610      	mov	r0, r2
 800e1ca:	f7ff fe59 	bl	800de80 <create_chain>
 800e1ce:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e1d0:	697b      	ldr	r3, [r7, #20]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d101      	bne.n	800e1da <dir_next+0xcc>
 800e1d6:	2307      	movs	r3, #7
 800e1d8:	e05a      	b.n	800e290 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e1da:	697b      	ldr	r3, [r7, #20]
 800e1dc:	2b01      	cmp	r3, #1
 800e1de:	d101      	bne.n	800e1e4 <dir_next+0xd6>
 800e1e0:	2302      	movs	r3, #2
 800e1e2:	e055      	b.n	800e290 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e1e4:	697b      	ldr	r3, [r7, #20]
 800e1e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1ea:	d101      	bne.n	800e1f0 <dir_next+0xe2>
 800e1ec:	2301      	movs	r3, #1
 800e1ee:	e04f      	b.n	800e290 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e1f0:	68f8      	ldr	r0, [r7, #12]
 800e1f2:	f7ff fb4d 	bl	800d890 <sync_window>
 800e1f6:	4603      	mov	r3, r0
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d001      	beq.n	800e200 <dir_next+0xf2>
 800e1fc:	2301      	movs	r3, #1
 800e1fe:	e047      	b.n	800e290 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	3334      	adds	r3, #52	; 0x34
 800e204:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e208:	2100      	movs	r1, #0
 800e20a:	4618      	mov	r0, r3
 800e20c:	f7ff f945 	bl	800d49a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e210:	2300      	movs	r3, #0
 800e212:	613b      	str	r3, [r7, #16]
 800e214:	6979      	ldr	r1, [r7, #20]
 800e216:	68f8      	ldr	r0, [r7, #12]
 800e218:	f7ff fc1a 	bl	800da50 <clust2sect>
 800e21c:	4602      	mov	r2, r0
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	631a      	str	r2, [r3, #48]	; 0x30
 800e222:	e012      	b.n	800e24a <dir_next+0x13c>
						fs->wflag = 1;
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	2201      	movs	r2, #1
 800e228:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e22a:	68f8      	ldr	r0, [r7, #12]
 800e22c:	f7ff fb30 	bl	800d890 <sync_window>
 800e230:	4603      	mov	r3, r0
 800e232:	2b00      	cmp	r3, #0
 800e234:	d001      	beq.n	800e23a <dir_next+0x12c>
 800e236:	2301      	movs	r3, #1
 800e238:	e02a      	b.n	800e290 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e23a:	693b      	ldr	r3, [r7, #16]
 800e23c:	3301      	adds	r3, #1
 800e23e:	613b      	str	r3, [r7, #16]
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e244:	1c5a      	adds	r2, r3, #1
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	631a      	str	r2, [r3, #48]	; 0x30
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	895b      	ldrh	r3, [r3, #10]
 800e24e:	461a      	mov	r2, r3
 800e250:	693b      	ldr	r3, [r7, #16]
 800e252:	4293      	cmp	r3, r2
 800e254:	d3e6      	bcc.n	800e224 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e25a:	693b      	ldr	r3, [r7, #16]
 800e25c:	1ad2      	subs	r2, r2, r3
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	697a      	ldr	r2, [r7, #20]
 800e266:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e268:	6979      	ldr	r1, [r7, #20]
 800e26a:	68f8      	ldr	r0, [r7, #12]
 800e26c:	f7ff fbf0 	bl	800da50 <clust2sect>
 800e270:	4602      	mov	r2, r0
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	68ba      	ldr	r2, [r7, #8]
 800e27a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e282:	68bb      	ldr	r3, [r7, #8]
 800e284:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e288:	441a      	add	r2, r3
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e28e:	2300      	movs	r3, #0
}
 800e290:	4618      	mov	r0, r3
 800e292:	3718      	adds	r7, #24
 800e294:	46bd      	mov	sp, r7
 800e296:	bd80      	pop	{r7, pc}

0800e298 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b086      	sub	sp, #24
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
 800e2a0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e2a8:	2100      	movs	r1, #0
 800e2aa:	6878      	ldr	r0, [r7, #4]
 800e2ac:	f7ff feb4 	bl	800e018 <dir_sdi>
 800e2b0:	4603      	mov	r3, r0
 800e2b2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e2b4:	7dfb      	ldrb	r3, [r7, #23]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d12b      	bne.n	800e312 <dir_alloc+0x7a>
		n = 0;
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	69db      	ldr	r3, [r3, #28]
 800e2c2:	4619      	mov	r1, r3
 800e2c4:	68f8      	ldr	r0, [r7, #12]
 800e2c6:	f7ff fb27 	bl	800d918 <move_window>
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e2ce:	7dfb      	ldrb	r3, [r7, #23]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d11d      	bne.n	800e310 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	6a1b      	ldr	r3, [r3, #32]
 800e2d8:	781b      	ldrb	r3, [r3, #0]
 800e2da:	2be5      	cmp	r3, #229	; 0xe5
 800e2dc:	d004      	beq.n	800e2e8 <dir_alloc+0x50>
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	6a1b      	ldr	r3, [r3, #32]
 800e2e2:	781b      	ldrb	r3, [r3, #0]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d107      	bne.n	800e2f8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e2e8:	693b      	ldr	r3, [r7, #16]
 800e2ea:	3301      	adds	r3, #1
 800e2ec:	613b      	str	r3, [r7, #16]
 800e2ee:	693a      	ldr	r2, [r7, #16]
 800e2f0:	683b      	ldr	r3, [r7, #0]
 800e2f2:	429a      	cmp	r2, r3
 800e2f4:	d102      	bne.n	800e2fc <dir_alloc+0x64>
 800e2f6:	e00c      	b.n	800e312 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e2fc:	2101      	movs	r1, #1
 800e2fe:	6878      	ldr	r0, [r7, #4]
 800e300:	f7ff ff05 	bl	800e10e <dir_next>
 800e304:	4603      	mov	r3, r0
 800e306:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e308:	7dfb      	ldrb	r3, [r7, #23]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d0d7      	beq.n	800e2be <dir_alloc+0x26>
 800e30e:	e000      	b.n	800e312 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e310:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e312:	7dfb      	ldrb	r3, [r7, #23]
 800e314:	2b04      	cmp	r3, #4
 800e316:	d101      	bne.n	800e31c <dir_alloc+0x84>
 800e318:	2307      	movs	r3, #7
 800e31a:	75fb      	strb	r3, [r7, #23]
	return res;
 800e31c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e31e:	4618      	mov	r0, r3
 800e320:	3718      	adds	r7, #24
 800e322:	46bd      	mov	sp, r7
 800e324:	bd80      	pop	{r7, pc}

0800e326 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e326:	b580      	push	{r7, lr}
 800e328:	b084      	sub	sp, #16
 800e32a:	af00      	add	r7, sp, #0
 800e32c:	6078      	str	r0, [r7, #4]
 800e32e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e330:	683b      	ldr	r3, [r7, #0]
 800e332:	331a      	adds	r3, #26
 800e334:	4618      	mov	r0, r3
 800e336:	f7ff f80d 	bl	800d354 <ld_word>
 800e33a:	4603      	mov	r3, r0
 800e33c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	781b      	ldrb	r3, [r3, #0]
 800e342:	2b03      	cmp	r3, #3
 800e344:	d109      	bne.n	800e35a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e346:	683b      	ldr	r3, [r7, #0]
 800e348:	3314      	adds	r3, #20
 800e34a:	4618      	mov	r0, r3
 800e34c:	f7ff f802 	bl	800d354 <ld_word>
 800e350:	4603      	mov	r3, r0
 800e352:	041b      	lsls	r3, r3, #16
 800e354:	68fa      	ldr	r2, [r7, #12]
 800e356:	4313      	orrs	r3, r2
 800e358:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e35a:	68fb      	ldr	r3, [r7, #12]
}
 800e35c:	4618      	mov	r0, r3
 800e35e:	3710      	adds	r7, #16
 800e360:	46bd      	mov	sp, r7
 800e362:	bd80      	pop	{r7, pc}

0800e364 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b084      	sub	sp, #16
 800e368:	af00      	add	r7, sp, #0
 800e36a:	60f8      	str	r0, [r7, #12]
 800e36c:	60b9      	str	r1, [r7, #8]
 800e36e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e370:	68bb      	ldr	r3, [r7, #8]
 800e372:	331a      	adds	r3, #26
 800e374:	687a      	ldr	r2, [r7, #4]
 800e376:	b292      	uxth	r2, r2
 800e378:	4611      	mov	r1, r2
 800e37a:	4618      	mov	r0, r3
 800e37c:	f7ff f825 	bl	800d3ca <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	781b      	ldrb	r3, [r3, #0]
 800e384:	2b03      	cmp	r3, #3
 800e386:	d109      	bne.n	800e39c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e388:	68bb      	ldr	r3, [r7, #8]
 800e38a:	f103 0214 	add.w	r2, r3, #20
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	0c1b      	lsrs	r3, r3, #16
 800e392:	b29b      	uxth	r3, r3
 800e394:	4619      	mov	r1, r3
 800e396:	4610      	mov	r0, r2
 800e398:	f7ff f817 	bl	800d3ca <st_word>
	}
}
 800e39c:	bf00      	nop
 800e39e:	3710      	adds	r7, #16
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	bd80      	pop	{r7, pc}

0800e3a4 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b086      	sub	sp, #24
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
 800e3ac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800e3ae:	2304      	movs	r3, #4
 800e3b0:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800e3b8:	e03c      	b.n	800e434 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	69db      	ldr	r3, [r3, #28]
 800e3be:	4619      	mov	r1, r3
 800e3c0:	6938      	ldr	r0, [r7, #16]
 800e3c2:	f7ff faa9 	bl	800d918 <move_window>
 800e3c6:	4603      	mov	r3, r0
 800e3c8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e3ca:	7dfb      	ldrb	r3, [r7, #23]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d136      	bne.n	800e43e <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	6a1b      	ldr	r3, [r3, #32]
 800e3d4:	781b      	ldrb	r3, [r3, #0]
 800e3d6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800e3d8:	7bfb      	ldrb	r3, [r7, #15]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d102      	bne.n	800e3e4 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800e3de:	2304      	movs	r3, #4
 800e3e0:	75fb      	strb	r3, [r7, #23]
 800e3e2:	e031      	b.n	800e448 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	6a1b      	ldr	r3, [r3, #32]
 800e3e8:	330b      	adds	r3, #11
 800e3ea:	781b      	ldrb	r3, [r3, #0]
 800e3ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e3f0:	73bb      	strb	r3, [r7, #14]
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	7bba      	ldrb	r2, [r7, #14]
 800e3f6:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800e3f8:	7bfb      	ldrb	r3, [r7, #15]
 800e3fa:	2be5      	cmp	r3, #229	; 0xe5
 800e3fc:	d011      	beq.n	800e422 <dir_read+0x7e>
 800e3fe:	7bfb      	ldrb	r3, [r7, #15]
 800e400:	2b2e      	cmp	r3, #46	; 0x2e
 800e402:	d00e      	beq.n	800e422 <dir_read+0x7e>
 800e404:	7bbb      	ldrb	r3, [r7, #14]
 800e406:	2b0f      	cmp	r3, #15
 800e408:	d00b      	beq.n	800e422 <dir_read+0x7e>
 800e40a:	7bbb      	ldrb	r3, [r7, #14]
 800e40c:	f023 0320 	bic.w	r3, r3, #32
 800e410:	2b08      	cmp	r3, #8
 800e412:	bf0c      	ite	eq
 800e414:	2301      	moveq	r3, #1
 800e416:	2300      	movne	r3, #0
 800e418:	b2db      	uxtb	r3, r3
 800e41a:	461a      	mov	r2, r3
 800e41c:	683b      	ldr	r3, [r7, #0]
 800e41e:	4293      	cmp	r3, r2
 800e420:	d00f      	beq.n	800e442 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800e422:	2100      	movs	r1, #0
 800e424:	6878      	ldr	r0, [r7, #4]
 800e426:	f7ff fe72 	bl	800e10e <dir_next>
 800e42a:	4603      	mov	r3, r0
 800e42c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e42e:	7dfb      	ldrb	r3, [r7, #23]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d108      	bne.n	800e446 <dir_read+0xa2>
	while (dp->sect) {
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	69db      	ldr	r3, [r3, #28]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d1be      	bne.n	800e3ba <dir_read+0x16>
 800e43c:	e004      	b.n	800e448 <dir_read+0xa4>
		if (res != FR_OK) break;
 800e43e:	bf00      	nop
 800e440:	e002      	b.n	800e448 <dir_read+0xa4>
				break;
 800e442:	bf00      	nop
 800e444:	e000      	b.n	800e448 <dir_read+0xa4>
		if (res != FR_OK) break;
 800e446:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800e448:	7dfb      	ldrb	r3, [r7, #23]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d002      	beq.n	800e454 <dir_read+0xb0>
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	2200      	movs	r2, #0
 800e452:	61da      	str	r2, [r3, #28]
	return res;
 800e454:	7dfb      	ldrb	r3, [r7, #23]
}
 800e456:	4618      	mov	r0, r3
 800e458:	3718      	adds	r7, #24
 800e45a:	46bd      	mov	sp, r7
 800e45c:	bd80      	pop	{r7, pc}

0800e45e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e45e:	b580      	push	{r7, lr}
 800e460:	b086      	sub	sp, #24
 800e462:	af00      	add	r7, sp, #0
 800e464:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e46c:	2100      	movs	r1, #0
 800e46e:	6878      	ldr	r0, [r7, #4]
 800e470:	f7ff fdd2 	bl	800e018 <dir_sdi>
 800e474:	4603      	mov	r3, r0
 800e476:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e478:	7dfb      	ldrb	r3, [r7, #23]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d001      	beq.n	800e482 <dir_find+0x24>
 800e47e:	7dfb      	ldrb	r3, [r7, #23]
 800e480:	e03e      	b.n	800e500 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	69db      	ldr	r3, [r3, #28]
 800e486:	4619      	mov	r1, r3
 800e488:	6938      	ldr	r0, [r7, #16]
 800e48a:	f7ff fa45 	bl	800d918 <move_window>
 800e48e:	4603      	mov	r3, r0
 800e490:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e492:	7dfb      	ldrb	r3, [r7, #23]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d12f      	bne.n	800e4f8 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	6a1b      	ldr	r3, [r3, #32]
 800e49c:	781b      	ldrb	r3, [r3, #0]
 800e49e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e4a0:	7bfb      	ldrb	r3, [r7, #15]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d102      	bne.n	800e4ac <dir_find+0x4e>
 800e4a6:	2304      	movs	r3, #4
 800e4a8:	75fb      	strb	r3, [r7, #23]
 800e4aa:	e028      	b.n	800e4fe <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	6a1b      	ldr	r3, [r3, #32]
 800e4b0:	330b      	adds	r3, #11
 800e4b2:	781b      	ldrb	r3, [r3, #0]
 800e4b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e4b8:	b2da      	uxtb	r2, r3
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	6a1b      	ldr	r3, [r3, #32]
 800e4c2:	330b      	adds	r3, #11
 800e4c4:	781b      	ldrb	r3, [r3, #0]
 800e4c6:	f003 0308 	and.w	r3, r3, #8
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d10a      	bne.n	800e4e4 <dir_find+0x86>
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	6a18      	ldr	r0, [r3, #32]
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	3324      	adds	r3, #36	; 0x24
 800e4d6:	220b      	movs	r2, #11
 800e4d8:	4619      	mov	r1, r3
 800e4da:	f7fe fff9 	bl	800d4d0 <mem_cmp>
 800e4de:	4603      	mov	r3, r0
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d00b      	beq.n	800e4fc <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e4e4:	2100      	movs	r1, #0
 800e4e6:	6878      	ldr	r0, [r7, #4]
 800e4e8:	f7ff fe11 	bl	800e10e <dir_next>
 800e4ec:	4603      	mov	r3, r0
 800e4ee:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e4f0:	7dfb      	ldrb	r3, [r7, #23]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d0c5      	beq.n	800e482 <dir_find+0x24>
 800e4f6:	e002      	b.n	800e4fe <dir_find+0xa0>
		if (res != FR_OK) break;
 800e4f8:	bf00      	nop
 800e4fa:	e000      	b.n	800e4fe <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e4fc:	bf00      	nop

	return res;
 800e4fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800e500:	4618      	mov	r0, r3
 800e502:	3718      	adds	r7, #24
 800e504:	46bd      	mov	sp, r7
 800e506:	bd80      	pop	{r7, pc}

0800e508 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e508:	b580      	push	{r7, lr}
 800e50a:	b084      	sub	sp, #16
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800e516:	2101      	movs	r1, #1
 800e518:	6878      	ldr	r0, [r7, #4]
 800e51a:	f7ff febd 	bl	800e298 <dir_alloc>
 800e51e:	4603      	mov	r3, r0
 800e520:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e522:	7bfb      	ldrb	r3, [r7, #15]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d11c      	bne.n	800e562 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	69db      	ldr	r3, [r3, #28]
 800e52c:	4619      	mov	r1, r3
 800e52e:	68b8      	ldr	r0, [r7, #8]
 800e530:	f7ff f9f2 	bl	800d918 <move_window>
 800e534:	4603      	mov	r3, r0
 800e536:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e538:	7bfb      	ldrb	r3, [r7, #15]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d111      	bne.n	800e562 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	6a1b      	ldr	r3, [r3, #32]
 800e542:	2220      	movs	r2, #32
 800e544:	2100      	movs	r1, #0
 800e546:	4618      	mov	r0, r3
 800e548:	f7fe ffa7 	bl	800d49a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	6a18      	ldr	r0, [r3, #32]
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	3324      	adds	r3, #36	; 0x24
 800e554:	220b      	movs	r2, #11
 800e556:	4619      	mov	r1, r3
 800e558:	f7fe ff7e 	bl	800d458 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800e55c:	68bb      	ldr	r3, [r7, #8]
 800e55e:	2201      	movs	r2, #1
 800e560:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e562:	7bfb      	ldrb	r3, [r7, #15]
}
 800e564:	4618      	mov	r0, r3
 800e566:	3710      	adds	r7, #16
 800e568:	46bd      	mov	sp, r7
 800e56a:	bd80      	pop	{r7, pc}

0800e56c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b086      	sub	sp, #24
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
 800e574:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800e576:	683b      	ldr	r3, [r7, #0]
 800e578:	2200      	movs	r2, #0
 800e57a:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	69db      	ldr	r3, [r3, #28]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d04e      	beq.n	800e622 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800e584:	2300      	movs	r3, #0
 800e586:	613b      	str	r3, [r7, #16]
 800e588:	693b      	ldr	r3, [r7, #16]
 800e58a:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800e58c:	e021      	b.n	800e5d2 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	6a1a      	ldr	r2, [r3, #32]
 800e592:	697b      	ldr	r3, [r7, #20]
 800e594:	1c59      	adds	r1, r3, #1
 800e596:	6179      	str	r1, [r7, #20]
 800e598:	4413      	add	r3, r2
 800e59a:	781b      	ldrb	r3, [r3, #0]
 800e59c:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800e59e:	7bfb      	ldrb	r3, [r7, #15]
 800e5a0:	2b20      	cmp	r3, #32
 800e5a2:	d100      	bne.n	800e5a6 <get_fileinfo+0x3a>
 800e5a4:	e015      	b.n	800e5d2 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800e5a6:	7bfb      	ldrb	r3, [r7, #15]
 800e5a8:	2b05      	cmp	r3, #5
 800e5aa:	d101      	bne.n	800e5b0 <get_fileinfo+0x44>
 800e5ac:	23e5      	movs	r3, #229	; 0xe5
 800e5ae:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800e5b0:	697b      	ldr	r3, [r7, #20]
 800e5b2:	2b09      	cmp	r3, #9
 800e5b4:	d106      	bne.n	800e5c4 <get_fileinfo+0x58>
 800e5b6:	693b      	ldr	r3, [r7, #16]
 800e5b8:	1c5a      	adds	r2, r3, #1
 800e5ba:	613a      	str	r2, [r7, #16]
 800e5bc:	683a      	ldr	r2, [r7, #0]
 800e5be:	4413      	add	r3, r2
 800e5c0:	222e      	movs	r2, #46	; 0x2e
 800e5c2:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800e5c4:	693b      	ldr	r3, [r7, #16]
 800e5c6:	1c5a      	adds	r2, r3, #1
 800e5c8:	613a      	str	r2, [r7, #16]
 800e5ca:	683a      	ldr	r2, [r7, #0]
 800e5cc:	4413      	add	r3, r2
 800e5ce:	7bfa      	ldrb	r2, [r7, #15]
 800e5d0:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800e5d2:	697b      	ldr	r3, [r7, #20]
 800e5d4:	2b0a      	cmp	r3, #10
 800e5d6:	d9da      	bls.n	800e58e <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800e5d8:	683a      	ldr	r2, [r7, #0]
 800e5da:	693b      	ldr	r3, [r7, #16]
 800e5dc:	4413      	add	r3, r2
 800e5de:	3309      	adds	r3, #9
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	6a1b      	ldr	r3, [r3, #32]
 800e5e8:	7ada      	ldrb	r2, [r3, #11]
 800e5ea:	683b      	ldr	r3, [r7, #0]
 800e5ec:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	6a1b      	ldr	r3, [r3, #32]
 800e5f2:	331c      	adds	r3, #28
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	f7fe fec5 	bl	800d384 <ld_dword>
 800e5fa:	4602      	mov	r2, r0
 800e5fc:	683b      	ldr	r3, [r7, #0]
 800e5fe:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	6a1b      	ldr	r3, [r3, #32]
 800e604:	3316      	adds	r3, #22
 800e606:	4618      	mov	r0, r3
 800e608:	f7fe febc 	bl	800d384 <ld_dword>
 800e60c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800e60e:	68bb      	ldr	r3, [r7, #8]
 800e610:	b29a      	uxth	r2, r3
 800e612:	683b      	ldr	r3, [r7, #0]
 800e614:	80da      	strh	r2, [r3, #6]
 800e616:	68bb      	ldr	r3, [r7, #8]
 800e618:	0c1b      	lsrs	r3, r3, #16
 800e61a:	b29a      	uxth	r2, r3
 800e61c:	683b      	ldr	r3, [r7, #0]
 800e61e:	809a      	strh	r2, [r3, #4]
 800e620:	e000      	b.n	800e624 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e622:	bf00      	nop
}
 800e624:	3718      	adds	r7, #24
 800e626:	46bd      	mov	sp, r7
 800e628:	bd80      	pop	{r7, pc}
	...

0800e62c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b088      	sub	sp, #32
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
 800e634:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800e636:	683b      	ldr	r3, [r7, #0]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	60fb      	str	r3, [r7, #12]
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	3324      	adds	r3, #36	; 0x24
 800e640:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800e642:	220b      	movs	r2, #11
 800e644:	2120      	movs	r1, #32
 800e646:	68b8      	ldr	r0, [r7, #8]
 800e648:	f7fe ff27 	bl	800d49a <mem_set>
	si = i = 0; ni = 8;
 800e64c:	2300      	movs	r3, #0
 800e64e:	613b      	str	r3, [r7, #16]
 800e650:	693b      	ldr	r3, [r7, #16]
 800e652:	61fb      	str	r3, [r7, #28]
 800e654:	2308      	movs	r3, #8
 800e656:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800e658:	69fb      	ldr	r3, [r7, #28]
 800e65a:	1c5a      	adds	r2, r3, #1
 800e65c:	61fa      	str	r2, [r7, #28]
 800e65e:	68fa      	ldr	r2, [r7, #12]
 800e660:	4413      	add	r3, r2
 800e662:	781b      	ldrb	r3, [r3, #0]
 800e664:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e666:	7efb      	ldrb	r3, [r7, #27]
 800e668:	2b20      	cmp	r3, #32
 800e66a:	d94e      	bls.n	800e70a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800e66c:	7efb      	ldrb	r3, [r7, #27]
 800e66e:	2b2f      	cmp	r3, #47	; 0x2f
 800e670:	d006      	beq.n	800e680 <create_name+0x54>
 800e672:	7efb      	ldrb	r3, [r7, #27]
 800e674:	2b5c      	cmp	r3, #92	; 0x5c
 800e676:	d110      	bne.n	800e69a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e678:	e002      	b.n	800e680 <create_name+0x54>
 800e67a:	69fb      	ldr	r3, [r7, #28]
 800e67c:	3301      	adds	r3, #1
 800e67e:	61fb      	str	r3, [r7, #28]
 800e680:	68fa      	ldr	r2, [r7, #12]
 800e682:	69fb      	ldr	r3, [r7, #28]
 800e684:	4413      	add	r3, r2
 800e686:	781b      	ldrb	r3, [r3, #0]
 800e688:	2b2f      	cmp	r3, #47	; 0x2f
 800e68a:	d0f6      	beq.n	800e67a <create_name+0x4e>
 800e68c:	68fa      	ldr	r2, [r7, #12]
 800e68e:	69fb      	ldr	r3, [r7, #28]
 800e690:	4413      	add	r3, r2
 800e692:	781b      	ldrb	r3, [r3, #0]
 800e694:	2b5c      	cmp	r3, #92	; 0x5c
 800e696:	d0f0      	beq.n	800e67a <create_name+0x4e>
			break;
 800e698:	e038      	b.n	800e70c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800e69a:	7efb      	ldrb	r3, [r7, #27]
 800e69c:	2b2e      	cmp	r3, #46	; 0x2e
 800e69e:	d003      	beq.n	800e6a8 <create_name+0x7c>
 800e6a0:	693a      	ldr	r2, [r7, #16]
 800e6a2:	697b      	ldr	r3, [r7, #20]
 800e6a4:	429a      	cmp	r2, r3
 800e6a6:	d30c      	bcc.n	800e6c2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800e6a8:	697b      	ldr	r3, [r7, #20]
 800e6aa:	2b0b      	cmp	r3, #11
 800e6ac:	d002      	beq.n	800e6b4 <create_name+0x88>
 800e6ae:	7efb      	ldrb	r3, [r7, #27]
 800e6b0:	2b2e      	cmp	r3, #46	; 0x2e
 800e6b2:	d001      	beq.n	800e6b8 <create_name+0x8c>
 800e6b4:	2306      	movs	r3, #6
 800e6b6:	e044      	b.n	800e742 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800e6b8:	2308      	movs	r3, #8
 800e6ba:	613b      	str	r3, [r7, #16]
 800e6bc:	230b      	movs	r3, #11
 800e6be:	617b      	str	r3, [r7, #20]
			continue;
 800e6c0:	e022      	b.n	800e708 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800e6c2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	da04      	bge.n	800e6d4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800e6ca:	7efb      	ldrb	r3, [r7, #27]
 800e6cc:	3b80      	subs	r3, #128	; 0x80
 800e6ce:	4a1f      	ldr	r2, [pc, #124]	; (800e74c <create_name+0x120>)
 800e6d0:	5cd3      	ldrb	r3, [r2, r3]
 800e6d2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800e6d4:	7efb      	ldrb	r3, [r7, #27]
 800e6d6:	4619      	mov	r1, r3
 800e6d8:	481d      	ldr	r0, [pc, #116]	; (800e750 <create_name+0x124>)
 800e6da:	f7fe ff20 	bl	800d51e <chk_chr>
 800e6de:	4603      	mov	r3, r0
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d001      	beq.n	800e6e8 <create_name+0xbc>
 800e6e4:	2306      	movs	r3, #6
 800e6e6:	e02c      	b.n	800e742 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800e6e8:	7efb      	ldrb	r3, [r7, #27]
 800e6ea:	2b60      	cmp	r3, #96	; 0x60
 800e6ec:	d905      	bls.n	800e6fa <create_name+0xce>
 800e6ee:	7efb      	ldrb	r3, [r7, #27]
 800e6f0:	2b7a      	cmp	r3, #122	; 0x7a
 800e6f2:	d802      	bhi.n	800e6fa <create_name+0xce>
 800e6f4:	7efb      	ldrb	r3, [r7, #27]
 800e6f6:	3b20      	subs	r3, #32
 800e6f8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800e6fa:	693b      	ldr	r3, [r7, #16]
 800e6fc:	1c5a      	adds	r2, r3, #1
 800e6fe:	613a      	str	r2, [r7, #16]
 800e700:	68ba      	ldr	r2, [r7, #8]
 800e702:	4413      	add	r3, r2
 800e704:	7efa      	ldrb	r2, [r7, #27]
 800e706:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800e708:	e7a6      	b.n	800e658 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e70a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800e70c:	68fa      	ldr	r2, [r7, #12]
 800e70e:	69fb      	ldr	r3, [r7, #28]
 800e710:	441a      	add	r2, r3
 800e712:	683b      	ldr	r3, [r7, #0]
 800e714:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800e716:	693b      	ldr	r3, [r7, #16]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d101      	bne.n	800e720 <create_name+0xf4>
 800e71c:	2306      	movs	r3, #6
 800e71e:	e010      	b.n	800e742 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e720:	68bb      	ldr	r3, [r7, #8]
 800e722:	781b      	ldrb	r3, [r3, #0]
 800e724:	2be5      	cmp	r3, #229	; 0xe5
 800e726:	d102      	bne.n	800e72e <create_name+0x102>
 800e728:	68bb      	ldr	r3, [r7, #8]
 800e72a:	2205      	movs	r2, #5
 800e72c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e72e:	7efb      	ldrb	r3, [r7, #27]
 800e730:	2b20      	cmp	r3, #32
 800e732:	d801      	bhi.n	800e738 <create_name+0x10c>
 800e734:	2204      	movs	r2, #4
 800e736:	e000      	b.n	800e73a <create_name+0x10e>
 800e738:	2200      	movs	r2, #0
 800e73a:	68bb      	ldr	r3, [r7, #8]
 800e73c:	330b      	adds	r3, #11
 800e73e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800e740:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800e742:	4618      	mov	r0, r3
 800e744:	3720      	adds	r7, #32
 800e746:	46bd      	mov	sp, r7
 800e748:	bd80      	pop	{r7, pc}
 800e74a:	bf00      	nop
 800e74c:	08017ca8 	.word	0x08017ca8
 800e750:	08017c4c 	.word	0x08017c4c

0800e754 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b086      	sub	sp, #24
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
 800e75c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e762:	693b      	ldr	r3, [r7, #16]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e768:	e002      	b.n	800e770 <follow_path+0x1c>
 800e76a:	683b      	ldr	r3, [r7, #0]
 800e76c:	3301      	adds	r3, #1
 800e76e:	603b      	str	r3, [r7, #0]
 800e770:	683b      	ldr	r3, [r7, #0]
 800e772:	781b      	ldrb	r3, [r3, #0]
 800e774:	2b2f      	cmp	r3, #47	; 0x2f
 800e776:	d0f8      	beq.n	800e76a <follow_path+0x16>
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	781b      	ldrb	r3, [r3, #0]
 800e77c:	2b5c      	cmp	r3, #92	; 0x5c
 800e77e:	d0f4      	beq.n	800e76a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e780:	693b      	ldr	r3, [r7, #16]
 800e782:	2200      	movs	r2, #0
 800e784:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e786:	683b      	ldr	r3, [r7, #0]
 800e788:	781b      	ldrb	r3, [r3, #0]
 800e78a:	2b1f      	cmp	r3, #31
 800e78c:	d80a      	bhi.n	800e7a4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	2280      	movs	r2, #128	; 0x80
 800e792:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800e796:	2100      	movs	r1, #0
 800e798:	6878      	ldr	r0, [r7, #4]
 800e79a:	f7ff fc3d 	bl	800e018 <dir_sdi>
 800e79e:	4603      	mov	r3, r0
 800e7a0:	75fb      	strb	r3, [r7, #23]
 800e7a2:	e043      	b.n	800e82c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e7a4:	463b      	mov	r3, r7
 800e7a6:	4619      	mov	r1, r3
 800e7a8:	6878      	ldr	r0, [r7, #4]
 800e7aa:	f7ff ff3f 	bl	800e62c <create_name>
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e7b2:	7dfb      	ldrb	r3, [r7, #23]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d134      	bne.n	800e822 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e7b8:	6878      	ldr	r0, [r7, #4]
 800e7ba:	f7ff fe50 	bl	800e45e <dir_find>
 800e7be:	4603      	mov	r3, r0
 800e7c0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e7c8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e7ca:	7dfb      	ldrb	r3, [r7, #23]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d00a      	beq.n	800e7e6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e7d0:	7dfb      	ldrb	r3, [r7, #23]
 800e7d2:	2b04      	cmp	r3, #4
 800e7d4:	d127      	bne.n	800e826 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e7d6:	7afb      	ldrb	r3, [r7, #11]
 800e7d8:	f003 0304 	and.w	r3, r3, #4
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d122      	bne.n	800e826 <follow_path+0xd2>
 800e7e0:	2305      	movs	r3, #5
 800e7e2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e7e4:	e01f      	b.n	800e826 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e7e6:	7afb      	ldrb	r3, [r7, #11]
 800e7e8:	f003 0304 	and.w	r3, r3, #4
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d11c      	bne.n	800e82a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e7f0:	693b      	ldr	r3, [r7, #16]
 800e7f2:	799b      	ldrb	r3, [r3, #6]
 800e7f4:	f003 0310 	and.w	r3, r3, #16
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d102      	bne.n	800e802 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e7fc:	2305      	movs	r3, #5
 800e7fe:	75fb      	strb	r3, [r7, #23]
 800e800:	e014      	b.n	800e82c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	695b      	ldr	r3, [r3, #20]
 800e80c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e810:	4413      	add	r3, r2
 800e812:	4619      	mov	r1, r3
 800e814:	68f8      	ldr	r0, [r7, #12]
 800e816:	f7ff fd86 	bl	800e326 <ld_clust>
 800e81a:	4602      	mov	r2, r0
 800e81c:	693b      	ldr	r3, [r7, #16]
 800e81e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e820:	e7c0      	b.n	800e7a4 <follow_path+0x50>
			if (res != FR_OK) break;
 800e822:	bf00      	nop
 800e824:	e002      	b.n	800e82c <follow_path+0xd8>
				break;
 800e826:	bf00      	nop
 800e828:	e000      	b.n	800e82c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e82a:	bf00      	nop
			}
		}
	}

	return res;
 800e82c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e82e:	4618      	mov	r0, r3
 800e830:	3718      	adds	r7, #24
 800e832:	46bd      	mov	sp, r7
 800e834:	bd80      	pop	{r7, pc}

0800e836 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e836:	b480      	push	{r7}
 800e838:	b087      	sub	sp, #28
 800e83a:	af00      	add	r7, sp, #0
 800e83c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e83e:	f04f 33ff 	mov.w	r3, #4294967295
 800e842:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d031      	beq.n	800e8b0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	617b      	str	r3, [r7, #20]
 800e852:	e002      	b.n	800e85a <get_ldnumber+0x24>
 800e854:	697b      	ldr	r3, [r7, #20]
 800e856:	3301      	adds	r3, #1
 800e858:	617b      	str	r3, [r7, #20]
 800e85a:	697b      	ldr	r3, [r7, #20]
 800e85c:	781b      	ldrb	r3, [r3, #0]
 800e85e:	2b20      	cmp	r3, #32
 800e860:	d903      	bls.n	800e86a <get_ldnumber+0x34>
 800e862:	697b      	ldr	r3, [r7, #20]
 800e864:	781b      	ldrb	r3, [r3, #0]
 800e866:	2b3a      	cmp	r3, #58	; 0x3a
 800e868:	d1f4      	bne.n	800e854 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e86a:	697b      	ldr	r3, [r7, #20]
 800e86c:	781b      	ldrb	r3, [r3, #0]
 800e86e:	2b3a      	cmp	r3, #58	; 0x3a
 800e870:	d11c      	bne.n	800e8ac <get_ldnumber+0x76>
			tp = *path;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	1c5a      	adds	r2, r3, #1
 800e87c:	60fa      	str	r2, [r7, #12]
 800e87e:	781b      	ldrb	r3, [r3, #0]
 800e880:	3b30      	subs	r3, #48	; 0x30
 800e882:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e884:	68bb      	ldr	r3, [r7, #8]
 800e886:	2b09      	cmp	r3, #9
 800e888:	d80e      	bhi.n	800e8a8 <get_ldnumber+0x72>
 800e88a:	68fa      	ldr	r2, [r7, #12]
 800e88c:	697b      	ldr	r3, [r7, #20]
 800e88e:	429a      	cmp	r2, r3
 800e890:	d10a      	bne.n	800e8a8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e892:	68bb      	ldr	r3, [r7, #8]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d107      	bne.n	800e8a8 <get_ldnumber+0x72>
					vol = (int)i;
 800e898:	68bb      	ldr	r3, [r7, #8]
 800e89a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e89c:	697b      	ldr	r3, [r7, #20]
 800e89e:	3301      	adds	r3, #1
 800e8a0:	617b      	str	r3, [r7, #20]
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	697a      	ldr	r2, [r7, #20]
 800e8a6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e8a8:	693b      	ldr	r3, [r7, #16]
 800e8aa:	e002      	b.n	800e8b2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e8b0:	693b      	ldr	r3, [r7, #16]
}
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	371c      	adds	r7, #28
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8bc:	4770      	bx	lr
	...

0800e8c0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b082      	sub	sp, #8
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
 800e8c8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	2200      	movs	r2, #0
 800e8ce:	70da      	strb	r2, [r3, #3]
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	f04f 32ff 	mov.w	r2, #4294967295
 800e8d6:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e8d8:	6839      	ldr	r1, [r7, #0]
 800e8da:	6878      	ldr	r0, [r7, #4]
 800e8dc:	f7ff f81c 	bl	800d918 <move_window>
 800e8e0:	4603      	mov	r3, r0
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d001      	beq.n	800e8ea <check_fs+0x2a>
 800e8e6:	2304      	movs	r3, #4
 800e8e8:	e038      	b.n	800e95c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	3334      	adds	r3, #52	; 0x34
 800e8ee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	f7fe fd2e 	bl	800d354 <ld_word>
 800e8f8:	4603      	mov	r3, r0
 800e8fa:	461a      	mov	r2, r3
 800e8fc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e900:	429a      	cmp	r2, r3
 800e902:	d001      	beq.n	800e908 <check_fs+0x48>
 800e904:	2303      	movs	r3, #3
 800e906:	e029      	b.n	800e95c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e90e:	2be9      	cmp	r3, #233	; 0xe9
 800e910:	d009      	beq.n	800e926 <check_fs+0x66>
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e918:	2beb      	cmp	r3, #235	; 0xeb
 800e91a:	d11e      	bne.n	800e95a <check_fs+0x9a>
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800e922:	2b90      	cmp	r3, #144	; 0x90
 800e924:	d119      	bne.n	800e95a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	3334      	adds	r3, #52	; 0x34
 800e92a:	3336      	adds	r3, #54	; 0x36
 800e92c:	4618      	mov	r0, r3
 800e92e:	f7fe fd29 	bl	800d384 <ld_dword>
 800e932:	4603      	mov	r3, r0
 800e934:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e938:	4a0a      	ldr	r2, [pc, #40]	; (800e964 <check_fs+0xa4>)
 800e93a:	4293      	cmp	r3, r2
 800e93c:	d101      	bne.n	800e942 <check_fs+0x82>
 800e93e:	2300      	movs	r3, #0
 800e940:	e00c      	b.n	800e95c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	3334      	adds	r3, #52	; 0x34
 800e946:	3352      	adds	r3, #82	; 0x52
 800e948:	4618      	mov	r0, r3
 800e94a:	f7fe fd1b 	bl	800d384 <ld_dword>
 800e94e:	4603      	mov	r3, r0
 800e950:	4a05      	ldr	r2, [pc, #20]	; (800e968 <check_fs+0xa8>)
 800e952:	4293      	cmp	r3, r2
 800e954:	d101      	bne.n	800e95a <check_fs+0x9a>
 800e956:	2300      	movs	r3, #0
 800e958:	e000      	b.n	800e95c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e95a:	2302      	movs	r3, #2
}
 800e95c:	4618      	mov	r0, r3
 800e95e:	3708      	adds	r7, #8
 800e960:	46bd      	mov	sp, r7
 800e962:	bd80      	pop	{r7, pc}
 800e964:	00544146 	.word	0x00544146
 800e968:	33544146 	.word	0x33544146

0800e96c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b096      	sub	sp, #88	; 0x58
 800e970:	af00      	add	r7, sp, #0
 800e972:	60f8      	str	r0, [r7, #12]
 800e974:	60b9      	str	r1, [r7, #8]
 800e976:	4613      	mov	r3, r2
 800e978:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e97a:	68bb      	ldr	r3, [r7, #8]
 800e97c:	2200      	movs	r2, #0
 800e97e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e980:	68f8      	ldr	r0, [r7, #12]
 800e982:	f7ff ff58 	bl	800e836 <get_ldnumber>
 800e986:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	da01      	bge.n	800e992 <find_volume+0x26>
 800e98e:	230b      	movs	r3, #11
 800e990:	e236      	b.n	800ee00 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e992:	4aac      	ldr	r2, [pc, #688]	; (800ec44 <find_volume+0x2d8>)
 800e994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e99a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e99c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d101      	bne.n	800e9a6 <find_volume+0x3a>
 800e9a2:	230c      	movs	r3, #12
 800e9a4:	e22c      	b.n	800ee00 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 800e9a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e9a8:	f7fe fdd4 	bl	800d554 <lock_fs>
 800e9ac:	4603      	mov	r3, r0
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d101      	bne.n	800e9b6 <find_volume+0x4a>
 800e9b2:	230f      	movs	r3, #15
 800e9b4:	e224      	b.n	800ee00 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 800e9b6:	68bb      	ldr	r3, [r7, #8]
 800e9b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e9ba:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e9bc:	79fb      	ldrb	r3, [r7, #7]
 800e9be:	f023 0301 	bic.w	r3, r3, #1
 800e9c2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e9c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9c6:	781b      	ldrb	r3, [r3, #0]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d01a      	beq.n	800ea02 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800e9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9ce:	785b      	ldrb	r3, [r3, #1]
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	f7fe fc21 	bl	800d218 <disk_status>
 800e9d6:	4603      	mov	r3, r0
 800e9d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e9dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e9e0:	f003 0301 	and.w	r3, r3, #1
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d10c      	bne.n	800ea02 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e9e8:	79fb      	ldrb	r3, [r7, #7]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d007      	beq.n	800e9fe <find_volume+0x92>
 800e9ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e9f2:	f003 0304 	and.w	r3, r3, #4
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d001      	beq.n	800e9fe <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800e9fa:	230a      	movs	r3, #10
 800e9fc:	e200      	b.n	800ee00 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 800e9fe:	2300      	movs	r3, #0
 800ea00:	e1fe      	b.n	800ee00 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ea02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea04:	2200      	movs	r2, #0
 800ea06:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ea08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea0a:	b2da      	uxtb	r2, r3
 800ea0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea0e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ea10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea12:	785b      	ldrb	r3, [r3, #1]
 800ea14:	4618      	mov	r0, r3
 800ea16:	f7fe fc19 	bl	800d24c <disk_initialize>
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ea20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ea24:	f003 0301 	and.w	r3, r3, #1
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d001      	beq.n	800ea30 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ea2c:	2303      	movs	r3, #3
 800ea2e:	e1e7      	b.n	800ee00 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ea30:	79fb      	ldrb	r3, [r7, #7]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d007      	beq.n	800ea46 <find_volume+0xda>
 800ea36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ea3a:	f003 0304 	and.w	r3, r3, #4
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d001      	beq.n	800ea46 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800ea42:	230a      	movs	r3, #10
 800ea44:	e1dc      	b.n	800ee00 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ea46:	2300      	movs	r3, #0
 800ea48:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ea4a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ea4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ea4e:	f7ff ff37 	bl	800e8c0 <check_fs>
 800ea52:	4603      	mov	r3, r0
 800ea54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ea58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ea5c:	2b02      	cmp	r3, #2
 800ea5e:	d14b      	bne.n	800eaf8 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ea60:	2300      	movs	r3, #0
 800ea62:	643b      	str	r3, [r7, #64]	; 0x40
 800ea64:	e01f      	b.n	800eaa6 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ea66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea68:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ea6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea6e:	011b      	lsls	r3, r3, #4
 800ea70:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ea74:	4413      	add	r3, r2
 800ea76:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ea78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea7a:	3304      	adds	r3, #4
 800ea7c:	781b      	ldrb	r3, [r3, #0]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d006      	beq.n	800ea90 <find_volume+0x124>
 800ea82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea84:	3308      	adds	r3, #8
 800ea86:	4618      	mov	r0, r3
 800ea88:	f7fe fc7c 	bl	800d384 <ld_dword>
 800ea8c:	4602      	mov	r2, r0
 800ea8e:	e000      	b.n	800ea92 <find_volume+0x126>
 800ea90:	2200      	movs	r2, #0
 800ea92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea94:	009b      	lsls	r3, r3, #2
 800ea96:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800ea9a:	440b      	add	r3, r1
 800ea9c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800eaa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eaa2:	3301      	adds	r3, #1
 800eaa4:	643b      	str	r3, [r7, #64]	; 0x40
 800eaa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eaa8:	2b03      	cmp	r3, #3
 800eaaa:	d9dc      	bls.n	800ea66 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800eaac:	2300      	movs	r3, #0
 800eaae:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800eab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d002      	beq.n	800eabc <find_volume+0x150>
 800eab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eab8:	3b01      	subs	r3, #1
 800eaba:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800eabc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eabe:	009b      	lsls	r3, r3, #2
 800eac0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800eac4:	4413      	add	r3, r2
 800eac6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800eaca:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800eacc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d005      	beq.n	800eade <find_volume+0x172>
 800ead2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ead4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ead6:	f7ff fef3 	bl	800e8c0 <check_fs>
 800eada:	4603      	mov	r3, r0
 800eadc:	e000      	b.n	800eae0 <find_volume+0x174>
 800eade:	2303      	movs	r3, #3
 800eae0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800eae4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eae8:	2b01      	cmp	r3, #1
 800eaea:	d905      	bls.n	800eaf8 <find_volume+0x18c>
 800eaec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eaee:	3301      	adds	r3, #1
 800eaf0:	643b      	str	r3, [r7, #64]	; 0x40
 800eaf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eaf4:	2b03      	cmp	r3, #3
 800eaf6:	d9e1      	bls.n	800eabc <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800eaf8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eafc:	2b04      	cmp	r3, #4
 800eafe:	d101      	bne.n	800eb04 <find_volume+0x198>
 800eb00:	2301      	movs	r3, #1
 800eb02:	e17d      	b.n	800ee00 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800eb04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eb08:	2b01      	cmp	r3, #1
 800eb0a:	d901      	bls.n	800eb10 <find_volume+0x1a4>
 800eb0c:	230d      	movs	r3, #13
 800eb0e:	e177      	b.n	800ee00 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800eb10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb12:	3334      	adds	r3, #52	; 0x34
 800eb14:	330b      	adds	r3, #11
 800eb16:	4618      	mov	r0, r3
 800eb18:	f7fe fc1c 	bl	800d354 <ld_word>
 800eb1c:	4603      	mov	r3, r0
 800eb1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eb22:	d001      	beq.n	800eb28 <find_volume+0x1bc>
 800eb24:	230d      	movs	r3, #13
 800eb26:	e16b      	b.n	800ee00 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800eb28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb2a:	3334      	adds	r3, #52	; 0x34
 800eb2c:	3316      	adds	r3, #22
 800eb2e:	4618      	mov	r0, r3
 800eb30:	f7fe fc10 	bl	800d354 <ld_word>
 800eb34:	4603      	mov	r3, r0
 800eb36:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800eb38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d106      	bne.n	800eb4c <find_volume+0x1e0>
 800eb3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb40:	3334      	adds	r3, #52	; 0x34
 800eb42:	3324      	adds	r3, #36	; 0x24
 800eb44:	4618      	mov	r0, r3
 800eb46:	f7fe fc1d 	bl	800d384 <ld_dword>
 800eb4a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800eb4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800eb50:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800eb52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb54:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800eb58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb5a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800eb5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb5e:	789b      	ldrb	r3, [r3, #2]
 800eb60:	2b01      	cmp	r3, #1
 800eb62:	d005      	beq.n	800eb70 <find_volume+0x204>
 800eb64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb66:	789b      	ldrb	r3, [r3, #2]
 800eb68:	2b02      	cmp	r3, #2
 800eb6a:	d001      	beq.n	800eb70 <find_volume+0x204>
 800eb6c:	230d      	movs	r3, #13
 800eb6e:	e147      	b.n	800ee00 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800eb70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb72:	789b      	ldrb	r3, [r3, #2]
 800eb74:	461a      	mov	r2, r3
 800eb76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb78:	fb02 f303 	mul.w	r3, r2, r3
 800eb7c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800eb7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800eb84:	b29a      	uxth	r2, r3
 800eb86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb88:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800eb8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb8c:	895b      	ldrh	r3, [r3, #10]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d008      	beq.n	800eba4 <find_volume+0x238>
 800eb92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb94:	895b      	ldrh	r3, [r3, #10]
 800eb96:	461a      	mov	r2, r3
 800eb98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb9a:	895b      	ldrh	r3, [r3, #10]
 800eb9c:	3b01      	subs	r3, #1
 800eb9e:	4013      	ands	r3, r2
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d001      	beq.n	800eba8 <find_volume+0x23c>
 800eba4:	230d      	movs	r3, #13
 800eba6:	e12b      	b.n	800ee00 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800eba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebaa:	3334      	adds	r3, #52	; 0x34
 800ebac:	3311      	adds	r3, #17
 800ebae:	4618      	mov	r0, r3
 800ebb0:	f7fe fbd0 	bl	800d354 <ld_word>
 800ebb4:	4603      	mov	r3, r0
 800ebb6:	461a      	mov	r2, r3
 800ebb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebba:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ebbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebbe:	891b      	ldrh	r3, [r3, #8]
 800ebc0:	f003 030f 	and.w	r3, r3, #15
 800ebc4:	b29b      	uxth	r3, r3
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d001      	beq.n	800ebce <find_volume+0x262>
 800ebca:	230d      	movs	r3, #13
 800ebcc:	e118      	b.n	800ee00 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ebce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebd0:	3334      	adds	r3, #52	; 0x34
 800ebd2:	3313      	adds	r3, #19
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	f7fe fbbd 	bl	800d354 <ld_word>
 800ebda:	4603      	mov	r3, r0
 800ebdc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ebde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d106      	bne.n	800ebf2 <find_volume+0x286>
 800ebe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebe6:	3334      	adds	r3, #52	; 0x34
 800ebe8:	3320      	adds	r3, #32
 800ebea:	4618      	mov	r0, r3
 800ebec:	f7fe fbca 	bl	800d384 <ld_dword>
 800ebf0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ebf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebf4:	3334      	adds	r3, #52	; 0x34
 800ebf6:	330e      	adds	r3, #14
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	f7fe fbab 	bl	800d354 <ld_word>
 800ebfe:	4603      	mov	r3, r0
 800ec00:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ec02:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d101      	bne.n	800ec0c <find_volume+0x2a0>
 800ec08:	230d      	movs	r3, #13
 800ec0a:	e0f9      	b.n	800ee00 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ec0c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ec0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec10:	4413      	add	r3, r2
 800ec12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec14:	8912      	ldrh	r2, [r2, #8]
 800ec16:	0912      	lsrs	r2, r2, #4
 800ec18:	b292      	uxth	r2, r2
 800ec1a:	4413      	add	r3, r2
 800ec1c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ec1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ec20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec22:	429a      	cmp	r2, r3
 800ec24:	d201      	bcs.n	800ec2a <find_volume+0x2be>
 800ec26:	230d      	movs	r3, #13
 800ec28:	e0ea      	b.n	800ee00 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ec2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ec2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec2e:	1ad3      	subs	r3, r2, r3
 800ec30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec32:	8952      	ldrh	r2, [r2, #10]
 800ec34:	fbb3 f3f2 	udiv	r3, r3, r2
 800ec38:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ec3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d103      	bne.n	800ec48 <find_volume+0x2dc>
 800ec40:	230d      	movs	r3, #13
 800ec42:	e0dd      	b.n	800ee00 <find_volume+0x494>
 800ec44:	20000458 	.word	0x20000458
		fmt = FS_FAT32;
 800ec48:	2303      	movs	r3, #3
 800ec4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ec4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec50:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ec54:	4293      	cmp	r3, r2
 800ec56:	d802      	bhi.n	800ec5e <find_volume+0x2f2>
 800ec58:	2302      	movs	r3, #2
 800ec5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ec5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec60:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ec64:	4293      	cmp	r3, r2
 800ec66:	d802      	bhi.n	800ec6e <find_volume+0x302>
 800ec68:	2301      	movs	r3, #1
 800ec6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ec6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec70:	1c9a      	adds	r2, r3, #2
 800ec72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec74:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800ec76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec78:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ec7a:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ec7c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ec7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec80:	441a      	add	r2, r3
 800ec82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec84:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800ec86:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ec88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec8a:	441a      	add	r2, r3
 800ec8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec8e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800ec90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ec94:	2b03      	cmp	r3, #3
 800ec96:	d11e      	bne.n	800ecd6 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ec98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec9a:	3334      	adds	r3, #52	; 0x34
 800ec9c:	332a      	adds	r3, #42	; 0x2a
 800ec9e:	4618      	mov	r0, r3
 800eca0:	f7fe fb58 	bl	800d354 <ld_word>
 800eca4:	4603      	mov	r3, r0
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d001      	beq.n	800ecae <find_volume+0x342>
 800ecaa:	230d      	movs	r3, #13
 800ecac:	e0a8      	b.n	800ee00 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ecae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecb0:	891b      	ldrh	r3, [r3, #8]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d001      	beq.n	800ecba <find_volume+0x34e>
 800ecb6:	230d      	movs	r3, #13
 800ecb8:	e0a2      	b.n	800ee00 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ecba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecbc:	3334      	adds	r3, #52	; 0x34
 800ecbe:	332c      	adds	r3, #44	; 0x2c
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	f7fe fb5f 	bl	800d384 <ld_dword>
 800ecc6:	4602      	mov	r2, r0
 800ecc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecca:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800eccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecce:	699b      	ldr	r3, [r3, #24]
 800ecd0:	009b      	lsls	r3, r3, #2
 800ecd2:	647b      	str	r3, [r7, #68]	; 0x44
 800ecd4:	e01f      	b.n	800ed16 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ecd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecd8:	891b      	ldrh	r3, [r3, #8]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d101      	bne.n	800ece2 <find_volume+0x376>
 800ecde:	230d      	movs	r3, #13
 800ece0:	e08e      	b.n	800ee00 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ece2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ece4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ece6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ece8:	441a      	add	r2, r3
 800ecea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecec:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ecee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ecf2:	2b02      	cmp	r3, #2
 800ecf4:	d103      	bne.n	800ecfe <find_volume+0x392>
 800ecf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecf8:	699b      	ldr	r3, [r3, #24]
 800ecfa:	005b      	lsls	r3, r3, #1
 800ecfc:	e00a      	b.n	800ed14 <find_volume+0x3a8>
 800ecfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed00:	699a      	ldr	r2, [r3, #24]
 800ed02:	4613      	mov	r3, r2
 800ed04:	005b      	lsls	r3, r3, #1
 800ed06:	4413      	add	r3, r2
 800ed08:	085a      	lsrs	r2, r3, #1
 800ed0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed0c:	699b      	ldr	r3, [r3, #24]
 800ed0e:	f003 0301 	and.w	r3, r3, #1
 800ed12:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ed14:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ed16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed18:	69da      	ldr	r2, [r3, #28]
 800ed1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed1c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800ed20:	0a5b      	lsrs	r3, r3, #9
 800ed22:	429a      	cmp	r2, r3
 800ed24:	d201      	bcs.n	800ed2a <find_volume+0x3be>
 800ed26:	230d      	movs	r3, #13
 800ed28:	e06a      	b.n	800ee00 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ed2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed2c:	f04f 32ff 	mov.w	r2, #4294967295
 800ed30:	615a      	str	r2, [r3, #20]
 800ed32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed34:	695a      	ldr	r2, [r3, #20]
 800ed36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed38:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800ed3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed3c:	2280      	movs	r2, #128	; 0x80
 800ed3e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ed40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ed44:	2b03      	cmp	r3, #3
 800ed46:	d149      	bne.n	800eddc <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ed48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed4a:	3334      	adds	r3, #52	; 0x34
 800ed4c:	3330      	adds	r3, #48	; 0x30
 800ed4e:	4618      	mov	r0, r3
 800ed50:	f7fe fb00 	bl	800d354 <ld_word>
 800ed54:	4603      	mov	r3, r0
 800ed56:	2b01      	cmp	r3, #1
 800ed58:	d140      	bne.n	800eddc <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ed5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed5c:	3301      	adds	r3, #1
 800ed5e:	4619      	mov	r1, r3
 800ed60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ed62:	f7fe fdd9 	bl	800d918 <move_window>
 800ed66:	4603      	mov	r3, r0
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d137      	bne.n	800eddc <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 800ed6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed6e:	2200      	movs	r2, #0
 800ed70:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ed72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed74:	3334      	adds	r3, #52	; 0x34
 800ed76:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	f7fe faea 	bl	800d354 <ld_word>
 800ed80:	4603      	mov	r3, r0
 800ed82:	461a      	mov	r2, r3
 800ed84:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ed88:	429a      	cmp	r2, r3
 800ed8a:	d127      	bne.n	800eddc <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ed8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed8e:	3334      	adds	r3, #52	; 0x34
 800ed90:	4618      	mov	r0, r3
 800ed92:	f7fe faf7 	bl	800d384 <ld_dword>
 800ed96:	4603      	mov	r3, r0
 800ed98:	4a1b      	ldr	r2, [pc, #108]	; (800ee08 <find_volume+0x49c>)
 800ed9a:	4293      	cmp	r3, r2
 800ed9c:	d11e      	bne.n	800eddc <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ed9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eda0:	3334      	adds	r3, #52	; 0x34
 800eda2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800eda6:	4618      	mov	r0, r3
 800eda8:	f7fe faec 	bl	800d384 <ld_dword>
 800edac:	4603      	mov	r3, r0
 800edae:	4a17      	ldr	r2, [pc, #92]	; (800ee0c <find_volume+0x4a0>)
 800edb0:	4293      	cmp	r3, r2
 800edb2:	d113      	bne.n	800eddc <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800edb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edb6:	3334      	adds	r3, #52	; 0x34
 800edb8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800edbc:	4618      	mov	r0, r3
 800edbe:	f7fe fae1 	bl	800d384 <ld_dword>
 800edc2:	4602      	mov	r2, r0
 800edc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edc6:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800edc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edca:	3334      	adds	r3, #52	; 0x34
 800edcc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800edd0:	4618      	mov	r0, r3
 800edd2:	f7fe fad7 	bl	800d384 <ld_dword>
 800edd6:	4602      	mov	r2, r0
 800edd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edda:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800eddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edde:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ede2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ede4:	4b0a      	ldr	r3, [pc, #40]	; (800ee10 <find_volume+0x4a4>)
 800ede6:	881b      	ldrh	r3, [r3, #0]
 800ede8:	3301      	adds	r3, #1
 800edea:	b29a      	uxth	r2, r3
 800edec:	4b08      	ldr	r3, [pc, #32]	; (800ee10 <find_volume+0x4a4>)
 800edee:	801a      	strh	r2, [r3, #0]
 800edf0:	4b07      	ldr	r3, [pc, #28]	; (800ee10 <find_volume+0x4a4>)
 800edf2:	881a      	ldrh	r2, [r3, #0]
 800edf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edf6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800edf8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800edfa:	f7fe fd25 	bl	800d848 <clear_lock>
#endif
	return FR_OK;
 800edfe:	2300      	movs	r3, #0
}
 800ee00:	4618      	mov	r0, r3
 800ee02:	3758      	adds	r7, #88	; 0x58
 800ee04:	46bd      	mov	sp, r7
 800ee06:	bd80      	pop	{r7, pc}
 800ee08:	41615252 	.word	0x41615252
 800ee0c:	61417272 	.word	0x61417272
 800ee10:	2000045c 	.word	0x2000045c

0800ee14 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ee14:	b580      	push	{r7, lr}
 800ee16:	b084      	sub	sp, #16
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	6078      	str	r0, [r7, #4]
 800ee1c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ee1e:	2309      	movs	r3, #9
 800ee20:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d02e      	beq.n	800ee86 <validate+0x72>
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d02a      	beq.n	800ee86 <validate+0x72>
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	781b      	ldrb	r3, [r3, #0]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d025      	beq.n	800ee86 <validate+0x72>
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	889a      	ldrh	r2, [r3, #4]
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	88db      	ldrh	r3, [r3, #6]
 800ee44:	429a      	cmp	r2, r3
 800ee46:	d11e      	bne.n	800ee86 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	f7fe fb81 	bl	800d554 <lock_fs>
 800ee52:	4603      	mov	r3, r0
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d014      	beq.n	800ee82 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	785b      	ldrb	r3, [r3, #1]
 800ee5e:	4618      	mov	r0, r3
 800ee60:	f7fe f9da 	bl	800d218 <disk_status>
 800ee64:	4603      	mov	r3, r0
 800ee66:	f003 0301 	and.w	r3, r3, #1
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d102      	bne.n	800ee74 <validate+0x60>
				res = FR_OK;
 800ee6e:	2300      	movs	r3, #0
 800ee70:	73fb      	strb	r3, [r7, #15]
 800ee72:	e008      	b.n	800ee86 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	2100      	movs	r1, #0
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	f7fe fb80 	bl	800d580 <unlock_fs>
 800ee80:	e001      	b.n	800ee86 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800ee82:	230f      	movs	r3, #15
 800ee84:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ee86:	7bfb      	ldrb	r3, [r7, #15]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d102      	bne.n	800ee92 <validate+0x7e>
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	e000      	b.n	800ee94 <validate+0x80>
 800ee92:	2300      	movs	r3, #0
 800ee94:	683a      	ldr	r2, [r7, #0]
 800ee96:	6013      	str	r3, [r2, #0]
	return res;
 800ee98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	3710      	adds	r7, #16
 800ee9e:	46bd      	mov	sp, r7
 800eea0:	bd80      	pop	{r7, pc}
	...

0800eea4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b088      	sub	sp, #32
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	60f8      	str	r0, [r7, #12]
 800eeac:	60b9      	str	r1, [r7, #8]
 800eeae:	4613      	mov	r3, r2
 800eeb0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800eeb2:	68bb      	ldr	r3, [r7, #8]
 800eeb4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800eeb6:	f107 0310 	add.w	r3, r7, #16
 800eeba:	4618      	mov	r0, r3
 800eebc:	f7ff fcbb 	bl	800e836 <get_ldnumber>
 800eec0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800eec2:	69fb      	ldr	r3, [r7, #28]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	da01      	bge.n	800eecc <f_mount+0x28>
 800eec8:	230b      	movs	r3, #11
 800eeca:	e048      	b.n	800ef5e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800eecc:	4a26      	ldr	r2, [pc, #152]	; (800ef68 <f_mount+0xc4>)
 800eece:	69fb      	ldr	r3, [r7, #28]
 800eed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eed4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800eed6:	69bb      	ldr	r3, [r7, #24]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d00f      	beq.n	800eefc <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800eedc:	69b8      	ldr	r0, [r7, #24]
 800eede:	f7fe fcb3 	bl	800d848 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800eee2:	69bb      	ldr	r3, [r7, #24]
 800eee4:	68db      	ldr	r3, [r3, #12]
 800eee6:	4618      	mov	r0, r3
 800eee8:	f001 f812 	bl	800ff10 <ff_del_syncobj>
 800eeec:	4603      	mov	r3, r0
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d101      	bne.n	800eef6 <f_mount+0x52>
 800eef2:	2302      	movs	r3, #2
 800eef4:	e033      	b.n	800ef5e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800eef6:	69bb      	ldr	r3, [r7, #24]
 800eef8:	2200      	movs	r2, #0
 800eefa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d00f      	beq.n	800ef22 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	2200      	movs	r2, #0
 800ef06:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800ef08:	69fb      	ldr	r3, [r7, #28]
 800ef0a:	b2da      	uxtb	r2, r3
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	330c      	adds	r3, #12
 800ef10:	4619      	mov	r1, r3
 800ef12:	4610      	mov	r0, r2
 800ef14:	f000 ffe1 	bl	800feda <ff_cre_syncobj>
 800ef18:	4603      	mov	r3, r0
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d101      	bne.n	800ef22 <f_mount+0x7e>
 800ef1e:	2302      	movs	r3, #2
 800ef20:	e01d      	b.n	800ef5e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ef22:	68fa      	ldr	r2, [r7, #12]
 800ef24:	4910      	ldr	r1, [pc, #64]	; (800ef68 <f_mount+0xc4>)
 800ef26:	69fb      	ldr	r3, [r7, #28]
 800ef28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d002      	beq.n	800ef38 <f_mount+0x94>
 800ef32:	79fb      	ldrb	r3, [r7, #7]
 800ef34:	2b01      	cmp	r3, #1
 800ef36:	d001      	beq.n	800ef3c <f_mount+0x98>
 800ef38:	2300      	movs	r3, #0
 800ef3a:	e010      	b.n	800ef5e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ef3c:	f107 010c 	add.w	r1, r7, #12
 800ef40:	f107 0308 	add.w	r3, r7, #8
 800ef44:	2200      	movs	r2, #0
 800ef46:	4618      	mov	r0, r3
 800ef48:	f7ff fd10 	bl	800e96c <find_volume>
 800ef4c:	4603      	mov	r3, r0
 800ef4e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	7dfa      	ldrb	r2, [r7, #23]
 800ef54:	4611      	mov	r1, r2
 800ef56:	4618      	mov	r0, r3
 800ef58:	f7fe fb12 	bl	800d580 <unlock_fs>
 800ef5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef5e:	4618      	mov	r0, r3
 800ef60:	3720      	adds	r7, #32
 800ef62:	46bd      	mov	sp, r7
 800ef64:	bd80      	pop	{r7, pc}
 800ef66:	bf00      	nop
 800ef68:	20000458 	.word	0x20000458

0800ef6c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ef6c:	b580      	push	{r7, lr}
 800ef6e:	b098      	sub	sp, #96	; 0x60
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	60f8      	str	r0, [r7, #12]
 800ef74:	60b9      	str	r1, [r7, #8]
 800ef76:	4613      	mov	r3, r2
 800ef78:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d101      	bne.n	800ef84 <f_open+0x18>
 800ef80:	2309      	movs	r3, #9
 800ef82:	e1b4      	b.n	800f2ee <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ef84:	79fb      	ldrb	r3, [r7, #7]
 800ef86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ef8a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800ef8c:	79fa      	ldrb	r2, [r7, #7]
 800ef8e:	f107 0110 	add.w	r1, r7, #16
 800ef92:	f107 0308 	add.w	r3, r7, #8
 800ef96:	4618      	mov	r0, r3
 800ef98:	f7ff fce8 	bl	800e96c <find_volume>
 800ef9c:	4603      	mov	r3, r0
 800ef9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800efa2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	f040 8191 	bne.w	800f2ce <f_open+0x362>
		dj.obj.fs = fs;
 800efac:	693b      	ldr	r3, [r7, #16]
 800efae:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800efb0:	68ba      	ldr	r2, [r7, #8]
 800efb2:	f107 0314 	add.w	r3, r7, #20
 800efb6:	4611      	mov	r1, r2
 800efb8:	4618      	mov	r0, r3
 800efba:	f7ff fbcb 	bl	800e754 <follow_path>
 800efbe:	4603      	mov	r3, r0
 800efc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800efc4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d11a      	bne.n	800f002 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800efcc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800efd0:	b25b      	sxtb	r3, r3
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	da03      	bge.n	800efde <f_open+0x72>
				res = FR_INVALID_NAME;
 800efd6:	2306      	movs	r3, #6
 800efd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800efdc:	e011      	b.n	800f002 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800efde:	79fb      	ldrb	r3, [r7, #7]
 800efe0:	f023 0301 	bic.w	r3, r3, #1
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	bf14      	ite	ne
 800efe8:	2301      	movne	r3, #1
 800efea:	2300      	moveq	r3, #0
 800efec:	b2db      	uxtb	r3, r3
 800efee:	461a      	mov	r2, r3
 800eff0:	f107 0314 	add.w	r3, r7, #20
 800eff4:	4611      	mov	r1, r2
 800eff6:	4618      	mov	r0, r3
 800eff8:	f7fe fade 	bl	800d5b8 <chk_lock>
 800effc:	4603      	mov	r3, r0
 800effe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f002:	79fb      	ldrb	r3, [r7, #7]
 800f004:	f003 031c 	and.w	r3, r3, #28
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d07f      	beq.n	800f10c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800f00c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f010:	2b00      	cmp	r3, #0
 800f012:	d017      	beq.n	800f044 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f014:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f018:	2b04      	cmp	r3, #4
 800f01a:	d10e      	bne.n	800f03a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f01c:	f7fe fb28 	bl	800d670 <enq_lock>
 800f020:	4603      	mov	r3, r0
 800f022:	2b00      	cmp	r3, #0
 800f024:	d006      	beq.n	800f034 <f_open+0xc8>
 800f026:	f107 0314 	add.w	r3, r7, #20
 800f02a:	4618      	mov	r0, r3
 800f02c:	f7ff fa6c 	bl	800e508 <dir_register>
 800f030:	4603      	mov	r3, r0
 800f032:	e000      	b.n	800f036 <f_open+0xca>
 800f034:	2312      	movs	r3, #18
 800f036:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f03a:	79fb      	ldrb	r3, [r7, #7]
 800f03c:	f043 0308 	orr.w	r3, r3, #8
 800f040:	71fb      	strb	r3, [r7, #7]
 800f042:	e010      	b.n	800f066 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f044:	7ebb      	ldrb	r3, [r7, #26]
 800f046:	f003 0311 	and.w	r3, r3, #17
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d003      	beq.n	800f056 <f_open+0xea>
					res = FR_DENIED;
 800f04e:	2307      	movs	r3, #7
 800f050:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f054:	e007      	b.n	800f066 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f056:	79fb      	ldrb	r3, [r7, #7]
 800f058:	f003 0304 	and.w	r3, r3, #4
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d002      	beq.n	800f066 <f_open+0xfa>
 800f060:	2308      	movs	r3, #8
 800f062:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f066:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d168      	bne.n	800f140 <f_open+0x1d4>
 800f06e:	79fb      	ldrb	r3, [r7, #7]
 800f070:	f003 0308 	and.w	r3, r3, #8
 800f074:	2b00      	cmp	r3, #0
 800f076:	d063      	beq.n	800f140 <f_open+0x1d4>
				dw = GET_FATTIME();
 800f078:	f7fc ffe6 	bl	800c048 <get_fattime>
 800f07c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f07e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f080:	330e      	adds	r3, #14
 800f082:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f084:	4618      	mov	r0, r3
 800f086:	f7fe f9bb 	bl	800d400 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f08a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f08c:	3316      	adds	r3, #22
 800f08e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f090:	4618      	mov	r0, r3
 800f092:	f7fe f9b5 	bl	800d400 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f098:	330b      	adds	r3, #11
 800f09a:	2220      	movs	r2, #32
 800f09c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f09e:	693b      	ldr	r3, [r7, #16]
 800f0a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f0a2:	4611      	mov	r1, r2
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	f7ff f93e 	bl	800e326 <ld_clust>
 800f0aa:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f0ac:	693b      	ldr	r3, [r7, #16]
 800f0ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	f7ff f956 	bl	800e364 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f0b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0ba:	331c      	adds	r3, #28
 800f0bc:	2100      	movs	r1, #0
 800f0be:	4618      	mov	r0, r3
 800f0c0:	f7fe f99e 	bl	800d400 <st_dword>
					fs->wflag = 1;
 800f0c4:	693b      	ldr	r3, [r7, #16]
 800f0c6:	2201      	movs	r2, #1
 800f0c8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f0ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d037      	beq.n	800f140 <f_open+0x1d4>
						dw = fs->winsect;
 800f0d0:	693b      	ldr	r3, [r7, #16]
 800f0d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0d4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800f0d6:	f107 0314 	add.w	r3, r7, #20
 800f0da:	2200      	movs	r2, #0
 800f0dc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f0de:	4618      	mov	r0, r3
 800f0e0:	f7fe fe69 	bl	800ddb6 <remove_chain>
 800f0e4:	4603      	mov	r3, r0
 800f0e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800f0ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d126      	bne.n	800f140 <f_open+0x1d4>
							res = move_window(fs, dw);
 800f0f2:	693b      	ldr	r3, [r7, #16]
 800f0f4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	f7fe fc0e 	bl	800d918 <move_window>
 800f0fc:	4603      	mov	r3, r0
 800f0fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f102:	693b      	ldr	r3, [r7, #16]
 800f104:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f106:	3a01      	subs	r2, #1
 800f108:	611a      	str	r2, [r3, #16]
 800f10a:	e019      	b.n	800f140 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f10c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f110:	2b00      	cmp	r3, #0
 800f112:	d115      	bne.n	800f140 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f114:	7ebb      	ldrb	r3, [r7, #26]
 800f116:	f003 0310 	and.w	r3, r3, #16
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d003      	beq.n	800f126 <f_open+0x1ba>
					res = FR_NO_FILE;
 800f11e:	2304      	movs	r3, #4
 800f120:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f124:	e00c      	b.n	800f140 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f126:	79fb      	ldrb	r3, [r7, #7]
 800f128:	f003 0302 	and.w	r3, r3, #2
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d007      	beq.n	800f140 <f_open+0x1d4>
 800f130:	7ebb      	ldrb	r3, [r7, #26]
 800f132:	f003 0301 	and.w	r3, r3, #1
 800f136:	2b00      	cmp	r3, #0
 800f138:	d002      	beq.n	800f140 <f_open+0x1d4>
						res = FR_DENIED;
 800f13a:	2307      	movs	r3, #7
 800f13c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800f140:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f144:	2b00      	cmp	r3, #0
 800f146:	d128      	bne.n	800f19a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f148:	79fb      	ldrb	r3, [r7, #7]
 800f14a:	f003 0308 	and.w	r3, r3, #8
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d003      	beq.n	800f15a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800f152:	79fb      	ldrb	r3, [r7, #7]
 800f154:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f158:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f15a:	693b      	ldr	r3, [r7, #16]
 800f15c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800f162:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f168:	79fb      	ldrb	r3, [r7, #7]
 800f16a:	f023 0301 	bic.w	r3, r3, #1
 800f16e:	2b00      	cmp	r3, #0
 800f170:	bf14      	ite	ne
 800f172:	2301      	movne	r3, #1
 800f174:	2300      	moveq	r3, #0
 800f176:	b2db      	uxtb	r3, r3
 800f178:	461a      	mov	r2, r3
 800f17a:	f107 0314 	add.w	r3, r7, #20
 800f17e:	4611      	mov	r1, r2
 800f180:	4618      	mov	r0, r3
 800f182:	f7fe fa97 	bl	800d6b4 <inc_lock>
 800f186:	4602      	mov	r2, r0
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	691b      	ldr	r3, [r3, #16]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d102      	bne.n	800f19a <f_open+0x22e>
 800f194:	2302      	movs	r3, #2
 800f196:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f19a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	f040 8095 	bne.w	800f2ce <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f1a4:	693b      	ldr	r3, [r7, #16]
 800f1a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f1a8:	4611      	mov	r1, r2
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	f7ff f8bb 	bl	800e326 <ld_clust>
 800f1b0:	4602      	mov	r2, r0
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f1b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1b8:	331c      	adds	r3, #28
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	f7fe f8e2 	bl	800d384 <ld_dword>
 800f1c0:	4602      	mov	r2, r0
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f1cc:	693a      	ldr	r2, [r7, #16]
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f1d2:	693b      	ldr	r3, [r7, #16]
 800f1d4:	88da      	ldrh	r2, [r3, #6]
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	79fa      	ldrb	r2, [r7, #7]
 800f1de:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	2200      	movs	r2, #0
 800f1ea:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	3330      	adds	r3, #48	; 0x30
 800f1f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f1fa:	2100      	movs	r1, #0
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	f7fe f94c 	bl	800d49a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f202:	79fb      	ldrb	r3, [r7, #7]
 800f204:	f003 0320 	and.w	r3, r3, #32
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d060      	beq.n	800f2ce <f_open+0x362>
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	68db      	ldr	r3, [r3, #12]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d05c      	beq.n	800f2ce <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	68da      	ldr	r2, [r3, #12]
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f21c:	693b      	ldr	r3, [r7, #16]
 800f21e:	895b      	ldrh	r3, [r3, #10]
 800f220:	025b      	lsls	r3, r3, #9
 800f222:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	689b      	ldr	r3, [r3, #8]
 800f228:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	68db      	ldr	r3, [r3, #12]
 800f22e:	657b      	str	r3, [r7, #84]	; 0x54
 800f230:	e016      	b.n	800f260 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f236:	4618      	mov	r0, r3
 800f238:	f7fe fc29 	bl	800da8e <get_fat>
 800f23c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800f23e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f240:	2b01      	cmp	r3, #1
 800f242:	d802      	bhi.n	800f24a <f_open+0x2de>
 800f244:	2302      	movs	r3, #2
 800f246:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f24a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f24c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f250:	d102      	bne.n	800f258 <f_open+0x2ec>
 800f252:	2301      	movs	r3, #1
 800f254:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f258:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f25a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f25c:	1ad3      	subs	r3, r2, r3
 800f25e:	657b      	str	r3, [r7, #84]	; 0x54
 800f260:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f264:	2b00      	cmp	r3, #0
 800f266:	d103      	bne.n	800f270 <f_open+0x304>
 800f268:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f26a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f26c:	429a      	cmp	r2, r3
 800f26e:	d8e0      	bhi.n	800f232 <f_open+0x2c6>
				}
				fp->clust = clst;
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f274:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f276:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d127      	bne.n	800f2ce <f_open+0x362>
 800f27e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f284:	2b00      	cmp	r3, #0
 800f286:	d022      	beq.n	800f2ce <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f288:	693b      	ldr	r3, [r7, #16]
 800f28a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f28c:	4618      	mov	r0, r3
 800f28e:	f7fe fbdf 	bl	800da50 <clust2sect>
 800f292:	6478      	str	r0, [r7, #68]	; 0x44
 800f294:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f296:	2b00      	cmp	r3, #0
 800f298:	d103      	bne.n	800f2a2 <f_open+0x336>
						res = FR_INT_ERR;
 800f29a:	2302      	movs	r3, #2
 800f29c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f2a0:	e015      	b.n	800f2ce <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f2a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f2a4:	0a5a      	lsrs	r2, r3, #9
 800f2a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f2a8:	441a      	add	r2, r3
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f2ae:	693b      	ldr	r3, [r7, #16]
 800f2b0:	7858      	ldrb	r0, [r3, #1]
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	6a1a      	ldr	r2, [r3, #32]
 800f2bc:	2301      	movs	r3, #1
 800f2be:	f7fd ffeb 	bl	800d298 <disk_read>
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d002      	beq.n	800f2ce <f_open+0x362>
 800f2c8:	2301      	movs	r3, #1
 800f2ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f2ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d002      	beq.n	800f2dc <f_open+0x370>
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	2200      	movs	r2, #0
 800f2da:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f2dc:	693b      	ldr	r3, [r7, #16]
 800f2de:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800f2e2:	4611      	mov	r1, r2
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	f7fe f94b 	bl	800d580 <unlock_fs>
 800f2ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	3760      	adds	r7, #96	; 0x60
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	bd80      	pop	{r7, pc}

0800f2f6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f2f6:	b580      	push	{r7, lr}
 800f2f8:	b08c      	sub	sp, #48	; 0x30
 800f2fa:	af00      	add	r7, sp, #0
 800f2fc:	60f8      	str	r0, [r7, #12]
 800f2fe:	60b9      	str	r1, [r7, #8]
 800f300:	607a      	str	r2, [r7, #4]
 800f302:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800f304:	68bb      	ldr	r3, [r7, #8]
 800f306:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800f308:	683b      	ldr	r3, [r7, #0]
 800f30a:	2200      	movs	r2, #0
 800f30c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	f107 0210 	add.w	r2, r7, #16
 800f314:	4611      	mov	r1, r2
 800f316:	4618      	mov	r0, r3
 800f318:	f7ff fd7c 	bl	800ee14 <validate>
 800f31c:	4603      	mov	r3, r0
 800f31e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f322:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f326:	2b00      	cmp	r3, #0
 800f328:	d107      	bne.n	800f33a <f_write+0x44>
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	7d5b      	ldrb	r3, [r3, #21]
 800f32e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800f332:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f336:	2b00      	cmp	r3, #0
 800f338:	d009      	beq.n	800f34e <f_write+0x58>
 800f33a:	693b      	ldr	r3, [r7, #16]
 800f33c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800f340:	4611      	mov	r1, r2
 800f342:	4618      	mov	r0, r3
 800f344:	f7fe f91c 	bl	800d580 <unlock_fs>
 800f348:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f34c:	e173      	b.n	800f636 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	7d1b      	ldrb	r3, [r3, #20]
 800f352:	f003 0302 	and.w	r3, r3, #2
 800f356:	2b00      	cmp	r3, #0
 800f358:	d106      	bne.n	800f368 <f_write+0x72>
 800f35a:	693b      	ldr	r3, [r7, #16]
 800f35c:	2107      	movs	r1, #7
 800f35e:	4618      	mov	r0, r3
 800f360:	f7fe f90e 	bl	800d580 <unlock_fs>
 800f364:	2307      	movs	r3, #7
 800f366:	e166      	b.n	800f636 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	699a      	ldr	r2, [r3, #24]
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	441a      	add	r2, r3
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	699b      	ldr	r3, [r3, #24]
 800f374:	429a      	cmp	r2, r3
 800f376:	f080 814b 	bcs.w	800f610 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	699b      	ldr	r3, [r3, #24]
 800f37e:	43db      	mvns	r3, r3
 800f380:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800f382:	e145      	b.n	800f610 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	699b      	ldr	r3, [r3, #24]
 800f388:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	f040 8101 	bne.w	800f594 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	699b      	ldr	r3, [r3, #24]
 800f396:	0a5b      	lsrs	r3, r3, #9
 800f398:	693a      	ldr	r2, [r7, #16]
 800f39a:	8952      	ldrh	r2, [r2, #10]
 800f39c:	3a01      	subs	r2, #1
 800f39e:	4013      	ands	r3, r2
 800f3a0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800f3a2:	69bb      	ldr	r3, [r7, #24]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d14d      	bne.n	800f444 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	699b      	ldr	r3, [r3, #24]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d10c      	bne.n	800f3ca <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	689b      	ldr	r3, [r3, #8]
 800f3b4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800f3b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d11a      	bne.n	800f3f2 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	2100      	movs	r1, #0
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	f7fe fd5d 	bl	800de80 <create_chain>
 800f3c6:	62b8      	str	r0, [r7, #40]	; 0x28
 800f3c8:	e013      	b.n	800f3f2 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d007      	beq.n	800f3e2 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	699b      	ldr	r3, [r3, #24]
 800f3d6:	4619      	mov	r1, r3
 800f3d8:	68f8      	ldr	r0, [r7, #12]
 800f3da:	f7fe fde9 	bl	800dfb0 <clmt_clust>
 800f3de:	62b8      	str	r0, [r7, #40]	; 0x28
 800f3e0:	e007      	b.n	800f3f2 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f3e2:	68fa      	ldr	r2, [r7, #12]
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	69db      	ldr	r3, [r3, #28]
 800f3e8:	4619      	mov	r1, r3
 800f3ea:	4610      	mov	r0, r2
 800f3ec:	f7fe fd48 	bl	800de80 <create_chain>
 800f3f0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f3f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	f000 8110 	beq.w	800f61a <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f3fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3fc:	2b01      	cmp	r3, #1
 800f3fe:	d109      	bne.n	800f414 <f_write+0x11e>
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	2202      	movs	r2, #2
 800f404:	755a      	strb	r2, [r3, #21]
 800f406:	693b      	ldr	r3, [r7, #16]
 800f408:	2102      	movs	r1, #2
 800f40a:	4618      	mov	r0, r3
 800f40c:	f7fe f8b8 	bl	800d580 <unlock_fs>
 800f410:	2302      	movs	r3, #2
 800f412:	e110      	b.n	800f636 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f41a:	d109      	bne.n	800f430 <f_write+0x13a>
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	2201      	movs	r2, #1
 800f420:	755a      	strb	r2, [r3, #21]
 800f422:	693b      	ldr	r3, [r7, #16]
 800f424:	2101      	movs	r1, #1
 800f426:	4618      	mov	r0, r3
 800f428:	f7fe f8aa 	bl	800d580 <unlock_fs>
 800f42c:	2301      	movs	r3, #1
 800f42e:	e102      	b.n	800f636 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f434:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	689b      	ldr	r3, [r3, #8]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d102      	bne.n	800f444 <f_write+0x14e>
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f442:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	7d1b      	ldrb	r3, [r3, #20]
 800f448:	b25b      	sxtb	r3, r3
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	da1d      	bge.n	800f48a <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f44e:	693b      	ldr	r3, [r7, #16]
 800f450:	7858      	ldrb	r0, [r3, #1]
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	6a1a      	ldr	r2, [r3, #32]
 800f45c:	2301      	movs	r3, #1
 800f45e:	f7fd ff3b 	bl	800d2d8 <disk_write>
 800f462:	4603      	mov	r3, r0
 800f464:	2b00      	cmp	r3, #0
 800f466:	d009      	beq.n	800f47c <f_write+0x186>
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	2201      	movs	r2, #1
 800f46c:	755a      	strb	r2, [r3, #21]
 800f46e:	693b      	ldr	r3, [r7, #16]
 800f470:	2101      	movs	r1, #1
 800f472:	4618      	mov	r0, r3
 800f474:	f7fe f884 	bl	800d580 <unlock_fs>
 800f478:	2301      	movs	r3, #1
 800f47a:	e0dc      	b.n	800f636 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	7d1b      	ldrb	r3, [r3, #20]
 800f480:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f484:	b2da      	uxtb	r2, r3
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f48a:	693a      	ldr	r2, [r7, #16]
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	69db      	ldr	r3, [r3, #28]
 800f490:	4619      	mov	r1, r3
 800f492:	4610      	mov	r0, r2
 800f494:	f7fe fadc 	bl	800da50 <clust2sect>
 800f498:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f49a:	697b      	ldr	r3, [r7, #20]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d109      	bne.n	800f4b4 <f_write+0x1be>
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	2202      	movs	r2, #2
 800f4a4:	755a      	strb	r2, [r3, #21]
 800f4a6:	693b      	ldr	r3, [r7, #16]
 800f4a8:	2102      	movs	r1, #2
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	f7fe f868 	bl	800d580 <unlock_fs>
 800f4b0:	2302      	movs	r3, #2
 800f4b2:	e0c0      	b.n	800f636 <f_write+0x340>
			sect += csect;
 800f4b4:	697a      	ldr	r2, [r7, #20]
 800f4b6:	69bb      	ldr	r3, [r7, #24]
 800f4b8:	4413      	add	r3, r2
 800f4ba:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	0a5b      	lsrs	r3, r3, #9
 800f4c0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f4c2:	6a3b      	ldr	r3, [r7, #32]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d041      	beq.n	800f54c <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f4c8:	69ba      	ldr	r2, [r7, #24]
 800f4ca:	6a3b      	ldr	r3, [r7, #32]
 800f4cc:	4413      	add	r3, r2
 800f4ce:	693a      	ldr	r2, [r7, #16]
 800f4d0:	8952      	ldrh	r2, [r2, #10]
 800f4d2:	4293      	cmp	r3, r2
 800f4d4:	d905      	bls.n	800f4e2 <f_write+0x1ec>
					cc = fs->csize - csect;
 800f4d6:	693b      	ldr	r3, [r7, #16]
 800f4d8:	895b      	ldrh	r3, [r3, #10]
 800f4da:	461a      	mov	r2, r3
 800f4dc:	69bb      	ldr	r3, [r7, #24]
 800f4de:	1ad3      	subs	r3, r2, r3
 800f4e0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f4e2:	693b      	ldr	r3, [r7, #16]
 800f4e4:	7858      	ldrb	r0, [r3, #1]
 800f4e6:	6a3b      	ldr	r3, [r7, #32]
 800f4e8:	697a      	ldr	r2, [r7, #20]
 800f4ea:	69f9      	ldr	r1, [r7, #28]
 800f4ec:	f7fd fef4 	bl	800d2d8 <disk_write>
 800f4f0:	4603      	mov	r3, r0
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d009      	beq.n	800f50a <f_write+0x214>
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	2201      	movs	r2, #1
 800f4fa:	755a      	strb	r2, [r3, #21]
 800f4fc:	693b      	ldr	r3, [r7, #16]
 800f4fe:	2101      	movs	r1, #1
 800f500:	4618      	mov	r0, r3
 800f502:	f7fe f83d 	bl	800d580 <unlock_fs>
 800f506:	2301      	movs	r3, #1
 800f508:	e095      	b.n	800f636 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	6a1a      	ldr	r2, [r3, #32]
 800f50e:	697b      	ldr	r3, [r7, #20]
 800f510:	1ad3      	subs	r3, r2, r3
 800f512:	6a3a      	ldr	r2, [r7, #32]
 800f514:	429a      	cmp	r2, r3
 800f516:	d915      	bls.n	800f544 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	6a1a      	ldr	r2, [r3, #32]
 800f522:	697b      	ldr	r3, [r7, #20]
 800f524:	1ad3      	subs	r3, r2, r3
 800f526:	025b      	lsls	r3, r3, #9
 800f528:	69fa      	ldr	r2, [r7, #28]
 800f52a:	4413      	add	r3, r2
 800f52c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f530:	4619      	mov	r1, r3
 800f532:	f7fd ff91 	bl	800d458 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	7d1b      	ldrb	r3, [r3, #20]
 800f53a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f53e:	b2da      	uxtb	r2, r3
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f544:	6a3b      	ldr	r3, [r7, #32]
 800f546:	025b      	lsls	r3, r3, #9
 800f548:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800f54a:	e044      	b.n	800f5d6 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	6a1b      	ldr	r3, [r3, #32]
 800f550:	697a      	ldr	r2, [r7, #20]
 800f552:	429a      	cmp	r2, r3
 800f554:	d01b      	beq.n	800f58e <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	699a      	ldr	r2, [r3, #24]
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f55e:	429a      	cmp	r2, r3
 800f560:	d215      	bcs.n	800f58e <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800f562:	693b      	ldr	r3, [r7, #16]
 800f564:	7858      	ldrb	r0, [r3, #1]
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f56c:	2301      	movs	r3, #1
 800f56e:	697a      	ldr	r2, [r7, #20]
 800f570:	f7fd fe92 	bl	800d298 <disk_read>
 800f574:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800f576:	2b00      	cmp	r3, #0
 800f578:	d009      	beq.n	800f58e <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	2201      	movs	r2, #1
 800f57e:	755a      	strb	r2, [r3, #21]
 800f580:	693b      	ldr	r3, [r7, #16]
 800f582:	2101      	movs	r1, #1
 800f584:	4618      	mov	r0, r3
 800f586:	f7fd fffb 	bl	800d580 <unlock_fs>
 800f58a:	2301      	movs	r3, #1
 800f58c:	e053      	b.n	800f636 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	697a      	ldr	r2, [r7, #20]
 800f592:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	699b      	ldr	r3, [r3, #24]
 800f598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f59c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800f5a0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800f5a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	429a      	cmp	r2, r3
 800f5a8:	d901      	bls.n	800f5ae <f_write+0x2b8>
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	699b      	ldr	r3, [r3, #24]
 800f5b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f5bc:	4413      	add	r3, r2
 800f5be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5c0:	69f9      	ldr	r1, [r7, #28]
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	f7fd ff48 	bl	800d458 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	7d1b      	ldrb	r3, [r3, #20]
 800f5cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f5d0:	b2da      	uxtb	r2, r3
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f5d6:	69fa      	ldr	r2, [r7, #28]
 800f5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5da:	4413      	add	r3, r2
 800f5dc:	61fb      	str	r3, [r7, #28]
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	699a      	ldr	r2, [r3, #24]
 800f5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5e4:	441a      	add	r2, r3
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	619a      	str	r2, [r3, #24]
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	68da      	ldr	r2, [r3, #12]
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	699b      	ldr	r3, [r3, #24]
 800f5f2:	429a      	cmp	r2, r3
 800f5f4:	bf38      	it	cc
 800f5f6:	461a      	movcc	r2, r3
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	60da      	str	r2, [r3, #12]
 800f5fc:	683b      	ldr	r3, [r7, #0]
 800f5fe:	681a      	ldr	r2, [r3, #0]
 800f600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f602:	441a      	add	r2, r3
 800f604:	683b      	ldr	r3, [r7, #0]
 800f606:	601a      	str	r2, [r3, #0]
 800f608:	687a      	ldr	r2, [r7, #4]
 800f60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f60c:	1ad3      	subs	r3, r2, r3
 800f60e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	2b00      	cmp	r3, #0
 800f614:	f47f aeb6 	bne.w	800f384 <f_write+0x8e>
 800f618:	e000      	b.n	800f61c <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f61a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	7d1b      	ldrb	r3, [r3, #20]
 800f620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f624:	b2da      	uxtb	r2, r3
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800f62a:	693b      	ldr	r3, [r7, #16]
 800f62c:	2100      	movs	r1, #0
 800f62e:	4618      	mov	r0, r3
 800f630:	f7fd ffa6 	bl	800d580 <unlock_fs>
 800f634:	2300      	movs	r3, #0
}
 800f636:	4618      	mov	r0, r3
 800f638:	3730      	adds	r7, #48	; 0x30
 800f63a:	46bd      	mov	sp, r7
 800f63c:	bd80      	pop	{r7, pc}

0800f63e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f63e:	b580      	push	{r7, lr}
 800f640:	b086      	sub	sp, #24
 800f642:	af00      	add	r7, sp, #0
 800f644:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	f107 0208 	add.w	r2, r7, #8
 800f64c:	4611      	mov	r1, r2
 800f64e:	4618      	mov	r0, r3
 800f650:	f7ff fbe0 	bl	800ee14 <validate>
 800f654:	4603      	mov	r3, r0
 800f656:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f658:	7dfb      	ldrb	r3, [r7, #23]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d16d      	bne.n	800f73a <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	7d1b      	ldrb	r3, [r3, #20]
 800f662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f666:	2b00      	cmp	r3, #0
 800f668:	d067      	beq.n	800f73a <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	7d1b      	ldrb	r3, [r3, #20]
 800f66e:	b25b      	sxtb	r3, r3
 800f670:	2b00      	cmp	r3, #0
 800f672:	da1a      	bge.n	800f6aa <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f674:	68bb      	ldr	r3, [r7, #8]
 800f676:	7858      	ldrb	r0, [r3, #1]
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	6a1a      	ldr	r2, [r3, #32]
 800f682:	2301      	movs	r3, #1
 800f684:	f7fd fe28 	bl	800d2d8 <disk_write>
 800f688:	4603      	mov	r3, r0
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d006      	beq.n	800f69c <f_sync+0x5e>
 800f68e:	68bb      	ldr	r3, [r7, #8]
 800f690:	2101      	movs	r1, #1
 800f692:	4618      	mov	r0, r3
 800f694:	f7fd ff74 	bl	800d580 <unlock_fs>
 800f698:	2301      	movs	r3, #1
 800f69a:	e055      	b.n	800f748 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	7d1b      	ldrb	r3, [r3, #20]
 800f6a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f6a4:	b2da      	uxtb	r2, r3
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f6aa:	f7fc fccd 	bl	800c048 <get_fattime>
 800f6ae:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f6b0:	68ba      	ldr	r2, [r7, #8]
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6b6:	4619      	mov	r1, r3
 800f6b8:	4610      	mov	r0, r2
 800f6ba:	f7fe f92d 	bl	800d918 <move_window>
 800f6be:	4603      	mov	r3, r0
 800f6c0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f6c2:	7dfb      	ldrb	r3, [r7, #23]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d138      	bne.n	800f73a <f_sync+0xfc>
					dir = fp->dir_ptr;
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6cc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	330b      	adds	r3, #11
 800f6d2:	781a      	ldrb	r2, [r3, #0]
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	330b      	adds	r3, #11
 800f6d8:	f042 0220 	orr.w	r2, r2, #32
 800f6dc:	b2d2      	uxtb	r2, r2
 800f6de:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	6818      	ldr	r0, [r3, #0]
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	689b      	ldr	r3, [r3, #8]
 800f6e8:	461a      	mov	r2, r3
 800f6ea:	68f9      	ldr	r1, [r7, #12]
 800f6ec:	f7fe fe3a 	bl	800e364 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	f103 021c 	add.w	r2, r3, #28
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	68db      	ldr	r3, [r3, #12]
 800f6fa:	4619      	mov	r1, r3
 800f6fc:	4610      	mov	r0, r2
 800f6fe:	f7fd fe7f 	bl	800d400 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	3316      	adds	r3, #22
 800f706:	6939      	ldr	r1, [r7, #16]
 800f708:	4618      	mov	r0, r3
 800f70a:	f7fd fe79 	bl	800d400 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	3312      	adds	r3, #18
 800f712:	2100      	movs	r1, #0
 800f714:	4618      	mov	r0, r3
 800f716:	f7fd fe58 	bl	800d3ca <st_word>
					fs->wflag = 1;
 800f71a:	68bb      	ldr	r3, [r7, #8]
 800f71c:	2201      	movs	r2, #1
 800f71e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f720:	68bb      	ldr	r3, [r7, #8]
 800f722:	4618      	mov	r0, r3
 800f724:	f7fe f926 	bl	800d974 <sync_fs>
 800f728:	4603      	mov	r3, r0
 800f72a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	7d1b      	ldrb	r3, [r3, #20]
 800f730:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f734:	b2da      	uxtb	r2, r3
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f73a:	68bb      	ldr	r3, [r7, #8]
 800f73c:	7dfa      	ldrb	r2, [r7, #23]
 800f73e:	4611      	mov	r1, r2
 800f740:	4618      	mov	r0, r3
 800f742:	f7fd ff1d 	bl	800d580 <unlock_fs>
 800f746:	7dfb      	ldrb	r3, [r7, #23]
}
 800f748:	4618      	mov	r0, r3
 800f74a:	3718      	adds	r7, #24
 800f74c:	46bd      	mov	sp, r7
 800f74e:	bd80      	pop	{r7, pc}

0800f750 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f750:	b580      	push	{r7, lr}
 800f752:	b084      	sub	sp, #16
 800f754:	af00      	add	r7, sp, #0
 800f756:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f758:	6878      	ldr	r0, [r7, #4]
 800f75a:	f7ff ff70 	bl	800f63e <f_sync>
 800f75e:	4603      	mov	r3, r0
 800f760:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f762:	7bfb      	ldrb	r3, [r7, #15]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d11d      	bne.n	800f7a4 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	f107 0208 	add.w	r2, r7, #8
 800f76e:	4611      	mov	r1, r2
 800f770:	4618      	mov	r0, r3
 800f772:	f7ff fb4f 	bl	800ee14 <validate>
 800f776:	4603      	mov	r3, r0
 800f778:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f77a:	7bfb      	ldrb	r3, [r7, #15]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d111      	bne.n	800f7a4 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	691b      	ldr	r3, [r3, #16]
 800f784:	4618      	mov	r0, r3
 800f786:	f7fe f823 	bl	800d7d0 <dec_lock>
 800f78a:	4603      	mov	r3, r0
 800f78c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f78e:	7bfb      	ldrb	r3, [r7, #15]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d102      	bne.n	800f79a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	2200      	movs	r2, #0
 800f798:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800f79a:	68bb      	ldr	r3, [r7, #8]
 800f79c:	2100      	movs	r1, #0
 800f79e:	4618      	mov	r0, r3
 800f7a0:	f7fd feee 	bl	800d580 <unlock_fs>
#endif
		}
	}
	return res;
 800f7a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	3710      	adds	r7, #16
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	bd80      	pop	{r7, pc}

0800f7ae <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800f7ae:	b580      	push	{r7, lr}
 800f7b0:	b090      	sub	sp, #64	; 0x40
 800f7b2:	af00      	add	r7, sp, #0
 800f7b4:	6078      	str	r0, [r7, #4]
 800f7b6:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	f107 0208 	add.w	r2, r7, #8
 800f7be:	4611      	mov	r1, r2
 800f7c0:	4618      	mov	r0, r3
 800f7c2:	f7ff fb27 	bl	800ee14 <validate>
 800f7c6:	4603      	mov	r3, r0
 800f7c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800f7cc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d103      	bne.n	800f7dc <f_lseek+0x2e>
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	7d5b      	ldrb	r3, [r3, #21]
 800f7d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800f7dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d009      	beq.n	800f7f8 <f_lseek+0x4a>
 800f7e4:	68bb      	ldr	r3, [r7, #8]
 800f7e6:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800f7ea:	4611      	mov	r1, r2
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	f7fd fec7 	bl	800d580 <unlock_fs>
 800f7f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f7f6:	e229      	b.n	800fc4c <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	f000 80ea 	beq.w	800f9d6 <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800f802:	683b      	ldr	r3, [r7, #0]
 800f804:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f808:	d164      	bne.n	800f8d4 <f_lseek+0x126>
			tbl = fp->cltbl;
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f80e:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800f810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f812:	1d1a      	adds	r2, r3, #4
 800f814:	627a      	str	r2, [r7, #36]	; 0x24
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	617b      	str	r3, [r7, #20]
 800f81a:	2302      	movs	r3, #2
 800f81c:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	689b      	ldr	r3, [r3, #8]
 800f822:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800f824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f826:	2b00      	cmp	r3, #0
 800f828:	d044      	beq.n	800f8b4 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800f82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f82c:	613b      	str	r3, [r7, #16]
 800f82e:	2300      	movs	r3, #0
 800f830:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f834:	3302      	adds	r3, #2
 800f836:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800f838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f83a:	60fb      	str	r3, [r7, #12]
 800f83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f83e:	3301      	adds	r3, #1
 800f840:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f846:	4618      	mov	r0, r3
 800f848:	f7fe f921 	bl	800da8e <get_fat>
 800f84c:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800f84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f850:	2b01      	cmp	r3, #1
 800f852:	d809      	bhi.n	800f868 <f_lseek+0xba>
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	2202      	movs	r2, #2
 800f858:	755a      	strb	r2, [r3, #21]
 800f85a:	68bb      	ldr	r3, [r7, #8]
 800f85c:	2102      	movs	r1, #2
 800f85e:	4618      	mov	r0, r3
 800f860:	f7fd fe8e 	bl	800d580 <unlock_fs>
 800f864:	2302      	movs	r3, #2
 800f866:	e1f1      	b.n	800fc4c <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f86a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f86e:	d109      	bne.n	800f884 <f_lseek+0xd6>
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	2201      	movs	r2, #1
 800f874:	755a      	strb	r2, [r3, #21]
 800f876:	68bb      	ldr	r3, [r7, #8]
 800f878:	2101      	movs	r1, #1
 800f87a:	4618      	mov	r0, r3
 800f87c:	f7fd fe80 	bl	800d580 <unlock_fs>
 800f880:	2301      	movs	r3, #1
 800f882:	e1e3      	b.n	800fc4c <f_lseek+0x49e>
					} while (cl == pcl + 1);
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	3301      	adds	r3, #1
 800f888:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f88a:	429a      	cmp	r2, r3
 800f88c:	d0d4      	beq.n	800f838 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800f88e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f890:	697b      	ldr	r3, [r7, #20]
 800f892:	429a      	cmp	r2, r3
 800f894:	d809      	bhi.n	800f8aa <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 800f896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f898:	1d1a      	adds	r2, r3, #4
 800f89a:	627a      	str	r2, [r7, #36]	; 0x24
 800f89c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f89e:	601a      	str	r2, [r3, #0]
 800f8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8a2:	1d1a      	adds	r2, r3, #4
 800f8a4:	627a      	str	r2, [r7, #36]	; 0x24
 800f8a6:	693a      	ldr	r2, [r7, #16]
 800f8a8:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800f8aa:	68bb      	ldr	r3, [r7, #8]
 800f8ac:	699b      	ldr	r3, [r3, #24]
 800f8ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8b0:	429a      	cmp	r2, r3
 800f8b2:	d3ba      	bcc.n	800f82a <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f8ba:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800f8bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f8be:	697b      	ldr	r3, [r7, #20]
 800f8c0:	429a      	cmp	r2, r3
 800f8c2:	d803      	bhi.n	800f8cc <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 800f8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	601a      	str	r2, [r3, #0]
 800f8ca:	e1b6      	b.n	800fc3a <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800f8cc:	2311      	movs	r3, #17
 800f8ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800f8d2:	e1b2      	b.n	800fc3a <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	68db      	ldr	r3, [r3, #12]
 800f8d8:	683a      	ldr	r2, [r7, #0]
 800f8da:	429a      	cmp	r2, r3
 800f8dc:	d902      	bls.n	800f8e4 <f_lseek+0x136>
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	68db      	ldr	r3, [r3, #12]
 800f8e2:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	683a      	ldr	r2, [r7, #0]
 800f8e8:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800f8ea:	683b      	ldr	r3, [r7, #0]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	f000 81a4 	beq.w	800fc3a <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800f8f2:	683b      	ldr	r3, [r7, #0]
 800f8f4:	3b01      	subs	r3, #1
 800f8f6:	4619      	mov	r1, r3
 800f8f8:	6878      	ldr	r0, [r7, #4]
 800f8fa:	f7fe fb59 	bl	800dfb0 <clmt_clust>
 800f8fe:	4602      	mov	r2, r0
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800f904:	68ba      	ldr	r2, [r7, #8]
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	69db      	ldr	r3, [r3, #28]
 800f90a:	4619      	mov	r1, r3
 800f90c:	4610      	mov	r0, r2
 800f90e:	f7fe f89f 	bl	800da50 <clust2sect>
 800f912:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800f914:	69bb      	ldr	r3, [r7, #24]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d109      	bne.n	800f92e <f_lseek+0x180>
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	2202      	movs	r2, #2
 800f91e:	755a      	strb	r2, [r3, #21]
 800f920:	68bb      	ldr	r3, [r7, #8]
 800f922:	2102      	movs	r1, #2
 800f924:	4618      	mov	r0, r3
 800f926:	f7fd fe2b 	bl	800d580 <unlock_fs>
 800f92a:	2302      	movs	r3, #2
 800f92c:	e18e      	b.n	800fc4c <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800f92e:	683b      	ldr	r3, [r7, #0]
 800f930:	3b01      	subs	r3, #1
 800f932:	0a5b      	lsrs	r3, r3, #9
 800f934:	68ba      	ldr	r2, [r7, #8]
 800f936:	8952      	ldrh	r2, [r2, #10]
 800f938:	3a01      	subs	r2, #1
 800f93a:	4013      	ands	r3, r2
 800f93c:	69ba      	ldr	r2, [r7, #24]
 800f93e:	4413      	add	r3, r2
 800f940:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	699b      	ldr	r3, [r3, #24]
 800f946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	f000 8175 	beq.w	800fc3a <f_lseek+0x48c>
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	6a1b      	ldr	r3, [r3, #32]
 800f954:	69ba      	ldr	r2, [r7, #24]
 800f956:	429a      	cmp	r2, r3
 800f958:	f000 816f 	beq.w	800fc3a <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	7d1b      	ldrb	r3, [r3, #20]
 800f960:	b25b      	sxtb	r3, r3
 800f962:	2b00      	cmp	r3, #0
 800f964:	da1d      	bge.n	800f9a2 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f966:	68bb      	ldr	r3, [r7, #8]
 800f968:	7858      	ldrb	r0, [r3, #1]
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	6a1a      	ldr	r2, [r3, #32]
 800f974:	2301      	movs	r3, #1
 800f976:	f7fd fcaf 	bl	800d2d8 <disk_write>
 800f97a:	4603      	mov	r3, r0
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d009      	beq.n	800f994 <f_lseek+0x1e6>
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	2201      	movs	r2, #1
 800f984:	755a      	strb	r2, [r3, #21]
 800f986:	68bb      	ldr	r3, [r7, #8]
 800f988:	2101      	movs	r1, #1
 800f98a:	4618      	mov	r0, r3
 800f98c:	f7fd fdf8 	bl	800d580 <unlock_fs>
 800f990:	2301      	movs	r3, #1
 800f992:	e15b      	b.n	800fc4c <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	7d1b      	ldrb	r3, [r3, #20]
 800f998:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f99c:	b2da      	uxtb	r2, r3
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800f9a2:	68bb      	ldr	r3, [r7, #8]
 800f9a4:	7858      	ldrb	r0, [r3, #1]
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f9ac:	2301      	movs	r3, #1
 800f9ae:	69ba      	ldr	r2, [r7, #24]
 800f9b0:	f7fd fc72 	bl	800d298 <disk_read>
 800f9b4:	4603      	mov	r3, r0
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d009      	beq.n	800f9ce <f_lseek+0x220>
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	2201      	movs	r2, #1
 800f9be:	755a      	strb	r2, [r3, #21]
 800f9c0:	68bb      	ldr	r3, [r7, #8]
 800f9c2:	2101      	movs	r1, #1
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	f7fd fddb 	bl	800d580 <unlock_fs>
 800f9ca:	2301      	movs	r3, #1
 800f9cc:	e13e      	b.n	800fc4c <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	69ba      	ldr	r2, [r7, #24]
 800f9d2:	621a      	str	r2, [r3, #32]
 800f9d4:	e131      	b.n	800fc3a <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	68db      	ldr	r3, [r3, #12]
 800f9da:	683a      	ldr	r2, [r7, #0]
 800f9dc:	429a      	cmp	r2, r3
 800f9de:	d908      	bls.n	800f9f2 <f_lseek+0x244>
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	7d1b      	ldrb	r3, [r3, #20]
 800f9e4:	f003 0302 	and.w	r3, r3, #2
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d102      	bne.n	800f9f2 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	68db      	ldr	r3, [r3, #12]
 800f9f0:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	699b      	ldr	r3, [r3, #24]
 800f9f6:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	637b      	str	r3, [r7, #52]	; 0x34
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fa00:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800fa02:	683b      	ldr	r3, [r7, #0]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	f000 80c0 	beq.w	800fb8a <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800fa0a:	68bb      	ldr	r3, [r7, #8]
 800fa0c:	895b      	ldrh	r3, [r3, #10]
 800fa0e:	025b      	lsls	r3, r3, #9
 800fa10:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800fa12:	6a3b      	ldr	r3, [r7, #32]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d01b      	beq.n	800fa50 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800fa18:	683b      	ldr	r3, [r7, #0]
 800fa1a:	1e5a      	subs	r2, r3, #1
 800fa1c:	69fb      	ldr	r3, [r7, #28]
 800fa1e:	fbb2 f2f3 	udiv	r2, r2, r3
 800fa22:	6a3b      	ldr	r3, [r7, #32]
 800fa24:	1e59      	subs	r1, r3, #1
 800fa26:	69fb      	ldr	r3, [r7, #28]
 800fa28:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800fa2c:	429a      	cmp	r2, r3
 800fa2e:	d30f      	bcc.n	800fa50 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800fa30:	6a3b      	ldr	r3, [r7, #32]
 800fa32:	1e5a      	subs	r2, r3, #1
 800fa34:	69fb      	ldr	r3, [r7, #28]
 800fa36:	425b      	negs	r3, r3
 800fa38:	401a      	ands	r2, r3
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	699b      	ldr	r3, [r3, #24]
 800fa42:	683a      	ldr	r2, [r7, #0]
 800fa44:	1ad3      	subs	r3, r2, r3
 800fa46:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	69db      	ldr	r3, [r3, #28]
 800fa4c:	63bb      	str	r3, [r7, #56]	; 0x38
 800fa4e:	e02c      	b.n	800faaa <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	689b      	ldr	r3, [r3, #8]
 800fa54:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800fa56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d123      	bne.n	800faa4 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	2100      	movs	r1, #0
 800fa60:	4618      	mov	r0, r3
 800fa62:	f7fe fa0d 	bl	800de80 <create_chain>
 800fa66:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800fa68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa6a:	2b01      	cmp	r3, #1
 800fa6c:	d109      	bne.n	800fa82 <f_lseek+0x2d4>
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	2202      	movs	r2, #2
 800fa72:	755a      	strb	r2, [r3, #21]
 800fa74:	68bb      	ldr	r3, [r7, #8]
 800fa76:	2102      	movs	r1, #2
 800fa78:	4618      	mov	r0, r3
 800fa7a:	f7fd fd81 	bl	800d580 <unlock_fs>
 800fa7e:	2302      	movs	r3, #2
 800fa80:	e0e4      	b.n	800fc4c <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fa82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa88:	d109      	bne.n	800fa9e <f_lseek+0x2f0>
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	2201      	movs	r2, #1
 800fa8e:	755a      	strb	r2, [r3, #21]
 800fa90:	68bb      	ldr	r3, [r7, #8]
 800fa92:	2101      	movs	r1, #1
 800fa94:	4618      	mov	r0, r3
 800fa96:	f7fd fd73 	bl	800d580 <unlock_fs>
 800fa9a:	2301      	movs	r3, #1
 800fa9c:	e0d6      	b.n	800fc4c <f_lseek+0x49e>
					fp->obj.sclust = clst;
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800faa2:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800faa8:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800faaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faac:	2b00      	cmp	r3, #0
 800faae:	d06c      	beq.n	800fb8a <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 800fab0:	e044      	b.n	800fb3c <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 800fab2:	683a      	ldr	r2, [r7, #0]
 800fab4:	69fb      	ldr	r3, [r7, #28]
 800fab6:	1ad3      	subs	r3, r2, r3
 800fab8:	603b      	str	r3, [r7, #0]
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	699a      	ldr	r2, [r3, #24]
 800fabe:	69fb      	ldr	r3, [r7, #28]
 800fac0:	441a      	add	r2, r3
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	7d1b      	ldrb	r3, [r3, #20]
 800faca:	f003 0302 	and.w	r3, r3, #2
 800face:	2b00      	cmp	r3, #0
 800fad0:	d00b      	beq.n	800faea <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fad6:	4618      	mov	r0, r3
 800fad8:	f7fe f9d2 	bl	800de80 <create_chain>
 800fadc:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800fade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d108      	bne.n	800faf6 <f_lseek+0x348>
							ofs = 0; break;
 800fae4:	2300      	movs	r3, #0
 800fae6:	603b      	str	r3, [r7, #0]
 800fae8:	e02c      	b.n	800fb44 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800faee:	4618      	mov	r0, r3
 800faf0:	f7fd ffcd 	bl	800da8e <get_fat>
 800faf4:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800faf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fafc:	d109      	bne.n	800fb12 <f_lseek+0x364>
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	2201      	movs	r2, #1
 800fb02:	755a      	strb	r2, [r3, #21]
 800fb04:	68bb      	ldr	r3, [r7, #8]
 800fb06:	2101      	movs	r1, #1
 800fb08:	4618      	mov	r0, r3
 800fb0a:	f7fd fd39 	bl	800d580 <unlock_fs>
 800fb0e:	2301      	movs	r3, #1
 800fb10:	e09c      	b.n	800fc4c <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800fb12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb14:	2b01      	cmp	r3, #1
 800fb16:	d904      	bls.n	800fb22 <f_lseek+0x374>
 800fb18:	68bb      	ldr	r3, [r7, #8]
 800fb1a:	699b      	ldr	r3, [r3, #24]
 800fb1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb1e:	429a      	cmp	r2, r3
 800fb20:	d309      	bcc.n	800fb36 <f_lseek+0x388>
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	2202      	movs	r2, #2
 800fb26:	755a      	strb	r2, [r3, #21]
 800fb28:	68bb      	ldr	r3, [r7, #8]
 800fb2a:	2102      	movs	r1, #2
 800fb2c:	4618      	mov	r0, r3
 800fb2e:	f7fd fd27 	bl	800d580 <unlock_fs>
 800fb32:	2302      	movs	r3, #2
 800fb34:	e08a      	b.n	800fc4c <f_lseek+0x49e>
					fp->clust = clst;
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb3a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800fb3c:	683a      	ldr	r2, [r7, #0]
 800fb3e:	69fb      	ldr	r3, [r7, #28]
 800fb40:	429a      	cmp	r2, r3
 800fb42:	d8b6      	bhi.n	800fab2 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	699a      	ldr	r2, [r3, #24]
 800fb48:	683b      	ldr	r3, [r7, #0]
 800fb4a:	441a      	add	r2, r3
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800fb50:	683b      	ldr	r3, [r7, #0]
 800fb52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d017      	beq.n	800fb8a <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800fb5a:	68bb      	ldr	r3, [r7, #8]
 800fb5c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fb5e:	4618      	mov	r0, r3
 800fb60:	f7fd ff76 	bl	800da50 <clust2sect>
 800fb64:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800fb66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d109      	bne.n	800fb80 <f_lseek+0x3d2>
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	2202      	movs	r2, #2
 800fb70:	755a      	strb	r2, [r3, #21]
 800fb72:	68bb      	ldr	r3, [r7, #8]
 800fb74:	2102      	movs	r1, #2
 800fb76:	4618      	mov	r0, r3
 800fb78:	f7fd fd02 	bl	800d580 <unlock_fs>
 800fb7c:	2302      	movs	r3, #2
 800fb7e:	e065      	b.n	800fc4c <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 800fb80:	683b      	ldr	r3, [r7, #0]
 800fb82:	0a5b      	lsrs	r3, r3, #9
 800fb84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fb86:	4413      	add	r3, r2
 800fb88:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	699a      	ldr	r2, [r3, #24]
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	68db      	ldr	r3, [r3, #12]
 800fb92:	429a      	cmp	r2, r3
 800fb94:	d90a      	bls.n	800fbac <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	699a      	ldr	r2, [r3, #24]
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	7d1b      	ldrb	r3, [r3, #20]
 800fba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fba6:	b2da      	uxtb	r2, r3
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	699b      	ldr	r3, [r3, #24]
 800fbb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d040      	beq.n	800fc3a <f_lseek+0x48c>
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	6a1b      	ldr	r3, [r3, #32]
 800fbbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fbbe:	429a      	cmp	r2, r3
 800fbc0:	d03b      	beq.n	800fc3a <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	7d1b      	ldrb	r3, [r3, #20]
 800fbc6:	b25b      	sxtb	r3, r3
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	da1d      	bge.n	800fc08 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fbcc:	68bb      	ldr	r3, [r7, #8]
 800fbce:	7858      	ldrb	r0, [r3, #1]
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	6a1a      	ldr	r2, [r3, #32]
 800fbda:	2301      	movs	r3, #1
 800fbdc:	f7fd fb7c 	bl	800d2d8 <disk_write>
 800fbe0:	4603      	mov	r3, r0
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d009      	beq.n	800fbfa <f_lseek+0x44c>
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	2201      	movs	r2, #1
 800fbea:	755a      	strb	r2, [r3, #21]
 800fbec:	68bb      	ldr	r3, [r7, #8]
 800fbee:	2101      	movs	r1, #1
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	f7fd fcc5 	bl	800d580 <unlock_fs>
 800fbf6:	2301      	movs	r3, #1
 800fbf8:	e028      	b.n	800fc4c <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	7d1b      	ldrb	r3, [r3, #20]
 800fbfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fc02:	b2da      	uxtb	r2, r3
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800fc08:	68bb      	ldr	r3, [r7, #8]
 800fc0a:	7858      	ldrb	r0, [r3, #1]
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fc12:	2301      	movs	r3, #1
 800fc14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fc16:	f7fd fb3f 	bl	800d298 <disk_read>
 800fc1a:	4603      	mov	r3, r0
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d009      	beq.n	800fc34 <f_lseek+0x486>
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	2201      	movs	r2, #1
 800fc24:	755a      	strb	r2, [r3, #21]
 800fc26:	68bb      	ldr	r3, [r7, #8]
 800fc28:	2101      	movs	r1, #1
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	f7fd fca8 	bl	800d580 <unlock_fs>
 800fc30:	2301      	movs	r3, #1
 800fc32:	e00b      	b.n	800fc4c <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fc38:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800fc3a:	68bb      	ldr	r3, [r7, #8]
 800fc3c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800fc40:	4611      	mov	r1, r2
 800fc42:	4618      	mov	r0, r3
 800fc44:	f7fd fc9c 	bl	800d580 <unlock_fs>
 800fc48:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	3740      	adds	r7, #64	; 0x40
 800fc50:	46bd      	mov	sp, r7
 800fc52:	bd80      	pop	{r7, pc}

0800fc54 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800fc54:	b580      	push	{r7, lr}
 800fc56:	b086      	sub	sp, #24
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	6078      	str	r0, [r7, #4]
 800fc5c:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d101      	bne.n	800fc68 <f_opendir+0x14>
 800fc64:	2309      	movs	r3, #9
 800fc66:	e06a      	b.n	800fd3e <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800fc6c:	f107 010c 	add.w	r1, r7, #12
 800fc70:	463b      	mov	r3, r7
 800fc72:	2200      	movs	r2, #0
 800fc74:	4618      	mov	r0, r3
 800fc76:	f7fe fe79 	bl	800e96c <find_volume>
 800fc7a:	4603      	mov	r3, r0
 800fc7c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fc7e:	7dfb      	ldrb	r3, [r7, #23]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d14f      	bne.n	800fd24 <f_opendir+0xd0>
		obj->fs = fs;
 800fc84:	68fa      	ldr	r2, [r7, #12]
 800fc86:	693b      	ldr	r3, [r7, #16]
 800fc88:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800fc8a:	683b      	ldr	r3, [r7, #0]
 800fc8c:	4619      	mov	r1, r3
 800fc8e:	6878      	ldr	r0, [r7, #4]
 800fc90:	f7fe fd60 	bl	800e754 <follow_path>
 800fc94:	4603      	mov	r3, r0
 800fc96:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800fc98:	7dfb      	ldrb	r3, [r7, #23]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d13d      	bne.n	800fd1a <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fca4:	b25b      	sxtb	r3, r3
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	db12      	blt.n	800fcd0 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800fcaa:	693b      	ldr	r3, [r7, #16]
 800fcac:	799b      	ldrb	r3, [r3, #6]
 800fcae:	f003 0310 	and.w	r3, r3, #16
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d00a      	beq.n	800fccc <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800fcb6:	68fa      	ldr	r2, [r7, #12]
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	6a1b      	ldr	r3, [r3, #32]
 800fcbc:	4619      	mov	r1, r3
 800fcbe:	4610      	mov	r0, r2
 800fcc0:	f7fe fb31 	bl	800e326 <ld_clust>
 800fcc4:	4602      	mov	r2, r0
 800fcc6:	693b      	ldr	r3, [r7, #16]
 800fcc8:	609a      	str	r2, [r3, #8]
 800fcca:	e001      	b.n	800fcd0 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800fccc:	2305      	movs	r3, #5
 800fcce:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800fcd0:	7dfb      	ldrb	r3, [r7, #23]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d121      	bne.n	800fd1a <f_opendir+0xc6>
				obj->id = fs->id;
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	88da      	ldrh	r2, [r3, #6]
 800fcda:	693b      	ldr	r3, [r7, #16]
 800fcdc:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800fcde:	2100      	movs	r1, #0
 800fce0:	6878      	ldr	r0, [r7, #4]
 800fce2:	f7fe f999 	bl	800e018 <dir_sdi>
 800fce6:	4603      	mov	r3, r0
 800fce8:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800fcea:	7dfb      	ldrb	r3, [r7, #23]
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d114      	bne.n	800fd1a <f_opendir+0xc6>
					if (obj->sclust) {
 800fcf0:	693b      	ldr	r3, [r7, #16]
 800fcf2:	689b      	ldr	r3, [r3, #8]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d00d      	beq.n	800fd14 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800fcf8:	2100      	movs	r1, #0
 800fcfa:	6878      	ldr	r0, [r7, #4]
 800fcfc:	f7fd fcda 	bl	800d6b4 <inc_lock>
 800fd00:	4602      	mov	r2, r0
 800fd02:	693b      	ldr	r3, [r7, #16]
 800fd04:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800fd06:	693b      	ldr	r3, [r7, #16]
 800fd08:	691b      	ldr	r3, [r3, #16]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d105      	bne.n	800fd1a <f_opendir+0xc6>
 800fd0e:	2312      	movs	r3, #18
 800fd10:	75fb      	strb	r3, [r7, #23]
 800fd12:	e002      	b.n	800fd1a <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800fd14:	693b      	ldr	r3, [r7, #16]
 800fd16:	2200      	movs	r2, #0
 800fd18:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800fd1a:	7dfb      	ldrb	r3, [r7, #23]
 800fd1c:	2b04      	cmp	r3, #4
 800fd1e:	d101      	bne.n	800fd24 <f_opendir+0xd0>
 800fd20:	2305      	movs	r3, #5
 800fd22:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800fd24:	7dfb      	ldrb	r3, [r7, #23]
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d002      	beq.n	800fd30 <f_opendir+0xdc>
 800fd2a:	693b      	ldr	r3, [r7, #16]
 800fd2c:	2200      	movs	r2, #0
 800fd2e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	7dfa      	ldrb	r2, [r7, #23]
 800fd34:	4611      	mov	r1, r2
 800fd36:	4618      	mov	r0, r3
 800fd38:	f7fd fc22 	bl	800d580 <unlock_fs>
 800fd3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd3e:	4618      	mov	r0, r3
 800fd40:	3718      	adds	r7, #24
 800fd42:	46bd      	mov	sp, r7
 800fd44:	bd80      	pop	{r7, pc}

0800fd46 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800fd46:	b580      	push	{r7, lr}
 800fd48:	b084      	sub	sp, #16
 800fd4a:	af00      	add	r7, sp, #0
 800fd4c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	f107 0208 	add.w	r2, r7, #8
 800fd54:	4611      	mov	r1, r2
 800fd56:	4618      	mov	r0, r3
 800fd58:	f7ff f85c 	bl	800ee14 <validate>
 800fd5c:	4603      	mov	r3, r0
 800fd5e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800fd60:	7bfb      	ldrb	r3, [r7, #15]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d115      	bne.n	800fd92 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	691b      	ldr	r3, [r3, #16]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d006      	beq.n	800fd7c <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	691b      	ldr	r3, [r3, #16]
 800fd72:	4618      	mov	r0, r3
 800fd74:	f7fd fd2c 	bl	800d7d0 <dec_lock>
 800fd78:	4603      	mov	r3, r0
 800fd7a:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800fd7c:	7bfb      	ldrb	r3, [r7, #15]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d102      	bne.n	800fd88 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	2200      	movs	r2, #0
 800fd86:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 800fd88:	68bb      	ldr	r3, [r7, #8]
 800fd8a:	2100      	movs	r1, #0
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	f7fd fbf7 	bl	800d580 <unlock_fs>
#endif
	}
	return res;
 800fd92:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd94:	4618      	mov	r0, r3
 800fd96:	3710      	adds	r7, #16
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	bd80      	pop	{r7, pc}

0800fd9c <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	b084      	sub	sp, #16
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	6078      	str	r0, [r7, #4]
 800fda4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	f107 0208 	add.w	r2, r7, #8
 800fdac:	4611      	mov	r1, r2
 800fdae:	4618      	mov	r0, r3
 800fdb0:	f7ff f830 	bl	800ee14 <validate>
 800fdb4:	4603      	mov	r3, r0
 800fdb6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800fdb8:	7bfb      	ldrb	r3, [r7, #15]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d126      	bne.n	800fe0c <f_readdir+0x70>
		if (!fno) {
 800fdbe:	683b      	ldr	r3, [r7, #0]
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d106      	bne.n	800fdd2 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800fdc4:	2100      	movs	r1, #0
 800fdc6:	6878      	ldr	r0, [r7, #4]
 800fdc8:	f7fe f926 	bl	800e018 <dir_sdi>
 800fdcc:	4603      	mov	r3, r0
 800fdce:	73fb      	strb	r3, [r7, #15]
 800fdd0:	e01c      	b.n	800fe0c <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800fdd2:	2100      	movs	r1, #0
 800fdd4:	6878      	ldr	r0, [r7, #4]
 800fdd6:	f7fe fae5 	bl	800e3a4 <dir_read>
 800fdda:	4603      	mov	r3, r0
 800fddc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800fdde:	7bfb      	ldrb	r3, [r7, #15]
 800fde0:	2b04      	cmp	r3, #4
 800fde2:	d101      	bne.n	800fde8 <f_readdir+0x4c>
 800fde4:	2300      	movs	r3, #0
 800fde6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800fde8:	7bfb      	ldrb	r3, [r7, #15]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d10e      	bne.n	800fe0c <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800fdee:	6839      	ldr	r1, [r7, #0]
 800fdf0:	6878      	ldr	r0, [r7, #4]
 800fdf2:	f7fe fbbb 	bl	800e56c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800fdf6:	2100      	movs	r1, #0
 800fdf8:	6878      	ldr	r0, [r7, #4]
 800fdfa:	f7fe f988 	bl	800e10e <dir_next>
 800fdfe:	4603      	mov	r3, r0
 800fe00:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800fe02:	7bfb      	ldrb	r3, [r7, #15]
 800fe04:	2b04      	cmp	r3, #4
 800fe06:	d101      	bne.n	800fe0c <f_readdir+0x70>
 800fe08:	2300      	movs	r3, #0
 800fe0a:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800fe0c:	68bb      	ldr	r3, [r7, #8]
 800fe0e:	7bfa      	ldrb	r2, [r7, #15]
 800fe10:	4611      	mov	r1, r2
 800fe12:	4618      	mov	r0, r3
 800fe14:	f7fd fbb4 	bl	800d580 <unlock_fs>
 800fe18:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	3710      	adds	r7, #16
 800fe1e:	46bd      	mov	sp, r7
 800fe20:	bd80      	pop	{r7, pc}
	...

0800fe24 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800fe24:	b480      	push	{r7}
 800fe26:	b087      	sub	sp, #28
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	60f8      	str	r0, [r7, #12]
 800fe2c:	60b9      	str	r1, [r7, #8]
 800fe2e:	4613      	mov	r3, r2
 800fe30:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800fe32:	2301      	movs	r3, #1
 800fe34:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800fe36:	2300      	movs	r3, #0
 800fe38:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800fe3a:	4b1f      	ldr	r3, [pc, #124]	; (800feb8 <FATFS_LinkDriverEx+0x94>)
 800fe3c:	7a5b      	ldrb	r3, [r3, #9]
 800fe3e:	b2db      	uxtb	r3, r3
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d131      	bne.n	800fea8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800fe44:	4b1c      	ldr	r3, [pc, #112]	; (800feb8 <FATFS_LinkDriverEx+0x94>)
 800fe46:	7a5b      	ldrb	r3, [r3, #9]
 800fe48:	b2db      	uxtb	r3, r3
 800fe4a:	461a      	mov	r2, r3
 800fe4c:	4b1a      	ldr	r3, [pc, #104]	; (800feb8 <FATFS_LinkDriverEx+0x94>)
 800fe4e:	2100      	movs	r1, #0
 800fe50:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800fe52:	4b19      	ldr	r3, [pc, #100]	; (800feb8 <FATFS_LinkDriverEx+0x94>)
 800fe54:	7a5b      	ldrb	r3, [r3, #9]
 800fe56:	b2db      	uxtb	r3, r3
 800fe58:	4a17      	ldr	r2, [pc, #92]	; (800feb8 <FATFS_LinkDriverEx+0x94>)
 800fe5a:	009b      	lsls	r3, r3, #2
 800fe5c:	4413      	add	r3, r2
 800fe5e:	68fa      	ldr	r2, [r7, #12]
 800fe60:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800fe62:	4b15      	ldr	r3, [pc, #84]	; (800feb8 <FATFS_LinkDriverEx+0x94>)
 800fe64:	7a5b      	ldrb	r3, [r3, #9]
 800fe66:	b2db      	uxtb	r3, r3
 800fe68:	461a      	mov	r2, r3
 800fe6a:	4b13      	ldr	r3, [pc, #76]	; (800feb8 <FATFS_LinkDriverEx+0x94>)
 800fe6c:	4413      	add	r3, r2
 800fe6e:	79fa      	ldrb	r2, [r7, #7]
 800fe70:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800fe72:	4b11      	ldr	r3, [pc, #68]	; (800feb8 <FATFS_LinkDriverEx+0x94>)
 800fe74:	7a5b      	ldrb	r3, [r3, #9]
 800fe76:	b2db      	uxtb	r3, r3
 800fe78:	1c5a      	adds	r2, r3, #1
 800fe7a:	b2d1      	uxtb	r1, r2
 800fe7c:	4a0e      	ldr	r2, [pc, #56]	; (800feb8 <FATFS_LinkDriverEx+0x94>)
 800fe7e:	7251      	strb	r1, [r2, #9]
 800fe80:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800fe82:	7dbb      	ldrb	r3, [r7, #22]
 800fe84:	3330      	adds	r3, #48	; 0x30
 800fe86:	b2da      	uxtb	r2, r3
 800fe88:	68bb      	ldr	r3, [r7, #8]
 800fe8a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800fe8c:	68bb      	ldr	r3, [r7, #8]
 800fe8e:	3301      	adds	r3, #1
 800fe90:	223a      	movs	r2, #58	; 0x3a
 800fe92:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800fe94:	68bb      	ldr	r3, [r7, #8]
 800fe96:	3302      	adds	r3, #2
 800fe98:	222f      	movs	r2, #47	; 0x2f
 800fe9a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800fe9c:	68bb      	ldr	r3, [r7, #8]
 800fe9e:	3303      	adds	r3, #3
 800fea0:	2200      	movs	r2, #0
 800fea2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800fea4:	2300      	movs	r3, #0
 800fea6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800fea8:	7dfb      	ldrb	r3, [r7, #23]
}
 800feaa:	4618      	mov	r0, r3
 800feac:	371c      	adds	r7, #28
 800feae:	46bd      	mov	sp, r7
 800feb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb4:	4770      	bx	lr
 800feb6:	bf00      	nop
 800feb8:	20000480 	.word	0x20000480

0800febc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800febc:	b580      	push	{r7, lr}
 800febe:	b082      	sub	sp, #8
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]
 800fec4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800fec6:	2200      	movs	r2, #0
 800fec8:	6839      	ldr	r1, [r7, #0]
 800feca:	6878      	ldr	r0, [r7, #4]
 800fecc:	f7ff ffaa 	bl	800fe24 <FATFS_LinkDriverEx>
 800fed0:	4603      	mov	r3, r0
}
 800fed2:	4618      	mov	r0, r3
 800fed4:	3708      	adds	r7, #8
 800fed6:	46bd      	mov	sp, r7
 800fed8:	bd80      	pop	{r7, pc}

0800feda <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800feda:	b580      	push	{r7, lr}
 800fedc:	b084      	sub	sp, #16
 800fede:	af00      	add	r7, sp, #0
 800fee0:	4603      	mov	r3, r0
 800fee2:	6039      	str	r1, [r7, #0]
 800fee4:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800fee6:	2200      	movs	r2, #0
 800fee8:	2101      	movs	r1, #1
 800feea:	2001      	movs	r0, #1
 800feec:	f000 f867 	bl	800ffbe <osSemaphoreNew>
 800fef0:	4602      	mov	r2, r0
 800fef2:	683b      	ldr	r3, [r7, #0]
 800fef4:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800fef6:	683b      	ldr	r3, [r7, #0]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	bf14      	ite	ne
 800fefe:	2301      	movne	r3, #1
 800ff00:	2300      	moveq	r3, #0
 800ff02:	b2db      	uxtb	r3, r3
 800ff04:	60fb      	str	r3, [r7, #12]

    return ret;
 800ff06:	68fb      	ldr	r3, [r7, #12]
}
 800ff08:	4618      	mov	r0, r3
 800ff0a:	3710      	adds	r7, #16
 800ff0c:	46bd      	mov	sp, r7
 800ff0e:	bd80      	pop	{r7, pc}

0800ff10 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800ff10:	b580      	push	{r7, lr}
 800ff12:	b082      	sub	sp, #8
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800ff18:	6878      	ldr	r0, [r7, #4]
 800ff1a:	f000 f96f 	bl	80101fc <osSemaphoreDelete>
#endif
    return 1;
 800ff1e:	2301      	movs	r3, #1
}
 800ff20:	4618      	mov	r0, r3
 800ff22:	3708      	adds	r7, #8
 800ff24:	46bd      	mov	sp, r7
 800ff26:	bd80      	pop	{r7, pc}

0800ff28 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b084      	sub	sp, #16
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800ff30:	2300      	movs	r3, #0
 800ff32:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800ff34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ff38:	6878      	ldr	r0, [r7, #4]
 800ff3a:	f000 f8c9 	bl	80100d0 <osSemaphoreAcquire>
 800ff3e:	4603      	mov	r3, r0
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d101      	bne.n	800ff48 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800ff44:	2301      	movs	r3, #1
 800ff46:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800ff48:	68fb      	ldr	r3, [r7, #12]
}
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	3710      	adds	r7, #16
 800ff4e:	46bd      	mov	sp, r7
 800ff50:	bd80      	pop	{r7, pc}

0800ff52 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800ff52:	b580      	push	{r7, lr}
 800ff54:	b082      	sub	sp, #8
 800ff56:	af00      	add	r7, sp, #0
 800ff58:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800ff5a:	6878      	ldr	r0, [r7, #4]
 800ff5c:	f000 f90a 	bl	8010174 <osSemaphoreRelease>
#endif
}
 800ff60:	bf00      	nop
 800ff62:	3708      	adds	r7, #8
 800ff64:	46bd      	mov	sp, r7
 800ff66:	bd80      	pop	{r7, pc}

0800ff68 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ff6c:	4b05      	ldr	r3, [pc, #20]	; (800ff84 <SysTick_Handler+0x1c>)
 800ff6e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ff70:	f001 fb9a 	bl	80116a8 <xTaskGetSchedulerState>
 800ff74:	4603      	mov	r3, r0
 800ff76:	2b01      	cmp	r3, #1
 800ff78:	d001      	beq.n	800ff7e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ff7a:	f001 fe1d 	bl	8011bb8 <xPortSysTickHandler>
  }
}
 800ff7e:	bf00      	nop
 800ff80:	bd80      	pop	{r7, pc}
 800ff82:	bf00      	nop
 800ff84:	e000e010 	.word	0xe000e010

0800ff88 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ff88:	b580      	push	{r7, lr}
 800ff8a:	b084      	sub	sp, #16
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ff90:	f3ef 8305 	mrs	r3, IPSR
 800ff94:	60bb      	str	r3, [r7, #8]
  return(result);
 800ff96:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d003      	beq.n	800ffa4 <osDelay+0x1c>
    stat = osErrorISR;
 800ff9c:	f06f 0305 	mvn.w	r3, #5
 800ffa0:	60fb      	str	r3, [r7, #12]
 800ffa2:	e007      	b.n	800ffb4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d002      	beq.n	800ffb4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ffae:	6878      	ldr	r0, [r7, #4]
 800ffb0:	f001 f850 	bl	8011054 <vTaskDelay>
    }
  }

  return (stat);
 800ffb4:	68fb      	ldr	r3, [r7, #12]
}
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	3710      	adds	r7, #16
 800ffba:	46bd      	mov	sp, r7
 800ffbc:	bd80      	pop	{r7, pc}

0800ffbe <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800ffbe:	b580      	push	{r7, lr}
 800ffc0:	b08a      	sub	sp, #40	; 0x28
 800ffc2:	af02      	add	r7, sp, #8
 800ffc4:	60f8      	str	r0, [r7, #12]
 800ffc6:	60b9      	str	r1, [r7, #8]
 800ffc8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800ffca:	2300      	movs	r3, #0
 800ffcc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ffce:	f3ef 8305 	mrs	r3, IPSR
 800ffd2:	613b      	str	r3, [r7, #16]
  return(result);
 800ffd4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d175      	bne.n	80100c6 <osSemaphoreNew+0x108>
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d072      	beq.n	80100c6 <osSemaphoreNew+0x108>
 800ffe0:	68ba      	ldr	r2, [r7, #8]
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	429a      	cmp	r2, r3
 800ffe6:	d86e      	bhi.n	80100c6 <osSemaphoreNew+0x108>
    mem = -1;
 800ffe8:	f04f 33ff 	mov.w	r3, #4294967295
 800ffec:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d015      	beq.n	8010020 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	689b      	ldr	r3, [r3, #8]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d006      	beq.n	801000a <osSemaphoreNew+0x4c>
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	68db      	ldr	r3, [r3, #12]
 8010000:	2b4f      	cmp	r3, #79	; 0x4f
 8010002:	d902      	bls.n	801000a <osSemaphoreNew+0x4c>
        mem = 1;
 8010004:	2301      	movs	r3, #1
 8010006:	61bb      	str	r3, [r7, #24]
 8010008:	e00c      	b.n	8010024 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	689b      	ldr	r3, [r3, #8]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d108      	bne.n	8010024 <osSemaphoreNew+0x66>
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	68db      	ldr	r3, [r3, #12]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d104      	bne.n	8010024 <osSemaphoreNew+0x66>
          mem = 0;
 801001a:	2300      	movs	r3, #0
 801001c:	61bb      	str	r3, [r7, #24]
 801001e:	e001      	b.n	8010024 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8010020:	2300      	movs	r3, #0
 8010022:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8010024:	69bb      	ldr	r3, [r7, #24]
 8010026:	f1b3 3fff 	cmp.w	r3, #4294967295
 801002a:	d04c      	beq.n	80100c6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	2b01      	cmp	r3, #1
 8010030:	d128      	bne.n	8010084 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8010032:	69bb      	ldr	r3, [r7, #24]
 8010034:	2b01      	cmp	r3, #1
 8010036:	d10a      	bne.n	801004e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	689b      	ldr	r3, [r3, #8]
 801003c:	2203      	movs	r2, #3
 801003e:	9200      	str	r2, [sp, #0]
 8010040:	2200      	movs	r2, #0
 8010042:	2100      	movs	r1, #0
 8010044:	2001      	movs	r0, #1
 8010046:	f000 fa0d 	bl	8010464 <xQueueGenericCreateStatic>
 801004a:	61f8      	str	r0, [r7, #28]
 801004c:	e005      	b.n	801005a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 801004e:	2203      	movs	r2, #3
 8010050:	2100      	movs	r1, #0
 8010052:	2001      	movs	r0, #1
 8010054:	f000 fa7e 	bl	8010554 <xQueueGenericCreate>
 8010058:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 801005a:	69fb      	ldr	r3, [r7, #28]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d022      	beq.n	80100a6 <osSemaphoreNew+0xe8>
 8010060:	68bb      	ldr	r3, [r7, #8]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d01f      	beq.n	80100a6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8010066:	2300      	movs	r3, #0
 8010068:	2200      	movs	r2, #0
 801006a:	2100      	movs	r1, #0
 801006c:	69f8      	ldr	r0, [r7, #28]
 801006e:	f000 fb39 	bl	80106e4 <xQueueGenericSend>
 8010072:	4603      	mov	r3, r0
 8010074:	2b01      	cmp	r3, #1
 8010076:	d016      	beq.n	80100a6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8010078:	69f8      	ldr	r0, [r7, #28]
 801007a:	f000 fe4b 	bl	8010d14 <vQueueDelete>
            hSemaphore = NULL;
 801007e:	2300      	movs	r3, #0
 8010080:	61fb      	str	r3, [r7, #28]
 8010082:	e010      	b.n	80100a6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8010084:	69bb      	ldr	r3, [r7, #24]
 8010086:	2b01      	cmp	r3, #1
 8010088:	d108      	bne.n	801009c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	689b      	ldr	r3, [r3, #8]
 801008e:	461a      	mov	r2, r3
 8010090:	68b9      	ldr	r1, [r7, #8]
 8010092:	68f8      	ldr	r0, [r7, #12]
 8010094:	f000 fabb 	bl	801060e <xQueueCreateCountingSemaphoreStatic>
 8010098:	61f8      	str	r0, [r7, #28]
 801009a:	e004      	b.n	80100a6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 801009c:	68b9      	ldr	r1, [r7, #8]
 801009e:	68f8      	ldr	r0, [r7, #12]
 80100a0:	f000 faec 	bl	801067c <xQueueCreateCountingSemaphore>
 80100a4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80100a6:	69fb      	ldr	r3, [r7, #28]
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d00c      	beq.n	80100c6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d003      	beq.n	80100ba <osSemaphoreNew+0xfc>
          name = attr->name;
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	617b      	str	r3, [r7, #20]
 80100b8:	e001      	b.n	80100be <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80100ba:	2300      	movs	r3, #0
 80100bc:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80100be:	6979      	ldr	r1, [r7, #20]
 80100c0:	69f8      	ldr	r0, [r7, #28]
 80100c2:	f000 ff73 	bl	8010fac <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80100c6:	69fb      	ldr	r3, [r7, #28]
}
 80100c8:	4618      	mov	r0, r3
 80100ca:	3720      	adds	r7, #32
 80100cc:	46bd      	mov	sp, r7
 80100ce:	bd80      	pop	{r7, pc}

080100d0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80100d0:	b580      	push	{r7, lr}
 80100d2:	b086      	sub	sp, #24
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	6078      	str	r0, [r7, #4]
 80100d8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80100de:	2300      	movs	r3, #0
 80100e0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80100e2:	693b      	ldr	r3, [r7, #16]
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d103      	bne.n	80100f0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80100e8:	f06f 0303 	mvn.w	r3, #3
 80100ec:	617b      	str	r3, [r7, #20]
 80100ee:	e039      	b.n	8010164 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80100f0:	f3ef 8305 	mrs	r3, IPSR
 80100f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80100f6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d022      	beq.n	8010142 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80100fc:	683b      	ldr	r3, [r7, #0]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d003      	beq.n	801010a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8010102:	f06f 0303 	mvn.w	r3, #3
 8010106:	617b      	str	r3, [r7, #20]
 8010108:	e02c      	b.n	8010164 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 801010a:	2300      	movs	r3, #0
 801010c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 801010e:	f107 0308 	add.w	r3, r7, #8
 8010112:	461a      	mov	r2, r3
 8010114:	2100      	movs	r1, #0
 8010116:	6938      	ldr	r0, [r7, #16]
 8010118:	f000 fd7c 	bl	8010c14 <xQueueReceiveFromISR>
 801011c:	4603      	mov	r3, r0
 801011e:	2b01      	cmp	r3, #1
 8010120:	d003      	beq.n	801012a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8010122:	f06f 0302 	mvn.w	r3, #2
 8010126:	617b      	str	r3, [r7, #20]
 8010128:	e01c      	b.n	8010164 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 801012a:	68bb      	ldr	r3, [r7, #8]
 801012c:	2b00      	cmp	r3, #0
 801012e:	d019      	beq.n	8010164 <osSemaphoreAcquire+0x94>
 8010130:	4b0f      	ldr	r3, [pc, #60]	; (8010170 <osSemaphoreAcquire+0xa0>)
 8010132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010136:	601a      	str	r2, [r3, #0]
 8010138:	f3bf 8f4f 	dsb	sy
 801013c:	f3bf 8f6f 	isb	sy
 8010140:	e010      	b.n	8010164 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8010142:	6839      	ldr	r1, [r7, #0]
 8010144:	6938      	ldr	r0, [r7, #16]
 8010146:	f000 fc59 	bl	80109fc <xQueueSemaphoreTake>
 801014a:	4603      	mov	r3, r0
 801014c:	2b01      	cmp	r3, #1
 801014e:	d009      	beq.n	8010164 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8010150:	683b      	ldr	r3, [r7, #0]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d003      	beq.n	801015e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8010156:	f06f 0301 	mvn.w	r3, #1
 801015a:	617b      	str	r3, [r7, #20]
 801015c:	e002      	b.n	8010164 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 801015e:	f06f 0302 	mvn.w	r3, #2
 8010162:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8010164:	697b      	ldr	r3, [r7, #20]
}
 8010166:	4618      	mov	r0, r3
 8010168:	3718      	adds	r7, #24
 801016a:	46bd      	mov	sp, r7
 801016c:	bd80      	pop	{r7, pc}
 801016e:	bf00      	nop
 8010170:	e000ed04 	.word	0xe000ed04

08010174 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8010174:	b580      	push	{r7, lr}
 8010176:	b086      	sub	sp, #24
 8010178:	af00      	add	r7, sp, #0
 801017a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8010180:	2300      	movs	r3, #0
 8010182:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8010184:	693b      	ldr	r3, [r7, #16]
 8010186:	2b00      	cmp	r3, #0
 8010188:	d103      	bne.n	8010192 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 801018a:	f06f 0303 	mvn.w	r3, #3
 801018e:	617b      	str	r3, [r7, #20]
 8010190:	e02c      	b.n	80101ec <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010192:	f3ef 8305 	mrs	r3, IPSR
 8010196:	60fb      	str	r3, [r7, #12]
  return(result);
 8010198:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801019a:	2b00      	cmp	r3, #0
 801019c:	d01a      	beq.n	80101d4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 801019e:	2300      	movs	r3, #0
 80101a0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80101a2:	f107 0308 	add.w	r3, r7, #8
 80101a6:	4619      	mov	r1, r3
 80101a8:	6938      	ldr	r0, [r7, #16]
 80101aa:	f000 fb99 	bl	80108e0 <xQueueGiveFromISR>
 80101ae:	4603      	mov	r3, r0
 80101b0:	2b01      	cmp	r3, #1
 80101b2:	d003      	beq.n	80101bc <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80101b4:	f06f 0302 	mvn.w	r3, #2
 80101b8:	617b      	str	r3, [r7, #20]
 80101ba:	e017      	b.n	80101ec <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80101bc:	68bb      	ldr	r3, [r7, #8]
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d014      	beq.n	80101ec <osSemaphoreRelease+0x78>
 80101c2:	4b0d      	ldr	r3, [pc, #52]	; (80101f8 <osSemaphoreRelease+0x84>)
 80101c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80101c8:	601a      	str	r2, [r3, #0]
 80101ca:	f3bf 8f4f 	dsb	sy
 80101ce:	f3bf 8f6f 	isb	sy
 80101d2:	e00b      	b.n	80101ec <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80101d4:	2300      	movs	r3, #0
 80101d6:	2200      	movs	r2, #0
 80101d8:	2100      	movs	r1, #0
 80101da:	6938      	ldr	r0, [r7, #16]
 80101dc:	f000 fa82 	bl	80106e4 <xQueueGenericSend>
 80101e0:	4603      	mov	r3, r0
 80101e2:	2b01      	cmp	r3, #1
 80101e4:	d002      	beq.n	80101ec <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80101e6:	f06f 0302 	mvn.w	r3, #2
 80101ea:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80101ec:	697b      	ldr	r3, [r7, #20]
}
 80101ee:	4618      	mov	r0, r3
 80101f0:	3718      	adds	r7, #24
 80101f2:	46bd      	mov	sp, r7
 80101f4:	bd80      	pop	{r7, pc}
 80101f6:	bf00      	nop
 80101f8:	e000ed04 	.word	0xe000ed04

080101fc <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 80101fc:	b580      	push	{r7, lr}
 80101fe:	b086      	sub	sp, #24
 8010200:	af00      	add	r7, sp, #0
 8010202:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010208:	f3ef 8305 	mrs	r3, IPSR
 801020c:	60fb      	str	r3, [r7, #12]
  return(result);
 801020e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8010210:	2b00      	cmp	r3, #0
 8010212:	d003      	beq.n	801021c <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8010214:	f06f 0305 	mvn.w	r3, #5
 8010218:	617b      	str	r3, [r7, #20]
 801021a:	e00e      	b.n	801023a <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 801021c:	693b      	ldr	r3, [r7, #16]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d103      	bne.n	801022a <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8010222:	f06f 0303 	mvn.w	r3, #3
 8010226:	617b      	str	r3, [r7, #20]
 8010228:	e007      	b.n	801023a <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 801022a:	6938      	ldr	r0, [r7, #16]
 801022c:	f000 fee8 	bl	8011000 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8010230:	2300      	movs	r3, #0
 8010232:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8010234:	6938      	ldr	r0, [r7, #16]
 8010236:	f000 fd6d 	bl	8010d14 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 801023a:	697b      	ldr	r3, [r7, #20]
}
 801023c:	4618      	mov	r0, r3
 801023e:	3718      	adds	r7, #24
 8010240:	46bd      	mov	sp, r7
 8010242:	bd80      	pop	{r7, pc}

08010244 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010244:	b480      	push	{r7}
 8010246:	b083      	sub	sp, #12
 8010248:	af00      	add	r7, sp, #0
 801024a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	f103 0208 	add.w	r2, r3, #8
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	f04f 32ff 	mov.w	r2, #4294967295
 801025c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	f103 0208 	add.w	r2, r3, #8
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	f103 0208 	add.w	r2, r3, #8
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	2200      	movs	r2, #0
 8010276:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010278:	bf00      	nop
 801027a:	370c      	adds	r7, #12
 801027c:	46bd      	mov	sp, r7
 801027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010282:	4770      	bx	lr

08010284 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010284:	b480      	push	{r7}
 8010286:	b085      	sub	sp, #20
 8010288:	af00      	add	r7, sp, #0
 801028a:	6078      	str	r0, [r7, #4]
 801028c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	685b      	ldr	r3, [r3, #4]
 8010292:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010294:	683b      	ldr	r3, [r7, #0]
 8010296:	68fa      	ldr	r2, [r7, #12]
 8010298:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	689a      	ldr	r2, [r3, #8]
 801029e:	683b      	ldr	r3, [r7, #0]
 80102a0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	689b      	ldr	r3, [r3, #8]
 80102a6:	683a      	ldr	r2, [r7, #0]
 80102a8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	683a      	ldr	r2, [r7, #0]
 80102ae:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80102b0:	683b      	ldr	r3, [r7, #0]
 80102b2:	687a      	ldr	r2, [r7, #4]
 80102b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	1c5a      	adds	r2, r3, #1
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	601a      	str	r2, [r3, #0]
}
 80102c0:	bf00      	nop
 80102c2:	3714      	adds	r7, #20
 80102c4:	46bd      	mov	sp, r7
 80102c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ca:	4770      	bx	lr

080102cc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80102cc:	b480      	push	{r7}
 80102ce:	b085      	sub	sp, #20
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
 80102d4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80102d6:	683b      	ldr	r3, [r7, #0]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80102dc:	68bb      	ldr	r3, [r7, #8]
 80102de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102e2:	d103      	bne.n	80102ec <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	691b      	ldr	r3, [r3, #16]
 80102e8:	60fb      	str	r3, [r7, #12]
 80102ea:	e00c      	b.n	8010306 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	3308      	adds	r3, #8
 80102f0:	60fb      	str	r3, [r7, #12]
 80102f2:	e002      	b.n	80102fa <vListInsert+0x2e>
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	685b      	ldr	r3, [r3, #4]
 80102f8:	60fb      	str	r3, [r7, #12]
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	685b      	ldr	r3, [r3, #4]
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	68ba      	ldr	r2, [r7, #8]
 8010302:	429a      	cmp	r2, r3
 8010304:	d2f6      	bcs.n	80102f4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	685a      	ldr	r2, [r3, #4]
 801030a:	683b      	ldr	r3, [r7, #0]
 801030c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801030e:	683b      	ldr	r3, [r7, #0]
 8010310:	685b      	ldr	r3, [r3, #4]
 8010312:	683a      	ldr	r2, [r7, #0]
 8010314:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010316:	683b      	ldr	r3, [r7, #0]
 8010318:	68fa      	ldr	r2, [r7, #12]
 801031a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	683a      	ldr	r2, [r7, #0]
 8010320:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010322:	683b      	ldr	r3, [r7, #0]
 8010324:	687a      	ldr	r2, [r7, #4]
 8010326:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	1c5a      	adds	r2, r3, #1
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	601a      	str	r2, [r3, #0]
}
 8010332:	bf00      	nop
 8010334:	3714      	adds	r7, #20
 8010336:	46bd      	mov	sp, r7
 8010338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801033c:	4770      	bx	lr

0801033e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801033e:	b480      	push	{r7}
 8010340:	b085      	sub	sp, #20
 8010342:	af00      	add	r7, sp, #0
 8010344:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	691b      	ldr	r3, [r3, #16]
 801034a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	685b      	ldr	r3, [r3, #4]
 8010350:	687a      	ldr	r2, [r7, #4]
 8010352:	6892      	ldr	r2, [r2, #8]
 8010354:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	689b      	ldr	r3, [r3, #8]
 801035a:	687a      	ldr	r2, [r7, #4]
 801035c:	6852      	ldr	r2, [r2, #4]
 801035e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	685b      	ldr	r3, [r3, #4]
 8010364:	687a      	ldr	r2, [r7, #4]
 8010366:	429a      	cmp	r2, r3
 8010368:	d103      	bne.n	8010372 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	689a      	ldr	r2, [r3, #8]
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	2200      	movs	r2, #0
 8010376:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	1e5a      	subs	r2, r3, #1
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	681b      	ldr	r3, [r3, #0]
}
 8010386:	4618      	mov	r0, r3
 8010388:	3714      	adds	r7, #20
 801038a:	46bd      	mov	sp, r7
 801038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010390:	4770      	bx	lr
	...

08010394 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010394:	b580      	push	{r7, lr}
 8010396:	b084      	sub	sp, #16
 8010398:	af00      	add	r7, sp, #0
 801039a:	6078      	str	r0, [r7, #4]
 801039c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d10a      	bne.n	80103be <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80103a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103ac:	f383 8811 	msr	BASEPRI, r3
 80103b0:	f3bf 8f6f 	isb	sy
 80103b4:	f3bf 8f4f 	dsb	sy
 80103b8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80103ba:	bf00      	nop
 80103bc:	e7fe      	b.n	80103bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80103be:	f001 fb6b 	bl	8011a98 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	681a      	ldr	r2, [r3, #0]
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80103ca:	68f9      	ldr	r1, [r7, #12]
 80103cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80103ce:	fb01 f303 	mul.w	r3, r1, r3
 80103d2:	441a      	add	r2, r3
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	2200      	movs	r2, #0
 80103dc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	681a      	ldr	r2, [r3, #0]
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	681a      	ldr	r2, [r3, #0]
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80103ee:	3b01      	subs	r3, #1
 80103f0:	68f9      	ldr	r1, [r7, #12]
 80103f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80103f4:	fb01 f303 	mul.w	r3, r1, r3
 80103f8:	441a      	add	r2, r3
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	22ff      	movs	r2, #255	; 0xff
 8010402:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	22ff      	movs	r2, #255	; 0xff
 801040a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801040e:	683b      	ldr	r3, [r7, #0]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d114      	bne.n	801043e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	691b      	ldr	r3, [r3, #16]
 8010418:	2b00      	cmp	r3, #0
 801041a:	d01a      	beq.n	8010452 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	3310      	adds	r3, #16
 8010420:	4618      	mov	r0, r3
 8010422:	f001 f839 	bl	8011498 <xTaskRemoveFromEventList>
 8010426:	4603      	mov	r3, r0
 8010428:	2b00      	cmp	r3, #0
 801042a:	d012      	beq.n	8010452 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801042c:	4b0c      	ldr	r3, [pc, #48]	; (8010460 <xQueueGenericReset+0xcc>)
 801042e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010432:	601a      	str	r2, [r3, #0]
 8010434:	f3bf 8f4f 	dsb	sy
 8010438:	f3bf 8f6f 	isb	sy
 801043c:	e009      	b.n	8010452 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	3310      	adds	r3, #16
 8010442:	4618      	mov	r0, r3
 8010444:	f7ff fefe 	bl	8010244 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	3324      	adds	r3, #36	; 0x24
 801044c:	4618      	mov	r0, r3
 801044e:	f7ff fef9 	bl	8010244 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010452:	f001 fb51 	bl	8011af8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010456:	2301      	movs	r3, #1
}
 8010458:	4618      	mov	r0, r3
 801045a:	3710      	adds	r7, #16
 801045c:	46bd      	mov	sp, r7
 801045e:	bd80      	pop	{r7, pc}
 8010460:	e000ed04 	.word	0xe000ed04

08010464 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010464:	b580      	push	{r7, lr}
 8010466:	b08e      	sub	sp, #56	; 0x38
 8010468:	af02      	add	r7, sp, #8
 801046a:	60f8      	str	r0, [r7, #12]
 801046c:	60b9      	str	r1, [r7, #8]
 801046e:	607a      	str	r2, [r7, #4]
 8010470:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	2b00      	cmp	r3, #0
 8010476:	d10a      	bne.n	801048e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8010478:	f04f 0350 	mov.w	r3, #80	; 0x50
 801047c:	f383 8811 	msr	BASEPRI, r3
 8010480:	f3bf 8f6f 	isb	sy
 8010484:	f3bf 8f4f 	dsb	sy
 8010488:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801048a:	bf00      	nop
 801048c:	e7fe      	b.n	801048c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801048e:	683b      	ldr	r3, [r7, #0]
 8010490:	2b00      	cmp	r3, #0
 8010492:	d10a      	bne.n	80104aa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8010494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010498:	f383 8811 	msr	BASEPRI, r3
 801049c:	f3bf 8f6f 	isb	sy
 80104a0:	f3bf 8f4f 	dsb	sy
 80104a4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80104a6:	bf00      	nop
 80104a8:	e7fe      	b.n	80104a8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d002      	beq.n	80104b6 <xQueueGenericCreateStatic+0x52>
 80104b0:	68bb      	ldr	r3, [r7, #8]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d001      	beq.n	80104ba <xQueueGenericCreateStatic+0x56>
 80104b6:	2301      	movs	r3, #1
 80104b8:	e000      	b.n	80104bc <xQueueGenericCreateStatic+0x58>
 80104ba:	2300      	movs	r3, #0
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d10a      	bne.n	80104d6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80104c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104c4:	f383 8811 	msr	BASEPRI, r3
 80104c8:	f3bf 8f6f 	isb	sy
 80104cc:	f3bf 8f4f 	dsb	sy
 80104d0:	623b      	str	r3, [r7, #32]
}
 80104d2:	bf00      	nop
 80104d4:	e7fe      	b.n	80104d4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d102      	bne.n	80104e2 <xQueueGenericCreateStatic+0x7e>
 80104dc:	68bb      	ldr	r3, [r7, #8]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d101      	bne.n	80104e6 <xQueueGenericCreateStatic+0x82>
 80104e2:	2301      	movs	r3, #1
 80104e4:	e000      	b.n	80104e8 <xQueueGenericCreateStatic+0x84>
 80104e6:	2300      	movs	r3, #0
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d10a      	bne.n	8010502 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80104ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104f0:	f383 8811 	msr	BASEPRI, r3
 80104f4:	f3bf 8f6f 	isb	sy
 80104f8:	f3bf 8f4f 	dsb	sy
 80104fc:	61fb      	str	r3, [r7, #28]
}
 80104fe:	bf00      	nop
 8010500:	e7fe      	b.n	8010500 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010502:	2350      	movs	r3, #80	; 0x50
 8010504:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010506:	697b      	ldr	r3, [r7, #20]
 8010508:	2b50      	cmp	r3, #80	; 0x50
 801050a:	d00a      	beq.n	8010522 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 801050c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010510:	f383 8811 	msr	BASEPRI, r3
 8010514:	f3bf 8f6f 	isb	sy
 8010518:	f3bf 8f4f 	dsb	sy
 801051c:	61bb      	str	r3, [r7, #24]
}
 801051e:	bf00      	nop
 8010520:	e7fe      	b.n	8010520 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010522:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010524:	683b      	ldr	r3, [r7, #0]
 8010526:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801052a:	2b00      	cmp	r3, #0
 801052c:	d00d      	beq.n	801054a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801052e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010530:	2201      	movs	r2, #1
 8010532:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010536:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801053a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801053c:	9300      	str	r3, [sp, #0]
 801053e:	4613      	mov	r3, r2
 8010540:	687a      	ldr	r2, [r7, #4]
 8010542:	68b9      	ldr	r1, [r7, #8]
 8010544:	68f8      	ldr	r0, [r7, #12]
 8010546:	f000 f83f 	bl	80105c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801054a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801054c:	4618      	mov	r0, r3
 801054e:	3730      	adds	r7, #48	; 0x30
 8010550:	46bd      	mov	sp, r7
 8010552:	bd80      	pop	{r7, pc}

08010554 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010554:	b580      	push	{r7, lr}
 8010556:	b08a      	sub	sp, #40	; 0x28
 8010558:	af02      	add	r7, sp, #8
 801055a:	60f8      	str	r0, [r7, #12]
 801055c:	60b9      	str	r1, [r7, #8]
 801055e:	4613      	mov	r3, r2
 8010560:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	2b00      	cmp	r3, #0
 8010566:	d10a      	bne.n	801057e <xQueueGenericCreate+0x2a>
	__asm volatile
 8010568:	f04f 0350 	mov.w	r3, #80	; 0x50
 801056c:	f383 8811 	msr	BASEPRI, r3
 8010570:	f3bf 8f6f 	isb	sy
 8010574:	f3bf 8f4f 	dsb	sy
 8010578:	613b      	str	r3, [r7, #16]
}
 801057a:	bf00      	nop
 801057c:	e7fe      	b.n	801057c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	68ba      	ldr	r2, [r7, #8]
 8010582:	fb02 f303 	mul.w	r3, r2, r3
 8010586:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010588:	69fb      	ldr	r3, [r7, #28]
 801058a:	3350      	adds	r3, #80	; 0x50
 801058c:	4618      	mov	r0, r3
 801058e:	f001 fb75 	bl	8011c7c <pvPortMalloc>
 8010592:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010594:	69bb      	ldr	r3, [r7, #24]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d011      	beq.n	80105be <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801059a:	69bb      	ldr	r3, [r7, #24]
 801059c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801059e:	697b      	ldr	r3, [r7, #20]
 80105a0:	3350      	adds	r3, #80	; 0x50
 80105a2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80105a4:	69bb      	ldr	r3, [r7, #24]
 80105a6:	2200      	movs	r2, #0
 80105a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80105ac:	79fa      	ldrb	r2, [r7, #7]
 80105ae:	69bb      	ldr	r3, [r7, #24]
 80105b0:	9300      	str	r3, [sp, #0]
 80105b2:	4613      	mov	r3, r2
 80105b4:	697a      	ldr	r2, [r7, #20]
 80105b6:	68b9      	ldr	r1, [r7, #8]
 80105b8:	68f8      	ldr	r0, [r7, #12]
 80105ba:	f000 f805 	bl	80105c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80105be:	69bb      	ldr	r3, [r7, #24]
	}
 80105c0:	4618      	mov	r0, r3
 80105c2:	3720      	adds	r7, #32
 80105c4:	46bd      	mov	sp, r7
 80105c6:	bd80      	pop	{r7, pc}

080105c8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b084      	sub	sp, #16
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	60f8      	str	r0, [r7, #12]
 80105d0:	60b9      	str	r1, [r7, #8]
 80105d2:	607a      	str	r2, [r7, #4]
 80105d4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80105d6:	68bb      	ldr	r3, [r7, #8]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d103      	bne.n	80105e4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80105dc:	69bb      	ldr	r3, [r7, #24]
 80105de:	69ba      	ldr	r2, [r7, #24]
 80105e0:	601a      	str	r2, [r3, #0]
 80105e2:	e002      	b.n	80105ea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80105e4:	69bb      	ldr	r3, [r7, #24]
 80105e6:	687a      	ldr	r2, [r7, #4]
 80105e8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80105ea:	69bb      	ldr	r3, [r7, #24]
 80105ec:	68fa      	ldr	r2, [r7, #12]
 80105ee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80105f0:	69bb      	ldr	r3, [r7, #24]
 80105f2:	68ba      	ldr	r2, [r7, #8]
 80105f4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80105f6:	2101      	movs	r1, #1
 80105f8:	69b8      	ldr	r0, [r7, #24]
 80105fa:	f7ff fecb 	bl	8010394 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80105fe:	69bb      	ldr	r3, [r7, #24]
 8010600:	78fa      	ldrb	r2, [r7, #3]
 8010602:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010606:	bf00      	nop
 8010608:	3710      	adds	r7, #16
 801060a:	46bd      	mov	sp, r7
 801060c:	bd80      	pop	{r7, pc}

0801060e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 801060e:	b580      	push	{r7, lr}
 8010610:	b08a      	sub	sp, #40	; 0x28
 8010612:	af02      	add	r7, sp, #8
 8010614:	60f8      	str	r0, [r7, #12]
 8010616:	60b9      	str	r1, [r7, #8]
 8010618:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	2b00      	cmp	r3, #0
 801061e:	d10a      	bne.n	8010636 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8010620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010624:	f383 8811 	msr	BASEPRI, r3
 8010628:	f3bf 8f6f 	isb	sy
 801062c:	f3bf 8f4f 	dsb	sy
 8010630:	61bb      	str	r3, [r7, #24]
}
 8010632:	bf00      	nop
 8010634:	e7fe      	b.n	8010634 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8010636:	68ba      	ldr	r2, [r7, #8]
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	429a      	cmp	r2, r3
 801063c:	d90a      	bls.n	8010654 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 801063e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010642:	f383 8811 	msr	BASEPRI, r3
 8010646:	f3bf 8f6f 	isb	sy
 801064a:	f3bf 8f4f 	dsb	sy
 801064e:	617b      	str	r3, [r7, #20]
}
 8010650:	bf00      	nop
 8010652:	e7fe      	b.n	8010652 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010654:	2302      	movs	r3, #2
 8010656:	9300      	str	r3, [sp, #0]
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	2200      	movs	r2, #0
 801065c:	2100      	movs	r1, #0
 801065e:	68f8      	ldr	r0, [r7, #12]
 8010660:	f7ff ff00 	bl	8010464 <xQueueGenericCreateStatic>
 8010664:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8010666:	69fb      	ldr	r3, [r7, #28]
 8010668:	2b00      	cmp	r3, #0
 801066a:	d002      	beq.n	8010672 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801066c:	69fb      	ldr	r3, [r7, #28]
 801066e:	68ba      	ldr	r2, [r7, #8]
 8010670:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8010672:	69fb      	ldr	r3, [r7, #28]
	}
 8010674:	4618      	mov	r0, r3
 8010676:	3720      	adds	r7, #32
 8010678:	46bd      	mov	sp, r7
 801067a:	bd80      	pop	{r7, pc}

0801067c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 801067c:	b580      	push	{r7, lr}
 801067e:	b086      	sub	sp, #24
 8010680:	af00      	add	r7, sp, #0
 8010682:	6078      	str	r0, [r7, #4]
 8010684:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d10a      	bne.n	80106a2 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 801068c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010690:	f383 8811 	msr	BASEPRI, r3
 8010694:	f3bf 8f6f 	isb	sy
 8010698:	f3bf 8f4f 	dsb	sy
 801069c:	613b      	str	r3, [r7, #16]
}
 801069e:	bf00      	nop
 80106a0:	e7fe      	b.n	80106a0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80106a2:	683a      	ldr	r2, [r7, #0]
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	429a      	cmp	r2, r3
 80106a8:	d90a      	bls.n	80106c0 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80106aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106ae:	f383 8811 	msr	BASEPRI, r3
 80106b2:	f3bf 8f6f 	isb	sy
 80106b6:	f3bf 8f4f 	dsb	sy
 80106ba:	60fb      	str	r3, [r7, #12]
}
 80106bc:	bf00      	nop
 80106be:	e7fe      	b.n	80106be <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80106c0:	2202      	movs	r2, #2
 80106c2:	2100      	movs	r1, #0
 80106c4:	6878      	ldr	r0, [r7, #4]
 80106c6:	f7ff ff45 	bl	8010554 <xQueueGenericCreate>
 80106ca:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80106cc:	697b      	ldr	r3, [r7, #20]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d002      	beq.n	80106d8 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80106d2:	697b      	ldr	r3, [r7, #20]
 80106d4:	683a      	ldr	r2, [r7, #0]
 80106d6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80106d8:	697b      	ldr	r3, [r7, #20]
	}
 80106da:	4618      	mov	r0, r3
 80106dc:	3718      	adds	r7, #24
 80106de:	46bd      	mov	sp, r7
 80106e0:	bd80      	pop	{r7, pc}
	...

080106e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80106e4:	b580      	push	{r7, lr}
 80106e6:	b08e      	sub	sp, #56	; 0x38
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	60f8      	str	r0, [r7, #12]
 80106ec:	60b9      	str	r1, [r7, #8]
 80106ee:	607a      	str	r2, [r7, #4]
 80106f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80106f2:	2300      	movs	r3, #0
 80106f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80106fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d10a      	bne.n	8010716 <xQueueGenericSend+0x32>
	__asm volatile
 8010700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010704:	f383 8811 	msr	BASEPRI, r3
 8010708:	f3bf 8f6f 	isb	sy
 801070c:	f3bf 8f4f 	dsb	sy
 8010710:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010712:	bf00      	nop
 8010714:	e7fe      	b.n	8010714 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010716:	68bb      	ldr	r3, [r7, #8]
 8010718:	2b00      	cmp	r3, #0
 801071a:	d103      	bne.n	8010724 <xQueueGenericSend+0x40>
 801071c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801071e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010720:	2b00      	cmp	r3, #0
 8010722:	d101      	bne.n	8010728 <xQueueGenericSend+0x44>
 8010724:	2301      	movs	r3, #1
 8010726:	e000      	b.n	801072a <xQueueGenericSend+0x46>
 8010728:	2300      	movs	r3, #0
 801072a:	2b00      	cmp	r3, #0
 801072c:	d10a      	bne.n	8010744 <xQueueGenericSend+0x60>
	__asm volatile
 801072e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010732:	f383 8811 	msr	BASEPRI, r3
 8010736:	f3bf 8f6f 	isb	sy
 801073a:	f3bf 8f4f 	dsb	sy
 801073e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010740:	bf00      	nop
 8010742:	e7fe      	b.n	8010742 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010744:	683b      	ldr	r3, [r7, #0]
 8010746:	2b02      	cmp	r3, #2
 8010748:	d103      	bne.n	8010752 <xQueueGenericSend+0x6e>
 801074a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801074c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801074e:	2b01      	cmp	r3, #1
 8010750:	d101      	bne.n	8010756 <xQueueGenericSend+0x72>
 8010752:	2301      	movs	r3, #1
 8010754:	e000      	b.n	8010758 <xQueueGenericSend+0x74>
 8010756:	2300      	movs	r3, #0
 8010758:	2b00      	cmp	r3, #0
 801075a:	d10a      	bne.n	8010772 <xQueueGenericSend+0x8e>
	__asm volatile
 801075c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010760:	f383 8811 	msr	BASEPRI, r3
 8010764:	f3bf 8f6f 	isb	sy
 8010768:	f3bf 8f4f 	dsb	sy
 801076c:	623b      	str	r3, [r7, #32]
}
 801076e:	bf00      	nop
 8010770:	e7fe      	b.n	8010770 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010772:	f000 ff99 	bl	80116a8 <xTaskGetSchedulerState>
 8010776:	4603      	mov	r3, r0
 8010778:	2b00      	cmp	r3, #0
 801077a:	d102      	bne.n	8010782 <xQueueGenericSend+0x9e>
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d101      	bne.n	8010786 <xQueueGenericSend+0xa2>
 8010782:	2301      	movs	r3, #1
 8010784:	e000      	b.n	8010788 <xQueueGenericSend+0xa4>
 8010786:	2300      	movs	r3, #0
 8010788:	2b00      	cmp	r3, #0
 801078a:	d10a      	bne.n	80107a2 <xQueueGenericSend+0xbe>
	__asm volatile
 801078c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010790:	f383 8811 	msr	BASEPRI, r3
 8010794:	f3bf 8f6f 	isb	sy
 8010798:	f3bf 8f4f 	dsb	sy
 801079c:	61fb      	str	r3, [r7, #28]
}
 801079e:	bf00      	nop
 80107a0:	e7fe      	b.n	80107a0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80107a2:	f001 f979 	bl	8011a98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80107a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80107aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80107ae:	429a      	cmp	r2, r3
 80107b0:	d302      	bcc.n	80107b8 <xQueueGenericSend+0xd4>
 80107b2:	683b      	ldr	r3, [r7, #0]
 80107b4:	2b02      	cmp	r3, #2
 80107b6:	d129      	bne.n	801080c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80107b8:	683a      	ldr	r2, [r7, #0]
 80107ba:	68b9      	ldr	r1, [r7, #8]
 80107bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80107be:	f000 fae4 	bl	8010d8a <prvCopyDataToQueue>
 80107c2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80107c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d010      	beq.n	80107ee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80107cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107ce:	3324      	adds	r3, #36	; 0x24
 80107d0:	4618      	mov	r0, r3
 80107d2:	f000 fe61 	bl	8011498 <xTaskRemoveFromEventList>
 80107d6:	4603      	mov	r3, r0
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d013      	beq.n	8010804 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80107dc:	4b3f      	ldr	r3, [pc, #252]	; (80108dc <xQueueGenericSend+0x1f8>)
 80107de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80107e2:	601a      	str	r2, [r3, #0]
 80107e4:	f3bf 8f4f 	dsb	sy
 80107e8:	f3bf 8f6f 	isb	sy
 80107ec:	e00a      	b.n	8010804 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80107ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d007      	beq.n	8010804 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80107f4:	4b39      	ldr	r3, [pc, #228]	; (80108dc <xQueueGenericSend+0x1f8>)
 80107f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80107fa:	601a      	str	r2, [r3, #0]
 80107fc:	f3bf 8f4f 	dsb	sy
 8010800:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010804:	f001 f978 	bl	8011af8 <vPortExitCritical>
				return pdPASS;
 8010808:	2301      	movs	r3, #1
 801080a:	e063      	b.n	80108d4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	2b00      	cmp	r3, #0
 8010810:	d103      	bne.n	801081a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010812:	f001 f971 	bl	8011af8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010816:	2300      	movs	r3, #0
 8010818:	e05c      	b.n	80108d4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801081a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801081c:	2b00      	cmp	r3, #0
 801081e:	d106      	bne.n	801082e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010820:	f107 0314 	add.w	r3, r7, #20
 8010824:	4618      	mov	r0, r3
 8010826:	f000 fe9b 	bl	8011560 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801082a:	2301      	movs	r3, #1
 801082c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801082e:	f001 f963 	bl	8011af8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010832:	f000 fc43 	bl	80110bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010836:	f001 f92f 	bl	8011a98 <vPortEnterCritical>
 801083a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801083c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010840:	b25b      	sxtb	r3, r3
 8010842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010846:	d103      	bne.n	8010850 <xQueueGenericSend+0x16c>
 8010848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801084a:	2200      	movs	r2, #0
 801084c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010852:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010856:	b25b      	sxtb	r3, r3
 8010858:	f1b3 3fff 	cmp.w	r3, #4294967295
 801085c:	d103      	bne.n	8010866 <xQueueGenericSend+0x182>
 801085e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010860:	2200      	movs	r2, #0
 8010862:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010866:	f001 f947 	bl	8011af8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801086a:	1d3a      	adds	r2, r7, #4
 801086c:	f107 0314 	add.w	r3, r7, #20
 8010870:	4611      	mov	r1, r2
 8010872:	4618      	mov	r0, r3
 8010874:	f000 fe8a 	bl	801158c <xTaskCheckForTimeOut>
 8010878:	4603      	mov	r3, r0
 801087a:	2b00      	cmp	r3, #0
 801087c:	d124      	bne.n	80108c8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801087e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010880:	f000 fb7b 	bl	8010f7a <prvIsQueueFull>
 8010884:	4603      	mov	r3, r0
 8010886:	2b00      	cmp	r3, #0
 8010888:	d018      	beq.n	80108bc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801088a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801088c:	3310      	adds	r3, #16
 801088e:	687a      	ldr	r2, [r7, #4]
 8010890:	4611      	mov	r1, r2
 8010892:	4618      	mov	r0, r3
 8010894:	f000 fddc 	bl	8011450 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010898:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801089a:	f000 fb06 	bl	8010eaa <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801089e:	f000 fc1b 	bl	80110d8 <xTaskResumeAll>
 80108a2:	4603      	mov	r3, r0
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	f47f af7c 	bne.w	80107a2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80108aa:	4b0c      	ldr	r3, [pc, #48]	; (80108dc <xQueueGenericSend+0x1f8>)
 80108ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80108b0:	601a      	str	r2, [r3, #0]
 80108b2:	f3bf 8f4f 	dsb	sy
 80108b6:	f3bf 8f6f 	isb	sy
 80108ba:	e772      	b.n	80107a2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80108bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80108be:	f000 faf4 	bl	8010eaa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80108c2:	f000 fc09 	bl	80110d8 <xTaskResumeAll>
 80108c6:	e76c      	b.n	80107a2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80108c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80108ca:	f000 faee 	bl	8010eaa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80108ce:	f000 fc03 	bl	80110d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80108d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80108d4:	4618      	mov	r0, r3
 80108d6:	3738      	adds	r7, #56	; 0x38
 80108d8:	46bd      	mov	sp, r7
 80108da:	bd80      	pop	{r7, pc}
 80108dc:	e000ed04 	.word	0xe000ed04

080108e0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80108e0:	b580      	push	{r7, lr}
 80108e2:	b08e      	sub	sp, #56	; 0x38
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
 80108e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80108ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d10a      	bne.n	801090a <xQueueGiveFromISR+0x2a>
	__asm volatile
 80108f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108f8:	f383 8811 	msr	BASEPRI, r3
 80108fc:	f3bf 8f6f 	isb	sy
 8010900:	f3bf 8f4f 	dsb	sy
 8010904:	623b      	str	r3, [r7, #32]
}
 8010906:	bf00      	nop
 8010908:	e7fe      	b.n	8010908 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801090a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801090e:	2b00      	cmp	r3, #0
 8010910:	d00a      	beq.n	8010928 <xQueueGiveFromISR+0x48>
	__asm volatile
 8010912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010916:	f383 8811 	msr	BASEPRI, r3
 801091a:	f3bf 8f6f 	isb	sy
 801091e:	f3bf 8f4f 	dsb	sy
 8010922:	61fb      	str	r3, [r7, #28]
}
 8010924:	bf00      	nop
 8010926:	e7fe      	b.n	8010926 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d103      	bne.n	8010938 <xQueueGiveFromISR+0x58>
 8010930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010932:	689b      	ldr	r3, [r3, #8]
 8010934:	2b00      	cmp	r3, #0
 8010936:	d101      	bne.n	801093c <xQueueGiveFromISR+0x5c>
 8010938:	2301      	movs	r3, #1
 801093a:	e000      	b.n	801093e <xQueueGiveFromISR+0x5e>
 801093c:	2300      	movs	r3, #0
 801093e:	2b00      	cmp	r3, #0
 8010940:	d10a      	bne.n	8010958 <xQueueGiveFromISR+0x78>
	__asm volatile
 8010942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010946:	f383 8811 	msr	BASEPRI, r3
 801094a:	f3bf 8f6f 	isb	sy
 801094e:	f3bf 8f4f 	dsb	sy
 8010952:	61bb      	str	r3, [r7, #24]
}
 8010954:	bf00      	nop
 8010956:	e7fe      	b.n	8010956 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010958:	f001 f950 	bl	8011bfc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801095c:	f3ef 8211 	mrs	r2, BASEPRI
 8010960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010964:	f383 8811 	msr	BASEPRI, r3
 8010968:	f3bf 8f6f 	isb	sy
 801096c:	f3bf 8f4f 	dsb	sy
 8010970:	617a      	str	r2, [r7, #20]
 8010972:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010974:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010976:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801097a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801097c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 801097e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010982:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010984:	429a      	cmp	r2, r3
 8010986:	d22b      	bcs.n	80109e0 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801098a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801098e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010994:	1c5a      	adds	r2, r3, #1
 8010996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010998:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801099a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801099e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109a2:	d112      	bne.n	80109ca <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80109a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d016      	beq.n	80109da <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80109ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109ae:	3324      	adds	r3, #36	; 0x24
 80109b0:	4618      	mov	r0, r3
 80109b2:	f000 fd71 	bl	8011498 <xTaskRemoveFromEventList>
 80109b6:	4603      	mov	r3, r0
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d00e      	beq.n	80109da <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80109bc:	683b      	ldr	r3, [r7, #0]
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d00b      	beq.n	80109da <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80109c2:	683b      	ldr	r3, [r7, #0]
 80109c4:	2201      	movs	r2, #1
 80109c6:	601a      	str	r2, [r3, #0]
 80109c8:	e007      	b.n	80109da <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80109ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80109ce:	3301      	adds	r3, #1
 80109d0:	b2db      	uxtb	r3, r3
 80109d2:	b25a      	sxtb	r2, r3
 80109d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80109da:	2301      	movs	r3, #1
 80109dc:	637b      	str	r3, [r7, #52]	; 0x34
 80109de:	e001      	b.n	80109e4 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80109e0:	2300      	movs	r3, #0
 80109e2:	637b      	str	r3, [r7, #52]	; 0x34
 80109e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109e6:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80109ee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80109f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80109f2:	4618      	mov	r0, r3
 80109f4:	3738      	adds	r7, #56	; 0x38
 80109f6:	46bd      	mov	sp, r7
 80109f8:	bd80      	pop	{r7, pc}
	...

080109fc <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80109fc:	b580      	push	{r7, lr}
 80109fe:	b08e      	sub	sp, #56	; 0x38
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	6078      	str	r0, [r7, #4]
 8010a04:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8010a06:	2300      	movs	r3, #0
 8010a08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010a0e:	2300      	movs	r3, #0
 8010a10:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d10a      	bne.n	8010a2e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8010a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a1c:	f383 8811 	msr	BASEPRI, r3
 8010a20:	f3bf 8f6f 	isb	sy
 8010a24:	f3bf 8f4f 	dsb	sy
 8010a28:	623b      	str	r3, [r7, #32]
}
 8010a2a:	bf00      	nop
 8010a2c:	e7fe      	b.n	8010a2c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d00a      	beq.n	8010a4c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8010a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a3a:	f383 8811 	msr	BASEPRI, r3
 8010a3e:	f3bf 8f6f 	isb	sy
 8010a42:	f3bf 8f4f 	dsb	sy
 8010a46:	61fb      	str	r3, [r7, #28]
}
 8010a48:	bf00      	nop
 8010a4a:	e7fe      	b.n	8010a4a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010a4c:	f000 fe2c 	bl	80116a8 <xTaskGetSchedulerState>
 8010a50:	4603      	mov	r3, r0
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d102      	bne.n	8010a5c <xQueueSemaphoreTake+0x60>
 8010a56:	683b      	ldr	r3, [r7, #0]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d101      	bne.n	8010a60 <xQueueSemaphoreTake+0x64>
 8010a5c:	2301      	movs	r3, #1
 8010a5e:	e000      	b.n	8010a62 <xQueueSemaphoreTake+0x66>
 8010a60:	2300      	movs	r3, #0
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d10a      	bne.n	8010a7c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8010a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a6a:	f383 8811 	msr	BASEPRI, r3
 8010a6e:	f3bf 8f6f 	isb	sy
 8010a72:	f3bf 8f4f 	dsb	sy
 8010a76:	61bb      	str	r3, [r7, #24]
}
 8010a78:	bf00      	nop
 8010a7a:	e7fe      	b.n	8010a7a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010a7c:	f001 f80c 	bl	8011a98 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a84:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d024      	beq.n	8010ad6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a8e:	1e5a      	subs	r2, r3, #1
 8010a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a92:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d104      	bne.n	8010aa6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010a9c:	f000 ff7a 	bl	8011994 <pvTaskIncrementMutexHeldCount>
 8010aa0:	4602      	mov	r2, r0
 8010aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010aa4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010aa8:	691b      	ldr	r3, [r3, #16]
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d00f      	beq.n	8010ace <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ab0:	3310      	adds	r3, #16
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	f000 fcf0 	bl	8011498 <xTaskRemoveFromEventList>
 8010ab8:	4603      	mov	r3, r0
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d007      	beq.n	8010ace <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010abe:	4b54      	ldr	r3, [pc, #336]	; (8010c10 <xQueueSemaphoreTake+0x214>)
 8010ac0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ac4:	601a      	str	r2, [r3, #0]
 8010ac6:	f3bf 8f4f 	dsb	sy
 8010aca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010ace:	f001 f813 	bl	8011af8 <vPortExitCritical>
				return pdPASS;
 8010ad2:	2301      	movs	r3, #1
 8010ad4:	e097      	b.n	8010c06 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010ad6:	683b      	ldr	r3, [r7, #0]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d111      	bne.n	8010b00 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d00a      	beq.n	8010af8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8010ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ae6:	f383 8811 	msr	BASEPRI, r3
 8010aea:	f3bf 8f6f 	isb	sy
 8010aee:	f3bf 8f4f 	dsb	sy
 8010af2:	617b      	str	r3, [r7, #20]
}
 8010af4:	bf00      	nop
 8010af6:	e7fe      	b.n	8010af6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010af8:	f000 fffe 	bl	8011af8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010afc:	2300      	movs	r3, #0
 8010afe:	e082      	b.n	8010c06 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d106      	bne.n	8010b14 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010b06:	f107 030c 	add.w	r3, r7, #12
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	f000 fd28 	bl	8011560 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010b10:	2301      	movs	r3, #1
 8010b12:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010b14:	f000 fff0 	bl	8011af8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010b18:	f000 fad0 	bl	80110bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010b1c:	f000 ffbc 	bl	8011a98 <vPortEnterCritical>
 8010b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010b26:	b25b      	sxtb	r3, r3
 8010b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b2c:	d103      	bne.n	8010b36 <xQueueSemaphoreTake+0x13a>
 8010b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b30:	2200      	movs	r2, #0
 8010b32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010b3c:	b25b      	sxtb	r3, r3
 8010b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b42:	d103      	bne.n	8010b4c <xQueueSemaphoreTake+0x150>
 8010b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b46:	2200      	movs	r2, #0
 8010b48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010b4c:	f000 ffd4 	bl	8011af8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010b50:	463a      	mov	r2, r7
 8010b52:	f107 030c 	add.w	r3, r7, #12
 8010b56:	4611      	mov	r1, r2
 8010b58:	4618      	mov	r0, r3
 8010b5a:	f000 fd17 	bl	801158c <xTaskCheckForTimeOut>
 8010b5e:	4603      	mov	r3, r0
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d132      	bne.n	8010bca <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010b64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010b66:	f000 f9f2 	bl	8010f4e <prvIsQueueEmpty>
 8010b6a:	4603      	mov	r3, r0
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d026      	beq.n	8010bbe <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d109      	bne.n	8010b8c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8010b78:	f000 ff8e 	bl	8011a98 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b7e:	689b      	ldr	r3, [r3, #8]
 8010b80:	4618      	mov	r0, r3
 8010b82:	f000 fdaf 	bl	80116e4 <xTaskPriorityInherit>
 8010b86:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8010b88:	f000 ffb6 	bl	8011af8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b8e:	3324      	adds	r3, #36	; 0x24
 8010b90:	683a      	ldr	r2, [r7, #0]
 8010b92:	4611      	mov	r1, r2
 8010b94:	4618      	mov	r0, r3
 8010b96:	f000 fc5b 	bl	8011450 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010b9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010b9c:	f000 f985 	bl	8010eaa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010ba0:	f000 fa9a 	bl	80110d8 <xTaskResumeAll>
 8010ba4:	4603      	mov	r3, r0
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	f47f af68 	bne.w	8010a7c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8010bac:	4b18      	ldr	r3, [pc, #96]	; (8010c10 <xQueueSemaphoreTake+0x214>)
 8010bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010bb2:	601a      	str	r2, [r3, #0]
 8010bb4:	f3bf 8f4f 	dsb	sy
 8010bb8:	f3bf 8f6f 	isb	sy
 8010bbc:	e75e      	b.n	8010a7c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010bbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010bc0:	f000 f973 	bl	8010eaa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010bc4:	f000 fa88 	bl	80110d8 <xTaskResumeAll>
 8010bc8:	e758      	b.n	8010a7c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8010bca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010bcc:	f000 f96d 	bl	8010eaa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010bd0:	f000 fa82 	bl	80110d8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010bd4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010bd6:	f000 f9ba 	bl	8010f4e <prvIsQueueEmpty>
 8010bda:	4603      	mov	r3, r0
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	f43f af4d 	beq.w	8010a7c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d00d      	beq.n	8010c04 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8010be8:	f000 ff56 	bl	8011a98 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010bec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010bee:	f000 f8b4 	bl	8010d5a <prvGetDisinheritPriorityAfterTimeout>
 8010bf2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bf6:	689b      	ldr	r3, [r3, #8]
 8010bf8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	f000 fe48 	bl	8011890 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010c00:	f000 ff7a 	bl	8011af8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010c04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010c06:	4618      	mov	r0, r3
 8010c08:	3738      	adds	r7, #56	; 0x38
 8010c0a:	46bd      	mov	sp, r7
 8010c0c:	bd80      	pop	{r7, pc}
 8010c0e:	bf00      	nop
 8010c10:	e000ed04 	.word	0xe000ed04

08010c14 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010c14:	b580      	push	{r7, lr}
 8010c16:	b08e      	sub	sp, #56	; 0x38
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	60f8      	str	r0, [r7, #12]
 8010c1c:	60b9      	str	r1, [r7, #8]
 8010c1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d10a      	bne.n	8010c40 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8010c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c2e:	f383 8811 	msr	BASEPRI, r3
 8010c32:	f3bf 8f6f 	isb	sy
 8010c36:	f3bf 8f4f 	dsb	sy
 8010c3a:	623b      	str	r3, [r7, #32]
}
 8010c3c:	bf00      	nop
 8010c3e:	e7fe      	b.n	8010c3e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010c40:	68bb      	ldr	r3, [r7, #8]
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d103      	bne.n	8010c4e <xQueueReceiveFromISR+0x3a>
 8010c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d101      	bne.n	8010c52 <xQueueReceiveFromISR+0x3e>
 8010c4e:	2301      	movs	r3, #1
 8010c50:	e000      	b.n	8010c54 <xQueueReceiveFromISR+0x40>
 8010c52:	2300      	movs	r3, #0
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d10a      	bne.n	8010c6e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8010c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c5c:	f383 8811 	msr	BASEPRI, r3
 8010c60:	f3bf 8f6f 	isb	sy
 8010c64:	f3bf 8f4f 	dsb	sy
 8010c68:	61fb      	str	r3, [r7, #28]
}
 8010c6a:	bf00      	nop
 8010c6c:	e7fe      	b.n	8010c6c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010c6e:	f000 ffc5 	bl	8011bfc <vPortValidateInterruptPriority>
	__asm volatile
 8010c72:	f3ef 8211 	mrs	r2, BASEPRI
 8010c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c7a:	f383 8811 	msr	BASEPRI, r3
 8010c7e:	f3bf 8f6f 	isb	sy
 8010c82:	f3bf 8f4f 	dsb	sy
 8010c86:	61ba      	str	r2, [r7, #24]
 8010c88:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010c8a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c92:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d02f      	beq.n	8010cfa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010ca0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010ca4:	68b9      	ldr	r1, [r7, #8]
 8010ca6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ca8:	f000 f8d9 	bl	8010e5e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cae:	1e5a      	subs	r2, r3, #1
 8010cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cb2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010cb4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cbc:	d112      	bne.n	8010ce4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cc0:	691b      	ldr	r3, [r3, #16]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d016      	beq.n	8010cf4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cc8:	3310      	adds	r3, #16
 8010cca:	4618      	mov	r0, r3
 8010ccc:	f000 fbe4 	bl	8011498 <xTaskRemoveFromEventList>
 8010cd0:	4603      	mov	r3, r0
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d00e      	beq.n	8010cf4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d00b      	beq.n	8010cf4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	2201      	movs	r2, #1
 8010ce0:	601a      	str	r2, [r3, #0]
 8010ce2:	e007      	b.n	8010cf4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010ce4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010ce8:	3301      	adds	r3, #1
 8010cea:	b2db      	uxtb	r3, r3
 8010cec:	b25a      	sxtb	r2, r3
 8010cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010cf4:	2301      	movs	r3, #1
 8010cf6:	637b      	str	r3, [r7, #52]	; 0x34
 8010cf8:	e001      	b.n	8010cfe <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8010cfa:	2300      	movs	r3, #0
 8010cfc:	637b      	str	r3, [r7, #52]	; 0x34
 8010cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d00:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010d02:	693b      	ldr	r3, [r7, #16]
 8010d04:	f383 8811 	msr	BASEPRI, r3
}
 8010d08:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010d0c:	4618      	mov	r0, r3
 8010d0e:	3738      	adds	r7, #56	; 0x38
 8010d10:	46bd      	mov	sp, r7
 8010d12:	bd80      	pop	{r7, pc}

08010d14 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010d14:	b580      	push	{r7, lr}
 8010d16:	b084      	sub	sp, #16
 8010d18:	af00      	add	r7, sp, #0
 8010d1a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d10a      	bne.n	8010d3c <vQueueDelete+0x28>
	__asm volatile
 8010d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d2a:	f383 8811 	msr	BASEPRI, r3
 8010d2e:	f3bf 8f6f 	isb	sy
 8010d32:	f3bf 8f4f 	dsb	sy
 8010d36:	60bb      	str	r3, [r7, #8]
}
 8010d38:	bf00      	nop
 8010d3a:	e7fe      	b.n	8010d3a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8010d3c:	68f8      	ldr	r0, [r7, #12]
 8010d3e:	f000 f95f 	bl	8011000 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d102      	bne.n	8010d52 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8010d4c:	68f8      	ldr	r0, [r7, #12]
 8010d4e:	f001 f861 	bl	8011e14 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8010d52:	bf00      	nop
 8010d54:	3710      	adds	r7, #16
 8010d56:	46bd      	mov	sp, r7
 8010d58:	bd80      	pop	{r7, pc}

08010d5a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010d5a:	b480      	push	{r7}
 8010d5c:	b085      	sub	sp, #20
 8010d5e:	af00      	add	r7, sp, #0
 8010d60:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d006      	beq.n	8010d78 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8010d74:	60fb      	str	r3, [r7, #12]
 8010d76:	e001      	b.n	8010d7c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010d78:	2300      	movs	r3, #0
 8010d7a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010d7c:	68fb      	ldr	r3, [r7, #12]
	}
 8010d7e:	4618      	mov	r0, r3
 8010d80:	3714      	adds	r7, #20
 8010d82:	46bd      	mov	sp, r7
 8010d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d88:	4770      	bx	lr

08010d8a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010d8a:	b580      	push	{r7, lr}
 8010d8c:	b086      	sub	sp, #24
 8010d8e:	af00      	add	r7, sp, #0
 8010d90:	60f8      	str	r0, [r7, #12]
 8010d92:	60b9      	str	r1, [r7, #8]
 8010d94:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010d96:	2300      	movs	r3, #0
 8010d98:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d9e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d10d      	bne.n	8010dc4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d14d      	bne.n	8010e4c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	689b      	ldr	r3, [r3, #8]
 8010db4:	4618      	mov	r0, r3
 8010db6:	f000 fcfd 	bl	80117b4 <xTaskPriorityDisinherit>
 8010dba:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	2200      	movs	r2, #0
 8010dc0:	609a      	str	r2, [r3, #8]
 8010dc2:	e043      	b.n	8010e4c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d119      	bne.n	8010dfe <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	6858      	ldr	r0, [r3, #4]
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010dd2:	461a      	mov	r2, r3
 8010dd4:	68b9      	ldr	r1, [r7, #8]
 8010dd6:	f001 fc76 	bl	80126c6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	685a      	ldr	r2, [r3, #4]
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010de2:	441a      	add	r2, r3
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	685a      	ldr	r2, [r3, #4]
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	689b      	ldr	r3, [r3, #8]
 8010df0:	429a      	cmp	r2, r3
 8010df2:	d32b      	bcc.n	8010e4c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	681a      	ldr	r2, [r3, #0]
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	605a      	str	r2, [r3, #4]
 8010dfc:	e026      	b.n	8010e4c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	68d8      	ldr	r0, [r3, #12]
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e06:	461a      	mov	r2, r3
 8010e08:	68b9      	ldr	r1, [r7, #8]
 8010e0a:	f001 fc5c 	bl	80126c6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	68da      	ldr	r2, [r3, #12]
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e16:	425b      	negs	r3, r3
 8010e18:	441a      	add	r2, r3
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	68da      	ldr	r2, [r3, #12]
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	429a      	cmp	r2, r3
 8010e28:	d207      	bcs.n	8010e3a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	689a      	ldr	r2, [r3, #8]
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e32:	425b      	negs	r3, r3
 8010e34:	441a      	add	r2, r3
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	2b02      	cmp	r3, #2
 8010e3e:	d105      	bne.n	8010e4c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010e40:	693b      	ldr	r3, [r7, #16]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d002      	beq.n	8010e4c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010e46:	693b      	ldr	r3, [r7, #16]
 8010e48:	3b01      	subs	r3, #1
 8010e4a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010e4c:	693b      	ldr	r3, [r7, #16]
 8010e4e:	1c5a      	adds	r2, r3, #1
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010e54:	697b      	ldr	r3, [r7, #20]
}
 8010e56:	4618      	mov	r0, r3
 8010e58:	3718      	adds	r7, #24
 8010e5a:	46bd      	mov	sp, r7
 8010e5c:	bd80      	pop	{r7, pc}

08010e5e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010e5e:	b580      	push	{r7, lr}
 8010e60:	b082      	sub	sp, #8
 8010e62:	af00      	add	r7, sp, #0
 8010e64:	6078      	str	r0, [r7, #4]
 8010e66:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d018      	beq.n	8010ea2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	68da      	ldr	r2, [r3, #12]
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e78:	441a      	add	r2, r3
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	68da      	ldr	r2, [r3, #12]
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	689b      	ldr	r3, [r3, #8]
 8010e86:	429a      	cmp	r2, r3
 8010e88:	d303      	bcc.n	8010e92 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	681a      	ldr	r2, [r3, #0]
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	68d9      	ldr	r1, [r3, #12]
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e9a:	461a      	mov	r2, r3
 8010e9c:	6838      	ldr	r0, [r7, #0]
 8010e9e:	f001 fc12 	bl	80126c6 <memcpy>
	}
}
 8010ea2:	bf00      	nop
 8010ea4:	3708      	adds	r7, #8
 8010ea6:	46bd      	mov	sp, r7
 8010ea8:	bd80      	pop	{r7, pc}

08010eaa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010eaa:	b580      	push	{r7, lr}
 8010eac:	b084      	sub	sp, #16
 8010eae:	af00      	add	r7, sp, #0
 8010eb0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010eb2:	f000 fdf1 	bl	8011a98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010ebc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010ebe:	e011      	b.n	8010ee4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d012      	beq.n	8010eee <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	3324      	adds	r3, #36	; 0x24
 8010ecc:	4618      	mov	r0, r3
 8010ece:	f000 fae3 	bl	8011498 <xTaskRemoveFromEventList>
 8010ed2:	4603      	mov	r3, r0
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d001      	beq.n	8010edc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010ed8:	f000 fbba 	bl	8011650 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010edc:	7bfb      	ldrb	r3, [r7, #15]
 8010ede:	3b01      	subs	r3, #1
 8010ee0:	b2db      	uxtb	r3, r3
 8010ee2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010ee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	dce9      	bgt.n	8010ec0 <prvUnlockQueue+0x16>
 8010eec:	e000      	b.n	8010ef0 <prvUnlockQueue+0x46>
					break;
 8010eee:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	22ff      	movs	r2, #255	; 0xff
 8010ef4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010ef8:	f000 fdfe 	bl	8011af8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010efc:	f000 fdcc 	bl	8011a98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010f06:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010f08:	e011      	b.n	8010f2e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	691b      	ldr	r3, [r3, #16]
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d012      	beq.n	8010f38 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	3310      	adds	r3, #16
 8010f16:	4618      	mov	r0, r3
 8010f18:	f000 fabe 	bl	8011498 <xTaskRemoveFromEventList>
 8010f1c:	4603      	mov	r3, r0
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d001      	beq.n	8010f26 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010f22:	f000 fb95 	bl	8011650 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010f26:	7bbb      	ldrb	r3, [r7, #14]
 8010f28:	3b01      	subs	r3, #1
 8010f2a:	b2db      	uxtb	r3, r3
 8010f2c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010f2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	dce9      	bgt.n	8010f0a <prvUnlockQueue+0x60>
 8010f36:	e000      	b.n	8010f3a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010f38:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	22ff      	movs	r2, #255	; 0xff
 8010f3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010f42:	f000 fdd9 	bl	8011af8 <vPortExitCritical>
}
 8010f46:	bf00      	nop
 8010f48:	3710      	adds	r7, #16
 8010f4a:	46bd      	mov	sp, r7
 8010f4c:	bd80      	pop	{r7, pc}

08010f4e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010f4e:	b580      	push	{r7, lr}
 8010f50:	b084      	sub	sp, #16
 8010f52:	af00      	add	r7, sp, #0
 8010f54:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010f56:	f000 fd9f 	bl	8011a98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d102      	bne.n	8010f68 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010f62:	2301      	movs	r3, #1
 8010f64:	60fb      	str	r3, [r7, #12]
 8010f66:	e001      	b.n	8010f6c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010f68:	2300      	movs	r3, #0
 8010f6a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010f6c:	f000 fdc4 	bl	8011af8 <vPortExitCritical>

	return xReturn;
 8010f70:	68fb      	ldr	r3, [r7, #12]
}
 8010f72:	4618      	mov	r0, r3
 8010f74:	3710      	adds	r7, #16
 8010f76:	46bd      	mov	sp, r7
 8010f78:	bd80      	pop	{r7, pc}

08010f7a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010f7a:	b580      	push	{r7, lr}
 8010f7c:	b084      	sub	sp, #16
 8010f7e:	af00      	add	r7, sp, #0
 8010f80:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010f82:	f000 fd89 	bl	8011a98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010f8e:	429a      	cmp	r2, r3
 8010f90:	d102      	bne.n	8010f98 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010f92:	2301      	movs	r3, #1
 8010f94:	60fb      	str	r3, [r7, #12]
 8010f96:	e001      	b.n	8010f9c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010f98:	2300      	movs	r3, #0
 8010f9a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010f9c:	f000 fdac 	bl	8011af8 <vPortExitCritical>

	return xReturn;
 8010fa0:	68fb      	ldr	r3, [r7, #12]
}
 8010fa2:	4618      	mov	r0, r3
 8010fa4:	3710      	adds	r7, #16
 8010fa6:	46bd      	mov	sp, r7
 8010fa8:	bd80      	pop	{r7, pc}
	...

08010fac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010fac:	b480      	push	{r7}
 8010fae:	b085      	sub	sp, #20
 8010fb0:	af00      	add	r7, sp, #0
 8010fb2:	6078      	str	r0, [r7, #4]
 8010fb4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010fb6:	2300      	movs	r3, #0
 8010fb8:	60fb      	str	r3, [r7, #12]
 8010fba:	e014      	b.n	8010fe6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010fbc:	4a0f      	ldr	r2, [pc, #60]	; (8010ffc <vQueueAddToRegistry+0x50>)
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d10b      	bne.n	8010fe0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010fc8:	490c      	ldr	r1, [pc, #48]	; (8010ffc <vQueueAddToRegistry+0x50>)
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	683a      	ldr	r2, [r7, #0]
 8010fce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010fd2:	4a0a      	ldr	r2, [pc, #40]	; (8010ffc <vQueueAddToRegistry+0x50>)
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	00db      	lsls	r3, r3, #3
 8010fd8:	4413      	add	r3, r2
 8010fda:	687a      	ldr	r2, [r7, #4]
 8010fdc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8010fde:	e006      	b.n	8010fee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	3301      	adds	r3, #1
 8010fe4:	60fb      	str	r3, [r7, #12]
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	2b07      	cmp	r3, #7
 8010fea:	d9e7      	bls.n	8010fbc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010fec:	bf00      	nop
 8010fee:	bf00      	nop
 8010ff0:	3714      	adds	r7, #20
 8010ff2:	46bd      	mov	sp, r7
 8010ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff8:	4770      	bx	lr
 8010ffa:	bf00      	nop
 8010ffc:	20006430 	.word	0x20006430

08011000 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8011000:	b480      	push	{r7}
 8011002:	b085      	sub	sp, #20
 8011004:	af00      	add	r7, sp, #0
 8011006:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011008:	2300      	movs	r3, #0
 801100a:	60fb      	str	r3, [r7, #12]
 801100c:	e016      	b.n	801103c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801100e:	4a10      	ldr	r2, [pc, #64]	; (8011050 <vQueueUnregisterQueue+0x50>)
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	00db      	lsls	r3, r3, #3
 8011014:	4413      	add	r3, r2
 8011016:	685b      	ldr	r3, [r3, #4]
 8011018:	687a      	ldr	r2, [r7, #4]
 801101a:	429a      	cmp	r2, r3
 801101c:	d10b      	bne.n	8011036 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801101e:	4a0c      	ldr	r2, [pc, #48]	; (8011050 <vQueueUnregisterQueue+0x50>)
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	2100      	movs	r1, #0
 8011024:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8011028:	4a09      	ldr	r2, [pc, #36]	; (8011050 <vQueueUnregisterQueue+0x50>)
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	00db      	lsls	r3, r3, #3
 801102e:	4413      	add	r3, r2
 8011030:	2200      	movs	r2, #0
 8011032:	605a      	str	r2, [r3, #4]
				break;
 8011034:	e006      	b.n	8011044 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	3301      	adds	r3, #1
 801103a:	60fb      	str	r3, [r7, #12]
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	2b07      	cmp	r3, #7
 8011040:	d9e5      	bls.n	801100e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8011042:	bf00      	nop
 8011044:	bf00      	nop
 8011046:	3714      	adds	r7, #20
 8011048:	46bd      	mov	sp, r7
 801104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801104e:	4770      	bx	lr
 8011050:	20006430 	.word	0x20006430

08011054 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011054:	b580      	push	{r7, lr}
 8011056:	b084      	sub	sp, #16
 8011058:	af00      	add	r7, sp, #0
 801105a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801105c:	2300      	movs	r3, #0
 801105e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d017      	beq.n	8011096 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011066:	4b13      	ldr	r3, [pc, #76]	; (80110b4 <vTaskDelay+0x60>)
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	2b00      	cmp	r3, #0
 801106c:	d00a      	beq.n	8011084 <vTaskDelay+0x30>
	__asm volatile
 801106e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011072:	f383 8811 	msr	BASEPRI, r3
 8011076:	f3bf 8f6f 	isb	sy
 801107a:	f3bf 8f4f 	dsb	sy
 801107e:	60bb      	str	r3, [r7, #8]
}
 8011080:	bf00      	nop
 8011082:	e7fe      	b.n	8011082 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8011084:	f000 f81a 	bl	80110bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011088:	2100      	movs	r1, #0
 801108a:	6878      	ldr	r0, [r7, #4]
 801108c:	f000 fc96 	bl	80119bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011090:	f000 f822 	bl	80110d8 <xTaskResumeAll>
 8011094:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	2b00      	cmp	r3, #0
 801109a:	d107      	bne.n	80110ac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801109c:	4b06      	ldr	r3, [pc, #24]	; (80110b8 <vTaskDelay+0x64>)
 801109e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80110a2:	601a      	str	r2, [r3, #0]
 80110a4:	f3bf 8f4f 	dsb	sy
 80110a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80110ac:	bf00      	nop
 80110ae:	3710      	adds	r7, #16
 80110b0:	46bd      	mov	sp, r7
 80110b2:	bd80      	pop	{r7, pc}
 80110b4:	20000940 	.word	0x20000940
 80110b8:	e000ed04 	.word	0xe000ed04

080110bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80110bc:	b480      	push	{r7}
 80110be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80110c0:	4b04      	ldr	r3, [pc, #16]	; (80110d4 <vTaskSuspendAll+0x18>)
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	3301      	adds	r3, #1
 80110c6:	4a03      	ldr	r2, [pc, #12]	; (80110d4 <vTaskSuspendAll+0x18>)
 80110c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80110ca:	bf00      	nop
 80110cc:	46bd      	mov	sp, r7
 80110ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110d2:	4770      	bx	lr
 80110d4:	20000940 	.word	0x20000940

080110d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80110d8:	b580      	push	{r7, lr}
 80110da:	b084      	sub	sp, #16
 80110dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80110de:	2300      	movs	r3, #0
 80110e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80110e2:	2300      	movs	r3, #0
 80110e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80110e6:	4b42      	ldr	r3, [pc, #264]	; (80111f0 <xTaskResumeAll+0x118>)
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d10a      	bne.n	8011104 <xTaskResumeAll+0x2c>
	__asm volatile
 80110ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110f2:	f383 8811 	msr	BASEPRI, r3
 80110f6:	f3bf 8f6f 	isb	sy
 80110fa:	f3bf 8f4f 	dsb	sy
 80110fe:	603b      	str	r3, [r7, #0]
}
 8011100:	bf00      	nop
 8011102:	e7fe      	b.n	8011102 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011104:	f000 fcc8 	bl	8011a98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011108:	4b39      	ldr	r3, [pc, #228]	; (80111f0 <xTaskResumeAll+0x118>)
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	3b01      	subs	r3, #1
 801110e:	4a38      	ldr	r2, [pc, #224]	; (80111f0 <xTaskResumeAll+0x118>)
 8011110:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011112:	4b37      	ldr	r3, [pc, #220]	; (80111f0 <xTaskResumeAll+0x118>)
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	2b00      	cmp	r3, #0
 8011118:	d162      	bne.n	80111e0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801111a:	4b36      	ldr	r3, [pc, #216]	; (80111f4 <xTaskResumeAll+0x11c>)
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	2b00      	cmp	r3, #0
 8011120:	d05e      	beq.n	80111e0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011122:	e02f      	b.n	8011184 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011124:	4b34      	ldr	r3, [pc, #208]	; (80111f8 <xTaskResumeAll+0x120>)
 8011126:	68db      	ldr	r3, [r3, #12]
 8011128:	68db      	ldr	r3, [r3, #12]
 801112a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	3318      	adds	r3, #24
 8011130:	4618      	mov	r0, r3
 8011132:	f7ff f904 	bl	801033e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	3304      	adds	r3, #4
 801113a:	4618      	mov	r0, r3
 801113c:	f7ff f8ff 	bl	801033e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011144:	4b2d      	ldr	r3, [pc, #180]	; (80111fc <xTaskResumeAll+0x124>)
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	429a      	cmp	r2, r3
 801114a:	d903      	bls.n	8011154 <xTaskResumeAll+0x7c>
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011150:	4a2a      	ldr	r2, [pc, #168]	; (80111fc <xTaskResumeAll+0x124>)
 8011152:	6013      	str	r3, [r2, #0]
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011158:	4613      	mov	r3, r2
 801115a:	009b      	lsls	r3, r3, #2
 801115c:	4413      	add	r3, r2
 801115e:	009b      	lsls	r3, r3, #2
 8011160:	4a27      	ldr	r2, [pc, #156]	; (8011200 <xTaskResumeAll+0x128>)
 8011162:	441a      	add	r2, r3
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	3304      	adds	r3, #4
 8011168:	4619      	mov	r1, r3
 801116a:	4610      	mov	r0, r2
 801116c:	f7ff f88a 	bl	8010284 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011174:	4b23      	ldr	r3, [pc, #140]	; (8011204 <xTaskResumeAll+0x12c>)
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801117a:	429a      	cmp	r2, r3
 801117c:	d302      	bcc.n	8011184 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801117e:	4b22      	ldr	r3, [pc, #136]	; (8011208 <xTaskResumeAll+0x130>)
 8011180:	2201      	movs	r2, #1
 8011182:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011184:	4b1c      	ldr	r3, [pc, #112]	; (80111f8 <xTaskResumeAll+0x120>)
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d1cb      	bne.n	8011124 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	2b00      	cmp	r3, #0
 8011190:	d001      	beq.n	8011196 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011192:	f000 fa69 	bl	8011668 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8011196:	4b1d      	ldr	r3, [pc, #116]	; (801120c <xTaskResumeAll+0x134>)
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d010      	beq.n	80111c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80111a2:	f000 f837 	bl	8011214 <xTaskIncrementTick>
 80111a6:	4603      	mov	r3, r0
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d002      	beq.n	80111b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80111ac:	4b16      	ldr	r3, [pc, #88]	; (8011208 <xTaskResumeAll+0x130>)
 80111ae:	2201      	movs	r2, #1
 80111b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	3b01      	subs	r3, #1
 80111b6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d1f1      	bne.n	80111a2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80111be:	4b13      	ldr	r3, [pc, #76]	; (801120c <xTaskResumeAll+0x134>)
 80111c0:	2200      	movs	r2, #0
 80111c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80111c4:	4b10      	ldr	r3, [pc, #64]	; (8011208 <xTaskResumeAll+0x130>)
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d009      	beq.n	80111e0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80111cc:	2301      	movs	r3, #1
 80111ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80111d0:	4b0f      	ldr	r3, [pc, #60]	; (8011210 <xTaskResumeAll+0x138>)
 80111d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80111d6:	601a      	str	r2, [r3, #0]
 80111d8:	f3bf 8f4f 	dsb	sy
 80111dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80111e0:	f000 fc8a 	bl	8011af8 <vPortExitCritical>

	return xAlreadyYielded;
 80111e4:	68bb      	ldr	r3, [r7, #8]
}
 80111e6:	4618      	mov	r0, r3
 80111e8:	3710      	adds	r7, #16
 80111ea:	46bd      	mov	sp, r7
 80111ec:	bd80      	pop	{r7, pc}
 80111ee:	bf00      	nop
 80111f0:	20000940 	.word	0x20000940
 80111f4:	20000920 	.word	0x20000920
 80111f8:	200008f8 	.word	0x200008f8
 80111fc:	20000928 	.word	0x20000928
 8011200:	20000490 	.word	0x20000490
 8011204:	2000048c 	.word	0x2000048c
 8011208:	20000934 	.word	0x20000934
 801120c:	20000930 	.word	0x20000930
 8011210:	e000ed04 	.word	0xe000ed04

08011214 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011214:	b580      	push	{r7, lr}
 8011216:	b086      	sub	sp, #24
 8011218:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801121a:	2300      	movs	r3, #0
 801121c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801121e:	4b4f      	ldr	r3, [pc, #316]	; (801135c <xTaskIncrementTick+0x148>)
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	2b00      	cmp	r3, #0
 8011224:	f040 808f 	bne.w	8011346 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011228:	4b4d      	ldr	r3, [pc, #308]	; (8011360 <xTaskIncrementTick+0x14c>)
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	3301      	adds	r3, #1
 801122e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011230:	4a4b      	ldr	r2, [pc, #300]	; (8011360 <xTaskIncrementTick+0x14c>)
 8011232:	693b      	ldr	r3, [r7, #16]
 8011234:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011236:	693b      	ldr	r3, [r7, #16]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d120      	bne.n	801127e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801123c:	4b49      	ldr	r3, [pc, #292]	; (8011364 <xTaskIncrementTick+0x150>)
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	2b00      	cmp	r3, #0
 8011244:	d00a      	beq.n	801125c <xTaskIncrementTick+0x48>
	__asm volatile
 8011246:	f04f 0350 	mov.w	r3, #80	; 0x50
 801124a:	f383 8811 	msr	BASEPRI, r3
 801124e:	f3bf 8f6f 	isb	sy
 8011252:	f3bf 8f4f 	dsb	sy
 8011256:	603b      	str	r3, [r7, #0]
}
 8011258:	bf00      	nop
 801125a:	e7fe      	b.n	801125a <xTaskIncrementTick+0x46>
 801125c:	4b41      	ldr	r3, [pc, #260]	; (8011364 <xTaskIncrementTick+0x150>)
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	60fb      	str	r3, [r7, #12]
 8011262:	4b41      	ldr	r3, [pc, #260]	; (8011368 <xTaskIncrementTick+0x154>)
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	4a3f      	ldr	r2, [pc, #252]	; (8011364 <xTaskIncrementTick+0x150>)
 8011268:	6013      	str	r3, [r2, #0]
 801126a:	4a3f      	ldr	r2, [pc, #252]	; (8011368 <xTaskIncrementTick+0x154>)
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	6013      	str	r3, [r2, #0]
 8011270:	4b3e      	ldr	r3, [pc, #248]	; (801136c <xTaskIncrementTick+0x158>)
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	3301      	adds	r3, #1
 8011276:	4a3d      	ldr	r2, [pc, #244]	; (801136c <xTaskIncrementTick+0x158>)
 8011278:	6013      	str	r3, [r2, #0]
 801127a:	f000 f9f5 	bl	8011668 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801127e:	4b3c      	ldr	r3, [pc, #240]	; (8011370 <xTaskIncrementTick+0x15c>)
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	693a      	ldr	r2, [r7, #16]
 8011284:	429a      	cmp	r2, r3
 8011286:	d349      	bcc.n	801131c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011288:	4b36      	ldr	r3, [pc, #216]	; (8011364 <xTaskIncrementTick+0x150>)
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	2b00      	cmp	r3, #0
 8011290:	d104      	bne.n	801129c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011292:	4b37      	ldr	r3, [pc, #220]	; (8011370 <xTaskIncrementTick+0x15c>)
 8011294:	f04f 32ff 	mov.w	r2, #4294967295
 8011298:	601a      	str	r2, [r3, #0]
					break;
 801129a:	e03f      	b.n	801131c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801129c:	4b31      	ldr	r3, [pc, #196]	; (8011364 <xTaskIncrementTick+0x150>)
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	68db      	ldr	r3, [r3, #12]
 80112a2:	68db      	ldr	r3, [r3, #12]
 80112a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80112a6:	68bb      	ldr	r3, [r7, #8]
 80112a8:	685b      	ldr	r3, [r3, #4]
 80112aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80112ac:	693a      	ldr	r2, [r7, #16]
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	429a      	cmp	r2, r3
 80112b2:	d203      	bcs.n	80112bc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80112b4:	4a2e      	ldr	r2, [pc, #184]	; (8011370 <xTaskIncrementTick+0x15c>)
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80112ba:	e02f      	b.n	801131c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80112bc:	68bb      	ldr	r3, [r7, #8]
 80112be:	3304      	adds	r3, #4
 80112c0:	4618      	mov	r0, r3
 80112c2:	f7ff f83c 	bl	801033e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80112c6:	68bb      	ldr	r3, [r7, #8]
 80112c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d004      	beq.n	80112d8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80112ce:	68bb      	ldr	r3, [r7, #8]
 80112d0:	3318      	adds	r3, #24
 80112d2:	4618      	mov	r0, r3
 80112d4:	f7ff f833 	bl	801033e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80112d8:	68bb      	ldr	r3, [r7, #8]
 80112da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112dc:	4b25      	ldr	r3, [pc, #148]	; (8011374 <xTaskIncrementTick+0x160>)
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	429a      	cmp	r2, r3
 80112e2:	d903      	bls.n	80112ec <xTaskIncrementTick+0xd8>
 80112e4:	68bb      	ldr	r3, [r7, #8]
 80112e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112e8:	4a22      	ldr	r2, [pc, #136]	; (8011374 <xTaskIncrementTick+0x160>)
 80112ea:	6013      	str	r3, [r2, #0]
 80112ec:	68bb      	ldr	r3, [r7, #8]
 80112ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112f0:	4613      	mov	r3, r2
 80112f2:	009b      	lsls	r3, r3, #2
 80112f4:	4413      	add	r3, r2
 80112f6:	009b      	lsls	r3, r3, #2
 80112f8:	4a1f      	ldr	r2, [pc, #124]	; (8011378 <xTaskIncrementTick+0x164>)
 80112fa:	441a      	add	r2, r3
 80112fc:	68bb      	ldr	r3, [r7, #8]
 80112fe:	3304      	adds	r3, #4
 8011300:	4619      	mov	r1, r3
 8011302:	4610      	mov	r0, r2
 8011304:	f7fe ffbe 	bl	8010284 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011308:	68bb      	ldr	r3, [r7, #8]
 801130a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801130c:	4b1b      	ldr	r3, [pc, #108]	; (801137c <xTaskIncrementTick+0x168>)
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011312:	429a      	cmp	r2, r3
 8011314:	d3b8      	bcc.n	8011288 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8011316:	2301      	movs	r3, #1
 8011318:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801131a:	e7b5      	b.n	8011288 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801131c:	4b17      	ldr	r3, [pc, #92]	; (801137c <xTaskIncrementTick+0x168>)
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011322:	4915      	ldr	r1, [pc, #84]	; (8011378 <xTaskIncrementTick+0x164>)
 8011324:	4613      	mov	r3, r2
 8011326:	009b      	lsls	r3, r3, #2
 8011328:	4413      	add	r3, r2
 801132a:	009b      	lsls	r3, r3, #2
 801132c:	440b      	add	r3, r1
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	2b01      	cmp	r3, #1
 8011332:	d901      	bls.n	8011338 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8011334:	2301      	movs	r3, #1
 8011336:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011338:	4b11      	ldr	r3, [pc, #68]	; (8011380 <xTaskIncrementTick+0x16c>)
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	2b00      	cmp	r3, #0
 801133e:	d007      	beq.n	8011350 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8011340:	2301      	movs	r3, #1
 8011342:	617b      	str	r3, [r7, #20]
 8011344:	e004      	b.n	8011350 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8011346:	4b0f      	ldr	r3, [pc, #60]	; (8011384 <xTaskIncrementTick+0x170>)
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	3301      	adds	r3, #1
 801134c:	4a0d      	ldr	r2, [pc, #52]	; (8011384 <xTaskIncrementTick+0x170>)
 801134e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8011350:	697b      	ldr	r3, [r7, #20]
}
 8011352:	4618      	mov	r0, r3
 8011354:	3718      	adds	r7, #24
 8011356:	46bd      	mov	sp, r7
 8011358:	bd80      	pop	{r7, pc}
 801135a:	bf00      	nop
 801135c:	20000940 	.word	0x20000940
 8011360:	20000924 	.word	0x20000924
 8011364:	200008f0 	.word	0x200008f0
 8011368:	200008f4 	.word	0x200008f4
 801136c:	20000938 	.word	0x20000938
 8011370:	2000093c 	.word	0x2000093c
 8011374:	20000928 	.word	0x20000928
 8011378:	20000490 	.word	0x20000490
 801137c:	2000048c 	.word	0x2000048c
 8011380:	20000934 	.word	0x20000934
 8011384:	20000930 	.word	0x20000930

08011388 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011388:	b480      	push	{r7}
 801138a:	b085      	sub	sp, #20
 801138c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801138e:	4b2a      	ldr	r3, [pc, #168]	; (8011438 <vTaskSwitchContext+0xb0>)
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	2b00      	cmp	r3, #0
 8011394:	d003      	beq.n	801139e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011396:	4b29      	ldr	r3, [pc, #164]	; (801143c <vTaskSwitchContext+0xb4>)
 8011398:	2201      	movs	r2, #1
 801139a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801139c:	e046      	b.n	801142c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 801139e:	4b27      	ldr	r3, [pc, #156]	; (801143c <vTaskSwitchContext+0xb4>)
 80113a0:	2200      	movs	r2, #0
 80113a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80113a4:	4b26      	ldr	r3, [pc, #152]	; (8011440 <vTaskSwitchContext+0xb8>)
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	60fb      	str	r3, [r7, #12]
 80113aa:	e010      	b.n	80113ce <vTaskSwitchContext+0x46>
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d10a      	bne.n	80113c8 <vTaskSwitchContext+0x40>
	__asm volatile
 80113b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113b6:	f383 8811 	msr	BASEPRI, r3
 80113ba:	f3bf 8f6f 	isb	sy
 80113be:	f3bf 8f4f 	dsb	sy
 80113c2:	607b      	str	r3, [r7, #4]
}
 80113c4:	bf00      	nop
 80113c6:	e7fe      	b.n	80113c6 <vTaskSwitchContext+0x3e>
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	3b01      	subs	r3, #1
 80113cc:	60fb      	str	r3, [r7, #12]
 80113ce:	491d      	ldr	r1, [pc, #116]	; (8011444 <vTaskSwitchContext+0xbc>)
 80113d0:	68fa      	ldr	r2, [r7, #12]
 80113d2:	4613      	mov	r3, r2
 80113d4:	009b      	lsls	r3, r3, #2
 80113d6:	4413      	add	r3, r2
 80113d8:	009b      	lsls	r3, r3, #2
 80113da:	440b      	add	r3, r1
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d0e4      	beq.n	80113ac <vTaskSwitchContext+0x24>
 80113e2:	68fa      	ldr	r2, [r7, #12]
 80113e4:	4613      	mov	r3, r2
 80113e6:	009b      	lsls	r3, r3, #2
 80113e8:	4413      	add	r3, r2
 80113ea:	009b      	lsls	r3, r3, #2
 80113ec:	4a15      	ldr	r2, [pc, #84]	; (8011444 <vTaskSwitchContext+0xbc>)
 80113ee:	4413      	add	r3, r2
 80113f0:	60bb      	str	r3, [r7, #8]
 80113f2:	68bb      	ldr	r3, [r7, #8]
 80113f4:	685b      	ldr	r3, [r3, #4]
 80113f6:	685a      	ldr	r2, [r3, #4]
 80113f8:	68bb      	ldr	r3, [r7, #8]
 80113fa:	605a      	str	r2, [r3, #4]
 80113fc:	68bb      	ldr	r3, [r7, #8]
 80113fe:	685a      	ldr	r2, [r3, #4]
 8011400:	68bb      	ldr	r3, [r7, #8]
 8011402:	3308      	adds	r3, #8
 8011404:	429a      	cmp	r2, r3
 8011406:	d104      	bne.n	8011412 <vTaskSwitchContext+0x8a>
 8011408:	68bb      	ldr	r3, [r7, #8]
 801140a:	685b      	ldr	r3, [r3, #4]
 801140c:	685a      	ldr	r2, [r3, #4]
 801140e:	68bb      	ldr	r3, [r7, #8]
 8011410:	605a      	str	r2, [r3, #4]
 8011412:	68bb      	ldr	r3, [r7, #8]
 8011414:	685b      	ldr	r3, [r3, #4]
 8011416:	68db      	ldr	r3, [r3, #12]
 8011418:	4a0b      	ldr	r2, [pc, #44]	; (8011448 <vTaskSwitchContext+0xc0>)
 801141a:	6013      	str	r3, [r2, #0]
 801141c:	4a08      	ldr	r2, [pc, #32]	; (8011440 <vTaskSwitchContext+0xb8>)
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011422:	4b09      	ldr	r3, [pc, #36]	; (8011448 <vTaskSwitchContext+0xc0>)
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	3354      	adds	r3, #84	; 0x54
 8011428:	4a08      	ldr	r2, [pc, #32]	; (801144c <vTaskSwitchContext+0xc4>)
 801142a:	6013      	str	r3, [r2, #0]
}
 801142c:	bf00      	nop
 801142e:	3714      	adds	r7, #20
 8011430:	46bd      	mov	sp, r7
 8011432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011436:	4770      	bx	lr
 8011438:	20000940 	.word	0x20000940
 801143c:	20000934 	.word	0x20000934
 8011440:	20000928 	.word	0x20000928
 8011444:	20000490 	.word	0x20000490
 8011448:	2000048c 	.word	0x2000048c
 801144c:	20000080 	.word	0x20000080

08011450 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011450:	b580      	push	{r7, lr}
 8011452:	b084      	sub	sp, #16
 8011454:	af00      	add	r7, sp, #0
 8011456:	6078      	str	r0, [r7, #4]
 8011458:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	2b00      	cmp	r3, #0
 801145e:	d10a      	bne.n	8011476 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8011460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011464:	f383 8811 	msr	BASEPRI, r3
 8011468:	f3bf 8f6f 	isb	sy
 801146c:	f3bf 8f4f 	dsb	sy
 8011470:	60fb      	str	r3, [r7, #12]
}
 8011472:	bf00      	nop
 8011474:	e7fe      	b.n	8011474 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011476:	4b07      	ldr	r3, [pc, #28]	; (8011494 <vTaskPlaceOnEventList+0x44>)
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	3318      	adds	r3, #24
 801147c:	4619      	mov	r1, r3
 801147e:	6878      	ldr	r0, [r7, #4]
 8011480:	f7fe ff24 	bl	80102cc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011484:	2101      	movs	r1, #1
 8011486:	6838      	ldr	r0, [r7, #0]
 8011488:	f000 fa98 	bl	80119bc <prvAddCurrentTaskToDelayedList>
}
 801148c:	bf00      	nop
 801148e:	3710      	adds	r7, #16
 8011490:	46bd      	mov	sp, r7
 8011492:	bd80      	pop	{r7, pc}
 8011494:	2000048c 	.word	0x2000048c

08011498 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011498:	b580      	push	{r7, lr}
 801149a:	b086      	sub	sp, #24
 801149c:	af00      	add	r7, sp, #0
 801149e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	68db      	ldr	r3, [r3, #12]
 80114a4:	68db      	ldr	r3, [r3, #12]
 80114a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80114a8:	693b      	ldr	r3, [r7, #16]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d10a      	bne.n	80114c4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80114ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114b2:	f383 8811 	msr	BASEPRI, r3
 80114b6:	f3bf 8f6f 	isb	sy
 80114ba:	f3bf 8f4f 	dsb	sy
 80114be:	60fb      	str	r3, [r7, #12]
}
 80114c0:	bf00      	nop
 80114c2:	e7fe      	b.n	80114c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80114c4:	693b      	ldr	r3, [r7, #16]
 80114c6:	3318      	adds	r3, #24
 80114c8:	4618      	mov	r0, r3
 80114ca:	f7fe ff38 	bl	801033e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80114ce:	4b1e      	ldr	r3, [pc, #120]	; (8011548 <xTaskRemoveFromEventList+0xb0>)
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d11d      	bne.n	8011512 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80114d6:	693b      	ldr	r3, [r7, #16]
 80114d8:	3304      	adds	r3, #4
 80114da:	4618      	mov	r0, r3
 80114dc:	f7fe ff2f 	bl	801033e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80114e0:	693b      	ldr	r3, [r7, #16]
 80114e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114e4:	4b19      	ldr	r3, [pc, #100]	; (801154c <xTaskRemoveFromEventList+0xb4>)
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	429a      	cmp	r2, r3
 80114ea:	d903      	bls.n	80114f4 <xTaskRemoveFromEventList+0x5c>
 80114ec:	693b      	ldr	r3, [r7, #16]
 80114ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114f0:	4a16      	ldr	r2, [pc, #88]	; (801154c <xTaskRemoveFromEventList+0xb4>)
 80114f2:	6013      	str	r3, [r2, #0]
 80114f4:	693b      	ldr	r3, [r7, #16]
 80114f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114f8:	4613      	mov	r3, r2
 80114fa:	009b      	lsls	r3, r3, #2
 80114fc:	4413      	add	r3, r2
 80114fe:	009b      	lsls	r3, r3, #2
 8011500:	4a13      	ldr	r2, [pc, #76]	; (8011550 <xTaskRemoveFromEventList+0xb8>)
 8011502:	441a      	add	r2, r3
 8011504:	693b      	ldr	r3, [r7, #16]
 8011506:	3304      	adds	r3, #4
 8011508:	4619      	mov	r1, r3
 801150a:	4610      	mov	r0, r2
 801150c:	f7fe feba 	bl	8010284 <vListInsertEnd>
 8011510:	e005      	b.n	801151e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011512:	693b      	ldr	r3, [r7, #16]
 8011514:	3318      	adds	r3, #24
 8011516:	4619      	mov	r1, r3
 8011518:	480e      	ldr	r0, [pc, #56]	; (8011554 <xTaskRemoveFromEventList+0xbc>)
 801151a:	f7fe feb3 	bl	8010284 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801151e:	693b      	ldr	r3, [r7, #16]
 8011520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011522:	4b0d      	ldr	r3, [pc, #52]	; (8011558 <xTaskRemoveFromEventList+0xc0>)
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011528:	429a      	cmp	r2, r3
 801152a:	d905      	bls.n	8011538 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801152c:	2301      	movs	r3, #1
 801152e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011530:	4b0a      	ldr	r3, [pc, #40]	; (801155c <xTaskRemoveFromEventList+0xc4>)
 8011532:	2201      	movs	r2, #1
 8011534:	601a      	str	r2, [r3, #0]
 8011536:	e001      	b.n	801153c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8011538:	2300      	movs	r3, #0
 801153a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801153c:	697b      	ldr	r3, [r7, #20]
}
 801153e:	4618      	mov	r0, r3
 8011540:	3718      	adds	r7, #24
 8011542:	46bd      	mov	sp, r7
 8011544:	bd80      	pop	{r7, pc}
 8011546:	bf00      	nop
 8011548:	20000940 	.word	0x20000940
 801154c:	20000928 	.word	0x20000928
 8011550:	20000490 	.word	0x20000490
 8011554:	200008f8 	.word	0x200008f8
 8011558:	2000048c 	.word	0x2000048c
 801155c:	20000934 	.word	0x20000934

08011560 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011560:	b480      	push	{r7}
 8011562:	b083      	sub	sp, #12
 8011564:	af00      	add	r7, sp, #0
 8011566:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011568:	4b06      	ldr	r3, [pc, #24]	; (8011584 <vTaskInternalSetTimeOutState+0x24>)
 801156a:	681a      	ldr	r2, [r3, #0]
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011570:	4b05      	ldr	r3, [pc, #20]	; (8011588 <vTaskInternalSetTimeOutState+0x28>)
 8011572:	681a      	ldr	r2, [r3, #0]
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	605a      	str	r2, [r3, #4]
}
 8011578:	bf00      	nop
 801157a:	370c      	adds	r7, #12
 801157c:	46bd      	mov	sp, r7
 801157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011582:	4770      	bx	lr
 8011584:	20000938 	.word	0x20000938
 8011588:	20000924 	.word	0x20000924

0801158c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801158c:	b580      	push	{r7, lr}
 801158e:	b088      	sub	sp, #32
 8011590:	af00      	add	r7, sp, #0
 8011592:	6078      	str	r0, [r7, #4]
 8011594:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	2b00      	cmp	r3, #0
 801159a:	d10a      	bne.n	80115b2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801159c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115a0:	f383 8811 	msr	BASEPRI, r3
 80115a4:	f3bf 8f6f 	isb	sy
 80115a8:	f3bf 8f4f 	dsb	sy
 80115ac:	613b      	str	r3, [r7, #16]
}
 80115ae:	bf00      	nop
 80115b0:	e7fe      	b.n	80115b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80115b2:	683b      	ldr	r3, [r7, #0]
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d10a      	bne.n	80115ce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80115b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115bc:	f383 8811 	msr	BASEPRI, r3
 80115c0:	f3bf 8f6f 	isb	sy
 80115c4:	f3bf 8f4f 	dsb	sy
 80115c8:	60fb      	str	r3, [r7, #12]
}
 80115ca:	bf00      	nop
 80115cc:	e7fe      	b.n	80115cc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80115ce:	f000 fa63 	bl	8011a98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80115d2:	4b1d      	ldr	r3, [pc, #116]	; (8011648 <xTaskCheckForTimeOut+0xbc>)
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	685b      	ldr	r3, [r3, #4]
 80115dc:	69ba      	ldr	r2, [r7, #24]
 80115de:	1ad3      	subs	r3, r2, r3
 80115e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80115e2:	683b      	ldr	r3, [r7, #0]
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115ea:	d102      	bne.n	80115f2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80115ec:	2300      	movs	r3, #0
 80115ee:	61fb      	str	r3, [r7, #28]
 80115f0:	e023      	b.n	801163a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	681a      	ldr	r2, [r3, #0]
 80115f6:	4b15      	ldr	r3, [pc, #84]	; (801164c <xTaskCheckForTimeOut+0xc0>)
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	429a      	cmp	r2, r3
 80115fc:	d007      	beq.n	801160e <xTaskCheckForTimeOut+0x82>
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	685b      	ldr	r3, [r3, #4]
 8011602:	69ba      	ldr	r2, [r7, #24]
 8011604:	429a      	cmp	r2, r3
 8011606:	d302      	bcc.n	801160e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011608:	2301      	movs	r3, #1
 801160a:	61fb      	str	r3, [r7, #28]
 801160c:	e015      	b.n	801163a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801160e:	683b      	ldr	r3, [r7, #0]
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	697a      	ldr	r2, [r7, #20]
 8011614:	429a      	cmp	r2, r3
 8011616:	d20b      	bcs.n	8011630 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011618:	683b      	ldr	r3, [r7, #0]
 801161a:	681a      	ldr	r2, [r3, #0]
 801161c:	697b      	ldr	r3, [r7, #20]
 801161e:	1ad2      	subs	r2, r2, r3
 8011620:	683b      	ldr	r3, [r7, #0]
 8011622:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011624:	6878      	ldr	r0, [r7, #4]
 8011626:	f7ff ff9b 	bl	8011560 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801162a:	2300      	movs	r3, #0
 801162c:	61fb      	str	r3, [r7, #28]
 801162e:	e004      	b.n	801163a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8011630:	683b      	ldr	r3, [r7, #0]
 8011632:	2200      	movs	r2, #0
 8011634:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011636:	2301      	movs	r3, #1
 8011638:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801163a:	f000 fa5d 	bl	8011af8 <vPortExitCritical>

	return xReturn;
 801163e:	69fb      	ldr	r3, [r7, #28]
}
 8011640:	4618      	mov	r0, r3
 8011642:	3720      	adds	r7, #32
 8011644:	46bd      	mov	sp, r7
 8011646:	bd80      	pop	{r7, pc}
 8011648:	20000924 	.word	0x20000924
 801164c:	20000938 	.word	0x20000938

08011650 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011650:	b480      	push	{r7}
 8011652:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011654:	4b03      	ldr	r3, [pc, #12]	; (8011664 <vTaskMissedYield+0x14>)
 8011656:	2201      	movs	r2, #1
 8011658:	601a      	str	r2, [r3, #0]
}
 801165a:	bf00      	nop
 801165c:	46bd      	mov	sp, r7
 801165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011662:	4770      	bx	lr
 8011664:	20000934 	.word	0x20000934

08011668 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011668:	b480      	push	{r7}
 801166a:	b083      	sub	sp, #12
 801166c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801166e:	4b0c      	ldr	r3, [pc, #48]	; (80116a0 <prvResetNextTaskUnblockTime+0x38>)
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	2b00      	cmp	r3, #0
 8011676:	d104      	bne.n	8011682 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011678:	4b0a      	ldr	r3, [pc, #40]	; (80116a4 <prvResetNextTaskUnblockTime+0x3c>)
 801167a:	f04f 32ff 	mov.w	r2, #4294967295
 801167e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011680:	e008      	b.n	8011694 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011682:	4b07      	ldr	r3, [pc, #28]	; (80116a0 <prvResetNextTaskUnblockTime+0x38>)
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	68db      	ldr	r3, [r3, #12]
 8011688:	68db      	ldr	r3, [r3, #12]
 801168a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	685b      	ldr	r3, [r3, #4]
 8011690:	4a04      	ldr	r2, [pc, #16]	; (80116a4 <prvResetNextTaskUnblockTime+0x3c>)
 8011692:	6013      	str	r3, [r2, #0]
}
 8011694:	bf00      	nop
 8011696:	370c      	adds	r7, #12
 8011698:	46bd      	mov	sp, r7
 801169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801169e:	4770      	bx	lr
 80116a0:	200008f0 	.word	0x200008f0
 80116a4:	2000093c 	.word	0x2000093c

080116a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80116a8:	b480      	push	{r7}
 80116aa:	b083      	sub	sp, #12
 80116ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80116ae:	4b0b      	ldr	r3, [pc, #44]	; (80116dc <xTaskGetSchedulerState+0x34>)
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d102      	bne.n	80116bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80116b6:	2301      	movs	r3, #1
 80116b8:	607b      	str	r3, [r7, #4]
 80116ba:	e008      	b.n	80116ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80116bc:	4b08      	ldr	r3, [pc, #32]	; (80116e0 <xTaskGetSchedulerState+0x38>)
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d102      	bne.n	80116ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80116c4:	2302      	movs	r3, #2
 80116c6:	607b      	str	r3, [r7, #4]
 80116c8:	e001      	b.n	80116ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80116ca:	2300      	movs	r3, #0
 80116cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80116ce:	687b      	ldr	r3, [r7, #4]
	}
 80116d0:	4618      	mov	r0, r3
 80116d2:	370c      	adds	r7, #12
 80116d4:	46bd      	mov	sp, r7
 80116d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116da:	4770      	bx	lr
 80116dc:	2000092c 	.word	0x2000092c
 80116e0:	20000940 	.word	0x20000940

080116e4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80116e4:	b580      	push	{r7, lr}
 80116e6:	b084      	sub	sp, #16
 80116e8:	af00      	add	r7, sp, #0
 80116ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80116f0:	2300      	movs	r3, #0
 80116f2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d051      	beq.n	801179e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80116fa:	68bb      	ldr	r3, [r7, #8]
 80116fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116fe:	4b2a      	ldr	r3, [pc, #168]	; (80117a8 <xTaskPriorityInherit+0xc4>)
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011704:	429a      	cmp	r2, r3
 8011706:	d241      	bcs.n	801178c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011708:	68bb      	ldr	r3, [r7, #8]
 801170a:	699b      	ldr	r3, [r3, #24]
 801170c:	2b00      	cmp	r3, #0
 801170e:	db06      	blt.n	801171e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011710:	4b25      	ldr	r3, [pc, #148]	; (80117a8 <xTaskPriorityInherit+0xc4>)
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011716:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801171a:	68bb      	ldr	r3, [r7, #8]
 801171c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801171e:	68bb      	ldr	r3, [r7, #8]
 8011720:	6959      	ldr	r1, [r3, #20]
 8011722:	68bb      	ldr	r3, [r7, #8]
 8011724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011726:	4613      	mov	r3, r2
 8011728:	009b      	lsls	r3, r3, #2
 801172a:	4413      	add	r3, r2
 801172c:	009b      	lsls	r3, r3, #2
 801172e:	4a1f      	ldr	r2, [pc, #124]	; (80117ac <xTaskPriorityInherit+0xc8>)
 8011730:	4413      	add	r3, r2
 8011732:	4299      	cmp	r1, r3
 8011734:	d122      	bne.n	801177c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011736:	68bb      	ldr	r3, [r7, #8]
 8011738:	3304      	adds	r3, #4
 801173a:	4618      	mov	r0, r3
 801173c:	f7fe fdff 	bl	801033e <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011740:	4b19      	ldr	r3, [pc, #100]	; (80117a8 <xTaskPriorityInherit+0xc4>)
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011746:	68bb      	ldr	r3, [r7, #8]
 8011748:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801174a:	68bb      	ldr	r3, [r7, #8]
 801174c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801174e:	4b18      	ldr	r3, [pc, #96]	; (80117b0 <xTaskPriorityInherit+0xcc>)
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	429a      	cmp	r2, r3
 8011754:	d903      	bls.n	801175e <xTaskPriorityInherit+0x7a>
 8011756:	68bb      	ldr	r3, [r7, #8]
 8011758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801175a:	4a15      	ldr	r2, [pc, #84]	; (80117b0 <xTaskPriorityInherit+0xcc>)
 801175c:	6013      	str	r3, [r2, #0]
 801175e:	68bb      	ldr	r3, [r7, #8]
 8011760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011762:	4613      	mov	r3, r2
 8011764:	009b      	lsls	r3, r3, #2
 8011766:	4413      	add	r3, r2
 8011768:	009b      	lsls	r3, r3, #2
 801176a:	4a10      	ldr	r2, [pc, #64]	; (80117ac <xTaskPriorityInherit+0xc8>)
 801176c:	441a      	add	r2, r3
 801176e:	68bb      	ldr	r3, [r7, #8]
 8011770:	3304      	adds	r3, #4
 8011772:	4619      	mov	r1, r3
 8011774:	4610      	mov	r0, r2
 8011776:	f7fe fd85 	bl	8010284 <vListInsertEnd>
 801177a:	e004      	b.n	8011786 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801177c:	4b0a      	ldr	r3, [pc, #40]	; (80117a8 <xTaskPriorityInherit+0xc4>)
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011782:	68bb      	ldr	r3, [r7, #8]
 8011784:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011786:	2301      	movs	r3, #1
 8011788:	60fb      	str	r3, [r7, #12]
 801178a:	e008      	b.n	801179e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801178c:	68bb      	ldr	r3, [r7, #8]
 801178e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011790:	4b05      	ldr	r3, [pc, #20]	; (80117a8 <xTaskPriorityInherit+0xc4>)
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011796:	429a      	cmp	r2, r3
 8011798:	d201      	bcs.n	801179e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801179a:	2301      	movs	r3, #1
 801179c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801179e:	68fb      	ldr	r3, [r7, #12]
	}
 80117a0:	4618      	mov	r0, r3
 80117a2:	3710      	adds	r7, #16
 80117a4:	46bd      	mov	sp, r7
 80117a6:	bd80      	pop	{r7, pc}
 80117a8:	2000048c 	.word	0x2000048c
 80117ac:	20000490 	.word	0x20000490
 80117b0:	20000928 	.word	0x20000928

080117b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80117b4:	b580      	push	{r7, lr}
 80117b6:	b086      	sub	sp, #24
 80117b8:	af00      	add	r7, sp, #0
 80117ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80117c0:	2300      	movs	r3, #0
 80117c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d056      	beq.n	8011878 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80117ca:	4b2e      	ldr	r3, [pc, #184]	; (8011884 <xTaskPriorityDisinherit+0xd0>)
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	693a      	ldr	r2, [r7, #16]
 80117d0:	429a      	cmp	r2, r3
 80117d2:	d00a      	beq.n	80117ea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80117d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117d8:	f383 8811 	msr	BASEPRI, r3
 80117dc:	f3bf 8f6f 	isb	sy
 80117e0:	f3bf 8f4f 	dsb	sy
 80117e4:	60fb      	str	r3, [r7, #12]
}
 80117e6:	bf00      	nop
 80117e8:	e7fe      	b.n	80117e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80117ea:	693b      	ldr	r3, [r7, #16]
 80117ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d10a      	bne.n	8011808 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80117f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117f6:	f383 8811 	msr	BASEPRI, r3
 80117fa:	f3bf 8f6f 	isb	sy
 80117fe:	f3bf 8f4f 	dsb	sy
 8011802:	60bb      	str	r3, [r7, #8]
}
 8011804:	bf00      	nop
 8011806:	e7fe      	b.n	8011806 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8011808:	693b      	ldr	r3, [r7, #16]
 801180a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801180c:	1e5a      	subs	r2, r3, #1
 801180e:	693b      	ldr	r3, [r7, #16]
 8011810:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011812:	693b      	ldr	r3, [r7, #16]
 8011814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011816:	693b      	ldr	r3, [r7, #16]
 8011818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801181a:	429a      	cmp	r2, r3
 801181c:	d02c      	beq.n	8011878 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801181e:	693b      	ldr	r3, [r7, #16]
 8011820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011822:	2b00      	cmp	r3, #0
 8011824:	d128      	bne.n	8011878 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011826:	693b      	ldr	r3, [r7, #16]
 8011828:	3304      	adds	r3, #4
 801182a:	4618      	mov	r0, r3
 801182c:	f7fe fd87 	bl	801033e <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011830:	693b      	ldr	r3, [r7, #16]
 8011832:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011834:	693b      	ldr	r3, [r7, #16]
 8011836:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011838:	693b      	ldr	r3, [r7, #16]
 801183a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801183c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011840:	693b      	ldr	r3, [r7, #16]
 8011842:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011844:	693b      	ldr	r3, [r7, #16]
 8011846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011848:	4b0f      	ldr	r3, [pc, #60]	; (8011888 <xTaskPriorityDisinherit+0xd4>)
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	429a      	cmp	r2, r3
 801184e:	d903      	bls.n	8011858 <xTaskPriorityDisinherit+0xa4>
 8011850:	693b      	ldr	r3, [r7, #16]
 8011852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011854:	4a0c      	ldr	r2, [pc, #48]	; (8011888 <xTaskPriorityDisinherit+0xd4>)
 8011856:	6013      	str	r3, [r2, #0]
 8011858:	693b      	ldr	r3, [r7, #16]
 801185a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801185c:	4613      	mov	r3, r2
 801185e:	009b      	lsls	r3, r3, #2
 8011860:	4413      	add	r3, r2
 8011862:	009b      	lsls	r3, r3, #2
 8011864:	4a09      	ldr	r2, [pc, #36]	; (801188c <xTaskPriorityDisinherit+0xd8>)
 8011866:	441a      	add	r2, r3
 8011868:	693b      	ldr	r3, [r7, #16]
 801186a:	3304      	adds	r3, #4
 801186c:	4619      	mov	r1, r3
 801186e:	4610      	mov	r0, r2
 8011870:	f7fe fd08 	bl	8010284 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011874:	2301      	movs	r3, #1
 8011876:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011878:	697b      	ldr	r3, [r7, #20]
	}
 801187a:	4618      	mov	r0, r3
 801187c:	3718      	adds	r7, #24
 801187e:	46bd      	mov	sp, r7
 8011880:	bd80      	pop	{r7, pc}
 8011882:	bf00      	nop
 8011884:	2000048c 	.word	0x2000048c
 8011888:	20000928 	.word	0x20000928
 801188c:	20000490 	.word	0x20000490

08011890 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011890:	b580      	push	{r7, lr}
 8011892:	b088      	sub	sp, #32
 8011894:	af00      	add	r7, sp, #0
 8011896:	6078      	str	r0, [r7, #4]
 8011898:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801189e:	2301      	movs	r3, #1
 80118a0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d06a      	beq.n	801197e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80118a8:	69bb      	ldr	r3, [r7, #24]
 80118aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d10a      	bne.n	80118c6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80118b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118b4:	f383 8811 	msr	BASEPRI, r3
 80118b8:	f3bf 8f6f 	isb	sy
 80118bc:	f3bf 8f4f 	dsb	sy
 80118c0:	60fb      	str	r3, [r7, #12]
}
 80118c2:	bf00      	nop
 80118c4:	e7fe      	b.n	80118c4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80118c6:	69bb      	ldr	r3, [r7, #24]
 80118c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80118ca:	683a      	ldr	r2, [r7, #0]
 80118cc:	429a      	cmp	r2, r3
 80118ce:	d902      	bls.n	80118d6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80118d0:	683b      	ldr	r3, [r7, #0]
 80118d2:	61fb      	str	r3, [r7, #28]
 80118d4:	e002      	b.n	80118dc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80118d6:	69bb      	ldr	r3, [r7, #24]
 80118d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80118da:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80118dc:	69bb      	ldr	r3, [r7, #24]
 80118de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118e0:	69fa      	ldr	r2, [r7, #28]
 80118e2:	429a      	cmp	r2, r3
 80118e4:	d04b      	beq.n	801197e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80118e6:	69bb      	ldr	r3, [r7, #24]
 80118e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80118ea:	697a      	ldr	r2, [r7, #20]
 80118ec:	429a      	cmp	r2, r3
 80118ee:	d146      	bne.n	801197e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80118f0:	4b25      	ldr	r3, [pc, #148]	; (8011988 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	69ba      	ldr	r2, [r7, #24]
 80118f6:	429a      	cmp	r2, r3
 80118f8:	d10a      	bne.n	8011910 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80118fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118fe:	f383 8811 	msr	BASEPRI, r3
 8011902:	f3bf 8f6f 	isb	sy
 8011906:	f3bf 8f4f 	dsb	sy
 801190a:	60bb      	str	r3, [r7, #8]
}
 801190c:	bf00      	nop
 801190e:	e7fe      	b.n	801190e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011910:	69bb      	ldr	r3, [r7, #24]
 8011912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011914:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011916:	69bb      	ldr	r3, [r7, #24]
 8011918:	69fa      	ldr	r2, [r7, #28]
 801191a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801191c:	69bb      	ldr	r3, [r7, #24]
 801191e:	699b      	ldr	r3, [r3, #24]
 8011920:	2b00      	cmp	r3, #0
 8011922:	db04      	blt.n	801192e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011924:	69fb      	ldr	r3, [r7, #28]
 8011926:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801192a:	69bb      	ldr	r3, [r7, #24]
 801192c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801192e:	69bb      	ldr	r3, [r7, #24]
 8011930:	6959      	ldr	r1, [r3, #20]
 8011932:	693a      	ldr	r2, [r7, #16]
 8011934:	4613      	mov	r3, r2
 8011936:	009b      	lsls	r3, r3, #2
 8011938:	4413      	add	r3, r2
 801193a:	009b      	lsls	r3, r3, #2
 801193c:	4a13      	ldr	r2, [pc, #76]	; (801198c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801193e:	4413      	add	r3, r2
 8011940:	4299      	cmp	r1, r3
 8011942:	d11c      	bne.n	801197e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011944:	69bb      	ldr	r3, [r7, #24]
 8011946:	3304      	adds	r3, #4
 8011948:	4618      	mov	r0, r3
 801194a:	f7fe fcf8 	bl	801033e <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801194e:	69bb      	ldr	r3, [r7, #24]
 8011950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011952:	4b0f      	ldr	r3, [pc, #60]	; (8011990 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	429a      	cmp	r2, r3
 8011958:	d903      	bls.n	8011962 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 801195a:	69bb      	ldr	r3, [r7, #24]
 801195c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801195e:	4a0c      	ldr	r2, [pc, #48]	; (8011990 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011960:	6013      	str	r3, [r2, #0]
 8011962:	69bb      	ldr	r3, [r7, #24]
 8011964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011966:	4613      	mov	r3, r2
 8011968:	009b      	lsls	r3, r3, #2
 801196a:	4413      	add	r3, r2
 801196c:	009b      	lsls	r3, r3, #2
 801196e:	4a07      	ldr	r2, [pc, #28]	; (801198c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8011970:	441a      	add	r2, r3
 8011972:	69bb      	ldr	r3, [r7, #24]
 8011974:	3304      	adds	r3, #4
 8011976:	4619      	mov	r1, r3
 8011978:	4610      	mov	r0, r2
 801197a:	f7fe fc83 	bl	8010284 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801197e:	bf00      	nop
 8011980:	3720      	adds	r7, #32
 8011982:	46bd      	mov	sp, r7
 8011984:	bd80      	pop	{r7, pc}
 8011986:	bf00      	nop
 8011988:	2000048c 	.word	0x2000048c
 801198c:	20000490 	.word	0x20000490
 8011990:	20000928 	.word	0x20000928

08011994 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011994:	b480      	push	{r7}
 8011996:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011998:	4b07      	ldr	r3, [pc, #28]	; (80119b8 <pvTaskIncrementMutexHeldCount+0x24>)
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	2b00      	cmp	r3, #0
 801199e:	d004      	beq.n	80119aa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80119a0:	4b05      	ldr	r3, [pc, #20]	; (80119b8 <pvTaskIncrementMutexHeldCount+0x24>)
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80119a6:	3201      	adds	r2, #1
 80119a8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80119aa:	4b03      	ldr	r3, [pc, #12]	; (80119b8 <pvTaskIncrementMutexHeldCount+0x24>)
 80119ac:	681b      	ldr	r3, [r3, #0]
	}
 80119ae:	4618      	mov	r0, r3
 80119b0:	46bd      	mov	sp, r7
 80119b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119b6:	4770      	bx	lr
 80119b8:	2000048c 	.word	0x2000048c

080119bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80119bc:	b580      	push	{r7, lr}
 80119be:	b084      	sub	sp, #16
 80119c0:	af00      	add	r7, sp, #0
 80119c2:	6078      	str	r0, [r7, #4]
 80119c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80119c6:	4b21      	ldr	r3, [pc, #132]	; (8011a4c <prvAddCurrentTaskToDelayedList+0x90>)
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80119cc:	4b20      	ldr	r3, [pc, #128]	; (8011a50 <prvAddCurrentTaskToDelayedList+0x94>)
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	3304      	adds	r3, #4
 80119d2:	4618      	mov	r0, r3
 80119d4:	f7fe fcb3 	bl	801033e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119de:	d10a      	bne.n	80119f6 <prvAddCurrentTaskToDelayedList+0x3a>
 80119e0:	683b      	ldr	r3, [r7, #0]
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d007      	beq.n	80119f6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80119e6:	4b1a      	ldr	r3, [pc, #104]	; (8011a50 <prvAddCurrentTaskToDelayedList+0x94>)
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	3304      	adds	r3, #4
 80119ec:	4619      	mov	r1, r3
 80119ee:	4819      	ldr	r0, [pc, #100]	; (8011a54 <prvAddCurrentTaskToDelayedList+0x98>)
 80119f0:	f7fe fc48 	bl	8010284 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80119f4:	e026      	b.n	8011a44 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80119f6:	68fa      	ldr	r2, [r7, #12]
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	4413      	add	r3, r2
 80119fc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80119fe:	4b14      	ldr	r3, [pc, #80]	; (8011a50 <prvAddCurrentTaskToDelayedList+0x94>)
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	68ba      	ldr	r2, [r7, #8]
 8011a04:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011a06:	68ba      	ldr	r2, [r7, #8]
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	429a      	cmp	r2, r3
 8011a0c:	d209      	bcs.n	8011a22 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011a0e:	4b12      	ldr	r3, [pc, #72]	; (8011a58 <prvAddCurrentTaskToDelayedList+0x9c>)
 8011a10:	681a      	ldr	r2, [r3, #0]
 8011a12:	4b0f      	ldr	r3, [pc, #60]	; (8011a50 <prvAddCurrentTaskToDelayedList+0x94>)
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	3304      	adds	r3, #4
 8011a18:	4619      	mov	r1, r3
 8011a1a:	4610      	mov	r0, r2
 8011a1c:	f7fe fc56 	bl	80102cc <vListInsert>
}
 8011a20:	e010      	b.n	8011a44 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011a22:	4b0e      	ldr	r3, [pc, #56]	; (8011a5c <prvAddCurrentTaskToDelayedList+0xa0>)
 8011a24:	681a      	ldr	r2, [r3, #0]
 8011a26:	4b0a      	ldr	r3, [pc, #40]	; (8011a50 <prvAddCurrentTaskToDelayedList+0x94>)
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	3304      	adds	r3, #4
 8011a2c:	4619      	mov	r1, r3
 8011a2e:	4610      	mov	r0, r2
 8011a30:	f7fe fc4c 	bl	80102cc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011a34:	4b0a      	ldr	r3, [pc, #40]	; (8011a60 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	68ba      	ldr	r2, [r7, #8]
 8011a3a:	429a      	cmp	r2, r3
 8011a3c:	d202      	bcs.n	8011a44 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011a3e:	4a08      	ldr	r2, [pc, #32]	; (8011a60 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011a40:	68bb      	ldr	r3, [r7, #8]
 8011a42:	6013      	str	r3, [r2, #0]
}
 8011a44:	bf00      	nop
 8011a46:	3710      	adds	r7, #16
 8011a48:	46bd      	mov	sp, r7
 8011a4a:	bd80      	pop	{r7, pc}
 8011a4c:	20000924 	.word	0x20000924
 8011a50:	2000048c 	.word	0x2000048c
 8011a54:	2000090c 	.word	0x2000090c
 8011a58:	200008f4 	.word	0x200008f4
 8011a5c:	200008f0 	.word	0x200008f0
 8011a60:	2000093c 	.word	0x2000093c
	...

08011a70 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011a70:	4b07      	ldr	r3, [pc, #28]	; (8011a90 <pxCurrentTCBConst2>)
 8011a72:	6819      	ldr	r1, [r3, #0]
 8011a74:	6808      	ldr	r0, [r1, #0]
 8011a76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a7a:	f380 8809 	msr	PSP, r0
 8011a7e:	f3bf 8f6f 	isb	sy
 8011a82:	f04f 0000 	mov.w	r0, #0
 8011a86:	f380 8811 	msr	BASEPRI, r0
 8011a8a:	4770      	bx	lr
 8011a8c:	f3af 8000 	nop.w

08011a90 <pxCurrentTCBConst2>:
 8011a90:	2000048c 	.word	0x2000048c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011a94:	bf00      	nop
 8011a96:	bf00      	nop

08011a98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011a98:	b480      	push	{r7}
 8011a9a:	b083      	sub	sp, #12
 8011a9c:	af00      	add	r7, sp, #0
	__asm volatile
 8011a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011aa2:	f383 8811 	msr	BASEPRI, r3
 8011aa6:	f3bf 8f6f 	isb	sy
 8011aaa:	f3bf 8f4f 	dsb	sy
 8011aae:	607b      	str	r3, [r7, #4]
}
 8011ab0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011ab2:	4b0f      	ldr	r3, [pc, #60]	; (8011af0 <vPortEnterCritical+0x58>)
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	3301      	adds	r3, #1
 8011ab8:	4a0d      	ldr	r2, [pc, #52]	; (8011af0 <vPortEnterCritical+0x58>)
 8011aba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011abc:	4b0c      	ldr	r3, [pc, #48]	; (8011af0 <vPortEnterCritical+0x58>)
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	2b01      	cmp	r3, #1
 8011ac2:	d10f      	bne.n	8011ae4 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011ac4:	4b0b      	ldr	r3, [pc, #44]	; (8011af4 <vPortEnterCritical+0x5c>)
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	b2db      	uxtb	r3, r3
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d00a      	beq.n	8011ae4 <vPortEnterCritical+0x4c>
	__asm volatile
 8011ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ad2:	f383 8811 	msr	BASEPRI, r3
 8011ad6:	f3bf 8f6f 	isb	sy
 8011ada:	f3bf 8f4f 	dsb	sy
 8011ade:	603b      	str	r3, [r7, #0]
}
 8011ae0:	bf00      	nop
 8011ae2:	e7fe      	b.n	8011ae2 <vPortEnterCritical+0x4a>
	}
}
 8011ae4:	bf00      	nop
 8011ae6:	370c      	adds	r7, #12
 8011ae8:	46bd      	mov	sp, r7
 8011aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aee:	4770      	bx	lr
 8011af0:	2000007c 	.word	0x2000007c
 8011af4:	e000ed04 	.word	0xe000ed04

08011af8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011af8:	b480      	push	{r7}
 8011afa:	b083      	sub	sp, #12
 8011afc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011afe:	4b12      	ldr	r3, [pc, #72]	; (8011b48 <vPortExitCritical+0x50>)
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d10a      	bne.n	8011b1c <vPortExitCritical+0x24>
	__asm volatile
 8011b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b0a:	f383 8811 	msr	BASEPRI, r3
 8011b0e:	f3bf 8f6f 	isb	sy
 8011b12:	f3bf 8f4f 	dsb	sy
 8011b16:	607b      	str	r3, [r7, #4]
}
 8011b18:	bf00      	nop
 8011b1a:	e7fe      	b.n	8011b1a <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011b1c:	4b0a      	ldr	r3, [pc, #40]	; (8011b48 <vPortExitCritical+0x50>)
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	3b01      	subs	r3, #1
 8011b22:	4a09      	ldr	r2, [pc, #36]	; (8011b48 <vPortExitCritical+0x50>)
 8011b24:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011b26:	4b08      	ldr	r3, [pc, #32]	; (8011b48 <vPortExitCritical+0x50>)
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d105      	bne.n	8011b3a <vPortExitCritical+0x42>
 8011b2e:	2300      	movs	r3, #0
 8011b30:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011b32:	683b      	ldr	r3, [r7, #0]
 8011b34:	f383 8811 	msr	BASEPRI, r3
}
 8011b38:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011b3a:	bf00      	nop
 8011b3c:	370c      	adds	r7, #12
 8011b3e:	46bd      	mov	sp, r7
 8011b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b44:	4770      	bx	lr
 8011b46:	bf00      	nop
 8011b48:	2000007c 	.word	0x2000007c
 8011b4c:	00000000 	.word	0x00000000

08011b50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011b50:	f3ef 8009 	mrs	r0, PSP
 8011b54:	f3bf 8f6f 	isb	sy
 8011b58:	4b15      	ldr	r3, [pc, #84]	; (8011bb0 <pxCurrentTCBConst>)
 8011b5a:	681a      	ldr	r2, [r3, #0]
 8011b5c:	f01e 0f10 	tst.w	lr, #16
 8011b60:	bf08      	it	eq
 8011b62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011b66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b6a:	6010      	str	r0, [r2, #0]
 8011b6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011b70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011b74:	f380 8811 	msr	BASEPRI, r0
 8011b78:	f3bf 8f4f 	dsb	sy
 8011b7c:	f3bf 8f6f 	isb	sy
 8011b80:	f7ff fc02 	bl	8011388 <vTaskSwitchContext>
 8011b84:	f04f 0000 	mov.w	r0, #0
 8011b88:	f380 8811 	msr	BASEPRI, r0
 8011b8c:	bc09      	pop	{r0, r3}
 8011b8e:	6819      	ldr	r1, [r3, #0]
 8011b90:	6808      	ldr	r0, [r1, #0]
 8011b92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b96:	f01e 0f10 	tst.w	lr, #16
 8011b9a:	bf08      	it	eq
 8011b9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011ba0:	f380 8809 	msr	PSP, r0
 8011ba4:	f3bf 8f6f 	isb	sy
 8011ba8:	4770      	bx	lr
 8011baa:	bf00      	nop
 8011bac:	f3af 8000 	nop.w

08011bb0 <pxCurrentTCBConst>:
 8011bb0:	2000048c 	.word	0x2000048c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011bb4:	bf00      	nop
 8011bb6:	bf00      	nop

08011bb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011bb8:	b580      	push	{r7, lr}
 8011bba:	b082      	sub	sp, #8
 8011bbc:	af00      	add	r7, sp, #0
	__asm volatile
 8011bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bc2:	f383 8811 	msr	BASEPRI, r3
 8011bc6:	f3bf 8f6f 	isb	sy
 8011bca:	f3bf 8f4f 	dsb	sy
 8011bce:	607b      	str	r3, [r7, #4]
}
 8011bd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011bd2:	f7ff fb1f 	bl	8011214 <xTaskIncrementTick>
 8011bd6:	4603      	mov	r3, r0
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d003      	beq.n	8011be4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011bdc:	4b06      	ldr	r3, [pc, #24]	; (8011bf8 <xPortSysTickHandler+0x40>)
 8011bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011be2:	601a      	str	r2, [r3, #0]
 8011be4:	2300      	movs	r3, #0
 8011be6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011be8:	683b      	ldr	r3, [r7, #0]
 8011bea:	f383 8811 	msr	BASEPRI, r3
}
 8011bee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011bf0:	bf00      	nop
 8011bf2:	3708      	adds	r7, #8
 8011bf4:	46bd      	mov	sp, r7
 8011bf6:	bd80      	pop	{r7, pc}
 8011bf8:	e000ed04 	.word	0xe000ed04

08011bfc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011bfc:	b480      	push	{r7}
 8011bfe:	b085      	sub	sp, #20
 8011c00:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011c02:	f3ef 8305 	mrs	r3, IPSR
 8011c06:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	2b0f      	cmp	r3, #15
 8011c0c:	d914      	bls.n	8011c38 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011c0e:	4a17      	ldr	r2, [pc, #92]	; (8011c6c <vPortValidateInterruptPriority+0x70>)
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	4413      	add	r3, r2
 8011c14:	781b      	ldrb	r3, [r3, #0]
 8011c16:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011c18:	4b15      	ldr	r3, [pc, #84]	; (8011c70 <vPortValidateInterruptPriority+0x74>)
 8011c1a:	781b      	ldrb	r3, [r3, #0]
 8011c1c:	7afa      	ldrb	r2, [r7, #11]
 8011c1e:	429a      	cmp	r2, r3
 8011c20:	d20a      	bcs.n	8011c38 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8011c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c26:	f383 8811 	msr	BASEPRI, r3
 8011c2a:	f3bf 8f6f 	isb	sy
 8011c2e:	f3bf 8f4f 	dsb	sy
 8011c32:	607b      	str	r3, [r7, #4]
}
 8011c34:	bf00      	nop
 8011c36:	e7fe      	b.n	8011c36 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011c38:	4b0e      	ldr	r3, [pc, #56]	; (8011c74 <vPortValidateInterruptPriority+0x78>)
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011c40:	4b0d      	ldr	r3, [pc, #52]	; (8011c78 <vPortValidateInterruptPriority+0x7c>)
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	429a      	cmp	r2, r3
 8011c46:	d90a      	bls.n	8011c5e <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8011c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c4c:	f383 8811 	msr	BASEPRI, r3
 8011c50:	f3bf 8f6f 	isb	sy
 8011c54:	f3bf 8f4f 	dsb	sy
 8011c58:	603b      	str	r3, [r7, #0]
}
 8011c5a:	bf00      	nop
 8011c5c:	e7fe      	b.n	8011c5c <vPortValidateInterruptPriority+0x60>
	}
 8011c5e:	bf00      	nop
 8011c60:	3714      	adds	r7, #20
 8011c62:	46bd      	mov	sp, r7
 8011c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c68:	4770      	bx	lr
 8011c6a:	bf00      	nop
 8011c6c:	e000e3f0 	.word	0xe000e3f0
 8011c70:	20000944 	.word	0x20000944
 8011c74:	e000ed0c 	.word	0xe000ed0c
 8011c78:	20000948 	.word	0x20000948

08011c7c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011c7c:	b580      	push	{r7, lr}
 8011c7e:	b08a      	sub	sp, #40	; 0x28
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011c84:	2300      	movs	r3, #0
 8011c86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011c88:	f7ff fa18 	bl	80110bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011c8c:	4b5b      	ldr	r3, [pc, #364]	; (8011dfc <pvPortMalloc+0x180>)
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d101      	bne.n	8011c98 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011c94:	f000 f920 	bl	8011ed8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011c98:	4b59      	ldr	r3, [pc, #356]	; (8011e00 <pvPortMalloc+0x184>)
 8011c9a:	681a      	ldr	r2, [r3, #0]
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	4013      	ands	r3, r2
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	f040 8093 	bne.w	8011dcc <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d01d      	beq.n	8011ce8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8011cac:	2208      	movs	r2, #8
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	4413      	add	r3, r2
 8011cb2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	f003 0307 	and.w	r3, r3, #7
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d014      	beq.n	8011ce8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	f023 0307 	bic.w	r3, r3, #7
 8011cc4:	3308      	adds	r3, #8
 8011cc6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	f003 0307 	and.w	r3, r3, #7
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d00a      	beq.n	8011ce8 <pvPortMalloc+0x6c>
	__asm volatile
 8011cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cd6:	f383 8811 	msr	BASEPRI, r3
 8011cda:	f3bf 8f6f 	isb	sy
 8011cde:	f3bf 8f4f 	dsb	sy
 8011ce2:	617b      	str	r3, [r7, #20]
}
 8011ce4:	bf00      	nop
 8011ce6:	e7fe      	b.n	8011ce6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d06e      	beq.n	8011dcc <pvPortMalloc+0x150>
 8011cee:	4b45      	ldr	r3, [pc, #276]	; (8011e04 <pvPortMalloc+0x188>)
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	687a      	ldr	r2, [r7, #4]
 8011cf4:	429a      	cmp	r2, r3
 8011cf6:	d869      	bhi.n	8011dcc <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011cf8:	4b43      	ldr	r3, [pc, #268]	; (8011e08 <pvPortMalloc+0x18c>)
 8011cfa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011cfc:	4b42      	ldr	r3, [pc, #264]	; (8011e08 <pvPortMalloc+0x18c>)
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011d02:	e004      	b.n	8011d0e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8011d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d06:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d10:	685b      	ldr	r3, [r3, #4]
 8011d12:	687a      	ldr	r2, [r7, #4]
 8011d14:	429a      	cmp	r2, r3
 8011d16:	d903      	bls.n	8011d20 <pvPortMalloc+0xa4>
 8011d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d1f1      	bne.n	8011d04 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011d20:	4b36      	ldr	r3, [pc, #216]	; (8011dfc <pvPortMalloc+0x180>)
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d26:	429a      	cmp	r2, r3
 8011d28:	d050      	beq.n	8011dcc <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011d2a:	6a3b      	ldr	r3, [r7, #32]
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	2208      	movs	r2, #8
 8011d30:	4413      	add	r3, r2
 8011d32:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d36:	681a      	ldr	r2, [r3, #0]
 8011d38:	6a3b      	ldr	r3, [r7, #32]
 8011d3a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d3e:	685a      	ldr	r2, [r3, #4]
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	1ad2      	subs	r2, r2, r3
 8011d44:	2308      	movs	r3, #8
 8011d46:	005b      	lsls	r3, r3, #1
 8011d48:	429a      	cmp	r2, r3
 8011d4a:	d91f      	bls.n	8011d8c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	4413      	add	r3, r2
 8011d52:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011d54:	69bb      	ldr	r3, [r7, #24]
 8011d56:	f003 0307 	and.w	r3, r3, #7
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d00a      	beq.n	8011d74 <pvPortMalloc+0xf8>
	__asm volatile
 8011d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d62:	f383 8811 	msr	BASEPRI, r3
 8011d66:	f3bf 8f6f 	isb	sy
 8011d6a:	f3bf 8f4f 	dsb	sy
 8011d6e:	613b      	str	r3, [r7, #16]
}
 8011d70:	bf00      	nop
 8011d72:	e7fe      	b.n	8011d72 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d76:	685a      	ldr	r2, [r3, #4]
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	1ad2      	subs	r2, r2, r3
 8011d7c:	69bb      	ldr	r3, [r7, #24]
 8011d7e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d82:	687a      	ldr	r2, [r7, #4]
 8011d84:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011d86:	69b8      	ldr	r0, [r7, #24]
 8011d88:	f000 f908 	bl	8011f9c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011d8c:	4b1d      	ldr	r3, [pc, #116]	; (8011e04 <pvPortMalloc+0x188>)
 8011d8e:	681a      	ldr	r2, [r3, #0]
 8011d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d92:	685b      	ldr	r3, [r3, #4]
 8011d94:	1ad3      	subs	r3, r2, r3
 8011d96:	4a1b      	ldr	r2, [pc, #108]	; (8011e04 <pvPortMalloc+0x188>)
 8011d98:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011d9a:	4b1a      	ldr	r3, [pc, #104]	; (8011e04 <pvPortMalloc+0x188>)
 8011d9c:	681a      	ldr	r2, [r3, #0]
 8011d9e:	4b1b      	ldr	r3, [pc, #108]	; (8011e0c <pvPortMalloc+0x190>)
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	429a      	cmp	r2, r3
 8011da4:	d203      	bcs.n	8011dae <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011da6:	4b17      	ldr	r3, [pc, #92]	; (8011e04 <pvPortMalloc+0x188>)
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	4a18      	ldr	r2, [pc, #96]	; (8011e0c <pvPortMalloc+0x190>)
 8011dac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011db0:	685a      	ldr	r2, [r3, #4]
 8011db2:	4b13      	ldr	r3, [pc, #76]	; (8011e00 <pvPortMalloc+0x184>)
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	431a      	orrs	r2, r3
 8011db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dbe:	2200      	movs	r2, #0
 8011dc0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8011dc2:	4b13      	ldr	r3, [pc, #76]	; (8011e10 <pvPortMalloc+0x194>)
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	3301      	adds	r3, #1
 8011dc8:	4a11      	ldr	r2, [pc, #68]	; (8011e10 <pvPortMalloc+0x194>)
 8011dca:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011dcc:	f7ff f984 	bl	80110d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011dd0:	69fb      	ldr	r3, [r7, #28]
 8011dd2:	f003 0307 	and.w	r3, r3, #7
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d00a      	beq.n	8011df0 <pvPortMalloc+0x174>
	__asm volatile
 8011dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dde:	f383 8811 	msr	BASEPRI, r3
 8011de2:	f3bf 8f6f 	isb	sy
 8011de6:	f3bf 8f4f 	dsb	sy
 8011dea:	60fb      	str	r3, [r7, #12]
}
 8011dec:	bf00      	nop
 8011dee:	e7fe      	b.n	8011dee <pvPortMalloc+0x172>
	return pvReturn;
 8011df0:	69fb      	ldr	r3, [r7, #28]
}
 8011df2:	4618      	mov	r0, r3
 8011df4:	3728      	adds	r7, #40	; 0x28
 8011df6:	46bd      	mov	sp, r7
 8011df8:	bd80      	pop	{r7, pc}
 8011dfa:	bf00      	nop
 8011dfc:	20004fa4 	.word	0x20004fa4
 8011e00:	20004fb8 	.word	0x20004fb8
 8011e04:	20004fa8 	.word	0x20004fa8
 8011e08:	20004f9c 	.word	0x20004f9c
 8011e0c:	20004fac 	.word	0x20004fac
 8011e10:	20004fb0 	.word	0x20004fb0

08011e14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011e14:	b580      	push	{r7, lr}
 8011e16:	b086      	sub	sp, #24
 8011e18:	af00      	add	r7, sp, #0
 8011e1a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d04d      	beq.n	8011ec2 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011e26:	2308      	movs	r3, #8
 8011e28:	425b      	negs	r3, r3
 8011e2a:	697a      	ldr	r2, [r7, #20]
 8011e2c:	4413      	add	r3, r2
 8011e2e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011e30:	697b      	ldr	r3, [r7, #20]
 8011e32:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011e34:	693b      	ldr	r3, [r7, #16]
 8011e36:	685a      	ldr	r2, [r3, #4]
 8011e38:	4b24      	ldr	r3, [pc, #144]	; (8011ecc <vPortFree+0xb8>)
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	4013      	ands	r3, r2
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d10a      	bne.n	8011e58 <vPortFree+0x44>
	__asm volatile
 8011e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e46:	f383 8811 	msr	BASEPRI, r3
 8011e4a:	f3bf 8f6f 	isb	sy
 8011e4e:	f3bf 8f4f 	dsb	sy
 8011e52:	60fb      	str	r3, [r7, #12]
}
 8011e54:	bf00      	nop
 8011e56:	e7fe      	b.n	8011e56 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011e58:	693b      	ldr	r3, [r7, #16]
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d00a      	beq.n	8011e76 <vPortFree+0x62>
	__asm volatile
 8011e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e64:	f383 8811 	msr	BASEPRI, r3
 8011e68:	f3bf 8f6f 	isb	sy
 8011e6c:	f3bf 8f4f 	dsb	sy
 8011e70:	60bb      	str	r3, [r7, #8]
}
 8011e72:	bf00      	nop
 8011e74:	e7fe      	b.n	8011e74 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011e76:	693b      	ldr	r3, [r7, #16]
 8011e78:	685a      	ldr	r2, [r3, #4]
 8011e7a:	4b14      	ldr	r3, [pc, #80]	; (8011ecc <vPortFree+0xb8>)
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	4013      	ands	r3, r2
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d01e      	beq.n	8011ec2 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011e84:	693b      	ldr	r3, [r7, #16]
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d11a      	bne.n	8011ec2 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011e8c:	693b      	ldr	r3, [r7, #16]
 8011e8e:	685a      	ldr	r2, [r3, #4]
 8011e90:	4b0e      	ldr	r3, [pc, #56]	; (8011ecc <vPortFree+0xb8>)
 8011e92:	681b      	ldr	r3, [r3, #0]
 8011e94:	43db      	mvns	r3, r3
 8011e96:	401a      	ands	r2, r3
 8011e98:	693b      	ldr	r3, [r7, #16]
 8011e9a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011e9c:	f7ff f90e 	bl	80110bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011ea0:	693b      	ldr	r3, [r7, #16]
 8011ea2:	685a      	ldr	r2, [r3, #4]
 8011ea4:	4b0a      	ldr	r3, [pc, #40]	; (8011ed0 <vPortFree+0xbc>)
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	4413      	add	r3, r2
 8011eaa:	4a09      	ldr	r2, [pc, #36]	; (8011ed0 <vPortFree+0xbc>)
 8011eac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011eae:	6938      	ldr	r0, [r7, #16]
 8011eb0:	f000 f874 	bl	8011f9c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011eb4:	4b07      	ldr	r3, [pc, #28]	; (8011ed4 <vPortFree+0xc0>)
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	3301      	adds	r3, #1
 8011eba:	4a06      	ldr	r2, [pc, #24]	; (8011ed4 <vPortFree+0xc0>)
 8011ebc:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8011ebe:	f7ff f90b 	bl	80110d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011ec2:	bf00      	nop
 8011ec4:	3718      	adds	r7, #24
 8011ec6:	46bd      	mov	sp, r7
 8011ec8:	bd80      	pop	{r7, pc}
 8011eca:	bf00      	nop
 8011ecc:	20004fb8 	.word	0x20004fb8
 8011ed0:	20004fa8 	.word	0x20004fa8
 8011ed4:	20004fb4 	.word	0x20004fb4

08011ed8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011ed8:	b480      	push	{r7}
 8011eda:	b085      	sub	sp, #20
 8011edc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011ede:	f244 6350 	movw	r3, #18000	; 0x4650
 8011ee2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011ee4:	4b27      	ldr	r3, [pc, #156]	; (8011f84 <prvHeapInit+0xac>)
 8011ee6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	f003 0307 	and.w	r3, r3, #7
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d00c      	beq.n	8011f0c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	3307      	adds	r3, #7
 8011ef6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	f023 0307 	bic.w	r3, r3, #7
 8011efe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011f00:	68ba      	ldr	r2, [r7, #8]
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	1ad3      	subs	r3, r2, r3
 8011f06:	4a1f      	ldr	r2, [pc, #124]	; (8011f84 <prvHeapInit+0xac>)
 8011f08:	4413      	add	r3, r2
 8011f0a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011f10:	4a1d      	ldr	r2, [pc, #116]	; (8011f88 <prvHeapInit+0xb0>)
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011f16:	4b1c      	ldr	r3, [pc, #112]	; (8011f88 <prvHeapInit+0xb0>)
 8011f18:	2200      	movs	r2, #0
 8011f1a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	68ba      	ldr	r2, [r7, #8]
 8011f20:	4413      	add	r3, r2
 8011f22:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011f24:	2208      	movs	r2, #8
 8011f26:	68fb      	ldr	r3, [r7, #12]
 8011f28:	1a9b      	subs	r3, r3, r2
 8011f2a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	f023 0307 	bic.w	r3, r3, #7
 8011f32:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	4a15      	ldr	r2, [pc, #84]	; (8011f8c <prvHeapInit+0xb4>)
 8011f38:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011f3a:	4b14      	ldr	r3, [pc, #80]	; (8011f8c <prvHeapInit+0xb4>)
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	2200      	movs	r2, #0
 8011f40:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011f42:	4b12      	ldr	r3, [pc, #72]	; (8011f8c <prvHeapInit+0xb4>)
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	2200      	movs	r2, #0
 8011f48:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011f4e:	683b      	ldr	r3, [r7, #0]
 8011f50:	68fa      	ldr	r2, [r7, #12]
 8011f52:	1ad2      	subs	r2, r2, r3
 8011f54:	683b      	ldr	r3, [r7, #0]
 8011f56:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011f58:	4b0c      	ldr	r3, [pc, #48]	; (8011f8c <prvHeapInit+0xb4>)
 8011f5a:	681a      	ldr	r2, [r3, #0]
 8011f5c:	683b      	ldr	r3, [r7, #0]
 8011f5e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011f60:	683b      	ldr	r3, [r7, #0]
 8011f62:	685b      	ldr	r3, [r3, #4]
 8011f64:	4a0a      	ldr	r2, [pc, #40]	; (8011f90 <prvHeapInit+0xb8>)
 8011f66:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011f68:	683b      	ldr	r3, [r7, #0]
 8011f6a:	685b      	ldr	r3, [r3, #4]
 8011f6c:	4a09      	ldr	r2, [pc, #36]	; (8011f94 <prvHeapInit+0xbc>)
 8011f6e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011f70:	4b09      	ldr	r3, [pc, #36]	; (8011f98 <prvHeapInit+0xc0>)
 8011f72:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011f76:	601a      	str	r2, [r3, #0]
}
 8011f78:	bf00      	nop
 8011f7a:	3714      	adds	r7, #20
 8011f7c:	46bd      	mov	sp, r7
 8011f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f82:	4770      	bx	lr
 8011f84:	2000094c 	.word	0x2000094c
 8011f88:	20004f9c 	.word	0x20004f9c
 8011f8c:	20004fa4 	.word	0x20004fa4
 8011f90:	20004fac 	.word	0x20004fac
 8011f94:	20004fa8 	.word	0x20004fa8
 8011f98:	20004fb8 	.word	0x20004fb8

08011f9c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011f9c:	b480      	push	{r7}
 8011f9e:	b085      	sub	sp, #20
 8011fa0:	af00      	add	r7, sp, #0
 8011fa2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011fa4:	4b28      	ldr	r3, [pc, #160]	; (8012048 <prvInsertBlockIntoFreeList+0xac>)
 8011fa6:	60fb      	str	r3, [r7, #12]
 8011fa8:	e002      	b.n	8011fb0 <prvInsertBlockIntoFreeList+0x14>
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	60fb      	str	r3, [r7, #12]
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	687a      	ldr	r2, [r7, #4]
 8011fb6:	429a      	cmp	r2, r3
 8011fb8:	d8f7      	bhi.n	8011faa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	685b      	ldr	r3, [r3, #4]
 8011fc2:	68ba      	ldr	r2, [r7, #8]
 8011fc4:	4413      	add	r3, r2
 8011fc6:	687a      	ldr	r2, [r7, #4]
 8011fc8:	429a      	cmp	r2, r3
 8011fca:	d108      	bne.n	8011fde <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	685a      	ldr	r2, [r3, #4]
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	685b      	ldr	r3, [r3, #4]
 8011fd4:	441a      	add	r2, r3
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011fda:	68fb      	ldr	r3, [r7, #12]
 8011fdc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	685b      	ldr	r3, [r3, #4]
 8011fe6:	68ba      	ldr	r2, [r7, #8]
 8011fe8:	441a      	add	r2, r3
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	429a      	cmp	r2, r3
 8011ff0:	d118      	bne.n	8012024 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	681a      	ldr	r2, [r3, #0]
 8011ff6:	4b15      	ldr	r3, [pc, #84]	; (801204c <prvInsertBlockIntoFreeList+0xb0>)
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	429a      	cmp	r2, r3
 8011ffc:	d00d      	beq.n	801201a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	685a      	ldr	r2, [r3, #4]
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	685b      	ldr	r3, [r3, #4]
 8012008:	441a      	add	r2, r3
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	681b      	ldr	r3, [r3, #0]
 8012012:	681a      	ldr	r2, [r3, #0]
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	601a      	str	r2, [r3, #0]
 8012018:	e008      	b.n	801202c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801201a:	4b0c      	ldr	r3, [pc, #48]	; (801204c <prvInsertBlockIntoFreeList+0xb0>)
 801201c:	681a      	ldr	r2, [r3, #0]
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	601a      	str	r2, [r3, #0]
 8012022:	e003      	b.n	801202c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	681a      	ldr	r2, [r3, #0]
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801202c:	68fa      	ldr	r2, [r7, #12]
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	429a      	cmp	r2, r3
 8012032:	d002      	beq.n	801203a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	687a      	ldr	r2, [r7, #4]
 8012038:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801203a:	bf00      	nop
 801203c:	3714      	adds	r7, #20
 801203e:	46bd      	mov	sp, r7
 8012040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012044:	4770      	bx	lr
 8012046:	bf00      	nop
 8012048:	20004f9c 	.word	0x20004f9c
 801204c:	20004fa4 	.word	0x20004fa4

08012050 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012050:	b580      	push	{r7, lr}
 8012052:	b082      	sub	sp, #8
 8012054:	af00      	add	r7, sp, #0
 8012056:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8012064:	4619      	mov	r1, r3
 8012066:	4610      	mov	r0, r2
 8012068:	f7fa f88c 	bl	800c184 <USBD_LL_SetupStage>
}
 801206c:	bf00      	nop
 801206e:	3708      	adds	r7, #8
 8012070:	46bd      	mov	sp, r7
 8012072:	bd80      	pop	{r7, pc}

08012074 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012074:	b580      	push	{r7, lr}
 8012076:	b082      	sub	sp, #8
 8012078:	af00      	add	r7, sp, #0
 801207a:	6078      	str	r0, [r7, #4]
 801207c:	460b      	mov	r3, r1
 801207e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8012086:	78fa      	ldrb	r2, [r7, #3]
 8012088:	6879      	ldr	r1, [r7, #4]
 801208a:	4613      	mov	r3, r2
 801208c:	00db      	lsls	r3, r3, #3
 801208e:	1a9b      	subs	r3, r3, r2
 8012090:	009b      	lsls	r3, r3, #2
 8012092:	440b      	add	r3, r1
 8012094:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8012098:	681a      	ldr	r2, [r3, #0]
 801209a:	78fb      	ldrb	r3, [r7, #3]
 801209c:	4619      	mov	r1, r3
 801209e:	f7fa f8c6 	bl	800c22e <USBD_LL_DataOutStage>
}
 80120a2:	bf00      	nop
 80120a4:	3708      	adds	r7, #8
 80120a6:	46bd      	mov	sp, r7
 80120a8:	bd80      	pop	{r7, pc}

080120aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80120aa:	b580      	push	{r7, lr}
 80120ac:	b082      	sub	sp, #8
 80120ae:	af00      	add	r7, sp, #0
 80120b0:	6078      	str	r0, [r7, #4]
 80120b2:	460b      	mov	r3, r1
 80120b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80120bc:	78fa      	ldrb	r2, [r7, #3]
 80120be:	6879      	ldr	r1, [r7, #4]
 80120c0:	4613      	mov	r3, r2
 80120c2:	00db      	lsls	r3, r3, #3
 80120c4:	1a9b      	subs	r3, r3, r2
 80120c6:	009b      	lsls	r3, r3, #2
 80120c8:	440b      	add	r3, r1
 80120ca:	3348      	adds	r3, #72	; 0x48
 80120cc:	681a      	ldr	r2, [r3, #0]
 80120ce:	78fb      	ldrb	r3, [r7, #3]
 80120d0:	4619      	mov	r1, r3
 80120d2:	f7fa f90f 	bl	800c2f4 <USBD_LL_DataInStage>
}
 80120d6:	bf00      	nop
 80120d8:	3708      	adds	r7, #8
 80120da:	46bd      	mov	sp, r7
 80120dc:	bd80      	pop	{r7, pc}

080120de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80120de:	b580      	push	{r7, lr}
 80120e0:	b082      	sub	sp, #8
 80120e2:	af00      	add	r7, sp, #0
 80120e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80120ec:	4618      	mov	r0, r3
 80120ee:	f7fa fa23 	bl	800c538 <USBD_LL_SOF>
}
 80120f2:	bf00      	nop
 80120f4:	3708      	adds	r7, #8
 80120f6:	46bd      	mov	sp, r7
 80120f8:	bd80      	pop	{r7, pc}

080120fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80120fa:	b580      	push	{r7, lr}
 80120fc:	b084      	sub	sp, #16
 80120fe:	af00      	add	r7, sp, #0
 8012100:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012102:	2301      	movs	r3, #1
 8012104:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	68db      	ldr	r3, [r3, #12]
 801210a:	2b00      	cmp	r3, #0
 801210c:	d102      	bne.n	8012114 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801210e:	2300      	movs	r3, #0
 8012110:	73fb      	strb	r3, [r7, #15]
 8012112:	e008      	b.n	8012126 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	68db      	ldr	r3, [r3, #12]
 8012118:	2b02      	cmp	r3, #2
 801211a:	d102      	bne.n	8012122 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801211c:	2301      	movs	r3, #1
 801211e:	73fb      	strb	r3, [r7, #15]
 8012120:	e001      	b.n	8012126 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8012122:	f7ef fd3d 	bl	8001ba0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801212c:	7bfa      	ldrb	r2, [r7, #15]
 801212e:	4611      	mov	r1, r2
 8012130:	4618      	mov	r0, r3
 8012132:	f7fa f9c3 	bl	800c4bc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801213c:	4618      	mov	r0, r3
 801213e:	f7fa f96f 	bl	800c420 <USBD_LL_Reset>
}
 8012142:	bf00      	nop
 8012144:	3710      	adds	r7, #16
 8012146:	46bd      	mov	sp, r7
 8012148:	bd80      	pop	{r7, pc}
	...

0801214c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801214c:	b580      	push	{r7, lr}
 801214e:	b082      	sub	sp, #8
 8012150:	af00      	add	r7, sp, #0
 8012152:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801215a:	4618      	mov	r0, r3
 801215c:	f7fa f9be 	bl	800c4dc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012168:	681b      	ldr	r3, [r3, #0]
 801216a:	687a      	ldr	r2, [r7, #4]
 801216c:	6812      	ldr	r2, [r2, #0]
 801216e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012172:	f043 0301 	orr.w	r3, r3, #1
 8012176:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	6a1b      	ldr	r3, [r3, #32]
 801217c:	2b00      	cmp	r3, #0
 801217e:	d005      	beq.n	801218c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012180:	4b04      	ldr	r3, [pc, #16]	; (8012194 <HAL_PCD_SuspendCallback+0x48>)
 8012182:	691b      	ldr	r3, [r3, #16]
 8012184:	4a03      	ldr	r2, [pc, #12]	; (8012194 <HAL_PCD_SuspendCallback+0x48>)
 8012186:	f043 0306 	orr.w	r3, r3, #6
 801218a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801218c:	bf00      	nop
 801218e:	3708      	adds	r7, #8
 8012190:	46bd      	mov	sp, r7
 8012192:	bd80      	pop	{r7, pc}
 8012194:	e000ed00 	.word	0xe000ed00

08012198 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012198:	b580      	push	{r7, lr}
 801219a:	b082      	sub	sp, #8
 801219c:	af00      	add	r7, sp, #0
 801219e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80121a6:	4618      	mov	r0, r3
 80121a8:	f7fa f9ae 	bl	800c508 <USBD_LL_Resume>
}
 80121ac:	bf00      	nop
 80121ae:	3708      	adds	r7, #8
 80121b0:	46bd      	mov	sp, r7
 80121b2:	bd80      	pop	{r7, pc}

080121b4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80121b4:	b580      	push	{r7, lr}
 80121b6:	b082      	sub	sp, #8
 80121b8:	af00      	add	r7, sp, #0
 80121ba:	6078      	str	r0, [r7, #4]
 80121bc:	460b      	mov	r3, r1
 80121be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80121c6:	78fa      	ldrb	r2, [r7, #3]
 80121c8:	4611      	mov	r1, r2
 80121ca:	4618      	mov	r0, r3
 80121cc:	f7fa f9fc 	bl	800c5c8 <USBD_LL_IsoOUTIncomplete>
}
 80121d0:	bf00      	nop
 80121d2:	3708      	adds	r7, #8
 80121d4:	46bd      	mov	sp, r7
 80121d6:	bd80      	pop	{r7, pc}

080121d8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80121d8:	b580      	push	{r7, lr}
 80121da:	b082      	sub	sp, #8
 80121dc:	af00      	add	r7, sp, #0
 80121de:	6078      	str	r0, [r7, #4]
 80121e0:	460b      	mov	r3, r1
 80121e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80121ea:	78fa      	ldrb	r2, [r7, #3]
 80121ec:	4611      	mov	r1, r2
 80121ee:	4618      	mov	r0, r3
 80121f0:	f7fa f9c4 	bl	800c57c <USBD_LL_IsoINIncomplete>
}
 80121f4:	bf00      	nop
 80121f6:	3708      	adds	r7, #8
 80121f8:	46bd      	mov	sp, r7
 80121fa:	bd80      	pop	{r7, pc}

080121fc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80121fc:	b580      	push	{r7, lr}
 80121fe:	b082      	sub	sp, #8
 8012200:	af00      	add	r7, sp, #0
 8012202:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801220a:	4618      	mov	r0, r3
 801220c:	f7fa fa02 	bl	800c614 <USBD_LL_DevConnected>
}
 8012210:	bf00      	nop
 8012212:	3708      	adds	r7, #8
 8012214:	46bd      	mov	sp, r7
 8012216:	bd80      	pop	{r7, pc}

08012218 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012218:	b580      	push	{r7, lr}
 801221a:	b082      	sub	sp, #8
 801221c:	af00      	add	r7, sp, #0
 801221e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012226:	4618      	mov	r0, r3
 8012228:	f7fa f9ff 	bl	800c62a <USBD_LL_DevDisconnected>
}
 801222c:	bf00      	nop
 801222e:	3708      	adds	r7, #8
 8012230:	46bd      	mov	sp, r7
 8012232:	bd80      	pop	{r7, pc}

08012234 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012234:	b580      	push	{r7, lr}
 8012236:	b084      	sub	sp, #16
 8012238:	af00      	add	r7, sp, #0
 801223a:	6078      	str	r0, [r7, #4]
 801223c:	4608      	mov	r0, r1
 801223e:	4611      	mov	r1, r2
 8012240:	461a      	mov	r2, r3
 8012242:	4603      	mov	r3, r0
 8012244:	70fb      	strb	r3, [r7, #3]
 8012246:	460b      	mov	r3, r1
 8012248:	70bb      	strb	r3, [r7, #2]
 801224a:	4613      	mov	r3, r2
 801224c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801224e:	2300      	movs	r3, #0
 8012250:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012252:	2300      	movs	r3, #0
 8012254:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801225c:	78bb      	ldrb	r3, [r7, #2]
 801225e:	883a      	ldrh	r2, [r7, #0]
 8012260:	78f9      	ldrb	r1, [r7, #3]
 8012262:	f7f4 ffc2 	bl	80071ea <HAL_PCD_EP_Open>
 8012266:	4603      	mov	r3, r0
 8012268:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801226a:	7bfb      	ldrb	r3, [r7, #15]
 801226c:	4618      	mov	r0, r3
 801226e:	f000 f8d3 	bl	8012418 <USBD_Get_USB_Status>
 8012272:	4603      	mov	r3, r0
 8012274:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012276:	7bbb      	ldrb	r3, [r7, #14]
}
 8012278:	4618      	mov	r0, r3
 801227a:	3710      	adds	r7, #16
 801227c:	46bd      	mov	sp, r7
 801227e:	bd80      	pop	{r7, pc}

08012280 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012280:	b580      	push	{r7, lr}
 8012282:	b084      	sub	sp, #16
 8012284:	af00      	add	r7, sp, #0
 8012286:	6078      	str	r0, [r7, #4]
 8012288:	460b      	mov	r3, r1
 801228a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801228c:	2300      	movs	r3, #0
 801228e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012290:	2300      	movs	r3, #0
 8012292:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801229a:	78fa      	ldrb	r2, [r7, #3]
 801229c:	4611      	mov	r1, r2
 801229e:	4618      	mov	r0, r3
 80122a0:	f7f5 f8a0 	bl	80073e4 <HAL_PCD_EP_SetStall>
 80122a4:	4603      	mov	r3, r0
 80122a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80122a8:	7bfb      	ldrb	r3, [r7, #15]
 80122aa:	4618      	mov	r0, r3
 80122ac:	f000 f8b4 	bl	8012418 <USBD_Get_USB_Status>
 80122b0:	4603      	mov	r3, r0
 80122b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80122b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80122b6:	4618      	mov	r0, r3
 80122b8:	3710      	adds	r7, #16
 80122ba:	46bd      	mov	sp, r7
 80122bc:	bd80      	pop	{r7, pc}

080122be <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80122be:	b580      	push	{r7, lr}
 80122c0:	b084      	sub	sp, #16
 80122c2:	af00      	add	r7, sp, #0
 80122c4:	6078      	str	r0, [r7, #4]
 80122c6:	460b      	mov	r3, r1
 80122c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80122ca:	2300      	movs	r3, #0
 80122cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80122ce:	2300      	movs	r3, #0
 80122d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80122d8:	78fa      	ldrb	r2, [r7, #3]
 80122da:	4611      	mov	r1, r2
 80122dc:	4618      	mov	r0, r3
 80122de:	f7f5 f8e5 	bl	80074ac <HAL_PCD_EP_ClrStall>
 80122e2:	4603      	mov	r3, r0
 80122e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80122e6:	7bfb      	ldrb	r3, [r7, #15]
 80122e8:	4618      	mov	r0, r3
 80122ea:	f000 f895 	bl	8012418 <USBD_Get_USB_Status>
 80122ee:	4603      	mov	r3, r0
 80122f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80122f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80122f4:	4618      	mov	r0, r3
 80122f6:	3710      	adds	r7, #16
 80122f8:	46bd      	mov	sp, r7
 80122fa:	bd80      	pop	{r7, pc}

080122fc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80122fc:	b480      	push	{r7}
 80122fe:	b085      	sub	sp, #20
 8012300:	af00      	add	r7, sp, #0
 8012302:	6078      	str	r0, [r7, #4]
 8012304:	460b      	mov	r3, r1
 8012306:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801230e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012310:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012314:	2b00      	cmp	r3, #0
 8012316:	da0b      	bge.n	8012330 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012318:	78fb      	ldrb	r3, [r7, #3]
 801231a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801231e:	68f9      	ldr	r1, [r7, #12]
 8012320:	4613      	mov	r3, r2
 8012322:	00db      	lsls	r3, r3, #3
 8012324:	1a9b      	subs	r3, r3, r2
 8012326:	009b      	lsls	r3, r3, #2
 8012328:	440b      	add	r3, r1
 801232a:	333e      	adds	r3, #62	; 0x3e
 801232c:	781b      	ldrb	r3, [r3, #0]
 801232e:	e00b      	b.n	8012348 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012330:	78fb      	ldrb	r3, [r7, #3]
 8012332:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012336:	68f9      	ldr	r1, [r7, #12]
 8012338:	4613      	mov	r3, r2
 801233a:	00db      	lsls	r3, r3, #3
 801233c:	1a9b      	subs	r3, r3, r2
 801233e:	009b      	lsls	r3, r3, #2
 8012340:	440b      	add	r3, r1
 8012342:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012346:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012348:	4618      	mov	r0, r3
 801234a:	3714      	adds	r7, #20
 801234c:	46bd      	mov	sp, r7
 801234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012352:	4770      	bx	lr

08012354 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012354:	b580      	push	{r7, lr}
 8012356:	b084      	sub	sp, #16
 8012358:	af00      	add	r7, sp, #0
 801235a:	6078      	str	r0, [r7, #4]
 801235c:	460b      	mov	r3, r1
 801235e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012360:	2300      	movs	r3, #0
 8012362:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012364:	2300      	movs	r3, #0
 8012366:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801236e:	78fa      	ldrb	r2, [r7, #3]
 8012370:	4611      	mov	r1, r2
 8012372:	4618      	mov	r0, r3
 8012374:	f7f4 ff14 	bl	80071a0 <HAL_PCD_SetAddress>
 8012378:	4603      	mov	r3, r0
 801237a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801237c:	7bfb      	ldrb	r3, [r7, #15]
 801237e:	4618      	mov	r0, r3
 8012380:	f000 f84a 	bl	8012418 <USBD_Get_USB_Status>
 8012384:	4603      	mov	r3, r0
 8012386:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012388:	7bbb      	ldrb	r3, [r7, #14]
}
 801238a:	4618      	mov	r0, r3
 801238c:	3710      	adds	r7, #16
 801238e:	46bd      	mov	sp, r7
 8012390:	bd80      	pop	{r7, pc}

08012392 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012392:	b580      	push	{r7, lr}
 8012394:	b086      	sub	sp, #24
 8012396:	af00      	add	r7, sp, #0
 8012398:	60f8      	str	r0, [r7, #12]
 801239a:	607a      	str	r2, [r7, #4]
 801239c:	603b      	str	r3, [r7, #0]
 801239e:	460b      	mov	r3, r1
 80123a0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80123a2:	2300      	movs	r3, #0
 80123a4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80123a6:	2300      	movs	r3, #0
 80123a8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80123aa:	68fb      	ldr	r3, [r7, #12]
 80123ac:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80123b0:	7af9      	ldrb	r1, [r7, #11]
 80123b2:	683b      	ldr	r3, [r7, #0]
 80123b4:	687a      	ldr	r2, [r7, #4]
 80123b6:	f7f4 ffcb 	bl	8007350 <HAL_PCD_EP_Transmit>
 80123ba:	4603      	mov	r3, r0
 80123bc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80123be:	7dfb      	ldrb	r3, [r7, #23]
 80123c0:	4618      	mov	r0, r3
 80123c2:	f000 f829 	bl	8012418 <USBD_Get_USB_Status>
 80123c6:	4603      	mov	r3, r0
 80123c8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80123ca:	7dbb      	ldrb	r3, [r7, #22]
}
 80123cc:	4618      	mov	r0, r3
 80123ce:	3718      	adds	r7, #24
 80123d0:	46bd      	mov	sp, r7
 80123d2:	bd80      	pop	{r7, pc}

080123d4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80123d4:	b580      	push	{r7, lr}
 80123d6:	b086      	sub	sp, #24
 80123d8:	af00      	add	r7, sp, #0
 80123da:	60f8      	str	r0, [r7, #12]
 80123dc:	607a      	str	r2, [r7, #4]
 80123de:	603b      	str	r3, [r7, #0]
 80123e0:	460b      	mov	r3, r1
 80123e2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80123e4:	2300      	movs	r3, #0
 80123e6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80123e8:	2300      	movs	r3, #0
 80123ea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80123f2:	7af9      	ldrb	r1, [r7, #11]
 80123f4:	683b      	ldr	r3, [r7, #0]
 80123f6:	687a      	ldr	r2, [r7, #4]
 80123f8:	f7f4 ff5f 	bl	80072ba <HAL_PCD_EP_Receive>
 80123fc:	4603      	mov	r3, r0
 80123fe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012400:	7dfb      	ldrb	r3, [r7, #23]
 8012402:	4618      	mov	r0, r3
 8012404:	f000 f808 	bl	8012418 <USBD_Get_USB_Status>
 8012408:	4603      	mov	r3, r0
 801240a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801240c:	7dbb      	ldrb	r3, [r7, #22]
}
 801240e:	4618      	mov	r0, r3
 8012410:	3718      	adds	r7, #24
 8012412:	46bd      	mov	sp, r7
 8012414:	bd80      	pop	{r7, pc}
	...

08012418 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012418:	b480      	push	{r7}
 801241a:	b085      	sub	sp, #20
 801241c:	af00      	add	r7, sp, #0
 801241e:	4603      	mov	r3, r0
 8012420:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012422:	2300      	movs	r3, #0
 8012424:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012426:	79fb      	ldrb	r3, [r7, #7]
 8012428:	2b03      	cmp	r3, #3
 801242a:	d817      	bhi.n	801245c <USBD_Get_USB_Status+0x44>
 801242c:	a201      	add	r2, pc, #4	; (adr r2, 8012434 <USBD_Get_USB_Status+0x1c>)
 801242e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012432:	bf00      	nop
 8012434:	08012445 	.word	0x08012445
 8012438:	0801244b 	.word	0x0801244b
 801243c:	08012451 	.word	0x08012451
 8012440:	08012457 	.word	0x08012457
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012444:	2300      	movs	r3, #0
 8012446:	73fb      	strb	r3, [r7, #15]
    break;
 8012448:	e00b      	b.n	8012462 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801244a:	2303      	movs	r3, #3
 801244c:	73fb      	strb	r3, [r7, #15]
    break;
 801244e:	e008      	b.n	8012462 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012450:	2301      	movs	r3, #1
 8012452:	73fb      	strb	r3, [r7, #15]
    break;
 8012454:	e005      	b.n	8012462 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012456:	2303      	movs	r3, #3
 8012458:	73fb      	strb	r3, [r7, #15]
    break;
 801245a:	e002      	b.n	8012462 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801245c:	2303      	movs	r3, #3
 801245e:	73fb      	strb	r3, [r7, #15]
    break;
 8012460:	bf00      	nop
  }
  return usb_status;
 8012462:	7bfb      	ldrb	r3, [r7, #15]
}
 8012464:	4618      	mov	r0, r3
 8012466:	3714      	adds	r7, #20
 8012468:	46bd      	mov	sp, r7
 801246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801246e:	4770      	bx	lr

08012470 <nan>:
 8012470:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012478 <nan+0x8>
 8012474:	4770      	bx	lr
 8012476:	bf00      	nop
 8012478:	00000000 	.word	0x00000000
 801247c:	7ff80000 	.word	0x7ff80000

08012480 <__errno>:
 8012480:	4b01      	ldr	r3, [pc, #4]	; (8012488 <__errno+0x8>)
 8012482:	6818      	ldr	r0, [r3, #0]
 8012484:	4770      	bx	lr
 8012486:	bf00      	nop
 8012488:	20000080 	.word	0x20000080

0801248c <std>:
 801248c:	2300      	movs	r3, #0
 801248e:	b510      	push	{r4, lr}
 8012490:	4604      	mov	r4, r0
 8012492:	e9c0 3300 	strd	r3, r3, [r0]
 8012496:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801249a:	6083      	str	r3, [r0, #8]
 801249c:	8181      	strh	r1, [r0, #12]
 801249e:	6643      	str	r3, [r0, #100]	; 0x64
 80124a0:	81c2      	strh	r2, [r0, #14]
 80124a2:	6183      	str	r3, [r0, #24]
 80124a4:	4619      	mov	r1, r3
 80124a6:	2208      	movs	r2, #8
 80124a8:	305c      	adds	r0, #92	; 0x5c
 80124aa:	f000 f91a 	bl	80126e2 <memset>
 80124ae:	4b05      	ldr	r3, [pc, #20]	; (80124c4 <std+0x38>)
 80124b0:	6263      	str	r3, [r4, #36]	; 0x24
 80124b2:	4b05      	ldr	r3, [pc, #20]	; (80124c8 <std+0x3c>)
 80124b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80124b6:	4b05      	ldr	r3, [pc, #20]	; (80124cc <std+0x40>)
 80124b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80124ba:	4b05      	ldr	r3, [pc, #20]	; (80124d0 <std+0x44>)
 80124bc:	6224      	str	r4, [r4, #32]
 80124be:	6323      	str	r3, [r4, #48]	; 0x30
 80124c0:	bd10      	pop	{r4, pc}
 80124c2:	bf00      	nop
 80124c4:	08013625 	.word	0x08013625
 80124c8:	08013647 	.word	0x08013647
 80124cc:	0801367f 	.word	0x0801367f
 80124d0:	080136a3 	.word	0x080136a3

080124d4 <_cleanup_r>:
 80124d4:	4901      	ldr	r1, [pc, #4]	; (80124dc <_cleanup_r+0x8>)
 80124d6:	f000 b8af 	b.w	8012638 <_fwalk_reent>
 80124da:	bf00      	nop
 80124dc:	0801548d 	.word	0x0801548d

080124e0 <__sfmoreglue>:
 80124e0:	b570      	push	{r4, r5, r6, lr}
 80124e2:	1e4a      	subs	r2, r1, #1
 80124e4:	2568      	movs	r5, #104	; 0x68
 80124e6:	4355      	muls	r5, r2
 80124e8:	460e      	mov	r6, r1
 80124ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80124ee:	f000 f901 	bl	80126f4 <_malloc_r>
 80124f2:	4604      	mov	r4, r0
 80124f4:	b140      	cbz	r0, 8012508 <__sfmoreglue+0x28>
 80124f6:	2100      	movs	r1, #0
 80124f8:	e9c0 1600 	strd	r1, r6, [r0]
 80124fc:	300c      	adds	r0, #12
 80124fe:	60a0      	str	r0, [r4, #8]
 8012500:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012504:	f000 f8ed 	bl	80126e2 <memset>
 8012508:	4620      	mov	r0, r4
 801250a:	bd70      	pop	{r4, r5, r6, pc}

0801250c <__sfp_lock_acquire>:
 801250c:	4801      	ldr	r0, [pc, #4]	; (8012514 <__sfp_lock_acquire+0x8>)
 801250e:	f000 b8d8 	b.w	80126c2 <__retarget_lock_acquire_recursive>
 8012512:	bf00      	nop
 8012514:	20006880 	.word	0x20006880

08012518 <__sfp_lock_release>:
 8012518:	4801      	ldr	r0, [pc, #4]	; (8012520 <__sfp_lock_release+0x8>)
 801251a:	f000 b8d3 	b.w	80126c4 <__retarget_lock_release_recursive>
 801251e:	bf00      	nop
 8012520:	20006880 	.word	0x20006880

08012524 <__sinit_lock_acquire>:
 8012524:	4801      	ldr	r0, [pc, #4]	; (801252c <__sinit_lock_acquire+0x8>)
 8012526:	f000 b8cc 	b.w	80126c2 <__retarget_lock_acquire_recursive>
 801252a:	bf00      	nop
 801252c:	2000687b 	.word	0x2000687b

08012530 <__sinit_lock_release>:
 8012530:	4801      	ldr	r0, [pc, #4]	; (8012538 <__sinit_lock_release+0x8>)
 8012532:	f000 b8c7 	b.w	80126c4 <__retarget_lock_release_recursive>
 8012536:	bf00      	nop
 8012538:	2000687b 	.word	0x2000687b

0801253c <__sinit>:
 801253c:	b510      	push	{r4, lr}
 801253e:	4604      	mov	r4, r0
 8012540:	f7ff fff0 	bl	8012524 <__sinit_lock_acquire>
 8012544:	69a3      	ldr	r3, [r4, #24]
 8012546:	b11b      	cbz	r3, 8012550 <__sinit+0x14>
 8012548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801254c:	f7ff bff0 	b.w	8012530 <__sinit_lock_release>
 8012550:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012554:	6523      	str	r3, [r4, #80]	; 0x50
 8012556:	4b13      	ldr	r3, [pc, #76]	; (80125a4 <__sinit+0x68>)
 8012558:	4a13      	ldr	r2, [pc, #76]	; (80125a8 <__sinit+0x6c>)
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	62a2      	str	r2, [r4, #40]	; 0x28
 801255e:	42a3      	cmp	r3, r4
 8012560:	bf04      	itt	eq
 8012562:	2301      	moveq	r3, #1
 8012564:	61a3      	streq	r3, [r4, #24]
 8012566:	4620      	mov	r0, r4
 8012568:	f000 f820 	bl	80125ac <__sfp>
 801256c:	6060      	str	r0, [r4, #4]
 801256e:	4620      	mov	r0, r4
 8012570:	f000 f81c 	bl	80125ac <__sfp>
 8012574:	60a0      	str	r0, [r4, #8]
 8012576:	4620      	mov	r0, r4
 8012578:	f000 f818 	bl	80125ac <__sfp>
 801257c:	2200      	movs	r2, #0
 801257e:	60e0      	str	r0, [r4, #12]
 8012580:	2104      	movs	r1, #4
 8012582:	6860      	ldr	r0, [r4, #4]
 8012584:	f7ff ff82 	bl	801248c <std>
 8012588:	68a0      	ldr	r0, [r4, #8]
 801258a:	2201      	movs	r2, #1
 801258c:	2109      	movs	r1, #9
 801258e:	f7ff ff7d 	bl	801248c <std>
 8012592:	68e0      	ldr	r0, [r4, #12]
 8012594:	2202      	movs	r2, #2
 8012596:	2112      	movs	r1, #18
 8012598:	f7ff ff78 	bl	801248c <std>
 801259c:	2301      	movs	r3, #1
 801259e:	61a3      	str	r3, [r4, #24]
 80125a0:	e7d2      	b.n	8012548 <__sinit+0xc>
 80125a2:	bf00      	nop
 80125a4:	08017e8c 	.word	0x08017e8c
 80125a8:	080124d5 	.word	0x080124d5

080125ac <__sfp>:
 80125ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125ae:	4607      	mov	r7, r0
 80125b0:	f7ff ffac 	bl	801250c <__sfp_lock_acquire>
 80125b4:	4b1e      	ldr	r3, [pc, #120]	; (8012630 <__sfp+0x84>)
 80125b6:	681e      	ldr	r6, [r3, #0]
 80125b8:	69b3      	ldr	r3, [r6, #24]
 80125ba:	b913      	cbnz	r3, 80125c2 <__sfp+0x16>
 80125bc:	4630      	mov	r0, r6
 80125be:	f7ff ffbd 	bl	801253c <__sinit>
 80125c2:	3648      	adds	r6, #72	; 0x48
 80125c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80125c8:	3b01      	subs	r3, #1
 80125ca:	d503      	bpl.n	80125d4 <__sfp+0x28>
 80125cc:	6833      	ldr	r3, [r6, #0]
 80125ce:	b30b      	cbz	r3, 8012614 <__sfp+0x68>
 80125d0:	6836      	ldr	r6, [r6, #0]
 80125d2:	e7f7      	b.n	80125c4 <__sfp+0x18>
 80125d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80125d8:	b9d5      	cbnz	r5, 8012610 <__sfp+0x64>
 80125da:	4b16      	ldr	r3, [pc, #88]	; (8012634 <__sfp+0x88>)
 80125dc:	60e3      	str	r3, [r4, #12]
 80125de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80125e2:	6665      	str	r5, [r4, #100]	; 0x64
 80125e4:	f000 f86c 	bl	80126c0 <__retarget_lock_init_recursive>
 80125e8:	f7ff ff96 	bl	8012518 <__sfp_lock_release>
 80125ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80125f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80125f4:	6025      	str	r5, [r4, #0]
 80125f6:	61a5      	str	r5, [r4, #24]
 80125f8:	2208      	movs	r2, #8
 80125fa:	4629      	mov	r1, r5
 80125fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012600:	f000 f86f 	bl	80126e2 <memset>
 8012604:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012608:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801260c:	4620      	mov	r0, r4
 801260e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012610:	3468      	adds	r4, #104	; 0x68
 8012612:	e7d9      	b.n	80125c8 <__sfp+0x1c>
 8012614:	2104      	movs	r1, #4
 8012616:	4638      	mov	r0, r7
 8012618:	f7ff ff62 	bl	80124e0 <__sfmoreglue>
 801261c:	4604      	mov	r4, r0
 801261e:	6030      	str	r0, [r6, #0]
 8012620:	2800      	cmp	r0, #0
 8012622:	d1d5      	bne.n	80125d0 <__sfp+0x24>
 8012624:	f7ff ff78 	bl	8012518 <__sfp_lock_release>
 8012628:	230c      	movs	r3, #12
 801262a:	603b      	str	r3, [r7, #0]
 801262c:	e7ee      	b.n	801260c <__sfp+0x60>
 801262e:	bf00      	nop
 8012630:	08017e8c 	.word	0x08017e8c
 8012634:	ffff0001 	.word	0xffff0001

08012638 <_fwalk_reent>:
 8012638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801263c:	4606      	mov	r6, r0
 801263e:	4688      	mov	r8, r1
 8012640:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012644:	2700      	movs	r7, #0
 8012646:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801264a:	f1b9 0901 	subs.w	r9, r9, #1
 801264e:	d505      	bpl.n	801265c <_fwalk_reent+0x24>
 8012650:	6824      	ldr	r4, [r4, #0]
 8012652:	2c00      	cmp	r4, #0
 8012654:	d1f7      	bne.n	8012646 <_fwalk_reent+0xe>
 8012656:	4638      	mov	r0, r7
 8012658:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801265c:	89ab      	ldrh	r3, [r5, #12]
 801265e:	2b01      	cmp	r3, #1
 8012660:	d907      	bls.n	8012672 <_fwalk_reent+0x3a>
 8012662:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012666:	3301      	adds	r3, #1
 8012668:	d003      	beq.n	8012672 <_fwalk_reent+0x3a>
 801266a:	4629      	mov	r1, r5
 801266c:	4630      	mov	r0, r6
 801266e:	47c0      	blx	r8
 8012670:	4307      	orrs	r7, r0
 8012672:	3568      	adds	r5, #104	; 0x68
 8012674:	e7e9      	b.n	801264a <_fwalk_reent+0x12>
	...

08012678 <__libc_init_array>:
 8012678:	b570      	push	{r4, r5, r6, lr}
 801267a:	4d0d      	ldr	r5, [pc, #52]	; (80126b0 <__libc_init_array+0x38>)
 801267c:	4c0d      	ldr	r4, [pc, #52]	; (80126b4 <__libc_init_array+0x3c>)
 801267e:	1b64      	subs	r4, r4, r5
 8012680:	10a4      	asrs	r4, r4, #2
 8012682:	2600      	movs	r6, #0
 8012684:	42a6      	cmp	r6, r4
 8012686:	d109      	bne.n	801269c <__libc_init_array+0x24>
 8012688:	4d0b      	ldr	r5, [pc, #44]	; (80126b8 <__libc_init_array+0x40>)
 801268a:	4c0c      	ldr	r4, [pc, #48]	; (80126bc <__libc_init_array+0x44>)
 801268c:	f004 fc70 	bl	8016f70 <_init>
 8012690:	1b64      	subs	r4, r4, r5
 8012692:	10a4      	asrs	r4, r4, #2
 8012694:	2600      	movs	r6, #0
 8012696:	42a6      	cmp	r6, r4
 8012698:	d105      	bne.n	80126a6 <__libc_init_array+0x2e>
 801269a:	bd70      	pop	{r4, r5, r6, pc}
 801269c:	f855 3b04 	ldr.w	r3, [r5], #4
 80126a0:	4798      	blx	r3
 80126a2:	3601      	adds	r6, #1
 80126a4:	e7ee      	b.n	8012684 <__libc_init_array+0xc>
 80126a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80126aa:	4798      	blx	r3
 80126ac:	3601      	adds	r6, #1
 80126ae:	e7f2      	b.n	8012696 <__libc_init_array+0x1e>
 80126b0:	080181ec 	.word	0x080181ec
 80126b4:	080181ec 	.word	0x080181ec
 80126b8:	080181ec 	.word	0x080181ec
 80126bc:	080181f4 	.word	0x080181f4

080126c0 <__retarget_lock_init_recursive>:
 80126c0:	4770      	bx	lr

080126c2 <__retarget_lock_acquire_recursive>:
 80126c2:	4770      	bx	lr

080126c4 <__retarget_lock_release_recursive>:
 80126c4:	4770      	bx	lr

080126c6 <memcpy>:
 80126c6:	440a      	add	r2, r1
 80126c8:	4291      	cmp	r1, r2
 80126ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80126ce:	d100      	bne.n	80126d2 <memcpy+0xc>
 80126d0:	4770      	bx	lr
 80126d2:	b510      	push	{r4, lr}
 80126d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80126d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80126dc:	4291      	cmp	r1, r2
 80126de:	d1f9      	bne.n	80126d4 <memcpy+0xe>
 80126e0:	bd10      	pop	{r4, pc}

080126e2 <memset>:
 80126e2:	4402      	add	r2, r0
 80126e4:	4603      	mov	r3, r0
 80126e6:	4293      	cmp	r3, r2
 80126e8:	d100      	bne.n	80126ec <memset+0xa>
 80126ea:	4770      	bx	lr
 80126ec:	f803 1b01 	strb.w	r1, [r3], #1
 80126f0:	e7f9      	b.n	80126e6 <memset+0x4>
	...

080126f4 <_malloc_r>:
 80126f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126f6:	1ccd      	adds	r5, r1, #3
 80126f8:	f025 0503 	bic.w	r5, r5, #3
 80126fc:	3508      	adds	r5, #8
 80126fe:	2d0c      	cmp	r5, #12
 8012700:	bf38      	it	cc
 8012702:	250c      	movcc	r5, #12
 8012704:	2d00      	cmp	r5, #0
 8012706:	4606      	mov	r6, r0
 8012708:	db01      	blt.n	801270e <_malloc_r+0x1a>
 801270a:	42a9      	cmp	r1, r5
 801270c:	d903      	bls.n	8012716 <_malloc_r+0x22>
 801270e:	230c      	movs	r3, #12
 8012710:	6033      	str	r3, [r6, #0]
 8012712:	2000      	movs	r0, #0
 8012714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012716:	f003 faf9 	bl	8015d0c <__malloc_lock>
 801271a:	4921      	ldr	r1, [pc, #132]	; (80127a0 <_malloc_r+0xac>)
 801271c:	680a      	ldr	r2, [r1, #0]
 801271e:	4614      	mov	r4, r2
 8012720:	b99c      	cbnz	r4, 801274a <_malloc_r+0x56>
 8012722:	4f20      	ldr	r7, [pc, #128]	; (80127a4 <_malloc_r+0xb0>)
 8012724:	683b      	ldr	r3, [r7, #0]
 8012726:	b923      	cbnz	r3, 8012732 <_malloc_r+0x3e>
 8012728:	4621      	mov	r1, r4
 801272a:	4630      	mov	r0, r6
 801272c:	f000 ff44 	bl	80135b8 <_sbrk_r>
 8012730:	6038      	str	r0, [r7, #0]
 8012732:	4629      	mov	r1, r5
 8012734:	4630      	mov	r0, r6
 8012736:	f000 ff3f 	bl	80135b8 <_sbrk_r>
 801273a:	1c43      	adds	r3, r0, #1
 801273c:	d123      	bne.n	8012786 <_malloc_r+0x92>
 801273e:	230c      	movs	r3, #12
 8012740:	6033      	str	r3, [r6, #0]
 8012742:	4630      	mov	r0, r6
 8012744:	f003 fae8 	bl	8015d18 <__malloc_unlock>
 8012748:	e7e3      	b.n	8012712 <_malloc_r+0x1e>
 801274a:	6823      	ldr	r3, [r4, #0]
 801274c:	1b5b      	subs	r3, r3, r5
 801274e:	d417      	bmi.n	8012780 <_malloc_r+0x8c>
 8012750:	2b0b      	cmp	r3, #11
 8012752:	d903      	bls.n	801275c <_malloc_r+0x68>
 8012754:	6023      	str	r3, [r4, #0]
 8012756:	441c      	add	r4, r3
 8012758:	6025      	str	r5, [r4, #0]
 801275a:	e004      	b.n	8012766 <_malloc_r+0x72>
 801275c:	6863      	ldr	r3, [r4, #4]
 801275e:	42a2      	cmp	r2, r4
 8012760:	bf0c      	ite	eq
 8012762:	600b      	streq	r3, [r1, #0]
 8012764:	6053      	strne	r3, [r2, #4]
 8012766:	4630      	mov	r0, r6
 8012768:	f003 fad6 	bl	8015d18 <__malloc_unlock>
 801276c:	f104 000b 	add.w	r0, r4, #11
 8012770:	1d23      	adds	r3, r4, #4
 8012772:	f020 0007 	bic.w	r0, r0, #7
 8012776:	1ac2      	subs	r2, r0, r3
 8012778:	d0cc      	beq.n	8012714 <_malloc_r+0x20>
 801277a:	1a1b      	subs	r3, r3, r0
 801277c:	50a3      	str	r3, [r4, r2]
 801277e:	e7c9      	b.n	8012714 <_malloc_r+0x20>
 8012780:	4622      	mov	r2, r4
 8012782:	6864      	ldr	r4, [r4, #4]
 8012784:	e7cc      	b.n	8012720 <_malloc_r+0x2c>
 8012786:	1cc4      	adds	r4, r0, #3
 8012788:	f024 0403 	bic.w	r4, r4, #3
 801278c:	42a0      	cmp	r0, r4
 801278e:	d0e3      	beq.n	8012758 <_malloc_r+0x64>
 8012790:	1a21      	subs	r1, r4, r0
 8012792:	4630      	mov	r0, r6
 8012794:	f000 ff10 	bl	80135b8 <_sbrk_r>
 8012798:	3001      	adds	r0, #1
 801279a:	d1dd      	bne.n	8012758 <_malloc_r+0x64>
 801279c:	e7cf      	b.n	801273e <_malloc_r+0x4a>
 801279e:	bf00      	nop
 80127a0:	20004fbc 	.word	0x20004fbc
 80127a4:	20004fc0 	.word	0x20004fc0

080127a8 <__cvt>:
 80127a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80127ac:	ec55 4b10 	vmov	r4, r5, d0
 80127b0:	2d00      	cmp	r5, #0
 80127b2:	460e      	mov	r6, r1
 80127b4:	4619      	mov	r1, r3
 80127b6:	462b      	mov	r3, r5
 80127b8:	bfbb      	ittet	lt
 80127ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80127be:	461d      	movlt	r5, r3
 80127c0:	2300      	movge	r3, #0
 80127c2:	232d      	movlt	r3, #45	; 0x2d
 80127c4:	700b      	strb	r3, [r1, #0]
 80127c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80127c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80127cc:	4691      	mov	r9, r2
 80127ce:	f023 0820 	bic.w	r8, r3, #32
 80127d2:	bfbc      	itt	lt
 80127d4:	4622      	movlt	r2, r4
 80127d6:	4614      	movlt	r4, r2
 80127d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80127dc:	d005      	beq.n	80127ea <__cvt+0x42>
 80127de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80127e2:	d100      	bne.n	80127e6 <__cvt+0x3e>
 80127e4:	3601      	adds	r6, #1
 80127e6:	2102      	movs	r1, #2
 80127e8:	e000      	b.n	80127ec <__cvt+0x44>
 80127ea:	2103      	movs	r1, #3
 80127ec:	ab03      	add	r3, sp, #12
 80127ee:	9301      	str	r3, [sp, #4]
 80127f0:	ab02      	add	r3, sp, #8
 80127f2:	9300      	str	r3, [sp, #0]
 80127f4:	ec45 4b10 	vmov	d0, r4, r5
 80127f8:	4653      	mov	r3, sl
 80127fa:	4632      	mov	r2, r6
 80127fc:	f001 ffd4 	bl	80147a8 <_dtoa_r>
 8012800:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8012804:	4607      	mov	r7, r0
 8012806:	d102      	bne.n	801280e <__cvt+0x66>
 8012808:	f019 0f01 	tst.w	r9, #1
 801280c:	d022      	beq.n	8012854 <__cvt+0xac>
 801280e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012812:	eb07 0906 	add.w	r9, r7, r6
 8012816:	d110      	bne.n	801283a <__cvt+0x92>
 8012818:	783b      	ldrb	r3, [r7, #0]
 801281a:	2b30      	cmp	r3, #48	; 0x30
 801281c:	d10a      	bne.n	8012834 <__cvt+0x8c>
 801281e:	2200      	movs	r2, #0
 8012820:	2300      	movs	r3, #0
 8012822:	4620      	mov	r0, r4
 8012824:	4629      	mov	r1, r5
 8012826:	f7ee f95f 	bl	8000ae8 <__aeabi_dcmpeq>
 801282a:	b918      	cbnz	r0, 8012834 <__cvt+0x8c>
 801282c:	f1c6 0601 	rsb	r6, r6, #1
 8012830:	f8ca 6000 	str.w	r6, [sl]
 8012834:	f8da 3000 	ldr.w	r3, [sl]
 8012838:	4499      	add	r9, r3
 801283a:	2200      	movs	r2, #0
 801283c:	2300      	movs	r3, #0
 801283e:	4620      	mov	r0, r4
 8012840:	4629      	mov	r1, r5
 8012842:	f7ee f951 	bl	8000ae8 <__aeabi_dcmpeq>
 8012846:	b108      	cbz	r0, 801284c <__cvt+0xa4>
 8012848:	f8cd 900c 	str.w	r9, [sp, #12]
 801284c:	2230      	movs	r2, #48	; 0x30
 801284e:	9b03      	ldr	r3, [sp, #12]
 8012850:	454b      	cmp	r3, r9
 8012852:	d307      	bcc.n	8012864 <__cvt+0xbc>
 8012854:	9b03      	ldr	r3, [sp, #12]
 8012856:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012858:	1bdb      	subs	r3, r3, r7
 801285a:	4638      	mov	r0, r7
 801285c:	6013      	str	r3, [r2, #0]
 801285e:	b004      	add	sp, #16
 8012860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012864:	1c59      	adds	r1, r3, #1
 8012866:	9103      	str	r1, [sp, #12]
 8012868:	701a      	strb	r2, [r3, #0]
 801286a:	e7f0      	b.n	801284e <__cvt+0xa6>

0801286c <__exponent>:
 801286c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801286e:	4603      	mov	r3, r0
 8012870:	2900      	cmp	r1, #0
 8012872:	bfb8      	it	lt
 8012874:	4249      	neglt	r1, r1
 8012876:	f803 2b02 	strb.w	r2, [r3], #2
 801287a:	bfb4      	ite	lt
 801287c:	222d      	movlt	r2, #45	; 0x2d
 801287e:	222b      	movge	r2, #43	; 0x2b
 8012880:	2909      	cmp	r1, #9
 8012882:	7042      	strb	r2, [r0, #1]
 8012884:	dd2a      	ble.n	80128dc <__exponent+0x70>
 8012886:	f10d 0407 	add.w	r4, sp, #7
 801288a:	46a4      	mov	ip, r4
 801288c:	270a      	movs	r7, #10
 801288e:	46a6      	mov	lr, r4
 8012890:	460a      	mov	r2, r1
 8012892:	fb91 f6f7 	sdiv	r6, r1, r7
 8012896:	fb07 1516 	mls	r5, r7, r6, r1
 801289a:	3530      	adds	r5, #48	; 0x30
 801289c:	2a63      	cmp	r2, #99	; 0x63
 801289e:	f104 34ff 	add.w	r4, r4, #4294967295
 80128a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80128a6:	4631      	mov	r1, r6
 80128a8:	dcf1      	bgt.n	801288e <__exponent+0x22>
 80128aa:	3130      	adds	r1, #48	; 0x30
 80128ac:	f1ae 0502 	sub.w	r5, lr, #2
 80128b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80128b4:	1c44      	adds	r4, r0, #1
 80128b6:	4629      	mov	r1, r5
 80128b8:	4561      	cmp	r1, ip
 80128ba:	d30a      	bcc.n	80128d2 <__exponent+0x66>
 80128bc:	f10d 0209 	add.w	r2, sp, #9
 80128c0:	eba2 020e 	sub.w	r2, r2, lr
 80128c4:	4565      	cmp	r5, ip
 80128c6:	bf88      	it	hi
 80128c8:	2200      	movhi	r2, #0
 80128ca:	4413      	add	r3, r2
 80128cc:	1a18      	subs	r0, r3, r0
 80128ce:	b003      	add	sp, #12
 80128d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80128d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80128d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80128da:	e7ed      	b.n	80128b8 <__exponent+0x4c>
 80128dc:	2330      	movs	r3, #48	; 0x30
 80128de:	3130      	adds	r1, #48	; 0x30
 80128e0:	7083      	strb	r3, [r0, #2]
 80128e2:	70c1      	strb	r1, [r0, #3]
 80128e4:	1d03      	adds	r3, r0, #4
 80128e6:	e7f1      	b.n	80128cc <__exponent+0x60>

080128e8 <_printf_float>:
 80128e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128ec:	ed2d 8b02 	vpush	{d8}
 80128f0:	b08d      	sub	sp, #52	; 0x34
 80128f2:	460c      	mov	r4, r1
 80128f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80128f8:	4616      	mov	r6, r2
 80128fa:	461f      	mov	r7, r3
 80128fc:	4605      	mov	r5, r0
 80128fe:	f003 f971 	bl	8015be4 <_localeconv_r>
 8012902:	f8d0 a000 	ldr.w	sl, [r0]
 8012906:	4650      	mov	r0, sl
 8012908:	f7ed fc72 	bl	80001f0 <strlen>
 801290c:	2300      	movs	r3, #0
 801290e:	930a      	str	r3, [sp, #40]	; 0x28
 8012910:	6823      	ldr	r3, [r4, #0]
 8012912:	9305      	str	r3, [sp, #20]
 8012914:	f8d8 3000 	ldr.w	r3, [r8]
 8012918:	f894 b018 	ldrb.w	fp, [r4, #24]
 801291c:	3307      	adds	r3, #7
 801291e:	f023 0307 	bic.w	r3, r3, #7
 8012922:	f103 0208 	add.w	r2, r3, #8
 8012926:	f8c8 2000 	str.w	r2, [r8]
 801292a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801292e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012932:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8012936:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801293a:	9307      	str	r3, [sp, #28]
 801293c:	f8cd 8018 	str.w	r8, [sp, #24]
 8012940:	ee08 0a10 	vmov	s16, r0
 8012944:	4b9f      	ldr	r3, [pc, #636]	; (8012bc4 <_printf_float+0x2dc>)
 8012946:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801294a:	f04f 32ff 	mov.w	r2, #4294967295
 801294e:	f7ee f8fd 	bl	8000b4c <__aeabi_dcmpun>
 8012952:	bb88      	cbnz	r0, 80129b8 <_printf_float+0xd0>
 8012954:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012958:	4b9a      	ldr	r3, [pc, #616]	; (8012bc4 <_printf_float+0x2dc>)
 801295a:	f04f 32ff 	mov.w	r2, #4294967295
 801295e:	f7ee f8d7 	bl	8000b10 <__aeabi_dcmple>
 8012962:	bb48      	cbnz	r0, 80129b8 <_printf_float+0xd0>
 8012964:	2200      	movs	r2, #0
 8012966:	2300      	movs	r3, #0
 8012968:	4640      	mov	r0, r8
 801296a:	4649      	mov	r1, r9
 801296c:	f7ee f8c6 	bl	8000afc <__aeabi_dcmplt>
 8012970:	b110      	cbz	r0, 8012978 <_printf_float+0x90>
 8012972:	232d      	movs	r3, #45	; 0x2d
 8012974:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012978:	4b93      	ldr	r3, [pc, #588]	; (8012bc8 <_printf_float+0x2e0>)
 801297a:	4894      	ldr	r0, [pc, #592]	; (8012bcc <_printf_float+0x2e4>)
 801297c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8012980:	bf94      	ite	ls
 8012982:	4698      	movls	r8, r3
 8012984:	4680      	movhi	r8, r0
 8012986:	2303      	movs	r3, #3
 8012988:	6123      	str	r3, [r4, #16]
 801298a:	9b05      	ldr	r3, [sp, #20]
 801298c:	f023 0204 	bic.w	r2, r3, #4
 8012990:	6022      	str	r2, [r4, #0]
 8012992:	f04f 0900 	mov.w	r9, #0
 8012996:	9700      	str	r7, [sp, #0]
 8012998:	4633      	mov	r3, r6
 801299a:	aa0b      	add	r2, sp, #44	; 0x2c
 801299c:	4621      	mov	r1, r4
 801299e:	4628      	mov	r0, r5
 80129a0:	f000 f9d8 	bl	8012d54 <_printf_common>
 80129a4:	3001      	adds	r0, #1
 80129a6:	f040 8090 	bne.w	8012aca <_printf_float+0x1e2>
 80129aa:	f04f 30ff 	mov.w	r0, #4294967295
 80129ae:	b00d      	add	sp, #52	; 0x34
 80129b0:	ecbd 8b02 	vpop	{d8}
 80129b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129b8:	4642      	mov	r2, r8
 80129ba:	464b      	mov	r3, r9
 80129bc:	4640      	mov	r0, r8
 80129be:	4649      	mov	r1, r9
 80129c0:	f7ee f8c4 	bl	8000b4c <__aeabi_dcmpun>
 80129c4:	b140      	cbz	r0, 80129d8 <_printf_float+0xf0>
 80129c6:	464b      	mov	r3, r9
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	bfbc      	itt	lt
 80129cc:	232d      	movlt	r3, #45	; 0x2d
 80129ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80129d2:	487f      	ldr	r0, [pc, #508]	; (8012bd0 <_printf_float+0x2e8>)
 80129d4:	4b7f      	ldr	r3, [pc, #508]	; (8012bd4 <_printf_float+0x2ec>)
 80129d6:	e7d1      	b.n	801297c <_printf_float+0x94>
 80129d8:	6863      	ldr	r3, [r4, #4]
 80129da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80129de:	9206      	str	r2, [sp, #24]
 80129e0:	1c5a      	adds	r2, r3, #1
 80129e2:	d13f      	bne.n	8012a64 <_printf_float+0x17c>
 80129e4:	2306      	movs	r3, #6
 80129e6:	6063      	str	r3, [r4, #4]
 80129e8:	9b05      	ldr	r3, [sp, #20]
 80129ea:	6861      	ldr	r1, [r4, #4]
 80129ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80129f0:	2300      	movs	r3, #0
 80129f2:	9303      	str	r3, [sp, #12]
 80129f4:	ab0a      	add	r3, sp, #40	; 0x28
 80129f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80129fa:	ab09      	add	r3, sp, #36	; 0x24
 80129fc:	ec49 8b10 	vmov	d0, r8, r9
 8012a00:	9300      	str	r3, [sp, #0]
 8012a02:	6022      	str	r2, [r4, #0]
 8012a04:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012a08:	4628      	mov	r0, r5
 8012a0a:	f7ff fecd 	bl	80127a8 <__cvt>
 8012a0e:	9b06      	ldr	r3, [sp, #24]
 8012a10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012a12:	2b47      	cmp	r3, #71	; 0x47
 8012a14:	4680      	mov	r8, r0
 8012a16:	d108      	bne.n	8012a2a <_printf_float+0x142>
 8012a18:	1cc8      	adds	r0, r1, #3
 8012a1a:	db02      	blt.n	8012a22 <_printf_float+0x13a>
 8012a1c:	6863      	ldr	r3, [r4, #4]
 8012a1e:	4299      	cmp	r1, r3
 8012a20:	dd41      	ble.n	8012aa6 <_printf_float+0x1be>
 8012a22:	f1ab 0b02 	sub.w	fp, fp, #2
 8012a26:	fa5f fb8b 	uxtb.w	fp, fp
 8012a2a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012a2e:	d820      	bhi.n	8012a72 <_printf_float+0x18a>
 8012a30:	3901      	subs	r1, #1
 8012a32:	465a      	mov	r2, fp
 8012a34:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012a38:	9109      	str	r1, [sp, #36]	; 0x24
 8012a3a:	f7ff ff17 	bl	801286c <__exponent>
 8012a3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012a40:	1813      	adds	r3, r2, r0
 8012a42:	2a01      	cmp	r2, #1
 8012a44:	4681      	mov	r9, r0
 8012a46:	6123      	str	r3, [r4, #16]
 8012a48:	dc02      	bgt.n	8012a50 <_printf_float+0x168>
 8012a4a:	6822      	ldr	r2, [r4, #0]
 8012a4c:	07d2      	lsls	r2, r2, #31
 8012a4e:	d501      	bpl.n	8012a54 <_printf_float+0x16c>
 8012a50:	3301      	adds	r3, #1
 8012a52:	6123      	str	r3, [r4, #16]
 8012a54:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d09c      	beq.n	8012996 <_printf_float+0xae>
 8012a5c:	232d      	movs	r3, #45	; 0x2d
 8012a5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012a62:	e798      	b.n	8012996 <_printf_float+0xae>
 8012a64:	9a06      	ldr	r2, [sp, #24]
 8012a66:	2a47      	cmp	r2, #71	; 0x47
 8012a68:	d1be      	bne.n	80129e8 <_printf_float+0x100>
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d1bc      	bne.n	80129e8 <_printf_float+0x100>
 8012a6e:	2301      	movs	r3, #1
 8012a70:	e7b9      	b.n	80129e6 <_printf_float+0xfe>
 8012a72:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8012a76:	d118      	bne.n	8012aaa <_printf_float+0x1c2>
 8012a78:	2900      	cmp	r1, #0
 8012a7a:	6863      	ldr	r3, [r4, #4]
 8012a7c:	dd0b      	ble.n	8012a96 <_printf_float+0x1ae>
 8012a7e:	6121      	str	r1, [r4, #16]
 8012a80:	b913      	cbnz	r3, 8012a88 <_printf_float+0x1a0>
 8012a82:	6822      	ldr	r2, [r4, #0]
 8012a84:	07d0      	lsls	r0, r2, #31
 8012a86:	d502      	bpl.n	8012a8e <_printf_float+0x1a6>
 8012a88:	3301      	adds	r3, #1
 8012a8a:	440b      	add	r3, r1
 8012a8c:	6123      	str	r3, [r4, #16]
 8012a8e:	65a1      	str	r1, [r4, #88]	; 0x58
 8012a90:	f04f 0900 	mov.w	r9, #0
 8012a94:	e7de      	b.n	8012a54 <_printf_float+0x16c>
 8012a96:	b913      	cbnz	r3, 8012a9e <_printf_float+0x1b6>
 8012a98:	6822      	ldr	r2, [r4, #0]
 8012a9a:	07d2      	lsls	r2, r2, #31
 8012a9c:	d501      	bpl.n	8012aa2 <_printf_float+0x1ba>
 8012a9e:	3302      	adds	r3, #2
 8012aa0:	e7f4      	b.n	8012a8c <_printf_float+0x1a4>
 8012aa2:	2301      	movs	r3, #1
 8012aa4:	e7f2      	b.n	8012a8c <_printf_float+0x1a4>
 8012aa6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8012aaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012aac:	4299      	cmp	r1, r3
 8012aae:	db05      	blt.n	8012abc <_printf_float+0x1d4>
 8012ab0:	6823      	ldr	r3, [r4, #0]
 8012ab2:	6121      	str	r1, [r4, #16]
 8012ab4:	07d8      	lsls	r0, r3, #31
 8012ab6:	d5ea      	bpl.n	8012a8e <_printf_float+0x1a6>
 8012ab8:	1c4b      	adds	r3, r1, #1
 8012aba:	e7e7      	b.n	8012a8c <_printf_float+0x1a4>
 8012abc:	2900      	cmp	r1, #0
 8012abe:	bfd4      	ite	le
 8012ac0:	f1c1 0202 	rsble	r2, r1, #2
 8012ac4:	2201      	movgt	r2, #1
 8012ac6:	4413      	add	r3, r2
 8012ac8:	e7e0      	b.n	8012a8c <_printf_float+0x1a4>
 8012aca:	6823      	ldr	r3, [r4, #0]
 8012acc:	055a      	lsls	r2, r3, #21
 8012ace:	d407      	bmi.n	8012ae0 <_printf_float+0x1f8>
 8012ad0:	6923      	ldr	r3, [r4, #16]
 8012ad2:	4642      	mov	r2, r8
 8012ad4:	4631      	mov	r1, r6
 8012ad6:	4628      	mov	r0, r5
 8012ad8:	47b8      	blx	r7
 8012ada:	3001      	adds	r0, #1
 8012adc:	d12c      	bne.n	8012b38 <_printf_float+0x250>
 8012ade:	e764      	b.n	80129aa <_printf_float+0xc2>
 8012ae0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012ae4:	f240 80e0 	bls.w	8012ca8 <_printf_float+0x3c0>
 8012ae8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012aec:	2200      	movs	r2, #0
 8012aee:	2300      	movs	r3, #0
 8012af0:	f7ed fffa 	bl	8000ae8 <__aeabi_dcmpeq>
 8012af4:	2800      	cmp	r0, #0
 8012af6:	d034      	beq.n	8012b62 <_printf_float+0x27a>
 8012af8:	4a37      	ldr	r2, [pc, #220]	; (8012bd8 <_printf_float+0x2f0>)
 8012afa:	2301      	movs	r3, #1
 8012afc:	4631      	mov	r1, r6
 8012afe:	4628      	mov	r0, r5
 8012b00:	47b8      	blx	r7
 8012b02:	3001      	adds	r0, #1
 8012b04:	f43f af51 	beq.w	80129aa <_printf_float+0xc2>
 8012b08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012b0c:	429a      	cmp	r2, r3
 8012b0e:	db02      	blt.n	8012b16 <_printf_float+0x22e>
 8012b10:	6823      	ldr	r3, [r4, #0]
 8012b12:	07d8      	lsls	r0, r3, #31
 8012b14:	d510      	bpl.n	8012b38 <_printf_float+0x250>
 8012b16:	ee18 3a10 	vmov	r3, s16
 8012b1a:	4652      	mov	r2, sl
 8012b1c:	4631      	mov	r1, r6
 8012b1e:	4628      	mov	r0, r5
 8012b20:	47b8      	blx	r7
 8012b22:	3001      	adds	r0, #1
 8012b24:	f43f af41 	beq.w	80129aa <_printf_float+0xc2>
 8012b28:	f04f 0800 	mov.w	r8, #0
 8012b2c:	f104 091a 	add.w	r9, r4, #26
 8012b30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b32:	3b01      	subs	r3, #1
 8012b34:	4543      	cmp	r3, r8
 8012b36:	dc09      	bgt.n	8012b4c <_printf_float+0x264>
 8012b38:	6823      	ldr	r3, [r4, #0]
 8012b3a:	079b      	lsls	r3, r3, #30
 8012b3c:	f100 8105 	bmi.w	8012d4a <_printf_float+0x462>
 8012b40:	68e0      	ldr	r0, [r4, #12]
 8012b42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012b44:	4298      	cmp	r0, r3
 8012b46:	bfb8      	it	lt
 8012b48:	4618      	movlt	r0, r3
 8012b4a:	e730      	b.n	80129ae <_printf_float+0xc6>
 8012b4c:	2301      	movs	r3, #1
 8012b4e:	464a      	mov	r2, r9
 8012b50:	4631      	mov	r1, r6
 8012b52:	4628      	mov	r0, r5
 8012b54:	47b8      	blx	r7
 8012b56:	3001      	adds	r0, #1
 8012b58:	f43f af27 	beq.w	80129aa <_printf_float+0xc2>
 8012b5c:	f108 0801 	add.w	r8, r8, #1
 8012b60:	e7e6      	b.n	8012b30 <_printf_float+0x248>
 8012b62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	dc39      	bgt.n	8012bdc <_printf_float+0x2f4>
 8012b68:	4a1b      	ldr	r2, [pc, #108]	; (8012bd8 <_printf_float+0x2f0>)
 8012b6a:	2301      	movs	r3, #1
 8012b6c:	4631      	mov	r1, r6
 8012b6e:	4628      	mov	r0, r5
 8012b70:	47b8      	blx	r7
 8012b72:	3001      	adds	r0, #1
 8012b74:	f43f af19 	beq.w	80129aa <_printf_float+0xc2>
 8012b78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012b7c:	4313      	orrs	r3, r2
 8012b7e:	d102      	bne.n	8012b86 <_printf_float+0x29e>
 8012b80:	6823      	ldr	r3, [r4, #0]
 8012b82:	07d9      	lsls	r1, r3, #31
 8012b84:	d5d8      	bpl.n	8012b38 <_printf_float+0x250>
 8012b86:	ee18 3a10 	vmov	r3, s16
 8012b8a:	4652      	mov	r2, sl
 8012b8c:	4631      	mov	r1, r6
 8012b8e:	4628      	mov	r0, r5
 8012b90:	47b8      	blx	r7
 8012b92:	3001      	adds	r0, #1
 8012b94:	f43f af09 	beq.w	80129aa <_printf_float+0xc2>
 8012b98:	f04f 0900 	mov.w	r9, #0
 8012b9c:	f104 0a1a 	add.w	sl, r4, #26
 8012ba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ba2:	425b      	negs	r3, r3
 8012ba4:	454b      	cmp	r3, r9
 8012ba6:	dc01      	bgt.n	8012bac <_printf_float+0x2c4>
 8012ba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012baa:	e792      	b.n	8012ad2 <_printf_float+0x1ea>
 8012bac:	2301      	movs	r3, #1
 8012bae:	4652      	mov	r2, sl
 8012bb0:	4631      	mov	r1, r6
 8012bb2:	4628      	mov	r0, r5
 8012bb4:	47b8      	blx	r7
 8012bb6:	3001      	adds	r0, #1
 8012bb8:	f43f aef7 	beq.w	80129aa <_printf_float+0xc2>
 8012bbc:	f109 0901 	add.w	r9, r9, #1
 8012bc0:	e7ee      	b.n	8012ba0 <_printf_float+0x2b8>
 8012bc2:	bf00      	nop
 8012bc4:	7fefffff 	.word	0x7fefffff
 8012bc8:	08017e90 	.word	0x08017e90
 8012bcc:	08017e94 	.word	0x08017e94
 8012bd0:	08017e9c 	.word	0x08017e9c
 8012bd4:	08017e98 	.word	0x08017e98
 8012bd8:	08017ea0 	.word	0x08017ea0
 8012bdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012bde:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012be0:	429a      	cmp	r2, r3
 8012be2:	bfa8      	it	ge
 8012be4:	461a      	movge	r2, r3
 8012be6:	2a00      	cmp	r2, #0
 8012be8:	4691      	mov	r9, r2
 8012bea:	dc37      	bgt.n	8012c5c <_printf_float+0x374>
 8012bec:	f04f 0b00 	mov.w	fp, #0
 8012bf0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012bf4:	f104 021a 	add.w	r2, r4, #26
 8012bf8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012bfa:	9305      	str	r3, [sp, #20]
 8012bfc:	eba3 0309 	sub.w	r3, r3, r9
 8012c00:	455b      	cmp	r3, fp
 8012c02:	dc33      	bgt.n	8012c6c <_printf_float+0x384>
 8012c04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012c08:	429a      	cmp	r2, r3
 8012c0a:	db3b      	blt.n	8012c84 <_printf_float+0x39c>
 8012c0c:	6823      	ldr	r3, [r4, #0]
 8012c0e:	07da      	lsls	r2, r3, #31
 8012c10:	d438      	bmi.n	8012c84 <_printf_float+0x39c>
 8012c12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012c14:	9b05      	ldr	r3, [sp, #20]
 8012c16:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012c18:	1ad3      	subs	r3, r2, r3
 8012c1a:	eba2 0901 	sub.w	r9, r2, r1
 8012c1e:	4599      	cmp	r9, r3
 8012c20:	bfa8      	it	ge
 8012c22:	4699      	movge	r9, r3
 8012c24:	f1b9 0f00 	cmp.w	r9, #0
 8012c28:	dc35      	bgt.n	8012c96 <_printf_float+0x3ae>
 8012c2a:	f04f 0800 	mov.w	r8, #0
 8012c2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012c32:	f104 0a1a 	add.w	sl, r4, #26
 8012c36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012c3a:	1a9b      	subs	r3, r3, r2
 8012c3c:	eba3 0309 	sub.w	r3, r3, r9
 8012c40:	4543      	cmp	r3, r8
 8012c42:	f77f af79 	ble.w	8012b38 <_printf_float+0x250>
 8012c46:	2301      	movs	r3, #1
 8012c48:	4652      	mov	r2, sl
 8012c4a:	4631      	mov	r1, r6
 8012c4c:	4628      	mov	r0, r5
 8012c4e:	47b8      	blx	r7
 8012c50:	3001      	adds	r0, #1
 8012c52:	f43f aeaa 	beq.w	80129aa <_printf_float+0xc2>
 8012c56:	f108 0801 	add.w	r8, r8, #1
 8012c5a:	e7ec      	b.n	8012c36 <_printf_float+0x34e>
 8012c5c:	4613      	mov	r3, r2
 8012c5e:	4631      	mov	r1, r6
 8012c60:	4642      	mov	r2, r8
 8012c62:	4628      	mov	r0, r5
 8012c64:	47b8      	blx	r7
 8012c66:	3001      	adds	r0, #1
 8012c68:	d1c0      	bne.n	8012bec <_printf_float+0x304>
 8012c6a:	e69e      	b.n	80129aa <_printf_float+0xc2>
 8012c6c:	2301      	movs	r3, #1
 8012c6e:	4631      	mov	r1, r6
 8012c70:	4628      	mov	r0, r5
 8012c72:	9205      	str	r2, [sp, #20]
 8012c74:	47b8      	blx	r7
 8012c76:	3001      	adds	r0, #1
 8012c78:	f43f ae97 	beq.w	80129aa <_printf_float+0xc2>
 8012c7c:	9a05      	ldr	r2, [sp, #20]
 8012c7e:	f10b 0b01 	add.w	fp, fp, #1
 8012c82:	e7b9      	b.n	8012bf8 <_printf_float+0x310>
 8012c84:	ee18 3a10 	vmov	r3, s16
 8012c88:	4652      	mov	r2, sl
 8012c8a:	4631      	mov	r1, r6
 8012c8c:	4628      	mov	r0, r5
 8012c8e:	47b8      	blx	r7
 8012c90:	3001      	adds	r0, #1
 8012c92:	d1be      	bne.n	8012c12 <_printf_float+0x32a>
 8012c94:	e689      	b.n	80129aa <_printf_float+0xc2>
 8012c96:	9a05      	ldr	r2, [sp, #20]
 8012c98:	464b      	mov	r3, r9
 8012c9a:	4442      	add	r2, r8
 8012c9c:	4631      	mov	r1, r6
 8012c9e:	4628      	mov	r0, r5
 8012ca0:	47b8      	blx	r7
 8012ca2:	3001      	adds	r0, #1
 8012ca4:	d1c1      	bne.n	8012c2a <_printf_float+0x342>
 8012ca6:	e680      	b.n	80129aa <_printf_float+0xc2>
 8012ca8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012caa:	2a01      	cmp	r2, #1
 8012cac:	dc01      	bgt.n	8012cb2 <_printf_float+0x3ca>
 8012cae:	07db      	lsls	r3, r3, #31
 8012cb0:	d538      	bpl.n	8012d24 <_printf_float+0x43c>
 8012cb2:	2301      	movs	r3, #1
 8012cb4:	4642      	mov	r2, r8
 8012cb6:	4631      	mov	r1, r6
 8012cb8:	4628      	mov	r0, r5
 8012cba:	47b8      	blx	r7
 8012cbc:	3001      	adds	r0, #1
 8012cbe:	f43f ae74 	beq.w	80129aa <_printf_float+0xc2>
 8012cc2:	ee18 3a10 	vmov	r3, s16
 8012cc6:	4652      	mov	r2, sl
 8012cc8:	4631      	mov	r1, r6
 8012cca:	4628      	mov	r0, r5
 8012ccc:	47b8      	blx	r7
 8012cce:	3001      	adds	r0, #1
 8012cd0:	f43f ae6b 	beq.w	80129aa <_printf_float+0xc2>
 8012cd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012cd8:	2200      	movs	r2, #0
 8012cda:	2300      	movs	r3, #0
 8012cdc:	f7ed ff04 	bl	8000ae8 <__aeabi_dcmpeq>
 8012ce0:	b9d8      	cbnz	r0, 8012d1a <_printf_float+0x432>
 8012ce2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ce4:	f108 0201 	add.w	r2, r8, #1
 8012ce8:	3b01      	subs	r3, #1
 8012cea:	4631      	mov	r1, r6
 8012cec:	4628      	mov	r0, r5
 8012cee:	47b8      	blx	r7
 8012cf0:	3001      	adds	r0, #1
 8012cf2:	d10e      	bne.n	8012d12 <_printf_float+0x42a>
 8012cf4:	e659      	b.n	80129aa <_printf_float+0xc2>
 8012cf6:	2301      	movs	r3, #1
 8012cf8:	4652      	mov	r2, sl
 8012cfa:	4631      	mov	r1, r6
 8012cfc:	4628      	mov	r0, r5
 8012cfe:	47b8      	blx	r7
 8012d00:	3001      	adds	r0, #1
 8012d02:	f43f ae52 	beq.w	80129aa <_printf_float+0xc2>
 8012d06:	f108 0801 	add.w	r8, r8, #1
 8012d0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d0c:	3b01      	subs	r3, #1
 8012d0e:	4543      	cmp	r3, r8
 8012d10:	dcf1      	bgt.n	8012cf6 <_printf_float+0x40e>
 8012d12:	464b      	mov	r3, r9
 8012d14:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012d18:	e6dc      	b.n	8012ad4 <_printf_float+0x1ec>
 8012d1a:	f04f 0800 	mov.w	r8, #0
 8012d1e:	f104 0a1a 	add.w	sl, r4, #26
 8012d22:	e7f2      	b.n	8012d0a <_printf_float+0x422>
 8012d24:	2301      	movs	r3, #1
 8012d26:	4642      	mov	r2, r8
 8012d28:	e7df      	b.n	8012cea <_printf_float+0x402>
 8012d2a:	2301      	movs	r3, #1
 8012d2c:	464a      	mov	r2, r9
 8012d2e:	4631      	mov	r1, r6
 8012d30:	4628      	mov	r0, r5
 8012d32:	47b8      	blx	r7
 8012d34:	3001      	adds	r0, #1
 8012d36:	f43f ae38 	beq.w	80129aa <_printf_float+0xc2>
 8012d3a:	f108 0801 	add.w	r8, r8, #1
 8012d3e:	68e3      	ldr	r3, [r4, #12]
 8012d40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012d42:	1a5b      	subs	r3, r3, r1
 8012d44:	4543      	cmp	r3, r8
 8012d46:	dcf0      	bgt.n	8012d2a <_printf_float+0x442>
 8012d48:	e6fa      	b.n	8012b40 <_printf_float+0x258>
 8012d4a:	f04f 0800 	mov.w	r8, #0
 8012d4e:	f104 0919 	add.w	r9, r4, #25
 8012d52:	e7f4      	b.n	8012d3e <_printf_float+0x456>

08012d54 <_printf_common>:
 8012d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d58:	4616      	mov	r6, r2
 8012d5a:	4699      	mov	r9, r3
 8012d5c:	688a      	ldr	r2, [r1, #8]
 8012d5e:	690b      	ldr	r3, [r1, #16]
 8012d60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012d64:	4293      	cmp	r3, r2
 8012d66:	bfb8      	it	lt
 8012d68:	4613      	movlt	r3, r2
 8012d6a:	6033      	str	r3, [r6, #0]
 8012d6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012d70:	4607      	mov	r7, r0
 8012d72:	460c      	mov	r4, r1
 8012d74:	b10a      	cbz	r2, 8012d7a <_printf_common+0x26>
 8012d76:	3301      	adds	r3, #1
 8012d78:	6033      	str	r3, [r6, #0]
 8012d7a:	6823      	ldr	r3, [r4, #0]
 8012d7c:	0699      	lsls	r1, r3, #26
 8012d7e:	bf42      	ittt	mi
 8012d80:	6833      	ldrmi	r3, [r6, #0]
 8012d82:	3302      	addmi	r3, #2
 8012d84:	6033      	strmi	r3, [r6, #0]
 8012d86:	6825      	ldr	r5, [r4, #0]
 8012d88:	f015 0506 	ands.w	r5, r5, #6
 8012d8c:	d106      	bne.n	8012d9c <_printf_common+0x48>
 8012d8e:	f104 0a19 	add.w	sl, r4, #25
 8012d92:	68e3      	ldr	r3, [r4, #12]
 8012d94:	6832      	ldr	r2, [r6, #0]
 8012d96:	1a9b      	subs	r3, r3, r2
 8012d98:	42ab      	cmp	r3, r5
 8012d9a:	dc26      	bgt.n	8012dea <_printf_common+0x96>
 8012d9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012da0:	1e13      	subs	r3, r2, #0
 8012da2:	6822      	ldr	r2, [r4, #0]
 8012da4:	bf18      	it	ne
 8012da6:	2301      	movne	r3, #1
 8012da8:	0692      	lsls	r2, r2, #26
 8012daa:	d42b      	bmi.n	8012e04 <_printf_common+0xb0>
 8012dac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012db0:	4649      	mov	r1, r9
 8012db2:	4638      	mov	r0, r7
 8012db4:	47c0      	blx	r8
 8012db6:	3001      	adds	r0, #1
 8012db8:	d01e      	beq.n	8012df8 <_printf_common+0xa4>
 8012dba:	6823      	ldr	r3, [r4, #0]
 8012dbc:	68e5      	ldr	r5, [r4, #12]
 8012dbe:	6832      	ldr	r2, [r6, #0]
 8012dc0:	f003 0306 	and.w	r3, r3, #6
 8012dc4:	2b04      	cmp	r3, #4
 8012dc6:	bf08      	it	eq
 8012dc8:	1aad      	subeq	r5, r5, r2
 8012dca:	68a3      	ldr	r3, [r4, #8]
 8012dcc:	6922      	ldr	r2, [r4, #16]
 8012dce:	bf0c      	ite	eq
 8012dd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012dd4:	2500      	movne	r5, #0
 8012dd6:	4293      	cmp	r3, r2
 8012dd8:	bfc4      	itt	gt
 8012dda:	1a9b      	subgt	r3, r3, r2
 8012ddc:	18ed      	addgt	r5, r5, r3
 8012dde:	2600      	movs	r6, #0
 8012de0:	341a      	adds	r4, #26
 8012de2:	42b5      	cmp	r5, r6
 8012de4:	d11a      	bne.n	8012e1c <_printf_common+0xc8>
 8012de6:	2000      	movs	r0, #0
 8012de8:	e008      	b.n	8012dfc <_printf_common+0xa8>
 8012dea:	2301      	movs	r3, #1
 8012dec:	4652      	mov	r2, sl
 8012dee:	4649      	mov	r1, r9
 8012df0:	4638      	mov	r0, r7
 8012df2:	47c0      	blx	r8
 8012df4:	3001      	adds	r0, #1
 8012df6:	d103      	bne.n	8012e00 <_printf_common+0xac>
 8012df8:	f04f 30ff 	mov.w	r0, #4294967295
 8012dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e00:	3501      	adds	r5, #1
 8012e02:	e7c6      	b.n	8012d92 <_printf_common+0x3e>
 8012e04:	18e1      	adds	r1, r4, r3
 8012e06:	1c5a      	adds	r2, r3, #1
 8012e08:	2030      	movs	r0, #48	; 0x30
 8012e0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012e0e:	4422      	add	r2, r4
 8012e10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012e14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012e18:	3302      	adds	r3, #2
 8012e1a:	e7c7      	b.n	8012dac <_printf_common+0x58>
 8012e1c:	2301      	movs	r3, #1
 8012e1e:	4622      	mov	r2, r4
 8012e20:	4649      	mov	r1, r9
 8012e22:	4638      	mov	r0, r7
 8012e24:	47c0      	blx	r8
 8012e26:	3001      	adds	r0, #1
 8012e28:	d0e6      	beq.n	8012df8 <_printf_common+0xa4>
 8012e2a:	3601      	adds	r6, #1
 8012e2c:	e7d9      	b.n	8012de2 <_printf_common+0x8e>
	...

08012e30 <_printf_i>:
 8012e30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012e34:	460c      	mov	r4, r1
 8012e36:	4691      	mov	r9, r2
 8012e38:	7e27      	ldrb	r7, [r4, #24]
 8012e3a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012e3c:	2f78      	cmp	r7, #120	; 0x78
 8012e3e:	4680      	mov	r8, r0
 8012e40:	469a      	mov	sl, r3
 8012e42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012e46:	d807      	bhi.n	8012e58 <_printf_i+0x28>
 8012e48:	2f62      	cmp	r7, #98	; 0x62
 8012e4a:	d80a      	bhi.n	8012e62 <_printf_i+0x32>
 8012e4c:	2f00      	cmp	r7, #0
 8012e4e:	f000 80d8 	beq.w	8013002 <_printf_i+0x1d2>
 8012e52:	2f58      	cmp	r7, #88	; 0x58
 8012e54:	f000 80a3 	beq.w	8012f9e <_printf_i+0x16e>
 8012e58:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012e5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012e60:	e03a      	b.n	8012ed8 <_printf_i+0xa8>
 8012e62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012e66:	2b15      	cmp	r3, #21
 8012e68:	d8f6      	bhi.n	8012e58 <_printf_i+0x28>
 8012e6a:	a001      	add	r0, pc, #4	; (adr r0, 8012e70 <_printf_i+0x40>)
 8012e6c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8012e70:	08012ec9 	.word	0x08012ec9
 8012e74:	08012edd 	.word	0x08012edd
 8012e78:	08012e59 	.word	0x08012e59
 8012e7c:	08012e59 	.word	0x08012e59
 8012e80:	08012e59 	.word	0x08012e59
 8012e84:	08012e59 	.word	0x08012e59
 8012e88:	08012edd 	.word	0x08012edd
 8012e8c:	08012e59 	.word	0x08012e59
 8012e90:	08012e59 	.word	0x08012e59
 8012e94:	08012e59 	.word	0x08012e59
 8012e98:	08012e59 	.word	0x08012e59
 8012e9c:	08012fe9 	.word	0x08012fe9
 8012ea0:	08012f0d 	.word	0x08012f0d
 8012ea4:	08012fcb 	.word	0x08012fcb
 8012ea8:	08012e59 	.word	0x08012e59
 8012eac:	08012e59 	.word	0x08012e59
 8012eb0:	0801300b 	.word	0x0801300b
 8012eb4:	08012e59 	.word	0x08012e59
 8012eb8:	08012f0d 	.word	0x08012f0d
 8012ebc:	08012e59 	.word	0x08012e59
 8012ec0:	08012e59 	.word	0x08012e59
 8012ec4:	08012fd3 	.word	0x08012fd3
 8012ec8:	680b      	ldr	r3, [r1, #0]
 8012eca:	1d1a      	adds	r2, r3, #4
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	600a      	str	r2, [r1, #0]
 8012ed0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012ed4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012ed8:	2301      	movs	r3, #1
 8012eda:	e0a3      	b.n	8013024 <_printf_i+0x1f4>
 8012edc:	6825      	ldr	r5, [r4, #0]
 8012ede:	6808      	ldr	r0, [r1, #0]
 8012ee0:	062e      	lsls	r6, r5, #24
 8012ee2:	f100 0304 	add.w	r3, r0, #4
 8012ee6:	d50a      	bpl.n	8012efe <_printf_i+0xce>
 8012ee8:	6805      	ldr	r5, [r0, #0]
 8012eea:	600b      	str	r3, [r1, #0]
 8012eec:	2d00      	cmp	r5, #0
 8012eee:	da03      	bge.n	8012ef8 <_printf_i+0xc8>
 8012ef0:	232d      	movs	r3, #45	; 0x2d
 8012ef2:	426d      	negs	r5, r5
 8012ef4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012ef8:	485e      	ldr	r0, [pc, #376]	; (8013074 <_printf_i+0x244>)
 8012efa:	230a      	movs	r3, #10
 8012efc:	e019      	b.n	8012f32 <_printf_i+0x102>
 8012efe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8012f02:	6805      	ldr	r5, [r0, #0]
 8012f04:	600b      	str	r3, [r1, #0]
 8012f06:	bf18      	it	ne
 8012f08:	b22d      	sxthne	r5, r5
 8012f0a:	e7ef      	b.n	8012eec <_printf_i+0xbc>
 8012f0c:	680b      	ldr	r3, [r1, #0]
 8012f0e:	6825      	ldr	r5, [r4, #0]
 8012f10:	1d18      	adds	r0, r3, #4
 8012f12:	6008      	str	r0, [r1, #0]
 8012f14:	0628      	lsls	r0, r5, #24
 8012f16:	d501      	bpl.n	8012f1c <_printf_i+0xec>
 8012f18:	681d      	ldr	r5, [r3, #0]
 8012f1a:	e002      	b.n	8012f22 <_printf_i+0xf2>
 8012f1c:	0669      	lsls	r1, r5, #25
 8012f1e:	d5fb      	bpl.n	8012f18 <_printf_i+0xe8>
 8012f20:	881d      	ldrh	r5, [r3, #0]
 8012f22:	4854      	ldr	r0, [pc, #336]	; (8013074 <_printf_i+0x244>)
 8012f24:	2f6f      	cmp	r7, #111	; 0x6f
 8012f26:	bf0c      	ite	eq
 8012f28:	2308      	moveq	r3, #8
 8012f2a:	230a      	movne	r3, #10
 8012f2c:	2100      	movs	r1, #0
 8012f2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012f32:	6866      	ldr	r6, [r4, #4]
 8012f34:	60a6      	str	r6, [r4, #8]
 8012f36:	2e00      	cmp	r6, #0
 8012f38:	bfa2      	ittt	ge
 8012f3a:	6821      	ldrge	r1, [r4, #0]
 8012f3c:	f021 0104 	bicge.w	r1, r1, #4
 8012f40:	6021      	strge	r1, [r4, #0]
 8012f42:	b90d      	cbnz	r5, 8012f48 <_printf_i+0x118>
 8012f44:	2e00      	cmp	r6, #0
 8012f46:	d04d      	beq.n	8012fe4 <_printf_i+0x1b4>
 8012f48:	4616      	mov	r6, r2
 8012f4a:	fbb5 f1f3 	udiv	r1, r5, r3
 8012f4e:	fb03 5711 	mls	r7, r3, r1, r5
 8012f52:	5dc7      	ldrb	r7, [r0, r7]
 8012f54:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012f58:	462f      	mov	r7, r5
 8012f5a:	42bb      	cmp	r3, r7
 8012f5c:	460d      	mov	r5, r1
 8012f5e:	d9f4      	bls.n	8012f4a <_printf_i+0x11a>
 8012f60:	2b08      	cmp	r3, #8
 8012f62:	d10b      	bne.n	8012f7c <_printf_i+0x14c>
 8012f64:	6823      	ldr	r3, [r4, #0]
 8012f66:	07df      	lsls	r7, r3, #31
 8012f68:	d508      	bpl.n	8012f7c <_printf_i+0x14c>
 8012f6a:	6923      	ldr	r3, [r4, #16]
 8012f6c:	6861      	ldr	r1, [r4, #4]
 8012f6e:	4299      	cmp	r1, r3
 8012f70:	bfde      	ittt	le
 8012f72:	2330      	movle	r3, #48	; 0x30
 8012f74:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012f78:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012f7c:	1b92      	subs	r2, r2, r6
 8012f7e:	6122      	str	r2, [r4, #16]
 8012f80:	f8cd a000 	str.w	sl, [sp]
 8012f84:	464b      	mov	r3, r9
 8012f86:	aa03      	add	r2, sp, #12
 8012f88:	4621      	mov	r1, r4
 8012f8a:	4640      	mov	r0, r8
 8012f8c:	f7ff fee2 	bl	8012d54 <_printf_common>
 8012f90:	3001      	adds	r0, #1
 8012f92:	d14c      	bne.n	801302e <_printf_i+0x1fe>
 8012f94:	f04f 30ff 	mov.w	r0, #4294967295
 8012f98:	b004      	add	sp, #16
 8012f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f9e:	4835      	ldr	r0, [pc, #212]	; (8013074 <_printf_i+0x244>)
 8012fa0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012fa4:	6823      	ldr	r3, [r4, #0]
 8012fa6:	680e      	ldr	r6, [r1, #0]
 8012fa8:	061f      	lsls	r7, r3, #24
 8012faa:	f856 5b04 	ldr.w	r5, [r6], #4
 8012fae:	600e      	str	r6, [r1, #0]
 8012fb0:	d514      	bpl.n	8012fdc <_printf_i+0x1ac>
 8012fb2:	07d9      	lsls	r1, r3, #31
 8012fb4:	bf44      	itt	mi
 8012fb6:	f043 0320 	orrmi.w	r3, r3, #32
 8012fba:	6023      	strmi	r3, [r4, #0]
 8012fbc:	b91d      	cbnz	r5, 8012fc6 <_printf_i+0x196>
 8012fbe:	6823      	ldr	r3, [r4, #0]
 8012fc0:	f023 0320 	bic.w	r3, r3, #32
 8012fc4:	6023      	str	r3, [r4, #0]
 8012fc6:	2310      	movs	r3, #16
 8012fc8:	e7b0      	b.n	8012f2c <_printf_i+0xfc>
 8012fca:	6823      	ldr	r3, [r4, #0]
 8012fcc:	f043 0320 	orr.w	r3, r3, #32
 8012fd0:	6023      	str	r3, [r4, #0]
 8012fd2:	2378      	movs	r3, #120	; 0x78
 8012fd4:	4828      	ldr	r0, [pc, #160]	; (8013078 <_printf_i+0x248>)
 8012fd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012fda:	e7e3      	b.n	8012fa4 <_printf_i+0x174>
 8012fdc:	065e      	lsls	r6, r3, #25
 8012fde:	bf48      	it	mi
 8012fe0:	b2ad      	uxthmi	r5, r5
 8012fe2:	e7e6      	b.n	8012fb2 <_printf_i+0x182>
 8012fe4:	4616      	mov	r6, r2
 8012fe6:	e7bb      	b.n	8012f60 <_printf_i+0x130>
 8012fe8:	680b      	ldr	r3, [r1, #0]
 8012fea:	6826      	ldr	r6, [r4, #0]
 8012fec:	6960      	ldr	r0, [r4, #20]
 8012fee:	1d1d      	adds	r5, r3, #4
 8012ff0:	600d      	str	r5, [r1, #0]
 8012ff2:	0635      	lsls	r5, r6, #24
 8012ff4:	681b      	ldr	r3, [r3, #0]
 8012ff6:	d501      	bpl.n	8012ffc <_printf_i+0x1cc>
 8012ff8:	6018      	str	r0, [r3, #0]
 8012ffa:	e002      	b.n	8013002 <_printf_i+0x1d2>
 8012ffc:	0671      	lsls	r1, r6, #25
 8012ffe:	d5fb      	bpl.n	8012ff8 <_printf_i+0x1c8>
 8013000:	8018      	strh	r0, [r3, #0]
 8013002:	2300      	movs	r3, #0
 8013004:	6123      	str	r3, [r4, #16]
 8013006:	4616      	mov	r6, r2
 8013008:	e7ba      	b.n	8012f80 <_printf_i+0x150>
 801300a:	680b      	ldr	r3, [r1, #0]
 801300c:	1d1a      	adds	r2, r3, #4
 801300e:	600a      	str	r2, [r1, #0]
 8013010:	681e      	ldr	r6, [r3, #0]
 8013012:	6862      	ldr	r2, [r4, #4]
 8013014:	2100      	movs	r1, #0
 8013016:	4630      	mov	r0, r6
 8013018:	f7ed f8f2 	bl	8000200 <memchr>
 801301c:	b108      	cbz	r0, 8013022 <_printf_i+0x1f2>
 801301e:	1b80      	subs	r0, r0, r6
 8013020:	6060      	str	r0, [r4, #4]
 8013022:	6863      	ldr	r3, [r4, #4]
 8013024:	6123      	str	r3, [r4, #16]
 8013026:	2300      	movs	r3, #0
 8013028:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801302c:	e7a8      	b.n	8012f80 <_printf_i+0x150>
 801302e:	6923      	ldr	r3, [r4, #16]
 8013030:	4632      	mov	r2, r6
 8013032:	4649      	mov	r1, r9
 8013034:	4640      	mov	r0, r8
 8013036:	47d0      	blx	sl
 8013038:	3001      	adds	r0, #1
 801303a:	d0ab      	beq.n	8012f94 <_printf_i+0x164>
 801303c:	6823      	ldr	r3, [r4, #0]
 801303e:	079b      	lsls	r3, r3, #30
 8013040:	d413      	bmi.n	801306a <_printf_i+0x23a>
 8013042:	68e0      	ldr	r0, [r4, #12]
 8013044:	9b03      	ldr	r3, [sp, #12]
 8013046:	4298      	cmp	r0, r3
 8013048:	bfb8      	it	lt
 801304a:	4618      	movlt	r0, r3
 801304c:	e7a4      	b.n	8012f98 <_printf_i+0x168>
 801304e:	2301      	movs	r3, #1
 8013050:	4632      	mov	r2, r6
 8013052:	4649      	mov	r1, r9
 8013054:	4640      	mov	r0, r8
 8013056:	47d0      	blx	sl
 8013058:	3001      	adds	r0, #1
 801305a:	d09b      	beq.n	8012f94 <_printf_i+0x164>
 801305c:	3501      	adds	r5, #1
 801305e:	68e3      	ldr	r3, [r4, #12]
 8013060:	9903      	ldr	r1, [sp, #12]
 8013062:	1a5b      	subs	r3, r3, r1
 8013064:	42ab      	cmp	r3, r5
 8013066:	dcf2      	bgt.n	801304e <_printf_i+0x21e>
 8013068:	e7eb      	b.n	8013042 <_printf_i+0x212>
 801306a:	2500      	movs	r5, #0
 801306c:	f104 0619 	add.w	r6, r4, #25
 8013070:	e7f5      	b.n	801305e <_printf_i+0x22e>
 8013072:	bf00      	nop
 8013074:	08017ea2 	.word	0x08017ea2
 8013078:	08017eb3 	.word	0x08017eb3

0801307c <_scanf_float>:
 801307c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013080:	b087      	sub	sp, #28
 8013082:	4617      	mov	r7, r2
 8013084:	9303      	str	r3, [sp, #12]
 8013086:	688b      	ldr	r3, [r1, #8]
 8013088:	1e5a      	subs	r2, r3, #1
 801308a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801308e:	bf83      	ittte	hi
 8013090:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8013094:	195b      	addhi	r3, r3, r5
 8013096:	9302      	strhi	r3, [sp, #8]
 8013098:	2300      	movls	r3, #0
 801309a:	bf86      	itte	hi
 801309c:	f240 135d 	movwhi	r3, #349	; 0x15d
 80130a0:	608b      	strhi	r3, [r1, #8]
 80130a2:	9302      	strls	r3, [sp, #8]
 80130a4:	680b      	ldr	r3, [r1, #0]
 80130a6:	468b      	mov	fp, r1
 80130a8:	2500      	movs	r5, #0
 80130aa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80130ae:	f84b 3b1c 	str.w	r3, [fp], #28
 80130b2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80130b6:	4680      	mov	r8, r0
 80130b8:	460c      	mov	r4, r1
 80130ba:	465e      	mov	r6, fp
 80130bc:	46aa      	mov	sl, r5
 80130be:	46a9      	mov	r9, r5
 80130c0:	9501      	str	r5, [sp, #4]
 80130c2:	68a2      	ldr	r2, [r4, #8]
 80130c4:	b152      	cbz	r2, 80130dc <_scanf_float+0x60>
 80130c6:	683b      	ldr	r3, [r7, #0]
 80130c8:	781b      	ldrb	r3, [r3, #0]
 80130ca:	2b4e      	cmp	r3, #78	; 0x4e
 80130cc:	d864      	bhi.n	8013198 <_scanf_float+0x11c>
 80130ce:	2b40      	cmp	r3, #64	; 0x40
 80130d0:	d83c      	bhi.n	801314c <_scanf_float+0xd0>
 80130d2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80130d6:	b2c8      	uxtb	r0, r1
 80130d8:	280e      	cmp	r0, #14
 80130da:	d93a      	bls.n	8013152 <_scanf_float+0xd6>
 80130dc:	f1b9 0f00 	cmp.w	r9, #0
 80130e0:	d003      	beq.n	80130ea <_scanf_float+0x6e>
 80130e2:	6823      	ldr	r3, [r4, #0]
 80130e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80130e8:	6023      	str	r3, [r4, #0]
 80130ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80130ee:	f1ba 0f01 	cmp.w	sl, #1
 80130f2:	f200 8113 	bhi.w	801331c <_scanf_float+0x2a0>
 80130f6:	455e      	cmp	r6, fp
 80130f8:	f200 8105 	bhi.w	8013306 <_scanf_float+0x28a>
 80130fc:	2501      	movs	r5, #1
 80130fe:	4628      	mov	r0, r5
 8013100:	b007      	add	sp, #28
 8013102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013106:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801310a:	2a0d      	cmp	r2, #13
 801310c:	d8e6      	bhi.n	80130dc <_scanf_float+0x60>
 801310e:	a101      	add	r1, pc, #4	; (adr r1, 8013114 <_scanf_float+0x98>)
 8013110:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8013114:	08013253 	.word	0x08013253
 8013118:	080130dd 	.word	0x080130dd
 801311c:	080130dd 	.word	0x080130dd
 8013120:	080130dd 	.word	0x080130dd
 8013124:	080132b3 	.word	0x080132b3
 8013128:	0801328b 	.word	0x0801328b
 801312c:	080130dd 	.word	0x080130dd
 8013130:	080130dd 	.word	0x080130dd
 8013134:	08013261 	.word	0x08013261
 8013138:	080130dd 	.word	0x080130dd
 801313c:	080130dd 	.word	0x080130dd
 8013140:	080130dd 	.word	0x080130dd
 8013144:	080130dd 	.word	0x080130dd
 8013148:	08013219 	.word	0x08013219
 801314c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8013150:	e7db      	b.n	801310a <_scanf_float+0x8e>
 8013152:	290e      	cmp	r1, #14
 8013154:	d8c2      	bhi.n	80130dc <_scanf_float+0x60>
 8013156:	a001      	add	r0, pc, #4	; (adr r0, 801315c <_scanf_float+0xe0>)
 8013158:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801315c:	0801320b 	.word	0x0801320b
 8013160:	080130dd 	.word	0x080130dd
 8013164:	0801320b 	.word	0x0801320b
 8013168:	0801329f 	.word	0x0801329f
 801316c:	080130dd 	.word	0x080130dd
 8013170:	080131b9 	.word	0x080131b9
 8013174:	080131f5 	.word	0x080131f5
 8013178:	080131f5 	.word	0x080131f5
 801317c:	080131f5 	.word	0x080131f5
 8013180:	080131f5 	.word	0x080131f5
 8013184:	080131f5 	.word	0x080131f5
 8013188:	080131f5 	.word	0x080131f5
 801318c:	080131f5 	.word	0x080131f5
 8013190:	080131f5 	.word	0x080131f5
 8013194:	080131f5 	.word	0x080131f5
 8013198:	2b6e      	cmp	r3, #110	; 0x6e
 801319a:	d809      	bhi.n	80131b0 <_scanf_float+0x134>
 801319c:	2b60      	cmp	r3, #96	; 0x60
 801319e:	d8b2      	bhi.n	8013106 <_scanf_float+0x8a>
 80131a0:	2b54      	cmp	r3, #84	; 0x54
 80131a2:	d077      	beq.n	8013294 <_scanf_float+0x218>
 80131a4:	2b59      	cmp	r3, #89	; 0x59
 80131a6:	d199      	bne.n	80130dc <_scanf_float+0x60>
 80131a8:	2d07      	cmp	r5, #7
 80131aa:	d197      	bne.n	80130dc <_scanf_float+0x60>
 80131ac:	2508      	movs	r5, #8
 80131ae:	e029      	b.n	8013204 <_scanf_float+0x188>
 80131b0:	2b74      	cmp	r3, #116	; 0x74
 80131b2:	d06f      	beq.n	8013294 <_scanf_float+0x218>
 80131b4:	2b79      	cmp	r3, #121	; 0x79
 80131b6:	e7f6      	b.n	80131a6 <_scanf_float+0x12a>
 80131b8:	6821      	ldr	r1, [r4, #0]
 80131ba:	05c8      	lsls	r0, r1, #23
 80131bc:	d51a      	bpl.n	80131f4 <_scanf_float+0x178>
 80131be:	9b02      	ldr	r3, [sp, #8]
 80131c0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80131c4:	6021      	str	r1, [r4, #0]
 80131c6:	f109 0901 	add.w	r9, r9, #1
 80131ca:	b11b      	cbz	r3, 80131d4 <_scanf_float+0x158>
 80131cc:	3b01      	subs	r3, #1
 80131ce:	3201      	adds	r2, #1
 80131d0:	9302      	str	r3, [sp, #8]
 80131d2:	60a2      	str	r2, [r4, #8]
 80131d4:	68a3      	ldr	r3, [r4, #8]
 80131d6:	3b01      	subs	r3, #1
 80131d8:	60a3      	str	r3, [r4, #8]
 80131da:	6923      	ldr	r3, [r4, #16]
 80131dc:	3301      	adds	r3, #1
 80131de:	6123      	str	r3, [r4, #16]
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	3b01      	subs	r3, #1
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	607b      	str	r3, [r7, #4]
 80131e8:	f340 8084 	ble.w	80132f4 <_scanf_float+0x278>
 80131ec:	683b      	ldr	r3, [r7, #0]
 80131ee:	3301      	adds	r3, #1
 80131f0:	603b      	str	r3, [r7, #0]
 80131f2:	e766      	b.n	80130c2 <_scanf_float+0x46>
 80131f4:	eb1a 0f05 	cmn.w	sl, r5
 80131f8:	f47f af70 	bne.w	80130dc <_scanf_float+0x60>
 80131fc:	6822      	ldr	r2, [r4, #0]
 80131fe:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8013202:	6022      	str	r2, [r4, #0]
 8013204:	f806 3b01 	strb.w	r3, [r6], #1
 8013208:	e7e4      	b.n	80131d4 <_scanf_float+0x158>
 801320a:	6822      	ldr	r2, [r4, #0]
 801320c:	0610      	lsls	r0, r2, #24
 801320e:	f57f af65 	bpl.w	80130dc <_scanf_float+0x60>
 8013212:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013216:	e7f4      	b.n	8013202 <_scanf_float+0x186>
 8013218:	f1ba 0f00 	cmp.w	sl, #0
 801321c:	d10e      	bne.n	801323c <_scanf_float+0x1c0>
 801321e:	f1b9 0f00 	cmp.w	r9, #0
 8013222:	d10e      	bne.n	8013242 <_scanf_float+0x1c6>
 8013224:	6822      	ldr	r2, [r4, #0]
 8013226:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801322a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801322e:	d108      	bne.n	8013242 <_scanf_float+0x1c6>
 8013230:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013234:	6022      	str	r2, [r4, #0]
 8013236:	f04f 0a01 	mov.w	sl, #1
 801323a:	e7e3      	b.n	8013204 <_scanf_float+0x188>
 801323c:	f1ba 0f02 	cmp.w	sl, #2
 8013240:	d055      	beq.n	80132ee <_scanf_float+0x272>
 8013242:	2d01      	cmp	r5, #1
 8013244:	d002      	beq.n	801324c <_scanf_float+0x1d0>
 8013246:	2d04      	cmp	r5, #4
 8013248:	f47f af48 	bne.w	80130dc <_scanf_float+0x60>
 801324c:	3501      	adds	r5, #1
 801324e:	b2ed      	uxtb	r5, r5
 8013250:	e7d8      	b.n	8013204 <_scanf_float+0x188>
 8013252:	f1ba 0f01 	cmp.w	sl, #1
 8013256:	f47f af41 	bne.w	80130dc <_scanf_float+0x60>
 801325a:	f04f 0a02 	mov.w	sl, #2
 801325e:	e7d1      	b.n	8013204 <_scanf_float+0x188>
 8013260:	b97d      	cbnz	r5, 8013282 <_scanf_float+0x206>
 8013262:	f1b9 0f00 	cmp.w	r9, #0
 8013266:	f47f af3c 	bne.w	80130e2 <_scanf_float+0x66>
 801326a:	6822      	ldr	r2, [r4, #0]
 801326c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8013270:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8013274:	f47f af39 	bne.w	80130ea <_scanf_float+0x6e>
 8013278:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801327c:	6022      	str	r2, [r4, #0]
 801327e:	2501      	movs	r5, #1
 8013280:	e7c0      	b.n	8013204 <_scanf_float+0x188>
 8013282:	2d03      	cmp	r5, #3
 8013284:	d0e2      	beq.n	801324c <_scanf_float+0x1d0>
 8013286:	2d05      	cmp	r5, #5
 8013288:	e7de      	b.n	8013248 <_scanf_float+0x1cc>
 801328a:	2d02      	cmp	r5, #2
 801328c:	f47f af26 	bne.w	80130dc <_scanf_float+0x60>
 8013290:	2503      	movs	r5, #3
 8013292:	e7b7      	b.n	8013204 <_scanf_float+0x188>
 8013294:	2d06      	cmp	r5, #6
 8013296:	f47f af21 	bne.w	80130dc <_scanf_float+0x60>
 801329a:	2507      	movs	r5, #7
 801329c:	e7b2      	b.n	8013204 <_scanf_float+0x188>
 801329e:	6822      	ldr	r2, [r4, #0]
 80132a0:	0591      	lsls	r1, r2, #22
 80132a2:	f57f af1b 	bpl.w	80130dc <_scanf_float+0x60>
 80132a6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80132aa:	6022      	str	r2, [r4, #0]
 80132ac:	f8cd 9004 	str.w	r9, [sp, #4]
 80132b0:	e7a8      	b.n	8013204 <_scanf_float+0x188>
 80132b2:	6822      	ldr	r2, [r4, #0]
 80132b4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80132b8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80132bc:	d006      	beq.n	80132cc <_scanf_float+0x250>
 80132be:	0550      	lsls	r0, r2, #21
 80132c0:	f57f af0c 	bpl.w	80130dc <_scanf_float+0x60>
 80132c4:	f1b9 0f00 	cmp.w	r9, #0
 80132c8:	f43f af0f 	beq.w	80130ea <_scanf_float+0x6e>
 80132cc:	0591      	lsls	r1, r2, #22
 80132ce:	bf58      	it	pl
 80132d0:	9901      	ldrpl	r1, [sp, #4]
 80132d2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80132d6:	bf58      	it	pl
 80132d8:	eba9 0101 	subpl.w	r1, r9, r1
 80132dc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80132e0:	bf58      	it	pl
 80132e2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80132e6:	6022      	str	r2, [r4, #0]
 80132e8:	f04f 0900 	mov.w	r9, #0
 80132ec:	e78a      	b.n	8013204 <_scanf_float+0x188>
 80132ee:	f04f 0a03 	mov.w	sl, #3
 80132f2:	e787      	b.n	8013204 <_scanf_float+0x188>
 80132f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80132f8:	4639      	mov	r1, r7
 80132fa:	4640      	mov	r0, r8
 80132fc:	4798      	blx	r3
 80132fe:	2800      	cmp	r0, #0
 8013300:	f43f aedf 	beq.w	80130c2 <_scanf_float+0x46>
 8013304:	e6ea      	b.n	80130dc <_scanf_float+0x60>
 8013306:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801330a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801330e:	463a      	mov	r2, r7
 8013310:	4640      	mov	r0, r8
 8013312:	4798      	blx	r3
 8013314:	6923      	ldr	r3, [r4, #16]
 8013316:	3b01      	subs	r3, #1
 8013318:	6123      	str	r3, [r4, #16]
 801331a:	e6ec      	b.n	80130f6 <_scanf_float+0x7a>
 801331c:	1e6b      	subs	r3, r5, #1
 801331e:	2b06      	cmp	r3, #6
 8013320:	d825      	bhi.n	801336e <_scanf_float+0x2f2>
 8013322:	2d02      	cmp	r5, #2
 8013324:	d836      	bhi.n	8013394 <_scanf_float+0x318>
 8013326:	455e      	cmp	r6, fp
 8013328:	f67f aee8 	bls.w	80130fc <_scanf_float+0x80>
 801332c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013330:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013334:	463a      	mov	r2, r7
 8013336:	4640      	mov	r0, r8
 8013338:	4798      	blx	r3
 801333a:	6923      	ldr	r3, [r4, #16]
 801333c:	3b01      	subs	r3, #1
 801333e:	6123      	str	r3, [r4, #16]
 8013340:	e7f1      	b.n	8013326 <_scanf_float+0x2aa>
 8013342:	9802      	ldr	r0, [sp, #8]
 8013344:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013348:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801334c:	9002      	str	r0, [sp, #8]
 801334e:	463a      	mov	r2, r7
 8013350:	4640      	mov	r0, r8
 8013352:	4798      	blx	r3
 8013354:	6923      	ldr	r3, [r4, #16]
 8013356:	3b01      	subs	r3, #1
 8013358:	6123      	str	r3, [r4, #16]
 801335a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801335e:	fa5f fa8a 	uxtb.w	sl, sl
 8013362:	f1ba 0f02 	cmp.w	sl, #2
 8013366:	d1ec      	bne.n	8013342 <_scanf_float+0x2c6>
 8013368:	3d03      	subs	r5, #3
 801336a:	b2ed      	uxtb	r5, r5
 801336c:	1b76      	subs	r6, r6, r5
 801336e:	6823      	ldr	r3, [r4, #0]
 8013370:	05da      	lsls	r2, r3, #23
 8013372:	d52f      	bpl.n	80133d4 <_scanf_float+0x358>
 8013374:	055b      	lsls	r3, r3, #21
 8013376:	d510      	bpl.n	801339a <_scanf_float+0x31e>
 8013378:	455e      	cmp	r6, fp
 801337a:	f67f aebf 	bls.w	80130fc <_scanf_float+0x80>
 801337e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013382:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013386:	463a      	mov	r2, r7
 8013388:	4640      	mov	r0, r8
 801338a:	4798      	blx	r3
 801338c:	6923      	ldr	r3, [r4, #16]
 801338e:	3b01      	subs	r3, #1
 8013390:	6123      	str	r3, [r4, #16]
 8013392:	e7f1      	b.n	8013378 <_scanf_float+0x2fc>
 8013394:	46aa      	mov	sl, r5
 8013396:	9602      	str	r6, [sp, #8]
 8013398:	e7df      	b.n	801335a <_scanf_float+0x2de>
 801339a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801339e:	6923      	ldr	r3, [r4, #16]
 80133a0:	2965      	cmp	r1, #101	; 0x65
 80133a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80133a6:	f106 35ff 	add.w	r5, r6, #4294967295
 80133aa:	6123      	str	r3, [r4, #16]
 80133ac:	d00c      	beq.n	80133c8 <_scanf_float+0x34c>
 80133ae:	2945      	cmp	r1, #69	; 0x45
 80133b0:	d00a      	beq.n	80133c8 <_scanf_float+0x34c>
 80133b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80133b6:	463a      	mov	r2, r7
 80133b8:	4640      	mov	r0, r8
 80133ba:	4798      	blx	r3
 80133bc:	6923      	ldr	r3, [r4, #16]
 80133be:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80133c2:	3b01      	subs	r3, #1
 80133c4:	1eb5      	subs	r5, r6, #2
 80133c6:	6123      	str	r3, [r4, #16]
 80133c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80133cc:	463a      	mov	r2, r7
 80133ce:	4640      	mov	r0, r8
 80133d0:	4798      	blx	r3
 80133d2:	462e      	mov	r6, r5
 80133d4:	6825      	ldr	r5, [r4, #0]
 80133d6:	f015 0510 	ands.w	r5, r5, #16
 80133da:	d158      	bne.n	801348e <_scanf_float+0x412>
 80133dc:	7035      	strb	r5, [r6, #0]
 80133de:	6823      	ldr	r3, [r4, #0]
 80133e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80133e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80133e8:	d11c      	bne.n	8013424 <_scanf_float+0x3a8>
 80133ea:	9b01      	ldr	r3, [sp, #4]
 80133ec:	454b      	cmp	r3, r9
 80133ee:	eba3 0209 	sub.w	r2, r3, r9
 80133f2:	d124      	bne.n	801343e <_scanf_float+0x3c2>
 80133f4:	2200      	movs	r2, #0
 80133f6:	4659      	mov	r1, fp
 80133f8:	4640      	mov	r0, r8
 80133fa:	f000 ff97 	bl	801432c <_strtod_r>
 80133fe:	9b03      	ldr	r3, [sp, #12]
 8013400:	6821      	ldr	r1, [r4, #0]
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	f011 0f02 	tst.w	r1, #2
 8013408:	ec57 6b10 	vmov	r6, r7, d0
 801340c:	f103 0204 	add.w	r2, r3, #4
 8013410:	d020      	beq.n	8013454 <_scanf_float+0x3d8>
 8013412:	9903      	ldr	r1, [sp, #12]
 8013414:	600a      	str	r2, [r1, #0]
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	e9c3 6700 	strd	r6, r7, [r3]
 801341c:	68e3      	ldr	r3, [r4, #12]
 801341e:	3301      	adds	r3, #1
 8013420:	60e3      	str	r3, [r4, #12]
 8013422:	e66c      	b.n	80130fe <_scanf_float+0x82>
 8013424:	9b04      	ldr	r3, [sp, #16]
 8013426:	2b00      	cmp	r3, #0
 8013428:	d0e4      	beq.n	80133f4 <_scanf_float+0x378>
 801342a:	9905      	ldr	r1, [sp, #20]
 801342c:	230a      	movs	r3, #10
 801342e:	462a      	mov	r2, r5
 8013430:	3101      	adds	r1, #1
 8013432:	4640      	mov	r0, r8
 8013434:	f001 f804 	bl	8014440 <_strtol_r>
 8013438:	9b04      	ldr	r3, [sp, #16]
 801343a:	9e05      	ldr	r6, [sp, #20]
 801343c:	1ac2      	subs	r2, r0, r3
 801343e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8013442:	429e      	cmp	r6, r3
 8013444:	bf28      	it	cs
 8013446:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801344a:	4912      	ldr	r1, [pc, #72]	; (8013494 <_scanf_float+0x418>)
 801344c:	4630      	mov	r0, r6
 801344e:	f000 f8c9 	bl	80135e4 <siprintf>
 8013452:	e7cf      	b.n	80133f4 <_scanf_float+0x378>
 8013454:	f011 0f04 	tst.w	r1, #4
 8013458:	9903      	ldr	r1, [sp, #12]
 801345a:	600a      	str	r2, [r1, #0]
 801345c:	d1db      	bne.n	8013416 <_scanf_float+0x39a>
 801345e:	f8d3 8000 	ldr.w	r8, [r3]
 8013462:	ee10 2a10 	vmov	r2, s0
 8013466:	ee10 0a10 	vmov	r0, s0
 801346a:	463b      	mov	r3, r7
 801346c:	4639      	mov	r1, r7
 801346e:	f7ed fb6d 	bl	8000b4c <__aeabi_dcmpun>
 8013472:	b128      	cbz	r0, 8013480 <_scanf_float+0x404>
 8013474:	4808      	ldr	r0, [pc, #32]	; (8013498 <_scanf_float+0x41c>)
 8013476:	f000 f8af 	bl	80135d8 <nanf>
 801347a:	ed88 0a00 	vstr	s0, [r8]
 801347e:	e7cd      	b.n	801341c <_scanf_float+0x3a0>
 8013480:	4630      	mov	r0, r6
 8013482:	4639      	mov	r1, r7
 8013484:	f7ed fbc0 	bl	8000c08 <__aeabi_d2f>
 8013488:	f8c8 0000 	str.w	r0, [r8]
 801348c:	e7c6      	b.n	801341c <_scanf_float+0x3a0>
 801348e:	2500      	movs	r5, #0
 8013490:	e635      	b.n	80130fe <_scanf_float+0x82>
 8013492:	bf00      	nop
 8013494:	08017ec4 	.word	0x08017ec4
 8013498:	080181e0 	.word	0x080181e0

0801349c <iprintf>:
 801349c:	b40f      	push	{r0, r1, r2, r3}
 801349e:	4b0a      	ldr	r3, [pc, #40]	; (80134c8 <iprintf+0x2c>)
 80134a0:	b513      	push	{r0, r1, r4, lr}
 80134a2:	681c      	ldr	r4, [r3, #0]
 80134a4:	b124      	cbz	r4, 80134b0 <iprintf+0x14>
 80134a6:	69a3      	ldr	r3, [r4, #24]
 80134a8:	b913      	cbnz	r3, 80134b0 <iprintf+0x14>
 80134aa:	4620      	mov	r0, r4
 80134ac:	f7ff f846 	bl	801253c <__sinit>
 80134b0:	ab05      	add	r3, sp, #20
 80134b2:	9a04      	ldr	r2, [sp, #16]
 80134b4:	68a1      	ldr	r1, [r4, #8]
 80134b6:	9301      	str	r3, [sp, #4]
 80134b8:	4620      	mov	r0, r4
 80134ba:	f003 fad3 	bl	8016a64 <_vfiprintf_r>
 80134be:	b002      	add	sp, #8
 80134c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80134c4:	b004      	add	sp, #16
 80134c6:	4770      	bx	lr
 80134c8:	20000080 	.word	0x20000080

080134cc <_puts_r>:
 80134cc:	b570      	push	{r4, r5, r6, lr}
 80134ce:	460e      	mov	r6, r1
 80134d0:	4605      	mov	r5, r0
 80134d2:	b118      	cbz	r0, 80134dc <_puts_r+0x10>
 80134d4:	6983      	ldr	r3, [r0, #24]
 80134d6:	b90b      	cbnz	r3, 80134dc <_puts_r+0x10>
 80134d8:	f7ff f830 	bl	801253c <__sinit>
 80134dc:	69ab      	ldr	r3, [r5, #24]
 80134de:	68ac      	ldr	r4, [r5, #8]
 80134e0:	b913      	cbnz	r3, 80134e8 <_puts_r+0x1c>
 80134e2:	4628      	mov	r0, r5
 80134e4:	f7ff f82a 	bl	801253c <__sinit>
 80134e8:	4b2c      	ldr	r3, [pc, #176]	; (801359c <_puts_r+0xd0>)
 80134ea:	429c      	cmp	r4, r3
 80134ec:	d120      	bne.n	8013530 <_puts_r+0x64>
 80134ee:	686c      	ldr	r4, [r5, #4]
 80134f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80134f2:	07db      	lsls	r3, r3, #31
 80134f4:	d405      	bmi.n	8013502 <_puts_r+0x36>
 80134f6:	89a3      	ldrh	r3, [r4, #12]
 80134f8:	0598      	lsls	r0, r3, #22
 80134fa:	d402      	bmi.n	8013502 <_puts_r+0x36>
 80134fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80134fe:	f7ff f8e0 	bl	80126c2 <__retarget_lock_acquire_recursive>
 8013502:	89a3      	ldrh	r3, [r4, #12]
 8013504:	0719      	lsls	r1, r3, #28
 8013506:	d51d      	bpl.n	8013544 <_puts_r+0x78>
 8013508:	6923      	ldr	r3, [r4, #16]
 801350a:	b1db      	cbz	r3, 8013544 <_puts_r+0x78>
 801350c:	3e01      	subs	r6, #1
 801350e:	68a3      	ldr	r3, [r4, #8]
 8013510:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013514:	3b01      	subs	r3, #1
 8013516:	60a3      	str	r3, [r4, #8]
 8013518:	bb39      	cbnz	r1, 801356a <_puts_r+0x9e>
 801351a:	2b00      	cmp	r3, #0
 801351c:	da38      	bge.n	8013590 <_puts_r+0xc4>
 801351e:	4622      	mov	r2, r4
 8013520:	210a      	movs	r1, #10
 8013522:	4628      	mov	r0, r5
 8013524:	f000 ffd2 	bl	80144cc <__swbuf_r>
 8013528:	3001      	adds	r0, #1
 801352a:	d011      	beq.n	8013550 <_puts_r+0x84>
 801352c:	250a      	movs	r5, #10
 801352e:	e011      	b.n	8013554 <_puts_r+0x88>
 8013530:	4b1b      	ldr	r3, [pc, #108]	; (80135a0 <_puts_r+0xd4>)
 8013532:	429c      	cmp	r4, r3
 8013534:	d101      	bne.n	801353a <_puts_r+0x6e>
 8013536:	68ac      	ldr	r4, [r5, #8]
 8013538:	e7da      	b.n	80134f0 <_puts_r+0x24>
 801353a:	4b1a      	ldr	r3, [pc, #104]	; (80135a4 <_puts_r+0xd8>)
 801353c:	429c      	cmp	r4, r3
 801353e:	bf08      	it	eq
 8013540:	68ec      	ldreq	r4, [r5, #12]
 8013542:	e7d5      	b.n	80134f0 <_puts_r+0x24>
 8013544:	4621      	mov	r1, r4
 8013546:	4628      	mov	r0, r5
 8013548:	f001 f824 	bl	8014594 <__swsetup_r>
 801354c:	2800      	cmp	r0, #0
 801354e:	d0dd      	beq.n	801350c <_puts_r+0x40>
 8013550:	f04f 35ff 	mov.w	r5, #4294967295
 8013554:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013556:	07da      	lsls	r2, r3, #31
 8013558:	d405      	bmi.n	8013566 <_puts_r+0x9a>
 801355a:	89a3      	ldrh	r3, [r4, #12]
 801355c:	059b      	lsls	r3, r3, #22
 801355e:	d402      	bmi.n	8013566 <_puts_r+0x9a>
 8013560:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013562:	f7ff f8af 	bl	80126c4 <__retarget_lock_release_recursive>
 8013566:	4628      	mov	r0, r5
 8013568:	bd70      	pop	{r4, r5, r6, pc}
 801356a:	2b00      	cmp	r3, #0
 801356c:	da04      	bge.n	8013578 <_puts_r+0xac>
 801356e:	69a2      	ldr	r2, [r4, #24]
 8013570:	429a      	cmp	r2, r3
 8013572:	dc06      	bgt.n	8013582 <_puts_r+0xb6>
 8013574:	290a      	cmp	r1, #10
 8013576:	d004      	beq.n	8013582 <_puts_r+0xb6>
 8013578:	6823      	ldr	r3, [r4, #0]
 801357a:	1c5a      	adds	r2, r3, #1
 801357c:	6022      	str	r2, [r4, #0]
 801357e:	7019      	strb	r1, [r3, #0]
 8013580:	e7c5      	b.n	801350e <_puts_r+0x42>
 8013582:	4622      	mov	r2, r4
 8013584:	4628      	mov	r0, r5
 8013586:	f000 ffa1 	bl	80144cc <__swbuf_r>
 801358a:	3001      	adds	r0, #1
 801358c:	d1bf      	bne.n	801350e <_puts_r+0x42>
 801358e:	e7df      	b.n	8013550 <_puts_r+0x84>
 8013590:	6823      	ldr	r3, [r4, #0]
 8013592:	250a      	movs	r5, #10
 8013594:	1c5a      	adds	r2, r3, #1
 8013596:	6022      	str	r2, [r4, #0]
 8013598:	701d      	strb	r5, [r3, #0]
 801359a:	e7db      	b.n	8013554 <_puts_r+0x88>
 801359c:	08017e4c 	.word	0x08017e4c
 80135a0:	08017e6c 	.word	0x08017e6c
 80135a4:	08017e2c 	.word	0x08017e2c

080135a8 <puts>:
 80135a8:	4b02      	ldr	r3, [pc, #8]	; (80135b4 <puts+0xc>)
 80135aa:	4601      	mov	r1, r0
 80135ac:	6818      	ldr	r0, [r3, #0]
 80135ae:	f7ff bf8d 	b.w	80134cc <_puts_r>
 80135b2:	bf00      	nop
 80135b4:	20000080 	.word	0x20000080

080135b8 <_sbrk_r>:
 80135b8:	b538      	push	{r3, r4, r5, lr}
 80135ba:	4d06      	ldr	r5, [pc, #24]	; (80135d4 <_sbrk_r+0x1c>)
 80135bc:	2300      	movs	r3, #0
 80135be:	4604      	mov	r4, r0
 80135c0:	4608      	mov	r0, r1
 80135c2:	602b      	str	r3, [r5, #0]
 80135c4:	f003 fcbc 	bl	8016f40 <_sbrk>
 80135c8:	1c43      	adds	r3, r0, #1
 80135ca:	d102      	bne.n	80135d2 <_sbrk_r+0x1a>
 80135cc:	682b      	ldr	r3, [r5, #0]
 80135ce:	b103      	cbz	r3, 80135d2 <_sbrk_r+0x1a>
 80135d0:	6023      	str	r3, [r4, #0]
 80135d2:	bd38      	pop	{r3, r4, r5, pc}
 80135d4:	20006884 	.word	0x20006884

080135d8 <nanf>:
 80135d8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80135e0 <nanf+0x8>
 80135dc:	4770      	bx	lr
 80135de:	bf00      	nop
 80135e0:	7fc00000 	.word	0x7fc00000

080135e4 <siprintf>:
 80135e4:	b40e      	push	{r1, r2, r3}
 80135e6:	b500      	push	{lr}
 80135e8:	b09c      	sub	sp, #112	; 0x70
 80135ea:	ab1d      	add	r3, sp, #116	; 0x74
 80135ec:	9002      	str	r0, [sp, #8]
 80135ee:	9006      	str	r0, [sp, #24]
 80135f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80135f4:	4809      	ldr	r0, [pc, #36]	; (801361c <siprintf+0x38>)
 80135f6:	9107      	str	r1, [sp, #28]
 80135f8:	9104      	str	r1, [sp, #16]
 80135fa:	4909      	ldr	r1, [pc, #36]	; (8013620 <siprintf+0x3c>)
 80135fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8013600:	9105      	str	r1, [sp, #20]
 8013602:	6800      	ldr	r0, [r0, #0]
 8013604:	9301      	str	r3, [sp, #4]
 8013606:	a902      	add	r1, sp, #8
 8013608:	f003 f902 	bl	8016810 <_svfiprintf_r>
 801360c:	9b02      	ldr	r3, [sp, #8]
 801360e:	2200      	movs	r2, #0
 8013610:	701a      	strb	r2, [r3, #0]
 8013612:	b01c      	add	sp, #112	; 0x70
 8013614:	f85d eb04 	ldr.w	lr, [sp], #4
 8013618:	b003      	add	sp, #12
 801361a:	4770      	bx	lr
 801361c:	20000080 	.word	0x20000080
 8013620:	ffff0208 	.word	0xffff0208

08013624 <__sread>:
 8013624:	b510      	push	{r4, lr}
 8013626:	460c      	mov	r4, r1
 8013628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801362c:	f003 fb4a 	bl	8016cc4 <_read_r>
 8013630:	2800      	cmp	r0, #0
 8013632:	bfab      	itete	ge
 8013634:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013636:	89a3      	ldrhlt	r3, [r4, #12]
 8013638:	181b      	addge	r3, r3, r0
 801363a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801363e:	bfac      	ite	ge
 8013640:	6563      	strge	r3, [r4, #84]	; 0x54
 8013642:	81a3      	strhlt	r3, [r4, #12]
 8013644:	bd10      	pop	{r4, pc}

08013646 <__swrite>:
 8013646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801364a:	461f      	mov	r7, r3
 801364c:	898b      	ldrh	r3, [r1, #12]
 801364e:	05db      	lsls	r3, r3, #23
 8013650:	4605      	mov	r5, r0
 8013652:	460c      	mov	r4, r1
 8013654:	4616      	mov	r6, r2
 8013656:	d505      	bpl.n	8013664 <__swrite+0x1e>
 8013658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801365c:	2302      	movs	r3, #2
 801365e:	2200      	movs	r2, #0
 8013660:	f002 fac4 	bl	8015bec <_lseek_r>
 8013664:	89a3      	ldrh	r3, [r4, #12]
 8013666:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801366a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801366e:	81a3      	strh	r3, [r4, #12]
 8013670:	4632      	mov	r2, r6
 8013672:	463b      	mov	r3, r7
 8013674:	4628      	mov	r0, r5
 8013676:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801367a:	f000 bf79 	b.w	8014570 <_write_r>

0801367e <__sseek>:
 801367e:	b510      	push	{r4, lr}
 8013680:	460c      	mov	r4, r1
 8013682:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013686:	f002 fab1 	bl	8015bec <_lseek_r>
 801368a:	1c43      	adds	r3, r0, #1
 801368c:	89a3      	ldrh	r3, [r4, #12]
 801368e:	bf15      	itete	ne
 8013690:	6560      	strne	r0, [r4, #84]	; 0x54
 8013692:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013696:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801369a:	81a3      	strheq	r3, [r4, #12]
 801369c:	bf18      	it	ne
 801369e:	81a3      	strhne	r3, [r4, #12]
 80136a0:	bd10      	pop	{r4, pc}

080136a2 <__sclose>:
 80136a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136a6:	f000 bfe3 	b.w	8014670 <_close_r>

080136aa <strcpy>:
 80136aa:	4603      	mov	r3, r0
 80136ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 80136b0:	f803 2b01 	strb.w	r2, [r3], #1
 80136b4:	2a00      	cmp	r2, #0
 80136b6:	d1f9      	bne.n	80136ac <strcpy+0x2>
 80136b8:	4770      	bx	lr

080136ba <strncmp>:
 80136ba:	b510      	push	{r4, lr}
 80136bc:	b16a      	cbz	r2, 80136da <strncmp+0x20>
 80136be:	3901      	subs	r1, #1
 80136c0:	1884      	adds	r4, r0, r2
 80136c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80136c6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80136ca:	4293      	cmp	r3, r2
 80136cc:	d103      	bne.n	80136d6 <strncmp+0x1c>
 80136ce:	42a0      	cmp	r0, r4
 80136d0:	d001      	beq.n	80136d6 <strncmp+0x1c>
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d1f5      	bne.n	80136c2 <strncmp+0x8>
 80136d6:	1a98      	subs	r0, r3, r2
 80136d8:	bd10      	pop	{r4, pc}
 80136da:	4610      	mov	r0, r2
 80136dc:	e7fc      	b.n	80136d8 <strncmp+0x1e>

080136de <sulp>:
 80136de:	b570      	push	{r4, r5, r6, lr}
 80136e0:	4604      	mov	r4, r0
 80136e2:	460d      	mov	r5, r1
 80136e4:	ec45 4b10 	vmov	d0, r4, r5
 80136e8:	4616      	mov	r6, r2
 80136ea:	f002 fe87 	bl	80163fc <__ulp>
 80136ee:	ec51 0b10 	vmov	r0, r1, d0
 80136f2:	b17e      	cbz	r6, 8013714 <sulp+0x36>
 80136f4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80136f8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	dd09      	ble.n	8013714 <sulp+0x36>
 8013700:	051b      	lsls	r3, r3, #20
 8013702:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8013706:	2400      	movs	r4, #0
 8013708:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801370c:	4622      	mov	r2, r4
 801370e:	462b      	mov	r3, r5
 8013710:	f7ec ff82 	bl	8000618 <__aeabi_dmul>
 8013714:	bd70      	pop	{r4, r5, r6, pc}
	...

08013718 <_strtod_l>:
 8013718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801371c:	b0a3      	sub	sp, #140	; 0x8c
 801371e:	461f      	mov	r7, r3
 8013720:	2300      	movs	r3, #0
 8013722:	931e      	str	r3, [sp, #120]	; 0x78
 8013724:	4ba4      	ldr	r3, [pc, #656]	; (80139b8 <_strtod_l+0x2a0>)
 8013726:	9219      	str	r2, [sp, #100]	; 0x64
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	9307      	str	r3, [sp, #28]
 801372c:	4604      	mov	r4, r0
 801372e:	4618      	mov	r0, r3
 8013730:	4688      	mov	r8, r1
 8013732:	f7ec fd5d 	bl	80001f0 <strlen>
 8013736:	f04f 0a00 	mov.w	sl, #0
 801373a:	4605      	mov	r5, r0
 801373c:	f04f 0b00 	mov.w	fp, #0
 8013740:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8013744:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013746:	781a      	ldrb	r2, [r3, #0]
 8013748:	2a2b      	cmp	r2, #43	; 0x2b
 801374a:	d04c      	beq.n	80137e6 <_strtod_l+0xce>
 801374c:	d839      	bhi.n	80137c2 <_strtod_l+0xaa>
 801374e:	2a0d      	cmp	r2, #13
 8013750:	d832      	bhi.n	80137b8 <_strtod_l+0xa0>
 8013752:	2a08      	cmp	r2, #8
 8013754:	d832      	bhi.n	80137bc <_strtod_l+0xa4>
 8013756:	2a00      	cmp	r2, #0
 8013758:	d03c      	beq.n	80137d4 <_strtod_l+0xbc>
 801375a:	2300      	movs	r3, #0
 801375c:	930e      	str	r3, [sp, #56]	; 0x38
 801375e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8013760:	7833      	ldrb	r3, [r6, #0]
 8013762:	2b30      	cmp	r3, #48	; 0x30
 8013764:	f040 80b4 	bne.w	80138d0 <_strtod_l+0x1b8>
 8013768:	7873      	ldrb	r3, [r6, #1]
 801376a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801376e:	2b58      	cmp	r3, #88	; 0x58
 8013770:	d16c      	bne.n	801384c <_strtod_l+0x134>
 8013772:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013774:	9301      	str	r3, [sp, #4]
 8013776:	ab1e      	add	r3, sp, #120	; 0x78
 8013778:	9702      	str	r7, [sp, #8]
 801377a:	9300      	str	r3, [sp, #0]
 801377c:	4a8f      	ldr	r2, [pc, #572]	; (80139bc <_strtod_l+0x2a4>)
 801377e:	ab1f      	add	r3, sp, #124	; 0x7c
 8013780:	a91d      	add	r1, sp, #116	; 0x74
 8013782:	4620      	mov	r0, r4
 8013784:	f001 ff26 	bl	80155d4 <__gethex>
 8013788:	f010 0707 	ands.w	r7, r0, #7
 801378c:	4605      	mov	r5, r0
 801378e:	d005      	beq.n	801379c <_strtod_l+0x84>
 8013790:	2f06      	cmp	r7, #6
 8013792:	d12a      	bne.n	80137ea <_strtod_l+0xd2>
 8013794:	3601      	adds	r6, #1
 8013796:	2300      	movs	r3, #0
 8013798:	961d      	str	r6, [sp, #116]	; 0x74
 801379a:	930e      	str	r3, [sp, #56]	; 0x38
 801379c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801379e:	2b00      	cmp	r3, #0
 80137a0:	f040 8596 	bne.w	80142d0 <_strtod_l+0xbb8>
 80137a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80137a6:	b1db      	cbz	r3, 80137e0 <_strtod_l+0xc8>
 80137a8:	4652      	mov	r2, sl
 80137aa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80137ae:	ec43 2b10 	vmov	d0, r2, r3
 80137b2:	b023      	add	sp, #140	; 0x8c
 80137b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137b8:	2a20      	cmp	r2, #32
 80137ba:	d1ce      	bne.n	801375a <_strtod_l+0x42>
 80137bc:	3301      	adds	r3, #1
 80137be:	931d      	str	r3, [sp, #116]	; 0x74
 80137c0:	e7c0      	b.n	8013744 <_strtod_l+0x2c>
 80137c2:	2a2d      	cmp	r2, #45	; 0x2d
 80137c4:	d1c9      	bne.n	801375a <_strtod_l+0x42>
 80137c6:	2201      	movs	r2, #1
 80137c8:	920e      	str	r2, [sp, #56]	; 0x38
 80137ca:	1c5a      	adds	r2, r3, #1
 80137cc:	921d      	str	r2, [sp, #116]	; 0x74
 80137ce:	785b      	ldrb	r3, [r3, #1]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d1c4      	bne.n	801375e <_strtod_l+0x46>
 80137d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80137d6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80137da:	2b00      	cmp	r3, #0
 80137dc:	f040 8576 	bne.w	80142cc <_strtod_l+0xbb4>
 80137e0:	4652      	mov	r2, sl
 80137e2:	465b      	mov	r3, fp
 80137e4:	e7e3      	b.n	80137ae <_strtod_l+0x96>
 80137e6:	2200      	movs	r2, #0
 80137e8:	e7ee      	b.n	80137c8 <_strtod_l+0xb0>
 80137ea:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80137ec:	b13a      	cbz	r2, 80137fe <_strtod_l+0xe6>
 80137ee:	2135      	movs	r1, #53	; 0x35
 80137f0:	a820      	add	r0, sp, #128	; 0x80
 80137f2:	f002 ff0e 	bl	8016612 <__copybits>
 80137f6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80137f8:	4620      	mov	r0, r4
 80137fa:	f002 fad3 	bl	8015da4 <_Bfree>
 80137fe:	3f01      	subs	r7, #1
 8013800:	2f05      	cmp	r7, #5
 8013802:	d807      	bhi.n	8013814 <_strtod_l+0xfc>
 8013804:	e8df f007 	tbb	[pc, r7]
 8013808:	1d180b0e 	.word	0x1d180b0e
 801380c:	030e      	.short	0x030e
 801380e:	f04f 0b00 	mov.w	fp, #0
 8013812:	46da      	mov	sl, fp
 8013814:	0728      	lsls	r0, r5, #28
 8013816:	d5c1      	bpl.n	801379c <_strtod_l+0x84>
 8013818:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801381c:	e7be      	b.n	801379c <_strtod_l+0x84>
 801381e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8013822:	e7f7      	b.n	8013814 <_strtod_l+0xfc>
 8013824:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8013828:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801382a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801382e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013832:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8013836:	e7ed      	b.n	8013814 <_strtod_l+0xfc>
 8013838:	f8df b184 	ldr.w	fp, [pc, #388]	; 80139c0 <_strtod_l+0x2a8>
 801383c:	f04f 0a00 	mov.w	sl, #0
 8013840:	e7e8      	b.n	8013814 <_strtod_l+0xfc>
 8013842:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8013846:	f04f 3aff 	mov.w	sl, #4294967295
 801384a:	e7e3      	b.n	8013814 <_strtod_l+0xfc>
 801384c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801384e:	1c5a      	adds	r2, r3, #1
 8013850:	921d      	str	r2, [sp, #116]	; 0x74
 8013852:	785b      	ldrb	r3, [r3, #1]
 8013854:	2b30      	cmp	r3, #48	; 0x30
 8013856:	d0f9      	beq.n	801384c <_strtod_l+0x134>
 8013858:	2b00      	cmp	r3, #0
 801385a:	d09f      	beq.n	801379c <_strtod_l+0x84>
 801385c:	2301      	movs	r3, #1
 801385e:	f04f 0900 	mov.w	r9, #0
 8013862:	9304      	str	r3, [sp, #16]
 8013864:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013866:	930a      	str	r3, [sp, #40]	; 0x28
 8013868:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801386c:	464f      	mov	r7, r9
 801386e:	220a      	movs	r2, #10
 8013870:	981d      	ldr	r0, [sp, #116]	; 0x74
 8013872:	7806      	ldrb	r6, [r0, #0]
 8013874:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8013878:	b2d9      	uxtb	r1, r3
 801387a:	2909      	cmp	r1, #9
 801387c:	d92a      	bls.n	80138d4 <_strtod_l+0x1bc>
 801387e:	9907      	ldr	r1, [sp, #28]
 8013880:	462a      	mov	r2, r5
 8013882:	f7ff ff1a 	bl	80136ba <strncmp>
 8013886:	b398      	cbz	r0, 80138f0 <_strtod_l+0x1d8>
 8013888:	2000      	movs	r0, #0
 801388a:	4633      	mov	r3, r6
 801388c:	463d      	mov	r5, r7
 801388e:	9007      	str	r0, [sp, #28]
 8013890:	4602      	mov	r2, r0
 8013892:	2b65      	cmp	r3, #101	; 0x65
 8013894:	d001      	beq.n	801389a <_strtod_l+0x182>
 8013896:	2b45      	cmp	r3, #69	; 0x45
 8013898:	d118      	bne.n	80138cc <_strtod_l+0x1b4>
 801389a:	b91d      	cbnz	r5, 80138a4 <_strtod_l+0x18c>
 801389c:	9b04      	ldr	r3, [sp, #16]
 801389e:	4303      	orrs	r3, r0
 80138a0:	d098      	beq.n	80137d4 <_strtod_l+0xbc>
 80138a2:	2500      	movs	r5, #0
 80138a4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80138a8:	f108 0301 	add.w	r3, r8, #1
 80138ac:	931d      	str	r3, [sp, #116]	; 0x74
 80138ae:	f898 3001 	ldrb.w	r3, [r8, #1]
 80138b2:	2b2b      	cmp	r3, #43	; 0x2b
 80138b4:	d075      	beq.n	80139a2 <_strtod_l+0x28a>
 80138b6:	2b2d      	cmp	r3, #45	; 0x2d
 80138b8:	d07b      	beq.n	80139b2 <_strtod_l+0x29a>
 80138ba:	f04f 0c00 	mov.w	ip, #0
 80138be:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80138c2:	2909      	cmp	r1, #9
 80138c4:	f240 8082 	bls.w	80139cc <_strtod_l+0x2b4>
 80138c8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80138cc:	2600      	movs	r6, #0
 80138ce:	e09d      	b.n	8013a0c <_strtod_l+0x2f4>
 80138d0:	2300      	movs	r3, #0
 80138d2:	e7c4      	b.n	801385e <_strtod_l+0x146>
 80138d4:	2f08      	cmp	r7, #8
 80138d6:	bfd8      	it	le
 80138d8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80138da:	f100 0001 	add.w	r0, r0, #1
 80138de:	bfda      	itte	le
 80138e0:	fb02 3301 	mlale	r3, r2, r1, r3
 80138e4:	9309      	strle	r3, [sp, #36]	; 0x24
 80138e6:	fb02 3909 	mlagt	r9, r2, r9, r3
 80138ea:	3701      	adds	r7, #1
 80138ec:	901d      	str	r0, [sp, #116]	; 0x74
 80138ee:	e7bf      	b.n	8013870 <_strtod_l+0x158>
 80138f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80138f2:	195a      	adds	r2, r3, r5
 80138f4:	921d      	str	r2, [sp, #116]	; 0x74
 80138f6:	5d5b      	ldrb	r3, [r3, r5]
 80138f8:	2f00      	cmp	r7, #0
 80138fa:	d037      	beq.n	801396c <_strtod_l+0x254>
 80138fc:	9007      	str	r0, [sp, #28]
 80138fe:	463d      	mov	r5, r7
 8013900:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8013904:	2a09      	cmp	r2, #9
 8013906:	d912      	bls.n	801392e <_strtod_l+0x216>
 8013908:	2201      	movs	r2, #1
 801390a:	e7c2      	b.n	8013892 <_strtod_l+0x17a>
 801390c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801390e:	1c5a      	adds	r2, r3, #1
 8013910:	921d      	str	r2, [sp, #116]	; 0x74
 8013912:	785b      	ldrb	r3, [r3, #1]
 8013914:	3001      	adds	r0, #1
 8013916:	2b30      	cmp	r3, #48	; 0x30
 8013918:	d0f8      	beq.n	801390c <_strtod_l+0x1f4>
 801391a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801391e:	2a08      	cmp	r2, #8
 8013920:	f200 84db 	bhi.w	80142da <_strtod_l+0xbc2>
 8013924:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8013926:	9007      	str	r0, [sp, #28]
 8013928:	2000      	movs	r0, #0
 801392a:	920a      	str	r2, [sp, #40]	; 0x28
 801392c:	4605      	mov	r5, r0
 801392e:	3b30      	subs	r3, #48	; 0x30
 8013930:	f100 0201 	add.w	r2, r0, #1
 8013934:	d014      	beq.n	8013960 <_strtod_l+0x248>
 8013936:	9907      	ldr	r1, [sp, #28]
 8013938:	4411      	add	r1, r2
 801393a:	9107      	str	r1, [sp, #28]
 801393c:	462a      	mov	r2, r5
 801393e:	eb00 0e05 	add.w	lr, r0, r5
 8013942:	210a      	movs	r1, #10
 8013944:	4572      	cmp	r2, lr
 8013946:	d113      	bne.n	8013970 <_strtod_l+0x258>
 8013948:	182a      	adds	r2, r5, r0
 801394a:	2a08      	cmp	r2, #8
 801394c:	f105 0501 	add.w	r5, r5, #1
 8013950:	4405      	add	r5, r0
 8013952:	dc1c      	bgt.n	801398e <_strtod_l+0x276>
 8013954:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013956:	220a      	movs	r2, #10
 8013958:	fb02 3301 	mla	r3, r2, r1, r3
 801395c:	9309      	str	r3, [sp, #36]	; 0x24
 801395e:	2200      	movs	r2, #0
 8013960:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013962:	1c59      	adds	r1, r3, #1
 8013964:	911d      	str	r1, [sp, #116]	; 0x74
 8013966:	785b      	ldrb	r3, [r3, #1]
 8013968:	4610      	mov	r0, r2
 801396a:	e7c9      	b.n	8013900 <_strtod_l+0x1e8>
 801396c:	4638      	mov	r0, r7
 801396e:	e7d2      	b.n	8013916 <_strtod_l+0x1fe>
 8013970:	2a08      	cmp	r2, #8
 8013972:	dc04      	bgt.n	801397e <_strtod_l+0x266>
 8013974:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8013976:	434e      	muls	r6, r1
 8013978:	9609      	str	r6, [sp, #36]	; 0x24
 801397a:	3201      	adds	r2, #1
 801397c:	e7e2      	b.n	8013944 <_strtod_l+0x22c>
 801397e:	f102 0c01 	add.w	ip, r2, #1
 8013982:	f1bc 0f10 	cmp.w	ip, #16
 8013986:	bfd8      	it	le
 8013988:	fb01 f909 	mulle.w	r9, r1, r9
 801398c:	e7f5      	b.n	801397a <_strtod_l+0x262>
 801398e:	2d10      	cmp	r5, #16
 8013990:	bfdc      	itt	le
 8013992:	220a      	movle	r2, #10
 8013994:	fb02 3909 	mlale	r9, r2, r9, r3
 8013998:	e7e1      	b.n	801395e <_strtod_l+0x246>
 801399a:	2300      	movs	r3, #0
 801399c:	9307      	str	r3, [sp, #28]
 801399e:	2201      	movs	r2, #1
 80139a0:	e77c      	b.n	801389c <_strtod_l+0x184>
 80139a2:	f04f 0c00 	mov.w	ip, #0
 80139a6:	f108 0302 	add.w	r3, r8, #2
 80139aa:	931d      	str	r3, [sp, #116]	; 0x74
 80139ac:	f898 3002 	ldrb.w	r3, [r8, #2]
 80139b0:	e785      	b.n	80138be <_strtod_l+0x1a6>
 80139b2:	f04f 0c01 	mov.w	ip, #1
 80139b6:	e7f6      	b.n	80139a6 <_strtod_l+0x28e>
 80139b8:	08018020 	.word	0x08018020
 80139bc:	08017ecc 	.word	0x08017ecc
 80139c0:	7ff00000 	.word	0x7ff00000
 80139c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80139c6:	1c59      	adds	r1, r3, #1
 80139c8:	911d      	str	r1, [sp, #116]	; 0x74
 80139ca:	785b      	ldrb	r3, [r3, #1]
 80139cc:	2b30      	cmp	r3, #48	; 0x30
 80139ce:	d0f9      	beq.n	80139c4 <_strtod_l+0x2ac>
 80139d0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80139d4:	2908      	cmp	r1, #8
 80139d6:	f63f af79 	bhi.w	80138cc <_strtod_l+0x1b4>
 80139da:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80139de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80139e0:	9308      	str	r3, [sp, #32]
 80139e2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80139e4:	1c59      	adds	r1, r3, #1
 80139e6:	911d      	str	r1, [sp, #116]	; 0x74
 80139e8:	785b      	ldrb	r3, [r3, #1]
 80139ea:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80139ee:	2e09      	cmp	r6, #9
 80139f0:	d937      	bls.n	8013a62 <_strtod_l+0x34a>
 80139f2:	9e08      	ldr	r6, [sp, #32]
 80139f4:	1b89      	subs	r1, r1, r6
 80139f6:	2908      	cmp	r1, #8
 80139f8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80139fc:	dc02      	bgt.n	8013a04 <_strtod_l+0x2ec>
 80139fe:	4576      	cmp	r6, lr
 8013a00:	bfa8      	it	ge
 8013a02:	4676      	movge	r6, lr
 8013a04:	f1bc 0f00 	cmp.w	ip, #0
 8013a08:	d000      	beq.n	8013a0c <_strtod_l+0x2f4>
 8013a0a:	4276      	negs	r6, r6
 8013a0c:	2d00      	cmp	r5, #0
 8013a0e:	d14f      	bne.n	8013ab0 <_strtod_l+0x398>
 8013a10:	9904      	ldr	r1, [sp, #16]
 8013a12:	4301      	orrs	r1, r0
 8013a14:	f47f aec2 	bne.w	801379c <_strtod_l+0x84>
 8013a18:	2a00      	cmp	r2, #0
 8013a1a:	f47f aedb 	bne.w	80137d4 <_strtod_l+0xbc>
 8013a1e:	2b69      	cmp	r3, #105	; 0x69
 8013a20:	d027      	beq.n	8013a72 <_strtod_l+0x35a>
 8013a22:	dc24      	bgt.n	8013a6e <_strtod_l+0x356>
 8013a24:	2b49      	cmp	r3, #73	; 0x49
 8013a26:	d024      	beq.n	8013a72 <_strtod_l+0x35a>
 8013a28:	2b4e      	cmp	r3, #78	; 0x4e
 8013a2a:	f47f aed3 	bne.w	80137d4 <_strtod_l+0xbc>
 8013a2e:	499e      	ldr	r1, [pc, #632]	; (8013ca8 <_strtod_l+0x590>)
 8013a30:	a81d      	add	r0, sp, #116	; 0x74
 8013a32:	f002 f827 	bl	8015a84 <__match>
 8013a36:	2800      	cmp	r0, #0
 8013a38:	f43f aecc 	beq.w	80137d4 <_strtod_l+0xbc>
 8013a3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013a3e:	781b      	ldrb	r3, [r3, #0]
 8013a40:	2b28      	cmp	r3, #40	; 0x28
 8013a42:	d12d      	bne.n	8013aa0 <_strtod_l+0x388>
 8013a44:	4999      	ldr	r1, [pc, #612]	; (8013cac <_strtod_l+0x594>)
 8013a46:	aa20      	add	r2, sp, #128	; 0x80
 8013a48:	a81d      	add	r0, sp, #116	; 0x74
 8013a4a:	f002 f82f 	bl	8015aac <__hexnan>
 8013a4e:	2805      	cmp	r0, #5
 8013a50:	d126      	bne.n	8013aa0 <_strtod_l+0x388>
 8013a52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013a54:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8013a58:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8013a5c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8013a60:	e69c      	b.n	801379c <_strtod_l+0x84>
 8013a62:	210a      	movs	r1, #10
 8013a64:	fb01 3e0e 	mla	lr, r1, lr, r3
 8013a68:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8013a6c:	e7b9      	b.n	80139e2 <_strtod_l+0x2ca>
 8013a6e:	2b6e      	cmp	r3, #110	; 0x6e
 8013a70:	e7db      	b.n	8013a2a <_strtod_l+0x312>
 8013a72:	498f      	ldr	r1, [pc, #572]	; (8013cb0 <_strtod_l+0x598>)
 8013a74:	a81d      	add	r0, sp, #116	; 0x74
 8013a76:	f002 f805 	bl	8015a84 <__match>
 8013a7a:	2800      	cmp	r0, #0
 8013a7c:	f43f aeaa 	beq.w	80137d4 <_strtod_l+0xbc>
 8013a80:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013a82:	498c      	ldr	r1, [pc, #560]	; (8013cb4 <_strtod_l+0x59c>)
 8013a84:	3b01      	subs	r3, #1
 8013a86:	a81d      	add	r0, sp, #116	; 0x74
 8013a88:	931d      	str	r3, [sp, #116]	; 0x74
 8013a8a:	f001 fffb 	bl	8015a84 <__match>
 8013a8e:	b910      	cbnz	r0, 8013a96 <_strtod_l+0x37e>
 8013a90:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013a92:	3301      	adds	r3, #1
 8013a94:	931d      	str	r3, [sp, #116]	; 0x74
 8013a96:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8013cc4 <_strtod_l+0x5ac>
 8013a9a:	f04f 0a00 	mov.w	sl, #0
 8013a9e:	e67d      	b.n	801379c <_strtod_l+0x84>
 8013aa0:	4885      	ldr	r0, [pc, #532]	; (8013cb8 <_strtod_l+0x5a0>)
 8013aa2:	f7fe fce5 	bl	8012470 <nan>
 8013aa6:	ed8d 0b04 	vstr	d0, [sp, #16]
 8013aaa:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8013aae:	e675      	b.n	801379c <_strtod_l+0x84>
 8013ab0:	9b07      	ldr	r3, [sp, #28]
 8013ab2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013ab4:	1af3      	subs	r3, r6, r3
 8013ab6:	2f00      	cmp	r7, #0
 8013ab8:	bf08      	it	eq
 8013aba:	462f      	moveq	r7, r5
 8013abc:	2d10      	cmp	r5, #16
 8013abe:	9308      	str	r3, [sp, #32]
 8013ac0:	46a8      	mov	r8, r5
 8013ac2:	bfa8      	it	ge
 8013ac4:	f04f 0810 	movge.w	r8, #16
 8013ac8:	f7ec fd2c 	bl	8000524 <__aeabi_ui2d>
 8013acc:	2d09      	cmp	r5, #9
 8013ace:	4682      	mov	sl, r0
 8013ad0:	468b      	mov	fp, r1
 8013ad2:	dd13      	ble.n	8013afc <_strtod_l+0x3e4>
 8013ad4:	4b79      	ldr	r3, [pc, #484]	; (8013cbc <_strtod_l+0x5a4>)
 8013ad6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8013ada:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8013ade:	f7ec fd9b 	bl	8000618 <__aeabi_dmul>
 8013ae2:	4682      	mov	sl, r0
 8013ae4:	4648      	mov	r0, r9
 8013ae6:	468b      	mov	fp, r1
 8013ae8:	f7ec fd1c 	bl	8000524 <__aeabi_ui2d>
 8013aec:	4602      	mov	r2, r0
 8013aee:	460b      	mov	r3, r1
 8013af0:	4650      	mov	r0, sl
 8013af2:	4659      	mov	r1, fp
 8013af4:	f7ec fbda 	bl	80002ac <__adddf3>
 8013af8:	4682      	mov	sl, r0
 8013afa:	468b      	mov	fp, r1
 8013afc:	2d0f      	cmp	r5, #15
 8013afe:	dc38      	bgt.n	8013b72 <_strtod_l+0x45a>
 8013b00:	9b08      	ldr	r3, [sp, #32]
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	f43f ae4a 	beq.w	801379c <_strtod_l+0x84>
 8013b08:	dd24      	ble.n	8013b54 <_strtod_l+0x43c>
 8013b0a:	2b16      	cmp	r3, #22
 8013b0c:	dc0b      	bgt.n	8013b26 <_strtod_l+0x40e>
 8013b0e:	4d6b      	ldr	r5, [pc, #428]	; (8013cbc <_strtod_l+0x5a4>)
 8013b10:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8013b14:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013b18:	4652      	mov	r2, sl
 8013b1a:	465b      	mov	r3, fp
 8013b1c:	f7ec fd7c 	bl	8000618 <__aeabi_dmul>
 8013b20:	4682      	mov	sl, r0
 8013b22:	468b      	mov	fp, r1
 8013b24:	e63a      	b.n	801379c <_strtod_l+0x84>
 8013b26:	9a08      	ldr	r2, [sp, #32]
 8013b28:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8013b2c:	4293      	cmp	r3, r2
 8013b2e:	db20      	blt.n	8013b72 <_strtod_l+0x45a>
 8013b30:	4c62      	ldr	r4, [pc, #392]	; (8013cbc <_strtod_l+0x5a4>)
 8013b32:	f1c5 050f 	rsb	r5, r5, #15
 8013b36:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8013b3a:	4652      	mov	r2, sl
 8013b3c:	465b      	mov	r3, fp
 8013b3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013b42:	f7ec fd69 	bl	8000618 <__aeabi_dmul>
 8013b46:	9b08      	ldr	r3, [sp, #32]
 8013b48:	1b5d      	subs	r5, r3, r5
 8013b4a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8013b4e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013b52:	e7e3      	b.n	8013b1c <_strtod_l+0x404>
 8013b54:	9b08      	ldr	r3, [sp, #32]
 8013b56:	3316      	adds	r3, #22
 8013b58:	db0b      	blt.n	8013b72 <_strtod_l+0x45a>
 8013b5a:	9b07      	ldr	r3, [sp, #28]
 8013b5c:	4a57      	ldr	r2, [pc, #348]	; (8013cbc <_strtod_l+0x5a4>)
 8013b5e:	1b9e      	subs	r6, r3, r6
 8013b60:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8013b64:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013b68:	4650      	mov	r0, sl
 8013b6a:	4659      	mov	r1, fp
 8013b6c:	f7ec fe7e 	bl	800086c <__aeabi_ddiv>
 8013b70:	e7d6      	b.n	8013b20 <_strtod_l+0x408>
 8013b72:	9b08      	ldr	r3, [sp, #32]
 8013b74:	eba5 0808 	sub.w	r8, r5, r8
 8013b78:	4498      	add	r8, r3
 8013b7a:	f1b8 0f00 	cmp.w	r8, #0
 8013b7e:	dd71      	ble.n	8013c64 <_strtod_l+0x54c>
 8013b80:	f018 030f 	ands.w	r3, r8, #15
 8013b84:	d00a      	beq.n	8013b9c <_strtod_l+0x484>
 8013b86:	494d      	ldr	r1, [pc, #308]	; (8013cbc <_strtod_l+0x5a4>)
 8013b88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013b8c:	4652      	mov	r2, sl
 8013b8e:	465b      	mov	r3, fp
 8013b90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013b94:	f7ec fd40 	bl	8000618 <__aeabi_dmul>
 8013b98:	4682      	mov	sl, r0
 8013b9a:	468b      	mov	fp, r1
 8013b9c:	f038 080f 	bics.w	r8, r8, #15
 8013ba0:	d04d      	beq.n	8013c3e <_strtod_l+0x526>
 8013ba2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8013ba6:	dd22      	ble.n	8013bee <_strtod_l+0x4d6>
 8013ba8:	2500      	movs	r5, #0
 8013baa:	462e      	mov	r6, r5
 8013bac:	9509      	str	r5, [sp, #36]	; 0x24
 8013bae:	9507      	str	r5, [sp, #28]
 8013bb0:	2322      	movs	r3, #34	; 0x22
 8013bb2:	f8df b110 	ldr.w	fp, [pc, #272]	; 8013cc4 <_strtod_l+0x5ac>
 8013bb6:	6023      	str	r3, [r4, #0]
 8013bb8:	f04f 0a00 	mov.w	sl, #0
 8013bbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	f43f adec 	beq.w	801379c <_strtod_l+0x84>
 8013bc4:	991e      	ldr	r1, [sp, #120]	; 0x78
 8013bc6:	4620      	mov	r0, r4
 8013bc8:	f002 f8ec 	bl	8015da4 <_Bfree>
 8013bcc:	9907      	ldr	r1, [sp, #28]
 8013bce:	4620      	mov	r0, r4
 8013bd0:	f002 f8e8 	bl	8015da4 <_Bfree>
 8013bd4:	4631      	mov	r1, r6
 8013bd6:	4620      	mov	r0, r4
 8013bd8:	f002 f8e4 	bl	8015da4 <_Bfree>
 8013bdc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013bde:	4620      	mov	r0, r4
 8013be0:	f002 f8e0 	bl	8015da4 <_Bfree>
 8013be4:	4629      	mov	r1, r5
 8013be6:	4620      	mov	r0, r4
 8013be8:	f002 f8dc 	bl	8015da4 <_Bfree>
 8013bec:	e5d6      	b.n	801379c <_strtod_l+0x84>
 8013bee:	2300      	movs	r3, #0
 8013bf0:	ea4f 1828 	mov.w	r8, r8, asr #4
 8013bf4:	4650      	mov	r0, sl
 8013bf6:	4659      	mov	r1, fp
 8013bf8:	4699      	mov	r9, r3
 8013bfa:	f1b8 0f01 	cmp.w	r8, #1
 8013bfe:	dc21      	bgt.n	8013c44 <_strtod_l+0x52c>
 8013c00:	b10b      	cbz	r3, 8013c06 <_strtod_l+0x4ee>
 8013c02:	4682      	mov	sl, r0
 8013c04:	468b      	mov	fp, r1
 8013c06:	4b2e      	ldr	r3, [pc, #184]	; (8013cc0 <_strtod_l+0x5a8>)
 8013c08:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8013c0c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8013c10:	4652      	mov	r2, sl
 8013c12:	465b      	mov	r3, fp
 8013c14:	e9d9 0100 	ldrd	r0, r1, [r9]
 8013c18:	f7ec fcfe 	bl	8000618 <__aeabi_dmul>
 8013c1c:	4b29      	ldr	r3, [pc, #164]	; (8013cc4 <_strtod_l+0x5ac>)
 8013c1e:	460a      	mov	r2, r1
 8013c20:	400b      	ands	r3, r1
 8013c22:	4929      	ldr	r1, [pc, #164]	; (8013cc8 <_strtod_l+0x5b0>)
 8013c24:	428b      	cmp	r3, r1
 8013c26:	4682      	mov	sl, r0
 8013c28:	d8be      	bhi.n	8013ba8 <_strtod_l+0x490>
 8013c2a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8013c2e:	428b      	cmp	r3, r1
 8013c30:	bf86      	itte	hi
 8013c32:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8013ccc <_strtod_l+0x5b4>
 8013c36:	f04f 3aff 	movhi.w	sl, #4294967295
 8013c3a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8013c3e:	2300      	movs	r3, #0
 8013c40:	9304      	str	r3, [sp, #16]
 8013c42:	e081      	b.n	8013d48 <_strtod_l+0x630>
 8013c44:	f018 0f01 	tst.w	r8, #1
 8013c48:	d007      	beq.n	8013c5a <_strtod_l+0x542>
 8013c4a:	4b1d      	ldr	r3, [pc, #116]	; (8013cc0 <_strtod_l+0x5a8>)
 8013c4c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8013c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c54:	f7ec fce0 	bl	8000618 <__aeabi_dmul>
 8013c58:	2301      	movs	r3, #1
 8013c5a:	f109 0901 	add.w	r9, r9, #1
 8013c5e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013c62:	e7ca      	b.n	8013bfa <_strtod_l+0x4e2>
 8013c64:	d0eb      	beq.n	8013c3e <_strtod_l+0x526>
 8013c66:	f1c8 0800 	rsb	r8, r8, #0
 8013c6a:	f018 020f 	ands.w	r2, r8, #15
 8013c6e:	d00a      	beq.n	8013c86 <_strtod_l+0x56e>
 8013c70:	4b12      	ldr	r3, [pc, #72]	; (8013cbc <_strtod_l+0x5a4>)
 8013c72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013c76:	4650      	mov	r0, sl
 8013c78:	4659      	mov	r1, fp
 8013c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c7e:	f7ec fdf5 	bl	800086c <__aeabi_ddiv>
 8013c82:	4682      	mov	sl, r0
 8013c84:	468b      	mov	fp, r1
 8013c86:	ea5f 1828 	movs.w	r8, r8, asr #4
 8013c8a:	d0d8      	beq.n	8013c3e <_strtod_l+0x526>
 8013c8c:	f1b8 0f1f 	cmp.w	r8, #31
 8013c90:	dd1e      	ble.n	8013cd0 <_strtod_l+0x5b8>
 8013c92:	2500      	movs	r5, #0
 8013c94:	462e      	mov	r6, r5
 8013c96:	9509      	str	r5, [sp, #36]	; 0x24
 8013c98:	9507      	str	r5, [sp, #28]
 8013c9a:	2322      	movs	r3, #34	; 0x22
 8013c9c:	f04f 0a00 	mov.w	sl, #0
 8013ca0:	f04f 0b00 	mov.w	fp, #0
 8013ca4:	6023      	str	r3, [r4, #0]
 8013ca6:	e789      	b.n	8013bbc <_strtod_l+0x4a4>
 8013ca8:	08017e9d 	.word	0x08017e9d
 8013cac:	08017ee0 	.word	0x08017ee0
 8013cb0:	08017e95 	.word	0x08017e95
 8013cb4:	08017f23 	.word	0x08017f23
 8013cb8:	080181e0 	.word	0x080181e0
 8013cbc:	080180c0 	.word	0x080180c0
 8013cc0:	08018098 	.word	0x08018098
 8013cc4:	7ff00000 	.word	0x7ff00000
 8013cc8:	7ca00000 	.word	0x7ca00000
 8013ccc:	7fefffff 	.word	0x7fefffff
 8013cd0:	f018 0310 	ands.w	r3, r8, #16
 8013cd4:	bf18      	it	ne
 8013cd6:	236a      	movne	r3, #106	; 0x6a
 8013cd8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8014090 <_strtod_l+0x978>
 8013cdc:	9304      	str	r3, [sp, #16]
 8013cde:	4650      	mov	r0, sl
 8013ce0:	4659      	mov	r1, fp
 8013ce2:	2300      	movs	r3, #0
 8013ce4:	f018 0f01 	tst.w	r8, #1
 8013ce8:	d004      	beq.n	8013cf4 <_strtod_l+0x5dc>
 8013cea:	e9d9 2300 	ldrd	r2, r3, [r9]
 8013cee:	f7ec fc93 	bl	8000618 <__aeabi_dmul>
 8013cf2:	2301      	movs	r3, #1
 8013cf4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8013cf8:	f109 0908 	add.w	r9, r9, #8
 8013cfc:	d1f2      	bne.n	8013ce4 <_strtod_l+0x5cc>
 8013cfe:	b10b      	cbz	r3, 8013d04 <_strtod_l+0x5ec>
 8013d00:	4682      	mov	sl, r0
 8013d02:	468b      	mov	fp, r1
 8013d04:	9b04      	ldr	r3, [sp, #16]
 8013d06:	b1bb      	cbz	r3, 8013d38 <_strtod_l+0x620>
 8013d08:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8013d0c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	4659      	mov	r1, fp
 8013d14:	dd10      	ble.n	8013d38 <_strtod_l+0x620>
 8013d16:	2b1f      	cmp	r3, #31
 8013d18:	f340 8128 	ble.w	8013f6c <_strtod_l+0x854>
 8013d1c:	2b34      	cmp	r3, #52	; 0x34
 8013d1e:	bfde      	ittt	le
 8013d20:	3b20      	suble	r3, #32
 8013d22:	f04f 32ff 	movle.w	r2, #4294967295
 8013d26:	fa02 f303 	lslle.w	r3, r2, r3
 8013d2a:	f04f 0a00 	mov.w	sl, #0
 8013d2e:	bfcc      	ite	gt
 8013d30:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8013d34:	ea03 0b01 	andle.w	fp, r3, r1
 8013d38:	2200      	movs	r2, #0
 8013d3a:	2300      	movs	r3, #0
 8013d3c:	4650      	mov	r0, sl
 8013d3e:	4659      	mov	r1, fp
 8013d40:	f7ec fed2 	bl	8000ae8 <__aeabi_dcmpeq>
 8013d44:	2800      	cmp	r0, #0
 8013d46:	d1a4      	bne.n	8013c92 <_strtod_l+0x57a>
 8013d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d4a:	9300      	str	r3, [sp, #0]
 8013d4c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013d4e:	462b      	mov	r3, r5
 8013d50:	463a      	mov	r2, r7
 8013d52:	4620      	mov	r0, r4
 8013d54:	f002 f892 	bl	8015e7c <__s2b>
 8013d58:	9009      	str	r0, [sp, #36]	; 0x24
 8013d5a:	2800      	cmp	r0, #0
 8013d5c:	f43f af24 	beq.w	8013ba8 <_strtod_l+0x490>
 8013d60:	9b07      	ldr	r3, [sp, #28]
 8013d62:	1b9e      	subs	r6, r3, r6
 8013d64:	9b08      	ldr	r3, [sp, #32]
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	bfb4      	ite	lt
 8013d6a:	4633      	movlt	r3, r6
 8013d6c:	2300      	movge	r3, #0
 8013d6e:	9310      	str	r3, [sp, #64]	; 0x40
 8013d70:	9b08      	ldr	r3, [sp, #32]
 8013d72:	2500      	movs	r5, #0
 8013d74:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013d78:	9318      	str	r3, [sp, #96]	; 0x60
 8013d7a:	462e      	mov	r6, r5
 8013d7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d7e:	4620      	mov	r0, r4
 8013d80:	6859      	ldr	r1, [r3, #4]
 8013d82:	f001 ffcf 	bl	8015d24 <_Balloc>
 8013d86:	9007      	str	r0, [sp, #28]
 8013d88:	2800      	cmp	r0, #0
 8013d8a:	f43f af11 	beq.w	8013bb0 <_strtod_l+0x498>
 8013d8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d90:	691a      	ldr	r2, [r3, #16]
 8013d92:	3202      	adds	r2, #2
 8013d94:	f103 010c 	add.w	r1, r3, #12
 8013d98:	0092      	lsls	r2, r2, #2
 8013d9a:	300c      	adds	r0, #12
 8013d9c:	f7fe fc93 	bl	80126c6 <memcpy>
 8013da0:	ec4b ab10 	vmov	d0, sl, fp
 8013da4:	aa20      	add	r2, sp, #128	; 0x80
 8013da6:	a91f      	add	r1, sp, #124	; 0x7c
 8013da8:	4620      	mov	r0, r4
 8013daa:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8013dae:	f002 fba1 	bl	80164f4 <__d2b>
 8013db2:	901e      	str	r0, [sp, #120]	; 0x78
 8013db4:	2800      	cmp	r0, #0
 8013db6:	f43f aefb 	beq.w	8013bb0 <_strtod_l+0x498>
 8013dba:	2101      	movs	r1, #1
 8013dbc:	4620      	mov	r0, r4
 8013dbe:	f002 f8f7 	bl	8015fb0 <__i2b>
 8013dc2:	4606      	mov	r6, r0
 8013dc4:	2800      	cmp	r0, #0
 8013dc6:	f43f aef3 	beq.w	8013bb0 <_strtod_l+0x498>
 8013dca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013dcc:	9904      	ldr	r1, [sp, #16]
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	bfab      	itete	ge
 8013dd2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8013dd4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8013dd6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8013dd8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8013ddc:	bfac      	ite	ge
 8013dde:	eb03 0902 	addge.w	r9, r3, r2
 8013de2:	1ad7      	sublt	r7, r2, r3
 8013de4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013de6:	eba3 0801 	sub.w	r8, r3, r1
 8013dea:	4490      	add	r8, r2
 8013dec:	4ba3      	ldr	r3, [pc, #652]	; (801407c <_strtod_l+0x964>)
 8013dee:	f108 38ff 	add.w	r8, r8, #4294967295
 8013df2:	4598      	cmp	r8, r3
 8013df4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013df8:	f280 80cc 	bge.w	8013f94 <_strtod_l+0x87c>
 8013dfc:	eba3 0308 	sub.w	r3, r3, r8
 8013e00:	2b1f      	cmp	r3, #31
 8013e02:	eba2 0203 	sub.w	r2, r2, r3
 8013e06:	f04f 0101 	mov.w	r1, #1
 8013e0a:	f300 80b6 	bgt.w	8013f7a <_strtod_l+0x862>
 8013e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8013e12:	9311      	str	r3, [sp, #68]	; 0x44
 8013e14:	2300      	movs	r3, #0
 8013e16:	930c      	str	r3, [sp, #48]	; 0x30
 8013e18:	eb09 0802 	add.w	r8, r9, r2
 8013e1c:	9b04      	ldr	r3, [sp, #16]
 8013e1e:	45c1      	cmp	r9, r8
 8013e20:	4417      	add	r7, r2
 8013e22:	441f      	add	r7, r3
 8013e24:	464b      	mov	r3, r9
 8013e26:	bfa8      	it	ge
 8013e28:	4643      	movge	r3, r8
 8013e2a:	42bb      	cmp	r3, r7
 8013e2c:	bfa8      	it	ge
 8013e2e:	463b      	movge	r3, r7
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	bfc2      	ittt	gt
 8013e34:	eba8 0803 	subgt.w	r8, r8, r3
 8013e38:	1aff      	subgt	r7, r7, r3
 8013e3a:	eba9 0903 	subgt.w	r9, r9, r3
 8013e3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	dd17      	ble.n	8013e74 <_strtod_l+0x75c>
 8013e44:	4631      	mov	r1, r6
 8013e46:	461a      	mov	r2, r3
 8013e48:	4620      	mov	r0, r4
 8013e4a:	f002 f96d 	bl	8016128 <__pow5mult>
 8013e4e:	4606      	mov	r6, r0
 8013e50:	2800      	cmp	r0, #0
 8013e52:	f43f aead 	beq.w	8013bb0 <_strtod_l+0x498>
 8013e56:	4601      	mov	r1, r0
 8013e58:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013e5a:	4620      	mov	r0, r4
 8013e5c:	f002 f8be 	bl	8015fdc <__multiply>
 8013e60:	900f      	str	r0, [sp, #60]	; 0x3c
 8013e62:	2800      	cmp	r0, #0
 8013e64:	f43f aea4 	beq.w	8013bb0 <_strtod_l+0x498>
 8013e68:	991e      	ldr	r1, [sp, #120]	; 0x78
 8013e6a:	4620      	mov	r0, r4
 8013e6c:	f001 ff9a 	bl	8015da4 <_Bfree>
 8013e70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013e72:	931e      	str	r3, [sp, #120]	; 0x78
 8013e74:	f1b8 0f00 	cmp.w	r8, #0
 8013e78:	f300 8091 	bgt.w	8013f9e <_strtod_l+0x886>
 8013e7c:	9b08      	ldr	r3, [sp, #32]
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	dd08      	ble.n	8013e94 <_strtod_l+0x77c>
 8013e82:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013e84:	9907      	ldr	r1, [sp, #28]
 8013e86:	4620      	mov	r0, r4
 8013e88:	f002 f94e 	bl	8016128 <__pow5mult>
 8013e8c:	9007      	str	r0, [sp, #28]
 8013e8e:	2800      	cmp	r0, #0
 8013e90:	f43f ae8e 	beq.w	8013bb0 <_strtod_l+0x498>
 8013e94:	2f00      	cmp	r7, #0
 8013e96:	dd08      	ble.n	8013eaa <_strtod_l+0x792>
 8013e98:	9907      	ldr	r1, [sp, #28]
 8013e9a:	463a      	mov	r2, r7
 8013e9c:	4620      	mov	r0, r4
 8013e9e:	f002 f99d 	bl	80161dc <__lshift>
 8013ea2:	9007      	str	r0, [sp, #28]
 8013ea4:	2800      	cmp	r0, #0
 8013ea6:	f43f ae83 	beq.w	8013bb0 <_strtod_l+0x498>
 8013eaa:	f1b9 0f00 	cmp.w	r9, #0
 8013eae:	dd08      	ble.n	8013ec2 <_strtod_l+0x7aa>
 8013eb0:	4631      	mov	r1, r6
 8013eb2:	464a      	mov	r2, r9
 8013eb4:	4620      	mov	r0, r4
 8013eb6:	f002 f991 	bl	80161dc <__lshift>
 8013eba:	4606      	mov	r6, r0
 8013ebc:	2800      	cmp	r0, #0
 8013ebe:	f43f ae77 	beq.w	8013bb0 <_strtod_l+0x498>
 8013ec2:	9a07      	ldr	r2, [sp, #28]
 8013ec4:	991e      	ldr	r1, [sp, #120]	; 0x78
 8013ec6:	4620      	mov	r0, r4
 8013ec8:	f002 fa10 	bl	80162ec <__mdiff>
 8013ecc:	4605      	mov	r5, r0
 8013ece:	2800      	cmp	r0, #0
 8013ed0:	f43f ae6e 	beq.w	8013bb0 <_strtod_l+0x498>
 8013ed4:	68c3      	ldr	r3, [r0, #12]
 8013ed6:	930f      	str	r3, [sp, #60]	; 0x3c
 8013ed8:	2300      	movs	r3, #0
 8013eda:	60c3      	str	r3, [r0, #12]
 8013edc:	4631      	mov	r1, r6
 8013ede:	f002 f9e9 	bl	80162b4 <__mcmp>
 8013ee2:	2800      	cmp	r0, #0
 8013ee4:	da65      	bge.n	8013fb2 <_strtod_l+0x89a>
 8013ee6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013ee8:	ea53 030a 	orrs.w	r3, r3, sl
 8013eec:	f040 8087 	bne.w	8013ffe <_strtod_l+0x8e6>
 8013ef0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	f040 8082 	bne.w	8013ffe <_strtod_l+0x8e6>
 8013efa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013efe:	0d1b      	lsrs	r3, r3, #20
 8013f00:	051b      	lsls	r3, r3, #20
 8013f02:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013f06:	d97a      	bls.n	8013ffe <_strtod_l+0x8e6>
 8013f08:	696b      	ldr	r3, [r5, #20]
 8013f0a:	b913      	cbnz	r3, 8013f12 <_strtod_l+0x7fa>
 8013f0c:	692b      	ldr	r3, [r5, #16]
 8013f0e:	2b01      	cmp	r3, #1
 8013f10:	dd75      	ble.n	8013ffe <_strtod_l+0x8e6>
 8013f12:	4629      	mov	r1, r5
 8013f14:	2201      	movs	r2, #1
 8013f16:	4620      	mov	r0, r4
 8013f18:	f002 f960 	bl	80161dc <__lshift>
 8013f1c:	4631      	mov	r1, r6
 8013f1e:	4605      	mov	r5, r0
 8013f20:	f002 f9c8 	bl	80162b4 <__mcmp>
 8013f24:	2800      	cmp	r0, #0
 8013f26:	dd6a      	ble.n	8013ffe <_strtod_l+0x8e6>
 8013f28:	9904      	ldr	r1, [sp, #16]
 8013f2a:	4a55      	ldr	r2, [pc, #340]	; (8014080 <_strtod_l+0x968>)
 8013f2c:	465b      	mov	r3, fp
 8013f2e:	2900      	cmp	r1, #0
 8013f30:	f000 8085 	beq.w	801403e <_strtod_l+0x926>
 8013f34:	ea02 010b 	and.w	r1, r2, fp
 8013f38:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013f3c:	dc7f      	bgt.n	801403e <_strtod_l+0x926>
 8013f3e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013f42:	f77f aeaa 	ble.w	8013c9a <_strtod_l+0x582>
 8013f46:	4a4f      	ldr	r2, [pc, #316]	; (8014084 <_strtod_l+0x96c>)
 8013f48:	2300      	movs	r3, #0
 8013f4a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8013f4e:	4650      	mov	r0, sl
 8013f50:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8013f54:	4659      	mov	r1, fp
 8013f56:	f7ec fb5f 	bl	8000618 <__aeabi_dmul>
 8013f5a:	460b      	mov	r3, r1
 8013f5c:	4303      	orrs	r3, r0
 8013f5e:	bf08      	it	eq
 8013f60:	2322      	moveq	r3, #34	; 0x22
 8013f62:	4682      	mov	sl, r0
 8013f64:	468b      	mov	fp, r1
 8013f66:	bf08      	it	eq
 8013f68:	6023      	streq	r3, [r4, #0]
 8013f6a:	e62b      	b.n	8013bc4 <_strtod_l+0x4ac>
 8013f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8013f70:	fa02 f303 	lsl.w	r3, r2, r3
 8013f74:	ea03 0a0a 	and.w	sl, r3, sl
 8013f78:	e6de      	b.n	8013d38 <_strtod_l+0x620>
 8013f7a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8013f7e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8013f82:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8013f86:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8013f8a:	fa01 f308 	lsl.w	r3, r1, r8
 8013f8e:	930c      	str	r3, [sp, #48]	; 0x30
 8013f90:	9111      	str	r1, [sp, #68]	; 0x44
 8013f92:	e741      	b.n	8013e18 <_strtod_l+0x700>
 8013f94:	2300      	movs	r3, #0
 8013f96:	930c      	str	r3, [sp, #48]	; 0x30
 8013f98:	2301      	movs	r3, #1
 8013f9a:	9311      	str	r3, [sp, #68]	; 0x44
 8013f9c:	e73c      	b.n	8013e18 <_strtod_l+0x700>
 8013f9e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8013fa0:	4642      	mov	r2, r8
 8013fa2:	4620      	mov	r0, r4
 8013fa4:	f002 f91a 	bl	80161dc <__lshift>
 8013fa8:	901e      	str	r0, [sp, #120]	; 0x78
 8013faa:	2800      	cmp	r0, #0
 8013fac:	f47f af66 	bne.w	8013e7c <_strtod_l+0x764>
 8013fb0:	e5fe      	b.n	8013bb0 <_strtod_l+0x498>
 8013fb2:	465f      	mov	r7, fp
 8013fb4:	d16e      	bne.n	8014094 <_strtod_l+0x97c>
 8013fb6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013fb8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013fbc:	b342      	cbz	r2, 8014010 <_strtod_l+0x8f8>
 8013fbe:	4a32      	ldr	r2, [pc, #200]	; (8014088 <_strtod_l+0x970>)
 8013fc0:	4293      	cmp	r3, r2
 8013fc2:	d128      	bne.n	8014016 <_strtod_l+0x8fe>
 8013fc4:	9b04      	ldr	r3, [sp, #16]
 8013fc6:	4650      	mov	r0, sl
 8013fc8:	b1eb      	cbz	r3, 8014006 <_strtod_l+0x8ee>
 8013fca:	4a2d      	ldr	r2, [pc, #180]	; (8014080 <_strtod_l+0x968>)
 8013fcc:	403a      	ands	r2, r7
 8013fce:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8013fd2:	f04f 31ff 	mov.w	r1, #4294967295
 8013fd6:	d819      	bhi.n	801400c <_strtod_l+0x8f4>
 8013fd8:	0d12      	lsrs	r2, r2, #20
 8013fda:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8013fde:	fa01 f303 	lsl.w	r3, r1, r3
 8013fe2:	4298      	cmp	r0, r3
 8013fe4:	d117      	bne.n	8014016 <_strtod_l+0x8fe>
 8013fe6:	4b29      	ldr	r3, [pc, #164]	; (801408c <_strtod_l+0x974>)
 8013fe8:	429f      	cmp	r7, r3
 8013fea:	d102      	bne.n	8013ff2 <_strtod_l+0x8da>
 8013fec:	3001      	adds	r0, #1
 8013fee:	f43f addf 	beq.w	8013bb0 <_strtod_l+0x498>
 8013ff2:	4b23      	ldr	r3, [pc, #140]	; (8014080 <_strtod_l+0x968>)
 8013ff4:	403b      	ands	r3, r7
 8013ff6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8013ffa:	f04f 0a00 	mov.w	sl, #0
 8013ffe:	9b04      	ldr	r3, [sp, #16]
 8014000:	2b00      	cmp	r3, #0
 8014002:	d1a0      	bne.n	8013f46 <_strtod_l+0x82e>
 8014004:	e5de      	b.n	8013bc4 <_strtod_l+0x4ac>
 8014006:	f04f 33ff 	mov.w	r3, #4294967295
 801400a:	e7ea      	b.n	8013fe2 <_strtod_l+0x8ca>
 801400c:	460b      	mov	r3, r1
 801400e:	e7e8      	b.n	8013fe2 <_strtod_l+0x8ca>
 8014010:	ea53 030a 	orrs.w	r3, r3, sl
 8014014:	d088      	beq.n	8013f28 <_strtod_l+0x810>
 8014016:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014018:	b1db      	cbz	r3, 8014052 <_strtod_l+0x93a>
 801401a:	423b      	tst	r3, r7
 801401c:	d0ef      	beq.n	8013ffe <_strtod_l+0x8e6>
 801401e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014020:	9a04      	ldr	r2, [sp, #16]
 8014022:	4650      	mov	r0, sl
 8014024:	4659      	mov	r1, fp
 8014026:	b1c3      	cbz	r3, 801405a <_strtod_l+0x942>
 8014028:	f7ff fb59 	bl	80136de <sulp>
 801402c:	4602      	mov	r2, r0
 801402e:	460b      	mov	r3, r1
 8014030:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014034:	f7ec f93a 	bl	80002ac <__adddf3>
 8014038:	4682      	mov	sl, r0
 801403a:	468b      	mov	fp, r1
 801403c:	e7df      	b.n	8013ffe <_strtod_l+0x8e6>
 801403e:	4013      	ands	r3, r2
 8014040:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8014044:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8014048:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801404c:	f04f 3aff 	mov.w	sl, #4294967295
 8014050:	e7d5      	b.n	8013ffe <_strtod_l+0x8e6>
 8014052:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014054:	ea13 0f0a 	tst.w	r3, sl
 8014058:	e7e0      	b.n	801401c <_strtod_l+0x904>
 801405a:	f7ff fb40 	bl	80136de <sulp>
 801405e:	4602      	mov	r2, r0
 8014060:	460b      	mov	r3, r1
 8014062:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014066:	f7ec f91f 	bl	80002a8 <__aeabi_dsub>
 801406a:	2200      	movs	r2, #0
 801406c:	2300      	movs	r3, #0
 801406e:	4682      	mov	sl, r0
 8014070:	468b      	mov	fp, r1
 8014072:	f7ec fd39 	bl	8000ae8 <__aeabi_dcmpeq>
 8014076:	2800      	cmp	r0, #0
 8014078:	d0c1      	beq.n	8013ffe <_strtod_l+0x8e6>
 801407a:	e60e      	b.n	8013c9a <_strtod_l+0x582>
 801407c:	fffffc02 	.word	0xfffffc02
 8014080:	7ff00000 	.word	0x7ff00000
 8014084:	39500000 	.word	0x39500000
 8014088:	000fffff 	.word	0x000fffff
 801408c:	7fefffff 	.word	0x7fefffff
 8014090:	08017ef8 	.word	0x08017ef8
 8014094:	4631      	mov	r1, r6
 8014096:	4628      	mov	r0, r5
 8014098:	f002 fa88 	bl	80165ac <__ratio>
 801409c:	ec59 8b10 	vmov	r8, r9, d0
 80140a0:	ee10 0a10 	vmov	r0, s0
 80140a4:	2200      	movs	r2, #0
 80140a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80140aa:	4649      	mov	r1, r9
 80140ac:	f7ec fd30 	bl	8000b10 <__aeabi_dcmple>
 80140b0:	2800      	cmp	r0, #0
 80140b2:	d07c      	beq.n	80141ae <_strtod_l+0xa96>
 80140b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d04c      	beq.n	8014154 <_strtod_l+0xa3c>
 80140ba:	4b95      	ldr	r3, [pc, #596]	; (8014310 <_strtod_l+0xbf8>)
 80140bc:	2200      	movs	r2, #0
 80140be:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80140c2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8014310 <_strtod_l+0xbf8>
 80140c6:	f04f 0800 	mov.w	r8, #0
 80140ca:	4b92      	ldr	r3, [pc, #584]	; (8014314 <_strtod_l+0xbfc>)
 80140cc:	403b      	ands	r3, r7
 80140ce:	9311      	str	r3, [sp, #68]	; 0x44
 80140d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80140d2:	4b91      	ldr	r3, [pc, #580]	; (8014318 <_strtod_l+0xc00>)
 80140d4:	429a      	cmp	r2, r3
 80140d6:	f040 80b2 	bne.w	801423e <_strtod_l+0xb26>
 80140da:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80140de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80140e2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80140e6:	ec4b ab10 	vmov	d0, sl, fp
 80140ea:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80140ee:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80140f2:	f002 f983 	bl	80163fc <__ulp>
 80140f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80140fa:	ec53 2b10 	vmov	r2, r3, d0
 80140fe:	f7ec fa8b 	bl	8000618 <__aeabi_dmul>
 8014102:	4652      	mov	r2, sl
 8014104:	465b      	mov	r3, fp
 8014106:	f7ec f8d1 	bl	80002ac <__adddf3>
 801410a:	460b      	mov	r3, r1
 801410c:	4981      	ldr	r1, [pc, #516]	; (8014314 <_strtod_l+0xbfc>)
 801410e:	4a83      	ldr	r2, [pc, #524]	; (801431c <_strtod_l+0xc04>)
 8014110:	4019      	ands	r1, r3
 8014112:	4291      	cmp	r1, r2
 8014114:	4682      	mov	sl, r0
 8014116:	d95e      	bls.n	80141d6 <_strtod_l+0xabe>
 8014118:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801411a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801411e:	4293      	cmp	r3, r2
 8014120:	d103      	bne.n	801412a <_strtod_l+0xa12>
 8014122:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014124:	3301      	adds	r3, #1
 8014126:	f43f ad43 	beq.w	8013bb0 <_strtod_l+0x498>
 801412a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8014328 <_strtod_l+0xc10>
 801412e:	f04f 3aff 	mov.w	sl, #4294967295
 8014132:	991e      	ldr	r1, [sp, #120]	; 0x78
 8014134:	4620      	mov	r0, r4
 8014136:	f001 fe35 	bl	8015da4 <_Bfree>
 801413a:	9907      	ldr	r1, [sp, #28]
 801413c:	4620      	mov	r0, r4
 801413e:	f001 fe31 	bl	8015da4 <_Bfree>
 8014142:	4631      	mov	r1, r6
 8014144:	4620      	mov	r0, r4
 8014146:	f001 fe2d 	bl	8015da4 <_Bfree>
 801414a:	4629      	mov	r1, r5
 801414c:	4620      	mov	r0, r4
 801414e:	f001 fe29 	bl	8015da4 <_Bfree>
 8014152:	e613      	b.n	8013d7c <_strtod_l+0x664>
 8014154:	f1ba 0f00 	cmp.w	sl, #0
 8014158:	d11b      	bne.n	8014192 <_strtod_l+0xa7a>
 801415a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801415e:	b9f3      	cbnz	r3, 801419e <_strtod_l+0xa86>
 8014160:	4b6b      	ldr	r3, [pc, #428]	; (8014310 <_strtod_l+0xbf8>)
 8014162:	2200      	movs	r2, #0
 8014164:	4640      	mov	r0, r8
 8014166:	4649      	mov	r1, r9
 8014168:	f7ec fcc8 	bl	8000afc <__aeabi_dcmplt>
 801416c:	b9d0      	cbnz	r0, 80141a4 <_strtod_l+0xa8c>
 801416e:	4640      	mov	r0, r8
 8014170:	4649      	mov	r1, r9
 8014172:	4b6b      	ldr	r3, [pc, #428]	; (8014320 <_strtod_l+0xc08>)
 8014174:	2200      	movs	r2, #0
 8014176:	f7ec fa4f 	bl	8000618 <__aeabi_dmul>
 801417a:	4680      	mov	r8, r0
 801417c:	4689      	mov	r9, r1
 801417e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014182:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8014186:	931b      	str	r3, [sp, #108]	; 0x6c
 8014188:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801418c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8014190:	e79b      	b.n	80140ca <_strtod_l+0x9b2>
 8014192:	f1ba 0f01 	cmp.w	sl, #1
 8014196:	d102      	bne.n	801419e <_strtod_l+0xa86>
 8014198:	2f00      	cmp	r7, #0
 801419a:	f43f ad7e 	beq.w	8013c9a <_strtod_l+0x582>
 801419e:	4b61      	ldr	r3, [pc, #388]	; (8014324 <_strtod_l+0xc0c>)
 80141a0:	2200      	movs	r2, #0
 80141a2:	e78c      	b.n	80140be <_strtod_l+0x9a6>
 80141a4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8014320 <_strtod_l+0xc08>
 80141a8:	f04f 0800 	mov.w	r8, #0
 80141ac:	e7e7      	b.n	801417e <_strtod_l+0xa66>
 80141ae:	4b5c      	ldr	r3, [pc, #368]	; (8014320 <_strtod_l+0xc08>)
 80141b0:	4640      	mov	r0, r8
 80141b2:	4649      	mov	r1, r9
 80141b4:	2200      	movs	r2, #0
 80141b6:	f7ec fa2f 	bl	8000618 <__aeabi_dmul>
 80141ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80141bc:	4680      	mov	r8, r0
 80141be:	4689      	mov	r9, r1
 80141c0:	b933      	cbnz	r3, 80141d0 <_strtod_l+0xab8>
 80141c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80141c6:	9012      	str	r0, [sp, #72]	; 0x48
 80141c8:	9313      	str	r3, [sp, #76]	; 0x4c
 80141ca:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80141ce:	e7dd      	b.n	801418c <_strtod_l+0xa74>
 80141d0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80141d4:	e7f9      	b.n	80141ca <_strtod_l+0xab2>
 80141d6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80141da:	9b04      	ldr	r3, [sp, #16]
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d1a8      	bne.n	8014132 <_strtod_l+0xa1a>
 80141e0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80141e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80141e6:	0d1b      	lsrs	r3, r3, #20
 80141e8:	051b      	lsls	r3, r3, #20
 80141ea:	429a      	cmp	r2, r3
 80141ec:	d1a1      	bne.n	8014132 <_strtod_l+0xa1a>
 80141ee:	4640      	mov	r0, r8
 80141f0:	4649      	mov	r1, r9
 80141f2:	f7ec fd71 	bl	8000cd8 <__aeabi_d2lz>
 80141f6:	f7ec f9e1 	bl	80005bc <__aeabi_l2d>
 80141fa:	4602      	mov	r2, r0
 80141fc:	460b      	mov	r3, r1
 80141fe:	4640      	mov	r0, r8
 8014200:	4649      	mov	r1, r9
 8014202:	f7ec f851 	bl	80002a8 <__aeabi_dsub>
 8014206:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014208:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801420c:	ea43 030a 	orr.w	r3, r3, sl
 8014210:	4313      	orrs	r3, r2
 8014212:	4680      	mov	r8, r0
 8014214:	4689      	mov	r9, r1
 8014216:	d053      	beq.n	80142c0 <_strtod_l+0xba8>
 8014218:	a335      	add	r3, pc, #212	; (adr r3, 80142f0 <_strtod_l+0xbd8>)
 801421a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801421e:	f7ec fc6d 	bl	8000afc <__aeabi_dcmplt>
 8014222:	2800      	cmp	r0, #0
 8014224:	f47f acce 	bne.w	8013bc4 <_strtod_l+0x4ac>
 8014228:	a333      	add	r3, pc, #204	; (adr r3, 80142f8 <_strtod_l+0xbe0>)
 801422a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801422e:	4640      	mov	r0, r8
 8014230:	4649      	mov	r1, r9
 8014232:	f7ec fc81 	bl	8000b38 <__aeabi_dcmpgt>
 8014236:	2800      	cmp	r0, #0
 8014238:	f43f af7b 	beq.w	8014132 <_strtod_l+0xa1a>
 801423c:	e4c2      	b.n	8013bc4 <_strtod_l+0x4ac>
 801423e:	9b04      	ldr	r3, [sp, #16]
 8014240:	b333      	cbz	r3, 8014290 <_strtod_l+0xb78>
 8014242:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014244:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014248:	d822      	bhi.n	8014290 <_strtod_l+0xb78>
 801424a:	a32d      	add	r3, pc, #180	; (adr r3, 8014300 <_strtod_l+0xbe8>)
 801424c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014250:	4640      	mov	r0, r8
 8014252:	4649      	mov	r1, r9
 8014254:	f7ec fc5c 	bl	8000b10 <__aeabi_dcmple>
 8014258:	b1a0      	cbz	r0, 8014284 <_strtod_l+0xb6c>
 801425a:	4649      	mov	r1, r9
 801425c:	4640      	mov	r0, r8
 801425e:	f7ec fcb3 	bl	8000bc8 <__aeabi_d2uiz>
 8014262:	2801      	cmp	r0, #1
 8014264:	bf38      	it	cc
 8014266:	2001      	movcc	r0, #1
 8014268:	f7ec f95c 	bl	8000524 <__aeabi_ui2d>
 801426c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801426e:	4680      	mov	r8, r0
 8014270:	4689      	mov	r9, r1
 8014272:	bb13      	cbnz	r3, 80142ba <_strtod_l+0xba2>
 8014274:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014278:	9014      	str	r0, [sp, #80]	; 0x50
 801427a:	9315      	str	r3, [sp, #84]	; 0x54
 801427c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8014280:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8014284:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014286:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014288:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801428c:	1a9b      	subs	r3, r3, r2
 801428e:	930d      	str	r3, [sp, #52]	; 0x34
 8014290:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014294:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8014298:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801429c:	f002 f8ae 	bl	80163fc <__ulp>
 80142a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80142a4:	ec53 2b10 	vmov	r2, r3, d0
 80142a8:	f7ec f9b6 	bl	8000618 <__aeabi_dmul>
 80142ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80142b0:	f7eb fffc 	bl	80002ac <__adddf3>
 80142b4:	4682      	mov	sl, r0
 80142b6:	468b      	mov	fp, r1
 80142b8:	e78f      	b.n	80141da <_strtod_l+0xac2>
 80142ba:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80142be:	e7dd      	b.n	801427c <_strtod_l+0xb64>
 80142c0:	a311      	add	r3, pc, #68	; (adr r3, 8014308 <_strtod_l+0xbf0>)
 80142c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142c6:	f7ec fc19 	bl	8000afc <__aeabi_dcmplt>
 80142ca:	e7b4      	b.n	8014236 <_strtod_l+0xb1e>
 80142cc:	2300      	movs	r3, #0
 80142ce:	930e      	str	r3, [sp, #56]	; 0x38
 80142d0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80142d2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80142d4:	6013      	str	r3, [r2, #0]
 80142d6:	f7ff ba65 	b.w	80137a4 <_strtod_l+0x8c>
 80142da:	2b65      	cmp	r3, #101	; 0x65
 80142dc:	f43f ab5d 	beq.w	801399a <_strtod_l+0x282>
 80142e0:	2b45      	cmp	r3, #69	; 0x45
 80142e2:	f43f ab5a 	beq.w	801399a <_strtod_l+0x282>
 80142e6:	2201      	movs	r2, #1
 80142e8:	f7ff bb92 	b.w	8013a10 <_strtod_l+0x2f8>
 80142ec:	f3af 8000 	nop.w
 80142f0:	94a03595 	.word	0x94a03595
 80142f4:	3fdfffff 	.word	0x3fdfffff
 80142f8:	35afe535 	.word	0x35afe535
 80142fc:	3fe00000 	.word	0x3fe00000
 8014300:	ffc00000 	.word	0xffc00000
 8014304:	41dfffff 	.word	0x41dfffff
 8014308:	94a03595 	.word	0x94a03595
 801430c:	3fcfffff 	.word	0x3fcfffff
 8014310:	3ff00000 	.word	0x3ff00000
 8014314:	7ff00000 	.word	0x7ff00000
 8014318:	7fe00000 	.word	0x7fe00000
 801431c:	7c9fffff 	.word	0x7c9fffff
 8014320:	3fe00000 	.word	0x3fe00000
 8014324:	bff00000 	.word	0xbff00000
 8014328:	7fefffff 	.word	0x7fefffff

0801432c <_strtod_r>:
 801432c:	4b01      	ldr	r3, [pc, #4]	; (8014334 <_strtod_r+0x8>)
 801432e:	f7ff b9f3 	b.w	8013718 <_strtod_l>
 8014332:	bf00      	nop
 8014334:	200000e8 	.word	0x200000e8

08014338 <_strtol_l.isra.0>:
 8014338:	2b01      	cmp	r3, #1
 801433a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801433e:	d001      	beq.n	8014344 <_strtol_l.isra.0+0xc>
 8014340:	2b24      	cmp	r3, #36	; 0x24
 8014342:	d906      	bls.n	8014352 <_strtol_l.isra.0+0x1a>
 8014344:	f7fe f89c 	bl	8012480 <__errno>
 8014348:	2316      	movs	r3, #22
 801434a:	6003      	str	r3, [r0, #0]
 801434c:	2000      	movs	r0, #0
 801434e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014352:	4f3a      	ldr	r7, [pc, #232]	; (801443c <_strtol_l.isra.0+0x104>)
 8014354:	468e      	mov	lr, r1
 8014356:	4676      	mov	r6, lr
 8014358:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801435c:	5de5      	ldrb	r5, [r4, r7]
 801435e:	f015 0508 	ands.w	r5, r5, #8
 8014362:	d1f8      	bne.n	8014356 <_strtol_l.isra.0+0x1e>
 8014364:	2c2d      	cmp	r4, #45	; 0x2d
 8014366:	d134      	bne.n	80143d2 <_strtol_l.isra.0+0x9a>
 8014368:	f89e 4000 	ldrb.w	r4, [lr]
 801436c:	f04f 0801 	mov.w	r8, #1
 8014370:	f106 0e02 	add.w	lr, r6, #2
 8014374:	2b00      	cmp	r3, #0
 8014376:	d05c      	beq.n	8014432 <_strtol_l.isra.0+0xfa>
 8014378:	2b10      	cmp	r3, #16
 801437a:	d10c      	bne.n	8014396 <_strtol_l.isra.0+0x5e>
 801437c:	2c30      	cmp	r4, #48	; 0x30
 801437e:	d10a      	bne.n	8014396 <_strtol_l.isra.0+0x5e>
 8014380:	f89e 4000 	ldrb.w	r4, [lr]
 8014384:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8014388:	2c58      	cmp	r4, #88	; 0x58
 801438a:	d14d      	bne.n	8014428 <_strtol_l.isra.0+0xf0>
 801438c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8014390:	2310      	movs	r3, #16
 8014392:	f10e 0e02 	add.w	lr, lr, #2
 8014396:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801439a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801439e:	2600      	movs	r6, #0
 80143a0:	fbbc f9f3 	udiv	r9, ip, r3
 80143a4:	4635      	mov	r5, r6
 80143a6:	fb03 ca19 	mls	sl, r3, r9, ip
 80143aa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80143ae:	2f09      	cmp	r7, #9
 80143b0:	d818      	bhi.n	80143e4 <_strtol_l.isra.0+0xac>
 80143b2:	463c      	mov	r4, r7
 80143b4:	42a3      	cmp	r3, r4
 80143b6:	dd24      	ble.n	8014402 <_strtol_l.isra.0+0xca>
 80143b8:	2e00      	cmp	r6, #0
 80143ba:	db1f      	blt.n	80143fc <_strtol_l.isra.0+0xc4>
 80143bc:	45a9      	cmp	r9, r5
 80143be:	d31d      	bcc.n	80143fc <_strtol_l.isra.0+0xc4>
 80143c0:	d101      	bne.n	80143c6 <_strtol_l.isra.0+0x8e>
 80143c2:	45a2      	cmp	sl, r4
 80143c4:	db1a      	blt.n	80143fc <_strtol_l.isra.0+0xc4>
 80143c6:	fb05 4503 	mla	r5, r5, r3, r4
 80143ca:	2601      	movs	r6, #1
 80143cc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80143d0:	e7eb      	b.n	80143aa <_strtol_l.isra.0+0x72>
 80143d2:	2c2b      	cmp	r4, #43	; 0x2b
 80143d4:	bf08      	it	eq
 80143d6:	f89e 4000 	ldrbeq.w	r4, [lr]
 80143da:	46a8      	mov	r8, r5
 80143dc:	bf08      	it	eq
 80143de:	f106 0e02 	addeq.w	lr, r6, #2
 80143e2:	e7c7      	b.n	8014374 <_strtol_l.isra.0+0x3c>
 80143e4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80143e8:	2f19      	cmp	r7, #25
 80143ea:	d801      	bhi.n	80143f0 <_strtol_l.isra.0+0xb8>
 80143ec:	3c37      	subs	r4, #55	; 0x37
 80143ee:	e7e1      	b.n	80143b4 <_strtol_l.isra.0+0x7c>
 80143f0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80143f4:	2f19      	cmp	r7, #25
 80143f6:	d804      	bhi.n	8014402 <_strtol_l.isra.0+0xca>
 80143f8:	3c57      	subs	r4, #87	; 0x57
 80143fa:	e7db      	b.n	80143b4 <_strtol_l.isra.0+0x7c>
 80143fc:	f04f 36ff 	mov.w	r6, #4294967295
 8014400:	e7e4      	b.n	80143cc <_strtol_l.isra.0+0x94>
 8014402:	2e00      	cmp	r6, #0
 8014404:	da05      	bge.n	8014412 <_strtol_l.isra.0+0xda>
 8014406:	2322      	movs	r3, #34	; 0x22
 8014408:	6003      	str	r3, [r0, #0]
 801440a:	4665      	mov	r5, ip
 801440c:	b942      	cbnz	r2, 8014420 <_strtol_l.isra.0+0xe8>
 801440e:	4628      	mov	r0, r5
 8014410:	e79d      	b.n	801434e <_strtol_l.isra.0+0x16>
 8014412:	f1b8 0f00 	cmp.w	r8, #0
 8014416:	d000      	beq.n	801441a <_strtol_l.isra.0+0xe2>
 8014418:	426d      	negs	r5, r5
 801441a:	2a00      	cmp	r2, #0
 801441c:	d0f7      	beq.n	801440e <_strtol_l.isra.0+0xd6>
 801441e:	b10e      	cbz	r6, 8014424 <_strtol_l.isra.0+0xec>
 8014420:	f10e 31ff 	add.w	r1, lr, #4294967295
 8014424:	6011      	str	r1, [r2, #0]
 8014426:	e7f2      	b.n	801440e <_strtol_l.isra.0+0xd6>
 8014428:	2430      	movs	r4, #48	; 0x30
 801442a:	2b00      	cmp	r3, #0
 801442c:	d1b3      	bne.n	8014396 <_strtol_l.isra.0+0x5e>
 801442e:	2308      	movs	r3, #8
 8014430:	e7b1      	b.n	8014396 <_strtol_l.isra.0+0x5e>
 8014432:	2c30      	cmp	r4, #48	; 0x30
 8014434:	d0a4      	beq.n	8014380 <_strtol_l.isra.0+0x48>
 8014436:	230a      	movs	r3, #10
 8014438:	e7ad      	b.n	8014396 <_strtol_l.isra.0+0x5e>
 801443a:	bf00      	nop
 801443c:	08017d29 	.word	0x08017d29

08014440 <_strtol_r>:
 8014440:	f7ff bf7a 	b.w	8014338 <_strtol_l.isra.0>

08014444 <strtol>:
 8014444:	4613      	mov	r3, r2
 8014446:	460a      	mov	r2, r1
 8014448:	4601      	mov	r1, r0
 801444a:	4802      	ldr	r0, [pc, #8]	; (8014454 <strtol+0x10>)
 801444c:	6800      	ldr	r0, [r0, #0]
 801444e:	f7ff bf73 	b.w	8014338 <_strtol_l.isra.0>
 8014452:	bf00      	nop
 8014454:	20000080 	.word	0x20000080

08014458 <_vsniprintf_r>:
 8014458:	b530      	push	{r4, r5, lr}
 801445a:	1e14      	subs	r4, r2, #0
 801445c:	4605      	mov	r5, r0
 801445e:	b09b      	sub	sp, #108	; 0x6c
 8014460:	4618      	mov	r0, r3
 8014462:	da05      	bge.n	8014470 <_vsniprintf_r+0x18>
 8014464:	238b      	movs	r3, #139	; 0x8b
 8014466:	602b      	str	r3, [r5, #0]
 8014468:	f04f 30ff 	mov.w	r0, #4294967295
 801446c:	b01b      	add	sp, #108	; 0x6c
 801446e:	bd30      	pop	{r4, r5, pc}
 8014470:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014474:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014478:	bf14      	ite	ne
 801447a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801447e:	4623      	moveq	r3, r4
 8014480:	9302      	str	r3, [sp, #8]
 8014482:	9305      	str	r3, [sp, #20]
 8014484:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014488:	9100      	str	r1, [sp, #0]
 801448a:	9104      	str	r1, [sp, #16]
 801448c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8014490:	4602      	mov	r2, r0
 8014492:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8014494:	4669      	mov	r1, sp
 8014496:	4628      	mov	r0, r5
 8014498:	f002 f9ba 	bl	8016810 <_svfiprintf_r>
 801449c:	1c43      	adds	r3, r0, #1
 801449e:	bfbc      	itt	lt
 80144a0:	238b      	movlt	r3, #139	; 0x8b
 80144a2:	602b      	strlt	r3, [r5, #0]
 80144a4:	2c00      	cmp	r4, #0
 80144a6:	d0e1      	beq.n	801446c <_vsniprintf_r+0x14>
 80144a8:	9b00      	ldr	r3, [sp, #0]
 80144aa:	2200      	movs	r2, #0
 80144ac:	701a      	strb	r2, [r3, #0]
 80144ae:	e7dd      	b.n	801446c <_vsniprintf_r+0x14>

080144b0 <vsniprintf>:
 80144b0:	b507      	push	{r0, r1, r2, lr}
 80144b2:	9300      	str	r3, [sp, #0]
 80144b4:	4613      	mov	r3, r2
 80144b6:	460a      	mov	r2, r1
 80144b8:	4601      	mov	r1, r0
 80144ba:	4803      	ldr	r0, [pc, #12]	; (80144c8 <vsniprintf+0x18>)
 80144bc:	6800      	ldr	r0, [r0, #0]
 80144be:	f7ff ffcb 	bl	8014458 <_vsniprintf_r>
 80144c2:	b003      	add	sp, #12
 80144c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80144c8:	20000080 	.word	0x20000080

080144cc <__swbuf_r>:
 80144cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144ce:	460e      	mov	r6, r1
 80144d0:	4614      	mov	r4, r2
 80144d2:	4605      	mov	r5, r0
 80144d4:	b118      	cbz	r0, 80144de <__swbuf_r+0x12>
 80144d6:	6983      	ldr	r3, [r0, #24]
 80144d8:	b90b      	cbnz	r3, 80144de <__swbuf_r+0x12>
 80144da:	f7fe f82f 	bl	801253c <__sinit>
 80144de:	4b21      	ldr	r3, [pc, #132]	; (8014564 <__swbuf_r+0x98>)
 80144e0:	429c      	cmp	r4, r3
 80144e2:	d12b      	bne.n	801453c <__swbuf_r+0x70>
 80144e4:	686c      	ldr	r4, [r5, #4]
 80144e6:	69a3      	ldr	r3, [r4, #24]
 80144e8:	60a3      	str	r3, [r4, #8]
 80144ea:	89a3      	ldrh	r3, [r4, #12]
 80144ec:	071a      	lsls	r2, r3, #28
 80144ee:	d52f      	bpl.n	8014550 <__swbuf_r+0x84>
 80144f0:	6923      	ldr	r3, [r4, #16]
 80144f2:	b36b      	cbz	r3, 8014550 <__swbuf_r+0x84>
 80144f4:	6923      	ldr	r3, [r4, #16]
 80144f6:	6820      	ldr	r0, [r4, #0]
 80144f8:	1ac0      	subs	r0, r0, r3
 80144fa:	6963      	ldr	r3, [r4, #20]
 80144fc:	b2f6      	uxtb	r6, r6
 80144fe:	4283      	cmp	r3, r0
 8014500:	4637      	mov	r7, r6
 8014502:	dc04      	bgt.n	801450e <__swbuf_r+0x42>
 8014504:	4621      	mov	r1, r4
 8014506:	4628      	mov	r0, r5
 8014508:	f000 ffc0 	bl	801548c <_fflush_r>
 801450c:	bb30      	cbnz	r0, 801455c <__swbuf_r+0x90>
 801450e:	68a3      	ldr	r3, [r4, #8]
 8014510:	3b01      	subs	r3, #1
 8014512:	60a3      	str	r3, [r4, #8]
 8014514:	6823      	ldr	r3, [r4, #0]
 8014516:	1c5a      	adds	r2, r3, #1
 8014518:	6022      	str	r2, [r4, #0]
 801451a:	701e      	strb	r6, [r3, #0]
 801451c:	6963      	ldr	r3, [r4, #20]
 801451e:	3001      	adds	r0, #1
 8014520:	4283      	cmp	r3, r0
 8014522:	d004      	beq.n	801452e <__swbuf_r+0x62>
 8014524:	89a3      	ldrh	r3, [r4, #12]
 8014526:	07db      	lsls	r3, r3, #31
 8014528:	d506      	bpl.n	8014538 <__swbuf_r+0x6c>
 801452a:	2e0a      	cmp	r6, #10
 801452c:	d104      	bne.n	8014538 <__swbuf_r+0x6c>
 801452e:	4621      	mov	r1, r4
 8014530:	4628      	mov	r0, r5
 8014532:	f000 ffab 	bl	801548c <_fflush_r>
 8014536:	b988      	cbnz	r0, 801455c <__swbuf_r+0x90>
 8014538:	4638      	mov	r0, r7
 801453a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801453c:	4b0a      	ldr	r3, [pc, #40]	; (8014568 <__swbuf_r+0x9c>)
 801453e:	429c      	cmp	r4, r3
 8014540:	d101      	bne.n	8014546 <__swbuf_r+0x7a>
 8014542:	68ac      	ldr	r4, [r5, #8]
 8014544:	e7cf      	b.n	80144e6 <__swbuf_r+0x1a>
 8014546:	4b09      	ldr	r3, [pc, #36]	; (801456c <__swbuf_r+0xa0>)
 8014548:	429c      	cmp	r4, r3
 801454a:	bf08      	it	eq
 801454c:	68ec      	ldreq	r4, [r5, #12]
 801454e:	e7ca      	b.n	80144e6 <__swbuf_r+0x1a>
 8014550:	4621      	mov	r1, r4
 8014552:	4628      	mov	r0, r5
 8014554:	f000 f81e 	bl	8014594 <__swsetup_r>
 8014558:	2800      	cmp	r0, #0
 801455a:	d0cb      	beq.n	80144f4 <__swbuf_r+0x28>
 801455c:	f04f 37ff 	mov.w	r7, #4294967295
 8014560:	e7ea      	b.n	8014538 <__swbuf_r+0x6c>
 8014562:	bf00      	nop
 8014564:	08017e4c 	.word	0x08017e4c
 8014568:	08017e6c 	.word	0x08017e6c
 801456c:	08017e2c 	.word	0x08017e2c

08014570 <_write_r>:
 8014570:	b538      	push	{r3, r4, r5, lr}
 8014572:	4d07      	ldr	r5, [pc, #28]	; (8014590 <_write_r+0x20>)
 8014574:	4604      	mov	r4, r0
 8014576:	4608      	mov	r0, r1
 8014578:	4611      	mov	r1, r2
 801457a:	2200      	movs	r2, #0
 801457c:	602a      	str	r2, [r5, #0]
 801457e:	461a      	mov	r2, r3
 8014580:	f002 fcec 	bl	8016f5c <_write>
 8014584:	1c43      	adds	r3, r0, #1
 8014586:	d102      	bne.n	801458e <_write_r+0x1e>
 8014588:	682b      	ldr	r3, [r5, #0]
 801458a:	b103      	cbz	r3, 801458e <_write_r+0x1e>
 801458c:	6023      	str	r3, [r4, #0]
 801458e:	bd38      	pop	{r3, r4, r5, pc}
 8014590:	20006884 	.word	0x20006884

08014594 <__swsetup_r>:
 8014594:	4b32      	ldr	r3, [pc, #200]	; (8014660 <__swsetup_r+0xcc>)
 8014596:	b570      	push	{r4, r5, r6, lr}
 8014598:	681d      	ldr	r5, [r3, #0]
 801459a:	4606      	mov	r6, r0
 801459c:	460c      	mov	r4, r1
 801459e:	b125      	cbz	r5, 80145aa <__swsetup_r+0x16>
 80145a0:	69ab      	ldr	r3, [r5, #24]
 80145a2:	b913      	cbnz	r3, 80145aa <__swsetup_r+0x16>
 80145a4:	4628      	mov	r0, r5
 80145a6:	f7fd ffc9 	bl	801253c <__sinit>
 80145aa:	4b2e      	ldr	r3, [pc, #184]	; (8014664 <__swsetup_r+0xd0>)
 80145ac:	429c      	cmp	r4, r3
 80145ae:	d10f      	bne.n	80145d0 <__swsetup_r+0x3c>
 80145b0:	686c      	ldr	r4, [r5, #4]
 80145b2:	89a3      	ldrh	r3, [r4, #12]
 80145b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80145b8:	0719      	lsls	r1, r3, #28
 80145ba:	d42c      	bmi.n	8014616 <__swsetup_r+0x82>
 80145bc:	06dd      	lsls	r5, r3, #27
 80145be:	d411      	bmi.n	80145e4 <__swsetup_r+0x50>
 80145c0:	2309      	movs	r3, #9
 80145c2:	6033      	str	r3, [r6, #0]
 80145c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80145c8:	81a3      	strh	r3, [r4, #12]
 80145ca:	f04f 30ff 	mov.w	r0, #4294967295
 80145ce:	e03e      	b.n	801464e <__swsetup_r+0xba>
 80145d0:	4b25      	ldr	r3, [pc, #148]	; (8014668 <__swsetup_r+0xd4>)
 80145d2:	429c      	cmp	r4, r3
 80145d4:	d101      	bne.n	80145da <__swsetup_r+0x46>
 80145d6:	68ac      	ldr	r4, [r5, #8]
 80145d8:	e7eb      	b.n	80145b2 <__swsetup_r+0x1e>
 80145da:	4b24      	ldr	r3, [pc, #144]	; (801466c <__swsetup_r+0xd8>)
 80145dc:	429c      	cmp	r4, r3
 80145de:	bf08      	it	eq
 80145e0:	68ec      	ldreq	r4, [r5, #12]
 80145e2:	e7e6      	b.n	80145b2 <__swsetup_r+0x1e>
 80145e4:	0758      	lsls	r0, r3, #29
 80145e6:	d512      	bpl.n	801460e <__swsetup_r+0x7a>
 80145e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80145ea:	b141      	cbz	r1, 80145fe <__swsetup_r+0x6a>
 80145ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80145f0:	4299      	cmp	r1, r3
 80145f2:	d002      	beq.n	80145fa <__swsetup_r+0x66>
 80145f4:	4630      	mov	r0, r6
 80145f6:	f002 f85f 	bl	80166b8 <_free_r>
 80145fa:	2300      	movs	r3, #0
 80145fc:	6363      	str	r3, [r4, #52]	; 0x34
 80145fe:	89a3      	ldrh	r3, [r4, #12]
 8014600:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014604:	81a3      	strh	r3, [r4, #12]
 8014606:	2300      	movs	r3, #0
 8014608:	6063      	str	r3, [r4, #4]
 801460a:	6923      	ldr	r3, [r4, #16]
 801460c:	6023      	str	r3, [r4, #0]
 801460e:	89a3      	ldrh	r3, [r4, #12]
 8014610:	f043 0308 	orr.w	r3, r3, #8
 8014614:	81a3      	strh	r3, [r4, #12]
 8014616:	6923      	ldr	r3, [r4, #16]
 8014618:	b94b      	cbnz	r3, 801462e <__swsetup_r+0x9a>
 801461a:	89a3      	ldrh	r3, [r4, #12]
 801461c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014620:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014624:	d003      	beq.n	801462e <__swsetup_r+0x9a>
 8014626:	4621      	mov	r1, r4
 8014628:	4630      	mov	r0, r6
 801462a:	f001 fb15 	bl	8015c58 <__smakebuf_r>
 801462e:	89a0      	ldrh	r0, [r4, #12]
 8014630:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014634:	f010 0301 	ands.w	r3, r0, #1
 8014638:	d00a      	beq.n	8014650 <__swsetup_r+0xbc>
 801463a:	2300      	movs	r3, #0
 801463c:	60a3      	str	r3, [r4, #8]
 801463e:	6963      	ldr	r3, [r4, #20]
 8014640:	425b      	negs	r3, r3
 8014642:	61a3      	str	r3, [r4, #24]
 8014644:	6923      	ldr	r3, [r4, #16]
 8014646:	b943      	cbnz	r3, 801465a <__swsetup_r+0xc6>
 8014648:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801464c:	d1ba      	bne.n	80145c4 <__swsetup_r+0x30>
 801464e:	bd70      	pop	{r4, r5, r6, pc}
 8014650:	0781      	lsls	r1, r0, #30
 8014652:	bf58      	it	pl
 8014654:	6963      	ldrpl	r3, [r4, #20]
 8014656:	60a3      	str	r3, [r4, #8]
 8014658:	e7f4      	b.n	8014644 <__swsetup_r+0xb0>
 801465a:	2000      	movs	r0, #0
 801465c:	e7f7      	b.n	801464e <__swsetup_r+0xba>
 801465e:	bf00      	nop
 8014660:	20000080 	.word	0x20000080
 8014664:	08017e4c 	.word	0x08017e4c
 8014668:	08017e6c 	.word	0x08017e6c
 801466c:	08017e2c 	.word	0x08017e2c

08014670 <_close_r>:
 8014670:	b538      	push	{r3, r4, r5, lr}
 8014672:	4d06      	ldr	r5, [pc, #24]	; (801468c <_close_r+0x1c>)
 8014674:	2300      	movs	r3, #0
 8014676:	4604      	mov	r4, r0
 8014678:	4608      	mov	r0, r1
 801467a:	602b      	str	r3, [r5, #0]
 801467c:	f002 fc28 	bl	8016ed0 <_close>
 8014680:	1c43      	adds	r3, r0, #1
 8014682:	d102      	bne.n	801468a <_close_r+0x1a>
 8014684:	682b      	ldr	r3, [r5, #0]
 8014686:	b103      	cbz	r3, 801468a <_close_r+0x1a>
 8014688:	6023      	str	r3, [r4, #0]
 801468a:	bd38      	pop	{r3, r4, r5, pc}
 801468c:	20006884 	.word	0x20006884

08014690 <quorem>:
 8014690:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014694:	6903      	ldr	r3, [r0, #16]
 8014696:	690c      	ldr	r4, [r1, #16]
 8014698:	42a3      	cmp	r3, r4
 801469a:	4607      	mov	r7, r0
 801469c:	f2c0 8081 	blt.w	80147a2 <quorem+0x112>
 80146a0:	3c01      	subs	r4, #1
 80146a2:	f101 0814 	add.w	r8, r1, #20
 80146a6:	f100 0514 	add.w	r5, r0, #20
 80146aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80146ae:	9301      	str	r3, [sp, #4]
 80146b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80146b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80146b8:	3301      	adds	r3, #1
 80146ba:	429a      	cmp	r2, r3
 80146bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80146c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80146c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80146c8:	d331      	bcc.n	801472e <quorem+0x9e>
 80146ca:	f04f 0e00 	mov.w	lr, #0
 80146ce:	4640      	mov	r0, r8
 80146d0:	46ac      	mov	ip, r5
 80146d2:	46f2      	mov	sl, lr
 80146d4:	f850 2b04 	ldr.w	r2, [r0], #4
 80146d8:	b293      	uxth	r3, r2
 80146da:	fb06 e303 	mla	r3, r6, r3, lr
 80146de:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80146e2:	b29b      	uxth	r3, r3
 80146e4:	ebaa 0303 	sub.w	r3, sl, r3
 80146e8:	0c12      	lsrs	r2, r2, #16
 80146ea:	f8dc a000 	ldr.w	sl, [ip]
 80146ee:	fb06 e202 	mla	r2, r6, r2, lr
 80146f2:	fa13 f38a 	uxtah	r3, r3, sl
 80146f6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80146fa:	fa1f fa82 	uxth.w	sl, r2
 80146fe:	f8dc 2000 	ldr.w	r2, [ip]
 8014702:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8014706:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801470a:	b29b      	uxth	r3, r3
 801470c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014710:	4581      	cmp	r9, r0
 8014712:	f84c 3b04 	str.w	r3, [ip], #4
 8014716:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801471a:	d2db      	bcs.n	80146d4 <quorem+0x44>
 801471c:	f855 300b 	ldr.w	r3, [r5, fp]
 8014720:	b92b      	cbnz	r3, 801472e <quorem+0x9e>
 8014722:	9b01      	ldr	r3, [sp, #4]
 8014724:	3b04      	subs	r3, #4
 8014726:	429d      	cmp	r5, r3
 8014728:	461a      	mov	r2, r3
 801472a:	d32e      	bcc.n	801478a <quorem+0xfa>
 801472c:	613c      	str	r4, [r7, #16]
 801472e:	4638      	mov	r0, r7
 8014730:	f001 fdc0 	bl	80162b4 <__mcmp>
 8014734:	2800      	cmp	r0, #0
 8014736:	db24      	blt.n	8014782 <quorem+0xf2>
 8014738:	3601      	adds	r6, #1
 801473a:	4628      	mov	r0, r5
 801473c:	f04f 0c00 	mov.w	ip, #0
 8014740:	f858 2b04 	ldr.w	r2, [r8], #4
 8014744:	f8d0 e000 	ldr.w	lr, [r0]
 8014748:	b293      	uxth	r3, r2
 801474a:	ebac 0303 	sub.w	r3, ip, r3
 801474e:	0c12      	lsrs	r2, r2, #16
 8014750:	fa13 f38e 	uxtah	r3, r3, lr
 8014754:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014758:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801475c:	b29b      	uxth	r3, r3
 801475e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014762:	45c1      	cmp	r9, r8
 8014764:	f840 3b04 	str.w	r3, [r0], #4
 8014768:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801476c:	d2e8      	bcs.n	8014740 <quorem+0xb0>
 801476e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014772:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014776:	b922      	cbnz	r2, 8014782 <quorem+0xf2>
 8014778:	3b04      	subs	r3, #4
 801477a:	429d      	cmp	r5, r3
 801477c:	461a      	mov	r2, r3
 801477e:	d30a      	bcc.n	8014796 <quorem+0x106>
 8014780:	613c      	str	r4, [r7, #16]
 8014782:	4630      	mov	r0, r6
 8014784:	b003      	add	sp, #12
 8014786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801478a:	6812      	ldr	r2, [r2, #0]
 801478c:	3b04      	subs	r3, #4
 801478e:	2a00      	cmp	r2, #0
 8014790:	d1cc      	bne.n	801472c <quorem+0x9c>
 8014792:	3c01      	subs	r4, #1
 8014794:	e7c7      	b.n	8014726 <quorem+0x96>
 8014796:	6812      	ldr	r2, [r2, #0]
 8014798:	3b04      	subs	r3, #4
 801479a:	2a00      	cmp	r2, #0
 801479c:	d1f0      	bne.n	8014780 <quorem+0xf0>
 801479e:	3c01      	subs	r4, #1
 80147a0:	e7eb      	b.n	801477a <quorem+0xea>
 80147a2:	2000      	movs	r0, #0
 80147a4:	e7ee      	b.n	8014784 <quorem+0xf4>
	...

080147a8 <_dtoa_r>:
 80147a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147ac:	ed2d 8b02 	vpush	{d8}
 80147b0:	ec57 6b10 	vmov	r6, r7, d0
 80147b4:	b095      	sub	sp, #84	; 0x54
 80147b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80147b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80147bc:	9105      	str	r1, [sp, #20]
 80147be:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80147c2:	4604      	mov	r4, r0
 80147c4:	9209      	str	r2, [sp, #36]	; 0x24
 80147c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80147c8:	b975      	cbnz	r5, 80147e8 <_dtoa_r+0x40>
 80147ca:	2010      	movs	r0, #16
 80147cc:	f001 fa84 	bl	8015cd8 <malloc>
 80147d0:	4602      	mov	r2, r0
 80147d2:	6260      	str	r0, [r4, #36]	; 0x24
 80147d4:	b920      	cbnz	r0, 80147e0 <_dtoa_r+0x38>
 80147d6:	4bb2      	ldr	r3, [pc, #712]	; (8014aa0 <_dtoa_r+0x2f8>)
 80147d8:	21ea      	movs	r1, #234	; 0xea
 80147da:	48b2      	ldr	r0, [pc, #712]	; (8014aa4 <_dtoa_r+0x2fc>)
 80147dc:	f002 fa92 	bl	8016d04 <__assert_func>
 80147e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80147e4:	6005      	str	r5, [r0, #0]
 80147e6:	60c5      	str	r5, [r0, #12]
 80147e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80147ea:	6819      	ldr	r1, [r3, #0]
 80147ec:	b151      	cbz	r1, 8014804 <_dtoa_r+0x5c>
 80147ee:	685a      	ldr	r2, [r3, #4]
 80147f0:	604a      	str	r2, [r1, #4]
 80147f2:	2301      	movs	r3, #1
 80147f4:	4093      	lsls	r3, r2
 80147f6:	608b      	str	r3, [r1, #8]
 80147f8:	4620      	mov	r0, r4
 80147fa:	f001 fad3 	bl	8015da4 <_Bfree>
 80147fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014800:	2200      	movs	r2, #0
 8014802:	601a      	str	r2, [r3, #0]
 8014804:	1e3b      	subs	r3, r7, #0
 8014806:	bfb9      	ittee	lt
 8014808:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801480c:	9303      	strlt	r3, [sp, #12]
 801480e:	2300      	movge	r3, #0
 8014810:	f8c8 3000 	strge.w	r3, [r8]
 8014814:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8014818:	4ba3      	ldr	r3, [pc, #652]	; (8014aa8 <_dtoa_r+0x300>)
 801481a:	bfbc      	itt	lt
 801481c:	2201      	movlt	r2, #1
 801481e:	f8c8 2000 	strlt.w	r2, [r8]
 8014822:	ea33 0309 	bics.w	r3, r3, r9
 8014826:	d11b      	bne.n	8014860 <_dtoa_r+0xb8>
 8014828:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801482a:	f242 730f 	movw	r3, #9999	; 0x270f
 801482e:	6013      	str	r3, [r2, #0]
 8014830:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014834:	4333      	orrs	r3, r6
 8014836:	f000 857a 	beq.w	801532e <_dtoa_r+0xb86>
 801483a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801483c:	b963      	cbnz	r3, 8014858 <_dtoa_r+0xb0>
 801483e:	4b9b      	ldr	r3, [pc, #620]	; (8014aac <_dtoa_r+0x304>)
 8014840:	e024      	b.n	801488c <_dtoa_r+0xe4>
 8014842:	4b9b      	ldr	r3, [pc, #620]	; (8014ab0 <_dtoa_r+0x308>)
 8014844:	9300      	str	r3, [sp, #0]
 8014846:	3308      	adds	r3, #8
 8014848:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801484a:	6013      	str	r3, [r2, #0]
 801484c:	9800      	ldr	r0, [sp, #0]
 801484e:	b015      	add	sp, #84	; 0x54
 8014850:	ecbd 8b02 	vpop	{d8}
 8014854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014858:	4b94      	ldr	r3, [pc, #592]	; (8014aac <_dtoa_r+0x304>)
 801485a:	9300      	str	r3, [sp, #0]
 801485c:	3303      	adds	r3, #3
 801485e:	e7f3      	b.n	8014848 <_dtoa_r+0xa0>
 8014860:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014864:	2200      	movs	r2, #0
 8014866:	ec51 0b17 	vmov	r0, r1, d7
 801486a:	2300      	movs	r3, #0
 801486c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8014870:	f7ec f93a 	bl	8000ae8 <__aeabi_dcmpeq>
 8014874:	4680      	mov	r8, r0
 8014876:	b158      	cbz	r0, 8014890 <_dtoa_r+0xe8>
 8014878:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801487a:	2301      	movs	r3, #1
 801487c:	6013      	str	r3, [r2, #0]
 801487e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014880:	2b00      	cmp	r3, #0
 8014882:	f000 8551 	beq.w	8015328 <_dtoa_r+0xb80>
 8014886:	488b      	ldr	r0, [pc, #556]	; (8014ab4 <_dtoa_r+0x30c>)
 8014888:	6018      	str	r0, [r3, #0]
 801488a:	1e43      	subs	r3, r0, #1
 801488c:	9300      	str	r3, [sp, #0]
 801488e:	e7dd      	b.n	801484c <_dtoa_r+0xa4>
 8014890:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8014894:	aa12      	add	r2, sp, #72	; 0x48
 8014896:	a913      	add	r1, sp, #76	; 0x4c
 8014898:	4620      	mov	r0, r4
 801489a:	f001 fe2b 	bl	80164f4 <__d2b>
 801489e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80148a2:	4683      	mov	fp, r0
 80148a4:	2d00      	cmp	r5, #0
 80148a6:	d07c      	beq.n	80149a2 <_dtoa_r+0x1fa>
 80148a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80148aa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80148ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80148b2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80148b6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80148ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80148be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80148c2:	4b7d      	ldr	r3, [pc, #500]	; (8014ab8 <_dtoa_r+0x310>)
 80148c4:	2200      	movs	r2, #0
 80148c6:	4630      	mov	r0, r6
 80148c8:	4639      	mov	r1, r7
 80148ca:	f7eb fced 	bl	80002a8 <__aeabi_dsub>
 80148ce:	a36e      	add	r3, pc, #440	; (adr r3, 8014a88 <_dtoa_r+0x2e0>)
 80148d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148d4:	f7eb fea0 	bl	8000618 <__aeabi_dmul>
 80148d8:	a36d      	add	r3, pc, #436	; (adr r3, 8014a90 <_dtoa_r+0x2e8>)
 80148da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148de:	f7eb fce5 	bl	80002ac <__adddf3>
 80148e2:	4606      	mov	r6, r0
 80148e4:	4628      	mov	r0, r5
 80148e6:	460f      	mov	r7, r1
 80148e8:	f7eb fe2c 	bl	8000544 <__aeabi_i2d>
 80148ec:	a36a      	add	r3, pc, #424	; (adr r3, 8014a98 <_dtoa_r+0x2f0>)
 80148ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148f2:	f7eb fe91 	bl	8000618 <__aeabi_dmul>
 80148f6:	4602      	mov	r2, r0
 80148f8:	460b      	mov	r3, r1
 80148fa:	4630      	mov	r0, r6
 80148fc:	4639      	mov	r1, r7
 80148fe:	f7eb fcd5 	bl	80002ac <__adddf3>
 8014902:	4606      	mov	r6, r0
 8014904:	460f      	mov	r7, r1
 8014906:	f7ec f937 	bl	8000b78 <__aeabi_d2iz>
 801490a:	2200      	movs	r2, #0
 801490c:	4682      	mov	sl, r0
 801490e:	2300      	movs	r3, #0
 8014910:	4630      	mov	r0, r6
 8014912:	4639      	mov	r1, r7
 8014914:	f7ec f8f2 	bl	8000afc <__aeabi_dcmplt>
 8014918:	b148      	cbz	r0, 801492e <_dtoa_r+0x186>
 801491a:	4650      	mov	r0, sl
 801491c:	f7eb fe12 	bl	8000544 <__aeabi_i2d>
 8014920:	4632      	mov	r2, r6
 8014922:	463b      	mov	r3, r7
 8014924:	f7ec f8e0 	bl	8000ae8 <__aeabi_dcmpeq>
 8014928:	b908      	cbnz	r0, 801492e <_dtoa_r+0x186>
 801492a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801492e:	f1ba 0f16 	cmp.w	sl, #22
 8014932:	d854      	bhi.n	80149de <_dtoa_r+0x236>
 8014934:	4b61      	ldr	r3, [pc, #388]	; (8014abc <_dtoa_r+0x314>)
 8014936:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801493a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801493e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014942:	f7ec f8db 	bl	8000afc <__aeabi_dcmplt>
 8014946:	2800      	cmp	r0, #0
 8014948:	d04b      	beq.n	80149e2 <_dtoa_r+0x23a>
 801494a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801494e:	2300      	movs	r3, #0
 8014950:	930e      	str	r3, [sp, #56]	; 0x38
 8014952:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014954:	1b5d      	subs	r5, r3, r5
 8014956:	1e6b      	subs	r3, r5, #1
 8014958:	9304      	str	r3, [sp, #16]
 801495a:	bf43      	ittte	mi
 801495c:	2300      	movmi	r3, #0
 801495e:	f1c5 0801 	rsbmi	r8, r5, #1
 8014962:	9304      	strmi	r3, [sp, #16]
 8014964:	f04f 0800 	movpl.w	r8, #0
 8014968:	f1ba 0f00 	cmp.w	sl, #0
 801496c:	db3b      	blt.n	80149e6 <_dtoa_r+0x23e>
 801496e:	9b04      	ldr	r3, [sp, #16]
 8014970:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8014974:	4453      	add	r3, sl
 8014976:	9304      	str	r3, [sp, #16]
 8014978:	2300      	movs	r3, #0
 801497a:	9306      	str	r3, [sp, #24]
 801497c:	9b05      	ldr	r3, [sp, #20]
 801497e:	2b09      	cmp	r3, #9
 8014980:	d869      	bhi.n	8014a56 <_dtoa_r+0x2ae>
 8014982:	2b05      	cmp	r3, #5
 8014984:	bfc4      	itt	gt
 8014986:	3b04      	subgt	r3, #4
 8014988:	9305      	strgt	r3, [sp, #20]
 801498a:	9b05      	ldr	r3, [sp, #20]
 801498c:	f1a3 0302 	sub.w	r3, r3, #2
 8014990:	bfcc      	ite	gt
 8014992:	2500      	movgt	r5, #0
 8014994:	2501      	movle	r5, #1
 8014996:	2b03      	cmp	r3, #3
 8014998:	d869      	bhi.n	8014a6e <_dtoa_r+0x2c6>
 801499a:	e8df f003 	tbb	[pc, r3]
 801499e:	4e2c      	.short	0x4e2c
 80149a0:	5a4c      	.short	0x5a4c
 80149a2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80149a6:	441d      	add	r5, r3
 80149a8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80149ac:	2b20      	cmp	r3, #32
 80149ae:	bfc1      	itttt	gt
 80149b0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80149b4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80149b8:	fa09 f303 	lslgt.w	r3, r9, r3
 80149bc:	fa26 f000 	lsrgt.w	r0, r6, r0
 80149c0:	bfda      	itte	le
 80149c2:	f1c3 0320 	rsble	r3, r3, #32
 80149c6:	fa06 f003 	lslle.w	r0, r6, r3
 80149ca:	4318      	orrgt	r0, r3
 80149cc:	f7eb fdaa 	bl	8000524 <__aeabi_ui2d>
 80149d0:	2301      	movs	r3, #1
 80149d2:	4606      	mov	r6, r0
 80149d4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80149d8:	3d01      	subs	r5, #1
 80149da:	9310      	str	r3, [sp, #64]	; 0x40
 80149dc:	e771      	b.n	80148c2 <_dtoa_r+0x11a>
 80149de:	2301      	movs	r3, #1
 80149e0:	e7b6      	b.n	8014950 <_dtoa_r+0x1a8>
 80149e2:	900e      	str	r0, [sp, #56]	; 0x38
 80149e4:	e7b5      	b.n	8014952 <_dtoa_r+0x1aa>
 80149e6:	f1ca 0300 	rsb	r3, sl, #0
 80149ea:	9306      	str	r3, [sp, #24]
 80149ec:	2300      	movs	r3, #0
 80149ee:	eba8 080a 	sub.w	r8, r8, sl
 80149f2:	930d      	str	r3, [sp, #52]	; 0x34
 80149f4:	e7c2      	b.n	801497c <_dtoa_r+0x1d4>
 80149f6:	2300      	movs	r3, #0
 80149f8:	9308      	str	r3, [sp, #32]
 80149fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	dc39      	bgt.n	8014a74 <_dtoa_r+0x2cc>
 8014a00:	f04f 0901 	mov.w	r9, #1
 8014a04:	f8cd 9004 	str.w	r9, [sp, #4]
 8014a08:	464b      	mov	r3, r9
 8014a0a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8014a0e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8014a10:	2200      	movs	r2, #0
 8014a12:	6042      	str	r2, [r0, #4]
 8014a14:	2204      	movs	r2, #4
 8014a16:	f102 0614 	add.w	r6, r2, #20
 8014a1a:	429e      	cmp	r6, r3
 8014a1c:	6841      	ldr	r1, [r0, #4]
 8014a1e:	d92f      	bls.n	8014a80 <_dtoa_r+0x2d8>
 8014a20:	4620      	mov	r0, r4
 8014a22:	f001 f97f 	bl	8015d24 <_Balloc>
 8014a26:	9000      	str	r0, [sp, #0]
 8014a28:	2800      	cmp	r0, #0
 8014a2a:	d14b      	bne.n	8014ac4 <_dtoa_r+0x31c>
 8014a2c:	4b24      	ldr	r3, [pc, #144]	; (8014ac0 <_dtoa_r+0x318>)
 8014a2e:	4602      	mov	r2, r0
 8014a30:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8014a34:	e6d1      	b.n	80147da <_dtoa_r+0x32>
 8014a36:	2301      	movs	r3, #1
 8014a38:	e7de      	b.n	80149f8 <_dtoa_r+0x250>
 8014a3a:	2300      	movs	r3, #0
 8014a3c:	9308      	str	r3, [sp, #32]
 8014a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a40:	eb0a 0903 	add.w	r9, sl, r3
 8014a44:	f109 0301 	add.w	r3, r9, #1
 8014a48:	2b01      	cmp	r3, #1
 8014a4a:	9301      	str	r3, [sp, #4]
 8014a4c:	bfb8      	it	lt
 8014a4e:	2301      	movlt	r3, #1
 8014a50:	e7dd      	b.n	8014a0e <_dtoa_r+0x266>
 8014a52:	2301      	movs	r3, #1
 8014a54:	e7f2      	b.n	8014a3c <_dtoa_r+0x294>
 8014a56:	2501      	movs	r5, #1
 8014a58:	2300      	movs	r3, #0
 8014a5a:	9305      	str	r3, [sp, #20]
 8014a5c:	9508      	str	r5, [sp, #32]
 8014a5e:	f04f 39ff 	mov.w	r9, #4294967295
 8014a62:	2200      	movs	r2, #0
 8014a64:	f8cd 9004 	str.w	r9, [sp, #4]
 8014a68:	2312      	movs	r3, #18
 8014a6a:	9209      	str	r2, [sp, #36]	; 0x24
 8014a6c:	e7cf      	b.n	8014a0e <_dtoa_r+0x266>
 8014a6e:	2301      	movs	r3, #1
 8014a70:	9308      	str	r3, [sp, #32]
 8014a72:	e7f4      	b.n	8014a5e <_dtoa_r+0x2b6>
 8014a74:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8014a78:	f8cd 9004 	str.w	r9, [sp, #4]
 8014a7c:	464b      	mov	r3, r9
 8014a7e:	e7c6      	b.n	8014a0e <_dtoa_r+0x266>
 8014a80:	3101      	adds	r1, #1
 8014a82:	6041      	str	r1, [r0, #4]
 8014a84:	0052      	lsls	r2, r2, #1
 8014a86:	e7c6      	b.n	8014a16 <_dtoa_r+0x26e>
 8014a88:	636f4361 	.word	0x636f4361
 8014a8c:	3fd287a7 	.word	0x3fd287a7
 8014a90:	8b60c8b3 	.word	0x8b60c8b3
 8014a94:	3fc68a28 	.word	0x3fc68a28
 8014a98:	509f79fb 	.word	0x509f79fb
 8014a9c:	3fd34413 	.word	0x3fd34413
 8014aa0:	08017f2d 	.word	0x08017f2d
 8014aa4:	08017f44 	.word	0x08017f44
 8014aa8:	7ff00000 	.word	0x7ff00000
 8014aac:	08017f29 	.word	0x08017f29
 8014ab0:	08017f20 	.word	0x08017f20
 8014ab4:	08017ea1 	.word	0x08017ea1
 8014ab8:	3ff80000 	.word	0x3ff80000
 8014abc:	080180c0 	.word	0x080180c0
 8014ac0:	08017fa3 	.word	0x08017fa3
 8014ac4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014ac6:	9a00      	ldr	r2, [sp, #0]
 8014ac8:	601a      	str	r2, [r3, #0]
 8014aca:	9b01      	ldr	r3, [sp, #4]
 8014acc:	2b0e      	cmp	r3, #14
 8014ace:	f200 80ad 	bhi.w	8014c2c <_dtoa_r+0x484>
 8014ad2:	2d00      	cmp	r5, #0
 8014ad4:	f000 80aa 	beq.w	8014c2c <_dtoa_r+0x484>
 8014ad8:	f1ba 0f00 	cmp.w	sl, #0
 8014adc:	dd36      	ble.n	8014b4c <_dtoa_r+0x3a4>
 8014ade:	4ac3      	ldr	r2, [pc, #780]	; (8014dec <_dtoa_r+0x644>)
 8014ae0:	f00a 030f 	and.w	r3, sl, #15
 8014ae4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014ae8:	ed93 7b00 	vldr	d7, [r3]
 8014aec:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8014af0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8014af4:	eeb0 8a47 	vmov.f32	s16, s14
 8014af8:	eef0 8a67 	vmov.f32	s17, s15
 8014afc:	d016      	beq.n	8014b2c <_dtoa_r+0x384>
 8014afe:	4bbc      	ldr	r3, [pc, #752]	; (8014df0 <_dtoa_r+0x648>)
 8014b00:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014b04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014b08:	f7eb feb0 	bl	800086c <__aeabi_ddiv>
 8014b0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014b10:	f007 070f 	and.w	r7, r7, #15
 8014b14:	2503      	movs	r5, #3
 8014b16:	4eb6      	ldr	r6, [pc, #728]	; (8014df0 <_dtoa_r+0x648>)
 8014b18:	b957      	cbnz	r7, 8014b30 <_dtoa_r+0x388>
 8014b1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014b1e:	ec53 2b18 	vmov	r2, r3, d8
 8014b22:	f7eb fea3 	bl	800086c <__aeabi_ddiv>
 8014b26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014b2a:	e029      	b.n	8014b80 <_dtoa_r+0x3d8>
 8014b2c:	2502      	movs	r5, #2
 8014b2e:	e7f2      	b.n	8014b16 <_dtoa_r+0x36e>
 8014b30:	07f9      	lsls	r1, r7, #31
 8014b32:	d508      	bpl.n	8014b46 <_dtoa_r+0x39e>
 8014b34:	ec51 0b18 	vmov	r0, r1, d8
 8014b38:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014b3c:	f7eb fd6c 	bl	8000618 <__aeabi_dmul>
 8014b40:	ec41 0b18 	vmov	d8, r0, r1
 8014b44:	3501      	adds	r5, #1
 8014b46:	107f      	asrs	r7, r7, #1
 8014b48:	3608      	adds	r6, #8
 8014b4a:	e7e5      	b.n	8014b18 <_dtoa_r+0x370>
 8014b4c:	f000 80a6 	beq.w	8014c9c <_dtoa_r+0x4f4>
 8014b50:	f1ca 0600 	rsb	r6, sl, #0
 8014b54:	4ba5      	ldr	r3, [pc, #660]	; (8014dec <_dtoa_r+0x644>)
 8014b56:	4fa6      	ldr	r7, [pc, #664]	; (8014df0 <_dtoa_r+0x648>)
 8014b58:	f006 020f 	and.w	r2, r6, #15
 8014b5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b64:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014b68:	f7eb fd56 	bl	8000618 <__aeabi_dmul>
 8014b6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014b70:	1136      	asrs	r6, r6, #4
 8014b72:	2300      	movs	r3, #0
 8014b74:	2502      	movs	r5, #2
 8014b76:	2e00      	cmp	r6, #0
 8014b78:	f040 8085 	bne.w	8014c86 <_dtoa_r+0x4de>
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d1d2      	bne.n	8014b26 <_dtoa_r+0x37e>
 8014b80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	f000 808c 	beq.w	8014ca0 <_dtoa_r+0x4f8>
 8014b88:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8014b8c:	4b99      	ldr	r3, [pc, #612]	; (8014df4 <_dtoa_r+0x64c>)
 8014b8e:	2200      	movs	r2, #0
 8014b90:	4630      	mov	r0, r6
 8014b92:	4639      	mov	r1, r7
 8014b94:	f7eb ffb2 	bl	8000afc <__aeabi_dcmplt>
 8014b98:	2800      	cmp	r0, #0
 8014b9a:	f000 8081 	beq.w	8014ca0 <_dtoa_r+0x4f8>
 8014b9e:	9b01      	ldr	r3, [sp, #4]
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d07d      	beq.n	8014ca0 <_dtoa_r+0x4f8>
 8014ba4:	f1b9 0f00 	cmp.w	r9, #0
 8014ba8:	dd3c      	ble.n	8014c24 <_dtoa_r+0x47c>
 8014baa:	f10a 33ff 	add.w	r3, sl, #4294967295
 8014bae:	9307      	str	r3, [sp, #28]
 8014bb0:	2200      	movs	r2, #0
 8014bb2:	4b91      	ldr	r3, [pc, #580]	; (8014df8 <_dtoa_r+0x650>)
 8014bb4:	4630      	mov	r0, r6
 8014bb6:	4639      	mov	r1, r7
 8014bb8:	f7eb fd2e 	bl	8000618 <__aeabi_dmul>
 8014bbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014bc0:	3501      	adds	r5, #1
 8014bc2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8014bc6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8014bca:	4628      	mov	r0, r5
 8014bcc:	f7eb fcba 	bl	8000544 <__aeabi_i2d>
 8014bd0:	4632      	mov	r2, r6
 8014bd2:	463b      	mov	r3, r7
 8014bd4:	f7eb fd20 	bl	8000618 <__aeabi_dmul>
 8014bd8:	4b88      	ldr	r3, [pc, #544]	; (8014dfc <_dtoa_r+0x654>)
 8014bda:	2200      	movs	r2, #0
 8014bdc:	f7eb fb66 	bl	80002ac <__adddf3>
 8014be0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8014be4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014be8:	9303      	str	r3, [sp, #12]
 8014bea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d15c      	bne.n	8014caa <_dtoa_r+0x502>
 8014bf0:	4b83      	ldr	r3, [pc, #524]	; (8014e00 <_dtoa_r+0x658>)
 8014bf2:	2200      	movs	r2, #0
 8014bf4:	4630      	mov	r0, r6
 8014bf6:	4639      	mov	r1, r7
 8014bf8:	f7eb fb56 	bl	80002a8 <__aeabi_dsub>
 8014bfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014c00:	4606      	mov	r6, r0
 8014c02:	460f      	mov	r7, r1
 8014c04:	f7eb ff98 	bl	8000b38 <__aeabi_dcmpgt>
 8014c08:	2800      	cmp	r0, #0
 8014c0a:	f040 8296 	bne.w	801513a <_dtoa_r+0x992>
 8014c0e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8014c12:	4630      	mov	r0, r6
 8014c14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014c18:	4639      	mov	r1, r7
 8014c1a:	f7eb ff6f 	bl	8000afc <__aeabi_dcmplt>
 8014c1e:	2800      	cmp	r0, #0
 8014c20:	f040 8288 	bne.w	8015134 <_dtoa_r+0x98c>
 8014c24:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014c28:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014c2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	f2c0 8158 	blt.w	8014ee4 <_dtoa_r+0x73c>
 8014c34:	f1ba 0f0e 	cmp.w	sl, #14
 8014c38:	f300 8154 	bgt.w	8014ee4 <_dtoa_r+0x73c>
 8014c3c:	4b6b      	ldr	r3, [pc, #428]	; (8014dec <_dtoa_r+0x644>)
 8014c3e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014c42:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014c46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	f280 80e3 	bge.w	8014e14 <_dtoa_r+0x66c>
 8014c4e:	9b01      	ldr	r3, [sp, #4]
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	f300 80df 	bgt.w	8014e14 <_dtoa_r+0x66c>
 8014c56:	f040 826d 	bne.w	8015134 <_dtoa_r+0x98c>
 8014c5a:	4b69      	ldr	r3, [pc, #420]	; (8014e00 <_dtoa_r+0x658>)
 8014c5c:	2200      	movs	r2, #0
 8014c5e:	4640      	mov	r0, r8
 8014c60:	4649      	mov	r1, r9
 8014c62:	f7eb fcd9 	bl	8000618 <__aeabi_dmul>
 8014c66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014c6a:	f7eb ff5b 	bl	8000b24 <__aeabi_dcmpge>
 8014c6e:	9e01      	ldr	r6, [sp, #4]
 8014c70:	4637      	mov	r7, r6
 8014c72:	2800      	cmp	r0, #0
 8014c74:	f040 8243 	bne.w	80150fe <_dtoa_r+0x956>
 8014c78:	9d00      	ldr	r5, [sp, #0]
 8014c7a:	2331      	movs	r3, #49	; 0x31
 8014c7c:	f805 3b01 	strb.w	r3, [r5], #1
 8014c80:	f10a 0a01 	add.w	sl, sl, #1
 8014c84:	e23f      	b.n	8015106 <_dtoa_r+0x95e>
 8014c86:	07f2      	lsls	r2, r6, #31
 8014c88:	d505      	bpl.n	8014c96 <_dtoa_r+0x4ee>
 8014c8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014c8e:	f7eb fcc3 	bl	8000618 <__aeabi_dmul>
 8014c92:	3501      	adds	r5, #1
 8014c94:	2301      	movs	r3, #1
 8014c96:	1076      	asrs	r6, r6, #1
 8014c98:	3708      	adds	r7, #8
 8014c9a:	e76c      	b.n	8014b76 <_dtoa_r+0x3ce>
 8014c9c:	2502      	movs	r5, #2
 8014c9e:	e76f      	b.n	8014b80 <_dtoa_r+0x3d8>
 8014ca0:	9b01      	ldr	r3, [sp, #4]
 8014ca2:	f8cd a01c 	str.w	sl, [sp, #28]
 8014ca6:	930c      	str	r3, [sp, #48]	; 0x30
 8014ca8:	e78d      	b.n	8014bc6 <_dtoa_r+0x41e>
 8014caa:	9900      	ldr	r1, [sp, #0]
 8014cac:	980c      	ldr	r0, [sp, #48]	; 0x30
 8014cae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014cb0:	4b4e      	ldr	r3, [pc, #312]	; (8014dec <_dtoa_r+0x644>)
 8014cb2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014cb6:	4401      	add	r1, r0
 8014cb8:	9102      	str	r1, [sp, #8]
 8014cba:	9908      	ldr	r1, [sp, #32]
 8014cbc:	eeb0 8a47 	vmov.f32	s16, s14
 8014cc0:	eef0 8a67 	vmov.f32	s17, s15
 8014cc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014cc8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014ccc:	2900      	cmp	r1, #0
 8014cce:	d045      	beq.n	8014d5c <_dtoa_r+0x5b4>
 8014cd0:	494c      	ldr	r1, [pc, #304]	; (8014e04 <_dtoa_r+0x65c>)
 8014cd2:	2000      	movs	r0, #0
 8014cd4:	f7eb fdca 	bl	800086c <__aeabi_ddiv>
 8014cd8:	ec53 2b18 	vmov	r2, r3, d8
 8014cdc:	f7eb fae4 	bl	80002a8 <__aeabi_dsub>
 8014ce0:	9d00      	ldr	r5, [sp, #0]
 8014ce2:	ec41 0b18 	vmov	d8, r0, r1
 8014ce6:	4639      	mov	r1, r7
 8014ce8:	4630      	mov	r0, r6
 8014cea:	f7eb ff45 	bl	8000b78 <__aeabi_d2iz>
 8014cee:	900c      	str	r0, [sp, #48]	; 0x30
 8014cf0:	f7eb fc28 	bl	8000544 <__aeabi_i2d>
 8014cf4:	4602      	mov	r2, r0
 8014cf6:	460b      	mov	r3, r1
 8014cf8:	4630      	mov	r0, r6
 8014cfa:	4639      	mov	r1, r7
 8014cfc:	f7eb fad4 	bl	80002a8 <__aeabi_dsub>
 8014d00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014d02:	3330      	adds	r3, #48	; 0x30
 8014d04:	f805 3b01 	strb.w	r3, [r5], #1
 8014d08:	ec53 2b18 	vmov	r2, r3, d8
 8014d0c:	4606      	mov	r6, r0
 8014d0e:	460f      	mov	r7, r1
 8014d10:	f7eb fef4 	bl	8000afc <__aeabi_dcmplt>
 8014d14:	2800      	cmp	r0, #0
 8014d16:	d165      	bne.n	8014de4 <_dtoa_r+0x63c>
 8014d18:	4632      	mov	r2, r6
 8014d1a:	463b      	mov	r3, r7
 8014d1c:	4935      	ldr	r1, [pc, #212]	; (8014df4 <_dtoa_r+0x64c>)
 8014d1e:	2000      	movs	r0, #0
 8014d20:	f7eb fac2 	bl	80002a8 <__aeabi_dsub>
 8014d24:	ec53 2b18 	vmov	r2, r3, d8
 8014d28:	f7eb fee8 	bl	8000afc <__aeabi_dcmplt>
 8014d2c:	2800      	cmp	r0, #0
 8014d2e:	f040 80b9 	bne.w	8014ea4 <_dtoa_r+0x6fc>
 8014d32:	9b02      	ldr	r3, [sp, #8]
 8014d34:	429d      	cmp	r5, r3
 8014d36:	f43f af75 	beq.w	8014c24 <_dtoa_r+0x47c>
 8014d3a:	4b2f      	ldr	r3, [pc, #188]	; (8014df8 <_dtoa_r+0x650>)
 8014d3c:	ec51 0b18 	vmov	r0, r1, d8
 8014d40:	2200      	movs	r2, #0
 8014d42:	f7eb fc69 	bl	8000618 <__aeabi_dmul>
 8014d46:	4b2c      	ldr	r3, [pc, #176]	; (8014df8 <_dtoa_r+0x650>)
 8014d48:	ec41 0b18 	vmov	d8, r0, r1
 8014d4c:	2200      	movs	r2, #0
 8014d4e:	4630      	mov	r0, r6
 8014d50:	4639      	mov	r1, r7
 8014d52:	f7eb fc61 	bl	8000618 <__aeabi_dmul>
 8014d56:	4606      	mov	r6, r0
 8014d58:	460f      	mov	r7, r1
 8014d5a:	e7c4      	b.n	8014ce6 <_dtoa_r+0x53e>
 8014d5c:	ec51 0b17 	vmov	r0, r1, d7
 8014d60:	f7eb fc5a 	bl	8000618 <__aeabi_dmul>
 8014d64:	9b02      	ldr	r3, [sp, #8]
 8014d66:	9d00      	ldr	r5, [sp, #0]
 8014d68:	930c      	str	r3, [sp, #48]	; 0x30
 8014d6a:	ec41 0b18 	vmov	d8, r0, r1
 8014d6e:	4639      	mov	r1, r7
 8014d70:	4630      	mov	r0, r6
 8014d72:	f7eb ff01 	bl	8000b78 <__aeabi_d2iz>
 8014d76:	9011      	str	r0, [sp, #68]	; 0x44
 8014d78:	f7eb fbe4 	bl	8000544 <__aeabi_i2d>
 8014d7c:	4602      	mov	r2, r0
 8014d7e:	460b      	mov	r3, r1
 8014d80:	4630      	mov	r0, r6
 8014d82:	4639      	mov	r1, r7
 8014d84:	f7eb fa90 	bl	80002a8 <__aeabi_dsub>
 8014d88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014d8a:	3330      	adds	r3, #48	; 0x30
 8014d8c:	f805 3b01 	strb.w	r3, [r5], #1
 8014d90:	9b02      	ldr	r3, [sp, #8]
 8014d92:	429d      	cmp	r5, r3
 8014d94:	4606      	mov	r6, r0
 8014d96:	460f      	mov	r7, r1
 8014d98:	f04f 0200 	mov.w	r2, #0
 8014d9c:	d134      	bne.n	8014e08 <_dtoa_r+0x660>
 8014d9e:	4b19      	ldr	r3, [pc, #100]	; (8014e04 <_dtoa_r+0x65c>)
 8014da0:	ec51 0b18 	vmov	r0, r1, d8
 8014da4:	f7eb fa82 	bl	80002ac <__adddf3>
 8014da8:	4602      	mov	r2, r0
 8014daa:	460b      	mov	r3, r1
 8014dac:	4630      	mov	r0, r6
 8014dae:	4639      	mov	r1, r7
 8014db0:	f7eb fec2 	bl	8000b38 <__aeabi_dcmpgt>
 8014db4:	2800      	cmp	r0, #0
 8014db6:	d175      	bne.n	8014ea4 <_dtoa_r+0x6fc>
 8014db8:	ec53 2b18 	vmov	r2, r3, d8
 8014dbc:	4911      	ldr	r1, [pc, #68]	; (8014e04 <_dtoa_r+0x65c>)
 8014dbe:	2000      	movs	r0, #0
 8014dc0:	f7eb fa72 	bl	80002a8 <__aeabi_dsub>
 8014dc4:	4602      	mov	r2, r0
 8014dc6:	460b      	mov	r3, r1
 8014dc8:	4630      	mov	r0, r6
 8014dca:	4639      	mov	r1, r7
 8014dcc:	f7eb fe96 	bl	8000afc <__aeabi_dcmplt>
 8014dd0:	2800      	cmp	r0, #0
 8014dd2:	f43f af27 	beq.w	8014c24 <_dtoa_r+0x47c>
 8014dd6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014dd8:	1e6b      	subs	r3, r5, #1
 8014dda:	930c      	str	r3, [sp, #48]	; 0x30
 8014ddc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014de0:	2b30      	cmp	r3, #48	; 0x30
 8014de2:	d0f8      	beq.n	8014dd6 <_dtoa_r+0x62e>
 8014de4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8014de8:	e04a      	b.n	8014e80 <_dtoa_r+0x6d8>
 8014dea:	bf00      	nop
 8014dec:	080180c0 	.word	0x080180c0
 8014df0:	08018098 	.word	0x08018098
 8014df4:	3ff00000 	.word	0x3ff00000
 8014df8:	40240000 	.word	0x40240000
 8014dfc:	401c0000 	.word	0x401c0000
 8014e00:	40140000 	.word	0x40140000
 8014e04:	3fe00000 	.word	0x3fe00000
 8014e08:	4baf      	ldr	r3, [pc, #700]	; (80150c8 <_dtoa_r+0x920>)
 8014e0a:	f7eb fc05 	bl	8000618 <__aeabi_dmul>
 8014e0e:	4606      	mov	r6, r0
 8014e10:	460f      	mov	r7, r1
 8014e12:	e7ac      	b.n	8014d6e <_dtoa_r+0x5c6>
 8014e14:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8014e18:	9d00      	ldr	r5, [sp, #0]
 8014e1a:	4642      	mov	r2, r8
 8014e1c:	464b      	mov	r3, r9
 8014e1e:	4630      	mov	r0, r6
 8014e20:	4639      	mov	r1, r7
 8014e22:	f7eb fd23 	bl	800086c <__aeabi_ddiv>
 8014e26:	f7eb fea7 	bl	8000b78 <__aeabi_d2iz>
 8014e2a:	9002      	str	r0, [sp, #8]
 8014e2c:	f7eb fb8a 	bl	8000544 <__aeabi_i2d>
 8014e30:	4642      	mov	r2, r8
 8014e32:	464b      	mov	r3, r9
 8014e34:	f7eb fbf0 	bl	8000618 <__aeabi_dmul>
 8014e38:	4602      	mov	r2, r0
 8014e3a:	460b      	mov	r3, r1
 8014e3c:	4630      	mov	r0, r6
 8014e3e:	4639      	mov	r1, r7
 8014e40:	f7eb fa32 	bl	80002a8 <__aeabi_dsub>
 8014e44:	9e02      	ldr	r6, [sp, #8]
 8014e46:	9f01      	ldr	r7, [sp, #4]
 8014e48:	3630      	adds	r6, #48	; 0x30
 8014e4a:	f805 6b01 	strb.w	r6, [r5], #1
 8014e4e:	9e00      	ldr	r6, [sp, #0]
 8014e50:	1bae      	subs	r6, r5, r6
 8014e52:	42b7      	cmp	r7, r6
 8014e54:	4602      	mov	r2, r0
 8014e56:	460b      	mov	r3, r1
 8014e58:	d137      	bne.n	8014eca <_dtoa_r+0x722>
 8014e5a:	f7eb fa27 	bl	80002ac <__adddf3>
 8014e5e:	4642      	mov	r2, r8
 8014e60:	464b      	mov	r3, r9
 8014e62:	4606      	mov	r6, r0
 8014e64:	460f      	mov	r7, r1
 8014e66:	f7eb fe67 	bl	8000b38 <__aeabi_dcmpgt>
 8014e6a:	b9c8      	cbnz	r0, 8014ea0 <_dtoa_r+0x6f8>
 8014e6c:	4642      	mov	r2, r8
 8014e6e:	464b      	mov	r3, r9
 8014e70:	4630      	mov	r0, r6
 8014e72:	4639      	mov	r1, r7
 8014e74:	f7eb fe38 	bl	8000ae8 <__aeabi_dcmpeq>
 8014e78:	b110      	cbz	r0, 8014e80 <_dtoa_r+0x6d8>
 8014e7a:	9b02      	ldr	r3, [sp, #8]
 8014e7c:	07d9      	lsls	r1, r3, #31
 8014e7e:	d40f      	bmi.n	8014ea0 <_dtoa_r+0x6f8>
 8014e80:	4620      	mov	r0, r4
 8014e82:	4659      	mov	r1, fp
 8014e84:	f000 ff8e 	bl	8015da4 <_Bfree>
 8014e88:	2300      	movs	r3, #0
 8014e8a:	702b      	strb	r3, [r5, #0]
 8014e8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014e8e:	f10a 0001 	add.w	r0, sl, #1
 8014e92:	6018      	str	r0, [r3, #0]
 8014e94:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	f43f acd8 	beq.w	801484c <_dtoa_r+0xa4>
 8014e9c:	601d      	str	r5, [r3, #0]
 8014e9e:	e4d5      	b.n	801484c <_dtoa_r+0xa4>
 8014ea0:	f8cd a01c 	str.w	sl, [sp, #28]
 8014ea4:	462b      	mov	r3, r5
 8014ea6:	461d      	mov	r5, r3
 8014ea8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014eac:	2a39      	cmp	r2, #57	; 0x39
 8014eae:	d108      	bne.n	8014ec2 <_dtoa_r+0x71a>
 8014eb0:	9a00      	ldr	r2, [sp, #0]
 8014eb2:	429a      	cmp	r2, r3
 8014eb4:	d1f7      	bne.n	8014ea6 <_dtoa_r+0x6fe>
 8014eb6:	9a07      	ldr	r2, [sp, #28]
 8014eb8:	9900      	ldr	r1, [sp, #0]
 8014eba:	3201      	adds	r2, #1
 8014ebc:	9207      	str	r2, [sp, #28]
 8014ebe:	2230      	movs	r2, #48	; 0x30
 8014ec0:	700a      	strb	r2, [r1, #0]
 8014ec2:	781a      	ldrb	r2, [r3, #0]
 8014ec4:	3201      	adds	r2, #1
 8014ec6:	701a      	strb	r2, [r3, #0]
 8014ec8:	e78c      	b.n	8014de4 <_dtoa_r+0x63c>
 8014eca:	4b7f      	ldr	r3, [pc, #508]	; (80150c8 <_dtoa_r+0x920>)
 8014ecc:	2200      	movs	r2, #0
 8014ece:	f7eb fba3 	bl	8000618 <__aeabi_dmul>
 8014ed2:	2200      	movs	r2, #0
 8014ed4:	2300      	movs	r3, #0
 8014ed6:	4606      	mov	r6, r0
 8014ed8:	460f      	mov	r7, r1
 8014eda:	f7eb fe05 	bl	8000ae8 <__aeabi_dcmpeq>
 8014ede:	2800      	cmp	r0, #0
 8014ee0:	d09b      	beq.n	8014e1a <_dtoa_r+0x672>
 8014ee2:	e7cd      	b.n	8014e80 <_dtoa_r+0x6d8>
 8014ee4:	9a08      	ldr	r2, [sp, #32]
 8014ee6:	2a00      	cmp	r2, #0
 8014ee8:	f000 80c4 	beq.w	8015074 <_dtoa_r+0x8cc>
 8014eec:	9a05      	ldr	r2, [sp, #20]
 8014eee:	2a01      	cmp	r2, #1
 8014ef0:	f300 80a8 	bgt.w	8015044 <_dtoa_r+0x89c>
 8014ef4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014ef6:	2a00      	cmp	r2, #0
 8014ef8:	f000 80a0 	beq.w	801503c <_dtoa_r+0x894>
 8014efc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014f00:	9e06      	ldr	r6, [sp, #24]
 8014f02:	4645      	mov	r5, r8
 8014f04:	9a04      	ldr	r2, [sp, #16]
 8014f06:	2101      	movs	r1, #1
 8014f08:	441a      	add	r2, r3
 8014f0a:	4620      	mov	r0, r4
 8014f0c:	4498      	add	r8, r3
 8014f0e:	9204      	str	r2, [sp, #16]
 8014f10:	f001 f84e 	bl	8015fb0 <__i2b>
 8014f14:	4607      	mov	r7, r0
 8014f16:	2d00      	cmp	r5, #0
 8014f18:	dd0b      	ble.n	8014f32 <_dtoa_r+0x78a>
 8014f1a:	9b04      	ldr	r3, [sp, #16]
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	dd08      	ble.n	8014f32 <_dtoa_r+0x78a>
 8014f20:	42ab      	cmp	r3, r5
 8014f22:	9a04      	ldr	r2, [sp, #16]
 8014f24:	bfa8      	it	ge
 8014f26:	462b      	movge	r3, r5
 8014f28:	eba8 0803 	sub.w	r8, r8, r3
 8014f2c:	1aed      	subs	r5, r5, r3
 8014f2e:	1ad3      	subs	r3, r2, r3
 8014f30:	9304      	str	r3, [sp, #16]
 8014f32:	9b06      	ldr	r3, [sp, #24]
 8014f34:	b1fb      	cbz	r3, 8014f76 <_dtoa_r+0x7ce>
 8014f36:	9b08      	ldr	r3, [sp, #32]
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	f000 809f 	beq.w	801507c <_dtoa_r+0x8d4>
 8014f3e:	2e00      	cmp	r6, #0
 8014f40:	dd11      	ble.n	8014f66 <_dtoa_r+0x7be>
 8014f42:	4639      	mov	r1, r7
 8014f44:	4632      	mov	r2, r6
 8014f46:	4620      	mov	r0, r4
 8014f48:	f001 f8ee 	bl	8016128 <__pow5mult>
 8014f4c:	465a      	mov	r2, fp
 8014f4e:	4601      	mov	r1, r0
 8014f50:	4607      	mov	r7, r0
 8014f52:	4620      	mov	r0, r4
 8014f54:	f001 f842 	bl	8015fdc <__multiply>
 8014f58:	4659      	mov	r1, fp
 8014f5a:	9007      	str	r0, [sp, #28]
 8014f5c:	4620      	mov	r0, r4
 8014f5e:	f000 ff21 	bl	8015da4 <_Bfree>
 8014f62:	9b07      	ldr	r3, [sp, #28]
 8014f64:	469b      	mov	fp, r3
 8014f66:	9b06      	ldr	r3, [sp, #24]
 8014f68:	1b9a      	subs	r2, r3, r6
 8014f6a:	d004      	beq.n	8014f76 <_dtoa_r+0x7ce>
 8014f6c:	4659      	mov	r1, fp
 8014f6e:	4620      	mov	r0, r4
 8014f70:	f001 f8da 	bl	8016128 <__pow5mult>
 8014f74:	4683      	mov	fp, r0
 8014f76:	2101      	movs	r1, #1
 8014f78:	4620      	mov	r0, r4
 8014f7a:	f001 f819 	bl	8015fb0 <__i2b>
 8014f7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	4606      	mov	r6, r0
 8014f84:	dd7c      	ble.n	8015080 <_dtoa_r+0x8d8>
 8014f86:	461a      	mov	r2, r3
 8014f88:	4601      	mov	r1, r0
 8014f8a:	4620      	mov	r0, r4
 8014f8c:	f001 f8cc 	bl	8016128 <__pow5mult>
 8014f90:	9b05      	ldr	r3, [sp, #20]
 8014f92:	2b01      	cmp	r3, #1
 8014f94:	4606      	mov	r6, r0
 8014f96:	dd76      	ble.n	8015086 <_dtoa_r+0x8de>
 8014f98:	2300      	movs	r3, #0
 8014f9a:	9306      	str	r3, [sp, #24]
 8014f9c:	6933      	ldr	r3, [r6, #16]
 8014f9e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8014fa2:	6918      	ldr	r0, [r3, #16]
 8014fa4:	f000 ffb4 	bl	8015f10 <__hi0bits>
 8014fa8:	f1c0 0020 	rsb	r0, r0, #32
 8014fac:	9b04      	ldr	r3, [sp, #16]
 8014fae:	4418      	add	r0, r3
 8014fb0:	f010 001f 	ands.w	r0, r0, #31
 8014fb4:	f000 8086 	beq.w	80150c4 <_dtoa_r+0x91c>
 8014fb8:	f1c0 0320 	rsb	r3, r0, #32
 8014fbc:	2b04      	cmp	r3, #4
 8014fbe:	dd7f      	ble.n	80150c0 <_dtoa_r+0x918>
 8014fc0:	f1c0 001c 	rsb	r0, r0, #28
 8014fc4:	9b04      	ldr	r3, [sp, #16]
 8014fc6:	4403      	add	r3, r0
 8014fc8:	4480      	add	r8, r0
 8014fca:	4405      	add	r5, r0
 8014fcc:	9304      	str	r3, [sp, #16]
 8014fce:	f1b8 0f00 	cmp.w	r8, #0
 8014fd2:	dd05      	ble.n	8014fe0 <_dtoa_r+0x838>
 8014fd4:	4659      	mov	r1, fp
 8014fd6:	4642      	mov	r2, r8
 8014fd8:	4620      	mov	r0, r4
 8014fda:	f001 f8ff 	bl	80161dc <__lshift>
 8014fde:	4683      	mov	fp, r0
 8014fe0:	9b04      	ldr	r3, [sp, #16]
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	dd05      	ble.n	8014ff2 <_dtoa_r+0x84a>
 8014fe6:	4631      	mov	r1, r6
 8014fe8:	461a      	mov	r2, r3
 8014fea:	4620      	mov	r0, r4
 8014fec:	f001 f8f6 	bl	80161dc <__lshift>
 8014ff0:	4606      	mov	r6, r0
 8014ff2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d069      	beq.n	80150cc <_dtoa_r+0x924>
 8014ff8:	4631      	mov	r1, r6
 8014ffa:	4658      	mov	r0, fp
 8014ffc:	f001 f95a 	bl	80162b4 <__mcmp>
 8015000:	2800      	cmp	r0, #0
 8015002:	da63      	bge.n	80150cc <_dtoa_r+0x924>
 8015004:	2300      	movs	r3, #0
 8015006:	4659      	mov	r1, fp
 8015008:	220a      	movs	r2, #10
 801500a:	4620      	mov	r0, r4
 801500c:	f000 feec 	bl	8015de8 <__multadd>
 8015010:	9b08      	ldr	r3, [sp, #32]
 8015012:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015016:	4683      	mov	fp, r0
 8015018:	2b00      	cmp	r3, #0
 801501a:	f000 818f 	beq.w	801533c <_dtoa_r+0xb94>
 801501e:	4639      	mov	r1, r7
 8015020:	2300      	movs	r3, #0
 8015022:	220a      	movs	r2, #10
 8015024:	4620      	mov	r0, r4
 8015026:	f000 fedf 	bl	8015de8 <__multadd>
 801502a:	f1b9 0f00 	cmp.w	r9, #0
 801502e:	4607      	mov	r7, r0
 8015030:	f300 808e 	bgt.w	8015150 <_dtoa_r+0x9a8>
 8015034:	9b05      	ldr	r3, [sp, #20]
 8015036:	2b02      	cmp	r3, #2
 8015038:	dc50      	bgt.n	80150dc <_dtoa_r+0x934>
 801503a:	e089      	b.n	8015150 <_dtoa_r+0x9a8>
 801503c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801503e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8015042:	e75d      	b.n	8014f00 <_dtoa_r+0x758>
 8015044:	9b01      	ldr	r3, [sp, #4]
 8015046:	1e5e      	subs	r6, r3, #1
 8015048:	9b06      	ldr	r3, [sp, #24]
 801504a:	42b3      	cmp	r3, r6
 801504c:	bfbf      	itttt	lt
 801504e:	9b06      	ldrlt	r3, [sp, #24]
 8015050:	9606      	strlt	r6, [sp, #24]
 8015052:	1af2      	sublt	r2, r6, r3
 8015054:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8015056:	bfb6      	itet	lt
 8015058:	189b      	addlt	r3, r3, r2
 801505a:	1b9e      	subge	r6, r3, r6
 801505c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801505e:	9b01      	ldr	r3, [sp, #4]
 8015060:	bfb8      	it	lt
 8015062:	2600      	movlt	r6, #0
 8015064:	2b00      	cmp	r3, #0
 8015066:	bfb5      	itete	lt
 8015068:	eba8 0503 	sublt.w	r5, r8, r3
 801506c:	9b01      	ldrge	r3, [sp, #4]
 801506e:	2300      	movlt	r3, #0
 8015070:	4645      	movge	r5, r8
 8015072:	e747      	b.n	8014f04 <_dtoa_r+0x75c>
 8015074:	9e06      	ldr	r6, [sp, #24]
 8015076:	9f08      	ldr	r7, [sp, #32]
 8015078:	4645      	mov	r5, r8
 801507a:	e74c      	b.n	8014f16 <_dtoa_r+0x76e>
 801507c:	9a06      	ldr	r2, [sp, #24]
 801507e:	e775      	b.n	8014f6c <_dtoa_r+0x7c4>
 8015080:	9b05      	ldr	r3, [sp, #20]
 8015082:	2b01      	cmp	r3, #1
 8015084:	dc18      	bgt.n	80150b8 <_dtoa_r+0x910>
 8015086:	9b02      	ldr	r3, [sp, #8]
 8015088:	b9b3      	cbnz	r3, 80150b8 <_dtoa_r+0x910>
 801508a:	9b03      	ldr	r3, [sp, #12]
 801508c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015090:	b9a3      	cbnz	r3, 80150bc <_dtoa_r+0x914>
 8015092:	9b03      	ldr	r3, [sp, #12]
 8015094:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015098:	0d1b      	lsrs	r3, r3, #20
 801509a:	051b      	lsls	r3, r3, #20
 801509c:	b12b      	cbz	r3, 80150aa <_dtoa_r+0x902>
 801509e:	9b04      	ldr	r3, [sp, #16]
 80150a0:	3301      	adds	r3, #1
 80150a2:	9304      	str	r3, [sp, #16]
 80150a4:	f108 0801 	add.w	r8, r8, #1
 80150a8:	2301      	movs	r3, #1
 80150aa:	9306      	str	r3, [sp, #24]
 80150ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80150ae:	2b00      	cmp	r3, #0
 80150b0:	f47f af74 	bne.w	8014f9c <_dtoa_r+0x7f4>
 80150b4:	2001      	movs	r0, #1
 80150b6:	e779      	b.n	8014fac <_dtoa_r+0x804>
 80150b8:	2300      	movs	r3, #0
 80150ba:	e7f6      	b.n	80150aa <_dtoa_r+0x902>
 80150bc:	9b02      	ldr	r3, [sp, #8]
 80150be:	e7f4      	b.n	80150aa <_dtoa_r+0x902>
 80150c0:	d085      	beq.n	8014fce <_dtoa_r+0x826>
 80150c2:	4618      	mov	r0, r3
 80150c4:	301c      	adds	r0, #28
 80150c6:	e77d      	b.n	8014fc4 <_dtoa_r+0x81c>
 80150c8:	40240000 	.word	0x40240000
 80150cc:	9b01      	ldr	r3, [sp, #4]
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	dc38      	bgt.n	8015144 <_dtoa_r+0x99c>
 80150d2:	9b05      	ldr	r3, [sp, #20]
 80150d4:	2b02      	cmp	r3, #2
 80150d6:	dd35      	ble.n	8015144 <_dtoa_r+0x99c>
 80150d8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80150dc:	f1b9 0f00 	cmp.w	r9, #0
 80150e0:	d10d      	bne.n	80150fe <_dtoa_r+0x956>
 80150e2:	4631      	mov	r1, r6
 80150e4:	464b      	mov	r3, r9
 80150e6:	2205      	movs	r2, #5
 80150e8:	4620      	mov	r0, r4
 80150ea:	f000 fe7d 	bl	8015de8 <__multadd>
 80150ee:	4601      	mov	r1, r0
 80150f0:	4606      	mov	r6, r0
 80150f2:	4658      	mov	r0, fp
 80150f4:	f001 f8de 	bl	80162b4 <__mcmp>
 80150f8:	2800      	cmp	r0, #0
 80150fa:	f73f adbd 	bgt.w	8014c78 <_dtoa_r+0x4d0>
 80150fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015100:	9d00      	ldr	r5, [sp, #0]
 8015102:	ea6f 0a03 	mvn.w	sl, r3
 8015106:	f04f 0800 	mov.w	r8, #0
 801510a:	4631      	mov	r1, r6
 801510c:	4620      	mov	r0, r4
 801510e:	f000 fe49 	bl	8015da4 <_Bfree>
 8015112:	2f00      	cmp	r7, #0
 8015114:	f43f aeb4 	beq.w	8014e80 <_dtoa_r+0x6d8>
 8015118:	f1b8 0f00 	cmp.w	r8, #0
 801511c:	d005      	beq.n	801512a <_dtoa_r+0x982>
 801511e:	45b8      	cmp	r8, r7
 8015120:	d003      	beq.n	801512a <_dtoa_r+0x982>
 8015122:	4641      	mov	r1, r8
 8015124:	4620      	mov	r0, r4
 8015126:	f000 fe3d 	bl	8015da4 <_Bfree>
 801512a:	4639      	mov	r1, r7
 801512c:	4620      	mov	r0, r4
 801512e:	f000 fe39 	bl	8015da4 <_Bfree>
 8015132:	e6a5      	b.n	8014e80 <_dtoa_r+0x6d8>
 8015134:	2600      	movs	r6, #0
 8015136:	4637      	mov	r7, r6
 8015138:	e7e1      	b.n	80150fe <_dtoa_r+0x956>
 801513a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801513c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8015140:	4637      	mov	r7, r6
 8015142:	e599      	b.n	8014c78 <_dtoa_r+0x4d0>
 8015144:	9b08      	ldr	r3, [sp, #32]
 8015146:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801514a:	2b00      	cmp	r3, #0
 801514c:	f000 80fd 	beq.w	801534a <_dtoa_r+0xba2>
 8015150:	2d00      	cmp	r5, #0
 8015152:	dd05      	ble.n	8015160 <_dtoa_r+0x9b8>
 8015154:	4639      	mov	r1, r7
 8015156:	462a      	mov	r2, r5
 8015158:	4620      	mov	r0, r4
 801515a:	f001 f83f 	bl	80161dc <__lshift>
 801515e:	4607      	mov	r7, r0
 8015160:	9b06      	ldr	r3, [sp, #24]
 8015162:	2b00      	cmp	r3, #0
 8015164:	d05c      	beq.n	8015220 <_dtoa_r+0xa78>
 8015166:	6879      	ldr	r1, [r7, #4]
 8015168:	4620      	mov	r0, r4
 801516a:	f000 fddb 	bl	8015d24 <_Balloc>
 801516e:	4605      	mov	r5, r0
 8015170:	b928      	cbnz	r0, 801517e <_dtoa_r+0x9d6>
 8015172:	4b80      	ldr	r3, [pc, #512]	; (8015374 <_dtoa_r+0xbcc>)
 8015174:	4602      	mov	r2, r0
 8015176:	f240 21ea 	movw	r1, #746	; 0x2ea
 801517a:	f7ff bb2e 	b.w	80147da <_dtoa_r+0x32>
 801517e:	693a      	ldr	r2, [r7, #16]
 8015180:	3202      	adds	r2, #2
 8015182:	0092      	lsls	r2, r2, #2
 8015184:	f107 010c 	add.w	r1, r7, #12
 8015188:	300c      	adds	r0, #12
 801518a:	f7fd fa9c 	bl	80126c6 <memcpy>
 801518e:	2201      	movs	r2, #1
 8015190:	4629      	mov	r1, r5
 8015192:	4620      	mov	r0, r4
 8015194:	f001 f822 	bl	80161dc <__lshift>
 8015198:	9b00      	ldr	r3, [sp, #0]
 801519a:	3301      	adds	r3, #1
 801519c:	9301      	str	r3, [sp, #4]
 801519e:	9b00      	ldr	r3, [sp, #0]
 80151a0:	444b      	add	r3, r9
 80151a2:	9307      	str	r3, [sp, #28]
 80151a4:	9b02      	ldr	r3, [sp, #8]
 80151a6:	f003 0301 	and.w	r3, r3, #1
 80151aa:	46b8      	mov	r8, r7
 80151ac:	9306      	str	r3, [sp, #24]
 80151ae:	4607      	mov	r7, r0
 80151b0:	9b01      	ldr	r3, [sp, #4]
 80151b2:	4631      	mov	r1, r6
 80151b4:	3b01      	subs	r3, #1
 80151b6:	4658      	mov	r0, fp
 80151b8:	9302      	str	r3, [sp, #8]
 80151ba:	f7ff fa69 	bl	8014690 <quorem>
 80151be:	4603      	mov	r3, r0
 80151c0:	3330      	adds	r3, #48	; 0x30
 80151c2:	9004      	str	r0, [sp, #16]
 80151c4:	4641      	mov	r1, r8
 80151c6:	4658      	mov	r0, fp
 80151c8:	9308      	str	r3, [sp, #32]
 80151ca:	f001 f873 	bl	80162b4 <__mcmp>
 80151ce:	463a      	mov	r2, r7
 80151d0:	4681      	mov	r9, r0
 80151d2:	4631      	mov	r1, r6
 80151d4:	4620      	mov	r0, r4
 80151d6:	f001 f889 	bl	80162ec <__mdiff>
 80151da:	68c2      	ldr	r2, [r0, #12]
 80151dc:	9b08      	ldr	r3, [sp, #32]
 80151de:	4605      	mov	r5, r0
 80151e0:	bb02      	cbnz	r2, 8015224 <_dtoa_r+0xa7c>
 80151e2:	4601      	mov	r1, r0
 80151e4:	4658      	mov	r0, fp
 80151e6:	f001 f865 	bl	80162b4 <__mcmp>
 80151ea:	9b08      	ldr	r3, [sp, #32]
 80151ec:	4602      	mov	r2, r0
 80151ee:	4629      	mov	r1, r5
 80151f0:	4620      	mov	r0, r4
 80151f2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80151f6:	f000 fdd5 	bl	8015da4 <_Bfree>
 80151fa:	9b05      	ldr	r3, [sp, #20]
 80151fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80151fe:	9d01      	ldr	r5, [sp, #4]
 8015200:	ea43 0102 	orr.w	r1, r3, r2
 8015204:	9b06      	ldr	r3, [sp, #24]
 8015206:	430b      	orrs	r3, r1
 8015208:	9b08      	ldr	r3, [sp, #32]
 801520a:	d10d      	bne.n	8015228 <_dtoa_r+0xa80>
 801520c:	2b39      	cmp	r3, #57	; 0x39
 801520e:	d029      	beq.n	8015264 <_dtoa_r+0xabc>
 8015210:	f1b9 0f00 	cmp.w	r9, #0
 8015214:	dd01      	ble.n	801521a <_dtoa_r+0xa72>
 8015216:	9b04      	ldr	r3, [sp, #16]
 8015218:	3331      	adds	r3, #49	; 0x31
 801521a:	9a02      	ldr	r2, [sp, #8]
 801521c:	7013      	strb	r3, [r2, #0]
 801521e:	e774      	b.n	801510a <_dtoa_r+0x962>
 8015220:	4638      	mov	r0, r7
 8015222:	e7b9      	b.n	8015198 <_dtoa_r+0x9f0>
 8015224:	2201      	movs	r2, #1
 8015226:	e7e2      	b.n	80151ee <_dtoa_r+0xa46>
 8015228:	f1b9 0f00 	cmp.w	r9, #0
 801522c:	db06      	blt.n	801523c <_dtoa_r+0xa94>
 801522e:	9905      	ldr	r1, [sp, #20]
 8015230:	ea41 0909 	orr.w	r9, r1, r9
 8015234:	9906      	ldr	r1, [sp, #24]
 8015236:	ea59 0101 	orrs.w	r1, r9, r1
 801523a:	d120      	bne.n	801527e <_dtoa_r+0xad6>
 801523c:	2a00      	cmp	r2, #0
 801523e:	ddec      	ble.n	801521a <_dtoa_r+0xa72>
 8015240:	4659      	mov	r1, fp
 8015242:	2201      	movs	r2, #1
 8015244:	4620      	mov	r0, r4
 8015246:	9301      	str	r3, [sp, #4]
 8015248:	f000 ffc8 	bl	80161dc <__lshift>
 801524c:	4631      	mov	r1, r6
 801524e:	4683      	mov	fp, r0
 8015250:	f001 f830 	bl	80162b4 <__mcmp>
 8015254:	2800      	cmp	r0, #0
 8015256:	9b01      	ldr	r3, [sp, #4]
 8015258:	dc02      	bgt.n	8015260 <_dtoa_r+0xab8>
 801525a:	d1de      	bne.n	801521a <_dtoa_r+0xa72>
 801525c:	07da      	lsls	r2, r3, #31
 801525e:	d5dc      	bpl.n	801521a <_dtoa_r+0xa72>
 8015260:	2b39      	cmp	r3, #57	; 0x39
 8015262:	d1d8      	bne.n	8015216 <_dtoa_r+0xa6e>
 8015264:	9a02      	ldr	r2, [sp, #8]
 8015266:	2339      	movs	r3, #57	; 0x39
 8015268:	7013      	strb	r3, [r2, #0]
 801526a:	462b      	mov	r3, r5
 801526c:	461d      	mov	r5, r3
 801526e:	3b01      	subs	r3, #1
 8015270:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8015274:	2a39      	cmp	r2, #57	; 0x39
 8015276:	d050      	beq.n	801531a <_dtoa_r+0xb72>
 8015278:	3201      	adds	r2, #1
 801527a:	701a      	strb	r2, [r3, #0]
 801527c:	e745      	b.n	801510a <_dtoa_r+0x962>
 801527e:	2a00      	cmp	r2, #0
 8015280:	dd03      	ble.n	801528a <_dtoa_r+0xae2>
 8015282:	2b39      	cmp	r3, #57	; 0x39
 8015284:	d0ee      	beq.n	8015264 <_dtoa_r+0xabc>
 8015286:	3301      	adds	r3, #1
 8015288:	e7c7      	b.n	801521a <_dtoa_r+0xa72>
 801528a:	9a01      	ldr	r2, [sp, #4]
 801528c:	9907      	ldr	r1, [sp, #28]
 801528e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8015292:	428a      	cmp	r2, r1
 8015294:	d02a      	beq.n	80152ec <_dtoa_r+0xb44>
 8015296:	4659      	mov	r1, fp
 8015298:	2300      	movs	r3, #0
 801529a:	220a      	movs	r2, #10
 801529c:	4620      	mov	r0, r4
 801529e:	f000 fda3 	bl	8015de8 <__multadd>
 80152a2:	45b8      	cmp	r8, r7
 80152a4:	4683      	mov	fp, r0
 80152a6:	f04f 0300 	mov.w	r3, #0
 80152aa:	f04f 020a 	mov.w	r2, #10
 80152ae:	4641      	mov	r1, r8
 80152b0:	4620      	mov	r0, r4
 80152b2:	d107      	bne.n	80152c4 <_dtoa_r+0xb1c>
 80152b4:	f000 fd98 	bl	8015de8 <__multadd>
 80152b8:	4680      	mov	r8, r0
 80152ba:	4607      	mov	r7, r0
 80152bc:	9b01      	ldr	r3, [sp, #4]
 80152be:	3301      	adds	r3, #1
 80152c0:	9301      	str	r3, [sp, #4]
 80152c2:	e775      	b.n	80151b0 <_dtoa_r+0xa08>
 80152c4:	f000 fd90 	bl	8015de8 <__multadd>
 80152c8:	4639      	mov	r1, r7
 80152ca:	4680      	mov	r8, r0
 80152cc:	2300      	movs	r3, #0
 80152ce:	220a      	movs	r2, #10
 80152d0:	4620      	mov	r0, r4
 80152d2:	f000 fd89 	bl	8015de8 <__multadd>
 80152d6:	4607      	mov	r7, r0
 80152d8:	e7f0      	b.n	80152bc <_dtoa_r+0xb14>
 80152da:	f1b9 0f00 	cmp.w	r9, #0
 80152de:	9a00      	ldr	r2, [sp, #0]
 80152e0:	bfcc      	ite	gt
 80152e2:	464d      	movgt	r5, r9
 80152e4:	2501      	movle	r5, #1
 80152e6:	4415      	add	r5, r2
 80152e8:	f04f 0800 	mov.w	r8, #0
 80152ec:	4659      	mov	r1, fp
 80152ee:	2201      	movs	r2, #1
 80152f0:	4620      	mov	r0, r4
 80152f2:	9301      	str	r3, [sp, #4]
 80152f4:	f000 ff72 	bl	80161dc <__lshift>
 80152f8:	4631      	mov	r1, r6
 80152fa:	4683      	mov	fp, r0
 80152fc:	f000 ffda 	bl	80162b4 <__mcmp>
 8015300:	2800      	cmp	r0, #0
 8015302:	dcb2      	bgt.n	801526a <_dtoa_r+0xac2>
 8015304:	d102      	bne.n	801530c <_dtoa_r+0xb64>
 8015306:	9b01      	ldr	r3, [sp, #4]
 8015308:	07db      	lsls	r3, r3, #31
 801530a:	d4ae      	bmi.n	801526a <_dtoa_r+0xac2>
 801530c:	462b      	mov	r3, r5
 801530e:	461d      	mov	r5, r3
 8015310:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015314:	2a30      	cmp	r2, #48	; 0x30
 8015316:	d0fa      	beq.n	801530e <_dtoa_r+0xb66>
 8015318:	e6f7      	b.n	801510a <_dtoa_r+0x962>
 801531a:	9a00      	ldr	r2, [sp, #0]
 801531c:	429a      	cmp	r2, r3
 801531e:	d1a5      	bne.n	801526c <_dtoa_r+0xac4>
 8015320:	f10a 0a01 	add.w	sl, sl, #1
 8015324:	2331      	movs	r3, #49	; 0x31
 8015326:	e779      	b.n	801521c <_dtoa_r+0xa74>
 8015328:	4b13      	ldr	r3, [pc, #76]	; (8015378 <_dtoa_r+0xbd0>)
 801532a:	f7ff baaf 	b.w	801488c <_dtoa_r+0xe4>
 801532e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015330:	2b00      	cmp	r3, #0
 8015332:	f47f aa86 	bne.w	8014842 <_dtoa_r+0x9a>
 8015336:	4b11      	ldr	r3, [pc, #68]	; (801537c <_dtoa_r+0xbd4>)
 8015338:	f7ff baa8 	b.w	801488c <_dtoa_r+0xe4>
 801533c:	f1b9 0f00 	cmp.w	r9, #0
 8015340:	dc03      	bgt.n	801534a <_dtoa_r+0xba2>
 8015342:	9b05      	ldr	r3, [sp, #20]
 8015344:	2b02      	cmp	r3, #2
 8015346:	f73f aec9 	bgt.w	80150dc <_dtoa_r+0x934>
 801534a:	9d00      	ldr	r5, [sp, #0]
 801534c:	4631      	mov	r1, r6
 801534e:	4658      	mov	r0, fp
 8015350:	f7ff f99e 	bl	8014690 <quorem>
 8015354:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8015358:	f805 3b01 	strb.w	r3, [r5], #1
 801535c:	9a00      	ldr	r2, [sp, #0]
 801535e:	1aaa      	subs	r2, r5, r2
 8015360:	4591      	cmp	r9, r2
 8015362:	ddba      	ble.n	80152da <_dtoa_r+0xb32>
 8015364:	4659      	mov	r1, fp
 8015366:	2300      	movs	r3, #0
 8015368:	220a      	movs	r2, #10
 801536a:	4620      	mov	r0, r4
 801536c:	f000 fd3c 	bl	8015de8 <__multadd>
 8015370:	4683      	mov	fp, r0
 8015372:	e7eb      	b.n	801534c <_dtoa_r+0xba4>
 8015374:	08017fa3 	.word	0x08017fa3
 8015378:	08017ea0 	.word	0x08017ea0
 801537c:	08017f20 	.word	0x08017f20

08015380 <__sflush_r>:
 8015380:	898a      	ldrh	r2, [r1, #12]
 8015382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015386:	4605      	mov	r5, r0
 8015388:	0710      	lsls	r0, r2, #28
 801538a:	460c      	mov	r4, r1
 801538c:	d458      	bmi.n	8015440 <__sflush_r+0xc0>
 801538e:	684b      	ldr	r3, [r1, #4]
 8015390:	2b00      	cmp	r3, #0
 8015392:	dc05      	bgt.n	80153a0 <__sflush_r+0x20>
 8015394:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015396:	2b00      	cmp	r3, #0
 8015398:	dc02      	bgt.n	80153a0 <__sflush_r+0x20>
 801539a:	2000      	movs	r0, #0
 801539c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80153a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80153a2:	2e00      	cmp	r6, #0
 80153a4:	d0f9      	beq.n	801539a <__sflush_r+0x1a>
 80153a6:	2300      	movs	r3, #0
 80153a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80153ac:	682f      	ldr	r7, [r5, #0]
 80153ae:	602b      	str	r3, [r5, #0]
 80153b0:	d032      	beq.n	8015418 <__sflush_r+0x98>
 80153b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80153b4:	89a3      	ldrh	r3, [r4, #12]
 80153b6:	075a      	lsls	r2, r3, #29
 80153b8:	d505      	bpl.n	80153c6 <__sflush_r+0x46>
 80153ba:	6863      	ldr	r3, [r4, #4]
 80153bc:	1ac0      	subs	r0, r0, r3
 80153be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80153c0:	b10b      	cbz	r3, 80153c6 <__sflush_r+0x46>
 80153c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80153c4:	1ac0      	subs	r0, r0, r3
 80153c6:	2300      	movs	r3, #0
 80153c8:	4602      	mov	r2, r0
 80153ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80153cc:	6a21      	ldr	r1, [r4, #32]
 80153ce:	4628      	mov	r0, r5
 80153d0:	47b0      	blx	r6
 80153d2:	1c43      	adds	r3, r0, #1
 80153d4:	89a3      	ldrh	r3, [r4, #12]
 80153d6:	d106      	bne.n	80153e6 <__sflush_r+0x66>
 80153d8:	6829      	ldr	r1, [r5, #0]
 80153da:	291d      	cmp	r1, #29
 80153dc:	d82c      	bhi.n	8015438 <__sflush_r+0xb8>
 80153de:	4a2a      	ldr	r2, [pc, #168]	; (8015488 <__sflush_r+0x108>)
 80153e0:	40ca      	lsrs	r2, r1
 80153e2:	07d6      	lsls	r6, r2, #31
 80153e4:	d528      	bpl.n	8015438 <__sflush_r+0xb8>
 80153e6:	2200      	movs	r2, #0
 80153e8:	6062      	str	r2, [r4, #4]
 80153ea:	04d9      	lsls	r1, r3, #19
 80153ec:	6922      	ldr	r2, [r4, #16]
 80153ee:	6022      	str	r2, [r4, #0]
 80153f0:	d504      	bpl.n	80153fc <__sflush_r+0x7c>
 80153f2:	1c42      	adds	r2, r0, #1
 80153f4:	d101      	bne.n	80153fa <__sflush_r+0x7a>
 80153f6:	682b      	ldr	r3, [r5, #0]
 80153f8:	b903      	cbnz	r3, 80153fc <__sflush_r+0x7c>
 80153fa:	6560      	str	r0, [r4, #84]	; 0x54
 80153fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80153fe:	602f      	str	r7, [r5, #0]
 8015400:	2900      	cmp	r1, #0
 8015402:	d0ca      	beq.n	801539a <__sflush_r+0x1a>
 8015404:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015408:	4299      	cmp	r1, r3
 801540a:	d002      	beq.n	8015412 <__sflush_r+0x92>
 801540c:	4628      	mov	r0, r5
 801540e:	f001 f953 	bl	80166b8 <_free_r>
 8015412:	2000      	movs	r0, #0
 8015414:	6360      	str	r0, [r4, #52]	; 0x34
 8015416:	e7c1      	b.n	801539c <__sflush_r+0x1c>
 8015418:	6a21      	ldr	r1, [r4, #32]
 801541a:	2301      	movs	r3, #1
 801541c:	4628      	mov	r0, r5
 801541e:	47b0      	blx	r6
 8015420:	1c41      	adds	r1, r0, #1
 8015422:	d1c7      	bne.n	80153b4 <__sflush_r+0x34>
 8015424:	682b      	ldr	r3, [r5, #0]
 8015426:	2b00      	cmp	r3, #0
 8015428:	d0c4      	beq.n	80153b4 <__sflush_r+0x34>
 801542a:	2b1d      	cmp	r3, #29
 801542c:	d001      	beq.n	8015432 <__sflush_r+0xb2>
 801542e:	2b16      	cmp	r3, #22
 8015430:	d101      	bne.n	8015436 <__sflush_r+0xb6>
 8015432:	602f      	str	r7, [r5, #0]
 8015434:	e7b1      	b.n	801539a <__sflush_r+0x1a>
 8015436:	89a3      	ldrh	r3, [r4, #12]
 8015438:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801543c:	81a3      	strh	r3, [r4, #12]
 801543e:	e7ad      	b.n	801539c <__sflush_r+0x1c>
 8015440:	690f      	ldr	r7, [r1, #16]
 8015442:	2f00      	cmp	r7, #0
 8015444:	d0a9      	beq.n	801539a <__sflush_r+0x1a>
 8015446:	0793      	lsls	r3, r2, #30
 8015448:	680e      	ldr	r6, [r1, #0]
 801544a:	bf08      	it	eq
 801544c:	694b      	ldreq	r3, [r1, #20]
 801544e:	600f      	str	r7, [r1, #0]
 8015450:	bf18      	it	ne
 8015452:	2300      	movne	r3, #0
 8015454:	eba6 0807 	sub.w	r8, r6, r7
 8015458:	608b      	str	r3, [r1, #8]
 801545a:	f1b8 0f00 	cmp.w	r8, #0
 801545e:	dd9c      	ble.n	801539a <__sflush_r+0x1a>
 8015460:	6a21      	ldr	r1, [r4, #32]
 8015462:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015464:	4643      	mov	r3, r8
 8015466:	463a      	mov	r2, r7
 8015468:	4628      	mov	r0, r5
 801546a:	47b0      	blx	r6
 801546c:	2800      	cmp	r0, #0
 801546e:	dc06      	bgt.n	801547e <__sflush_r+0xfe>
 8015470:	89a3      	ldrh	r3, [r4, #12]
 8015472:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015476:	81a3      	strh	r3, [r4, #12]
 8015478:	f04f 30ff 	mov.w	r0, #4294967295
 801547c:	e78e      	b.n	801539c <__sflush_r+0x1c>
 801547e:	4407      	add	r7, r0
 8015480:	eba8 0800 	sub.w	r8, r8, r0
 8015484:	e7e9      	b.n	801545a <__sflush_r+0xda>
 8015486:	bf00      	nop
 8015488:	20400001 	.word	0x20400001

0801548c <_fflush_r>:
 801548c:	b538      	push	{r3, r4, r5, lr}
 801548e:	690b      	ldr	r3, [r1, #16]
 8015490:	4605      	mov	r5, r0
 8015492:	460c      	mov	r4, r1
 8015494:	b913      	cbnz	r3, 801549c <_fflush_r+0x10>
 8015496:	2500      	movs	r5, #0
 8015498:	4628      	mov	r0, r5
 801549a:	bd38      	pop	{r3, r4, r5, pc}
 801549c:	b118      	cbz	r0, 80154a6 <_fflush_r+0x1a>
 801549e:	6983      	ldr	r3, [r0, #24]
 80154a0:	b90b      	cbnz	r3, 80154a6 <_fflush_r+0x1a>
 80154a2:	f7fd f84b 	bl	801253c <__sinit>
 80154a6:	4b14      	ldr	r3, [pc, #80]	; (80154f8 <_fflush_r+0x6c>)
 80154a8:	429c      	cmp	r4, r3
 80154aa:	d11b      	bne.n	80154e4 <_fflush_r+0x58>
 80154ac:	686c      	ldr	r4, [r5, #4]
 80154ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d0ef      	beq.n	8015496 <_fflush_r+0xa>
 80154b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80154b8:	07d0      	lsls	r0, r2, #31
 80154ba:	d404      	bmi.n	80154c6 <_fflush_r+0x3a>
 80154bc:	0599      	lsls	r1, r3, #22
 80154be:	d402      	bmi.n	80154c6 <_fflush_r+0x3a>
 80154c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80154c2:	f7fd f8fe 	bl	80126c2 <__retarget_lock_acquire_recursive>
 80154c6:	4628      	mov	r0, r5
 80154c8:	4621      	mov	r1, r4
 80154ca:	f7ff ff59 	bl	8015380 <__sflush_r>
 80154ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80154d0:	07da      	lsls	r2, r3, #31
 80154d2:	4605      	mov	r5, r0
 80154d4:	d4e0      	bmi.n	8015498 <_fflush_r+0xc>
 80154d6:	89a3      	ldrh	r3, [r4, #12]
 80154d8:	059b      	lsls	r3, r3, #22
 80154da:	d4dd      	bmi.n	8015498 <_fflush_r+0xc>
 80154dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80154de:	f7fd f8f1 	bl	80126c4 <__retarget_lock_release_recursive>
 80154e2:	e7d9      	b.n	8015498 <_fflush_r+0xc>
 80154e4:	4b05      	ldr	r3, [pc, #20]	; (80154fc <_fflush_r+0x70>)
 80154e6:	429c      	cmp	r4, r3
 80154e8:	d101      	bne.n	80154ee <_fflush_r+0x62>
 80154ea:	68ac      	ldr	r4, [r5, #8]
 80154ec:	e7df      	b.n	80154ae <_fflush_r+0x22>
 80154ee:	4b04      	ldr	r3, [pc, #16]	; (8015500 <_fflush_r+0x74>)
 80154f0:	429c      	cmp	r4, r3
 80154f2:	bf08      	it	eq
 80154f4:	68ec      	ldreq	r4, [r5, #12]
 80154f6:	e7da      	b.n	80154ae <_fflush_r+0x22>
 80154f8:	08017e4c 	.word	0x08017e4c
 80154fc:	08017e6c 	.word	0x08017e6c
 8015500:	08017e2c 	.word	0x08017e2c

08015504 <rshift>:
 8015504:	6903      	ldr	r3, [r0, #16]
 8015506:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801550a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801550e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8015512:	f100 0414 	add.w	r4, r0, #20
 8015516:	dd45      	ble.n	80155a4 <rshift+0xa0>
 8015518:	f011 011f 	ands.w	r1, r1, #31
 801551c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8015520:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8015524:	d10c      	bne.n	8015540 <rshift+0x3c>
 8015526:	f100 0710 	add.w	r7, r0, #16
 801552a:	4629      	mov	r1, r5
 801552c:	42b1      	cmp	r1, r6
 801552e:	d334      	bcc.n	801559a <rshift+0x96>
 8015530:	1a9b      	subs	r3, r3, r2
 8015532:	009b      	lsls	r3, r3, #2
 8015534:	1eea      	subs	r2, r5, #3
 8015536:	4296      	cmp	r6, r2
 8015538:	bf38      	it	cc
 801553a:	2300      	movcc	r3, #0
 801553c:	4423      	add	r3, r4
 801553e:	e015      	b.n	801556c <rshift+0x68>
 8015540:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8015544:	f1c1 0820 	rsb	r8, r1, #32
 8015548:	40cf      	lsrs	r7, r1
 801554a:	f105 0e04 	add.w	lr, r5, #4
 801554e:	46a1      	mov	r9, r4
 8015550:	4576      	cmp	r6, lr
 8015552:	46f4      	mov	ip, lr
 8015554:	d815      	bhi.n	8015582 <rshift+0x7e>
 8015556:	1a9b      	subs	r3, r3, r2
 8015558:	009a      	lsls	r2, r3, #2
 801555a:	3a04      	subs	r2, #4
 801555c:	3501      	adds	r5, #1
 801555e:	42ae      	cmp	r6, r5
 8015560:	bf38      	it	cc
 8015562:	2200      	movcc	r2, #0
 8015564:	18a3      	adds	r3, r4, r2
 8015566:	50a7      	str	r7, [r4, r2]
 8015568:	b107      	cbz	r7, 801556c <rshift+0x68>
 801556a:	3304      	adds	r3, #4
 801556c:	1b1a      	subs	r2, r3, r4
 801556e:	42a3      	cmp	r3, r4
 8015570:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015574:	bf08      	it	eq
 8015576:	2300      	moveq	r3, #0
 8015578:	6102      	str	r2, [r0, #16]
 801557a:	bf08      	it	eq
 801557c:	6143      	streq	r3, [r0, #20]
 801557e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015582:	f8dc c000 	ldr.w	ip, [ip]
 8015586:	fa0c fc08 	lsl.w	ip, ip, r8
 801558a:	ea4c 0707 	orr.w	r7, ip, r7
 801558e:	f849 7b04 	str.w	r7, [r9], #4
 8015592:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015596:	40cf      	lsrs	r7, r1
 8015598:	e7da      	b.n	8015550 <rshift+0x4c>
 801559a:	f851 cb04 	ldr.w	ip, [r1], #4
 801559e:	f847 cf04 	str.w	ip, [r7, #4]!
 80155a2:	e7c3      	b.n	801552c <rshift+0x28>
 80155a4:	4623      	mov	r3, r4
 80155a6:	e7e1      	b.n	801556c <rshift+0x68>

080155a8 <__hexdig_fun>:
 80155a8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80155ac:	2b09      	cmp	r3, #9
 80155ae:	d802      	bhi.n	80155b6 <__hexdig_fun+0xe>
 80155b0:	3820      	subs	r0, #32
 80155b2:	b2c0      	uxtb	r0, r0
 80155b4:	4770      	bx	lr
 80155b6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80155ba:	2b05      	cmp	r3, #5
 80155bc:	d801      	bhi.n	80155c2 <__hexdig_fun+0x1a>
 80155be:	3847      	subs	r0, #71	; 0x47
 80155c0:	e7f7      	b.n	80155b2 <__hexdig_fun+0xa>
 80155c2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80155c6:	2b05      	cmp	r3, #5
 80155c8:	d801      	bhi.n	80155ce <__hexdig_fun+0x26>
 80155ca:	3827      	subs	r0, #39	; 0x27
 80155cc:	e7f1      	b.n	80155b2 <__hexdig_fun+0xa>
 80155ce:	2000      	movs	r0, #0
 80155d0:	4770      	bx	lr
	...

080155d4 <__gethex>:
 80155d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155d8:	ed2d 8b02 	vpush	{d8}
 80155dc:	b089      	sub	sp, #36	; 0x24
 80155de:	ee08 0a10 	vmov	s16, r0
 80155e2:	9304      	str	r3, [sp, #16]
 80155e4:	4bbc      	ldr	r3, [pc, #752]	; (80158d8 <__gethex+0x304>)
 80155e6:	681b      	ldr	r3, [r3, #0]
 80155e8:	9301      	str	r3, [sp, #4]
 80155ea:	4618      	mov	r0, r3
 80155ec:	468b      	mov	fp, r1
 80155ee:	4690      	mov	r8, r2
 80155f0:	f7ea fdfe 	bl	80001f0 <strlen>
 80155f4:	9b01      	ldr	r3, [sp, #4]
 80155f6:	f8db 2000 	ldr.w	r2, [fp]
 80155fa:	4403      	add	r3, r0
 80155fc:	4682      	mov	sl, r0
 80155fe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8015602:	9305      	str	r3, [sp, #20]
 8015604:	1c93      	adds	r3, r2, #2
 8015606:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801560a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801560e:	32fe      	adds	r2, #254	; 0xfe
 8015610:	18d1      	adds	r1, r2, r3
 8015612:	461f      	mov	r7, r3
 8015614:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015618:	9100      	str	r1, [sp, #0]
 801561a:	2830      	cmp	r0, #48	; 0x30
 801561c:	d0f8      	beq.n	8015610 <__gethex+0x3c>
 801561e:	f7ff ffc3 	bl	80155a8 <__hexdig_fun>
 8015622:	4604      	mov	r4, r0
 8015624:	2800      	cmp	r0, #0
 8015626:	d13a      	bne.n	801569e <__gethex+0xca>
 8015628:	9901      	ldr	r1, [sp, #4]
 801562a:	4652      	mov	r2, sl
 801562c:	4638      	mov	r0, r7
 801562e:	f7fe f844 	bl	80136ba <strncmp>
 8015632:	4605      	mov	r5, r0
 8015634:	2800      	cmp	r0, #0
 8015636:	d168      	bne.n	801570a <__gethex+0x136>
 8015638:	f817 000a 	ldrb.w	r0, [r7, sl]
 801563c:	eb07 060a 	add.w	r6, r7, sl
 8015640:	f7ff ffb2 	bl	80155a8 <__hexdig_fun>
 8015644:	2800      	cmp	r0, #0
 8015646:	d062      	beq.n	801570e <__gethex+0x13a>
 8015648:	4633      	mov	r3, r6
 801564a:	7818      	ldrb	r0, [r3, #0]
 801564c:	2830      	cmp	r0, #48	; 0x30
 801564e:	461f      	mov	r7, r3
 8015650:	f103 0301 	add.w	r3, r3, #1
 8015654:	d0f9      	beq.n	801564a <__gethex+0x76>
 8015656:	f7ff ffa7 	bl	80155a8 <__hexdig_fun>
 801565a:	2301      	movs	r3, #1
 801565c:	fab0 f480 	clz	r4, r0
 8015660:	0964      	lsrs	r4, r4, #5
 8015662:	4635      	mov	r5, r6
 8015664:	9300      	str	r3, [sp, #0]
 8015666:	463a      	mov	r2, r7
 8015668:	4616      	mov	r6, r2
 801566a:	3201      	adds	r2, #1
 801566c:	7830      	ldrb	r0, [r6, #0]
 801566e:	f7ff ff9b 	bl	80155a8 <__hexdig_fun>
 8015672:	2800      	cmp	r0, #0
 8015674:	d1f8      	bne.n	8015668 <__gethex+0x94>
 8015676:	9901      	ldr	r1, [sp, #4]
 8015678:	4652      	mov	r2, sl
 801567a:	4630      	mov	r0, r6
 801567c:	f7fe f81d 	bl	80136ba <strncmp>
 8015680:	b980      	cbnz	r0, 80156a4 <__gethex+0xd0>
 8015682:	b94d      	cbnz	r5, 8015698 <__gethex+0xc4>
 8015684:	eb06 050a 	add.w	r5, r6, sl
 8015688:	462a      	mov	r2, r5
 801568a:	4616      	mov	r6, r2
 801568c:	3201      	adds	r2, #1
 801568e:	7830      	ldrb	r0, [r6, #0]
 8015690:	f7ff ff8a 	bl	80155a8 <__hexdig_fun>
 8015694:	2800      	cmp	r0, #0
 8015696:	d1f8      	bne.n	801568a <__gethex+0xb6>
 8015698:	1bad      	subs	r5, r5, r6
 801569a:	00ad      	lsls	r5, r5, #2
 801569c:	e004      	b.n	80156a8 <__gethex+0xd4>
 801569e:	2400      	movs	r4, #0
 80156a0:	4625      	mov	r5, r4
 80156a2:	e7e0      	b.n	8015666 <__gethex+0x92>
 80156a4:	2d00      	cmp	r5, #0
 80156a6:	d1f7      	bne.n	8015698 <__gethex+0xc4>
 80156a8:	7833      	ldrb	r3, [r6, #0]
 80156aa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80156ae:	2b50      	cmp	r3, #80	; 0x50
 80156b0:	d13b      	bne.n	801572a <__gethex+0x156>
 80156b2:	7873      	ldrb	r3, [r6, #1]
 80156b4:	2b2b      	cmp	r3, #43	; 0x2b
 80156b6:	d02c      	beq.n	8015712 <__gethex+0x13e>
 80156b8:	2b2d      	cmp	r3, #45	; 0x2d
 80156ba:	d02e      	beq.n	801571a <__gethex+0x146>
 80156bc:	1c71      	adds	r1, r6, #1
 80156be:	f04f 0900 	mov.w	r9, #0
 80156c2:	7808      	ldrb	r0, [r1, #0]
 80156c4:	f7ff ff70 	bl	80155a8 <__hexdig_fun>
 80156c8:	1e43      	subs	r3, r0, #1
 80156ca:	b2db      	uxtb	r3, r3
 80156cc:	2b18      	cmp	r3, #24
 80156ce:	d82c      	bhi.n	801572a <__gethex+0x156>
 80156d0:	f1a0 0210 	sub.w	r2, r0, #16
 80156d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80156d8:	f7ff ff66 	bl	80155a8 <__hexdig_fun>
 80156dc:	1e43      	subs	r3, r0, #1
 80156de:	b2db      	uxtb	r3, r3
 80156e0:	2b18      	cmp	r3, #24
 80156e2:	d91d      	bls.n	8015720 <__gethex+0x14c>
 80156e4:	f1b9 0f00 	cmp.w	r9, #0
 80156e8:	d000      	beq.n	80156ec <__gethex+0x118>
 80156ea:	4252      	negs	r2, r2
 80156ec:	4415      	add	r5, r2
 80156ee:	f8cb 1000 	str.w	r1, [fp]
 80156f2:	b1e4      	cbz	r4, 801572e <__gethex+0x15a>
 80156f4:	9b00      	ldr	r3, [sp, #0]
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	bf14      	ite	ne
 80156fa:	2700      	movne	r7, #0
 80156fc:	2706      	moveq	r7, #6
 80156fe:	4638      	mov	r0, r7
 8015700:	b009      	add	sp, #36	; 0x24
 8015702:	ecbd 8b02 	vpop	{d8}
 8015706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801570a:	463e      	mov	r6, r7
 801570c:	4625      	mov	r5, r4
 801570e:	2401      	movs	r4, #1
 8015710:	e7ca      	b.n	80156a8 <__gethex+0xd4>
 8015712:	f04f 0900 	mov.w	r9, #0
 8015716:	1cb1      	adds	r1, r6, #2
 8015718:	e7d3      	b.n	80156c2 <__gethex+0xee>
 801571a:	f04f 0901 	mov.w	r9, #1
 801571e:	e7fa      	b.n	8015716 <__gethex+0x142>
 8015720:	230a      	movs	r3, #10
 8015722:	fb03 0202 	mla	r2, r3, r2, r0
 8015726:	3a10      	subs	r2, #16
 8015728:	e7d4      	b.n	80156d4 <__gethex+0x100>
 801572a:	4631      	mov	r1, r6
 801572c:	e7df      	b.n	80156ee <__gethex+0x11a>
 801572e:	1bf3      	subs	r3, r6, r7
 8015730:	3b01      	subs	r3, #1
 8015732:	4621      	mov	r1, r4
 8015734:	2b07      	cmp	r3, #7
 8015736:	dc0b      	bgt.n	8015750 <__gethex+0x17c>
 8015738:	ee18 0a10 	vmov	r0, s16
 801573c:	f000 faf2 	bl	8015d24 <_Balloc>
 8015740:	4604      	mov	r4, r0
 8015742:	b940      	cbnz	r0, 8015756 <__gethex+0x182>
 8015744:	4b65      	ldr	r3, [pc, #404]	; (80158dc <__gethex+0x308>)
 8015746:	4602      	mov	r2, r0
 8015748:	21de      	movs	r1, #222	; 0xde
 801574a:	4865      	ldr	r0, [pc, #404]	; (80158e0 <__gethex+0x30c>)
 801574c:	f001 fada 	bl	8016d04 <__assert_func>
 8015750:	3101      	adds	r1, #1
 8015752:	105b      	asrs	r3, r3, #1
 8015754:	e7ee      	b.n	8015734 <__gethex+0x160>
 8015756:	f100 0914 	add.w	r9, r0, #20
 801575a:	f04f 0b00 	mov.w	fp, #0
 801575e:	f1ca 0301 	rsb	r3, sl, #1
 8015762:	f8cd 9008 	str.w	r9, [sp, #8]
 8015766:	f8cd b000 	str.w	fp, [sp]
 801576a:	9306      	str	r3, [sp, #24]
 801576c:	42b7      	cmp	r7, r6
 801576e:	d340      	bcc.n	80157f2 <__gethex+0x21e>
 8015770:	9802      	ldr	r0, [sp, #8]
 8015772:	9b00      	ldr	r3, [sp, #0]
 8015774:	f840 3b04 	str.w	r3, [r0], #4
 8015778:	eba0 0009 	sub.w	r0, r0, r9
 801577c:	1080      	asrs	r0, r0, #2
 801577e:	0146      	lsls	r6, r0, #5
 8015780:	6120      	str	r0, [r4, #16]
 8015782:	4618      	mov	r0, r3
 8015784:	f000 fbc4 	bl	8015f10 <__hi0bits>
 8015788:	1a30      	subs	r0, r6, r0
 801578a:	f8d8 6000 	ldr.w	r6, [r8]
 801578e:	42b0      	cmp	r0, r6
 8015790:	dd63      	ble.n	801585a <__gethex+0x286>
 8015792:	1b87      	subs	r7, r0, r6
 8015794:	4639      	mov	r1, r7
 8015796:	4620      	mov	r0, r4
 8015798:	f000 ff5e 	bl	8016658 <__any_on>
 801579c:	4682      	mov	sl, r0
 801579e:	b1a8      	cbz	r0, 80157cc <__gethex+0x1f8>
 80157a0:	1e7b      	subs	r3, r7, #1
 80157a2:	1159      	asrs	r1, r3, #5
 80157a4:	f003 021f 	and.w	r2, r3, #31
 80157a8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80157ac:	f04f 0a01 	mov.w	sl, #1
 80157b0:	fa0a f202 	lsl.w	r2, sl, r2
 80157b4:	420a      	tst	r2, r1
 80157b6:	d009      	beq.n	80157cc <__gethex+0x1f8>
 80157b8:	4553      	cmp	r3, sl
 80157ba:	dd05      	ble.n	80157c8 <__gethex+0x1f4>
 80157bc:	1eb9      	subs	r1, r7, #2
 80157be:	4620      	mov	r0, r4
 80157c0:	f000 ff4a 	bl	8016658 <__any_on>
 80157c4:	2800      	cmp	r0, #0
 80157c6:	d145      	bne.n	8015854 <__gethex+0x280>
 80157c8:	f04f 0a02 	mov.w	sl, #2
 80157cc:	4639      	mov	r1, r7
 80157ce:	4620      	mov	r0, r4
 80157d0:	f7ff fe98 	bl	8015504 <rshift>
 80157d4:	443d      	add	r5, r7
 80157d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80157da:	42ab      	cmp	r3, r5
 80157dc:	da4c      	bge.n	8015878 <__gethex+0x2a4>
 80157de:	ee18 0a10 	vmov	r0, s16
 80157e2:	4621      	mov	r1, r4
 80157e4:	f000 fade 	bl	8015da4 <_Bfree>
 80157e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80157ea:	2300      	movs	r3, #0
 80157ec:	6013      	str	r3, [r2, #0]
 80157ee:	27a3      	movs	r7, #163	; 0xa3
 80157f0:	e785      	b.n	80156fe <__gethex+0x12a>
 80157f2:	1e73      	subs	r3, r6, #1
 80157f4:	9a05      	ldr	r2, [sp, #20]
 80157f6:	9303      	str	r3, [sp, #12]
 80157f8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80157fc:	4293      	cmp	r3, r2
 80157fe:	d019      	beq.n	8015834 <__gethex+0x260>
 8015800:	f1bb 0f20 	cmp.w	fp, #32
 8015804:	d107      	bne.n	8015816 <__gethex+0x242>
 8015806:	9b02      	ldr	r3, [sp, #8]
 8015808:	9a00      	ldr	r2, [sp, #0]
 801580a:	f843 2b04 	str.w	r2, [r3], #4
 801580e:	9302      	str	r3, [sp, #8]
 8015810:	2300      	movs	r3, #0
 8015812:	9300      	str	r3, [sp, #0]
 8015814:	469b      	mov	fp, r3
 8015816:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801581a:	f7ff fec5 	bl	80155a8 <__hexdig_fun>
 801581e:	9b00      	ldr	r3, [sp, #0]
 8015820:	f000 000f 	and.w	r0, r0, #15
 8015824:	fa00 f00b 	lsl.w	r0, r0, fp
 8015828:	4303      	orrs	r3, r0
 801582a:	9300      	str	r3, [sp, #0]
 801582c:	f10b 0b04 	add.w	fp, fp, #4
 8015830:	9b03      	ldr	r3, [sp, #12]
 8015832:	e00d      	b.n	8015850 <__gethex+0x27c>
 8015834:	9b03      	ldr	r3, [sp, #12]
 8015836:	9a06      	ldr	r2, [sp, #24]
 8015838:	4413      	add	r3, r2
 801583a:	42bb      	cmp	r3, r7
 801583c:	d3e0      	bcc.n	8015800 <__gethex+0x22c>
 801583e:	4618      	mov	r0, r3
 8015840:	9901      	ldr	r1, [sp, #4]
 8015842:	9307      	str	r3, [sp, #28]
 8015844:	4652      	mov	r2, sl
 8015846:	f7fd ff38 	bl	80136ba <strncmp>
 801584a:	9b07      	ldr	r3, [sp, #28]
 801584c:	2800      	cmp	r0, #0
 801584e:	d1d7      	bne.n	8015800 <__gethex+0x22c>
 8015850:	461e      	mov	r6, r3
 8015852:	e78b      	b.n	801576c <__gethex+0x198>
 8015854:	f04f 0a03 	mov.w	sl, #3
 8015858:	e7b8      	b.n	80157cc <__gethex+0x1f8>
 801585a:	da0a      	bge.n	8015872 <__gethex+0x29e>
 801585c:	1a37      	subs	r7, r6, r0
 801585e:	4621      	mov	r1, r4
 8015860:	ee18 0a10 	vmov	r0, s16
 8015864:	463a      	mov	r2, r7
 8015866:	f000 fcb9 	bl	80161dc <__lshift>
 801586a:	1bed      	subs	r5, r5, r7
 801586c:	4604      	mov	r4, r0
 801586e:	f100 0914 	add.w	r9, r0, #20
 8015872:	f04f 0a00 	mov.w	sl, #0
 8015876:	e7ae      	b.n	80157d6 <__gethex+0x202>
 8015878:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801587c:	42a8      	cmp	r0, r5
 801587e:	dd72      	ble.n	8015966 <__gethex+0x392>
 8015880:	1b45      	subs	r5, r0, r5
 8015882:	42ae      	cmp	r6, r5
 8015884:	dc36      	bgt.n	80158f4 <__gethex+0x320>
 8015886:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801588a:	2b02      	cmp	r3, #2
 801588c:	d02a      	beq.n	80158e4 <__gethex+0x310>
 801588e:	2b03      	cmp	r3, #3
 8015890:	d02c      	beq.n	80158ec <__gethex+0x318>
 8015892:	2b01      	cmp	r3, #1
 8015894:	d115      	bne.n	80158c2 <__gethex+0x2ee>
 8015896:	42ae      	cmp	r6, r5
 8015898:	d113      	bne.n	80158c2 <__gethex+0x2ee>
 801589a:	2e01      	cmp	r6, #1
 801589c:	d10b      	bne.n	80158b6 <__gethex+0x2e2>
 801589e:	9a04      	ldr	r2, [sp, #16]
 80158a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80158a4:	6013      	str	r3, [r2, #0]
 80158a6:	2301      	movs	r3, #1
 80158a8:	6123      	str	r3, [r4, #16]
 80158aa:	f8c9 3000 	str.w	r3, [r9]
 80158ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80158b0:	2762      	movs	r7, #98	; 0x62
 80158b2:	601c      	str	r4, [r3, #0]
 80158b4:	e723      	b.n	80156fe <__gethex+0x12a>
 80158b6:	1e71      	subs	r1, r6, #1
 80158b8:	4620      	mov	r0, r4
 80158ba:	f000 fecd 	bl	8016658 <__any_on>
 80158be:	2800      	cmp	r0, #0
 80158c0:	d1ed      	bne.n	801589e <__gethex+0x2ca>
 80158c2:	ee18 0a10 	vmov	r0, s16
 80158c6:	4621      	mov	r1, r4
 80158c8:	f000 fa6c 	bl	8015da4 <_Bfree>
 80158cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80158ce:	2300      	movs	r3, #0
 80158d0:	6013      	str	r3, [r2, #0]
 80158d2:	2750      	movs	r7, #80	; 0x50
 80158d4:	e713      	b.n	80156fe <__gethex+0x12a>
 80158d6:	bf00      	nop
 80158d8:	08018020 	.word	0x08018020
 80158dc:	08017fa3 	.word	0x08017fa3
 80158e0:	08017fb4 	.word	0x08017fb4
 80158e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80158e6:	2b00      	cmp	r3, #0
 80158e8:	d1eb      	bne.n	80158c2 <__gethex+0x2ee>
 80158ea:	e7d8      	b.n	801589e <__gethex+0x2ca>
 80158ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d1d5      	bne.n	801589e <__gethex+0x2ca>
 80158f2:	e7e6      	b.n	80158c2 <__gethex+0x2ee>
 80158f4:	1e6f      	subs	r7, r5, #1
 80158f6:	f1ba 0f00 	cmp.w	sl, #0
 80158fa:	d131      	bne.n	8015960 <__gethex+0x38c>
 80158fc:	b127      	cbz	r7, 8015908 <__gethex+0x334>
 80158fe:	4639      	mov	r1, r7
 8015900:	4620      	mov	r0, r4
 8015902:	f000 fea9 	bl	8016658 <__any_on>
 8015906:	4682      	mov	sl, r0
 8015908:	117b      	asrs	r3, r7, #5
 801590a:	2101      	movs	r1, #1
 801590c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8015910:	f007 071f 	and.w	r7, r7, #31
 8015914:	fa01 f707 	lsl.w	r7, r1, r7
 8015918:	421f      	tst	r7, r3
 801591a:	4629      	mov	r1, r5
 801591c:	4620      	mov	r0, r4
 801591e:	bf18      	it	ne
 8015920:	f04a 0a02 	orrne.w	sl, sl, #2
 8015924:	1b76      	subs	r6, r6, r5
 8015926:	f7ff fded 	bl	8015504 <rshift>
 801592a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801592e:	2702      	movs	r7, #2
 8015930:	f1ba 0f00 	cmp.w	sl, #0
 8015934:	d048      	beq.n	80159c8 <__gethex+0x3f4>
 8015936:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801593a:	2b02      	cmp	r3, #2
 801593c:	d015      	beq.n	801596a <__gethex+0x396>
 801593e:	2b03      	cmp	r3, #3
 8015940:	d017      	beq.n	8015972 <__gethex+0x39e>
 8015942:	2b01      	cmp	r3, #1
 8015944:	d109      	bne.n	801595a <__gethex+0x386>
 8015946:	f01a 0f02 	tst.w	sl, #2
 801594a:	d006      	beq.n	801595a <__gethex+0x386>
 801594c:	f8d9 0000 	ldr.w	r0, [r9]
 8015950:	ea4a 0a00 	orr.w	sl, sl, r0
 8015954:	f01a 0f01 	tst.w	sl, #1
 8015958:	d10e      	bne.n	8015978 <__gethex+0x3a4>
 801595a:	f047 0710 	orr.w	r7, r7, #16
 801595e:	e033      	b.n	80159c8 <__gethex+0x3f4>
 8015960:	f04f 0a01 	mov.w	sl, #1
 8015964:	e7d0      	b.n	8015908 <__gethex+0x334>
 8015966:	2701      	movs	r7, #1
 8015968:	e7e2      	b.n	8015930 <__gethex+0x35c>
 801596a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801596c:	f1c3 0301 	rsb	r3, r3, #1
 8015970:	9315      	str	r3, [sp, #84]	; 0x54
 8015972:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015974:	2b00      	cmp	r3, #0
 8015976:	d0f0      	beq.n	801595a <__gethex+0x386>
 8015978:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801597c:	f104 0314 	add.w	r3, r4, #20
 8015980:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8015984:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8015988:	f04f 0c00 	mov.w	ip, #0
 801598c:	4618      	mov	r0, r3
 801598e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015992:	f1b2 3fff 	cmp.w	r2, #4294967295
 8015996:	d01c      	beq.n	80159d2 <__gethex+0x3fe>
 8015998:	3201      	adds	r2, #1
 801599a:	6002      	str	r2, [r0, #0]
 801599c:	2f02      	cmp	r7, #2
 801599e:	f104 0314 	add.w	r3, r4, #20
 80159a2:	d13f      	bne.n	8015a24 <__gethex+0x450>
 80159a4:	f8d8 2000 	ldr.w	r2, [r8]
 80159a8:	3a01      	subs	r2, #1
 80159aa:	42b2      	cmp	r2, r6
 80159ac:	d10a      	bne.n	80159c4 <__gethex+0x3f0>
 80159ae:	1171      	asrs	r1, r6, #5
 80159b0:	2201      	movs	r2, #1
 80159b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80159b6:	f006 061f 	and.w	r6, r6, #31
 80159ba:	fa02 f606 	lsl.w	r6, r2, r6
 80159be:	421e      	tst	r6, r3
 80159c0:	bf18      	it	ne
 80159c2:	4617      	movne	r7, r2
 80159c4:	f047 0720 	orr.w	r7, r7, #32
 80159c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80159ca:	601c      	str	r4, [r3, #0]
 80159cc:	9b04      	ldr	r3, [sp, #16]
 80159ce:	601d      	str	r5, [r3, #0]
 80159d0:	e695      	b.n	80156fe <__gethex+0x12a>
 80159d2:	4299      	cmp	r1, r3
 80159d4:	f843 cc04 	str.w	ip, [r3, #-4]
 80159d8:	d8d8      	bhi.n	801598c <__gethex+0x3b8>
 80159da:	68a3      	ldr	r3, [r4, #8]
 80159dc:	459b      	cmp	fp, r3
 80159de:	db19      	blt.n	8015a14 <__gethex+0x440>
 80159e0:	6861      	ldr	r1, [r4, #4]
 80159e2:	ee18 0a10 	vmov	r0, s16
 80159e6:	3101      	adds	r1, #1
 80159e8:	f000 f99c 	bl	8015d24 <_Balloc>
 80159ec:	4681      	mov	r9, r0
 80159ee:	b918      	cbnz	r0, 80159f8 <__gethex+0x424>
 80159f0:	4b1a      	ldr	r3, [pc, #104]	; (8015a5c <__gethex+0x488>)
 80159f2:	4602      	mov	r2, r0
 80159f4:	2184      	movs	r1, #132	; 0x84
 80159f6:	e6a8      	b.n	801574a <__gethex+0x176>
 80159f8:	6922      	ldr	r2, [r4, #16]
 80159fa:	3202      	adds	r2, #2
 80159fc:	f104 010c 	add.w	r1, r4, #12
 8015a00:	0092      	lsls	r2, r2, #2
 8015a02:	300c      	adds	r0, #12
 8015a04:	f7fc fe5f 	bl	80126c6 <memcpy>
 8015a08:	4621      	mov	r1, r4
 8015a0a:	ee18 0a10 	vmov	r0, s16
 8015a0e:	f000 f9c9 	bl	8015da4 <_Bfree>
 8015a12:	464c      	mov	r4, r9
 8015a14:	6923      	ldr	r3, [r4, #16]
 8015a16:	1c5a      	adds	r2, r3, #1
 8015a18:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015a1c:	6122      	str	r2, [r4, #16]
 8015a1e:	2201      	movs	r2, #1
 8015a20:	615a      	str	r2, [r3, #20]
 8015a22:	e7bb      	b.n	801599c <__gethex+0x3c8>
 8015a24:	6922      	ldr	r2, [r4, #16]
 8015a26:	455a      	cmp	r2, fp
 8015a28:	dd0b      	ble.n	8015a42 <__gethex+0x46e>
 8015a2a:	2101      	movs	r1, #1
 8015a2c:	4620      	mov	r0, r4
 8015a2e:	f7ff fd69 	bl	8015504 <rshift>
 8015a32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015a36:	3501      	adds	r5, #1
 8015a38:	42ab      	cmp	r3, r5
 8015a3a:	f6ff aed0 	blt.w	80157de <__gethex+0x20a>
 8015a3e:	2701      	movs	r7, #1
 8015a40:	e7c0      	b.n	80159c4 <__gethex+0x3f0>
 8015a42:	f016 061f 	ands.w	r6, r6, #31
 8015a46:	d0fa      	beq.n	8015a3e <__gethex+0x46a>
 8015a48:	449a      	add	sl, r3
 8015a4a:	f1c6 0620 	rsb	r6, r6, #32
 8015a4e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8015a52:	f000 fa5d 	bl	8015f10 <__hi0bits>
 8015a56:	42b0      	cmp	r0, r6
 8015a58:	dbe7      	blt.n	8015a2a <__gethex+0x456>
 8015a5a:	e7f0      	b.n	8015a3e <__gethex+0x46a>
 8015a5c:	08017fa3 	.word	0x08017fa3

08015a60 <L_shift>:
 8015a60:	f1c2 0208 	rsb	r2, r2, #8
 8015a64:	0092      	lsls	r2, r2, #2
 8015a66:	b570      	push	{r4, r5, r6, lr}
 8015a68:	f1c2 0620 	rsb	r6, r2, #32
 8015a6c:	6843      	ldr	r3, [r0, #4]
 8015a6e:	6804      	ldr	r4, [r0, #0]
 8015a70:	fa03 f506 	lsl.w	r5, r3, r6
 8015a74:	432c      	orrs	r4, r5
 8015a76:	40d3      	lsrs	r3, r2
 8015a78:	6004      	str	r4, [r0, #0]
 8015a7a:	f840 3f04 	str.w	r3, [r0, #4]!
 8015a7e:	4288      	cmp	r0, r1
 8015a80:	d3f4      	bcc.n	8015a6c <L_shift+0xc>
 8015a82:	bd70      	pop	{r4, r5, r6, pc}

08015a84 <__match>:
 8015a84:	b530      	push	{r4, r5, lr}
 8015a86:	6803      	ldr	r3, [r0, #0]
 8015a88:	3301      	adds	r3, #1
 8015a8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015a8e:	b914      	cbnz	r4, 8015a96 <__match+0x12>
 8015a90:	6003      	str	r3, [r0, #0]
 8015a92:	2001      	movs	r0, #1
 8015a94:	bd30      	pop	{r4, r5, pc}
 8015a96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015a9a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8015a9e:	2d19      	cmp	r5, #25
 8015aa0:	bf98      	it	ls
 8015aa2:	3220      	addls	r2, #32
 8015aa4:	42a2      	cmp	r2, r4
 8015aa6:	d0f0      	beq.n	8015a8a <__match+0x6>
 8015aa8:	2000      	movs	r0, #0
 8015aaa:	e7f3      	b.n	8015a94 <__match+0x10>

08015aac <__hexnan>:
 8015aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ab0:	680b      	ldr	r3, [r1, #0]
 8015ab2:	6801      	ldr	r1, [r0, #0]
 8015ab4:	115e      	asrs	r6, r3, #5
 8015ab6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8015aba:	f013 031f 	ands.w	r3, r3, #31
 8015abe:	b087      	sub	sp, #28
 8015ac0:	bf18      	it	ne
 8015ac2:	3604      	addne	r6, #4
 8015ac4:	2500      	movs	r5, #0
 8015ac6:	1f37      	subs	r7, r6, #4
 8015ac8:	4682      	mov	sl, r0
 8015aca:	4690      	mov	r8, r2
 8015acc:	9301      	str	r3, [sp, #4]
 8015ace:	f846 5c04 	str.w	r5, [r6, #-4]
 8015ad2:	46b9      	mov	r9, r7
 8015ad4:	463c      	mov	r4, r7
 8015ad6:	9502      	str	r5, [sp, #8]
 8015ad8:	46ab      	mov	fp, r5
 8015ada:	784a      	ldrb	r2, [r1, #1]
 8015adc:	1c4b      	adds	r3, r1, #1
 8015ade:	9303      	str	r3, [sp, #12]
 8015ae0:	b342      	cbz	r2, 8015b34 <__hexnan+0x88>
 8015ae2:	4610      	mov	r0, r2
 8015ae4:	9105      	str	r1, [sp, #20]
 8015ae6:	9204      	str	r2, [sp, #16]
 8015ae8:	f7ff fd5e 	bl	80155a8 <__hexdig_fun>
 8015aec:	2800      	cmp	r0, #0
 8015aee:	d14f      	bne.n	8015b90 <__hexnan+0xe4>
 8015af0:	9a04      	ldr	r2, [sp, #16]
 8015af2:	9905      	ldr	r1, [sp, #20]
 8015af4:	2a20      	cmp	r2, #32
 8015af6:	d818      	bhi.n	8015b2a <__hexnan+0x7e>
 8015af8:	9b02      	ldr	r3, [sp, #8]
 8015afa:	459b      	cmp	fp, r3
 8015afc:	dd13      	ble.n	8015b26 <__hexnan+0x7a>
 8015afe:	454c      	cmp	r4, r9
 8015b00:	d206      	bcs.n	8015b10 <__hexnan+0x64>
 8015b02:	2d07      	cmp	r5, #7
 8015b04:	dc04      	bgt.n	8015b10 <__hexnan+0x64>
 8015b06:	462a      	mov	r2, r5
 8015b08:	4649      	mov	r1, r9
 8015b0a:	4620      	mov	r0, r4
 8015b0c:	f7ff ffa8 	bl	8015a60 <L_shift>
 8015b10:	4544      	cmp	r4, r8
 8015b12:	d950      	bls.n	8015bb6 <__hexnan+0x10a>
 8015b14:	2300      	movs	r3, #0
 8015b16:	f1a4 0904 	sub.w	r9, r4, #4
 8015b1a:	f844 3c04 	str.w	r3, [r4, #-4]
 8015b1e:	f8cd b008 	str.w	fp, [sp, #8]
 8015b22:	464c      	mov	r4, r9
 8015b24:	461d      	mov	r5, r3
 8015b26:	9903      	ldr	r1, [sp, #12]
 8015b28:	e7d7      	b.n	8015ada <__hexnan+0x2e>
 8015b2a:	2a29      	cmp	r2, #41	; 0x29
 8015b2c:	d156      	bne.n	8015bdc <__hexnan+0x130>
 8015b2e:	3102      	adds	r1, #2
 8015b30:	f8ca 1000 	str.w	r1, [sl]
 8015b34:	f1bb 0f00 	cmp.w	fp, #0
 8015b38:	d050      	beq.n	8015bdc <__hexnan+0x130>
 8015b3a:	454c      	cmp	r4, r9
 8015b3c:	d206      	bcs.n	8015b4c <__hexnan+0xa0>
 8015b3e:	2d07      	cmp	r5, #7
 8015b40:	dc04      	bgt.n	8015b4c <__hexnan+0xa0>
 8015b42:	462a      	mov	r2, r5
 8015b44:	4649      	mov	r1, r9
 8015b46:	4620      	mov	r0, r4
 8015b48:	f7ff ff8a 	bl	8015a60 <L_shift>
 8015b4c:	4544      	cmp	r4, r8
 8015b4e:	d934      	bls.n	8015bba <__hexnan+0x10e>
 8015b50:	f1a8 0204 	sub.w	r2, r8, #4
 8015b54:	4623      	mov	r3, r4
 8015b56:	f853 1b04 	ldr.w	r1, [r3], #4
 8015b5a:	f842 1f04 	str.w	r1, [r2, #4]!
 8015b5e:	429f      	cmp	r7, r3
 8015b60:	d2f9      	bcs.n	8015b56 <__hexnan+0xaa>
 8015b62:	1b3b      	subs	r3, r7, r4
 8015b64:	f023 0303 	bic.w	r3, r3, #3
 8015b68:	3304      	adds	r3, #4
 8015b6a:	3401      	adds	r4, #1
 8015b6c:	3e03      	subs	r6, #3
 8015b6e:	42b4      	cmp	r4, r6
 8015b70:	bf88      	it	hi
 8015b72:	2304      	movhi	r3, #4
 8015b74:	4443      	add	r3, r8
 8015b76:	2200      	movs	r2, #0
 8015b78:	f843 2b04 	str.w	r2, [r3], #4
 8015b7c:	429f      	cmp	r7, r3
 8015b7e:	d2fb      	bcs.n	8015b78 <__hexnan+0xcc>
 8015b80:	683b      	ldr	r3, [r7, #0]
 8015b82:	b91b      	cbnz	r3, 8015b8c <__hexnan+0xe0>
 8015b84:	4547      	cmp	r7, r8
 8015b86:	d127      	bne.n	8015bd8 <__hexnan+0x12c>
 8015b88:	2301      	movs	r3, #1
 8015b8a:	603b      	str	r3, [r7, #0]
 8015b8c:	2005      	movs	r0, #5
 8015b8e:	e026      	b.n	8015bde <__hexnan+0x132>
 8015b90:	3501      	adds	r5, #1
 8015b92:	2d08      	cmp	r5, #8
 8015b94:	f10b 0b01 	add.w	fp, fp, #1
 8015b98:	dd06      	ble.n	8015ba8 <__hexnan+0xfc>
 8015b9a:	4544      	cmp	r4, r8
 8015b9c:	d9c3      	bls.n	8015b26 <__hexnan+0x7a>
 8015b9e:	2300      	movs	r3, #0
 8015ba0:	f844 3c04 	str.w	r3, [r4, #-4]
 8015ba4:	2501      	movs	r5, #1
 8015ba6:	3c04      	subs	r4, #4
 8015ba8:	6822      	ldr	r2, [r4, #0]
 8015baa:	f000 000f 	and.w	r0, r0, #15
 8015bae:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8015bb2:	6022      	str	r2, [r4, #0]
 8015bb4:	e7b7      	b.n	8015b26 <__hexnan+0x7a>
 8015bb6:	2508      	movs	r5, #8
 8015bb8:	e7b5      	b.n	8015b26 <__hexnan+0x7a>
 8015bba:	9b01      	ldr	r3, [sp, #4]
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	d0df      	beq.n	8015b80 <__hexnan+0xd4>
 8015bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8015bc4:	f1c3 0320 	rsb	r3, r3, #32
 8015bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8015bcc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8015bd0:	401a      	ands	r2, r3
 8015bd2:	f846 2c04 	str.w	r2, [r6, #-4]
 8015bd6:	e7d3      	b.n	8015b80 <__hexnan+0xd4>
 8015bd8:	3f04      	subs	r7, #4
 8015bda:	e7d1      	b.n	8015b80 <__hexnan+0xd4>
 8015bdc:	2004      	movs	r0, #4
 8015bde:	b007      	add	sp, #28
 8015be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015be4 <_localeconv_r>:
 8015be4:	4800      	ldr	r0, [pc, #0]	; (8015be8 <_localeconv_r+0x4>)
 8015be6:	4770      	bx	lr
 8015be8:	200001d8 	.word	0x200001d8

08015bec <_lseek_r>:
 8015bec:	b538      	push	{r3, r4, r5, lr}
 8015bee:	4d07      	ldr	r5, [pc, #28]	; (8015c0c <_lseek_r+0x20>)
 8015bf0:	4604      	mov	r4, r0
 8015bf2:	4608      	mov	r0, r1
 8015bf4:	4611      	mov	r1, r2
 8015bf6:	2200      	movs	r2, #0
 8015bf8:	602a      	str	r2, [r5, #0]
 8015bfa:	461a      	mov	r2, r3
 8015bfc:	f001 f990 	bl	8016f20 <_lseek>
 8015c00:	1c43      	adds	r3, r0, #1
 8015c02:	d102      	bne.n	8015c0a <_lseek_r+0x1e>
 8015c04:	682b      	ldr	r3, [r5, #0]
 8015c06:	b103      	cbz	r3, 8015c0a <_lseek_r+0x1e>
 8015c08:	6023      	str	r3, [r4, #0]
 8015c0a:	bd38      	pop	{r3, r4, r5, pc}
 8015c0c:	20006884 	.word	0x20006884

08015c10 <__swhatbuf_r>:
 8015c10:	b570      	push	{r4, r5, r6, lr}
 8015c12:	460e      	mov	r6, r1
 8015c14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c18:	2900      	cmp	r1, #0
 8015c1a:	b096      	sub	sp, #88	; 0x58
 8015c1c:	4614      	mov	r4, r2
 8015c1e:	461d      	mov	r5, r3
 8015c20:	da07      	bge.n	8015c32 <__swhatbuf_r+0x22>
 8015c22:	2300      	movs	r3, #0
 8015c24:	602b      	str	r3, [r5, #0]
 8015c26:	89b3      	ldrh	r3, [r6, #12]
 8015c28:	061a      	lsls	r2, r3, #24
 8015c2a:	d410      	bmi.n	8015c4e <__swhatbuf_r+0x3e>
 8015c2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015c30:	e00e      	b.n	8015c50 <__swhatbuf_r+0x40>
 8015c32:	466a      	mov	r2, sp
 8015c34:	f001 f896 	bl	8016d64 <_fstat_r>
 8015c38:	2800      	cmp	r0, #0
 8015c3a:	dbf2      	blt.n	8015c22 <__swhatbuf_r+0x12>
 8015c3c:	9a01      	ldr	r2, [sp, #4]
 8015c3e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015c42:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015c46:	425a      	negs	r2, r3
 8015c48:	415a      	adcs	r2, r3
 8015c4a:	602a      	str	r2, [r5, #0]
 8015c4c:	e7ee      	b.n	8015c2c <__swhatbuf_r+0x1c>
 8015c4e:	2340      	movs	r3, #64	; 0x40
 8015c50:	2000      	movs	r0, #0
 8015c52:	6023      	str	r3, [r4, #0]
 8015c54:	b016      	add	sp, #88	; 0x58
 8015c56:	bd70      	pop	{r4, r5, r6, pc}

08015c58 <__smakebuf_r>:
 8015c58:	898b      	ldrh	r3, [r1, #12]
 8015c5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015c5c:	079d      	lsls	r5, r3, #30
 8015c5e:	4606      	mov	r6, r0
 8015c60:	460c      	mov	r4, r1
 8015c62:	d507      	bpl.n	8015c74 <__smakebuf_r+0x1c>
 8015c64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015c68:	6023      	str	r3, [r4, #0]
 8015c6a:	6123      	str	r3, [r4, #16]
 8015c6c:	2301      	movs	r3, #1
 8015c6e:	6163      	str	r3, [r4, #20]
 8015c70:	b002      	add	sp, #8
 8015c72:	bd70      	pop	{r4, r5, r6, pc}
 8015c74:	ab01      	add	r3, sp, #4
 8015c76:	466a      	mov	r2, sp
 8015c78:	f7ff ffca 	bl	8015c10 <__swhatbuf_r>
 8015c7c:	9900      	ldr	r1, [sp, #0]
 8015c7e:	4605      	mov	r5, r0
 8015c80:	4630      	mov	r0, r6
 8015c82:	f7fc fd37 	bl	80126f4 <_malloc_r>
 8015c86:	b948      	cbnz	r0, 8015c9c <__smakebuf_r+0x44>
 8015c88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015c8c:	059a      	lsls	r2, r3, #22
 8015c8e:	d4ef      	bmi.n	8015c70 <__smakebuf_r+0x18>
 8015c90:	f023 0303 	bic.w	r3, r3, #3
 8015c94:	f043 0302 	orr.w	r3, r3, #2
 8015c98:	81a3      	strh	r3, [r4, #12]
 8015c9a:	e7e3      	b.n	8015c64 <__smakebuf_r+0xc>
 8015c9c:	4b0d      	ldr	r3, [pc, #52]	; (8015cd4 <__smakebuf_r+0x7c>)
 8015c9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8015ca0:	89a3      	ldrh	r3, [r4, #12]
 8015ca2:	6020      	str	r0, [r4, #0]
 8015ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015ca8:	81a3      	strh	r3, [r4, #12]
 8015caa:	9b00      	ldr	r3, [sp, #0]
 8015cac:	6163      	str	r3, [r4, #20]
 8015cae:	9b01      	ldr	r3, [sp, #4]
 8015cb0:	6120      	str	r0, [r4, #16]
 8015cb2:	b15b      	cbz	r3, 8015ccc <__smakebuf_r+0x74>
 8015cb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015cb8:	4630      	mov	r0, r6
 8015cba:	f001 f865 	bl	8016d88 <_isatty_r>
 8015cbe:	b128      	cbz	r0, 8015ccc <__smakebuf_r+0x74>
 8015cc0:	89a3      	ldrh	r3, [r4, #12]
 8015cc2:	f023 0303 	bic.w	r3, r3, #3
 8015cc6:	f043 0301 	orr.w	r3, r3, #1
 8015cca:	81a3      	strh	r3, [r4, #12]
 8015ccc:	89a0      	ldrh	r0, [r4, #12]
 8015cce:	4305      	orrs	r5, r0
 8015cd0:	81a5      	strh	r5, [r4, #12]
 8015cd2:	e7cd      	b.n	8015c70 <__smakebuf_r+0x18>
 8015cd4:	080124d5 	.word	0x080124d5

08015cd8 <malloc>:
 8015cd8:	4b02      	ldr	r3, [pc, #8]	; (8015ce4 <malloc+0xc>)
 8015cda:	4601      	mov	r1, r0
 8015cdc:	6818      	ldr	r0, [r3, #0]
 8015cde:	f7fc bd09 	b.w	80126f4 <_malloc_r>
 8015ce2:	bf00      	nop
 8015ce4:	20000080 	.word	0x20000080

08015ce8 <__ascii_mbtowc>:
 8015ce8:	b082      	sub	sp, #8
 8015cea:	b901      	cbnz	r1, 8015cee <__ascii_mbtowc+0x6>
 8015cec:	a901      	add	r1, sp, #4
 8015cee:	b142      	cbz	r2, 8015d02 <__ascii_mbtowc+0x1a>
 8015cf0:	b14b      	cbz	r3, 8015d06 <__ascii_mbtowc+0x1e>
 8015cf2:	7813      	ldrb	r3, [r2, #0]
 8015cf4:	600b      	str	r3, [r1, #0]
 8015cf6:	7812      	ldrb	r2, [r2, #0]
 8015cf8:	1e10      	subs	r0, r2, #0
 8015cfa:	bf18      	it	ne
 8015cfc:	2001      	movne	r0, #1
 8015cfe:	b002      	add	sp, #8
 8015d00:	4770      	bx	lr
 8015d02:	4610      	mov	r0, r2
 8015d04:	e7fb      	b.n	8015cfe <__ascii_mbtowc+0x16>
 8015d06:	f06f 0001 	mvn.w	r0, #1
 8015d0a:	e7f8      	b.n	8015cfe <__ascii_mbtowc+0x16>

08015d0c <__malloc_lock>:
 8015d0c:	4801      	ldr	r0, [pc, #4]	; (8015d14 <__malloc_lock+0x8>)
 8015d0e:	f7fc bcd8 	b.w	80126c2 <__retarget_lock_acquire_recursive>
 8015d12:	bf00      	nop
 8015d14:	2000687c 	.word	0x2000687c

08015d18 <__malloc_unlock>:
 8015d18:	4801      	ldr	r0, [pc, #4]	; (8015d20 <__malloc_unlock+0x8>)
 8015d1a:	f7fc bcd3 	b.w	80126c4 <__retarget_lock_release_recursive>
 8015d1e:	bf00      	nop
 8015d20:	2000687c 	.word	0x2000687c

08015d24 <_Balloc>:
 8015d24:	b570      	push	{r4, r5, r6, lr}
 8015d26:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015d28:	4604      	mov	r4, r0
 8015d2a:	460d      	mov	r5, r1
 8015d2c:	b976      	cbnz	r6, 8015d4c <_Balloc+0x28>
 8015d2e:	2010      	movs	r0, #16
 8015d30:	f7ff ffd2 	bl	8015cd8 <malloc>
 8015d34:	4602      	mov	r2, r0
 8015d36:	6260      	str	r0, [r4, #36]	; 0x24
 8015d38:	b920      	cbnz	r0, 8015d44 <_Balloc+0x20>
 8015d3a:	4b18      	ldr	r3, [pc, #96]	; (8015d9c <_Balloc+0x78>)
 8015d3c:	4818      	ldr	r0, [pc, #96]	; (8015da0 <_Balloc+0x7c>)
 8015d3e:	2166      	movs	r1, #102	; 0x66
 8015d40:	f000 ffe0 	bl	8016d04 <__assert_func>
 8015d44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015d48:	6006      	str	r6, [r0, #0]
 8015d4a:	60c6      	str	r6, [r0, #12]
 8015d4c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015d4e:	68f3      	ldr	r3, [r6, #12]
 8015d50:	b183      	cbz	r3, 8015d74 <_Balloc+0x50>
 8015d52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015d54:	68db      	ldr	r3, [r3, #12]
 8015d56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015d5a:	b9b8      	cbnz	r0, 8015d8c <_Balloc+0x68>
 8015d5c:	2101      	movs	r1, #1
 8015d5e:	fa01 f605 	lsl.w	r6, r1, r5
 8015d62:	1d72      	adds	r2, r6, #5
 8015d64:	0092      	lsls	r2, r2, #2
 8015d66:	4620      	mov	r0, r4
 8015d68:	f000 fc97 	bl	801669a <_calloc_r>
 8015d6c:	b160      	cbz	r0, 8015d88 <_Balloc+0x64>
 8015d6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015d72:	e00e      	b.n	8015d92 <_Balloc+0x6e>
 8015d74:	2221      	movs	r2, #33	; 0x21
 8015d76:	2104      	movs	r1, #4
 8015d78:	4620      	mov	r0, r4
 8015d7a:	f000 fc8e 	bl	801669a <_calloc_r>
 8015d7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015d80:	60f0      	str	r0, [r6, #12]
 8015d82:	68db      	ldr	r3, [r3, #12]
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d1e4      	bne.n	8015d52 <_Balloc+0x2e>
 8015d88:	2000      	movs	r0, #0
 8015d8a:	bd70      	pop	{r4, r5, r6, pc}
 8015d8c:	6802      	ldr	r2, [r0, #0]
 8015d8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015d92:	2300      	movs	r3, #0
 8015d94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015d98:	e7f7      	b.n	8015d8a <_Balloc+0x66>
 8015d9a:	bf00      	nop
 8015d9c:	08017f2d 	.word	0x08017f2d
 8015da0:	08018034 	.word	0x08018034

08015da4 <_Bfree>:
 8015da4:	b570      	push	{r4, r5, r6, lr}
 8015da6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015da8:	4605      	mov	r5, r0
 8015daa:	460c      	mov	r4, r1
 8015dac:	b976      	cbnz	r6, 8015dcc <_Bfree+0x28>
 8015dae:	2010      	movs	r0, #16
 8015db0:	f7ff ff92 	bl	8015cd8 <malloc>
 8015db4:	4602      	mov	r2, r0
 8015db6:	6268      	str	r0, [r5, #36]	; 0x24
 8015db8:	b920      	cbnz	r0, 8015dc4 <_Bfree+0x20>
 8015dba:	4b09      	ldr	r3, [pc, #36]	; (8015de0 <_Bfree+0x3c>)
 8015dbc:	4809      	ldr	r0, [pc, #36]	; (8015de4 <_Bfree+0x40>)
 8015dbe:	218a      	movs	r1, #138	; 0x8a
 8015dc0:	f000 ffa0 	bl	8016d04 <__assert_func>
 8015dc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015dc8:	6006      	str	r6, [r0, #0]
 8015dca:	60c6      	str	r6, [r0, #12]
 8015dcc:	b13c      	cbz	r4, 8015dde <_Bfree+0x3a>
 8015dce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015dd0:	6862      	ldr	r2, [r4, #4]
 8015dd2:	68db      	ldr	r3, [r3, #12]
 8015dd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015dd8:	6021      	str	r1, [r4, #0]
 8015dda:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015dde:	bd70      	pop	{r4, r5, r6, pc}
 8015de0:	08017f2d 	.word	0x08017f2d
 8015de4:	08018034 	.word	0x08018034

08015de8 <__multadd>:
 8015de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015dec:	690e      	ldr	r6, [r1, #16]
 8015dee:	4607      	mov	r7, r0
 8015df0:	4698      	mov	r8, r3
 8015df2:	460c      	mov	r4, r1
 8015df4:	f101 0014 	add.w	r0, r1, #20
 8015df8:	2300      	movs	r3, #0
 8015dfa:	6805      	ldr	r5, [r0, #0]
 8015dfc:	b2a9      	uxth	r1, r5
 8015dfe:	fb02 8101 	mla	r1, r2, r1, r8
 8015e02:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8015e06:	0c2d      	lsrs	r5, r5, #16
 8015e08:	fb02 c505 	mla	r5, r2, r5, ip
 8015e0c:	b289      	uxth	r1, r1
 8015e0e:	3301      	adds	r3, #1
 8015e10:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8015e14:	429e      	cmp	r6, r3
 8015e16:	f840 1b04 	str.w	r1, [r0], #4
 8015e1a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8015e1e:	dcec      	bgt.n	8015dfa <__multadd+0x12>
 8015e20:	f1b8 0f00 	cmp.w	r8, #0
 8015e24:	d022      	beq.n	8015e6c <__multadd+0x84>
 8015e26:	68a3      	ldr	r3, [r4, #8]
 8015e28:	42b3      	cmp	r3, r6
 8015e2a:	dc19      	bgt.n	8015e60 <__multadd+0x78>
 8015e2c:	6861      	ldr	r1, [r4, #4]
 8015e2e:	4638      	mov	r0, r7
 8015e30:	3101      	adds	r1, #1
 8015e32:	f7ff ff77 	bl	8015d24 <_Balloc>
 8015e36:	4605      	mov	r5, r0
 8015e38:	b928      	cbnz	r0, 8015e46 <__multadd+0x5e>
 8015e3a:	4602      	mov	r2, r0
 8015e3c:	4b0d      	ldr	r3, [pc, #52]	; (8015e74 <__multadd+0x8c>)
 8015e3e:	480e      	ldr	r0, [pc, #56]	; (8015e78 <__multadd+0x90>)
 8015e40:	21b5      	movs	r1, #181	; 0xb5
 8015e42:	f000 ff5f 	bl	8016d04 <__assert_func>
 8015e46:	6922      	ldr	r2, [r4, #16]
 8015e48:	3202      	adds	r2, #2
 8015e4a:	f104 010c 	add.w	r1, r4, #12
 8015e4e:	0092      	lsls	r2, r2, #2
 8015e50:	300c      	adds	r0, #12
 8015e52:	f7fc fc38 	bl	80126c6 <memcpy>
 8015e56:	4621      	mov	r1, r4
 8015e58:	4638      	mov	r0, r7
 8015e5a:	f7ff ffa3 	bl	8015da4 <_Bfree>
 8015e5e:	462c      	mov	r4, r5
 8015e60:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8015e64:	3601      	adds	r6, #1
 8015e66:	f8c3 8014 	str.w	r8, [r3, #20]
 8015e6a:	6126      	str	r6, [r4, #16]
 8015e6c:	4620      	mov	r0, r4
 8015e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e72:	bf00      	nop
 8015e74:	08017fa3 	.word	0x08017fa3
 8015e78:	08018034 	.word	0x08018034

08015e7c <__s2b>:
 8015e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015e80:	460c      	mov	r4, r1
 8015e82:	4615      	mov	r5, r2
 8015e84:	461f      	mov	r7, r3
 8015e86:	2209      	movs	r2, #9
 8015e88:	3308      	adds	r3, #8
 8015e8a:	4606      	mov	r6, r0
 8015e8c:	fb93 f3f2 	sdiv	r3, r3, r2
 8015e90:	2100      	movs	r1, #0
 8015e92:	2201      	movs	r2, #1
 8015e94:	429a      	cmp	r2, r3
 8015e96:	db09      	blt.n	8015eac <__s2b+0x30>
 8015e98:	4630      	mov	r0, r6
 8015e9a:	f7ff ff43 	bl	8015d24 <_Balloc>
 8015e9e:	b940      	cbnz	r0, 8015eb2 <__s2b+0x36>
 8015ea0:	4602      	mov	r2, r0
 8015ea2:	4b19      	ldr	r3, [pc, #100]	; (8015f08 <__s2b+0x8c>)
 8015ea4:	4819      	ldr	r0, [pc, #100]	; (8015f0c <__s2b+0x90>)
 8015ea6:	21ce      	movs	r1, #206	; 0xce
 8015ea8:	f000 ff2c 	bl	8016d04 <__assert_func>
 8015eac:	0052      	lsls	r2, r2, #1
 8015eae:	3101      	adds	r1, #1
 8015eb0:	e7f0      	b.n	8015e94 <__s2b+0x18>
 8015eb2:	9b08      	ldr	r3, [sp, #32]
 8015eb4:	6143      	str	r3, [r0, #20]
 8015eb6:	2d09      	cmp	r5, #9
 8015eb8:	f04f 0301 	mov.w	r3, #1
 8015ebc:	6103      	str	r3, [r0, #16]
 8015ebe:	dd16      	ble.n	8015eee <__s2b+0x72>
 8015ec0:	f104 0909 	add.w	r9, r4, #9
 8015ec4:	46c8      	mov	r8, r9
 8015ec6:	442c      	add	r4, r5
 8015ec8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8015ecc:	4601      	mov	r1, r0
 8015ece:	3b30      	subs	r3, #48	; 0x30
 8015ed0:	220a      	movs	r2, #10
 8015ed2:	4630      	mov	r0, r6
 8015ed4:	f7ff ff88 	bl	8015de8 <__multadd>
 8015ed8:	45a0      	cmp	r8, r4
 8015eda:	d1f5      	bne.n	8015ec8 <__s2b+0x4c>
 8015edc:	f1a5 0408 	sub.w	r4, r5, #8
 8015ee0:	444c      	add	r4, r9
 8015ee2:	1b2d      	subs	r5, r5, r4
 8015ee4:	1963      	adds	r3, r4, r5
 8015ee6:	42bb      	cmp	r3, r7
 8015ee8:	db04      	blt.n	8015ef4 <__s2b+0x78>
 8015eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015eee:	340a      	adds	r4, #10
 8015ef0:	2509      	movs	r5, #9
 8015ef2:	e7f6      	b.n	8015ee2 <__s2b+0x66>
 8015ef4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015ef8:	4601      	mov	r1, r0
 8015efa:	3b30      	subs	r3, #48	; 0x30
 8015efc:	220a      	movs	r2, #10
 8015efe:	4630      	mov	r0, r6
 8015f00:	f7ff ff72 	bl	8015de8 <__multadd>
 8015f04:	e7ee      	b.n	8015ee4 <__s2b+0x68>
 8015f06:	bf00      	nop
 8015f08:	08017fa3 	.word	0x08017fa3
 8015f0c:	08018034 	.word	0x08018034

08015f10 <__hi0bits>:
 8015f10:	0c03      	lsrs	r3, r0, #16
 8015f12:	041b      	lsls	r3, r3, #16
 8015f14:	b9d3      	cbnz	r3, 8015f4c <__hi0bits+0x3c>
 8015f16:	0400      	lsls	r0, r0, #16
 8015f18:	2310      	movs	r3, #16
 8015f1a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8015f1e:	bf04      	itt	eq
 8015f20:	0200      	lsleq	r0, r0, #8
 8015f22:	3308      	addeq	r3, #8
 8015f24:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015f28:	bf04      	itt	eq
 8015f2a:	0100      	lsleq	r0, r0, #4
 8015f2c:	3304      	addeq	r3, #4
 8015f2e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8015f32:	bf04      	itt	eq
 8015f34:	0080      	lsleq	r0, r0, #2
 8015f36:	3302      	addeq	r3, #2
 8015f38:	2800      	cmp	r0, #0
 8015f3a:	db05      	blt.n	8015f48 <__hi0bits+0x38>
 8015f3c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8015f40:	f103 0301 	add.w	r3, r3, #1
 8015f44:	bf08      	it	eq
 8015f46:	2320      	moveq	r3, #32
 8015f48:	4618      	mov	r0, r3
 8015f4a:	4770      	bx	lr
 8015f4c:	2300      	movs	r3, #0
 8015f4e:	e7e4      	b.n	8015f1a <__hi0bits+0xa>

08015f50 <__lo0bits>:
 8015f50:	6803      	ldr	r3, [r0, #0]
 8015f52:	f013 0207 	ands.w	r2, r3, #7
 8015f56:	4601      	mov	r1, r0
 8015f58:	d00b      	beq.n	8015f72 <__lo0bits+0x22>
 8015f5a:	07da      	lsls	r2, r3, #31
 8015f5c:	d424      	bmi.n	8015fa8 <__lo0bits+0x58>
 8015f5e:	0798      	lsls	r0, r3, #30
 8015f60:	bf49      	itett	mi
 8015f62:	085b      	lsrmi	r3, r3, #1
 8015f64:	089b      	lsrpl	r3, r3, #2
 8015f66:	2001      	movmi	r0, #1
 8015f68:	600b      	strmi	r3, [r1, #0]
 8015f6a:	bf5c      	itt	pl
 8015f6c:	600b      	strpl	r3, [r1, #0]
 8015f6e:	2002      	movpl	r0, #2
 8015f70:	4770      	bx	lr
 8015f72:	b298      	uxth	r0, r3
 8015f74:	b9b0      	cbnz	r0, 8015fa4 <__lo0bits+0x54>
 8015f76:	0c1b      	lsrs	r3, r3, #16
 8015f78:	2010      	movs	r0, #16
 8015f7a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8015f7e:	bf04      	itt	eq
 8015f80:	0a1b      	lsreq	r3, r3, #8
 8015f82:	3008      	addeq	r0, #8
 8015f84:	071a      	lsls	r2, r3, #28
 8015f86:	bf04      	itt	eq
 8015f88:	091b      	lsreq	r3, r3, #4
 8015f8a:	3004      	addeq	r0, #4
 8015f8c:	079a      	lsls	r2, r3, #30
 8015f8e:	bf04      	itt	eq
 8015f90:	089b      	lsreq	r3, r3, #2
 8015f92:	3002      	addeq	r0, #2
 8015f94:	07da      	lsls	r2, r3, #31
 8015f96:	d403      	bmi.n	8015fa0 <__lo0bits+0x50>
 8015f98:	085b      	lsrs	r3, r3, #1
 8015f9a:	f100 0001 	add.w	r0, r0, #1
 8015f9e:	d005      	beq.n	8015fac <__lo0bits+0x5c>
 8015fa0:	600b      	str	r3, [r1, #0]
 8015fa2:	4770      	bx	lr
 8015fa4:	4610      	mov	r0, r2
 8015fa6:	e7e8      	b.n	8015f7a <__lo0bits+0x2a>
 8015fa8:	2000      	movs	r0, #0
 8015faa:	4770      	bx	lr
 8015fac:	2020      	movs	r0, #32
 8015fae:	4770      	bx	lr

08015fb0 <__i2b>:
 8015fb0:	b510      	push	{r4, lr}
 8015fb2:	460c      	mov	r4, r1
 8015fb4:	2101      	movs	r1, #1
 8015fb6:	f7ff feb5 	bl	8015d24 <_Balloc>
 8015fba:	4602      	mov	r2, r0
 8015fbc:	b928      	cbnz	r0, 8015fca <__i2b+0x1a>
 8015fbe:	4b05      	ldr	r3, [pc, #20]	; (8015fd4 <__i2b+0x24>)
 8015fc0:	4805      	ldr	r0, [pc, #20]	; (8015fd8 <__i2b+0x28>)
 8015fc2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8015fc6:	f000 fe9d 	bl	8016d04 <__assert_func>
 8015fca:	2301      	movs	r3, #1
 8015fcc:	6144      	str	r4, [r0, #20]
 8015fce:	6103      	str	r3, [r0, #16]
 8015fd0:	bd10      	pop	{r4, pc}
 8015fd2:	bf00      	nop
 8015fd4:	08017fa3 	.word	0x08017fa3
 8015fd8:	08018034 	.word	0x08018034

08015fdc <__multiply>:
 8015fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fe0:	4614      	mov	r4, r2
 8015fe2:	690a      	ldr	r2, [r1, #16]
 8015fe4:	6923      	ldr	r3, [r4, #16]
 8015fe6:	429a      	cmp	r2, r3
 8015fe8:	bfb8      	it	lt
 8015fea:	460b      	movlt	r3, r1
 8015fec:	460d      	mov	r5, r1
 8015fee:	bfbc      	itt	lt
 8015ff0:	4625      	movlt	r5, r4
 8015ff2:	461c      	movlt	r4, r3
 8015ff4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8015ff8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8015ffc:	68ab      	ldr	r3, [r5, #8]
 8015ffe:	6869      	ldr	r1, [r5, #4]
 8016000:	eb0a 0709 	add.w	r7, sl, r9
 8016004:	42bb      	cmp	r3, r7
 8016006:	b085      	sub	sp, #20
 8016008:	bfb8      	it	lt
 801600a:	3101      	addlt	r1, #1
 801600c:	f7ff fe8a 	bl	8015d24 <_Balloc>
 8016010:	b930      	cbnz	r0, 8016020 <__multiply+0x44>
 8016012:	4602      	mov	r2, r0
 8016014:	4b42      	ldr	r3, [pc, #264]	; (8016120 <__multiply+0x144>)
 8016016:	4843      	ldr	r0, [pc, #268]	; (8016124 <__multiply+0x148>)
 8016018:	f240 115d 	movw	r1, #349	; 0x15d
 801601c:	f000 fe72 	bl	8016d04 <__assert_func>
 8016020:	f100 0614 	add.w	r6, r0, #20
 8016024:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8016028:	4633      	mov	r3, r6
 801602a:	2200      	movs	r2, #0
 801602c:	4543      	cmp	r3, r8
 801602e:	d31e      	bcc.n	801606e <__multiply+0x92>
 8016030:	f105 0c14 	add.w	ip, r5, #20
 8016034:	f104 0314 	add.w	r3, r4, #20
 8016038:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801603c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8016040:	9202      	str	r2, [sp, #8]
 8016042:	ebac 0205 	sub.w	r2, ip, r5
 8016046:	3a15      	subs	r2, #21
 8016048:	f022 0203 	bic.w	r2, r2, #3
 801604c:	3204      	adds	r2, #4
 801604e:	f105 0115 	add.w	r1, r5, #21
 8016052:	458c      	cmp	ip, r1
 8016054:	bf38      	it	cc
 8016056:	2204      	movcc	r2, #4
 8016058:	9201      	str	r2, [sp, #4]
 801605a:	9a02      	ldr	r2, [sp, #8]
 801605c:	9303      	str	r3, [sp, #12]
 801605e:	429a      	cmp	r2, r3
 8016060:	d808      	bhi.n	8016074 <__multiply+0x98>
 8016062:	2f00      	cmp	r7, #0
 8016064:	dc55      	bgt.n	8016112 <__multiply+0x136>
 8016066:	6107      	str	r7, [r0, #16]
 8016068:	b005      	add	sp, #20
 801606a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801606e:	f843 2b04 	str.w	r2, [r3], #4
 8016072:	e7db      	b.n	801602c <__multiply+0x50>
 8016074:	f8b3 a000 	ldrh.w	sl, [r3]
 8016078:	f1ba 0f00 	cmp.w	sl, #0
 801607c:	d020      	beq.n	80160c0 <__multiply+0xe4>
 801607e:	f105 0e14 	add.w	lr, r5, #20
 8016082:	46b1      	mov	r9, r6
 8016084:	2200      	movs	r2, #0
 8016086:	f85e 4b04 	ldr.w	r4, [lr], #4
 801608a:	f8d9 b000 	ldr.w	fp, [r9]
 801608e:	b2a1      	uxth	r1, r4
 8016090:	fa1f fb8b 	uxth.w	fp, fp
 8016094:	fb0a b101 	mla	r1, sl, r1, fp
 8016098:	4411      	add	r1, r2
 801609a:	f8d9 2000 	ldr.w	r2, [r9]
 801609e:	0c24      	lsrs	r4, r4, #16
 80160a0:	0c12      	lsrs	r2, r2, #16
 80160a2:	fb0a 2404 	mla	r4, sl, r4, r2
 80160a6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80160aa:	b289      	uxth	r1, r1
 80160ac:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80160b0:	45f4      	cmp	ip, lr
 80160b2:	f849 1b04 	str.w	r1, [r9], #4
 80160b6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80160ba:	d8e4      	bhi.n	8016086 <__multiply+0xaa>
 80160bc:	9901      	ldr	r1, [sp, #4]
 80160be:	5072      	str	r2, [r6, r1]
 80160c0:	9a03      	ldr	r2, [sp, #12]
 80160c2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80160c6:	3304      	adds	r3, #4
 80160c8:	f1b9 0f00 	cmp.w	r9, #0
 80160cc:	d01f      	beq.n	801610e <__multiply+0x132>
 80160ce:	6834      	ldr	r4, [r6, #0]
 80160d0:	f105 0114 	add.w	r1, r5, #20
 80160d4:	46b6      	mov	lr, r6
 80160d6:	f04f 0a00 	mov.w	sl, #0
 80160da:	880a      	ldrh	r2, [r1, #0]
 80160dc:	f8be b002 	ldrh.w	fp, [lr, #2]
 80160e0:	fb09 b202 	mla	r2, r9, r2, fp
 80160e4:	4492      	add	sl, r2
 80160e6:	b2a4      	uxth	r4, r4
 80160e8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80160ec:	f84e 4b04 	str.w	r4, [lr], #4
 80160f0:	f851 4b04 	ldr.w	r4, [r1], #4
 80160f4:	f8be 2000 	ldrh.w	r2, [lr]
 80160f8:	0c24      	lsrs	r4, r4, #16
 80160fa:	fb09 2404 	mla	r4, r9, r4, r2
 80160fe:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8016102:	458c      	cmp	ip, r1
 8016104:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8016108:	d8e7      	bhi.n	80160da <__multiply+0xfe>
 801610a:	9a01      	ldr	r2, [sp, #4]
 801610c:	50b4      	str	r4, [r6, r2]
 801610e:	3604      	adds	r6, #4
 8016110:	e7a3      	b.n	801605a <__multiply+0x7e>
 8016112:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8016116:	2b00      	cmp	r3, #0
 8016118:	d1a5      	bne.n	8016066 <__multiply+0x8a>
 801611a:	3f01      	subs	r7, #1
 801611c:	e7a1      	b.n	8016062 <__multiply+0x86>
 801611e:	bf00      	nop
 8016120:	08017fa3 	.word	0x08017fa3
 8016124:	08018034 	.word	0x08018034

08016128 <__pow5mult>:
 8016128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801612c:	4615      	mov	r5, r2
 801612e:	f012 0203 	ands.w	r2, r2, #3
 8016132:	4606      	mov	r6, r0
 8016134:	460f      	mov	r7, r1
 8016136:	d007      	beq.n	8016148 <__pow5mult+0x20>
 8016138:	4c25      	ldr	r4, [pc, #148]	; (80161d0 <__pow5mult+0xa8>)
 801613a:	3a01      	subs	r2, #1
 801613c:	2300      	movs	r3, #0
 801613e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016142:	f7ff fe51 	bl	8015de8 <__multadd>
 8016146:	4607      	mov	r7, r0
 8016148:	10ad      	asrs	r5, r5, #2
 801614a:	d03d      	beq.n	80161c8 <__pow5mult+0xa0>
 801614c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801614e:	b97c      	cbnz	r4, 8016170 <__pow5mult+0x48>
 8016150:	2010      	movs	r0, #16
 8016152:	f7ff fdc1 	bl	8015cd8 <malloc>
 8016156:	4602      	mov	r2, r0
 8016158:	6270      	str	r0, [r6, #36]	; 0x24
 801615a:	b928      	cbnz	r0, 8016168 <__pow5mult+0x40>
 801615c:	4b1d      	ldr	r3, [pc, #116]	; (80161d4 <__pow5mult+0xac>)
 801615e:	481e      	ldr	r0, [pc, #120]	; (80161d8 <__pow5mult+0xb0>)
 8016160:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8016164:	f000 fdce 	bl	8016d04 <__assert_func>
 8016168:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801616c:	6004      	str	r4, [r0, #0]
 801616e:	60c4      	str	r4, [r0, #12]
 8016170:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8016174:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016178:	b94c      	cbnz	r4, 801618e <__pow5mult+0x66>
 801617a:	f240 2171 	movw	r1, #625	; 0x271
 801617e:	4630      	mov	r0, r6
 8016180:	f7ff ff16 	bl	8015fb0 <__i2b>
 8016184:	2300      	movs	r3, #0
 8016186:	f8c8 0008 	str.w	r0, [r8, #8]
 801618a:	4604      	mov	r4, r0
 801618c:	6003      	str	r3, [r0, #0]
 801618e:	f04f 0900 	mov.w	r9, #0
 8016192:	07eb      	lsls	r3, r5, #31
 8016194:	d50a      	bpl.n	80161ac <__pow5mult+0x84>
 8016196:	4639      	mov	r1, r7
 8016198:	4622      	mov	r2, r4
 801619a:	4630      	mov	r0, r6
 801619c:	f7ff ff1e 	bl	8015fdc <__multiply>
 80161a0:	4639      	mov	r1, r7
 80161a2:	4680      	mov	r8, r0
 80161a4:	4630      	mov	r0, r6
 80161a6:	f7ff fdfd 	bl	8015da4 <_Bfree>
 80161aa:	4647      	mov	r7, r8
 80161ac:	106d      	asrs	r5, r5, #1
 80161ae:	d00b      	beq.n	80161c8 <__pow5mult+0xa0>
 80161b0:	6820      	ldr	r0, [r4, #0]
 80161b2:	b938      	cbnz	r0, 80161c4 <__pow5mult+0x9c>
 80161b4:	4622      	mov	r2, r4
 80161b6:	4621      	mov	r1, r4
 80161b8:	4630      	mov	r0, r6
 80161ba:	f7ff ff0f 	bl	8015fdc <__multiply>
 80161be:	6020      	str	r0, [r4, #0]
 80161c0:	f8c0 9000 	str.w	r9, [r0]
 80161c4:	4604      	mov	r4, r0
 80161c6:	e7e4      	b.n	8016192 <__pow5mult+0x6a>
 80161c8:	4638      	mov	r0, r7
 80161ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80161ce:	bf00      	nop
 80161d0:	08018188 	.word	0x08018188
 80161d4:	08017f2d 	.word	0x08017f2d
 80161d8:	08018034 	.word	0x08018034

080161dc <__lshift>:
 80161dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80161e0:	460c      	mov	r4, r1
 80161e2:	6849      	ldr	r1, [r1, #4]
 80161e4:	6923      	ldr	r3, [r4, #16]
 80161e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80161ea:	68a3      	ldr	r3, [r4, #8]
 80161ec:	4607      	mov	r7, r0
 80161ee:	4691      	mov	r9, r2
 80161f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80161f4:	f108 0601 	add.w	r6, r8, #1
 80161f8:	42b3      	cmp	r3, r6
 80161fa:	db0b      	blt.n	8016214 <__lshift+0x38>
 80161fc:	4638      	mov	r0, r7
 80161fe:	f7ff fd91 	bl	8015d24 <_Balloc>
 8016202:	4605      	mov	r5, r0
 8016204:	b948      	cbnz	r0, 801621a <__lshift+0x3e>
 8016206:	4602      	mov	r2, r0
 8016208:	4b28      	ldr	r3, [pc, #160]	; (80162ac <__lshift+0xd0>)
 801620a:	4829      	ldr	r0, [pc, #164]	; (80162b0 <__lshift+0xd4>)
 801620c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8016210:	f000 fd78 	bl	8016d04 <__assert_func>
 8016214:	3101      	adds	r1, #1
 8016216:	005b      	lsls	r3, r3, #1
 8016218:	e7ee      	b.n	80161f8 <__lshift+0x1c>
 801621a:	2300      	movs	r3, #0
 801621c:	f100 0114 	add.w	r1, r0, #20
 8016220:	f100 0210 	add.w	r2, r0, #16
 8016224:	4618      	mov	r0, r3
 8016226:	4553      	cmp	r3, sl
 8016228:	db33      	blt.n	8016292 <__lshift+0xb6>
 801622a:	6920      	ldr	r0, [r4, #16]
 801622c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016230:	f104 0314 	add.w	r3, r4, #20
 8016234:	f019 091f 	ands.w	r9, r9, #31
 8016238:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801623c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016240:	d02b      	beq.n	801629a <__lshift+0xbe>
 8016242:	f1c9 0e20 	rsb	lr, r9, #32
 8016246:	468a      	mov	sl, r1
 8016248:	2200      	movs	r2, #0
 801624a:	6818      	ldr	r0, [r3, #0]
 801624c:	fa00 f009 	lsl.w	r0, r0, r9
 8016250:	4302      	orrs	r2, r0
 8016252:	f84a 2b04 	str.w	r2, [sl], #4
 8016256:	f853 2b04 	ldr.w	r2, [r3], #4
 801625a:	459c      	cmp	ip, r3
 801625c:	fa22 f20e 	lsr.w	r2, r2, lr
 8016260:	d8f3      	bhi.n	801624a <__lshift+0x6e>
 8016262:	ebac 0304 	sub.w	r3, ip, r4
 8016266:	3b15      	subs	r3, #21
 8016268:	f023 0303 	bic.w	r3, r3, #3
 801626c:	3304      	adds	r3, #4
 801626e:	f104 0015 	add.w	r0, r4, #21
 8016272:	4584      	cmp	ip, r0
 8016274:	bf38      	it	cc
 8016276:	2304      	movcc	r3, #4
 8016278:	50ca      	str	r2, [r1, r3]
 801627a:	b10a      	cbz	r2, 8016280 <__lshift+0xa4>
 801627c:	f108 0602 	add.w	r6, r8, #2
 8016280:	3e01      	subs	r6, #1
 8016282:	4638      	mov	r0, r7
 8016284:	612e      	str	r6, [r5, #16]
 8016286:	4621      	mov	r1, r4
 8016288:	f7ff fd8c 	bl	8015da4 <_Bfree>
 801628c:	4628      	mov	r0, r5
 801628e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016292:	f842 0f04 	str.w	r0, [r2, #4]!
 8016296:	3301      	adds	r3, #1
 8016298:	e7c5      	b.n	8016226 <__lshift+0x4a>
 801629a:	3904      	subs	r1, #4
 801629c:	f853 2b04 	ldr.w	r2, [r3], #4
 80162a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80162a4:	459c      	cmp	ip, r3
 80162a6:	d8f9      	bhi.n	801629c <__lshift+0xc0>
 80162a8:	e7ea      	b.n	8016280 <__lshift+0xa4>
 80162aa:	bf00      	nop
 80162ac:	08017fa3 	.word	0x08017fa3
 80162b0:	08018034 	.word	0x08018034

080162b4 <__mcmp>:
 80162b4:	b530      	push	{r4, r5, lr}
 80162b6:	6902      	ldr	r2, [r0, #16]
 80162b8:	690c      	ldr	r4, [r1, #16]
 80162ba:	1b12      	subs	r2, r2, r4
 80162bc:	d10e      	bne.n	80162dc <__mcmp+0x28>
 80162be:	f100 0314 	add.w	r3, r0, #20
 80162c2:	3114      	adds	r1, #20
 80162c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80162c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80162cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80162d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80162d4:	42a5      	cmp	r5, r4
 80162d6:	d003      	beq.n	80162e0 <__mcmp+0x2c>
 80162d8:	d305      	bcc.n	80162e6 <__mcmp+0x32>
 80162da:	2201      	movs	r2, #1
 80162dc:	4610      	mov	r0, r2
 80162de:	bd30      	pop	{r4, r5, pc}
 80162e0:	4283      	cmp	r3, r0
 80162e2:	d3f3      	bcc.n	80162cc <__mcmp+0x18>
 80162e4:	e7fa      	b.n	80162dc <__mcmp+0x28>
 80162e6:	f04f 32ff 	mov.w	r2, #4294967295
 80162ea:	e7f7      	b.n	80162dc <__mcmp+0x28>

080162ec <__mdiff>:
 80162ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162f0:	460c      	mov	r4, r1
 80162f2:	4606      	mov	r6, r0
 80162f4:	4611      	mov	r1, r2
 80162f6:	4620      	mov	r0, r4
 80162f8:	4617      	mov	r7, r2
 80162fa:	f7ff ffdb 	bl	80162b4 <__mcmp>
 80162fe:	1e05      	subs	r5, r0, #0
 8016300:	d110      	bne.n	8016324 <__mdiff+0x38>
 8016302:	4629      	mov	r1, r5
 8016304:	4630      	mov	r0, r6
 8016306:	f7ff fd0d 	bl	8015d24 <_Balloc>
 801630a:	b930      	cbnz	r0, 801631a <__mdiff+0x2e>
 801630c:	4b39      	ldr	r3, [pc, #228]	; (80163f4 <__mdiff+0x108>)
 801630e:	4602      	mov	r2, r0
 8016310:	f240 2132 	movw	r1, #562	; 0x232
 8016314:	4838      	ldr	r0, [pc, #224]	; (80163f8 <__mdiff+0x10c>)
 8016316:	f000 fcf5 	bl	8016d04 <__assert_func>
 801631a:	2301      	movs	r3, #1
 801631c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016320:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016324:	bfa4      	itt	ge
 8016326:	463b      	movge	r3, r7
 8016328:	4627      	movge	r7, r4
 801632a:	4630      	mov	r0, r6
 801632c:	6879      	ldr	r1, [r7, #4]
 801632e:	bfa6      	itte	ge
 8016330:	461c      	movge	r4, r3
 8016332:	2500      	movge	r5, #0
 8016334:	2501      	movlt	r5, #1
 8016336:	f7ff fcf5 	bl	8015d24 <_Balloc>
 801633a:	b920      	cbnz	r0, 8016346 <__mdiff+0x5a>
 801633c:	4b2d      	ldr	r3, [pc, #180]	; (80163f4 <__mdiff+0x108>)
 801633e:	4602      	mov	r2, r0
 8016340:	f44f 7110 	mov.w	r1, #576	; 0x240
 8016344:	e7e6      	b.n	8016314 <__mdiff+0x28>
 8016346:	693e      	ldr	r6, [r7, #16]
 8016348:	60c5      	str	r5, [r0, #12]
 801634a:	6925      	ldr	r5, [r4, #16]
 801634c:	f107 0114 	add.w	r1, r7, #20
 8016350:	f104 0914 	add.w	r9, r4, #20
 8016354:	f100 0e14 	add.w	lr, r0, #20
 8016358:	f107 0210 	add.w	r2, r7, #16
 801635c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8016360:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8016364:	46f2      	mov	sl, lr
 8016366:	2700      	movs	r7, #0
 8016368:	f859 3b04 	ldr.w	r3, [r9], #4
 801636c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8016370:	fa1f f883 	uxth.w	r8, r3
 8016374:	fa17 f78b 	uxtah	r7, r7, fp
 8016378:	0c1b      	lsrs	r3, r3, #16
 801637a:	eba7 0808 	sub.w	r8, r7, r8
 801637e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8016382:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8016386:	fa1f f888 	uxth.w	r8, r8
 801638a:	141f      	asrs	r7, r3, #16
 801638c:	454d      	cmp	r5, r9
 801638e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8016392:	f84a 3b04 	str.w	r3, [sl], #4
 8016396:	d8e7      	bhi.n	8016368 <__mdiff+0x7c>
 8016398:	1b2b      	subs	r3, r5, r4
 801639a:	3b15      	subs	r3, #21
 801639c:	f023 0303 	bic.w	r3, r3, #3
 80163a0:	3304      	adds	r3, #4
 80163a2:	3415      	adds	r4, #21
 80163a4:	42a5      	cmp	r5, r4
 80163a6:	bf38      	it	cc
 80163a8:	2304      	movcc	r3, #4
 80163aa:	4419      	add	r1, r3
 80163ac:	4473      	add	r3, lr
 80163ae:	469e      	mov	lr, r3
 80163b0:	460d      	mov	r5, r1
 80163b2:	4565      	cmp	r5, ip
 80163b4:	d30e      	bcc.n	80163d4 <__mdiff+0xe8>
 80163b6:	f10c 0203 	add.w	r2, ip, #3
 80163ba:	1a52      	subs	r2, r2, r1
 80163bc:	f022 0203 	bic.w	r2, r2, #3
 80163c0:	3903      	subs	r1, #3
 80163c2:	458c      	cmp	ip, r1
 80163c4:	bf38      	it	cc
 80163c6:	2200      	movcc	r2, #0
 80163c8:	441a      	add	r2, r3
 80163ca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80163ce:	b17b      	cbz	r3, 80163f0 <__mdiff+0x104>
 80163d0:	6106      	str	r6, [r0, #16]
 80163d2:	e7a5      	b.n	8016320 <__mdiff+0x34>
 80163d4:	f855 8b04 	ldr.w	r8, [r5], #4
 80163d8:	fa17 f488 	uxtah	r4, r7, r8
 80163dc:	1422      	asrs	r2, r4, #16
 80163de:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80163e2:	b2a4      	uxth	r4, r4
 80163e4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80163e8:	f84e 4b04 	str.w	r4, [lr], #4
 80163ec:	1417      	asrs	r7, r2, #16
 80163ee:	e7e0      	b.n	80163b2 <__mdiff+0xc6>
 80163f0:	3e01      	subs	r6, #1
 80163f2:	e7ea      	b.n	80163ca <__mdiff+0xde>
 80163f4:	08017fa3 	.word	0x08017fa3
 80163f8:	08018034 	.word	0x08018034

080163fc <__ulp>:
 80163fc:	b082      	sub	sp, #8
 80163fe:	ed8d 0b00 	vstr	d0, [sp]
 8016402:	9b01      	ldr	r3, [sp, #4]
 8016404:	4912      	ldr	r1, [pc, #72]	; (8016450 <__ulp+0x54>)
 8016406:	4019      	ands	r1, r3
 8016408:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801640c:	2900      	cmp	r1, #0
 801640e:	dd05      	ble.n	801641c <__ulp+0x20>
 8016410:	2200      	movs	r2, #0
 8016412:	460b      	mov	r3, r1
 8016414:	ec43 2b10 	vmov	d0, r2, r3
 8016418:	b002      	add	sp, #8
 801641a:	4770      	bx	lr
 801641c:	4249      	negs	r1, r1
 801641e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8016422:	ea4f 5021 	mov.w	r0, r1, asr #20
 8016426:	f04f 0200 	mov.w	r2, #0
 801642a:	f04f 0300 	mov.w	r3, #0
 801642e:	da04      	bge.n	801643a <__ulp+0x3e>
 8016430:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8016434:	fa41 f300 	asr.w	r3, r1, r0
 8016438:	e7ec      	b.n	8016414 <__ulp+0x18>
 801643a:	f1a0 0114 	sub.w	r1, r0, #20
 801643e:	291e      	cmp	r1, #30
 8016440:	bfda      	itte	le
 8016442:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8016446:	fa20 f101 	lsrle.w	r1, r0, r1
 801644a:	2101      	movgt	r1, #1
 801644c:	460a      	mov	r2, r1
 801644e:	e7e1      	b.n	8016414 <__ulp+0x18>
 8016450:	7ff00000 	.word	0x7ff00000

08016454 <__b2d>:
 8016454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016456:	6905      	ldr	r5, [r0, #16]
 8016458:	f100 0714 	add.w	r7, r0, #20
 801645c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8016460:	1f2e      	subs	r6, r5, #4
 8016462:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8016466:	4620      	mov	r0, r4
 8016468:	f7ff fd52 	bl	8015f10 <__hi0bits>
 801646c:	f1c0 0320 	rsb	r3, r0, #32
 8016470:	280a      	cmp	r0, #10
 8016472:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80164f0 <__b2d+0x9c>
 8016476:	600b      	str	r3, [r1, #0]
 8016478:	dc14      	bgt.n	80164a4 <__b2d+0x50>
 801647a:	f1c0 0e0b 	rsb	lr, r0, #11
 801647e:	fa24 f10e 	lsr.w	r1, r4, lr
 8016482:	42b7      	cmp	r7, r6
 8016484:	ea41 030c 	orr.w	r3, r1, ip
 8016488:	bf34      	ite	cc
 801648a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801648e:	2100      	movcs	r1, #0
 8016490:	3015      	adds	r0, #21
 8016492:	fa04 f000 	lsl.w	r0, r4, r0
 8016496:	fa21 f10e 	lsr.w	r1, r1, lr
 801649a:	ea40 0201 	orr.w	r2, r0, r1
 801649e:	ec43 2b10 	vmov	d0, r2, r3
 80164a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80164a4:	42b7      	cmp	r7, r6
 80164a6:	bf3a      	itte	cc
 80164a8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80164ac:	f1a5 0608 	subcc.w	r6, r5, #8
 80164b0:	2100      	movcs	r1, #0
 80164b2:	380b      	subs	r0, #11
 80164b4:	d017      	beq.n	80164e6 <__b2d+0x92>
 80164b6:	f1c0 0c20 	rsb	ip, r0, #32
 80164ba:	fa04 f500 	lsl.w	r5, r4, r0
 80164be:	42be      	cmp	r6, r7
 80164c0:	fa21 f40c 	lsr.w	r4, r1, ip
 80164c4:	ea45 0504 	orr.w	r5, r5, r4
 80164c8:	bf8c      	ite	hi
 80164ca:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80164ce:	2400      	movls	r4, #0
 80164d0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80164d4:	fa01 f000 	lsl.w	r0, r1, r0
 80164d8:	fa24 f40c 	lsr.w	r4, r4, ip
 80164dc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80164e0:	ea40 0204 	orr.w	r2, r0, r4
 80164e4:	e7db      	b.n	801649e <__b2d+0x4a>
 80164e6:	ea44 030c 	orr.w	r3, r4, ip
 80164ea:	460a      	mov	r2, r1
 80164ec:	e7d7      	b.n	801649e <__b2d+0x4a>
 80164ee:	bf00      	nop
 80164f0:	3ff00000 	.word	0x3ff00000

080164f4 <__d2b>:
 80164f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80164f8:	4689      	mov	r9, r1
 80164fa:	2101      	movs	r1, #1
 80164fc:	ec57 6b10 	vmov	r6, r7, d0
 8016500:	4690      	mov	r8, r2
 8016502:	f7ff fc0f 	bl	8015d24 <_Balloc>
 8016506:	4604      	mov	r4, r0
 8016508:	b930      	cbnz	r0, 8016518 <__d2b+0x24>
 801650a:	4602      	mov	r2, r0
 801650c:	4b25      	ldr	r3, [pc, #148]	; (80165a4 <__d2b+0xb0>)
 801650e:	4826      	ldr	r0, [pc, #152]	; (80165a8 <__d2b+0xb4>)
 8016510:	f240 310a 	movw	r1, #778	; 0x30a
 8016514:	f000 fbf6 	bl	8016d04 <__assert_func>
 8016518:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801651c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016520:	bb35      	cbnz	r5, 8016570 <__d2b+0x7c>
 8016522:	2e00      	cmp	r6, #0
 8016524:	9301      	str	r3, [sp, #4]
 8016526:	d028      	beq.n	801657a <__d2b+0x86>
 8016528:	4668      	mov	r0, sp
 801652a:	9600      	str	r6, [sp, #0]
 801652c:	f7ff fd10 	bl	8015f50 <__lo0bits>
 8016530:	9900      	ldr	r1, [sp, #0]
 8016532:	b300      	cbz	r0, 8016576 <__d2b+0x82>
 8016534:	9a01      	ldr	r2, [sp, #4]
 8016536:	f1c0 0320 	rsb	r3, r0, #32
 801653a:	fa02 f303 	lsl.w	r3, r2, r3
 801653e:	430b      	orrs	r3, r1
 8016540:	40c2      	lsrs	r2, r0
 8016542:	6163      	str	r3, [r4, #20]
 8016544:	9201      	str	r2, [sp, #4]
 8016546:	9b01      	ldr	r3, [sp, #4]
 8016548:	61a3      	str	r3, [r4, #24]
 801654a:	2b00      	cmp	r3, #0
 801654c:	bf14      	ite	ne
 801654e:	2202      	movne	r2, #2
 8016550:	2201      	moveq	r2, #1
 8016552:	6122      	str	r2, [r4, #16]
 8016554:	b1d5      	cbz	r5, 801658c <__d2b+0x98>
 8016556:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801655a:	4405      	add	r5, r0
 801655c:	f8c9 5000 	str.w	r5, [r9]
 8016560:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016564:	f8c8 0000 	str.w	r0, [r8]
 8016568:	4620      	mov	r0, r4
 801656a:	b003      	add	sp, #12
 801656c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016570:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016574:	e7d5      	b.n	8016522 <__d2b+0x2e>
 8016576:	6161      	str	r1, [r4, #20]
 8016578:	e7e5      	b.n	8016546 <__d2b+0x52>
 801657a:	a801      	add	r0, sp, #4
 801657c:	f7ff fce8 	bl	8015f50 <__lo0bits>
 8016580:	9b01      	ldr	r3, [sp, #4]
 8016582:	6163      	str	r3, [r4, #20]
 8016584:	2201      	movs	r2, #1
 8016586:	6122      	str	r2, [r4, #16]
 8016588:	3020      	adds	r0, #32
 801658a:	e7e3      	b.n	8016554 <__d2b+0x60>
 801658c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016590:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016594:	f8c9 0000 	str.w	r0, [r9]
 8016598:	6918      	ldr	r0, [r3, #16]
 801659a:	f7ff fcb9 	bl	8015f10 <__hi0bits>
 801659e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80165a2:	e7df      	b.n	8016564 <__d2b+0x70>
 80165a4:	08017fa3 	.word	0x08017fa3
 80165a8:	08018034 	.word	0x08018034

080165ac <__ratio>:
 80165ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165b0:	4688      	mov	r8, r1
 80165b2:	4669      	mov	r1, sp
 80165b4:	4681      	mov	r9, r0
 80165b6:	f7ff ff4d 	bl	8016454 <__b2d>
 80165ba:	a901      	add	r1, sp, #4
 80165bc:	4640      	mov	r0, r8
 80165be:	ec55 4b10 	vmov	r4, r5, d0
 80165c2:	f7ff ff47 	bl	8016454 <__b2d>
 80165c6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80165ca:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80165ce:	eba3 0c02 	sub.w	ip, r3, r2
 80165d2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80165d6:	1a9b      	subs	r3, r3, r2
 80165d8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80165dc:	ec51 0b10 	vmov	r0, r1, d0
 80165e0:	2b00      	cmp	r3, #0
 80165e2:	bfd6      	itet	le
 80165e4:	460a      	movle	r2, r1
 80165e6:	462a      	movgt	r2, r5
 80165e8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80165ec:	468b      	mov	fp, r1
 80165ee:	462f      	mov	r7, r5
 80165f0:	bfd4      	ite	le
 80165f2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80165f6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80165fa:	4620      	mov	r0, r4
 80165fc:	ee10 2a10 	vmov	r2, s0
 8016600:	465b      	mov	r3, fp
 8016602:	4639      	mov	r1, r7
 8016604:	f7ea f932 	bl	800086c <__aeabi_ddiv>
 8016608:	ec41 0b10 	vmov	d0, r0, r1
 801660c:	b003      	add	sp, #12
 801660e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016612 <__copybits>:
 8016612:	3901      	subs	r1, #1
 8016614:	b570      	push	{r4, r5, r6, lr}
 8016616:	1149      	asrs	r1, r1, #5
 8016618:	6914      	ldr	r4, [r2, #16]
 801661a:	3101      	adds	r1, #1
 801661c:	f102 0314 	add.w	r3, r2, #20
 8016620:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016624:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016628:	1f05      	subs	r5, r0, #4
 801662a:	42a3      	cmp	r3, r4
 801662c:	d30c      	bcc.n	8016648 <__copybits+0x36>
 801662e:	1aa3      	subs	r3, r4, r2
 8016630:	3b11      	subs	r3, #17
 8016632:	f023 0303 	bic.w	r3, r3, #3
 8016636:	3211      	adds	r2, #17
 8016638:	42a2      	cmp	r2, r4
 801663a:	bf88      	it	hi
 801663c:	2300      	movhi	r3, #0
 801663e:	4418      	add	r0, r3
 8016640:	2300      	movs	r3, #0
 8016642:	4288      	cmp	r0, r1
 8016644:	d305      	bcc.n	8016652 <__copybits+0x40>
 8016646:	bd70      	pop	{r4, r5, r6, pc}
 8016648:	f853 6b04 	ldr.w	r6, [r3], #4
 801664c:	f845 6f04 	str.w	r6, [r5, #4]!
 8016650:	e7eb      	b.n	801662a <__copybits+0x18>
 8016652:	f840 3b04 	str.w	r3, [r0], #4
 8016656:	e7f4      	b.n	8016642 <__copybits+0x30>

08016658 <__any_on>:
 8016658:	f100 0214 	add.w	r2, r0, #20
 801665c:	6900      	ldr	r0, [r0, #16]
 801665e:	114b      	asrs	r3, r1, #5
 8016660:	4298      	cmp	r0, r3
 8016662:	b510      	push	{r4, lr}
 8016664:	db11      	blt.n	801668a <__any_on+0x32>
 8016666:	dd0a      	ble.n	801667e <__any_on+0x26>
 8016668:	f011 011f 	ands.w	r1, r1, #31
 801666c:	d007      	beq.n	801667e <__any_on+0x26>
 801666e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016672:	fa24 f001 	lsr.w	r0, r4, r1
 8016676:	fa00 f101 	lsl.w	r1, r0, r1
 801667a:	428c      	cmp	r4, r1
 801667c:	d10b      	bne.n	8016696 <__any_on+0x3e>
 801667e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016682:	4293      	cmp	r3, r2
 8016684:	d803      	bhi.n	801668e <__any_on+0x36>
 8016686:	2000      	movs	r0, #0
 8016688:	bd10      	pop	{r4, pc}
 801668a:	4603      	mov	r3, r0
 801668c:	e7f7      	b.n	801667e <__any_on+0x26>
 801668e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016692:	2900      	cmp	r1, #0
 8016694:	d0f5      	beq.n	8016682 <__any_on+0x2a>
 8016696:	2001      	movs	r0, #1
 8016698:	e7f6      	b.n	8016688 <__any_on+0x30>

0801669a <_calloc_r>:
 801669a:	b513      	push	{r0, r1, r4, lr}
 801669c:	434a      	muls	r2, r1
 801669e:	4611      	mov	r1, r2
 80166a0:	9201      	str	r2, [sp, #4]
 80166a2:	f7fc f827 	bl	80126f4 <_malloc_r>
 80166a6:	4604      	mov	r4, r0
 80166a8:	b118      	cbz	r0, 80166b2 <_calloc_r+0x18>
 80166aa:	9a01      	ldr	r2, [sp, #4]
 80166ac:	2100      	movs	r1, #0
 80166ae:	f7fc f818 	bl	80126e2 <memset>
 80166b2:	4620      	mov	r0, r4
 80166b4:	b002      	add	sp, #8
 80166b6:	bd10      	pop	{r4, pc}

080166b8 <_free_r>:
 80166b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80166ba:	2900      	cmp	r1, #0
 80166bc:	d048      	beq.n	8016750 <_free_r+0x98>
 80166be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80166c2:	9001      	str	r0, [sp, #4]
 80166c4:	2b00      	cmp	r3, #0
 80166c6:	f1a1 0404 	sub.w	r4, r1, #4
 80166ca:	bfb8      	it	lt
 80166cc:	18e4      	addlt	r4, r4, r3
 80166ce:	f7ff fb1d 	bl	8015d0c <__malloc_lock>
 80166d2:	4a20      	ldr	r2, [pc, #128]	; (8016754 <_free_r+0x9c>)
 80166d4:	9801      	ldr	r0, [sp, #4]
 80166d6:	6813      	ldr	r3, [r2, #0]
 80166d8:	4615      	mov	r5, r2
 80166da:	b933      	cbnz	r3, 80166ea <_free_r+0x32>
 80166dc:	6063      	str	r3, [r4, #4]
 80166de:	6014      	str	r4, [r2, #0]
 80166e0:	b003      	add	sp, #12
 80166e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80166e6:	f7ff bb17 	b.w	8015d18 <__malloc_unlock>
 80166ea:	42a3      	cmp	r3, r4
 80166ec:	d90b      	bls.n	8016706 <_free_r+0x4e>
 80166ee:	6821      	ldr	r1, [r4, #0]
 80166f0:	1862      	adds	r2, r4, r1
 80166f2:	4293      	cmp	r3, r2
 80166f4:	bf04      	itt	eq
 80166f6:	681a      	ldreq	r2, [r3, #0]
 80166f8:	685b      	ldreq	r3, [r3, #4]
 80166fa:	6063      	str	r3, [r4, #4]
 80166fc:	bf04      	itt	eq
 80166fe:	1852      	addeq	r2, r2, r1
 8016700:	6022      	streq	r2, [r4, #0]
 8016702:	602c      	str	r4, [r5, #0]
 8016704:	e7ec      	b.n	80166e0 <_free_r+0x28>
 8016706:	461a      	mov	r2, r3
 8016708:	685b      	ldr	r3, [r3, #4]
 801670a:	b10b      	cbz	r3, 8016710 <_free_r+0x58>
 801670c:	42a3      	cmp	r3, r4
 801670e:	d9fa      	bls.n	8016706 <_free_r+0x4e>
 8016710:	6811      	ldr	r1, [r2, #0]
 8016712:	1855      	adds	r5, r2, r1
 8016714:	42a5      	cmp	r5, r4
 8016716:	d10b      	bne.n	8016730 <_free_r+0x78>
 8016718:	6824      	ldr	r4, [r4, #0]
 801671a:	4421      	add	r1, r4
 801671c:	1854      	adds	r4, r2, r1
 801671e:	42a3      	cmp	r3, r4
 8016720:	6011      	str	r1, [r2, #0]
 8016722:	d1dd      	bne.n	80166e0 <_free_r+0x28>
 8016724:	681c      	ldr	r4, [r3, #0]
 8016726:	685b      	ldr	r3, [r3, #4]
 8016728:	6053      	str	r3, [r2, #4]
 801672a:	4421      	add	r1, r4
 801672c:	6011      	str	r1, [r2, #0]
 801672e:	e7d7      	b.n	80166e0 <_free_r+0x28>
 8016730:	d902      	bls.n	8016738 <_free_r+0x80>
 8016732:	230c      	movs	r3, #12
 8016734:	6003      	str	r3, [r0, #0]
 8016736:	e7d3      	b.n	80166e0 <_free_r+0x28>
 8016738:	6825      	ldr	r5, [r4, #0]
 801673a:	1961      	adds	r1, r4, r5
 801673c:	428b      	cmp	r3, r1
 801673e:	bf04      	itt	eq
 8016740:	6819      	ldreq	r1, [r3, #0]
 8016742:	685b      	ldreq	r3, [r3, #4]
 8016744:	6063      	str	r3, [r4, #4]
 8016746:	bf04      	itt	eq
 8016748:	1949      	addeq	r1, r1, r5
 801674a:	6021      	streq	r1, [r4, #0]
 801674c:	6054      	str	r4, [r2, #4]
 801674e:	e7c7      	b.n	80166e0 <_free_r+0x28>
 8016750:	b003      	add	sp, #12
 8016752:	bd30      	pop	{r4, r5, pc}
 8016754:	20004fbc 	.word	0x20004fbc

08016758 <__ssputs_r>:
 8016758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801675c:	688e      	ldr	r6, [r1, #8]
 801675e:	429e      	cmp	r6, r3
 8016760:	4682      	mov	sl, r0
 8016762:	460c      	mov	r4, r1
 8016764:	4690      	mov	r8, r2
 8016766:	461f      	mov	r7, r3
 8016768:	d838      	bhi.n	80167dc <__ssputs_r+0x84>
 801676a:	898a      	ldrh	r2, [r1, #12]
 801676c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016770:	d032      	beq.n	80167d8 <__ssputs_r+0x80>
 8016772:	6825      	ldr	r5, [r4, #0]
 8016774:	6909      	ldr	r1, [r1, #16]
 8016776:	eba5 0901 	sub.w	r9, r5, r1
 801677a:	6965      	ldr	r5, [r4, #20]
 801677c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016780:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016784:	3301      	adds	r3, #1
 8016786:	444b      	add	r3, r9
 8016788:	106d      	asrs	r5, r5, #1
 801678a:	429d      	cmp	r5, r3
 801678c:	bf38      	it	cc
 801678e:	461d      	movcc	r5, r3
 8016790:	0553      	lsls	r3, r2, #21
 8016792:	d531      	bpl.n	80167f8 <__ssputs_r+0xa0>
 8016794:	4629      	mov	r1, r5
 8016796:	f7fb ffad 	bl	80126f4 <_malloc_r>
 801679a:	4606      	mov	r6, r0
 801679c:	b950      	cbnz	r0, 80167b4 <__ssputs_r+0x5c>
 801679e:	230c      	movs	r3, #12
 80167a0:	f8ca 3000 	str.w	r3, [sl]
 80167a4:	89a3      	ldrh	r3, [r4, #12]
 80167a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80167aa:	81a3      	strh	r3, [r4, #12]
 80167ac:	f04f 30ff 	mov.w	r0, #4294967295
 80167b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80167b4:	6921      	ldr	r1, [r4, #16]
 80167b6:	464a      	mov	r2, r9
 80167b8:	f7fb ff85 	bl	80126c6 <memcpy>
 80167bc:	89a3      	ldrh	r3, [r4, #12]
 80167be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80167c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80167c6:	81a3      	strh	r3, [r4, #12]
 80167c8:	6126      	str	r6, [r4, #16]
 80167ca:	6165      	str	r5, [r4, #20]
 80167cc:	444e      	add	r6, r9
 80167ce:	eba5 0509 	sub.w	r5, r5, r9
 80167d2:	6026      	str	r6, [r4, #0]
 80167d4:	60a5      	str	r5, [r4, #8]
 80167d6:	463e      	mov	r6, r7
 80167d8:	42be      	cmp	r6, r7
 80167da:	d900      	bls.n	80167de <__ssputs_r+0x86>
 80167dc:	463e      	mov	r6, r7
 80167de:	4632      	mov	r2, r6
 80167e0:	6820      	ldr	r0, [r4, #0]
 80167e2:	4641      	mov	r1, r8
 80167e4:	f000 fae0 	bl	8016da8 <memmove>
 80167e8:	68a3      	ldr	r3, [r4, #8]
 80167ea:	6822      	ldr	r2, [r4, #0]
 80167ec:	1b9b      	subs	r3, r3, r6
 80167ee:	4432      	add	r2, r6
 80167f0:	60a3      	str	r3, [r4, #8]
 80167f2:	6022      	str	r2, [r4, #0]
 80167f4:	2000      	movs	r0, #0
 80167f6:	e7db      	b.n	80167b0 <__ssputs_r+0x58>
 80167f8:	462a      	mov	r2, r5
 80167fa:	f000 faef 	bl	8016ddc <_realloc_r>
 80167fe:	4606      	mov	r6, r0
 8016800:	2800      	cmp	r0, #0
 8016802:	d1e1      	bne.n	80167c8 <__ssputs_r+0x70>
 8016804:	6921      	ldr	r1, [r4, #16]
 8016806:	4650      	mov	r0, sl
 8016808:	f7ff ff56 	bl	80166b8 <_free_r>
 801680c:	e7c7      	b.n	801679e <__ssputs_r+0x46>
	...

08016810 <_svfiprintf_r>:
 8016810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016814:	4698      	mov	r8, r3
 8016816:	898b      	ldrh	r3, [r1, #12]
 8016818:	061b      	lsls	r3, r3, #24
 801681a:	b09d      	sub	sp, #116	; 0x74
 801681c:	4607      	mov	r7, r0
 801681e:	460d      	mov	r5, r1
 8016820:	4614      	mov	r4, r2
 8016822:	d50e      	bpl.n	8016842 <_svfiprintf_r+0x32>
 8016824:	690b      	ldr	r3, [r1, #16]
 8016826:	b963      	cbnz	r3, 8016842 <_svfiprintf_r+0x32>
 8016828:	2140      	movs	r1, #64	; 0x40
 801682a:	f7fb ff63 	bl	80126f4 <_malloc_r>
 801682e:	6028      	str	r0, [r5, #0]
 8016830:	6128      	str	r0, [r5, #16]
 8016832:	b920      	cbnz	r0, 801683e <_svfiprintf_r+0x2e>
 8016834:	230c      	movs	r3, #12
 8016836:	603b      	str	r3, [r7, #0]
 8016838:	f04f 30ff 	mov.w	r0, #4294967295
 801683c:	e0d1      	b.n	80169e2 <_svfiprintf_r+0x1d2>
 801683e:	2340      	movs	r3, #64	; 0x40
 8016840:	616b      	str	r3, [r5, #20]
 8016842:	2300      	movs	r3, #0
 8016844:	9309      	str	r3, [sp, #36]	; 0x24
 8016846:	2320      	movs	r3, #32
 8016848:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801684c:	f8cd 800c 	str.w	r8, [sp, #12]
 8016850:	2330      	movs	r3, #48	; 0x30
 8016852:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80169fc <_svfiprintf_r+0x1ec>
 8016856:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801685a:	f04f 0901 	mov.w	r9, #1
 801685e:	4623      	mov	r3, r4
 8016860:	469a      	mov	sl, r3
 8016862:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016866:	b10a      	cbz	r2, 801686c <_svfiprintf_r+0x5c>
 8016868:	2a25      	cmp	r2, #37	; 0x25
 801686a:	d1f9      	bne.n	8016860 <_svfiprintf_r+0x50>
 801686c:	ebba 0b04 	subs.w	fp, sl, r4
 8016870:	d00b      	beq.n	801688a <_svfiprintf_r+0x7a>
 8016872:	465b      	mov	r3, fp
 8016874:	4622      	mov	r2, r4
 8016876:	4629      	mov	r1, r5
 8016878:	4638      	mov	r0, r7
 801687a:	f7ff ff6d 	bl	8016758 <__ssputs_r>
 801687e:	3001      	adds	r0, #1
 8016880:	f000 80aa 	beq.w	80169d8 <_svfiprintf_r+0x1c8>
 8016884:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016886:	445a      	add	r2, fp
 8016888:	9209      	str	r2, [sp, #36]	; 0x24
 801688a:	f89a 3000 	ldrb.w	r3, [sl]
 801688e:	2b00      	cmp	r3, #0
 8016890:	f000 80a2 	beq.w	80169d8 <_svfiprintf_r+0x1c8>
 8016894:	2300      	movs	r3, #0
 8016896:	f04f 32ff 	mov.w	r2, #4294967295
 801689a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801689e:	f10a 0a01 	add.w	sl, sl, #1
 80168a2:	9304      	str	r3, [sp, #16]
 80168a4:	9307      	str	r3, [sp, #28]
 80168a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80168aa:	931a      	str	r3, [sp, #104]	; 0x68
 80168ac:	4654      	mov	r4, sl
 80168ae:	2205      	movs	r2, #5
 80168b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80168b4:	4851      	ldr	r0, [pc, #324]	; (80169fc <_svfiprintf_r+0x1ec>)
 80168b6:	f7e9 fca3 	bl	8000200 <memchr>
 80168ba:	9a04      	ldr	r2, [sp, #16]
 80168bc:	b9d8      	cbnz	r0, 80168f6 <_svfiprintf_r+0xe6>
 80168be:	06d0      	lsls	r0, r2, #27
 80168c0:	bf44      	itt	mi
 80168c2:	2320      	movmi	r3, #32
 80168c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80168c8:	0711      	lsls	r1, r2, #28
 80168ca:	bf44      	itt	mi
 80168cc:	232b      	movmi	r3, #43	; 0x2b
 80168ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80168d2:	f89a 3000 	ldrb.w	r3, [sl]
 80168d6:	2b2a      	cmp	r3, #42	; 0x2a
 80168d8:	d015      	beq.n	8016906 <_svfiprintf_r+0xf6>
 80168da:	9a07      	ldr	r2, [sp, #28]
 80168dc:	4654      	mov	r4, sl
 80168de:	2000      	movs	r0, #0
 80168e0:	f04f 0c0a 	mov.w	ip, #10
 80168e4:	4621      	mov	r1, r4
 80168e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80168ea:	3b30      	subs	r3, #48	; 0x30
 80168ec:	2b09      	cmp	r3, #9
 80168ee:	d94e      	bls.n	801698e <_svfiprintf_r+0x17e>
 80168f0:	b1b0      	cbz	r0, 8016920 <_svfiprintf_r+0x110>
 80168f2:	9207      	str	r2, [sp, #28]
 80168f4:	e014      	b.n	8016920 <_svfiprintf_r+0x110>
 80168f6:	eba0 0308 	sub.w	r3, r0, r8
 80168fa:	fa09 f303 	lsl.w	r3, r9, r3
 80168fe:	4313      	orrs	r3, r2
 8016900:	9304      	str	r3, [sp, #16]
 8016902:	46a2      	mov	sl, r4
 8016904:	e7d2      	b.n	80168ac <_svfiprintf_r+0x9c>
 8016906:	9b03      	ldr	r3, [sp, #12]
 8016908:	1d19      	adds	r1, r3, #4
 801690a:	681b      	ldr	r3, [r3, #0]
 801690c:	9103      	str	r1, [sp, #12]
 801690e:	2b00      	cmp	r3, #0
 8016910:	bfbb      	ittet	lt
 8016912:	425b      	neglt	r3, r3
 8016914:	f042 0202 	orrlt.w	r2, r2, #2
 8016918:	9307      	strge	r3, [sp, #28]
 801691a:	9307      	strlt	r3, [sp, #28]
 801691c:	bfb8      	it	lt
 801691e:	9204      	strlt	r2, [sp, #16]
 8016920:	7823      	ldrb	r3, [r4, #0]
 8016922:	2b2e      	cmp	r3, #46	; 0x2e
 8016924:	d10c      	bne.n	8016940 <_svfiprintf_r+0x130>
 8016926:	7863      	ldrb	r3, [r4, #1]
 8016928:	2b2a      	cmp	r3, #42	; 0x2a
 801692a:	d135      	bne.n	8016998 <_svfiprintf_r+0x188>
 801692c:	9b03      	ldr	r3, [sp, #12]
 801692e:	1d1a      	adds	r2, r3, #4
 8016930:	681b      	ldr	r3, [r3, #0]
 8016932:	9203      	str	r2, [sp, #12]
 8016934:	2b00      	cmp	r3, #0
 8016936:	bfb8      	it	lt
 8016938:	f04f 33ff 	movlt.w	r3, #4294967295
 801693c:	3402      	adds	r4, #2
 801693e:	9305      	str	r3, [sp, #20]
 8016940:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8016a0c <_svfiprintf_r+0x1fc>
 8016944:	7821      	ldrb	r1, [r4, #0]
 8016946:	2203      	movs	r2, #3
 8016948:	4650      	mov	r0, sl
 801694a:	f7e9 fc59 	bl	8000200 <memchr>
 801694e:	b140      	cbz	r0, 8016962 <_svfiprintf_r+0x152>
 8016950:	2340      	movs	r3, #64	; 0x40
 8016952:	eba0 000a 	sub.w	r0, r0, sl
 8016956:	fa03 f000 	lsl.w	r0, r3, r0
 801695a:	9b04      	ldr	r3, [sp, #16]
 801695c:	4303      	orrs	r3, r0
 801695e:	3401      	adds	r4, #1
 8016960:	9304      	str	r3, [sp, #16]
 8016962:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016966:	4826      	ldr	r0, [pc, #152]	; (8016a00 <_svfiprintf_r+0x1f0>)
 8016968:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801696c:	2206      	movs	r2, #6
 801696e:	f7e9 fc47 	bl	8000200 <memchr>
 8016972:	2800      	cmp	r0, #0
 8016974:	d038      	beq.n	80169e8 <_svfiprintf_r+0x1d8>
 8016976:	4b23      	ldr	r3, [pc, #140]	; (8016a04 <_svfiprintf_r+0x1f4>)
 8016978:	bb1b      	cbnz	r3, 80169c2 <_svfiprintf_r+0x1b2>
 801697a:	9b03      	ldr	r3, [sp, #12]
 801697c:	3307      	adds	r3, #7
 801697e:	f023 0307 	bic.w	r3, r3, #7
 8016982:	3308      	adds	r3, #8
 8016984:	9303      	str	r3, [sp, #12]
 8016986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016988:	4433      	add	r3, r6
 801698a:	9309      	str	r3, [sp, #36]	; 0x24
 801698c:	e767      	b.n	801685e <_svfiprintf_r+0x4e>
 801698e:	fb0c 3202 	mla	r2, ip, r2, r3
 8016992:	460c      	mov	r4, r1
 8016994:	2001      	movs	r0, #1
 8016996:	e7a5      	b.n	80168e4 <_svfiprintf_r+0xd4>
 8016998:	2300      	movs	r3, #0
 801699a:	3401      	adds	r4, #1
 801699c:	9305      	str	r3, [sp, #20]
 801699e:	4619      	mov	r1, r3
 80169a0:	f04f 0c0a 	mov.w	ip, #10
 80169a4:	4620      	mov	r0, r4
 80169a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80169aa:	3a30      	subs	r2, #48	; 0x30
 80169ac:	2a09      	cmp	r2, #9
 80169ae:	d903      	bls.n	80169b8 <_svfiprintf_r+0x1a8>
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	d0c5      	beq.n	8016940 <_svfiprintf_r+0x130>
 80169b4:	9105      	str	r1, [sp, #20]
 80169b6:	e7c3      	b.n	8016940 <_svfiprintf_r+0x130>
 80169b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80169bc:	4604      	mov	r4, r0
 80169be:	2301      	movs	r3, #1
 80169c0:	e7f0      	b.n	80169a4 <_svfiprintf_r+0x194>
 80169c2:	ab03      	add	r3, sp, #12
 80169c4:	9300      	str	r3, [sp, #0]
 80169c6:	462a      	mov	r2, r5
 80169c8:	4b0f      	ldr	r3, [pc, #60]	; (8016a08 <_svfiprintf_r+0x1f8>)
 80169ca:	a904      	add	r1, sp, #16
 80169cc:	4638      	mov	r0, r7
 80169ce:	f7fb ff8b 	bl	80128e8 <_printf_float>
 80169d2:	1c42      	adds	r2, r0, #1
 80169d4:	4606      	mov	r6, r0
 80169d6:	d1d6      	bne.n	8016986 <_svfiprintf_r+0x176>
 80169d8:	89ab      	ldrh	r3, [r5, #12]
 80169da:	065b      	lsls	r3, r3, #25
 80169dc:	f53f af2c 	bmi.w	8016838 <_svfiprintf_r+0x28>
 80169e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80169e2:	b01d      	add	sp, #116	; 0x74
 80169e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169e8:	ab03      	add	r3, sp, #12
 80169ea:	9300      	str	r3, [sp, #0]
 80169ec:	462a      	mov	r2, r5
 80169ee:	4b06      	ldr	r3, [pc, #24]	; (8016a08 <_svfiprintf_r+0x1f8>)
 80169f0:	a904      	add	r1, sp, #16
 80169f2:	4638      	mov	r0, r7
 80169f4:	f7fc fa1c 	bl	8012e30 <_printf_i>
 80169f8:	e7eb      	b.n	80169d2 <_svfiprintf_r+0x1c2>
 80169fa:	bf00      	nop
 80169fc:	08018194 	.word	0x08018194
 8016a00:	0801819e 	.word	0x0801819e
 8016a04:	080128e9 	.word	0x080128e9
 8016a08:	08016759 	.word	0x08016759
 8016a0c:	0801819a 	.word	0x0801819a

08016a10 <__sfputc_r>:
 8016a10:	6893      	ldr	r3, [r2, #8]
 8016a12:	3b01      	subs	r3, #1
 8016a14:	2b00      	cmp	r3, #0
 8016a16:	b410      	push	{r4}
 8016a18:	6093      	str	r3, [r2, #8]
 8016a1a:	da08      	bge.n	8016a2e <__sfputc_r+0x1e>
 8016a1c:	6994      	ldr	r4, [r2, #24]
 8016a1e:	42a3      	cmp	r3, r4
 8016a20:	db01      	blt.n	8016a26 <__sfputc_r+0x16>
 8016a22:	290a      	cmp	r1, #10
 8016a24:	d103      	bne.n	8016a2e <__sfputc_r+0x1e>
 8016a26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016a2a:	f7fd bd4f 	b.w	80144cc <__swbuf_r>
 8016a2e:	6813      	ldr	r3, [r2, #0]
 8016a30:	1c58      	adds	r0, r3, #1
 8016a32:	6010      	str	r0, [r2, #0]
 8016a34:	7019      	strb	r1, [r3, #0]
 8016a36:	4608      	mov	r0, r1
 8016a38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016a3c:	4770      	bx	lr

08016a3e <__sfputs_r>:
 8016a3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a40:	4606      	mov	r6, r0
 8016a42:	460f      	mov	r7, r1
 8016a44:	4614      	mov	r4, r2
 8016a46:	18d5      	adds	r5, r2, r3
 8016a48:	42ac      	cmp	r4, r5
 8016a4a:	d101      	bne.n	8016a50 <__sfputs_r+0x12>
 8016a4c:	2000      	movs	r0, #0
 8016a4e:	e007      	b.n	8016a60 <__sfputs_r+0x22>
 8016a50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016a54:	463a      	mov	r2, r7
 8016a56:	4630      	mov	r0, r6
 8016a58:	f7ff ffda 	bl	8016a10 <__sfputc_r>
 8016a5c:	1c43      	adds	r3, r0, #1
 8016a5e:	d1f3      	bne.n	8016a48 <__sfputs_r+0xa>
 8016a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016a64 <_vfiprintf_r>:
 8016a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a68:	460d      	mov	r5, r1
 8016a6a:	b09d      	sub	sp, #116	; 0x74
 8016a6c:	4614      	mov	r4, r2
 8016a6e:	4698      	mov	r8, r3
 8016a70:	4606      	mov	r6, r0
 8016a72:	b118      	cbz	r0, 8016a7c <_vfiprintf_r+0x18>
 8016a74:	6983      	ldr	r3, [r0, #24]
 8016a76:	b90b      	cbnz	r3, 8016a7c <_vfiprintf_r+0x18>
 8016a78:	f7fb fd60 	bl	801253c <__sinit>
 8016a7c:	4b89      	ldr	r3, [pc, #548]	; (8016ca4 <_vfiprintf_r+0x240>)
 8016a7e:	429d      	cmp	r5, r3
 8016a80:	d11b      	bne.n	8016aba <_vfiprintf_r+0x56>
 8016a82:	6875      	ldr	r5, [r6, #4]
 8016a84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016a86:	07d9      	lsls	r1, r3, #31
 8016a88:	d405      	bmi.n	8016a96 <_vfiprintf_r+0x32>
 8016a8a:	89ab      	ldrh	r3, [r5, #12]
 8016a8c:	059a      	lsls	r2, r3, #22
 8016a8e:	d402      	bmi.n	8016a96 <_vfiprintf_r+0x32>
 8016a90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016a92:	f7fb fe16 	bl	80126c2 <__retarget_lock_acquire_recursive>
 8016a96:	89ab      	ldrh	r3, [r5, #12]
 8016a98:	071b      	lsls	r3, r3, #28
 8016a9a:	d501      	bpl.n	8016aa0 <_vfiprintf_r+0x3c>
 8016a9c:	692b      	ldr	r3, [r5, #16]
 8016a9e:	b9eb      	cbnz	r3, 8016adc <_vfiprintf_r+0x78>
 8016aa0:	4629      	mov	r1, r5
 8016aa2:	4630      	mov	r0, r6
 8016aa4:	f7fd fd76 	bl	8014594 <__swsetup_r>
 8016aa8:	b1c0      	cbz	r0, 8016adc <_vfiprintf_r+0x78>
 8016aaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016aac:	07dc      	lsls	r4, r3, #31
 8016aae:	d50e      	bpl.n	8016ace <_vfiprintf_r+0x6a>
 8016ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8016ab4:	b01d      	add	sp, #116	; 0x74
 8016ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016aba:	4b7b      	ldr	r3, [pc, #492]	; (8016ca8 <_vfiprintf_r+0x244>)
 8016abc:	429d      	cmp	r5, r3
 8016abe:	d101      	bne.n	8016ac4 <_vfiprintf_r+0x60>
 8016ac0:	68b5      	ldr	r5, [r6, #8]
 8016ac2:	e7df      	b.n	8016a84 <_vfiprintf_r+0x20>
 8016ac4:	4b79      	ldr	r3, [pc, #484]	; (8016cac <_vfiprintf_r+0x248>)
 8016ac6:	429d      	cmp	r5, r3
 8016ac8:	bf08      	it	eq
 8016aca:	68f5      	ldreq	r5, [r6, #12]
 8016acc:	e7da      	b.n	8016a84 <_vfiprintf_r+0x20>
 8016ace:	89ab      	ldrh	r3, [r5, #12]
 8016ad0:	0598      	lsls	r0, r3, #22
 8016ad2:	d4ed      	bmi.n	8016ab0 <_vfiprintf_r+0x4c>
 8016ad4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016ad6:	f7fb fdf5 	bl	80126c4 <__retarget_lock_release_recursive>
 8016ada:	e7e9      	b.n	8016ab0 <_vfiprintf_r+0x4c>
 8016adc:	2300      	movs	r3, #0
 8016ade:	9309      	str	r3, [sp, #36]	; 0x24
 8016ae0:	2320      	movs	r3, #32
 8016ae2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016ae6:	f8cd 800c 	str.w	r8, [sp, #12]
 8016aea:	2330      	movs	r3, #48	; 0x30
 8016aec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8016cb0 <_vfiprintf_r+0x24c>
 8016af0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016af4:	f04f 0901 	mov.w	r9, #1
 8016af8:	4623      	mov	r3, r4
 8016afa:	469a      	mov	sl, r3
 8016afc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016b00:	b10a      	cbz	r2, 8016b06 <_vfiprintf_r+0xa2>
 8016b02:	2a25      	cmp	r2, #37	; 0x25
 8016b04:	d1f9      	bne.n	8016afa <_vfiprintf_r+0x96>
 8016b06:	ebba 0b04 	subs.w	fp, sl, r4
 8016b0a:	d00b      	beq.n	8016b24 <_vfiprintf_r+0xc0>
 8016b0c:	465b      	mov	r3, fp
 8016b0e:	4622      	mov	r2, r4
 8016b10:	4629      	mov	r1, r5
 8016b12:	4630      	mov	r0, r6
 8016b14:	f7ff ff93 	bl	8016a3e <__sfputs_r>
 8016b18:	3001      	adds	r0, #1
 8016b1a:	f000 80aa 	beq.w	8016c72 <_vfiprintf_r+0x20e>
 8016b1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016b20:	445a      	add	r2, fp
 8016b22:	9209      	str	r2, [sp, #36]	; 0x24
 8016b24:	f89a 3000 	ldrb.w	r3, [sl]
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	f000 80a2 	beq.w	8016c72 <_vfiprintf_r+0x20e>
 8016b2e:	2300      	movs	r3, #0
 8016b30:	f04f 32ff 	mov.w	r2, #4294967295
 8016b34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016b38:	f10a 0a01 	add.w	sl, sl, #1
 8016b3c:	9304      	str	r3, [sp, #16]
 8016b3e:	9307      	str	r3, [sp, #28]
 8016b40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016b44:	931a      	str	r3, [sp, #104]	; 0x68
 8016b46:	4654      	mov	r4, sl
 8016b48:	2205      	movs	r2, #5
 8016b4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016b4e:	4858      	ldr	r0, [pc, #352]	; (8016cb0 <_vfiprintf_r+0x24c>)
 8016b50:	f7e9 fb56 	bl	8000200 <memchr>
 8016b54:	9a04      	ldr	r2, [sp, #16]
 8016b56:	b9d8      	cbnz	r0, 8016b90 <_vfiprintf_r+0x12c>
 8016b58:	06d1      	lsls	r1, r2, #27
 8016b5a:	bf44      	itt	mi
 8016b5c:	2320      	movmi	r3, #32
 8016b5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016b62:	0713      	lsls	r3, r2, #28
 8016b64:	bf44      	itt	mi
 8016b66:	232b      	movmi	r3, #43	; 0x2b
 8016b68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016b6c:	f89a 3000 	ldrb.w	r3, [sl]
 8016b70:	2b2a      	cmp	r3, #42	; 0x2a
 8016b72:	d015      	beq.n	8016ba0 <_vfiprintf_r+0x13c>
 8016b74:	9a07      	ldr	r2, [sp, #28]
 8016b76:	4654      	mov	r4, sl
 8016b78:	2000      	movs	r0, #0
 8016b7a:	f04f 0c0a 	mov.w	ip, #10
 8016b7e:	4621      	mov	r1, r4
 8016b80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016b84:	3b30      	subs	r3, #48	; 0x30
 8016b86:	2b09      	cmp	r3, #9
 8016b88:	d94e      	bls.n	8016c28 <_vfiprintf_r+0x1c4>
 8016b8a:	b1b0      	cbz	r0, 8016bba <_vfiprintf_r+0x156>
 8016b8c:	9207      	str	r2, [sp, #28]
 8016b8e:	e014      	b.n	8016bba <_vfiprintf_r+0x156>
 8016b90:	eba0 0308 	sub.w	r3, r0, r8
 8016b94:	fa09 f303 	lsl.w	r3, r9, r3
 8016b98:	4313      	orrs	r3, r2
 8016b9a:	9304      	str	r3, [sp, #16]
 8016b9c:	46a2      	mov	sl, r4
 8016b9e:	e7d2      	b.n	8016b46 <_vfiprintf_r+0xe2>
 8016ba0:	9b03      	ldr	r3, [sp, #12]
 8016ba2:	1d19      	adds	r1, r3, #4
 8016ba4:	681b      	ldr	r3, [r3, #0]
 8016ba6:	9103      	str	r1, [sp, #12]
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	bfbb      	ittet	lt
 8016bac:	425b      	neglt	r3, r3
 8016bae:	f042 0202 	orrlt.w	r2, r2, #2
 8016bb2:	9307      	strge	r3, [sp, #28]
 8016bb4:	9307      	strlt	r3, [sp, #28]
 8016bb6:	bfb8      	it	lt
 8016bb8:	9204      	strlt	r2, [sp, #16]
 8016bba:	7823      	ldrb	r3, [r4, #0]
 8016bbc:	2b2e      	cmp	r3, #46	; 0x2e
 8016bbe:	d10c      	bne.n	8016bda <_vfiprintf_r+0x176>
 8016bc0:	7863      	ldrb	r3, [r4, #1]
 8016bc2:	2b2a      	cmp	r3, #42	; 0x2a
 8016bc4:	d135      	bne.n	8016c32 <_vfiprintf_r+0x1ce>
 8016bc6:	9b03      	ldr	r3, [sp, #12]
 8016bc8:	1d1a      	adds	r2, r3, #4
 8016bca:	681b      	ldr	r3, [r3, #0]
 8016bcc:	9203      	str	r2, [sp, #12]
 8016bce:	2b00      	cmp	r3, #0
 8016bd0:	bfb8      	it	lt
 8016bd2:	f04f 33ff 	movlt.w	r3, #4294967295
 8016bd6:	3402      	adds	r4, #2
 8016bd8:	9305      	str	r3, [sp, #20]
 8016bda:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016cc0 <_vfiprintf_r+0x25c>
 8016bde:	7821      	ldrb	r1, [r4, #0]
 8016be0:	2203      	movs	r2, #3
 8016be2:	4650      	mov	r0, sl
 8016be4:	f7e9 fb0c 	bl	8000200 <memchr>
 8016be8:	b140      	cbz	r0, 8016bfc <_vfiprintf_r+0x198>
 8016bea:	2340      	movs	r3, #64	; 0x40
 8016bec:	eba0 000a 	sub.w	r0, r0, sl
 8016bf0:	fa03 f000 	lsl.w	r0, r3, r0
 8016bf4:	9b04      	ldr	r3, [sp, #16]
 8016bf6:	4303      	orrs	r3, r0
 8016bf8:	3401      	adds	r4, #1
 8016bfa:	9304      	str	r3, [sp, #16]
 8016bfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016c00:	482c      	ldr	r0, [pc, #176]	; (8016cb4 <_vfiprintf_r+0x250>)
 8016c02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016c06:	2206      	movs	r2, #6
 8016c08:	f7e9 fafa 	bl	8000200 <memchr>
 8016c0c:	2800      	cmp	r0, #0
 8016c0e:	d03f      	beq.n	8016c90 <_vfiprintf_r+0x22c>
 8016c10:	4b29      	ldr	r3, [pc, #164]	; (8016cb8 <_vfiprintf_r+0x254>)
 8016c12:	bb1b      	cbnz	r3, 8016c5c <_vfiprintf_r+0x1f8>
 8016c14:	9b03      	ldr	r3, [sp, #12]
 8016c16:	3307      	adds	r3, #7
 8016c18:	f023 0307 	bic.w	r3, r3, #7
 8016c1c:	3308      	adds	r3, #8
 8016c1e:	9303      	str	r3, [sp, #12]
 8016c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c22:	443b      	add	r3, r7
 8016c24:	9309      	str	r3, [sp, #36]	; 0x24
 8016c26:	e767      	b.n	8016af8 <_vfiprintf_r+0x94>
 8016c28:	fb0c 3202 	mla	r2, ip, r2, r3
 8016c2c:	460c      	mov	r4, r1
 8016c2e:	2001      	movs	r0, #1
 8016c30:	e7a5      	b.n	8016b7e <_vfiprintf_r+0x11a>
 8016c32:	2300      	movs	r3, #0
 8016c34:	3401      	adds	r4, #1
 8016c36:	9305      	str	r3, [sp, #20]
 8016c38:	4619      	mov	r1, r3
 8016c3a:	f04f 0c0a 	mov.w	ip, #10
 8016c3e:	4620      	mov	r0, r4
 8016c40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016c44:	3a30      	subs	r2, #48	; 0x30
 8016c46:	2a09      	cmp	r2, #9
 8016c48:	d903      	bls.n	8016c52 <_vfiprintf_r+0x1ee>
 8016c4a:	2b00      	cmp	r3, #0
 8016c4c:	d0c5      	beq.n	8016bda <_vfiprintf_r+0x176>
 8016c4e:	9105      	str	r1, [sp, #20]
 8016c50:	e7c3      	b.n	8016bda <_vfiprintf_r+0x176>
 8016c52:	fb0c 2101 	mla	r1, ip, r1, r2
 8016c56:	4604      	mov	r4, r0
 8016c58:	2301      	movs	r3, #1
 8016c5a:	e7f0      	b.n	8016c3e <_vfiprintf_r+0x1da>
 8016c5c:	ab03      	add	r3, sp, #12
 8016c5e:	9300      	str	r3, [sp, #0]
 8016c60:	462a      	mov	r2, r5
 8016c62:	4b16      	ldr	r3, [pc, #88]	; (8016cbc <_vfiprintf_r+0x258>)
 8016c64:	a904      	add	r1, sp, #16
 8016c66:	4630      	mov	r0, r6
 8016c68:	f7fb fe3e 	bl	80128e8 <_printf_float>
 8016c6c:	4607      	mov	r7, r0
 8016c6e:	1c78      	adds	r0, r7, #1
 8016c70:	d1d6      	bne.n	8016c20 <_vfiprintf_r+0x1bc>
 8016c72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016c74:	07d9      	lsls	r1, r3, #31
 8016c76:	d405      	bmi.n	8016c84 <_vfiprintf_r+0x220>
 8016c78:	89ab      	ldrh	r3, [r5, #12]
 8016c7a:	059a      	lsls	r2, r3, #22
 8016c7c:	d402      	bmi.n	8016c84 <_vfiprintf_r+0x220>
 8016c7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016c80:	f7fb fd20 	bl	80126c4 <__retarget_lock_release_recursive>
 8016c84:	89ab      	ldrh	r3, [r5, #12]
 8016c86:	065b      	lsls	r3, r3, #25
 8016c88:	f53f af12 	bmi.w	8016ab0 <_vfiprintf_r+0x4c>
 8016c8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016c8e:	e711      	b.n	8016ab4 <_vfiprintf_r+0x50>
 8016c90:	ab03      	add	r3, sp, #12
 8016c92:	9300      	str	r3, [sp, #0]
 8016c94:	462a      	mov	r2, r5
 8016c96:	4b09      	ldr	r3, [pc, #36]	; (8016cbc <_vfiprintf_r+0x258>)
 8016c98:	a904      	add	r1, sp, #16
 8016c9a:	4630      	mov	r0, r6
 8016c9c:	f7fc f8c8 	bl	8012e30 <_printf_i>
 8016ca0:	e7e4      	b.n	8016c6c <_vfiprintf_r+0x208>
 8016ca2:	bf00      	nop
 8016ca4:	08017e4c 	.word	0x08017e4c
 8016ca8:	08017e6c 	.word	0x08017e6c
 8016cac:	08017e2c 	.word	0x08017e2c
 8016cb0:	08018194 	.word	0x08018194
 8016cb4:	0801819e 	.word	0x0801819e
 8016cb8:	080128e9 	.word	0x080128e9
 8016cbc:	08016a3f 	.word	0x08016a3f
 8016cc0:	0801819a 	.word	0x0801819a

08016cc4 <_read_r>:
 8016cc4:	b538      	push	{r3, r4, r5, lr}
 8016cc6:	4d07      	ldr	r5, [pc, #28]	; (8016ce4 <_read_r+0x20>)
 8016cc8:	4604      	mov	r4, r0
 8016cca:	4608      	mov	r0, r1
 8016ccc:	4611      	mov	r1, r2
 8016cce:	2200      	movs	r2, #0
 8016cd0:	602a      	str	r2, [r5, #0]
 8016cd2:	461a      	mov	r2, r3
 8016cd4:	f000 f92c 	bl	8016f30 <_read>
 8016cd8:	1c43      	adds	r3, r0, #1
 8016cda:	d102      	bne.n	8016ce2 <_read_r+0x1e>
 8016cdc:	682b      	ldr	r3, [r5, #0]
 8016cde:	b103      	cbz	r3, 8016ce2 <_read_r+0x1e>
 8016ce0:	6023      	str	r3, [r4, #0]
 8016ce2:	bd38      	pop	{r3, r4, r5, pc}
 8016ce4:	20006884 	.word	0x20006884

08016ce8 <__ascii_wctomb>:
 8016ce8:	b149      	cbz	r1, 8016cfe <__ascii_wctomb+0x16>
 8016cea:	2aff      	cmp	r2, #255	; 0xff
 8016cec:	bf85      	ittet	hi
 8016cee:	238a      	movhi	r3, #138	; 0x8a
 8016cf0:	6003      	strhi	r3, [r0, #0]
 8016cf2:	700a      	strbls	r2, [r1, #0]
 8016cf4:	f04f 30ff 	movhi.w	r0, #4294967295
 8016cf8:	bf98      	it	ls
 8016cfa:	2001      	movls	r0, #1
 8016cfc:	4770      	bx	lr
 8016cfe:	4608      	mov	r0, r1
 8016d00:	4770      	bx	lr
	...

08016d04 <__assert_func>:
 8016d04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016d06:	4614      	mov	r4, r2
 8016d08:	461a      	mov	r2, r3
 8016d0a:	4b09      	ldr	r3, [pc, #36]	; (8016d30 <__assert_func+0x2c>)
 8016d0c:	681b      	ldr	r3, [r3, #0]
 8016d0e:	4605      	mov	r5, r0
 8016d10:	68d8      	ldr	r0, [r3, #12]
 8016d12:	b14c      	cbz	r4, 8016d28 <__assert_func+0x24>
 8016d14:	4b07      	ldr	r3, [pc, #28]	; (8016d34 <__assert_func+0x30>)
 8016d16:	9100      	str	r1, [sp, #0]
 8016d18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016d1c:	4906      	ldr	r1, [pc, #24]	; (8016d38 <__assert_func+0x34>)
 8016d1e:	462b      	mov	r3, r5
 8016d20:	f000 f80e 	bl	8016d40 <fiprintf>
 8016d24:	f000 f880 	bl	8016e28 <abort>
 8016d28:	4b04      	ldr	r3, [pc, #16]	; (8016d3c <__assert_func+0x38>)
 8016d2a:	461c      	mov	r4, r3
 8016d2c:	e7f3      	b.n	8016d16 <__assert_func+0x12>
 8016d2e:	bf00      	nop
 8016d30:	20000080 	.word	0x20000080
 8016d34:	080181a5 	.word	0x080181a5
 8016d38:	080181b2 	.word	0x080181b2
 8016d3c:	080181e0 	.word	0x080181e0

08016d40 <fiprintf>:
 8016d40:	b40e      	push	{r1, r2, r3}
 8016d42:	b503      	push	{r0, r1, lr}
 8016d44:	4601      	mov	r1, r0
 8016d46:	ab03      	add	r3, sp, #12
 8016d48:	4805      	ldr	r0, [pc, #20]	; (8016d60 <fiprintf+0x20>)
 8016d4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8016d4e:	6800      	ldr	r0, [r0, #0]
 8016d50:	9301      	str	r3, [sp, #4]
 8016d52:	f7ff fe87 	bl	8016a64 <_vfiprintf_r>
 8016d56:	b002      	add	sp, #8
 8016d58:	f85d eb04 	ldr.w	lr, [sp], #4
 8016d5c:	b003      	add	sp, #12
 8016d5e:	4770      	bx	lr
 8016d60:	20000080 	.word	0x20000080

08016d64 <_fstat_r>:
 8016d64:	b538      	push	{r3, r4, r5, lr}
 8016d66:	4d07      	ldr	r5, [pc, #28]	; (8016d84 <_fstat_r+0x20>)
 8016d68:	2300      	movs	r3, #0
 8016d6a:	4604      	mov	r4, r0
 8016d6c:	4608      	mov	r0, r1
 8016d6e:	4611      	mov	r1, r2
 8016d70:	602b      	str	r3, [r5, #0]
 8016d72:	f000 f8b5 	bl	8016ee0 <_fstat>
 8016d76:	1c43      	adds	r3, r0, #1
 8016d78:	d102      	bne.n	8016d80 <_fstat_r+0x1c>
 8016d7a:	682b      	ldr	r3, [r5, #0]
 8016d7c:	b103      	cbz	r3, 8016d80 <_fstat_r+0x1c>
 8016d7e:	6023      	str	r3, [r4, #0]
 8016d80:	bd38      	pop	{r3, r4, r5, pc}
 8016d82:	bf00      	nop
 8016d84:	20006884 	.word	0x20006884

08016d88 <_isatty_r>:
 8016d88:	b538      	push	{r3, r4, r5, lr}
 8016d8a:	4d06      	ldr	r5, [pc, #24]	; (8016da4 <_isatty_r+0x1c>)
 8016d8c:	2300      	movs	r3, #0
 8016d8e:	4604      	mov	r4, r0
 8016d90:	4608      	mov	r0, r1
 8016d92:	602b      	str	r3, [r5, #0]
 8016d94:	f000 f8b4 	bl	8016f00 <_isatty>
 8016d98:	1c43      	adds	r3, r0, #1
 8016d9a:	d102      	bne.n	8016da2 <_isatty_r+0x1a>
 8016d9c:	682b      	ldr	r3, [r5, #0]
 8016d9e:	b103      	cbz	r3, 8016da2 <_isatty_r+0x1a>
 8016da0:	6023      	str	r3, [r4, #0]
 8016da2:	bd38      	pop	{r3, r4, r5, pc}
 8016da4:	20006884 	.word	0x20006884

08016da8 <memmove>:
 8016da8:	4288      	cmp	r0, r1
 8016daa:	b510      	push	{r4, lr}
 8016dac:	eb01 0402 	add.w	r4, r1, r2
 8016db0:	d902      	bls.n	8016db8 <memmove+0x10>
 8016db2:	4284      	cmp	r4, r0
 8016db4:	4623      	mov	r3, r4
 8016db6:	d807      	bhi.n	8016dc8 <memmove+0x20>
 8016db8:	1e43      	subs	r3, r0, #1
 8016dba:	42a1      	cmp	r1, r4
 8016dbc:	d008      	beq.n	8016dd0 <memmove+0x28>
 8016dbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016dc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016dc6:	e7f8      	b.n	8016dba <memmove+0x12>
 8016dc8:	4402      	add	r2, r0
 8016dca:	4601      	mov	r1, r0
 8016dcc:	428a      	cmp	r2, r1
 8016dce:	d100      	bne.n	8016dd2 <memmove+0x2a>
 8016dd0:	bd10      	pop	{r4, pc}
 8016dd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016dd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016dda:	e7f7      	b.n	8016dcc <memmove+0x24>

08016ddc <_realloc_r>:
 8016ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016dde:	4607      	mov	r7, r0
 8016de0:	4614      	mov	r4, r2
 8016de2:	460e      	mov	r6, r1
 8016de4:	b921      	cbnz	r1, 8016df0 <_realloc_r+0x14>
 8016de6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016dea:	4611      	mov	r1, r2
 8016dec:	f7fb bc82 	b.w	80126f4 <_malloc_r>
 8016df0:	b922      	cbnz	r2, 8016dfc <_realloc_r+0x20>
 8016df2:	f7ff fc61 	bl	80166b8 <_free_r>
 8016df6:	4625      	mov	r5, r4
 8016df8:	4628      	mov	r0, r5
 8016dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016dfc:	f000 f81b 	bl	8016e36 <_malloc_usable_size_r>
 8016e00:	42a0      	cmp	r0, r4
 8016e02:	d20f      	bcs.n	8016e24 <_realloc_r+0x48>
 8016e04:	4621      	mov	r1, r4
 8016e06:	4638      	mov	r0, r7
 8016e08:	f7fb fc74 	bl	80126f4 <_malloc_r>
 8016e0c:	4605      	mov	r5, r0
 8016e0e:	2800      	cmp	r0, #0
 8016e10:	d0f2      	beq.n	8016df8 <_realloc_r+0x1c>
 8016e12:	4631      	mov	r1, r6
 8016e14:	4622      	mov	r2, r4
 8016e16:	f7fb fc56 	bl	80126c6 <memcpy>
 8016e1a:	4631      	mov	r1, r6
 8016e1c:	4638      	mov	r0, r7
 8016e1e:	f7ff fc4b 	bl	80166b8 <_free_r>
 8016e22:	e7e9      	b.n	8016df8 <_realloc_r+0x1c>
 8016e24:	4635      	mov	r5, r6
 8016e26:	e7e7      	b.n	8016df8 <_realloc_r+0x1c>

08016e28 <abort>:
 8016e28:	b508      	push	{r3, lr}
 8016e2a:	2006      	movs	r0, #6
 8016e2c:	f000 f834 	bl	8016e98 <raise>
 8016e30:	2001      	movs	r0, #1
 8016e32:	f000 f89b 	bl	8016f6c <_exit>

08016e36 <_malloc_usable_size_r>:
 8016e36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016e3a:	1f18      	subs	r0, r3, #4
 8016e3c:	2b00      	cmp	r3, #0
 8016e3e:	bfbc      	itt	lt
 8016e40:	580b      	ldrlt	r3, [r1, r0]
 8016e42:	18c0      	addlt	r0, r0, r3
 8016e44:	4770      	bx	lr

08016e46 <_raise_r>:
 8016e46:	291f      	cmp	r1, #31
 8016e48:	b538      	push	{r3, r4, r5, lr}
 8016e4a:	4604      	mov	r4, r0
 8016e4c:	460d      	mov	r5, r1
 8016e4e:	d904      	bls.n	8016e5a <_raise_r+0x14>
 8016e50:	2316      	movs	r3, #22
 8016e52:	6003      	str	r3, [r0, #0]
 8016e54:	f04f 30ff 	mov.w	r0, #4294967295
 8016e58:	bd38      	pop	{r3, r4, r5, pc}
 8016e5a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016e5c:	b112      	cbz	r2, 8016e64 <_raise_r+0x1e>
 8016e5e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016e62:	b94b      	cbnz	r3, 8016e78 <_raise_r+0x32>
 8016e64:	4620      	mov	r0, r4
 8016e66:	f000 f831 	bl	8016ecc <_getpid_r>
 8016e6a:	462a      	mov	r2, r5
 8016e6c:	4601      	mov	r1, r0
 8016e6e:	4620      	mov	r0, r4
 8016e70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016e74:	f000 b818 	b.w	8016ea8 <_kill_r>
 8016e78:	2b01      	cmp	r3, #1
 8016e7a:	d00a      	beq.n	8016e92 <_raise_r+0x4c>
 8016e7c:	1c59      	adds	r1, r3, #1
 8016e7e:	d103      	bne.n	8016e88 <_raise_r+0x42>
 8016e80:	2316      	movs	r3, #22
 8016e82:	6003      	str	r3, [r0, #0]
 8016e84:	2001      	movs	r0, #1
 8016e86:	e7e7      	b.n	8016e58 <_raise_r+0x12>
 8016e88:	2400      	movs	r4, #0
 8016e8a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016e8e:	4628      	mov	r0, r5
 8016e90:	4798      	blx	r3
 8016e92:	2000      	movs	r0, #0
 8016e94:	e7e0      	b.n	8016e58 <_raise_r+0x12>
	...

08016e98 <raise>:
 8016e98:	4b02      	ldr	r3, [pc, #8]	; (8016ea4 <raise+0xc>)
 8016e9a:	4601      	mov	r1, r0
 8016e9c:	6818      	ldr	r0, [r3, #0]
 8016e9e:	f7ff bfd2 	b.w	8016e46 <_raise_r>
 8016ea2:	bf00      	nop
 8016ea4:	20000080 	.word	0x20000080

08016ea8 <_kill_r>:
 8016ea8:	b538      	push	{r3, r4, r5, lr}
 8016eaa:	4d07      	ldr	r5, [pc, #28]	; (8016ec8 <_kill_r+0x20>)
 8016eac:	2300      	movs	r3, #0
 8016eae:	4604      	mov	r4, r0
 8016eb0:	4608      	mov	r0, r1
 8016eb2:	4611      	mov	r1, r2
 8016eb4:	602b      	str	r3, [r5, #0]
 8016eb6:	f000 f82b 	bl	8016f10 <_kill>
 8016eba:	1c43      	adds	r3, r0, #1
 8016ebc:	d102      	bne.n	8016ec4 <_kill_r+0x1c>
 8016ebe:	682b      	ldr	r3, [r5, #0]
 8016ec0:	b103      	cbz	r3, 8016ec4 <_kill_r+0x1c>
 8016ec2:	6023      	str	r3, [r4, #0]
 8016ec4:	bd38      	pop	{r3, r4, r5, pc}
 8016ec6:	bf00      	nop
 8016ec8:	20006884 	.word	0x20006884

08016ecc <_getpid_r>:
 8016ecc:	f000 b810 	b.w	8016ef0 <_getpid>

08016ed0 <_close>:
 8016ed0:	4b02      	ldr	r3, [pc, #8]	; (8016edc <_close+0xc>)
 8016ed2:	2258      	movs	r2, #88	; 0x58
 8016ed4:	601a      	str	r2, [r3, #0]
 8016ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8016eda:	4770      	bx	lr
 8016edc:	20006884 	.word	0x20006884

08016ee0 <_fstat>:
 8016ee0:	4b02      	ldr	r3, [pc, #8]	; (8016eec <_fstat+0xc>)
 8016ee2:	2258      	movs	r2, #88	; 0x58
 8016ee4:	601a      	str	r2, [r3, #0]
 8016ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8016eea:	4770      	bx	lr
 8016eec:	20006884 	.word	0x20006884

08016ef0 <_getpid>:
 8016ef0:	4b02      	ldr	r3, [pc, #8]	; (8016efc <_getpid+0xc>)
 8016ef2:	2258      	movs	r2, #88	; 0x58
 8016ef4:	601a      	str	r2, [r3, #0]
 8016ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8016efa:	4770      	bx	lr
 8016efc:	20006884 	.word	0x20006884

08016f00 <_isatty>:
 8016f00:	4b02      	ldr	r3, [pc, #8]	; (8016f0c <_isatty+0xc>)
 8016f02:	2258      	movs	r2, #88	; 0x58
 8016f04:	601a      	str	r2, [r3, #0]
 8016f06:	2000      	movs	r0, #0
 8016f08:	4770      	bx	lr
 8016f0a:	bf00      	nop
 8016f0c:	20006884 	.word	0x20006884

08016f10 <_kill>:
 8016f10:	4b02      	ldr	r3, [pc, #8]	; (8016f1c <_kill+0xc>)
 8016f12:	2258      	movs	r2, #88	; 0x58
 8016f14:	601a      	str	r2, [r3, #0]
 8016f16:	f04f 30ff 	mov.w	r0, #4294967295
 8016f1a:	4770      	bx	lr
 8016f1c:	20006884 	.word	0x20006884

08016f20 <_lseek>:
 8016f20:	4b02      	ldr	r3, [pc, #8]	; (8016f2c <_lseek+0xc>)
 8016f22:	2258      	movs	r2, #88	; 0x58
 8016f24:	601a      	str	r2, [r3, #0]
 8016f26:	f04f 30ff 	mov.w	r0, #4294967295
 8016f2a:	4770      	bx	lr
 8016f2c:	20006884 	.word	0x20006884

08016f30 <_read>:
 8016f30:	4b02      	ldr	r3, [pc, #8]	; (8016f3c <_read+0xc>)
 8016f32:	2258      	movs	r2, #88	; 0x58
 8016f34:	601a      	str	r2, [r3, #0]
 8016f36:	f04f 30ff 	mov.w	r0, #4294967295
 8016f3a:	4770      	bx	lr
 8016f3c:	20006884 	.word	0x20006884

08016f40 <_sbrk>:
 8016f40:	4b04      	ldr	r3, [pc, #16]	; (8016f54 <_sbrk+0x14>)
 8016f42:	6819      	ldr	r1, [r3, #0]
 8016f44:	4602      	mov	r2, r0
 8016f46:	b909      	cbnz	r1, 8016f4c <_sbrk+0xc>
 8016f48:	4903      	ldr	r1, [pc, #12]	; (8016f58 <_sbrk+0x18>)
 8016f4a:	6019      	str	r1, [r3, #0]
 8016f4c:	6818      	ldr	r0, [r3, #0]
 8016f4e:	4402      	add	r2, r0
 8016f50:	601a      	str	r2, [r3, #0]
 8016f52:	4770      	bx	lr
 8016f54:	20004fc4 	.word	0x20004fc4
 8016f58:	20006888 	.word	0x20006888

08016f5c <_write>:
 8016f5c:	4b02      	ldr	r3, [pc, #8]	; (8016f68 <_write+0xc>)
 8016f5e:	2258      	movs	r2, #88	; 0x58
 8016f60:	601a      	str	r2, [r3, #0]
 8016f62:	f04f 30ff 	mov.w	r0, #4294967295
 8016f66:	4770      	bx	lr
 8016f68:	20006884 	.word	0x20006884

08016f6c <_exit>:
 8016f6c:	e7fe      	b.n	8016f6c <_exit>
	...

08016f70 <_init>:
 8016f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f72:	bf00      	nop
 8016f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016f76:	bc08      	pop	{r3}
 8016f78:	469e      	mov	lr, r3
 8016f7a:	4770      	bx	lr

08016f7c <_fini>:
 8016f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f7e:	bf00      	nop
 8016f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016f82:	bc08      	pop	{r3}
 8016f84:	469e      	mov	lr, r3
 8016f86:	4770      	bx	lr
